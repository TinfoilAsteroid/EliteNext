# file opened: eliteNext.asm
   1  0000                              DISPLAY "-------------------------------------------------------------------------------------------------------------------------"
   2  0000                              DISPLAY "MASTER TODO LIST"
   3  0000                              DISPLAY "-------------------------------------------------------------------------------------------------------------------------"
   4  0000                              DISPLAY "TODO: Optimisation"
   5  0000                              DISPLAY "TODO: Review spawn logic for crash"
   6  0000                              DISPLAY "TODO: Add space station safe boundary indicator"
   7  0000                              DISPLAY "TODO: Optimise apply my to planets and sun to consider if 24 bit can be doen using 16 bit if sgn is just a sign bit"
   8  0000                              DISPLAY "TODO: Verify post hyper space"
   9  0000                              DISPLAY "TODO: Why no count down text sometimes"
  10  0000                              DISPLAY "TODO: Galaxy drive jump"
  11  0000                              DISPLAY "TODO: Different missile types"
  12  0000                              DISPLAY "TODO: Log divide maths"
  13  0000                              DISPLAY "TODO: Optimise for solid fill"
  14  0000                              DISPLAY "TODO: Load and save commander logic"
  15  0000                              DISPLAY "TODO: chars and displays into 80 column mode"
  16  0000                              DISPLAY "TODO: Mission coding"
  17  0000                              DISPLAY "TODO: Improve laser code"
  18  0000                              DISPLAY "TODO: Improve chart cursor code"
  19  0000                              DISPLAY "TODO: Test joystick"
  20  0000                              DISPLAY "TODO: Test exetended keys"
  21  0000                              DISPLAY "TODO: Line drawing colour improvement"
  22  0000                              DISPLAY "TODO: Remove meridian code"
  23  0000                              DISPLAY "TODO: Sound FXs"
  24  0000                              DISPLAY "TODO: Jump stop bong noise"
  25  0000                              DISPLAY "TODO: Switch radar range functionality"
  26  0000                              DISPLAY "TODO: Add in damage status displays"
  27  0000                              DISPLAY "TODO: Bug random dissapearance of ship in front view after time"
  28  0000                              DISPLAY "TODO: Bug random flattening of ship in front view after time"
  29  0000                              DISPLAY "TODO: Bug random exploising of station in front view after time, seems to affect short distance out"
  30  0000                              DISPLAY "TODO: System map, showing planet, sun, space station and ship position, flat map compress Z, perhaps a +/- height value, say +/- character for every + 40 on z sign?"
  31  0000                              DISPLAY "-------------------------------------------------------------------------------------------------------------------------"
  32  0000                              DISPLAY "DONE: Clean up console and remove compasses"
  33  0000                              DISPLAY "DONE: Re-Write of Tidy"
  34  0000                              DISPLAY "DONE: Apply my Roll and Pitch to 24 bit"
  35  0000                              DISPLAY "DONE: Move compases to border"
  36  0000                              DISPLAY "DONE: Removed test harness code and moved to Test folder"
  37  0000                              DISPLAY "-------------------------------------------------------------------------------------------------------------------------"
  38  0000
  39  0000
  40  0000
  41  0000                  DEVICE ZXSPECTRUMNEXT
  42  0000                  SLDOPT COMMENT WPMEM, LOGPOINT, ASSERTION
  43  0000                  ;DEFINE  STARTUPDIAGS 1              ; use for displaying sprite data on start up for basic diagnostics
  44  0000                  DEFINE  DOUBLEBUFFER 1
  45  0000                  DEFINE  LATECLIPPING 1
  46  0000                  DEFINE  SIMPLEWARP   1
  47  0000                  DEFINE  USE_NORMALISE_IX 1          ; use the replacemtn normaliseix (now should be always used)
  48  0000                  DEFINE  USE_24BIT_ROLL_AND_PITCH 1  ; Use 24 bit maths always
  49  0000                  ;DEFINE  ROUND_ROLL_AND_PITCH    1  ; Forces rouding of rotmat matricies to 8 bit
  50  0000                  ;DEFINE  FORCE_TIDY 1               ; Forces call to Tidy every iteration
  51  0000                  DEFINE  BYPASS_TIDY 1               ; Forces tidy routine to return even if force FORCE_TIDY was enabled
  52  0000                  ;DEFINE  SPAWN_SHIP_DISABLED  1      ; Forces spawn event to immedatly return rather than do anything
  53  0000                  ;DEFINE DEBUGCIRCLE1 1
  54  0000                  ;DEFINE DEBUGCIRCLE2 1
  55  0000                  ;DEFINE DEBUGCIRCLE3 1
  56  0000                  ;DEFINE DEBUGCIRCLE4 1
  57  0000                  ;DEFINE DEBUGCIRCLE5 1
  58  0000                  ;DEFINE DEBUGCIRCLE6 1
  59  0000                  ;DEFINE  DEBUGPLANET 1
  60  0000                  ;DEFINE  DEBUGPLANETCIRCLE 1
  61  0000                  ;DEFINE  MERIDANLINEDEBUG 1
  62  0000                  DEFINE  PLANETSARESOLID 1
  63  0000                  ;DEFINE DEBUG_LL122_DIRECT 1 ; PASS
  64  0000                  ;DEFINE DEBUG_LL121_DIRECT 1 ; PASS
  65  0000                  ;DEFINE DEBUG_LL129_DIRECT 1 ; PASS
  66  0000                  ;DEFINE DEBUG_LL120_DIRECT 1 ; PASS
  67  0000                  ;DEFINE DEBUG_LL123_DIRECT 1 ; PASS
  68  0000                  ;DEFINE DEBUG_LL118_DIRECT 1
  69  0000                  ;DEFINE DEBUG_LL128_DIRECT
  70  0000              ;                  DEFINE DEBUG_LL123_DIRECT 1
  71  0000              ;                  DEFINE DEBUG_LL118_DIRECT 1
  72  0000              ;                  DEFINE DEBUG_LL28_6502
  73  0000                                ;DEFINE DEBUG_LL145_6502 1
  74  0000              ;                DEFINE DEBUG_LL129
  75  0000               ;               DEFINE DEBUG_LL120 1
  76  0000                         ; DEFINE DEBUGCLIP 1
  77  0000                  ;DEFINE SKIPATTRACTMUSIC 1
  78  0000                  ;DEFINE SKIPATTRACTGRAPHICS 1
  79  0000                  ;DEFINE  SKIPATTRACT 1
  80  0000                  ;DEFINE  LOGDIVIDEDEBUG 1
  81  0000                  ; DEFINE  BLINEDEBUG 1
  82  0000                  ;DEFINE  TESTMERIDIAN 1
  83  0000                  ;DEFINE  CLIPVersion3 1
  84  0000                  ;DEFINE  LOGMATHS     1
  85  0000                  ;DEFINE  DIAGSPRITES 1
  86  0000              ;    DEFINE   SKIPATTRACT
  87  0000                  ; DEFINE DEBUGMISSILETEST 1
  88  0000                  ; DEFINE DEBUGLINEDRAW 1
  89  0000                   DEFINE  LASER_V2    1
  90  0000               CSPECTMAP eliteN.map
  91  0000               OPT --zxnext=cspect --syntax=a --reversepop
  92  0000                              DEFINE  SOUNDPACE 3
  93  0000              ;                DEFINE  ENABLE_SOUND 1
  94  0000                             DEFINE     MAIN_INTERRUPTENABLE 1
  95  0000              ;               DEFINE INTERRUPT_BLOCKER 1
  96  0000              DEBUGSEGSIZE   equ 1
  97  0000              DEBUGLOGSUMMARY equ 1
  98  0000              ;DEBUGLOGDETAIL equ 1
  99  0000
 100  0000              ;----------------------------------------------------------------------------------------------------------------------------------
 101  0000              ; Game Defines
 102  0000              ScreenLocal      EQU 0
 103  0000              ScreenGalactic   EQU ScreenLocal + 1
 104  0000              ScreenMarket     EQU ScreenGalactic + 1
 105  0000              ScreenMarketDsp  EQU ScreenMarket + 1
 106  0000              ScreenStatus     EQU ScreenMarketDsp + 1
 107  0000              ScreenInvent     EQU ScreenStatus + 1
 108  0000              ScreenPlanet     EQU ScreenInvent + 1
 109  0000              ScreenEquip      EQU ScreenPlanet + 1
 110  0000              ScreenLaunch     EQU ScreenEquip + 1
 111  0000              ScreenFront      EQU ScreenLaunch + 1
 112  0000              ScreenAft        EQU ScreenFront+1
 113  0000              ScreenLeft       EQU ScreenAft+1
 114  0000              ScreenRight      EQU ScreenLeft+1
 115  0000              ScreenDocking    EQU ScreenRight+1
 116  0000              ScreenHyperspace EQU ScreenDocking+1
 117  0000              ;----------------------------------------------------------------------------------------------------------------------------------
 118  0000              ; Colour Defines
 119  0000                  INCLUDE "./Hardware/L2ColourDefines.asm"
# file opened: ./Hardware/L2ColourDefines.asm
   1+ 0000              L2ColourBLACK           EQU   0
   2+ 0000              L2ColourRED_1           EQU 224                 ; RGB 255,  0,  0
   3+ 0000              L2ColourRED_2           EQU 192                 ; RGB 218,  0,  0
   4+ 0000              L2ColourRED_3           EQU 160                 ; RGB 182,  0,  0
   5+ 0000              L2ColourRED_4           EQU 128                 ; RGB 145,  0,  0
   6+ 0000              L2ColourRED_5           EQU  96                 ; RGB 109,  0,  0
   7+ 0000              L2ColourRED_6           EQU  64                 ; RGB  72,  0,  0
   8+ 0000              L2ColourRED_7           EQU  32                 ; RGB  36,  0,  0
   9+ 0000              L2ColourYELLOW_1        EQU 252                 ; RGB 255,255,  0
  10+ 0000              L2ColourYELLOW_2        EQU 216                 ; RGB 218,218,  0
  11+ 0000              L2ColourYELLOW_3        EQU 180                 ; RGB 182,182,  0
  12+ 0000              L2ColourYELLOW_4        EQU 144                 ; RGB 145,145,  0
  13+ 0000              L2ColourYELLOW_5        EQU 108                 ; RGB 109.109,  0
  14+ 0000              L2ColourYELLOW_6        EQU  72                 ; RGB  72, 72,  0
  15+ 0000              L2ColourYELLOW_7        EQU  36                 ; RGB  36, 36,  0
  16+ 0000              L2ColourGREEN_1		    EQU  28                 ; RGB   0,255,  0
  17+ 0000              L2ColourGREEN_2		    EQU  24                 ; RGB   0,218,  0
  18+ 0000              L2ColourGREEN_3		    EQU  16                 ; RGB   0,145,  0
  19+ 0000              L2ColourGREEN_4         EQU  12                 ; RGB   0,109,  0
  20+ 0000              L2ColourGREEN_5         EQU   8                 ; RGB   0, 72,  0
  21+ 0000              L2ColourGREEN_6         EQU   4                 ; RGB   0, 36,  0
  22+ 0000              L2ColourBLUE_1          EQU   3                 ; RGB 0,0,255
  23+ 0000              L2ColourBLUE_2          EQU   2                 ; RGB 0,0,170
  24+ 0000              L2ColourBLUE_3          EQU   1                 ; RGB 0,0,85
  25+ 0000
  26+ 0000
  27+ 0000              L2ColourWHITE_1         EQU 255                 ; RGB 255,255,255
  28+ 0000              L2ColourWHITE_2         EQU 146
  29+ 0000              L2ColourGREY_1		    EQU L2ColourWHITE_2
  30+ 0000              L2ColourGREY_2		    EQU 109
  31+ 0000              L2ColourGREY_3		    EQU  73
  32+ 0000              L2ColourGREY_4		    EQU  37
  33+ 0000
  34+ 0000              L2ColourGREEN_MB        EQU  29                 ;RGB 0,255,85
  35+ 0000              L2ColourGREEN_MR        EQU 124                 ;RGB 109.255,0
  36+ 0000              L2ColourCREAM_1         EQU 218                 ; RGB 218,218,170
  37+ 0000              L2ColourCREAM_2         EQU 182                 ; RGB 182,182,170
  38+ 0000              L2ColourCREAM_3         EQU 146                 ; RGB 145,145,170
  39+ 0000
  40+ 0000              L2ColourTRANSPARENT     EQU 227                 ; RGB 255,  0,255
  41+ 0000              L2ColourMAGENTA_1       EQU 162                 ; RGB 182,  0,170
  42+ 0000              L2ColourMAGENTA_2       EQU 130                 ; RGB 145,  0,170
  43+ 0000              L2ColourMAGENTA_3       EQU  97                 ; RGB 109,  0, 85
  44+ 0000              L2ColourMAGENTA_4       EQU  65                 ; RGB  72,  0, 85
  45+ 0000              L2ColourORANGE_1        EQU 236                 ; RGB
  46+ 0000              L2ColourORANGE_2        EQU 168                 ; RGB
  47+ 0000              L2ColourORANGE_3        EQU  68                 ; RGB
  48+ 0000              L2ColourCYAN_1          EQU  31                 ; RGB   0,255, 255
  49+ 0000              L2ColourCYAN_2          EQU  18                 ; RGB
  50+ 0000              L2ColourCYAN_3          EQU   9                 ; RGB
  51+ 0000              L2ColourPURPLE_1        EQU 109                 ; RGB
  52+ 0000              L2ColourPURPLE_2        EQU  66                 ; RGB
  53+ 0000              L2ColourPURPLE_3        EQU  33                 ; RGB
  54+ 0000              L2ColourPINK_1		    EQU 231                 ; RGB
  55+ 0000              L2ColourPINK_2		    EQU 226                 ; RGB
  56+ 0000              L2ColourPINK_3		    EQU 225                 ; RGB
  57+ 0000              L2ColourPINK_4		    EQU 224                 ; RGB
  58+ 0000
# file closed: ./Hardware/L2ColourDefines.asm
 120  0000                  INCLUDE "./Hardware/L1ColourDefines.asm"
# file opened: ./Hardware/L1ColourDefines.asm
   1+ 0000
   2+ 0000              L1ColourInkBlack        EQU %00000000
   3+ 0000              L1ColourInkBlue         EQU %00000001
   4+ 0000              L1ColourInkRed          EQU %00000010
   5+ 0000              L1ColourInkMagenta      EQU %00000011
   6+ 0000              L1ColourInkGreen        EQU %00000100
   7+ 0000              L1ColourInkCyan         EQU %00000101
   8+ 0000              L1ColourInkYellow       EQU %00000110
   9+ 0000              L1ColourInkWhite        EQU %00000111
  10+ 0000              L1ColourPaperBlack      EQU %00000000
  11+ 0000              L1ColourPaperBlue       EQU %00001000
  12+ 0000              L1ColourPaperRed        EQU %00010000
  13+ 0000              L1ColourPaperMagenta    EQU %00011000
  14+ 0000              L1ColourPaperGreen      EQU %00100000
  15+ 0000              L1ColourPaperCyan       EQU %00101000
  16+ 0000              L1ColourPaperYellow     EQU %00110000
  17+ 0000              L1ColourPaperWhite      EQU %00111000
  18+ 0000              L1ColourFlash           EQU %10000000
  19+ 0000              L1ColourBright          EQU %01000000
  20+ 0000              ;----------------------------------------------------------------------------------------------------------------------------------
  21+ 0000              ; Screen Specific Colour Defines
  22+ 0000              L1InvHighlight          EQU L1ColourBright | L1ColourPaperRed   | L1ColourInkYellow
  23+ 0000              L1InvLowlight           EQU                  L1ColourPaperBlack | L1ColourInkWhite
# file closed: ./Hardware/L1ColourDefines.asm
 121  0000              ;----------------------------------------------------------------------------------------------------------------------------------
 122  0000              ; Total screen list
 123  0000              ; Local Chart
 124  0000              ; Galactic Chart
 125  0000              ; Market Prices
 126  0000              ; Inventory
 127  0000              ; Comander status
 128  0000              ; System Data
 129  0000              ; Mission Briefing
 130  0000              ; missio completion
 131  0000              ; Docked  Menu (only place otehr than pause you can load and save)
 132  0000              ; Pause Menu (only place you can load from )
 133  0000              ; byint and selling equipment
 134  0000              ; bying and selling stock
 135  0000
 136  0000                                      INCLUDE "./Hardware/register_defines.asm"
# file opened: ./Hardware/register_defines.asm
   1+ 0000              ; Peripheral 2
   2+ 0000              ENABLE_CPU_SPEED_MODE                   EQU %10000000
   3+ 0000              DIVERT_BEEP_ONLY                        EQU %01000000
   4+ 0000              ENABLE_50_60_SWITCH                     EQU %00100000
   5+ 0000              ENABLE_MMCAUTO_SWITCH                   EQU %00010000
   6+ 0000              ENABLE_MULTIFACE_M1                     EQU %00001000
   7+ 0000              PS2MODE_KEYBOARD                        EQU %00000000
   8+ 0000              PS2MODE_MOUSE                           EQU %00000100
   9+ 0000              AUDIO_CHIPMODE_YM                       EQU %00000000
  10+ 0000              AUDIO_CHIPMODE_AY                       EQU %00000001
  11+ 0000              AUDIO_CHIPMODE_DISABLED                 EQU %00000010
  12+ 0000              INTERNAL_SPEAKER_ENABLE                 EQU %00010000
  13+ 0000              ; Peripheral 3
  14+ 0000              UNLOCK_PORT_7FFD_PAGING                 EQU %10000000
  15+ 0000              DISABLE_RAM_IO_CONTENTION               EQU %01000000
  16+ 0000              AY_STEREO_MODE_ACB                      EQU %00100000
  17+ 0000              INTERNAL_SPEAKER                        EQU %00010000
  18+ 0000              ENABLE_DACS                             EQU %00001000
  19+ 0000              ENABLE_TIMEX_VIDEO_MODE                 EQU %00000100
  20+ 0000              ENABLE_TURBO_SOUND                      EQU %00000010
  21+ 0000              ENABLE_ISSUE2_KEYBOARD                  EQU %00000001
  22+ 0000              ; Peripheral 4
  23+ 0000              ENABLE_AY2_MONO                         EQU %10000000
  24+ 0000              ENABLE_AY1_MONO                         EQU %01000000
  25+ 0000              ENABLE_AY0_MONO                         EQU %00100000
  26+ 0000              SPRITE_ID_LOCKSTEP                      EQU %00010000
  27+ 0000              RESET_DIVMMC_MAPRAM                     EQU %00001000
  28+ 0000              SILENCE_HDMI_AUDIO                      EQU %00000100
  29+ 0000              SCALLINES_50PCT                         EQU %00000001
  30+ 0000              SCANLINES_25PCT                         EQU %00000010
  31+ 0000              SCANLINES_125PCT                        EQU %00000011
  32+ 0000              ; Audio Registers
  33+ 0000              CHANNEL_A_FINE                          EQU 0
  34+ 0000              CHANNEL_A_COARSE                        EQU 1
  35+ 0000              CHANNEL_B_FINE                          EQU 2
  36+ 0000              CHANNEL_B_COARSE                        EQU 3
  37+ 0000              CHANNEL_C_FINE                          EQU 4
  38+ 0000              CHANNEL_C_COARSE                        EQU 5
  39+ 0000              NOISE_PERIOD                            EQU 6
  40+ 0000              TONE_ENABLE                             EQU 7
  41+ 0000              CHANNEL_A_AMPLITUDE                     EQU 8
  42+ 0000              CHANNEL_B_AMPLITUDE                     EQU 9
  43+ 0000              CHANNEL_C_AMPLITUDE                     EQU 10
  44+ 0000              ENVELOPE_PERIOD_FINE                    EQU 11
  45+ 0000              ENVELOPE_PERIOD_COARSE                  EQU 12
  46+ 0000              ENVELOPE_SHAPE                          EQU 13
  47+ 0000
  48+ 0000              ENVELOPE_HOLD_ON                        EQU 1
  49+ 0000              ENVELOPE_ALTERNATE_ON                   EQU 2
  50+ 0000              ENVELOPE_ATTACK_ON                      EQU 4
  51+ 0000              ENVELOPE_CONTINUE_ON                    EQU 8
  52+ 0000
  53+ 0000              ENVELOPE_SHAPE_SINGLE_DECAY             EQU 0                                                                                    ; \____________
  54+ 0000              ENVELOPE_SHAPE_SINGLE_ATTACK            EQU                        ENVELOPE_ATTACK_ON                                            ; /|___________
  55+ 0000              ENVELOPE_SHAPE_REPEAT_DECAY             EQU ENVELOPE_CONTINUE_ON                                                                 ; \|\|\|\|\|\|\
  56+ 0000              ENVELOPE_SHAPE_REPEAT_DECAY_ATTACK      EQU ENVELOPE_CONTINUE_ON |                      ENVELOPE_ALTERNATE_ON                    ; \/\/\/\/\/\/\
  57+ 0000              ENVELOPE_SHAPE_SINGLE_DECAY_HOLD        EQU ENVELOPE_CONTINUE_ON |                      ENVELOPE_ALTERNATE_ON | ENVELOPE_HOLD_ON ; \|-----------
  58+ 0000              ENVELOPE_SHAPE_REPEAT_ATTACK            EQU ENVELOPE_CONTINUE_ON | ENVELOPE_ATTACK_ON                                            ; /|/|/|/|/|/|/|
  59+ 0000              ENVELOPE_SHAPE_SINGLE_ATTACK_HOLD       EQU ENVELOPE_CONTINUE_ON | ENVELOPE_ATTACK_ON |                         ENVELOPE_HOLD_ON ; /------------
  60+ 0000              ENVELOPE_SHAPE_REPEAT_ATTACK_DECAY      EQU ENVELOPE_CONTINUE_ON | ENVELOPE_ATTACK_ON | ENVELOPE_ALTERNATE_ON                    ; /\/\/\/\/\/\/
  61+ 0000
  62+ 0000              ENVELOPE_HOLD                           EQU %00000001
  63+ 0000              ENVELOPE_ALTERNATE                      EQU %00000010
  64+ 0000              ENVELOPE_ATTACK                         EQU %00000010
  65+ 0000              ENVELOPE_CONTINUE                       EQU %00000010
  66+ 0000              ; Sound Control
  67+ 0000              TONE_CHANNEL_A                          EQU %00000001
  68+ 0000              TONE_CHANNEL_B                          EQU %00000010
  69+ 0000              TONE_CHANNEL_C                          EQU %00000100
  70+ 0000              NOISE_CHANNEL_A                         EQU %00001000
  71+ 0000              NOISE_CHANNEL_B                         EQU %00010000
  72+ 0000              NOISE_CHANNEL_C                         EQU %00100000
  73+ 0000              ; Version for AND to enabled (its inverted)
  74+ 0000              TONE_CHANNEL_A_ON                       EQU %11111110
  75+ 0000              TONE_CHANNEL_B_ON                       EQU %11111101
  76+ 0000              TONE_CHANNEL_C_ON                       EQU %11111011
  77+ 0000              NOISE_CHANNEL_A_ON                      EQU %11110111
  78+ 0000              NOISE_CHANNEL_B_ON                      EQU %11101111
  79+ 0000              NOISE_CHANNEL_C_ON                      EQU %11011111
  80+ 0000
  81+ 0000              ; Turbo Sound Control
  82+ 0000              TURBO_MANDATORY                         EQU %10011100
  83+ 0000              TURBO_LEFT                              EQU %01000000
  84+ 0000              TURBO_RIGHT                             EQU %00100000
  85+ 0000              TURBO_CHIP_AY3                          EQU %00000011
  86+ 0000              TURBO_CHIP_AY2                          EQU %00000010
  87+ 0000              TURBO_CHIP_AY1                          EQU %00000001
  88+ 0000
  89+ 0000              IO_LAYER2_PORT                          EQU $123B
  90+ 0000              IO_EXT_BANK_PORT 			            EQU $DFFD ; 57341
  91+ 0000              IO_BANK_PORT                            EQU $7FFD ; 32765
  92+ 0000              REGISTER_NUMBER_PORT					EQU $243B
  93+ 0000              REGISTER_VALUE_PORT						EQU $253B
  94+ 0000              SPRITE_SLOT_PORT						EQU $303B ; port for sprite and pattern index
  95+ 0000              SPRITE_INFO_PORT                        EQU $0057
  96+ 0000              SPRITE_PATTERN_UPLOAD_PORT				EQU $005B
  97+ 0000              TURBO_SOUND_NEXT_CONTROL                EQU $FFFD
  98+ 0000              SOUND_CHIP_REGISTER_WRITE               EQU $BFFD
  99+ 0000              IO_KEYBOARD_PORT                        EQU $FE
 100+ 0000              IO_DATAGEAR_DMA_PORT 		            EQU $6B
 101+ 0000              UART_TX_PORT_PORT                       EQU $133B
 102+ 0000              UART_RX_PORT_PORT                       EQU $143B
 103+ 0000              UART_CONTROL_PORT                       EQU $153B
 104+ 0000              UART_FRAME_PORT                         EQU $163B
 105+ 0000              CTC_CHANNEL1_PORT                       EQU $183B
 106+ 0000              CTC_CHANNEL2_PORT                       EQU $193B
 107+ 0000              CTC_CHANNEL3_PORT                       EQU $1A3B
 108+ 0000              CTC_CHANNEL4_PORT                       EQU $1B3B
 109+ 0000              PLUS_3_MEMORY_PAGING_CONTROL_PORT       EQU $1FFD
 110+ 0000              MB02_DMA_PORT                           EQU $0B
 111+ 0000              SPECDRUM_DAC_OUTPUT                     EQU $DF
 112+ 0000
 113+ 0000              Speed_3_5MHZ                            EQU 0
 114+ 0000              Speed_7MHZ                              EQU 1
 115+ 0000              Speed_14MHZ                             EQU 2
 116+ 0000              Speed_28MHZ                             EQU 3
 117+ 0000
 118+ 0000
 119+ 0000              MACHINE_ID_REGISTER						EQU $00
 120+ 0000              VERSION_REGISTER						EQU $01
 121+ 0000              RESET_REGISTER		    				EQU $02
 122+ 0000              MACHINE_TYPE_REGISTER					EQU $03
 123+ 0000              PAGE_RAM_REGISTER						EQU $04
 124+ 0000              PERIPHERAL_1_REGISTER					EQU $05   ; Sets joystick mode, video frequency and Scandoubler
 125+ 0000              PERIPHERAL_2_REGISTER					EQU $06   ; Enables CPU Speed key, DivMMC, Multiface, Mouse and AY audio.
 126+ 0000              TURBO_MODE_REGISTER						EQU $07
 127+ 0000              PERIPHERAL_3_REGISTER					EQU $08   ; ABC/ACB Stereo, Internal Speaker, SpecDrum, Timex Video Modes, Turbo Sound Next, RAM contention and [un]lock 128k paging
 128+ 0000              PERIPHERAL_4_REGISTER                   EQU $09   ; Sets scanlines, AY mono output, Sprite-id lockstep, reset DivMMC mapram and disable HDMI audio
 129+ 0000              PERIPHERAL_5_REGISTER                   EQU $0A  ; Mouse
 130+ 0000              CORE_VERSION_REGISTER                   EQU $0E
 131+ 0000              ANTI_BRICK_SYSTEM_REGISTER				EQU $10
 132+ 0000              VIDEO_TIMING_REGISTER                   EQU $11
 133+ 0000              LAYER2_RAM_PAGE_REGISTER				EQU $12
 134+ 0000              LAYER2_RAM_SHADOW_REGISTER      		EQU $13
 135+ 0000              TRANSPARENCY_COLOUR_REGISTER			EQU $14
 136+ 0000              SPRITE_LAYERS_SYSTEM_REGISTER			EQU $15
 137+ 0000              LAYER2_OFFSET_X_REGISTER				EQU $16
 138+ 0000              LAYER2_OFFSET_Y_REGISTER				EQU $17
 139+ 0000              CLIP_WINDOW_LAYER2_REGISTER				EQU $18
 140+ 0000              CLIP_WINDOW_SPRITES_REGISTER			EQU $19
 141+ 0000              CLIP_WINDOW_ULA_REGISTER				EQU $1A
 142+ 0000              CLIP_WINDOW_TILEMAP_REGISTER            EQU $1B
 143+ 0000              CLIP_WINDOW_CONTROL_REGISTER			EQU $1C
 144+ 0000              ;29 not used
 145+ 0000              ACTIVE_VIDEO_LINE_MSB_REGISTER			EQU $1E
 146+ 0000              ACTIVE_VIDEO_LINE_LSB_REGISTER			EQU $1F
 147+ 0000              ; 32 to 34 not used
 148+ 0000              LINE_INTERRUPT_CONTROL_REGISTER			EQU $22
 149+ 0000              LINE_INTERRUPT_VALUE_LSB_REGISTER		EQU $23
 150+ 0000              ULA_X_OFFSET_REGISTER                   EQU $26
 151+ 0000              ULA_Y_OFFSET_REGSITER                   EQU $27
 152+ 0000              KEYMAP_HIGH_ADDRESS_REGISTER			EQU $28
 153+ 0000              KEYMAP_LOW_ADDRESS_REGISTER				EQU $29
 154+ 0000              KEYMAP_HIGH_DATA_REGISTER				EQU $2A
 155+ 0000              KEYMAP_LOW_DATA_REGISTER				EQU $2B
 156+ 0000              DAC_B_MIRROR_REGISTER                   EQU $2C
 157+ 0000              DAC_AB_MIRROR_REGISTER                  EQU $2D
 158+ 0000              DAC_C_MORROR_REGISTER                   EQU $2E
 159+ 0000              TILEMAP_OFFSET_XMSB_REGISTER            EQU $2F
 160+ 0000              TILEMAP_OFFSET_XLSB_REGISTER            EQU $30
 161+ 0000              TILEMAP_OFFSET_YMSB_REGISTER            EQU $31
 162+ 0000              LORES_OFFSET_X_REGISTER					EQU $32
 163+ 0000              LORES_OFFSET_Y_REGISTER					EQU $33
 164+ 0000              SPRITE_PORT_INDEX_REGISTER              EQU $34
 165+ 0000              SPRITE_PORT_ATTR0_REGISTER              EQU $35
 166+ 0000              SPRITE_PORT_ATTR1_REGISTER              EQU $36
 167+ 0000              SPRITE_PORT_ATTR2_REGISTER              EQU $37
 168+ 0000              SPRITE_PORT_ATTR3_REGISTER              EQU $38
 169+ 0000              SPRITE_PORT_ATTR4_REGISTER              EQU $39
 170+ 0000              PALETTE_INDEX_REGISTER					EQU $40
 171+ 0000              PALETTE_VALUE_8BIT_REGISTER				EQU $41
 172+ 0000              PALETTE_FORMAT_REGISTER					EQU $42
 173+ 0000              PALETTE_CONTROL_REGISTER				EQU $43
 174+ 0000              PALETTE_VALUE_9BIT_REGISTER				EQU $44
 175+ 0000              TRANSPARENCY_COLOUR_FALLBACK_REGISTER   EQU $4A
 176+ 0000              SPRITES_TRANSPARENCY_INDEX_REGISTER     EQU $4B
 177+ 0000              TILEMAP_TRANSPARENCY_INDEX_REGISTER     EQU $4C
 178+ 0000              ; 72 to 79 unused
 179+ 0000              MMU_SLOT_0_REGISTER						EQU $50
 180+ 0000              MMU_SLOT_1_REGISTER						EQU $51
 181+ 0000              MMU_SLOT_2_REGISTER						EQU $52
 182+ 0000              MMU_SLOT_3_REGISTER						EQU $53
 183+ 0000              MMU_SLOT_4_REGISTER						EQU $54
 184+ 0000              MMU_SLOT_5_REGISTER						EQU $55
 185+ 0000              MMU_SLOT_6_REGISTER						EQU $56
 186+ 0000              MMU_SLOT_7_REGISTER						EQU $57
 187+ 0000              ; 88 to 95 unused
 188+ 0000              COPPER_DATA_REGISTER					EQU $60
 189+ 0000              COPPER_CONTROL_LOW_REGISTER				EQU $61
 190+ 0000              COPPER_CONTROL_HIGH_REGISTER			EQU $62
 191+ 0000              COPPER_DATA_16BIT_WRITE_REGISTER        EQU $63
 192+ 0000              VERTICAL_VIDEO_LINE_OFFSET_REGISTER     EQU $64
 193+ 0000              ULA_CONTROL_REGISTER                    EQU $68
 194+ 0000              DISPLAY_CONTROL_1_REGISTER              EQU $69
 195+ 0000              LORES_CONTROL_REGISTER                  EQU $6A
 196+ 0000              TILEMAP_CONTROL_REGISTER                EQU $6B
 197+ 0000              DEFAULT_TILEMAP_ATTRIBUTE_REGISTER      EQU $6C
 198+ 0000              ; 109 unused
 199+ 0000              TILEMAP_BASE_ADDRESS_REGISTER           EQU $6E
 200+ 0000              TILE_DEFINITIONS_BASE_ADDRESS_REGISTER  EQU $6F
 201+ 0000              LAYER_2_CONTROL_REGISTER                EQU $70
 202+ 0000              LAYER_2_X_OFFSET_MSB_REGISTER           EQU $71
 203+ 0000              SPRITE_PORT_MIRROR_ATTRIBUTE_0_WITH_INC EQU $75
 204+ 0000              SPRITE_PORT_MIRROR_ATTRIBUTE_1_WITH_INC EQU $76
 205+ 0000              SPRITE_PORT_MIRROR_ATTRIBUTE_2_WITH_INC EQU $77
 206+ 0000              SPRITE_PORT_MIRROR_ATTRIBUTE_3_WITH_INC EQU $78
 207+ 0000              SPRITE_PORT_MIRROR_ATTRIBUTE_4_WITH_INC EQU $79
 208+ 0000              USER_STORAGE_0_REGISTER                 EQU $7F ; general purpose variable, e.g. for copper
 209+ 0000              EXPANSION_BUS_ENABLE_REGISTER           EQU $80
 210+ 0000              EXPANSION_BUS_CONTROL_REGISTER          EQU $81
 211+ 0000              INTERNAL_PORT_DECODING_B0_7_REGISTER    EQU $82
 212+ 0000              INTERNAL_PORT_DECODING_B8_15_REGISTER   EQU $83
 213+ 0000              INTERNAL_PORT_DECODING_B16_23_REGISTER  EQU $84
 214+ 0000              INTERNAL_PORT_DECODING_B24_31_REGISTER  EQU $85
 215+ 0000              EXPANSION_BUS_DECODING_B0_7_REGISTER    EQU $86
 216+ 0000              EXPANSION_BUS_DECODING_B8_15_REGISTER   EQU $87
 217+ 0000              EXPANSION_BUS_DECODING_B16_23_REGISTER  EQU $88
 218+ 0000              EXPANSION_BUS_DECODING_B24_31_REGISTER  EQU $89
 219+ 0000              EXPANSION_BUS_IO_PROPAGE_REGISTER       EQU $8A
 220+ 0000              ALTERNATE_ROM_REGISTER                  EQU $8C
 221+ 0000              MEMORY_MAPPING_REGISTER                 EQU $8E
 222+ 0000              PI_GPI_OUTPUT_ENABLE_0_REIGISTER        EQU $98
 223+ 0000              PI_GPI_OUTPUT_ENABLE_1_REIGISTER        EQU $99
 224+ 0000              PI_GPI_OUTPUT_ENABLE_2_REIGISTER        EQU $9A
 225+ 0000              PI_GPI_OUTPUT_ENABLE_3_REIGISTER        EQU $9B
 226+ 0000              PI_PERPIPHERAL_ENABLE_REGISTER          EQU $A0
 227+ 0000              PI_I2S_AUDIO_CONTROL_REGISTER           EQU $A2
 228+ 0000              PI_I2S_CLOCK_DIVIDE_REGISTER            EQU $A3
 229+ 0000              ESP_WIFI_GPIO_OUTPUT_REGISTER           EQU $A8
 230+ 0000              ESP_WIFI_GPIO_REGISTER                  EQU $A9
 231+ 0000              EXTENDED_KEYS_0_REGISTER                EQU $B0
 232+ 0000              EXTENDED_KEYS_1_REGISTER                EQU $B1
 233+ 0000              DIVMMC_TRAP_ENABLE_1                    EQU $B2
 234+ 0000              DIVMMC_TRAP_ENABLE_2                    EQU $B4
 235+ 0000              DEBUG_LED_CONTROL_REGISTER              EQU $FF
 236+ 0000
 237+ 0000              INTERUPT_CONTROL                        EQU $0C ; Interrupt control
 238+ 0000              NMI_RETURN_LSB				            EQU	$0C2	; NMI Return Address LSB
 239+ 0000              NMI_RETURN_MSB				            EQU	$0C3	; NMI Return Address MSB
 240+ 0000              INTERRUPT_EN0				            EQU	$0C4	; INT EN 0
 241+ 0000              INTERRUPT_EN1				            EQU	$0C5	; INT EN 1
 242+ 0000              INTERRUPT_EN2				            EQU	$0C6	; INT EN 2
 243+ 0000              INTERRUPT_ST0				            EQU	$0C8	; INT status 0
 244+ 0000              INTERRUPT_ST1				            EQU	$0C9	; INT status 1
 245+ 0000              INTERRUPT_ST2				            EQU	$0CA	; INT status 2
 246+ 0000              INTERRUPT_DM0				            EQU	$0CC	; INT DMA EN 0
 247+ 0000              INTERRUPT_DM1				            EQU	$0CD	; INT DMA EN 1
 248+ 0000              INTERRUPT_DM2				            EQU	$0CE	; INT DMA EN 2
 249+ 0000              CTC_CHANNEL_0				            EQU	$183B	; CTC channel 0 port
 250+ 0000              CTC_CHANNEL_1				            EQU	$193B	; CTC channel 1 port
 251+ 0000              CTC_CHANNEL_2				            EQU	$1A3B	; CTC channel 2 port
 252+ 0000              CTC_CHANNEL_3				            EQU	$1B3B	; CTC channel 3 port
 253+ 0000              CTC_CHANNEL_4				            EQU	$1C3B	; CTC channel 4 port
 254+ 0000              CTC_CHANNEL_5				            EQU	$1D3B	; CTC channel 5 port
 255+ 0000              CTC_CHANNEL_6				            EQU	$1E3B	; CTC channel 6 port
 256+ 0000              CTC_CHANNEL_7				            EQU	$1F3B	; CTC channel 7 port
 257+ 0000              CTCBASE                                 EQU $c0		; MSB Base address of buffer
 258+ 0000              CTCSIZE                                 EQU $04 	; MSB buffer length
 259+ 0000              CTCEND                                  EQU CTCBASE+(CTCSIZE*2)
 260+ 0000
 261+ 0000
 262+ 0000              DEBUG_LEDS_REGISTER						EQU 255
 263+ 0000
 264+ 0000
 265+ 0000              GetNextRegSaveBC:	MACRO register
 266+ 0000 ~                                push bc
 267+ 0000 ~                                ld bc,$243B
 268+ 0000 ~                                ld a,register
 269+ 0000 ~                                out (c),a
 270+ 0000 ~                                inc b
 271+ 0000 ~                                in a,(c)
 272+ 0000 ~                                pop bc
 273+ 0000                                  ENDM
 274+ 0000
 275+ 0000              GetNextReg:	MACRO register
 276+ 0000 ~                        ld bc,$243B
 277+ 0000 ~                        ld a,register
 278+ 0000 ~                        out (c),a
 279+ 0000 ~                        inc b
 280+ 0000 ~                        in a,(c)
 281+ 0000                          ENDM
 282+ 0000
# file closed: ./Hardware/register_defines.asm
 137  0000                                      INCLUDE "./Layer2Graphics/layer2_defines.asm"
# file opened: ./Layer2Graphics/layer2_defines.asm
   1+ 0000
   2+ 0000
   3+ 0000              LAYER2_SHIFTED_SCREEN_TOP  	 equ 0
   4+ 0000              LAYER2_SHIFTED_SCREEN_MIDDLE equ $40
   5+ 0000              LAYER2_SHIFTED_SCREEN_BOTTOM equ $80
   6+ 0000
   7+ 0000
   8+ 0000              ; note hi byte is not decoded on DMA port so can out OUTIR
   9+ 0000
  10+ 0000              IO_SPRITE_SLOT_PORT 		 equ 12347
  11+ 0000              IO_SPRITE_PATTERN_PORT       equ 91
  12+ 0000              IO_SPRITE_ATTRIBUTES_PORT    equ 87
  13+ 0000
  14+ 0000              LAYER2_VISIBLE_MASK 		equ $02
  15+ 0000              ; DEBUG 0 for always write to primary 08 for double buffering
  16+ 0000                  IFDEF DOUBLEBUFFER
  17+ 0000              LAYER2_SHADOW_SCREEN_MASK 	equ $08
  18+ 0000                  ELSE
  19+ 0000 ~            LAYER2_SHADOW_SCREEN_MASK 	equ $00
  20+ 0000                  ENDIF
  21+ 0000              LAYER2_READ_ENABLE_MASK 	equ %00000100
  22+ 0000              LAYER2_WRITE_ENABLE_MASK 	equ %00000001
  23+ 0000              LAYER2_READ_WRITE_MASK      equ %00000101
  24+ 0000              LAYER2_SCREEN_SECTION_MASK 	equ $03
  25+ 0000              LAYER2_SCREEN_SECTION_SHIFT equ 6
  26+ 0000
  27+ 0000              LAYER2_DISABLE_MEM_WRITE    equ %11111110
  28+ 0000              LAYER2_DISABLE_MEM_READ     equ %11111011
  29+ 0000              LAYER2_DISABLE_MEM_ACCESS   equ %11111010
  30+ 0000
  31+ 0000              LAYER2_SCREEN_BANK1          equ 8
  32+ 0000              LAYER2_SCREEN_BANK2          equ 9
  33+ 0000              LAYER2_SCREEN_BANK3          equ 10
  34+ 0000              LAYER2_SCREEN_BANK4          equ 11     ; used by 320 and 640 mode
  35+ 0000              LAYER2_SCREEN_BANK5          equ 12     ; used by 320 and 640 mode
  36+ 0000              LAYER2_SHADOW_BANK1          equ 13
  37+ 0000              LAYER2_SHADOW_BANK2          equ 14
  38+ 0000              LAYER2_SHADOW_BANK3          equ 15
  39+ 0000              LAYER2_SHADOW_BANK4          equ 16     ; used by 320 and 640 mode
  40+ 0000              LAYER2_SHADOW_BANK5          equ 17     ; used by 320 and 640 mode
  41+ 0000
  42+ 0000              SCREEN_HEIGHT 				 equ 192
  43+ 0000              SCREEN_RAM_BASE				 equ $0000
  44+ 0000              SCREEN_HOZ_MIN_PIX		     equ 10
  45+ 0000
  46+ 0000              SPRITES_VISIBLE_MASK         equ $01
  47+ 0000              SPRITES_ON_BORDER_MASK       equ $02
  48+ 0000              LAYER_PRIORITIES_MASK        equ $07
  49+ 0000              LORES_MODE_MASK              equ $80
  50+ 0000              LAYER_PRIORITIES_SHIFT       equ 2
  51+ 0000
  52+ 0000              LAYER_PRIORITIES_S_L_U 		equ 0
  53+ 0000              LAYER_PRIORITIES_L_S_U 		equ 1
  54+ 0000              LAYER_PRIORITIES_S_U_L  	equ 2
  55+ 0000              LAYER_PRIORITIES_L_U_S 		equ 3
  56+ 0000              LAYER_PRIORITIES_U_S_L 		equ 4
  57+ 0000              LAYER_PRIORITIES_U_L_S 		equ 5
  58+ 0000
  59+ 0000              DMA_WRO_BLOCK_PORTA_A2B_XFR  equ $7D
  60+ 0000              DMA_WRO_BLOCK_PORTA_B2A_XFR  equ $79
  61+ 0000              DMA_WR1_P1FIXED_MEMORY       equ $24
  62+ 0000              DMA_WR1_P1DEC_MEMORY         equ $04
  63+ 0000              DMA_WR1_P1INC_MEMORY         equ $14
  64+ 0000              DMA_WR2_P2FIXED_MEMORY       equ $20
  65+ 0000              DMA_WR2_P2DEC_MEMORY         equ $00
  66+ 0000              DMA_WR2_P2INC_MEMORY         equ $10
  67+ 0000              DMA_WR4_CONT_MODE            equ $AD
  68+ 0000              DMA_WR4_BURST_MODE           equ $CD
  69+ 0000              DMA_RESET                    equ $c3
  70+ 0000              DMA_RESET_PORT_A_TIMING      equ $c7
  71+ 0000              DMA_RESET_PORT_B_TIMING      equ $cb
  72+ 0000              DMA_LOAD                     equ $cf
  73+ 0000              DMA_CONTINUE                 equ $d3
  74+ 0000              DMA_DISABLE_INTERUPTS        equ $af
  75+ 0000              DMA_ENABLE_INTERUPTS         equ $ab
  76+ 0000              DMA_RESET_DISABLE_INTERUPTS  equ $a3
  77+ 0000              DMA_ENABLE_AFTER_RETI        equ $b7
  78+ 0000              DMA_READ_STATUS_BYTE         equ $bf
  79+ 0000              DMA_REINIT_STATUS_BYTE       equ $8b
  80+ 0000              DMA_START_READ_SEQUENCE      equ $a7
  81+ 0000              DMA_FORCE_READY              equ $b3
  82+ 0000              DMA_STOP_AT_END			     equ $82
  83+ 0000              DMA_DISABLE                  equ $83
  84+ 0000              DMA_ENABLE                   equ $87
  85+ 0000              DMA_WRITE_REGISTER_COMMAND   equ $bb
  86+ 0000              DMA_BURST                    equ $cd
  87+ 0000              DMA_CONTINUOUS               equ $ad
  88+ 0000              ZXN_DMA_PORT                 equ $6b
  89+ 0000
  90+ 0000
  91+ 0000              COLOUR_TRANSPARENT			 equ $E3
  92+ 0000
  93+ 0000
  94+ 0000
  95+ 0000
# file closed: ./Layer2Graphics/layer2_defines.asm
 138  0000                                      INCLUDE	"./Hardware/memory_bank_defines.asm"
# file opened: ./Hardware/memory_bank_defines.asm
   1+ 0000
   2+ 0000              membanksize			    equ	$1FFF
   3+ 0000
   4+ 0000              StartOfBank     	    equ $0000
   5+ 0000
   6+ 0000              membank0 			    equ $0000
   7+ 0000              dmaCopySrcAddr		    equ	$0000
   8+ 0000              MathsTablesAddr         equ $0000
   9+ 0000              membank1 			    equ $2000
  10+ 0000              membank2 			    equ $4000
  11+ 0000              membank3 			    equ $6000
  12+ 0000              membank4 			    equ $8000
  13+ 0000              membank5 			    equ $a000
  14+ 0000              membank6 			    equ $c000
  15+ 0000              ScreenBank              equ $c000
  16+ 0000              MenuGalChtAddr          equ $c000
  17+ 0000              MenuEquipSAddr          equ $c000
  18+ 0000              MenuInventAddr          equ $c000
  19+ 0000              MenuMarketAddr          equ $c000
  20+ 0000              DispMarketAddr          equ $c000
  21+ 0000              MenuShrChtAddr          equ $c000
  22+ 0000              MenuStatusAddr          equ $c000
  23+ 0000              MenuSystemAddr          equ $c000
  24+ 0000              ViewFrontAddr           equ $c000
  25+ 0000              SunBankAddr             equ $c000
  26+ 0000              PlanetBankAddr          equ $c000
  27+ 0000              SpaceStationBankAddr    equ $c000
  28+ 0000              UniverseBankAddr	    equ $c000
  29+ 0000              LaunchShipAddr          equ $c000
  30+ 0000              membank7 			    equ $e000
  31+ 0000              L1membankAddr   	    equ $e000
  32+ 0000              L2membankAddr   	    equ $e000
  33+ 0000              ShipModelsAddr	        equ $e000
  34+ 0000              SpritemembankAddr       equ $e000
  35+ 0000              ResetUniverseAddr       equ $e000
  36+ 0000              StockTableAddr	        equ $e000
  37+ 0000              CommanderAddr           equ $e000
  38+ 0000              LAYER2Addr              equ $e000
  39+ 0000              LAYER1Addr              equ $e000
  40+ 0000              SPRITEAddr              equ $e000
  41+ 0000              ConsoleImageAddr        equ $e000
  42+ 0000              GalaxyDataAddr          equ $e000
  43+ 0000              SoundAddr               equ $e000
  44+ 0000              KeyboardAddr            equ $e000
  45+ 0000              MathsBankedFnsAddr      equ $0000
  46+ 0000
  47+ 0000              EXSDOSMMU0              equ MMU_SLOT_0_REGISTER
  48+ 0000              MathsTablesMMU          equ MMU_SLOT_0_REGISTER
  49+ 0000              MathsBankedFnsMMU       equ MMU_SLOT_0_REGISTER
  50+ 0000              ShipReadMMU             equ MMU_SLOT_0_REGISTER
  51+ 0000              DMACpySourceMMU		    equ	MMU_SLOT_0_REGISTER
  52+ 0000              EXSDOSMMU1              equ MMU_SLOT_1_REGISTER
  53+ 0000              SunMMU 		            equ MMU_SLOT_6_REGISTER
  54+ 0000              PlanetMMU 		        equ MMU_SLOT_6_REGISTER
  55+ 0000              UniverseMMU 		    equ MMU_SLOT_6_REGISTER
  56+ 0000              SpaceStationMMU         equ MMU_SLOT_6_REGISTER
  57+ 0000              ScreenBankMMU           equ MMU_SLOT_6_REGISTER
  58+ 0000              MenuEquipSMMU           equ MMU_SLOT_6_REGISTER
  59+ 0000              MenuShrChtMMU           equ MMU_SLOT_6_REGISTER
  60+ 0000              MenuGalChtMMU           equ MMU_SLOT_6_REGISTER
  61+ 0000              MenuInventMMU           equ MMU_SLOT_6_REGISTER
  62+ 0000              MenuSystemMMU           equ MMU_SLOT_6_REGISTER
  63+ 0000              MenuMarketMMU           equ MMU_SLOT_6_REGISTER
  64+ 0000              DispMarketMMU           equ MMU_SLOT_6_REGISTER
  65+ 0000              MenuStatusMMU           equ MMU_SLOT_6_REGISTER
  66+ 0000              LaunchShipMMU           equ MMU_SLOT_6_REGISTER
  67+ 0000              L1memMMU       		    equ MMU_SLOT_7_REGISTER
  68+ 0000              L2memMMU       		    equ MMU_SLOT_7_REGISTER
  69+ 0000              SpritememMMU   		    equ MMU_SLOT_7_REGISTER
  70+ 0000              ShipModelMMU  		    equ MMU_SLOT_7_REGISTER
  71+ 0000              ResetUniverseMMU	    equ MMU_SLOT_7_REGISTER
  72+ 0000              CommanderMMU	        equ MMU_SLOT_7_REGISTER
  73+ 0000              StockTableMMU		    equ MMU_SLOT_7_REGISTER
  74+ 0000              ConsoleImageDataMMU	    equ MMU_SLOT_7_REGISTER
  75+ 0000              GalaxyDataMMU	        equ MMU_SLOT_7_REGISTER
  76+ 0000              SoundMMU                equ MMU_SLOT_7_REGISTER
  77+ 0000              KeyboardMMU             equ MMU_SLOT_7_REGISTER
  78+ 0000
  79+ 0000              ; banks 8 to 17 are reserved for layer 2 memory
  80+ 0000              BankResetUniv           equ 49
  81+ 0000              BankMenuShrCht          equ 50
  82+ 0000              BankMenuGalCht          equ 51
  83+ 0000              BankMenuInvent          equ 52
  84+ 0000              BankMenuSystem          equ 53
  85+ 0000              BankMenuMarket          equ 54
  86+ 0000              BankStockTable          equ 55
  87+ 0000              BankCommander           equ 56
  88+ 0000              BankLAYER2              equ 57
  89+ 0000              BankLAYER1              equ 58
  90+ 0000              BankShipModels1         equ 59
  91+ 0000              BankSPRITE              equ 60
  92+ 0000              BankConsole             equ 61
  93+ 0000              BankFrontView           equ 62
  94+ 0000              BankMenuStatus          equ 63
  95+ 0000              BankMenuEquipS          equ 64
  96+ 0000              BankLaunchShip          equ 65
  97+ 0000              BankDispMarket          equ 66
  98+ 0000              BankShipModels2         equ 67
  99+ 0000              BankShipModels3         equ 68
 100+ 0000              BankShipModels4         equ 69
 101+ 0000
 102+ 0000              BankUNIVDATA0           equ 70
 103+ 0000              BankSpaceStationData    equ 70
 104+ 0000              BankUNIVDATA1           equ 71
 105+ 0000              BankUNIVDATA2           equ 72
 106+ 0000              BankUNIVDATA3           equ 73
 107+ 0000              BankUNIVDATA4           equ 74
 108+ 0000              BankUNIVDATA5           equ 75
 109+ 0000              BankUNIVDATA6           equ 76
 110+ 0000              BankUNIVDATA7           equ 77
 111+ 0000              BankUNIVDATA8           equ 78
 112+ 0000              BankUNIVDATA9           equ 79
 113+ 0000              BankUNIVDATA10          equ 80
 114+ 0000              BankUNIVDATA11          equ 81
 115+ 0000              BankUNIVDATA12          equ 82
 116+ 0000              BankSunData             equ 83
 117+ 0000              BankPlanetData          equ 84
 118+ 0000
 119+ 0000              BankGalaxyData0         equ 91
 120+ 0000              BankGalaxyData1         equ 92
 121+ 0000              BankGalaxyData2         equ 93
 122+ 0000              BankGalaxyData3         equ 94
 123+ 0000              BankGalaxyData4         equ 95
 124+ 0000              BankGalaxyData5         equ 96
 125+ 0000              BankGalaxyData6         equ 97
 126+ 0000              BankGalaxyData7         equ 98
 127+ 0000
 128+ 0000              BankMathsTables         equ 99
 129+ 0000              BankSound               equ 100
 130+ 0000              BankKeyboard            equ 101
 131+ 0000              BankMathsBankedFns      equ 102
 132+ 0000
 133+ 0000              BankROM                 equ 255
 134+ 0000
 135+ 0000
# file closed: ./Hardware/memory_bank_defines.asm
 139  0000                                      INCLUDE "./Hardware/screen_equates.asm"
# file opened: ./Hardware/screen_equates.asm
   1+ 0000              ScreenHeight 		equ 192
   2+ 0000              ScreenLastRow       equ ScreenHeight -1
   3+ 0000              ScreenWidth  		equ 256
   4+ 0000              ScreenLastCol       equ ScreenWidth -1
   5+ 0000              ScreenHeightHalf	equ 96
   6+ 0000              ScreenWidthHalf  	equ 128
   7+ 0000              ScreenCenterY		equ 96
   8+ 0000              ScreenCenterX       equ 128
   9+ 0000              ViewHeight          equ 128
  10+ 0000              ViewHeightPlus1     equ 128+1
  11+ 0000              ViewLastRow       	equ ViewHeight -1
  12+ 0000              ViewWidth  			equ 256
  13+ 0000              ViewLastCol         equ ViewWidth -1
  14+ 0000              ViewHeightHalf      equ 63
  15+ 0000              ViewWidthHalf       equ 127
  16+ 0000              ViewCenterY         equ 64
  17+ 0000              ViewCenterX         equ 128
  18+ 0000                                      DISPLAY "TODO: place odler for debugging"
  19+ 0000              ShipColour			equ $FF		; place holder for debugging TODO
  20+ 0000              ScreenL1Bottom      equ $5000
  21+ 0000              ScreenL1BottomLen   equ 32 * 8 * 8
  22+ 0000              ScreenL1AttrBtm     equ $5A00
  23+ 0000              ScreenL1AttrBtmLen  equ 32 * 8
  24+ 0000
# file closed: ./Hardware/screen_equates.asm
 140  0000                                      INCLUDE "./Data/ShipModelEquates.asm"
# file opened: ./Data/ShipModelEquates.asm
   1+ 0000              ScoopDebrisOffset	        equ	0                               ; hull byte#0 high nibble is scoop info, lower nibble is debris spin info
   2+ 0000              MissileLockLoOffset	        equ 1
   3+ 0000              MissileLockHiOffset	        equ 2
   4+ 0000              EdgeAddyOffset		        equ 3
   5+ 0000              LineX4Offset		        equ 5
   6+ 0000              GunVertexOffset		        equ 6
   7+ 0000              ExplosionCtOffset	        equ 7
   8+ 0000              VertexCountOffset           equ 8
   9+ 0000              VertexCtX6Offset	        equ 9
  10+ 0000              EdgeCountOffset		        equ 10
  11+ 0000              BountyLoOffset		        equ 11
  12+ 0000              BountyHiOffset		        equ 12
  13+ 0000              FaceCtX4Offset		        equ 13
  14+ 0000              DotOffset			        equ 14
  15+ 0000              EnergyOffset		        equ 15
  16+ 0000              SpeedOffset			        equ 16
  17+ 0000              FaceAddyOffset		        equ 17
  18+ 0000              QOffset				        equ 19
  19+ 0000              LaserOffset			        equ 20
  20+ 0000              VerticiesAddyOffset         equ 21
  21+ 0000              ShipTypeOffset              equ 23
  22+ 0000              ShipNewBitsOffset           equ 24
  23+ 0000              ShipAIFlagsOffset           equ 25
  24+ 0000              ShipECMFittedChanceOffset   equ 26
  25+ 0000              ShipSolidFlagOffset         equ 27 ; Intially for non cargo these will be garbage
  26+ 0000              ShipSolidFillOffset         equ 28
  27+ 0000              ShipSolidLenOffset          equ 29
  28+ 0000              ShipDataLength              equ ShipECMFittedChanceOffset+1
  29+ 0000
  30+ 0000              CobraTablePointer           equ 43
  31+ 0000              ;29 faulty
  32+ 0000              BankThreshold               equ 16
  33+ 0000
  34+ 0000              ShipTableALast              equ 23
  35+ 0000              ShipTableBLast              equ 39
  36+ 0000              ShipTableCLast              equ 55
  37+ 0000
# file closed: ./Data/ShipModelEquates.asm
 141  0000                                      INCLUDE "./Menus/clear_screen_inline_no_double_buffer.asm"
# file opened: ./Menus/clear_screen_inline_no_double_buffer.asm
   1+ 0000              InitNoDoubleBuffer:         MACRO
   2+ 0000 ~                                        MMUSelectLayer1
   3+ 0000 ~                                        call	l1_cls
   4+ 0000 ~                                        ld		a,7
   5+ 0000 ~                                        call	l1_attr_cls_to_a
   6+ 0000 ~                                        MMUSelectLayer2
   7+ 0000 ~                                        call    asm_l2_double_buffer_off
   8+ 0000 ~                                        call	l2_cls	; Get some space
   9+ 0000 ~                                        MMUSelectSpriteBank
  10+ 0000 ~                                        call    sprite_cls_cursors
  11+ 0000                                          ENDM
  12+ 0000
  13+ 0000
# file closed: ./Menus/clear_screen_inline_no_double_buffer.asm
 142  0000                                      INCLUDE "./Macros/graphicsMacros.asm"
# file opened: ./Macros/graphicsMacros.asm
   1+ 0000              ; General Graphics macros
   2+ 0000              DoubleBufferIfPossible: MACRO
   3+ 0000 ~                                    IFDEF DOUBLEBUFFER
   4+ 0000 ~                                        MMUSelectLayer2
   5+ 0000 ~                                        call  l2_cls
   6+ 0000 ~                                        call  l2_flip_buffers
   7+ 0000 ~                                    ENDIF
   8+ 0000                                      ENDM
   9+ 0000
  10+ 0000              DoubleBuffer320IfPossible: MACRO
  11+ 0000 ~                                    IFDEF DOUBLEBUFFER
  12+ 0000 ~                                        MMUSelectLayer2
  13+ 0000 ~                                        call  l2_320_cls
  14+ 0000 ~                                        call  l2_flip_buffers
  15+ 0000 ~                                    ENDIF
  16+ 0000                                      ENDM
  17+ 0000
  18+ 0000                  IFDEF L2_640_SUPPORT
  19+ 0000 ~            DoubleBuffer640IfPossible: MACRO
  20+ 0000 ~                                    IFDEF DOUBLEBUFFER
  21+ 0000 ~                                        MMUSelectLayer2
  22+ 0000 ~                                        call  l2_640_cls
  23+ 0000 ~                                        call  l2_flip_buffers
  24+ 0000 ~                                    ENDIF
  25+ 0000 ~                                    ENDM
  26+ 0000                  ENDIF
  27+ 0000
  28+ 0000
  29+ 0000              ErrorEquStepMinusDelta: MACRO   delta_step, delta_value
  30+ 0000 ~                                    ld      hl,(delta_step)
  31+ 0000 ~                                    ld      de,(delta_value)
  32+ 0000 ~                                    ClearCarryFlag
  33+ 0000 ~                                    sbc     hl,de
  34+ 0000 ~                                    ld      (error),hl
  35+ 0000                                      ENDM
  36+ 0000
  37+ 0000              ; we could hold steps and deltas in alternate registers later
  38+ 0000              ErrorPlusStep:          MACRO   delta_step
  39+ 0000 ~                                    ld      hl,(error)
  40+ 0000 ~                                    ld      de,(delta_step)
  41+ 0000 ~                                    add     hl,de
  42+ 0000 ~                                    ld      (error),hl
  43+ 0000                                      ENDM
  44+ 0000
  45+ 0000              ErrorMinusStep:         MACRO   delta_step
  46+ 0000 ~                                    ld      hl,(error)
  47+ 0000 ~                                    ld      de,(delta_step)
  48+ 0000 ~                                    ClearCarryFlag
  49+ 0000 ~                                    sbc     hl,de
  50+ 0000 ~                                    ld      (error),hl
  51+ 0000                                      ENDM
  52+ 0000
  53+ 0000              SetExitFalse:           MACRO
  54+ 0000 ~                                    xor     a
  55+ 0000 ~                                    ld      (set_exit),a
  56+ 0000                                      ENDM
  57+ 0000
  58+ 0000              ; pulls axis high byte to a, returns nz if negative, z if positive
  59+ 0000              IsAxisLT0:              MACRO   axis
  60+ 0000 ~                                    ld      a,(axis+1)
  61+ 0000 ~                                    and     $80
  62+ 0000                                      ENDM
  63+ 0000
  64+ 0000              ; modifies HL, loaded with register, returns z if >=0, nz if negative
  65+ 0000              IsMemld16GTE0           MACRO   mem
  66+ 0000 ~                                    ld      hl, (mem)
  67+ 0000 ~                                    bit     7,h
  68+ 0000                                      ENDM
  69+ 0000
  70+ 0000              IsMemNegative8JumpFalse:MACRO   mem, target
  71+ 0000 ~                                    ld      a,(mem)
  72+ 0000 ~                                    and     $80
  73+ 0000 ~                                    jp      z, target
  74+ 0000                                      ENDM
  75+ 0000
  76+ 0000              IsMem16GT0JumpFalse:    MACRO   mem, target
  77+ 0000 ~                                    ld      hl, (mem)
  78+ 0000 ~                                    bit     7,h
  79+ 0000 ~                                    jp      nz, target
  80+ 0000 ~                                    ld      a,h
  81+ 0000 ~                                    or      l
  82+ 0000 ~                                    jp      z,  target
  83+ 0000                                      ENDM
  84+ 0000
  85+ 0000              FloorHLdivDETarget:     MACRO   target
  86+ 0000 ~                                    call    l_div                   ;       .  (so we swap and call l_div) HL = DE / HL, DE = DE % HL
  87+ 0000 ~                                    ld      a,d                     ;       .  get bit 7 into carry (set if negative)
  88+ 0000 ~                                    sla     a                       ;
  89+ 0000 ~                                    jr      nc,.FloorIsOK           ;
  90+ 0000 ~            .FloorAdjust:           dec     hl                      ;       .  if remainder >= adjust by 1 for negative
  91+ 0000 ~            .FloorIsOK:             ld      (target),hl             ;       .  now save the msd value
  92+ 0000                                      ENDM
  93+ 0000
# file closed: ./Macros/graphicsMacros.asm
 143  0000                                      INCLUDE "./Macros/callMacros.asm"
# file opened: ./Macros/callMacros.asm
   1+ 0000
   2+ 0000              CallIfAEqNusng:         MACRO   reg,target
   3+ 0000 ~                                    cp      reg
   4+ 0000 ~                                    call	z,target
   5+ 0000                                      ENDM
   6+ 0000
   7+ 0000              CallIfAGTENusng:        MACRO   reg,target
   8+ 0000 ~                                    cp      reg
   9+ 0000 ~                                    call	nc,target
  10+ 0000                                      ENDM
  11+ 0000
  12+ 0000              CallIfAGTEMemusng:      MACRO   reg,target
  13+ 0000 ~                                    ld      hl,reg
  14+ 0000 ~                                    cp      (hl)
  15+ 0000 ~                                    call	nc,target
  16+ 0000                                      ENDM
  17+ 0000
  18+ 0000              CallIfALTMemusng:       MACRO   reg,target
  19+ 0000 ~                                    ld      hl,reg
  20+ 0000 ~                                    cp      (hl)
  21+ 0000 ~                                    call	c,target
  22+ 0000                                      ENDM
  23+ 0000
  24+ 0000              CallIfALTNusng:         MACRO   reg,target
  25+ 0000 ~                                    cp      reg
  26+ 0000 ~                                    call	c,target
  27+ 0000                                      ENDM
  28+ 0000
  29+ 0000              CallIfMemEqMemusng:     MACRO mem, address, target
  30+ 0000 ~                                    ld      a,(mem)
  31+ 0000 ~                                    ld      hl,address
  32+ 0000 ~                                    cp      (hl)
  33+ 0000 ~                                    call    z,target
  34+ 0000                                      ENDM
  35+ 0000
  36+ 0000              CallIfMemEqNusng:       MACRO mem, value, target
  37+ 0000 ~                                    ld      a,(mem)
  38+ 0000 ~                                    cp      value
  39+ 0000 ~                                    call    z,target
  40+ 0000                                      ENDM
  41+ 0000
  42+ 0000
  43+ 0000              CallIfMemGTENusng:      MACRO mem, value, target
  44+ 0000 ~                                    ld      a,(mem)
  45+ 0000 ~                                    cp      value
  46+ 0000 ~                                    call    nc,target
  47+ 0000                                      ENDM
  48+ 0000
  49+ 0000              CallIfMemTrue:          MACRO mem, target
  50+ 0000 ~                                    ld      a,(mem)
  51+ 0000 ~                                    and     a
  52+ 0000 ~                                    call    z, target
  53+ 0000                                      ENDM
  54+ 0000
  55+ 0000              CallIfMemFalse:         MACRO mem, target
  56+ 0000 ~                                    ld      a,(mem)
  57+ 0000 ~                                    and     a
  58+ 0000 ~                                    call    nz, target
  59+ 0000                                      ENDM
  60+ 0000
  61+ 0000              CallIfMemZero:          MACRO mem, target
  62+ 0000 ~                                    ld      a,(mem)
  63+ 0000 ~                                    and     a
  64+ 0000 ~                                    call    z, target
  65+ 0000                                      ENDM
  66+ 0000
  67+ 0000              CallIfMemNotZero:       MACRO mem, target
  68+ 0000 ~                                    ld      a,(mem)
  69+ 0000 ~                                    and     a
  70+ 0000 ~                                    call    nz, target
  71+ 0000                                      ENDM
  72+ 0000              CallIfATrue:            MACRO target
  73+ 0000 ~                                    and     a
  74+ 0000 ~                                    call    z, target
  75+ 0000                                      ENDM
  76+ 0000
  77+ 0000              CallIfAFalse:           MACRO target
  78+ 0000 ~                                    and     a
  79+ 0000 ~                                    call    nz, target
  80+ 0000                                      ENDM
  81+ 0000
  82+ 0000              CallIfAZero:            MACRO target
  83+ 0000 ~                                    and     a
  84+ 0000 ~                                    call    z, target
  85+ 0000                                      ENDM
  86+ 0000
  87+ 0000              CallIfANotZero:         MACRO target
  88+ 0000 ~                                    and     a
  89+ 0000 ~                                    call    nz, target
  90+ 0000                                      ENDM
# file closed: ./Macros/callMacros.asm
 144  0000                                      INCLUDE "./Macros/carryFlagMacros.asm"
# file opened: ./Macros/carryFlagMacros.asm
   1+ 0000
   2+ 0000              SetCarryFlag:           MACRO
   3+ 0000 ~                                    scf
   4+ 0000                                      ENDM
   5+ 0000
   6+ 0000              ClearCarryFlag:	        MACRO
   7+ 0000 ~                                    or a
   8+ 0000                                      ENDM
   9+ 0000
  10+ 0000              FlipCarryFlag:          MACRO
  11+ 0000 ~                                    ccf
  12+ 0000                                      ENDM
  13+ 0000
# file closed: ./Macros/carryFlagMacros.asm
 145  0000                                      INCLUDE "./Macros/CopyByteMacros.asm"
# file opened: ./Macros/CopyByteMacros.asm
   1+ 0000              CopyByteAtHLixToA:		MACRO memloc
   2+ 0000 ~            						ex          de,hl                               ; save hl
   3+ 0000 ~            						ld          hl,memloc
   4+ 0000 ~            						add         hl,a
   5+ 0000 ~            						ld          a,(hl)                              ; get XX2[x]
   6+ 0000 ~            						ex          de,hl                               ; get hl back as we need it in loop
   7+ 0000              						ENDM
   8+ 0000
   9+ 0000              ; Increments IYL
  10+ 0000              ; Increments IHL
  11+ 0000              ; Gets value at hl and loads into Parameter 1 address
  12+ 0000
  13+ 0000              CopyByteAtNextHLiyl: 	MACRO memloc
  14+ 0000 ~            						inc         iyl                                 ;
  15+ 0000 ~            						inc         hl                                  ; vertex byte#1
  16+ 0000 ~            						ld          a,(hl)                              ;
  17+ 0000 ~            						ld          (memloc),a                     ; XX15+2 = (V),Y
  18+ 0000              						ENDM
  19+ 0000
  20+ 0000              ;------------------------------------------------------------------------------------------------------------------------------
  21+ 0000              CopyByteAtNextHL:   MACRO targetaddr
  22+ 0000 ~                                inc         hl                                  ; vertex byte#1
  23+ 0000 ~                                ld          a,(hl)                              ;
  24+ 0000 ~                                ld          (targetaddr),a                     ; SunXX15+2 = (V),Y
  25+ 0000                                  ENDM
# file closed: ./Macros/CopyByteMacros.asm
 146  0000                                      INCLUDE "./Macros/ldCopyMacros.asm"
# file opened: ./Macros/ldCopyMacros.asm
   1+ 0000              ZeroA:		            MACRO
   2+ 0000 ~                                    xor a
   3+ 0000                                      ENDM
   4+ 0000
   5+ 0000              SetATrue:               MACRO
   6+ 0000 ~                                    xor     a
   7+ 0000                                      ENDM
   8+ 0000
   9+ 0000              SetAFalse:              MACRO
  10+ 0000 ~                                    ld      a,$FF
  11+ 0000                                      ENDM
  12+ 0000
  13+ 0000              SetMemFalse             MACRO   mem
  14+ 0000 ~                                    ld      a,$FF
  15+ 0000 ~                                    ld      (mem),a
  16+ 0000                                      ENDM
  17+ 0000
  18+ 0000              SetMemTrue              MACRO   mem
  19+ 0000 ~                                    xor     a
  20+ 0000 ~                                    ld      (mem),a
  21+ 0000                                      ENDM
  22+ 0000
  23+ 0000              SetMemZero:             MACRO   mem
  24+ 0000 ~                                    xor     a
  25+ 0000 ~                                    ld      (mem),a
  26+ 0000                                      ENDM
  27+ 0000
  28+ 0000              SetMemToN:              MACRO   mem,value
  29+ 0000 ~                                    ld      a,value
  30+ 0000 ~                                    ld      (mem),a
  31+ 0000                                      ENDM
  32+ 0000
  33+ 0000              ldCopyStringLen:        MACRO   source, target, strlen
  34+ 0000 ~                                    ld      hl,source
  35+ 0000 ~                                    ld      de, target
  36+ 0000 ~                                    ld      bc, strlen
  37+ 0000 ~                                    ldir
  38+ 0000                                      ENDM
  39+ 0000
  40+ 0000              ldCopyTextAtHLtoDE:     MACRO
  41+ 0000 ~            .CopyLoop:              ld      a,(hl)
  42+ 0000 ~                                    ld      (de),a
  43+ 0000 ~                                    cp      0
  44+ 0000 ~                                    jp      z,.DoneCopy
  45+ 0000 ~                                    inc     hl
  46+ 0000 ~                                    inc     de
  47+ 0000 ~                                    jr      .CopyLoop
  48+ 0000 ~            .DoneCopy:
  49+ 0000                                      ENDM
  50+ 0000
  51+ 0000              ldClearTextLoop:        MACRO   TextSize
  52+ 0000 ~                                    ld      b,a
  53+ 0000 ~                                    ld      a,TextSize
  54+ 0000 ~            .ClearLoop:             ld      (hl),a
  55+ 0000 ~                                    inc     hl
  56+ 0000 ~                                    djnz    .ClearLoop
  57+ 0000                                      ENDM
  58+ 0000
  59+ 0000              ldCopyByte:             MACRO memfrom, memto
  60+ 0000 ~                                    ld       a,(memfrom)
  61+ 0000 ~                                    ld       (memto),a
  62+ 0000                                      ENDM
  63+ 0000
  64+ 0000
  65+ 0000              ldCopyByteABS:          MACRO memfrom, memto
  66+ 0000 ~                                    ld       a,(memfrom)
  67+ 0000 ~                                    and		$7F
  68+ 0000 ~                                    ld       (memto),a
  69+ 0000                                      ENDM
  70+ 0000
  71+ 0000              ldAtHLtoMem:            MACRO   memto
  72+ 0000 ~                                    ld      a,(hl)
  73+ 0000 ~                                    ld      (memto),a
  74+ 0000                                      ENDM
  75+ 0000
  76+ 0000              ldCopyWord:             MACRO memfrom, memto
  77+ 0000 ~                                    ldCopy2Byte memfrom, memto
  78+ 0000                                      ENDM
  79+ 0000
  80+ 0000              ldCopy2Byte:            MACRO  memfrom, memto
  81+ 0000 ~                                    ld       hl,(memfrom)
  82+ 0000 ~                                    ld       (memto),hl
  83+ 0000                                      ENDM
  84+ 0000
  85+ 0000              ldWriteConst            MACRO  memfrom, memto
  86+ 0000 ~                                    ld       a,memfrom
  87+ 0000 ~                                    ld       (memto),a
  88+ 0000                                      ENDM
  89+ 0000
  90+ 0000              ldWriteZero             MACRO  memto
  91+ 0000 ~                                    xor      a
  92+ 0000 ~                                    ld       (memto),a
  93+ 0000                                      ENDM
  94+ 0000
  95+ 0000              ldIXLaFromN:	        MACRO memfrom
  96+ 0000 ~                                    ld		a,(memfrom)
  97+ 0000 ~                                    ld		ixl,a
  98+ 0000                                      ENDM
  99+ 0000
 100+ 0000              ldIXHaFromN:	        MACRO memfrom
 101+ 0000 ~                                    ld		a,(memfrom)
 102+ 0000 ~                                    ld		ixh,a
 103+ 0000                                      ENDM
 104+ 0000
 105+ 0000              ldIYLaFromN:	        MACRO memfrom
 106+ 0000 ~                                    ld		a,(memfrom)
 107+ 0000 ~                                    ld		iyl,a
 108+ 0000                                      ENDM
 109+ 0000
 110+ 0000              ldIYHaFromN:	        MACRO memfrom
 111+ 0000 ~                                    ld		a,(memfrom)
 112+ 0000 ~                                    ld		iyh,a
 113+ 0000                                      ENDM
 114+ 0000
 115+ 0000              ; Read a 32 bit value from address HL into BCDE
 116+ 0000              ldBCDEatHL:             MACRO
 117+ 0000 ~                                    ld      e,(hl)
 118+ 0000 ~                                    inc     hl
 119+ 0000 ~                                    ld      d,(hl)
 120+ 0000 ~                                    inc     hl
 121+ 0000 ~                                    ld      c,(hl)
 122+ 0000 ~                                    inc     hl
 123+ 0000 ~                                    ld      b,(hl)
 124+ 0000 ~                                    inc     hl
 125+ 0000                                      ENDM
 126+ 0000
 127+ 0000              ldBCatHL:               MACRO
 128+ 0000 ~                                    ld      c,(hl)
 129+ 0000 ~                                    inc     hl
 130+ 0000 ~                                    ld      b,(hl)
 131+ 0000 ~                                    inc     hl
 132+ 0000                                      ENDM
 133+ 0000
 134+ 0000              ldhlde:			        MACRO
 135+ 0000 ~                                    ld		h,d
 136+ 0000 ~                                    ld		l,e
 137+ 0000                                      ENDM
 138+ 0000
 139+ 0000              ldhlbc:			        MACRO
 140+ 0000 ~                                    ld		h,b
 141+ 0000 ~                                    ld		l,c
 142+ 0000                                      ENDM
 143+ 0000
 144+ 0000              ldbcde:			        MACRO
 145+ 0000 ~                                    ld		b,d
 146+ 0000 ~                                    ld		c,e
 147+ 0000                                      ENDM
 148+ 0000
 149+ 0000              lddebc:			        MACRO
 150+ 0000 ~                                    ld		d,b
 151+ 0000 ~                                    ld		e,c
 152+ 0000                                      ENDM
 153+ 0000
 154+ 0000              ldbchl:			        MACRO
 155+ 0000 ~                                    ld		b,h
 156+ 0000 ~                                    ld		c,l
 157+ 0000                                      ENDM
 158+ 0000
 159+ 0000              lddeiy:			        MACRO
 160+ 0000 ~                                    ld		d,iyh
 161+ 0000 ~                                    ld		e,iyl
 162+ 0000                                      ENDM
 163+ 0000
 164+ 0000              ldiyde:			        MACRO
 165+ 0000 ~                                    ld		iyh,d
 166+ 0000 ~                                    ld		iyl,e
 167+ 0000                                      ENDM
 168+ 0000
 169+ 0000
 170+ 0000              FourLDIInstrunctions:   MACRO
 171+ 0000 ~                                    ldi
 172+ 0000 ~                                    ldi
 173+ 0000 ~                                    ldi
 174+ 0000 ~                                    ldi
 175+ 0000                                      ENDM
 176+ 0000
 177+ 0000              FiveLDIInstrunctions:   MACRO
 178+ 0000 ~                                    ldi
 179+ 0000 ~                                    ldi
 180+ 0000 ~                                    ldi
 181+ 0000 ~                                    ldi
 182+ 0000 ~                                    ldi
 183+ 0000                                      ENDM
 184+ 0000
 185+ 0000              SixLDIInstrunctions:    MACRO
 186+ 0000 ~                                    ldi
 187+ 0000 ~                                    ldi
 188+ 0000 ~                                    ldi
 189+ 0000 ~                                    ldi
 190+ 0000 ~                                    ldi
 191+ 0000 ~                                    ldi
 192+ 0000                                      ENDM
 193+ 0000
 194+ 0000              EightLDIInstrunctions:  MACRO
 195+ 0000 ~            		                ldi
 196+ 0000 ~            		                ldi
 197+ 0000 ~            		                ldi
 198+ 0000 ~            		                ldi
 199+ 0000 ~            		                ldi
 200+ 0000 ~            		                ldi
 201+ 0000 ~            		                ldi
 202+ 0000 ~            		                ldi
 203+ 0000                                      ENDM
 204+ 0000
 205+ 0000              NineLDIInstrunctions:  MACRO
 206+ 0000 ~            		                ldi
 207+ 0000 ~            		                ldi
 208+ 0000 ~            		                ldi
 209+ 0000 ~            		                ldi
 210+ 0000 ~            		                ldi
 211+ 0000 ~            		                ldi
 212+ 0000 ~            		                ldi
 213+ 0000 ~            		                ldi
 214+ 0000 ~            		                ldi
 215+ 0000                                      ENDM
# file closed: ./Macros/ldCopyMacros.asm
 147  0000                                      INCLUDE "./Macros/ldIndexedMacros.asm"
# file opened: ./Macros/ldIndexedMacros.asm
   1+ 0000              GetByteAInTable:    MACRO table
   2+ 0000 ~                                ld          hl,table
   3+ 0000 ~                                add         hl,a
   4+ 0000 ~                                ld          a,(hl)
   5+ 0000                                  ENDM
   6+ 0000
   7+ 0000              HLWordAInTable:     MACRO table
   8+ 0000 ~                                ld          hl,table
   9+ 0000 ~                                sla         a
  10+ 0000 ~                                add         hl,a
  11+ 0000 ~                                ld          a,(hl)
  12+ 0000 ~                                inc         hl
  13+ 0000 ~                                ld          h,(hl)
  14+ 0000 ~                                ld          l,a
  15+ 0000                                  ENDM
  16+ 0000
  17+ 0000
  18+ 0000              ldAToHLixl:			MACRO value
  19+ 0000 ~            					ld          hl,value
  20+ 0000 ~            					ex          af,af'
  21+ 0000 ~            					ld          a,ixl
  22+ 0000 ~            					add         hl,a
  23+ 0000 ~            					ex          af,af'
  24+ 0000 ~            					ld          (hl),a
  25+ 0000              					ENDM
  26+ 0000
  27+ 0000              ldAToHLiyl:			MACRO value
  28+ 0000 ~            					ld          hl,value
  29+ 0000 ~            					ex          af,af'
  30+ 0000 ~            					ld          a,iyl
  31+ 0000 ~            					add         hl,a
  32+ 0000 ~            					ex          af,af'
  33+ 0000 ~            					ld          (hl),a
  34+ 0000              					ENDM
  35+ 0000
  36+ 0000
  37+ 0000              ldHLixlToA:         MACRO value
  38+ 0000 ~                                ld          hl,value
  39+ 0000 ~                                ex          af,af'
  40+ 0000 ~                                ld          a,ixl
  41+ 0000 ~                                add         hl,a
  42+ 0000 ~                                ld          a,(hl)
  43+ 0000                                  ENDM
  44+ 0000
  45+ 0000              ldHLiylToA:         MACRO value
  46+ 0000 ~                                ld          hl,value
  47+ 0000 ~                                ex          af,af'
  48+ 0000 ~                                ld          a,iyl
  49+ 0000 ~                                add         hl,a
  50+ 0000 ~                                ld          a,(hl)
  51+ 0000                                  ENDM
  52+ 0000
  53+ 0000              ldHLIdxAToA:        MACRO value
  54+ 0000 ~                                ld          hl,value
  55+ 0000 ~                                add         hl,a
  56+ 0000 ~                                ld          a,(hl)
  57+ 0000                                  ENDM
  58+ 0000
  59+ 0000              HLEquAddrAtHLPlusA: MACRO
  60+ 0000 ~                                sla         a
  61+ 0000 ~                                add         hl,a
  62+ 0000 ~                                ld          a,(hl)
  63+ 0000 ~                                inc         hl
  64+ 0000 ~                                ld          h,(hl)
  65+ 0000 ~                                ld          l,a
  66+ 0000                                  ENDM
  67+ 0000
  68+ 0000              ;-- Performs HL = |HL| - 1
  69+ 0000              DecHLABS:           MACRO
  70+ 0000 ~                                bit         7,h
  71+ 0000 ~                                jp          nz,.NegativeDec
  72+ 0000 ~            .IsHLZero:          ld          a,h                 ; if its zero it becomes negative
  73+ 0000 ~                                or          l
  74+ 0000 ~                                jp          z,.HLZero
  75+ 0000 ~            .PositiveDec:       dec         hl
  76+ 0000 ~                                jp          .Done
  77+ 0000 ~            .NegativeDec:       ld          a,h
  78+ 0000 ~                                and         $7F
  79+ 0000 ~                                ld          h,a
  80+ 0000 ~                                dec         hl
  81+ 0000 ~                                set         7,h
  82+ 0000 ~                                jp          .Done
  83+ 0000 ~            .HLZero:            ld          hl,$8001
  84+ 0000 ~            .Done:
  85+ 0000                                  ENDM
  86+ 0000
  87+ 0000              ;-- Performs HL = HL - 1
  88+ 0000              DecHLSigned:        MACRO
  89+ 0000 ~                                bit         7,h
  90+ 0000 ~                                jp          nz,.NegativeDec
  91+ 0000 ~            .IsHLZero:          ld          a,h                 ; if its zero it becomes negative
  92+ 0000 ~                                or          l
  93+ 0000 ~                                jp          z,.HLZero
  94+ 0000 ~            .PositiveDec:       dec         hl
  95+ 0000 ~                                jp          .Done
  96+ 0000 ~            .NegativeDec:       ld          a,h
  97+ 0000 ~                                and         $7F
  98+ 0000 ~                                ld          h,a
  99+ 0000 ~                                inc         hl                  ; if its already negative then add 1 to make it further
 100+ 0000 ~                                set         7,h
 101+ 0000 ~                                jp          .Done
 102+ 0000 ~            .HLZero:            ld          hl,$8001
 103+ 0000 ~            .Done:
 104+ 0000                                  ENDM
 105+ 0000
# file closed: ./Macros/ldIndexedMacros.asm
 148  0000                                      INCLUDE "./Macros/jumpMacros.asm"
# file opened: ./Macros/jumpMacros.asm
   1+ 0000              JumpIfHLNegative:       MACRO target
   2+ 0000 ~                                    bit     7,h
   3+ 0000 ~                                    jp      nz,target
   4+ 0000                                      ENDM
   5+ 0000
   6+ 0000              JumpIfPositive:	        MACRO target
   7+ 0000 ~                                    jp		p, target
   8+ 0000                                      ENDM
   9+ 0000
  10+ 0000              JumpIfNegative:	        MACRO target
  11+ 0000 ~                                    jp		m, target
  12+ 0000                                      ENDM
  13+ 0000
  14+ 0000
  15+ 0000              JumpIfUnderflow:	    MACRO target
  16+ 0000 ~                                    jp		po, target
  17+ 0000                                      ENDM
  18+ 0000
  19+ 0000              JumpIfOverflow:	        MACRO target
  20+ 0000 ~                                    jp		po, target
  21+ 0000                                      ENDM
  22+ 0000
  23+ 0000
  24+ 0000              JumpIfNotZero:	        MACRO target
  25+ 0000 ~                                    jp	nz,target
  26+ 0000                                      ENDM
  27+ 0000
  28+ 0000              JumpIfZero:	            MACRO target
  29+ 0000 ~                                    jp	z,target
  30+ 0000                                      ENDM
  31+ 0000
  32+ 0000              ;.. Bit routines
  33+ 0000              JumpOnLeadSignSet:      MACRO   reg, target
  34+ 0000 ~                                    ld      a,reg
  35+ 0000 ~                                    and     SignOnly8Bit
  36+ 0000 ~                                    jp      nz,target
  37+ 0000                                      ENDM
  38+ 0000
  39+ 0000              JumpOnLeadSignClear:    MACRO   reg, target
  40+ 0000 ~                                    ld      a,reg
  41+ 0000 ~                                    and     SignOnly8Bit
  42+ 0000 ~                                    jp      z,target
  43+ 0000                                      ENDM
  44+ 0000
  45+ 0000              JumpOnLeadSignSetA:     MACRO   target
  46+ 0000 ~                                    and     SignOnly8Bit
  47+ 0000 ~                                    jp      nz,target
  48+ 0000                                      ENDM
  49+ 0000
  50+ 0000              JumpOnLeadSignClearA:   MACRO   target
  51+ 0000 ~                                    and     SignOnly8Bit
  52+ 0000 ~                                    jp      z,target
  53+ 0000                                      ENDM
  54+ 0000
  55+ 0000              JumpOnMemBitSet:        MACRO mem, bitnbr, target
  56+ 0000 ~                                    ld      a,(mem)
  57+ 0000 ~                                    bit 	bitnbr,a
  58+ 0000 ~                                    jp      nz,target
  59+ 0000                                      ENDM
  60+ 0000
  61+ 0000              JumpOnMemBitClear:      MACRO mem, bitnbr, target
  62+ 0000 ~                                    ld      a,(mem)
  63+ 0000 ~                                    bit 	bitnbr,a
  64+ 0000 ~                                    jp      z,target
  65+ 0000                                      ENDM
  66+ 0000
  67+ 0000
  68+ 0000              JumpOnABitSet:          MACRO   bitnbr, target
  69+ 0000 ~                                    bit 	bitnbr, a
  70+ 0000 ~                                    jp      nz,target
  71+ 0000                                      ENDM
  72+ 0000
  73+ 0000              JumpOnABitClear:        MACRO   bitnbr, target
  74+ 0000 ~                                    bit 	bitnbr, a
  75+ 0000 ~                                    jp      z,target
  76+ 0000                                      ENDM
  77+ 0000
  78+ 0000              JumpOnABit5Set:         MACRO   target
  79+ 0000 ~                                    and     Bit5Only
  80+ 0000 ~                                    jp      nz,target
  81+ 0000                                      ENDM
  82+ 0000
  83+ 0000              JumpOnABit5Clear:       MACRO   target
  84+ 0000 ~                                    and     Bit5Only
  85+ 0000 ~                                    jp      z,target
  86+ 0000                                      ENDM
  87+ 0000
  88+ 0000              JumpOnBitMaskSet:       MACRO   bitmask, target
  89+ 0000 ~                                    and     bitmask
  90+ 0000 ~                                    jp      nz,target
  91+ 0000                                      ENDM
  92+ 0000
  93+ 0000              JumpOnBitMaskClear:     MACRO   bitmask, target
  94+ 0000 ~                                    and     bitmask
  95+ 0000 ~                                    jp      z,target
  96+ 0000                                      ENDM
  97+ 0000
  98+ 0000              JumpOnMemBitMaskSet:    MACRO   mem, bitmask, target
  99+ 0000 ~                                    ld      a,(mem)
 100+ 0000 ~                                    and     bitmask
 101+ 0000 ~                                    jp      nz,target
 102+ 0000                                      ENDM
 103+ 0000
 104+ 0000              JumpOnMemBitMaskClear:  MACRO   mem, bitmask, target
 105+ 0000 ~                                    ld      a,(mem)
 106+ 0000 ~                                    and     bitmask
 107+ 0000 ~                                    jp      z,target
 108+ 0000                                      ENDM
 109+ 0000
 110+ 0000              JumpOnBitSet:           MACRO  reg, bitnbr, target
 111+ 0000 ~                                    bit 	bitnbr,reg
 112+ 0000 ~                                    jp      nz,target
 113+ 0000                                      ENDM
 114+ 0000
 115+ 0000              JumpOnBitClear:         MACRO  reg, bitnbr, target
 116+ 0000 ~                                    bit 	bitnbr,reg
 117+ 0000 ~                                    jp      z,target
 118+ 0000                                      ENDM
 119+ 0000
 120+ 0000              ; Comparison Routines
 121+ 0000              JumpIfAGTEusng:         MACRO
 122+ 0000 ~                                    jp		nc,target
 123+ 0000                                      ENDM
 124+ 0000
 125+ 0000              JumpIfAGTENusng:        MACRO reg,target
 126+ 0000 ~                                    cp     reg
 127+ 0000 ~                                    jp		nc,target
 128+ 0000                                      ENDM
 129+ 0000
 130+ 0000              JumpIfAGTEMemusng:      MACRO mem,target
 131+ 0000 ~                                    ld      hl,mem
 132+ 0000 ~                                    cp      (hl)
 133+ 0000 ~                                    jp		nc,target
 134+ 0000                                      ENDM
 135+ 0000              JumpIfMemGTENusng:      MACRO mem, value, target
 136+ 0000 ~                                    ld     a,(mem)
 137+ 0000 ~                                    cp     value
 138+ 0000 ~                                    jp	  nc,target
 139+ 0000                                      ENDM
 140+ 0000
 141+ 0000              JumpIfMemGTEMemusng:    MACRO mem, address, target
 142+ 0000 ~                                    ld   a,(mem)
 143+ 0000 ~                                    ld   hl,address
 144+ 0000 ~                                    cp   (hl)
 145+ 0000 ~                                    jp	  nc,target
 146+ 0000                                      ENDM
 147+ 0000
 148+ 0000              JumpIfMemEqMemusng:     MACRO mem, address, target
 149+ 0000 ~                                    ld   a,(mem)
 150+ 0000 ~                                    ld   hl,address
 151+ 0000 ~                                    cp   (hl)
 152+ 0000 ~                                    jp	  z,target
 153+ 0000                                      ENDM
 154+ 0000
 155+ 0000              JumpIfMemNeMemusng:     MACRO mem, address, target
 156+ 0000 ~                                    ld   a,(mem)
 157+ 0000 ~                                    ld   hl,address
 158+ 0000 ~                                    cp   (hl)
 159+ 0000 ~                                    jp	  nz,target
 160+ 0000                                      ENDM
 161+ 0000
 162+ 0000              JumpIfMemTrue:          MACRO mem, target
 163+ 0000 ~                                    ld      a,(mem)
 164+ 0000 ~                                    and     a
 165+ 0000 ~                                    jp      z, target
 166+ 0000                                      ENDM
 167+ 0000
 168+ 0000              JumpIfMemFalse:         MACRO mem, target
 169+ 0000 ~                                    ld      a,(mem)
 170+ 0000 ~                                    and     a
 171+ 0000 ~                                    jp      nz, target
 172+ 0000                                      ENDM
 173+ 0000
 174+ 0000              JumpIfATrue:            MACRO target
 175+ 0000 ~                                    and     a
 176+ 0000 ~                                    jp      z, target
 177+ 0000                                      ENDM
 178+ 0000
 179+ 0000              JumpIfAFalse:           MACRO target
 180+ 0000 ~                                    and     a
 181+ 0000 ~                                    jp      nz, target
 182+ 0000                                      ENDM
 183+ 0000
 184+ 0000              JumpIfANotFalse:        MACRO target
 185+ 0000 ~                                    cp      $FF
 186+ 0000 ~                                    jp      nz, target
 187+ 0000                                      ENDM
 188+ 0000
 189+ 0000              ;-- Less than Macros -------------------------------------------
 190+ 0000              JumpIfALTMemHLusng:     MACRO target
 191+ 0000 ~                                    cp    (hl)
 192+ 0000 ~                                    jp	  c,target
 193+ 0000                                      ENDM
 194+ 0000
 195+ 0000              JumpIfRegLTE:           MACRO   reg, value, target
 196+ 0000 ~                                    ld      a,reg
 197+ 0000 ~                                    cp      value
 198+ 0000 ~                                    jp	    z,target
 199+ 0000 ~                                    jp		c, target
 200+ 0000                                      ENDM
 201+ 0000
 202+ 0000              JumpIfALTMemusng:       MACRO mem,target
 203+ 0000 ~                                    ld      hl,mem
 204+ 0000 ~                                    cp      (hl)
 205+ 0000 ~                                    jp		c,target
 206+ 0000                                      ENDM
 207+ 0000
 208+ 0000
 209+ 0000              JumpIfALTusng:          MACRO target
 210+ 0000 ~                                    jp		c,target
 211+ 0000                                      ENDM
 212+ 0000
 213+ 0000              JumpIfALTNusng:         MACRO value, target
 214+ 0000 ~                                    cp      value
 215+ 0000 ~                                    jp		c, target
 216+ 0000                                      ENDM
 217+ 0000
 218+ 0000              JumpIfALTNsigned:       MACRO   value, target
 219+ 0000 ~                                    cp      value
 220+ 0000 ~                                    jp      m,.SignSet
 221+ 0000 ~            .SignClear:             jp      pe,target       ; Sign (0), P/V (1)
 222+ 0000 ~                                    jp      .CheckComplete  ; Sign (1), P/V (0)
 223+ 0000 ~            .SignSet:               jp      po,target
 224+ 0000 ~            .CheckComplete:
 225+ 0000                                      ENDM
 226+ 0000
 227+ 0000              JumpIfMemLTNusng:       MACRO mem, value, target
 228+ 0000 ~                                    ld      a,(mem)
 229+ 0000 ~                                    cp      value
 230+ 0000 ~                                    jp	  c,target
 231+ 0000                                      ENDM
 232+ 0000
 233+ 0000              JumpIfMemLTMemusng:     MACRO mem, value, target
 234+ 0000 ~                                    ld    a,(mem)
 235+ 0000 ~                                    ld    hl,value
 236+ 0000 ~                                    cp    (hl)
 237+ 0000 ~                                    jp	  c,target
 238+ 0000                                      ENDM
 239+ 0000              ;-- ------------------------------------------------------------
 240+ 0000              JumpIfAGTENsigned       MACRO   value, target
 241+ 0000 ~                                    cp      value
 242+ 0000 ~                                    jp      m,.SignSet
 243+ 0000 ~            .SignClear:             jp      po,target       ; Sign (0), P/V (0)
 244+ 0000 ~                                    jp      .CheckComplete  ; Sign (1), P/V (1)
 245+ 0000 ~            .SignSet:               jp      pe,target
 246+ 0000 ~            .CheckComplete:
 247+ 0000                                      ENDM
 248+ 0000
 249+ 0000              JumpIfMemEqNusng:       MACRO mem,value,target
 250+ 0000 ~                                    ld  a,(mem)
 251+ 0000 ~                                    cp  value
 252+ 0000 ~                                    jp  z,target
 253+ 0000                                      ENDM
 254+ 0000
 255+ 0000              JumpIfMemNeNusng:       MACRO mem,value,target
 256+ 0000 ~                                    ld  a,(mem)
 257+ 0000 ~                                    cp  value
 258+ 0000 ~                                    jp  nz,target
 259+ 0000                                      ENDM
 260+ 0000
 261+ 0000              JumpIfMemZero:          MACRO mem,target
 262+ 0000 ~                                    ld  a,(mem)
 263+ 0000 ~                                    and a
 264+ 0000 ~                                    jp  z,target
 265+ 0000                                      ENDM
 266+ 0000
 267+ 0000              JumpIfMemNotZero:       MACRO mem,target
 268+ 0000 ~                                    ld  a,(mem)
 269+ 0000 ~                                    and a
 270+ 0000 ~                                    jp  nz,target
 271+ 0000                                      ENDM
 272+ 0000
 273+ 0000              JumpIfANENusng:         MACRO value, target
 274+ 0000 ~                                    cp     value
 275+ 0000 ~                                    jp      nz,target
 276+ 0000                                      ENDM
 277+ 0000
 278+ 0000              JumpIfANEquNusng:       MACRO value, target
 279+ 0000 ~                                    cp     value
 280+ 0000 ~                                    jp     z,target
 281+ 0000                                      ENDM
 282+ 0000
 283+ 0000              JumpIfANEMemusng:       MACRO  value, target
 284+ 0000 ~                                    ld    hl,value
 285+ 0000 ~                                    cp    (hl)
 286+ 0000 ~                                    jp      nz,target
 287+ 0000                                      ENDM
 288+ 0000
 289+ 0000              JumpIfAEqNusng:         MACRO value, target
 290+ 0000 ~                                    cp     value
 291+ 0000 ~                                    jp      z,target
 292+ 0000                                      ENDM
 293+ 0000
 294+ 0000              JumpIfAIsZero:	        MACRO target
 295+ 0000 ~                                    and     a   ; cp 0 - changed to and a for optimisation but affects other flags
 296+ 0000 ~                                    jp	    z, target
 297+ 0000                                      ENDM
 298+ 0000
 299+ 0000              JumpIfRegIsNotZero:     MACRO   reg, target
 300+ 0000 ~                                    ld      a,reg
 301+ 0000 ~                                    and     a
 302+ 0000 ~                                    jp	    nz,target
 303+ 0000                                      ENDM
 304+ 0000
 305+ 0000
 306+ 0000              JumpIfAIsNotZero:       MACRO target
 307+ 0000 ~                                    and     a
 308+ 0000 ~                                    jp	    nz,target
 309+ 0000                                      ENDM
 310+ 0000
 311+ 0000              JumpIfMemIsNotZero:     MACRO value, target
 312+ 0000 ~                                    ld      a,(value)
 313+ 0000 ~                                    and     a
 314+ 0000 ~                                    jp	    nz,target
 315+ 0000                                      ENDM
 316+ 0000              IfResultZeroGoto:	    MACRO target
 317+ 0000 ~                                    jp	z,target
 318+ 0000                                      ENDM
 319+ 0000
 320+ 0000              IfResultNotZeroGoto:    MACRO target
 321+ 0000 ~                                    jp	nz,target
 322+ 0000                                      ENDM
 323+ 0000
# file closed: ./Macros/jumpMacros.asm
 149  0000                                      INCLUDE "./Macros/MathsMacros.asm"
# file opened: ./Macros/MathsMacros.asm
   1+ 0000              ; sets z flag is HL less than 255 else sets it to nz (note opposite of GT127)
   2+ 0000              IsHLGT255:              MACRO
   3+ 0000 ~                                    bit     7,h
   4+ 0000 ~                                    ret     z
   5+ 0000 ~                                    ld      a,h
   6+ 0000 ~                                    and     a
   7+ 0000                                      ENDM
   8+ 0000
   9+ 0000              ; Sets z flat if HL = 255 else sets it to nz
  10+ 0000              IsHLEqu255:             MACRO
  11+ 0000 ~                                    ld      a,h
  12+ 0000 ~                                    and     a               ; if its non zero then it can't be 255
  13+ 0000 ~                                    ret     nz
  14+ 0000 ~                                    ld      a,l
  15+ 0000 ~                                    inc     a               ; if it was 255 the inc will set it to zero
  16+ 0000                                      ENDM
  17+ 0000
  18+ 0000              ; Sets Z flag if GT 127 else nz
  19+ 0000              IsHLGT127:              MACRO
  20+ 0000 ~                                    bit     7,h             ; -ve?
  21+ 0000 ~                                    jr      nz,.DoneCheck
  22+ 0000 ~                                    ld      a,h             ; +ve > 256?
  23+ 0000 ~                                    and     a
  24+ 0000 ~                                    jr      nz,.DoneCheck
  25+ 0000 ~                                    ld      a,l
  26+ 0000 ~                                    and     $80             ; this will set z to false if bit 7 set and clear lower bits
  27+ 0000 ~                                    cp      $80             ; this will set z to true if bit 7 set
  28+ 0000 ~            .DoneCheck:
  29+ 0000                                      ENDM
  30+ 0000
  31+ 0000              ReturnIfHLGT127:        MACRO
  32+ 0000 ~                                    bit     7,h             ; -ve?
  33+ 0000 ~                                    jr      nz,.DoneCheck   ; forces check complete
  34+ 0000 ~                                    ld      a,h             ; +ve > 256?
  35+ 0000 ~                                    and     a               ;
  36+ 0000 ~                                    ret     nz              ; forces a return
  37+ 0000 ~                                    bit     7,l             ; bit 7 of lower set?
  38+ 0000 ~                                    ret     nz              ; forces a return
  39+ 0000 ~            .DoneCheck:
  40+ 0000                                      ENDM
  41+ 0000
  42+ 0000              IsDEGT127:              MACRO
  43+ 0000 ~                                    bit     7,d
  44+ 0000 ~                                    jr      nz,.DoneCheck
  45+ 0000 ~                                    ld      a,d
  46+ 0000 ~                                    jr      nz,.DoneCheck
  47+ 0000 ~                                    ld      a,e
  48+ 0000 ~                                    and     $80
  49+ 0000 ~            .DoneCheck:
  50+ 0000                                      ENDM
  51+ 0000
  52+ 0000              ABSa2c:                 MACRO
  53+ 0000 ~                                    bit     7,a
  54+ 0000 ~                                    jp      z,.DoneABSa
  55+ 0000 ~                                    neg
  56+ 0000 ~            .DoneABSa:
  57+ 0000                                      ENDM
  58+ 0000
  59+ 0000              DEEquSquareA:           MACRO
  60+ 0000 ~                                    ld  d,a
  61+ 0000 ~                                    ld  e,a
  62+ 0000 ~                                    mul de
  63+ 0000                                      ENDM
  64+ 0000
  65+ 0000              ApplyMyRollToVector:    MACRO angle, vectorX, vectorY
  66+ 0000 ~                                    ldCopyByte angle,varQ               ; Set Q = a = alpha (the roll angle to rotate through)
  67+ 0000 ~                                    ldCopy2Byte vectorY, varR           ; RS =  nosev_y
  68+ 0000 ~                                    ldCopyByte  vectorX, varP           ; set P to nosevX lo (may be redundant)
  69+ 0000 ~                                    ld a,(vectorX+1)                    ; Set A = -nosev_x_hi
  70+ 0000 ~                                    xor $80                             ;
  71+ 0000 ~                                    call  madXAequQmulAaddRS            ; Set (A X) = Q * A + (S R) = = alpha * -nosev_x_hi + nosev_y
  72+ 0000 ~                                    ld  (vectorY),de                    ; nosev_y = nosev_y - alpha * nosev_x_hi
  73+ 0000 ~                                    ldCopy2Byte vectorX, varR           ; Set (S R) = nosev_x
  74+ 0000 ~                                    ld  a,(vectorY+1)                   ;  Set A = nosev_y_hi
  75+ 0000 ~                                    call madXAequQmulAaddRS             ; Set (A X) = Q * A + (S R)
  76+ 0000 ~                                    ld  (vectorX),de                    ; nosev_x = nosev_x + alpha * nosev_y_hi
  77+ 0000                                      ENDM
  78+ 0000
  79+ 0000              SignedHLTo2C:           MACRO
  80+ 0000 ~                                    bit     7,h
  81+ 0000 ~                                    jr      z,.Done2c
  82+ 0000 ~                                    ld      a,h
  83+ 0000 ~                                    and     SignMask8Bit
  84+ 0000 ~                                    ld      h,a
  85+ 0000 ~                                    NegHL
  86+ 0000 ~            .Done2c:
  87+ 0000                                      ENDM
  88+ 0000
  89+ 0000              MemSignedTo2C:          MACRO   memfrom
  90+ 0000 ~                                    ld      hl,(memfrom)
  91+ 0000 ~                                    bit     7,h
  92+ 0000 ~                                    jr      z,.Done2c
  93+ 0000 ~                                    ld      a,h
  94+ 0000 ~                                    and     SignMask8Bit
  95+ 0000 ~                                    ld      h,a
  96+ 0000 ~            .Done2c:                ld      (memfrom),hl
  97+ 0000                                      ENDM
  98+ 0000
  99+ 0000
 100+ 0000                  ;returns result in H
 101+ 0000              EDiv10Inline:           MACRO
 102+ 0000 ~                                    ld      d,0
 103+ 0000 ~                                    ld      hl,de
 104+ 0000 ~                                    add     hl,hl
 105+ 0000 ~                                    add     hl,de
 106+ 0000 ~                                    add     hl,hl
 107+ 0000 ~                                    add     hl,hl
 108+ 0000 ~                                    add     hl,de
 109+ 0000 ~                                    add     hl,hl
 110+ 0000                                      ENDM
 111+ 0000
 112+ 0000              cpHLDE:                 MACRO
 113+ 0000 ~                                    push    hl
 114+ 0000 ~                                    and     a
 115+ 0000 ~                                    sbc     hl,de
 116+ 0000 ~                                    pop     hl
 117+ 0000                                      ENDM
 118+ 0000
 119+ 0000              cpABSDEHL:              MACRO
 120+ 0000 ~                                    push     hl,,de
 121+ 0000 ~                                    ld      a,h
 122+ 0000 ~                                    and     $7F
 123+ 0000 ~                                    ld      h,a
 124+ 0000 ~                                    ld      a,d
 125+ 0000 ~                                    and     $7F
 126+ 0000 ~                                    ld      d,a
 127+ 0000 ~                                    ex      de,hl
 128+ 0000 ~                                    sbc     hl,de
 129+ 0000 ~                                    pop     hl,,de
 130+ 0000                                      ENDM
 131+ 0000
 132+ 0000              ; Simple are they both the same setting z if they are
 133+ 0000              ; tehcicall this works but it measn the final ret z is alwys done
 134+ 0000              ; so jp needs to be to a target
 135+ 0000              cpHLEquDE:              MACRO   passedCheck
 136+ 0000 ~                                    ld      a,h
 137+ 0000 ~                                    cp      d
 138+ 0000 ~                                    jp      nz, passedCheck
 139+ 0000 ~                                    ld      a,l
 140+ 0000 ~                                    cp      e
 141+ 0000 ~            .NoTheSame:
 142+ 0000                                      ENDM
 143+ 0000
 144+ 0000              cpHLEquBC:              MACRO   passedCheck
 145+ 0000 ~                                    ld      a,h
 146+ 0000 ~                                    cp      b
 147+ 0000 ~                                    jp      nz, passedCheck
 148+ 0000 ~                                    ld      a,l
 149+ 0000 ~                                    cp      c
 150+ 0000 ~            .NoTheSame:
 151+ 0000                                      ENDM
 152+ 0000
 153+ 0000              cpDEEquBC:              MACRO   passedCheck
 154+ 0000 ~                                    ld      a,d
 155+ 0000 ~                                    cp      b
 156+ 0000 ~                                    jp      nz, passedCheck
 157+ 0000 ~                                    ld      a,e
 158+ 0000 ~                                    cp      c
 159+ 0000 ~            .NoTheSame:
 160+ 0000                                      ENDM
 161+ 0000              ; Simple version just sets carry if HL < DE reset, does an initial compare for z
 162+ 0000              cpHLDELeadSign:         MACRO
 163+ 0000 ~                                    ld      a,h
 164+ 0000 ~                                    cp      d
 165+ 0000 ~                                    jr      nz,.FullCompare
 166+ 0000 ~                                    ld      a,l
 167+ 0000 ~                                    cp      e
 168+ 0000 ~                                    ret     z
 169+ 0000 ~            .FullCompare:           ld      a,h
 170+ 0000 ~                                    xor     d
 171+ 0000 ~                                    and     $80
 172+ 0000 ~                                    jr      nz,.OppositeSigns   ; If opposite signs is a simple sign test
 173+ 0000 ~                                    ld      a,h                 ; same signs so a little simpler
 174+ 0000 ~                                    and     $80
 175+ 0000 ~                                    jp      z,cpHLDE            ; if h is positive then both are positive by here so just cpHLDE
 176+ 0000 ~                                    jp      cpABSDEHL           ; else we have to do ABScpDEHL
 177+ 0000 ~            .OppositeSigns:         ld      a,h
 178+ 0000 ~                                    and     $80
 179+ 0000 ~                                    and     $80
 180+ 0000 ~                                    jp      z,.HLGTDE
 181+ 0000 ~            .HLLTDE:                SetCarryFlag
 182+ 0000 ~                                    ret
 183+ 0000 ~            .HLGTDE:                ClearCarryFlag
 184+ 0000 ~                                    ret
 185+ 0000                                      ENDM
 186+ 0000
 187+ 0000              ;Unsigned
 188+ 0000              ;If HL == DE, then Z flag is set.
 189+ 0000              ;If HL != DE, then Z flag is reset.
 190+ 0000              ;If HL <  DE, then C flag is set.
 191+ 0000              ;If HL >= DE, then C flag is reset.
 192+ 0000              ;
 193+ 0000              ;Signed
 194+ 0000              ;If HL == DE, then Z flag is set.
 195+ 0000              ;If HL != DE, then Z flag is reset.
 196+ 0000              ;If HL <  DE, then S and P/V are different.
 197+ 0000              ;If HL >= DE, then S and P/V are the same.
 198+ 0000
 199+ 0000
 200+ 0000              N0equN1byN2div256:      MACRO param1,param2,param3
 201+ 0000 ~                                    ld      a,param3                        ;
 202+ 0000 ~                                    ld      e,a                         ; use e as var Q = value of XX15 [n] lo
 203+ 0000 ~                                    ld      a,param2                        ; A = XX16 element
 204+ 0000 ~                                    ld      d,a
 205+ 0000 ~                                    mul
 206+ 0000 ~                                    ld      a,d                         ; we get only the high byte which is like doing a /256 if we think of a as low
 207+ 0000 ~                                    ld      (param1),a                      ; Q         ; result variable = XX16[n] * XX15[n]/256
 208+ 0000                                      ENDM
 209+ 0000
 210+ 0000              AequN1xorN2:            MACRO  param1,param2
 211+ 0000 ~                                    ld      a,(param1)
 212+ 0000 ~                                    xor     param2
 213+ 0000                                      ENDM
 214+ 0000
 215+ 0000              SpeedMulAxis:           MACRO   speedreg, axis
 216+ 0000 ~                                    ld      e,speedreg
 217+ 0000 ~                                    ld      hl,(axis)
 218+ 0000 ~                                    ld      a,h
 219+ 0000 ~                                    ClearSignBitA
 220+ 0000 ~                                    ld      d,a
 221+ 0000 ~                                    mul     de
 222+ 0000 ~                                    ld      a,h
 223+ 0000 ~                                    SignBitOnlyA
 224+ 0000 ~                                    ld      b,a;ld      c,a
 225+ 0000 ~                                    ld      h,d;ld      e,d
 226+ 0000 ~                                    ld      c,0;ld      d,0
 227+ 0000                                      ENDM
 228+ 0000
 229+ 0000              ; Adds speed (8 bit) to vertex (24 bit signed)
 230+ 0000              AddSpeedToVert:         MACRO   vertex
 231+ 0000 ~                                    ld      de,(vertex+1)
 232+ 0000 ~                                    ld      a,(vertex)
 233+ 0000 ~                                    ld      l,a
 234+ 0000 ~                                    call    AddBCHtoDELsigned               ; DEL = DEL + BCH
 235+ 0000 ~                                    ld      a,l
 236+ 0000 ~                                    ld      (vertex),a
 237+ 0000 ~                                    ld      (vertex+1),de
 238+ 0000                                      ENDM
# file closed: ./Macros/MathsMacros.asm
 150  0000                                      INCLUDE "./Macros/MMUMacros.asm"
# file opened: ./Macros/MMUMacros.asm
   1+ 0000              MMUSelectROM0:       MACRO
   2+ 0000 ~                                 nextreg EXSDOSMMU0,        BankROM
   3+ 0000                                   ENDM
   4+ 0000
   5+ 0000              MMUSelectROMS:       MACRO
   6+ 0000 ~                                 nextreg EXSDOSMMU0,        BankROM
   7+ 0000 ~                                 nextreg EXSDOSMMU1,        BankROM
   8+ 0000                                   ENDM
   9+ 0000
  10+ 0000              MMUSelectMathsTables:MACRO
  11+ 0000 ~                                 nextreg MathsTablesMMU,    BankMathsTables
  12+ 0000                                   ENDM
  13+ 0000
  14+ 0000              MMUSelectKeyboard:   MACRO
  15+ 0000 ~                                 nextreg KeyboardMMU,       BankKeyboard
  16+ 0000                                   ENDM
  17+ 0000
  18+ 0000              MMUSelectSpriteBank: MACRO
  19+ 0000 ~            					 nextreg SpritememMMU,	    BankSPRITE
  20+ 0000              					 ENDM
  21+ 0000
  22+ 0000              MMUSelectConsoleBank: MACRO
  23+ 0000 ~            					 nextreg ConsoleImageDataMMU,  BankConsole
  24+ 0000              					 ENDM
  25+ 0000
  26+ 0000              MMUSelectLayer1: 	 MACRO
  27+ 0000 ~            					 nextreg L1memMMU,		    BankLAYER1
  28+ 0000              					 ENDM
  29+ 0000
  30+ 0000              MMUSelectLayer2: 	 MACRO
  31+ 0000 ~            					 nextreg L2memMMU,		    BankLAYER2
  32+ 0000              					 ENDM
  33+ 0000
  34+ 0000              MMUSelectResetUniv:  MACRO
  35+ 0000 ~                                 nextreg ResetUniverseMMU, BankResetUniv
  36+ 0000                                   ENDM
  37+ 0000
  38+ 0000              MMUSelectShipARead:  MACRO
  39+ 0000 ~                                 add    a,BankUNIVDATA0
  40+ 0000 ~                                 nextreg ShipReadMMU,       a
  41+ 0000                                   ENDM
  42+ 0000
  43+ 0000              MMUSelectShipBank1:  MACRO
  44+ 0000 ~            					 nextreg ShipModelMMU,	    BankShipModels1
  45+ 0000              					 ENDM
  46+ 0000              MMUSelectShipBank2:  MACRO
  47+ 0000 ~            					 nextreg ShipModelMMU,	    BankShipModels2
  48+ 0000              					 ENDM
  49+ 0000              MMUSelectShipBank3:  MACRO
  50+ 0000 ~            					 nextreg ShipModelMMU,	    BankShipModels3
  51+ 0000              					 ENDM
  52+ 0000              MMUSelectShipBank4:  MACRO
  53+ 0000 ~            					 nextreg ShipModelMMU,	    BankShipModels4
  54+ 0000              					 ENDM
  55+ 0000
  56+ 0000              MMUSelectShipBankA   MACRO
  57+ 0000 ~            					 nextreg ShipModelMMU,	    a
  58+ 0000              					 ENDM
  59+ 0000
  60+ 0000              MMUSelectShipBankN:  MACRO value
  61+ 0000 ~            					 nextreg ShipModelMMU,	    value
  62+ 0000              					 ENDM
  63+ 0000
  64+ 0000              MMUSelectCommander:	 MACRO
  65+ 0000 ~                                 nextreg CommanderMMU,       BankCommander
  66+ 0000              					 ENDM
  67+ 0000
  68+ 0000              MMUSelectStockTable: MACRO
  69+ 0000 ~                                 nextreg StockTableMMU,     BankStockTable
  70+ 0000              					 ENDM
  71+ 0000
  72+ 0000              MMUSelectCpySrcA:    MACRO
  73+ 0000 ~                                 nextreg DMACpySourceMMU,	a
  74+ 0000              					 ENDM
  75+ 0000
  76+ 0000              MMUSelectCpySrcN:    MACRO value
  77+ 0000 ~                                 nextreg DMACpySourceMMU,	value
  78+ 0000              					 ENDM
  79+ 0000
  80+ 0000              MMUSelectSun:        MACRO
  81+ 0000 ~                                 nextreg SunMMU,            BankSunData
  82+ 0000                                   ENDM
  83+ 0000
  84+ 0000              MMUSelectPlanet:     MACRO
  85+ 0000 ~                                 nextreg PlanetMMU,         BankPlanetData
  86+ 0000                                   ENDM
  87+ 0000
  88+ 0000              MMUSelectUniverseA:  MACRO
  89+ 0000 ~                                 add    a,BankUNIVDATA0
  90+ 0000 ~                                 nextreg UniverseMMU,       a
  91+ 0000                                   ENDM
  92+ 0000              ;Version that assumes a pre calulated A, used whn optimising many switches
  93+ 0000              MMUSelectUnivBankA:  MACRO
  94+ 0000 ~                                 nextreg UniverseMMU,       a
  95+ 0000                                   ENDM
  96+ 0000
  97+ 0000              MMUSelectUniverseN:  MACRO value
  98+ 0000 ~                                 nextreg UniverseMMU,       BankUNIVDATA0+value
  99+ 0000                                   ENDM
 100+ 0000
 101+ 0000              MMUSelectSpaceStation: MACRO
 102+ 0000 ~                                 nextreg SpaceStationMMU,   BankSpaceStationData
 103+ 0000                                   ENDM
 104+ 0000
 105+ 0000              MMUSelectMathsBankedFns   MACRO
 106+ 0000 ~                                 nextreg MathsBankedFnsMMU, BankMathsBankedFns
 107+ 0000                                   ENDM
 108+ 0000
 109+ 0000              MMUSelectGalaxyA:    MACRO
 110+ 0000 ~                                 nextreg GalaxyDataMMU,     a
 111+ 0000                                   ENDM
 112+ 0000
 113+ 0000              MMUSelectGalaxyN:    MACRO value
 114+ 0000 ~                                 nextreg GalaxyDataMMU,     BankGalaxyData0+value
 115+ 0000                                   ENDM
 116+ 0000              MMUSelectGalaxyACopy:MACRO
 117+ 0000 ~                                 nextreg UniverseMMU,       a
 118+ 0000                                   ENDM
 119+ 0000
 120+ 0000              MMUSelectUniverseAbs:MACRO value
 121+ 0000 ~                                 nextreg UniverseMMU,       value
 122+ 0000                                   ENDM
 123+ 0000
 124+ 0000              MMUSelectMenuGalCht: MACRO
 125+ 0000 ~                                 nextreg MenuGalChtMMU,		BankMenuGalCht
 126+ 0000              					 ENDM
 127+ 0000
 128+ 0000              MMUSelectMenuShrCht: MACRO
 129+ 0000 ~            					 nextreg MenuShrChtMMU,		BankMenuShrCht
 130+ 0000              					 ENDM
 131+ 0000
 132+ 0000              MMUSelectMenuInvent: MACRO
 133+ 0000 ~                                 nextreg MenuInventMMU,		BankMenuInvent
 134+ 0000              					 ENDM
 135+ 0000
 136+ 0000              MMUSelectMenuSystem: MACRO
 137+ 0000 ~                                 nextreg MenuSystemMMU,		BankMenuSystem
 138+ 0000              					 ENDM
 139+ 0000
 140+ 0000              MMUSelectMenuMarket: MACRO
 141+ 0000 ~                                 nextreg MenuMarketMMU,		BankMenuMarket
 142+ 0000              					 ENDM
 143+ 0000
 144+ 0000              MMUSelectMenuStatus: MACRO
 145+ 0000 ~                                 nextreg MenuStatusMMU,		BankMenuStatus
 146+ 0000              					 ENDM
 147+ 0000
 148+ 0000              MMUSelectViewFront:  MACRO
 149+ 0000 ~                                 nextreg ScreenBankMMU,		BankFrontView
 150+ 0000              					 ENDM
 151+ 0000
 152+ 0000              MMUSelectScreenA:    MACRO
 153+ 0000 ~                                 nextreg ScreenBankMMU,		a
 154+ 0000              					 ENDM
 155+ 0000
 156+ 0000              MMUSelectSound:      MACRO
 157+ 0000 ~                                 nextreg SoundMMU,		    BankSound
 158+ 0000              					 ENDM
 159+ 0000
 160+ 0000
 161+ 0000
 162+ 0000              SaveMMU6:           MACRO
 163+ 0000 ~                                GetNextReg  MMU_SLOT_6_REGISTER
 164+ 0000 ~                                ld      (SavedMMU6),a
 165+ 0000                                  ENDM
 166+ 0000
 167+ 0000              RestoreMMU6:        MACRO
 168+ 0000 ~                                ld      a,(SavedMMU6)               ; now restore up post interrupt
 169+ 0000 ~                                nextreg MMU_SLOT_6_REGISTER,a       ; Restore MMU7
 170+ 0000                                  ENDM
 171+ 0000
 172+ 0000              SaveMMU7:           MACRO
 173+ 0000 ~                                GetNextReg  MMU_SLOT_7_REGISTER
 174+ 0000 ~                                ld      (SavedMMU7),a
 175+ 0000                                  ENDM
 176+ 0000
 177+ 0000              RestoreMMU7:        MACRO
 178+ 0000 ~                                ld      a,(SavedMMU7)               ; now restore up post interrupt
 179+ 0000 ~                                nextreg MMU_SLOT_7_REGISTER,a       ; Restore MMU7
 180+ 0000                                  ENDM
# file closed: ./Macros/MMUMacros.asm
 151  0000                                      INCLUDE "./Macros/NegateMacros.asm"
# file opened: ./Macros/NegateMacros.asm
   1+ 0000
   2+ 0000              macronegate16hl:	MACRO
   3+ 0000 ~            					xor 	a
   4+ 0000 ~            					sub 	l
   5+ 0000 ~            					ld 		l,a
   6+ 0000 ~            					sbc 	a,a
   7+ 0000 ~            					sub 	h
   8+ 0000 ~            					ld 		h,a
   9+ 0000              					ENDM
  10+ 0000
  11+ 0000
  12+ 0000              macroAbsHL:         MACRO
  13+ 0000 ~                                bit     7,h
  14+ 0000 ~                                jp      z,.alreadyABS
  15+ 0000 ~            					xor 	a
  16+ 0000 ~            					sub 	l
  17+ 0000 ~            					ld 		l,a
  18+ 0000 ~            					sbc 	a,a
  19+ 0000 ~            					sub 	h
  20+ 0000 ~            					ld 		h,a
  21+ 0000 ~            .alreadyABS:
  22+ 0000                                  ENDM
  23+ 0000
  24+ 0000              macronegate16de:	MACRO
  25+ 0000 ~            					xor 	a
  26+ 0000 ~                                sub 	e
  27+ 0000 ~                                ld 		e,a
  28+ 0000 ~                                sbc 	a,a
  29+ 0000 ~                                sub 	d
  30+ 0000 ~                                ld 		d,a
  31+ 0000              					ENDM
  32+ 0000
  33+ 0000              macronegate16bc:	MACRO
  34+ 0000 ~            					xor 	a
  35+ 0000 ~                                sub 	c
  36+ 0000 ~                                ld 		c,a
  37+ 0000 ~                                sbc 	a,a
  38+ 0000 ~                                sub 	b
  39+ 0000 ~                                ld 		b,a
  40+ 0000              					ENDM
  41+ 0000
  42+ 0000              macronegate16ix:	MACRO
  43+ 0000 ~            					xor 	a
  44+ 0000 ~                                sub 	ixl
  45+ 0000 ~                                ld 		ixl,a
  46+ 0000 ~                                sbc 	a,a
  47+ 0000 ~                                sub 	ixh
  48+ 0000 ~                                ld 		ixh,a
  49+ 0000              					ENDM
  50+ 0000
  51+ 0000
  52+ 0000              NegIY:			    MACRO
  53+ 0000 ~                                xor a
  54+ 0000 ~                                sub iyl
  55+ 0000 ~                                ld iyl,a
  56+ 0000 ~                                sbc a,a
  57+ 0000 ~                                sub iyh
  58+ 0000 ~                                ld iyh,a
  59+ 0000                                  ENDM
  60+ 0000
  61+ 0000              NegHL:			    MACRO
  62+ 0000 ~                                xor a
  63+ 0000 ~                                sub l
  64+ 0000 ~                                ld l,a
  65+ 0000 ~                                sbc a,a
  66+ 0000 ~                                sub h
  67+ 0000 ~                                ld h,a
  68+ 0000                                  ENDM
  69+ 0000
  70+ 0000              NegDE:			    MACRO
  71+ 0000 ~                                xor a
  72+ 0000 ~                                sub e
  73+ 0000 ~                                ld e,a
  74+ 0000 ~                                sbc a,a
  75+ 0000 ~                                sub d
  76+ 0000 ~                                ld d,a
  77+ 0000                                  ENDM
  78+ 0000
  79+ 0000              NegBC:			    MACRO
  80+ 0000 ~                                xor a
  81+ 0000 ~                                sub c
  82+ 0000 ~                                ld c,a
  83+ 0000 ~                                sbc a,a
  84+ 0000 ~                                sub  b
  85+ 0000 ~                                ld b,a
  86+ 0000                                  ENDM
  87+ 0000
  88+ 0000              NegH                MACRO
  89+ 0000 ~                                ld      a,h
  90+ 0000 ~                                neg
  91+ 0000 ~                                ld      h,a
  92+ 0000                                  ENDM
  93+ 0000
  94+ 0000              NegD                MACRO
  95+ 0000 ~                                ld      a,d
  96+ 0000 ~                                neg
  97+ 0000 ~                                ld      d,a
  98+ 0000                                  ENDM
  99+ 0000
 100+ 0000              NegB                MACRO
 101+ 0000 ~                                ld      a,b
 102+ 0000 ~                                neg
 103+ 0000 ~                                ld      b,a
 104+ 0000                                  ENDM
 105+ 0000
# file closed: ./Macros/NegateMacros.asm
 152  0000                                      INCLUDE "./Macros/returnMacros.asm"
# file opened: ./Macros/returnMacros.asm
   1+ 0000              ReturnIfHLNegative:     MACRO   target
   2+ 0000 ~                                    bit     7,h
   3+ 0000 ~                                    ret     nz
   4+ 0000                                      ENDM
   5+ 0000
   6+ 0000              ReturnIfDENegative:     MACRO   target
   7+ 0000 ~                                    bit     7,d
   8+ 0000 ~                                    ret     nz
   9+ 0000                                      ENDM
  10+ 0000
  11+ 0000              ReturnOnBitSet:         MACRO  reg, bitnbr
  12+ 0000 ~                                    bit 	bitnbr,reg
  13+ 0000 ~                                    ret     nz
  14+ 0000                                      ENDM
  15+ 0000
  16+ 0000              ReturnOnMemBitSet:      MACRO mem, bitnbr
  17+ 0000 ~                                    ld   a,(mem)
  18+ 0000 ~                                    bit 	bitnbr,a
  19+ 0000 ~                                    ret     nz
  20+ 0000                                      ENDM
  21+ 0000
  22+ 0000              ReturnOnBitClear:       MACRO reg, bitnbr
  23+ 0000 ~                                    bit 	bitnbr,reg
  24+ 0000 ~                                    ret		z
  25+ 0000                                      ENDM
  26+ 0000
  27+ 0000              ReturnOnMemBitClear:    MACRO mem, bitnbr
  28+ 0000 ~                                    ld     a,(mem)
  29+ 0000 ~                                    bit 	bitnbr,a
  30+ 0000 ~                                    ret		z
  31+ 0000                                      ENDM
  32+ 0000
  33+ 0000              ReturnIfMemFalse:       MACRO   mem
  34+ 0000 ~                                    ld      a,(mem)
  35+ 0000 ~                                    and     a
  36+ 0000 ~                                    ret     nz
  37+ 0000                                      ENDM
  38+ 0000
  39+ 0000              ReturnIfMemTrue:        MACRO   mem
  40+ 0000 ~                                    ld      a,(mem)
  41+ 0000 ~                                    and     a
  42+ 0000 ~                                    ret     z
  43+ 0000                                      ENDM
  44+ 0000
  45+ 0000              ReturnIfAIsZero:        MACRO
  46+ 0000 ~                                    and     a
  47+ 0000 ~                                    ret     z
  48+ 0000                                      ENDM
  49+ 0000
  50+ 0000              ReturnIfMemisZero:      MACRO mem
  51+ 0000 ~                                    ld   a,(mem)
  52+ 0000 ~                                    and a
  53+ 0000 ~                                    ret    z
  54+ 0000                                      ENDM
  55+ 0000
  56+ 0000              ReturnIfMemIsNegative:  MACRO mem
  57+ 0000 ~                                    ld      a,(mem)
  58+ 0000 ~                                    and     $80
  59+ 0000 ~                                    ret     nz
  60+ 0000                                      ENDM
  61+ 0000
  62+ 0000              ReturnIfBitMaskClear    MACRO   bitmask
  63+ 0000 ~                                    and     bitmask
  64+ 0000 ~                                    ret     z
  65+ 0000                                      ENDM
  66+ 0000
  67+ 0000              ReturnIfBitMaskSet      MACRO   bitmask
  68+ 0000 ~                                    and     bitmask
  69+ 0000 ~                                    ret     nz
  70+ 0000                                      ENDM
  71+ 0000
  72+ 0000              ReturnIfMemEquN:        MACRO mem, value
  73+ 0000 ~                                    ld     a,(mem)
  74+ 0000 ~                                    cp     value
  75+ 0000 ~                                    ret    nz
  76+ 0000                                      ENDM
  77+ 0000
  78+ 0000              ReturnIfMemNeNusng:     MACRO mem, value
  79+ 0000 ~                                    ld   a,(mem)
  80+ 0000 ~                                    cp     value
  81+ 0000 ~                                    ret    z
  82+ 0000                                      ENDM
  83+ 0000
  84+ 0000              ReturnIfRegNotZero:     MACRO reg
  85+ 0000 ~                                    ld      a, reg
  86+ 0000 ~                                    and     a
  87+ 0000 ~                                    ret     nz
  88+ 0000                                      ENDM
  89+ 0000
  90+ 0000              ReturnIfANotZero:       MACRO
  91+ 0000 ~                                    and     a
  92+ 0000 ~                                    ret     nz
  93+ 0000                                      ENDM
  94+ 0000
  95+ 0000              ReturnIfNotZero:        MACRO
  96+ 0000 ~                                    ret     nz
  97+ 0000                                      ENDM
  98+ 0000
  99+ 0000              ReturnIfZero:           MACRO
 100+ 0000 ~                                    ret     z
 101+ 0000                                      ENDM
 102+ 0000
 103+ 0000              ReturnIfNegative:       MACRO
 104+ 0000 ~                                    ret     m
 105+ 0000                                      ENDM
 106+ 0000
 107+ 0000
 108+ 0000              ReturnIfMemNotZero:     MACRO mem
 109+ 0000 ~                                    ld     a,(mem)
 110+ 0000 ~                                    and     a
 111+ 0000 ~                                    ret    nz
 112+ 0000                                      ENDM
 113+ 0000
 114+ 0000              ReturnIfAGTEusng:       MACRO value
 115+ 0000 ~                                    cp    value
 116+ 0000 ~                                    ret	 nc
 117+ 0000                                      ENDM
 118+ 0000
 119+ 0000              ReturnIfRegLTNusng:     MACRO reg, value
 120+ 0000 ~                                    ld      a,reg
 121+ 0000 ~                                    cp      value
 122+ 0000 ~                                    ret	    c
 123+ 0000                                      ENDM
 124+ 0000
 125+ 0000              ReturnIfALTNusng:       MACRO value
 126+ 0000 ~                                    cp    value
 127+ 0000 ~                                    ret	 c
 128+ 0000                                      ENDM
 129+ 0000
 130+ 0000              ReturnIfAGTENusng:      MACRO value
 131+ 0000 ~                                    cp    value
 132+ 0000 ~                                    ret	 nc
 133+ 0000                                      ENDM
 134+ 0000
 135+ 0000              ReturnIfAGTEMemusng:    MACRO value
 136+ 0000 ~                                    ld      hl,value
 137+ 0000 ~                                    cp      (hl)
 138+ 0000 ~                                    ret	    nc
 139+ 0000                                      ENDM
 140+ 0000
 141+ 0000              ReturnIfANENusng:       MACRO value
 142+ 0000 ~                                    cp      value
 143+ 0000 ~                                    ret     nz
 144+ 0000                                      ENDM
 145+ 0000
 146+ 0000              ReturnIfAEqNusng:       MACRO value
 147+ 0000 ~                                    cp      value
 148+ 0000 ~                                    ret     z
 149+ 0000                                      ENDM
 150+ 0000
# file closed: ./Macros/returnMacros.asm
 153  0000                                      INCLUDE "./Macros/ShiftMacros.asm"
# file opened: ./Macros/ShiftMacros.asm
   1+ 0000              ShiftIYRight1: MACRO
   2+ 0000 ~            			   ld 	a,iyh
   3+ 0000 ~            			   srl 	a
   4+ 0000 ~            			   ld	iyh,a
   5+ 0000 ~            			   ld 	a,iyl
   6+ 0000 ~            			   rra
   7+ 0000 ~            			   ld	iyl,a
   8+ 0000              			   ENDM
   9+ 0000
  10+ 0000              ShiftIXRight1: MACRO
  11+ 0000 ~            			   ld 	a,ixh
  12+ 0000 ~            			   srl 	a
  13+ 0000 ~            			   ld	ixh,a
  14+ 0000 ~            			   ld 	a,ixl
  15+ 0000 ~            			   rra
  16+ 0000 ~            			   ld	ixl,a
  17+ 0000              			   ENDM
  18+ 0000
  19+ 0000              ShiftIXhHLRight1: MACRO
  20+ 0000 ~                           ld  a,ixh
  21+ 0000 ~                           srl a
  22+ 0000 ~                           ld  ixh,a
  23+ 0000 ~            			   rr  h
  24+ 0000 ~            			   rr  l
  25+ 0000              			   ENDM
  26+ 0000
  27+ 0000              ShiftIYhDERight1: MACRO
  28+ 0000 ~                           ld  a,iyh
  29+ 0000 ~                           srl a
  30+ 0000 ~                           ld  iyh,a
  31+ 0000 ~                           rr  d
  32+ 0000 ~            			   rr  e
  33+ 0000              			   ENDM
  34+ 0000
  35+ 0000              ShiftIYlBCRight1: MACRO
  36+ 0000 ~                           ld  a,iyl
  37+ 0000 ~                           srl a
  38+ 0000 ~                           ld  iyl,a
  39+ 0000 ~            			   rr  b
  40+ 0000 ~                           rr  c
  41+ 0000              			   ENDM
  42+ 0000
  43+ 0000              ShiftIXlBCRight1: MACRO
  44+ 0000 ~                           ld  a,ixl
  45+ 0000 ~                           srl a
  46+ 0000 ~                           ld  ixl,a
  47+ 0000 ~            			   rr  b
  48+ 0000 ~                           rr  c
  49+ 0000              			   ENDM
  50+ 0000
  51+ 0000              ShiftHLRight1: MACRO
  52+ 0000 ~            			   srl h
  53+ 0000 ~            			   rr  l
  54+ 0000              			   ENDM
  55+ 0000
  56+ 0000              ShiftDERight1: MACRO
  57+ 0000 ~            			   srl d
  58+ 0000 ~            			   rr  e
  59+ 0000              			   ENDM
  60+ 0000
  61+ 0000              ShiftBCRight1: MACRO
  62+ 0000 ~            			   srl b
  63+ 0000 ~            			   rr  c
  64+ 0000              			   ENDM
  65+ 0000
  66+ 0000
  67+ 0000
  68+ 0000              ShiftHLDiv8:   MACRO
  69+ 0000 ~            			   srl h
  70+ 0000 ~            			   rr  l
  71+ 0000 ~            			   srl h
  72+ 0000 ~            			   rr  l
  73+ 0000 ~            			   srl h
  74+ 0000 ~            			   rr  l
  75+ 0000              			   ENDM
  76+ 0000
  77+ 0000              ShiftHLLeft1:  MACRO    ; 16 T states
  78+ 0000 ~            			   sla l
  79+ 0000 ~            			   rl  h
  80+ 0000              			   ENDM
  81+ 0000
  82+ 0000              ShiftDELeft1:  MACRO    ; 16 T states
  83+ 0000 ~            			   sla e
  84+ 0000 ~            			   rl  d
  85+ 0000              			   ENDM
  86+ 0000
  87+ 0000              BarrelHLLeft3: MACRO
  88+ 0000 ~                           ex       de,hl   ; 4   43 T states vs 32 for doing ShiftHL Twice, so need at least 3 Shifts
  89+ 0000 ~                           push     bc      ; 10
  90+ 0000 ~                           ld       b,3     ; 7
  91+ 0000 ~                           bsrl     de,b    ; 8
  92+ 0000 ~                           pop      bc      ; 10
  93+ 0000 ~                           ex       de,hl   ; 4
  94+ 0000                             ENDM
  95+ 0000
  96+ 0000              BarrelHLRight3: MACRO
  97+ 0000 ~                           ex       de,hl   ; 4   43 T states vs 32 for doing ShiftHL Twice, so need at least 3 Shifts
  98+ 0000 ~                           push     bc      ; 10
  99+ 0000 ~                           ld       b,3     ; 7
 100+ 0000 ~                           bsrl     de,b    ; 8
 101+ 0000 ~                           pop      bc      ; 10
 102+ 0000 ~                           ex       de,hl   ; 4
 103+ 0000                             ENDM
 104+ 0000
 105+ 0000              RollBCLeft1:   MACRO	; 16 T states
 106+ 0000 ~                           rl  c
 107+ 0000 ~                           rl  b
 108+ 0000                             ENDM
 109+ 0000
 110+ 0000              RollDELeft1:   MACRO	; 16 T states
 111+ 0000 ~                           rl  e
 112+ 0000 ~                           rl  d
 113+ 0000                             ENDM
 114+ 0000
 115+ 0000              ShiftBCLeft1:  MACRO    ; 16 T states
 116+ 0000 ~            			   sla c
 117+ 0000 ~            			   rl  b
 118+ 0000              			   ENDM
 119+ 0000
 120+ 0000              ShiftLeftMem:       MACRO   reg
 121+ 0000 ~                                ld      hl,reg
 122+ 0000 ~                                sla     (hl)
 123+ 0000                                  ENDM
 124+ 0000
 125+ 0000
 126+ 0000
 127+ 0000              ShiftMem16Right1:   MACRO memaddr
 128+ 0000 ~                                ld    hl,(memaddr)
 129+ 0000 ~                                srl   h
 130+ 0000 ~                                rr    l
 131+ 0000 ~                                ld    (memaddr),hl
 132+ 0000                                  ENDM
 133+ 0000
 134+ 0000              ShiftMem8Right1:    MACRO memaddr
 135+ 0000 ~                                ld      a,(memaddr)
 136+ 0000 ~                                srl     a
 137+ 0000 ~                                ld      (memaddr),a
 138+ 0000                                  ENDM
 139+ 0000
 140+ 0000
 141+ 0000              ShiftMem8Left1A:    MACRO memaddr
 142+ 0000 ~                                ld      a,(memaddr)
 143+ 0000 ~                                sla     a
 144+ 0000 ~                                ld      (memaddr),a
 145+ 0000                                  ENDM
 146+ 0000
# file closed: ./Macros/ShiftMacros.asm
 154  0000                                      INCLUDE "./Macros/signBitMacros.asm"
# file opened: ./Macros/signBitMacros.asm
   1+ 0000              SetMemBitN              MACRO mem,bitnbr
   2+ 0000 ~                                    ld      hl,mem
   3+ 0000 ~                                    set     bitnbr,(hl)
   4+ 0000                                      ENDM
   5+ 0000
   6+ 0000              ClearMemBitN            MACRO mem,bitnbr
   7+ 0000 ~                                    ld      hl,mem
   8+ 0000 ~                                    res     bitnbr,(hl)
   9+ 0000                                      ENDM
  10+ 0000
  11+ 0000
  12+ 0000              ClearSignBitMem:        MACRO mem
  13+ 0000 ~                                    ld      a,(mem)
  14+ 0000 ~                                    and     SignMask8Bit
  15+ 0000 ~                                    ld      (mem),a
  16+ 0000                                      ENDM
  17+ 0000
  18+ 0000              SetSignBitMem:          MACRO   mem
  19+ 0000 ~                                    ld      a,(mem)
  20+ 0000 ~                                    or      SignOnly8Bit
  21+ 0000 ~                                    ld      (mem),a
  22+ 0000                                      ENDM
  23+ 0000
  24+ 0000              FlipSignMem:            MACRO mem
  25+ 0000 ~                                    ld  a,(mem)
  26+ 0000 ~                                    xor SignOnly8Bit
  27+ 0000 ~                                    ld  (mem),a
  28+ 0000                                      ENDM
  29+ 0000
  30+ 0000              SignBitOnlyMem:         MACRO mem
  31+ 0000 ~                                    ld      a, (mem)
  32+ 0000 ~                                    and     SignOnly8Bit
  33+ 0000 ~                                    ld      (mem),a
  34+ 0000                                      ENDM
  35+ 0000
  36+ 0000              ClearSignBit:           MACRO reg
  37+ 0000 ~                                    ld      a,reg
  38+ 0000 ~                                    and     SignMask8Bit
  39+ 0000 ~                                    ld      reg,a
  40+ 0000                                      ENDM
  41+ 0000
  42+ 0000              SetSignBit:             MACRO   reg
  43+ 0000 ~                                    ld      a,reg
  44+ 0000 ~                                    or      SignOnly8Bit
  45+ 0000 ~                                    ld      reg,a
  46+ 0000                                      ENDM
  47+ 0000
  48+ 0000              FlipSignBit:            MACRO   reg
  49+ 0000 ~                                    ld      a, reg
  50+ 0000 ~                                    xor     SignOnly8Bit
  51+ 0000 ~                                    ld      reg,a
  52+ 0000                                      ENDM
  53+ 0000
  54+ 0000              SignBitOnly:            MACRO   reg
  55+ 0000 ~                                    ld      a, reg
  56+ 0000 ~                                    and     SignOnly8Bit
  57+ 0000 ~                                    ld      reg,a
  58+ 0000                                      ENDM
  59+ 0000
  60+ 0000              ClearSignBitA:          MACRO
  61+ 0000 ~                                    and     SignMask8Bit
  62+ 0000                                      ENDM
  63+ 0000
  64+ 0000              SetSignBitA:            MACRO
  65+ 0000 ~                                    or      SignOnly8Bit
  66+ 0000                                      ENDM
  67+ 0000
  68+ 0000              FlipSignBitA:           MACRO
  69+ 0000 ~                                    xor     SignOnly8Bit
  70+ 0000                                      ENDM
  71+ 0000
  72+ 0000              SignBitOnlyA:           MACRO
  73+ 0000 ~                                    and     SignOnly8Bit
  74+ 0000                                      ENDM
# file closed: ./Macros/signBitMacros.asm
 155  0000                                      INCLUDE "./Macros/KeyboardMacros.asm"
# file opened: ./Macros/KeyboardMacros.asm
   1+ 0000              MacroIsKeyPressed:      MACRO C_Pressed_keycode
   2+ 0000 ~                                    ld      a,C_Pressed_keycode
   3+ 0000 ~                                    MMUSelectKeyboard
   4+ 0000 ~                                    call    is_key_pressed
   5+ 0000                                      ENDM
   6+ 0000
   7+ 0000              MacroInitkeyboard:      MACRO
   8+ 0000 ~                                    MMUSelectKeyboard
   9+ 0000 ~                                    call    init_keyboard
  10+ 0000                                      ENDM
  11+ 0000
# file closed: ./Macros/KeyboardMacros.asm
 156  0000                                      INCLUDE "./Macros/print_text_macros.asm"
# file opened: ./Macros/print_text_macros.asm
   1+ 0000
   2+ 0000              print_msg_at_de_at_b_hl_macro:  MACRO   varcolour
   3+ 0000 ~                                    ld      c,varcolour
   4+ 0000 ~                                    call    l2_print_at_320
   5+ 0000                                      ENDM
   6+ 0000
   7+ 0000              print_msg_ld_bc_at_de_macro:  MACRO  varcol
   8+ 0000 ~                                    ld      hl,varcol
   9+ 0000 ~                                    call    l2_print_at_320
  10+ 0000                                      ENDM
  11+ 0000
  12+ 0000              print_msg_at_de_macro:  MACRO   varcolour, varrow, varcol
  13+ 0000 ~                                    ld      c,varcolour
  14+ 0000 ~                                    ld      b,varrow
  15+ 0000 ~                                    ld      hl,varcol
  16+ 0000 ~                                    call    l2_print_at_320
  17+ 0000                                      ENDM
  18+ 0000
  19+ 0000              print_msg_ld_bc_macro:  MACRO   varcol, varmessage
  20+ 0000 ~                                    ld      hl,varcol
  21+ 0000 ~                                    ld      de,varmessage
  22+ 0000 ~                                    call    l2_print_at_320
  23+ 0000                                      ENDM
  24+ 0000
  25+ 0000              print_msg_macro:        MACRO   varcolour, varrow, varcol, varmessage
  26+ 0000 ~                                    ld      c,varcolour
  27+ 0000 ~                                    ld      b,varrow
  28+ 0000 ~                                    ld      hl,varcol
  29+ 0000 ~                                    ld      de,varmessage
  30+ 0000 ~                                    call    l2_print_at_320
  31+ 0000                                      ENDM
  32+ 0000
  33+ 0000              print_msg_wrap_macro:   MACRO   varcolour, varrow, varcol, varmessage
  34+ 0000 ~                                    ld      c,varcolour
  35+ 0000 ~                                    ld      b,varrow
  36+ 0000 ~                                    ld      hl,varcol
  37+ 0000 ~                                    ld      de,varmessage
  38+ 0000 ~                                    call    l2_print_at_wrap_320
  39+ 0000                                      ENDM
  40+ 0000
# file closed: ./Macros/print_text_macros.asm
 157  0000                                      INCLUDE "./Universe/UniverseMacros/asm_linedraw.asm"
# file opened: ./Universe/UniverseMacros/asm_linedraw.asm
   1+ 0000              ClippingVarsMacro:   MACRO   prefix1?
   2+ 0000 ~            ;-- Clipping code for universe objects -------------------------------------------
   3+ 0000 ~            prefix1?_XX13        DB 0
   4+ 0000 ~
   5+ 0000 ~
   6+ 0000 ~            prefix1?_varK3		 DS	4				; D2
   7+ 0000 ~            prefix1?_centreX     equ prefix1?_varK3
   8+ 0000 ~            prefix1?_varK3p2	 DB	0				; 42
   9+ 0000 ~            prefix1?_varK3p3	 DB	0				; 43
  10+ 0000 ~            prefix1?_varK3p1	 equ prefix1?_varK3+1			; D3
  11+ 0000 ~            prefix1?_varK4		 DS	4				; E0
  12+ 0000 ~            prefix1?_centreY     equ prefix1?_varK4
  13+ 0000 ~            prefix1?_varK4p1	 equ prefix1?_varK4+1			; D3
  14+ 0000 ~            prefix1?_varK5       DS  6
  15+ 0000 ~            prefix1?_varK5p2     equ prefix1?_varK5+2
  16+ 0000 ~            prefix1?_varK6       DS  6
  17+ 0000 ~            prefix1?_varK6p2     equ prefix1?_varK6+2
  18+ 0000 ~
  19+ 0000 ~            prefix1?_XX12p2      DB 0    ; The line's gradient * 256 (so 1.0 = 256)
  20+ 0000 ~            prefix1?_XX12p3      DB 0    ; The direction of slope ; + LT to BR; - TR to BL
  21+ 0000 ~            prefix1?_XX12p4      DB 0
  22+ 0000 ~            prefix1?_XX12p5      DB 0
  23+ 0000 ~            prefix1?_Delta_x     EQU prefix1?_XX12p2
  24+ 0000 ~            prefix1?_Delta_y     EQU prefix1?_XX12p4
  25+ 0000 ~            prefix1?_Tvar        DB 0    ; The gradient of slope ; 0 if it's a shallow slope (DX > DY) ; &FF if it's a steep slope (DY > DX) Returns:  XX15        m         x1 as an 8-bit coordinate XX15+2               y1 as an 8-bit coordinate
  26+ 0000 ~            prefix1?_Qvar        DB 0
  27+ 0000 ~            prefix1?_Rvar        DB 0    ; general purpose for calcs  Paired with S must be done this way round for SUBHeightFromY1 etc to work
  28+ 0000 ~            prefix1?_Svar        DB 0    ; sign variable
  29+ 0000 ~            prefix1?_SRvarPair   EQU prefix1?_Rvar
  30+ 0000 ~            prefix1?_Xreg        DB 0
  31+ 0000 ~            prefix1?_Yreg        DB 0
  32+ 0000 ~            prefix1?_YXregPair   EQU prefix1?_Xreg
  33+ 0000                                   ENDM
  34+ 0000
  35+ 0000              ;-- Name: LL28 Calculate R = 256 * A / Q
  36+ 0000              ;-- LL28+4              Skips the A >= Q check and always returns with C flag cleared, so this can be called if we know the division will work
  37+ 0000              ;-- LL31                Skips the A >= Q check and does not set the R counter, so this can be used for jumping straight into the division loop if R is already set to 254 and we know the division will work
  38+ 0000              ;   Reg mapping 6502  Z80
  39+ 0000              ;               a     a
  40+ 0000              ;               b     x
  41+ 0000              ;               c     q
  42+ 0000              ;               d     r
  43+ 0000              ;
  44+ 0000              ClippingCodeLL28Macro:      MACRO   prefix1?
  45+ 0000 ~            prefix1?_LL28_6502:         ld      hl,Qvar                 ; CMP Q                  \ If A >= Q, then the answer will not fit in one byte,
  46+ 0000 ~                                        ld      c,(hl)                  ; using c as Q var
  47+ 0000 ~                                        cp      c
  48+ 0000 ~                                        FlipCarryFlag
  49+ 0000 ~                                        jp      c, prefix1?_LL2_6502    ; BCS LL2                \ so jump to LL2 to return 255
  50+ 0000 ~                                        ld      b,$FE                   ; LDX #%11111110         \ Set R to have bits 1-7 set, so we can rotate through 7 loop iterations, getting a 1 each time, and then we use b as Rvar
  51+ 0000 ~            prefix1?_LL31_6502:          sla     a                       ; ASL A                  \ Shift A to the left
  52+ 0000 ~                                        jp      c, prefix1?_LL29_6502             ; BCS LL29               \ If bit 7 of A was set, then jump straight to the subtraction
  53+ 0000 ~                                        FlipCarryFlag                   ;                          If A < N, then C flag is set.
  54+ 0000 ~                                        JumpIfALTNusng c, prefix1?_LL31_SKIPSUB_6502 ; CMP Q              \ If A < Q, skip the following subtraction
  55+ 0000 ~                                                                            ; BCC P%+4
  56+ 0000 ~                                        sub     c                       ; SBC Q                  \ A >= Q, so set A = A - Q
  57+ 0000 ~                                        ClearCarryFlag
  58+ 0000 ~            prefix1?_LL31_SKIPSUB_6502:  FlipCarryFlag
  59+ 0000 ~                                        rl      b                       ; ROL R                  \ Rotate the counter in R to the left, and catch the result bit into bit 0 (which will be a 0 if we didn't do the subtraction, or 1 if we did)
  60+ 0000 ~                                        jp      c, prefix1?_LL31_6502            ; BCS LL31               \ If we still have set bits in R, loop back to LL31 to do the next iteration of 7
  61+ 0000 ~                                        ld      a,b
  62+ 0000 ~                                        ld      (Rvar),a
  63+ 0000 ~                                        ret                             ; RTS                    \ R left with remainder of division
  64+ 0000 ~            prefix1?_LL29_6502:          sub     c                       ; SBC Q                  \ A >= Q, so set A = A - Q
  65+ 0000 ~                                        SetCarryFlag                    ; SEC                    \ Set the C flag to rotate into the result in R
  66+ 0000 ~                                        rl      b                       ; ROL R                  \ Rotate the counter in R to the left, and catch the result bit into bit 0 (which will be a 0 if we didn't do the subtraction, or 1 if we did)
  67+ 0000 ~                                        jp      c, prefix1?_LL31_6502            ; BCS LL31               \ If we still have set bits in R, loop back to LL31 to do the next iteration of 7
  68+ 0000 ~                                        ld      a,b                     ; RTS                    \ Return from the subroutine with R containing the
  69+ 0000 ~                                        ld      (Rvar),a                ; .
  70+ 0000 ~                                        ret                             ; .                      \ remainder of the division
  71+ 0000 ~            prefix1?_LL2_6502:          ld      a,$FF                   ; LDA #255               \ The division is very close to 1, so return the closest
  72+ 0000 ~                                        ld      (Rvar),a                ; STA R                  \ possible answer to 256, i.e. R = 255
  73+ 0000 ~                                        SetCarryFlag                    ; we failed so need carry flag set
  74+ 0000 ~                                        ret                             ; RTS                    \ Return from the subroutine
  75+ 0000 ~
  76+ 0000 ~            prefix1?_ADDXRegtoY1:       ld      a,(Xreg)                ; Set y1 = y1 + (Y X)
  77+ 0000 ~                                        ld      c,a
  78+ 0000 ~                                        ld      b,0
  79+ 0000 ~                                        ld      hl,(prefix1?_XX1532)
  80+ 0000 ~                                        ClearCarryFlag
  81+ 0000 ~                                        adc     hl,bc
  82+ 0000 ~                                        ld      (prefix1?_XX1532),hl
  83+ 0000 ~                                        ret
  84+ 0000 ~
  85+ 0000 ~            prefix1?_ADDYXRegtoY1:      ld      bc,(YXregPair)          ; Set y1 = y1 + (Y X)
  86+ 0000 ~                                        ld      hl,(prefix1?_XX1532)
  87+ 0000 ~                                        ClearCarryFlag
  88+ 0000 ~                                        adc     hl,bc
  89+ 0000 ~                                        ld      (prefix1?_XX1532),hl
  90+ 0000 ~                                        ret
  91+ 0000 ~
  92+ 0000 ~            prefix1?_ADDYXRegtoX1:      ld      bc,(YXregPair)          ; Set x1 = x1 + (Y X)
  93+ 0000 ~                                        ld      hl,(prefix1?_XX1510)
  94+ 0000 ~                                        ClearCarryFlag
  95+ 0000 ~                                        adc     hl,bc
  96+ 0000 ~                                        ld      (prefix1?_XX1510),hl
  97+ 0000 ~                                        ret
  98+ 0000 ~
  99+ 0000 ~            prefix1?_SUBBCFromY1:       ld      hl,(prefix1?_XX1532)             ; Set (S R) = (y1_hi y1_lo) - BC where BC can be say screen height
 100+ 0000 ~                                        ClearCarryFlag
 101+ 0000 ~                                        sbc     hl,bc
 102+ 0000 ~                                        ld      (SRvarPair),hl
 103+ 0000 ~                                        ret
 104+ 0000 ~
 105+ 0000 ~            prefix1?_AddSRToYX:         ld      hl,(YXregPair)
 106+ 0000 ~                                        ld      de,(SRvarPair)
 107+ 0000 ~                                        ClearCarryFlag
 108+ 0000 ~                                        adc     hl,de
 109+ 0000 ~                                        ld      (YXregPair),hl
 110+ 0000 ~                                        ret
 111+ 0000 ~
 112+ 0000 ~            prefix1?_ClampX:            ld      a,h
 113+ 0000 ~                                        and     a
 114+ 0000 ~                                        ld      a,l
 115+ 0000 ~                                        ret     z
 116+ 0000 ~                                        jp      p,.Max255
 117+ 0000 ~            .ClampXMin0:                ZeroA
 118+ 0000 ~                                        ret
 119+ 0000 ~            .Max255:                    ld      a,$FF
 120+ 0000 ~                                        ret
 121+ 0000 ~
 122+ 0000 ~            prefix1?_ClampY:            ld      a,h
 123+ 0000 ~                                        and     a
 124+ 0000 ~                                        jp      z,.ClampYlo
 125+ 0000 ~                                        jp      p,.Max127
 126+ 0000 ~            .ClampYMin0:                ZeroA
 127+ 0000 ~                                        ret
 128+ 0000 ~            .Max127:                    ld      a,127
 129+ 0000 ~                                        ret
 130+ 0000 ~            .ClampYlo:                  ld      a,l
 131+ 0000 ~                                        and     a
 132+ 0000 ~                                        ret     p
 133+ 0000 ~                                        ld      a,127
 134+ 0000 ~                                        ret
 135+ 0000                                          ENDM
 136+ 0000              ;-- Rountes to code:
 137+ 0000              ;-- LL118
 138+ 0000              ;-- LL120   Done
 139+ 0000              ;-- LL129   Done
 140+ 0000              ;-- LL123   Done
 141+ 0000                             ; NOTE DOES ABS ONLY
 142+ 0000
 143+ 0000
 144+ 0000                              ;--- LL118 Move along a point until on screen
 145+ 0000              ; In XX1510 x1 as a 16-bit coordinate (x1_hi x1_lo)
 146+ 0000              ;    XX1532 y1 as a 16-bit coordinate (y1_hi y1_lo)
 147+ 0000              ;    XX12p2 The line's gradient * 256 (so 1.0 = 256)
 148+ 0000              ;    XX12p3 The direction of slope: * Positive = top left to bottom right * Negative (bit 7 set) = top right to bottom left
 149+ 0000              ;    T      The gradient of slope:* 0 if it's a shallow slope * &FF if it's a steep slope
 150+ 0000              ;  Out  XX150               x1 as an 8-bit coordinate
 151+ 0000              ;       XX152               y1 as an 8-bit coordinate
 152+ 0000              ;----------------------------------------------------------------------------------------------------------------
 153+ 0000
 154+ 0000
 155+ 0000              ;---------------------------------------------------------------------------------------------------------------------
 156+ 0000              ;--  Calculate the following:
 157+ 0000              ;--   * If T = 0, this is a shallow slope, so calculate (Y X) = (S x1_lo) * XX12+2
 158+ 0000              ;--   * If T <> 0, this is a steep slope, so calculate (Y X) = (S x1_lo) / XX12+2
 159+ 0000              ;-- giving (Y X) the opposite sign to the slope direction in XX12+3.
 160+ 0000              ;---------------------------------------------------------------------------------------------------------------------
 161+ 0000              ClippingCodeLL120Macro:     MACRO   prefix1?
 162+ 0000 ~            prefix1?_LL120_6502:        ld      a,(prefix1?_XX1510)              ;LDA XX15               \ Set R = x1_lo
 163+ 0000 ~                                        ld      (Rvar),a                ;STA R
 164+ 0000 ~                                        call    prefix1?_LL129_6502              ;JSR LL129              \ Call LL129 to do the following:  Q = XX12+2 = line gradient, A = S EOR XX12+3 = S EOR slope direction  (S R) = |S R|
 165+ 0000 ~                                        push    af                      ;PHA                    \ Store A on the stack so we can use it later
 166+ 0000 ~            ; DONT NEED PLUS MESSES UP FLAGS                    push    af                      ;LDX T                  \ If T is non-zero, then it's a steep slope, so jump
 167+ 0000 ~                                        ld      a,(Tvar)                ; .
 168+ 0000 ~                                        ld      (Xreg),a                ;. REDUNDANT REMOVE IN OPTIMISATION
 169+ 0000 ~                                        and     a                       ;BNE LL121              \ down to LL121 to calculate this instead (Y X) = (S R) / Q
 170+ 0000 ~            ; DONT NEED PLUS MESSES UP FLAGS                    pop     af                      ;.                      (recover teh saved A before the cp)
 171+ 0000 ~                                        jr      nz,prefix1?_LL121_6502           ;.
 172+ 0000 ~            ;..   (Y X) = (S R) * Q - must be ABS, sign determined by opposite of the sign of the value on top of stack
 173+ 0000 ~            prefix1?_LL122_6502:         ZeroA                           ;LDA #0                 \ Set A = 0
 174+ 0000 ~
 175+ 0000 ~                                        IFDEF DEBUG_LL122_DIRECT"
 176+ 0000 ~                                              DISPLAY "DIRECT CALL TO LL122 so dummy push a to stack with 0"
 177+ 0000 ~                                              push    af
 178+ 0000 ~                                        ENDIF
 179+ 0000 ~                                        ld      (Xreg),a                ;TAX                    \ Set (Y X) = 0 so we can start building the answer here
 180+ 0000 ~                                        ld      (Yreg),a                ;TAY
 181+ 0000 ~                                        ld      hl,Svar
 182+ 0000 ~                                        ld      bc,(SRvarPair)          ;LSR S                  \ Shift (S R) to the right, so we extract bit 0 of (S R)
 183+ 0000 ~                                        ShiftBCRight1                   ;ROR R                  \ into the C flag
 184+ 0000 ~                                        ld      (SRvarPair),bc
 185+ 0000 ~                                        ld      hl, Qvar                ;ASL Q                  \ Shift Q to the left, catching bit 7 in the C flag
 186+ 0000 ~                                        sla     (hl)                    ;.
 187+ 0000 ~                                        jr      nc, prefix1?_LL126_6502          ;BCC LL126              \ If C (i.e. the next bit from Q) is clear, do not do
 188+ 0000 ~            ; the addition for this bit of Q, and instead skip to LL126 to just do the shifts
 189+ 0000 ~            prefix1?_LL125_6502:        call    AddSRToYX               ;TXA                    \ Set (Y X) = (Y X) + (S R)  starting with the low bytes And then doing the high bytes
 190+ 0000 ~            prefix1?_LL126_6502:        ld      bc,(SRvarPair)          ;LSR S                  \ Shift (S R) to the right
 191+ 0000 ~                                        ShiftBCRight1                   ;ROR R
 192+ 0000 ~                                        ld      (SRvarPair),bc          ;.
 193+ 0000 ~                                        ld      hl, Qvar                ;ASL Q                  \ Shift Q to the left, catching bit 7 in the C flag
 194+ 0000 ~                                        sla     (hl)                    ;.
 195+ 0000 ~                                        jr      c,prefix1?_LL125_6502            ;BCS LL125              \ If C (i.e. the next bit from Q) is set, loop back to LL125 to do the addition for this bit of Q
 196+ 0000 ~                                        jr      nz,prefix1?_LL126_6502           ;BNE LL126              \ If Q has not yet run out of set bits, loop back to LL126 to do the \"shift\" part of shift-and-add until we have done additions for all the set bits in Q, to give us our multiplication result
 197+ 0000 ~                                        pop     af                      ;PLA                    \ Restore A, which we calculated above, from the stack
 198+ 0000 ~                                        and     a                       ;BPL LL133              \ If A is positive jump to LL133 to negate (Y X) and
 199+ 0000 ~                                        jp      p,prefix1?_LL133_6502            ;.
 200+ 0000 ~                                        ;.. return from the subroutine using a tail call
 201+ 0000 ~                                        ret                             ;RTS                    \ Return from the subroutine
 202+ 0000                                  ENDM
 203+ 0000              ;----------------------------------------------------------------------------------------------------------------------------
 204+ 0000              ;-- Calculate the following:
 205+ 0000              ;--         * If T = 0, this is a shallow slope, so calculate (Y X) = (S R) / XX12+2 (does not use X1lo but directly SR)
 206+ 0000              ;--         * If T <> 0, this is a steep slope, so calculate (Y X) = (S R) * XX12+2  (does not use X1lo but directly SR)
 207+ 0000              ;--             giving (Y X) the opposite sign to the slope direction in XX12+3.
 208+ 0000              ClippingCodeLL122Macro:      MACRO   prefix1?
 209+ 0000 ~            prefix1?_LL123_6502:         call    prefix1?_LL129_6502              ;JSR LL129              \ Call LL129 to do the following   Q = XX12+2   = line gradient
 210+ 0000 ~                                         push    af                      ;PHA                    \ Store A on the stack so we can use it later
 211+ 0000 ~            ; DONT NEED PLUS MESSES UP FLAGS                    push    af                      ;LDX T                  \ If T is non-zero, then it's a steep slope, so jump up
 212+ 0000 ~                                         ld      a,(Tvar)                ; .
 213+ 0000 ~                                         ld      (Xreg),a                ;BNE LL122              \ to LL122 to calculate this instead:
 214+ 0000 ~                                         and     a                       ;.
 215+ 0000 ~            ;  DONT NEED PLUS MESSES UP FLAGS                    pop     af                      ;.
 216+ 0000 ~                                         jr      nz,prefix1?_LL122_6502           ;.
 217+ 0000 ~            ;--  The following calculates: (Y X) = (S R) / Q using the same shift-and-subtract algorithm that's documented in TIS2
 218+ 0000 ~            prefix1?_LL121_6502:         ld      a,$FF                   ;LDA #%11111111         \ Set Y = %11111111
 219+ 0000 ~                                         ld      (Yreg),a                ;TAY
 220+ 0000 ~                                         sla     a                       ;ASL A                  \ Set X = %11111110
 221+ 0000 ~                                         ld      (Xreg),a                ;TAX
 222+ 0000 ~            ;--  This sets (Y X) = %1111111111111110, so we can rotate through 15 loop iterations, getting a 1 each time, and then getting a 0 on the 16th iteration... and we can also use it to catch our result bits into bit 0 each time
 223+ 0000 ~            prefix1?_LL130_6502:         ld      bc,(SRvarPair)          ;ASL R                  \ Shift (S R) to the left
 224+ 0000 ~                                        ShiftBCLeft1                    ;.
 225+ 0000 ~                                        ld      (SRvarPair),bc          ;ROL S
 226+ 0000 ~                                        ld      a,(Svar)                ;LDA S                  \ Set A = S
 227+ 0000 ~                                        jr      c, prefix1?_LL131_6502           ;BCS LL131              \ If bit 7 of S was set, then jump straight to the subtraction
 228+ 0000 ~                                        ld      hl,Qvar                 ;CMP Q                  \ If A < Q (i.e. S < Q), skip the following subtractions
 229+ 0000 ~                                        cp      (hl)
 230+ 0000 ~                                        FlipCarryFlag                   ; note flip carry flag here to simulate 6502 operation
 231+ 0000 ~                                        jr      nc,prefix1?_LL132A_6502          ;BCC LL132  (NOTE Carry flag reversed in Z80 for CP)
 232+ 0000 ~            prefix1?_LL131_6502:         FlipCarryFlag                   ;flip carry to make it act like a 6502 borrow
 233+ 0000 ~                                        sbc     (hl)                    ;SBC Q                  \ A >= Q (i.e. S >= Q) so set:
 234+ 0000 ~                                        ld      (Svar),a                ;STA S
 235+ 0000 ~                                        ld      a,(Rvar)                ;LDA R                  \ And then doing the high bytes
 236+ 0000 ~                                        ClearCarryFlag                  ;\   S = (A R) - Q  = (S R) - Q starting with the low bytes (we know the C flag is set so the subtraction will be correct)
 237+ 0000 ~                                        sbc     0                       ;SBC #0
 238+ 0000 ~                                        ld      (Rvar),a                ;STA R
 239+ 0000 ~                                        SetCarryFlag                    ;SEC                    \ Set the C flag to rotate into the result in (Y X)
 240+ 0000 ~                                        jp      prefix1?_LL132_6502              ;added so that we can do a 6502 style carry above
 241+ 0000 ~            prefix1?_LL132A_6502:        nop; FlipCarryFlag
 242+ 0000 ~            prefix1?_LL132_6502:         ld      bc,(YXregPair)          ; Rotate the counter in (Y X) to the left, and catch the
 243+ 0000 ~                                        RollBCLeft1                     ; ROL A                  \ result bit into bit 0 (which will be a 0 if we didn't
 244+ 0000 ~                                        ld      (YXregPair),bc          ; TAX                    \ do the subtraction, or 1 if we did)
 245+ 0000 ~                                        jr      c, prefix1?_LL130_6502           ; BCS LL130              \ If we still have set bits in (Y X), loop back to LL130 to do the next iteration of 15, until we have done the whole division
 246+ 0000 ~                    IFDEF DEBUG_LL121_DIRECT
 247+ 0000 ~                          DISPLAY "DIRECT CALL TO LL121 so dummy push"
 248+ 0000 ~                                        push    af
 249+ 0000 ~                    ENDIF
 250+ 0000 ~                                        pop     af                      ; PLA                    \ Restore A, which we calculated above, from the stack
 251+ 0000 ~                                        and     a                       ; BMI LL128              \ If A is negative jump to LL128 to return from the
 252+ 0000 ~                                        jp      m, prefix1?_LL128_6502           ; .                      \ subroutine with (Y X) as is
 253+ 0000 ~            prefix1?_LL133_6502:          ld      bc,(YXregPair)          ; TXA                    \ Otherwise negate (Y X) using two's complement by first
 254+ 0000 ~                                        macronegate16bc                 ; EOR #%11111111         \ setting the low byte to ~X + 1
 255+ 0000 ~                                        ld      (YXregPair),bc          ; ADC #1                 \ The addition works as we know the C flag is clear from\ when we passed through the BCS above
 256+ 0000 ~            prefix1?_LL128_6502:          ret                             ; RTS                    \ Return from the subroutine
 257+ 0000 ~            ;-------------------------------------------------------------------------------------------------------
 258+ 0000 ~            ;..  Do the following, in this order: Q = XX12+2 A = S EOR XX12+3 (S R) = |S R|
 259+ 0000 ~            ;..  This sets up the variables required above to calculate (S R) / XX12+2 and give the result the opposite sign to XX13+3.
 260+ 0000 ~            prefix1?_LL129_6502:        push    af                      ;LDX XX12+2             \ Set Q = XX12+2
 261+ 0000 ~                                        ld      a,(prefix1?_XX12p2)              ;.
 262+ 0000 ~                                        ld      (Xreg),a                ;.
 263+ 0000 ~                                        ld      (Qvar),a                ;STX Q
 264+ 0000 ~                                        pop     af                      ;.
 265+ 0000 ~                                        ld      a,(Svar)                ;LDA S                  \ If S is positive, jump to LL127
 266+ 0000 ~                                        and     a                       ;BPL LL127
 267+ 0000 ~                                        jp      p,prefix1?_LL127_6502            ;.
 268+ 0000 ~                                        ZeroA                           ;.LDA #0                \ Otherwise set R = -R
 269+ 0000 ~                                        ClearCarryFlag                  ;SEC
 270+ 0000 ~                                        ld      hl, Rvar                ;SBC R
 271+ 0000 ~                                        sbc     (hl)                    ;.
 272+ 0000 ~                                        ld      (Rvar),a                ;STA R
 273+ 0000 ~                                        ld      a,(Svar)                ;LDA S                  \ Push S onto the stack
 274+ 0000 ~                                        push    af                      ;PHA
 275+ 0000 ~                                        xor     $FF                     ;EOR #%11111111         \ Set S = ~S + 1 + C  ?? is this all just doing |Svar|?
 276+ 0000 ~                                        adc     0                       ;ADC #0
 277+ 0000 ~                                        ld      (Svar),a                ;STA S
 278+ 0000 ~                                        pop     af                      ;PLA                    \ Pull the original, negative S from the stack into A
 279+ 0000 ~            prefix1?_LL127_6502:        ld      hl,prefix1?_XX12p3               ;EOR XX12+3             \ Set A = original argument S EOR'd with XX12+3
 280+ 0000 ~                                        xor     (hl)                    ;.
 281+ 0000 ~                                        ret                             ;RTS                    \ Return from the subroutine
 282+ 0000 ~            ;----------------------------------------------------------------------------------------------------------------
 283+ 0000 ~            ;--- LL118 Move along a point until on screen
 284+ 0000 ~            ; In XX1510 x1 as a 16-bit coordinate (x1_hi x1_lo)
 285+ 0000 ~            ;    XX1532 y1 as a 16-bit coordinate (y1_hi y1_lo)
 286+ 0000 ~            ;    XX12p2 The line's gradient * 256 (so 1.0 = 256)
 287+ 0000 ~            ;    XX12p3 The direction of slope: * Positive = top left to bottom right * Negative (bit 7 set) = top right to bottom left
 288+ 0000 ~            ;    T      The gradient of slope:* 0 if it's a shallow slope * &FF if it's a steep slope
 289+ 0000 ~            ;  Out  XX150               x1 as an 8-bit coordinate
 290+ 0000 ~            ;       XX152               y1 as an 8-bit coordinate
 291+ 0000 ~            ;----------------------------------------------------------------------------------------------------------------
 292+ 0000 ~
 293+ 0000 ~            prefix1?_LL118_6502:         ld      a,(prefix1?_XX1510+1)            ; LDA XX15+1             \ If x1_hi is positive, jump down to LL119 to skip the
 294+ 0000 ~                                        and     a                       ; BPL LL119              \ .
 295+ 0000 ~                                        jp      p, prefix1?_LL119_6502           ;                        \ following
 296+ 0000 ~            .X1Negative:                ld      (Svar),a                ; STA S                  \ Otherwise x1_hi is negative, i.e. off the left of the screen, so set S = x1_hi
 297+ 0000 ~                                        call    prefix1?_LL120_6502              ; Call LL120 to calculate:  (Y X) = (S x1_lo) * XX12+2      if T = 0   = x1 * gradient
 298+ 0000 ~                                                                ;                            (Y X) = (S x1_lo) / XX12+2      if T <> 0  = x1 / gradient
 299+ 0000 ~                                                                ; with the sign of (Y X) set to the opposite of the line's direction of slope
 300+ 0000 ~                                        call    ADDYXRegtoY1             ; Set y1 = y1 + (Y X)
 301+ 0000 ~                                        ld      (prefix1?_XX1532),hl             ; .
 302+ 0000 ~                                        ld      hl,0                    ; Set x1 = 0
 303+ 0000 ~                                        ld      (prefix1?_XX1510),hl             ; .
 304+ 0000 ~                                        ld      a,0                     ; set 0 up for replacemetn of the TAX and BEQ bit
 305+ 0000 ~                                        ld      (Xreg),a                ; TAX                    \ Set X = 0 so the next BEQ becomes a jmp but we will do it anyway in next line
 306+ 0000 ~                                        jp      prefix1?_LL134_6502              ; just do the jump to LL134 rather than setting to equal flag and then jumping
 307+ 0000 ~            ;-- Entering LL119 a will always be the value of X1 Hi byte
 308+ 0000 ~            prefix1?_LL119_6502:         jp      z,prefix1?_LL134_6502            ; BEQ LL134              \ x1_hi = 0 then jump down to LL134 to skip the following, as the x-coordinate is already on-screen
 309+ 0000 ~                                                                        ;                        \ (as 0 <= (x_hi x_lo) <= 255)
 310+ 0000 ~                                        ld      (Svar),a                ; STA S                  \ Otherwise x1_hi is positive, i.e. x1 >= 256 and off
 311+ 0000 ~                                        dec     a                       ; DEC S                  \ the right side of the screen, so set S = x1_hi - 1
 312+ 0000 ~                                        ld      (Svar),a                ;
 313+ 0000 ~                                        call    prefix1?_LL120_6502              ; JSR LL120              \ Call LL120 to calculate:  (Y X) = (S x1_lo) * XX12+2      if T = 0   = (x1 - 256) * gradient
 314+ 0000 ~                                                                        ;                        \                           (Y X) = (S x1_lo) / XX12+2      if T <> 0 = (x1 - 256) / gradient
 315+ 0000 ~                                                                        ;                        \ with the sign of (Y X) set to the opposite of the line's direction of slope
 316+ 0000 ~                                        call    ADDYXRegtoY1             ; TXA                    \ Set y1 = y1 + (Y X)
 317+ 0000 ~                                        ld      hl,255                  ; LDX #255               \ Set x1 = 255
 318+ 0000 ~                                        ld      ( prefix1?_XX1510 ),hl             ; STX XX15 ;INX; STX XX15+1
 319+ 0000 ~            ;--  We have moved the point so the x-coordinate is on  screen (i.e. in the range 0-255), so now for the  y-coordinate
 320+ 0000 ~            prefix1?_LL134_6502:        ld      a,(prefix1?_XX1532+1)            ; LDA XX15+3             \ If y1_hi is positive, jump down to LL119 to skip
 321+ 0000 ~                                        and     a                       ; BPL LL135              \ the following
 322+ 0000 ~                                        jp      p, prefix1?_LL135_6502           ; .
 323+ 0000 ~                                        ld      (Svar),a                ; STA S                  \ Otherwise y1_hi is negative, i.e. off the top of the screen, so set S = y1_hi
 324+ 0000 ~                                        ld      a, ( prefix1?_XX1532)             ; LDA XX15+2             \ Set R = y1_lo
 325+ 0000 ~                                        ld      (Rvar),a                ; STA R
 326+ 0000 ~                                        call    prefix1?_LL123_6502              ; JSR LL123              \ Call LL123 to calculate:  (Y X) = (S R) / XX12+2      if T = 0 = y1 / gradient
 327+ 0000 ~                                                                        ;                        \                           (Y X) = (S R) * XX12+2      if T <> 0 = y1 * gradient
 328+ 0000 ~                                                                        ;                         with the sign of (Y X) set to the opposite of the line's direction of slope
 329+ 0000 ~                                        call    ADDYXRegtoX1            ; TXA                    \ Set x1 = x1 + (Y X)
 330+ 0000 ~                                        ld      hl,0                    ; LDA #0                 \ Set y1 = 0
 331+ 0000 ~                                        ld      ( prefix1?_XX1532),hl             ; STA XX15+2, XX15+3
 332+ 0000 ~            prefix1?_LL135_6502:         ld      bc,128                  ; LDA XX15+2             \ Set (S R) = (y1_hi y1_lo) - screen height
 333+ 0000 ~                                        call    SUBBCFromY1             ; .                      \ .
 334+ 0000 ~                                        jr      c, prefix1?_LL136_6502           ; BCC LL136              \ If the subtraction underflowed, i.e. if y1 < screen height, then y1 is already on-screen, so jump to LL136
 335+ 0000 ~                                                                ;                        \ to return from the subroutine, as we are done
 336+ 0000 ~            ;;-   If we get here then y1 >= screen height, i.e. off the bottom of the screen
 337+ 0000 ~            prefix1?_LL139_6502:         call    prefix1?_LL123_6502              ; JSR LL123              \ Call LL123 to calculate:   (Y X) = (S R) / XX12+2      if T = 0  = (y1 - screen height) / gradient
 338+ 0000 ~            ;                        \                            (Y X) = (S R) * XX12+2      if T <> 0 = (y1 - screen height) * gradient
 339+ 0000 ~            ;                          with the sign of (Y X) set to the opposite of the line's direction of slope
 340+ 0000 ~                                        call    ADDYXRegtoX1            ; TXA                    \ Set x1 = x1 + (Y X)
 341+ 0000 ~                                        ld      hl, 127                 ; LDA #Y*2-1             \ Set y1 = 2 * #Y - 1. The constant #Y is 96, the y-coordinate of the mid-point of the space view (or in our case 127)
 342+ 0000 ~                                        ld      (prefix1?_XX1532),hl             ; STA XX15+3             \ pixel row of the space view
 343+ 0000 ~            prefix1?_LL136_6502:         ret                             ; RTS                    \ Return from the subroutine
 344+ 0000 ~            ;-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 345+ 0000 ~            ;-- LL145 LINE CLIP
 346+ 0000 ~            ;-- OPTISIATIONS - VERTICAL HORZONTAL POINT |DX| = |DY| (and all the veriants for +/-)
 347+ 0000 ~            ;-- This routine clips the line from (x1, y1) to (x2, y2) so it fits on-screen, or returns an error if it can't be clipped to fit. The arguments are 16-bit coordinates, and the clipped line is returned using 8-bit screen coordinates.
 348+ 0000 ~            ;-- This part sets XX13 to reflect which of the two points are on-screen and off-screen.
 349+ 0000 ~            ;-- IN  : XX15(1 0) x1 XX15(3 2) y1 XX15(5 4) x2 XX12(1 0) y2
 350+ 0000 ~            ;-- OUT : (X1, Y1), (X2, Y2) Screen coordinate C flag  Clear if the clipped line fits on-screen, set if itdoesn't
 351+ 0000 ~            ;         XX13 The state of the original coordinates on-screen:* 0   = (x2, y2) on-screen* 95(64)  = (x1, y1) on-screen,  (x2, y2) off-screen* 191(128) = (x1, y1) off-screen, (x2, y2) off-screen
 352+ 0000 ~            ;              So XX13 is non-zero if the end of the line was clipped,meaning the next line sent to BLINE can't join onto the end but has to start a new segment
 353+ 0000 ~            ;         SWAP The swap status of the returned coordinates:* &FF if we swapped the values of (x1, y1) and(x2, y2) as part of the clipping process* 0 if the coordinates are still in the same order
 354+ 0000 ~            ; TODO treat horizonal/vert and single pixel as special cases
 355+ 0000                                  ENDM
 356+ 0000
 357+ 0000              ClippingCodeLL145Macro:     MACRO   prefix1?
 358+ 0000 ~            prefix1?_LL145_6502:        ZeroA                           ; LDA #0                 \ Set SWAP = 0
 359+ 0000 ~                                        ld      (SWAP),a                ; STA SWAP
 360+ 0000 ~                                        ld      a,(prefix1?_XX15X2hi)            ; LDA XX15+5             \ Set A = x2_hi (use b as a substibute for a)
 361+ 0000 ~                                        ld      b,a                     ; .
 362+ 0000 ~            ; Note that as we are interested in the sign of XX113 then this needs to be >= 128 or < 128 or 0, we will use 191 as per bbc for now
 363+ 0000 ~            ; for the screen coord we will use 127 though, we use c as a temporay X register
 364+ 0000 ~            prefix1?_LL147_6502:        ld      a,191                   ; LDX #Y*2-1             \ Set X = #Y * 2 - 1. The constant #Y is 96, the y-coordinate of the mid-point of the space view, so this sets Y2 to 191, the y-coordinate of the bottom pixel row of the space view
 365+ 0000 ~                                        ld      (Xreg),a                ; .
 366+ 0000 ~            ;                    ld      a,127
 367+ 0000 ~            ;                    ld      c,a
 368+ 0000 ~            .CheckX2Y2High:             ld      a,b                     ; ORA XX12+1             \ If one or both of x2_hi and y2_hi are non-zero, jump
 369+ 0000 ~                                        ld      hl,prefix1?_XX15Y2hi    ; .
 370+ 0000 ~                                        or      (hl)                    ; .
 371+ 0000 ~                                        jp      nz,prefix1?_LL107_6502  ; BNE LL107              \ to LL107 to skip the following, leaving X at 191
 372+ 0000 ~            .CheckY2Lo:                 ld      a,127 ;,c               ; get back the temporary x reg from c
 373+ 0000 ~                                        ld      hl,prefix1?_XX15Y2lo    ; CPX XX12               \ If y2_lo > the y-coordinate of the bottom of screen (a is being used as X at this point still)
 374+ 0000 ~                                        cp      (hl)                    ; .
 375+ 0000 ~                                        jp      c,prefix1?_LL107_6502   ; BCC LL107              \ then (x2, y2) is off the bottom of the screen, so skip the following instruction, leaving X at 127
 376+ 0000 ~                                        ZeroA                           ; LDX #0                 \ Set X = 0
 377+ 0000 ~                                        ld      (Xreg),a
 378+ 0000 ~            prefix1?_LL107_6502:        ld      a,(Xreg)                ; STX XX13               \ Set XX13 = X, so we have * XX13 = 0 if x2_hi = y2_hi = 0, y2_lo is on-screen* XX13 = 191 if x2_hi or y2_hi are non-zero or y2_lois off the bottom of the screen
 379+ 0000 ~                                        ld      ( prefix1?_XX13),a      ; now c is released as a temporary x reg
 380+ 0000 ~                                        ld      a,(prefix1?_XX15X1hi)   ; LDA XX15+1             \ If one or both of x1_hi and y1_hi are non-zero, jump
 381+ 0000 ~                                        ld      hl,prefix1?_XX15Y1hi    ; ORA XX15+3             \ to LL83
 382+ 0000 ~                                        or      (hl)                    ; .
 383+ 0000 ~                                        jp      nz,prefix1?_LL83_6502            ; BNE LL83
 384+ 0000 ~            ; DEBUG SIMPLIFIED CODE, now we just compare y1 lo > 127
 385+ 0000 ~                                        ld      a,(XX1532)              ; If y1_lo > the y-coordinate of the bottom of screen (If A >= N, then C flag is reset.) ;ld      a,127                   ; LDA #Y*2-1             \ If y1_lo > the y-coordinate of the bottom of screen (If A >= N, then C flag is reset.)
 386+ 0000 ~                                        ld      h,127                   ; then (x1, y1) is off the bottom of the screen, so jump                                 ;ld      hl,XX1532               ; CMP XX15+2             \ then (x1, y1) is off the bottom of the screen, so jump
 387+ 0000 ~                                        cp      h                       ; to LL83                                                                                ;cp      (hl)                    ; .                      \ to LL83
 388+ 0000 ~                                        jp      nc, prefix1?_LL83_6502         ; BCC LL83               \ . (y1 > 127 jump, i.e. 127 <= y1 )
 389+ 0000 ~                                        ld      a,( prefix1?_XX13)                ; LDA XX13               \ If we get here, (x1, y1) is on-screen. If XX13 is non-zero, i.e. (x2, y2) is off-screen, jump
 390+ 0000 ~                                        and     a                       ; BNE LL108              \ to LL108 to halve it before continuing at LL83
 391+ 0000 ~                                        jp      nz,prefix1?_LL108_6502
 392+ 0000 ~            ; If we get here, the high bytes are all zero, which means the x-coordinates are < 256 and therefore fit on screen, and neither coordinate is off the bottom of the screen. That means both coordinates are already on
 393+ 0000 ~            ; screen, so we don't need to do any clipping, all weneed to do is move the low bytes into (X1, Y1) and X2, Y2) and return
 394+ 0000 ~            ; X1 = XX15 (10)  Y1 = XX15+1 X2 = XX15+2 Y2 = XX15+3
 395+ 0000 ~            prefix1?_LL146_6502:        ld      hl,(prefix1?_XX15X1lo)           ;  Save X1 to XX1510
 396+ 0000 ~                                        call    prefix1?_ClampX
 397+ 0000 ~                                        ld      (prefix1?_XX15X1lo),a
 398+ 0000 ~                                        ld      hl,(prefix1?_XX15Y1lo)           ;  hl = y1
 399+ 0000 ~                                        call    prefix1?_ClampY
 400+ 0000 ~                                        ld      (prefix1?_XX1510+1),a            ;  XX1510... = [X1][Y1]
 401+ 0000 ~
 402+ 0000 ~                                        ld      hl,(prefix1?_XX15X2lo)           ;  de = x2
 403+ 0000 ~                                        call    prefix1?_ClampX
 404+ 0000 ~                                        ld      (prefix1?_XX1510+2),a            ;  XX1510... = [X1][Y1][X2]
 405+ 0000 ~
 406+ 0000 ~                                        ld      hl,(prefix1?_XX15Y2lo)           ;  bc = y2
 407+ 0000 ~                                        call    prefix1?_ClampY
 408+ 0000 ~                                        ld      (prefix1?_XX1510+3),a            ;  XX1510... = [X1][Y1][X2][Y2]
 409+ 0000 ~                                        ClearCarryFlag                  ; CLC                    \ Clear the C flag as the clipped line fits on-screen
 410+ 0000 ~                                        ret                             ; RTS                    \ Return from the subroutine
 411+ 0000 ~            prefix1?_LL109_6502:        SetCarryFlag                    ; SEC                    \ Set the C flag to indicate the clipped line does not fit on-screen
 412+ 0000 ~                                        ret                             ; RTS                    \ Return from the subroutine
 413+ 0000 ~            prefix1?_LL108_6502:        ld      hl, prefix1?_XX13                 ; LSR XX13               \ If we get here then (x2, y2) is off-screen and XX13 is
 414+ 0000 ~                                        srl     (hl)                    ;                        \ 191, (128)  so shift XX13 right to halve it to 95 (64)
 415+ 0000 ~            ;-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 416+ 0000 ~            ;-- LL145 (Part 2 of 4)
 417+ 0000 ~            prefix1?_LL83_6502:         ld      a,( prefix1?_XX13)               ; LDA XX13               \ If XX13 < 128 then only one of the points is on-screen
 418+ 0000 ~                                        and     a                                ; BPL LL115              \ so jump down to LL115 to skip the checks of whether
 419+ 0000 ~                                        jp      p,prefix1?_LL115_6502            ;                        \ both points are in the strips to the right or bottom of the screen
 420+ 0000 ~            ;-- If we get here, both points are off-screen
 421+ 0000 ~                                        ld      a,(prefix1?_XX15X1hi)            ; LDA XX15+1             \ If both x1_hi and x2_hi have bit 7 set, jump to LL109
 422+ 0000 ~                                        ld      hl,prefix1?_XX15X2hi             ; AND XX15+5             \ to return from the subroutine with the C flag set, as
 423+ 0000 ~                                        and     (hl)
 424+ 0000 ~                                        jp      m, prefix1?_LL109_6502           ; BMI LL109              \ the entire line is above the top of the screen
 425+ 0000 ~                                        ld      a,(prefix1?_XX15Y1hi)            ; LDA XX15+3             \ If both y1_hi and y2_hi have bit 7 set, jump to LL109
 426+ 0000 ~                                        ld      hl,prefix1?_XX15Y2hi             ; AND XX12+1             \ to return from the subroutine with the C flag set, as
 427+ 0000 ~                                        and     (hl)                             ; BMI LL109              \ the entire line is to the left of the screen
 428+ 0000 ~                                        jp      m,prefix1?_LL109_6502            ; .
 429+ 0000 ~                                        ld      a,(prefix1?_XX15X1hi)            ; LDX XX15+1             \ Set A = X = x1_hi - 1
 430+ 0000 ~                                        dec     a                                ; DEX
 431+ 0000 ~                                        ld      (Xreg),a                         ; TXA
 432+ 0000 ~                                        push    af                               ; LDX XX15+5     SP+1    \ Set XX12+2 = x2_hi - 1, we need to save a register first
 433+ 0000 ~                                        ld      a,(prefix1?_XX15X2hi)            ; .
 434+ 0000 ~                                        dec     a                                ; DEX
 435+ 0000 ~                                        ld      (Xreg),a                         ; STX XX12+2
 436+ 0000 ~                                        pop     af                               ; .              SP+0    restore a register
 437+ 0000 ~                                        ld      hl,prefix1?_XX15Y2hi             ; ORA XX12+2             \ If neither (x1_hi - 1) or (x2_hi - 1) have bit 7 set,
 438+ 0000 ~                                        or      (hl)                             ; .
 439+ 0000 ~                                        jp      p, prefix1?_LL109_6502           ; BPL LL109              \ jump to LL109 to return from the subroutine with the C flag set, as the line doesn't fit on-screen
 440+ 0000 ~            ; for this bit, while z80 uses carry the opposite way to 6502, 6502 uses borrow, in effect inverting the flip
 441+ 0000 ~            ;NOTEFOUND A PATH WHERE IT DOES NOT DO THIS CHECK e.g. 90 B2 8D A2
 442+ 0000 ~            prefix1?_LL83_DEBUG:          ld      a,(prefix1?_XX1532)              ; LDA XX15+2             \ If y1_lo < y-coordinate of screen bottom, clear the C
 443+ 0000 ~                                        cp      128                     ; CMP #Y*2               \ flag, otherwise set it (NOTE FLIPPED IN z80)
 444+ 0000 ~                                        ld      a,(prefix1?_XX1532+1)            ; LDA XX15+3             \ Set XX12+2 = y1_hi - (1 - C), so:
 445+ 0000 ~                                        sbc     0                       ; SBC #0                 \ .
 446+ 0000 ~                                        ld      (prefix1?_XX12p2),a              ; STA XX12+2             \  * Set XX12+2 = y1_hi - 1 if y1_lo is on-screen * Set XX12+2 = y1_hi  otherwise We do this subtraction because we are only interested
 447+ 0000 ~                                        ld      a,(prefix1?_XX1576)              ; LDA XX12               \ If y2_lo < y-coordinate of screen bottom, clear the C
 448+ 0000 ~                                        cp      128                     ; CMP #Y*2               \ flag, otherwise set it
 449+ 0000 ~                                        ld      a,(prefix1?_XX1576+1)            ; LDA XX12+1             \ Set XX12+2 = y2_hi - (1 - C), so:
 450+ 0000 ~                                        sbc     0                       ; SBC #0                   * Set XX12+1 = y2_hi - 1 if y2_lo is on-screen  * Set XX12+1 = y2_hi     otherwise
 451+ 0000 ~                                        ld      hl,prefix1?_XX12p2               ; ORA XX12+2             \ If neither XX12+1 or XX12+2 have bit 7 set, jump to
 452+ 0000 ~                                        or      (hl)                    ; .
 453+ 0000 ~                                        jp      p,prefix1?_LL109_6502            ; BPL LL109              \ LL109 to return from the subroutine with the C flag set, as the line doesn't fit on-screen
 454+ 0000 ~            ;-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 455+ 0000 ~            ;-- LL145 (Part 3 of 4) Summary: Clip line: Calculate the line's gradient
 456+ 0000 ~            prefix1?_LL115_6502:        ld      a,(Yreg)                ; TYA                    \ Store Y on the stack so we can preserve it through the call to this routine
 457+ 0000 ~                                        push    af                      ; PHA            SP+1    \ call to this subroutine
 458+ 0000 ~                                        ld      hl,(prefix1?_XX15X2lo)             ; LDA XX15+4             \ Set XX12+2 = x2_lo - x1_lo
 459+ 0000 ~                                        ld      de,(prefix1?_XX15X1lo)             ; LDA XX15+5             \ Set XX12+3 = x2_hi - x1_hi
 460+ 0000 ~                                        ClearCarryFlag                  ; SBC XX15+1
 461+ 0000 ~                                        sbc     hl,de                   ; .
 462+ 0000 ~                                        ld      (delta_x),hl            ; .
 463+ 0000 ~                                        ld      hl,(prefix1?_XX15Y2lo)             ; LDA XX12               \ Set XX12+4 = y2_lo - y1_lo
 464+ 0000 ~                                        ld      de,(prefix1?_XX15Y1lo)             ;
 465+ 0000 ~                                        ClearCarryFlag                  ; SBC XX15+2
 466+ 0000 ~                                        sbc     hl,de                   ; .
 467+ 0000 ~                                        ld      (delta_y),hl            ; .
 468+ 0000 ~            ; So we now have:  delta_x in XX12(3 2)  delta_y in XX12(5 4) where the delta is (x1, y1) - (x2, y2))
 469+ 0000 ~                                        ld      a,(delta_y+1)           ; EOR XX12+3             \ Set S = the sign of delta_x * the sign of delta_y, so
 470+ 0000 ~                                        ld      hl,delta_x+1
 471+ 0000 ~                                        xor     (hl)
 472+ 0000 ~                                        ld      (Svar),a                ; STA S                  \ if bit 7 of S is set, the deltas have different signs (perhaps we should do bit 7 mask ?????????
 473+ 0000 ~                                        ld      hl,(delta_y)            ; LDA XX12+5             \ If delta_y_hi is positive, jump down to LL110 to skip
 474+ 0000 ~                                        ld      a,h
 475+ 0000 ~                                        and     a
 476+ 0000 ~                                        jp      p, prefix1?_LL110_6502  ; BPL LL110              \ the following
 477+ 0000 ~                                        NegHL                           ; LDA #0                 \ Otherwise flip the sign of delta_y to make it
 478+ 0000 ~                                        ld      (delta_y),hl            ; positive, starting with the low bytes
 479+ 0000 ~            prefix1?_LL110_6502:        ld      hl,(delta_x)            ; LDA XX12+3             \ If delta_x_hi is positive, jump down to LL111 to skip
 480+ 0000 ~                                        ld      a,h                     ; BPL LL111              \ the following
 481+ 0000 ~                                        and     a                       ; .
 482+ 0000 ~                                        jp      p,prefix1?_LL111_6502            ; .
 483+ 0000 ~                                        NegHL                           ; SEC                    \ Otherwise flip the sign of delta_x to make it
 484+ 0000 ~                                        ld      (delta_x),hl            ; LDA #0                 \ positive, starting with the low bytes
 485+ 0000 ~            ;--  We now keep halving |delta_x| and |delta_y| until both of them have zero in their high bytes
 486+ 0000 ~            prefix1?_LL111_6502:        ld      hl,(delta_x)
 487+ 0000 ~                                        ld      de,(delta_y)
 488+ 0000 ~                                        ld      a,h                     ; TAX                    \ If |delta_x_hi| is non-zero, skip the following
 489+ 0000 ~                                        or      d                       ; BNE LL112
 490+ 0000 ~                                        jp      z,prefix1?_LL113_6502            ; LDX XX12+5             \ If |delta_y_hi| = 0, jump down to LL113 (as both |delta_x_hi| and |delta_y_hi| are 0)
 491+ 0000 ~            prefix1?_LL112_6502:        ShiftHLRight1                   ; LSR A                  \ Halve the value of delta_x in (A XX12+2)
 492+ 0000 ~                                        ShiftDERight1                   ; LSR XX12+5             \ Halve the value of delta_y XX12(5 4)
 493+ 0000 ~                                        ld      (delta_x),hl
 494+ 0000 ~                                        ld      (delta_y),de            ; write them back so we don't end up in an infinite loop
 495+ 0000 ~                                        jp       prefix1?_LL111_6502                  ; JMP LL111              \ Loop back to LL111
 496+ 0000 ~            ;-- By now, the high bytes of both |delta_x| and |delta_y| are zero
 497+ 0000 ~            prefix1?_LL113_6502:        ZeroA                           ; STX T                  \ We know that X = 0 as that's what we tested with a BEQ  above, so this sets T = 0
 498+ 0000 ~                                        ld      (Tvar),a
 499+ 0000 ~                                        ld      a,(delta_x)             ; LDA XX12+2             \ If delta_x_lo < delta_y_lo, so our line is more
 500+ 0000 ~                                        ld      hl,delta_y              ; CMP XX12+4             \ vertical than horizontal, jump to LL114
 501+ 0000 ~                                        cp      (hl)
 502+ 0000 ~                                        jp      c, prefix1?_LL114_6502  ; BCC LL114              ; if delta y > delta x then its a steep slope so we do 256*dy/dx
 503+ 0000 ~            ;-- If we get here then our line is more horizontal than vertical, so it is a shallow slope
 504+ 0000 ~                                        ld      a,(delta_x)             ; STA Q                  \ Set Q = delta_x_lo
 505+ 0000 ~                                        ld      (Qvar),a                ; .
 506+ 0000 ~                                        ld      a,(delta_y)             ; LDA XX12+4             \ Set A = delta_y_lo
 507+ 0000 ~                                        call    prefix1?_LL28_6502      ; JSR LL28               \ Call LL28 to calculate: R = 256 * A / Q = 256 * delta_y_lo / delta_x_lo
 508+ 0000 ~                                        jp      prefix1?_LL116_6502     ; JMP LL116              \ Jump to LL116, as we now have the line's gradient in R
 509+ 0000 ~            ;-- If we get here then our line is more vertical than horizontal, so it is a steep slope
 510+ 0000 ~            prefix1?_LL114_6502:        ld      a,(delta_y)             ; LDA XX12+4             \ Set Q = delta_y_lo
 511+ 0000 ~                                        ld      (Qvar),a                ; STA Q
 512+ 0000 ~                                        ld      a,(delta_x)             ; LDA XX12+2             \ Set A = delta_x_lo
 513+ 0000 ~                                        call    prefix1?_LL28_6502               ; JSR LL28               \ Call LL28 to calculate: R = 256 * A / Q = 256 * delta_x_lo / delta_y_lo
 514+ 0000 ~                                        ld      a,$FF                   ; DEC T                  \ T was set to 0 above, so this sets T = &FF when our
 515+ 0000 ~                                        ld      (Tvar),a                ;                        \ line is steep
 516+ 0000 ~            ;----------------------------------------------------------------------------------------------------------------
 517+ 0000 ~            ;--- LL116 This part sets things up to call the routine in LL188, which does the actual clipping.
 518+ 0000 ~            ;--  If we get here, then R has been set to the gradient of the line (x1, y1) to(x2, y2), with T indicating the gradient of slope: * 0   = shallow slope (more horizontal than vertical)
 519+ 0000 ~            ;--                                                                                                                                * &FF = steep slope (more vertical than horizontal)
 520+ 0000 ~            ;-- XX13 has been set as follows: * 0   = (x1, y1) off-screen, (x2, y2) on-screen * 95(64)  = (x1, y1) on-screen,  (x2, y2) off-screen * 191(128) = (x1, y1) off-screen, (x2, y2) off-screen
 521+ 0000 ~            prefix1?_LL116_6502:        ld      a,(Rvar)                ; LDA R                  \ Store the gradient in XX12+2
 522+ 0000 ~                                        ld      (prefix1?_XX12p2),a     ; STA XX12+2
 523+ 0000 ~                                        ld      a,(Svar)                ; LDA S                  \ Store the type of slope in XX12+3, bit 7 clear means
 524+ 0000 ~                                        ld      (prefix1?_XX12p3),a              ; STA XX12+3             \ top left to bottom right, bit 7 set means top right to bottom left
 525+ 0000 ~                                        ld      a,( prefix1?_XX13)                ; LDA XX13               \ If XX13 = 0, skip the following instruction
 526+ 0000 ~                                        cp      0                       ; BEQ LL138
 527+ 0000 ~                                        jp      z,prefix1?_LL138_6502            ; .
 528+ 0000 ~                                        jp      p, prefix1?_LLX117_6502          ; If XX13 is positive, it must be 95 (64) as 128 would be negative). This means (x1, y1) is on-screen but (x2, y2) isn't, so we jump
 529+ 0000 ~            ;-- If we get here, XX13 = 0 or 191, so (x1, y1) is off-screen and needs clipping
 530+ 0000 ~            prefix1?_LL138_6502:          call    prefix1?_LL118_6502              ; JSR LL118              \ Call LL118 to move (x1, y1) along the line onto the screen, i.e. clip the line at the (x1, y1) end
 531+ 0000 ~                                        ld      a,( prefix1?_XX13)                ; LDA XX13               \ If XX13 = 0, i.e. (x2, y2) is on-screen, jump down to
 532+ 0000 ~                                        and     a
 533+ 0000 ~                                        jp      p,prefix1?_LL124_6502            ; BPL LL124              \ LL124 to return with a successfully clipped line
 534+ 0000 ~            ;-- If we get here, XX13 = 191 (128) (both coordinates areoff-screen)
 535+ 0000 ~            prefix1?_LL117_6502:          ld      a,(prefix1?_XX1510+1)            ; LDA XX15+1             \ If either of x1_hi or y1_hi are non-zero, jump to
 536+ 0000 ~                                        ld      hl,prefix1?_XX1532+1             ; ORA XX15+3             \ LL137 to return from the subroutine with the C flag
 537+ 0000 ~                                        or      (hl)
 538+ 0000 ~                                        jp      nz, prefix1?_LL137_6502          ; BNE LL137              \ set, as the line doesn't fit on-screen
 539+ 0000 ~                                        ld      a,(prefix1?_XX1532)              ; LDA XX15+2             \ If y1_lo > y-coordinate of the bottom of the screen
 540+ 0000 ~                                        cp      128                     ; CMP #Y*2               \ jump to LL137 to return from the subroutine with the
 541+ 0000 ~                                        jp      nc, prefix1?_LL137_6502          ; BCS LL137              \ C flag set, as the line doesn't fit on-screen
 542+ 0000 ~            ;-- If we get here, XX13 = 95 or 191, and in both cases (x2, y2) is off-screen, so we now need to swap the (x1, y1) and (x2, y2) coordinates around before doing the actual clipping, because we need to clip (x2, y2) but the clipping routine at LL118 only clips (x1, y1)
 543+ 0000 ~            prefix1?_LLX117_6502:         ld      hl,( prefix1?_XX1510)             ; LDX XX15               \ Swap x1_lo = x2_lo
 544+ 0000 ~                                        ld      de,( prefix1?_XX1554)
 545+ 0000 ~                                        ld      ( prefix1?_XX1510),de
 546+ 0000 ~                                        ld      ( prefix1?_XX1554),hl
 547+ 0000 ~                                        ld      hl,( prefix1?_XX1532)             ; LDX XX15+2             \ Swap y1_lo = y2_lo
 548+ 0000 ~                                        ld      de,( prefix1?_XX1576)
 549+ 0000 ~                                        ld      ( prefix1?_XX1532),de
 550+ 0000 ~                                        ld      ( prefix1?_XX1576),hl
 551+ 0000 ~                                        call    prefix1?_LL118_6502              ; JSR LL118              \ Call LL118 to move (x1, y1) along the line onto the screen, i.e. clip the line at the (x1, y1) end
 552+ 0000 ~                                        ld      hl,SWAP
 553+ 0000 ~                                        dec     (hl)                    ; DEC SWAP               \ Set SWAP = &FF to indicate that we just clipped the line at the (x2, y2) end by swapping the coordinates (the DEC does this as we set SWAP to 0 at the start of this subroutine)
 554+ 0000 ~            prefix1?_LL124_6502:          pop     af                      ; PLA            SP+0    \ Restore Y from the stack so it gets preserved through
 555+ 0000 ~                                        ld      (Yreg),a                ; TAY                    \ the call to this subroutine
 556+ 0000 ~                                        call    prefix1?_LL146_6502              ; JMP LL146              \ Jump up to LL146 to move the low bytes of (x1, y1) and (x2, y2) into (X1, Y1) and (X2, Y2), and return from the subroutine with a successfully clipped line
 557+ 0000 ~                                        ret                             ; then exit so we don't pop it twice
 558+ 0000 ~            prefix1?_LL137_6502:          pop     af                      ; PLA            SP+0    \ Restore Y from the stack so it gets preserved through
 559+ 0000 ~                                        ld      (Yreg),a                ; TAY                    \ the call to this subroutine
 560+ 0000 ~                                        SetCarryFlag                    ; SEC                    \ Set the C flag to indicate the clipped line does not fit on-screen
 561+ 0000 ~                                        ret                             ; RTS                    \ Return from the subroutine
 562+ 0000 ~
 563+ 0000 ~
 564+ 0000 ~            prefix1?_l2_draw_6502_line:   ld      hl,x1                           ; copy from currnet position to 6502 variables
 565+ 0000 ~                                        ld      de, prefix1?_XX1510
 566+ 0000 ~                                        ld      bc,4*2
 567+ 0000 ~                                        ldir
 568+ 0000 ~                                        call    prefix1?_LL145_6502                      ; perform 6502 version
 569+ 0000 ~                                        ret     c                               ; returns if carry is set as its a no draw
 570+ 0000 ~            .CopyBackResults:           ld      hl,0
 571+ 0000 ~                                        ld      (x1),hl
 572+ 0000 ~                                        ld      (y1),hl
 573+ 0000 ~                                        ld      (x2),hl
 574+ 0000 ~                                        ld      (y2),hl
 575+ 0000 ~                                        ld      a,( prefix1?_XX1510)
 576+ 0000 ~                                        ld      (x1),a
 577+ 0000 ~                                        ld      c,a
 578+ 0000 ~                                        ld      a,( prefix1?_XX1510+1)
 579+ 0000 ~                                        ld      (y1),a
 580+ 0000 ~                                        ld      b,a
 581+ 0000 ~                                        ld      a,( prefix1?_XX1510+2)
 582+ 0000 ~                                        ld      (x2),a
 583+ 0000 ~                                        ld      e,a
 584+ 0000 ~                                        ld      a,( prefix1?_XX1510+3)
 585+ 0000 ~                                        ld      (y2),a
 586+ 0000 ~                                        ld      d,a
 587+ 0000 ~                                        ld      a,$FF
 588+ 0000 ~                                        ClearCarryFlag
 589+ 0000 ~                                        ret
 590+ 0000                      ENDM
# file closed: ./Universe/UniverseMacros/asm_linedraw.asm
 158  0000                                      INCLUDE "./Universe/UniverseMacros/UniverseVarsDefineMacro.asm"
# file opened: ./Universe/UniverseMacros/UniverseVarsDefineMacro.asm
   1+ 0000              ; -- AI Core data
   2+ 0000              UnivCoreAIVarsMacro:        MACRO  prefix1?
   3+ 0000 ~            prefix1?_BnKRotXCounter             DB  0                       ; INWK +29
   4+ 0000 ~            prefix1?_BnKRotZCounter             DB  0                       ; INWK +30
   5+ 0000 ~            prefix1?_BnkCam0yLo                 DB  0                       ; INWK +33 ????
   6+ 0000 ~            prefix1?_BnkCam0yHi                 DB  0                       ; INWK +34?????
   7+ 0000 ~            prefix1?_BnKShipType                DB  0
   8+ 0000 ~
   9+ 0000 ~            ; Used to make 16 bit reads a little cleaner in source code
  10+ 0000 ~            prefix1?_BnKzPoint                  DS  3
  11+ 0000 ~            prefix1?_BnKzPointLo                equ prefix1?_BnKzPoint
  12+ 0000 ~            prefix1?_BnKzPointHi                equ prefix1?_BnKzPoint+1
  13+ 0000 ~            prefix1?_BnKzPointSign              equ prefix1?_BnKzPoint+2
  14+ 0000 ~
  15+ 0000 ~            ; Used for medridan drawing routines
  16+ 0000 ~            prefix1?_BnKCx                      DW  0
  17+ 0000 ~            prefix1?_BnKCxSign                  EQU prefix1?_BnKCx+1
  18+ 0000 ~            prefix1?_BnKCy                      DW  0
  19+ 0000 ~            prefix1?_BnKCySign                  EQU prefix1?_BnKCy+1
  20+ 0000 ~            prefix1?_BnKUx                      DW  0
  21+ 0000 ~            prefix1?_BnKUxSign                  EQU prefix1?_BnKUx+1
  22+ 0000 ~            prefix1?_BnKUy                      DW  0
  23+ 0000 ~            prefix1?_BnKUySign                  EQU prefix1?_BnKUy+1
  24+ 0000 ~            prefix1?_BnKVx                      DW  0
  25+ 0000 ~            prefix1?_BnKVxSign                  EQU prefix1?_BnKVx+1
  26+ 0000 ~            prefix1?_BnKVy                      DW  0
  27+ 0000 ~            prefix1?_BnKVySign                  EQU prefix1?_BnKVy+1
  28+ 0000 ~            prefix1?_BnKSinCNT2                 DB  0
  29+ 0000 ~            prefix1?_BnKSinCNT2Sign             DB  0
  30+ 0000 ~            prefix1?_BnKCosCNT2                 DB  0
  31+ 0000 ~            prefix1?_BnKCosCNT2Sign             DB  0
  32+ 0000 ~            prefix1?_BnKUxCos                   DB  0
  33+ 0000 ~            prefix1?_BnKUxCosSign               DB  0
  34+ 0000 ~            prefix1?_BnKUyCos                   DB  0
  35+ 0000 ~            prefix1?_BnKUyCosSign               DB  0
  36+ 0000 ~            prefix1?_BnKVxSin                   DB  0
  37+ 0000 ~            prefix1?_BnKVxSinSign               DB  0
  38+ 0000 ~            prefix1?_BnKVySin                   DB  0
  39+ 0000 ~            prefix1?_BnKVySinSign               DB  0
  40+ 0000 ~            prefix1?_BnKVxVySinSign             DB  0
  41+ 0000 ~            prefix1?_BnKUxUyCosSign             DB  0
  42+ 0000 ~            prefix1?_BnKUxCosAddVxSin           DW  0
  43+ 0000 ~            prefix1?_BnKUyCosSubVySin           DW  0
  44+ 0000 ~            prefix1?_BnKAngle                   DB  0
  45+ 0000 ~            s
  46+ 0000 ~
  47+ 0000 ~            ; General local variables used in universe object
  48+ 0000 ~            prefix1?_BnKTGT                     DB  0
  49+ 0000 ~            prefix1?_BnKSTP                     DB  0
  50+ 0000 ~            prefix1?_BnKLSP                     DS  50              ; move to planet or L2 code ?
  51+ 0000 ~            prefix1?_BnKCNT                     DB  0               ; 93
  52+ 0000 ~            prefix1?_BnKCNT2                    DB  0               ; 93
  53+ 0000 ~            ; Replaced LSX2 and LSY2 with plot heaps of 64 x 2 bytes each + 1 pair for initial point
  54+ 0000 ~                IFDEF MERIDANLINEDEBUG
  55+ 0000 ~            prefix1?_BnKPlotXHeap               DS  $82			   ; &0EC0	    \ LSX2 bline buffer size?
  56+ 0000 ~            prefix1?_BnKPlotYHeap               DS  $82            ; &0F0E	    \ LSY2
  57+ 0000 ~                ENDIF
  58+ 0000 ~            prefix1?_BnKPlotIndex               DB  0
  59+ 0000 ~                DISPLAY "TODO can we remove this and just use BnkCNT = 0 as the same thing?"
  60+ 0000 ~            prefix1?_BnKFlag					DB  0
  61+ 0000 ~
  62+ 0000 ~            ; Post clipping the results are now 8 bit
  63+ 0000 ~            prefix1?_BnKVisibility              DB  0               ; replaces general purpose xx4 in renderingW
  64+ 0000 ~            prefix1?_BnKProjectedY              DB  0
  65+ 0000 ~            prefix1?_BnKProjectedX              DB  0
  66+ 0000 ~            prefix1?_BnKProjected               equ prefix1?_BnKProjectedY  ; resultant projected position
  67+ 0000 ~            prefix1?_XX15Save                   DS  8
  68+ 0000 ~            prefix1?_XX15Save2                  DS  8
  69+ 0000 ~            prefix1?_Radius                     DB  0
  70+ 0000 ~            ; Used when drawing curves for the end value from previous calls to BLINE
  71+ 0000 ~            ; held as 16 bit values pre clipping
  72+ 0000 ~            prefix1?_PrevXPos                   DW 0
  73+ 0000 ~            prefix1?_PrevYPos                   DW 0
  74+ 0000 ~            prefix1?_NewXPos                    DW 0
  75+ 0000 ~            prefix1?_NewYPos                    DW 0
  76+ 0000 ~
  77+ 0000 ~            ; Colouration
  78+ 0000 ~            ; For planets, Colour 1 is main colour, Colour 2 is outer rim
  79+ 0000 ~            ; if we are going to do outer rim then may have colour thickeness as number of pixels to simulat atmosphere
  80+ 0000 ~            prefix1?_Colour1                    DB 0
  81+ 0000 ~            prefix1?_Colour2                    DB 0
  82+ 0000 ~            prefix1?_Colour2Thickness           DB 0
  83+ 0000 ~
  84+ 0000 ~            ;        -- _pl(prf .. "Radius                     DW  0
  85+ 0000 ~            ;        -- _pl(prf .. "RadiusHigh                 equ prefix1?_Radius+1
  86+ 0000                                           ENDM
  87+ 0000
  88+ 0000              UnivPosVarsMacro:            MACRO  prefix1?
  89+ 0000 ~            prefix1?_BnKxlo                     DB  0                       ; INWK+0
  90+ 0000 ~            prefix1?_BnKxhi                     DB  0                       ; there are hi medium low as some times these are 24 bit
  91+ 0000 ~            prefix1?_BnKxsgn                    DB  0                       ; INWK+2
  92+ 0000 ~            prefix1?_BnKylo                     DB  0                       ; INWK+3 \ ylo
  93+ 0000 ~            prefix1?_BnKyhi                     DB  0                       ; INWK+4 \ yHi
  94+ 0000 ~            prefix1?_BnKysgn                    DB  0                       ; INWK +5
  95+ 0000 ~            prefix1?_BnKzlo                     DB  0                       ; INWK +6
  96+ 0000 ~            prefix1?_BnKzhi                     DB  0                       ; INWK +7
  97+ 0000 ~            prefix1?_BnKzsgn                    DB  0                       ; INWK +8
  98+ 0000 ~            prefix1?_CompassX                   DW  0
  99+ 0000 ~            prefix1?_CompassY                   DW  0
 100+ 0000 ~            prefix1?_BnKElipseCenterX           DW  0
 101+ 0000 ~            prefix1?_BnKElipseCenterY           DW  0
 102+ 0000 ~            prefix1?_BnKElipseRadiusU           DW  0
 103+ 0000 ~            prefix1?_BnKElipseRadiusV           DW  0
 104+ 0000                                          ENDM
 105+ 0000
 106+ 0000              ; Rotation data is stored as lohi, but only 15 bits with 16th bit being  a sign bit. Note this is NOT 2'c compliment
 107+ 0000              ;-Rotation Matrix of Universe Object-----------------------------------------------------------------------------------------------
 108+ 0000              UnivRotationVarsMacro:      MACRO prefix1?
 109+ 0000 ~            prefix1?_BnKrotmatSidevX            DW  0                       ; INWK +21
 110+ 0000 ~            prefix1?_BnKrotmatSidev             equ prefix1?_BnKrotmatSidevX
 111+ 0000 ~            prefix1?_BnKrotmatSidevY            DW  0                       ; INWK +23
 112+ 0000 ~            prefix1?_BnKrotmatSidevZ            DW  0                       ; INWK +25
 113+ 0000 ~            prefix1?_BnKrotmatRoofvX            DW  0                       ; INWK +15
 114+ 0000 ~            prefix1?_BnKrotmatRoofv             equ prefix1?_BnKrotmatRoofvX
 115+ 0000 ~            prefix1?_BnKrotmatRoofvY            DW  0                       ; INWK +17
 116+ 0000 ~            prefix1?_BnKrotmatRoofvZ            DW  0                       ; INWK +19
 117+ 0000 ~            prefix1?_BnKrotmatNosevX            DW  0                       ; INWK +9
 118+ 0000 ~            prefix1?_BnKrotmatNosev             EQU prefix1?_BnKrotmatNosevX
 119+ 0000 ~            prefix1?_BnKrotmatNosevY            DW  0                       ; INWK +11
 120+ 0000 ~            prefix1?_BnKrotmatNosevZ            DW  0                       ; INWK +13
 121+ 0000                                          ENDM
 122+ 0000
 123+ 0000
 124+ 0000              XX15DefineMacro: MACRO   prefix1?
 125+ 0000 ~
 126+ 0000 ~            prefix1?_BnKXScaled                  DB  0               ; XX15+0Xscaled
 127+ 0000 ~            prefix1?_BnKXScaledSign              DB  0               ; XX15+1xsign
 128+ 0000 ~            prefix1?_BnKYScaled                  DB  0               ; XX15+2yscaled
 129+ 0000 ~            prefix1?_BnKYScaledSign              DB  0               ; XX15+3ysign
 130+ 0000 ~            prefix1?_BnKZScaled                  DB  0               ; XX15+4zscaled
 131+ 0000 ~            prefix1?_BnKZScaledSign              DB  0               ; XX15+5zsign
 132+ 0000 ~            prefix1?_XX1576                      DW  0    ; y2
 133+ 0000 ~
 134+ 0000 ~            prefix1?_XX15:                       equ prefix1?_BnKXScaled
 135+ 0000 ~            prefix1?_XX15VecX:                   equ prefix1?_XX15
 136+ 0000 ~            prefix1?_XX15VecY:                   equ prefix1?_XX15+1
 137+ 0000 ~            prefix1?_XX15VecZ:                   equ prefix1?_XX15+2
 138+ 0000 ~            prefix1?_BnKXPoint:                  equ prefix1?_XX15
 139+ 0000 ~            prefix1?_BnKXPointLo:                equ prefix1?_XX15+0
 140+ 0000 ~            prefix1?_BnKXPointHi:                equ prefix1?_XX15+1
 141+ 0000 ~            prefix1?_BnKXPointSign:              equ prefix1?_XX15+2
 142+ 0000 ~            prefix1?_BnKYPoint:                  equ prefix1?_XX15+3
 143+ 0000 ~            prefix1?_BnKYPointLo:                equ prefix1?_XX15+3
 144+ 0000 ~            prefix1?_BnKYPointHi:                equ prefix1?_XX15+4
 145+ 0000 ~            prefix1?_BnKYPointSign:              equ prefix1?_XX15+5
 146+ 0000 ~
 147+ 0000 ~            prefix1?_XX1510                      EQU prefix1?_BnKXScaled    ; x1 as a 16-bit coordinate (x1_hi x1_lo)
 148+ 0000 ~            prefix1?_XX1532                      EQU prefix1?_BnKYScaled   ; y1 as a 16-bit coordinate (y1_hi y1_lo)
 149+ 0000 ~            prefix1?_XX1554                      EQU prefix1?_BnKZScaled   ; x2
 150+ 0000 ~            prefix1?_XX1554p1                    EQU prefix1?_XX1554+1
 151+ 0000 ~            prefix1?_XX15X1lo                    EQU prefix1?_XX1510
 152+ 0000 ~            prefix1?_XX15X1hi                    EQU prefix1?_XX1510+1
 153+ 0000 ~            prefix1?_XX15Y1lo                    EQU prefix1?_XX1532
 154+ 0000 ~            prefix1?_XX15Y1hi                    EQU prefix1?_XX1532+1
 155+ 0000 ~            prefix1?_XX15X2lo                    EQU prefix1?_XX1554
 156+ 0000 ~            prefix1?_XX15X2hi                    EQU prefix1?_XX1554+1
 157+ 0000 ~            prefix1?_XX15Y2lo                    EQU prefix1?_XX1210
 158+ 0000 ~            prefix1?_XX15Y2hi                    EQU prefix1?_XX1210+1
 159+ 0000 ~            prefix1?_XX15PlotX1                  EQU prefix1?_XX15
 160+ 0000 ~            prefix1?_XX15PlotY1                  EQU prefix1?_XX15+1
 161+ 0000 ~            prefix1?_XX15PlotX2                  EQU prefix1?_XX15+2
 162+ 0000 ~            prefix1?_XX15PlotY2                  EQU prefix1?_XX15+3
 163+ 0000                          ENDM
 164+ 0000
 165+ 0000              XX12DefineMacro: MACRO   prefix1?
 166+ 0000 ~            ;-- transmat0 --------------------------------------------------------------------------------------------------------------------------
 167+ 0000 ~            ; Note XX12 comes after as some logic in normal processing uses XX15 and XX12 combines
 168+ 0000 ~
 169+ 0000 ~            prefix1?_XX1210                     EQU prefix1?_XX1576
 170+ 0000 ~            prefix1?_XX12p1                     EQU prefix1?_XX1210+1
 171+ 0000 ~            prefix1?_XX12                       EQU prefix1?_XX1210
 172+ 0000 ~
 173+ 0000 ~
 174+ 0000 ~            prefix1?_BnKXX12xLo                 EQU prefix1?_XX12               ; XX12+0
 175+ 0000 ~            prefix1?_BnKXX12xSign               EQU prefix1?_XX12+1   ; XX12+1
 176+ 0000 ~            prefix1?_BnKXX12yLo                 EQU prefix1?_XX12+2   ; XX12+2
 177+ 0000 ~            prefix1?_BnKXX12ySign               EQU prefix1?_XX12+3   ; XX12+3
 178+ 0000 ~            prefix1?_BnKXX12zLo                 EQU prefix1?_XX12+4   ; XX12+4
 179+ 0000 ~            prefix1?_BnKXX12zSign               EQU prefix1?_XX12+5   ; XX12+5
 180+ 0000 ~            prefix1?_XX12Save                   DS  6
 181+ 0000 ~            prefix1?_XX12Save2                  DS  6
 182+ 0000 ~
 183+ 0000 ~            prefix1?_varXX12                    EQU prefix1?_XX12
 184+ 0000 ~            ; Repurposed XX12 when plotting lines
 185+ 0000 ~            prefix1?_BnkY2                      equ prefix1?_XX12+0
 186+ 0000 ~            prefix1?_BnKy2Lo                    equ prefix1?_XX12+0
 187+ 0000 ~            prefix1?_BnkY2Hi                    equ prefix1?_XX12+1
 188+ 0000 ~            prefix1?_BnkDeltaXLo                equ prefix1?_XX12+2
 189+ 0000 ~            prefix1?_BnkDeltaXHi                equ prefix1?_XX12+3
 190+ 0000 ~            prefix1?_BnkDeltaYLo                equ prefix1?_XX12+4
 191+ 0000 ~            prefix1?_BnkDeltaYHi                equ prefix1?_XX12+5
 192+ 0000 ~            prefix1?_BnkGradient                equ prefix1?_XX12+2
 193+ 0000 ~            prefix1?_BnkTemp1                   equ prefix1?_XX12+2
 194+ 0000 ~            prefix1?_BnkTemp1Lo                 equ prefix1?_XX12+2
 195+ 0000 ~            prefix1?_BnkTemp1Hi                 equ prefix1?_XX12+3
 196+ 0000 ~            prefix1?_BnkTemp2                   equ prefix1?_XX12+3
 197+ 0000 ~            prefix1?_BnkTemp2Lo                 equ prefix1?_XX12+3
 198+ 0000 ~            prefix1?_BnkTemp2Hi                 equ prefix1?_XX12+4
 199+ 0000                                          ENDM
 200+ 0000
 201+ 0000              XX16DefineMacro: MACRO   prefix1?
 202+ 0000 ~            ;-- XX16 --------------------------------------------------------------------------------------------------------------------------
 203+ 0000 ~            prefix1?_BnkTransmatSidevX          DW  0               ; XX16+0
 204+ 0000 ~            prefix1?_BnkTransmatSidev           EQU prefix1?_BnkTransmatSidevX
 205+ 0000 ~            prefix1?_BnkTransmatSidevY          DW 0                ; XX16+2
 206+ 0000 ~            prefix1?_BnkTransmatSidevZ          DW 0                ; XX16+2
 207+ 0000 ~            prefix1?_BnkTransmatRoofvX          DW 0
 208+ 0000 ~            prefix1?_BnkTransmatRoofv           EQU prefix1?_BnkTransmatRoofvX
 209+ 0000 ~            prefix1?_BnkTransmatRoofvY          DW 0                ; XX16+2
 210+ 0000 ~            prefix1?_BnkTransmatRoofvZ          DW 0                ; XX16+2
 211+ 0000 ~            prefix1?_BnkTransmatNosevX          DW 0
 212+ 0000 ~            prefix1?_BnkTransmatNosev           EQU prefix1?_BnkTransmatNosevX
 213+ 0000 ~            prefix1?_BnkTransmatNosevY          DW 0                ; XX16+2
 214+ 0000 ~            prefix1?_BnkTransmatNosevZ          DW 0                ; XX16+2
 215+ 0000 ~            prefix1?_BnkTransmatTransX          DW 0
 216+ 0000 ~            prefix1?_BnkTransmatTransY          DW 0
 217+ 0000 ~            prefix1?_BnkTransmatTransZ          DW 0
 218+ 0000 ~            prefix1?_XX16                       equ prefix1?_BnkTransmatSidev
 219+ 0000 ~            ;-- XX16Inv --------------------------------------------------------------------------------------------------------------------------
 220+ 0000 ~            prefix1?_BnkTransInvRow0x0          DW 0
 221+ 0000 ~            prefix1?_BnkTransInvRow0x1          DW 0
 222+ 0000 ~            prefix1?_BnkTransInvRow0x2          DW 0
 223+ 0000 ~            prefix1?_BnkTransInvRow0x3          DW 0
 224+ 0000 ~            prefix1?_BnkTransInvRow1y0          DW 0
 225+ 0000 ~            prefix1?_BnkTransInvRow1y1          DW 0
 226+ 0000 ~            prefix1?_BnkTransInvRow1y2          DW 0
 227+ 0000 ~            prefix1?_BnkTransInvRow1y3          DW 0
 228+ 0000 ~            prefix1?_BnkTransInvRow2z0          DW 0
 229+ 0000 ~            prefix1?_BnkTransInvRow2z1          DW 0
 230+ 0000 ~            prefix1?_BnkTransInvRow2z2          DW 0
 231+ 0000 ~            prefix1?_BnkTransInvRow2z3          DW 0
 232+ 0000 ~
 233+ 0000 ~            prefix1?_XX16Inv                    equ prefix1?_BnkTransInvRow0x0
 234+ 0000                                          ENDM
 235+ 0000
 236+ 0000              XX18DefineMacro: MACRO   prefix1?
 237+ 0000 ~            ;-- XX18 --------------------------------------------------------------------------------------------------------------------------
 238+ 0000 ~            prefix1?_BnkDrawCam0xLo             DB  0               ; XX18+0
 239+ 0000 ~            prefix1?_BnkDrawCam0xHi             DB  0               ; XX18+1
 240+ 0000 ~            prefix1?_BnkDrawCam0xSgn            DB  0               ; XX18+2
 241+ 0000 ~            prefix1?_BnkDrawCam0x               equ prefix1?_BnkDrawCam0xLo
 242+ 0000 ~            prefix1?_BnkDrawCam0yLo             DB  0               ; XX18+3
 243+ 0000 ~            prefix1?_BnkDrawCam0yHi             DB  0               ; XX18+4
 244+ 0000 ~            prefix1?_BnkDrawCam0ySgn            DB  0               ; XX18+5
 245+ 0000 ~            prefix1?_BnkDrawCam0y               equ prefix1?_BnkDrawCam0yLo
 246+ 0000 ~            prefix1?_BnkDrawCam0zLo             DB  0               ; XX18+6
 247+ 0000 ~            prefix1?_BnkDrawCam0zHi             DB  0               ; XX18+7
 248+ 0000 ~            prefix1?_BnkDrawCam0zSgn            DB  0               ; XX18+8
 249+ 0000 ~            prefix1?_BnkDrawCam0z               equ prefix1?_BnkDrawCam0zLo
 250+ 0000 ~            prefix1?_XX18                       equ prefix1?_BnkDrawCam0xLo
 251+ 0000                                          ENDM
 252+ 0000
 253+ 0000              XX25DefineMacro: MACRO   prefix1?
 254+ 0000 ~            ;-- XX25 --------------------------------------------------------------------------------------------------------------------------
 255+ 0000 ~            prefix1?_BnKProjxLo                 DB  0
 256+ 0000 ~            prefix1?_BnKProjxHi                 DB  0
 257+ 0000 ~            prefix1?_BnKProjxSgn                DB  0
 258+ 0000 ~            prefix1?_BnKProjx                   EQU prefix1?_BnKProjxLo
 259+ 0000 ~            prefix1?_BnKProjyLo                 DB  0
 260+ 0000 ~            prefix1?_BnKProjyHi                 DB  0
 261+ 0000 ~            prefix1?_BnKProjySgn                DB  0
 262+ 0000 ~            prefix1?_BnKProjy                   EQU prefix1?_BnKProjyLo
 263+ 0000 ~            prefix1?_BnKProjzLo                 DB  0
 264+ 0000 ~            prefix1?_BnKProjzHi                 DB  0
 265+ 0000 ~            prefix1?_BnKProjzSgn                DB  0
 266+ 0000 ~            prefix1?_BnKProjz                   EQU prefix1?_BnKProjzLo
 267+ 0000 ~            prefix1?_XX25                       EQU prefix1?_BnKProjxLo
 268+ 0000                                          ENDM
 269+ 0000
 270+ 0000              CopyPosToXX15Macro: MACRO   prefix1?
 271+ 0000 ~
 272+ 0000 ~            prefix1?_CopyPosToXX15:    ld hl,prefix1?_Bnkxhi
 273+ 0000 ~                                       ld de,prefix1?_BnkXScaled
 274+ 0000 ~                                       ldi
 275+ 0000 ~                                       ldi
 276+ 0000 ~                                       inc hl ; skip to y high
 277+ 0000 ~                                       ldi
 278+ 0000 ~                                       ldi
 279+ 0000 ~                                       inc hl ; skip to z hig
 280+ 0000 ~                                       ldi
 281+ 0000 ~                                       ldi
 282+ 0000 ~                                       ret
 283+ 0000                                  ENDM
 284+ 0000
 285+ 0000              CopyXX12ScaledToXX18Macro:  MACRO    prefix1?
 286+ 0000 ~            prefix1?_CopyXX12ScaledToXX18:
 287+ 0000 ~            prefix1?_CopyResultToDrawCam:    ld      hl, prefix1?_XX12
 288+ 0000 ~                                             ld      de, prefix1?_XX18
 289+ 0000 ~                                             ldi    ; X12+0 => XX18+0  Set XX18(2 0) = dot_sidev
 290+ 0000 ~                                             inc de ; skip to XX18+2 as it will be on XX18+1
 291+ 0000 ~                                             ldi    ; XX12+1 => XX18+2
 292+ 0000 ~                                             ldi    ; XX12+2 => XX18+3 Set XX12+1 => XX18+2
 293+ 0000 ~                                             inc de ; skip to XX18+5 as it will be on XX18+4
 294+ 0000 ~                                             ldi    ; XX12+3 => XX18+5
 295+ 0000 ~                                             ldi    ; XX12+4 => XX18+6 Set XX18(8 6) = dot_nosev
 296+ 0000 ~                                             inc de ; skip to XX18+8 as it will be on XX18+7
 297+ 0000 ~                                             ldi    ; XX12+5 => XX18+8
 298+ 0000 ~                                             ret
 299+ 0000                                          ENDM
 300+ 0000
 301+ 0000              CopyXX12toXX15Macro:        MACRO    prefix1?
 302+ 0000 ~            prefix1?_CopyXX12toXX15:         ld      hl, prefix1?_BnkXX12xLo
 303+ 0000 ~                                             ld      de, prefix1?_XX18
 304+ 0000 ~                                             ldi      ; xlo
 305+ 0000 ~                                             ldi      ; xsg
 306+ 0000 ~                                             ldi      ; xlo
 307+ 0000 ~                                             ldi      ; xsg
 308+ 0000 ~                                             ldi      ; xlo
 309+ 0000 ~                                             ldi      ; xsg
 310+ 0000 ~                                             ret
 311+ 0000                                          ENDM
 312+ 0000
 313+ 0000              InitialiseUniverseObjMacro: MACRO   prefix1?
 314+ 0000 ~            prefix1?_InitRotMat:    ld      hl, 0
 315+ 0000 ~                                    ld      (prefix1?_BnKrotmatSidevY),hl       ; set the zeroes
 316+ 0000 ~                                    ld      (prefix1?_BnKrotmatSidevZ),hl       ; set the zeroes
 317+ 0000 ~                                    ld      (prefix1?_BnKrotmatRoofvX),hl       ; set the zeroes
 318+ 0000 ~                                    ld      (prefix1?_BnKrotmatRoofvZ),hl       ; set the zeroes
 319+ 0000 ~                                    ld      (prefix1?_BnKrotmatNosevX),hl       ; set the zeroes
 320+ 0000 ~                                    ld      (prefix1?_BnKrotmatNosevY),hl       ; set the zeroes
 321+ 0000 ~            ; Optimised as already have 0 in l
 322+ 0000 ~                                    ld      h, $60	             				; 96 in hi byte
 323+ 0000 ~                                    ;ld      hl,1
 324+ 0000 ~                                    ld      (prefix1?_BnKrotmatSidevX),hl
 325+ 0000 ~                                    ld      (prefix1?_BnKrotmatRoofvY),hl
 326+ 0000 ~            ; Optimised as already have 0 in l
 327+ 0000 ~                                    ld      h, $E0					            ; -96 in hi byte which is +96 with hl bit 7 set
 328+ 0000 ~                                    ld      (prefix1?_BnKrotmatNosevZ),hl
 329+ 0000 ~                                    ret
 330+ 0000                                          ENDM
 331+ 0000
# file closed: ./Universe/UniverseMacros/UniverseVarsDefineMacro.asm
 159  0000                                      INCLUDE "./Tables/message_queue_macros.asm"
# file opened: ./Tables/message_queue_macros.asm
   1+ 0000
   2+ 0000              AnyMessagesMacro:       MACRO   NoMessageTarget
   3+ 0000 ~                                    ld      a, (MessageCount)
   4+ 0000 ~                                    and     a
   5+ 0000 ~                                    jr      z, NoMessageTarget
   6+ 0000                                      ENDM
   7+ 0000
   8+ 0000              AnyHyperSpaceMacro:     MACRO   NoMessageText
   9+ 0000 ~                                    ld      hl,(InnerHyperCount)
  10+ 0000 ~                                    ld      a,h
  11+ 0000 ~                                    or      l
  12+ 0000 ~                                    jr      z, NoMessageText
  13+ 0000                                      ENDM
  14+ 0000
# file closed: ./Tables/message_queue_macros.asm
 160  0000                                      INCLUDE "./Variables/general_variables_macros.asm"
# file opened: ./Variables/general_variables_macros.asm
   1+ 0000              ; limited to 255 character length
   2+ 0000              CountLengthHL:          MACRO   Limiter
   3+ 0000 ~                                    ld      de,hl
   4+ 0000 ~                                    ld      bc,Limiter
   5+ 0000 ~                                    xor     a
   6+ 0000 ~                                    cpir
   7+ 0000 ~                                    ClearCarryFlag
   8+ 0000 ~                                    sbc     hl,de
   9+ 0000 ~                                    ld      a,l
  10+ 0000 ~                                    ret
  11+ 0000                                      ENDM
  12+ 0000
  13+ 0000              IncMemMaxN:             MACRO   mem, maxvalue
  14+ 0000 ~                                    ld      a,(mem)
  15+ 0000 ~                                    cp      maxvalue
  16+ 0000 ~                                    jr      c,.IncMaxed
  17+ 0000 ~                                    inc     a
  18+ 0000 ~                                    ld      (mem),a
  19+ 0000 ~            .IncMaxed:
  20+ 0000                                      ENDM
  21+ 0000
  22+ 0000              IncMemMaxNCycle:        MACRO   mem, cyclevalue
  23+ 0000 ~                                    ld      a,(mem)
  24+ 0000 ~                                    inc     a
  25+ 0000 ~                                    cp      cyclevalue
  26+ 0000 ~                                    jr      c,.IncMaxed
  27+ 0000 ~                                    xor     a
  28+ 0000 ~            .IncMaxed:              ld      (mem),a
  29+ 0000                                      ENDM
  30+ 0000
  31+ 0000
  32+ 0000              HalfLengthHL:           MACRO
  33+ 0000 ~                                    ld      b,0
  34+ 0000 ~            .CountLenLoop:          ld      a,(hl)
  35+ 0000 ~                                    cp      0
  36+ 0000 ~                                    jr      z,.DoneCount
  37+ 0000 ~                                    inc     b
  38+ 0000 ~                                    inc     hl
  39+ 0000 ~                                    jr      .CountLenLoop
  40+ 0000 ~            .DoneCount:             ld      a,32
  41+ 0000 ~                                    sub     b
  42+ 0000 ~                                    sra     a
  43+ 0000                                      ENDM
  44+ 0000
  45+ 0000              MakeInnocentMacro:		MACRO
  46+ 0000 ~            						xor		a
  47+ 0000 ~            						ld		(FugitiveInnocentStatus),a
  48+ 0000              						ENDM
  49+ 0000
  50+ 0000              NoEscapePodMacro:		MACRO
  51+ 0000 ~            						xor		a
  52+ 0000 ~            						ld		(EscapePod),a
  53+ 0000              						ENDM
  54+ 0000
  55+ 0000              MaxFuelLevel            EQU     70              ; 7.0 light years max
  56+ 0000              MaxFuelMacro:			MACRO
  57+ 0000 ~            						ld		a,MaxFuelLevel
  58+ 0000 ~            						ld		(Fuel),a
  59+ 0000              						ENDM
  60+ 0000
  61+ 0000              MaxThrottle:            MACRO
  62+ 0000 ~                                    ld      a,(SHIPMAXSPEED)
  63+ 0000 ~                                    ld      (DELTA),a
  64+ 0000 ~                                    ld      d,a
  65+ 0000 ~                                    ld      e,4
  66+ 0000 ~                                    mul
  67+ 0000 ~                                    ld      (DELT4Lo),de
  68+ 0000                                      ENDM
  69+ 0000
  70+ 0000              ZeroThrottle:           MACRO
  71+ 0000 ~                                    xor     a
  72+ 0000 ~                                    ld      (DELTA),a
  73+ 0000 ~                                    ld      (DELT4Lo),a
  74+ 0000 ~                                    ld      (DELT4Lo+1),a
  75+ 0000                                      ENDM
  76+ 0000
  77+ 0000              ZeroPitch:              MACRO
  78+ 0000 ~                                    xor     a
  79+ 0000 ~                                    ld      (BET2),a
  80+ 0000 ~                                    ld      (BET2FLIP),a
  81+ 0000 ~                                    ld      (JSTY),a
  82+ 0000 ~                                    ld      (BETA),a
  83+ 0000                                      ENDM
  84+ 0000
  85+ 0000              ZeroRoll:               MACRO
  86+ 0000 ~                                    xor     a                              ; zero roll and climb
  87+ 0000 ~                                    ld      (ALP2),a
  88+ 0000 ~                                    ld      (ALP2FLIP),a
  89+ 0000 ~                                    ld      (JSTX),a
  90+ 0000 ~                                    ld      (ALPHA),a
  91+ 0000                                      ENDM
  92+ 0000
  93+ 0000              CorrectPostJumpFuel:    MACRO
  94+ 0000 ~                                    ld      a,(Fuel)
  95+ 0000 ~                                    ld      hl,Distance
  96+ 0000 ~                                    sub     a,(hl)
  97+ 0000 ~                                    ld      (Fuel),a
  98+ 0000                                      ENDM
  99+ 0000
 100+ 0000              AnyMissilesLeft:        MACRO
 101+ 0000 ~                                    ld      a,(NbrMissiles)
 102+ 0000 ~                                    and     a
 103+ 0000                                      ENDM
 104+ 0000
 105+ 0000              SetMissileTargetA:      MACRO
 106+ 0000 ~                                    ld      (MissileTargettingFlag),a   ; Set to slot number clearing bit 7
 107+ 0000                                      ENDM
 108+ 0000
 109+ 0000              IsMissileLaunchFlagged: MACRO
 110+ 0000 ~                                    ld      a,(MissileTargettingFlag)
 111+ 0000 ~                                    and     $80
 112+ 0000                                      ENDM
 113+ 0000
 114+ 0000              SetMissileTargetting:   MACRO
 115+ 0000 ~                                    ld      a,StageMissileTargeting
 116+ 0000 ~                                    ld      (MissileTargettingFlag),a
 117+ 0000                                      ENDM
 118+ 0000
 119+ 0000              ClearMissileTargetting: MACRO
 120+ 0000 ~                                    ld      a,StageMissileNotTargeting
 121+ 0000 ~                                    ld      (MissileTargettingFlag),a
 122+ 0000                                      ENDM
 123+ 0000
 124+ 0000
 125+ 0000              ; Clear targetting bits which signals launch if lower nibble has selected target
 126+ 0000              SetMissileLaunch:       MACRO
 127+ 0000 ~                                    ld      a,(MissileTargettingFlag)
 128+ 0000 ~                                    and     $0F
 129+ 0000 ~                                    ld      (MissileTargettingFlag),a
 130+ 0000                                      ENDM
 131+ 0000
 132+ 0000              LockMissileToA:         MACRO
 133+ 0000 ~                                    or      $80
 134+ 0000 ~                                    ld      (MissileTargettingFlag),a
 135+ 0000                                      ENDM
 136+ 0000
 137+ 0000              ClearECM:               MACRO
 138+ 0000 ~                                    xor     a
 139+ 0000 ~                                    ld      (ECMCountDown),a
 140+ 0000                                      ENDM
 141+ 0000
 142+ 0000
 143+ 0000              ; Will check to see if bit 2 is set, if it is clear, then friendly hence z is set
 144+ 0000              ;                                    if it is set    then hostile hence z is not set
 145+ 0000              IsShipHostile:          MACRO
 146+ 0000 ~                                    ld      a,(ShipNewBitsAddr)
 147+ 0000 ~                                    and     ShipIsHostile
 148+ 0000                                      ENDM
 149+ 0000              ; Will check to see if docking is set, if docking     z flag is clear
 150+ 0000              ;                                      if not docking z flag is set
 151+ 0000              IsShipDocking:          MACRO
 152+ 0000 ~                                    ld      a,(ShipNewBitsAddr)
 153+ 0000 ~                                    and     ShipIsDocking
 154+ 0000                                      ENDM
 155+ 0000
 156+ 0000              ; Will check to see if bit 2 is set, if it is clear, then friendly hence z is set
 157+ 0000              ;                                    if hit is set then hostile hence z is not set
 158+ 0000              IsShipFriendly:         MACRO
 159+ 0000 ~                                    ld      a,(ShipNewBitsAddr)
 160+ 0000 ~                                    and     ShipNotHostile                  ; mask so we only have hostile bit
 161+ 0000                                      ENDM
 162+ 0000
 163+ 0000              ; Will check to see if bit 5 is set, if clear, then not exploding z clear
 164+ 0000              ;                                    if set    then exploding     z set
 165+ 0000              IsShipExploding:        MACRO
 166+ 0000 ~                                    ld      a,(UBnkaiatkecm)
 167+ 0000 ~                                    and     ShipExploding
 168+ 0000                                      ENDM
 169+ 0000
 170+ 0000              ; Checks if ship is a trader, if ship is a trader then z flag is clear
 171+ 0000              ;                             if ship isn't a trader then z flag is set
 172+ 0000              IsShipTrader:           MACRO
 173+ 0000 ~                                    ld      a,(ShipNewBitsAddr)
 174+ 0000 ~                                    and     ShipIsTrader
 175+ 0000                                      ENDM
 176+ 0000              ; Will check if the AI bit is set, if set then z is clear, if clear then z is set
 177+ 0000              IsAIEnabled:            MACRO
 178+ 0000 ~                                    ld      hl, UBnkaiatkecm
 179+ 0000 ~                                    bit 	ShipAIEnabledBitNbr,(hl)
 180+ 0000                                      ENDM
 181+ 0000
 182+ 0000              UpdateLaserOnCounter:   MACRO
 183+ 0000 ~                                    ld      a,(CurrLaserPulseOnCount)
 184+ 0000 ~                                    and     a
 185+ 0000 ~                                    jr      z,.LaserOnIsDone
 186+ 0000 ~                                    dec     a
 187+ 0000 ~                                    ld      (CurrLaserPulseOnCount),a
 188+ 0000 ~                                    jr      z,.LaserOnIsDone
 189+ 0000 ~                                    ldCopyByte CurrLaserPulseOffTime, CurrLaserPulseOffCount
 190+ 0000 ~            .LaserOnIsDone:
 191+ 0000                                      ENDM
 192+ 0000
 193+ 0000              UpdateLaserOffCounter:  MACRO
 194+ 0000 ~                                    ld      a,(CurrLaserPulseOffTime)
 195+ 0000 ~                                    and     a
 196+ 0000 ~                                    jr      z,.LaserOffIsDone
 197+ 0000 ~                                    dec     a
 198+ 0000 ~                                    ld      (CurrLaserPulseOffTime),a
 199+ 0000 ~                                    jr      z,.LaserOffIsDone
 200+ 0000 ~                                    ldCopyByte CurrLaserPulseRest, CurrLaserPulseRestCount
 201+ 0000 ~            .LaserOffIsDone:
 202+ 0000                                      ENDM
 203+ 0000
 204+ 0000              UpdateLaserRestCounter: MACRO
 205+ 0000 ~                                    ld      a,(CurrLaserPulseRestCount)
 206+ 0000 ~                                    and     a
 207+ 0000 ~                                    jr      z,.LaserRestIsDone
 208+ 0000 ~                                    dec     a
 209+ 0000 ~                                    ld      (CurrLaserPulseRestCount),a
 210+ 0000 ~                                    jr      z,.LaserRestIsDone
 211+ 0000 ~                                    ZeroA                                                                           ;    then pulse rate count = 0
 212+ 0000 ~                                    ld      (CurrLaserPulseRateCount),a                                             ;    .
 213+ 0000 ~            .LaserRestIsDone
 214+ 0000                                      ENDM
 215+ 0000
 216+ 0000              ChargeEnergyAndShields: MACRO
 217+ 0000 ~                                    ld      a,$FF
 218+ 0000 ~                                    ld      (PlayerEnergy),a
 219+ 0000 ~                                    ld      (ForeShield),a
 220+ 0000 ~                                    ld      (AftShield),a
 221+ 0000                                      ENDM
 222+ 0000
 223+ 0000              CopyPresentSystemToTarget: MACRO
 224+ 0000 ~                                    ld      hl,(PresentSystemX)
 225+ 0000 ~                                    ld      (TargetSystemX),hl
 226+ 0000                                      ENDM
 227+ 0000
 228+ 0000              CopyTargetSystemToPresent: MACRO
 229+ 0000 ~                                    ld      hl,(TargetSystemX)
 230+ 0000 ~                                    ld      (PresentSystemX),hl
 231+ 0000                                      ENDM
 232+ 0000
 233+ 0000              HalveFugitiveStatus:    MACRO
 234+ 0000 ~                                    ld      hl,FugitiveInnocentStatus
 235+ 0000 ~                                    srl     (hl)
 236+ 0000                                      ENDM
 237+ 0000
 238+ 0000              ClearForceTransition    MACRO
 239+ 0000 ~                                    ld      a,$FF
 240+ 0000 ~                                    ld      (ScreenTransitionForced),a
 241+ 0000                                      ENDM
 242+ 0000
 243+ 0000              ForceTransition:        MACRO newScreen
 244+ 0000 ~                                    ld      a,newScreen
 245+ 0000 ~                                    ld      (ScreenTransitionForced), a
 246+ 0000                                      ENDM
 247+ 0000
 248+ 0000              IsSpaceStationPresent:  MACRO
 249+ 0000 ~                                    ld      a,(SpaceStationSafeZone)
 250+ 0000 ~                                    and     a
 251+ 0000                                      ENDM
 252+ 0000
 253+ 0000              SetSafeZone:            MACRO
 254+ 0000 ~                                    xor     a
 255+ 0000 ~                                    ld      (SpaceStationSafeZone),a
 256+ 0000                                      ENDM
 257+ 0000
 258+ 0000              ClearSafeZone:          MACRO
 259+ 0000 ~                                    ld      a,$FF
 260+ 0000 ~                                    ld      (SpaceStationSafeZone),a
 261+ 0000                                      ENDM
 262+ 0000
 263+ 0000              ClearTemperatures:      MACRO
 264+ 0000 ~                                    xor     a
 265+ 0000 ~                                    ld      (CabinTemperature),a
 266+ 0000 ~                                    ld      (GunTemperature),a
 267+ 0000                                      ENDM
 268+ 0000
 269+ 0000              ClearWarpPressed:       MACRO
 270+ 0000 ~                                    SetMemFalse WarpPressed
 271+ 0000                                      ENDM
 272+ 0000
 273+ 0000              CoolCabin:              MACRO
 274+ 0000 ~                                    ld      a,(CabinTemperature)
 275+ 0000 ~                                    and     a
 276+ 0000 ~                                    jr      z,.AlreadyCool
 277+ 0000 ~                                    dec     a
 278+ 0000 ~                                    ld      (CabinTemperature),a
 279+ 0000 ~            .AlreadyCool:
 280+ 0000                                      ENDM
 281+ 0000
 282+ 0000              CoolLasers:             MACRO
 283+ 0000 ~                                    ld      a,(GunTemperature)
 284+ 0000 ~                                    and     a
 285+ 0000 ~                                    jr      z,.AlreadyCool
 286+ 0000 ~                                    dec     a
 287+ 0000 ~                                    ld      (GunTemperature),a
 288+ 0000 ~            .AlreadyCool:
 289+ 0000                                      ENDM
 290+ 0000
 291+ 0000              ; type 255 is "not fitted"
 292+ 0000
 293+ 0000
 294+ 0000              InitEventCounter:       MACRO
 295+ 0000 ~                                    xor     a
 296+ 0000 ~                                    ld      (EventCounter),a
 297+ 0000                                      ENDM
 298+ 0000
 299+ 0000              ClearMissJump:          MACRO
 300+ 0000 ~                                    ld      a,$FF
 301+ 0000 ~                                    ld      (MissJumpFlag),a
 302+ 0000                                      ENDM
 303+ 0000
 304+ 0000
 305+ 0000              DrainSystem:            MACRO   SystemMem, DrainMem
 306+ 0000 ~                                    ld      a,(DrainMem)
 307+ 0000 ~                                    ld      b,a
 308+ 0000 ~                                    ld      a,(SystemMem)
 309+ 0000 ~                                    sub     a,b
 310+ 0000 ~                                    ld      (SystemMem),a
 311+ 0000 ~                                    jr      c,.ZeroSystem
 312+ 0000 ~                                    jp      .ExitPoint
 313+ 0000 ~            .ZeroSystem:            ZeroA
 314+ 0000 ~                                    ld      (SystemMem),a
 315+ 0000 ~            .ExitPoint
 316+ 0000                                      ENDM
 317+ 0000
 318+ 0000              BoostSystem:            MACRO   SystemMem, BoostMem
 319+ 0000 ~                                    ld      a,(BoostMem)
 320+ 0000 ~                                    ld      b,a
 321+ 0000 ~                                    ld      a,(SystemMem)
 322+ 0000 ~                                    add     b
 323+ 0000 ~                                    ld      (SystemMem),a
 324+ 0000 ~                                    jr      c, .MaxSystem
 325+ 0000 ~                                    jp      .ExitPoint
 326+ 0000 ~            .MaxSystem:             ld      a,255
 327+ 0000 ~                                    ld      (SystemMem),a
 328+ 0000 ~            .ExitPoint
 329+ 0000                                      ENDM
 330+ 0000
 331+ 0000              ;DEFUNCT DONE IN INTERRUPT HANDLER HasEngineSoundChanged:  MACRO
 332+ 0000              ;DEFUNCT DONE IN INTERRUPT HANDLER                         ld      a,(EngineSoundChanged)
 333+ 0000              ;DEFUNCT DONE IN INTERRUPT HANDLER                         and     a
 334+ 0000              ;DEFUNCT DONE IN INTERRUPT HANDLER                         ENDM
 335+ 0000              ;DEFUNCT DONE IN INTERRUPT HANDLER
 336+ 0000              ;DEFUNCT DONE IN INTERRUPT HANDLER ClearEngineSoundChanged:MACRO
 337+ 0000              ;DEFUNCT DONE IN INTERRUPT HANDLER                         xor      a
 338+ 0000              ;DEFUNCT DONE IN INTERRUPT HANDLER                         ld      (EngineSoundChanged),a
 339+ 0000              ;DEFUNCT DONE IN INTERRUPT HANDLER                         ENDM
 340+ 0000              ;DEFUNCT DONE IN INTERRUPT HANDLER
 341+ 0000              ;DEFUNCT DONE IN INTERRUPT HANDLER SetEngineSoundChanged:  MACRO
 342+ 0000              ;DEFUNCT DONE IN INTERRUPT HANDLER                         ld      a,$FF
 343+ 0000              ;DEFUNCT DONE IN INTERRUPT HANDLER                         ld      (EngineSoundChanged),a
 344+ 0000              ;DEFUNCT DONE IN INTERRUPT HANDLER                         ENDM
 345+ 0000
# file closed: ./Variables/general_variables_macros.asm
 161  0000                                      INCLUDE "./Variables/UniverseSlot_macros.asm"
# file opened: ./Variables/UniverseSlot_macros.asm
   1+ 0000
   2+ 0000              AddJunkCount:           MACRO
   3+ 0000 ~                                    ld      hl,JunkCount
   4+ 0000 ~                                    inc     (hl)
   5+ 0000                                      ENDM
   6+ 0000
   7+ 0000              SubJunkCount:           MACRO
   8+ 0000 ~                                    ld      hl,JunkCount
   9+ 0000 ~                                    dec     (hl)
  10+ 0000                                      ENDM
  11+ 0000
  12+ 0000              ClearJunkCount:         MACRO
  13+ 0000 ~                                    ZeroA
  14+ 0000 ~                                    ld      (JunkCount),a
  15+ 0000                                      ENDM
  16+ 0000
  17+ 0000              AddCop:                 MACRO
  18+ 0000 ~                                    ld      hl,CopCount
  19+ 0000 ~                                    inc     (hl)
  20+ 0000                                      ENDM
  21+ 0000
  22+ 0000              SubCop:                 MACRO
  23+ 0000 ~                                    ld      hl,CopCount
  24+ 0000 ~                                    dec     (hl)
  25+ 0000                                      ENDM
  26+ 0000
  27+ 0000              AddPirateCount:         MACRO
  28+ 0000 ~                                    ld      hl,PirateCount
  29+ 0000 ~                                    inc     (hl)
  30+ 0000                                      ENDM
  31+ 0000
  32+ 0000              SubPirateCount:         MACRO
  33+ 0000 ~                                    ld      hl,PirateCount
  34+ 0000 ~                                    inc     (hl)
  35+ 0000                                      ENDM
  36+ 0000
  37+ 0000              AreCopsPresent:         MACRO
  38+ 0000 ~                                    ld      a,(CopCount)
  39+ 0000 ~                                    and     a
  40+ 0000                                      ENDM
  41+ 0000
  42+ 0000              ; Class == shiptype
  43+ 0000              SetSlotAToUnivClass:    MACRO
  44+ 0000 ~                                    ex      af,af'
  45+ 0000 ~                                    ld      a,(ShipTypeAddr)
  46+ 0000 ~                                    ld      b,a
  47+ 0000 ~                                    ex      af,af'
  48+ 0000 ~                                    call    SetSlotAToClassB
  49+ 0000                                      ENDM
  50+ 0000
  51+ 0000              TestRoomForJunk:        MACRO   Target
  52+ 0000 ~                                    ld      a,3
  53+ 0000 ~                                    JumpIfMemTrue  SpaceStationSafeZone, .DoTest
  54+ 0000 ~                                    add     a,2
  55+ 0000 ~            .DoTest                 JumpIfALTMemusng    JunkCount, Target
  56+ 0000                                      ENDM
  57+ 0000
  58+ 0000              JumpIfSpaceStation:     MACRO   Target
  59+ 0000 ~                                    ld      hl,UniverseSlotType
  60+ 0000 ~                                    ld      a,(hl)
  61+ 0000 ~                                    cp      ShipTypeStation
  62+ 0000                                      ENDM
  63+ 0000
  64+ 0000              ClearSlotMem:           MACRO   mem
  65+ 0000 ~                                    ld      a,(mem)
  66+ 0000 ~                                    call    ClearSlotA
  67+ 0000                                      ENDM
  68+ 0000
  69+ 0000              IsSlotEmpty:            MACRO
  70+ 0000 ~                                    ld      hl,UniverseSlotList
  71+ 0000 ~                                    add     hl,a
  72+ 0000 ~                                    ld      a,(hl)
  73+ 0000 ~                                    cp      0
  74+ 0000                                      ENDM
  75+ 0000
  76+ 0000              IsSlotMissile:          MACRO
  77+ 0000 ~                                    ld      hl,UniverseSlotType
  78+ 0000 ~                                    add     hl,a
  79+ 0000 ~                                    ld      a,(hl)
  80+ 0000 ~                                    cp      ShipTypeMissile
  81+ 0000                                      ENDM
  82+ 0000
  83+ 0000
  84+ 0000              ; Checks if slot is empty else A = ship type
  85+ 0000              ReturnIfSlotAEmpty:     MACRO
  86+ 0000 ~                                    ld      hl,UniverseSlotList
  87+ 0000 ~                                    add     hl,a
  88+ 0000 ~                                    ld      a,(hl)
  89+ 0000 ~                                    inc     a
  90+ 0000 ~                                    ret     z           ; if slot was ff inc would make it 0
  91+ 0000 ~                                    dec     a           ; get original value back for later
  92+ 0000                                      ENDM
  93+ 0000
  94+ 0000              JumpIfSlotAEmpty:       MACRO   Target
  95+ 0000 ~                                    ld      hl,UniverseSlotList
  96+ 0000 ~                                    add     hl,a
  97+ 0000 ~                                    ld      a,(hl)
  98+ 0000 ~                                    inc     a
  99+ 0000 ~                                    jp      z,Target    ; if slot was ff inc would make it 0
 100+ 0000 ~                                    dec     a           ; get original value back for later
 101+ 0000                                      ENDM
 102+ 0000
 103+ 0000              JumpIfSlotHLEmpty:      MACRO   Target
 104+ 0000 ~                                    ld      a,(hl)
 105+ 0000 ~                                    and     a
 106+ 0000 ~                                    jr      nz,Target
 107+ 0000                                      ENDM
# file closed: ./Variables/UniverseSlot_macros.asm
 162  0000
 163  0000                                      INCLUDE "./Data/ShipIdEquates.asm"
# file opened: ./Data/ShipIdEquates.asm
   1+ 0000
   2+ 0000
   3+ 0000
   4+ 0000              ShipID_Adder            EQU 00
   5+ 0000              ShipID_Anaconda         EQU 01
   6+ 0000              ShipID_Asp_Mk_2         EQU 02
   7+ 0000              ShipID_Boa              EQU 03
   8+ 0000              ShipID_CargoType5       EQU 04
   9+ 0000              ShipID_Boulder          EQU 05
  10+ 0000              ShipID_Asteroid         EQU 06
  11+ 0000              ShipID_Bushmaster       EQU 07
  12+ 0000              ShipID_Chameleon        EQU 08
  13+ 0000              ShipID_CobraMk3         EQU 09
  14+ 0000              ShipID_Cobra_Mk_1       EQU 10
  15+ 0000              ShipID_Cobra_Mk_3_P     EQU 11
  16+ 0000              ShipID_Constrictor      EQU 12
  17+ 0000              ShipID_Coriolis         EQU 13
  18+ 0000              ShipID_Cougar           EQU 14
  19+ 0000              ShipID_Dodo             EQU 15
  20+ 0000              ShipID_Dragon           EQU 16
  21+ 0000              ShipID_Escape_Pod       EQU 17
  22+ 0000              ShipID_Fer_De_Lance     EQU 18
  23+ 0000              ShipID_Gecko            EQU 19
  24+ 0000              ShipID_Ghavial          EQU 20
  25+ 0000              ShipID_Iguana           EQU 21
  26+ 0000              ShipID_Krait            EQU 22
  27+ 0000              ShipID_Logo             EQU 23
  28+ 0000              ShipID_Mamba            EQU 24
  29+ 0000              ShipID_Missile          EQU 25
  30+ 0000              ShipID_Monitor          EQU 26
  31+ 0000              ShipID_Moray            EQU 27
  32+ 0000              ShipID_Ophidian         EQU 28
  33+ 0000              ShipID_Plate            EQU 29
  34+ 0000              ShipID_Python           EQU 30
  35+ 0000              ShipID_Python_P         EQU 31
  36+ 0000              ShipID_Rock_Hermit      EQU 32
  37+ 0000              ShipID_ShuttleType9     EQU 33
  38+ 0000              ShipID_Shuttle_Mk_2     EQU 34
  39+ 0000              ShipID_Sidewinder       EQU 35
  40+ 0000              ShipID_Splinter         EQU 36
  41+ 0000              ShipID_TestVector       EQU 37
  42+ 0000              ShipID_Thargoid         EQU 38
  43+ 0000              ShipID_Thargon          EQU 39
  44+ 0000              ShipID_TransportType10  EQU 40
  45+ 0000              ShipID_Viper            EQU 41
  46+ 0000              ShipID_Worm             EQU 42
  47+ 0000              ShipID_Rattler          EQU 43
  48+ 0000
# file closed: ./Data/ShipIdEquates.asm
 164  0000
 165  0000
 166  0000                  IFNDEF  LASER_V2
 167  0000 ~            UpdateLaserCountersold: MACRO
 168  0000 ~                                    JumpIfMemZero CurrLaserPulseOnCount,   .SkipPulseOn     ; if beam on count > 0 then beam on count --
 169  0000 ~                                    dec     a                                               ; .
 170  0000 ~                                    ld      (CurrLaserPulseOnCount),a                       ; .
 171  0000 ~            .SkipPulseOn:           JumpIfAIsNotZero  .SkipRestCounter                      ;    if beam on = 0 then
 172  0000 ~                                    ld      a,(CurrLaserPulseOffCount)                      ;       if beam off > 0 then  beam off --
 173  0000 ~                                    JumpIfMemZero CurrLaserPulseOffCount, .SkipPulseOff     ;       .
 174  0000 ~                                    dec     a                                               ;       .
 175  0000 ~                                    ld      (CurrLaserPulseOffCount),a                      ;       .
 176  0000 ~            .SkipPulseOff:          JumpIfAIsNotZero  .SkipRestCounter                      ;       if beam off = 0
 177  0000 ~                                    JumpIfMemZero CurrLaserPulseRestCount, .ZeroRateCounter ;
 178  0000 ~                                    dec     a
 179  0000 ~                                    ld      (CurrLaserPulseRestCount),a
 180  0000 ~                                    jr      nz,.SkipRestCounter
 181  0000 ~            .ZeroRateCounter:       ld      (CurrLaserPulseRateCount),a
 182  0000 ~            .SkipRestCounter:
 183  0000 ~                                    ENDM
 184  0000                  ENDIF
 185  0000              MessageAt:              MACRO   x,y,message
 186  0000 ~                                    MMUSelectLayer1
 187  0000 ~                                    ld      d,y
 188  0000 ~                                    ld      e,x
 189  0000 ~                                    ld      hl,message
 190  0000 ~                                    call    l1_print_at_wrap
 191  0000                                      ENDM
 192  0000
 193  0000              SetBorder:              MACRO   value
 194  0000 ~                                    MMUSelectLayer1
 195  0000 ~                                    ld          a,value
 196  0000 ~                                    call        l1_set_border
 197  0000                                      ENDM
 198  0000
 199  0000              charactersetaddr		equ 15360
 200  0000              STEPDEBUG               equ 1
 201  0000
 202  0000              TopOfStack              equ $5CCB ;$6100
 203  0000
 204  0000                                      ORG $5DCB;      $6200
 205  5DCB F3           EliteNextStartup:       di
 206  5DCC CD D9 AA     .InitiliseFileIO:       call        GetDefaultDrive
 207  5DCF ED 91 07 03  .InitialiseClockSpeed:  nextreg     TURBO_MODE_REGISTER,Speed_28MHZ
 208  5DD3              .InitialiseLayerOrder:
 209  5DD3                                      DISPLAY "Starting Assembly At ", EliteNextStartup
 210  5DD3                                      ; "STARTUP"
 211  5DD3                                      ; Make sure  rom is in page 0 during load
 212  5DD3                                      MMUSelectSpriteBank
 212  5DD3 ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
 213  5DD7 CD DD E7                             call		init_sprites
 214  5DDA                                      MMUSelectLayer2
 214  5DDA ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 215  5DDE CD 11 E0                             call        asm_disable_l2_readwrite
 216  5DE1                                      MMUSelectROMS
 216  5DE1 ED 91 50 FF >                     nextreg EXSDOSMMU0,        BankROM
 216  5DE5 ED 91 51 FF >                     nextreg EXSDOSMMU1,        BankROM
 217  5DE9 ED 91 06 01  .InitialisePeripherals: nextreg     PERIPHERAL_2_REGISTER, AUDIO_CHIPMODE_AY ; Enable Turbo Sound
 218  5DED ED 91 08 52                          nextreg     PERIPHERAL_3_REGISTER, DISABLE_RAM_IO_CONTENTION | ENABLE_TURBO_SOUND | INTERNAL_SPEAKER_ENABLE
 219  5DF1 ED 91 09 00                          nextreg     PERIPHERAL_4_REGISTER, %00000000
 220  5DF5 ED 91 68 10                          nextreg     ULA_CONTROL_REGISTER,  %00010000                ; set up ULA CONRTROL may need to change bit 0 at least, but bit 4 is separate extended keys from main matrix
 221  5DF9                                      MMUSelectSound
 221  5DF9 ED 91 57 64 >                     nextreg SoundMMU,		    BankSound
 222  5DFD CD 4B E0                             call        InitAudio
 223  5E00 3E B0        .InitialiseInterrupts:  ld	        a,VectorTable>>8
 224  5E02 ED 47                                ld	        i,a						                        ; im2 table will be at address 0xa000
 225  5E04 ED 91 22 06                          nextreg     LINE_INTERRUPT_CONTROL_REGISTER,%00000110       ; Video interrup on
 226  5E08 ED 91 23 00                          nextreg     LINE_INTERRUPT_VALUE_LSB_REGISTER,0   ; lasta line..
 227  5E0C ED 5E                                im	2
 228  5E0E F3                   di ; debug
 229  5E0F              .GenerateDefaultCmdr:   MMUSelectCommander
 229  5E0F ED 91 57 38 >                     nextreg CommanderMMU,       BankCommander
 230  5E13 CD 52 E2                             call		defaultCommander
 231  5E16 CD 18 E2                             call        saveCommander
 232  5E19                                      MMUSelectLayer1
 232  5E19 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 233  5E1D CD 8F E0                             call		l1_cls
 234  5E20 3E 07                                ld			a,7
 235  5E22 CD AA E0                             call		l1_attr_cls_to_a
 236  5E25                                      SetBorder   $FF
 236  5E25             >                        MMUSelectLayer1
 236  5E25 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 236  5E29 3E FF       >                        ld          a,$FF
 236  5E2B CD B4 E0    >                        call        l1_set_border
 237  5E2E              .InitialiseL2:          MMUSelectLayer2
 237  5E2E ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 238  5E32 CD 85 E3                             call 		l2_initialise
 239  5E35              .InitialisingMessage:   MessageAt   0,0,InitialiseMessage
 239  5E35             >                        MMUSelectLayer1
 239  5E35 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 239  5E39 16 00       >                        ld      d,0
 239  5E3B 1E 00       >                        ld      e,0
 239  5E3D 21 3D 67    >                        ld      hl,InitialiseMessage
 239  5E40 CD 77 E2    >                        call    l1_print_at_wrap
 240  5E43                                      SetBorder   $01
 240  5E43             >                        MMUSelectLayer1
 240  5E43 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 240  5E47 3E 01       >                        ld          a,$01
 240  5E49 CD B4 E0    >                        call        l1_set_border
 241  5E4C                                      MessageAt   0,8,LoadingSpritesMessage
 241  5E4C             >                        MMUSelectLayer1
 241  5E4C ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 241  5E50 16 08       >                        ld      d,8
 241  5E52 1E 00       >                        ld      e,0
 241  5E54 21 49 67    >                        ld      hl,LoadingSpritesMessage
 241  5E57 CD 77 E2    >                        call    l1_print_at_wrap
 242  5E5A                                      ZeroA
 242  5E5A AF          >                        xor a
 243  5E5B 32 6D 67                             ld          (LoadCounter),a
 244  5E5E              .StreamSpriteData:      MMUSelectSpriteBank
 244  5E5E ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
 245  5E62 CD 8D E8                             call        load_pattern_files
 246  5E65                                      MMUSelectKeyboard
 246  5E65 ED 91 57 65 >                     nextreg KeyboardMMU,       BankKeyboard
 247  5E69 CD F7 E0                             call        init_keyboard
 248  5E6C              .PostDiag:              ClearForceTransition
 248  5E6C 3E FF       >                        ld      a,$FF
 248  5E6E 32 37 6A    >                        ld      (ScreenTransitionForced),a
 249  5E71                                  IFDEF STARTUPDIAGS
 250  5E71 ~                                    SetBorder   $04
 251  5E71 ~                                    MMUSelectSpriteBank
 252  5E71 ~                                    call        sprite_diagnostic
 253  5E71 ~                                    SetBorder   $05
 254  5E71 ~            .PostDiag2:             MMUSelectKeyboard
 255  5E71 ~                                    call        WaitForAnyKey
 256  5E71 ~                                    MMUSelectSpriteBank
 257  5E71 ~                                    call        sprite_diagnostic_clear
 258  5E71                                  ENDIF
 259  5E71              ;TidyCounterInitialise:  ld          a,TidyInterval
 260  5E71              ;                        ld          (TidyCounter),a
 261  5E71 AF           TestText:               xor			a
 262  5E72 32 CD 7E                             ld      (JSTX),a
 263  5E75              DEBUGCODE:              ClearSafeZone ; just set in open space so compas treacks su n
 263  5E75 3E FF       >                        ld      a,$FF
 263  5E77 32 5E 80    >                        ld      (SpaceStationSafeZone),a
 264  5E7A                                      SetBorder   $06
 264  5E7A             >                        MMUSelectLayer1
 264  5E7A ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 264  5E7E 3E 06       >                        ld          a,$06
 264  5E80 CD B4 E0    >                        call        l1_set_border
 265  5E83                                      MMUSelectUniverseN  0
 265  5E83 ED 91 56 46 >                     nextreg UniverseMMU,       BankUNIVDATA0+0
 266  5E87                                      MMUSelectLayer2
 266  5E87 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 267  5E8B                                      SetBorder   $07
 267  5E8B             >                        MMUSelectLayer1
 267  5E8B ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 267  5E8F 3E 07       >                        ld          a,$07
 267  5E91 CD B4 E0    >                        call        l1_set_border
 268  5E94              InitialiseGalaxies:     MessageAt   0,24,InitialisingGalaxies
 268  5E94             >                        MMUSelectLayer1
 268  5E94 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 268  5E98 16 18       >                        ld      d,24
 268  5E9A 1E 00       >                        ld      e,0
 268  5E9C 21 58 67    >                        ld      hl,InitialisingGalaxies
 268  5E9F CD 77 E2    >                        call    l1_print_at_wrap
 269  5EA2                                      ;break
 270  5EA2 CD 38 6A                             call		ResetUniv                       ; Reset ship data
 271  5EA5 CD 60 6A                             call        ResetGalaxy                     ; Reset each galaxy copying in code
 272  5EA8 CD 89 6A                             call        SeedAllGalaxies
 273  5EAB                                      MMUSelectSpriteBank
 273  5EAB ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
 274  5EAF CD D3 E7                             call        sprite_cls_all
 275  5EB2                                      MMUSelectLayer1
 275  5EB2 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 276  5EB6 CD 8F E0                             call		l1_cls
 277  5EB9                                      SetBorder   $00
 277  5EB9             >                        MMUSelectLayer1
 277  5EB9 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 277  5EBD 3E 00       >                        ld          a,$00
 277  5EBF CD B4 E0    >                        call        l1_set_border
 278  5EC2
 279  5EC2
 280  5EC2                                  IFDEF SKIPATTRACT
 281  5EC2 ~                                    DISPLAY "INITGALAXIES SKIP ATTRACT"
 282  5EC2 ~                                    jp DefaultCommander
 283  5EC2                                  ELSE
 284  5EC2                                      DISPLAY "INITGALAXIES ATTRACT ENABLED"
 285  5EC2 F3           StartAttractMode:       di                                          ; we are changing interrupts
 286  5EC3                                      MMUSelectSound
 286  5EC3 ED 91 57 64 >                     nextreg SoundMMU,		    BankSound
 287  5EC7 CD B7 E0                             call        InitAudioMusic
 288  5ECA 21 0D B2                             ld          hl,AttractInterrrupt
 289  5ECD 22 C4 B1                             ld          (IM2SoundHandler+1),hl
 290  5ED0 CD 8E 78                             call        AttractModeInit
 291  5ED3 FB                                   ei
 292  5ED4                                      ;break
 293  5ED4 CD E3 78                             call        AttractModeMain                 ; now drive attact mode keyboard scan
 294  5ED7 F3                                   di                                          ; set up for main
 295  5ED8 21 D7 B1                             ld          hl,SoundInterrupt               ; sound handler
 296  5EDB 22 C4 B1                             ld          (IM2SoundHandler+1),hl
 297  5EDE                                      MMUSelectSound
 297  5EDE ED 91 57 64 >                     nextreg SoundMMU,		    BankSound
 298  5EE2 CD 4B E0                             call        InitAudio                       ; jsut re-init all audio for now rather than sound off
 299  5EE5 FB                                   ei
 300  5EE6                                      JumpIfAIsZero  SkipDefaultCommander
 300  5EE6 A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
 300  5EE7 CA F4 5E    >                        jp	    z, SkipDefaultCommander
 301  5EEA                                  ENDIF
 302  5EEA              DefaultCommander:       MMUSelectCommander
 302  5EEA ED 91 57 38 >                     nextreg CommanderMMU,       BankCommander
 303  5EEE CD 52 E2                             call		defaultCommander
 304  5EF1 C3 F4 5E                             jp          InitialiseMainLoop
 304  5EF4
 305  5EF4              SkipDefaultCommander:
 306  5EF4                                      ; This bit needs to MMU Selet exdos
 307  5EF4                                      ; bring up a browser for saves
 308  5EF4                                      ; load saves it
 309  5EF4                                      ; switch back to maths MMU
 310  5EF4              ;                        call    FindNextFreeSlotInA
 311  5EF4              ;                        ld      b,a
 312  5EF4              ;                        ld      a,13 ;Coriolis station
 313  5EF4              ;                        call    InitialiseShipAUnivB
 314  5EF4              ;                        xor     a
 315  5EF4 CD FA 83     InitialiseMainLoop:     call    InitMainLoop
 316  5EF7              ;..MAIN GAME LOOP..................................................................................................................
 317  5EF7              ; MACRO BLOCKS.....................................................................................................................
 318  5EF7              ;.. Check if keyboard scanning is allowed by screen. If this is set then skip all keyboard and AI..................................
 319  5EF7
 320  5EF7
 321  5EF7
 322  5EF7              ; if beam on count > 0
 323  5EF7              ;    then beam on count --
 324  5EF7              ;         if beam on count = 0
 325  5EF7              ;            then beam off count = beam off
 326  5EF7              ; if beam off > 0
 327  5EF7              ;    then beam off --
 328  5EF7              ;         if beam off = 0 and pulse rate count = max count
 329  5EF7              ;            then pulse rest count = pulse rest
 330  5EF7              ; if pulse rest > 0 then pulse rest --
 331  5EF7              ;    if pulse rest = 0
 332  5EF7              ;       then pulse rate count = 0
 333  5EF7
 334  5EF7
 335  5EF7              ; counter logic
 336  5EF7              ;    if beam on count > 0 then beam on count --
 337  5EF7              ;    if beam on = 0 then
 338  5EF7              ;       if beam off count >0 then beam off count --
 339  5EF7              ;       if beam off count = 0 them
 340  5EF7              ;          if pulse rest count > 0 then pulse rest count --
 341  5EF7              ;             if reset count = 0 then pulse rate count = 0
 342  5EF7              ; shoting logic
 343  5EF7              ;    if pulse on count is 0 and pulse off count is 0 and rest count is 0
 344  5EF7              ;       then  if fire pressed is OK
 345  5EF7              ;                if not beam type
 346  5EF7              ;                   then pulse rate count ++
 347  5EF7              ;                        if pulse rate count < pulse max count
 348  5EF7              ;                           then pulse on count = pulse on time
 349  5EF7              ;                                pulse off count = pulse off time
 350  5EF7              ;                                pulse rest count = pulse rest time
 351  5EF7              ;                           else pulse rest count = pulse rest time
 352  5EF7              ;                                pulse rate count, pulse on count, pulse off count = 0
 353  5EF7              ;                   else pulse on count = $FF
 354  5EF7              ;                        pulse off time , rest time = 0
 355  5EF7
 356  5EF7              ;..................................................................................................................................
 357  5EF7                                      INCLUDE "./GameEngine/MainLoop.asm"
# file opened: ./GameEngine/MainLoop.asm
   1+ 5EF7
   2+ 5EF7                  DEFINE  MAINLOOP_COOL_LASERS
   3+ 5EF7                  DEFINE  MAINLOOP_ECM
   4+ 5EF7                  DEFINE  MAINLOOP_KEYBOARDSCAN
   5+ 5EF7              ;    DEFINE  MAINLOOP_DEMOSHIPS
   6+ 5EF7              ;   DEFINE  MAINLOOP_DEBUGMISSILE 1
   7+ 5EF7                  DEFINE  MAINLOOP_INPUTHANDLER
   8+ 5EF7                  DEFINE  MAINLOOP_EVENTHANDLER 1
   9+ 5EF7                  DEFINE  MAINLOOP_RECHARGE 1
  10+ 5EF7               ;   DEFINE  MAINLOOP_LAUNCHMISSILE
  11+ 5EF7                  DEFINE  MAINLOOP_UPDATEUNIVERSE 1
  12+ 5EF7                  DEFINE  MAINLOOP_DUST_RENDER 1
  13+ 5EF7                  DEFINE  MAINLOOP_SUN_RENDER 1
  14+ 5EF7                  DEFINE  MAINLOOP_PLANET_RENDER 1
  15+ 5EF7                  DEFINE  MAINLOOP_MODEL_RENDER    1
  16+ 5EF7                 ; DEFINE  MAINLOOP_SPAWN_ALWAYS_OUTSIDE_SAFEZONE 1
  17+ 5EF7                  DEFINE  MAINLOOP_WARP_ENABLED 1
  18+ 5EF7              ;.................................................................................................................................
  19+ 5EF7              ; Main loop
  20+ 5EF7              ;   bank in Maths
  21+ 5EF7              ;   do random number
  22+ 5EF7              ;   update lasers
  23+ 5EF7              ;   update ECM
  24+ 5EF7              ;   cool warp engines
  25+ 5EF7              ;   refreshKeyboard
  26+ 5EF7              ;   if keyboard blocking is set then skip the following
  27+ 5EF7              ;       test for view key
  28+ 5EF7              ;       test for pause key
  29+ 5EF7              ;       if paused then jump back to main loop
  30+ 5EF7              ;       test for movement keys
  31+ 5EF7              ;       handle movement
  32+ 5EF7              ;           have we got a cursor routine loaded
  33+ 5EF7              ;               if yes then select screen (self modifying code)
  34+ 5EF7              ;               call cursor routine (self modifying code)
  35+ 5EF7              ;   Is there a main loop mission set?
  36+ 5EF7              ;       if yes then jump to it
  37+ 5EF7              ;   Are we docked?
  38+ 5EF7              ;       if yes jump to UpdateLoop
  39+ 5EF7              ;       else    decrement Event Counter (cycles 0 to 255)
  40+ 5EF7              ;                if its zero then call LoopEventTriggered
  41+ 5EF7              ;                if Event Counter %00001111 is 0 then call RechargeShip
  42+ 5EF7              ;                if there are any player missiles left
  43+ 5EF7              ;                    if player launch missile flag set call LaunchPlayerMissile
  44+ 5EF7              ;                if WarpPressed call ProcessWarp
  45+ 5EF7              ;                if UpdateShipsControl is 0 call UpdateUniverseObjects
  46+ 5EF7              ;                if a ScreenTransition is forced, then jump to BruteForceChange
  47+ 5EF7              ;                if ViewUpdate is zero jump to UpdateLoop
  48+ 5EF7              ;                else
  49+ 5EF7              ;                   Check for Hyperspace countdown message
  50+ 5EF7              ;                   Display any message in queuye and update message timer
  51+ 5EF7              ;                   dec console refresh timer and if zero update console then reset timer, set console redraw flag
  52+ 5EF7              ;                   clear view port
  53+ 5EF7              ;                   Update and render sun
  54+ 5EF7              ;                   Update and render planet
  55+ 5EF7              ;                   Draw space dust on layer 1
  56+ 5EF7              ;                   if laser is on then draw laser sprites
  57+ 5EF7              ;                                       drain laser
  58+ 5EF7              ;                                  else hide laser sprites
  59+ 5EF7              ;                   draw ships in viewport
  60+ 5EF7              ;                   if console redraw flag set, call UpdateConsole
  61+ 5EF7              ;UpdateLoop:        if ScreenLoopJp is not zoer
  62+ 5EF7              ;                       call screen loop hook (self modifying code)
  63+ 5EF7              ;                   switch docked flag:  StateCompletedLaunch,   goto WeHaveCompletedLaunch (these all then jump to DoubleBufferCheck)
  64+ 5EF7              ;                                        StateInTransition,      goto WeAreInTransition
  65+ 5EF7              ;                                        StateHJumping,          goto WeAreHJumping
  66+ 5EF7              ;                                        StateHEntering,         goto WeAreHEntering
  67+ 5EF7              ;                                        StateCompletedHJump,    goto WeHaveCompletedHJump
  68+ 5EF7              ;                   else goto Double BufferCheck
  69+ 5EF7              ;DoubleBufferCheck  Flip buffers if double buffered
  70+ 5EF7              ;                   if ScreenTransitionForced set
  71+ 5EF7              ;BruteForceChange:      then call SetScreenA
  72+ 5EF7              ;                   jump back to main loop
  73+ 5EF7              ;.................................................................................................................................
  74+ 5EF7              MainLoop:	    MMUSelectMathsBankedFns                                         ; make sure we are in maths routines in case a save paged out
  74+ 5EF7 ED 91 50 66 >                     nextreg MathsBankedFnsMMU, BankMathsBankedFns
  75+ 5EFB CD EC 85     .doRandom:      call    doRandom                                                ; redo the seeds every frame
  76+ 5EFE              .doLasers:
  77+ 5EFE                              IFDEF LASER_V2
  78+ 5EFE CD 9D 60                             call    LaserBeamV2
  79+ 5F01                              ELSE
  80+ 5F01 ~                                    UpdateLaserOnCounter
  81+ 5F01 ~                                    UpdateLaserOffCounter
  82+ 5F01 ~                                    UpdateLaserRestCounter
  83+ 5F01 ~                                    CoolLasers
  84+ 5F01                              ENDIF
  85+ 5F01              ;...............ECM
  86+ 5F01              .doECM:
  87+ 5F01                              IFDEF MAINLOOP_ECM
  88+ 5F01                                      INCLUDE "./GameEngine/MainLoop_ECM.asm"
# file opened: ././GameEngine/MainLoop_ECM.asm
   1++5F01 3A 66 80     .ReducePlayerECM:       ld      a,(PlayerECMActiveCount)
   2++5F04 A7                                   and     a
   3++5F05 CA 17 5F                             jp      z, .DonePlayerECM
   4++5F08 3D                                   dec     a
   5++5F09 32 66 80                             ld      (PlayerECMActiveCount),a
   6++5F0C 3A 55 82                             ld      a,(PlayerEnergy)
   7++5F0F A7                                   and     a
   8++5F10 CA 17 5F                             jp      z, .DonePlayerECM
   9++5F13 3D                                   dec     a
  10++5F14 32 55 82                             ld      (PlayerEnergy),a
  11++5F17              .DonePlayerECM:
  12++5F17 3A CB 7E     .ReduceCommonECM:       ld      a,(ECMCountDown)
  13++5F1A A7                                   and     a
  14++5F1B CA 22 5F                             jp      z, .DoneCommonECM
  15++5F1E 3D                                   dec     a
  16++5F1F 32 CB 7E                             ld      (ECMCountDown),a
  17++5F22              .DoneCommonECM:
  18++5F22
# file closed: ././GameEngine/MainLoop_ECM.asm
  89+ 5F22                              ENDIF
  90+ 5F22              ;...............Warp
  91+ 5F22              .doWarp:
  92+ 5F22                              IFDEF MAINLOOP_WARP_ENABLED
  93+ 5F22 3A 9C 81                             ld      a,(WarpCooldown)
  94+ 5F25 A7                                   and     a
  95+ 5F26 CA 2D 5F                             jp      z,.AlreadyCool
  96+ 5F29 3D                                   dec     a
  97+ 5F2A 32 9C 81                             ld      (WarpCooldown),a
  98+ 5F2D              .AlreadyCool
  99+ 5F2D                              ENDIF
 100+ 5F2D              ;...............Keyboard
 101+ 5F2D              .doKeyboard
 102+ 5F2D                              IFDEF MAINLOOP_KEYBOARDSCAN
 103+ 5F2D                                      MMUSelectKeyboard
 103+ 5F2D ED 91 57 65 >                     nextreg KeyboardMMU,       BankKeyboard
 104+ 5F31 CD 03 E1                             call    scan_keyboard                                           ; perform the physical input scan
 105+ 5F34                              ENDIF
 106+ 5F34              ;.. This bit allows cycling of ships on universe 0 in demo.........................................................................
 107+ 5F34                              IFDEF MAINLOOP_DEMOSHIPS
 108+ 5F34 ~            DemoOfShipsDEBUG:       call    TestForNextShip
 109+ 5F34                              ENDIF
 110+ 5F34              ;.. Check if keyboard scanning is allowed by screen. If this is set then skip all keyboard and AI..................................
 111+ 5F34 3E 00        InputBlockerCheck:      ld      a,$0
 112+ 5F36                              IFDEF MAINLOOP_INPUTHANDLER
 113+ 5F36                                      JumpIfAEqNusng $01, SkipInputHandlers                           ; as we are in a transition the whole update AI is skipped
 113+ 5F36 FE 01       >                        cp     $01
 113+ 5F38 CA 6F 5F    >                        jp      z,SkipInputHandlers
 114+ 5F3B                                      JumpIfMemTrue TextInputMode, SkipInputHandlers                  ; in input mode all keys are processed by input
 114+ 5F3B 3A C0 81    >                        ld      a,(TextInputMode)
 114+ 5F3E A7          >                        and     a
 114+ 5F3F CA 6F 5F    >                        jp      z, SkipInputHandlers
 115+ 5F42 CD 32 6B                             call    ViewKeyTest
 116+ 5F45 CD 50 68                             call    TestPauseMode
 117+ 5F48 3A 95 81                             ld      a,(GamePaused)
 118+ 5F4B FE 00                                cp      0
 119+ 5F4D C2 F7 5E                             jp      nz,MainLoop
 120+ 5F50                                      MMUSelectKeyboard
 120+ 5F50 ED 91 57 65 >                     nextreg KeyboardMMU,       BankKeyboard
 121+ 5F54 CD 6C E3                             call    MovementKeyTest
 122+ 5F57              ;.. Process cursor keys for respective screen if the address is 0 then we skill just skip movement.................................
 123+ 5F57                              ENDIF
 124+ 5F57 3A 6E 5F     HandleMovement:         ld      a,(CallCursorRoutine+2)
 125+ 5F5A                                      JumpIfAIsZero     TestAreWeDocked
 125+ 5F5A A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
 125+ 5F5B CA 6F 5F    >                        jp	    z, TestAreWeDocked
 126+ 5F5E              ;.. Handle Special Mission logic  .................................................................................................
 127+ 5F5E 3E 00        HandleMissionLogic:     ld      a,$00                                                   ; if we have a bank then we have a mission
 128+ 5F60 A7                                   and     a                                                       ;
 129+ 5F61 CA 67 5F                             jp      z,HandleBankSelect                                      ;
 130+ 5F64              .MissionLogic:          DISPLAY "TODO Add MMUSelectMissionBankA"                                          ; so select mission bank
 131+ 5F64 CD 00 00     MissionJump:            call    $0000                                                   ; and call custom logic routined
 132+ 5F67              ;.. Handle displaying correct screen ..............................................................................................
 133+ 5F67 3E 00        HandleBankSelect:       ld      a,$00
 134+ 5F69                                      MMUSelectScreenA
 134+ 5F69 ED 92 56    >                     nextreg ScreenBankMMU,		a
 135+ 5F6C CD 00 00     CallCursorRoutine:      call    $0000
 136+ 5F6F              ;.. Check to see if we are docked as if we are (or are docking.launching then no AI/Ship updates occur.............................
 137+ 5F6F              ;.. Also end up here if we have the screen input blocker set
 138+ 5F6F              ;DEFUNCT?EngineSounds:       ;HasEngineSoundChanged
 139+ 5F6F              ;DEFUNCT?                    ;call    nz,UpdateEngineSound
 140+ 5F6F              SkipInputHandlers:
 141+ 5F6F              ;.. For Docked flag its - 0 = in free space, FF = Docked, FE transition, FD = Setup open space and transition to not docked
 142+ 5F6F              TestAreWeDocked:        JumpIfMemNeNusng DockedFlag, StateNormal, UpdateLoop            ; if if we are in free space do universe updateelse we skip it. As we are also in dock/transition then no models should be updated so we dont; need to draw
 142+ 5F6F 3A 94 81    >                        ld  a,(DockedFlag)
 142+ 5F72 FE 00       >                        cp  StateNormal
 142+ 5F74 C2 1B 60    >                        jp  nz,UpdateLoop
 143+ 5F77                              IFDEF MAINLOOP_EVENTHANDLER
 144+ 5F77 21 9D 81     .UpdateEventCounter:    ld      hl,EventCounter                                         ; evnery 256 cycles we do a trigger test
 145+ 5F7A 35                                   dec     (hl)
 146+ 5F7B CC 67 61     .ProcessEvent:          call    z,LoopEventTriggered
 147+ 5F7E                              ENDIF
 148+ 5F7E                              IFDEF MAINLOOP_RECHARGE
 149+ 5F7E 3A 9D 81     .ProcessRecharge:       ld      a,(EventCounter)
 150+ 5F81 E6 07                                and     7
 151+ 5F83 CC 6A 84                             call    z, RechargeShip
 152+ 5F86                              ENDIF
 153+ 5F86                              IFDEF MAINLOOP_LAUNCHMISSILE
 154+ 5F86 ~            .PlayerMissileLaunch:   AnyMissilesLeft
 155+ 5F86 ~                                    jr      z,.NoMissiles                                           ; just in case last one gets destroyed
 156+ 5F86 ~                                    IsMissileLaunchFlagged
 157+ 5F86 ~                                    call    z,  LaunchPlayerMissile
 158+ 5F86 ~            .NoMissiles
 159+ 5F86                              ENDIF
 160+ 5F86              ;.. If we get here then we are in game running mode regardless of which screen we are on, so update AI.............................
 161+ 5F86              ;.. we do one universe slot each loop update ......................................................................................
 162+ 5F86              ;.. First update Sun...............................................................................................................
 163+ 5F86              ;... Warp or in system jump thsi moves everything by 1 on the high (sign) byte away or towards ship based on their z axis only
 164+ 5F86              ;... its not a true move in the right direction, more a z axis warp
 165+ 5F86              CheckForWarp:           CallIfMemTrue  WarpPressed, ProcessWarp
 165+ 5F86 3A C3 81    >                        ld      a,(WarpPressed)
 165+ 5F89 A7          >                        and     a
 165+ 5F8A CC 66 62    >                        call    z, ProcessWarp
 166+ 5F8D 3E 00        UpdateShipsControl:     ld      a,0
 167+ 5F8F A7                                   and     a
 168+ 5F90                                      IFDEF MAINLOOP_UPDATEUNIVERSE
 169+ 5F90 CC B5 64     .UpdateShips:               call    z, UpdateUniverseObjects
 170+ 5F93                                      ENDIF
 171+ 5F93                                      JumpIfMemNeNusng ScreenTransitionForced, $FF, BruteForceChange  ; if we docked then a transition would have been forced
 171+ 5F93 3A 37 6A    >                        ld  a,(ScreenTransitionForced)
 171+ 5F96 FE FF       >                        cp  $FF
 171+ 5F98 C2 5A 62    >                        jp  nz,BruteForceChange
 172+ 5F9B 3E 00        CheckIfViewUpdate:      ld      a,$00                                                   ; if this is set to a view number then we process a view
 173+ 5F9D                                      JumpIfAIsZero  UpdateLoop                                       ; This will change as more screens are added TODO
 173+ 5F9D A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
 173+ 5F9E CA 1B 60    >                        jp	    z, UpdateLoop
 174+ 5FA1              ;..Processing a view...............................................................................................................
 175+ 5FA1              ;..Display any message ............................................................................................................
 176+ 5FA1              .CheckHyperspaceMessage:AnyHyperSpaceMacro .HandleMessages
 176+ 5FA1 2A 9A 81    >                        ld      hl,(InnerHyperCount)
 176+ 5FA4 7C          >                        ld      a,h
 176+ 5FA5 B5          >                        or      l
 176+ 5FA6 28 03       >                        jr      z, .HandleMessages
 177+ 5FA8 CD 52 76                             call    HyperSpaceMessage
 178+ 5FAB              .HandleMessages:        AnyMessagesMacro  .NoMessages
 178+ 5FAB 3A D5 7E    >                        ld      a, (MessageCount)
 178+ 5FAE A7          >                        and     a
 178+ 5FAF 28 06       >                        jr      z, .NoMessages
 179+ 5FB1 CD 34 76                             call    DisplayCurrentMessage
 180+ 5FB4 CD 13 76                             call    UpdateMessageTimer
 181+ 5FB7
 182+ 5FB7              .NoMessages:            MMUSelectLayer2
 182+ 5FB7 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 183+ 5FBB 21 BE 81     CheckConsoleReDraw:     ld      hl,ConsoleRefreshCounter
 184+ 5FBE 35                                   dec     (hl)
 185+ 5FBF CA CF 5F                             jp      z,.ConsoleDrawBuffer1                                   ; when it hits 0 then frame 1 of console is drawm
 186+ 5FC2 FA CD 5F                             jp      m,.ConsoleDrawBuffer2                                   ; need top also do next frame for double buffering
 187+ 5FC5              .ConsoleNotDraw:        SetMemFalse ConsoleRedrawFlag
 187+ 5FC5 3E FF       >                        ld      a,$FF
 187+ 5FC7 32 BF 81    >                        ld      (ConsoleRedrawFlag),a
 188+ 5FCA C3 D9 5F                             jp      .JustViewPortCLS
 189+ 5FCD 36 05        .ConsoleDrawBuffer2:    ld      (hl),ConsoleRefreshInterval
 190+ 5FCF              .ConsoleDrawBuffer1:    SetMemTrue ConsoleRedrawFlag
 190+ 5FCF AF          >                        xor     a
 190+ 5FD0 32 BF 81    >                        ld      (ConsoleRedrawFlag),a
 191+ 5FD3 CD 3A E3                             call    l2_cls                                                  ; Clear layer 2 for graphics
 192+ 5FD6 C3 DC 5F                             jp      .ViewPortCLSDone
 193+ 5FD9 CD 7E E2     .JustViewPortCLS:       call   l2_cls_upper_two_thirds
 194+ 5FDC              .ViewPortCLSDone:
 195+ 5FDC                                      MMUSelectLayer1
 195+ 5FDC ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 196+ 5FE0              .UpdateSun:
 197+ 5FE0                                      IFDEF   MAINLOOP_SUN_RENDER
 198+ 5FE0                                          MMUSelectSun
 198+ 5FE0 ED 91 56 53 >                     nextreg SunMMU,            BankSunData
 199+ 5FE4 CD 8B C7                                 call    SunUpdateAndRender
 200+ 5FE7                                      ENDIF
 201+ 5FE7              .UpdatePlanet:          IFDEF   MAINLOOP_PLANET_RENDER
 202+ 5FE7                                          MMUSelectPlanet
 202+ 5FE7 ED 91 56 54 >                     nextreg PlanetMMU,         BankPlanetData
 203+ 5FEB CD 90 C9                                 call    PlanetUpdateAndRender
 204+ 5FEE                                      ENDIF
 205+ 5FEE              ;..Later this will be done via self modifying code to load correct stars routine for view..........................................
 206+ 5FEE 3E DF        DrawDustForwards:       ld     a,$DF
 207+ 5FF0 32 22 E4                             ld     (line_gfx_colour),a
 208+ 5FF3              DustUpdateBank:         MMUSelectViewFront                                              ; This needs to be self modifying
 208+ 5FF3 ED 91 56 3E >                     nextreg ScreenBankMMU,		BankFrontView
 209+ 5FF7                                      IFDEF   MAINLOOP_DUST_RENDER
 210+ 5FF7 CD 3D 7C     DustUpdateRoutine:          call   DustForward                                              ; This needs to be self modifying
 211+ 5FFA                                      ENDIF
 212+ 5FFA              ;ProcessSun:             call    DrawForwardSun
 213+ 5FFA                                      IFDEF   LASER_V2
 214+ 5FFA              ProcessLaser:               MMUSelectSpriteBank
 214+ 5FFA ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
 215+ 5FFE                                          JumpIfMemFalse LaserBeamOn, .NoLaser
 215+ 5FFE 3A 70 82    >                        ld      a,(LaserBeamOn)
 215+ 6001 A7          >                        and     a
 215+ 6002 C2 0E 60    >                        jp      nz, .NoLaser
 216+ 6005 CD 36 E5     .FireLaser:                 call    sprite_laser_show
 217+ 6008 CD 2E 83                                 call    LaserDrainSystems
 218+ 600B C3 11 60                                 jp      ProcessPlanet
 219+ 600E CD 05 E7     .NoLaser:                   call    sprite_laser_hide
 220+ 6011                                      ELSE
 221+ 6011 ~            ProcessLaser:               ld      a,(CurrLaserPulseRate)
 222+ 6011 ~                                        JumpIfAIsNotZero .CheckForPulse
 223+ 6011 ~                                        JumpIfMemFalse FireLaserPressed, .NoLaser
 224+ 6011 ~                                        jp      .FireLaser
 225+ 6011 ~            .CheckForPulse:             JumpIfMemZero CurrLaserPulseOnCount, .NoLaser
 226+ 6011 ~            .FireLaser:                 MMUSelectSpriteBank
 227+ 6011 ~                                        call    sprite_laser_show
 228+ 6011 ~                                        call    LaserDrainSystems
 229+ 6011 ~                                        jp      ProcessPlanet
 230+ 6011 ~            .NoLaser:                   MMUSelectSpriteBank
 231+ 6011 ~                                        call    sprite_laser_hide
 232+ 6011                                      ENDIF
 233+ 6011              ProcessPlanet:
 234+ 6011                                      IFDEF   MAINLOOP_MODEL_RENDER
 235+ 6011 CD AF 66     ProcessShipModels:          call   DrawForwardShips                                     ; Draw all ships and bodies in system (this may need to be self modifying)
 236+ 6014                                      ENDIF
 237+ 6014                                      ; add in loop so we only update every 4 frames, need to change CLS logic too,
 238+ 6014                                      ; every 4 frames needs to do 2 updates so updates both copies of buffer
 239+ 6014                                      ; now will CLS bottom thrid
 240+ 6014                                      CallIfMemTrue ConsoleRedrawFlag, UpdateConsole
 240+ 6014 3A BF 81    >                        ld      a,(ConsoleRedrawFlag)
 240+ 6017 A7          >                        and     a
 240+ 6018 CC 94 6D    >                        call    z, UpdateConsole
 241+ 601B              ;..If we were not in views then we were in display screens/menus...................................................................
 242+ 601B              UpdateLoop:             JumpIfMemZero ScreenLoopJP+1,LoopRepeatPoint
 242+ 601B 3A 28 60    >                        ld  a,(ScreenLoopJP+1)
 242+ 601E A7          >                        and a
 242+ 601F CA 2A 60    >                        jp  z,LoopRepeatPoint
 243+ 6022              ;..This is the screen update routine for menus.....................................................................................
 244+ 6022              ;.. Also used by transition routines
 245+ 6022 3E 00        ScreenLoopBank:         ld      a,$0
 246+ 6024                                      MMUSelectScreenA
 246+ 6024 ED 92 56    >                     nextreg ScreenBankMMU,		a
 247+ 6027 CD 00 00     ScreenLoopJP:           call    $0000
 248+ 602A 3A 94 81     LoopRepeatPoint:        ld      a,(DockedFlag)
 249+ 602D                                      ; Could optimise this to a jp hl lookup table
 250+ 602D              HandleLaunched:         JumpIfAEqNusng  StateCompletedLaunch,   WeHaveCompletedLaunch
 250+ 602D FE FD       >                        cp     StateCompletedLaunch
 250+ 602F CA 49 60    >                        jp      z,WeHaveCompletedLaunch
 251+ 6032                                      JumpIfAEqNusng  StateInTransition,      WeAreInTransition
 251+ 6032 FE FE       >                        cp     StateInTransition
 251+ 6034 CA 3F 62    >                        jp      z,WeAreInTransition
 252+ 6037                                      JumpIfAEqNusng  StateHJumping,          WeAreHJumping
 252+ 6037 FE FC       >                        cp     StateHJumping
 252+ 6039 CA 86 60    >                        jp      z,WeAreHJumping
 253+ 603C                                      JumpIfAEqNusng  StateHEntering,         WeAreHEntering
 253+ 603C FE FB       >                        cp     StateHEntering
 253+ 603E CA 94 60    >                        jp      z,WeAreHEntering
 254+ 6041                                      JumpIfAEqNusng  StateCompletedHJump,    WeHaveCompletedHJump
 254+ 6041 FE FA       >                        cp     StateCompletedHJump
 254+ 6043 CA 29 61    >                        jp      z,WeHaveCompletedHJump
 255+ 6046 C3 3F 62                             jp      DoubleBufferCheck
 256+ 6049              ;-- Player launched from station, moved routines from eliteMext.asm to remove call and simplify code
 257+ 6049 CD F7 60     WeHaveCompletedLaunch:  call    InitialiseLocalUniverse             ; intiailise local bubble and set us as in flight
 258+ 604C              .GenerateSun:           MMUSelectSun
 258+ 604C ED 91 56 53 >                     nextreg SunMMU,            BankSunData
 259+ 6050 CD F9 C2                             call    CreateSunLaunched                   ; create the local sun and set position based on seed
 260+ 6053              .GeneratePlanet:        MMUSelectPlanet
 260+ 6053 ED 91 56 54 >                     nextreg PlanetMMU,         BankPlanetData
 261+ 6057 CD 0F C6                             call    CreatePlanetLaunched
 262+ 605A CD C0 84                             call    ClearUnivSlotList                   ; slot list is clear to 0 is gauranteed next slot
 263+ 605D 3E 0D        .GenerateSpaceStation:  ld      a,CoriloisStation
 264+ 605F                                      MMUSelectSpaceStation                       ; Switch to space station (Universe bank 0)
 264+ 605F ED 91 56 46 >                     nextreg SpaceStationMMU,   BankSpaceStationData
 265+ 6063 CD 5E C8                             call    UnivSelSpaceStationType
 266+ 6066 FD 26 00                             ld      iyh,0
 267+ 6069 FD 6F                                ld      iyl,a
 268+ 606B CD 05 62                             call    SpawnSpaceStation                   ; Sets position that we have to overwrite in next step
 269+ 606E CD 75 C9     .BuiltStation:          call    UnivSpawnSpaceStationLaunched       ; replaced with the 0,0,-10000 version ResetStationLaunch
 270+ 6071 3E 00        .NowInFlight:           ld      a,StateNormal
 271+ 6073 32 94 81                             ld      (DockedFlag),a
 272+ 6076                                      ForceTransition ScreenFront
 272+ 6076 3E 09       >                        ld      a,ScreenFront
 272+ 6078 32 37 6A    >                        ld      (ScreenTransitionForced), a
 273+ 607B 3E FF                                ld      a,$FF
 274+ 607D 32 06 B1                             ld      (LAST_DELTA),a                      ; force sound update in interrupt
 275+ 6080 CD 58 83                             call    ResetPlayerShip
 276+ 6083 C3 3F 62                             jp      DoubleBufferCheck                   ; Then move through to the rest of the loop
 277+ 6086 CD 5C C2     WeAreHJumping:          call    hyperspace_Lightning
 278+ 6089 DA 3F 62                             jp      c,DoubleBufferCheck
 279+ 608C 3E FB                                ld      a,StateHEntering
 280+ 608E 32 94 81                             ld      (DockedFlag),a
 281+ 6091 C3 3F 62                             jp      DoubleBufferCheck
 282+ 6094 3E FA        WeAreHEntering:         ld      a,StateCompletedHJump
 283+ 6096 32 94 81                             ld      (DockedFlag),a
 284+ 6099 C3 3F 62                             jp      DoubleBufferCheck
 285+ 609C              ;--
 286+ 609C              LaunchedFromStation:
 287+ 609C C9                                   ret
 288+ 609D              ; laser duration goign below 0 for some reason
 289+ 609D              ; if laser is on
 290+ 609D              ;    if laser duration = master duration - do sfx
 291+ 609D              ;    laser duration ---
 292+ 609D              ;    if laser duration = 0
 293+ 609D              ;          **should set beam off***
 294+ 609D              ;       curr burst count --
 295+ 609D              ;       if busrt count = 0
 296+ 609D              ;          set cooldown to post pulserests
 297+ 609D              ;       else
 298+ 609D              ;          set cooldown to 0
 299+ 609D              ;          pause = pulse off time
 300+ 609D              ;    else
 301+ 609D              ;       return
 302+ 609D              ;  else
 303+ 609D              ;     if burst count <> 0
 304+ 609D              ;        current burst pause --
 305+ 609D              ;        return if not zero
 306+ 609D              ;        set laser beam on
 307+ 609D              ;        return
 308+ 609D              ;      else
 309+ 609D              ;         cooldown-- if not zero
 310+ 609D
 311+ 609D              LaserBeamV2:            JumpIfMemFalse LaserBeamOn, .LaserIsOff                          ; If laser is not on then skip
 311+ 609D 3A 70 82    >                        ld      a,(LaserBeamOn)
 311+ 60A0 A7          >                        and     a
 311+ 60A1 C2 D3 60    >                        jp      nz, .LaserIsOff
 312+ 60A4 21 6D 82     .LaserIsOn:             ld          hl,CurrLaserPulseOnTime
 313+ 60A7 3A 71 82                             ld          a,(CurrLaserDuration)
 314+ 60AA BE                                   cp          (hl)                                                ; if duration just started
 315+ 60AB                                      ;call        z, SoundLaserFiring                                ; queue sound
 316+ 60AB 3D                                   dec         a
 317+ 60AC 32 71 82                             ld          (CurrLaserDuration),a                               ; if duration is 0
 318+ 60AF                                      ;break
 319+ 60AF                                      ReturnIfANotZero                                                ; the do the end of pulse
 319+ 60AF A7          >                        and     a
 319+ 60B0 C0          >                        ret     nz
 320+ 60B1              .EndOfPulse:            SetMemFalse LaserBeamOn
 320+ 60B1 3E FF       >                        ld      a,$FF
 320+ 60B3 32 70 82    >                        ld      (LaserBeamOn),a
 321+ 60B6 3A 75 82                             ld          a,(CurrLaserBurstCount)
 322+ 60B9 3D                                   dec         a
 323+ 60BA 32 75 82                             ld          (CurrLaserBurstCount),a                             ; if we have run out of
 324+ 60BD                                      JumpIfAIsNotZero    .SkipBurstEnd                               ; pulses then
 324+ 60BD A7          >                        and     a
 324+ 60BE C2 C8 60    >                        jp	    nz,.SkipBurstEnd
 325+ 60C1              .EndOfBurst:            ldCopyByte  CurrLaserPulseRest,  CurrentCooldown                ; main cool down
 325+ 60C1 3A 6F 82    >                        ld       a,(CurrLaserPulseRest)
 325+ 60C4 32 73 82    >                        ld       (CurrentCooldown),a
 326+ 60C7 C9                                   ret
 327+ 60C8              .SkipBurstEnd:          SetMemZero  CurrentCooldown                                     ; else its just pulse
 327+ 60C8 AF          >                        xor     a
 327+ 60C9 32 73 82    >                        ld      (CurrentCooldown),a
 328+ 60CC                                      ldCopyByte  CurrLaserPulseOffTime,  CurrentBurstPause           ; cooldown
 328+ 60CC 3A 6E 82    >                        ld       a,(CurrLaserPulseOffTime)
 328+ 60CF 32 72 82    >                        ld       (CurrentBurstPause),a
 329+ 60D2 C9           .SkipPulseEnd:          ret
 330+ 60D3 3A 75 82     .LaserIsOff:            ld          a,(CurrLaserBurstCount)
 331+ 60D6                                      JumpIfAIsZero .FullCool
 331+ 60D6 A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
 331+ 60D7 CA ED 60    >                        jp	    z, .FullCool
 332+ 60DA 3A 72 82     .BurstCool:             ld          a,(CurrentBurstPause)
 333+ 60DD 3D                                   dec         a
 334+ 60DE 32 72 82                             ld          (CurrentBurstPause),a
 335+ 60E1 C0                                   ret         nz
 336+ 60E2                                      SetMemTrue  LaserBeamOn
 336+ 60E2 AF          >                        xor     a
 336+ 60E3 32 70 82    >                        ld      (LaserBeamOn),a
 337+ 60E6                                      ldCopyByte  CurrLaserPulseOnTime, CurrLaserDuration
 337+ 60E6 3A 6D 82    >                        ld       a,(CurrLaserPulseOnTime)
 337+ 60E9 32 71 82    >                        ld       (CurrLaserDuration),a
 338+ 60EC C9                                   ret
 339+ 60ED 3A 73 82     .FullCool:              ld          a,(CurrentCooldown)
 340+ 60F0                                      ReturnIfAIsZero
 340+ 60F0 A7          >                        and     a
 340+ 60F1 C8          >                        ret     z
 341+ 60F2 3D                                   dec         a
 342+ 60F3 32 73 82                             ld          (CurrentCooldown),a
 343+ 60F6 C9                                   ret
 344+ 60F7
 345+ 60F7              ;;called from LaunchedFromStation  & WeHaveCompletedHJump to re-seed the system
 346+ 60F7              ;-- Get seed for galaxy system and copy into working vars for system and galaxy, correct post jump fuel, force to front view, set extra vessels to spawn to 0 and mark as undocked
 347+ 60F7 3A 45 80     InitialiseLocalUniverse:ld      a,(Galaxy)                      ; DEBUG as galaxy n is not working
 348+ 60FA                                      MMUSelectGalaxyA
 348+ 60FA ED 92 57    >                     nextreg GalaxyDataMMU,     a
 349+ 60FD 2A 5A 80                             ld      hl,(TargetSystemX)
 350+ 6100 22 58 80                             ld      (PresentSystemX),hl
 351+ 6103 44                                   ld      b,h
 352+ 6104 4D                                   ld      c,l
 353+ 6105                                      CorrectPostJumpFuel
 353+ 6105 3A 93 85    >                        ld      a,(Fuel)
 353+ 6108 21 7A 80    >                        ld      hl,Distance
 353+ 610B 96          >                        sub     a,(hl)
 353+ 610C 32 93 85    >                        ld      (Fuel),a
 354+ 610F                                      ForceTransition ScreenFront            ; This will also trigger stars
 354+ 610F 3E 09       >                        ld      a,ScreenFront
 354+ 6111 32 37 6A    >                        ld      (ScreenTransitionForced), a
 355+ 6114 3E 00                                ld      a,$00
 356+ 6116 32 5F 80                             ld      (ExtraVesselsCounter),a
 357+ 6119                                      DISPLAY "TODO: Check callers as they may be doign this as a duplicate"
 358+ 6119 32 94 81                             ld      (DockedFlag),a
 359+ 611C CD 6F F8                             call    GalaxyGenerateDesc             ; bc  holds new system to generate system
 360+ 611F CD 6A 86                             call    copy_working_to_system         ; and propogate copies of seeds
 361+ 6122 CD 62 86                             call    copy_working_to_galaxy         ; .
 362+ 6125 CD 50 87                             call    get_planet_data_working_seed   ; sort out system data
 363+ 6128 C9                                   ret
 364+ 6129
 365+ 6129
 366+ 6129              ; to create planet position
 367+ 6129              ;       take seed 2 AND %00000011 + 3 + carry and store in z sign
 368+ 6129              ;       take result and divide by 2 then store in x and y sign
 369+ 6129              ;
 370+ 6129              ;       take seed 4 AND %00000111 OR %10000001 and store in z sign
 371+ 6129              ;       take seed 6 AND %00000011 and store in x sign and y sign
 372+ 6129              ;       set pitch and roll to 0
 373+ 6129              ;
 374+ 6129              ;
 375+ 6129              ;
 376+ 6129              ; --- At the end of a hyperspace jump we have to reset compass, market universe sun and planets etc
 377+ 6129 CD F7 60     WeHaveCompletedHJump:   call    InitialiseLocalUniverse
 378+ 612C                                      ;call    GetDigramGalaxySeed           ; .
 379+ 612C                                      MMUSelectStockTable                    ; .
 379+ 612C ED 91 57 37 >                     nextreg StockTableMMU,     BankStockTable
 380+ 6130 CD AA E0                             call    generate_stock_market          ; generate new prices
 381+ 6133 CD C0 84                             call    ClearUnivSlotList              ; clear out any ships
 382+ 6136 CD 58 83                             call    ResetPlayerShip
 383+ 6139                                      HalveFugitiveStatus                    ; halves status and brings bit into carry
 383+ 6139 21 67 80    >                        ld      hl,FugitiveInnocentStatus
 383+ 613C CB 3E       >                        srl     (hl)
 384+ 613E                                      MMUSelectSun
 384+ 613E ED 91 56 53 >                     nextreg SunMMU,            BankSunData
 385+ 6142 CD D5 C2                             call    CreateSun                      ; create the local sun and set position based on seed
 386+ 6145                                      MMUSelectPlanet
 386+ 6145 ED 91 56 54 >                     nextreg PlanetMMU,         BankPlanetData
 387+ 6149 CD C7 C5                             call    CreatePlanet
 388+ 614C                          DISPLAY "TODO:  GENEATE SUB AND PLANET POS"
 389+ 614C              ;TODO                        call    generateSunAndPlanetPos        ; uses current carry state too
 390+ 614C              ;TODO.CreateSun:             call    SetSunSlot
 391+ 614C              ; PROBABLY NOT NEEDED NOW                      MMUSelectShipBank1
 392+ 614C              ; PROBABLY NOT NEEDED NOW                      call    GetShipBankId
 393+ 614C              ;;SELECT CORRECT BANK                        MMUSelectUniverseN 0
 394+ 614C              ;;TODO                        call    CopyBodyToUniverse
 395+ 614C              ;;TODO                        call    CreateSun
 396+ 614C              ;;TODOCreatePlanet:          call    SetPlanetSlot
 397+ 614C              ;;TODO                       MMUSelectShipBank1
 398+ 614C              ;;TODO                    eliteb       call    GetShipBankId
 399+ 614C              ;;TODO                       MMUSelectUniverseBankN 1
 400+ 614C              ;;TODO                       call    CopyBodyToUniverse
 401+ 614C                                      SetMemFalse DockedFlag
 401+ 614C 3E FF       >                        ld      a,$FF
 401+ 614E 32 94 81    >                        ld      (DockedFlag),a
 402+ 6151 3E FF        .TriggerEngineSound:    ld      a,$FF
 403+ 6153 32 06 B1                             ld      (LAST_DELTA),a              ; force sound update in interrupt
 404+ 6156 C3 3F 62                             jp  DoubleBufferCheck
 405+ 6159
 406+ 6159
 407+ 6159 3A 64 61     WarpSFX:                ld      a,(WarpRoutineAddr+1)
 408+ 615C A7                                   and     a
 409+ 615D C8                                   ret     z
 410+ 615E 3E 00        WarpMMUBank:            ld      a,$00
 411+ 6160                                      MMUSelectScreenA
 411+ 6160 ED 92 56    >                     nextreg ScreenBankMMU,		a
 412+ 6163 CD 00 00     WarpRoutineAddr:        call    0000
 413+ 6166 C9                                   ret
 414+ 6167
 415+ 6167              ;--- From here is the new simplified logic. This uses the current spawn table
 416+ 6167              ;--- Events such as jumping to a system, ending up in which space,
 417+ 6167              ;--- special mission events
 418+ 6167              ;--- We will need actually two tables, 1 for in station range 1 for not else flipping tables on the Z boundary
 419+ 6167              ;--- Would be difficult
 420+ 6167              ;--- load the table to work from. This then leaves all teh logic configurable
 421+ 6167              LoopEventTriggered:     ; for now just do spawn
 422+ 6167 CD 6B 61                             call        SpawnEvent
 423+ 616A C9                                   ret ; implicit ret from jp to be added later
 424+ 616B
 425+ 616B
 426+ 616B                  DEFINE  SPAWN_TABLE_SELECT   1
 427+ 616B                  DEFINE  SPAWN_GENERATE_COUNT 1
 428+ 616B                  DEFINE  SPAWN_LOOP           1
 429+ 616B
 430+ 616B              ;--- Handle spawn event --------------------------------------------
 431+ 616B              SpawnEvent:             IFDEF SPAWN_SHIP_DISABLED
 432+ 616B ~                                        DISPLAY "TODO: Disabled spawing for diagnostics"
 433+ 616B ~                                        ret
 434+ 616B                                      ENDIF
 435+ 616B                                      ;break
 436+ 616B CD 71 85                             call    FindNextFreeSlotInC                 ; set c= slot number, if we cant find a slot                   Stack     > 0
 437+ 616E D8                                   ret     c                                   ; then may as well just skip routine
 438+ 616F              ;.. Found a slot free so can spawn, now this define controls filtering of what can be spawned near a safe zone
 439+ 616F                                      IFDEF   MAINLOOP_SPAWN_ALWAYS_OUTSIDE_SAFEZONE
 440+ 616F ~                                        SetMemFalse SpaceStationSafeZone        ; This if def allows spawning inside space station safe zone
 441+ 616F                                      ENDIF
 442+ 616F              ;.. A slot is free for a spawn to occur so select a spawn table and data
 443+ 616F                          DISPLAY "TODO: Optimise spawn so it saves off spawn data where there are more than one to do"
 444+ 616F                          DISPLAY "TODO: Optimise spawn and counts down in loop to avoid a stall where it spawns 3 ships on one game cycle"
 445+ 616F CD E5 63     .SpawnIsPossible:       call    SelectSpawnTable                    ; ix = correct row in spawn table, indexed on the random value found on FreeSpaceSpawnTableLow
 446+ 6172 CD D5 63     .GetSpawnDetails:       call    SelectSpawnTableData                ; get table data, b = max ships to spawm, de = rank table address, hl = address of spawn handler code
 447+ 6175                          DISPLAY "TODO: Check spawn code as some refers to HL address, a refers to ship number but its not a ship number e.g. in test it was E1"
 448+ 6175 78           .CheckIfInvalid:        ld      a,b                                 ; if b was 0 then its a count of 0 so no spawn
 449+ 6176 B7                                   or      a                                   ; .
 450+ 6177 C8                                   ret     z                                   ; .
 451+ 6178 E5 C5        .SetNbrToSpawn:         push    hl,,bc                              ; de not affected by doRandom                               Stack + 2 > 2
 452+ 617A CD EC 85                             call    doRandom                            ; generate a random number to spawn
 453+ 617D C1                                   pop     bc                                  ; mask it against b and make sure we have at least 1        Stack - 1 > 1
 454+ 617E A0                                   and     b                                   ; .
 455+ 617F F6 01                                or      1                                   ; .
 456+ 6181 47                                   ld      b,a                                 ; so b = the actual number to spawn
 457+ 6182 E1                                   pop     hl                                  ; get back address of spawn handler                         Stack - 1 > 0
 458+ 6183              ; b = nbr to spawn, c= next free slot for first ship to spawn, hl = handler for spawn, de = rank lookup table of ship type to spawn
 459+ 6183 C5 D5 E5     .SpawnLoop:             push    bc,,de,,hl                          ; save loop counter lookup table and handler                Stack +3  > 3
 460+ 6186 EB           .FindSlotRequried:      ex      de,hl                               ; hl = lookup spawn type table, de = handler for spawn
 461+ 6187 CD 04 64                             call    SelectSpawnType                     ; a = shipId to Spawn
 462+ 618A EB                                   ex      de,hl                               ; hl = handler routine for spawning ship
 463+ 618B CD 95 61                             call    .SpawnAShipTypeC                    ; now we have bc with rank and id for ship type to spawn, hl = address of handler to run
 464+ 618E E1 D1 C1                             pop     bc,,de,,hl                          ; get back values for next iteration                        Stack -3  > 0
 465+ 6191 D8                                   ret     c                                   ; if Spawn failed carry will be set so we can assume its run out of slots and bail out
 466+ 6192 10 EF                                djnz    .SpawnLoop                          ; repeat until B = 0
 467+ 6194 C9                                   ret                                         ; we are done
 468+ 6195 79           .SpawnAShipTypeC        ld      a,c                                 ; hl= handler to spawn, c = ship to spawn set a to ship type to spawn
 469+ 6196 E9                                   jp      hl                                  ; we call this so we can do a dynamic jp and get an implicit ret, it will return with carry set if it failed else carry clear
 470+ 6197                                      ; implicit ret from jp                      ; SpawnShipTypeA handles free slot tests etc
 471+ 6197
 472+ 6197
 473+ 6197 00           EnemyShipBank:          DS 1
 474+ 6198 00 00 00...  EnemyMissileLaunchPos:  DS 3 * 3
 475+ 61A1 00 00 00...  EnemyMissileLaunchMat:  DS 2 * 3
 476+ 61A7
 477+ 61A7
 478+ 61A7              LaunchEnemyMissile:     ; break
 479+ 61A7 3A 41 C0                             ld      a,(UbnKShipUnivBankNbr)             ; save current bank number
 480+ 61AA 32 97 61                             ld      (EnemyShipBank),a                   ;
 481+ 61AD 3E 05                                ld      a,5
 482+ 61AF CD AD A5                             call    CalcLaunchOffset
 483+ 61B2 3E 00                                ld      a,0                                 ; TODO For now only 1 missile type
 484+ 61B4                                      GetByteAInTable ShipMissileTable            ; swap in missile data
 484+ 61B4 21 1F 78    >                    ld          hl,ShipMissileTable
 484+ 61B7 ED 31       >                    add         hl,a
 484+ 61B9 7E          >                    ld          a,(hl)
 485+ 61BA CD FD 61                             call    SpawnShipTypeA                      ; spawn the ship
 486+ 61BD D8                                   ret     c                                   ; return if failed
 487+ 61BE CD 0E C7                             call    UnivSetEnemyMissile                 ; as per player but sets as angry
 488+ 61C1 3E FF                                ld      a,$FF
 489+ 61C3 32 46 C0                             ld      (UBnKMissileTarget),a               ; set as definte player as target
 490+ 61C6 3A 97 61                             ld      a,(EnemyShipBank)                   ; Direct restore current bank
 491+ 61C9                                      MMUSelectUnivBankA                          ;
 491+ 61C9 ED 92 56    >                     nextreg UniverseMMU,       a
 492+ 61CC 21 9C C0                             ld      hl, UBnKMissilesLeft                ; reduce enemy missile count
 493+ 61CF 35                                   dec     (hl)
 494+ 61D0 C9                                   ret
 495+ 61D1
 496+ 61D1 3E 0A        LaunchEnemyFighter:     ld      a,10
 497+ 61D3                                      ;break;call    CopyUBnKtoLaunchParameters
 498+ 61D3                                      ;copymatrix,rot and speed
 499+ 61D3 C9                                   ret
 500+ 61D4
 501+ 61D4              LaunchPlayerMissile:   ; break
 502+ 61D4 CD 71 85                             call    FindNextFreeSlotInC                 ; Check if we have a slot free
 503+ 61D7 38 1E                                jr      c,.MissileMissFire                  ; give a miss fire indicator as we have no slots
 504+ 61D9                          DISPLAY "TODO: FOR NOW ONLY 1 MISSILE TYPE"
 505+ 61D9 3E 00        .LaunchGood:            ld      a,0                                 ; TODO For now only 1 missile type
 506+ 61DB                                      GetByteAInTable ShipMissileTable            ; swap in missile data
 506+ 61DB 21 1F 78    >                    ld          hl,ShipMissileTable
 506+ 61DE ED 31       >                    add         hl,a
 506+ 61E0 7E          >                    ld          a,(hl)
 507+ 61E1 CD FD 61                             call    SpawnShipTypeA                      ; spawn the ship
 508+ 61E4 3A 58 82                             ld      a,(MissileTargettingFlag)           ; Get target from computer
 509+ 61E7 32 46 C0                             ld      (UBnKMissileTarget),a               ; load target Data
 510+ 61EA CD 54 C7                             call    UnivSetPlayerMissile                ; .
 511+ 61ED                                      ClearMissileTargetting                      ; reset targetting
 511+ 61ED 3E FF       >                        ld      a,StageMissileNotTargeting
 511+ 61EF 32 58 82    >                        ld      (MissileTargettingFlag),a
 512+ 61F2 21 65 80                             ld      hl, NbrMissiles
 513+ 61F5 35                                   dec     (hl)
 514+ 61F6                          DISPLAY "TODO: handle removal of missile from inventory and console"
 515+ 61F6 C9                                   ret
 516+ 61F7              .MissileMissFire:       ClearMissileTargetting
 516+ 61F7 3E FF       >                        ld      a,StageMissileNotTargeting
 516+ 61F9 32 58 82    >                        ld      (MissileTargettingFlag),a
 517+ 61FC C9                                   ret ; TODO bing bong noise misfire message
 518+ 61FD
 519+ 61FD                                      include "./SpawnShipTypeA.asm"
# file opened: ./GameEngine/./SpawnShipTypeA.asm
   1++61FD              ;.. SpawnShipTypeA
   2++61FD              ; IN
   3++61FD              ;  a = ship type to create (equates to the ship model)
   4++61FD              ; OUT
   5++61FD              ;  b = ship class
   6++61FD              ;  a = iyh = slot number
   7++61FD              SpawnShipTypeA:         ;break
   8++61FD FD 6F                                ld      iyl,a                               ; save ship type in iyh
   9++61FF CD 71 85                             call    FindNextFreeSlotInC                 ; c = slot number to use
  10++6202 D8                                   ret     c                                   ; if carry flag was set then no spare slots
  11++6203 FD 61                                ld      iyh,c                               ; preserve slot number for now
  12++6205              ; Entry point where iyl = space station type, iyh = bank 0
  13++6205                                     ;break
  14++6205              SpawnSpaceStation:      MMUSelectShipBank1                          ; select bank 1
  14++6205 ED 91 57 3B >					 nextreg ShipModelMMU,	    BankShipModels1
  15++6209 FD 7C                                ld      a,iyh                               ; A = slot number
  16++620B FD 45                                ld      b,iyl                               ; b = ship type
  17++620D CD D7 84                             call    SetSlotAToTypeB                     ; Allocate slot as used
  18++6210                                      MMUSelectUniverseA                          ; .
  18++6210 C6 46       >                     add    a,BankUNIVDATA0
  18++6212 ED 92 56    >                     nextreg UniverseMMU,       a
  19++6215 FD 7C        .MarkUnivDiags:         ld      a,iyh                               ; mark diagnostics for bank number in memory
  20++6217 C6 41                                add     "A"                                 ; so fix Universe PB<x> to correct letter
  21++6219 32 0B C0                             ld      (StartOfUnivN),a                    ; to help debugging
  22++621C FD 7D                                ld      a,iyl                               ; get ship model type
  23++621E 32 0E C0                             ld      (StartOfUnivM),a                    ; set debugging for model
  24++6221 CD 0F E0     .CopyOverShipData:      call    GetShipBankId                       ; find actual memory location of ship model data
  25++6224                                      MMUSelectShipBankA                          ; by paging in bank a then looking up computed bank for model a
  25++6224 ED 92 57    >					 nextreg ShipModelMMU,	    a
  26++6227 78                                   ld      a,b                                 ; b = computed ship id for bank
  27++6228 CD 6A E0                             call    CopyShipToUniverse                  ; copy all the ship data in to the paged in bank
  28++622B                                          DISPLAY "TODO: Check if these two are the wrogn way round and init runtime is wiping spawn"
  29++622B CD C3 C9                             call    UnivSetSpawnPosition                ; set initial spawn position
  30++622E CD 7C CA                             call    UnivInitRuntime                     ; Clear runtime data before startup, iy h and l are already set up
  31++6231 3A 4E C4                             ld      a,(ShipTypeAddr)                    ; get ship type
  32++6234 32 0F C0                             ld      (StartOfUnivT),a                    ; to help debugging we store type too
  33++6237 47                                   ld      b,a                                 ; and set the type into slot table
  34++6238 FD 7C                                ld      a,iyh                               ;
  35++623A CD DE 84                             call    SetSlotAToClassB                    ;
  36++623D                                      ClearCarryFlag                              ; no carry on success
  36++623D B7          >                        or a
  37++623E C9                                   ret
  38++623F
# file closed: ./GameEngine/./SpawnShipTypeA.asm
 520+ 623F
 521+ 623F                                      ; reset main loop counters
 522+ 623F                                      ; from BBC TT18 jump code
 523+ 623F                                      ; need to set system corrodinates, flush out univere ships etc
 524+ 623F                                      ; set up new star system and landing location in system
 525+ 623F                                      ; reset ship speed etc (RES2)
 526+ 623F                                      ; update legal status, missle indicatrions, planet data block, sun data block (SOLAR)
 527+ 623F                                      ;   put planet into data blokc 1 of FRIN
 528+ 623F                                      ;   put sun inot data block (NWWSHIP)
 529+ 623F                                      ; need to look at in system warp code (WARP) - note we need to -reorg all to code for teh station as that will never be in slot 0
 530+ 623F
 531+ 623F              WeAreInTransition:
 532+ 623F 3E 00        DoubleBufferCheck:      ld      a,00
 533+ 6241                                      IFDEF DOUBLEBUFFER
 534+ 6241 FE 00                                    cp      0
 535+ 6243 CA 52 62                                 jp      z,TestTransition
 536+ 6246                                          MMUSelectLayer2
 536+ 6246 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 537+ 624A 3A 02 E0                                 ld     a,(varL2_BUFFER_MODE)
 538+ 624D FE 00                                    cp     0
 539+ 624F C4 04 E4                                 call   nz,l2_flip_buffers
 540+ 6252                                      ENDIF
 541+ 6252 3A 37 6A     TestTransition:         ld      a,(ScreenTransitionForced)          ; was there a bruite force screen change in any update loop
 542+ 6255 FE FF                                cp      $FF
 543+ 6257 CA F7 5E                             jp      z,MainLoop
 544+ 625A CD A9 6A     BruteForceChange:       call    SetScreenA
 545+ 625D C3 F7 5E                             jp MainLoop
 546+ 6260
 547+ 6260
 548+ 6260              ;......................................................................
 549+ 6260              ; Sound Code
 550+ 6260
 551+ 6260
 552+ 6260
 553+ 6260              ;As speed goes up so does pitch
 554+ 6260
# file closed: ./GameEngine/MainLoop.asm
 358  6260                                      INCLUDE "./GameEngine/ProcessWarp.asm"
# file opened: ./GameEngine/ProcessWarp.asm
   1+ 6260                          DISPLAY "MODULE: ProcessWarp.asm"
   2+ 6260              ;-----------------------------------------------------------------------------------------------------
   3+ 6260              ;-- Process in system warp key press, only called when warp press detected
   4+ 6260 FF 03 00     MassLockDistance:       DB      $FF, $03, $00
   5+ 6263 00 00 00     PlanetWarpPosition:     DS      3
   6+ 6266              ProcessWarp:            SetMemFalse     WarpPressed                     ; clear and acknowlege
   6+ 6266 3E FF       >                        ld      a,$FF
   6+ 6268 32 C3 81    >                        ld      (WarpPressed),a
   7+ 626B                                      JumpIfMemZero   WarpCooldown, .CheckSpaceStationLock    ; If warp drive is cool then warp
   7+ 626B 3A 9C 81    >                        ld  a,(WarpCooldown)
   7+ 626E A7          >                        and a
   7+ 626F CA 75 62    >                        jp  z,.CheckSpaceStationLock
   8+ 6272                                      DISPLAY "TODO Need logic for in system jump drive malfunction"
   9+ 6272              .JumpDriveHot:          DISPLAY "TODO call bong jump drive hot"
  10+ 6272                                      DISPLAY "TODO flash jump drive status icon"
  11+ 6272 C3 14 63                             jp      .TooHot                                 ; else warp is too hot so exit
  12+ 6275              .CheckSpaceStationLock: MMUSelectSpaceStation
  12+ 6275 ED 91 56 46 >                     nextreg SpaceStationMMU,   BankSpaceStationData
  13+ 6279 DD 21 20 C0                          ld      ix,UBnKxlo
  14+ 627D FD 21 60 62                          ld      iy,MassLockDistance
  15+ 6281                                      MMUSelectMathsBankedFns
  15+ 6281 ED 91 50 66 >                     nextreg MathsBankedFnsMMU, BankMathsBankedFns
  15+ 6285 CD 2B 02       call ManhattanDistanceIXIY
  16+ 6288 C2 19 63                             jp      nz,.MassLocked
  17+ 628B              ; Moved this up so that if we enter DynamicJumpRangeCode we already have some planet data in place
  18+ 628B CD 4C 85     .CheckShipsInBubble:    call    AreShipsPresent                         ; Any ships present then masslocked
  19+ 628E D2 19 63                             jp      nc,     .MassLocked
  20+ 6291              .CheckSunMassLocking:   MMUSelectSun                                    ; is planet within 1023 (i.e. 3FF) then mass locked
  20+ 6291 ED 91 56 53 >                     nextreg SunMMU,            BankSunData
  21+ 6295 DD 21 17 C0                          ld      ix,SBnKzhi
  22+ 6299                                      MMUSelectMathsBankedFns
  22+ 6299 ED 91 50 66 >                     nextreg MathsBankedFnsMMU, BankMathsBankedFns
  22+ 629D CD 2B 02       call ManhattanDistanceIXIY
  23+ 62A0 C2 19 63                             jp      nz,.MassLocked
  24+ 62A3              .CheckPlanetMassLocking:MMUSelectPlanet                                 ; is planet within 1023 (i.e. 3FF) then mass locked
  24+ 62A3 ED 91 56 54 >                     nextreg PlanetMMU,         BankPlanetData
  25+ 62A7 DD 21 17 C0                          ld      ix,P_BnKzhi
  26+ 62AB                                      MMUSelectMathsBankedFns
  26+ 62AB ED 91 50 66 >                     nextreg MathsBankedFnsMMU, BankMathsBankedFns
  26+ 62AF CD 2B 02       call ManhattanDistanceIXIY
  27+ 62B2 C2 19 63                             jp      nz,.MassLocked
  28+ 62B5              ;-- Now we do dynamic jump based on facign towards sun or planet. Sun is largest so determines the mass lock
  29+ 62B5              ;-- take sun and planet z distance, pick smaller of the two
  30+ 62B5              ;-- z jump delta = distance %7F0000 / 2
  31+ 62B5              ;-- now we know that lo m
  32+ 62B5 2A 16 C0     .DynamicJumpRange:      ld      hl,(P_BnKzlo)                           ; for now we will only base warp on z distance for speed, later on we can look at 3D
  33+ 62B8 3A 18 C0                             ld      a,(P_BnKzsgn)                           ;
  34+ 62BB 22 63 62                             ld      (PlanetWarpPosition),hl                 ; copy locally as when we swap to sun bank planet bank won't be in memory
  35+ 62BE 32 65 62                             ld      (PlanetWarpPosition+2),a                ; .
  36+ 62C1 FD 21 63 62                          ld      iy,PlanetWarpPosition                   ; now point IY at planet
  37+ 62C5                                      MMUSelectSun
  37+ 62C5 ED 91 56 53 >                     nextreg SunMMU,            BankSunData
  38+ 62C9 DD 21 16 C0                          ld      ix,SBnKzlo                              ; now we point IX at sun
  39+ 62CD CD FE 01                             call    CompareAtIXtoIYABS                      ; we know we have Mths BankdFns in bank zero, on return IY holds the shorter of the two distances
  40+ 62D0              ; After compare c means that we have done a swap and on
  41+ 62D0 FD 7E 02                             ld      a,(iy+2)                                ; load HL with the position high bytes as we won't warp if less than 256 (well 1023 in reality)
  42+ 62D3 E6 7F                                and     SignMask8Bit                            ; we want abs of distnace
  43+ 62D5 67                                   ld      h,a
  44+ 62D6 A7                                   and     a                                       ; if its zero then we are not doing a big jump
  45+ 62D7 C2 E2 62                             jp      nz,.DoBigWarp                           ; .
  46+ 62DA FD 6E 01     .DoSmallWarp:           ld      l,(iy+1)                                ; if we got here the l must hold a value of interest and h must hold 0
  47+ 62DD CB 3D                                srl     l                                       ; divide l by 2 so now hl0 = warp distance
  48+ 62DF C3 EB 62                             jp      .DoWarp                                 ; now we can do a hl0 warp
  49+ 62E2 CB 3C        .DoBigWarp:             srl     h                                       ; big warp is h/2 but if Srl made it zero then we need to adjust l
  50+ 62E4 2E 00                                ld      l,0                                     ; so we assume we are doing H/2 0 0 jump
  51+ 62E6 C2 EB 62                             jp      nz,.DoWarp                              ; and if srl did not result in zero this is a case
  52+ 62E9 2E FF                                ld      l,$FF                                   ; bit if not then we do 0 $FF 0 jump
  53+ 62EB              .DoWarp:
  54+ 62EB E5 E5        .UpdatePlanet:          push    hl,,hl                                  ; save 2 copied of jump distance so we can do sun and space station
  55+ 62ED                                      MMUSelectPlanet                                 ; update planet
  55+ 62ED ED 91 56 54 >                     nextreg PlanetMMU,         BankPlanetData
  56+ 62F1 CD 25 C5                             call    WarpPlanetByHL                          ; .
  57+ 62F4 E1                                   pop     hl                                      ; get back first stacked copy of distance
  58+ 62F5                                      MMUSelectSun                                    ; update sun
  58+ 62F5 ED 91 56 53 >                     nextreg SunMMU,            BankSunData
  59+ 62F9 CD A9 C1                             call    WarpSunByHL                             ; .
  60+ 62FC E1                                   pop     hl                                      ; get back last stacked copy of distance
  61+ 62FD                                      MMUSelectSpaceStation                           ; update space station
  61+ 62FD ED 91 56 46 >                     nextreg SpaceStationMMU,   BankSpaceStationData
  62+ 6301 CD CF C6                             call    WarpUnivByHL                            ; .
  63+ 6304 CD 07 85     .MoveJunk:              call    ClearJunk           ;  call    WarpJunk - as it will move sign bit hi then all junk will be lost
  64+ 6307 3E 5A                                ld      a,WarpCoolDownPeriod
  65+ 6309 32 9C 81                             ld      (WarpCooldown),a
  66+ 630C                                      MMUSelectLayer1
  66+ 630C ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
  67+ 6310 CD 59 61                             call    WarpSFX             ; Do the visual SFX based on facing
  68+ 6313 C9                                   ret
  69+ 6314              .TooHot:                ;       call hot bong
  70+ 6314                                      MMUSelectLayer1
  70+ 6314 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
  71+ 6318 C9                                   ret
  72+ 6319              .MassLocked:            ;       call bing bong noise
  73+ 6319              .NoWarp:                MMUSelectLayer1             ; skip with no sound
  73+ 6319 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
  74+ 631D C9                                   ret
  75+ 631E
# file closed: ./GameEngine/ProcessWarp.asm
 359  631E                                      INCLUDE "./GameEngine/SpawnObject.asm"
# file opened: ./GameEngine/SpawnObject.asm
   1+ 631E
   2+ 631E 3A 41 C0     SpawnMissileHandler:            ld      a,(UbnKShipUnivBankNbr)             ; save current bank number
   3+ 6321 32 97 61                                     ld      (EnemyShipBank),a                   ;
   4+ 6324 3E 05                                        ld      a,5
   5+ 6326 CD AD A5                                     call    CalcLaunchOffset
   6+ 6329 3E 00                                        ld      a,0                                 ; TODO For now only 1 missile type
   7+ 632B                                              GetByteAInTable ShipMissileTable            ; swap in missile data
   7+ 632B 21 1F 78    >                    ld          hl,ShipMissileTable
   7+ 632E ED 31       >                    add         hl,a
   7+ 6330 7E          >                    ld          a,(hl)
   8+ 6331 CD FD 61                                     call    SpawnShipTypeA                      ; spawn the ship
   9+ 6334 D8                                           ret     c                                   ; return if failed
  10+ 6335 CD 0E C7                                     call    UnivSetEnemyMissile                 ; as per player but sets as angry
  11+ 6338 3E FF                                        ld      a,$FF
  12+ 633A 32 46 C0                                     ld      (UBnKMissileTarget),a               ; set as definte player as target
  13+ 633D 3A 97 61                                     ld      a,(EnemyShipBank)                   ; Direct restore current bank
  14+ 6340                                              MMUSelectUnivBankA                          ;
  14+ 6340 ED 92 56    >                     nextreg UniverseMMU,       a
  15+ 6343 21 9C C0                                     ld      hl, UBnKMissilesLeft                ; reduce enemy missile count
  16+ 6346 35                                           dec     (hl)
  17+ 6347 C9                                           ret
  18+ 6348
  19+ 6348                          DISPLAY "TODO: FOR NOW ONLY 1 MISSILE TYPE"
  20+ 6348              SpawnPlayerMissileHandler:      ZeroA                                       ; TODO For now only 1 missile type
  20+ 6348 AF          >                        xor a
  21+ 6349                                              GetByteAInTable ShipMissileTable            ; swap in missile data
  21+ 6349 21 1F 78    >                    ld          hl,ShipMissileTable
  21+ 634C ED 31       >                    add         hl,a
  21+ 634E 7E          >                    ld          a,(hl)
  22+ 634F CD FD 61                                     call    SpawnShipTypeA                      ; spawn the ship
  23+ 6352 38 13                                        jr      c,.MissileMissFire                  ; give a miss fire indicator as we have no slots
  24+ 6354 3A 58 82                                     ld      a,(MissileTargettingFlag)           ; Get target from computer
  25+ 6357 32 46 C0                                     ld      (UBnKMissileTarget),a               ; load target Data
  26+ 635A CD 54 C7                                     call    UnivSetPlayerMissile                ; .
  27+ 635D                                              ClearMissileTargetting                      ; reset targetting
  27+ 635D 3E FF       >                        ld      a,StageMissileNotTargeting
  27+ 635F 32 58 82    >                        ld      (MissileTargettingFlag),a
  28+ 6362 21 65 80                                     ld      hl, NbrMissiles
  29+ 6365 35                                           dec     (hl)
  30+ 6366                          DISPLAY "TODO: handle removal of missile from inventory and console"
  31+ 6366 C9                                           ret
  32+ 6367              .MissileMissFire:               ClearMissileTargetting
  32+ 6367 3E FF       >                        ld      a,StageMissileNotTargeting
  32+ 6369 32 58 82    >                        ld      (MissileTargettingFlag),a
  33+ 636C C9                                           ret ; TODO bing bong noise misfire message
  34+ 636D
  35+ 636D
  36+ 636D CD FD 61     SpawnStationHandler:            call    SpawnShipTypeA
  37+ 6370 D8                                           ret     c                                   ; abort if failed
  38+ 6371                                              ; extra code goes here
  39+ 6371 C9                                           ret
  40+ 6372
  41+ 6372 CD FD 61     SpawnHermitHandler:             call    SpawnShipTypeA
  42+ 6375 D8                                           ret     c                                   ; abort if failed
  43+ 6376 C9                                           ret
  44+ 6377
  45+ 6377 CD FD 61     SpawnAsteroidHandler:           call    SpawnShipTypeA
  46+ 637A D8                                           ret     c                                   ; abort if failed
  47+ 637B                                              ;Set random position and vector
  48+ 637B                                              ; if its a hermit jump to that to so special
  49+ 637B
  50+ 637B C9                                           ret
  51+ 637C
  52+ 637C F5           SpawnTypeJunkHandler:           push    af
  53+ 637D                                              TestRoomForJunk .CanAddJunk
  53+ 637D 3E 03       >                        ld      a,3
  53+ 637F             >                        JumpIfMemTrue  SpaceStationSafeZone, .DoTest
  53+ 637F 3A 5E 80    >                        ld      a,(SpaceStationSafeZone)
  53+ 6382 A7          >                        and     a
  53+ 6383 CA 88 63    >                        jp      z, .DoTest
  53+ 6386 C6 02       >                        add     a,2
  53+ 6388             >.DoTest                 JumpIfALTMemusng    JunkCount, .CanAddJunk
  53+ 6388 21 60 80    >                        ld      hl,JunkCount
  53+ 638B BE          >                        cp      (hl)
  53+ 638C DA 90 63    >                        jp		c,.CanAddJunk
  54+ 638F C9                                           ret
  55+ 6390 F1           .CanAddJunk:                    pop     af
  56+ 6391 CD FD 61                                     call    SpawnShipTypeA
  57+ 6394                                              AddJunkCount
  57+ 6394 21 60 80    >                        ld      hl,JunkCount
  57+ 6397 34          >                        inc     (hl)
  58+ 6398 D8                                           ret     c                                   ; abort if failed
  59+ 6399 C9                                           ret
  60+ 639A
  61+ 639A CD FD 61     SpawnTypeCopHandler:            call    SpawnShipTypeA                      ; will add logic later for alignment etc
  62+ 639D D8                                           ret     c                                   ; abort if failed
  63+ 639E                                              ; Cops will be non hostile if there are no other ones in area
  64+ 639E                                              ; if there are, then check out cargo and fist to evalutate
  65+ 639E                                              ; if not hostile and in space station area, then patrol orbiting station
  66+ 639E                                              ; if not in space station area even split on orbiting a random point in space at distance random
  67+ 639E                                              ;                                            travelling to station
  68+ 639E                                              ;                                            travelling to sun
  69+ 639E CD A0 C7                                     call    UnivSetAIOnly
  70+ 63A1 C9                                           ret
  71+ 63A2 CD FD 61     SpawnTypeTraderHandler:         call    SpawnShipTypeA
  72+ 63A5 D8                                           ret     c                                   ; abort if failed
  73+ 63A6 CD A0 C7                                     call    UnivSetAIOnly
  74+ 63A9                                              ; 50/50 goign to planet or sun
  75+ 63A9                                              ;                main loop AI determines if our FIST status will force a jump
  76+ 63A9 C9                                           ret
  77+ 63AA
  78+ 63AA CD FD 61     SpawnTypeNonTraderHandler:      call    SpawnShipTypeA
  79+ 63AD D8                                           ret     c                                   ; abort if failed
  80+ 63AE                                              ; 50/50 goign to planet or sun
  81+ 63AE                                              ; if FIST is high then 10% chance will auto go hostile
  82+ 63AE CD A0 C7                                     call    UnivSetAIOnly
  83+ 63B1 C9                                           ret
  84+ 63B2
  85+ 63B2 CD FD 61     SpawnTypePirateHandler:         call    SpawnShipTypeA
  86+ 63B5 D8                                           ret     c                                   ; abort if failed
  87+ 63B6                                              ; set random position
  88+ 63B6                                              ; 50/50 going to station or sun
  89+ 63B6                                              ; if in safe zone, then not hostile
  90+ 63B6                                              ; work out value of our cargo then go auto hostile (e.g. gems/gold, special carry nuke mission has cargo so valueable it auto sets hostile)
  91+ 63B6                                              AddPirateCount                              ; another pirate has been spawned
  91+ 63B6 21 64 80    >                        ld      hl,PirateCount
  91+ 63B9 34          >                        inc     (hl)
  92+ 63BA C9                                           ret
  93+ 63BB CD FD 61     SpawnTypeHunterHandler:         call    SpawnShipTypeA
  94+ 63BE D8                                           ret     c                                   ; abort if failed
  95+ 63BF                                              ; initially hunters will be non hostile and by default going to station
  96+ 63BF                                              ; set random position
  97+ 63BF                                              ; 50/50 going to station or sun
  98+ 63BF                                              ; Check out FIST status, if very high auto hostile
  99+ 63BF                                              ; else its checked on ship event loop
 100+ 63BF C9                                           ret
 101+ 63C0 CD FD 61     SpawnTypeThargoidHandler:       call    SpawnShipTypeA
 102+ 63C3 D8                                           ret     c                                   ; abort if failed
 103+ 63C4                                              ; initially non hostile, main AI does logic (ie.. they will go hostile always after a random time or if shot at)
 104+ 63C4                                              ; start in random position
 105+ 63C4 C9                                           ret
 106+ 63C5 C9           SpawnTypeMissionHandler:        ret
 107+ 63C6
 108+ 63C6 CD FD 61     SpawnTypeStationDebrisHandler:  call    SpawnShipTypeA
 109+ 63C9 D8                                           ret     c                                   ; abort if failed
 110+ 63CA                                              ;Set random position and vector
 111+ 63CA C9                                           ret
 112+ 63CB              SpawnTypeMissionEventHandler:
 113+ 63CB C9           SpawnTypeDoNotSpawnHandler:     ret
 114+ 63CC
 115+ 63CC
 116+ 63CC
 117+ 63CC 3E 29        SpawnHostileCop:                ld      a,ShipID_Viper
 118+ 63CE CD FD 61                                     call    SpawnShipTypeA                      ; call rather than jump
 119+ 63D1 CD 5B C6                                     call    SetShipHostile                      ; as we have correct universe banked in now
 120+ 63D4 C9                                           ret
 121+ 63D5                          DISPLAY "TODO: SPAWN TRADER"
 122+ 63D5              SpawnTrader:       ; TODO
 123+ 63D5
 124+ 63D5              ; DEFUNCT?SpawnAHostileHunter:    ld      hl, ExtraVesselsCounter             ; prevent the next spawning
 125+ 63D5              ; DEFUNCT?                        inc     (hl)                                ;
 126+ 63D5              ; DEFUNCT?                        and     3                                   ; a = random 0..3
 127+ 63D5              ; DEFUNCT?                        MMUSelectShipBank1
 128+ 63D5              ; DEFUNCT?                        GetByteAInTable ShipHunterTable             ; get hunter ship type
 129+ 63D5              ; DEFUNCT?                        call    SpawnShipTypeA
 130+ 63D5              ; DEFUNCT?                        call    SetShipHostile
 131+ 63D5              ; DEFUNCT?                        ret
 132+ 63D5
 133+ 63D5
 134+ 63D5              ;-------------------------------------------------------------------
 135+ 63D5              ; input IX = table for spawn data
 136+ 63D5              ; output b = maximum to spawn (0 means no spawn)
 137+ 63D5              ;        de = spawn table address (0 means no spawn)
 138+ 63D5              ;        iy = hl  = spawn handler routine address
 139+ 63D5                  DISPLAY "TODO: SelectSpawnTableData needs algorithim for selecting the spawn rank table based on commander, galaxy etc"
 140+ 63D5                  DISPLAY "TODO: SelectSpawnTableData for now only does basic 'A' table selection"
 141+ 63D5              SelectSpawnTableData:
 142+ 63D5                                      ;ld      a,(ix+1*SpawnTableSize)             ; Table Type, e.g. SpawnTypeTrader being an off set (SpaceStatoin = 0, Trader = 4 etc)
 143+ 63D5                                      ;ld      hl,SpawnTypeHandlers                ; hl = the location in spawn hanlder routine look up table for the call address for setting up a spawn
 144+ 63D5                                      ;add     hl,a                                ; adjust for 2 * A to get the address of the respective spawn hanlder routine
 145+ 63D5                                      ;add     hl,a                                ; .
 146+ 63D5                                      ;ld      a,(hl)                              ; then get the address from that table into HL
 147+ 63D5                                      ;inc     hl                                  ; .
 148+ 63D5                                      ;ld      h,(hl)                              ; .
 149+ 63D5                                      ;ld      l,a                                 ; hl now is proper address
 150+ 63D5 DD 46 10                             ld      b,(ix+2*SpawnTableSize)             ; Get Nbr of objects to  Spawn
 151+ 63D8 DD 5E 18                             ld      e,(ix+3*SpawnTableSize)             ; Spawn Rank Table Addr Low
 152+ 63DB DD 56 20                             ld      d,(ix+4*SpawnTableSize)             ; Spawn Rank Table Addr Hi
 153+ 63DE DD 6E 28                             ld      l,(ix+5*SpawnTableSize)             ; address of spawn routine
 154+ 63E1 DD 66 30                             ld      h,(ix+6*SpawnTableSize)
 155+ 63E4 C9                                   ret
 156+ 63E5              ;-------------------------------------------------------------------
 157+ 63E5              ; Picks a random number and then sets ix to the column where table low >= random number
 158+ 63E5              ; Output IX = pointer to address of correct column in table Fress Space Spawn Table
 159+ 63E5              ; its up to the caller if DE is right table and it it needs to load into
 160+ 63E5              ; it is up to the main loop code to maintain SpaceStationSafeZone
 161+ 63E5              ; if in safe zone then uses StationSpawnTable
 162+ 63E5              SelectSpawnTable:       JumpIfMemTrue SpaceStationSafeZone, .SelectStationTable ; if in space station safe zone switch to the corresponding table
 162+ 63E5 3A 5E 80    >                        ld      a,(SpaceStationSafeZone)
 162+ 63E8 A7          >                        and     a
 162+ 63E9 CA F3 63    >                        jp      z, .SelectStationTable
 163+ 63EC DD 21 16 64                          ld      ix,FreeSpaceSpawnTableLow           ; else we use free space table
 164+ 63F0 C3 F7 63                             jp      .RandomShip                         ; and now do a random number
 165+ 63F3 DD 21 4E 64  .SelectStationTable:    ld      ix,StationSpawnTableLow             ; here we selected safe zone table
 166+ 63F7 CD EC 85     .RandomShip:            call    doRandom                            ; random number
 167+ 63FA DD BE 00     .SelectLoop:            cp      (ix+0)                              ; Compare high value
 168+ 63FD D8                                   ret     c                                   ; if random <= high threshold jump to match, we cant just do jr c as 255 would never compare
 169+ 63FE C8                                   ret     z                                   ; if random <= high threshold jump to match, result is, last values must be 255
 170+ 63FF DD 23                                inc     ix                                  ; move to next row
 171+ 6401 C3 FA 63                             jp      .SelectLoop                         ; we have a 255 marker to stop infinite loop
 172+ 6404              ;-------------------------------------------------------------------
 173+ 6404              ; takes ship rank table at address hl, adds random number from 0 to 16
 174+ 6404              ; entering here all decisions have already been made on what to spawn
 175+ 6404              ; In = hl = address of first byte of table
 176+ 6404              ; returns b with rank, c with ship id for ship type
 177+ 6404 E5           SelectSpawnType:        push    hl                                  ; save hl for random, de not affected by doRandom
 178+ 6405 CD EC 85                             call    doRandom                            ; random number 0 to 7
 179+ 6408 E1                                   pop     hl
 180+ 6409 E6 07                                and     %00000111                           ; .
 181+ 640B ED 31                                add     hl,a                                ; hl = row 1 on rank table
 182+ 640D 7E                                   ld      a,(hl)                              ; b = rank to be spawned, removed the limit now as the rank table selection should dictate this
 183+ 640E 47                                   ld      b,a
 184+ 640F 3E 08                                ld      a,8                                 ; move to next row of rank table which is ship type
 185+ 6411 ED 31                                add     hl,a
 186+ 6413 7E                                   ld      a,(hl)
 187+ 6414 4F                                   ld      c,a                                 ; so now b = rank, c = type
 188+ 6415 C9                                   ret                                         ; we are only selecting a candidate so no need for carry flag logic anymore
 189+ 6416
 190+ 6416                                      ;ld      a,(CurrentRank)                     ; are we experienced enough to face this ship
 191+ 6416                                      ;JumpIfAGTENusng b, .GoodToSpawn             ; if current rank >= table rank, we are good
 192+ 6416              ;.TooLowRank:            ld      hl,iy
 193+ 6416              ;                        djnz    .SelectSpawnType                    ; 3 goes then fail out
 194+ 6416              ;.NoSpawn:               SetCarryFlag
 195+ 6416              ;                        ret
 196+ 6416              ;GoodToSpawn:           ClearCarryFlag                              ; carry is clear as we are
 197+ 6416              ;                       ret
 198+ 6416
 199+ 6416              ; Spawn table is in two halves. if we are within range X of space station we use the second table
 200+ 6416              ; thsi means we coudl in theory drag a hunter / pirate or thargoid say into a space station zone
 201+ 6416              ; Probability high
 202+ 6416              ; Class of table,       0=Station,
 203+ 6416              ; Table to pick from (this is then based on ranking )
 204+ 6416
 205+ 6416              ;----------------------------------------------------------------------
 206+ 6416              ; Free space spawn table. select a column on the tabel to determine the
 207+ 6416              ; row (table low, type, count, addr) to spawn
 208+ 6416              ; each row is 8 bytes so uses ix as an index into here generally
 209+ 6416              ; Its prefilled to 8 options in the table to allocate space. though the table can only accomodate 8. ther eis a 9th as a marker, value of table = 0 means no spawn
 210+ 6416              ; Last value on TableLow Low Column must be 255 to avoid unexpected stuff happening
 211+ 6416              ; SpawnTableCount is a bit mask for random number generator, random is or'ed with 1 so mask of 2 will still generate 1 or 2
 212+ 6416 54 9F FA FD  FreeSpaceSpawnTableLow:     DB 84,                       159,                            250,                            253,                         255,                             255,                             255,                             255
 212+ 641A FF FF FF FF
 213+ 641E 03 04 05 06  FreeSpaceSpawnTableType:    DB SpawnTypeCop,             SpawnTypeTrader,                SpawnTypeNonTrader,             SpawnTypePirate,             SpawnTypeBodies,                 SpawnTypeDoNotSpawn,             SpawnTypeDoNotSpawn,             SpawnTypeDoNotSpawn
 213+ 6422 01 0C 0C 0C
 214+ 6426 01 01 01 02  FreeSpaceSpawnTableCount:   DB 1,                        1,                              1,                              2,                           0,                               0,                               0,                               0
 214+ 642A 00 00 00 00
 215+ 642E CD BD BD 8D  FreeSpaceSpawnTableAddrLo:  DB low(ShipCopTableARank),   low(ShipNonTraderTableARank),   low(ShipNonTraderTableARank),   low(ShipPirateTableARank),   low(ShipBodiesTableARank),       low(0),                          low(0),                          low(0)
 215+ 6432 AD 00 00 00
 216+ 6436 77 77 77 77  FreeSpaceSpawnTableAddrHi:  DB high(ShipCopTableARank),  high(ShipNonTraderTableARank),  high(ShipNonTraderTableARank),  high(ShipPirateTableARank),  high(ShipBodiesTableARank),      high(0),                         high(0),                         high(0)
 216+ 643A 77 00 00 00
 217+ 643E 9A A2 AA B2  FreeSpaceSpawnHandlerAddrLo:DB low(SpawnTypeCopHandler), low(SpawnTypeTraderHandler),    low(SpawnTypeNonTraderHandler), low(SpawnTypePirateHandler), low(SpawnAsteroidHandler),       low(SpawnTypeDoNotSpawnHandler), low(SpawnTypeDoNotSpawnHandler), low(SpawnTypeDoNotSpawnHandler)
 217+ 6442 77 CB CB CB
 218+ 6446 63 63 63 63  FreeSpaceSpawnHandlerAddrHi:DB high(SpawnTypeCopHandler),high(SpawnTypeTraderHandler),   high(SpawnTypeNonTraderHandler),high(SpawnTypePirateHandler),high(SpawnAsteroidHandler),      high(SpawnTypeDoNotSpawnHandler),high(SpawnTypeDoNotSpawnHandler),high(SpawnTypeDoNotSpawnHandler)
 218+ 644A 63 63 63 63
 219+ 644E
 220+ 644E 54 9F FA FF  StationSpawnTableLow:       DB 84,                       159,                            250,                            255,                         255,                             255,                             255,                             255
 220+ 6452 FF FF FF FF
 221+ 6456 03 04 05 06  StationSpawnTableType:      DB SpawnTypeCop,             SpawnTypeTrader,                SpawnTypeNonTrader,             SpawnTypePirate,             SpawnTypeDoNotSpawn,             SpawnTypeDoNotSpawn,             SpawnTypeDoNotSpawn,             SpawnTypeDoNotSpawn
 221+ 645A 0C 0C 0C 0C
 222+ 645E 01 01 01 03  StationSpawnTableCount:     DB 1,                        1,                              1,                              3,                           0,                               0,                               0,                               0
 222+ 6462 00 00 00 00
 223+ 6466 CD BD BD 8D  StationSpawnTableAddrLo:    DB low(ShipCopTableARank),   low(ShipNonTraderTableARank),   low(ShipNonTraderTableARank),   low(ShipPirateTableARank),   low(0),                          low(0),                          low(0),                          low(0)
 223+ 646A 00 00 00 00
 224+ 646E 77 77 77 77  StationSpawnTableAddrHi:    DB high(ShipCopTableARank),  high(ShipNonTraderTableARank),  high(ShipNonTraderTableARank),  high(ShipPirateTableARank),  high(0),                         high(0),                         high(0),                         high(0)
 224+ 6472 00 00 00 00
 225+ 6476 9A A2 AA B2  StationSpawnHandlerAddrLo:  DB low(SpawnTypeCopHandler), low(SpawnTypeTraderHandler),    low(SpawnTypeNonTraderHandler), low(SpawnTypePirateHandler), low(SpawnTypeDoNotSpawnHandler), low(SpawnTypeDoNotSpawnHandler), low(SpawnTypeDoNotSpawnHandler), low(SpawnTypeDoNotSpawnHandler)
 225+ 647A CB CB CB CB
 226+ 647E 63 63 63 63  StationSpawnHandlerAddrHi:  DB high(SpawnTypeCopHandler),high(SpawnTypeTraderHandler),   high(SpawnTypeNonTraderHandler),high(SpawnTypePirateHandler),high(SpawnTypeDoNotSpawnHandler),high(SpawnTypeDoNotSpawnHandler),high(SpawnTypeDoNotSpawnHandler),high(SpawnTypeDoNotSpawnHandler)
 226+ 6482 63 63 63 63
 227+ 6486
 228+ 6486              SpawnTableSize             EQU  FreeSpaceSpawnTableType - FreeSpaceSpawnTableLow
 229+ 6486
 230+ 6486              ; Looko in constant equates, Spawntype equates for the values for this jump table
 231+ 6486              ; note at minium it must itmust point to SpawnTypeDoNotSpawnHandlers which just does a ret
 232+ 6486 6D 63 77 63  SpawnTypeHandlers:         DW SpawnStationHandler,       SpawnAsteroidHandler,      SpawnTypeJunkHandler,          SpawnTypeCopHandler
 232+ 648A 7C 63 9A 63
 233+ 648E A2 63 AA 63                             DW SpawnTypeTraderHandler,    SpawnTypeNonTraderHandler, SpawnTypePirateHandler,        SpawnTypeHunterHandler
 233+ 6492 B2 63 BB 63
 234+ 6496 C0 63 C5 63                             DW SpawnTypeThargoidHandler,  SpawnTypeMissionHandler,   SpawnTypeStationDebrisHandler, SpawnTypeMissionEventHandler
 234+ 649A C6 63 CB 63
 235+ 649E CB 63                                   DW SpawnTypeDoNotSpawnHandler
# file closed: ./GameEngine/SpawnObject.asm
 360  64A0              ;..................................................................................................................................
 361  64A0              ;..Process A ship..................................................................................................................
 362  64A0              ; Apply Damage b to ship based on shield value of a
 363  64A0              ; returns a with new shield value
 364  64A0                                      INCLUDE "./GameEngine/DamagePlayer.asm"
# file opened: ./GameEngine/DamagePlayer.asm
   1+ 64A0              ;..Process A ship..................................................................................................................
   2+ 64A0              ; Apply Damage b to ship based on shield value of a
   3+ 64A0              ; returns a with new shield value
   4+ 64A0              ApplyDamage:            ClearCarryFlag
   4+ 64A0 B7          >                        or a
   5+ 64A1 98                                   sbc     b
   6+ 64A2 D0                                   ret     nc                  ; no carry so was not negative
   7+ 64A3 ED 44        .KilledShield:          neg                         ; over hit shield
   8+ 64A5 4F                                   ld      c,a                 ; save overhit in c
   9+ 64A6 3A 55 82                             ld      a,(PlayerEnergy)    ; and apply it to player energy
  10+ 64A9                                      ClearCarryFlag
  10+ 64A9 B7          >                        or a
  11+ 64AA 99                                   sbc     c
  12+ 64AB F2 AF 64                             jp      p,.DoneDamage       ; if result was 0 or more then completed damage
  13+ 64AE AF           .KilledPlayer:          xor     a
  14+ 64AF 32 55 82     .DoneDamage:            ld      (PlayerEnergy),a
  15+ 64B2 AF                                   xor     a                   ; shield is gone
  16+ 64B3 C9                                   ret
  17+ 64B4
# file closed: ./GameEngine/DamagePlayer.asm
 365  64B4              ;..Update Universe Objects.........................................................................................................
 366  64B4                                      INCLUDE "./GameEngine/UpdateUniverseObjects.asm"
# file opened: ./GameEngine/UpdateUniverseObjects.asm
   1+ 64B4              ;..................................................................................................................................
   2+ 64B4              ;                           DEFINE ROTATIONDEBUG 1
   3+ 64B4              ;                           DEFINE CLIPDEBUG 1
   4+ 64B4 00           CurrentShipUniv:        DB      0
   5+ 64B5              ;..................................................................................................................................
   6+ 64B5              ; if ship is destroyed or exploding then z flag is clear, else z flag is set
   7+ 64B5              IsShipDestroyedOrExploding: MACRO
   8+ 64B5 ~                                        ld      a,(UBnKexplDsp)                                 ; is it destroyed
   9+ 64B5 ~                                        and     %10100000                                       ; or exploding
  10+ 64B5                                          ENDM
  11+ 64B5
  12+ 64B5              JumpIfShipNotClose:         MACRO   NotCloseTarget
  13+ 64B5 ~            .CheckIfClose:              ld      hl,(UBnKxlo)                                    ; chigh byte check or just too far away
  14+ 64B5 ~                                        ld      de,(UBnKylo)                                    ; .
  15+ 64B5 ~                                        ld      bc,(UBnKzlo)                                    ; .
  16+ 64B5 ~                                        or      h                                               ; .
  17+ 64B5 ~                                        or      d                                               ; .
  18+ 64B5 ~                                        or      b                                               ; .
  19+ 64B5 ~                                        jp      nz,NotCloseTarget                               ; .
  20+ 64B5 ~            .CheckLowBit7Close:         or      l                                               ; if bit 7 of low is set then still too far
  21+ 64B5 ~                                        or      e                                               ; .
  22+ 64B5 ~                                        or      c                                               ; .
  23+ 64B5 ~                                        ld      iyh,a                                           ; save it in case we need to check bit 6 in collision check
  24+ 64B5 ~                                        and     $80                                             ; .
  25+ 64B5 ~                                        jp      nz,NotCloseTarget                              ; .
  26+ 64B5                                          ENDM
  27+ 64B5
  28+ 64B5              VeryCloseCheck:             MACRO
  29+ 64B5 ~                                        ld      a,iyh                                           ; bit 6 is still too far
  30+ 64B5 ~                                        and     %11000000
  31+ 64B5                                          ENDM
  32+ 64B5
  33+ 64B5              JumpIfNotDockingCheck:      MACRO   NotDocking
  34+ 64B5 ~            .CheckIfDockable:           ld      a,(ShipTypeAddr)                                ; Now we have the correct bank
  35+ 64B5 ~                                        JumpIfANENusng  ShipTypeStation, NotDocking             ; if its not a station so we don't test docking
  36+ 64B5 ~            .IsDockableHostoleCheck:    JumpOnMemBitSet ShipNewBitsAddr, ShipHostileNewBitNbr, NotDocking ; if it is angry then we dont test docking
  37+ 64B5 ~            .CheckHighNoseZ:            JumpIfMemLTNusng  UBnkrotmatNosevZ+1 , 214, NotDocking  ; get get high byte of rotmat this is the magic angle to be within 26 degrees +/-
  38+ 64B5 ~            .GetStationVector:          call    GetStationVectorToWork                          ; Normalise position into XX15 as in effect its a vector from out ship to it given we are always 0,0,0, returns with A holding vector z
  39+ 64B5 ~                                        JumpIfALTNusng  89, NotDocking                          ; if the z axis <89 the we are not in the 22 degree angle,m if its negative then unsigned comparison will cater for this
  40+ 64B5 ~            .CheckAbsRoofXHi:           ld      a,(UBnkrotmatRoofvX+1)                          ; get abs roof vector high
  41+ 64B5 ~                                        and     SignMask8Bit                                    ; .
  42+ 64B5 ~                                        JumpIfALTNusng 80, NotDocking                           ; note 80 decimal for 36.6 degrees horizontal
  43+ 64B5                                          ENDM
  44+ 64B5
  45+ 64B5              ;..................................................................................................................................
  46+ 64B5              ; Replacement for MVEIT routine
  47+ 64B5 AF           UpdateUniverseObjects:  xor     a
  48+ 64B6 32 97 81                             ld      (SelectedUniverseSlot),a                            ; set universe current selected slot to 0
  49+ 64B9 57           .UpdateUniverseLoop:    ld      d,a                                                 ; d is unaffected by GetTypeInSlotA
  50+ 64BA              ;.. If the slot is empty (FF) then skip this slot..................................................................................
  51+ 64BA CD 65 85                             call    GetTypeAtSlotA
  52+ 64BD FE FF                                cp      $FF                                                 ; we don't process empty slots
  53+ 64BF CA 0F 66                             jp      z,.UniverseSlotIsEmpty                              ; .
  54+ 64C2 FD 6F                                ld      iyl,a                                               ; save type into iyl for later
  55+ 64C4 7A           .UniverseObjectFound:   ld      a,d                                                 ; Get back Universe slot as we want it
  56+ 64C5                                      MMUSelectUniverseA                                          ; and we apply roll and pitch
  56+ 64C5 C6 46       >                     add    a,BankUNIVDATA0
  56+ 64C7 ED 92 56    >                     nextreg UniverseMMU,       a
  57+ 64CA              ;-- EVERY ITERATIONS TIDY UP A SINGLE UNIVERSE ITEM., NEED A VAR TO HOLD CURRENT TIDY SLOT
  58+ 64CA                      IFDEF   CLIPDEBUG
  59+ 64CA ~            .DEBUG:                     ld      a,(SelectedUniverseSlot)                        ; if we are debugging clipping routine
  60+ 64CA ~                                        cp      0                                               ; then only work on slot 0
  61+ 64CA ~                                        jr      nz,.ProperUpdate                                ;
  62+ 64CA                      ENDIF
  63+ 64CA                      IFDEF   DEBUG_SHIP_MOVEMENT
  64+ 64CA ~            .DebugUpdate:               call    FixStationPos                                   ; if we are debugging space station code
  65+ 64CA                      ENDIF
  66+ 64CA                      IFDEF   CLIPDEBUG                                                           ; if we are debugging clipping then skip all update code
  67+ 64CA ~                                        jp      .CheckExploding
  68+ 64CA                      ENDIF
  69+ 64CA                                          DISPLAY "TODO: Make all 4 of these 1 call"
  70+ 64CA CD 35 CF     .ProperUpdate:          call    TidyRotation                                        ; determine if its tidy time within the universe model
  71+ 64CD CD 1F D7                             call    ApplyMyRollAndPitch                                 ; Apply our ship movement to universe object
  72+ 64D0 CD 5F D8                             call    ApplyShipRollAndPitch                               ; Apply ships own movement to universe object
  73+ 64D3 CD A5 D9                             call    ApplyShipSpeed                                      ; Apply ships speed to universe object
  74+ 64D6 CD EB C6                             call    UpdateSpeedAndPitch                                 ; update based on rates of speed roll and pitch accelleration/decelleration
  75+ 64D9              ;.. apply ships movement
  76+ 64D9              ;.. If its a space station then see if we are ready to dock........................................................................
  77+ 64D9              .CheckExploding:        IsShipDestroyedOrExploding                                  ; if its destroyed or exploding z flag will be clear
  77+ 64D9 3A 91 C0    >                            ld      a,(UBnKexplDsp)                                 ; is it destroyed
  77+ 64DC E6 A0       >                            and     %10100000                                       ; or exploding
  78+ 64DE C2 F7 65                             jp      nz,.ProcessedUniverseSlot                           ; then no action
  79+ 64E1              ;.. we can't collide with missiles, they collide with us as part of tactics
  80+ 64E1              .CheckIfMissile:        JumpIfMemEqNusng ShipTypeAddr, ShipTypeMissile, .CollisionDone ; Missiles don't have ECM and do collision checks on their tactics phase
  80+ 64E1 3A 4E C4    >                        ld  a,(ShipTypeAddr)
  80+ 64E4 FE 01       >                        cp  ShipTypeMissile
  80+ 64E6 CA BC 65    >                        jp  z,.CollisionDone
  81+ 64E9 CD A3 C6     .ProcessECM:            call    UpdateECM                                           ; Update ECM Counters
  82+ 64EC              .CheckIfClose:          JumpIfShipNotClose .PostCollisionTest
  82+ 64EC 2A 20 C0    >.CheckIfClose:              ld      hl,(UBnKxlo)                                    ; chigh byte check or just too far away
  82+ 64EF ED 5B 23 C0 >                            ld      de,(UBnKylo)                                    ; .
  82+ 64F3 ED 4B 26 C0 >                            ld      bc,(UBnKzlo)                                    ; .
  82+ 64F7 B4          >                            or      h                                               ; .
  82+ 64F8 B2          >                            or      d                                               ; .
  82+ 64F9 B0          >                            or      b                                               ; .
  82+ 64FA C2 BC 65    >                            jp      nz,.PostCollisionTest                               ; .
  82+ 64FD B5          >.CheckLowBit7Close:         or      l                                               ; if bit 7 of low is set then still too far
  82+ 64FE B3          >                            or      e                                               ; .
  82+ 64FF B1          >                            or      c                                               ; .
  82+ 6500 FD 67       >                            ld      iyh,a                                           ; save it in case we need to check bit 6 in collision check
  82+ 6502 E6 80       >                            and     $80                                             ; .
  82+ 6504 C2 BC 65    >                            jp      nz,.PostCollisionTest                              ; .
  83+ 6507              .CheckIfDockable:       JumpIfNotDockingCheck .CollisionCheck                       ; check if we are docking or colliding
  83+ 6507 3A 4E C4    >.CheckIfDockable:           ld      a,(ShipTypeAddr)                                ; Now we have the correct bank
  83+ 650A             >                            JumpIfANENusng  ShipTypeStation, .CollisionCheck             ; if its not a station so we don't test docking
  83+ 650A FE 02       >                        cp     ShipTypeStation
  83+ 650C C2 40 65    >                        jp      nz,.CollisionCheck
  83+ 650F             >.IsDockableHostoleCheck:    JumpOnMemBitSet ShipNewBitsAddr, ShipHostileNewBitNbr, .CollisionCheck ; if it is angry then we dont test docking
  83+ 650F 3A 4F C4    >                        ld      a,(ShipNewBitsAddr)
  83+ 6512 CB 57       >                        bit 	ShipHostileNewBitNbr,a
  83+ 6514 C2 40 65    >                        jp      nz,.CollisionCheck
  83+ 6517             >.CheckHighNoseZ:            JumpIfMemLTNusng  UBnkrotmatNosevZ+1 , 214, .CollisionCheck  ; get get high byte of rotmat this is the magic angle to be within 26 degrees +/-
  83+ 6517 3A 3B C0    >                        ld      a,(UBnkrotmatNosevZ+1)
  83+ 651A FE D6       >                        cp      214
  83+ 651C DA 40 65    >                        jp	  c,.CollisionCheck
  83+ 651F CD 7D 68    >.GetStationVector:          call    GetStationVectorToWork                          ; Normalise position into XX15 as in effect its a vector from out ship to it given we are always 0,0,0, returns with A holding vector z
  83+ 6522             >                            JumpIfALTNusng  89, .CollisionCheck                          ; if the z axis <89 the we are not in the 22 degree angle,m if its negative then unsigned comparison will cater for this
  83+ 6522 FE 59       >                        cp      89
  83+ 6524 DA 40 65    >                        jp		c, .CollisionCheck
  83+ 6527 3A 31 C0    >.CheckAbsRoofXHi:           ld      a,(UBnkrotmatRoofvX+1)                          ; get abs roof vector high
  83+ 652A E6 7F       >                            and     SignMask8Bit                                    ; .
  83+ 652C             >                            JumpIfALTNusng 80, .CollisionCheck                           ; note 80 decimal for 36.6 degrees horizontal
  83+ 652C FE 50       >                        cp      80
  83+ 652E DA 40 65    >                        jp		c, .CollisionCheck
  84+ 6531              ;.. Its passed all validation and we are docking...................................................................................
  85+ 6531              .WeAreDocking:          MMUSelectLayer1
  85+ 6531 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
  86+ 6535 3E 06                                ld        a,$6
  87+ 6537 CD B4 E0                             call      l1_set_border
  88+ 653A              .EnterDockingBay:       ForceTransition ScreenDocking                               ;  Force transition
  88+ 653A 3E 0D       >                        ld      a,ScreenDocking
  88+ 653C 32 37 6A    >                        ld      (ScreenTransitionForced), a
  89+ 653F C9                                   ret                                                         ;  don't bother with other objects
  90+ 6540                                      ; So it is a candiate to test docking. Now we do the position and angle checks
  91+ 6540              ;.. else we are just colliding and have to handle that
  92+ 6540 FD 7D        .CollisionCheck:        ld      a,iyl
  93+ 6542                                      JumpIfAEqNusng ShipTypeStation, .HaveCollided               ; stations dont check bit 6
  93+ 6542 FE 02       >                        cp     ShipTypeStation
  93+ 6544 CA 7D 65    >                        jp      z,.HaveCollided
  94+ 6547                                      JumpIfAEqNusng ShipTypeMissile, .PostCollisionTest          ; Missile collisions are done in the tactics code
  94+ 6547 FE 01       >                        cp     ShipTypeMissile
  94+ 6549 CA BC 65    >                        jp      z,.PostCollisionTest
  95+ 654C              .VeryCloseCheck:        VeryCloseCheck                                              ; bit 6 is still too far
  95+ 654C FD 7C       >                            ld      a,iyh                                           ; bit 6 is still too far
  95+ 654E E6 C0       >                            and     %11000000
  96+ 6550 20 6A                                jr      nz,.PostCollisionTest                               ; .
  97+ 6552 FD 7D        .ScoopableCheck:        ld      a,iyl                                               ; so if its not scoopable
  98+ 6554                                      JumpIfANENusng  ShipTypeScoopable, .HaveCollided            ; then its a collision
  98+ 6554 FE 04       >                        cp     ShipTypeScoopable
  98+ 6556 C2 7D 65    >                        jp      nz,.HaveCollided
  99+ 6559 3A B2 85     .ScoopsEquiped:         ld      a,(FuelScoop)                                       ; if there is no scoop then impact
 100+ 655C                                      JumpIfANENusng  EquipmentItemFitted, .HaveCollided          ; .
 100+ 655C FE FF       >                        cp     EquipmentItemFitted
 100+ 655E C2 7D 65    >                        jp      nz,.HaveCollided
 101+ 6561 3A 25 C0     .ScoopRegion:           ld      a,(UBnKysgn)                                        ; if the y axis is negative then we are OK
 102+ 6564                                      JumpIfAIsZero   .HaveCollided                               ; else its a collision
 102+ 6564 A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
 102+ 6565 CA 7D 65    >                        jp	    z, .HaveCollided
 103+ 6568 CD 17 CA     .CollectedCargo:        call    ShipCargoType
 104+ 656B 57           .DoWeHaveCapacity:      ld      d,a                                                 ; save cargotype
 105+ 656C CD B5 83                             call    CanWeScoopCargoD
 106+ 656F 38 03                                jr      c, .NoRoom
 107+ 6571 CD AD 83     .CanScoop:              call    AddCargoTypeD
 108+ 6574              .NoRoom:                ClearSlotMem    SelectedUniverseSlot                        ; we only need to clear slot list as univ ship is now junk
 108+ 6574 3A 97 81    >                        ld      a,(SelectedUniverseSlot)
 108+ 6577 CD F9 84    >                        call    ClearSlotA
 109+ 657A C3 BC 65                             jp      .PostCollisionTest
 110+ 657D              ; ... Generic collision
 111+ 657D DD 01        .HaveCollided:          break
 112+ 657F                                      JumpIfMemLTNusng DELTA, 5, .SmallBump
 112+ 657F 3A B0 7F    >                        ld      a,(DELTA)
 112+ 6582 FE 05       >                        cp      5
 112+ 6584 DA 93 65    >                        jp	  c,.SmallBump
 113+ 6587 3A 98 C0     .BigBump:               ld      a,(UBnKEnergy)                                      ; get energy level which gives us an approximate to size and health
 114+ 658A                                      SetCarryFlag
 114+ 658A 37          >                        scf
 115+ 658B 17                                   rla                                                         ; divide by 2 but also bring in carry so its 128 + energy / 2
 116+ 658C 47                                   ld      b,a
 117+ 658D CD CD DC                             call    KillShip                                            ; mark ship as dead (if possible)
 118+ 6590 C3 9D 65                             jp      .ApplyDamage
 119+ 6593 3A B0 7F     .SmallBump:             ld      a,(DELTA)                                           ; if out ship speed < 5 then set damage to
 120+ 6596 47                                   ld      b,a
 121+ 6597                              DISPLAY "TODO: det target too"
 122+ 6597 CD E8 DC                             call    DamageShip                                          ; dent target too  TODO make damge totally proportional to speed
 123+ 659A C3 9D 65                             jp      .ApplyDamage
 124+ 659D CD 5F 84     .ApplyDamage:           call    SetSpeedZero
 125+ 65A0 3A 28 C0                             ld      a,(UBnKzsgn)                                        ; front or back
 126+ 65A3 E6 80                                and     $80
 127+ 65A5 20 0C                                jr      nz,.HitRear
 128+ 65A7 3A 53 82                             ld      a,(ForeShield)
 129+ 65AA CD A0 64                             call    ApplyDamage
 130+ 65AD 32 53 82                             ld      (ForeShield),a
 131+ 65B0 C3 BC 65                             jp      .CollisionDone
 132+ 65B3 3A 54 82     .HitRear:               ld      a,(AftShield)
 133+ 65B6 CD A0 64                             call    ApplyDamage
 134+ 65B9 32 54 82                             ld      (AftShield),a
 135+ 65BC              .CollisionDone:
 136+ 65BC              ;.. Now check laser to see if the ship is being shot in sights
 137+ 65BC CD C9 6B     .PostCollisionTest:     call    ShipInSights
 138+ 65BF 30 36                                jr      nc,.ProcessedUniverseSlot                        ; for laser and missile we can check once
 139+ 65C1 3A 6C 82                             ld      a,(CurrLaserPulseRate)
 140+ 65C4                                      JumpIfAIsNotZero .CheckForPulse
 140+ 65C4 A7          >                        and     a
 140+ 65C5 C2 D2 65    >                        jp	    nz,.CheckForPulse
 141+ 65C8                                      JumpIfMemFalse FireLaserPressed,     .NoLaser
 141+ 65C8 3A C2 81    >                        ld      a,(FireLaserPressed)
 141+ 65CB A7          >                        and     a
 141+ 65CC C2 E7 65    >                        jp      nz, .NoLaser
 142+ 65CF C3 D9 65                             jp      .LaserDamage
 143+ 65D2              .CheckForPulse:         JumpIfMemZero CurrLaserPulseOnCount, .NoLaser
 143+ 65D2 3A 7B 82    >                        ld  a,(CurrLaserPulseOnCount)
 143+ 65D5 A7          >                        and a
 143+ 65D6 CA E7 65    >                        jp  z,.NoLaser
 144+ 65D9 3A 76 82     .LaserDamage:           ld      a,(CurrLaserDamageOutput)
 145+ 65DC CD E8 DC                             call    DamageShip
 146+ 65DF 3A 91 C0                             ld      a,(UBnKexplDsp)                                 ; is it destroyed
 147+ 65E2 E6 A0                                and     %10100000
 148+ 65E4 C2 F7 65                             jp      nz,.ProcessedUniverseSlot                       ; can't lock on debris
 149+ 65E7              .NoLaser:
 150+ 65E7              ; Now check missile lock
 151+ 65E7              .PlayerMissileLock:     JumpIfMemNeNusng MissileTargettingFlag, StageMissileTargeting, .ProcessedUniverseSlot
 151+ 65E7 3A 58 82    >                        ld  a,(MissileTargettingFlag)
 151+ 65EA FE FE       >                        cp  StageMissileTargeting
 151+ 65EC C2 F7 65    >                        jp  nz,.ProcessedUniverseSlot
 152+ 65EF 3A 97 81     .LockPlayerMissile:     ld      a,(SelectedUniverseSlot)                        ; set to locked and nto launchedd
 153+ 65F2                                      LockMissileToA                                          ; .
 153+ 65F2 F6 80       >                        or      $80
 153+ 65F4 32 58 82    >                        ld      (MissileTargettingFlag),a
 154+ 65F7              .ProcessedUniverseSlot:
 155+ 65F7              ;...Tactics Section................................................................................................................
 156+ 65F7 3A 97 81     .AreWeReadyForAI:       ld      a,(SelectedUniverseSlot)                        ; get back current slot number
 157+ 65FA                                      IsSlotMissile                                           ; Missiles update every iteration
 157+ 65FA 21 B2 81    >                        ld      hl,UniverseSlotType
 157+ 65FD ED 31       >                        add     hl,a
 157+ 65FF 7E          >                        ld      a,(hl)
 157+ 6600 FE 01       >                        cp      ShipTypeMissile
 158+ 6602 CA 42 66                             jp      z,.UpdateMissile                                ; so we bypass the logic check
 159+ 6605              ;.. For normal ships AI is only updated once every 16th cycle, i.e. CurrentUniverseAI increments though 1 count each game loop....,
 160+ 6605              .CheckIfSlotAITurn:     CallIfMemEqMemusng SelectedUniverseSlot, CurrentUniverseAI, UpdateShip
 160+ 6605 3A 97 81    >                        ld      a,(SelectedUniverseSlot)
 160+ 6608 21 96 81    >                        ld      hl,CurrentUniverseAI
 160+ 660B BE          >                        cp      (hl)
 160+ 660C CC 1F A1    >                        call    z,UpdateShip
 161+ 660F              .UniverseSlotIsEmpty:
 162+ 660F 3A 97 81     .DoneAICheck:           ld      a,(SelectedUniverseSlot)                        ; Move to next ship in loop
 163+ 6612 3C                                   inc     a                                               ; .
 164+ 6613                                      JumpIfAGTENusng   UniverseSlotListSize, .UpdateAICounter; if we are beyond the loop then update the master AI counter and we are done
 164+ 6613 FE 0C       >                        cp     UniverseSlotListSize
 164+ 6615 D2 1E 66    >                        jp		nc,.UpdateAICounter
 165+ 6618 32 97 81                             ld      (SelectedUniverseSlot),a                        ; else update loop pointer
 166+ 661B C3 B9 64                             jp      .UpdateUniverseLoop                             ; if there are more to go we continue
 167+ 661E              .UpdateAICounter:       IncMemMaxNCycle CurrentUniverseAI , UniverseSlotListSize; if we get to AI counter update then we have updated all ships so we are done
 167+ 661E 3A 96 81    >                        ld      a,(CurrentUniverseAI)
 167+ 6621 3C          >                        inc     a
 167+ 6622 FE 0C       >                        cp      UniverseSlotListSize
 167+ 6624 38 01       >                        jr      c,.IncMaxed
 167+ 6626 AF          >                        xor     a
 167+ 6627 32 96 81    >.IncMaxed:              ld      (CurrentUniverseAI),a
 168+ 662A              .CheckIfStationHostile: ReturnIfMemFalse  SetStationHostileFlag                 ; If the space station hostile flag is set
 168+ 662A 3A 98 81    >                        ld      a,(SetStationHostileFlag)
 168+ 662D A7          >                        and     a
 168+ 662E C0          >                        ret     nz
 169+ 662F              .CheckSetStationHostile:ReturnIfMemNeNusng UniverseSlotList, ShipTypeStation    ; and we are on a type space station (now hard coded to be always slot 0 but check as we may have multiple space stations later)
 169+ 662F 3A A6 81    >                        ld   a,(UniverseSlotList)
 169+ 6632 FE 02       >                        cp     ShipTypeStation
 169+ 6634 C8          >                        ret    z
 170+ 6635                                      MMUSelectUniverseN 0                                    ; so we can select universe slot 0 and set it to hostile
 170+ 6635 ED 91 56 46 >                     nextreg UniverseMMU,       BankUNIVDATA0+0
 171+ 6639 CD 5B C6                             call    SetShipHostile
 172+ 663C                                      SetMemFalse    SetStationHostileFlag
 172+ 663C 3E FF       >                        ld      a,$FF
 172+ 663E 32 98 81    >                        ld      (SetStationHostileFlag),a
 173+ 6641 C9                                   ret
 174+ 6642              ;.. For Missiles AI is updated every cycle
 175+ 6642 DD 01        .UpdateMissile:         break                                                   ; Missile AI to add later for now we just fall into UpdateShip
 176+ 6644              ;.CheckForTidy:          ld      a,(TidyCounter)
 177+ 6644              ;                        ld      hl,SelectedUniverseSlot
 178+ 6644              ;                        cp      (hl)
 179+ 6644              ;                        call    z,TidyVectorsIX
 180+ 6644 CD 1F A1                             call    UpdateShip                                      ; we do it this way top avoid double calling
 181+ 6647 C3 0F 66                             jp      .DoneAICheck                                    ; ai if the ai slot to process = missile type
 182+ 664A              ;..................................................................................................................................
 183+ 664A
 184+ 664A 00 00 00...  SaveUBNK:               DS 3*3
 185+ 6653
 186+ 6653 E5 D5 C5 F5  SavePosition:           push    hl,,de,,bc,,af
 187+ 6657 3A B4 64                             ld      a,(CurrentShipUniv)
 188+ 665A FE 02                                cp      2
 189+ 665C 20 31                                jr      nz,.DoneSave
 190+ 665E                                      ;break
 191+ 665E 21 20 C0                             ld      hl, UBnKxlo
 192+ 6661 11 4A 66                             ld      de, SaveUBNK
 193+ 6664 01 09 00                             ld      bc, 3*3
 194+ 6667 ED B0                                ldir
 195+ 6669 3E 00                                ld      a,0
 196+ 666B 32 24 C0                             ld      (UBnKyhi)  ,a
 197+ 666E 32 21 C0                             ld      (UBnKxhi)  ,a
 198+ 6671 32 27 C0                             ld      (UBnKzhi)  ,a
 199+ 6674 32 22 C0                             ld      (UBnKxsgn) ,a
 200+ 6677 32 25 C0                             ld      (UBnKysgn) ,a
 201+ 667A 32 27 C0                             ld      (UBnKzhi)  ,a
 202+ 667D 32 28 C0                             ld      (UBnKzsgn) ,a
 203+ 6680 3E 05                                ld      a, $5
 204+ 6682 32 23 C0                             ld      (UBnKylo)  ,a
 205+ 6685 3E 05                                ld      a, $5
 206+ 6687 32 20 C0                             ld      (UBnKxlo)  ,a
 207+ 668A 3E 6E                                ld      a, $6E
 208+ 668C 32 26 C0                             ld      (UBnKzlo)  ,a
 209+ 668F F1 C1 D1 E1  .DoneSave:              pop     hl,,de,,bc,,af
 210+ 6693 C9                                   ret
 211+ 6694
 212+ 6694 E5 D5 C5 F5  RestorePosition:        push    hl,,de,,bc,,af
 213+ 6698 3A B4 64                             ld      a,(CurrentShipUniv)
 214+ 669B FE 02                                cp      2
 215+ 669D 20 0B                                jr      nz,.DoneSave
 216+ 669F                                      ;break
 217+ 669F 21 4A 66                             ld      hl, SaveUBNK
 218+ 66A2 11 20 C0                             ld      de, UBnKxlo
 219+ 66A5 01 09 00                             ld      bc, 3*3
 220+ 66A8 ED B0                                ldir
 221+ 66AA F1 C1 D1 E1  .DoneSave:              pop     hl,,de,,bc,,af
 222+ 66AE C9                                   ret
 223+ 66AF
 224+ 66AF              ;----------------------------------------------------------------
 225+ 66AF              ;-- Draw all the ships from the perspective of a forward view
 226+ 66AF              ;-- iterates through all slots within this loop
 227+ 66AF AF           DrawForwardShips:       xor     a
 228+ 66B0 32 B4 64     .DrawShipLoop:          ld      (CurrentShipUniv),a
 229+ 66B3 CD 65 85                             call    GetTypeAtSlotA                  ; skip any slot which is set to $FF as its not an active ship slot
 230+ 66B6 FE FF                                cp      $FF                             ; .
 231+ 66B8 28 12                                jr      z,.ProcessedDrawShip            ; .
 232+ 66BA                                      ; Add in a fast check for ship behind to process nodes and if behind jump to processed Draw ship
 233+ 66BA 3A B4 64     .SelectShipToDraw:       ld      a,(CurrentShipUniv)
 234+ 66BD                                      MMUSelectUniverseA
 234+ 66BD C6 46       >                     add    a,BankUNIVDATA0
 234+ 66BF ED 92 56    >                     nextreg UniverseMMU,       a
 235+ 66C2                                      IFDEF ROTATIONDEBUG
 236+ 66C2 ~                                        call    SavePosition
 237+ 66C2                                      ENDIF
 238+ 66C2                                                   DISPLAY "TODO: Tune this"
 239+ 66C2 CD 85 DB     .ProcessUnivShip:       call    ProcessShip          ; The whole explosion logic is now encapsulated in process ship ;TODO TUNE THIS   ;; call    ProcessUnivShip
 240+ 66C5              ; Debris still appears on radar
 241+ 66C5                                      IFDEF ROTATIONDEBUG
 242+ 66C5 ~                                        call    RestorePosition
 243+ 66C5                                      ENDIF
 244+ 66C5              .UpdateRadar:
 245+ 66C5              ;;;Does nothing                       ld      a,BankFrontView
 246+ 66C5              ;;;Does nothing                       MMUSelectScreenA
 247+ 66C5              ;;;Does nothing         ld      a,(CurrentShipUniv)
 248+ 66C5              ;;;Does nothing         MMUSelectUniverseA
 249+ 66C5
 250+ 66C5                                      CallIfMemTrue ConsoleRedrawFlag,UpdateScannerShip ; Always update ship positions when consoel redraw is flagged
 250+ 66C5 3A BF 81    >                        ld      a,(ConsoleRedrawFlag)
 250+ 66C8 A7          >                        and     a
 250+ 66C9 CC DC 74    >                        call    z, UpdateScannerShip
 251+ 66CC 3A B4 64     .ProcessedDrawShip:     ld      a,(CurrentShipUniv)
 252+ 66CF 3C                                   inc     a
 253+ 66D0                                      DISPLAY "TO DO - Add all ships back to radar"
 254+ 66D0                                      ;   DEBUGGING SHIPS RENDERING
 255+ 66D0                                      JumpIfALTNusng   UniverseSlotListSize, .DrawShipLoop
 255+ 66D0 FE 0C       >                        cp      UniverseSlotListSize
 255+ 66D2 DA B0 66    >                        jp		c, .DrawShipLoop
 256+ 66D5              .DrawSunCompass:        MMUSelectSun
 256+ 66D5 ED 91 56 53 >                     nextreg SunMMU,            BankSunData
 257+ 66D9                                      DISPLAY "TODO: Change update to only run with ConsoleRedrawFlag"
 258+ 66D9 CD C2 70                             call    UpdateCompassSun                ; Always update the sun position
 259+ 66DC CD 5A 73                             call    UpdateScannerSun                ; Always attempt to put the sun on the scanner
 260+ 66DF              .CheckPlanetCompass:    ;JumpIfMemFalse SpaceStationSafeZone, .DrawStationCompass
 261+ 66DF              .DrawPlanetCompass:     MMUSelectPlanet
 261+ 66DF ED 91 56 54 >                     nextreg PlanetMMU,         BankPlanetData
 262+ 66E3 CD 91 71                             call    UpdateCompassPlanet
 263+ 66E6 CD 1B 74                             call    UpdateScannerPlanet
 264+ 66E9                                      MMUSelectSpaceStation
 264+ 66E9 ED 91 56 46 >                     nextreg SpaceStationMMU,   BankSpaceStationData
 265+ 66ED CD 15 72                             call    UpdateCompassStation
 266+ 66F0 C9                                   ret
 267+ 66F1              .DrawStationCompass:
 268+ 66F1
 269+ 66F1 C9                                   ret
 270+ 66F2
 271+ 66F2
 272+ 66F2              ;..................................................................................................................................
 273+ 66F2
 274+ 66F2              TestForNextShip:        MacroIsKeyPressed c_Pressed_Quit
 274+ 66F2 3E 46       >                        ld      a,c_Pressed_Quit
 274+ 66F4             >                        MMUSelectKeyboard
 274+ 66F4 ED 91 57 65 >                     nextreg KeyboardMMU,       BankKeyboard
 274+ 66F8 CD BB E1    >                        call    is_key_pressed
 275+ 66FB C0                                   ret     nz
 276+ 66FC 3A 7C 68                             ld      a,(currentDemoShip)
 277+ 66FF 3C                                   inc     a
 278+ 6700 FE 2C                                cp      44
 279+ 6702 20 01                                jr      nz,.TestOK
 280+ 6704 AF                                   xor     a
 281+ 6705 32 7C 68     .TestOK:                ld      (currentDemoShip),a
 282+ 6708 CD C0 84                             call    ClearUnivSlotList
 283+ 670B 3A 7C 68                             ld      a,(currentDemoShip)
 284+ 670E 47                                   ld      b,a
 285+ 670F AF                                   xor     a
 286+ 6710 CD D7 84                             call    SetSlotAToTypeB
 287+ 6713 F5                                   push    af
 288+ 6714                                      MMUSelectUniverseN 2
 288+ 6714 ED 91 56 48 >                     nextreg UniverseMMU,       BankUNIVDATA0+2
 289+ 6718                                      SetSlotAToUnivClass
 289+ 6718 08          >                        ex      af,af'
 289+ 6719 3A 4E C4    >                        ld      a,(ShipTypeAddr)
 289+ 671C 47          >                        ld      b,a
 289+ 671D 08          >                        ex      af,af'
 289+ 671E CD DE 84    >                        call    SetSlotAToClassB
 290+ 6721 F1                                   pop     af
 291+ 6722 CD 6D C6                             call    ResetUBnkData                         ; call the routine in the paged in bank, each universe bank will hold a code copy local to it
 292+ 6725 3A 7C 68                             ld      a,(currentDemoShip)
 293+ 6728                                      MMUSelectShipBank1
 293+ 6728 ED 91 57 3B >					 nextreg ShipModelMMU,	    BankShipModels1
 294+ 672C CD 0F E0                             call    GetShipBankId
 295+ 672F                                      MMUSelectShipBankA
 295+ 672F ED 92 57    >					 nextreg ShipModelMMU,	    a
 296+ 6732 78                                   ld      a,b
 297+ 6733 CD 6A E0                             call    CopyShipToUniverse
 298+ 6736 CD 9E 6B                             call    SetInitialShipPosition
 299+ 6739 CD D6 68                             call    DEBUGSETNODES
 300+ 673C C9                                   ret
 301+ 673D
# file closed: ./GameEngine/UpdateUniverseObjects.asm
 367  673D              ;----------------------------------------------------------------------------------------------------------------------------------
 368  673D 49 6E 74 69  InitialiseMessage       DB "Intialising",0
 368  6741 61 6C 69 73
 368  6745 69 6E 67 00
 369  6749 4C 6F 61 64  LoadingSpritesMessage   DB "LoadingSprites",0
 369  674D 69 6E 67 53
 369  6751 70 72 69 74
 369  6755 65 73 00
 370  6758 49 6E 74 69  InitialisingGalaxies    DB "IntiailisingGalaxies",0
 370  675C 61 69 6C 69
 370  6760 73 69 6E 67
 370  6764 47 61 6C 61
 370  6768 78 69 65 73
 370  676C 00
 371  676D 00           LoadCounter             DB 0
 372  676E 2A 00        SpriteProgress          DB "*",0
 373  6770              ;----------------------------------------------------------------------------------------------------------------------------------
 374  6770              NeedAMessageQueue:
 375  6770              ;..................................................................................................................................
 376  6770                                      INCLUDE "./GameEngine/HyperSpaceTimers.asm"
# file opened: ./GameEngine/HyperSpaceTimers.asm
   1+ 6770              ;----------------------------------------------------------------------------------------------------------------------------------
   2+ 6770 3A 9B 81     UpdateCountdownNumber:  ld		a,(OuterHyperCount)
   3+ 6773 11 CA 67                             ld		de,Hyp_counter
   4+ 6776 0E 9C                                ld	c, -100
   5+ 6778 CD 82 67                             call	.Num1
   6+ 677B 0E F6                                ld	c,-10
   7+ 677D CD 82 67                             call	.Num1
   8+ 6780 0E FF                                ld	c,-1
   9+ 6782 06 2F        .Num1:	                ld	b,'0'-1
  10+ 6784 04           .Num2:	                inc		b
  11+ 6785 81                                   add		a,c
  12+ 6786 38 FC                                jr		c,.Num2
  13+ 6788 91                                   sub 	c
  14+ 6789 C5                                   push	bc
  15+ 678A F5                                   push	af
  16+ 678B 79                                   ld		a,c
  17+ 678C FE FF                                cp		-1
  18+ 678E 78                                   ld		a,b
  19+ 678F 12                                   ld		(de),a
  20+ 6790 13                                   inc		de
  21+ 6791 F1                                   pop		af
  22+ 6792 C1                                   pop		bc
  23+ 6793 C9                                   ret
  24+ 6794
  25+ 6794              ;----------------------------------------------------------------------------------------------------------------------------------
  26+ 6794 54 6F 3A     Hyp_message             DB "To:"
  27+ 6797 00 00 00...  Hyp_to                  DS 32
  28+ 67B7 20           Hyp_space1              DB " "
  29+ 67B8 30 2E 30     Hyp_dist_amount         DB "0.0"
  30+ 67BB 2E           Hyp_decimal             DB "."
  31+ 67BC 30           Hyp_fraction            DB "0"
  32+ 67BD 20 4C 59 00  Hyp_dis_ly              DB " LY",0
  33+ 67C1 43 68 61 72  Hyp_charging            DB "Charging:"
  33+ 67C5 67 69 6E 67
  33+ 67C9 3A
  34+ 67CA 30 30 30 00  Hyp_counter             DB "000",0
  35+ 67CE 00 00 00...  Hyp_centeredTarget      DS 32
  36+ 67EE 00           Hyp_centeredEol         DB 0
  37+ 67EF 00 00 00...  Hyp_bufferpadding       DS 32   ; just in case we get a buffer ovverun. shoudl never get beyond 32 chars
  38+ 680F 00 00 00...  Hyp_centeredCharging    DS 32
  39+ 682F 00           Hyp_centeredEol2        DB 0
  40+ 6830 00 00 00...  Hyp_bufferpadding2      DS 32   ; just in case we get a buffer ovverun. shoudl never get beyond 32 chars
  41+ 6850
  42+ 6850
# file closed: ./GameEngine/HyperSpaceTimers.asm
 377  6850              ;----------------------------------------------------------------------------------------------------------------------------------
 378  6850 3A 95 81     TestPauseMode:          ld      a,(GamePaused)
 379  6853 FE 00                                cp      0
 380  6855 20 16                                jr      nz,.TestForResume
 381  6857 3A BF 7F     .CheckViewMode:         ld      a,(ScreenIndex)                     ; we can only pause if not on screen view
 382  685A                                      ReturnIfAGTENusng       ScreenFront
 382  685A FE 09       >                        cp    ScreenFront
 382  685C D0          >                        ret	 nc
 383  685D              .CheckPauseKey:         MacroIsKeyPressed c_Pressed_Freeze
 383  685D 3E 40       >                        ld      a,c_Pressed_Freeze
 383  685F             >                        MMUSelectKeyboard
 383  685F ED 91 57 65 >                     nextreg KeyboardMMU,       BankKeyboard
 383  6863 CD BB E1    >                        call    is_key_pressed
 384  6866 C0                                   ret     nz
 385  6867              .PausePressed:          SetAFalse                                  ; doesn't really matter if we were in pause already as resume is a different key
 385  6867 3E FF       >                        ld      a,$FF
 386  6869 32 95 81                             ld      (GamePaused),a
 387  686C C9                                   ret
 388  686D              .TestForResume:         MacroIsKeyPressed c_Pressed_Resume                  ; In pause loop so we can check for resume key
 388  686D 3E 42       >                        ld      a,c_Pressed_Resume
 388  686F             >                        MMUSelectKeyboard
 388  686F ED 91 57 65 >                     nextreg KeyboardMMU,       BankKeyboard
 388  6873 CD BB E1    >                        call    is_key_pressed
 389  6876 C0                                   ret     nz
 390  6877 AF           .ResumePressed:         xor     a
 391  6878 32 95 81                             ld      (GamePaused),a                      ; Resume pressed to reset pause state
 392  687B C9                                   ret
 393  687C
 394  687C 0D           currentDemoShip:        DB      13;$12 ; 13 - corirollis
 395  687D
 396  687D
 397  687D 21 20 C0     GetStationVectorToWork: ld      hl,UBnKxlo
 398  6880 11 D4 7F                             ld      de,varVector9ByteWork
 399  6883 01 09 00                             ld      bc,9
 400  6886 ED B0                                ldir
 401  6888 2A D4 7F     .CalcNormalToXX15:      ld      hl, (varVector9ByteWork)  ; X
 402  688B ED 5B D7 7F                          ld      de, (varVector9ByteWork+3); Y
 403  688F ED 4B DA 7F                          ld      bc, (varVector9ByteWork+6); Z
 404  6893 7D                                   ld      a,l
 405  6894 B3                                   or      e
 406  6895 B1                                   or      c
 407  6896 F6 01                                or      1
 408  6898 DD 6F                                ld      ixl,a                   ; or all bytes and with 1 so we have at least a 1
 409  689A 7C                                   ld      a,h
 410  689B B2                                   or      d
 411  689C B0                                   or      b                       ; or all high bytes but don't worry about 1 as its sorted on low bytes
 412  689D C5           .MulBy2Loop:            push    bc
 413  689E DD 45                                ld      b,ixl
 414  68A0 CB 20                                sla     b                       ; Shift ixl left
 415  68A2 DD 68                                ld      ixl,b
 416  68A4 C1                                   pop     bc
 417  68A5 CB 17                                rl      a                       ; roll into a
 418  68A7 38 0E                                jr      c,.TA2                  ; if bit rolled out of rl a then we can't shift any more to the left
 419  68A9                                      ShiftHLLeft1                    ; Shift Left X
 419  68A9 CB 25       >			   sla l
 419  68AB CB 14       >			   rl  h
 420  68AD                                      ShiftDELeft1                    ; Shift Left Y
 420  68AD CB 23       >			   sla e
 420  68AF CB 12       >			   rl  d
 421  68B1                                      ShiftBCLeft1                    ; Shift Left Z
 421  68B1 CB 21       >			   sla c
 421  68B3 CB 10       >			   rl  b
 422  68B5 18 E6                                jr      .MulBy2Loop              ; no need to do jr nc as the first check looks for high bits across all X Y and Z
 423  68B7 3A D6 7F     .TA2:                   ld      a,(varVector9ByteWork+2); x sign
 424  68BA CB 3C                                srl     h
 425  68BC B4                                   or      h
 426  68BD 32 E7 C0                             ld      (XX15VecX),a         ; note this is now a signed highbyte
 427  68C0 3A D9 7F                             ld      a,(varVector9ByteWork+5); y sign
 428  68C3 CB 3A                                srl     d
 429  68C5 B2                                   or      d
 430  68C6 32 E8 C0                             ld      (XX15VecY),a         ; note this is now a signed highbyte
 431  68C9 3A DC 7F                             ld      a,(varVector9ByteWork+8); y sign
 432  68CC CB 38                                srl     b
 433  68CE B0                                   or      b
 434  68CF 32 E9 C0                             ld      (XX15VecZ),a         ; note this is now a signed highbyte
 435  68D2 CD 59 9B                             call    normaliseXX1596S7
 436  68D5 C9                                   ret                          ; will return with a holding Vector Z
 437  68D6
 438  68D6              ;TidyCounter             DB  0
 439  68D6
 440  68D6                          INCLUDE "./debugMatrices.asm"
# file opened: ./debugMatrices.asm
   1+ 68D6
   2+ 68D6
   3+ 68D6 21 F9 68     DEBUGSETNODES:          ld      hl,DEBUGUBNKDATA
   4+ 68D9 11 20 C0                             ld      de,UBnKxlo
   5+ 68DC 01 09 00                             ld      bc,9
   6+ 68DF ED B0                                ldir
   7+ 68E1 21 02 69                             ld      hl,DEBUGROTMATDATA
   8+ 68E4 11 2A C0                             ld      de,UBnkrotmatSidevX
   9+ 68E7 01 12 00                             ld      bc,6*3
  10+ 68EA ED B0                                ldir
  11+ 68EC C9                                   ret
  12+ 68ED
  13+ 68ED 21 F9 68     DEBUGSETPOS:            ld      hl,DEBUGUBNKDATA
  14+ 68F0 11 20 C0                             ld      de,UBnKxlo
  15+ 68F3 01 06 00                             ld      bc,9 - 3
  16+ 68F6 ED B0                                ldir
  17+ 68F8 C9                                   ret
  18+ 68F9
  19+ 68F9              ; culltest
  20+ 68F9              ;DEBUGUBNKDATA:          db      $00,	$00,	$00,	$00,	$00,	$00,	$31,	$03,	$00
  21+ 68F9 00 00 00 00  DEBUGUBNKDATA:          db      $00,	$00,	$00,	$00,	$00,	$00,	$5C,	$07,	$00
  21+ 68FD 00 00 5C 07
  21+ 6901 00
  22+ 6902 00 60 00 00  DEBUGROTMATDATA:        db      $00,	$60,	$00,	$00,	$00,	$00
  22+ 6906 00 00
  23+ 6908 00 00 00 60                          db      $00,	$00,	$00,	$60,	$00,	$00
  23+ 690C 00 00
  24+ 690E 00 00 00 00                          db      $00,	$00,	$00,	$00,	$00,	$E0
  24+ 6912 00 E0
  25+ 6914
  26+ 6914              ; FAILS due to sharp angle, OK now
  27+ 6914              ;DEBUGUBNKDATA:          db      $39,	$01,	$00,	$43,	$01,	$00,	$EF,	$03,	$00
  28+ 6914              ;DEBUGROTMATDATA:        db      $01,	$2F,	$B2,	$CC,	$4C,	$27
  29+ 6914              ;                        db      $17,	$46,	$87,	$3C,	$95,	$20
  30+ 6914              ;                        db      $E2,	$32,	$31,	$8C,	$EF,	$D1
  31+ 6914              ; TOP RIGHT CORNER Passes as python and cobra
  32+ 6914              ;DEBUGUBNKDATA:          db      $39,	$01,	$00,	$43,	$01,	$00,	$5B,	$04,	$00
  33+ 6914              ;DEBUGROTMATDATA:        db      $E2,	$03,	$3A,	$16,	$F5,	$60
  34+ 6914              ;                        db      $D3,	$CE,	$F3,	$BA,	$4E,	$0F
  35+ 6914              ;                        db      $03,	$BE,	$4A,	$4B,	$DB,	$8C
  36+ 6914              ; Looks OK
  37+ 6914              ;DEBUGUBNKDATA:          db      $39,    $01,    $00,    $43,    $01,    $00,    $EE,    $02,    $00
  38+ 6914              ;DEBUGROTMATDATA:        db      $35,    $d8,    $98,    $9f,    $b0,    $1a
  39+ 6914              ;                        db      $4B,    $26,    $CE,    $d6,    $60,    $16
  40+ 6914              ;                        db      $89,    $90,    $c4,    $9f,    $dd,    $d9
  41+ 6914              ;
  42+ 6914              ; Massive horizontal line
  43+ 6914              ; 15th line (or line 14 has corrodinates 05,00 to D8,00) which looks wrong
  44+ 6914              ; node array looks OK, looks liek its sorted as it was both -ve Y off screen fix added
  45+ 6914              ;DEBUGUBNKDATA:          db      $39,    $01,    $00,    $43,    $01,    $00,    $BD,    $03,    $00
  46+ 6914              ;DEBUGROTMATDATA:        db      $59,    $CF,    $06,    $B6,    $61,    $8D
  47+ 6914              ;                        db      $AD,    $B1,    $97,    $4F,    $C9,    $98
  48+ 6914              ;                        db      $61,    $99,    $E0,    $0D,    $11,    $5C
  49+ 6914              ; Line lost in clipping
  50+ 6914              ;DEBUGUBNKDATA:          db      $39,    $01,    $00,    $43,    $01,    $00,    $8B,    $04,    $00
  51+ 6914              ;DEBUGROTMATDATA:        db      $A3,    $4D,    $A9,    $28,    $F8,    $AF
  52+ 6914              ;                        db      $FB,    $97,    $8C,    $B5,    $FB,    $D0
  53+ 6914              ;                        db      $DB,    $3A,    $29,    $CA,    $29,    $1C
  54+ 6914              ;DEBUGUBNKDATA:          db      $5E,    $02,    $00,    $FE,    $00,    $FE,    $E5,    $09,    $00
  55+ 6914              ;DEBUGROTMATDATA:        db      $A6,    $88,    $89,    $BB,    $53,    $4D
  56+ 6914              ;                        db      $6D,    $D9,    $F0,    $99,    $BA,    $9E
  57+ 6914              ;                        db      $4A,    $A8,    $89,    $47,    $DF,    $33
  58+ 6914              ;
  59+ 6914              ;DEBUGUBNKDATA:          db      $ED,    $05,    $00,    $FE,    $00,    $FE,    $F1,    $0A,    $00
  60+ 6914              ;DEBUGROTMATDATA:        db      $1B,    $33,    $DE,    $B4,    $ED,    $C5
  61+ 6914              ;                        db      $73,    $C4,    $BC,    $1E,    $96,    $C4
  62+ 6914              ;                        db      $55,    $B9,    $35,    $D1,    $80,    $0F
  63+ 6914              ; top left off right issue
  64+ 6914              ;DEBUGUBNKDATA:          db      $39,    $01,    $00,    $43,    $01,    $00,    $2F,    $03,    $00
  65+ 6914              ;DEBUGROTMATDATA:        db      $FD,    $50,    $47,    $B0,    $53,    $9A
  66+ 6914              ;                        db      $73,    $B7,    $98,    $C8,    $80,    $A3
  67+ 6914              ;                        db      $E6,    $01,    $81,    $AD,    $B0,    $55
  68+ 6914              ; test middle of screen
  69+ 6914              ;DEBUGUBNKDATA:          db      $00,    $00,    $00,    $00,    $00,    $00,    $20,    $01,    $00
  70+ 6914              ;
  71+ 6914              ;DEBUGROTMATDATA:        db      $FD,    $50,    $47,    $B0,    $53,    $9A
  72+ 6914              ;                        db      $73,    $B7,    $98,    $C8,    $80,    $A3
  73+ 6914              ;                        db      $E6,    $01,    $81,    $AD,    $B0,    $55
  74+ 6914              ; test middle of screen futher away
  75+ 6914              ;DEBUGUBNKDATA:          db      $00,    $00,    $00,    $00,    $00,    $00,    $20,    $02,    $00
  76+ 6914              ;
  77+ 6914              ;DEBUGROTMATDATA:        db      $FD,    $50,    $47,    $B0,    $53,    $9A
  78+ 6914              ;                        db      $73,    $B7,    $98,    $C8,    $80,    $A3
  79+ 6914              ;                        db      $E6,    $01,    $81,    $AD,    $B0,    $55
  80+ 6914
  81+ 6914              ; Test left center clip still warping
  82+ 6914              ;DEBUGUBNKDATA:          db      $80,    $00,    $80,    $00,    $00,    $00,    $20,    $01,    $00
  83+ 6914              ;
  84+ 6914              ;DEBUGROTMATDATA:        db      $FD,    $50,    $47,    $B0,    $53,    $9A
  85+ 6914              ;                        db      $73,    $B7,    $98,    $C8,    $80,    $A3
  86+ 6914              ;                        db      $E6,    $01,    $81,    $AD,    $B0,    $55
  87+ 6914              ; Test right center clip - seems to be warping values towards bottom of screen on clip
  88+ 6914              ;DEBUGUBNKDATA:          db      $80,    $00,    $00,    $00,    $00,    $00,    $20,    $01,    $00
  89+ 6914              ;
  90+ 6914              ;DEBUGROTMATDATA:        db      $FD,    $50,    $47,    $B0,    $53,    $9A
  91+ 6914              ;                        db      $73,    $B7,    $98,    $C8,    $80,    $A3
  92+ 6914              ;                        db      $E6,    $01,    $81,    $AD,    $B0,    $55
  93+ 6914              ; Test top center clip test 1 - good test many ships fail
  94+ 6914              ;DEBUGUBNKDATA:          db      $19,    $00,    $00,    $50,    $00,    $00,    $20,    $01,    $00
  95+ 6914              ;
  96+ 6914              ;DEBUGROTMATDATA:        db      $FD,    $50,    $47,    $B0,    $53,    $9A
  97+ 6914              ;                        db      $73,    $B7,    $98,    $C8,    $80,    $A3
  98+ 6914              ;                        db      $E6,    $01,    $81,    $AD,    $B0,    $55
  99+ 6914              ; Test top center clip test 2 - Poss 2nd ship has an issue with a small line
 100+ 6914              ;DEBUGUBNKDATA:          db      $19,    $00,    $00,    $60,    $00,    $00,    $2F,    $01,    $00
 101+ 6914              ;
 102+ 6914              ;DEBUGROTMATDATA:        db      $FD,    $50,    $47,    $B0,    $53,    $9A
 103+ 6914              ;                        db      $73,    $B7,    $98,    $C8,    $80,    $A3
 104+ 6914              ;                        db      $E6,    $01,    $81,    $AD,    $B0,    $55
 105+ 6914              ; Test bottom center clip ; complet shambles as if its forcing cip to below 128
 106+ 6914              ; looks better now may have some clipping issues maybe ship data
 107+ 6914              ;DEBUGUBNKDATA:          db      $19,    $00,    $00,    $50,    $00,    $80,    $20,    $01,    $00
 108+ 6914              ;
 109+ 6914              ;DEBUGROTMATDATA:        db      $FD,    $50,    $47,    $B0,    $53,    $9A
 110+ 6914              ;                        db      $73,    $B7,    $98,    $C8,    $80,    $A3
 111+ 6914 E6 01 81 AD                          db      $E6,    $01,    $81,    $AD,    $B0,    $55
 111+ 6918 B0 55
 112+ 691A              ; Test left top center clip
 113+ 691A
 114+ 691A              ; Test right top center clip
 115+ 691A              ; Test left bottom center clip
 116+ 691A              ; Test right bottom center clip
 117+ 691A
 118+ 691A              ; Tests with no clip
 119+ 691A              ;DEBUGUBNKDATA:          db      $39,    $00,    $00,    $43,    $00,    $00,    $2F,    $04,    $00
 120+ 691A              ;
 121+ 691A              ;DEBUGROTMATDATA:        db      $FD,    $50,    $47,    $B0,    $53,    $9A
 122+ 691A              ;                        db      $73,    $B7,    $98,    $C8,    $80,    $A3
 123+ 691A              ;                        db      $E6,    $01,    $81,    $AD,    $B0,    $55
 124+ 691A              ;
 125+ 691A              ;DEBUGUBNKDATA:          db      $00,    $00,    $00,    $00,    $00,    $00,    $1F,    $00,    $00
 126+ 691A              ;
 127+ 691A              ; UBNKPOs example 39,01,00,43,01,00,f4,03,00
 128+ 691A              ; rotmat  example b1, 83,ae,5d,b0,1a,5e,de,82,8a,69,16,70,99,52,19,dd,d9
 129+ 691A
# file closed: ./debugMatrices.asm
 441  691A
 442  691A
 443  691A              ; Need this table to handle differnet events
 444  691A              ; 1-main loop update - just general updates specfic to that screen that are not galaxy or stars, e.g. update heat, console
 445  691A              ; cursor key, joystick press
 446  691A              ; cursor key, joystick press
 447  691A              ; non cursor keys presses
 448  691A              ;
 449  691A                                      INCLUDE "./Tables/ScreenControlTable.asm"
# file opened: ./Tables/ScreenControlTable.asm
   1+ 691A              ; First byte is now docked flag
   2+ 691A              ;
   3+ 691A              ; Padded to 8 bytes to allow a * 8 for addressing
   4+ 691A              ; Byte 0   - Docked flag  : 0 = not applicable (always read), 1 = only whilst docked, 2 = only when not docked, 3 = No keypress allowed
   5+ 691A              ; Byte 1   - Screen Id
   6+ 691A              ; Byte 2,3 - address of keypress table
   7+ 691A              ; Byte 4   - Bank with Display code
   8+ 691A              ; Byte 5,6 - Function for display
   9+ 691A              ; Byte 7,8 - Main loop update routine
  10+ 691A              ; Byte 9   - Draw stars Y/N ; also are we in an external view that can have guns?
  11+ 691A              ; byte 10  - Input Blocker (set to 1 will not allow keyboard screen change until flagged, used by transition screens and pause menus)
  12+ 691A              ; byte 11  - Double Buffering 0 = no, 1 = yes
  13+ 691A              ; byte 12,13  - cursor key input routine
  14+ 691A              ; byte 14  - HyperspaceBlock - can not select this screen if in hyperpace - 00 can , 01 can not
  15+ 691A              ; byte 15    padding at the momnent (should add in an "AI enabled flag" for optimistation, hold previous value and on change create ships
  16+ 691A              ; byte 16  - block update ship
  17+ 691A              ; byte 17,18 Function for drawing system Jump (or 0)
  18+ 691A              ; later will add a routine for drawing
  19+ 691A              ;                          0    1                 2                              3                               4                    5                            6                              7                     8                       9   10  11  12                          13                          14  15  16   17               18
  20+ 691A 00 00 7D E0  ScreenKeyMap:           DB 0,   ScreenLocal     , low addr_Pressed_LocalChart,   high addr_Pressed_LocalChart,   BankMenuShrCht,      low draw_local_chart_menu,   high draw_local_chart_menu,    $00,                  $00,                    $00,$00,$00,low local_chart_cursors,    high local_chart_cursors,   $01,$00,$00, $00,             $00
  20+ 691E 32 80 C4 00
  20+ 6922 00 00 00 00
  20+ 6926 DA C4 01 00
  20+ 692A 00 00 00
  21+ 692D 00 01 7B E0  ScreenKeyGalactic:      DB 0,   ScreenGalactic  , low addr_Pressed_GalacticChrt, high addr_Pressed_GalacticChrt, BankMenuGalCht,      low draw_galactic_chart_menu,high draw_galactic_chart_menu, low loop_gc_menu,     high loop_gc_menu,      $00,$00,$00,low galctic_chart_cursors,  high galctic_chart_cursors, $01,$00,$00, $00,             $00
  21+ 6931 33 48 C1 7C
  21+ 6935 C2 00 00 00
  21+ 6939 10 C3 01 00
  21+ 693D 00 00 00
  22+ 6940 01 02 7F E0                          DB 1,   ScreenMarket    , low addr_Pressed_MarketPrices, high addr_Pressed_MarketPrices, BankMenuMarket,      low draw_market_prices_menu, high draw_market_prices_menu,  low loop_market_menu, high loop_market_menu,  $00,$00,$00,$00,                        $00,                        $01,$00,$00, $00,             $00
  22+ 6944 36 81 C3 20
  22+ 6948 C4 00 00 00
  22+ 694C 00 00 01 00
  22+ 6950 00 00 00
  23+ 6953 02 03 7F E0                          DB 2,   ScreenMarketDsp , low addr_Pressed_MarketPrices, high addr_Pressed_MarketPrices, BankMenuMarket,      low draw_market_prices_menu, high draw_market_prices_menu,  $00,                  $00,                    $00,$00,$00,$00,                        $00,                        $01,$00,$00, $00,             $00
  23+ 6957 36 81 C3 00
  23+ 695B 00 00 00 00
  23+ 695F 00 00 01 00
  23+ 6963 00 00 00
  24+ 6966 00 04 81 E0  ScreenCmdr:             DB 0,   ScreenStatus    , low addr_Pressed_Status,       high addr_Pressed_Status,       BankMenuStatus,      low draw_status_menu,        high draw_status_menu,         low loop_STAT_menu,  high loop_STAT_menu,     $00,$00,$00,$00,                        $00,                        $01,$00,$00, $00,             $00
  24+ 696A 3F 41 CE 91
  24+ 696E CE 00 00 00
  24+ 6972 00 00 01 00
  24+ 6976 00 00 00
  25+ 6979 00 05 83 E0                          DB 0,   ScreenInvent    , low addr_Pressed_Inventory,    high addr_Pressed_Inventory,    BankMenuInvent,      low draw_inventory_menu,     high draw_inventory_menu,      $00,                  $00,                    $00,$00,$00,$00,                        $00,                        $01,$00,$00, $00,             $00
  25+ 697D 34 07 C2 00
  25+ 6981 00 00 00 00
  25+ 6985 00 00 01 00
  25+ 6989 00 00 00
  26+ 698C 00 06 91 E0                          DB 0,   ScreenPlanet    , low addr_Pressed_PlanetData,   high addr_Pressed_PlanetData,   BankMenuSystem,      low draw_system_data_menu,   high draw_system_data_menu,    $00,                  $00,                    $00,$00,$00,$00,                        $00,                        $01,$00,$00, $00,             $00
  26+ 6990 35 13 C3 00
  26+ 6994 00 00 00 00
  26+ 6998 00 00 01 00
  26+ 699C 00 00 00
  27+ 699F 01 07 79 E0                          DB 1,   ScreenEquip     , low addr_Pressed_Equip,        high addr_Pressed_Equip,        BankMenuEquipS,      low draw_eqshp_menu,         high draw_eqshp_menu,          low loop_eqshp_menu,  high loop_eqshp_menu,   $00,$00,$00,$00,                        $00,                        $01,$00,$00, $00,             $00
  27+ 69A3 40 EA D3 86
  27+ 69A7 D4 00 00 00
  27+ 69AB 00 00 01 00
  27+ 69AF 00 00 00
  28+ 69B2 01 08 73 E0                          DB 1,   ScreenLaunch    , low addr_Pressed_Launch,       high addr_Pressed_Launch,       BankLaunchShip,      low draw_launch_ship,        high draw_launch_ship,         low loop_launch_ship, high loop_launch_ship,  $00,$01,$01,$00,                        $00,                        $01,$00,$FF, $00,             $00
  28+ 69B6 41 79 C1 63
  28+ 69BA C2 00 01 01
  28+ 69BE 00 00 01 00
  28+ 69C2 FF 00 00
  29+ 69C5 02 09 49 E0  ScreenKeyFront:         DB 2,   ScreenFront     , low addr_Pressed_Front,        high addr_Pressed_Front,        BankFrontView,       low draw_front_view,         high draw_front_view,          low update_front_view,high update_front_view, $01,$00,$01,low input_front_view,       high input_front_view,      $00,$00,$00, low front_warp,  high front_warp
  29+ 69C9 3E 6A C0 E1
  29+ 69CD C0 01 00 01
  29+ 69D1 05 C3 00 00
  29+ 69D5 00 F1 C2
  30+ 69D8 02 0A 49 E0                          DB 2,   ScreenAft       , low addr_Pressed_Front,        high addr_Pressed_Front,        BankFrontView,       low draw_front_view,         high draw_front_view,          $00,                  $00,                    $01,$00,$01,low input_front_view,       high input_front_view,      $00,$00,$00, low front_warp,  high front_warp
  30+ 69DC 3E 6A C0 00
  30+ 69E0 00 01 00 01
  30+ 69E4 05 C3 00 00
  30+ 69E8 00 F1 C2
  31+ 69EB 02 0B 49 E0                          DB 2,   ScreenLeft      , low addr_Pressed_Front,        high addr_Pressed_Front,        BankFrontView,       low draw_front_view,         high draw_front_view,          $00,                  $00,                    $01,$00,$01,low input_front_view,       high input_front_view,      $00,$00,$00, low front_warp,  high front_warp
  31+ 69EF 3E 6A C0 00
  31+ 69F3 00 01 00 01
  31+ 69F7 05 C3 00 00
  31+ 69FB 00 F1 C2
  32+ 69FE 02 0C 49 E0                          DB 2,   ScreenRight     , low addr_Pressed_Front,        high addr_Pressed_Front,        BankFrontView,       low draw_front_view,         high draw_front_view,          $00,                  $00,                    $01,$00,$01,low input_front_view,       high input_front_view,      $00,$00,$00, low front_warp,  high front_warp
  32+ 6A02 3E 6A C0 00
  32+ 6A06 00 01 00 01
  32+ 6A0A 05 C3 00 00
  32+ 6A0E 00 F1 C2
  33+ 6A11 03 0D FF FF                          DB 3,   ScreenDocking   , $FF,                           $FF,                            BankLaunchShip,      low draw_docking_ship,       high draw_docking_ship,        low loop_docking_ship,high loop_docking_ship, $00,$01,$01,$00,                        $00,                        $01,$00,$FF, $00,             $00
  33+ 6A15 41 F5 C1 98
  33+ 6A19 C2 00 01 01
  33+ 6A1D 00 00 01 00
  33+ 6A21 FF 00 00
  34+ 6A24 01 0E FF FF                          DB 1,   ScreenHyperspace, $FF,                           $FF,                            BankFrontView,       low draw_hyperspace,         high draw_hyperspace,          low loop_hyperspace,  high loop_hyperspace,   $00,$01,$01,$00,                        $00,                        $01,$00,$FF, $00,             $00
  34+ 6A28 3E AB C2 02
  34+ 6A2C C3 00 01 01
  34+ 6A30 00 00 01 00
  34+ 6A34 FF 00 00
  35+ 6A37
  36+ 6A37              ;               DB low addr_Pressed_Aft,          high addr_Pressed_Aft,          BankMenuGalCht,      low SelectFrontView,         high SelectFrontView,          $00,$00,$00,$00,$00,$00,$00,$00,$00,$00
  37+ 6A37              ;               DB low addr_Pressed_Left,         high addr_Pressed_Left,         BankMenuGalCht,      low SelectFrontView,         high SelectFrontView,          $00,$00,$00,$00,$00,$00,$00,$00,$00,$00
  38+ 6A37              ;               DB low addr_Pressed_Right,        high addr_Pressed_Right,        BankMenuGalCht,      low SelectFrontView,         high SelectFrontView,          $00,$00,$00,$00,$00,$00,$00,$00,$00,$00
  39+ 6A37              ScreenMapRow        EQU ScreenKeyGalactic - ScreenKeyMap
  40+ 6A37              ScreenMapLen        EQU ($ - ScreenKeyMap) / ScreenMapRow
  41+ 6A37              ScreenViewsStart    EQU (ScreenKeyFront - ScreenKeyMap)/ScreenMapRow
  42+ 6A37              ScreenCount         EQU 15
  43+ 6A37
# file closed: ./Tables/ScreenControlTable.asm
 450  6A37
 451  6A37 FF           ScreenTransitionForced  DB $FF
 452  6A38                  INCLUDE "./GameEngine/resetUniverse.asm"
# file opened: ./GameEngine/resetUniverse.asm
   1+ 6A38              ; Use bank 0 as source and bank 7 as write target
   2+ 6A38              ResetUniv:              MMUSelectCpySrcN BankUNIVDATA0	         ; master universe def in bank 0
   2+ 6A38 ED 91 50 46 >                     nextreg DMACpySourceMMU,	BankUNIVDATA0
   3+ 6A3C 3E 01                                ld		a,1             				 ; we can read bank 0 as if it was rom
   4+ 6A3E 06 0C                                ld		b,12
   5+ 6A40 C5 F5        .ResetCopyLoop:         push	bc,,af
   6+ 6A42                                      MMUSelectUniverseA			             ; copy from bank 0 to 71 to 12
   6+ 6A42 C6 46       >                     add    a,BankUNIVDATA0
   6+ 6A44 ED 92 56    >                     nextreg UniverseMMU,       a
   7+ 6A47 21 00 C0                             ld		hl,UniverseBankAddr
   8+ 6A4A 11 00 00                             ld		de,dmaCopySrcAddr
   9+ 6A4D 01 2F 1E                             ld		bc,UnivBankSize
  10+ 6A50 CD 58 7E                             call	memcopy_dma
  11+ 6A53 F1 C1                                pop		bc,,af
  12+ 6A55 57                                   ld      d,a
  13+ 6A56 C6 41                                add     "A"
  14+ 6A58 32 0B C0                             ld      (StartOfUnivN),a
  15+ 6A5B 7A                                   ld      a,d
  16+ 6A5C 3C                                   inc		a
  17+ 6A5D 10 E1                                djnz	.ResetCopyLoop
  18+ 6A5F C9                                   ret
  19+ 6A60
  20+ 6A60              ; Use bank 0 as source and bank 7 as write target
  21+ 6A60              ResetGalaxy:            MMUSelectCpySrcN BankGalaxyData0	     ; master universe def in bank 0 we can read bank 0 as if it was rom
  21+ 6A60 ED 91 50 5B >                     nextreg DMACpySourceMMU,	BankGalaxyData0
  22+ 6A64 3E 5C                                ld		a,BankGalaxyData1 			   	 ; and write to real location for galaxy data
  23+ 6A66 06 07                                ld		b,7                              ; 8 galaxies but we start with galaxy 0
  24+ 6A68 0E 01                                ld      c,1                              ;
  25+ 6A6A F5           .ResetCopyLoop:         push	af                               ;
  26+ 6A6B C5                                   push	bc                               ;
  27+ 6A6C                                      MMUSelectGalaxyA    	                 ; copy from bank 0 to galaxy 1 to 7
  27+ 6A6C ED 92 57    >                     nextreg GalaxyDataMMU,     a
  28+ 6A6F 21 00 E0                             ld		hl,GalaxyDataAddr                ; using dma transfer
  29+ 6A72 11 00 00                             ld		de,dmaCopySrcAddr                ; .
  30+ 6A75 01 DC 1C                             ld		bc,GalaxyBankSize                ; .
  31+ 6A78 CD 58 7E                             call	memcopy_dma                      ; .
  32+ 6A7B C1                                   pop		bc                               ; .
  33+ 6A7C 21 0F E0                             ld      hl, galaxy_pg_cnt                ; write out the galaxy page nbr to the page so we can diagnose page swapping
  34+ 6A7F 79                                   ld      a,c                              ;
  35+ 6A80 C6 30                                add     a, $30                           ; add $30 (48) to get ascii of galaxy nbr
  36+ 6A82 77                                   ld      (hl),a                           ; .
  37+ 6A83 0C                                   inc     c                                ; Do next bank
  38+ 6A84 F1                                   pop     af                               ; .
  39+ 6A85 3C                                   inc		a                                ; .
  40+ 6A86 10 E2                                djnz	.ResetCopyLoop                    ; .
  41+ 6A88 C9                                   ret
  42+ 6A89
  43+ 6A89 06 08        SeedAllGalaxies:        ld          b,8
  44+ 6A8B 0E 5B                                ld          c,BankGalaxyData0
  45+ 6A8D C5           .SeedAllGalaxiesLoop:   push        bc
  46+ 6A8E 79                                   ld          a,c
  47+ 6A8F                                      MMUSelectGalaxyA
  47+ 6A8F ED 92 57    >                     nextreg GalaxyDataMMU,     a
  48+ 6A92 CD 9F FC                             call        SeedGalaxy
  49+ 6A95 C1                                   pop         bc
  50+ 6A96 0C                                   inc         c
  51+ 6A97 10 F4                                djnz        .SeedAllGalaxiesLoop
  52+ 6A99 C9                                   ret
# file closed: ./GameEngine/resetUniverse.asm
 453  6A9A
 454  6A9A
 455  6A9A              ;----------------------------------------------------------------------------------------------------------------------------------
 456  6A9A                                      DISPLAY "TODO: Check collision detection as currently can destroy space station"
 457  6A9A                                      DISPLAY "TODO: Docking works but bouncing off is wrong for space station"
 458  6A9A
 459  6A9A 3A 67 69     InitialiseCommander:    ld      a,(ScreenCmdr+1)
 460  6A9D C3 A9 6A                             jp      SetScreenA
 461  6AA0
 462  6AA0 3A C6 69     InitialiseFrontView:    ld      a,(ScreenKeyFront+1)
 463  6AA3 C3 A9 6A                             jp      SetScreenA
 464  6AA6              ; false ret here as we get it free from jp
 465  6AA6              ;----------------------------------------------------------------------------------------------------------------------------------
 466  6AA6                                      INCLUDE "./GameEngine/SetScreenA.asm"
# file opened: ./GameEngine/SetScreenA.asm
   1+ 6AA6              ; SetScreenA.asm
   2+ 6AA6              ;----------------------------------------------------------------------------------------------------------------------------------
   3+ 6AA6 C3 A6 6A     InvalidScreenBlock:     jp     InvalidScreenBlock
   4+ 6AA9              SetScreenA:             JumpIfAGTENusng ScreenCount, InvalidScreenBlock
   4+ 6AA9 FE 0F       >                        cp     ScreenCount
   4+ 6AAB D2 A6 6A    >                        jp		nc,InvalidScreenBlock
   5+ 6AAE 32 BF 7F     .SetUpIndex:            ld      (ScreenIndex),a                 ; Set screen index to a
   6+ 6AB1 57           .SetUpIX:               ld      d,a
   7+ 6AB2 1E 13                                ld      e,ScreenMapRow
   8+ 6AB4 ED 30                                mul
   9+ 6AB6 DD 21 1A 69                          ld      ix,ScreenKeyMap
  10+ 6ABA DD 19                                add     ix,de
  11+ 6ABC DD 22 C0 7F                          ld      (ScreenIndexTablePointer),ix    ; optimises later fetches
  12+ 6AC0                                      ClearForceTransition                    ; In case it was called by a brute force change in an update loop
  12+ 6AC0 3E FF       >                        ld      a,$FF
  12+ 6AC2 32 37 6A    >                        ld      (ScreenTransitionForced),a
  13+ 6AC5 32 BE 7F                             ld      (ScreenChanged),a               ; Set screen changed to FF
  14+ 6AC8 DD 7E 09     .IsItAViewPort:         ld      a,(ix+9)                        ; Screen Map Byte 9  - Draw stars Y/N and also guns present
  15+ 6ACB 32 9C 5F                             ld      (CheckIfViewUpdate+1),a         ; Set flag to determine if we are on an exterior view
  16+ 6ACE                                      JumpIfAIsZero .NotViewPort              ;
  16+ 6ACE A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
  16+ 6ACF CA DE 6A    >                        jp	    z, .NotViewPort
  17+ 6AD2 DD 7E 01                             ld      a,(ix+1)                        ; get screen view number
  18+ 6AD5 D6 09                                sub     ScreenFront                     ; Now a = screen number 0 = front, 1 = aft, 2 = left 3 = right
  19+ 6AD7                                      MMUSelectCommander                      ; Load view laser to current
  19+ 6AD7 ED 91 57 38 >                     nextreg CommanderMMU,       BankCommander
  20+ 6ADB CD 0E E3                             call    LoadLaserToCurrent              ;
  21+ 6ADE DD 7E 04     .NotViewPort:           ld      a,(ix+4)                        ; Screen Map Byte 4   - Bank with Display code
  22+ 6AE1 32 23 60                             ld      (ScreenLoopBank+1),a            ; setup loop
  23+ 6AE4 32 68 5F                             ld      (HandleBankSelect+1),a          ; setup cursor keys
  24+ 6AE7 32 5F 61                             ld      (WarpMMUBank+1),a               ; WarpSFXHandler
  25+ 6AEA                                      MMUSelectScreenA
  25+ 6AEA ED 92 56    >                     nextreg ScreenBankMMU,		a
  26+ 6AED DD 7E 05                             ld      a,(ix+5)                        ; Screen Map Byte 5 & 6 - Function for display initialisation
  27+ 6AF0 32 30 6B                             ld      (ScreenUpdateAddr+1),a          ; .
  28+ 6AF3 DD 7E 06                             ld      a,(ix+6)                        ; .
  29+ 6AF6 32 31 6B                             ld      (ScreenUpdateAddr+2),a          ; .
  30+ 6AF9 DD 7E 07                             ld      a,(ix+7)                        ; Screen Map Byte 7 & 8 - Main loop update routine
  31+ 6AFC 32 28 60                             ld      (ScreenLoopJP+1),a              ; .
  32+ 6AFF DD 7E 08                             ld      a,(ix+8)                        ; .
  33+ 6B02 32 29 60                             ld      (ScreenLoopJP+2),a              ; .
  34+ 6B05 DD 7E 0A                             ld      a,(ix+10)                       ; Screen Map Byte 10  - Input Blocker (set to 1 will not allow keyboard screen change until flagged, used by transition screens and pause menus)
  35+ 6B08 32 35 5F                             ld      (InputBlockerCheck+1),a          ; Set flag to block transitions as needed e.g. launch screen
  36+ 6B0B DD 7E 0B                             ld      a,(ix+11)                       ; Screen Map Byte 11  - Double Buffering 0 = no, 1 = yes
  37+ 6B0E 32 40 62                             ld      (DoubleBufferCheck+1),a
  38+ 6B11 DD 7E 0C                             ld      a,(ix+12)
  39+ 6B14 32 6D 5F                             ld      (CallCursorRoutine+1),a
  40+ 6B17 DD 7E 0D                             ld      a,(ix+13)
  41+ 6B1A 32 6E 5F                             ld      (CallCursorRoutine+2),a
  42+ 6B1D DD 7E 10                             ld      a,(ix+16)
  43+ 6B20 32 8E 5F                             ld      (UpdateShipsControl+1),a       ; determin if we call update universe objects in this screen
  44+ 6B23 DD 7E 11                             ld      a,(ix+17)
  45+ 6B26 32 64 61                             ld      (WarpRoutineAddr+1),a
  46+ 6B29 DD 7E 12                             ld      a,(ix+18)
  47+ 6B2C 32 65 61                             ld      (WarpRoutineAddr+2),a
  48+ 6B2F C3 00 00     ScreenUpdateAddr:       jp      $0000                          ; We can just drop out now and also get a free ret from caller
  49+ 6B32
# file closed: ./GameEngine/SetScreenA.asm
 467  6B32                                      INCLUDE "./GameEngine/ViewKeyTest.asm"
# file opened: ./GameEngine/ViewKeyTest.asm
   1+ 6B32 3A BF 7F     ViewKeyTest:            ld      a,(ScreenIndex)
   2+ 6B35 4F                                   ld      c,a
   3+ 6B36 06 0F                                ld      b,ScreenMapLen                  ; For now until add screens are added
   4+ 6B38 DD 21 1A 69                          ld      ix,ScreenKeyMap                 ; IX = table head for scanning
   5+ 6B3C 2A 9A 81                             ld      hl,(InnerHyperCount)
   6+ 6B3F 7C                                   ld      a,h
   7+ 6B40 B5                                   or      l
   8+ 6B41 FD 67                                ld      iyh,a
   9+ 6B43 FD 7C        ViewScanLoop:           ld      a,iyh
  10+ 6B45 A7           .HyperspaceCountdown:   and     a
  11+ 6B46 28 08                                jr      z,.CheckDockedFlag
  12+ 6B48 DD 7E 0E                             ld      a,(ix+14)
  13+ 6B4B FE 01                                cp      1
  14+ 6B4D CA 96 6B                             jp      z,NotReadNextKey
  15+ 6B50 DD 7E 00     .CheckDockedFlag:       ld      a,(ix+0)                        ; Screen Map Byte 0 Docked keyboard read flag
  16+ 6B53              ; 0 = not applicable (always read), 1 = only whilst docked, 2 = only when not docked, 3 = No keypress allowed
  17+ 6B53                                      JumpIfAEqNusng 3, NotReadNextKey        ; No keypress allowed at all (e.g. in hyperspace)
  17+ 6B53 FE 03       >                        cp     3
  17+ 6B55 CA 96 6B    >                        jp      z,NotReadNextKey
  18+ 6B58                                      JumpIfAIsZero    .CanReadKey            ; if its the skip check for docking status
  18+ 6B58 A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
  18+ 6B59 CA 73 6B    >                        jp	    z, .CanReadKey
  19+ 6B5C 57           .DocCheck:              ld      d,a                             ; save ix+0 value
  20+ 6B5D                                      JumpIfMemEqNusng DockedFlag, StateNormal, .NotDockedCheck ; if we are not in a docked state the we ar egood
  20+ 6B5D 3A 94 81    >                        ld  a,(DockedFlag)
  20+ 6B60 FE 00       >                        cp  StateNormal
  20+ 6B62 CA 6D 6B    >                        jp  z,.NotDockedCheck
  21+ 6B65 7A           .DockedCheck:           ld      a,d                             ; we are docked so only ix+0 value of 1 is allowed
  22+ 6B66                                      JumpIfANENusng 1, NotReadNextKey        ; if we are docked and its not 1 then don't read
  22+ 6B66 FE 01       >                        cp     1
  22+ 6B68 C2 96 6B    >                        jp      nz,NotReadNextKey
  23+ 6B6B 18 06                                jr      .CanReadKey                     ; we can now scan as normal  as its 2 and docked
  24+ 6B6D 7A           .NotDockedCheck:        ld      a,d                             ; if we are not docked then code 2 is not keyscan allowed
  25+ 6B6E                                      JumpIfANENusng 2,NotReadNextKey
  25+ 6B6E FE 02       >                        cp     2
  25+ 6B70 C2 96 6B    >                        jp      nz,NotReadNextKey
  26+ 6B73 DD 7E 01     .CanReadKey:            ld      a,(ix+1)                        ; Screen Map Byte 1 Screen Id
  27+ 6B76 B9                                   cp      c                               ; is the index the current screen, if so skip the scan
  28+ 6B77 5F                                   ld      e,a
  29+ 6B78 28 1C                                jr      z,NotReadNextKey                ; we cant transition to current screen
  30+ 6B7A DD 7E 03                             ld      a,(ix+3)                        ; Screen Map Byte 3 - address of keypress table
  31+ 6B7D FE FF                                cp      $FF                             ; if upper byte is FF then we do not respond
  32+ 6B7F 28 15                                jr      z,NotReadNextKey
  33+ 6B81 32 8C 6B                             ld      (ReadKeyAddr+2),a               ; Poke address into the ld hl,(....) below
  34+ 6B84 DD 7E 02                             ld      a,(ix+2)                        ; Screen Map Byte 2 - address of keypress table
  35+ 6B87 32 8B 6B                             ld      (ReadKeyAddr+1),a
  36+ 6B8A 2A 00 00     ReadKeyAddr:            ld      hl,($0000)                      ; address is entry in the pointer table to the actual keypress
  37+ 6B8D 7E                                   ld      a,(hl)                          ; now fetch the actual keypress
  38+ 6B8E                                      JumpIfAIsZero NotReadNextKey
  38+ 6B8E A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
  38+ 6B8F CA 96 6B    >                        jp	    z, NotReadNextKey
  39+ 6B92 7B           .ValidScreenChange:     ld      a,e                             ; entering here e= current screen search number
  40+ 6B93 C3 A9 6A                             jp      SetScreenA
  41+ 6B96              ;--- CODE WILL NOT FALL TO HERE ---
  42+ 6B96 11 13 00     NotReadNextKey:         ld      de,ScreenMapRow
  43+ 6B99 DD 19                                add     ix,de                           ; we have only processed 3 of 8 bytes at here
  44+ 6B9B 10 A6                                djnz    ViewScanLoop
  45+ 6B9D C9                                   ret
  46+ 6B9E
# file closed: ./GameEngine/ViewKeyTest.asm
 468  6B9E              ;----------------------------------------------------------------------------------------------------------------------------------
 469  6B9E              ; Set initial ship position as X,Y,Z 000,000,03B4
 470  6B9E 21 00 00     SetInitialShipPosition: ld      hl,$0000
 471  6BA1 22 20 C0                             ld      (UBnKxlo),hl
 472  6BA4 21 00 00                             ld      hl,$0000
 473  6BA7 22 23 C0                             ld      (UBnKylo),hl
 474  6BAA 21 B4 03                             ld      hl,$03B4
 475  6BAD 22 26 C0                             ld      (UBnKzlo),hl
 476  6BB0 AF                                   xor     a
 477  6BB1 32 22 C0                             ld      (UBnKxsgn),a
 478  6BB4 32 25 C0                             ld      (UBnKysgn),a
 479  6BB7 32 28 C0                             ld      (UBnKzsgn),a
 480  6BBA                          DISPLAY "TODO:  call    Reset TODO"
 481  6BBA CD FD CA                             call	InitialiseOrientation            ;#00;
 482  6BBD 3E 01                                ld      a,1
 483  6BBF 32 B0 7F                             ld      (DELTA),a
 484  6BC2 21 04 00                             ld      hl,4
 485  6BC5 22 B1 7F                             ld      (DELTA4),hl
 486  6BC8 C9                                   ret
 487  6BC9
 488  6BC9              ; Checks to see if current ship swapped in is in our sights
 489  6BC9              ; we don;t need to deal with planets or sun as they have their own memory bank
 490  6BC9              ShipInSights:           ClearCarryFlag                          ; Carry clear no hit
 490  6BC9 B7          >                        or a
 491  6BCA                                      ReturnIfMemIsNegative UBnKzsgn
 491  6BCA 3A 28 C0    >                        ld      a,(UBnKzsgn)
 491  6BCD E6 80       >                        and     $80
 491  6BCF C0          >                        ret     nz
 492  6BD0 3A 91 C0                             ld      a,(UBnKexplDsp)                 ; get exploding flag and or with x and y high
 493  6BD3 2A 20 C0                             ld      hl,(UBnKxlo)                    ; do 16 bit fetch as we will often need both bytes
 494  6BD6 ED 4B 23 C0                          ld      bc,(UBnKylo)                    ; .
 495  6BDA B4                                   or      h
 496  6BDB B0                                   or      b
 497  6BDC C0                                   ret     nz                              ; if exploding or x hi or y hi are set then its nto targetable
 498  6BDD 7D                                   ld      a,l                             ; hl =xlo ^ 2
 499  6BDE                                      DEEquSquareA                            ; .
 499  6BDE 57          >                        ld  d,a
 499  6BDF 5F          >                        ld  e,a
 499  6BE0 ED 30       >                        mul de
 500  6BE2 62 6B                                ld      hl,de                           ; .
 501  6BE4 79                                   ld      a,c                             ; de = de = ylo ^ 2
 502  6BE5                                      DEEquSquareA                            ; .
 502  6BE5 57          >                        ld  d,a
 502  6BE6 5F          >                        ld  e,a
 502  6BE7 ED 30       >                        mul de
 503  6BE9 19                                   add     hl,de                           ; hl = xlo ^ 2 + ylo ^ 2
 504  6BEA D8                                   ret     c                               ; if there was a carry then out of line of sight
 505  6BEB ED 5B 38 C4                          ld      de,(MissileLockLoAddr)          ; get targettable area ^ 2 from blueprint copy
 506  6BEF                                      cpHLDE                                  ; now compare x^2 + y^2 to target area
 506  6BEF E5          >                        push    hl
 506  6BF0 A7          >                        and     a
 506  6BF1 ED 52       >                        sbc     hl,de
 506  6BF3 E1          >                        pop     hl
 507  6BF4 28 01                                jr      z,.EdgeHit                      ; if its an edge hit then we need to set carry
 508  6BF6 C9                                   ret                                     ; if its < area then its a hit and carry is set, we will not work on =
 509  6BF7              .EdgeHit:               SetCarryFlag                            ; its an edge hit then we need to set carry
 509  6BF7 37          >                        scf
 510  6BF8 C9                                   ret
 511  6BF9                          INCLUDE "./Views/ConsoleDrawing.asm"
# file opened: ./Views/ConsoleDrawing.asm
   1+ 6BF9              ; bc = start position, d = length, e = colour
   2+ 6BF9              ;                        DEFINE MISSILEDIAGNOSTICS 1
   3+ 6BF9 1E 10        Draw3LineBar:           ld      e,16
   4+ 6BFB C5 D5                                push    bc,,de
   5+ 6BFD                                      MMUSelectLayer2
   5+ 6BFD ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
   6+ 6C01 CD A7 E7                             call    l2_draw_horz_line
   7+ 6C04 D1 C1                                pop     bc,,de
   8+ 6C06 05                                   dec     b
   9+ 6C07 C5 D5                                push    bc,,de
  10+ 6C09 1E 14                                ld      e,20
  11+ 6C0B                                      MMUSelectLayer2
  11+ 6C0B ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
  12+ 6C0F CD A7 E7                             call    l2_draw_horz_line
  13+ 6C12 D1 C1                                pop     bc,,de
  14+ 6C14 05                                   dec     b
  15+ 6C15                                      MMUSelectLayer2
  15+ 6C15 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
  16+ 6C19 CD A7 E7                             call    l2_draw_horz_line
  17+ 6C1C C9                                   ret
  18+ 6C1D
  19+ 6C1D 1E 7C        DrawColourCodedBar:     ld      e,124
  20+ 6C1F FE 28                                cp      40
  21+ 6C21 30 18                                jr      nc,DrawColourEBar
  22+ 6C23 1E 54                                ld      e,84
  23+ 6C25 FE 1E                                cp      30
  24+ 6C27 30 12                                jr      nc,DrawColourEBar
  25+ 6C29 1E D8                                ld      e,216
  26+ 6C2B FE 14                                cp      20
  27+ 6C2D 1E EC                                ld      e,236
  28+ 6C2F FE 0A                                cp      10
  29+ 6C31 30 08                                jr      nc,DrawColourEBar
  30+ 6C33 1E E1                                ld      e,225
  31+ 6C35 FE 05                                cp      5
  32+ 6C37 30 02                                jr      nc,DrawColourEBar
  33+ 6C39 1E E0                                ld      e,224
  34+ 6C3B C5 D5        DrawColourEBar:         push    bc,,de
  35+ 6C3D                                      MMUSelectLayer2
  35+ 6C3D ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
  36+ 6C41 CD A7 E7                             call    l2_draw_horz_line
  37+ 6C44 D1 C1                                pop     bc,,de
  38+ 6C46 05                                   dec     b
  39+ 6C47 C5 D5                                push    bc,,de
  40+ 6C49                                      MMUSelectLayer2
  40+ 6C49 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
  41+ 6C4D CD A7 E7                             call    l2_draw_horz_line
  42+ 6C50 D1 C1                                pop     bc,,de
  43+ 6C52 05                                   dec     b
  44+ 6C53                                      MMUSelectLayer2
  44+ 6C53 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
  45+ 6C57 CD A7 E7                             call    l2_draw_horz_line
  46+ 6C5A C9                                   ret
  47+ 6C5B
  48+ 6C5B                                      ; no ret needed as jp handles it
  49+ 6C5B
  50+ 6C5B 16 50        MissileDiagPositive:    ld      d,"P"
  51+ 6C5D CD B4 E4                             call    l2_print_chr_at
  52+ 6C60 C9                                   ret
  53+ 6C61
  54+ 6C61 16 4E        MissileDiagNegative:    ld      d,"N"
  55+ 6C63 CD B4 E4                             call    l2_print_chr_at
  56+ 6C66 C9                                   ret
  57+ 6C67
  58+ 6C67 16 5A        MissileDiagZero:        ld      d,"Z"
  59+ 6C69 CD B4 E4                             call    l2_print_chr_at
  60+ 6C6C C9                                   ret
  61+ 6C6D
  62+ 6C6D 1E FF        MissileValue:           ld      e,$FF
  63+ 6C6F FE 00                                cp      0
  64+ 6C71 F5                                   push    af
  65+ 6C72 CC 67 6C                             call    z,MissileDiagZero
  66+ 6C75 F1                                   pop     af
  67+ 6C76 C8                                   ret     z
  68+ 6C77 CB 7F                                bit     7,a
  69+ 6C79 F5                                   push    af
  70+ 6C7A CC 61 6C                             call    z,MissileDiagNegative
  71+ 6C7D F1                                   pop     af
  72+ 6C7E C8                                   ret     z
  73+ 6C7F C4 5B 6C                             call    nz,MissileDiagPositive
  74+ 6C82 C9                                   ret
  75+ 6C83
  76+ 6C83 30 31 32 33  Hex2Char:       DB "0123456789ABCDEF"
  76+ 6C87 34 35 36 37
  76+ 6C8B 38 39 41 42
  76+ 6C8F 43 44 45 46
  77+ 6C93
  78+ 6C93 F5 E5 C5 D5  MissileHexDigit:        push    af,,hl,,bc,,de
  79+ 6C97 E6 0F                                and     $0F
  80+ 6C99 21 83 6C                             ld      hl, Hex2Char
  81+ 6C9C ED 31                                add     hl,a
  82+ 6C9E 56                                   ld      d,(hl)
  83+ 6C9F CD B4 E4                             call    l2_print_chr_at
  84+ 6CA2 D1 C1 E1 F1                          pop     af,,hl,,bc,,de
  85+ 6CA6 C9                                   ret
  86+ 6CA7
  87+ 6CA7 ED 23        MissileHexToChar:       swapnib
  88+ 6CA9 E6 0F                                and     $0F
  89+ 6CAB 1E FF                                ld      e,$FF
  90+ 6CAD                                      JumpIfALTNusng 8,.SkipNeg
  90+ 6CAD FE 08       >                        cp      8
  90+ 6CAF DA B6 6C    >                        jp		c, .SkipNeg
  91+ 6CB2 1E 68                                ld      e,$68
  92+ 6CB4 D6 08                                sub     8
  93+ 6CB6 CD 93 6C     .SkipNeg:               call    MissileHexDigit
  94+ 6CB9 ED 23                                swapnib
  95+ 6CBB F5                                   push    af
  96+ 6CBC 79                                   ld      a,c
  97+ 6CBD C6 08                                add     8
  98+ 6CBF 4F                                   ld      c,a
  99+ 6CC0 F1                                   pop     af
 100+ 6CC1 E6 0F                                and     $0F
 101+ 6CC3 CD 93 6C                             call    MissileHexDigit
 102+ 6CC6 C9                                   ret
 103+ 6CC7
 104+ 6CC7 1E FF        MissileValue2Byte:      ld      e,$FF
 105+ 6CC9 7E                                   ld      a,(hl)
 106+ 6CCA 23                                   inc     hl
 107+ 6CCB B6                                   or      (hl)
 108+ 6CCC FE 00                                cp      0
 109+ 6CCE F5                                   push    af
 110+ 6CCF CC 67 6C                             call    z,MissileDiagZero
 111+ 6CD2 F1                                   pop     af
 112+ 6CD3 C8                                   ret     z
 113+ 6CD4 7E                                   ld      a,(hl)
 114+ 6CD5 CB 7F                                bit     7,a
 115+ 6CD7 F5                                   push    af
 116+ 6CD8 CC 61 6C                             call    z,MissileDiagNegative
 117+ 6CDB F1                                   pop     af
 118+ 6CDC C8                                   ret     z
 119+ 6CDD C4 5B 6C                             call    nz,MissileDiagPositive
 120+ 6CE0 C9                                   ret
 121+ 6CE1
 122+ 6CE1 16 78        MissileDiagPrintBoiler: ld      d,"x"
 123+ 6CE3 1E 30                                ld      e, $30
 124+ 6CE5 01 88 80                             ld      bc,$8088
 125+ 6CE8 CD B4 E4                             call    l2_print_chr_at
 126+ 6CEB 01 88 88                             ld      bc,$8888
 127+ 6CEE 16 7A                                ld      d,"z"
 128+ 6CF0 1E 30                                ld      e, $30
 129+ 6CF2 CD B4 E4                             call    l2_print_chr_at
 130+ 6CF5 01 88 90                             ld      bc,$9088
 131+ 6CF8 16 73                                ld      d,"s"
 132+ 6CFA 1E 30                                ld      e, $30
 133+ 6CFC CD B4 E4                             call    l2_print_chr_at
 134+ 6CFF 01 48 90                             ld      bc,$9048
 135+ 6D02 16 6E                                ld      d,"n"
 136+ 6D04 1E 30                                ld      e, $30
 137+ 6D06 CD B4 E4                             call    l2_print_chr_at
 138+ 6D09 01 48 80                             ld      bc,$8048
 139+ 6D0C 16 73                                ld      d,"s"
 140+ 6D0E 1E 30                                ld      e, $30
 141+ 6D10 CD B4 E4                             call    l2_print_chr_at
 142+ 6D13 01 48 88                             ld      bc,$8848
 143+ 6D16 16 72                                ld      d,"r"
 144+ 6D18 1E 30                                ld      e, $30
 145+ 6D1A CD B4 E4                             call    l2_print_chr_at
 146+ 6D1D C9                                   ret
 147+ 6D1E
 148+ 6D1E              MissileDiagnotics:      MMUSelectLayer2
 148+ 6D1E ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 149+ 6D22 CD E1 6C                             call    MissileDiagPrintBoiler
 150+ 6D25 1E FF                                ld      e,$FF
 151+ 6D27 01 90 80                             ld      bc,$8090
 152+ 6D2A 3A 07 A3                             ld      a,(TacticsRotX)
 153+ 6D2D CD A7 6C                             call    MissileHexToChar; MissileValue
 154+ 6D30 01 90 88                             ld      bc,$8890
 155+ 6D33 3A 09 A3                             ld      a,(TacticsRotZ)
 156+ 6D36 CD A7 6C                             call    MissileHexToChar; MissileValue
 157+ 6D39 01 90 90                             ld      bc,$9090
 158+ 6D3C 3A 0B A3                             ld      a,(TacticsSpeed)
 159+ 6D3F CD A7 6C                             call    MissileHexToChar; MissileValue
 160+ 6D42 01 50 80     .VectorSideX:           ld      bc,$8050
 161+ 6D45 3A D7 A2                             ld      a,(TacticsSideX+1)
 162+ 6D48 CD A7 6C                             call    MissileHexToChar;issileValue2Byte
 163+ 6D4B 01 62 80                             ld      bc,$8062
 164+ 6D4E 3A DB A2                             ld      a,(TacticsSideY+1)
 165+ 6D51 CD A7 6C                             call    MissileHexToChar
 166+ 6D54 01 74 80                             ld      bc,$8074
 167+ 6D57 3A DF A2                             ld      a,(TacticsSideZ+1)
 168+ 6D5A CD A7 6C                             call    MissileHexToChar
 169+ 6D5D 01 50 88     .VectorRoofX:           ld      bc,$8850
 170+ 6D60 3A E7 A2                             ld      a,(TacticsRoofX+1)
 171+ 6D63 CD A7 6C                             call    MissileHexToChar
 172+ 6D66 01 62 88                             ld      bc,$8862
 173+ 6D69 3A EB A2                             ld      a,(TacticsRoofY+1)
 174+ 6D6C CD A7 6C                             call    MissileHexToChar
 175+ 6D6F 01 74 88                             ld      bc,$8874
 176+ 6D72 3A EF A2                             ld      a,(TacticsRoofZ+1)
 177+ 6D75 CD A7 6C                             call    MissileHexToChar
 178+ 6D78 01 50 90     .VectorNoseX:           ld      bc,$9050
 179+ 6D7B 3A F7 A2                             ld      a,(TacticsNoseX+1)
 180+ 6D7E CD A7 6C                             call    MissileHexToChar
 181+ 6D81 01 62 90                             ld      bc,$9062
 182+ 6D84 3A FB A2                             ld      a,(TacticsNoseY+1)
 183+ 6D87 CD A7 6C                             call    MissileHexToChar
 184+ 6D8A 01 74 90                             ld      bc,$9074
 185+ 6D8D 3A EF A2                             ld      a,(TacticsRoofZ+1)
 186+ 6D90 CD A7 6C                             call    MissileHexToChar
 187+ 6D93 C9                                   ret
 188+ 6D94
 189+ 6D94              UpdateConsole:          IFDEF   MISSILEDIAGNOSTICS
 190+ 6D94 ~                                            call    MissileDiagnotics
 191+ 6D94                                      ENDIF
 192+ 6D94 3A B0 7F                             ld      a,(DELTA)
 193+ 6D97 FE 00                                cp      0                           ; don't draw if there is nothing to draw
 194+ 6D99 28 0C                                jr      z,.UpdateRoll
 195+ 6D9B 01 D1 84                             ld      bc,SpeedoStart
 196+ 6D9E 21 A8 82                             ld      hl,SpeedoMapping
 197+ 6DA1 ED 31                                add     hl,a
 198+ 6DA3 56                                   ld      d,(hl)
 199+ 6DA4 CD F9 6B                             call    Draw3LineBar
 200+ 6DA7 3A D0 7E     .UpdateRoll:            ld      a,(ALP1)
 201+ 6DAA FE 00                                cp      0
 202+ 6DAC CA E0 6D                             jp      z,.UpdatePitch
 203+ 6DAF 21 E0 8C                             ld      hl,RollMiddle
 204+ 6DB2 3A D1 7E                             ld      a,(ALP2)
 205+ 6DB5 FE 00                                cp      0
 206+ 6DB7 CA D2 6D                             jp     z,.PosRoll
 207+ 6DBA 16 00        .NegRoll:               ld      d,0
 208+ 6DBC 3A D0 7E                             ld      a,(ALP1)
 209+ 6DBF CB 27                                sla     a
 210+ 6DC1 5F                                   ld      e,a
 211+ 6DC2 B7                                   or      a
 212+ 6DC3 ED 52                                sbc     hl,de
 213+ 6DC5 44 4D                                ld      bc,hl
 214+ 6DC7 3E E1                                ld      a,DialMiddleXPos
 215+ 6DC9 91                                   sub     c
 216+ 6DCA 57                                   ld      d,a
 217+ 6DCB 1E FF                                ld      e,$FF
 218+ 6DCD CD F9 6B                             call    Draw3LineBar
 219+ 6DD0 18 0E                                jr      .UpdatePitch
 220+ 6DD2 01 E0 8C     .PosRoll:               ld      bc,RollMiddle
 221+ 6DD5 3A D0 7E                             ld      a,(ALP1)
 222+ 6DD8 CB 27                                sla     a
 223+ 6DDA 57                                   ld      d,a
 224+ 6DDB 1E FF                                ld      e,$FF
 225+ 6DDD CD F9 6B                             call    Draw3LineBar
 226+ 6DE0 3A C4 7E     .UpdatePitch:           ld      a,(BET1)
 227+ 6DE3 FE 00                                cp      0
 228+ 6DE5 CA 1A 6E                             jp      z,.Fuel
 229+ 6DE8 21 E0 94                             ld      hl,PitchMiddle
 230+ 6DEB 3A C5 7E                             ld      a,(BET2)
 231+ 6DEE FE 00                                cp      0
 232+ 6DF0 CA 0C 6E                             jp      z,.PosPitch
 233+ 6DF3 16 00        .NegPitch:              ld      d,0
 234+ 6DF5 3A C4 7E                             ld      a,(BET1)
 235+ 6DF8 CB 27                                sla     a
 236+ 6DFA 5F                                   ld      e,a
 237+ 6DFB B7                                   or      a
 238+ 6DFC ED 52                                sbc     hl,de
 239+ 6DFE 44 4D                                ld      bc,hl
 240+ 6E00 3E E1                                ld      a,DialMiddleXPos
 241+ 6E02 91                                   sub     c
 242+ 6E03 57                                   ld      d,a
 243+ 6E04 1E FF                                ld      e,$FF
 244+ 6E06 CD F9 6B                             call    Draw3LineBar
 245+ 6E09 C3 1A 6E                             jp      .Fuel
 246+ 6E0C 01 E0 94     .PosPitch:              ld      bc,PitchMiddle
 247+ 6E0F 3A C4 7E                             ld      a,(BET1)
 248+ 6E12 CB 27                                sla     a
 249+ 6E14 57                                   ld      d,a
 250+ 6E15 1E FF                                ld      e,$FF
 251+ 6E17 CD F9 6B                             call    Draw3LineBar
 252+ 6E1A 3A 93 85     .Fuel:                  ld      a,(Fuel)
 253+ 6E1D CB 3F                                srl     a               ; divide by 4 to get range on screen
 254+ 6E1F 21 83 82                             ld      hl,FuelMapping
 255+ 6E22 ED 31                                add     hl,a
 256+ 6E24 7E                                   ld      a,(hl)
 257+ 6E25 01 10 94                             ld      bc,FuelStart
 258+ 6E28 57                                   ld      d,a
 259+ 6E29 CD 1D 6C                             call    DrawColourCodedBar
 260+ 6E2C 3A 53 82     .FrontShield:           ld      a,(ForeShield)
 261+ 6E2F CB 3F                                srl     a
 262+ 6E31 CB 3F                                srl     a
 263+ 6E33 CB 3F                                srl     a
 264+ 6E35 01 10 84                             ld      bc,FShieldStart
 265+ 6E38 57                                   ld      d,a
 266+ 6E39 CD 1D 6C                             call    DrawColourCodedBar
 267+ 6E3C 3A 54 82     .AftShield:             ld      a,(AftShield)
 268+ 6E3F CB 3F                                srl     a
 269+ 6E41 CB 3F                                srl     a
 270+ 6E43 CB 3F                                srl     a
 271+ 6E45 01 10 8D                             ld      bc,AShieldStart
 272+ 6E48 57                                   ld      d,a
 273+ 6E49 CD 1D 6C                             call    DrawColourCodedBar
 274+ 6E4C              .SpriteDraw:            MMUSelectSpriteBank
 274+ 6E4C ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
 275+ 6E50
 276+ 6E50 CD C5 E3     .DrawCompases:          call    show_sprite_sun_compass
 277+ 6E53 CD EE E3                             call    show_sprite_planet_compass
 278+ 6E56 CD 17 E4                             call    show_sprite_station_compass
 279+ 6E59
 280+ 6E59 3A CB 7E     .DrawECM:               ld      a,(ECMCountDown)
 281+ 6E5C                                      JumpIfAIsZero   .HideECM
 281+ 6E5C A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
 281+ 6E5D CA 66 6E    >                        jp	    z, .HideECM
 282+ 6E60 CD 36 E3     .ShowECM:               call    show_ecm_sprite
 283+ 6E63 C3 69 6E                             jp      .ProcessedECM
 284+ 6E66 CD 10 E6     .HideECM:               call    sprite_ecm_hide
 285+ 6E69              .ProcessedECM:
 286+ 6E69 3A 65 80     .DrawMissiles:          ld      a,(NbrMissiles)
 287+ 6E6C FD 6F                                ld      iyl,a
 288+ 6E6E                                      JumpIfAIsZero   .HideAllMissiles                    ; First off do we have any missiles
 288+ 6E6E A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
 288+ 6E6F CA AD 6E    >                        jp	    z, .HideAllMissiles
 289+ 6E72 3A 58 82     .DrawMissile_1:         ld      a,(MissileTargettingFlag)                   ; have we the targetting flag
 290+ 6E75                                      JumpIfAEqNusng  StageMissileNotTargeting,.MissileReady
 290+ 6E75 FE FF       >                        cp     StageMissileNotTargeting
 290+ 6E77 CA 85 6E    >                        jp      z,.MissileReady
 291+ 6E7A                                      JumpIfAEqNusng  StageMissileTargeting,   .MissileArmed
 291+ 6E7A FE FE       >                        cp     StageMissileTargeting
 291+ 6E7C CA 8B 6E    >                        jp      z,.MissileArmed
 292+ 6E7F CD 78 E3     .Missile1Locked:        call    show_missile_1_locked
 293+ 6E82 C3 8E 6E                             jp      .DrawMissile_2
 294+ 6E85 CD 41 E3     .MissileReady:          call    show_missile_1_ready
 295+ 6E88 C3 8E 6E                             jp      .DrawMissile_2
 296+ 6E8B CD 6D E3     .MissileArmed:          call    show_missile_1_armed
 297+ 6E8E FD 7D        .DrawMissile_2:         ld      a,iyl
 298+ 6E90                                      JumpIfALTNusng 2, .Only1Missile
 298+ 6E90 FE 02       >                        cp      2
 298+ 6E92 DA B0 6E    >                        jp		c, .Only1Missile
 299+ 6E95 CD 4C E3                             call    show_missile_2_ready
 300+ 6E98 FD 7D        .DrawMissile_3:         ld      a,iyl
 301+ 6E9A                                      JumpIfALTNusng 3, .Only2Missiles
 301+ 6E9A FE 03       >                        cp      3
 301+ 6E9C DA B3 6E    >                        jp		c, .Only2Missiles
 302+ 6E9F CD 57 E3                             call    show_missile_3_ready
 303+ 6EA2 FD 7D        .DrawMissile_4:         ld      a,iyl
 304+ 6EA4                                      JumpIfALTNusng 4, .Only2Missiles
 304+ 6EA4 FE 04       >                        cp      4
 304+ 6EA6 DA B3 6E    >                        jp		c, .Only2Missiles
 305+ 6EA9 CD 62 E3                             call    show_missile_4_ready
 306+ 6EAC C9                                   ret
 307+ 6EAD CD 19 E6     .HideAllMissiles:       call    sprite_missile_1_hide
 308+ 6EB0 CD 22 E6     .Only1Missile:          call    sprite_missile_2_hide
 309+ 6EB3 CD 2B E6     .Only2Missiles:         call    sprite_missile_3_hide
 310+ 6EB6 CD 34 E6     .Only3Missiles:         call    sprite_missile_4_hide
 311+ 6EB9              ;PlayerEnergy
 312+ 6EB9              ; BNEED LASER temp
 313+ 6EB9              ; NEED CABIN TEMP
 314+ 6EB9              ;NEED ALTITUDE
 315+ 6EB9              ; Draw compas - if in range draw station, else do planet
 316+ 6EB9 3A 55 82     .EnergyBars:            ld      a,(PlayerEnergy)
 317+ 6EBC CB 3F                                srl     a                   ; energy = energy / 2 so 31 per bar
 318+ 6EBE                                      JumpIfALTNusng  31 + 1,     Draw1EnergyBar
 318+ 6EBE FE 20       >                        cp      31 + 1
 318+ 6EC0 DA D0 6E    >                        jp		c, Draw1EnergyBar
 319+ 6EC3                                      JumpIfALTNusng  (31*2) + 1, Draw2EnergyBars
 319+ 6EC3 FE 3F       >                        cp      (31*2) + 1
 319+ 6EC5 DA DA 6E    >                        jp		c, Draw2EnergyBars
 320+ 6EC8                                      JumpIfALTNusng  (31*3) + 1, Draw3EnergyBars
 320+ 6EC8 FE 5E       >                        cp      (31*3) + 1
 320+ 6ECA DA F0 6E    >                        jp		c, Draw3EnergyBars
 321+ 6ECD C3 12 6F                             jp      Draw4EnergyBars
 322+ 6ED0
 323+ 6ED0 1E E0        Draw1EnergyBar:         ld      e,224
 324+ 6ED2 57                                   ld      d,a
 325+ 6ED3 01 D5 BD                             ld      bc,EnergyBar1Start
 326+ 6ED6 CD 3B 6C                             call    DrawColourEBar
 327+ 6ED9 C9                                   ret
 328+ 6EDA 1E D8        Draw2EnergyBars:        ld      e,216
 329+ 6EDC D6 1F                                sub     31
 330+ 6EDE 57                                   ld      d,a
 331+ 6EDF 01 D5 B5                             ld      bc,EnergyBar2Start
 332+ 6EE2 CD 3B 6C                             call    DrawColourEBar
 333+ 6EE5 16 1F                                ld      d,31
 334+ 6EE7 1E D8                                ld      e,216
 335+ 6EE9 01 D5 BD                             ld      bc,EnergyBar1Start
 336+ 6EEC CD 3B 6C                             call    DrawColourEBar
 337+ 6EEF C9                                   ret
 338+ 6EF0 1E 14        Draw3EnergyBars:        ld      e,20
 339+ 6EF2 D6 3E                                sub     31*2
 340+ 6EF4 57                                   ld      d,a
 341+ 6EF5 1E 14                                ld      e,20
 342+ 6EF7 01 D5 AD                             ld      bc,EnergyBar3Start
 343+ 6EFA CD 3B 6C                             call    DrawColourEBar
 344+ 6EFD 16 1F                                ld      d,31
 345+ 6EFF 1E 14                                ld      e,20
 346+ 6F01 01 D5 B5                             ld      bc,EnergyBar2Start
 347+ 6F04 CD 3B 6C                             call    DrawColourEBar
 348+ 6F07 16 1F                                ld      d,31
 349+ 6F09 1E 14                                ld      e,20
 350+ 6F0B 01 D5 BD                             ld      bc,EnergyBar1Start
 351+ 6F0E CD 3B 6C                             call    DrawColourEBar
 352+ 6F11 C9                                   ret
 353+ 6F12 1E 18        Draw4EnergyBars:        ld      e,24
 354+ 6F14 D6 5D                                sub     31*3
 355+ 6F16                                      JumpIfALTNusng 31,.NoMax
 355+ 6F16 FE 1F       >                        cp      31
 355+ 6F18 DA 1D 6F    >                        jp		c, .NoMax
 356+ 6F1B 3E 1F        .Max                    ld      a,31
 357+ 6F1D 57           .NoMax:                 ld      d,a
 358+ 6F1E 01 D5 A5                             ld      bc,EnergyBar4Start
 359+ 6F21 CD 3B 6C                             call    DrawColourEBar
 360+ 6F24 16 1F                                ld      d,31
 361+ 6F26 1E 18                                ld      e,24
 362+ 6F28 01 D5 AD                             ld      bc,EnergyBar3Start
 363+ 6F2B CD 3B 6C                             call    DrawColourEBar
 364+ 6F2E 16 1F                                ld      d,31
 365+ 6F30 1E 18                                ld      e,24
 366+ 6F32 01 D5 B5                             ld      bc,EnergyBar2Start
 367+ 6F35 CD 3B 6C                             call    DrawColourEBar
 368+ 6F38 16 1F                                ld      d,31
 369+ 6F3A 1E 18                                ld      e,24
 370+ 6F3C 01 D5 BD                             ld      bc,EnergyBar1Start
 371+ 6F3F CD 3B 6C                             call    DrawColourEBar
 372+ 6F42 C9                                   ret
 373+ 6F43
 374+ 6F43              ScannerBottom           equ 190
 375+ 6F43              ScannerTypeMissle       equ 2
 376+ 6F43              ScannerXRangeOffset     equ $35
 377+ 6F43              ScannerCenter           equ 127
 378+ 6F43
 379+ 6F43              ScannerDefault          equ 0
 380+ 6F43              ScannerMissile          equ 2
 381+ 6F43              ScannerStation          equ 4
 382+ 6F43              ScannerEnemy            equ 6
 383+ 6F43
 384+ 6F43
 385+ 6F43 00           SunXScaled              DB  0
 386+ 6F44 00           SunYScaled              DB  0
 387+ 6F45 00           SunZScaled              DB  0
 388+ 6F46
 389+ 6F46                                      ;   ShipTypeNormal
 390+ 6F46 18 1C 90 FC  ScannerColourTable:       DB  L2ColourGREEN_2,    L2ColourGREEN_1, L2ColourYELLOW_4,  L2ColourYELLOW_1,   L2ColourCYAN_2, L2ColourCYAN_1, L2ColourRED_4,  L2ColourPINK_4
 390+ 6F4A 12 1F 80 E0
 391+ 6F4E C0 E0 C0 E0  ScannerColourTableHostile:DB  L2ColourRED_2,      L2ColourRED_1,   L2ColourRED_2,     L2ColourRED_1,      L2ColourRED_2,  L2ColourRED_1,  L2ColourRED_2,  L2ColourRED_1; just a place holder for now
 391+ 6F52 C0 E0 C0 E0
 392+ 6F56
 393+ 6F56              GetShipColor:           MACRO
 394+ 6F56 ~                                    ld      hl,ScannerColourTable
 395+ 6F56 ~                                    ld      a,(ShipTypeAddr)         ; for now to bypass hostile missile
 396+ 6F56 ~                                    cp      1                        ; for now to bypass hostile missile
 397+ 6F56 ~                                    jr      z,.UsingColourTable    ; for now to bypass hostile missile
 398+ 6F56 ~                                    ld      a,(ShipNewBitsAddr)
 399+ 6F56 ~                                    and     ShipIsHostile
 400+ 6F56 ~                                    jr      z,.UsingColourTable
 401+ 6F56 ~            .UsingHostileColour:    ld      hl,ScannerColourTableHostile
 402+ 6F56 ~            .UsingColourTable:      ld      a,(ShipTypeAddr)
 403+ 6F56 ~                                    sla     a                            ; as its byte pairs * 2
 404+ 6F56 ~                                    add     hl,a
 405+ 6F56 ~                                    ld      a,(hl)
 406+ 6F56                                      ENDM
 407+ 6F56              GetShipColorBright:     MACRO
 408+ 6F56 ~                                    ld      hl,ScannerColourTable
 409+ 6F56 ~                                    ld      a,(ShipTypeAddr)         ; for now to bypass hostile missile
 410+ 6F56 ~                                    cp      1                        ; for now to bypass hostile missile
 411+ 6F56 ~                                    jr      z,.UsingColourTable    ; for now to bypass hostile missile
 412+ 6F56 ~                                    ld      a,(ShipNewBitsAddr)
 413+ 6F56 ~                                    and     ShipIsHostile
 414+ 6F56 ~                                    jr      z,.UsingColourTable
 415+ 6F56 ~            .UsingHostileColour:    ld      hl,ScannerColourTableHostile
 416+ 6F56 ~            .UsingColourTable:      ld      a,(ShipTypeAddr)
 417+ 6F56 ~                                    sla     a                            ; as its byte pairs * 2
 418+ 6F56 ~                                    inc     a
 419+ 6F56 ~                                    add     hl,a
 420+ 6F56 ~                                    ld      a,(hl)
 421+ 6F56                                      ENDM
 422+ 6F56
 423+ 6F56              Shift24BitScan:         MACRO   regHi, reglo
 424+ 6F56 ~                                    ld      hl,(regHi)
 425+ 6F56 ~                                    ld      b,h
 426+ 6F56 ~                                    ld      a,h
 427+ 6F56 ~                                    and     SignMask8Bit
 428+ 6F56 ~                                    ld      h,a
 429+ 6F56 ~                                    ld      a,(reglo)
 430+ 6F56 ~                                    sla     a
 431+ 6F56 ~                                    rl      l
 432+ 6F56 ~                                    rl      h
 433+ 6F56 ~                                    sla     a
 434+ 6F56 ~                                    rl      l
 435+ 6F56 ~                                    rl      h
 436+ 6F56 ~                                    sla     a
 437+ 6F56 ~                                    rl      l
 438+ 6F56 ~                                    rl      h
 439+ 6F56 ~                                    sla     a
 440+ 6F56 ~                                    rl      l
 441+ 6F56 ~                                    rl      h
 442+ 6F56 ~                                    sla     a
 443+ 6F56 ~                                    rl      l
 444+ 6F56 ~                                    rl      h
 445+ 6F56 ~                                    sla     a
 446+ 6F56 ~                                    rl      l
 447+ 6F56 ~                                    rl      h
 448+ 6F56                                      ENDM
 449+ 6F56
 450+ 6F56              SunShiftRight           MACRO   reglo, reghi, regsgn
 451+ 6F56 ~                                    ld      a,regsgn
 452+ 6F56 ~                                    srl     a
 453+ 6F56 ~                                    rr      reghi
 454+ 6F56 ~                                    rr      reglo
 455+ 6F56 ~                                    ld      regsgn,a
 456+ 6F56                                      ENDM
 457+ 6F56
 458+ 6F56              ;SunShiftPosTo15Bit:     ld      de,(SBnKzlo)
 459+ 6F56              ;                        ld      a,(SBnKzsgn)
 460+ 6F56              ;                        push    af
 461+ 6F56              ;                        and     SignMask8Bit
 462+ 6F56              ;                        ld      iyl,a
 463+ 6F56              ;                        ld      hl,(SBnKxlo)
 464+ 6F56              ;                        ld      a,(SBnKxsgn)
 465+ 6F56              ;                        push    af
 466+ 6F56              ;                        and     SignMask8Bit
 467+ 6F56              ;                        ld      ixl,a
 468+ 6F56              ;                        ld      bc,(SBnKylo)
 469+ 6F56              ;                        ld      a,(SBnKysgn)
 470+ 6F56              ;                        and     SignMask8Bit
 471+ 6F56              ;                        push    af
 472+ 6F56              ;                        ld      iyh,a
 473+ 6F56              ;.ShiftLoop:             ld      a,iyh
 474+ 6F56              ;                        or      iyl
 475+ 6F56              ;                        or      ixl
 476+ 6F56              ;                        jr      z,.ShiftBit15
 477+ 6F56              ;.ShiftZ:                SunShiftRight iyl, d, e
 478+ 6F56              ;.ShiftX:                SunShiftRight ixl, h, l
 479+ 6F56              ;.ShiftY:                SunShiftRight ixh, b, c
 480+ 6F56              ;                        jr      .ShipLoop
 481+ 6F56              ;.ShiftBit15:            ld      a,iyh
 482+ 6F56              ;                        or      iyl
 483+ 6F56              ;                        or      ixl
 484+ 6F56              ;                        jr      z,.CompletedShift
 485+ 6F56              ;.ShiftZ:                SunShiftRight iyl, d, e
 486+ 6F56              ;.ShiftX:                SunShiftRight ixl, h, l
 487+ 6F56              ;.ShiftY:                SunShiftRight ixh, b, c             ; finally shift to 15 bits so we can get the sign back
 488+ 6F56              ;.CompletedShift:        pop     af                          ; get ysgn
 489+ 6F56              ;                        and     SignOnly8Bit
 490+ 6F56              ;                        or      b
 491+ 6F56              ;                        ld      b,a
 492+ 6F56              ;                        pop     af                          ; get xsgn
 493+ 6F56              ;                        and     SignOnly8Bit
 494+ 6F56              ;                        or      h
 495+ 6F56              ;                        ld      h,a
 496+ 6F56              ;                        pop     af                          ; get zsgn
 497+ 6F56              ;                        and     SignOnly8Bit
 498+ 6F56              ;                        or      d
 499+ 6F56              ;                        ld      d,a
 500+ 6F56              ;                        ret
 501+ 6F56              ;
 502+ 6F56 ED 5B 17 C0  ScalePlanetPos:         ld      de,(P_BnKzhi)               ; de = abs z & save sign on stack
 503+ 6F5A 7A                                   ld      a,d                         ; .
 504+ 6F5B F5                                   push    af                          ; .
 505+ 6F5C E6 7F                                and     SignMask8Bit                ; .
 506+ 6F5E 57                                   ld      d,a                         ; .
 507+ 6F5F 2A 11 C0                             ld      hl,(P_BnKxhi)               ; hl = abs x & save sign on stack
 508+ 6F62 7C                                   ld      a,h                         ; .
 509+ 6F63 F5                                   push    af                          ; .
 510+ 6F64 E6 7F                                and     SignMask8Bit                ; .
 511+ 6F66 67                                   ld      h,a                         ; .
 512+ 6F67 ED 4B 14 C0                          ld      bc,(P_BnKyhi)                ; bc = abs y & save sign on stack
 513+ 6F6B 78                                   ld      a,b                         ; .
 514+ 6F6C F5                                   push    af                          ; .
 515+ 6F6D E6 7F                                and     SignMask8Bit                ; .
 516+ 6F6F 47                                   ld      b,a                         ; .
 517+ 6F70 78           .ShiftLoop:             ld      a,b                         ; Scale down to an 8 bit value
 518+ 6F71 B2                                   or      d                           ; .
 519+ 6F72 B4                                   or      h                           ; .
 520+ 6F73 28 0E                                jr      z,.Shifted                  ; .
 521+ 6F75                                      ShiftBCRight1                       ; .
 521+ 6F75 CB 38       >			   srl b
 521+ 6F77 CB 19       >			   rr  c
 522+ 6F79                                      ShiftHLRight1                       ; .
 522+ 6F79 CB 3C       >			   srl h
 522+ 6F7B CB 1D       >			   rr  l
 523+ 6F7D                                      ShiftDERight1                       ; .
 523+ 6F7D CB 3A       >			   srl d
 523+ 6F7F CB 1B       >			   rr  e
 524+ 6F81 18 ED                                jr      .ShiftLoop
 525+ 6F83 79           .Shifted:               ld      a,c                         ; See if we already have 7 bit
 526+ 6F84 B5                                   or      l                           ;
 527+ 6F85 B3                                   or      e                           ;
 528+ 6F86 E6 80                                and     $80                         ;
 529+ 6F88 28 0C                                jr      z,.NoAdditionalShift        ;
 530+ 6F8A                                      ShiftBCRight1                       ; we want 7 bit
 530+ 6F8A CB 38       >			   srl b
 530+ 6F8C CB 19       >			   rr  c
 531+ 6F8E                                      ShiftHLRight1                       ; to acommodate the sign
 531+ 6F8E CB 3C       >			   srl h
 531+ 6F90 CB 1D       >			   rr  l
 532+ 6F92                                      ShiftDERight1                       ; .
 532+ 6F92 CB 3A       >			   srl d
 532+ 6F94 CB 1B       >			   rr  e
 533+ 6F96 F1           .NoAdditionalShift:     pop     af                          ; get ysgn
 534+ 6F97 E6 80                                and     SignOnly8Bit                ;
 535+ 6F99 47                                   ld      b,a                         ; bc = shifted signed Y
 536+ 6F9A F1                                   pop     af                          ; get xsgn
 537+ 6F9B E6 80                                and     SignOnly8Bit                ;
 538+ 6F9D 67                                   ld      h,a                         ; hl = shifted signed X
 539+ 6F9E F1                                   pop     af                          ; get zsgn
 540+ 6F9F E6 80                                and     SignOnly8Bit                ;
 541+ 6FA1 57                                   ld      d,a                         ; de = shifted signed Z
 542+ 6FA2 C9                                   ret
 543+ 6FA3
 544+ 6FA3 ED 5B 17 C0  ScaleSunPos:            ld      de,(SBnKzhi)                ; de = abs z & save sign on stack
 545+ 6FA7 7A                                   ld      a,d                         ; .
 546+ 6FA8 F5                                   push    af                          ; .
 547+ 6FA9 E6 7F                                and     SignMask8Bit                ; .
 548+ 6FAB 57                                   ld      d,a                         ; .
 549+ 6FAC 2A 11 C0                             ld      hl,(SBnKxhi)                ; hl = abs x & save sign on stack
 550+ 6FAF 7C                                   ld      a,h                         ; .
 551+ 6FB0 F5                                   push    af                          ; .
 552+ 6FB1 E6 7F                                and     SignMask8Bit                ; .
 553+ 6FB3 67                                   ld      h,a                         ; .
 554+ 6FB4 ED 4B 14 C0                          ld      bc,(SBnKyhi)                ; bc = abs y & save sign on stack
 555+ 6FB8 78                                   ld      a,b                         ; .
 556+ 6FB9 F5                                   push    af                          ; .
 557+ 6FBA E6 7F                                and     SignMask8Bit                ; .
 558+ 6FBC 47                                   ld      b,a                         ; .
 559+ 6FBD 78           .ShiftLoop:             ld      a,b                         ; Scale down to an 8 bit value
 560+ 6FBE B2                                   or      d                           ; .
 561+ 6FBF B4                                   or      h                           ; .
 562+ 6FC0 28 0E                                jr      z,.Shifted                  ; .
 563+ 6FC2                                      ShiftBCRight1                       ; .
 563+ 6FC2 CB 38       >			   srl b
 563+ 6FC4 CB 19       >			   rr  c
 564+ 6FC6                                      ShiftHLRight1                       ; .
 564+ 6FC6 CB 3C       >			   srl h
 564+ 6FC8 CB 1D       >			   rr  l
 565+ 6FCA                                      ShiftDERight1                       ; .
 565+ 6FCA CB 3A       >			   srl d
 565+ 6FCC CB 1B       >			   rr  e
 566+ 6FCE 18 ED                                jr      .ShiftLoop
 567+ 6FD0 79           .Shifted:               ld      a,c                         ; See if we already have 7 bit
 568+ 6FD1 B5                                   or      l                           ;
 569+ 6FD2 B3                                   or      e                           ;
 570+ 6FD3 E6 80                                and     $80                         ;
 571+ 6FD5 28 0C                                jr      z,.NoAdditionalShift        ;
 572+ 6FD7                                      ShiftBCRight1                       ; we want 7 bit
 572+ 6FD7 CB 38       >			   srl b
 572+ 6FD9 CB 19       >			   rr  c
 573+ 6FDB                                      ShiftHLRight1                       ; to acommodate the sign
 573+ 6FDB CB 3C       >			   srl h
 573+ 6FDD CB 1D       >			   rr  l
 574+ 6FDF                                      ShiftDERight1                       ; .
 574+ 6FDF CB 3A       >			   srl d
 574+ 6FE1 CB 1B       >			   rr  e
 575+ 6FE3 F1           .NoAdditionalShift:     pop     af                          ; get ysgn
 576+ 6FE4 E6 80                                and     SignOnly8Bit                ;
 577+ 6FE6 47                                   ld      b,a                         ; bc = shifted signed Y
 578+ 6FE7 F1                                   pop     af                          ; get xsgn
 579+ 6FE8 E6 80                                and     SignOnly8Bit                ;
 580+ 6FEA 67                                   ld      h,a                         ; hl = shifted signed X
 581+ 6FEB F1                                   pop     af                          ; get zsgn
 582+ 6FEC E6 80                                and     SignOnly8Bit                ;
 583+ 6FEE 57                                   ld      d,a                         ; de = shifted signed Z
 584+ 6FEF C9                                   ret
 585+ 6FF0              ;-----------------------------------------------------------
 586+ 6FF0 ED 5B 27 C0  ScaleUnivPos:           ld      de,(UBnKzhi)               ; de = abs z & save sign on stack
 587+ 6FF4 7A                                   ld      a,d                         ; .
 588+ 6FF5 F5                                   push    af                          ; .
 589+ 6FF6 E6 7F                                and     SignMask8Bit                ; .
 590+ 6FF8 57                                   ld      d,a                         ; .
 591+ 6FF9 2A 21 C0                             ld      hl,(UBnKxhi)               ; hl = abs x & save sign on stack
 592+ 6FFC 7C                                   ld      a,h                         ; .
 593+ 6FFD F5                                   push    af                          ; .
 594+ 6FFE E6 7F                                and     SignMask8Bit                ; .
 595+ 7000 67                                   ld      h,a                         ; .
 596+ 7001 ED 4B 24 C0                          ld      bc,(UBnKyhi)                ; bc = abs y & save sign on stack
 597+ 7005 78                                   ld      a,b                         ; .
 598+ 7006 F5                                   push    af                          ; .
 599+ 7007 E6 7F                                and     SignMask8Bit                ; .
 600+ 7009 47                                   ld      b,a                         ; .
 601+ 700A 78           .ShiftLoop:             ld      a,b                         ; Scale down to an 8 bit value
 602+ 700B B2                                   or      d                           ; .
 603+ 700C B4                                   or      h                           ; .
 604+ 700D 28 0E                                jr      z,.Shifted                  ; .
 605+ 700F                                      ShiftBCRight1                       ; .
 605+ 700F CB 38       >			   srl b
 605+ 7011 CB 19       >			   rr  c
 606+ 7013                                      ShiftHLRight1                       ; .
 606+ 7013 CB 3C       >			   srl h
 606+ 7015 CB 1D       >			   rr  l
 607+ 7017                                      ShiftDERight1                       ; .
 607+ 7017 CB 3A       >			   srl d
 607+ 7019 CB 1B       >			   rr  e
 608+ 701B 18 ED                                jr      .ShiftLoop
 609+ 701D 79           .Shifted:               ld      a,c                         ; See if we already have 7 bit
 610+ 701E B5                                   or      l                           ;
 611+ 701F B3                                   or      e                           ;
 612+ 7020 E6 80                                and     $80                         ;
 613+ 7022 28 0C                                jr      z,.NoAdditionalShift        ;
 614+ 7024                                      ShiftBCRight1                       ; we want 7 bit
 614+ 7024 CB 38       >			   srl b
 614+ 7026 CB 19       >			   rr  c
 615+ 7028                                      ShiftHLRight1                       ; to acommodate the sign
 615+ 7028 CB 3C       >			   srl h
 615+ 702A CB 1D       >			   rr  l
 616+ 702C                                      ShiftDERight1                       ; .
 616+ 702C CB 3A       >			   srl d
 616+ 702E CB 1B       >			   rr  e
 617+ 7030 F1           .NoAdditionalShift:     pop     af                          ; get ysgn
 618+ 7031 E6 80                                and     SignOnly8Bit                ;
 619+ 7033 47                                   ld      b,a                         ; bc = shifted signed Y
 620+ 7034 F1                                   pop     af                          ; get xsgn
 621+ 7035 E6 80                                and     SignOnly8Bit                ;
 622+ 7037 67                                   ld      h,a                         ; hl = shifted signed X
 623+ 7038 F1                                   pop     af                          ; get zsgn
 624+ 7039 E6 80                                and     SignOnly8Bit                ;
 625+ 703B 57                                   ld      d,a                         ; de = shifted signed Z
 626+ 703C C9                                   ret
 627+ 703D
 628+ 703D              ;compass sun
 629+ 703D              ;            if value is still 24 bit
 630+ 703D              ;                copy xhi/xsgn y and z to xxx15 ([2 1 0 ] [ 5 4 3] [ 8 7 6 ]
 631+ 703D              ;                normalise vector (note this assumes sun is just sign byte+ 2 bytes)
 632+ 703D              ;                tempk39 = OR 3 low bytes
 633+ 703D              ;                tempkA = OR 3 high bytes
 634+ 703D              ;                 TAL2:    repeat
 635+ 703D              ;                             asl tempka tempk39
 636+ 703D              ;                             exit if carry set
 637+ 703D              ;                             x coord << 1
 638+ 703D              ;                             y corrd << 1
 639+ 703D              ;                             z coord << 1
 640+ 703D              ;                          until carry clear
 641+ 703D              ;                 TA2:     shift x y and z right one and put sign bit in from sign bytes
 642+ 703D              ;                          now XX15 holds sign + 7 bit bytes maximused for coords
 643+ 703D              ;                          RQ = AP = X ^ 2
 644+ 703D              ;                          TP = AP = Y ^ 2
 645+ 703D              ;                          RQ = RQ + TP
 646+ 703D              ;                          TP = AP = Z ^ 2
 647+ 703D              ;                          RQ = RQ + TP
 648+ 703D              ;                          Q = SQRT (RQ)
 649+ 703D              ;                          for each coord - A = A/Q * 3/ 8
 650+ 703D              ;
 651+ 703D              ;
 652+ 703D
 653+ 703D ED 5B 17 C0  UpscaleSunPosition:     ld      de,(SBnKzhi)                ; de = abs z & save sign on stack
 654+ 7041 2A 11 C0                             ld      hl,(SBnKxhi)                ; hl = abs x & save sign on stack
 655+ 7044 ED 4B 14 C0                          ld      bc,(SBnKyhi)                ; bc = abs y & save sign on stack
 656+ 7048 7A                                   ld      a,d
 657+ 7049 E6 80                                and     SignOnly8Bit
 658+ 704B CB 3F                                srl     a
 659+ 704D FD 6F                                ld      iyl,a
 660+ 704F 7C                                   ld      a,h
 661+ 7050 E6 80                                and     SignOnly8Bit
 662+ 7052 FD B5                                or      iyl
 663+ 7054 CB 3F                                srl     a
 664+ 7056 78                                   ld      a,b
 665+ 7057 E6 80                                and     SignOnly8Bit
 666+ 7059 FD B5                                or      iyl
 667+ 705B FD 6F                                ld      iyl,a                       ; IYL now equals YXH00000 where letters = sign bits
 668+ 705D                                      ClearSignBit d
 668+ 705D 7A          >                        ld      a,d
 668+ 705E E6 7F       >                        and     SignMask8Bit
 668+ 7060 57          >                        ld      d,a
 669+ 7061                                      ClearSignBit h
 669+ 7061 7C          >                        ld      a,h
 669+ 7062 E6 7F       >                        and     SignMask8Bit
 669+ 7064 67          >                        ld      h,a
 670+ 7065                                      ClearSignBit b
 670+ 7065 78          >                        ld      a,b
 670+ 7066 E6 7F       >                        and     SignMask8Bit
 670+ 7068 47          >                        ld      b,a
 671+ 7069 78                                   ld      a,b
 672+ 706A B3                                   or      e
 673+ 706B B4                                   or      h
 674+ 706C B5                                   or      l
 675+ 706D B0                                   or      b
 676+ 706E B1                                   or      c
 677+ 706F 28 41                                jr      z, .Setto1                 ; to prevent and infinite loop in upscale if all zero
 678+ 7071 7A                                   ld      a,d
 679+ 7072 B3                                   or      e
 680+ 7073 B4                                   or      h
 681+ 7074 CB 27                                sla     a
 682+ 7076 38 15                                jr      c,.DoneCalc
 683+ 7078 28 13                                jr      z,.DoneCalc
 684+ 707A              .UpscaleLoop:           ShiftDELeft1
 684+ 707A CB 23       >			   sla e
 684+ 707C CB 12       >			   rl  d
 685+ 707E                                      ShiftHLLeft1
 685+ 707E CB 25       >			   sla l
 685+ 7080 CB 14       >			   rl  h
 686+ 7082                                      ShiftBCLeft1
 686+ 7082 CB 21       >			   sla c
 686+ 7084 CB 10       >			   rl  b
 687+ 7086 CB 27                                sla     a
 688+ 7088 38 03                                jr      c,.DoneCalc
 689+ 708A C3 7A 70                             jp      .UpscaleLoop
 690+ 708D              .DoneCalc               ShiftDERight1
 690+ 708D CB 3A       >			   srl d
 690+ 708F CB 1B       >			   rr  e
 691+ 7091                                      ShiftHLRight1
 691+ 7091 CB 3C       >			   srl h
 691+ 7093 CB 1D       >			   rr  l
 692+ 7095                                      ShiftBCRight1
 692+ 7095 CB 38       >			   srl b
 692+ 7097 CB 19       >			   rr  c
 693+ 7099 5A           .NowSetResultInLowByte: ld      e,d
 694+ 709A 6C                                   ld      l,h
 695+ 709B 48                                   ld      c,b
 696+ 709C FD 7D                                ld      a,iyl
 697+ 709E E6 80                                and     SignOnly8Bit
 698+ 70A0 47                                   ld      b,a
 699+ 70A1 FD 7D                                ld      a,iyl
 700+ 70A3 CB 27                                sla     a
 701+ 70A5 FD 6F                                ld      iyl,a
 702+ 70A7 E6 80                                and     SignOnly8Bit
 703+ 70A9 67                                   ld      h,a
 704+ 70AA FD 7D                                ld      a,iyl
 705+ 70AC CB 27                                sla     a
 706+ 70AE E6 80                                and     SignOnly8Bit
 707+ 70B0 57                                   ld      d,a
 708+ 70B1 C9                                   ret
 709+ 70B2 3E 01        .Setto1:                ld      a,1
 710+ 70B4 4F                                   ld      c,a
 711+ 70B5 5F                                   ld      e,a
 712+ 70B6 6F                                   ld      l,a
 713+ 70B7 FD 7D                                ld      a,iyl
 714+ 70B9 CB 27                                sla     a
 715+ 70BB CB 27                                sla     a
 716+ 70BD E6 80                                and     SignOnly8Bit
 717+ 70BF B3                                   or      e
 718+ 70C0 5F                                   ld      e,a
 719+ 70C1 C9                                   ret
 720+ 70C2
 721+ 70C2
 722+ 70C2              UpdateCompassSun:       MMUSelectSun
 722+ 70C2 ED 91 56 53 >                     nextreg SunMMU,            BankSunData
 723+ 70C6 CD A3 6F                             call    ScaleSunPos                 ; get as 7 bit signed
 724+ 70C9 C5 E5 D5                             push    bc,,hl,,de                  ; +3 save to stack Y, X and Z scaled and signed hihg = sign, low = 7 bit value
 725+ 70CC 51           .normaliseYSqr:         ld      d,c                         ; bc = y ^ 2
 726+ 70CD 59                                   ld      e,c                         ; .
 727+ 70CE ED 30                                mul                                 ; .
 728+ 70D0 42 4B                                ld      bc,de                       ; .
 729+ 70D2 55           .normaliseXSqr:         ld      d,l                         ; hl = x ^ 2
 730+ 70D3 5D                                   ld      e,l                         ; .
 731+ 70D4 ED 30                                mul                                 ; .
 732+ 70D6 EB                                   ex      de,hl                       ; .
 733+ 70D7 D1           .normaliseZSqr:         pop     de                          ; +2 get Z saved from stack so now stack contains Y Z X
 734+ 70D8 53                                   ld      d,e                         ; de = z ^
 735+ 70D9 ED 30                                mul                                 ; .
 736+ 70DB 19           .normaliseSqrt:         add     hl,de                       ; de = x^2 + y^2 + z^2
 737+ 70DC 09                                   add     hl,bc                       ; .
 738+ 70DD EB                                   ex      de,hl                       ; .
 739+ 70DE CD B2 93                             call    asm_sqrt                    ; (Q) = hl = sqrt (x^2 + y^2 + x^2)
 740+ 70E1                                      ; if h <> 0 then more difficult
 741+ 70E1 55                                   ld      d,l                         ; iyl = q
 742+ 70E2 FD 6A                                ld      iyl,d                       ; .
 743+ 70E4 E1           .NormaliseX:            pop     hl                          ; +1 get back hl x scaled
 744+ 70E5 7C                                   ld      a,h                         ; c = sign
 745+ 70E6 E6 80                                and     SignOnly8Bit                ; .
 746+ 70E8 4F                                   ld      c,a                         ; .
 747+ 70E9 C5                                   push    bc                          ; +2 save bc temporarily as it will get altered
 748+ 70EA 7D                                   ld      a,l                         ; a = 8 bit abs z
 749+ 70EB CD 2E 9E                             call    AequAdivQmul96ABS           ; e = a /q * 96 (d was already loaded with q)
 750+ 70EE 5F                                   ld      e,a                         ; .
 751+ 70EF                                      EDiv10Inline                        ; a = e / 10
 751+ 70EF 16 00       >                        ld      d,0
 751+ 70F1 62 6B       >                        ld      hl,de
 751+ 70F3 29          >                        add     hl,hl
 751+ 70F4 19          >                        add     hl,de
 751+ 70F5 29          >                        add     hl,hl
 751+ 70F6 29          >                        add     hl,hl
 751+ 70F7 19          >                        add     hl,de
 751+ 70F8 29          >                        add     hl,hl
 752+ 70F9 7C                                   ld      a,h                         ; .
 753+ 70FA C1                                   pop     bc                          ; +1 retrieve bc
 754+ 70FB FE 00                                cp      0                           ; if result in h was 0 then done
 755+ 70FD 28 06                                jr      z,.DoneNormX                ; in case we end up with - 0
 756+ 70FF CB 79                                bit     7,c                         ; if sign is negative then 2'c value
 757+ 7101 28 02                                jr      z,.DoneNormX
 758+ 7103 ED 44                                neg
 759+ 7105 DD 67        .DoneNormX:             ld      ixh,a                       ; ixh = (signed 2's c x /q * 96) / 10
 760+ 7107 FD 55        .NormaliseY:            ld      d,iyl                       ; d = q
 761+ 7109 E1                                   pop     hl                          ; +0 hl y scaled
 762+ 710A 7C                                   ld      a,h                         ; c = sign
 763+ 710B E6 80                                and     SignOnly8Bit                ; .
 764+ 710D 4F                                   ld      c,a                         ; .
 765+ 710E C5                                   push    bc                          ; +1 save sign to stack
 766+ 710F 7D                                   ld      a,l                         ; a = 8 bit signed z
 767+ 7110 CD 2E 9E                             call    AequAdivQmul96ABS           ; .
 768+ 7113 5F                                   ld      e,a                         ; a = e / 10
 769+ 7114                                      EDiv10Inline                        ; .
 769+ 7114 16 00       >                        ld      d,0
 769+ 7116 62 6B       >                        ld      hl,de
 769+ 7118 29          >                        add     hl,hl
 769+ 7119 19          >                        add     hl,de
 769+ 711A 29          >                        add     hl,hl
 769+ 711B 29          >                        add     hl,hl
 769+ 711C 19          >                        add     hl,de
 769+ 711D 29          >                        add     hl,hl
 770+ 711E 7C                                   ld      a,h                         ; retrieve sign
 771+ 711F C1                                   pop     bc                          ; +1 retrieve sign
 772+ 7120 FE 00                                cp      0
 773+ 7122 28 06                                jr      z,.DoneNormY                ; in case we end up with - 0
 774+ 7124 CB 79                                bit     7,c                         ; if sign is negative then 2'c value
 775+ 7126 28 02                                jr      z,.DoneNormY
 776+ 7128 ED 44                                neg                                 ;
 777+ 712A 47           .DoneNormY:             ld      b,a                         ; result from Y
 778+ 712B DD 4C                                ld      c,ixh                       ; x = saved X
 779+ 712D CD 46 71                             call    LimitCompassBC
 780+ 7130              .SetSprite:             MMUSelectSpriteBank
 780+ 7130 ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
 781+ 7134 CD 5A E2                             call    compass_sun_move
 782+ 7137 3A 18 C0                             ld      a,(SBnKzsgn)
 783+ 713A CB 7F                                bit     7,a
 784+ 713C 20 04                                jr      nz,.SunBehind
 785+ 713E CD 83 E3     .SunInfront:            call    show_compass_sun_infront
 786+ 7141 C9                                   ret
 787+ 7142 CD 8E E3     .SunBehind:             call    show_compass_sun_behind
 788+ 7145 C9                                   ret
 789+ 7146
 790+ 7146              ; takes B = Y and C = X, limits to +/-16 in each direction
 791+ 7146 78           LimitCompassBC:         ld      a,b
 792+ 7147                                      JumpIfALTNsigned -14, .ClampBNeg16
 792+ 7147 FE F2       >                        cp      -14
 792+ 7149 FA 52 71    >                        jp      m,.SignSet
 792+ 714C EA 66 71    >.SignClear:             jp      pe,.ClampBNeg16       ; Sign (0), P/V (1)
 792+ 714F C3 55 71    >                        jp      .CheckComplete  ; Sign (1), P/V (0)
 792+ 7152 E2 66 71    >.SignSet:               jp      po,.ClampBNeg16
 792+ 7155             >.CheckComplete:
 793+ 7155                                      JumpIfAGTENsigned 15, .ClampBPos16
 793+ 7155 FE 0F       >                        cp      15
 793+ 7157 FA 60 71    >                        jp      m,.SignSet
 793+ 715A E2 6B 71    >.SignClear:             jp      po,.ClampBPos16       ; Sign (0), P/V (0)
 793+ 715D C3 63 71    >                        jp      .CheckComplete  ; Sign (1), P/V (1)
 793+ 7160 EA 6B 71    >.SignSet:               jp      pe,.ClampBPos16
 793+ 7163             >.CheckComplete:
 794+ 7163 C3 6D 71                             jp      .CheckCReg
 795+ 7166 06 F2        .ClampBNeg16:           ld      b,-14
 796+ 7168 C3 6D 71                             jp      .CheckCReg
 797+ 716B 06 0E        .ClampBPos16:           ld      b,14
 798+ 716D 79           .CheckCReg:             ld      a,c
 799+ 716E                                      JumpIfALTNsigned -14, .ClampCNeg16
 799+ 716E FE F2       >                        cp      -14
 799+ 7170 FA 79 71    >                        jp      m,.SignSet
 799+ 7173 EA 8B 71    >.SignClear:             jp      pe,.ClampCNeg16       ; Sign (0), P/V (1)
 799+ 7176 C3 7C 71    >                        jp      .CheckComplete  ; Sign (1), P/V (0)
 799+ 7179 E2 8B 71    >.SignSet:               jp      po,.ClampCNeg16
 799+ 717C             >.CheckComplete:
 800+ 717C                                      JumpIfAGTENsigned 15, .ClampCPos16
 800+ 717C FE 0F       >                        cp      15
 800+ 717E FA 87 71    >                        jp      m,.SignSet
 800+ 7181 E2 8E 71    >.SignClear:             jp      po,.ClampCPos16       ; Sign (0), P/V (0)
 800+ 7184 C3 8A 71    >                        jp      .CheckComplete  ; Sign (1), P/V (1)
 800+ 7187 EA 8E 71    >.SignSet:               jp      pe,.ClampCPos16
 800+ 718A             >.CheckComplete:
 801+ 718A C9                                   ret
 802+ 718B 0E F2        .ClampCNeg16:           ld      c,-14
 803+ 718D C9                                   ret
 804+ 718E 0E 0E        .ClampCPos16:           ld      c,14
 805+ 7190 C9                                   ret
 806+ 7191
 807+ 7191              UpdateCompassPlanet:    MMUSelectPlanet
 807+ 7191 ED 91 56 54 >                     nextreg PlanetMMU,         BankPlanetData
 808+ 7195 CD 56 6F                             call    ScalePlanetPos              ; get as 7 bit signed
 809+ 7198 C5 E5 D5                             push    bc,,hl,,de                  ; save to stack Y, Z, X and copy of X scaled and signed hihg = sign, low = 7 bit value
 810+ 719B 51           .normaliseYSqr:         ld      d,c                         ; bc = y ^ 2
 811+ 719C 59                                   ld      e,c                         ; .
 812+ 719D ED 30                                mul                                 ; .
 813+ 719F 42 4B                                ld      bc,de                       ; .
 814+ 71A1 55           .normaliseXSqr:         ld      d,l                         ; hl = x ^ 2
 815+ 71A2 5D                                   ld      e,l                         ; .
 816+ 71A3 ED 30                                mul                                 ; .
 817+ 71A5 EB                                   ex      de,hl                       ; .
 818+ 71A6 D1           .normaliseZSqr:         pop     de                          ; get saved from stack 2
 819+ 71A7 53                                   ld      d,e                         ; de = z ^
 820+ 71A8 ED 30                                mul                                 ; .
 821+ 71AA 19           .normaliseSqrt:         add     hl,de                       ; hl = x^2 + y^2 + z^2
 822+ 71AB 09                                   add     hl,bc
 823+ 71AC EB                                   ex      de,hl
 824+ 71AD CD B2 93                             call    asm_sqrt                    ; (Q) = hl = sqrt (x^2 + y^2 + x^2)
 825+ 71B0                                      ; if h <> 0 then more difficult
 826+ 71B0 55                                   ld      d,l                         ; iyl = q
 827+ 71B1 FD 6A                                ld      iyl,d                       ; .
 828+ 71B3 E1           .NormaliseX:            pop     hl                          ; hl x scaled
 829+ 71B4 7C                                   ld      a,h                         ; c = sign
 830+ 71B5 E6 80                                and     SignOnly8Bit                ; .
 831+ 71B7 4F                                   ld      c,a                         ; .
 832+ 71B8 C5                                   push    bc                          ; save sign to stack
 833+ 71B9 7D                                   ld      a,l                         ; a = 8 bit abs z
 834+ 71BA CD 2E 9E                             call    AequAdivQmul96ABS              ; e = a /q * 96 (d was already loaded with q)
 835+ 71BD 5F                                   ld      e,a                         ; .
 836+ 71BE                                      EDiv10Inline                        ; a = e / 10
 836+ 71BE 16 00       >                        ld      d,0
 836+ 71C0 62 6B       >                        ld      hl,de
 836+ 71C2 29          >                        add     hl,hl
 836+ 71C3 19          >                        add     hl,de
 836+ 71C4 29          >                        add     hl,hl
 836+ 71C5 29          >                        add     hl,hl
 836+ 71C6 19          >                        add     hl,de
 836+ 71C7 29          >                        add     hl,hl
 837+ 71C8 7C                                   ld      a,h                         ; .
 838+ 71C9 C1                                   pop     bc                          ; retrieve sign
 839+ 71CA FE 00                                cp      0
 840+ 71CC 28 06                                jr      z,.DoneNormX                ; in case we end up with - 0
 841+ 71CE CB 79                                bit     7,c                         ; if sign is negative then 2'c value
 842+ 71D0 28 02                                jr      z,.DoneNormX
 843+ 71D2 ED 44                                neg
 844+ 71D4 DD 67        .DoneNormX:             ld      ixh,a                       ; ixh = (signed 2's c x /q * 96) / 10
 845+ 71D6 FD 55        .NormaliseY:            ld      d,iyl                       ; d = q
 846+ 71D8 E1                                   pop     hl                          ; hl y scaled
 847+ 71D9 7C                                   ld      a,h                         ; c = sign
 848+ 71DA E6 80                                and     SignOnly8Bit                ; .
 849+ 71DC 4F                                   ld      c,a                         ; .
 850+ 71DD C5                                   push    bc                          ; save sign to stack
 851+ 71DE 7D                                   ld      a,l                         ; a = 8 bit signed z
 852+ 71DF CD 2E 9E                             call    AequAdivQmul96ABS           ; .
 853+ 71E2 5F                                   ld      e,a                         ; a = e / 10
 854+ 71E3                                      EDiv10Inline                        ; .
 854+ 71E3 16 00       >                        ld      d,0
 854+ 71E5 62 6B       >                        ld      hl,de
 854+ 71E7 29          >                        add     hl,hl
 854+ 71E8 19          >                        add     hl,de
 854+ 71E9 29          >                        add     hl,hl
 854+ 71EA 29          >                        add     hl,hl
 854+ 71EB 19          >                        add     hl,de
 854+ 71EC 29          >                        add     hl,hl
 855+ 71ED 7C                                   ld      a,h                         ; retrieve sign
 856+ 71EE C1                                   pop     bc                          ; retrieve sign
 857+ 71EF FE 00                                cp      0
 858+ 71F1 28 06                                jr      z,.DoneNormY                 ; in case we end up with - 0
 859+ 71F3 CB 79                                bit     7,c                         ; if sign is negative then 2'c value
 860+ 71F5 28 02                                jr      z,.DoneNormY
 861+ 71F7 ED 44                                neg                                 ;
 862+ 71F9 47           .DoneNormY:             ld      b,a                         ; result from Y
 863+ 71FA DD 4C                                ld      c,ixh                       ; x = saved X
 864+ 71FC              .SetSprite:             MMUSelectSpriteBank
 864+ 71FC ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
 865+ 7200 CD 46 71                             call    LimitCompassBC
 866+ 7203 CD 6C E2                             call    compass_planet_move
 867+ 7206 3A 18 C0                             ld      a,(P_BnKzsgn)
 868+ 7209 CB 7F                                bit     7,a
 869+ 720B 20 04                                jr      nz,.PlanetBehind
 870+ 720D CD AF E3     .PlanetInfront:         call    show_compass_planet_infront
 871+ 7210 C9                                   ret
 872+ 7211 CD BA E3     .PlanetBehind:          call    show_compass_planet_behind
 873+ 7214 C9                                   ret
 874+ 7215
 875+ 7215              UpdateCompassStation:   MMUSelectSpaceStation
 875+ 7215 ED 91 56 46 >                     nextreg SpaceStationMMU,   BankSpaceStationData
 876+ 7219 CD F0 6F                             call    ScaleUnivPos                ; get as 7 bit signed
 877+ 721C C5 E5 D5                             push    bc,,hl,,de                  ; save to stack Y, Z, X and copy of X scaled and signed hihg = sign, low = 7 bit value
 878+ 721F 51           .normaliseYSqr:         ld      d,c                         ; bc = y ^ 2
 879+ 7220 59                                   ld      e,c                         ; .
 880+ 7221 ED 30                                mul                                 ; .
 881+ 7223 42 4B                                ld      bc,de                       ; .
 882+ 7225 55           .normaliseXSqr:         ld      d,l                         ; hl = x ^ 2
 883+ 7226 5D                                   ld      e,l                         ; .
 884+ 7227 ED 30                                mul                                 ; .
 885+ 7229 EB                                   ex      de,hl                       ; .
 886+ 722A D1           .normaliseZSqr:         pop     de                          ; get saved from stack 2
 887+ 722B 53                                   ld      d,e                         ; de = z ^
 888+ 722C ED 30                                mul                                 ; .
 889+ 722E 19           .normaliseSqrt:         add     hl,de                       ; hl = x^2 + y^2 + z^2
 890+ 722F 09                                   add     hl,bc
 891+ 7230 EB                                   ex      de,hl
 892+ 7231 CD B2 93                             call    asm_sqrt                    ; (Q) = hl = sqrt (x^2 + y^2 + x^2)
 893+ 7234                                      ; if h <> 0 then more difficult
 894+ 7234 55                                   ld      d,l                         ; iyl = q
 895+ 7235 FD 6A                                ld      iyl,d                       ; .
 896+ 7237 E1           .NormaliseX:            pop     hl                          ; hl x scaled
 897+ 7238 7C                                   ld      a,h                         ; c = sign
 898+ 7239 E6 80                                and     SignOnly8Bit                ; .
 899+ 723B 4F                                   ld      c,a                         ; .
 900+ 723C C5                                   push    bc                          ; save sign to stack
 901+ 723D 7D                                   ld      a,l                         ; a = 8 bit abs z
 902+ 723E CD 2E 9E                             call    AequAdivQmul96ABS              ; e = a /q * 96 (d was already loaded with q)
 903+ 7241 5F                                   ld      e,a                         ; .
 904+ 7242                                      EDiv10Inline                        ; a = e / 10
 904+ 7242 16 00       >                        ld      d,0
 904+ 7244 62 6B       >                        ld      hl,de
 904+ 7246 29          >                        add     hl,hl
 904+ 7247 19          >                        add     hl,de
 904+ 7248 29          >                        add     hl,hl
 904+ 7249 29          >                        add     hl,hl
 904+ 724A 19          >                        add     hl,de
 904+ 724B 29          >                        add     hl,hl
 905+ 724C 7C                                   ld      a,h                         ; .
 906+ 724D C1                                   pop     bc                          ; retrieve sign
 907+ 724E FE 00                                cp      0
 908+ 7250 28 06                                jr      z,.DoneNormX                ; in case we end up with - 0
 909+ 7252 CB 79                                bit     7,c                         ; if sign is negative then 2'c value
 910+ 7254 28 02                                jr      z,.DoneNormX
 911+ 7256 ED 44                                neg
 912+ 7258 DD 67        .DoneNormX:             ld      ixh,a                       ; ixh = (signed 2's c x /q * 96) / 10
 913+ 725A FD 55        .NormaliseY:            ld      d,iyl                       ; d = q
 914+ 725C E1                                   pop     hl                          ; hl y scaled
 915+ 725D 7C                                   ld      a,h                         ; c = sign
 916+ 725E E6 80                                and     SignOnly8Bit                ; .
 917+ 7260 4F                                   ld      c,a                         ; .
 918+ 7261 C5                                   push    bc                          ; save sign to stack
 919+ 7262 7D                                   ld      a,l                         ; a = 8 bit signed z
 920+ 7263 CD 2E 9E                             call    AequAdivQmul96ABS           ; .
 921+ 7266 5F                                   ld      e,a                         ; a = e / 10
 922+ 7267                                      EDiv10Inline                        ; .
 922+ 7267 16 00       >                        ld      d,0
 922+ 7269 62 6B       >                        ld      hl,de
 922+ 726B 29          >                        add     hl,hl
 922+ 726C 19          >                        add     hl,de
 922+ 726D 29          >                        add     hl,hl
 922+ 726E 29          >                        add     hl,hl
 922+ 726F 19          >                        add     hl,de
 922+ 7270 29          >                        add     hl,hl
 923+ 7271 7C                                   ld      a,h                         ; retrieve sign
 924+ 7272 C1                                   pop     bc                          ; retrieve sign
 925+ 7273 FE 00                                cp      0
 926+ 7275 28 06                                jr      z,.DoneNormY                 ; in case we end up with - 0
 927+ 7277 CB 79                                bit     7,c                         ; if sign is negative then 2'c value
 928+ 7279 28 02                                jr      z,.DoneNormY
 929+ 727B ED 44                                neg                                 ;
 930+ 727D 47           .DoneNormY:             ld      b,a                         ; result from Y
 931+ 727E DD 4C                                ld      c,ixh                       ; x = saved X
 932+ 7280              .SetSprite:             MMUSelectSpriteBank
 932+ 7280 ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
 933+ 7284 CD 46 71                             call    LimitCompassBC
 934+ 7287 CD 7E E2                             call    compass_station_move
 935+ 728A 3A 28 C0                             ld      a,(UBnKzsgn)
 936+ 728D CB 7F                                bit     7,a
 937+ 728F 20 04                                jr      nz,.StationBehind
 938+ 7291 CD 99 E3     .StationInfront:        call    show_compass_station_infront
 939+ 7294 C9                                   ret
 940+ 7295 CD A4 E3     .StationBehind:         call    show_compass_station_behind
 941+ 7298 C9                                   ret
 942+ 7299
 943+ 7299              UpdatePlanetSun:        MMUSelectPlanet
 943+ 7299 ED 91 56 54 >                     nextreg PlanetMMU,         BankPlanetData
 944+ 729D                                      Shift24BitScan  P_BnKyhi, P_BnKylo
 944+ 729D 2A 14 C0    >                        ld      hl,(P_BnKyhi)
 944+ 72A0 44          >                        ld      b,h
 944+ 72A1 7C          >                        ld      a,h
 944+ 72A2 E6 7F       >                        and     SignMask8Bit
 944+ 72A4 67          >                        ld      h,a
 944+ 72A5 3A 13 C0    >                        ld      a,(P_BnKylo)
 944+ 72A8 CB 27       >                        sla     a
 944+ 72AA CB 15       >                        rl      l
 944+ 72AC CB 14       >                        rl      h
 944+ 72AE CB 27       >                        sla     a
 944+ 72B0 CB 15       >                        rl      l
 944+ 72B2 CB 14       >                        rl      h
 944+ 72B4 CB 27       >                        sla     a
 944+ 72B6 CB 15       >                        rl      l
 944+ 72B8 CB 14       >                        rl      h
 944+ 72BA CB 27       >                        sla     a
 944+ 72BC CB 15       >                        rl      l
 944+ 72BE CB 14       >                        rl      h
 944+ 72C0 CB 27       >                        sla     a
 944+ 72C2 CB 15       >                        rl      l
 944+ 72C4 CB 14       >                        rl      h
 944+ 72C6 CB 27       >                        sla     a
 944+ 72C8 CB 15       >                        rl      l
 944+ 72CA CB 14       >                        rl      h
 945+ 72CC 3A 12 C0     .IsItInRange:           ld      a,(P_BnKxsgn)                ; if the high byte is not
 946+ 72CF 21 15 C0                             ld      hl,P_BnKysgn                 ; a sign only
 947+ 72D2 B6                                   or      (hl)                        ; then its too far away
 948+ 72D3 21 18 C0                             ld      hl,P_BnKzsgn                 ; for the scanner to draw
 949+ 72D6 B6                                   or      (hl)                        ; so rely on the compass
 950+ 72D7 E6 7F                                and     SignMask8Bit                ;
 951+ 72D9 C0                                   ret     nz                          ;
 952+ 72DA 2A 16 C0     .ItsInRange:            ld      hl,(P_BnKzlo)                ; we will get unsigned values
 953+ 72DD ED 5B 10 C0                          ld      de,(P_BnKxlo)
 954+ 72E1 ED 4B 13 C0                          ld      bc,(P_BnKylo)
 955+ 72E5 7C                                   ld      a,h
 956+ 72E6 B2                                   or      d
 957+ 72E7 B0                                   or      b
 958+ 72E8 E6 C0                                and     %11000000
 959+ 72EA C0                                   ret     nz                          ; if distance Hi > 64 on any ccord- off screen
 960+ 72EB 3A 12 C0     .MakeX2Compliment:      ld      a,(P_BnKxsgn)
 961+ 72EE CB 7F                                bit     7,a
 962+ 72F0 28 04                                jr      z,.absXHi
 963+ 72F2                                      NegD
 963+ 72F2 7A          >                    ld      a,d
 963+ 72F3 ED 44       >                    neg
 963+ 72F5 57          >                    ld      d,a
 964+ 72F6 7A           .absXHi:                ld      a,d
 965+ 72F7 C6 80                                add     ScannerX
 966+ 72F9 DD 67                                ld      ixh,a                       ; store adjusted X in ixh
 967+ 72FB CB 3C        .ProcessZCoord:         srl     h
 968+ 72FD CB 3C                                srl     h
 969+ 72FF 3A 18 C0     .MakeZ2Compliment:      ld      a,(P_BnKzsgn)
 970+ 7302 CB 7F                                bit     7,a
 971+ 7304 28 04                                jr      z,.absZHi
 972+ 7306                                      NegH
 972+ 7306 7C          >                    ld      a,h
 972+ 7307 ED 44       >                    neg
 972+ 7309 67          >                    ld      h,a
 973+ 730A 3E AB        .absZHi:                ld      a,ScannerY
 974+ 730C 94                                   sub     h
 975+ 730D FD 67                                ld      iyh,a                       ; make iyh adjusted Z = row on screen
 976+ 730F CB 38        .ProcessStickLength:    srl     b                           ; divide b by 2
 977+ 7311 20 0B                                jr      nz,.StickHasLength
 978+ 7313 FD 7C        .Stick0Length:          ld      a,iyh                       ; abs stick end is row - length
 979+ 7315 FD 6F                                ld      iyl,a
 980+ 7317                                      MMUSelectLayer2
 980+ 7317 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 981+ 731B C3 46 73                             jp      .NoStick
 982+ 731E 3A 15 C0     .StickHasLength:        ld      a,(P_BnKysgn)                ; if b  =  0 then no line
 983+ 7321 CB 7F                                bit     7,a
 984+ 7323 28 04                                jr      z,.absYHi
 985+ 7325                                      NegB
 985+ 7325 78          >                    ld      a,b
 985+ 7326 ED 44       >                    neg
 985+ 7328 47          >                    ld      b,a
 986+ 7329 FD 7C        .absYHi:                ld      a,iyh
 987+ 732B 90           .SetStickPos:           sub     b
 988+ 732C                                      JumpIfALTNusng ScannerBottom, .StickOnScreen
 988+ 732C FE BE       >                        cp      ScannerBottom
 988+ 732E DA 33 73    >                        jp		c, .StickOnScreen
 989+ 7331 3E BE                                ld      a,ScannerBottom
 990+ 7333 FD 6F        .StickOnScreen:         ld      iyl,a                       ; iyh is again stick end point
 991+ 7335 DD 6F                                ld      ixl,a
 992+ 7337 FD 44                                ld      b,iyh                       ; from row
 993+ 7339 DD 4C                                ld      c,ixh                       ; from col
 994+ 733B FD 55                                ld      d,iyl                       ; to row
 995+ 733D 1E B4                                ld      e,L2SunScanner
 996+ 733F                                      MMUSelectLayer2
 996+ 733F ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 997+ 7343 CD 9F E8                             call    l2_draw_vert_line_to
 998+ 7346 FD 45        .NoStick:               ld      b,iyl                       ; row
 999+ 7348 DD 4C                                ld      c,ixh                       ; col
1000+ 734A 3E FC                                ld      a,L2SunScannerBright
1001+ 734C CD 23 E4                             call    l2_plot_pixel
1002+ 734F FD 45                                ld      b,iyl
1003+ 7351 DD 4C                                ld      c,ixh
1004+ 7353 0C                                   inc     c
1005+ 7354 3E FC                                ld      a,L2SunScannerBright
1006+ 7356 CD 23 E4                             call    l2_plot_pixel
1007+ 7359 C9                                   ret
1008+ 735A
1009+ 735A              UpdateScannerSun:       MMUSelectSun
1009+ 735A ED 91 56 53 >                     nextreg SunMMU,            BankSunData
1010+ 735E                                      Shift24BitScan  SBnKyhi, SBnKylo
1010+ 735E 2A 14 C0    >                        ld      hl,(SBnKyhi)
1010+ 7361 44          >                        ld      b,h
1010+ 7362 7C          >                        ld      a,h
1010+ 7363 E6 7F       >                        and     SignMask8Bit
1010+ 7365 67          >                        ld      h,a
1010+ 7366 3A 13 C0    >                        ld      a,(SBnKylo)
1010+ 7369 CB 27       >                        sla     a
1010+ 736B CB 15       >                        rl      l
1010+ 736D CB 14       >                        rl      h
1010+ 736F CB 27       >                        sla     a
1010+ 7371 CB 15       >                        rl      l
1010+ 7373 CB 14       >                        rl      h
1010+ 7375 CB 27       >                        sla     a
1010+ 7377 CB 15       >                        rl      l
1010+ 7379 CB 14       >                        rl      h
1010+ 737B CB 27       >                        sla     a
1010+ 737D CB 15       >                        rl      l
1010+ 737F CB 14       >                        rl      h
1010+ 7381 CB 27       >                        sla     a
1010+ 7383 CB 15       >                        rl      l
1010+ 7385 CB 14       >                        rl      h
1010+ 7387 CB 27       >                        sla     a
1010+ 7389 CB 15       >                        rl      l
1010+ 738B CB 14       >                        rl      h
1011+ 738D 3A 12 C0     .IsItInRange:           ld      a,(SBnKxsgn)                ; if the high byte is not
1012+ 7390 21 15 C0                             ld      hl,SBnKysgn                 ; a sign only
1013+ 7393 B6                                   or      (hl)                        ; then its too far away
1014+ 7394 21 18 C0                             ld      hl,SBnKzsgn                 ; for the scanner to draw
1015+ 7397 B6                                   or      (hl)                        ; so rely on the compass
1016+ 7398 E6 7F                                and     SignMask8Bit                ;
1017+ 739A C0                                   ret     nz                          ;
1018+ 739B 2A 16 C0     .ItsInRange:            ld      hl,(SBnKzlo)                ; we will get unsigned values
1019+ 739E ED 5B 10 C0                          ld      de,(SBnKxlo)
1020+ 73A2 ED 4B 13 C0                          ld      bc,(SBnKylo)
1021+ 73A6 7C                                   ld      a,h
1022+ 73A7 B2                                   or      d
1023+ 73A8 B0                                   or      b
1024+ 73A9 E6 C0                                and     %11000000
1025+ 73AB C0                                   ret     nz                          ; if distance Hi > 64 on any ccord- off screen
1026+ 73AC 3A 12 C0     .MakeX2Compliment:      ld      a,(SBnKxsgn)
1027+ 73AF CB 7F                                bit     7,a
1028+ 73B1 28 04                                jr      z,.absXHi
1029+ 73B3                                      NegD
1029+ 73B3 7A          >                    ld      a,d
1029+ 73B4 ED 44       >                    neg
1029+ 73B6 57          >                    ld      d,a
1030+ 73B7 7A           .absXHi:                ld      a,d
1031+ 73B8 C6 80                                add     ScannerX
1032+ 73BA DD 67                                ld      ixh,a                       ; store adjusted X in ixh
1033+ 73BC CB 3C        .ProcessZCoord:         srl     h
1034+ 73BE CB 3C                                srl     h
1035+ 73C0 3A 18 C0     .MakeZ2Compliment:      ld      a,(SBnKzsgn)
1036+ 73C3 CB 7F                                bit     7,a
1037+ 73C5 28 04                                jr      z,.absZHi
1038+ 73C7                                      NegH
1038+ 73C7 7C          >                    ld      a,h
1038+ 73C8 ED 44       >                    neg
1038+ 73CA 67          >                    ld      h,a
1039+ 73CB 3E AB        .absZHi:                ld      a,ScannerY
1040+ 73CD 94                                   sub     h
1041+ 73CE FD 67                                ld      iyh,a                       ; make iyh adjusted Z = row on screen
1042+ 73D0 CB 38        .ProcessStickLength:    srl     b                           ; divide b by 2
1043+ 73D2 20 0B                                jr      nz,.StickHasLength
1044+ 73D4 FD 7C        .Stick0Length:          ld      a,iyh                       ; abs stick end is row - length
1045+ 73D6 FD 6F                                ld      iyl,a
1046+ 73D8                                      MMUSelectLayer2
1046+ 73D8 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
1047+ 73DC C3 07 74                             jp      .NoStick
1048+ 73DF 3A 15 C0     .StickHasLength:        ld      a,(SBnKysgn)                ; if b  =  0 then no line
1049+ 73E2 CB 7F                                bit     7,a
1050+ 73E4 28 04                                jr      z,.absYHi
1051+ 73E6                                      NegB
1051+ 73E6 78          >                    ld      a,b
1051+ 73E7 ED 44       >                    neg
1051+ 73E9 47          >                    ld      b,a
1052+ 73EA FD 7C        .absYHi:                ld      a,iyh
1053+ 73EC 90           .SetStickPos:           sub     b
1054+ 73ED                                      JumpIfALTNusng ScannerBottom, .StickOnScreen
1054+ 73ED FE BE       >                        cp      ScannerBottom
1054+ 73EF DA F4 73    >                        jp		c, .StickOnScreen
1055+ 73F2 3E BE                                ld      a,ScannerBottom
1056+ 73F4 FD 6F        .StickOnScreen:         ld      iyl,a                       ; iyh is again stick end point
1057+ 73F6 DD 6F                                ld      ixl,a
1058+ 73F8 FD 44                                ld      b,iyh                       ; from row
1059+ 73FA DD 4C                                ld      c,ixh                       ; from col
1060+ 73FC FD 55                                ld      d,iyl                       ; to row
1061+ 73FE 1E B4                                ld      e,L2SunScanner
1062+ 7400                                      MMUSelectLayer2
1062+ 7400 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
1063+ 7404 CD 9F E8                             call    l2_draw_vert_line_to
1064+ 7407 FD 45        .NoStick:               ld      b,iyl                       ; row
1065+ 7409 DD 4C                                ld      c,ixh                       ; col
1066+ 740B 3E FC                                ld      a,L2SunScannerBright
1067+ 740D CD 23 E4                             call    l2_plot_pixel
1068+ 7410 FD 45                                ld      b,iyl
1069+ 7412 DD 4C                                ld      c,ixh
1070+ 7414 0C                                   inc     c
1071+ 7415 3E FC                                ld      a,L2SunScannerBright
1072+ 7417 CD 23 E4                             call    l2_plot_pixel
1073+ 741A C9                                   ret
1074+ 741B
1075+ 741B              ; This will do a planet update if we are not in space station range
1076+ 741B              UpdateScannerPlanet:    MMUSelectPlanet
1076+ 741B ED 91 56 54 >                     nextreg PlanetMMU,         BankPlanetData
1077+ 741F                                      Shift24BitScan  P_BnKyhi, P_BnKylo
1077+ 741F 2A 14 C0    >                        ld      hl,(P_BnKyhi)
1077+ 7422 44          >                        ld      b,h
1077+ 7423 7C          >                        ld      a,h
1077+ 7424 E6 7F       >                        and     SignMask8Bit
1077+ 7426 67          >                        ld      h,a
1077+ 7427 3A 13 C0    >                        ld      a,(P_BnKylo)
1077+ 742A CB 27       >                        sla     a
1077+ 742C CB 15       >                        rl      l
1077+ 742E CB 14       >                        rl      h
1077+ 7430 CB 27       >                        sla     a
1077+ 7432 CB 15       >                        rl      l
1077+ 7434 CB 14       >                        rl      h
1077+ 7436 CB 27       >                        sla     a
1077+ 7438 CB 15       >                        rl      l
1077+ 743A CB 14       >                        rl      h
1077+ 743C CB 27       >                        sla     a
1077+ 743E CB 15       >                        rl      l
1077+ 7440 CB 14       >                        rl      h
1077+ 7442 CB 27       >                        sla     a
1077+ 7444 CB 15       >                        rl      l
1077+ 7446 CB 14       >                        rl      h
1077+ 7448 CB 27       >                        sla     a
1077+ 744A CB 15       >                        rl      l
1077+ 744C CB 14       >                        rl      h
1078+ 744E 3A 12 C0     .IsItInRange:           ld      a,(P_BnKxsgn)                ; if the high byte is not
1079+ 7451 21 15 C0                             ld      hl,P_BnKysgn                 ; a sign only
1080+ 7454 B6                                   or      (hl)                        ; then its too far away
1081+ 7455 21 18 C0                             ld      hl,P_BnKzsgn                 ; for the scanner to draw
1082+ 7458 B6                                   or      (hl)                        ; so rely on the compass
1083+ 7459 E6 7F                                and     SignMask8Bit                ;
1084+ 745B C0                                   ret     nz                          ;
1085+ 745C 2A 16 C0     .ItsInRange:            ld      hl,(P_BnKzlo)                ; we will get unsigned values
1086+ 745F ED 5B 10 C0                          ld      de,(P_BnKxlo)
1087+ 7463 ED 4B 13 C0                          ld      bc,(P_BnKylo)
1088+ 7467 7C                                   ld      a,h
1089+ 7468 B2                                   or      d
1090+ 7469 B0                                   or      b
1091+ 746A E6 C0                                and     %11000000
1092+ 746C C0                                   ret     nz                          ; if distance Hi > 64 on any ccord- off screen
1093+ 746D 3A 12 C0     .MakeX2Compliment:      ld      a,(P_BnKxsgn)
1094+ 7470 CB 7F                                bit     7,a
1095+ 7472 28 04                                jr      z,.absXHi
1096+ 7474                                      NegD
1096+ 7474 7A          >                    ld      a,d
1096+ 7475 ED 44       >                    neg
1096+ 7477 57          >                    ld      d,a
1097+ 7478 7A           .absXHi:                ld      a,d
1098+ 7479 C6 80                                add     ScannerX
1099+ 747B DD 67                                ld      ixh,a                       ; store adjusted X in ixh
1100+ 747D CB 3C        .ProcessZCoord:         srl     h
1101+ 747F CB 3C                                srl     h
1102+ 7481 3A 18 C0     .MakeZ2Compliment:      ld      a,(P_BnKzsgn)
1103+ 7484 CB 7F                                bit     7,a
1104+ 7486 28 04                                jr      z,.absZHi
1105+ 7488                                      NegH
1105+ 7488 7C          >                    ld      a,h
1105+ 7489 ED 44       >                    neg
1105+ 748B 67          >                    ld      h,a
1106+ 748C 3E AB        .absZHi:                ld      a,ScannerY
1107+ 748E 94                                   sub     h
1108+ 748F FD 67                                ld      iyh,a                       ; make iyh adjusted Z = row on screen
1109+ 7491 CB 38        .ProcessStickLength:    srl     b                           ; divide b by 2
1110+ 7493 20 0B                                jr      nz,.StickHasLength
1111+ 7495 FD 7C        .Stick0Length:          ld      a,iyh                       ; abs stick end is row - length
1112+ 7497 FD 6F                                ld      iyl,a
1113+ 7499                                      MMUSelectLayer2
1113+ 7499 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
1114+ 749D C3 C8 74                             jp      .NoStick
1115+ 74A0 3A 15 C0     .StickHasLength:        ld      a,(P_BnKysgn)                ; if b  =  0 then no line
1116+ 74A3 CB 7F                                bit     7,a
1117+ 74A5 28 04                                jr      z,.absYHi
1118+ 74A7                                      NegB
1118+ 74A7 78          >                    ld      a,b
1118+ 74A8 ED 44       >                    neg
1118+ 74AA 47          >                    ld      b,a
1119+ 74AB FD 7C        .absYHi:                ld      a,iyh
1120+ 74AD 90           .SetStickPos:           sub     b
1121+ 74AE                                      JumpIfALTNusng ScannerBottom, .StickOnScreen
1121+ 74AE FE BE       >                        cp      ScannerBottom
1121+ 74B0 DA B5 74    >                        jp		c, .StickOnScreen
1122+ 74B3 3E BE                                ld      a,ScannerBottom
1123+ 74B5 FD 6F        .StickOnScreen:         ld      iyl,a                       ; iyh is again stick end point
1124+ 74B7 DD 6F                                ld      ixl,a
1125+ 74B9 FD 44                                ld      b,iyh                       ; from row
1126+ 74BB DD 4C                                ld      c,ixh                       ; from col
1127+ 74BD FD 55                                ld      d,iyl                       ; to row
1128+ 74BF 1E B4                                ld      e,L2SunScanner
1129+ 74C1                                      MMUSelectLayer2
1129+ 74C1 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
1130+ 74C5 CD 9F E8                             call    l2_draw_vert_line_to
1131+ 74C8 FD 45        .NoStick:               ld      b,iyl                       ; row
1132+ 74CA DD 4C                                ld      c,ixh                       ; col
1133+ 74CC 3E FC                                ld      a,L2SunScannerBright
1134+ 74CE CD 23 E4                             call    l2_plot_pixel
1135+ 74D1 FD 45                                ld      b,iyl
1136+ 74D3 DD 4C                                ld      c,ixh
1137+ 74D5 0C                                   inc     c
1138+ 74D6 3E FC                                ld      a,L2SunScannerBright
1139+ 74D8 CD 23 E4                             call    l2_plot_pixel
1140+ 74DB C9                                   ret
1141+ 74DC
1142+ 74DC
1143+ 74DC              ; As the space station is always ship 0 then we can just use the scanner
1144+ 74DC
1145+ 74DC              ; This will go though all the universe ship data banks and plot, for now we will just work on one bank
1146+ 74DC              ; Supports 24 bit xyz
1147+ 74DC 3A 91 C0     UpdateScannerShip:      ld      a,(UBnKexplDsp)             ; if bit 4 is clear then ship should not be drawn
1148+ 74DF CB 67                                bit     4,a                         ; .
1149+ 74E1                                      ;DEBUG ret     z                           ; .
1150+ 74E1 3A 4E C4                             ld      a,(ShipTypeAddr)            ; if its a planet or sun, do not display
1151+ 74E4 CB 7F                                bit     7,a
1152+ 74E6 C0                                   ret     nz
1153+ 74E7              ; DEBUG Add in station types later
1154+ 74E7 3A 28 C0     .NotMissile:            ld      a,(UBnKzsgn)                ; any high byte causes skip
1155+ 74EA 47                                   ld      b,a
1156+ 74EB 3A 22 C0                             ld      a,(UBnKxsgn)                ; .
1157+ 74EE 4F                                   ld      c,a
1158+ 74EF 3A 25 C0                             ld      a,(UBnKysgn)                ; .
1159+ 74F2 B0                                   or      b                           ; .
1160+ 74F3 B1                                   or      c                           ; .
1161+ 74F4 E6 7F                                and     SignMask8Bit                ; so we are checking to see if very high byte is non zero
1162+ 74F6 C0                                   ret     nz
1163+ 74F7 2A 26 C0     .CheckLowAndMidByte:    ld      hl,(UBnKzlo)                ; Any distance > 64 causes skip
1164+ 74FA ED 5B 20 C0                          ld      de,(UBnKxlo)                ;
1165+ 74FE ED 4B 23 C0                          ld      bc,(UBnKylo)                ;
1166+ 7502 7C                                   ld      a,h                         ;
1167+ 7503 B2                                   or      d                           ;
1168+ 7504 B0                                   or      b                           ;
1169+ 7505 E6 C0                                and     %11000000                   ;
1170+ 7507 C0                                   ret     nz                          ; if distance Hi > 64 on any ccord- off screen
1171+ 7508 3A 22 C0     .MakeX2Compliment:      ld      a,(UBnKxsgn)
1172+ 750B CB 7F                                bit     7,a
1173+ 750D 28 04                                jr      z,.absXHi
1174+ 750F                                      NegD
1174+ 750F 7A          >                    ld      a,d
1174+ 7510 ED 44       >                    neg
1174+ 7512 57          >                    ld      d,a
1175+ 7513 7A           .absXHi:                ld      a,d
1176+ 7514 C6 80                                add     ScannerX
1177+ 7516 DD 67                                ld      ixh,a                       ; store adjusted X in ixh
1178+ 7518 CB 3C        .ProcessZCoord:         srl     h
1179+ 751A CB 3C                                srl     h
1180+ 751C 3A 28 C0     .MakeZ2Compliment:      ld      a,(UBnKzsgn)
1181+ 751F CB 7F                                bit     7,a
1182+ 7521 28 04                                jr      z,.absZHi
1183+ 7523                                      NegH
1183+ 7523 7C          >                    ld      a,h
1183+ 7524 ED 44       >                    neg
1183+ 7526 67          >                    ld      h,a
1184+ 7527 3E AB        .absZHi:                ld      a,ScannerY
1185+ 7529 94                                   sub     h
1186+ 752A FD 67                                ld      iyh,a                       ; make iyh adjusted Z = row on screen
1187+ 752C CB 38        .ProcessStickLength:    srl     b                           ; divide b by 2
1188+ 752E 20 2A                                jr      nz,.StickHasLength
1189+ 7530 FD 7C        .Stick0Length:          ld      a,iyh                       ; abs stick end is row - length
1190+ 7532 FD 6F                                ld      iyl,a
1191+ 7534 DD 7D                                ld      a,ixl
1192+ 7536                                      GetShipColorBright
1192+ 7536 21 46 6F    >                        ld      hl,ScannerColourTable
1192+ 7539 3A 4E C4    >                        ld      a,(ShipTypeAddr)         ; for now to bypass hostile missile
1192+ 753C FE 01       >                        cp      1                        ; for now to bypass hostile missile
1192+ 753E 28 0A       >                        jr      z,.UsingColourTable    ; for now to bypass hostile missile
1192+ 7540 3A 4F C4    >                        ld      a,(ShipNewBitsAddr)
1192+ 7543 E6 04       >                        and     ShipIsHostile
1192+ 7545 28 03       >                        jr      z,.UsingColourTable
1192+ 7547 21 4E 6F    >.UsingHostileColour:    ld      hl,ScannerColourTableHostile
1192+ 754A 3A 4E C4    >.UsingColourTable:      ld      a,(ShipTypeAddr)
1192+ 754D CB 27       >                        sla     a                            ; as its byte pairs * 2
1192+ 754F 3C          >                        inc     a
1192+ 7550 ED 31       >                        add     hl,a
1192+ 7552 7E          >                        ld      a,(hl)
1193+ 7553                                      MMUSelectLayer2
1193+ 7553 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
1194+ 7557 C3 A2 75                             jp      .NoStick
1195+ 755A 3A 25 C0     .StickHasLength:        ld      a,(UBnKysgn)                ; if b  =  0 then no line
1196+ 755D CB 7F                                bit     7,a
1197+ 755F 28 04                                jr      z,.absYHi
1198+ 7561                                      NegB
1198+ 7561 78          >                    ld      a,b
1198+ 7562 ED 44       >                    neg
1198+ 7564 47          >                    ld      b,a
1199+ 7565 FD 7C        .absYHi:                ld      a,iyh
1200+ 7567 90           .SetStickPos:           sub     b
1201+ 7568                                      JumpIfALTNusng ScannerBottom, .StickOnScreen
1201+ 7568 FE BE       >                        cp      ScannerBottom
1201+ 756A DA 6F 75    >                        jp		c, .StickOnScreen
1202+ 756D 3E BE                                ld      a,ScannerBottom
1203+ 756F FD 6F        .StickOnScreen:         ld      iyl,a                       ; iyh is again stick end point
1204+ 7571                                      GetShipColor
1204+ 7571 21 46 6F    >                        ld      hl,ScannerColourTable
1204+ 7574 3A 4E C4    >                        ld      a,(ShipTypeAddr)         ; for now to bypass hostile missile
1204+ 7577 FE 01       >                        cp      1                        ; for now to bypass hostile missile
1204+ 7579 28 0A       >                        jr      z,.UsingColourTable    ; for now to bypass hostile missile
1204+ 757B 3A 4F C4    >                        ld      a,(ShipNewBitsAddr)
1204+ 757E E6 04       >                        and     ShipIsHostile
1204+ 7580 28 03       >                        jr      z,.UsingColourTable
1204+ 7582 21 4E 6F    >.UsingHostileColour:    ld      hl,ScannerColourTableHostile
1204+ 7585 3A 4E C4    >.UsingColourTable:      ld      a,(ShipTypeAddr)
1204+ 7588 CB 27       >                        sla     a                            ; as its byte pairs * 2
1204+ 758A ED 31       >                        add     hl,a
1204+ 758C 7E          >                        ld      a,(hl)
1205+ 758D DD 6F                                ld      ixl,a
1206+ 758F FD 44                                ld      b,iyh                       ; from row
1207+ 7591 DD 4C                                ld      c,ixh                       ; from col
1208+ 7593 FD 55                                ld      d,iyl                       ; to row
1209+ 7595 DD 5D                                ld      e,ixl                       ; colur will only be green or yellow for now
1210+ 7597 E5                                   push    hl
1211+ 7598                                      MMUSelectLayer2
1211+ 7598 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
1212+ 759C CD 9F E8                             call    l2_draw_vert_line_to
1213+ 759F E1                                   pop     hl
1214+ 75A0 23                                   inc     hl
1215+ 75A1 7E                                   ld      a,(hl)
1216+ 75A2 FD 45        .NoStick:               ld      b,iyl                       ; row
1217+ 75A4 DD 4C                                ld      c,ixh                       ; col
1218+ 75A6 F5                                   push    af
1219+ 75A7 CD 23 E4                             call    l2_plot_pixel
1220+ 75AA F1                                   pop     af
1221+ 75AB FD 45                                ld      b,iyl
1222+ 75AD DD 4C                                ld      c,ixh
1223+ 75AF 0C                                   inc     c
1224+ 75B0 CD 23 E4                             call    l2_plot_pixel
1225+ 75B3 C9                                   ret
1226+ 75B4
1227+ 75B4
# file closed: ./Views/ConsoleDrawing.asm
 512  75B4                          INCLUDE "./Tables/message_queue.asm"
# file opened: ./Tables/message_queue.asm
   1+ 75B4
   2+ 75B4
   3+ 75B4              ResetMessageQueue:      ZeroA
   3+ 75B4 AF          >                        xor a
   4+ 75B5 32 D5 7E                             ld      (MessageCount),a
   5+ 75B8 32 D6 7E                             ld      (MessageCurrent),a
   6+ 75BB 21 D9 7E                             ld      hl,MessageQueue
   7+ 75BE 11 D7 7E                             ld      de,MessageIndex
   8+ 75C1 06 05                                ld      b,5
   9+ 75C3 7D           .ClearMessageIndexs:    ld      a,l                                 ; Wipe out the indexes to all the data
  10+ 75C4 12                                   ld      (de),a                              ;
  11+ 75C5 13                                   inc     de                                  ;
  12+ 75C6 7C                                   ld      a,h                                 ;
  13+ 75C7 12                                   ld      (de),a                              ;
  14+ 75C8 13                                   inc     de                                  ;
  15+ 75C9 3E 21                                ld      a,MESSAGESIZE                       ;
  16+ 75CB ED 31                                add     hl,a                                ;
  17+ 75CD 10 F4                                djnz    .ClearMessageIndexs                 ;
  18+ 75CF 21 D9 7E     .ClearText:             ld      hl,MessageQueue
  19+ 75D2 11 AA 00                             ld      de,(MAXMESSAGES * MESSAGESIZE) + MAXMESSAGES    ; MessageQueue + MessageTimeout
  20+ 75D5 3E 00                                ld      a,0
  21+ 75D7 CD 32 7E                             call	memfill_dma
  22+ 75DA C9                                   ret
  23+ 75DB
  24+ 75DB              ; Message to enqeue is a string held at DE that must be terminated in \0
  25+ 75DB              ;                                       IYH = timer for message
  26+ 75DB 3A D5 7E     EnqueMessage:           ld      a,(MessageCount)                    ; Maximum message count check
  27+ 75DE                                      ReturnIfAGTENusng    MAXMESSAGES            ; we do not enque if queue is full
  27+ 75DE FE 05       >                        cp    MAXMESSAGES
  27+ 75E0 D0          >                        ret	 nc
  28+ 75E1 3C                                   inc     a
  29+ 75E2 32 D5 7E                             ld      (MessageCount),a                    ; get ready for next message
  30+ 75E5 4F           .AddMessage:            ld      c,a
  31+ 75E6 3A D6 7E                             ld      a,(MessageCurrent)                  ; a = current message id + count + 1
  32+ 75E9 81                                   add     c                                   ;
  33+ 75EA                                      JumpIfALTNusng MAXMESSAGES, .ReadyToAdd     ; a = a modulus 5 (note we can only hit 5 messages
  33+ 75EA FE 05       >                        cp      MAXMESSAGES
  33+ 75EC DA F1 75    >                        jp		c, .ReadyToAdd
  34+ 75EF D6 05        .CircularQueue:         sub     MAXMESSAGES                         ; so only need 1 cycle of modulus
  35+ 75F1 21 7E 7F     .ReadyToAdd:            ld      hl,MessageTimeout                   ; write out message display time
  36+ 75F4 ED 31                                add     hl,a                                ; as some may be brief messages
  37+ 75F6 4F                                   ld      c,a                                 ;
  38+ 75F7 FD 7C                                ld      a,iyh                               ;
  39+ 75F9 77                                   ld      (hl),a                              ;
  40+ 75FA 79                                   ld      a,c                                 ; get back index
  41+ 75FB 21 D7 7E                             ld      hl,MessageIndex
  42+ 75FE                                      HLEquAddrAtHLPlusA                          ; hl = target location for message
  42+ 75FE CB 27       >                    sla         a
  42+ 7600 ED 31       >                    add         hl,a
  42+ 7602 7E          >                    ld          a,(hl)
  42+ 7603 23          >                    inc         hl
  42+ 7604 66          >                    ld          h,(hl)
  42+ 7605 6F          >                    ld          l,a
  43+ 7606 EB                                   ex      de,hl                               ; de = destination, hl = message
  44+ 7607                                      ldCopyTextAtHLtoDE                          ; copy over text as we have done the rest
  44+ 7607 7E          >.CopyLoop:              ld      a,(hl)
  44+ 7608 12          >                        ld      (de),a
  44+ 7609 FE 00       >                        cp      0
  44+ 760B CA 12 76    >                        jp      z,.DoneCopy
  44+ 760E 23          >                        inc     hl
  44+ 760F 13          >                        inc     de
  44+ 7610 18 F5       >                        jr      .CopyLoop
  44+ 7612             >.DoneCopy:
  45+ 7612 C9                                   ret
  46+ 7613
  47+ 7613 3A D6 7E     UpdateMessageTimer:     ld      a,(MessageCurrent)
  48+ 7616 21 7E 7F                             ld      hl,MessageTimeout
  49+ 7619 ED 31                                add     hl,a
  50+ 761B 7E                                   ld      a,(hl)
  51+ 761C 3D                                   dec     a
  52+ 761D 28 02                                jr      z,.UpdateQueue
  53+ 761F 77           .UpdateTimer            ld      (hl),a
  54+ 7620 C9                                   ret
  55+ 7621 77           .UpdateQueue:           ld      (hl),a
  56+ 7622 21 D5 7E                             ld      hl,MessageCount
  57+ 7625 35                                   dec     (hl)
  58+ 7626 3A D6 7E                             ld      a,(MessageCurrent)
  59+ 7629 23                                   inc     hl
  60+ 762A                                      JumpIfALTNusng MAXMESSAGES, .ReadyToUpdate
  60+ 762A FE 05       >                        cp      MAXMESSAGES
  60+ 762C DA 30 76    >                        jp		c, .ReadyToUpdate
  61+ 762F              .CircularQueue:         ZeroA
  61+ 762F AF          >                        xor a
  62+ 7630 32 D6 7E     .ReadyToUpdate          ld      (MessageCurrent),a
  63+ 7633 C9                                   ret
  64+ 7634
  65+ 7634 3A D5 7E     DisplayCurrentMessage:  ld      a,(MessageCount)
  66+ 7637                                      ReturnIfAIsZero
  66+ 7637 A7          >                        and     a
  66+ 7638 C8          >                        ret     z
  67+ 7639 3A D6 7E                             ld      a,(MessageCurrent)
  68+ 763C 21 D7 7E                             ld      hl,MessageIndex
  69+ 763F                                      HLEquAddrAtHLPlusA
  69+ 763F CB 27       >                    sla         a
  69+ 7641 ED 31       >                    add         hl,a
  69+ 7643 7E          >                    ld          a,(hl)
  69+ 7644 23          >                    inc         hl
  69+ 7645 66          >                    ld          h,(hl)
  69+ 7646 6F          >                    ld          l,a
  70+ 7647                                      MMUSelectLayer1
  70+ 7647 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
  71+ 764B 11 01 00                             ld      de,MESSAGELINE
  72+ 764E CD 77 E2                             call    l1_print_at_wrap
  73+ 7651 C9                                   ret
  74+ 7652
  75+ 7652              HyperSpaceMessage:      MMUSelectLayer1                 ; We are using Layer 1
  75+ 7652 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
  76+ 7656 11 97 67     .DisplayHyperCountDown: ld      de,Hyp_to               ; Sort out destination
  77+ 7659 21 70 90                             ld      hl,name_expanded
  78+ 765C                                      ldCopyTextAtHLtoDE
  78+ 765C 7E          >.CopyLoop:              ld      a,(hl)
  78+ 765D 12          >                        ld      (de),a
  78+ 765E FE 00       >                        cp      0
  78+ 7660 CA 67 76    >                        jp      z,.DoneCopy
  78+ 7663 23          >                        inc     hl
  78+ 7664 13          >                        inc     de
  78+ 7665 18 F5       >                        jr      .CopyLoop
  78+ 7667             >.DoneCopy:
  79+ 7667 AF           .DoneName:              xor     a
  80+ 7668 12                                   ld      (de),a
  81+ 7669 32 B3 67                             ld      (Hyp_message+31),a      ; max out at 32 characters
  82+ 766C 21 94 67     .CentreJustify:         ld      hl,Hyp_message          ; Center justify
  83+ 766F                                      HalfLengthHL
  83+ 766F 06 00       >                        ld      b,0
  83+ 7671 7E          >.CountLenLoop:          ld      a,(hl)
  83+ 7672 FE 00       >                        cp      0
  83+ 7674 28 04       >                        jr      z,.DoneCount
  83+ 7676 04          >                        inc     b
  83+ 7677 23          >                        inc     hl
  83+ 7678 18 F7       >                        jr      .CountLenLoop
  83+ 767A 3E 20       >.DoneCount:             ld      a,32
  83+ 767C 90          >                        sub     b
  83+ 767D CB 2F       >                        sra     a
  84+ 767F 21 CE 67                             ld      hl,Hyp_centeredTarget
  85+ 7682                                      ldClearTextLoop 32
  85+ 7682 47          >                        ld      b,a
  85+ 7683 3E 20       >                        ld      a,32
  85+ 7685 77          >.ClearLoop:             ld      (hl),a
  85+ 7686 23          >                        inc     hl
  85+ 7687 10 FC       >                        djnz    .ClearLoop
  86+ 7689 EB                                   ex      de,hl
  87+ 768A 21 94 67                             ld      hl,Hyp_message
  88+ 768D                                      ldCopyTextAtHLtoDE
  88+ 768D 7E          >.CopyLoop:              ld      a,(hl)
  88+ 768E 12          >                        ld      (de),a
  88+ 768F FE 00       >                        cp      0
  88+ 7691 CA 98 76    >                        jp      z,.DoneCopy
  88+ 7694 23          >                        inc     hl
  88+ 7695 13          >                        inc     de
  88+ 7696 18 F5       >                        jr      .CopyLoop
  88+ 7698             >.DoneCopy:
  89+ 7698                                      ZeroA
  89+ 7698 AF          >                        xor a
  90+ 7699 32 EE 67                             ld      (Hyp_centeredEol),a
  91+ 769C 21 CA 67                             ld      hl,Hyp_counter           ; clear counter digits
  92+ 769F 3E 20                                ld      a,32                     ; clear counter digits
  93+ 76A1 77                                   ld      (hl),a                   ; clear counter digits
  94+ 76A2 23                                   inc     hl                       ; clear counter digits
  95+ 76A3 77                                   ld      (hl),a                   ; clear counter digits
  96+ 76A4 23                                   inc     hl                       ; clear counter digits
  97+ 76A5 77                                   ld      (hl),a                   ; clear counter digits
  98+ 76A6 CD 70 67                             call    UpdateCountdownNumber    ; Update count down
  99+ 76A9 21 C1 67                             ld      hl,Hyp_charging
 100+ 76AC                                      HalfLengthHL
 100+ 76AC 06 00       >                        ld      b,0
 100+ 76AE 7E          >.CountLenLoop:          ld      a,(hl)
 100+ 76AF FE 00       >                        cp      0
 100+ 76B1 28 04       >                        jr      z,.DoneCount
 100+ 76B3 04          >                        inc     b
 100+ 76B4 23          >                        inc     hl
 100+ 76B5 18 F7       >                        jr      .CountLenLoop
 100+ 76B7 3E 20       >.DoneCount:             ld      a,32
 100+ 76B9 90          >                        sub     b
 100+ 76BA CB 2F       >                        sra     a
 101+ 76BC 21 0F 68                             ld      hl,Hyp_centeredCharging
 102+ 76BF                                      ldClearTextLoop 32
 102+ 76BF 47          >                        ld      b,a
 102+ 76C0 3E 20       >                        ld      a,32
 102+ 76C2 77          >.ClearLoop:             ld      (hl),a
 102+ 76C3 23          >                        inc     hl
 102+ 76C4 10 FC       >                        djnz    .ClearLoop
 103+ 76C6 EB                                   ex      de,hl
 104+ 76C7 21 C1 67                             ld      hl,Hyp_charging
 105+ 76CA                                      ldCopyTextAtHLtoDE
 105+ 76CA 7E          >.CopyLoop:              ld      a,(hl)
 105+ 76CB 12          >                        ld      (de),a
 105+ 76CC FE 00       >                        cp      0
 105+ 76CE CA D5 76    >                        jp      z,.DoneCopy
 105+ 76D1 23          >                        inc     hl
 105+ 76D2 13          >                        inc     de
 105+ 76D3 18 F5       >                        jr      .CopyLoop
 105+ 76D5             >.DoneCopy:
 106+ 76D5 AF                                   xor     a
 107+ 76D6 32 2F 68                             ld      (Hyp_centeredEol2),a
 108+ 76D9 2A 9A 81     .UpdateHyperCountdown:  ld      hl,(InnerHyperCount)    ; Update inner loop of counter
 109+ 76DC 2D                                   dec     l                       ;
 110+ 76DD 20 26                                jr      nz,.decHyperInnerOnly   ; if its only inner loop updated the no display update
 111+ 76DF 25                                   dec     h                       ; if its outer loop counter
 112+ 76E0 FA 09 77                             jp      m,.HyperCountDone       ; abort once complete
 113+ 76E3 2E 0B        .resetHyperInner:       ld      l,$0B                   ; else display
 114+ 76E5 E5                                   push    hl
 115+ 76E6 16 0C                                ld      d,12
 116+ 76E8 3E 06                                ld      a,L1ColourPaperBlack | L1ColourInkYellow
 117+ 76EA CD 9A E0                             call    l1_attr_cls_2DlinesA
 118+ 76ED 16 60                                ld      d,12 * 8
 119+ 76EF CD 83 E0                             call    l1_cls_2_lines_d
 120+ 76F2 11 00 60                             ld      de,$6000
 121+ 76F5 21 CE 67                             ld      hl,Hyp_centeredTarget
 122+ 76F8 CD E3 E0                             call    l1_print_at
 123+ 76FB 11 00 68                             ld      de,$6800
 124+ 76FE 21 0F 68                             ld      hl,Hyp_centeredCharging
 125+ 7701 CD E3 E0                             call    l1_print_at
 126+ 7704 E1                                   pop     hl
 127+ 7705 22 9A 81     .decHyperInnerOnly:     ld      (InnerHyperCount),hl
 128+ 7708 C9                                   ret
 129+ 7709 21 00 00     .HyperCountDone:        ld      hl,0
 130+ 770C 22 9A 81                             ld      (InnerHyperCount),hl
 131+ 770F 16 0C                                ld      d,12
 132+ 7711 3E 00                                ld      a,L1ColourPaperBlack | L1ColourInkBlack
 133+ 7713 CD 9A E0                             call    l1_attr_cls_2DlinesA
 134+ 7716 16 60                                ld      d,12 * 8
 135+ 7718 CD 83 E0                             call    l1_cls_2_lines_d
 136+ 771B                                      ForceTransition ScreenHyperspace                            ; transition to hyperspace
 136+ 771B 3E 0E       >                        ld      a,ScreenHyperspace
 136+ 771D 32 37 6A    >                        ld      (ScreenTransitionForced), a
 137+ 7720 C9                                   ret
 138+ 7721
# file closed: ./Tables/message_queue.asm
 513  7721                          INCLUDE "./Tables/LaserStatsTable.asm"
# file opened: ./Tables/LaserStatsTable.asm
   1+ 7721              ; LaserTypeTable
   2+ 7721              ; laser type = id of laser
   3+ 7721              ; laser pulse pause = time before next pulse
   4+ 7721              ; laser pulse duration = time laser is on per shot
   5+ 7721              ; laser damage output
   6+ 7721              ;
   7+ 7721              ; LaserType
   8+ 7721              ; LaserPulseRate                          ; how many pulses can be fired before long pause
   9+ 7721              ; LaserPulseOnTime                        ; cycles laser is on for
  10+ 7721              ; LaserPulseOffTime                       ; cycles laser is off for
  11+ 7721              ; LaserPulseRest                          ; time before pulse count resets to 0 (i.e cooldown)
  12+ 7721              ; LaserDamageOutput                       ; amount of damage for a laser hit
  13+ 7721              ; LaserEnergyDrain                        ; amount of energy drained by cycle
  14+ 7721              ; LaserHeat                               ; amount of heat generated
  15+ 7721              ; LaserDurability                         ; probabability out of 255 that a hit on unshielded will add random amount of damage
  16+ 7721              ; LaserDurabilityAmount                   ; max amount of damagage can be sustained in one damage hit
  17+ 7721              ; LaserInMarkets                          ; can this laser be purchased 0 = yes 1 = no
  18+ 7721              ; LaserTechLevel                          ; minimum tech level system to buy from
  19+ 7721              ;
  20+ 7721              LaserStatsTableWidth    EQU 12
  21+ 7721              ;                           0    1    2    3    4    5    6    7    8    9   10   11
  22+ 7721              ;                          Typ  Rate On   Off  Rst  Dam  Drn  Het  Dur  DAt  Mrk  Tek
  23+ 7721 00 02 05 20  LaserStatsTable:        DB $00, $02, $05, $20, $40, $03, $10, $02, $20 ,$10 ,$00, $00; basic laser
  23+ 7725 40 03 10 02
  23+ 7729 20 10 00 00
  24+ 772D 01 01 08 08                          DB $01, $01, $08, $08, $20, $03, $10, $08, $20 ,$10 ,$00, $01; pulse laser
  24+ 7731 20 03 10 08
  24+ 7735 20 10 00 01
  25+ 7739 02 03 06 06                          DB $02, $03, $06, $06, $3A, $03, $05, $02, $20 ,$10 ,$00, $02; burst laser TODO THIS ONE IS ODD
  25+ 773D 3A 03 05 02
  25+ 7741 20 10 00 02
  26+ 7745 03 01 05 05                          DB $03, $01, $05, $05, $01, $02, $04, $05, $30 ,$10 ,$00, $03; Gatling laser
  26+ 7749 01 02 04 05
  26+ 774D 30 10 00 03
  27+ 7751 04 01 01 00                          DB $04, $01, $01, $00, $00, $03, $03, $10, $20 ,$10 ,$00, $04; beam ; DOES NOT WORK
  27+ 7755 00 03 03 10
  27+ 7759 20 10 00 04
  28+ 775D 05 01 20 30                          DB $05, $01, $20, $30, $60, $03, $02, $02, $20 ,$10 ,$00, $05; mining
  28+ 7761 60 03 02 02
  28+ 7765 20 10 00 05
  29+ 7769 06 00 01 00                          DB $06, $00, $01, $00, $06, $05, $05, $05, $10 ,$10 ,$00, $08; military beam DOES NOT WORK
  29+ 776D 06 05 05 05
  29+ 7771 10 10 00 08
  30+ 7775 07 01 01 02                          DB $07, $01, $01, $02, $20, $22, $01, $30, $30 ,$11 ,$01, $10; thargoid
  30+ 7779 20 22 01 30
  30+ 777D 30 11 01 10
  31+ 7781 08 01 05 10                          DB $08, $01, $05, $10, $80, $70, $02, $03, $60 ,$11 ,$01, $10; Starkiller
  31+ 7785 80 70 02 03
  31+ 7789 60 11 01 10
  32+ 778D
  33+ 778D
  34+ 778D
  35+ 778D
  36+ 778D
  37+ 778D
  38+ 778D
# file closed: ./Tables/LaserStatsTable.asm
 514  778D                          INCLUDE "./Tables/ShipClassTable.asm"
# file opened: ./Tables/ShipClassTable.asm
   1+ 778D              ; Note when selecting its skewed by rank which ads a filter so bigger ships should be later in the table
   2+ 778D              ; More optimal will be to order all the ships and then have an entry point and length of tablea
   3+ 778D
   4+ 778D              ; Each ship type table is constructed as follows
   5+ 778D              ; Header - nbr of ships
   6+ 778D              ; table of min rank
   7+ 778D              ; table of ship ids
   8+ 778D              ; note unless "SelectSpawnType" is changed we can't put this in location $0000 as it doesn't check L in HL for speed (thsi could be done though)
   9+ 778D
  10+ 778D              ; we may nneed to rebuidl these tables for cp instruction so its max rank not min
  11+ 778D              ; Coding limit for simplicity, each table has 15 ships in it
  12+ 778D              ; Rank table structure:
  13+ 778D              ; Columns = Selection to pick from
  14+ 778D              ; Rows    = Rank maxium rating, Type of Ship to Spawn
  15+ 778D              ; Algorithims slect which rank table to select based on galaxy, player rankings and cargo contained etc.
  16+ 778D 00 00 01 01  ShipPirateTableARank:    DB RankingEQHarmless, RankingEQHarmless, RankingEQMostly,   RankingEQMostly,     RankingEQPoor,     RankingEQAverage,   RankingEQDeadly,    RankingEQDeadly
  16+ 7791 02 03 07 07
  17+ 7795 23 00 02 0B  ShipPirateTableA:        DB ShipID_Sidewinder, ShipID_Adder,      ShipID_Asp_Mk_2,   ShipID_Cobra_Mk_3_P, ShipID_Boulder,    ShipID_Bushmaster,  ShipID_Python_P,    ShipID_Anaconda
  17+ 7799 05 07 1F 01
  18+ 779D
  19+ 779D 00 01 03 07  ShipPirateTableBRank:    DB RankingEQHarmless, RankingEQMostly,   RankingEQAverage,  RankingEQDeadly,     RankingEQDeadly,   RankingEQAbove,     RankingEQCompetent, RankingEQCompetent
  19+ 77A1 07 04 05 05
  20+ 77A5 08 2A 2B 1F  ShipPirateTableB:        DB ShipID_Chameleon,  ShipID_Worm,       ShipID_Rattler,    ShipID_Python_P,     ShipID_Anaconda,   ShipID_Bushmaster,  ShipID_Python_P,    ShipID_Anaconda
  20+ 77A9 01 07 1F 01
  21+ 77AD
  22+ 77AD 00 00 00 00  ShipBodiesTableARank:    DB RankingEQHarmless, RankingEQHarmless, RankingEQHarmless, RankingEQHarmless,   RankingEQHarmless, RankingEQHarmless,  RankingEQHarmless,  RankingEQDangerous
  22+ 77B1 00 00 00 06
  23+ 77B5 06 06 06 06  ShipBodiesTableA:        DB ShipID_Asteroid,   ShipID_Asteroid,   ShipID_Asteroid,   ShipID_Asteroid,     ShipID_Asteroid,   ShipID_Asteroid,    ShipID_Asteroid,    ShipID_Rock_Hermit
  23+ 77B9 06 06 06 20
  24+ 77BD
  25+ 77BD 00 00 00 01  ShipNonTraderTableARank: DB RankingEQHarmless, RankingEQHarmless, RankingEQHarmless, RankingEQMostly,     RankingEQPoor,     RankingEQAverage,   RankingEQAverage,   RankingEQCompetent
  25+ 77C1 02 03 03 05
  26+ 77C5 00 23 00 18  ShipNonTraderTableA:     DB ShipID_Adder,      ShipID_Sidewinder, ShipID_Adder,      ShipID_Mamba,        ShipID_Krait,      ShipID_Gecko,       ShipID_Python,      ShipID_Anaconda
  26+ 77C9 16 13 1E 01
  27+ 77CD
  28+ 77CD 00 00 00 00  ShipCopTableARank:       DB RankingEQHarmless, RankingEQHarmless, RankingEQHarmless, RankingEQHarmless,   RankingEQHarmless, RankingEQHarmless,  RankingEQAverage,   RankingEQCompetent
  28+ 77D1 00 00 03 05
  29+ 77D5 29 29 29 29  ShipCopTableA:           DB ShipID_Viper,      ShipID_Viper,      ShipID_Viper,      ShipID_Viper,        ShipID_Viper,      ShipID_Viper,       ShipID_Python,      ShipID_Anaconda
  29+ 77D9 29 29 1E 01
  30+ 77DD
  31+ 77DD 00 01 02 03  ShipHunterTableRank:     DB RankingEQHarmless, RankingEQMostly,   RankingEQPoor,     RankingEQAverage,    RankingEQAbove,    RankingEQCompetent, RankingEQCompetent, RankingEQCompetent
  31+ 77E1 04 05 05 05
  32+ 77E5 23 00 03 1E  ShipHunterTableA:        DB ShipID_Sidewinder, ShipID_Adder,      ShipID_Boa,        ShipID_Python,       ShipID_Krait,      ShipID_Fer_De_Lance,ShipID_Mamba,       ShipID_Cougar
  32+ 77E9 16 12 18 0E
  33+ 77ED
  34+ 77ED 00 05 05 06  ShipHunterTableBRank:    DB RankingEQHarmless, RankingEQCompetent,RankingEQCompetent,RankingEQDangerous,  RankingEQDangerous,RankingEQDangerous, RankingEQDeadly,    RankingEQDeadly
  34+ 77F1 06 06 07 07
  35+ 77F5 23 00 15 1E  ShipHunterTableB:        DB ShipID_Sidewinder, ShipID_Adder,      ShipID_Iguana,     ShipID_Python,       ShipID_Dragon,     ShipID_Gecko,       ShipID_Mamba,       ShipID_Anaconda
  35+ 77F9 10 13 18 01
  36+ 77FD
  37+ 77FD 00 05 06 06  ShipHunterTableCRank:    DB RankingEQHarmless, RankingEQCompetent,RankingEQDangerous,RankingEQDangerous,  RankingEQDeadly,   RankingEQElite,     RankingEQSkollob,   RankingEQNutter
  37+ 7801 07 08 09 0A
  38+ 7805 00 1A 1B 10  ShipHunterTableC:        DB ShipID_Adder,      ShipID_Monitor,    ShipID_Moray,      ShipID_Dragon,       ShipID_Gecko,      ShipID_Ghavial,     ShipID_Ophidian,    ShipID_Thargoid
  38+ 7809 13 14 1C 26
  39+ 780D
  40+ 780D 00 00 00 00  ShipJunkTableRankA:      DB RankingEQHarmless, RankingEQHarmless, RankingEQHarmless, RankingEQHarmless,   RankingEQHarmless, RankingEQAverage,   RankingEQAbove,     RankingEQCompetent
  40+ 7811 00 03 04 05
  41+ 7815 06 06 06 1D  ShipJunkTableA:          DB ShipID_Asteroid,   ShipID_Asteroid,   ShipID_Asteroid,   ShipID_Plate,        ShipID_CargoType5, ShipID_Splinter,    ShipID_Escape_Pod,  ShipID_Rock_Hermit
  41+ 7819 04 24 11 20
  42+ 781D
  43+ 781D              ShipSuperstructureTableA
  44+ 781D
  45+ 781D
  46+ 781D              ; This is determined by system algorithm so there is no rank factor
  47+ 781D 0D           MasterStations:         DB ShipID_Coriolis
  48+ 781E 0F                                   DB ShipID_Dodo
  49+ 781F
  50+ 781F 19           ShipMissileTable        DB  ShipID_Missile
  51+ 7820              ShipMissileTableSize    EQU $ - ShipMissileTable
  52+ 7820
  53+ 7820
  54+ 7820
  55+ 7820              ;; clean up below or delte
  56+ 7820              ;ShipPirateTable:
  57+ 7820              ;ShipPackList:           DB  ShipID_Sidewinder, ShipID_Mamba, ShipID_Krait, ShipID_Adder, ShipID_Gecko, ShipID_Cobra_Mk_1, ShipID_Worm, ShipID_Cobra_Mk_3_P
  58+ 7820              ;ShipPackTableSize       EQU $ - ShipPackList
  59+ 7820              ;ShipHunterTable         DB  ShipID_Cobra_Mk_3_P, ShipID_Asp_Mk_2, ShipID_Python_P, ShipID_Fer_De_Lance
  60+ 7820              ;ShipHunterTableSize     EQU $ - ShipHunterTable
  61+ 7820              ;
  62+ 7820              ;MasterShipTable:
  63+ 7820              ;MasterStations:         DB ShipID_Coriolis
  64+ 7820              ;                        DB ShipID_Dodo
  65+ 7820              ;
  66+ 7820              ;
  67+ 7820              ;
  68+ 7820              ;MasterJunk:             DB ShipID_Asteroid
  69+ 7820              ;                        DB ShipID_Plate
  70+ 7820              ;                        DB ShipID_CargoType5
  71+ 7820              ;                        DB ShipID_Splinter
  72+ 7820              ;                        DB ShipID_Escape_Pod
  73+ 7820              ;                        DB ShipID_Rock_Hermit
  74+ 7820              ;MasterSuperstructure:
  75+ 7820              ;MasterMissile:          DB ShipID_Missile
  76+ 7820
  77+ 7820
  78+ 7820
  79+ 7820
  80+ 7820
  81+ 7820 26           MasterThargoid:         DB ShipID_Thargoid
  82+ 7821 27                                   DB ShipID_Thargon
  83+ 7822
  84+ 7822 0C           MasterMission:          DB ShipID_Constrictor
  85+ 7823
  86+ 7823
  87+ 7823
  88+ 7823
  89+ 7823
  90+ 7823 17                                   DB ShipID_Logo
  91+ 7824 25                                   DB ShipID_TestVector
  92+ 7825
# file closed: ./Tables/ShipClassTable.asm
 515  7825
 516  7825 AF           SeedGalaxy0:            xor     a
 517  7826                                      MMUSelectGalaxyA
 517  7826 ED 92 57    >                     nextreg GalaxyDataMMU,     a
 518  7829 DD 21 16 E0                          ld      ix,galaxy_data
 519  782D AF                                   xor		a
 520  782E 32 BB 7F                             ld		(XSAV),a
 521  7831 CD 3F 86                             call    copy_galaxy_to_system
 522  7834 DD E5        SeedGalaxy0Loop:        push    ix
 523  7836 D1                                   pop     de
 524  7837 21 2E 80                             ld      hl,SystemSeed
 525  783A CD 45 86                             call    copy_seed
 526  783D DD E5                                push    ix
 527  783F E1                                   pop     hl
 528  7840 ED 34 08 00                          add     hl,8
 529  7844 E5                                   push    hl
 530  7845 DD E1                                pop     ix
 531  7847 CD 7A 86                             call    next_system_seed
 532  784A 3A BB 7F                             ld		a,(XSAV)
 533  784D 3D                                   dec		a
 534  784E FE 00                                cp		0
 535  7850 C8                                   ret		z
 536  7851 32 BB 7F                             ld		(XSAV),a
 537  7854 20 DE                                jr      nz,SeedGalaxy0Loop
 538  7856 C9                                   ret
 539  7857
 540  7857                  ;include "./ModelRender/testdrawing.asm"
 541  7857                  IFDEF SKIPATTRACT
 542  7857 ~                    DISPLAY "NOT LOADING ATTRACT MODE CODE"
 543  7857                  ELSE
 544  7857                      include "./Menus/AttractMode.asm"
# file opened: ./Menus/AttractMode.asm
   1+ 7857              AttractDuration            EQU $00F0
   2+ 7857              AttractCounterStart        EQU $80
   3+ 7857 F0 00        AttractTimer:              DW      AttractDuration
   4+ 7859 80           AttractCounter:            DB      AttractCounterStart
   5+ 785A
   6+ 785A 3D 08        Attract_boiler_text		DW $083D
   7+ 785C
   8+ 785C
   9+ 785C 4C 6F 61 64  ATTR_LoadCommander      DB "Load Commander (Y/N)",0
   9+ 7860 20 43 6F 6D
   9+ 7864 6D 61 6E 64
   9+ 7868 65 72 20 28
   9+ 786C 59 2F 4E 29
   9+ 7870 00
  10+ 7871
  11+ 7871 FF           LocalXCounter           DB $FF
  12+ 7872 FF           LocalZCounter           DB $FF
  13+ 7873 00           LastInterrupt           DB 0
  14+ 7874
  15+ 7874 CD EC 85     RandomXCounter:         call    doRandom
  16+ 7877 C0                                   ret     nz
  17+ 7878 3A 71 78                             ld      a,(LocalXCounter)
  18+ 787B EE 80                                xor     $80
  19+ 787D 32 71 78                             ld      (LocalXCounter),a
  20+ 7880 C9                                   ret
  21+ 7881
  22+ 7881 CD EC 85     RandomYCounter:         call    doRandom
  23+ 7884 C0                                   ret     nz
  24+ 7885                                      ;ReturnIfALTNusng 254
  25+ 7885 3A 72 78                             ld      a,(LocalZCounter)
  26+ 7888 EE 80                                xor     $80
  27+ 788A 32 72 78                             ld      (LocalZCounter),a
  28+ 788D C9                                   ret
  29+ 788E
  30+ 788E
  31+ 788E              AttractModeInit:        MMUSelectLayer1
  31+ 788E ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
  32+ 7892 CD 8F E0                             call	l1_cls
  33+ 7895 3E 07                                ld		a,7
  34+ 7897 CD AA E0                             call	l1_attr_cls_to_a
  35+ 789A 1E FF                                ld      e,$FF
  36+ 789C ED 5B 5A 78                          ld      de,(Attract_boiler_text)
  37+ 78A0 21 5C 78                             ld      hl,ATTR_LoadCommander
  38+ 78A3 CD E3 E0                             call    l1_print_at
  39+ 78A6                                      MMUSelectSpriteBank
  39+ 78A6 ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
  40+ 78AA CD B7 E7                             call        sprite_cls_cursors
  41+ 78AD              .ClearLayer2:           MMUSelectLayer2
  41+ 78AD ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
  42+ 78B1 CD 06 E0                             call    asm_l2_double_buffer_on
  43+ 78B4 CD 3A E3                             call    l2_cls
  44+ 78B7 CD 04 E4                             call    l2_flip_buffers
  45+ 78BA CD 3A E3                             call    l2_cls
  46+ 78BD                                      MMUSelectConsoleBank
  46+ 78BD ED 91 57 3D >					 nextreg ConsoleImageDataMMU,  BankConsole
  47+ 78C1 21 00 50     .LoadConsole:           ld          hl,ScreenL1Bottom       ; now the pointers are in Ubnk its easy to read
  48+ 78C4 11 00 E0                             ld          de,ConsoleImageData
  49+ 78C7 01 00 08                             ld          bc, ScreenL1BottomLen
  50+ 78CA CD 58 7E                             call        memcopy_dma
  51+ 78CD 21 00 5A                             ld          hl,ScreenL1AttrBtm       ; now the pointers are in Ubnk its easy to read
  52+ 78D0 11 00 E8                             ld          de,ConsoleAttributes
  53+ 78D3 01 00 01                             ld          bc, ScreenL1AttrBtmLen
  54+ 78D6 CD 58 7E                             call        memcopy_dma
  55+ 78D9 3A B4 7F                             ld          a,(InterruptCounter)
  56+ 78DC 32 73 78                             ld          (LastInterrupt),a
  57+ 78DF CD 98 79                             call        SelectARandomShip
  58+ 78E2 C9                                   ret
  59+ 78E3
  60+ 78E3
  61+ 78E3              ;.StartShip:             ld          a,(InterruptCounter)
  62+ 78E3              ;                        ld          hl,LastInterrupt
  63+ 78E3              ;                        cp          (hl)
  64+ 78E3              ;                        jp          z,.StartShip            ; we only refresh once per interupt
  65+ 78E3              ;                        ld          (hl),a
  66+ 78E3
  67+ 78E3              AttractModeMain:        MMUSelectKeyboard
  67+ 78E3 ED 91 57 65 >                     nextreg KeyboardMMU,       BankKeyboard
  68+ 78E7 CD 03 E1                             call    scan_keyboard
  69+ 78EA 3E 50                                ld      a,c_Pressed_Yes
  70+ 78EC                                      MMUSelectKeyboard
  70+ 78EC ED 91 57 65 >                     nextreg KeyboardMMU,       BankKeyboard
  71+ 78F0 CD AE E1                             call    is_key_up_state
  72+ 78F3 20 0E                                jr      nz,.YPressed
  73+ 78F5 3E 52                                ld      a,c_Pressed_No
  74+ 78F7                                      MMUSelectKeyboard
  74+ 78F7 ED 91 57 65 >                     nextreg KeyboardMMU,       BankKeyboard
  75+ 78FB CD AE E1                             call    is_key_up_state
  76+ 78FE 20 06                                jr      nz,.NPressed
  77+ 7900 C3 E3 78                             jp      AttractModeMain
  78+ 7903 3E 00        .YPressed:              ld      a,0
  79+ 7905 C9                                   ret
  80+ 7906 3E FF        .NPressed:              ld      a,$FF
  81+ 7908 C9                                   ret
  82+ 7909
  83+ 7909              ; alternate interrupts, one clears back buffer, one processes ship, one draws ship
  84+ 7909 00           AttractStep             DB      0
  85+ 790A
  86+ 790A              AttractModeUpdate:      MMUSelectMathsBankedFns                                 ; Need to set it on entering post interrupt to make sure we are in bank 0
  86+ 790A ED 91 50 66 >                     nextreg MathsBankedFnsMMU, BankMathsBankedFns
  87+ 790E 2A 57 78                             ld      hl,(AttractTimer)
  88+ 7911 2B                                   dec     hl
  89+ 7912 22 57 78                             ld      (AttractTimer),hl
  90+ 7915 7C                                   ld      a,h
  91+ 7916 B5                                   or      l
  92+ 7917 C2 1E 79                             jp      nz,.DrawShip
  93+ 791A CD 98 79                             call    SelectARandomShip
  94+ 791D C9                                   ret
  95+ 791E              .DrawShip:              ;BREAK
  96+ 791E CD EC 85     .RandomRotateShip:      call    doRandom
  97+ 7921                                      MMUSelectUniverseN  1
  97+ 7921 ED 91 56 47 >                     nextreg UniverseMMU,       BankUNIVDATA0+1
  98+ 7925 3A 09 79                             ld      a,(AttractStep)
  99+ 7928 A7                                   and     a       ; 0
 100+ 7929 CA 33 79                             jp      z,.ApplyShipRollAndPitch
 101+ 792C 3D                                   dec     a       ; 1
 102+ 792D CA 52 79                             jp      z,.ProcessNodes
 103+ 7930 C3 5B 79                             jp      .PrepLines ; 2
 104+ 7933
 105+ 7933 CD 5F D8     .ApplyShipRollAndPitch: call    ApplyShipRollAndPitch
 106+ 7936 CD 74 78                             call    RandomXCounter
 107+ 7939 CD 81 78                             call    RandomYCounter
 108+ 793C 3A 71 78                             ld      a,(LocalXCounter)
 109+ 793F 32 88 C0                             ld      (UBnKRotXCounter),a
 110+ 7942 3A 72 78                             ld      a,(LocalZCounter)
 111+ 7945 32 89 C0                             ld      (UBnKRotZCounter),a
 112+ 7948              .ClearScreen:           MMUSelectLayer2
 112+ 7948 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 113+ 794C CD 7E E2                             call    l2_cls_upper_two_thirds
 114+ 794F C3 89 79                             jp      .DoneIM2
 115+ 7952 CD 36 DB     .ProcessNodes:          call    ProcessNodes
 116+ 7955 CD FC D2     .CullV2:                call    CullV2
 117+ 7958 C3 89 79                             jp      .DoneIM2
 118+ 795B CD 6E DD     .PrepLines:             call    PrepLines
 119+ 795E                                      ;break
 120+ 795E                      IFDEF LATECLIPPING
 121+ 795E CD 4D DA     .DrawLines:             call    DrawLinesLateClipping
 122+ 7961                                      ;break
 123+ 7961                      ELSE
 124+ 7961 ~            .DrawLines:             call    DrawLines
 125+ 7961                      ENDIF
 126+ 7961 01 01 01     .Drawbox:               ld		bc,$0101
 127+ 7964 11 FD 7F                             ld		de,$7FFD
 128+ 7967 3E C0                                ld		a,$C0
 129+ 7969                                      ;break
 130+ 7969                                      MMUSelectLayer2
 130+ 7969 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 131+ 796D CD DB E6                             call	l2_draw_box
 132+ 7970 CD 04 E4     .DoubleBuffer:          call    l2_flip_buffers
 133+ 7973 3A 59 78     .UpdateZPosIfReady:     ld      a,(AttractCounter)
 134+ 7976                                      ;break
 135+ 7976 A7                                   and     a
 136+ 7977 CA 89 79                             jp      z,.DoneIM2
 137+ 797A 3D                                   dec     a
 138+ 797B 32 59 78                             ld      (AttractCounter),a
 139+ 797E 2A 26 C0                             ld      hl, (UBnKzlo)
 140+ 7981 11 08 00     .UpdatePos:             ld      de, $0008
 141+ 7984 ED 52                                sbc     hl,de
 142+ 7986 22 26 C0                             ld      (UBnKzlo),hl
 143+ 7989 3A 09 79     .DoneIM2:               ld      a,(AttractStep)
 144+ 798C 3C                                   inc     a
 145+ 798D FE 03                                cp      3
 146+ 798F 32 09 79                             ld      (AttractStep),a
 147+ 7992 C0                                   ret     nz
 148+ 7993                                      ZeroA
 148+ 7993 AF          >                        xor a
 149+ 7994 32 09 79                             ld      (AttractStep),a
 150+ 7997                                      ;break
 151+ 7997 C9                                   ret
 152+ 7998
 153+ 7998
 154+ 7998
 155+ 7998 06 01        SelectARandomShip:      ld      b,1                             ; Demo screen uses slot 1
 156+ 799A                                      MMUSelectUniverseN  1
 156+ 799A ED 91 56 47 >                     nextreg UniverseMMU,       BankUNIVDATA0+1
 157+ 799E                                      MMUSelectShipBank1
 157+ 799E ED 91 57 3B >					 nextreg ShipModelMMU,	    BankShipModels1
 158+ 79A2 FD 26 01                             ld      iyh, 1
 159+ 79A5 CD EC 85     .SelectRandom:          call    doRandom
 160+ 79A8                                      JumpIfAGTENusng ShipID_Rattler+1, .SelectRandom
 160+ 79A8 FE 2C       >                        cp     ShipID_Rattler+1
 160+ 79AA D2 A5 79    >                        jp		nc,.SelectRandom
 161+ 79AD FD 6F                                ld      iyl,a
 162+ 79AF CD 0F E0                             call    GetShipBankId                       ; find actual memory location of data
 163+ 79B2                                      MMUSelectShipBankA
 163+ 79B2 ED 92 57    >					 nextreg ShipModelMMU,	    a
 164+ 79B5 78                                   ld      a,b
 165+ 79B6 CD 6A E0                             call    CopyShipToUniverse
 166+ 79B9 3A 4E C4                             ld      a,(ShipTypeAddr)
 167+ 79BC CB 7F                                bit     7,a                                 ; is it a type we don't want in attract mode
 168+ 79BE 20 E5                                jr      nz,.SelectRandom
 169+ 79C0 3E 01                                ld      a,1                                 ; slot 1, iyh and iyl already set
 170+ 79C2 CD 7C CA                             call    UnivInitRuntime
 171+ 79C5 CD EF C7                             call    UnivSetDemoPostion
 172+ 79C8 21 E0 01                             ld      hl,AttractDuration*2
 173+ 79CB 22 57 78                             ld      (AttractTimer),hl
 174+ 79CE 3E 80                                ld      a, AttractCounterStart
 175+ 79D0 32 59 78                             ld      (AttractCounter),a
 176+ 79D3                                      ZeroA
 176+ 79D3 AF          >                        xor a
 177+ 79D4 32 09 79                             ld      (AttractStep),a
 178+ 79D7 C9                                   ret
 179+ 79D8
 180+ 79D8
 181+ 79D8
# file closed: ./Menus/AttractMode.asm
 545  79D8                  ENDIF
 546  79D8
 547  79D8                  include "./Maths/Utilities/XX12EquNodeDotOrientation.asm"
# file opened: ./Maths/Utilities/XX12EquNodeDotOrientation.asm
   1+ 79D8              ; We enter here with hl pointing at XX16 and bc = XX15 value
   2+ 79D8              ; so xx12 = XX15 * XX16 row
   3+ 79D8              XX12ProcessOneRow:
   4+ 79D8              XX12CalcXCell:
   5+ 79D8 ED 4B E7 C0          ld		bc,(UBnkXScaled)
   6+ 79DC 5E           		ld		e,(hl)								    ; get orientation ZX
   7+ 79DD 23           		inc		hl
   8+ 79DE 56           		ld		d,(hl)                                  ; so now e = xx16 value d = xx16 sign
   9+ 79DF 7A           		ld		a,d
  10+ 79E0 A8                   xor     b
  11+ 79E1 E6 80        		and		SignOnly8Bit                            ; a = XX 16 sign
  12+ 79E3 DD 67        		ld		ixh,a								    ; orientation sign to ixh
  13+ 79E5 78           		ld		a,b                                     ; now make bc abs bc
  14+ 79E6 E6 7F        		and		SignMask8Bit
  15+ 79E8 47           		ld		b,a                                     ; bc = abs(bc) now
  16+ 79E9 E5           		push	hl
  17+ 79EA 16 00                ld      d,0                                     ; d = value
  18+ 79EC 60           		ld		h,b
  19+ 79ED 69           		ld		l,c
  20+ 79EE CD 7D 92     		call	mulDEbyHL							    ; hl = |orientation| * |x pos)
  21+ 79F1 22 73 7E     		ld		(XX12PVarResult1),hl				    ; T = 16 bit result, we only want to use high byte later
  22+ 79F4 DD 7C        		ld		a,ixh
  23+ 79F6 32 7A 7E     		ld		(XX12PVarSign1),a					    ; S = sign  not sign 1 and 2 are reversed in memory so that fetchign back will put 1 in high byte 2 in low byte
  24+ 79F9 E1           		pop		hl
  25+ 79FA              XX12CalcYCell:
  26+ 79FA ED 4B E9 C0          ld		bc,(UBnkYScaled)
  27+ 79FE 23           		inc		hl
  28+ 79FF 5E           		ld		e,(hl)							    	; get orientation ZX
  29+ 7A00 23           		inc		hl
  30+ 7A01 56           		ld		d,(hl)
  31+ 7A02 7A           		ld		a,d
  32+ 7A03 A8                   xor     b
  33+ 7A04 E6 80        		and		SignOnly8Bit
  34+ 7A06 DD 67        		ld		ixh,a								    ; XX16 orientation sign to ixh
  35+ 7A08 78           		ld		a,b                                     ; now make bc abs bc
  36+ 7A09 E6 7F        		and		SignMask8Bit
  37+ 7A0B 47           		ld		b,a                                     ; bc = abs(bc) now
  38+ 7A0C E5           		push	hl
  39+ 7A0D 16 00                ld      d,0                                     ; d = value
  40+ 7A0F 60           		ld		h,b
  41+ 7A10 69           		ld		l,c
  42+ 7A11 CD 7D 92     		call	mulDEbyHL							    ; hl = |orientation| * |x pos)
  43+ 7A14 22 75 7E     		ld		(XX12PVarResult2),hl				    ; T = 16 bit result
  44+ 7A17 DD 7C        		ld		a,ixh
  45+ 7A19 32 79 7E     		ld		(XX12PVarSign2),a					    ; S = sign
  46+ 7A1C E1           		pop		hl
  47+ 7A1D              XX12CalcZCell:
  48+ 7A1D ED 4B EB C0          ld		bc,(UBnkZScaled)
  49+ 7A21 23           		inc		hl
  50+ 7A22 5E           		ld		e,(hl)								    ; get orientation ZX
  51+ 7A23 23           		inc		hl
  52+ 7A24 56           		ld		d,(hl)
  53+ 7A25 7A           		ld		a,d
  54+ 7A26 A8                   xor     b
  55+ 7A27 E6 80        		and		SignOnly8Bit
  56+ 7A29 DD 67        		ld		ixh,a								    ; orientation sign to ixh
  57+ 7A2B 78           		ld		a,b                                     ; now make bc abs bc
  58+ 7A2C E6 7F        		and		SignMask8Bit
  59+ 7A2E 47           		ld		b,a                                     ; bc = abs(bc) now
  60+ 7A2F 16 00                ld      d,0                                     ; d = value
  61+ 7A31 60           		ld		h,b
  62+ 7A32 69           		ld		l,c
  63+ 7A33 CD 7D 92     		call	mulDEbyHL							    ; hl = |orientation| * |x pos)
  64+ 7A36 22 77 7E     		ld		(XX12PVarResult3),hl				    ; T = 16 bit result
  65+ 7A39 DD 7C        		ld		a,ixh
  66+ 7A3B 32 7B 7E     		ld		(XX12PVarSign3),a					    ; S = sign
  67+ 7A3E              XX12CalcCellResult:
  68+ 7A3E 2A 73 7E     		ld		hl,(XX12PVarResult1)				    ; X Cell Result
  69+ 7A41 ED 5B 75 7E  		ld		de,(XX12PVarResult2)				    ; Y Cell Result
  70+ 7A45 ED 4B 79 7E  		ld		bc,(XX12PVarSign2)					    ; b = var 1 result sign c = var 2 result signs
  71+ 7A49              XX12MSBOnly:
  72+ 7A49 6C           		ld		l,h									    ; now move results into lower byte so / 256
  73+ 7A4A 5A           		ld		e,d									    ; for both results
  74+ 7A4B AF           		xor		a									    ;
  75+ 7A4C 67           		ld		h,a									    ;
  76+ 7A4D 57           		ld		d,a									    ; so set high byte to 0
  77+ 7A4E CD 33 00     		call	ADDHLDESignBC                           ;  XX12ProcessCalcHLPlusDESignBC		; returns with HL = result1 + result 2 signed in a
  78+ 7A51 47           		ld		b,a									    ; move sign into b ready for next calc
  79+ 7A52 3A 7B 7E     		ld		a,(XX12PVarSign3)					    ; result of the calcZ cell
  80+ 7A55 4F           		ld		c,a									    ; goes into c to align with DE
  81+ 7A56 ED 5B 77 7E  		ld		de,(XX12PVarResult3)				    ; now add result to Result 3
  82+ 7A5A 5A           		ld		e,d                                     ; d = result /256
  83+ 7A5B 16 00        		ld		d,0									    ; and only us high byte
  84+ 7A5D CD 33 00     		call	ADDHLDESignBC; XX12ProcessCalcHLPlusDESignBC		; returns with HL = result and a = sign
  85+ 7A60 C9           		ret											    ; hl = result, a = sign
  86+ 7A61              								    ; hl = result, a = sign
  87+ 7A61
  88+ 7A61              XX12EquNodeDotTransMat:							    ; .LL51	\ -> &4832 \ XX12=XX15.XX16  each vector is 16-bit x,y,z **** ACTUALLY XX16 is value in low sign bit in high
  89+ 7A61              ;...X cell
  90+ 7A61 21 BA C0     		ld		hl,UbnkTransInvRow0x0     			; process orientation matrix row 0
  91+ 7A64 CD D8 79             call    XX12ProcessOneRow                   ; hl = result, a = sign
  92+ 7A67 47           		ld		b,a                                 ; b = sign
  93+ 7A68 7C           		ld		a,h                                 ; a = high byte
  94+ 7A69 B0           		or		b
  95+ 7A6A 32 EE C0     		ld		(UBnkXX12xSign),a					; a = result with sign in bit 7
  96+ 7A6D 7D           		ld		a,l                                 ; the result will be in the lower byte now
  97+ 7A6E 32 ED C0             ld      (UBnkXX12xLo),a						; that is result done for
  98+ 7A71              ;...Y cell
  99+ 7A71 21 C2 C0     		ld		hl,UbnkTransInvRow1y0     			; process orientation matrix row 1
 100+ 7A74 CD D8 79             call    XX12ProcessOneRow
 101+ 7A77 47           		ld		b,a
 102+ 7A78 7C           		ld		a,h
 103+ 7A79              ;		ld		a,l
 104+ 7A79 B0           		or		b
 105+ 7A7A 32 F0 C0     		ld		(UBnkXX12ySign),a					; a = result with sign in bit 7
 106+ 7A7D 7D           		ld		a,l                                 ; the result will be in the lower byte now
 107+ 7A7E 32 EF C0             ld      (UBnkXX12yLo),a						; that is result done for
 108+ 7A81              ;...Z cell
 109+ 7A81 21 CA C0     		ld		hl,UbnkTransInvRow2z0     			; process orientation matrix row 1
 110+ 7A84 CD D8 79             call    XX12ProcessOneRow
 111+ 7A87 47           		ld		b,a
 112+ 7A88 7C                   ld		a,h
 113+ 7A89              ;		ld		a,l
 114+ 7A89 B0           		or		b
 115+ 7A8A 32 F2 C0     		ld		(UBnkXX12zSign),a					; a = result with sign in bit 7
 116+ 7A8D 7D           		ld		a,l                                 ; the result will be in the lower byte now
 117+ 7A8E 32 F1 C0             ld      (UBnkXX12zLo),a						; that is result done for
 118+ 7A91 C9                   ret
 119+ 7A92
 120+ 7A92              XX12EquNodeDotOrientation:							; .LL51	\ -> &4832 \ XX12=XX15.XX16  each vector is 16-bit x,y,z **** ACTUALLY XX16 is value in low sign bit in high
 121+ 7A92              ;...X cell
 122+ 7A92 21 BA C0     		ld		hl,UbnkTransInvRow0x0     			; process orientation matrix row 0
 123+ 7A95 CD D8 79             call    XX12ProcessOneRow                   ; hl = result, a = sign
 124+ 7A98 47           		ld		b,a                                 ; b = sign
 125+ 7A99 7C           		ld		a,h                                 ; a = high byte
 126+ 7A9A B0           		or		b
 127+ 7A9B 32 EE C0     		ld		(UBnkXX12xSign),a					; a = result with sign in bit 7
 128+ 7A9E 7D           		ld		a,l                                 ; the result will be in the lower byte now
 129+ 7A9F 32 ED C0             ld      (UBnkXX12xLo),a						; that is result done for
 130+ 7AA2              ;...Y cell
 131+ 7AA2 21 C2 C0     		ld		hl,UbnkTransInvRow1y0     			; process orientation matrix row 1
 132+ 7AA5 CD D8 79             call    XX12ProcessOneRow
 133+ 7AA8 47           		ld		b,a
 134+ 7AA9 7C           		ld		a,h
 135+ 7AAA              ;		ld		a,l
 136+ 7AAA B0           		or		b
 137+ 7AAB 32 F0 C0     		ld		(UBnkXX12ySign),a					; a = result with sign in bit 7
 138+ 7AAE 7D           		ld		a,l                                 ; the result will be in the lower byte now
 139+ 7AAF 32 EF C0             ld      (UBnkXX12yLo),a						; that is result done for
 140+ 7AB2              ;...Z cell
 141+ 7AB2 21 CA C0     		ld		hl,UbnkTransInvRow2z0     			; process orientation matrix row 1
 142+ 7AB5 CD D8 79             call    XX12ProcessOneRow
 143+ 7AB8 47           		ld		b,a
 144+ 7AB9 7C                   ld		a,h
 145+ 7ABA              ;		ld		a,l
 146+ 7ABA B0           		or		b
 147+ 7ABB 32 F2 C0     		ld		(UBnkXX12zSign),a					; a = result with sign in bit 7
 148+ 7ABE 7D           		ld		a,l                                 ; the result will be in the lower byte now
 149+ 7ABF 32 F1 C0             ld      (UBnkXX12zLo),a						; that is result done for
 150+ 7AC2 C9                   ret
 151+ 7AC3
 152+ 7AC3              XX12EquNodeDotXX16:					         		; .LL51	\ -> &4832 \ XX12=XX15.XX16  each vector is 16-bit x,y,z **** ACTUALLY XX16 is value in low sign bit in high
 153+ 7AC3              ;...X cell
 154+ 7AC3 21 A2 C0     		ld		hl,UBnkTransmatSidevX     			; process orientation matrix row 0
 155+ 7AC6 CD D8 79             call    XX12ProcessOneRow                   ; hl = result, a = sign
 156+ 7AC9 47           		ld		b,a                                 ; b = sign
 157+ 7ACA 7C           		ld		a,h                                 ; a = high byte
 158+ 7ACB B0           		or		b
 159+ 7ACC 32 EE C0     		ld		(UBnkXX12xSign),a					; a = result with sign in bit 7
 160+ 7ACF 7D           		ld		a,l                                 ; the result will be in the lower byte now
 161+ 7AD0 32 ED C0             ld      (UBnkXX12xLo),a						; that is result done for
 162+ 7AD3              ;...Y cell
 163+ 7AD3 21 A8 C0     		ld		hl,UBnkTransmatRoofvX     			; process orientation matrix row 1
 164+ 7AD6 CD D8 79             call    XX12ProcessOneRow
 165+ 7AD9 47           		ld		b,a
 166+ 7ADA 7C           		ld		a,h
 167+ 7ADB              ;		ld		a,l
 168+ 7ADB B0           		or		b
 169+ 7ADC 32 F0 C0     		ld		(UBnkXX12ySign),a					; a = result with sign in bit 7
 170+ 7ADF 7D           		ld		a,l                                 ; the result will be in the lower byte now
 171+ 7AE0 32 EF C0             ld      (UBnkXX12yLo),a						; that is result done for
 172+ 7AE3              ;...Z cell
 173+ 7AE3 21 AE C0     		ld		hl,UBnkTransmatNosevX     			; process orientation matrix row 1
 174+ 7AE6 CD D8 79             call    XX12ProcessOneRow
 175+ 7AE9 47           		ld		b,a
 176+ 7AEA 7C                   ld		a,h
 177+ 7AEB              ;		ld		a,l
 178+ 7AEB B0           		or		b
 179+ 7AEC 32 F2 C0     		ld		(UBnkXX12zSign),a					; a = result with sign in bit 7
 180+ 7AEF 7D           		ld		a,l                                 ; the result will be in the lower byte now
 181+ 7AF0 32 F1 C0             ld      (UBnkXX12zLo),a						; that is result done for
 182+ 7AF3 C9                   ret
# file closed: ./Maths/Utilities/XX12EquNodeDotOrientation.asm
 548  7AF4                  include "./ModelRender/CopyXX12ToXX15.asm"
# file opened: ./ModelRender/CopyXX12ToXX15.asm
   1+ 7AF4 21 ED C0     CopyXX12ToXX15:         ld      hl,XX12
   2+ 7AF7 11 E7 C0                             ld      de,XX15
   3+ 7AFA 01 06 00                             ld      bc,6
   4+ 7AFD ED B0                                ldir
   5+ 7AFF C9                                   ret
   6+ 7B00
   7+ 7B00 21 ED C0     CopyXX12ToXX12Save:     ld      hl,XX12
   8+ 7B03 11 F3 C0                             ld      de,XX12Save
   9+ 7B06 01 06 00                             ld      bc,6
  10+ 7B09 ED B0                                ldir
  11+ 7B0B C9                                   ret
  12+ 7B0C
  13+ 7B0C 21 F3 C0     CopyXX12SaveToXX12:     ld      hl,XX12Save
  14+ 7B0F 11 ED C0                             ld      de,XX12
  15+ 7B12 01 06 00                             ld      bc,6
  16+ 7B15 ED B0                                ldir
  17+ 7B17 C9                                   ret
  18+ 7B18
  19+ 7B18 21 ED C0     CopyXX12ToXX12Save2:    ld      hl,XX12
  20+ 7B1B 11 F9 C0                             ld      de,XX12Save2
  21+ 7B1E 01 06 00                             ld      bc,6
  22+ 7B21 ED B0                                ldir
  23+ 7B23 C9                                   ret
  24+ 7B24
  25+ 7B24 21 F9 C0     CopyXX12Save2ToXX12:    ld      hl,XX12Save2
  26+ 7B27 11 ED C0                             ld      de,XX12
  27+ 7B2A 01 06 00                             ld      bc,6
  28+ 7B2D ED B0                                ldir
  29+ 7B2F C9                                   ret
  30+ 7B30
# file closed: ./ModelRender/CopyXX12ToXX15.asm
 549  7B30                  include "./Maths/Utilities/ScaleXX16Matrix197.asm"
# file opened: ./Maths/Utilities/ScaleXX16Matrix197.asm
   1+ 7B30              ScaleXX16Matrix197:
   2+ 7B30                      IFDEF LOGMATHS
   3+ 7B30 ~                                    ld		b,9                 ; Interate though all 9 matrix elements
   4+ 7B30 ~                                    ld		hl,UBnkTransmatSidev ; within XX16 (transmat)
   5+ 7B30 ~                                    MMUSelectMathsTables
   6+ 7B30 ~            .ScaleXX16Loop:         ld		e,(hl)              ; set DE = matrix value              ;
   7+ 7B30 ~                                    inc		hl                  ;
   8+ 7B30 ~                                    ld		a,(hl)              ;
   9+ 7B30 ~                                    ld		d,a                 ;
  10+ 7B30 ~                                    and     SignOnly8Bit        ; A holds high still to we can strip out sign bit
  11+ 7B30 ~                                    ld		ixl,a				; retain for sign bit
  12+ 7B30 ~                                    ShiftDELeft1				; carry now holds sign bit and DE = De * 2, this will in effect strip off the sign bit automatically
  13+ 7B30 ~                                    ld      a,d                 ; a = high byte after x 2
  14+ 7B30 ~                                    push	bc                  ; save BC  counter and constant 197
  15+ 7B30 ~                                    push	hl                  ; save HL
  16+ 7B30 ~                                    call    AEquAmul256Div197Log;
  17+ 7B30 ~                                    pop		hl
  18+ 7B30 ~                                    dec     hl                  ; move back to low byte
  19+ 7B30 ~                                    ld      (hl),a              ; save result in low byte as we want to preserve high byte sign
  20+ 7B30 ~                                    inc     hl                  ; move back to high byte
  21+ 7B30 ~                                    ld      a,ixl
  22+ 7B30 ~                                    ld      (hl),a              ; write back just sign bit
  23+ 7B30 ~                                    pop		bc                  ; retrieve both counter and constant 197
  24+ 7B30 ~                                    inc     hl                  ; no to next vertex value
  25+ 7B30 ~                                    djnz	.ScaleXX16Loop
  26+ 7B30 ~                                    MMUSelectROM0
  27+ 7B30 ~                                    ret
  28+ 7B30                      ELSE
  29+ 7B30 06 09                                ld		b,9                 ; Interate though all 9 matrix elements
  30+ 7B32 0E C5                                ld		c,ConstNorm         ; c = 197
  31+ 7B34 21 A2 C0                             ld		hl,UBnkTransmatSidev ; within XX16 (transmat)
  32+ 7B37 7E           .ScaleXX16Loop:         ld		a,(hl)              ; set DE = matrix value
  33+ 7B38 5F                                   ld		e,a                 ;
  34+ 7B39 23                                   inc		hl                  ;
  35+ 7B3A 7E                                   ld		a,(hl)              ;
  36+ 7B3B 57                                   ld		d,a                 ;
  37+ 7B3C E6 80                                and     SignOnly8Bit        ; A holds high still to we can strip out sign bit
  38+ 7B3E DD 6F                                ld		ixl,a				; retain for sign bit
  39+ 7B40                                      ShiftDELeft1				; carry now holds sign bit and DE = De * 2, this will in effect strip off the sign bit automatically
  39+ 7B40 CB 23       >			   sla e
  39+ 7B42 CB 12       >			   rl  d
  40+ 7B44 7A                                   ld      a,d                 ; a = high byte after x 2
  41+ 7B45 C5                                   push	bc                  ; save BC  counter and constant 197
  42+ 7B46 E5                                   push	hl                  ; save HL
  43+ 7B47 CD 56 97                             call	DIV16Amul256dCUNDOC; AEquAmul256DivD; DIV16Amul256dCUNDOC	; result in BC = A*256 / 197 or D *512 / 197 = 2.6 * vector element, effectivley the result will always be in c
  44+ 7B4A E1                                   pop		hl
  45+ 7B4B 2B                                   dec     hl                  ; move back to low byte
  46+ 7B4C 71                                   ld      (hl),c              ; save result in low byte as we want to preserve high byte sign
  47+ 7B4D 23                                   inc     hl                  ; move back to high byte
  48+ 7B4E                                  ;    ld      a,(hl)
  49+ 7B4E                                  ;    and     $80
  50+ 7B4E DD 7D                                ld      a,ixl
  51+ 7B50 77                                   ld      (hl),a              ; write back just sign bit
  52+ 7B51 C1                                   pop		bc                  ; retrieve both counter and constant 197
  53+ 7B52 23                                   inc     hl                  ; no to next vertex value
  54+ 7B53 10 E2                                djnz	.ScaleXX16Loop
  55+ 7B55 C9                                   ret
  56+ 7B56                      ENDIF
# file closed: ./Maths/Utilities/ScaleXX16Matrix197.asm
 550  7B56                  include "./Universe/StarDust/StarRoutines.asm"
# file opened: ./Universe/StarDust/StarRoutines.asm
   1+ 7B56              ;note: DIV16Amul256dCUNDOC as per
   2+ 7B56              ;                                   BC = A0
   3+ 7B56              ;                                   DE = 0C
   4+ 7B56              ;                                   so BC = a * 256 / C
   5+ 7B56
   6+ 7B56              ; We can cheat here, Speed is always 0 or positive
   7+ 7B56              ; z postion will always be positive if we can see it
   8+ 7B56
   9+ 7B56 EB           InitStarAtHL:           ex      de,hl               ; preserving hl
  10+ 7B57 CD EC 85                             call    doRND               ; a = random OR bit 5
  11+ 7B5A EB                                   ex      de,hl               ; .
  12+ 7B5B F6 08                                or      8                   ; .
  13+ 7B5D 77                                   ld      (hl),a              ; save to x pos
  14+ 7B5E E6 7F                                and     $7F                 ; a = abs a
  15+ 7B60 23                                   inc     hl                  ;
  16+ 7B61 77                                   ld      (hl),a              ;
  17+ 7B62 EB                                   ex      de,hl               ; preserving hl
  18+ 7B63 CD EC 85                             call    doRND               ; a = -ve (random / 2)
  19+ 7B66 EB                                   ex      de,hl               ; .
  20+ 7B67 0F                                   rrca                        ; .
  21+ 7B68 E6 80                                and     $80                 ; .
  22+ 7B6A B6                                   or      (hl)                ; or with
  23+ 7B6B 77                                   ld      (hl),a
  24+ 7B6C 23                                   inc     hl
  25+ 7B6D EB                                   ex      de,hl
  26+ 7B6E CD EC 85                             call    doRND
  27+ 7B71 EB                                   ex      de,hl
  28+ 7B72 F6 04                                or      4
  29+ 7B74 77                                   ld      (hl),a
  30+ 7B75 23                                   inc     hl
  31+ 7B76 E6 7F                                and     $7F
  32+ 7B78 77                                   ld      (hl),a
  33+ 7B79 EB                                   ex      de,hl
  34+ 7B7A CD EC 85                             call    doRND
  35+ 7B7D EB                                   ex      de,hl
  36+ 7B7E 0F                                   rrca
  37+ 7B7F E6 80                                and     $80
  38+ 7B81 B6                                   or      (hl)
  39+ 7B82 77                                   ld      (hl),a
  40+ 7B83 23                                   inc     hl
  41+ 7B84 EB                                   ex      de,hl
  42+ 7B85 CD EC 85                             call    doRND
  43+ 7B88 EB                                   ex      de,hl
  44+ 7B89 F6 90                                or      144
  45+ 7B8B 77                                   ld      (hl),a
  46+ 7B8C 23                                   inc     hl
  47+ 7B8D F6 70                                or      %01110000
  48+ 7B8F E6 7F                                and     $7f     ; bodge
  49+ 7B91 77                                   ld      (hl),a
  50+ 7B92 23                                   inc     hl
  51+ 7B93 C9                                   ret
  52+ 7B94
  53+ 7B94 EB           InitHyperStarAtHL:      ex      de,hl
  54+ 7B95 CD EC 85                             call    doRND
  55+ 7B98 CB 27                                sla     a
  56+ 7B9A CB 27                                sla     a                ; so its * 4 as we have a blank spot
  57+ 7B9C EB                                   ex      de,hl
  58+ 7B9D E6 F8                                and     %11111000
  59+ 7B9F 77                                   ld      (hl),a
  60+ 7BA0 E6 7F                                and     $7F
  61+ 7BA2 23                                   inc     hl
  62+ 7BA3 77                                   ld      (hl),a
  63+ 7BA4 EB                                   ex      de,hl
  64+ 7BA5 CD EC 85                             call    doRND
  65+ 7BA8 EB                                   ex      de,hl
  66+ 7BA9 0F                                   rrca
  67+ 7BAA E6 80                                and     $80
  68+ 7BAC B6                                   or      (hl)
  69+ 7BAD 77                                   ld      (hl),a
  70+ 7BAE 23                                   inc     hl
  71+ 7BAF EB                                   ex      de,hl
  72+ 7BB0 CD EC 85                             call    doRND
  73+ 7BB3 CB 27                                sla     a
  74+ 7BB5 CB 27                                sla     a               ; so its * 4 as we have a blank spot
  75+ 7BB7 EB                                   ex      de,hl
  76+ 7BB8 E6 F8                                and     %11111000
  77+ 7BBA 77                                   ld      (hl),a
  78+ 7BBB 23                                   inc     hl
  79+ 7BBC E6 7F                                and     $7F
  80+ 7BBE 77                                   ld      (hl),a
  81+ 7BBF EB                                   ex      de,hl
  82+ 7BC0 CD EC 85                             call    doRND
  83+ 7BC3 EB                                   ex      de,hl
  84+ 7BC4 0F                                   rrca
  85+ 7BC5 E6 80                                and     $80
  86+ 7BC7 B6                                   or      (hl)
  87+ 7BC8 77                                   ld      (hl),a
  88+ 7BC9 23                                   inc     hl
  89+ 7BCA EB                                   ex      de,hl
  90+ 7BCB CD EC 85                             call    doRND
  91+ 7BCE EB                                   ex      de,hl
  92+ 7BCF F6 5F                                or      95
  93+ 7BD1 77                                   ld      (hl),a
  94+ 7BD2 23                                   inc     hl
  95+ 7BD3 F6 70                                or      %01110000
  96+ 7BD5 E6 7F                                and     $7f     ; bodge
  97+ 7BD7 77                                   ld      (hl),a
  98+ 7BD8 23                                   inc     hl
  99+ 7BD9 C9                                   ret
 100+ 7BDA
 101+ 7BDA              ;----------------------------------------------------------------------------------------------------------------------------------
 102+ 7BDA 06 0B        InitialiseStars:        ld      b,MaxNumberOfStars
 103+ 7BDC 21 F8 80                             ld      hl,varDust
 104+ 7BDF CD 56 7B     .InitStarsLoop:         call    InitStarAtHL
 105+ 7BE2 10 FB                                djnz    .InitStarsLoop
 106+ 7BE4 C9                                   ret
 107+ 7BE5              ;----------------------------------------------------------------------------------------------------------------------------------
 108+ 7BE5 06 0B        InitialiseHyperStars:   ld      b,MaxNumberOfStars
 109+ 7BE7 21 F8 80                             ld      hl,varDust
 110+ 7BEA CD 94 7B     .InitStarsLoop:         call    InitHyperStarAtHL
 111+ 7BED 10 FB                                djnz    .InitStarsLoop
 112+ 7BEF C9                                   ret
 113+ 7BF0              ;----------------------------------------------------------------------------------------------------------------------------------
 114+ 7BF0 FD 21 F8 80  SaveCurrentDust:        ld          iy,varDust
 115+ 7BF4 DD 21 E2 80                          ld          ix,varDustWarpRender
 116+ 7BF8 06 0B                                ld          b, MaxNumberOfStars
 117+ 7BFA FD 7E 01     .SaveLoop               ld          a,(iy+1)
 118+ 7BFD 6F                                   ld          l,a
 119+ 7BFE E6 7F                                and         $7F
 120+ 7C00                                      JumpOnBitSet l,7,.StarNegXPt
 120+ 7C00 CB 7D       >                        bit 	7,l
 120+ 7C02 C2 0B 7C    >                        jp      nz,.StarNegXPt
 121+ 7C05 C6 80                                add         a,$80
 122+ 7C07 5F                                   ld          e,a
 123+ 7C08 C3 10 7C                             jp          .StarDoneX
 124+ 7C0B 57           .StarNegXPt:            ld          d,a
 125+ 7C0C 3E 80                                ld          a,$80
 126+ 7C0E 92                                   sub         d
 127+ 7C0F 5F                                   ld          e,a
 128+ 7C10 FD 7E 03     .StarDoneX:             ld          a,(iy+3)
 129+ 7C13 6F                                   ld          l,a
 130+ 7C14 E6 7F                                and         $7F
 131+ 7C16                                      JumpOnBitSet l,7,.StarNegYPt
 131+ 7C16 CB 7D       >                        bit 	7,l
 131+ 7C18 C2 21 7C    >                        jp      nz,.StarNegYPt
 132+ 7C1B C6 60                                add         a,$60
 133+ 7C1D 57                                   ld          d,a
 134+ 7C1E C3 26 7C                             jp          .StarDoneY
 135+ 7C21 57           .StarNegYPt:            ld          d,a
 136+ 7C22 3E 60                                ld          a,$60
 137+ 7C24 92                                   sub         d
 138+ 7C25 57                                   ld          d,a
 139+ 7C26 DD 73 00     .StarDoneY:             ld          (ix+0),e
 140+ 7C29 DD 72 01                             ld          (ix+1),d
 141+ 7C2C DD 23                                inc         ix
 142+ 7C2E DD 23                                inc         ix
 143+ 7C30 FD E5 E1                             ld          hl,iy
 144+ 7C33 3E 06                                ld          a,6
 145+ 7C35 ED 31                                add         hl,a
 146+ 7C37 E5 FD E1                             ld          iy,hl
 147+ 7C3A 10 BE                                djnz        .SaveLoop
 148+ 7C3C C9                                   ret
 149+ 7C3D
 150+ 7C3D              ;----------------------------------------------------------------------------------------------------------------------------------
 151+ 7C3D 06 0B        DustForward:            ld      b,MaxNumberOfStars                  ; get the number of stars to process
 152+ 7C3F FD 21 F8 80                          ld      iy,varDust                          ; hl is now a pointer to the dust array
 153+ 7C43 C5           StarProcessLoop:        push    bc                                  ; save counter +1
 154+ 7C44 FD 7E 05     .Qequ64XSpeedDivZHi:    ld      a,(iy+5)                            ; e  = z high
 155+ 7C47 5F                                   ld      e,a                                 ; d = 0
 156+ 7C48 16 00                                ld      d,0                                 ; de = zhi/256
 157+ 7C4A 3A B0 7F                             ld      a,(DELTA)                           ; a = speed
 158+ 7C4D                                      JumpIfAIsNotZero .NormalSpeed               ; if we are stationary set speed
 158+ 7C4D A7          >                        and     a
 158+ 7C4E C2 52 7C    >                        jp	    nz,.NormalSpeed
 159+ 7C51 3C                                   inc     a                                   ; so it is at least some dust movement
 160+ 7C52 47           .NormalSpeed:           ld      b,a                                 ;
 161+ 7C53 0E 00                                ld      c,0                                 ; bc = delta * 256
 162+ 7C55 CD E2 97                             call    BC_Div_DE                           ; BC = Speed/Z , HL = remainder
 163+ 7C58                                      ShiftHLRight1
 163+ 7C58 CB 3C       >			   srl h
 163+ 7C5A CB 1D       >			   rr  l
 164+ 7C5C                                      ShiftHLRight1                               ; hl = remainder/2 so now 64 * speed / zhi
 164+ 7C5C CB 3C       >			   srl h
 164+ 7C5E CB 1D       >			   rr  l
 165+ 7C60 7D                                   ld      a,l                                 ;
 166+ 7C61 F6 01                                or      1                                   ; so ensure A is at least 1 for ambient movement
 167+ 7C63 DD 6F                                ld      ixl,a                               ; preserve A which is also VarQ = 64 * speed / zhi
 168+ 7C65 FD 6E 04 FD  .ZequZMinusSpeedX64:    ld      hl,(iy+4)                           ; hl = z
 168+ 7C69 66 05
 169+ 7C6B ED 5B B1 7F                          ld      de, (DELTA4)                         ; de = delta4 i.e. speed * 64 pre computed
 170+ 7C6F CD 75 01                             call    subHLDES15
 171+ 7C72                                      JumpOnBitSet h,7,ResetStar                  ; if z ended up negative then reset the star
 171+ 7C72 CB 7C       >                        bit 	7,h
 171+ 7C74 C2 C9 7D    >                        jp      nz,ResetStar
 172+ 7C77 FD 75 04 FD                          ld      (iy+4),hl                           ; save new z pos
 172+ 7C7B 74 05
 173+ 7C7D FD 6E 00 FD  .XEquXPlusXhiMulQ       ld      hl,(iy+0)                           ; hl  = x
 173+ 7C81 66 01
 174+ 7C83 7C                                   ld      a,h                                 ;
 175+ 7C84 E6 7F                                and     $7F                                 ;
 176+ 7C86 57                                   ld      d,a                                 ; d = abs(x hi)
 177+ 7C87 DD 5D                                ld      e,ixl                               ; e = Q = 64 * speed / zhi
 178+ 7C89 ED 30                                mul                                         ; de =  abs(x hi) * Q
 179+ 7C8B 7C                                   ld      a,h                                 ;
 180+ 7C8C E6 80                                and     $80                                 ;
 181+ 7C8E B2                                   or      d                                   ; set sign bit in d
 182+ 7C8F 57                                   ld      d,a                                 ;
 183+ 7C90 CD 56 00                             call    ADDHLDESignedV4                  ; x = x + (x hi/256 * Q)
 184+ 7C93 7C                                   ld      a,h
 185+ 7C94 E6 7F                                and     $7F
 186+ 7C96                                      JumpIfAGTENusng $70, ResetStar
 186+ 7C96 FE 70       >                        cp     $70
 186+ 7C98 D2 C9 7D    >                        jp		nc,ResetStar
 187+ 7C9B FD 75 00 FD                          ld      (iy+0),hl                           ;
 187+ 7C9F 74 01
 188+ 7CA1 FD 6E 02 FD  .YEquYPlusYhiMulQ       ld      hl,(iy+2)                           ; hl  = y
 188+ 7CA5 66 03
 189+ 7CA7 7C                                   ld      a,h                                 ;
 190+ 7CA8 E6 7F                                and     $7F                                 ;
 191+ 7CAA 57                                   ld      d,a                                 ; d = abs(y hi)
 192+ 7CAB DD 5D                                ld      e,ixl                               ; e = Q = 64 * speed / zhi
 193+ 7CAD ED 30                                mul                                         ; de =  abs(y hi) * Q
 194+ 7CAF 7C                                   ld      a,h                                 ;
 195+ 7CB0 E6 80                                and     $80                                 ;
 196+ 7CB2 B2                                   or      d                                   ; set sign bit in d
 197+ 7CB3 57                                   ld      d,a                                 ;
 198+ 7CB4 CD 56 00                             call    ADDHLDESignedV4                  ; y = y + (x hi/256 * Q)
 199+ 7CB7 7C                                   ld      a,h
 200+ 7CB8 E6 7F                                and     $7F
 201+ 7CBA                                      JumpIfAGTENusng $60, ResetStar
 201+ 7CBA FE 60       >                        cp     $60
 201+ 7CBC D2 C9 7D    >                        jp		nc,ResetStar
 202+ 7CBF 7C                                   ld      a,h
 203+ 7CC0 E6 80                                and     $80
 204+ 7CC2 20 06                                jr      nz,.NoSecondCheck
 205+ 7CC4 7C                                   ld      a,h
 206+ 7CC5                                      JumpIfAGTENusng $20, ResetStar
 206+ 7CC5 FE 20       >                        cp     $20
 206+ 7CC7 D2 C9 7D    >                        jp		nc,ResetStar
 207+ 7CCA FD 75 02 FD  .NoSecondCheck:         ld      (iy+2),hl                           ;
 207+ 7CCE 74 03
 208+ 7CD0              ; Now roll
 209+ 7CD0              ;  6. x = x - alpha * y / 256
 210+ 7CD0 3A D0 7E     .XRoll:                 ld      a,(ALP1)                           ; h = sign, l = magnitude
 211+ 7CD3 FE 00                                cp      0
 212+ 7CD5 28 4D                                jr      z,.NoRoll                           ; don;t roll if magnitude is 0
 213+ 7CD7                                   ;   break
 214+ 7CD7 6F                                   ld      l,a                                 ; roll magnitude
 215+ 7CD8 3A D2 7E                             ld      a,(ALP2FLIP)                        ; inverted roll sign
 216+ 7CDB E6 80                                and     SignOnly8Bit                        ; sanitise sign bit
 217+ 7CDD 67                                   ld      h,a                                 ; h = roll sign
 218+ 7CDE E5                                   push    hl                                  ; save on the stack
 219+ 7CDF 4F           .rxSaveAlphaSign:       ld      c,a                                 ; save alpha sign in c
 220+ 7CE0 55           .rxDEquABSAlpha:        ld      d,l                                 ; d= abs (alpha)
 221+ 7CE1 FD 7E 03                             ld      a,(iy+3)                            ; get high byte from x coord
 222+ 7CE4 5F                                   ld      e,a                                 ; save signed byte
 223+ 7CE5 E6 80                                and     SignOnly8Bit                        ; a = sign only
 224+ 7CE7 47           .rxBEquSignXHi:         ld      b,a                                 ; save sign of x in b
 225+ 7CE8 7B           .rxEEquABSignX:         ld      a,e                                 ; e = abs byte
 226+ 7CE9 E6 7F                                and     SignMask8Bit
 227+ 7CEB 5F                                   ld      e,a                                 ; save abs x hi in e
 228+ 7CEC ED 30                                mul                                         ; abs(alpha) * abs(y high) (so /256)
 229+ 7CEE 79                                   ld      a,c                                 ; get back sign from roll
 230+ 7CEF A8                                   xor     b                                   ; handle muliple sign bits
 231+ 7CF0 B2                                   or      d
 232+ 7CF1 57                                   ld      d,a                                 ; de = signed alpha & y high / 256
 233+ 7CF2 FD 6E 00 FD                          ld      hl,(iy+0)                           ; h = iy+1, l = iy+0
 233+ 7CF6 66 01
 234+ 7CF8 CD 75 01                             call    subHLDES15                       ; we are usign add, so may need to fip sign?
 235+ 7CFB FD 75 00 FD                          ld      (iy+0),hl
 235+ 7CFF 74 01
 236+ 7D01              ;  5. y = y + alpha * x / 256
 237+ 7D01              .YRoll:                 ;break
 238+ 7D01 E1                                   pop     hl                                  ; h = sign, l = magnitude
 239+ 7D02 4C           .rySaveAlphaSign:       ld      c,h                                 ; save alpha sign in c
 240+ 7D03 55           .ryDEquABSAlpha:        ld      d,l                                 ; d= abs (alpha)
 241+ 7D04 FD 7E 01                             ld      a,(iy+1)                            ; get high byte from x coord
 242+ 7D07 5F                                   ld      e,a
 243+ 7D08 E6 80                                and     SignOnly8Bit
 244+ 7D0A 47           .ryBEquSignXHi:         ld      b,a                                 ; save sign of x in b
 245+ 7D0B 7B           .ryEEquABSignX:         ld      a,e
 246+ 7D0C E6 7F                                and     SignMask8Bit
 247+ 7D0E 5F                                   ld      e,a                                 ; save abs x hi in e
 248+ 7D0F ED 30                                mul                                         ; abs(alpha) * abs(y high) (so /256)
 249+ 7D11 79                                   ld      a,c
 250+ 7D12 A8                                   xor     b                                   ; handle muliple sign bits
 251+ 7D13 B2                                   or      d
 252+ 7D14 57                                   ld      d,a                                 ; de = signed alpha & y high / 256
 253+ 7D15 FD 6E 02 FD                          ld      hl,(iy+2)                           ; h = iy+1, l = iy+0
 253+ 7D19 66 03
 254+ 7D1B CD 56 00                             call    ADDHLDESignedV4                  ; we are usign add, so may need to fip sign?
 255+ 7D1E FD 75 02 FD                          ld      (iy+2),hl
 255+ 7D22 74 03
 256+ 7D24 3A C4 7E     .NoRoll:                ld      a,(BET1)
 257+ 7D27 FE 00                                cp      0
 258+ 7D29 28 22                                jr      z,.NoPitch
 259+ 7D2B              ;  8. y = y - beta * 256
 260+ 7D2B 57           .YPitch:                ld      d,a                                 ; d = BET1
 261+ 7D2C FD 7E 02                             ld      a,(iy+2)
 262+ 7D2F 5F                                   ld      e,a                                 ; e = Y HI
 263+ 7D30 ED 30                                mul                                         ; de = BET1 * YHi so now D = BETA & YHI / 256
 264+ 7D32 5F                                   ld      e,a
 265+ 7D33 ED 30                                mul                                         ; so now de = (BETA & Yhi) ^ 2
 266+ 7D35                                      ShiftDELeft1                                ; de = 2 * ((BETA & Yhi) ^ 2)
 266+ 7D35 CB 23       >			   sla e
 266+ 7D37 CB 12       >			   rl  d
 267+ 7D39 3A C5 7E                             ld      a,(BET2)                            ; get inverted Sign
 268+ 7D3C B2                                   or      d
 269+ 7D3D 57                                   ld      d,a                                 ; de = - (2 * ((BETA & Yhi) ^ 2))
 270+ 7D3E FD 6E 02 FD                          ld      hl,(iy+2)
 270+ 7D42 66 03
 271+ 7D44 CD 56 00                             call    ADDHLDESignedV4
 272+ 7D47 FD 75 02 FD                          ld      (iy+2),hl
 272+ 7D4B 74 03
 273+ 7D4D              ; now work out screen pos
 274+ 7D4D              ; Note two optimistations, write to layer 2 - we get a free removal via double buffer cls
 275+ 7D4D              ; read z dept than determine hw many pixesl to plot, e.g. 1,2,3,4
 276+ 7D4D              ;        pop     de
 277+ 7D4D               ;       call    ProjectStarXToScreen
 278+ 7D4D                                      ;pop     de
 279+ 7D4D              .NoPitch:
 280+ 7D4D FD 7E 01     .ProjectStar:           ld      a,(iy+1)
 281+ 7D50 6F                                   ld      l,a
 282+ 7D51 E6 7F                                and     $7F
 283+ 7D53                                      JumpOnBitSet l,7,StarNegXPt
 283+ 7D53 CB 7D       >                        bit 	7,l
 283+ 7D55 C2 5E 7D    >                        jp      nz,StarNegXPt
 284+ 7D58 C6 80                                add     a,$80
 285+ 7D5A 4F                                   ld      c,a
 286+ 7D5B C3 63 7D                             jp      StarDoneX
 287+ 7D5E 47           StarNegXPt:             ld      b,a
 288+ 7D5F 3E 80                                ld      a,$80
 289+ 7D61 90                                   sub     b
 290+ 7D62 4F                                   ld      c,a
 291+ 7D63 FD 7E 03     StarDoneX:              ld      a,(iy+3)
 292+ 7D66 6F                                   ld      l,a
 293+ 7D67 E6 7F                                and     $7F
 294+ 7D69                                      JumpOnBitSet l,7,StarNegYPt
 294+ 7D69 CB 7D       >                        bit 	7,l
 294+ 7D6B C2 74 7D    >                        jp      nz,StarNegYPt
 295+ 7D6E C6 60                                add     a,$60
 296+ 7D70 47                                   ld      b,a
 297+ 7D71 C3 79 7D                             jp      StarDoneY
 298+ 7D74 47           StarNegYPt:             ld      b,a
 299+ 7D75 3E 60                                ld      a,$60
 300+ 7D77 90                                   sub     b
 301+ 7D78 47                                   ld      b,a
 302+ 7D79 3E 92        StarDoneY:              ld      a,L2DustColour
 303+ 7D7B C5                                   push    bc
 304+ 7D7C              .DrawStar:              MMUSelectLayer2
 304+ 7D7C ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 305+ 7D80 CD 23 E4                             call    l2_plot_pixel
 306+ 7D83 FD 7E 05                             ld      a,(iy+5)
 307+ 7D86 C1                                   pop    bc
 308+ 7D87                                      JumpIfAGTENusng $60,EndofStarsLoop
 308+ 7D87 FE 60       >                        cp     $60
 308+ 7D89 D2 B9 7D    >                        jp		nc,EndofStarsLoop
 309+ 7D8C 3E 92                                ld      a,L2DustColour
 310+ 7D8E 0C                                   inc     c
 311+ 7D8F C5                                   push    bc
 312+ 7D90                                      MMUSelectLayer2
 312+ 7D90 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 313+ 7D94 CD 23 E4                             call    l2_plot_pixel
 314+ 7D97 FD 7E 05                             ld      a,(iy+5)
 315+ 7D9A C1                                   pop    bc
 316+ 7D9B                                      JumpIfAGTENusng $37,EndofStarsLoop
 316+ 7D9B FE 37       >                        cp     $37
 316+ 7D9D D2 B9 7D    >                        jp		nc,EndofStarsLoop
 317+ 7DA0 3E 92                                ld      a,L2DustColour
 318+ 7DA2 04                                   inc     b
 319+ 7DA3 C5                                   push    bc
 320+ 7DA4                                      MMUSelectLayer2
 320+ 7DA4 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 321+ 7DA8 CD 23 E4                             call    l2_plot_pixel
 322+ 7DAB FD 7E 05                             ld      a,(iy+5)
 323+ 7DAE C1                                   pop    bc
 324+ 7DAF 3E 92                                ld      a,L2DustColour
 325+ 7DB1 0D                                   dec     c
 326+ 7DB2                                      MMUSelectLayer2
 326+ 7DB2 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 327+ 7DB6 CD 23 E4                             call    l2_plot_pixel
 328+ 7DB9 C1           EndofStarsLoop:         pop     bc                                      ;  0
 329+ 7DBA FD E5        NextStarLoop3:          push    iy                                      ; +1
 330+ 7DBC E1                                   pop     hl                                      ;  0
 331+ 7DBD ED 34 06 00                          add     hl,6
 332+ 7DC1 E5           NextStarLoop2:          push    hl                                      ; +1
 333+ 7DC2 FD E1                                pop     iy                                      ;  0
 334+ 7DC4 05                                   dec     b
 335+ 7DC5 C2 43 7C                             jp      nz,StarProcessLoop
 336+ 7DC8 C9                                   ret
 337+ 7DC9 C1           ResetStar:              pop     bc                                      ; 0
 338+ 7DCA FD E5                                push    iy                                      ; +1 (current star)
 339+ 7DCC E1                                   pop     hl                                      ; 0
 340+ 7DCD CD 56 7B                             call    InitStarAtHL
 341+ 7DD0 C3 BA 7D                             jp      NextStarLoop3
 342+ 7DD3              ;----------------------------------------------------------------------------------------------------------------------------------
 343+ 7DD3 FD 4E 00     ProjectStarXToScreen:   ld      c,(iy+0)
 344+ 7DD6 FD 7E 01                             ld      a,(iy+1)
 345+ 7DD9 6F                                   ld      l,a
 346+ 7DDA E6 7F                                and     $7F
 347+ 7DDC 47                                   ld      b,a
 348+ 7DDD CD 6D 97                             call    DIV16BCDivDEUNDOC
 349+ 7DE0 7D                                   ld      a,l
 350+ 7DE1                                      JumpOnBitSet a,7,StarXNegativePoint             ; LL62 up, -ve Xdist, RU screen onto XX3 heap
 350+ 7DE1 CB 7F       >                        bit 	7,a
 350+ 7DE3 C2 EE 7D    >                        jp      nz,StarXNegativePoint
 351+ 7DE6              ;StarXPositivePoint:									; x was positive result
 352+ 7DE6 2E 80                                ld          l,ScreenCenterX						;
 353+ 7DE8 26 00                                ld          h,0
 354+ 7DEA 09                                   add         hl,bc								; hl = Screen Centre + X
 355+ 7DEB C3 F5 7D                             jp          StarStoreXPoint
 356+ 7DEE              StarXNegativePoint:                                 ; x < 0 so need to subtract from the screen centre position
 357+ 7DEE 2E 80                                ld          l,ScreenCenterX
 358+ 7DF0 26 00                                ld          h,0
 359+ 7DF2                                      ClearCarryFlag
 359+ 7DF2 B7          >                        or a
 360+ 7DF3 ED 42                                sbc         hl,bc                               ; hl = Screen Centre - X
 361+ 7DF5              StarStoreXPoint:                                    ; also from LL62, XX3 node heap has xscreen node so far.
 362+ 7DF5 7D                                   ld          a,l
 363+ 7DF6 32 50 81                             ld          (varStarX),a
 364+ 7DF9 C9                                   ret
 365+ 7DFA
 366+ 7DFA FD 46 02     ProjectStarYToScreen:   ld          b,(iy+2)
 367+ 7DFD FD 7E 03                             ld          a,(iy+3)
 368+ 7E00 6F                                   ld          l,a
 369+ 7E01 E6 7F                                and         $7F
 370+ 7E03 47                                   ld          b,a
 371+ 7E04 CD 6D 97                             call        DIV16BCDivDEUNDOC
 372+ 7E07 7D                                   ld          a,l                                 ; XX15+2 \ sign of X dist
 373+ 7E08                                      JumpOnBitSet a,7,StarNegativeYPoint             ; LL62 up, -ve Xdist, RU screen onto XX3 heap top of screen is Y = 0
 373+ 7E08 CB 7F       >                        bit 	7,a
 373+ 7E0A C2 15 7E    >                        jp      nz,StarNegativeYPoint
 374+ 7E0D                                  ;StarPositiveYPoint:									; Y is positive so above the centre line
 375+ 7E0D 2E 60                               ld          l,ScreenCenterY
 376+ 7E0F                                      ClearCarryFlag
 376+ 7E0F B7          >                        or a
 377+ 7E10 ED 42                                sbc         hl,bc  							 	; hl = ScreenCentreY - Y coord (as screen is 0 at top)
 378+ 7E12 C3 1A 7E                             jp          StarStoreYPoint
 379+ 7E15              StarNegativeYPoint:									; this bit is only 8 bit aware TODO FIX
 380+ 7E15 2E 60                                ld          l,ScreenCenterY
 381+ 7E17 26 00                                ld          h,0
 382+ 7E19 09                                   add         hl,bc								; hl = ScreenCenterY + Y as negative is below the center of screen
 383+ 7E1A              StarStoreYPoint:                                    ; also from LL62, XX3 node heap has xscreen node so far.
 384+ 7E1A 7D                                   ld          a,l
 385+ 7E1B 32 51 81                             ld          (varStarY),a
 386+ 7E1E C9                                   ret
 387+ 7E1F
 388+ 7E1F
# file closed: ./Universe/StarDust/StarRoutines.asm
 551  7E1F                  INCLUDE	"./Hardware/memfill_dma.asm"
# file opened: ./Hardware/memfill_dma.asm
   1+ 7E1F
   2+ 7E1F 00           memfillvalue		DB 0
   3+ 7E20 83 C3 C7 CB  memfill        		DB DMA_DISABLE,  DMA_RESET, DMA_RESET_PORT_A_TIMING, DMA_RESET_PORT_B_TIMING ,DMA_WRO_BLOCK_PORTA_A2B_XFR
   3+ 7E24 7D
   4+ 7E25 1F 7E        memfill_astrt  		DW memfillvalue
   5+ 7E27 00 40        memfill_length 		DB $00,$40
   6+ 7E29 24 10 AD     					DB DMA_WR1_P1FIXED_MEMORY ,DMA_WR2_P2INC_MEMORY ,DMA_WR4_CONT_MODE
   7+ 7E2C 00 00        memfill_bstrt  		DB $00,$00
   8+ 7E2E 82 CF B3 87  					DB DMA_STOP_AT_END, DMA_LOAD, DMA_FORCE_READY, DMA_ENABLE
   9+ 7E32              memfill_cmd_len	  	EQU $ - memfill
  10+ 7E32
  11+ 7E32              memfill_dma:
  12+ 7E32              ; "memfill_dma, hl = address to fill, a = value, de = length"
  13+ 7E32              .set_fill_value:
  14+ 7E32 32 1F 7E     	ld 		(memfillvalue),a
  15+ 7E35              .set_target:
  16+ 7E35 22 2C 7E     	ld		(memfill_bstrt),hl
  17+ 7E38              .set_length:
  18+ 7E38 ED 53 27 7E  	ld		(memfill_length),de
  19+ 7E3C              .write_dma:
  20+ 7E3C 21 20 7E     	ld 		hl, memfill
  21+ 7E3F 06 12        	ld 		b, memfill_cmd_len
  22+ 7E41 0E 6B        	ld		c,IO_DATAGEAR_DMA_PORT
  23+ 7E43 ED B3        	otir
  24+ 7E45 C9           	ret
  25+ 7E46
# file closed: ./Hardware/memfill_dma.asm
 552  7E46                  INCLUDE	"./Hardware/memcopy_dma.asm"
# file opened: ./Hardware/memcopy_dma.asm
   1+ 7E46
   2+ 7E46 83 C3 C7 CB  memcopy        		DB DMA_DISABLE,  DMA_RESET, DMA_RESET_PORT_A_TIMING, DMA_RESET_PORT_B_TIMING ,DMA_WRO_BLOCK_PORTA_A2B_XFR
   2+ 7E4A 7D
   3+ 7E4B 00 00        memcopy_astrt  		DB $00,$00
   4+ 7E4D 00 40        memcopy_length 		DB $00,$40
   5+ 7E4F 14 10 CD     					DB DMA_WR1_P1INC_MEMORY ,DMA_WR2_P2INC_MEMORY ,DMA_WR4_BURST_MODE;DMA_WR4_CONT_MODE
   6+ 7E52 00 00        memcopy_bstrt  		DB $00,$00
   7+ 7E54 82 CF B3 87  					DB DMA_STOP_AT_END, DMA_LOAD, DMA_FORCE_READY, DMA_ENABLE
   8+ 7E58              memcopy_cmd_len	  	equ $ - memcopy
   9+ 7E58
  10+ 7E58              memcopy_dma:
  11+ 7E58              ; "memcopy_dma, hl = target address de = source address to copy, bc = length"
  12+ 7E58              .set_target:
  13+ 7E58 22 52 7E     	ld		(memcopy_bstrt),hl
  14+ 7E5B              .set_source:
  15+ 7E5B ED 53 4B 7E  	ld		(memcopy_astrt),de
  16+ 7E5F              .set_length:
  17+ 7E5F ED 43 4D 7E  	ld		(memcopy_length),bc
  18+ 7E63              .write_dma:
  19+ 7E63 21 46 7E     	ld 		hl, memcopy
  20+ 7E66 06 12        	ld 		b, memcopy_cmd_len
  21+ 7E68 0E 6B        	ld		c,IO_DATAGEAR_DMA_PORT
  22+ 7E6A ED B3        	otir
  23+ 7E6C C9           	ret
  24+ 7E6D
# file closed: ./Hardware/memcopy_dma.asm
 553  7E6D 00 00        XX12PVarQ			DW 0
 554  7E6F 00 00        XX12PVarR			DW 0
 555  7E71 00 00        XX12PVarS			DW 0
 556  7E73 00 00        XX12PVarResult1		DW 0
 557  7E75 00 00        XX12PVarResult2		DW 0
 558  7E77 00 00        XX12PVarResult3		DW 0
 559  7E79 00           XX12PVarSign2		DB 0
 560  7E7A 00           XX12PVarSign1		DB 0								; Note reversed so BC can do a little endian fetch
 561  7E7B 00           XX12PVarSign3		DB 0
 562  7E7C                  INCLUDE "./Variables/constant_equates.asm"
# file opened: ./Variables/constant_equates.asm
   1+ 7E7C              ;Contants
   2+ 7E7C
   3+ 7E7C              SignMask8Bit		equ %01111111
   4+ 7E7C              SignMask16Bit		equ %0111111111111111
   5+ 7E7C              SignOnly8Bit		equ $80
   6+ 7E7C              SignOnly16Bit		equ $8000
   7+ 7E7C
   8+ 7E7C              Bit7Only            equ %10000000
   9+ 7E7C              Bit6Only            equ %01000000
  10+ 7E7C              Bit5Only            equ %00100000
  11+ 7E7C              Bit4Only            equ %00010000
  12+ 7E7C              Bit3Only            equ %00001000
  13+ 7E7C              Bit2Only            equ %00000100
  14+ 7E7C              Bit1Only            equ %00000010
  15+ 7E7C              Bit0Only            equ %00000001
  16+ 7E7C              Bit7Clear           equ %01111111
  17+ 7E7C              Bit6Clear           equ %10111111
  18+ 7E7C              Bit5Clear           equ %11011111
  19+ 7E7C              Bit4Clear           equ %11101111
  20+ 7E7C              Bit3Clear           equ %11110111
  21+ 7E7C              Bit2Clear           equ %11111011
  22+ 7E7C              Bit1Clear           equ %11111101
  23+ 7E7C              Bit0Clear           equ %11111110
  24+ 7E7C              ConstPi				equ $80
  25+ 7E7C              ConstNorm           equ 197
  26+ 7E7C              ;OpCodes
  27+ 7E7C              OpCodeSCF           equ $37
  28+ 7E7C              OpCodeCCF           equ $3F
  29+ 7E7C              OpCodeAndA          equ $A7
  30+ 7E7C              OpCodeClearCarryFlag equ OpCodeAndA
  31+ 7E7C
  32+ 7E7C              TidyInterval        equ 16
  33+ 7E7C
  34+ 7E7C              ;Text Tokens
  35+ 7E7C              EliteToken			equ $1E			; Token ID for text messsage ---- E L I T E ----
  36+ 7E7C              BrabenBellToken 	equ $0D
  37+ 7E7C              AcorToken			equ $0C
  38+ 7E7C              ; Cursor Bits
  39+ 7E7C              CursorClimb         equ %10000000
  40+ 7E7C              CursorDive          equ %01000000
  41+ 7E7C              CursorLeft          equ %00100000
  42+ 7E7C              CursorRight         equ %00010000
  43+ 7E7C              CursorHome          equ %00001000
  44+ 7E7C              CursorRecenter      equ %00000100
  45+ 7E7C
  46+ 7E7C              ; Intro Screen
  47+ 7E7C              TitleShip			equ	$8C
  48+ 7E7C              RotationUnity		equ $60
  49+ 7E7C              DBCheckCode			equ $DB
  50+ 7E7C              MaxVisibility		equ $1F
  51+ 7E7C              FarInFront			equ $C0
  52+ 7E7C              ; Equipment Flags
  53+ 7E7C              EquipmentItemFitted     equ $FF
  54+ 7E7C              EquipmentItemNotFitted  equ 0
  55+ 7E7C              ; Universe Managment
  56+ 7E7C              PlanetTypeMeridian      equ 128
  57+ 7E7C              PlanetMinRadius         equ 6
  58+ 7E7C
  59+ 7E7C              ShipTotalModelCount     equ 44
  60+ 7E7C              ShipTypeNormal          equ 0
  61+ 7E7C              ShipTypeMissile         equ 1
  62+ 7E7C              ShipTypeStation         equ 2
  63+ 7E7C              ShipTypeJunk            equ 3
  64+ 7E7C              ShipTypeScoopable       equ 4         ; a sub set of junk
  65+ 7E7C              ShipTypeTargoid         equ 5
  66+ 7E7C              ShipTypeUndefined1      equ 6
  67+ 7E7C              ShipTypeUndefined2      equ 7
  68+ 7E7C              ShipTypeUndefined3      equ 8
  69+ 7E7C              ShipTypeUndefined4      equ 9
  70+ 7E7C              ShipTypeUndefined5      equ 10
  71+ 7E7C              ShipTypeUndefined6      equ 11
  72+ 7E7C              ShipTypeUndefined7      equ 12
  73+ 7E7C              ShipTypeUndefined8      equ 13
  74+ 7E7C              ShipTypeUndefined9      equ 14
  75+ 7E7C              ShipTypeUndefined10      equ 15
  76+ 7E7C              ShipTypeNoAI            equ 16
  77+ 7E7C
  78+ 7E7C              ShipTypeText            equ 253
  79+ 7E7C              ShipTypeDebug           equ 254
  80+ 7E7C              ShipTypeEmpty           equ 255
  81+ 7E7C
  82+ 7E7C              SpawnTypeStation        EQU 0
  83+ 7E7C              SpawnTypeBodies         EQU SpawnTypeStation        + 1
  84+ 7E7C              SpawnTypeJunk           EQU SpawnTypeBodies         + 1
  85+ 7E7C              SpawnTypeCop            EQU SpawnTypeJunk           + 1
  86+ 7E7C              SpawnTypeTrader         EQU SpawnTypeCop            + 1
  87+ 7E7C              SpawnTypeNonTrader      EQU SpawnTypeTrader         + 1
  88+ 7E7C              SpawnTypePirate         EQU SpawnTypeNonTrader      + 1
  89+ 7E7C              SpawnTypeHunter         EQU SpawnTypePirate         + 1
  90+ 7E7C              SpawnTypeThargoid       EQU SpawnTypeHunter         + 1
  91+ 7E7C              SpawnTypeMission        EQU SpawnTypeThargoid       + 1
  92+ 7E7C              SpawnTypeStationDebris  EQU SpawnTypeMission        + 1
  93+ 7E7C              SpawnTypeMissionEvent   EQU SpawnTypeStationDebris  + 1
  94+ 7E7C              SpawnTypeDoNotSpawn     EQU SpawnTypeMissionEvent   + 1
  95+ 7E7C
  96+ 7E7C              ; Inventory Equates
  97+ 7E7C              StockTypeCount          EQU 17
  98+ 7E7C              StockTypeMax            EQU StockTypeCount - 1
  99+ 7E7C              StockTypePenultimate    EQU StockTypeCount - 2
 100+ 7E7C              ; Laser and Missile Settings
 101+ 7E7C              ; Laser and Missile
 102+ 7E7C              ShipLaserPower          equ %11110000
 103+ 7E7C              ShipMissileCount        equ %00001111
 104+ 7E7C              ShipMissiles1           equ %00000001
 105+ 7E7C              ShipMissiles2           equ %00000010
 106+ 7E7C              ShipMissiles3           equ %00000011
 107+ 7E7C              ShipMissiles4           equ %00000100
 108+ 7E7C              ShipMissiles5           equ %00000101
 109+ 7E7C              ShipMissiles6           equ %00000110
 110+ 7E7C              ShipMissiles7           equ %00000111
 111+ 7E7C              ShipMissiles8           equ %00001000
 112+ 7E7C              ShipMissiles9           equ %00001001
 113+ 7E7C              ShipMissiles10          equ %00001010
 114+ 7E7C              ShipMissiles11          equ %00001011
 115+ 7E7C              ShipMissiles12          equ %00001100
 116+ 7E7C              ShipMissiles13          equ %00001101
 117+ 7E7C              ShipMissiles14          equ %00001110
 118+ 7E7C              ShipMissiles15          equ %00001111
 119+ 7E7C              ; AI Flags  UniverseAIControl
 120+ 7E7C              ShipCanAnger            equ %10000000   ; Yes or no
 121+ 7E7C              ShipFighterBaySize      equ %01110000   ; fighter day size 0 = none 1,2 = 1 or 2 fighters, 3 = infinite
 122+ 7E7C              ShipFighterBaySize1     equ %00010000   ; fighter day size 0 = none 1,2 = 1 or 2 fighters, 3 = infinite
 123+ 7E7C              ShipFighterBaySize2     equ %00100000   ; fighter day size 0 = none 1,2 = 1 or 2 fighters, 3 = infinite
 124+ 7E7C              ShipFighterBaySize3     equ %00110000   ; fighter day size 0 = none 1,2 = 1 or 2 fighters, 3 = infinite
 125+ 7E7C              ShipFighterBaySize4     equ %01000000   ; fighter day size 0 = none 1,2 = 1 or 2 fighters, 3 = infinite
 126+ 7E7C              ShipFighterBaySize5     equ %01010000   ; fighter day size 0 = none 1,2 = 1 or 2 fighters, 3 = infinite
 127+ 7E7C              ShipFighterBaySizeInf   equ %01110000   ; Infinite fighters (well 255 as thats enough)
 128+ 7E7C              ShipFighterType         equ %00001100   ; 4 types 0 = Worm, 1 = Sidewinder, 2 = Viper, 3 = Thargon
 129+ 7E7C              ShipFighterWorm         equ %00000000
 130+ 7E7C              ShipFighterSidewinder   equ %00000100
 131+ 7E7C              ShipFighterViper        equ %00001000
 132+ 7E7C              ShipFighterThargon      equ %00001100
 133+ 7E7C              ShipUltraHostile        equ %00000010   ; If ultra hostile, will never back down so behaves like a missile
 134+ 7E7C              ShipFree                equ $00000011   ; Unused bits at present for later
 135+ 7E7C              ; NewBTactics
 136+ 7E7C              ShipIsTrader            equ Bit0Only   ; Trader flag  80% are peaceful 20% also have Bounty Hunter flag
 137+ 7E7C              ShipIsBountyHunter      equ Bit1Only   ;
 138+ 7E7C              ShipIsHostile           equ Bit2Only   ; Also used as Angry flag now
 139+ 7E7C              ShipIsPirate            equ Bit3Only   ;
 140+ 7E7C              ShipIsDocking           equ Bit4Only   ;
 141+ 7E7C              ShipIsBystander         equ Bit5Only   ;
 142+ 7E7C              ShipIsCop               equ Bit6Only   ;
 143+ 7E7C              ShipHasEscapePod        equ Bit7Only   ;
 144+ 7E7C              ShipHostileNewBitNbr    equ 2
 145+ 7E7C                      DISPLAY "TODO: Add bravery based on rank, new bits and type of ship"
 146+ 7E7C
 147+ 7E7C              ; UBnkaiatkecm
 148+ 7E7C              ;Unused                 equ Bit0Only
 149+ 7E7C              ;Unused                 equ Bit1Only
 150+ 7E7C              ;Unused                 equ Bit2Only
 151+ 7E7C              ShipIsDot               equ Bit3Only
 152+ 7E7C              ShipKilled              equ Bit4Only    ; Ship has just been marked as killed so initiate cloud of debris
 153+ 7E7C              ShipExploding           equ Bit5Only
 154+ 7E7C              ShipIsVisible           equ Bit6Only
 155+ 7E7C              ShipAIEnabled           equ Bit7Only   ;
 156+ 7E7C
 157+ 7E7C
 158+ 7E7C              ; UBnkaiakecm 2
 159+ 7E7C              ;ShipAngryNewBitNbr      equ 4
 160+ 7E7C              ShipExplosionDuration   equ 75         ; amount of frames an explosion lasts for
 161+ 7E7C              ShipNotHostile          equ Bit2Clear   ;
 162+ 7E7C              ShipIsNotDot            equ Bit3Clear
 163+ 7E7C              ShipIsDotBitNbr         equ 3
 164+ 7E7C              ShipKilledBitNbr        equ 4
 165+ 7E7C              ShipIsVisibleBitNbr     equ 6
 166+ 7E7C              ShipIsScoopDockEsc      equ Bit7Only   ;
 167+ 7E7C              ShipAIDisabled          equ Bit7Clear
 168+ 7E7C              ShipAIEnabledBitNbr     equ 7
 169+ 7E7C              ShipExplodingBitNbr     equ 5
 170+ 7E7C              ; Equipment Defaults
 171+ 7E7C              ECMCounterMax           equ $80
 172+ 7E7C              ; Main Loop State
 173+ 7E7C              StatePlayerDocked       equ $FF
 174+ 7E7C              StateCompletedLaunch    equ $FD
 175+ 7E7C              StateInTransition       equ $FE
 176+ 7E7C              StateHJumping           equ $FC
 177+ 7E7C              StateHEntering          equ $FB
 178+ 7E7C              StateCompletedHJump     equ $FA
 179+ 7E7C              StateNormal             equ 0
 180+ 7E7C              ; Missile Stage flags , $8x = locked to ship id x, $0x = fire at ship id x requested
 181+ 7E7C              StageMissileNotTargeting equ $FF
 182+ 7E7C              StageMissileTargeting   equ $FE
 183+ 7E7C
 184+ 7E7C
 185+ 7E7C              ShipMaxDistance     equ 192
 186+ 7E7C              HyperSpaceTimers    equ $0B0B
 187+ 7E7C
 188+ 7E7C              ; -- game limts
 189+ 7E7C              MaxNumberOfStars	equ 11
 190+ 7E7C              ConsoleRefreshInterval  equ 5
 191+ 7E7C              MaxJunkStation      equ 3
 192+ 7E7C              MaxJunkFreeSpace    equ 5
 193+ 7E7C              WarpCoolDownPeriod  equ 90
 194+ 7E7C
 195+ 7E7C              ShipTypeSize		equ	32 			;??????? just a guess for now
 196+ 7E7C              ShipSST				equ 4			; its a space station
 197+ 7E7C              UniverseBasePage 	equ 70			; Base memory bank for universe Item #0
 198+ 7E7C              ShipDataBasePage	equ	90			; Needs 2mb upgrade but what the heck
 199+ 7E7C              ShipCountMax		equ	2			; For now just 2 ships to debug
 200+ 7E7C              LineLimitPerShip	equ 70			; Max lines per ship
 201+ 7E7C              FaceLimitPerShip	equ	70			; Same as line limit to simplify some logic
 202+ 7E7C              ; "NEED TO DEFINE SHIPTYPESIZE TODO"
 203+ 7E7C
 204+ 7E7C              ; Memory page managment	(Refers to a memory slot as a place to access data)
 205+ 7E7C              ShipDataSlot		equ	6			; this may move into rom swap out space later
 206+ 7E7C              UniverseObjectSlot	equ	7
 207+ 7E7C
 208+ 7E7C              KeyForwardsView		equ	$20
 209+ 7E7C              ; Game specific equates
 210+ 7E7C              MissileDropHeight   equ 5           ; how far the missile is ejected on launch in y axis
 211+ 7E7C              WarpSequenceCount   equ 50
 212+ 7E7C
 213+ 7E7C              ;...Game Colour Mapping
 214+ 7E7C              L2DustColour        equ L2ColourGREY_1
 215+ 7E7C              L2SunScannerBright  equ 252
 216+ 7E7C              L2SunScanner        equ 180
 217+ 7E7C              L2DebrisColour      equ L2ColourYELLOW_1
 218+ 7E7C
 219+ 7E7C
 220+ 7E7C              ; Ship Data
 221+ 7E7C              ;;;;	.XX21	\ -> &5600 \ Table of pointers to ships' data given to XX0
 222+ 7E7C              ;;;;00 7F			 EQUW &7F00 \ type  1 is #MSL  Missile data on page off bottom of screen
 223+ 7E7C              ;;;;00 00			 EQUW 0     \ type  2 is #SST  Space Station, Coriolis or Dodo.
 224+ 7E7C              ;;;;00 00			 EQUW 0     \ type  3 is #ESC  Escape capsule
 225+ 7E7C              ;;;;00 00			 EQUW 0     \ type  4 is #PLT  Plate, alloys
 226+ 7E7C              ;;;;00 00			 EQUW 0     \ type  5 is #OIL  Cargo cannister
 227+ 7E7C              ;;;;00 00			 EQUW 0     \ type  6 is       Boulder
 228+ 7E7C              ;;;;00 00			 EQUW 0     \ type  7 is #AST  Asteroid
 229+ 7E7C              ;;;;00 00			 EQUW 0     \ type  8 is #SPL  Splinter, rock.
 230+ 7E7C              ;;;;00 00			 EQUW 0     \ type  9 is #SHU  Shuttle
 231+ 7E7C              ;;;;00 00			 EQUW 0     \ type 10 is       Transporter
 232+ 7E7C              ;;;;00 00			 EQUW 0     \ type 11 is #CYL  Cobra Mk III,  Boa
 233+ 7E7C              ;;;;00 00			 EQUW 0     \ type 12 is       Python
 234+ 7E7C              ;;;;00 00			 EQUW 0     \ type 13 is       Last of three traders
 235+ 7E7C              ;;;;00 00			 EQUW 0     \ type 14 is #ANA  Anaconda
 236+ 7E7C              ;;;;00 00			 EQUW 0     \ type 15 is #WRM  Worm with Anaconda
 237+ 7E7C              ;;;;00 00			 EQUW 0     \ type 16 is #COP  Viper
 238+ 7E7C              ;;;;00 00			 EQUW 0     \ type 17 is       First pirate
 239+ 7E7C              ;;;;00 00			 EQUW 0     \ type 18 is
 240+ 7E7C              ;;;;00 00			 EQUW 0     \ type 19 is #KRA  Krait small pirate
 241+ 7E7C              ;;;;00 00			 EQUW 0     \ type 20 is #ADA  Adder
 242+ 7E7C              ;;;;00 00			 EQUW 0     \ type 21 is
 243+ 7E7C              ;;;;00 00			 EQUW 0     \ type 22 is
 244+ 7E7C              ;;;;00 00			 EQUW 0     \ type 23 is
 245+ 7E7C              ;;;;00 00			 EQUW 0     \ type 24 is #CYL2 Last strong pirate
 246+ 7E7C              ;;;;00 00			 EQUW 0     \ type 25 is #ASP  Asp Mk II
 247+ 7E7C              ;;;;00 00			 EQUW 0     \ type 26 is #FER  Fer de Lance
 248+ 7E7C              ;;;;00 00			 EQUW 0     \ type 27 is
 249+ 7E7C              ;;;;00 00			 EQUW 0     \ type 28 is	Last of three bounty hunters
 250+ 7E7C              ;;;;00 00			 EQUW 0     \ type 29 is #THG  Thargoid
 251+ 7E7C              ;;;;00 00			 EQUW 0     \ type 30 is #TGL  Thargon
 252+ 7E7C              ;;;;00 00			 EQUW 0     \ type 31 is #CON  Constrictor
 253+ 7E7C              ;;;;	.E%	\ -> &563E \ Hull NEWB bits are escpod, cop, inno, ?, pirate, angry, hunter, trader.
 254+ 7E7C              ;;;;			\ NEWB examples
 255+ 7E7C              ;;;;\ 21			EQUB &21    \ 0010 0001    9 Shuttle has no escape pod, inno, trader.
 256+ 7E7C              ;;;;\ 61			EQUB &61    \ 0110 0001   10 Tansporter no escape pod, Cop, inno, trader.
 257+ 7E7C              ;;;;\ A0			EQUB &A0    \ 1010 0000   11 Cobra has Escape pod, inno, not a trader.
 258+ 7E7C              ;;;;\ C2			EQUB &C2    \ 1100 0010   16 Viper has Escape pod, Cop, hunter.
 259+ 7E7C              ;;;;\ 8C			EQUB &8C    \ 1000 1100   19 Krait pirate has escape pod, is pirate and angry.
 260+ 7E7C
# file closed: ./Variables/constant_equates.asm
 563  7E7C                  INCLUDE "./Variables/general_variables.asm"
# file opened: ./Variables/general_variables.asm
   1+ 7E7C                  IFNDEF LASER_V2
   2+ 7E7C ~                DEFINE  LASER_V2    1
   3+ 7E7C                  ENDIF
   4+ 7E7C              ; Debugging data
   5+ 7E7C 00 00 00...  failureDiag DS  10              ; 10 bytes to log data before a failure
   6+ 7E86
   7+ 7E86              LogFailure:     MACRO messageAddress
   8+ 7E86 ~                            ld      hl,messageAddress
   9+ 7E86 ~                            ld      de,failureDiag
  10+ 7E86 ~                            ld      bc,10
  11+ 7E86 ~                            ldir
  12+ 7E86                              ENDM
  13+ 7E86              ;-- Memory management variables
  14+ 7E86 00 00 00...  SaveMMU0Queue:          DS      5                   ; Allows up to 5 levels of depth for queue stacking
  15+ 7E8B 00 00 00...  SaveMMU6Queue:          DS      5                   ; Allows up to 5 levels of depth for queue stacking
  16+ 7E90 00 00 00...  SaveMMU7Queue:          DS      5                   ; Allows up to 5 levels of depth for queue stacking
  17+ 7E95              ;-- Note these are not counters but initialised to memory locations to simplify code
  18+ 7E95              ;-- Point to the next free memory location to write to
  19+ 7E95 86 7E        SaveMMU0QueueHead:      DW      SaveMMU0Queue       ; Current last saved MMU Entry
  20+ 7E97 8B 7E        SaveMMU6QueueHead:      DW      SaveMMU6Queue       ; Current last saved MMU Entry
  21+ 7E99 90 7E        SaveMMU7QueueHead:      DW      SaveMMU7Queue       ; Current last saved MMU Entry
  22+ 7E9B
  23+ 7E9B 00 00        varAxis1	DW 	0				; address of first axis in a rotation action
  24+ 7E9D 00 00        varAxis2	DW	0				; address of 2nd axis in a roation action
  25+ 7E9F              ; Variables to simulate 6502 registers until code fixed
  26+ 7E9F              ; These must be here in this order as reading Y and X can then be a 16 bit read
  27+ 7E9F 00           regX		DB	0               ; using 16 bit read into BC this would go into C
  28+ 7EA0 00           regY		DB	0               ; using 16 bit read into BC this would go into B
  29+ 7EA1 00           regA		DB	0
  30+ 7EA2
  31+ 7EA2
  32+ 7EA2 00           varGPLoopA	DB	0				; General Purpose innermost loop variable
  33+ 7EA3 00 00        INF			DW	0				; page 0 &20 Used to get address from UNIV array
  34+ 7EA5 00 00        INF28		DW	0				; page 0 &20 Used to get address from UNIV array
  35+ 7EA7
  36+ 7EA7
  37+ 7EA7
  38+ 7EA7              ;XX16		DS	16				; 16 byte Matrix
  39+ 7EA7
  40+ 7EA7              P0INWK							; page 0 & 46
  41+ 7EA7              p0INWK31						; page 0 & 65
  42+ 7EA7              P0INWK36						; PAGE 0 &6A
  43+ 7EA7
  44+ 7EA7 00           XX4			DB	0				; XX4 page 0 &96 last Normal Found to be visible
  45+ 7EA8              LastNormalVisible	equ	XX4
  46+ 7EA8              varXX4              equ XX4
  47+ 7EA8
  48+ 7EA8
  49+ 7EA8
  50+ 7EA8 00           PATG		DB	0				; 6502 &03C9
  51+ 7EA9 00 00        SLSP 		DW	0				; &03B0 \ SLSP \ ship lines pointer
  52+ 7EAB
  53+ 7EAB
  54+ 7EAB              ;UNIV		DS FreeListSize*2	; Array of Universe Pointers
  55+ 7EAB              ;HULLINDEX	DS ShipTypeSize*2	; hull index for table at XX21= &F XX21-1,Y
  56+ 7EAB
  57+ 7EAB              ; Present System Variables
  58+ 7EAB
  59+ 7EAB 2B           RandomSeed				DB	43			    ; 00 DEBUG JUST SOME START VALUES
  60+ 7EAC 20           RandomSeed1				DB	32	            ; 01
  61+ 7EAD 0C           RandomSeed2				DB	12			    ; 02
  62+ 7EAE 42           RandomSeed3				DB	66			    ; 03
  63+ 7EAF 00 00 00 00  RandomSeedSave          DS  4               ; used in explosion routine to save randoms
  64+ 7EB3 00           varT1					DB	0				; 06
  65+ 7EB4 00           SClo					DB 0				; 07
  66+ 7EB5 00           SChi					DB 0				; 08
  67+ 7EB6 00           varP					DB 0 				; 10	XX16+7
  68+ 7EB7 00           varPhi					DB 0 				; 11	XX16+8
  69+ 7EB8 00           varPhi2					DB 0 				; 12	XX16+9
  70+ 7EB9 00           varPhiSign              DB 0
  71+ 7EBA              varPp1                  equ varPhi
  72+ 7EBA              varPp2                  equ varPhi2
  73+ 7EBA              varPp3                  equ varPhiSign
  74+ 7EBA 00           UnivPointerLo			DB	0				; 20		INF                 XX0+2
  75+ 7EBB 00           UnivPointerHi			DB	0				; 21      INF+1               XX0+3
  76+ 7EBC              UnivPointer				equ	UnivPointerLo
  77+ 7EBC 00           varV					DB 0				; 22                          XX0+4
  78+ 7EBD 00           varVHi					DB 0				; 23                          XX0+5
  79+ 7EBE 00           varXXlo                 DB 0                ; 24
  80+ 7EBF 00           varXXHi                 DB 0                ; 25
  81+ 7EC0              varXX					equ	varXXlo
  82+ 7EC0 00           YYlo                    DB 0                ; 26
  83+ 7EC1 00           YYHi                    DB 0                ; 27
  84+ 7EC2              varYY					equ	YYlo
  85+ 7EC2              											;	28
  86+ 7EC2              											;	29
  87+ 7EC2              ;PlayerShipPositionData - Must be contiguous for setup
  88+ 7EC2 00           BETA 					DB	0               ; 2A        (pitch done)
  89+ 7EC3 00           JSTY                    DB  0               ; Joystick analog
  90+ 7EC4 00           BET1 					DB	0               ; 2B        lower7 magnitude
  91+ 7EC5 00           BET2                    DB  0               ;            climb sign
  92+ 7EC6 00           BET2FLIP				DB	0				; 7C		BET 2 pitch Sign negated
  93+ 7EC7 1F           BET1MAXC                DB  31              ; max climb
  94+ 7EC8 E1           BET1MAXD                DB  -31             ; max dive
  95+ 7EC9 00           XC						DB	0               ; 2C
  96+ 7ECA 00           YC						DB 	0               ; 2D
  97+ 7ECB              ;... ECM logic. If another ship adds ECM then we just set the loop A and B to starting values so they overlap
  98+ 7ECB 00           ECMCountDown            DB  0
  99+ 7ECC 00           ECMLoopB                DB  0
 100+ 7ECD 00 00        JSTX                    DW  0               ;           Joystick analog value
 101+ 7ECF 00           ALPHA					DB	0				; 8D        Alpha with bit 7 sign
 102+ 7ED0 00           ALP1					DB 	0				; 31		ALP1	ABS Alpha
 103+ 7ED1 00           ALP2					DB  0				; 32		ALP2	Roll Sign
 104+ 7ED2 00           ALP2FLIP				DB  0				; 33		ALP2	negated roll sign
 105+ 7ED3 1F           ALP1MAXR                DB  31               ;   Maximum roll, added becuase we may allow different ship types
 106+ 7ED4 E1           ALP1MAXL                DB  -31             ;   Maximum roll, added becuase we may allow different ship types
 107+ 7ED5
 108+ 7ED5
 109+ 7ED5              ;-- Message handler -----------------------------------------------------------------------------------------------------------------
 110+ 7ED5              MAXMESSAGES             EQU 5
 111+ 7ED5              MESSAGETIMELIMIT        EQU 20
 112+ 7ED5              MESSAGESIZE             EQU 33
 113+ 7ED5              MESSAGELINE             EQU $0001
 114+ 7ED5
 115+ 7ED5 00           MessageCount            DB  0                ; used for enquing messages later
 116+ 7ED6 00           MessageCurrent          DB  0
 117+ 7ED7 05 00        MessageIndex            DW  MAXMESSAGES
 118+ 7ED9 00 00 00...  MessageQueue            DS  MAXMESSAGES * MESSAGESIZE
 119+ 7F7E 05           MessageTimeout          DB  MAXMESSAGES
 120+ 7F7F 00 00 00...  IndexedWork				DS	37				; General purpose work space when doing temp arrays
 121+ 7FA4
 122+ 7FA4              ; MOVED TO Universe XX19					DB	0				; page 0 &67
 123+ 7FA4              ; MOVED TO Universe XX20					DB	0				; page 0 &67 also used as XX19+1 for XX19 being a word
 124+ 7FA4              ;DEFUNCT EQUATE NormalCountCopyBy4		equ	XX20			; Also used for normal * 4 holding variable
 125+ 7FA4 00           XX21					DB  0				; this may be part of XX20/xx21 accordign to spawn new shipXX21		DW	0				; Ah XX21 is hull pointer  hull pointer lo as it can;t hold HULLINDX as 16bit array
 126+ 7FA5              ;XX21 is the pointer table to the pages for ship types. this will be repalaced by paging so just need an equate for first page
 127+ 7FA5
 128+ 7FA5
 129+ 7FA5 00           QQ17					DB	0				;   72
 130+ 7FA6 00           XX18xlo                 DB  0               ;	72		XX18   xlo
 131+ 7FA7 00           XX18xhi                 DB  0               ;	73		XX18+1 xhi
 132+ 7FA8 00           XX18xsg                 DB  0               ;	74		XX18+2 xsgn
 133+ 7FA9 00           XX18ylo                 DB  0               ;	75		XX18   ylo
 134+ 7FAA 00           XX18yhi                 DB  0               ;	76		XX18+1 yhi
 135+ 7FAB 00           XX18ysg                 DB  0               ;	77		XX18+2 ysgn
 136+ 7FAC 00           XX18zlo                 DB  0               ;	78		XX18   zlo
 137+ 7FAD 00           XX18zhi                 DB  0               ;	79		XX18+1 zhi
 138+ 7FAE 00           XX18zsg                 DB  0               ;	7A		XX18+2 zsgn
 139+ 7FAF
 140+ 7FAF 28           SHIPMAXSPEED            DB  40              ; variable to facilitate ship editing later
 141+ 7FB0 00           DELTA					DB 	0				; 7D 		DELTA  \ bpl -2 inserted here to stall from title code if byte check fails
 142+ 7FB1 00           DELT4Lo					DB 	0				; 7E
 143+ 7FB2 00           DELT4Hi					DB 	0				; 7F
 144+ 7FB3              DELTA4                  equ                 DELT4Lo
 145+ 7FB3
 146+ 7FB3              ; SoundFX Variables -------------------------------------------------------------------------------------------
 147+ 7FB3              ;DEFUNCT, uses DELTA/ LAST_DELTAEngineSoundChanged:     DB  0
 148+ 7FB3 FF           SoundFxToEnqueue        DB  $FF             ; $FF No sound to enque,if it is $FF then next sound will not get enqued
 149+ 7FB4 00           InterruptCounter        DB 0                ; simple marker updated once per IM2 event
 150+ 7FB5
 151+ 7FB5
 152+ 7FB5              ; Not thise must be in this order else 16 bit fetches will fail
 153+ 7FB5 00           varU                    DB  0               ;   80
 154+ 7FB6 00           varQ					DB  0 				;	81
 155+ 7FB7 00           varR					DB  0 				;	82
 156+ 7FB8 00           varS					DB  0 				;	83
 157+ 7FB9              varRS                   equ varR
 158+ 7FB9
 159+ 7FB9 00 00        varU16                  DW  0               ; 16 bit variant on varU as I can't use above for this
 160+ 7FBB
 161+ 7FBB 00           XSAV					DB	0				; 84	   XSAV usef for nearby ship count outer
 162+ 7FBC 00           YSAV                    DB  0               ; 85
 163+ 7FBD 00           XX17					DB	0				; 86
 164+ 7FBE              RequiredScale			equ  XX17			; use to hold calculated scale in drawing ship
 165+ 7FBE              varXX17                 equ  XX17
 166+ 7FBE 00           ScreenChanged           DB  0
 167+ 7FBF 00           ScreenIndex             DB  0
 168+ 7FC0 00 00        ScreenIndexTablePointer DW  0
 169+ 7FC2 00           InvertedYAxis           DB  0
 170+ 7FC3 00           MenuIdMax				DB	0				;	87		MenuIdMax		QQ11
 171+ 7FC4              											; Bit 7 Set  ShortRangeChart    $80
 172+ 7FC4              											; Bit 6 Set  Galactic Chart     $40
 173+ 7FC4              											; Bit 5 Set  Market Place       $20
 174+ 7FC4              											; Bit 4 Set  Status Screen      $10
 175+ 7FC4              											; Bit 3 Set  Display Inventory  $08
 176+ 7FC4                                                          ; Bit 2 Set  Planet Data        $04
 177+ 7FC4                                                          ; View bit combinations if the ones above not matched
 178+ 7FC4                                                          ; bits 1 0
 179+ 7FC4                                                          ;      1 1  Front view , i.e. $03
 180+ 7FC4                                                          ;      1 0  Aft View          $02
 181+ 7FC4                                                          ;      0 1  Left View         $01
 182+ 7FC4                                                          ;      0 0  Right view        $00
 183+ 7FC4              											; Bit 0 Set  Data On System
 184+ 7FC4              											; 0  Space View (Not a menu)
 185+ 7FC4 00           ZZDust					DB	0				;	88		ZZDust (Poss 16 bit need to check)
 186+ 7FC5 00           XX13                    DB  0               ;   89
 187+ 7FC6 00           TYPE					DB	0				; 8C used for ship type in drawing
 188+ 7FC7              ;Docked flag = 00 = in free space
 189+ 7FC7              ;              FF = Docked
 190+ 7FC7              ;              FE = transition
 191+ 7FC7              ;              FD = Setup open space and transition to not docked
 192+ 7FC7              ;              FC = Hyperspace manimation
 193+ 7FC7              ;              FB = Hyperspace complete
 194+ 7FC7 00           varSWAP                 DB  0               ; 90 , general purpose swap variable
 195+ 7FC8 00           varCNT                  DB  0               ; 93
 196+ 7FC9
 197+ 7FC9 00           varK					DB	0				; 40
 198+ 7FCA 00           varKp1					DB	0				; 41
 199+ 7FCB 00           varKp2					DB	0				; 42
 200+ 7FCC 00           varKp3					DB	0				; 43
 201+ 7FCD
 202+ 7FCD 00           varK2                   DB  0               ; 9B
 203+ 7FCE 00           varK2p1                 DB  0               ; 9C K2 plus 1
 204+ 7FCF 00           varK2p2                 DB  0               ; 9D K2 plus 2
 205+ 7FD0 00           varK2p3                 DB  0               ; 9E K2 plus 3
 206+ 7FD1
 207+ 7FD1 00           Point                   DB  0               ; 9F      POINT
 208+ 7FD2
 209+ 7FD2 00           varT					DB	0				; D1
 210+ 7FD3 00           varTSign                DB  0               ; for teh odd need for a 16 bit varT
 211+ 7FD4
 212+ 7FD4 00 00 00...  varVector9ByteWork      DS  9
 213+ 7FDD
 214+ 7FDD 00 00 00 00  varK3					DS	4				; D2
 215+ 7FE1 00           varK3p2					DB	0				; 42
 216+ 7FE2 00           varK3p3					DB	0				; 43
 217+ 7FE3              varK3p1					equ varK3+1			; D3
 218+ 7FE3 00 00 00 00  varK4					DS	4				; E0
 219+ 7FE7              varK4p1					equ varK4+1			; D3
 220+ 7FE7 00 00 00...  varK5                   DS  6
 221+ 7FED              varK5p2                 equ varK5+2
 222+ 7FED 00 00 00...  varK6                   DS  6
 223+ 7FF3              varK6p2                 equ varK6+2
 224+ 7FF3              ;Heap
 225+ 7FF3
 226+ 7FF3 00 00        HeapStart				DS	2				; &0100 XX3 50 bytes for now
 227+ 7FF5 00 00 00...  HeapData				DS	50
 228+ 8027              ; Contains 				X 16 bit, Y ;MissileArmedStatus		DB	0				; 0344 MSAR   using MissileTarget, if missile is not armed tehn target is FF
 229+ 8027              ; TODO will need an read for a list of missiles, who they are targeting an the target current vector for AI persuit
 230+ 8027              ; i.e. a list of programmed missiles in universe slot list code
 231+ 8027 00 00 00...  DampingKeys				DS  7				; 0387 - 038D
 232+ 802E              ;  #&6 Does K toggle keyboard/joystick control -  03CD certainly makes keyboard not work anymore.
 233+ 802E              ;  #&5 Does J reverse both joystick channels
 234+ 802E              ;  #&4 Does Y reverse joystick Y channel			03CB
 235+ 802E              ;  #&2 Does X toggle startup message display ? PATG?	03C9
 236+ 802E              ;  #&3 Does F toggle flashing information			03CA
 237+ 802E              ;  #&1 Does A toggle keyboard auto-recentering ?
 238+ 802E              ;  #&0 Caps-lock toggles keyboard flight damping
 239+ 802E
 240+ 802E              ;-- Galaxy and Universe Variables ----------------------------------------------------------------------------------------------------
 241+ 802E 00 00 00...  SystemSeed				DS  5				;	6C		QQ15	Current Galaxy Seed
 242+ 8033 00 00 00...  StockAvaliabiliy		DS 	16				; 038D - 039C Stock inventory in station
 243+ 8043 00           AlienItemsAvaliability  DB	0				; 039D
 244+ 8044 00           RandomMarketSeed		DB	0				; 039E   \ QQ26	\ random byte for each system vist (for market)
 245+ 8045 00           Galaxy      			DB	0				; 0367 Galaxy (incremented with galactiv drive
 246+ 8046 00 00 00...  WorkingSeeds			DS	6
 247+ 804C 00 00 00...  PresentSystemSeeds		DS	6				; 03B2 - 03B7
 248+ 8052 00 00 00...  GalaxySeeds				DS	6				; 035B - 0360 QQ21
 249+ 8058 00           PresentSystemX			DB	0				; System we are currently in
 250+ 8059 00           PresentSystemY			DB  0				; System we are currently in
 251+ 805A 00           TargetSystemX			DB	0				; System we are targeting for jump
 252+ 805B 00           TargetSystemY			DB	0				; System we are targeting for jump
 253+ 805C              ; --- Current System Data ------------------------------------------------------------------------------------------------------------
 254+ 805C 00           GovPresentSystem		DB	0				; 03AE Govenment
 255+ 805D 00           TekPresentSystem		DB	0				; 03AF Technology
 256+ 805E 00           SpaceStationSafeZone    DB  0               ; Flag to determine if we are in safe zone
 257+ 805F 00           ExtraVesselsCounter     DB  0
 258+ 8060 00           JunkCount				DB  0				; $033E
 259+ 8061 00           AsteroidCount           DB  0               ; Not used as yet
 260+ 8062 00           TransporterCount        DB  0
 261+ 8063 00           CopCount                DB  0
 262+ 8064 00           PirateCount             DB  0
 263+ 8065              ;- commander and ship state variables ------------------------------------------------------------------------------------------------
 264+ 8065 00           NbrMissiles				DB	0				; 038B	Does this clash with Dampingkeys?
 265+ 8066 00           PlayerECMActiveCount    DB  0               ; Countdown for player ECM
 266+ 8067 00           FugitiveInnocentStatus	DB	0				; 038C	FIST
 267+ 8068 00 00        KillTally  				DW	0				; 039F - 03A0 \ TALLY   \ kills lo hi
 268+ 806A 00           CurrentRank             DB  0   			;
 269+ 806B 00           MarketPrice				DB	0				; 03AA QQ24
 270+ 806C 00           MaxStockAvaliable		DB  0				; 03AB   \ QQ25     \ max available
 271+ 806D 00           SystemEconomy			DB  0				; 03AC \ QQ28   \ the economy byte of present system (0 is Rich Ind.)
 272+ 806E 00           CargoItem				DB	0				; 03AD (I think its item type just scooped) QQ29
 273+ 806F 00 00        ShipLineStackPointer	DW	0				; 03B0 & 03B1 ship Lines pointer reset to top LS% = &0CFF (make DW for z80 and direct hl pointer)
 274+ 8071              											; this is ship lines stack pointer so may be redundant with paging
 275+ 8071              											; LS = line stack so we will have one for now to remove later
 276+ 8071              ; - no longer used, holding here intil its safe to delte
 277+ 8071 00           MCH						DB	0				; 03A4  \ MCH  \ old message to erase
 278+ 8072 00           COMP     				DB	0				; 03A1 2nd competion byte used for save integrity checks?
 279+ 8073              ; not needed as we don't do security on file COK						DB	0				; 0366 Competition Byte what ? Does some file check and accelleration check
 280+ 8073              ; - no longer used, holding here intil its safe to delte
 281+ 8073
 282+ 8073 00           DisplayEcononmy			DB	0				; 03B8
 283+ 8074 00           DisplayGovernment		DB  0				; 03B9 Is it target? 03B9 \ QQ4	 \ Government, 0 is Anarchy.
 284+ 8075 00           DisplayTekLevel			DB	0				; 03BA   \ QQ5	\ Tech
 285+ 8076 00 00        DisplayPopulation		DW	0				; 03BB \ QQ6  \ population*10
 286+ 8078 00 00        DisplayProductivity		DW	0				; 03BD \ QQ7   \ productivity*10
 287+ 807A 00 00        Distance          		DW	0				; 03BE \ QQ8 distince in 0.1LY units
 288+ 807C 00 00        DisplayRadius			DW	0
 289+ 807E              ; --- Used in creation of sun and planet and working out ship AI for travel direction ---------------------------------------------------
 290+ 807E 00 00 00     ParentPlanetX           DS  3               ; used when spawining space station to determine origin
 291+ 8081 00 00 00     ParentPlanetY           DS  3               ; provisioned for 24 bit values
 292+ 8084 00 00 00     ParentPlanetZ           DS  3               ; probably later on make station position an equate to planet
 293+ 8087 00 00 00     PlanetXPos              DS  3               ; .
 294+ 808A 00 00 00     PlanetYPos              DS  3               ; .
 295+ 808D 00 00 00     PlanetZPos              DS  3               ; .
 296+ 8090 00 00 00     PlanetType              DS  3               ; .
 297+ 8093 00 00 00     SunXPos                 DS  3               ; .
 298+ 8096 00 00 00     SunYPos                 DS  3               ; .
 299+ 8099 00 00 00     SunZPos                 DS  3               ; .
 300+ 809C 00 00 00     StationXPos             DS  3               ; .
 301+ 809F 00 00 00     StationYPos             DS  3               ; .
 302+ 80A2 00 00 00     StationZPos             DS  3               ; .
 303+ 80A5 00 00        DirectionVectorX        DS  2               ; Direction vector from one point to another
 304+ 80A7 00 00        DirectionVectorY        DS  2               ; .
 305+ 80A9 00 00        DirectionVectorZ        DS  2               ; .
 306+ 80AB              ; -- Current Missile Runbtime data ------------------------------------------------------------------------------------------------
 307+ 80AB 00           CurrentMissileBank:     DB      0                                   ; used by missile logic as local copy of missile bank number
 308+ 80AC 00 00        MissileXPos             DW      0
 309+ 80AE 00           MissileXSgn             DB      0
 310+ 80AF 00 00        MissileYPos             DW      0
 311+ 80B1 00           MissileYSgn             DB      0
 312+ 80B2 00 00        MissileZPos             DW      0
 313+ 80B4 00           MissileZSgn             DB      0
 314+ 80B5 00 00        CurrentTargetXpos       DS      2
 315+ 80B7 00 00        CurrentTargetXsgn       DS      2
 316+ 80B9 00 00        CurrentTargetYpos       DS      2
 317+ 80BB 00 00        CurrentTargetYsgn       DS      2
 318+ 80BD 00 00        CurrentTargetZpos       DS      2
 319+ 80BF 00 00        CurrentTargetZsgn       DS      2
 320+ 80C1 00 00        TargetVectorXpos        DS      2
 321+ 80C3 00           TargetVectorXsgn        DS      1
 322+ 80C4 00 00        TargetVectorYpos        DS      2
 323+ 80C6 00 00        TargetVectorYsgn        DS      2
 324+ 80C8 00 00        TargetVectorZpos        DS      2
 325+ 80CA 00 00        TargetVectorZsgn        DS      2
 326+ 80CC 00           CurrentMissileBlastRange:      DB  0                       ; TODO Initi for runtime copied in when setting up a missile
 327+ 80CD 00           CurrentMissileBlastDamage:     DB  0                       ; TODO Initi for runtime copied in when setting up a missile
 328+ 80CE 00           CurrentMissileDetonateRange:   DB  0                       ; TODO Initi for runtime copied in when setting up a missile, allows for proximity missiles
 329+ 80CF 00           CurrentMissileDetonateDamage:  DB  0                       ; TODO Initi for runtime copied in when setting up a missile
 330+ 80D0              ; --- Spawn Probability Table ---------------------------------------------------------------------------------------------------
 331+ 80D0 00 00 00...  SpawnLowVssalue         DS 6                                ; Maxium of 6 entries in table
 332+ 80D6 00 00 00...  SpawnHighvalue          DS 6                                ; Maxium of 6 entries in table
 333+ 80DC 00 00 00...  ShipClassId             DS 6
 334+ 80E2              ; --- Space dust ----------------------------------------------------------------------------------------------------------------
 335+ 80E2 00 00 00...  varDustWarpRender       DS MaxNumberOfStars * 2 ; Copy of base positions for warp
 336+ 80F8 00 00 00...  varDust                 DS MaxNumberOfStars * 6
 337+ 813A 00 00 00...  varDustSceen            DS MaxNumberOfStars * 2 ; To optimise star list to wipe from screen
 338+ 8150 00           varStarX                DB 0
 339+ 8151 00           varStarY                DB 0
 340+ 8152 00 00 00...  varDustX                DS MaxNumberOfStars *2
 341+ 8168 00 00 00...  varDustY                DS MaxNumberOfStars *2
 342+ 817E 00 00 00...  varDustZ                DS MaxNumberOfStars *2
 343+ 8194              ; --- Main Loop Data -------------------------------------------------------------------------------------------------------------
 344+ 8194 00           DockedFlag				DB	0				; 8E -
 345+ 8195 00           GamePaused              DB  0
 346+ 8196 00           CurrentUniverseAI       DB  0               ; current ship unviverse slot due an AI update
 347+ 8197 00           SelectedUniverseSlot    DB  0
 348+ 8198 00           SetStationHostileFlag   DB  0               ; used to semaphore angry space station
 349+ 8199 00           ShipBlastCheckCounter   DB  0
 350+ 819A 00           InnerHyperCount			DB 	0				; 2F QQ22+1 (will move to a CTC timer later)
 351+ 819B 00           OuterHyperCount			DB 	0				; 2E QQ22
 352+ 819C 00           WarpCooldown            DB  0
 353+ 819D 00           EventCounter            DB  0
 354+ 819E 00           HyperCircle             DB  0
 355+ 819F 00           MissJumpFlag            DB  0
 356+ 81A0 00           PlayerMisJump			DB	0				; $0341 witchspace misjump
 357+ 81A1 00           HyperSpaceFX			DB	0				; 0348 HFX (probabyl BBC specific
 358+ 81A2 00           ExtraVessels			DB	0				; 0349 EV Use d by cops, extra vessels still to spawn?
 359+ 81A3 00           Delay					DB	0				; 034A Delay general purpose eg. spawing EV or when printign messages
 360+ 81A4 00           CurrentMissileCheck:    DB  0               ; if > Universe Slot list then free for next missile
 361+ 81A5 00           MessageForDestroyed		DB	0				; 034B Message flag for item + destroyed
 362+ 81A6              UniverseSlotListSize    equ	12
 363+ 81A6 00 00 00...  UniverseSlotList        DS  UniverseSlotListSize
 364+ 81B2 00 00 00...  UniverseSlotType        DS  UniverseSlotListSize ; base type, e.g. missile, cargo etc,
 365+ 81BE              ; Probably not needed UniverseTypeCount       DS  UniverseSlotListSize
 366+ 81BE 05           ConsoleRefreshCounter   DB  ConsoleRefreshInterval ; Every 4 interations the console will update twice (once for primary and once for seconday buffer)
 367+ 81BF 00           ConsoleRedrawFlag       DB  0
 368+ 81C0 00           TextInputMode           DB  0
 369+ 81C1 00           CursorKeysPressed       DB  0               ; mapping of the current key presses
 370+ 81C2                                                          ; 7    6    5    4     3    2        1    0
 371+ 81C2                                                          ; Up   Down Left Right Home Recentre
 372+ 81C2 00           FireLaserPressed        DB  0
 373+ 81C3 00           WarpPressed             DB  0
 374+ 81C4 00           CompassColor			DB	0				; 03C5
 375+ 81C5 00           SoundToggle				DB	0				; 03C6
 376+ 81C6 00           KeyboardRecenterToggle	DB	0				; 03C8
 377+ 81C7 00           PATGMask				DB	0				; &03C9    \ PATG	\ Mask to scan keyboard X-key, for misjump
 378+ 81C8 00           FlashToggle				DB  0				; 03CA \ FLH \ flash toggle
 379+ 81C9 00           ReverseJoystick			DB	0				; 03CB \ JSTGY \ Y reverse joystick Y channel
 380+ 81CA 00           JoystickToggle			DB	0				; 03CD  \ JSTK    \ K toggle keyboard/joystick
 381+ 81CB 00           DigitalJoystick			DB	0				; 03CE \ JDB   \ . = toggle between keyboard and bitpaddle
 382+ 81CC 00           DiskReadFailFlag		DB	0				; 03CF \ CATF \ Disk catalog fail flag
 383+ 81CD
 384+ 81CD              ; Working Data
 385+ 81CD
 386+ 81CD              ;UniverseTable			DS	26				; 1741  \ address pointers for 13 ships INF on pages &9. 37 bytes each.
 387+ 81CD              ; $0900 =	EQUW page9+37* 0 \ copied to inner worskpace INWK on zero-page when needed
 388+ 81CD              ; $0925 =	EQUW page9+37* 1
 389+ 81CD              ; $094A =	EQUW page9+37* 2
 390+ 81CD              ; $096F =	EQUW page9+37* 3
 391+ 81CD              ; $0994 =	EQUW page9+37* 4
 392+ 81CD              ; $09B9 =	EQUW page9+37* 5
 393+ 81CD              ; $09DE =	EQUW page9+37* 6
 394+ 81CD              ; $0A03 =	EQUW page9+37* 7
 395+ 81CD              ; $0A28 =	EQUW page9+37* 8
 396+ 81CD              ; $0A4D =	EQUW page9+37* 9
 397+ 81CD              ; $0A72 =	EQUW page9+37*10
 398+ 81CD              ; $0A97 =	EQUW page9+37*11
 399+ 81CD              ; $0ABC =	EQUW page9+37*12 \ allwk up to &0ABC while heap for edges working down from &CFF.
 400+ 81CD
 401+ 81CD
 402+ 81CD
 403+ 81CD              ; 0b00 is start address of data to save
 404+ 81CD              ; Now MissionData VarTP					DB	0				; 0358 TP? The Plan  \ mission uses lower 4 bits
 405+ 81CD              											; Bit mask XXXX10XX - Thargoid plan mission
 406+ 81CD
 407+ 81CD 00           MissionData				DB	0				; &0B00	  \ look at data, first byte is TP mission bits
 408+ 81CE
 409+ 81CE 00 00        FileNameStringPointer	DW	0				;0C00	   \ pointer to filename string
 410+ 81D0 00 00        CommanderLoadAddress	DW	0				;0C03
 411+ 81D2 00 00        LengthOfFile			DW	0				;0C0B
 412+ 81D4 00 00        SaveDataEndAddress		DW	0				;&0C0F	      \ &0C00 is end address of data to save
 413+ 81D6
 414+ 81D6 00 00 00...  EdgesBuffer				DS 50
 415+ 8208              EdgesBufferSP			equ	$				; Was $0CFF			; Heap pointer for edges buffer
 416+ 8208              ShipLinesBufferSP		equ EdgesBufferSP	; was $0CFF
 417+ 8208
 418+ 8208 00 00 00...  ShipLineStack			DS  70			; For now but will be in the page later
 419+ 824E              ShipLineStackTop		equ $ - ShipLineStack
 420+ 824E
 421+ 824E              ; No longer needed
 422+ 824E              ;LSO						DS 	$C0				;0E00 Line Buffer Solar of 192 lines (may be 191 in reality)
 423+ 824E              ; LSX vector overlaps with LSO
 424+ 824E              ;LSX2					DS	$C0				; &0EC0	    \ LSX2 bline buffer size?
 425+ 824E              ;LSY2					DS  $C)	           	; &0F0E	    \ LSY2
 426+ 824E
 427+ 824E              ; -- Player Runtime Data
 428+ 824E 00           GunTemperature          DB  0
 429+ 824F 00           CabinTemperature        DB  0
 430+ 8250 00           PlayerForwardSheild0	DB	0 ; ?????
 431+ 8251 00           PlayerForwardSheild1    DB	0
 432+ 8252 00           PlayerForwardSheild2    DB	0
 433+ 8253 00           ForeShield				DB	0				; These three must be contiguous
 434+ 8254 00           AftShield				DB	0				; .
 435+ 8255 00           PlayerEnergy			DB	0				; and in this order
 436+ 8256 00           CompassX				DB	0				; 03A8
 437+ 8257 00           CompassY				DB	0				; 03A9
 438+ 8258              ; Simplification of missile targetting
 439+ 8258              ; $FF no missile targettting enabled
 440+ 8258              ; $FE missile targetting, no target selected
 441+ 8258              ; bit 7 set then tagetting and lower nibble holds missile target and launching
 442+ 8258              ; bit 7 clear launch at selected target in lower nibble
 443+ 8258 00           MissileTargettingFlag   DB  0
 444+ 8259              ;;MissileTarget			DB  0				; 45
 445+ 8259              ;;MissileLaunchFlag       DB  0
 446+ 8259 00 00 00...  CommanderName           DS  15
 447+ 8268 00           CommanderName0			DB	0				; Sneaky little 0 to allow use of print name directly
 448+ 8269 00           BadnessStatus           DB  0
 449+ 826A              ;note rapidly changing views could reset these so need to consider it in an array
 450+ 826A              ; LaserType
 451+ 826A              ; LaserPulseRate                          ; how many pulses can be fired before long pause
 452+ 826A              ; LaserPulsePause                         ; time before next pulse - 0 = beam
 453+ 826A              ; LaserPulseRest                          ; time before pulse count resets to 0
 454+ 826A              ; LaserDamageOutput                       ; amount of damage for a laser hit
 455+ 826A              ; LaserEnergyDrain                        ; amount of energy drained by cycle
 456+ 826A              ; LaserHeat                               ; amount of heat generated
 457+ 826A              ; LaserDurability                         ; probabability out of 255 that a hit on unshielded will add random amount of damage
 458+ 826A              ; LaserDurabilityAmount                   ; max amount of damagage can be sustained in one damage hit
 459+ 826A              ; LaserInMarkets                          ; can this laser be purchased 0 = yes 1 = no
 460+ 826A              ; LaserTechLevel                          ; minimum tech level system to buy from
 461+ 826A              ; need to add copy table routines
 462+ 826A 00           CurrLaserType           DB  0               ; current view laser type, copied in from LaserType array
 463+ 826B 00           CurrLaserDamage         DB  0               ; copied in from LaserDamagedFlag array
 464+ 826C 00           CurrLaserPulseRate      DB  0               ; current view laser amount of pulses
 465+ 826D 00           CurrLaserPulseOnTime    DB  0               ; how many cycles the laser is on
 466+ 826E 00           CurrLaserPulseOffTime   DB  0               ; how many cycles the laser is on
 467+ 826F 00           CurrLaserPulseRest      DB  0               ; current view laser delay setup between pulses
 468+ 8270
 469+ 8270                  IFDEF LASER_V2
 470+ 8270 00           LaserBeamOn             DB  0
 471+ 8271 00           CurrLaserDuration       DB  0   ; == CurrLaserPulseOnTime
 472+ 8272 00           CurrentBurstPause       DB  0   ; == CurrLaserPulseOffTime
 473+ 8273 00           CurrentCooldown         DB  0   ; == CurrLaserPulseRest
 474+ 8274                  ENDIF
 475+ 8274 00           CurrLaserBurstRate      DB  0
 476+ 8275 00           CurrLaserBurstCount     DB  0   ; == LaserPulseRate
 477+ 8276 00           CurrLaserDamageOutput   DB  0
 478+ 8277 00           CurrLaserEnergyDrain    DB  0
 479+ 8278 00           CurrLaserHeat           DB  0
 480+ 8279 00           CurrLaserDurability     DB  0
 481+ 827A 00           CurrLaserDurabilityAmount DB  0
 482+ 827B
 483+ 827B              ; Count down timers must be aligned like this to work
 484+ 827B 00           CurrLaserPulseOnCount   DB  0               ; how many cycles the laser is on timer
 485+ 827C 00           CurrLaserPulseOffCount  DB  0               ; how many cycles the laser is on timer
 486+ 827D 00           CurrLaserPulseRestCount DB  0               ; countdown after shooting for next shot
 487+ 827E 00           CurrLaserPulseRateCount DB  0               ; current view laser current pulses fired
 488+ 827F
 489+ 827F              ; -- Input variables
 490+ 827F 00           JoystickX				DB	0				; 034C JSTX
 491+ 8280 00           JoystickY				DB	0				; 034D JSTY
 492+ 8281 00           XSAV2 					DB	0				; 034E used to temporary save 6502 X reg
 493+ 8282 00           YSAV2 					DB	0				; 034F used to temporary save 6502 Y reg
 494+ 8283
 495+ 8283              ; -- Console drawing data
 496+ 8283              FShieldStart            equ $8410
 497+ 8283              AShieldStart            equ $8D10
 498+ 8283              FuelStart               equ $9410
 499+ 8283
 500+ 8283              EnergyBar4Start         equ $A5D5
 501+ 8283              EnergyBar3Start         equ $ADD5
 502+ 8283              EnergyBar2Start         equ $B5D5
 503+ 8283              EnergyBar1Start         equ $BDD5
 504+ 8283              ; 70 /2 = 35 values
 505+ 8283              ;                            0                             1                             2                             3
 506+ 8283              ;                            0  1  2  3  4  5  6  7  8  9  0  1  2  3  4  5  6  7  8  9  0  1  2  3  4  5  6  7  8  9  0  1  2  3  4  5  6
 507+ 8283 01 02 02 03  FuelMapping             DB  01,02,02,03,04,04,05,06,06,07,08,09,10,10,11,12,13,14,14,15,16,16,17,19,20,21,21,22,23,24,25,26,27,28,30,31,31
 507+ 8287 04 04 05 06
 507+ 828B 06 07 08 09
 507+ 828F 0A 0A 0B 0C
 507+ 8293 0D 0E 0E 0F
 507+ 8297 10 10 11 13
 507+ 829B 14 15 15 16
 507+ 829F 17 18 19 1A
 507+ 82A3 1B 1C 1E 1F
 507+ 82A7 1F
 508+ 82A8              SpeedoStart             equ $84D1
 509+ 82A8              ;                            0                             1                             2                             3                             4
 510+ 82A8              ;                            0  1  2  3  4  5  6  7  8  9  0  1  2  3  4  5  6  7  8  9  0  1  2  3  4  5  6  7  8  9  0  1  2  3  4  5  6  7  8  9  0
 511+ 82A8 01 02 02 03  SpeedoMapping           DB  01,02,02,03,04,04,05,06,06,07,08,09,10,10,11,12,13,14,14,15,16,16,17,18,19,20,20,21,22,23,24,24,25,26,26,27,28,28,29,30,31
 511+ 82AC 04 04 05 06
 511+ 82B0 06 07 08 09
 511+ 82B4 0A 0A 0B 0C
 511+ 82B8 0D 0E 0E 0F
 511+ 82BC 10 10 11 12
 511+ 82C0 13 14 14 15
 511+ 82C4 16 17 18 18
 511+ 82C8 19 1A 1A 1B
 511+ 82CC 1C 1C 1D 1E
 511+ 82D0 1F
 512+ 82D1
 513+ 82D1              DialMiddleXPos          equ $E1
 514+ 82D1              RollMiddle              equ $8CE0
 515+ 82D1              PitchMiddle             equ $94E0
 516+ 82D1
 517+ 82D1
 518+ 82D1
 519+ 82D1
 520+ 82D1
# file closed: ./Variables/general_variables.asm
 564  82D1                  INCLUDE "./Variables/general_variablesRoutines.asm"
# file opened: ./Variables/general_variablesRoutines.asm
   1+ 82D1
   2+ 82D1              ; This will save to current queue position. it also asusmes that we never go beyond queue
   3+ 82D1              ; limit so does not do bounds checking for speed
   4+ 82D1              SaveMMU0:               GetNextReg  MMU_SLOT_0_REGISTER             ; Get current reg value
   4+ 82D1 01 3B 24    >            ld bc,$243B
   4+ 82D4 3E 50       >            ld a,MMU_SLOT_0_REGISTER
   4+ 82D6 ED 79       >            out (c),a
   4+ 82D8 04          >            inc b
   4+ 82D9 ED 78       >            in a,(c)
   5+ 82DB 2A 95 7E                             ld          hl,(SaveMMU0QueueHead)               ; get address of current slot
   6+ 82DE 77                                   ld          (hl),a                          ; and write reg value to this address
   7+ 82DF 21 95 7E                             ld          hl,SaveMMU0QueueHead                ; move address pointer up one
   8+ 82E2 34                                   inc         (hl)
   9+ 82E3 C9                                   ret
  10+ 82E4
  11+ 82E4 21 95 7E     RestoreMMU0:            ld          hl,SaveMMU0QueueHead                ; Currently looking at next free
  12+ 82E7 35                                   dec         (hl)                            ; so step back one
  13+ 82E8 2A 95 7E                             ld          hl,(SaveMMU0QueueHead)              ; save position as next free
  14+ 82EB 7E                                   ld          a,(hl)                          ; get value that was there
  15+ 82EC ED 92 50                             nextreg     MMU_SLOT_0_REGISTER,a           ; and swap MMU bank
  16+ 82EF C9                                   ret
  17+ 82F0
  18+ 82F0              SaveMMU6:               GetNextReg  MMU_SLOT_6_REGISTER             ; Get current reg value
  18+ 82F0 01 3B 24    >            ld bc,$243B
  18+ 82F3 3E 56       >            ld a,MMU_SLOT_6_REGISTER
  18+ 82F5 ED 79       >            out (c),a
  18+ 82F7 04          >            inc b
  18+ 82F8 ED 78       >            in a,(c)
  19+ 82FA 2A 97 7E                             ld          hl,(SaveMMU6QueueHead)              ; get address of current slot
  20+ 82FD 77                                   ld          (hl),a                          ; and write reg value to this address
  21+ 82FE 21 97 7E                             ld          hl,SaveMMU6QueueHead                ; move address pointer up one
  22+ 8301 34                                   inc         (hl)
  23+ 8302 C9                                   ret
  24+ 8303
  25+ 8303 21 97 7E     RestoreMMU6:            ld          hl,SaveMMU6QueueHead            ; Currently address pointer looking at next free
  26+ 8306 35                                   dec         (hl)                            ; so step back one
  27+ 8307 2A 97 7E                             ld          hl,(SaveMMU6QueueHead)              ; save position as next free
  28+ 830A 7E                                   ld          a,(hl)                          ; get value that was there
  29+ 830B ED 92 56                             nextreg     MMU_SLOT_6_REGISTER,a           ; and swap MMU bank
  30+ 830E C9                                   ret
  31+ 830F
  32+ 830F              SaveMMU7:               GetNextReg  MMU_SLOT_7_REGISTER             ; Get current reg value
  32+ 830F 01 3B 24    >            ld bc,$243B
  32+ 8312 3E 57       >            ld a,MMU_SLOT_7_REGISTER
  32+ 8314 ED 79       >            out (c),a
  32+ 8316 04          >            inc b
  32+ 8317 ED 78       >            in a,(c)
  33+ 8319 2A 99 7E                             ld          hl,(SaveMMU7QueueHead)          ; get address of current slot
  34+ 831C 77                                   ld          (hl),a                          ; and write reg value to this address
  35+ 831D 21 99 7E                             ld          hl,SaveMMU7QueueHead            ; move address pointer up one
  36+ 8320 34                                   inc         (hl)
  37+ 8321 C9                                   ret
  38+ 8322
  39+ 8322 21 99 7E     RestoreMMU7:            ld          hl,SaveMMU7QueueHead            ; Currently looking at next free
  40+ 8325 35                                   dec         (hl)                            ; so step back one
  41+ 8326 2A 99 7E                             ld          hl,(SaveMMU7QueueHead)              ; save position as next free
  42+ 8329 7E                                   ld          a,(hl)                          ; get value that was there
  43+ 832A ED 92 57                             nextreg     MMU_SLOT_7_REGISTER,a           ; and swap MMU bank
  44+ 832D C9                                   ret
  45+ 832E
  46+ 832E              LaserDrainSystems:      DrainSystem PlayerEnergy, CurrLaserEnergyDrain
  46+ 832E 3A 77 82    >                        ld      a,(CurrLaserEnergyDrain)
  46+ 8331 47          >                        ld      b,a
  46+ 8332 3A 55 82    >                        ld      a,(PlayerEnergy)
  46+ 8335 90          >                        sub     a,b
  46+ 8336 32 55 82    >                        ld      (PlayerEnergy),a
  46+ 8339 38 03       >                        jr      c,.ZeroSystem
  46+ 833B C3 42 83    >                        jp      .ExitPoint
  46+ 833E             >.ZeroSystem:            ZeroA
  46+ 833E AF          >                        xor a
  46+ 833F 32 55 82    >                        ld      (PlayerEnergy),a
  46+ 8342             >.ExitPoint
  47+ 8342                                      BoostSystem GunTemperature, CurrLaserHeat
  47+ 8342 3A 78 82    >                        ld      a,(CurrLaserHeat)
  47+ 8345 47          >                        ld      b,a
  47+ 8346 3A 4E 82    >                        ld      a,(GunTemperature)
  47+ 8349 80          >                        add     b
  47+ 834A 32 4E 82    >                        ld      (GunTemperature),a
  47+ 834D 38 03       >                        jr      c, .MaxSystem
  47+ 834F C3 57 83    >                        jp      .ExitPoint
  47+ 8352 3E FF       >.MaxSystem:             ld      a,255
  47+ 8354 32 4E 82    >                        ld      (GunTemperature),a
  47+ 8357             >.ExitPoint
  48+ 8357 C9                                   ret
  49+ 8358
  50+ 8358
  51+ 8358              ResetPlayerShip:        ZeroThrottle
  51+ 8358 AF          >                        xor     a
  51+ 8359 32 B0 7F    >                        ld      (DELTA),a
  51+ 835C 32 B1 7F    >                        ld      (DELT4Lo),a
  51+ 835F 32 B2 7F    >                        ld      (DELT4Lo+1),a
  52+ 8362                                      ZeroPitch
  52+ 8362 AF          >                        xor     a
  52+ 8363 32 C5 7E    >                        ld      (BET2),a
  52+ 8366 32 C6 7E    >                        ld      (BET2FLIP),a
  52+ 8369 32 C3 7E    >                        ld      (JSTY),a
  52+ 836C 32 C2 7E    >                        ld      (BETA),a
  53+ 836F                                      ZeroRoll
  53+ 836F AF          >                        xor     a                              ; zero roll and climb
  53+ 8370 32 D1 7E    >                        ld      (ALP2),a
  53+ 8373 32 D2 7E    >                        ld      (ALP2FLIP),a
  53+ 8376 32 CD 7E    >                        ld      (JSTX),a
  53+ 8379 32 CF 7E    >                        ld      (ALPHA),a
  54+ 837C                                      ClearMissileTargetting
  54+ 837C 3E FF       >                        ld      a,StageMissileNotTargeting
  54+ 837E 32 58 82    >                        ld      (MissileTargettingFlag),a
  55+ 8381                                      ClearECM
  55+ 8381 AF          >                        xor     a
  55+ 8382 32 CB 7E    >                        ld      (ECMCountDown),a
  56+ 8385                                      ChargeEnergyAndShields
  56+ 8385 3E FF       >                        ld      a,$FF
  56+ 8387 32 55 82    >                        ld      (PlayerEnergy),a
  56+ 838A 32 53 82    >                        ld      (ForeShield),a
  56+ 838D 32 54 82    >                        ld      (AftShield),a
  57+ 8390                                      ClearTemperatures
  57+ 8390 AF          >                        xor     a
  57+ 8391 32 4F 82    >                        ld      (CabinTemperature),a
  57+ 8394 32 4E 82    >                        ld      (GunTemperature),a
  58+ 8397                                      ClearWarpPressed
  58+ 8397             >                        SetMemFalse WarpPressed
  58+ 8397 3E FF       >                        ld      a,$FF
  58+ 8399 32 C3 81    >                        ld      (WarpPressed),a
  59+ 839C CD EE 83                             call    IsLaserUseable
  60+ 839F                                      SetMemFalse LaserBeamOn
  60+ 839F 3E FF       >                        ld      a,$FF
  60+ 83A1 32 70 82    >                        ld      (LaserBeamOn),a
  61+ 83A4                                      MMUSelectCommander
  61+ 83A4 ED 91 57 38 >                     nextreg CommanderMMU,       BankCommander
  62+ 83A8 CD 0E E3                             call    LoadLaserToCurrent
  63+ 83AB C8                                   ret     z
  64+ 83AC
  65+ 83AC C9                                   ret
  66+ 83AD
  67+ 83AD 21 96 85     AddCargoTypeD:          ld      hl,CargoTonnes
  68+ 83B0 57                                   ld      d,a
  69+ 83B1 ED 31                                add     hl,a
  70+ 83B3 34                                   inc     (hl)
  71+ 83B4 C9                                   ret
  72+ 83B5
  73+ 83B5 7A           CanWeScoopCargoD:       ld      a,d
  74+ 83B6                                      JumpIfAGTENusng  GoldIndex, .ItMayNotBeTonnes  ; if its cargo in kgs or gs then jump
  74+ 83B6 FE 0E       >                        cp     GoldIndex
  74+ 83B8 D2 DA 83    >                        jp		nc,.ItMayNotBeTonnes
  75+ 83BB 21 96 85     .ItsTonnes:             ld      hl,CargoTonnes
  76+ 83BE 0E 00                                ld      c,0
  77+ 83C0 06 0E                                ld      b,MineralsIndex+1           ; Only count to Gold as that is in KG
  78+ 83C2 7E           .AddLoop:               ld      a,(hl)
  79+ 83C3 81                                   add     c
  80+ 83C4 4F                                   ld      c,a                     ; add to counter
  81+ 83C5 05                                   dec     b
  82+ 83C6 23                                   inc     hl
  83+ 83C7 10 F9                                djnz    .AddLoop
  84+ 83C9 21 A7 85                             ld      hl,AlienItemsTonnes     ; Finally do alien items
  85+ 83CC 7E                                   ld      a,(hl)
  86+ 83CD 81                                   add     c
  87+ 83CE 4F                                   ld      c,a
  88+ 83CF 3A 94 85                             ld      a,(CargoBaySize)        ; Get Bay Size
  89+ 83D2                                      JumpIfAEqNusng c, .CargoFull
  89+ 83D2 B9          >                        cp     c
  89+ 83D3 CA D8 83    >                        jp      z,.CargoFull
  90+ 83D6              .StillRoom:             ClearCarryFlag
  90+ 83D6 B7          >                        or a
  91+ 83D7 C9                                   ret
  92+ 83D8              .CargoFull:             SetCarryFlag
  92+ 83D8 37          >                        scf
  93+ 83D9 C9                                   ret
  94+ 83DA              .ItMayNotBeTonnes:      JumpIfAEqNusng  AlienItemsIndex,.ItsTonnes       ;ALienItems are tonnes
  94+ 83DA FE 11       >                        cp     AlienItemsIndex
  94+ 83DC CA BB 83    >                        jp      z,.ItsTonnes
  95+ 83DF 21 96 85                             ld      hl,CargoTonnes
  96+ 83E2 7A                                   ld      a,d
  97+ 83E3 ED 31                                add     hl,a
  98+ 83E5 7E                                   ld      a,(hl)
  99+ 83E6                                      JumpIfAEqNusng  200, .StillRoom
  99+ 83E6 FE C8       >                        cp     200
  99+ 83E8 CA D6 83    >                        jp      z,.StillRoom
 100+ 83EB C3 D8 83                             jp      .CargoFull
 101+ 83EE              ; END of rountine
 102+ 83EE
 103+ 83EE 3A 6A 82     IsLaserUseable:         ld      a,(CurrLaserType)
 104+ 83F1 FE FF                                cp      255
 105+ 83F3 C8                                   ret     z
 106+ 83F4 3A 6B 82                             ld      a,(CurrLaserDamage)
 107+ 83F7 FE FF                                cp      255
 108+ 83F9 C9                                   ret
 109+ 83FA
 110+ 83FA CD C0 84     InitMainLoop:           call    ClearUnivSlotList
 111+ 83FD AF                                   xor     a
 112+ 83FE 32 96 81                             ld      (CurrentUniverseAI),a
 113+ 8401 3E 03                                ld      a,3
 114+ 8403 32 C3 7F                             ld      (MenuIdMax),a
 115+ 8406                                      SetMemFalse SetStationHostileFlag
 115+ 8406 3E FF       >                        ld      a,$FF
 115+ 8408 32 98 81    >                        ld      (SetStationHostileFlag),a
 116+ 840B                                      SetMemFalse DockedFlag
 116+ 840B 3E FF       >                        ld      a,$FF
 116+ 840D 32 94 81    >                        ld      (DockedFlag),a
 117+ 8410              ;                        call    InitialiseFrontView
 118+ 8410 CD 9A 6A                             call    InitialiseCommander
 119+ 8413                                      MMUSelectUniverseN 2
 119+ 8413 ED 91 56 48 >                     nextreg UniverseMMU,       BankUNIVDATA0+2
 120+ 8417 CD 9E 6B                             call    SetInitialShipPosition
 121+ 841A              ; Initialist screen refresh
 122+ 841A 3E 05                                ld      a, ConsoleRefreshInterval
 123+ 841C 32 BE 81                             ld      (ConsoleRefreshCounter),a
 124+ 841F                                      SetMemFalse    ConsoleRedrawFlag
 124+ 841F 3E FF       >                        ld      a,$FF
 124+ 8421 32 BF 81    >                        ld      (ConsoleRedrawFlag),a
 125+ 8424                                      MMUSelectStockTable
 125+ 8424 ED 91 57 37 >                     nextreg StockTableMMU,     BankStockTable
 126+ 8428 CD AA E0                             call    generate_stock_market
 127+ 842B CD B4 75                             call    ResetMessageQueue
 128+ 842E                                      InitEventCounter
 128+ 842E AF          >                        xor     a
 128+ 842F 32 9D 81    >                        ld      (EventCounter),a
 129+ 8432                                      ClearMissJump
 129+ 8432 3E FF       >                        ld      a,$FF
 129+ 8434 32 9F 81    >                        ld      (MissJumpFlag),a
 130+ 8437                                      SetMemFalse TextInputMode
 130+ 8437 3E FF       >                        ld      a,$FF
 130+ 8439 32 C0 81    >                        ld      (TextInputMode),a
 131+ 843C C9                                   ret
 132+ 843D
 133+ 843D              ; needs to be called after a kill too
 134+ 843D 2A 68 80     SetPlayerRank:          ld      hl,(KillTally)
 135+ 8440 DD 21 82 88                          ld      ix,RankingTableLow
 136+ 8444 06 00                                ld      b,0
 137+ 8446 DD 56 01     .CompareLoop:           ld      d,(ix+1)
 138+ 8449 DD 5E 00                             ld      e,(ix+0)
 139+ 844C A7                                   and     a             ; compare HL to DE
 140+ 844D ED 52                                sbc     hl,de         ; we can throw away HL now
 141+ 844F 28 09                                jr      z,.FoundRank
 142+ 8451 38 07                                jr      c,.FoundRank
 143+ 8453 DD 23                                inc     ix
 144+ 8455 DD 23                                inc     ix
 145+ 8457 04                                   inc     b
 146+ 8458 18 EC                                jr      .CompareLoop
 147+ 845A 78           .FoundRank:             ld      a,b
 148+ 845B 32 6A 80                             ld      (CurrentRank),a
 149+ 845E C9                                   ret
 150+ 845F
 151+ 845F 3E 00        SetSpeedZero:           ld      a,0
 152+ 8461 32 B0 7F                             ld      (DELTA),a                                       ;
 153+ 8464 67                                   ld      h,a                                             ;
 154+ 8465 6F                                   ld      l,a                                             ;
 155+ 8466 22 B1 7F                             ld      (DELT4Lo),hl                                    ;
 156+ 8469 C9                                   ret
 157+ 846A
 158+ 846A 21 55 82     RechargeShip:           ld      hl,PlayerEnergy                                 ; if enery >= 128
 159+ 846D 7E                                   ld      a,(hl)
 160+ 846E CB 7F                                bit     7,a                                             ; then we can recharge shields
 161+ 8470 28 0D                                jr      z,.UpdatePlayerEnergy
 162+ 8472 21 53 82     .ShieldCharge:          ld      hl,ForeShield                                   ; charge front shield
 163+ 8475 34                                   inc     (hl)
 164+ 8476 20 01                                jr      nz,.DoneForeShield
 165+ 8478 35           .ForeOverCharge:        dec     (hl)
 166+ 8479 23           .DoneForeShield:        inc     hl                                              ; point to aft shield
 167+ 847A 34                                   inc     (hl)
 168+ 847B 20 01                                jr      nz,.DoneAftShield
 169+ 847D 35                                   dec     (hl)                                            ; back to 255
 170+ 847E 23           .DoneAftShield:         inc     hl                                              ; point to energy
 171+ 847F 34           .UpdatePlayerEnergy:    inc     (hl)
 172+ 8480 28 0A                                jr      z,.OverflowedEnergy
 173+ 8482 3A B5 85                             ld      a,(ExtraEnergyUnit)
 174+ 8485                                      ReturnIfANENusng EquipmentItemFitted                    ; if energy unit fitted an extra step
 174+ 8485 FE FF       >                        cp      EquipmentItemFitted
 174+ 8487 C0          >                        ret     nz
 175+ 8488 34           .EnergyUnitFitted:      inc     (hl)
 176+ 8489 28 01                                jr      z,.OverflowedEnergy
 177+ 848B C9                                   ret
 178+ 848C 35           .OverflowedEnergy:      dec     (hl)                                            ;  restore to 255
 179+ 848D C9                                   ret
 180+ 848E 21 55 82     .SkipShieldCharge:      ld      hl,PlayerEnergy
 181+ 8491 18 EC                                jr      .UpdatePlayerEnergy
 182+ 8493
 183+ 8493              ; sets carry to true if target
 184+ 8493 3A 58 82     IsMissileLockedOn:      ld      a,(MissileTargettingFlag)
 185+ 8496 CB 7F                                bit     7,a
 186+ 8498 28 07                                jr      z, .TargetSelected
 187+ 849A E6 70                                and     $70                         ; are all upper bits set (we can ignore bit 7)
 188+ 849C CA A1 84                             jp      z, .TargetSelected           ; if its only bit 7 then we have a lock
 189+ 849F                                      ClearCarryFlag                      ; if bitsd 6 to 4 were set then it must be unlocked status
 189+ 849F B7          >                        or a
 190+ 84A0 C9                                   ret
 191+ 84A1              .TargetSelected:        JumpIfSlotAEmpty .TargetInvalid     ; does slot A have an target
 191+ 84A1 21 A6 81    >                        ld      hl,UniverseSlotList
 191+ 84A4 ED 31       >                        add     hl,a
 191+ 84A6 7E          >                        ld      a,(hl)
 191+ 84A7 3C          >                        inc     a
 191+ 84A8 CA AE 84    >                        jp      z,.TargetInvalid    ; if slot was ff inc would make it 0
 191+ 84AB 3D          >                        dec     a           ; get original value back for later
 192+ 84AC                                      SetCarryFlag
 192+ 84AC 37          >                        scf
 193+ 84AD C9                                   ret
 194+ 84AE 3E FF        .TargetInvalid:         ld      a, StageMissileNotTargeting     ; housekeep missile status if target gone
 195+ 84B0 32 58 82                             ld      (MissileTargettingFlag),a
 196+ 84B3 C9                                   ret
 197+ 84B4
# file closed: ./Variables/general_variablesRoutines.asm
 565  84B4                  INCLUDE "./Variables/UniverseSlotRoutines.asm"
# file opened: ./Variables/UniverseSlotRoutines.asm
   1+ 84B4              ; Note this code is core code and can not be in a memory bank unless do explosion code is changed too
   2+ 84B4 AF           ClearSlotCount:         xor     a
   3+ 84B5 21 A6 81                             ld      hl,UniverseSlotList
   4+ 84B8 06 0C                                ld      b, UniverseSlotListSize ; prbably not needed + UniverseSlotTypeSize
   5+ 84BA 77           .fillLoop:              ld      (hl),a
   6+ 84BB 23                                   inc     hl
   7+ 84BC 10 FC                                djnz    .fillLoop
   8+ 84BE C9                                   ret
   9+ 84BF
  10+ 84BF              ; Initialises all types to a count of 1 where there is an occupied universe slot
  11+ 84BF              ; this needs expanding to cater for a missing type, find type and increment count (use cpir?)
  12+ 84BF              ; DOE NOT WORK CorrectSlotCount:       call    ClearSlotCount
  13+ 84BF              ; DOE NOT WORK                         ld      hl,UniverseSlotCount
  14+ 84BF              ; DOE NOT WORK                         ld      de,UniverseSlotList
  15+ 84BF              ; DOE NOT WORK                         ld      b,UniverseSlotListSize
  16+ 84BF              ; DOE NOT WORK .fillLoop:              ld      a,(de)
  17+ 84BF              ; DOE NOT WORK                         cp      $FF
  18+ 84BF              ; DOE NOT WORK                         jr      z,.SkipSlot
  19+ 84BF              ; DOE NOT WORK .CorrectSlot:           ld      (hl),a
  20+ 84BF              ; DOE NOT WORK                         inc     hl
  21+ 84BF              ; DOE NOT WORK                         ld      (hl),1
  22+ 84BF              ; DOE NOT WORK                         inc     hl
  23+ 84BF              ; DOE NOT WORK                         inc     hl
  24+ 84BF              ; DOE NOT WORK .SkipSlot               inc     de
  25+ 84BF              ; DOE NOT WORK                         djnz    .fillLoop
  26+ 84BF C9                                   ret
  27+ 84C0              ; Wipe all items
  28+ 84C0 3E FF        ClearUnivSlotList:      ld      a,$FF
  29+ 84C2 21 A6 81                             ld      hl,UniverseSlotList
  30+ 84C5 06 18                                ld      b, UniverseSlotListSize * 2
  31+ 84C7 77           .fillLoop:              ld      (hl),a
  32+ 84C8 23                                   inc     hl
  33+ 84C9 10 FC                                djnz    .fillLoop
  34+ 84CB C9                                   ret
  35+ 84CC
  36+ 84CC 21 A6 81     SetSlot0ToSpaceStation: ld      hl,UniverseSlotList
  37+ 84CF 36 02                                ld      (hl),ShipTypeStation
  38+ 84D1 21 B2 81                             ld      hl,UniverseSlotType
  39+ 84D4 36 02                                ld      (hl),ShipTypeStation
  40+ 84D6 C9                                   ret
  41+ 84D7
  42+ 84D7 21 A6 81     SetSlotAToTypeB:        ld      hl,UniverseSlotList
  43+ 84DA ED 31                                add     hl,a
  44+ 84DC 70                                   ld      (hl),b
  45+ 84DD C9                                   ret
  46+ 84DE
  47+ 84DE 21 B2 81     SetSlotAToClassB:       ld      hl,UniverseSlotType
  48+ 84E1 ED 31                                add     hl,a
  49+ 84E3 70                                   ld      (hl),b
  50+ 84E4 C9                                   ret
  51+ 84E5
  52+ 84E5              ; Clears all except slot A, used when say restarting a space station post launch
  53+ 84E5 57           ClearFreeSlotListSaveA: ld      d,a
  54+ 84E6 0E 00                                ld      c,0
  55+ 84E8 21 A6 81                             ld      hl,UniverseSlotList
  56+ 84EB 06 18                                ld      b, UniverseSlotListSize * 2
  57+ 84ED 79           .fillLoop:              ld      a,c
  58+ 84EE BA                                   cp      d
  59+ 84EF 28 03                                jr      z,.SkipSlot
  60+ 84F1 3E FF                                ld      a,$FF
  61+ 84F3 77                                   ld      (hl),a
  62+ 84F4 23           .SkipSlot:              inc     hl
  63+ 84F5 23                                   inc     hl
  64+ 84F6 10 F5                                djnz    .fillLoop
  65+ 84F8 C9                                   ret
  66+ 84F9
  67+ 84F9 21 A6 81     ClearSlotA:             ld      hl,UniverseSlotList
  68+ 84FC ED 31                                add     hl,a
  69+ 84FE 36 FF                                ld      (hl),$FF
  70+ 8500 3E 0C                                ld      a,UniverseSlotListSize  ; move to types
  71+ 8502 ED 31                                add     hl,a
  72+ 8504 36 FF                                ld      (hl),$FF
  73+ 8506 C9                                   ret
  74+ 8507
  75+ 8507              ; Space Station will always be slot 0
  76+ 8507 21 B3 81     ClearJunk:              ld      hl,UniverseSlotType+1
  77+ 850A 0E 01                                ld      c,1
  78+ 850C 06 0B                                ld      b,UniverseSlotListSize -1      ; ignore space station
  79+ 850E 7E           .NextShip:              ld      a,(hl)
  80+ 850F FE 03                                cp      ShipTypeJunk
  81+ 8511 CA 22 85                             jp      z,.ProcessJunk
  82+ 8514 FE 04                                cp      ShipTypeScoopable
  83+ 8516 CA 22 85                             jp      z,.ProcessJunk
  84+ 8519 23           .DoneIteration:         inc     hl
  85+ 851A 0C                                   inc     c
  86+ 851B 10 F1                                djnz    .NextShip
  87+ 851D                                      ClearJunkCount
  87+ 851D             >                        ZeroA
  87+ 851D AF          >                        xor a
  87+ 851E 32 60 80    >                        ld      (JunkCount),a
  88+ 8521 C9                                   ret
  89+ 8522 79           .ProcessJunk:           ld      a,c
  90+ 8523 CD F9 84                             call    ClearSlotA
  91+ 8526 C3 19 85                             jp      .DoneIteration
  92+ 8529
  93+ 8529
  94+ 8529 21 B3 81     WarpJunk:               ld      hl,UniverseSlotType+1
  95+ 852C 0E 01                                ld      c,1
  96+ 852E 06 0B                                ld      b,UniverseSlotListSize -1      ; ignore space station
  97+ 8530 7E           .NextShip:              ld      a,(hl)
  98+ 8531 FE 03                                cp      ShipTypeJunk
  99+ 8533 CA 40 85                             jp      z,.ProcessJunk
 100+ 8536 FE 04                                cp      ShipTypeScoopable
 101+ 8538 CA 40 85                             jp      z,.ProcessJunk
 102+ 853B 23           .DoneIteration:         inc     hl
 103+ 853C 0C                                   inc     c
 104+ 853D 10 F1                                djnz    .NextShip
 105+ 853F C9                                   ret
 106+ 8540 79           .ProcessJunk:           ld      a,c
 107+ 8541                                      MMUSelectUniverseA
 107+ 8541 C6 46       >                     add    a,BankUNIVDATA0
 107+ 8543 ED 92 56    >                     nextreg UniverseMMU,       a
 108+ 8546 CD B5 C6                             call    WarpOffset
 109+ 8549 C3 3B 85                             jp      .DoneIteration
 110+ 854C
 111+ 854C 21 B3 81     AreShipsPresent:        ld      hl,UniverseSlotType+1
 112+ 854F 06 0B                                ld      b,UniverseSlotListSize -1      ; ignore space station
 113+ 8551 7E           .NextShip:              ld      a,(hl)
 114+ 8552 FE 00                                cp      ShipTypeNormal
 115+ 8554                                      ClearCarryFlag
 115+ 8554 B7          >                        or a
 116+ 8555 C8                                   ret     z
 117+ 8556 23                                   inc     hl
 118+ 8557 10 F8                                djnz    .NextShip
 119+ 8559                                      SetCarryFlag
 119+ 8559 37          >                        scf
 120+ 855A C9                                   ret
 121+ 855B
 122+ 855B 21 A6 81     IsSpaceStationPresent:  ld      hl,UniverseSlotList
 123+ 855E                                      ClearCarryFlag
 123+ 855E B7          >                        or a
 124+ 855F 7E           .SearchLoop:            ld      a,(hl)
 125+ 8560                                      ReturnIfAEqNusng ShipTypeStation
 125+ 8560 FE 02       >                        cp      ShipTypeStation
 125+ 8562 C8          >                        ret     z
 126+ 8563                                      SetCarryFlag
 126+ 8563 37          >                        scf
 127+ 8564 C9                                   ret
 128+ 8565
 129+ 8565 21 A6 81     GetTypeAtSlotA:         ld      hl,UniverseSlotList
 130+ 8568 ED 31                                add     hl,a
 131+ 856A 7E                                   ld      a,(hl)
 132+ 856B C9                                   ret
 133+ 856C
 134+ 856C 21 A7 81     IsPlanetOrSpaceStation: ld      hl,UniverseSlotList+1
 135+ 856F 7E                                   ld      a,(hl)
 136+ 8570 C9                                   ret
 137+ 8571              ;-----------------------------------------------------------------------------
 138+ 8571              ;-- Search the slot list for a free slot and return the result in c register.
 139+ 8571              ;-- Carry is clear if successful, else carry is set if all slots full
 140+ 8571              ;-- uses hl, bc, a
 141+ 8571 21 A6 81     FindNextFreeSlotInC:    ld      hl,UniverseSlotList
 142+ 8574 06 0C                                ld      b, UniverseSlotListSize
 143+ 8576 0E 00                                ld      c, 0
 144+ 8578 7E           .SearchLoop:            ld      a,(hl)
 145+ 8579                                      JumpIfAEqNusng $FF, .FoundSlot
 145+ 8579 FE FF       >                        cp     $FF
 145+ 857B CA 84 85    >                        jp      z,.FoundSlot
 146+ 857E 0C                                   inc     c
 147+ 857F 23                                   inc     hl
 148+ 8580 10 F6                                djnz    .SearchLoop
 149+ 8582                                      SetCarryFlag
 149+ 8582 37          >                        scf
 150+ 8583 C9                                   ret
 151+ 8584              .FoundSlot:             ClearCarryFlag
 151+ 8584 B7          >                        or a
 152+ 8585 C9                                   ret
 153+ 8586
 154+ 8586              ;-----------------------------------------------------------------------------
 155+ 8586              ;-- calls FindNextFreeSlotInC and returns the result in a and c registers.
 156+ 8586              ;-- Carry is clear if successful, else carry is set if all slots full
 157+ 8586              ;-- uses hl, bc, a
 158+ 8586 CD 71 85     FindNextFreeSlotInA:    call    FindNextFreeSlotInC
 159+ 8589 79                                   ld      a,c
 160+ 858A C9                                   ret
 161+ 858B
# file closed: ./Variables/UniverseSlotRoutines.asm
 566  858B                  INCLUDE "./Variables/EquipmentVariables.asm"
# file opened: ./Variables/EquipmentVariables.asm
   1+ 858B 00           AutoDocking				DB	0				; $033F
   2+ 858C 00           PlayerECM				DB	0				; $0340
   3+ 858D 00           Laser2					DB	0				; 0343 laser Power? Not sure
   4+ 858E 00           LaserCount				DB	0				; 0346  LASCT  \ laser count =9 for pulse, cooled off?
   5+ 858F 00 00 00 00  Cash					DB  0,0,0,0			; 0361 - 0364 Cash now litte endian
   6+ 8593 19           Fuel					DB	25				; 0365  QQ14
   7+ 8594 46           CargoBaySize			DB	70				; 036E
   8+ 8595 00           CargoRunningLoad        DB  0
   9+ 8596 00 00 00 00  CargoTonnes             DB  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
   9+ 859A 00 00 00 00
   9+ 859E 00 00 00 00
   9+ 85A2 00 00 00 00
  10+ 85A6              ;CargoTonnes		    DB	16,1,2,3,4,5,6,7,6,9,10,11,12,13,14,15			; 036F - 037F	QQ20
  11+ 85A6              SlaveCargoTonnes		equ CargoTonnes+3
  12+ 85A6              NarcoticsCargoTonnes	equ CargoTonnes+6
  13+ 85A6              FirearmsCargoTonnes		equ CargoTonnes+10
  14+ 85A6              GoldCargoKGs:           equ CargoTonnes+15
  15+ 85A6              AlienItemsTonnes        equ CargoTonnes+17
  16+ 85A6              ; For each view laser a localised copy of the stats
  17+ 85A6              ; TODO - need to add code to maintain on load/save/equipment transactions
  18+ 85A6 00 00 00 00  LaserType               DS  4               ; quick reference to laser type
  19+ 85AA 00 00 00 00  LaserDamagedFlag        DS  4               ; probabiliy out of 255 that it will no fire, 0 = good, 255 = will not fire
  20+ 85AE              ; dont need as static from table LaserPulseRate          DS  4               ; how many pulses can be fired before long pause
  21+ 85AE              ; dont need as static from table LaserPulsePause         DS  4               ; time before next pulse - 0 = beam
  22+ 85AE              ; dont need as static from table LaserPulseRest          DS  4               ; time before pulse count resets to 0
  23+ 85AE              ; dont need as static from table LaserDamageOutput       DS  4               ; amount of damage for a laser hit
  24+ 85AE              ; dont need as static from table LaserEnergyDrain        DS  4               ; amount of energy drained by cycle
  25+ 85AE              ; dont need as static from table LaserHeat               DS  4               ; amount of heat generated
  26+ 85AE              ; dont need as static from table LaserDurability         DS  4               ; probabability out of 255 that a hit on it unshielded will add random amount of damage
  27+ 85AE              ; dont need as static from table LaserDurabilityAmount   DS  4               ; max amount of damagage can be sustained in one damage hit
  28+ 85AE              QQ20                    equ CargoTonnes
  29+ 85AE 00 00 00...  EquipmentFitted         DS  EQ_ITEM_COUNT    ; Series of flags for if each item is fitted
  30+ 85C8              ECMPresent				EQU EquipmentFitted + EQ_ECM				; 0380
  31+ 85C8              FuelScoop               EQU EquipmentFitted + EQ_FUEL_SCOOPS
  32+ 85C8              EnergyBomb				EQU EquipmentFitted + EQ_ENERGY_BOMB		; 0382	Also random hyperspeace in Elite A
  33+ 85C8              ExtraEnergyUnit			EQU EquipmentFitted + EQ_ENERGY_UNIT        ; 0383
  34+ 85C8              DockingComputer 		EQU EquipmentFitted + EQ_DOCK_COMP    		; 0384
  35+ 85C8              GalacticHyperDrive		EQU EquipmentFitted + EQ_GAL_DRIVE   		; 0385
  36+ 85C8              EscapePod				EQU EquipmentFitted + EQ_ESCAPE_POD  		; 0386
  37+ 85C8 01           FuelScoopsBarrelStatus	DB	1				; 0381
  38+ 85C9              ; Each item will have a DamagedFlag which will report on a scale 0 good 255 destroyed, and colour coded on a scale (will need a custom pallet now for the offsets)
  39+ 85C9              ; laser damage already there above, need moving here
  40+ 85C9              ; if item is not fitted then a not present is show on status lamps
  41+ 85C9 00           ECMDamageStatus                 DS 1 ; percentage that it won't fire
  42+ 85CA 00           EnergyBombDamageStatus          DS 1 ; As per missile, destruction causes ejection and loss
  43+ 85CB 00           DockingComputerDamageStatus     DS 1 ; random chance of docking computer being unable to engage, once engaged will stay on until docked
  44+ 85CC 00           GalacticHyperDriveDamageStatus  DS 1 ; Causes % chance of failure to launch, at 250% can cause a random galaxy jump +/-1 at 255, needs replacement
  45+ 85CD 00           EscapePodDamageStatus           DS 1 ; until 255 then escape pod lost
  46+ 85CE 00           FuelScoopDamageStatus           DS 1 ; rate of scooping, always able to trickle
  47+ 85CF 00           CargoHoldDamageStatus           DS 1 ; random chance random item lost
  48+ 85D0 00           WarpDriveDamageStatus           DS 1 ; random Bong mass locked
  49+ 85D1 00           EnginesDamageStatus             DS 1 ; maximum speed random adjust a combination of max speed and random adjustments
  50+ 85D2 00           ForeShieldDamageStatus          DS 1 ; energy drain rate on shield
  51+ 85D3 00           AftShieldDamageStatus           DS 1 ; energy drain rate on shield
  52+ 85D4 00           EnergyUnitDamageStatus          DS 1 ; percentage chance of recharge not occuring at 255 there will still be trickle charge at least
  53+ 85D5 00           MissleLauncherDamageStatus      DS 1 ; Determines ability to lock and fire, once launched missile tracks independently
  54+ 85D6 00 00 00 00  MissleDamageStatus              DS 4 ; Damaging a missile causes it to be ejected & lost rather than explode
  55+ 85DA 00           FuelDamageStatus                DS 1 ; percentage chance of a fuel leak of random amount
  56+ 85DB
# file closed: ./Variables/EquipmentVariables.asm
 567  85DB                  INCLUDE "./Variables/random_number.asm"
# file opened: ./Variables/random_number.asm
   1+ 85DB              ; dea = random number
   2+ 85DB CD EC 85     doRandomS24:            call    doRandom
   3+ 85DE 57                                   ld      d,a
   4+ 85DF E5                                   push    hl
   5+ 85E0 CD EC 85                             call    doRandom
   6+ 85E3 E1                                   pop     hl
   7+ 85E4 5F                                   ld      e,a
   8+ 85E5 E5                                   push    hl
   9+ 85E6 CD EC 85                             call    doRandom
  10+ 85E9 E1                                   pop     hl
  11+ 85EA C9                                   ret
  12+ 85EB
  13+ 85EB              doRandom2:									; .DORND2	\ -> &3F85 \ Restricted for explosion dust.
  14+ 85EB              doRND2:
  15+ 85EB A7           	and		a								; fast clear carry  leave bit0 of RAND+2 at 0.
  16+ 85EC              doRandom:									;.DORND	\ -> &3F86 \ do random, new A, X.
  17+ 85EC              ; "doRandom, Random Seed update, new value in A & C)"
  18+ 85EC              ; uses a 'a c h l registers, de not affected
  19+ 85EC              doRND:                  ;exx                                     ; protect bc,de,hl
  20+ 85EC 3A AB 7E                             ld		a,(RandomSeed)					; Get Seed 0
  21+ 85EF CB 17                                rl		a								; Rotate L including carry
  22+ 85F1 4F                                   ld		c,a								; c =  double lo
  23+ 85F2 21 AD 7E     .AddSeed2:              ld		hl,RandomSeed2
  24+ 85F5 8E                                   adc		a,(hl)							; RAND+2
  25+ 85F6 32 AB 7E     .SaveAtoSeed:           ld		(RandomSeed),a					; and save RAND
  26+ 85F9 08           .SaveBtoSeed2:          ex		af,af'
  27+ 85FA 79                                   ld		a,c
  28+ 85FB 32 AD 7E                             ld		(RandomSeed2),a
  29+ 85FE 08                                   ex		af,af'
  30+ 85FF 3A AC 7E                             ld		a,(RandomSeed1)
  31+ 8602 4F                                   ld		c,a								; C = Seed1
  32+ 8603 21 AE 7E     .AddSeed3:              ld		hl,RandomSeed3
  33+ 8606 8E                                   adc		a,(hl)
  34+ 8607 32 AC 7E                             ld		(RandomSeed1),a
  35+ 860A 08                                   ex		af,af'
  36+ 860B 79                                   ld		a,c
  37+ 860C 32 AE 7E                             ld		(RandomSeed3),a
  38+ 860F 08                                   ex		af,af'
  39+ 8610                                      ;exx                                     ; get bc,de,hl back
  40+ 8610 C9                                   ret
  41+ 8611
  42+ 8611 21 AB 7E     saveRandomSeeds:        ld      hl,RandomSeed
  43+ 8614 11 AF 7E                             ld      de,RandomSeedSave
  44+ 8617 01 04 00                             ld      bc,4
  45+ 861A ED A0                                ldi
  46+ 861C ED A0                                ldi
  47+ 861E ED A0                                ldi
  48+ 8620 ED A0                                ldi
  49+ 8622 C9                                   ret
  50+ 8623
  51+ 8623 21 AF 7E     restoreRandomSeeds:     ld      hl,RandomSeedSave
  52+ 8626 11 AB 7E                             ld      de,RandomSeed
  53+ 8629 01 04 00                             ld      bc,4
  54+ 862C ED A0                                ldi
  55+ 862E ED A0                                ldi
  56+ 8630 ED A0                                ldi
  57+ 8632 ED A0                                ldi
  58+ 8634 C9                                   ret
# file closed: ./Variables/random_number.asm
 568  8635                  INCLUDE "./Variables/galaxy_seed.asm"
# file opened: ./Variables/galaxy_seed.asm
   1+ 8635 47 41 4C 41  GALAXYSEED DB "GALAXYSEED"
   1+ 8639 58 59 53 45
   1+ 863D 45 44
   2+ 863F 21 52 80     copy_galaxy_to_system:  ld		hl,GalaxySeeds
   3+ 8642 11 2E 80                             ld		de,SystemSeed
   4+ 8645 ED A0        copy_seed:		        ldi
   5+ 8647 ED A0                                ldi
   6+ 8649 ED A0                                ldi
   7+ 864B ED A0                                ldi
   8+ 864D ED A0                                ldi
   9+ 864F ED A0                                ldi
  10+ 8651 C9                                   ret
  11+ 8652
  12+ 8652 21 2E 80     copy_system_to_galaxy:  ld		hl,SystemSeed
  13+ 8655 11 52 80                             ld		de,GalaxySeeds
  14+ 8658 18 EB                                jr		copy_seed
  15+ 865A
  16+ 865A 21 52 80     copy_galaxy_to_working: ld		hl,GalaxySeeds
  17+ 865D 11 46 80                             ld		de,WorkingSeeds
  18+ 8660 18 E3                                jr		copy_seed
  19+ 8662
  20+ 8662 21 46 80     copy_working_to_galaxy: ld		hl,WorkingSeeds
  21+ 8665 11 52 80                             ld		de,GalaxySeeds
  22+ 8668 18 DB                                jr		copy_seed
  23+ 866A
  24+ 866A 21 46 80     copy_working_to_system: ld		hl,WorkingSeeds
  25+ 866D 11 2E 80                             ld		de,SystemSeed
  26+ 8670 18 D3                                jr		copy_seed
  27+ 8672
  28+ 8672 21 2E 80     copy_system_to_working: ld		hl,SystemSeed
  29+ 8675 11 46 80                             ld		de,WorkingSeeds
  30+ 8678 18 CB                                jr		copy_seed
  31+ 867A
  32+ 867A              next_system_seed:							;.TT20	\ -> &2B0E  \ TWIST on QQ15 to next system
  33+ 867A CD 7D 86     		call	.NextStep					; This logic means we hard code x4
  34+ 867D              .NextStep:
  35+ 867D CD 80 86     		call	process_seed				; This logic means we hard code x2
  36+ 8680              process_seed:								; TT54	\ -> &2637 \ Twist seed for next digram in QQ15
  37+ 8680 3A 2E 80     		ld		a,(SystemSeed)				; QQ15
  38+ 8683 B7           		or		a							; clear carry flag
  39+ 8684 21 30 80     		ld		hl,SystemSeed+2				; hl -> qq+2
  40+ 8687 86           		add		a,(hl)						; a= QQ15 + QQ152
  41+ 8688 47           		ld		b,a							; partial sum lo
  42+ 8689 3A 2F 80     		ld		a,(SystemSeed+1)
  43+ 868C 21 31 80     		ld		hl,SystemSeed+3				; HL -> QQ+3 )we don't inc as it affects carry)
  44+ 868F 8E           		adc		a,(hl)						; note add with carry
  45+ 8690 4F           		ld		c,a  						; c = QQ1+QQ3+carry bit parial sum hi
  46+ 8691 3A 30 80     		ld		a,(SystemSeed+2)
  47+ 8694 32 2E 80     		ld		(SystemSeed+0),a			; copy qq152 to qq150
  48+ 8697 3A 31 80     		ld		a,(SystemSeed+3)
  49+ 869A 32 2F 80     		ld		(SystemSeed+1),a			; copy qq153 to qq151
  50+ 869D 3A 33 80     		ld		a,(SystemSeed+5)
  51+ 86A0 32 31 80     		ld		(SystemSeed+3),a			; copy qq155 to qq153
  52+ 86A3 3A 32 80     		ld		a,(SystemSeed+4)
  53+ 86A6 32 30 80     		ld		(SystemSeed+2),a			; copy qq154 to qq152
  54+ 86A9 B7           		or		a
  55+ 86AA 78           		ld		a,b
  56+ 86AB 21 30 80     		ld		hl,SystemSeed+2				; hl -> qq+2
  57+ 86AE 86           		add	    a,(hl)
  58+ 86AF 32 32 80     		ld		(SystemSeed+4),a
  59+ 86B2 79           		ld		a,c
  60+ 86B3 21 31 80     		ld		hl,SystemSeed+3				; HL -> QQ+3 )we don't inc as it affects carry)
  61+ 86B6 8E           		adc		a,(hl)
  62+ 86B7 32 33 80     		ld		(SystemSeed+5),a
  63+ 86BA C9           		ret
  64+ 86BB
  65+ 86BB              next_working_seed:							;.TT20	\ -> &2B0E  \ TWIST on QQ15 to next system
  66+ 86BB CD BE 86     		call	.NextStep					; This logic means we hard code x4
  67+ 86BE              .NextStep:
  68+ 86BE CD C1 86     		call	working_seed				; This logic means we hard code x2
  69+ 86C1              working_seed:								; TT54	\ -> &2637 \ Twist seed for next digram in QQ15
  70+ 86C1              ; x = a + c
  71+ 86C1 3A 46 80     		ld		a,(WorkingSeeds)			; QQ15
  72+ 86C4 B7           		or		a							; clear carry flag
  73+ 86C5 21 48 80     		ld		hl,WorkingSeeds+2			; hl -> qq+2 [c]
  74+ 86C8 86           		add		a,(hl)						; a= QQ15 [a]+ QQ15 [c]
  75+ 86C9 47           		ld		b,a							; partial sum lo [x]
  76+ 86CA              ; y = b + d	+ carry
  77+ 86CA 3A 47 80     		ld		a,(WorkingSeeds+1)          ; [b]
  78+ 86CD 21 49 80     		ld		hl,WorkingSeeds+3			; HL -> QQ+3 [d] we don't inc as it affects carry)
  79+ 86D0 8E           		adc		a,(hl)						; note add with carry
  80+ 86D1 4F           		ld		c,a  						; c = QQ1+QQ3+carry bit parial sum hi
  81+ 86D2 3A 48 80     		ld		a,(WorkingSeeds+2)
  82+ 86D5 32 46 80     		ld		(WorkingSeeds+0),a			; copy qq152 to qq150 [a] = [c]
  83+ 86D8 3A 49 80     		ld		a,(WorkingSeeds+3)
  84+ 86DB 32 47 80     		ld		(WorkingSeeds+1),a			; copy qq153 to qq151 [b] = [d]
  85+ 86DE 3A 4B 80     		ld		a,(WorkingSeeds+5)
  86+ 86E1 32 49 80     		ld		(WorkingSeeds+3),a			; copy qq155 to qq153 [d] = [f]
  87+ 86E4 3A 4A 80     		ld		a,(WorkingSeeds+4)
  88+ 86E7 32 48 80     		ld		(WorkingSeeds+2),a			; copy qq154 to qq152 [c] = [e]
  89+ 86EA B7           		or		a
  90+ 86EB 78           		ld		a,b
  91+ 86EC 21 48 80     		ld		hl,WorkingSeeds+2		    ; hl -> qq+2
  92+ 86EF 86           		add	    a,(hl)
  93+ 86F0 32 4A 80     		ld		(WorkingSeeds+4),a			; e = x + [c]
  94+ 86F3 79           		ld		a,c
  95+ 86F4 21 49 80     		ld		hl,WorkingSeeds+3			; HL -> QQ+3 )we don't inc as it affects carry)
  96+ 86F7 8E           		adc		a,(hl)
  97+ 86F8 32 4B 80     		ld		(WorkingSeeds+5),a			; f = y + [d] + carry
  98+ 86FB C9           		ret
  99+ 86FC
 100+ 86FC 32           working_distX	DB 50
 101+ 86FD 32           working_distY	DB 50
 102+ 86FE 00           current_distY	DB 0
 103+ 86FF
 104+ 86FF AF           find_present_system:    xor		a
 105+ 8700 32 BB 7F                             ld		(XSAV),a
 106+ 8703 3A 2F 80     .CounterLoop:           ld		a,(SystemSeed+1)				; QQ15+1 \ seed Ycoord of star
 107+ 8706 4F                                   ld		c,a
 108+ 8707 3A 59 80     .calcLocaldy:           ld		a,(PresentSystemY)
 109+ 870A 47                                   ld		b,a								; so b holds Y ccord
 110+ 870B 79                                   ld		a,c
 111+ 870C 90                                   sub		b
 112+ 870D CB 7F                                bit		7,a
 113+ 870F 28 02                                jr		z,.positivedy
 114+ 8711 ED 44        .negativedy:            neg
 115+ 8713 32 FE 86     .positivedy:            ld		(current_distY),a				; save cuirrent_dist Y as we need it maybe
 116+ 8716 ED 5B FC 86                          ld		de,(working_distX)
 117+ 871A BA                                   cp		d
 118+ 871B 30 24                                jr		nc,.toofar
 119+ 871D 3A 31 80     .calcLocaldx:           ld		a,(SystemSeed+3)				; QQ15+3 \ seed Xcoord of star
 120+ 8720 4F                                   ld		c,a
 121+ 8721 3A 58 80                             ld		a,(PresentSystemX)
 122+ 8724 47                                   ld		b,a								; so b holds Y ccord
 123+ 8725 79                                   ld		a,c
 124+ 8726 90                                   sub		b
 125+ 8727 CB 7F                                bit		7,a
 126+ 8729 28 02                                jr		z,.positivedx
 127+ 872B ED 44        .negativedx:            neg
 128+ 872D 4F           .positivedx:            ld		c,a
 129+ 872E BB                                   cp		e
 130+ 872F 30 10                                jr		nc,.toofar
 131+ 8731 3A FE 86     .Nearer:			    ld		a,(current_distY) 				; we have a closer system
 132+ 8734 47                                   ld		b,a								; we have c to recall Y into b
 133+ 8735 ED 43 FC 86                          ld		(working_distX),bc
 134+ 8739 C5                                   push	bc
 135+ 873A CD 72 86                             call 	copy_system_to_working
 136+ 873D C1                                   pop		bc
 137+ 873E 78                                   ld		a,b								;
 138+ 873F B1                                   or		c								;
 139+ 8740 C8                                   ret		z								; if we have distance 0 then bang on
 140+ 8741 CD 7A 86     .toofar:                call	next_system_seed
 141+ 8744 3A BB 7F                             ld		a,(XSAV)
 142+ 8747 3D                                   dec		a
 143+ 8748 FE 00                                cp		0
 144+ 874A C8                                   ret		z
 145+ 874B 32 BB 7F                             ld		(XSAV),a
 146+ 874E 18 B3                                jr		.CounterLoop
 147+ 8750
 148+ 8750              get_planet_data_working_seed:
 149+ 8750 3A 47 80     		ld		a, (WorkingSeeds+1)
 150+ 8753 E6 07        		and		7
 151+ 8755 32 73 80     		ld		(DisplayEcononmy),a
 152+ 8758 3A 48 80     		ld		a, (WorkingSeeds+2)
 153+ 875B CB 3F        		srl	a
 154+ 875D CB 3F        		srl	a
 155+ 875F CB 3F        		srl	a
 156+ 8761 CB 3F        		srl	a								; c/8
 157+ 8763 E6 07        		and		7
 158+ 8765 32 74 80     		ld		(DisplayGovernment),a
 159+ 8768 CB 3F        		srl	a
 160+ 876A FE 00        		cp		0
 161+ 876C 20 08        		jr		nz,.CanBeRich
 162+ 876E              .Fedual:
 163+ 876E 3A 73 80     		ld		a,(DisplayEcononmy)
 164+ 8771 F6 02        		or		2							; Adjust Eco for Anarchy and Feudal, set bit 1.
 165+ 8773 32 73 80     		ld		(DisplayEcononmy),a
 166+ 8776              .CanBeRich:
 167+ 8776 3A 73 80     		ld		a,(DisplayEcononmy)
 168+ 8779 EE 07        		xor		7							; flip economy so Rich is now 7
 169+ 877B 32 75 80     		ld		(DisplayTekLevel),a			; Flipped Eco, EcoEOR7, Rich Ind = 7
 170+ 877E 47           		ld		b,a
 171+ 877F 3A 49 80     		ld		a,(WorkingSeeds+3)
 172+ 8782 E6 03        		and		3
 173+ 8784 80           		add		a,b
 174+ 8785 32 75 80     		ld		(DisplayTekLevel),a			; Tek Level += seed d & 3
 175+ 8788 3A 74 80     		ld		a,(DisplayGovernment)		; Government, 0 is Anarchy
 176+ 878B CB 3F        		srl		a 							; gov/2
 177+ 878D 47           		ld		b,a
 178+ 878E 3A 75 80     		ld		a,(DisplayTekLevel)
 179+ 8791 80           		add		a,b
 180+ 8792 32 75 80     		ld		(DisplayTekLevel),a			; Tek += gov /2
 181+ 8795 CB 27        		sla		a
 182+ 8797 CB 27        		sla		a							; Onto Population (TL-1)*= 4
 183+ 8799 47           		ld		b,a
 184+ 879A 3A 73 80     		ld		a,(DisplayEcononmy)
 185+ 879D 80           		add		a,b                  		; TechLevel*4 + Eco   7-56
 186+ 879E 47           		ld		b,a
 187+ 879F 3A 74 80     		ld		a,(DisplayGovernment)
 188+ 87A2 3C           		inc		a  							; +Government, 0 is Anarchy + 1
 189+ 87A3 32 76 80     		ld		(DisplayPopulation),a
 190+ 87A6 3A 73 80     		ld		a,(DisplayEcononmy)
 191+ 87A9 EE 07        		xor		7							; Onto productivity
 192+ 87AB C6 03        		add		3							;  (Flipped eco +3)
 193+ 87AD 57           		ld		d,a
 194+ 87AE 3A 74 80     		ld		a,(DisplayGovernment)		; Government, 0 is Anarchy
 195+ 87B1 C6 04        		add		4
 196+ 87B3 5F           		ld		e,a
 197+ 87B4 ED 30        		mul									; ; DE = d*e, Productivity part 1. has hsb in A, lsb in P.
 198+ 87B6 3A 76 80     		ld		a,(DisplayPopulation)		; then we use d for radius
 199+ 87B9 57           		ld		d,a
 200+ 87BA ED 30        		mul
 201+ 87BC CB 23        		sla		e
 202+ 87BE CB 1A        		rr		d
 203+ 87C0 CB 23        		sla		e
 204+ 87C2 CB 1A        		rr		d
 205+ 87C4 CB 23        		sla		e
 206+ 87C6 CB 1A        		rr		d							; de * 8
 207+ 87C8 ED 53 78 80  		ld		(DisplayProductivity),de
 208+ 87CC              .DoRadius:
 209+ 87CC 3A 49 80     		ld		a,(WorkingSeeds+3)
 210+ 87CF 4F           		ld		c,a
 211+ 87D0 3A 4B 80     		ld		a,(WorkingSeeds+5)
 212+ 87D3 E6 0F        		and		$0F							;  lower 4 bits of w2_h determine planet radius
 213+ 87D5 C6 0B        		add		11							;  radius min = 256*11 = 2816 km
 214+ 87D7 47           		ld		b,a							;
 215+ 87D8 ED 43 7C 80  		ld		(DisplayRadius),bc
 216+ 87DC C9           		ret
 217+ 87DD
# file closed: ./Variables/galaxy_seed.asm
 569  87DD                  INCLUDE "./Tables/text_tables.asm"
# file opened: ./Tables/text_tables.asm
   1+ 87DD 50 75 6C 73  StatusLaserName1	DB	"Pulse",0
   1+ 87E1 65 00
   2+ 87E3 42 65 61 6D  StatusLaserName2	DB	"Beam",0
   2+ 87E7 00
   3+ 87E8 4D 69 6C 69  StatusLaserName3    DB  "Military",0
   3+ 87EC 74 61 72 79
   3+ 87F0 00
   4+ 87F1 4D 69 6E 69  StatusLaserName4    DB  "Mining",0
   4+ 87F5 6E 67 00
   5+ 87F8 43 75 73 74  StatusLaserName5    DB  "Custom",0
   5+ 87FC 6F 6D 00
   6+ 87FF
   7+ 87FF DD 87 E3 87  StatusLaserNameIdx	DW	StatusLaserName1,StatusLaserName2,StatusLaserName3,StatusLaserName4,StatusLaserName5
   7+ 8803 E8 87 F1 87
   7+ 8807 F8 87
   8+ 8809              StatusLaserNameIdxLen EQU $ - StatusLaserNameIdx
   9+ 8809
  10+ 8809 44 6F 63 6B  ConditionName1		DB "Docked",0
  10+ 880D 65 64 00
  11+ 8810 47 72 65 65  ConditionName2		DB "Green",0
  11+ 8814 6E 00
  12+ 8816 59 65 6C 6C  ConditionName3		DB "Yellow",0
  12+ 881A 6F 77 00
  13+ 881D 52 65 64 00  ConditionName4		DB "Red",0
  14+ 8821
  15+ 8821 09 88 10 88  ConditionNameIdx	DW ConditionName1,ConditionName2,ConditionName3,ConditionName4
  15+ 8825 16 88 1D 88
  16+ 8829              ConditionNameIdxLen EQU $ - ConditionNameIdx
  17+ 8829
  18+ 8829 41 42 4F 55  StatusDiagrams		DB "ABOUSEITILETSTONLONUTHNOALLEXEGEZACEBISOUSESARMAINDIREA?ERATENBERALAVETIEDORQUANTEISRION",0
  18+ 882D 53 45 49 54
  18+ 8831 49 4C 45 54
  18+ 8835 53 54 4F 4E
  18+ 8839 4C 4F 4E 55
  18+ 883D 54 48 4E 4F
  18+ 8841 41 4C 4C 45
  18+ 8845 58 45 47 45
  18+ 8849 5A 41 43 45
  18+ 884D 42 49 53 4F
  18+ 8851 55 53 45 53
  18+ 8855 41 52 4D 41
  18+ 8859 49 4E 44 49
  18+ 885D 52 45 41 3F
  18+ 8861 45 52 41 54
  18+ 8865 45 4E 42 45
  18+ 8869 52 41 4C 41
  18+ 886D 56 45 54 49
  18+ 8871 45 44 4F 52
  18+ 8875 51 55 41 4E
  18+ 8879 54 45 49 53
  18+ 887D 52 49 4F 4E
  18+ 8881 00
  19+ 8882
  20+ 8882 00 00 04 00  RankingTableLow		DW	$0000,$0004,$0008,$0010,$0020,$0100,$0200,$0A00,$1900,$C1FF,$FFFF
  20+ 8886 08 00 10 00
  20+ 888A 20 00 00 01
  20+ 888E 00 02 00 0A
  20+ 8892 00 19 FF C1
  20+ 8896 FF FF
  21+ 8898 03 00 07 00  RankingTableHigh	DW	$0003,$0007,$000F,$001F,$00FF,$01FF,$09FF,$18FF,$C0FF,$FEFF,$FFFF
  21+ 889C 0F 00 1F 00
  21+ 88A0 FF 00 FF 01
  21+ 88A4 FF 09 FF 18
  21+ 88A8 FF C0 FF FE
  21+ 88AC FF FF
  22+ 88AE
  23+ 88AE 48 61 72 6D  RankingName1		DB 	"Harmless",0
  23+ 88B2 6C 65 73 73
  23+ 88B6 00
  24+ 88B7 4D 6F 73 74  RankingName2		DB 	"Mostly Harmless",0
  24+ 88BB 6C 79 20 48
  24+ 88BF 61 72 6D 6C
  24+ 88C3 65 73 73 00
  25+ 88C7 50 6F 6F 72  RankingName3		DB 	"Poor",0
  25+ 88CB 00
  26+ 88CC 41 76 65 72  RankingName4		DB 	"Average",0
  26+ 88D0 61 67 65 00
  27+ 88D4 41 62 6F 76  RankingName5		DB 	"Above Average",0
  27+ 88D8 65 20 41 76
  27+ 88DC 65 72 61 67
  27+ 88E0 65 00
  28+ 88E2 43 6F 6D 70  RankingName6		DB 	"Competent",0
  28+ 88E6 65 74 65 6E
  28+ 88EA 74 00
  29+ 88EC 44 61 6E 67  RankingName7		DB 	"Dangerous",0
  29+ 88F0 65 72 6F 75
  29+ 88F4 73 00
  30+ 88F6 44 65 61 64  RankingName8		DB 	"Deadly",0
  30+ 88FA 6C 79 00
  31+ 88FD 2D 2D 2D 2D  RankingName9		DB 	"---- E L I T E ---",0
  31+ 8901 20 45 20 4C
  31+ 8905 20 49 20 54
  31+ 8909 20 45 20 2D
  31+ 890D 2D 2D 00
  32+ 8910 53 6B 6F 6C  RankingName10		DB 	"Skollobsgod",0
  32+ 8914 6C 6F 62 73
  32+ 8918 67 6F 64 00
  33+ 891C 4E 75 74 74  RankingName11		DB 	"Nutter",0
  33+ 8920 65 72 00
  34+ 8923
  35+ 8923              RankingEQHarmless	EQU 0
  36+ 8923              RankingEQMostly		EQU 1
  37+ 8923              RankingEQPoor		EQU 2
  38+ 8923              RankingEQAverage	EQU 3
  39+ 8923              RankingEQAbove		EQU 4
  40+ 8923              RankingEQCompetent  EQU 5
  41+ 8923              RankingEQDangerous	EQU 6
  42+ 8923              RankingEQDeadly		EQU 7
  43+ 8923              RankingEQElite		EQU 8
  44+ 8923              RankingEQSkollob	EQU 9
  45+ 8923              RankingEQNutter		EQU 10
  46+ 8923
  47+ 8923
  48+ 8923
  49+ 8923 AE 88 B7 88  RankingNameIdx		dw RankingName1,RankingName2,RankingName3,RankingName4,RankingName5,RankingName6,RankingName7,RankingName8,RankingName9,RankingName10,RankingName11
  49+ 8927 C7 88 CC 88
  49+ 892B D4 88 E2 88
  49+ 892F EC 88 F6 88
  49+ 8933 FD 88 10 89
  49+ 8937 1C 89
  50+ 8939              RankingNameIdxLen EQU $ - RankingNameIdx
  51+ 8939
  52+ 8939              ; ">getTableText, hl = indexlist, a = textnbr, returns with hl = porinter to head of text"
  53+ 8939              ; ">Note for ranking first 2 bytes are target rank"
  54+ 8939 ED 31        getTableText:       add		hl,a							; 0 based ref, and its 2 bytes
  55+ 893B ED 31                            add		hl,a
  56+ 893D 7E                               ld		a,(hl)
  57+ 893E 23                               inc		hl
  58+ 893F 66                               ld		h,(hl)							; hl = indexed address
  59+ 8940 6F                               ld      l,a
  60+ 8941 C9                               ret										; return with hl as start entry
  61+ 8942
  62+ 8942
  63+ 8942              ;               CF      ZF      Result
  64+ 8942              ;               -----------------------------------
  65+ 8942              ;               0       0       HL > DE
  66+ 8942              ;               0       1       HL == DE
  67+ 8942              ;               1       0       HL < DE
  68+ 8942              ;               1       1       Impossible
  69+ 8942              getRankIndex:
  70+ 8942              ; ">getRank, de = kill count, returns a = index,hl destroyed"
  71+ 8942              ; ">Note for ranking first 2 bytes are target rank"
  72+ 8942 7A           	ld		a,d
  73+ 8943 B3           	or		e
  74+ 8944 FE 00        	cp		0
  75+ 8946 C8           	ret		z								; quicks skip for 0 kills
  76+ 8947 AF           	xor 	a
  77+ 8948 21 82 88     	ld		hl,RankingTableLow
  78+ 894B              .testLoop:
  79+ 894B 4E           	ld		c,(hl)
  80+ 894C 23           	inc		hl
  81+ 894D 46           	ld		b,(hl)							; bc = ranking
  82+ 894E E5           	push	hl
  83+ 894F 60           	ld		h,b
  84+ 8950 69           	ld		l,c
  85+ 8951 CD EA 9A     	call	compare16HLDE
  86+ 8954 38 06        	jr		c,.HLLTDE
  87+ 8956              .HLGTEDE									; Found the correct rank
  88+ 8956 E1           	pop		hl
  89+ 8957 23           	inc		hl								; move to next value
  90+ 8958 23           	inc		hl
  91+ 8959 3C           	inc		a								; we canloop forever as if kills was $FFFF then hits nutter rank but also +1 = 0000 as its 16 bit
  92+ 895A 18 EF        	jr		.testLoop
  93+ 895C              .HLLTDE:									; HL < Kills so found correct rank
  94+ 895C E1           	pop		hl
  95+ 895D C9           	ret
  96+ 895E
# file closed: ./Tables/text_tables.asm
 570  895E                  INCLUDE "./Tables/dictionary.asm"
# file opened: ./Tables/dictionary.asm
   1+ 895E              ; Could move this into rom area for access as it will be read only
   2+ 895E 58 00        WordDummy					DB  "X",0
   3+ 8960 46 72 6F 6E  WordFront					DB	"Front",0              ;1
   3+ 8964 74 00
   4+ 8966 52 69 67 68  WordRight					DB	"Right",0              ;2
   4+ 896A 74 00
   5+ 896C 4C 65 66 74  WordLeft 					DB	"Left",0               ;3
   5+ 8970 00
   6+ 8971 52 65 61 72  WordRear   	 				DB	"Rear",0               ;4
   6+ 8975 00
   7+ 8976 4C 61 72 67  WordLarge           		DB  "Large",0              ;5
   7+ 897A 65 00
   8+ 897C 45 73 63 61  WordEscape          		DB  "Escape",0             ;6
   8+ 8980 70 65 00
   9+ 8983 50 6F 64 00  WordPod             		DB  "Pod",0                ;7
  10+ 8987 43 61 72 67  WordCargo           		DB  "Cargo",0              ;8
  10+ 898B 6F 00
  11+ 898D 42 61 79 00  WordBay             		DB  "Bay",0                ;9
  12+ 8991 46 75 65 6C  WordFuel            		DB  "Fuel",0               ;10
  12+ 8995 00
  13+ 8996 53 63 6F 6F  WordScoops          		DB  "Scoops",0             ;11
  13+ 899A 70 73 00
  14+ 899D 45 2E 43 2E  WordECM             		DB  "E.C.M.",0             ;12
  14+ 89A1 4D 2E 00
  15+ 89A4 53 79 73 74  WordSystem          		DB  "System",0             ;13
  15+ 89A8 65 6D 00
  16+ 89AB 45 6E 65 72  WordEnergy					DB  "Energy",0             ;14
  16+ 89AF 67 79 00
  17+ 89B2 42 6F 6D 62  WordBomb					DB  "Bomb",0               ;15
  17+ 89B6 00
  18+ 89B7 4C 61 73 65  WordLaser					DB  "Laser",0              ;16
  18+ 89BB 72 00
  19+ 89BD 50 75 6C 73  WordPulse           		DB  "Pulse",0              ;17
  19+ 89C1 65 00
  20+ 89C3 42 65 61 6D  WordBeam            		DB  "Beam",0               ;18
  20+ 89C7 00
  21+ 89C8 4D 69 6C 69  WordMiliary         		DB  "Miliary",0            ;19
  21+ 89CC 61 72 79 00
  22+ 89D0 4D 69 6E 69  WordMining          		DB  "Mining",0             ;20
  22+ 89D4 6E 67 00
  23+ 89D7 43 75 73 74  WordCustom          		DB  "Custom",0             ;21
  23+ 89DB 6F 6D 00
  24+ 89DE 55 6E 69 74  WordUnit            		DB  "Unit",0               ;22
  24+ 89E2 00
  25+ 89E3 53 68 69 65  WordShield          		DB  "Shield",0             ;23
  25+ 89E7 6C 64 00
  26+ 89EA 44 6F 63 6B  WordDocking         		DB  "Docking",0            ;24
  26+ 89EE 69 6E 67 00
  27+ 89F2 43 6F 6D 70  WordComputers       		DB  "Computers",0          ;25
  27+ 89F6 75 74 65 72
  27+ 89FA 73 00
  28+ 89FC 48 79 70 65  WordHyperspace      		DB  "Hyperspace",0         ;26
  28+ 8A00 72 73 70 61
  28+ 8A04 63 65 00
  29+ 8A07 47 61 6C 61  WordGalactic        		DB  "Galactic",0           ;27
  29+ 8A0B 63 74 69 63
  29+ 8A0F 00
  30+ 8A10 45 78 74 72  WordExtra           		DB  "Extra",0              ;28
  30+ 8A14 61 00
  31+ 8A16 43 6C 65 61  WordClean           		DB  "Clean",0              ;29
  31+ 8A1A 6E 00
  32+ 8A1C 4F 66 66 65  WordOffender        		DB  "Offender",0           ;30
  32+ 8A20 6E 64 65 72
  32+ 8A24 00
  33+ 8A25 46 75 67 69  WordFugitive        		DB  "Fugitive",0           ;31
  33+ 8A29 74 69 76 65
  33+ 8A2D 00
  34+ 8A2E 46 6F 6F 64  WordFood					DB	"Food",0               ;32
  34+ 8A32 00
  35+ 8A33 54 65 78 74  WordTextiles				DB 	"Textiles",0           ;33
  35+ 8A37 69 6C 65 73
  35+ 8A3B 00
  36+ 8A3C 52 61 64 69  WordRadioactives			DB  "Radioactives",0       ;34
  36+ 8A40 6F 61 63 74
  36+ 8A44 69 76 65 73
  36+ 8A48 00
  37+ 8A49 53 6C 61 76  WordSlaves					DB  "Slaves",0             ;35
  37+ 8A4D 65 73 00
  38+ 8A50 4C 69 71 75  WordLiquorWines     		DB  "Liquor/Wines",0       ;36
  38+ 8A54 6F 72 2F 57
  38+ 8A58 69 6E 65 73
  38+ 8A5C 00
  39+ 8A5D 4C 75 78 75  WordLuxuries  	    		DB  "Luxuries",0	       ;37
  39+ 8A61 72 69 65 73
  39+ 8A65 00
  40+ 8A66 4E 61 72 63  WordNarcotics  	    		DB  "Narcotics",0	       ;38
  40+ 8A6A 6F 74 69 63
  40+ 8A6E 73 00
  41+ 8A70 4D 61 63 68  WordMachinery  	    		DB  "Machinery",0	       ;39
  41+ 8A74 69 6E 65 72
  41+ 8A78 79 00
  42+ 8A7A 41 6C 6C 6F  WordAlloys  				DB  "Alloys",0		       ;40
  42+ 8A7E 79 73 00
  43+ 8A81 46 69 72 65  WordFirearms  	    		DB  "Firearms",0	       ;41
  43+ 8A85 61 72 6D 73
  43+ 8A89 00
  44+ 8A8A 46 75 72 73  WordFurs  		    		DB  "Furs",0	           ;42
  44+ 8A8E 00
  45+ 8A8F 4D 69 6E 65  WordMinerals  	    		DB  "Minerals",0           ;43
  45+ 8A93 72 61 6C 73
  45+ 8A97 00
  46+ 8A98 47 6F 6C 64  WordGold  		    		DB  "Gold",0	           ;44
  46+ 8A9C 00
  47+ 8A9D 50 6C 61 74  WordPlatinum  	    		DB  "Platinum",0           ;45
  47+ 8AA1 69 6E 75 6D
  47+ 8AA5 00
  48+ 8AA6 47 65 6D 2D  WordGemStones  				DB  "Gem-Stones",0         ;46
  48+ 8AAA 53 74 6F 6E
  48+ 8AAE 65 73 00
  49+ 8AB1 41 6C 69 65  WordAlienItems      		DB  "Alien Items",0        ;47
  49+ 8AB5 6E 20 49 74
  49+ 8AB9 65 6D 73 00
  50+ 8ABD 54 6F 6E 6E  WordTonnes          		DB  "Tonnes",0             ;48
  50+ 8AC1 65 73 00
  51+ 8AC4 4B 69 6C 6F  WordKilograms       		DB  "Kilograms",0          ;49
  51+ 8AC8 67 72 61 6D
  51+ 8ACC 73 00
  52+ 8ACE 47 72 61 6D  WordGrams           		DB  "Grams",0			   ;50
  52+ 8AD2 73 00
  53+ 8AD4 53 68 6F 72  WordShort           		DB  "Short",0			   ;51
  53+ 8AD8 74 00
  54+ 8ADA 52 61 6E 67  WordRange           		DB  "Range",0			   ;52
  54+ 8ADE 65 00
  55+ 8AE0 43 68 61 72  WordChart	        		DB  "Chart",0			   ;53
  55+ 8AE4 74 00
  56+ 8AE6 44 61 74 61  WordData					DB	"Data",0			   ;54
  56+ 8AEA 00
  57+ 8AEB 4F 6E 00     WordOn						DB  "On",0                 ;55
  58+ 8AEE 44 69 73 74  WordDistance        		DB  "Distance",0           ;56
  58+ 8AF2 61 6E 63 65
  58+ 8AF6 00
  59+ 8AF7 45 63 6F 6E  WordEconomy         		DB  "Economy",0            ;57
  59+ 8AFB 6F 6D 79 00
  60+ 8AFF 47 6F 76 65  WordGovernment      		DB  "Government",0         ;58
  60+ 8B03 72 6E 6D 65
  60+ 8B07 6E 74 00
  61+ 8B0A 54 65 63 68  WordTechLevel       		DB  "TechLevel",0          ;59
  61+ 8B0E 4C 65 76 65
  61+ 8B12 6C 00
  62+ 8B14 50 6F 70 75  WordPopulation      		DB  "Population",0         ;60
  62+ 8B18 6C 61 74 69
  62+ 8B1C 6F 6E 00
  63+ 8B1F 4D 69 6C 6C  WordMillion         		DB  "Million",0            ;61
  63+ 8B23 69 6F 6E 00
  64+ 8B27 42 69 6C 6C  WordBillion         		DB  "Billion",0            ;62
  64+ 8B2B 69 6F 6E 00
  65+ 8B2F 47 72 6F 73  WordGross           		DB  "Gross",0              ;63
  65+ 8B33 73 00
  66+ 8B35 50 72 6F 64  WordProductivity    		DB  "Productivity",0       ;64
  66+ 8B39 75 63 74 69
  66+ 8B3D 76 69 74 79
  66+ 8B41 00
  67+ 8B42 41 76 65 72  WordAverage         		DB  "Average",0            ;65
  67+ 8B46 61 67 65 00
  68+ 8B4A 52 61 64 69  WordRadius          		DB  "Radius",0             ;66
  68+ 8B4E 75 73 00
  69+ 8B51 4B 4D 00     WordKM              		DB  "KM",0                 ;67
  70+ 8B54 4D 20 43 52  WordMCR             		DB  "M CR",0               ;68
  70+ 8B58 00
  71+ 8B59 52 69 63 68  WordRich					DB  "Rich",0               ;69
  71+ 8B5D 00
  72+ 8B5E 41 76 67 00  WordAvg         			DB  "Avg",0            	   ;70
  73+ 8B62 4D 61 69 6E  WordMainly          		DB  "Mainly",0             ;71
  73+ 8B66 6C 79 00
  74+ 8B69 50 6F 6F 72  WordPoor            		DB  "Poor",0               ;72
  74+ 8B6D 00
  75+ 8B6E 49 6E 64 75  WordIndustrial      		DB  "Industrial",0         ;73
  75+ 8B72 73 74 72 69
  75+ 8B76 61 6C 00
  76+ 8B79 41 67 72 69  WordAgricultural    		DB  "Agricultural",0       ;74
  76+ 8B7D 63 75 6C 74
  76+ 8B81 75 72 61 6C
  76+ 8B85 00
  77+ 8B86 41 6E 61 72  WordAnarchy                 DB  "Anarchy",0            ;75
  77+ 8B8A 63 68 79 00
  78+ 8B8E 46 65 75 64  WordFeudal                  DB  "Feudal",0             ;76
  78+ 8B92 61 6C 00
  79+ 8B95 4D 75 6C 74  WordMultiGovernment         DB  "Multi-Government",0   ;77
  79+ 8B99 69 2D 47 6F
  79+ 8B9D 76 65 72 6E
  79+ 8BA1 6D 65 6E 74
  79+ 8BA5 00
  80+ 8BA6 44 69 63 74  WordDictatorship            DB  "Dictatorship",0       ;78
  80+ 8BAA 61 74 6F 72
  80+ 8BAE 73 68 69 70
  80+ 8BB2 00
  81+ 8BB3 43 6F 6D 6D  WordCommunist               DB  "Communist",0          ;79
  81+ 8BB7 75 6E 69 73
  81+ 8BBB 74 00
  82+ 8BBD 43 6F 6E 66  WordConfederacy             DB  "Confederacy",0        ;80
  82+ 8BC1 65 64 65 72
  82+ 8BC5 61 63 79 00
  83+ 8BC9 44 65 6D 6F  WordDemocracy               DB  "Democracy",0          ;81
  83+ 8BCD 63 72 61 63
  83+ 8BD1 79 00
  84+ 8BD3 43 6F 72 70  WordCorporate               DB  "Corporate State",0    ;82
  84+ 8BD7 6F 72 61 74
  84+ 8BDB 65 20 53 74
  84+ 8BDF 61 74 65 00
  85+ 8BE3 53 74 61 74  WordState 					DB  "State",0              ;83
  85+ 8BE7 65 00
  86+ 8BE9 4C 69 67 68  WordLight 					DB  "Light",0              ;84
  86+ 8BED 74 00
  87+ 8BEF 59 65 61 72  WordYears 					DB  "Years",0              ;85
  87+ 8BF3 73 00
  88+ 8BF5 30 00        Word0						DB  "0",0				   ;86
  89+ 8BF7 4D 61 72 6B  WordMarket					DB  "Market",0			   ;87
  89+ 8BFB 65 74 00
  90+ 8BFE 50 72 69 63  WordPrices					DB  "Prices",0			   ;88
  90+ 8C02 65 73 00
  91+ 8C05 50 72 6F 64  WordProduct    				DB  "Product",0  		   ;89
  91+ 8C09 75 63 74 00
  92+ 8C0D 55 6F 4D 00  WordUoM						DB  "UoM",0                ;90
  93+ 8C11 50 72 69 63  WordPrice					DB  "Price",0              ;91
  93+ 8C15 65 00
  94+ 8C17 46 6F 72 00  WordFor                     DB  "For",0                ;92
  95+ 8C1B 53 61 6C 65  WordSale                    DB  "Sale",0               ;93
  95+ 8C1F 00
  96+ 8C20 74 00        Wordt						DB  "t",0                  ;94
  97+ 8C22 6B 67 00     Wordkg						DB  "kg",0                 ;95
  98+ 8C25 67 00        Wordg						DB  "g",0                  ;96
  99+ 8C27 51 75 61 6E  WordQuantity				DB  "Quanitity",0		   ;97
  99+ 8C2B 69 74 69 74
  99+ 8C2F 79 00
 100+ 8C31 49 6E 76 00  WordInv                     DB  "Inv",0                ;98
 101+ 8C35 53 74 6F 63  WordStock                   DB  "Stock",0              ;99
 101+ 8C39 6B 00
 102+ 8C3B 45 71 75 69  WordEquip                   DB  "Equip",0              ;100
 102+ 8C3F 70 00
 103+ 8C41 53 68 69 70  WordShip                    DB  "Ship",0               ;101
 103+ 8C45 00
 104+ 8C46              ;WordMissile                 DB  "Missile",0            ;102
 105+ 8C46 48 79 70 65  WordHyperdrive              DB  "Hyperdrive",0
 105+ 8C4A 72 64 72 69
 105+ 8C4E 76 65 00
 106+ 8C51 4D 69 6C 69  WordMilitary                DB  "Military",0
 106+ 8C55 74 61 72 79
 106+ 8C59 00
 107+ 8C5A 41 64 64 65  WordAdder                   DB  "Adder",0
 107+ 8C5E 72 00
 108+ 8C60 41 6E 61 63  WordAnaconda                DB  "Anaconda",0
 108+ 8C64 6F 6E 64 61
 108+ 8C68 00
 109+ 8C69 41 73 70 5F  WordAsp_Mk_2                DB  "Asp_Mk_2",0
 109+ 8C6D 4D 6B 5F 32
 109+ 8C71 00
 110+ 8C72 42 6F 61 00  WordBoa                     DB  "Boa",0
 111+ 8C76 43 61 72 67  WordCargoType5              DB  "CargoType5",0
 111+ 8C7A 6F 54 79 70
 111+ 8C7E 65 35 00
 112+ 8C81 42 6F 75 6C  WordBoulder                 DB  "Boulder",0
 112+ 8C85 64 65 72 00
 113+ 8C89 41 73 74 65  WordAsteroid                DB  "Asteroid",0
 113+ 8C8D 72 6F 69 64
 113+ 8C91 00
 114+ 8C92 42 75 73 68  WordBushmaster              DB  "Bushmaster",0
 114+ 8C96 6D 61 73 74
 114+ 8C9A 65 72 00
 115+ 8C9D 43 68 61 6D  WordChameleon               DB  "Chameleon",0
 115+ 8CA1 65 6C 65 6F
 115+ 8CA5 6E 00
 116+ 8CA7 43 6F 62 72  WordCobraMk3                DB  "CobraMk3",0
 116+ 8CAB 61 4D 6B 33
 116+ 8CAF 00
 117+ 8CB0 43 6F 62 72  WordCobra_Mk_1              DB  "Cobra_Mk_1",0
 117+ 8CB4 61 5F 4D 6B
 117+ 8CB8 5F 31 00
 118+ 8CBB 43 6F 62 72  WordCobra_Mk_3_P            DB  "Cobra_Mk_3_P",0
 118+ 8CBF 61 5F 4D 6B
 118+ 8CC3 5F 33 5F 50
 118+ 8CC7 00
 119+ 8CC8 43 6F 6E 73  WordConstrictor             DB  "Constrictor",0
 119+ 8CCC 74 72 69 63
 119+ 8CD0 74 6F 72 00
 120+ 8CD4 43 6F 72 69  WordCoriolis                DB  "Coriolis",0
 120+ 8CD8 6F 6C 69 73
 120+ 8CDC 00
 121+ 8CDD 43 6F 75 67  WordCougar                  DB  "Cougar",0
 121+ 8CE1 61 72 00
 122+ 8CE4 44 6F 64 6F  WordDodo                    DB  "Dodo",0
 122+ 8CE8 00
 123+ 8CE9 44 72 61 67  WordDragon                  DB  "Dragon",0
 123+ 8CED 6F 6E 00
 124+ 8CF0 45 73 63 61  WordEscape_Pod              DB  "Escape_Pod",0
 124+ 8CF4 70 65 5F 50
 124+ 8CF8 6F 64 00
 125+ 8CFB 46 65 72 5F  WordFer_De_Lance            DB  "Fer_De_Lance",0
 125+ 8CFF 44 65 5F 4C
 125+ 8D03 61 6E 63 65
 125+ 8D07 00
 126+ 8D08 47 65 63 6B  WordGecko                   DB  "Gecko",0
 126+ 8D0C 6F 00
 127+ 8D0E 47 68 61 76  WordGhavial                 DB  "Ghavial",0
 127+ 8D12 69 61 6C 00
 128+ 8D16 49 67 75 61  WordIguana                  DB  "Iguana",0
 128+ 8D1A 6E 61 00
 129+ 8D1D 4B 72 61 69  WordKrait                   DB  "Krait",0
 129+ 8D21 74 00
 130+ 8D23 4C 6F 67 6F  WordLogo                    DB  "Logo",0
 130+ 8D27 00
 131+ 8D28 4D 61 6D 62  WordMamba                   DB  "Mamba",0
 131+ 8D2C 61 00
 132+ 8D2E 4D 69 73 73  WordMissile                 DB  "Missile",0
 132+ 8D32 69 6C 65 00
 133+ 8D36 4D 6F 6E 69  WordMonitor                 DB  "Monitor",0
 133+ 8D3A 74 6F 72 00
 134+ 8D3E 4D 6F 72 61  WordMoray                   DB  "Moray",0
 134+ 8D42 79 00
 135+ 8D44 4F 70 68 69  WordOphidian                DB  "Ophidian",0
 135+ 8D48 64 69 61 6E
 135+ 8D4C 00
 136+ 8D4D 50 6C 61 74  WordPlate                   DB  "Plate",0
 136+ 8D51 65 00
 137+ 8D53 50 79 74 68  WordPython                  DB  "Python",0
 137+ 8D57 6F 6E 00
 138+ 8D5A 50 79 74 68  WordPython_P                DB  "Python_P",0
 138+ 8D5E 6F 6E 5F 50
 138+ 8D62 00
 139+ 8D63 52 6F 63 6B  WordRock_Hermit             DB  "Rock_Hermit",0
 139+ 8D67 5F 48 65 72
 139+ 8D6B 6D 69 74 00
 140+ 8D6F 53 68 75 74  WordShuttleType9            DB  "ShuttleType9",0
 140+ 8D73 74 6C 65 54
 140+ 8D77 79 70 65 39
 140+ 8D7B 00
 141+ 8D7C 53 68 75 74  WordShuttle_Mk_2            DB  "Shuttle_Mk_2",0
 141+ 8D80 74 6C 65 5F
 141+ 8D84 4D 6B 5F 32
 141+ 8D88 00
 142+ 8D89 53 69 64 65  WordSidewinder              DB  "Sidewinder",0
 142+ 8D8D 77 69 6E 64
 142+ 8D91 65 72 00
 143+ 8D94 53 70 6C 69  WordSplinter                DB  "Splinter",0
 143+ 8D98 6E 74 65 72
 143+ 8D9C 00
 144+ 8D9D 54 65 73 74  WordTestVector              DB  "TestVector",0
 144+ 8DA1 56 65 63 74
 144+ 8DA5 6F 72 00
 145+ 8DA8 54 68 61 72  WordThargoid                DB  "Thargoid",0
 145+ 8DAC 67 6F 69 64
 145+ 8DB0 00
 146+ 8DB1 54 68 61 72  WordThargon                 DB  "Thargon",0
 146+ 8DB5 67 6F 6E 00
 147+ 8DB9 54 72 61 6E  WordTransportType10         DB  "TransportType10",0
 147+ 8DBD 73 70 6F 72
 147+ 8DC1 74 54 79 70
 147+ 8DC5 65 31 30 00
 148+ 8DC9 56 69 70 65  WordViper                   DB  "Viper",0
 148+ 8DCD 72 00
 149+ 8DCF 57 6F 72 6D  WordWorm                    DB  "Worm",0
 149+ 8DD3 00
 150+ 8DD4 52 61 74 74  WordRattler                 DB  "Rattler",0
 150+ 8DD8 6C 65 72 00
 151+ 8DDC 53 70 65 63  WordSpecies                 DB  "Species",0
 151+ 8DE0 69 65 73 00
 152+ 8DE4 44 65 73 63  WordDescription             DB  "Description",0
 152+ 8DE8 72 69 70 74
 152+ 8DEC 69 6F 6E 00
 153+ 8DF0
 154+ 8DF0 5E 89 60 89  WordIdx				DW  WordDummy,          WordFront,        WordRight,        WordLeft		;0-3
 154+ 8DF4 66 89 6C 89
 155+ 8DF8 71 89 76 89  					DW  WordRear,           WordLarge,        WordEscape,       WordPod      	;4-7
 155+ 8DFC 7C 89 83 89
 156+ 8E00 87 89 8D 89  					DW  WordCargo,          WordBay,          WordFuel,         WordScoops   	;8
 156+ 8E04 91 89 96 89
 157+ 8E08 9D 89 A4 89  					DW  WordECM,            WordSystem,       WordEnergy,       WordBomb     	;12
 157+ 8E0C AB 89 B2 89
 158+ 8E10 B7 89 BD 89  					DW  WordLaser,          WordPulse,        WordBeam,         WordMiliary  	;16
 158+ 8E14 C3 89 C8 89
 159+ 8E18 D0 89 D7 89  					DW  WordMining,         WordCustom,       WordUnit,         WordShield   	;20
 159+ 8E1C DE 89 E3 89
 160+ 8E20 EA 89 F2 89  					DW  WordDocking,        WordComputers,    WordHyperspace
 160+ 8E24 FC 89
 161+ 8E26 07 8A        WordIdxGalactic     DW  WordGalactic 	;24
 162+ 8E28 10 8A 16 8A                      DW  WordExtra,          WordClean,        WordOffender,     WordFugitive	;28
 162+ 8E2C 1C 8A 25 8A
 163+ 8E30 2E 8A 33 8A  WordIdxStock    	DW  WordFood,           WordTextiles,     WordRadioactives, WordSlaves		;32
 163+ 8E34 3C 8A 49 8A
 164+ 8E38 50 8A 5D 8A  					DW  WordLiquorWines,    WordLuxuries,     WordNarcotics,    WordComputers   ;36
 164+ 8E3C 66 8A F2 89
 165+ 8E40 70 8A 7A 8A                      DW  WordMachinery,      WordAlloys,       WordFirearms,     WordFurs        ;40
 165+ 8E44 81 8A 8A 8A
 166+ 8E48 8F 8A 98 8A                      DW  WordMinerals,       WordGold,         WordPlatinum,     WordGemStones   ;44
 166+ 8E4C 9D 8A A6 8A
 167+ 8E50 B1 8A                            DW  WordAlienItems                                                          ;45
 168+ 8E52 BD 8A C4 8A  WordIdxUoMFull		DW  WordTonnes,         WordKilograms,    WordGrams                         ;46
 168+ 8E56 CE 8A
 169+ 8E58 D4 8A DA 8A  WordIdxShorRangeCht DW 	WordShort,          WordRange                                           ;49
 170+ 8E5C E0 8A        WordIdxChart        DW  WordChart                                                               ;51
 171+ 8E5E E6 8A EB 8A  WordIdxData         DW  WordData,           WordOn                                              ;52
 172+ 8E62 EE 8A F7 8A  					DW  WordDistance,       WordEconomy,      WordGovernment,   WordTechLevel   ;54
 172+ 8E66 FF 8A 0A 8B
 173+ 8E6A 14 8B 1F 8B  					DW  WordPopulation,     WordMillion,      WordBillion,      WordGross       ;58
 173+ 8E6E 27 8B 2F 8B
 174+ 8E72 35 8B 42 8B  					DW  WordProductivity,   WordAverage,      WordRadius,       WordKM          ;62
 174+ 8E76 4A 8B 51 8B
 175+ 8E7A 54 8B        					DW  WordMCR																	;66
 176+ 8E7C 59 8B 5E 8B  WordIdxEconomy		DW  WordRich,           WordAvg,      	  WordMainly,       WordPoor        ;67
 176+ 8E80 62 8B 69 8B
 177+ 8E84 6E 8B        WordIdxIndustrial   DW  WordIndustrial                                                          ;71
 178+ 8E86 79 8B        WordIdxAgricultural DW  WordAgricultural									                    ;72
 179+ 8E88 86 8B 8E 8B  WordIdxGovernment	DW  WordAnarchy,        WordFeudal,       WordMultiGovernment, WordDictatorship ;73
 179+ 8E8C 95 8B A6 8B
 180+ 8E90 B3 8B BD 8B                      DW  WordCommunist,      WordConfederacy,  WordDemocracy,       WordCorporate ;77
 180+ 8E94 C9 8B D3 8B
 181+ 8E98 E3 8B        					DW  WordState
 182+ 8E9A E9 8B        WordIdxLight        DW  WordLight
 183+ 8E9C EF 8B        WordIdxYears        DW  WordYears
 184+ 8E9E F5 8B        WordIdx0            DW  Word0         ; 81
 185+ 8EA0 F7 8B FE 8B  WordIdxMarketmenu	DW  WordMarket,         WordPrices,       WordProduct,         WordUoM	    ;84
 185+ 8EA4 05 8C 0D 8C
 186+ 8EA8 11 8C 17 8C                      DW  WordPrice,          WordFor,          WordSale                          ;91
 186+ 8EAC 1B 8C
 187+ 8EAE 20 8C 22 8C  WordIdxUomAbbrev	DW	Wordt,				Wordkg,           Wordg                 		    ;94
 187+ 8EB2 25 8C
 188+ 8EB4 27 8C 31 8C  WordIdxQuantity     DW  WordQuantity,       WordInv,          WordStock
 188+ 8EB8 35 8C
 189+ 8EBA 3B 8C        WordIdxEquip        DW  WordEquip	;97
 190+ 8EBC 41 8C 2E 8D  WordIdxShip         DW  WordShip,           WordMissile       ; 101
 191+ 8EC0 5A 8C 60 8C  WordIdxShipNames:   DW  WordAdder,          WordAnaconda,     WordAsp_Mk_2,        WordBoa
 191+ 8EC4 69 8C 72 8C
 192+ 8EC8 76 8C 81 8C                      DW  WordCargoType5,     WordBoulder,      WordAsteroid,        WordBushmaster
 192+ 8ECC 89 8C 92 8C
 193+ 8ED0 9D 8C A7 8C                      DW  WordChameleon,      WordCobraMk3,     WordCobra_Mk_1,      WordCobra_Mk_3_P
 193+ 8ED4 B0 8C BB 8C
 194+ 8ED8 C8 8C D4 8C                      DW  WordConstrictor,    WordCoriolis,     WordCougar,          WordDodo
 194+ 8EDC DD 8C E4 8C
 195+ 8EE0 E9 8C F0 8C                      DW  WordDragon,         WordEscape_Pod,   WordFer_De_Lance,    WordGecko
 195+ 8EE4 FB 8C 08 8D
 196+ 8EE8 0E 8D 16 8D                      DW  WordGhavial,        WordIguana,       WordKrait,           WordLogo
 196+ 8EEC 1D 8D 23 8D
 197+ 8EF0 28 8D 2E 8D                      DW  WordMamba,          WordMissile,      WordMonitor,         WordMoray
 197+ 8EF4 36 8D 3E 8D
 198+ 8EF8 44 8D 4D 8D                      DW  WordOphidian,       WordPlate,        WordPython,          WordPython_P
 198+ 8EFC 53 8D 5A 8D
 199+ 8F00 63 8D 6F 8D                      DW  WordRock_Hermit,    WordShuttleType9, WordShuttle_Mk_2,    WordSidewinder
 199+ 8F04 7C 8D 89 8D
 200+ 8F08 94 8D 9D 8D                      DW  WordSplinter,       WordTestVector,   WordThargoid,        WordThargon
 200+ 8F0C A8 8D B1 8D
 201+ 8F10 B9 8D C9 8D                      DW  WordTransportType10,WordViper,        WordWorm,            WordRattler
 201+ 8F14 CF 8D D4 8D
 202+ 8F18              ; Phrases
 203+ 8F18 05 08 09 00  TextLargeCargoBay			DB 	5,8,9,0          ;0
 204+ 8F1C 06 07 00     TextEscapePod				DB	6,7,0            ;1
 205+ 8F1F 0A 0B 00     TextFuelScoops				DB	10,11,0          ;2
 206+ 8F22 0C 0D 00     TextECMSystem				DB	12,13,0          ;3
 207+ 8F25 0E 0F 00     TextEnergyBomb				DB	14,15,0          ;4
 208+ 8F28 0E 16 00     TextEnergyUnit				DB	14,22,0          ;5
 209+ 8F2B 18 19 00     TextDockingComp     		DB  24,25,0          ;6
dictionary.asm(210): warning: value 0x8E26 is truncated to 8bit value: 0x26
 210+ 8F2E 26 1A 00     TextGalacticHyper			DB	WordIdxGalactic,      26,0          ;7
 211+ 8F31 01 12 10 00  TextFrontLaser      		DB  01,18,16,0       ;8
 212+ 8F35 03 12 10 00  TextLeftLaser       		DB  03,18,16,0       ;9
 213+ 8F39 02 12 10 00  TextRightLaser      		DB  02,18,16,0       ;10
 214+ 8F3D 04 12 10 00  TextRearLaser       		DB  04,18,16,0       ;11
dictionary.asm(215): warning: value 0x8E58 is truncated to 8bit value: 0x58
dictionary.asm(215): warning: value 0x8E59 is truncated to 8bit value: 0x59
dictionary.asm(215): warning: value 0x8E5C is truncated to 8bit value: 0x5C
 215+ 8F41 58 59 5C 00  TextShortRangeChart 		DB	WordIdxShorRangeCht,  WordIdxShorRangeCht+1,WordIdxChart,0       ;12
dictionary.asm(216): warning: value 0x8E26 is truncated to 8bit value: 0x26
dictionary.asm(216): warning: value 0x8E5C is truncated to 8bit value: 0x5C
 216+ 8F45 26 5C 00     TextGalacticChart   		DB	WordIdxGalactic,      WordIdxChart                      ,0          ;13
dictionary.asm(217): warning: value 0x8E5E is truncated to 8bit value: 0x5E
dictionary.asm(217): warning: value 0x8E5F is truncated to 8bit value: 0x5F
 217+ 8F48 5E 5F 00     TextDataOn					DB	WordIdxData,          WordIdxData+1                     ,0          ;14
dictionary.asm(218): warning: value 0x8E7C is truncated to 8bit value: 0x7C
dictionary.asm(218): warning: value 0x8B6E is truncated to 8bit value: 0x6E
 218+ 8F4B 7C 6E 00     TextRichIndustrial          DB  WordIdxEconomy,       WordIndustrial                    ,0          ;15
dictionary.asm(219): warning: value 0x8E7D is truncated to 8bit value: 0x7D
dictionary.asm(219): warning: value 0x8B6E is truncated to 8bit value: 0x6E
 219+ 8F4E 7D 6E 00     TextAvgIndustrial           DB  WordIdxEconomy+1,     WordIndustrial                    ,0			 ;16
dictionary.asm(220): warning: value 0x8E7E is truncated to 8bit value: 0x7E
dictionary.asm(220): warning: value 0x8B6E is truncated to 8bit value: 0x6E
 220+ 8F51 7E 6E 00     TextMainIndustrial          DB  WordIdxEconomy+2,     WordIndustrial                    ,0          ;17
dictionary.asm(221): warning: value 0x8E7F is truncated to 8bit value: 0x7F
dictionary.asm(221): warning: value 0x8B6E is truncated to 8bit value: 0x6E
 221+ 8F54 7F 6E 00     TextPoorIndustrial          DB  WordIdxEconomy+3,     WordIndustrial                    ,0          ;18
dictionary.asm(222): warning: value 0x8E7C is truncated to 8bit value: 0x7C
dictionary.asm(222): warning: value 0x8E88 is truncated to 8bit value: 0x88
 222+ 8F57 7C 88 00     TextRichAgricultural        DB  WordIdxEconomy,       WordIdxGovernment                 ,0          ;19
dictionary.asm(223): warning: value 0x8E7D is truncated to 8bit value: 0x7D
dictionary.asm(223): warning: value 0x8E88 is truncated to 8bit value: 0x88
 223+ 8F5A 7D 88 00     TextAvgAgricultural         DB  WordIdxEconomy+1,     WordIdxGovernment                 ,0          ;20
dictionary.asm(224): warning: value 0x8E7E is truncated to 8bit value: 0x7E
dictionary.asm(224): warning: value 0x8E88 is truncated to 8bit value: 0x88
 224+ 8F5D 7E 88 00     TextMainAgricultural        DB  WordIdxEconomy+2,     WordIdxGovernment                 ,0          ;21
dictionary.asm(225): warning: value 0x8E7F is truncated to 8bit value: 0x7F
dictionary.asm(225): warning: value 0x8E88 is truncated to 8bit value: 0x88
 225+ 8F60 7F 88 00     TextPoorAgricultural        DB  WordIdxEconomy+3,     WordIdxGovernment                 ,0          ;22
dictionary.asm(226): warning: value 0x8E9A is truncated to 8bit value: 0x9A
dictionary.asm(226): warning: value 0x8E9C is truncated to 8bit value: 0x9C
 226+ 8F63 9A 9C 00     TextLightYears				DB  WordIdxLight,         WordIdxYears,0			 ;23
dictionary.asm(227): warning: value 0x8E9E is truncated to 8bit value: 0x9E
dictionary.asm(227): warning: value 0x8E9A is truncated to 8bit value: 0x9A
dictionary.asm(227): warning: value 0x8E9C is truncated to 8bit value: 0x9C
 227+ 8F66 9E 9A 9C 00  Text0LightYears				DB  WordIdx0,WordIdxLight,WordIdxYears,0		 ;24
dictionary.asm(228): warning: value 0x8EA0 is truncated to 8bit value: 0xA0
dictionary.asm(228): warning: value 0x8EA1 is truncated to 8bit value: 0xA1
 228+ 8F6A A0 A1 00     TextMarketPrices			DB  WordIdxMarketmenu,    WordIdxMarketmenu+1,0			 ;25
dictionary.asm(229): warning: value 0x8EBA is truncated to 8bit value: 0xBA
dictionary.asm(229): warning: value 0x8EBC is truncated to 8bit value: 0xBC
 229+ 8F6D BA BC        TextEquipShip               DB  WordIdxEquip,         WordIdxShip          ;26
 230+ 8F6F
 231+ 8F6F 00           TextDummy					DB  0
 232+ 8F70
 233+ 8F70 18 8F 1C 8F  TextTokens			DW  TextLargeCargoBay,   TextEscapePod, TextFuelScoops				; 0 1 2
 233+ 8F74 1F 8F
 234+ 8F76 22 8F 25 8F  					DW  TextECMSystem,       TextEnergyBomb, TextEnergyUnit					; 3 4 5
 234+ 8F7A 28 8F
 235+ 8F7C 2B 8F 2E 8F  					DW  TextDockingComp,     TextGalacticHyper  							; 6 7
 236+ 8F80 31 8F 35 8F  					DW	TextFrontLaser,      TextLeftLaser, TextRightLaser, TextRearLaser	; 8 9 10 11
 236+ 8F84 39 8F 3D 8F
 237+ 8F88 41 8F 45 8F  					DW  TextShortRangeChart, TextGalacticChart, TextDataOn				; 12 13 14
 237+ 8F8C 48 8F
 238+ 8F8E 4B 8F 4E 8F  TextTokenEconomy	DW  TextRichIndustrial,  TextAvgIndustrial, TextPoorIndustrial, TextMainIndustrial, TextMainAgricultural, TextRichAgricultural, TextAvgAgricultural,  TextPoorAgricultural
 238+ 8F92 54 8F 51 8F
 238+ 8F96 5D 8F 57 8F
 238+ 8F9A 5A 8F 60 8F
 239+ 8F9E 63 8F        					DW  TextLightYears		                                            ; 21 23
 240+ 8FA0 66 8F 6A 8F  					DW  Text0LightYears,     TextMarketPrices
 241+ 8FA4 6F 8F        					DW  TextDummy;  25
 242+ 8FA6 00 00 00...  TextBuffer			DS	33
 243+ 8FC7
 244+ 8FC7              TextEconomyOffset   EQU (TextTokenEconomy - TextTokens)/2
 245+ 8FC7              TextGovOffset       EQU (WordIdxGovernment - WordIdx)/2
 246+ 8FC7
 247+ 8FC7              CapitaliseString:
 248+ 8FC7              ; ">CapitaliseString hl = address"
 249+ 8FC7              .CapLoop:
 250+ 8FC7 23           	inc		hl
 251+ 8FC8 7E           	ld		a,(hl)
 252+ 8FC9 FE 00        	cp		0
 253+ 8FCB C8           	ret		z
 254+ 8FCC FE 5B        	cp		'Z'+1
 255+ 8FCE 30 F7        	jr		nc,.CapLoop
 256+ 8FD0 FE 41        	cp		'A'
 257+ 8FD2 38 F3        	jr		c,.CapLoop
 258+ 8FD4              .LowerCase:
 259+ 8FD4 C6 20        	add		a,'a'-'A'
 260+ 8FD6 77           	ld		(hl),a
 261+ 8FD7 18 EE        	jr		.CapLoop
 262+ 8FD9
 263+ 8FD9 21 C0 8E     ShipIndexToAddress      ld      hl,WordIdxShipNames
 264+ 8FDC C3 E2 8F                             jp      WordLookup
 265+ 8FDF
 266+ 8FDF 21 F0 8D     WordIndexToAddress:     ld		hl,WordIdx
 267+ 8FE2 ED 31        WordLookup:             add		hl,a
 268+ 8FE4 ED 31                                add		hl,a
 269+ 8FE6 D5                                   push	de
 270+ 8FE7 5E                                   ld		e,(hl)
 271+ 8FE8 23                                   inc		hl
 272+ 8FE9 56                                   ld		d,(hl)
 273+ 8FEA EB                                   ex		de,hl
 274+ 8FEB D1                                   pop		de
 275+ 8FEC C9                                   ret
 276+ 8FED
 277+ 8FED
 278+ 8FED              ; ">expandTokenToString a = texttoken"
 279+ 8FED 21 70 8F     expandTokenToString:    ld		hl,TextTokens
 280+ 8FF0 CD 39 89                             call	getTableText
 281+ 8FF3 11 A6 8F                             ld		de,TextBuffer
 282+ 8FF6 7E           .ReadLoop:              ld		a,(hl)
 283+ 8FF7 FE 00                                cp		0
 284+ 8FF9 28 19                                jr		z,.ReadDone
 285+ 8FFB E5                                   push	hl
 286+ 8FFC 21 F0 8D                             ld		hl,WordIdx
 287+ 8FFF CD 39 89                             call	getTableText
 288+ 9002 7E           .WordExpandLoop:        ld		a,(hl)
 289+ 9003 FE 00                                cp		0
 290+ 9005 28 05                                jr		z,.AddSpace
 291+ 9007              ;.GetChar:
 292+ 9007 12                                   ld		(de),a
 293+ 9008 13                                   inc		de
 294+ 9009 23                                   inc		hl
 295+ 900A 18 F6                                jr		.WordExpandLoop
 296+ 900C 3E 20        .AddSpace:              ld		a,' '
 297+ 900E 12                                   ld		(de),a
 298+ 900F 13                                   inc		de
 299+ 9010 E1                                   pop		hl
 300+ 9011 23                                   inc		hl
 301+ 9012 18 E2                                jr		.ReadLoop
 302+ 9014 1B           .ReadDone:              dec		de
 303+ 9015 AF                                   xor		a
 304+ 9016 12                                   ld		(de),a
 305+ 9017 C9                                   ret
 306+ 9018
# file closed: ./Tables/dictionary.asm
 571  9018                  INCLUDE "./Tables/name_digrams.asm"
# file opened: ./Tables/name_digrams.asm
   1+ 9018 41 42 4F 55  name_digrams	DB "ABOUSEITILETSTONLONUTHNO"
   1+ 901C 53 45 49 54
   1+ 9020 49 4C 45 54
   1+ 9024 53 54 4F 4E
   1+ 9028 4C 4F 4E 55
   1+ 902C 54 48 4E 4F
   2+ 9030 41 4C 4C     name_digrams2   DB "ALL"
   3+ 9033 45 58 45 47  				DB "EXEGEZACEBISOUSESARMAINDIREA"
   3+ 9037 45 5A 41 43
   3+ 903B 45 42 49 53
   3+ 903F 4F 55 53 45
   3+ 9043 53 41 52 4D
   3+ 9047 41 49 4E 44
   3+ 904B 49 52 45 41
   4+ 904F 3F 45 52 41  				DB "?ERATENBERALAVETIEDORQUANTEISRION"
   4+ 9053 54 45 4E 42
   4+ 9057 45 52 41 4C
   4+ 905B 41 56 45 54
   4+ 905F 49 45 44 4F
   4+ 9063 52 51 55 41
   4+ 9067 4E 54 45 49
   4+ 906B 53 52 49 4F
   4+ 906F 4E
   5+ 9070
   6+ 9070              ; TODO Moveinto galaxy data module
   7+ 9070 00 00 00...  name_expanded	DS 32
   8+ 9090 00           				DB 0
   9+ 9091
  10+ 9091
  11+ 9091
  12+ 9091              NamingLoop:
  13+ 9091 3A 4B 80     	ld		a,(WorkingSeeds+5)	; a = first byte of name seed
  14+ 9094 E6 1F        	and 	$1F					; Keep bottom 5 bits only
  15+ 9096 FE 00        	cp		0					; 0 = skip 2 chars
  16+ 9098 28 12        	jr		z,.SkipPhrase
  17+ 909A C6 0C        	add		a,12
  18+ 909C CB 27        	sla		a					; phrase = (a+12)*2
  19+ 909E 21 18 90     	ld		hl,name_digrams
  20+ 90A1 ED 31        	add		hl,a
  21+ 90A3 ED A0        	ldi
  22+ 90A5 7E           	ld		a,(hl)
  23+ 90A6 FE 3F        	cp		'?'
  24+ 90A8 28 02        	jr		z,.SkipPhrase
  25+ 90AA              .AddExtra:
  26+ 90AA ED A0        	ldi
  27+ 90AC              .SkipPhrase:
  28+ 90AC D5           	push	de
  29+ 90AD CD C1 86     	call	working_seed
  30+ 90B0 D1           	pop		de
  31+ 90B1 C9           	ret
  32+ 90B2
  33+ 90B2              ;GetDigramGalaxySeed:
  34+ 90B2              ;	call	copy_galaxy_to_working
  35+ 90B2              ;	jr		GetDigramWorkingSeed
  36+ 90B2              ;GetDigramSystemSeed:
  37+ 90B2              ;	call	copy_system_to_working
  38+ 90B2              ;GetDigramWorkingSeed:
  39+ 90B2              ;; ">GetDigram a = digram seed"
  40+ 90B2              ;	ld		de,name_expanded
  41+ 90B2              ;	ld		b,3
  42+ 90B2              ;	ld		a,(WorkingSeeds)
  43+ 90B2              ;	and		$40
  44+ 90B2              ;	jr		z,.SmallSizeName
  45+ 90B2              ;.LargeSizeName:
  46+ 90B2              ;	call	NamingLoop
  47+ 90B2              ;.SmallSizeName:
  48+ 90B2              ;	call	NamingLoop
  49+ 90B2              ;	call	NamingLoop
  50+ 90B2              ;	call	NamingLoop
  51+ 90B2              ;.DoneName:
  52+ 90B2              ;	ex		de,hl
  53+ 90B2              ;	ld		(hl),0
  54+ 90B2              ;	ex		de,hl
  55+ 90B2              ;	ret
  56+ 90B2
  57+ 90B2
  58+ 90B2
  59+ 90B2              ;GetDigramWorkingSeed:
  60+ 90B2              ;	MESSAGE ">GetDigram a = digram seed b = length"
  61+ 90B2              ;	ld		b,5					; working seed
  62+ 90B2              ;	ld		de,name_expanded
  63+ 90B2              ;.ExpansionLoop:
  64+ 90B2              ;	push	bc
  65+ 90B2              ;	ld		hl,WorkingSeeds
  66+ 90B2              ;	ld		a,b
  67+ 90B2              ;	add		hl,a
  68+ 90B2              ;	ld		a,(hl)	; a = first byte of name seed
  69+ 90B2              ;	and 	$1F					; Keep bottom 5 bits only
  70+ 90B2              ;	cp		0					; 0 = skip 2 chars
  71+ 90B2              ;	jr		z,.SkipPhrase
  72+ 90B2              ;	or		&80					; set buit 7 high (probabtyl capitalisation)
  73+ 90B2              ;	call	TT27
  74+ 90B2              ;.SkipPhrase:
  75+ 90B2              ;	push	de
  76+ 90B2              ;	call	next_working_seed
  77+ 90B2              ;	pop		de
  78+ 90B2              ;	pop		bc
  79+ 90B2              ;	djnz	GetDigramWorkingSeed
  80+ 90B2              ;.DoneName:
  81+ 90B2              ;	ex		de,hl
  82+ 90B2              ;	ld		(hl),0
  83+ 90B2              ;	ex		de,hl
  84+ 90B2              ;	ret
  85+ 90B2              ;
  86+ 90B2              ;ExpandToken:
  87+ 90B2              ;	DE = target
  88+ 90B2              ;	a = token
  89+ 90B2              ;
  90+ 90B2              ;PlanetDigram:
  91+ 90B2              ;	cp		&A0							; >- 160
  92+ 90B2              ;	jr		c,MorePage4
  93+ 90B2              ;	and		$7F							; 128 to 159 now 0 to 31
  94+ 90B2              ;	asl		2							; Multiply by 2
  95+ 90B2              ;	ld		hl, name_digrams2
  96+ 90B2              ;	add		hl,a
  97+ 90B2              ;	ld		a,(hl)
  98+ 90B2              ;	call	ProcessTextToken
  99+ 90B2              ;	inc		hl
 100+ 90B2              ;	ld		a,(hl)
 101+ 90B2              ;	cp		'?'
 102+ 90B2              ;	ret		z
 103+ 90B2              ;	call	ProcessTextToken
 104+ 90B2              ;	ret
 105+ 90B2              ;MorePage4:
 106+ 90B2              ;	sub		$A0
 107+ 90B2              ;ExtraTokenCheck:
 108+ 90B2              ;	push	de							; save target address
 109+ 90B2              ;	push	bc
 110+ 90B2              ;	ld		b,a
 111+ 90B2              ;	ld		hl,varV
 112+ 90B2              ;	ld		(VarV),0400
 113+ 90B2              ;	ld		(varV),a
 114+ 90B2              ;	ld
 115+ 90B2              ;
 116+ 90B2              ;		.TT43	\ Token > 127 page4 token or planet digram.
 117+ 90B2              ;C9 A0                   CMP #&A0	      \ >= #160 ?
 118+ 90B2              ;B0 14                   BCS TT47	      \ more page4, subtract #160
 119+ 90B2              ;29 7F                   AND #&7F	      \ else token 128to159  -> 0 to 31
 120+ 90B2              ;0A                      ASL A		      \ *= 2
 121+ 90B2              ;A8                      TAY 		      \ digram index = 0to62
 122+ 90B2              ;B9 80 08                LDA &0880,Y \ QQ16,Y  \ ALLEXEGEZACEBISOUSESARMAINDIREA?ER  etc.
 123+ 90B2              ;20 9A 33                JSR &339A   \ TT27    \ process text token
 124+ 90B2              ;B9 81 08                LDA &0881,Y \ QQ16+1,Y \ 2nd character of diagram. Flight copied down from docked code.
 125+ 90B2              ;C9 3F                   CMP #&3F	      \ is second letter '?'
 126+ 90B2              ;F0 40                   BEQ TT48    	      \ rts, name has odd-number of letters.
 127+ 90B2              ;4C 9A 33                JMP &339A   \ TT27    \ process text token
 128+ 90B2              ;
 129+ 90B2              ;	.TT47	\ more page4, subtract #160
 130+ 90B2              ;E9 A0                   SBC #&A0	\ -= 160
 131+ 90B2              ;	.ex	\ -> &342D \ extra, token >= 96 or Acc = 128to145 or -=160
 132+ 90B2              ;AA                      TAX 		\ copy of word index
 133+ 90B2              ;A9 00                   LDA #0		\ page 4 words lo  #QQ18 MOD 256
 134+ 90B2              ;85 22                   STA &22		\ V
 135+ 90B2              ;A9 04                   LDA #4		\ page 4 words hi  #QQ18 DIV 256
 136+ 90B2              ;85 23                   STA &23		\ V+1
 137+ 90B2              ;A0 00                   LDY #0
 138+ 90B2              ;8A                      TXA 		\ token = word index
 139+ 90B2              ;F0 13                   BEQ TT50	\ if X=0 then Y offset to word correct
 140+ 90B2              ;	.TT51	\ counters Y letter, X token
 141+ 90B2              ;B1 22                   LDA (&22),Y	\ (V),Y
 142+ 90B2              ;F0 07                   BEQ TT49	\ exit as word ended
 143+ 90B2              ;C8                      INY 		\ letter count
 144+ 90B2              ;D0 F9                   BNE TT51	\ loop Y
 145+ 90B2              ;E6 23                   INC &23	  \ V+1 \ next page as Y reached 256
 146+ 90B2              ;D0 F5                   BNE TT51    	\ guaranteed, loop Y letter
 147+ 90B2              ;	.TT49	\ word ended
 148+ 90B2              ;C8                      INY
 149+ 90B2              ;D0 02                   BNE TT59    	\ next word
 150+ 90B2              ;E6 23                   INC &23	  \ V+1	\ next page as Y reached 256
 151+ 90B2              ;	.TT59	\ next word
 152+ 90B2              ;CA                      DEX 		\ token count
 153+ 90B2              ;D0 ED                   BNE TT51	\ loop X token
 154+ 90B2              ;	.TT50	\ token X = 0, counter Y offset to word correct
 155+ 90B2              ;98                      TYA
 156+ 90B2              ;48                      PHA 		\ store Yindex
 157+ 90B2              ;A5 23                   LDA &23		\ V+1
 158+ 90B2              ;48                      PHA 		\ correct pointer hi
 159+ 90B2              ;B1 22                   LDA (&22),Y 	\ (V),Y
 160+ 90B2              ;49 23                   EOR #&23	\ decode '#'
 161+ 90B2              ;20 9A 33                JSR &339A \ TT27 \ process text token to next depth
 162+ 90B2              ;68                      PLA 		\ restore this depth's Vhi
 163+ 90B2              ;85 23                   STA &23		\ V+1
 164+ 90B2              ;68                      PLA
 165+ 90B2              ;A8                      TAY 		\ restore this depth's Yindex
 166+ 90B2              ;C8                      INY 		\ next letter
 167+ 90B2              ;D0 02                   BNE P%+4	\ not zero so skip next page
 168+ 90B2              ;E6 23                   INC &23		\ V+1
 169+ 90B2              ;B1 22                   LDA (&22),Y	\ (V),Y
 170+ 90B2              ;D0 E6                   BNE TT50    	\ loop Y for next letter of page4 token
 171+ 90B2              ;	.TT48 	\ rts
 172+ 90B2              ;60                      RTS 		\ end of flight token printing TT27
 173+ 90B2              ;
 174+ 90B2              ;
 175+ 90B2              ;
 176+ 90B2              ;
 177+ 90B2              ;
 178+ 90B2              ;
 179+ 90B2              ;		.TT27	\ -> &36E0 \ process flight text Token in Acc
 180+ 90B2              ;;AA                      TAX		\ copy token to count down
 181+ 90B2              ;;F0 DE                   BEQ csh		\ Acc = 0, up to Cash
 182+ 90B2              ;30 74                   BMI TT43	\ if token is >  127 down, page4 token or digram
 183+ 90B2              ;CA                      DEX
 184+ 90B2              ;F0 BC                   BEQ tal		\ Acc == 1, up, print Galaxy number.
 185+ 90B2              ;CA                      DEX
 186+ 90B2              ;F0 A3                   BEQ ypl		\ Acc == 2, up, present planet in QQ2.
 187+ 90B2              ;CA                      DEX
 188+ 90B2              ;D0 03                   BNE P%+5	\ hop over, else X == 0
 189+ 90B2              ;4C 0A 33                JMP &330A \ cpl \ Acc = 3 print Planet name for seed QQ15
 190+ 90B2              ;CA                      DEX
 191+ 90B2              ;F0 8A                   BEQ cmn		\ Acc == 4, up, commander name.
 192+ 90B2              ;CA                      DEX
 193+ 90B2              ;F0 B5                   BEQ fwl		\ Acc == 5, up, fuel followed by cash.
 194+ 90B2              ;CA                      DEX
 195+ 90B2              ;D0 05                   BNE  P%+7	\ hop over, else X == 0
 196+ 90B2              ;A9 80                   LDA #&80	\ Acc == 6, set bit 7 TT27m
 197+ 90B2              ;85 72                   STA &72	 	\ QQ17
 198+ 90B2              ;60                      RTS
 199+ 90B2              ;CA                      DEX 		\ skip Acc ==7
 200+ 90B2              ;CA                      DEX
 201+ 90B2              ;D0 03                   BNE P%+5	\ hop over to continue Acc 9to127
 202+ 90B2              ;86 72                   STX &72	 \ QQ17	\ else Acc ==8, QQ17 set to X = 0
 203+ 90B2              ;60                      RTS
 204+ 90B2              ;CA                      DEX 		\ continue 9to127 tokens
 205+ 90B2              ;F0 38                   BEQ crlf	\ Acc == 9, down, colon on right.
 206+ 90B2              ;C9 60                   CMP #&60	\ discard X, look at Acc = token >= 96
 207+ 90B2              ;B0 66                   BCS ex   	\ extra >= #&60, far down
 208+ 90B2              ;C9 0E                   CMP #14		\ < 14 ?
 209+ 90B2              ;90 04                   BCC P%+6	\ goes to Token < 14 or > 31
 210+ 90B2              ;C9 20                   CMP #32		\ < 32 ?
 211+ 90B2              ;90 28                   BCC qw   	\ 14 <= token A < 32 becomes 128to145 page4 digram
 212+ 90B2              ;		\ Token  < 14 or > 31
 213+ 90B2              ;A6 72                   LDX &72	 	\ QQ17
 214+ 90B2              ;F0 3D                   BEQ TT74 	\ if QQ17 = 0 Upper case, jmp TT26, print character.
 215+ 90B2              ;30 11                   BMI TT41 	\ if bit7 set
 216+ 90B2              ;24 72                   BIT &72		\ QQ17 has bit6 set too
 217+ 90B2              ;70 30                   BVS TT46 	\ If only bit6 set, clear bit6 and print as Upper
 218+ 90B2              ;	.TT42	\ Uppercase to lowercase
 219+ 90B2              ;C9 41                   CMP #&41	\ < ascii 'A'
 220+ 90B2              ;90 06                   BCC TT44 	\ jmp TT26, print character
 221+ 90B2              ;C9 5B                   CMP #&5B	\ >= ascii 'Z'+1
 222+ 90B2              ;B0 02                   BCS TT44 	\ jmp TT26, print character
 223+ 90B2              ;69 20                   ADC #&20	\ else Upper to lowercase
 224+ 90B2              ;	.TT44	\ print character as is with TT26
 225+ 90B2              ;4C FC 1E                JMP &1EFC \ TT26 \ print character
 226+ 90B2              ;
 227+ 90B2              ;	.TT41	\ QQ17 bit7 set
 228+ 90B2              ;24 72                   BIT &72		\ QQ17
 229+ 90B2              ;70 17                   BVS TT45	\ bit6 set too, Nothing or lower.
 230+ 90B2              ;C9 41                   CMP #&41	\ < ascii 'A'
 231+ 90B2              ;90 22                   BCC TT74 	\ print as is using TT26
 232+ 90B2              ;48                      PHA 		\ else store token Acc
 233+ 90B2              ;8A                      TXA 		\ QQ17 copy
 234+ 90B2              ;09 40                   ORA #&40	\ set bit6 in QQ17 so subsequent ones lower
 235+ 90B2              ;85 72                   STA &72	 	\ QQ17
 236+ 90B2              ;68                      PLA 		\ restore token
 237+ 90B2              ;D0 EC                   BNE TT44	\ guaranteed up, print as Uppercase with TT26.
 238+ 90B2              ;
 239+ 90B2              ;	.qw	\ Acc = 14to31 becomes 128to145 page4 digram
 240+ 90B2              ;69 72                   ADC #&72	\ A+=114 becomes 128to145 page4 digram
 241+ 90B2              ;D0 32                   BNE ex		\ guaranteed down, extra.
 242+ 90B2              ;
 243+ 90B2              ;	.crlf	\ Acc == 9,  colon on right
 244+ 90B2              ;A9 15                   LDA #21		\ on right
 245+ 90B2              ;85 2C                   STA &2C		\ XC
 246+ 90B2              ;D0 97                   BNE TT73	\ guaranteed up, print colon.
 247+ 90B2              ;
 248+ 90B2              ;	.TT45	\ QQ17 bits 7,6 set. Nothing or lower.
 249+ 90B2              ;E0 FF                   CPX #&FF	\ if QQ17 = #&FF
 250+ 90B2              ;F0 63                   BEQ TT48	\ rts
 251+ 90B2              ;C9 41                   CMP #&41	\ >= ascii 'A' ?
 252+ 90B2              ;B0 D0                   BCS TT42	\ Uppercase to lowercase, up.
 253+ 90B2              ;	.TT46	\ clear bit6 QQ17 and print as is using TT26
 254+ 90B2              ;48                      PHA 		\ push token
 255+ 90B2              ;8A                      TXA 		\ QQ17 copy
 256+ 90B2              ;29 BF                   AND #&BF	\ clear bit6
 257+ 90B2              ;85 72                   STA &72	 	\ QQ17
 258+ 90B2              ;68                      PLA 		\ pull token
 259+ 90B2              ;	.TT74	\ TT26, print character.
 260+ 90B2              ;4C FC 1E                JMP &1EFC	\ TT26
 261+ 90B2              ;
 262+ 90B2              ;	.TT43	\ Token > 127 page4 token or planet digram.
 263+ 90B2              ;C9 A0                   CMP #&A0	      \ >= #160 ?
 264+ 90B2              ;B0 14                   BCS TT47	      \ more page4, subtract #160
 265+ 90B2              ;29 7F                   AND #&7F	      \ else token 128to159  -> 0 to 31
 266+ 90B2              ;0A                      ASL A		      \ *= 2
 267+ 90B2              ;A8                      TAY 		      \ digram index = 0to62
 268+ 90B2              ;B9 80 08                LDA &0880,Y \ QQ16,Y  \ ALLEXEGEZACEBISOUSESARMAINDIREA?ER  etc.
 269+ 90B2              ;20 9A 33                JSR &339A   \ TT27    \ process text token
 270+ 90B2              ;B9 81 08                LDA &0881,Y \ QQ16+1,Y \ 2nd character of diagram. Flight copied down from docked code.
 271+ 90B2              ;C9 3F                   CMP #&3F	      \ is second letter '?'
 272+ 90B2              ;F0 40                   BEQ TT48    	      \ rts, name has odd-number of letters.
 273+ 90B2              ;4C 9A 33                JMP &339A   \ TT27    \ process text token
 274+ 90B2              ;
 275+ 90B2              ;	.TT47	\ more page4, subtract #160
 276+ 90B2              ;E9 A0                   SBC #&A0	\ -= 160
 277+ 90B2              ;	.ex	\ -> &342D \ extra, token >= 96 or Acc = 128to145 or -=160
 278+ 90B2              ;AA                      TAX 		\ copy of word index
 279+ 90B2              ;A9 00                   LDA #0		\ page 4 words lo  #QQ18 MOD 256
 280+ 90B2              ;85 22                   STA &22		\ V
 281+ 90B2              ;A9 04                   LDA #4		\ page 4 words hi  #QQ18 DIV 256
 282+ 90B2              ;85 23                   STA &23		\ V+1
 283+ 90B2              ;A0 00                   LDY #0
 284+ 90B2              ;8A                      TXA 		\ token = word index
 285+ 90B2              ;F0 13                   BEQ TT50	\ if X=0 then Y offset to word correct
 286+ 90B2              ;	.TT51	\ counters Y letter, X token
 287+ 90B2              ;B1 22                   LDA (&22),Y	\ (V),Y
 288+ 90B2              ;F0 07                   BEQ TT49	\ exit as word ended
 289+ 90B2              ;C8                      INY 		\ letter count
 290+ 90B2              ;D0 F9                   BNE TT51	\ loop Y
 291+ 90B2              ;E6 23                   INC &23	  \ V+1 \ next page as Y reached 256
 292+ 90B2              ;D0 F5                   BNE TT51    	\ guaranteed, loop Y letter
 293+ 90B2              ;	.TT49	\ word ended
 294+ 90B2              ;C8                      INY
 295+ 90B2              ;D0 02                   BNE TT59    	\ next word
 296+ 90B2              ;E6 23                   INC &23	  \ V+1	\ next page as Y reached 256
 297+ 90B2              ;	.TT59	\ next word
 298+ 90B2              ;CA                      DEX 		\ token count
 299+ 90B2              ;D0 ED                   BNE TT51	\ loop X token
 300+ 90B2              ;	.TT50	\ token X = 0, counter Y offset to word correct
 301+ 90B2              ;98                      TYA
 302+ 90B2              ;48                      PHA 		\ store Yindex
 303+ 90B2              ;A5 23                   LDA &23		\ V+1
 304+ 90B2              ;48                      PHA 		\ correct pointer hi
 305+ 90B2              ;B1 22                   LDA (&22),Y 	\ (V),Y
 306+ 90B2              ;49 23                   EOR #&23	\ decode '#'
 307+ 90B2              ;20 9A 33                JSR &339A \ TT27 \ process text token to next depth
 308+ 90B2              ;68                      PLA 		\ restore this depth's Vhi
 309+ 90B2              ;85 23                   STA &23		\ V+1
 310+ 90B2              ;68                      PLA
 311+ 90B2              ;A8                      TAY 		\ restore this depth's Yindex
 312+ 90B2              ;C8                      INY 		\ next letter
 313+ 90B2              ;D0 02                   BNE P%+4	\ not zero so skip next page
 314+ 90B2              ;E6 23                   INC &23		\ V+1
 315+ 90B2              ;B1 22                   LDA (&22),Y	\ (V),Y
 316+ 90B2              ;D0 E6                   BNE TT50    	\ loop Y for next letter of page4 token
 317+ 90B2              ;	.TT48 	\ rts
 318+ 90B2              ;60                      RTS 		\ end of flight token printing TT27
 319+ 90B2              ;
 320+ 90B2              ;
 321+ 90B2              ;
# file closed: ./Tables/name_digrams.asm
 572  90B2              ;INCLUDE "Tables/inwk_table.asm" This is no longer needed as we will write to univer object bank
 573  90B2              ; Include all maths libraries to test assembly
 574  90B2                  INCLUDE "./Maths/asm_AddDEToCash.asm"
# file opened: ./Maths/asm_AddDEToCash.asm
   1+ 90B2              ; Note its big endian
   2+ 90B2 2A 8F 85     addDEtoCash:            ld      hl,(Cash)
   3+ 90B5 19                                   add     hl,de
   4+ 90B6 22 8F 85                             ld      (Cash),hl
   5+ 90B9 11 00 00                             ld      de,0
   6+ 90BC 2A 91 85                             ld      hl,(Cash+2)
   7+ 90BF ED 5A                                adc     hl,de
   8+ 90C1 22 91 85                             ld      (Cash+2),hl
   9+ 90C4 C9                                   ret
  10+ 90C5
  11+ 90C5 2A 8F 85     subDEfromCash:          ld      hl,(Cash)
  12+ 90C8 7C                                   ld      a,h
  13+ 90C9 B5                                   or      l
  14+ 90CA 2A 91 85                             ld      hl,(Cash+2)
  15+ 90CD B4                                   or      h
  16+ 90CE B5                                   or      l
  17+ 90CF C8                                   ret     z               ; No cash return
  18+ 90D0 B7                                   or      a
  19+ 90D1 2A 8F 85                             ld      hl,(Cash)
  20+ 90D4 ED 52                                sbc     hl,de
  21+ 90D6 22 8F 85                             ld      (Cash),hl
  22+ 90D9 11 00 00                             ld      de,0
  23+ 90DC 2A 91 85                             ld      hl,(Cash+2)
  24+ 90DF ED 52                                sbc     hl,de
  25+ 90E1 22 91 85                             ld      (Cash+2),hl
  26+ 90E4                                      JumpOnBitSet h,7,.ZeroCash
  26+ 90E4 CB 7C       >                        bit 	7,h
  26+ 90E6 C2 EA 90    >                        jp      nz,.ZeroCash
  27+ 90E9 C9                                   ret
  28+ 90EA 21 00 00     .ZeroCash:              ld      hl,0
  29+ 90ED 22 8F 85                             ld      (Cash),hl
  30+ 90F0 22 91 85                             ld      (Cash+2),hl
  31+ 90F3 C9                                   ret
  32+ 90F4
# file closed: ./Maths/asm_AddDEToCash.asm
 575  90F4                  INCLUDE "./Maths/DIVD3B2.asm"
# file opened: ./Maths/DIVD3B2.asm
   1+ 90F4              ;INPUTS: ahl = dividend cde = divisor
   2+ 90F4              ;OUTPUTS: cde = quotient ahl = remainder
   3+ 90F4 47           Div24by24:              ld b,a
   4+ 90F5 E5                                   push hl
   5+ 90F6 DD E1                                pop ix
   6+ 90F8 2E 18                                ld l,24
   7+ 90FA E5                                   push hl
   8+ 90FB AF                                   xor a
   9+ 90FC 67                                   ld h,a
  10+ 90FD 6F                                   ld l,a
  11+ 90FE DD 29        .Div24by24loop:         add ix,ix
  12+ 9100 CB 10                                rl b
  13+ 9102 ED 6A                                adc hl,hl
  14+ 9104 17                                   rla
  15+ 9105 B9                                   cp c
  16+ 9106 38 0C                                jr c,.Div24by24skip
  17+ 9108 20 05                                jr nz,.Div24by24setbit
  18+ 910A ED 52                                sbc hl,de
  19+ 910C 19                                   add hl,de
  20+ 910D 38 05                                jr c,.Div24by24skip
  21+ 910F ED 52        .Div24by24setbit:       sbc hl,de
  22+ 9111 99                                   sbc a,c
  23+ 9112 DD 23                                inc ix
  24+ 9114 E3           .Div24by24skip:         ex (sp),hl
  25+ 9115 2D                                   dec l
  26+ 9116 E3                                   ex (sp),hl
  27+ 9117 20 E5                                jr nz,.Div24by24loop
  28+ 9119 D1                                   pop de
  29+ 911A 48                                   ld c,b
  30+ 911B DD E5                                push ix
  31+ 911D D1                                   pop de
  32+ 911E C9                                   ret
  33+ 911F
  34+ 911F FD 67        Div24by24ASigned:       ld      iyh,a
  35+ 9121 E6 7F                                and     SignMask8Bit
  36+ 9123 CD F4 90                             call    Div24by24
  37+ 9126 F5                                   push    af
  38+ 9127 FD 7C                                ld      a,iyh
  39+ 9129 E6 80                                and     SignOnly8Bit
  40+ 912B B1                                   or      c
  41+ 912C 4F                                   ld      c,a
  42+ 912D F1                                   pop     af
  43+ 912E C9                                   ret
  44+ 912F
  45+ 912F                                      ; CDE = AHL/CDE, AHL = remainder
  46+ 912F FD 67        Div24by24LeadSign:      ld      iyh,a           ; Preserve signed in IYL
  47+ 9131 A9                                   xor     c               ; flip sign if negative
  48+ 9132 E6 80                                and     SignOnly8Bit    ; .
  49+ 9134 FD 6F                                ld      iyl,a           ; .
  50+ 9136 79                                   ld      a,c             ; make both values ABS
  51+ 9137 E6 7F                                and     SignMask8Bit    ; .
  52+ 9139 4F                                   ld      c,a             ; .
  53+ 913A FD 7C                                ld      a,iyh           ; .
  54+ 913C E6 7F                                and     SignMask8Bit    ; .
  55+ 913E CD F4 90                             call    Div24by24       ; do abs divide
  56+ 9141 FD B5                                or      iyl             ; bring in sign bit
  57+ 9143 FD 67                                ld      iyh,a           ; save a
  58+ 9145 79                                   ld      a,c             ; sort sign for c
  59+ 9146 FD B5                                or      iyl             ;
  60+ 9148 4F                                   ld      c,a             ;
  61+ 9149 FD 7C                                ld      a,iyh           ; sort sign of a
  62+ 914B C9                                   ret
  63+ 914C
  64+ 914C              ; --------------------------------------------------------------
  65+ 914C              ;divdide by 16 using undocumented instrunctions
  66+ 914C              ;Input: BC = Dividend, DE = Divisor, HL = 0
  67+ 914C              ;Output: BC = Quotient, HL = Remainder
  68+ 914C 47           PROJ256mulAdivQ:        ld      b,a
  69+ 914D 0E 00                                ld      c,0
  70+ 914F 16 00                                ld      d,0
  71+ 9151 3A B6 7F                             ld      a,(varQ)
  72+ 9154 5F                                   ld      e,a
  73+ 9155 21 00 00     PROJDIV16UNDOC:         ld      hl,0
  74+ 9158 78                                   ld      a,b
  75+ 9159 06 10                                ld      b,16
  76+ 915B CB 31        PROJDIV16UNDOCLOOP:     sll     c       ; unroll 16 times
  77+ 915D 17                                   rla             ; ...
  78+ 915E ED 6A                                adc     hl,hl       ; ...
  79+ 9160 ED 52                                sbc     hl,de       ; ...
  80+ 9162 30 02                                jr      nc,PROJDIV16UNDOCSKIP       ; ...
  81+ 9164 19                                   add     hl,de       ; ...
  82+ 9165 0D                                   dec     c       ; ...
  83+ 9166 10 F3        PROJDIV16UNDOCSKIP:     djnz    PROJDIV16UNDOCLOOP
  84+ 9168 79                                   ld      a,c
  85+ 9169 32 B7 7F                             ld      (varR),a
  86+ 916C C9                                   ret
  87+ 916D
  88+ 916D
  89+ 916D
  90+ 916D
# file closed: ./Maths/DIVD3B2.asm
 576  916D                  INCLUDE "./Maths/asm_multiply.asm"
# file opened: ./Maths/asm_multiply.asm
   1+ 916D              AequAdivDmul96Unsg:     JumpIfAGTENusng d, .Unity    			; if A >= Q then return with a 1 (unity i.e. 96)
   1+ 916D BA          >                        cp     d
   1+ 916E D2 89 91    >                        jp		nc,.Unity
   2+ 9171 06 FF                                ld          b,%11111111                 ; Loop through 8 bits
   3+ 9173 CB 27        .DivLoop:               sla         a                           ; shift a left
   4+ 9175                                      JumpIfALTNusng d, .skipSubtract         ; if a < q skip the following
   4+ 9175 BA          >                        cp      d
   4+ 9176 DA 7A 91    >                        jp		c, .skipSubtract
   5+ 9179 92                                   sub         d
   6+ 917A              .skipSubtract:          FlipCarryFlag
   6+ 917A 3F          >                        ccf
   7+ 917B CB 10                                rl          b
   8+ 917D 38 F4                                jr          c,.DivLoop
   9+ 917F 78                                   ld          a,b
  10+ 9180 CB 3F                                srl         a                  			; t = t /4
  11+ 9182 CB 3F                                srl			a							; result / 8
  12+ 9184 47                                   ld          b,a
  13+ 9185 CB 3F                                srl         a
  14+ 9187 80                                   add			a,b							; result /8 + result /4
  15+ 9188 C9                                   ret
  16+ 9189 3E 60        .Unity:                 ld			a,$60	    				; unity
  17+ 918B C9                                   ret
  18+ 918C
  19+ 918C
  20+ 918C              HLequSRmulQdiv256:      ;X.Y=x1lo.S*M/256  	\ where M/256 is gradient
  21+ 918C 2A B7 7F                             ld  hl,(varRS)
  22+ 918F 3A B6 7F                             ld  a,(varQ)
  23+ 9192 C5 D5        HLeqyHLmulAdiv256:      push    bc,,de
  24+ 9194 11 00 00                             ld  de,0        ; de = XY
  25+ 9197 47                                   ld  b,a         ; b = Q
  26+ 9198                                      ShiftHLRight1
  26+ 9198 CB 3C       >			   srl h
  26+ 919A CB 1D       >			   rr  l
  27+ 919C CB 20                                sla b
  28+ 919E 30 03                                jr  nc,.LL126
  29+ 91A0 EB           .LL125:                 ex de,hl
  30+ 91A1 19                                   add hl,de
  31+ 91A2 EB                                   ex  de,hl       ; de = de + rs
  32+ 91A3              .LL126:                 ShiftHLRight1
  32+ 91A3 CB 3C       >			   srl h
  32+ 91A5 CB 1D       >			   rr  l
  33+ 91A7 CB 20                                sla b
  34+ 91A9 38 F5                                jr      c,.LL125
  35+ 91AB 20 F6                                jr      nz,.LL126
  36+ 91AD EB                                   ex      de,hl   ; hl = result
  37+ 91AE D1 C1                                pop     bc,,de
  38+ 91B0 C9                                   ret
  39+ 91B1
  40+ 91B1              ; FMLTU - A = A * Q / 256
  41+ 91B1 57           AequAmulQdiv256usgn:    ld      d,a
  42+ 91B2 3A B6 7F                             ld      a,(varQ)
  43+ 91B5 5F                                   ld      e,a
  44+ 91B6              asm_defmutl:
  45+ 91B6              ; "ASM_FMUTKL .FMLTU	\ -> &2847  \ A=D*E/256unsg  Fast multiply"
  46+ 91B6 ED 30        AequDmulEdiv256usgn:    mul     de
  47+ 91B8 7A                                   ld	a,d				; we get only the high byte which is like doing a /256 if we think of a as low
  48+ 91B9 C9                                   ret
  49+ 91BA
  50+ 91BA
  51+ 91BA              ; muliptiply S7d ny S7e signed
  52+ 91BA              ; used A and B registers
  53+ 91BA              ; result in DE
  54+ 91BA 7A           mulDbyESigned:          ld      a,d
  55+ 91BB AB                                   xor     e
  56+ 91BC E6 80                                and     SignOnly8Bit
  57+ 91BE 47                                   ld      b,a
  58+ 91BF 7A                                   ld      a,d
  59+ 91C0 E6 7F                                and     SignMask8Bit
  60+ 91C2 57                                   ld      d,a
  61+ 91C3 7B                                   ld      a,e
  62+ 91C4 E6 7F                                and     SignMask8Bit
  63+ 91C6 5F                                   ld      e,a
  64+ 91C7 ED 30                                mul     de
  65+ 91C9 7A                                   ld      a,d
  66+ 91CA B0                                   or      b
  67+ 91CB 57                                   ld      d,a
  68+ 91CC C9                                   ret
  69+ 91CD
  70+ 91CD
  71+ 91CD
  72+ 91CD              MacroDEEquQmulASigned:  MACRO
  73+ 91CD ~                                    ld      d,a                         ; save a into d
  74+ 91CD ~                                    ld      a,(varQ)
  75+ 91CD ~                                    ld      e,a
  76+ 91CD ~                                    xor     d                           ; a = a xor var Q
  77+ 91CD ~                                    and     SignOnly8Bit
  78+ 91CD ~                                    ld      b,a                         ; b = sign of a xor q
  79+ 91CD ~                                    ld      a,d                         ; d = abs d (or a reg)
  80+ 91CD ~                                    and     SignMask8Bit
  81+ 91CD ~                                    ld      d,a
  82+ 91CD ~                                    ld      a,e                         ; e = abs e (or varQ)
  83+ 91CD ~                                    and     SignMask8Bit
  84+ 91CD ~                                    ld      e,a
  85+ 91CD ~                                    mul                                 ; de = a * Q
  86+ 91CD ~                                    ld      a,d
  87+ 91CD ~                                    or      b                           ; de = a * Q leading sign bit
  88+ 91CD ~                                    ld      d,a
  89+ 91CD                                      ENDM
  90+ 91CD
  91+ 91CD
  92+ 91CD
  93+ 91CD                                 ; .MAD	\ -> &22AD  \ Multiply and Add  (DE also) X.A(Lo.Hi) = Q*A + R.S (Lo.Hi)
  94+ 91CD              madXAequQmulAaddRS:     MacroDEEquQmulASigned
  94+ 91CD 57          >                        ld      d,a                         ; save a into d
  94+ 91CE 3A B6 7F    >                        ld      a,(varQ)
  94+ 91D1 5F          >                        ld      e,a
  94+ 91D2 AA          >                        xor     d                           ; a = a xor var Q
  94+ 91D3 E6 80       >                        and     SignOnly8Bit
  94+ 91D5 47          >                        ld      b,a                         ; b = sign of a xor q
  94+ 91D6 7A          >                        ld      a,d                         ; d = abs d (or a reg)
  94+ 91D7 E6 7F       >                        and     SignMask8Bit
  94+ 91D9 57          >                        ld      d,a
  94+ 91DA 7B          >                        ld      a,e                         ; e = abs e (or varQ)
  94+ 91DB E6 7F       >                        and     SignMask8Bit
  94+ 91DD 5F          >                        ld      e,a
  94+ 91DE ED 30       >                        mul                                 ; de = a * Q
  94+ 91E0 7A          >                        ld      a,d
  94+ 91E1 B0          >                        or      b                           ; de = a * Q leading sign bit
  94+ 91E2 57          >                        ld      d,a
  95+ 91E3 2A B7 7F                             ld		hl,(varR)
  96+ 91E6 CD 0E 92                             call	madXAAddHLDESigned
  97+ 91E9 EB                                   ex      de,hl                       ; de = R.S + DE
  98+ 91EA                                      ClearCarryFlag
  98+ 91EA B7          >                        or a
  99+ 91EB DD 6B                                ld      ixl,e
 100+ 91ED 7A                                   ld      a,d
 101+ 91EE C9                                   ret
 102+ 91EF
 103+ 91EF              madDEequQmulAaddRS:     MacroDEEquQmulASigned
 103+ 91EF 57          >                        ld      d,a                         ; save a into d
 103+ 91F0 3A B6 7F    >                        ld      a,(varQ)
 103+ 91F3 5F          >                        ld      e,a
 103+ 91F4 AA          >                        xor     d                           ; a = a xor var Q
 103+ 91F5 E6 80       >                        and     SignOnly8Bit
 103+ 91F7 47          >                        ld      b,a                         ; b = sign of a xor q
 103+ 91F8 7A          >                        ld      a,d                         ; d = abs d (or a reg)
 103+ 91F9 E6 7F       >                        and     SignMask8Bit
 103+ 91FB 57          >                        ld      d,a
 103+ 91FC 7B          >                        ld      a,e                         ; e = abs e (or varQ)
 103+ 91FD E6 7F       >                        and     SignMask8Bit
 103+ 91FF 5F          >                        ld      e,a
 103+ 9200 ED 30       >                        mul                                 ; de = a * Q
 103+ 9202 7A          >                        ld      a,d
 103+ 9203 B0          >                        or      b                           ; de = a * Q leading sign bit
 103+ 9204 57          >                        ld      d,a
 104+ 9205 2A B7 7F                             ld		hl,(varR)
 105+ 9208 CD 0E 92                             call	madXAAddHLDESigned
 106+ 920B EB                                   ex      de,hl                       ; de = R.S + DE
 107+ 920C                                      ClearCarryFlag
 107+ 920C B7          >                        or a
 108+ 920D C9                                   ret
 109+ 920E
 110+ 920E 7C           madXAAddHLDESigned:     ld      a,h
 111+ 920F E6 80                                and     SignOnly8Bit
 112+ 9211 47                                   ld      b,a                         ;save sign bit in b
 113+ 9212 AA                                   xor     d                           ;if h sign and d sign were different then bit 7 of a will be 1 which means
 114+ 9213                                      JumpIfNegative .ADDHLDEOppSGN        ;Signs are opposite there fore we can subtract to get difference
 114+ 9213 FA 2B 92    >                        jp		m, .ADDHLDEOppSGN
 115+ 9216 78           .ADDHLDESameSigns:       ld      a,b
 116+ 9217 B2                                   or      d
 117+ 9218                                      JumpIfNegative .ADDHLDESameNeg       ; optimisation so we can just do simple add if both positive
 117+ 9218 FA 1D 92    >                        jp		m, .ADDHLDESameNeg
 118+ 921B 19                                   add     hl,de
 119+ 921C C9                                   ret
 120+ 921D 7C           .ADDHLDESameNeg:         ld      a,h                         ; so if we enter here then signs are the same so we clear the 16th bit
 121+ 921E E6 7F                                and     SignMask8Bit                ; we could check the value of b for optimisation
 122+ 9220 67                                   ld      h,a
 123+ 9221 7A                                   ld      a,d
 124+ 9222 E6 7F                                and     SignMask8Bit
 125+ 9224 57                                   ld      d,a
 126+ 9225 19                                   add     hl,de
 127+ 9226 3E 80                                ld      a,SignOnly8Bit
 128+ 9228 B4                                   or      h                           ; now set bit for negative value, we won't bother with overflow for now TODO
 129+ 9229 67                                   ld      h,a
 130+ 922A C9                                   ret
 131+ 922B 7C           .ADDHLDEOppSGN:          ld      a,h                         ; so if we enter here then signs are the same so we clear the 16th bit                     ; here HL and DE are opposite
 132+ 922C E6 7F                                and     SignMask8Bit                ; we could check the value of b for optimisation
 133+ 922E 67                                   ld      h,a
 134+ 922F 7A                                   ld      a,d
 135+ 9230 E6 7F                                and     SignMask8Bit
 136+ 9232 57                                   ld      d,a
 137+ 9233 B7                                   or      a
 138+ 9234 ED 52                                sbc     hl,de
 139+ 9236 38 04                                jr      c,.ADDHLDEOppInvert
 140+ 9238 78           .ADDHLDEOppSGNNoCarry:   ld      a,b                         ; we got here so hl > de therefore we can just take hl's previous sign bit
 141+ 9239 B4                                   or      h
 142+ 923A 67                                   ld      h,a                         ; set the previou sign value
 143+ 923B C9                                   ret
 144+ 923C              .ADDHLDEOppInvert:       NegHL                                                   ; we need to flip the sign and 2'c the Hl result
 144+ 923C AF          >                    xor a
 144+ 923D 95          >                    sub l
 144+ 923E 6F          >                    ld l,a
 144+ 923F 9F          >                    sbc a,a
 144+ 9240 94          >                    sub h
 144+ 9241 67          >                    ld h,a
 145+ 9242 78                                   ld      a,b
 146+ 9243 EE 80                                xor     SignOnly8Bit                ; flip sign bit
 147+ 9245 B4                                   or      h
 148+ 9246 67                                   ld      h,a                         ; recover sign
 149+ 9247 C9                                   ret
 150+ 9248
 151+ 9248
 152+ 9248                  ; multiplication of 16-bit number and 8-bit number into a 24-bit product
 153+ 9248                  ;
 154+ 9248                  ; enter : hl = 16-bit multiplier   = x
 155+ 9248                  ;          e =  8-bit multiplicand = y
 156+ 9248                  ;
 157+ 9248                  ; exit  : ahl = 24-bit product
 158+ 9248                  ;         carry reset
 159+ 9248                  ;
 160+ 9248                  ; uses  : af, de, hl
 161+ 9248 54           AHLequHLmulE:           ld d,h                      ; xh
 162+ 9249 63                                   ld h,e                      ; yl
 163+ 924A ED 30                                mul de                      ; xh*yl
 164+ 924C EB                                   ex de,hl
 165+ 924D ED 30                                mul de                      ; yl*xl, hl = xh*yl
 166+ 924F
 167+ 924F 7A                                   ld  a,d                     ; sum products
 168+ 9250 85                                   add a,l
 169+ 9251 57                                   ld  d,a
 170+ 9252 EB                                   ex de,hl
 171+ 9253
 172+ 9253 7A                                   ld  a,d
 173+ 9254 CE 00                                adc a,0
 174+ 9256 C9                                   ret
 175+ 9257
 176+ 9257 54           HLE0quH0mulE:           ld      d,h                 ; .
 177+ 9258 63                                   ld      h,e                 ; .
 178+ 9259 ED 30                                mul     de                  ; de = xh * yl
 179+ 925B EB                                   ex      de,hl
 180+ 925C C9                                   ret
 181+ 925D
 182+ 925D                 ; multiplication of two 16-bit numbers into a 32-bit product
 183+ 925D                 ;
 184+ 925D                 ; enter : de = 16-bit multiplicand = y
 185+ 925D                 ;         hl = 16-bit multiplicand = x
 186+ 925D                 ;
 187+ 925D                 ; exit  : dehl = 32-bit product
 188+ 925D                 ;         carry reset
 189+ 925D                 ;
 190+ 925D                 ; uses  : af, bc, de, hl
 191+ 925D
 192+ 925D
 193+ 925D
 194+ 925D 45           DEHLequDEmulHL:         ld b,l                      ; x0
 195+ 925E 4B                                   ld c,e                      ; y0
 196+ 925F 5D                                   ld e,l                      ; x0
 197+ 9260 6A                                   ld l,d
 198+ 9261 E5                                   push hl                     ; x1 y1
 199+ 9262 69                                   ld l,c                      ; y0
 200+ 9263              ; bc = x0 y0, de = y1 x0,  hl = x1 y0,  stack = x1 y1
 201+ 9263 ED 30                                mul de                      ; y1*x0
 202+ 9265 EB                                   ex de,hl
 203+ 9266 ED 30                                mul de                      ; x1*y0
 204+ 9268
 205+ 9268 AF                                   xor a                       ; zero A
 206+ 9269 19                                   add hl,de                   ; sum cross products p2 p1
 207+ 926A 8F                                   adc a,a                     ; capture carry p3
 208+ 926B
 209+ 926B 59                                   ld e,c                      ; x0
 210+ 926C 50                                   ld d,b                      ; y0
 211+ 926D ED 30                                mul de                      ; y0*x0
 212+ 926F
 213+ 926F 47                                   ld b,a                      ; carry from cross products
 214+ 9270 4C                                   ld c,h                      ; LSB of MSW from cross products
 215+ 9271
 216+ 9271 7A                                   ld a,d
 217+ 9272 85                                   add a,l
 218+ 9273 67                                   ld h,a
 219+ 9274 6B                                   ld l,e                      ; LSW in HL p1 p0
 220+ 9275
 221+ 9275 D1                                   pop de
 222+ 9276 ED 30                                mul de                      ; x1*y1
 223+ 9278
 224+ 9278 EB                                   ex de,hl
 225+ 9279 ED 4A                                adc hl,bc
 226+ 927B EB                                   ex de,hl                    ; de = final MSW
 227+ 927C
 228+ 927C C9                                   ret
 229+ 927D
 230+ 927D              ; multiplication of two 16-bit numbers into a 16-bit product
 231+ 927D              ; enter : de = 16-bit multiplicand
 232+ 927D              ;         hl = 16-bit multiplicand
 233+ 927D              ; exit  : hl = 16-bit product
 234+ 927D              ;         carry reset
 235+ 927D              ; maths is
 236+ 927D              ;        hl = y , de= x
 237+ 927D              ;        hl = xhi,ylo + (yhigh * xlow)
 238+ 927D              ;        hl = yhih & xlo + x
 239+ 927D              ;
 240+ 927D              ;
 241+ 927D              ; uses  : af, bc, de, hl
 242+ 927D C5           mulDEbyHL:              push    bc
 243+ 927E 7A                                   ld a,d                      ; a = xh
 244+ 927F 54                                   ld d,h                      ; d = yh
 245+ 9280 67                                   ld h,a                      ; h = xh
 246+ 9281 4B                                   ld c,e                      ; c = xl
 247+ 9282 45                                   ld b,l                      ; b = yl
 248+ 9283 ED 30                                mul                         ; yh * yl
 249+ 9285 EB                                   ex de,hl
 250+ 9286 ED 30                                mul                         ; xh * yl
 251+ 9288 19                                   add hl,de                   ; add cross products
 252+ 9289 59                                   ld e,c
 253+ 928A 50                                   ld d,b
 254+ 928B ED 30                                mul                         ; yl * xl
 255+ 928D 7D                                   ld a,l                      ; cross products lsb
 256+ 928E 82                                   add a,d                     ; add to msb final
 257+ 928F 67                                   ld h,a
 258+ 9290 6B                                   ld l,e                      ; hl = final
 259+ 9291                                      ; 83 cycles, 19 bytes
 260+ 9291 AF                                   xor a                       ; reset carry
 261+ 9292 C1                                   pop     bc
 262+ 9293 C9                                   ret
 263+ 9294
 264+ 9294              ; multiplication of 16-bit numbers by 8-bit product
 265+ 9294              ; enter : de = 16-bit multiplicand
 266+ 9294              ;          l = 8-bit multiplicand
 267+ 9294              ; exit  : hl = 16-bit product
 268+ 9294              ;         carry reset
 269+ 9294              ; maths is
 270+ 9294              ;        hl = y , de= x
 271+ 9294              ;        hl = xhi,ylo + (yhigh * xlow)
 272+ 9294              ;        hl = yhih & xlo + x
 273+ 9294              ;
 274+ 9294              ;
 275+ 9294              ; uses  : af, bc, de, hl
 276+ 9294 C5 E5 D5     mulDEbyLSigned:         push    bc,,hl,,de
 277+ 9297 7A                                   ld a,d                      ; a = xh
 278+ 9298 16 00                                ld d,0                      ; d = yh = 0
 279+ 929A 67                                   ld h,a                      ; h = xh
 280+ 929B 4B                                   ld c,e                      ; c = xl
 281+ 929C 45                                   ld b,l                      ; b = yl
 282+ 929D              ;                        mul                         ; yh * xl which will always be 0
 283+ 929D EB                                   ex de,hl                    ; de = xh yl
 284+ 929E ED 30                                mul                         ; xh * yl
 285+ 92A0 EB                                   ex de,hl                    ; hl = xh * yl
 286+ 92A1              ;                        add hl,de                   ; add cross products
 287+ 92A1 59                                   ld e,c                      ; de = yl xl
 288+ 92A2 50                                   ld d,b                      ; .
 289+ 92A3 ED 30                                mul                         ; yl * xl
 290+ 92A5 7D                                   ld a,l                      ; cross products lsb
 291+ 92A6 82                                   add a,d                     ; add to msb final
 292+ 92A7 67                                   ld h,a
 293+ 92A8 6B                                   ld l,e                      ; hl = final
 294+ 92A9 AF                                   xor a                       ; reset carry
 295+ 92AA C1                                   pop     bc                  ; get de for sign
 296+ 92AB 78                                   ld      a,b
 297+ 92AC C1                                   pop     bc                  ; get hl for sign
 298+ 92AD A8                                   xor     b
 299+ 92AE E6 80                                and     $80                 ; so we now have the sign bit
 300+ 92B0 B4                                   or      h                   ; so set the sign
 301+ 92B1 67                                   ld      h,a                 ; .
 302+ 92B2 C1                                   pop     bc                  ; clear up stack
 303+ 92B3 C9                                   ret
 304+ 92B4
 305+ 92B4                  DISPLAY "TODO: TEST"
 306+ 92B4 7A           mulDEbyHLSigned:        ld  a,d                     ; de = abs de
 307+ 92B5 47                                   ld  b,a                     ;
 308+ 92B6 E6 7F                                and     $7F                 ; .
 309+ 92B8 57                                   ld  d,a                     ; .
 310+ 92B9 7C                                   ld  a,h                     ; hl = abs hl
 311+ 92BA 4F                                   ld  c,a                     ; .
 312+ 92BB E6 7F                                and     $7F                 ; .
 313+ 92BD 67                                   ld      h,a                 ; .
 314+ 92BE 79                                   ld      a,c                 ; ixl = target sign of de * hl
 315+ 92BF AA                                   xor     d                   ;
 316+ 92C0 E6 80                                and     $80                 ;
 317+ 92C2 DD 6F                                ld      ixl,a               ;
 318+ 92C4 CD 7D 92                             call    mulDEbyHL           ; calculate ABS(DE) * ABS(HL)
 319+ 92C7 7C                                   ld      a,h                 ; recover sign bit
 320+ 92C8 DD B5                                or      ixl
 321+ 92CA 67                                   ld      h,a
 322+ 92CB C9                                   ret
 323+ 92CC
 324+ 92CC              ; CHL = multiplicand D = multiplier
 325+ 92CC              ; DCHL = CHL * D
 326+ 92CC 7A           mulCHLbyDSigned:        ld      a,d                 ; get sign from d
 327+ 92CD AC                                   xor     h                   ; xor with h to get resultant sign
 328+ 92CE E6 80                                and     SignOnly8Bit        ; .
 329+ 92D0 FD 67                                ld      iyh,a               ; iyh = copy of sign
 330+ 92D2 79                                   ld      a,c                 ; now CHL = ABS (CHL)
 331+ 92D3 E6 7F                                and     SignMask8Bit        ; .
 332+ 92D5 4F                                   ld      c,a                 ; .
 333+ 92D6 7A                                   ld      a,d                 ; d = ABS D
 334+ 92D7 E6 7F                                and     SignMask8Bit        ; .
 335+ 92D9              ; At this point CHL = ABS (HLE), A = ABS(D)
 336+ 92D9 57           .mul1:                  ld      d,a                 ; first do D * L
 337+ 92DA 5D                                   ld      e,l                 ; .
 338+ 92DB ED 30                                mul     de                  ; DE = L * D
 339+ 92DD 08                                   ex      af,af'              ; save multiplier
 340+ 92DE 6B                                   ld      l,e                 ; L = p0
 341+ 92DF 7A                                   ld      a,d                 ; carry byte
 342+ 92E0 08                                   ex      af,af'              ; retrieve muliplier and save carry byte along with flags
 343+ 92E1 5C           .mul2:                  ld      e,h                 ; byte 2 of multiplicand
 344+ 92E2 57                                   ld      d,a                 ; and multiplier
 345+ 92E3 ED 30                                mul     de                  ; now its D & L
 346+ 92E5 08                                   ex      af,af'              ; get back carry byte with flags
 347+ 92E6 83           .carrybyte1:            add     a,e                 ; add low byte carry to result and retain carry too through next instructions
 348+ 92E7 67                                   ld      h,a                 ; h = P1
 349+ 92E8 7A                                   ld      a,d                 ; a = carry byte
 350+ 92E9 08                                   ex      af,af'              ; save carry byte and get back multiplier with flags
 351+ 92EA 59           .mul3:                  ld      e,c                 ; byte 3 of multiplicand
 352+ 92EB 57                                   ld      d,a                 ;
 353+ 92EC ED 30                                mul     de                  ;
 354+ 92EE 08                                   ex      af,af'              ; get back carry byte and carry prior to first add
 355+ 92EF 8B                                   adc     a,e                 ;
 356+ 92F0 FD B4                                or      iyh                 ; recover saved resultant sign
 357+ 92F2 4F                                   ld      c,a                 ; c byte 3. Note the value range allowed can never cause a byte 3 carry
 358+ 92F3 C9                                   ret
 359+ 92F4
 360+ 92F4              ;  CHL = 53456 D = 1E
 361+ 92F4              ;  56 * 1E = A14 L = 14 carry = 0A
 362+ 92F4              ;  34 * 1E = 618 H = 18 +A = 22 carry = 6
 363+ 92F4              ;  5  * 1E = 096 C = 96 + 6 = 9C
 364+ 92F4              ;  CHL = 9C2214
 365+ 92F4              ;mult3
 366+ 92F4              ; DELC = HLE * D, uses HL, DE, C , A , IYH
 367+ 92F4              ; HLE = multiplicand D = multiplier
 368+ 92F4              ; tested by mathstestsun.asm all passed
 369+ 92F4              ; Algorithm
 370+ 92F4              ; AC =  E * D   (save carry)         H    L    E
 371+ 92F4              ; DE =  L * D                                  D
 372+ 92F4              ;  L =  A + E + carry                         E*D (lo)
 373+ 92F4              ; DE =  H * D                             L*D+ ^ (hi)
 374+ 92F4              ;  E =  A + E + carry                H*D (lo) + carry
 375+ 92F4              ;
 376+ 92F4              ;
 377+ 92F4 7A           mulHLbyDE2sc:           ld      a,d
 378+ 92F5 AC                                   xor     h
 379+ 92F6 E6 80                                and     SignOnly8Bit
 380+ 92F8 FD 67                                ld      iyh,a               ; save sign bit for result
 381+ 92FA 7C                                   ld      a,h
 382+ 92FB E6 80                                and     SignOnly8Bit
 383+ 92FD 28 06                                jr      z,.HLPositive
 384+ 92FF              .HLNegative:            NegHL
 384+ 92FF AF          >                    xor a
 384+ 9300 95          >                    sub l
 384+ 9301 6F          >                    ld l,a
 384+ 9302 9F          >                    sbc a,a
 384+ 9303 94          >                    sub h
 384+ 9304 67          >                    ld h,a
 385+ 9305 7A           .HLPositive:            ld      a,d
 386+ 9306 E6 80                                and     SignOnly8Bit
 387+ 9308 28 06                                jr      z,.DEPositive
 388+ 930A              .DENegative:            NegDE
 388+ 930A AF          >                    xor a
 388+ 930B 93          >                    sub e
 388+ 930C 5F          >                    ld e,a
 388+ 930D 9F          >                    sbc a,a
 388+ 930E 92          >                    sub d
 388+ 930F 57          >                    ld d,a
 389+ 9310 CD 7D 92     .DEPositive:            call    mulDEbyHL           ; now do calc
 390+ 9313 FD 7C                                ld      a,iyh
 391+ 9315 A7                                   and     a                   ; if its 0 then we are good
 392+ 9316 C8                                   ret     z
 393+ 9317
 394+ 9317
 395+ 9317              ; Mulitply HLE by D leading Sign
 396+ 9317              ; used IY A BC
 397+ 9317              ; result it loaded to DELC
 398+ 9317 7A           mulHLEbyDSigned:        ld      a,d                 ; get sign from d
 399+ 9318 AC                                   xor     h                   ; xor with h to get resultant sign
 400+ 9319 E6 80                                and     SignOnly8Bit        ; .
 401+ 931B FD 67                                ld      iyh,a               ; iyh = copy of sign
 402+ 931D 7C                                   ld      a,h                 ; now HLE = ABS (HLE)
 403+ 931E E6 7F                                and     SignMask8Bit        ; .
 404+ 9320 67                                   ld      h,a                 ; .
 405+ 9321 7A                                   ld      a,d                 ; d = ABS D
 406+ 9322 E6 7F                                and     SignMask8Bit        ; .
 407+ 9324 57                                   ld      d,a                 ; .
 408+ 9325 B7           .testEitherSideZero:    or      a
 409+ 9326 28 24                                jr      z,.ResultZero
 410+ 9328 7C                                   ld      a,h
 411+ 9329 B5                                   or      l
 412+ 932A B3                                   or      e
 413+ 932B 28 1F                                jr      z,.ResultZero
 414+ 932D              ; At this point HLE = ABS (HLE), A = ABS(D)
 415+ 932D 42                                   ld      b,d                 ; save Quotient
 416+ 932E ED 30        .mul1:                  mul     de                  ; C = E * D
 417+ 9330 4B                                   ld      c,e                 ; C = p0
 418+ 9331 FD 6A                                ld      iyl,d               ; save carry (p1)
 419+ 9333 5D           .mul2:                  ld      e,l                 ; L = L * D
 420+ 9334 50                                   ld      d,b                 ; .
 421+ 9335 ED 30                                mul     de                  ; .
 422+ 9337 FD 7D                                ld      a,iyl               ; get back p1
 423+ 9339 83           .carrybyte1:            add     a,e                 ; L = L + E
 424+ 933A 6F                                   ld      l,a                 ; .
 425+ 933B FD 6A                                ld      iyl,d               ; save new carry byte
 426+ 933D 5C           .mul3:                  ld      e,h                 ; E = H * D
 427+ 933E 50                                   ld      d,b                 ; .
 428+ 933F ED 30                                mul     de                  ; .
 429+ 9341 FD 7D                                ld      a,iyl
 430+ 9343 8B                                   adc     a,e                 ; .
 431+ 9344 5F                                   ld      e,a                 ; .
 432+ 9345 7A           .ItsNotZero:            ld      a,d                 ;
 433+ 9346 CE 00                                adc     a,0                 ; final carry bit
 434+ 9348 FD B4                                or      iyh                 ; bring back sign
 435+ 934A 57                                   ld      d,a                 ; s = sign
 436+ 934B C9                                   ret
 437+ 934C 11 00 00     .ResultZero:            ld      de,0
 438+ 934F                                      ZeroA
 438+ 934F AF          >                        xor a
 439+ 9350 4F                                   ld      c,a
 440+ 9351 6F                                   ld      l,a
 441+ 9352 C9                                   ret
 442+ 9353
 443+ 9353              ;;;
 444+ 9353              ;;;
 445+ 9353              ;;;mulHLEbyDSigned:        ld      a,d                 ; get sign from d
 446+ 9353              ;;;                        xor     h                   ; xor with h to get resultant sign
 447+ 9353              ;;;                        and     SignOnly8Bit        ; .
 448+ 9353              ;;;                        ld      iyh,a               ; iyh = copy of sign
 449+ 9353              ;;;                        ld      a,h                 ; now HLE = ABS (HLE)
 450+ 9353              ;;;                        and     SignMask8Bit        ; .
 451+ 9353              ;;;                        ld      h,a                 ; .
 452+ 9353              ;;;                        ld      a,d                 ; d = ABS D
 453+ 9353              ;;;                        and     SignMask8Bit        ; .
 454+ 9353              ;;;                        ld      d,a                 ; .
 455+ 9353              ;;;.testEitherSideZero:    or      a
 456+ 9353              ;;;                        jr      z,.ResultZero
 457+ 9353              ;;;                        ld      a,h
 458+ 9353              ;;;                        or      l
 459+ 9353              ;;;                        or      e
 460+ 9353              ;;;                        jr      z,.ResultZero
 461+ 9353              ;;;; At this point HLE = ABS (HLE), A = ABS(D)
 462+ 9353              ;;;.mul1:                  mul     de                  ; C = E * D
 463+ 9353              ;;;                        ex      af,af'              ; save mulitplier
 464+ 9353              ;;;                        ld      c,e                 ; C = p0
 465+ 9353              ;;;                        ld      a,d                 ; save carry (p1)
 466+ 9353              ;;;                        ex      af,af'              ; .
 467+ 9353              ;;;.mul2:                  ld      e,l                 ; L = L * D
 468+ 9353              ;;;                        ld      d,a                 ; .
 469+ 9353              ;;;                        mul     de                  ; .
 470+ 9353              ;;;                        ex      af,af'              ; .
 471+ 9353              ;;;.carrybyte1:            add     a,e                 ; L = L + E
 472+ 9353              ;;;                        ld      l,a                 ; .
 473+ 9353              ;;;                        ld      a,d
 474+ 9353              ;;;                        ex      af,af'              ; save new carry byte
 475+ 9353              ;;;.mul3:                  ld      e,h                 ; E = H * D
 476+ 9353              ;;;                        ld      d,a                 ; .
 477+ 9353              ;;;                        mul     de                  ; .
 478+ 9353              ;;;                        ex      af,af'              ; .
 479+ 9353              ;;;                        adc     a,e                 ; .
 480+ 9353              ;;;                        ld      e,a                 ; .
 481+ 9353              ;;;.ItsNotZero:            ld      a,d                 ;
 482+ 9353              ;;;                        adc     a,0                 ; final carry bit
 483+ 9353              ;;;                        or      iyh                 ; bring back sign
 484+ 9353              ;;;                        ld      d,a                 ; s = sign
 485+ 9353              ;;;                        ret
 486+ 9353              ;;;.ResultZero:            ld      de,0
 487+ 9353              ;;;                        ZeroA
 488+ 9353              ;;;                        ld      c,a
 489+ 9353              ;;;                        ld      l,a
 490+ 9353              ;;;                        ret
 491+ 9353
 492+ 9353              ; multiplication of two S156-bit numbers into a 16-bit 2'd compliment product
 493+ 9353              ; enter : de = 16-bit multiplicand
 494+ 9353              ;         hl = 16-bit multiplicand
 495+ 9353              ; exit  : hl = 16-bit product
 496+ 9353              ;         carry reset
 497+ 9353              ;
 498+ 9353              ; uses  : af, bc, de, hl
 499+ 9353 00           mulDEbyHLSignByte       DB      0
 500+ 9354 AF           mulDEbyHLSgnTo2c:       xor     a
 501+ 9355 32 53 93                             ld      (mulDEbyHLSignByte),a
 502+ 9358 7A           .SignDE:                ld      a,d
 503+ 9359 ED 27 80                             test    $80
 504+ 935C 28 08                                jr      z,.SignHL
 505+ 935E E6 7F        .NegativeDE:            and     $7F
 506+ 9360 57                                   ld      d,a
 507+ 9361 3E 80                                ld      a,$80
 508+ 9363 32 53 93                             ld      (mulDEbyHLSignByte),a
 509+ 9366 7C           .SignHL:                ld      a,h
 510+ 9367 ED 27 80                             test    $80
 511+ 936A 28 0B                                jr      z,.AbsoluteMultiply
 512+ 936C E6 7F        .NegativeHL:            and     $7F
 513+ 936E 67                                   ld      h,a
 514+ 936F 3A 53 93                             ld      a,(mulDEbyHLSignByte)
 515+ 9372 EE 80                                xor     $80
 516+ 9374 32 53 93                             ld      (mulDEbyHLSignByte),a
 517+ 9377 CD 7D 92     .AbsoluteMultiply:      call    mulDEbyHL
 518+ 937A 3A 53 93     .RecoverSign:           ld      a,(mulDEbyHLSignByte)
 519+ 937D ED 27 80                             test    $80
 520+ 9380 C8                                   ret     z
 521+ 9381 AF           .Negateghl: 			xor 	a
 522+ 9382 95                                   sub 	l
 523+ 9383 6F                                   ld 		l,a
 524+ 9384 9F                                   sbc 	a,a
 525+ 9385 94                                   sub 	h
 526+ 9386 67                                   ld 		h,a
 527+ 9387 C9                                   ret
 528+ 9388
 529+ 9388 AF           mulDESgnbyHLUnsgnTo2c:  xor     a
 530+ 9389 32 53 93                             ld      (mulDEbyHLSignByte),a
 531+ 938C 7A           .SignDE:                ld      a,d
 532+ 938D ED 27 80                             test    $80
 533+ 9390 28 08                                jr      z,.AbsoluteMultiply
 534+ 9392 E6 7F        .NegativeDE:            and     $7F
 535+ 9394 57                                   ld      d,a
 536+ 9395 3E 80                                ld      a,$80
 537+ 9397 32 53 93                             ld      (mulDEbyHLSignByte),a
 538+ 939A CD 7D 92     .AbsoluteMultiply:      call    mulDEbyHL
 539+ 939D 3A 53 93     .RecoverSign:           ld      a,(mulDEbyHLSignByte)
 540+ 93A0 ED 27 80                             test    $80
 541+ 93A3 C8                                   ret     z
 542+ 93A4 AF           .Negateghl:             xor 	a
 543+ 93A5 95                                   sub 	l
 544+ 93A6 6F                                   ld 		l,a
 545+ 93A7 9F                                   sbc 	a,a
 546+ 93A8 94                                   sub 	h
 547+ 93A9 67                                   ld 		h,a
 548+ 93AA C9                                   ret
 549+ 93AB
 550+ 93AB
# file closed: ./Maths/asm_multiply.asm
 577  93AB                  INCLUDE "./Maths/asm_square.asm"
# file opened: ./Maths/asm_square.asm
   1+ 93AB              ; "ASM_SQUA : TESTGOOD"
   2+ 93AB              ; "AP = A^2 A = low,P = hi"
   3+ 93AB
   4+ 93AB              inline_squde: MACRO
   5+ 93AB ~            			ld	e,a
   6+ 93AB ~            			ld  d,a
   7+ 93AB ~            			mul
   8+ 93AB              			ENDM
   9+ 93AB
  10+ 93AB              inline_squa: MACRO
  11+ 93AB ~            			ld	e,a
  12+ 93AB ~            			ld  d,a
  13+ 93AB ~            			mul
  14+ 93AB ~            			ld	a,e
  15+ 93AB              			ENDM
  16+ 93AB
# file closed: ./Maths/asm_square.asm
 578  93AB                  INCLUDE "./Maths/asm_sine.asm"
# file opened: ./Maths/asm_sine.asm
   1+ 93AB              ;- MACROS
   2+ 93AB              LookupSineAMacro:       MACRO
   3+ 93AB ~                                    ld      hl,SNE                      ; Set Q = sin(X)  = sin(CNT2 mod 32) = |sin(CNT2)|
   4+ 93AB ~                                    add     hl, a
   5+ 93AB ~                                    ld      a,(hl)
   6+ 93AB                                      ENDM
   7+ 93AB
   8+ 93AB              ; Gets the sine of A from the lookup table into A
   9+ 93AB              LookupSineA:            LookupSineAMacro
   9+ 93AB 21 54 94    >                        ld      hl,SNE                      ; Set Q = sin(X)  = sin(CNT2 mod 32) = |sin(CNT2)|
   9+ 93AE ED 31       >                        add     hl, a
   9+ 93B0 7E          >                        ld      a,(hl)
  10+ 93B1 C9                                   ret
  11+ 93B2
# file closed: ./Maths/asm_sine.asm
 579  93B2                  INCLUDE "./Maths/asm_sqrt.asm"
# file opened: ./Maths/asm_sqrt.asm
   1+ 93B2              ; "ASM SQRT : TESTGOOD"
   2+ 93B2              ; "16-bit integer square root"
   3+ 93B2              ; "call with de = number to square root"
   4+ 93B2              ; "returns   hl = square root"
   5+ 93B2              ; "corrupts  bc, de"
   6+ 93B2              asm_sqrt:
   7+ 93B2 01 00 80     	ld bc,$8000
   8+ 93B5 61           	ld h,c
   9+ 93B6 69           	ld l,c
  10+ 93B7              .sqrloop:
  11+ 93B7 CB 38        	srl b
  12+ 93B9 CB 19        	rr c
  13+ 93BB 09           	add hl,bc
  14+ 93BC EB           	ex de,hl
  15+ 93BD ED 52        	sbc hl,de
  16+ 93BF 38 04        	jr c,.sqrbit
  17+ 93C1 EB           	ex de,hl
  18+ 93C2 09           	add hl,bc
  19+ 93C3 18 05        	jr .sqrfi
  20+ 93C5              .sqrbit:
  21+ 93C5 19           	add hl,de
  22+ 93C6 EB           	ex de,hl
  23+ 93C7 B7           	or a
  24+ 93C8 ED 42        	sbc hl,bc
  25+ 93CA              .sqrfi:
  26+ 93CA CB 3C        	srl h
  27+ 93CC CB 1D        	rr l
  28+ 93CE CB 38        	srl b
  29+ 93D0 CB 19        	rr c
  30+ 93D2 30 E3        	jr nc,.sqrloop
  31+ 93D4 C9           	ret
  32+ 93D5
  33+ 93D5
  34+ 93D5              sqrtQR:					; Q = SQR(Qlo.Rhi) Q <~127
  35+ 93D5 3A B6 7F     	ld		a,(varQ)
  36+ 93D8 5F           	ld		e,a
  37+ 93D9 3A B7 7F     	ld		a,(varR)
  38+ 93DC 57           	ld		d,a
  39+ 93DD CD B2 93     	call	asm_sqrt
  40+ 93E0 7D               ld      a,l
  41+ 93E1 32 B6 7F     	ld		(varQ),a
  42+ 93E4 C9           	ret
  43+ 93E5
# file closed: ./Maths/asm_sqrt.asm
 580  93E5                  INCLUDE "./Maths/asm_arctan.asm"
# file opened: ./Maths/asm_arctan.asm
   1+ 93E5              ;Calculate A = arctan(P / Q)
   2+ 93E5              ; This finds the angle in the right-angled triangle where the opposite side to angle A is length P and the adjacent side to angle A has
   3+ 93E5              ; length Q, so:  tan(A) = P / Q
   4+ 93E5              ;
   5+ 93E5              ; The result in A is an integer representing the angle in radians. The routine returns values in the range 0 to 128,  (or 0 to PI radians).
   6+ 93E5 3A B6 7E     ARCTAN:                 ld      a,(varP)                    ; LDA P                  \ Set T1 = P EOR Q, which will have the sign of P * Q
   7+ 93E8 21 B6 7F                             ld      hl,varQ                     ; EOR Q
   8+ 93EB AE                                   xor     (hl)                        ; .
   9+ 93EC 32 B3 7E                             ld      (varT1),a                   ; STA T1
  10+ 93EF 3A B6 7F                             ld      a,(varQ)                    ; LDA Q                  \ If Q = 0, jump to AR2 to return a right angle
  11+ 93F2 A7                                   and     a                           ; BEQ AR2
  12+ 93F3 CA 35 94                             jp      z, .AR2                     ; .
  13+ 93F6 CB 27                                sla     a                           ; ASL A                  \ Set Q = |Q| * 2 (this is a quick way of clearing the
  14+ 93F8 32 B6 7F                             ld      (varQ),a                    ; STA Q                  \ sign bit, and we don't need to shift right again as we only ever use this value in the division with |P| * 2, which we set next)
  15+ 93FB 3A B6 7E                             ld      a,(varP)                    ; LDA P                  \ Set A = |P| * 2
  16+ 93FE CB 27                                sla     a                           ; ASL A
  17+ 9400 32 B6 7E                             ld      (varP),a
  18+ 9403 21 B6 7F                             ld      hl,varQ
  19+ 9406 BE                                   cp      (hl)                        ; CMP Q                  \ If A >= Q, i.e. |P| > |Q|, jump to AR1 to swap P
  20+ 9407 D2 19 94                             jp      nc, .AR1                    ; BCS AR1                \ and Q around, so we can still use the lookup table
  21+ 940A CD 41 94                             call    ARS1                        ; JSR ARS1               \ Call ARS1 to set the following from the lookup table:  A = arctan(A / Q)  = arctan(|P / Q|)
  22+ 940D                                      ClearCarryFlag                      ; SEC                    \ Set the C flag so the SBC instruction in AR3 will be correct, should we jump there
  22+ 940D B7          >                        or a
  23+ 940E 4F           .AR4:                   ld      c,a                         ; as we have to use a we use c as a temp, we can't push af as we would loose flags on pop
  24+ 940F 3A B3 7E                             ld      a,(varT1)                   ; LDX T1                 \ If T1 is negative, i.e. P and Q have different signs,
  25+ 9412 47                                   ld      b,a                         ; .
  26+ 9413 A7                                   and     a                           ; BMI AR3                \ jump down to AR3 to return arctan(-|P / Q|)
  27+ 9414 79                                   ld      a,c                         ; .                      \ we need to get a back before jump
  28+ 9415 FA 38 94                             jp      m, .AR3                     ; .
  29+ 9418 C9                                   ret                                 ; RTS                    \ Otherwise P and Q have the same sign, so our result is correct and we can return from the subroutine
  30+ 9419              ; We want to calculate arctan(t) where |t| > 1, so we can use the calculation described in the documentation for the ACT table, i.e. 64 - arctan(1 / t)
  31+ 9419              ; In the 6502 verion it works with A already being P but we will fetch it
  32+ 9419 3A B6 7F     .AR1:                   ld      a,(varQ)                    ; LDX Q                  \ Swap the values in Q and P, using the fact that we
  33+ 941C 47                                   ld      b,a                         ; .
  34+ 941D 3A B6 7E                             ld      a,(varP)                    ; STA Q                  \ called AR1 with A = P
  35+ 9420 32 B6 7F                             ld      (varQ),a                    ; .
  36+ 9423 78                                   ld      a,b                         ; TXA                    \ This also sets A = P (which now contains the original argument |Q|)
  37+ 9424 32 B6 7E                             ld      (varP),a                    ; STX P                  \
  38+ 9427 CD 41 94                             call    ARS1                        ; JSR ARS1               \ Call ARS1 to set the following from the lookup table: A = arctan(A / Q) = arctan(|Q / P|) = arctan(1 / |P / Q|)
  39+ 942A 32 D2 7F                             ld      (varT),a                    ; STA T                  \ Set T = 64 - T, we use B as T (its not really that)
  40+ 942D 47                                   ld      b,a                         ; its actually t = a, a = 64-a
  41+ 942E 3E 40                                ld      a,64                        ; LDA #64 What is going on here is t = result
  42+ 9430                                      ClearCarryFlag                      ; SBC T                            a = 64- result
  42+ 9430 B7          >                        or a
  43+ 9431 98                                   sbc     a,b                         ; .
  44+ 9432 C3 0E 94                             jp      .AR4                        ; BCS AR4                \ Jump to AR4 to continue the calculation (this BCS is effectively a JMP as the subtraction will never underflow, as ARS1 returns values in the range 0-31)
  45+ 9435              ; If we get here then Q = 0, so tan(A) = infinity and A is a right angle, or 0.25 of a circle. We allocate 255 to a full circle, so we should return 63 for a right angle
  46+ 9435 3E 3F        .AR2:                   ld      a,63                        ; LDA #63                \ Set A to 63, to represent a right angle
  47+ 9437 C9                                   ret                                 ; RTS                    \ Return from the subroutine
  48+ 9438              ; A contains arctan(|P / Q|) but P and Q have different signs, so we need to return arctan(-|P / Q|), using the calculation described in the documentation for the ACT table, i.e. 128 - A
  49+ 9438 32 D2 7F     .AR3:                   ld      (varT),a
  50+ 943B 47                                   ld      b,a                         ; STA T                  \ Set A = 128 - A, we use b as T
  51+ 943C 3E 80                                ld      a,128                       ; LDA #128               \
  52+ 943E                                      ClearCarryFlag                      ; SBC T                  \ The subtraction will work because we did a SEC before calling AR3
  52+ 943E B7          >                        or a
  53+ 943F 98                                   sbc     a,b
  54+ 9440 C9                                   ret                                 ; RTS                    \ Return from the subroutine
  55+ 9441              ; This routine fetches arctan(A / Q) from the ACT table, so A will be set to an integer in the range 0 to 31 that represents an angle from 0 to 45 degrees (or 0 to \ PI / 4 radians)
  56+ 9441 CD FF 94     ARS1:                   call    Amul256DivQ                 ; JSR LL28               \ Call LL28 to calculate: R = 256 * A / Q
  57+ 9444 3A B7 7F                             ld      a,(varR)                    ; LDA R                  \ Set X = R / 8
  58+ 9447 CB 3F                                srl     a                           ; LSR A                  \       = 32 * A / Q
  59+ 9449 CB 3F                                srl     a                           ; LSR A                  \
  60+ 944B CB 3F                                srl     a                           ; LSR A                  \ so X has the value t * 32 where t = A / Q, which is
  61+ 944D 21 74 94                             ld      hl,ACT                      ; TAX                    \ what we need to look up values in the ACT table
  62+ 9450 ED 31                                add     hl,a                        ; LDA ACT,X              \ Fetch ACT+X from the ACT table into A, so now:
  63+ 9452 7E                                   ld      a,(hl)                      ;                        \   A = value in ACT + X = value in ACT + (32 * A / Q)= arctan(A / Q)
  64+ 9453 C9                                   ret                                 ; RTS                    \ Return from the subroutine
  65+ 9454
  66+ 9454              ;;;arctan:										; .ARCTAN	\ -> &2A3C  \ A=TAN-1(P/Q) \ A=arctan (P/Q)  called from block E
  67+ 9454              ;;;		ld		a,(varP)					; a = var P
  68+ 9454              ;;;		ld		hl,varQ
  69+ 9454              ;;;		xor		(hl)						; a = var p XOR varQ
  70+ 9454              ;;;		ld		a,(varT1)					; \ T1	 \ quadrant info
  71+ 9454              ;;;		ld		c,a							; c = copy of T1
  72+ 9454              ;;;		ld		a,(hl)						; Q
  73+ 9454              ;;;		cp		0
  74+ 9454              ;;;		jr		z,.AR2						;  Q=0 so set angle to 63, pi/2
  75+ 9454              ;;;		ld		(varQ),a					; Q move to reg B?
  76+ 9454              ;;;		ld		d,a							; copy to reg d
  77+ 9454              ;;;		sla		a							; drop sign
  78+ 9454              ;;;		ld		a,(varP)					; P
  79+ 9454              ;;;		ld		e,a							; copy to reg e
  80+ 9454              ;;;		sla		a							; drop sign
  81+ 9454              ;;;		cp		d							; compare with b (unsigned varQ * 2)
  82+ 9454              ;;;		jr		nc, .ars1					; if q >  p then adjust  swop A and Q as A >= Q
  83+ 9454              ;;;		call	ars1						; \ ARS1 \ get Angle for A*32/Q from table.
  84+ 9454              ;;;		scf									; set carry flag
  85+ 9454              ;;;.ar4:										; sub o.k
  86+ 9454              ;;;		bit 	7,c							; is T1 (also in c) negative?
  87+ 9454              ;;;		jr		nz,.ar3						;  -ve quadrant
  88+ 9454              ;;;		ret
  89+ 9454              ;;;.ar1:										; swop A and Q entering here d = q and e = P
  90+ 9454              ;;;		ld		a,d							; a = varQ
  91+ 9454              ;;;		ld		d,e							; varQ = varP
  92+ 9454              ;;;		ld		e,a							; swap D and E around
  93+ 9454              ;;;		ld		(varP),a					; write to actual variables
  94+ 9454              ;;;		ld		a,d
  95+ 9454              ;;;		ld		(varQ),a					; write to actual variables
  96+ 9454              ;;;		call	.ars1
  97+ 9454              ;;;		ld		(varT),b
  98+ 9454              ;;;		ld		b,a							; B = T = angle
  99+ 9454              ;;;		ld		a,64						; next range of angle, pi/4 to pi/2
 100+ 9454              ;;;		sub		a,b							; a = 64 - T (or b)
 101+ 9454              ;;;		jr		nc,.ar4						;  sub o.k
 102+ 9454              ;;;.ar2:										; .AR2	\ set angle to 90 degrees
 103+ 9454              ;;;		ld 		a,&3F						;  #63
 104+ 9454              ;;;		ret
 105+ 9454              ;;;.ar3:										;.AR3	\ -ve quadrant
 106+ 9454              ;;;		ld		b,a							; b = T	= \ angle
 107+ 9454              ;;;		ld		a,ConstPi					; a = Pi
 108+ 9454              ;;;		sub		b,a							; A = 128-T, so now covering range pi/2 to pi correctly
 109+ 9454              ;;;		ret
 110+ 9454              ;;;.ars1:										; .ARS1	\ -> &2A75  \ get Angle for A*32/Q from table.
 111+ 9454              ;;;		call	RequAmul256divQ				;  LL28 \ BFRDIV R=A*256/Q
 112+ 9454              ;;;		ld		a,(regA)
 113+ 9454              ;;;		srl		a
 114+ 9454              ;;;		srl		a
 115+ 9454              ;;;		srl		a							;  31 max.
 116+ 9454              ;;;		ld		hl, ArcTanTable				; root of index into table at end of words data
 117+ 9454              ;;;		add		hl,a						; now at real data
 118+ 9454              ;;;		ld		a,(hl)						; a =  ACT[a]
 119+ 9454              ;;;.arsr:										; rts used by laser lines below (will not in later code)
 120+ 9454              ;;;		ret
 121+ 9454
 122+ 9454
 123+ 9454
# file closed: ./Maths/asm_arctan.asm
 581  9454                  INCLUDE "./Maths/SineTable.asm"
# file opened: ./Maths/SineTable.asm
   1+ 9454              ;; PRINT "SIN TABLE"
   2+ 9454              ;; FOR I% =  0 TO  31
   3+ 9454              ;; N = ABS(SIN((I%/64)*2*PI))
   4+ 9454              ;; IF N >= 1 THEN B% = 255  ELSE B% = INT(256 * N + 0.5)
   5+ 9454              ;; PRINT B%
   6+ 9454              ;; NEXT I%
   7+ 9454
   8+ 9454
   9+ 9454 00 19 32 4A  SNE:            DB 000, 025, 050, 074, 098, 121, 142, 162
   9+ 9458 62 79 8E A2
  10+ 945C B5 C6 D5 E2                  DB 181, 198, 213, 226, 237, 245, 251, 255
  10+ 9460 ED F5 FB FF
  11+ 9464 FF FF FB F5                  DB 255, 255, 251, 245, 237, 226, 213, 198
  11+ 9468 ED E2 D5 C6
  12+ 946C B5 A2 8E 79                  DB 181, 162, 142, 121, 098, 074, 050, 025
  12+ 9470 62 4A 32 19
# file closed: ./Maths/SineTable.asm
 582  9474                  INCLUDE "./Maths/ArcTanTable.asm"
# file opened: ./Maths/ArcTanTable.asm
   1+ 9474              ;PRINT "ARCTAN TABLE"
   2+ 9474              ;FOR I% = 0 TO 31
   3+ 9474              ;    PRINT INT((128/PI) * ATN(I%/32)+0.5)
   4+ 9474              ;NEXT I%
   5+ 9474
   6+ 9474 00 01 03 04  ACT:            DB 000, 001, 003, 004, 005, 006, 008, 009
   6+ 9478 05 06 08 09
   7+ 947C 0A 0B 0C 0D                  DB 010, 011, 012, 013, 015, 016, 017, 018
   7+ 9480 0F 10 11 12
   8+ 9484 13 14 15 16                  DB 019, 020, 021, 022, 023, 024, 025, 025
   8+ 9488 17 18 19 19
   9+ 948C 1A 1B 1C 1D                  DB 026, 027, 028, 029, 030, 031, 031, 031
   9+ 9490 1E 1F 1F 1F
  10+ 9494
# file closed: ./Maths/ArcTanTable.asm
 583  9494                  INCLUDE "./Maths/negate16.asm"
# file opened: ./Maths/negate16.asm
   1+ 9494              ;;----------------------------------------------------------------------------------------------------------------------
   2+ 9494              ;; 16-bit negate
   3+ 9494                      ; Input:
   4+ 9494                      ;       HL = value
   5+ 9494                      ; Output:
   6+ 9494                      ;       HL = -value
   7+ 9494                      ; Destroys:
   8+ 9494                      ;       AF
   9+ 9494                      ;
  10+ 9494              negate16:
  11+ 9494 AF           negate16hl:         xor 	a
  12+ 9495 95                               sub 	l
  13+ 9496 6F                               ld 		l,a
  14+ 9497 9F                               sbc 	a,a
  15+ 9498 94                               sub 	h
  16+ 9499 67                               ld 		h,a
  17+ 949A C9                               ret
  18+ 949B
  19+ 949B AF           negate16de:         xor 	a
  20+ 949C 93                               sub 	e
  21+ 949D 5F                               ld 		e,a
  22+ 949E 9F                               sbc 	a,a
  23+ 949F 92                               sub 	d
  24+ 94A0 57                               ld 		d,a
  25+ 94A1 C9                               ret
  26+ 94A2
  27+ 94A2 AF           negate16bc:         xor 	a
  28+ 94A3 91                               sub 	c
  29+ 94A4 4F                               ld 		c,a
  30+ 94A5 9F                               sbc 	a,a
  31+ 94A6 90                               sub 	b
  32+ 94A7 47                               ld 		b,a
  33+ 94A8 C9                               ret
  34+ 94A9
# file closed: ./Maths/negate16.asm
 584  94A9                  INCLUDE "./Maths/asm_divide.asm"
# file opened: ./Maths/asm_divide.asm
   1+ 94A9              ;   K(3 2 1 0)           The result of the division
   2+ 94A9              ;   X                    X is preserved
   3+ 94A9
   4+ 94A9              ; Calculate K(3 2 1 0) = (A P+1 P) / (z_sign z_hi z_lo) where zsign hi lo is in DE with zsign leading hi
   5+ 94A9 00 00 00 00  varQRS                 DS      4
   6+ 94AD 00 00 00     varAPP                 DS     3
   7+ 94B0 00           RvarDiv                DS     1
   8+ 94B1
   9+ 94B1                                  DISPLAY "TODO:  neds rewrite of whoel DIDV3B2"
  10+ 94B1              ;; NEEDS REWRITE TODO OF WHOLE DIVD3B2
  11+ 94B1              ;; NEEDS REWRITE TODO
  12+ 94B1
  13+ 94B1              ; b = varR, c= varQ
  14+ 94B1              Requ256mulAdivQ_6502:
  15+ 94B1 CB 27        .LL31_6502:             sla     a                       ; ASL A                   \ Shift A to the left
  16+ 94B3 DA C8 94                             jp      c,.LL29_6502            ; BCS LL29               \ If bit 7 of A was set, then jump straight to the subtraction
  17+ 94B6                                      FlipCarryFlag                   ;                          If A < N, then C flag is set.
  17+ 94B6 3F          >                        ccf
  18+ 94B7                                      JumpIfALTNusng c, .LL31_SKIPSUB_6502 ; CMP Q              \ If A < Q, skip the following subtraction
  18+ 94B7 B9          >                        cp      c
  18+ 94B8 DA BD 94    >                        jp		c, .LL31_SKIPSUB_6502
  19+ 94BB                                                                      ; BCC P%+4
  20+ 94BB 91                                   sub     c                       ; SBC Q                  \ A >= Q, so set A = A - Q
  21+ 94BC                                      ClearCarryFlag
  21+ 94BC B7          >                        or a
  22+ 94BD              .LL31_SKIPSUB_6502:     FlipCarryFlag
  22+ 94BD 3F          >                        ccf
  23+ 94BE CB 10                                rl      b                       ; ROL R                  \ Rotate the counter in R to the left, and catch the result bit into bit 0 (which will be a 0 if we didn't do the subtraction, or 1 if we did)
  24+ 94C0 DA B1 94                             jp      c, .LL31_6502            ; BCS LL31               \ If we still have set bits in R, loop back to LL31 to do the next iteration of 7
  25+ 94C3 78                                   ld      a,b
  26+ 94C4 32 B0 94                             ld      (RvarDiv),a
  27+ 94C7 C9                                   ret                             ; RTS                    \ R left with remainder of division
  28+ 94C8 91           .LL29_6502:             sub     c                       ; SBC Q                  \ A >= Q, so set A = A - Q
  29+ 94C9                                      SetCarryFlag                    ; SEC                    \ Set the C flag to rotate into the result in R
  29+ 94C9 37          >                        scf
  30+ 94CA CB 10                                rl      b                       ; ROL R                  \ Rotate the counter in R to the left, and catch the result bit into bit 0 (which will be a 0 if we didn't do the subtraction, or 1 if we did)
  31+ 94CC DA B1 94                             jp      c, .LL31_6502            ; BCS LL31               \ If we still have set bits in R, loop back to LL31 to do the next iteration of 7
  32+ 94CF 78                                   ld      a,b                     ; RTS                    \ Return from the subroutine with R containing the
  33+ 94D0 32 B0 94                             ld      (RvarDiv),a                ; .
  34+ 94D3 C9                                   ret                             ; .                      \ remainder of the division
  35+ 94D4 3E FF        .LL2_6502:              ld      a,$FF                   ; LDA #255               \ The division is very close to 1, so return the closest
  36+ 94D6 32 B7 7F                             ld      (varR),a                ; STA R                  \ possible answer to 256, i.e. R = 255
  37+ 94D9 47                                   ld      b,a                     ; as we are using b as varR
  38+ 94DA                                      SetCarryFlag                    ; we failed so need carry flag set
  38+ 94DA 37          >                        scf
  39+ 94DB C9                                   ret                             ; RTS                    \ Return from the subroutine
  40+ 94DC                             DISPLAY "TODO : Merge Requ256mulAdivQ_6502  RequAmul256divQ"
  41+ 94DC              ; Entry point if varQ is populated with demoninator
  42+ 94DC              RequAmul256divQ:
  43+ 94DC F5           BFRDIV:                 push	af
  44+ 94DD 3A B6 7F                             ld		a,(varQ)
  45+ 94E0 4F                                   ld		c,a
  46+ 94E1 F1                                   pop		af
  47+ 94E2 FE 00                                cp		0
  48+ 94E4 CA FB 94                             jp		z, HLDIVC_0_BY	; fast exit if numerator is 0
  49+ 94E7 2E 00        RequAmul256divC:        ld		l,0
  50+ 94E9 67                                   ld		h,a
  51+ 94EA 06 10        HL_Div_Cold:			ld b,16			; fast entry point if C and HL are already set
  52+ 94EC AF                                   xor a
  53+ 94ED 29           LOOPPOINT:	            add hl,hl
  54+ 94EE 17                                   rla
  55+ 94EF B9                                   cp c
  56+ 94F0 38 02                                jr c,SKIPINCSUB
  57+ 94F2 2C                                   inc l
  58+ 94F3 91                                   sub c
  59+ 94F4 10 F7        SKIPINCSUB:             djnz LOOPPOINT
  60+ 94F6 7D                                   ld		a,l
  61+ 94F7 32 B7 7F                             ld 		(varR),a
  62+ 94FA C9                                   ret
  63+ 94FB 32 B7 7F     HLDIVC_0_BY:            ld		(varR),a
  64+ 94FE C9                                   ret
  65+ 94FF
  66+ 94FF
  67+ 94FF 21 B6 7F     Amul256DivQ:            ld      hl,varQ                 ; CMP Q                  \ If A >= Q, then the answer will not fit in one byte,
  68+ 9502 4E                                   ld      c,(hl)                  ; using c as Q var
  69+ 9503 B9                                   cp      c
  70+ 9504                                      FlipCarryFlag
  70+ 9504 3F          >                        ccf
  71+ 9505 DA 2D 95                             jp      c, .LL2_6502            ; BCS LL2                \ so jump to LL2 to return 255
  72+ 9508 06 FE                                ld      b,$FE                   ; LDX #%11111110         \ Set R to have bits 1-7 set, so we can rotate through 7 loop iterations, getting a 1 each time, and then we use b as Rvar
  73+ 950A CB 27        .LL31_6502:             sla     a                       ; ASL A                  \ Shift A to the left
  74+ 950C DA 21 95                             jp      c,.LL29_6502            ; BCS LL29               \ If bit 7 of A was set, then jump straight to the subtraction
  75+ 950F                                      FlipCarryFlag                   ;                          If A < N, then C flag is set.
  75+ 950F 3F          >                        ccf
  76+ 9510                                      JumpIfALTNusng c, .LL31_SKIPSUB_6502 ; CMP Q              \ If A < Q, skip the following subtraction
  76+ 9510 B9          >                        cp      c
  76+ 9511 DA 16 95    >                        jp		c, .LL31_SKIPSUB_6502
  77+ 9514                                                                      ; BCC P%+4
  78+ 9514 91                                   sub     c                       ; SBC Q                  \ A >= Q, so set A = A - Q
  79+ 9515                                      ClearCarryFlag
  79+ 9515 B7          >                        or a
  80+ 9516              .LL31_SKIPSUB_6502:     FlipCarryFlag
  80+ 9516 3F          >                        ccf
  81+ 9517 CB 10                                rl      b                       ; ROL R                  \ Rotate the counter in R to the left, and catch the result bit into bit 0 (which will be a 0 if we didn't do the subtraction, or 1 if we did)
  82+ 9519 DA 0A 95                             jp      c, .LL31_6502           ; BCS LL31               \ If we still have set bits in R, loop back to LL31 to do the next iteration of 7
  83+ 951C 78                                   ld      a,b
  84+ 951D 32 B7 7F                             ld      (varR),a
  85+ 9520 C9                                   ret                             ; RTS                    \ R left with remainder of division
  86+ 9521 91           .LL29_6502:             sub     c                       ; SBC Q                  \ A >= Q, so set A = A - Q
  87+ 9522                                      SetCarryFlag                    ; SEC                    \ Set the C flag to rotate into the result in R
  87+ 9522 37          >                        scf
  88+ 9523 CB 10                                rl      b                       ; ROL R                  \ Rotate the counter in R to the left, and catch the result bit into bit 0 (which will be a 0 if we didn't do the subtraction, or 1 if we did)
  89+ 9525 DA 0A 95                             jp      c, .LL31_6502           ; BCS LL31               \ If we still have set bits in R, loop back to LL31 to do the next iteration of 7
  90+ 9528 78                                   ld      a,b                     ; RTS                    \ Return from the subroutine with R containing the
  91+ 9529 32 B7 7F                             ld      (varR),a                ; .
  92+ 952C C9                                   ret                             ; .                      \ remainder of the division
  93+ 952D 3E FF        .LL2_6502:              ld      a,$FF                   ; LDA #255               \ The division is very close to 1, so return the closest
  94+ 952F 32 B7 7F                             ld      (varR),a                ; STA R                  \ possible answer to 256, i.e. R = 255
  95+ 9532                                      SetCarryFlag                    ; we failed so need carry flag set
  95+ 9532 37          >                        scf
  96+ 9533 C9                                   ret                             ; RTS                    \ Return from the subroutine
  97+ 9534
  98+ 9534
  99+ 9534 00           DIVD3B_SHIFT_REG:       DB      0
 100+ 9535
 101+ 9535 7B           DIV3B2DE:               ld      a,e                         ; load QRS with Z sign hi lo
 102+ 9536 32 AB 94                             ld      (varQRS+2),a
 103+ 9539 7A                                   ld      a,d
 104+ 953A E6 7F                                and     $7F
 105+ 953C 32 AA 94                             ld      (varQRS+1),a
 106+ 953F 7A                                   ld      a,d
 107+ 9540 E6 80                                and     $80
 108+ 9542 32 A9 94                             ld      (varQRS),a
 109+ 9545 C3 4B 95                             jp      DVID3B
 110+ 9548              ; Calculate K(3 2 1 0) = (A P+1 P) / (z_sign z_hi z_lo) = A P[1 0 ] / (SRQ)
 111+ 9548              ; We don't use zlo and assume its already loaded into SRQ
 112+ 9548 32 B8 7E     DVID3B2:                ld      (varP+2),a                  ;STA P+2                \ Set P+2 = A
 113+ 954B                                                                          ; LDA INWK+6             \ Set Q = z_lo
 114+ 954B                                                                          ; STA Q
 115+ 954B                                                                          ; LDA INWK+7             \ Set R = z_hi
 116+ 954B                                                                          ; STA R
 117+ 954B                                                                          ; LDA INWK+8             \ Set S = z_sign
 118+ 954B                                                                          ; STA S
 119+ 954B              ;  Given the above assignments, we now want to calculate K(3 2 1 0) = P(2 1 0) / (S R Q)
 120+ 954B 3A B6 7E     DVID3B:                 ld      a,(varP)                    ; LDA P                 \ Make sure P(2 1 0) is at least 1
 121+ 954E F6 01                                or      1                           ; ORA #1
 122+ 9550 32 B6 7E                             ld      (varP),a                    ; STA P
 123+ 9553              ;--- t = sign of P2 xor S (i.e. sign of result) ------------;
 124+ 9553 3A B8 7E                             ld      a,(varP+2)                  ; LDA P+2                \ Set T to the sign of P+2 * S (i.e. the sign of the
 125+ 9556 21 B8 7F                             ld      hl, varS                    ; EOR S                  \ result) and store it in T
 126+ 9559 AE                                   xor     (hl)
 127+ 955A E6 80                                and     $80                         ; AND #%10000000
 128+ 955C 32 D2 7F                             ld      (varT),a                    ; STA T
 129+ 955F              ;--- New bit added to aviod a divde by 0 -------------------;
 130+ 955F 3A B6 7F     .CheckQRSAtLeast1:      ld      a,(varQ)                    ;
 131+ 9562 21 B7 7F                             ld      hl,varR                     ;
 132+ 9565 B6                                   or      (hl)                        ;
 133+ 9566 C2 6E 95                             jp      nz,.DVL9Prep                ;
 134+ 9569 3E 01                                ld      a,1                         ;
 135+ 956B 32 B6 7F                             ld      (varQ),a                    ;
 136+ 956E              ; A P(1) P(0) = ABS P(2 1 0)
 137+ 956E 06 00        .DVL9Prep:              ld      b,0                         ; LDY #0                 \ Set Y = 0 to store the scale factor (use b as Y)
 138+ 9570 3A B8 7E                             ld      a,(varP+2)                  ; LDA P+2                \ Clear the sign bit of P+2, so the division can be done
 139+ 9573 E6 7F                                and     $7F                         ; AND #%01111111         \ with positive numbers and we'll set the correct sign below, once all the maths is done
 140+ 9575              ; We now shift (A P+1 P) left until A >= 64, counting the number of shifts in Y. This makes the top part of the division as large as possible, thus retaining as
 141+ 9575              ; much accuracy as we can.  When we come to return the final result, we shift the result by the number of places in Y, and in the correct direction
 142+ 9575                                      DISPLAY "TODO DVL9 and DVL6 move P and QRS into registers for faster shift"
 143+ 9575              ;-- while A < 64 shift A P(1) P(0) -------------------------;
 144+ 9575 FE 40        .DVL9:                  cp      64                          ; CMP #64                \ If A >= 64, jump down to DV14
 145+ 9577 D2 88 95                             jp      nc, .DV14                   ; BCS DV14
 146+ 957A 21 B6 7E                             ld      hl,varP                     ; ASL P                  \ Shift (A P+1 P) to the left
 147+ 957D CB 26                                sla     (hl)
 148+ 957F 23                                   inc     hl                          ; ROL P+1
 149+ 9580 CB 16                                rl      (hl)
 150+ 9582 CB 17                                rl      a                           ; ROL A
 151+ 9584 04                                   inc     b                           ; INY                    \ Increment the scale factor in Y
 152+ 9585 C3 75 95                             jp      .DVL9                       ; BNE DVL9               \ Loop up to DVL9 (this BNE is effectively a JMP, as Y will never be zero)
 153+ 9588              ; If we get here, A >= 64 and contains the highest byte of the numerator, scaled up by the number of left shifts in Y (b in our code)
 154+ 9588 32 B8 7E     .DV14:                  ld      (varP+2),a                  ; Store A in P+2, so we now have the scaled value of the numerator in P(2 1 0)
 155+ 958B 3A B8 7F                             ld      a,(varS)                    ; LDA S                  \ Set A = |S|
 156+ 958E E6 7F                                and     $7F                         ; AND #%01111111
 157+ 9590                                      ;nop                                ;  BMI DV9               \ If bit 7 of A is set, jump down to DV9 (which can never happen)
 158+ 9590              ; We now shift (S R Q) left until bit 7 of S is set, reducing Y by the number of shifts. This makes the bottom part of the division as large as possible, thus
 159+ 9590              ; retaining as much accuracy as we can. When we come to return the final result, we shift the result by the total number of places in Y, and in the correct
 160+ 9590              ; direction, to give us the correct result
 161+ 9590              ; We set A to |S| above, so the following actually shifts (A R Q)
 162+ 9590 05           .DVL6:                  dec     b                           ; DEY                    \ Decrement the scale factor in Y (b)
 163+ 9591 21 B6 7F                             ld      hl,varQ                     ; ASL Q                  \ Shift (A R Q) to the left
 164+ 9594 CB 26                                sla     (hl)                        ; .
 165+ 9596 21 B7 7F                             ld      hl,varR                     ; ROL R
 166+ 9599 CB 16                                rl      (hl)                        ; .
 167+ 959B CB 17                                rl      a                           ; ROL A
 168+ 959D F2 90 95                             jp      p,.DVL6                     ; BPL DVL6               \ Loop up to DVL6 to do another shift, until bit 7 of A is set and we can't shift left any further
 169+ 95A0              ; We have now shifted both the numerator and denominator left as far as they will go, keeping a tally of the overall scale factor of the various shifts in Y. We
 170+ 95A0              ; can now divide just the two highest bytes to get our result
 171+ 95A0 32 B6 7F     .DV9:                   ld      (varQ),a                    ; STA Q                  \ Set Q = A, the highest byte of the denominator
 172+ 95A3 4F                                   ld      c,a                         ; for Requ256mulAdivQ_6502 as it uses c as Q
 173+ 95A4 78                                   ld      a,b                         ; preserve shift register in DEVD3B_SHIFT_REG
 174+ 95A5 32 34 95                             ld      (DIVD3B_SHIFT_REG),a
 175+ 95A8              ; Note in Requ256mulAdivQ_6502 we use B as R Var for shift register
 176+ 95A8 06 FE                                ld      b,254                       ; LDA #254               \ Set R to have bits 1-7 set, so we can pass this to
 177+ 95AA 32 B7 7F                             ld      (varR),a                    ; STA R                  \ LL31 to act as the bit counter in the division
 178+ 95AD 3A B8 7E                             ld      a,(varP+2)                  ; LDA P+2                \ Set A to the highest byte of the numerator
 179+ 95B0 CD B1 94                             call    Requ256mulAdivQ_6502        ; JSR LL31               \ Call LL31 to calculate: R = 256 * A / Q which means result is in b
 180+ 95B3              ; The result of our division is now in R, so we just need to shift it back by the scale factor in Y
 181+ 95B3                                      ZeroA                               ; LDA #0                \ Set K(3 2 1) = 0 to hold the result (we populate K)
 181+ 95B3 AF          >                        xor a
 182+ 95B4 32 CA 7F                             ld      (varK+1),a                  ; STA K+1               \ next)
 183+ 95B7 32 CB 7F                             ld      (varK+2),a                  ; STA K+2
 184+ 95BA 32 CC 7F                             ld      (varK+3),a                  ; STA K+3
 185+ 95BD 3A 34 95                             ld      a,(DIVD3B_SHIFT_REG)        ; TYA                   \ If Y (shift counter in b) is positive, jump to DV12
 186+ 95C0 B7                                   or      a                           ; .                      we want to check the sign or if its zero
 187+ 95C1 CA EC 95                             jp      z,.DV13                     ; Optimisation to save a second jump from DV12 to DV13
 188+ 95C4 F2 F7 95                             jp      p,.DV12                     ; BPL DV12
 189+ 95C7              ; If we get here then Y is negative, so we need to shift the result R to the left by Y places, and then set the correct sign for the result
 190+ 95C7                                      DISPLAY "TODO check oprimisation here for var r  in b"
 191+ 95C7 48                                   ld      c,b
 192+ 95C8 3A 34 95                             ld      a,(DIVD3B_SHIFT_REG)
 193+ 95CB 47                                   ld      b,a
 194+ 95CC 79                                   ld      a,c
 195+ 95CD                                      ; OPTIM ld      a,(varR)                    ; LDA R                  \ Set A = R
 196+ 95CD CB 27        .DVL8:                  sla     a                           ; ASL A                  \ Shift (K+3 K+2 K+1 A) left
 197+ 95CF 21 CA 7F                             ld      hl,varK+1                   ; ROL K+1
 198+ 95D2 CB 16                                rl      (hl)                        ; .
 199+ 95D4 23                                   inc     hl                          ; ROL K+2
 200+ 95D5 CB 16                                rl      (hl)                        ; .
 201+ 95D7 23                                   inc     hl                          ; ROL K+3
 202+ 95D8 CB 16                                rl      (hl)                        ; .
 203+ 95DA 04                                   inc     b                           ; INY                    \ Increment the scale factor in Y
 204+ 95DB C2 CD 95                             jp      nz,.DVL8                    ; BNE DVL8               \ Loop back to DVL8 until we have shifted left by Y places
 205+ 95DE 32 C9 7F                             ld      (varK),a                    ; STA K                  \ Store A in K so the result is now in K(3 2 1 0)
 206+ 95E1 3A CC 7F                             ld      a,(varK+3)                  ; LDA K+3                \ Set K+3 to the sign in T, which we set above to the
 207+ 95E4 21 D2 7F                             ld      hl,varT                     ; ORA T                  \ correct sign for the result
 208+ 95E7 B6                                   or      (hl)                        ; .
 209+ 95E8 32 CC 7F                             ld      (varK+3),a                  ; STA K+3
 210+ 95EB C9                                   ret                                 ; RTS                    \ Return from the subroutine
 211+ 95EC              ; If we get here then Y is zero, so we don't need to shift the result R, we just need to set the correct sign for the result
 212+ 95EC 78           .DV13:                  ld      a,b; varR)                  ; LDA R                  \ Store R in K so the result is now in K(3 2 1 0)
 213+ 95ED 32 C9 7F                             ld      (varK),a                    ; STA K
 214+ 95F0 3A D2 7F                             ld      a,(varT)                    ; LDA T                  \ Set K+3 to the sign in T, which we set above to the
 215+ 95F3 32 CC 7F                             ld      (varK+3),a                  ; STA K+3                \ correct sign for the result
 216+ 95F6 C9                                   ret                                 ; RTS                    \ Return from the subroutine
 217+ 95F7              ; if we get here U is positive but still could be zero, now this is handled in DV9
 218+ 95F7              .DV12:                  ; nop                               ; BEQ DV13               \ We jumped here having set A to the scale factor in Y, so this jumps up to DV13 if Y = 0
 219+ 95F7              ; If we get here then Y is positive and non-zero, so we need to shift the result R to the right by Y places and then set the correct sign for the result. We also
 220+ 95F7              ; know that K(3 2 1) will stay 0, as we are shifting the lowest byte to the right, so no set bits will make their way into the top three bytes
 221+ 95F7                                      ;ld      a,(varR)                    ; LDA R                  \ Set A = R
 222+ 95F7 48                                   ld      c,b
 223+ 95F8 3A 34 95                             ld      a,(DIVD3B_SHIFT_REG)
 224+ 95FB 47                                   ld      b,a
 225+ 95FC 79                                   ld      a,c
 226+ 95FD CB 3F        .DVL10:                 srl     a                           ; LSR A                  \ Shift A right
 227+ 95FF 05                                   dec     b                           ; DEY                    \ Decrement the scale factor in Y
 228+ 9600 C2 FD 95                             jp      nz,.DVL10                   ; BNE DVL10              \ Loop back to DVL10 until we have shifted right by Y places
 229+ 9603 32 C9 7F                             ld      (varK),a                    ; STA K                  \ Store the shifted A in K so the result is now in K(3 2 1 0)
 230+ 9606 3A D2 7F                             ld      a,(varT)                    ; LDA T                  \ Set K+3 to the sign in T, which we set above to the
 231+ 9609 32 CC 7F                             ld      (varK+3),a                  ; STA K+3                \ correct sign for the result
 232+ 960C C9                                   ret                                 ; RTS                    \ Return from the subroutine
 233+ 960D              ;
 234+ 960D              ;   Set flags E to 11111110
 235+ 960D              ;   Loop:   A << 2
 236+ 960D              ;           if carry was 0
 237+ 960D              ;               if a >= D
 238+ 960D              ;                   A = A - D
 239+ 960D              ;                   clear carry (probably irrelevant really)
 240+ 960D              ;           else
 241+ 960D
 242+ 960D              ;               sla flags << bringing in carry of 1
 243+ 960D              ;               if bit 7 of flag was set then loop
 244+ 960D              ;                                        elase a = e and exit
 245+ 960D              ;
 246+ 960D              ; ">BC_Div_DE: BC = BC / DE. HL = remainder fast divide with unrolled loop BC/DE ==> BC, remainder in HL
 247+ 960D              ;
 248+ 960D              ;INPUTS: hl = dividend dbc = divisor
 249+ 960D              ;OUTPUTS: hl/de -> AHL = quotient CDE = remainder, Carryflag set if divide by 0
 250+ 960D
 251+ 960D 57           DVIDT:                  ld      d,a                     ; D = var P+1
 252+ 960E 3A B6 7F                             ld      a,(varQ)
 253+ 9611 4F                                   ld      c,a                     ; C = var Q
 254+ 9612 3A B6 7E                             ld      a,(varP)
 255+ 9615 5F                                   ld      e,a                     ; E = var P
 256+ 9616                                      ; Need fast exists on ABS values
 257+ 9616 7A           BAequDEdivC:            ld      a,d                     ; Fast exit is value is 0
 258+ 9617 B3                                   or      e                       ; .
 259+ 9618 28 2A                                jr      z,.ResultIsZero         ; .
 260+ 961A 79                                   ld      a,c                     ; Fast exit is divide by 0
 261+ 961B A7                                   and     a                       ;
 262+ 961C 28 29                                jr      z,.ResultIsFFFF         ;
 263+ 961E 7A           .SavSign:               ld      a,d                     ; preserve sign of result in var T
 264+ 961F A9                                   xor     c                       ;
 265+ 9620 E6 80                                and     $80
 266+ 9622 6F                                   ld      l,a                     ; l = var T
 267+ 9623 3E 00                                ld      a,0
 268+ 9625 06 10                                ld      b,16
 269+ 9627                                      ShiftDELeft1
 269+ 9627 CB 23       >			   sla e
 269+ 9629 CB 12       >			   rl  d
 270+ 962B CB 21                                sla     c                       ; c = abs c
 271+ 962D CB 39                                srl     c
 272+ 962F CB 17        .DivideLoop:            rl      a
 273+ 9631                                      JumpIfALTNusng c, .SkipSubtract
 273+ 9631 B9          >                        cp      c
 273+ 9632 DA 38 96    >                        jp		c, .SkipSubtract
 274+ 9635                                      ClearCarryFlag
 274+ 9635 B7          >                        or a
 275+ 9636 99                                   sbc     c
 276+ 9637                                      ClearCarryFlag
 276+ 9637 B7          >                        or a
 277+ 9638 3F           .SkipSubtract:          ccf
 278+ 9639 CB 13                                rl      e
 279+ 963B CB 12                                rl      d
 280+ 963D 05                                   dec     b
 281+ 963E 20 EF                                jr      nz,.DivideLoop
 282+ 9640 7B                                   ld      a,e
 283+ 9641 B5                                   or      l
 284+ 9642 42                                   ld      b,d
 285+ 9643 C9                                   ret
 286+ 9644              .ResultIsZero:          ZeroA
 286+ 9644 AF          >                        xor a
 287+ 9645 47                                   ld      b,a
 288+ 9646 C9                                   ret
 289+ 9647 3E FF        .ResultIsFFFF:          ld      a,$FF
 290+ 9649 47                                   ld      b,a
 291+ 964A C9                                   ret
 292+ 964B
 293+ 964B 57           DIV96:                  ld      d,a                     ; D = var P+1
 294+ 964C 3A B6 7F                             ld      a,(varQ)
 295+ 964F 0E 60                                ld      c,96                    ; C = var Q
 296+ 9651 3A B6 7E                             ld      a,(varP)
 297+ 9654 5F                                   ld      e,a                     ; E = var P
 298+ 9655                                      ; Need fast exists on ABS values
 299+ 9655 7A           BAequDEdiv96            ld      a,d                     ; Fast exit is value is 0
 300+ 9656 B3                                   or      e                       ; .
 301+ 9657 28 26                                jr      z,.ResultIsZero         ; .
 302+ 9659 7A           .SavSign:               ld      a,d                     ; preserve sign of result in var T
 303+ 965A A9                                   xor     c                       ;
 304+ 965B E6 80                                and     $80
 305+ 965D 6F                                   ld      l,a                     ; l = var T
 306+ 965E 3E 00                                ld      a,0
 307+ 9660 06 10                                ld      b,16
 308+ 9662                                      ShiftDELeft1
 308+ 9662 CB 23       >			   sla e
 308+ 9664 CB 12       >			   rl  d
 309+ 9666 CB 21                                sla     c                       ; c = abs c
 310+ 9668 CB 39                                srl     c
 311+ 966A CB 17        .DivideLoop:            rl      a
 312+ 966C                                      JumpIfALTNusng c, .SkipSubtract
 312+ 966C B9          >                        cp      c
 312+ 966D DA 73 96    >                        jp		c, .SkipSubtract
 313+ 9670                                      ClearCarryFlag
 313+ 9670 B7          >                        or a
 314+ 9671 99                                   sbc     c
 315+ 9672                                      ClearCarryFlag
 315+ 9672 B7          >                        or a
 316+ 9673 3F           .SkipSubtract:          ccf
 317+ 9674 CB 13                                rl      e
 318+ 9676 CB 12                                rl      d
 319+ 9678 05                                   dec     b
 320+ 9679 20 EF                                jr      nz,.DivideLoop
 321+ 967B 7B                                   ld      a,e
 322+ 967C B5                                   or      l
 323+ 967D 42                                   ld      b,d
 324+ 967E C9                                   ret
 325+ 967F              .ResultIsZero:          ZeroA
 325+ 967F AF          >                        xor a
 326+ 9680 47                                   ld      b,a
 327+ 9681 C9                                   ret
 328+ 9682
 329+ 9682 14           Div16by24usgn:          inc     d                           ; can we fast retu
 330+ 9683 15                                   dec     d
 331+ 9684 20 13                                jr      nz,.ResultZero
 332+ 9686 50 59                                ld      de,bc                       ; so prep for bc/de
 333+ 9688 44 4D                                ld      bc,hl
 334+ 968A 7A           .div16by16usng:         ld      a,d
 335+ 968B B3                                   or      e
 336+ 968C 28 10                                jr      z,.DivideByZero
 337+ 968E 14                                   inc     d
 338+ 968F 15                                   dec     d
 339+ 9690 CD E2 97                             call    BC_Div_DE
 340+ 9693                                      ZeroA
 340+ 9693 AF          >                        xor a
 341+ 9694 EB                                   ex      de,hl                       ; de = remainder (need to fix c after hl = nothing of worth)
 342+ 9695 60 69                                ld      hl,bc                       ; hl = result (a is zero from above)
 343+ 9697 4F                                   ld      c,a                         ; now fix c
 344+ 9698 C9                                   ret
 345+ 9699 AF           .ResultZero:            xor     a                           ; set AHL to 0 as d was 0 so h is zero
 346+ 969A 4F                                   ld      c,a                         ; c = 0
 347+ 969B 67                                   ld      h,a
 348+ 969C 6F                                   ld      l,a
 349+ 969D C9                                   ret
 350+ 969E 3E FF        .DivideByZero:          ld      a,$FF
 351+ 96A0 67                                   ld      h,a
 352+ 96A1 6F                                   ld      l,a
 353+ 96A2                                      SetCarryFlag
 353+ 96A2 37          >                        scf
 354+ 96A3 C9                                   ret
 355+ 96A4
 356+ 96A4              ;DIVD4 P-R=A/Qunsg  \P.R = A/Q unsigned called by Hall
 357+ 96A4                          IFDEF HLEquAmul256DivD_Used
 358+ 96A4 ~            HLEquAmul256DivD:       ld		b,8							; counter
 359+ 96A4 ~                                    sla		a							;
 360+ 96A4 ~                                    ld		h,a							; r a * 2 we will build result in hl
 361+ 96A4 ~            .DivideLoop:            rl		a							; a = a * 2
 362+ 96A4 ~                                    jr      c,.StraightToSubtraction    ; jump on carry to subtraction
 363+ 96A4 ~                                    cp      d                           ; what was var Q
 364+ 96A4 ~                                    jr		c,.SkipSubtraction	        ; if a < d skip subtraction, note this will come to skip subtraction with carry the wrong way round
 365+ 96A4 ~            .StraightToSubtraction: ClearCarryFlag                      ; in 6502 the borrow flag is inverted carry, z80 just uses carry so we need to clear it
 366+ 96A4 ~                                    sbc     a,d                         ; a = a - q
 367+ 96A4 ~                                    ClearCarryFlag                      ; set carry so it gets shifted into bit 0 of b. we do this as we have to flip carry due to jr c from earlier cp d
 368+ 96A4 ~            .SkipSubtraction:       ccf                                 ; we need to do this as 6502 does opposite on carry, i.e. if we jumped direct here then carry would be set in z80
 369+ 96A4 ~                                    rl      h                           ; roll d left bringing in carry if there was an sbc performed
 370+ 96A4 ~                                    djnz    .DivideLoop                 ; 8 cycles
 371+ 96A4 ~            .CalculateRemainder:    cp      d                           ; calulate 256 * a / d if q >= q then answer will not fit in one byte d is still set, a holds remainder to be subtracted
 372+ 96A4 ~                                    jr      nc, .RemainderTooBig
 373+ 96A4 ~                                    ClearCarryFlag                      ; remove carry as the previous cp will have set it and mess up the sla in the remainder loop
 374+ 96A4 ~            .InitRemainderLoop:     ld      b,%11111110                 ; loop for bits 1 to 7
 375+ 96A4 ~                                    ld      l,b                         ; and set l to capture result bits (R)
 376+ 96A4 ~            .RemainderLoop:         sla     a                           ; shift a left
 377+ 96A4 ~                                    jr      c, .RemainderSubtraction    ; if there was a carry go to subtraction
 378+ 96A4 ~                                    cp      d                           ; if a < d then skip subtraction
 379+ 96A4 ~                                    jr      c,.RemainderSkipSubtract    ; .
 380+ 96A4 ~                                    sbc     d                           ; a > q so a = a - q, carry will be clear here
 381+ 96A4 ~            .RemainderSkipSubtract: ccf                                 ; as the jr used z80 we need to flip the carry to behave like 6502
 382+ 96A4 ~                                    rl      l                           ; rotate counter to the left
 383+ 96A4 ~                                    jr      c, .RemainderLoop           ; if there was a bit pushed to carry then loop
 384+ 96A4 ~                                    ret
 385+ 96A4 ~            .RemainderSubtraction:  sbc     d                           ; as the carry came from an sla we want to retain it
 386+ 96A4 ~                                    SetCarryFlag                        ; roll in a carry bit to result
 387+ 96A4 ~                                    rl      l                           ;
 388+ 96A4 ~                                    jr      c, .RemainderLoop           ; and loop if there was a carry bit that came out
 389+ 96A4 ~                                    ret
 390+ 96A4 ~            .RemainderTooBig:       ld      l,$FF                       ; now hl = result
 391+ 96A4 ~                                    ret
 392+ 96A4                          ENDIF
 393+ 96A4
 394+ 96A4 BA           AEquAmul256DivD:        cp      d
 395+ 96A5 28 1D                                jr      z,.BothSame
 396+ 96A7 30 1E                                jr      nc,.DgtA
 397+ 96A9 1E FE                                ld      e,%11111110                 ; Set R to have bits 1-7 set, so we can rotate through 7
 398+ 96AB CB 27        .DivideLoop:            sla     a
 399+ 96AD 38 0D                                jr      c,.LL29
 400+ 96AF                                      JumpIfALTNusng  d, .SkipSub         ; will jump if carry set, so we need to reset on the rol
 400+ 96AF BA          >                        cp      d
 400+ 96B0 DA B5 96    >                        jp		c, .SkipSub
 401+ 96B3 92                                   sub     d
 402+ 96B4                                      ClearCarryFlag                      ; reset clarry as it will be complimented for rotate as 6502 does carry flags inverted
 402+ 96B4 B7          >                        or a
 403+ 96B5              .SkipSub:               FlipCarryFlag                       ; if we did the subtract the carry will be clear so we need to invert to roll in.
 403+ 96B5 3F          >                        ccf
 404+ 96B6 CB 13                                rl      e
 405+ 96B8 38 F1                                jr      c,.DivideLoop
 406+ 96BA 7B                                   ld      a,e
 407+ 96BB C9                                   ret
 408+ 96BC 92           .LL29:                  sub     d                           ; A >= Q, so set A = A - Q
 409+ 96BD                                      SetCarryFlag                        ; Set the C flag to rotate into the result in R
 409+ 96BD 37          >                        scf
 410+ 96BE CB 13                                rl      e                           ; rotate counter e left
 411+ 96C0 38 E9                                jr      c,.DivideLoop               ; if a bit was spat off teh end then loop
 412+ 96C2 7B                                   ld      a,e                         ; stick result in a
 413+ 96C3 C9                                   ret
 414+ 96C4 3E 01        .BothSame:              ld  a,1
 415+ 96C6 C9                                   ret
 416+ 96C7 3E FF        .DgtA:                  ld  a,255                           ; Fail with FF as result
 417+ 96C9 C9                                   ret
 418+ 96CA
 419+ 96CA              ; Divide 8-bit values
 420+ 96CA              ; In: Divide E by divider C
 421+ 96CA              ; Out: A = result, B = rest
 422+ 96CA              ;
 423+ 96CA              ;;;Div8:
 424+ 96CA              ;;;    xor a
 425+ 96CA              ;;;    ld b,8
 426+ 96CA              ;;;Div8_Loop:
 427+ 96CA              ;;;    rl e
 428+ 96CA              ;;;    rla
 429+ 96CA              ;;;    sub c
 430+ 96CA              ;;;    jr nc,Div8_NoAdd
 431+ 96CA              ;;;    add a,c
 432+ 96CA              ;;;Div8_NoAdd:
 433+ 96CA              ;;;    djnz Div8_Loop
 434+ 96CA              ;;;    ld b,a0
 435+ 96CA              ;;;    ld a,e
 436+ 96CA              ;;;    rla
 437+ 96CA              ;;;    cpl
 438+ 96CA              ;;;    ret
 439+ 96CA
 440+ 96CA              ;;Inputs: DE is the numerator, BC is the divisor
 441+ 96CA              ;;Outputs: DE is the result
 442+ 96CA              ;;         A is a copy of E
 443+ 96CA              ;;         HL is the remainder
 444+ 96CA              ;;         BC is not changed
 445+ 96CA              ;; so DE = DE /BC
 446+ 96CA              ;140 bytes
 447+ 96CA              ;145cc
 448+ 96CA
 449+ 96CA              MacroDEDivBC:       MACRO
 450+ 96CA ~                                rla
 451+ 96CA ~                                adc     hl,hl
 452+ 96CA ~                                sbc     hl,bc
 453+ 96CA ~                                jr      nc,$+3
 454+ 96CA ~                                add     hl,bc
 455+ 96CA                                  ENDM
 456+ 96CA
 457+ 96CA AF           DEequDEDivBC:       xor a
 458+ 96CB ED 62                            sbc hl,hl
 459+ 96CD 7A                               ld a,d
 460+ 96CE                                  MacroDEDivBC
 460+ 96CE 17          >                    rla
 460+ 96CF ED 6A       >                    adc     hl,hl
 460+ 96D1 ED 42       >                    sbc     hl,bc
 460+ 96D3 30 01       >                    jr      nc,$+3
 460+ 96D5 09          >                    add     hl,bc
 461+ 96D6                                  MacroDEDivBC
 461+ 96D6 17          >                    rla
 461+ 96D7 ED 6A       >                    adc     hl,hl
 461+ 96D9 ED 42       >                    sbc     hl,bc
 461+ 96DB 30 01       >                    jr      nc,$+3
 461+ 96DD 09          >                    add     hl,bc
 462+ 96DE                                  MacroDEDivBC
 462+ 96DE 17          >                    rla
 462+ 96DF ED 6A       >                    adc     hl,hl
 462+ 96E1 ED 42       >                    sbc     hl,bc
 462+ 96E3 30 01       >                    jr      nc,$+3
 462+ 96E5 09          >                    add     hl,bc
 463+ 96E6                                  MacroDEDivBC
 463+ 96E6 17          >                    rla
 463+ 96E7 ED 6A       >                    adc     hl,hl
 463+ 96E9 ED 42       >                    sbc     hl,bc
 463+ 96EB 30 01       >                    jr      nc,$+3
 463+ 96ED 09          >                    add     hl,bc
 464+ 96EE                                  MacroDEDivBC
 464+ 96EE 17          >                    rla
 464+ 96EF ED 6A       >                    adc     hl,hl
 464+ 96F1 ED 42       >                    sbc     hl,bc
 464+ 96F3 30 01       >                    jr      nc,$+3
 464+ 96F5 09          >                    add     hl,bc
 465+ 96F6                                  MacroDEDivBC
 465+ 96F6 17          >                    rla
 465+ 96F7 ED 6A       >                    adc     hl,hl
 465+ 96F9 ED 42       >                    sbc     hl,bc
 465+ 96FB 30 01       >                    jr      nc,$+3
 465+ 96FD 09          >                    add     hl,bc
 466+ 96FE                                  MacroDEDivBC
 466+ 96FE 17          >                    rla
 466+ 96FF ED 6A       >                    adc     hl,hl
 466+ 9701 ED 42       >                    sbc     hl,bc
 466+ 9703 30 01       >                    jr      nc,$+3
 466+ 9705 09          >                    add     hl,bc
 467+ 9706                                  MacroDEDivBC
 467+ 9706 17          >                    rla
 467+ 9707 ED 6A       >                    adc     hl,hl
 467+ 9709 ED 42       >                    sbc     hl,bc
 467+ 970B 30 01       >                    jr      nc,$+3
 467+ 970D 09          >                    add     hl,bc
 468+ 970E 17                               rla
 469+ 970F 2F                               cpl
 470+ 9710 57                               ld d,a
 471+ 9711
 472+ 9711 7B                               ld a,e
 473+ 9712                                  MacroDEDivBC
 473+ 9712 17          >                    rla
 473+ 9713 ED 6A       >                    adc     hl,hl
 473+ 9715 ED 42       >                    sbc     hl,bc
 473+ 9717 30 01       >                    jr      nc,$+3
 473+ 9719 09          >                    add     hl,bc
 474+ 971A                                  MacroDEDivBC
 474+ 971A 17          >                    rla
 474+ 971B ED 6A       >                    adc     hl,hl
 474+ 971D ED 42       >                    sbc     hl,bc
 474+ 971F 30 01       >                    jr      nc,$+3
 474+ 9721 09          >                    add     hl,bc
 475+ 9722                                  MacroDEDivBC
 475+ 9722 17          >                    rla
 475+ 9723 ED 6A       >                    adc     hl,hl
 475+ 9725 ED 42       >                    sbc     hl,bc
 475+ 9727 30 01       >                    jr      nc,$+3
 475+ 9729 09          >                    add     hl,bc
 476+ 972A                                  MacroDEDivBC
 476+ 972A 17          >                    rla
 476+ 972B ED 6A       >                    adc     hl,hl
 476+ 972D ED 42       >                    sbc     hl,bc
 476+ 972F 30 01       >                    jr      nc,$+3
 476+ 9731 09          >                    add     hl,bc
 477+ 9732                                  MacroDEDivBC
 477+ 9732 17          >                    rla
 477+ 9733 ED 6A       >                    adc     hl,hl
 477+ 9735 ED 42       >                    sbc     hl,bc
 477+ 9737 30 01       >                    jr      nc,$+3
 477+ 9739 09          >                    add     hl,bc
 478+ 973A                                  MacroDEDivBC
 478+ 973A 17          >                    rla
 478+ 973B ED 6A       >                    adc     hl,hl
 478+ 973D ED 42       >                    sbc     hl,bc
 478+ 973F 30 01       >                    jr      nc,$+3
 478+ 9741 09          >                    add     hl,bc
 479+ 9742                                  MacroDEDivBC
 479+ 9742 17          >                    rla
 479+ 9743 ED 6A       >                    adc     hl,hl
 479+ 9745 ED 42       >                    sbc     hl,bc
 479+ 9747 30 01       >                    jr      nc,$+3
 479+ 9749 09          >                    add     hl,bc
 480+ 974A                                  MacroDEDivBC
 480+ 974A 17          >                    rla
 480+ 974B ED 6A       >                    adc     hl,hl
 480+ 974D ED 42       >                    sbc     hl,bc
 480+ 974F 30 01       >                    jr      nc,$+3
 480+ 9751 09          >                    add     hl,bc
 481+ 9752 17                               rla
 482+ 9753 2F                               cpl
 483+ 9754 5F                               ld e,a
 484+ 9755 C9                               ret
 485+ 9756              ;divdide by 16 using undocumented instrunctions
 486+ 9756              ;Input: BC = Dividend, DE = Divisor, HL = 0
 487+ 9756              ;Output: BC = Quotient, HL = Remainder
 488+ 9756              ; Our use
 489+ 9756              ; BC = A0
 490+ 9756              ; DE = 0C
 491+ 9756              ; so BC = a * 256 / C
 492+ 9756              DIV16Amul256dCUNDOC:    JumpIfAGTENusng	  c,DEV16ATooLarge                                          ; first off if a > c ten return 255
 492+ 9756 B9          >                        cp     c
 492+ 9757 D2 82 97    >                        jp		nc,DEV16ATooLarge
 493+ 975A 47                                   ld      b,a
 494+ 975B 59                                   ld      e,c
 495+ 975C 0E 00                                ld      c,0
 496+ 975E 16 00                                ld      d,0
 497+ 9760 C3 6D 97                             jp      DIV16UNDOC
 498+ 9763 47           DIV16Amul256dQUNDOC:    ld      b,a
 499+ 9764 0E 00                                ld      c,0
 500+ 9766 21 B6 7F                             ld      hl,varQ
 501+ 9769 7E                                   ld      a,(hl)
 502+ 976A 16 00                                ld      d,0
 503+ 976C 5F                                   ld      e,a
 504+ 976D              DIV16BCDivDEUNDOC:
 505+ 976D 21 00 00     DIV16UNDOC:             ld      hl,0
 506+ 9770 78                                   ld      a,b
 507+ 9771 06 10                                ld      b,16
 508+ 9773 CB 31        DIV16UNDOCLOOP:         sll	c		; unroll 16 times
 509+ 9775 17                                   rla			; ...
 510+ 9776 ED 6A                                adc	hl,hl		; ...
 511+ 9778 ED 52                                sbc	hl,de		; ...
 512+ 977A 30 02                                jr	nc,DIV16UNDOCSKIP		; ...
 513+ 977C 19                                   add	hl,de		; ...
 514+ 977D 0D                                   dec	c		; ...
 515+ 977E 10 F3        DIV16UNDOCSKIP:         djnz DIV16UNDOCLOOP
 516+ 9780 47                                   ld   b,a
 517+ 9781 C9                                   ret
 518+ 9782 01 FF 00     DEV16ATooLarge:         ld     bc,$00FF
 519+ 9785 C9                                   ret
 520+ 9786              ; switch to logarithm version
 521+ 9786              ; "> asm_div8 C_Div_D - C is the numerator, D is the denominator, A is the remainder, B is 0, C is the result of C/D,D,E,H,L are not changed"
 522+ 9786 06 08        asm_div8:               ld b,8
 523+ 9788 AF                                   xor a
 524+ 9789 CB 21        .div8_loop:	            sla c
 525+ 978B 17                                   rla
 526+ 978C BA                                   cp d
 527+ 978D 38 02                                jr c,.div8_skip
 527+ 978F
 528+ 978F 0C                                   inc c
 529+ 9790 92                                   sub d
 530+ 9791 10 F6        .div8_skip:	            djnz .div8_loop
 531+ 9793 C9                                   ret
 532+ 9794              ; ">asm_div16: HL_Div_C: HL is the numerator,  C is the denominator, output A is the remainder, B is 0, C,DE is not changedHL is the quotient"
 533+ 9794 06 10        asm_div16:              ld b,16
 534+ 9796 AF                                   xor a
 535+ 9797 CB 25        div16_loop:	            sla l
 536+ 9799 CB 14                                rl	h
 537+ 979B              ;    add hl,hl
 538+ 979B 17                                   rla
 539+ 979C B9                                   cp c
 540+ 979D 38 02                                jr c,div16_skip
 541+ 979F 2C                                   inc l
 542+ 97A0 91                                   sub c
 543+ 97A1 10 F4        div16_skip:		        djnz div16_loop
 544+ 97A3 C9                                   ret
 545+ 97A4              ;
 546+ 97A4              ; Divide 16-bit values (with 16-bit result)
 547+ 97A4              ; In: Divide BC by divider DE
 548+ 97A4              ; Out: BC = result, HL = rest
 549+ 97A4              ;
 550+ 97A4              HLDivC_Iteration: 	    MACRO
 551+ 97A4 ~                                    add	hl,hl		; unroll 16 times
 552+ 97A4 ~                                    rla				; ...
 553+ 97A4 ~                                    cp	c			; ...
 554+ 97A4 ~                                    jr	1F
 555+ 97A4 ~                                    sub	c			; ...
 556+ 97A4 ~            1:
 557+ 97A4 ~                                    inc	l			; ...
 558+ 97A4                                      ENDM
 559+ 97A4
 560+ 97A4              EDivC_Iteration:        MACRO
 561+ 97A4 ~                                    rl  e
 562+ 97A4 ~                                    rla
 563+ 97A4 ~                                    sub c
 564+ 97A4 ~                                    jr  nc,.Div8_NoAdd
 565+ 97A4 ~                                    add a,c
 566+ 97A4 ~            .Div8_NoAdd:
 567+ 97A4                                      ENDM
 568+ 97A4
 569+ 97A4              ; Switch to a logarithm version
 570+ 97A4              ; Divide E by divider C Out: A = result, B = rest
 571+ 97A4              E_Div_C:                ZeroA
 571+ 97A4 AF          >                        xor a
 572+ 97A5                                      EDivC_Iteration
 572+ 97A5 CB 13       >                        rl  e
 572+ 97A7 17          >                        rla
 572+ 97A8 91          >                        sub c
 572+ 97A9 30 01       >                        jr  nc,.Div8_NoAdd
 572+ 97AB 81          >                        add a,c
 572+ 97AC             >.Div8_NoAdd:
 573+ 97AC                                      EDivC_Iteration
 573+ 97AC CB 13       >                        rl  e
 573+ 97AE 17          >                        rla
 573+ 97AF 91          >                        sub c
 573+ 97B0 30 01       >                        jr  nc,.Div8_NoAdd
 573+ 97B2 81          >                        add a,c
 573+ 97B3             >.Div8_NoAdd:
 574+ 97B3                                      EDivC_Iteration
 574+ 97B3 CB 13       >                        rl  e
 574+ 97B5 17          >                        rla
 574+ 97B6 91          >                        sub c
 574+ 97B7 30 01       >                        jr  nc,.Div8_NoAdd
 574+ 97B9 81          >                        add a,c
 574+ 97BA             >.Div8_NoAdd:
 575+ 97BA                                      EDivC_Iteration
 575+ 97BA CB 13       >                        rl  e
 575+ 97BC 17          >                        rla
 575+ 97BD 91          >                        sub c
 575+ 97BE 30 01       >                        jr  nc,.Div8_NoAdd
 575+ 97C0 81          >                        add a,c
 575+ 97C1             >.Div8_NoAdd:
 576+ 97C1                                      EDivC_Iteration
 576+ 97C1 CB 13       >                        rl  e
 576+ 97C3 17          >                        rla
 576+ 97C4 91          >                        sub c
 576+ 97C5 30 01       >                        jr  nc,.Div8_NoAdd
 576+ 97C7 81          >                        add a,c
 576+ 97C8             >.Div8_NoAdd:
 577+ 97C8                                      EDivC_Iteration
 577+ 97C8 CB 13       >                        rl  e
 577+ 97CA 17          >                        rla
 577+ 97CB 91          >                        sub c
 577+ 97CC 30 01       >                        jr  nc,.Div8_NoAdd
 577+ 97CE 81          >                        add a,c
 577+ 97CF             >.Div8_NoAdd:
 578+ 97CF                                      EDivC_Iteration
 578+ 97CF CB 13       >                        rl  e
 578+ 97D1 17          >                        rla
 578+ 97D2 91          >                        sub c
 578+ 97D3 30 01       >                        jr  nc,.Div8_NoAdd
 578+ 97D5 81          >                        add a,c
 578+ 97D6             >.Div8_NoAdd:
 579+ 97D6                                      EDivC_Iteration
 579+ 97D6 CB 13       >                        rl  e
 579+ 97D8 17          >                        rla
 579+ 97D9 91          >                        sub c
 579+ 97DA 30 01       >                        jr  nc,.Div8_NoAdd
 579+ 97DC 81          >                        add a,c
 579+ 97DD             >.Div8_NoAdd:
 580+ 97DD 47                                   ld      b,a
 581+ 97DE 7B                                   ld      a,e
 582+ 97DF 17                                   rla
 583+ 97E0 2F                                   cpl
 584+ 97E1 C9                                   ret
 585+ 97E2
 586+ 97E2
 587+ 97E2              BCDIVDE_Iteration:      MACRO
 588+ 97E2 ~                                    rla
 589+ 97E2 ~                                    adc	    hl,hl
 590+ 97E2 ~                                    add	    hl,de
 591+ 97E2 ~                                    jr	    c,1F
 592+ 97E2 ~                                    sbc	    hl,de
 593+ 97E2 ~            1:
 594+ 97E2                                      ENDM
 595+ 97E2
 596+ 97E2
 597+ 97E2              ; ">BC_Div_DE: BC = BC / DE. HL = remainder fast divide with unrolled loop"
 598+ 97E2              ;BC/DE ==> BC, remainder in HL
 599+ 97E2              ;NOTE: BC/0 returns 0 as the quotient.
 600+ 97E2              ;min: 738cc
 601+ 97E2              ;max: 898cc
 602+ 97E2              ;avg: 818cc
 603+ 97E2              ;144 bytes
 604+ 97E2 AF           BC_Div_DE:              xor a
 605+ 97E3 67                                   ld h,a
 606+ 97E4 6F                                   ld l,a
 607+ 97E5 93                                   sub e
 608+ 97E6 5F                                   ld e,a
 609+ 97E7 9F                                   sbc a,a
 610+ 97E8 92                                   sub d
 611+ 97E9 57                                   ld d,a
 612+ 97EA 78                                   ld a,b
 613+ 97EB                                      BCDIVDE_Iteration
 613+ 97EB 17          >                        rla
 613+ 97EC ED 6A       >                        adc	    hl,hl
 613+ 97EE 19          >                        add	    hl,de
 613+ 97EF 38 02       >                        jr	    c,1F
 613+ 97F1 ED 52       >                        sbc	    hl,de
 613+ 97F3             >1:
 614+ 97F3                                      BCDIVDE_Iteration
 614+ 97F3 17          >                        rla
 614+ 97F4 ED 6A       >                        adc	    hl,hl
 614+ 97F6 19          >                        add	    hl,de
 614+ 97F7 38 02       >                        jr	    c,1F
 614+ 97F9 ED 52       >                        sbc	    hl,de
 614+ 97FB             >1:
 615+ 97FB                                      BCDIVDE_Iteration
 615+ 97FB 17          >                        rla
 615+ 97FC ED 6A       >                        adc	    hl,hl
 615+ 97FE 19          >                        add	    hl,de
 615+ 97FF 38 02       >                        jr	    c,1F
 615+ 9801 ED 52       >                        sbc	    hl,de
 615+ 9803             >1:
 616+ 9803                                      BCDIVDE_Iteration
 616+ 9803 17          >                        rla
 616+ 9804 ED 6A       >                        adc	    hl,hl
 616+ 9806 19          >                        add	    hl,de
 616+ 9807 38 02       >                        jr	    c,1F
 616+ 9809 ED 52       >                        sbc	    hl,de
 616+ 980B             >1:
 617+ 980B                                      BCDIVDE_Iteration
 617+ 980B 17          >                        rla
 617+ 980C ED 6A       >                        adc	    hl,hl
 617+ 980E 19          >                        add	    hl,de
 617+ 980F 38 02       >                        jr	    c,1F
 617+ 9811 ED 52       >                        sbc	    hl,de
 617+ 9813             >1:
 618+ 9813                                      BCDIVDE_Iteration
 618+ 9813 17          >                        rla
 618+ 9814 ED 6A       >                        adc	    hl,hl
 618+ 9816 19          >                        add	    hl,de
 618+ 9817 38 02       >                        jr	    c,1F
 618+ 9819 ED 52       >                        sbc	    hl,de
 618+ 981B             >1:
 619+ 981B                                      BCDIVDE_Iteration
 619+ 981B 17          >                        rla
 619+ 981C ED 6A       >                        adc	    hl,hl
 619+ 981E 19          >                        add	    hl,de
 619+ 981F 38 02       >                        jr	    c,1F
 619+ 9821 ED 52       >                        sbc	    hl,de
 619+ 9823             >1:
 620+ 9823                                      BCDIVDE_Iteration
 620+ 9823 17          >                        rla
 620+ 9824 ED 6A       >                        adc	    hl,hl
 620+ 9826 19          >                        add	    hl,de
 620+ 9827 38 02       >                        jr	    c,1F
 620+ 9829 ED 52       >                        sbc	    hl,de
 620+ 982B             >1:
 621+ 982B 17                                   rla
 622+ 982C 47                                   ld b,a
 623+ 982D 79                                   ld a,c
 624+ 982E                                      BCDIVDE_Iteration
 624+ 982E 17          >                        rla
 624+ 982F ED 6A       >                        adc	    hl,hl
 624+ 9831 19          >                        add	    hl,de
 624+ 9832 38 02       >                        jr	    c,1F
 624+ 9834 ED 52       >                        sbc	    hl,de
 624+ 9836             >1:
 625+ 9836                                      BCDIVDE_Iteration
 625+ 9836 17          >                        rla
 625+ 9837 ED 6A       >                        adc	    hl,hl
 625+ 9839 19          >                        add	    hl,de
 625+ 983A 38 02       >                        jr	    c,1F
 625+ 983C ED 52       >                        sbc	    hl,de
 625+ 983E             >1:
 626+ 983E                                      BCDIVDE_Iteration
 626+ 983E 17          >                        rla
 626+ 983F ED 6A       >                        adc	    hl,hl
 626+ 9841 19          >                        add	    hl,de
 626+ 9842 38 02       >                        jr	    c,1F
 626+ 9844 ED 52       >                        sbc	    hl,de
 626+ 9846             >1:
 627+ 9846                                      BCDIVDE_Iteration
 627+ 9846 17          >                        rla
 627+ 9847 ED 6A       >                        adc	    hl,hl
 627+ 9849 19          >                        add	    hl,de
 627+ 984A 38 02       >                        jr	    c,1F
 627+ 984C ED 52       >                        sbc	    hl,de
 627+ 984E             >1:
 628+ 984E                                      BCDIVDE_Iteration
 628+ 984E 17          >                        rla
 628+ 984F ED 6A       >                        adc	    hl,hl
 628+ 9851 19          >                        add	    hl,de
 628+ 9852 38 02       >                        jr	    c,1F
 628+ 9854 ED 52       >                        sbc	    hl,de
 628+ 9856             >1:
 629+ 9856                                      BCDIVDE_Iteration
 629+ 9856 17          >                        rla
 629+ 9857 ED 6A       >                        adc	    hl,hl
 629+ 9859 19          >                        add	    hl,de
 629+ 985A 38 02       >                        jr	    c,1F
 629+ 985C ED 52       >                        sbc	    hl,de
 629+ 985E             >1:
 630+ 985E                                      BCDIVDE_Iteration
 630+ 985E 17          >                        rla
 630+ 985F ED 6A       >                        adc	    hl,hl
 630+ 9861 19          >                        add	    hl,de
 630+ 9862 38 02       >                        jr	    c,1F
 630+ 9864 ED 52       >                        sbc	    hl,de
 630+ 9866             >1:
 631+ 9866                                      BCDIVDE_Iteration
 631+ 9866 17          >                        rla
 631+ 9867 ED 6A       >                        adc	    hl,hl
 631+ 9869 19          >                        add	    hl,de
 631+ 986A 38 02       >                        jr	    c,1F
 631+ 986C ED 52       >                        sbc	    hl,de
 631+ 986E             >1:
 632+ 986E 17                                   rla
 633+ 986F 4F                                   ld c,a
 634+ 9870 C9                                   ret
 635+ 9871 78           Floor_DivQSigned:       ld      a,b             ; save resultant sign
 636+ 9872 AA                                   xor     d               ;
 637+ 9873 E6 80                                and     $80             ;
 638+ 9875 DD 67                                ld      ixh,a           ;
 639+ 9877 78                                   ld      a,b
 640+ 9878 E6 7F                                and     $7F
 641+ 987A 47                                   ld      b,a
 642+ 987B 7A                                   ld      a,d
 643+ 987C E6 7F                                and     $7F
 644+ 987E 57                                   ld      d,a
 645+ 987F CD 87 98                             call    Floor_DivQ
 646+ 9882 78                                   ld      a,b
 647+ 9883 DD B4                                or      ixh
 648+ 9885 47                                   ld      b,a
 649+ 9886 C9                                   ret
 650+ 9887
 651+ 9887
 652+ 9887
 653+ 9887              ; BC = BC / DE
 654+ 9887              ; HL = BC % DE
 655+ 9887              ; if HL > 0 BC -= 1
 656+ 9887 78           Floor_DivQ:             ld      a,b
 657+ 9888 B1                                   or      c
 658+ 9889 28 26                                jr      z, .divide0By   ; if bc is zero just return as result will be zero
 659+ 988B 7A                                   ld      a,d
 660+ 988C B3                                   or      e
 661+ 988D 28 26                                jr      z, .divideBy0
 662+ 988F D5                                   push    de
 663+ 9890 CD E2 97     .DoDivide:              call    BC_Div_DE       ; bc(q0) = bc / de , hl(r0) = bc %de
 664+ 9893 D1                                   pop     de              ; get divisor back to test
 665+ 9894 CB 7A                                bit     7,d             ; if divisor <0 or = 0 goto else branch
 666+ 9896 C2 A6 98                             jp      nz,.deLTE0
 667+ 9899 7A                                   ld      a,d
 668+ 989A B3                                   or      e
 669+ 989B CA A6 98                             jp      z,.deLTE0
 670+ 989E CB 7C        .deGT0:                 bit     7,h             ; if remainder >=0 return with no adjustment
 671+ 98A0 C8                                   ret     z               ; if remainder was not negative then all done
 672+ 98A1 0B                                   dec     bc              ; else q --
 673+ 98A2                                      ClearCarryFlag          ;      r += b
 673+ 98A2 B7          >                        or a
 674+ 98A3 ED 5A                                adc     hl,de           ;      .
 675+ 98A5 C9                                   ret
 676+ 98A6 CB 7C        .deLTE0:                bit     7,h             ; if remainder <= 0 retun with no adjustment
 677+ 98A8 C8                                   ret     z               ; (return if negative)
 678+ 98A9 7C                                   ld      a,h
 679+ 98AA B5                                   or      l               ; (return if zero)
 680+ 98AB C8                                   ret     z
 681+ 98AC 0B                                   dec     bc              ; else q --
 682+ 98AD                                      ClearCarryFlag          ;      r += b
 682+ 98AD B7          >                        or a
 683+ 98AE ED 5A                                adc     hl,de           ;      .
 684+ 98B0 C9                                   ret
 685+ 98B1 21 00 00     .divide0By:             ld      hl,0            ; hl = 0, bc is already 0
 686+ 98B4 C9                                   ret
 687+ 98B5 21 00 00     .divideBy0:             ld      hl,0
 688+ 98B8 01 01 00                             ld      bc,1
 689+ 98BB C9                                   ret
 690+ 98BC
 691+ 98BC
 692+ 98BC              L_DIV_0_ITERATION:      MACRO
 693+ 98BC ~                                    rl      de              ;left shift dividend + quotient carry
 694+ 98BC ~                                    ex      de,hl
 695+ 98BC ~                                    rl      de              ;left shift remainder + dividend carry
 696+ 98BC ~                                    ex      de,hl
 697+ 98BC ~                                    sub     hl,bc           ;substract divisor from remainder
 698+ 98BC ~                                    jp      nc,.skip_revert0 ;if remainder < divisor, add back divisor
 699+ 98BC ~                                    add     hl,bc           ;revert subtraction of divisor
 700+ 98BC ~            .skip_revert0:          ccf                     ;complement carry
 701+ 98BC ~                                    rl      de              ;left shift dividend + quotient carry
 702+ 98BC ~                                    ex      de,hl
 703+ 98BC ~                                    rl      de              ;left shift remainder + dividend carry
 704+ 98BC ~                                    ex      de,hl
 705+ 98BC ~                                    sub     hl,bc           ;substract divisor from remainder
 706+ 98BC ~                                    jp      NC,.skip_revert1 ;if remainder < divisor, add back divisor
 707+ 98BC ~                                    add     hl,bc           ;revert subtraction of divisor
 708+ 98BC ~            .skip_revert1:          ccf                     ;complement carry
 709+ 98BC                                      ENDM
 710+ 98BC
 711+ 98BC              ; HL = DE / BC, DE = DE % BC
 712+ 98BC 21 00 00     l_div_0:                ld      hl,0            ;clear remainder
 713+ 98BF                                      L_DIV_0_ITERATION
 713+ 98BF CB 13 CB 12 >                        rl      de              ;left shift dividend + quotient carry
 713+ 98C3 EB          >                        ex      de,hl
 713+ 98C4 CB 13 CB 12 >                        rl      de              ;left shift remainder + dividend carry
 713+ 98C8 EB          >                        ex      de,hl
 713+ 98C9 B7 ED 42    >                        sub     hl,bc           ;substract divisor from remainder
 713+ 98CC D2 D0 98    >                        jp      nc,.skip_revert0 ;if remainder < divisor, add back divisor
 713+ 98CF 09          >                        add     hl,bc           ;revert subtraction of divisor
 713+ 98D0 3F          >.skip_revert0:          ccf                     ;complement carry
 713+ 98D1 CB 13 CB 12 >                        rl      de              ;left shift dividend + quotient carry
 713+ 98D5 EB          >                        ex      de,hl
 713+ 98D6 CB 13 CB 12 >                        rl      de              ;left shift remainder + dividend carry
 713+ 98DA EB          >                        ex      de,hl
 713+ 98DB B7 ED 42    >                        sub     hl,bc           ;substract divisor from remainder
 713+ 98DE D2 E2 98    >                        jp      NC,.skip_revert1 ;if remainder < divisor, add back divisor
 713+ 98E1 09          >                        add     hl,bc           ;revert subtraction of divisor
 713+ 98E2 3F          >.skip_revert1:          ccf                     ;complement carry
 714+ 98E3                                      L_DIV_0_ITERATION
 714+ 98E3 CB 13 CB 12 >                        rl      de              ;left shift dividend + quotient carry
 714+ 98E7 EB          >                        ex      de,hl
 714+ 98E8 CB 13 CB 12 >                        rl      de              ;left shift remainder + dividend carry
 714+ 98EC EB          >                        ex      de,hl
 714+ 98ED B7 ED 42    >                        sub     hl,bc           ;substract divisor from remainder
 714+ 98F0 D2 F4 98    >                        jp      nc,.skip_revert0 ;if remainder < divisor, add back divisor
 714+ 98F3 09          >                        add     hl,bc           ;revert subtraction of divisor
 714+ 98F4 3F          >.skip_revert0:          ccf                     ;complement carry
 714+ 98F5 CB 13 CB 12 >                        rl      de              ;left shift dividend + quotient carry
 714+ 98F9 EB          >                        ex      de,hl
 714+ 98FA CB 13 CB 12 >                        rl      de              ;left shift remainder + dividend carry
 714+ 98FE EB          >                        ex      de,hl
 714+ 98FF B7 ED 42    >                        sub     hl,bc           ;substract divisor from remainder
 714+ 9902 D2 06 99    >                        jp      NC,.skip_revert1 ;if remainder < divisor, add back divisor
 714+ 9905 09          >                        add     hl,bc           ;revert subtraction of divisor
 714+ 9906 3F          >.skip_revert1:          ccf                     ;complement carry
 715+ 9907                                      L_DIV_0_ITERATION
 715+ 9907 CB 13 CB 12 >                        rl      de              ;left shift dividend + quotient carry
 715+ 990B EB          >                        ex      de,hl
 715+ 990C CB 13 CB 12 >                        rl      de              ;left shift remainder + dividend carry
 715+ 9910 EB          >                        ex      de,hl
 715+ 9911 B7 ED 42    >                        sub     hl,bc           ;substract divisor from remainder
 715+ 9914 D2 18 99    >                        jp      nc,.skip_revert0 ;if remainder < divisor, add back divisor
 715+ 9917 09          >                        add     hl,bc           ;revert subtraction of divisor
 715+ 9918 3F          >.skip_revert0:          ccf                     ;complement carry
 715+ 9919 CB 13 CB 12 >                        rl      de              ;left shift dividend + quotient carry
 715+ 991D EB          >                        ex      de,hl
 715+ 991E CB 13 CB 12 >                        rl      de              ;left shift remainder + dividend carry
 715+ 9922 EB          >                        ex      de,hl
 715+ 9923 B7 ED 42    >                        sub     hl,bc           ;substract divisor from remainder
 715+ 9926 D2 2A 99    >                        jp      NC,.skip_revert1 ;if remainder < divisor, add back divisor
 715+ 9929 09          >                        add     hl,bc           ;revert subtraction of divisor
 715+ 992A 3F          >.skip_revert1:          ccf                     ;complement carry
 716+ 992B                                      L_DIV_0_ITERATION
 716+ 992B CB 13 CB 12 >                        rl      de              ;left shift dividend + quotient carry
 716+ 992F EB          >                        ex      de,hl
 716+ 9930 CB 13 CB 12 >                        rl      de              ;left shift remainder + dividend carry
 716+ 9934 EB          >                        ex      de,hl
 716+ 9935 B7 ED 42    >                        sub     hl,bc           ;substract divisor from remainder
 716+ 9938 D2 3C 99    >                        jp      nc,.skip_revert0 ;if remainder < divisor, add back divisor
 716+ 993B 09          >                        add     hl,bc           ;revert subtraction of divisor
 716+ 993C 3F          >.skip_revert0:          ccf                     ;complement carry
 716+ 993D CB 13 CB 12 >                        rl      de              ;left shift dividend + quotient carry
 716+ 9941 EB          >                        ex      de,hl
 716+ 9942 CB 13 CB 12 >                        rl      de              ;left shift remainder + dividend carry
 716+ 9946 EB          >                        ex      de,hl
 716+ 9947 B7 ED 42    >                        sub     hl,bc           ;substract divisor from remainder
 716+ 994A D2 4E 99    >                        jp      NC,.skip_revert1 ;if remainder < divisor, add back divisor
 716+ 994D 09          >                        add     hl,bc           ;revert subtraction of divisor
 716+ 994E 3F          >.skip_revert1:          ccf                     ;complement carry
 717+ 994F                                      L_DIV_0_ITERATION
 717+ 994F CB 13 CB 12 >                        rl      de              ;left shift dividend + quotient carry
 717+ 9953 EB          >                        ex      de,hl
 717+ 9954 CB 13 CB 12 >                        rl      de              ;left shift remainder + dividend carry
 717+ 9958 EB          >                        ex      de,hl
 717+ 9959 B7 ED 42    >                        sub     hl,bc           ;substract divisor from remainder
 717+ 995C D2 60 99    >                        jp      nc,.skip_revert0 ;if remainder < divisor, add back divisor
 717+ 995F 09          >                        add     hl,bc           ;revert subtraction of divisor
 717+ 9960 3F          >.skip_revert0:          ccf                     ;complement carry
 717+ 9961 CB 13 CB 12 >                        rl      de              ;left shift dividend + quotient carry
 717+ 9965 EB          >                        ex      de,hl
 717+ 9966 CB 13 CB 12 >                        rl      de              ;left shift remainder + dividend carry
 717+ 996A EB          >                        ex      de,hl
 717+ 996B B7 ED 42    >                        sub     hl,bc           ;substract divisor from remainder
 717+ 996E D2 72 99    >                        jp      NC,.skip_revert1 ;if remainder < divisor, add back divisor
 717+ 9971 09          >                        add     hl,bc           ;revert subtraction of divisor
 717+ 9972 3F          >.skip_revert1:          ccf                     ;complement carry
 718+ 9973                                      L_DIV_0_ITERATION
 718+ 9973 CB 13 CB 12 >                        rl      de              ;left shift dividend + quotient carry
 718+ 9977 EB          >                        ex      de,hl
 718+ 9978 CB 13 CB 12 >                        rl      de              ;left shift remainder + dividend carry
 718+ 997C EB          >                        ex      de,hl
 718+ 997D B7 ED 42    >                        sub     hl,bc           ;substract divisor from remainder
 718+ 9980 D2 84 99    >                        jp      nc,.skip_revert0 ;if remainder < divisor, add back divisor
 718+ 9983 09          >                        add     hl,bc           ;revert subtraction of divisor
 718+ 9984 3F          >.skip_revert0:          ccf                     ;complement carry
 718+ 9985 CB 13 CB 12 >                        rl      de              ;left shift dividend + quotient carry
 718+ 9989 EB          >                        ex      de,hl
 718+ 998A CB 13 CB 12 >                        rl      de              ;left shift remainder + dividend carry
 718+ 998E EB          >                        ex      de,hl
 718+ 998F B7 ED 42    >                        sub     hl,bc           ;substract divisor from remainder
 718+ 9992 D2 96 99    >                        jp      NC,.skip_revert1 ;if remainder < divisor, add back divisor
 718+ 9995 09          >                        add     hl,bc           ;revert subtraction of divisor
 718+ 9996 3F          >.skip_revert1:          ccf                     ;complement carry
 719+ 9997                                      L_DIV_0_ITERATION
 719+ 9997 CB 13 CB 12 >                        rl      de              ;left shift dividend + quotient carry
 719+ 999B EB          >                        ex      de,hl
 719+ 999C CB 13 CB 12 >                        rl      de              ;left shift remainder + dividend carry
 719+ 99A0 EB          >                        ex      de,hl
 719+ 99A1 B7 ED 42    >                        sub     hl,bc           ;substract divisor from remainder
 719+ 99A4 D2 A8 99    >                        jp      nc,.skip_revert0 ;if remainder < divisor, add back divisor
 719+ 99A7 09          >                        add     hl,bc           ;revert subtraction of divisor
 719+ 99A8 3F          >.skip_revert0:          ccf                     ;complement carry
 719+ 99A9 CB 13 CB 12 >                        rl      de              ;left shift dividend + quotient carry
 719+ 99AD EB          >                        ex      de,hl
 719+ 99AE CB 13 CB 12 >                        rl      de              ;left shift remainder + dividend carry
 719+ 99B2 EB          >                        ex      de,hl
 719+ 99B3 B7 ED 42    >                        sub     hl,bc           ;substract divisor from remainder
 719+ 99B6 D2 BA 99    >                        jp      NC,.skip_revert1 ;if remainder < divisor, add back divisor
 719+ 99B9 09          >                        add     hl,bc           ;revert subtraction of divisor
 719+ 99BA 3F          >.skip_revert1:          ccf                     ;complement carry
 720+ 99BB                                      L_DIV_0_ITERATION
 720+ 99BB CB 13 CB 12 >                        rl      de              ;left shift dividend + quotient carry
 720+ 99BF EB          >                        ex      de,hl
 720+ 99C0 CB 13 CB 12 >                        rl      de              ;left shift remainder + dividend carry
 720+ 99C4 EB          >                        ex      de,hl
 720+ 99C5 B7 ED 42    >                        sub     hl,bc           ;substract divisor from remainder
 720+ 99C8 D2 CC 99    >                        jp      nc,.skip_revert0 ;if remainder < divisor, add back divisor
 720+ 99CB 09          >                        add     hl,bc           ;revert subtraction of divisor
 720+ 99CC 3F          >.skip_revert0:          ccf                     ;complement carry
 720+ 99CD CB 13 CB 12 >                        rl      de              ;left shift dividend + quotient carry
 720+ 99D1 EB          >                        ex      de,hl
 720+ 99D2 CB 13 CB 12 >                        rl      de              ;left shift remainder + dividend carry
 720+ 99D6 EB          >                        ex      de,hl
 720+ 99D7 B7 ED 42    >                        sub     hl,bc           ;substract divisor from remainder
 720+ 99DA D2 DE 99    >                        jp      NC,.skip_revert1 ;if remainder < divisor, add back divisor
 720+ 99DD 09          >                        add     hl,bc           ;revert subtraction of divisor
 720+ 99DE 3F          >.skip_revert1:          ccf                     ;complement carry
 721+ 99DF CB 13 CB 12                          rl      de              ;left shift dividend + quotient carry
 722+ 99E3 EB                                   ex      de,hl           ;dividend<>remainder
 723+ 99E4 C9                                   ret
 724+ 99E5
 725+ 99E5
 726+ 99E5
 727+ 99E5
 728+ 99E5 11 FE FF     LLHLdivC:               ld      de,$FFFE                    ; set XY to &FFFE at start, de holds XY
 729+ 99E8              .LL130:                 ShiftHLLeft1                        ; RS *= 2
 729+ 99E8 CB 25       >			   sla l
 729+ 99EA CB 14       >			   rl  h
 730+ 99EC 7C                                   ld      a,h
 731+ 99ED 38 04                                jr      c,.LL131                    ; if S overflowed skip Q test and do subtractions
 732+ 99EF                                      JumpIfALTNusng c, .LL132            ; if S <  Q = 256/gradient skip subtractions
 732+ 99EF B9          >                        cp      c
 732+ 99F0 DA FB 99    >                        jp		c, .LL132
 733+ 99F3 3F           .LL131:                 ccf                                 ; compliment carry
 734+ 99F4 99                                   sbc     a,c                         ; q
 735+ 99F5 67                                   ld      h,a                         ; h (s)
 736+ 99F6 7D                                   ld      a,l                         ; r
 737+ 99F7 DE 00                                sbc     a,0                         ; 0 - so in effect SR - Q*256
 738+ 99F9 37                                   scf                                 ; set carry for next rolls
 739+ 99FA 3F                                   ccf
 740+ 99FB              .LL132:                 RollDELeft1                         ; Rotate de bits left
 740+ 99FB CB 13       >               rl  e
 740+ 99FD CB 12       >               rl  d
 741+ 99FF 38 E7                                jr      c,.LL130                    ;
 742+ 9A01 EB                                   ex      de,hl                       ; hl = result
 743+ 9A02 C9                                   ret
 744+ 9A03
 745+ 9A03
 746+ 9A03 AF           div_hl_c:               xor	a
 747+ 9A04 06 10                                ld	b, 16
 748+ 9A06 29           .loop:                  add	hl, hl
 749+ 9A07 17                                   rla
 750+ 9A08 38 03                                jr	c, $+5
 751+ 9A0A B9                                   cp	c
 752+ 9A0B 38 02                                jr	c, $+4
 753+ 9A0D 91                                   sub	c
 754+ 9A0E 2C                                   inc	l
 755+ 9A0F 10 F5                                djnz	.loop
 756+ 9A11 C9                                   ret
 757+ 9A12              ;l_div, signed division
 758+ 9A12              ; comes in with DE and HL
 759+ 9A12              ; HL = DE / HL, DE = DE % HL
 760+ 9A12 4A           l_div:                  ld      c,d             ;sign of dividend
 761+ 9A13 44                                   ld      b,h             ;sign of divisor
 762+ 9A14 C5                                   push    bc              ;save signs
 763+ 9A15 4D                                   ld      c,l             ;divisor to bc
 764+ 9A16 7A                                   ld      a,d
 765+ 9A17 B7                                   or      a
 766+ 9A18 F2 21 9A                             jp      p,.NotDENeg
 767+ 9A1B              .DeNegate:              macronegate16de
 767+ 9A1B AF          >					xor 	a
 767+ 9A1C 93          >                    sub 	e
 767+ 9A1D 5F          >                    ld 		e,a
 767+ 9A1E 9F          >                    sbc 	a,a
 767+ 9A1F 92          >                    sub 	d
 767+ 9A20 57          >                    ld 		d,a
 768+ 9A21 78           .NotDENeg:              ld      a,b
 769+ 9A22 B7                                   or      a
 770+ 9A23 F2 2C 9A                             jp      p,.NotBCNeg     ; if signs are opposite them flip
 771+ 9A26                                      macronegate16bc
 771+ 9A26 AF          >					xor 	a
 771+ 9A27 91          >                    sub 	c
 771+ 9A28 4F          >                    ld 		c,a
 771+ 9A29 9F          >                    sbc 	a,a
 771+ 9A2A 90          >                    sub 	b
 771+ 9A2B 47          >                    ld 		b,a
 772+ 9A2C CD BC 98     .NotBCNeg:              call    l_div_0         ;unsigned HL = DE / BC, DE = DE % BC
 773+ 9A2F                                      ; C standard requires that the result of division satisfy a = (a/b)*b + a%b emainder takes sign of the dividend
 774+ 9A2F C1                                   pop     bc              ;restore sign info
 775+ 9A30 78                                   ld      a,b
 776+ 9A31 A9                                   xor     c               ;quotient, sign of dividend^divisor
 777+ 9A32 F2 3B 9A                             jp      p,.NotHLNeg
 778+ 9A35                                      macronegate16hl
 778+ 9A35 AF          >					xor 	a
 778+ 9A36 95          >					sub 	l
 778+ 9A37 6F          >					ld 		l,a
 778+ 9A38 9F          >					sbc 	a,a
 778+ 9A39 94          >					sub 	h
 778+ 9A3A 67          >					ld 		h,a
 779+ 9A3B 79           .NotHLNeg:              ld      a,c
 780+ 9A3C B7                                   or      a,a             ;remainder, sign of dividend
 781+ 9A3D F0                                   ret     p
 782+ 9A3E                                      macronegate16de
 782+ 9A3E AF          >					xor 	a
 782+ 9A3F 93          >                    sub 	e
 782+ 9A40 5F          >                    ld 		e,a
 782+ 9A41 9F          >                    sbc 	a,a
 782+ 9A42 92          >                    sub 	d
 782+ 9A43 57          >                    ld 		d,a
 783+ 9A44 C9                                   ret
 784+ 9A45
# file closed: ./Maths/asm_divide.asm
 585  9A45                  INCLUDE "./Maths/asm_unitvector.asm"
# file opened: ./Maths/asm_unitvector.asm
   1+ 9A45              asm_tis2:
   2+ 9A45              ; ">TIS2 A = (A / Q * 96) so A = -96 ---- 96  range "
   3+ 9A45              ; ">DOES NOT DO SIGNED YET"
   4+ 9A45 F5           	push af
   5+ 9A46 E6 7F            and SignMask8Bit
   6+ 9A48 57           	ld d,a				;; d = A
   7+ 9A49 3A B6 7F     	ld a,(varQ)
   8+ 9A4C 5F           	ld e,a
   9+ 9A4D 7A           	ld a,d
  10+ 9A4E BB           	cp e
  11+ 9A4F 30 11        	jr nc, .tis2_set96	;; jump if a >= Q
  12+ 9A51 1E 60        	ld e, 96
  13+ 9A53 ED 30        	mul				; de = d * 96 (also a * 96 )
  14+ 9A55 EB           	ex de,hl
  15+ 9A56 3A B6 7F     	ld a,(varQ)
  16+ 9A59 4F           	ld c,a
  17+ 9A5A CD 94 97     	call asm_div16
  18+ 9A5D F1           	pop af
  19+ 9A5E E6 80        	and $80
  20+ 9A60 B5           	or l
  21+ 9A61 C9           	ret
  22+ 9A62              .tis2_set96:
  23+ 9A62 F1           	pop af
  24+ 9A63 E6 80        	and $80
  25+ 9A65 F6 96        	or $96
  26+ 9A67 C9           	ret
  27+ 9A68
  28+ 9A68
  29+ 9A68              asm_unit_vector:
  30+ 9A68              squareregfx:
  31+ 9A68 3A E7 C0     	ld a,(UBnkXScaled)
  32+ 9A6B 57           	ld d,a
  33+ 9A6C 5F           	ld e,a
  34+ 9A6D ED 30        	mul
  35+ 9A6F EB           	ex de,hl
  36+ 9A70              squareregfy:
  37+ 9A70 3A E9 C0     	ld a, (UBnkYScaled)
  38+ 9A73 57           	ld d,a
  39+ 9A74 5F           	ld e,a
  40+ 9A75 ED 30        	mul
  41+ 9A77 19           	add hl,de
  42+ 9A78              squareregfz:
  43+ 9A78 3A EB C0     	ld a, (UBnkZScaled)
  44+ 9A7B 57           	ld d,a
  45+ 9A7C 5F           	ld e,a
  46+ 9A7D ED 30        	mul
  47+ 9A7F 19           	add hl,de
  48+ 9A80 EB           	ex de,hl			; de de to number to root
  49+ 9A81              hlequsquareroot:
  50+ 9A81 CD B2 93     	call asm_sqrt		; hl = sqrt (fx^2 + fy^2 + fx^2)
  51+ 9A84 E5           	push hl				; save it for work 3 copies
  52+ 9A85 E5           	push hl				; save it for work
  53+ 9A86 E5           	push hl				; save it for work
  54+ 9A87              normfx:
  55+ 9A87 3A E7 C0     	ld a,(UBnkXScaled)
  56+ 9A8A E1           	pop hl				; get copy #1
  57+ 9A8B 7D           	ld a,l				; we assume only l had worthwhile data but could spill into h
  58+ 9A8C 4F           	ld c,a
  59+ 9A8D CD 45 9A     	call asm_tis2
  60+ 9A90 32 E7 C0     	ld (UBnkXScaled),a
  61+ 9A93              normfy:
  62+ 9A93 3A E9 C0     	ld a,(UBnkYScaled)
  63+ 9A96 E1           	pop hl				; get copy #2
  64+ 9A97 7D           	ld a,l
  65+ 9A98 4F           	ld c,a
  66+ 9A99 CD 45 9A     	call asm_tis2
  67+ 9A9C 32 E9 C0     	ld (UBnkYScaled),a
  68+ 9A9F              normfz:
  69+ 9A9F 3A EB C0     	ld a,(UBnkZScaled)
  70+ 9AA2 E1           	pop hl				; get copy #2
  71+ 9AA3 7D           	ld a,l
  72+ 9AA4 4F           	ld c,a
  73+ 9AA5 CD 45 9A     	call asm_tis2
  74+ 9AA8 32 EB C0     	ld (UBnkZScaled),a
  75+ 9AAB              asm_unit_vector_end:
  76+ 9AAB C9           	ret
  77+ 9AAC
# file closed: ./Maths/asm_unitvector.asm
 586  9AAC                  INCLUDE "./Maths/compare16.asm"
# file opened: ./Maths/compare16.asm
   1+ 9AAC              ; Input:
   2+ 9AAC              ;       HL = 1st value
   3+ 9AAC              ;       DE = 2nd value
   4+ 9AAC              ; Output:
   5+ 9AAC              ;       CF, ZF = results of comparison:
   6+ 9AAC              ;
   7+ 9AAC              ;               CF      ZF      Result
   8+ 9AAC              ;               -----------------------------------
   9+ 9AAC              ;               0       0       HL > DE
  10+ 9AAC              ;               0       1       HL == DE
  11+ 9AAC              ;               1       0       HL < DE
  12+ 9AAC              ;               1       1       Impossible
  13+ 9AAC              ;
  14+ 9AAC
  15+ 9AAC
  16+ 9AAC E5           CompareBCDESigned:  push    hl
  17+ 9AAD A7                               and     a
  18+ 9AAE 60 69                            ld      hl,bc
  19+ 9AB0 ED 52                            sbc     hl,de
  20+ 9AB2 E1                               pop     hl
  21+ 9AB3 C9                               ret
  22+ 9AB4
  23+ 9AB4 E5           CompareDEBCSigned:  push    hl
  24+ 9AB5 A7                               and     a
  25+ 9AB6 62 6B                            ld      hl,de
  26+ 9AB8 ED 42                            sbc     hl,bc
  27+ 9ABA E1                               pop     hl
  28+ 9ABB C9                               ret
  29+ 9ABC
  30+ 9ABC
  31+ 9ABC              ;### CMPGTE -> test if A>=B
  32+ 9ABC              ;### Input      HL=A, DE=B if hl=> de no carry else de > hl and set carry
  33+ 9ABC 7C           CompareHLDESgn:     ld a,h
  34+ 9ABD AA                               xor d
  35+ 9ABE FA C8 9A                         jp m, .cmpgte2
  36+ 9AC1 ED 52                            sbc hl,de
  37+ 9AC3 30 09                            jr nc, .cmpgte3
  38+ 9AC5 19           .cmpgte1            add hl,de
  39+ 9AC6                                  SetCarryFlag
  39+ 9AC6 37          >                        scf
  40+ 9AC7 C9                               ret
  41+ 9AC8 CB 7A        .cmpgte2            bit 7,d
  42+ 9ACA 28 05                            jr z,.cmpgte4
  43+ 9ACC              .cmpgte5:           ClearCarryFlag
  43+ 9ACC B7          >                        or a
  44+ 9ACD C9                               ret
  45+ 9ACE 19           .cmpgte3            add hl,de
  46+ 9ACF                                  ClearCarryFlag
  46+ 9ACF B7          >                        or a
  47+ 9AD0 C9                               ret
  48+ 9AD1              .cmpgte4:           SetCarryFlag
  48+ 9AD1 37          >                        scf
  49+ 9AD2 C9                               ret
  50+ 9AD3
  51+ 9AD3              ; Compares HL and DE sets z flag if same, else nz
  52+ 9AD3 7C           CompareHLDESame:    ld  a,h
  53+ 9AD4 BA                               cp  d
  54+ 9AD5 C0                               ret nz
  55+ 9AD6 7D                               ld  a,l
  56+ 9AD7 BB                               cp  e
  57+ 9AD8 C9                               ret
  58+ 9AD9
  59+ 9AD9
  60+ 9AD9
  61+ 9AD9 7C           CompareHLBCSgn:     ld a,h
  62+ 9ADA A8                               xor b
  63+ 9ADB FA E4 9A                         jp m, .cmpgte2
  64+ 9ADE ED 42                            sbc hl,bc
  65+ 9AE0 30 06                            jr nc, .cmpgte3
  66+ 9AE2              .cmpgte1            SetCarryFlag
  66+ 9AE2 37          >                        scf
  67+ 9AE3 C9                               ret
  68+ 9AE4 CB 78        .cmpgte2            bit 7,b
  69+ 9AE6 28 FA                            jr z,.cmpgte1
  70+ 9AE8              .cmpgte3            ClearCarryFlag
  70+ 9AE8 B7          >                        or a
  71+ 9AE9 C9                               ret
  72+ 9AEA
  73+ 9AEA              CompareHLDESigned:
  74+ 9AEA E5           compare16HLDE:      push    hl
  75+ 9AEB A7                               and     a
  76+ 9AEC ED 52                            sbc     hl,de
  77+ 9AEE E1                               pop     hl
  78+ 9AEF C9                               ret
  79+ 9AF0              CompareHLBCSigned:
  80+ 9AF0 E5           CompareHLBC:        push    hl
  81+ 9AF1 A7                               and     a
  82+ 9AF2 ED 42                            sbc     hl,bc
  83+ 9AF4 E1                               pop     hl
  84+ 9AF5 C9                               ret
  85+ 9AF6
  86+ 9AF6              ; With compare signed we do ABS comparison
  87+ 9AF6              ; this is used for view ports as we just want to know if its +/- out side of 90 degrees
  88+ 9AF6
  89+ 9AF6 E5 D5        compare16HLDEABS:   push    hl,,de
  90+ 9AF8 7C                               ld      a,h                                     ; Quick pass see of both the same sign
  91+ 9AF9 E6 7F                            and     SignMask8Bit
  92+ 9AFB 67                               ld      h,a
  93+ 9AFC 7A                               ld      a,d                                     ; Quick pass see of both the same sign
  94+ 9AFD E6 7F                            and     SignMask8Bit
  95+ 9AFF 57                               ld      d,a
  96+ 9B00 A7                               and     a
  97+ 9B01 ED 52                            sbc     hl,de
  98+ 9B03 D1 E1                            pop     hl,,de
  99+ 9B05 C9                               ret
 100+ 9B06
 101+ 9B06
# file closed: ./Maths/compare16.asm
 587  9B06                  INCLUDE "./Maths/normalise96.asm"
# file opened: ./Maths/normalise96.asm
   1+ 9B06              ; a equal a / d * 96
   2+ 9B06              ; Tested and works with signed numbers
   3+ 9B06 DD 7E 01     NormaliseIXVector:      ld		a,(ix+1)			; Vector X high
   4+ 9B09 E6 7F                                and		SignMask8Bit        ; a = abs X high
   5+ 9B0B 57                                   ld      d,a                 ; hl = abs X ^ 2
   6+ 9B0C 5F                                   ld      e,a                 ; .
   7+ 9B0D ED 30                                mul     de                  ; .
   8+ 9B0F EB                                   ex      de,hl               ; .
   9+ 9B10 DD 7E 03                             ld		a,(ix+3)			; vector = Y high
  10+ 9B13 E6 7F                                and		SignMask8Bit        ; unsigned
  11+ 9B15 57                                   ld      d,a                 ; de = abs Y ^ 2
  12+ 9B16 5F                                   ld      e,a                 ; .
  13+ 9B17 ED 30                                mul     de                  ; .
  14+ 9B19 19                                   add     hl,de               ; hl = x^2 + y ^2
  15+ 9B1A DD 7E 05                             ld		a,(ix+5)			; vector = Z high
  16+ 9B1D E6 7F                                and		SignMask8Bit        ; unsigned
  17+ 9B1F 57                                   ld      d,a                 ; de = abs Z ^ 2
  18+ 9B20 5F                                   ld      e,a                 ; .
  19+ 9B21 ED 30                                mul     de                  ; .
  20+ 9B23 19                                   add     hl,de               ; de = x^2 + y ^2 + z ^ 2
  21+ 9B24 EB                                   ex      de,hl               ; .
  22+ 9B25 CD B2 93     .n96SQRT:               call	asm_sqrt			; hl = sqrt de
  23+ 9B28 DD 7E 01     .n96NORMX:              ld		a,(ix+1)
  24+ 9B2B 55                                   ld		d,l					; Q(i.e. l) => D, later we can just pop into de
  25+ 9B2C CD A5 9E                             call	AequAdivDmul96Q8    ; does not use HL so we can retain it
  26+ 9B2F 47                                   ld		b,a				    ; Sort out restoring sign bit
  27+ 9B30 0E 00                                ld      c,0                 ; .
  28+ 9B32 DD 71 00 DD                          ld		(ix+0),bc           ; .
  28+ 9B36 70 01
  29+ 9B38 DD 7E 03     .n96NORMY:              ld		a,(ix+3)
  30+ 9B3B 55                                   ld		d,l					; Q(i.e. l) => D, later we can just pop into de
  31+ 9B3C CD A5 9E                             call	AequAdivDmul96Q8	; does not use HL so we can retain it
  32+ 9B3F 47                                   ld		b,a				    ; Sort out restoring sign bit
  33+ 9B40 0E 00                                ld      c,0                 ; .
  34+ 9B42 DD 71 02 DD                          ld		(ix+2),bc           ; .
  34+ 9B46 70 03
  35+ 9B48 DD 7E 05     .n96NORMZ:              ld		a,(ix+5)
  36+ 9B4B 55                                   ld		d,l					; Q(i.e. l) => D, later we can just pop into de
  37+ 9B4C CD A5 9E                             call	AequAdivDmul96Q8 	; does not use HL so we can retain it
  38+ 9B4F 47                                   ld		b,a				    ; Sort out restoring sign bit
  39+ 9B50 0E 00                                ld      c,0                 ; .
  40+ 9B52 DD 71 04 DD                          ld		(ix+4),bc           ; .
  40+ 9B56 70 05
  41+ 9B58 C9                                   ret
  42+ 9B59
  43+ 9B59              ; .NORM	\ -> &3BD6 \ Normalize 3-vector length of XX15
  44+ 9B59 3A E7 C0     normaliseXX1596S7:      ld		a,(XX15VecX)	    ; XX15+0
  45+ 9B5C DD 67                                ld		ixh,a               ; ixh = signed x component
  46+ 9B5E E6 7F                                and		SignMask8Bit        ; a = unsigned version
  47+ 9B60              .n96SQX:	            inline_squde				; Use inline square for speed	objective is SQUA \ P.A =A7*A7 x^2
  47+ 9B60 5F          >			ld	e,a
  47+ 9B61 57          >			ld  d,a
  47+ 9B62 ED 30       >			mul
  48+ 9B64 62                                   ld		h,d					; h == varR d = varO e= varA
  49+ 9B65 6B                                   ld		l,e					; l == varQ  															:: so HL = XX15[x]^2
  50+ 9B66 3A E8 C0     .n96SQY:                ld		a,(XX15VecY)
  51+ 9B69 DD 6F                                ld		ixl,a               ; ixl = signed y componet
  52+ 9B6B E6 7F                                and		SignMask8Bit                 ; = abs
  53+ 9B6D                                      inline_squde				; Use inline square for speed	objective is SQUA \ P.A =A7*A7 x^2		:: so DE = XX15[y]^2
  53+ 9B6D 5F          >			ld	e,a
  53+ 9B6E 57          >			ld  d,a
  53+ 9B6F ED 30       >			mul
  54+ 9B71 19                                   add		hl,de				; hl = XX15[x]^2 + XX15[y]^2
  55+ 9B72 3A E9 C0     .n96SQZ:                ld		a,(XX15VecZ)			; Note comments say \ ZZ15+2  should be \ XX15+2 as per code
  56+ 9B75 FD 67                                ld		iyh,a               ; iyh = signed
  57+ 9B77 E6 7F                                and		SignMask8Bit                 ; unsigned
  58+ 9B79                                      inline_squde				; Use inline square for speed	objective is SQUA \ P.A =A7*A7 x^2		:: so DE = XX15[z]^2
  58+ 9B79 5F          >			ld	e,a
  58+ 9B7A 57          >			ld  d,a
  58+ 9B7B ED 30       >			mul
  59+ 9B7D 19           .n96SQADD:              add		hl,de				; hl = XX15[x]^2 + XX15[y]^2 + XX15[z]^2
  60+ 9B7E EB                                   ex		de,hl				; hl => de ready for square root
  61+ 9B7F CD B2 93     .n96SQRT:               call	asm_sqrt			; hl = de = sqrt(XX15[x]^2 + XX15[y]^2 + XX15[z]^2), we just are interested in l which is the new Q
  62+ 9B82 3A E7 C0     .n96NORMX:              ld		a,(XX15VecX)
  63+ 9B85 E6 7F                                and		SignMask8Bit
  64+ 9B87 4F                                   ld		c,a
  65+ 9B88 55                                   ld		d,l					; Q(i.e. l) => D, later we can just pop into de
  66+ 9B89 CD 5B 9E                             call	AequAdivDmul967Bit	; does not use HL so we can retain it
  67+ 9B8C 47                                   ld		b,a				    ;++SGN
  68+ 9B8D DD 7C                                ld		a,ixh			    ;++SGN
  69+ 9B8F E6 80                                and		$80				    ;++SGN
  70+ 9B91 B0                                   or		b				    ;++SGN
  71+ 9B92 32 E7 C0                             ld		(XX15VecX),a
  72+ 9B95 3A E8 C0     .n96NORMY:              ld		a,(XX15VecY)
  73+ 9B98 E6 7F                                and		SignMask8Bit
  74+ 9B9A 4F                                   ld		c,a
  75+ 9B9B 55                                   ld		d,l					; Q(i.e. l) => D, later we can just pop into de
  76+ 9B9C CD 5B 9E                             call	AequAdivDmul967Bit     	; does not use HL so we can retain it
  77+ 9B9F 47                                   ld		b,a				    ;++SGN
  78+ 9BA0 DD 7D                                ld		a,ixl			    ;++SGN
  79+ 9BA2 E6 80                                and		$80				    ;++SGN
  80+ 9BA4 B0                                   or		b				    ;++SGN
  81+ 9BA5 32 E8 C0                             ld		(XX15VecY),a
  82+ 9BA8 3A E9 C0     .n96NORMZ:              ld		a,(XX15VecZ)
  83+ 9BAB E6 7F                                and		SignMask8Bit
  84+ 9BAD 4F                                   ld		c,a
  85+ 9BAE 55                                   ld		d,l				; Q(i.e. l) => D, later we can just pop into de
  86+ 9BAF CD 5B 9E                             call	AequAdivDmul967Bit;AequAdivDmul96	; does not use HL so we can retain it
  87+ 9BB2 47                                   ld		b,a				    ;++SGN
  88+ 9BB3 FD 7C                                ld		a,iyh			    ;++SGN
  89+ 9BB5 E6 80                                and		$80				    ;++SGN
  90+ 9BB7 B0                                   or		b				    ;++SGN
  91+ 9BB8 32 E9 C0                             ld		(XX15VecZ),a
  92+ 9BBB C9                                   ret
  93+ 9BBC
  94+ 9BBC              ; Normalise vector
  95+ 9BBC              ; scale Q = Sqrt (X^2 + Y^2 + Z^2)
  96+ 9BBC              ; X = X / Q with 96 = 1 , i.e X = X / Q * 3/8
  97+ 9BBC              ; Y = Y / Q with 96 = 1 , i.e Y = Y / Q * 3/8
  98+ 9BBC              ; Z = Z / Q with 96 = 1 , i.e Z = Z / Q * 3/8
  99+ 9BBC
 100+ 9BBC                      IFNDEF DEBUG_NO_TACTICS_CODE
 101+ 9BBC              ;------------------------------------------------------------
 102+ 9BBC              ; To normalise the 24 bit version, bring out sign into TargetVectorxsgn
 103+ 9BBC              ; and make UBnKTargetXpos = abs (UBnKTargetXPos)
 104+ 9BBC              ; set up UBnKTarget[XYZ]Pos with 7 bit version of vector normalised
 105+ 9BBC              ; set up UBnKTargetpXYZ]Sgn with the sign bit
 106+ 9BBC 3A 49 C0     NormalseUnivTarget:     ld      a,(UBnKTargetXPos+2)
 107+ 9BBF 47                                   ld      b,a
 108+ 9BC0 E6 80                                and     $80
 109+ 9BC2 32 50 C0                             ld      (UBnKTargetXPosSgn),a        ; Split out the sign into byte 3
 110+ 9BC5 78                                   ld      a,b
 111+ 9BC6 E6 7F                                and     $7F
 112+ 9BC8 32 49 C0                             ld      (UBnKTargetXPos+2),a
 113+ 9BCB 3A 4C C0     .ABSYComponenet:        ld      a,(UBnKTargetYPos+2)
 114+ 9BCE 47                                   ld      b,a
 115+ 9BCF E6 80                                and     $80
 116+ 9BD1 32 51 C0                             ld      (UBnKTargetYPosSgn),a        ; Split out the sign into byte 3
 117+ 9BD4 78                                   ld      a,b
 118+ 9BD5 E6 7F                                and     $7F
 119+ 9BD7 32 4C C0                             ld      (UBnKTargetYPos+2),a
 120+ 9BDA 3A 4F C0     .ABSXZomponenet:        ld      a,(UBnKTargetZPos+2)
 121+ 9BDD 47                                   ld      b,a
 122+ 9BDE E6 80                                and     $80
 123+ 9BE0 32 52 C0                             ld      (UBnKTargetZPosSgn),a        ; Split out the sign into byte 3
 124+ 9BE3 78                                   ld      a,b
 125+ 9BE4 E6 7F                                and     $7F
 126+ 9BE6 32 4F C0                             ld      (UBnKTargetZPos+2),a
 127+ 9BE9              ;.. When we hit here the UBnKTargetX,Y and Z are 24 bit abs values to simplify scaling
 128+ 9BE9 2A B6 A2     .Scale:                 ld      hl, (TacticsVectorX)        ; pull 24 bit into registers
 129+ 9BEC 3A B8 A2                             ld      a,(TacticsVectorX+2)        ; h l ixH = X
 130+ 9BEF DD 67                                ld      ixh,a                       ;
 131+ 9BF1 ED 5B BA A2                          ld      de, (TacticsVectorY)        ; d e iyH = Y
 132+ 9BF5 3A BC A2                             ld      a,(TacticsVectorY+2)        ;
 133+ 9BF8 FD 67                                ld      iyh,a                       ;
 134+ 9BFA ED 4B BE A2                          ld      bc, (TacticsVectorZ)        ; b c iyL = Y
 135+ 9BFE 3A C0 A2                             ld      a,(TacticsVectorZ+2)        ;
 136+ 9C01 FD 6F                                ld      iyl,a                       ;
 137+ 9C03 DD 7C        .ScaleLoop1:            ld      a,ixh                       ; first pass get to 16 bit
 138+ 9C05 FD B4                                or      iyh
 139+ 9C07 FD B5                                or      iyl
 140+ 9C09 FD B4                                or      iyh
 141+ 9C0B CA 2C 9C                             jp      z,.DoneScaling1
 142+ 9C0E                                      ShiftIXhHLRight1
 142+ 9C0E DD 7C       >               ld  a,ixh
 142+ 9C10 CB 3F       >               srl a
 142+ 9C12 DD 67       >               ld  ixh,a
 142+ 9C14 CB 1C       >			   rr  h
 142+ 9C16 CB 1D       >			   rr  l
 143+ 9C18                                      ShiftIYhDERight1
 143+ 9C18 FD 7C       >               ld  a,iyh
 143+ 9C1A CB 3F       >               srl a
 143+ 9C1C FD 67       >               ld  iyh,a
 143+ 9C1E CB 1A       >               rr  d
 143+ 9C20 CB 1B       >			   rr  e
 144+ 9C22                                      ShiftIYlBCRight1
 144+ 9C22 FD 7D       >               ld  a,iyl
 144+ 9C24 CB 3F       >               srl a
 144+ 9C26 FD 6F       >               ld  iyl,a
 144+ 9C28 CB 18       >			   rr  b
 144+ 9C2A CB 19       >               rr  c
 145+ 9C2C              .DoneScaling1:          ;-- Now we have got here hl = X, de = Y, bc = Z
 146+ 9C2C                                      ;-- we cal just jump into the Normalize Tactics code
 147+ 9C2C 7C           .ScaleLoop2:            ld      a,h
 148+ 9C2D B2                                   or      d
 149+ 9C2E B0                                   or      b
 150+ 9C2F 28 0F                                jr      z,.DoneScaling2
 151+ 9C31                                      ShiftHLRight1
 151+ 9C31 CB 3C       >			   srl h
 151+ 9C33 CB 1D       >			   rr  l
 152+ 9C35                                      ShiftDERight1
 152+ 9C35 CB 3A       >			   srl d
 152+ 9C37 CB 1B       >			   rr  e
 153+ 9C39                                      ShiftBCRight1
 153+ 9C39 CB 38       >			   srl b
 153+ 9C3B CB 19       >			   rr  c
 154+ 9C3D C3 2C 9C                             jp      .ScaleLoop2
 155+ 9C40              ;-- Now we are down to 8 bit values, so we need to scale again to get S7
 156+ 9C40              .DoneScaling2:          ShiftHLRight1
 156+ 9C40 CB 3C       >			   srl h
 156+ 9C42 CB 1D       >			   rr  l
 157+ 9C44                                      ShiftDERight1
 157+ 9C44 CB 3A       >			   srl d
 157+ 9C46 CB 1B       >			   rr  e
 158+ 9C48                                      ShiftBCRight1
 158+ 9C48 CB 38       >			   srl b
 158+ 9C4A CB 19       >			   rr  c
 159+ 9C4C E5 D5 C5     .CalculateLength:       push    hl,,de,,bc                  ; save vecrtor x y and z nwo they are scaled to 1 byte
 160+ 9C4F 53                                   ld      d,e                         ; hl = y ^ 2
 161+ 9C50 ED 30                                mul     de                          ; .
 162+ 9C52 EB                                   ex      de,hl                       ; .
 163+ 9C53 53                                   ld      d,e                         ; de = x ^ 2
 164+ 9C54 ED 30                                mul     de                          ; .
 165+ 9C56 19                                   add     hl,de                       ; hl = y^ 2 + x ^ 2
 166+ 9C57 51                                   ld      d,c
 167+ 9C58 59                                   ld      e,c
 168+ 9C59 ED 30                                mul     de
 169+ 9C5B 19                                   add     hl,de                       ; hl =  y^ 2 + x ^ 2 + z ^ 2
 170+ 9C5C EB                                   ex      de,hl                       ; fix as hl was holding square
 171+ 9C5D CD B2 93                             call    asm_sqrt                    ; hl = sqrt (de) = sqrt (x ^ 2 + y ^ 2 + z ^ 2)
 172+ 9C60                                      ; add in logic if h is low then use lower bytes for all
 173+ 9C60 7D           .NormaliseZ:            ld      a,l                         ; save length into iyh
 174+ 9C61 FD 67                                ld      iyh,a                       ; .
 175+ 9C63 57                                   ld      d,a                         ;
 176+ 9C64 C1                                   pop     bc                          ; retrive z scaled
 177+ 9C65 79                                   ld      a,c                         ; a = scaled byte
 178+ 9C66 CD 5B 9E                             call    AequAdivDmul967Bit
 179+ 9C69 32 BE A2                             ld      (TacticsVectorZ),a          ; now Tactics Vector Z byte 1 is value
 180+ 9C6C D1           .NormaliseY:            pop     de
 181+ 9C6D 7B                                   ld      a,e
 182+ 9C6E FD 54                                ld      d,iyh
 183+ 9C70 CD 5B 9E                             call    AequAdivDmul967Bit
 184+ 9C73 32 BA A2                             ld      (TacticsVectorY),a
 185+ 9C76 E1           .NormaliseX:            pop     hl
 186+ 9C77 7D                                   ld      a,l
 187+ 9C78 FD 54                                ld      d,iyh
 188+ 9C7A CD 5B 9E                             call    AequAdivDmul967Bit
 189+ 9C7D 32 B6 A2                             ld      (TacticsVectorX),a          ;
 190+ 9C80 C9                                   ret
 191+ 9C81
 192+ 9C81                          DISPLAY "TODO: Missle AI only works on S15 spread over 24 bits, i.e. ignores Sign byte 7 bits"
 193+ 9C81              ;-- This norallises the Tactics vector in memory as much as possible, uses 16 bits
 194+ 9C81 2A B6 A2     NormalizeTactics:       ld      hl, (TacticsVectorX)        ; pull XX15 into registers
 195+ 9C84 ED 5B BA A2                          ld      de, (TacticsVectorY)        ; .
 196+ 9C88 ED 4B BE A2                          ld      bc, (TacticsVectorZ)        ; .
 197+ 9C8C 7C           .ScaleLoop:             ld      a,h
 198+ 9C8D B2                                   or      d
 199+ 9C8E B0                                   or      b
 200+ 9C8F 28 0F                                jr      z,.DoneScaling
 201+ 9C91                                      ShiftHLRight1
 201+ 9C91 CB 3C       >			   srl h
 201+ 9C93 CB 1D       >			   rr  l
 202+ 9C95                                      ShiftDERight1
 202+ 9C95 CB 3A       >			   srl d
 202+ 9C97 CB 1B       >			   rr  e
 203+ 9C99                                      ShiftBCRight1
 203+ 9C99 CB 38       >			   srl b
 203+ 9C9B CB 19       >			   rr  c
 204+ 9C9D C3 8C 9C                             jp      .ScaleLoop
 205+ 9CA0              .DoneScaling:           ShiftHLRight1                       ; as the values now need to be sign magnitued
 205+ 9CA0 CB 3C       >			   srl h
 205+ 9CA2 CB 1D       >			   rr  l
 206+ 9CA4                                      ShiftDERight1                       ; e.g. S + 7 bit we need an extra shift
 206+ 9CA4 CB 3A       >			   srl d
 206+ 9CA6 CB 1B       >			   rr  e
 207+ 9CA8                                      ShiftBCRight1                       ; now values are in L E C
 207+ 9CA8 CB 38       >			   srl b
 207+ 9CAA CB 19       >			   rr  c
 208+ 9CAC E5 D5 C5                             push    hl,,de,,bc                  ; save vecrtor x y and z nwo they are scaled to 1 byte
 209+ 9CAF 53                                   ld      d,e                         ; hl = y ^ 2
 210+ 9CB0 ED 30                                mul     de                          ; .
 211+ 9CB2 EB                                   ex      de,hl                       ; .
 212+ 9CB3 53                                   ld      d,e                         ; de = x ^ 2
 213+ 9CB4 ED 30                                mul     de                          ; .
 214+ 9CB6 19                                   add     hl,de                       ; hl = y^ 2 + x ^ 2
 215+ 9CB7 51                                   ld      d,c
 216+ 9CB8 59                                   ld      e,c
 217+ 9CB9 ED 30                                mul     de
 218+ 9CBB 19                                   add     hl,de                       ; hl =  y^ 2 + x ^ 2 + z ^ 2
 219+ 9CBC EB                                   ex      de,hl                       ; fix as hl was holding square
 220+ 9CBD CD B2 93                             call    asm_sqrt                    ; hl = sqrt (de) = sqrt (x ^ 2 + y ^ 2 + z ^ 2)
 221+ 9CC0                                      ; add in logic if h is low then use lower bytes for all
 222+ 9CC0 7D                                   ld      a,l
 223+ 9CC1 FD 67                                ld      iyh,a
 224+ 9CC3 57                                   ld      d,a
 225+ 9CC4 C1                                   pop     bc                          ; retrive tacticsvectorz scaled
 226+ 9CC5 79                                   ld      a,c                         ; a = scaled byte
 227+ 9CC6 CD 5B 9E                             call    AequAdivDmul967Bit;AequAdivDmul96Unsg          ; This rountine I think is wrong and retuins bad values
 228+ 9CC9 32 BE A2                             ld      (TacticsVectorZ),a
 229+ 9CCC D1                                   pop     de
 230+ 9CCD 7B                                   ld      a,e
 231+ 9CCE FD 54                                ld      d,iyh
 232+ 9CD0 CD 5B 9E                             call    AequAdivDmul967Bit;AequAdivDmul96Unsg
 233+ 9CD3 32 BA A2                             ld      (TacticsVectorY),a
 234+ 9CD6 E1                                   pop     hl
 235+ 9CD7 7D                                   ld      a,l
 236+ 9CD8 FD 54                                ld      d,iyh
 237+ 9CDA CD 5B 9E                             call    AequAdivDmul967Bit;AequAdivDmul96Unsg
 238+ 9CDD 32 B6 A2                             ld      (TacticsVectorX),a
 239+ 9CE0                                      ; BODGE FOR NOW
 240+ 9CE0                                      ZeroA                              ;; added to help debugging
 240+ 9CE0 AF          >                        xor a
 241+ 9CE1 32 B7 A2                             ld      (TacticsVectorX+1),a       ;; added to help debugging
 242+ 9CE4 32 BB A2                             ld      (TacticsVectorY+1),a       ;; added to help debugging
 243+ 9CE7 32 BF A2                             ld      (TacticsVectorZ+1),a       ;; added to help debugging
 244+ 9CEA                                      SignBitOnlyMem TacticsVectorX+2     ; now upper byte is sign only
 244+ 9CEA 3A B8 A2    >                        ld      a, (TacticsVectorX+2)
 244+ 9CED E6 80       >                        and     SignOnly8Bit
 244+ 9CEF 32 B8 A2    >                        ld      (TacticsVectorX+2),a
 245+ 9CF2                                      SignBitOnlyMem TacticsVectorY+2     ; (could move it to lower perhaps later if
 245+ 9CF2 3A BC A2    >                        ld      a, (TacticsVectorY+2)
 245+ 9CF5 E6 80       >                        and     SignOnly8Bit
 245+ 9CF7 32 BC A2    >                        ld      (TacticsVectorY+2),a
 246+ 9CFA                                      SignBitOnlyMem TacticsVectorZ+2     ;  its worth it)
 246+ 9CFA 3A C0 A2    >                        ld      a, (TacticsVectorZ+2)
 246+ 9CFD E6 80       >                        and     SignOnly8Bit
 246+ 9CFF 32 C0 A2    >                        ld      (TacticsVectorZ+2),a
 247+ 9D02                                    ;; oly using byte 2 for sign  ldCopyByte TacticsVectorX+2, TacticsVectorX+1
 248+ 9D02                                    ;; oly using byte 2 for sign  ldCopyByte TacticsVectorY+2, TacticsVectorY+1
 249+ 9D02                                    ;; oly using byte 2 for sign  ldCopyByte TacticsVectorZ+2, TacticsVectorZ+1
 250+ 9D02                                    ;; oly using byte 2 for sign  SignBitOnlyMem TacticsVectorX+1     ; now upper byte is sign only
 251+ 9D02                                    ;; oly using byte 2 for sign  SignBitOnlyMem TacticsVectorY+1     ; (could move it to lower perhaps later if
 252+ 9D02                                    ;; oly using byte 2 for sign  SignBitOnlyMem TacticsVectorZ+1     ;  its worth it)
 253+ 9D02 C9                                   ret
 254+ 9D03                      ENDIF
 255+ 9D03
# file closed: ./Maths/normalise96.asm
 588  9D03                  INCLUDE "./Maths/binary_to_decimal.asm"
# file opened: ./Maths/binary_to_decimal.asm
   1+ 9D03              ;Number in hl to decimal ASCII
   2+ 9D03              ;Thanks to z80 Bits
   3+ 9D03              ;inputs:	hl = number to ASCII
   4+ 9D03              ;example: hl=300 outputs '00300'
   5+ 9D03              ;destroys: af, bc, hl, de used
   6+ 9D03              DispHLtoDE:
   7+ 9D03              ; "DispHL, writes HL to DE address"
   8+ 9D03 01 F0 D8     	ld	bc,-10000
   9+ 9D06 CD 1C 9D     	call	Num1
  10+ 9D09 01 18 FC     	ld	bc,-1000
  11+ 9D0C CD 1C 9D     	call	Num1
  12+ 9D0F 01 9C FF     	ld	bc,-100
  13+ 9D12 CD 1C 9D     	call	Num1
  14+ 9D15 0E F6        	ld	c,-10
  15+ 9D17 CD 1C 9D     	call	Num1
  16+ 9D1A 0E FF        	ld	c,-1
  17+ 9D1C              Num1:
  18+ 9D1C 3E 2F        	ld	a,'0'-1
  19+ 9D1E              .Num2:
  20+ 9D1E 3C           	inc	a
  21+ 9D1F 09           	add	hl,bc
  22+ 9D20 38 FC        	jr	c,.Num2
  23+ 9D22 ED 42        	sbc	hl,bc
  24+ 9D24 12           	ld	(de),a
  25+ 9D25 13           	inc	de
  26+ 9D26 C9           	ret
  27+ 9D27
  28+ 9D27              DispAtoDE:
  29+ 9D27 26 00        	ld h,0
  30+ 9D29 6F           	ld l,a
  31+ 9D2A C3 03 9D     	jp DispHLtoDE
  32+ 9D2D
  33+ 9D2D              DispPriceAtoDE:
  34+ 9D2D 26 00        	ld h,0
  35+ 9D2F 6F           	ld l,a
  36+ 9D30 01 9C FF     	ld	bc,-100
  37+ 9D33 CD 43 9D     	call	.NumLeadBlank1
  38+ 9D36 0E F6        	ld	c,-10
  39+ 9D38 CD 1C 9D     	call	Num1
  40+ 9D3B 3E 2E        	ld		a,'.'					; we could assume preformat but
  41+ 9D3D                                  DISPLAY "TODO:  optimise "
  42+ 9D3D 12           	ld		(de),a					; we can optimse that later TODO
  43+ 9D3E 13           	inc		de						; with just an inc De
  44+ 9D3F 0E FF        	ld	c,-1
  45+ 9D41 18 D9        	jr		Num1
  46+ 9D43              .NumLeadBlank1:
  47+ 9D43 3E 2F        	ld	a,'0'-1
  48+ 9D45              .NumLeadBlank2:
  49+ 9D45 3C           	inc	a
  50+ 9D46 09           	add	hl,bc
  51+ 9D47 38 FC        	jr	c,.NumLeadBlank2
  52+ 9D49 FE 30        	cp	'0'
  53+ 9D4B 20 02        	jr	nz,.DontBlank
  54+ 9D4D              .Blank:
  55+ 9D4D 3E 20        	ld	a,' '
  56+ 9D4F              .DontBlank:
  57+ 9D4F ED 42        	sbc	hl,bc
  58+ 9D51 12           	ld	(de),a
  59+ 9D52 13           	inc	de
  60+ 9D53 C9           	ret
  61+ 9D54
  62+ 9D54              DispQtyAtoDE:
  63+ 9D54 FE 00        	cp	0
  64+ 9D56 28 23        	jr	z,.NoStock
  65+ 9D58 26 00        	ld h,0
  66+ 9D5A 6F           	ld l,a
  67+ 9D5B 01 9C FF     	ld	bc,-100
  68+ 9D5E CD 6A 9D     	call	.NumLeadBlank1
  69+ 9D61 0E F6        	ld	c,-10
  70+ 9D63 CD 6A 9D     	call	.NumLeadBlank1
  71+ 9D66 0E FF        	ld	c,-1
  72+ 9D68 18 B2        	jr		Num1
  73+ 9D6A              .NumLeadBlank1:
  74+ 9D6A 3E 2F        	ld	a,'0'-1
  75+ 9D6C              .NumLeadBlank2:
  76+ 9D6C 3C           	inc	a
  77+ 9D6D 09           	add	hl,bc
  78+ 9D6E 38 FC        	jr	c,.NumLeadBlank2
  79+ 9D70 FE 30        	cp	'0'
  80+ 9D72 20 02        	jr	nz,.DontBlank
  81+ 9D74              .Blank:
  82+ 9D74 3E 20        	ld	a,' '
  83+ 9D76              .DontBlank:
  84+ 9D76 ED 42        	sbc	hl,bc
  85+ 9D78 12           	ld	(de),a
  86+ 9D79 13           	inc	de
  87+ 9D7A C9           	ret
  88+ 9D7B              .NoStock:
  89+ 9D7B 3E 20        	ld	a,' '
  90+ 9D7D 12           	ld	(de),a
  91+ 9D7E 13           	inc	de
  92+ 9D7F 12           	ld	(de),a
  93+ 9D80 13           	inc	de
  94+ 9D81 3E 2D        	ld	a,'-'
  95+ 9D83 12           	ld	(de),a
  96+ 9D84 13           	inc de
  97+ 9D85 C9           	ret
  98+ 9D86
  99+ 9D86
 100+ 9D86              ;### CLCN32 -> Converts 32Bit-Value in ASCII-String (terminated by 0)
 101+ 9D86              ;### Input      DE,IX=32bit value, IY=destination address
 102+ 9D86              ;### Output     IY=last char in destination string
 103+ 9D86              ;### Destroyed AF,BC,DE,HL,IX
 104+ 9D86 01 00 00 00  clcn32t dw 1,0,     10,0,     100,0,     1000,0,       10000,0
 104+ 9D8A 0A 00 00 00
 104+ 9D8E 64 00 00 00
 104+ 9D92 E8 03 00 00
 104+ 9D96 10 27 00 00
 105+ 9D9A A0 86 01 00          dw $86a0,1, $4240,$0f, $9680,$98, $e100,$05f5, $ca00,$3b9a
 105+ 9D9E 40 42 0F 00
 105+ 9DA2 80 96 98 00
 105+ 9DA6 00 E1 F5 05
 105+ 9DAA 00 CA 9A 3B
 106+ 9DAE 00 00 00 00  clcn32z ds 4
 107+ 9DB2
 108+ 9DB2              ; As per display but shifts final digit by 1 and puts in "." for 1 decimal place
 109+ 9DB2 CD C1 9D     DispDEIXtoIY1DP:        call    DispDEIXtoIY
 110+ 9DB5 FD 7E 00                             ld      a,(IY+0)
 111+ 9DB8 FD 77 01                             ld      (IY+1),a
 112+ 9DBB 3E 2E                                ld      a,"."
 113+ 9DBD FD 77 00                             ld      (IY+0),a
 114+ 9DC0 C9                                   ret
 115+ 9DC1
 116+ 9DC1 DD 22 AE 9D  DispDEIXtoIY:           ld (clcn32z),ix
 117+ 9DC5 ED 53 B0 9D                          ld (clcn32z+2),de
 118+ 9DC9 DD 21 AA 9D                          ld ix,clcn32t+36
 119+ 9DCD 06 09                                ld b,9
 120+ 9DCF 0E 00                                ld c,0
 121+ 9DD1 3E 30        .clcn321:               ld a,'0'
 122+ 9DD3 B7                                   or a
 123+ 9DD4 DD 5E 00     .clcn322:               ld e,(ix+0)
 124+ 9DD7 DD 56 01                             ld d,(ix+1)
 125+ 9DDA 2A AE 9D                             ld hl,(clcn32z)
 126+ 9DDD ED 52                                sbc hl,de
 127+ 9DDF 22 AE 9D                             ld (clcn32z),hl
 128+ 9DE2 DD 5E 02                             ld e,(ix+2)
 129+ 9DE5 DD 56 03                             ld d,(ix+3)
 130+ 9DE8 2A B0 9D                             ld hl,(clcn32z+2)
 131+ 9DEB ED 52                                sbc hl,de
 132+ 9DED 22 B0 9D                             ld (clcn32z+2),hl
 133+ 9DF0 38 04                                jr c,.clcn325
 134+ 9DF2 0C                                   inc c
 135+ 9DF3 3C                                   inc a
 136+ 9DF4 18 DE                                jr .clcn322
 137+ 9DF6 DD 5E 00     .clcn325:               ld e,(ix+0)
 138+ 9DF9 DD 56 01                             ld d,(ix+1)
 139+ 9DFC 2A AE 9D                             ld hl,(clcn32z)
 140+ 9DFF 19                                   add hl,de
 141+ 9E00 22 AE 9D                             ld (clcn32z),hl
 142+ 9E03 DD 5E 02                             ld e,(ix+2)
 143+ 9E06 DD 56 03                             ld d,(ix+3)
 144+ 9E09 2A B0 9D                             ld hl,(clcn32z+2)
 145+ 9E0C ED 5A                                adc hl,de
 146+ 9E0E 22 B0 9D                             ld (clcn32z+2),hl
 147+ 9E11 11 FC FF                             ld de,-4
 148+ 9E14 DD 19                                add ix,de
 149+ 9E16 0C                                   inc c
 150+ 9E17 0D                                   dec c
 151+ 9E18 28 05                                jr z,.clcn323
 152+ 9E1A FD 77 00                             ld (iy+0),a
 153+ 9E1D FD 23                                inc iy
 154+ 9E1F 10 B0        .clcn323:               djnz .clcn321
 155+ 9E21 3A AE 9D                             ld a,(clcn32z)
 156+ 9E24 C6 30                                add A,'0'
 157+ 9E26 FD 77 00                             ld (iy+0),a
 158+ 9E29 FD 36 01 00                          ld (iy+1),0
 159+ 9E2D C9                                   ret
 160+ 9E2E
# file closed: ./Maths/binary_to_decimal.asm
 589  9E2E                  INCLUDE "./Maths/asm_AequAdivQmul96.asm"
# file opened: ./Maths/asm_AequAdivQmul96.asm
   1+ 9E2E              AequAdivQmul96ABS:      JumpIfAGTENusng d, .TIS2AccGTEQ			; if A >= Q then return with a 1 (unity i.e. 96) with the correct sign
   1+ 9E2E BA          >                        cp     d
   1+ 9E2F D2 4A 9E    >                        jp		nc,.TIS2AccGTEQ
   2+ 9E32 06 FE                                ld			b,$FE						; division roll (replaced varT)
   3+ 9E34 CB 27        .TIS2RollTLoop:			sla			a
   4+ 9E36                                      JumpIfALTNusng d,.TIS2SkipSub           ; a < d so don;t subtract
   4+ 9E36 BA          >                        cp      d
   4+ 9E37 DA 4D 9E    >                        jp		c, .TIS2SkipSub
   5+ 9E3A 9A                                   sbc			a,d							; do subtraction with carry
   6+ 9E3B 37                                   scf
   7+ 9E3C CB 10                                rl			b							; T rolled left to push bit out the end
   8+ 9E3E 38 F4                                jr			c,.TIS2RollTLoop				; if we still have not hit the empty marker continue
   9+ 9E40 78           .TIS2SKIPCont:	        ld			a,b							; T
  10+ 9E41 CB 3F                                srl			a							; result / 2
  11+ 9E43 CB 3F                                srl			a							; result / 4
  12+ 9E45 47                                   ld			b,a							; t = t /4
  13+ 9E46 CB 3F                                srl			a							; result / 8
  14+ 9E48 80                                   add			a,b							; result /8 + result /4
  15+ 9E49 C9                                   ret
  16+ 9E4A 3E 60        .TIS2AccGTEQ:           ld			a,$60							; unity
  17+ 9E4C C9                                   ret
  18+ 9E4D B7           .TIS2SkipSub:           or			a
  19+ 9E4E CB 10                                rl			b							; T rolled left to push bit out the end
  20+ 9E50 38 E2                                jr			c,.TIS2RollTLoop				; if we still have not hit the empty marker continue
  21+ 9E52 C3 40 9E                             jp			.TIS2SKIPCont
  22+ 9E55
  23+ 9E55
  24+ 9E55              ;; USES 			A DE BC
  25+ 9E55              ;; DOES NOT USE 	HL
  26+ 9E55              ;TIS2962C:		; two's compliment entry point, exits not 2's compliment
  27+ 9E55              ;	bit			        7,a
  28+ 9E55              ;	jr			        z,AequAdivQmul96
  29+ 9E55              ;	neg			        							; revers 2s'c and just set neg bit
  30+ 9E55              ;	set			        7,a
  31+ 9E55              ;; Note negative numbers are bit 7 set not 2's compliment
  32+ 9E55              AequAdivQmul96:								; TIS296:			; .tis2 A = A /Q *96 (or A = A * 3/8 * Q) Reduce Acc in NORM routine i.e. *96/Q clamps at +- 96
  33+ 9E55              TIS2:
  34+ 9E55 4F                                   ld			c,a							; copy of Acc
  35+ 9E56 3A B6 7F                             ld			a,(varQ)
  36+ 9E59 57                                   ld			d,a							; d = varQ
  37+ 9E5A 79                                   ld			a,c							; recover a
  38+ 9E5B 4F           AequAdivDmul967Bit:     ld          c,a
  39+ 9E5C 7A                                   ld          a,d
  40+ 9E5D CB 27                                sla         a       ; wipe sign bit
  41+ 9E5F C8                                   ret         z       ; quick exit if dividing 0 as a will have the result of 0
  42+ 9E60 30 10                                jr          nc, .OKToDivide
  43+ 9E62 B7           .ScaleDown:             or          a       ; clear carry bit
  44+ 9E63 CB 3A                                srl         d       ; d >> 1 to get back to 7 bit value
  45+ 9E65 79                                   ld          a,c
  46+ 9E66 E6 7F                                and         SignMask8Bit
  47+ 9E68 CB 3F                                srl         a
  48+ 9E6A 47                                   ld          b,a
  49+ 9E6B 79                                   ld          a,c
  50+ 9E6C E6 80                                and         $80
  51+ 9E6E B0                                   or          b
  52+ 9E6F C3 73 9E                             jp          AequAdivDmul96
  53+ 9E72 79           .OKToDivide:            ld          a,c
  54+ 9E73 4F           AequAdivDmul96:         ld			c,a							; copy of Acc as we need the sign, alternate entry point assuming D preloaded, wastes an "ld c,a" but simplifies code
  55+ 9E74 E6 7F                                and			SignMask8Bit				; ignore sign
  56+ 9E76                                      JumpIfAGTENusng d, .TIS2AccGTEQ			; if A >= Q then return with a 1 (unity i.e. 96) with the correct sign
  56+ 9E76 BA          >                        cp     d
  56+ 9E77 D2 97 9E    >                        jp		nc,.TIS2AccGTEQ
  57+ 9E7A 06 FE                                ld			b,$FE						; division roll (replaced varT)
  58+ 9E7C              .TIS2RollTLoop:									; .TIL2	; roll T
  59+ 9E7C CB 27                                sla			a
  60+ 9E7E                                      JumpIfALTNusng d,.TIS2SkipSub           ; a < d so don;t subtract
  60+ 9E7E BA          >                        cp      d
  60+ 9E7F DA 9D 9E    >                        jp		c, .TIS2SkipSub
  61+ 9E82 9A                                   sbc			a,d							; do subtraction with carry
  62+ 9E83 37                                   scf                                     ; set carrry to roll into b
  63+ 9E84 CB 10                                rl			b							; T rolled left to push bit out the end
  64+ 9E86 38 F4                                jr			c,.TIS2RollTLoop			; if we still have not hit the empty marker continue
  65+ 9E88 78           .TIS2SKIPCont:	        ld			a,b							; A = T = 4 / 4
  66+ 9E89 CB 3F                                srl			a							; .
  67+ 9E8B CB 3F                                srl			a							; .
  68+ 9E8D 47                                   ld			b,a							; .
  69+ 9E8E CB 3F                                srl			a							; A = A / 2 (i.e. T /8)
  70+ 9E90 80                                   add			a,b							; A = T/8 + T/4 (3T/8)
  71+ 9E91 47                                   ld			b,a							; b = 3/8*Acc (max = 96)
  72+ 9E92 79                                   ld			a,c							; copy of Acc to look at sign bit
  73+ 9E93 E6 80                                and			$80							; recover sign only
  74+ 9E95 B0                                   or			b							; now put b back in so we have a leading sign bit (note not 2's compliment)
  75+ 9E96 C9                                   ret
  76+ 9E97              ;TI4:										;\ clean to +/- unity
  77+ 9E97 79           .TIS2AccGTEQ:           ld			a,c
  78+ 9E98 E6 80                                and			$80							; copy of Acc
  79+ 9E9A F6 60                                or			$60							; unity
  80+ 9E9C C9                                   ret
  81+ 9E9D              .TIS2SkipSub:           ClearCarryFlag                          ; Clear carry as it needs to be empty to roll in 0
  81+ 9E9D B7          >                        or a
  82+ 9E9E CB 10                                rl			b							; T rolled left to push bit out the end
  83+ 9EA0 38 DA                                jr			c,.TIS2RollTLoop			; if we still have not hit the empty marker continue
  84+ 9EA2 C3 88 9E                             jp			.TIS2SKIPCont
  85+ 9EA5
  86+ 9EA5
  87+ 9EA5
  88+ 9EA5              ; as per AequAdivDmul967Bit but Q is an 8 bit unsigned
  89+ 9EA5              ; a = a(S7)/Q(8u)*96
  90+ 9EA5 4F           AequAdivDmul96Q8:       ld          c,a                         ; c = a
  91+ 9EA6 7A           .CheckDivide0:          ld          a,d                         ; check if its a / 0
  92+ 9EA7 A7                                   and         a                           ; .
  93+ 9EA8 CA CF 9E                             jp          z,.TIS2AccGTEQ              ; .
  94+ 9EAB 79           .NotDivide0:            ld          a,c                         ; get back value of A
  95+ 9EAC E6 7F                                and         SignMask8Bit                ; and make it abs, so a = abs(a) c = original a
  96+ 9EAE                                      JumpIfAGTENusng d, .TIS2AccGTEQ			; if A >= Q then return with a 1 (unity i.e. 96) with the correct sign
  96+ 9EAE BA          >                        cp     d
  96+ 9EAF D2 CF 9E    >                        jp		nc,.TIS2AccGTEQ
  97+ 9EB2 06 FE                                ld			b,$FE						; division roll (replaced varT)
  98+ 9EB4              .TIS2RollTLoop:									; .TIL2	; roll T
  99+ 9EB4 CB 27                                sla			a
 100+ 9EB6                                      JumpIfALTNusng d,.TIS2SkipSub           ; a < d so don;t subtract
 100+ 9EB6 BA          >                        cp      d
 100+ 9EB7 DA D5 9E    >                        jp		c, .TIS2SkipSub
 101+ 9EBA 9A                                   sbc			a,d							; do subtraction with carry
 102+ 9EBB 37                                   scf                                     ; set carrry to roll into b
 103+ 9EBC CB 10                                rl			b							; T rolled left to push bit out the end
 104+ 9EBE 38 F4                                jr			c,.TIS2RollTLoop			; if we still have not hit the empty marker continue
 105+ 9EC0 78           .TIS2SKIPCont:	        ld			a,b							; A = T = 4 / 4
 106+ 9EC1 CB 3F                                srl			a							; .
 107+ 9EC3 CB 3F                                srl			a							; .
 108+ 9EC5 47                                   ld			b,a							; .
 109+ 9EC6 CB 3F                                srl			a							; A = A / 2 (i.e. T /8)
 110+ 9EC8 80                                   add			a,b							; A = T/8 + T/4 (3T/8)
 111+ 9EC9 47                                   ld			b,a							; b = 3/8*Acc (max = 96)
 112+ 9ECA 79                                   ld			a,c							; copy of Acc to look at sign bit
 113+ 9ECB E6 80                                and			SignOnly8Bit    			; recover sign only
 114+ 9ECD B0                                   or			b							; now put b back in so we have a leading sign bit (note not 2's compliment)
 115+ 9ECE C9                                   ret
 116+ 9ECF              ;TI4:										;\ clean to +/- unity
 117+ 9ECF 79           .TIS2AccGTEQ:           ld			a,c
 118+ 9ED0 E6 80                                and			$80							; copy of Acc
 119+ 9ED2 F6 60                                or			$60							; unity
 120+ 9ED4 C9                                   ret
 121+ 9ED5              .TIS2SkipSub:           ClearCarryFlag                          ; Clear carry as it needs to be empty to roll in 0
 121+ 9ED5 B7          >                        or a
 122+ 9ED6 CB 10                                rl			b							; T rolled left to push bit out the end
 123+ 9ED8 38 DA                                jr			c,.TIS2RollTLoop			; if we still have not hit the empty marker continue
 124+ 9EDA C3 C0 9E                             jp			.TIS2SKIPCont
 125+ 9EDD
 126+ 9EDD
# file closed: ./Maths/asm_AequAdivQmul96.asm
 590  9EDD                  INCLUDE "./Maths/Utilities/AequAmulQdiv256-FMLTU.asm"
# file opened: ./Maths/Utilities/AequAmulQdiv256-FMLTU.asm
   1+ 9EDD              ; "ASM_FMUTKL .FMLTU	\ -> &2847  \ A=A*Q/256unsg  Fast multiply"
   2+ 9EDD              fmltu:
   3+ 9EDD 57           AequAmulQdiv256:        ld	d,a
   4+ 9EDE 3A B6 7F                             ld	a,(varQ)
   5+ 9EE1 5F                                   ld	e,a
   6+ 9EE2 ED 30                                mul
   7+ 9EE4 7A                                   ld	a,d				; we get only the high byte which is like doing a /256 if we think of a as low
   8+ 9EE5 C9                                   ret
   9+ 9EE6
  10+ 9EE6 5F           AequAmulDdiv256:        ld  e,a
  11+ 9EE7 ED 30                                mul
  12+ 9EE9 7A                                   ld  a,d
  13+ 9EEA C9                                   ret
  14+ 9EEB
# file closed: ./Maths/Utilities/AequAmulQdiv256-FMLTU.asm
 591  9EEB                  ;INCLUDE "./Maths/Utilities/PRequSpeedDivZZdiv8-DV42-DV42IYH.asm"
 592  9EEB
 593  9EEB                  INCLUDE "./Maths/Utilities/APequQmulA-MULT1.asm"
# file opened: ./Maths/Utilities/APequQmulA-MULT1.asm
   1+ 9EEB              APequQmulA:
   2+ 9EEB              asm_mult1:
   3+ 9EEB              ; "ASM_MULT1 (DE) A(hi).P(lo) = Q * A first part of MAD, multiply and add. Visited Quite often. A=hi P = lo also returns result in DE"
   4+ 9EEB FE 00        	cp	0
   5+ 9EED 28 1F        	jr	z,.mul0			; quick exit if its Q * 0
   6+ 9EEF 5F           	ld	e,a
   7+ 9EF0 3A B6 7F     	ld	a,(varQ)
   8+ 9EF3 57           	ld	d,a
   9+ 9EF4 FE 00        	cp	0				; compare a
  10+ 9EF6 28 16        	jr	z,.mul0			; quick exit if its 0 * a
  11+ 9EF8 AB           	xor	e				; -- = + +- = - -+ = - ++ = +
  12+ 9EF9 E6 80        	and $80				; get the resultant sign and save into b
  13+ 9EFB 47           	ld	b,a
  14+ 9EFC 7A           	ld	a,d
  15+ 9EFD E6 7F        	and	SignMask8Bit	; now strip off sign bits
  16+ 9EFF 57           	ld	d,a
  17+ 9F00 7B           	ld	a,e
  18+ 9F01 E6 7F        	and SignMask8Bit
  19+ 9F03 5F           	ld	e,a
  20+ 9F04 ED 30        	mul					; zxn de = d * e
  21+ 9F06 7B           	ld	a,e
  22+ 9F07 32 B6 7E     	ld	(varP),a		; p = lo
  23+ 9F0A 7A           	ld	a,d				; a = hi
  24+ 9F0B B0           	or	b				; de goes to a and varP also re-do sign bit
  25+ 9F0C 57           	ld	d,a				; we will work with de having result as we may bin vars later
  26+ 9F0D C9           	ret
  27+ 9F0E              .mul0:
  28+ 9F0E AF           	xor	a
  29+ 9F0F 32 B6 7E     	ld	(varP),a
  30+ 9F12 57           	ld	d,a
  31+ 9F13 5F           	ld  e,a
  32+ 9F14 C9           	ret
  33+ 9F15
# file closed: ./Maths/Utilities/APequQmulA-MULT1.asm
 594  9F15                  INCLUDE "./Maths/Utilities/badd_ll38.asm"
# file opened: ./Maths/Utilities/badd_ll38.asm
   1+ 9F15              baddll38:				;.LL38	\ -> &4812 \ BADD(S)A=R+Q(SA) \ byte add (subtract)   (Sign S)A = R + Q*(Sign from A^S)
   2+ 9F15              SAEquSRPlusAQ:
   3+ 9F15              ; Calculate the following between sign-magnitude numbers:
   4+ 9F15              ;   (S A) = (S R) + (A Q)
   5+ 9F15              ; where the sign bytes only contain the sign bits, not magnitudes.
   6+ 9F15              ; note goes wrong at <-127 >128 so need 16 bit version
   7+ 9F15              ; so need to fix the issue with carry flag not returning a fault correctly
   8+ 9F15              LL38:
   9+ 9F15              ;	ld		d,a
  10+ 9F15              ;	ld		a,(varQ)
  11+ 9F15              ;	ld		e,a
  12+ 9F15              ;	ld		a,(varS)
  13+ 9F15              ;	ld		h,a
  14+ 9F15              ;	ld		a,(varR)
  15+ 9F15              ;	ld		l,a
  16+ 9F15              ;	call	ADDHLDESignedv3
  17+ 9F15              ;	ld		a,h
  18+ 9F15              ;	ld		(varS),a
  19+ 9F15              ;	ld		a,l
  20+ 9F15              ;	ret
  21+ 9F15              ; calculation table
  22+ 9F15              ;   R     Q    Op            Sign calc
  23+ 9F15              ;	10    5    Add           +    sign same add R sign
  24+ 9F15              ;   -10   5    ABS Sub       -    sign diff ABS R > S sub R sign
  25+ 9F15              ;   10   -5    ABS sub       +    sign diff ABS R > S sub R sign
  26+ 9F15              ;	-10  -5    ABS Add       -    sign same add R sign
  27+ 9F15              ;   5    10    Add           +    sign same add R sign
  28+ 9F15              ;   -5   10    Swap ABS SUB  +    sign diff ABS Q > R swap SUB Q sign
  29+ 9F15              ;   5    -10   swap ABS Sub  -    sign diff ABS Q > R swap SUB R sign
  30+ 9F15              ;   -5   -10   ABS  add      -    sign same add R sign
  31+ 9F15
  32+ 9F15              ;   -10   5    ABS Sub       -    sign diff ABS R > S sub R sign
  33+ 9F15              ;   10   -5    ABS sub       +    sign diff ABS R > S sub R sign
  34+ 9F15              ;   -5   10    Swap ABS SUB  +    sign diff ABS Q > R swap SUB Q sign
  35+ 9F15              ;   5    -10   swap ABS Sub  -    sign diff ABS Q > R swap SUB R sign
  36+ 9F15
  37+ 9F15
  38+ 9F15              ; Calculate sign for Q from A and varS
  39+ 9F15 21 B8 7F     	ld		hl,varS							;
  40+ 9F18 AE           	xor		(hl)							;  EOR &83		\ S	\ sign of operator is A xor S
  41+ 9F19 FA 24 9F     	jp		m,.LL39Subtraction  			; if signs are different then we have subtraction
  42+ 9F1C 3A B6 7F     	ld		a,(varQ)						; Q	\ else addition, S already correct
  43+ 9F1F 21 B7 7F     	ld		hl,varR
  44+ 9F22 86           	add		a,(hl)							; a = Q + R
  45+ 9F23 C9           	ret										; Done carry set if overflow
  46+ 9F24              .LL39Subtraction:							; 1 byte subtraction (S)A = R-Q
  47+ 9F24 3A B7 7F     	ld		a,(varR)						; a = R
  48+ 9F27 21 B6 7F     	ld		hl,varQ                         ; Q
  49+ 9F2A              ;--	JumpIfALTMemHLusng LL39SwapSubtraction	; if a < (hl) then do LL39SwapSubtraction
  50+ 9F2A              	ClearCarryFlag                          ; we need to not use carry (6502 is different that it uses the compliement)
  50+ 9F2A B7          >                        or a
  51+ 9F2B 9E           	sbc		a,(hl)							; A = R - Q which as R >= Q will always be a positive result
  52+ 9F2C 38 01            jr      c,.LL39SignCorrection
  53+ 9F2E              ;--    jr      a,.LL39ResultZero
  54+ 9F2E              ;--   JumpIfNegative LL39SignCorrection		; if there was underflow we have to correct sign
  55+ 9F2E              ;--	or		a								; Clear carry flag to say result is correct
  56+ 9F2E C9           	ret
  57+ 9F2F              .LL39SignCorrection:
  58+ 9F2F FE 00            cp      0                               ; if its 0 then neg will affect flag so we just zero result to save compute
  59+ 9F31 28 0E            jr      z,.LL39ResultZero
  60+ 9F33 ED 44            neg                                     ; flip A 2'c value to positive
  61+ 9F35 08           	ex		af,af'							; save A temporarily
  62+ 9F36 3A B8 7F     	ld		a,(varS)						; Flip Sign bit in varS
  63+ 9F39 EE 80        	xor		$80							    ;
  64+ 9F3B 32 B8 7F     	ld		(varS),a                        ; flip sign bit of a
  65+ 9F3E 08           	ex		af,af'                          ; get back a which is the result
  66+ 9F3F                  ClearCarryFlag                          ; clear carry as NEG instrunction sets it for non zero
  66+ 9F3F B7          >                        or a
  67+ 9F40 C9           	ret
  68+ 9F41              .LL39ResultZero:
  69+ 9F41 32 B8 7F         ld      (varS),a                        ; a is zero at this stage so set sign as well
  70+ 9F44                  ClearCarryFlag                          ; clear carry
  70+ 9F44 B7          >                        or a
  71+ 9F45 C9               ret
  72+ 9F46              ;--LL39SwapSubtraction:
  73+ 9F46              ;--	push	bc
  74+ 9F46              ;--	ld		b,a
  75+ 9F46              ;--	ld		a,(hl)
  76+ 9F46              ;--	sub		b
  77+ 9F46              ;--	pop		bc
  78+ 9F46              ;--	ex		af,af'							; do we flip here or negate. i think its flip as its overflowed unsigned
  79+ 9F46              ;--	ld		a,(varS)
  80+ 9F46              ;--	xor		$80
  81+ 9F46              ;--	ld		(varS),a
  82+ 9F46              ;--	ex		af,af'
  83+ 9F46              ;--	ret
  84+ 9F46
  85+ 9F46              ;;;;	baddll38:				;.LL38	\ -> &4812 \ BADD(S)A=R+Q(SA) \ byte add (subtract)   (Sign S)A = R + Q*(Sign from A^S)
  86+ 9F46              ;;;;; Calculate the following between sign-magnitude numbers:
  87+ 9F46              ;;;;;   (S A) = (S R) + (A Q)
  88+ 9F46              ;;;;; where the sign bytes only contain the sign bits, not magnitudes.
  89+ 9F46              ;;;;; note goes wrong at <-127 >128 so need 16 bit version
  90+ 9F46              ;;;;LL38:
  91+ 9F46              ;;;;; Calculate sign for Q from A and varS
  92+ 9F46              ;;;;	ld		hl,varS							;
  93+ 9F46              ;;;;	xor		(hl)							;  EOR &83		\ S	\ sign of operator is A xor S
  94+ 9F46              ;;;;	jp		m,.LL39Subtraction  			; if signs are different then we have subtraction
  95+ 9F46              ;;;;	ld		a,(varQ)						; Q	\ else addition, S already correct
  96+ 9F46              ;;;;	ld		hl,varR
  97+ 9F46              ;;;;	add		a,(hl)							; a = Q + R
  98+ 9F46              ;;;;	ret										; Done
  99+ 9F46              ;;;;.LL39Subtraction:							; 1 byte subtraction (S)A = R-Q
 100+ 9F46              ;;;;	ld		hl,varQ                         ;
 101+ 9F46              ;;;;	ld		a,(hl)
 102+ 9F46              ;;;;	JumpIfAGTENusng 128,LL39Sub16bit		; does this need to be 16 bit
 103+ 9F46              ;;;;	ld		a,(varR)						;
 104+ 9F46              ;;;;	ClearCarryFlag                          ; we need to not use carry (6502 is different that it uses the compliement)
 105+ 9F46              ;;;;	sbc		a,(hl)							; A = R - Q
 106+ 9F46              ;;;;	jr		c,.SignCorrection				; if there was underflow we have to correct sign
 107+ 9F46              ;;;;	or		a								; Clear carry flag to say result is correct
 108+ 9F46              ;;;;	ret
 109+ 9F46              ;;;;.SignCorrection:
 110+ 9F46              ;;;;    neg                                     ; flip A 2'c value to positive
 111+ 9F46              ;;;;	ex		af,af'							; save A temporarily
 112+ 9F46              ;;;;	ld		a,(varS)						; Flip Sign bit in varS
 113+ 9F46              ;;;;	xor		$80							    ;
 114+ 9F46              ;;;;	ld		(varS),a                        ; flip sign bit of a
 115+ 9F46              ;;;;	ex		af,af'                          ; get back a which is the result
 116+ 9F46              ;;;;	ret
 117+ 9F46              ;;;;LL39Sub16Bit:
 118+ 9F46              ;;;;	ld		e,a
 119+ 9F46              ;;;;	ld		d,0
 120+ 9F46              ;;;;	ld		a,(varR)
 121+ 9F46              ;;;;	ld		l,a
 122+ 9F46              ;;;;	ld		h,0
 123+ 9F46              ;;;;	ClearCarryFlag
 124+ 9F46              ;;;;	sbc		hl,de
 125+ 9F46              ;;;;	jr		c,.SignCorrection16bit
 126+ 9F46              ;;;;	bit		7,h
 127+ 9F46              ;;;;	jr		z,.GoodToReturn
 128+ 9F46              ;;;;.Needtonegate:
 129+ 9F46              ;;;;	macronegate16hl
 130+ 9F46              ;;;;.GoodToReturn
 131+ 9F46              ;;;;	ld		a,l
 132+ 9F46              ;;;;	or		a
 133+ 9F46              ;;;;	ret
 134+ 9F46              ;;;;.SignCorrection16bit:
 135+ 9F46              ;;;;	macronegate16hl
 136+ 9F46              ;;;;	ld		a,(varS)						; Flip Sign bit in varS
 137+ 9F46              ;;;;	xor		$80							    ;
 138+ 9F46              ;;;;	ld		(varS),a                        ; flip sign bit of a
 139+ 9F46              ;;;;	ld		a,l
 140+ 9F46              ;;;;	ret
 141+ 9F46
 142+ 9F46
# file closed: ./Maths/Utilities/badd_ll38.asm
 595  9F46
 596  9F46                  ;INCLUDE "./Maths/Utilities/RequAmul256divQ-BFRDIV.asm"
 597  9F46                  ;INCLUDE "./Maths/Utilities/RequAdivQ-LL61.asm"
 598  9F46                  ;INCLUDE "./Maths/Utilities/RSequQmulA-MULT12.asm"
 599  9F46
 600  9F46                  include "./Universe/Ships/CopyRotMattoXX15.asm"
# file opened: ./Universe/Ships/CopyRotMattoXX15.asm
   1+ 9F46              CopyRotMatNoseVtoXX15:
   2+ 9F46                      ldCopyByte  UBnkrotmatNosevX+1 ,XX15VecX
   2+ 9F46 3A 37 C0    >                        ld       a,(UBnkrotmatNosevX+1)
   2+ 9F49 32 E7 C0    >                        ld       (XX15VecX),a
   3+ 9F4C                      ldCopyByte  UBnkrotmatNosevY+1, XX15VecY
   3+ 9F4C 3A 39 C0    >                        ld       a,(UBnkrotmatNosevY+1)
   3+ 9F4F 32 E8 C0    >                        ld       (XX15VecY),a
   4+ 9F52                      ldCopyByte  UBnkrotmatNosevZ+1 ,XX15VecZ
   4+ 9F52 3A 3B C0    >                        ld       a,(UBnkrotmatNosevZ+1)
   4+ 9F55 32 E9 C0    >                        ld       (XX15VecZ),a
   5+ 9F58 C9                   ret
   6+ 9F59
   7+ 9F59              CopyRotMatRoofVtoXX15:
   8+ 9F59                      ldCopyByte  UBnkrotmatRoofvX+1 ,XX15VecX
   8+ 9F59 3A 31 C0    >                        ld       a,(UBnkrotmatRoofvX+1)
   8+ 9F5C 32 E7 C0    >                        ld       (XX15VecX),a
   9+ 9F5F                      ldCopyByte  UBnkrotmatRoofvY+1, XX15VecY
   9+ 9F5F 3A 33 C0    >                        ld       a,(UBnkrotmatRoofvY+1)
   9+ 9F62 32 E8 C0    >                        ld       (XX15VecY),a
  10+ 9F65                      ldCopyByte  UBnkrotmatRoofvZ+1 ,XX15VecZ
  10+ 9F65 3A 35 C0    >                        ld       a,(UBnkrotmatRoofvZ+1)
  10+ 9F68 32 E9 C0    >                        ld       (XX15VecZ),a
  11+ 9F6B C9                   ret
  12+ 9F6C
  13+ 9F6C              CopyRotMatSideVtoXX15:
  14+ 9F6C                      ldCopyByte  UBnkrotmatSidevX+1 ,XX15VecX
  14+ 9F6C 3A 2B C0    >                        ld       a,(UBnkrotmatSidevX+1)
  14+ 9F6F 32 E7 C0    >                        ld       (XX15VecX),a
  15+ 9F72                      ldCopyByte  UBnkrotmatSidevY+1, XX15VecY
  15+ 9F72 3A 2D C0    >                        ld       a,(UBnkrotmatSidevY+1)
  15+ 9F75 32 E8 C0    >                        ld       (XX15VecY),a
  16+ 9F78                      ldCopyByte  UBnkrotmatSidevZ+1 ,XX15VecZ
  16+ 9F78 3A 2F C0    >                        ld       a,(UBnkrotmatSidevZ+1)
  16+ 9F7B 32 E9 C0    >                        ld       (XX15VecZ),a
  17+ 9F7E C9                   ret
  18+ 9F7F
# file closed: ./Universe/Ships/CopyRotMattoXX15.asm
 601  9F7F                  include "./Universe/Ships/CopyXX15toRotMat.asm"
# file opened: ./Universe/Ships/CopyXX15toRotMat.asm
   1+ 9F7F              CopyXX15toRotMatNoseV:
   2+ 9F7F                      ldCopyByte  XX15VecX, UBnkrotmatNosevX+1
   2+ 9F7F 3A E7 C0    >                        ld       a,(XX15VecX)
   2+ 9F82 32 37 C0    >                        ld       (UBnkrotmatNosevX+1),a
   3+ 9F85                      ldCopyByte  XX15VecY, UBnkrotmatNosevY+1
   3+ 9F85 3A E8 C0    >                        ld       a,(XX15VecY)
   3+ 9F88 32 39 C0    >                        ld       (UBnkrotmatNosevY+1),a
   4+ 9F8B                      ldCopyByte  XX15VecZ, UBnkrotmatNosevZ+1
   4+ 9F8B 3A E9 C0    >                        ld       a,(XX15VecZ)
   4+ 9F8E 32 3B C0    >                        ld       (UBnkrotmatNosevZ+1),a
   5+ 9F91                      ZeroA
   5+ 9F91 AF          >                        xor a
   6+ 9F92 32 36 C0             ld  (UBnkrotmatNosevX),a
   7+ 9F95 32 38 C0             ld  (UBnkrotmatNosevY),a
   8+ 9F98 32 3A C0             ld  (UBnkrotmatNosevZ),a
   9+ 9F9B C9                   ret
  10+ 9F9C
  11+ 9F9C              CopyXX15toRotMatRoofV:
  12+ 9F9C                      ldCopyByte  XX15VecX, UBnkrotmatRoofvX+1
  12+ 9F9C 3A E7 C0    >                        ld       a,(XX15VecX)
  12+ 9F9F 32 31 C0    >                        ld       (UBnkrotmatRoofvX+1),a
  13+ 9FA2                      ldCopyByte  XX15VecY, UBnkrotmatRoofvY+1
  13+ 9FA2 3A E8 C0    >                        ld       a,(XX15VecY)
  13+ 9FA5 32 33 C0    >                        ld       (UBnkrotmatRoofvY+1),a
  14+ 9FA8                      ldCopyByte  XX15VecZ, UBnkrotmatRoofvZ+1
  14+ 9FA8 3A E9 C0    >                        ld       a,(XX15VecZ)
  14+ 9FAB 32 35 C0    >                        ld       (UBnkrotmatRoofvZ+1),a
  15+ 9FAE                      ZeroA
  15+ 9FAE AF          >                        xor a
  16+ 9FAF 32 30 C0             ld  (UBnkrotmatRoofvX),a
  17+ 9FB2 32 32 C0             ld  (UBnkrotmatRoofvY),a
  18+ 9FB5 32 34 C0             ld  (UBnkrotmatRoofvZ),a
  19+ 9FB8 C9                   ret
  20+ 9FB9
  21+ 9FB9              CopyXX15toRotMatSideV:
  22+ 9FB9                      ldCopyByte  XX15VecX, UBnkrotmatSidevX+1
  22+ 9FB9 3A E7 C0    >                        ld       a,(XX15VecX)
  22+ 9FBC 32 2B C0    >                        ld       (UBnkrotmatSidevX+1),a
  23+ 9FBF                      ldCopyByte  XX15VecY, UBnkrotmatSidevY+1
  23+ 9FBF 3A E8 C0    >                        ld       a,(XX15VecY)
  23+ 9FC2 32 2D C0    >                        ld       (UBnkrotmatSidevY+1),a
  24+ 9FC5                      ldCopyByte  XX15VecZ, UBnkrotmatSidevZ+1
  24+ 9FC5 3A E9 C0    >                        ld       a,(XX15VecZ)
  24+ 9FC8 32 2F C0    >                        ld       (UBnkrotmatSidevZ+1),a
  25+ 9FCB                      ZeroA
  25+ 9FCB AF          >                        xor a
  26+ 9FCC 32 2A C0             ld  (UBnkrotmatSidevX),a
  27+ 9FCF 32 2C C0             ld  (UBnkrotmatSidevY),a
  28+ 9FD2 32 2E C0             ld  (UBnkrotmatSidevZ),a
  29+ 9FD5 C9                   ret
  30+ 9FD6
# file closed: ./Universe/Ships/CopyXX15toRotMat.asm
 602  9FD6                  INCLUDE "./Maths/asm_tidy.asm"
# file opened: ./Maths/asm_tidy.asm
   1+ 9FD6              ; d = vector 1 e = vector 2 h = vector3 l = vector 4 b = vector 5
   2+ 9FD6              ; performs (d*e + h*l) / b and puts the result in de where e is 0
   3+ 9FD6 C5           TidyCalc:       push    bc
   4+ 9FD7 CD BA 91                     call    mulDbyESigned           ; de = vector 1 * vector 2
   5+ 9FDA EB                           ex      hl,de                   ; get hl into de and save result of de
   6+ 9FDB CD BA 91                     call    mulDbyESigned           ; de = vector 2 * vector 3
   7+ 9FDE CD 04 00                     call    AddDEtoHLSigned         ; BC = HL = HL + DE
   8+ 9FE1 D1                           pop     de                      ; DE = BC saved from earlier
   9+ 9FE2 7C                           ld      a,h                     ; check for result 0
  10+ 9FE3 B5                           or      l                       ; .
  11+ 9FE4 CA 05 A0                     jp      z,.ZeroResult           ; .
  12+ 9FE7 44 4D                        ld      bc,hl                   ; .
  13+ 9FE9 7A                           ld      a,d                     ; check for divide by zero
  14+ 9FEA A7                           and     a                       ; .
  15+ 9FEB CA FC 9F                     jp      z,.MaxedResult          ; .
  16+ 9FEE 5A                           ld      e,d                     ; now de = 0b (i.e. b register not hex value)
  17+ 9FEF 16 00                        ld      d,0                     ;
  18+ 9FF1 CD 71 98                     call    Floor_DivQSigned        ; TO BE TESTED should do BC = BC / DE
  19+ 9FF4 78                           ld      a,b                     ; sign bit from b
  20+ 9FF5 E6 80                        and     $80                     ; .
  21+ 9FF7 B1                           or      c                       ; bring in the value
  22+ 9FF8 57                           ld      d,a                     ; de = c0 (i.e. c register not hex value)
  23+ 9FF9 1E 00                        ld      e,0                     ; .
  24+ 9FFB C9                           ret
  25+ 9FFC 78           .MaxedResult:   ld      a,b                     ; make result signed unity (i.e. 1 or 96 in our case)
  26+ 9FFD EE 80                        xor     $80
  27+ 9FFF F6 60                        or      $60
  28+ A001 57                           ld      d,a
  29+ A002 1E 00                        ld      e,0
  30+ A004 C9                           ret
  31+ A005 11 00 00     .ZeroResult:    ld      de,0
  32+ A008 C9                           ret
  33+ A009              ; as per tidy calc except
  34+ A009              ; d = vector 1 e = vector 2 h = vector3 l = vector 4
  35+ A009              ; performs (d*e - h*l) / 96 and puts the result in de where e is 0
  36+ A009
  37+ A009 CD BA 91     TidySide:       call    mulDbyESigned           ; de = vector 1 * vector 2
  38+ A00C EB                           ex      de,hl                   ; get hl = vector 1 * vector 2
  39+ A00D CD BA 91                     call    mulDbyESigned           ; de = vector 2 * vector 3
  40+ A010 CD 00 00                     call    SubDEfromHLSigned       ; BC = HL = HL - DE
  41+ A013 44 4D                        ld      bc,hl                   ; .
  42+ A015 11 60 00                     ld      de,$60                  ; now de = 96
  43+ A018 CD 71 98                     call    Floor_DivQSigned        ; TO BE TESTED should do BC = BC / DE
  44+ A01B 78                           ld      a,b                     ; sign bit from b
  45+ A01C E6 80                        and     $80                     ; .
  46+ A01E B1                           or      c                       ; bring in the value
  47+ A01F 57                           ld      d,a                     ; de = c0 (i.e. c register not hex value)
  48+ A020 1E 00                        ld      e,0                     ; .
  49+ A022 C9                           ret
  50+ A023
  51+ A023              ;; orthonormalise vector for UBnK ship vector uses IX IT
  52+ A023                  DISPLAY "TidyVectorsIX"
  53+ A023 DD 21 36 C0  TidyVectorsIX:  ld      ix,UBnkrotmatNosevX
  54+ A027 CD 06 9B                     call    NormaliseIXVector       ; initially we normalise the nose vector
  55+ A02A 3A 37 C0     .CheckNoseXSize:ld      a,(UBnkrotmatNosevX+1)  ; a = nose x
  56+ A02D E6 30                        and     %00110000                ; if bits 7 and 6 are clear the work with nosey
  57+ A02F CA 63 A0                     jp      z, .NoseXSmall
  58+ A032              ;-- When nosex is large ------------------------  roofv_x =-(nosev_y * roofv_y + nosev_z * roofv_z) / nosev_x
  59+ A032 3A 39 C0     .NoseXLarge:    ld      a,(UBnkrotmatNosevY+1)  ; a = nose x
  60+ A035 57                           ld      d,a
  61+ A036 3A 33 C0                     ld      a,(UBnkrotmatRoofvY+1)  ; hl = nosev_y * roofv_y
  62+ A039 5F                           ld      e,a                     ; we already have d so only need roofY
  63+ A03A 3A 3B C0                     ld      a,(UBnkrotmatNosevZ+1)  ; de = nosev_z * roofv_z
  64+ A03D 67                           ld      h,a                     ; .
  65+ A03E 3A 35 C0                     ld      a,(UBnkrotmatRoofvZ+1)  ; .
  66+ A041 6F                           ld      l,a                     ; .
  67+ A042 3A 37 C0                     ld      a,(UBnkrotmatNosevX+1)
  68+ A045 47                           ld      b,a
  69+ A046 CD D6 9F                     call    TidyCalc
  70+ A049 7A                           ld      a,d
  71+ A04A B3                           or      e
  72+ A04B CA 52 A0                     jp      z,.NoRoofXFlip
  73+ A04E 3E 80                        ld      a,$80                   ; flip sign bit if not zero
  74+ A050 AA                           xor     d
  75+ A051 57                           ld      d,a
  76+ A052 ED 53 30 C0  .NoRoofXFlip:   ld      (UBnkrotmatRoofvX),de   ; write roofvx
  77+ A056 C3 BE A0                     jp      .NormaliseRoofv
  78+ A059 11 00 E0     .MaxedRoofX:    ld      de,$E000                ; TEST if sign is correct for all of these if was divide by zero make it -1
  79+ A05C ED 53 30 C0                  ld      (UBnkrotmatRoofvX),de   ; write roofvx
  80+ A060 C3 BE A0                     jp      .NormaliseRoofv
  81+ A063              ;-- When noseX is small ------------------------ determine if we are doign roofz or roof y
  82+ A063 3A 38 C0     .NoseXSmall:    ld      a,(UBnkrotmatNosevY)
  83+ A066 E6 60                        and     %01100000
  84+ A068 CA 96 A0                     jp      z,.NoseYSmall
  85+ A06B              ;-- When noseY is large ------------------------ roofv_z = -(nosev_x * roofv_x + nosev_y * roofv_y) / nosev_z
  86+ A06B 3A 37 C0     .NoseYLarge:    ld      a,(UBnkrotmatNosevX+1)
  87+ A06E 57                           ld      d,a
  88+ A06F 3A 31 C0                     ld      a,(UBnkrotmatRoofvX+1)
  89+ A072 5F                           ld      e,a
  90+ A073 3A 39 C0                     ld      a,(UBnkrotmatNosevY+1)
  91+ A076 67                           ld      h,a
  92+ A077 3A 33 C0                     ld      a,(UBnkrotmatRoofvY+1)
  93+ A07A 6F                           ld      l,a
  94+ A07B 3A 3B C0                     ld      a,(UBnkrotmatNosevZ+1)
  95+ A07E 47                           ld      b,a
  96+ A07F CD D6 9F                     call    TidyCalc
  97+ A082 7A                           ld      a,d
  98+ A083 B3                           or      e
  99+ A084 CA 8F A0                     jp      z,.NoRoofZFlip
 100+ A087 3E 80                        ld      a,$80                   ; flip sign bit if not zero
 101+ A089 AA                           xor     d
 102+ A08A 57                           ld      d,a
 103+ A08B 3E 80                        ld      a,$80                   ; flip sign bit
 104+ A08D AA                           xor     d
 105+ A08E 57                           ld      d,a
 106+ A08F ED 53 34 C0  .NoRoofZFlip:   ld      (UBnkrotmatRoofvZ),de   ; write roofvz
 107+ A093 C3 BE A0                     jp      .NormaliseRoofv
 108+ A096              ;-- When noseY is large ------------------------ roofv_y = -(nosev_x * roofv_x + nosev_z * roofv_z) / nosev_y
 109+ A096 3A 37 C0     .NoseYSmall:    ld      a,(UBnkrotmatNosevX+1)
 110+ A099 57                           ld      d,a
 111+ A09A 3A 31 C0                     ld      a,(UBnkrotmatRoofvX+1)
 112+ A09D 5F                           ld      e,a
 113+ A09E 3A 3B C0                     ld      a,(UBnkrotmatNosevZ+1)
 114+ A0A1 67                           ld      h,a
 115+ A0A2 3A 35 C0                     ld      a,(UBnkrotmatRoofvZ+1)
 116+ A0A5 6F                           ld      l,a
 117+ A0A6 3A 39 C0                     ld      a,(UBnkrotmatNosevY+1)
 118+ A0A9 47                           ld      b,a
 119+ A0AA CD D6 9F                     call    TidyCalc
 120+ A0AD 7A                           ld      a,d
 121+ A0AE B3                           or      e
 122+ A0AF CA BA A0                     jp      z,.NoRoofYFlip
 123+ A0B2 3E 80                        ld      a,$80                   ; flip sign bit if not zero
 124+ A0B4 AA                           xor     d
 125+ A0B5 57                           ld      d,a
 126+ A0B6 3E 80                        ld      a,$80                   ; flip sign bit
 127+ A0B8 AA                           xor     d
 128+ A0B9 57                           ld      d,a
 129+ A0BA ED 53 32 C0  .NoRoofYFlip:   ld      (UBnkrotmatRoofvY),de   ; write roofvy
 130+ A0BE DD 21 30 C0  .NormaliseRoofv:ld      ix,UBnkrotmatRoofvX     ; now normalise roofv
 131+ A0C2 CD 06 9B                     call    NormaliseIXVector
 132+ A0C5              ; -- sidev_x = (nosev_z * roofv_y - nosev_y * roofv_z) / 96
 133+ A0C5 3A 3B C0     .CalcSidevX:    ld      a,(UBnkrotmatNosevZ+1)
 134+ A0C8 57                           ld      d,a
 135+ A0C9 3A 33 C0                     ld      a,(UBnkrotmatRoofvY+1)
 136+ A0CC 5F                           ld      e,a
 137+ A0CD 3A 39 C0                     ld      a,(UBnkrotmatNosevY+1)
 138+ A0D0 67                           ld      h,a
 139+ A0D1 3A 35 C0                     ld      a,(UBnkrotmatRoofvZ+1)
 140+ A0D4 6F                           ld      l,a
 141+ A0D5 CD 09 A0                     call    TidySide
 142+ A0D8 ED 53 2A C0                  ld      (UBnkrotmatSidevX),de   ; write sidevX
 143+ A0DC              ; -- sidev_y = (nosev_x * roofv_z - nosev_z * roofv_x) / 96
 144+ A0DC 3A 37 C0     .CalcSidevY:    ld      a,(UBnkrotmatNosevX+1)
 145+ A0DF 57                           ld      d,a
 146+ A0E0 3A 35 C0                     ld      a,(UBnkrotmatRoofvZ+1)
 147+ A0E3 5F                           ld      e,a
 148+ A0E4 3A 3B C0                     ld      a,(UBnkrotmatNosevZ+1)
 149+ A0E7 67                           ld      h,a
 150+ A0E8 3A 31 C0                     ld      a,(UBnkrotmatRoofvX+1)
 151+ A0EB 6F                           ld      l,a
 152+ A0EC CD 09 A0                     call    TidySide
 153+ A0EF ED 53 2C C0                  ld      (UBnkrotmatSidevY),de   ; write sidevX
 154+ A0F3              ; -- sidev_z = (nosev_y * roofv_x - nosev_x * roofv_y) / 96
 155+ A0F3 3A 39 C0     .CalcSidevZ:    ld      a,(UBnkrotmatNosevY+1)
 156+ A0F6 57                           ld      d,a
 157+ A0F7 3A 31 C0                     ld      a,(UBnkrotmatRoofvX+1)
 158+ A0FA 5F                           ld      e,a
 159+ A0FB 3A 37 C0                     ld      a,(UBnkrotmatNosevX+1)
 160+ A0FE 67                           ld      h,a
 161+ A0FF 3A 33 C0                     ld      a,(UBnkrotmatRoofvY+1)
 162+ A102 6F                           ld      l,a
 163+ A103 CD 09 A0                     call    TidySide
 164+ A106 ED 53 2E C0                  ld      (UBnkrotmatSidevZ),de   ; write sidevX
 165+ A10A                          IFDEF ROUND_ROLL_AND_PITCH
 166+ A10A ~            .ClearLowBytes: ld      hl,UBnkrotmatSidevX
 167+ A10A ~                            ZeroA
 168+ A10A ~                            ld      b,9
 169+ A10A ~            .WriteLoop:     ld      (hl),a
 170+ A10A ~                            inc     hl
 171+ A10A ~                            inc     hl
 172+ A10A ~                            djnz    .WriteLoop
 173+ A10A                          ENDIF
 174+ A10A C9                           ret
 175+ A10B
# file closed: ./Maths/asm_tidy.asm
 603  A10B                  ;INCLUDE "./Maths/Utilities/LL28AequAmul256DivD.asm"
 604  A10B                  ;INCLUDE "./Maths/Utilities/XAequMinusXAPplusRSdiv96-TIS1.asm"
 605  A10B
 606  A10B                  INCLUDE "./GameEngine/Tactics.asm"
# file opened: ./GameEngine/Tactics.asm
   1+ A10B
   2+ A10B                                      DEFINE TACTICSDEBUG 1
   3+ A10B              ;                       DEFINE ALWAYSANGRY 1
   4+ A10B              ;                        DEFINE TARGETDEBUG 1
   5+ A10B              MISSILEMAXPITCH         equ 3
   6+ A10B              MISSILEMINPITCH         equ -3
   7+ A10B              MISSILEMAXROLL          equ 3
   8+ A10B              MISSILEMINROLL          equ -3
   9+ A10B              ;Ship Tactics
  10+ A10B              ;ShipTypeNormal          equ 0
  11+ A10B              ;ShipTypeMissile         equ 1
  12+ A10B              ;ShipTypeStation         equ 2
  13+ A10B              ;ShipTypeJunk            equ 3
  14+ A10B              ;ShipTypeScoopable       equ 4         ; a sub set of junk
  15+ A10B              ; To be added
  16+ A10B              ;ShipTypeTargoid
  17+ A10B              ;ShipTypeHermit
  18+ A10B              ; Maybe add the followign with ai flags changing in memory shiptype
  19+ A10B              ;ShipTypePirate
  20+ A10B              ;ShipTypeBountyHunter
  21+ A10B              ;ShipTypeTrader
  22+ A10B              ;ShipType.....
  23+ A10B              ;ShipTypeMissionTypeA
  24+ A10B              ;ShipTypeMissionTypeB
  25+ A10B              ;ShipTypeMissionTypeETC
  26+ A10B              ;ShipTypeNoAI
  27+ A10B
  28+ A10B
  29+ A10B
  30+ A10B 39 A6 0D A3  ShipAIJumpTable:      DW    NormalAI,   MissileAIV3,  StationAI,  JunkAI,     ScoopableAI
  30+ A10F 32 A1 33 A1
  30+ A113 34 A1
  31+ A115 35 A1 36 A1                        DW    ThargoidAI, NoAI,       NoAI,       NoAI,       NoAI
  31+ A119 36 A1 36 A1
  31+ A11D 36 A1
  32+ A11F              ShipAiJumpTableMax:   EQU ($ - ShipAIJumpTable)/2
  33+ A11F
  34+ A11F
  35+ A11F
  36+ A11F              ;----------------------------------------------------------------------------------------------------------------------------------
  37+ A11F              ; Main entry point to tactics. Every time it will do a a tidy and the do AI logic
  38+ A11F              UpdateShip:             ;  call    DEBUGSETNODES ;       call    DEBUGSETPOS
  39+ A11F                                ;    break
  40+ A11F                                ;    ld       a,(TidyCounter)
  41+ A11F                                ;    ld       hl,
  42+ A11F                                ;     ld      hl,TidyCounter
  43+ A11F                                ;    dec     (hl)
  44+ A11F                                ; IFDEF USE_NORMALISE_IX
  45+ A11F                                ;    call     z,TidyVectorsIX
  46+ A11F                                ; ELSE
  47+ A11F                                ;    call     z,TidyUbnK  ;TODO SEE IF THIS IS AN ISSUE"
  48+ A11F                                ; ENDIF
  49+ A11F                                     ; This shoudl be a call nz to tidy *****ret     nz
  50+ A11F                                    ; ld      a,16
  51+ A11F                                    ; ld      (TidyCounter),a
  52+ A11F                                     ;call    TidyUbnK
  53+ A11F                                     ; add AI in here too
  54+ A11F                                      ;ld      a,(SelectedUniverseSlot)
  55+ A11F                                      ;cp      2
  56+ A11F                                      ;jp      nz,.SkipBreak
  57+ A11F                                      ;break
  58+ A11F 3A 4E C4     .SkipBreak:            ld       a,(ShipTypeAddr)
  59+ A122                                                 DISPLAY "TODO: capture duff jumps"
  60+ A122                                     ReturnIfAGTEusng ShipAiJumpTableMax              ; TODO capture duff jumps whilst debugging in case a new shjip type code is added
  60+ A122 FE 0A       >                        cp    ShipAiJumpTableMax
  60+ A124 D0          >                        ret	 nc
  61+ A125 21 0B A1                            ld       hl,ShipAIJumpTable
  62+ A128 ED 31                               add      hl,a
  63+ A12A ED 31                               add      hl,a
  64+ A12C 7E                                  ld       a,(hl)                                  ; contrary to the name
  65+ A12D 23                                  inc      hl                                      ; jp (hl) is really
  66+ A12E 66                                  ld       h,(hl)                                  ; jp hl
  67+ A12F 6F                                  ld       l,a                                     ;
  68+ A130 E9                                  jp       hl                                      ; Follow the AI Jump Table
  69+ A131 C9                                  ret                                              ; not needed as jp handles this
  70+ A132
  71+ A132
  72+ A132
  73+ A132              ; used  when no pre-checks are requrired, e.g. if forcing a space station from main loop
  74+ A132
  75+ A132
  76+ A132 C9           StationAI:              ret
  77+ A133 C9           JunkAI:                 ret
  78+ A134 C9           ScoopableAI:            ret
  79+ A135 C9           ThargoidAI:             ret
  80+ A136 C9           NoAI:                   ret
  81+ A137              ;----------------------------------------------------------------------------------------------------------------------------------
  82+ A137              CalculateAgression:     IFDEF   ALWAYSANGRY
  83+ A137 ~                                        jp  UltraHostile
  84+ A137                                      ENDIF
  85+ A137 3A 50 C4                             ld      a,(ShipAIFlagsAddr)
  86+ A13A 47                                   ld      b,a
  87+ A13B E6 02                                and     %00000010
  88+ A13D 20 20                                jr      nz,.UltraHostile
  89+ A13F 78                                   ld      a,b
  90+ A140 E6 F0                                and     %11110000                               ; if it can can anger a fighter bay then generally more hostile as implies its a large ship
  91+ A142 21 9C C0                             ld      hl,UBnKMissilesLeft                     ; more missiles more agression
  92+ A145 B6                                   or      (hl)
  93+ A146 47                                   ld      b,a
  94+ A147 3A 4F C4                             ld      a,(ShipNewBitsAddr)
  95+ A14A E6 4E                                and     %01001110                               ; We look at if its a bounty hunter, hostile already, pirate and cop
  96+ A14C B0                                   or      b
  97+ A14D 47                                   ld      b,a
  98+ A14E 3A 93 C0                             ld      a,(UBnKShipAggression)
  99+ A151                                      JumpIfALTNusng 64,.NotAlreadyAgressive
  99+ A151 FE 40       >                        cp      64
  99+ A153 DA 5A A1    >                        jp		c, .NotAlreadyAgressive
 100+ A156 78                                   ld      a,b
 101+ A157 F6 80                                or      %10000000                               ; if its already at least 64 agressive then likley to stay so
 102+ A159 47                                   ld      b,a
 103+ A15A 78           .NotAlreadyAgressive:   ld      a,b
 104+ A15B 32 93 C0                             ld      (UBnKShipAggression),a
 105+ A15E C9                                   ret
 106+ A15F 3E FF        .UltraHostile:          ld      a,$FF
 107+ A161 32 93 C0                             ld      (UBnKShipAggression),a
 108+ A164 C9                                   ret
 109+ A165              ;----------------------------------------------------------------------------------------------------------------------------------
 110+ A165              ; set angry if possible, if its an innocent then flag the space station to get angry
 111+ A165 3A 4F C4     MakeHostile:            ld      a,(ShipNewBitsAddr)                     ; Check bit 5 of newb flags
 112+ A168                                      ;break
 113+ A168                                      JumpIfMemEqNusng ShipTypeAddr, ShipTypeStation, .SetNewbHostile
 113+ A168 3A 4E C4    >                        ld  a,(ShipTypeAddr)
 113+ A16B FE 02       >                        cp  ShipTypeStation
 113+ A16D CA 8C A1    >                        jp  z,.SetNewbHostile
 114+ A170 E6 20        .ItsNotAStation:        and     ShipIsBystander                         ; check if space station present if its a bystander
 115+ A172 C4 C6 A1                             call    nz, SetStationHostile                   ; Set Space Station if present, Angry
 116+ A175                                      IsAIEnabled                                     ; get AI data
 116+ A175 21 94 C0    >                        ld      hl, UBnkaiatkecm
 116+ A178 CB 7E       >                        bit 	ShipAIEnabledBitNbr,(hl)
 117+ A17A C8                                   ret     z                                       ; if 0 then no AI attached so it can't get angry
 118+ A17B 4F                                   ld      c,a                                     ; Copy to c in case we need it later
 119+ A17C                                      SetMemToN UBnKAccel, 2                          ; set accelleration to 2 to speed up
 119+ A17C 3E 02       >                        ld      a,2
 119+ A17E 32 87 C0    >                        ld      (UBnKAccel),a
 120+ A181 CB 27                                sla     a                                       ; set pitch to 4
 121+ A183 32 89 C0                             ld      (UBnKRotZCounter),a                     ; .
 122+ A186 3A 50 C4                             ld      a,(ShipAIFlagsAddr)
 123+ A189                                      ReturnIfBitMaskClear ShipCanAnger
 123+ A189 E6 80       >                        and     ShipCanAnger
 123+ A18B C8          >                        ret     z
 124+ A18C CD 5B C6     .SetNewbHostile:        call    SetShipHostile
 125+ A18F C9                                   ret
 126+ A190
 127+ A190                          DISPLAY "TODO: Missile Did Hit Us"
 128+ A190              ;----------------------------------------------------------------------------------------------------------------------------------
 129+ A190 C9           MissileDidHitUs:        ret ; TODO
 130+ A191
 131+ A191              ;----------------------------------------------------------------------------------------------------------------------------------
 132+ A191              PlayerHitByMissile:     MMUSelectLayer1
 132+ A191 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 133+ A195 3E 05                                ld      a,L1ColourInkCyan
 134+ A197 CD B4 E0                             call    l1_set_border
 135+ A19A 3A 3D C0                             ld      a,(UBnKMissileBlastDamage)
 136+ A19D 47                                   ld      b,a                                     ; b = damage
 137+ A19E 3A 28 C0                             ld      a,(UBnKzsgn)
 138+ A1A1 E6 80                                and     $80
 139+ A1A3 20 0A                                jr      nz,.HitRear
 140+ A1A5 3A 53 82     .HitFront:              ld      a,(ForeShield)
 141+ A1A8 CD A0 64                             call    ApplyDamage
 142+ A1AB 32 53 82                             ld      (ForeShield),a
 143+ A1AE C9                                   ret
 144+ A1AF 3A 54 82     .HitRear:               ld      a,(AftShield)
 145+ A1B2 CD A0 64                             call    ApplyDamage
 146+ A1B5 32 54 82                             ld      (AftShield),a
 147+ A1B8                                                  DISPLAY "TODO: Set up blast radius"
 148+ A1B8 C9                                   ret; TODO , do hit set up blast radius etc
 149+ A1B9              ;----------------------------------------------------------------------------------------------------------------------------------
 150+ A1B9              MissileHitShipA:        MMUSelectLayer1
 150+ A1B9 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 151+ A1BD 3E 02                                ld      a,L1ColourInkRed
 152+ A1BF CD B4 E0                             call    l1_set_border
 153+ A1C2 CD DE C7                             call    UnivExplodeShip
 154+ A1C5                                                  DISPLAY "TODO:  hit ship do explosion"
 155+ A1C5 C9                                   ret; TODO hit ship do explosion, check for near by and if player is near and missile type logic, e.g. AP or HE
 156+ A1C6              ;----------------------------------------------------------------------------------------------------------------------------------
 157+ A1C6 CD 5B 85     SetStationHostile:      call    IsSpaceStationPresent                   ; only if present
 158+ A1C9 D8                                   ret     c
 159+ A1CA 3A 41 C0                             ld      a,(UbnKShipUnivBankNbr)                     ; save current bank
 160+ A1CD FD 67                                ld      iyh,a
 161+ A1CF                                      MMUSelectUniverseN 0                            ; space station is always 0
 161+ A1CF ED 91 56 46 >                     nextreg UniverseMMU,       BankUNIVDATA0+0
 162+ A1D3 CD 5B C6                             call    SetShipHostile
 163+ A1D6 FD 7C                                ld      a,iyh                                   ; get prev bank back
 164+ A1D8                                      MMUSelectUniverseA                              ;
 164+ A1D8 C6 46       >                     add    a,BankUNIVDATA0
 164+ A1DA ED 92 56    >                     nextreg UniverseMMU,       a
 165+ A1DD C9                                   ret
 166+ A1DE
 167+ A1DE              ;----------------------------------------------------------------------------------------------------------------------------------
 168+ A1DE              CheckMissileBlastInit:  ZeroA
 168+ A1DE AF          >                        xor a
 169+ A1DF 32 A4 81                             ld      (CurrentMissileCheck),a
 170+ A1E2 21 20 C0                             ld      hl,UBnKxlo                      ; Copy Blast Coordinates
 171+ A1E5 01 0C 00                             ld      bc,12                           ; and Damage stats
 172+ A1E8 11 AC 80                             ld      de,MissileXPos
 173+ A1EB ED B0                                ldir
 174+ A1ED                                      ZeroA                                   ; we have processd enque request
 174+ A1ED AF          >                        xor a
 175+ A1EE 32 45 C0                             ld      (UBnKMissleHitToProcess),a      ;
 176+ A1F1 CD 37 A2                             call    CheckIfBlastHitUs               ; If we are in Range
 177+ A1F4 DC 90 A1                             call    c, MissileDidHitUs              ; Then we get hit
 178+ A1F7 C9                                   ret
 179+ A1F8
 180+ A1F8              ;----------------------------------------------------------------------------------------------------------------------------------
 181+ A1F8              ; Check to see if missile is in range
 182+ A1F8              ;;ReadyfordeletionposttestCheckPointRange:        MACRO   ShipPos, ShipSign, MissilePos, MissileSign
 183+ A1F8              ;;Readyfordeletionposttest                        ld      a,(MissilePos)                      ; check X Coord
 184+ A1F8              ;;Readyfordeletionposttest                        ld      hl,(ShipSign)
 185+ A1F8              ;;Readyfordeletionposttest                        xor     (hl)
 186+ A1F8              ;;Readyfordeletionposttest                        and     SignOnly8Bit
 187+ A1F8              ;;Readyfordeletionposttest                        ld      hl,(ShipPos)
 188+ A1F8              ;;Readyfordeletionposttest                        ld      de,(MissilePos)
 189+ A1F8              ;;Readyfordeletionposttest                        jr      z,.SignsDiffernt
 190+ A1F8              ;;Readyfordeletionposttest.XSame:                 and     a
 191+ A1F8              ;;Readyfordeletionposttest                        sbc     hl,de                               ; distance = Ship X - Missile X
 192+ A1F8              ;;Readyfordeletionposttest                        JumpIfPositive      .CheckDiff              ; if result was -ve
 193+ A1F8              ;;Readyfordeletionposttest                        NegHL
 194+ A1F8              ;;Readyfordeletionposttest                        jp      .CheckDiff
 195+ A1F8              ;;Readyfordeletionposttest.SignsDiffernt:         add     hl,de
 196+ A1F8              ;;Readyfordeletionposttest                        ReturnIfNegative                            ; if we overflowed then return
 197+ A1F8              ;;Readyfordeletionposttest.CheckDiff:             ld      a,h                                 ; if we have an h outside blast raidus
 198+ A1F8              ;;Readyfordeletionposttest                        ReturnIfANotZero
 199+ A1F8              ;;Readyfordeletionposttest                        ld      a,l
 200+ A1F8              ;;Readyfordeletionposttest                        and     a
 201+ A1F8              ;;Readyfordeletionposttest                        ReturnIfAGTEMemusng   CurrentMissileBlastRange
 202+ A1F8              ;;Readyfordeletionposttest                        ENDM
 203+ A1F8              ;...................................................................
 204+ A1F8              ; We only do one test per loop for spreading the load of work
 205+ A1F8 3A A4 81     CheckMissileBlastLoop:  ld      a,(CurrentMissileCheck)
 206+ A1FB                                      ReturnIfAGTENusng   UniverseSlotListSize
 206+ A1FB FE 0C       >                        cp    UniverseSlotListSize
 206+ A1FD D0          >                        ret	 nc
 207+ A1FE FD 6F                                ld      iyl,a
 208+ A200 3C                                   inc     a                                   ; update for next slot so re can fast return on distance checks
 209+ A201 32 A4 81                             ld      (CurrentMissileCheck),a
 210+ A204                                      ReturnIfSlotAEmpty
 210+ A204 21 A6 81    >                        ld      hl,UniverseSlotList
 210+ A207 ED 31       >                        add     hl,a
 210+ A209 7E          >                        ld      a,(hl)
 210+ A20A 3C          >                        inc     a
 210+ A20B C8          >                        ret     z           ; if slot was ff inc would make it 0
 210+ A20C 3D          >                        dec     a           ; get original value back for later
 211+ A20D CD 5B 85                             call    IsSpaceStationPresent               ; If its a station its imune to missiles
 212+ A210 D8                                   ret     c                                   ; if we have a special mission to kill a staion then its type won't be space station for game logic
 213+ A211 3A 91 C0                             ld      a,(UBnKexplDsp)                     ; Don't explode a ship twice
 214+ A214 E6 20                                and     ShipExploding                       ;
 215+ A216                                      ReturnIfNotZero                             ;
 215+ A216 C0          >                        ret     nz
 216+ A217 3A CC 80                             ld      a,(CurrentMissileBlastRange)
 217+ A21A FD 67                                ld      iyh,a                               ; iyh = missile blast depending on type
 218+ A21C FD 7D        .CheckRange:            ld      a,iyl                               ; now page in universe data
 219+ A21E                                      MMUSelectUniverseA
 219+ A21E C6 46       >                     add    a,BankUNIVDATA0
 219+ A220 ED 92 56    >                     nextreg UniverseMMU,       a
 220+ A223 DD 21 20 C0                          ld      ix,UBnKxlo
 221+ A227 FD 21 AC 80                          ld      iy,MissileXPos
 222+ A22B                                      MMUSelectMathsBankedFns
 222+ A22B ED 91 50 66 >                     nextreg MathsBankedFnsMMU, BankMathsBankedFns
 222+ A22F CD B6 01       call CheckInCollisionRange
 223+ A232                                      ;CheckPointRange UBnKxlo, UBnKxsgn, MissileXPos, MissileXSgn  ; its a square but its good enough
 224+ A232                                      ;CheckPointRange UBnKylo, UBnKysgn, MissileYPos, MissileYSgn
 225+ A232                                      ;CheckPointRange UBnKzlo, UBnKzsgn, MissileZPos, MissileZSgn
 226+ A232 D0                                   ret     nc                                  ; no collision means no carry
 227+ A233 CD 8F C7                             call    ShipMissileBlast                    ; Ship hit by missile blast
 228+ A236 C9                                   ret                                         ; we are done
 229+ A237              ;...................................................................
 230+ A237 3A 3C C0     CheckIfBlastHitUs:      ld      a,(UBnKMissileBlastRange)
 231+ A23A 4F                                   ld      c,a
 232+ A23B C3 42 A2                             jp      MissileHitUsCheckPos
 233+ A23E              ;...................................................................
 234+ A23E 3A 3E C0     CheckIfMissileHitUs:    ld      a,(UBnKMissileDetonateRange)
 235+ A241 4F                                   ld      c,a
 236+ A242              ;...................................................................
 237+ A242 2A 20 C0     MissileHitUsCheckPos:   ld      hl, (UBnKxlo)                       ; to check for us collision
 238+ A245 ED 5B 23 C0                          ld      de, (UBnKylo)                       ; we can cheat as a missile will only ever be
 239+ A249 ED 4B 26 C0                          ld      bc, (UBnKzlo)                       ; 16 bit + sign bit in sign byte
 240+ A24D 7C                                   ld      a,h
 241+ A24E B2                                   or      d
 242+ A24F B0                                   or      b
 243+ A250              .PrepForNoHit:          ClearCarryFlag
 243+ A250 B7          >                        or a
 244+ A251                                      ReturnIfNotZero
 244+ A251 C0          >                        ret     nz
 245+ A252              .PrepForHit:            SetCarryFlag
 245+ A252 37          >                        scf
 246+ A253 C9                                   ret
 247+ A254
 248+ A254                                      ZeroA
 248+ A254 AF          >                        xor a
 249+ A255 B4                                   or      h
 250+ A256                                      ClearCarryFlag
 250+ A256 B7          >                        or a
 251+ A257                                      ReturnIfNotZero                             ; will return with carry clear if way far away
 251+ A257 C0          >                        ret     nz
 252+ A258 7D                                   ld      a,l
 253+ A259                                      ReturnIfAGTENusng    c                      ; return no carry if x far
 253+ A259 B9          >                        cp    c
 253+ A25A D0          >                        ret	 nc
 254+ A25B 2A 23 C0     .CheckY:                ld      hl,(UBnKylo)
 255+ A25E                                      ZeroA
 255+ A25E AF          >                        xor a
 256+ A25F B5                                   or      l
 257+ A260                                      ClearCarryFlag
 257+ A260 B7          >                        or a
 258+ A261                                      ReturnIfNotZero                             ; will return with carry clear if way far away
 258+ A261 C0          >                        ret     nz
 259+ A262 7D                                   ld      a,l
 260+ A263                                      ReturnIfAGTENusng    c                      ; return no carry if y far
 260+ A263 B9          >                        cp    c
 260+ A264 D0          >                        ret	 nc
 261+ A265 2A 26 C0     .CheckZ:                ld      hl,(UBnKzlo)
 262+ A268                                      ZeroA
 262+ A268 AF          >                        xor a
 263+ A269 B5                                   or      l
 264+ A26A                                      ClearCarryFlag
 264+ A26A B7          >                        or a
 265+ A26B                                      ReturnIfNotZero                             ; will return with carry clear if way far away
 265+ A26B C0          >                        ret     nz
 266+ A26C 7D                                   ld      a,l
 267+ A26D                                      ReturnIfAGTENusng    c                      ; return no carry if z far
 267+ A26D B9          >                        cp    c
 267+ A26E D0          >                        ret	 nc
 268+ A26F              .ItsAHit:               SetCarryFlag                                ; So must have hit
 268+ A26F 37          >                        scf
 269+ A270 C9                                   ret
 270+ A271
 271+ A271              SelectMissileBank:      MACRO
 272+ A271 ~                                    ld      a,iyh
 273+ A271 ~                                    MMUSelectUnivBankA
 274+ A271                                      ENDM
 275+ A271
 276+ A271              SelectTargetBank:       MACRO
 277+ A271 ~                                    ld      a,iyl
 278+ A271 ~                                    MMUSelectUnivBankA
 279+ A271                                      ENDM
 280+ A271
 281+ A271              ;...................................................................
 282+ A271              ; ... Copy of target data for missile calcs etc
 283+ A271                                      INCLUDE "./TacticsWorkingData.asm"
# file opened: ./GameEngine/./TacticsWorkingData.asm
   1++A271 00           TacticsTargetShip       DB 0
   2++A272 20           TacticsPad0A            DB " "
   3++A273 00           TacticsMissileBank      DB 0
   4++A274 00           TacticsTargetBank       DB 0
   5++A275 50 72 64 3E  TacticsPad0B            DB "Prd>"
   6++A279 00 00        TacticsDotProduct1      DS 2
   7++A27B 3E           TacticsPad0C            DB ">"
   8++A27C 00 00        TacticsDotProduct2      DS 2
   9++A27E 3E           TacticsPad0D            DB ">"
  10++A27F 00 00        TacticsDotProduct3      DS 2
  11++A281 4D 69 73 6C  TacticsPad1A            DB "MislX"
  11++A285 58
  12++A286 00 00 00     TacticsMissileX         DS 3
  13++A289 59           TacticsPad1B            DB "Y"
  14++A28A 00 00 00     TacticsMissileY         DS 3
  15++A28D 5A           TacticsPad1C            DB "Z"
  16++A28E 00 00 00     TacticsMissileZ         DS 3
  17++A291 4D 61 74 20  TcaticsPad2A            DB "Mat X"
  17++A295 58
  18++A296 20 59        TacticsPad2B            DB " Y"
  19++A298 20 5A        TacticsPad2C            DB " Z"
  20++A29A 00           TacticsRotMatX          DB 0
  21++A29B 00           TacticsToyMatXSign      DB 0
  22++A29C 00           TacticsRotMatY          DB 0
  23++A29D 00           TacticsToyMatYSign      DB 0
  24++A29E 00           TacticsRotMatZ          DB 0
  25++A29F 00           TacticsToyMatZSign      DB 0
  26++A2A0 20           TacticsPad2D            DB " "
  27++A2A1 54 61 72 67  TacticsPad3A            DB "Targ="
  27++A2A5 3D
  28++A2A6 00 00 00     TacticsTargetX          DS 3
  29++A2A9 00 00 00     TacticsTargetY          DS 3
  30++A2AC 00 00 00     TacticsTargetZ          DS 3
  31++A2AF 3D 20        TacticsPad3B            DB "= "
  32++A2B1 56 65 63 74  TacticsPad4A            DB "VectX"
  32++A2B5 58
  33++A2B6 00 00 00     TacticsVectorX:         DS 3
  34++A2B9 59           TacticsPad4B            DB "Y"
  35++A2BA 00 00 00     TacticsVectorY:         DS 3
  36++A2BD 5A           TacticsPad4C            DB "Z"
  37++A2BE 00 00 00     TacticsVectorZ:         DS 3
  38++A2C1 4E 6F 72 6D  TacticsPad5A            DB "NormX"
  38++A2C5 58
  39++A2C6 00 00        TacticsNormX:           DS 2
  40++A2C8 20 59        TacticsPad5B            DB " Y"
  41++A2CA 00 00        TacticsNormY:           DS 2
  42++A2CC 20 5A        TacticsPad5C            DB " Z"
  43++A2CE 00 00        TacticsNormZ:           DS 2
  44++A2D0 20           TacticsPad5D            DB " "
  45++A2D1 53 69 64 65  TacticsPad7A            DB "SideX"
  45++A2D5 58
  46++A2D6 00 00        TacticsSideX            DS 2
  47++A2D8 20 59        TacticsPad7B            DB " Y"
  48++A2DA 00 00        TacticsSideY            DS 2
  49++A2DC 20 5A        TacticsPad7C            DB " Z"
  50++A2DE 00 00        TacticsSideZ            DS 2
  51++A2E0 20 52 6F 6F  TacticsPad8A            DB " RoofX"
  51++A2E4 66 58
  52++A2E6 00 00        TacticsRoofX            DS 2
  53++A2E8 20 59        TacticsPad8B            DB " Y"
  54++A2EA 00 00        TacticsRoofY            DS 2
  55++A2EC 20 5A        TacticsPad8C            DB " Z"
  56++A2EE 00 00        TacticsRoofZ            DS 2
  57++A2F0 20 4E 6F 73  TacticsPad9A            DB " NoseX"
  57++A2F4 65 58
  58++A2F6 00 00        TacticsNoseX            DS 2
  59++A2F8 20 59        TacticsPad9B            DB " Y"
  60++A2FA 00 00        TacticsNoseY            DS 2
  61++A2FC 20 5A        TacticsPad9C            DB " Z"
  62++A2FE 00 00        TacticsNoseZ            DS 2
  63++A300 20           TacticsPad9D            DB " "
  64++A301 52 45 53 55  TacticsPadAA            DB "RESULT"
  64++A305 4C 54
  65++A307 00           TacticsRotX             DS 1
  66++A308 20           TacticsPadAB            DB " "
  67++A309 00           TacticsRotZ             DS 1
  68++A30A 20           TacticsPadAC            DB " "
  69++A30B 00           TacticsSpeed            DS 1
  70++A30C 20           TacticsPadAD            DB " "
  71++A30D
  72++A30D
# file closed: ./GameEngine/./TacticsWorkingData.asm
 284+ A30D                                      INCLUDE "../GameEngine/MissileAI.asm"
# file opened: ./GameEngine/../GameEngine/MissileAI.asm
   1++A30D                                      DEFINE MISSILEDEBUG 1
   2++A30D                                      DEFINE MISSILEDOHIT 1
   3++A30D
   4++A30D              MISSILEMAXACCEL         equ 3
   5++A30D              MISSILEMAXDECEL         equ -3
   6++A30D                                      ;DEFINE MISSILEBREAK
   7++A30D              ;.. Thsi version uses new kind logic
   8++A30D              ;... Now the tactics if current ship is the missile, when we enter this SelectedUniverseSlot holds slot of missile
   9++A30D              MissileAIV3:            ;ld      a,(ShipAIEnabled)
  10++A30D                                      ;ReturnOnBitClear a, ShipAIEnabledBitNbr
  11++A30D                                      IFDEF MISSILEDOHIT
  12++A30D                                          JumpIfMemTrue UBnKMissleHitToProcess, .ProcessMissileHit
  12++A30D 3A 45 C0    >                        ld      a,(UBnKMissleHitToProcess)
  12++A310 A7          >                        and     a
  12++A311 CA 77 A4    >                        jp      z, .ProcessMissileHit
  13++A314                                      ENDIF
  14++A314              .CheckForECM:           JumpIfMemNotZero ECMCountDown,.ECMIsActive  ; If ECM is running then kill the missile
  14++A314 3A CB 7E    >                        ld  a,(ECMCountDown)
  14++A317 A7          >                        and a
  14++A318 C2 80 A4    >                        jp  nz,.ECMIsActive
  15++A31B              .IsMissileHostile:      IsShipHostile                               ; is missle attacking us?
  15++A31B 3A 4F C4    >                        ld      a,(ShipNewBitsAddr)
  15++A31E E6 04       >                        and     ShipIsHostile
  16++A320                                      JumpIfZero .MissileTargetingShip            ; Missile is friendly then z is set else targetting us
  16++A320 CA 46 A3    >                        jp	z,.MissileTargetingShip
  17++A323 2A 20 C0     .MissileTargetingPlayer:ld      hl, (UBnKxlo)                       ; check if missile in range of us
  18++A326 3A 3E C0                             ld      a,(UBnKMissileDetonateRange)
  19++A329 4F                                   ld      c,a                                 ; c holds detonation range
  20++A32A CD 42 A2                             call    MissileHitUsCheckPos
  21++A32D D2 36 A3     .MissileNotHitUsYet:    jp      nc, .UpdateTargetingUsPos
  22++A330 CD 91 A1     .MissleHitUs:           call    PlayerHitByMissile
  23++A333 C3 80 A4                             jp      .ECMIsActive                        ; we use ECM logic to destroy missile which eqneues is
  24++A336 CD 0C AA     .UpdateTargetingUsPos:  call    SetPlayerAsTarget
  25++A339 CD E7 A9                             call    CopyPosToVector
  26++A33C 3A 97 81                             ld      a,(SelectedUniverseSlot)            ; we will use this quite a lot with next bank switching
  27++A33F C6 46                                add     a,BankUNIVDATA0                     ; pre calculate add to optimise
  28++A341 FD 67                                ld      iyh,a
  29++A343 C3 51 A4                             jp      .NormaliseDirection
  30++A346              ;--- Missile is targeting other ship
  31++A346 3A 97 81     .MissileTargetingShip:  ld      a,(SelectedUniverseSlot)            ; we will use this quite a lot with next bank switching
  32++A349 C6 46        .SaveMissileBank:       add     a,BankUNIVDATA0                     ; pre calculate add to optimise
  33++A34B FD 67                                ld      iyh,a
  34++A34D                                      IFDEF MISSILEDEBUG
  35++A34D 32 73 A2                                 ld  (TacticsMissileBank),a
  36++A350                                      ENDIF
  37++A350 3A 46 C0     .SaveTargetBank:        ld      a,(UBnKMissileTarget)               ; target will be used a lot too
  38++A353 C6 46                                add     a,BankUNIVDATA0                     ; pre calculate add to optimise
  39++A355 FD 6F                                ld      iyl,a                               ; save target
  40++A357                                      IFDEF MISSILEDEBUG
  41++A357 32 74 A2                                 ld  (TacticsTargetBank),a
  42++A35A                                      ENDIF
  43++A35A              .IsMissleTargetGone:    JumpIfSlotAEmpty    .ECMIsActive            ; if the target was blown up then detonate
  43++A35A 21 A6 81    >                        ld      hl,UniverseSlotList
  43++A35D ED 31       >                        add     hl,a
  43++A35F 7E          >                        ld      a,(hl)
  43++A360 3C          >                        inc     a
  43++A361 CA 80 A4    >                        jp      z,.ECMIsActive    ; if slot was ff inc would make it 0
  43++A364 3D          >                        dec     a           ; get original value back for later
  44++A365              ;... Note we don't have to check for impact as we already have a loop doing that
  45++A365              .SelectTargetShip:      SelectTargetBank
  45++A365 FD 7D       >                        ld      a,iyl
  45++A367             >                        MMUSelectUnivBankA
  45++A367 ED 92 56    >                     nextreg UniverseMMU,       a
  46++A36A              .IsShipExploding:       IsShipExploding                             ; check exploding status
  46++A36A 3A 94 C0    >                        ld      a,(UBnkaiatkecm)
  46++A36D E6 20       >                        and     ShipExploding
  47++A36F 28 08                                jr      z,.UpdateTargetingShipX             ; as if exploding then the missile will also explode
  48++A371              .ShipIsExploding:       SelectMissileBank                           ; get missile back into memory
  48++A371 FD 7C       >                        ld      a,iyh
  48++A373             >                        MMUSelectUnivBankA
  48++A373 ED 92 56    >                     nextreg UniverseMMU,       a
  49++A376 C3 80 A4                             jp      .ECMIsActive
  50++A379              ;--- At this point we already have the target banked in ready for calculating vector
  51++A379              ; Tactics vector = missile - target
  52++A379 ED 5B 20 C0  .UpdateTargetingShipX:  ld      de,(UBnKxlo)                        ; get target ship X
  53++A37D 3A 22 C0                             ld      a,(UBnKxsgn)                        ; and flip sign so we have missile - target
  54++A380                                      IFDEF MISSILEDEBUG
  55++A380 ED 53 A6 A2                              ld  (TacticsTargetX),de
  56++A384 32 A8 A2                                 ld  (TacticsTargetX+2),a
  57++A387                                      ENDIF
  58++A387                                      FlipSignBitA
  58++A387 EE 80       >                        xor     SignOnly8Bit
  59++A389 4F                                   ld      c,a                                 ; get target ship x sign but * -1 as we are subtracting
  60++A38A                                      SelectMissileBank
  60++A38A FD 7C       >                        ld      a,iyh
  60++A38C             >                        MMUSelectUnivBankA
  60++A38C ED 92 56    >                     nextreg UniverseMMU,       a
  61++A38F 2A 20 C0                             ld      hl,(UBnKxlo)                        ; get missile x
  62++A392 3A 22 C0                             ld      a,(UBnKxsgn)                        ; get missile x sign
  63++A395                                      IFDEF MISSILEDEBUG
  64++A395 22 86 A2                                 ld  (TacticsMissileX),hl
  65++A398 32 88 A2                                 ld  (TacticsMissileX+2),a
  66++A39B                                      ENDIF
  67++A39B 47                                   ld      b,a
  68++A39C CD 33 00                             call    ADDHLDESignBC                       ;AHL = BHL + CDE i.e. missile - target x
  69++A39F 22 B6 A2                             ld      (TacticsVectorX),hl
  70++A3A2 32 B8 A2                             ld      (TacticsVectorX+2),a
  71++A3A5              .UpdateTargetingShipY:  SelectTargetBank
  71++A3A5 FD 7D       >                        ld      a,iyl
  71++A3A7             >                        MMUSelectUnivBankA
  71++A3A7 ED 92 56    >                     nextreg UniverseMMU,       a
  72++A3AA ED 5B 23 C0                          ld      de,(UBnKylo)                        ; get target ship X
  73++A3AE 3A 25 C0                             ld      a,(UBnKysgn)
  74++A3B1                                      IFDEF MISSILEDEBUG
  75++A3B1 ED 53 A9 A2                              ld  (TacticsTargetY),de
  76++A3B5 32 AB A2                                 ld  (TacticsTargetY+2),a
  77++A3B8                                      ENDIF
  78++A3B8                                      FlipSignBitA
  78++A3B8 EE 80       >                        xor     SignOnly8Bit
  79++A3BA 4F                                   ld      c,a                                 ; get target ship x sign but * -1 as we are subtracting
  80++A3BB                                      SelectMissileBank
  80++A3BB FD 7C       >                        ld      a,iyh
  80++A3BD             >                        MMUSelectUnivBankA
  80++A3BD ED 92 56    >                     nextreg UniverseMMU,       a
  81++A3C0 2A 23 C0                             ld      hl,(UBnKylo)                        ; get missile x
  82++A3C3 3A 25 C0                             ld      a,(UBnKysgn)                        ; get missile x sign
  83++A3C6                                      IFDEF MISSILEDEBUG
  84++A3C6 22 8A A2                                 ld  (TacticsMissileY),hl
  85++A3C9 32 8C A2                                 ld  (TacticsMissileY+2),a
  86++A3CC                                      ENDIF
  87++A3CC 47                                   ld      b,a
  88++A3CD CD 33 00                             call    ADDHLDESignBC                       ;AHL = BHL + CDE i.e. missile - target x
  89++A3D0 22 BA A2                             ld      (TacticsVectorY),hl
  90++A3D3 32 BC A2                             ld      (TacticsVectorY+2),a
  91++A3D6              .UpdateTargetingShipZ:  SelectTargetBank
  91++A3D6 FD 7D       >                        ld      a,iyl
  91++A3D8             >                        MMUSelectUnivBankA
  91++A3D8 ED 92 56    >                     nextreg UniverseMMU,       a
  92++A3DB ED 5B 26 C0                          ld      de,(UBnKzlo)                        ; get target ship X
  93++A3DF 3A 28 C0                             ld      a,(UBnKzsgn)
  94++A3E2                                      IFDEF MISSILEDEBUG
  95++A3E2 ED 53 AC A2                              ld  (TacticsTargetZ),de
  96++A3E6 32 AE A2                                 ld  (TacticsTargetZ+2),a
  97++A3E9                                      ENDIF
  98++A3E9                                      FlipSignBitA
  98++A3E9 EE 80       >                        xor     SignOnly8Bit
  99++A3EB 4F                                   ld      c,a                                 ; get target ship x sign but * -1 as we are subtracting
 100++A3EC                                      SelectMissileBank
 100++A3EC FD 7C       >                        ld      a,iyh
 100++A3EE             >                        MMUSelectUnivBankA
 100++A3EE ED 92 56    >                     nextreg UniverseMMU,       a
 101++A3F1 2A 26 C0                             ld      hl,(UBnKzlo)                        ; get missile x
 102++A3F4 3A 28 C0                             ld      a,(UBnKzsgn)                        ; get missile x sign
 103++A3F7                                      IFDEF MISSILEDEBUG
 104++A3F7 22 8E A2                                 ld  (TacticsMissileZ),hl
 105++A3FA 32 90 A2                                 ld  (TacticsMissileZ+2),a
 106++A3FD                                      ENDIF
 107++A3FD
 108++A3FD 47                                   ld      b,a
 109++A3FE CD 33 00                             call    ADDHLDESignBC                       ;AHL = BHL + CDE i.e. missile - target x
 110++A401 22 BE A2                             ld      (TacticsVectorZ),hl
 111++A404 32 C0 A2                             ld      (TacticsVectorZ+2),a
 112++A407              ; by here missile in in memory and TacticsVector now holds distance
 113++A407              ; if or ABS all high bytes is <> 0
 114++A407              .CheckDistance:         IFDEF MISSILEDOHIT
 115++A407 2A B7 A2                                 ld      hl,(TacticsVectorX+1)              ; test if high bytes are set (value is assumed to be 24 bit, though calcs are only 16 so this is uneeded)
 116++A40A 7C                                       ld      a,h                                ; .
 117++A40B ED 5B BB A2                              ld      de,(TacticsVectorY+1)              ; .
 118++A40F B2                                       or      d                                  ; .
 119++A410 ED 4B BF A2                              ld      bc,(TacticsVectorZ+1)              ; .
 120++A414 B0                                       or      b                                  ; .
 121++A415                                          ClearSignBitA                              ; .
 121++A415 E6 7F       >                        and     SignMask8Bit
 122++A417                                          JumpIfNotZero       .FarAway               ; .
 122++A417 C2 26 A4    >                        jp	nz,.FarAway
 123++A41A B5                                       or      l                                    ; test for low byte bit 7, i.e high of 16 bit values
 124++A41B B3                                       or      e                                  ; .
 125++A41C B1                                       or      c                                  ; .
 126++A41D                                          JumpIfNotZero       .FarAway               ; .
 126++A41D C2 26 A4    >                        jp	nz,.FarAway
 127++A420                                      ELSE
 128++A420 ~                                        jp                  .FarAway
 129++A420                                      ENDIF
 130++A420              ; If we get here its close enough to detonate
 131++A420 3A 46 C0     .CloseMissileExplode:   ld      a,(UBnKMissileTarget)
 132++A423 C3 B9 A1                             jp      MissileHitShipA
 133++A426                          DISPLAY "TODO: far away ** TODO need to set memory read write on page 0"
 134++A426              .FarAway:               SelectTargetBank
 134++A426 FD 7D       >                        ld      a,iyl
 134++A428             >                        MMUSelectUnivBankA
 134++A428 ED 92 56    >                     nextreg UniverseMMU,       a
 135++A42B                                      JumpIfMemFalse      UBnKECMFitted, .NoECM                   ; if target has ECM and enough energy to use it
 135++A42B 3A 9A C0    >                        ld      a,(UBnKECMFitted)
 135++A42E A7          >                        and     a
 135++A42F C2 4C A4    >                        jp      nz, .NoECM
 136++A432                                      JumpIfMemLTNusng    UBnKEnergy,    ECMCounterMax, .NoECM    ; .
 136++A432 3A 98 C0    >                        ld      a,(UBnKEnergy)
 136++A435 FE 80       >                        cp      ECMCounterMax
 136++A437 DA 4C A4    >                        jp	  c,.NoECM
 137++A43A                                      JumpIfMemIsNotZero   ECMCountDown, .NoECM                ; . ECM is already active
 137++A43A 3A CB 7E    >                        ld      a,(ECMCountDown)
 137++A43D A7          >                        and     a
 137++A43E C2 4C A4    >                        jp	    nz,.NoECM
 138++A441 3A AD 7E     .TestIfUsingECM:        ld      a,(RandomSeed2)                                             ; if random < 16
 139++A444                                      JumpIfAGTENusng     16, .UpdateMissilePos                           ;   then fire ECM destroying missile
 139++A444 FE 10       >                        cp     16
 139++A446 D2 4C A4    >                        jp		nc,.UpdateMissilePos
 140++A449              ;. If we get here then target is still paged in to fire ECM
 141++A449 C3 83 C6     .ZeroPageFireECM:       jp      FireECM                                             ; with an implicit return
 142++A44C              ;                       implicit ret
 143++A44C              ;. If we get here then target is still paged in with no ECM
 144++A44C              .NoECM:
 145++A44C                                    ;;;         ** can do 16 bit maths as we can take teh view that once a object/space station is 24 bit value away then
 146++A44C                                    ;;;         ** targeting computer looses track and destructs missiles
 147++A44C              ;--- Now we can actually update the missile AI
 148++A44C              .UpdateMissilePos:      ;break
 149++A44C                                      SelectMissileBank
 149++A44C FD 7C       >                        ld      a,iyh
 149++A44E             >                        MMUSelectUnivBankA
 149++A44E ED 92 56    >                     nextreg UniverseMMU,       a
 150++A451                                      ;break
 151++A451                                      ;call    ORTHOGALISE
 152++A451              .NormaliseDirection:    IFDEF MISSILEBREAK
 153++A451 ~                                        ;break
 154++A451                                      ENDIF
 155++A451                                      MMUSelectMathsBankedFns
 155++A451 ED 91 50 66 >                     nextreg MathsBankedFnsMMU, BankMathsBankedFns
 156++A455 CD 81 9C                             call    NormalizeTactics                    ; Normalise vector down to 7 bit + sign byte (.TA19->TAS2)
 157++A458                                      IFDEF TACTICSDEBUG
 158++A458 CD 36 A9                                 call DebugTacticsCopy
 159++A45B                                      ENDIF
 160++A45B              .NegateDirection:       FlipSignMem TacticsVectorX+2                ; negate vector in XX15 so it points opposite direction
 160++A45B 3A B8 A2    >                        ld  a,(TacticsVectorX+2)
 160++A45E EE 80       >                        xor SignOnly8Bit
 160++A460 32 B8 A2    >                        ld  (TacticsVectorX+2),a
 161++A463                                      FlipSignMem TacticsVectorY+2                ; we have already negated the dot product above
 161++A463 3A BC A2    >                        ld  a,(TacticsVectorY+2)
 161++A466 EE 80       >                        xor SignOnly8Bit
 161++A468 32 BC A2    >                        ld  (TacticsVectorY+2),a
 162++A46B                                      FlipSignMem TacticsVectorZ+2                ; .
 162++A46B 3A C0 A2    >                        ld  a,(TacticsVectorZ+2)
 162++A46E EE 80       >                        xor SignOnly8Bit
 162++A470 32 C0 A2    >                        ld  (TacticsVectorZ+2),a
 163++A473 CD 8A A4                             call    SeekingLogic
 164++A476 C9                                   ret
 165++A477 3A A4 81     .ProcessMissileHit:     ld      a,(CurrentMissileCheck)
 166++A47A                                      ReturnIfAGTENusng UniverseSlotListSize  ; need to wait another loop
 166++A47A FE 0C       >                        cp    UniverseSlotListSize
 166++A47C D0          >                        ret	 nc
 167++A47D C3 DE A1     .ActivateNewExplosion:  jp  CheckMissileBlastInit               ; initialise
 168++A480                                      ; DUMMY RET get a free return by using jp
 169++A480 CD DE C7     .ECMIsActive:           call    UnivExplodeShip                 ; ECM detonates missile
 170++A483                                      SetMemTrue  UBnKMissleHitToProcess      ; Enque an explosion
 170++A483 AF          >                        xor     a
 170++A484 32 45 C0    >                        ld      (UBnKMissleHitToProcess),a
 171++A487 C3 77 A4                             jp      .ProcessMissileHit              ; lets see if we can enqueue now
 172++A48A                                      ; DUMMY RET get a free return as activenewexplosion does jp to init with a free ret
 173++A48A
 174++A48A CD 79 A9     SeekingLogic:           call    XX12EquTacticsDotNosev              ; SA = nose . XX15                           (     ->TAS3)
 175++A48D 32 79 A2                             ld      (TacticsDotProduct1),a              ; CNT = A (high byte of dot product)
 176++A490 3A B8 7F                             ld      a,(varS)                            ; get sign from dot product
 177++A493 32 7D A2                             ld      (TacticsDotProduct2+1),a            ; Note here its direction not dir
 178++A496 CD CF A9     .RoofDotProduct:        call    XX12EquTacticsDotRoofv              ; Now tran the roof for rotation
 179++A499 32 7C A2                             ld      (TacticsDotProduct2),a              ; so if its +ve then the roof is similar so pull up to head towards it
 180++A49C 3A B8 7F                             ld      a,(varS)                            ; .
 181++A49F 32 7D A2                             ld      (TacticsDotProduct2+1),a            ; Note here its direction not dir
 182++A4A2 CD AC A4                             call    SimplifiedShipPitchv3
 183++A4A5 CD D0 A4                             call    SimplifiedShipRollv3
 184++A4A8 CD FE A4                             call    SimplifiedShipSpeedv3
 185++A4AB C9                                   ret
 186++A4AC
 187++A4AC              SimplifiedShipPitchv3:  ;break
 188++A4AC 2A 7C A2                             ld      hl,(TacticsDotProduct2)            ; pitch counter sign = opposite sign to roofdir sign
 189++A4AF 7C                                   ld      a,h                                ; .
 190++A4B0 EE 80                                xor     $80                                ; .
 191++A4B2 E6 80                                and     $80                                ; .
 192++A4B4 67                                   ld      h,a                                ; h  = flipped sign
 193++A4B5 7D                                   ld      a,l                                ; a = value * 2
 194++A4B6 CB 27                                sla     a                                  ;
 195++A4B8                                      JumpIfAGTENusng 16, .skipPitchZero         ; if its > 16 then update pitch
 195++A4B8 FE 10       >                        cp     16
 195++A4BA D2 C6 A4    >                        jp		nc,.skipPitchZero
 196++A4BD                                      ZeroA                                      ; else we zero pitch but
 196++A4BD AF          >                        xor a
 197++A4BE B4                                   or      h                                  ; we need to retain the sign
 198++A4BF 32 89 C0                             ld      (UBnKRotZCounter),a                ; .
 199++A4C2                                      IFDEF MISSILEDEBUG
 200++A4C2 32 09 A3                                 ld  (TacticsRotZ),a
 201++A4C5                                      ENDIF
 202++A4C5 C9                                   ret
 203++A4C6 3E 02        .skipPitchZero:         ld      a,2
 204++A4C8 B4                                   or      h
 205++A4C9 32 89 C0                             ld      (UBnKRotZCounter),a
 206++A4CC                                      IFDEF MISSILEDEBUG
 207++A4CC 32 09 A3                                 ld  (TacticsRotZ),a
 208++A4CF                                      ENDIF
 209++A4CF C9                                   ret
 210++A4D0
 211++A4D0              ;Direct on dot product nose is $24
 212++A4D0              ; Position                  Pitch   Roll    Speed
 213++A4D0              ; Top left forwards         up      -ve     +
 214++A4D0              ; Top right forwards        up      +ve     +
 215++A4D0              ; Bottom left forwards      down    -ve     +
 216++A4D0              ; Bottom right forwards     down    +ve     +
 217++A4D0              ; Top left rear             up      -ve     -
 218++A4D0              ; Top right rear            up      +ve     -
 219++A4D0              ; Bottom left rear          down    -ve     -
 220++A4D0              ; Bottom right rear         down    +ve     -
 221++A4D0
 222++A4D0
 223++A4D0
 224++A4D0              SimplifiedShipRollv3:  ; ld      a,(UBnKRotXCounter)               ; get current roll
 225++A4D0                                     ; sla     a                                 ; * 2 to also abs
 226++A4D0                                     ; ReturnIfAGTENusng 32                      ; and so if >32 skip
 227++A4D0 CD D5 A9                             call    XX12EquTacticsDotSidev             ; calculate side dot protuct
 228++A4D3 32 7F A2                             ld      (TacticsDotProduct3),a             ; .
 229++A4D6 6F                                   ld      l,a                                ; .
 230++A4D7 3A B8 7F                             ld      a,(varS)                           ; .
 231++A4DA 32 80 A2                             ld      (TacticsDotProduct3+1),a           ; .
 232++A4DD 67                                   ld      h,a                                ; h = sign sidev
 233++A4DE 3A 7D A2                             ld      a,(TacticsDotProduct2+1)           ; get flipped pitch counter sign
 234++A4E1                                      ;xor     $80                               ; .
 235++A4E1                                      ;xor     h                                 ; b = flip against pitch sign
 236++A4E1                                      ;and     $80                               ; .
 237++A4E1                                      ;xor $80
 238++A4E1 47                                   ld      b,a                                ; b = roof product
 239++A4E2 7D                                   ld      a,l                                ; a = abs sidev  * 2
 240++A4E3 CB 27                                sla     a                                  ;
 241++A4E5                                      JumpIfAGTENusng 16,.skipRollZero           ;
 241++A4E5 FE 10       >                        cp     16
 241++A4E7 D2 F3 A4    >                        jp		nc,.skipRollZero
 242++A4EA                                      ZeroA                                      ; if its zoer then set rotx to zero
 242++A4EA AF          >                        xor a
 243++A4EB B0                                   or      b
 244++A4EC 32 88 C0                             ld      (UBnKRotXCounter),a
 245++A4EF                                      IFDEF MISSILEDEBUG
 246++A4EF 32 07 A3                                 ld  (TacticsRotX),a
 247++A4F2                                      ENDIF
 248++A4F2 C9                                   ret
 249++A4F3 3E 02        .skipRollZero:          ld      a,2
 250++A4F5 B4                                   or      h
 251++A4F6 A8                                   xor     b
 252++A4F7 32 88 C0                             ld      (UBnKRotXCounter),a
 253++A4FA                                      IFDEF MISSILEDEBUG
 254++A4FA 32 07 A3                                 ld  (TacticsRotX),a
 255++A4FD                                      ENDIF
 256++A4FD C9                                   ret
 257++A4FE
 258++A4FE 2A 79 A2     SimplifiedShipSpeedv3:  ld      hl,(TacticsDotProduct1)
 259++A501 7C                                   ld      a,h
 260++A502 A7                                   and     a
 261++A503 20 13                                jr      nz,.SlowDown
 262++A505 ED 5B 7C A2                          ld      de,(TacticsDotProduct2)             ; dot product is +ve so heading at each other
 263++A509 7D                                   ld      a,l
 264++A50A                                      JumpIfALTNusng  22,.SlowDown                                  ; nose dot product <
 264++A50A FE 16       >                        cp      22
 264++A50C DA 18 A5    >                        jp		c, .SlowDown
 265++A50F 3E 03        .Accelerate:            ld      a,3                                 ; else
 266++A511 32 87 C0                             ld      (UBnKAccel),a                       ;  accelleration = 3
 267++A514                                      IFDEF MISSILEDEBUG
 268++A514 32 0B A3                                 ld  (TacticsSpeed),a
 269++A517                                      ENDIF
 270++A517 C9                                   ret                                         ;  .
 271++A518              .SlowDown:              JumpIfALTNusng 18, .NoSpeedChange
 271++A518 FE 12       >                        cp      18
 271++A51A DA 26 A5    >                        jp		c, .NoSpeedChange
 272++A51D 3E FE        .Deccelerate:           ld      a,-2
 273++A51F 32 87 C0                             ld      (UBnKAccel),a
 274++A522                                      IFDEF MISSILEDEBUG
 275++A522 32 0B A3                                 ld  (TacticsSpeed),a
 276++A525                                      ENDIF
 277++A525 C9                                   ret
 278++A526              .NoSpeedChange:         ZeroA                                       ; else no change
 278++A526 AF          >                        xor a
 279++A527 32 87 C0                             ld      (UBnKAccel),a
 280++A52A                                      IFDEF MISSILEDEBUG
 281++A52A 32 0B A3                                 ld  (TacticsSpeed),a
 282++A52D                                      ENDIF
 283++A52D C9                                   ret
 284++A52E
 285++A52E
 286++A52E CD 6D A5     SimplifiedShipSpeedv3b:  call    GetDistance                         ;
 287++A531 7C                                   ld      a,h
 288++A532 A7                                   and     a
 289++A533 06 16                                ld      b,22
 290++A535 20 08                                jr      nz,.NotSlow
 291++A537 7D           .CloseSlowTest:         ld      a,l
 292++A538                                      JumpIfAGTENusng 30, .NotSlow
 292++A538 FE 1E       >                        cp     30
 292++A53A D2 3F A5    >                        jp		nc,.NotSlow
 293++A53D 06 3C                                ld      b,60
 294++A53F 2A 79 A2     .NotSlow:               ld      hl,(TacticsDotProduct1)             ; if nosedir is negative (pointing the wrong way)
 295++A542 7C                                   ld      a,h                                 ; or nosedir < 22 (very far off)
 296++A543 E6 80                                and     $80                                 ; do decelleration test
 297++A545 C2 56 A5                             jp      nz,.DecelTest                       ; .
 298++A548 7D                                   ld      a,l                                 ; .
 299++A549                                      JumpIfALTNusng b, .DecelTest                ; .
 299++A549 B8          >                        cp      b
 299++A54A DA 56 A5    >                        jp		c, .DecelTest
 300++A54D 3E 03        .Accelerate:            ld      a,3                                 ; else
 301++A54F 32 87 C0                             ld      (UBnKAccel),a                       ;  accelleration = 3
 302++A552                                      IFDEF MISSILEDEBUG
 303++A552 32 0B A3                                 ld  (TacticsSpeed),a
 304++A555                                      ENDIF
 305++A555 C9                                   ret                                         ;  .
 306++A556 7D           .DecelTest:             ld      a,l                                 ; if abs acelleration > 18
 307++A557                                      JumpIfAGTENusng 18 ,.Deccelerate             ;    decelerate by 2
 307++A557 FE 12       >                        cp     18
 307++A559 D2 64 A5    >                        jp		nc,.Deccelerate
 308++A55C              .NoSpeedChange:         ZeroA                                       ; else no change
 308++A55C AF          >                        xor a
 309++A55D 32 87 C0                             ld      (UBnKAccel),a
 310++A560                                      IFDEF MISSILEDEBUG
 311++A560 32 0B A3                                 ld  (TacticsSpeed),a
 312++A563                                      ENDIF
 313++A563 C9                                   ret
 314++A564 3E FE        .Deccelerate:           ld      a,-2
 315++A566 32 87 C0                             ld      (UBnKAccel),a
 316++A569                                      IFDEF MISSILEDEBUG
 317++A569 32 0B A3                                 ld  (TacticsSpeed),a
 318++A56C                                      ENDIF
 319++A56C C9                                   ret
 320++A56D
 321++A56D 2A B6 A2     GetDistance:            ld      hl,(TacticsVectorX)
 322++A570 ED 5B BA A2                          ld      de,(TacticsVectorY)
 323++A574 ED 4B BE A2                          ld      bc,(TacticsVectorZ)
 324++A578 7C                                   ld      a,h
 325++A579 E6 7F                                and     $7F
 326++A57B 67                                   ld      h,a
 327++A57C 78                                   ld      a,b
 328++A57D E6 7F                                and     $7F
 329++A57F 47                                   ld      b,a
 330++A580 7A                                   ld      a,d
 331++A581 E6 7F                                and     $7F
 332++A583 57                                   ld      d,a
 333++A584 09                                   add     hl,bc
 334++A585 19                                   add     hl,de
 335++A586                                      ShiftHLRight1
 335++A586 CB 3C       >			   srl h
 335++A588 CB 1D       >			   rr  l
 336++A58A                                      ShiftHLRight1
 336++A58A CB 3C       >			   srl h
 336++A58C CB 1D       >			   rr  l
 337++A58E C9                                   ret
 338++A58F
 339++A58F
# file closed: ./GameEngine/../GameEngine/MissileAI.asm
 285+ A58F                                      INCLUDE "../GameEngine/NormalAI.asm"
# file opened: ./GameEngine/../GameEngine/NormalAI.asm
   1++A58F               ;                       DEFINE DEBUGFORCEHOSTILE 1
   2++A58F
   3++A58F 00 00 00     NewLaunchUBnKX          DS 3
   4++A592 00 00 00     NewLaunchUBnKY          DS 3
   5++A595 00 00 00     NewLaunchUBnKZ          DS 3
   6++A598
   7++A598 00 00 00...  NewLaunchMatrix         DS 3*3*2    ; 3x3 matrix of 3 bytes
   8++A5AA 00           NewLaunchSpeed          DS 1
   9++A5AB 00           NewLaunchRotX           DS 1
  10++A5AC 00           NewLaunchRotZ           DS 1
  11++A5AD
  12++A5AD              NewLaunchDataBlockSize  equ (3*3) + (3*3*2)
  13++A5AD              ; ---------------------------------------------------------------------------------------------------------------------------------
  14++A5AD              ; a = y offset negative from center of ship
  15++A5AD 21 20 C0     CalcLaunchOffset:       ld      hl,UBnKxlo
  16++A5B0 11 8F A5                             ld      de,NewLaunchUBnKX
  17++A5B3 01 1B 00                             ld      bc,NewLaunchDataBlockSize
  18++A5B6 ED B0                                ldir
  19++A5B8 CB 27        .ApplyOffset:           sla     a
  20++A5BA CB 27                                sla     a
  21++A5BC FD 6F                                ld      iyl,a                          ; save pre calculated speed
  22++A5BE              .ApplyToX:              SpeedMulAxis    a, UBnkrotmatRoofvX     ; e =  ABS (nosev x hi) c = sign
  22++A5BE 5F          >                        ld      e,a
  22++A5BF 2A 30 C0    >                        ld      hl,(UBnkrotmatRoofvX)
  22++A5C2 7C          >                        ld      a,h
  22++A5C3             >                        ClearSignBitA
  22++A5C3 E6 7F       >                        and     SignMask8Bit
  22++A5C5 57          >                        ld      d,a
  22++A5C6 ED 30       >                        mul     de
  22++A5C8 7C          >                        ld      a,h
  22++A5C9             >                        SignBitOnlyA
  22++A5C9 E6 80       >                        and     SignOnly8Bit
  22++A5CB 47          >                        ld      b,a;ld      c,a
  22++A5CC 62          >                        ld      h,d;ld      e,d
  22++A5CD 0E 00       >                        ld      c,0;ld      d,0
  23++A5CF 78                                   ld      a,b
  24++A5D0 EE 80                                xor     $80
  25++A5D2 47                                   ld      b,a
  26++A5D3              .AddSpeedToX:           AddSpeedToVert  NewLaunchUBnKX          ; 24 bit maths
  26++A5D3 ED 5B 90 A5 >                        ld      de,(NewLaunchUBnKX+1)
  26++A5D7 3A 8F A5    >                        ld      a,(NewLaunchUBnKX)
  26++A5DA 6F          >                        ld      l,a
  26++A5DB CD 14 01    >                        call    AddBCHtoDELsigned               ; DEL = DEL + BCH
  26++A5DE 7D          >                        ld      a,l
  26++A5DF 32 8F A5    >                        ld      (NewLaunchUBnKX),a
  26++A5E2 ED 53 90 A5 >                        ld      (NewLaunchUBnKX+1),de
  27++A5E6              .ApplyToY:              SpeedMulAxis    iyl, UBnkrotmatRoofvY
  27++A5E6 FD 5D       >                        ld      e,iyl
  27++A5E8 2A 32 C0    >                        ld      hl,(UBnkrotmatRoofvY)
  27++A5EB 7C          >                        ld      a,h
  27++A5EC             >                        ClearSignBitA
  27++A5EC E6 7F       >                        and     SignMask8Bit
  27++A5EE 57          >                        ld      d,a
  27++A5EF ED 30       >                        mul     de
  27++A5F1 7C          >                        ld      a,h
  27++A5F2             >                        SignBitOnlyA
  27++A5F2 E6 80       >                        and     SignOnly8Bit
  27++A5F4 47          >                        ld      b,a;ld      c,a
  27++A5F5 62          >                        ld      h,d;ld      e,d
  27++A5F6 0E 00       >                        ld      c,0;ld      d,0
  28++A5F8 78                                   ld      a,b
  29++A5F9 EE 80                                xor     $80
  30++A5FB 47                                   ld      b,a
  31++A5FC              .AddSpeedToY:           AddSpeedToVert NewLaunchUBnKY           ; 24 bit maths
  31++A5FC ED 5B 93 A5 >                        ld      de,(NewLaunchUBnKY+1)
  31++A600 3A 92 A5    >                        ld      a,(NewLaunchUBnKY)
  31++A603 6F          >                        ld      l,a
  31++A604 CD 14 01    >                        call    AddBCHtoDELsigned               ; DEL = DEL + BCH
  31++A607 7D          >                        ld      a,l
  31++A608 32 92 A5    >                        ld      (NewLaunchUBnKY),a
  31++A60B ED 53 93 A5 >                        ld      (NewLaunchUBnKY+1),de
  32++A60F              .ApplyToZ:              SpeedMulAxis    iyl, UBnkrotmatRoofvZ
  32++A60F FD 5D       >                        ld      e,iyl
  32++A611 2A 34 C0    >                        ld      hl,(UBnkrotmatRoofvZ)
  32++A614 7C          >                        ld      a,h
  32++A615             >                        ClearSignBitA
  32++A615 E6 7F       >                        and     SignMask8Bit
  32++A617 57          >                        ld      d,a
  32++A618 ED 30       >                        mul     de
  32++A61A 7C          >                        ld      a,h
  32++A61B             >                        SignBitOnlyA
  32++A61B E6 80       >                        and     SignOnly8Bit
  32++A61D 47          >                        ld      b,a;ld      c,a
  32++A61E 62          >                        ld      h,d;ld      e,d
  32++A61F 0E 00       >                        ld      c,0;ld      d,0
  33++A621 78                                   ld      a,b
  34++A622 EE 80                                xor     $80
  35++A624 47                                   ld      b,a
  36++A625              .AddSpeedToZ:           AddSpeedToVert NewLaunchUBnKZ           ; 24 bit maths
  36++A625 ED 5B 96 A5 >                        ld      de,(NewLaunchUBnKZ+1)
  36++A629 3A 95 A5    >                        ld      a,(NewLaunchUBnKZ)
  36++A62C 6F          >                        ld      l,a
  36++A62D CD 14 01    >                        call    AddBCHtoDELsigned               ; DEL = DEL + BCH
  36++A630 7D          >                        ld      a,l
  36++A631 32 95 A5    >                        ld      (NewLaunchUBnKZ),a
  36++A634 ED 53 96 A5 >                        ld      (NewLaunchUBnKZ+1),de
  37++A638 C9                                   ret
  38++A639
  39++A639
  40++A639
  41++A639                                      ;DEFINE MISSILEBREAK
  42++A639              ;.. Thsi version uses new kind logic
  43++A639              ;... Now the tactics if current ship is the missile, when we enter this SelectedUniverseSlot holds slot of missile
  44++A639              NormalAI:               IsAIEnabled                             ; check if AI is enabled for ship (say if its had a shut down event it may be disabled)
  44++A639 21 94 C0    >                        ld      hl, UBnkaiatkecm
  44++A63C CB 7E       >                        bit 	ShipAIEnabledBitNbr,(hl)
  45++A63E C8                                   ret     z                               ; if z is set then bit was clear so return
  46++A63F CD 96 C6     .GetEnergy:             call    RechargeEnergy                  ; TA13 if enegery <= maxumum value for blueprint then recharge energy by 1
  47++A642                                      IsShipTrader
  47++A642 3A 4F C4    >                        ld      a,(ShipNewBitsAddr)
  47++A645 E6 01       >                        and     ShipIsTrader
  48++A647 20 06                                jr      nz, .NotATrader
  49++A649 CD EC 85     .ItsATrader:            call    doRandom
  50++A64C                                      ReturnIfALTNusng 100                    ; 61% chance do nothing
  50++A64C FE 64       >                        cp    100
  50++A64E D8          >                        ret	 c
  51++A64F                                      IFDEF DEBUGFORCEHOSTILE
  52++A64F ~                                            call SetShipHostile
  53++A64F ~                                            ld      a,(ShipNewBitsAddr)
  54++A64F ~                                            or      ShipIsBountyHunter
  55++A64F ~                                            ld      (ShipNewBitsAddr),a
  56++A64F                                      ENDIF
  57++A64F              .NotATrader:
  58++A64F 3A 4F C4     .IsItBountyHunter:      ld      a,(ShipNewBitsAddr)
  59++A652 E6 02                                and     ShipIsBountyHunter
  60++A654 20 08                                jr      nz, .NotBountyHunter
  61++A656              .CheckFIST:             CallIfMemGTENusng FugitiveInnocentStatus, 40, SetShipHostile ; if our FIST rating >= 40 set ship hostile (bit 2)
  61++A656 3A 67 80    >                        ld      a,(FugitiveInnocentStatus)
  61++A659 FE 28       >                        cp      40
  61++A65B D4 5B C6    >                        call    nc,SetShipHostile
  62++A65E              .NotBountyHunter:
  63++A65E              .CheckHostile:          IsShipHostile                           ; if ship is hostile z flag becomes nz
  63++A65E 3A 4F C4    >                        ld      a,(ShipNewBitsAddr)
  63++A661 E6 04       >                        and     ShipIsHostile
  64++A663 20 0B                                jr      nz,.ItsHostile                  ; .
  65++A665              ;.. If we get here its not hostile so will be heading towards planet or sun
  66++A665              ;.. If its locked on to a target (sun or planet) then it will proceed towards that,
  67++A665              ;.. if it reaches the sun it will jump
  68++A665              ;.. If it reaaches the planet it will then move to docking phase
  69++A665              .ItsNotHostile:         IsShipDocking                           ; if docking then do dockign algorithm
  69++A665 3A 4F C4    >                        ld      a,(ShipNewBitsAddr)
  69++A668 E6 10       >                        and     ShipIsDocking
  70++A66A C2 8B A8                             jp      nz, UnivDocking
  71++A66D C3 0D A8     .NotDocking:            jp      ShipHeadingToUnivBody
  72++A670                                      ; ret   Above jumps both include implicit returns
  73++A670
  74++A670 3A 4F C4     .ItsHostile:            ld      a,(ShipNewBitsAddr)
  75++A673 E6 08        .IsItPirate:            and     ShipIsPirate
  76++A675 20 12                                jr      nz,.NotAPirate
  77++A677              .IsItInSafeZone:        ;      if we are not in space station safe zone
  78++A677 3A 4F C4     .InSafeZone:            ld      a,(ShipNewBitsAddr)
  79++A67A F6 81                                or      Bit7Only | ShipIsTrader
  80++A67C CD 0C AA     .NotSafeZone:           call    SetPlayerAsTarget
  81++A67F CD E7 A9                             call    CopyPosToVector
  82++A682                                      MMUSelectMathsBankedFns
  82++A682 ED 91 50 66 >                     nextreg MathsBankedFnsMMU, BankMathsBankedFns
  83++A686 CD 81 9C                             call    NormalizeTactics
  84++A689              .NotAPirate:
  85++A689 3A 9E C0     .SpawnFighter:          ld      a,(UBnKFightersLeft)
  86++A68C A7                                   and     a
  87++A68D 28 0C                                jr      z,.NoFighters
  88++A68F CD EC 85     .CanSpawnFighter:       call    doRandom
  89++A692                                      JumpIfALTNusng 200, .NoFighters
  89++A692 FE C8       >                        cp      200
  89++A694 DA 9B A6    >                        jp		c, .NoFighters
  90++A697                                      ;break
  91++A697                                      ;SPAWN FIGHTER of Type UBnKFighterShipId at Y - 20 z - 20
  92++A697 21 9E C0                             ld      hl,UBnKFightersLeft             ;reduced figters left
  93++A69A 35                                   dec     (hl)
  94++A69B                                      ;inherits parent's ai angry
  95++A69B 3A AE 7E     .NoFighters:            ld      a,(RandomSeed3)                 ;if random >= 250
  96++A69E F6 68                                or      104                             ;set a noticable roll
  97++A6A0 3A 46 C4     .CheckEnergyLevels:     ld      a,(EnergyAddr)
  98++A6A3 47                                   ld      b,a
  99++A6A4 3A 98 C0                             ld      a,(UBnKEnergy)
 100++A6A7 CB 38                                srl     b                               ; max energy / 2
 101++A6A9                                      JumpIfAGTENusng b,.EnergyOverHalf       ; if ship max energy / 2 < current enerhy
 101++A6A9 B8          >                        cp     b
 101++A6AA D2 C8 A6    >                        jp		nc,.EnergyOverHalf
 102++A6AD CB 38                                srl     b
 103++A6AF                                      JumpIfAGTENusng b,.EnergyOverQuater     ; if ship max enery / 4 < current energy
 103++A6AF B8          >                        cp     b
 103++A6B0 D2 C8 A6    >                        jp		nc,.EnergyOverQuater
 104++A6B3 3A 4F C4                             ld      a,(ShipNewBitsAddr)
 105++A6B6 E6 80                                and     ShipHasEscapePod
 106++A6B8 28 0E                                jr      z, .NoEscapePod
 107++A6BA 3A AD 7E                             ld      a,(RandomSeed2)
 108++A6BD                                      JumpIfALTNusng 230,.NoEscapePod         ;if random >= 230
 108++A6BD FE E6       >                        cp      230
 108++A6BF DA C8 A6    >                        jp		c, .NoEscapePod
 109++A6C2 CD D5 C7                             call    UnivClearAI                     ;  disable ship AI hostily and ECM
 110++A6C5                                      ;ZeroA                                   ;  .
 111++A6C5 32 9A C0                             ld      (UBnKECMFitted),a               ;  .
 112++A6C8              .LaunchEscapePod:       ;break
 113++A6C8                                      ;            goto spawn escape pod
 114++A6C8              .EnergyOverHalf:
 115++A6C8              .EnergyOverQuater:
 116++A6C8 3A 9C C0     .NoEscapePod:           ld      a,(UBnKMissilesLeft)            ;      if missiles > 0
 117++A6CB 47                                   ld      b,a
 118++A6CC                                      JumpIfAIsZero .NoMissileLaunch
 118++A6CC A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
 118++A6CD CA E3 A6    >                        jp	    z, .NoMissileLaunch
 119++A6D0 3A AE 7E     .MissileLaunchTest:     ld      a,(RandomSeed3)                 ;         if random and 15 > = nbr missiles
 120++A6D3 E6 0F                                and     15
 121++A6D5                                      JumpIfALTNusng b, .NoMissileLaunch
 121++A6D5 B8          >                        cp      b
 121++A6D6 DA E3 A6    >                        jp		c, .NoMissileLaunch
 122++A6D9 3A CB 7E                             ld      a,(ECMCountDown)
 123++A6DC                                      JumpIfAIsNotZero  .NoMissileLaunch
 123++A6DC A7          >                        and     a
 123++A6DD C2 E3 A6    >                        jp	    nz,.NoMissileLaunch
 124++A6E0 C3 A7 61                             jp    LaunchEnemyMissile                ; jump out and return if firing missile
 125++A6E3 3A 21 C0     .NoMissileLaunch:       ld      a,(UBnKxhi)
 126++A6E6 2A 24 C0                             ld      hl,(UBnKyhi)
 127++A6E9 B6                                   or      (hl)
 128++A6EA 2A 27 C0                             ld      hl,(UBnKzhi)
 129++A6ED B6                                   or      (hl)
 130++A6EE                                      JumpIfAGTENusng 160, .TooFarForLaser   ; if in laser range (all highs order together < 160)
 130++A6EE FE A0       >                        cp     160
 130++A6F0 D2 17 A7    >                        jp		nc,.TooFarForLaser
 131++A6F3 CD 79 A9                             call    XX12EquTacticsDotNosev
 132++A6F6 47                                   ld      b,a
 133++A6F7 3A B8 7F                             ld      a,(varS)
 134++A6FA                                      JumpIfAIsNotZero .TooFarForLaser        ;   if dot product of ship < 160 i.e. > -32
 134++A6FA A7          >                        and     a
 134++A6FB C2 17 A7    >                        jp	    nz,.TooFarForLaser
 135++A6FE 78                                   ld      a,b                            ;    .
 136++A6FF                                      JumpIfALTNusng    32, .DoneLaserShot  ;    .
 136++A6FF FE 20       >                        cp      32
 136++A701 DA 12 A7    >                        jp		c, .DoneLaserShot
 137++A704              .FireLaser:             ;break                        ;      do fire laser logic (drain energy, add beam to lines as random line from ship to a random edge of screen)
 138++A704 78                                   ld      a,b ;; need to see if b gets corrupted by laser fire
 139++A705                                      JumpIfAEqNusng      35, .LaserHitPlayer
 139++A705 FE 23       >                        cp     35
 139++A707 CA 12 A7    >                        jp      z,.LaserHitPlayer
 140++A70A                                      JumpIfAEqNusng      36, .LaserHitPlayer
 140++A70A FE 24       >                        cp     36
 140++A70C CA 12 A7    >                        jp      z,.LaserHitPlayer
 141++A70F C3 12 A7     .LaserMissedPlayer:     jp      .DoneLaserShot
 142++A712              .LaserHitPlayer:        ;break ;         do direct hit logic
 143++A712 21 87 C0     .DoneLaserShot:         ld      hl,UBnKAccel                   ;      Half attacking ship's accelleration in byte 28 (dec so must be 0 1 or 2)
 144++A715 CB 26                                sla     (hl)
 145++A717              .TooFarForLaser:
 146++A717              .UpdateShip             ;break
 147++A717 CD 37 A1                             call    CalculateAgression              ; refresh aggression levels
 148++A71A 3A 27 C0                             ld      a,(UBnKzhi)
 149++A71D                                      JumpIfAGTENusng 3, .ShipFarAway
 149++A71D FE 03       >                        cp     3
 149++A71F D2 2D A7    >                        jp		nc,.ShipFarAway
 150++A722 3A 21 C0                             ld      a,(UBnKxhi)
 151++A725 2A 24 C0                             ld      hl,(UBnKyhi)
 152++A728 B6                                   or      (hl)
 153++A729 E6 FE                                and     %11111110
 154++A72B 28 26                                jr      z,.ShipTurnAway
 155++A72D 3A AD 7E     .ShipFarAway:           ld      a,(RandomSeed2)                     ; if random with bit 7 set < ship AI byte 32 flag
 156++A730                                      ;or      %10000000               ; .
 157++A730                                      JumpIfAGTEMemusng UBnKShipAggression, .ShipTurnAway
 157++A730 21 93 C0    >                        ld      hl,UBnKShipAggression
 157++A733 BE          >                        cp      (hl)
 157++A734 D2 53 A7    >                        jp		nc,.ShipTurnAway
 158++A737                                      FlipSignMem TacticsVectorX+2                ; negate vector in XX15 so it points opposite direction
 158++A737 3A B8 A2    >                        ld  a,(TacticsVectorX+2)
 158++A73A EE 80       >                        xor SignOnly8Bit
 158++A73C 32 B8 A2    >                        ld  (TacticsVectorX+2),a
 159++A73F                                      FlipSignMem TacticsVectorY+2                ; we have already negated the dot product above
 159++A73F 3A BC A2    >                        ld  a,(TacticsVectorY+2)
 159++A742 EE 80       >                        xor SignOnly8Bit
 159++A744 32 BC A2    >                        ld  (TacticsVectorY+2),a
 160++A747                                      FlipSignMem TacticsVectorZ+2                ; .
 160++A747 3A C0 A2    >                        ld  a,(TacticsVectorZ+2)
 160++A74A EE 80       >                        xor SignOnly8Bit
 160++A74C 32 C0 A2    >                        ld  (TacticsVectorZ+2),a
 161++A74F CD 57 A7                             call    ShipSeekingLogic            ;    seek as per missile
 162++A752 C9                                   ret
 163++A753 CD 57 A7     .ShipTurnAway:          call    ShipSeekingLogic            ; move away (ie.. as per missile but dot products not reversed)
 164++A756                                      ;              consider a random roll
 165++A756 C9                                   ret
 166++A757
 167++A757 CD 79 A9     ShipSeekingLogic:       call    XX12EquTacticsDotNosev              ; SA = nose . XX15                           (     ->TAS3)
 168++A75A 32 79 A2                             ld      (TacticsDotProduct1),a              ; CNT = A (high byte of dot product)
 169++A75D 3A B8 7F                             ld      a,(varS)                            ; get sign from dot product
 170++A760 32 7D A2                             ld      (TacticsDotProduct2+1),a            ; Note here its direction not dir
 171++A763 CD CF A9     .RoofDotProduct:        call    XX12EquTacticsDotRoofv              ; Now tran the roof for rotation
 172++A766 32 7C A2                             ld      (TacticsDotProduct2),a              ; so if its +ve then the roof is similar so pull up to head towards it
 173++A769 3A B8 7F                             ld      a,(varS)                            ; .
 174++A76C 32 7D A2                             ld      (TacticsDotProduct2+1),a            ; Note here its direction not dir
 175++A76F CD 79 A7                             call    ShipPitchv3
 176++A772 CD 9D A7                             call    ShipRollv3
 177++A775 CD CB A7                             call    ShipSpeedv3
 178++A778 C9                                   ret
 179++A779
 180++A779 2A 7C A2     ShipPitchv3:            ld      hl,(TacticsDotProduct2)            ; pitch counter sign = opposite sign to roofdir sign
 181++A77C 7C                                   ld      a,h                                ; .
 182++A77D EE 80                                xor     $80                                ; .
 183++A77F E6 80                                and     $80                                ; .
 184++A781 67                                   ld      h,a                                ; h  = flipped sign
 185++A782 7D                                   ld      a,l                                ; a = value * 2
 186++A783 CB 27                                sla     a                                  ;
 187++A785                                      JumpIfAGTENusng 16, .skipPitchZero         ; if its > 16 then update pitch
 187++A785 FE 10       >                        cp     16
 187++A787 D2 93 A7    >                        jp		nc,.skipPitchZero
 188++A78A                                      ZeroA                                      ; else we zero pitch but
 188++A78A AF          >                        xor a
 189++A78B B4                                   or      h                                  ; we need to retain the sign
 190++A78C 32 89 C0                             ld      (UBnKRotZCounter),a                ; .
 191++A78F                                      IFDEF MISSILEDEBUG
 192++A78F 32 09 A3                                 ld  (TacticsRotZ),a
 193++A792                                      ENDIF
 194++A792 C9                                   ret
 195++A793 3E 02        .skipPitchZero:         ld      a,2
 196++A795 B4                                   or      h
 197++A796 32 89 C0                             ld      (UBnKRotZCounter),a
 198++A799                                      IFDEF MISSILEDEBUG
 199++A799 32 09 A3                                 ld  (TacticsRotZ),a
 200++A79C                                      ENDIF
 201++A79C C9                                   ret
 202++A79D
 203++A79D CD D5 A9     ShipRollv3:             call    XX12EquTacticsDotSidev             ; calculate side dot protuct
 204++A7A0 32 7F A2                             ld      (TacticsDotProduct3),a             ; .
 205++A7A3 6F                                   ld      l,a                                ; .
 206++A7A4 3A B8 7F                             ld      a,(varS)                           ; .
 207++A7A7 32 80 A2                             ld      (TacticsDotProduct3+1),a           ; .
 208++A7AA 67                                   ld      h,a                                ; h = sign sidev
 209++A7AB 3A 7D A2                             ld      a,(TacticsDotProduct2+1)           ; get flipped pitch counter sign
 210++A7AE 47                                   ld      b,a                                ; b = roof product
 211++A7AF 7D                                   ld      a,l                                ; a = abs sidev  * 2
 212++A7B0 CB 27                                sla     a                                  ;
 213++A7B2                                      JumpIfAGTENusng 16,.skipRollZero           ;
 213++A7B2 FE 10       >                        cp     16
 213++A7B4 D2 C0 A7    >                        jp		nc,.skipRollZero
 214++A7B7                                      ZeroA                                      ; if its zoer then set rotx to zero
 214++A7B7 AF          >                        xor a
 215++A7B8 B0                                   or      b
 216++A7B9 32 88 C0                             ld      (UBnKRotXCounter),a
 217++A7BC                                      IFDEF MISSILEDEBUG
 218++A7BC 32 07 A3                                 ld  (TacticsRotX),a
 219++A7BF                                      ENDIF
 220++A7BF C9                                   ret
 221++A7C0 3E 02        .skipRollZero:          ld      a,2
 222++A7C2 B4                                   or      h
 223++A7C3 A8                                   xor     b
 224++A7C4 32 88 C0                             ld      (UBnKRotXCounter),a
 225++A7C7                                      IFDEF MISSILEDEBUG
 226++A7C7 32 07 A3                                 ld  (TacticsRotX),a
 227++A7CA                                      ENDIF
 228++A7CA C9                                   ret
 229++A7CB
 230++A7CB 2A 79 A2     ShipSpeedv3:            ld      hl,(TacticsDotProduct1)
 231++A7CE 7C                                   ld      a,h
 232++A7CF A7                                   and     a
 233++A7D0 20 13                                jr      nz,.SlowDown
 234++A7D2 ED 5B 7C A2                          ld      de,(TacticsDotProduct2)             ; dot product is +ve so heading at each other
 235++A7D6 7D                                   ld      a,l
 236++A7D7                                      JumpIfALTNusng  22,.SlowDown                                  ; nose dot product <
 236++A7D7 FE 16       >                        cp      22
 236++A7D9 DA E5 A7    >                        jp		c, .SlowDown
 237++A7DC 3E 03        .Accelerate:            ld      a,3                                 ; else
 238++A7DE 32 87 C0                             ld      (UBnKAccel),a                       ;  accelleration = 3
 239++A7E1                                      IFDEF MISSILEDEBUG
 240++A7E1 32 0B A3                                 ld  (TacticsSpeed),a
 241++A7E4                                      ENDIF
 242++A7E4 C9                                   ret                                         ;  .
 243++A7E5              .SlowDown:              JumpIfALTNusng 18, .NoSpeedChange
 243++A7E5 FE 12       >                        cp      18
 243++A7E7 DA F3 A7    >                        jp		c, .NoSpeedChange
 244++A7EA 3E FF        .Deccelerate:           ld      a,-1
 245++A7EC 32 87 C0                             ld      (UBnKAccel),a
 246++A7EF                                      IFDEF MISSILEDEBUG
 247++A7EF 32 0B A3                                 ld  (TacticsSpeed),a
 248++A7F2                                      ENDIF
 249++A7F2 C9                                   ret
 250++A7F3              .NoSpeedChange:         ZeroA                                       ; else no change
 250++A7F3 AF          >                        xor a
 251++A7F4 32 87 C0                             ld      (UBnKAccel),a
 252++A7F7                                      IFDEF MISSILEDEBUG
 253++A7F7 32 0B A3                                 ld  (TacticsSpeed),a
 254++A7FA                                      ENDIF
 255++A7FA C9                                   ret
 256++A7FB
 257++A7FB              ;-------------------------------------------------------------------
 258++A7FB              ; randomly set tactics to fly towards sun or planet
 259++A7FB              ; updates UBnKHeadingToPlanetOrSun, 1 = planet, 2 = Sun
 260++A7FB CD EC 85     SetTargetBody:          call    doRandom                            ; random number
 261++A7FE E6 01                                and     $01                                 ; if bit 1 is set then we can load that to planet and exit
 262++A800 C2 09 A8                             jp      nz,.SelectPlanet
 263++A803 3E 02        .SelectSun:             ld      a,2                                 ; else set it to 2 and mark as Sun
 264++A805 32 A1 C0                             ld      (UBnKHeadingToPlanetOrSun),a
 265++A808 C9                                   ret
 266++A809 32 A1 C0     .SelectPlanet:          ld      (UBnKHeadingToPlanetOrSun),a
 267++A80C C9                                   ret
 268++A80D
 269++A80D              ;-------------------------------------------------------------------
 270++A80D              ; Sort out target heading for ship
 271++A80D              ; if its 0 then randomly select sun or planet
 272++A80D              ; after this work otu target position and course changes requried
 273++A80D 3A A1 C0     ShipHeadingToUnivBody:  ld      a,(UBnKHeadingToPlanetOrSun)        ; do we have a preference?
 274++A810 A7                                   and     a
 275++A811 CC FB A7                             call    z,SetTargetBody                     ; no preference so we head randomly towards sun or planet then fall into movement tactics code
 276++A814 FE 01                                cp      1
 277++A816 C2 52 A8                             jp      nz, UpdateSunTracking               ; if its not 1 then must be sun
 278++A819              ;.. Update tracking to planet.......................................
 279++A819                          DISPLAY "TODO: Change this from move to planet to move to station as moving to planet is now superfluous"
 280++A819 CD F0 82     UpdatePlanetTracking:   call    SaveMMU6                            ; save current ship
 281++A81C                                      MMUSelectPlanet
 281++A81C ED 91 56 54 >                     nextreg PlanetMMU,         BankPlanetData
 282++A820                                          DISPLAY "TODO: Sort out targeting station not planet"
 283++A820 CD BB C5                             call    CopyPlanettoGeneral                 ; get planet position
 284++A823 CD 03 83                             call    RestoreMMU6                         ; get current Universe Object back
 285++A826 FD 21 87 80                          ld      iy,PlanetXPos
 286++A82A CD 1F 03                             call    VectorUnivtoIY                      ; get Univ Target vector to planet - ship position
 287++A82D              ;.. Get distance ...................................................
 288++A82D CD 57 03                             call    UnivDistanceToTarget                ; Determine if ship is in safe zone of planet,
 289++A830 DA 51 A8                             jp      c,.MoveToDockingPhase               ; if close enough to planet move to docking phase
 290++A833 CD BC 9B                             call    NormalseUnivTarget                  ; now in the target normalise it to work out direction
 291++A836              .NegateDirection:       FlipSignMem UBnKTargetXPosSgn                ; negate vector so it points opposite direction
 291++A836 3A 50 C0    >                        ld  a,(UBnKTargetXPosSgn)
 291++A839 EE 80       >                        xor SignOnly8Bit
 291++A83B 32 50 C0    >                        ld  (UBnKTargetXPosSgn),a
 292++A83E                                      FlipSignMem UBnKTargetXPosSgn                ; we have already negated the dot product above
 292++A83E 3A 50 C0    >                        ld  a,(UBnKTargetXPosSgn)
 292++A841 EE 80       >                        xor SignOnly8Bit
 292++A843 32 50 C0    >                        ld  (UBnKTargetXPosSgn),a
 293++A846                                      FlipSignMem UBnKTargetXPosSgn                ; .
 293++A846 3A 50 C0    >                        ld  a,(UBnKTargetXPosSgn)
 293++A849 EE 80       >                        xor SignOnly8Bit
 293++A84B 32 50 C0    >                        ld  (UBnKTargetXPosSgn),a
 294++A84E C3 8D A8                             jp      UnivSeekingLogic                     ;
 295++A851                                      ; implicit ret
 296++A851              ;.. If we are close enough moce to docking phase
 297++A851              .MoveToDockingPhase:    DISPLAY "TODO: Add in transitiion to docking phase"
 298++A851 C9                                   ret
 299++A852
 300++A852                                       DISPLAY "TODO: Sort out random directio etc if needed"
 301++A852              ;.. Close enough to start docking ..................................
 302++A852
 303++A852
 304++A852 CD F0 82     UpdateSunTracking:      call    SaveMMU6
 305++A855                                      MMUSelectSun
 305++A855 ED 91 56 53 >                     nextreg SunMMU,            BankSunData
 306++A859 CD 49 C7                             call    CopySuntoGeneral                    ; get sun position
 307++A85C CD 03 83                             call    RestoreMMU6                         ; get current Universe Object back
 308++A85F FD 21 93 80                          ld      iy,SunXPos
 309++A863 CD 1F 03                             call    VectorUnivtoIY                      ; get Univ Target vector to planet - ship position
 310++A866 CD 57 03                             call    UnivDistanceToTarget                ; Determine if ship is in safe zone of planet,
 311++A869 DA 8C A8                             jp      c,UnivMoveToJump                    ; if close enough to sun then jump (i.e. destrouy object but use flash of light)
 312++A86C CD BC 9B                             call    NormalseUnivTarget                  ; now in teh target normalise it to work out direction
 313++A86F              .NegateDirection:       FlipSignMem UBnKTargetXPosSgn                ; negate vector so it points opposite direction
 313++A86F 3A 50 C0    >                        ld  a,(UBnKTargetXPosSgn)
 313++A872 EE 80       >                        xor SignOnly8Bit
 313++A874 32 50 C0    >                        ld  (UBnKTargetXPosSgn),a
 314++A877                                      FlipSignMem UBnKTargetXPosSgn                ; we have already negated the dot product above
 314++A877 3A 50 C0    >                        ld  a,(UBnKTargetXPosSgn)
 314++A87A EE 80       >                        xor SignOnly8Bit
 314++A87C 32 50 C0    >                        ld  (UBnKTargetXPosSgn),a
 315++A87F                                      FlipSignMem UBnKTargetXPosSgn                ; .
 315++A87F 3A 50 C0    >                        ld  a,(UBnKTargetXPosSgn)
 315++A882 EE 80       >                        xor SignOnly8Bit
 315++A884 32 50 C0    >                        ld  (UBnKTargetXPosSgn),a
 316++A887 C3 8D A8                             jp      UnivSeekingLogic                     ;
 317++A88A C9                                   ret
 318++A88B
 319++A88B                                          DISPLAY "TODO: Sort out docking"
 320++A88B C9           UnivDocking:            ret
 321++A88C
 322++A88C              UnivMoveToJump:         DISPLAY "TODO: Add flash of light jump logic into ships. similar to explosion but just a star of random lines and no kill score"
 323++A88C C9                                   ret
 324++A88D
 325++A88D CD 67 03     UnivSeekingLogic:       call    TacticsDotNosev                     ; TacticsVarResult = nose . Target Vector                           (     ->TAS3)
 326++A890 32 59 C0                             ld      ( UBnKTargetDotProduct1),a              ; CNT = A (high byte of dot product)
 327++A893 3A B8 7F                             ld      a,(varS)                            ; get sign from dot product
 328++A896 32 5C C0                             ld      ( UBnKTargetDotProduct2+1),a            ; Note here its direction not dir
 329++A899 CD CF A9     .RoofDotProduct:        call    XX12EquTacticsDotRoofv              ; Now tran the roof for rotation
 330++A89C 32 7C A2                             ld      (TacticsDotProduct2),a              ; so if its +ve then the roof is similar so pull up to head towards it
 331++A89F 3A B8 7F                             ld      a,(varS)                            ; .
 332++A8A2 32 5C C0                             ld      ( UBnKTargetDotProduct2+1),a            ; Note here its direction not dir
 333++A8A5              ;.. Update facing and speed ........................................
 334++A8A5 CD 75 C8                             call    UnivPitchToTarget
 335++A8A8 CD 93 C8                             call    UnivRollToTarget
 336++A8AB CD BB C8                             call    UnivSpeedToTarget
 337++A8AE C9                                   ret
 338++A8AF
 339++A8AF
 340++A8AF              ;;;ShipPitchv2:  ;break
 341++A8AF              ;;;                        ld      hl,(TacticsDotProduct2)            ; pitch counter sign = opposite sign to roofdir sign
 342++A8AF              ;;;                        ld      a,h                                ; .
 343++A8AF              ;;;                        xor     $80                                ; .
 344++A8AF              ;;;                        and     $80                                ; .
 345++A8AF              ;;;                        ld      h,a                                ; h  = flipped sign
 346++A8AF              ;;;                        ld      a,l                                ; a = value * 2
 347++A8AF              ;;;                        sla     a                                  ;
 348++A8AF              ;;;                        JumpIfAGTENusng 16, .skipPitchZero         ; if its > 16 then update pitch
 349++A8AF              ;;;                        ZeroA                                      ; else we zero pitch but
 350++A8AF              ;;;                        or      h                                  ; we need to retain the sign
 351++A8AF              ;;;                        ld      (UBnKRotZCounter),a                ; .
 352++A8AF              ;;;                        IFDEF MISSILEDEBUG
 353++A8AF              ;;;                            ld  (TacticsRotZ),a
 354++A8AF              ;;;                        ENDIF
 355++A8AF              ;;;                        ret
 356++A8AF              ;;;.skipPitchZero:         ld      a,3
 357++A8AF              ;;;                        or      h
 358++A8AF              ;;;                        ld      (UBnKRotZCounter),a
 359++A8AF              ;;;                        IFDEF MISSILEDEBUG
 360++A8AF              ;;;                            ld  (TacticsRotZ),a
 361++A8AF              ;;;                        ENDIF
 362++A8AF              ;;;                        ret
 363++A8AF
 364++A8AF
 365++A8AF              ;;;ShipRollv2:             ld      a,(UBnKRotXCounter)
 366++A8AF              ;;;                        and     $7F
 367++A8AF              ;;;                        cp      16
 368++A8AF              ;;;                        ret     z
 369++A8AF              ;;;                        call    XX12EquTacticsDotSidev             ; calculate side dot protuct
 370++A8AF              ;;;                        ld      (TacticsDotProduct3),a             ; .
 371++A8AF              ;;;                        ld      l,a                                ; .
 372++A8AF              ;;;                        ld      a,(varS)                           ; .
 373++A8AF              ;;;                        ld      (TacticsDotProduct3+1),a           ; .
 374++A8AF              ;;;                        ld      h,a                                ; h = sign sidev
 375++A8AF              ;;;                        ld      a,(TacticsDotProduct2+1)           ; get flipped pitch counter sign
 376++A8AF              ;;;                        ld      b,a                                ; b = roof product
 377++A8AF              ;;;                        ld      a,l                                ; a = abs sidev  * 2
 378++A8AF              ;;;                        sla     a                                  ;
 379++A8AF              ;;;                        JumpIfAGTENusng 16,.skipRollZero           ;
 380++A8AF              ;;;                        ZeroA                                      ; if its zoer then set rotx to zero
 381++A8AF              ;;;                        or      b
 382++A8AF              ;;;                        ld      (UBnKRotXCounter),a
 383++A8AF              ;;;                        IFDEF MISSILEDEBUG
 384++A8AF              ;;;                            ld  (TacticsRotX),a
 385++A8AF              ;;;                        ENDIF
 386++A8AF              ;;;                        ret
 387++A8AF              ;;;.skipRollZero:          ld      a,3
 388++A8AF              ;;;                        or      h
 389++A8AF              ;;;                        xor     b
 390++A8AF              ;;;                        ld      (UBnKRotXCounter),a
 391++A8AF              ;;;                        IFDEF MISSILEDEBUG
 392++A8AF              ;;;                            ld  (TacticsRotX),a
 393++A8AF              ;;;                        ENDIF
 394++A8AF              ;;;                        ret
 395++A8AF              ;;;
 396++A8AF              ;;;ShipSpeedv2:            ld      hl,(TacticsDotProduct1)
 397++A8AF              ;;;                        ld      a,h
 398++A8AF              ;;;                        and     a
 399++A8AF              ;;;                        jr      nz,.SlowDown
 400++A8AF              ;;;                        ld      de,(TacticsDotProduct2)             ; dot product is +ve so heading at each other
 401++A8AF              ;;;                        ld      a,l
 402++A8AF              ;;;                        JumpIfALTNusng  22,.SlowDown                                  ; nose dot product <
 403++A8AF              ;;;.Accelerate:            ld      a,2                                 ; else
 404++A8AF              ;;;                        ld      (UBnKAccel),a                       ;  accelleration = 3
 405++A8AF              ;;;                        IFDEF MISSILEDEBUG
 406++A8AF              ;;;                            ld  (TacticsSpeed),a
 407++A8AF              ;;;                        ENDIF
 408++A8AF              ;;;                        ret                                         ;  .
 409++A8AF              ;;;.SlowDown:              JumpIfALTNusng 18, .NoSpeedChange
 410++A8AF              ;;;.Deccelerate:           ld      a,-1
 411++A8AF              ;;;                        ld      (UBnKAccel),a
 412++A8AF              ;;;                        IFDEF MISSILEDEBUG
 413++A8AF              ;;;                            ld  (TacticsSpeed),a
 414++A8AF              ;;;                        ENDIF
 415++A8AF              ;;;                        ret
 416++A8AF              ;;;.NoSpeedChange:         ZeroA                                       ; else no change
 417++A8AF              ;;;                        ld      (UBnKAccel),a
 418++A8AF              ;;;                        IFDEF MISSILEDEBUG
 419++A8AF              ;;;                            ld  (TacticsSpeed),a
 420++A8AF              ;;;                        ENDIF
 421++A8AF              ;;;                        ret
 422++A8AF              ;;;
 423++A8AF              ;;;
 424++A8AF              ;;;
 425++A8AF              ;;;RAT2 equ    4           ; roll pitch threshold
 426++A8AF              ;;;RAT  equ    3           ; magnitude of counter
 427++A8AF              ;;;CNT2 equ    22          ; angle for ship slowdown
 428++A8AF              ;;;
 429++A8AF              ;;;
 430++A8AF              ;;;ShipPitch:              ld      hl,(TacticsDotProduct2)            ; pitch counter sign = opposite sign to roofdir sign
 431++A8AF              ;;;                        ld      a,h                                ; .
 432++A8AF              ;;;                        xor     $80                                ; .
 433++A8AF              ;;;                        and     $80                                ; .
 434++A8AF              ;;;                        ld      h,a                                ; h  = flipped sign
 435++A8AF              ;;;                        ld      a,l                                ; a = value * 2
 436++A8AF              ;;;                        sla     a                                  ;
 437++A8AF              ;;;                        JumpIfAGTENusng RAT2, .skipPitchZero         ; if its > 16 then update pitch
 438++A8AF              ;;;                        ZeroA                                      ; else we zero pitch but
 439++A8AF              ;;;                        or      h                                  ; we need to retain the sign
 440++A8AF              ;;;                        ld      (UBnKRotZCounter),a                ; .
 441++A8AF              ;;;                        IFDEF MISSILEDEBUG
 442++A8AF              ;;;                            ld  (TacticsRotZ),a
 443++A8AF              ;;;                        ENDIF
 444++A8AF              ;;;                        ret
 445++A8AF              ;;;.skipPitchZero:         ld      a,l
 446++A8AF              ;;;                        or      h
 447++A8AF              ;;;                        ld      (UBnKRotZCounter),a
 448++A8AF              ;;;                        IFDEF MISSILEDEBUG
 449++A8AF              ;;;                            ld  (TacticsRotZ),a
 450++A8AF              ;;;                        ENDIF
 451++A8AF              ;;;                        ret
 452++A8AF              ;;;
 453++A8AF              ;;;
 454++A8AF              ;;;                        ;
 455++A8AF              ;;;ShipRoll:               call    XX12EquTacticsDotSidev             ; calculate side dot protuct
 456++A8AF              ;;;                        ld      (TacticsDotProduct3),a             ; .
 457++A8AF              ;;;                        ld      l,a                                ; .
 458++A8AF              ;;;                        ld      a,(varS)                           ; .
 459++A8AF              ;;;                        ld      (TacticsDotProduct3+1),a           ; .
 460++A8AF              ;;;                        ld      h,a                                ; h = sign sidev
 461++A8AF              ;;;                        ld      a,(TacticsDotProduct2+1)           ; get flipped pitch counter sign
 462++A8AF              ;;;                        ld      b,a                                ; b = roof product
 463++A8AF              ;;;                        ld      a,l                                ; a = abs sidev  * 2
 464++A8AF              ;;;                        sla     a                                  ;
 465++A8AF              ;;;                        JumpIfAGTENusng RAT2,.skipRollZero           ;
 466++A8AF              ;;;                        ZeroA                                      ; if its zoer then set rotx to zero
 467++A8AF              ;;;                        or      b
 468++A8AF              ;;;                        ld      (UBnKRotXCounter),a
 469++A8AF              ;;;                        IFDEF MISSILEDEBUG
 470++A8AF              ;;;                            ld  (TacticsRotX),a
 471++A8AF              ;;;                        ENDIF
 472++A8AF              ;;;                        ret
 473++A8AF              ;;;.skipRollZero:          ld      a,1
 474++A8AF              ;;;                        or      h
 475++A8AF              ;;;                        xor     b
 476++A8AF              ;;;                        ld      (UBnKRotXCounter),a
 477++A8AF              ;;;                        IFDEF MISSILEDEBUG
 478++A8AF              ;;;                            ld  (TacticsRotX),a
 479++A8AF              ;;;                        ENDIF
 480++A8AF              ;;;                        ret
 481++A8AF              ;;;
 482++A8AF              ;;;ShipSpeed:              ld      hl,(TacticsDotProduct1)
 483++A8AF              ;;;                        ld      a,h
 484++A8AF              ;;;                        and     a
 485++A8AF              ;;;                        jr      nz,.SlowDown
 486++A8AF              ;;;                        ld      de,(TacticsDotProduct2)             ; dot product is +ve so heading at each other
 487++A8AF              ;;;                        ld      a,l
 488++A8AF              ;;;                        JumpIfALTNusng  22,.SlowDown                                  ; nose dot product <
 489++A8AF              ;;;.Accelerate:            ld      a,3                                 ; else
 490++A8AF              ;;;                        ld      (UBnKAccel),a                       ;  accelleration = 3
 491++A8AF              ;;;                        IFDEF MISSILEDEBUG
 492++A8AF              ;;;                            ld  (TacticsSpeed),a
 493++A8AF              ;;;                        ENDIF
 494++A8AF              ;;;                        ret                                         ;  .
 495++A8AF              ;;;.SlowDown:              JumpIfALTNusng 18, .NoSpeedChange
 496++A8AF              ;;;.Deccelerate:           ld      a,-1
 497++A8AF              ;;;                        ld      (UBnKAccel),a
 498++A8AF              ;;;                        IFDEF MISSILEDEBUG
 499++A8AF              ;;;                            ld  (TacticsSpeed),a
 500++A8AF              ;;;                        ENDIF
 501++A8AF              ;;;                        ret
 502++A8AF              ;;;.NoSpeedChange:         ZeroA                                       ; else no change
 503++A8AF              ;;;                        ld      (UBnKAccel),a
 504++A8AF              ;;;                        IFDEF MISSILEDEBUG
 505++A8AF              ;;;                            ld  (TacticsSpeed),a
 506++A8AF              ;;;                        ENDIF
 507++A8AF              ;;;                        ret
 508++A8AF
# file closed: ./GameEngine/../GameEngine/NormalAI.asm
 286+ A8AF
 287+ A8AF              ; On Entry A = TacticsDotProduct2 sign (i.e. roof direction)
 288+ A8AF              ; on exit a == new roll
 289+ A8AF EE 80        calcNPitch:             xor     SignOnly8Bit                    ; c = sign flipped of dot product only
 290+ A8B1 E6 80                                and     SignOnly8Bit                    ; .
 291+ A8B3 4F                                   ld      c,a                             ; . (varT in effect)
 292+ A8B4 F6 03                                or      MISSILEMAXPITCH                 ; a = flipped sign max pitch
 293+ A8B6 3A 89 C0                             ld      a,(UBnKRotZCounter)             ; b = abs (currentz pitch)
 294+ A8B9 C9                                   ret
 295+ A8BA
 296+ A8BA E6 7F                                and     SignMask8Bit                    ; . which will initially be 0
 297+ A8BC 47                                   ld      b,a                             ; .
 298+ A8BD 3A 7C A2                             ld      a,(TacticsDotProduct2)          ; a = abs roof dot product
 299+ A8C0                                      JumpIfALTNusng MISSILEMAXPITCH+1, .calcNPitch2    ; if a >= roll threshold
 299+ A8C0 FE 04       >                        cp      MISSILEMAXPITCH+1
 299+ A8C2 DA CF A8    >                        jp		c, .calcNPitch2
 300+ A8C5 78                                   ld      a,b
 301+ A8C6 E6 80                                and     SignOnly8Bit
 302+ A8C8                                      ;jr      z,.NPitchPositive
 303+ A8C8                                     ; ld      a,
 304+ A8C8 3E 03                                ld      a,MISSILEMAXPITCH                         ;    z rot = z rot * dot product flipped sign
 305+ A8CA B1                                   or      c                               ;    i.e. zrot = current magnitude but dot product sign flipped
 306+ A8CB 32 89 C0                             ld      (UBnKRotZCounter),a             ;    .
 307+ A8CE C9                                   ret                                     ; else (a LT current abs z)
 308+ A8CF B1           .calcNPitch2:           or      c                               ;     rot z = dot product with sign flipped
 309+ A8D0 32 89 C0                             ld      (UBnKRotZCounter),a             ;
 310+ A8D3 C9                                   ret                                     ;
 311+ A8D4
 312+ A8D4 3A 89 C0     calcNRoll:              ld      a,(UBnKRotZCounter)
 313+ A8D7 E6 80                                and     SignOnly8Bit
 314+ A8D9 EE 80                                xor     SignOnly8Bit                    ; flip sign of dot product
 315+ A8DB F6 05                                or      5
 316+ A8DD 32 88 C0                             ld      (UBnKRotXCounter),a
 317+ A8E0 C9                                   ret
 318+ A8E1
 319+ A8E1 4F                                   ld      c,a
 320+ A8E2 F6 03                                or      MISSILEMAXPITCH
 321+ A8E4 3A 88 C0                             ld      a,(UBnKRotXCounter)
 322+ A8E7 C9                                   ret
 323+ A8E8
 324+ A8E8
 325+ A8E8
 326+ A8E8 E6 7F                                and     SignMask8Bit                    ; get ABS value
 327+ A8EA 47                                   ld      b,a
 328+ A8EB 3A 7C A2                             ld      a,(TacticsDotProduct2)          ; now we have the dot product abs value
 329+ A8EE                                      JumpIfALTNusng MISSILEMAXROLL+1, .calcNRoll2
 329+ A8EE FE 04       >                        cp      MISSILEMAXROLL+1
 329+ A8F0 DA FA A8    >                        jp		c, .calcNRoll2
 330+ A8F3 3E 03                                ld      a,MISSILEMAXROLL
 331+ A8F5 B1                                   or      c
 332+ A8F6 32 88 C0                             ld      (UBnKRotXCounter),a
 333+ A8F9 C9                                   ret
 334+ A8FA B1           .calcNRoll2:            or      c                               ;     rot z = dot product with sign flipped
 335+ A8FB 32 88 C0                             ld      (UBnKRotXCounter),a
 336+ A8FE C9                                   ret
 337+ A8FF
 338+ A8FF
 339+ A8FF 21 2B C0     CopyRotSideToTacticsMat:ld      hl,UBnkrotmatSidevX+1
 340+ A902 C3 0E A9                             jp      CopyRotmatToTacticsMat
 341+ A905
 342+ A905 21 37 C0     CopyRotNoseToTacticsMat:ld      hl,UBnkrotmatNosevX+1
 343+ A908 C3 0E A9                             jp      CopyRotmatToTacticsMat
 344+ A90B
 345+ A90B 21 31 C0     CopyRotRoofToTacticsMat:ld      hl,UBnkrotmatRoofvX+1
 346+ A90E              ; Coy rotation matrix high byte to trans rot mat, strip off sign and separate to rotmat byte 2
 347+ A90E 11 9A A2     CopyRotmatToTacticsMat: ld      de,TacticsRotMatX
 348+ A911 7E                                   ld      a,(hl)              ; matrix high byte of x
 349+ A912 47                                   ld      b,a
 350+ A913 E6 7F                                and     SignMask8Bit
 351+ A915 12                                   ld      (de),a              ; set rot mat value
 352+ A916 13                                   inc     de
 353+ A917 78                                   ld      a,b
 354+ A918 E6 80                                and     SignOnly8Bit
 355+ A91A 12                                   ld      (de),a              ; set rot mat sign
 356+ A91B 13                                   inc     de                  ; move to next rot mat element
 357+ A91C 23                                   inc     hl
 358+ A91D 23                                   inc     hl                  ; matrix high byte of y
 359+ A91E 7E           .processYElement:       ld      a,(hl)              ; matrix high byte of y
 360+ A91F 47                                   ld      b,a
 361+ A920 E6 7F                                and     SignMask8Bit
 362+ A922 12                                   ld      (de),a              ; set rot mat value
 363+ A923 13                                   inc     de
 364+ A924 78                                   ld      a,b
 365+ A925 E6 80                                and     SignOnly8Bit
 366+ A927 12                                   ld      (de),a              ; set rot mat sign
 367+ A928 13                                   inc     de                  ; move to next rot mat element
 368+ A929 23                                   inc     hl
 369+ A92A 23                                   inc     hl                  ; matrix high byte of z
 370+ A92B 7E           .ProcessZElement:       ld      a,(hl)              ; matrix high byte of z
 371+ A92C 47                                   ld      b,a
 372+ A92D E6 7F                                and     SignMask8Bit
 373+ A92F 12                                   ld      (de),a              ; set rot mat value
 374+ A930 13                                   inc     de
 375+ A931 78                                   ld      a,b
 376+ A932 E6 80                                and     SignOnly8Bit
 377+ A934 12                                   ld      (de),a              ; set rot mat sign
 378+ A935 C9                                   ret
 379+ A936
 380+ A936                                      IFDEF TACTICSDEBUG
 381+ A936              DebugTacticsCopy:
 382+ A936 2A 2A C0                             ld      hl,(UBnkrotmatSidevX)
 383+ A939 ED 5B 2C C0                          ld      de,(UBnkrotmatSidevY)
 384+ A93D ED 4B 2E C0                          ld      bc,(UBnkrotmatSidevZ)
 385+ A941 22 D6 A2                             ld      (TacticsSideX),hl
 386+ A944 ED 53 DA A2                          ld      (TacticsSideY),de
 387+ A948 ED 43 DE A2                          ld      (TacticsSideZ),bc
 388+ A94C
 389+ A94C 2A 30 C0                             ld      hl,(UBnkrotmatRoofvX)
 390+ A94F ED 5B 32 C0                          ld      de,(UBnkrotmatRoofvY)
 391+ A953 ED 4B 34 C0                          ld      bc,(UBnkrotmatRoofvZ)
 392+ A957 22 E6 A2                             ld      (TacticsRoofX),hl
 393+ A95A ED 53 EA A2                          ld      (TacticsRoofY),de
 394+ A95E ED 43 EE A2                          ld      (TacticsRoofZ),bc
 395+ A962
 396+ A962 2A 36 C0                             ld      hl,(UBnkrotmatNosevX)
 397+ A965 ED 5B 38 C0                          ld      de,(UBnkrotmatNosevY)
 398+ A969 ED 4B 3A C0                          ld      bc,(UBnkrotmatNosevZ)
 399+ A96D 22 F6 A2                             ld      (TacticsNoseX),hl
 400+ A970 ED 53 FA A2                          ld      (TacticsNoseY),de
 401+ A974 ED 43 FE A2                          ld      (TacticsNoseZ),bc
 402+ A978
 403+ A978 C9                                   ret
 404+ A979                                      ENDIF
 405+ A979                  DISPLAY "TODO: Remove all this as its moved to maths banked fns"
 406+ A979              ;TacticsVarResult        DW 0
 407+ A979 CD 05 A9     XX12EquTacticsDotNosev: call    CopyRotNoseToTacticsMat
 408+ A97C 21 9A A2     XX12EquTacticsDotHL:    ld      hl,TacticsRotMatX; UBnkTransmatNosevX    ; ROTMATX HI
 409+ A97F 7E           .CalcXValue:            ld      a,(hl)                              ; DE = RotMatX & Vect X
 410+ A980 5F                                   ld      e,a                                 ; .
 411+ A981 3A B6 A2                             ld      a,(TacticsVectorX)                  ; .
 412+ A984 57                                   ld      d,a                                 ; .
 413+ A985 ED 30                                mul                                         ; .
 414+ A987 7A                                   ld      a,d                                 ; S = A = Hi (RotMatX & Vect X)
 415+ A988 32 B8 7F                             ld      (varS),a                            ; .
 416+ A98B 23                                   inc     hl                                  ; move to sign byte
 417+ A98C 3A B8 A2     .CalcXSign:             ld      a,(TacticsVectorX+2)                ; B  = A = Sign VecX xor sign RotMatX
 418+ A98F AE                                   xor     (hl)                                ; .
 419+ A990 47                                   ld      b,a                                 ; .
 420+ A991 23           .MoveToY:               inc     hl                                  ; Move on to Y component
 421+ A992 7E           .CalcYValue:            ld      a,(hl)                              ; D = 0, E = Hi (RotMatY & Vect Y)
 422+ A993 5F                                   ld      e,a                                 ; .
 423+ A994 3A BA A2                             ld      a,(TacticsVectorY)                  ; .
 424+ A997 57                                   ld      d,a                                 ; .
 425+ A998 ED 30                                mul     de                                  ; .
 426+ A99A 5A                                   ld      e,d                                 ; .
 427+ A99B 16 00                                ld      d,0                                 ; .
 428+ A99D 23                                   inc     hl                                  ; move to sign byte
 429+ A99E 3A BC A2     .CalcYSign:             ld      a,(TacticsVectorY+2)                ; c = sign of y_sign * sidev_y
 430+ A9A1 AE                                   xor     (hl)                                ;
 431+ A9A2 4F                                   ld      c,a                                 ;
 432+ A9A3 23           .MoveToZ:               inc     hl                                  ; Move on to Z component
 433+ A9A4 E5           .AddXandY:              push    hl                                  ; but save HL as we need that
 434+ A9A5 3A B8 7F                             ld      a,(varS)                            ; hl = Hi (RotMatX & Vect X) b= sign
 435+ A9A8 26 00                                ld      h,0                                 ; de = Hi (RotMatY & Vect Y) c= sign
 436+ A9AA 6F                                   ld      l,a                                 ;
 437+ A9AB CD 33 00                             call    ADDHLDESignBC                       ; a(sign) hl = sum
 438+ A9AE 47                                   ld      b,a                                 ; b = sign of result
 439+ A9AF 22 59 03                             ld      (TacticsVarResult),hl               ; save sub in TacticsVarResult
 440+ A9B2 E1           .CalcZValue:            pop     hl                                  ; get back to the rotation mat z
 441+ A9B3 7E                                   ld      a,(hl)                              ; D = 0, E = Hi (RotMatZ & Vect Z)
 442+ A9B4 5F                                   ld      e,a                                 ; .
 443+ A9B5 3A BE A2                             ld      a,(TacticsVectorZ)                  ; .
 444+ A9B8 57                                   ld      d,a                                 ; .
 445+ A9B9 ED 30                                mul     de                                  ; .
 446+ A9BB 5A                                   ld      e,d                                 ; .
 447+ A9BC 16 00                                ld      d,0                                 ; .
 448+ A9BE 23                                   inc     hl                                  ; move to sign byte
 449+ A9BF 3A C0 A2     .CalcZSign:             ld      a,(TacticsVectorZ+2)
 450+ A9C2 AE                                   xor     (hl)
 451+ A9C3 4F                                   ld      c,a                                 ; Set C to the sign of z_sign * sidev_z
 452+ A9C4 2A 59 03                             ld      hl, (TacticsVarResult)              ; CHL = x + y, BDE = z products
 453+ A9C7 CD 33 00                             call    ADDHLDESignBC                       ; so AHL = X y z products
 454+ A9CA 32 B8 7F                             ld      (varS),a                            ; for backwards compatibility
 455+ A9CD 7D                                   ld      a,l                                  ; .
 456+ A9CE C9                                   ret
 457+ A9CF
 458+ A9CF CD 0B A9     XX12EquTacticsDotRoofv: call    CopyRotRoofToTacticsMat
 459+ A9D2 C3 7C A9                             jp      XX12EquTacticsDotHL
 460+ A9D5
 461+ A9D5 CD FF A8     XX12EquTacticsDotSidev: call    CopyRotSideToTacticsMat
 462+ A9D8 C3 7C A9                             jp      XX12EquTacticsDotHL
 463+ A9DB
 464+ A9DB 21 20 C0     CopyToTargetVector:     ld      hl,UBnKxlo
 465+ A9DE 11 A6 A2                             ld      de,TacticsTargetX
 466+ A9E1 01 09 00                             ld      bc,9
 467+ A9E4 ED B0                                ldir
 468+ A9E6 C9                                   ret
 469+ A9E7
 470+ A9E7              ; Copies 24 bit XYZ Vector to tactics vectors
 471+ A9E7 2A 20 C0     CopyPosToVector:        ld      hl,(UBnKxlo)
 472+ A9EA 3A 22 C0                             ld      a,(UBnKxsgn)
 473+ A9ED                                      ;xor     $80
 474+ A9ED 22 B6 A2                             ld      (TacticsVectorX),hl
 475+ A9F0 32 B8 A2                             ld      (TacticsVectorX+2),a
 476+ A9F3
 477+ A9F3 2A 23 C0     .CopyY24Bit:            ld      hl,(UBnKylo)
 478+ A9F6 3A 25 C0                             ld      a,(UBnKysgn)
 479+ A9F9                                      ;xor     $80
 480+ A9F9 22 BA A2                             ld      (TacticsVectorY),hl
 481+ A9FC 32 BC A2                             ld      (TacticsVectorY+2),a
 482+ A9FF
 483+ A9FF 2A 26 C0     .CopyZ24Bit:            ld      hl,(UBnKzlo)
 484+ AA02 3A 28 C0                             ld      a,(UBnKzsgn)
 485+ AA05                                      ;xor     $80
 486+ AA05 22 BE A2                             ld      (TacticsVectorZ),hl
 487+ AA08 32 C0 A2                             ld      (TacticsVectorZ+2),a
 488+ AA0B C9                                   ret
 489+ AA0C
 490+ AA0C              SetPlayerAsTarget:      ZeroA
 490+ AA0C AF          >                        xor a
 491+ AA0D 21 A6 A2                             ld      hl,TacticsTargetX
 492+ AA10 06 09                                ld      b, 3*3
 493+ AA12 77           .ZeroLoop:              ld      (hl),a                              ; player is always at 0,0,0
 494+ AA13 23                                   inc     hl
 495+ AA14 10 FC                                djnz    .ZeroLoop
 496+ AA16 C9                                   ret
 497+ AA17
 498+ AA17 CD 0C AA     CalcVectorToMyShip:     call    SetPlayerAsTarget
 499+ AA1A CD E7 A9                             call    CopyPosToVector
 500+ AA1D                                      ;call    CopyToTargetVector
 501+ AA1D                                      ;FlipSignMem     TacticsTargetX+2
 502+ AA1D                                      ;FlipSignMem     TacticsTargetY+2
 503+ AA1D                                      ;FlipSignMem     TacticsTargetZ+2
 504+ AA1D C9                                   ret
 505+ AA1E
 506+ AA1E ED 5B A6 A2  CalcTargetVector:       ld      de,(TacticsTargetX)                        ; get target ship X
 507+ AA22 3A A8 A2                             ld      a,(TacticsTargetX+2)                       ; and flip sign so we have missile - target
 508+ AA25                                      FlipSignBitA
 508+ AA25 EE 80       >                        xor     SignOnly8Bit
 509+ AA27 4F                                   ld      c,a                                 ; get target ship x sign but * -1 as we are subtracting
 510+ AA28 2A 20 C0                             ld      hl,(UBnKxlo)                        ; get missile x
 511+ AA2B 3A 22 C0                             ld      a,(UBnKxsgn)                        ; get missile x sign
 512+ AA2E 47                                   ld      b,a
 513+ AA2F CD 33 00                             call    ADDHLDESignBC                       ;AHL = BHL + CDE i.e. missile - target x
 514+ AA32 22 B6 A2                             ld      (TacticsVectorX),hl
 515+ AA35 32 B8 A2                             ld      (TacticsVectorX+2),a
 516+ AA38 ED 5B A9 A2  .UpdateTargetingShipY:  ld      de,(TacticsTargetY)
 517+ AA3C 3A AB A2                             ld      a,(TacticsTargetY+2)
 518+ AA3F                                      FlipSignBitA
 518+ AA3F EE 80       >                        xor     SignOnly8Bit
 519+ AA41 4F                                   ld      c,a                                 ; get target ship x sign but * -1 as we are subtracting
 520+ AA42 2A 23 C0                             ld      hl,(UBnKylo)                        ; get missile x
 521+ AA45 3A 25 C0                             ld      a,(UBnKysgn)                        ; get missile x sign
 522+ AA48 47                                   ld      b,a
 523+ AA49 CD 33 00                             call    ADDHLDESignBC                       ;AHL = BHL + CDE i.e. missile - target x
 524+ AA4C 22 BA A2                             ld      (TacticsVectorY),hl
 525+ AA4F 32 BC A2                             ld      (TacticsVectorY+2),a
 526+ AA52 ED 5B AC A2  .UpdateTargetingShipZ:  ld      de,(TacticsTargetZ)
 527+ AA56 3A AE A2                             ld      a,(TacticsTargetZ+2)
 528+ AA59                                      FlipSignBitA
 528+ AA59 EE 80       >                        xor     SignOnly8Bit
 529+ AA5B 4F                                   ld      c,a                                 ; get target ship x sign but * -1 as we are subtracting
 530+ AA5C 2A 26 C0                             ld      hl,(UBnKzlo)                        ; get missile x
 531+ AA5F 3A 28 C0                             ld      a,(UBnKzsgn)                        ; get missile x sign
 532+ AA62 47                                   ld      b,a
 533+ AA63 CD 33 00                             call    ADDHLDESignBC                       ;AHL = BHL + CDE i.e. missile - target x
 534+ AA66 22 BE A2                             ld      (TacticsVectorZ),hl
 535+ AA69 32 C0 A2                             ld      (TacticsVectorZ+2),a
 536+ AA6C C9                                   ret
 537+ AA6D
 538+ AA6D              ;-- Now its scaled we can normalise
 539+ AA6D              ;-- Scale down so that h d &b are zero, then do once again so l e and c are 7 bit
 540+ AA6D              ;-- use 7 bit mul96 to ensure we don;t get odd maths
 541+ AA6D              ; Moved to Maths BankNormalizeTactics:       ld      hl, (TacticsVectorX)        ; pull XX15 into registers
 542+ AA6D              ; Moved to Maths Bank                        ld      de, (TacticsVectorY)        ; .
 543+ AA6D              ; Moved to Maths Bank                        ld      bc, (TacticsVectorZ)        ; .
 544+ AA6D              ; Moved to Maths Bank.ScaleLoop:             ld      a,h
 545+ AA6D              ; Moved to Maths Bank                        or      d
 546+ AA6D              ; Moved to Maths Bank                        or      b
 547+ AA6D              ; Moved to Maths Bank                        jr      z,.DoneScaling
 548+ AA6D              ; Moved to Maths Bank                        ShiftHLRight1
 549+ AA6D              ; Moved to Maths Bank                        ShiftDERight1
 550+ AA6D              ; Moved to Maths Bank                        ShiftBCRight1
 551+ AA6D              ; Moved to Maths Bank                        jp      .ScaleLoop
 552+ AA6D              ; Moved to Maths Bank.DoneScaling:           ShiftHLRight1                       ; as the values now need to be sign magnitued
 553+ AA6D              ; Moved to Maths Bank                        ShiftDERight1                       ; e.g. S + 7 bit we need an extra shift
 554+ AA6D              ; Moved to Maths Bank                        ShiftBCRight1                       ; now values are in L E C
 555+ AA6D              ; Moved to Maths Bank                        push    hl,,de,,bc                  ; save vecrtor x y and z nwo they are scaled to 1 byte
 556+ AA6D              ; Moved to Maths Bank                        ld      d,e                         ; hl = y(e) ^ 2
 557+ AA6D              ; Moved to Maths Bank                        mul     de                          ; .
 558+ AA6D              ; Moved to Maths Bank                        ex      de,hl                       ; .
 559+ AA6D              ; Moved to Maths Bank                        ld      d,e                         ; de = x(l) ^ 2
 560+ AA6D              ; Moved to Maths Bank                        mul     de                          ; .
 561+ AA6D              ; Moved to Maths Bank                        add     hl,de                       ; hl = hl + de
 562+ AA6D              ; Moved to Maths Bank                        ld      d,c                         ; de = y(c)^ 2 + x ^ 2
 563+ AA6D              ; Moved to Maths Bank                        ld      e,c                         ; .
 564+ AA6D              ; Moved to Maths Bank                        mul     de                          ; .
 565+ AA6D              ; Moved to Maths Bank                        add     hl,de                       ; hl =  y^ 2 + x ^ 2 + z ^ 2
 566+ AA6D              ; Moved to Maths Bank                        ex      de,hl                       ; fix as hl was holding square
 567+ AA6D              ; Moved to Maths Bank                        call    asm_sqrt                    ; IYH = A = hl = sqrt (de) = sqrt (x ^ 2 + y ^ 2 + z ^ 2)
 568+ AA6D              ; Moved to Maths Bank                        ; add in logic if h is low then use lower bytes for all
 569+ AA6D              ; Moved to Maths Bank                        ld      a,l                         ;
 570+ AA6D              ; Moved to Maths Bank                        ld      iyh,a                       ;
 571+ AA6D              ; Moved to Maths Bank                        ld      d,a                         ; D = sqrt
 572+ AA6D              ; Moved to Maths Bank                        pop     bc                          ; retrive tacticsvectorz scaled
 573+ AA6D              ; Moved to Maths Bank                        ld      a,c                         ; a = scaled byte
 574+ AA6D              ; Moved to Maths Bank                        call    AequAdivDmul967Bit;AequAdivDmul96Unsg          ; This rountine I think is wrong and retuins bad values
 575+ AA6D              ; Moved to Maths Bank                        ld      (TacticsVectorZ),a          ; z = normalised z
 576+ AA6D              ; Moved to Maths Bank                        pop     de
 577+ AA6D              ; Moved to Maths Bank                        ld      a,e
 578+ AA6D              ; Moved to Maths Bank                        ld      d,iyh
 579+ AA6D              ; Moved to Maths Bank                        call    AequAdivDmul967Bit;AequAdivDmul96Unsg
 580+ AA6D              ; Moved to Maths Bank                        ld      (TacticsVectorY),a
 581+ AA6D              ; Moved to Maths Bank                        pop     hl
 582+ AA6D              ; Moved to Maths Bank                        ld      a,l
 583+ AA6D              ; Moved to Maths Bank                        ld      d,iyh
 584+ AA6D              ; Moved to Maths Bank                        call    AequAdivDmul967Bit;AequAdivDmul96Unsg
 585+ AA6D              ; Moved to Maths Bank                        ld      (TacticsVectorX),a
 586+ AA6D              ; Moved to Maths Bank                        ; BODGE FOR NOW
 587+ AA6D              ; Moved to Maths Bank                       ; BODGE FOR NOW
 588+ AA6D              ; Moved to Maths Bank                        ZeroA                              ;; added to help debugging
 589+ AA6D              ; Moved to Maths Bank                        ld      (TacticsVectorX+1),a       ;; added to help debugging
 590+ AA6D              ; Moved to Maths Bank                        ld      (TacticsVectorY+1),a       ;; added to help debugging
 591+ AA6D              ; Moved to Maths Bank                        ld      (TacticsVectorZ+1),a       ;; added to help debugging
 592+ AA6D              ; Moved to Maths Bank                        SignBitOnlyMem TacticsVectorX+2     ; now upper byte is sign only
 593+ AA6D              ; Moved to Maths Bank                        SignBitOnlyMem TacticsVectorY+2     ; (could move it to lower perhaps later if
 594+ AA6D              ; Moved to Maths Bank                        SignBitOnlyMem TacticsVectorZ+2     ;  its worth it)
 595+ AA6D              ; Moved to Maths Bank                        ret
 596+ AA6D
 597+ AA6D                          DISPLAY "TODO: TactivtsPosMinus Target"
 598+ AA6D              ;TODOcall    TacticsPosMinusTarget              ; calculate vector to target
 599+ AA6D              ;;TODO                        check range
 600+ AA6D              ;;TODO                        if target has ecm then 7% chance it will active, reduce target energy (i.e. damage)
 601+ AA6D              ;;TODO                        else
 602+ AA6D              ;;TODO                            normalise teh vector for direction
 603+ AA6D              ;;TODO                            dot product = missile nosev . normalised vector
 604+ AA6D              ;;TODO                            cnt = high byte of dot product, cnf is +ve if facing similar direction
 605+ AA6D              ;;TODO                            negate normalised vector so its opposite product
 606+ AA6D              ;;TODO                            invert sign of cnt
 607+ AA6D              ;;TODO                            AK = roovf . XX15
 608+ AA6D              ;;TODO                            Ships pitch = call nroll to caulate teh valu eof ships pitch counter
 609+ AA6D              ;;TODO                            if pitch * 2 < 32 then
 610+ AA6D              ;;TODO                                ax = sidev . xx15
 611+ AA6D              ;;TODO                                    a = x xort current pitch direction
 612+ AA6D              ;;TODO                                    shipts roll = nroll
 613+ AA6D              ;;TODO                            do accelleration at TA6 (    https://www.bbcelite.com/disc/flight/subroutine/tactics_part_7_of_7.html#ta20
 614+ AA6D
 615+ AA6D              ;;TODO
 616+ AA6D              ;;TODO
 617+ AA6D              ;;TODO
 618+ AA6D              ;;TODOget the targetted ship inbto bank
 619+ AA6D              ;;TODO                        check range as per player
 620+ AA6D              ;;TODO                        handle explosion enc
 621+ AA6D
 622+ AA6D              ;                    else see how close it is to target
 623+ AA6D              ;                         if close to target
 624+ AA6D              ;                            then explodes destroy missile
 625+ AA6D              ;                                 if ship is not station
 626+ AA6D              ;                                    then set up signal target ship hit my missile flag
 627+ AA6D              ;                                         set blastcheckcounter to slotlist length  (12)
 628+ AA6D              ;                                 end if
 629+ AA6D              ;                                 if we are in range of missle blast
 630+ AA6D              ;                                    cause blast damage to our ship (this will signal death is needed)
 631+ AA6D              ;                                 end if
 632+ AA6D              ;                                 return
 633+ AA6D              ;                         end if
 634+ AA6D              ;                 end if
 635+ AA6D              ;         end if
 636+ AA6D
 637+ AA6D
 638+ AA6D                          ;            else if ship is angry at us
 639+ AA6D              ;
 640+ AA6D
 641+ AA6D              ; Part 1 - if type is missile and enquing a missile blast and slot free
 642+ AA6D              ;             then enqueue missile blast details
 643+ AA6D              ;                  mark as exploded
 644+ AA6D              ;                  remove missile from universe slot list
 645+ AA6D
 646+ AA6D              ; TODO, how to we deal with scared ships, e.g. if angry and no guns or missiles then should be considered scared or if hull mass < say 25% of our ship
 647+ AA6D              ; also for future ship vs ship combat
 648+ AA6D              ;... Tactics........................................................................
 649+ AA6D              ;.PART 1
 650+ AA6D              ; if shiphitbymissleflag <> false
 651+ AA6D              ;    then dec blast check counter
 652+ AA6D              ;         if blast check counter = 0
 653+ AA6D              ;            then set shiphitbymissileflag to FF
 654+ AA6D              ;    else if SetShipHitByMissileFlag = current ship number
 655+ AA6D              ;            then cause damage to ship
 656+ AA6D              ;         else if ship is in range and ship is not a station
 657+ AA6D              ;                  then cause blast damage to ship
 658+ AA6D              ;         if destroyed
 659+ AA6D              ;            then explode ship
 660+ AA6D              ;                 return
 661+ AA6D              ; end if
 662+ AA6D              ; if ship is a missle (I think we allow missile on missle action)
 663+ AA6D              ;    then if ecm is active
 664+ AA6D              ;            then destroy missile and return
 665+ AA6D              ;            else if ship is angry at us
 666+ AA6D              ;                    then if ship is close to us
 667+ AA6D              ;                            then explodes causing damage to our ship
 668+ AA6D              ;                                 enque missile blast
 669+ AA6D              ;                                 destroy missile
 670+ AA6D              ;                                 set blastcheckcounter to slotlist length
 671+ AA6D              ;                                 set shiphitbymissileflag to FE (general blast)
 672+ AA6D              ;                                 return
 673+ AA6D              ;                            else jump to part 3 to do updates
 674+ AA6D              ;                         end if
 675+ AA6D              ;                    else see how close it is to target
 676+ AA6D              ;                         if close to target
 677+ AA6D              ;                            then
 678+ AA6D              ;                                 enque missile blast
 679+ AA6D              ;                                 destroy missile
 680+ AA6D              ;                                 if ship is not station
 681+ AA6D              ;                                    then set up signal target ship hit my missile flag
 682+ AA6D              ;                                         set blastcheckcounter to slotlist length  (12)
 683+ AA6D              ;                                 end if
 684+ AA6D              ;                                 if we are in range of missle blast
 685+ AA6D              ;                                    cause blast damage to our ship (this will signal death is needed)
 686+ AA6D              ;                                 end if
 687+ AA6D              ;                                 return
 688+ AA6D              ;                         end if
 689+ AA6D              ;                 end if
 690+ AA6D              ;         end if
 691+ AA6D              ;.PART 2A ** adding in a collision logic
 692+ AA6D              ;    else if ship is close to another ship
 693+ AA6D              ;            then if docking flag set and other ship is space station or we are space station and other ship has docking flag
 694+ AA6D              ;                    then if aligned correctly
 695+ AA6D              ;                         then remove ship as docked
 696+ AA6D              ;                              return
 697+ AA6D              ;         else
 698+ AA6D              ;            call collision route and determine daamage based on sizes and bounce vectors
 699+ AA6D              ;            return
 700+ AA6D              ;.PART 2 ** Need to check if ship has AI flag
 701+ AA6D              ;    else if not hostile
 702+ AA6D              ;            then if not docking or station not present
 703+ AA6D              ;                    then calculate vector to planet
 704+ AA6D              ;                         jump to part 7
 705+ AA6D              ;                    else calculate verctor to docking slot
 706+ AA6D              ;                         call caluclate vector to docking slot (DOCKIT)
 707+ AA6D              ;                         jump to part 7
 708+ AA6D              ;                 end if
 709+ AA6D              ;            else case ship type
 710+ AA6D              ;                      >>escape pod>> point at planet and jump to step 7
 711+ AA6D              ;                      >>space station>> if hostile
 712+ AA6D              ;                                           then if cop counter < 7 and 6.2% chance
 713+ AA6D              ;                                                   then spawm hostile cop
 714+ AA6D              ;                                                end if
 715+ AA6D              ;                                           else
 716+ AA6D              ;                                                if 0.8% change and transporter count = 0
 717+ AA6D              ;                                                   then if 50% chance
 718+ AA6D              ;                                                           then spawn transporter
 719+ AA6D              ;                                                           else spawn shuttle
 720+ AA6D              ;                                                        end if
 721+ AA6D              ;                                                end if
 722+ AA6D              ;                                        end if
 723+ AA6D              ;                                        return
 724+ AA6D              ;                      >>targoid and no mother ship in slot list>> set random drift
 725+ AA6D              ;                                                                  return
 726+ AA6D              ;                      >>if bounty hunter flag>> if ship not hostile
 727+ AA6D              ;                                                   then if trader flag clear or 20% chance
 728+ AA6D              ;                                                        then if fugitive or offender
 729+ AA6D              ;                                                                then set hosile
 730+ AA6D              ;                                                end if
 731+ AA6D              ;                      >>Carrier and hanger slots > 0 >> if 22% chance (code to be added later)
 732+ AA6D              ;                                         then spawn agressive hosting one of types carried
 733+ AA6D              ;                                              reduce ships in hanger by 1
 734+ AA6D              ;                                              return
 735+ AA6D              ;                      >>rock hermit>> if 22% chance
 736+ AA6D              ;                                         then spawn agressive hosting one of Sidewinder, Mamba, Krait, Adder or Gecko
 737+ AA6D              ;                                              return
 738+ AA6D              ;                      >>pirate and in safe zone>> stop pirate being hostile by removing agressive and hostileflags
 739+ AA6D              ;                 end case
 740+ AA6D              ;         end if
 741+ AA6D              ;         recharge ship energy by recharge factor (TODO as a config item on ship type but by default 1)
 742+ AA6D              ; .PART 3
 743+ AA6D              ;         calulcate dot product of ship nose to us
 744+ AA6D              ; .PART 4
 745+ AA6D              ;         2.5% change ship rill roll a noticable amount
 746+ AA6D              ;         if ship has > 50% energy jump to part 6
 747+ AA6D              ;         if ship > 1/8th energy jump to part 5
 748+ AA6D              ;         if random 10% chance (i.e. ship < 1/8 energy and bails out)
 749+ AA6D              ;            then launch escape pod
 750+ AA6D              ;                 set AI to null
 751+ AA6D              ;                 set random pitch and roll
 752+ AA6D              ;                 set accelleation to 0
 753+ AA6D              ;         end if
 754+ AA6D              ; .PART 5
 755+ AA6D              ;         if ship does not have any missilesor ECM is firing to part 6
 756+ AA6D              ;            then if random > threshold for ship type (TODO as a config item on ship type)
 757+ AA6D              ;                    then if tharoid ; note this means thargoids are sensitve to ECM
 758+ AA6D              ;                            then launch thargon
 759+ AA6D              ;                            else spawn angry missle under ship
 760+ AA6D              ;                         end if
 761+ AA6D              ;                 end if
 762+ AA6D              ;            else return
 763+ AA6D              ;         end if
 764+ AA6D              ; .PART 6
 765+ AA6D              ;         if ship is not pointing at us from dot product ( < 160 , also > -32)
 766+ AA6D              ;            then jump to part 7
 767+ AA6D              ;            else if ship is pointing directly at us ( < 163 i.e. > -35)
 768+ AA6D              ;                    then fire laser at us (which reduces energy)
 769+ AA6D              ;                         cause laser damage to our ship (this will signal death is needed)
 770+ AA6D              ;                         decellerate by half as ship has lock on
 771+ AA6D              ;                         return
 772+ AA6D              ;                    else fire laser into space (which reduces energy)
 773+ AA6D              ;                 end if
 774+ AA6D              ;         end if
 775+ AA6D              ; .PART 7#
 776+ AA6D              ;        if ship is a msile targetting us
 777+ AA6D              ;           then ship turns towards us some more
 778+ AA6D              ;           else if z hi > =  3 or ( x hi or y hi > 1) , i.e. ship is far away
 779+ AA6D              ;                    then do random wiht bit 7 set
 780+ AA6D              ;                         if random < AI flag
 781+ AA6D              ;                            then   ship turned towards us
 782+ AA6D              ;                            else   ship turns away from us
 783+ AA6D              ;                         end if
 784+ AA6D              ;                end if
 785+ AA6D              ;           end if
 786+ AA6D              ;           calculate new roll, pitch and accelleration based on new targe vector
 787+ AA6D
 788+ AA6D
 789+ AA6D              ;        determine ship direction based on agression and type
 790+ AA6D              ;        set pitch and roll coutners
 791+ AA6D              ;        adjust speed depleding on relationship to us
 792+ AA6D              ; .PART 8 - new
 793+ AA6D              ;        if ship has ECM, another ECM is not active and missile targeted at it
 794+ AA6D              ;           if ship has enery of ECM energey cost + 1/8th total
 795+ AA6D              ;              if chance 25%
 796+ AA6D              ;                 then fire ECM
 797+ AA6D              ;
 798+ AA6D
 799+ AA6D
 800+ AA6D
 801+ AA6D
 802+ AA6D 2A B6 A2     ReduceTacticVectors:ld      hl, (TacticsVectorX)        ; pull XX15 into registers
 803+ AA70 ED 5B BA A2                      ld      de, (TacticsVectorY)        ; .
 804+ AA74 ED 4B BE A2                      ld      bc, (TacticsVectorZ)        ; .
 805+ AA78 3A B8 A2                         ld      a,(TacticsVectorX+2)        ; .
 806+ AA7B FD 67                            ld      iyh,a                       ; iyh = X sign
 807+ AA7D 3A BC A2                         ld      a,(TacticsVectorY+2)        ; .
 808+ AA80 FD 6F                            ld      iyl,a                       ; iyl = Y sign
 809+ AA82 3A C0 A2                         ld      a,(TacticsVectorZ+2)        ; .
 810+ AA85 DD 67                            ld      ixh,a                       ; ixh = z sign
 811+ AA87 FD B4        .ScaleLoop:         or      iyh                         ; now check if upper has value
 812+ AA89 FD B5                            or      iyl                         ; .
 813+ AA8B                                  ClearSignBitA                       ;  exluding sign bit
 813+ AA8B E6 7F       >                        and     SignMask8Bit
 814+ AA8D 28 21                            jr      z,.DoneScaling              ; and exit loop if upper byte is only sign component
 815+ AA8F FD 7C        .ScaledDownBy2:     ld      a,iyh
 816+ AA91 CB 2F                            sra     a
 817+ AA93 FD 67                            ld      iyh,a                       ; actually we can keep sign bit so just sr then rr
 818+ AA95 CB 1C                            rr      h                           ; Deal with X
 819+ AA97 CB 1D                            rr      l                           ;
 820+ AA99 FD 7D                            ld      a,iyl
 821+ AA9B CB 2F                            sra     a                           ; actually we can keep sign bit so just sr then rr
 822+ AA9D FD 6F                            ld      iyl,a
 823+ AA9F CB 1A                            rr      d                           ; Deal with Y
 824+ AAA1 CB 1B                            rr      e                           ;
 825+ AAA3 DD 7D                            ld      a, ixl                      ; actually we can keep sign bit so just sr then rr
 826+ AAA5 CB 2F                            sra     a
 827+ AAA7 DD 6F                            ld      ixl,a
 828+ AAA9 CB 18                            rr      b                           ; Deal with Z
 829+ AAAB CB 19                            rr      c                           ;
 830+ AAAD C3 87 AA                         jp      .ScaleLoop
 831+ AAB0 7C           .DoneScaling:       ld      a,h
 832+ AAB1 B2                               or      d
 833+ AAB2 B0                               or      b
 834+ AAB3                                  SignBitOnlyA                        ; check if new sign bit has a value rotated in,
 834+ AAB3 E6 80       >                        and     SignOnly8Bit
 835+ AAB5 28 0C                            jr      z,.OKToNormalise
 836+ AAB7              .ShiftTo15Bit:      ShiftHLRight1                       ; one last shift to 15 bit we don't need
 836+ AAB7 CB 3C       >			   srl h
 836+ AAB9 CB 1D       >			   rr  l
 837+ AABB                                  ShiftDERight1                       ; to do sign bytes
 837+ AABB CB 3A       >			   srl d
 837+ AABD CB 1B       >			   rr  e
 838+ AABF                                  ShiftBCRight1                       ; as value must be 0
 838+ AABF CB 38       >			   srl b
 838+ AAC1 CB 19       >			   rr  c
 839+ AAC3 7C           .OKToNormalise:     ld      a,h                         ; iyh now can only hold sign
 840+ AAC4 FD B4                            or      iyh                         ; so by the end of here
 841+ AAC6 67                               ld      h,a                         ;   hl = x
 842+ AAC7 7A                               ld      a,d                         ;   de = y
 843+ AAC8 FD B5                            or      iyl                         ;   bc = z
 844+ AACA 57                               ld      d,a                         ; all scaled to 15 bit + sign
 845+ AACB 78                               ld      a,b                         ;
 846+ AACC DD B4                            or      ixh                         ;
 847+ AACE 47                               ld      b,a                         ;
 848+ AACF 22 C6 A2                         ld      (TacticsNormX),hl
 849+ AAD2 22 CA A2                         ld      (TacticsNormY),hl
 850+ AAD5 22 CE A2                         ld      (TacticsNormZ),hl
 851+ AAD8 C9                               ret
 852+ AAD9                                 ; ***SIgn bits*** need to be in byte 3
 853+ AAD9
# file closed: ./GameEngine/Tactics.asm
 607  AAD9                  INCLUDE "./Hardware/drive_access.asm"
# file opened: ./Hardware/drive_access.asm
   1+ AAD9              M_GETSETDRV             equ $89
   2+ AAD9              F_OPEN                  equ $9a
   3+ AAD9              F_CLOSE                 equ $9b
   4+ AAD9              F_READ                  equ $9d
   5+ AAD9              F_WRITE                 equ $9e
   6+ AAD9              F_SEEK                  equ $9f
   7+ AAD9
   8+ AAD9              FA_READ                 equ $01
   9+ AAD9              FA_APPEND               equ $06
  10+ AAD9              FA_OVERWRITE            equ $0C
  11+ AAD9              DISK_FILEMAP            equ $85
  12+ AAD9              DISK_STRMSTART          equ $86
  13+ AAD9              DISK_STRMEND            equ $87
  14+ AAD9
  15+ AAD9              ESX_MODE_READ           equ $01
  16+ AAD9              ESX_MODE_OPEN_EXIST     equ $00
  17+ AAD9
  18+ AAD9              FILEMAP_SIZE            equ $20
  19+ AAD9              FILEMAP_BLOCK_SIZE      equ $06
  20+ AAD9
  21+ AAD9              ; Success 1 = default drive, carry reset
  22+ AAD9              ; Failure HL = -1 , carry set, errno set
  23+ AAD9 F5 C5 D5 E5  GetDefaultDrive:        push	af,,bc,,de,,hl,,ix
  23+ AADD DD E5
  24+ AADF AF                                   xor	    a	; a = 0 means get default drive into A
  25+ AAE0 CF                                   rst	    $08
  26+ AAE1 89                                   db	    M_GETSETDRV
  27+ AAE2 32 77 AB                             ld	    (DefaultDrive),a
  28+ AAE5 DD E1 E1 D1                          pop		af,,bc,,de,,hl,,ix
  28+ AAE9 C1 F1
  29+ AAEB C9                                   ret
  30+ AAEC
  31+ AAEC
  32+ AAEC              ; Disable NMI Multi face - needed for streaming
  33+ AAEC              ;disable_multiface:      ld      bc,REGISTER_NUMBER_PORT
  34+ AAEC              ;                        ld      a,PERIPHERAL_2_REGISTER
  35+ AAEC              ;                        out     (c),a
  36+ AAEC              ;                        inc     b
  37+ AAEC              ;                        in      a,(c)
  38+ AAEC              ;                        and     %11110111
  39+ AAEC              ;                        out     (c),a
  40+ AAEC              ;                        ret
  41+ AAEC              ;
  42+ AAEC              ;enable_multiface:       ld      bc,REGISTER_NUMBER_PORT
  43+ AAEC              ;                        ld      a,PERIPHERAL_2_REGISTER
  44+ AAEC              ;                        out     (c),a
  45+ AAEC              ;                        inc     b
  46+ AAEC              ;                        in      a,(c)
  47+ AAEC              ;                        or      %00001000
  48+ AAEC              ;                        out     (c),a
  49+ AAEC              ;                        ret
  50+ AAEC              ;
  51+ AAEC              ; *******************************************************************************************************
  52+ AAEC              ;	Function:	Open a file read for reading/writing
  53+ AAEC              ;	In:		ix = filename
  54+ AAEC              ;			b  = Open filemode
  55+ AAEC              ;	ret		a  = handle, 0 on error
  56+ AAEC              ;   fOpen_read_exists takes defaults and sets up default drive
  57+ AAEC              ; *******************************************************************************************************
  58+ AAEC              ;fOpen_read_exists:      ld      b,ESX_MODE_READ | ESX_MODE_OPEN_EXIST
  59+ AAEC              ;                        call    GetDefaultDrive
  60+ AAEC              ;                        call    fOpen
  61+ AAEC              ;                        call    fRefill_map
  62+ AAEC              ;                        jp      c,.RefilMapError
  63+ AAEC              ;                        jp      z,.RefilMapEmpty
  64+ AAEC              ;                        ret
  65+ AAEC              ;.RefilMapError:         jp      .RefilMapError
  66+ AAEC              ;.RefilMapEmpty:         jp      .RefilMapEmpty
  67+ AAEC              ;
  68+ AAEC              ;
  69+ AAEC
  70+ AAEC 3A 77 AB     fOpen:	                ld	    a,(DefaultDrive); default drive must be called before we start
  71+ AAEF CF                                   rst	    $08
  72+ AAF0 9A                                   db	    F_OPEN
  73+ AAF1 32 78 AB                             ld      (FileHandle),a  ; make a local copy of last file opened
  74+ AAF4 38 01                                jr      c,.FileOpenError
  75+ AAF6 C9                                   ret
  76+ AAF7 C3 F7 AA     .FileOpenError:         jp      .FileOpenError
  77+ AAFA
  78+ AAFA              ; *******************************************************************************************************
  79+ AAFA              ;	Function	refills the buffer map with card addresses for the file
  80+ AAFA              ;	In:		a  = file handle (if calling fRefill_mapA)
  81+ AAFA              ;           ix = address of filemap_buffer (if calling fRefill_mapA)
  82+ AAFA              ;           de = filemap size (which should equal 4 in our case)
  83+ AAFA              ;			bc  = amount to read
  84+ AAFA              ;	ret:		carry set = error
  85+ AAFA              ;               zero set  = no data loaded so still error
  86+ AAFA              ;   you can use fRefill_map to pull default valuess
  87+ AAFA              ; *******************************************************************************************************
  88+ AAFA              ;fRefill_map:            ld      a,(FileHandle)
  89+ AAFA              ;                        ld      ix,FilemapBuffer
  90+ AAFA              ;                        ld      de,FILEMAP_SIZE
  91+ AAFA              ;fRefill_mapA:           rst     $08
  92+ AAFA              ;                        db      DISK_FILEMAP
  93+ AAFA              ;.SetFlags:              ld      (CardFlags),a                   ; set up adressing mode flags  bit 0=card id (0 or 1) bit 1=0 for byte addressing, 1 for block addressing
  94+ AAFA              ;.CheckForEntries:       ld      (FilemapBufferLast),hl          ; save last entry address +2
  95+ AAFA              ;                        ld      de,FilemapBuffer
  96+ AAFA              ;                        sbc     hl,de                           ; hl = number of entries found
  97+ AAFA              ;                        ld      a,$ff
  98+ AAFA              ;                        ret
  99+ AAFA              ;
 100+ AAFA              ;read_stream_block:      ld      hl,(FilemapBufferPointer)
 101+ AAFA              ;                        ldBCDEatHL                              ; load the disk address
 102+ AAFA              ;                        push    bc                              ; into IXDE
 103+ AAFA              ;                        pop     ix                              ; now IXDE = card address
 104+ AAFA              ;                        ldBCatHL                                ; bc = number of blocks to be read
 105+ AAFA              ;                        ld      (FilemapBlockCount),bc
 106+ AAFA              ;                        ret
 107+ AAFA              ; Start up stream of data
 108+ AAFA              ; If successful, the call returns with:
 109+ AAFA              ; B=protocol: 0=SD/MMC, 1=IDE,  C=data port
 110+ AAFA              ; NOTE: On the Next, these values will always be: B=0 C=$EB
 111+ AAFA              ;fStream_start:          ld      hl,FilemapBuffer                ; set to head of filemap
 112+ AAFA              ;                        ld      (FilemapBufferPointer),hl       ; .
 113+ AAFA              ;                        ZeroA
 114+ AAFA              ;                        ld      (FilereadsPerformed),a
 115+ AAFA              ;                        call    read_stream_block
 116+ AAFA              ;                        ld      a,(CardFlags)                   ; get card flags back
 117+ AAFA              ;                        rst     $08
 118+ AAFA              ;                        DB      DISK_STRMSTART                  ; start up stream
 119+ AAFA              ;                        ld      (FileStreamPort),bc             ; save port information (even through it will not change on a next)
 120+ AAFA              ;                        ret
 121+ AAFA
 122+ AAFA              ; *******************************************************************************************************
 123+ AAFA              ;	Function	stream in a block of data to memory
 124+ AAFA              ;	In:		ix  = address to read into
 125+ AAFA              ;			bc  = amount to read
 126+ AAFA              ;	ret:		carry set = error
 127+ AAFA              ; *******************************************************************************************************
 128+ AAFA              ;fStream_block:          ld      ix,FileBuffer
 129+ AAFA              ;                        ld      a,(CardFlags)
 130+ AAFA              ;                        ld      bc,(FileStreamPort)
 131+ AAFA              ;                        ld      hl,FileBuffer
 132+ AAFA              ;                        ld      (FilemapBufferPointer),hl
 133+ AAFA              ;.StreamLoop:            ld      b,0
 134+ AAFA              ;                        ld      a,(TargetSize+1)
 135+ AAFA              ;                        cp      2
 136+ AAFA              ;                        jr      c,.stream_partial_block
 137+ AAFA              ;.StreamFullBlock:       inir                                ; read 256 bytes to hl
 138+ AAFA              ;                        inir                                ; read 256 bytes to hl+256
 139+ AAFA              ;                        dec     b                           ; update byte count
 140+ AAFA              ;                        dec     b                           ; .
 141+ AAFA              ;                        ld      hl,TargetSize               ; 512 bytes read
 142+ AAFA              ;                        ld      de,512
 143+ AAFA              ;                        ClearCarryFlag
 144+ AAFA              ;                        sbc     hl,de
 145+ AAFA              ;                        ld      (TargetSize),hl
 146+ AAFA              ;                        ld      a,(FileStreamPort+1)        ; get the protocol
 147+ AAFA              ;                        and     a
 148+ AAFA              ;                        jr      nz,.protocol_ide            ; we arn't using but for compatibility
 149+ AAFA              ;.protocol_sdmmc:        in      a,(c)                       ; for sd and mmc, read in the 2 byte CRC
 150+ AAFA              ;                        nop                                 ; as the max performance of the interface is
 151+ AAFA              ;                        nop                                 ; 16T per byte, no ops pad out operation
 152+ AAFA              ;                        in      a,(c)
 153+ AAFA              ;                        nop
 154+ AAFA              ;                        nop
 155+ AAFA              ;.wait_for_next_block:   in      a,(c)                       ; if wait token is not FF then we are read
 156+ AAFA              ;                        cp      $FF
 157+ AAFA              ;                        jr      z,.wait_for_next_block
 158+ AAFA              ;                        cp      $FE                         ; if not and its not FE its a fault
 159+ AAFA              ;                        jr      nz,.token_error
 160+ AAFA              ;.protocol_ide:          ld      de,(TargetSize)             ; Any more bytes required
 161+ AAFA              ;                        ld      a,d
 162+ AAFA              ;                        or      e
 163+ AAFA              ;                        jr      z,.streaming_complete
 164+ AAFA              ;                        ret
 165+ AAFA              ;.stream_partial_block:  and     a                           ; is block at least 256 bytes?
 166+ AAFA              ;                        jr      z,.under256_bytes
 167+ AAFA              ;                        inir                                ; get 256 bytes
 168+ AAFA              ;.under256_bytes:        ld      b,e
 169+ AAFA              ;                        inc     b
 170+ AAFA              ;                        dec     b
 171+ AAFA              ;                        jr      z,.streaming_complete
 172+ AAFA              ;                        inir
 173+ AAFA              ;.streaming_complete:    ld      a,(CardFlags)
 174+ AAFA              ;                        rst     $08
 175+ AAFA              ;                        DB      DISK_STRMEND
 176+ AAFA              ;                        ld      a,(FileHandle)
 177+ AAFA              ;                        call    fClose
 178+ AAFA              ;                        ret
 179+ AAFA              ;.token_error:           jp      .token_error
 180+ AAFA              ;
 181+ AAFA              ;
 182+ AAFA              ;fOpenReadFile:          ld      (TargetSize),bc
 183+ AAFA              ;                        call    disable_multiface
 184+ AAFA              ;                        call    fOpen_read_exists
 185+ AAFA              ;.SetupStream:           call    fStream_start
 186+ AAFA              ;                        jr      c,.FileStreamError
 187+ AAFA              ;                        ret
 188+ AAFA              ;
 189+ AAFA              ;.FileStreamError:       jp      .FileStreamError
 190+ AAFA              ;
 191+ AAFA              ; *******************************************************************************************************
 192+ AAFA              ;	Function	Read bytes from the open file
 193+ AAFA              ;	In:		ix  = address to read into
 194+ AAFA              ;			bc  = amount to read
 195+ AAFA              ;	ret:		carry set = error
 196+ AAFA              ; *******************************************************************************************************
 197+ AAFA B7           fRead:                  or   	a             ; is it zero?
 198+ AAFB C8                                   ret  	z             ; if so return
 199+ AAFC E5                                   push    hl
 200+ AAFD DD E5 E1                             ld      hl,ix    	 ; load ix into hl and save hl for later
 201+ AB00 CF                                   rst	    $08
 202+ AB01 9D                                   db	    F_READ
 203+ AB02 E1                                   pop	    hl
 204+ AB03 C9                                   ret
 205+ AB04
 206+ AB04              ; *******************************************************************************************************
 207+ AB04              ;	Function	Write bytes to the open file
 208+ AB04              ;	In:		ix  = address to read from
 209+ AB04              ;			bc  = amount to write
 210+ AB04              ;	ret:		carry set = error
 211+ AB04              ; *******************************************************************************************************
 212+ AB04 B7           fWrite:                 or   	a             ; is it zero?
 213+ AB05 C8                                   ret  	z             ; if so return
 214+ AB06 E5                                   push	hl
 215+ AB07 DD E5 E1                             ld      hl,ix
 216+ AB0A CF                                   rst	    $08
 217+ AB0B 9E                                   db	    F_WRITE
 218+ AB0C E1                                   pop	    hl
 219+ AB0D C9                                   ret
 220+ AB0E
 221+ AB0E              ; *******************************************************************************************************
 222+ AB0E              ;	Function:	Close open file
 223+ AB0E              ;	In:		a  = handle
 224+ AB0E              ;	ret		a  = handle, 0 on error
 225+ AB0E              ; *******************************************************************************************************
 226+ AB0E B7           fClose:		            or   	a             ; is it zero?
 227+ AB0F C8                                   ret  	z             ; if so return
 228+ AB10 CF                                   rst	    $08
 229+ AB11 9B                                   db	    F_CLOSE
 230+ AB12 C9                                   ret
 231+ AB13
 232+ AB13              ;fSeekHome:              push    bc,,de,,hl,,ix
 233+ AB13              ;                        ld      bc,0
 234+ AB13              ;                        ld      de,0
 235+ AB13              ;                        ld      l,0
 236+ AB13              ;                        call    fSeek
 237+ AB13              ;                        pop     bc,,de,,hl,,ix
 238+ AB13              ;                        ret
 239+ AB13              ;
 240+ AB13              ;fSeekForward256:        push    bc,,de,,hl,,ix
 241+ AB13              ;                        ld      bc,0
 242+ AB13              ;                        ld      de,256
 243+ AB13              ;                        ld      l,1
 244+ AB13              ;                        call    fSeek
 245+ AB13              ;                        pop     bc,,de,,hl,,ix
 246+ AB13              ;                        ret
 247+ AB13
 248+ AB13              ; *******************************************************************************************************
 249+ AB13              ;	Function	Read bytes from the open file
 250+ AB13              ;	In:		a   = file handle
 251+ AB13              ;			L   = Seek mode (0=start, 1=rel, 2=-rel)
 252+ AB13              ;			BCDE = bytes to seek
 253+ AB13              ;	ret:		BCDE = file pos from start
 254+ AB13              ; *******************************************************************************************************
 255+ AB13 DD E5 E5     fSeek:                  push	ix,,hl
 256+ AB16 CF                                   rst	    $08
 257+ AB17 9F                                   db	    F_SEEK
 258+ AB18 E1 DD E1                             pop	    ix,,hl
 259+ AB1B C9                                   ret
 260+ AB1C
 261+ AB1C              ; *******************************************************************************************************
 262+ AB1C              ; Init the file system
 263+ AB1C              ; *******************************************************************************************************
 264+ AB1C CD D9 AA     InitFileSystem:         call    GetDefaultDrive
 265+ AB1F C9                                   ret
 266+ AB20
 267+ AB20              ; *******************************************************************************************************
 268+ AB20              ; Function:	Load a whole file into memory	(confirmed working on real machine)
 269+ AB20              ; In:		hl = file data pointer
 270+ AB20              ;		    ix = address to load to
 271+ AB20              ;           bc = filelength
 272+ AB20              ; *******************************************************************************************************
 273+ AB20 CD D9 AA     FileLoad:	            call    GetDefaultDrive
 274+ AB23 C5 D5 F5                             push	bc,,de,,af
 275+ AB26                                      ; get file size
 276+ AB26 C5 DD E5                             push	bc,,ix			; store size, load address,
 277+ AB29 E5 DD E1                             ld      ix,hl
 278+ AB2C 06 01                                ld      b,FA_READ		; mode open for reading
 279+ AB2E CD EC AA                             call    fOpen
 280+ AB31 38 17                                jr	    c,.error_opening; carry set? so there was an error opening and A=error code
 281+ AB33 FE 00                                cp	    0				; was file handle 0?
 282+ AB35 28 13                                jr	    z,.error_opening; of so there was an error opening.
 283+ AB37 DD E1 C1                             pop     bc,,ix          ; get load address back and size back
 284+ AB3A F5                                   push	af				; remember handle
 285+ AB3B CD FA AA                             call	fRead			; read data from A to address IX of length BC
 286+ AB3E 38 0C                                jr	    c,.error_reading
 287+ AB40 F1                                   pop	    af			    ; get handle back
 288+ AB41 CD 0E AB                             call	fClose			; close file
 289+ AB44 38 07                                jr	    c,.error_closing
 290+ AB46 F1 D1 C1                             pop     bc,,de,,af      ; normal exit
 291+ AB49 C9                                   ret
 292+ AB4A              ;
 293+ AB4A              ; On error, display error code an lock up so we can see it
 294+ AB4A              ;
 295+ AB4A DD E1        .error_opening:         pop	ix
 296+ AB4C C1           .error_reading:		    pop	bc	; don't pop a, need error code
 297+ AB4D
 298+ AB4D              .error_closing:
 299+ AB4D C1           .NormalError:  	        pop	bc	; don't pop into A, return with error code
 300+ AB4E D1                                   pop	de
 301+ AB4F C1                                   pop	bc
 302+ AB50 C9                                   ret
 303+ AB51
 304+ AB51              ; *******************************************************************************************************
 305+ AB51              ; Function:	Save a whole file into memory	(confirmed working on real machine)
 306+ AB51              ; In:		hl = file name
 307+ AB51              ;		    ix = address to save from
 308+ AB51              ;		    bc = size
 309+ AB51              ; *******************************************************************************************************
 310+ AB51 CD D9 AA     FileSave:	            call    GetDefaultDrive		; need to do this each time?!?!?
 311+ AB54 C5 DD E5                             push	bc,,ix   			; store size& save address
 312+ AB57 E5 DD E1                             ld      ix,hl               ; get name into ix
 313+ AB5A 06 0C                                ld      b,FA_OVERWRITE		; mode open for writing
 314+ AB5C CD EC AA                             call    fOpen
 315+ AB5F 38 12                                jr	    c,.error_opening	; carry set? so there was an error opening and A=error code
 316+ AB61 FE 00                                cp	    0			        ; was file handle 0?
 317+ AB63 28 0E                                jr	    z,.error_opening	; of so there was an error opening.
 318+ AB65 DD E1 C1                             pop	    bc,,ix			    ; get lenght and save address back
 319+ AB68 F5                                   push	af			        ; remember handle
 320+ AB69 CD 04 AB                             call	fWrite			    ; read data from A to address IX of length BC
 321+ AB6C 38 04                                jr	c,.error
 322+ AB6E F1                                   pop	af			            ; get handle back
 323+ AB6F CD 0E AB                             call	fClose			    ; close file
 324+ AB72 C9           .error:                 ret
 325+ AB73              ;
 326+ AB73              ; On error, display error code an lock up so we can see it
 327+ AB73              ;
 328+ AB73 DD E1 C1     .error_opening:         pop	bc,,ix                  ; don't pop a, need error code
 329+ AB76 C9                                   ret
 330+ AB77
 331+ AB77 00           DefaultDrive:	        DB	0
 332+ AB78 00           FileHandle:             DB  0
 333+ AB79 00           CardFlags               DB  0
 334+ AB7A 00 00        TargetSize              DW  0
 335+ AB7C 00 00        FileStreamPort          DW  0
 336+ AB7E 00 00 00...  FileBuffer              DS  512                     ; block of data
 337+ AD7E 00           FilereadsPerformed      DB  0
 338+ AD7F 00 00        FilemapBlockCount       DW  0
 339+ AD81 00 00        FilemapBufferPointer    DW  0
 340+ AD83 00 00        FilemapBufferLast       DW  0
 341+ AD85 00 00 00...  FilemapBuffer           DS  FILEMAP_BLOCK_SIZE * FILEMAP_SIZE        ; expecting 60 to be overkill as most should be 1
 342+ AE45
# file closed: ./Hardware/drive_access.asm
 608  AE45
 609  AE45                  INCLUDE "./Menus/common_menu.asm"
# file opened: ./Menus/common_menu.asm
   1+ AE45 43 4F 4D 4D  txt_commander 			DB "COMMANDER",0
   1+ AE49 41 4E 44 45
   1+ AE4D 52 00
   2+ AE4F 49 4E 56 45  txt_inventory 			DB "INVENTORY",0
   2+ AE53 4E 54 4F 52
   2+ AE57 59 00
   3+ AE59 50 72 65 73  txt_present_system		DB "Present System   :",0
   3+ AE5D 65 6E 74 20
   3+ AE61 53 79 73 74
   3+ AE65 65 6D 20 20
   3+ AE69 20 3A 00
   4+ AE6C 48 79 70 65  txt_hyperspace_system	DB "Hyperspace System:",0
   4+ AE70 72 73 70 61
   4+ AE74 63 65 20 53
   4+ AE78 79 73 74 65
   4+ AE7C 6D 3A 00
   5+ AE7F 43 6F 6E 64  txt_condition			DB "Condition   :",0
   5+ AE83 69 74 69 6F
   5+ AE87 6E 20 20 20
   5+ AE8B 3A 00
   6+ AE8D 46 75 65 6C  txt_fuel				DB "Fuel        :",0
   6+ AE91 20 20 20 20
   6+ AE95 20 20 20 20
   6+ AE99 3A 00
   7+ AE9B 43 61 73 68  txt_cash				DB "Cash        :",0
   7+ AE9F 20 20 20 20
   7+ AEA3 20 20 20 20
   7+ AEA7 3A 00
   8+ AEA9 4C 65 67 61  txt_legal_status		DB "Legal Status:",0
   8+ AEAD 6C 20 53 74
   8+ AEB1 61 74 75 73
   8+ AEB5 3A 00
   9+ AEB7 52 61 74 69  txt_rating				DB "Rating      :",0
   9+ AEBB 6E 67 20 20
   9+ AEBF 20 20 20 20
   9+ AEC3 3A 00
  10+ AEC5 45 51 55 49  txt_equipment			DB "EQUIPMENT:",0
  10+ AEC9 50 4D 45 4E
  10+ AECD 54 3A 00
  11+ AED0
  12+ AED0 30 30 2E 30  txt_fuel_level			DB "00.0 Light Years",0
  12+ AED4 20 4C 69 67
  12+ AED8 68 74 20 59
  12+ AEDC 65 61 72 73
  12+ AEE0 00
  13+ AEE1 58 58 58 58  txt_cash_amount			DB "XXXXXXXXXX",0
  13+ AEE5 58 58 58 58
  13+ AEE9 58 58 00
  14+ AEEC 2E           txt_cash_decimal        DB "."
  15+ AEED 58 20 43 72  txt_cash_fraction       DB "X Cr",0
  15+ AEF1 00
  16+ AEF2
  17+ AEF2              txt_status_colour		equ $FF
  18+ AEF2              txt_highlight_colour    equ $D0
  19+ AEF2
# file closed: ./Menus/common_menu.asm
 610  AEF2              MainNonBankedCodeEnd:
 611  AEF2                  DISPLAY "Main Non Banked Code Ends at ",$
 612  AEF2              ;-- END OF MAIN NON BANKED CODE ---------------------------------------------------------
 613  AEF2                  org $B000
 614  B000                  DISPLAY "Vector Table Starts at ",$
 615  B000              VectorTable:
 616  B000 B1 B1 B1 B1                  dw      IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine
 616  B004 B1 B1 B1 B1
 616  B008 B1 B1 B1 B1
 616  B00C B1 B1 B1 B1
 616  B010 B1 B1 B1 B1
 616  B014 B1 B1 B1 B1
 616  B018 B1 B1 B1 B1
 616  B01C B1 B1 B1 B1
 617  B020 B1 B1 B1 B1                  dw      IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine
 617  B024 B1 B1 B1 B1
 617  B028 B1 B1 B1 B1
 617  B02C B1 B1 B1 B1
 617  B030 B1 B1 B1 B1
 617  B034 B1 B1 B1 B1
 617  B038 B1 B1 B1 B1
 617  B03C B1 B1 B1 B1
 618  B040 B1 B1 B1 B1                  dw      IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine
 618  B044 B1 B1 B1 B1
 618  B048 B1 B1 B1 B1
 618  B04C B1 B1 B1 B1
 618  B050 B1 B1 B1 B1
 618  B054 B1 B1 B1 B1
 618  B058 B1 B1 B1 B1
 618  B05C B1 B1 B1 B1
 619  B060 B1 B1 B1 B1                  dw      IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine
 619  B064 B1 B1 B1 B1
 619  B068 B1 B1 B1 B1
 619  B06C B1 B1 B1 B1
 619  B070 B1 B1 B1 B1
 619  B074 B1 B1 B1 B1
 619  B078 B1 B1 B1 B1
 619  B07C B1 B1 B1 B1
 620  B080 B1 B1 B1 B1                  dw      IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine
 620  B084 B1 B1 B1 B1
 620  B088 B1 B1 B1 B1
 620  B08C B1 B1 B1 B1
 620  B090 B1 B1 B1 B1
 620  B094 B1 B1 B1 B1
 620  B098 B1 B1 B1 B1
 620  B09C B1 B1 B1 B1
 621  B0A0 B1 B1 B1 B1                  dw      IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine
 621  B0A4 B1 B1 B1 B1
 621  B0A8 B1 B1 B1 B1
 621  B0AC B1 B1 B1 B1
 621  B0B0 B1 B1 B1 B1
 621  B0B4 B1 B1 B1 B1
 621  B0B8 B1 B1 B1 B1
 621  B0BC B1 B1 B1 B1
 622  B0C0 B1 B1 B1 B1                  dw      IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine
 622  B0C4 B1 B1 B1 B1
 622  B0C8 B1 B1 B1 B1
 622  B0CC B1 B1 B1 B1
 622  B0D0 B1 B1 B1 B1
 622  B0D4 B1 B1 B1 B1
 622  B0D8 B1 B1 B1 B1
 622  B0DC B1 B1 B1 B1
 623  B0E0 B1 B1 B1 B1                  dw      IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine,IM2Routine
 623  B0E4 B1 B1 B1 B1
 623  B0E8 B1 B1 B1 B1
 623  B0EC B1 B1 B1 B1
 623  B0F0 B1 B1 B1 B1
 623  B0F4 B1 B1 B1 B1
 623  B0F8 B1 B1 B1 B1
 623  B0FC B1 B1 B1 B1
 624  B100 B1 B1 B1 B1                  dw      IM2Routine,IM2Routine
 625  B104                              ;(The last DW could just be a DB as it needs to b 257 bytes but its cleaner for source code)
 626  B104
 627  B104 60 00        IR_COUNT        dw  $0060
 628  B106
 629  B106 00           LAST_DELTA          db  0
 630  B107 00           SavedMMU6           db  0               ; use by interrupt handler only
 631  B108 00           SavedMMU7           db  0               ; use by interrupt handler only
 632  B109              SoundInterrupt      EQU IM2Sound
 633  B109              DanubeInterrupt     EQU IM2PlayDanube
 634  B109              AttractInterrrupt   EQU IM2AttractMode
 635  B109
 636  B109
 637  B109              StartOfInterruptHandler:
 638  B109                  DISPLAY "Non Banked Code Ends At", StartOfInterruptHandler
 639  B109
 640  B109                              ; NOTE play then equeue simplifies ligic, more chance slot free
 641  B109                              org $B1B1
 642  B1B1                  DISPLAY "Interrupt Handler Starts at",$
 643  B1B1              ; keeping the handler to a minimal size in order to make best use of
 644  B1B1              ; non pageable memory
 645  B1B1              IM2Routine:             IFDEF INTERRUPT_BLOCKER
 646  B1B1 ~                                            DISPLAY "Interrupt Blocker Enabled"
 647  B1B1 ~                                            ei
 648  B1B1 ~                                            reti
 649  B1B1                                      ELSE
 650  B1B1                                              DISPLAY "Interrupt Blocker Disabled"
 651  B1B1                                      ENDIF
 652  B1B1 F5 C5 D5 E5                          push    af,,bc,,de,,hl,,ix,,iy
 652  B1B5 DD E5 FD E5
 653  B1B9 08                                   ex      af,af'
 654  B1BA D9                                   exx
 655  B1BB F5 C5 D5 E5                          push    af,,bc,,de,,hl
 656  B1BF 21 B4 7F                             ld      hl,InterruptCounter
 657  B1C2 34                                   inc     (hl)                        ; cycles each interrupt
 658  B1C3                                      ;break
 659  B1C3 CD D7 B1     IM2SoundHandler:        call    IM2Sound                    ; This is a self modifying code address to change the actual sound vector if we are doing special music e.g. intro or docking
 660  B1C6 E1 D1 C1 F1                          pop    af,,bc,,de,,hl
 661  B1CA 08                                   ex      af,af'
 662  B1CB D9                                   exx
 663  B1CC FD E1 DD E1                          pop     af,,bc,,de,,hl,,ix,,iy
 663  B1D0 E1 D1 C1 F1
 664  B1D4 FB           .IMFinishup:            ei
 665  B1D5 ED 4D                                reti
 666  B1D7                  DISPLAY "Interrupt Handler Ends at",$
 667  B1D7              EndOfNonBanked:
 668  B1D7                  DISPLAY "Non Banked Code + Interrupt Handler Ends At", EndOfNonBanked
 669  B1D7
 670  B1D7
 671  B1D7              ;SaveMMU6:               MACRO
 672  B1D7              ;                        GetNextReg  MMU_SLOT_6_REGISTER
 673  B1D7              ;                        ld      (SavedMMU6),a
 674  B1D7              ;                        ENDM
 675  B1D7              ;
 676  B1D7              ;RestoreMMU6:            MACRO
 677  B1D7              ;                        ld      a,(SavedMMU6)               ; now restore up post interrupt
 678  B1D7              ;                        nextreg MMU_SLOT_6_REGISTER,a       ; Restore MMU7
 679  B1D7              ;                        ENDM
 680  B1D7              ;
 681  B1D7              ;SaveMMU7:               MACRO
 682  B1D7              ;                        GetNextReg  MMU_SLOT_7_REGISTER
 683  B1D7              ;                        ld      (SavedMMU7),a
 684  B1D7              ;                        ENDM
 685  B1D7              ;
 686  B1D7              ;RestoreMMU7:            MACRO
 687  B1D7              ;                        ld      a,(SavedMMU7)               ; now restore up post interrupt
 688  B1D7              ;                        nextreg MMU_SLOT_7_REGISTER,a       ; Restore MMU7
 689  B1D7              ;                        ENDM
 690  B1D7
 691  B1D7              IM2Sound:               SaveMMU7
 691  B1D7             >                    GetNextReg  MMU_SLOT_7_REGISTER
 691  B1D7 01 3B 24    >            ld bc,$243B
 691  B1DA 3E 57       >            ld a,MMU_SLOT_7_REGISTER
 691  B1DC ED 79       >            out (c),a
 691  B1DE 04          >            inc b
 691  B1DF ED 78       >            in a,(c)
 691  B1E1 32 08 B1    >                    ld      (SavedMMU7),a
 692  B1E4                                      MMUSelectSound
 692  B1E4 ED 91 57 64 >                     nextreg SoundMMU,		    BankSound
 693  B1E8                                      ; This is a self modifying code address to change the
 694  B1E8                                      ; actual sound vector if we are doing special music
 695  B1E8                                      ; e.g. intro or docking
 696  B1E8 CD 00 E0     .IM2SoundHandler:       call    SoundInterruptHandler       ; this does the work
 697  B1EB              .DoneInterrupt:         RestoreMMU7
 697  B1EB 3A 08 B1    >                    ld      a,(SavedMMU7)               ; now restore up post interrupt
 697  B1EE ED 92 57    >                    nextreg MMU_SLOT_7_REGISTER,a       ; Restore MMU7
 698  B1F1 C9                                   ret
 699  B1F2
 700  B1F2
 701  B1F2              IM2PlayDanube:          SaveMMU7
 701  B1F2             >                    GetNextReg  MMU_SLOT_7_REGISTER
 701  B1F2 01 3B 24    >            ld bc,$243B
 701  B1F5 3E 57       >            ld a,MMU_SLOT_7_REGISTER
 701  B1F7 ED 79       >            out (c),a
 701  B1F9 04          >            inc b
 701  B1FA ED 78       >            in a,(c)
 701  B1FC 32 08 B1    >                    ld      (SavedMMU7),a
 702  B1FF                                      MMUSelectSound
 702  B1FF ED 91 57 64 >                     nextreg SoundMMU,		    BankSound
 703  B203                                      ; This is a self modifying code address to change the
 704  B203                                      ; actual sound vector if we are doing special music
 705  B203                                      ; e.g. intro or docking
 706  B203 CD 1B E4     .IM2SoundHandler:       call    PlayDanube                  ; this does the work
 707  B206              .DoneInterrupt:         RestoreMMU7
 707  B206 3A 08 B1    >                    ld      a,(SavedMMU7)               ; now restore up post interrupt
 707  B209 ED 92 57    >                    nextreg MMU_SLOT_7_REGISTER,a       ; Restore MMU7
 708  B20C C9                                   ret
 709  B20D
 710  B20D              IM2AttractMode:         ;break
 711  B20D                                  IFDEF SKIPATTRACTMUSIC
 712  B20D ~                                    DISPLAY "Attract mode Music disabled"
 713  B20D                                  ELSE
 714  B20D                                      DISPLAY "Attract mode Music enabled"
 715  B20D CD F2 B1                             call    IM2PlayDanube
 716  B210                                  ENDIF
 717  B210                                  IFDEF SKIPATTRACTGRAPHICS
 718  B210 ~                                    DISPLAY "Attract mode graphics disabled"
 719  B210                                  ELSE
 720  B210                                      DISPLAY "Attract mode graphics enabled"
 721  B210                                      SaveMMU6
 721  B210             >                    GetNextReg  MMU_SLOT_6_REGISTER
 721  B210 01 3B 24    >            ld bc,$243B
 721  B213 3E 56       >            ld a,MMU_SLOT_6_REGISTER
 721  B215 ED 79       >            out (c),a
 721  B217 04          >            inc b
 721  B218 ED 78       >            in a,(c)
 721  B21A 32 07 B1    >                    ld      (SavedMMU6),a
 722  B21D                                      SaveMMU7
 722  B21D             >                    GetNextReg  MMU_SLOT_7_REGISTER
 722  B21D 01 3B 24    >            ld bc,$243B
 722  B220 3E 57       >            ld a,MMU_SLOT_7_REGISTER
 722  B222 ED 79       >            out (c),a
 722  B224 04          >            inc b
 722  B225 ED 78       >            in a,(c)
 722  B227 32 08 B1    >                    ld      (SavedMMU7),a
 723  B22A                                      ;break
 724  B22A CD 0A 79                             call    AttractModeUpdate
 725  B22D                                      RestoreMMU6
 725  B22D 3A 07 B1    >                    ld      a,(SavedMMU6)               ; now restore up post interrupt
 725  B230 ED 92 56    >                    nextreg MMU_SLOT_6_REGISTER,a       ; Restore MMU7
 726  B233                                      RestoreMMU7
 726  B233 3A 08 B1    >                    ld      a,(SavedMMU7)               ; now restore up post interrupt
 726  B236 ED 92 57    >                    nextreg MMU_SLOT_7_REGISTER,a       ; Restore MMU7
 727  B239                                  ENDIF
 728  B239 C9                                   ret
 729  B23A
 730  B23A              ; ARCHIVED INCLUDE "Menus/draw_fuel_and_crosshair.asm"
 731  B23A              ;INCLUDE "./title_page.asm"
 732  B23A
 733  B23A              ; Blocks dependent on variables in Universe Banks
 734  B23A              ; Bank 49
 735  B23A              ;    SEG RESETUNIVSEG
 736  B23A              ;seg     CODE_SEG,       4:              $0000,       $8000                 ; flat address
 737  B23A              ;seg     RESETUNIVSEG,   BankResetUniv:  StartOfBank, ResetUniverseAddr
 738  B23A
 739  B23A
 740  B23A
 741  B23A              ;	ORG ResetUniverseAddr
 742  B23A              ;INCLUDE "./GameEngine/resetUniverse.asm"
 743  B23A              ; Bank 50  ------------------------------------------------------------------------------------------------------------------------
 744  B23A                  SLOT    MenuShrChtAddr
 745  B23A                  PAGE    BankMenuShrCht
 746  B23A              	ORG     MenuShrChtAddr,BankMenuShrCht
 747  C000                  INCLUDE "./Menus/short_range_chart_menu.asm"
# file opened: ./Menus/short_range_chart_menu.asm
   1+ C000
   2+ C000
   3+ C000 53 68 6F 72  short_range_page_marker  DB "ShortRange  PG50"
   3+ C004 74 52 61 6E
   3+ C008 67 65 20 20
   3+ C00C 50 47 35 30
   4+ C010
   5+ C010 30 00        short_range_boiler_text	DW $0030
   5+ C012 02             DB $02
   5+ C013 A6 8F          DW TextBuffer
   6+ C015              short_range_header		equ 12
   7+ C015              src_xy_centre			equ $6080
   8+ C015              src_x_centre			equ 160
   9+ C015              src_y_centre			equ $60
  10+ C015              src_star_x_centre		equ 160 - 8 ; adjusted for sprite centre
  11+ C015              src_star_y_centre		equ $60 - 8 ; adjusted for sprite centre
  12+ C015              local_chart_star_colour	equ 216
  13+ C015 00 00        local_dx				dw 0
  14+ C017 00 00        local_dy				dw 0
  15+ C019              local_max_range_x		equ 20
  16+ C019              local_max_range_y		equ $26
  17+ C019 00           local_name_row			db	0
  18+ C01A 00 00        local_name_col			dw	0   ; Moved to 320 mode
  19+ C01C              local_label_shift_x		equ	3 ; Incluing offset for 320 mode in charactres
  20+ C01C              local_label_shift_y		equ	32-5 ; Incluing offset for 320 mode in pixels
  21+ C01C
  22+ C01C 44 69 73 74  src_distance            DB "Distance: "
  22+ C020 61 6E 63 65
  22+ C024 3A 20
  23+ C026 30 30 30     src_dist_amount         DB "000"
  24+ C029 2E           src_decimal             DB "."
  25+ C02A 30           src_fraction            DB "0"
  26+ C02B 20 4C 69 67  src_dis_ly              DB " Light Years",0
  26+ C02F 68 74 20 59
  26+ C033 65 61 72 73
  26+ C037 00
  27+ C038 20 20 30 2E  src_default_dist        DB "  0.0"
  27+ C03C 30
  28+ C03D
  29+ C03D 00 00 00...  src_distance_val        DS  6
  30+ C043              src_fill_buffer_len     EQU 32
  31+ C043              src_fill_buffer_size    EQU 4 * src_fill_buffer_len                          ; up to 32 labels topx topy lengthx spare
  32+ C043                          DISPLAY "TODO: space for occupied cells may mvoe to bit flags"
  33+ C043 00 00 00...  src_printed_text        DS  src_fill_buffer_size                             ; space for occupied cells may move to bit flags later TODO
  34+ C0C3 00           src_buffer_size         DB  0
  35+ C0C4              ;----------------------------------------------------------------------------------------------------------------------------------
  36+ C0C4              ; Change to display
  37+ C0C4              ; now 320 mode, will hold 32 lines by 40 columns (not all can hold text)
  38+ C0C4              ; buffer row will have row, col, length as number of characters occupied
  39+ C0C4              ; when drawing text, will now draw a line from the star to the text, )poss underline?)
  40+ C0C4              ; up to 32 stars in local chart (this will be overkill)
  41+ C0C4              ; each entry will be row (pixel), col (pixel), col to (pixel)
  42+ C0C4 00 00 00...  src_320_label_buffer    DS  32 * 4
  43+ C144              ;----------------------------------------------------------------------------------------------------------------------------------
  44+ C144 06 01        SRM_print_boiler_text:  ld		b,1
  45+ C146 DD 21 10 C0                          ld		ix,short_range_boiler_text
  46+ C14A C5           .BoilerTextLoop:        push	bc			; Save Message Count loop value
  47+ C14B DD 6E 00                             ld		l,(ix+0)	; Get col into hl
  48+ C14E DD 66 01                             ld		h,(ix+1)	;
  49+ C151 DD 46 02                             ld		b,(ix+2)	; get row into b
  50+ C154 DD 5E 03                             ld		e,(ix+3)	; Get text address into hl
  51+ C157 DD 56 04                             ld		d,(ix+4)	; .
  52+ C15A DD E5                                push    ix          ; save ix and prep for add via hl
  53+ C15C                                      MMUSelectLayer2
  53+ C15C ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
  54+ C160                                      print_msg_at_de_at_b_hl_macro txt_status_colour
  54+ C160 0E FF       >                        ld      c,txt_status_colour
  54+ C162 CD 4B E6    >                        call    l2_print_at_320
  55+ C165 E1                                   pop     hl          ; add 5 to ix
  56+ C166 3E 05                                ld      a,5         ; .
  57+ C168 ED 31                                add     hl,a        ; .
  58+ C16A E5 DD E1                             ld      ix,hl       ; .
  59+ C16D C1                                   pop		bc
  60+ C16E 10 DA                                djnz	.BoilerTextLoop
  61+ C170 C9                                   ret
  62+ C171              ;----------------------------------------------------------------------------------------------------------------------------------
  63+ C171              ; Initially we'll just do it as before then work out an offset/scaling
  64+ C171              SRM_draw_chart_circle_and_crosshair:
  65+ C171 ED 4B 58 80                          ld		bc,(PresentSystemX)				; bc = present system?????
  66+ C175
  67+ C175                                      MMUSelectSpriteBank
  67+ C175 ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
  68+ C179 CD 66 E1                             call	sprite_local_cursor
  69+ C17C
  70+ C17C                                      MMUSelectLayer2
  70+ C17C ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
  71+ C180
  72+ C180 01 80 60                             ld      bc,src_xy_centre
  73+ C183 CD 3F EF                             call    l2_draw_circle
  74+ C186 01 80 60                             ld		bc,src_xy_centre				; must be ordered x y in data
  75+ C189 21 A0 00                             ld      hl,src_x_centre
  76+ C18C 3A 93 85                             ld		a,(Fuel)
  77+ C18F 57                                   ld		d,a
  78+ C190 1E FF                                ld		e,$FF
  79+ C192 CD 67 F1                             call	l2_draw_circle_320
  80+ C195 C9                                   ret
  81+ C196                                                      DISPLAY "TODO:  move cursor code"
  82+ C196              ; TODO MOVE CURSOR CODE
  83+ C196              ;----------------------------------------------------------------------------------------------------------------------------------
  84+ C196              SRM_draw_hyperspace_cross_hair:
  85+ C196 ED 4B 5A 80                          ld		bc,(TargetSystemX)              ; bc = selected jump
  86+ C19A ED 5B 58 80                          ld		de,(PresentSystemX)
  87+ C19E 0E A0                                ld		c,src_x_centre
  88+ C1A0 06 60                                ld		b,src_y_centre
  89+ C1A2                                      MMUSelectSpriteBank
  89+ C1A2 ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
  90+ C1A6 CD 6E E1                             call	sprite_local_hyper_cursor
  91+ C1A9 C9                                   ret
  92+ C1AA              ;----------------------------------------------------------------------------------------------------------------------------------
  93+ C1AA 3A 45 80     src_get_name:           ld      a,(Galaxy)
  94+ C1AD                                      MMUSelectGalaxyA
  94+ C1AD ED 92 57    >                     nextreg GalaxyDataMMU,     a
  95+ C1B0 ED 4B 5A 80                          ld      bc,(TargetSystemX)
  96+ C1B4 ED 43 5B E8                          ld      (GalaxyTargetSystem),bc
  97+ C1B8 CD 64 FC                             call    galaxy_system_under_cursor
  98+ C1BB FE 00                                cp      0
  99+ C1BD C8                                   ret     z
 100+ C1BE CD 82 F6                             call	GetDigramWorkingSeed
 101+ C1C1 21 70 90                             ld		hl,name_expanded
 102+ C1C4 CD C7 8F                             call	CapitaliseString
 103+ C1C7 21 70 90                             ld		hl, name_expanded
 104+ C1CA 3E FF                                ld      a,$FF
 105+ C1CC C9                                   ret
 106+ C1CD              ;----------------------------------------------------------------------------------------------------------------------------------
 107+ C1CD              SRM_update_hyperspace_cross_hair:
 108+ C1CD ED 4B 5A 80                          ld		bc,(TargetSystemX)              ; bc = selected jump
 109+ C1D1 ED 5B 58 80                          ld		de,(PresentSystemX)
 110+ C1D5 79                                   ld		a,c                             ; a = target x pos
 111+ C1D6 93                                   sub		e                               ; a = target x - present x
 112+ C1D7 F2 E8 C1                             jp      p,.NoFlipX                      ; if > 0 skip next bit
 113+ C1DA ED 44                                neg                                     ; c = a = abs a * 4
 114+ C1DC CB 27                                sla		a                               ; .
 115+ C1DE CB 27                                sla		a                               ; .
 116+ C1E0 4F                                   ld      c,a                             ;  .
 117+ C1E1 3E A0                                ld      a,src_x_centre                  ; c = a = centre screen - c
 118+ C1E3 91                                   sub     c                               ; .
 119+ C1E4 4F                                   ld      c,a                             ; .
 120+ C1E5 C3 EF C1                             jp      .fixY                           ;. now do Y
 121+ C1E8 CB 27        .NoFlipX:               sla		a
 122+ C1EA CB 27                                sla		a
 123+ C1EC C6 A0                                add		a,src_x_centre
 124+ C1EE 4F                                   ld      c,a
 125+ C1EF 78           .fixY:                  ld		a,b                             ; for Y its * 2
 126+ C1F0 92                                   sub		d
 127+ C1F1 F2 00 C2                             jp      p,.NoFlipY
 128+ C1F4 ED 44                                neg
 129+ C1F6 CB 27                                sla     a
 130+ C1F8 47                                   ld      b,a
 131+ C1F9 3E 60                                ld      a,src_y_centre
 132+ C1FB 90                                   sub     b
 133+ C1FC 47                                   ld      b,a
 134+ C1FD C3 05 C2                             jp      .RedrawSprite
 135+ C200 CB 27        .NoFlipY                sla		a
 136+ C202 C6 60                                add		a,src_y_centre
 137+ C204 47                                   ld		b,a
 138+ C205              .RedrawSprite:          MMUSelectSpriteBank
 138+ C205 ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
 139+ C209 CD 41 E1                             call	sprite_lhc_move
 140+ C20C CD 3E C2                             call    src_name_current
 141+ C20F C9                                   ret
 142+ C210
 143+ C210 26 08        src_clear_name_area:    ld      h,8
 144+ C212 11 E3 A0                             ld      de,$A000 | COLOUR_TRANSPARENT
 145+ C215 01 0A A8                             ld      bc,$A80A
 146+ C218 E5           .ClearLoop:             push    hl
 147+ C219 D5                                   push    de
 148+ C21A C5                                   push    bc
 149+ C21B                                      MMUSelectLayer2
 149+ C21B ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 150+ C21F CD A7 E7                             call	l2_draw_horz_line
 151+ C222 C1                                   pop     bc
 152+ C223 D1                                   pop     de
 153+ C224 E1                                   pop     hl
 154+ C225 04                                   inc     b
 155+ C226 25                                   dec     h
 156+ C227 20 EF                                jr      nz,.ClearLoop
 157+ C229 C9                                   ret
 158+ C22A              ;----------------------------------------------------------------------------------------------------------------------------------
 159+ C22A 3A 45 80     src_system_undercursor: ld      a,(Galaxy)
 160+ C22D                                      MMUSelectGalaxyA
 160+ C22D ED 92 57    >                     nextreg GalaxyDataMMU,     a
 161+ C230 ED 4B 5A 80                          ld      bc,(TargetSystemX)
 162+ C234 ED 43 5B E8                          ld      (GalaxyTargetSystem),bc
 163+ C238 CD 64 FC                             call    galaxy_system_under_cursor
 164+ C23B FE 00                                cp      0
 165+ C23D C8                                   ret     z
 166+ C23E CD AA C1     src_name_current:       call    src_get_name
 167+ C241 FE 00                                cp      0
 168+ C243 C8                                   ret     z
 169+ C244 E5                                   push    hl
 170+ C245 F5                                   push    af
 171+ C246 CD 10 C2                             call    src_clear_name_area
 172+ C249                                      ;ld      bc,$A80A
 173+ C249                                      ;ld		e,$FF
 174+ C249 EB                                   ex      de,hl
 175+ C24A 06 A0                                ld      b,$A0
 176+ C24C 21 A0 00                             ld      hl, $00A0
 177+ C24F 0E FF                                ld      c,$FF
 178+ C251                                      MMUSelectLayer2
 178+ C251 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 179+ C255 CD 4B E6                             call    l2_print_at_320         ;b = row, hl = col, de = addr of message, c = color
 180+ C258                                      ;call	l2_print_7at            ; bc= colrow, hl = addr of message, e = colour"
 181+ C258 F1                                   pop     af
 182+ C259 E1                                   pop     hl
 183+ C25A CD 70 C2                             call    src_calc_distance
 184+ C25D 11 1C C0                             ld      de,src_distance
 185+ C260 01 B0 00                             ld      bc,$B0
 186+ C263 21 0A 00                             ld      hl,$0A
 187+ C266 0E FF                                ld		c,$FF
 188+ C268                                      MMUSelectLayer2
 188+ C268 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 189+ C26C CD 4B E6                             call	l2_print_at_320
 190+ C26F C9                                   ret
 191+ C270              ;----------------------------------------------------------------------------------------------------------------------------------
 192+ C270 3A 45 80     src_calc_distance:      ld      a,(Galaxy)                                      ; Default in 0 distance
 193+ C273                                      MMUSelectGalaxyA
 193+ C273 ED 92 57    >                     nextreg GalaxyDataMMU,     a
 194+ C276 11 26 C0                             ld      de,src_dist_amount
 195+ C279 21 38 C0                             ld      hl,src_default_dist
 196+ C27C ED A0                                ldi
 197+ C27E ED A0                                ldi
 198+ C280 ED A0                                ldi
 199+ C282 ED A0                                ldi
 200+ C284 ED A0                                ldi
 201+ C286 ED 4B 58 80                          ld      bc,(PresentSystemX)
 202+ C28A ED 43 57 E8                          ld      (GalaxyPresentSystem),bc
 203+ C28E ED 4B 5A 80                          ld      bc,(TargetSystemX)
 204+ C292 ED 43 59 E8                          ld      (GalaxyDestinationSystem),bc
 205+ C296 CD F7 FB                             call    galaxy_find_distance                            ; get distance into HL
 206+ C299 DD 2A 7A 80                          ld      ix,(Distance)
 207+ C29D 11 00 00                             ld      de,0
 208+ C2A0 FD 21 3D C0                          ld      iy,src_distance_val
 209+ C2A4 CD C1 9D                             call    DispDEIXtoIY                                    ; use DEIX as distance and write to string at location IY
 210+ C2A7 FD E5                                push    iy
 211+ C2A9 E1                                   pop     hl                                              ; hl = iy
 212+ C2AA 11 3D C0                             ld      de,src_distance_val
 213+ C2AD 7E                                   ld		a,(hl)				                            ;Push last digit to post decimal
 214+ C2AE 32 2A C0                             ld		(src_fraction),a
 215+ C2B1 2B                                   dec     hl
 216+ C2B2 CD EA 9A                             call    compare16HLDE
 217+ C2B5 38 18                                jr      c,.done_number
 218+ C2B7 7E                                   ld      a,(hl)
 219+ C2B8 32 28 C0                             ld      (src_dist_amount+2),a
 220+ C2BB 2B                                   dec     hl
 221+ C2BC CD EA 9A                             call    compare16HLDE
 222+ C2BF 38 0E                                jr      c,.done_number
 223+ C2C1 7E                                   ld      a,(hl)
 224+ C2C2 32 27 C0                             ld      (src_dist_amount+1),a
 225+ C2C5 2B                                   dec     hl
 226+ C2C6 CD EA 9A                             call    compare16HLDE
 227+ C2C9 38 04                                jr      c,.done_number
 228+ C2CB 7E                                   ld      a,(hl)
 229+ C2CC 32 26 C0                             ld      (src_dist_amount),a
 230+ C2CF C9           .done_number:           ret
 231+ C2D0
 232+ C2D0 00 00        PosScan1                DW      0
 233+ C2D2 00 00        PosScan2                DW      0
 234+ C2D4              ; bc = row col, d = xlength e = y length
 235+ C2D4              ; Check logic simplies to , if 1 = bc and 2 = de:
 236+ C2D4              ; 12   X1            X2    OK         2 LT X1
 237+ C2D4              ; 1    X1  2         X2    FAIL       1 LT X1 && 2 GT X1 && 2 LT X2
 238+ C2D4              ;      X1  12        X2    FAIL       1 GT X1 && 1 LT X2 && 2 GT X1 && 2 LT X2
 239+ C2D4              ;      X1  1         X2 2  FAIL       1 GT X1 && 1 LT X2 && 2 GT X2
 240+ C2D4              ;      X1            X2 12 OK         1 GT X2
 241+ C2D4              ; Checks to see if we have enough room to print text. src_printed_text holds the buffer
 242+ C2D4              ; Carry flag is set on failure
 243+ C2D4 79           FreeSlotCheck:          ld      a,c                     ;
 244+ C2D5 32 06 C3                             ld      (.CheckStartX+1),a       ; Top Left X (get it in now whilst its in a
 245+ C2D8 83                                   add     a,e                     ;
 246+ C2D9 30 02                                jr      nc,.NoOverflow          ;
 247+ C2DB 3E FF        .Overflow:              ld      a,$FF                   ; Make length max
 248+ C2DD 32 17 C3     .NoOverflow:            ld      (.CheckEndX+1),a         ; Bottom Right X
 249+ C2E0 78                                   ld      a,b                     ; d = height in pixels
 250+ C2E1 32 FD C2                             ld      (.CheckStartY+1),a       ; Top Left Y
 251+ C2E4 C6 08                                add     a,8                     ; Bottom Right Y
 252+ C2E6 32 0F C3                             ld      (.CheckEndY+1),a
 253+ C2E9 3A C3 C0     .CheckBoxes:            ld      a,(src_buffer_size)     ; If buffer is empty no check
 254+ C2EC FE 00                                cp      0                       ; .
 255+ C2EE 28 3B                                jr      z,.SafeToPrint          ; .
 256+ C2F0 DD 21 43 C0                          ld      ix,src_printed_text     ; Buffer list
 257+ C2F4 47                                   ld      b,a
 258+ C2F5 DD 7E 03     .CheckBoxLoop:          ld      a,(ix+3)                ; zero length buffer entry gets skipped
 259+ C2F8 FE 00                                cp      0                       ; .
 260+ C2FA 28 24                                jr      z,.NoMatch              ; .                                          .Example $5D,$0C to $65,$11 93,12 to 101,17
 261+ C2FC 3E 00        .CheckStartY:           ld      a,$00                   ; get start row                              .Compare $52,$0D to $62,$0F 82,13 to 98,15
 262+ C2FE 3C                                   inc     a                       ; as we do GTE not GT                        .$5D < $62 so potential hit
 263+ C2FF                                      JumpIfAGTENusng (ix+2), .NoMatch; Start Y > BottomRightY then not applicable .$0C < $0F so potential hit
 263+ C2FF DD BE 02    >                        cp     (ix+2)
 263+ C302 D2 20 C3    >                        jp		nc,.NoMatch
 264+ C305 3E 00        .CheckStartX:           ld      a,$00                   ; get start col                              .$65 > $52 so potential hit
 265+ C307 3C                                   inc     a                       ; as we do GTE not GT                        .$11 < $0D so potential hit
 266+ C308                                      JumpIfAGTENusng (ix+3), .NoMatch; Start X > BottomRightX then not applicable .
 266+ C308 DD BE 03    >                        cp     (ix+3)
 266+ C30B D2 20 C3    >                        jp		nc,.NoMatch
 267+ C30E 3E 00        .CheckEndY:             ld      a,$00                   ;                                            .
 268+ C310                                      JumpIfALTNusng  (ix+0), .NoMatch; End Y < TopLeft Y then not applicable      .
 268+ C310 DD BE 00    >                        cp      (ix+0)
 268+ C313 DA 20 C3    >                        jp		c, .NoMatch
 269+ C316 3E 00        .CheckEndX:             ld      a,$00                   ;                                            .
 270+ C318                                      JumpIfALTNusng (ix+1),  .NoMatch; End X < TopLeft X then not applicable      .
 270+ C318 DD BE 01    >                        cp      (ix+1)
 270+ C31B DA 20 C3    >                        jp		c, .NoMatch
 271+ C31E              ;.......................If we get here then there is an overlap so fails
 272+ C31E              .MatchedBox:            SetCarryFlag ; changed from a holding result ld      a,$FF
 272+ C31E 37          >                        scf
 273+ C31F C9                                   ret
 274+ C320              ;.......................If we get here then there was no overlap so check next box
 275+ C320 DD 23        .NoMatch:               inc     ix
 276+ C322 DD 23                                inc     ix
 277+ C324 DD 23                                inc     ix
 278+ C326 DD 23                                inc     ix
 279+ C328 10 CB                                djnz    .CheckBoxLoop
 280+ C32A              ;.......................If we get here then there was no overlap in the entire buffer so good
 281+ C32A 44           .NoBoxMatched:          ld      b,h                     ; restore bc
 282+ C32B 21 43 C0     .SafeToPrint:           ld      hl,src_printed_text
 283+ C32E 3A C3 C0                             ld      a,(src_buffer_size)     ; now we have to work on buffer size as 1 per 4 byte group
 284+ C331 57                                   ld      d,a                     ; but move the pointer on by 4 before writing out next entry
 285+ C332 3C                                   inc     a                       ;
 286+ C333 32 C3 C0                             ld      (src_buffer_size),a     ; write out now as we have it in a reg
 287+ C336 1E 04                                ld      e,4                     ; hl moves on 4 bytes
 288+ C338 ED 30                                mul     de                      ; .
 289+ C33A 19                                   add     hl,de                   ; .
 290+ C33B 3A FD C2                             ld      a,(.CheckStartY+1)       ; Copy from modified code
 291+ C33E 77                                   ld      (hl),a                  ;
 292+ C33F 23                                   inc     hl                      ;
 293+ C340 3A 06 C3                             ld      a,(.CheckStartX+1)       ;
 294+ C343 77                                   ld      (hl),a                  ;
 295+ C344 23                                   inc     hl                      ;
 296+ C345 3A 0F C3                             ld      a,(.CheckEndY+1)         ;
 297+ C348 77                                   ld      (hl),a                  ;
 298+ C349 23                                   inc     hl                      ;
 299+ C34A 3A 17 C3                             ld      a,(.CheckEndX+1)         ;
 300+ C34D 77                                   ld      (hl),a                  ;
 301+ C34E                                      ClearCarryFlag; changed from a holing result xor     a
 301+ C34E B7          >                        or a
 302+ C34F C9                                   ret
 303+ C350
 304+ C350
 305+ C350              ; takes memorty location local_name_col and local_name_row as character positions of text
 306+ C350 CD 72 86     src_label_system:       call	copy_system_to_working                      ; set up working seed
 307+ C353 3A 45 80                             ld      a,(Galaxy)                                  ; and name
 308+ C356                                      MMUSelectGalaxyA                                    ;
 308+ C356 ED 92 57    >                     nextreg GalaxyDataMMU,     a
 309+ C359 CD 82 F6                             call	GetDigramWorkingSeed                        ;
 310+ C35C 21 70 90                             ld		hl,name_expanded                            ; so hl points to name string
 311+ C35F CD C7 8F                             call	CapitaliseString                            ; .
 312+ C362 3A 19 C0                             ld		a,(local_name_row)                          ; row position in characters
 313+ C365 C6 03                                add		a,3
 314+ C367 47                                   ld		b,a					                        ; b = effective pixel row
 315+ C368 3A 1A C0                             ld      a,(local_name_col)                          ; column position in characters
 316+ C36B 0E 03                                ld      c,local_label_shift_x
 317+ C36D 81                                   add     a,c
 318+ C36E 32 1A C0                             ld      (local_name_col),a
 319+ C371 4F                                   ld		c,a                                         ; c = effective char col
 320+ C372 1E 00        .GetStringName:         ld      e,0
 321+ C374 21 70 90                             ld      hl,name_expanded
 322+ C377 7E           .getStringLoop:         ld      a,(hl)
 323+ C378 23                                   inc     hl
 324+ C379 1C                                   inc     e
 325+ C37A FE 00                                cp      0                                           ; String must have a terminator to work
 326+ C37C 20 F9                                jr      nz,.getStringLoop
 327+ C37E 16 08                                ld      d,8
 328+ C380              ;.......................first attempt bc = row col e = chars
 329+ C380 C5 D5        .attempt1:              push    bc,,de
 330+ C382 CD D4 C2                             call    FreeSlotCheck
 331+ C385 D1 C1                                pop     bc,,de
 332+ C387 30 31                                jr      nc,.OKToPrint
 333+ C389              ;.......................attempt 2 left of star name
 334+ C389 79           .attempt2:              ld      a,c                     ; col = col - (e+1)
 335+ C38A                                      ClearCarryFlag                  ;
 335+ C38A B7          >                        or a
 336+ C38B 9B                                   sbc     a,e                     ; move to the left
 337+ C38C FA A1 C3                             jp      m,.attempt3             ; but negative X is bad
 338+ C38F DE 03                                sbc     a, 3                    ; 3 characters + half star width
 339+ C391 FA A1 C3                             jp      m,.attempt3             ; but negative X is bad
 340+ C394 4F                                   ld      c,a                     ; we can load to col as its good
 341+ C395 C5 D5                                push    bc,,de
 342+ C397 CD D4 C2                             call    FreeSlotCheck
 343+ C39A D1 C1                                pop     bc,,de
 344+ C39C 30 1C                                jr      nc,.OKToPrint
 345+ C39E 79           .recoverattempt2:       ld      a,c                     ; if it failed then we adjust col back to original value
 346+ C39F 3C                                   inc     a
 347+ C3A0 83                                   add     e
 348+ C3A1              ;.......................attempt 3 down 8 pixels
 349+ C3A1 78           .attempt3:              ld      a,b
 350+ C3A2 C6 08                                add     a,8
 351+ C3A4 47                                   ld      b,a
 352+ C3A5 C5 D5                                push    bc,,de
 353+ C3A7 CD D4 C2                             call    FreeSlotCheck
 354+ C3AA D1 C1                                pop     bc,,de
 355+ C3AC 30 0C                                jr      nc,.OKToPrint
 356+ C3AE              ;.......................attempt 4 down 16 pixels
 357+ C3AE 78           .attempt4:              ld      a,b
 358+ C3AF D6 10                                sub     16
 359+ C3B1 47                                   ld      b,a
 360+ C3B2 C5 D5                                push    bc,,de
 361+ C3B4 CD D4 C2                             call    FreeSlotCheck           ; attempt down 8 pixels attemps
 362+ C3B7 D1 C1                                pop     bc,,de
 363+ C3B9 D8                                   ret     c                       ; give up on attempt 3
 364+ C3BA 16 08        .OKToPrint:             ld      d,8                     ; de = c = column in characters
 365+ C3BC 59                                   ld      e,c                     ; .
 366+ C3BD ED 30                                mul     de                      ; hl = de = hl in pixles
 367+ C3BF EB                                   ex      de,hl                   ; .
 368+ C3C0 11 70 90                             ld		de,name_expanded
 369+ C3C3 0E FF                                ld		c,$FF
 370+ C3C5                                      MMUSelectLayer2
 370+ C3C5 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 371+ C3C9 CD 60 E6                             call	l2_print_at_320_precise         ;b = row, hl = col, de = addr of message, c = color
 372+ C3CC C9                                   ret
 373+ C3CD
 374+ C3CD AF           plot_local_stars:       xor		a
 375+ C3CE 32 BB 7F                             ld		(XSAV),a
 376+ C3D1 DD 21 16 E0                          ld      ix,galaxy_data
 377+ C3D5 32 C3 C0                             ld      (src_buffer_size),a
 378+ C3D8 21 43 C0     SRCClearNameList:       ld		hl,src_printed_text
 379+ C3DB 11 80 00                             ld		de,src_fill_buffer_size
 380+ C3DE CD 32 7E                             call	memfill_dma
 380+ C3E1
 381+ C3E1 AF           SRCCounterLoop:         xor		a
 382+ C3E2 3A 45 80                             ld      a,(Galaxy)
 383+ C3E5                                      MMUSelectGalaxyA
 383+ C3E5 ED 92 57    >                     nextreg GalaxyDataMMU,     a
 384+ C3E8 DD E5                                push    ix
 385+ C3EA DD E5                                push    ix
 386+ C3EC E1                                   pop     hl
 387+ C3ED 11 2E 80                             ld      de,SystemSeed
 388+ C3F0 CD 45 86                             call    copy_seed
 389+ C3F3 3A 2F 80                             ld		a,(SystemSeed+1)				; QQ15+1 \ seed Ycoord of star
 390+ C3F6 4F                                   ld		c,a
 391+ C3F7 3A 59 80     SRCcalcLocaldy:         ld		a,(PresentSystemY)
 392+ C3FA 47                                   ld		b,a								; so b holds Y ccord of present system
 393+ C3FB 79                                   ld		a,c                             ; a = seed1 Y ccoord
 394+ C3FC 90                                   sub		b
 395+ C3FD CB 7F                                bit		7,a                             ; check range
 396+ C3FF 28 02                                jr		z,SRCpositivedy
 397+ C401 ED 44        SRCnegativedy:          neg
 398+ C403 FE 26        SRCpositivedy:          cp		local_max_range_y               ; ignore too far away
 399+ C405 30 64                                jr		nc,SRCtoofar
 400+ C407 3A 31 80     SRCcalcLocaldx:         ld		a,(SystemSeed+3)				; QQ15+3 \ seed Xcoord of star
 401+ C40A 4F                                   ld		c,a                             ; c= X coord
 402+ C40B 3A 58 80                             ld		a,(PresentSystemX)              ; b= current system X coord
 403+ C40E 47                                   ld		b,a								; . so b holds Y ccord
 404+ C40F 79                                   ld		a,c                             ; a= X coord - present X
 405+ C410 90                                   sub		b                               ;
 406+ C411 CB 7F                                bit		7,a                             ; check distance
 407+ C413 28 02                                jr		z,SRCpositivedx                 ;
 408+ C415 ED 44        SRCnegativedx:          neg                                     ;
 409+ C417 FE 14        SRCpositivedx:          cp		local_max_range_x               ;
 410+ C419 30 50                                jr		nc,SRCtoofar
 411+ C41B 3A 2F 80     SRCOKToPlot             ld		a,(SystemSeed+1)                ; OK so its in range, calc again (need to optimise this)
 412+ C41E 21 59 80                             ld		hl,PresentSystemY               ;
 413+ C421 96                                   sub		(hl)                            ;
 414+ C422 CB 27                                sla		a								; b = local_name_row = a =  (delta Y * 2) + screen center
 415+ C424 C6 58                                add		src_star_y_centre                    ; .
 416+ C426 32 5C C4                             ld		(.SystemPlotY+1),a              ; .
 417+ C429 32 19 C0                             ld      (local_name_row),a              ; local name row will be in pixels
 418+ C42C 3A 31 80                             ld		a,(SystemSeed+3)                ; hl = a = (deltaX * 4)
 419+ C42F 26 00                                ld      h,0
 420+ C431 6F                                   ld      l,a
 421+ C432 3A 58 80                             ld      a,(PresentSystemX)
 422+ C435 16 00                                ld      d,0
 423+ C437 5F                                   ld      e,a
 424+ C438                                      ClearCarryFlag
 424+ C438 B7          >                        or a
 425+ C439 ED 52                                sbc     hl,de
 426+ C43B EB                                   ex      hl,de                           ; put the result in de
 427+ C43C 06 02                                ld      b,2                             ; multiply by 2
 428+ C43E ED 28                                bsla    de,b                            ;
 429+ C440 3E 98                                ld      a,src_star_x_centre             ; .
 430+ C442 ED 32                                add     de,a                            ; .
 431+ C444 ED 53 59 C4                          ld      (.SystemPlotX+1),de             ; .
 432+ C448 06 03                                ld      b,3                             ; now divide by 8 to get char column
 433+ C44A ED 29                                bsra    de,b
 434+ C44C ED 53 1A C0                          ld      (local_name_col),de             ; colum for local name will be in characters
 435+ C450 3A 33 80                             ld		a,(SystemSeed+5)                ; radius = seed 5 & 3 + 2 (for now)
 436+ C453 E6 03                                and		%00000011                       ; .
 437+ C455 C6 02                                add		a,2                             ; .
 438+ C457 4F                                   ld		c,a                             ; .
 439+ C458 21 00 00     .SystemPlotX:           ld      hl,$0000                        ; colum number as pixels
 440+ C45B 06 00        .SystemPlotY:           ld      b,$00                           ; row number as pixels
 441+ C45D                                      MMUSelectSpriteBank
 441+ C45D ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
 442+ C461 CD C0 E6                             call	sprite_local_chart_show         ; B = row, hl = col, d = radius, e = colour
 443+ C464                                     ; call    src_get_name
 444+ C464                                      MMUSelectLayer2
 444+ C464 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 445+ C468 CD 50 C3                             call	src_label_system
 446+ C46B E1           SRCtoofar:              pop     hl
 447+ C46C ED 34 08 00                          add     hl,8
 448+ C470 E5                                   push    hl
 449+ C471 DD E1                                pop     ix
 450+ C473 3A BB 7F                             ld		a,(XSAV)
 451+ C476 3D                                   dec		a
 452+ C477 FE 00                                cp		0
 453+ C479 C8                                   ret		z
 454+ C47A 32 BB 7F                             ld		(XSAV),a
 455+ C47D C3 E1 C3                             jp		SRCCounterLoop
 456+ C480              ;----------------------------------------------------------------------------------------------------------------------------------
 457+ C480              draw_local_chart_menu:  MMUSelectLayer1
 457+ C480 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 458+ C484 CD 8F E0                             call	l1_cls
 459+ C487 3E 07                                ld		a,7
 460+ C489 CD AA E0                             call	l1_attr_cls_to_a
 461+ C48C                                      MMUSelectLayer2
 461+ C48C ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 462+ C490 CD 0C E0                             call    asm_l2_double_buffer_off
 463+ C493 CD C5 E3                             call    l2_320_initialise
 464+ C496 CD 40 E3                             call    l2_320_cls
 465+ C499                                      MMUSelectSpriteBank
 465+ C499 ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
 466+ C49D CD B7 E7                             call    sprite_cls_cursors
 467+ C4A0 CD E5 E7                             call    init_sprites_l2_prity
 468+ C4A3                                      MMUSelectLayer2
 468+ C4A3 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 469+ C4A7 CD 3D E7     .Drawbox:               call    l2_draw_menu_border
 470+ C4AA 01 C0 0A                             ld		bc,$0AC0
 471+ C4AD 21 01 00                             ld      hl,$0001
 472+ C4B0 11 3C 01                             ld		de,320-4
 473+ C4B3 CD FE E7                             call	l2_draw_horz_line_320       ;b = row; hl = col, de = length, c = color"
 474+ C4B6 3E 80                                ld      a,$80
 475+ C4B8 32 C3 7F                             ld      (MenuIdMax),a
 476+ C4BB                                      CopyPresentSystemToTarget               ; for short range we always start at present and cusor on present
 476+ C4BB 2A 58 80    >                        ld      hl,(PresentSystemX)
 476+ C4BE 22 5A 80    >                        ld      (TargetSystemX),hl
 477+ C4C1 3E 0C        SRCStaticText:          ld		a,short_range_header
 478+ C4C3 CD ED 8F                             call	expandTokenToString
 479+ C4C6 CD 44 C1                             call	SRM_print_boiler_text
 480+ C4C9 CD 3F 86     SRCSetUpChart:          call	copy_galaxy_to_system
 481+ C4CC DD 01                                break
 482+ C4CE CD CD C3                             call	plot_local_stars
 483+ C4D1 DD 01        .CircleandCrosshair:    break
 484+ C4D3 CD 71 C1                             call	SRM_draw_chart_circle_and_crosshair
 485+ C4D6 CD 96 C1                             call	SRM_draw_hyperspace_cross_hair
 486+ C4D9 C9                                   ret
 487+ C4DA              ;----------------------------------------------------------------------------------------------------------------------------------
 488+ C4DA 3A C1 81     local_chart_cursors:    ld     a,(CursorKeysPressed)
 489+ C4DD                                      ReturnIfAIsZero
 489+ C4DD A7          >                        and     a
 489+ C4DE C8          >                        ret     z
 490+ C4DF 17                                   rla
 491+ C4E0 DC F8 C4                             call   c,src_UpPressed
 492+ C4E3 17                                   rla
 493+ C4E4 DC 15 C5                             call   c,src_DownPressed
 494+ C4E7 17                                   rla
 495+ C4E8 DC 34 C5                             call   c,src_LeftPressed
 496+ C4EB 17                                   rla
 497+ C4EC DC 51 C5                             call   c,src_RightPressed
 498+ C4EF 17                                   rla
 499+ C4F0 DC 70 C5                             call   c,src_HomePressed
 500+ C4F3 17                                   rla
 501+ C4F4 DC 7A C5                             call   c,src_RecenterPressed
 502+ C4F7 C9                                   ret
 503+ C4F8              ;----------------------------------------------------------------------------------------------------------------------------------
 504+ C4F8 3A 5B 80     src_UpPressed:          ld     a,(TargetSystemY)
 505+ C4FB                                      JumpIfAIsZero   src_BoundsLimit
 505+ C4FB A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
 505+ C4FC CA 8F C5    >                        jp	    z, src_BoundsLimit
 506+ C4FF 47                                   ld      b,a                         ; save target as we will need it
 507+ C500 3A 59 80                             ld      a,(PresentSystemY)
 508+ C503 90                                   sub     b                           ; get the difference between present and target
 509+ C504 FA 0C C5                             jp      m,.SkipBoundsTest           ; if target is right of present, we can go left
 510+ C507                                      JumpIfAGTENusng 40,src_BoundsLimit  ; if no more than 20 then OK
 510+ C507 FE 28       >                        cp     40
 510+ C509 D2 8F C5    >                        jp		nc,src_BoundsLimit
 511+ C50C 78           .SkipBoundsTest:        ld      a,b
 512+ C50D 3D                                   dec     a
 513+ C50E 32 5B 80                             ld      (TargetSystemY),a
 514+ C511 CD CD C1                             call    SRM_update_hyperspace_cross_hair
 515+ C514 C9                                   ret
 516+ C515              ;----------------------------------------------------------------------------------------------------------------------------------
 517+ C515 3A 59 80     src_DownPressed:        ld     a,(PresentSystemY)
 518+ C518 47                                   ld      b,a
 519+ C519 3A 5B 80                             ld      a,(TargetSystemY)
 520+ C51C 4F                                   ld      c,a
 521+ C51D                                      JumpIfAEqNusng 128,src_BoundsLimit
 521+ C51D FE 80       >                        cp     128
 521+ C51F CA 8F C5    >                        jp      z,src_BoundsLimit
 522+ C522 90                                   sub     b
 523+ C523 FA 2B C5                             jp      m,.SkipBoundsTest
 524+ C526                                      JumpIfAGTENusng 40,src_BoundsLimit
 524+ C526 FE 28       >                        cp     40
 524+ C528 D2 8F C5    >                        jp		nc,src_BoundsLimit
 525+ C52B 79           .SkipBoundsTest:        ld      a,c
 526+ C52C 3C                                   inc    a
 527+ C52D 32 5B 80                             ld      (TargetSystemY),a
 528+ C530 CD CD C1                             call    SRM_update_hyperspace_cross_hair
 529+ C533 C9                                   ret
 530+ C534              ;----------------------------------------------------------------------------------------------------------------------------------
 531+ C534 3A 5A 80     src_LeftPressed:        ld      a,(TargetSystemX)           ; we can't move left if target is zero
 532+ C537                                      JumpIfAIsZero   src_BoundsLimit
 532+ C537 A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
 532+ C538 CA 8F C5    >                        jp	    z, src_BoundsLimit
 533+ C53B 47                                   ld      b,a                         ; save target as we will need it
 534+ C53C 3A 58 80                             ld      a,(PresentSystemX)
 535+ C53F 90                                   sub     b                           ; get the difference between present and target
 536+ C540 FA 48 C5                             jp      m,.SkipBoundsTest           ; if target is right of present, we can go left
 537+ C543                                      JumpIfAGTENusng 20,src_BoundsLimit  ; if no more than 20 then OK
 537+ C543 FE 14       >                        cp     20
 537+ C545 D2 8F C5    >                        jp		nc,src_BoundsLimit
 538+ C548 78           .SkipBoundsTest:        ld      a,b
 539+ C549 3D                                   dec     a
 540+ C54A 32 5A 80                             ld      (TargetSystemX),a
 541+ C54D CD CD C1                             call    SRM_update_hyperspace_cross_hair
 542+ C550 C9                                   ret
 543+ C551              ;----------------------------------------------------------------------------------------------------------------------------------
 544+ C551 3A 58 80     src_RightPressed:       ld      a,(PresentSystemX)
 545+ C554 47                                   ld      b,a
 546+ C555 3A 5A 80                             ld      a,(TargetSystemX)
 547+ C558 4F                                   ld      c,a
 548+ C559                                      JumpIfAEqNusng 255,src_BoundsLimit
 548+ C559 FE FF       >                        cp     255
 548+ C55B CA 8F C5    >                        jp      z,src_BoundsLimit
 549+ C55E 90                                   sub     b
 550+ C55F FA 67 C5                             jp      m,.SkipBoundsTest
 551+ C562                                      JumpIfAGTENusng 20,src_BoundsLimit
 551+ C562 FE 14       >                        cp     20
 551+ C564 D2 8F C5    >                        jp		nc,src_BoundsLimit
 552+ C567 79           .SkipBoundsTest:        ld      a,c
 553+ C568 3C                                   inc    a
 554+ C569 32 5A 80                             ld      (TargetSystemX),a
 555+ C56C CD CD C1                             call    SRM_update_hyperspace_cross_hair
 556+ C56F C9                                   ret
 557+ C570              ;----------------------------------------------------------------------------------------------------------------------------------
 558+ C570 2A 58 80     src_HomePressed:        ld      hl,(PresentSystemX)
 559+ C573 22 5A 80                             ld      (TargetSystemX),hl
 560+ C576 CD CD C1                             call    SRM_update_hyperspace_cross_hair
 561+ C579 C9                                   ret
 562+ C57A              ;----------------------------------------------------------------------------------------------------------------------------------
 563+ C57A 3A 45 80     src_RecenterPressed:    ld      a,(Galaxy)      ; DEBUG as galaxy n is not working
 564+ C57D                                      MMUSelectGalaxyA
 564+ C57D ED 92 57    >                     nextreg GalaxyDataMMU,     a
 565+ C580 ED 4B 5A 80                          ld      bc,(TargetSystemX)
 566+ C584 CD 70 FB                             call    find_nearest_to_bc
 567+ C587 ED 43 5A 80                          ld      (TargetSystemX),bc
 568+ C58B CD CD C1                             call    SRM_update_hyperspace_cross_hair
 569+ C58E C9                                   ret
 570+ C58F              ;----------------------------------------------------------------------------------------------------------------------------------
 571+ C58F AF           src_BoundsLimit:        xor     a
 572+ C590 C9                                   ret
 573+ C591
# file closed: ./Menus/short_range_chart_menu.asm
 748  C591                  DISPLAY "Bank ",BankMenuShrCht," - Bytes free ",/D, $2000 - ($-MenuShrChtAddr), " - BankMenuShrCht"
 749  C591              ; Bank 51  ------------------------------------------------------------------------------------------------------------------------
 750  C591                  SLOT    MenuGalChtAddr
 751  C591                  PAGE    BankMenuGalCht
 752  C591              	ORG     MenuGalChtAddr
 753  C000                  INCLUDE "./Menus//galactic_chart_menu.asm"
# file opened: ./Menus//galactic_chart_menu.asm
   1+ C000
   2+ C000 47 61 6C 61  galactic_chart_page_marker  DB "GalacticChrtPG51"
   2+ C004 63 74 69 63
   2+ C008 43 68 72 74
   2+ C00C 50 47 35 31
   3+ C010 40 02 A6 8F  galactic_chart_boiler_text	DW $0240,TextBuffer
   4+ C014              galactic_chart_header		equ 13
   5+ C014              galactic_star_colour		equ 216
   6+ C014              galactic_star_colour2		equ 108
   7+ C014              galactic_chart_y_offset		equ $18
   8+ C014              galactic_chart_hyper_offset equ 4
   9+ C014              galactic_chart_hyper_x_offset equ 32 - 4
  10+ C014              galactic_chart_hyper_y_offset equ 32 - 4 + 24
  11+ C014 44 69 73 74  galactic_chart_distance     DB "Distance: "
  11+ C018 61 6E 63 65
  11+ C01C 3A 20
  12+ C01E 30 30 30     galactic_chart_dist_amount  DB "000"
  13+ C021 2E           galactic_chart_decimal      DB "."
  14+ C022 30           galactic_chart_fraction     DB "0"
  15+ C023 20 4C 69 67  galactic_chart_dis_ly       DB " Light Years",0
  15+ C027 68 74 20 59
  15+ C02B 65 61 72 73
  15+ C02F 00
  16+ C030 20 20 30 2E  galactic_default_dist       DB "  0.0",0
  16+ C034 30 00
  17+ C036
  18+ C036 00 00 00...  galactic_distance           DS  6
  19+ C03C
  20+ C03C              galactic_find_position      equ $B008
  21+ C03C 46 69 6E 64  galactic_find_message       DB "Find: ",0
  21+ C040 3A 20 00
  22+ C043              galactic_find_text          equ $B038
  23+ C043 20 20 20 20  galactic_blank_message      DB  "                    ",0
  23+ C047 20 20 20 20
  23+ C04B 20 20 20 20
  23+ C04F 20 20 20 20
  23+ C053 20 20 20 20
  23+ C057 00
  24+ C058 2A 2A 2D 2D  galactic_find_no_match      DB "**-- System Not Found --**",0
  24+ C05C 20 53 79 73
  24+ C060 74 65 6D 20
  24+ C064 4E 6F 74 20
  24+ C068 46 6F 75 6E
  24+ C06C 64 20 2D 2D
  24+ C070 2A 2A 00
  25+ C073 20 20 2A 2A  galactic_find_match         DB "  **-- System Found --**  ",0
  25+ C077 2D 2D 20 53
  25+ C07B 79 73 74 65
  25+ C07F 6D 20 46 6F
  25+ C083 75 6E 64 20
  25+ C087 2D 2D 2A 2A
  25+ C08B 20 20 00
  26+ C08E
  27+ C08E              GCM_print_boiler_text:
  28+ C08E                  INCLUDE "Menus/print_boiler_text_inlineInclude.asm"
# file opened: ./Menus/print_boiler_text_inlineInclude.asm
   1++C08E
   2++C08E              ;">print_boilder_text hl = text structure, b = message count"
   3++C08E C5           .BoilerTextLoop:        push		bc			; Save Message Count loop value
   4++C08F 4E                                   ld			c,(hl)		; Get Row into b
   5++C090 23                                   inc			hl
   6++C091 46                                   ld			b,(hl)		; Get Col into b
   7++C092 23                                   inc			hl
   8++C093 5E                                   ld			e,(hl)		; Get text address Lo into E
   9++C094 23                                   inc			hl
  10++C095 56                                   ld			d,(hl)		; Get text address Hi into E
  11++C096 23                                   inc			hl
  12++C097 E5                                   push		hl			; Save present HL to stack as this is the address for the next message
  13++C098 EB                                   ex			de,hl		; now hl = address of text data
  14++C099 1E FF                                ld			e,txt_status_colour
  15++C09B C5                                   push		bc
  16++C09C D1                                   pop			de
  17++C09D                                      MMUSelectLayer1
  17++C09D ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
  18++C0A1 CD E3 E0                             call		l1_print_at
  19++C0A4 E1                                   pop			hl
  20++C0A5 C1                                   pop			bc
  21++C0A6 10 E6                                djnz		.BoilerTextLoop
  22++C0A8 C9                                   ret
  23++C0A9
# file closed: ./Menus/print_boiler_text_inlineInclude.asm
  29+ C0A9              GCM_draw_chart_circle_and_crosshair:
  30+ C0A9 ED 4B 58 80  	ld		bc,(PresentSystemX)				; bc = present system
  31+ C0AD              .OnGalacticChart:
  32+ C0AD CB 38        	srl		b								; but row is row / 2
  33+ C0AF C5           	push  	bc
  34+ C0B0              	MMUSelectSpriteBank
  34+ C0B0 ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
  35+ C0B4 CD 02 E1     	call	sprite_galactic_cursor
  36+ C0B7 C1           	pop		bc
  37+ C0B8 78           	ld		a,b
  38+ C0B9 C6 18        	add		a,galactic_chart_y_offset
  39+ C0BB 47           	ld		b,a
  40+ C0BC 3A 93 85     	ld		a,(Fuel)
  41+ C0BF CB 3F        	srl		a
  42+ C0C1 CB 3F        	srl		a								; divide range of fuel by 4 for galactic chart
  43+ C0C3 57           	ld		d,a
  44+ C0C4 1E FF        	ld		e,$FF
  45+ C0C6              	MMUSelectLayer2
  45+ C0C6 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
  46+ C0CA CD 3F EF     	call	l2_draw_circle
  47+ C0CD C9           	ret
  48+ C0CE                              DISPLAY "TODO: move cursor code"
  49+ C0CE              ; TODO MOVE CURSOR CODE
  50+ C0CE
  51+ C0CE ED 4B 5A 80  GCM_draw_hyperspace_cross_hair: ld		bc,(TargetSystemX)              ; bc = selected jump
  52+ C0D2 C5                                           push    bc
  53+ C0D3 CB 38                                        srl		b								; but row is row / 2
  54+ C0D5                                              MMUSelectSpriteBank
  54+ C0D5 ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
  55+ C0D9 CD 0E E1                                     call	sprite_galactic_hyper_cursor
  56+ C0DC C1                                           pop     bc
  57+ C0DD CD 1A E1                                     call	sprite_ghc_move
  58+ C0E0 C9                                           ret
  59+ C0E1
  60+ C0E1
  61+ C0E1 AF           plot_gc_stars:          xor		a
  62+ C0E2 32 BB 7F                             ld		(XSAV),a
  63+ C0E5 DD 21 16 E0                          ld      ix,galaxy_data
  64+ C0E9 3A 45 80     .CounterLoop:           ld      a,(Galaxy)
  65+ C0EC                                      MMUSelectGalaxyA
  65+ C0EC ED 92 57    >                     nextreg GalaxyDataMMU,     a
  66+ C0EF DD E5                                push    ix
  67+ C0F1 E1                                   pop     hl
  68+ C0F2 11 2E 80                             ld      de,SystemSeed
  69+ C0F5 CD 45 86                             call    copy_seed
  70+ C0F8 3A 31 80                             ld		a,(SystemSeed+3)				; QQ15+3 \ seed w1_h is Xcoord of star
  71+ C0FB 4F                                   ld		c,a								; c = X Coord
  72+ C0FC 3A 2F 80                             ld		a,(SystemSeed+1)
  73+ C0FF CB 3F                                srl		a								; Ycoord /2
  74+ C101 C6 18                                add		a,galactic_chart_y_offset		; add offset to Y coord of star
  75+ C103 47                                   ld		b,a								; b = row
  76+ C104 C5                                   push	bc
  77+ C105 3E D8                                ld		a,galactic_star_colour
  78+ C107                                      MMUSelectLayer2
  78+ C107 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
  79+ C10B CD 23 E4                             call	l2_plot_pixel
  80+ C10E C1                                   pop		bc
  81+ C10F 3A 32 80                             ld		a,(SystemSeed+4)
  82+ C112 F6 50                                or		$50								; minimum distance away
  83+ C114 FE 90                                cp		$90
  84+ C116 30 0A                                jr		nc,.NoSecondPixel
  85+ C118 0C           .SecondPixel:           inc		c
  86+ C119 3E 6C                                ld		a,galactic_star_colour2
  87+ C11B                                      MMUSelectLayer2
  87+ C11B ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
  88+ C11F CD 23 E4                             call	l2_plot_pixel
  89+ C122 DD E5        .NoSecondPixel:         push    ix
  90+ C124 E1                                   pop     hl
  91+ C125 ED 34 08 00                          add     hl,8
  92+ C129 E5                                   push    hl
  93+ C12A DD E1                                pop     ix
  94+ C12C 3A BB 7F                             ld		a,(XSAV)
  95+ C12F 3D                                   dec		a
  96+ C130 FE 00                                cp		0
  97+ C132 C8                                   ret		z
  98+ C133 32 BB 7F                             ld		(XSAV),a
  99+ C136 18 B1                                jr		.CounterLoop
 100+ C138
 101+ C138 2A 2A 2A 2A  GALDP       DB "********++++++++"
 101+ C13C 2A 2A 2A 2A
 101+ C140 2B 2B 2B 2B
 101+ C144 2B 2B 2B 2B
 102+ C148              draw_galactic_chart_menu:   InitNoDoubleBuffer
 102+ C148             >                            MMUSelectLayer1
 102+ C148 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 102+ C14C CD 8F E0    >                            call	l1_cls
 102+ C14F 3E 07       >                            ld		a,7
 102+ C151 CD AA E0    >                            call	l1_attr_cls_to_a
 102+ C154             >                            MMUSelectLayer2
 102+ C154 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 102+ C158 CD 0C E0    >                            call    asm_l2_double_buffer_off
 102+ C15B CD 3A E3    >                            call	l2_cls	; Get some space
 102+ C15E             >                            MMUSelectSpriteBank
 102+ C15E ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
 102+ C162 CD B7 E7    >                            call    sprite_cls_cursors
 103+ C165 DD 2E DC                                 ld      ixl,$DC
 104+ C168 3E 40                                    ld      a,$40
 105+ C16A 32 C3 7F                                 ld      (MenuIdMax),a
 106+ C16D 2A 58 80                                 ld      hl,(PresentSystemX)
 107+ C170              ;                            ld      (TargetSystemX),hl
 108+ C170 CD 5B C4                                 call    gc_present_system               ; Set up the seed for present system
 109+ C173 01 01 01     .Drawbox:                   ld		bc,$0101
 110+ C176 11 FD BE                                 ld		de,$BEFD
 111+ C179 3E C0                                    ld		a,$C0
 112+ C17B                                          MMUSelectLayer2
 112+ C17B ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 113+ C17F CD DB E6                                 call	l2_draw_box
 114+ C182 01 01 0A                                 ld		bc,$0A01
 115+ C185 11 C0 FE                                 ld		de,$FEC0
 116+ C188 CD A7 E7                                 call	l2_draw_horz_line
 117+ C18B 3E 0D        .StaticText:                ld		a,galactic_chart_header
 118+ C18D CD ED 8F                                 call	expandTokenToString
 119+ C190 06 01                                    ld		b,1
 120+ C192 21 10 C0                                 ld		hl,galactic_chart_boiler_text
 121+ C195 CD 8E C0                                 call	GCM_print_boiler_text
 122+ C198 CD A9 C0     .CircleandCrosshair:        call	GCM_draw_chart_circle_and_crosshair
 123+ C19B CD CE C0                                 call	GCM_draw_hyperspace_cross_hair
 124+ C19E CD E1 C0                                 call	plot_gc_stars
 125+ C1A1 3A 45 80                                 ld      a,(Galaxy)
 126+ C1A4                                          MMUSelectGalaxyA
 126+ C1A4 ED 92 57    >                     nextreg GalaxyDataMMU,     a
 127+ C1A7 ED 4B 5A 80                              ld      bc,(TargetSystemX)
 128+ C1AB CD 64 FC                                 call    galaxy_system_under_cursor          ; TODO for some reason this bit
 129+ C1AE FE 00                                    cp      0                                   ; does not reset cursor on a miss
 130+ C1B0 20 11                                    jr      nz,.CurrentTargetIsValid
 131+ C1B2              .CurrentTargetIsInvalid:    CopyPresentSystemToTarget
 131+ C1B2 2A 58 80    >                        ld      hl,(PresentSystemX)
 131+ C1B5 22 5A 80    >                        ld      (TargetSystemX),hl
 132+ C1B8 ED 4B 5A 80                              ld      bc,(TargetSystemX)
 133+ C1BC                                          MMUSelectSpriteBank
 133+ C1BC ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
 134+ C1C0 CD 1A E1                                 call	sprite_ghc_move
 135+ C1C3 3A 45 80     .CurrentTargetIsValid:      ld      a,(Galaxy)
 136+ C1C6                                          MMUSelectGalaxyA
 136+ C1C6 ED 92 57    >                     nextreg GalaxyDataMMU,     a
 137+ C1C9 ED 43 5B E8                              ld      (GalaxyTargetSystem),bc
 138+ C1CD CD 64 FC                                 call    galaxy_system_under_cursor
 139+ C1D0 CD B3 C3                                 call    gc_name_if_possible
 140+ C1D3                                          SetMemFalse TextInputMode
 140+ C1D3 3E FF       >                        ld      a,$FF
 140+ C1D5 32 C0 81    >                        ld      (TextInputMode),a
 141+ C1D8 C9                                       ret
 142+ C1D9
 143+ C1D9              gcDelayVal                  equ $0A
 144+ C1D9              gcBlinkVal                  equ $10
 145+ C1D9
 146+ C1D9
 147+ C1D9 10           gcCursorBlink               DB  gcBlinkVal
 148+ C1DA 20           gcCursorChar                DB  " "
 149+ C1DB 00           gcEndOfString               DB  0
 150+ C1DC 00 00 00...  gcInputText                 DS  31
 151+ C1FB 00 00 00 00                              DB  0,0,0,0,0
 151+ C1FF 00
 152+ C200 00 00 00...  gcBlank                     DS  32
 153+ C220
 154+ C220              ;----------------------------------------------------------------------------------------------------------------------------------
 155+ C220 11 08 B0     gc_display_find_text:   ld		de,galactic_find_position   ; Wipe input area on screen
 156+ C223 21 3C C0                             ld      hl,galactic_find_message
 157+ C226                                      MMUSelectLayer1
 157+ C226 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 158+ C22A CD E3 E0                             call	l1_print_at
 159+ C22D C9                                   ret
 160+ C22E              ;----------------------------------------------------------------------------------------------------------------------------------
 161+ C22E 11 DC C1     gc_display_find_string: ld      de,gcInputText
 162+ C231                                      MMUSelectKeyboard
 162+ C231 ED 91 57 65 >                     nextreg KeyboardMMU,       BankKeyboard
 163+ C235 CD 56 E2                             call    keyboard_copy_input_to_de
 164+ C238 21 DA C1                             ld      hl,gcCursorChar         ; Now just copy cursor char too
 165+ C23B ED A0                                ldi                             ; Copy cursor to local
 166+ C23D 3A 52 E2                             ld      a,(InputCursor)
 167+ C240 3C                                   inc     a
 168+ C241 47                                   ld      b,a
 169+ C242 3E 14                                ld      a,20
 170+ C244 90                                   sub     b
 171+ C245 47                                   ld      b,a
 172+ C246 3E 20                                ld      a," "
 173+ C248 12           .SpacePad:              ld      (de),a
 174+ C249 13                                   inc     de
 175+ C24A 10 FC                                djnz    .SpacePad
 176+ C24C AF                                   xor     a
 177+ C24D 12                                   ld      (de),a
 178+ C24E 11 38 B0                             ld		de,galactic_find_text    ; Display text
 179+ C251 21 DC C1                             ld      hl,gcInputText
 180+ C254                                      MMUSelectLayer1
 180+ C254 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 181+ C258 CD E3 E0                             call	l1_print_at
 182+ C25B C9                                   ret
 183+ C25C
 184+ C25C 3A D9 C1     blink_cursor:           ld      a,(gcCursorBlink)
 185+ C25F 3D                                   dec     a
 186+ C260 32 D9 C1                             ld      (gcCursorBlink),a
 187+ C263 C0                                   ret     nz
 188+ C264 3E 10        .FlashCursor:           ld      a,gcBlinkVal
 189+ C266 32 D9 C1                             ld      (gcCursorBlink),a
 190+ C269 3A DA C1                             ld      a,(gcCursorChar)
 191+ C26C FE 20                                cp      " "
 192+ C26E 28 06                                jr      z,.ChangeToStar
 193+ C270 3E 20                                ld      a," "
 194+ C272 32 DA C1                             ld      (gcCursorChar),a
 195+ C275 C9                                   ret
 196+ C276 3E 2A        .ChangeToStar:          ld      a,"*"
 197+ C278 32 DA C1                             ld      (gcCursorChar),a
 198+ C27B C9                                   ret
 199+ C27C              ;----------------------------------------------------------------------------------------------------------------------------------
 200+ C27C              ; The main loop handles the find key
 201+ C27C              loop_gc_menu:           JumpIfMemTrue TextInputMode,AlreadyInInputMode  ;if we are in input mode then go directly there
 201+ C27C 3A C0 81    >                        ld      a,(TextInputMode)
 201+ C27F A7          >                        and     a
 201+ C280 CA A1 C2    >                        jp      z, AlreadyInInputMode
 202+ C283              .StartFindCheck:        MacroIsKeyPressed c_Pressed_Find                        ;Is F pressed
 202+ C283 3E 4E       >                        ld      a,c_Pressed_Find
 202+ C285             >                        MMUSelectKeyboard
 202+ C285 ED 91 57 65 >                     nextreg KeyboardMMU,       BankKeyboard
 202+ C289 CD BB E1    >                        call    is_key_pressed
 203+ C28C C0                                   ret     nz                                      ;the main loop handles find key
 204+ C28D                                      MMUSelectKeyboard
 204+ C28D ED 91 57 65 >                     nextreg KeyboardMMU,       BankKeyboard
 205+ C291 CD B5 E2                             call    initInputText                           ;Initialise find input
 206+ C294                                      SetMemTrue TextInputMode                        ;Set input mode to true
 206+ C294 AF          >                        xor     a
 206+ C295 32 C0 81    >                        ld      (TextInputMode),a
 207+ C298                                      SetMemToN gcCursorBlink, gcBlinkVal             ; set up blink
 207+ C298 3E 10       >                        ld      a,gcBlinkVal
 207+ C29A 32 D9 C1    >                        ld      (gcCursorBlink),a
 208+ C29D CD 20 C2     .DisplayInputbar:       call    gc_display_find_text                    ; now prep the boiler plate input text
 209+ C2A0 C9                                   ret                                             ; and exit so next interation handles new input as we have to rescan keyboard
 210+ C2A1              ;Already in input mode post pressing find
 211+ C2A1              AlreadyInInputMode:     MMUSelectKeyboard
 211+ C2A1 ED 91 57 65 >                     nextreg KeyboardMMU,       BankKeyboard
 212+ C2A5 CD DC E2                             call    InputName                               ; Call input routine to parse a key
 213+ C2A8                                      JumpIfMemFalse InputChanged, .blinkNoDelay      ; no key they bypass rest of input
 213+ C2A8 3A 54 E2    >                        ld      a,(InputChanged)
 213+ C2AB A7          >                        and     a
 213+ C2AC C2 B9 C2    >                        jp      nz, .blinkNoDelay
 214+ C2AF              .WasItEnter:            JumpIfMemTrue EnterPressed, .FindEnterPressed   ; if enter was pressed then find
 214+ C2AF 3A 53 E2    >                        ld      a,(EnterPressed)
 214+ C2B2 A7          >                        and     a
 214+ C2B3 CA C5 C2    >                        jp      z, .FindEnterPressed
 215+ C2B6 CD 2E C2                             call    gc_display_find_string                  ; update string
 216+ C2B9 CD 5C C2     .blinkNoDelay:          call    blink_cursor
 217+ C2BC                                      CallIfMemEqNusng    gcCursorBlink, gcBlinkVal, gc_display_find_string ; on blink we get a double update but we can live with that
 217+ C2BC 3A D9 C1    >                        ld      a,(gcCursorBlink)
 217+ C2BF FE 10       >                        cp      gcBlinkVal
 217+ C2C1 CC 2E C2    >                        call    z,gc_display_find_string
 218+ C2C4 C9                                   ret
 219+ C2C5              .FindEnterPressed:      SetMemFalse EnterPressed                        ; reset enter
 219+ C2C5 3E FF       >                        ld      a,$FF
 219+ C2C7 32 53 E2    >                        ld      (EnterPressed),a
 220+ C2CA                                      SetMemFalse TextInputMode                       ; leave input mode
 220+ C2CA 3E FF       >                        ld      a,$FF
 220+ C2CC 32 C0 81    >                        ld      (TextInputMode),a
 221+ C2CF 3A 45 80                             ld      a,(Galaxy)                              ; Fetch correct galaxy seed bank into memory
 222+ C2D2                                      MMUSelectGalaxyA
 222+ C2D2 ED 92 57    >                     nextreg GalaxyDataMMU,     a
 223+ C2D5 21 32 E2                             ld      hl,InputString
 224+ C2D8 11 5E E8                             ld      de,GalaxySearchString
 225+ C2DB CD D0 F6                             call    GalaxyCopyLoop
 226+ C2DE CD 39 FB                             call    find_system_by_name
 227+ C2E1 FE FF                                cp      $FF                                     ; 0 denotes found FF, failure
 228+ C2E3 28 1D                                jr      z,.FindNoMatch
 229+ C2E5 3A FB E8                             ld      a,(GalaxyWorkingSeed+3)
 230+ C2E8 4F                                   ld      c,a
 231+ C2E9 3A F9 E8                             ld      a,(GalaxyWorkingSeed+1)
 232+ C2EC 47                                   ld      b,a
 233+ C2ED ED 43 5A 80                          ld      (TargetSystemX),bc
 234+ C2F1 CD 94 C3                             call    UpdateGalacticCursor
 235+ C2F4 11 08 B0                             ld		de,galactic_find_position               ; Wipe input area on screen
 236+ C2F7 21 73 C0                             ld      hl,galactic_find_match
 237+ C2FA                                      MMUSelectLayer1
 237+ C2FA ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 238+ C2FE CD E3 E0                             call	l1_print_at
 239+ C301 C9                                   ret
 240+ C302              .FindNoMatch:           ; if not found display "Not found"
 241+ C302                                      ; move curor if found
 242+ C302 11 08 B0                             ld		de,galactic_find_position   ; Wipe input area on screen
 243+ C305 21 58 C0                             ld      hl,galactic_find_no_match
 244+ C308                                      MMUSelectLayer1
 244+ C308 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 245+ C30C CD E3 E0                             call	l1_print_at
 246+ C30F C9                                   ret; DOSTUFFHERE
 247+ C310              ;----------------------------------------------------------------------------------------------------------------------------------
 248+ C310              galctic_chart_cursors:  ReturnIfMemTrue TextInputMode
 248+ C310 3A C0 81    >                        ld      a,(TextInputMode)
 248+ C313 A7          >                        and     a
 248+ C314 C8          >                        ret     z
 249+ C315 3A C1 81                             ld      a,(CursorKeysPressed)
 250+ C318                                      ReturnIfAIsZero
 250+ C318 A7          >                        and     a
 250+ C319 C8          >                        ret     z
 251+ C31A 17                                   rla
 252+ C31B DC 33 C3                             call   c,gc_UpPressed
 253+ C31E 17                                   rla
 254+ C31F DC 43 C3                             call   c,gc_DownPressed
 255+ C322 17                                   rla
 256+ C323 DC 53 C3                             call   c,gc_LeftPressed
 257+ C326 17                                   rla
 258+ C327 DC 63 C3                             call   c,gc_RightPressed
 259+ C32A 17                                   rla
 260+ C32B DC 73 C3                             call   c,gc_HomePressed
 261+ C32E 17                                   rla
 262+ C32F DC 7D C3                             call   c,gc_RecenterPressed
 263+ C332 C9                                   ret
 264+ C333              ;----------------------------------------------------------------------------------------------------------------------------------
 265+ C333 3A 5B 80     gc_UpPressed:           ld     a,(TargetSystemX+1)
 266+ C336                                      JumpIfAEqNusng 1,gc_BoundsLimit
 266+ C336 FE 01       >                        cp     1
 266+ C338 CA 92 C3    >                        jp      z,gc_BoundsLimit
 267+ C33B 3D                                   dec     a
 268+ C33C 32 5B 80                             ld      (TargetSystemX+1),a
 269+ C33F CD 94 C3                             call    UpdateGalacticCursor
 270+ C342 C9                                   ret
 271+ C343              ;----------------------------------------------------------------------------------------------------------------------------------
 272+ C343 3A 5B 80     gc_DownPressed:         ld     a,(TargetSystemX+1)
 273+ C346                                      JumpIfAEqNusng 255,gc_BoundsLimit
 273+ C346 FE FF       >                        cp     255
 273+ C348 CA 92 C3    >                        jp      z,gc_BoundsLimit
 274+ C34B 3C                                   inc    a
 275+ C34C 32 5B 80                             ld      (TargetSystemX+1),a
 276+ C34F CD 94 C3                             call    UpdateGalacticCursor
 277+ C352 C9                                   ret
 278+ C353              ;----------------------------------------------------------------------------------------------------------------------------------
 279+ C353 3A 5A 80     gc_LeftPressed:         ld     a,(TargetSystemX)
 280+ C356                                      JumpIfAEqNusng 2,gc_BoundsLimit
 280+ C356 FE 02       >                        cp     2
 280+ C358 CA 92 C3    >                        jp      z,gc_BoundsLimit
 281+ C35B 3D                                   dec    a
 282+ C35C 32 5A 80                             ld      (TargetSystemX),a
 283+ C35F CD 94 C3                             call    UpdateGalacticCursor
 284+ C362 C9                                   ret
 285+ C363              ;----------------------------------------------------------------------------------------------------------------------------------
 286+ C363 3A 5A 80     gc_RightPressed:        ld     a,(TargetSystemX)
 287+ C366                                      JumpIfAEqNusng 253,gc_BoundsLimit
 287+ C366 FE FD       >                        cp     253
 287+ C368 CA 92 C3    >                        jp      z,gc_BoundsLimit
 288+ C36B 3C                                   inc    a
 289+ C36C 32 5A 80                             ld      (TargetSystemX),a
 290+ C36F CD 94 C3                             call    UpdateGalacticCursor
 291+ C372 C9                                   ret
 292+ C373              ;----------------------------------------------------------------------------------------------------------------------------------
 293+ C373 2A 58 80     gc_HomePressed:         ld      hl,(PresentSystemX)
 294+ C376 22 5A 80                             ld      (TargetSystemX),hl
 295+ C379 CD 94 C3                             call    UpdateGalacticCursor
 296+ C37C C9                                   ret
 297+ C37D              ;----------------------------------------------------------------------------------------------------------------------------------
 298+ C37D 3A 45 80     gc_RecenterPressed:     ld      a,(Galaxy)       ; DEBUG as galaxy n is not working
 299+ C380                                      MMUSelectGalaxyA
 299+ C380 ED 92 57    >                     nextreg GalaxyDataMMU,     a
 300+ C383 ED 4B 5A 80                          ld      bc,(TargetSystemX)
 301+ C387 CD 70 FB                             call    find_nearest_to_bc
 302+ C38A ED 43 5A 80                          ld      (TargetSystemX),bc
 303+ C38E CD 94 C3                             call    UpdateGalacticCursor
 304+ C391 C9                                   ret
 305+ C392              ;----------------------------------------------------------------------------------------------------------------------------------
 306+ C392 AF           gc_BoundsLimit          xor     a
 307+ C393 C9                                   ret
 308+ C394
 309+ C394              ;----------------------------------------------------------------------------------------------------------------------------------
 310+ C394 ED 4B 5A 80  UpdateGalacticCursor:   ld		bc,(TargetSystemX)              ; bc = selected jump
 311+ C398              OnGalacticChart:        MMUSelectSpriteBank
 311+ C398 ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
 312+ C39C CD 1A E1                             call	sprite_ghc_move
 313+ C39F 3A 45 80                             ld      a,(Galaxy)
 314+ C3A2                                      MMUSelectGalaxyA
 314+ C3A2 ED 92 57    >                     nextreg GalaxyDataMMU,     a
 315+ C3A5 ED 4B 5A 80                          ld      bc,(TargetSystemX)
 316+ C3A9 ED 43 5B E8                          ld      (GalaxyTargetSystem),bc
 317+ C3AD CD 64 FC                             call    galaxy_system_under_cursor
 318+ C3B0 FE 00                                cp      0
 319+ C3B2 C8                                   ret     z
 320+ C3B3              ; just fall into gc_name_if_possible
 321+ C3B3 CD 82 F6     gc_name_if_possible:    call	GetDigramWorkingSeed
 322+ C3B6 CD E1 C3                             call    gc_clear_name_area
 323+ C3B9 21 70 90                             ld		hl,name_expanded
 324+ C3BC CD C7 8F                             call	CapitaliseString
 325+ C3BF 21 70 90                             ld		hl, name_expanded
 326+ C3C2 01 0A A0                             ld      bc,$A00A
 327+ C3C5 1E FF                                ld		e,$FF
 328+ C3C7                                      MMUSelectLayer2
 328+ C3C7 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 329+ C3CB CD 5F E5                             call	l2_print_7at
 330+ C3CE CD FB C3                             call    gc_calc_distance
 331+ C3D1 21 14 C0                             ld      hl,galactic_chart_distance
 332+ C3D4 01 0A A8                             ld      bc,$A80A
 333+ C3D7 1E FF                                ld		e,$FF
 334+ C3D9                                      MMUSelectLayer2
 334+ C3D9 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 335+ C3DD CD 5F E5                             call	l2_print_7at
 336+ C3E0 C9                                   ret
 337+ C3E1              ;----------------------------------------------------------------------------------------------------------------------------------
 338+ C3E1 26 08        gc_clear_name_area:     ld      h,8
 339+ C3E3 11 E3 A0                             ld      de,$A000 | COLOUR_TRANSPARENT
 340+ C3E6 01 0A A0                             ld      bc,$A00A
 341+ C3E9 E5           .ClearLoop:             push    hl
 342+ C3EA D5                                   push    de
 343+ C3EB C5                                   push    bc
 344+ C3EC                                      MMUSelectLayer2
 344+ C3EC ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 345+ C3F0 CD A7 E7                             call	l2_draw_horz_line
 346+ C3F3 C1                                   pop     bc
 347+ C3F4 D1                                   pop     de
 348+ C3F5 E1                                   pop     hl
 349+ C3F6 04                                   inc     b
 350+ C3F7 25                                   dec     h
 351+ C3F8 20 EF                                jr      nz,.ClearLoop
 352+ C3FA C9                                   ret
 353+ C3FB              ;----------------------------------------------------------------------------------------------------------------------------------
 354+ C3FB 3A 45 80     gc_calc_distance:       ld      a,(Galaxy)
 355+ C3FE                                      MMUSelectGalaxyA
 355+ C3FE ED 92 57    >                     nextreg GalaxyDataMMU,     a
 356+ C401 11 1E C0                             ld      de,galactic_chart_dist_amount
 357+ C404 21 30 C0                             ld      hl,galactic_default_dist
 358+ C407 ED A0                                ldi
 359+ C409 ED A0                                ldi
 360+ C40B ED A0                                ldi
 361+ C40D ED A0                                ldi
 362+ C40F ED A0                                ldi
 363+ C411 ED 4B 58 80                          ld      bc,(PresentSystemX)
 364+ C415 ED 43 57 E8                          ld      (GalaxyPresentSystem),bc
 365+ C419 ED 4B 5A 80                          ld      bc,(TargetSystemX)
 366+ C41D ED 43 59 E8                          ld      (GalaxyDestinationSystem),bc
 367+ C421 CD F7 FB                             call    galaxy_find_distance            ; get distance into HL
 368+ C424 DD 2A 7A 80                          ld      ix,(Distance)
 369+ C428 11 00 00                             ld      de,0
 370+ C42B FD 21 36 C0                          ld      iy,galactic_distance
 371+ C42F CD C1 9D                             call    DispDEIXtoIY
 372+ C432 FD E5                                push    iy
 373+ C434 E1                                   pop     hl
 374+ C435 11 36 C0                             ld      de,galactic_distance
 375+ C438 7E                                   ld		a,(hl)				;Push last digit to post decimal
 376+ C439 32 22 C0                             ld		(galactic_chart_fraction),a
 377+ C43C 2B                                   dec     hl
 378+ C43D CD EA 9A                             call    compare16HLDE
 379+ C440 38 18                                jr      c,.done_number
 380+ C442 7E                                   ld      a,(hl)
 381+ C443 32 20 C0                             ld      (galactic_chart_dist_amount+2),a
 382+ C446 2B                                   dec     hl
 383+ C447 CD EA 9A                             call    compare16HLDE
 384+ C44A 38 0E                                jr      c,.done_number
 385+ C44C 7E                                   ld      a,(hl)
 386+ C44D 32 1F C0                             ld      (galactic_chart_dist_amount+1),a
 387+ C450 2B                                   dec     hl
 388+ C451 CD EA 9A                             call    compare16HLDE
 389+ C454 38 04                                jr      c,.done_number
 390+ C456 7E                                   ld      a,(hl)
 391+ C457 32 1E C0                             ld      (galactic_chart_dist_amount),a
 392+ C45A C9           .done_number:           ret
 393+ C45B              ;----------------------------------------------------------------------------------------------------------------------------------
 394+ C45B AF           gc_present_system:      xor     a
 395+ C45C 32 BB 7F                             ld		(XSAV),a
 396+ C45F DD 21 16 E0                          ld      ix,galaxy_data
 397+ C463 3A 45 80     GCCounterLoop:          ld      a,(Galaxy)
 398+ C466                                      MMUSelectGalaxyA
 398+ C466 ED 92 57    >                     nextreg GalaxyDataMMU,     a
 399+ C469 2A 58 80                             ld      hl,(PresentSystemX)
 400+ C46C DD E5                                push    ix
 401+ C46E 7D                                   ld      a,l
 402+ C46F DD BE 03                             cp      (ix+3)                          ; seed x
 403+ C472 20 14                                jr      nz,.ItsNotThisX
 404+ C474 7C                                   ld      a,h
 405+ C475 DD BE 01                             cp      (ix+1)                          ; seed x
 406+ C478 20 0E        .FoundSystem:           jr      nz,.ItsNotThisX
 407+ C47A DD E5                                push    ix
 408+ C47C E1                                   pop     hl
 409+ C47D 11 4C 80                             ld      de,PresentSystemSeeds
 410+ C480 CD 45 86                             call    copy_seed
 411+ C483 3E FF                                ld      a,$FF
 412+ C485 DD E1                                pop     ix
 413+ C487 C9                                   ret
 414+ C488 E1           .ItsNotThisX:           pop     hl
 415+ C489 ED 34 08 00                          add     hl,8
 416+ C48D E5                                   push    hl
 417+ C48E DD E1                                pop     ix
 418+ C490 3A BB 7F                             ld		a,(XSAV)
 419+ C493 3D                                   dec		a
 420+ C494 32 BB 7F                             ld      (XSAV),a
 421+ C497 FE 00                                cp		0
 422+ C499 C8                                   ret		z
 423+ C49A 18 C7                                jr		GCCounterLoop
 424+ C49C
# file closed: ./Menus//galactic_chart_menu.asm
 754  C49C                  DISPLAY "Bank ",BankMenuGalCht," - Bytes free ",/D, $2000 - ($-MenuGalChtAddr), " - BankMenuGalCht"
 755  C49C              ; Bank 52  ------------------------------------------------------------------------------------------------------------------------
 756  C49C                  SLOT    MenuInventAddr
 757  C49C                  PAGE    BankMenuInvent
 758  C49C              	ORG     MenuInventAddr
 759  C000                  INCLUDE "./Menus/inventory_menu.asm"
# file opened: ./Menus/inventory_menu.asm
   1+ C000 49 6E 76 65  ivnentory_page_marker   DB "Inventory   PG52"
   1+ C004 6E 74 6F 72
   1+ C008 79 20 20 20
   1+ C00C 50 47 35 32
   2+ C010
   3+ C010              inv_pos_row		        equ	$08
   4+ C010              inv_fuel_pos_row		equ	$1B
   5+ C010              inv_cash_pos_row		equ	$23
   6+ C010              inv_stock_pos_row    	equ $33
   7+ C010
   8+ C010              inv_pos_col   	        equ	$0080
   9+ C010              inv_fuel_pos_col		equ	$0030
  10+ C010              inv_cash_pos_col		equ	$0030
  11+ C010              inv_stock_pos_col       equ $0008
  12+ C010              inv_stock_amt_pos_col   equ $0080
  13+ C010              inv_stock_uom_pos_col   equ $00E0
  14+ C010
  15+ C010 80 00        inventory_boiler_text	DW inv_pos_col
  15+ C012 08             DB inv_pos_row
  15+ C013 1F C0               DW INM_inventory
  16+ C015 08 00        						DW $0008
  16+ C017 1B             DB inv_fuel_pos_row
  16+ C018 29 C0          DW INM_fuel
  17+ C01A 08 00        						DW $0008
  17+ C01C 23             DB inv_cash_pos_row
  17+ C01D 2F C0          DW INM_cash
  18+ C01F
  19+ C01F 49 4E 56 45  INM_inventory 			DB "INVENTORY",0
  19+ C023 4E 54 4F 52
  19+ C027 59 00
  20+ C029 46 75 65 6C  INM_fuel				DB "Fuel:",0
  20+ C02D 3A 00
  21+ C02F 43 61 73 68  INM_cash				DB "Cash:",0
  21+ C033 3A 00
  22+ C035
  23+ C035 30 30 30 30  txt_inventory_amount	DB "00000",0
  23+ C039 30 00
  24+ C03B
  25+ C03B 33           inventory_curr_row      DB  inv_stock_pos_row
  26+ C03C
  27+ C03C              inventory_amount		equ $80
  28+ C03C              inventory_uom			equ	$B0
  29+ C03C 00           inv_selected_row        DB 0
  30+ C03D
  31+ C03D 00 00 00...  INM_cash_amount			DS 10
  32+ C047 20 43 72 00  INM_cash_UoM            DB " Cr",0
  33+ C04B
  34+ C04B 26 00        INM_DispAtoDE:          ld h,0
  35+ C04D 6F                                   ld l,a
  36+ C04E 01 F0 D8                             ld	bc,-10000
  37+ C051 CD 67 C0                             call	.Num1
  38+ C054 01 18 FC                             ld	bc,-1000
  39+ C057 CD 67 C0                             call	.Num1
  40+ C05A 01 9C FF                             ld	bc,-100
  41+ C05D CD 67 C0                             call	.Num1
  42+ C060 0E F6                                ld	c,-10
  43+ C062 CD 67 C0                             call	.Num1
  44+ C065 0E FF                                ld	c,-1
  45+ C067 3E 2F        .Num1:	                ld	a,'0'-1
  46+ C069 3C           .Num2:	                inc	a
  47+ C06A 09                                   add	hl,bc
  48+ C06B 38 FC                                jr	c,.Num2
  49+ C06D ED 42                                sbc	hl,bc
  50+ C06F 12                                   ld	(de),a
  51+ C070 13                                   inc	de
  52+ C071 C9                                   ret
  53+ C072
  54+ C072 06 03        INM_print_boiler_text:  ld		b,3
  55+ C074 DD 21 10 C0                          ld		ix,inventory_boiler_text
  56+ C078 C5           .BoilerTextLoop:        push	bc			; Save Message Count loop value
  57+ C079 DD 6E 00                             ld		l,(ix+0)	; Get col into hl
  58+ C07C DD 66 01                             ld		h,(ix+1)	;
  59+ C07F DD 46 02                             ld		b,(ix+2)	; get row into b
  60+ C082 DD 5E 03                             ld		e,(ix+3)	; Get text address into hl
  61+ C085 DD 56 04                             ld		d,(ix+4)	; .
  62+ C088 DD E5                                push    ix          ; save ix and prep for add via hl
  63+ C08A                                      print_msg_at_de_at_b_hl_macro txt_status_colour
  63+ C08A 0E FF       >                        ld      c,txt_status_colour
  63+ C08C CD 4B E6    >                        call    l2_print_at_320
  64+ C08F E1                                   pop     hl          ; add 5 to ix
  65+ C090 3E 05                                ld      a,5         ; .
  66+ C092 ED 31                                add     hl,a        ; .
  67+ C094 E5 DD E1                             ld      ix,hl       ; .
  68+ C097 C1                                   pop		bc
  69+ C098 10 DE                                djnz	.BoilerTextLoop
  70+ C09A C9                                   ret
  71+ C09B
  72+ C09B DD 22 3F C1  INM_DispDEIXtoIY:       ld (.inmclcn32z),ix
  73+ C09F ED 53 41 C1                          ld (.inmclcn32zIX),de
  74+ C0A3 DD 21 3B C1                          ld ix,.inmclcn32t+36
  75+ C0A7 06 09                                ld b,9
  76+ C0A9 0E 00                                ld c,0
  77+ C0AB 3E 30        .inmclcn321:            ld a,'0'
  78+ C0AD B7                                   or a
  79+ C0AE DD 5E 00     .inmclcn322:            ld e,(ix+0)
  80+ C0B1 DD 56 01                             ld d,(ix+1)
  81+ C0B4 2A 3F C1                             ld hl,(.inmclcn32z)
  82+ C0B7 ED 52                                sbc hl,de
  83+ C0B9 22 3F C1                             ld (.inmclcn32z),hl
  84+ C0BC DD 5E 02                             ld e,(ix+2)
  85+ C0BF DD 56 03                             ld d,(ix+3)
  86+ C0C2 2A 41 C1                             ld hl,(.inmclcn32zIX)
  87+ C0C5 ED 52                                sbc hl,de
  88+ C0C7 22 41 C1                             ld (.inmclcn32zIX),hl
  89+ C0CA 38 04                                jr c,.inmclcn325
  90+ C0CC 0C                                   inc c
  91+ C0CD 3C                                   inc a
  92+ C0CE 18 DE                                jr .inmclcn322
  93+ C0D0 DD 5E 00     .inmclcn325:            ld e,(ix+0)
  94+ C0D3 DD 56 01                             ld d,(ix+1)
  95+ C0D6 2A 3F C1                             ld hl,(.inmclcn32z)
  96+ C0D9 19                                   add hl,de
  97+ C0DA 22 3F C1                             ld (.inmclcn32z),hl
  98+ C0DD DD 5E 02                             ld e,(ix+2)
  99+ C0E0 DD 56 03                             ld d,(ix+3)
 100+ C0E3 2A 41 C1                             ld hl,(.inmclcn32zIX)
 101+ C0E6 ED 5A                                adc hl,de
 102+ C0E8 22 41 C1                             ld (.inmclcn32zIX),hl
 103+ C0EB 11 FC FF                             ld de,-4
 104+ C0EE DD 19                                add ix,de
 105+ C0F0 0C                                   inc c
 106+ C0F1 0D                                   dec c
 107+ C0F2 28 05                                jr z,.inmclcn323
 108+ C0F4 FD 77 00                             ld (iy+0),a
 109+ C0F7 FD 23                                inc iy
 110+ C0F9 10 B0        .inmclcn323:            djnz .inmclcn321
 111+ C0FB 3A 3F C1                             ld a,(.inmclcn32z)
 112+ C0FE C6 30                                add A,'0'
 113+ C100 FD 77 00                             ld (iy+0),a
 114+ C103 FD 36 02 00                          ld (iy+2),0
 115+ C107 FD 7E 00                             ld      a,(IY+0)
 116+ C10A FD 77 01                             ld      (IY+1),a
 117+ C10D 3E 2E                                ld      a,"."
 118+ C10F FD 77 00                             ld      (IY+0),a
 119+ C112 FD 23                                inc     IY
 120+ C114 FD 23                                inc     IY
 121+ C116 C9                                   ret
 122+ C117 01 00 00 00  .inmclcn32t             dw 1,0,     10,0,     100,0,     1000,0,       10000,0
 122+ C11B 0A 00 00 00
 122+ C11F 64 00 00 00
 122+ C123 E8 03 00 00
 122+ C127 10 27 00 00
 123+ C12B A0 86 01 00                          dw $86a0,1, $4240,$0f, $9680,$98, $e100,$05f5, $ca00,$3b9a
 123+ C12F 40 42 0F 00
 123+ C133 80 96 98 00
 123+ C137 00 E1 F5 05
 123+ C13B 00 CA 9A 3B
 124+ C13F 00 00        .inmclcn32z             ds 2
 125+ C141 00 00        .inmclcn32zIX           ds 2
 126+ C143
 127+ C143              INM_GetFuelLevel:       INCLUDE "Menus/get_fuel_level_inlineinclude.asm"
# file opened: ./Menus/get_fuel_level_inlineinclude.asm
   1++C143
   2++C143
   3++C143 3A 93 85     	ld		a,(Fuel)
   4++C146 11 D0 AE     	ld		de,txt_fuel_level
   5++C149 0E 9C        	ld	c, -100
   6++C14B CD 55 C1     	call	.Num1
   7++C14E 0E F6        	ld	c,-10
   8++C150 CD 55 C1     	call	.Num1
   9++C153 0E FF        	ld	c,-1
  10++C155              .Num1:
  11++C155 06 2F        	ld	b,'0'-1
  12++C157              .Num2:
  13++C157 04           	inc		b
  14++C158 81           	add		a,c
  15++C159 38 FC        	jr		c,.Num2
  16++C15B 91           	sub 	c
  17++C15C C5           	push	bc
  18++C15D F5           	push	af
  19++C15E 79           	ld		a,c
  20++C15F FE FF        	cp		-1
  21++C161 CC 6A C1     	call	z,.InsertDot
  22++C164 78           	ld		a,b
  23++C165 12           	ld		(de),a
  24++C166 13           	inc		de
  25++C167 F1           	pop		af
  26++C168 C1           	pop		bc
  27++C169 C9           	ret
  28++C16A              .InsertDot:
  29++C16A 3E 2E        	ld		a,'.'
  30++C16C 12           	ld		(de),a
  31++C16D 13           	inc		de
  32++C16E C9           	ret
  33++C16F
# file closed: ./Menus/get_fuel_level_inlineinclude.asm
 128+ C16F
 129+ C16F              ; "A = stock item number"
 130+ C16F              ;----------------------------------------------------------------------------------------------------------------------------------
 131+ C16F 47           PrintInvItem:           ld		b,a                                 ; look up item  amount
 132+ C170 21 96 85                             ld		hl,CargoTonnes                      ; .
 133+ C173 ED 31                                add		hl,a                                ; .
 134+ C175 7E                                   ld		a,(hl)                              ; .
 135+ C176 4F                                   ld		c,a                                 ; c = cargo amount
 136+ C177 FE 00                                cp		0                                   ; and return if cargo dont print the line
 137+ C179 C8                                   ret		z
 138+ C17A 78                                   ld		a,b                                 ; get back current stock item position
 139+ C17B C5                                   push	bc						            ; push item nbr + quantity
 140+ C17C                                      MMUSelectStockTable                         ; get ready to loop through stock table
 140+ C17C ED 91 57 37 >                     nextreg StockTableMMU,     BankStockTable
 141+ C180              ;.......................get item name text...........................
 142+ C180 FD 7E 00     .ItemItemName           ld      a,(iy+StockNameOffset)              ; get name code for item
 143+ C183 21 30 8E                             ld		hl, WordIdxStock                    ; now get the word text into hl
 144+ C186 CD 39 89                             call	getTableText
 145+ C189 EB                                   ex      de,hl                               ; put the word pointer in de
 146+ C18A 3A 3B C0                             ld      a,(inventory_curr_row)              ; get current cursor
 147+ C18D                                      MMUSelectLayer2
 147+ C18D ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 148+ C191                                      print_msg_at_de_macro txt_status_colour,  a,  inv_stock_pos_col
 148+ C191 0E FF       >                        ld      c,txt_status_colour
 148+ C193 47          >                        ld      b,a
 148+ C194 21 08 00    >                        ld      hl,inv_stock_pos_col
 148+ C197 CD 4B E6    >                        call    l2_print_at_320
 149+ C19A              ;.......................get amount in the cargo hold.................
 150+ C19A C1           .ItemAmount:            pop		bc						            ; b = item number, c = quantity
 151+ C19B C5                                   push	bc                                  ; save it
 152+ C19C 79                                   ld		a,c                                 ; a = qty
 153+ C19D 11 35 C0                             ld		de,txt_inventory_amount             ; load text of number into txt_inventory_amount
 154+ C1A0 CD 4B C0                             call	INM_DispAtoDE
 155+ C1A3 21 35 C0                             ld		hl,txt_inventory_amount             ; now blank out empty stock
 156+ C1A6 7E           .ZeroLoop:              ld		a,(hl)                              ; .
 157+ C1A7 FE 30                                cp		'0'                                 ; .
 158+ C1A9 20 05                                jr		nz,.NotZero                         ; .
 159+ C1AB 36 20        .ZeroDigit:             ld		(hl),' '                            ; .
 160+ C1AD 23                                   inc		hl                                  ; .
 161+ C1AE 18 F6                                jr		.ZeroLoop                           ; .
 162+ C1B0 3A 3B C0     .NotZero:               ld      a,(inventory_curr_row)
 163+ C1B3                                      MMUSelectLayer2
 163+ C1B3 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 164+ C1B7                                      print_msg_macro txt_status_colour,  a,  inv_stock_amt_pos_col, txt_inventory_amount
 164+ C1B7 0E FF       >                        ld      c,txt_status_colour
 164+ C1B9 47          >                        ld      b,a
 164+ C1BA 21 80 00    >                        ld      hl,inv_stock_amt_pos_col
 164+ C1BD 11 35 C0    >                        ld      de,txt_inventory_amount
 164+ C1C0 CD 4B E6    >                        call    l2_print_at_320
 165+ C1C3              ;.......................get the unit of measure......................
 166+ C1C3              .ItemMeasure:	        MMUSelectStockTable
 166+ C1C3 ED 91 57 37 >                     nextreg StockTableMMU,     BankStockTable
 167+ C1C7 C1                                   pop		bc                                  ; get item number
 168+ C1C8 78                                   ld		a,b                                 ; get unit of measure
 169+ C1C9 FD 7E 07                             ld      a,(iy+StockUoMOffset)               ; UoM Position
 170+ C1CC 21 52 8E                             ld		hl,WordIdxUoMFull                   ; .
 171+ C1CF CD 39 89                             call	getTableText                        ; .
 172+ C1D2 EB                                   ex      de,hl
 173+ C1D3 3A 3B C0                             ld      a,(inventory_curr_row)
 174+ C1D6                                      MMUSelectLayer2
 174+ C1D6 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 175+ C1DA                                      print_msg_at_de_macro txt_status_colour,  a,  inv_stock_uom_pos_col
 175+ C1DA 0E FF       >                        ld      c,txt_status_colour
 175+ C1DC 47          >                        ld      b,a
 175+ C1DD 21 E0 00    >                        ld      hl,inv_stock_uom_pos_col
 175+ C1E0 CD 4B E6    >                        call    l2_print_at_320
 176+ C1E3 3A 3B C0                             ld 		a,(inventory_curr_row)
 177+ C1E6 C6 08                                add		a,8
 178+ C1E8 32 3B C0                             ld 		(inventory_curr_row),a
 179+ C1EB C9                                   ret
 180+ C1EC              ;----------------------------------------------------------------------------------------------------------------------------------
 181+ C1EC 2A 91 85     INM_GetCash:            ld		hl,(Cash+2)
 182+ C1EF EB                                   ex      de,hl
 183+ C1F0 DD 2A 8F 85                          ld      ix,(Cash)
 184+ C1F4 FD 21 3D C0                          ld		iy,INM_cash_amount
 185+ C1F8 CD 9B C0                             call 	INM_DispDEIXtoIY
 186+ C1FB FD E5                                push    IY
 187+ C1FD D1                                   pop     de
 188+ C1FE 21 47 C0                             ld      hl,INM_cash_UoM
 189+ C201 01 04 00                             ld      bc,4
 190+ C204 ED B0                                ldir
 191+ C206 C9                                   ret
 192+ C207              ;----------------------------------------------------------------------------------------------------------------------------------
 193+ C207              draw_inventory_menu:    MMUSelectLayer1
 193+ C207 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 194+ C20B CD 8F E0                             call	l1_cls
 195+ C20E 3E 07                                ld		a,7
 196+ C210 CD AA E0                             call	l1_attr_cls_to_a
 197+ C213                                      MMUSelectLayer2
 197+ C213 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 198+ C217 CD 0C E0                             call    asm_l2_double_buffer_off
 199+ C21A CD C5 E3                             call    l2_320_initialise
 200+ C21D CD 40 E3                             call    l2_320_cls
 201+ C220                                      MMUSelectSpriteBank
 201+ C220 ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
 202+ C224 CD B7 E7                             call    sprite_cls_cursors
 203+ C227                                      MMUSelectLayer2
 203+ C227 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 204+ C22B CD 3D E7     .Drawbox:               call    l2_draw_menu_border
 205+ C22E 06 17                                ld      b,$17
 206+ C230 21 01 00                             ld      hl,1
 207+ C233 11 3C 01                             ld      de,320-4
 208+ C236 0E C0                                ld      c,$C0
 209+ C238 CD FE E7                             call    l2_draw_horz_line_320           ;b = row; hl = col, de = length, c = color"
 210+ C23B 06 2F                                ld      b,$2F
 211+ C23D 21 01 00                             ld      hl,1
 212+ C240 11 3C 01                             ld      de,320-4
 213+ C243 0E C0                                ld      c,$C0
 214+ C245 CD FE E7                             call    l2_draw_horz_line_320           ;b = row; hl = col, de = length, c = color"
 215+ C248 CD 72 C0     .StaticText:	        call	INM_print_boiler_text
 216+ C24B CD 43 C1     .DisplayFuel:           call	INM_GetFuelLevel
 217+ C24E 21 D0 AE                             ld		hl, txt_fuel_level
 218+ C251 7E                                   ld		a,(hl)
 219+ C252 FE 30                                cp		'0'
 220+ C254 20 01                                jr		nz,.PrintFuel
 221+ C256 23           .SkipLeadingZero:	    inc		hl
 222+ C257 EB           .PrintFuel:             ex      de,hl
 223+ C258                                      MMUSelectLayer2
 223+ C258 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 224+ C25C                                      print_msg_at_de_macro txt_status_colour,  inv_fuel_pos_row,  inv_fuel_pos_col
 224+ C25C 0E FF       >                        ld      c,txt_status_colour
 224+ C25E 06 1B       >                        ld      b,inv_fuel_pos_row
 224+ C260 21 30 00    >                        ld      hl,inv_fuel_pos_col
 224+ C263 CD 4B E6    >                        call    l2_print_at_320
 225+ C266 CD EC C1     .DisplayCash:           call	INM_GetCash
 226+ C269                                      MMUSelectLayer2
 226+ C269 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 227+ C26D                                      print_msg_macro txt_status_colour,  inv_cash_pos_row,  inv_cash_pos_col,  INM_cash_amount
 227+ C26D 0E FF       >                        ld      c,txt_status_colour
 227+ C26F 06 23       >                        ld      b,inv_cash_pos_row
 227+ C271 21 30 00    >                        ld      hl,inv_cash_pos_col
 227+ C274 11 3D C0    >                        ld      de,INM_cash_amount
 227+ C277 CD 4B E6    >                        call    l2_print_at_320
 228+ C27A                                    ;  ld		bc,inv_cash_position
 229+ C27A                                     ; ld		hl,INM_cash_amount
 230+ C27A              .DisplayInventory:      ZeroA
 230+ C27A AF          >                        xor a
 231+ C27B FD 21 00 E0                          ld      iy,StockFood                ; start of the table for data
 232+ C27F F5           .InvLoop:	            push	af
 233+ C280 CD 6F C1                             call	PrintInvItem
 234+ C283 FD E5 E1                             ld      hl,iy                       ; move to next row
 235+ C286 3E 08                                ld      a,StockRowWidth
 236+ C288 ED 31                                add     hl,a
 237+ C28A E5 FD E1                             ld      iy,hl
 238+ C28D F1                                   pop		af
 239+ C28E 3C                                   inc		a
 240+ C28F FE 11                                cp		17
 241+ C291 20 EC                                jr		nz,.InvLoop
 242+ C293 C9                                   ret
 243+ C294
# file closed: ./Menus/inventory_menu.asm
 760  C294                  DISPLAY "Bank ",BankMenuInvent," - Bytes free ",/D, $2000 - ($-MenuInventAddr), " - BankMenuInvent"
 761  C294              ; Bank 53  ------------------------------------------------------------------------------------------------------------------------
 762  C294                  SLOT    MenuSystemAddr
 763  C294                  PAGE    BankMenuSystem
 764  C294              	ORG     MenuSystemAddr
 765  C000                  INCLUDE "./Menus/system_data_menu.asm"
# file opened: ./Menus/system_data_menu.asm
   1+ C000 53 79 73 74  system_data_page_marker DB "System      PG53"
   1+ C004 65 6D 20 20
   1+ C008 20 20 20 20
   1+ C00C 50 47 35 33
   2+ C010
   3+ C010              GovernmentIndexOffset	EQU 75
   4+ C010              SDM_system_pos_row      EQU $08
   5+ C010              SDM_distance_pos_row    EQU $1B
   6+ C010              SDM_Economy_pos_row     EQU $23
   7+ C010              SDM_gov_pos_row         EQU $2B
   8+ C010              SDM_tech_level_pos_row	EQU $33
   9+ C010              SDM_population_pos_row  EQU $3B
  10+ C010              SDM_species_pos_row     EQU $43
  11+ C010              SDM_UoM_pos_row         EQU $2B
  12+ C010              SDM_prod_pos_row        EQU $53
  13+ C010              SDM_radius_pos_row      EQU $5B
  14+ C010              SDM_desc_pos_row        EQU $6B
  15+ C010              SDM_dtxt_pos_row        EQU $7B
  16+ C010
  17+ C010              SDM_system_pos_col      EQU $0008
  18+ C010              SDM_distance_pos_col    EQU $0060
  19+ C010              SDM_gov_pos_col	        EQU $0060
  20+ C010              SDM_tech_level_pos_col	EQU $0060
  21+ C010              SDM_species_pos_col     EQU $0060
  22+ C010              SDM_population_pos_col  EQU $0060
  23+ C010              SDM_prod_pos_col        EQU $00A0
  24+ C010              SDM_radius_pos_col      EQU $00A0
  25+ C010              SDM_desc_pos_col        EQU $0008
  26+ C010              SDM_economy_pos_col     EQU $0060
  27+ C010
  28+ C010 40 00        plant_boiler_text		DW $0040
  28+ C012 02             DB $02
  28+ C013 A6 8F          DW TextBuffer
  29+ C015 80 00        						DW $0080
  29+ C017 02             DB $02
  29+ C018 70 90          DW name_expanded
  30+ C01A 08 00        						DW $0008
  30+ C01C 1B             DB $1B
  30+ C01D EE 8A          DW WordDistance
  31+ C01F 08 00        						DW $0008
  31+ C021 23             DB $23
  31+ C022 F7 8A          DW WordEconomy
  32+ C024 08 00        						DW $0008
  32+ C026 2B             DB $2B
  32+ C027 FF 8A          DW WordGovernment
  33+ C029 08 00        						DW $0008
  33+ C02B 33             DB $33
  33+ C02C 0A 8B          DW WordTechLevel
  34+ C02E 08 00        						DW $0008
  34+ C030 3B             DB $3B
  34+ C031 14 8B          DW WordPopulation
  35+ C033 08 00                                DW $0008
  35+ C035 43             DB $43
  35+ C036 DC 8D          DW WordSpecies
  36+ C038 08 00        						DW $0008
  36+ C03A 53             DB SDM_prod_pos_row
  36+ C03B 2F 8B          DW WordGross
  37+ C03D 38 00        						DW $0038
  37+ C03F 53             DB SDM_prod_pos_row
  37+ C040 35 8B          DW WordProductivity
  38+ C042 08 00        						DW $0008
  38+ C044 5B             DB SDM_radius_pos_row
  38+ C045 42 8B          DW WordAverage
  39+ C047 48 00        						DW $0048
  39+ C049 5B             DB SDM_radius_pos_row
  39+ C04A 4A 8B          DW WordRadius
  40+ C04C 08 00                                DW $0008
  40+ C04E 6B             DB SDM_desc_pos_row
  40+ C04F E4 8D          DW WordDescription
  41+ C051
  42+ C051 60 0B A6 8F  planet_zero_dist		DW $0B60,TextBuffer
  43+ C055 60 13 A6 8F  planet_economy_disp		DW $1360,TextBuffer
  44+ C059 0A 00        techlevel_value			DB 10,0
  45+ C05B 00 00 00...  distance_value          DS 20,0
  46+ C06F 20 4C 69 67  distance_uom            DB " Light Years",0
  46+ C073 68 74 20 59
  46+ C077 65 61 72 73
  46+ C07B 00
  47+ C07C 00 00 00...  radius_value            DS 20
  48+ C090 00                                   DB 0
  49+ C091 20 6B 6D 00  radius_uom              DB " km",0
  50+ C095 00 00 00...  population_value        DS 20
  51+ C0A9 00                                   DB 0
  52+ C0AA 20 42 69 6C  population_uom          DB " Billion",0
  52+ C0AE 6C 69 6F 6E
  52+ C0B2 00
  53+ C0B3 00 00 00...  productivity_value      DS 20
  54+ C0C7 00                                   DB 0
  55+ C0C8 20 4D 20 43  productivity_uom        DB " M CR",0
  55+ C0CC 52 00
  56+ C0CE
  57+ C0CE
  58+ C0CE
  59+ C0CE 00           system_present_or_target DB 0
  60+ C0CF 00 00        saved_present			 DW 0
  61+ C0D1
  62+ C0D1
  63+ C0D1 00 00 00...  SD_present_name         DS  30
  64+ C0EF 00                                   DB  0
  65+ C0F0 00 00 00...  SD_target_name          DS  30
  66+ C10E 00                                   DB  0
  67+ C10F 00 00 00...  SD_species              DS 30
  68+ C12D 00                                   DB 0
  69+ C12E 00 00 00...  SD_planet_description   DS 300,0
  70+ C25A
  71+ C25A 00           SDDisplayGovernment     DB 0
  72+ C25B 00           SDDisplayEconomy        DB 0
  73+ C25C 00           SDDisplayTekLevel       DB 0
  74+ C25D 00           SDDisplayPopulation     DB 0
  75+ C25E 00 00        SDDisplayProductivity   DW 0
  76+ C260 00 00        SDDisplayRadius         DW 0
  77+ C262              SDDataLength            EQU $ - SDDisplayEconomy
  78+ C262
  79+ C262 21 0A E9     SD_copy_system_data:    ld      hl,GalaxyDisplayGovernment
  80+ C265 11 5A C2                             ld      de,SDDisplayGovernment
  81+ C268 01 07 00                             ld      bc,SDDataLength
  82+ C26B ED B0                                ldir
  83+ C26D 21 5C C2     .DisplayTechPlus1:      ld     hl,SDDisplayTekLevel
  84+ C270 34                                   inc    (hl)
  85+ C271 C9                                   ret
  86+ C272
  87+ C272 21 7F E8     SD_copy_to_name:        ld      hl,GalaxyExpandedName
  88+ C275 01 1E 00                             ld      bc,30
  89+ C278 ED B0                                ldir
  90+ C27A C9                                   ret
  91+ C27B
  92+ C27B 21 64 F1     SD_copy_species:        ld      hl,GalaxySpecies
  93+ C27E 11 0F C1                             ld      de,SD_species
  94+ C281 01 1E 00                             ld      bc,30
  95+ C284 ED B0                                ldir
  96+ C286 C9                                   ret
  97+ C287
  98+ C287 21 85 F1     SD_copy_description:    ld      hl,GalaxyPlanetDescription
  99+ C28A 11 2E C1                             ld      de,SD_planet_description
 100+ C28D 7E           SDCopyLoop:             ld      a,(hl)
 101+ C28E FE 00                                cp      0
 102+ C290 28 05                                jr      z,.SD_Copy_Done
 103+ C292 ED A0                                ldi
 104+ C294 C3 8D C2                             jp      SDCopyLoop
 105+ C297 12           .SD_Copy_Done:          ld      (de),a
 106+ C298 C9                                   ret
 107+ C299
 108+ C299 26 00        SDM_DispAtoDE:          ld h,0
 109+ C29B 6F                                   ld l,a
 110+ C29C 01 F0 D8                             ld	bc,-10000
 111+ C29F CD B5 C2                             call	.Num1
 112+ C2A2 01 18 FC                             ld	bc,-1000
 113+ C2A5 CD B5 C2                             call	.Num1
 114+ C2A8 01 9C FF                             ld	bc,-100
 115+ C2AB CD B5 C2                             call	.Num1
 116+ C2AE 0E F6                                ld	c,-10
 117+ C2B0 CD B5 C2                             call	.Num1
 118+ C2B3 0E FF                                ld	c,-1
 119+ C2B5 3E 2F        .Num1:	                ld	a,'0'-1
 120+ C2B7 3C           .Num2:	                inc	a
 121+ C2B8 09                                   add	hl,bc
 122+ C2B9 38 FC                                jr	c,.Num2
 123+ C2BB ED 42                                sbc	hl,bc
 124+ C2BD 12                                   ld	(de),a
 125+ C2BE 13                                   inc	de
 126+ C2BF C9                                   ret
 127+ C2C0
 128+ C2C0
 129+ C2C0 3A 45 80     sdm_calc_distance:      ld      a,(Galaxy)
 130+ C2C3                                      MMUSelectGalaxyA
 130+ C2C3 ED 92 57    >                     nextreg GalaxyDataMMU,     a
 131+ C2C6 ED 4B 58 80                          ld      bc,(PresentSystemX)
 132+ C2CA ED 43 57 E8                          ld      (GalaxyPresentSystem),bc
 133+ C2CE ED 4B 0B C3                          ld      bc,(SD_working_cursor)
 134+ C2D2 ED 43 59 E8                          ld      (GalaxyDestinationSystem),bc
 135+ C2D6 CD F7 FB                             call    galaxy_find_distance            ; get distance into HL
 136+ C2D9 C9           .done_number:           ret
 137+ C2DA
 138+ C2DA              ;----------------------------------------------------------------------------------------------------------------------------------
 139+ C2DA              ;">print_boilder_text ix = text structure, b = message count"
 140+ C2DA 06 0D        SDM_print_boiler_text:  ld		b,13
 141+ C2DC DD 21 10 C0                          ld		ix,plant_boiler_text
 142+ C2E0 C5           .BoilerTextLoop:        push	bc			; Save Message Count loop value
 143+ C2E1 DD 6E 00                             ld		l,(ix+0)	; Get col into hl
 144+ C2E4 DD 66 01                             ld		h,(ix+1)	;
 145+ C2E7 DD 46 02                             ld		b,(ix+2)	; get row into b
 146+ C2EA DD 5E 03                             ld		e,(ix+3)	; Get text address into hl
 147+ C2ED DD 56 04                             ld		d,(ix+4)	; .
 148+ C2F0 DD E5                                push    ix          ; save ix and prep for add via hl
 149+ C2F2                                      print_msg_at_de_at_b_hl_macro txt_status_colour
 149+ C2F2 0E FF       >                        ld      c,txt_status_colour
 149+ C2F4 CD 4B E6    >                        call    l2_print_at_320
 150+ C2F7 E1                                   pop     hl          ; add 5 to ix
 151+ C2F8 3E 05                                ld      a,5         ; .
 152+ C2FA ED 31                                add     hl,a        ; .
 153+ C2FC E5 DD E1                             ld      ix,hl       ; .
 154+ C2FF C1                                   pop		bc
 155+ C300 10 DE                                djnz	.BoilerTextLoop
 156+ C302 C9                                   ret
 157+ C303
 158+ C303 7E           PlanetLeftJustifyLoop:  ld      a,(hl)
 159+ C304 FE 30                                cp      "0"
 160+ C306 C0                                   ret      nz
 161+ C307 23                                   inc     hl
 162+ C308 10 F9                                djnz    PlanetLeftJustifyLoop
 163+ C30A C9                                   ret
 164+ C30B
 165+ C30B 00 00        SD_working_cursor       DW   0
 166+ C30D
 167+ C30D 00 00 00...  sd_copy_of_seed         DS 6
 168+ C313
 169+ C313              draw_system_data_menu:  MMUSelectLayer1
 169+ C313 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 170+ C317 CD 8F E0                             call	l1_cls
 171+ C31A 3E 07                                ld		a,7
 172+ C31C CD AA E0                             call	l1_attr_cls_to_a
 173+ C31F                                      MMUSelectLayer2
 173+ C31F ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 174+ C323 CD 0C E0                             call    asm_l2_double_buffer_off
 175+ C326 CD C5 E3                             call    l2_320_initialise
 176+ C329 CD 40 E3                             call    l2_320_cls
 177+ C32C                                      MMUSelectSpriteBank
 177+ C32C ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
 178+ C330 CD B7 E7                             call    sprite_cls_cursors
 179+ C333                                      MMUSelectLayer2
 179+ C333 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 180+ C337 CD 3D E7     .Drawbox:               call    l2_draw_menu_border
 181+ C33A 06 17                                ld      b,$17
 182+ C33C 21 01 00                             ld      hl,1
 183+ C33F 11 3C 01                             ld      de,320-4
 184+ C342 0E C0                                ld      c,$C0
 185+ C344 CD FE E7                             call    l2_draw_horz_line_320           ;b = row; hl = col, de = length, c = color"
 186+ C347 06 67        .DescHorzLine:          ld      b,SDM_desc_pos_row -4
 187+ C349 21 01 00                             ld      hl,1
 188+ C34C 11 3C 01                             ld      de,320-4
 189+ C34F 0E C0                                ld      c,$C0
 190+ C351 CD FE E7                             call    l2_draw_horz_line_320
 191+ C354 CD DA C2     .PrintBoiler:           call	SDM_print_boiler_text
 192+ C357                                      ZeroA
 192+ C357 AF          >                        xor a
 193+ C358 32 CE C0                             ld      (system_present_or_target),a
 194+ C35B 3E 08                                ld		a,8
 195+ C35D 32 C3 7F                             ld		(MenuIdMax),a
 196+ C360 3A 45 80     .SelectGalaxy:          ld      a,(Galaxy)
 197+ C363                                      MMUSelectGalaxyA
 197+ C363 ED 92 57    >                     nextreg GalaxyDataMMU,     a
 198+ C366 ED 4B 5A 80  .CheckCursorOrHome:     ld      bc,(TargetSystemX)              ; Find out if we have to work on hyperspace or normal cursor
 199+ C36A ED 43 0B C3                          ld      (SD_working_cursor),bc
 200+ C36E ED 43 5B E8                          ld      (GalaxyTargetSystem),bc
 201+ C372 CD 64 FC                             call    galaxy_system_under_cursor
 202+ C375 FE FF        .IsCursorOnSystem:      cp      $FF                               ; if a = 0 then failed
 203+ C377 28 0F                                jr      z,.FoundASystem
 204+ C379 ED 4B 58 80  .UsePresentSystem:      ld      bc,(PresentSystemX)
 205+ C37D ED 43 0B C3                          ld      (SD_working_cursor),bc
 206+ C381 ED 43 5B E8                          ld      (GalaxyTargetSystem),bc
 207+ C385 CD 64 FC                             call    galaxy_system_under_cursor
 208+ C388 ED 4B 5A 80  .FoundASystem:          ld      bc,(TargetSystemX)
 209+ C38C 2A 58 80                             ld      hl,(PresentSystemX)
 210+ C38F 78                                   ld      a,b
 211+ C390 BC                                   cp      h
 212+ C391 20 04                                jr      nz,.DiffCoord
 213+ C393 79                                   ld      a,c
 214+ C394 BD                                   cp      l
 215+ C395 28 05                                jr      z,.SameCoord
 216+ C397 3E FF        .DiffCoord:             ld      a,$FF
 217+ C399 32 CE C0                             ld      (system_present_or_target),a
 218+ C39C 21 46 80     .SameCoord:             ld      hl,WorkingSeeds            ; found a system so save it
 219+ C39F 11 0D C3                             ld      de,sd_copy_of_seed
 220+ C3A2 CD 02 FA                             call    galaxy_copy_seed
 221+ C3A5 CD C5 FA     .GetSystemName:         call    GalaxyDigramWorkings       ; we have galaxy working seed populated now
 222+ C3A8 3E 0E        .ExpandStatic:          ld		a,14
 223+ C3AA CD ED 8F                             call	expandTokenToString
 224+ C3AD 3A 45 80     .TargetSystem:          ld      a,(Galaxy)                  ; DEBUG as galaxy n is not working
 225+ C3B0                                      MMUSelectGalaxyA
 225+ C3B0 ED 92 57    >                     nextreg GalaxyDataMMU,     a
 226+ C3B3 ED 4B 0B C3                          ld      bc, (SD_working_cursor)
 227+ C3B7 21 0D C3                             ld      hl,sd_copy_of_seed
 228+ C3BA 11 F8 E8                             ld      de,GalaxyWorkingSeed
 229+ C3BD CD 02 FA                             call    galaxy_copy_seed
 230+ C3C0 CD 6D F9                             call    galaxy_planet_data                              ; Geneate galaxy data from working seed
 231+ C3C3 CD 62 C2                             call    SD_copy_system_data
 232+ C3C6 11 70 90                             ld      de,name_expanded
 233+ C3C9 CD 72 C2                             call    SD_copy_to_name
 233+ C3CC
 234+ C3CC 11 1B 13                             ld      de,hyperspace_position
 235+ C3CF 21 70 90                             ld      hl,name_expanded
 236+ C3D2                                      MMUSelectLayer2
 236+ C3D2 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 237+ C3D6                                      print_msg_macro txt_status_colour,  SDM_system_pos_row,  SDM_system_pos_col,  name_expanded
 237+ C3D6 0E FF       >                        ld      c,txt_status_colour
 237+ C3D8 06 08       >                        ld      b,SDM_system_pos_row
 237+ C3DA 21 08 00    >                        ld      hl,SDM_system_pos_col
 237+ C3DD 11 70 90    >                        ld      de,name_expanded
 237+ C3E0 CD 4B E6    >                        call    l2_print_at_320
 238+ C3E3
 239+ C3E3 3A CE C0     .CalcDistance:          ld		a,(system_present_or_target)
 240+ C3E6 FE 00                                cp		0
 241+ C3E8 28 2F                                jr		z,.ZeroDistance
 242+ C3EA CD C0 C2     .NotZero:               call    sdm_calc_distance
 243+ C3ED DD 2A 7A 80  .DisplayDistance:       ld      ix,(Distance)
 244+ C3F1 11 00 00                             ld      de,0
 245+ C3F4 FD 21 5B C0                          ld      iy,distance_value
 246+ C3F8 CD B2 9D                             call    DispDEIXtoIY1DP
 247+ C3FB FD E5        .AddDistUo              push    iy
 248+ C3FD E1                                   pop     hl
 249+ C3FE 23                                   inc     hl
 250+ C3FF 11 6F C0                             ld      de,distance_uom
 251+ C402 CD 6F C5                             call    SDTackOnUOMtoHL
 252+ C405              .displayDistance:       MMUSelectLayer2
 252+ C405 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 253+ C409                                      print_msg_macro txt_status_colour,  SDM_distance_pos_row,  SDM_distance_pos_col,  TextBuffer
 253+ C409 0E FF       >                        ld      c,txt_status_colour
 253+ C40B 06 1B       >                        ld      b,SDM_distance_pos_row
 253+ C40D 21 60 00    >                        ld      hl,SDM_distance_pos_col
 253+ C410 11 A6 8F    >                        ld      de,TextBuffer
 253+ C413 CD 4B E6    >                        call    l2_print_at_320
 254+ C416 C3 2F C4                             jp      .DisplayEconomy
 255+ C419 3E 18        .ZeroDistance:          ld		a,24						; print literal zero dist
 256+ C41B CD ED 8F                             call	expandTokenToString
 257+ C41E                                      MMUSelectLayer2
 257+ C41E ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 258+ C422                                      print_msg_macro txt_status_colour,  SDM_distance_pos_row,  SDM_distance_pos_col,  TextBuffer
 258+ C422 0E FF       >                        ld      c,txt_status_colour
 258+ C424 06 1B       >                        ld      b,SDM_distance_pos_row
 258+ C426 21 60 00    >                        ld      hl,SDM_distance_pos_col
 258+ C429 11 A6 8F    >                        ld      de,TextBuffer
 258+ C42C CD 4B E6    >                        call    l2_print_at_320
 259+ C42F 3A 5B C2     .DisplayEconomy:        ld		a,(SDDisplayEconomy)
 260+ C432 C6 0F                                add     a,TextEconomyOffset
 261+ C434 CD ED 8F                             call	expandTokenToString
 262+ C437 EB                                   ex      de,hl
 263+ C438                                      MMUSelectLayer2
 263+ C438 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 264+ C43C                                      print_msg_macro txt_status_colour,  SDM_Economy_pos_row,  SDM_economy_pos_col,  TextBuffer; ,  planet_economy_disp
 264+ C43C 0E FF       >                        ld      c,txt_status_colour
 264+ C43E 06 23       >                        ld      b,SDM_Economy_pos_row
 264+ C440 21 60 00    >                        ld      hl,SDM_economy_pos_col
 264+ C443 11 A6 8F    >                        ld      de,TextBuffer
 264+ C446 CD 4B E6    >                        call    l2_print_at_320
 265+ C449 3A 5A C2     .DisplayGovernment:     ld		a,(SDDisplayGovernment)
 266+ C44C C6 4C                                add		a,TextGovOffset
 267+ C44E CD DF 8F                             call	WordIndexToAddress
 268+ C451 EB                                   ex      de,hl
 269+ C452                                      MMUSelectLayer2
 269+ C452 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 270+ C456                                      print_msg_at_de_macro txt_status_colour,  SDM_gov_pos_row,  SDM_gov_pos_col;,  GovernmentScreenPos
 270+ C456 0E FF       >                        ld      c,txt_status_colour
 270+ C458 06 2B       >                        ld      b,SDM_gov_pos_row
 270+ C45A 21 60 00    >                        ld      hl,SDM_gov_pos_col
 270+ C45D CD 4B E6    >                        call    l2_print_at_320
 271+ C460 3A 5C C2     .DisplayTechLevel:      ld		a,(SDDisplayTekLevel)
 272+ C463 11 59 C0                             ld		de,techlevel_value
 273+ C466 CD 99 C2                             call    SDM_DispAtoDE
 274+ C469 AF                                   xor     a
 275+ C46A 12                                   ld      (de),a
 276+ C46B 21 59 C0                             ld      hl,techlevel_value
 277+ C46E 06 05                                ld      b,5
 278+ C470 CD 03 C3                             call    PlanetLeftJustifyLoop
 279+ C473                                      MMUSelectLayer2
 279+ C473 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 280+ C477                                      print_msg_macro txt_status_colour,  SDM_tech_level_pos_row,  SDM_tech_level_pos_col,  techlevel_value
 280+ C477 0E FF       >                        ld      c,txt_status_colour
 280+ C479 06 33       >                        ld      b,SDM_tech_level_pos_row
 280+ C47B 21 60 00    >                        ld      hl,SDM_tech_level_pos_col
 280+ C47E 11 59 C0    >                        ld      de,techlevel_value
 280+ C481 CD 4B E6    >                        call    l2_print_at_320
 281+ C484 3A 5D C2     .DisplayPopulation:     ld      a,(SDDisplayPopulation)
 282+ C487 DD 26 00                             ld      ixh,0
 283+ C48A DD 6F                                ld      ixl,a
 284+ C48C 11 00 00                             ld      de,0
 285+ C48F FD 21 95 C0                          ld      iy,population_value
 286+ C493 CD B2 9D                             call    DispDEIXtoIY1DP
 287+ C496 FD E5        .AddUoM:                push    iy
 288+ C498 E1                                   pop     hl
 289+ C499 23                                   inc     hl
 290+ C49A 11 AA C0                             ld      de,population_uom
 291+ C49D CD 6F C5                             call    SDTackOnUOMtoHL
 292+ C4A0 11 60 2B                             ld      de,$2B60
 293+ C4A3 21 95 C0                             ld      hl,population_value
 294+ C4A6                                      MMUSelectLayer2
 294+ C4A6 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 295+ C4AA                                      print_msg_macro txt_status_colour,  SDM_population_pos_row,  SDM_population_pos_col,  population_value
 295+ C4AA 0E FF       >                        ld      c,txt_status_colour
 295+ C4AC 06 3B       >                        ld      b,SDM_population_pos_row
 295+ C4AE 21 60 00    >                        ld      hl,SDM_population_pos_col
 295+ C4B1 11 95 C0    >                        ld      de,population_value
 295+ C4B4 CD 4B E6    >                        call    l2_print_at_320
 296+ C4B7              ;SDDisplayPopulation     DB 0
 297+ C4B7 3A 45 80     .DisplayPopulationType: ld      a,(Galaxy)      ; DEBUG as galaxy n is not working
 298+ C4BA                                      MMUSelectGalaxyA
 298+ C4BA ED 92 57    >                     nextreg GalaxyDataMMU,     a
 299+ C4BD CD DC F6                             call    galaxy_get_species
 300+ C4C0 CD 7B C2                             call    SD_copy_species
 301+ C4C3                                      MMUSelectLayer2
 301+ C4C3 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 302+ C4C7                                      print_msg_macro txt_status_colour,  SDM_species_pos_row,  SDM_species_pos_col,  SD_species
 302+ C4C7 0E FF       >                        ld      c,txt_status_colour
 302+ C4C9 06 43       >                        ld      b,SDM_species_pos_row
 302+ C4CB 21 60 00    >                        ld      hl,SDM_species_pos_col
 302+ C4CE 11 0F C1    >                        ld      de,SD_species
 302+ C4D1 CD 4B E6    >                        call    l2_print_at_320
 303+ C4D4 2A 5E C2     .DisplayProductivity:   ld      hl,(SDDisplayProductivity)
 304+ C4D7 E5                                   push    hl
 305+ C4D8 DD E1                                pop     ix
 306+ C4DA 11 00 00                             ld      de,0
 307+ C4DD FD 21 B3 C0                          ld      iy,productivity_value
 308+ C4E1 CD C1 9D                             call    DispDEIXtoIY
 309+ C4E4              .AddProdUoM:            ;break
 310+ C4E4 FD E5                                push    iy
 311+ C4E6 E1                                   pop     hl
 312+ C4E7                                      ;inc     hl
 313+ C4E7 11 C8 C0                             ld      de,productivity_uom
 314+ C4EA CD 6F C5                             call    SDTackOnUOMtoHL
 315+ C4ED 11 A0 3B                             ld      de,$3BA0
 316+ C4F0 21 B3 C0                             ld      hl,productivity_value
 317+ C4F3                                      MMUSelectLayer2
 317+ C4F3 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 318+ C4F7                                      print_msg_macro txt_status_colour,  SDM_prod_pos_row,  SDM_prod_pos_col,  productivity_value
 318+ C4F7 0E FF       >                        ld      c,txt_status_colour
 318+ C4F9 06 53       >                        ld      b,SDM_prod_pos_row
 318+ C4FB 21 A0 00    >                        ld      hl,SDM_prod_pos_col
 318+ C4FE 11 B3 C0    >                        ld      de,productivity_value
 318+ C501 CD 4B E6    >                        call    l2_print_at_320
 319+ C504 3A 45 80     .DisplayRadius:         ld      a,(Galaxy)      ; DEBUG as galaxy n is not working
 320+ C507                                      MMUSelectGalaxyA
 320+ C507 ED 92 57    >                     nextreg GalaxyDataMMU,     a
 321+ C50A 2A 10 E9                             ld      hl,(GalaxyDisplayRadius)
 322+ C50D E5                                   push    hl
 323+ C50E DD E1                                pop     ix
 324+ C510 11 00 00                             ld      de,0
 325+ C513 FD 21 7C C0                          ld      iy,radius_value
 326+ C517 CD C1 9D                             call    DispDEIXtoIY
 327+ C51A FD E5        .AddRadiusUoM:          push    iy
 328+ C51C E1                                   pop     hl
 329+ C51D                                      ;inc     hl
 330+ C51D 11 91 C0                             ld      de,radius_uom
 331+ C520 CD 6F C5                             call    SDTackOnUOMtoHL
 332+ C523                                      MMUSelectLayer2
 332+ C523 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 333+ C527                                      print_msg_macro txt_status_colour,  SDM_radius_pos_row,  SDM_radius_pos_col,  radius_value
 333+ C527 0E FF       >                        ld      c,txt_status_colour
 333+ C529 06 5B       >                        ld      b,SDM_radius_pos_row
 333+ C52B 21 A0 00    >                        ld      hl,SDM_radius_pos_col
 333+ C52E 11 7C C0    >                        ld      de,radius_value
 333+ C531 CD 4B E6    >                        call    l2_print_at_320
 334+ C534 3A 45 80     .DisplayDescription:    ld      a,(Galaxy)      ; DEBUG as galaxy n is not working
 335+ C537                                      MMUSelectGalaxyA
 335+ C537 ED 92 57    >                     nextreg GalaxyDataMMU,     a
 336+ C53A 11 F8 E8     .CopySaveToGal:         ld      de,GalaxyWorkingSeed
 337+ C53D 21 0D C3                             ld      hl,sd_copy_of_seed
 338+ C540 CD 02 FA                             call    galaxy_copy_seed
 339+ C543 ED 4B 0B C3                          ld      bc,(SD_working_cursor)
 340+ C547 CD 6F F8                             call     GalaxyGenerateDesc
 341+ C54A CD 87 C2                             call    SD_copy_description
 342+ C54D FD 2E 26                             ld      iyl,38          ; wrap length
 343+ C550                                      MMUSelectLayer2
 343+ C550 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 344+ C554                                      print_msg_wrap_macro txt_status_colour,  SDM_dtxt_pos_row,  SDM_desc_pos_col,  SD_planet_description
 344+ C554 0E FF       >                        ld      c,txt_status_colour
 344+ C556 06 7B       >                        ld      b,SDM_dtxt_pos_row
 344+ C558 21 08 00    >                        ld      hl,SDM_desc_pos_col
 344+ C55B 11 2E C1    >                        ld      de,SD_planet_description
 344+ C55E CD 75 E6    >                        call    l2_print_at_wrap_320
 345+ C561 C9                                   ret
 346+ C562
 347+ C562              ; HL = value to add on
 348+ C562              ; de = Unit of Measure
 349+ C562 7E           SDAddUoMtoHL:           ld      a,(hl)
 350+ C563 FE 00                                cp      0
 351+ C565 28 03                                jr      z,.FoundEnd
 352+ C567 23                                   inc     hl
 353+ C568 18 F8                                jr      SDAddUoMtoHL
 354+ C56A EB           .FoundEnd:              ex      de,hl
 355+ C56B CD 8D C2                             call    SDCopyLoop
 356+ C56E C9                                   ret
 357+ C56F
 358+ C56F              ; works on HL already being at end
 359+ C56F              ; de = Unit of Measure
 360+ C56F 23           SDTackOnUOMtoHL:        inc     hl
 361+ C570 EB                                   ex      hl,de
 362+ C571 CD 8D C2                             call    SDCopyLoop
 363+ C574 C9                                   ret
 364+ C575              ;
 365+ C575              ;
 366+ C575              ;    SDDisplayEconomy        DB 0
 367+ C575              ;SDDisplayGovernment     DB 0
 368+ C575              ;SDDisplayEcononmy       DB 0
 369+ C575              ;SDDisplayTekLevel       DB 0
 370+ C575              ;
 371+ C575              ;SDDisplayProductivity   DW 0
 372+ C575              ;SDDisplayRadius         DW 0
 373+ C575              ;SDDataLength            EQU $ - SDDisplayEconomy
 374+ C575              ;
 375+ C575
 376+ C575
 377+ C575
 378+ C575
 379+ C575
 380+ C575              ;; PREsent ssytem
 381+ C575              ;; hyperspace systrem
 382+ C575              ;.StatusText:
 383+ C575              ;	; get closet ssytem to cursor
 384+ C575              ;	call	get_cmdr_condition
 385+ C575              ;	ld		hl, ConditionNameIdx
 386+ C575              ;	call	getTableText
 387+ C575              ;	ld		de,condition_position
 388+ C575              ;	call	l1_print_at
 389+ C575              ;.DisplayFuel:
 390+ C575              ;	call	GetFuelLevel
 391+ C575              ;	ld		hl, txt_fuel_level
 392+ C575              ;	ld		a,(hl)
 393+ C575              ;	cp		'0'
 394+ C575              ;	jr		nz,.PrintFuel
 395+ C575              ;.SkipLeadingZero:
 396+ C575              ;	inc		hl
 397+ C575              ;.PrintFuel:
 398+ C575              ;	ld		de,fuel_position
 399+ C575              ;	call	l1_print_at
 400+ C575              ;.DisplayCash:
 401+ C575              ;	call	GetCash
 402+ C575              ;	ld		hl,txt_cash_amount
 403+ C575              ;	ld		de,cash_position
 404+ C575              ;	call	l1_print_at						; now we have the correct integer
 405+ C575              ;	ld		bc,cash_position
 406+ C575              ;	ld		hl,txt_cash_amount
 407+ C575              ;.CorrectPosition:
 408+ C575              ;	ld		a,(hl)
 409+ C575              ;	cp		0
 410+ C575              ;	jr		z,.DoneCorrection
 411+ C575              ;.StillDigits:
 412+ C575              ;	ld		a,c
 413+ C575              ;	add		a,8								; its 1 character forwards
 414+ C575              ;	ld		c,a
 415+ C575              ;	inc		hl
 416+ C575              ;	jr		.CorrectPosition
 417+ C575              ;.DoneCorrection:
 418+ C575              ;	ld		hl,txt_cash_decimal
 419+ C575              ;	ld		d,b
 420+ C575              ;	ld		e,c
 421+ C575              ;	call	l1_print_at
 422+ C575              ;.PrintLegalStatus:
 423+ C575              ;	ld		a,(FugitiveInnocentStatus)
 424+ C575              ;	cp		0
 425+ C575              ;	jr		nz,.Naughty
 426+ C575              ;	ld		hl,WordClean
 427+ C575              ;	jr		.DisplayLegalStatus
 428+ C575              ;.Naughty:
 429+ C575              ;	cp		50
 430+ C575              ;	jr		c,.JustOffender
 431+ C575              ;.VeryNaughty:
 432+ C575              ;	ld		hl,WordFugitive
 433+ C575              ;	jr		.DisplayLegalStatus
 434+ C575              ;.JustOffender:
 435+ C575              ;	ld		hl,WordOffender
 436+ C575              ;.DisplayLegalStatus:
 437+ C575              ;	ld		de,legal_status_position
 438+ C575              ;	call	l1_print_at						; now we have the correct integer
 439+ C575              ;
 440+ C575 C9           	ret
 441+ C576
# file closed: ./Menus/system_data_menu.asm
 766  C576                  DISPLAY "Bank ",BankMenuSystem," - Bytes free ",/D, $2000 - ($-MenuSystemAddr), " - BankMenuSystem"
 767  C576              ; Bank 54  ------------------------------------------------------------------------------------------------------------------------
 768  C576                  SLOT    MenuMarketAddr
 769  C576                  PAGE    BankMenuMarket
 770  C576                  ORG     MenuMarketAddr
 771  C000                  INCLUDE "./Menus/market_prices_menu.asm"
# file opened: ./Menus/market_prices_menu.asm
   1+ C000 4D 61 72 6B  market_prices_page_marker  DB "MarketPricesPG54"
   1+ C004 65 74 50 72
   1+ C008 69 63 65 73
   1+ C00C 50 47 35 34
   2+ C010
   3+ C010              mkt_boiler_unit_col     equ $80
   4+ C010              mkt_boiler_qty_col      equ $D0
   5+ C010              mkt_boiler_product_col  equ $08
   6+ C010              mkt_boiler_uom_col      equ $70
   7+ C010              mkt_boiler_price_col    equ $C0
   8+ C010              mkt_boiler_stock_col    equ $F0
   9+ C010              mkt_boiler_inv_col      equ $0120
  10+ C010
  11+ C010              mkt_cash_pos_row        equ $D0
  12+ C010              mkt_cargo_pos_row       equ $C0
  13+ C010              market_cash_pos_row     equ $D0
  14+ C010              market_cargo_pos_row    equ $C0
  15+ C010              market_top_row          equ $20
  16+ C010
  17+ C010              mkt_cash_pos_col        equ $0010
  18+ C010              mkt_cargo_pos_col       equ $0010
  19+ C010              market_cash_pos_col     equ $0048
  20+ C010              market_cargo_pos_col    equ $0048
  21+ C010              market_uom_col			equ	mkt_boiler_uom_col
  22+ C010              market_price_col        equ mkt_boiler_price_col + 8
  23+ C010              market_quantity_col 	equ	mkt_boiler_stock_col + $10
  24+ C010              market_cargo_col        equ mkt_boiler_inv_col
  25+ C010
  26+ C010 50 00        market_boiler_text		DW $0050
  26+ C012 02             DB $02
  26+ C013 A6 8F          DW TextBuffer
  27+ C015 20 00        						DW $0020
  27+ C017 02             DB $02
  27+ C018 70 90          DW name_expanded
  28+ C01A 08 00        						DW mkt_boiler_product_col
  28+ C01C 13             DB $13
  28+ C01D 05 8C          DW WordProduct
  29+ C01F 70 00        						DW mkt_boiler_uom_col
  29+ C021 13             DB $13
  29+ C022 0D 8C          DW WordUoM
  30+ C024 C0 00        						DW mkt_boiler_price_col
  30+ C026 13             DB $13
  30+ C027 11 8C          DW WordPrice
  31+ C029 F0 00        						DW mkt_boiler_stock_col
  31+ C02B 13             DB $13
  31+ C02C 35 8C          DW WordStock
  32+ C02E 20 01        						DW mkt_boiler_inv_col
  32+ C030 13             DB $13
  32+ C031 31 8C          DW WordInv
  33+ C033 10 00                                DW mkt_cargo_pos_col
  33+ C035 C0             DB mkt_cargo_pos_row
  33+ C036 72 C0          DW mkt_hold_level
  34+ C038 10 00                                DW mkt_cash_pos_col
  34+ C03A D0             DB mkt_cash_pos_row
  34+ C03B 7A C0          DW mkt_cash
  35+ C03D
  36+ C03D
  37+ C03D
  38+ C03D 30 30 2E 30  txt_market_amount	    DB "00.0",0
  38+ C041 00
  39+ C042 39 39 39 00  txt_market_quantity     DB "999",0
  40+ C046 39 39 39 00  txt_market_cargo        DB "999",0
  41+ C04A 00           market_cursor			DB  $00
  42+ C04B              market_position			equ $2008
  43+ C04B
  44+ C04B              ;market_UomOffset		equ 46
  45+ C04B 20 20 20 20  market_blank_line       DB "                                      ",0
  45+ C04F 20 20 20 20
  45+ C053 20 20 20 20
  45+ C057 20 20 20 20
  45+ C05B 20 20 20 20
  45+ C05F 20 20 20 20
  45+ C063 20 20 20 20
  45+ C067 20 20 20 20
  45+ C06B 20 20 20 20
  45+ C06F 20 20 00
  46+ C072 43 61 72 67  mkt_hold_level          DB "Cargo: ",0
  46+ C076 6F 3A 20 00
  47+ C07A 43 61 73 68  mkt_cash				DB "Cash : ",0
  47+ C07E 20 3A 20 00
  48+ C082 00           mkt_selected_row        db  0
  49+ C083
  50+ C083 00 00 00...  mkt_cash_amount			DS 20
  51+ C097 20 43 72 20  mkt_cash_UoM            DB " Cr       ",0
  51+ C09B 20 20 20 20
  51+ C09F 20 20 00
  52+ C0A2              mkt_cargo_position      equ $A848
  53+ C0A2 00 00 00...  mkt_cargo_amount		DS 20
  54+ C0B6 20 54 6F 6E  mkt_cargo_UoM           DB " Tonnes   ",0
  54+ C0BA 6E 65 73 20
  54+ C0BE 20 20 00
  55+ C0C1              ;                           12345678901
  56+ C0C1
  57+ C0C1              ;----------------------------------------------------------------------------------------------------------------------------------
  58+ C0C1 3A 82 C0     mkt_highlight_row:      ld      a,(mkt_selected_row)
  59+ C0C4 CD A3 C2                             call    PrintMartetItemHigh
  60+ C0C7 C9                                   ret
  61+ C0C8
  62+ C0C8
  63+ C0C8
  64+ C0C8              ;----------------------------------------------------------------------------------------------------------------------------------
  65+ C0C8 3A 82 C0     mkt_lowlight_row        ld      a,(mkt_selected_row)
  66+ C0CB CD AD C2                             call    PrintMarketItemDefault
  67+ C0CE C9                                   ret
  68+ C0CF              ;----------------------------------------------------------------------------------------------------------------------------------
  69+ C0CF CD E6 C0     MKT_DispDEIXtoIY1DP:    call    MKT_DispDEIXtoIY
  70+ C0D2 FD 36 02 00                          ld (iy+2),0
  71+ C0D6 FD 7E 00                             ld      a,(IY+0)
  72+ C0D9 FD 77 01                             ld      (IY+1),a
  73+ C0DC 3E 2E                                ld      a,"."
  74+ C0DE FD 77 00                             ld      (IY+0),a
  75+ C0E1 FD 23                                inc     IY
  76+ C0E3 FD 23                                inc     IY
  77+ C0E5 C9                                   ret
  78+ C0E6              ;----------------------------------------------------------------------------------------------------------------------------------
  79+ C0E6 DD 22 7B C1  MKT_DispDEIXtoIY:       ld (.MKTclcn32z),ix
  80+ C0EA ED 53 7D C1                          ld (.MKTclcn32zIX),de
  81+ C0EE DD 21 77 C1                          ld ix,.MKTclcn32t+36
  82+ C0F2 06 09                                ld b,9
  83+ C0F4 0E 00                                ld c,0
  84+ C0F6 3E 30        .MKTclcn321:            ld a,'0'
  85+ C0F8 B7                                   or a
  86+ C0F9 DD 5E 00     .MKTclcn322:            ld e,(ix+0)
  87+ C0FC DD 56 01                             ld d,(ix+1)
  88+ C0FF 2A 7B C1                             ld hl,(.MKTclcn32z)
  89+ C102 ED 52                                sbc hl,de
  90+ C104 22 7B C1                             ld (.MKTclcn32z),hl
  91+ C107 DD 5E 02                             ld e,(ix+2)
  92+ C10A DD 56 03                             ld d,(ix+3)
  93+ C10D 2A 7D C1                             ld hl,(.MKTclcn32zIX)
  94+ C110 ED 52                                sbc hl,de
  95+ C112 22 7D C1                             ld (.MKTclcn32zIX),hl
  96+ C115 38 04                                jr c,.MKTclcn325
  97+ C117 0C                                   inc c
  98+ C118 3C                                   inc a
  99+ C119 18 DE                                jr .MKTclcn322
 100+ C11B DD 5E 00     .MKTclcn325:            ld e,(ix+0)
 101+ C11E DD 56 01                             ld d,(ix+1)
 102+ C121 2A 7B C1                             ld hl,(.MKTclcn32z)
 103+ C124 19                                   add hl,de
 104+ C125 22 7B C1                             ld (.MKTclcn32z),hl
 105+ C128 DD 5E 02                             ld e,(ix+2)
 106+ C12B DD 56 03                             ld d,(ix+3)
 107+ C12E 2A 7D C1                             ld hl,(.MKTclcn32zIX)
 108+ C131 ED 5A                                adc hl,de
 109+ C133 22 7D C1                             ld (.MKTclcn32zIX),hl
 110+ C136 11 FC FF                             ld de,-4
 111+ C139 DD 19                                add ix,de
 112+ C13B 0C                                   inc c
 113+ C13C 0D                                   dec c
 114+ C13D 28 05                                jr z,.MKTclcn323
 115+ C13F FD 77 00                             ld (iy+0),a
 116+ C142 FD 23                                inc iy
 117+ C144 10 B0        .MKTclcn323:            djnz .MKTclcn321
 118+ C146 3A 7B C1                             ld a,(.MKTclcn32z)
 119+ C149 C6 30                                add A,'0'
 120+ C14B FD 77 00                             ld (iy+0),a
 121+ C14E FD 36 01 00                          ld (iy+1),0
 122+ C152 C9                                   ret
 123+ C153 01 00 00 00  .MKTclcn32t             dw 1,0,     10,0,     100,0,     1000,0,       10000,0
 123+ C157 0A 00 00 00
 123+ C15B 64 00 00 00
 123+ C15F E8 03 00 00
 123+ C163 10 27 00 00
 124+ C167 A0 86 01 00                          dw $86a0,1, $4240,$0f, $9680,$98, $e100,$05f5, $ca00,$3b9a
 124+ C16B 40 42 0F 00
 124+ C16F 80 96 98 00
 124+ C173 00 E1 F5 05
 124+ C177 00 CA 9A 3B
 125+ C17B 00 00        .MKTclcn32z             ds 2
 126+ C17D 00 00        .MKTclcn32zIX           ds 2
 127+ C17F              ;----------------------------------------------------------------------------------------------------------------------------------
 128+ C17F              ; "DispHL, writes HL to DE address"
 129+ C17F 01 F0 D8     MPM_DispHLtoDE:         ld	bc,-10000
 130+ C182 CD 98 C1                             call	MPM_Num1
 131+ C185 01 18 FC                             ld	bc,-1000
 132+ C188 CD 98 C1                             call	MPM_Num1
 133+ C18B 01 9C FF                             ld	bc,-100
 134+ C18E CD 98 C1                             call	MPM_Num1
 135+ C191 0E F6                                ld	c,-10
 136+ C193 CD 98 C1                             call	MPM_Num1
 137+ C196 0E FF                                ld	c,-1
 138+ C198 3E 2F        MPM_Num1:	            ld	a,'0'-1
 139+ C19A 3C           .Num2:	                inc	a
 140+ C19B 09                                   add	hl,bc
 141+ C19C 38 FC                                jr	c,.Num2
 142+ C19E ED 42                                sbc	hl,bc
 143+ C1A0 12                                   ld	(de),a
 144+ C1A1 13                                   inc	de
 145+ C1A2 C9                                   ret
 146+ C1A3              ;----------------------------------------------------------------------------------------------------------------------------------
 147+ C1A3 26 00        MPM_DispAtoDE:          ld h,0
 148+ C1A5 6F                                   ld l,a
 149+ C1A6 C3 7F C1                             jp MPM_DispHLtoDE
 150+ C1A9              ;----------------------------------------------------------------------------------------------------------------------------------
 151+ C1A9 26 00        MPM_DispPriceAtoDE:     ld h,0
 152+ C1AB 6F                                   ld l,a
 153+ C1AC 01 9C FF                             ld	bc,-100
 154+ C1AF CD BF C1                             call	.NumLeadBlank1
 155+ C1B2 0E F6                                ld	c,-10
 156+ C1B4 CD 98 C1                             call	MPM_Num1
 157+ C1B7 3E 2E                                ld		a,'.'					; we could assume preformat but
 158+ C1B9                                                  DISPLAY "TODO: optimise"
 159+ C1B9 12                                   ld		(de),a					; we can optimse that later TODO
 160+ C1BA 13                                   inc		de						; with just an inc De
 161+ C1BB 0E FF                                ld	c,-1
 162+ C1BD 18 D9                                jr		MPM_Num1
 163+ C1BF 3E 2F        .NumLeadBlank1:	        ld	a,'0'-1
 164+ C1C1 3C           .NumLeadBlank2:	        inc	a
 165+ C1C2 09                                   add	hl,bc
 166+ C1C3 38 FC                                jr	c,.NumLeadBlank2
 167+ C1C5 FE 30                                cp	'0'
 168+ C1C7 20 02                                jr	nz,.DontBlank
 169+ C1C9 3E 20        .Blank:                 ld	a,' '
 170+ C1CB ED 42        .DontBlank:	            sbc	hl,bc
 171+ C1CD 12                                   ld	(de),a
 172+ C1CE 13                                   inc	de
 173+ C1CF C9                                   ret
 174+ C1D0              ;----------------------------------------------------------------------------------------------------------------------------------
 175+ C1D0 FE 00        MPM_DispQtyAtoDE:       cp	0
 176+ C1D2 28 30                                jr	z,.NoStock
 177+ C1D4 26 00                                ld h,0
 178+ C1D6 6F                                   ld l,a
 179+ C1D7 01 9C FF                             ld	bc,-100
 180+ C1DA CD F3 C1                             call	.NumLeadBlank1
 181+ C1DD FE 20        .WasLead0:              cp      ' '
 182+ C1DF 20 09                                jr      nz,.NotHundredsZero
 183+ C1E1 0E F6                                ld	c,-10
 184+ C1E3 CD F3 C1                             call	.NumLeadBlank1
 185+ C1E6 0E FF                                ld	c,-1
 186+ C1E8 18 AE                                jr		MPM_Num1
 187+ C1EA 0E F6        .NotHundredsZero:       ld	c,-10
 188+ C1EC CD 98 C1                             call	MPM_Num1
 189+ C1EF 0E FF                                ld	c,-1
 190+ C1F1 18 A5                                jr		MPM_Num1
 191+ C1F3 3E 2F        .NumLeadBlank1:	        ld	a,'0'-1
 192+ C1F5 3C           .NumLeadBlank2:	        inc	a
 193+ C1F6 09                                   add	hl,bc
 194+ C1F7 38 FC                                jr	c,.NumLeadBlank2
 195+ C1F9 FE 30                                cp	'0'
 196+ C1FB 20 02                                jr	nz,.DontBlank
 197+ C1FD 3E 20        .Blank:                 ld	a,' '
 198+ C1FF ED 42        .DontBlank:	            sbc	hl,bc
 199+ C201 12                                   ld	(de),a
 200+ C202 13                                   inc	de
 201+ C203 C9                                   ret
 202+ C204 3E 20        .NoStock:               ld	a,' '
 203+ C206 12                                   ld	(de),a
 204+ C207 13                                   inc	de
 205+ C208 12                                   ld	(de),a
 206+ C209 13                                   inc	de
 207+ C20A 3E 2D                                ld	a,'-'
 208+ C20C 12                                   ld	(de),a
 209+ C20D 13                                   inc de
 210+ C20E C9                                   ret
 211+ C20F              ;----------------------------------------------------------------------------------------------------------------------------------
 212+ C20F 06 09        MPM_print_boiler_text:  ld		b,9
 213+ C211 DD 21 10 C0                          ld		ix,market_boiler_text
 214+ C215 C5           .BoilerTextLoop:        push	bc			; Save Message Count loop value
 215+ C216 DD 6E 00                             ld		l,(ix+0)	; Get col into hl
 216+ C219 DD 66 01                             ld		h,(ix+1)	;
 217+ C21C DD 46 02                             ld		b,(ix+2)	; get row into b
 218+ C21F DD 5E 03                             ld		e,(ix+3)	; Get text address into hl
 219+ C222 DD 56 04                             ld		d,(ix+4)	; .
 220+ C225 DD E5                                push    ix          ; save ix and prep for add via hl
 221+ C227                                      MMUSelectLayer2
 221+ C227 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 222+ C22B                                      print_msg_at_de_at_b_hl_macro txt_status_colour
 222+ C22B 0E FF       >                        ld      c,txt_status_colour
 222+ C22D CD 4B E6    >                        call    l2_print_at_320
 223+ C230 E1                                   pop     hl          ; add 5 to ix
 224+ C231 3E 05                                ld      a,5         ; .
 225+ C233 ED 31                                add     hl,a        ; .
 226+ C235 E5 DD E1                             ld      ix,hl       ; .
 227+ C238 C1                                   pop		bc
 228+ C239 10 DA                                djnz	.BoilerTextLoop
 229+ C23B C9                                   ret
 230+ C23C              ;----------------------------------------------------------------------------------------------------------------------------------
 231+ C23C 2A 91 85     MKT_GetCash:            ld		hl,(Cash+2)
 232+ C23F EB                                   ex      de,hl
 233+ C240 DD 2A 8F 85                          ld      ix,(Cash)
 234+ C244 FD 21 83 C0                          ld		iy,mkt_cash_amount
 235+ C248 CD CF C0                             call 	MKT_DispDEIXtoIY1DP
 236+ C24B FD E5                                push    IY
 237+ C24D D1                                   pop     de
 238+ C24E 21 97 C0                             ld      hl,mkt_cash_UoM
 239+ C251 01 0B 00                             ld      bc,11
 240+ C254 ED B0                                ldir
 241+ C256 C9                                   ret
 242+ C257              ;----------------------------------------------------------------------------------------------------------------------------------
 243+ C257 11 00 00     MKT_GetCargo:   	    ld      de,0
 244+ C25A DD 21 00 00                          ld      ix,0
 245+ C25E 3A 95 85                             ld      a,(CargoRunningLoad)
 246+ C261 DD 6F                                ld      ixl,a
 247+ C263 FD 21 A2 C0                          ld		iy,mkt_cargo_amount
 248+ C267 CD E6 C0                             call 	MKT_DispDEIXtoIY
 249+ C26A FD E5                                push    IY
 250+ C26C D1                                   pop     de
 251+ C26D 13                                   inc     de
 252+ C26E 21 B6 C0                             ld      hl,mkt_cargo_UoM
 253+ C271 01 0B 00                             ld      bc,11
 254+ C274 ED B0                                ldir
 255+ C276 C9                                   ret
 256+ C277              ;----------------------------------------------------------------------------------------------------------------------------------
 257+ C277 CD 57 C2     MKT_DisplayCargo:       call	MKT_GetCargo
 258+ C27A                                      MMUSelectLayer2
 258+ C27A ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 259+ C27E                                      print_msg_macro txt_status_colour,  market_cargo_pos_row,  market_cargo_pos_col,  mkt_cargo_amount
 259+ C27E 0E FF       >                        ld      c,txt_status_colour
 259+ C280 06 C0       >                        ld      b,market_cargo_pos_row
 259+ C282 21 48 00    >                        ld      hl,market_cargo_pos_col
 259+ C285 11 A2 C0    >                        ld      de,mkt_cargo_amount
 259+ C288 CD 4B E6    >                        call    l2_print_at_320
 260+ C28B C9                                   ret
 261+ C28C              ;----------------------------------------------------------------------------------------------------------------------------------
 262+ C28C CD 3C C2     MKT_DisplayCash:        call	MKT_GetCash
 263+ C28F                                      MMUSelectLayer2
 263+ C28F ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 264+ C293                                      print_msg_macro txt_status_colour,  market_cash_pos_row,  market_cash_pos_col,  mkt_cash_amount
 264+ C293 0E FF       >                        ld      c,txt_status_colour
 264+ C295 06 D0       >                        ld      b,market_cash_pos_row
 264+ C297 21 48 00    >                        ld      hl,market_cash_pos_col
 264+ C29A 11 83 C0    >                        ld      de,mkt_cash_amount
 264+ C29D CD 4B E6    >                        call    l2_print_at_320
 265+ C2A0 C9                                   ret
 266+ C2A1              ;----------------------------------------------------------------------------------------------------------------------------------
 267+ C2A1              ; "A = stock item number"
 268+ C2A1              ; These must be in this order so that the print macro can load into bc
 269+ C2A1 00           PrintMarketColour:      DB 0
 270+ C2A2 00           PrintMarketRow:         DB 0
 271+ C2A3 08           PrintMartetItemHigh:    ex      af,af'
 272+ C2A4 3E D0                                ld      a,txt_highlight_colour
 273+ C2A6 32 A1 C2                             ld      (PrintMarketColour),a
 274+ C2A9 08                                   ex      af,af'
 275+ C2AA C3 B4 C2                             jp      PrintMarketItem
 276+ C2AD 08           PrintMarketItemDefault: ex      af,af'
 277+ C2AE 3E FF                                ld      a,txt_status_colour
 278+ C2B0 32 A1 C2                             ld      (PrintMarketColour),a
 279+ C2B3 08                                   ex      af,af'
 280+ C2B4 F5           PrintMarketItem:        push    af
 281+ C2B5 57                                   ld      d,a                 ; .
 282+ C2B6 1E 08                                ld      e,8                 ; .
 283+ C2B8 ED 30                                mul     de                  ; .
 284+ C2BA 3E 20                                ld      a,market_top_row   ; hl = base cursor position + row number * 8
 285+ C2BC 83                                   add     a,e
 286+ C2BD 32 A2 C2                             ld      (PrintMarketRow),a
 287+ C2C0 ED 4B A1 C2                          ld      bc,(PrintMarketColour)  ; loads b with row, c with color
 288+ C2C4                                      MMUSelectLayer2
 288+ C2C4 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 289+ C2C8                                      print_msg_ld_bc_macro $08, market_blank_line    ; Optimise later to have a specific blank line function
 289+ C2C8 21 08 00    >                        ld      hl,$08
 289+ C2CB 11 4B C0    >                        ld      de,market_blank_line
 289+ C2CE CD 4B E6    >                        call    l2_print_at_320
 290+ C2D1 F1                                   pop     af
 291+ C2D2 DD 21 00 E0                          ld		ix,StockFood		; start 8 bytes before index as first add will shift
 292+ C2D6 FD 21 96 85                          ld      iy,CargoTonnes
 293+ C2DA 1E 08                                ld		e,8
 294+ C2DC 57                                   ld		d,a
 295+ C2DD ED 30                                mul
 296+ C2DF DD 19                                add		ix,de				; Move down a row ix += a * 8
 297+ C2E1 16 00                                ld      d,0
 298+ C2E3 5F                                   ld      e,a
 299+ C2E4 FD 19                                add     iy,de                ; cargo table is just 1 byte per item
 300+ C2E6              .GetName:               MMUSelectStockTable
 300+ C2E6 ED 91 57 37 >                     nextreg StockTableMMU,     BankStockTable
 301+ C2EA DD 7E 00                             ld		a,(ix+StockNameOffset)
 302+ C2ED 21 30 8E                             ld		hl,WordIdxStock
 303+ C2F0 CD 39 89                             call	getTableText
 304+ C2F3 EB                                   ex      de,hl
 305+ C2F4 DD E5                                push    ix
 306+ C2F6 ED 4B A1 C2                          ld      bc,(PrintMarketColour)  ; loads b with row, c with color
 307+ C2FA                                      MMUSelectLayer2
 307+ C2FA ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 308+ C2FE                                      print_msg_ld_bc_at_de_macro  $08
 308+ C2FE 21 08 00    >                        ld      hl,$08
 308+ C301 CD 4B E6    >                        call    l2_print_at_320
 309+ C304 DD E1                                pop     ix
 310+ C306              .GetUom                 MMUSelectStockTable
 310+ C306 ED 91 57 37 >                     nextreg StockTableMMU,     BankStockTable
 311+ C30A DD 7E 07                             ld		a,(ix+StockUoMOffset)
 312+ C30D 21 52 8E                             ld		hl,WordIdxUoMFull
 313+ C310 CD 39 89                             call	getTableText
 314+ C313 EB                                   ex      de,hl
 315+ C314 DD E5                                push    ix
 316+ C316 ED 4B A1 C2                          ld      bc,(PrintMarketColour)  ; loads b with row, c with color
 317+ C31A                                      MMUSelectLayer2
 317+ C31A ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 318+ C31E                                      print_msg_ld_bc_at_de_macro market_uom_col
 318+ C31E 21 70 00    >                        ld      hl,market_uom_col
 318+ C321 CD 4B E6    >                        call    l2_print_at_320
 319+ C324 DD E1                                pop     ix
 320+ C326              .GetPrice:              MMUSelectStockTable
 320+ C326 ED 91 57 37 >                     nextreg StockTableMMU,     BankStockTable
 321+ C32A DD 7E 02                             ld		a,(ix+StockPriceOffset)
 322+ C32D 11 3D C0                             ld		de,txt_market_amount
 323+ C330 CD A9 C1                             call	MPM_DispPriceAtoDE
 324+ C333 DD E5                                push    ix
 325+ C335 ED 4B A1 C2                          ld      bc,(PrintMarketColour)  ; loads b with row, c with color
 326+ C339                                      MMUSelectLayer2
 326+ C339 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 327+ C33D                                      print_msg_ld_bc_macro market_price_col, txt_market_amount
 327+ C33D 21 C8 00    >                        ld      hl,market_price_col
 327+ C340 11 3D C0    >                        ld      de,txt_market_amount
 327+ C343 CD 4B E6    >                        call    l2_print_at_320
 328+ C346 DD E1                                pop     ix
 329+ C348              .GetQty:                MMUSelectStockTable
 329+ C348 ED 91 57 37 >                     nextreg StockTableMMU,     BankStockTable
 330+ C34C DD 7E 01                             ld		a,(ix+StockQtyOffset)
 331+ C34F 11 42 C0                             ld		de,txt_market_quantity
 332+ C352 CD D0 C1                             call	MPM_DispQtyAtoDE
 333+ C355 ED 4B A1 C2                          ld      bc,(PrintMarketColour)  ; loads b with row, c with color
 334+ C359                                      MMUSelectLayer2
 334+ C359 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 335+ C35D                                      print_msg_ld_bc_macro market_quantity_col, txt_market_quantity
 335+ C35D 21 00 01    >                        ld      hl,market_quantity_col
 335+ C360 11 42 C0    >                        ld      de,txt_market_quantity
 335+ C363 CD 4B E6    >                        call    l2_print_at_320
 336+ C366 FD 7E 00     .GetCargoQty:           ld      a,(iy+0)
 337+ C369 11 46 C0                             ld      de,txt_market_cargo
 338+ C36C CD D0 C1                             call	MPM_DispQtyAtoDE
 339+ C36F ED 4B A1 C2                          ld      bc,(PrintMarketColour)  ; loads b with row, c with color
 340+ C373                                      MMUSelectLayer2
 340+ C373 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 341+ C377                                      print_msg_ld_bc_macro market_cargo_col, txt_market_cargo
 341+ C377 21 20 01    >                        ld      hl,market_cargo_col
 341+ C37A 11 46 C0    >                        ld      de,txt_market_cargo
 341+ C37D CD 4B E6    >                        call    l2_print_at_320
 342+ C380 C9                                   ret
 343+ C381
 344+ C381              draw_market_prices_menu:MMUSelectLayer1
 344+ C381 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 345+ C385 CD 8F E0                             call	l1_cls
 346+ C388 3E 07                                ld		a,7
 347+ C38A CD AA E0                             call	l1_attr_cls_to_a
 348+ C38D                                      MMUSelectLayer2
 348+ C38D ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 349+ C391 CD 0C E0                             call    asm_l2_double_buffer_off
 350+ C394 CD C5 E3                             call    l2_320_initialise
 351+ C397 CD 40 E3                             call    l2_320_cls
 352+ C39A                                      MMUSelectSpriteBank
 352+ C39A ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
 353+ C39E CD B7 E7                             call    sprite_cls_cursors
 354+ C3A1                                      MMUSelectLayer2
 354+ C3A1 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 355+ C3A5
 356+ C3A5 CD 3D E7     .Drawbox:               call    l2_draw_menu_border
 357+ C3A8 01 C0 0A                             ld		bc,$0AC0
 358+ C3AB 21 01 00                             ld      hl,$0001
 359+ C3AE 11 3C 01                             ld		de,320-4
 360+ C3B1 CD FE E7                             call	l2_draw_horz_line_320       ;b = row; hl = col, de = length, c = color"
 361+ C3B4 01 C0 1D     .DrawProductLine        ld		bc,$1DC0
 362+ C3B7 21 08 00                             ld      hl,mkt_boiler_product_col
 363+ C3BA 11 60 00                             ld		de,8*12
 364+ C3BD CD FE E7                             call	l2_draw_horz_line_320       ;b = row; hl = col, de = length, c = color"
 365+ C3C0 01 C0 1D     .DrawUoMLine:           ld		bc,$1DC0
 366+ C3C3 21 70 00                             ld      hl,mkt_boiler_uom_col
 367+ C3C6 11 47 00                             ld		de,(8*9)-1
 368+ C3C9 CD FE E7                             call	l2_draw_horz_line_320       ;b = row; hl = col, de = length, c = color"
 369+ C3CC 01 C0 1D     .DrawPriceLine:         ld		bc,$1DC0
 370+ C3CF 21 C0 00                             ld      hl,mkt_boiler_price_col
 371+ C3D2 11 28 00                             ld		de,8*5
 372+ C3D5 CD FE E7                             call	l2_draw_horz_line_320       ;b = row; hl = col, de = length, c = color"
 373+ C3D8 01 C0 1D     .DrawStockLine:         ld		bc,$1DC0
 374+ C3DB 21 F0 00                             ld      hl,mkt_boiler_stock_col
 375+ C3DE 11 28 00                             ld		de,8*5
 376+ C3E1 CD FE E7                             call	l2_draw_horz_line_320       ;b = row; hl = col, de = length, c = color"
 377+ C3E4 01 C0 1D     .DrawInvLine:           ld		bc,$1DC0
 378+ C3E7 21 20 01                             ld      hl,mkt_boiler_inv_col
 379+ C3EA 11 18 00                             ld		de,8*3
 380+ C3ED CD FE E7                             call	l2_draw_horz_line_320       ;b = row; hl = col, de = length, c = color"
 381+ C3F0 3A 45 80     .StaticText:	        ld      a,(Galaxy)
 382+ C3F3                                      MMUSelectGalaxyA
 382+ C3F3 ED 92 57    >                     nextreg GalaxyDataMMU,     a
 383+ C3F6 3E 19                                ld		a,25
 384+ C3F8 CD ED 8F                             call	expandTokenToString
 385+ C3FB CD 7A F6                             call	GetDigramGalaxySeed
 386+ C3FE CD 0F C2                             call	MPM_print_boiler_text
 387+ C401              ; Generate the market list on screen
 388+ C401              .DisplayPrices:         ZeroA
 388+ C401 AF          >                        xor a
 389+ C402 21 08 20                             ld		hl,market_position          ; set current cursor position on screen
 390+ C405 22 4A C0                             ld		(market_cursor),hl          ; .
 391+ C408 F5           MarketLoop:	            push	af
 392+ C409 CD AD C2                             call	PrintMarketItemDefault     ; display a single market item
 393+ C40C F1                                   pop		af
 394+ C40D 3C                                   inc		a
 395+ C40E FE 10                                cp		StockTypeMax
 396+ C410 20 F6                                jr		nz,MarketLoop
 397+ C412 AF           .InitialHighlight:      xor     a
 398+ C413 32 82 C0                             ld      (mkt_selected_row),a        ; assume on row zero
 399+ C416 CD C1 C0                             call    mkt_highlight_row
 400+ C419 CD 77 C2     .DisCargo:              call    MKT_DisplayCargo
 401+ C41C CD 8C C2     .DisCash:               call    MKT_DisplayCash
 402+ C41F C9                                   ret
 403+ C420
 404+ C420
 405+ C420              ;----------------------------------------------------------------------------------------------------------------------------------
 406+ C420              ; Handles all the input whilst in the market menu
 407+ C420              loop_market_menu:       MacroIsKeyPressed c_Pressed_CursorUp
 407+ C420 3E 4A       >                        ld      a,c_Pressed_CursorUp
 407+ C422             >                        MMUSelectKeyboard
 407+ C422 ED 91 57 65 >                     nextreg KeyboardMMU,       BankKeyboard
 407+ C426 CD BB E1    >                        call    is_key_pressed
 408+ C429 CC 51 C4                             call    z,mkt_UpPressed
 409+ C42C                                      MacroIsKeyPressed c_Pressed_CursorDown
 409+ C42C 3E 4C       >                        ld      a,c_Pressed_CursorDown
 409+ C42E             >                        MMUSelectKeyboard
 409+ C42E ED 91 57 65 >                     nextreg KeyboardMMU,       BankKeyboard
 409+ C432 CD BB E1    >                        call    is_key_pressed
 410+ C435 CC 62 C4                             call    z,mkt_DownPressed
 411+ C438                                      MacroIsKeyPressed c_Pressed_RollLeft
 411+ C438 3E 08       >                        ld      a,c_Pressed_RollLeft
 411+ C43A             >                        MMUSelectKeyboard
 411+ C43A ED 91 57 65 >                     nextreg KeyboardMMU,       BankKeyboard
 411+ C43E CD BB E1    >                        call    is_key_pressed
 412+ C441 CC 80 C4                             call    z,mkt_LeftPressed
 413+ C444                                      MacroIsKeyPressed c_Pressed_RollRight
 413+ C444 3E 0A       >                        ld      a,c_Pressed_RollRight
 413+ C446             >                        MMUSelectKeyboard
 413+ C446 ED 91 57 65 >                     nextreg KeyboardMMU,       BankKeyboard
 413+ C44A CD BB E1    >                        call    is_key_pressed
 414+ C44D CC C3 C4                             call    z,mkt_RightPressed
 415+ C450 C9                                   ret
 416+ C451
 417+ C451              ;----------------------------------------------------------------------------------------------------------------------------------
 418+ C451 3A 82 C0     mkt_UpPressed:          ld      a,(mkt_selected_row)
 419+ C454 FE 00                                cp      0
 420+ C456 C8                                   ret     z
 421+ C457 CD C8 C0                             call    mkt_lowlight_row
 422+ C45A 21 82 C0                             ld      hl,mkt_selected_row
 423+ C45D 35                                   dec     (hl)
 424+ C45E CD C1 C0                             call    mkt_highlight_row
 425+ C461 C9                                   ret
 426+ C462              ;----------------------------------------------------------------------------------------------------------------------------------
 427+ C462 3E 4C        mkt_DownPressed:        ld      a,c_Pressed_CursorDown
 428+ C464                                      MMUSelectKeyboard
 428+ C464 ED 91 57 65 >                     nextreg KeyboardMMU,       BankKeyboard
 429+ C468 CD 96 E1                             call    get_key_a_state
 430+ C46B FE 01                                cp      1
 431+ C46D 28 00                                jr      z,.ItsOK
 432+ C46F 3A 82 C0     .ItsOK:                 ld      a,(mkt_selected_row)
 433+ C472 FE 0F                                cp      StockTypePenultimate
 434+ C474 C8                                   ret     z
 435+ C475 CD C8 C0                             call    mkt_lowlight_row
 436+ C478 21 82 C0                             ld      hl,mkt_selected_row
 437+ C47B 34                                   inc     (hl)
 438+ C47C CD C1 C0                             call    mkt_highlight_row
 439+ C47F C9                                   ret
 440+ C480              ;----------------------------------------------------------------------------------------------------------------------------------
 441+ C480 3A 82 C0     mkt_LeftPressed:        ld      a,(mkt_selected_row)
 442+ C483 21 96 85                             ld      hl,CargoTonnes
 443+ C486 ED 31                                add     hl,a
 444+ C488 7E                                   ld      a,(hl)
 445+ C489 FE 00                                cp      0
 446+ C48B C8                                   ret     z
 447+ C48C 35                                   dec     (hl)
 448+ C48D DD 21 00 E0                          ld      ix,StockFood
 449+ C491 3A 82 C0                             ld      a,(mkt_selected_row)
 450+ C494 16 08                                ld      d,8
 451+ C496 5F                                   ld      e,a
 452+ C497 ED 30                                mul
 453+ C499 DD 19                                add     ix,de
 454+ C49B                                      MMUSelectStockTable
 454+ C49B ED 91 57 37 >                     nextreg StockTableMMU,     BankStockTable
 455+ C49F DD 34 01                             inc     (ix+1)
 456+ C4A2 DD 7E 07                             ld      a,(ix+7)
 457+ C4A5 FE 30                                cp      48
 458+ C4A7 20 04                                jr      nz,.UnderATonne
 459+ C4A9 21 95 85                             ld      hl,CargoRunningLoad
 460+ C4AC 35                                   dec     (hl)            ; We need to cosider UoM
 461+ C4AD DD 7E 02     .UnderATonne:           ld      a,(ix+2)
 462+ C4B0 16 00                                ld      d,0
 463+ C4B2 5F                                   ld      e,a
 464+ C4B3 CD B2 90                             call    addDEtoCash
 465+ C4B6                                      ; DO ADD CASH
 466+ C4B6 3A 82 C0                             ld      a,(mkt_selected_row)
 467+ C4B9 CD B4 C2                             call    PrintMarketItem
 468+ C4BC CD 77 C2                             call    MKT_DisplayCargo
 469+ C4BF CD 8C C2                             call    MKT_DisplayCash
 470+ C4C2 C9                                   ret
 471+ C4C3              ;----------------------------------------------------------------------------------------------------------------------------------
 472+ C4C3              mkt_RightPressed:       MMUSelectStockTable
 472+ C4C3 ED 91 57 37 >                     nextreg StockTableMMU,     BankStockTable
 473+ C4C7 DD 21 00 E0                          ld      ix,StockFood
 474+ C4CB 3A 82 C0                             ld      a,(mkt_selected_row)
 475+ C4CE 16 08                                ld      d,8
 476+ C4D0 5F                                   ld      e,a
 477+ C4D1 ED 30                                mul
 478+ C4D3 DD 19                                add     ix,de
 479+ C4D5 4F                                   ld      c,a
 480+ C4D6 DD 7E 01                             ld      a,(ix+1)
 481+ C4D9 FE 00                                cp      0
 482+ C4DB C8                                   ret     z
 483+ C4DC DD 7E 07     .CheckUoM:              ld      a,(ix+7)
 484+ C4DF FE 30                                cp      48
 485+ C4E1 28 0F                                jr      z,.CheckCargo                       ; cargo is in tonnes
 486+ C4E3 3A 82 C0     .NotTonnage:            ld      a,(mkt_selected_row)
 487+ C4E6 21 96 85                             ld      hl,CargoTonnes
 488+ C4E9 ED 31                                add     hl,a
 489+ C4EB 7E                                   ld      a,(hl)
 490+ C4EC FE C8                                cp      200
 491+ C4EE C8                                   ret     z                                   ; else its a 200 UoM limit
 492+ C4EF C3 F8 C4                             jp      .CheckCash
 493+ C4F2 2A 94 85     .CheckCargo:            ld      hl,(CargoBaySize)                   ; = h = runningload l = cargo bay size
 494+ C4F5 7C                                   ld      a,h
 495+ C4F6 BD                                   cp      l
 496+ C4F7 C8                                   ret     z                                   ; return if we have already maxed out
 497+ C4F8 2A 91 85     .CheckCash:             ld      hl,(Cash+2)                         ; Check sufficient money
 498+ C4FB 7C                                   ld      a,h
 499+ C4FC B5                                   or      l
 500+ C4FD 20 0F                                jr      nz,.MoreThanRequired
 501+ C4FF 2A 8F 85                             ld      hl,(Cash)
 502+ C502 7C                                   ld      a,h
 503+ C503 FE 00                                cp      0
 504+ C505 20 07                                jr      nz,.MoreThanRequired
 505+ C507 DD 7E 02                             ld      a,(ix+2)
 506+ C50A BD                                   cp      l
 507+ C50B 30 01                                jr      nc,.MoreThanRequired
 508+ C50D C9                                   ret                         ; Insufficient Funds
 509+ C50E 19           .MoreThanRequired:      add     hl,de
 510+ C50F 7C                                   ld      a,h
 511+ C510 B3                                   or      e
 512+ C511                                      ; check cash can we buy, and cargo capacity
 513+ C511 DD 35 01                             dec     (ix+1)
 514+ C514 3A 82 C0                             ld      a,(mkt_selected_row)
 515+ C517 21 96 85                             ld      hl,CargoTonnes
 516+ C51A ED 31                                add     hl,a
 517+ C51C 34                                   inc     (hl)
 518+ C51D DD 7E 07                             ld      a,(ix+7)
 519+ C520 A7           .IsUoMTonnes:           and     a                                   ; tonnes is now UoM zero
 520+ C521 20 04                                jr      nz,.UnderOneTonne
 521+ C523 21 95 85                             ld      hl,CargoRunningLoad                 ; just update the current tonnage
 522+ C526 34                                   inc     (hl)
 523+ C527 DD 7E 02     .UnderOneTonne:         ld      a,(ix+2)                            ; if its under one tonne we can update
 524+ C52A 16 00                                ld      d,0
 525+ C52C 5F                                   ld      e,a
 526+ C52D CD C5 90                             call    subDEfromCash
 527+ C530 3A 82 C0                             ld      a,(mkt_selected_row)
 528+ C533 CD B4 C2                             call    PrintMarketItem
 529+ C536 CD 77 C2                             call    MKT_DisplayCargo
 530+ C539 CD 8C C2                             call    MKT_DisplayCash
 531+ C53C C9                                   ret
# file closed: ./Menus/market_prices_menu.asm
 772  C53D                  DISPLAY "Bank ",BankMenuMarket," - Bytes free ",/D, $2000 - ($-MenuMarketAddr), " - BankMenuMarket"
 773  C53D              ; Bank 55  ------------------------------------------------------------------------------------------------------------------------
 774  C53D                  SLOT    StockTableAddr
 775  C53D                  PAGE    BankStockTable
 776  C53D                  ORG     StockTableAddr
 777  E000                  INCLUDE "./Tables/stock_table.asm"
# file opened: ./Tables/stock_table.asm
   1+ E000
   2+ E000
   3+ E000              ;                       Can Buy
   4+ E000              ;                       computed row on screen considering what stock is visible
   5+ E000              ;                       Show
   6+ E000              ;                       Tech Level
   7+ E000              ;                       Price
   8+ E000              ;                       Name
   9+ E000              ;                       TypeId
  10+ E000
  11+ E000
  12+ E000              ;char name[16];
  13+ E000              ;current_quantity;
  14+ E000              ;current_price;
  15+ E000              ;base_price;
  16+ E000              ;eco_adjust;
  17+ E000              ;base_quantity;
  18+ E000              ;mask;
  19+ E000              ;units;
  20+ E000
  21+ E000              ;						nam	currr   CR  Ecadj  Qty  Msk  UoM
  22+ E000 00 00 00 13  StockFood			DB  00,  0, 0,  19, -2,      6, $01, 00  ; 00
  22+ E004 FE 06 01 00
  23+ E008 01 00 00 14  StockTextiles		DB	01,  0, 0,  20, -1,     10, $03, 00  ; 01
  23+ E00C FF 0A 03 00
  24+ E010 02 00 00 41  StockRadioactives	DB  02,  0, 0,  65, -3,      2, $07, 00  ; 02
  24+ E014 FD 02 07 00
  25+ E018 03 00 00 28  StockSlaves			DB  03,  0, 0,  40, -5,    226, $1F, 00  ; 03
  25+ E01C FB E2 1F 00
  26+ E020 04 00 00 53  StockLiquorWines	DB  04,  0, 0,  83, -5,    251, $0F, 00  ; 04
  26+ E024 FB FB 0F 00
  27+ E028 05 00 00 C4  StockLuxuries		DB  05,  0, 0, 196,  8,     54, $03, 00  ; 05
  27+ E02C 08 36 03 00
  28+ E030 06 00 00 EB  StockNarcotics		DB  06,  0, 0, 235, 29,      8, $78, 00  ; 06
  28+ E034 1D 08 78 00
  29+ E038 07 00 00 9A  StockComputers		DB  07,  0, 0, 154, 14,     56, $03, 00  ; 07
  29+ E03C 0E 38 03 00
  30+ E040 08 00 00 75  StockMachinery		DB  08,  0, 0, 117,  6,     40, $07, 00  ; 08
  30+ E044 06 28 07 00
  31+ E048 13 00 00 4E  StockAlloys			DB  19,  0, 0,  78,  1,     17, $1F, 00  ; 09
  31+ E04C 01 11 1F 00
  32+ E050 0A 00 00 7C  StockFirearms   	DB  10,  0, 0, 124, 13,     29, $07, 00  ; 10
  32+ E054 0D 1D 07 00
  33+ E058 0C 00 00 B0  StockFurs       	DB  12,  0, 0, 176, -9,    220, $3F, 00  ; 11
  33+ E05C F7 DC 3F 00
  34+ E060 0D 00 00 20  StockMinerals   	DB  13,  0, 0,  32, -1,     53, $03, 00  ; 12
  34+ E064 FF 35 03 00
  35+ E068 0E 00 00 61  StockGold       	DB  14,  0, 0,  97, -1,     66, $07, 01  ; 13
  35+ E06C FF 42 07 01
  36+ E070 0F 00 00 AB  StockPlatinum   	DB  15,  0, 0, 171, -2,     55, $1F, 01  ; 14
  36+ E074 FE 37 1F 01
  37+ E078 10 00 00 2D  StockGemStones 		DB  16,  0, 0,  45, -1,    250, $0F, 02  ; 15
  37+ E07C FF FA 0F 02
  38+ E080 11 00 00 35  StockAlienItems		DB  17,  0, 0,  53, 15,    192, $07, 00  ; 16
  38+ E084 0F C0 07 00
  39+ E088              StockRowWidth       EQU StockTextiles - StockFood
  40+ E088              StockNameOffset     EQU 0
  41+ E088              StockQtyOffset      EQU 1
  42+ E088              StockPriceOffset    EQU 2
  43+ E088              StockUoMOffset      EQU 7
  44+ E088
  45+ E088              ;.QQ23	\Prxs -> &3DA6 \  Market prices info
  46+ E088              ;\ base_price, gradient sign+5bits, base_quantity, mask, units 2bits
  47+ E088              ;13 82 06 01			EQUD &01068213 \ Food
  48+ E088              ;14 81 0A 03 		EQUD &030A8114 \ Textiles
  49+ E088              ;41 83 02 07 		EQUD &07028341 \ Radioactives
  50+ E088              ;28 85 E2 1F 		EQUD &1FE28528 \ Slaves
  51+ E088              ;53 85 FB 0F 		EQUD &0FFB8553 \ Liquor/Wines
  52+ E088              ;C4 08 36 03 		EQUD &033608C4 \ Luxuries
  53+ E088              ;EB 1D 08 78 		EQUD &78081DEB \ Narcotics
  54+ E088              ;9A 0E 38 03 		EQUD &03380E9A \ Computers
  55+ E088              ;75 06 28 07 		EQUD &07280675 \ Machinery
  56+ E088              ;4E 01 11 1F 		EQUD &1F11014E \ Alloys
  57+ E088              ;7C 0D 1D 07 		EQUD &071D0D7C \ Firearms
  58+ E088              ;B0 89 DC 3F 		EQUD &3FDC89B0 \ Furs
  59+ E088              ;20 81 35 03 		EQUD &03358120 \ Minerals
  60+ E088              ;61 A1 42 07 		EQUD &0742A161 \ Gold
  61+ E088              ;AB A2 37 1F 		EQUD &1F37A2AB \ Platinum
  62+ E088              ;2D C1 FA 0F 		EQUD &0FFAC12D \ Gem-Stones
  63+ E088              ;35 0F C0 07 		EQUD &07C00F35 \ Alien Items
  64+ E088
  65+ E088
  66+ E088              FoodIndex               EQU 01
  67+ E088              TextilesIndex           EQU 02
  68+ E088              RadioactivesIndex       EQU 03
  69+ E088              SlavesIndex             EQU 04
  70+ E088              LiquorWinesIndex        EQU 05
  71+ E088              LuxuriesIndex           EQU 06
  72+ E088              NarcoticsIndex          EQU 07
  73+ E088              ComputersIndex          EQU 08
  74+ E088              MachineryIndex          EQU 09
  75+ E088              AlloysIndex             EQU 10
  76+ E088              FirearmsIndex           EQU 11
  77+ E088              FursIndex               EQU 12
  78+ E088              MineralsIndex           EQU 13
  79+ E088              GoldIndex               EQU 14
  80+ E088              PlatinumIndex           EQU 15
  81+ E088              GemStonesIndex          EQU 16
  82+ E088              AlienItemsIndex		    equ 17
  83+ E088              StockListLen		    equ	18
  84+ E088
  85+ E088 00 E0 08 E0  StockItemTable		    DW 	StockFood,  StockTextiles,	   StockRadioactives
  85+ E08C 10 E0
  86+ E08E 18 E0 20 E0                          DW 	StockSlaves, StockLiquorWines, StockLuxuries
  86+ E092 28 E0
  87+ E094 30 E0 38 E0                          DW 	StockNarcotics, StockComputers, StockMachinery
  87+ E098 40 E0
  88+ E09A 48 E0 50 E0                          DW	StockAlloys, StockFirearms, StockFurs
  88+ E09E 58 E0
  89+ E0A0 60 E0 68 E0                          DW  StockMinerals, StockGold, StockPlatinum
  89+ E0A4 70 E0
  90+ E0A6 78 E0 80 E0                          DW  StockGemStones, StockAlienItems
  91+ E0AA
  92+ E0AA 06 FF        generate_stock_market:  ld		b,$FF				; so the first iteration puts it at 0
  93+ E0AC CD 3F 86                             call	copy_galaxy_to_system
  94+ E0AF DD 21 F8 DF                          ld		ix,StockFood-8		; start 8 bytes before index as first add will shift
  95+ E0B3 11 08 00     .generate_stock_loop:   ld		de,8
  96+ E0B6 DD 19                                add		ix,de				; Move down a row
  97+ E0B8 04                                   inc		b
  98+ E0B9 DD 4E 03     .CalcPrice:	            ld		c,(ix+3);			; c = base price
  99+ E0BC 3A 44 80                             ld		a,(RandomMarketSeed)
 100+ E0BF DD A6 06                             and		(ix+6)				; and with market mask
 101+ E0C2 81                                   add		a,c
 102+ E0C3 4F                                   ld		c,a					; c = base + rand & market mask
 103+ E0C4 3A 73 80                             ld		a,(DisplayEcononmy)	; d= economy
 104+ E0C7 57                                   ld		d,a
 105+ E0C8 DD 7E 04                             ld		a,(ix+4)
 106+ E0CB 5F                                   ld		e,a					; e  = economy adjust
 107+ E0CC CB 7B                                bit		7,e
 108+ E0CE 20 04                                jr		nz,.PosMul			; it could be negative and we onnly want
 109+ E0D0              ;.NegMul:						; e reg from mulitply not a 2'c 16 bit word
 110+ E0D0 7B                                   ld		a,e
 111+ E0D1 ED 44                                neg
 112+ E0D3 5F                                   ld		e,a
 113+ E0D4              .PosMul:
 114+ E0D4 7B                                   ld		a,e
 115+ E0D5 ED 44                                neg
 116+ E0D7 5F                                   ld		e,a
 117+ E0D8 ED 30                                mul
 118+ E0DA 79                                   ld		a,c
 119+ E0DB 83                                   add		a,e
 120+ E0DC CB 27                                sla		a
 121+ E0DE CB 27                                sla		a					; Multply price by 4
 122+ E0E0 DD 77 02                             ld		(ix+2),a			; Now have set price
 123+ E0E3 DD 4E 05     .CalcQty:	            ld		c,(ix+5);			; c = base price
 124+ E0E6 3A 44 80                             ld		a,(RandomMarketSeed)
 125+ E0E9 DD A6 06                             and		(ix+6)				; and with market mask
 126+ E0EC 81                                   add		a,c
 127+ E0ED 4F                                   ld		c,a					; c = base + rand & market mask
 128+ E0EE 3A 73 80                             ld		a,(DisplayEcononmy)	; d= economy
 129+ E0F1 57                                   ld		d,a
 130+ E0F2 DD 7E 04                             ld		a,(ix+4)
 131+ E0F5 5F                                   ld		e,a					; e  = economy adjust
 132+ E0F6 CB 7B                                bit		7,e
 133+ E0F8 20 04                                jr		nz,.PosQtyMul			; it could be negative and we onnly want
 134+ E0FA 7B           .NegQtyMul:				ld		a,e		; e reg from mulitply not a 2'c 16 bit word
 135+ E0FB ED 44                                neg
 136+ E0FD 5F                                   ld		e,a
 137+ E0FE 7B           .PosQtyMul:             ld		a,e
 138+ E0FF ED 44                                neg
 139+ E101 5F                                   ld		e,a
 140+ E102 ED 30                                mul
 141+ E104 79                                   ld		a,c
 142+ E105 93                                   sub		e
 143+ E106 DD 77 01                             ld		(ix+1),a			; Now have set quanity
 144+ E109 78                                   ld		a,b
 145+ E10A FE 11                                cp		AlienItemsIndex
 146+ E10C 20 A5                                jr		nz,.generate_stock_loop
 147+ E10E AF                                   xor		a
 148+ E10F DD 77 01                             ld		(ix+1),a			; Now have set quanity of alient items to always 0 in stock
 149+ E112 C9                                   ret
 150+ E113
# file closed: ./Tables/stock_table.asm
 778  E113                  DISPLAY "Bank ",BankStockTable," - Bytes free ",/D, $2000 - ($-StockTableAddr), " - BankStockTable"
 779  E113              ; Bank 56  ------------------------------------------------------------------------------------------------------------------------
 780  E113                  SLOT    CommanderAddr
 781  E113                  PAGE    BankCommander
 782  E113                  ORG     CommanderAddr, BankCommander
 783  E000                  INCLUDE "./Commander/commanderData.asm"
# file opened: ./Commander/commanderData.asm
   1+ E000 43 4F 4D 4D  commanderPage           DB  "COMMANDERPAGE 56"
   1+ E004 41 4E 44 45
   1+ E008 52 50 41 47
   1+ E00C 45 20 35 36
   2+ E010 4A 41 4D 45  defaultName		        DB	"JAMESON",0
   2+ E014 53 4F 4E 00
   3+ E018 10 0F 11 00  defaultStock	        DB $10, $0F, $11, $00, $03, $1C,$0E, $00, $00, $0A, $00, $11,$3A, $07, $09, $08, $00
   3+ E01C 03 1C 0E 00
   3+ E020 00 0A 00 11
   3+ E024 3A 07 09 08
   3+ E028 00
   4+ E029 4A 5A 48 02  defaultSeeds	        DB $4a, $5a, $48, $02, $53, $b7
   4+ E02D 53 B7
   5+ E02F 14           defaultHomeX	        DB $14
   6+ E030 AD           defaultHomeY	        DB $AD
   7+ E031 44 65 66 61  defaultSaveName         DB "Default.SAV",0,0,0,0
   7+ E035 75 6C 74 2E
   7+ E039 53 41 56 00
   7+ E03D 00 00 00
   8+ E040
   9+ E040              ; Gun and cabin temps are not saved as can only be saved in dock
  10+ E040              ; Note Can only save whilst docked
  11+ E040 43 4F 4D 4D  SaveCommanderHeader     DB  "COMMANDERSAVE..."
  11+ E044 41 4E 44 45
  11+ E048 52 53 41 56
  11+ E04C 45 2E 2E 2E
  12+ E050 00 00 00...  SaveFilename            DS  15
  13+ E05F 00 00 00...  SaveCommanderName       DS  15
  14+ E06E 00 00 00...  SaveSeeds               DS  06
  15+ E074 00 00 00...  SaveStockAvaliabiliy    DS  17
  16+ E085 00 00 00...  SaveCargo               DS  16
  17+ E095 00 00 00...  SaveEquipmentFitted     DS  EQ_ITEM_COUNT
  18+ E0AF 00 00 00 00  SaveLaserType           DS  4
  19+ E0B3 00 00 00 00  SaveLaserDamagedFlag    DS  4
  20+ E0B7 00           SavePresentSystemX      DS  1
  21+ E0B8 00           SavePresentSystemY      DS  1
  22+ E0B9 00           SaveTargetSystemX       DS  1
  23+ E0BA 00           SaveTargetSystemY       DS  1
  24+ E0BB 00 00 00 00  SaveCash                DS  4
  25+ E0BF 00           SaveFuel                DS  1
  26+ E0C0 00           SaveFugitiveInnocentStatus DS 1
  27+ E0C1 00 00        SaveKillTally           DS  2
  28+ E0C3 00           SaveOuterHyperCount     DS  1
  29+ E0C4 00           SaveInnerHyperCount     DS  1
  30+ E0C5 00           SaveForeShield          DS  1
  31+ E0C6 00           SaveAftShield           DS  1
  32+ E0C7 00           SavePlayerEnergy        DS  1
  33+ E0C8 00           SaveCargoBaySize        DS  1
  34+ E0C9 00           SaveFuelScoopStatus     DS  1
  35+ E0CA              SaveSize                equ $ - SaveCommanderHeader
  36+ E0CA
  37+ E0CA              copyCommanderToSave:    ldCopyStringLen CommanderName,      SaveCommanderName, 15
  37+ E0CA 21 59 82    >                        ld      hl,CommanderName
  37+ E0CD 11 5F E0    >                        ld      de, SaveCommanderName
  37+ E0D0 01 0F 00    >                        ld      bc, 15
  37+ E0D3 ED B0       >                        ldir
  38+ E0D5                                      ldCopyStringLen GalaxySeeds,        SaveSeeds, 6
  38+ E0D5 21 52 80    >                        ld      hl,GalaxySeeds
  38+ E0D8 11 6E E0    >                        ld      de, SaveSeeds
  38+ E0DB 01 06 00    >                        ld      bc, 6
  38+ E0DE ED B0       >                        ldir
  39+ E0E0                                      ldCopyStringLen StockAvaliabiliy,   SaveStockAvaliabiliy, 16
  39+ E0E0 21 33 80    >                        ld      hl,StockAvaliabiliy
  39+ E0E3 11 74 E0    >                        ld      de, SaveStockAvaliabiliy
  39+ E0E6 01 10 00    >                        ld      bc, 16
  39+ E0E9 ED B0       >                        ldir
  40+ E0EB                                      ldCopyStringLen CargoTonnes,        SaveCargo, 16
  40+ E0EB 21 96 85    >                        ld      hl,CargoTonnes
  40+ E0EE 11 85 E0    >                        ld      de, SaveCargo
  40+ E0F1 01 10 00    >                        ld      bc, 16
  40+ E0F4 ED B0       >                        ldir
  41+ E0F6                                      ldCopyStringLen EquipmentFitted,    SaveEquipmentFitted, EQ_ITEM_COUNT
  41+ E0F6 21 AE 85    >                        ld      hl,EquipmentFitted
  41+ E0F9 11 95 E0    >                        ld      de, SaveEquipmentFitted
  41+ E0FC 01 1A 00    >                        ld      bc, EQ_ITEM_COUNT
  41+ E0FF ED B0       >                        ldir
  42+ E101                                      ldCopyStringLen LaserType,          SaveLaserType, 4
  42+ E101 21 A6 85    >                        ld      hl,LaserType
  42+ E104 11 AF E0    >                        ld      de, SaveLaserType
  42+ E107 01 04 00    >                        ld      bc, 4
  42+ E10A ED B0       >                        ldir
  43+ E10C                                      ldCopyStringLen LaserDamagedFlag,   SaveLaserDamagedFlag, 4
  43+ E10C 21 AA 85    >                        ld      hl,LaserDamagedFlag
  43+ E10F 11 B3 E0    >                        ld      de, SaveLaserDamagedFlag
  43+ E112 01 04 00    >                        ld      bc, 4
  43+ E115 ED B0       >                        ldir
  44+ E117                                      ldCopy2Byte     PresentSystemX,     SavePresentSystemX
  44+ E117 2A 58 80    >                        ld       hl,(PresentSystemX)
  44+ E11A 22 B7 E0    >                        ld       (SavePresentSystemX),hl
  45+ E11D                                      ldCopy2Byte     TargetSystemX,      SaveTargetSystemX
  45+ E11D 2A 5A 80    >                        ld       hl,(TargetSystemX)
  45+ E120 22 B9 E0    >                        ld       (SaveTargetSystemX),hl
  46+ E123                                      ldCopyStringLen Cash,               SaveCash, 6
  46+ E123 21 8F 85    >                        ld      hl,Cash
  46+ E126 11 BB E0    >                        ld      de, SaveCash
  46+ E129 01 06 00    >                        ld      bc, 6
  46+ E12C ED B0       >                        ldir
  47+ E12E                                      ldCopyByte      Fuel,               SaveFuel
  47+ E12E 3A 93 85    >                        ld       a,(Fuel)
  47+ E131 32 BF E0    >                        ld       (SaveFuel),a
  48+ E134                                      ldCopyByte      FugitiveInnocentStatus,  SaveFugitiveInnocentStatus
  48+ E134 3A 67 80    >                        ld       a,(FugitiveInnocentStatus)
  48+ E137 32 C0 E0    >                        ld       (SaveFugitiveInnocentStatus),a
  49+ E13A                                      ldCopy2Byte     KillTally           ,SaveKillTally
  49+ E13A 2A 68 80    >                        ld       hl,(KillTally)
  49+ E13D 22 C1 E0    >                        ld       (SaveKillTally),hl
  50+ E140                                      ldCopyByte      OuterHyperCount     ,SaveOuterHyperCount
  50+ E140 3A 9B 81    >                        ld       a,(OuterHyperCount)
  50+ E143 32 C3 E0    >                        ld       (SaveOuterHyperCount),a
  51+ E146                                      ldCopyByte      InnerHyperCount     ,SaveInnerHyperCount
  51+ E146 3A 9A 81    >                        ld       a,(InnerHyperCount)
  51+ E149 32 C4 E0    >                        ld       (SaveInnerHyperCount),a
  52+ E14C                                      ldCopyByte      ForeShield          ,SaveForeShield
  52+ E14C 3A 53 82    >                        ld       a,(ForeShield)
  52+ E14F 32 C5 E0    >                        ld       (SaveForeShield),a
  53+ E152                                      ldCopyByte      AftShield           ,SaveAftShield
  53+ E152 3A 54 82    >                        ld       a,(AftShield)
  53+ E155 32 C6 E0    >                        ld       (SaveAftShield),a
  54+ E158                                      ldCopyByte      PlayerEnergy        ,SavePlayerEnergy
  54+ E158 3A 55 82    >                        ld       a,(PlayerEnergy)
  54+ E15B 32 C7 E0    >                        ld       (SavePlayerEnergy),a
  55+ E15E                                      ldCopyByte      CargoBaySize        ,SaveCargoBaySize
  55+ E15E 3A 94 85    >                        ld       a,(CargoBaySize)
  55+ E161 32 C8 E0    >                        ld       (SaveCargoBaySize),a
  56+ E164                                      ldCopyByte      FuelScoopsBarrelStatus     ,SaveFuelScoopStatus
  56+ E164 3A C8 85    >                        ld       a,(FuelScoopsBarrelStatus)
  56+ E167 32 C9 E0    >                        ld       (SaveFuelScoopStatus),a
  57+ E16A C9                                   ret
  58+ E16B
  59+ E16B              copyCommanderFromSave:  ldCopyStringLen SaveCommanderName,      CommanderName, 15
  59+ E16B 21 5F E0    >                        ld      hl,SaveCommanderName
  59+ E16E 11 59 82    >                        ld      de, CommanderName
  59+ E171 01 0F 00    >                        ld      bc, 15
  59+ E174 ED B0       >                        ldir
  60+ E176                                      ldCopyStringLen SaveSeeds,              GalaxySeeds, 6
  60+ E176 21 6E E0    >                        ld      hl,SaveSeeds
  60+ E179 11 52 80    >                        ld      de, GalaxySeeds
  60+ E17C 01 06 00    >                        ld      bc, 6
  60+ E17F ED B0       >                        ldir
  61+ E181                                      ldCopyStringLen SaveStockAvaliabiliy,   StockAvaliabiliy, 16
  61+ E181 21 74 E0    >                        ld      hl,SaveStockAvaliabiliy
  61+ E184 11 33 80    >                        ld      de, StockAvaliabiliy
  61+ E187 01 10 00    >                        ld      bc, 16
  61+ E18A ED B0       >                        ldir
  62+ E18C                                      ldCopyStringLen SaveCargo,              CargoTonnes, 16
  62+ E18C 21 85 E0    >                        ld      hl,SaveCargo
  62+ E18F 11 96 85    >                        ld      de, CargoTonnes
  62+ E192 01 10 00    >                        ld      bc, 16
  62+ E195 ED B0       >                        ldir
  63+ E197                                      ldCopyStringLen SaveEquipmentFitted,    EquipmentFitted, EQ_ITEM_COUNT
  63+ E197 21 95 E0    >                        ld      hl,SaveEquipmentFitted
  63+ E19A 11 AE 85    >                        ld      de, EquipmentFitted
  63+ E19D 01 1A 00    >                        ld      bc, EQ_ITEM_COUNT
  63+ E1A0 ED B0       >                        ldir
  64+ E1A2                                      ldCopyStringLen SaveLaserType,          LaserType, 4
  64+ E1A2 21 AF E0    >                        ld      hl,SaveLaserType
  64+ E1A5 11 A6 85    >                        ld      de, LaserType
  64+ E1A8 01 04 00    >                        ld      bc, 4
  64+ E1AB ED B0       >                        ldir
  65+ E1AD                                      ldCopyStringLen SaveLaserDamagedFlag,    LaserDamagedFlag, 4
  65+ E1AD 21 B3 E0    >                        ld      hl,SaveLaserDamagedFlag
  65+ E1B0 11 AA 85    >                        ld      de, LaserDamagedFlag
  65+ E1B3 01 04 00    >                        ld      bc, 4
  65+ E1B6 ED B0       >                        ldir
  66+ E1B8                                      ldCopy2Byte     SavePresentSystemX,     PresentSystemX
  66+ E1B8 2A B7 E0    >                        ld       hl,(SavePresentSystemX)
  66+ E1BB 22 58 80    >                        ld       (PresentSystemX),hl
  67+ E1BE                                      ldCopy2Byte     SaveTargetSystemX,      TargetSystemX
  67+ E1BE 2A B9 E0    >                        ld       hl,(SaveTargetSystemX)
  67+ E1C1 22 5A 80    >                        ld       (TargetSystemX),hl
  68+ E1C4 21 7F 7F                             ld		hl,IndexedWork              ; not sure yet why thisis done here
  69+ E1C7 CD 3F 86                             call	        copy_galaxy_to_system
  70+ E1CA CD FF 86                             call	        find_present_system
  71+ E1CD CD 62 86                             call	        copy_working_to_galaxy
  72+ E1D0                                      ldCopyStringLen SaveCash,               Cash, 6
  72+ E1D0 21 BB E0    >                        ld      hl,SaveCash
  72+ E1D3 11 8F 85    >                        ld      de, Cash
  72+ E1D6 01 06 00    >                        ld      bc, 6
  72+ E1D9 ED B0       >                        ldir
  73+ E1DB                                      ldCopyByte      SaveFuel,               Fuel
  73+ E1DB 3A BF E0    >                        ld       a,(SaveFuel)
  73+ E1DE 32 93 85    >                        ld       (Fuel),a
  74+ E1E1                                      ldCopyByte      SaveFugitiveInnocentStatus,  FugitiveInnocentStatus
  74+ E1E1 3A C0 E0    >                        ld       a,(SaveFugitiveInnocentStatus)
  74+ E1E4 32 67 80    >                        ld       (FugitiveInnocentStatus),a
  75+ E1E7                                      ldCopy2Byte     SaveKillTally           ,KillTally
  75+ E1E7 2A C1 E0    >                        ld       hl,(SaveKillTally)
  75+ E1EA 22 68 80    >                        ld       (KillTally),hl
  76+ E1ED                                      ldCopyByte      SaveOuterHyperCount     ,OuterHyperCount
  76+ E1ED 3A C3 E0    >                        ld       a,(SaveOuterHyperCount)
  76+ E1F0 32 9B 81    >                        ld       (OuterHyperCount),a
  77+ E1F3                                      ldCopyByte      SaveInnerHyperCount     ,InnerHyperCount
  77+ E1F3 3A C4 E0    >                        ld       a,(SaveInnerHyperCount)
  77+ E1F6 32 9A 81    >                        ld       (InnerHyperCount),a
  78+ E1F9                                      ldCopyByte      SaveForeShield          ,ForeShield
  78+ E1F9 3A C5 E0    >                        ld       a,(SaveForeShield)
  78+ E1FC 32 53 82    >                        ld       (ForeShield),a
  79+ E1FF                                      ldCopyByte      SaveAftShield           ,AftShield
  79+ E1FF 3A C6 E0    >                        ld       a,(SaveAftShield)
  79+ E202 32 54 82    >                        ld       (AftShield),a
  80+ E205                                      ldCopyByte      SavePlayerEnergy        ,PlayerEnergy
  80+ E205 3A C7 E0    >                        ld       a,(SavePlayerEnergy)
  80+ E208 32 55 82    >                        ld       (PlayerEnergy),a
  81+ E20B                                      ldCopyByte      SaveCargoBaySize        ,CargoBaySize
  81+ E20B 3A C8 E0    >                        ld       a,(SaveCargoBaySize)
  81+ E20E 32 94 85    >                        ld       (CargoBaySize),a
  82+ E211                                      ldCopyByte      SaveFuelScoopStatus     ,FuelScoopsBarrelStatus
  82+ E211 3A C9 E0    >                        ld       a,(SaveFuelScoopStatus)
  82+ E214 32 C8 85    >                        ld       (FuelScoopsBarrelStatus),a
  83+ E217 C9                                   ret
  84+ E218
  85+ E218 CD CA E0     saveCommander:          call    copyCommanderToSave
  86+ E21B                                      ldCopyStringLen defaultSaveName, SaveFilename, 15
  86+ E21B 21 31 E0    >                        ld      hl,defaultSaveName
  86+ E21E 11 50 E0    >                        ld      de, SaveFilename
  86+ E221 01 0F 00    >                        ld      bc, 15
  86+ E224 ED B0       >                        ldir
  87+ E226 21 31 E0                             ld      hl, defaultSaveName             ; default debug name
  88+ E229 DD 21 40 E0                          ld      ix, SaveCommanderHeader
  89+ E22D 01 8A 00                             ld      bc, SaveSize
  90+ E230 CD 51 AB                             call    FileSave
  91+ E233 C9                                   ret
  92+ E234
  93+ E234 21 31 E0     loadCommander:          ld      hl, defaultSaveName             ; default debug name
  94+ E237 DD 21 40 E0                          ld      ix, SaveCommanderHeader
  95+ E23B 01 8A 00                             ld      bc, SaveSize
  96+ E23E CD 20 AB                             call    FileLoad
  97+ E241 CD 6B E1                             call    copyCommanderFromSave
  98+ E244                                      ClearMissileTargetting
  98+ E244 3E FF       >                        ld      a,StageMissileNotTargeting
  98+ E246 32 58 82    >                        ld      (MissileTargettingFlag),a
  99+ E249 CD 3D 84                             call    SetPlayerRank
 100+ E24C                                      SetMemFalse LaserBeamOn
 100+ E24C 3E FF       >                        ld      a,$FF
 100+ E24E 32 70 82    >                        ld      (LaserBeamOn),a
 101+ E251 C9                                   ret
 102+ E252
 103+ E252               ; For now hard laod, later correctlt sequence gneeral vars and dma fill with 0 for a start
 104+ E252              defaultCommander:       ldCopyStringLen defaultName, CommanderName, 8
 104+ E252 21 10 E0    >                        ld      hl,defaultName
 104+ E255 11 59 82    >                        ld      de, CommanderName
 104+ E258 01 08 00    >                        ld      bc, 8
 104+ E25B ED B0       >                        ldir
 105+ E25D                                      ldCopyStringLen defaultSeeds, GalaxySeeds, 6
 105+ E25D 21 29 E0    >                        ld      hl,defaultSeeds
 105+ E260 11 52 80    >                        ld      de, GalaxySeeds
 105+ E263 01 06 00    >                        ld      bc, 6
 105+ E266 ED B0       >                        ldir
 106+ E268                                      ldCopy2Byte defaultHomeX, PresentSystemX
 106+ E268 2A 2F E0    >                        ld       hl,(defaultHomeX)
 106+ E26B 22 58 80    >                        ld       (PresentSystemX),hl
 107+ E26E                                      ldCopy2Byte defaultHomeX, TargetSystemX
 107+ E26E 2A 2F E0    >                        ld       hl,(defaultHomeX)
 107+ E271 22 5A 80    >                        ld       (TargetSystemX),hl
 108+ E274 21 7F 7F                             ld		hl,IndexedWork              ; not sure yet why thisis done here
 109+ E277 CD 3F 86                             call	copy_galaxy_to_system
 110+ E27A CD FF 86                             call	find_present_system
 111+ E27D CD 62 86                             call	copy_working_to_galaxy
 112+ E280 01 60 EA                             ld      bc,60000
 113+ E283 ED 43 8F 85                          ld      (Cash),bc
 114+ E287 01 00 00                             ld		bc,0
 115+ E28A ED 43 91 85                          ld		(Cash+2), bc                    ; cash no longer big endian
 116+ E28E 3E 46                                ld		a,MaxFuelLevel
 117+ E290 32 93 85                             ld		(Fuel),a
 118+ E293 3E 5B                                ld      a,BankGalaxyData0
 119+ E295 32 45 80                             ld		(Galaxy),a
 120+ E298 AF                                   xor		a
 121+ E299 21 AE 85                             ld      hl,EquipmentFitted
 122+ E29C 06 1A                                ld      b, EQ_ITEM_COUNT
 123+ E29E 77           .ClearFittedLooop:      ld      (hl),a
 124+ E29F 23                                   inc     hl
 125+ E2A0 10 FC                                djnz    .ClearFittedLooop
 126+ E2A2                                      SetAFalse
 126+ E2A2 3E FF       >                        ld      a,$FF
 127+ E2A4 32 BC 85                             ld      (EquipmentFitted+EQ_FRONT_BEAM),a
 128+ E2A7 32 CD 81                             ld		(MissionData),a						;The Plan/Mission
 129+ E2AA 3E 03                                ld      a,3                                  ; a = 0 = pulse laser
 130+ E2AC 32 A6 85                             ld		(LaserType),a
 131+ E2AF 3E FF                                ld      a,$FF                                 ; a = 255
 132+ E2B1 32 A7 85                             ld		(LaserType+1),a
 133+ E2B4 32 A8 85                             ld		(LaserType+2),a
 134+ E2B7 32 A9 85                             ld		(LaserType+3),a
 135+ E2BA AF                                   xor     a                                  ; a= 0
 136+ E2BB 32 AA 85                             ld      (LaserDamagedFlag),a
 137+ E2BE 32 AB 85                             ld      (LaserDamagedFlag+1),a
 138+ E2C1 32 AC 85                             ld      (LaserDamagedFlag+2),a
 139+ E2C4 32 AD 85                             ld      (LaserDamagedFlag+3),a
 140+ E2C7              ; REMOVE?             ld      a,EQ_FRONT_PULSE
 141+ E2C7 AF                                   xor     a
 142+ E2C8 32 B1 85                             ld		(ECMPresent),a
 143+ E2CB 32 C8 85                             ld		(FuelScoopsBarrelStatus),a
 144+ E2CE 32 B4 85                             ld		(EnergyBomb),a
 145+ E2D1 32 B5 85                             ld		(ExtraEnergyUnit),a
 146+ E2D4 32 B6 85                             ld		(DockingComputer),a
 147+ E2D7 32 B7 85                             ld		(GalacticHyperDrive),a
 148+ E2DA 32 B3 85                             ld		(EscapePod),a
 149+ E2DD 32 67 80                             ld      (FugitiveInnocentStatus),a
 150+ E2E0 32 68 80                             ld		(KillTally),a
 151+ E2E3 32 9B 81                             ld      (OuterHyperCount),a
 152+ E2E6 32 9A 81                             ld      (InnerHyperCount),a
 153+ E2E9 3D                                   dec		a								; now a = 255
 154+ E2EA 32 53 82                             ld		(ForeShield),a
 155+ E2ED 32 54 82                             ld		(AftShield),a
 156+ E2F0 32 55 82                             ld		(PlayerEnergy),a
 157+ E2F3 3E 14                                ld		a,20
 158+ E2F5 32 94 85                             ld		(CargoBaySize),a
 159+ E2F8 CD 78 E3                             call	ZeroCargo						; Clear out cargo
 160+ E2FB 3E 00        .SetLasers:             ld      a,0                             ; we start on Front view
 161+ E2FD CD 0E E3                             call    LoadLaserToCurrent
 162+ E300                                      ClearMissileTargetting
 162+ E300 3E FF       >                        ld      a,StageMissileNotTargeting
 162+ E302 32 58 82    >                        ld      (MissileTargettingFlag),a
 163+ E305 CD 3D 84                             call    SetPlayerRank
 164+ E308                                      SetMemFalse LaserBeamOn
 164+ E308 3E FF       >                        ld      a,$FF
 164+ E30A 32 70 82    >                        ld      (LaserBeamOn),a
 165+ E30D C9                                   ret
 166+ E30E
 167+ E30E
 168+ E30E              ; a = current view number
 169+ E30E 21 A6 85     LoadLaserToCurrent:     ld      hl,LaserType                    ; .
 170+ E311 ED 31                                add     hl,a                            ; .
 171+ E313 7E                                   ld      a,(hl)                          ; .
 172+ E314 47                                   ld      b,a                             ; first off is there a laser present in current view
 173+ E315 32 6A 82                             ld      (CurrLaserType),a               ; set type
 174+ E318 FE FF                                cp      255                             ; .
 175+ E31A C8                                   ret     z                               ; we can then drop out early if nothing fitted
 176+ E31B 3E 04                                ld      a,4                             ; Damage state is in next variable in memory
 177+ E31D ED 31                                add     hl,a
 178+ E31F 7E                                   ld      a,(hl)
 179+ E320 32 6B 82                             ld      (CurrLaserDamage),a             ; copy over current laser's damage
 180+ E323 50                                   ld      d,b                             ; get table index
 181+ E324 1E 0C                                ld      e,LaserStatsTableWidth          ;
 182+ E326 ED 30                                mul     de                              ;
 183+ E328 21 21 77                             ld      hl,LaserStatsTable              ;
 184+ E32B 19                                   add     hl,de                           ;
 185+ E32C 23                                   inc     hl                              ; we already have type
 186+ E32D                                      ldAtHLtoMem CurrLaserPulseRate          ; table [1]
 186+ E32D 7E          >                        ld      a,(hl)
 186+ E32E 32 6C 82    >                        ld      (CurrLaserPulseRate),a
 187+ E331 23                                   inc     hl                              ; table [2]
 188+ E332                                      ldAtHLtoMem CurrLaserPulseOnTime
 188+ E332 7E          >                        ld      a,(hl)
 188+ E333 32 6D 82    >                        ld      (CurrLaserPulseOnTime),a
 189+ E336 23                                   inc     hl                              ; table [3]
 190+ E337                                      ldAtHLtoMem CurrLaserPulseOffTime
 190+ E337 7E          >                        ld      a,(hl)
 190+ E338 32 6E 82    >                        ld      (CurrLaserPulseOffTime),a
 191+ E33B 23                                   inc     hl                              ; table [4]
 192+ E33C                                      ldAtHLtoMem CurrLaserPulseRest
 192+ E33C 7E          >                        ld      a,(hl)
 192+ E33D 32 6F 82    >                        ld      (CurrLaserPulseRest),a
 193+ E340 23                                   inc     hl                              ; table [5]
 194+ E341                                      ldAtHLtoMem CurrLaserDamageOutput
 194+ E341 7E          >                        ld      a,(hl)
 194+ E342 32 76 82    >                        ld      (CurrLaserDamageOutput),a
 195+ E345 23                                   inc     hl                              ; table [6]
 196+ E346                                      ldAtHLtoMem CurrLaserEnergyDrain
 196+ E346 7E          >                        ld      a,(hl)
 196+ E347 32 77 82    >                        ld      (CurrLaserEnergyDrain),a
 197+ E34A 23                                   inc     hl                              ; table [7]
 198+ E34B                                      ldAtHLtoMem CurrLaserHeat
 198+ E34B 7E          >                        ld      a,(hl)
 198+ E34C 32 78 82    >                        ld      (CurrLaserHeat),a
 199+ E34F 23                                   inc     hl                              ; table [8]
 200+ E350                                      ldAtHLtoMem CurrLaserDurability
 200+ E350 7E          >                        ld      a,(hl)
 200+ E351 32 79 82    >                        ld      (CurrLaserDurability),a
 201+ E354 23                                   inc     hl                              ; table [9]
 202+ E355                                      ldAtHLtoMem CurrLaserDurabilityAmount   ; we don't need tech level etc for in game run only markets so stop here
 202+ E355 7E          >                        ld      a,(hl)
 202+ E356 32 7A 82    >                        ld      (CurrLaserDurabilityAmount),a
 203+ E359 C9                                   ret
 204+ E35A
 205+ E35A              ; Set a = 2 * (slaves + narcotics) + firearms
 206+ E35A 3A 99 85     calculateBadness:       ld      a,(SlaveCargoTonnes)            ; Badness = 2(slaves + narcotics)
 207+ E35D 47                                   ld      b,a                             ; b= slaves
 208+ E35E 3A 9C 85                             ld      a,(NarcoticsCargoTonnes)        ; .
 209+ E361 80                                   add     a,b                             ; a = b + narcotics
 210+ E362 CB 27                                sla     a                               ; a *= 2
 211+ E364 47                                   ld      b,a                             ; b = a
 212+ E365 3A A0 85                             ld      a,(FirearmsCargoTonnes)         ; a = firearms tonns
 213+ E368 80                                   add     a,b                             ; a += b so firearms + 2(slaves + narcotics)
 214+ E369 C9                                   ret
 215+ E36A
 216+ E36A CD 6B E1     PlayerDeath:            call    copyCommanderFromSave           ; load last loaded/saved commander
 217+ E36D                                      ZeroA                                   ; set current laser to front
 217+ E36D AF          >                        xor a
 218+ E36E CD 0E E3                             call    LoadLaserToCurrent
 219+ E371 CD FA 83                             call    InitMainLoop
 220+ E374 CD 58 83                             call    ResetPlayerShip
 221+ E377 C9                                   ret
 222+ E378                                  ;    clear out all other objects
 223+ E378                                  ;    create debris
 224+ E378                                  ;    if cargo presetn then create a cargo
 225+ E378                                  ;
 226+ E378                                  ;    enqueve message game over
 227+ E378                                  ;    go to load commander page
# file closed: ./Commander/commanderData.asm
 784  E378                  INCLUDE "./Commander/zero_player_cargo.asm"
# file opened: ./Commander/zero_player_cargo.asm
   1+ E378              ZeroCargo:
   2+ E378 AF           		xor		a							;zero-out cargo, including gems.
   3+ E379 06 10        		ld		b,16						;all the way up to alien items
   4+ E37B 21 96 85     		ld		hl,CargoTonnes   			; cargo levels
   5+ E37E              .ZeroLoop:
   6+ E37E 77                   ld      (hl),a
   7+ E37F 23           		inc		hl
   8+ E380 10 FC        		djnz	.ZeroLoop
   9+ E382 C9           		ret
  10+ E383
# file closed: ./Commander/zero_player_cargo.asm
 785  E383                  DISPLAY "Bank ",BankCommander," - Bytes free ",/D, $2000 - ($-CommanderAddr), " - BankCommander"
 786  E383              ; Bank 57  ------------------------------------------------------------------------------------------------------------------------
 787  E383                  SLOT    LAYER2Addr
 788  E383                  PAGE    BankLAYER2
 789  E383                  ORG     LAYER2Addr
 790  E000
 791  E000                  INCLUDE "./Layer2Graphics/layer2_bank_select.asm"
# file opened: ./Layer2Graphics/layer2_bank_select.asm
   1+ E000
   2+ E000 00           varL2_BANK_SELECTED			 DB	0
   3+ E001 00           varL2_CURRENT_BANK           DB	0
   4+ E002 00           varL2_BUFFER_MODE            DB 0
   5+ E003 00           varL2_ACCESS_MODE            DB 0
   6+ E004 00           varL2_SAVED_SELECT           DB 0
   7+ E005 00           varL2_SAVED_OFFSET           DB 0
   8+ E006
   9+ E006 3E 08        asm_l2_double_buffer_on:    ld      a,8
  10+ E008 32 02 E0                                 ld      (varL2_BUFFER_MODE),a
  11+ E00B C9                                       ret
  12+ E00C
  13+ E00C AF           asm_l2_double_buffer_off:   xor     a
  14+ E00D 32 02 E0                                 ld      (varL2_BUFFER_MODE),a
  15+ E010 C9                                       ret
  16+ E011
  17+ E011 01 3B 12     asm_disable_l2_readwrite:   ld      bc, IO_LAYER2_PORT
  18+ E014 ED 70                                    in      (c)
  19+ E016 32 03 E0                                 ld      (varL2_ACCESS_MODE),a
  20+ E019 E6 FA                                    and     LAYER2_DISABLE_MEM_ACCESS
  21+ E01B ED 79                                    out     (c),a
  22+ E01D C9                                       ret
  23+ E01E
  24+ E01E 3A 03 E0     asm_restore_l2_readwrite:   ld      a,(varL2_ACCESS_MODE)
  25+ E021 E6 05                                    and     LAYER2_READ_WRITE_MASK
  26+ E023 57                                       ld      d,a
  27+ E024 01 3B 12                                 ld      bc, IO_LAYER2_PORT
  28+ E027 ED 70                                    in      (c)
  29+ E029 32 03 E0                                 ld      (varL2_ACCESS_MODE),a
  30+ E02C A2                                       and     d
  31+ E02D ED 79                                    out     (c),a
  32+ E02F C9                                       ret
  33+ E030
  34+ E030 01 3B 12     asm_enable_l2_readwrite:    ld      bc, IO_LAYER2_PORT
  35+ E033 ED 70                                    in      (c)
  36+ E035 F6 05                                    or      LAYER2_READ_WRITE_MASK
  37+ E037 ED 79                                    out     (c),a
  38+ E039 C9                                       ret
  39+ E03A
  40+ E03A              ; "asm_l2_bank_select"
  41+ E03A              ; " a = sepecific bank mask value to select, does not set varL2_BANK_SELECTED"
  42+ E03A 57           asm_l2_bank_select:         ld      d,a
  43+ E03B FE 00                                    cp      0
  44+ E03D 28 08                                    jr      z,.NotBreakDebug
  45+ E03F FE 40                                    cp      $40
  46+ E041 28 04                                    jr      z,.NotBreakDebug
  47+ E043 FE 80                                    cp      $80
  48+ E045 28 00                                    jr      z,.NotBreakDebug
  49+ E047              .NotBreakDebug:
  50+ E047 3A 02 E0                                 ld      a,(varL2_BUFFER_MODE)
  51+ E04A F6 03                                    or		LAYER2_VISIBLE_MASK  |  LAYER2_WRITE_ENABLE_MASK
  52+ E04C B2                                       or      d; | LAYER2_SHADOW_SCREEN_MASK
  53+ E04D 01 3B 12                                 ld 		bc, IO_LAYER2_PORT
  54+ E050 ED 79                                    out 	(c),a
  55+ E052 C9                                       ret
  56+ E053              ;  "asm_l2_bank_select a = sepecific bank number to select, dsets varL2_BANK_SELECTED"
  57+ E053 32 00 E0     asm_l2_bank_n_select:       ld		(varL2_BANK_SELECTED),a
  58+ E056 FE 00                                    cp		0
  59+ E058 20 04                                    jr 		nz,.nottopbank
  60+ E05A 3E 00        .topbank:                   ld		a,LAYER2_SHIFTED_SCREEN_TOP
  61+ E05C 18 DC                                    jr		asm_l2_bank_select
  62+ E05E FE 01        .nottopbank:                cp		1
  63+ E060 20 04                                    jr 		nz,.notmiddlebank
  64+ E062 3E 40        .middlebank:                ld		a,LAYER2_SHIFTED_SCREEN_MIDDLE
  65+ E064 18 D4                                    jr		asm_l2_bank_select
  66+ E066 3E 80        .notmiddlebank:             ld		a,LAYER2_SHIFTED_SCREEN_BOTTOM ; default to bottom
  67+ E068 18 D0                                    jr		asm_l2_bank_select
  68+ E06A              		; Note no ret as its handled by above routines
  69+ E06A
  70+ E06A 3A 04 E0     asm_l2_reselect_saved_bank: ld      a,(varL2_SAVED_SELECT)  ; recover selected option
  71+ E06D 01 3B 12                                 ld 		bc, IO_LAYER2_PORT
  72+ E070 ED 79                                    out 	(c),a
  73+ E072 3A 05 E0                                 ld      a,(varL2_SAVED_OFFSET)
  74+ E075 ED 79                                    out 	(c),a
  75+ E077 C9                                       ret
  76+ E078
  77+ E078
  78+ E078              asm_l2_bank_0_macro:        MACRO
  79+ E078 ~                                        ld      a,(varL2_BUFFER_MODE)
  80+ E078 ~                                        or		LAYER2_VISIBLE_MASK  |  LAYER2_WRITE_ENABLE_MASK | LAYER2_SHIFTED_SCREEN_TOP
  81+ E078 ~                                        ld      (varL2_SAVED_SELECT),a  ; save selected option
  82+ E078 ~                                        ld 		bc, IO_LAYER2_PORT
  83+ E078 ~                                        out 	(c),a
  84+ E078 ~                                        ld      a,%00010000             ; write bit 4 set so we can force a bank offset of 0 from top bank
  85+ E078 ~                                        ld      (varL2_SAVED_OFFSET),a
  86+ E078 ~                                        out 	(c),a
  87+ E078 ~                                        ZeroA						; set a to 0
  88+ E078 ~                                        ld		(varL2_BANK_SELECTED),a	; save selected bank number 0
  89+ E078                                          ENDM
  90+ E078
  91+ E078              asm_l2_bank_1_macro:        MACRO
  92+ E078 ~                                        ld      a,(varL2_BUFFER_MODE)
  93+ E078 ~                                        or		LAYER2_VISIBLE_MASK  |  LAYER2_WRITE_ENABLE_MASK | LAYER2_SHIFTED_SCREEN_MIDDLE
  94+ E078 ~                                        ld      (varL2_SAVED_SELECT),a  ; save selected option
  95+ E078 ~                                        ld 		bc, IO_LAYER2_PORT
  96+ E078 ~                                        out 	(c),a
  97+ E078 ~                                        ld      a,%00010000             ; write bit 4 set so we can force a bank offset of 0 from middle bank
  98+ E078 ~                                        ld      (varL2_SAVED_OFFSET),a
  99+ E078 ~                                        out 	(c),a
 100+ E078 ~                                        ld      a,1						; set a to 0
 101+ E078 ~                                        ld		(varL2_BANK_SELECTED),a	; save selected bank number 0
 102+ E078                                          ENDM
 103+ E078
 104+ E078              asm_l2_bank_2_macro:        MACRO
 105+ E078 ~                                        ld      a,(varL2_BUFFER_MODE)
 106+ E078 ~                                        or		LAYER2_VISIBLE_MASK  |  LAYER2_WRITE_ENABLE_MASK | LAYER2_SHIFTED_SCREEN_BOTTOM
 107+ E078 ~                                        ld      (varL2_SAVED_SELECT),a  ; save selected option
 108+ E078 ~                                        ld 		bc, IO_LAYER2_PORT
 109+ E078 ~                                        out 	(c),a
 110+ E078 ~                                        ld      a,%00010000             ; write bit 4 set so we can force a bank offset of 0 from bottom bank
 111+ E078 ~                                        ld      (varL2_SAVED_OFFSET),a
 112+ E078 ~                                        out 	(c),a
 113+ E078 ~                                        ld      a,2						; set a to 0
 114+ E078 ~                                        ld		(varL2_BANK_SELECTED),a	; save selected bank number 0
 115+ E078                                          ENDM
 116+ E078
 117+ E078              asm_l2_bank_3_macro:        MACRO
 118+ E078 ~                                        ld      a,(varL2_BUFFER_MODE)
 119+ E078 ~                                        or		LAYER2_VISIBLE_MASK  |  LAYER2_WRITE_ENABLE_MASK | LAYER2_SHIFTED_SCREEN_BOTTOM
 120+ E078 ~                                        ld      (varL2_SAVED_SELECT),a  ; save selected option
 121+ E078 ~                                        ld 		bc, IO_LAYER2_PORT
 122+ E078 ~                                        out 	(c),a
 123+ E078 ~                                        ld      a,%00010001             ; write bit 4 set so we can force a bank offset of 1 from bottom bank
 124+ E078 ~                                        ld      (varL2_SAVED_OFFSET),a
 125+ E078 ~                                        out 	(c),a
 126+ E078 ~                                        ld      a,3						; set a to 0
 127+ E078 ~                                        ld		(varL2_BANK_SELECTED),a	; save selected bank number 0
 128+ E078                                          ENDM
 129+ E078
 130+ E078              asm_l2_bank_4_macro:        MACRO
 131+ E078 ~                                        ld      a,(varL2_BUFFER_MODE)
 132+ E078 ~                                        or		LAYER2_VISIBLE_MASK  |  LAYER2_WRITE_ENABLE_MASK | LAYER2_SHIFTED_SCREEN_BOTTOM
 133+ E078 ~                                        ld 		bc, IO_LAYER2_PORT
 134+ E078 ~                                        ld      (varL2_SAVED_SELECT),a  ; save selected option
 135+ E078 ~                                        out 	(c),a
 136+ E078 ~                                        ld      a,%00010010             ; write bit 4 set so we can force a bank offset of 2 from bottom bank
 137+ E078 ~                                        ld      (varL2_SAVED_OFFSET),a
 138+ E078 ~                                        out 	(c),a
 139+ E078 ~                                        ld      a,4						; set a to 0
 140+ E078 ~                                        ld		(varL2_BANK_SELECTED),a	; save selected bank number 0
 141+ E078                                          ENDM
 142+ E078
 143+ E078              ; "asm_l2_row_bank_select"
 144+ E078              ; "A (unsinged) = y row of pixel line from top, sets the bank to top middle or bottom and adjusts a reg to row memory address"
 145+ E078              ; "Could optimise by holding the previous bank but given its only an out statement it may not save T states at all"
 146+ E078              ; "destroys BC call de is safe a = adjusted poke pixel row"
 147+ E078              asm_l2_row_bank_select:     JumpIfAGTENusng 128, .BottomBank
 147+ E078 FE 80       >                        cp     128
 147+ E07A D2 CA E0    >                        jp		nc,.BottomBank
 148+ E07D                                          JumpIfAGTENusng 64, .MiddleBank
 148+ E07D FE 40       >                        cp     64
 148+ E07F D2 A4 E0    >                        jp		nc,.MiddleBank
 149+ E082 08                                       ex      af,af'
 150+ E083                                          JumpIfMemZero varL2_BANK_SELECTED, .NoTopChange
 150+ E083 3A 00 E0    >                        ld  a,(varL2_BANK_SELECTED)
 150+ E086 A7          >                        and a
 150+ E087 CA A2 E0    >                        jp  z,.NoTopChange
 151+ E08A                                          asm_l2_bank_0_macro
 151+ E08A 3A 02 E0    >                            ld      a,(varL2_BUFFER_MODE)
 151+ E08D F6 03       >                            or		LAYER2_VISIBLE_MASK  |  LAYER2_WRITE_ENABLE_MASK | LAYER2_SHIFTED_SCREEN_TOP
 151+ E08F 32 04 E0    >                            ld      (varL2_SAVED_SELECT),a  ; save selected option
 151+ E092 01 3B 12    >                            ld 		bc, IO_LAYER2_PORT
 151+ E095 ED 79       >                            out 	(c),a
 151+ E097 3E 10       >                            ld      a,%00010000             ; write bit 4 set so we can force a bank offset of 0 from top bank
 151+ E099 32 05 E0    >                            ld      (varL2_SAVED_OFFSET),a
 151+ E09C ED 79       >                            out 	(c),a
 151+ E09E             >                            ZeroA						; set a to 0
 151+ E09E AF          >                        xor a
 151+ E09F 32 00 E0    >                            ld		(varL2_BANK_SELECTED),a	; save selected bank number 0
 152+ E0A2 08           .NoTopChange:               ex      af,af'
 153+ E0A3 C9                                       ret
 154+ E0A4 08           .MiddleBank:                ex      af,af'
 155+ E0A5                                          JumpIfMemEqNusng varL2_BANK_SELECTED, 1, .NoMiddleChange
 155+ E0A5 3A 00 E0    >                        ld  a,(varL2_BANK_SELECTED)
 155+ E0A8 FE 01       >                        cp  1
 155+ E0AA CA C6 E0    >                        jp  z,.NoMiddleChange
 156+ E0AD                                          asm_l2_bank_1_macro
 156+ E0AD 3A 02 E0    >                            ld      a,(varL2_BUFFER_MODE)
 156+ E0B0 F6 43       >                            or		LAYER2_VISIBLE_MASK  |  LAYER2_WRITE_ENABLE_MASK | LAYER2_SHIFTED_SCREEN_MIDDLE
 156+ E0B2 32 04 E0    >                            ld      (varL2_SAVED_SELECT),a  ; save selected option
 156+ E0B5 01 3B 12    >                            ld 		bc, IO_LAYER2_PORT
 156+ E0B8 ED 79       >                            out 	(c),a
 156+ E0BA 3E 10       >                            ld      a,%00010000             ; write bit 4 set so we can force a bank offset of 0 from middle bank
 156+ E0BC 32 05 E0    >                            ld      (varL2_SAVED_OFFSET),a
 156+ E0BF ED 79       >                            out 	(c),a
 156+ E0C1 3E 01       >                            ld      a,1						; set a to 0
 156+ E0C3 32 00 E0    >                            ld		(varL2_BANK_SELECTED),a	; save selected bank number 0
 157+ E0C6 08           .NoMiddleChange:            ex      af,af'
 158+ E0C7 D6 40                                    sub     64
 159+ E0C9 C9                                       ret
 160+ E0CA 08           .BottomBank:                ex      af,af'
 161+ E0CB                                          JumpIfMemEqNusng varL2_BANK_SELECTED, 2, .NoBottomChange
 161+ E0CB 3A 00 E0    >                        ld  a,(varL2_BANK_SELECTED)
 161+ E0CE FE 02       >                        cp  2
 161+ E0D0 CA EC E0    >                        jp  z,.NoBottomChange
 162+ E0D3                                          asm_l2_bank_2_macro
 162+ E0D3 3A 02 E0    >                            ld      a,(varL2_BUFFER_MODE)
 162+ E0D6 F6 83       >                            or		LAYER2_VISIBLE_MASK  |  LAYER2_WRITE_ENABLE_MASK | LAYER2_SHIFTED_SCREEN_BOTTOM
 162+ E0D8 32 04 E0    >                            ld      (varL2_SAVED_SELECT),a  ; save selected option
 162+ E0DB 01 3B 12    >                            ld 		bc, IO_LAYER2_PORT
 162+ E0DE ED 79       >                            out 	(c),a
 162+ E0E0 3E 10       >                            ld      a,%00010000             ; write bit 4 set so we can force a bank offset of 0 from bottom bank
 162+ E0E2 32 05 E0    >                            ld      (varL2_SAVED_OFFSET),a
 162+ E0E5 ED 79       >                            out 	(c),a
 162+ E0E7 3E 02       >                            ld      a,2						; set a to 0
 162+ E0E9 32 00 E0    >                            ld		(varL2_BANK_SELECTED),a	; save selected bank number 0
 163+ E0EC 08           .NoBottomChange:            ex      af,af'
 164+ E0ED D6 80                                    sub     128
 165+ E0EF C9                                       ret
 166+ E0F0
 167+ E0F0
 168+ E0F0              ; "asm_l2_320_row_bank_select"
 169+ E0F0              ; HL (unsinged) = x column of pixel line from left, uses this to define bank
 170+ E0F0              ; 0-  63                    Bank 1
 171+ E0F0              ; 64- 127                   Bank 2
 172+ E0F0              ; 128 - 191                 Bank 3
 173+ E0F0              ; 192 - 255                 Bank 4
 174+ E0F0              ; 256 - 321                 Bank 5
 175+ E0F0              ; outputs h with the correct column number adjusted for bank selection
 176+ E0F0 7C           asm_l2_320_col_bank_select: ld      a,h
 177+ E0F1 A7                                       and     a
 178+ E0F2 C2 84 E1                                 jp      nz,.Bank5                       ; if high bit is set must be bank 5
 179+ E0F5 7D                                       ld      a,l
 180+ E0F6 E6 C0                                    and     %11000000                       ; if upper 2 bits are set then must be bank 4
 181+ E0F8 CA 00 E1                                 jp      z,.NotBank4
 182+ E0FB FE C0                                    cp      %11000000
 183+ E0FD CA 65 E1                                 jp      z,.Bank4
 184+ E100 7D           .NotBank4:                  ld      a,l                             ; try again with original number
 185+ E101 ED 27 80                                 test    %10000000                       ; if 128 or greater then must be bank 3
 186+ E104 C2 46 E1                                 jp      nz,.Bank3
 187+ E107 ED 27 40                                 test    %01000000                       ; if 64 to 127 then bank 2
 188+ E10A C2 27 E1                                 jp      nz,.Bank2
 189+ E10D              .Bank1:                     asm_l2_bank_0_macro
 189+ E10D 3A 02 E0    >                            ld      a,(varL2_BUFFER_MODE)
 189+ E110 F6 03       >                            or		LAYER2_VISIBLE_MASK  |  LAYER2_WRITE_ENABLE_MASK | LAYER2_SHIFTED_SCREEN_TOP
 189+ E112 32 04 E0    >                            ld      (varL2_SAVED_SELECT),a  ; save selected option
 189+ E115 01 3B 12    >                            ld 		bc, IO_LAYER2_PORT
 189+ E118 ED 79       >                            out 	(c),a
 189+ E11A 3E 10       >                            ld      a,%00010000             ; write bit 4 set so we can force a bank offset of 0 from top bank
 189+ E11C 32 05 E0    >                            ld      (varL2_SAVED_OFFSET),a
 189+ E11F ED 79       >                            out 	(c),a
 189+ E121             >                            ZeroA						; set a to 0
 189+ E121 AF          >                        xor a
 189+ E122 32 00 E0    >                            ld		(varL2_BANK_SELECTED),a	; save selected bank number 0
 190+ E125 65                                       ld      h,l
 191+ E126 C9                                       ret
 192+ E127              .Bank2:                     asm_l2_bank_1_macro
 192+ E127 3A 02 E0    >                            ld      a,(varL2_BUFFER_MODE)
 192+ E12A F6 43       >                            or		LAYER2_VISIBLE_MASK  |  LAYER2_WRITE_ENABLE_MASK | LAYER2_SHIFTED_SCREEN_MIDDLE
 192+ E12C 32 04 E0    >                            ld      (varL2_SAVED_SELECT),a  ; save selected option
 192+ E12F 01 3B 12    >                            ld 		bc, IO_LAYER2_PORT
 192+ E132 ED 79       >                            out 	(c),a
 192+ E134 3E 10       >                            ld      a,%00010000             ; write bit 4 set so we can force a bank offset of 0 from middle bank
 192+ E136 32 05 E0    >                            ld      (varL2_SAVED_OFFSET),a
 192+ E139 ED 79       >                            out 	(c),a
 192+ E13B 3E 01       >                            ld      a,1						; set a to 0
 192+ E13D 32 00 E0    >                            ld		(varL2_BANK_SELECTED),a	; save selected bank number 0
 193+ E140                                          ClearCarryFlag
 193+ E140 B7          >                        or a
 194+ E141 7D                                       ld      a,l
 195+ E142 E6 BF                                    and     %10111111                       ; fast subtract 64, just clear bit
 196+ E144 67                                       ld      h,a
 197+ E145 C9                                       ret
 198+ E146              .Bank3:                     asm_l2_bank_2_macro
 198+ E146 3A 02 E0    >                            ld      a,(varL2_BUFFER_MODE)
 198+ E149 F6 83       >                            or		LAYER2_VISIBLE_MASK  |  LAYER2_WRITE_ENABLE_MASK | LAYER2_SHIFTED_SCREEN_BOTTOM
 198+ E14B 32 04 E0    >                            ld      (varL2_SAVED_SELECT),a  ; save selected option
 198+ E14E 01 3B 12    >                            ld 		bc, IO_LAYER2_PORT
 198+ E151 ED 79       >                            out 	(c),a
 198+ E153 3E 10       >                            ld      a,%00010000             ; write bit 4 set so we can force a bank offset of 0 from bottom bank
 198+ E155 32 05 E0    >                            ld      (varL2_SAVED_OFFSET),a
 198+ E158 ED 79       >                            out 	(c),a
 198+ E15A 3E 02       >                            ld      a,2						; set a to 0
 198+ E15C 32 00 E0    >                            ld		(varL2_BANK_SELECTED),a	; save selected bank number 0
 199+ E15F                                          ClearCarryFlag
 199+ E15F B7          >                        or a
 200+ E160 7D                                       ld      a,l
 201+ E161 E6 7F                                    and     %01111111                       ; fast subtract 128, just clear bit
 202+ E163 67                                       ld      h,a
 203+ E164 C9                                       ret
 204+ E165              .Bank4:                     asm_l2_bank_3_macro
 204+ E165 3A 02 E0    >                            ld      a,(varL2_BUFFER_MODE)
 204+ E168 F6 83       >                            or		LAYER2_VISIBLE_MASK  |  LAYER2_WRITE_ENABLE_MASK | LAYER2_SHIFTED_SCREEN_BOTTOM
 204+ E16A 32 04 E0    >                            ld      (varL2_SAVED_SELECT),a  ; save selected option
 204+ E16D 01 3B 12    >                            ld 		bc, IO_LAYER2_PORT
 204+ E170 ED 79       >                            out 	(c),a
 204+ E172 3E 11       >                            ld      a,%00010001             ; write bit 4 set so we can force a bank offset of 1 from bottom bank
 204+ E174 32 05 E0    >                            ld      (varL2_SAVED_OFFSET),a
 204+ E177 ED 79       >                            out 	(c),a
 204+ E179 3E 03       >                            ld      a,3						; set a to 0
 204+ E17B 32 00 E0    >                            ld		(varL2_BANK_SELECTED),a	; save selected bank number 0
 205+ E17E                                          ClearCarryFlag
 205+ E17E B7          >                        or a
 206+ E17F 7D                                       ld      a,l
 207+ E180 E6 3F                                    and     %00111111                       ; fast subtract 192, just clear bit
 208+ E182 67                                       ld      h,a
 209+ E183 C9                                       ret
 210+ E184              .Bank5:                     asm_l2_bank_4_macro
 210+ E184 3A 02 E0    >                            ld      a,(varL2_BUFFER_MODE)
 210+ E187 F6 83       >                            or		LAYER2_VISIBLE_MASK  |  LAYER2_WRITE_ENABLE_MASK | LAYER2_SHIFTED_SCREEN_BOTTOM
 210+ E189 01 3B 12    >                            ld 		bc, IO_LAYER2_PORT
 210+ E18C 32 04 E0    >                            ld      (varL2_SAVED_SELECT),a  ; save selected option
 210+ E18F ED 79       >                            out 	(c),a
 210+ E191 3E 12       >                            ld      a,%00010010             ; write bit 4 set so we can force a bank offset of 2 from bottom bank
 210+ E193 32 05 E0    >                            ld      (varL2_SAVED_OFFSET),a
 210+ E196 ED 79       >                            out 	(c),a
 210+ E198 3E 04       >                            ld      a,4						; set a to 0
 210+ E19A 32 00 E0    >                            ld		(varL2_BANK_SELECTED),a	; save selected bank number 0
 211+ E19D 65                                       ld      h,l                             ; fast subtract 256, just clear bit
 212+ E19E C9                                       ret
 213+ E19F
 214+ E19F              ; takes current bank saved in varL2_BANK_SELECTED, increments it cycling around and selects
 215+ E19F              ; returns h with 0 for adjusted column number
 216+ E19F              ; note this is for a temp bank switch e.g. printing a character so does not load the varL2 values
 217+ E19F 3A 00 E0     asm_l2_320_next_bank:       ld      a,(varL2_BANK_SELECTED)
 218+ E1A2 3C                                       inc     a
 219+ E1A3 FE 05                                    cp      5
 220+ E1A5 C2 AA E1                                 jp      nz,.bankSelected
 221+ E1A8              .cycleToZero:               ZeroA
 221+ E1A8 AF          >                        xor a
 222+ E1A9 67                                       ld      h,a
 223+ E1AA 32 00 E0     .bankSelected:              ld      (varL2_BANK_SELECTED),a         ; mark new bank
 224+ E1AD A7                                       and     a
 225+ E1AE CA 0D E1                                 jp      z,asm_l2_320_col_bank_select.Bank1
 226+ E1B1 3D           .testBank2:                 dec     a
 227+ E1B2 CA 27 E1                                 jp      z,asm_l2_320_col_bank_select.Bank2
 228+ E1B5 3D           .testBank3:                 dec     a
 229+ E1B6 CA 46 E1                                 jp      z,asm_l2_320_col_bank_select.Bank3
 230+ E1B9 3D           .testBank4:                 dec     a
 231+ E1BA CA 65 E1                                 jp      z,asm_l2_320_col_bank_select.Bank4
 232+ E1BD C3 84 E1     .testBank5:                 jp      asm_l2_320_col_bank_select.Bank5
 233+ E1C0
 234+ E1C0              ; takes current bank saved in varL2_BANK_SELECTED, increments it cycling around and selects
 235+ E1C0              ; note this is for a temp bank switch e.g. printing a character so does not load the varL2 values
 236+ E1C0 3A 00 E0     asm_l2_320_next_bank_noSv:  ld      a,(varL2_BANK_SELECTED)
 237+ E1C3 3C                                       inc     a
 238+ E1C4 FE 05                                    cp      5
 239+ E1C6 C2 CA E1                                 jp      nz,.bankSelected
 240+ E1C9              .cycleToZero:               ZeroA
 240+ E1C9 AF          >                        xor a
 241+ E1CA A7           .bankSelected:              and     a
 242+ E1CB CA EC E1                                 jp      z,.Bank1
 243+ E1CE 3D           .testBank2:                 dec     a
 244+ E1CF CA FB E1                                 jp      z,.Bank2
 245+ E1D2 3D           .testBank3:                 dec     a
 246+ E1D3 CA 0A E2                                 jp      z,.Bank3
 247+ E1D6 3D           .testBank4:                 dec     a
 248+ E1D7 CA 19 E2                                 jp      z,.Bank4
 249+ E1DA 3D           .testBank5:                 dec     a
 250+ E1DB 3A 02 E0     .Bank5:                     ld      a,(varL2_BUFFER_MODE)
 251+ E1DE F6 83                                    or		LAYER2_VISIBLE_MASK  |  LAYER2_WRITE_ENABLE_MASK | LAYER2_SHIFTED_SCREEN_BOTTOM
 252+ E1E0 01 3B 12                                 ld 		bc, IO_LAYER2_PORT
 253+ E1E3 ED 79                                    out 	(c),a
 254+ E1E5 3E 12                                    ld      a,%00010010
 255+ E1E7 ED 79                                    out 	(c),a
 256+ E1E9 3E 04                                    ld      a,4						; set a to 0
 257+ E1EB C9                                       ret
 258+ E1EC 3A 02 E0     .Bank1:                     ld      a,(varL2_BUFFER_MODE)
 259+ E1EF F6 03                                    or		LAYER2_VISIBLE_MASK  |  LAYER2_WRITE_ENABLE_MASK | LAYER2_SHIFTED_SCREEN_TOP
 260+ E1F1 01 3B 12                                 ld 		bc, IO_LAYER2_PORT
 261+ E1F4 ED 79                                    out 	(c),a
 262+ E1F6 3E 10                                    ld      a,%00010000
 263+ E1F8 ED 79                                    out 	(c),a
 264+ E1FA C9                                       ret
 265+ E1FB 3A 02 E0     .Bank2:                     ld      a,(varL2_BUFFER_MODE)
 266+ E1FE F6 43                                    or		LAYER2_VISIBLE_MASK  |  LAYER2_WRITE_ENABLE_MASK | LAYER2_SHIFTED_SCREEN_MIDDLE
 267+ E200 01 3B 12                                 ld 		bc, IO_LAYER2_PORT
 268+ E203 ED 79                                    out 	(c),a
 269+ E205 3E 10                                    ld      a,%00010000
 270+ E207 ED 79                                    out 	(c),a
 271+ E209 C9                                       ret
 272+ E20A 3A 02 E0     .Bank3:                     ld      a,(varL2_BUFFER_MODE)
 273+ E20D F6 83                                    or		LAYER2_VISIBLE_MASK  |  LAYER2_WRITE_ENABLE_MASK | LAYER2_SHIFTED_SCREEN_BOTTOM
 274+ E20F 01 3B 12                                 ld 		bc, IO_LAYER2_PORT
 275+ E212 ED 79                                    out 	(c),a
 276+ E214 3E 10                                    ld      a,%00010000
 277+ E216 ED 79                                    out 	(c),a
 278+ E218 C9                                       ret
 279+ E219 3A 02 E0     .Bank4:                     ld      a,(varL2_BUFFER_MODE)
 280+ E21C F6 83                                    or		LAYER2_VISIBLE_MASK  |  LAYER2_WRITE_ENABLE_MASK | LAYER2_SHIFTED_SCREEN_BOTTOM
 281+ E21E 01 3B 12                                 ld 		bc, IO_LAYER2_PORT
 282+ E221 ED 79                                    out 	(c),a
 283+ E223 3E 11                                    ld      a,%00010001
 284+ E225 ED 79                                    out 	(c),a
 285+ E227 C9                                       ret
 286+ E228
 287+ E228
 288+ E228
 289+ E228
# file closed: ./Layer2Graphics/layer2_bank_select.asm
 792  E228                  INCLUDE "./Layer2Graphics/layer2_cls.asm"
# file opened: ./Layer2Graphics/layer2_cls.asm
   1+ E228
   2+ E228 00           l2_cls_byte	            DB 0
   3+ E229              ; ">DMA Command BLOCK"
   4+ E229
   5+ E229 83 C3 C7 CB  l2_fill                 DB DMA_DISABLE,  DMA_RESET, DMA_RESET_PORT_A_TIMING, DMA_RESET_PORT_B_TIMING ,DMA_WRO_BLOCK_PORTA_A2B_XFR
   5+ E22D 7D
   6+ E22E 28 E2        l2_fill_astrt           DW l2_cls_byte
   7+ E230 00 40        l2_fill_length          DB $00,$40
   8+ E232 24 10 AD                             DB DMA_WR1_P1FIXED_MEMORY ,DMA_WR2_P2INC_MEMORY ,DMA_WR4_CONT_MODE
   9+ E235 00 00        l2_fill_bstrt           DB $00,$00
  10+ E237 82 CF B3 87                          DB DMA_STOP_AT_END, DMA_LOAD, DMA_FORCE_READY, DMA_ENABLE
  11+ E23B              l2_fill_cmd_len	        EQU $ - l2_fill
  12+ E23B
  13+ E23B 83 C3 C7 CB  l2_fill_burst           DB DMA_DISABLE,  DMA_RESET, DMA_RESET_PORT_A_TIMING, DMA_RESET_PORT_B_TIMING ,DMA_WRO_BLOCK_PORTA_A2B_XFR
  13+ E23F 7D
  14+ E240 28 E2        .l2_fill_astrt          DW l2_cls_byte
  15+ E242 00 40        .l2_fill_length         DB $00,$40
  16+ E244 24 10 CD                             DB DMA_WR1_P1FIXED_MEMORY ,DMA_WR2_P2INC_MEMORY ,DMA_WR4_BURST_MODE
  17+ E247 00 00        .l2_fill_bstrt          DB $00,$00
  18+ E249 82 CF B3 87                          DB DMA_STOP_AT_END, DMA_LOAD, DMA_FORCE_READY, DMA_ENABLE
  19+ E24D              l2_fill_burst_cmd_len   EQU $ - l2_fill_burst
  20+ E24D
  21+ E24D              ; ">l2_cls_dma_bank sets a bank to"
  22+ E24D              l2_cls_dma_bank:
  23+ E24D 32 28 E2     .set_colour:            ld (l2_cls_byte),a
  24+ E250 21 29 E2     .write_dma:             ld hl, l2_fill
  25+ E253 06 12                                ld b, l2_fill_cmd_len
  26+ E255 0E 6B                                ld	c,IO_DATAGEAR_DMA_PORT
  27+ E257 ED B3                                otir
  28+ E259 C9                                   ret
  29+ E25A
  30+ E25A              ; ">l2_cls_dma_bank sets a bank to"
  31+ E25A              l2_cls_dma_bank_burst:
  32+ E25A 32 28 E2     .set_colour:            ld (l2_cls_byte),a
  33+ E25D 21 3B E2     .write_dma:             ld hl, l2_fill_burst
  34+ E260 06 12                                ld b, l2_fill_burst_cmd_len
  35+ E262 0E 6B                                ld	c,IO_DATAGEAR_DMA_PORT
  36+ E264 ED B3                                otir
  37+ E266 C9                                   ret
  38+ E267
  39+ E267 3E 00        l2_set_color_upper2:    ld      a,0
  40+ E269 CD 78 E0                             call asm_l2_row_bank_select
  41+ E26C 3A 28 E2                             ld      a,(l2_cls_byte)
  42+ E26F CD 4D E2                             call l2_cls_dma_bank
  43+ E272 3E 40                                ld a,64								; pretend we are plotting pixel on row 64 to force mid selection
  44+ E274 CD 78 E0                             call asm_l2_row_bank_select
  45+ E277 3A 28 E2                             ld      a,(l2_cls_byte)
  46+ E27A CD 4D E2                             call l2_cls_dma_bank
  47+ E27D C9                                   ret
  48+ E27E
  49+ E27E
  50+ E27E              l2_cls_upper_two_thirds:;ld a,0								; pretend we are plotting pixel on row 0 to force top selection
  51+ E27E                                      asm_l2_bank_0_macro ; call asm_l2_row_bank_select
  51+ E27E 3A 02 E0    >                            ld      a,(varL2_BUFFER_MODE)
  51+ E281 F6 03       >                            or		LAYER2_VISIBLE_MASK  |  LAYER2_WRITE_ENABLE_MASK | LAYER2_SHIFTED_SCREEN_TOP
  51+ E283 32 04 E0    >                            ld      (varL2_SAVED_SELECT),a  ; save selected option
  51+ E286 01 3B 12    >                            ld 		bc, IO_LAYER2_PORT
  51+ E289 ED 79       >                            out 	(c),a
  51+ E28B 3E 10       >                            ld      a,%00010000             ; write bit 4 set so we can force a bank offset of 0 from top bank
  51+ E28D 32 05 E0    >                            ld      (varL2_SAVED_OFFSET),a
  51+ E290 ED 79       >                            out 	(c),a
  51+ E292             >                            ZeroA						; set a to 0
  51+ E292 AF          >                        xor a
  51+ E293 32 00 E0    >                            ld		(varL2_BANK_SELECTED),a	; save selected bank number 0
  52+ E296 3E E3                                ld 	a,COLOUR_TRANSPARENT
  53+ E298 CD 4D E2                             call l2_cls_dma_bank
  54+ E29B                                      ;ld a,64								; pretend we are plotting pixel on row 64 to force mid selection
  55+ E29B                                      asm_l2_bank_1_macro ;call asm_l2_row_bank_select
  55+ E29B 3A 02 E0    >                            ld      a,(varL2_BUFFER_MODE)
  55+ E29E F6 43       >                            or		LAYER2_VISIBLE_MASK  |  LAYER2_WRITE_ENABLE_MASK | LAYER2_SHIFTED_SCREEN_MIDDLE
  55+ E2A0 32 04 E0    >                            ld      (varL2_SAVED_SELECT),a  ; save selected option
  55+ E2A3 01 3B 12    >                            ld 		bc, IO_LAYER2_PORT
  55+ E2A6 ED 79       >                            out 	(c),a
  55+ E2A8 3E 10       >                            ld      a,%00010000             ; write bit 4 set so we can force a bank offset of 0 from middle bank
  55+ E2AA 32 05 E0    >                            ld      (varL2_SAVED_OFFSET),a
  55+ E2AD ED 79       >                            out 	(c),a
  55+ E2AF 3E 01       >                            ld      a,1						; set a to 0
  55+ E2B1 32 00 E0    >                            ld		(varL2_BANK_SELECTED),a	; save selected bank number 0
  56+ E2B4 3E E3                                ld 	a,COLOUR_TRANSPARENT
  57+ E2B6 CD 4D E2                             call l2_cls_dma_bank
  58+ E2B9 C9                                   ret
  59+ E2BA
  60+ E2BA              l2_cls_upper_two_thirds_burst:;ld a,0								; pretend we are plotting pixel on row 0 to force top selection
  61+ E2BA                                      asm_l2_bank_0_macro ; call asm_l2_row_bank_select
  61+ E2BA 3A 02 E0    >                            ld      a,(varL2_BUFFER_MODE)
  61+ E2BD F6 03       >                            or		LAYER2_VISIBLE_MASK  |  LAYER2_WRITE_ENABLE_MASK | LAYER2_SHIFTED_SCREEN_TOP
  61+ E2BF 32 04 E0    >                            ld      (varL2_SAVED_SELECT),a  ; save selected option
  61+ E2C2 01 3B 12    >                            ld 		bc, IO_LAYER2_PORT
  61+ E2C5 ED 79       >                            out 	(c),a
  61+ E2C7 3E 10       >                            ld      a,%00010000             ; write bit 4 set so we can force a bank offset of 0 from top bank
  61+ E2C9 32 05 E0    >                            ld      (varL2_SAVED_OFFSET),a
  61+ E2CC ED 79       >                            out 	(c),a
  61+ E2CE             >                            ZeroA						; set a to 0
  61+ E2CE AF          >                        xor a
  61+ E2CF 32 00 E0    >                            ld		(varL2_BANK_SELECTED),a	; save selected bank number 0
  62+ E2D2 3E E3                                ld 	a,COLOUR_TRANSPARENT
  63+ E2D4 CD 5A E2                             call l2_cls_dma_bank_burst
  64+ E2D7                                      ;ld a,64								; pretend we are plotting pixel on row 64 to force mid selection
  65+ E2D7                                      asm_l2_bank_1_macro ;call asm_l2_row_bank_select
  65+ E2D7 3A 02 E0    >                            ld      a,(varL2_BUFFER_MODE)
  65+ E2DA F6 43       >                            or		LAYER2_VISIBLE_MASK  |  LAYER2_WRITE_ENABLE_MASK | LAYER2_SHIFTED_SCREEN_MIDDLE
  65+ E2DC 32 04 E0    >                            ld      (varL2_SAVED_SELECT),a  ; save selected option
  65+ E2DF 01 3B 12    >                            ld 		bc, IO_LAYER2_PORT
  65+ E2E2 ED 79       >                            out 	(c),a
  65+ E2E4 3E 10       >                            ld      a,%00010000             ; write bit 4 set so we can force a bank offset of 0 from middle bank
  65+ E2E6 32 05 E0    >                            ld      (varL2_SAVED_OFFSET),a
  65+ E2E9 ED 79       >                            out 	(c),a
  65+ E2EB 3E 01       >                            ld      a,1						; set a to 0
  65+ E2ED 32 00 E0    >                            ld		(varL2_BANK_SELECTED),a	; save selected bank number 0
  66+ E2F0 3E E3                                ld 	a,COLOUR_TRANSPARENT
  67+ E2F2 CD 5A E2                             call l2_cls_dma_bank_burst
  68+ E2F5 C9                                   ret
  69+ E2F6
  70+ E2F6              l2_cls_lower_third:     ;ld a,128							; pretend we are plotting pixel on row 64 to force mid selection
  71+ E2F6                                      asm_l2_bank_2_macro; call asm_l2_row_bank_select
  71+ E2F6 3A 02 E0    >                            ld      a,(varL2_BUFFER_MODE)
  71+ E2F9 F6 83       >                            or		LAYER2_VISIBLE_MASK  |  LAYER2_WRITE_ENABLE_MASK | LAYER2_SHIFTED_SCREEN_BOTTOM
  71+ E2FB 32 04 E0    >                            ld      (varL2_SAVED_SELECT),a  ; save selected option
  71+ E2FE 01 3B 12    >                            ld 		bc, IO_LAYER2_PORT
  71+ E301 ED 79       >                            out 	(c),a
  71+ E303 3E 10       >                            ld      a,%00010000             ; write bit 4 set so we can force a bank offset of 0 from bottom bank
  71+ E305 32 05 E0    >                            ld      (varL2_SAVED_OFFSET),a
  71+ E308 ED 79       >                            out 	(c),a
  71+ E30A 3E 02       >                            ld      a,2						; set a to 0
  71+ E30C 32 00 E0    >                            ld		(varL2_BANK_SELECTED),a	; save selected bank number 0
  72+ E30F 3E E3                                ld 	a,COLOUR_TRANSPARENT
  73+ E311 CD 4D E2                             call l2_cls_dma_bank
  74+ E314 C9                                   ret
  75+ E315
  76+ E315              l2_cls_lower_third_burst:asm_l2_bank_2_macro; call asm_l2_row_bank_select
  76+ E315 3A 02 E0    >                            ld      a,(varL2_BUFFER_MODE)
  76+ E318 F6 83       >                            or		LAYER2_VISIBLE_MASK  |  LAYER2_WRITE_ENABLE_MASK | LAYER2_SHIFTED_SCREEN_BOTTOM
  76+ E31A 32 04 E0    >                            ld      (varL2_SAVED_SELECT),a  ; save selected option
  76+ E31D 01 3B 12    >                            ld 		bc, IO_LAYER2_PORT
  76+ E320 ED 79       >                            out 	(c),a
  76+ E322 3E 10       >                            ld      a,%00010000             ; write bit 4 set so we can force a bank offset of 0 from bottom bank
  76+ E324 32 05 E0    >                            ld      (varL2_SAVED_OFFSET),a
  76+ E327 ED 79       >                            out 	(c),a
  76+ E329 3E 02       >                            ld      a,2						; set a to 0
  76+ E32B 32 00 E0    >                            ld		(varL2_BANK_SELECTED),a	; save selected bank number 0
  77+ E32E 3E E3                                ld 	a,COLOUR_TRANSPARENT
  78+ E330 CD 5A E2                             call l2_cls_dma_bank_burst
  79+ E333 C9                                   ret
  80+ E334
  81+ E334
  82+ E334 CD BA E2     l2_cls_burst:           call l2_cls_upper_two_thirds_burst
  83+ E337 C3 15 E3                             jp   l2_cls_lower_third_burst
  84+ E33A
  85+ E33A
  86+ E33A CD 7E E2     l2_cls:                 call l2_cls_upper_two_thirds
  87+ E33D C3 F6 E2                             jp   l2_cls_lower_third
  88+ E340              	    IFDEF L2_640_SUPPORT
  89+ E340 ~            l2_640_cls:
  90+ E340                      ENDIF
  91+ E340 CD 7E E2     l2_320_cls:             call l2_cls_upper_two_thirds
  92+ E343 CD F6 E2                             call   l2_cls_lower_third
  93+ E346                                      ; need to clear banks 4 and 5 via normal paging, say into C000 with interrupts disabled
  94+ E346                                      asm_l2_bank_3_macro
  94+ E346 3A 02 E0    >                            ld      a,(varL2_BUFFER_MODE)
  94+ E349 F6 83       >                            or		LAYER2_VISIBLE_MASK  |  LAYER2_WRITE_ENABLE_MASK | LAYER2_SHIFTED_SCREEN_BOTTOM
  94+ E34B 32 04 E0    >                            ld      (varL2_SAVED_SELECT),a  ; save selected option
  94+ E34E 01 3B 12    >                            ld 		bc, IO_LAYER2_PORT
  94+ E351 ED 79       >                            out 	(c),a
  94+ E353 3E 11       >                            ld      a,%00010001             ; write bit 4 set so we can force a bank offset of 1 from bottom bank
  94+ E355 32 05 E0    >                            ld      (varL2_SAVED_OFFSET),a
  94+ E358 ED 79       >                            out 	(c),a
  94+ E35A 3E 03       >                            ld      a,3						; set a to 0
  94+ E35C 32 00 E0    >                            ld		(varL2_BANK_SELECTED),a	; save selected bank number 0
  95+ E35F 3E E3                                ld 	a,COLOUR_TRANSPARENT
  96+ E361 CD 4D E2                             call l2_cls_dma_bank
  97+ E364                                      asm_l2_bank_4_macro
  97+ E364 3A 02 E0    >                            ld      a,(varL2_BUFFER_MODE)
  97+ E367 F6 83       >                            or		LAYER2_VISIBLE_MASK  |  LAYER2_WRITE_ENABLE_MASK | LAYER2_SHIFTED_SCREEN_BOTTOM
  97+ E369 01 3B 12    >                            ld 		bc, IO_LAYER2_PORT
  97+ E36C 32 04 E0    >                            ld      (varL2_SAVED_SELECT),a  ; save selected option
  97+ E36F ED 79       >                            out 	(c),a
  97+ E371 3E 12       >                            ld      a,%00010010             ; write bit 4 set so we can force a bank offset of 2 from bottom bank
  97+ E373 32 05 E0    >                            ld      (varL2_SAVED_OFFSET),a
  97+ E376 ED 79       >                            out 	(c),a
  97+ E378 3E 04       >                            ld      a,4						; set a to 0
  97+ E37A 32 00 E0    >                            ld		(varL2_BANK_SELECTED),a	; save selected bank number 0
  98+ E37D 3E E3                                ld 	a,COLOUR_TRANSPARENT
  99+ E37F CD 4D E2                             call l2_cls_dma_bank
 100+ E382
 101+ E382 C9                                   ret
 102+ E383
# file closed: ./Layer2Graphics/layer2_cls.asm
 793  E383                  INCLUDE "./Layer2Graphics/layer2_initialise.asm"
# file opened: ./Layer2Graphics/layer2_initialise.asm
   1+ E383
   2+ E383 00 00        l2_graphic_mode         DW          0
   3+ E385
   4+ E385 ED 91 70 00  l2_initialise:          nextreg     LAYER_2_CONTROL_REGISTER,           %00000000               ; 256x192x8bpp
   5+ E389 ED 91 1C 00                          nextreg     CLIP_WINDOW_CONTROL_REGISTER,       0
   6+ E38D ED 91 18 00                          nextreg     CLIP_WINDOW_LAYER2_REGISTER,        0
   7+ E391 ED 91 18 FF                          nextreg     CLIP_WINDOW_LAYER2_REGISTER,        255
   8+ E395 ED 91 18 00                          nextreg     CLIP_WINDOW_LAYER2_REGISTER,        0
   9+ E399 ED 91 18 C0                          nextreg     CLIP_WINDOW_LAYER2_REGISTER,        192
  10+ E39D ED 91 12 08                          nextreg		LAYER2_RAM_PAGE_REGISTER,          	LAYER2_SCREEN_BANK1
  11+ E3A1 ED 91 13 0D                          nextreg		LAYER2_RAM_SHADOW_REGISTER,     	LAYER2_SHADOW_BANK1
  12+ E3A5 ED 91 14 E3                          nextreg		TRANSPARENCY_COLOUR_REGISTER, 		COLOUR_TRANSPARENT
  13+ E3A9                                      ZeroA
  13+ E3A9 AF          >                        xor a
  14+ E3AA 32 83 E3                             ld          (l2_graphic_mode),a
  15+ E3AD                                      DoubleBufferIfPossible
  15+ E3AD             >                        IFDEF DOUBLEBUFFER
  15+ E3AD             >                            MMUSelectLayer2
  15+ E3AD ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
  15+ E3B1 CD 3A E3    >                            call  l2_cls
  15+ E3B4 CD 04 E4    >                            call  l2_flip_buffers
  15+ E3B7             >                        ENDIF
  16+ E3B7                                      DoubleBufferIfPossible
  16+ E3B7             >                        IFDEF DOUBLEBUFFER
  16+ E3B7             >                            MMUSelectLayer2
  16+ E3B7 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
  16+ E3BB CD 3A E3    >                            call  l2_cls
  16+ E3BE CD 04 E4    >                            call  l2_flip_buffers
  16+ E3C1             >                        ENDIF
  17+ E3C1 CD 78 E0                             call        asm_l2_row_bank_select
  18+ E3C4 C9                                   ret
  19+ E3C5
  20+ E3C5
  21+ E3C5 ED 91 70 10  l2_320_initialise:      nextreg     LAYER_2_CONTROL_REGISTER,           %00010000               ; 320x256x8bpp
  22+ E3C9 ED 91 1C 00                          nextreg     CLIP_WINDOW_CONTROL_REGISTER,       0
  23+ E3CD ED 91 18 00                          nextreg     CLIP_WINDOW_LAYER2_REGISTER,        0
  24+ E3D1 ED 91 18 9F                          nextreg     CLIP_WINDOW_LAYER2_REGISTER,        159
  25+ E3D5 ED 91 18 00                          nextreg     CLIP_WINDOW_LAYER2_REGISTER,        0
  26+ E3D9 ED 91 18 FF                          nextreg     CLIP_WINDOW_LAYER2_REGISTER,        255
  27+ E3DD ED 91 12 08                          nextreg		LAYER2_RAM_PAGE_REGISTER,          	LAYER2_SCREEN_BANK1
  28+ E3E1 ED 91 13 0D                          nextreg		LAYER2_RAM_SHADOW_REGISTER,     	LAYER2_SHADOW_BANK1
  29+ E3E5 ED 91 14 E3                          nextreg		TRANSPARENCY_COLOUR_REGISTER, 		COLOUR_TRANSPARENT
  30+ E3E9 C9                                   ret
  31+ E3EA 3E 01                                ld          a,1
  32+ E3EC 32 83 E3                             ld          (l2_graphic_mode),a
  33+ E3EF                                      DoubleBuffer320IfPossible
  33+ E3EF             >                        IFDEF DOUBLEBUFFER
  33+ E3EF             >                            MMUSelectLayer2
  33+ E3EF ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
  33+ E3F3 CD 40 E3    >                            call  l2_320_cls
  33+ E3F6 CD 04 E4    >                            call  l2_flip_buffers
  33+ E3F9             >                        ENDIF
  34+ E3F9                                      DoubleBuffer320IfPossible
  34+ E3F9             >                        IFDEF DOUBLEBUFFER
  34+ E3F9             >                            MMUSelectLayer2
  34+ E3F9 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
  34+ E3FD CD 40 E3    >                            call  l2_320_cls
  34+ E400 CD 04 E4    >                            call  l2_flip_buffers
  34+ E403             >                        ENDIF
  35+ E403 C9                                   ret
  36+ E404                  IFDEF L2_640_SUPPORT
  37+ E404 ~            l2_640_initialise:      nextreg     LAYER_2_CONTROL_REGISTER,           %00100000               ; 320x256x8bpp
  38+ E404 ~                                    nextreg     CLIP_WINDOW_CONTROL_REGISTER,       0
  39+ E404 ~                                    nextreg     CLIP_WINDOW_LAYER2_REGISTER,        0
  40+ E404 ~                                    nextreg     CLIP_WINDOW_LAYER2_REGISTER,        159
  41+ E404 ~                                    nextreg     CLIP_WINDOW_LAYER2_REGISTER,        0
  42+ E404 ~                                    nextreg     CLIP_WINDOW_LAYER2_REGISTER,        255
  43+ E404 ~                                    nextreg		LAYER2_RAM_PAGE_REGISTER,          	LAYER2_SCREEN_BANK1
  44+ E404 ~                                    nextreg		LAYER2_RAM_SHADOW_REGISTER,     	LAYER2_SHADOW_BANK1
  45+ E404 ~                                    nextreg		TRANSPARENCY_COLOUR_REGISTER, 		COLOUR_TRANSPARENT
  46+ E404 ~                                    ld          a,2
  47+ E404 ~                                    ld          (l2_graphic_mode),a
  48+ E404 ~                                    DoubleBuffer640IfPossible
  49+ E404 ~                                    DoubleBuffer640IfPossible
  50+ E404 ~                                    call        asm_l2_640_col_bank_select
  51+ E404 ~                                    ret
  52+ E404                  ENDIF
# file closed: ./Layer2Graphics/layer2_initialise.asm
 794  E404                  INCLUDE "./Layer2Graphics/l2_flip_buffers.asm"
# file opened: ./Layer2Graphics/l2_flip_buffers.asm
   1+ E404              l2_flip_buffers:        GetNextReg LAYER2_RAM_PAGE_REGISTER
   1+ E404 01 3B 24    >            ld bc,$243B
   1+ E407 3E 12       >            ld a,LAYER2_RAM_PAGE_REGISTER
   1+ E409 ED 79       >            out (c),a
   1+ E40B 04          >            inc b
   1+ E40C ED 78       >            in a,(c)
   2+ E40E 57                                   ld      d,a
   3+ E40F                                      GetNextReg LAYER2_RAM_SHADOW_REGISTER
   3+ E40F 01 3B 24    >            ld bc,$243B
   3+ E412 3E 13       >            ld a,LAYER2_RAM_SHADOW_REGISTER
   3+ E414 ED 79       >            out (c),a
   3+ E416 04          >            inc b
   3+ E417 ED 78       >            in a,(c)
   4+ E419 5F                                   ld      e,a
   5+ E41A ED 92 12                             nextreg LAYER2_RAM_PAGE_REGISTER, a
   6+ E41D 7A                                   ld      a,d
   7+ E41E ED 92 13                             nextreg LAYER2_RAM_SHADOW_REGISTER, a
   8+ E421 C9                                   ret
   9+ E422
# file closed: ./Layer2Graphics/l2_flip_buffers.asm
 795  E422                  INCLUDE "./Layer2Graphics/layer2_plot_pixel.asm"
# file opened: ./Layer2Graphics/layer2_plot_pixel.asm
   1+ E422
   2+ E422 DF           line_gfx_colour db $DF
   3+ E423
   4+ E423              l2_plot_macro:          MACRO
   5+ E423 ~                                    ld      a,b
   6+ E423 ~                                    JumpIfAGTENusng 192 ,.NoPlot
   7+ E423 ~                                    ld      l,c
   8+ E423 ~                                    call    asm_l2_row_bank_select
   9+ E423 ~                                    ld      h,a
  10+ E423 ~                                    ld      a,(line_gfx_colour)
  11+ E423 ~                                    ld      (hl),a
  12+ E423 ~            .NoPlot:
  13+ E423                                      ENDM
  14+ E423
  15+ E423
  16+ E423              ; ">l2_plot_pixel b= row number, c = column number, a = pixel col"
  17+ E423 F5           l2_plot_pixel:          push    af
  18+ E424 78                                   ld      a,b
  19+ E425              l2_pp_row_valid:        JumpIfAGTENusng ScreenHeight,l2_pp_dont_plot
  19+ E425 FE C0       >                        cp     ScreenHeight
  19+ E427 D2 35 E4    >                        jp		nc,l2_pp_dont_plot
  20+ E42A C5                                   push    bc								; bank select destroys bc so need to save it
  21+ E42B                                  ;	ld      a,b
  22+ E42B CD 78 E0                             call    asm_l2_row_bank_select
  23+ E42E C1                                   pop     bc
  24+ E42F 47                                   ld      b,a
  25+ E430 60                                   ld      h,b								; hl now holds ram address after bank select
  26+ E431 69                                   ld      l,c
  27+ E432 F1                                   pop     af								; a = colour to plott
  28+ E433 77                                   ld      (hl),a
  29+ E434 C9                                   ret
  30+ E435 F1           l2_pp_dont_plot:        pop     af
  31+ E436 C9                                   ret
  32+ E437
  33+ E437              ; ">l2_plot_pixel d= row number, hl = column number, e = pixel col"
  34+ E437 7C           l2_plot_pixel_320:      ld      a,h
  35+ E438 A7                                   and     a                               ; if h = 0 then must be < 256 so OK
  36+ E439 CA 45 E4                             jp      z,.DoneCheck
  37+ E43C FE 01                                cp      1                               ; if h <> 1 then must be > 320
  38+ E43E 20 0B                                jr      nz,.DontPlot                    ;
  39+ E440 7D                                   ld      a,l                             ; so now its >= 256
  40+ E441 E6 C0                                and     %11000000                       ; if its 7 or 6 set then > 319
  41+ E443 20 06                                jr      nz,.DontPlot
  42+ E445 CD F0 E0     .DoneCheck:             call    asm_l2_320_col_bank_select      ; adjust hl for hl address which is now in l only
  43+ E448 6A                                   ld      l,d                             ; low byte is row from d
  44+ E449 7B                                   ld      a,e                             ; a= color
  45+ E44A 77                                   ld      (hl),a
  46+ E44B C9           .DontPlot:              ret
  47+ E44C
  48+ E44C              ; ">l2_plot_pixel d= row number, hl = column number"
  49+ E44C              ; as per plot but just selects address and adjusts hl to target address column in h
  50+ E44C 7C           l2_target_address_320:  ld      a,h
  51+ E44D A7                                   and     a                               ; if h = 0 then must be < 256 so OK
  52+ E44E CA 5A E4                             jp      z,.DoneCheck
  53+ E451 FE 01                                cp      1                               ; if h <> 1 then must be > 320
  54+ E453 20 09                                jr      nz,.DontPlot                    ;
  55+ E455 7D                                   ld      a,l                             ; so now its >= 256
  56+ E456 E6 C0                                and     %11000000                       ; if its 7 or 6 set then > 319
  57+ E458 20 04                                jr      nz,.DontPlot
  58+ E45A CD F0 E0     .DoneCheck:             call    asm_l2_320_col_bank_select      ; adjust hl for hl address which is now in l only
  59+ E45D 6A                                   ld      l,d                             ; low byte is row from d
  60+ E45E C9           .DontPlot:              ret
  61+ E45F
  62+ E45F CD F0 E0     l2_plot_pixel_320_no_check:   call    asm_l2_320_col_bank_select      ; adjust hl for column > h
  63+ E462 6A                                   ld      l,d                             ; as they are horizontal now
  64+ E463 7B                                   ld      a,e
  65+ E464 77                                   ld      (hl),a
  66+ E465 C9                                   ret
  67+ E466
  68+ E466              ; y aixs bounds check must have been done before calling this
  69+ E466 F5           l2_plot_pixel_no_check: push    af
  70+ E467 C5                                   push    bc								; bank select destroys bc so need to save it
  71+ E468 78                                   ld      a,b                             ; determine target bank
  72+ E469 CD 78 E0                             call    asm_l2_row_bank_select
  73+ E46C C1                                   pop     bc
  74+ E46D 47                                   ld      b,a                             ; b now adjusted for bank, c = column
  75+ E46E 60 69                                ld      hl,bc                           ; hl now holds ram address after bank select
  76+ E470 F1                                   pop     af								; a = colour to plott
  77+ E471 77                                   ld      (hl),a                          ; poke to ram
  78+ E472 C9                                   ret
  79+ E473
  80+ E473              ; ">l2_plot_pixel_no_bank b= row number, c = column number, a = pixel col"
  81+ E473              ; This version assues pixel is in the same bank as previously plotted ones. optimised for horizontal lines
  82+ E473 E5           l2_plot_pixel_no_bank:  push 	hl
  83+ E474 60                                   ld 		h,b								; hl now holds ram address after bank select
  84+ E475 69                                   ld 		l,c
  85+ E476 77                                   ld 		(hl),a
  86+ E477 E1                                   pop		hl
  87+ E478 C9                                   ret
  88+ E479
  89+ E479              ; ">l2_plot_pixel_no_bank d= row number, h = column number, a = pixel col"
  90+ E479              ; This version assues pixel is in the same bank as previously plotted ones. optimised for horizontal lines
  91+ E479              l2_plot_pixel_320_no_bank:
  92+ E479 6A                                   ld 		l,d
  93+ E47A 77                                   ld 		(hl),a
  94+ E47B C9                                   ret
  95+ E47C              ; The more simpler h col l row is just ld (hl),a so no need for a function
  96+ E47C
  97+ E47C
  98+ E47C F5           ShipPixel:              push    af
  99+ E47D 78                                   ld      a,b
 100+ E47E FE 7F                                cp      127
 101+ E480 D0                                   ret     nc
 102+ E481 F1                                   pop     af
 103+ E482 18 E2                                jr      l2_plot_pixel_no_check
 104+ E484                                      ;***Implicit ret due to jr
 105+ E484
 106+ E484              ; in bc = yx iyl = colour
 107+ E484 78           DebrisPixel:            ld      a,b
 108+ E485 FE 7F                                cp      127
 109+ E487 D0                                   ret     nc
 110+ E488 FD 7D                                ld      a, iyl
 111+ E48A 18 DA                                jr      l2_plot_pixel_no_check
 112+ E48C                                      ;***Implicit ret due to jr
 113+ E48C
 114+ E48C F5           l2_plot_pixel_y_test:   push	af
 115+ E48D 78                                   ld		a,b
 116+ E48E FE C0                                cp		192
 117+ E490 30 03                                jr		nc,.clearup
 118+ E492 F1                                   pop		af
 119+ E493 18 8E                                jr		l2_plot_pixel
 120+ E495 F1           .clearup:               pop		af
 121+ E496 C9                                   ret
 122+ E497
 123+ E497              l2_point_pixel_y_safe:	MACRO
 124+ E497 ~            						push	hl
 125+ E497 ~            						push	bc
 126+ E497 ~            						call	l2_plot_pixel
 127+ E497 ~            						pop		bc
 128+ E497 ~            						pop		hl
 129+ E497              						ENDM
 130+ E497
# file closed: ./Layer2Graphics/layer2_plot_pixel.asm
 796  E497                  INCLUDE "./Layer2Graphics/layer2_print_character.asm"
# file opened: ./Layer2Graphics/layer2_print_character.asm
   1+ E497
   2+ E497              ; "l2_print_chr_at, bc = col,row, d= character, e = colour"
   3+ E497              ; "Need a version that also prints absence of character"
   4+ E497
   5+ E497              ; Counts next word at de, uses hl for current pixel col and counting characters
   6+ E497              ; b = returned number of characters for word
   7+ E497 D5           L2LenWordAtDE:          push    de
   8+ E498 06 00                                ld      b,0
   9+ E49A 1A           .preCheck               ld      a,(de)                  ; check for null
  10+ E49B A7                                   and     a
  11+ E49C CA B2 E4                             jp      z,.CountDone
  12+ E49F FE 20                                cp      ' '                     ; check if its just one space
  13+ E4A1 CA B1 E4                             jp      z,.WhiteSpaceOnly
  14+ E4A4 04           .CountLoop:             inc     b                       ; ok we can move on 1 character
  15+ E4A5 13           .OKLength:              inc     de
  16+ E4A6 1A                                   ld      a,(de)                  ; get next character
  17+ E4A7 FE 00                                cp      0                       ; on first pass we will have done this
  18+ E4A9 28 07                                jr      z,.CountDone
  19+ E4AB FE 20                                cp      ' '
  20+ E4AD 28 03                                jr      z,.CountDone            ; If its whitespace we can also just exit
  21+ E4AF 18 F3                                jr      .CountLoop
  22+ E4B1 04           .WhiteSpaceOnly:        inc     b                       ; set b to 1 as it was 0 before this call
  23+ E4B2 D1           .CountDone:             pop     de
  24+ E4B3 C9                                   ret
  25+ E4B4
  26+ E4B4
  27+ E4B4 7A           l2_print_chr_at:        ld		a,d
  28+ E4B5 FE 20                                cp		32
  29+ E4B7 38 3F                                jr		c,.InvalidCharacter		; Must be between 32 and 127
  30+ E4B9 FE 7F                                cp		127
  31+ E4BB 30 3B                                jr		nc,.InvalidCharacter
  32+ E4BD 26 00        .ValidCharater:         ld		h,0
  33+ E4BF 6A                                   ld		l,d
  34+ E4C0 29                                   add		hl,hl						; * 2
  35+ E4C1 29                                   add		hl,hl						; * 4
  36+ E4C2 29                                   add		hl,hl						; * 8 to get byte address
  37+ E4C3 ED 34 00 3C                          add		hl,charactersetaddr			; hl = address of rom char
  38+ E4C7 04                                   inc		b							; start + 1 pixel x and y as we only print 7x7
  39+ E4C8 23                                   inc		hl							; skip first byte
  40+ E4C9 16 07                                ld		d,7
  41+ E4CB D5           .PrintCharLoop:         push	de
  42+ E4CC 7E                                   ld		a,(hl)
  43+ E4CD FE 00                                cp		0
  44+ E4CF 28 21                                jr		z,.NextRowNoBCPop
  45+ E4D1 C5           .PrintARow:             push	bc							; save row col
  46+ E4D2 16 07                                ld		d,7							; d is loop row number now
  47+ E4D4 0C           .PrintPixelLoop:	    inc		c							; we start at col 1 not 0 so can move inc here
  48+ E4D5 CB 27        .PrintTheRow:           sla		a							; scroll char 1 pixel as we read from bit 7
  49+ E4D7 F5                                   push	af							; save character byte
  50+ E4D8 CB 7F                                bit		7,a							; If left most pixel set then plot
  51+ E4DA 20 04                                jr		nz,.PixelToPrint
  52+ E4DC 3E E3        .NoPixelToPrint:        ld		a,$E3
  53+ E4DE 18 01                                jr		.HaveSetPixelColour
  54+ E4E0 7B           .PixelToPrint:          ld		a,e							; Get Colour
  55+ E4E1 E5           .HaveSetPixelColour		push	hl
  56+ E4E2              ;	push	bc						; at the moment we don't do paging on first plot so need to preserve BC
  57+ E4E2 F5           .BankOnFirstOnly:       push	af
  58+ E4E3 7A                                   ld		a,d
  59+ E4E4 FE 07                                cp		7
  60+ E4E6 28 11                                jr		z,.PlotWithBank
  61+ E4E8 F1           .PlotNoBank:            pop		af
  62+ E4E9 60                                   ld 		h,b								; hl now holds ram address after bank select
  63+ E4EA 69                                   ld 		l,c
  64+ E4EB 77                                   ld 		(hl),a
  65+ E4EC              .IterateLoop:	        ;	pop		bc
  66+ E4EC E1                                   pop		hl
  67+ E4ED F1                                   pop		af							; a= current byte shifted
  68+ E4EE 15                                   dec		d						 	; do dec after inc as we amy
  69+ E4EF 20 E3                                jr		nz,.PrintPixelLoop
  70+ E4F1 C1           .NextRow:               pop		bc							; Current Col Row
  71+ E4F2 D1           .NextRowNoBCPop:	    pop		de							; d= row loop
  72+ E4F3 04                                   inc		b							; Down 1 row
  73+ E4F4 23                                   inc		hl							; Next character byte
  74+ E4F5 15                                   dec		d							; 1 done now
  75+ E4F6 20 D3                                jr		nz,.PrintCharLoop
  76+ E4F8 C9           .InvalidCharacter:      ret
  77+ E4F9 F1           .PlotWithBank:          pop		af
  78+ E4FA CD 23 E4                             call	l2_plot_pixel				; This will shift bc to poke row
  79+ E4FD 18 ED                                jr		.IterateLoop
  80+ E4FF
  81+ E4FF              ; "l2_print_at bc= colrow, hl = addr of message, e = colour"
  82+ E4FF              ; "No error trapping, if there is no null is will just cycle on the line"
  83+ E4FF 7E           l2_print_at:            ld	a,(hl)							; Return if empty string
  84+ E500 FE 00                                cp	0
  85+ E502 C8                                   ret	z
  86+ E503 E5                                   push	hl
  87+ E504 D5                                   push	de
  88+ E505 C5                                   push	bc
  89+ E506 57                                   ld		d,a							; bc = pos, de = char and colour
  90+ E507 CD B4 E4                             call 	l2_print_chr_at
  91+ E50A C1                                   pop		bc
  92+ E50B D1                                   pop		de
  93+ E50C E1                                   pop		hl
  94+ E50D 08           .Move8Pixlestoright:	ex		af,af'
  95+ E50E 79                                   ld		a,c
  96+ E50F C6 08                                add		8
  97+ E511 4F                                   ld		c,a
  98+ E512 08                                   ex		af,af'
  99+ E513 23                                   inc		hl
 100+ E514 18 E9                                jr		l2_print_at					; Just loop until 0 found
 101+ E516
 102+ E516
 103+ E516              ; "l2_print_chr_at, bc = col,row, d= character, e = colour"
 104+ E516              ; "Need a version that also prints absence of character"
 105+ E516              ; removed blank line optimisation as we need spaces printed
 106+ E516 7A           l2_print_7chr_at:       ld		a,d
 107+ E517 FE 1F                                cp		31
 108+ E519 38 3D                                jr		c,.InvalidCharacter		; Must be between 32 and 127
 109+ E51B FE 7F                                cp		127
 110+ E51D 30 39                                jr		nc,.InvalidCharacter
 111+ E51F 26 00        .ValidCharater:         ld		h,0
 112+ E521 6A                                   ld		l,d
 113+ E522 29                                   add		hl,hl						; * 2
 114+ E523 29                                   add		hl,hl						; * 4
 115+ E524 29                                   add		hl,hl						; * 8 to get byte address
 116+ E525 ED 34 00 3C                          add		hl,charactersetaddr			; hl = address of rom char
 117+ E529 04                                   inc		b							; start + 1 pixel x and y as we only print 7x7
 118+ E52A 23                                   inc		hl							; skip first byte
 119+ E52B 16 07                                ld		d,7
 120+ E52D D5           .PrintCharLoop:         push	de
 121+ E52E 7E                                   ld		a,(hl)
 122+ E52F                                      ;cp		0
 123+ E52F                                      ;jr		z,.NextRowNoBCPop
 124+ E52F C5           .PrintARow:             push	bc							; save row col
 125+ E530 16 06                                ld		d,6							; d is loop row number now
 126+ E532 0C           .PrintPixelLoop:        inc		c							; we start at col 1 not 0 so can move inc here
 127+ E533 28 1C                                jr		z,.NextRow
 128+ E535 CB 27                                sla		a							; scroll char 1 pixel as we read from bit 7
 129+ E537 F5                                   push	af							; save character byte
 130+ E538 CB 7F                                bit		7,a							; If left most pixel set then plot
 131+ E53A 20 04                                jr		nz,.PixelToPrint
 132+ E53C 3E E3        .NoPixelToPrint:        ld		a,$E3
 133+ E53E 18 01                                jr		.HaveSetPixelColour
 134+ E540 7B           .PixelToPrint:          ld		a,e							; Get Colour
 135+ E541 E5           .HaveSetPixelColour		push	hl
 136+ E542                                      ;	push	bc							; at the moment we don't do paging on first plot so need to preserve BC
 137+ E542 F5           .BankOnFirstOnly:       push	af
 138+ E543 7A                                   ld		a,d
 139+ E544 FE 06                                cp		6
 140+ E546 28 11                                jr		z,.PlotWithBank
 141+ E548 F1           .PlotNoBank:            pop		af
 142+ E549 60                                   ld 		h,b								; hl now holds ram address after bank select
 143+ E54A 69                                   ld 		l,c
 144+ E54B 77                                   ld 		(hl),a
 145+ E54C              .IterateLoop:	        ;	pop		bc
 146+ E54C E1                                   pop		hl
 147+ E54D F1                                   pop		af							; a= current byte shifted
 148+ E54E 15                                   dec		d						 	; do dec after inc as we amy
 149+ E54F 20 E1                                jr		nz,.PrintPixelLoop
 150+ E551 C1           .NextRow:               pop		bc							; Current Col Row
 151+ E552 D1           .NextRowNoBCPop:	    pop		de							; d= row loop
 152+ E553 04                                   inc		b							; Down 1 row
 153+ E554 23                                   inc		hl							; Next character byte
 154+ E555 15                                   dec		d							; 1 done now
 155+ E556 20 D5                                jr		nz,.PrintCharLoop
 156+ E558 C9           .InvalidCharacter:      ret
 157+ E559 F1           .PlotWithBank:          pop		af
 158+ E55A CD 23 E4                             call	l2_plot_pixel				; This will shift bc to poke row
 159+ E55D 18 ED                                jr		.IterateLoop
 160+ E55F
 161+ E55F              ; "l2_print_7at bc= colrow, hl = addr of message, e = colour"
 162+ E55F              ; "No error trapping, if there is no null is will just cycle on the line"
 163+ E55F 7E           l2_print_7at:           ld	a,(hl)							; Return if empty string
 164+ E560 FE 00                                cp	0
 165+ E562 C8                                   ret	z
 166+ E563 E5                                   push	hl
 167+ E564 D5                                   push	de
 168+ E565 C5                                   push	bc
 169+ E566 57                                   ld		d,a							; bc = pos, de = char and colour
 170+ E567 CD 16 E5                             call 	l2_print_7chr_at
 171+ E56A C1                                   pop		bc
 172+ E56B D1                                   pop		de
 173+ E56C E1                                   pop		hl
 174+ E56D 08           .Move7Pixlestoright:	ex		af,af'
 175+ E56E 79                                   ld		a,c
 176+ E56F C6 07                                add		7
 177+ E571 4F                                   ld		c,a
 178+ E572 08                                   ex		af,af'
 179+ E573 23                                   inc		hl
 180+ E574 18 E9                                jr		l2_print_7at					; Just loop until 0 found
 181+ E576
 182+ E576
 183+ E576              ; "l2_print_7at b= row, hl = col de = addr of message, c = colour"
 184+ E576              ; "No error trapping, if there is no null is will just cycle on the line"
 185+ E576
 186+ E576 1A           l2_print_7at_320:       ld	a,(de)							; Return if empty string
 187+ E577 FE 00                                cp	0
 188+ E579 C8                                   ret	z
 189+ E57A E5 D5 C5                             push	hl,,de,,bc
 190+ E57D 57                                   ld		d,a							; bc = pos, de = char and colour
 191+ E57E                                      ;TODOcallcall 	l2_print_7chr_at_320
 192+ E57E C1 D1 E1                             pop		hl,,de,,bc
 193+ E581 08           .Move7Pixlestoright:	ex		af,af'
 194+ E582 79                                   ld		a,c
 195+ E583 C6 07                                add		7
 196+ E585 4F                                   ld		c,a
 197+ E586 08                                   ex		af,af'
 198+ E587 23                                   inc		hl
 199+ E588 18 EC                                jr		l2_print_7at_320		    ; Just loop until 0 found
 200+ E58A
 201+ E58A 50           l2_print_blank_at_320:  ld      d,b                         ; d = row
 202+ E58B CD 4C E4                             call    l2_target_address_320       ;
 203+ E58E              ;... so now we have hl = address of 8 bytes of character, iyl = d = row , iyh = c = color, ixh = off colour, stack = column, b = 8
 204+ E58E 06 08        .PrintCharPrep:         ld      b,8                         ;
 205+ E590 E5           .PrintCharLoop:         push    hl                          ; save row col address
 206+ E591                                      ZeroA
 206+ E591 AF          >                        xor a
 207+ E592 77           .LineUnwarped:          ld      (hl),a                      ; write to screen
 208+ E593 24                                   inc     h                           ; next colum = + 256
 209+ E594 77                                   ld      (hl),a                      ; write to screen
 210+ E595 24                                   inc     h                           ; next colum = + 256
 211+ E596 77                                   ld      (hl),a                      ; write to screen
 212+ E597 24                                   inc     h                           ; next colum = + 256
 213+ E598 77                                   ld      (hl),a                      ; write to screen
 214+ E599 24                                   inc     h                           ; next colum = + 256
 215+ E59A 77                                   ld      (hl),a                      ; write to screen
 216+ E59B 24                                   inc     h                           ; next colum = + 256
 217+ E59C 77                                   ld      (hl),a                      ; write to screen
 218+ E59D 24                                   inc     h                           ; next colum = + 256
 219+ E59E 77                                   ld      (hl),a                      ; write to screen
 220+ E59F 24                                   inc     h                           ; next colum = + 256
 221+ E5A0 77                                   ld      (hl),a                      ; write to screen
 222+ E5A1 24                                   inc     h                           ; next colum = + 256
 223+ E5A2 E1           .DoneLine:              pop     hl                          ; get back row col
 224+ E5A3 23                                   inc     hl                          ; move down 1 pixel row
 225+ E5A4 10 EA                                djnz    .PrintCharLoop
 226+ E5A6 C9                                   ret
 227+ E5A7              ; l2_print_char_at_320, b = row, hl = col, a = code for charater, c = color
 228+ E5A7 FE 20        l2_print_char_at_320:   cp		32
 229+ E5A9 30 05                                jr		nc,.LowerValid          	; Must be between 32 and 127
 230+ E5AB 3E 20                                ld      a,32                        ; else we set it to space
 231+ E5AD C3 B6 E5                             jp      .ValidCharacter             ; .
 232+ E5B0 FE 7F        .LowerValid:            cp		127                         ; .
 233+ E5B2 38 02                                jr		c,.ValidCharacter           ; .
 234+ E5B4 3E 20        .UpperInvalid:          ld      a,32                        ; .
 235+ E5B6              ; now translate row in b and col in hl to a valid address, in 320 mode high byte
 236+ E5B6 FE 20        .ValidCharacter:        cp      32                          ; now a holds valid ascii
 237+ E5B8 CA 8A E5                             jp      z,l2_print_blank_at_320     ; Optimisation for space character to just write blanks
 238+ E5BB                                      ; Implicit return on jp z
 239+ E5BB              ; calcualte target address and bring in correct bank hl = col, d = row
 240+ E5BB 50           .CaclulateWriteAddr:    ld      d,b                         ; d = row
 241+ E5BC DD 2E 00                             ld      ixl,0                       ; pixel off
 242+ E5BF DD 61                                ld      ixh,c                       ; pixel on
 243+ E5C1 08                                   ex      af,af'                      ; save a holding charachter code
 244+ E5C2 CD 4C E4                             call    l2_target_address_320       ;
 245+ E5C5 08                                   ex      af,af'
 246+ E5C6 E5                                   push    hl                          ; save target address
 247+ E5C7 1E 08        .CalculateCharacterAddr:ld      e,8                         ; de = offset address for character set
 248+ E5C9 57                                   ld      d,a                         ; d = ascii code so *8 gives de = offset in char set
 249+ E5CA ED 30                                mul     de                          ;
 250+ E5CC 21 00 3C                             ld		hl,charactersetaddr			; hl = address of rom char,
 251+ E5CF 19                                   add     hl,de                       ; hl = address of rom character bytes
 252+ E5D0 D1                                   pop     de                          ; de = screen address
 253+ E5D1              ;... so now we have hl = address of 8 bytes of character, iyl = d = row , iyh = c = color, ixh = off colour, stack = column, b = 8
 254+ E5D1 06 08        .PrintCharPrep:         ld      b,8                         ;
 255+ E5D3 C5           .PrintCharLoop:         push    bc
 256+ E5D4 7E                                   ld      a,(hl)                      ; a= byte to write
 257+ E5D5 06 08                                ld      b,8                         ; 8 pixels across
 258+ E5D7 D5                                   push    de                          ; save row col address
 259+ E5D8 CB 27        .LineLoop:              sla      a
 260+ E5DA 38 06                                jr      c,.plotPixel
 261+ E5DC 08           .PlotSpace:             ex      af,af'                      ; save current byte
 262+ E5DD DD 7D                                ld      a,ixl                       ; write 0
 263+ E5DF C3 E5 E5                             jp      .WritePixel                 ;
 264+ E5E2 08           .plotPixel:             ex      af,af'                      ; save currenty byte
 265+ E5E3 DD 7C                                ld      a,ixh                       ; write color
 266+ E5E5 12           .WritePixel:            ld      (de),a                      ; write to screen
 267+ E5E6 08                                   ex      af,af'                      ; retrieve current byte
 268+ E5E7 14                                   inc     d                           ; next colum = + 256
 269+ E5E8 10 EE                                djnz    .LineLoop
 270+ E5EA D1           .DoneLine:              pop     de                          ; get back row col
 271+ E5EB 13                                   inc     de                          ; move down 1 pixel row
 272+ E5EC C1                                   pop     bc
 273+ E5ED 23                                   inc     hl                          ; move to next byte
 274+ E5EE 10 E3                                djnz    .PrintCharLoop
 275+ E5F0 C9                                   ret
 276+ E5F1              ; l2_print_char_at_320, b = row, hl = col, a = code for charater, c = color
 277+ E5F1              ; checks bank on every column
 278+ E5F1              l2_print_char_at_320_precise:
 279+ E5F1 FE 20                                cp		32
 280+ E5F3 30 05                                jr		nc,.LowerValid          	; Must be between 32 and 127
 281+ E5F5 3E 20                                ld      a,32                        ; else we set it to space
 282+ E5F7 C3 00 E6                             jp      .ValidCharacter             ; .
 283+ E5FA FE 7F        .LowerValid:            cp		127                         ; .
 284+ E5FC 38 02                                jr		c,.ValidCharacter           ; .
 285+ E5FE 3E 20        .UpperInvalid:          ld      a,32                        ; .
 286+ E600              ; now translate row in b and col in hl to a valid address, in 320 mode high byte
 287+ E600 FE 20        .ValidCharacter:        cp      32                          ; now a holds valid ascii
 288+ E602 CA 8A E5                             jp      z,l2_print_blank_at_320     ; Optimisation for space character to just write blanks
 289+ E605                                      ; Implicit return on jp z
 290+ E605              ; calcualte target address and bring in correct bank hl = col, d = row
 291+ E605 50           .CaclulateWriteAddr:    ld      d,b                         ; d = row
 292+ E606 DD 2E 00                             ld      ixl,0                       ; pixel off
 293+ E609 DD 61                                ld      ixh,c                       ; pixel on
 294+ E60B 08                                   ex      af,af'                      ; save a holding charachter code
 295+ E60C CD 4C E4                             call    l2_target_address_320       ;
 296+ E60F 08                                   ex      af,af'
 297+ E610 E5                                   push    hl                          ; save target address
 298+ E611 1E 08        .CalculateCharacterAddr:ld      e,8                         ; de = offset address for character set
 299+ E613 57                                   ld      d,a                         ; d = ascii code so *8 gives de = offset in char set
 300+ E614 ED 30                                mul     de                          ;
 301+ E616 21 00 3C                             ld		hl,charactersetaddr			; hl = address of rom char,
 302+ E619 19                                   add     hl,de                       ; hl = address of rom character bytes
 303+ E61A D1                                   pop     de                          ; de = screen address
 304+ E61B              ;... so now we have hl = address of 8 bytes of character, iyl = d = row , iyh = c = color, ixh = off colour, stack = column, b = 8
 305+ E61B 06 08        .PrintCharPrep:         ld      b,8                         ;
 306+ E61D C5           .PrintCharLoop:         push    bc
 307+ E61E 7E                                   ld      a,(hl)                      ; a= byte to write
 308+ E61F 06 08                                ld      b,8                         ; 8 pixels across
 309+ E621 D5                                   push    de                          ; save row col address
 310+ E622 CB 27        .LineLoop:              sla      a
 311+ E624 38 06                                jr      c,.plotPixel
 312+ E626 08           .PlotSpace:             ex      af,af'                      ; save current byte
 313+ E627 DD 7D                                ld      a,ixl                       ; write 0
 314+ E629 C3 2F E6                             jp      .WritePixel                 ;
 315+ E62C 08           .plotPixel:             ex      af,af'                      ; save currenty byte
 316+ E62D DD 7C                                ld      a,ixh                       ; write color
 317+ E62F 12           .WritePixel:            ld      (de),a                      ; write to screen
 318+ E630 14                                   inc     d                           ; next colum = + 256
 319+ E631 7A                                   ld      a,d
 320+ E632                                      JumpIfALTNusng 64, .NoBankSwitch
 320+ E632 FE 40       >                        cp      64
 320+ E634 DA 3E E6    >                        jp		c, .NoBankSwitch
 321+ E637 C5           .NextBank:              push    bc
 322+ E638 CD C0 E1                             call    asm_l2_320_next_bank_noSv
 323+ E63B C1                                   pop     bc
 324+ E63C 16 00                                ld      d,0                         ; as we have moved on reset address column
 325+ E63E 08           .NoBankSwitch:          ex      af,af'                      ; retrieve current byte
 326+ E63F 10 E1                                djnz    .LineLoop
 327+ E641 CD 6A E0     .DoneLine:              call    asm_l2_reselect_saved_bank
 328+ E644 D1                                   pop     de                          ; get back row col
 329+ E645 13                                   inc     de                          ; move down 1 pixel row
 330+ E646 C1                                   pop     bc
 331+ E647 23                                   inc     hl                          ; move to next byte
 332+ E648 10 D3                                djnz    .PrintCharLoop
 333+ E64A C9                                   ret
 334+ E64B
 335+ E64B              ; l2_print_at_320, b = row, hl = col, de = addr of message, c = color
 336+ E64B              ; non optimised bank switching as it will do it for each character
 337+ E64B              ; assumes each character is aligned to a bank so will only bank switch on new character cell
 338+ E64B 1A           l2_print_at_320:        ld      a,(de)                      ; return if empty message
 339+ E64C A7                                   and     a
 340+ E64D C8                                   ret     z
 341+ E64E C5 D5 E5                             push    bc,,de,,hl
 342+ E651 1A                                   ld      a,(de)
 343+ E652 CD A7 E5                             call 	l2_print_char_at_320        ; l2_print_char_at_320, b = row, hl = col, a = code for chrater, c = color
 344+ E655 E1 D1 C1                             pop     bc,,de,,hl
 345+ E658 3E 08                                ld      a,8
 346+ E65A ED 31                                add     hl,a
 347+ E65C 13                                   inc     de
 348+ E65D C3 4B E6                             jp      l2_print_at_320
 349+ E660
 350+ E660              ;l2_print_at_320_precise, b = row, hl = col, de = addr of message, c = color
 351+ E660              ; This version bank switch checks on every column, needs to be checked if optimisation of bank swtiching can be done
 352+ E660              ; assumes each character is aligned to a bank so will only bank switch on new character cell
 353+ E660 1A           l2_print_at_320_precise:ld      a,(de)                      ; return if empty message
 354+ E661 A7                                   and     a
 355+ E662 C8                                   ret     z
 356+ E663 C5 D5 E5                             push    bc,,de,,hl
 357+ E666 1A                                   ld      a,(de)
 358+ E667 CD F1 E5                             call 	l2_print_char_at_320_precise       ; l2_print_char_at_320, b = row, hl = col, a = code for chrater, c = color
 359+ E66A E1 D1 C1                             pop     bc,,de,,hl
 360+ E66D 3E 08                                ld      a,8
 361+ E66F ED 31                                add     hl,a
 362+ E671 13                                   inc     de
 363+ E672 C3 60 E6                             jp      l2_print_at_320_precise
 364+ E675
 365+ E675
 366+ E675              ; l2_print_at_320, b = row, hl = col, de = addr of message, c = color, iyl = rowlength
 367+ E675              ; loops printing line at a time wraps at colum 38
 368+ E675              ; current col = start col
 369+ E675              ; while char at ptr <> 0
 370+ E675              ;  if char at ptr = white space
 371+ E675              ;     word length = 8
 372+ E675              ;  else
 373+ E675              ;      get legnth of work at ptr
 374+ E675              ;  end if
 375+ E675              ;  if current col + word length > 310
 376+ E675              ;     current col = start col
 377+ E675              ;     currnet row += 8
 378+ E675              ;   end if
 379+ E675              ;   print word
 380+ E675              ;   current col += word length
 381+ E675              ; loop
 382+ E675              ; Not for optimisation always works in 8 pixel alignment
 383+ E675              l2_print_at_wrap_320:
 384+ E675 1A           .PrintPrep:             ld      a,(de)                  ; intial trap null char at ptr <> 0
 385+ E676 A7                                   and     a                       ; .
 386+ E677 C8                                   ret     z                       ; .
 387+ E678 FD 69                                ld      iyl,c                   ; iyl = color
 388+ E67A E5                                   push    hl                      ; save pixel column address
 389+ E67B EB                                   ex      de,hl                   ; hl = hl / 8
 390+ E67C FD 60                                ld      iyh,b                   ; save b register
 391+ E67E 06 03                                ld      b,3                     ; .
 392+ E680 ED 2A                                bsrl    de,b                    ; .
 393+ E682 EB                                   ex      de,hl                   ; .
 394+ E683 4D                                   ld      c,l                     ; c = current column in characters rather than pixels
 395+ E684 DD 69                                ld      ixl,c                   ; ixl = colum in characters for new line
 396+ E686 E1                                   pop     hl                      ; get back pixel column address
 397+ E687 1A           .PrintLoop:             ld      a,(de)                  ; while char at ptr <> 0
 398+ E688 A7                                   and     a                       ; .
 399+ E689 C8                                   ret     z
 400+ E68A CD 97 E4                             call    L2LenWordAtDE           ; b = length of string
 401+ E68D DD 60                                ld      ixh,b                   ; save string length
 402+ E68F 79                                   ld      a,c                     ; a= total character length
 403+ E690 80                                   add     a,b                     ; a= projected end character position of string
 404+ E691 4F                                   ld      c,a                     ; c=total character length (needed to keep track of string length so far
 405+ E692 FD 44                                ld      b,iyh                   ; restore b saved in iyh above for row
 406+ E694                                      JumpIfALTNusng 38,.printWord    ; if calcualted length > 38 chars then word wrap
 406+ E694 FE 26       >                        cp      38
 406+ E696 DA A9 E6    >                        jp		c, .printWord
 407+ E699 DD 4D        .wrapText:              ld      c,ixl                   ; start column
 408+ E69B EB                                   ex      de,hl                   ; update hl to be pixel start column
 409+ E69C DD 55                                ld      d,ixl                   ;
 410+ E69E 1E 08                                ld      e,8                     ;
 411+ E6A0 ED 30                                mul     de                      ;
 412+ E6A2 EB                                   ex      de,hl                   ;
 413+ E6A3 3E 08                                ld      a,8                     ; down one row
 414+ E6A5 80                                   add     a,b                     ; .
 415+ E6A6 47                                   ld      b,a                     ; .
 416+ E6A7 FD 67                                ld      iyh,a                   ; update iyh copy of b
 417+ E6A9              ; now bc = pxiel row, character column after string printed, de = start of string, hl = pixel col, iyl = color, ixl = column for start of line, iyh = original pixel row
 418+ E6A9 C5 D5 E5 DD  .printWord:             push    bc,,de,,hl,,ix          ; stack all registgers
 418+ E6AD E5
 419+ E6AE DD 01                                break
 420+ E6B0 1A           .CalculateColum:        ld      a,(de)                  ; get ascii code
 421+ E6B1 FD 4D                                ld      c,iyl                   ; get colour back
 422+ E6B3 CD A7 E5                             call    l2_print_char_at_320    ; b = row, hl = col, a = code for charater, c = color
 423+ E6B6 DD E1 E1 D1                          pop     bc,,de,,hl,,ix          ;
 423+ E6BA C1
 424+ E6BB 13                                   inc     de                      ; move to next character
 425+ E6BC 3E 08                                ld      a,8                     ; move column 8 pixles
 426+ E6BE ED 31                                add     hl,a                    ; loop until we get a space
 427+ E6C0 DD 25                                dec     ixh
 428+ E6C2 DD 7C                                ld      a,ixh
 429+ E6C4 A7                                   and     a
 430+ E6C5 C2 A9 E6                             jp      nz,.printWord
 431+ E6C8 C3 87 E6                             jp      .PrintLoop
 432+ E6CB
 433+ E6CB
 434+ E6CB
# file closed: ./Layer2Graphics/layer2_print_character.asm
 797  E6CB                  INCLUDE "./Layer2Graphics/layer2_draw_box.asm"
# file opened: ./Layer2Graphics/layer2_draw_box.asm
   1+ E6CB              ; "l2_draw_thick_box bc=rowcol, de=heightwidth h=color"
   2+ E6CB              ; TODO DMA Optimise
   3+ E6CB                              DISPLAY "TODO: dma optimise"
   4+ E6CB C5 D5 E5     l2_draw_fill_box:       push    bc,,de,,hl
   5+ E6CE 53                                   ld      d,e
   6+ E6CF 5C                                   ld      e,h
   7+ E6D0 CD A7 E7                             call    l2_draw_horz_line           ; "bc = left side row,col, d = length, e = color"
   8+ E6D3 E1 D1 C1                             pop     bc,,de,,hl
   9+ E6D6 04                                   inc     b
  10+ E6D7 15                                   dec     d
  11+ E6D8 C8                                   ret     z
  12+ E6D9 18 F0                                jr      l2_draw_fill_box
  13+ E6DB
  14+ E6DB              ; "l2_draw_box bc=rowcol, de=heightwidth a=color"
  15+ E6DB C5 D5 F5     l2_draw_box:            push	bc,,de,,af
  16+ E6DE 53                                   ld		d,e
  17+ E6DF 5F                                   ld		e,a
  18+ E6E0 14                                   inc		d
  19+ E6E1 CD A7 E7                             call	l2_draw_horz_line
  20+ E6E4 F1 D1 C1                             pop		bc,,de,,af
  21+ E6E7 C5 D5 F5     .bottomhorzline:	    push	bc,,de,,af
  22+ E6EA 67                                   ld		h,a							;save color whilst b = row + height
  23+ E6EB 78                                   ld		a,b
  24+ E6EC 82                                   add		a,d
  25+ E6ED 47                                   ld		b,a
  26+ E6EE 53                                   ld		d,e							; d = width
  27+ E6EF 14                                   inc		d							; Extra pixel for width
  28+ E6F0 5C                                   ld		e,h							; e = colour
  29+ E6F1 CD A7 E7                             call	l2_draw_horz_line
  30+ E6F4 F1 D1 C1                             pop		bc,,de,,af
  31+ E6F7 C5 D5 F5     .leftvertline:          push	bc,,de,,af
  32+ E6FA 04                                   inc		b							; save 2 pixles
  33+ E6FB 15                                   dec		d
  34+ E6FC 5F                                   ld		e,a							; e = color
  35+ E6FD CD 39 E8                             call	l2_draw_vert_line
  36+ E700 F1 D1 C1                             pop		bc,,de,,af
  37+ E703 04           .rightvertline:         inc		b							; save 2 pixles
  38+ E704 15                                   dec		d
  39+ E705 67                                   ld		h,a							;save color whilst c = col + width
  40+ E706 79                                   ld		a,c
  41+ E707 83                                   add		a,e
  42+ E708 4F                                   ld		c,a
  43+ E709 5C                                   ld		e,h							; e = color
  44+ E70A CD 39 E8                             call	l2_draw_vert_line
  45+ E70D C9                                   ret
  46+ E70E
  47+ E70E              ; "b = row, hl = col, c = height, de = width, a = colour"
  48+ E70E C5 D5 E5 F5  l2_draw_box_320:        push    bc,,de,,hl,,af
  49+ E712                                      ;TODOcall    l2_draw_horz_line_320       ; b = row, hl = col, e = width a = colour
  50+ E712 F1 E1 D1 C1                          pop     bc,,de,,hl,,af
  51+ E716 C5 D5 E5 F5                          push    bc,,de,,hl,,af
  52+ E71A 08                                   ex      af,af'
  53+ E71B 78                                   ld      a,b
  54+ E71C 3D                                   dec     a
  55+ E71D 81                                   add     a,c
  56+ E71E 41                                   ld      b,c
  57+ E71F 08                                   ex      af,af'
  58+ E720                                      ;TODOcall    l2_draw_horz_line_320       ; b = row, hl = col, e = width a = colour
  59+ E720 F1 E1 D1 C1  .leftVertLine:          pop     bc,,de,,hl,,af
  60+ E724 C5 D5 E5 F5                          push    bc,,de,,hl,,af
  61+ E728 16 00                                ld      d,0                             ; de = height
  62+ E72A 59                                   ld      e,c
  63+ E72B 4F                                   ld      c,a                             ; set colour
  64+ E72C CD AB E8                             call    l2_draw_vert_line_320
  65+ E72F F1 E1 D1 C1                          pop     bc,,de,,hl,,af
  66+ E733 19                                   add     hl,de                           ; hl = right column
  67+ E734 2B                                   dec     hl
  68+ E735 16 00                                ld      d,0                             ; de = length
  69+ E737 59                                   ld      e,c
  70+ E738 4F                                   ld      c,a                             ; set colour
  71+ E739 CD AB E8                             call    l2_draw_vert_line_320
  72+ E73C C9                                   ret
  73+ E73D
  74+ E73D 06 01        l2_draw_menu_border:    ld      b,1
  75+ E73F 21 01 00                             ld      hl,1
  76+ E742 1E FD                                ld      e,255-2
  77+ E744 0E C0                                ld      c,$C0
  78+ E746 CD AB E8                             call    l2_draw_vert_line_320           ;b = row; hl = col, de = length, c = color"
  79+ E749 06 01                                ld      b,1
  80+ E74B 21 3E 01                             ld      hl,320-2
  81+ E74E 1E FD                                ld      e,255-2
  82+ E750 0E C0                                ld      c,$C0
  83+ E752 CD AB E8                             call    l2_draw_vert_line_320           ;b = row; hl = col, de = length, c = color"
  84+ E755 06 01                                ld      b,1
  85+ E757 21 01 00                             ld      hl,1
  86+ E75A 11 3C 01                             ld      de,320-4
  87+ E75D 0E C0                                ld      c,$C0
  88+ E75F CD FE E7                             call    l2_draw_horz_line_320
  89+ E762 06 FD                                ld      b,253
  90+ E764 21 02 00                             ld      hl,2
  91+ E767 11 3C 01                             ld      de,320-4
  92+ E76A 0E C0                                ld      c,$C0
  93+ E76C CD FE E7                             call    l2_draw_horz_line_320
  94+ E76F C9                                   ret
# file closed: ./Layer2Graphics/layer2_draw_box.asm
 798  E770                  INCLUDE "./Layer2Graphics/asm_l2_plot_horizontal.asm"
# file opened: ./Layer2Graphics/asm_l2_plot_horizontal.asm
   1+ E770
   2+ E770              ;; NOTE DMA is little endian
   3+ E770 00           l2_horz_pixel           DB 0
   4+ E771
   5+ E771 83 C3 C7 CB  l2_horz_line            DB DMA_DISABLE,  DMA_RESET, DMA_RESET_PORT_A_TIMING, DMA_RESET_PORT_B_TIMING ,DMA_WRO_BLOCK_PORTA_A2B_XFR
   5+ E775 7D
   6+ E776 70 E7        l2_horz_colr            DW l2_horz_pixel
   7+ E778 00           l2_horz_lenlo           DB 0
   8+ E779 00           l2_horz_lenhi           DB 0
   9+ E77A 24 10 AD                             DB DMA_WR1_P1FIXED_MEMORY, DMA_WR2_P2INC_MEMORY, DMA_WR4_CONT_MODE
  10+ E77D 00 00        l2_horz_target          DB $00, $00
  11+ E77F CF 87                                DB DMA_LOAD, DMA_ENABLE
  12+ E781              l2_horz_cmd_len	        EQU $ - l2_horz_line
  13+ E781              ; "l2_draw_horz_dma"
  14+ E781              ; "plot at bc for length d colour e using dma, assumes bank already selected"
  15+ E781 7B           l2_draw_horz_dma:       ld		a,e                                               ; T=4      ;
  16+ E782 32 70 E7                             ld		(l2_horz_pixel),a                                 ; T=13     ;
  17+ E785 5A                                   ld      e,d ; saved 3 t states ld		a,d                                               ; T=4      ; e=d   4
  18+ E786 16 00                                ld      d,0; saved 3 t states ld 		(l2_horz_lenlo),a                                 ; T=13     ; d = 0  7
  19+ E788 ED 53 78 E7                          ld      (l2_horz_lenlo),de; saved 3 t states xor 	a                                                 ; T=4      ; t 20  31
  20+ E78C                                      ; saved 3 t states ld ld 		(l2_horz_lenhi),a                                 ; T=13     ;
  21+ E78C                                    ; saved 4 t states  ld		h,b                           ;          ;
  22+ E78C                                    ; saved 4 t states  ld		l,c                           ;          ;
  23+ E78C ED 43 7D E7                          ld      (l2_horz_target),bc ; saved 4 t states  was , hl  ; T=20     ;
  24+ E790 21 71 E7     .write_dma:             ld 		hl, l2_horz_line                                  ;          ;
  25+ E793 06 10                                ld 		b, l2_horz_cmd_len                                ;
  26+ E795 0E 6B                                ld		c,IO_DATAGEAR_DMA_PORT                            ;
  27+ E797 ED B3                                otir                                                      ;
  28+ E799 C9                                   ret
  29+ E79A
  30+ E79A              ; "bc = left side row,col, d = length, e = color"
  31+ E79A D5           l2_draw_horz_dma_bank:  push 	de							; save length and colour
  32+ E79B C5                                   push 	bc							; save row col
  33+ E79C 78                                   ld   	a,b
  34+ E79D CD 78 E0                             call 	asm_l2_row_bank_select		; now we have the correct bank, its a horizontal line so bank will not shift
  35+ E7A0 C1                                   pop  	bc
  36+ E7A1 47                                   ld	 	b,a	       					; fixed row by the call we can go straight into HL with row col
  37+ E7A2 D1                                   pop  	de							; get length back
  38+ E7A3 CD 81 E7                             call    l2_draw_horz_dma
  39+ E7A6 C9                                   ret
  40+ E7A7
  41+ E7A7              ; "l2_draw_horz_line"
  42+ E7A7              ; "bc = left side row,col, d = length, e = color"
  43+ E7A7              ; "optimisation if above min pix is will use dma call SCREEN_HOZ_MIN_PIX not implemented yet"
  44+ E7A7 7A           l2_draw_horz_line:      ld		a,d
  45+ E7A8 FE 00                                cp 		0							; if its zero length then just return
  46+ E7AA C8           .zerolengthexit:        ret		z
  47+ E7AB FE 01        .isitlen1:              cp 		1
  48+ E7AD CA CF E7                             jp 		z,.l2_draw_horz_line_1
  49+ E7B0 FE 0A        .longenoughtfordma:     cp  10
  50+ E7B2 C3 9A E7                             jp  l2_draw_horz_dma_bank
  51+ E7B5 D5 C5        .plottableline:         push 	de,,bc  					; save length and colour an d row col
  52+ E7B7 78                                   ld   	a,b
  53+ E7B8 CD 78 E0                             call 	asm_l2_row_bank_select		; now we have the correct bank, its a horizontal line so bank will not shift
  54+ E7BB C1                                   pop  	bc
  55+ E7BC 67                                   ld	 	h,a	       					; fixed row by the call we can go straight into HL with row col
  56+ E7BD 69                                   ld   	l,c
  57+ E7BE D1                                   pop  	de							; get length back
  58+ E7BF 79           .cliptest:              ld	 	a,c							; get column + length
  59+ E7C0 42                                   ld  	b,d  						; speculate that we don't clip by pre-loading b with length
  60+ E7C1 82                                   add  	a,d
  61+ E7C2 30 06                                jr   	nc, .l2_draw_horz_plot_loop	; if carry is set c+d > 255
  62+ E7C4 3E FF        .clipat255:             ld   	a,$FF
  63+ E7C6 91                                   sub  	c							; a holds clipped length
  64+ E7C7 47                                   ld 		b, a 						; so now hl holds poke address  b = clipped length e = colour
  65+ E7C8 18 00                                jr		.l2_draw_horz_plot_loop
  66+ E7CA 73           .l2_draw_horz_plot_loop:ld (hl),e							; loop poking hl with e for b pixels
  67+ E7CB 23                                   inc hl
  68+ E7CC 10 FC                                djnz .l2_draw_horz_plot_loop
  69+ E7CE C9                                   ret
  70+ E7CF 7B           .l2_draw_horz_line_1:   ld		a,e
  71+ E7D0                                      l2_plot_macro; jp		l2_plot_pixel				; hijack return
  71+ E7D0 78          >                        ld      a,b
  71+ E7D1             >                        JumpIfAGTENusng 192 ,.NoPlot
  71+ E7D1 FE C0       >                        cp     192
  71+ E7D3 D2 DF E7    >                        jp		nc,.NoPlot
  71+ E7D6 69          >                        ld      l,c
  71+ E7D7 CD 78 E0    >                        call    asm_l2_row_bank_select
  71+ E7DA 67          >                        ld      h,a
  71+ E7DB 3A 22 E4    >                        ld      a,(line_gfx_colour)
  71+ E7DE 77          >                        ld      (hl),a
  71+ E7DF             >.NoPlot:
  72+ E7DF C9                                   ret
  73+ E7E0
  74+ E7E0
  75+ E7E0              ; "l2_draw_horz_line_to"
  76+ E7E0              ; "bc = left side row,col, d right pixel, e = color"
  77+ E7E0 7A           l2_draw_horz_line_to:   ld 		a,d
  78+ E7E1 B9                                   cp 		c
  79+ E7E2 30 04                                jr		nc, .noswap
  80+ E7E4 28 07                                jr      z, .singlepixel
  81+ E7E6 51           .swap:                  ld		d,c
  82+ E7E7 4F                                   ld		c,a
  83+ E7E8 7A           .noswap:                ld		a,d
  84+ E7E9 91                                   sub		c
  85+ E7EA              ;                        dec		a							; so now its length not offset
  86+ E7EA 57                                   ld		d,a
  87+ E7EB 18 BA                                jr 		l2_draw_horz_line			; hijack routine and return statements
  88+ E7ED 7B           .singlepixel:           ld		a,e
  89+ E7EE                                      l2_plot_macro; jp		l2_plot_pixel				; hijack return
  89+ E7EE 78          >                        ld      a,b
  89+ E7EF             >                        JumpIfAGTENusng 192 ,.NoPlot
  89+ E7EF FE C0       >                        cp     192
  89+ E7F1 D2 FD E7    >                        jp		nc,.NoPlot
  89+ E7F4 69          >                        ld      l,c
  89+ E7F5 CD 78 E0    >                        call    asm_l2_row_bank_select
  89+ E7F8 67          >                        ld      h,a
  89+ E7F9 3A 22 E4    >                        ld      a,(line_gfx_colour)
  89+ E7FC 77          >                        ld      (hl),a
  89+ E7FD             >.NoPlot:
  90+ E7FD C9                                   ret
  91+ E7FE
  92+ E7FE
  93+ E7FE              ; "l2_draw_horz_line"
  94+ E7FE              ; ">b = row; hl = col, de = length, c = color"
  95+ E7FE 7A           l2_draw_horz_line_320:  ld		a,d
  96+ E7FF B3                                   or      e
  97+ E800 C8           .zerolengthexit:        ret		z
  98+ E801                                      DISPLAY "TODO need 1 pixel logic"
  99+ E801 E5 C5        .longenoughtfordma:     push    hl,,bc                      ; copy row and colour to ixh and ixl
 100+ E803 CD F0 E0                             call    asm_l2_320_col_bank_select  ; Select the first bank to start writing to and adjust hl
 101+ E806 C1           .bankSelected:          pop     bc                          ; get back row and colour
 102+ E807 68                                   ld      l,b                         ; set target row
 103+ E808 71           .fillBank:              ld      (hl),c                      ; plot pixel
 104+ E809 7A                                   ld      a,d                         ; if we run out of DE then done
 105+ E80A B3                                   or      e                           ; .
 106+ E80B CA 19 E8                             jp      z,.fillComplete             ; .
 107+ E80E 24                                   inc     h                           ; move on one column
 108+ E80F 7C                                   ld      a,h                         ; if we are done next bank
 109+ E810 FE 40                                cp      64                          ; .
 110+ E812 CA 1B E8                             jp      z,.nextBank                 ; if inc H compeltes a carry then we have spanned a bank
 111+ E815 1B                                   dec     de                          ; one less still to do
 112+ E816 C3 08 E8                             jp      .fillBank                   ; else carry on
 113+ E819 E1           .fillComplete:          pop     hl                          ; clean up stack on completion
 114+ E81A C9                                   ret
 115+ E81B C5           .nextBank:              push    bc
 116+ E81C CD 9F E1                             call    asm_l2_320_next_bank        ; cycle on one bank as we always go left to right
 117+ E81F 26 00                                ld      h,0                         ; reset banked memory address colum to 0
 118+ E821 1B                                   dec     de
 119+ E822 C3 06 E8                             jp      .bankSelected
 120+ E825
# file closed: ./Layer2Graphics/asm_l2_plot_horizontal.asm
 799  E825                  INCLUDE "./Layer2Graphics/asm_l2_plot_vertical.asm"
# file opened: ./Layer2Graphics/asm_l2_plot_vertical.asm
   1+ E825              ; ">l2_draw_vert_segment"
   2+ E825              ; ">hl = bank adjusted pixel poke address d = length, e = color"
   3+ E825              ; ">will always clip once h = 64 even if length > 64 destroys a and hl, d = resudual length not plotted"
   4+ E825 7A           l2_draw_vert_segment:   ld		a,d
   5+ E826 FE 00        .emptylinecheck:	    cp 		0
   6+ E828 C8                                   ret		z
   7+ E829 FE 01        .justonepixel	        cp		1
   8+ E82B 20 02                                jr		nz, .multiplepixelsLoop
   9+ E82D 73                                   ld		(hl),e
  10+ E82E C9                                   ret
  11+ E82F              .multiplepixelsLoop:
  12+ E82F 7C           .endofbankcheck:        ld   	a,h
  13+ E830 FE 40                                cp   	64
  14+ E832 D0                                   ret		nc							; check before we poke data if we have hit a boundary
  15+ E833 73           .canplotapixel:         ld   	(hl),e						; set colour
  16+ E834 24                                   inc 	h							; we don't check here else we would need a dec d on ret could do for optimisation of loop though
  17+ E835 15                                   dec		d
  18+ E836 C8                                   ret		z
  19+ E837 18 F6                                jr		.multiplepixelsLoop
  20+ E839
  21+ E839              ; ">l2_draw_vert_line"
  22+ E839              ; ">bc = row col d = length, e = color"
  23+ E839 78           l2_draw_vert_line:      ld 		a,b
  24+ E83A FE C0        .offscreencheck:        cp 		SCREEN_HEIGHT
  25+ E83C D0                                   ret 	nc							; can't start off the screen
  26+ E83D 7A           .emptylinecheck:        ld		a,d
  27+ E83E FE 00                                cp		0
  28+ E840 C8                                   ret		z
  29+ E841 FE 01                                cp		1
  30+ E843 20 10                                jr		nz,.multiplepixels
  31+ E845              .itsonepixel:           l2_plot_macro; call	l2_plot_pixel
  31+ E845 78          >                        ld      a,b
  31+ E846             >                        JumpIfAGTENusng 192 ,.NoPlot
  31+ E846 FE C0       >                        cp     192
  31+ E848 D2 54 E8    >                        jp		nc,.NoPlot
  31+ E84B 69          >                        ld      l,c
  31+ E84C CD 78 E0    >                        call    asm_l2_row_bank_select
  31+ E84F 67          >                        ld      h,a
  31+ E850 3A 22 E4    >                        ld      a,(line_gfx_colour)
  31+ E853 77          >                        ld      (hl),a
  31+ E854             >.NoPlot:
  32+ E854 C9                                   ret
  33+ E855              .multiplepixels:						; so now we have at least 2 pixels to plot
  34+ E855 7A           .clipto192:             ld		a,d							; get length
  35+ E856 80                                   add		a,b							; a= row + length
  36+ E857 38 04                                jr		c,.needtoclip				; if it was > 255 then there is a definite need
  37+ E859 FE C0                                cp		SCREEN_HEIGHT
  38+ E85B 38 08                                jr		c, .noclipneeded
  39+ E85D 78           .needtoclip             ld		a,b
  40+ E85E 82                                   add		a,d
  41+ E85F D6 C0                                sub		SCREEN_HEIGHT
  42+ E861 67                                   ld		h,a							; use h as a temp holding for (row + length) - 192
  43+ E862 7A                                   ld		a,d
  44+ E863 94                                   sub		h
  45+ E864 57                                   ld		d,a							; d = length - ((row + length) - 192)
  46+ E865              ; so now BC = row col, d = length clipped, e = color
  47+ E865 78           .noclipneeded:          ld		a,b
  48+ E866 C5 D5                                push	bc,,de
  49+ E868 CD 78 E0                             call 	asm_l2_row_bank_select
  49+ E86B               	 	; we now have poke address and a variable holding current bank number
  50+ E86B D1 C1                                pop		bc,,de
  51+ E86D 67                                   ld		h,a							; b now tolds target pixel for first plot
  52+ E86E 69                                   ld		l,c  						; and c holds pixel column for plotting
  53+ E86F CD 25 E8                             call 	l2_draw_vert_segment		; draw seg, d = pixels remaining
  54+ E872 7A                                   ld		a,d							; a and d = nbr pixels remaining
  55+ E873 FE 00                                cp		0
  56+ E875 28 27                                jr		z, .doneplotting
  57+ E877 3A 00 E0     .anotherbank:           ld		a, (varL2_BANK_SELECTED)
  58+ E87A 3C                                   inc		a
  59+ E87B 06 00                                ld		b,0
  60+ E87D C5 D5                                push	bc,,de
  61+ E87F CD 53 E0                             call 	asm_l2_bank_n_select
  62+ E882 D1 C1                                pop     bc,,de
  63+ E884 60                                   ld		h,b							; b now tolds target pixel for first plot
  64+ E885 69                                   ld		l,c  						; and c holds pixel column for plotting
  65+ E886 CD 25 E8                             call	l2_draw_vert_segment
  66+ E889 7A                                   ld		a,d
  67+ E88A FE 00                                cp		0
  68+ E88C 28 10                                jr		z,.doneplotting
  69+ E88E 3A 00 E0     .yetanotherbank:        ld		a, (varL2_BANK_SELECTED)
  70+ E891 3C                                   inc		a
  71+ E892 06 00                                ld		b,0
  72+ E894 C5 D5                                push	bc,,de
  73+ E896 CD 53 E0                             call 	asm_l2_bank_n_select
  74+ E899 D1                                   pop		de
  75+ E89A E1                                   pop		hl							; hl = bc
  76+ E89B CD 25 E8                             call	l2_draw_vert_segment		; we have now hit 192 pixels so done
  77+ E89E C9           .doneplotting:	        ret
  78+ E89F
  79+ E89F              ; ">l2_draw_vert_line_to"
  80+ E89F              ; ">bc = row col d = to position, e = color"
  81+ E89F 78           l2_draw_vert_line_to:   ld		a,b
  82+ E8A0 BA                                   cp		d
  83+ E8A1 38 02                                jr		c, .noyswap
  84+ E8A3 42           .yswap:                 ld		b,d			; Swap round row numbers so we are always incrementing
  85+ E8A4 57                                   ld		d,a			; now we have a top to bottom to we we can calc length from bc
  86+ E8A5 7A           .noyswap:               ld		a,d 		; we still may have d in a but only if it was bottom to top
  87+ E8A6 90                                   sub		b
  88+ E8A7 3C                                   inc		a			; so now its length not offset
  89+ E8A8 57                                   ld		d,a
  90+ E8A9 18 8E                                jr		l2_draw_vert_line	; we can hijack its clipping, 0 check and return logic
  91+ E8AB                                      ; no return needed
  92+ E8AB
  93+ E8AB
  94+ E8AB              ;; ">l2_draw_vert_line"
  95+ E8AB              ; ">b = row; hl = col, e = length, c = color"
  96+ E8AB              l2_draw_vert_line_320:  ZeroA
  96+ E8AB AF          >                        xor a
  97+ E8AC B3                                   or      e
  98+ E8AD C8                                   ret     z							; if its zero length then just return
  99+ E8AE                                      DISPLAY "TODO need 1 pixel logic"
 100+ E8AE C5                                   push    bc
 101+ E8AF CD F0 E0     .selectBank:            call    asm_l2_320_col_bank_select  ; select bank and load row into h
 102+ E8B2 C1                                   pop     bc
 103+ E8B3 68                                   ld      l,b                         ; hl is adjusted address
 104+ E8B4 E5                                   push    hl
 105+ E8B5 2B                                   dec     hl
 106+ E8B6                                      ClearCarryFlag
 106+ E8B6 B7          >                        or a
 107+ E8B7 78           .checkVertLength:       ld      a,b
 108+ E8B8 3D                                   dec     a
 109+ E8B9                                      ClearCarryFlag
 109+ E8B9 B7          >                        or a
 110+ E8BA 8B                                   adc     e                           ; check if it oversplills
 111+ E8BB D2 C1 E8                             jp      nc,.lengthOK
 112+ E8BE 8B           .tooLong:               adc     e                           ; as a now is negive add length results
 113+ E8BF 3D                                   dec     a                           ; a = adjsted length
 114+ E8C0 5F                                   ld      e,a                         ;
 115+ E8C1 79           .lengthOK:              ld		a,c                         ; set colour
 116+ E8C2 C1                                   pop     bc                          ; bc = memory address
 117+ E8C3              ; we now hijack l2_draw_horz_dma as in 320 mode the screen is in effect rotated 90 degrees from a memory perspective
 118+ E8C3              ; de is already length, bc is already target
 119+ E8C3 32 70 E7                             ld		(l2_horz_pixel),a
 120+ E8C6 16 00                                ld      d,0                         ; de = length
 121+ E8C8 ED 53 78 E7                          ld      (l2_horz_lenlo),de
 122+ E8CC ED 43 7D E7                          ld      (l2_horz_target),bc
 123+ E8D0 21 71 E7     .write_dma:             ld 		hl, l2_horz_line            ;
 124+ E8D3 06 10                                ld 		b, l2_horz_cmd_len          ;
 125+ E8D5 0E 6B                                ld		c,IO_DATAGEAR_DMA_PORT      ;
 126+ E8D7 ED B3                                otir                                ; run line draw
 127+ E8D9 C9                                   ret
 128+ E8DA
# file closed: ./Layer2Graphics/asm_l2_plot_vertical.asm
 800  E8DA                  INCLUDE "./Layer2Graphics/layer2_plot_diagonal.asm"
# file opened: ./Layer2Graphics/layer2_plot_diagonal.asm
   1+ E8DA
   2+ E8DA              l2_draw_box_to:
   3+ E8DA              ; ">l2_draw_box_to bc=rowcol, de=torowcol a=color"
   4+ E8DA              ; ">NOT IMPLEMENTED YET"
   5+ E8DA C9           	ret
   6+ E8DB
   7+ E8DB              ;; Note l2stepx is done via self modifying code rather than an if for speed
   8+ E8DB              ;; l2stepx1 and l2stepx2 are the addresses to stick the inc or dec in
   9+ E8DB              l2incbcstep EQU $03
  10+ E8DB              l2incbstep	EQU	$04
  11+ E8DB              l2decbstep	EQU $05
  12+ E8DB              l2decbcstep EQU $0B
  13+ E8DB              l2deccstep	EQU $0D
  14+ E8DB              l2inccstep	EQU	$0C
  15+ E8DB              l2incdestep EQU $13
  16+ E8DB              l2decdestep EQU $1B
  17+ E8DB              l2inchlstep EQU $23
  18+ E8DB              l2dechlstep EQU $2B
  19+ E8DB              		; l2 deltas are signed
  20+ E8DB 00 00        l2deltaY	DW	0
  21+ E8DD 00 00        l2deltaX	DW	0
  22+ E8DF 00           l2deltaYsq	db	0
  23+ E8E0 00           l2deltaXsq	db	0
  24+ E8E1 00           l2deltaYn	db	0
  25+ E8E2 00           l2deltaXn	db	0
  26+ E8E3 00           l2deltaYsqn	db	0
  27+ E8E4 00           l2deltaXsqn	db	0
  28+ E8E5 00           l2linecolor	db	0
  29+ E8E6 00 00        l2fraction	dw	0
  30+ E8E8 00 00        l2e2		dw	0
  31+ E8EA 00           l2way		db	0
  32+ E8EB 00 00        l2targetPtr	dw	0
  33+ E8ED              ;; These arrays should be 192 but if we use 256 then getting array2 value is just inc h rather than indexing again.
  34+ E8ED 00 00 00...  l2targetArray1 ds	256
  35+ E9ED 00 00 00...  l2targetArray2 ds	256
  36+ EAED              ;; Using Bresenham Algorithm draw a diagonal line top to bottom. First we must sort of course
  37+ EAED              ;;plotLine(int x0, int y0, int x1, int y1)
  38+ EAED              ;;    dx =  abs(x1-x0);
  39+ EAED              ;;    sx = x0<x1 ? 1 : -1;
  40+ EAED              ;;    dy = -abs(y1-y0);
  41+ EAED              ;;    sy = y0<y1 ? 1 : -1;
  42+ EAED              ;;    err = dx+dy;  /* error value e_xy */
  43+ EAED              ;;    while (true)   /* loop */
  44+ EAED              ;;        plot(x0, y0);
  45+ EAED              ;;        if (x0==x1 && y0==y1) break;
  46+ EAED              ;;        e2 = 2*err;
  47+ EAED              ;;        if (e2 >= dy) /* e_xy+e_x > 0 */
  48+ EAED              ;;            err += dy;
  49+ EAED              ;;            x0 += sx;
  50+ EAED              ;;        end if
  51+ EAED              ;;        if (e2 <= dx) /* e_xy+e_y < 0 */
  52+ EAED              ;;            err += dx;
  53+ EAED              ;;            y0 += sy;
  54+ EAED              ;;        end if
  55+ EAED              ;;    end while
  56+ EAED              ; ">l2_draw_diagonal_save, bc = y0,x0 de=y1,x1,a=array nbr ESOURCE LL30 or LION"
  57+ EAED              ; ">hl will be either l2targetArray1 or 2"
  58+ EAED              ; For S15 version we can still use the current table as this will hold final fill data
  59+ EAED              ; but we have to come in with X1Y1 X2Y2 being 16 bit
  60+ EAED              ; if the Y1Y2 are both off same side of screen or X1X2 both off same side them line array is set as empty
  61+ EAED              ; so
  62+ EAED              ;       for each line from Y1 to Y2
  63+ EAED              ;           if calculate as normal
  64+ EAED              ;                if off screen we don't write
  65+ EAED              ;                if on screen we clip to 0,255  which is easy as a horizontal line
  66+ EAED              ;           we will need a special case were a line is not rendered    we have x1=255 and X1 = 0, i.e. they are flipped
  67+ EAED              ;              we could also cheat and say view port as 1 pixel edge border so we can count x1 = 0 as no line
  68+ EAED
  69+ EAED              ; This must be called with  Y1 < Y2 as we won;t do a pre check
  70+ EAED              ; Caulates the temp x. IY [01] = X1 [23]=Y1 [45]=X2 [67]=Y2 [89]=midY3
  71+ EAED              ; Draw a line from BC to DE, with target Y position in a, all values must be 2's C at this points
  72+ EAED              ; calculate deltaX, deltaY for line.
  73+ EAED              ; calculate offsetY = TargetY - Y1
  74+ EAED              ; calculate XTarget = X1 + (deltaX/deltaY) *  offsetY
  75+ EAED              ;;;l2DiagDeltaX    DW 0
  76+ EAED              ;;;l2_diagonal_getx:       ld		hl,0                            ;
  77+ EAED              ;;;                        ld      ixh,0                           ; flag byte clear
  78+ EAED              ;;;                        ld      (target_y),a                    ; save target
  79+ EAED              ;;;.calculateDeltaX:       ld      hl,(IY+4)
  80+ EAED              ;;;                        ld      de,(IY+0)
  81+ EAED              ;;;                        ClearCarryFlag
  82+ EAED              ;;;                        sbc     hl,de
  83+ EAED              ;;;                        ld      (l2DiagDeltaX),hl
  84+ EAED              ;;;.calculateDeltaY:       ld      hl,(IY+6)
  85+ EAED              ;;;                        ld      de,(IY+2)
  86+ EAED              ;;;                        ClearCarryFlag
  87+ EAED              ;;;                        sbc     hl,de
  88+ EAED              ;;;                        ld      (l2DiagDeltaY),hl
  89+ EAED              ;;;.ABSDx:                 ld      hl,(l2DiagDeltaX)
  90+ EAED              ;;;                        ld      a,h
  91+ EAED              ;;;                        and     $80
  92+ EAED              ;;;                        jr      nz,.DxPositive
  93+ EAED              ;;;.DxNegative:            macronegate16hl
  94+ EAED              ;;;.DxPositive:            ex      de,hl                               ; de = deltaX
  95+ EAED              ;;;                        ld      hl,(l2DiagDeltaY)
  96+ EAED              ;;;                        ld      a,h
  97+ EAED              ;;;                        and     $80
  98+ EAED              ;;;                        jr      nz,.DyPositive
  99+ EAED              ;;;.DyNegative:            macronegate16hl
 100+ EAED              ;;;.DyPositive:
 101+ EAED              ;;;.ScaleLoop:             ld      a,h                                 ; At this point DX and DY are ABS values
 102+ EAED              ;;;                        or      d                                   ; .
 103+ EAED              ;;;                        jr      z,.ScaleDone                        ; .
 104+ EAED              ;;;                        ShiftDERight1                               ; .
 105+ EAED              ;;;                        ShiftHLRight1                               ; .
 106+ EAED              ;;;                        jr      .ScaleLoop                          ; scaled down Dx and Dy to 8 bit, Dy may have been;;                                                                                               negative
 107+ EAED              ;;;.ScaleDone:             ; hl = ABS DY, DE = ABS DX,  bc = Y1, ix = Y2,   note H and D will be zero
 108+ EAED              ;;;.CalculateDelta:        ld      a,e                                 ; if DX < DY goto DX/DY
 109+ EAED              ;;;                        JumpIfALTNusng l,.DXdivDY                   ; else do DY/DX
 110+ EAED              ;;;.DYdivDX:               ld      a,l                                 ;    A = DY
 111+ EAED              ;;;                        ld      d,e                                 ;    D = DX
 112+ EAED              ;;;                        call    AEquAmul256DivD                     ;    A = R = 256 * DY / DX
 113+ EAED              ;;;.SaveGradientDYDX:      ld      (Gradient),a
 114+ EAED              ;;;                        ld      a,ixh
 115+ EAED              ;;;                        or      16
 116+ EAED              ;;;                        ld      ixh,a                               ;
 117+ EAED              ;;;                        jp      .ClipP1                             ;
 118+ EAED              ;;;.DXdivDY:               ld      a,e                                 ;    A = DX
 119+ EAED              ;;;                        ld      d,l                                 ;    D = DY
 120+ EAED              ;;;                        call    AEquAmul256DivD                     ;    A = R = 256 * DX / DY
 121+ EAED              ;;;.SaveGradientDXDY:      ld      (Gradient),a
 122+ EAED              ;;;
 123+ EAED              ;;;have X1 -> X
 124+ EAED              ;;;need deltaMidY = MidY - Y0
 125+ EAED              ;;;                        X0 + (DeltaMY * Gradient) but if the graident is flipped then its X0+(deltaMY / Gradient)
 126+ EAED              ;;;
 127+ EAED              ;;;
 128+ EAED              ;;;.calculateDeltaY:
 129+ EAED              ;;;.calcualteDxDyOrDyDx
 130+ EAED              ;;;.calculate
 131+ EAED              ;;;
 132+ EAED              ; Total unoptimised version
 133+ EAED              ; use hl, de, bc, af,
 134+ EAED              ; no used yet ix iy
 135+ EAED              ; can we do an ex for hl' and de' holding x and hl, de holding y?
 136+ EAED              ;;;l2_X0                   DW 0
 137+ EAED              ;;;l2_Y0                   DW 0
 138+ EAED              ;;;l2_X1                   DW 0
 139+ EAED              ;;;l2_Y1                   DW 0
 140+ EAED              ;;;l2_DX                   DW 0
 141+ EAED              ;;;l2_DY                   DW 0
 142+ EAED              ;;;l2_SX                   DW 0
 143+ EAED              ;;;l2_SY                   DW 0
 144+ EAED              ;;;l2_Error                DW 0
 145+ EAED              ;;;l2_E2                   DW 0
 146+ EAED              ;;;int_bren_save_Array1:   ld      hl,(l2_X1)          ; if X0 < X1
 147+ EAED              ;;;                        ld      de,(l2_X0)          ; calculate SX DX
 148+ EAED              ;;;                        ClearCarryFlag              ;
 149+ EAED              ;;;                        sbc     hl,de               ;
 150+ EAED              ;;;                        bit     7,h                 ;
 151+ EAED              ;;;                        jr      z,.DXPositive       ;
 152+ EAED              ;;;.DXNegative:            NegHL                       ;
 153+ EAED              ;;;                        ld      bc,-1               ;
 154+ EAED              ;;;                        jp      .DoneCalcDx         ;
 155+ EAED              ;;;.DXPositive:            ld      bc,1                ;
 156+ EAED              ;;;.DoneCalcDx:            ld      (l2_SX),bc          ;
 157+ EAED              ;;;                        ld      (l2_DX),hl          ;
 158+ EAED              ;;;.CalcDY:                ld      hl,(l2_Y1)          ; If Y1 < Y1
 159+ EAED              ;;;                        ld      de,(l2_Y0)          ; calculate SY DY
 160+ EAED              ;;;                        ClearCarryFlag              ;
 161+ EAED              ;;;                        sbc     hl,de               ;
 162+ EAED              ;;;                        bit     7,h                 ;
 163+ EAED              ;;;                        jr      z,.DYPositive       ;
 164+ EAED              ;;;.DYNegative:            ld      bc,-1               ;
 165+ EAED              ;;;                        jp      .DoneCalcDx         ;
 166+ EAED              ;;;.DYPositive:            NegHL                       ;
 167+ EAED              ;;;                        ld      bc,1                ;
 168+ EAED              ;;;.DoneCalcDy:            ld      (l2_SY),bc          ;
 169+ EAED              ;;;                        ld      (l2_DY),hl
 170+ EAED              ;;;.CalcError:             ld      hl,(l2_DX)
 171+ EAED              ;;;                        ld      de,(l2_DY)
 172+ EAED              ;;;                        add     hl,de
 173+ EAED              ;;;                        ld      (l2_Error),hl
 174+ EAED              ;;;.CalcLoop:              break
 175+ EAED              ;;;                        ld      hl,(l2_X0)          ; get X0 and Y0
 176+ EAED              ;;;.CheckYRange:           ld      de,(l2_Y0)
 177+ EAED              ;;;                        ld      a,d                 ; if Y > 127
 178+ EAED              ;;;                        and     a                   ; or Y is negative
 179+ EAED              ;;;                        jr      nz,.YOutOfRange     ; then we can skip the plot
 180+ EAED              ;;;                        ld      a,e                 ;
 181+ EAED              ;;;                        and     $80                 ;
 182+ EAED              ;;;                        jr      nz,.YOutOfRange     ;
 183+ EAED              ;;;.CheckXRange:           ld      a,h                 ; if X0 is negative
 184+ EAED              ;;;                        and     a
 185+ EAED              ;;;                        jr      z,.XOKToPlot
 186+ EAED              ;;;                        and     $80
 187+ EAED              ;;;                        jr      z,.NotXNegative
 188+ EAED              ;;;.XNegative:             ld      a,0
 189+ EAED              ;;;                        jp      .ClipXDone
 190+ EAED              ;;;.NotXNegative:          ld      a,255
 191+ EAED              ;;;                        jp      .ClipXDone
 192+ EAED              ;;;.XOKToPlot:             ld      a,l                 ; no clip therefore we can just use l
 193+ EAED              ;;;.ClipXDone:             push    hl
 194+ EAED              ;;;                        push    af                  ; using the Y coordinate
 195+ EAED              ;;;                        ld      hl,l2targetArray1   ; plot the X value for this row
 196+ EAED              ;;;                        ld      a,e
 197+ EAED              ;;;                        add     hl,a
 198+ EAED              ;;;                        pop     af
 199+ EAED              ;;;                        ld      (hl),a
 200+ EAED              ;;;                        pop     hl
 201+ EAED              ;;;.YOutOfRange: ; At this point we have either plotted or its outside array range
 202+ EAED              ;;;                        ld      bc,(l2_X1)
 203+ EAED              ;;;.CheckEndXY:            cpHLEquBC .CheckEndXYOK     ; hl will equal X0 still by here
 204+ EAED              ;;;                        jp      nz,.x0x1Differ
 205+ EAED              ;;;.CheckEndXYOK:          ld      bc,(l2_Y1)
 206+ EAED              ;;;                        cpDEEquBC  .x0x1Differ      ; de will equal Y0 still by here
 207+ EAED              ;;;                        ret     z                   ; if they are both the same we are done
 208+ EAED              ;;;.x0x1Differ:
 209+ EAED              ;;;.SetError2:             ld      hl,(l2_Error)       ; e2 = 2 * error
 210+ EAED              ;;;                        add     hl,hl               ; .
 211+ EAED              ;;;                        ld      (l2_E2),hl          ; .
 212+ EAED              ;;;.CheckE2gteDY:          ld      de,(l2_DY)          ; if e2 >= dy
 213+ EAED              ;;;                        call    compare16HLDE       ; .
 214+ EAED              ;;;                        jp      pe, .E2DyParitySet
 215+ EAED              ;;;                        jp      m,  .E2ltDY         ; to get here overflow clear, so if m is set then HL<DE
 216+ EAED              ;;;                        jp      .E2gteDY
 217+ EAED              ;;;.E2DyParitySet:         jp      p,  .E2ltDY         ; if pe is set, then if sign is clear HL<DE
 218+ EAED              ;;;.E2gteDY:               ld      hl,(l2_X0)          ;      if x0 == x1 break
 219+ EAED              ;;;                        ld      de,(l2_X1)          ;      .
 220+ EAED              ;;;                        cpHLEquDE .ErrorUpdateDY    ;      .
 221+ EAED              ;;;                        ret     z                   ;      .
 222+ EAED              ;;;.ErrorUpdateDY:         ld      hl,(l2_Error)       ;      error = error + dy
 223+ EAED              ;;;                        ld      de,(l2_DY)          ;      .
 224+ EAED              ;;;                        add     hl,de               ;      .
 225+ EAED              ;;;                        ld      (l2_Error),hl       ;      .
 226+ EAED              ;;;.UpdateX0:              ld      hl,(l2_X0)          ;      x0 = x0 + sx
 227+ EAED              ;;;                        ld      bc,(l2_SX)          ;      .
 228+ EAED              ;;;                        add     hl,bc               ;      .
 229+ EAED              ;;;                        ld      (l2_X0),hl          ;      .
 230+ EAED              ;;;.E2ltDY:
 231+ EAED              ;;;.CheckE2lteDX:          ld      hl,(l2_E2)          ; if e2 <= dx
 232+ EAED              ;;;                        ld      de,(l2_DX)          ; as we can't do skip on e2>dx
 233+ EAED              ;;;                        call    compare16HLDE       ; we will jump based on e2 <= dx
 234+ EAED              ;;;                        jp      z, .E2lteDX
 235+ EAED              ;;;                        jp      pe, .E2DxParitySet
 236+ EAED              ;;;                        jp      m,  .E2lteDX         ; to get here overflow clear, so if m is set then HL<DE
 237+ EAED              ;;;                        jp      .E2gteDx
 238+ EAED              ;;;.E2DxParitySet:         jp      p,  .E2lteDX
 239+ EAED              ;;;                        jp      .E2gteDx
 240+ EAED              ;;;.E2lteDX:               ld      hl,(l2_Y0)          ;      .
 241+ EAED              ;;;                        ld      de,(l2_Y1)          ;      .
 242+ EAED              ;;;                        cpHLEquDE .ErrorUdpateDX    ;      .
 243+ EAED              ;;;                        ret     z                   ;      .
 244+ EAED              ;;;.ErrorUdpateDX:         ld      hl,(l2_Error)       ;      error = error + dx
 245+ EAED              ;;;                        ld      de,(l2_DX)          ;      .
 246+ EAED              ;;;                        add     hl,de               ;      .
 247+ EAED              ;;;                        ld      (l2_Error),hl       ;      .
 248+ EAED              ;;;.UpdateY0:              ld      hl,(l2_Y0)          ;      x0 = x0 + sx
 249+ EAED              ;;;                        ld      bc,(l2_SY)          ;      .
 250+ EAED              ;;;                        add     hl,bc              ;      .
 251+ EAED              ;;;                        ld      (l2_Y0),hl         ;      .
 252+ EAED              ;;;.E2gteDx:               jp      .CalcLoop           ; repeat until we have a return
 253+ EAED
 254+ EAED
 255+ EAED              ;;;;;;;; for this it myst always be sorted Y0 -> Y2
 256+ EAED              ;;;;;;;;; note we ca't use this to do x? as it will clip inherently
 257+ EAED              ;;;;;;;l2_save_diagnonal_signed_1:
 258+ EAED              ;;;;;;;                        ld		hl,0                            ;
 259+ EAED              ;;;;;;;                        ld		(l2deltaX),hl                   ;
 260+ EAED              ;;;;;;;                        ld		(l2deltaY),hl
 261+ EAED              ;;;;;;;.CheckYOnScreen:        ld      de,(l2_commonTopY)
 262+ EAED              ;;;;;;;                        ld      hl,(l2_bottomY)
 263+ EAED              ;;;;;;;                        ld      a,d
 264+ EAED              ;;;;;;;                        and     h
 265+ EAED              ;;;;;;;                        and     $80
 266+ EAED              ;;;;;;;                        jr      nz,.OffScreen
 267+ EAED              ;;;;;;;;...dy = y1 - y0
 268+ EAED              ;;;;;;;.CalcDeltaY:            ClearCarryFlag
 269+ EAED              ;;;;;;;                        sbc     hl,de                           ; now delta is signed, if its negative then something bad as gone wrong
 270+ EAED              ;;;;;;;                        ld      a,h
 271+ EAED              ;;;;;;;                        and     $80
 272+ EAED              ;;;;;;;                        jr      nz,.OffScreen
 273+ EAED              ;;;;;;;                        ld      (l2deltaY),hl                   ; Delta signed
 274+ EAED              ;;;;;;;CheckXOnScreen:         ld      de,(l2_leftX)
 275+ EAED              ;;;;;;;                        ld      hl,(l2_rightX)
 276+ EAED              ;;;;;;;                        ld      a,d
 277+ EAED              ;;;;;;;                        and     h
 278+ EAED              ;;;;;;;                        and     $80
 279+ EAED              ;;;;;;;                        jr      nz,.OffScreen
 280+ EAED              ;;;;;;;                        ClearCarryFlag
 281+ EAED              ;;;;;;;;...dx = x1 - x0
 282+ EAED              ;;;;;;;.CalcDeltaX:            sbc     hl,de                           ; now delta is signed, could be negative
 283+ EAED              ;;;;;;;                        ld      (l2deltaX),hl                   ; Delta signed
 284+ EAED              ;;;;;;;                        ld      a,h
 285+ EAED              ;;;;;;;                        and     $80
 286+ EAED              ;;;;;;;                        jr      nz,.LeftToRight
 287+ EAED              ;;;;;;;.RightToLeft:           set up instrnctin
 288+ EAED              ;;;;;;;.LeftToRight:           set up instrnctin
 289+ EAED              ;;;;;;;.setErr:									                    ;  LD H  := (D'-E')/2    round up if +ve or down if -ve
 290+ EAED              ;;;;;;;,FracDYltDX:            ld		hl,(l2deltaY)					; Fraction = dY - dX
 291+ EAED              ;;;;;;;                        ld		de,(l2deltaX)
 292+ EAED              ;;;;;;;                        ClearCarryFlag
 293+ EAED              ;;;;;;;                        sbc		hl,de							; sbc does not have an SBC IY so need to do this in HL
 294+ EAED              ;;;;;;;                        ex		de,hl
 295+ EAED              ;;;;;;;                        ld		iyh,d							; we will use IY reg for fractions
 296+ EAED              ;;;;;;;                        ld		iyl,e
 297+ EAED              ;;;;;;;                        jp		p,.fracIsPositive
 298+ EAED              ;;;;;;;
 299+ EAED              ;;;;;;;plotLine(x0, y0, x1, y1)
 300+ EAED              ;;;;;;;    dx = x1 - x0
 301+ EAED              ;;;;;;;    dy = y1 - y0
 302+ EAED              ;;;;;;;    D = 2*dy - dx
 303+ EAED              ;;;;;;;    y = y0
 304+ EAED              ;;;;;;;
 305+ EAED              ;;;;;;;    for x from x0 to x1
 306+ EAED              ;;;;;;;        plot(x,y)
 307+ EAED              ;;;;;;;        if D > 0
 308+ EAED              ;;;;;;;            y = y + 1
 309+ EAED              ;;;;;;;            D = D - 2*dx
 310+ EAED              ;;;;;;;        end if
 311+ EAED              ;;;;;;;        D = D + 2*dy
 312+ EAED              ;;;;;;;
 313+ EAED
 314+ EAED
 315+ EAED
 316+ EAED              ;;;;;.fracIsNegative:        NegIY
 317+ EAED              ;;;;;                        ShiftIYRight1
 318+ EAED              ;;;;;                        NegIY
 319+ EAED              ;;;;;                        jp		.SkipCalcInc					; so we have a negative frac
 320+ EAED              ;;;;;.fracIsPositive:        ShiftIYRight1
 321+ EAED              ;;;;;.SkipCalcInc:		                        			    	; As we loop, bc = to plot current XY
 322+ EAED              ;;;;;.preTargetArray:	    ld		hl,l2targetArray1               ; Assuming row 0
 323+ EAED              ;;;;;l2S_setTarget:	        ld		(l2targetPtr),hl
 324+ EAED              ;;;;;                                                                ; set DE to current row
 325+ EAED              ;;;;;.S_Loop:			    ld		hl,(l2targetPtr)				; Insert into respective array
 326+ EAED              ;;;;;                                                                ; calculate current row
 327+ EAED              ;;;;;                                                                ; if current row >= 0
 328+ EAED              ;;;;;                                                                ; write current X value in DE to (hl)
 329+ EAED              ;;;;;                        ld		a,b
 330+ EAED              ;;;;;                        add		hl,a
 331+ EAED              ;;;;;                        ld		(hl),c
 332+ EAED              ;;;;;l2S_CheckIfEnd:	        ld		a,ixh
 333+ EAED              ;;;;;                        JumpIfAGTENusng	  b,l2S_CheckXPos		; if Y1 < Y2 then continue regardless, when it hits Y2 then we must check X1 and X2
 334+ EAED              ;;;;;                        jp		l2S_Continue
 335+ EAED              ;;;;;l2S_CheckXPos:          ld      a,(l2S_adjustCol)
 336+ EAED              ;;;;;                        cp      l2inccstep; if we self modified to inc the we can do a cp e else its cp c
 337+ EAED              ;;;;;                        jr      z,.IncCP
 338+ EAED              ;;;;;.DecCP:                 ld      a,c
 339+ EAED              ;;;;;                        ReturnIfALTNusng ixl
 340+ EAED              ;;;;;                        ReturnIfAEqNusng ixl
 341+ EAED              ;;;;;                        jp      l2S_Continue
 342+ EAED              ;;;;;.IncCP:                 ld		a,c
 343+ EAED              ;;;;;                        ReturnIfAGTENusng ixl					; if X1 has reached or exceeded X2 then we are done
 344+ EAED              ;;;;;l2S_Continue:
 345+ EAED              ;;;;;l2S_HNegative:			ld		a,iyh
 346+ EAED              ;;;;;                        bit		7,a								; if its negative then we need to deal with delta Y, there is no bit n,iyh instrunction
 347+ EAED              ;;;;;                        jr		z,l2S_ErrNotNegative			;
 348+ EAED              ;;;;;l2S_ErrNegative:		ld		a,(l2deltaY)					; if its a negative error update X
 349+ EAED              ;;;;;                        ld		d,0
 350+ EAED              ;;;;;                        ld		e,a
 351+ EAED              ;;;;;                        add		iy,de							; add deltaY(unsinged) to l2fraction
 352+ EAED              ;;;;;l2S_adjustCol:          nop										; this is our inc/dec of X
 353+ EAED              ;;;;;                        jr		l2S_Loop							; repeat loop
 354+ EAED              ;;;;;l2S_ErrNotNegative:     ld		a,iyh
 355+ EAED              ;;;;;                        or		iyl
 356+ EAED              ;;;;;                        JumpIfAIsZero l2S_ErrZero					; if there is no error then goto zeroerror
 357+ EAED              ;;;;;l2S_ErrPositive:        ld      de,iy;  lddeiy								; if its a positive error then we update Y
 358+ EAED              ;;;;;                        ex		de,hl
 359+ EAED              ;;;;;                        ld		d,0
 360+ EAED              ;;;;;                        ld		a,(l2deltaX)
 361+ EAED              ;;;;;                        ld		e,a
 362+ EAED              ;;;;;                        ClearCarryFlag
 363+ EAED              ;;;;;                        sbc		hl,de
 364+ EAED              ;;;;;                        ex		de,hl
 365+ EAED              ;;;;;                        ld      iy,de;ldiyde
 366+ EAED              ;;;;;l2S_adjustRow:          inc		b								; move Y down by one
 367+ EAED              ;;;;;                        jr		l2S_Loop
 368+ EAED              ;;;;;l2S_ErrZero:            ld		hl,(l2deltaX)
 369+ EAED              ;;;;;                        ex		de,hl
 370+ EAED              ;;;;;                        ld		hl,(l2deltaY)
 371+ EAED              ;;;;;                        ClearCarryFlag
 372+ EAED              ;;;;;                        sbc		hl,de
 373+ EAED              ;;;;;                        ex		de,hl
 374+ EAED              ;;;;;                        ld      iy,de; ldiyde
 375+ EAED              ;;;;;l2S_adjustCol2:         nop										; update X and Y
 376+ EAED              ;;;;;                        inc		b
 377+ EAED              ;;;;;                        jr		l2S_Loop
 378+ EAED              ;;;;;
 379+ EAED              ;;;;;.OffScreen:             SetCarryFlag
 380+ EAED              ;;;;;                        ret
 381+ EAED              ;;;;;
 382+ EAED              ;;;;;
 383+ EAED
 384+ EAED                      IFDEF L2_DIAGONAL_SAVE
 385+ EAED ~            l2_draw_diagonal_save:  cp		1
 386+ EAED ~                                    jr		z,l2S_ItsArray1
 387+ EAED ~                                    ld		hl,l2targetArray2
 388+ EAED ~                                    jp		l2S_setTarget
 389+ EAED ~            l2S_ItsArray1:	        ld		hl,l2targetArray1
 390+ EAED ~            l2S_setTarget:	        ld		(l2targetPtr),hl
 391+ EAED ~            ; ">l2_draw_diagonal, bc = y0,x0 de=y1,x1,a=color) Thsi version performs a pre sort based on y axis"
 392+ EAED ~                                    ld		(l2linecolor),a					;save colour for later
 393+ EAED ~                                    ld		hl,0                            ;
 394+ EAED ~                                    ld		(l2deltaX),hl                   ;
 395+ EAED ~                                    ld		(l2deltaY),hl                   ; initlaise deltas as we will only be loading 8 bit in there but workign in 16 bit later
 396+ EAED ~            l2S_preSort:            ld		a,b								;
 397+ EAED ~                                    JumpIfALTNusng	d,l2S_noYSort			; we must have Y1 < Y2 (if eqyal then verical line picked up earlier
 398+ EAED ~            l2S_SortBasedOnY:	    ldhlbc									;
 399+ EAED ~                                    ex		de,hl                           ;
 400+ EAED ~                                    ldbchl									; swap over bc and de using hl as an intermediate
 401+ EAED ~            l2S_noYSort:		    ld		ixh,d							; ixh now holds target Y coord post sorting
 402+ EAED ~                                    ld		ixl,e							; ixl now holds target X coord post sorting
 403+ EAED ~            l2S_setXLen:            ld		a,c                             ;
 404+ EAED ~                                    JumpIfALTNusng e,l2S_PosXLen			; if x1 < x2 then we have a positive increment
 405+ EAED ~            l2S_NegXLen:            ld		a,c                             ;
 406+ EAED ~                                    sub     e                               ;
 407+ EAED ~                                    ld		(l2deltaX),a					; As x1 > x2 we do deltaX = X1 - X2
 408+ EAED ~                                    ld		a,l2deccstep					; and set the value for inc dec self modifying to Dec
 409+ EAED ~                                    jr		l2S_XINCDEC
 410+ EAED ~            ; we set comparison
 411+ EAED ~            l2S_PosXLen:	        ld		a,e                             ;
 412+ EAED ~                                    sub		c                               ;
 413+ EAED ~                                    ld 		(l2deltaX),a                    ; As x1 < x2 we do deltaX = X2 - X1
 414+ EAED ~                                    ld		a,l2inccstep                    ; and set the value for inc dec self modifying to Inc
 415+ EAED ~            ; also need to fix the comparison, if its +x then compare with
 416+ EAED ~            l2S_XINCDEC:	        ld		(l2S_adjustCol),a				;
 417+ EAED ~                                    ld		(l2S_adjustCol2),a				; update self modifying code for X update with inc or dec from above
 418+ EAED ~            l2S_setYLen:            ld		a,d							 	; presorted on Y so it is now always positive
 419+ EAED ~                                    sub		b
 420+ EAED ~                                    ld 		(l2deltaY),a					; DeltaY = Y2 - Y1
 421+ EAED ~            l2S_setErr:									;  LD H  := (D'-E')/2    round up if +ve or down if -ve
 422+ EAED ~            ldS_FracDYltDX:         ld		hl,(l2deltaY)					; Fraction = dY - dX
 423+ EAED ~                                    ld		de,(l2deltaX)
 424+ EAED ~                                    ClearCarryFlag
 425+ EAED ~                                    sbc		hl,de							; sbc does not have an SBC IY so need to do this in HL
 426+ EAED ~                                    ex		de,hl
 427+ EAED ~                                    ld		iyh,d							; we will use IY reg for fractions
 428+ EAED ~                                    ld		iyl,e
 429+ EAED ~                                    jp		p,l2S_fracIsPositive
 430+ EAED ~            l2S_fracIsNegative:     NegIY
 431+ EAED ~                                    ShiftIYRight1
 432+ EAED ~                                    NegIY
 433+ EAED ~                                    jp		l2S_SkipCalcInc					; so we have a negative frac
 434+ EAED ~            l2S_fracIsPositive:     ShiftIYRight1
 435+ EAED ~            l2S_SkipCalcInc:		                        				; As we loop, bc = to plot current XY
 436+ EAED ~            l2S_Loop:			    ld		hl,(l2targetPtr)				; Insert into respective array
 437+ EAED ~                                    ld		a,b
 438+ EAED ~                                    add		hl,a
 439+ EAED ~                                    ld		(hl),c
 440+ EAED ~            l2S_CheckIfEnd:	        ld		a,ixh
 441+ EAED ~                                    JumpIfAGTENusng	  b,l2S_CheckXPos		; if Y1 < Y2 then continue regardless, when it hits Y2 then we must check X1 and X2
 442+ EAED ~                                    jp		l2S_Continue
 443+ EAED ~            l2S_CheckXPos:          ld      a,(l2S_adjustCol)
 444+ EAED ~                                    cp      l2inccstep; if we self modified to inc the we can do a cp e else its cp c
 445+ EAED ~                                    jr      z,.IncCP
 446+ EAED ~            .DecCP:                 ld      a,c
 447+ EAED ~                                    ReturnIfALTNusng ixl
 448+ EAED ~                                    ReturnIfAEqNusng ixl
 449+ EAED ~                                    jp      l2S_Continue
 450+ EAED ~            .IncCP:                 ld		a,c
 451+ EAED ~                                    ReturnIfAGTENusng ixl					; if X1 has reached or exceeded X2 then we are done
 452+ EAED ~            l2S_Continue:
 453+ EAED ~            l2S_HNegative:			ld		a,iyh
 454+ EAED ~                                    bit		7,a								; if its negative then we need to deal with delta Y, there is no bit n,iyh instrunction
 455+ EAED ~                                    jr		z,l2S_ErrNotNegative			;
 456+ EAED ~            l2S_ErrNegative:		ld		a,(l2deltaY)					; if its a negative error update X
 457+ EAED ~                                    ld		d,0
 458+ EAED ~                                    ld		e,a
 459+ EAED ~                                    add		iy,de							; add deltaY(unsinged) to l2fraction
 460+ EAED ~            l2S_adjustCol:          nop										; this is our inc/dec of X
 461+ EAED ~                                    jr		l2S_Loop							; repeat loop
 462+ EAED ~            l2S_ErrNotNegative:     ld		a,iyh
 463+ EAED ~                                    or		iyl
 464+ EAED ~                                    JumpIfAIsZero l2S_ErrZero					; if there is no error then goto zeroerror
 465+ EAED ~            l2S_ErrPositive:        ld      de,iy;  lddeiy								; if its a positive error then we update Y
 466+ EAED ~                                    ex		de,hl
 467+ EAED ~                                    ld		d,0
 468+ EAED ~                                    ld		a,(l2deltaX)
 469+ EAED ~                                    ld		e,a
 470+ EAED ~                                    ClearCarryFlag
 471+ EAED ~                                    sbc		hl,de
 472+ EAED ~                                    ex		de,hl
 473+ EAED ~                                    ld      iy,de;ldiyde
 474+ EAED ~            l2S_adjustRow:          inc		b								; move Y down by one
 475+ EAED ~                                    jr		l2S_Loop
 476+ EAED ~            l2S_ErrZero:            ld		hl,(l2deltaX)
 477+ EAED ~                                    ex		de,hl
 478+ EAED ~                                    ld		hl,(l2deltaY)
 479+ EAED ~                                    ClearCarryFlag
 480+ EAED ~                                    sbc		hl,de
 481+ EAED ~                                    ex		de,hl
 482+ EAED ~                                    ld      iy,de; ldiyde
 483+ EAED ~            l2S_adjustCol2:         nop										; update X and Y
 484+ EAED ~                                    inc		b
 485+ EAED ~                                    jr		l2S_Loop
 486+ EAED                      ENDIF
 487+ EAED                      DEFINE  L2_DRAW_DIAGONAL 1
 488+ EAED                      IFDEF L2_DRAW_DIAGONAL
 489+ EAED              ; ">l2_draw_diagonal, bc = y0,x0 de=y1,x1,a=color) Thsi version performs a pre sort based on y axis"
 490+ EAED 32 E5 E8     l2_draw_diagonal:       ld		(l2linecolor),a					;save colour for later
 491+ EAF0 21 00 00                             ld		hl,0                            ;
 492+ EAF3 22 DD E8                             ld		(l2deltaX),hl                   ;
 493+ EAF6 22 DB E8                             ld		(l2deltaY),hl                   ; initlaise deltas as we will only be loading 8 bit in there but workign in 16 bit later
 494+ EAF9 78           l2D_preSort:            ld		a,b								;
 495+ EAFA                                      JumpIfALTNusng	d,l2D_noYSort			; we must have Y1 < Y2 (if equal then verical line picked up earlier
 495+ EAFA BA          >                        cp      d
 495+ EAFB DA 03 EB    >                        jp		c, l2D_noYSort
 496+ EAFE              l2D_SortBasedOnY:	    ldhlbc									;
 496+ EAFE 60          >                        ld		h,b
 496+ EAFF 69          >                        ld		l,c
 497+ EB00 EB                                   ex		de,hl                           ;
 498+ EB01                                      ldbchl									; swap over bc and de using hl as an intermediate
 498+ EB01 44          >                        ld		b,h
 498+ EB02 4D          >                        ld		c,l
 499+ EB03 DD 62        l2D_noYSort:		    ld		ixh,d							; ixh now holds target Y coord post sorting
 500+ EB05 DD 6B                                ld		ixl,e							; ixl now holds target X coord post sorting
 501+ EB07 79           l2D_setXLen:            ld		a,c                             ;
 502+ EB08                                      JumpIfALTNusng e,l2D_PosXLen			; if x1 < x2 then we have a positive increment
 502+ EB08 BB          >                        cp      e
 502+ EB09 DA 15 EB    >                        jp		c, l2D_PosXLen
 503+ EB0C 79           l2D_NegXLen:            ld		a,c                             ;
 504+ EB0D 93                                   sub     e                               ;
 505+ EB0E 32 DD E8                             ld		(l2deltaX),a					; As x1 > x2 we do deltaX = X1 - X2
 506+ EB11 3E 0D                                ld		a,l2deccstep					; and set the value for inc dec self modifying to Dec
 507+ EB13 18 07                                jr		l2D_XINCDEC
 508+ EB15 7B           l2D_PosXLen:	        ld		a,e                             ;
 509+ EB16 91                                   sub		c                               ;
 510+ EB17 32 DD E8                             ld 		(l2deltaX),a                    ; As x1 < x2 we do deltaX = X2 - X1
 511+ EB1A 3E 0C                                ld		a,l2inccstep                    ; and set the value for inc dec self modifying to Inc
 512+ EB1C 32 97 EB     l2D_XINCDEC:	        ld		(l2D_adjustCol),a				;
 513+ EB1F 32 C7 EB                             ld		(l2D_adjustCol2),a				; update self modifying code for X update with inc or dec from above
 514+ EB22 7A           l2D_setYLen				ld		a,d							 	; presorted on Y so it is now always positive
 515+ EB23 90                                   sub		b
 516+ EB24 32 DB E8                             ld 		(l2deltaY),a					; DeltaY = Y2 - Y1
 517+ EB27              l2D_setErr:									;  LD H  := (D'-E')/2    round up if +ve or down if -ve
 518+ EB27 2A DB E8     ldD_FracDYltDX:			ld		hl,(l2deltaY)					; Fraction = dY - dX
 519+ EB2A ED 5B DD E8                          ld		de,(l2deltaX)
 520+ EB2E                                      ClearCarryFlag
 520+ EB2E B7          >                        or a
 521+ EB2F ED 52                                sbc		hl,de							; sbc does not have an SBC IY so need to do this in HL
 522+ EB31 EB                                   ex		de,hl
 523+ EB32 FD 62                                ld		iyh,d							; we will use IY reg for fractions
 524+ EB34 FD 6B                                ld		iyl,e
 525+ EB36 F2 5B EB                             jp		p,l2D_fracIsPositive
 526+ EB39              l2D_fracIsNegative:     NegIY
 526+ EB39 AF          >                    xor a
 526+ EB3A FD 95       >                    sub iyl
 526+ EB3C FD 6F       >                    ld iyl,a
 526+ EB3E 9F          >                    sbc a,a
 526+ EB3F FD 94       >                    sub iyh
 526+ EB41 FD 67       >                    ld iyh,a
 527+ EB43                                      ShiftIYRight1
 527+ EB43 FD 7C       >			   ld 	a,iyh
 527+ EB45 CB 3F       >			   srl 	a
 527+ EB47 FD 67       >			   ld	iyh,a
 527+ EB49 FD 7D       >			   ld 	a,iyl
 527+ EB4B 1F          >			   rra
 527+ EB4C FD 6F       >			   ld	iyl,a
 528+ EB4E                                      NegIY
 528+ EB4E AF          >                    xor a
 528+ EB4F FD 95       >                    sub iyl
 528+ EB51 FD 6F       >                    ld iyl,a
 528+ EB53 9F          >                    sbc a,a
 528+ EB54 FD 94       >                    sub iyh
 528+ EB56 FD 67       >                    ld iyh,a
 529+ EB58 C3 66 EB                             jp		l2D_SkipCalcInc					; so we have a negative frac
 530+ EB5B              l2D_fracIsPositive:     ShiftIYRight1
 530+ EB5B FD 7C       >			   ld 	a,iyh
 530+ EB5D CB 3F       >			   srl 	a
 530+ EB5F FD 67       >			   ld	iyh,a
 530+ EB61 FD 7D       >			   ld 	a,iyl
 530+ EB63 1F          >			   rra
 530+ EB64 FD 6F       >			   ld	iyl,a
 531+ EB66              l2D_SkipCalcInc:
 532+ EB66 C5 D5        l2D_Loop:				push	bc,,de                 			; l2DeltaY and l2DeltaX are set
 533+ EB68 3A E5 E8                             ld		a,(l2linecolor)     			;
 534+ EB6B                                      l2_plot_macro;call	l2_plot_pixel       			; Plot Pixel
 534+ EB6B 78          >                        ld      a,b
 534+ EB6C             >                        JumpIfAGTENusng 192 ,.NoPlot
 534+ EB6C FE C0       >                        cp     192
 534+ EB6E D2 7A EB    >                        jp		nc,.NoPlot
 534+ EB71 69          >                        ld      l,c
 534+ EB72 CD 78 E0    >                        call    asm_l2_row_bank_select
 534+ EB75 67          >                        ld      h,a
 534+ EB76 3A 22 E4    >                        ld      a,(line_gfx_colour)
 534+ EB79 77          >                        ld      (hl),a
 534+ EB7A             >.NoPlot:
 535+ EB7A D1 C1                                pop     bc,,de
 536+ EB7C DD 7C        l2D_CheckIfEnd:	        ld		a,ixh
 537+ EB7E                                      JumpIfAGTENusng	  b,l2D_CheckXPos		; if Y1 < Y2 then continue regardless, when it hits Y2 then we must check X1 and X2
 537+ EB7E B8          >                        cp     b
 537+ EB7F D2 85 EB    >                        jp		nc,l2D_CheckXPos
 538+ EB82 C3 89 EB                             jp		l2D_Continue
 539+ EB85 79           l2D_CheckXPos:          ld		a,c
 540+ EB86                                      ReturnIfAEqNusng ixl					; if X1 has reached or exceeded X2 then we are done
 540+ EB86 DD BD       >                        cp      ixl
 540+ EB88 C8          >                        ret     z
 541+ EB89              l2D_Continue:
 542+ EB89 FD 7C        l2D_HNegative:			ld		a,iyh
 543+ EB8B CB 7F                                bit		7,a								; if its negative then we need to deal with delta Y, there is no bit n,iyh instrunction
 544+ EB8D 28 0B                                jr		z,l2D_ErrNotNegative			;
 545+ EB8F 3A DB E8     l2D_ErrNegative:		ld		a,(l2deltaY)
 546+ EB92 16 00                                ld		d,0
 547+ EB94 5F                                   ld		e,a
 548+ EB95 FD 19                                add		iy,de							; add deltaY(unsinged) to l2fraction
 549+ EB97 00           l2D_adjustCol:          nop										; this is our inc/dec of X
 550+ EB98 18 CC                                jr		l2D_Loop							; repeat loop
 551+ EB9A FD 7C        l2D_ErrNotNegative:     ld		a,iyh
 552+ EB9C FD B5                                or		iyl
 553+ EB9E                                      JumpIfAIsZero l2D_ErrZero					; if there is no error then goto zeroerror
 553+ EB9E A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
 553+ EB9F CA B8 EB    >                        jp	    z, l2D_ErrZero
 554+ EBA2 FD 54 FD 5D  l2D_ErrPositive:		ld      de,iy;lddeiy
 555+ EBA6 EB                                   ex		de,hl
 556+ EBA7 16 00                                ld		d,0
 557+ EBA9 3A DD E8                             ld		a,(l2deltaX)
 558+ EBAC 5F                                   ld		e,a
 559+ EBAD                                      ClearCarryFlag
 559+ EBAD B7          >                        or a
 560+ EBAE ED 52                                sbc		hl,de
 561+ EBB0 EB                                   ex		de,hl
 562+ EBB1 FD 62 FD 6B                          ld      iy,de;ldiyde
 563+ EBB5 04           l2D_adjustRow:			inc		b
 564+ EBB6 18 AE                                jr		l2D_Loop
 565+ EBB8 2A DD E8     l2D_ErrZero:            ld		hl,(l2deltaX)
 566+ EBBB EB                                   ex		de,hl
 567+ EBBC 2A DB E8                             ld		hl,(l2deltaY)
 568+ EBBF                                      ClearCarryFlag
 568+ EBBF B7          >                        or a
 569+ EBC0 ED 52                                sbc		hl,de
 570+ EBC2 EB                                   ex		de,hl
 571+ EBC3 FD 62 FD 6B                          ld      iy,de;ldiyde
 572+ EBC7 00           l2D_adjustCol2:         nop										; update X and Y
 573+ EBC8 04                                   inc		b
 574+ EBC9 18 9B                                jr		l2D_Loop
 575+ EBCB              ;----------------------------------------------------------------------------------------------------------------------------------
 576+ EBCB                      ENDIF
 577+ EBCB
 578+ EBCB
 579+ EBCB
 580+ EBCB              ;Loin:				; BBC version of line draw
 581+ EBCB              ;; ">l2_draw_diagonal, bc = y0,x0 de=y1,x1,a=color)"
 582+ EBCB              ;	ld		(l2linecolor),a					; save colour as a reg gets used alot, coudl move this into interrupt flag and disable interrups
 583+ EBCB              ;	ld		ixh,0							; ixh = s
 584+ EBCB              ;	ld		iyh,0							; iyh = swap
 585+ EBCB              ;	ld		l,0								; l will hold delta sign flags
 586+ EBCB              ;LoinCalcDeltaX:
 587+ EBCB              ;	ld		a,e
 588+ EBCB              ;	sub		c								; a = deltaX
 589+ EBCB              ;	JumpIfPositive LoinPosDx
 590+ EBCB              ;LoinNegDx:
 591+ EBCB              ;	neg										; carry flag will indicate deltaX was negative
 592+ EBCB              ;	ld		l,$80							; set bit 7 of l for negative
 593+ EBCB              ;LoinPosDx:
 594+ EBCB              ;	ld		ixl,a							; ixl = varP = deltaX
 595+ EBCB              ;LoinCalcDeltaY:
 596+ EBCB              ;	ld		a,d
 597+ EBCB              ;	sub		b								; a= deltaY
 598+ EBCB              ;	JumpIfPositive LoinPosDy
 599+ EBCB              ;LoinNegDy:
 600+ EBCB              ;	neg
 601+ EBCB              ;	set		6,l								; set bit 6 of l for negative deltaY
 602+ EBCB              ;LoinPosDy:
 603+ EBCB              ;	ld		iyl,a							; iyl = varQ = deltaY
 604+ EBCB              ;	JumpIfAGTENusng ixl, LoinSTPy			; if deltaY >= DeltaX then step along Y
 605+ EBCB              ;LoinSTPx:									; step along X
 606+ EBCB              ;	JumpOnBitClear l,7						; if l flags were clear then X2 < X2
 607+ EBCB              ;LoinSTPxSwapCoords:
 608+ EBCB              ;	dec		iyh								; swap flag now becomes FF
 609+ EBCB              ;	ld		a,l								; save l flags
 610+ EBCB              ;	ex		de,hl							; save de to hl
 611+ EBCB              ;	lddebc									; Point2 = point1
 612+ EBCB              ;	ldbchl									; Point1 = point2 that was saved
 613+ EBCB              ;	ld		l,a								; get back l flags
 614+ EBCB              ;LoinSTPxCorrectOrder:
 615+ EBCB              ;	l2_point_pixel_y_safe					; call plot pixel preseving bc hl
 616+ EBCB              ;	ld		a,iyl							; get delta Y back
 617+ EBCB              ;	ld		iy1,$FE							; roll counter
 618+ EBCB              ;LionSTPxRollQ:
 619+ EBCB              ;	sla		a								; highest bit of delta-Y
 620+ EBCB              ;	jp		c,LoinSTPxSteep
 621+ EBCB              ;	cp		ixl								; compare with DeltaX
 622+ EBCB              ;	jp		cs,LoinSTPxShallow
 623+ EBCB              ;LoinSTPxSteep:								;; LI4
 624+ EBCB              ;	sbc		a,ixl							; deltaYwork -= (deltaX+1)
 625+ EBCB              ;	scf										; force carry flag set
 626+ EBCB              ;LoinSTPxShallow:							;; LI5
 627+ EBCB              ;	rl		iyl								; rotate iyl which started as FE
 628+ EBCB              ;	jp		c,LionSTPxRollQ					; so we are doing a 6 bit loop
 629+ EBCB              ;	inc		ihl								; DeltaX += 1
 630+ EBCB              ;LoinSTPxYDirection:							; change this to self modifying code
 631+ EBCB              ;	ld		a,d
 632+ EBCB              ;	JumpIfAGTEn	b,LionDOWN:
 633+ EBCB              ;	ld		a,iyh							; swap flag
 634+ EBCB              ;	JumpIfANotZero	X1Inc  					; if swap flag was not set then no need to update R
 635+ EBCB              ;LoinSTPxX1Dec:
 636+ EBCB              ;	dec		c								; move left 1 pixel as we sawped
 637+ EBCB              ;LoinSTPxXCounter:							;; LIL2
 638+ EBCB              ;	sub		b
 639+ EBCB              ;	if
 640+ EBCB              ;
 641+ EBCB              ;85 82                   STA &82	   \ R	\ mask byte
 642+ EBCB              ;A5 81                   LDA &81	   \ Q	\ delta-Y
 643+ EBCB              ;A2 FE                   LDX #&FE	\ roll counter
 644+ EBCB              ;86 81                   STX &81		\ Q
 645+ EBCB              ;.LIL1	\ roll Q
 646+ EBCB              ;0A                      ASL A		\ highest bit of delta-Y
 647+ EBCB              ;B0 04                   BCS LI4		\ steep
 648+ EBCB              ;C5 1B                   CMP &1B	   \ P	\ delta-X
 649+ EBCB              ;90 03                   BCC LI5		\ shallow
 650+ EBCB              ;.LI4	\ steep
 651+ EBCB              ;E5 1B                   SBC &1B		\ P
 652+ EBCB              ;38                      SEC
 653+ EBCB              ;.LI5	\ shallow
 654+ EBCB              ;26 81                   ROL &81	   \ Q	\ #&FE
 655+ EBCB              ;B0 F2                   BCS LIL1 	\ loop Q, end with some low bits in Q
 656+ EBCB              ;A6 1B                   LDX &1B		\ P
 657+ EBCB              ;E8                      INX 		\ Xreg is width
 658+ EBCB              ;A5 37                   LDA &37		\ Y2
 659+ EBCB              ;E5 35                   SBC &35		\ Y1
 660+ EBCB              ;B0 2C                   BCS DOWN	\ draw line to the right and down
 661+ EBCB              ;A5 90                   LDA &90		\ SWAP
 662+ EBCB              ;D0 07                   BNE LI6		\ else Xreg was correct after all, no need to update R
 663+ EBCB              ;CA                      DEX
 664+ EBCB              ;.LIL2	\ counter X width
 665+ EBCB              ;A5 82                   LDA &82	   \ R	\ mask byte
 666+ EBCB              ;51 07                   EOR (&07),Y	\ (SC),Y
 667+ EBCB              ;91 07                   STA (&07),Y	\ (SC),Y
 668+ EBCB              ;.LI6	\ Xreg correct
 669+ EBCB              ;46 82                   LSR &82	   \ R	\ mask byte
 670+ EBCB              ;90 08                   BCC LI7   	\ else moving to next column to right. Bring carry in back
 671+ EBCB              ;66 82                   ROR &82		\ R
 672+ EBCB              ;A5 07                   LDA &07		\ SC
 673+ EBCB              ;69 08                   ADC #8		\ next column
 674+ EBCB              ;85 07                   STA &07		\ SC
 675+ EBCB              ;.LI7	\ S += Q. this is like an overflow monitor to update Y
 676+ EBCB              ;A5 83                   LDA &83		\ S
 677+ EBCB              ;65 81                   ADC &81	   \ Q	\ some low bits
 678+ EBCB              ;85 83                   STA &83		\ S
 679+ EBCB              ;90 07                   BCC LIC2	\ skip Y adjustment
 680+ EBCB              ;88                      DEY
 681+ EBCB              ;10 04                   BPL LIC2	\ skip Y adjustment
 682+ EBCB              ;C6 08                   DEC &08		\ SC+1
 683+ EBCB              ;A0 07                   LDY #7
 684+ EBCB              ;.LIC2	\ skip Y adjustment
 685+ EBCB              ;CA                      DEX
 686+ EBCB              ;D0 DC                   BNE LIL2	\ loop X width
 687+ EBCB              ;A4 85                   LDY &85	 \ YSAV \ restore Yreg
 688+ EBCB              ;60                      RTS
 689+ EBCB              ;
 690+ EBCB              ;.DOWN	\ Line is going to the right and down
 691+ EBCB              ;A5 90                   LDA &90		\ SWAP
 692+ EBCB              ;F0 07                   BEQ LI9		\ no swap
 693+ EBCB              ;CA                      DEX
 694+ EBCB              ;.LIL3	\ counter X width
 695+ EBCB              ;A5 82                   LDA &82	    \ R \ mask byte
 696+ EBCB              ;51 07                   EOR (&07),Y	\ (SC),Y
 697+ EBCB              ;91 07                   STA (&07),Y	\ (SC),Y
 698+ EBCB              ;.LI9	\ no swap
 699+ EBCB              ;46 82                   LSR &82		\ R
 700+ EBCB              ;90 08                   BCC LI10	\ still in correct column, hop
 701+ EBCB              ;66 82                   ROR &82		\ R
 702+ EBCB              ;A5 07                   LDA &07		\ SC
 703+ EBCB              ;69 08                   ADC #8		\ next column
 704+ EBCB              ;85 07                   STA &07		\ SC
 705+ EBCB              ;.LI10	\ this is like an overflow monitor to update Y
 706+ EBCB              ;A5 83                   LDA &83		\ S
 707+ EBCB              ;65 81                   ADC &81		\ Q
 708+ EBCB              ;85 83                   STA &83		\ S
 709+ EBCB              ;90 09                   BCC LIC3	\ skip Y adjustment
 710+ EBCB              ;C8                      INY
 711+ EBCB              ;C0 08                   CPY #8
 712+ EBCB              ;D0 04                   BNE LIC3	\ have not reached bottom byte of char, hop
 713+ EBCB              ;E6 08                   INC &08		\ SC+1
 714+ EBCB              ;A0 00                   LDY #0
 715+ EBCB              ;.LIC3	\ skipped Y adjustment
 716+ EBCB              ;CA                      DEX
 717+ EBCB              ;D0 DA                   BNE LIL3	\ loop X width
 718+ EBCB              ;A4 85                   LDY &85	 \ YSAV \ restore Yreg
 719+ EBCB              ;60                      RTS
 720+ EBCB              ;
 721+ EBCB              ;.STPY	\ -> &1797 \ Step along y for line, goes down and to right
 722+ EBCB              ;A4 35                   LDY &35		\ Y1
 723+ EBCB              ;98                      TYA
 724+ EBCB              ;A6 34                   LDX &34		\ X1
 725+ EBCB              ;C4 37                   CPY &37		\ Y2
 726+ EBCB              ;B0 10                   BCS LI15	\ skip swap if Y1 >= Y2
 727+ EBCB              ;C6 90                   DEC &90		\ SWAP
 728+ EBCB              ;A5 36                   LDA &36		\ X2
 729+ EBCB              ;85 34                   STA &34		\ X1
 730+ EBCB              ;86 36                   STX &36		\ X2
 731+ EBCB              ;AA                      TAX
 732+ EBCB              ;A5 37                   LDA &37		\ Y2
 733+ EBCB              ;85 35                   STA &35		\ Y1
 734+ EBCB              ;84 37                   STY &37		\ Y2
 735+ EBCB              ;A8                      TAY
 736+ EBCB              ;.LI15	\ Y1 Y2 order is now correct
 737+ EBCB              ;4A                      LSR A
 738+ EBCB              ;4A                      LSR A
 739+ EBCB              ;4A                      LSR A
 740+ EBCB              ;09 60                   ORA #&60
 741+ EBCB              ;85 08                   STA &08	 \ SC+1	\ screen hi
 742+ EBCB              ;8A                      TXA 		\ X1
 743+ EBCB              ;29 F8                   AND #&F8
 744+ EBCB              ;85 07                   STA &07	  \ SC	\ screen lo
 745+ EBCB              ;8A                      TXA
 746+ EBCB              ;29 07                   AND #7		\ mask index
 747+ EBCB              ;AA                      TAX
 748+ EBCB              ;BD AF 16                LDA &16AF,X \ TWOS,X \ Mode4 single pixel
 749+ EBCB              ;85 82                   STA &82	    \ R	\ mask
 750+ EBCB              ;A5 35                   LDA &35		\ Y1
 751+ EBCB              ;29 07                   AND #7
 752+ EBCB              ;A8                      TAY
 753+ EBCB              ;A5 1B                   LDA &1B	    \ P	\ delta-X
 754+ EBCB              ;A2 01                   LDX #1		\ roll counter
 755+ EBCB              ;86 1B                   STX &1B	    	\ P
 756+ EBCB              ;.LIL4	\ roll P
 757+ EBCB              ;0A                      ASL A
 758+ EBCB              ;B0 04                   BCS LI13	\ do subtraction
 759+ EBCB              ;C5 81                   CMP &81	    \ Q	\ delta-Y
 760+ EBCB              ;90 03                   BCC LI14	\ less than Q
 761+ EBCB              ;.LI13	\ do subtraction
 762+ EBCB              ;E5 81                   SBC &81		\ Q
 763+ EBCB              ;38                      SEC
 764+ EBCB              ;.LI14	\ less than Q
 765+ EBCB              ;26 1B                   ROL &1B		\ P
 766+ EBCB              ;90 F2                   BCC LIL4	\ loop P, end with some low bits in P
 767+ EBCB              ;A6 81                   LDX &81		\ Q
 768+ EBCB              ;E8                      INX 		\ adjust height
 769+ EBCB              ;A5 36                   LDA &36		\ X2
 770+ EBCB              ;E5 34                   SBC &34		\ X1
 771+ EBCB              ;90 2D                   BCC LFT		\ if C cleared then line moving to the left - hop down
 772+ EBCB              ;18                      CLC
 773+ EBCB              ;A5 90                   LDA &90		\ SWAP
 774+ EBCB              ;F0 07                   BEQ LI17 	\ skip first point
 775+ EBCB              ;CA                      DEX
 776+ EBCB              ;.LIL5	\ skipped first point, counter X
 777+ EBCB              ;A5 82                   LDA &82	    \ R \ mask byte
 778+ EBCB              ;51 07                   EOR (&07),Y	\ (SC),Y
 779+ EBCB              ;91 07                   STA (&07),Y	\ (SC),Y
 780+ EBCB              ;.LI17	\ skipped first point
 781+ EBCB              ;88                      DEY
 782+ EBCB              ;10 04                   BPL LI16	\ skip hi adjust
 783+ EBCB              ;C6 08                   DEC &08		\ SC+1
 784+ EBCB              ;A0 07                   LDY #7		\ new char
 785+ EBCB              ;	.LI16	\ skipped hi adjust
 786+ EBCB              ;A5 83                   LDA &83		\ S
 787+ EBCB              ;65 1B                   ADC &1B		\ P
 788+ EBCB              ;85 83                   STA &83		\ S
 789+ EBCB              ;90 0C                   BCC LIC5	\ skip, still in same column
 790+ EBCB              ;46 82                   LSR &82	  \ R	\ mask
 791+ EBCB              ;90 08                   BCC LIC5  	\ no mask bit hop
 792+ EBCB              ;66 82                   ROR &82   \ R	\ else moved over to next column, reset mask
 793+ EBCB              ;A5 07                   LDA &07	  \ SC  \ screen lo
 794+ EBCB              ;69 08                   ADC #8		\ next char below
 795+ EBCB              ;85 07                   STA &07		\ SC
 796+ EBCB              ;.LIC5	\ same column
 797+ EBCB              ;CA                      DEX
 798+ EBCB              ;D0 DC                   BNE LIL5	\ loop X height
 799+ EBCB              ;A4 85                   LDY &85	 \ YSAV	\ restore Yreg
 800+ EBCB              ;60                      RTS
 801+ EBCB              ;
 802+ EBCB              ;.LFT	\ going left
 803+ EBCB              ;A5 90                   LDA &90		\ SWAP
 804+ EBCB              ;F0 07                   BEQ LI18	\ skip first point
 805+ EBCB              ;CA                      DEX 		\ reduce height
 806+ EBCB              ;.LIL6	\ counter X height
 807+ EBCB              ;A5 82                   LDA &82	   \ R	\ mask byte
 808+ EBCB              ;51 07                   EOR (&07),Y	\ (SC),Y
 809+ EBCB              ;91 07                   STA (&07),Y	\ (SC),Y
 810+ EBCB              ;.LI18
 811+ EBCB              ;88                      DEY
 812+ EBCB              ;10 04                   BPL LI19	\ skip hi adjust
 813+ EBCB              ;C6 08                   DEC &08		\ SC+1
 814+ EBCB              ;A0 07                   LDY #7		\ rest char row
 815+ EBCB              ;.LI19	\ skipped hi adjust
 816+ EBCB              ;A5 83                   LDA &83		\ S
 817+ EBCB              ;65 1B                   ADC &1B	    \ P \ some low bits
 818+ EBCB              ;85 83                   STA &83		\ S
 819+ EBCB              ;90 0D                   BCC LIC6	\ no overflow
 820+ EBCB              ;06 82                   ASL &82	    \ R \ else move byte mask to the left
 821+ EBCB              ;90 09                   BCC LIC6	\ no overflow
 822+ EBCB              ;26 82                   ROL &82		\ R
 823+ EBCB              ;A5 07                   LDA &07		\ SC
 824+ EBCB              ;E9 07                   SBC #7		\ down 1 char
 825+ EBCB              ;85 07                   STA &07		\ SC
 826+ EBCB              ;18                      CLC
 827+ EBCB              ;.LIC6	\ no overflow
 828+ EBCB              ;CA                      DEX 		\ height
 829+ EBCB              ;D0 DB                   BNE LIL6	\ loop X
 830+ EBCB              ;A4 85                   LDY &85	 \ YSAV	\ restore Yreg
 831+ EBCB              ;.HL6
 832+ EBCB              ;60                      RTS 		\ end Line drawing
 833+ EBCB
 834+ EBCB
 835+ EBCB              ;;l2_draw_diagonalopt:
 836+ EBCB                              DISPLAY "TODO: optimisation"
 837+ EBCB              	; ">TODO l2_draw_diagonalopt fast horz vert optmisation"
 838+ EBCB              ;;	push	af
 839+ EBCB              ;;	ld		a,b
 840+ EBCB              ;;	cp		d
 841+ EBCB              ;;	jr		z,.RegularDiagnonal
 842+ EBCB              ;;.CheckHorz:
 843+ EBCB              ;;	ld		a,c
 844+ EBCB              ;;	cp		e
 845+ EBCB              ;;	jr		z,.horizontalLine
 846+ EBCB              ;;.RegularDiagnonal:
 847+ EBCB              ;;	pop		af
 848+ EBCB              ;;	call diag
 849+ EBCB
 850+ EBCB
 851+ EBCB              ;;l2_signed_mul2a:
 852+ EBCB              ;;; ">l2_signed_mul2a - Signed a = a * 2 using shift)"
 853+ EBCB              ;;	TEST	$80
 854+ EBCB              ;;	jr		nz, .negativecalc
 855+ EBCB              ;;.positivecalc:
 856+ EBCB              ;;	ccf
 857+ EBCB              ;;	rla
 858+ EBCB              ;;	ret
 859+ EBCB              ;;.negativecalc:
 860+ EBCB              ;;	neg
 861+ EBCB              ;;	ccf
 862+ EBCB              ;;	rla
 863+ EBCB              ;;	neg
 864+ EBCB              ;;	ret
 865+ EBCB              ;;
 866+ EBCB              ;;l2_signed_mul2atohl:
 867+ EBCB              ;;; ">l2_signed_mul2ahl - Signed hl = a * 2 using shift)"
 868+ EBCB              ;;	TEST	$80
 869+ EBCB              ;;	jr		nz, .negativecalc
 870+ EBCB              ;;.positivecalc:
 871+ EBCB              ;;	ld		hl,0
 872+ EBCB              ;;	ld		l,a
 873+ EBCB              ;;	add		hl,a
 874+ EBCB              ;;	ret
 875+ EBCB              ;;.negativecalc:
 876+ EBCB              ;;	neg
 877+ EBCB              ;;	ld		hl,0
 878+ EBCB              ;;	ld		l,a
 879+ EBCB              ;;	neghl
 880+ EBCB              ;;	ret
 881+ EBCB              ;;
 882+ EBCB              ;;l2_e2fractionby2:
 883+ EBCB              ;;	ld 		hl,(l2fraction)
 884+ EBCB              ;;	push	de
 885+ EBCB              ;;	ld		d,h
 886+ EBCB              ;;	ld		e,l
 887+ EBCB              ;;	add		hl,de
 888+ EBCB              ;;	pop		de
 889+ EBCB              ;;	ld		(l2e2),hl
 890+ EBCB              ;;	ret
 891+ EBCB
 892+ EBCB
 893+ EBCB
 894+ EBCB
 895+ EBCB
 896+ EBCB              ;;//	ld		(l2linecolor),a   			; could do an ex but it will be needed multiple times between many uses of a reg
 897+ EBCB              ;;//.catchLoop:
 898+ EBCB              ;;//	jp .catchLoop
 899+ EBCB              ;;//.continue:
 900+ EBCB              ;;//    ld      A,D
 901+ EBCB              ;;//    sub     H
 902+ EBCB              ;;//    jr      NC,.DXpositive    ;delta_x > 0
 903+ EBCB              ;;//.DXNegative:
 904+ EBCB              ;;//    neg
 905+ EBCB              ;;//.DXPositive:
 906+ EBCB              ;;//    ld      B,A              ;B <- |delta_x|
 907+ EBCB              ;;//    ld      A,E
 908+ EBCB              ;;//    sub     L
 909+ EBCB              ;;//    jr      NC,.DYpositive    ;delta_y > 0
 910+ EBCB              ;;//.DYNegative:
 911+ EBCB              ;;//    neg
 912+ EBCB              ;;//.DYPositive:
 913+ EBCB              ;;//    sub     B               ;|delta_y|
 914+ EBCB              ;;//	push	af
 915+ EBCB              ;;//	jr		c,.DeltaX
 916+ EBCB              ;;//.DeltaY
 917+ EBCB              ;;//	ld      A,H             			;if |delta_x| < |delta_y| then
 918+ EBCB              ;;//    ld      H,L             			;then values x and y are swapped
 919+ EBCB              ;;//    ld      L,A             			;so the loop will always be performed on the
 920+ EBCB              ;;//    ld      A,D             			;x value. A flag must be set to
 921+ EBCB              ;;//    ld      D,E             			;remind that data must be drawn (y,x)
 922+ EBCB              ;;//    ld      E,A             			;instead of (x,y)
 923+ EBCB              ;;//.DeltaX:
 924+ EBCB              ;;//	ld		a,d
 925+ EBCB              ;;//	sub		h
 926+ EBCB              ;;//	jr		nc,.TestDY					; x1 < x2
 927+ EBCB              ;;//.TestDX:
 928+ EBCB              ;;//	ex		de,hl
 929+ EBCB              ;;//.TestDY:
 930+ EBCB              ;;//	ld		a,e
 931+ EBCB              ;;//	sub		l
 932+ EBCB              ;;//    ld      A,$01
 933+ EBCB              ;;//    jr      NC,.StoreA
 934+ EBCB              ;;//    neg                     ;y1 > y2 : in case2 the 'y' variable
 935+ EBCB              ;;//.StoreA:
 936+ EBCB              ;;//        ld      (l2way),A
 937+ EBCB              ;;//.InitLine:
 938+ EBCB              ;;//        ld      B,H
 939+ EBCB              ;;//        ld      C,L
 940+ EBCB              ;;//        ld      A,E
 941+ EBCB              ;;//        sub     L
 942+ EBCB              ;;//        jr      NC,.EndInit
 943+ EBCB              ;;//        ld      A,L
 944+ EBCB              ;;//        ld      L,E
 945+ EBCB              ;;//        ld      E,A
 946+ EBCB              ;;//.EndInit:
 947+ EBCB              ;;//        ld      A,E
 948+ EBCB              ;;//        sub     L
 949+ EBCB              ;;//        rla
 950+ EBCB              ;;//        ld      L,A             ;value to add in case1 (d < 0)
 951+ EBCB              ;;//        add     A,H
 952+ EBCB              ;;//        sub     D
 953+ EBCB              ;;//        ld      E,A             ;'d' variable is initialised
 954+ EBCB              ;;//        add     A,H
 955+ EBCB              ;;//        sub     D
 956+ EBCB              ;;//        ld      H,A             ;value to add in case2 (d >= 0)
 957+ EBCB              ;;//.Loop:
 958+ EBCB              ;;//        ld      A,B
 959+ EBCB              ;;//        sub     D
 960+ EBCB              ;;//        jr      NC,.EndLine       ;the line is completely drawn.
 961+ EBCB              ;;//        pop     AF
 962+ EBCB              ;;//        bit     7,A
 963+ EBCB              ;;//        push    AF
 964+ EBCB              ;;//        push    AF
 965+ EBCB              ;;//        push    BC
 966+ EBCB              ;;//        jr      Z,.DrawPoint
 967+ EBCB              ;;//        ld      A,B
 968+ EBCB              ;;//        ld      B,C
 969+ EBCB              ;;//        ld      C,A
 970+ EBCB              ;;//.DrawPoint:
 971+ EBCB              ;;//		push	hl
 972+ EBCB              ;;//		pushbcdeaf
 973+ EBCB              ;;//		ld		b,e
 974+ EBCB              ;;//		ld		c,d
 975+ EBCB              ;;//	ld 		a,(l2linecolor)
 976+ EBCB              ;;//	call	l2_plot_pixel
 977+ EBCB              ;;//		popafdebc
 978+ EBCB              ;;//		pop		hl
 979+ EBCB              ;;//        pop     BC
 980+ EBCB              ;;//        pop     AF
 981+ EBCB              ;;//.TestD:
 982+ EBCB              ;;//        bit     7,E
 983+ EBCB              ;;//        jr      NZ,.Case1
 984+ EBCB              ;;//.Case2:                          ;d >= 0
 985+ EBCB              ;;//        ld      A,E
 986+ EBCB              ;;//        add     A,H
 987+ EBCB              ;;//        ld      E,A
 988+ EBCB              ;;//        ld      A,(l2way)
 989+ EBCB              ;;//        add     A,C
 990+ EBCB              ;;//        ld      C,A
 991+ EBCB              ;;//        jr      .EndLoop
 992+ EBCB              ;;//.Case1:                          ;d < 0
 993+ EBCB              ;;//        ld      A,E
 994+ EBCB              ;;//        add     A,L
 995+ EBCB              ;;//        ld      E,A
 996+ EBCB              ;;//.EndLoop:
 997+ EBCB              ;;//        inc     B
 998+ EBCB              ;;//        jr      .Loop
 999+ EBCB              ;;//.EndLine:
1000+ EBCB              ;;//        pop     AF              ;MUST NOT BE REMOVED
1001+ EBCB              ;;//        pop     HL              ;can be removed
1002+ EBCB              ;;//        pop     DE              ;can be removed
1003+ EBCB              ;;//        ret
1004+ EBCB
1005+ EBCB              ;;	ld		(.l2yadjust),a
1006+ EBCB              ;;	call	calcdeltax:
1007+ EBCB              ;;	ld		(.l2xadjust),a
1008+ EBCB              ;;.calcfraction:							; err(or fraction) = dx+dy;
1009+ EBCB              ;;	push	hl
1010+ EBCB              ;;	push	de
1011+ EBCB              ;;	ld		hl,(l2deltaX)
1012+ EBCB              ;;	ld		de,(l2deltaY)
1013+ EBCB              ;;	add		hl,de
1014+ EBCB              ;;	ld		(l2fraction),hl
1015+ EBCB              ;;	pop		de
1016+ EBCB              ;;	pop		hl
1017+ EBCB              ;;.mainloop:
1018+ EBCB              ;;	push	bc
1019+ EBCB              ;;	push	de
1020+ EBCB              ;;	ld 		a,(l2linecolor)
1021+ EBCB              ;;	call	l2_plot_pixel
1022+ EBCB              ;;	pop		de
1023+ EBCB              ;;	pop		bc
1024+ EBCB              ;;.arewefinishedtest
1025+ EBCB              ;;	ld		a,b
1026+ EBCB              ;;	cp		d
1027+ EBCB              ;;	jr		nz,.notthereyet
1028+ EBCB              ;;	ld		a,c
1029+ EBCB              ;;	cp		e
1030+ EBCB              ;;	ret		z
1031+ EBCB              ;;.notthereyet:
1032+ EBCB              ;;	push	de
1033+ EBCB              ;;	call	l2_e2fractionby2			; e2 = 2*err;
1034+ EBCB              ;;	pop		de
1035+ EBCB              ;;.e2dytest:								; if (e2 >= dy) /* e_xy+e_x > 0 */  then S and P/V are the same
1036+ EBCB              ;;	push	de							; so if m & pe  or p & po calc (m = sign set p = 0)
1037+ EBCB              ;;	ld		de,(l2deltaY)				;    if m & po  or p & pe skip  (pe = pv set po = pv 0)
1038+ EBCB              ;;	or		a							;
1039+ EBCB              ;;	sbc		hl,de						;
1040+ EBCB              ;;	pop		de
1041+ EBCB              ;;	jr		z,  .dodycalc				; if equal then calc
1042+ EBCB              ;;	jp		p,	.dodycalc				; sign clear to H>D even with negtives
1043+ EBCB              ;;	jr		.skipdycalc         		; sign = 0     so  skip as pe
1044+ EBCB              ;;.dodycalc:
1045+ EBCB              ;;	ld		hl,(l2fraction)
1046+ EBCB              ;;	push	de
1047+ EBCB              ;;	ld		de,(l2deltaY)
1048+ EBCB              ;;	add		hl,de
1049+ EBCB              ;;	ld		(l2fraction),de
1050+ EBCB              ;;	pop		de
1051+ EBCB              ;;.l2yadjust:
1052+ EBCB              ;;	nop
1053+ EBCB              ;;.skipdycalc:
1054+ EBCB              ;;.e2dxtest:								;  if (e2 <= dx) /* e_xy+e_y < 0 */ then S and P/V are different.
1055+ EBCB              ;;	ld		hl,(l2e2)
1056+ EBCB              ;;	push	de							;
1057+ EBCB              ;;	ld		de,(l2deltaX)				;
1058+ EBCB              ;;	or		a							; clear carry flag
1059+ EBCB              ;;	sbc		hl,de						; hl = hl - de is if de > hl will get pv and signed different?
1060+ EBCB              ;;	pop		de
1061+ EBCB              ;;	jr		z,.dodxcalc					; e2 == dx so do calc
1062+ EBCB              ;;	jp		m,.dodxcalc					; was sign bit set
1063+ EBCB              ;;	jr		.skipdxcalc         	    ; diff so skip ; pvclear = po        pvset = pe
1064+ EBCB              ;;.dodxcalc:
1065+ EBCB              ;;	ld		hl,(l2fraction)
1066+ EBCB              ;;	push	de
1067+ EBCB              ;;	ld		de,(l2deltaX)
1068+ EBCB              ;;	add		hl,de
1069+ EBCB              ;;	ld		(l2fraction),de
1070+ EBCB              ;;	pop		de
1071+ EBCB              ;;.l2xadjust:
1072+ EBCB              ;;	nop
1073+ EBCB              ;;.skipdxcalc:
1074+ EBCB              ;;	jr 		.mainloop
1075+ EBCB
1076+ EBCB
1077+ EBCB              ;;/l2_draw_diagonalold:
1078+ EBCB              ;;/MESSAGE ">l2_draw_diagonal, bc = y0,x0 de=y1,x1,a=color)"
1079+ EBCB              ;;/	ld		(l2linecolor),a   			; could do an ex but it will be needed multiple times between many uses of a reg
1080+ EBCB              ;;/.sortycoords:
1081+ EBCB              ;;/	ld		a,b							; Sort to Y0 is always > y1 so we don't have to deal with step y and only step x
1082+ EBCB              ;;/	cp		d
1083+ EBCB              ;;/	jr		nc, .nocoordswap
1084+ EBCB              ;;/.swapcoords:
1085+ EBCB              ;;/	ex		de,hl						; save de to hl ! effective code line 98 after macros
1086+ EBCB              ;;/	lddebc
1087+ EBCB              ;;/	ldbchl
1088+ EBCB              ;;/.nocoordswap:
1089+ EBCB              ;;/	ld		a,d							; l2_dy = -ABS(l2_vy1 - l2_vy0)
1090+ EBCB              ;;/	sub		b							; we have already sorted  so y1 > y0
1091+ EBCB              ;;/	ld		(l2deltaY),a
1092+ EBCB              ;;/	neg									; DEBUG
1093+ EBCB              ;;/	ld		(l2deltaYn),a				; DEBUG
1094+ EBCB              ;;/	neg									; DEBUG
1095+ EBCB              ;;/.deltaxequABSx0Minusx1:						; we need to set l2dx to abs x1-x0 and set
1096+ EBCB              ;;/    ld		a,c
1097+ EBCB              ;;/	cp		e
1098+ EBCB              ;;/	jr		c, .x1GTx0
1099+ EBCB              ;;/.x1LTx0
1100+ EBCB              ;;/	ld		a,c
1101+ EBCB              ;;/	sub		e
1102+ EBCB              ;;/	ld		(l2deltaX),a				; just 8 bit for now should it be 16?
1103+ EBCB              ;;/	neg									; DEBUG
1104+ EBCB              ;;/	ld		(l2deltaXn),a				; DEBUG
1105+ EBCB              ;;/	neg									; DEBUG
1106+ EBCB              ;;/	ld		a,l2incbstep
1107+ EBCB              ;;/	jr		.setlayershift0
1108+ EBCB              ;;/.x1GTx0:
1109+ EBCB              ;;/	ld		a,e
1110+ EBCB              ;;/	sub		c
1111+ EBCB              ;;/	ld		(l2deltaX),a					; just 8 bit for now should it be 16?
1112+ EBCB              ;;/	neg									; DEBUG
1113+ EBCB              ;;/	ld		(l2deltaXn),a				; DEBUG
1114+ EBCB              ;;/	neg									; DEBUG
1115+ EBCB              ;;/	ld		a,l2decbstep
1116+ EBCB              ;;/.setlayershift0:
1117+ EBCB              ;;/	ld		a,0
1118+ EBCB              ;;/	pushbcde
1119+ EBCB              ;;/	call	asm_l2_bank_n_select		; l2_layer_shift = 0 and bank 0 selected
1120+ EBCB              ;;/	popdebc
1121+ EBCB              ;;/; so now we have set inc or dec instruction, l2dy, l2dx and on bank 0,
1122+ EBCB              ;;/.dymuliplyby2:
1123+ EBCB              ;;/	ld		a, (l2deltaY)				; dy *= 2
1124+ EBCB              ;;/	call	l2_signed_mul2a
1125+ EBCB              ;;/	ld		(l2deltaYsq),a
1126+ EBCB              ;;/	neg									; DEBUG
1127+ EBCB              ;;/	ld		(l2deltaYsqn),a				; DEBUG
1128+ EBCB              ;;/	neg									; DEBUG
1129+ EBCB              ;;/.dxmuliplyby2:
1130+ EBCB              ;;/	ld		a, (l2deltaX)				; dx *= 2
1131+ EBCB              ;;/	call	l2_signed_mul2a
1132+ EBCB              ;;/	ld		(l2deltaXsq),a
1133+ EBCB              ;;/	neg									; DEBUG
1134+ EBCB              ;;/	ld		(l2deltaXsqn),a				; DEBUG
1135+ EBCB              ;;/	neg									; DEBUG
1136+ EBCB              ;;/.plotfirstpixel:
1137+ EBCB              ;;/	pushbcde
1138+ EBCB              ;;/	ld a,(l2linecolor)
1139+ EBCB              ;;/	call	l2_plot_pixel
1140+ EBCB              ;;/	popdebc
1141+ EBCB              ;;/.mainloop:								; if (l2_dx > l2_dy) signed
1142+ EBCB              ;;/	ld		a,(l2deltaX)				;If A < N, then S and P/V are different.
1143+ EBCB              ;;/	ld		hl,l2deltaY					;A >= N, then S and P/V are the same
1144+ EBCB              ;;/	cp		(hl)
1145+ EBCB              ;;/	jp		m,	.signset
1146+ EBCB              ;;/.signclear:
1147+ EBCB              ;;/	jp		pe,	.dxLTEdybranch
1148+ EBCB              ;;/	jr		.dxGTdybranch
1149+ EBCB              ;;/.signset:
1150+ EBCB              ;;/	jp		po,	.dxLTEdybranch
1151+ EBCB              ;;/.dxGTdybranch:
1152+ EBCB              ;;/	ld		a,(l2deltaYsq)
1153+ EBCB              ;;/	ld		hl,l2deltaX
1154+ EBCB              ;;/	sub		(hl)
1155+ EBCB              ;;/	ld		(l2fraction),a				; faction = dy - 1/2 dx
1156+ EBCB              ;;/.BranchAwhile							; while (l2_vx0 != l2_vx1)
1157+ EBCB              ;;/	ld		a,c
1158+ EBCB              ;;/	cp		e
1159+ EBCB              ;;/	ret		z							; if x0 = x1 then done
1160+ EBCB              ;;/.BranchAtestfraction:					; if (l2_fraction >= 0)
1161+ EBCB              ;;/	ld		a,(l2fraction)
1162+ EBCB              ;;/	TEST	$80
1163+ EBCB              ;;/	jr		nz,.BranchAskipYstep
1164+ EBCB              ;;/	inc		b							; 		++l2_vy0;
1165+ EBCB              ;;/	ld		hl,l2deltaXsq
1166+ EBCB              ;;/	sub		(hl)						; 		l2_fraction -= l2_dx;
1167+ EBCB              ;;/	ld		(l2fraction),a
1168+ EBCB              ;;/.BranchAskipYstep:
1169+ EBCB              ;;/.l2stepx1:
1170+ EBCB              ;;/	inc		b							; this is self modifying code point 1 l2_vx0 += l2_stepx
1171+ EBCB              ;;/	ld		a,(l2fraction)				; l2_fraction += l2_dy can optimise later as a already has this?
1172+ EBCB              ;;/	ld		hl,l2deltaYsq
1173+ EBCB              ;;/	add		a,(hl)
1174+ EBCB              ;;/	ld		(l2fraction),a
1175+ EBCB              ;;/.BranchAplotBCColA:						; l2_plot_pixel(l2_vx0,l2_vy0,color);
1176+ EBCB              ;;/	pushbcde
1177+ EBCB              ;;/	ld a,(l2linecolor)
1178+ EBCB              ;;/	call	l2_plot_pixel
1179+ EBCB              ;;/	popdebc
1180+ EBCB              ;;/.BranchAloop:
1181+ EBCB              ;;/	jr		.BranchAwhile
1182+ EBCB              ;;/.dxLTEdybranch:
1183+ EBCB              ;;/	ld		a,(l2deltaXsq)				; l2_fraction = l2_dx - (l2_dy >> 1);
1184+ EBCB              ;;/	ld		hl, l2deltaY
1185+ EBCB              ;;/	sub		(hl)
1186+ EBCB              ;;/	ld		(l2fraction),a				; faction = dy - 1/2 d
1187+ EBCB              ;;/.BranchBwhile:							; while (l2_vy0 != l2_vy1)
1188+ EBCB              ;;/	ld		a,b
1189+ EBCB              ;;/	cp		d
1190+ EBCB              ;;/	ret		z							; if x0 = x1 then done
1191+ EBCB              ;;/.BranchBtestfraction:					; if (l2_fraction >= 0)
1192+ EBCB              ;;/	ld		a,(l2fraction)
1193+ EBCB              ;;/	TEST	$80
1194+ EBCB              ;;/	jr		nz,.BranchBskipYstep
1195+ EBCB              ;;/.l2stepx2
1196+ EBCB              ;;/	inc		b							; l2_vx0 += l2_stepx; this is self modifying code point 2
1197+ EBCB              ;;/	ld		a,(l2fraction)				; l2_fraction -= l2_dy
1198+ EBCB              ;;/	ld		hl,l2deltaYsq
1199+ EBCB              ;;/	sub		(hl)
1200+ EBCB              ;;/	ld		(l2fraction),a
1201+ EBCB              ;;/.BranchBskipYstep:
1202+ EBCB              ;;/	ld		hl, l2deltaYsq
1203+ EBCB              ;;/	add		a,(hl)
1204+ EBCB              ;;/	ld		(l2fraction),a
1205+ EBCB              ;;/	inc		b							; ++l2_vy0;
1206+ EBCB              ;;/.BranchBplotBCColA:
1207+ EBCB              ;;/	pushbcde
1208+ EBCB              ;;/	ld a,(l2linecolor)
1209+ EBCB              ;;/	call	l2_plot_pixel
1210+ EBCB              ;;/	popdebc
1211+ EBCB              ;;/.BranchBloop:
1212+ EBCB              ;;/	jr		.BranchBwhile
1213+ EBCB
# file closed: ./Layer2Graphics/layer2_plot_diagonal.asm
 801  EBCB                  INCLUDE "./Layer2Graphics/int_bren_save.asm"
# file opened: ./Layer2Graphics/int_bren_save.asm
   1+ EBCB              OPCODE_IncHL            EQU $23
   2+ EBCB              OPCODE_DecHL            EQU $2B
   3+ EBCB              OPCODE_IncHLIndirect    EQU $34
   4+ EBCB              OPCODE_DecHLIndirect    EQU $35
   5+ EBCB              OPCODE_IncDE            EQU $13
   6+ EBCB              OPCODE_DecDE            EQU $1B
   7+ EBCB              OPCODE_JpNCnn           EQU $D2
   8+ EBCB              OPCODE_JpCnn            EQU $DA
   9+ EBCB              LOWEST_SAVE             EQU 0
  10+ EBCB              HIGHEST_SAVE            EQU 1
  11+ EBCB
  12+ EBCB              SetIncrement:           MACRO   Location
  13+ EBCB ~                                    ld      a,OPCODE_IncDE
  14+ EBCB ~                                    ld      (Location),a
  15+ EBCB                                      ENDM
  16+ EBCB              SetDecrement:           MACRO   Location
  17+ EBCB ~                                    ld      a,OPCODE_DecDE
  18+ EBCB ~                                    ld      (Location),a
  19+ EBCB                                      ENDM
  20+ EBCB
  21+ EBCB              ; So next optimisation
  22+ EBCB              ; we know that we start from row y0 to row Y0
  23+ EBCB              ; so we can just reference that row range and zero it out rather than the whole
  24+ EBCB              ; data set
  25+ EBCB 00           l2_fillValue            DB 0
  26+ EBCC
  27+ EBCC 83 C3 C7 CB  l2_fill_line            DB DMA_DISABLE,  DMA_RESET, DMA_RESET_PORT_A_TIMING, DMA_RESET_PORT_B_TIMING ,DMA_WRO_BLOCK_PORTA_A2B_XFR
  27+ EBD0 7D
  28+ EBD1 CB EB        l2_fill_colr            DW l2_fillValue
  29+ EBD3 FF           l2_fill_lenlo           DB 255
  30+ EBD4 00           l2_fill_lenhi           DB 0
  31+ EBD5 24 10 AD                             DB DMA_WR1_P1FIXED_MEMORY, DMA_WR2_P2INC_MEMORY, DMA_WR4_CONT_MODE
  32+ EBD8 00 00        l2_fill_target          DB $00, $00
  33+ EBDA CF 87                                DB DMA_LOAD, DMA_ENABLE
  34+ EBDC              l2_bren_cmd_len	        EQU $ - l2_fill_line
  35+ EBDC
  36+ EBDC 32 CB EB     l2_fill_dma:            ld		(l2_fillValue),a                                 ; T=13     ;
  37+ EBDF 22 D8 EB                             ld      (l2_fill_target),hl
  38+ EBE2 21 CC EB     .write_dma:             ld 		hl, l2_fill_line                                  ;          ;
  39+ EBE5 06 10                                ld 		b, l2_bren_cmd_len                                ;
  40+ EBE7 0E 6B                                ld		c,IO_DATAGEAR_DMA_PORT                            ;
  41+ EBE9 ED B3                                otir                                                      ;
  42+ EBEB C9                                   ret
  43+ EBEC
  44+ EBEC              ; to find a point Y1 along a line X0Y0 to X2Y2
  45+ EBEC              ; DX = X2-X0, DY = Y2-Y0, D = DX/DY, X1 = X0+ ((Y1-Y0)*DX)
  46+ EBEC              ; will need 16.8 24 bit maths for DX DY unless we scale down and do a muliplier up
  47+ EBEC              ; so we could do DX = X2-X0, scale to 8.8  ... Note this will fail for extrmem near vertical or horizontal angles
  48+ EBEC              ;                DY = Y2-Y0, scale to 8.8  ... could we use an octlet lookup table?
  49+ EBEC              ;                D  = DX/DY which would give us an 8.2 proportion
  50+ EBEC              ; a look up table would not work for calc of DX DY but we could use a log table and anti log to simplify to add/subtract
  51+ EBEC              ; need a version of this that counts down to a trigger Y axis + 1, ideallign using DX DY if possible
  52+ EBEC              ; We may be able to use the flat top/flat botttom and pick up a calculated value 0nce it hits Y2?
  53+ EBEC              ; Yes logirithm table will work, need to build as a decimal set optimised
  54+ EBEC              ; logically if the ship is too close it will always be too close to render so we can exclude
  55+ EBEC              ; excessivley large values for X and Y as they will either be too far off side or span the whole screen
  56+ EBEC              ; and just flood fill
  57+ EBEC              ; Thsi means we can do log maths for jsut 0 to 1024
  58+ EBEC              ; 9/11 we assume that large values will either flood fill or be straight lines
  59+ EBEC              ; so we allow a range of -256 to + 512 ,i.e. off screen by a whole additional screen
  60+ EBEC              ; then divide becomes 16 bit div 16 bit to yeild an 8.8 result. This can then be used to work out the new position
  61+ EBEC              ; so                    DE = DX (Ignoring signs for now)
  62+ EBEC              ;                       HL = DY
  63+ EBEC              ; we need L2_DX, L2_DY output is HL
  64+ EBEC              ; After workign out in excel Formulas are:
  65+ EBEC              ; incomming X0, Y0, Y1, DX , DY
  66+ EBEC              ; dY2 = Y1-Y0
  67+ EBEC              ; dXHi = DX/DY*256
  68+ EBEC              ; dxRemainder = DX-dXHi
  69+ EBEC              ; dXRemainder = TRUNC((dxRemainder)/DY)*256
  70+ EBEC              ; Integer component = dY2 * dXHi /256
  71+ EBEC              ; Adj     component = DY2 * dXRemainder /256
  72+ EBEC              ; total = Integer + Adj + X0
  73+ EBEC
  74+ EBEC 00 00        l2_X0                   DW 0
  75+ EBEE 00 00        l2_Y0                   DW 0
  76+ EBF0 00 00        l2_X1                   DW 0
  77+ EBF2 00 00        l2_Y1                   DW 0
  78+ EBF4 00 00        ld_YMid                 DW 0
  79+ EBF6 00 00        l2_DX                   DW 0
  80+ EBF8 00 00        l2_DY                   DW 0
  81+ EBFA 00 00        l2_Error                DW 0
  82+ EBFC 00 00        l2_E2                   DW 0
  83+ EBFE 00 00        l2_dY2                  DW 0
  84+ EC00 00 00        ld_dxHi                 DW 0
  85+ EC02 00 00        l2_dxRemainder          DW 0
  86+ EC04 00 00        l2_dxRemainder2         DW 0
  87+ EC06 00 00        l2_dXRemainderAdj       DW 0
  88+ EC08 00 00        l2_integer              DW 0
  89+ EC0A 00 00        l2_integer2             DW 0
  90+ EC0C
  91+ EC0C 2A F6 EB     ScaleDXDY:              ld      hl,(l2_DX)
  92+ EC0F ED 5B F8 EB                          ld      de,(l2_DY)
  93+ EC13 7C           .ScaleLoop:             ld      a,h
  94+ EC14 B2                                   or      d
  95+ EC15 28 0B                                jr      z,.ScaleDone
  96+ EC17                                      ShiftHLRight1
  96+ EC17 CB 3C       >			   srl h
  96+ EC19 CB 1D       >			   rr  l
  97+ EC1B                                      ShiftDERight1
  97+ EC1B CB 3A       >			   srl d
  97+ EC1D CB 1B       >			   rr  e
  98+ EC1F C3 13 EC                             jp      .ScaleLoop
  99+ EC22 22 F6 EB     .ScaleDone:             ld      (l2_DX),hl
 100+ EC25 ED 53 F8 EB                          ld      (l2_DY),de
 101+ EC29 C9                                   ret
 102+ EC2A
 103+ EC2A 2A F0 EB     HLEquMidX:              ld      hl,(l2_X1)
 104+ EC2D ED 5B EC EB                          ld      de,(l2_X0)
 105+ EC31                                      ClearCarryFlag
 105+ EC31 B7          >                        or a
 106+ EC32 ED 52                                sbc     hl,de
 107+ EC34 22 F6 EB                             ld      (l2_DX),hl
 108+ EC37 2A F2 EB                             ld      hl,(l2_Y1)
 109+ EC3A ED 5B EE EB                          ld      de,(l2_Y0)
 110+ EC3E                                      ClearCarryFlag
 110+ EC3E B7          >                        or a
 111+ EC3F ED 52                                sbc     hl,de
 112+ EC41 22 F8 EB                             ld      (l2_DY),hl
 113+ EC44                                      ;break
 114+ EC44 CD 0C EC                             call    ScaleDXDY
 115+ EC47 2A F4 EB                             ld      hl,(ld_YMid)
 116+ EC4A                                      ClearCarryFlag
 116+ EC4A B7          >                        or a
 117+ EC4B ED 52                                sbc     hl,de
 118+ EC4D 22 FE EB                             ld      (l2_dY2),hl
 119+ EC50 ED 4B F6 EB                          ld      bc,(l2_DX)          ; dXHi(DE)= DX/DY*256
 120+ EC54 ED 5B F8 EB                          ld      de,(l2_DY)          ; .
 121+ EC58 DD 62 DD 6B                          ld      ix,de               ; .
 122+ EC5C E5 FD E1                             ld      iy,hl               ; .
 123+ EC5F              ;                       BC = DX/DY as 8.8           ; .
 124+ EC5F CD E2 97                             call    BC_Div_DE; DEequDEDivBC; DE is the result HL is the remainder
 125+ EC62 78                                   ld      a,b                 ; if DE is 8 bit only
 126+ EC63 A7                                   and     a                   ; .
 127+ EC64 28 06                                jr      z,.LT255            ; goto LT255
 128+ EC66 01 FF FF                             ld      bc,$FFFF            ; else set BC to $FFFF
 129+ EC69 C3 A3 EC                             jp      .DoneCalc           ; .
 130+ EC6C ED 43 00 EC  .LT255:                 ld      (ld_dxHi),bc        ;
 131+ EC70 22 02 EC                             ld      (l2_dxRemainder),hl ; dxRemainder = DX-dXHi
 132+ EC73              .CalcIntegerComponent:  ;break
 133+ EC73 2A FE EB                             ld      hl,(l2_dY2)         ; Integer component = dY2 * dXHi /256
 134+ EC76 ED 5B 00 EC                          ld      de,(ld_dxHi)        ; .
 135+ EC7A CD 5D 92                             call    DEHLequDEmulHL      ; .
 136+ EC7D ED 53 08 EC                          ld      (l2_integer),de     ; .
 137+ EC81 22 0A EC                             ld      (l2_integer2),hl    ; .
 138+ EC84 ED 4B 02 EC  .CalcRemainderFraction: ld      bc,(l2_dxRemainder) ; dXRemainder = TRUNC((dxRemainder)/DY)*256
 139+ EC88 ED 5B F8 EB                          ld      de,(l2_DY)          ; .
 140+ EC8C CD E2 97                             call    BC_Div_DE           ; BC, remainder in HL
 141+ EC8F ED 43 06 EC                          ld      (l2_dXRemainderAdj),bc
 142+ EC93 22 04 EC                             ld      (l2_dxRemainder2),hl
 143+ EC96 2A FE EB     .CalcAdjustment:        ld      hl,(l2_dY2)         ; Adj component = DY2 * dXRemainder /256
 144+ EC99 50 59                                ld      de,bc               ;
 145+ EC9B CD 5D 92                             call    DEHLequDEmulHL      ;
 146+ EC9E 2A 08 EC                             ld      hl,(l2_integer)
 147+ ECA1 19                                   add     hl,de
 148+ ECA2 C9                                   ret
 149+ ECA3
 150+ ECA3
 151+ ECA3              ;                       HL = (DE * B) /256
 152+ ECA3 C5           .DoneCalc:              push    bc
 153+ ECA4 58                                   ld      e,b
 154+ ECA5 DD E5 E1                             ld      hl,ix
 155+ ECA8 CD 48 92                             call AHLequHLmulE
 156+ ECAB 6C                                   ld l,h
 157+ ECAC 67                                   ld h,a
 158+ ECAD E5 DD E1                             ld      ix,hl
 159+ ECB0              ;                       DE = (DE * C) /256          ld e,c call AHLequHLmulE,ld l,h, ld h,a
 160+ ECB0 C1                                   pop     bc
 161+ ECB1 59                                   ld      e,c
 162+ ECB2 FD E5 E1                             ld      hl,iy
 163+ ECB5 CD 48 92                             call AHLequHLmulE
 164+ ECB8 6C                                   ld l,h
 165+ ECB9 67                                   ld h,a
 166+ ECBA              ;                       HL + = DE
 167+ ECBA DD 54 DD 5D                          ld      de,ix
 168+ ECBE 19                                   add     hl,de
 169+ ECBF              ;                       HL + + X0
 170+ ECBF ED 5B EC EB                          ld      de,(l2_X0)
 171+ ECC3 19                                   add     hl,de
 172+ ECC4 C9                                   ret
 173+ ECC5
 174+ ECC5
 175+ ECC5
 176+ ECC5
 177+ ECC5              ;; Need optimisation for vertical line and horizonal
 178+ ECC5              int_bren_save_Array1Low:
 179+ ECC5 3E FF                                ld      a,$FF
 180+ ECC7 21 ED E8                             ld      hl,l2targetArray1   ; L2targetArray2 Population
 181+ ECCA CD DC EB                             call    l2_fill_dma
 182+ ECCD 3E DA                                ld      a,OPCODE_JpCnn
 183+ ECCF 21 ED E8                             ld      hl,l2targetArray1   ; L2targetArray2 Population
 184+ ECD2 C3 00 ED                             jp      int_bren_save_Array ;
 185+ ECD5              int_bren_save_Array1High:
 186+ ECD5                                      ZeroA
 186+ ECD5 AF          >                        xor a
 187+ ECD6 21 ED E8                             ld      hl,l2targetArray1   ; L2targetArray2 Population
 188+ ECD9 CD DC EB                             call    l2_fill_dma
 189+ ECDC 3E D2                                ld      a,OPCODE_JpNCnn
 190+ ECDE 21 ED E8                             ld      hl,l2targetArray1   ; L2targetArray2 Population
 191+ ECE1 C3 00 ED                             jp      int_bren_save_Array ;
 192+ ECE4              int_bren_save_Array2Low:
 193+ ECE4 3E FF                                ld      a,$FF
 194+ ECE6 21 ED E9                             ld      hl,l2targetArray2   ; L2targetArray2 Population
 195+ ECE9 CD DC EB                             call    l2_fill_dma
 196+ ECEC 3E DA                                ld      a,OPCODE_JpCnn
 197+ ECEE 21 ED E9                             ld      hl,l2targetArray2   ; L2targetArray2 Population
 198+ ECF1 C3 00 ED                             jp      int_bren_save_Array ;
 199+ ECF4              int_bren_save_Array2High:
 200+ ECF4                                      ZeroA
 200+ ECF4 AF          >                        xor a
 201+ ECF5 21 ED E9                             ld      hl,l2targetArray2   ; L2targetArray2 Population
 202+ ECF8 CD DC EB                             call    l2_fill_dma
 203+ ECFB 21 ED E9                             ld      hl,l2targetArray2   ; L2targetArray2 Population
 204+ ECFE 3E D2                                ld      a,OPCODE_JpNCnn
 205+ ED00              ; Uses HL DE
 206+ ED00              ; Note this works out the last position for each point, not any intermediate
 207+ ED00              ; so we need a version that plots lowest for left line & highest for right line
 208+ ED00 22 8C ED     int_bren_save_Array:    ld      (.TargetArrayAddr+2),hl
 209+ ED03 32 9D ED                             ld      (.TargetJump),a
 210+ ED06 2A F0 EB                             ld      hl,(l2_X1)          ; if X0 < X1
 211+ ED09 ED 5B EC EB                          ld      de,(l2_X0)          ; calculate SX DX
 212+ ED0D              ; --- dx = abs(x1 - x0) & set up SX
 213+ ED0D                                      ClearCarryFlag              ;
 213+ ED0D B7          >                        or a
 214+ ED0E ED 52                                sbc     hl,de               ;
 215+ ED10 CB 7C                                bit     7,h                 ;
 216+ ED12 28 0E                                jr      z,.DXPositive       ;
 217+ ED14              .DXNegative:            NegHL                       ;
 217+ ED14 AF          >                    xor a
 217+ ED15 95          >                    sub l
 217+ ED16 6F          >                    ld l,a
 217+ ED17 9F          >                    sbc a,a
 217+ ED18 94          >                    sub h
 217+ ED19 67          >                    ld h,a
 218+ ED1A                                      SetDecrement .UpdateX0Operation
 218+ ED1A 3E 1B       >                        ld      a,OPCODE_DecDE
 218+ ED1C 32 ED ED    >                        ld      (.UpdateX0Operation),a
 219+ ED1F C3 27 ED                             jp      .DoneCalcDx         ;
 220+ ED22              .DXPositive:            SetIncrement .UpdateX0Operation
 220+ ED22 3E 13       >                        ld      a,OPCODE_IncDE
 220+ ED24 32 ED ED    >                        ld      (.UpdateX0Operation),a
 221+ ED27 22 F6 EB     .DoneCalcDx:            ld      (l2_DX),hl          ;
 222+ ED2A ED 5B EC EB                          ld      de,(l2_X0)          ; fetch in X0 so we can exx
 223+ ED2E ED 4B F0 EB                          ld      bc,(l2_X1)          ; and also X1
 224+ ED32 D9                                   exx                         ; ++now hl' = DX, DE'=X0, BC' = X1
 225+ ED33              ; --- dy = -abs(y1 - y0) & set up SY
 226+ ED33 2A F2 EB     .CalcDY:                ld      hl,(l2_Y1)          ; If Y1 < Y1
 227+ ED36 ED 5B EE EB                          ld      de,(l2_Y0)          ; calculate SY DY
 228+ ED3A                                      ClearCarryFlag              ;
 228+ ED3A B7          >                        or a
 229+ ED3B ED 52                                sbc     hl,de               ;
 230+ ED3D CB 7C                                bit     7,h                 ;
 231+ ED3F 28 08                                jr      z,.DYPositive       ;
 232+ ED41              .DYNegative:            SetDecrement .UpdateY0Operation
 232+ ED41 3E 1B       >                        ld      a,OPCODE_DecDE
 232+ ED43 32 24 EE    >                        ld      (.UpdateY0Operation),a
 233+ ED46 C3 27 ED                             jp      .DoneCalcDx         ;
 234+ ED49              .DYPositive:            NegHL                       ;
 234+ ED49 AF          >                    xor a
 234+ ED4A 95          >                    sub l
 234+ ED4B 6F          >                    ld l,a
 234+ ED4C 9F          >                    sbc a,a
 234+ ED4D 94          >                    sub h
 234+ ED4E 67          >                    ld h,a
 235+ ED4F                                      SetIncrement .UpdateY0Operation
 235+ ED4F 3E 13       >                        ld      a,OPCODE_IncDE
 235+ ED51 32 24 EE    >                        ld      (.UpdateY0Operation),a
 236+ ED54 22 F8 EB     .DoneCalcDy:            ld      (l2_DY),hl
 237+ ED57 ED 5B EE EB                          ld      de,(l2_Y0)          ; fetch in X0
 238+ ED5B ED 4B F2 EB                          ld      bc,(l2_Y1)          ; now hl = DY, DE=Y0, BC = Y1
 239+ ED5F              ; ---   error = dx + dy >> at this point hl' = DX, DE'=X0, BC' = X1 and hl = DY, DE=Y0, BC = Y1
 240+ ED5F E5 FD E1     .CalcError:             ld      iy,hl               ; fetch DY into IY
 241+ ED62 D9                                   exx                         ; ++now looking at DX data set and DY in alternate
 242+ ED63 EB                                   ex      de,hl               ; quickly flip over de and to support add instruction
 243+ ED64 FD 19                                add     iy,de               ; we have set up IY as L2_Error
 244+ ED66 EB                                   ex      de,hl
 245+ ED67 FD 22 FA EB                          ld      (l2_Error),iy
 246+ ED6B              ; --- While True        >> at this point we are looing at DX and need to consider state at iteration loop
 247+ ED6B D9           .CalcLoop:              exx                         ; ++now looking at DY data set and DX in alternate
 248+ ED6C                                      ;ld      hl,(l2_X0)         ; get X0 and Y0
 249+ ED6C              ; --- PLOT X0, Y0       >> now looking at DY data set and DX in alternate
 250+ ED6C              .CheckYRange:           ;ld      de,(l2_Y0)
 251+ ED6C 7A                                   ld      a,d                 ; if Y0 > 127
 252+ ED6D A7                                   and     a                   ; or Y0 is negative
 253+ ED6E 20 35                                jr      nz,.YOutOfRange     ; then we can skip the plot
 254+ ED70 7B                                   ld      a,e                 ;
 255+ ED71 E6 80                                and     $80                 ;
 256+ ED73 20 30                                jr      nz,.YOutOfRange     ;
 257+ ED75 D9           .CheckXRange:           exx                         ; ++now looking at DX data set and DY in alternate
 258+ ED76 7A                                   ld      a,d                 ; if X0 is negative
 259+ ED77 A7                                   and     a
 260+ ED78 28 0E                                jr      z,.XOKToPlot
 261+ ED7A E6 80                                and     $80
 262+ ED7C 28 05                                jr      z,.NotXNegative
 263+ ED7E 3E 00        .XNegative:             ld      a,0                 ; if X0 <0 > 255 then clamp it
 264+ ED80 C3 89 ED                             jp      .ClipXDone          ;
 265+ ED83 3E FF        .NotXNegative:          ld      a,255               ;
 266+ ED85 C3 89 ED                             jp      .ClipXDone          ;
 267+ ED88 7B           .XOKToPlot:             ld      a,e                 ; no clip therefore we can just use X0 as is
 268+ ED89 D9           .ClipXDone:             exx                         ; ++now looking at DY data set and DX in alternate
 269+ ED8A DD 21 ED E8  .TargetArrayAddr:       ld      ix,l2targetArray1   ; later this will be self modifying
 270+ ED8E 08                                   ex      af,af'
 271+ ED8F 7B                                   ld      a,e
 272+ ED90 32 9B ED                             ld      (.TargetRead+2),a   ; Write Y0 offset to IX offset
 273+ ED93 32 A3 ED                             ld      (.TargetWrite+2),a  ; Write Y0 offset to IX offset
 274+ ED96 08                                   ex      af,af'
 275+ ED97 C5                                   push    bc
 276+ ED98 47                                   ld      b,a
 277+ ED99 DD 7E 00     .TargetRead:            ld      a,(IX+0)
 278+ ED9C B8                                   cp      b
 279+ ED9D DA A4 ED     .TargetJump:            jp      c,.SkipWrite
 280+ EDA0 78                                   ld      a,b
 281+ EDA1 DD 77 00     .TargetWrite:           ld      (IX+0),a            ; directly updates l2targetArray1
 282+ EDA4 C1           .SkipWrite:             pop     bc
 283+ EDA5              ; --- if x0 == x1 && y0 == y1 break
 284+ EDA5              .YOutOfRange: ; At this point we have either plotted or its outside array range
 285+ EDA5 D9                                   exx                         ; ++now looking at DX data set and DY in alternate
 286+ EDA6              ;                        ld      bc,(l2_X1)
 287+ EDA6              .CheckEndXY:            cpDEEquBC .CheckEndXYOK     ; de will equal X0 still by here
 287+ EDA6 7A          >                        ld      a,d
 287+ EDA7 B8          >                        cp      b
 287+ EDA8 C2 B0 ED    >                        jp      nz, .CheckEndXYOK
 287+ EDAB 7B          >                        ld      a,e
 287+ EDAC B9          >                        cp      c
 287+ EDAD             >.NoTheSame:
 288+ EDAD C2 BA ED                             jp      nz,.x0x1Differ
 289+ EDB0 D9           .CheckEndXYOK:          exx                         ; ++ in this branch in this branchnow looking at DY data set and DX in alternate
 290+ EDB1              ;                        ld      bc,(l2_Y1)
 291+ EDB1                                      cpDEEquBC  .x0x1Differ      ; de will equal Y0 still by here
 291+ EDB1 7A          >                        ld      a,d
 291+ EDB2 B8          >                        cp      b
 291+ EDB3 C2 BA ED    >                        jp      nz, .x0x1Differ
 291+ EDB6 7B          >                        ld      a,e
 291+ EDB7 B9          >                        cp      c
 291+ EDB8             >.NoTheSame:
 292+ EDB8 D9                                   exx                         ; ++ in this branch now looking at DX data set and DY in alternate
 293+ EDB9 C8                                   ret     z                   ; if they are both the same we are done
 294+ EDBA              .x0x1Differ:                                        ; by this point we could be looking at DX on all branches
 295+ EDBA              ; --- e2 = 2 * error
 296+ EDBA D9           .SetError2:             exx                         ; ++now looking at DY data set and DX in alternate
 297+ EDBB E5 D5                                push    hl,,de              ; save HL
 298+ EDBD EB                                   ex      de,hl               ; de = DY; could futher optimise to check DY>E2 and reduce instruction count
 299+ EDBE FD E5 E1                             ld      hl,iy;(l2_Error)       ; e2 = 2 * error
 300+ EDC1 29                                   add     hl,hl               ; .
 301+ EDC2 22 FC EB                             ld      (l2_E2),hl          ; .
 302+ EDC5                                      ; before here we are looking at DY
 303+ EDC5              ; --- if e2 >= dy
 304+ EDC5 CD EA 9A     .CheckE2gteDY:          call    compare16HLDE       ; .
 305+ EDC8 D1 E1                                pop     hl,,de              ; before jumps get HL back
 306+ EDCA EA D3 ED                             jp      pe, .E2DyParitySet  ; Jump looking at DY
 307+ EDCD FA EF ED                             jp      m,  .E2ltDY         ; Jump looking at DY to get here overflow clear, so if m is set then HL<DE
 308+ EDD0 C3 D6 ED                             jp      .E2gteDY            ; Jump looking at DY
 309+ EDD3              .E2DyParitySet:         ; entering here looking at DY
 310+ EDD3 F2 EF ED                             jp      p,  .E2ltDY         ; Jump looking at DY if pe is set, then if sign is clear HL<DE
 311+ EDD6              ; --- if x0 == x1 break
 312+ EDD6 D9           .E2gteDY:               exx                         ; ++ in this branch now looking at DX data set and DY in alternate
 313+ EDD7                                      cpDEEquBC .ErrorUpdateDY    ;      if x0 == x1 break
 313+ EDD7 7A          >                        ld      a,d
 313+ EDD8 B8          >                        cp      b
 313+ EDD9 C2 DF ED    >                        jp      nz, .ErrorUpdateDY
 313+ EDDC 7B          >                        ld      a,e
 313+ EDDD B9          >                        cp      c
 313+ EDDE             >.NoTheSame:
 314+ EDDE C8                                   ret     z                   ;      .
 315+ EDDF              ; --- error = error + dy
 316+ EDDF D9           .ErrorUpdateDY:         exx                         ; if we get here we are looking at DY data set and DX in alternate
 317+ EDE0 E5 D5                                push    hl,,de              ; save HL
 318+ EDE2 EB                                   ex      de,hl               ; de = DY
 319+ EDE3 FD E5 E1                             ld      hl,iy;(l2_Error)       ;      error = error + dy
 320+ EDE6 19                                   add     hl,de               ;      .
 321+ EDE7 E5 FD E1                             ld      iy,hl;(l2_Error),hl       ;      .
 322+ EDEA D1 E1                                pop     hl,,de
 323+ EDEC              ; --- x0 = x0 + sx
 324+ EDEC D9           .UpdateX0:              exx                         ; now back looking at DX data set and DY in alternate
 325+ EDED 00           .UpdateX0Operation:     nop                         ;      x0 = x0 +/- sx
 326+ EDEE D9                                   exx                         ; correction on this brach so we are looking at DY
 327+ EDEF              .E2ltDY:                ; entering here, looking at DY in all branches
 328+ EDEF              ; --- if e2 <= dx
 329+ EDEF D9           .CheckE2lteDX:          exx                         ; we want to look at DX
 330+ EDF0 E5 D5                                push    hl,,de
 331+ EDF2 EB                                   ex      de,hl               ; de = l2_DX
 332+ EDF3 2A FC EB                             ld      hl,(l2_E2)          ; if e2 <= dx
 333+ EDF6              ;                        ld      de,(l2_DX)          ; as we can't do skip on e2>dx
 334+ EDF6 CD EA 9A                             call    compare16HLDE       ; we will jump based on e2 <= dx
 335+ EDF9 D1 E1                                pop     hl,,de              ; recover saved HL DE
 336+ EDFB CA 0D EE                             jp      z, .E2lteDX         ; Jump looking at DX
 337+ EDFE EA 07 EE                             jp      pe, .E2DxParitySet  ; Jump looking at DX
 338+ EE01 FA 0D EE                             jp      m,  .E2lteDX        ; Jump looking at DX : to get here overflow clear, so if m is set then HL<DE
 339+ EE04 C3 26 EE                             jp      .E2gteDx            ; Jump looking at DX
 340+ EE07 F2 0D EE     .E2DxParitySet:         jp      p,  .E2lteDX        ; Jump looking at DX
 341+ EE0A C3 26 EE                             jp      .E2gteDx            ; Jump looking at DX
 342+ EE0D              ; ---  if y0 == y1 break
 343+ EE0D              .E2lteDX:               ; Entry looking at DX
 344+ EE0D D9                                   exx                         ;      in branch looking at DY
 345+ EE0E                                      cpDEEquBC .ErrorUpdateDX    ;      .
 345+ EE0E 7A          >                        ld      a,d
 345+ EE0F B8          >                        cp      b
 345+ EE10 C2 17 EE    >                        jp      nz, .ErrorUpdateDX
 345+ EE13 7B          >                        ld      a,e
 345+ EE14 B9          >                        cp      c
 345+ EE15             >.NoTheSame:
 346+ EE15 D9                                   exx                         ;      in branch looking at DX
 347+ EE16 C8                                   ret     z                   ;      .
 348+ EE17              ; --- error = error + dx
 349+ EE17              .ErrorUpdateDX:         ; at this point will be looking at DX
 350+ EE17 E5 D5                                push    hl,,de
 351+ EE19 EB                                   ex      de,hl               ;      de = DY
 352+ EE1A FD E5 E1                             ld      hl,iy;(l2_Error)       ;      error = error + dx
 353+ EE1D 19                                   add     hl,de               ;      .
 354+ EE1E E5 FD E1                             ld      iy,hl;(l2_Error),hl       ;      .
 355+ EE21 D1 E1                                pop     hl,,de
 356+ EE23              ; --- y0 = y0 + sy
 357+ EE23 D9           .UpdateY0:              exx                         ;      in this branch we are looking at DY
 358+ EE24 00           .UpdateY0Operation:     nop                         ;      y0 = y0 + sy
 359+ EE25 D9                                   exx                         ;      in this branch we are looking at
 360+ EE26              ; --- Loop
 361+ EE26              .E2gteDx:               ; at this point will be looking at DX again
 362+ EE26 C3 6B ED                             jp      .CalcLoop           ; repeat until we have a return
 363+ EE29
# file closed: ./Layer2Graphics/int_bren_save.asm
 802  EE29              ;    INCLUDE "./Layer2Graphics/asm_l2_plot_triangle.asm"
 803  EE29              ;    INCLUDE "./Layer2Graphics/asm_l2_fill_triangle.asm"
 804  EE29              ;    INCLUDE "./Layer2Graphics/L2_SolidTriangles.asm"
 805  EE29                  INCLUDE "./Layer2Graphics/layer2_plot_circle.asm"
# file opened: ./Layer2Graphics/layer2_plot_circle.asm
   1+ EE29
   2+ EE29 00 00        l2_circle_pos		DW 0
   3+ EE2B 00           l2_circle_colour	DB 0
   4+ EE2C 00           l2_circle_radius	DB 0
   5+ EE2D 00           l2_circle_x			DB 0
   6+ EE2E 00           l2_circle_y			DB 0
   7+ EE2F 00           l2_circle_d			DB 0
   8+ EE30
   9+ EE30 00 00 00...  l2_circle_xHeap 	DS 2*66
  10+ EEB4 00 00 00...  l2_circle_yHeap     DS 2*66
  11+ EF38 00           l2_circle_heap_size DB 0
  12+ EF39 00 00        l2_circle_clip_y    DW 0
  13+ EF3B 00 00        l2_circle_clip_x    DW 0
  14+ EF3D 00           l2_circle_flag      DB 0
  15+ EF3E 00           l2_circle_counter   DB 0
  16+ EF3F
  17+ EF3F              ;---------------------------------------------------------------------------------------------------------------------------------
  18+ EF3F              ; ">l2_draw_circle BC = center row col, d = radius, e = colour"
  19+ EF3F 7B           l2_draw_circle:     ld		a,e
  20+ EF40 32 E6 EF                         ld		(.PlotPixel+1),a
  21+ EF43 7A                               ld		a,d								; get radius
  22+ EF44 A7                               and		a
  23+ EF45 C8                               ret		z
  24+ EF46 FE 01                            cp		1
  25+ EF48 CA FD EF                         jp		z,CircleSinglepixel
  26+ EF4B ED 43 75 EF                      ld		(.Plot1+1),bc	        ; save origin into cXcY reg in code
  27+ EF4F DD 67                            ld		ixh,a			        ; ixh =  x = raidus
  28+ EF51 DD 2E 00                         ld		ixl,0			        ; iyh =  y = 0
  29+ EF54 26 00        .calcd:	            ld		h,0
  30+ EF56 6F                               ld		l,a
  31+ EF57 29                               add		hl,hl			        ; hl = r * 2
  32+ EF58 EB                               ex		de,hl			        ; de = r * 2
  33+ EF59 21 03 00                         ld		hl,3
  34+ EF5C A7                               and		a
  35+ EF5D ED 52                            sbc		hl,de			        ; hl = 3 - (r * 2)
  36+ EF5F 44                               ld		b,h
  37+ EF60 4D                               ld		c,l				        ; bc = 3 - (r * 2)
  38+ EF61 21 01 00     .calcdelta:         ld		hl,1
  39+ EF64 16 00                            ld		d,0
  40+ EF66 DD 5D                            ld		e,ixl
  41+ EF68 A7                               and		a
  42+ EF69 ED 52                            sbc		hl,de
  43+ EF6B 11 01 00     .Setde1:            ld		de,1
  44+ EF6E DD 7C        .CircleLoop:        ld		a,ixh
  45+ EF70 DD BD                            cp		ixl
  46+ EF72 D8                               ret		c
  47+ EF73 D9           .ProcessLoop:	    exx
  48+ EF74 11 00 00     .Plot1:             ld		de,0                    ; de = cXcY
  49+ EF77 7B                               ld		a,e                     ; c = cY + error
  50+ EF78 DD 85                            add		a,ixl                   ;
  51+ EF7A 4F                               ld		c,a                     ;
  52+ EF7B 7A                               ld		a,d                     ; b = xY+radius
  53+ EF7C DD 84                            add		a,ixh                   ;
  54+ EF7E 47                               ld		b,a                     ;
  55+ EF7F CD E5 EF                         call	.PlotPixel			    ;CX+X,CY+Y
  56+ EF82 7B           .Plot2:             ld 		a,e
  57+ EF83 DD 95                            sub 	ixl
  58+ EF85 4F                               ld 		c,a
  59+ EF86 7A                               ld 		a,d
  60+ EF87 DD 84                            add 	a,ixh
  61+ EF89 47                               ld		b,a
  62+ EF8A CD E5 EF                         call	.PlotPixel			    ;CX-X,CY+Y
  63+ EF8D 7B           .Plot3:             ld 		a,e
  64+ EF8E DD 85                            add		a,ixl
  65+ EF90 4F                               ld 		c,a
  66+ EF91 7A                               ld 		a,d
  67+ EF92 DD 94                            sub 	ixh
  68+ EF94 47                               ld 		b,a
  69+ EF95 CD E5 EF                         call	.PlotPixel			    ;CX+X,CY-Y
  70+ EF98 7B           .Plot4:             ld 		a,e
  71+ EF99 DD 95                            sub 	ixl
  72+ EF9B 4F                               ld 		c,a
  73+ EF9C 7A                               ld 		a,d
  74+ EF9D DD 94                            sub 	ixh
  75+ EF9F 47                               ld 		b,a
  76+ EFA0 CD E5 EF                         call	.PlotPixel			    ;CX-X,CY-Y
  77+ EFA3 7A           .Plot5:	            ld 		a,d
  78+ EFA4 DD 85                            add 	a,ixl
  79+ EFA6 47                               ld 		b,a
  80+ EFA7 7B                               ld 		a,e
  81+ EFA8 DD 84                            add 	a,ixh
  82+ EFAA 4F                               ld 		c,a
  83+ EFAB CD E5 EF                         call	.PlotPixel			    ;CY+X,CX+Y
  84+ EFAE 7A           .Plot6:	            ld 		a,d
  85+ EFAF DD 95                            sub 	ixl
  86+ EFB1 47                               ld 		b,a
  87+ EFB2 7B                               ld 		a,e
  88+ EFB3 DD 84                            add 	a,ixh
  89+ EFB5 4F                               ld 		c,a
  90+ EFB6 CD E5 EF                         call	.PlotPixel			    ;CY-X,CX+Y
  91+ EFB9 7A           .Plot7:	            ld 		a,d
  92+ EFBA DD 85                            add 	a,ixl
  93+ EFBC 47                               ld 		b,a
  94+ EFBD 7B                               ld 		a,e
  95+ EFBE DD 94                            sub 	ixh
  96+ EFC0 4F                               ld 		c,a
  97+ EFC1 CD E5 EF                         call	.PlotPixel			    ;CY+X,CX-Y
  98+ EFC4 7A           .Plot8:	            ld 		a,d
  99+ EFC5 DD 95                            sub 	ixl
 100+ EFC7 47                               ld		b,a
 101+ EFC8 7B                               ld 		a,e
 102+ EFC9 DD 94                            sub 	ixh
 103+ EFCB 4F                               ld 		c,a
 104+ EFCC CD E5 EF                         call	.PlotPixel			    ;CY-X,CX-Y
 105+ EFCF D9                               exx
 106+ EFD0 CB 7C        .IncrementCircle:	bit     7,h				        ; Check for Hl<=0
 107+ EFD2 28 03                            jr z,   .draw_circle_1
 108+ EFD4 19                               add hl,de			            ; Delta=Delta+D1
 109+ EFD5 18 05                            jr      .draw_circle_2		;
 110+ EFD7 09           .draw_circle_1:		add     hl,bc			        ; Delta=Delta+D2
 111+ EFD8 03                               inc     bc
 112+ EFD9 03                               inc     bc				        ; D2=D2+2
 113+ EFDA DD 25                            dec     ixh				        ; Y=Y-1
 114+ EFDC 03           .draw_circle_2:		inc bc				            ; D2=D2+2
 115+ EFDD 03                               inc bc
 116+ EFDE 13                               inc de				            ; D1=D1+2
 117+ EFDF 13                               inc de
 118+ EFE0 DD 2C                            inc ixl				            ; X=X+1
 119+ EFE2 C3 6E EF                         jp      .CircleLoop
 120+ EFE5 3E 00        .PlotPixel:         ld		a,0                     ; This was originally indirect, where as it neeed to be value
 121+ EFE7 D5 C5 E5                         push	de,,bc,,hl
 122+ EFEA                                  l2_plot_macro; call 	l2_plot_pixel_y_test
 122+ EFEA 78          >                        ld      a,b
 122+ EFEB             >                        JumpIfAGTENusng 192 ,.NoPlot
 122+ EFEB FE C0       >                        cp     192
 122+ EFED D2 F9 EF    >                        jp		nc,.NoPlot
 122+ EFF0 69          >                        ld      l,c
 122+ EFF1 CD 78 E0    >                        call    asm_l2_row_bank_select
 122+ EFF4 67          >                        ld      h,a
 122+ EFF5 3A 22 E4    >                        ld      a,(line_gfx_colour)
 122+ EFF8 77          >                        ld      (hl),a
 122+ EFF9             >.NoPlot:
 123+ EFF9 E1 C1 D1                         pop		de,,bc,,hl
 124+ EFFC C9                               ret
 125+ EFFD 7B           CircleSinglepixel:  ld		a,e
 126+ EFFE                                  l2_plot_macro; call	l2_plot_pixel_y_test
 126+ EFFE 78          >                        ld      a,b
 126+ EFFF             >                        JumpIfAGTENusng 192 ,.NoPlot
 126+ EFFF FE C0       >                        cp     192
 126+ F001 D2 0D F0    >                        jp		nc,.NoPlot
 126+ F004 69          >                        ld      l,c
 126+ F005 CD 78 E0    >                        call    asm_l2_row_bank_select
 126+ F008 67          >                        ld      h,a
 126+ F009 3A 22 E4    >                        ld      a,(line_gfx_colour)
 126+ F00C 77          >                        ld      (hl),a
 126+ F00D             >.NoPlot:
 127+ F00D C9                               ret
 128+ F00E
 129+ F00E              CalcNewPointMacro:  MACRO reg1, oper, reg2
 130+ F00E ~                                ClearCarryFlag
 131+ F00E ~                                ld      b,0
 132+ F00E ~                                ld      c,reg2
 133+ F00E ~                                oper    hl,bc
 134+ F00E                                  ENDM
 135+ F00E
 136+ F00E              ; ">l2_draw_clipped_circle HL = Center X 2's c, DE = Center Y 2's , c = radius, b = colour"
 137+ F00E              l2_draw_clipped_circle:
 138+ F00E 78                               ld      a,b                     ; save Colour
 139+ F00F 32 40 F1                         ld		(.PlotColour+1),a
 140+ F012 79                               ld		a,c								; get radius
 141+ F013                                  ReturnIfAIsZero
 141+ F013 A7          >                        and     a
 141+ F014 C8          >                        ret     z
 142+ F015                                  JumpIfAEqNusng  1, .circleSinglepixel
 142+ F015 FE 01       >                        cp     1
 142+ F017 CA 5A F1    >                        jp      z,.circleSinglepixel
 143+ F01A ED 53 47 F0                      ld		(.Plot1Y+1),de					; save origin into DE and HL
 144+ F01E 22 4A F0                         ld      (.Plot1X+1),hl                  ; .
 145+ F021                                  DISPLAY "TODO : IXH and IXL need to be 16 bit and in IX and IY"
 146+ F021 DD 67                            ld		ixh,a							; ixh = x = raidus
 147+ F023 DD 2E 00                         ld		ixl,0						    ; ixl = y = error
 148+ F026 26 00        .calcd:	            ld		h,0                             ; hl = radius
 149+ F028 6F                               ld		l,a                             ; raidius is still in a at this point
 150+ F029 29                               add		hl,hl							; hl = r * 2
 151+ F02A EB                               ex		de,hl							; de = r * 2
 152+ F02B 21 03 00                         ld		hl,3                            ; hl = 3 - (r * 2)
 153+ F02E                                  ClearCarryFlag                          ; .
 153+ F02E B7          >                        or a
 154+ F02F ED 52                            sbc		hl,de							; .
 155+ F031 44 4D                            ld      bc,hl                           ; bc = 3 - (r * 2)
 156+ F033 21 01 00     .calcdelta:         ld		hl,1                            ; hl = 1
 157+ F036 16 00                            ld		d,0                             ; de = ixl (error)
 158+ F038 DD 5D                            ld		e,ixl                           ;
 159+ F03A                                  ClearCarryFlag                          ;
 159+ F03A B7          >                        or a
 160+ F03B ED 52                            sbc		hl,de                           ; hl = 1 - error
 161+ F03D 11 01 00     .Setde1:            ld		de,1                            ; de = 1
 162+ F040              .CircleLoop:        ReturnIfRegLTNusng ixh, ixl             ; if radius > ixl counter
 162+ F040 DD 7C       >                        ld      a,ixh
 162+ F042 DD BD       >                        cp      ixl
 162+ F044 D8          >                        ret	    c
 163+ F045 D9           .ProcessLoop:	    exx                                     ; save all bc,de,hl registers
 164+ F046              ;--- CX+X,CY+Y ---------------------------------------------;
 165+ F046 11 00 00     .Plot1Y:            ld		de,0                            ; this is Y coord
 166+ F049 21 00 00     .Plot1X:            ld      hl,0                            ; this is x coord
 167+ F04C E5 D5                            push    hl,,de
 168+ F04E                                  CalcNewPointMacro hl, adc, ixh          ;
 168+ F04E             >                    ClearCarryFlag
 168+ F04E B7          >                        or a
 168+ F04F 06 00       >                    ld      b,0
 168+ F051 DD 4C       >                    ld      c,ixh
 168+ F053 ED 4A       >                    adc    hl,bc
 169+ F055 EB                               ex      de,hl                           ; de = x coord calculated, hl =y center Y
 170+ F056                                  CalcNewPointMacro hl, adc, ixl          ;
 170+ F056             >                    ClearCarryFlag
 170+ F056 B7          >                        or a
 170+ F057 06 00       >                    ld      b,0
 170+ F059 DD 4D       >                    ld      c,ixl
 170+ F05B ED 4A       >                    adc    hl,bc
 171+ F05D CD 35 F1                         call	.PlotPixel	            		; CX+X,CY+Y using DE = x and hl = y *** Note if we order plot 1 to 8 we can selectivley jump past many on elimiation check
 172+ F060 D1 E1        .Plot1Done:         pop     hl,,de                          ; get de (y) and hl (x) back but reversed as the next plot expected the to be reversed from the ex de,hl above  + 0
 173+ F062              ;--- CX+X,CY-Y ---------------------------------------------;
 174+ F062 E5 D5        .Plot2:             push    hl,,de                          ; e.g  do all CX + X first, so plot1, plot3 and just one check for cx + x off screen
 175+ F064                                  CalcNewPointMacro hl, adc, ixh          ;
 175+ F064             >                    ClearCarryFlag
 175+ F064 B7          >                        or a
 175+ F065 06 00       >                    ld      b,0
 175+ F067 DD 4C       >                    ld      c,ixh
 175+ F069 ED 4A       >                    adc    hl,bc
 176+ F06B                                  JumpIfRegIsNotZero  h,.Plot2Done        ;
 176+ F06B 7C          >                        ld      a,h
 176+ F06C A7          >                        and     a
 176+ F06D C2 7B F0    >                        jp	    nz,.Plot2Done
 177+ F070 EB                               ex      de,hl                           ; de = calculated x
 178+ F071                                  CalcNewPointMacro hl, sbc, ixl          ;
 178+ F071             >                    ClearCarryFlag
 178+ F071 B7          >                        or a
 178+ F072 06 00       >                    ld      b,0
 178+ F074 DD 4D       >                    ld      c,ixl
 178+ F076 ED 42       >                    sbc    hl,bc
 179+ F078 CD 35 F1                         call	.PlotPixel	                    ; CX-X,CY+Y
 180+ F07B D1 E1        .Plot2Done:         pop     hl,,de
 181+ F07D              ;--- CX-X,CY-Y ---------------------------------------------; bollocksC
 182+ F07D E5 D5        .Plot3:             push    hl,,de
 183+ F07F                                  CalcNewPointMacro hl, sbc, ixh          ;
 183+ F07F             >                    ClearCarryFlag
 183+ F07F B7          >                        or a
 183+ F080 06 00       >                    ld      b,0
 183+ F082 DD 4C       >                    ld      c,ixh
 183+ F084 ED 42       >                    sbc    hl,bc
 184+ F086                                  JumpIfRegIsNotZero  h,.Plot3Done        ;
 184+ F086 7C          >                        ld      a,h
 184+ F087 A7          >                        and     a
 184+ F088 C2 96 F0    >                        jp	    nz,.Plot3Done
 185+ F08B EB                               ex      de,hl                           ; de = calculated x
 186+ F08C                                  CalcNewPointMacro hl, sbc, ixl          ;
 186+ F08C             >                    ClearCarryFlag
 186+ F08C B7          >                        or a
 186+ F08D 06 00       >                    ld      b,0
 186+ F08F DD 4D       >                    ld      c,ixl
 186+ F091 ED 42       >                    sbc    hl,bc
 187+ F093 CD 35 F1                         call	.PlotPixel	                    ; CX+X,CY-Y
 188+ F096 D1 E1        .Plot3Done:         pop     hl,,de
 189+ F098              ;--- CX-X,CY+Y ---------------------------------------------; bollocks
 190+ F098 E5 D5        .Plot4:             push    hl,,de
 191+ F09A                                  CalcNewPointMacro hl, sbc, ixh          ;
 191+ F09A             >                    ClearCarryFlag
 191+ F09A B7          >                        or a
 191+ F09B 06 00       >                    ld      b,0
 191+ F09D DD 4C       >                    ld      c,ixh
 191+ F09F ED 42       >                    sbc    hl,bc
 192+ F0A1                                  JumpIfRegIsNotZero  h,.Plot4Done
 192+ F0A1 7C          >                        ld      a,h
 192+ F0A2 A7          >                        and     a
 192+ F0A3 C2 B1 F0    >                        jp	    nz,.Plot4Done
 193+ F0A6 EB                               ex      de,hl
 194+ F0A7                                  CalcNewPointMacro hl, adc, ixl          ;
 194+ F0A7             >                    ClearCarryFlag
 194+ F0A7 B7          >                        or a
 194+ F0A8 06 00       >                    ld      b,0
 194+ F0AA DD 4D       >                    ld      c,ixl
 194+ F0AC ED 4A       >                    adc    hl,bc
 195+ F0AE CD 35 F1                         call	.PlotPixel	                    ; CX-X,CY-Y
 196+ F0B1 D1 E1        .Plot4Done:         pop     hl,,de
 197+ F0B3              ;--- CX+Y,CY+X ---------------------------------------------; bollocks
 198+ F0B3 E5 D5        .Plot5:             push    hl,,de
 199+ F0B5                                  CalcNewPointMacro hl, adc, ixl          ;
 199+ F0B5             >                    ClearCarryFlag
 199+ F0B5 B7          >                        or a
 199+ F0B6 06 00       >                    ld      b,0
 199+ F0B8 DD 4D       >                    ld      c,ixl
 199+ F0BA ED 4A       >                    adc    hl,bc
 200+ F0BC                                  JumpIfRegIsNotZero  h,.Plot5Done
 200+ F0BC 7C          >                        ld      a,h
 200+ F0BD A7          >                        and     a
 200+ F0BE C2 CC F0    >                        jp	    nz,.Plot5Done
 201+ F0C1 EB                               ex      de,hl
 202+ F0C2                                  CalcNewPointMacro hl, adc, ixh          ;
 202+ F0C2             >                    ClearCarryFlag
 202+ F0C2 B7          >                        or a
 202+ F0C3 06 00       >                    ld      b,0
 202+ F0C5 DD 4C       >                    ld      c,ixh
 202+ F0C7 ED 4A       >                    adc    hl,bc
 203+ F0C9 CD 35 F1                         call	.PlotPixel	                    ;CY+X,CX+Y
 204+ F0CC D1 E1        .Plot5Done:         pop     hl,,de
 205+ F0CE              ;--- CX+Y,CX-X ---------------------------------------------;bollocks
 206+ F0CE E5 D5        .Plot6:             push    hl,,de
 207+ F0D0                                  CalcNewPointMacro hl, adc, ixl          ;
 207+ F0D0             >                    ClearCarryFlag
 207+ F0D0 B7          >                        or a
 207+ F0D1 06 00       >                    ld      b,0
 207+ F0D3 DD 4D       >                    ld      c,ixl
 207+ F0D5 ED 4A       >                    adc    hl,bc
 208+ F0D7                                  JumpIfRegIsNotZero  h,.Plot6Done
 208+ F0D7 7C          >                        ld      a,h
 208+ F0D8 A7          >                        and     a
 208+ F0D9 C2 E7 F0    >                        jp	    nz,.Plot6Done
 209+ F0DC EB                               ex      de,hl
 210+ F0DD                                  CalcNewPointMacro hl, sbc, ixh          ;
 210+ F0DD             >                    ClearCarryFlag
 210+ F0DD B7          >                        or a
 210+ F0DE 06 00       >                    ld      b,0
 210+ F0E0 DD 4C       >                    ld      c,ixh
 210+ F0E2 ED 42       >                    sbc    hl,bc
 211+ F0E4 CD 35 F1                         call	.PlotPixel	                    ; CY-X,CX+Y
 212+ F0E7 D1 E1        .Plot6Done:         pop     hl,,de
 213+ F0E9              ;--- CX-Y,CY-X ---------------------------------------------;bollocksC
 214+ F0E9 E5 D5        .Plot7:             push    hl,,de
 215+ F0EB                                  CalcNewPointMacro hl, sbc, ixl          ;
 215+ F0EB             >                    ClearCarryFlag
 215+ F0EB B7          >                        or a
 215+ F0EC 06 00       >                    ld      b,0
 215+ F0EE DD 4D       >                    ld      c,ixl
 215+ F0F0 ED 42       >                    sbc    hl,bc
 216+ F0F2                                  JumpIfRegIsNotZero  h,.Plot7Done
 216+ F0F2 7C          >                        ld      a,h
 216+ F0F3 A7          >                        and     a
 216+ F0F4 C2 02 F1    >                        jp	    nz,.Plot7Done
 217+ F0F7 EB                               ex      de,hl
 218+ F0F8                                  CalcNewPointMacro hl, sbc, ixh          ;
 218+ F0F8             >                    ClearCarryFlag
 218+ F0F8 B7          >                        or a
 218+ F0F9 06 00       >                    ld      b,0
 218+ F0FB DD 4C       >                    ld      c,ixh
 218+ F0FD ED 42       >                    sbc    hl,bc
 219+ F0FF CD 35 F1                         call	.PlotPixel	                    ; CY+X,CX-Y
 220+ F102 D1 E1        .Plot7Done:         pop     hl,,de
 221+ F104              ;--- CX-Y,CY+X ---------------------------------------------; bollocks
 222+ F104 E5 D5        .Plot8:             push    hl,,de
 223+ F106                                  CalcNewPointMacro hl, sbc, ixl          ;
 223+ F106             >                    ClearCarryFlag
 223+ F106 B7          >                        or a
 223+ F107 06 00       >                    ld      b,0
 223+ F109 DD 4D       >                    ld      c,ixl
 223+ F10B ED 42       >                    sbc    hl,bc
 224+ F10D                                  JumpIfRegIsNotZero  h,.Plot8Done
 224+ F10D 7C          >                        ld      a,h
 224+ F10E A7          >                        and     a
 224+ F10F C2 1D F1    >                        jp	    nz,.Plot8Done
 225+ F112 EB                               ex      de,hl
 226+ F113                                  CalcNewPointMacro hl, adc, ixh          ;
 226+ F113             >                    ClearCarryFlag
 226+ F113 B7          >                        or a
 226+ F114 06 00       >                    ld      b,0
 226+ F116 DD 4C       >                    ld      c,ixh
 226+ F118 ED 4A       >                    adc    hl,bc
 227+ F11A CD 35 F1                         call	.PlotPixel	                    ; CY-X,CX-Y
 228+ F11D D1 E1        .Plot8Done:         pop     hl,,de
 229+ F11F D9           .PlotDone:          exx
 230+ F120 CB 7C        .IncrementCircle:	bit     7,h				; Check for Hl<=0
 231+ F122 28 03                            jr z,   .draw_circle_1
 232+ F124 19                               add hl,de			; Delta=Delta+D1
 233+ F125 18 05                            jr      .draw_circle_2		;
 234+ F127 09           .draw_circle_1:		add     hl,bc			; Delta=Delta+D2
 235+ F128 03                               inc     bc
 236+ F129 03                               inc     bc				; D2=D2+2
 237+ F12A DD 25                            dec     ixh				; Y=Y-1
 238+ F12C 03           .draw_circle_2:		inc     bc				; D2=D2+2
 239+ F12D 03                               inc     bc
 240+ F12E 13                               inc     de				; D1=D1+2
 241+ F12F 13                               inc     de
 242+ F130 DD 2C                            inc     ixl				; X=X+1
 243+ F132 C3 40 F0                         jp      .CircleLoop
 244+ F135 7A           .PlotPixel:         ld      a,d             ; filter x> 256 or negative
 245+ F136 A7                               and     a
 246+ F137 C0                               ret     nz
 247+ F138 7C                               ld      a,h             ; filter y > 256 or negative
 248+ F139 A7                               and     a
 249+ F13A C0                               ret     nz
 250+ F13B 7D                               ld      a,l             ; filter y > 127
 251+ F13C E6 80                            and     $80
 252+ F13E C0                               ret     nz
 253+ F13F 3E 00        .PlotColour:        ld		a,0             ; This was originally indirect, where as it neeed to be value
 254+ F141 D5 C5 E5                         push	de,,bc,,hl
 255+ F144 45                               ld      b,l             ; At this point de = x and hl = y
 256+ F145 4B                               ld      c,e
 257+ F146                                  l2_plot_macro; call 	l2_plot_pixel_y_test
 257+ F146 78          >                        ld      a,b
 257+ F147             >                        JumpIfAGTENusng 192 ,.NoPlot
 257+ F147 FE C0       >                        cp     192
 257+ F149 D2 55 F1    >                        jp		nc,.NoPlot
 257+ F14C 69          >                        ld      l,c
 257+ F14D CD 78 E0    >                        call    asm_l2_row_bank_select
 257+ F150 67          >                        ld      h,a
 257+ F151 3A 22 E4    >                        ld      a,(line_gfx_colour)
 257+ F154 77          >                        ld      (hl),a
 257+ F155             >.NoPlot:
 258+ F155 E1 C1 D1                         pop		de,,bc,,hl
 259+ F158                                  ClearCarryFlag
 259+ F158 B7          >                        or a
 260+ F159 C9                               ret
 261+ F15A 7C           .circleSinglepixel: ld      a,h             ; as its 1 pixel if h or d are non zero then its off screen
 262+ F15B B2                               or      d
 263+ F15C C0                               ret     nz
 264+ F15D CB 7B                            bit     7,e             ; and if Y is > 127 then off screen , bit is 8 states like ld a,e and a
 265+ F15F C0                               ret     nz
 266+ F160 78                               ld      a,b             ; a = colour
 267+ F161 43                               ld      b,e             ; b = y
 268+ F162 4D                               ld      c,l             ; c = x
 269+ F163 CD 23 E4                         call    l2_plot_pixel
 270+ F166 C9                               ret
 271+ F167
 272+ F167              ;---------------------------------------------------------------------------------------------------------------------------------
 273+ F167              ; ">l2_draw_circle_320 B = center row, hl = col, d = radius, e = colour"
 274+ F167              ;  draws circle in 320 mode
 275+ F167              ; self modifying set colur in code below TODO
 276+ F167 7B           l2_draw_circle_320: ld		a,e                     ; set self mo
 277+ F168 32 4B F2                         ld      (.PlotPixelColor+1),a   ; set color
 278+ F16B 32 54 F2                         ld      (.PlotCircleColor+1),a  ; set color
 279+ F16E 7A                               ld		a,d						; get radius
 280+ F16F A7                               and		a
 281+ F170 C8                               ret		z
 282+ F171 FE 01                            cp		1
 283+ F173 CA 52 F2                         jp		z,.Circle1Pixel320
 284+ F176 78                               ld      a,b
 285+ F177 32 B5 F1     .PrepPoint1:        ld      (.PlotcY1+1),a           ; save origin row into xY
 286+ F17A 22 B8 F1                         ld		(.PlotcX1+1),hl	        ; save origin into cY reg in code
 287+ F17D 32 CE F1     .PrepPoint2:        ld      (.PlotcY2+1),a          ;                   we only need to recalulate plotY
 288+ F180 22 DF F1     .PrepPoint3:        ld      (.PlotcX3+1),hl         ;                   we only need to recalulate plotX
 289+ F183              ;                   now cX and xY are swapped for points 5 to 8
 290+ F183 22 F5 F1     .PrepPoint5:        ld      (.PlotcY5+1),hl         ; save origin row into xY
 291+ F186 32 F8 F1                         ld		(.PlotcX5+1),a	        ; save origin into cY reg in code
 292+ F189 22 0B F2     .PrepPoint6:        ld      (.PlotcY6+1),hl         ;                   we only need to recalulate plotY
 293+ F18C 32 1C F2     .PrePoint7:         ld      (.PlotcX7+1),a          ;                   we only need to recalulate plotX
 294+ F18F              ;                   now process radius
 295+ F18F DD 62                            ld		ixh,d			        ; ixh =  x = raidus
 296+ F191 DD 2E 00                         ld		ixl,0			        ; iyh =  y = 0
 297+ F194              ;.
 298+ F194 26 00        .calcd:	            ld		h,0                     ; bc = hl = 3 - (r * 2)
 299+ F196 6A                               ld		l,d                     ; . de = radius * 2
 300+ F197 29                               add		hl,hl			        ; . hl = r * 2
 301+ F198 EB                               ex		de,hl			        ; . de = r * 2, l = 2
 302+ F199 21 03 00                         ld		hl,3                    ; . hl = 3
 303+ F19C A7                               and		a                       ; .
 304+ F19D ED 52                            sbc		hl,de			        ; . hl = hl - (r*2)
 305+ F19F 44                               ld		b,h                     ; . bc = hl
 306+ F1A0 4D                               ld		c,l				        ; .
 307+ F1A1 21 01 00     .calcdelta:         ld		hl,1                    ; hl = 1 - y
 308+ F1A4 16 00                            ld		d,0                     ; . d = 0
 309+ F1A6 DD 5D                            ld		e,ixl                   ; . e = y (ixl)
 310+ F1A8 A7                               and		a                       ; .
 311+ F1A9 ED 52                            sbc		hl,de                   ; . hl = hl - de
 312+ F1AB 11 01 00     .Setde1:            ld		de,1                    ; de = 1
 313+ F1AE DD 7C        .CircleLoop:        ld		a,ixh                   ; while radius >= y (also error)
 314+ F1B0 DD BD                            cp		ixl                     ;
 315+ F1B2 D8                               ret		c                       ;
 316+ F1B3 D9           .ProcessLoop:	    exx                             ;   save all current registers
 317+ F1B4              ;Total plot combos are               Optimisation
 318+ F1B4              ;                        hl    de
 319+ F1B4              ;                      1)CX+X, CY+Y  Calc push, Calc write to 4
 320+ F1B4              ;                      2)CX+X, CY-Y  pop,       Calc push
 321+ F1B4              ;                      3)CX-X, CY-Y  Calc push, pop
 322+ F1B4              ;                      4)CX-X, CY+Y  pop,       written by 1
 323+ F1B4              ;                      5)CY+X, CX+Y  Calc push, Calc write to 8
 324+ F1B4              ;                      6)CY+X, CX-Y  pop,       Calc push
 325+ F1B4              ;                      7)CY-X, CX-Y  calc push, pop
 326+ F1B4              ;                      8)CY-X, CX+Y  pop,       written by 4
 327+ F1B4              ; note if we have radius < 255 then we can use ADD hl,A and ADD DE,a to optimise and preload everying with self modifying code
 328+ F1B4              ; *** can we optimise by swapping de and hl after step 4? does it actually improve anything, likley not
 329+ F1B4              ; This sequence shoudl minimise the amount of adds or subtracts to do
 330+ F1B4 11 00 00     .PlotcY1:           ld      de,0                    ; center Y
 331+ F1B7 21 00 00     .PlotcX1:           ld      hl,0                    ; center X
 332+ F1BA C3 F4 F1                         jp      .PlotcY5
 333+ F1BD              ;...................CX+X, CY+Y....................... Calc push, Calc write to 4
 334+ F1BD DD 7C        .Plot1:             ld      a,ixh                   ; hl = cX + radius
 335+ F1BF ED 31                            add     hl,a                    ; .
 336+ F1C1 DD 7D                            ld      a,ixl                   ; de = cY + error
 337+ F1C3 ED 32                            add     de,a                    ; .
 338+ F1C5 ED 53 EE F1                      ld      (.PlotcY4+1),de         ; write cY+Y for plot section 4
 339+ F1C9 E5                               push    hl                      ; push CX+X                                 Stack + 1
 340+ F1CA CD 47 F2                         call	.PlotPixel			    ;
 341+ F1CD              ;...................CX+X, CY-Y....................... pop,       Calc push
 342+ F1CD 11 00 00     .PlotcY2:           ld      de,0                    ; center Y
 343+ F1D0 E1           .Plot2:             pop     hl                      ; retrieve CX+X                             Stack + 0
 344+ F1D1 06 00                            ld      b,0                     ; for now force b until we confirm b never changes
 345+ F1D3 DD 4D                            ld      c,ixl                   ; bc = y (error)
 346+ F1D5 EB                               ex      de,hl                   ; de = de - bc
 347+ F1D6                                  ClearCarryFlag                  ; .
 347+ F1D6 B7          >                        or a
 348+ F1D7 ED 42                            sbc     hl,bc                   ; .
 349+ F1D9 EB                               ex      de,hl                   ; .
 350+ F1DA D5                               push    de                      ; cY-Y                                      Stack + 1
 351+ F1DB CD 47 F2                         call	.PlotPixel			    ;
 352+ F1DE              ;...................CX-X, CY-Y....................... Calc push, pop
 353+ F1DE 21 00 00     .PlotcX3:           ld      hl,0                    ; center X
 354+ F1E1 D1           .Plot3:             pop     de                      ; cY-Y                                      Stack + 0
 355+ F1E2 06 00                            ld      b,0                     ; bc = radius
 356+ F1E4 DD 4C                            ld      c,ixh                   ; hl = cX - radius
 357+ F1E6                                  ClearCarryFlag                  ; .
 357+ F1E6 B7          >                        or a
 358+ F1E7 ED 42                            sbc     hl,bc                   ; .
 359+ F1E9 E5                               push    hl                      ; cX-X                                      Stack + 1
 360+ F1EA CD 47 F2                         call	.PlotPixel			    ;
 361+ F1ED              ;...................CX-X, CY+Y....................... pop,       written by 1
 362+ F1ED 11 00 00     .PlotcY4:           ld      de,0                    ; self modifying cY+Y
 363+ F1F0 E1           .Plot4:             pop     hl                      ; get back cX-X                             Stack + 0
 364+ F1F1 CD 47 F2                         call	.PlotPixel			    ; all pre-calculated
 365+ F1F4
 366+ F1F4              ;...................CY+X, CX+Y....................... Calc push, Calc write to 8
 367+ F1F4 11 00 00     .PlotcY5:           ld      de,0                    ; center Y (load with cX at this point)
 368+ F1F7 21 00 00     .PlotcX5:           ld      hl,0                    ; center X (load with cY at this point)
 369+ F1FA DD 7C                            ld      a,ixh                   ; hl = cX + radius (note we have swapped during load to de and hl so comments reflect this)
 370+ F1FC ED 31                            add     hl,a                    ; .
 371+ F1FE DD 7D                            ld      a,ixl                   ; de = cY + error
 372+ F200 ED 32                            add     de,a                    ;
 373+ F202 ED 53 2B F2                      ld      (.PlotcY8+1),de         ; write cY+Y for plot section 4
 374+ F206 E5                               push    hl                      ; push CX+X                                 Stack + 2
 375+ F207 CD 47 F2                         call	.PlotPixel			    ;
 376+ F20A              ;...................CY+X, CX-Y....................... pop,       Calc push
 377+ F20A 11 00 00     .PlotcY6:           ld      de,0                    ; self modifying cY
 378+ F20D E1           .Plot6:	            pop     hl                      ; retrieve CX+X                             Stack + 0
 379+ F20E 06 00                            ld      b,0
 380+ F210 DD 4D                            ld      c,ixl                   ; de = cY - y (error)
 381+ F212 EB                               ex      de,hl                   ; .
 382+ F213                                  ClearCarryFlag                  ; .
 382+ F213 B7          >                        or a
 383+ F214 ED 42                            sbc     hl,bc                   ; .
 384+ F216 EB                               ex      de,hl                   ; .
 385+ F217 D5                               push    de                      ; cY-Y                                      Stack + 1
 386+ F218 CD 47 F2                         call	.PlotPixel			    ;
 387+ F21B              ;...................CY-X, CX-Y....................... calc push, pop
 388+ F21B 21 00 00     .PlotcX7:           ld      hl,0                    ; center X
 389+ F21E D1                               pop     de                      ; cY-Y                                      Stack + 0
 390+ F21F 06 00                            ld      b,0                     ; bc = radius
 391+ F221 DD 4C                            ld      c,ixh                   ; hl = cX - radius
 392+ F223                                  ClearCarryFlag                  ; .
 392+ F223 B7          >                        or a
 393+ F224 ED 42                            sbc     hl,bc                   ; .
 394+ F226 E5                               push    hl                      ; cX-X                                      Stack + 1
 395+ F227 CD 47 F2                         call	.PlotPixel			    ;
 396+ F22A              ;...................CY-X, CX+Y....................... pop,       written by 4
 397+ F22A 11 00 00     .PlotcY8:           ld      de,0                    ; self modifying cY+Y
 398+ F22D E1           .Plot8:	            pop     hl
 399+ F22E CD 47 F2                         call	.PlotPixel			    ; CY-X,CX-Y
 400+ F231              ;                   End of plot iteration
 401+ F231 D9           .PlotIterDone:      exx                             ; get back saved vars
 402+ F232 CB 7C        .IncrementCircle:	bit     7,h				        ; Check for Hl<=0
 403+ F234 28 03                            jr      z, .draw_circle_1
 404+ F236 19                               add     hl,de			        ; Delta=Delta+D1
 405+ F237 18 05                            jr      .draw_circle_2		    ;
 406+ F239 09           .draw_circle_1:		add     hl,bc			        ; Delta=Delta+D2
 407+ F23A 03                               inc     bc
 408+ F23B 03                               inc     bc				        ; D2=D2+2
 409+ F23C DD 25                            dec     ixh				        ; Y=Y-1
 410+ F23E 03           .draw_circle_2:		inc     bc				        ; D2=D2+2
 411+ F23F 03                               inc     bc
 412+ F240 13                               inc     de				        ; D1=D1+2
 413+ F241 13                               inc     de
 414+ F242 DD 2C                            inc     ixl				        ; X=X+1
 415+ F244 C3 AE F1                         jp      .CircleLoop
 416+ F247 DD E5        .PlotPixel:         push	ix
 417+ F249 53                               ld      d,e                     ; move row from d to b
 418+ F24A 1E 00        .PlotPixelColor:    ld      e,0
 419+ F24C CD 37 E4                         call    l2_plot_pixel_320       ; d= row number, hl = column number, e = pixel col
 420+ F24F DD E1                            pop		ix
 421+ F251 C9                               ret
 422+ F252 50           .Circle1Pixel320:   ld		d,b
 423+ F253 1E 00        .PlotCircleColor:   ld      e,0
 424+ F255 CD 37 E4                         call    l2_plot_pixel_320       ; d= row number, hl = column number, e = pixel col
 425+ F258 C9                               ret
# file closed: ./Layer2Graphics/layer2_plot_circle.asm
 806  F259                  INCLUDE "./Layer2Graphics/layer2_plot_circle_fill.asm"
# file opened: ./Layer2Graphics/layer2_plot_circle_fill.asm
   1+ F259
   2+ F259 00           l2_circle_dblx		DB 0
   3+ F25A 00           l2_circle_dbly		DB 0
   4+ F25B
   5+ F25B              ; ">l2_draw_circle_fill BC = center row col, d = radius, e = colour"
   6+ F25B              ; Note this code currently does not process BC
   7+ F25B 7B           l2_draw_circle_fill:    ld		a,e
   8+ F25C 32 F2 F2                             ld		(.LineColour+1),a
   9+ F25F 7A                                   ld		a,d								; get radius
  10+ F260 A7                                   and		a
  11+ F261 C8                                   ret		z
  12+ F262 FE 01                                cp		1
  13+ F264 CA FD EF                             jp		z,CircleSinglepixel
  14+ F267 ED 43 91 F2                          ld		(.Line1+1),bc					; save origin into DE reg in code
  15+ F26B DD 67                                ld		ixh,a							; ixh = raidus (x)
  16+ F26D DD 2E 00                             ld		ixl,0							; ihy = y
  17+ F270 26 00        .calcd:	                ld		h,0
  18+ F272 6F                                   ld		l,a
  19+ F273 29                                   add		hl,hl							; hl = r * 2
  20+ F274 EB                                   ex		de,hl							; de = r * 2
  21+ F275 21 03 00                             ld		hl,3
  22+ F278 A7                                   and		a
  23+ F279 ED 52                                sbc		hl,de							; hl = 3 - (r * 2)
  24+ F27B 44                                   ld		b,h
  25+ F27C 4D                                   ld		c,l								; bc = 3 - (r * 2)
  26+ F27D 21 01 00     .calcdelta              ld		hl,1
  27+ F280 16 00                                ld		d,0
  28+ F282 DD 5D                                ld		e,ixl
  29+ F284 A7                                   and		a
  30+ F285 ED 52                                sbc		hl,de
  31+ F287 11 01 00     .Setde1	                ld		de,1
  32+ F28A DD 7C        .CircleLoop:            ld		a,ixh
  33+ F28C DD BD                                cp		ixl
  34+ F28E D8                                   ret		c
  35+ F28F D9           .ProcessLoop:	        exx
  36+ F290 11 00 00     .Line1:                 ld		de,0
  37+ F293 7B                                   ld 		a,e
  38+ F294 DD 95                                sub 	ixl
  39+ F296 4F                                   ld 		c,a
  40+ F297 7A                                   ld 		a,d
  41+ F298 DD 84                                add 	a,ixh
  42+ F29A 47                                   ld		b,a
  43+ F29B                                                  DISPLAY "TODO: add double x calc"
  44+ F29B                                      ;; TODO ADD DOUBLE X CALC
  45+ F29B D5                                   push	de
  46+ F29C DD 55                                ld		d,ixl
  47+ F29E CB 22                                sla		d
  48+ F2A0 CD ED F2                             call	.PlotLine			;CX-X,CY+Y
  49+ F2A3 D1                                   pop		de
  50+ F2A4 7B           .Line2:                 ld 		a,e
  51+ F2A5 DD 95                                sub		ixl
  52+ F2A7 4F                                   ld 		c,a
  53+ F2A8 7A                                   ld 		a,d
  54+ F2A9 DD 94                                sub 	ixh
  55+ F2AB 47                                   ld 		b,a
  56+ F2AC                                      ;; TODO ADD DOUBLE X CALC
  57+ F2AC D5                                   push	de
  58+ F2AD DD 55                                ld		d,ixl
  59+ F2AF CB 22                                sla		d
  60+ F2B1 CD ED F2                             call	.PlotLine			;CX-X,CY-Y
  61+ F2B4 D1                                   pop		de
  62+ F2B5 7B           .Line3:	                ld 		a,e
  63+ F2B6 DD 94                                sub		ixh
  64+ F2B8 4F                                   ld 		c,a
  65+ F2B9 7A                                   ld 		a,d
  66+ F2BA DD 85                                add 	a,ixl
  67+ F2BC 47                                   ld 		b,a
  68+ F2BD                                      ;; TODO ADD DOUBLE Y CALC
  69+ F2BD D5                                   push	de
  70+ F2BE DD 54                                ld		d,ixh
  71+ F2C0 CB 22                                sla		d
  72+ F2C2 CD ED F2                             call	.PlotLine			;CX-Y,CY+x
  73+ F2C5 D1                                   pop		de
  74+ F2C6 7B           .Line4:	                ld 		a,e
  75+ F2C7 DD 94                                sub		ixh
  76+ F2C9 4F                                   ld 		c,a
  77+ F2CA 7A                                   ld 		a,d
  78+ F2CB DD 95                                sub 	ixl
  79+ F2CD 47                                   ld 		b,a
  80+ F2CE                                      ;; TODO ADD DOUBLE Y CALC
  81+ F2CE D5                                   push	de
  82+ F2CF DD 54                                ld		d,ixh
  83+ F2D1 CB 22                                sla		d
  84+ F2D3 CD ED F2                             call	.PlotLine			;CX-Y,CY+x
  85+ F2D6 D1                                   pop		de
  86+ F2D7 D9                                   exx
  87+ F2D8 CB 7C        .IncrementCircle:	    bit 7,h				; Check for Hl<=0
  88+ F2DA 28 03                                jr z,.draw_circle_1
  89+ F2DC 19                                   add hl,de			; Delta=Delta+D1
  90+ F2DD 18 05                                jr .draw_circle_2		;
  91+ F2DF 09           .draw_circle_1:		    add hl,bc			; Delta=Delta+D2
  92+ F2E0 03                                   inc bc
  93+ F2E1 03                                   inc bc				; D2=D2+2
  94+ F2E2 DD 25                                dec ixh				; Y=Y-1
  95+ F2E4 03           .draw_circle_2:		    inc bc				; D2=D2+2
  96+ F2E5 03                                   inc bc
  97+ F2E6 13                                   inc de				; D1=D1+2
  98+ F2E7 13                                   inc de
  99+ F2E8 DD 2C                                inc ixl				; X=X+1
 100+ F2EA C3 8A F2                             jp .CircleLoop
 101+ F2ED D5 C5 E5 F5  .PlotLine:              push	de,,bc,,hl,,af
 102+ F2F1 3E 00        .LineColour:	        ld		a,0         ; circle colur
 103+ F2F3 5F                                   ld      e,a
 104+ F2F4 CD A7 E7                             call 	l2_draw_horz_line
 105+ F2F7 F1 E1 C1 D1                          pop     de,,bc,,hl,,af
 106+ F2FB C9                                   ret
 107+ F2FC              ; ">l2_draw_clipped_circle HL = Center X 2's c, DE = Center Y 2's , c = radius, b = colour"
 108+ F2FC              l2_draw_clipped_circle_filled:
 109+ F2FC 78                               ld      a,b                             ; save Colour
 110+ F2FD 32 F7 F3                         ld		(.PlotColour+1),a
 111+ F300 79                               ld		a,c								; get radius
 112+ F301                                  ReturnIfAIsZero
 112+ F301 A7          >                        and     a
 112+ F302 C8          >                        ret     z
 113+ F303                                  JumpIfAEqNusng  1, .circleSinglepixel
 113+ F303 FE 01       >                        cp     1
 113+ F305 CA FD F3    >                        jp      z,.circleSinglepixel
 114+ F308 ED 53 35 F3                      ld		(.Plot1Y+1),de					; save origin into DE and HL
 115+ F30C 22 38 F3                         ld      (.Plot1X+1),hl                  ; .
 116+ F30F                                  DISPLAY "TODO : IXH and IXL need to be 16 bit and in IX and IY"
 117+ F30F DD 67                            ld		ixh,a							; ixh = x = raidus
 118+ F311 DD 2E 00                         ld		ixl,0						    ; ixl = y = error
 119+ F314 26 00        .calcd:	            ld		h,0                             ; hl = radius
 120+ F316 6F                               ld		l,a                             ; raidius is still in a at this point
 121+ F317 29                               add		hl,hl							; hl = r * 2
 122+ F318 EB                               ex		de,hl							; de = r * 2
 123+ F319 21 03 00                         ld		hl,3                            ; hl = 3 - (r * 2)
 124+ F31C                                  ClearCarryFlag                          ; .
 124+ F31C B7          >                        or a
 125+ F31D ED 52                            sbc		hl,de							; .
 126+ F31F 44 4D                            ld      bc,hl                           ; bc = 3 - (r * 2)
 127+ F321 21 01 00     .calcdelta:         ld		hl,1                            ; hl = 1
 128+ F324 16 00                            ld		d,0                             ; de = ixl (error)
 129+ F326 DD 5D                            ld		e,ixl                           ;
 130+ F328                                  ClearCarryFlag                          ;
 130+ F328 B7          >                        or a
 131+ F329 ED 52                            sbc		hl,de                           ; hl = 1 - error
 132+ F32B 11 01 00     .Setde1:            ld		de,1                            ; de = 1
 133+ F32E              .CircleLoop:        ReturnIfRegLTNusng ixh, ixl             ; if radius > ixl counter
 133+ F32E DD 7C       >                        ld      a,ixh
 133+ F330 DD BD       >                        cp      ixl
 133+ F332 D8          >                        ret	    c
 134+ F333 D9           .ProcessLoop:	    exx                                     ; save all bc,de,hl registers
 135+ F334              ; For line drawing we can go from left to right in a single call
 136+ F334              ;--- from CX-X to CX+X, CY+Y -------------------------------;
 137+ F334 11 00 00     .Plot1Y:            ld		de,0                            ; this is Y coord
 138+ F337 21 00 00     .Plot1X:            ld      hl,0                            ; this is x coord
 139+ F33A E5 D5        .Plot1:             push    hl,,de                          ; push X then Y  on top Stack+2
 140+ F33C                                  CalcNewPointMacro hl, sbc, ixh          ; hl = CX - X
 140+ F33C             >                    ClearCarryFlag
 140+ F33C B7          >                        or a
 140+ F33D 06 00       >                    ld      b,0
 140+ F33F DD 4C       >                    ld      c,ixh
 140+ F341 ED 42       >                    sbc    hl,bc
 141+ F343 EB                               ex      de,hl                           ; de = CX - X
 142+ F344 ED 53 68 F3                      ld      (.LoadDEXStart1+1),de           ; save it for Plot 2 as well
 143+ F348                                  CalcNewPointMacro hl, adc, ixl          ; hl = CY + Y
 143+ F348             >                    ClearCarryFlag
 143+ F348 B7          >                        or a
 143+ F349 06 00       >                    ld      b,0
 143+ F34B DD 4D       >                    ld      c,ixl
 143+ F34D ED 4A       >                    adc    hl,bc
 144+ F34F 06 00                            ld      b,0                             ; Now we have calculated D is bc
 145+ F351 DD 4C                            ld      c,ixh                           ;
 146+ F353                                  ShiftBCLeft1                            ;
 146+ F353 CB 21       >			   sla c
 146+ F355 CB 10       >			   rl  b
 147+ F357 ED 43 6B F3                      ld      (.LoadBCLength1+1),bc            ; self modifying to optimise laod on line 2
 148+ F35B CD BC F3                         call	.PlotLine               		; de = start X, hl= Y line, bc = length
 149+ F35E E1           .Plot1Done:         pop     hl                              ; Stack+1 get cy from stack into hl to save an ex as we have pre calculated x positions
 150+ F35F              ;--- from CX-X to CX+X, CY-Y -------------------------------;
 151+ F35F E5           .Plot2:             push    hl                              ; Stack+2 put cy back on stack so it holds cy stack already holds cx
 152+ F360                                  CalcNewPointMacro hl, sbc, ixl          ; now we have CY-Y in hl
 152+ F360             >                    ClearCarryFlag
 152+ F360 B7          >                        or a
 152+ F361 06 00       >                    ld      b,0
 152+ F363 DD 4D       >                    ld      c,ixl
 152+ F365 ED 42       >                    sbc    hl,bc
 153+ F367 11 00 00     .LoadDEXStart1:     ld      de,0                            ; de is loaded from above via self modiying code with start X
 154+ F36A 01 00 00     .LoadBCLength1:     ld      bc,0                            ; bc is loaded from above via self modifying code with length
 155+ F36D CD BC F3                         call	.PlotLine                       ;
 156+ F370 D1 E1        .Plot2Done:         pop     hl,,de                          ; Stack+0 now hl = cx, de = cy
 157+ F372              ;--- from CX-Y to CX+Y, CY+X -------------------------------;
 158+ F372 D5           .Plot3:             push    de                              ; Stack + 1 we need cy for final plot calculation
 159+ F373                                  CalcNewPointMacro hl, sbc, ixl          ; hl = CX - Y
 159+ F373             >                    ClearCarryFlag
 159+ F373 B7          >                        or a
 159+ F374 06 00       >                    ld      b,0
 159+ F376 DD 4D       >                    ld      c,ixl
 159+ F378 ED 42       >                    sbc    hl,bc
 160+ F37A EB                               ex      de,hl                           ; de = CX - Y
 161+ F37B ED 53 9E F3                      ld      (.LoadDEXStart2+1),de             ; save it for Plot 2 as well
 162+ F37F                                  CalcNewPointMacro hl, adc, ixh          ; hl = CY + X
 162+ F37F             >                    ClearCarryFlag
 162+ F37F B7          >                        or a
 162+ F380 06 00       >                    ld      b,0
 162+ F382 DD 4C       >                    ld      c,ixh
 162+ F384 ED 4A       >                    adc    hl,bc
 163+ F386 06 00                            ld      b,0                             ; Now we have calculated D is bc
 164+ F388 DD 4D                            ld      c,ixl                           ;
 165+ F38A                                  ShiftBCLeft1                            ;
 165+ F38A CB 21       >			   sla c
 165+ F38C CB 10       >			   rl  b
 166+ F38E ED 43 A1 F3                      ld      (.LoadBCLength2+1),bc            ; self modifying to optimise laod on line 2
 167+ F392 CD BC F3                         call	.PlotLine               		; de = start X, hl= Y line, bc = length
 168+ F395 E1           .Plot3Done:         pop     hl                              ; Stack + 0 get cy from stack into hl to save an ex as we have pre calculated x positions
 169+ F396              ;--- from CX-X to CX+X, CY-Y -------------------------------;
 170+ F396              .Plot4a:            CalcNewPointMacro hl, sbc, ixh          ; now we have CY-X in hl
 170+ F396             >                    ClearCarryFlag
 170+ F396 B7          >                        or a
 170+ F397 06 00       >                    ld      b,0
 170+ F399 DD 4C       >                    ld      c,ixh
 170+ F39B ED 42       >                    sbc    hl,bc
 171+ F39D 11 00 00     .LoadDEXStart2:     ld      de,0                            ; de is loaded from above via self modiying code with start X
 172+ F3A0 01 00 00     .LoadBCLength2:     ld      bc,0                            ; bc is loaded from above via self modifying code with length
 173+ F3A3 CD BC F3                         call	.PlotLine                       ;
 174+ F3A6 D9           .PlotDone:          exx                                     ; get back data from alternate registers
 175+ F3A7 CB 7C        .IncrementCircle:	bit     7,h			                  	; Check for Hl<=0
 176+ F3A9 28 03                            jr z,   .draw_circle_1
 177+ F3AB 19                               add hl,de			                    ; Delta=Delta+D1
 178+ F3AC 18 05                            jr      .draw_circle_2		            ;
 179+ F3AE 09           .draw_circle_1:		add     hl,bc		                    ; Delta=Delta+D2
 180+ F3AF 03                               inc     bc
 181+ F3B0 03                               inc     bc			                    ; D2=D2+2
 182+ F3B1 DD 25                            dec     ixh			                    ; Y=Y-1
 183+ F3B3 03           .draw_circle_2:		inc     bc			                    ; D2=D2+2
 184+ F3B4 03                               inc     bc
 185+ F3B5 13                               inc     de			                    ; D1=D1+2
 186+ F3B6 13                               inc     de
 187+ F3B7 DD 2C                            inc     ixl			                    ; X=X+1
 188+ F3B9 C3 2E F3                         jp      .CircleLoop
 189+ F3BC              ;-- PERFORM THE LINE DRAW ----------------------------------;
 190+ F3BC              ; comes in with de = left x , hl = y, bc = length
 191+ F3BC              ; Note bc must be +ve < 32768
 192+ F3BC              .PlotLine:
 193+ F3BC 7C           .IsYOnScreen:       ld      a,h                             ; if y > 255 or < 0 then no line to draw
 194+ F3BD A7                               and     a                               ;
 195+ F3BE C0                               ret     nz                              ;
 196+ F3BF 7D                               ld      a,l                             ;
 197+ F3C0 A7                               and     a                               ;
 198+ F3C1 F8                               ret     m                               ; if m set then y must be > 127
 199+ F3C2              ;-- now check X coordinate, if X < 256 then skip x position clip
 200+ F3C2 7A           .IsXOffRight:       ld      a,d                             ; if x >255
 201+ F3C3 A7                               and     a
 202+ F3C4 28 19                            jr      z,.NoLeftClip                   ; if high is not set then no X clip
 203+ F3C6              ;-- if X > 255 then off screen so just skip line
 204+ F3C6 F0           .LeftClip:          ret     p                               ; if its > 255 then no line
 205+ F3C7              ;-- if its off the left then add distance, if this is < 0 then off screen skip
 206+ F3C7 E5           .IsTotallyOffLeft:  push    hl                              ; if X pos + length <0 then no line
 207+ F3C8 62 6B                            ld      hl,de                           ; .
 208+ F3CA                                  ClearCarryFlag                          ; .
 208+ F3CA B7          >                        or a
 209+ F3CB              ;    but also this calculation gives us the line length if x is clipped to 90
 210+ F3CB ED 4A                            adc     hl,bc                           ; .
 211+ F3CD 44 4D                            ld      bc,hl                           ; save the result in HL as this is also line length from hl = 0
 212+ F3CF E1                               pop     hl                              ; .
 213+ F3D0 F8                               ret     m                               ; if x + distance < 0 then off screen skip
 214+ F3D1              ;-- now as its on screen but clipped x < 0 we can just draw a line from 0 to x+d, maxed at x+d = 255
 215+ F3D1 11 00 00     .ClippedSpanX:      ld      de,0                            ; if off left X = 0, bc already calcualted above in ADC
 216+ F3D4 78                               ld      a,b                             ; if bc < 255 then good
 217+ F3D5 A7                               and     a
 218+ F3D6 CA F3 F3                         jp      z,.NoPopPlotColour              ;
 219+ F3D9 01 FF 00                         ld      bc,255                          ; max length
 220+ F3DC C3 F3 F3                         jp      .NoPopPlotColour                ; we can now just draw
 221+ F3DF              ;-- No left side clipping needed so we just need to work out if x + d > 255
 222+ F3DF E5           .NoLeftClip:        push    hl                              ; STACK+1 if corrected x + length < 256 then
 223+ F3E0 62 6B                            ld      hl,de                           ; just plot
 224+ F3E2 09                               add     hl,bc
 225+ F3E3 7C                               ld      a,h
 226+ F3E4 B7                               or      a
 227+ F3E5 E1                               pop     hl
 228+ F3E6 CA F3 F3                         jp      z,.NoPopPlotColour
 229+ F3E9              ;-- x + d > 255 so we plot from x to distance 255 - x
 230+ F3E9 E5           .LengthClip:        push    hl
 231+ F3EA 21 FF 00                         ld      hl,255
 232+ F3ED                                  ClearCarryFlag
 232+ F3ED B7          >                        or a
 233+ F3EE ED 52                            sbc     hl,de                           ; now hl = corrected length
 234+ F3F0 44 4D                            ld      bc,hl
 235+ F3F2              ;-- This entry point is if there is hl on the stack
 236+ F3F2 E1           .PopHLPlotColour:   pop     hl
 237+ F3F3 51           .NoPopPlotColour:   ld      d,c             ; d = length
 238+ F3F4 4B                               ld      c,e             ; c = start X
 239+ F3F5 45                               ld      b,l             ; b = row Y
 240+ F3F6 1E 00        .PlotColour:        ld		e,0             ; This was originally indirect, where as it neeed to be value
 241+ F3F8 CD 9A E7                         call    l2_draw_horz_dma_bank
 242+ F3FB                                  ClearCarryFlag
 242+ F3FB B7          >                        or a
 243+ F3FC C9                               ret
 244+ F3FD 7C           .circleSinglepixel: ld      a,h             ; as its 1 pixel if h or d are non zero then its off screen
 245+ F3FE B2                               or      d
 246+ F3FF C0                               ret     nz
 247+ F400 CB 7B                            bit     7,e             ; and if Y is > 127 then off screen , bit is 8 states like ld a,e and a
 248+ F402 C0                               ret     nz
 249+ F403 78                               ld      a,b             ; a = colour
 250+ F404 43                               ld      b,e             ; b = y
 251+ F405 4D                               ld      c,l             ; c = x
 252+ F406 CD 23 E4                         call    l2_plot_pixel
 253+ F409 C9                               ret
 254+ F40A
 255+ F40A
 256+ F40A              ;---------------------------------------------------------------------------------------------------------------------------------
 257+ F40A              ; ">l2_draw_circle_fill_320 B = center row, hl = col, d = radius, e = colour"
 258+ F40A              ;  draws circle in 320 mode
 259+ F40A              ; self modifying set colur in code below TODO
 260+ F40A              ; lINES ARE
 261+ F40A              ;           CX-X, CY-Y  to  CX+X, CY-Y, i.e. CX-X, CY-Y for X*2
 262+ F40A              ;           CX-X, CY+Y  to  CX+X, CY+Y       CX-X, CY+Y for X*2
 263+ F40A              ;           CY-X, CX+Y  to  CY+X, CX+Y       CY-X, CX+Y for X*2
 264+ F40A              ;           CY-X, CX-Y  to  CY+X, CX-Y       CY-X, CX-Y for X*2
 265+ F40A
 266+ F40A DD 01        l2_draw_circle_fill_320: break
 267+ F40C 7B                               ld		a,e                     ; set self mo
 268+ F40D 32 7D F4                         ld      (.PlotPixelColor1+1),a   ; set color
 269+ F410 32 93 F4                         ld      (.PlotPixelColor2+1),a   ; set color
 270+ F413 32 B2 F4                         ld      (.PlotPixelColor3+1),a   ; set color
 271+ F416 32 CF F4                         ld      (.PlotPixelColor4+1),a   ; set color
 272+ F419 7A                               ld		a,d						; get radius
 273+ F41A A7                               and		a
 274+ F41B C8                               ret		z
 275+ F41C                                 ; cp		1
 276+ F41C                                 ; jp		z,.Circle1Pixel320
 277+ F41C 78                               ld      a,b
 278+ F41D                                  ; hl = column (cX), a = row (cY)
 279+ F41D 22 58 F4     .PrepPoint1:        ld      (.PlotcX1+1),hl        ; Prep X1:CX-X,
 280+ F420 32 55 F4                         ld      (.PlotcY1+1),a         ;      Y1:CY+Y
 281+ F423 32 82 F4     .PrepPoint2:        ld      (.PlotcY2+1),a         ;       Y1:CY-Y
 282+ F426 32 A6 F4     .PrepPoint3:        ld      (.PlotcX3+1),a         ; Prep X1:CY-X,
 283+ F429 22 9B F4                         ld      (.PlotcY3+1),hl        ;      Y1:CX-Y
 284+ F42C 22 BA F4     .PlotPoint4:        ld      (.PlotcY4+1),hl        ; Prep Y1:CX+Y
 285+ F42F              ;                   now process radius
 286+ F42F DD 62                            ld		ixh,d			        ; ixh =  x = raidus
 287+ F431 DD 2E 00                         ld		ixl,0			        ; iyh =  y = 0
 288+ F434              ;.
 289+ F434 26 00        .calcd:	            ld		h,0                     ; bc = hl = 3 - (r * 2)
 290+ F436 6A                               ld		l,d                     ; . de = radius * 2
 291+ F437 29                               add		hl,hl			        ; . hl = r * 2
 292+ F438 EB                               ex		de,hl			        ; . de = r * 2, l = 2
 293+ F439 21 03 00                         ld		hl,3                    ; . hl = 3
 294+ F43C A7                               and		a                       ; .
 295+ F43D ED 52                            sbc		hl,de			        ; . hl = hl - (r*2)
 296+ F43F 44                               ld		b,h                     ; . bc = hl
 297+ F440 4D                               ld		c,l				        ; .
 298+ F441 21 01 00     .calcdelta:         ld		hl,1                    ; hl = 1 - y
 299+ F444 16 00                            ld		d,0                     ; . d = 0
 300+ F446 DD 5D                            ld		e,ixl                   ; . e = y (ixl)
 301+ F448 A7                               and		a                       ; .
 302+ F449 ED 52                            sbc		hl,de                   ; . hl = hl - de
 303+ F44B 11 01 00     .Setde1:            ld		de,1                    ; de = 1
 304+ F44E DD 7C        .CircleLoop:        ld		a,ixh                   ; while radius >= y (also error)
 305+ F450 DD BD                            cp		ixl                     ;
 306+ F452 D8                               ret		c                       ;
 307+ F453 D9           .ProcessLoop:	    exx                             ;   save all current registers
 308+ F454              ;Total plot combos are               Optimisation
 309+ F454              ;                        hl    de        hl    de
 310+ F454              ;                         C=radius Y = error        G = generate R = read
 311+ F454              ; OPTIMISATION:        1)CX-X, CY+Y  for X*2        G>write to 2a. G>read only  : G>Write to 2c,3c,4c
 312+ F454              ;                      2)CX-X, CY-Y  for X*2        R>read only,   G>read only  : R>read only
 313+ F454              ;                      3)CY-X, CX-Y  for X*2        G>write to ,   G>read only  : R>read only
 314+ F454              ;                      4)CY-X, CX+Y  for X*2        R>read only,   G>read only  : R>read only
 315+ F454              ; radius must be under 127 so we can use Add hl,a and Add de,a to optimise and preload everying with self modifying code
 316+ F454              ; *** can we optimise by swapping de and hl after step 4? does it actually improve anything, likley not
 317+ F454              ; This sequence shoudl minimise the amount of adds or subtracts to do
 318+ F454 11 00 00     .PlotcY1:           ld      de,0                    ; center Y
 319+ F457 21 00 00     .PlotcX1:           ld      hl,0                    ; center X
 320+ F45A DD 7C                            ld      a,ixh                   ; radius
 321+ F45C CB 27                            sla     a                       ; raduis * 2
 322+ F45E 32 7A F4                         ld      (.PlotcR1+1),a          ; write out Radius for the other 3 lines
 323+ F461 32 90 F4                         ld      (.PlotcR2+1),a          ; write out Radius for the other 3 lines
 324+ F464 32 B4 F4                         ld      (.PlotcR3+1),a          ; .
 325+ F467 32 CC F4                         ld      (.PlotcR4+1),a          ; .
 326+ F46A              ;...................CX-X, CY+Y  for X*2.............. G>write to 2a. G>read only  : G>Write to 2c,3c,4c
 327+ F46A 06 00        .Plot1CalcX:        ld      b,0                     ; hl = cX - radius
 328+ F46C DD 4C                            ld      c,ixh                   ; .
 329+ F46E                                  ClearCarryFlag                  ; .
 329+ F46E B7          >                        or a
 330+ F46F ED 42                            sbc     hl,bc                   ; .
 331+ F471 22 8D F4                         ld      (.PlotcX2+1),hl         ; write to plot line 2 Coordiante X1
 332+ F474 DD 7D        .Plot1CalcY:        ld      a,ixl                   ; de = cY + error
 333+ F476 ED 32                            add     de,a                    ; .
 334+ F478 43                               ld      b,e                     ; b = Coordinate Y1
 335+ F479 11 00 00     .PlotcR1:           ld      de,0                    ; de = radius (self modifying) * 2 or length
 336+ F47C 0E 00        .PlotPixelColor1:   ld      c,0                     ; c = colour
 337+ F47E CD FE E7                         call    l2_draw_horz_line_320   ; ">b = row; hl = col, de = length, c = color"
 338+ F481              ;...................CX-X, CY-Y  for X*2.............. R>read only,   G>read only  : R>read only
 339+ F481 21 00 00     .PlotcY2:           ld      hl,0                    ; center Y
 340+ F484 06 00                            ld      b,0                     ; for now force b until we confirm b never changes
 341+ F486 DD 4D                            ld      c,ixl                   ; bc = y (error)
 342+ F488                                  ClearCarryFlag                  ; .
 342+ F488 B7          >                        or a
 343+ F489 ED 42                            sbc     hl,bc                   ; .
 344+ F48B 45                               ld      b,l                     ; . b row
 345+ F48C 21 00 00     .PlotcX2:           ld      hl,0                    ; center X
 346+ F48F 11 00 00     .PlotcR2:           ld      de,0                    ; de = radius (self modifying) * 2 or length
 347+ F492 0E 00        .PlotPixelColor2:   ld      c,0                     ; c = colour
 348+ F494 CD FE E7                         call    l2_draw_horz_line_320   ; ">b = row; hl = col, de = length, c = color"
 349+ F497 C3 D3 F4                         jp      .PlotIterDone
 350+ F49A              ;...................3)CY-X, CX-Y  for X*2............ G>write to ,   G>read only  : R>read only
 351+ F49A 21 00 00     .PlotcY3:           ld      hl,0                    ; center Y (loading center X to Y)
 352+ F49D 06 00                            ld      b,0                     ; de = CY-Y
 353+ F49F DD 4D                            ld      c,ixl                   ; . = d(0) e (CY-Y)
 354+ F4A1                                  ClearCarryFlag                  ; .
 354+ F4A1 B7          >                        or a
 355+ F4A2 ED 42                            sbc     hl,bc                   ; .
 356+ F4A4 EB                               ex      de,hl                   ; .
 357+ F4A5 21 00 00     .PlotcX3:           ld      hl,0                    ; center X
 358+ F4A8 DD 4C                            ld      c,ixh                   ; hl = cX - radius
 359+ F4AA                                  ClearCarryFlag                  ; .
 359+ F4AA B7          >                        or a
 360+ F4AB ED 42                            sbc     hl,bc                   ; .
 361+ F4AD 22 C1 F4                         ld      (.PlotcX4+1),hl         ; write to 2a (or Coordiante X1)
 362+ F4B0 43                               ld      b,e                     ; b = row
 363+ F4B1 0E 00        .PlotPixelColor3:   ld      c,0                     ; c = colour
 364+ F4B3 11 00 00     .PlotcR3:           ld      de,0                    ; de = radius (self modifying) * 2 or length
 365+ F4B6 CD FE E7                         call    l2_draw_horz_line_320   ; ">b = row; hl = col, de = length, c = color"
 366+ F4B9              ;...................4)CY-X, CX+Y  for X*2............ R>read only,   G>read only  : R>read only
 367+ F4B9 11 00 00     .PlotcY4:           ld      de,0                    ; self modifying CX+Y
 368+ F4BC FD 7D                            ld      a,iyl
 369+ F4BE ED 32                            add     de,a                    ; Y1 = CX+Y
 370+ F4C0 21 00 00     .PlotcX4:           ld      hl,0                    ; center X
 371+ F4C3 06 00                            ld      b,0
 372+ F4C5 DD 4C                            ld      c,ixh                   ; hl = cX - radius
 373+ F4C7                                  ClearCarryFlag                  ; .
 373+ F4C7 B7          >                        or a
 374+ F4C8 ED 42                            sbc     hl,bc                   ; .
 375+ F4CA 43                               ld      b,e                     ; b = row
 376+ F4CB 11 00 00     .PlotcR4:           ld      de,0                    ; de = radius (self modifying) * 2 or length
 377+ F4CE 0E 00        .PlotPixelColor4:   ld      c,0                     ; c = colour
 378+ F4D0 CD FE E7                         call    l2_draw_horz_line_320   ; ">b = row; hl = col, de = length, c = color"
 379+ F4D3              ;                   End of plot iteration
 380+ F4D3 D9           .PlotIterDone:      exx                             ; get back saved vars
 381+ F4D4 CB 7C        .IncrementCircle:	bit     7,h				        ; Check for Hl<=0
 382+ F4D6 28 03                            jr      z, .draw_circle_1
 383+ F4D8 19                               add     hl,de			        ; Delta=Delta+D1
 384+ F4D9 18 05                            jr      .draw_circle_2		    ;
 385+ F4DB 09           .draw_circle_1:		add     hl,bc			        ; Delta=Delta+D2
 386+ F4DC 03                               inc     bc
 387+ F4DD 03                               inc     bc				        ; D2=D2+2
 388+ F4DE DD 25                            dec     ixh				        ; Y=Y-1
 389+ F4E0 03           .draw_circle_2:		inc     bc				        ; D2=D2+2
 390+ F4E1 03                               inc     bc
 391+ F4E2 13                               inc     de				        ; D1=D1+2
 392+ F4E3 13                               inc     de
 393+ F4E4 DD 2C                            inc     ixl				        ; X=X+1
 394+ F4E6 C3 4E F4                         jp      .CircleLoop
 395+ F4E9 DD E5        .PlotPixel:         push	ix
 396+ F4EB 53                               ld      d,e                     ; move row from d to b
 397+ F4EC 1E 00        .PlotPixelColor:    ld      e,0
 398+ F4EE CD 37 E4                         call    l2_plot_pixel_320       ; d= row number, hl = column number, e = pixel col
 399+ F4F1 DD E1                            pop		ix
 400+ F4F3 C9                               ret
 401+ F4F4
# file closed: ./Layer2Graphics/layer2_plot_circle_fill.asm
 807  F4F4                  INCLUDE "./Layer2Graphics/BBCEliteDirectMappingLL118.asm"
# file opened: ./Layer2Graphics/BBCEliteDirectMappingLL118.asm
   1+ F4F4                              IFDEF DEBUG_LL122_DIRECT
   2+ F4F4 ~                                    ; (Y X) = (S R) * Q
   3+ F4F4 ~                                    ; yxregpair = (20 * 140)/256 = 16d 10h
   4+ F4F4 ~            Debug_LL122_6502:       ld      hl, 20
   4+ F4F4 ~             ld      (SRvarPair),hl
   5+ F4F4 ~                                    ld      a,  140
   5+ F4F4 ~             ld      (Qvar),a
   6+ F4F4 ~                                    call    LL122_6502  ; -10                               >> PASS
   7+ F4F4 ~                                    ;break
   8+ F4F4 ~                                    ; yxregpair = 20 * 140 = 17d 11h
   9+ F4F4 ~                                    ld      hl, 20
   9+ F4F4 ~             ld      (SRvarPair),hl
  10+ F4F4 ~                                    ld      a,  230
  10+ F4F4 ~             ld      (Qvar),a
  11+ F4F4 ~                                    call    LL122_6502  ; -17                               >> PASS
  12+ F4F4 ~                                    ret
  13+ F4F4                              ENDIF
  14+ F4F4
  15+ F4F4              ;--  The following calculates: (Y X) = (S R) / Q using the same shift-and-subtract algorithm that's documented in TIS2
  16+ F4F4
  17+ F4F4                              IFDEF DEBUG_LL121_DIRECT
  18+ F4F4 ~                                    ; (Y X) = (S R) / Q
  19+ F4F4 ~                                    ; yxregpair = 20 / 140 = 20*256 / 140 = 36d, 24h
  20+ F4F4 ~            Debug_LL121_6502:       ld      hl, 20
  20+ F4F4 ~             ld      (SRvarPair),hl
  21+ F4F4 ~                                    ld      a,  140
  21+ F4F4 ~             ld      (Qvar),a
  22+ F4F4 ~                                    call    LL121_6502  ; -36                               >> PASS
  23+ F4F4 ~                                    ;break
  24+ F4F4 ~                                    ; yxregpair =  20 / 140 = 20*256 / 230 = 22d, 11h
  25+ F4F4 ~                                    ld      hl, 20
  25+ F4F4 ~             ld      (SRvarPair),hl
  26+ F4F4 ~                                    ld      a,  230
  26+ F4F4 ~             ld      (Qvar),a
  27+ F4F4 ~                                    call    LL121_6502  ; -22                               >> PASS
  28+ F4F4 ~                                    ;break
  29+ F4F4 ~                                    ret
  30+ F4F4                              ENDIF
  31+ F4F4
  32+ F4F4                              IFDEF DEBUG_LL129_DIRECT
  33+ F4F4 ~            Debug_LL129_6502:       ld      hl,-20
  33+ F4F4 ~             ld     (SRvarPair),hl
  34+ F4F4 ~                                    ld      a, 0
  34+ F4F4 ~             ld     (XX12p3),a
  35+ F4F4 ~                                    ld      a, 10
  35+ F4F4 ~             ld     (XX12p2),a
  36+ F4F4 ~                                    call    LL129_6502  ; expect q = 10, a = $FF SR = 20    >> PASS
  37+ F4F4 ~                                    ;break
  38+ F4F4 ~                                    ld      hl,20
  38+ F4F4 ~             ld     (SRvarPair),hl
  39+ F4F4 ~                                    ld      a, 0
  39+ F4F4 ~             ld     (XX12p3),a
  40+ F4F4 ~                                    ld      a, 40
  40+ F4F4 ~             ld     (XX12p2),a
  41+ F4F4 ~                                    call    LL129_6502  ; expect q = 40, a = 00 SR = 20     >> PASS
  42+ F4F4 ~                                    ;break
  43+ F4F4 ~                                    ld      hl,40
  43+ F4F4 ~             ld     (SRvarPair),hl
  44+ F4F4 ~                                    ld      a, $FF
  44+ F4F4 ~             ld     (XX12p3),a
  45+ F4F4 ~                                    ld      a, 40
  45+ F4F4 ~             ld     (XX12p2),a
  46+ F4F4 ~                                    call    LL129_6502  ; expect q = 40, a = $FF SR = 40    >> PASS
  47+ F4F4 ~                                    ;break
  48+ F4F4 ~                                    ld      hl,-40
  48+ F4F4 ~             ld     (SRvarPair),hl
  49+ F4F4 ~                                    ld      a, $FF
  49+ F4F4 ~             ld     (XX12p3),a
  50+ F4F4 ~                                    ld      a, 40
  50+ F4F4 ~             ld     (XX12p2),a
  51+ F4F4 ~                                    call    LL129_6502  ; expect q = 40, a = 00 SR = 40     >> PASS
  52+ F4F4 ~                                    ;break
  53+ F4F4 ~                                    ret
  54+ F4F4                              ENDIF
  55+ F4F4
  56+ F4F4                              IFDEF DEBUG_LL120_DIRECT
  57+ F4F4 ~            Debug_LL120_6502:       ld      a,0
  57+ F4F4 ~             ld      (Tvar),a                  ; SLOPE 0 so calcualte YX = S X1lo * XX12+2
  58+ F4F4 ~                                    ld      hl,20
  58+ F4F4 ~             ld a,h
  58+ F4F4 ~              ld (Svar),a
  58+ F4F4 ~              ld a,l
  58+ F4F4 ~              ld (XX1510),a  ; S x1lo = 20
  59+ F4F4 ~                                    ld      a,140
  59+ F4F4 ~             ld      (XX12p2),a                ; XX12+2  140, gradient 0.546875
  60+ F4F4 ~                                    ld      a,0
  60+ F4F4 ~             ld      (XX12p3),a                ; SLOPE DIRECTION so -ve result
  61+ F4F4 ~                                    ; post LL129 Q = 140 a = 00  SR YX = (20 * 140) /256 * -1 = -10
  62+ F4F4 ~                                    call    LL120_6502  ; Expect mulitply so (Y X) -10      >> PASS
  63+ F4F4 ~                                    ;break
  64+ F4F4 ~                                    ld      a,0
  64+ F4F4 ~             ld      (Tvar),a                  ; SLOPE 0 so calcualte YX = S X1lo * XX12+2
  65+ F4F4 ~                                    ld      hl,20
  65+ F4F4 ~             ld a,h
  65+ F4F4 ~              ld (Svar),a
  65+ F4F4 ~              ld a,l
  65+ F4F4 ~              ld (XX1510),a  ; S x1lo = 20
  66+ F4F4 ~                                    ld      a,140
  66+ F4F4 ~             ld      (XX12p2),a                ; XX12+2 140, gradient 0.546875
  67+ F4F4 ~                                    ld      a,$FF
  67+ F4F4 ~             ld      (XX12p3),a                ; sLOPE DIRECTION so +ve result
  68+ F4F4 ~                                    ; post LL129 Q = 140 a = FF  SR = 20  YX = (20 * 140) /256 = 10
  69+ F4F4 ~                                    call    LL120_6502  ; Expect / so (Y X)10                   >> PASS
  70+ F4F4 ~                                    ;break
  71+ F4F4 ~                                    ld      a,$FF
  71+ F4F4 ~             ld      (Tvar),a                  ; SLOPE <> 0 so calcualte YX = S X1lo / XX12+2
  72+ F4F4 ~                                    ld      hl,20
  72+ F4F4 ~             ld a,h
  72+ F4F4 ~              ld (Svar),a
  72+ F4F4 ~              ld a,l
  72+ F4F4 ~              ld (XX1510),a  ; S x1lo = 20
  73+ F4F4 ~                                    ld      a,140
  73+ F4F4 ~             ld      (XX12p2),a                ; XX12+2 140, gradient 0.546875
  74+ F4F4 ~                                    ld      a,$00
  74+ F4F4 ~             ld      (XX12p3),a                ; sLOPE DIRECTION  so -ve result
  75+ F4F4 ~                                    ; post LL129 Q = 140 a = 00  SR = 20  YX = (20 *256 / 140) = -36
  76+ F4F4 ~                                    call    LL120_6502  ; Expect / so (Y X)-36
  77+ F4F4 ~                                    ld      a,$FF
  77+ F4F4 ~             ld      (Tvar),a                  ; SLOPE <> 0 so calcualte YX = S X1lo / XX12+2
  78+ F4F4 ~                                    ld      hl,20
  78+ F4F4 ~             ld a,h
  78+ F4F4 ~              ld (Svar),a
  78+ F4F4 ~              ld a,l
  78+ F4F4 ~              ld (XX1510),a  ; S x1lo = 20
  79+ F4F4 ~                                    ld      a,140
  79+ F4F4 ~             ld      (XX12p2),a                ; XX12+2 140, gradient 0.546875
  80+ F4F4 ~                                    ld      a,$FF
  80+ F4F4 ~             ld      (XX12p3),a                ; sLOPE DIRECTION  so +ve result
  81+ F4F4 ~                                    ; post LL129 Q = 140 a = 00 SR = 20 YX = (20 *256 / 140) = 36
  82+ F4F4 ~                                    call    LL120_6502  ; Expect / so (Y X)  36                   >> PASS
  83+ F4F4 ~                                    ret
  84+ F4F4                              ENDIF
  85+ F4F4              ;----------------------------------------------------------------------------------------------------------------------------
  86+ F4F4              ;-- Calculate the following:
  87+ F4F4              ;--         * If T = 0, this is a shallow slope, so calculate (Y X) = (S R) / XX12+2
  88+ F4F4              ;--         * If T <> 0, this is a steep slope, so calculate (Y X) = (S R) * XX12+2
  89+ F4F4              ;--             giving (Y X) the opposite sign to the slope direction in XX12+3.
  90+ F4F4                              IFDEF DEBUG_LL123_DIRECT
  91+ F4F4 ~            Debug_LL123_6502:       ld      a,$00
  91+ F4F4 ~             ld      (Tvar),a                  ; SLOPE 0 (Y X) = (S R) / XX12+2
  92+ F4F4 ~                                    ld      hl,20
  92+ F4F4 ~             ld      (SRvarPair),hl
  93+ F4F4 ~                                    ld      a,140
  93+ F4F4 ~             ld      (XX12p2),a                ; XX12+2 gradient 0.546875
  94+ F4F4 ~                                    ld      a,0
  94+ F4F4 ~             ld      (XX12p3),a                ; sLOPE DIRECTION
  95+ F4F4 ~                                    call    LL123_6502  ; Expect * so (Y X)-36 = (20 / 140 ) * 256 * -1 PASS
  96+ F4F4 ~                                    ;break
  97+ F4F4 ~                                    ld      a,$00
  97+ F4F4 ~             ld      (Tvar),a                  ; SLOPE 0 (Y X) = (S R) / XX12+2
  98+ F4F4 ~                                    ld      hl,20
  98+ F4F4 ~             ld      (SRvarPair),hl
  99+ F4F4 ~                                    ld      a,140
  99+ F4F4 ~             ld      (XX12p2),a                ; XX12+2 gradient 0.546875
 100+ F4F4 ~                                    ld      a,$FF
 100+ F4F4 ~             ld      (XX12p3),a                ; sLOPE DIRECTION
 101+ F4F4 ~                                    call    LL123_6502  ; Expect * so (Y X)36 = (20 / 140 ) * 256  PASS
 102+ F4F4 ~                                    ;break
 103+ F4F4 ~                                    ld      a,$FF
 103+ F4F4 ~             ld      (Tvar),a                  ; SLOPE <> 0 (Y X) = (S R) * XX12+2
 104+ F4F4 ~                                    ld      hl,20
 104+ F4F4 ~             ld      (SRvarPair),hl
 105+ F4F4 ~                                    ld      a,140
 105+ F4F4 ~             ld      (XX12p2),a                ; XX12+2 gradient 0.546875
 106+ F4F4 ~                                    ld      a,$00
 106+ F4F4 ~             ld      (XX12p3),a                ; sLOPE DIRECTION
 107+ F4F4 ~                                    call    LL123_6502  ; Expect / so (Y X)-10 (20 * 140 ) / 256 * -1 PASS
 108+ F4F4 ~                                    ld      a,$FF
 108+ F4F4 ~             ld      (Tvar),a                  ; SLOPE <> 0 (Y X) = (S R) * XX12+2
 109+ F4F4 ~                                    ld      hl,20
 109+ F4F4 ~             ld      (SRvarPair),hl
 110+ F4F4 ~                                    ld      a,140
 110+ F4F4 ~             ld      (XX12p2),a                ; XX12+2 gradient 0.546875
 111+ F4F4 ~                                    ld      a,$FF
 111+ F4F4 ~             ld      (XX12p3),a                ; sLOPE DIRECTION
 112+ F4F4 ~                                    call    LL123_6502  ; Expect / so (Y X) 10 (20 * 140 ) / 256  PASS
 113+ F4F4 ~                                    ret
 114+ F4F4                              ENDIF
 115+ F4F4
 116+ F4F4                              IFDEF DEBUG_LL118_DIRECT
 117+ F4F4 ~            Debug_LL118_6502:       ld      a,$FF
 117+ F4F4 ~             ld      (Tvar),a                  ; SLOPE FF so steep
 118+ F4F4 ~                                    ld      hl,-20
 118+ F4F4 ~             ld      (XX1510),hl               ; x1 = -20
 119+ F4F4 ~                                    ld      hl,-20
 119+ F4F4 ~             ld      (XX1532),hl               ; y1 = -20
 120+ F4F4 ~                                    ld      a,120
 120+ F4F4 ~             ld      (XX12p2),a                ; XX12+2 = 120 (120/256) = 0.46875
 121+ F4F4 ~                                    ld      a,0
 121+ F4F4 ~             ld      (XX12p3),a                ; Slope Direction so TL to BR
 122+ F4F4 ~                                    ; -20, -20 steep TL>BR, gradient 120/256: Dir -1 so
 123+ F4F4 ~                                    call    LL118_6502  ; Expect * so x = 0 y =  -20 + (-20/(120/256)) = 22, x1 = 0 so stop there PASS
 124+ F4F4 ~                                    ;break
 125+ F4F4 ~
 126+ F4F4 ~                                    ld      a,$FF
 126+ F4F4 ~             ld      (Tvar),a                  ; SLOPE FF so steep
 127+ F4F4 ~                                    ld      hl,-30
 127+ F4F4 ~             ld      (XX1510),hl               ; x1 = -20
 128+ F4F4 ~                                    ld      hl,-20
 128+ F4F4 ~             ld      (XX1532),hl               ; y1 = -20
 129+ F4F4 ~                                    ld      a,60
 129+ F4F4 ~             ld      (XX12p2),a                ; XX12+2 = 120 (120/256) = 0.46875
 130+ F4F4 ~                                    ld      a,0
 130+ F4F4 ~             ld      (XX12p3),a                ; Slope Direction so TL to BR
 131+ F4F4 ~                                    ; -20, -20 steep TL>BR, gradient 120/256: Dir -1 so
 132+ F4F4 ~                                    call    LL118_6502  ; Expect * so 108,0  PASS (fixed carry flag issue in LL121 and re-tested LL121)
 133+ F4F4 ~                                    ;break
 134+ F4F4 ~
 135+ F4F4 ~                                    ld      a,$0
 135+ F4F4 ~             ld      (Tvar),a                  ; SLOPE FF so steep
 136+ F4F4 ~                                    ld      hl,-20
 136+ F4F4 ~             ld      (XX1510),hl               ; x1 = -20
 137+ F4F4 ~                                    ld      hl,-20
 137+ F4F4 ~             ld      (XX1532),hl               ; y1 = -20
 138+ F4F4 ~                                    ld      a,60
 138+ F4F4 ~             ld      (XX12p2),a                ; XX12+2 = 120 (120/256) = 0.46875
 139+ F4F4 ~                                    ld      a,0
 139+ F4F4 ~             ld      (XX12p3),a                ; Slope Direction so TL to BR
 140+ F4F4 ~                                    ; -20, -20 steep TL>BR, gradient 120/256: Dir -1 so
 141+ F4F4 ~                                    call    LL118_6502  ; Expect * so 108,0  PASS (fixed carry flag issue in LL121 and re-tested LL121)
 142+ F4F4 ~                                    ;break
 143+ F4F4 ~                                    ret
 144+ F4F4 ~
 145+ F4F4                              ENDIF
 146+ F4F4
 147+ F4F4                              IFDEF DEBUG_LL28_6502
 148+ F4F4 ~            Debug_LL28_6502:        ld      a,27
 148+ F4F4 ~             ld     (Qvar),a
 149+ F4F4 ~                                    ld      a,76
 150+ F4F4 ~                                    call    LL28_6502   ; Expect $FF carry
 151+ F4F4 ~                                    ;break
 152+ F4F4 ~                                    ld      a,76
 152+ F4F4 ~             ld     (Qvar),a
 153+ F4F4 ~                                    ld      a,27        ; Expect 2
 154+ F4F4 ~                                    call    LL28_6502
 155+ F4F4 ~                                    ;break
 156+ F4F4 ~                                    ld      a,200
 156+ F4F4 ~             ld     (Qvar),a
 157+ F4F4 ~                                    ld      a,50
 158+ F4F4 ~                                    call    LL28_6502   ; Expect 4
 159+ F4F4 ~                                    ;break
 160+ F4F4 ~                                    ld      a,97
 160+ F4F4 ~             ld     (Qvar),a
 161+ F4F4 ~                                    ld      a,76
 162+ F4F4 ~                                    call    LL28_6502   ; Expect 1
 163+ F4F4 ~                                    ;break
 164+ F4F4 ~                                    ld      a,$20
 164+ F4F4 ~             ld     (Qvar),a
 165+ F4F4 ~                                    ld      a,$10
 166+ F4F4 ~                                    call    LL28_6502   ; Expect 1
 167+ F4F4 ~                                    ;break
 168+ F4F4 ~                                    ld      d,27
 169+ F4F4 ~                                    ld      a,76
 170+ F4F4 ~                                    call    AEquAmul256DivD
 171+ F4F4 ~                                    ;break
 172+ F4F4 ~                                    ld      d,76
 173+ F4F4 ~                                    ld      a,27
 174+ F4F4 ~                                    call    AEquAmul256DivD
 175+ F4F4 ~                                    ;break
 176+ F4F4 ~                                    ld      d,200
 177+ F4F4 ~                                    ld      a,50
 178+ F4F4 ~                                    call    AEquAmul256DivD
 179+ F4F4 ~                                    ;break
 180+ F4F4 ~                                    ld      d,$20
 181+ F4F4 ~                                    ld      a,$10
 182+ F4F4 ~                                    call    AEquAmul256DivD
 183+ F4F4 ~                                    ;break
 184+ F4F4 ~                                    ret
 185+ F4F4                              ENDIF
 186+ F4F4
 187+ F4F4
 188+ F4F4                              IFDEF DEBUG_LL145_6502
 189+ F4F4 ~            Debug_LL145_6502:       ; ld  a,1      : ld  (UbnkLineArrayLen),a
 190+ F4F4 ~                                    ; ld  hl,$0116 : ld  (UbnkLineArray),hl
 191+ F4F4 ~                                    ; ld  hl,$004B : ld  (UbnkLineArray+2),hl
 192+ F4F4 ~                                    ; ld  hl,$00F8 : ld  (UbnkLineArray+4),hl
 193+ F4F4 ~                                    ; ld  hl,$002F : ld  (UbnkLineArray+6),hl
 194+ F4F4 ~                                    ; call    DrawLinesLateClipping : ;break
 195+ F4F4 ~                                    ; ld  a,1      : ld  (UbnkLineArrayLen),a
 196+ F4F4 ~                                    ; ld  hl,$0033 : ld  (UbnkLineArray),hl
 197+ F4F4 ~                                    ; ld  hl,$0016 : ld  (UbnkLineArray+2),hl
 198+ F4F4 ~                                    ; ld  hl,$001D : ld  (UbnkLineArray+4),hl
 199+ F4F4 ~                                    ; ld  hl,$FFBE : ld  (UbnkLineArray+6),hl
 200+ F4F4 ~                                    ; call    DrawLinesLateClipping : ;break
 201+ F4F4 ~                                    ; ld  a,1      : ld  (UbnkLineArrayLen),a
 202+ F4F4 ~                                    ; ld  hl,$0055 : ld  (UbnkLineArray),hl
 203+ F4F4 ~                                    ; ld  hl,$FF83 : ld  (UbnkLineArray+2),hl
 204+ F4F4 ~                                    ; ld  hl,$0033 : ld  (UbnkLineArray+4),hl
 205+ F4F4 ~                                    ; ld  hl,$0016 : ld  (UbnkLineArray+6),hl
 206+ F4F4 ~                                    ; call    DrawLinesLateClipping :  ;break
 207+ F4F4 ~
 208+ F4F4 ~                                    ;ld  a,1      : ld  (UbnkLineArrayLen),a
 209+ F4F4 ~                                    ;ld  hl,$00B3 : ld  (UbnkLineArray),hl
 210+ F4F4 ~                                    ;ld  hl,$0054 : ld  (UbnkLineArray+2),hl
 211+ F4F4 ~                                    ;ld  hl,$005d : ld  (UbnkLineArray+4),hl
 212+ F4F4 ~                                    ;ld  hl,$ffd5 : ld  (UbnkLineArray+6),hl
 213+ F4F4 ~                                    ;call    DrawLinesLateClipping :  ;break
 214+ F4F4 ~                                    ;
 215+ F4F4 ~                                    ;ld  a,1      : ld  (UbnkLineArrayLen),a
 216+ F4F4 ~                                    ;ld  hl,$005d : ld  (UbnkLineArray),hl
 217+ F4F4 ~                                    ;ld  hl,$ffd5 : ld  (UbnkLineArray+2),hl
 218+ F4F4 ~                                    ;ld  hl,$00b9 : ld  (UbnkLineArray+4),hl
 219+ F4F4 ~                                    ;ld  hl,$0028 : ld  (UbnkLineArray+6),hl
 220+ F4F4 ~                                    ;call    DrawLinesLateClipping :  ;break
 221+ F4F4 ~
 222+ F4F4 ~                                    ld  a,1
 222+ F4F4 ~              ld  (UbnkLineArrayLen),a
 223+ F4F4 ~                                    ld  hl,$ffc7
 223+ F4F4 ~              ld  (UbnkLineArray),hl
 224+ F4F4 ~                                    ld  hl,$001a
 224+ F4F4 ~              ld  (UbnkLineArray+2),hl
 225+ F4F4 ~                                    ld  hl,$005d
 225+ F4F4 ~              ld  (UbnkLineArray+4),hl
 226+ F4F4 ~                                    ld  hl,$ffd5
 226+ F4F4 ~              ld  (UbnkLineArray+6),hl
 227+ F4F4 ~                                    call    DrawLinesLateClipping
 227+ F4F4 ~               ;break
 228+ F4F4 ~
 229+ F4F4 ~                                    ;ld  a,1      : ld  (UbnkLineArrayLen),a
 230+ F4F4 ~                                    ;ld  hl,$0089 : ld  (UbnkLineArray),hl
 231+ F4F4 ~                                    ;ld  hl,$00e2 : ld  (UbnkLineArray+2),hl
 232+ F4F4 ~                                    ;ld  hl,$fff3 : ld  (UbnkLineArray+4),hl
 233+ F4F4 ~                                    ;ld  hl,$00b9 : ld  (UbnkLineArray+6),hl
 234+ F4F4 ~                                    ;call    DrawLinesLateClipping :  ;break
 235+ F4F4 ~
 236+ F4F4 ~                                    ret
 237+ F4F4                              ENDIF
 238+ F4F4                      DEFINE DEBUG_6502_LINE_CLIPPING
 239+ F4F4                      IFDEF DEBUG_6502_LINE_CLIPPING
 240+ F4F4
 241+ F4F4 00           xX13        DB 0
 242+ F4F5 00 00        XX1510      DW 0    ; x1 as a 16-bit coordinate (x1_hi x1_lo)
 243+ F4F7 00 00        XX1532      DW 0    ; y1 as a 16-bit coordinate (y1_hi y1_lo)
 244+ F4F9 00 00        XX1554      DW 0    ; x2
 245+ F4FB              XX1554p1    EQU XX1554+1
 246+ F4FB 00 00        XX1576      DW 0    ; y2
 247+ F4FD              XX1210      EQU XX1576
 248+ F4FD              XX12p1      EQU XX1210+1
 249+ F4FD              XX15X1lo    EQU XX1510
 250+ F4FD              XX15X1hi    EQU XX1510+1
 251+ F4FD              XX15Y1lo    EQU XX1532
 252+ F4FD              XX15Y1hi    EQU XX1532+1
 253+ F4FD              XX15X2lo    EQU XX1554
 254+ F4FD              XX15X2hi    EQU XX1554+1
 255+ F4FD              XX15Y2lo    EQU XX1210
 256+ F4FD              XX15Y2hi    EQU XX1210+1
 257+ F4FD
 258+ F4FD 00           XX12p2      DB 0    ; The line's gradient * 256 (so 1.0 = 256)
 259+ F4FE 00           XX12p3      DB 0    ; The direction of slope ; + LT to BR; - TR to BL
 260+ F4FF 00           XX12p4      DB 0
 261+ F500 00           XX12p5      DB 0
 262+ F501              Delta_x     EQU XX12p2
 263+ F501              Delta_y     EQU XX12p4
 264+ F501 00           Tvar        DB 0    ; The gradient of slope ; 0 if it's a shallow slope (DX > DY) ; &FF if it's a steep slope (DY > DX)
 265+ F502                                  ; Returns:  XX15        m         x1 as an 8-bit coordinate XX15+2               y1 as an 8-bit coordinate
 266+ F502 00           Qvar        DB 0
 267+ F503 00           Rvar        DB 0    ; general purpose for calcs  Paired with S must be done this way round for SUBHeightFromY1 etc to work
 268+ F504 00           Svar        DB 0    ; sign variable
 269+ F505              SRvarPair   EQU Rvar
 270+ F505 00           Xreg        DB 0
 271+ F506 00           Yreg        DB 0
 272+ F507              YXregPair   EQU Xreg
 273+ F507
 274+ F507              ;-- Name: LL28 Calculate R = 256 * A / Q
 275+ F507              ;-- LL28+4              Skips the A >= Q check and always returns with C flag cleared, so this can be called if we know the division will work
 276+ F507              ;-- LL31                Skips the A >= Q check and does not set the R counter, so this can be used for jumping straight into the division loop if R is already set to 254 and we know the division will work
 277+ F507              ;   Reg mapping 6502  Z80
 278+ F507              ;               a     a
 279+ F507              ;               b     x
 280+ F507              ;               c     q
 281+ F507              ;               d     r
 282+ F507              ;
 283+ F507 21 02 F5     LL28_6502:          ld      hl,Qvar                 ; CMP Q                  \ If A >= Q, then the answer will not fit in one byte,
 284+ F50A 4E                               ld      c,(hl)                  ; using c as Q var
 285+ F50B B9                               cp      c
 286+ F50C                                  FlipCarryFlag
 286+ F50C 3F          >                        ccf
 287+ F50D DA 35 F5                         jp      c, LL2_6502             ; BCS LL2                \ so jump to LL2 to return 255
 288+ F510 06 FE                            ld      b,$FE                   ; LDX #%11111110         \ Set R to have bits 1-7 set, so we can rotate through 7 loop iterations, getting a 1 each time, and then we use b as Rvar
 289+ F512 CB 27        LL31_6502:          sla     a                       ; ASL A                  \ Shift A to the left
 290+ F514 DA 29 F5                         jp      c,LL29_6502             ; BCS LL29               \ If bit 7 of A was set, then jump straight to the subtraction
 291+ F517                                  FlipCarryFlag                   ;                          If A < N, then C flag is set.
 291+ F517 3F          >                        ccf
 292+ F518                                  JumpIfALTNusng c, LL31_SKIPSUB_6502 ; CMP Q              \ If A < Q, skip the following subtraction
 292+ F518 B9          >                        cp      c
 292+ F519 DA 1E F5    >                        jp		c, LL31_SKIPSUB_6502
 293+ F51C                                                                  ; BCC P%+4
 294+ F51C 91                               sub     c                       ; SBC Q                  \ A >= Q, so set A = A - Q
 295+ F51D                                  ClearCarryFlag
 295+ F51D B7          >                        or a
 296+ F51E              LL31_SKIPSUB_6502:  FlipCarryFlag
 296+ F51E 3F          >                        ccf
 297+ F51F CB 10                            rl      b                       ; ROL R                  \ Rotate the counter in R to the left, and catch the result bit into bit 0 (which will be a 0 if we didn't do the subtraction, or 1 if we did)
 298+ F521 DA 12 F5                         jp      c, LL31_6502            ; BCS LL31               \ If we still have set bits in R, loop back to LL31 to do the next iteration of 7
 299+ F524 78                               ld      a,b
 300+ F525 32 03 F5                         ld      (Rvar),a
 301+ F528 C9                               ret                             ; RTS                    \ R left with remainder of division
 302+ F529 91           LL29_6502:          sub     c                       ; SBC Q                  \ A >= Q, so set A = A - Q
 303+ F52A                                  SetCarryFlag                    ; SEC                    \ Set the C flag to rotate into the result in R
 303+ F52A 37          >                        scf
 304+ F52B CB 10                            rl      b                       ; ROL R                  \ Rotate the counter in R to the left, and catch the result bit into bit 0 (which will be a 0 if we didn't do the subtraction, or 1 if we did)
 305+ F52D DA 12 F5                         jp      c, LL31_6502            ; BCS LL31               \ If we still have set bits in R, loop back to LL31 to do the next iteration of 7
 306+ F530 78                               ld      a,b                     ; RTS                    \ Return from the subroutine with R containing the
 307+ F531 32 03 F5                         ld      (Rvar),a                ; .
 308+ F534 C9                               ret                             ; .                      \ remainder of the division
 309+ F535 3E FF        LL2_6502:           ld      a,$FF                   ; LDA #255               \ The division is very close to 1, so return the closest
 310+ F537 32 03 F5                         ld      (Rvar),a                ; STA R                  \ possible answer to 256, i.e. R = 255
 311+ F53A                                  SetCarryFlag                    ; we failed so need carry flag set
 311+ F53A 37          >                        scf
 312+ F53B C9                               ret                             ; RTS                    \ Return from the subroutine
 313+ F53C
 314+ F53C 3A 05 F5     ADDXRegtoY1:        ld      a,(Xreg)                ; Set y1 = y1 + (Y X)
 315+ F53F 4F                               ld      c,a
 316+ F540 06 00                            ld      b,0
 317+ F542 2A F7 F4                         ld      hl,(XX1532)
 318+ F545                                  ClearCarryFlag
 318+ F545 B7          >                        or a
 319+ F546 ED 4A                            adc     hl,bc
 320+ F548 22 F7 F4                         ld      (XX1532),hl
 321+ F54B C9                               ret
 322+ F54C
 323+ F54C ED 4B 05 F5  ADDYXRegtoY1:       ld      bc,(YXregPair)          ; Set y1 = y1 + (Y X)
 324+ F550 2A F7 F4                         ld      hl,(XX1532)
 325+ F553                                  ClearCarryFlag
 325+ F553 B7          >                        or a
 326+ F554 ED 4A                            adc     hl,bc
 327+ F556 22 F7 F4                         ld      (XX1532),hl
 328+ F559 C9                               ret
 329+ F55A
 330+ F55A ED 4B 05 F5  ADDYXRegtoX1:       ld      bc,(YXregPair)          ; Set x1 = x1 + (Y X)
 331+ F55E 2A F5 F4                         ld      hl,(XX1510)
 332+ F561                                  ClearCarryFlag
 332+ F561 B7          >                        or a
 333+ F562 ED 4A                            adc     hl,bc
 334+ F564 22 F5 F4                         ld      (XX1510),hl
 335+ F567 C9                               ret
 336+ F568
 337+ F568 2A F7 F4     SUBBCFromY1:        ld      hl,(XX1532)             ; Set (S R) = (y1_hi y1_lo) - BC where BC can be say screen height
 338+ F56B                                  ClearCarryFlag
 338+ F56B B7          >                        or a
 339+ F56C ED 42                            sbc     hl,bc
 340+ F56E 22 03 F5                         ld      (SRvarPair),hl
 341+ F571 C9                               ret
 342+ F572
 343+ F572 2A 05 F5     AddSRToYX:          ld      hl,(YXregPair)
 344+ F575 ED 5B 03 F5                      ld      de,(SRvarPair)
 345+ F579                                  ClearCarryFlag
 345+ F579 B7          >                        or a
 346+ F57A ED 5A                            adc     hl,de
 347+ F57C 22 05 F5                         ld      (YXregPair),hl
 348+ F57F C9                               ret
 349+ F580
 350+ F580
 351+ F580
 352+ F580 7C           ClampX:             ld      a,h
 353+ F581 A7                               and     a
 354+ F582 7D                               ld      a,l
 355+ F583 C8                               ret     z
 356+ F584 F2 89 F5                         jp      p,.Max255
 357+ F587              .Min0:              ZeroA
 357+ F587 AF          >                        xor a
 358+ F588 C9                               ret
 359+ F589 3E FF        .Max255:            ld      a,$FF
 360+ F58B C9                               ret
 361+ F58C
 362+ F58C 7C           ClampY:             ld      a,h
 363+ F58D A7                               and     a
 364+ F58E CA 99 F5                         jp      z,.ClampYlo
 365+ F591 F2 96 F5                         jp      p,.Max127
 366+ F594              .Min0:              ZeroA
 366+ F594 AF          >                        xor a
 367+ F595 C9                               ret
 368+ F596 3E 7F        .Max127:            ld      a,127
 369+ F598 C9                               ret
 370+ F599 7D           .ClampYlo:          ld      a,l
 371+ F59A A7                               and     a
 372+ F59B F0                               ret     p
 373+ F59C 3E 7F                            ld      a,127
 374+ F59E C9                               ret
 375+ F59F
 376+ F59F              ;-- Rountes to code:
 377+ F59F              ;-- LL118
 378+ F59F              ;-- LL120   Done
 379+ F59F              ;-- LL129   Done
 380+ F59F              ;-- LL123   Done
 381+ F59F                              ; NOTE DOES ABS ONLY
 382+ F59F
 383+ F59F
 384+ F59F                              ;--- LL118 Move along a point until on screen
 385+ F59F              ; In XX1510 x1 as a 16-bit coordinate (x1_hi x1_lo)
 386+ F59F              ;    XX1532 y1 as a 16-bit coordinate (y1_hi y1_lo)
 387+ F59F              ;    XX12p2 The line's gradient * 256 (so 1.0 = 256)
 388+ F59F              ;    XX12p3 The direction of slope: * Positive = top left to bottom right * Negative (bit 7 set) = top right to bottom left
 389+ F59F              ;    T      The gradient of slope:* 0 if it's a shallow slope * &FF if it's a steep slope
 390+ F59F              ;  Out  XX150               x1 as an 8-bit coordinate
 391+ F59F              ;       XX152               y1 as an 8-bit coordinate
 392+ F59F              ;----------------------------------------------------------------------------------------------------------------
 393+ F59F
 394+ F59F
 395+ F59F              ;---------------------------------------------------------------------------------------------------------------------
 396+ F59F              ;--  Calculate the following:
 397+ F59F              ;--   * If T = 0, this is a shallow slope, so calculate (Y X) = (S x1_lo) * XX12+2
 398+ F59F              ;--   * If T <> 0, this is a steep slope, so calculate (Y X) = (S x1_lo) / XX12+2
 399+ F59F              ;-- giving (Y X) the opposite sign to the slope direction in XX12+3.
 400+ F59F              ;---------------------------------------------------------------------------------------------------------------------
 401+ F59F 3A F5 F4     LL120_6502:         ld      a,(XX1510)              ;LDA XX15               \ Set R = x1_lo
 402+ F5A2 32 03 F5                         ld      (Rvar),a                ;STA R
 403+ F5A5 CD 51 F6                         call    LL129_6502              ;JSR LL129              \ Call LL129 to do the following:  Q = XX12+2 = line gradient, A = S EOR XX12+3 = S EOR slope direction  (S R) = |S R|
 404+ F5A8 F5                               push    af                      ;PHA                    \ Store A on the stack so we can use it later
 405+ F5A9              ; DONT NEED PLUS MESSES UP FLAGS                    push    af                      ;LDX T                  \ If T is non-zero, then it's a steep slope, so jump
 406+ F5A9 3A 01 F5                         ld      a,(Tvar)                ; .
 407+ F5AC 32 05 F5                         ld      (Xreg),a                ;. REDUNDANT REMOVE IN OPTIMISATION
 408+ F5AF A7                               and     a                       ;BNE LL121              \ down to LL121 to calculate this instead (Y X) = (S R) / Q
 409+ F5B0              ; DONT NEED PLUS MESSES UP FLAGS                    pop     af                      ;.                      (recover teh saved A before the cp)
 410+ F5B0 20 48                            jr      nz,LL121_6502           ;.
 411+ F5B2              ;..   (Y X) = (S R) * Q - must be ABS, sign determined by opposite of the sign of the value on top of stack
 412+ F5B2              LL122_6502:         ZeroA                           ;LDA #0                 \ Set A = 0
 412+ F5B2 AF          >                        xor a
 413+ F5B3                          IFDEF DEBUG_LL122_DIRECT
 414+ F5B3 ~                                DISPLAY "DIRECT CALL TO LL122 so dummy push a to stack with 0"
 415+ F5B3 ~                                push    af
 416+ F5B3                          ENDIF
 417+ F5B3 32 05 F5                         ld      (Xreg),a                ;TAX                    \ Set (Y X) = 0 so we can start building the answer here
 418+ F5B6 32 06 F5                         ld      (Yreg),a                ;TAY
 419+ F5B9 21 04 F5                         ld      hl,Svar
 420+ F5BC ED 4B 03 F5                      ld      bc,(SRvarPair)          ;LSR S                  \ Shift (S R) to the right, so we extract bit 0 of (S R)
 421+ F5C0                                  ShiftBCRight1                   ;ROR R                  \ into the C flag
 421+ F5C0 CB 38       >			   srl b
 421+ F5C2 CB 19       >			   rr  c
 422+ F5C4 ED 43 03 F5                      ld      (SRvarPair),bc
 423+ F5C8 21 02 F5                         ld      hl, Qvar                ;ASL Q                  \ Shift Q to the left, catching bit 7 in the C flag
 424+ F5CB CB 26                            sla     (hl)                    ;.
 425+ F5CD 30 03                            jr      nc, LL126_6502          ;BCC LL126              \ If C (i.e. the next bit from Q) is clear, do not do
 426+ F5CF                                                                  ;                         the addition for this bit of Q, and instead skip to LL126 to just do the shifts
 427+ F5CF CD 72 F5     LL125_6502:         call    AddSRToYX               ;TXA                    \ Set (Y X) = (Y X) + (S R)  starting with the low bytes And then doing the high bytes
 428+ F5D2 ED 4B 03 F5  LL126_6502:         ld      bc,(SRvarPair)          ;LSR S                  \ Shift (S R) to the right
 429+ F5D6                                  ShiftBCRight1                   ;ROR R
 429+ F5D6 CB 38       >			   srl b
 429+ F5D8 CB 19       >			   rr  c
 430+ F5DA ED 43 03 F5                      ld      (SRvarPair),bc          ;.
 431+ F5DE 21 02 F5                         ld      hl, Qvar                ;ASL Q                  \ Shift Q to the left, catching bit 7 in the C flag
 432+ F5E1 CB 26                            sla     (hl)                    ;.
 433+ F5E3 38 EA                            jr      c,LL125_6502            ;BCS LL125              \ If C (i.e. the next bit from Q) is set, loop back to LL125 to do the addition for this bit of Q
 434+ F5E5 20 EB                            jr      nz,LL126_6502           ;BNE LL126              \ If Q has not yet run out of set bits, loop back to LL126 to do the "shift" part of shift-and-add until we have done additions for all the set bits in Q, to give us our multiplication result
 435+ F5E7 F1                               pop     af                      ;PLA                    \ Restore A, which we calculated above, from the stack
 436+ F5E8 A7                               and     a                       ;BPL LL133              \ If A is positive jump to LL133 to negate (Y X) and
 437+ F5E9 F2 42 F6                         jp      p,LL133_6502            ;.
 438+ F5EC              ;.. return from the subroutine using a tail call
 439+ F5EC C9                               ret                             ;RTS                    \ Return from the subroutine
 440+ F5ED
 441+ F5ED              ;----------------------------------------------------------------------------------------------------------------------------
 442+ F5ED              ;-- Calculate the following:
 443+ F5ED              ;--         * If T = 0, this is a shallow slope, so calculate (Y X) = (S R) / XX12+2 (does not use X1lo but directly SR)
 444+ F5ED              ;--         * If T <> 0, this is a steep slope, so calculate (Y X) = (S R) * XX12+2  (does not use X1lo but directly SR)
 445+ F5ED              ;--             giving (Y X) the opposite sign to the slope direction in XX12+3.
 446+ F5ED CD 51 F6     LL123_6502:         call    LL129_6502              ;JSR LL129              \ Call LL129 to do the following   Q = XX12+2   = line gradient
 447+ F5F0 F5                               push    af                      ;PHA                    \ Store A on the stack so we can use it later
 448+ F5F1              ; DONT NEED PLUS MESSES UP FLAGS                    push    af                      ;LDX T                  \ If T is non-zero, then it's a steep slope, so jump up
 449+ F5F1 3A 01 F5                         ld      a,(Tvar)                ; .
 450+ F5F4 32 05 F5                         ld      (Xreg),a                ;BNE LL122              \ to LL122 to calculate this instead:
 451+ F5F7 A7                               and     a                       ;.
 452+ F5F8              ;  DONT NEED PLUS MESSES UP FLAGS                    pop     af                      ;.
 453+ F5F8 20 B8                            jr      nz,LL122_6502           ;.
 454+ F5FA              ;--  The following calculates: (Y X) = (S R) / Q using the same shift-and-subtract algorithm that's documented in TIS2
 455+ F5FA 3E FF        LL121_6502:         ld      a,$FF                   ;LDA #%11111111         \ Set Y = %11111111
 456+ F5FC 32 06 F5                         ld      (Yreg),a                ;TAY
 457+ F5FF CB 27                            sla     a                       ;ASL A                  \ Set X = %11111110
 458+ F601 32 05 F5                         ld      (Xreg),a                ;TAX
 459+ F604              ;--  This sets (Y X) = %1111111111111110, so we can rotate through 15 loop iterations, getting a 1 each time, and then getting a 0 on the 16th iteration... and we can also use it to catch our result bits into bit 0 each time
 460+ F604 ED 4B 03 F5  LL130_6502:         ld      bc,(SRvarPair)          ;ASL R                  \ Shift (S R) to the left
 461+ F608                                  ShiftBCLeft1                    ;.
 461+ F608 CB 21       >			   sla c
 461+ F60A CB 10       >			   rl  b
 462+ F60C ED 43 03 F5                      ld      (SRvarPair),bc          ;ROL S
 463+ F610 3A 04 F5                         ld      a,(Svar)                ;LDA S                  \ Set A = S
 464+ F613 38 07                            jr      c, LL131_6502           ;BCS LL131              \ If bit 7 of S was set, then jump straight to the subtraction
 465+ F615 21 02 F5                         ld      hl,Qvar                 ;CMP Q                  \ If A < Q (i.e. S < Q), skip the following subtractions
 466+ F618 BE                               cp      (hl)
 467+ F619                                  FlipCarryFlag                   ; note flip carry flag here to simulate 6502 operation
 467+ F619 3F          >                        ccf
 468+ F61A 30 12                            jr      nc,LL132A_6502          ;BCC LL132  (NOTE Carry flag reversed in Z80 for CP)
 469+ F61C              LL131_6502:         FlipCarryFlag                   ;flip carry to make it act like a 6502 borrow
 469+ F61C 3F          >                        ccf
 470+ F61D 9E                               sbc     (hl)                    ;SBC Q                  \ A >= Q (i.e. S >= Q) so set:
 471+ F61E 32 04 F5                         ld      (Svar),a                ;STA S
 472+ F621 3A 03 F5                         ld      a,(Rvar)                ;LDA R                  \ And then doing the high bytes
 473+ F624                                  ClearCarryFlag                  ;\   S = (A R) - Q  = (S R) - Q starting with the low bytes (we know the C flag is set so the subtraction will be correct)
 473+ F624 B7          >                        or a
 474+ F625 DE 00                            sbc     0                       ;SBC #0
 475+ F627 32 03 F5                         ld      (Rvar),a                ;STA R
 476+ F62A                                  SetCarryFlag                    ;SEC                    \ Set the C flag to rotate into the result in (Y X)
 476+ F62A 37          >                        scf
 477+ F62B C3 2F F6                         jp      LL132_6502              ;added so that we can do a 6502 style carry above
 478+ F62E 00           LL132A_6502:        nop; FlipCarryFlag
 479+ F62F ED 4B 05 F5  LL132_6502:         ld      bc,(YXregPair)          ; Rotate the counter in (Y X) to the left, and catch the
 480+ F633                                  RollBCLeft1                     ; ROL A                  \ result bit into bit 0 (which will be a 0 if we didn't
 480+ F633 CB 11       >               rl  c
 480+ F635 CB 10       >               rl  b
 481+ F637 ED 43 05 F5                      ld      (YXregPair),bc          ; TAX                    \ do the subtraction, or 1 if we did)
 482+ F63B 38 C7                            jr      c, LL130_6502           ; BCS LL130              \ If we still have set bits in (Y X), loop back to LL130 to do the next iteration of 15, until we have done the whole division
 483+ F63D                          IFDEF DEBUG_LL121_DIRECT
 484+ F63D ~                                DISPLAY "DIRECT CALL TO LL121 so dummy push"
 485+ F63D ~                                push    af
 486+ F63D                          ENDIF
 487+ F63D F1                               pop     af                      ; PLA                    \ Restore A, which we calculated above, from the stack
 488+ F63E A7                               and     a                       ; BMI LL128              \ If A is negative jump to LL128 to return from the
 489+ F63F FA 50 F6                         jp      m, LL128_6502           ; .                      \ subroutine with (Y X) as is
 490+ F642 ED 4B 05 F5  LL133_6502:         ld      bc,(YXregPair)          ; TXA                    \ Otherwise negate (Y X) using two's complement by first
 491+ F646                                  macronegate16bc                 ; EOR #%11111111         \ setting the low byte to ~X + 1
 491+ F646 AF          >					xor 	a
 491+ F647 91          >                    sub 	c
 491+ F648 4F          >                    ld 		c,a
 491+ F649 9F          >                    sbc 	a,a
 491+ F64A 90          >                    sub 	b
 491+ F64B 47          >                    ld 		b,a
 492+ F64C ED 43 05 F5                      ld      (YXregPair),bc          ; ADC #1                 \ The addition works as we know the C flag is clear from\ when we passed through the BCS above
 493+ F650 C9           LL128_6502:         ret                             ; RTS                    \ Return from the subroutine
 494+ F651              ;-------------------------------------------------------------------------------------------------------
 495+ F651              ;..  Do the following, in this order: Q = XX12+2 A = S EOR XX12+3 (S R) = |S R|
 496+ F651              ;..  This sets up the variables required above to calculate (S R) / XX12+2 and give the result the opposite sign to XX13+3.
 497+ F651 F5           LL129_6502:         push    af                      ;LDX XX12+2             \ Set Q = XX12+2
 498+ F652 3A FD F4                         ld      a,(XX12p2)              ;.
 499+ F655 32 05 F5                         ld      (Xreg),a                ;.
 500+ F658 32 02 F5                         ld      (Qvar),a                ;STX Q
 501+ F65B F1                               pop     af                      ;.
 502+ F65C 3A 04 F5                         ld      a,(Svar)                ;LDA S                  \ If S is positive, jump to LL127
 503+ F65F A7                               and     a                       ;BPL LL127
 504+ F660 F2 78 F6                         jp      p,LL127_6502            ;.
 505+ F663                                  ZeroA                           ;.LDA #0                \ Otherwise set R = -R
 505+ F663 AF          >                        xor a
 506+ F664                                  ClearCarryFlag                  ;SEC
 506+ F664 B7          >                        or a
 507+ F665 21 03 F5                         ld      hl, Rvar                ;SBC R
 508+ F668 9E                               sbc     (hl)                    ;.
 509+ F669 32 03 F5                         ld      (Rvar),a                ;STA R
 510+ F66C 3A 04 F5                         ld      a,(Svar)                ;LDA S                  \ Push S onto the stack
 511+ F66F F5                               push    af                      ;PHA
 512+ F670 EE FF                            xor     $FF                     ;EOR #%11111111         \ Set S = ~S + 1 + C  ?? is this all just doing |Svar|?
 513+ F672 CE 00                            adc     0                       ;ADC #0
 514+ F674 32 04 F5                         ld      (Svar),a                ;STA S
 515+ F677 F1                               pop     af                      ;PLA                    \ Pull the original, negative S from the stack into A
 516+ F678 21 FE F4     LL127_6502:         ld      hl,XX12p3               ;EOR XX12+3             \ Set A = original argument S EOR'd with XX12+3
 517+ F67B AE                               xor     (hl)                    ;.
 518+ F67C C9                               ret                             ;RTS                    \ Return from the subroutine
 519+ F67D              ;----------------------------------------------------------------------------------------------------------------
 520+ F67D              ;--- LL118 Move along a point until on screen
 521+ F67D              ; In XX1510 x1 as a 16-bit coordinate (x1_hi x1_lo)
 522+ F67D              ;    XX1532 y1 as a 16-bit coordinate (y1_hi y1_lo)
 523+ F67D              ;    XX12p2 The line's gradient * 256 (so 1.0 = 256)
 524+ F67D              ;    XX12p3 The direction of slope: * Positive = top left to bottom right * Negative (bit 7 set) = top right to bottom left
 525+ F67D              ;    T      The gradient of slope:* 0 if it's a shallow slope * &FF if it's a steep slope
 526+ F67D              ;  Out  XX150               x1 as an 8-bit coordinate
 527+ F67D              ;       XX152               y1 as an 8-bit coordinate
 528+ F67D              ;----------------------------------------------------------------------------------------------------------------
 529+ F67D
 530+ F67D 3A F6 F4     LL118_6502:         ld      a,(XX1510+1)            ; LDA XX15+1             \ If x1_hi is positive, jump down to LL119 to skip the
 531+ F680 A7                               and     a                       ; BPL LL119              \ .
 532+ F681 F2 9E F6                         jp      p, LL119_6502           ;                        \ following
 533+ F684 32 04 F5     .X1Negative:        ld      (Svar),a                ; STA S                  \ Otherwise x1_hi is negative, i.e. off the left of the screen, so set S = x1_hi
 534+ F687 CD 9F F5                         call    LL120_6502              ; Call LL120 to calculate:  (Y X) = (S x1_lo) * XX12+2      if T = 0   = x1 * gradient
 535+ F68A                                                                  ;                            (Y X) = (S x1_lo) / XX12+2      if T <> 0  = x1 / gradient
 536+ F68A                                                                  ; with the sign of (Y X) set to the opposite of the line's direction of slope
 537+ F68A CD 4C F5                         call    ADDYXRegtoY1             ; Set y1 = y1 + (Y X)
 538+ F68D 22 F7 F4                         ld      (XX1532),hl             ; .
 539+ F690 21 00 00                         ld      hl,0                    ; Set x1 = 0
 540+ F693 22 F5 F4                         ld      (XX1510),hl             ; .
 541+ F696 3E 00                            ld      a,0                     ; set 0 up for replacemetn of the TAX and BEQ bit
 542+ F698 32 05 F5                         ld      (Xreg),a                ; TAX                    \ Set X = 0 so the next BEQ becomes a jmp but we will do it anyway in next line
 543+ F69B C3 B4 F6                         jp      LL134_6502              ; just do the jump to LL134 rather than setting to equal flag and then jumping
 544+ F69E              ;-- Entering LL119 a will always be the value of X1 Hi byte
 545+ F69E CA B4 F6     LL119_6502:         jp      z,LL134_6502            ; BEQ LL134              \ x1_hi = 0 then jump down to LL134 to skip the following, as the x-coordinate is already on-screen
 546+ F6A1                                                                  ;                        \ (as 0 <= (x_hi x_lo) <= 255)
 547+ F6A1 32 04 F5                         ld      (Svar),a                ; STA S                  \ Otherwise x1_hi is positive, i.e. x1 >= 256 and off
 548+ F6A4 3D                               dec     a                       ; DEC S                  \ the right side of the screen, so set S = x1_hi - 1
 549+ F6A5 32 04 F5                         ld      (Svar),a                ;
 550+ F6A8 CD 9F F5                         call    LL120_6502              ; JSR LL120              \ Call LL120 to calculate:  (Y X) = (S x1_lo) * XX12+2      if T = 0   = (x1 - 256) * gradient
 551+ F6AB                                                                  ;                        \                           (Y X) = (S x1_lo) / XX12+2      if T <> 0 = (x1 - 256) / gradient
 552+ F6AB                                                                  ;                        \ with the sign of (Y X) set to the opposite of the line's direction of slope
 553+ F6AB CD 4C F5                         call    ADDYXRegtoY1             ; TXA                    \ Set y1 = y1 + (Y X)
 554+ F6AE 21 FF 00                         ld      hl,255                  ; LDX #255               \ Set x1 = 255
 555+ F6B1 22 F5 F4                         ld      (XX1510),hl             ; STX XX15 ;INX; STX XX15+1
 556+ F6B4              ;--  We have moved the point so the x-coordinate is on  screen (i.e. in the range 0-255), so now for the  y-coordinate
 557+ F6B4 3A F8 F4     LL134_6502:         ld      a,(XX1532+1)            ; LDA XX15+3             \ If y1_hi is positive, jump down to LL119 to skip
 558+ F6B7 A7                               and     a                       ; BPL LL135              \ the following
 559+ F6B8 F2 D0 F6                         jp      p, LL135_6502           ; .
 560+ F6BB 32 04 F5                         ld      (Svar),a                ; STA S                  \ Otherwise y1_hi is negative, i.e. off the top of the screen, so set S = y1_hi
 561+ F6BE 3A F7 F4                         ld      a, (XX1532)             ; LDA XX15+2             \ Set R = y1_lo
 562+ F6C1 32 03 F5                         ld      (Rvar),a                ; STA R
 563+ F6C4 CD ED F5                         call    LL123_6502              ; JSR LL123              \ Call LL123 to calculate:  (Y X) = (S R) / XX12+2      if T = 0 = y1 / gradient
 564+ F6C7                                                                  ;                        \                           (Y X) = (S R) * XX12+2      if T <> 0 = y1 * gradient
 565+ F6C7                                                                  ;                         with the sign of (Y X) set to the opposite of the line's direction of slope
 566+ F6C7 CD 5A F5                         call    ADDYXRegtoX1            ; TXA                    \ Set x1 = x1 + (Y X)
 567+ F6CA 21 00 00                         ld      hl,0                    ; LDA #0                 \ Set y1 = 0
 568+ F6CD 22 F7 F4                         ld      (XX1532),hl             ; STA XX15+2, XX15+3
 569+ F6D0 01 80 00     LL135_6502:         ld      bc,128                  ; LDA XX15+2             \ Set (S R) = (y1_hi y1_lo) - screen height
 570+ F6D3 CD 68 F5                         call    SUBBCFromY1             ; .                      \ .
 571+ F6D6 38 0C                            jr      c, LL136_6502           ; BCC LL136              \ If the subtraction underflowed, i.e. if y1 < screen height, then y1 is already on-screen, so jump to LL136
 572+ F6D8                                                                  ;                        \ to return from the subroutine, as we are done
 573+ F6D8              ;;-   If we get here then y1 >= screen height, i.e. off the bottom of the screen
 574+ F6D8 CD ED F5     LL139_6502:         call    LL123_6502              ; JSR LL123              \ Call LL123 to calculate:   (Y X) = (S R) / XX12+2      if T = 0  = (y1 - screen height) / gradient
 575+ F6DB                                                                  ;                        \                            (Y X) = (S R) * XX12+2      if T <> 0 = (y1 - screen height) * gradient
 576+ F6DB                                                                  ;                          with the sign of (Y X) set to the opposite of the line's direction of slope
 577+ F6DB CD 5A F5                         call    ADDYXRegtoX1            ; TXA                    \ Set x1 = x1 + (Y X)
 578+ F6DE 21 7F 00                         ld      hl, 127                 ; LDA #Y*2-1             \ Set y1 = 2 * #Y - 1. The constant #Y is 96, the y-coordinate of the mid-point of the space view (or in our case 127)
 579+ F6E1 22 F7 F4                         ld      (XX1532),hl             ; STA XX15+3             \ pixel row of the space view
 580+ F6E4 C9           LL136_6502:         ret                             ; RTS                    \ Return from the subroutine
 581+ F6E5              ;-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 582+ F6E5              ;-- LL145 LINE CLIP
 583+ F6E5              ;-- OPTISIATIONS - VERTICAL HORZONTAL POINT |DX| = |DY| (and all the veriants for +/-)
 584+ F6E5              ;-- This routine clips the line from (x1, y1) to (x2, y2) so it fits on-screen, or returns an error if it can't be clipped to fit. The arguments are 16-bit coordinates, and the clipped line is returned using 8-bit screen coordinates.
 585+ F6E5              ;-- This part sets XX13 to reflect which of the two points are on-screen and off-screen.
 586+ F6E5              ;-- IN  : XX15(1 0) x1 XX15(3 2) y1 XX15(5 4) x2 XX12(1 0) y2
 587+ F6E5              ;-- OUT : (X1, Y1), (X2, Y2) Screen coordinate C flag  Clear if the clipped line fits on-screen, set if itdoesn't
 588+ F6E5              ;         XX13 The state of the original coordinates on-screen:* 0   = (x2, y2) on-screen* 95(64)  = (x1, y1) on-screen,  (x2, y2) off-screen* 191(128) = (x1, y1) off-screen, (x2, y2) off-screen
 589+ F6E5              ;              So XX13 is non-zero if the end of the line was clipped,meaning the next line sent to BLINE can't join onto the end but has to start a new segment
 590+ F6E5              ;         SWAP The swap status of the returned coordinates:* &FF if we swapped the values of (x1, y1) and(x2, y2) as part of the clipping process* 0 if the coordinates are still in the same order
 591+ F6E5                                  DISPLAY "TODO: treat horz vert and sigle pixel as special cases"
 592+ F6E5              ; TODO treat horizonal/vert and single pixel as special cases
 593+ F6E5              LL145_6502:         ZeroA                           ; LDA #0                 \ Set SWAP = 0
 593+ F6E5 AF          >                        xor a
 594+ F6E6 32 4F CB                         ld      (SWAP),a                ; STA SWAP
 595+ F6E9 3A FA F4                         ld      a,(XX1554+1)            ; LDA XX15+5             \ Set A = x2_hi (use b as a substibute for a)
 596+ F6EC 47                               ld      b,a                     ; .
 597+ F6ED              ; Note that as we are interested in the sign of XX113 then this needs to be >= 128 or < 128 or 0, we will use 191 as per bbc for now
 598+ F6ED              ; for the screen coord we will use 127 though, we use c as a temporay X register
 599+ F6ED 3E BF        LL147_6502:         ld      a,191                   ; LDX #Y*2-1             \ Set X = #Y * 2 - 1. The constant #Y is 96, the y-coordinate of the mid-point of the space view, so this sets Y2 to 191, the y-coordinate of the bottom pixel row of the space view
 600+ F6EF 32 05 F5                         ld      (Xreg),a                ; .
 601+ F6F2              ;                    ld      a,127
 602+ F6F2              ;                    ld      c,a
 603+ F6F2 78           .CheckX2Y2High:     ld      a,b                     ; ORA XX12+1             \ If one or both of x2_hi and y2_hi are non-zero, jump
 604+ F6F3 21 FC F4                         ld      hl,XX12p1               ; .
 605+ F6F6 B6                               or      (hl)                    ; .
 606+ F6F7 C2 07 F7                         jp      nz,LL107_6502           ; BNE LL107              \ to LL107 to skip the following, leaving X at 191
 607+ F6FA 3E 7F        .CheckY2Lo:         ld      a,127 ;,c               ; get back the temporary x reg from c
 608+ F6FC 21 FB F4                         ld      hl,XX1210               ; CPX XX12               \ If y2_lo > the y-coordinate of the bottom of screen (a is being used as X at this point still)
 609+ F6FF BE                               cp      (hl)                    ; .
 610+ F700 DA 07 F7                         jp      c,LL107_6502            ; BCC LL107              \ then (x2, y2) is off the bottom of the screen, so skip the following instruction, leaving X at 127
 611+ F703                                  ZeroA                           ; LDX #0                 \ Set X = 0
 611+ F703 AF          >                        xor a
 612+ F704 32 05 F5                         ld      (Xreg),a
 613+ F707 3A 05 F5     LL107_6502:         ld      a,(Xreg)                ; STX XX13               \ Set XX13 = X, so we have * XX13 = 0 if x2_hi = y2_hi = 0, y2_lo is on-screen* XX13 = 191 if x2_hi or y2_hi are non-zero or y2_lois off the bottom of the screen
 614+ F70A 32 C5 7F                         ld      (XX13),a                ; now c is released as a temporary x reg
 615+ F70D 3A F6 F4                         ld      a,(XX1510+1)            ; LDA XX15+1             \ If one or both of x1_hi and y1_hi are non-zero, jump
 616+ F710 21 F8 F4                         ld      hl,XX1532+1             ; ORA XX15+3             \ to LL83
 617+ F713 B6                               or      (hl)                    ; .
 618+ F714 C2 54 F7                         jp      nz,LL83_6502            ; BNE LL83
 619+ F717              ; DEBUG SIMPLIFIED CODE, now we just compare y1 lo > 127
 620+ F717 3A F7 F4                         ld      a,(XX1532)              ; If y1_lo > the y-coordinate of the bottom of screen (If A >= N, then C flag is reset.) ;ld      a,127                   ; LDA #Y*2-1             \ If y1_lo > the y-coordinate of the bottom of screen (If A >= N, then C flag is reset.)
 621+ F71A 26 7F                            ld      h,127                   ; then (x1, y1) is off the bottom of the screen, so jump                                 ;ld      hl,XX1532               ; CMP XX15+2             \ then (x1, y1) is off the bottom of the screen, so jump
 622+ F71C BC                               cp      h                       ; to LL83                                                                                ;cp      (hl)                    ; .                      \ to LL83
 623+ F71D D2 54 F7                         jp      nc, LL83_6502         ; BCC LL83               \ . (y1 > 127 jump, i.e. 127 <= y1 )
 624+ F720 3A C5 7F                         ld      a,(XX13)                ; LDA XX13               \ If we get here, (x1, y1) is on-screen. If XX13 is non-zero, i.e. (x2, y2) is off-screen, jump
 625+ F723 A7                               and     a                       ; BNE LL108              \ to LL108 to halve it before continuing at LL83
 626+ F724 C2 4F F7                         jp      nz,LL108_6502
 627+ F727              ; If we get here, the high bytes are all zero, which means the x-coordinates are < 256 and therefore fit on screen, and neither coordinate is off the bottom of the screen. That means both coordinates are already on
 628+ F727              ; screen, so we don't need to do any clipping, all weneed to do is move the low bytes into (X1, Y1) and X2, Y2) and return
 629+ F727              ; X1 = XX15 (10)  Y1 = XX15+1 X2 = XX15+2 Y2 = XX15+3
 630+ F727                  DEFINE CLAMPINGEXTREMES
 631+ F727              LL146_6502: IFDEF CLAMPINGEXTREMES
 632+ F727 2A F5 F4                         ld      hl,(XX1510)             ;  Save X1 to XX1510
 633+ F72A CD 80 F5                         call    ClampX
 634+ F72D 32 F5 F4                         ld      (XX1510),a
 635+ F730                          ENDIF
 636+ F730 2A F7 F4                         ld      hl,(XX1532)             ;  hl = y1
 637+ F733 CD 8C F5                         call    ClampY
 638+ F736 32 F6 F4                         ld      (XX1510+1),a            ;  XX1510... = [X1][Y1]
 639+ F739
 640+ F739 2A F9 F4                         ld      hl,(XX1554)             ;  de = x2
 641+ F73C CD 80 F5                         call    ClampX
 642+ F73F 32 F7 F4                         ld      (XX1510+2),a            ;  XX1510... = [X1][Y1][X2]
 643+ F742
 644+ F742 2A FB F4                         ld      hl,(XX1576)             ;  bc = y2
 645+ F745 CD 8C F5                         call    ClampY
 646+ F748 32 F8 F4                         ld      (XX1510+3),a            ;  XX1510... = [X1][Y1][X2][Y2]
 647+ F74B
 648+ F74B                                  ClearCarryFlag                  ; CLC                    \ Clear the C flag as the clipped line fits on-screen
 648+ F74B B7          >                        or a
 649+ F74C C9                               ret                             ; RTS                    \ Return from the subroutine
 650+ F74D              LL109_6502:         SetCarryFlag                    ; SEC                    \ Set the C flag to indicate the clipped line does not fit on-screen
 650+ F74D 37          >                        scf
 651+ F74E C9                               ret                             ; RTS                    \ Return from the subroutine
 652+ F74F 21 C5 7F     LL108_6502:         ld      hl,XX13                 ; LSR XX13               \ If we get here then (x2, y2) is off-screen and XX13 is
 653+ F752 CB 3E                            srl     (hl)                    ;                        \ 191, (128)  so shift XX13 right to halve it to 95 (64)
 654+ F754              ;-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 655+ F754              ;-- LL145 (Part 2 of 4)
 656+ F754 3A C5 7F     LL83_6502:          ld      a,(XX13)                ; LDA XX13               \ If XX13 < 128 then only one of the points is on-screen
 657+ F757 A7                               and     a                       ; BPL LL115              \ so jump down to LL115 to skip the checks of whether
 658+ F758 F2 A4 F7                         jp      p,LL115_6502            ;                        \ both points are in the strips to the right or bottom of the screen
 659+ F75B              ;-- If we get here, both points are off-screen
 660+ F75B 3A F6 F4                         ld      a,(XX1510+1)            ; LDA XX15+1             \ If both x1_hi and x2_hi have bit 7 set, jump to LL109
 661+ F75E 21 FA F4                         ld      hl,XX1554+1             ; AND XX15+5             \ to return from the subroutine with the C flag set, as
 662+ F761 A6                               and     (hl)
 663+ F762 FA 4D F7                         jp      m, LL109_6502           ; BMI LL109              \ the entire line is above the top of the screen
 664+ F765 3A F8 F4                         ld      a,(XX1532+1)            ; LDA XX15+3             \ If both y1_hi and y2_hi have bit 7 set, jump to LL109
 665+ F768 21 FC F4                         ld      hl,XX1576+1             ; AND XX12+1             \ to return from the subroutine with the C flag set, as
 666+ F76B A6                               and     (hl)                    ; BMI LL109              \ the entire line is to the left of the screen
 667+ F76C FA 4D F7                         jp      m,LL109_6502            ; .
 668+ F76F 3A F6 F4                         ld      a,(XX1510+1)            ; LDX XX15+1             \ Set A = X = x1_hi - 1
 669+ F772 3D                               dec     a                       ; DEX
 670+ F773 32 05 F5                         ld      (Xreg),a                ; TXA
 671+ F776 F5                               push    af                      ; LDX XX15+5     SP+1    \ Set XX12+2 = x2_hi - 1, we need to save a register first
 672+ F777 3A FA F4                         ld      a,(XX1554+1)            ; .
 673+ F77A 3D                               dec     a                       ; DEX
 674+ F77B 32 05 F5                         ld      (Xreg),a                ; STX XX12+2
 675+ F77E F1                               pop     af                      ; .              SP+0    restore a register
 676+ F77F 21 FC F4                         ld      hl,XX1576+1             ; ORA XX12+2             \ If neither (x1_hi - 1) or (x2_hi - 1) have bit 7 set,
 677+ F782 B6                               or      (hl)                    ; .
 678+ F783 F2 4D F7                         jp      p, LL109_6502           ; BPL LL109              \ jump to LL109 to return from the subroutine with the C flag set, as the line doesn't fit on-screen
 679+ F786              ; for this bit, while z80 uses carry the opposite way to 6502, 6502 uses borrow, in effect inverting the flip
 680+ F786              ;NOTEFOUND A PATH WHERE IT DOES NOT DO THIS CHECK e.g. 90 B2 8D A2
 681+ F786 3A F7 F4     LL83_DEBUG:         ld      a,(XX1532)              ; LDA XX15+2             \ If y1_lo < y-coordinate of screen bottom, clear the C
 682+ F789 FE 80                            cp      128                     ; CMP #Y*2               \ flag, otherwise set it (NOTE FLIPPED IN z80)
 683+ F78B 3A F8 F4                         ld      a,(XX1532+1)            ; LDA XX15+3             \ Set XX12+2 = y1_hi - (1 - C), so:
 684+ F78E              ;                    FlipCarryFlag                   ; as 6502 uses borrow in subtracts we flip for SBC as z80 CP does opposite too, if A < N carry set so flip
 685+ F78E DE 00                            sbc     0                       ; SBC #0                 \ .
 686+ F790 32 FD F4                         ld      (XX12p2),a              ; STA XX12+2             \  * Set XX12+2 = y1_hi - 1 if y1_lo is on-screen * Set XX12+2 = y1_hi  otherwise We do this subtraction because we are only interested
 687+ F793 3A FB F4                         ld      a,(XX1576)              ; LDA XX12               \ If y2_lo < y-coordinate of screen bottom, clear the C
 688+ F796 FE 80                            cp      128                     ; CMP #Y*2               \ flag, otherwise set it
 689+ F798 3A FC F4                         ld      a,(XX1576+1)            ; LDA XX12+1             \ Set XX12+2 = y2_hi - (1 - C), so:
 690+ F79B              ;                    FlipCarryFlag
 691+ F79B DE 00                            sbc     0                       ; SBC #0                   * Set XX12+1 = y2_hi - 1 if y2_lo is on-screen  * Set XX12+1 = y2_hi     otherwise
 692+ F79D 21 FD F4                         ld      hl,XX12p2               ; ORA XX12+2             \ If neither XX12+1 or XX12+2 have bit 7 set, jump to
 693+ F7A0 B6                               or      (hl)                    ; .
 694+ F7A1 F2 4D F7                         jp      p,LL109_6502            ; BPL LL109              \ LL109 to return from the subroutine with the C flag set, as the line doesn't fit on-screen
 695+ F7A4              ;-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 696+ F7A4              ;-- LL145 (Part 3 of 4) Summary: Clip line: Calculate the line's gradient
 697+ F7A4 3A 06 F5     LL115_6502:         ld      a,(Yreg)                ; TYA                    \ Store Y on the stack so we can preserve it through the call to this routine
 698+ F7A7 F5                               push    af                      ; PHA            SP+1    \ call to this subroutine
 699+ F7A8 2A F9 F4                         ld      hl,(XX1554)             ; LDA XX15+4             \ Set XX12+2 = x2_lo - x1_lo
 700+ F7AB ED 5B F5 F4                      ld      de,(XX1510)             ; LDA XX15+5             \ Set XX12+3 = x2_hi - x1_hi
 701+ F7AF                                  ClearCarryFlag                  ; SBC XX15+1
 701+ F7AF B7          >                        or a
 702+ F7B0 ED 52                            sbc     hl,de                   ; .
 703+ F7B2 22 53 FB                         ld      (delta_x),hl            ; .
 704+ F7B5 2A FB F4                         ld      hl,(XX1576)             ; LDA XX12               \ Set XX12+4 = y2_lo - y1_lo
 705+ F7B8 ED 5B F7 F4                      ld      de,(XX1532)             ;
 706+ F7BC                                  ClearCarryFlag                  ; SBC XX15+2
 706+ F7BC B7          >                        or a
 707+ F7BD ED 52                            sbc     hl,de                   ; .
 708+ F7BF 22 55 FB                         ld      (delta_y),hl            ; .
 709+ F7C2              ; So we now have:  delta_x in XX12(3 2)  delta_y in XX12(5 4) where the delta is (x1, y1) - (x2, y2))
 710+ F7C2 3A 56 FB                         ld      a,(delta_y+1)           ; EOR XX12+3             \ Set S = the sign of delta_x * the sign of delta_y, so
 711+ F7C5 21 54 FB                         ld      hl,delta_x+1
 712+ F7C8 AE                               xor     (hl)
 713+ F7C9 32 04 F5                         ld      (Svar),a                ; STA S                  \ if bit 7 of S is set, the deltas have different signs (perhaps we should do bit 7 mask ?????????
 714+ F7CC 2A 55 FB                         ld      hl,(delta_y)            ; LDA XX12+5             \ If delta_y_hi is positive, jump down to LL110 to skip
 715+ F7CF 7C                               ld      a,h
 716+ F7D0 A7                               and     a
 717+ F7D1 F2 DD F7                         jp      p, LL110_6502           ; BPL LL110              \ the following
 718+ F7D4                                  NegHL                           ; LDA #0                 \ Otherwise flip the sign of delta_y to make it
 718+ F7D4 AF          >                    xor a
 718+ F7D5 95          >                    sub l
 718+ F7D6 6F          >                    ld l,a
 718+ F7D7 9F          >                    sbc a,a
 718+ F7D8 94          >                    sub h
 718+ F7D9 67          >                    ld h,a
 719+ F7DA 22 55 FB                         ld      (delta_y),hl            ; positive, starting with the low bytes
 720+ F7DD 2A 53 FB     LL110_6502:         ld      hl,(delta_x)            ; LDA XX12+3             \ If delta_x_hi is positive, jump down to LL111 to skip
 721+ F7E0 7C                               ld      a,h                     ; BPL LL111              \ the following
 722+ F7E1 A7                               and     a                       ; .
 723+ F7E2 F2 EE F7                         jp      p,LL111_6502            ; .
 724+ F7E5                                  NegHL                           ; SEC                    \ Otherwise flip the sign of delta_x to make it
 724+ F7E5 AF          >                    xor a
 724+ F7E6 95          >                    sub l
 724+ F7E7 6F          >                    ld l,a
 724+ F7E8 9F          >                    sbc a,a
 724+ F7E9 94          >                    sub h
 724+ F7EA 67          >                    ld h,a
 725+ F7EB 22 53 FB                         ld      (delta_x),hl            ; LDA #0                 \ positive, starting with the low bytes
 726+ F7EE              ;--  We now keep halving |delta_x| and |delta_y| until both of them have zero in their high bytes
 727+ F7EE 2A 53 FB     LL111_6502:         ld      hl,(delta_x)
 728+ F7F1 ED 5B 55 FB                      ld      de,(delta_y)
 729+ F7F5 7C                               ld      a,h                     ; TAX                    \ If |delta_x_hi| is non-zero, skip the following
 730+ F7F6 B2                               or      d                       ; BNE LL112
 731+ F7F7 CA 0C F8                         jp      z,LL113_6502            ; LDX XX12+5             \ If |delta_y_hi| = 0, jump down to LL113 (as both |delta_x_hi| and |delta_y_hi| are 0)
 732+ F7FA              LL112_6502:         ShiftHLRight1                   ; LSR A                  \ Halve the value of delta_x in (A XX12+2)
 732+ F7FA CB 3C       >			   srl h
 732+ F7FC CB 1D       >			   rr  l
 733+ F7FE                                  ShiftDERight1                   ; LSR XX12+5             \ Halve the value of delta_y XX12(5 4)
 733+ F7FE CB 3A       >			   srl d
 733+ F800 CB 1B       >			   rr  e
 734+ F802 22 53 FB                         ld      (delta_x),hl
 735+ F805 ED 53 55 FB                      ld      (delta_y),de            ; write them back so we don't end up in an infinite loop
 736+ F809 C3 EE F7                         jp  LL111_6502                  ; JMP LL111              \ Loop back to LL111
 737+ F80C              ;-- By now, the high bytes of both |delta_x| and |delta_y| are zero
 738+ F80C              LL113_6502:         ZeroA                           ; STX T                  \ We know that X = 0 as that's what we tested with a BEQ  above, so this sets T = 0
 738+ F80C AF          >                        xor a
 739+ F80D 32 01 F5                         ld  (Tvar),a
 740+ F810 3A 53 FB                         ld      a,(delta_x)             ; LDA XX12+2             \ If delta_x_lo < delta_y_lo, so our line is more
 741+ F813 21 55 FB                         ld      hl,delta_y              ; CMP XX12+4             \ vertical than horizontal, jump to LL114
 742+ F816 BE                               cp      (hl)
 743+ F817 DA 29 F8                         jp      c, LL114_6502           ; BCC LL114              ; if delta y > delta x then its a steep slope so we do 256*dy/dx
 744+ F81A              ;-- If we get here then our line is more horizontal than vertical, so it is a shallow slope
 745+ F81A 3A 53 FB                         ld      a,(delta_x)             ; STA Q                  \ Set Q = delta_x_lo
 746+ F81D 32 02 F5                         ld      (Qvar),a                ; .
 747+ F820 3A 55 FB                         ld      a,(delta_y)             ; LDA XX12+4             \ Set A = delta_y_lo
 748+ F823 CD 07 F5                         call    LL28_6502               ; JSR LL28               \ Call LL28 to calculate: R = 256 * A / Q = 256 * delta_y_lo / delta_x_lo
 749+ F826 C3 3A F8                         jp      LL116_6502              ; JMP LL116              \ Jump to LL116, as we now have the line's gradient in R
 750+ F829              ;-- If we get here then our line is more vertical than horizontal, so it is a steep slope
 751+ F829 3A 55 FB     LL114_6502:         ld      a,(delta_y)             ; LDA XX12+4             \ Set Q = delta_y_lo
 752+ F82C 32 02 F5                         ld      (Qvar),a                ; STA Q
 753+ F82F 3A 53 FB                         ld      a,(delta_x)             ; LDA XX12+2             \ Set A = delta_x_lo
 754+ F832 CD 07 F5                         call    LL28_6502               ; JSR LL28               \ Call LL28 to calculate: R = 256 * A / Q = 256 * delta_x_lo / delta_y_lo
 755+ F835 3E FF                            ld      a,$FF                   ; DEC T                  \ T was set to 0 above, so this sets T = &FF when our
 756+ F837 32 01 F5                         ld      (Tvar),a                ;                        \ line is steep
 757+ F83A              ;----------------------------------------------------------------------------------------------------------------
 758+ F83A              ;--- LL116 This part sets things up to call the routine in LL188, which does the actual clipping.
 759+ F83A              ;--  If we get here, then R has been set to the gradient of the line (x1, y1) to(x2, y2), with T indicating the gradient of slope: * 0   = shallow slope (more horizontal than vertical)
 760+ F83A              ;--                                                                                                                                * &FF = steep slope (more vertical than horizontal)
 761+ F83A              ;-- XX13 has been set as follows: * 0   = (x1, y1) off-screen, (x2, y2) on-screen * 95(64)  = (x1, y1) on-screen,  (x2, y2) off-screen * 191(128) = (x1, y1) off-screen, (x2, y2) off-screen
 762+ F83A 3A 03 F5     LL116_6502:         ld      a,(Rvar)                ; LDA R                  \ Store the gradient in XX12+2
 763+ F83D 32 FD F4                         ld      (XX12p2),a              ; STA XX12+2
 764+ F840 3A 04 F5                         ld      a,(Svar)                ; LDA S                  \ Store the type of slope in XX12+3, bit 7 clear means
 765+ F843 32 FE F4                         ld      (XX12p3),a              ; STA XX12+3             \ top left to bottom right, bit 7 set means top right to bottom left
 766+ F846 3A C5 7F                         ld      a,(XX13)                ; LDA XX13               \ If XX13 = 0, skip the following instruction
 767+ F849 FE 00                            cp      0                       ; BEQ LL138
 768+ F84B CA 51 F8                         jp      z,LL138_6502            ; .
 769+ F84E F2 6D F8                         jp      p, LLX117_6502          ; If XX13 is positive, it must be 95 (64) as 128 would be negative). This means (x1, y1) is on-screen but (x2, y2) isn't, so we jump
 770+ F851              ;-- If we get here, XX13 = 0 or 191, so (x1, y1) is off-screen and needs clipping
 771+ F851 CD 7D F6     LL138_6502:         call    LL118_6502              ; JSR LL118              \ Call LL118 to move (x1, y1) along the line onto the screen, i.e. clip the line at the (x1, y1) end
 772+ F854 3A C5 7F                         ld      a,(XX13)                ; LDA XX13               \ If XX13 = 0, i.e. (x2, y2) is on-screen, jump down to
 773+ F857 A7                               and     a
 774+ F858 F2 90 F8                         jp      p,LL124_6502            ; BPL LL124              \ LL124 to return with a successfully clipped line
 775+ F85B              ;-- If we get here, XX13 = 191 (128) (both coordinates areoff-screen)
 776+ F85B 3A F6 F4     LL117_6502:         ld      a,(XX1510+1)            ; LDA XX15+1             \ If either of x1_hi or y1_hi are non-zero, jump to
 777+ F85E 21 F8 F4                         ld      hl,XX1532+1             ; ORA XX15+3             \ LL137 to return from the subroutine with the C flag
 778+ F861 B6                               or      (hl)
 779+ F862 C2 98 F8                         jp      nz, LL137_6502          ; BNE LL137              \ set, as the line doesn't fit on-screen
 780+ F865 3A F7 F4                         ld      a,(XX1532)              ; LDA XX15+2             \ If y1_lo > y-coordinate of the bottom of the screen
 781+ F868 FE 80                            cp      128                     ; CMP #Y*2               \ jump to LL137 to return from the subroutine with the
 782+ F86A D2 98 F8                         jp      nc, LL137_6502          ; BCS LL137              \ C flag set, as the line doesn't fit on-screen
 783+ F86D              ;-- If we get here, XX13 = 95 or 191, and in both cases (x2, y2) is off-screen, so we now need to swap the (x1, y1) and (x2, y2) coordinates around before doing the actual clipping, because we need to clip (x2, y2) but the clipping routine at LL118 only clips (x1, y1)
 784+ F86D 2A F5 F4     LLX117_6502:        ld      hl,(XX1510)             ; LDX XX15               \ Swap x1_lo = x2_lo
 785+ F870 ED 5B F9 F4                      ld      de,(XX1554)
 786+ F874 ED 53 F5 F4                      ld      (XX1510),de
 787+ F878 22 F9 F4                         ld      (XX1554),hl
 788+ F87B 2A F7 F4                         ld      hl,(XX1532)             ; LDX XX15+2             \ Swap y1_lo = y2_lo
 789+ F87E ED 5B FB F4                      ld      de,(XX1576)
 790+ F882 ED 53 F7 F4                      ld      (XX1532),de
 791+ F886 22 FB F4                         ld      (XX1576),hl
 792+ F889 CD 7D F6                         call    LL118_6502              ; JSR LL118              \ Call LL118 to move (x1, y1) along the line onto the screen, i.e. clip the line at the (x1, y1) end
 793+ F88C 21 4F CB                         ld      hl,SWAP
 794+ F88F 35                               dec     (hl)                    ; DEC SWAP               \ Set SWAP = &FF to indicate that we just clipped the line at the (x2, y2) end by swapping the coordinates (the DEC does this as we set SWAP to 0 at the start of this subroutine)
 795+ F890 F1           LL124_6502:         pop     af                      ; PLA            SP+0    \ Restore Y from the stack so it gets preserved through
 796+ F891 32 06 F5                         ld      (Yreg),a                ; TAY                    \ the call to this subroutine
 797+ F894 CD 27 F7                         call    LL146_6502              ; JMP LL146              \ Jump up to LL146 to move the low bytes of (x1, y1) and (x2, y2) into (X1, Y1) and (X2, Y2), and return from the subroutine with a successfully clipped line
 798+ F897 C9                               ret                             ; then exit so we don't pop it twice
 799+ F898 F1           LL137_6502:         pop     af                      ; PLA            SP+0    \ Restore Y from the stack so it gets preserved through
 800+ F899 32 06 F5                         ld      (Yreg),a                ; TAY                    \ the call to this subroutine
 801+ F89C                                  SetCarryFlag                    ; SEC                    \ Set the C flag to indicate the clipped line does not fit on-screen
 801+ F89C 37          >                        scf
 802+ F89D C9                               ret                             ; RTS                    \ Return from the subroutine
 803+ F89E                      ENDIF
# file closed: ./Layer2Graphics/BBCEliteDirectMappingLL118.asm
 808  F89E                  INCLUDE "./Layer2Graphics/l2_draw_any_line.asm"
# file opened: ./Layer2Graphics/l2_draw_any_line.asm
   1+ F89E
   2+ F89E FF FF        starty                  DW     $FFFF
   3+ F8A0 FF FF        endy                    DW     $FFFF
   4+ F8A2 CF           traingleColor           DB     $CF
   5+ F8A3 00 00 00...  SaveArrayS1             DS     128*2
   6+ F9A3 00 00 00...  SaveArrayS2             DS     128*2
   7+ FAA3
   8+ FAA3                      IFDEF Add_l2_drawHorzClipY
   9+ FAA3 ~            l2_drawHorzClipY:
  10+ FAA3 ~            .ClipY:                 ex      de,hl                       ; get X1 into de
  11+ FAA3 ~            .ClipDE:                bit     7,d
  12+ FAA3 ~                                    jr      z,.DEPositive
  13+ FAA3 ~            .DENegative:            ld      de,0
  14+ FAA3 ~                                    jp      .ClipDEDone
  15+ FAA3 ~            .DEPositive:            ld      a,d
  16+ FAA3 ~                                    and     a
  17+ FAA3 ~                                    jp      z,.ClipDE127
  18+ FAA3 ~            .ClipDE256:             ld      de,127
  19+ FAA3 ~                                    jp      .ClipDEDone
  20+ FAA3 ~            .ClipDE127:             bit     7,e
  21+ FAA3 ~                                    jp      z,.ClipDEDone
  22+ FAA3 ~                                    ld      de,127
  23+ FAA3 ~            .ClipDEDone:
  24+ FAA3 ~            .AdjustStartY:          ld      hl,(starty)
  25+ FAA3 ~                                    call    CompareHLDESgn           ; if de < HL
  26+ FAA3 ~                                    jr      z,.AdjustEndY               ;
  27+ FAA3 ~                                    jr      c,.AdjustEndY               ;
  28+ FAA3 ~            .ClipStartY:            ld      (starty),de                 ; .
  29+ FAA3 ~            .AdjustEndY:            ld      hl,(endy)                   ; is endy still uninitialised
  30+ FAA3 ~            .InitEndY:              ld      a,h                         ;
  31+ FAA3 ~                                    and     l                           ;
  32+ FAA3 ~                                    cp      $FF                         ;
  33+ FAA3 ~                                    jr      z,.ForceEndYSet
  34+ FAA3 ~            .CheckEndY:             call    CompareHLDESgn           ; if de < HL
  35+ FAA3 ~                                    ret     z
  36+ FAA3 ~                                    ret     nc
  37+ FAA3 ~            .ForceEndYSet:          ld      (endy),de
  38+ FAA3 ~                                    ret
  39+ FAA3                      ENDIF
  40+ FAA3
  41+ FAA3
  42+ FAA3 2A 2B FB     l2_drawVertClip:        ld      hl,(y1)
  43+ FAA6 ED 5B 2F FB                          ld      de,(y2)
  44+ FAAA CD BC 9A                             call    CompareHLDESgn
  45+ FAAD 30 01                                jr      nc,.y1ltey2
  46+ FAAF EB                                   ex      de,hl
  47+ FAB0 CB 7C        .y1ltey2:               bit     7,h
  48+ FAB2 CA B8 FA                             jp      z,.y1Positive
  49+ FAB5 21 00 00                             ld      hl,0
  50+ FAB8 7A           .y1Positive             ld      a,d
  51+ FAB9 A7                                   and     a
  52+ FABA CA C2 FA                             jp      z,.y2lt255
  53+ FABD 1E 7F                                ld      e,127
  54+ FABF C3 C9 FA                             jp      .y2Clipped
  55+ FAC2 CB 7B        .y2lt255:               bit     7,e
  56+ FAC4 CA C9 FA                             jp      z,.y2Clipped
  57+ FAC7 1E 7F                                ld      e,127
  58+ FAC9 ED 4B 29 FB  .y2Clipped:             ld      bc,(x1)
  59+ FACD 45                                   ld      b,l
  60+ FACE 53                                   ld      d,e
  61+ FACF 1E BF                                ld      e,$BF
  62+ FAD1 C3 9F E8                             jp      l2_draw_vert_line_to                ; ">bc = row col d = to position, e = color"
  63+ FAD4
  64+ FAD4                          DISPLAY "TODO: May be able to optimise as x1 and x2 should already be 8 bit"
  65+ FAD4 2A 29 FB     l2_drawHorzClip:        ld      hl,(x1)
  66+ FAD7 ED 5B 2D FB                          ld      de,(x2)
  67+ FADB CD BC 9A                             call    CompareHLDESgn
  68+ FADE 30 01                                jr      nc,.x1ltex2
  69+ FAE0 EB                                   ex      de,hl
  70+ FAE1 CB 7C        .x1ltex2:               bit     7,h
  71+ FAE3 CA E9 FA                             jp      z,.x1Positive
  72+ FAE6 21 00 00                             ld      hl,0
  73+ FAE9 7A           .x1Positive             ld      a,d
  74+ FAEA A7                                   and     a
  75+ FAEB CA F0 FA                             jp      z,.x2Clipped
  76+ FAEE 1E FF                                ld      e,255
  77+ FAF0 ED 4B 2B FB  .x2Clipped:             ld      bc,(y1)
  78+ FAF4 41                                   ld      b,c
  79+ FAF5 4D                                   ld      c,l
  80+ FAF6 53                                   ld      d,e
  81+ FAF7 1E BF                                ld      e,$BF
  82+ FAF9 C3 E0 E7                             jp      l2_draw_horz_line_to                ; "bc = left side row,col, d right pixel, e = color"
  83+ FAFC
  84+ FAFC                      IFDEF Add_l2_drawVertClipY
  85+ FAFC ~            l2_drawVertClipY:       bit     7,d                     ; i = (py1<0?0:py1);
  86+ FAFC ~                                    jr      z,.PYIsOK
  87+ FAFC ~            .SetPYTo0:              ld      de,0
  88+ FAFC ~            .PYIsOK:                ld      hl,(starty)
  89+ FAFC ~                                    IsHLEqu255
  90+ FAFC ~                                    jp      z,.UpdateStartY
  91+ FAFC ~                                    call    CompareHLDESgn       ; or starty > py
  92+ FAFC ~                                    jr      nc,.UpdateStartY        ;
  93+ FAFC ~                                    jp      .PrepareUpdateArray
  94+ FAFC ~            .UpdateStartY:          ld      (starty),de
  95+ FAFC ~            .PrepareUpdateArray:    JumpIfRegLTE c, 127, .UpdateCounters ; we loop from
  96+ FAFC ~                                    ld      c,127
  97+ FAFC ~            .UpdateEndY:            ld      (endy),bc               ; save BC to endy y as its now clamped, thsi frees up BC regsiters
  98+ FAFC ~            .UpdateCounters:        ld      hl,ix                   ; get target array index and set it to
  99+ FAFC ~                                    add     hl,de                   ; targetArray[de]
 100+ FAFC ~                                    add     hl,de                   ; .
 101+ FAFC ~                                    ld      a,c                     ; now set up B as an iterator
 102+ FAFC ~                                    sub     b                       ; for py2 - py1 + 1 entries
 103+ FAFC ~                                    inc     a                       ; .
 104+ FAFC ~                                    ld      b,a                     ; .
 105+ FAFC ~                                    ld      de,ix                   ; we don't need de anymore to move ix for faster instructions
 106+ FAFC ~            .UpdateArray:           ld      (hl),de                 ; use sjasm fake as it does (hl)=e,inc hl, (hl)=d,inc hl
 107+ FAFC ~                                    inc     a                       ; use a as a counter for the end when we update EndY
 108+ FAFC ~                                    djnz    .UpdateArray            ; .
 109+ FAFC ~                                    ret                             ; we are now done
 110+ FAFC                      ENDIF
 111+ FAFC
 112+ FAFC
 113+ FAFC              ; ">l2_draw_any_line, bc = y0,x0 de=y1,x1,a=color: determines if its horizontal, vertical or diagonal then hands off the work"
 114+ FAFC              ; b - y0 c - x0, d - y1 e - x1 a - colour
 115+ FAFC 08           l2_draw_any_line:       ex		af,af'              ; save colour into a'
 116+ FAFD 79                                   ld		a,c                 ; if x and e are the same its horizontal
 117+ FAFE BB                                   cp		e
 118+ FAFF 28 08                                jr		z,.HorizontalLineCheck
 119+ FB01 78                                   ld		a,b                 ; if b and d are the same its vertica;
 120+ FB02 BA                                   cp		d
 121+ FB03 28 0E                                jr		z,.VerticalLine
 122+ FB05              ; use jp and get a free ret instruction optimisation
 123+ FB05 08           .DiagonalLine:		    ex		af,af'			     ; get colour back into a
 124+ FB06 C3 ED EA                             jp		l2_draw_diagonal
 125+ FB09
 126+ FB09 78           .HorizontalLineCheck:   ld      a,b
 127+ FB0A BA                                   cp      d
 128+ FB0B 28 0B                                jr      z, .SinglePixel
 129+ FB0D 08           .HorizontalLine:        ex		af,af'              ; get colour back into a
 130+ FB0E 53                                   ld		d,e				    ; set d as target right pixel
 131+ FB0F 5F                                   ld		e,a				    ; e holds colour on this call
 132+ FB10 C3 E0 E7                             jp		l2_draw_horz_line_to
 133+ FB13 08           .VerticalLine:          ex		af,af'
 134+ FB14 5F                                   ld		e,a				    ; e holds colour on this call
 135+ FB15 C3 9F E8                             jp		l2_draw_vert_line_to
 136+ FB18 08           .SinglePixel:           ex		af,af'              ; get colour back into a
 137+ FB19                                      l2_plot_macro; jp      l2_plot_pixel
 137+ FB19 78          >                        ld      a,b
 137+ FB1A             >                        JumpIfAGTENusng 192 ,.NoPlot
 137+ FB1A FE C0       >                        cp     192
 137+ FB1C D2 28 FB    >                        jp		nc,.NoPlot
 137+ FB1F 69          >                        ld      l,c
 137+ FB20 CD 78 E0    >                        call    asm_l2_row_bank_select
 137+ FB23 67          >                        ld      h,a
 137+ FB24 3A 22 E4    >                        ld      a,(line_gfx_colour)
 137+ FB27 77          >                        ld      (hl),a
 137+ FB28             >.NoPlot:
 138+ FB28 C9                                   ret
 139+ FB29
 140+ FB29 00 00        x1                      dw 0
 141+ FB2B 00 00        y1                      dw 0
 142+ FB2D 00 00        x2                      dw 0
 143+ FB2F 00 00        y2                      dw 0
 144+ FB31 00 00        savex1                  dw 0
 145+ FB33 00 00        savey1                  dw 0
 146+ FB35 00 00        savex2                  dw 0
 147+ FB37 00 00        savey2                  dw 0
 148+ FB39 00 00        temp                    dw 0
 149+ FB3B 00           longest:                DB 0
 150+ FB3C 00 00        x1Work:                 DW 0
 151+ FB3E 00 00        y1Work:                 DW 0
 152+ FB40 00 00        x2Work:                 DW 0
 153+ FB42 00 00        y2Work:                 DW 0
 154+ FB44 00 00        x_pos:                  DW 0
 155+ FB46 00 00        y_pos:                  DW 0
 156+ FB48 00 00        x_pos_end:              DW 0
 157+ FB4A 00 00        y_pos_end:              DW 0
 158+ FB4C 00 00        clip_xmax:              DW 0
 159+ FB4E 00 00        clip_xmin:              DW 0
 160+ FB50 00 00        sign_x                  DW 0
 161+ FB52 00           sign_y                  DB 0
 162+ FB53 00 00        delta_x                 DW 0
 163+ FB55 00 00        delta_y                 DW 0
 164+ FB57 00 00        delta_y_x               DW 0 ; holds the compressed version for elite line draw
 165+ FB59 00 00        delta_x_step            DW 0
 166+ FB5B 00 00        delta_y_step            DW 0
 167+ FB5D 00 00        linetemp                DW 0
 168+ FB5F 00 00        gradient                DW 0
 169+ FB61 00 00        tSlope                  DW 0
 170+ FB63 00 00        msd                     DW 0
 171+ FB65 00 00        error                   DW 0
 172+ FB67 00           set_exit                DB 0
 173+ FB68 00 00        rem                     DW 0
 174+ FB6A              InstrDECBC              equ $0B
 175+ FB6A              InstrINCBC              equ $03
 176+ FB6A              InstrDECIY              equ $2B
 177+ FB6A              InstrINCIY              equ $23
 178+ FB6A
 179+ FB6A              MACROAequBMinusC16:     MACRO   pA, pB, pC
 180+ FB6A ~                                    ld      hl,(pB)                         ;       error = delta_y_step - delta_x;
 181+ FB6A ~                                    ld      de,(pC)                         ; .
 182+ FB6A ~                                    ClearCarryFlag                          ; .
 183+ FB6A ~                                    sbc     hl,de                           ; .
 184+ FB6A ~                                    ld      (pA),hl
 185+ FB6A                                      ENDM
 186+ FB6A              ;--- Swaps point 1 and point 2 around (i.e x1 y1 <--> x2 y2)
 187+ FB6A 2A 2B FB     SwapCoords:             ld      hl,(y1)                         ;       then swap point 1 and point 2
 188+ FB6D ED 5B 2F FB                          ld      de,(y2)                         ;       .
 189+ FB71 ED 53 2B FB                          ld      (y1),de                         ;       .
 190+ FB75 22 2F FB                             ld      (y2),hl                         ;       .
 191+ FB78 2A 29 FB                             ld      hl,(x1)                         ;       .
 192+ FB7B ED 5B 2D FB                          ld      de,(x2)                         ;       .
 193+ FB7F ED 53 29 FB                          ld      (x1),de                         ;       .
 194+ FB83 22 2D FB                             ld      (x2),hl                         ;       .
 195+ FB86 C9                                   ret
 196+ FB87
 197+ FB87                      ; DEFINE SPLITLINE 1
 198+ FB87
 199+ FB87                      ;DEFINE CLIPPED_LINEX 1
 200+ FB87                      ;DEFINE SPLITORLINEX  1
 201+ FB87                      IFDEF SPLITLINE
 201+ FB87 ~
 202+ FB87 ~            l2_draw_clipped_line:
 203+ FB87                      ENDIF
 204+ FB87                      IFDEF CLIPPED_LINEX
 204+ FB87 ~
 205+ FB87 ~            l2_draw_clipped_lineX:
 206+ FB87                      ENDIF
 207+ FB87                      IFDEF SPLITORLINEX
 208+ FB87 ~                                    ld      hl,(y1)                         ; if (y1 > y2)
 209+ FB87 ~                                    ld      de,(y2)                         ; .
 210+ FB87 ~                                    call    CompareHLDESgn                  ; .
 211+ FB87 ~                                    jp      c,.NoSwapCoords
 212+ FB87 ~            .SwapCoords:            call    SwapCoords
 213+ FB87 ~            .NoSwapCoords:
 214+ FB87 ~            .CalcDX:                ld      de,(y1)                         ; Calculate |dy|
 215+ FB87 ~                                    ld      hl,(y2)                         ; .
 216+ FB87 ~                                    ClearCarryFlag                          ; .
 217+ FB87 ~                                    sbc     hl,de                           ; .
 218+ FB87 ~                                    ld      iy,hl                           ; iy = |dy|
 219+ FB87 ~            .CalcDy:                ld      de,(x1)                         ; Calculate |dx|
 220+ FB87 ~                                    ld      hl,(x2)                         ; .
 221+ FB87 ~                                    ld      b,0                             ; assume x1 < x2 and assume no negate needed
 222+ FB87 ~                                    call    CompareHLDESgn                  ;
 223+ FB87 ~                                    jp      nc,.DxNoSwap                     ;
 224+ FB87 ~            .DxSwap:                ex      de,hl                           ; swap just x over
 225+ FB87 ~                                    inc     b                               ; and flag that we had to do it
 226+ FB87 ~            .DxNoSwap:              ClearCarryFlag                          ;
 227+ FB87 ~                                    sbc     hl,de                           ;
 228+ FB87 ~                                    ld      ix,hl                           ; ix = |dx|
 229+ FB87 ~            .CheckForHuge:          ld      a,ixh                           ; if either dx or dy > 255 then split line
 230+ FB87 ~                                    or      iyh                             ; .
 231+ FB87 ~                                    jp      nz, .BreakNeeded                ; .
 232+ FB87 ~            .ChecktGT180:           ld      a,ixl
 233+ FB87 ~                                    cp      180
 234+ FB87 ~                                    jp      nc,.BreakNeeded
 235+ FB87 ~                                    ld      a,iyl
 236+ FB87 ~                                    cp      180
 237+ FB87 ~                                    jp      nc,.BreakNeeded
 238+ FB87 ~                                    jp      .noBreakNeeded
 239+ FB87 ~            .BreakNeeded:           ldCopy2Byte y1, savey1                  ;       savey1 = y1                     create savey1 (y1) to savey2 (y break)
 240+ FB87 ~                                    ShiftIYRight1                           ;       savey2 = y1 + (work_dy/2)
 241+ FB87 ~                                    ld      hl,(y1)                         ;       .
 242+ FB87 ~                                    ClearCarryFlag                          ;       .
 243+ FB87 ~                                    ld      de,iy
 244+ FB87 ~                                    adc     hl,de                           ;       .
 245+ FB87 ~                                    ld      (savey2),hl                     ;       .
 246+ FB87 ~                                    ld      (y1),hl                         ;       y1     = savey2, y2 untouched   create y1 (break) to y2
 247+ FB87 ~                                    dec     b                               ;       if b was 1 then decb would set z flag so we know that x1 > x2
 248+ FB87 ~                                    jp      nz,.X1gtX2
 249+ FB87 ~            .X1lteX2:               call    SwapCoords
 250+ FB87 ~            .X1gtX2:                ldCopy2Byte x1, savex1                  ;       savex1 = x1                     create savex1 (x1) to savex2 (x break)
 251+ FB87 ~                                    ShiftIXRight1                           ;       savex2 = x1 + (work_dx/2)
 252+ FB87 ~                                    ld      hl,(x1)                         ;       .
 253+ FB87 ~                                    ClearCarryFlag                          ;       .
 254+ FB87 ~                                    ld      de,ix
 255+ FB87 ~                                    adc     hl,de                           ;       .
 256+ FB87 ~                                    ld      (savex2),hl                     ;       .
 257+ FB87 ~                                    ld      (x1),hl                         ;       x1     = savex1, x2 untouched  create x1 (break to x2)
 258+ FB87                      ENDIF
 259+ FB87                      IFDEF SPLITLINE
 260+ FB87 ~                                    call    l2_draw_short_line              ;       drawshortLine
 261+ FB87                      ENDIF
 262+ FB87                      IFDEF CLIPPED_LINEX
 263+ FB87 ~                                    call    l2_draw_clipped_line
 264+ FB87                      ENDIF
 265+ FB87                      IFDEF SPLITORLINEX
 266+ FB87 ~                                    ldCopyWord savex1,x1
 267+ FB87 ~                                    ldCopyWord savey1,y1
 268+ FB87 ~                                    ldCopyWord savex2,x2
 269+ FB87 ~                                    ldCopyWord savey2,y2
 270+ FB87 ~            .noBreakNeeded:         // Falls straight into l2_draw_short_line
 271+ FB87                      ENDIF
 272+ FB87                      IFDEF SPLITLINE
 272+ FB87 ~
 273+ FB87 ~            l2_draw_short_line:     ; check out of bounds
 274+ FB87                      ENDIF
 275+ FB87                      IFDEF CLIPPED_LINEX
 276+ FB87 ~            l2_draw_clipped_line:
 277+ FB87                      ENDIF
 278+ FB87                      IFDEF SPLITORLINEX
 279+ FB87 ~            CheckForOnScreen:       ld      hl,(x1)
 280+ FB87 ~                                    ld      de,(x2)
 281+ FB87 ~            .X1X2NegativeCheck:     bit     7,h                             ; if they are both negative then bail out
 282+ FB87 ~                                    jr      z,.X1X2NotNegative
 283+ FB87 ~                                    bit     7,d
 284+ FB87 ~            .X1X2IsNegative:        ret     nz
 285+ FB87 ~            .X1X2NotNegative:       ld      a,h                             ; if they are both not negative then if one is negative that is good
 286+ FB87 ~                                    xor     d
 287+ FB87 ~                                    jp      m,.X1X2SpanScreen
 288+ FB87 ~            .X1X2BothPositive:      ld      a,h                             ; if x1 or x2 high is zero then at least one pixel is on screen
 289+ FB87 ~                                    and     a
 290+ FB87 ~                                    jp      z,.X1X2SpanScreen
 291+ FB87 ~                                    ld      a,d                             ; if x1 was > 255 then if x2 > 255 bail out
 292+ FB87 ~                                    and     a
 293+ FB87 ~                                    ret     nz
 294+ FB87 ~            .X1X2SpanScreen:        ld      hl,(y1)
 295+ FB87 ~                                    ld      de,(y2)
 296+ FB87 ~            .Y1Y2NegativeCheck:     bit     7,h                             ; if they are both negative then bail out
 297+ FB87 ~                                    jr      z,.Y1Y2NotNegative
 298+ FB87 ~                                    bit     7,d
 299+ FB87 ~            .Y1Y2IsNegative:        ret     nz
 300+ FB87 ~            .Y1Y2NotNegative:       ld      a,h                             ; if they are both not negative then if one is negative that is good
 301+ FB87 ~                                    xor     d
 302+ FB87 ~                                    jp      m,.Y1Y2SpanScreen
 303+ FB87 ~            .Y1Y2BothPositive:      ld      bc,128                          ; if they are both positive and at least one is < 128 then carry on
 304+ FB87 ~                                    call    CompareHLBC
 305+ FB87 ~                                    jr      c,.Y1Y2SpanScreen
 306+ FB87 ~                                    ex      de,hl                           ; save y1 into de
 307+ FB87 ~                                    call    CompareHLBC
 308+ FB87 ~                                    jr      c,.Y1Y2SpanScreen
 309+ FB87 ~                                    ret
 310+ FB87 ~            .Y1Y2SpanScreen:
 311+ FB87 ~            CheckForHorizontal:     call    CompareHLDESame                 ; de = saved y1 , hl = y2
 312+ FB87 ~                                    jp      z, l2_drawVertClip
 313+ FB87 ~            CheckForVertical:       ld      hl,(x1)
 314+ FB87 ~                                    ld      de,(x2)
 315+ FB87 ~                                    call    CompareHLDESame
 316+ FB87 ~                                    jp      z, l2_drawHorzClip
 317+ FB87 ~                                    ; Need horizontal and vertical optimisation code in at thispoint
 318+ FB87 ~            CheckForSwap:           ld      hl,(y1)                         ; if (y1 > y2)
 319+ FB87 ~                                    ld      de,(y2)                         ; .
 320+ FB87 ~                                    call    CompareHLDESgn                  ; .
 321+ FB87 ~                                    jp      c,.NoSwapCoords
 322+ FB87 ~            .SwapCoords:            call    SwapCoords
 323+ FB87 ~                                    ; Default in sign and clip ranges, sign 16 bit for now
 324+ FB87 ~            .NoSwapCoords:          ld      hl,0                            ; clip_xmin = 0;
 325+ FB87 ~                                    ld      (clip_xmin),hl                  ; .
 326+ FB87 ~                                    ld      l,255                           ; clip xmax = 255;
 327+ FB87 ~                                    ld      (clip_xmax),hl                  ; .
 328+ FB87 ~                                    ld      hl,1                            ; sign_x = 1
 329+ FB87 ~                                    ld      (sign_x),hl                     ; .
 330+ FB87 ~                                    ; if moving right to left then swap signs and clip
 331+ FB87 ~                                    ld      hl,(x1)                         ; if x1 > x2
 332+ FB87 ~                                    ld      de,(x2)                         ; .
 333+ FB87 ~                                    call    CompareHLDESgn                  ; .
 334+ FB87 ~                                    jr      c,.X1tlX2                       ; .
 335+ FB87 ~            .X1gteX2:               ld      hl, -1                          ;        sign_x = 01
 336+ FB87 ~                                    ld      (sign_x),hl                     ;        .
 337+ FB87 ~                                    ld      hl,(x1)                         ;        x1 = -x1;
 338+ FB87 ~                                    macronegate16hl                         ;        .
 339+ FB87 ~                                    ld      (x1),hl                         ;        .
 340+ FB87 ~                                    ld      de,(x2)                         ;        x2 = -x2;
 341+ FB87 ~                                    macronegate16de                         ;        .
 342+ FB87 ~                                    ld      (x2),de                         ;        .
 343+ FB87 ~                                    ld      hl,-255                         ;        clip_xmin =-255;
 344+ FB87 ~                                    ld      (clip_xmin),hl                  ;        .
 345+ FB87 ~                                    ld      hl,0                            ;        clip_xmax = 0;
 346+ FB87 ~                                    ld      (clip_xmax),hl                  ;        .
 347+ FB87 ~            .X1tlX2:                                                        ;
 348+ FB87 ~                                    ; calculate deltas
 349+ FB87 ~            .DxEquX2MinusX1:        ld      hl,(x2)                         ; delta_x = x2 - x1;
 350+ FB87 ~                                    ld      de,(x1)                         ; .
 351+ FB87 ~                                    ClearCarryFlag                          ; .
 352+ FB87 ~                                    sbc     hl,de                           ; .
 353+ FB87 ~                                    ld      (delta_x),hl                    ; .
 354+ FB87 ~            .DyEquY2MinusY1:        ld      hl,(y2)                         ; delta_y = y2 - y1;
 355+ FB87 ~                                    ld      de,(y1)                         ; .
 356+ FB87 ~                                    ClearCarryFlag                          ; .
 357+ FB87 ~                                    sbc     hl,de                           ; .
 358+ FB87 ~                                    ld      (delta_y),hl                    ; .
 359+ FB87 ~            .ScaleDeltaXY:          ld      de,(delta_x)                    ; we already have delta y but x could be negative
 360+ FB87 ~                                    ld      b,0
 361+ FB87 ~                                    bit     7,d
 362+ FB87 ~                                    jp      z,.DeltaYABSDone                ; de = | de |, b = 1 to denote negative needs resetting
 363+ FB87 ~                                    inc     b
 364+ FB87 ~                                    macronegate16de
 365+ FB87 ~            .DeltaYABSDone:
 366+ FB87 ~            /*.ScaleHighLoop:         ld      a,d
 367+ FB87 ~                                    or      h
 368+ FB87 ~                                    jr      z,.HighScaleDone
 369+ FB87 ~                                    ShiftDERight1
 370+ FB87 ~                                    ShiftHLRight1
 371+ FB87 ~                                    jp      .ScaleHighLoop
 372+ FB87 ~            .HighScaleDone:
 373+ FB87 ~            .LowScaleLoop:          ld      a,e
 374+ FB87 ~                                    or      l
 375+ FB87 ~                                    and     $80
 376+ FB87 ~                                    jr      z,.LowScaleDone
 377+ FB87 ~                                    ShiftDERight1
 378+ FB87 ~                                    ShiftHLRight1
 379+ FB87 ~                                    jp      .LowScaleLoop
 380+ FB87 ~            .LowScaleDone:          bit     0,b
 381+ FB87 ~                                    jr      z,.DeltaDone
 382+ FB87 ~            .SortDXSign:            macronegate16de
 383+ FB87 ~            .DeltaDone:             ld      (delta_x),de
 384+ FB87 ~                                    ld      (delta_y),hl*/
 385+ FB87 ~            .DeltaXStepCalc:        ld     hl, (delta_x)
 386+ FB87 ~                                    ClearCarryFlag                          ; delta_x_step = 2 * delta_x;
 387+ FB87 ~                                    adc     hl,hl                           ; .
 388+ FB87 ~                                    ld      (delta_x_step),hl               ; .
 389+ FB87 ~            .DeltaYStepCalc:        ld     hl, (delta_y)
 390+ FB87 ~                                    ClearCarryFlag                          ; delta_y_step = 2 * delta_y;
 391+ FB87 ~                                    adc     hl,hl                           ; .
 392+ FB87 ~                                    ld      (delta_y_step),hl               ; .
 393+ FB87 ~                                    ld      hl,(x1)                         ; x_pos = x1;
 394+ FB87 ~                                    ld      (x_pos),hl                      ; .
 395+ FB87 ~                                    ld      de,(y1)                         ; y_pos = y1;
 396+ FB87 ~                                    ld      (y_pos),de                      ; .
 397+ FB87 ~                                    ; check if we are workign on dx or dy
 398+ FB87 ~            .CompareDxDy:           ld      hl,(delta_x)                    ; if (delta_x >= delta_y)
 399+ FB87 ~                                    ld      de,(delta_y)
 400+ FB87 ~                                    call    CompareHLDESgn
 401+ FB87 ~                                    jp      c, LineDrawDxLTDy
 402+ FB87 ~            ;.......................DxGteDy branch.............................................................................................
 403+ FB87 ~            LineDrawDxGteDy:        ld      hl,(delta_y_step)               ;       error = delta_y_step - delta_x;
 404+ FB87 ~                                    ld      de,(delta_x)                    ;       .
 405+ FB87 ~                                    ClearCarryFlag                          ;       .
 406+ FB87 ~                                    sbc     hl,de                           ;       .
 407+ FB87 ~                                    ld      (error),hl                      ;       .
 408+ FB87 ~                                    ZeroA                                   ;       set exit false (0 == false)
 409+ FB87 ~                                    ld      (set_exit),a                    ;       .
 410+ FB87 ~                                    ; clipping of negative y1
 411+ FB87 ~                                    ld      hl,(y1)                         ;       if (y1 < 0)
 412+ FB87 ~                                    bit     7,h                             ;       .
 413+ FB87 ~                                    jp      z,.y1GTE0                       ;       .
 414+ FB87 ~            .y1LT0:                 ld      hl,(y1)                         ;           temp = (2 * (0 - y1) - 1) * delta_x;
 415+ FB87 ~                                    macronegate16hl                         ;               hl = |y1|
 416+ FB87 ~                                    ClearCarryFlag
 417+ FB87 ~                                    adc     hl,hl                           ;               hl = (2 * |y1|)
 418+ FB87 ~                                    dec     hl                              ;               hl = (2 * |y1| - 1)
 419+ FB87 ~                                    ld      de,(delta_x)                    ;               hl = hl * delta_x
 420+ FB87 ~                                    call    mulHLbyDE2sc                    ;               .
 421+ FB87 ~                                    ld      (temp),hl                       ;               save to temp
 422+ FB87 ~                                    ld      bc,hl                           ;            msd = temp / delta_y_step
 423+ FB87 ~                                    ld      de,(delta_y_step)               ;               BC = BC / DE, HL = BC % DE
 424+ FB87 ~                                    call    Floor_DivQ                      ;               .
 425+ FB87 ~                                    ld      (msd),bc                        ;               .
 426+ FB87 ~                                    ld      hl,(x_pos)                      ;            x_pos += msd
 427+ FB87 ~                                    ClearCarryFlag
 428+ FB87 ~                                    adc     hl,bc                           ;            .
 429+ FB87 ~                                    ld      (x_pos),hl                      ;            .
 430+ FB87 ~                                    ld      de,(clip_xmax)                  ;            if (x_pos >= clip_xmax)
 431+ FB87 ~                                    call    CompareHLDESame                 ;            .
 432+ FB87 ~                                    jp      z,.xposLTEClipxmax              ;            .
 433+ FB87 ~                                    call    CompareHLDESgn                  ;            .
 434+ FB87 ~                                    ret     nc                              ;               return
 435+ FB87 ~            .xposLTEClipxmax:       ld      hl,(x_pos)                      ;            if (x_pos >= clip_xmin)
 436+ FB87 ~                                    ld      de,(clip_xmin)                  ;            .
 437+ FB87 ~                                    call    CompareHLDESgn                  ;            .
 438+ FB87 ~                                    jp      c,.xposLTxmin                   ;            .
 439+ FB87 ~            .xposGTExmin:           ld      hl,(msd)                        ;               rem = temp - (msd * delta_y_step) (its really IY from floor_divq)
 440+ FB87 ~                                    ld      de,(delta_y_step)               ;                   de = msd * delta_y_step
 441+ FB87 ~                                    call    mulHLbyDE2sc                    ;                   .
 442+ FB87 ~                                    ex      de,hl                           ;                   .
 443+ FB87 ~                                    ld      hl,(temp)                       ;                   hl = temp - de
 444+ FB87 ~                                    ClearCarryFlag                          ;                   .
 445+ FB87 ~                                    sbc     hl,de                           ;                   .
 446+ FB87 ~                                    ld      (rem),hl                        ;                   .
 447+ FB87 ~                                    ld      de,0                            ;               y_pos = 0
 448+ FB87 ~                                    ld      (y_pos),de                      ;               .
 449+ FB87 ~                                    ld      de,(rem)                        ;               error -= rem + delta_x
 450+ FB87 ~                                    ClearCarryFlag
 451+ FB87 ~                                    adc     hl,de                           ;                   de = rem+delta_x
 452+ FB87 ~                                    ex      de,hl                           ;                   .
 453+ FB87 ~                                    ld      hl,(error)                      ;                   hl = error - de
 454+ FB87 ~                                    ClearCarryFlag                          ;                   .
 455+ FB87 ~                                    sbc     hl,de                           ;                   .
 456+ FB87 ~                                    ld      (error),hl                      ;                   write to error
 457+ FB87 ~                                    ld      hl,(rem)                        ;               if (rem > 0)
 458+ FB87 ~                                    ld      a,h                             ;               .
 459+ FB87 ~                                    or      l                               ;               .
 460+ FB87 ~                                    jp      z,.remLte0                      ;               .
 461+ FB87 ~            .remGT0:                ld      hl,(x_pos)                      ;                   x_pos += 1;
 462+ FB87 ~                                    inc     hl                              ;                   .
 463+ FB87 ~                                    ld      (x_pos),hl                      ;                   .
 464+ FB87 ~                                    ld      hl,(error)                      ;                   error += delta_y_step;
 465+ FB87 ~                                    ld      de,(delta_y_step)               ;                   .
 466+ FB87 ~                                    ClearCarryFlag                          ;                   .
 467+ FB87 ~                                    adc     hl,de                           ;                   .
 468+ FB87 ~                                    ld      (error),hl                      ;                   .
 469+ FB87 ~            .remLte0:               ld      a,1                             ;               set exit = true
 470+ FB87 ~                                    ld      (set_exit),a                    ;               .
 471+ FB87 ~            .xposLTxmin:
 472+ FB87 ~            .y1GTE0:                ld      a,(set_exit)                    ;           if (!set_exit && x1 < clip_xmin)
 473+ FB87 ~                                    and     a                               ;           .
 474+ FB87 ~                                    jp      nz,.exit_false                  ;           .   Exit if set_exit is true
 475+ FB87 ~                                    ld      hl,(x1)                         ;           .
 476+ FB87 ~                                    ld      de,(clip_xmin)                  ;           .   Exit if x1 > xmin
 477+ FB87 ~                                    call    CompareHLDESgn                  ;           .
 478+ FB87 ~                                    jp      nc,.exit_false                  ;           .
 479+ FB87 ~                                    ex      de,hl                           ;               temp = delta_y_step * (clip_xmin - x1)
 480+ FB87 ~                                    ld      de,(x1)                         ;                   (clip_xmin - x1) (already have clip_xmin in de)
 481+ FB87 ~                                    ClearCarryFlag                          ;                   .
 482+ FB87 ~                                    sbc     hl,de                           ;                   .
 483+ FB87 ~                                    ld      de,(delta_y_step)               ;                   hl = delta_y_step * (clip_xmin - x1)
 484+ FB87 ~                                    call    mulHLbyDE2sc                    ;                   .
 485+ FB87 ~                                    ld      (temp),hl                       ;                   .
 486+ FB87 ~            .msdEQtempDIVdxstep:    ld      bc,hl                           ;               msd = temp / delta_x_step
 487+ FB87 ~                                    ld      de,(delta_x_step)               ;                  BC = BC / DE, HL = BC % DE
 488+ FB87 ~                                    call    Floor_DivQ                      ;                  .
 489+ FB87 ~                                    ld      (msd),bc                        ;                  .
 490+ FB87 ~                                    ld      iy,hl                           ;                  save BC%DE into HL (temp % delta x step0
 491+ FB87 ~            .yposPlusmsd:           ld      hl,(y_pos)                      ;               y_pos += msd
 492+ FB87 ~                                    ClearCarryFlag                          ;                   bc already is msd
 493+ FB87 ~                                    adc     hl,bc                           ;                   hl += bc
 494+ FB87 ~                                    ld      (y_pos),hl                      ;                   .
 495+ FB87 ~                                    ld      hl,iy                           ;               rem = temp % delta_x_step (which is in IY)
 496+ FB87 ~                                    ld      (rem),hl                        ;               .
 497+ FB87 ~                                    ld      hl,(y_pos)                      ;           if ((y_pos > 127) || (y_pos == 127 && rem >= delta_x))
 498+ FB87 ~                                    ld      de,127                          ;           .
 499+ FB87 ~                                    call    CompareHLDESame                 ;           .    if y_pos != clipxmax skip the abort test
 500+ FB87 ~                                    jr      nz,.YPosNotClipymax             ;           .
 501+ FB87 ~                                    ld      hl,(rem)                        ;           .    if rem < delta_y  skip the abort test
 502+ FB87 ~                                    ld      de,(delta_x)                    ;           .
 503+ FB87 ~                                    call    CompareHLDESgn                  ;           .
 504+ FB87 ~                                    ret     c                               ;           .
 505+ FB87 ~            .YPosNotClipymax:       ex      de,hl                           ;           .    swap over xpos and max to compare xpos > xmax
 506+ FB87 ~                                    call    CompareHLDESgn                  ;           .    if xpos > clipxmax then return (i.e clipxmax - xpos had a carry)
 507+ FB87 ~                                    ret     c
 508+ FB87 ~            .yposLT127:             ld      hl,(clip_xmin)                  ;               x_pos = clip_xmin;
 509+ FB87 ~                                    ld      (x_pos),hl                      ;               .
 510+ FB87 ~                                    ld      hl,(error)                      ;               error += rem
 511+ FB87 ~                                    ld      de,(rem)                        ;               .
 512+ FB87 ~                                    ClearCarryFlag                          ;               .
 513+ FB87 ~                                    adc     hl,de                           ;               .
 514+ FB87 ~                                    ld      (error),hl                      ;               .
 515+ FB87 ~                                    ld      hl,(rem)                        ;               if (rem >= delta_x)
 516+ FB87 ~                                    ld      de,(delta_x)                    ;               .
 517+ FB87 ~                                    call    CompareHLDESgn                  ;               .
 518+ FB87 ~                                    jp      c,.remLTDeltaX                  ;               .
 519+ FB87 ~            .remGTEDeltaX:          ld      hl,(y_pos)                      ;                   y_pos++
 520+ FB87 ~                                    inc     hl
 521+ FB87 ~                                    ld      (y_pos),hl
 522+ FB87 ~                                    ld      hl,(error)                      ;                    error -= delta_x_step;
 523+ FB87 ~                                    ld      de,(delta_x_step)               ;                    .
 524+ FB87 ~                                    ClearCarryFlag                          ;                    .
 525+ FB87 ~                                    sbc     hl,de                           ;                    .
 526+ FB87 ~                                    ld      (error),hl                      ;                    .
 527+ FB87 ~            .remLTDeltaX:
 528+ FB87 ~            .exit_false:            ld      hl,(x2)                         ;           x_pos_end = x2;
 529+ FB87 ~                                    ld      (x_pos_end),hl                  ;           .
 530+ FB87 ~                                    ld      hl,(y2)                         ;           if (y2 > 127)
 531+ FB87 ~                                    ld      de,127                          ;           .
 532+ FB87 ~                                    call    CompareHLDESame                 ;           .   if y2 is zero fails check
 533+ FB87 ~                                    jp      z,.y2LTE127                     ;           .
 534+ FB87 ~                                    call    CompareHLDESgn                  ;           .   if y2 < 127 then there is carry so fails check
 535+ FB87 ~                                    jp      c,.y2LTE127                      ;           .
 536+ FB87 ~            .y2GT127:               ld      hl,127                          ;               temp = delta_x_step * (127 - y1) + delta_x;
 537+ FB87 ~                                    ld      de,(y1)                         ;                   hl = 127-y1
 538+ FB87 ~                                    ClearCarryFlag                          ;
 539+ FB87 ~                                    sbc     hl,de
 540+ FB87 ~                                    ld      de,(delta_x_step)               ;                   hl = delta_x_step * (127-y1)
 541+ FB87 ~                                    call    mulHLbyDE2sc                    ;                   .
 542+ FB87 ~                                    ld      de,(delta_x)                    ;                   hl += delta_x
 543+ FB87 ~                                    ClearCarryFlag                          ;                   .
 544+ FB87 ~                                    adc     hl,de                           ;                   .
 545+ FB87 ~                                    ld      (temp),hl
 546+ FB87 ~                                    ld      bc,hl
 547+ FB87 ~                                    ld      de,(delta_y_step)               ;               msd = temp / delta y step
 548+ FB87 ~                                    call    Floor_DivQ                      ;               .
 549+ FB87 ~                                    ld      (msd),bc                        ;               .
 550+ FB87 ~                                    ld      hl,(x1)                         ;               x_pos_end = x1 + msd;
 551+ FB87 ~                                    ClearCarryFlag                          ;               .
 552+ FB87 ~                                    adc     hl,bc                           ;               .
 553+ FB87 ~                                    ld      (x_pos_end),hl                  ;               .
 554+ FB87 ~                                    ld      hl,(msd)                        ;               if ((temp - msd * delta_y_step) == 0) --x_pos_end
 555+ FB87 ~                                    ld      de,(delta_y_step)               ;               .
 556+ FB87 ~                                    call    mulHLbyDE2sc                    ;               .
 557+ FB87 ~                                    ex      de,hl                           ;               .
 558+ FB87 ~                                    ld      hl,(temp)                       ;               .
 559+ FB87 ~                                    ClearCarryFlag                          ;               .
 560+ FB87 ~                                    sbc     hl,de                           ;               .
 561+ FB87 ~                                    ld      a,h                             ;               .
 562+ FB87 ~                                    or      l                               ;               .
 563+ FB87 ~                                    jp      nz,.NotTheSame                  ;               .
 564+ FB87 ~            .IsTheSame:             ld      hl,(x_pos_end)                  ;                   --x_pos_end
 565+ FB87 ~                                    dec     hl                              ;                   .
 566+ FB87 ~                                    ld      (x_pos_end),hl                  ;                   .
 567+ FB87 ~            .NotTheSame:
 568+ FB87 ~            .y2LTE127:              ld      hl,(x_pos_end)                  ;           x_pos_end = min (x_pos_end,clip_xmax) + 1
 569+ FB87 ~                                    ld      de,(clip_xmax)                  ;           .
 570+ FB87 ~                                    call    CompareHLDESgn                  ;           .
 571+ FB87 ~                                    jp      nc,.xposgtexmax                 ;           .
 572+ FB87 ~            .xposltxmax:            ld      hl,(x_pos_end)                  ;           .
 573+ FB87 ~                                    inc     hl                              ;               x_pos_end+1
 574+ FB87 ~                                    ld      (x_pos_end),hl                  ;               .
 575+ FB87 ~                                    jp      .DoneXposAdjust                 ;               .
 576+ FB87 ~            .xposgtexmax:           inc     de                              ;               else
 577+ FB87 ~                                    ld      (x_pos_end),de                  ;               clip_xmax+1
 578+ FB87 ~            .DoneXposAdjust:        ld      a,(sign_x)                      ;           if (sign_x == -1)
 579+ FB87 ~                                    inc     a
 580+ FB87 ~                                    jp      nz,.SignNotMinus1
 581+ FB87 ~            .SignEquMinus1:         ld      hl,(x_pos)                      ;               x_pos = -x_pos;
 582+ FB87 ~                                    macronegate16hl
 583+ FB87 ~                                    ld      (x_pos),hl
 584+ FB87 ~                                    ld      hl,(x_pos_end)                  ;               x_pos_end = -x_pos_end;
 585+ FB87 ~                                    macronegate16hl
 586+ FB87 ~                                    ld      (x_pos_end),hl
 587+ FB87 ~            .y2LTE27:
 588+ FB87 ~            .SignNotMinus1:
 589+ FB87 ~                                    ld      de,(delta_y_step)               ;        delta_x_step -= delta_y_step;
 590+ FB87 ~                                    ld      hl,(delta_x_step)               ;        .
 591+ FB87 ~                                    ClearCarryFlag                          ;        .
 592+ FB87 ~                                    sbc     hl,de                           ;        .
 593+ FB87 ~                                    ld      (delta_x_step),hl               ;        .
 594+ FB87 ~            .PlottingLoop:          ld      hl,(x_pos)                      ;        while (x_pos != x_pos_end)
 595+ FB87 ~                                    ld      de,(x_pos_end)                  ;        .
 596+ FB87 ~                                    call    CompareHLDESame                 ;        .
 597+ FB87 ~                                    ret     z                               ;        .
 598+ FB87 ~                                    ld      hl,(x_pos)                      ;               drawpixel at xpos, ypos, Colour
 599+ FB87 ~                                    ld      c,l                             ;               .
 600+ FB87 ~                                    ld      hl,(y_pos)                      ;               .
 601+ FB87 ~                                    ld      b,l                             ;               .
 602+ FB87 ~                                    ld      a,$BF                           ;               .
 603+ FB87 ~            .PlotPixel:             call    l2_plot_pixel                   ;               .
 604+ FB87 ~                                    ld      hl,(error)                      ;               if (error >= 0)
 605+ FB87 ~                                    bit     7,h                             ;               .
 606+ FB87 ~                                    jp      nz,.errorLT0                    ;               .
 607+ FB87 ~            .errorGTE0:             ld	    hl,(y_pos)                      ;                   ++y_pos;
 608+ FB87 ~                                    inc	    hl                              ;                   .
 609+ FB87 ~                                    ld	    (y_pos),hl                      ;                   .
 610+ FB87 ~                                    ld	    hl,(error)                      ;                   error -= delta_x_step;
 611+ FB87 ~                                    ld	    de,(delta_x_step)               ;                   .
 612+ FB87 ~                                    ClearCarryFlag                          ;                   .
 613+ FB87 ~                                    sbc	    hl,de                           ;                   .
 614+ FB87 ~                                    ld	    (error),hl                      ;                   .
 615+ FB87 ~                                    jp      .DoneErrorAdjust                ;                   .
 616+ FB87 ~            .errorLT0:              ld	    hl,(error)                      ;                   error += delta_y_step;
 617+ FB87 ~                                    ld	    de,(delta_y_step)
 618+ FB87 ~                                    ClearCarryFlag
 619+ FB87 ~                                    adc	    hl,de
 620+ FB87 ~                                    ld	    (error),hl
 621+ FB87 ~            .DoneErrorAdjust:       ld      de,(sign_x)
 622+ FB87 ~                                    ld      hl,(x_pos)
 623+ FB87 ~                                    ClearCarryFlag
 624+ FB87 ~                                    adc     hl,de
 625+ FB87 ~                                    ld      (x_pos),hl
 626+ FB87 ~                                    jp      .PlottingLoop
 627+ FB87 ~            ;.......................DxGltDy branch.............................................................................................
 628+ FB87 ~            LineDrawDxLTDy:         ;ret
 629+ FB87 ~                                    ld      hl,(delta_x_step)               ;       error = delta_x_step - delta_y;
 630+ FB87 ~                                    ld      de,(delta_y)
 631+ FB87 ~                                    ClearCarryFlag
 632+ FB87 ~                                    sbc     hl,de
 633+ FB87 ~                                    ld      (error),hl
 634+ FB87 ~                                    ZeroA                                   ;        set exit false (0 == false)
 635+ FB87 ~                                    ld      (set_exit),a
 636+ FB87 ~                                    ld      hl,(x1)                         ;        if (x1 < clip_xmin)
 637+ FB87 ~                                    ld      de,(clip_xmin)                  ;        .
 638+ FB87 ~                                    call    CompareHLDESgn                  ;        .
 639+ FB87 ~                                    jp      nc,.x1GTEClipXmin               ;        .
 640+ FB87 ~            .x1LTClipXmin:          ld      de,(x1)                         ;           temp = (2 * (cllp_xmin - x1) - 1) * delta_y;
 641+ FB87 ~                                    ld      hl,(clip_xmin)                  ;               hl = clip_xmin - x1
 642+ FB87 ~                                    ClearCarryFlag                          ;               .
 643+ FB87 ~                                    sbc     hl,de                           ;               .
 644+ FB87 ~                                    ClearCarryFlag
 645+ FB87 ~                                    adc     hl,hl                           ;               hl = (2* hl)
 646+ FB87 ~                                    dec     hl                              ;               hl = (2 *  hl - 1)
 647+ FB87 ~                                    ld      de,(delta_y)                    ;               hl = hl  * delta_y
 648+ FB87 ~                                    call    mulHLbyDE2sc                    ;               .
 649+ FB87 ~                                    ld      (temp),hl                       ;               .
 650+ FB87 ~                                    ld      bc,hl                           ;            msd = temp / delta_x_step
 651+ FB87 ~                                    ld      de,(delta_x_step)               ;               BC = BC / DE, HL = BC % DE
 652+ FB87 ~                                    call    Floor_DivQ                      ;               .
 653+ FB87 ~                                    ld      (msd),bc                        ;               .
 654+ FB87 ~                                    ld      hl,(y_pos)                      ;            y_pos += msd
 655+ FB87 ~                                    ClearCarryFlag
 656+ FB87 ~                                    adc     hl,bc                           ;            .
 657+ FB87 ~                                    ld      (y_pos),hl                      ;            .
 658+ FB87 ~                                    ld      de,127                          ;            if (y_pos >= 127)
 659+ FB87 ~                                    call    CompareHLDESame                 ;            .
 660+ FB87 ~                                    jp      z,.yposGT127                    ;            .
 661+ FB87 ~                                    call    CompareHLDESgn                  ;            .
 662+ FB87 ~                                    ret     nc                              ;               return
 663+ FB87 ~            .yposGT127:             ld      hl,(y_pos)                      ;            if (y_pos >= 0)
 664+ FB87 ~                                    bit     7,h
 665+ FB87 ~                                    jp      nz,.yposLT0
 666+ FB87 ~            .yposGT0:               ld      hl,(msd)                        ;               rem = temp - (msd * delta_x_step)
 667+ FB87 ~                                    ld      de,(delta_x_step)               ;                   de = msd * delta_x_step
 668+ FB87 ~                                    call    mulHLbyDE2sc                    ;                   .
 669+ FB87 ~                                    ex      de,hl                           ;                   .
 670+ FB87 ~                                    ld      hl,(temp)                       ;                   hl = temp - de
 671+ FB87 ~                                    ClearCarryFlag                          ;                   .
 672+ FB87 ~                                    sbc     hl,de                           ;                   .
 673+ FB87 ~                                    ld      (rem),hl                        ;                   .
 674+ FB87 ~                                    ld      de,(clip_xmin)                  ;               x_pos = clip_xmin
 675+ FB87 ~                                    ld      (x_pos),de                      ;               .
 676+ FB87 ~                                    ld      de,(rem)                        ;               error -= rem + delta_y
 677+ FB87 ~                                    ClearCarryFlag                          ;               .
 678+ FB87 ~                                    adc     hl,de                           ;                   de = rem+delta_x
 679+ FB87 ~                                    ex      de,hl                           ;                   .
 680+ FB87 ~                                    ld      hl,(error)                      ;                   hl = error - de
 681+ FB87 ~                                    ClearCarryFlag                          ;                   .
 682+ FB87 ~                                    sbc     hl,de                           ;                   .
 683+ FB87 ~                                    ld      (error),hl                      ;                   .
 684+ FB87 ~                                    ld      hl,(rem)                        ;               if (rem > 0)
 685+ FB87 ~                                    ld      a,h                             ;               .
 686+ FB87 ~                                    or      l                               ;               .
 687+ FB87 ~                                    jp      z,.remLte0                      ;               .
 688+ FB87 ~            .remGT0:                ld      hl,(y_pos)                      ;                   y_pos += 1;
 689+ FB87 ~                                    inc     hl
 690+ FB87 ~                                    ld      (y_pos),hl
 691+ FB87 ~                                    ld      hl,(error)                      ;                   error += delta_x_step;
 692+ FB87 ~                                    ld      de,(delta_x_step)
 693+ FB87 ~                                    ClearCarryFlag
 694+ FB87 ~                                    adc     hl,de
 695+ FB87 ~                                    ld      (error),hl
 696+ FB87 ~            .remLte0:               ld      a,1                             ;               set exit = true
 697+ FB87 ~                                    ld      (set_exit),a                    ;               .
 698+ FB87 ~
 699+ FB87 ~            .yposLT0:
 700+ FB87 ~            .x1GTEClipXmin:         ld      a,(set_exit)                    ;        if (!set_exit && y1 < 0)
 701+ FB87 ~                                    and     a                               ;        .
 702+ FB87 ~                                    jp      nz,.exit_false                  ;        .  if exit is 1 then its true so exit branch
 703+ FB87 ~                                    ld      hl,(y1)                         ;        .  if y1 is positive (including 0) then exit branch
 704+ FB87 ~                                    bit     7,h                             ;        .
 705+ FB87 ~                                    jp      z,.exit_false                   ;        .
 706+ FB87 ~                                    ld      hl,(y1)                         ;           temp = delta_x_step * (0 - y1)
 707+ FB87 ~                                    macronegate16hl                         ;           .
 708+ FB87 ~                                    ld      de,(delta_x_step)               ;           .       hl = delta_x_step * (- y1)
 709+ FB87 ~                                    call    mulHLbyDE2sc                    ;           .
 710+ FB87 ~                                    ld      (temp),hl                       ;           .
 711+ FB87 ~            .msdEQtempDIVdxstep:    ld      bc,hl                           ;           msd = temp / delta_y_step
 712+ FB87 ~                                    ld      de,(delta_y_step)               ;               BC = BC / DE, HL = BC % DE
 713+ FB87 ~                                    call    Floor_DivQ                      ;               .
 714+ FB87 ~                                    ld      (msd),bc                        ;               .
 715+ FB87 ~                                    ld      iy,hl                           ;               same remainders (which is also mod result)
 716+ FB87 ~                                    ld      (rem),hl                        ;           rem = temp % delta_y_step (swapped from being after x_pos += msd)
 717+ FB87 ~            .yposPlusmsd:           ld      hl,(x_pos)                      ;           x_pos += msd
 718+ FB87 ~                                    ClearCarryFlag                          ;           .   bc already is msd
 719+ FB87 ~                                    adc     hl,bc                           ;           .   hl += bc
 720+ FB87 ~                                    ld      (x_pos),hl                      ;           .
 721+ FB87 ~                                    ld      hl,(x_pos)                      ;           if ((x_pos > clip_xmax) || (x_pos == clip_xmax && rem >= delta_y))
 722+ FB87 ~                                    ld      de,(clip_xmax)                  ;           .
 723+ FB87 ~                                    call    CompareHLDESame                 ;           .    if xpos != clipxmax skip the abort test
 724+ FB87 ~                                    jr      nz,.XPosNotClipxmax             ;           .
 725+ FB87 ~                                    ld      hl,(rem)                        ;           .    if rem < delta_y  skip the abort test
 726+ FB87 ~                                    ld      de,(delta_y)                    ;           .
 727+ FB87 ~                                    call    CompareHLDESgn                  ;           .
 728+ FB87 ~                                    ret     c                               ;           .
 729+ FB87 ~            .XPosNotClipxmax:       ex      de,hl                           ;           .    swap over xpos and max to compare xpos > xmax
 730+ FB87 ~                                    call    CompareHLDESgn                  ;           .    if xpos > clipxmax then return (i.e clipxmax - xpos had a carry)
 731+ FB87 ~                                    ret     c
 732+ FB87 ~            .xposLT127:             ld      hl,0                            ;           y_pos = 0;
 733+ FB87 ~                                    ld      (y_pos),hl                      ;           .
 734+ FB87 ~                                    ld      hl,(error)                      ;           error += rem
 735+ FB87 ~                                    ld      de,(rem)                        ;           .
 736+ FB87 ~                                    ClearCarryFlag                          ;           .
 737+ FB87 ~                                    adc     hl,de                           ;           .
 738+ FB87 ~                                    ld      (error),hl                      ;           .
 739+ FB87 ~                                    ld      hl,(rem)                        ;           if (rem >= delta_y)
 740+ FB87 ~                                    ld      de,(delta_y)                    ;           .
 741+ FB87 ~                                    call    CompareHLDESgn                  ;           .
 742+ FB87 ~                                    jp      c,.remLTDeltaY                  ;           .
 743+ FB87 ~            .remGTEDeltaY:          ld      hl,(x_pos)                      ;                x_pos++
 744+ FB87 ~                                    inc     hl
 745+ FB87 ~                                    ld      (x_pos),hl
 746+ FB87 ~                                    ld      hl,(error)                      ;                error -= delta_y_step;
 747+ FB87 ~                                    ld      de,(delta_y_step)               ;                .
 748+ FB87 ~                                    ClearCarryFlag                          ;                .
 749+ FB87 ~                                    sbc     hl,de                           ;                .
 750+ FB87 ~                                    ld      (error),hl                      ;                .
 751+ FB87 ~            .remLTDeltaY:
 752+ FB87 ~            .exit_false:            ld      hl,(y2)                         ;           y_pos_end = y2;
 753+ FB87 ~                                    ld      (y_pos_end),hl                  ;           .
 754+ FB87 ~                                    ld      hl,(x2)                         ;           if (x2 > clip_xmax)
 755+ FB87 ~                                    ld      de,(clip_xmax)                  ;           .
 756+ FB87 ~                                    call    CompareHLDESame                 ;           .
 757+ FB87 ~                                    jp      z,.x2LTEclipxmax                ;           .
 758+ FB87 ~                                    call    CompareHLDESgn                  ;           .
 759+ FB87 ~                                    jp      c,.x2LTEclipxmax                ;           .
 760+ FB87 ~            .x2GTclipxmax:          ld      hl,(clip_xmax)                  ;               temp = delta_y_step * (clip_xmax - x1) + delta_y;
 761+ FB87 ~                                    ld      de,(x1)                         ;                   hl = 127-y1
 762+ FB87 ~                                    ClearCarryFlag                          ;
 763+ FB87 ~                                    sbc     hl,de
 764+ FB87 ~                                    ld      de,(delta_y_step)               ;                   hl = delta_x_step * (clip_xmax - x1)
 765+ FB87 ~                                    call    mulHLbyDE2sc                    ;                   .
 766+ FB87 ~                                    ld      de,(delta_y)                    ;                   hl += delta_y
 767+ FB87 ~                                    ClearCarryFlag                          ;                   .
 768+ FB87 ~                                    adc     hl,de                           ;                   .
 769+ FB87 ~                                    ld      (temp),hl
 770+ FB87 ~                                    ld      bc,hl
 771+ FB87 ~                                    ld      de,(delta_x_step)               ;               msd = temp / delta x step
 772+ FB87 ~                                    call    Floor_DivQ                      ;               .
 773+ FB87 ~                                    ld      (msd),bc                        ;               .
 774+ FB87 ~                                    ld      hl,(y1)                         ;               y_pos_end = y1 + msd;
 775+ FB87 ~                                    ClearCarryFlag                          ;               .
 776+ FB87 ~                                    adc     hl,bc                           ;               .
 777+ FB87 ~                                    ld      (y_pos_end),hl                  ;               .
 778+ FB87 ~                                    ld      hl,(msd)                        ;               if ((temp - msd * delta_x_step) == 0) --y_pos_end
 779+ FB87 ~                                    ld      de,(delta_x_step)               ;               .
 780+ FB87 ~                                    call    mulHLbyDE2sc                    ;               .
 781+ FB87 ~                                    ex      de,hl                           ;               .
 782+ FB87 ~                                    ld      hl,(temp)                       ;               .
 783+ FB87 ~                                    ClearCarryFlag                          ;               .
 784+ FB87 ~                                    sbc     hl,de                           ;               .
 785+ FB87 ~                                    ld      a,h                             ;               .
 786+ FB87 ~                                    or      l                               ;               .
 787+ FB87 ~                                    jp      nz,.NotTheSame                  ;               .
 788+ FB87 ~            .IsTheSame:             ld      hl,(y_pos_end)                  ;                   --x_pos_end
 789+ FB87 ~                                    dec     hl                              ;                   .
 790+ FB87 ~                                    ld      (y_pos_end),hl                  ;                   .
 791+ FB87 ~            .NotTheSame:
 792+ FB87 ~            .x2LTEclipxmax:         ld      hl,(y_pos_end)                  ;           y_pos_end = min(y_pos_end, clip_ymax) + 1
 793+ FB87 ~                                    ld      de,127                          ;           .
 794+ FB87 ~                                    call    CompareHLDESgn                  ;           .
 795+ FB87 ~                                    jp      nc,.yposgteymax                 ;           .
 796+ FB87 ~            .yposltymax:            ld      hl,(y_pos_end)                  ;           .
 797+ FB87 ~                                    inc     hl                              ;           .
 798+ FB87 ~                                    ld      (y_pos_end),hl                  ;           .
 799+ FB87 ~                                    jp      .DoneYposAdjust                 ;           .
 800+ FB87 ~            .yposgteymax:           inc     de                              ;           .
 801+ FB87 ~                                    ld      (y_pos_end),de                  ;           .
 802+ FB87 ~            .DoneYposAdjust:        ld      a,(sign_x)                      ;           if (sign_x == -1)
 803+ FB87 ~                                    inc     a
 804+ FB87 ~                                    jp      nz,.SignNotMinus1
 805+ FB87 ~            .SignEquMinus1:         ld      hl,(x_pos)                      ;               x_pos = -x_pos;
 806+ FB87 ~                                    macronegate16hl
 807+ FB87 ~                                    ld      (x_pos),hl
 808+ FB87 ~                                    ld      hl,(x_pos_end)                  ;               x_pos_end = -x_pos_end;
 809+ FB87 ~                                    macronegate16hl
 810+ FB87 ~                                    ld      (x_pos_end),hl
 811+ FB87 ~            .SignNotMinus1:         ld      de,(delta_x_step)               ;        delta_y_step -= delta_x_step;
 812+ FB87 ~                                    ld      hl,(delta_y_step)               ;        .
 813+ FB87 ~                                    ClearCarryFlag                          ;        .
 814+ FB87 ~                                    sbc     hl,de                           ;        .
 815+ FB87 ~                                    ld      (delta_y_step),hl               ;        .
 816+ FB87 ~            .PlottingLoop:          ld      hl,(y_pos)                      ;        while (y_pos != y_pos_end)
 817+ FB87 ~                                    ld      de,(y_pos_end)
 818+ FB87 ~                                    call    CompareHLDESame
 819+ FB87 ~                                    ret     z
 820+ FB87 ~            .PlotPixel:             ld      hl,(x_pos)
 821+ FB87 ~                                    ld      c,l
 822+ FB87 ~                                    ld      hl,(y_pos)
 823+ FB87 ~                                    ld      b,l
 824+ FB87 ~                                    ld      a,$BF
 825+ FB87 ~                                    call    l2_plot_pixel                   ;               drawpixel at xpos, ypos, Colour
 826+ FB87 ~                                    ld      hl,(error)                      ;               if (error >= 0)
 827+ FB87 ~                                    bit     7,h
 828+ FB87 ~                                    jp      nz,.errorLT0
 829+ FB87 ~            .errorGTE0:             ld	    hl,(x_pos)                      ;                   ++x_pos
 830+ FB87 ~                                    ld      de,(sign_x)
 831+ FB87 ~                                    ClearCarryFlag
 832+ FB87 ~                                    adc     hl,de
 833+ FB87 ~                                    ld	    (x_pos),hl
 834+ FB87 ~                                    ld	    hl,(error)                      ;                   error -= delta_y_step;
 835+ FB87 ~                                    ld	    de,(delta_y_step)
 836+ FB87 ~                                    ClearCarryFlag
 837+ FB87 ~                                    sbc	    hl,de
 838+ FB87 ~                                    ld	    (error),hl
 839+ FB87 ~                                    jp      .DoneErrorAdjust
 840+ FB87 ~            .errorLT0:              ld	    hl,(error)                      ;                   error += delta_x_step;
 841+ FB87 ~                                    ld	    de,(delta_x_step)
 842+ FB87 ~                                    ClearCarryFlag
 843+ FB87 ~                                    adc	    hl,de
 844+ FB87 ~                                    ld	    (error),hl
 845+ FB87 ~            .DoneErrorAdjust:       ld      hl,(y_pos)
 846+ FB87 ~                                    inc     hl
 847+ FB87 ~                                    ld      (y_pos),hl
 848+ FB87 ~                                    jp      .PlottingLoop
 849+ FB87                      ENDIF
 850+ FB87
 851+ FB87
 852+ FB87 21 29 FB     l2_draw_6502_line:      ld      hl,x1                           ; copy from currnet position to 6502 variables
 853+ FB8A 11 F5 F4                             ld      de,XX1510
 854+ FB8D 01 08 00                             ld      bc,4*2
 855+ FB90 ED B0                                ldir
 856+ FB92 CD E5 F6                             call    LL145_6502                      ; perform 6502 version
 857+ FB95 D8                                   ret     c                               ; returns if carry is set as its a no draw
 858+ FB96 21 00 00     .CopyBackResults:       ld      hl,0                            ; Clear out high bytes
 859+ FB99 22 29 FB                             ld      (x1),hl
 860+ FB9C 22 2B FB                             ld      (y1),hl
 861+ FB9F 22 2D FB                             ld      (x2),hl
 862+ FBA2 22 2F FB                             ld      (y2),hl
 863+ FBA5 3A F5 F4                             ld      a,(XX1510)                      ; write low bytes with actual values to plot from XX1510
 864+ FBA8 32 29 FB                             ld      (x1),a
 865+ FBAB 4F                                   ld      c,a
 866+ FBAC 3A F6 F4                             ld      a,(XX1510+1)
 867+ FBAF 32 2B FB                             ld      (y1),a
 868+ FBB2 47                                   ld      b,a
 869+ FBB3 3A F7 F4                             ld      a,(XX1510+2)
 870+ FBB6 32 2D FB                             ld      (x2),a
 871+ FBB9 5F                                   ld      e,a
 872+ FBBA 3A F8 F4                             ld      a,(XX1510+3)
 873+ FBBD 32 2F FB                             ld      (y2),a
 874+ FBC0 57                                   ld      d,a
 875+ FBC1 3E FF                                ld      a,$FF
 876+ FBC3                                      ClearCarryFlag
 876+ FBC3 B7          >                        or a
 877+ FBC4 C9                                   ret
 878+ FBC5                                 ;     call    l2_draw_clipped_line
 879+ FBC5              ;                        call    l2_draw_diagonal                ; ">l2_draw_diagonal, bc = y0,x0 de=y1,x1,a=color) Thsi version performs a pre sort based on y axis"
 880+ FBC5              ;................................................................
 881+ FBC5 00 00        result                  dw      0
 882+ FBC7              ;    swap = 0;
 883+ FBC7              ;    if (y1 > y2)
 884+ FBC7              ;    draws line from x1,y1 to x2,y2 memory locations in colour held in a
 885+ FBC7 2A 2B FB     l2_draw_elite_line:     ld      hl,(y1)                         ; if (y1 > y2)
 886+ FBCA ED 5B 2F FB                          ld      de,(y2)                         ; .
 887+ FBCE CD BC 9A                             call    CompareHLDESgn                  ; .
 888+ FBD1 DA D7 FB                             jp      c,.NoSwapCoords                 ;
 889+ FBD4              ;        swapp1p2();
 890+ FBD4 CD 6A FB     .SwapCoords:            call    SwapCoords                      ;       swap them so y1 <= y2
 891+ FBD7 2A 29 FB     .NoSwapCoords:          ld      hl,(x1)                         ; hl = x1
 892+ FBDA ED 5B 2D FB                          ld      de,(x2)                         ; de = x2
 893+ FBDE ED 4B 2B FB                          ld      bc,(y1)                         ; bc = y1
 894+ FBE2 DD 2A 2F FB                          ld      ix,(y2)                         ; ix = y2
 895+ FBE6              .CheckForVertical:
 896+ FBE6              .CheckForHorizontal:
 897+ FBE6 FD 26 80                             ld      iyh,128                         ; iyh = xx13 = 128
 898+ FBE9              ;    xx13 = 128;
 899+ FBE9              ;    if (x2 >= 0 && x2 <= 255 && y2 >= 0 && y2 <= 127)
 900+ FBE9 7A                                   ld      a,d                             ; if (x2 >= 0 && x2 <= 255 && y2 >= 0 && y2 <= 127)
 901+ FBEA DD B4                                or      ixh                             ; .  [if x2 and y2 > 255 goto point2clip]
 902+ FBEC 20 09                                jr      nz,.Point2Clip                  ; .  .
 903+ FBEE DD 7D                                ld      a,ixl                           ; .  [if y2 low > 127 goto point2clip]
 904+ FBF0 CB 7F                                bit     7,a                             ; .  .
 905+ FBF2 20 03                                jr      nz,.Point2Clip                  ; .  .
 906+ FBF4              ;        xx13 = 0;
 907+ FBF4 FD 26 00     .Point2NoClip:          ld      iyh,0                           ;       iyh = xx13 = 0
 908+ FBF7              ;    if (x1 >= 0 && x1 <= 255 && y1 >= 0 && y1 <= 127)
 909+ FBF7 7C           .Point2Clip:            ld      a,h                             ; if (x1 >= 0 && x1 <= 255 && y1 >= 0 && y1 <= 127)
 910+ FBF8 B0                                   or      b                               ; . [ if x1 or y1 > 255 goto clip needed]
 911+ FBF9 C2 0A FC                             jp      nz,.ClipNeeded                  ; .
 912+ FBFC CB 79                                bit     7,c                             ; . [ if y1 low > 127 goto clip needed]
 913+ FBFE C2 0A FC                             jp      nz,.ClipNeeded                  ; .
 914+ FC01              ;        if (xx13 != 0)
 915+ FC01 FD 7C        .ClipPoint1:            ld      a,iyh                           ;       if (xx13 = 0)
 916+ FC03 A7                                   and     a                               ;       .
 917+ FC04 CA FE FC                             jp      z,.ClipComplete                 ;               clipping not needed so treat as done an ddraw the line
 918+ FC07 FD 26 40                             ld      iyh,64                          ;       else xx13 = 64 (xx13 /2 but if xx13 is 0 it never hits here so can just set to 64)
 919+ FC0A              ;.......................LL138
 920+ FC0A FD 7C        .ClipNeeded:            ld      a,iyh                           ; if (xx13 == 128)
 921+ FC0C CB 7F                                bit     7,a                             ; . [ jump if bit 7 is not set so <> 128]
 922+ FC0E CA 47 FC                             jp      z,.xx13Not128                   ; .
 923+ FC11 7C           .xx13Is128:             ld      a,h                             ;       if (x1 < 0 && x2 < 0)
 924+ FC12 A2                                   and     d                               ;       . [ x1 and x2 high bits 7 are both set then its off to the left]
 925+ FC13 F8                                   ret     m                               ;               return
 926+ FC14 78                                   ld      a,b                             ;       if (y1 < 0 && y2 < 0)
 927+ FC15 DD A4                                and     ixh                             ;       . [ y1 and y2 high bits 7 are both set then its off the top]
 928+ FC17 F8                                   ret     m                               ;               return
 929+ FC18 7C                                   ld      a,h                             ;       if (x1 > 255  && x2 > 255)
 930+ FC19 CB 7F                                bit     7,a                             ;       . [test if x1 is negative and if so skip]
 931+ FC1B C2 2A FC                             jp      nz,.x1x2LessThan256             ;       .
 932+ FC1E A7                                   and     a                               ;       . [ if x1 is not negative then if high has any value its > 256]
 933+ FC1F CA 2A FC                             jp      z,.x1x2LessThan256              ;       .
 934+ FC22 7A                                   ld      a,d                             ;       . [test if x2 is negative]
 935+ FC23 CB 7F                                bit     7,a                             ;       .
 936+ FC25 C2 2A FC                             jp      nz,.x1x2LessThan256             ;       . < can simplify with with an xor test to detect if opposite signs first >
 937+ FC28 A7                                   and     a                               ;       . [ if x2 is not negative then if high has any value its > 256]
 938+ FC29 C0                                   ret     nz                              ;               return
 939+ FC2A 78           .x1x2LessThan256:       ld      a,b                             ;       if (y1 > 127  && y2 > 127)
 940+ FC2B CB 7F                                bit     7,a                             ;       . [test if y1 is negative]
 941+ FC2D C2 47 FC                             jp      nz,.y1y2LessThan128             ;       .
 942+ FC30 A7                                   and     a                               ;       . [ if y1 is not negative then if high has any value its > 256]
 943+ FC31 CA 47 FC                             jp      z,.y1y2LessThan128              ;       .
 944+ FC34 CB 79                                bit     7,c                             ;       . [ if y1 low bit 7 is set then its > 127]
 945+ FC36 CA 47 FC                             jp      z,.y1y2LessThan128              ;       .
 946+ FC39 DD 7C                                ld      a,ixh                           ;       . [test if y2 is negative]
 947+ FC3B A7                                   and     a                               ;       .
 948+ FC3C FA 47 FC                             jp      m,.y1y2LessThan128              ;       .
 949+ FC3F A7                                   and     a                               ;       . [ if y2 is not negative then if high has any value its > 256]
 950+ FC40 CA 47 FC                             jp      z,.y1y2LessThan128              ;       .
 951+ FC43 DD 7D                                ld      a,ixl                           ;       .
 952+ FC45 A7                                   and     a                               ;       . [ if y2 low bit 7 is set then its > 127]
 953+ FC46 F8                                   ret     m                               ;               return
 954+ FC47              ;.......................LL115
 955+ FC47              .xx13Not128:                        // check right point
 956+ FC47 EB           .y1y2LessThan128:       ex      de,hl                           ; delta_x = x2 - x1;
 957+ FC48                                      ClearCarryFlag                          ; .
 957+ FC48 B7          >                        or a
 958+ FC49 ED 52                                sbc     hl,de                           ; .
 959+ FC4B 22 53 FB                             ld      (delta_x),hl                    ; redundant as its in DE TODO OPTIMISE
 960+ FC4E EB                                   ex      de,hl                           ; de = delta_x for next bit
 961+ FC4F DD E5 E1     .DyEquY2MinusY1:        ld      hl,ix                           ; delta_y = y2 - y1;
 962+ FC52                                      ClearCarryFlag                          ; .
 962+ FC52 B7          >                        or a
 963+ FC53 ED 42                                sbc     hl,bc                           ; .
 964+ FC55 22 55 FB                             ld      (delta_y),hl                    ; . [ so now de = dx and hl = dy]
 965+ FC58 FD 2E 80                             ld      iyl,128                         ; assuming sign is iyl is positive dx dy
 966+ FC5B CB 7A        .SignDeltaXY:           bit     7,d                             ; if delta x is negative (delta y will always be positive)
 967+ FC5D CA 69 FC                             jp      z,.DeltaXPositive               ; .
 968+ FC60 FD 2E 00     .DeltaXNegative:        ld      iyl,0                           ;       so we set sign to 0
 969+ FC63                                      macronegate16de                         ;       and set delta x to |delta x|
 969+ FC63 AF          >					xor 	a
 969+ FC64 93          >                    sub 	e
 969+ FC65 5F          >                    ld 		e,a
 969+ FC66 9F          >                    sbc 	a,a
 969+ FC67 92          >                    sub 	d
 969+ FC68 57          >                    ld 		d,a
 970+ FC69 ED 53 53 FB  .DeltaXPositive:        ld      (delta_x),de                    ;       .
 971+ FC6D              ;.......................Scale down DY and DY to 7 bit
 972+ FC6D 7C           .ScaleDXDY:             ld      a,h                             ; scale down so that dx and dx are < 256
 973+ FC6E B2                                   or      d                               ; .
 974+ FC6F CA 7D FC                             jp      z,.ScaleDXDYHighDone            ; .
 975+ FC72                                      ShiftDERight1                           ; .
 975+ FC72 CB 3A       >			   srl d
 975+ FC74 CB 1B       >			   rr  e
 976+ FC76                                      ShiftHLRight1                           ; .
 976+ FC76 CB 3C       >			   srl h
 976+ FC78 CB 1D       >			   rr  l
 977+ FC7A C3 6D FC                             jp      .ScaleDXDY                      ; .
 978+ FC7D 7B           .ScaleDXDYHighDone:     ld      a,e                             ; because of signed maths we will scale down to 7 bits to be safe
 979+ FC7E B5                                   or      l                               ; .
 980+ FC7F F2 8A FC                             jp      p,.LowScaleDone                 ; .
 981+ FC82                                      ShiftDERight1                           ; .
 981+ FC82 CB 3A       >			   srl d
 981+ FC84 CB 1B       >			   rr  e
 982+ FC86                                      ShiftHLRight1                           ; .
 982+ FC86 CB 3C       >			   srl h
 982+ FC88 CB 1D       >			   rr  l
 983+ FC8A              ;.......................Work out slope and gradient - later on we will work with deltax beign abs
 984+ FC8A ED 53 53 FB  .LowScaleDone:          ld      (delta_x),de                    ; save adjusted dx and dy back
 985+ FC8E 22 55 FB                             ld      (delta_y),hl                    ; .
 986+ FC91 55                                   ld      d,l                             ; now d = dy e = dx
 987+ FC92 ED 53 57 FB                          ld      (delta_y_x),de                  ; save for diagnostics
 988+ FC96              .SetUpTSlope:           ZeroA                                   ; Initialise tSlope to 0
 988+ FC96 AF          >                        xor a
 989+ FC97 32 61 FB                             ld      (tSlope),a                      ; .
 990+ FC9A 7B                                   ld      a,e                             ; a = dx
 991+ FC9B                                      JumpIfAGTENusng d, .deltaxGTEdeltaY     ; if dx < dy
 991+ FC9B BA          >                        cp     d
 991+ FC9C D2 AF FC    >                        jp		nc,.deltaxGTEdeltaY
 992+ FC9F 43           .deltaXLTdeltaY:        ld      b,e                             ;       bc = dx $00
 993+ FCA0 0E 00                                ld      c,0                             ;       .
 994+ FCA2 5A                                   ld      e,d                             ;       de = $00 dy
 995+ FCA3 16 00                                ld      d,0                             ;       .
 996+ FCA5 CD 87 98                             call    Floor_DivQ                      ;       bc = bc / de  (dx * 256 / dy)
 997+ FCA8 ED 43 5F FB                          ld      (gradient),bc                   ;       in reality this is 8 bit little endian
 998+ FCAC C3 C0 FC                             jp      .donedxdycheck                  ;       .
 999+ FCAF                                                                              ; else
1000+ FCAF 42           .deltaxGTEdeltaY:       ld      b,d                             ;       bc = dy << 0
1001+ FCB0 0E 00                                ld      c,0                             ;       .
1002+ FCB2 16 00                                ld      d,0                             ;       de = 0dx
1003+ FCB4 CD 87 98                             call    Floor_DivQ                      ;       bc = bc / de (dy * 256 / dx)
1004+ FCB7 ED 43 5F FB                          ld      (gradient),bc                   ;       in reality this is 8 bit little endian
1005+ FCBB 3E FF                                ld      a,255                           ;       set tslope to -1
1006+ FCBD 32 61 FB                             ld      (tSlope),a                      ;       .
1007+ FCC0              .donedxdycheck:                 // CHECK CORRECT POINT
1008+ FCC0              ;.......................Clipping point 1
1009+ FCC0                                      ;break
1010+ FCC0 FD 7C                                ld      a,iyh                           ; if xx13 = 0 or xx13 = 128 (values can be 0, 128, 64 later we can optimise to see if its <> 64)
1011+ FCC2 A7                                   and     a                               ; . [xx13 = 0  enter the block]
1012+ FCC3 CA C9 FC                             jp      z,.xx13is0or128                 ; .
1013+ FCC6 F2 E7 FC                             jp      p,.xx13not0or128                ; . [xx13 <> 128 then skip block]
1014+ FCC9 CD 01 FD     .xx13is0or128:          call    ClipLL118Elite                  ;       clip point 1
1015+ FCCC FD 7C                                ld      a,iyh                           ;       if xx13 <> 0
1016+ FCCE A7                                   and     a                               ;       .
1017+ FCCF CA E6 FC                             jp      z,.ImmediateDraw                ;       .
1018+ FCD2 3A 2A FB                             ld      a,(x1+1)                        ;               if (if (x1 <0 || x1 > 255 || y1 <0 || y1 > 127)) return
1019+ FCD5 A7                                   and     a                               ;               .
1020+ FCD6 F8                                   ret     m                               ;               . [x1 high is negative then return]
1021+ FCD7 C0                                   ret     nz                              ;               . [if x1 high is not zero, x1 > 255 return (above will have sorted negative test on bit 7)]
1022+ FCD8 3A 2C FB                             ld      a,(y1+1)                        ;               . [a = x1 high]
1023+ FCDB A7                                   and     a                               ;               .
1024+ FCDC F8                                   ret     m                               ;               . [if y1 negative return]
1025+ FCDD C0                                   ret     nz                              ;               . [if y1 > 255 return (above will have sorted negative test on bit 7)]
1026+ FCDE 3A 2B FB                             ld      a,(y1)                          ;               . [a = y1 low]
1027+ FCE1 A7                                   and     a                               ;               .
1028+ FCE2 F8                                   ret     m                               ;               . [if y1 > 127 then low byte would appear as negative in bit 7]
1029+ FCE3 C3 E7 FC                             jp      .SkipCheckP1OnScreen            ;               else goto SkipCheckP1OnScreen
1030+ FCE6              .ImmediateDraw:         IFDEF SPLITORLINEX
1031+ FCE6 ~                                    call    l2_draw_clipped_line            ;        else if we get here we only needed to clip one point so draw the line
1032+ FCE6                                      ENDIF
1033+ FCE6 C9                                   ret                                     ;             and we are done
1034+ FCE7              .xx13not0or128:
1035+ FCE7 CD 6A FB     .SkipCheckP1OnScreen:   call    SwapCoords                      ; swap point 1 and point 2 so we can now process P2
1036+ FCEA CD 01 FD                             call    ClipLL118Elite                  ; clip P2
1037+ FCED 3A 2A FB                             ld      a,(x1+1)                        ; if (x1 <0 || x1 > 255 || y1 <0 || y1 > 127) return
1038+ FCF0 A7                                   and     a                               ; .
1039+ FCF1 F8                                   ret     m                               ; . [if x1 negative return]
1040+ FCF2 C0                                   ret     nz                              ; . [if x1 > 255 return (above will have sorted negative test on bit 7)]
1041+ FCF3 3A 2C FB                             ld      a,(y1+1)                        ; . [a = y1 high]
1042+ FCF6 A7                                   and     a                               ;
1043+ FCF7 F8                                   ret     m                               ; . [if y1 negative return]
1044+ FCF8 C0                                   ret     nz                              ; . [if y1 > 255 return (above will have sorted negative test on bit 7)]
1045+ FCF9 3A 2B FB                             ld      a,(y1)                          ; . [a = y1 low]
1046+ FCFC A7                                   and     a                               ; .
1047+ FCFD F8                                   ret     m                               ; . [if y1 low > 127 then low byte would appear as negative in bit 7]
1048+ FCFE              .ClipComplete:
1049+ FCFE              .xx13is0or128Draw:      IFDEF SPLITORLINEX
1050+ FCFE ~                                    call    l2_draw_clipped_line            ; if we get here we only needed to clip one point/have done all slipping needed
1051+ FCFE                                      ENDIF
1052+ FCFE C9                                   ret
1053+ FCFF              ;................................................................
1054+ FCFF 00 00        ClipSign                dw      0
1055+ FD01              ClipLL118Elite:        ;break
1056+ FD01 2A 29 FB     .checkX1IsNegative      ld      hl,(x1)                         ; if x1 is negative
1057+ FD04 CB 7C                                bit     7,h                             ; .
1058+ FD06 CA 25 FD                             jp      z,.x1GTE0                       ; .
1059+ FD09 3E FF        .x1LT0:                 ld      a,255                           ;       clip sign = -1
1060+ FD0B 32 FF FC                             ld      (ClipSign),a                    ;       .
1061+ FD0E CD 8D FD                             call    CalcLL120                       ;       calc ll120
1062+ FD11 21 00 00                             ld      hl,0                            ;       x1 = 0
1063+ FD14 22 29 FB                             ld      (x1),hl                         ;       .
1064+ FD17 2A 2B FB                             ld      hl,(y1)                         ;       y1 = y1 + result
1065+ FD1A ED 5B C5 FB                          ld      de,(result)                     ;       . [and save in hl for optimisation processing y1]
1066+ FD1E 19                                   add     hl,de                           ;       .
1067+ FD1F 22 2B FB                             ld      (y1),hl                         ;       .
1068+ FD22 C3 42 FD                             jp      .checkY1IsNegative              ;       .
1069+ FD25 7C           .x1GTE0:                ld      a,h                             ; else
1070+ FD26 A7                                   and     a                               ;       if x1 > 255
1071+ FD27 CA 42 FD                             jp      z,.checkY1IsNegative            ;       .
1072+ FD2A                                      ZeroA                                   ;               sign must be 0 for postive adjustment
1072+ FD2A AF          >                        xor a
1073+ FD2B 32 FF FC                             ld      (ClipSign),a                    ;               .
1074+ FD2E CD 8D FD                             call    CalcLL120                       ;               Calc LL120
1075+ FD31 21 FF 00                             ld      hl,255                          ;               x1 = 255
1076+ FD34 22 29 FB                             ld      (x1),hl                         ;               .
1077+ FD37 2A 2B FB                             ld      hl,(y1)                         ;               y1 = y1 + result
1078+ FD3A ED 5B C5 FB                          ld      de,(result)                     ;               . [and save in hl for optimisation processing y1]
1079+ FD3E 19                                   add     hl,de                           ;               .
1080+ FD3F 22 2B FB                             ld      (y1),hl                         ;               .
1081+ FD42                                                                              ; end if
1082+ FD42 2A 2B FB     .checkY1IsNegative:     ld      hl,(y1)                         ; if (y1 <0) [if we don;t need to clip x1 then we need to load hl with y1 as it never got loaded]
1083+ FD45 CB 7C                                bit     7,h                             ; .
1084+ FD47 CA 63 FD                             jp      z,.checkY1LT128                 ; .
1085+ FD4A 3E FF                                ld      a,255                           ;       set sign to -1 for calc
1086+ FD4C 32 FF FC                             ld      (ClipSign),a                    ;       .
1087+ FD4F CD DA FD                             call    CalcLL123                       ;       calc LL123
1088+ FD52 2A 29 FB                             ld      hl,(x1)                         ;       x1 = x1 + result
1089+ FD55 ED 5B C5 FB                          ld      de,(result)                     ;       .
1090+ FD59 19                                   add     hl,de                           ;       .
1091+ FD5A 22 29 FB                             ld      (x1),hl                         ;       .
1092+ FD5D 21 00 00                             ld      hl,0                            ;       y1 = 0
1093+ FD60 22 2B FB                             ld      (y1),hl                         ;       .
1094+ FD63 7C           .checkY1LT128:          ld      a,h                             ; finished if y < 128
1095+ FD64 A7                                   and     a                               ; .
1096+ FD65 C2 6B FD                             jp      nz,.mopUpY1                     ; . [jump to mop up if y1 high <> 0, wehave already dealt with negatvies so don't need to consider that]
1097+ FD68 7D                                   ld      a,l                             ; . [now check y1 low and return if y1 low > 127]
1098+ FD69 A7                                   and     a                               ; .
1099+ FD6A F0                                   ret     p                               ; . [ if y1 low was positive then we are done as it means y1 < 128]
1100+ FD6B 11 80 00     .mopUpY1:               ld      de,128                          ; y1 = y1 - 128
1101+ FD6E                                      ClearCarryFlag                          ; .
1101+ FD6E B7          >                        or a
1102+ FD6F ED 52                                sbc     hl,de                           ; .
1103+ FD71 22 2B FB                             ld      (y1),hl                         ; .
1104+ FD74                                      ZeroA                                   ; set clip sign to 0
1104+ FD74 AF          >                        xor a
1105+ FD75 32 FF FC                             ld      (ClipSign),a                    ; to get to here if y1 < 0, y is set to 0, if its < 128 then it never reaches here, so y1 must be > 128 to get here
1106+ FD78 CD DA FD                             call    CalcLL123                       ; calc LL123
1107+ FD7B 2A 29 FB                             ld      hl,(x1)                         ; x1 = x1 + result
1108+ FD7E ED 5B C5 FB                          ld      de,(result)                     ; .
1109+ FD82 19                                   add     hl,de                           ; .
1110+ FD83 22 29 FB                             ld      (x1),hl                         ; .
1111+ FD86 21 7F 00                             ld      hl,127                          ; y1 = 127
1112+ FD89 22 2B FB                             ld      (y1),hl                         ; .
1113+ FD8C C9                                   ret
1114+ FD8D
1115+ FD8D 2A 29 FB     CalcLL120:              ld      hl,(x1)                         ; x1= |x1|
1116+ FD90                                      macroAbsHL                              ; .
1116+ FD90 CB 7C       >                    bit     7,h
1116+ FD92 CA 9B FD    >                    jp      z,.alreadyABS
1116+ FD95 AF          >					xor 	a
1116+ FD96 95          >					sub 	l
1116+ FD97 6F          >					ld 		l,a
1116+ FD98 9F          >					sbc 	a,a
1116+ FD99 94          >					sub 	h
1116+ FD9A 67          >					ld 		h,a
1116+ FD9B             >.alreadyABS:
1117+ FD9B 3A 61 FB                             ld      a,(tSlope)                      ; if (tslope == 0)
1118+ FD9E A7                                   and     a                               ; .
1119+ FD9F C2 BE FD                             jp      nz,.tSlopeNonZero               ; .
1120+ FDA2 55           .tSlopeZero:            ld      d,l                             ;       d = x1 & 255
1121+ FDA3 3A 5F FB                             ld      a,(gradient)                    ;       e = gradient
1122+ FDA6 5F                                   ld      e,a                             ;
1123+ FDA7 ED 30                                mul     de                              ;       de = x1 & 255 * gradient
1124+ FDA9 5A                                   ld      e,d                             ;       de = x1 * gradient /256
1125+ FDAA 16 00                                ld      d,0                             ;       .
1126+ FDAC 3A FF FC                             ld      a,(ClipSign)                    ;       if clipsign != 0
1127+ FDAF A7                                   and     a                               ;       .
1128+ FDB0 CA B9 FD                             jp      z,.tSlopeZeroDone               ;       .
1129+ FDB3              .tSlopeZeroNegate:      macronegate16de                         ;               result = - result
1129+ FDB3 AF          >					xor 	a
1129+ FDB4 93          >                    sub 	e
1129+ FDB5 5F          >                    ld 		e,a
1129+ FDB6 9F          >                    sbc 	a,a
1129+ FDB7 92          >                    sub 	d
1129+ FDB8 57          >                    ld 		d,a
1130+ FDB9 ED 53 C5 FB  .tSlopeZeroDone:        ld      (result),de                     ;
1131+ FDBD C9                                   ret                                     ;
1132+ FDBE              .tSlopeNonZero:         ;ld      a,(gradient)                    ; else  c = gradient
1133+ FDBE                                      ;ld      c,a                             ;       .
1134+ FDBE                                      ;ld      a,l                             ;       a = x1 & 255
1135+ FDBE                                      ;call    DIV16Amul256dCUNDOC             ;       bc = a * 256/c
1136+ FDBE
1137+ FDBE ED 5B 5F FB                          ld      de,(gradient)                   ; BC = BC / DE
1138+ FDC2 45                                   ld      b,l
1139+ FDC3 0E 00                                ld      c,0
1140+ FDC5                                      ;; CORRECTED TO LADO INTO B ld      bc,hl                           ; HL = BC % DE
1141+ FDC5 CD 87 98                             call    Floor_DivQ
1142+ FDC8
1143+ FDC8 3A FF FC                             ld      a,(ClipSign)                    ;       if clipsign != 0
1144+ FDCB A7                                   and     a                               ;       .
1145+ FDCC CA D5 FD                             jp      z,.tSlopeNonZeroDone            ;       .
1146+ FDCF              .tSlopeNonZeroNegate:   macronegate16bc                         ;               result = - result
1146+ FDCF AF          >					xor 	a
1146+ FDD0 91          >                    sub 	c
1146+ FDD1 4F          >                    ld 		c,a
1146+ FDD2 9F          >                    sbc 	a,a
1146+ FDD3 90          >                    sub 	b
1146+ FDD4 47          >                    ld 		b,a
1147+ FDD5 ED 43 C5 FB  .tSlopeNonZeroDone:     ld      (result),bc
1148+ FDD9 C9                                   ret
1149+ FDDA              ;.......................LL123
1150+ FDDA              CalcLL123:              ;break
1151+ FDDA 2A 2B FB                             ld      hl,(y1)                         ; hl = |y1|
1152+ FDDD                                      macroAbsHL                              ; .
1152+ FDDD CB 7C       >                    bit     7,h
1152+ FDDF CA E8 FD    >                    jp      z,.alreadyABS
1152+ FDE2 AF          >					xor 	a
1152+ FDE3 95          >					sub 	l
1152+ FDE4 6F          >					ld 		l,a
1152+ FDE5 9F          >					sbc 	a,a
1152+ FDE6 94          >					sub 	h
1152+ FDE7 67          >					ld 		h,a
1152+ FDE8             >.alreadyABS:
1153+ FDE8 3A 61 FB                             ld      a,(tSlope)                      ; if tSlope = 0
1154+ FDEB A7                                   and     a                               ; .
1155+ FDEC C2 0A FE                             jp      nz,.tSlopeNonZero               ; .
1156+ FDEF              .tSlopeZero:           ; ld      a,(gradient)                    ;       c = gradient
1157+ FDEF              ;                        ld      c,a                             ;       .
1158+ FDEF              ;                        ld      a,l                             ;       hl = y1 (which is now abs and < 256)
1159+ FDEF              ;                        call    DIV16Amul256dCUNDOC             ;       bc = A * 256 / c
1160+ FDEF ED 5B 5F FB                          ld      de,(gradient)                   ; BC = BC / DE
1161+ FDF3 44 4D                                ld      bc,hl                           ; HL = BC % DE
1162+ FDF5 CD 87 98                             call    Floor_DivQ
1163+ FDF8 3A FF FC                             ld      a,(ClipSign)                    ;       if clipsign != 0
1164+ FDFB A7                                   and     a                               ;       .
1165+ FDFC CA 05 FE                             jp      z, .tSlopeZeroDone              ;       .
1166+ FDFF              .tSlopeZeroNegate:      macronegate16bc                         ;               result = -result
1166+ FDFF AF          >					xor 	a
1166+ FE00 91          >                    sub 	c
1166+ FE01 4F          >                    ld 		c,a
1166+ FE02 9F          >                    sbc 	a,a
1166+ FE03 90          >                    sub 	b
1166+ FE04 47          >                    ld 		b,a
1167+ FE05 ED 43 C5 FB  .tSlopeZeroDone:        ld      (result),bc                     ;       . save result in either case
1168+ FE09 C9                                   ret                                     ;       .
1169+ FE0A 55           .tSlopeNonZero:         ld      d,l                             ; else  d = |y1| low
1170+ FE0B 3A 5F FB                             ld      a,(gradient)                    ;       e = gradient
1171+ FE0E 5F                                   ld      e,a                             ;       .
1172+ FE0F ED 30                                mul     de                              ;       de = l * gradient
1173+ FE11 5A                                   ld      e,d                             ;       de = l * gradient /256
1174+ FE12 16 00                                ld      d,0                             ;       .
1175+ FE14 3A FF FC                             ld      a,(ClipSign)                    ;       if clipsign != 0
1176+ FE17 A7                                   and     a                               ;
1177+ FE18 CA 21 FE                             jp      z,.tSlopeNonZeroDone            ;
1178+ FE1B              .tSlopeNonZeroNegate:   macronegate16de                         ;               result = -result
1178+ FE1B AF          >					xor 	a
1178+ FE1C 93          >                    sub 	e
1178+ FE1D 5F          >                    ld 		e,a
1178+ FE1E 9F          >                    sbc 	a,a
1178+ FE1F 92          >                    sub 	d
1178+ FE20 57          >                    ld 		d,a
1179+ FE21 ED 53 C5 FB  .tSlopeNonZeroDone:     ld      (result),de                     ;       . save result in either case
1180+ FE25 C9                                   ret                                     ;       .
1181+ FE26
# file closed: ./Layer2Graphics/l2_draw_any_line.asm
 809  FE26              ;    INCLUDE "./Layer2Graphics/clearLines-LL155.asm"
 810  FE26                  INCLUDE "./Layer2Graphics/l2_draw_line_v2.asm"
# file opened: ./Layer2Graphics/l2_draw_line_v2.asm
   1+ FE26              ; ******************************************************************************
   2+ FE26              ;
   3+ FE26              ;	Draw a pixel line from (x0,y0) defined in (COORDS) - the current plot
   4+ FE26              ;	coordinate, to the relative distance points (x0+x,y0+y).
   5+ FE26              ;
   6+ FE26              ;	Design & programming by Gunther Strube,	Copyright (C) InterLogic 1995
   7+ FE26              ;
   8+ FE26              ;	The (COORDS+0)	pointer contains the current y coordinate, (COORDS+1) the
   9+ FE26              ;	current x coordinate. The main program should reset the (COORDS) variables
  10+ FE26              ;	before using line drawing.
  11+ FE26              ;
  12+ FE26              ;	The routine checks the range of specified coordinates which is the
  13+ FE26              ;	boundaries of the graphics area (256x64	pixels).
  14+ FE26              ;	If a boundary error occurs the routine exits automatically.	This may be
  15+ FE26              ;	useful if you are trying to draw a line longer than allowed. Only the
  16+ FE26              ;	visible part will be drawn.
  17+ FE26              ;
  18+ FE26              ;	The hardware graphics memory is organized as (0,0) in the top left corner.
  19+ FE26              ;
  20+ FE26              ;	The plot routine is	defined by an address pointer	in IX.
  21+ FE26              ;
  22+ FE26              ;	IN:	HL =	move	relative x horisontal points (maximum +/- 255).
  23+ FE26              ;		DE =	move	relative y vertical	points (maximum +/-	255).
  24+ FE26              ;		IX =	pointer to plot routine that uses HL = (x,y)	of plot coordinate.
  25+ FE26              ;
  26+ FE26              ;	OUT:	None.
  27+ FE26              ;
  28+ FE26              ;	Registers	used	by routine:
  29+ FE26              ;		   N	:	B, loop counter
  30+ FE26              ;		   i	:	line	balance variable
  31+ FE26              ;		   x	:	H/L,	horisontal, vertical distance	variables
  32+ FE26              ;		   y	:	H/L,	horisontal, vertical distance	variables
  33+ FE26              ;	  (x0,y0)	:	(h,l)
  34+ FE26              ;	  direc_x	:	d, horisontal step increment
  35+ FE26              ;	  direc_y	:	e, vertical step increment
  36+ FE26              ;		 ddx	:	b, horisontal step increment
  37+ FE26              ;		 ddy	:	c, vertical step increment
  38+ FE26              ;
  39+ FE26              ;		DE, A work registers.
  40+ FE26              ;
  41+ FE26              ; The algorithm in pseudo-code:
  42+ FE26              ;
  43+ FE26              ;	direc_x =	SGN x: direc_y	= SGN y
  44+ FE26              ;	x = ABS x: y =	ABS y
  45+ FE26              ;
  46+ FE26              ;	if x	>= y
  47+ FE26              ;		if x+y=0 then return
  48+ FE26              ;		H = x
  49+ FE26              ;		L = y
  50+ FE26              ;		ddx = direc_x
  51+ FE26              ;		ddy = 0
  52+ FE26              ;	else
  53+ FE26              ;		H = y
  54+ FE26              ;		L = x
  55+ FE26              ;		ddx = 0
  56+ FE26              ;		ddy = direc_y
  57+ FE26              ;	endif
  58+ FE26              ;
  59+ FE26              ;	B = H
  60+ FE26              ;	i = INT(B/2)
  61+ FE26              ;	FOR N=B TO 1 STEP -1
  62+ FE26              ;		i = i + L
  63+ FE26              ;		if i	< H
  64+ FE26              ;			ix =	ddx
  65+ FE26              ;			iy =	ddy
  66+ FE26              ;		else
  67+ FE26              ;			i = i - H
  68+ FE26              ;			ix =	direc_x
  69+ FE26              ;			iy =	direc_y
  70+ FE26              ;		endif
  71+ FE26              ;		x0 =	x0 +	ix
  72+ FE26              ;		y0 =	y0 +	iy
  73+ FE26              ;		plot	(x0,y0)
  74+ FE26              ;	NEXT	N
  75+ FE26              ;
  76+ FE26              ;
  77+ FE26              ;	Registers	changed after return:
  78+ FE26              ;		..BCDEHL/IXIY/af......	same
  79+ FE26              ;		AF....../..../..bcdehl	different
  80+ FE26              ;
  81+ FE26 00 00        line_gfx_coords         dw  0
  82+ FE28
  83+ FE28              LineHLtoDE:
  84+ FE28 7C           TestMaxY:               ld	a,h ; were h = y or l = y?
  85+ FE29 FE C0                                cp	192
  86+ FE2B 30 26                                jr	nc, exit_line		; y0	coordinate out	of range
  87+ FE2D 7A                                   ld	a,d
  88+ FE2E FE C0                                cp	192
  89+ FE30 30 21                                jr	nc, exit_line		; y1	coordinate out	of range
  90+ FE32 22 26 FE                             ld	(line_gfx_coords),hl		; the starting	point is now default
  91+ FE35 E5                                   push	hl
  92+ FE36 D5                                   push	de
  93+ FE37 6C                                   ld	l,h				; L = x0
  94+ FE38 62                                   ld	h,d				; H = x1
  95+ FE39 7C           distanceX:		        ld	a,h
  96+ FE3A 95                                   sub	l
  97+ FE3B 6F                                   ld	l,a
  98+ FE3C 26 00                                ld	h,0
  99+ FE3E 30 02                                jr	nc, distanceXDone
 100+ FE40 26 FF                                ld	h,-1
 101+ FE42 D1           distanceXDone:          pop	de
 102+ FE43 E3                                   ex	(sp),hl			; L = y0
 103+ FE44 63                                   ld	h,e				; H = y1
 104+ FE45 7C           distanceY:		        ld	a,h
 105+ FE46 95                                   sub	l
 106+ FE47 6F                                   ld	l,a
 107+ FE48 26 00                                ld	h,0
 108+ FE4A 30 02                                jr	nc, distanceYDone
 109+ FE4C 26 FF                                ld	h,-1
 110+ FE4E D1           distanceYDone:          pop	de
 111+ FE4F EB                                   ex	de,hl			; h.dist.	= HL, v.dist. = DE
 112+ FE50 CD 54 FE                             call	DrawLineRelative			; draw line...
 113+ FE53 C9           exit_line:              ret
 114+ FE54
 115+ FE54              ; ***************************************************************************
 116+ FE54              ;
 117+ FE54              ;	IN:	HL =	move	relative x horisontal points (maximum +/- 255).
 118+ FE54              ;		DE =	move	relative y vertical	points (maximum +/-	255).
 119+ FE54              ;
 120+ FE54              ; OUT: h - l distance in	HL
 121+ FE54              ;
 122+ FE54
 123+ FE54 D5           DrawLineRelative:       push	de
 124+ FE55 E5                                   push	hl
 125+ FE56 D9                                   exx
 126+ FE57 E1                                   pop	hl					; get relative	horisontal movement
 127+ FE58 CD CF FE                             call	sgn
 128+ FE5B 57                                   ld	d,a					; direc_x	= SGN(x) installed d = +/-1 for horizontal update
 129+ FE5C CD DC FE                             call	absValue
 130+ FE5F 45                                   ld	b,l					; x = ABS(x)
 131+ FE60 E1           DrawLineGetVertRelative:pop	hl					; get relative	vertical movement
 132+ FE61 CD CF FE                             call	sgn
 133+ FE64 5F                                   ld	e,a					; direc_y	= SGN(y) installed  = +/-1 for vertical update
 134+ FE65 CD DC FE                             call	absValue
 135+ FE68 4D                                   ld	c,l					; y = ABS(y) so now bc = dxdy
 136+ FE69              ; so by here BC = dx dy HL in increment/decrement x y
 137+ FE69 C5                                   push	bc
 138+ FE6A D9                                   exx
 139+ FE6B E1                                   pop	hl					; H = absolute	x dist., L = absolute y distance
 140+ FE6C 7C                                   ld	a,h
 141+ FE6D BD                                   cp	l
 142+ FE6E 38 0A                                jr	c, x_smaller_y		; if	x >=	y
 143+ FE70 B4           areXandYZero:           or	h					;	if x+y = 0
 144+ FE71 28 5B                                jr	z, exit_draw		;		return
 145+ FE73 D9           y_lessorequal_x:        exx						;	else
 146+ FE74 42                                   ld	b,d					;		ddx = direc_x
 147+ FE75 0E 00                                ld	c,0					;		ddy = 0
 148+ FE77 D9                                   exx
 149+ FE78 18 08                                jr	init_drawloop		; else
 150+ FE7A 7C           x_smaller_y:	        ld	a,h
 151+ FE7B 65                                   ld	h,l					;	H = y
 152+ FE7C 6F                                   ld	l,a					;	L = x
 153+ FE7D D9                                   exx
 154+ FE7E 06 00                                ld	b,0					;	ddx = 0
 155+ FE80 4B                                   ld	c,e					;	ddy = direc_y
 156+ FE81 D9                                   exx
 157+ FE82 44           init_drawloop:	        ld	b,h
 158+ FE83 4C                                   ld	c,h					; B = H
 159+ FE84 CB 39                                srl	c					; i = INT(B/2)
 160+ FE86              										; FOR N=B	TO 1	STEP	-1
 161+ FE86 79           drawloop:		        ld	a,c
 162+ FE87 85                                   add	a,l
 163+ FE88 38 09                                jr	c, i_greater		;	i + L > 255  (i > H)
 164+ FE8A BC                                   cp	h
 165+ FE8B 30 06                                jr	nc, i_greater		;	if i	< H
 166+ FE8D 4F                                   ld	c,a					;		i = i + L
 167+ FE8E D9                                   exx
 168+ FE8F C5                                   push	bc				;		ix =	ddx:	iy =	ddy
 169+ FE90 D9                                   exx
 170+ FE91 18 05                                jr	check_plot			;	else
 171+ FE93 94           i_greater:		        sub	h					;		i = i - H
 172+ FE94 4F                                   ld	c,a
 173+ FE95 D9                                   exx
 174+ FE96 D5                                   push	de				;		ix =	direc_x: iy = direc_y
 175+ FE97 D9                                   exx						;	endif
 176+ FE98 E3           check_plot:		        ex	(sp),hl				;	preserve H,L distances on stack
 177+ FE99 EB                                   ex	de,hl				;	D,E = ix,	iy
 178+ FE9A 2A 26 FE                             ld	hl,(line_gfx_coords)
 179+ FE9D 7D                                   ld	a,l
 180+ FE9E 83                                   add	a,e					;
 181+ FE9F 6F                                   ld	l,a					;	y0 =	y0 +	iy (y0 is	checked by plot)
 182+ FEA0 7A                                   ld	a,d
 183+ FEA1 3C                                   inc	a
 184+ FEA2 84                                   add	a,h
 185+ FEA3 38 04                                jr	c, check_range		;	check out	of range
 186+ FEA5 28 26                                jr	z, range_error		;	Fz=1	& Fc=0 denotes	x0 <	0
 187+ FEA7 18 02                                jr	plot_point
 188+ FEA9 20 22        check_range:            jr	nz, range_error	;	Fz=0	& Fc=1 denotes	x0 >	255
 189+ FEAB
 190+ FEAB 3D           plot_point:             dec	a
 191+ FEAC C5                                   push	bc
 192+ FEAD F5                                   push	af
 193+ FEAE 47                                   ld	    b,a					;	x0 =	x0 +	ix
 194+ FEAF 4D                                   ld		c,l
 195+ FEB0 3A 22 E4                             ld		a,(line_gfx_colour)
 196+ FEB3 ED 43 26 FE                          ld      (line_gfx_coords),bc
 197+ FEB7                                      l2_plot_macro; call	l2_plot_pixel:
 197+ FEB7 78          >                        ld      a,b
 197+ FEB8             >                        JumpIfAGTENusng 192 ,.NoPlot
 197+ FEB8 FE C0       >                        cp     192
 197+ FEBA D2 C6 FE    >                        jp		nc,.NoPlot
 197+ FEBD 69          >                        ld      l,c
 197+ FEBE CD 78 E0    >                        call    asm_l2_row_bank_select
 197+ FEC1 67          >                        ld      h,a
 197+ FEC2 3A 22 E4    >                        ld      a,(line_gfx_colour)
 197+ FEC5 77          >                        ld      (hl),a
 197+ FEC6             >.NoPlot:
 198+ FEC6 F1                                   pop		af
 199+ FEC7 C1                                   pop		bc
 200+ FEC8 E1           plot_RET:		        pop	hl					;	restore H,L distances...
 201+ FEC9 10 BB                                djnz	drawloop		; NEXT N
 202+ FECB 18 01                                jr	exit_draw
 203+ FECD
 204+ FECD E1           range_error:	        pop	hl					; remove H,L distances...
 205+ FECE C9           exit_draw:		        ret
 206+ FECF
 207+ FECF
 208+ FECF              ; ******************************************************************************
 209+ FECF              ;
 210+ FECF              ;	SGN (Signum value) of 16	bit signed integer.
 211+ FECF              ;
 212+ FECF              ;	IN:		HL =	integer
 213+ FECF              ;	OUT:		A = result: 0,1,-1 (if zero, positive, negative)
 214+ FECF              ;
 215+ FECF              ;	Registers	changed after return:
 216+ FECF              ;	..BCDEHL/IXIY	same
 217+ FECF              ;	AF....../....	different
 218+ FECF              ;
 219+ FECF 7C           sgn:				    ld	a,h
 220+ FED0 B5                                   or	l
 221+ FED1 C8                                   ret	z				; integer	is zero, return 0...
 222+ FED2 CB 7C                                bit	7,h
 223+ FED4 20 03                                jr	nz, negative_int
 224+ FED6 3E 01                                ld	a,1
 225+ FED8 C9                                   ret
 226+ FED9 3E FF        negative_int:		    ld	a,-1
 227+ FEDB C9                                   ret
 228+ FEDC
 229+ FEDC
 230+ FEDC              ; ******************************************************************************
 231+ FEDC              ;
 232+ FEDC              ;	ABS (Absolute value) of 16 bit signed integer.
 233+ FEDC              ;
 234+ FEDC              ;	IN:		HL =	integer
 235+ FEDC              ;	OUT:		HL =	converted	integer
 236+ FEDC              ;
 237+ FEDC              ;	Registers	changed after return:
 238+ FEDC              ;	A.BCDE../IXIY	same
 239+ FEDC              ;	.F....HL/....	different
 240+ FEDC              ;
 241+ FEDC CB 7C        absValue:			    bit	7,h
 242+ FEDE C8                                   ret	z				; integer	is positive...
 243+ FEDF D5                                   push	de
 244+ FEE0 EB                                   ex	de,hl
 245+ FEE1 21 00 00                             ld	hl,0
 246+ FEE4 BF                                   cp	a				; Fc	= 0,	may not be used...
 247+ FEE5 ED 52                                sbc	hl,de			; convert	negative integer
 248+ FEE7 D1                                   pop	de
 249+ FEE8 C9                                   ret
 250+ FEE9
# file closed: ./Layer2Graphics/l2_draw_line_v2.asm
 811  FEE9                  DISPLAY "Bank ",BankLAYER2," - Bytes free ",/D, $2000 - ($-LAYER2Addr), " - BankLAYER2"
 812  FEE9              ; Bank 58  ------------------------------------------------------------------------------------------------------------------------
 813  FEE9                  SLOT    LAYER1Addr
 814  FEE9                  PAGE    BankLAYER1
 815  FEE9                  ORG     LAYER1Addr, BankLAYER1
 816  E000 42 61 6E 6B  Layer1Header:  DB "Bank L1 Utils--"
 816  E004 20 4C 31 20
 816  E008 55 74 69 6C
 816  E00C 73 2D 2D
 817  E00F
 818  E00F                  INCLUDE "./Layer1Graphics/layer1_attr_utils.asm"
# file opened: ./Layer1Graphics/layer1_attr_utils.asm
   1+ E00F
   2+ E00F 00 58        L1AttrRow00:            DW $5800                    ;Row 1    */
   3+ E011 20 58        L1AttrRow01:            DW $5820                    ;Row 2    */
   4+ E013 40 58        L1AttrRow02:            DW $5840                    ;Row 3    */
   5+ E015 60 58        L1AttrRow03:            DW $5860                    ;Row 4    */
   6+ E017 80 58        L1AttrRow04:            DW $5880                    ;Row 5    */
   7+ E019 A0 58        L1AttrRow05:            DW $58A0                    ;Row 6    */
   8+ E01B C0 58        L1AttrRow06:            DW $58C0                    ;Row 7    */
   9+ E01D E0 58        L1AttrRow07:            DW $58E0                    ;Row 8    */
  10+ E01F 00 59        L1AttrRow08:            DW $5900                    ;Row 9    */
  11+ E021 20 59        L1AttrRow09:            DW $5920                    ;Row 10   */
  12+ E023 40 59        L1AttrRow10:            DW $5940                    ;Row 11   */
  13+ E025 60 59        L1AttrRow11:            DW $5960                    ;Row 12   */
  14+ E027 80 59        L1AttrRow12:            DW $5980                    ;Row 13   */
  15+ E029 A0 59        L1AttrRow13:            DW $59A0                    ;Row 14   */
  16+ E02B C0 59        L1AttrRow14:            DW $59C0                    ;Row 15   */
  17+ E02D E0 59        L1AttrRow15:            DW $59E0                    ;Row 16   */
  18+ E02F 00 5A        L1AttrRow16:            DW $5A00                    ;Row 17   */
  19+ E031 20 5A        L1AttrRow17:            DW $5A20                    ;Row 18   */
  20+ E033 40 5A        L1AttrRow18:            DW $5A40                    ;Row 19   */
  21+ E035 60 5A        L1AttrRow19:            DW $5A60                    ;Row 20   */
  22+ E037 80 5A        L1AttrRow20:            DW $5A80                    ;Row 21   */
  23+ E039 A0 5A        L1AttrRow21:            DW $5AA0                    ;Row 22   */
  24+ E03B C0 5A        L1AttrRow22:            DW $5AC0                    ;Row 23   */
  25+ E03D E0 5A        L1AttrRow23:            DW $5AE0                    ;Row 23   */
  26+ E03F
  27+ E03F              ; "l2_hilight_row, d = row, e = colour"
  28+ E03F 21 0F E0     l1_hilight_row:         ld      hl, L1AttrRow00
  29+ E042 4B                                   ld      c,e
  30+ E043 7A                                   ld      a,d
  31+ E044 CB 27                                sla     a
  32+ E046 ED 31                                add     hl,a
  33+ E048 7E                                   ld      a,(hl)
  34+ E049 5F                                   ld      e,a
  35+ E04A 23                                   inc     hl
  36+ E04B 7E                                   ld      a,(hl)
  37+ E04C 57                                   ld      d,a
  38+ E04D EB                                   ex      hl,de
  39+ E04E 79                                   ld		a,c
  40+ E04F 11 20 00                             ld		de, 32
  41+ E052 CD 32 7E                             call	memfill_dma
  42+ E055 C9                                   ret
  43+ E056
# file closed: ./Layer1Graphics/layer1_attr_utils.asm
 819  E056                  INCLUDE "./Layer1Graphics/layer1_cls.asm"
# file opened: ./Layer1Graphics/layer1_cls.asm
   1+ E056 AF           l1_cls_top:             xor     a
   2+ E057 21 00 40                             ld      hl, $4000
   3+ E05A 11 00 08                             ld      de, $0800
   4+ E05D CD 32 7E                             call    memfill_dma
   5+ E060 C9                                   ret
   6+ E061
   7+ E061 AF           l1_cls_mid:             xor     a
   8+ E062 21 00 48                             ld      hl, $4800
   9+ E065 11 00 08                             ld      de, $0800
  10+ E068 CD 32 7E                             call    memfill_dma
  11+ E06B C9                                   ret
  12+ E06C
  13+ E06C AF           l1_cls_bottom:          xor     a
  14+ E06D 21 00 50                             ld      hl, $5000
  15+ E070 11 00 08                             ld      de, $0800
  16+ E073 CD 32 7E                             call    memfill_dma
  17+ E076 C9                                   ret
  18+ E077
  19+ E077              ; Designed specifically to clear a whole character aligned line
  20+ E077 1E 00        l1_cls_line_d:          ld      e,0
  21+ E079 ED 94                                pixelad
  22+ E07B 11 00 01                             ld      de,32 * 8
  23+ E07E AF                                   xor     a
  24+ E07F CD 32 7E                             call    memfill_dma
  25+ E082 C9                                   ret
  26+ E083
  27+ E083              ; Designed specifically to clear a whole character aligned 2 lines line, used for say clearing hyperspace message
  28+ E083 1E 00        l1_cls_2_lines_d:       ld      e,0
  29+ E085 ED 94                                pixelad
  30+ E087 11 00 02                             ld      de,32 * 16
  31+ E08A AF                                   xor     a
  32+ E08B CD 32 7E                             call    memfill_dma
  33+ E08E C9                                   ret
  34+ E08F
  35+ E08F AF           l1_cls:                 xor		a
  36+ E090 21 00 40     l1_cls_to_a:            ld		hl,	$4000
  37+ E093 11 00 18                             ld		de, $1800
  38+ E096 CD 32 7E                             call	memfill_dma
  39+ E099 C9                                   ret
  40+ E09A
  41+ E09A 21 00 58     l1_attr_cls_2DlinesA:   ld		hl,	$5800
  42+ E09D 1E 20                                ld      e,32
  43+ E09F ED 30                                mul
  44+ E0A1 19                                   add     hl,de
  45+ E0A2 11 40 00                             ld		de, 32 * 2
  46+ E0A5 CD 32 7E                             call	memfill_dma
  47+ E0A8 C9                                   ret
  48+ E0A9
  49+ E0A9
  50+ E0A9 AF           l1_attr_cls:            xor		a
  51+ E0AA 21 00 58     l1_attr_cls_to_a:       ld		hl,	$5800
  52+ E0AD 11 00 03                             ld		de, $0300
  53+ E0B0 CD 32 7E                             call	memfill_dma
  54+ E0B3 C9                                   ret
  55+ E0B4
  56+ E0B4 01 FE FE     l1_set_border:          ld	    bc, 0xFEFE
  57+ E0B7 ED 79                                out		(c),a
  58+ E0B9 C9                                   ret
# file closed: ./Layer1Graphics/layer1_cls.asm
 820  E0BA                  INCLUDE "./Layer1Graphics/layer1_print_at.asm"
# file opened: ./Layer1Graphics/layer1_print_at.asm
   1+ E0BA              ; "l1 print char a = character, de = Ypixel Xpxiel rounded to char of print"
   2+ E0BA D5 E5        l1_print_char:          push	de,,hl
   3+ E0BC ED 94                                pixelad								; hl = address of de
   4+ E0BE E5                                   push	hl							; save hl for loop
   5+ E0BF 26 00                                ld		h,0
   6+ E0C1 6F                                   ld		l,a
   7+ E0C2 29                                   add		hl,hl						; * 2
   8+ E0C3 29                                   add		hl,hl						; * 4
   9+ E0C4 29                                   add		hl,hl						; * 8 to get byte address
  10+ E0C5 ED 34 00 3C                          add		hl,charactersetaddr			; hl = address of rom char
  11+ E0C9 EB                                   ex		de,hl						; save address into de
  12+ E0CA E1                                   pop		hl							; get back hl for loop
  13+ E0CB 06 08                                ld		b,8							; do 8 rows
  14+ E0CD 1A           .PrintCharLoop:         ld		a,(de)						; row byte
  15+ E0CE 13                                   inc		de							; next byte
  16+ E0CF 77                                   ld		(hl),a						; poke to screen
  17+ E0D0 ED 93                                pixeldn								; Down 1 row
  18+ E0D2 10 F9                                djnz	.PrintCharLoop				; loop for 8 bytes
  19+ E0D4 E1 D1                                pop		de,,hl					    ; restore hl
  20+ E0D6 C9                                   ret
  21+ E0D7
  22+ E0D7              ; "l1 PrintAt, pixel row, whole char col, DE = yx, HL = message Addr"
  23+ E0D7              ; now skips ascii code < 32 but moves on cursor by 1 char
  24+ E0D7              l1_print_at_char
  24+ E0D7 CB 22           sla     d       ; Convert D from char to pixel
  25+ E0D9 CB 22                                sla     d       ; by muliplying by 8
  26+ E0DB CB 22                                sla     d       ;
  27+ E0DD CB 23                                sla     e       ; Convert E from char to pixel
  28+ E0DF CB 23                                sla     e
  29+ E0E1 CB 23                                sla     e
  30+ E0E3              l1_print_at:
  31+ E0E3 7E           .PrintLoop:             ld		a,(hl)
  32+ E0E4 FE 00                                cp		0
  33+ E0E6 C8                                   ret		z
  34+ E0E7                                      CallIfAGTENusng " ", l1_print_char
  34+ E0E7 FE 20       >                        cp      " "
  34+ E0E9 D4 BA E0    >                        call	nc,l1_print_char
  35+ E0EC 23                                   inc		hl							; move 1 message character right
  36+ E0ED 7B                                   ld		a,e
  37+ E0EE C6 08                                add		a,8
  38+ E0F0 5F                                   ld		e,a							; move 1 screen character right
  39+ E0F1 18 F0                                jr		.PrintLoop
  40+ E0F3                                                      DISPLAY "TODO: looks liek rogue popde"
  41+ E0F3              .Clearstackandfinish:   ;pop		de                      ; TODO LOOOKS TO BE A ROGUE POPDE
  42+ E0F3 C9                                   ret
  43+ E0F4
  44+ E0F4
  45+ E0F4
  46+ E0F4 30 30 00     HexU8Char:       DB "00",0
  47+ E0F7 30 30 30 30  HexU16Char:      DB "0000",0
  47+ E0FB 00
  48+ E0FC 2B 30 30 00  HexS8Char:       DB "+00",0
  49+ E100 2B 30 30 30  HexS16Char:      DB "+0000",0
  49+ E104 30 00
  50+ E106 2B 30 30 30  HexS24Char:      DB "+0000.00",0
  50+ E10A 30 2E 30 30
  50+ E10E 00
  51+ E10F 2A 2A 00     HexU8NaN:        DB "**",0
  52+ E112
  53+ E112              ; prints + sign for bit 7 clear in a else - sign for bit 7 set, Load to buffer location in ix
  54+ E112 CB 7F        l1_buffer_sign_at_ix:   bit     7,a
  55+ E114 CA 1D E1                             jp      z,.PrintPlus
  56+ E117 3E 2D        .PrintMinus:            ld      a,"-"
  57+ E119 DD 77 00                             ld      (ix+0),a
  58+ E11C C9                                   ret
  59+ E11D 3E 2B        .PrintPlus:             ld      a,"+"
  60+ E11F DD 77 00                             ld      (ix+0),a
  61+ E122 C9                                   ret
  62+ E123
  63+ E123 30 31 32 33  HexMapping:     DB "0123456789ABCDEF"
  63+ E127 34 35 36 37
  63+ E12B 38 39 41 42
  63+ E12F 43 44 45 46
  64+ E133              ; writes hex 8 bit to ix buffer position
  65+ E133 C5 E5        l1_buffer_hex_8_at_ix:  push    bc,,hl
  66+ E135 47                                   ld      b,a
  67+ E136 ED 23                                swapnib
  68+ E138 E6 0F                                and     $0F
  69+ E13A 21 23 E1                             ld      hl,HexMapping
  70+ E13D ED 31                                add     hl,a
  71+ E13F 7E                                   ld      a,(hl)
  72+ E140 DD 77 00                             ld      (ix+0),a
  73+ E143 21 23 E1                             ld      hl,HexMapping
  74+ E146 78                                   ld      a,b
  75+ E147 E6 0F                                and     $0F
  76+ E149 ED 31                                add     hl,a
  77+ E14B 7E                                   ld      a,(hl)
  78+ E14C DD 77 01                             ld      (ix+1),a
  79+ E14F E1 C1                                pop     bc,,hl
  80+ E151 C9                                   ret
  81+ E152
  82+ E152              ; prints 16 bit lead sign hex value in HLA at char pos DE
  83+ E152 F5           l1_print_s24_hex_at_char: push  af                      ; first off do sign
  84+ E153 DD 21 06 E1                            ld    ix,HexS24Char
  85+ E157 7C                                     ld    a,h
  86+ E158 CD 12 E1                               call  l1_buffer_sign_at_ix
  87+ E15B F1                                     pop   af                      ; now do hl as an unsigned by clearing bit 7
  88+ E15C DD 23                                  inc   ix                      ; move to actual digits
  89+ E15E F5                                     push  af
  90+ E15F 7C                                     ld    a,h
  91+ E160 CB BF                                  res   7,a                     ; clear sign bit regardless
  92+ E162 CD 33 E1                               call  l1_buffer_hex_8_at_ix
  93+ E165 DD 23                                  inc   ix
  94+ E167 DD 23                                  inc   ix
  95+ E169 7D                                     ld    a,l
  96+ E16A CD 33 E1                               call  l1_buffer_hex_8_at_ix
  97+ E16D DD 23                                  inc   ix
  98+ E16F DD 23                                  inc   ix
  99+ E171 DD 23                                  inc   ix                      ; also skip decimal point
 100+ E173 F1                                     pop   af
 101+ E174 CD 33 E1                               call  l1_buffer_hex_8_at_ix
 102+ E177 21 06 E1                               ld    hl,HexS24Char           ; by here de is still unaffected
 103+ E17A CD D7 E0                               call  l1_print_at_char
 104+ E17D C9                                     ret
 105+ E17E              ; prints 16 bit lead sign hex value in HL at char pos DE
 106+ E17E DD 21 00 E1  l1_print_s16_hex_at_char: ld    ix,HexS16Char
 107+ E182 7C                                     ld    a,h
 108+ E183 CD 12 E1                               call  l1_buffer_sign_at_ix
 109+ E186 DD 23                                  inc   ix                      ; move to actual digits
 110+ E188 7C                                     ld    a,h
 111+ E189 CB BF                                  res   7,a
 112+ E18B CD 33 E1                               call  l1_buffer_hex_8_at_ix
 113+ E18E DD 23                                  inc   ix
 114+ E190 DD 23                                  inc   ix
 115+ E192 7D                                     ld    a,l
 116+ E193 CD 33 E1                               call  l1_buffer_hex_8_at_ix
 117+ E196 21 00 E1                               ld    hl,HexS16Char           ; by here de is still unaffected
 118+ E199 CD D7 E0                               call  l1_print_at_char
 119+ E19C C9                                     ret
 120+ E19D              ; prints 16 bit unsigned hext value in HL at char pos DE
 121+ E19D DD 21 F7 E0  l1_print_u16_hex_at_char: ld    ix,HexU16Char
 122+ E1A1 7C                                     ld    a,h
 123+ E1A2 CD 33 E1                               call  l1_buffer_hex_8_at_ix
 124+ E1A5 DD 23                                  inc   ix
 125+ E1A7 DD 23                                  inc   ix
 126+ E1A9 7D                                     ld    a,l
 127+ E1AA CD 33 E1                               call  l1_buffer_hex_8_at_ix
 128+ E1AD 21 F7 E0                               ld    hl,HexU16Char           ; by here de is still unaffected
 129+ E1B0 CD D7 E0                               call  l1_print_at_char
 130+ E1B3 C9                                     ret
 131+ E1B4              ; prints 8 bit signed hext value in a at char pos DE
 132+ E1B4 DD 21 FC E0  l1_print_s8_hex_at_char:  ld    ix,HexS8Char
 133+ E1B8 67                                     ld    h,a                     ; save a into h
 134+ E1B9 CD 12 E1                               call  l1_buffer_sign_at_ix
 135+ E1BC DD 23                                  inc   ix                      ; move to actual digits
 136+ E1BE 7C                                     ld    a,h                     ; get a back
 137+ E1BF CB BF                                  res   7,a                     ; clear sign bit regardless
 138+ E1C1 CD 33 E1                               call  l1_buffer_hex_8_at_ix
 139+ E1C4 21 FC E0                               ld    hl,HexS8Char           ; by here de is still unaffected
 140+ E1C7 CD D7 E0                               call  l1_print_at_char
 141+ E1CA C9                                     ret
 142+ E1CB              ; prints 8 bit 2s compliment value in a at char pos DE
 143+ E1CB DD 21 FC E0  l1_print_82c_hex_at_char: ld    ix,HexS8Char
 144+ E1CF 67                                     ld    h,a                     ; save a into h
 145+ E1D0 CD 12 E1                               call  l1_buffer_sign_at_ix
 146+ E1D3 DD 23                                  inc   ix                      ; move to actual digits
 147+ E1D5 7C                                     ld    a,h                     ; get a back
 148+ E1D6 CB 7F                                  bit   7,a
 149+ E1D8 CA DD E1                               jp    z,.NoNeg
 150+ E1DB ED 44                                  neg
 151+ E1DD CD 33 E1     .NoNeg:                   call  l1_buffer_hex_8_at_ix
 152+ E1E0 21 FC E0                               ld    hl,HexS8Char           ; by here de is still unaffected
 153+ E1E3 CD D7 E0                               call  l1_print_at_char
 154+ E1E6 C9                                     ret
 155+ E1E7
 156+ E1E7              ; prints Lead Sign byte 8 bit signed hex value in hl at char pos DE, reuse HexS8Char buffer
 157+ E1E7 DD 21 FC E0  l1_print_s08_hex_at_char: ld    ix,HexS8Char
 158+ E1EB CD 12 E1                               call  l1_buffer_sign_at_ix    ; h holds sign bit
 159+ E1EE DD 23                                  inc   ix                      ; move to actual digits
 160+ E1F0 7D                                     ld    a,l                     ; l holds value
 161+ E1F1 CD 33 E1                               call  l1_buffer_hex_8_at_ix
 162+ E1F4 21 FC E0                               ld    hl,HexS8Char           ; by here de is still unaffected
 163+ E1F7 CD D7 E0                               call  l1_print_at_char
 164+ E1FA C9                                     ret
 165+ E1FB              ; prints 8 bit signed hext value in a at char pos DE
 166+ E1FB DD 21 F4 E0  l1_print_u8_hex_at_char:  ld    ix,HexU8Char
 167+ E1FF CD 33 E1                               call  l1_buffer_hex_8_at_ix
 168+ E202 21 F4 E0                               ld    hl,HexU8Char           ; by here de is still unaffected
 169+ E205 CD D7 E0                               call  l1_print_at_char
 170+ E208 C9                                     ret
 171+ E209 2B 00        l1_PlusSign:              DB      "+",0
 172+ E20B 2D 00        l1_MinusSign:             DB      "-",0
 173+ E20D 20 00        l1_ClearSign:             DB      " ",0
 174+ E20F              ; Displays sign byte in A at DE
 175+ E20F FE 80        l1_printSignByte:         cp      $80
 176+ E211 C2 27 E2                               jp      nz,.DisplayPlus
 177+ E214 FE 01                                  cp      1
 178+ E216 C2 20 E2                               jp      nz,.DisplayMinus
 179+ E219 21 0D E2     .DisplayClear:            ld      hl,l1_ClearSign
 180+ E21C CD D7 E0                               call    l1_print_at_char
 181+ E21F C9                                     ret
 182+ E220 21 0B E2     .DisplayMinus             ld      hl,l1_MinusSign
 183+ E223 CD D7 E0                               call    l1_print_at_char
 184+ E226 C9                                     ret
 185+ E227 21 09 E2     .DisplayPlus:             ld      hl,l1_PlusSign
 186+ E22A CD D7 E0                               call    l1_print_at_char
 187+ E22D C9                                     ret
 188+ E22E
 189+ E22E 21 0F E1     l1_print_u8_nan_at_char:  ld    hl,HexU8NaN
 190+ E231 CD D7 E0                               call  l1_print_at_char
 191+ E234 C9                                     ret
 192+ E235
 193+ E235
 194+ E235              ;l1_print_at_wrap:
 195+ E235              ;; "l1 PrintAt, pixel row, whole char col, DE = yx, HL = message Addr"
 196+ E235              ;	ld      iyh,e
 197+ E235              ;.PrintLoop:
 198+ E235              ;	ld		a,(hl)
 199+ E235              ;	cp		0
 200+ E235              ;	ret		z
 201+ E235              ;.CountWordCharLen
 202+ E235              ;; Need to change to word wrap, so it will loop through string as before
 203+ E235              ;; but read up until a null or space, take the character count * 8 for pixels
 204+ E235              ;; if that is > 238 then force a premature line wrap
 205+ E235              ;
 206+ E235              ;
 207+ E235              ;    push    iy
 208+ E235              ;    call	l1_print_char
 209+ E235              ;    pop     iy
 210+ E235              ;	inc		hl							; move 1 message character right
 211+ E235              ;	ld		a,e
 212+ E235              ;    cp      238
 213+ E235              ;    jr      nc,.NextLine
 214+ E235              ;	add		a,8
 215+ E235              ;	ld		e,a							; move 1 screen character right
 216+ E235              ;	jr		.PrintLoop
 217+ E235              ;.Clearstackandfinish:
 218+ E235              ;	pop		de
 219+ E235              ;	ret
 220+ E235              ;.NextLine:
 221+ E235              ;    ld      a,(hl)
 222+ E235              ;    cp      " "
 223+ E235              ;    ld      e,iyh
 224+ E235              ;    ld      a,d
 225+ E235              ;    add     a,8
 226+ E235              ;    ld      d,a
 227+ E235              ;    jr		.PrintLoop
 228+ E235
 229+ E235              ; Counts next word at hl, uses e and forces a wrap if it would over flow puts value in c
 230+ E235 E5           L1LenWordAtHL:          push    hl
 231+ E236 D5                                   push    de
 232+ E237 7E           .CountLoop:             ld      a,(hl)
 233+ E238 FE 00                                cp      0
 234+ E23A 28 0F                                jr      z,.CountDone
 235+ E23C FE 20                                cp      32
 236+ E23E 28 0B                                jr      z,.CountDone
 237+ E240 7B                                   ld      a,e
 238+ E241 C6 08                                add     a,8
 239+ E243 5F                                   ld      e,a
 240+ E244 FE EE                                cp      238
 241+ E246 30 07                                jr      nc,.TooLong
 242+ E248 23                                   inc     hl
 243+ E249 18 EC                                jr      .CountLoop
 244+ E24B D1           .CountDone:             pop     de
 245+ E24C E1                                   pop     hl
 246+ E24D AF                                   xor     a
 247+ E24E C9                                   ret
 248+ E24F D1           .TooLong                pop     de
 249+ E250 E1                                   pop     hl
 250+ E251 3E FF                                ld      a,$FF
 251+ E253 C9                                   ret
 252+ E254
 253+ E254 7E           L1PrintWordAtHL:        ld      a,(hl)
 254+ E255 FE 00                                cp      0
 255+ E257 C8                                   ret     z
 256+ E258 FE 20                                cp      32
 257+ E25A 28 0F                                jr      z,.ItsASpace
 258+ E25C FD E5                                push    iy
 259+ E25E CD BA E0                             call	l1_print_char
 260+ E261 FD E1                                pop     iy
 261+ E263 7B                                   ld      a,e
 262+ E264 C6 08                                add     a,8
 263+ E266 5F                                   ld      e,a
 264+ E267 23                                   inc     hl
 265+ E268 C3 54 E2                             jp      L1PrintWordAtHL
 266+ E26B 23           .ItsASpace:             inc     hl      ;  Just a bodge for now
 267+ E26C 7B                                   ld      a,e
 268+ E26D C6 08                                add     a,8
 269+ E26F 5F                                   ld      e,a
 270+ E270 C9                                   ret
 271+ E271
 272+ E271
 273+ E271              ; print at based whole character positions DE=yx, HL = message Addr
 274+ E271              ;
 275+ E271 CB 22        l1_print_at_char_wrap:  sla     d       ; Convert D from char to pixel
 276+ E273 CB 22                                sla     d       ; by muliplying by 8
 277+ E275 CB 22                                sla     d       ;
 278+ E277              ; "l1 PrintAt, pixel row, whole char col, DE = yx, HL = message Addr"
 279+ E277              ; Now has full word level wrapping
 280+ E277 FD 63        l1_print_at_wrap:       ld      iyh,e
 281+ E279 7E           .PrintLoop:             ld		a,(hl)
 282+ E27A FE 00                                cp		0
 283+ E27C C8                                   ret		z
 284+ E27D CD 35 E2     .CountWordCharLen:      call    L1LenWordAtHL
 285+ E280 FE FF                                cp      $FF
 286+ E282 28 06                                jr      z,.WrapNextLine
 287+ E284 CD 54 E2     .NotTooLong:            call    L1PrintWordAtHL
 288+ E287              ; Need to change to word wrap, so it will loop through string as before
 289+ E287              ; but read up until a null or space, take the character count * 8 for pixels
 290+ E287              ; if that is > 238 then force a premature line wrap
 291+ E287 18 F0                                jr		.PrintLoop
 292+ E289              .Clearstackandfinish:   ;op		de
 293+ E289 C9                                   ret
 294+ E28A              .WrapNextLine:
 295+ E28A FD 5C        .NextLine:              ld      e,iyh
 296+ E28C 7A                                   ld      a,d
 297+ E28D C6 08                                add     a,8
 298+ E28F 57                                   ld      d,a
 299+ E290 18 E7                                jr		.PrintLoop
 300+ E292
 301+ E292
# file closed: ./Layer1Graphics/layer1_print_at.asm
 821  E292                  DISPLAY "Bank ",BankLAYER1," - Bytes free ",/D, $2000 - ($-LAYER1Addr), " - BankLAYER1"
 822  E292              ; Bank 59  ------------------------------------------------------------------------------------------------------------------------
 823  E292              ; In the first copy of the banks the "Non number" labels exist. They will map directly in other banks
 824  E292              ; as the is aligned and data tables are after that
 825  E292              ; need to make the ship index tables same size in each to simplify further
 826  E292                  SLOT    ShipModelsAddr
 827  E292                  PAGE    BankShipModels1
 828  E292              	ORG     ShipModelsAddr, BankShipModels1
 829  E000                  INCLUDE "./Data/ShipModelMacros.asm"
# file opened: ./Data/ShipModelMacros.asm
   1+ E000              MShipBankTable          MACRO
   2+ E000 ~                                    DW      BankShipModels1
   3+ E000 ~                                    DW      BankShipModels2
   4+ E000 ~                                    DW      BankShipModels3
   5+ E000 ~                                    DW      BankShipModels4
   6+ E000                                      ENDM
   7+ E000              ; For ship number A fetch
   8+ E000              ;           the adjusted ship number in B , C = original number
   9+ E000              ;           bank number in A for the respective ship based on the ship table
  10+ E000              MGetShipBankId:         MACRO   banktable
  11+ E000 ~                                    ld      b,0
  12+ E000 ~                                    ld      c,a                                 ; c= original ship id
  13+ E000 ~            .ShiftLoop:             srl     a
  14+ E000 ~                                    srl     a
  15+ E000 ~                                    srl     a
  16+ E000 ~                                    srl     a                                   ; divide by 16
  17+ E000 ~                                    ld      b,a                                 ; b = bank nbr
  18+ E000 ~                                    ld      a,c
  19+ E000 ~                                    ld      d,b
  20+ E000 ~                                    ld      e,16
  21+ E000 ~                                    mul                                         ; de = 16 * bank number (max is about 15 banks)
  22+ E000 ~                                    sub     e                                   ; a= actual model id now
  23+ E000 ~            .SelectedBank:          ld      d,b                                 ; save current bank number
  24+ E000 ~                                    ld      b,a                                 ; b = adjusted ship nbr
  25+ E000 ~                                    ld      a,d                                 ; a = bank number
  26+ E000 ~            ;.. Now b = bank and a = adjusted ship nbr
  27+ E000 ~                                    ld      hl,banktable                        ; a= bank index
  28+ E000 ~                                    add     hl,a
  29+ E000 ~                                    add     hl,a
  30+ E000 ~                                    ld      a,(hl)                              ; a = actual bank now
  31+ E000 ~                                    ClearCarryFlag
  32+ E000 ~                                    ret
  33+ E000                                      ENDM
  34+ E000
  35+ E000              McopyVertsToUniverse:   MACRO
  36+ E000 ~                                    ld          hl,(VerticesAddyAddr)       ; now the pointers are in Ubnk its easy to read
  37+ E000 ~                                    ld          de,UBnkHullVerticies
  38+ E000 ~                                    ld          b,0
  39+ E000 ~                                    ld			a,(VertexCtX6Addr)
  40+ E000 ~                                    ld          c,a
  41+ E000 ~                                    ex          de,hl                       ; dma transfer goes de -> hl i.e. opposite of ldir
  42+ E000 ~                                    call        memcopy_dma
  43+ E000 ~                                    ret
  44+ E000                                      ENDM
  45+ E000
  46+ E000              McopyEdgesToUniverse:   MACRO
  47+ E000 ~                                    ld          hl,(EdgeAddyAddr)          ; now the pointers are in Ubnk its easy to read
  48+ E000 ~                                    ld          de,UBnkHullEdges
  49+ E000 ~                                    ld          b,0
  50+ E000 ~                                    ld			a,(LineX4Addr)
  51+ E000 ~                                    ld          c,a
  52+ E000 ~                                    ex          de,hl                       ; dma transfer goes de -> hl i.e. opposite of ldir
  53+ E000 ~                                    call        memcopy_dma
  54+ E000 ~                                    ret
  55+ E000                                      ENDM
  56+ E000
  57+ E000              McopyNormsToUniverse:   MACRO
  58+ E000 ~                                    ld          hl,(FaceAddyAddr)          ; now the pointers are in Ubnk its easy to read
  59+ E000 ~                                    ld          de,UBnkHullNormals
  60+ E000 ~                                    ld          b,0
  61+ E000 ~                                    ld          a,(FaceCtX4Addr)
  62+ E000 ~                                    ld          c,a
  63+ E000 ~                                    ex          de,hl                       ; dma transfer goes de -> hl i.e. opposite of ldir
  64+ E000 ~                                    call        memcopy_dma
  65+ E000 ~                                    ret
  66+ E000                                      ENDM
  67+ E000
  68+ E000              ; Passes in ship nbr in A and bank is part of MACRO
  69+ E000              MCopyShipToUniverse:    MACRO       banklabel
  70+ E000 ~                                    ld          hl,UBnkShipModelBank
  71+ E000 ~                                    ld          (hl),banklabel
  72+ E000 ~                                    push        af
  73+ E000 ~                                    ld          a,iyl
  74+ E000 ~                                    ld          (UBnKShipModelId),a
  75+ E000 ~                                    pop         af
  76+ E000 ~                                    ld          (UBnKShipModelNbr),a
  77+ E000 ~            .GetHullDataLength:     ld          hl,ShipModelSizeTable
  78+ E000 ~                                    add         hl,a
  79+ E000 ~                                    add         hl,a                        ; we won't multiply by 2 as GetInfo is a general purpose routines so would end up x 4
  80+ E000 ~                                    ld          c,(hl)
  81+ E000 ~                                    inc         hl
  82+ E000 ~                                    ld          b,(hl)                      ; bc now equals length of data set
  83+ E000 ~            .GetHullDataAddress:    ld          hl,ShipModelTable
  84+ E000 ~                                    add         hl,a
  85+ E000 ~                                    add         hl,a                        ; now hl = address of ship data value
  86+ E000 ~                                    ld          a,(hl)
  87+ E000 ~                                    inc         hl
  88+ E000 ~                                    ld          h,(hl)
  89+ E000 ~                                    ld          l,a                         ; now hl = address of ship hull data
  90+ E000 ~                                    ld          de,UBnkHullCopy             ; Universe bank
  91+ E000 ~                                    ld          bc,ShipDataLength
  92+ E000 ~                                    ldir
  93+ E000 ~                                    call        CopyVertsToUniv
  94+ E000 ~                                    call        CopyEdgesToUniv
  95+ E000 ~                                    call        CopyNormsToUniv
  96+ E000 ~            .ClearName:             ld          hl,StartOfUnivName
  97+ E000 ~                                    ld          a," "
  98+ E000 ~                                    ld          b,16
  99+ E000 ~            .fillLoop:              ld          (hl),a
 100+ E000 ~                                    inc         hl
 101+ E000 ~                                    djnz        .fillLoop
 102+ E000 ~            .SetName:               ld          a,(UBnKShipModelId)
 103+ E000 ~                                    call        ShipIndexToAddress
 104+ E000 ~                                    ld          de,StartOfUnivName
 105+ E000 ~                                    ld          b,16
 106+ E000 ~            .CopyLoop:              ld          a,(hl)
 107+ E000 ~                                    cp          0
 108+ E000 ~                                    jr          z,.CopyDone
 109+ E000 ~                                    ld          (de),a
 110+ E000 ~                                    inc         hl
 111+ E000 ~                                    inc         de
 112+ E000 ~                                    djnz        .CopyLoop
 113+ E000 ~            .CopyDone:              ret
 114+ E000                                      ENDM
 115+ E000
 116+ E000              MCopyBodyToUniverse:    MACRO       copyRoutine
 117+ E000 ~                                    ld          a,13
 118+ E000 ~                                    call        copyRoutine
 119+ E000 ~                                    ret
 120+ E000                                      ENDM
 121+ E000
 122+ E000
 123+ E000              MCopyShipIdToUniverse:  MACRO
 124+ E000 ~                                    call        GetShipModelId
 125+ E000 ~                                    MMUSelectShipBankA
 126+ E000 ~                                    ld          a,b
 127+ E000 ~                                    jp          CopyShipToUniverse
 128+ E000                                      ENDM
# file closed: ./Data/ShipModelMacros.asm
 830  E000                  INCLUDE "./Data/ShipBank1Label.asm"
# file opened: ./Data/ShipBank1Label.asm
   1+ E000 53 68 69 70  ShipBank1Label:         DB  "ShipBank1      "
   1+ E004 42 61 6E 6B
   1+ E008 31 20 20 20
   1+ E00C 20 20 20
   2+ E00F
# file closed: ./Data/ShipBank1Label.asm
 831  E00F              GetShipBankId:
 832  E00F              GetShipBank1Id:         MGetShipBankId ShipBankTable
 832  E00F 06 00       >                        ld      b,0
 832  E011 4F          >                        ld      c,a                                 ; c= original ship id
 832  E012 CB 3F       >.ShiftLoop:             srl     a
 832  E014 CB 3F       >                        srl     a
 832  E016 CB 3F       >                        srl     a
 832  E018 CB 3F       >                        srl     a                                   ; divide by 16
 832  E01A 47          >                        ld      b,a                                 ; b = bank nbr
 832  E01B 79          >                        ld      a,c
 832  E01C 50          >                        ld      d,b
 832  E01D 1E 10       >                        ld      e,16
 832  E01F ED 30       >                        mul                                         ; de = 16 * bank number (max is about 15 banks)
 832  E021 93          >                        sub     e                                   ; a= actual model id now
 832  E022 50          >.SelectedBank:          ld      d,b                                 ; save current bank number
 832  E023 47          >                        ld      b,a                                 ; b = adjusted ship nbr
 832  E024 7A          >                        ld      a,d                                 ; a = bank number
 832  E025             >;.. Now b = bank and a = adjusted ship nbr
 832  E025 21 62 E0    >                        ld      hl,ShipBankTable                        ; a= bank index
 832  E028 ED 31       >                        add     hl,a
 832  E02A ED 31       >                        add     hl,a
 832  E02C 7E          >                        ld      a,(hl)                              ; a = actual bank now
 832  E02D             >                        ClearCarryFlag
 832  E02D B7          >                        or a
 832  E02E C9          >                        ret
 833  E02F              CopyVertsToUniv:
 834  E02F              CopyVertsToUniv1:       McopyVertsToUniverse
 834  E02F 2A 4C C4    >                        ld          hl,(VerticesAddyAddr)       ; now the pointers are in Ubnk its easy to read
 834  E032 11 52 C4    >                        ld          de,UBnkHullVerticies
 834  E035 06 00       >                        ld          b,0
 834  E037 3A 40 C4    >                        ld			a,(VertexCtX6Addr)
 834  E03A 4F          >                        ld          c,a
 834  E03B EB          >                        ex          de,hl                       ; dma transfer goes de -> hl i.e. opposite of ldir
 834  E03C CD 58 7E    >                        call        memcopy_dma
 834  E03F C9          >                        ret
 835  E040              CopyEdgesToUniv:
 836  E040              CopyEdgesToUniv1:       McopyEdgesToUniverse
 836  E040 2A 3A C4    >                        ld          hl,(EdgeAddyAddr)          ; now the pointers are in Ubnk its easy to read
 836  E043 11 42 C5    >                        ld          de,UBnkHullEdges
 836  E046 06 00       >                        ld          b,0
 836  E048 3A 3C C4    >                        ld			a,(LineX4Addr)
 836  E04B 4F          >                        ld          c,a
 836  E04C EB          >                        ex          de,hl                       ; dma transfer goes de -> hl i.e. opposite of ldir
 836  E04D CD 58 7E    >                        call        memcopy_dma
 836  E050 C9          >                        ret
 837  E051              CopyNormsToUniv:
 838  E051              CopyNormsToUniv1:       McopyNormsToUniverse
 838  E051 2A 48 C4    >                        ld          hl,(FaceAddyAddr)          ; now the pointers are in Ubnk its easy to read
 838  E054 11 0A C6    >                        ld          de,UBnkHullNormals
 838  E057 06 00       >                        ld          b,0
 838  E059 3A 44 C4    >                        ld          a,(FaceCtX4Addr)
 838  E05C 4F          >                        ld          c,a
 838  E05D EB          >                        ex          de,hl                       ; dma transfer goes de -> hl i.e. opposite of ldir
 838  E05E CD 58 7E    >                        call        memcopy_dma
 838  E061 C9          >                        ret
 839  E062              ShipBankTable:
 840  E062              ShipBankTable1:         MShipBankTable
 840  E062 3B 00       >                        DW      BankShipModels1
 840  E064 43 00       >                        DW      BankShipModels2
 840  E066 44 00       >                        DW      BankShipModels3
 840  E068 45 00       >                        DW      BankShipModels4
 841  E06A              CopyShipToUniverse:
 842  E06A              CopyShipToUniverse1     MCopyShipToUniverse     BankShipModels1
 842  E06A 21 42 C0    >                        ld          hl,UBnkShipModelBank
 842  E06D 36 3B       >                        ld          (hl),BankShipModels1
 842  E06F F5          >                        push        af
 842  E070 FD 7D       >                        ld          a,iyl
 842  E072 32 44 C0    >                        ld          (UBnKShipModelId),a
 842  E075 F1          >                        pop         af
 842  E076 32 43 C0    >                        ld          (UBnKShipModelNbr),a
 842  E079 21 46 E1    >.GetHullDataLength:     ld          hl,ShipModelSizeTable
 842  E07C ED 31       >                        add         hl,a
 842  E07E ED 31       >                        add         hl,a                        ; we won't multiply by 2 as GetInfo is a general purpose routines so would end up x 4
 842  E080 4E          >                        ld          c,(hl)
 842  E081 23          >                        inc         hl
 842  E082 46          >                        ld          b,(hl)                      ; bc now equals length of data set
 842  E083 21 C6 E0    >.GetHullDataAddress:    ld          hl,ShipModelTable
 842  E086 ED 31       >                        add         hl,a
 842  E088 ED 31       >                        add         hl,a                        ; now hl = address of ship data value
 842  E08A 7E          >                        ld          a,(hl)
 842  E08B 23          >                        inc         hl
 842  E08C 66          >                        ld          h,(hl)
 842  E08D 6F          >                        ld          l,a                         ; now hl = address of ship hull data
 842  E08E 11 37 C4    >                        ld          de,UBnkHullCopy             ; Universe bank
 842  E091 01 1B 00    >                        ld          bc,ShipDataLength
 842  E094 ED B0       >                        ldir
 842  E096 CD 2F E0    >                        call        CopyVertsToUniv
 842  E099 CD 40 E0    >                        call        CopyEdgesToUniv
 842  E09C CD 51 E0    >                        call        CopyNormsToUniv
 842  E09F 21 10 C0    >.ClearName:             ld          hl,StartOfUnivName
 842  E0A2 3E 20       >                        ld          a," "
 842  E0A4 06 10       >                        ld          b,16
 842  E0A6 77          >.fillLoop:              ld          (hl),a
 842  E0A7 23          >                        inc         hl
 842  E0A8 10 FC       >                        djnz        .fillLoop
 842  E0AA 3A 44 C0    >.SetName:               ld          a,(UBnKShipModelId)
 842  E0AD CD D9 8F    >                        call        ShipIndexToAddress
 842  E0B0 11 10 C0    >                        ld          de,StartOfUnivName
 842  E0B3 06 10       >                        ld          b,16
 842  E0B5 7E          >.CopyLoop:              ld          a,(hl)
 842  E0B6 FE 00       >                        cp          0
 842  E0B8 28 05       >                        jr          z,.CopyDone
 842  E0BA 12          >                        ld          (de),a
 842  E0BB 23          >                        inc         hl
 842  E0BC 13          >                        inc         de
 842  E0BD 10 F6       >                        djnz        .CopyLoop
 842  E0BF C9          >.CopyDone:              ret
 843  E0C0              CopyBodyToUniverse:
 844  E0C0              CopyBodyToUniverse1:    MCopyBodyToUniverse     CopyShipToUniverse1
 844  E0C0 3E 0D       >                        ld          a,13
 844  E0C2 CD 6A E0    >                        call        CopyShipToUniverse1
 844  E0C5 C9          >                        ret
 845  E0C6                  INCLUDE "./Data/ShipModelMetaData1.asm"
# file opened: ./Data/ShipModelMetaData1.asm
   1+ E0C6              ShipModelTable:
   2+ E0C6 66 E1        ShipModelTable1:         DW Adder                                   ;00 $00
   3+ E0C8 A1 E2                                 DW Anaconda                                ;01 $01
   4+ E0CA AE E3                                 DW Asp_Mk_2                                ;02 $02
   5+ E0CC DF E4                                 DW Boa                                     ;03 $03
   6+ E0CE DC E5                                 DW CargoType5                              ;04 $04
   7+ E0D0 B0 E6                                 DW Boulder                                 ;05 $05
   8+ E0D2 5D E7                                 DW Asteroid                                ;06 $06
   9+ E0D4 3E E8                                 DW Bushmaster                              ;07 $07
  10+ E0D6 15 E9                                 DW Chameleon                               ;08 $08
  11+ E0D8 47 EA                                 DW CobraMk3                                ;09 $09
  12+ E0DA DA EB                                 DW Cobra_Mk_1                              ;10 $0A
  13+ E0DC AB EC                                 DW Cobra_Mk_3_P                            ;11 $0B
  14+ E0DE 3E EE                                 DW Constrictor                             ;12 $0C
  15+ E0E0 4B EF                                 DW Coriolis                                ;13 $0D
  16+ E0E2 72 F0                                 DW Cougar                                  ;14 $0E
  17+ E0E4 7F F1                                 DW Dodo                                    ;15 $0F
  18+ E0E6              ShipVertexTable:
  19+ E0E6 85 E1        ShipVertexTable1:        DW AdderVertices                           ;00 $00
  20+ E0E8 C0 E2                                 DW AnacondaVertices                        ;01 $01
  21+ E0EA CD E3                                 DW Asp_Mk_2Vertices                        ;02 $02
  22+ E0EC FE E4                                 DW BoaVertices                             ;03 $03
  23+ E0EE FB E5                                 DW CargoType5Vertices                      ;04 $04
  24+ E0F0 CF E6                                 DW BoulderVertices                         ;05 $05
  25+ E0F2 7C E7                                 DW AsteroidVertices                        ;06 $06
  26+ E0F4 5D E8                                 DW BushmasterVertices                      ;07 $07
  27+ E0F6 33 E9                                 DW ChameleonVertices                       ;08 $08
  28+ E0F8 66 EA                                 DW CobraMk3Vertices                        ;09 $09
  29+ E0FA F9 EB                                 DW Cobra_Mk_1Vertices                      ;10 $0A
  30+ E0FC CA EC                                 DW Cobra_Mk_3_PVertices                    ;11 $0B
  31+ E0FE 5D EE                                 DW ConstrictorVertices                     ;12 $0C
  32+ E100 6A EF                                 DW CoriolisVertices                        ;13 $0D
  33+ E102 91 F0                                 DW CougarVertices                          ;14 $0E
  34+ E104 9E F1                                 DW DodoVertices                            ;15 $0F
  35+ E106              ShipEdgeTable:
  36+ E106 F1 E1        ShipEdgeTable1:          DW AdderEdges                              ;00 $00
  37+ E108 1A E3                                 DW AnacondaEdges                           ;01 $01
  38+ E10A 3F E4                                 DW Asp_Mk_2Edges                           ;02 $02
  39+ E10C 4C E5                                 DW BoaEdges                                ;03 $03
  40+ E10E 37 E6                                 DW CargoType5Edges                         ;04 $04
  41+ E110 F9 E6                                 DW BoulderEdges                            ;05 $05
  42+ E112 B2 E7                                 DW AsteroidEdges                           ;06 $06
  43+ E114 A5 E8                                 DW BushmasterEdges                         ;07 $07
  44+ E116 9F E9                                 DW ChameleonEdges                          ;08 $08
  45+ E118 0E EB                                 DW CobraMk3Edges                           ;09 $09
  46+ E11A 3B EC                                 DW Cobra_Mk_1Edges                         ;10 $0A
  47+ E11C 72 ED                                 DW Cobra_Mk_3_PEdges                       ;11 $0B
  48+ E11E C3 EE                                 DW ConstrictorEdges                        ;12 $0C
  49+ E120 CA EF                                 DW CoriolisEdges                           ;13 $0D
  50+ E122 03 F1                                 DW CougarEdges                             ;14 $0E
  51+ E124 2E F2                                 DW DodoEdges                               ;15 $0F
  52+ E126              ShipNormalTable:
  53+ E126 65 E2        ShipNormalTable1:        DW AdderNormals                            ;00 $00
  54+ E128 7E E3                                 DW AnacondaNormals                         ;01 $01
  55+ E12A AF E4                                 DW Asp_Mk_2Normals                         ;02 $02
  56+ E12C AC E5                                 DW BoaNormals                              ;03 $03
  57+ E12E 73 E6                                 DW CargoType5Normals                       ;04 $04
  58+ E130 35 E7                                 DW BoulderNormals                          ;05 $05
  59+ E132 06 E8                                 DW AsteroidNormals                         ;06 $06
  60+ E134 F1 E8                                 DW BushmasterNormals                       ;07 $07
  61+ E136 13 EA                                 DW ChameleonNormals                        ;08 $08
  62+ E138 A6 EB                                 DW CobraMk3Normals                         ;09 $09
  63+ E13A 83 EC                                 DW Cobra_Mk_1Normals                       ;10 $0A
  64+ E13C 0A EE                                 DW Cobra_Mk_3_PNormals                     ;11 $0B
  65+ E13E 23 EF                                 DW ConstrictorNormals                      ;12 $0C
  66+ E140 3A F0                                 DW CoriolisNormals                         ;13 $0D
  67+ E142 67 F1                                 DW CougarNormals                           ;14 $0E
  68+ E144 B6 F2                                 DW DodoNormals                             ;15 $0F
  69+ E146              ShipModelSizeTable:
  70+ E146 3B 01        ShipModelSizeTable1:     DW AdderLen                                ;00 $00
  71+ E148 0D 01                                 DW AnacondaLen                             ;01 $01
  72+ E14A 31 01                                 DW Asp_Mk_2Len                             ;02 $02
  73+ E14C FD 00                                 DW BoaLen                                  ;03 $03
  74+ E14E B3 00                                 DW CargoType5Len                           ;04 $04
  75+ E150 AD 00                                 DW BoulderLen                              ;05 $05
  76+ E152 E1 00                                 DW AsteroidLen                             ;06 $06
  77+ E154 D7 00                                 DW BushmasterLen                           ;07 $07
  78+ E156 32 01                                 DW ChameleonLen                            ;08 $08
  79+ E158 93 01                                 DW CobraMk3Len                             ;09 $09
  80+ E15A D1 00                                 DW Cobra_Mk_1Len                           ;10 $0A
  81+ E15C 93 01                                 DW Cobra_Mk_3_PLen                         ;11 $0B
  82+ E15E 0D 01                                 DW ConstrictorLen                          ;12 $0C
  83+ E160 27 01                                 DW CoriolisLen                             ;13 $0D
  84+ E162 0D 01                                 DW CougarLen                               ;14 $0E
  85+ E164 67 01                                 DW DodoLen                                 ;15 $0F
  86+ E166
  87+ E166                                      include "Data/ships/Adder.asm"
# file opened: ./Data/ships/Adder.asm
   1++E166 00           Adder:	                DB $00                              ; Number of cargo canisters released when destroyed
   2++E167 C4 09                                DW 50 * 50                          ; Ship's targetable area LoHi
   3++E169 F1 E1                                DW AdderEdges                       ; Edge Data
   4++E16B 74                                   DB AdderEdgesSize                   ; Size of Edge Data
   5++E16C 00                                   DB $00                              ; Gun Vertex Byte offset
   6++E16D 16                                   DB $16                              ; Explosion Count
   7++E16E 12                                   DB AdderVertSize / 6                ; Vertex Count /6
   8++E16F 6C                                   DB AdderVertSize                    ; Vertex Count
   9++E170 1D                                   DB AdderEdgesCnt                    ; Edges Count
  10++E171 28 00                                DW $0028                            ; Bounty LoHi
  11++E173 3C                                   DB AdderNormalsSize                 ; Face (Normal) Count
  12++E174 17                                   DB $17                              ; Range when it turns to a dot
  13++E175 48                                   DB $48                              ; Energy Max
  14++E176 18                                   DB $18                              ; Speed Max
  15++E177 65 E2                                DW AdderNormals                     ; Normals
  16++E179 12                                   DB $12                              ; Q scaling
  17++E17A 21                                   DB $21                              ; Laser power and Nbr Missiles
  18++E17B 85 E1                                DW AdderVertices                    ; Verticles Address
  19++E17D 00                                   DB ShipTypeNormal                   ; Ship Type
  20++E17E 00                                   DB 0                                ; NewB Tactics
  21++E17F 80                                   DB ShipCanAnger                     ; AI Flags
  22++E180 80                                   DB $80                              ; chance of ECM module
  23++E181 FF                                   DB $FF                              ; Supports Solid Fill = false
  24++E182 00 00                                DW $0000                            ; no solid data
  25++E184 00                                   DB $00                              ; no solid data
  26++E185
  27++E185                                                     ; chance of ECM module
  28++E185 12 00 28 9F  AdderVertices:	        DB $12, $00, $28, $9F, $01, $BC     ;01
  28++E189 01 BC
  29++E18B 12 00 28 1F                          DB $12, $00, $28, $1F, $01, $23     ;02
  29++E18F 01 23
  30++E191 1E 00 18 3F                          DB $1E, $00, $18, $3F, $23, $45     ;03
  30++E195 23 45
  31++E197 1E 00 28 3F                          DB $1E, $00, $28, $3F, $45, $66     ;04
  31++E19B 45 66
  32++E19D 12 07 28 7F                          DB $12, $07, $28, $7F, $56, $7E     ;05
  32++E1A1 56 7E
  33++E1A3 12 07 28 FF                          DB $12, $07, $28, $FF, $78, $AE     ;06
  33++E1A7 78 AE
  34++E1A9 1E 00 28 BF                          DB $1E, $00, $28, $BF, $89, $AA     ;07
  34++E1AD 89 AA
  35++E1AF 1E 00 18 BF                          DB $1E, $00, $18, $BF, $9A, $BC     ;08
  35++E1B3 9A BC
  36++E1B5 12 07 28 BF                          DB $12, $07, $28, $BF, $78, $9D     ;09
  36++E1B9 78 9D
  37++E1BB 12 07 28 3F                          DB $12, $07, $28, $3F, $46, $7D     ;10
  37++E1BF 46 7D
  38++E1C1 12 07 0D 9F                          DB $12, $07, $0D, $9F, $09, $BD     ;11
  38++E1C5 09 BD
  39++E1C7 12 07 0D 1F                          DB $12, $07, $0D, $1F, $02, $4D     ;12
  39++E1CB 02 4D
  40++E1CD 12 07 0D DF                          DB $12, $07, $0D, $DF, $1A, $CE     ;13
  40++E1D1 1A CE
  41++E1D3 12 07 0D 5F                          DB $12, $07, $0D, $5F, $13, $5E     ;14
  41++E1D7 13 5E
  42++E1D9 0B 03 1D 85                          DB $0B, $03, $1D, $85, $00, $00     ;15
  42++E1DD 00 00
  43++E1DF 0B 03 1D 05                          DB $0B, $03, $1D, $05, $00, $00     ;16
  43++E1E3 00 00
  44++E1E5 0B 04 18 04                          DB $0B, $04, $18, $04, $00, $00     ;17
  44++E1E9 00 00
  45++E1EB 0B 04 18 84                          DB $0B, $04, $18, $84, $00, $00     ;18
  45++E1EF 00 00
  46++E1F1              AdderVertSize:          equ $ - AdderVertices
  47++E1F1 1F 01 00 04  AdderEdges:	            DB $1F, $01, $00, $04               ;01
  48++E1F5 07 23 04 08                          DB $07, $23, $04, $08               ;02
  49++E1F9 1F 45 08 0C                          DB $1F, $45, $08, $0C               ;03
  50++E1FD 1F 56 0C 10                          DB $1F, $56, $0C, $10               ;04
  51++E201 1F 7E 10 14                          DB $1F, $7E, $10, $14               ;05
  52++E205 1F 8A 14 18                          DB $1F, $8A, $14, $18               ;06
  53++E209 1F 9A 18 1C                          DB $1F, $9A, $18, $1C               ;07
  54++E20D 07 BC 1C 00                          DB $07, $BC, $1C, $00               ;08
  55++E211 1F 46 0C 24                          DB $1F, $46, $0C, $24               ;09
  56++E215 1F 7D 24 20                          DB $1F, $7D, $24, $20               ;10
  57++E219 1F 89 20 18                          DB $1F, $89, $20, $18               ;11
  58++E21D 1F 0B 00 28                          DB $1F, $0B, $00, $28               ;12
  59++E221 1F 9B 1C 28                          DB $1F, $9B, $1C, $28               ;13
  60++E225 1F 02 04 2C                          DB $1F, $02, $04, $2C               ;14
  61++E229 1F 24 08 2C                          DB $1F, $24, $08, $2C               ;15
  62++E22D 1F 1C 00 30                          DB $1F, $1C, $00, $30               ;16
  63++E231 1F AC 1C 30                          DB $1F, $AC, $1C, $30               ;17
  64++E235 1F 13 04 34                          DB $1F, $13, $04, $34               ;18
  65++E239 1F 35 08 34                          DB $1F, $35, $08, $34               ;19
  66++E23D 1F 0D 28 2C                          DB $1F, $0D, $28, $2C               ;20
  67++E241 1F 1E 30 34                          DB $1F, $1E, $30, $34               ;21
  68++E245 1F 9D 20 28                          DB $1F, $9D, $20, $28               ;22
  69++E249 1F 4D 24 2C                          DB $1F, $4D, $24, $2C               ;23
  70++E24D 1F AE 14 30                          DB $1F, $AE, $14, $30               ;24
  71++E251 1F 5E 10 34                          DB $1F, $5E, $10, $34               ;25
  72++E255 05 00 38 3C                          DB $05, $00, $38, $3C               ;26
  73++E259 03 00 3C 40                          DB $03, $00, $3C, $40               ;27
  74++E25D 04 00 40 44                          DB $04, $00, $40, $44               ;28
  75++E261 03 00 44 38                          DB $03, $00, $44, $38               ;29
  76++E265              AdderEdgesSize:         equ $ - AdderEdges
  77++E265              AdderEdgesCnt:          equ AdderEdgesSize/4
  78++E265 1F 00 27 0A  AdderNormals:	        DB $1F, $00, $27, $0A               ;01
  79++E269 5F 00 27 0A                          DB $5F, $00, $27, $0A               ;02
  80++E26D 1F 45 32 0D                          DB $1F, $45, $32, $0D               ;03
  81++E271 5F 45 32 0D                          DB $5F, $45, $32, $0D               ;04
  82++E275 1F 1E 34 00                          DB $1F, $1E, $34, $00               ;05
  83++E279 5F 1E 34 00                          DB $5F, $1E, $34, $00               ;06
  84++E27D 3F 00 00 A0                          DB $3F, $00, $00, $A0               ;07
  85++E281 3F 00 00 A0                          DB $3F, $00, $00, $A0               ;08
  86++E285 3F 00 00 A0                          DB $3F, $00, $00, $A0               ;09
  87++E289 9F 1E 34 00                          DB $9F, $1E, $34, $00               ;10
  88++E28D DF 1E 34 00                          DB $DF, $1E, $34, $00               ;11
  89++E291 9F 45 32 0D                          DB $9F, $45, $32, $0D               ;12
  90++E295 DF 45 32 0D                          DB $DF, $45, $32, $0D               ;13
  91++E299 1F 00 1C 00                          DB $1F, $00, $1C, $00               ;14
  92++E29D 5F 00 1C 00                          DB $5F, $00, $1C, $00               ;15
  93++E2A1
  94++E2A1              AdderNormalsSize:       equ $ - AdderNormals
  95++E2A1              AdderLen:                equ $ - Adder
  96++E2A1
  97++E2A1
  98++E2A1
  99++E2A1
 100++E2A1
 101++E2A1
 102++E2A1
 103++E2A1
 104++E2A1
 105++E2A1
 106++E2A1
# file closed: ./Data/ships/Adder.asm
  88+ E2A1                                      include "Data/ships/Anaconda.asm"
# file opened: ./Data/ships/Anaconda.asm
   1++E2A1 07           Anaconda:	            DB $07                                                        ; Number of cargo canisters released when destroyed
   2++E2A2 10 27                                DW 100 * 100                                                  ; Ship's targetable area LoHi
   3++E2A4 1A E3                                DW AnacondaEdges                                              ; Edge Data
   4++E2A6 64                                   DB AnacondaEdgesSize                                          ; Size of Edge Data
   5++E2A7 30                                   DB $30                                                        ; Gun Vertex Byte offset
   6++E2A8 2E                                   DB $2E                                                        ; Explosion Count
   7++E2A9 0F                                   DB AnacondaVertSize / 6                                       ; Vertex Count /6
   8++E2AA 5A                                   DB AnacondaVertSize                                           ; Vertex Count
   9++E2AB 19                                   DB AnacondaEdgesCnt                                           ; Edges Count
  10++E2AC 00 00                                DW $0000                                                      ; Bounty LoHi
  11++E2AE 30                                   DB AnacondaNormalsSize                                        ; Face (Normal) Count
  12++E2AF 24                                   DB $24                                                        ; Range when it turns to a dot
  13++E2B0 FC                                   DB $FC                                                        ; Energy Max
  14++E2B1 0E                                   DB $0E                                                        ; Speed Max
  15++E2B2 7E E3                                DW AnacondaNormals                                            ; Normals
  16++E2B4 11                                   DB $11                                                        ; Q scaling
  17++E2B5 3F                                   DB $3F                                                        ; Laser power and Nbr Missiles
  18++E2B6 C0 E2                                DW AnacondaVertices                                           ; Verticles Address
  19++E2B8 00                                   DB ShipTypeNormal                                             ; Ship Type
  20++E2B9 00                                   DB 0                                                          ; NewB Tactics
  21++E2BA A4                                   DB ShipCanAnger | ShipFighterBaySize2 | ShipFighterSidewinder ; AI Flags
  22++E2BB D0                                   DB $D0                                                        ; chance of ECM module
  23++E2BC FF                                   DB $FF                              ; Supports Solid Fill = false
  24++E2BD 00 00                                DW $0000                            ; no solid data
  25++E2BF 00                                   DB $00                              ; no solid data
  26++E2C0
  27++E2C0 00 07 3A 3E  AnacondaVertices:	    DB $00, $07, $3A, $3E, $01, $55 ;01
  27++E2C4 01 55
  28++E2C6 2B 0D 25 FE                          DB $2B, $0D, $25, $FE, $01, $22 ;02
  28++E2CA 01 22
  29++E2CC 1A 2F 03 FE                          DB $1A, $2F, $03, $FE, $02, $33 ;03
  29++E2D0 02 33
  30++E2D2 1A 2F 03 7E                          DB $1A, $2F, $03, $7E, $03, $44 ;04
  30++E2D6 03 44
  31++E2D8 2B 0D 25 7E                          DB $2B, $0D, $25, $7E, $04, $55 ;05
  31++E2DC 04 55
  32++E2DE 00 30 31 3E                          DB $00, $30, $31, $3E, $15, $66 ;06
  32++E2E2 15 66
  33++E2E4 45 0F 0F BE                          DB $45, $0F, $0F, $BE, $12, $77 ;07
  33++E2E8 12 77
  34++E2EA 2B 27 28 DF                          DB $2B, $27, $28, $DF, $23, $88 ;08
  34++E2EE 23 88
  35++E2F0 2B 27 28 5F                          DB $2B, $27, $28, $5F, $34, $99 ;09
  35++E2F4 34 99
  36++E2F6 45 0F 0F 3E                          DB $45, $0F, $0F, $3E, $45, $AA ;10
  36++E2FA 45 AA
  37++E2FC 2B 35 17 BF                          DB $2B, $35, $17, $BF, $FF, $FF ;11
  37++E300 FF FF
  38++E302 45 01 20 DF                          DB $45, $01, $20, $DF, $27, $88 ;12
  38++E306 27 88
  39++E308 00 00 FE 1F                          DB $00, $00, $FE, $1F, $FF, $FF ;13
  39++E30C FF FF
  40++E30E 45 01 20 5F                          DB $45, $01, $20, $5F, $49, $AA ;14
  40++E312 49 AA
  41++E314 2B 35 17 3F                          DB $2B, $35, $17, $3F, $FF, $FF ;15
  41++E318 FF FF
  42++E31A              AnacondaVertSize:       equ $ - AnacondaVertices
  43++E31A 1E 01 00 04  AnacondaEdges:	        DB $1E, $01, $00, $04           ;01
  44++E31E 1E 02 04 08                          DB $1E, $02, $04, $08           ;02
  45++E322 1E 03 08 0C                          DB $1E, $03, $08, $0C           ;03
  46++E326 1E 04 0C 10                          DB $1E, $04, $0C, $10           ;04
  47++E32A 1E 05 00 10                          DB $1E, $05, $00, $10           ;05
  48++E32E 1D 15 00 14                          DB $1D, $15, $00, $14           ;06
  49++E332 1D 12 04 18                          DB $1D, $12, $04, $18           ;07
  50++E336 1D 23 08 1C                          DB $1D, $23, $08, $1C           ;08
  51++E33A 1D 34 0C 20                          DB $1D, $34, $0C, $20           ;09
  52++E33E 1D 45 10 24                          DB $1D, $45, $10, $24           ;10
  53++E342 1E 16 14 28                          DB $1E, $16, $14, $28           ;11
  54++E346 1E 17 18 28                          DB $1E, $17, $18, $28           ;12
  55++E34A 1E 27 18 2C                          DB $1E, $27, $18, $2C           ;13
  56++E34E 1E 28 1C 2C                          DB $1E, $28, $1C, $2C           ;14
  57++E352 1F 38 1C 30                          DB $1F, $38, $1C, $30           ;15
  58++E356 1F 39 20 30                          DB $1F, $39, $20, $30           ;16
  59++E35A 1E 49 20 34                          DB $1E, $49, $20, $34           ;17
  60++E35E 1E 4A 24 34                          DB $1E, $4A, $24, $34           ;18
  61++E362 1E 5A 24 38                          DB $1E, $5A, $24, $38
  62++E366 1E 56 14 38                          DB $1E, $56, $14, $38
  63++E36A 1E 6B 28 38                          DB $1E, $6B, $28, $38
  64++E36E 1F 7B 28 30                          DB $1F, $7B, $28, $30
  65++E372 1F 78 2C 30                          DB $1F, $78, $2C, $30
  66++E376 1F 9A 30 34                          DB $1F, $9A, $30, $34
  67++E37A 1F AB 30 38                          DB $1F, $AB, $30, $38
  68++E37E              AnacondaEdgesSize:      equ $ - AnacondaEdges
  69++E37E              AnacondaEdgesCnt:       equ AnacondaEdgesSize/4
  70++E37E 7E 00 33 31  AnacondaNormals:	    DB $7E, $00, $33, $31           ;01
  71++E382 BE 33 12 57                          DB $BE, $33, $12, $57           ;02
  72++E386 FE 4D 39 13                          DB $FE, $4D, $39, $13           ;03
  73++E38A 5F 00 5A 10                          DB $5F, $00, $5A, $10           ;04
  74++E38E 7E 4D 39 13                          DB $7E, $4D, $39, $13           ;05
  75++E392 3E 33 12 57                          DB $3E, $33, $12, $57           ;06
  76++E396 3E 00 6F 14                          DB $3E, $00, $6F, $14           ;07
  77++E39A 9F 61 48 18                          DB $9F, $61, $48, $18           ;08
  78++E39E DF 6C 44 22                          DB $DF, $6C, $44, $22           ;09
  79++E3A2 5F 6C 44 22                          DB $5F, $6C, $44, $22           ;10
  80++E3A6 1F 61 48 18                          DB $1F, $61, $48, $18           ;11
  81++E3AA 1F 00 5E 12                          DB $1F, $00, $5E, $12           ;12
  82++E3AE              AnacondaNormalsSize:    equ $ - AnacondaNormals
  83++E3AE              AnacondaLen:            equ $ - Anaconda
  84++E3AE
  85++E3AE
  86++E3AE
  87++E3AE
# file closed: ./Data/ships/Anaconda.asm
  89+ E3AE                                      include "Data/ships/Asp_Mk_2.asm"
# file opened: ./Data/ships/Asp_Mk_2.asm
   1++E3AE 00           Asp_Mk_2:	            DB $00                          ; Number of cargo canisters released when destroyed
   2++E3AF 10 0E                                DW 60 * 60                      ; Ship's targetable area LoHi
   3++E3B1 3F E4                                DW Asp_Mk_2Edges                ; Edge Data
   4++E3B3 70                                   DB Asp_Mk_2EdgesSize            ; Size of Edge Data
   5++E3B4 20                                   DB $20                          ; Gun Vertex Byte offset
   6++E3B5 1A                                   DB $1A                          ; Explosion Count
   7++E3B6 13                                   DB Asp_Mk_2VertSize /6          ; Vertex Count /6
   8++E3B7 72                                   DB Asp_Mk_2VertSize             ; Vertex Count
   9++E3B8 1C                                   DB Asp_Mk_2EdgesCnt             ; Edges Count
  10++E3B9 C8 00                                DW $00C8                        ; Bounty LoHi
  11++E3BB 30                                   DB Asp_Mk_2NormalsSize          ; Face (Normal) Count
  12++E3BC 28                                   DB $28                          ; Range when it turns to a dot
  13++E3BD 96                                   DB $96                          ; Energy Max
  14++E3BE 28                                   DB $28                          ; Speed Max
  15++E3BF AF E4                                DW Asp_Mk_2Normals              ; Normals
  16++E3C1 01                                   DB $01                          ; Q scaling
  17++E3C2 29                                   DB $29                          ; Laser power and Nbr Missiles
  18++E3C3 CD E3                                DW Asp_Mk_2Vertices             ; Verticles Address
  19++E3C5 00                                   DB ShipTypeNormal               ; Ship Type
  20++E3C6 00                                   DB 0                            ; NewB Tactics
  21++E3C7 80                                   DB ShipCanAnger                 ; AI Flags
  22++E3C8 80                                   DB $80                          ; chance of ECM module
  23++E3C9 FF                                   DB $FF                              ; Supports Solid Fill = false
  24++E3CA 00 00                                DW $0000                            ; no solid data
  25++E3CC 00                                   DB $00                              ; no solid data
  26++E3CD
  27++E3CD 00 12 00 56  Asp_Mk_2Vertices:	    DB $00, $12, $00, $56, $01, $22 ;01
  27++E3D1 01 22
  28++E3D3 00 09 2D 7F                          DB $00, $09, $2D, $7F, $12, $BB ;02
  28++E3D7 12 BB
  29++E3D9 2B 00 2D 3F                          DB $2B, $00, $2D, $3F, $16, $BB ;03
  29++E3DD 16 BB
  30++E3DF 45 03 00 5F                          DB $45, $03, $00, $5F, $16, $79 ;04
  30++E3E3 16 79
  31++E3E5 2B 0E 1C 5F                          DB $2B, $0E, $1C, $5F, $01, $77 ;05
  31++E3E9 01 77
  32++E3EB 2B 00 2D BF                          DB $2B, $00, $2D, $BF, $25, $BB ;06
  32++E3EF 25 BB
  33++E3F1 45 03 00 DF                          DB $45, $03, $00, $DF, $25, $8A ;07
  33++E3F5 25 8A
  34++E3F7 2B 0E 1C DF                          DB $2B, $0E, $1C, $DF, $02, $88 ;08
  34++E3FB 02 88
  35++E3FD 1A 07 49 5F                          DB $1A, $07, $49, $5F, $04, $79 ;09
  35++E401 04 79
  36++E403 1A 07 49 DF                          DB $1A, $07, $49, $DF, $04, $8A ;10
  36++E407 04 8A
  37++E409 2B 0E 1C 1F                          DB $2B, $0E, $1C, $1F, $34, $69 ;11
  37++E40D 34 69
  38++E40F 2B 0E 1C 9F                          DB $2B, $0E, $1C, $9F, $34, $5A ;12
  38++E413 34 5A
  39++E415 00 09 2D 3F                          DB $00, $09, $2D, $3F, $35, $6B ;13
  39++E419 35 6B
  40++E41B 11 00 2D AA                          DB $11, $00, $2D, $AA, $BB, $BB ;14
  40++E41F BB BB
  41++E421 11 00 2D 29                          DB $11, $00, $2D, $29, $BB, $BB ;15
  41++E425 BB BB
  42++E427 00 04 2D 6A                          DB $00, $04, $2D, $6A, $BB, $BB ;16
  42++E42B BB BB
  43++E42D 00 04 2D 28                          DB $00, $04, $2D, $28, $BB, $BB ;17
  43++E431 BB BB
  44++E433 00 07 49 4A                          DB $00, $07, $49, $4A, $04, $04 ;18
  44++E437 04 04
  45++E439 00 07 53 4A                          DB $00, $07, $53, $4A, $04, $04 ;19
  45++E43D 04 04
  46++E43F              Asp_Mk_2VertSize:       equ $ - Asp_Mk_2Vertices
  47++E43F 16 12 00 04  Asp_Mk_2Edges:	        DB $16, $12, $00, $04           ;01
  48++E443 16 01 00 10                          DB $16, $01, $00, $10           ;02
  49++E447 16 02 00 1C                          DB $16, $02, $00, $1C           ;03
  50++E44B 1F 1B 04 08                          DB $1F, $1B, $04, $08           ;04
  51++E44F 1F 16 08 0C                          DB $1F, $16, $08, $0C           ;05
  52++E453 10 79 0C 20                          DB $10, $79, $0C, $20           ;06
  53++E457 1F 04 20 24                          DB $1F, $04, $20, $24           ;07
  54++E45B 10 8A 18 24                          DB $10, $8A, $18, $24           ;08
  55++E45F 1F 25 14 18                          DB $1F, $25, $14, $18           ;09
  56++E463 1F 2B 04 14                          DB $1F, $2B, $04, $14           ;10
  57++E467 1F 17 0C 10                          DB $1F, $17, $0C, $10           ;11
  58++E46B 1F 07 10 20                          DB $1F, $07, $10, $20           ;12
  59++E46F 1F 28 18 1C                          DB $1F, $28, $18, $1C           ;13
  60++E473 1F 08 1C 24                          DB $1F, $08, $1C, $24           ;14
  61++E477 1F 6B 08 30                          DB $1F, $6B, $08, $30           ;15
  62++E47B 1F 5B 14 30                          DB $1F, $5B, $14, $30           ;16
  63++E47F 16 36 28 30                          DB $16, $36, $28, $30           ;17
  64++E483 16 35 2C 30                          DB $16, $35, $2C, $30           ;18
  65++E487 16 34 28 2C                          DB $16, $34, $28, $2C
  66++E48B 1F 5A 18 2C                          DB $1F, $5A, $18, $2C
  67++E48F 1F 4A 24 2C                          DB $1F, $4A, $24, $2C
  68++E493 1F 69 0C 28                          DB $1F, $69, $0C, $28
  69++E497 1F 49 20 28                          DB $1F, $49, $20, $28
  70++E49B 0A BB 34 3C                          DB $0A, $BB, $34, $3C
  71++E49F 09 BB 3C 38                          DB $09, $BB, $3C, $38
  72++E4A3 08 BB 38 40                          DB $08, $BB, $38, $40
  73++E4A7 08 BB 40 34                          DB $08, $BB, $40, $34
  74++E4AB 0A 04 48 44                          DB $0A, $04, $48, $44
  75++E4AF              Asp_Mk_2EdgesSize:      equ $ - Asp_Mk_2Edges
  76++E4AF              Asp_Mk_2EdgesCnt:       equ Asp_Mk_2EdgesSize/4
  77++E4AF 5F 00 23 05  Asp_Mk_2Normals:	    DB $5F, $00, $23, $05           ;01
  78++E4B3 7F 08 26 07                          DB $7F, $08, $26, $07           ;02
  79++E4B7 FF 08 26 07                          DB $FF, $08, $26, $07           ;03
  80++E4BB 36 00 18 01                          DB $36, $00, $18, $01           ;04
  81++E4BF 1F 00 2B 13                          DB $1F, $00, $2B, $13           ;05
  82++E4C3 BF 06 1C 02                          DB $BF, $06, $1C, $02           ;06
  83++E4C7 3F 06 1C 02                          DB $3F, $06, $1C, $02           ;07
  84++E4CB 5F 3B 40 1F                          DB $5F, $3B, $40, $1F           ;08
  85++E4CF DF 3B 40 1F                          DB $DF, $3B, $40, $1F           ;09
  86++E4D3 1F 50 2E 32                          DB $1F, $50, $2E, $32           ;10
  87++E4D7 9F 50 2E 32                          DB $9F, $50, $2E, $32           ;11
  88++E4DB 3F 00 00 5A                          DB $3F, $00, $00, $5A           ;12
  89++E4DF              Asp_Mk_2NormalsSize:    equ $ - Asp_Mk_2Normals
  90++E4DF              Asp_Mk_2Len:            equ $ - Asp_Mk_2
  91++E4DF
  92++E4DF
  93++E4DF
  94++E4DF
# file closed: ./Data/ships/Asp_Mk_2.asm
  90+ E4DF                                      include "Data/ships/Boa.asm"
# file opened: ./Data/ships/Boa.asm
   1++E4DF 05           Boa:	                DB $05                          ; Number of cargo canisters released when destroyed
   2++E4E0 24 13                                DW 70 * 70                      ; Ship's targetable area LoHi
   3++E4E2 4C E5                                DW BoaEdges                     ; Edge Data
   4++E4E4 60                                   DB BoaEdgesSize                 ; Size of Edge Data
   5++E4E5 00                                   DB $00                          ; Gun Vertex Byte offset
   6++E4E6 26                                   DB $26                          ; Explosion Count
   7++E4E7 0D                                   DB BoaVertSize /6               ; Vertex Count /6
   8++E4E8 4E                                   DB BoaVertSize                  ; Vertex Count
   9++E4E9 18                                   DB BoaEdgesCnt                  ; Edges Count
  10++E4EA 00 00                                DW $0000                        ; Bounty LoHi
  11++E4EC 30                                   DB BoaNormalsSize               ; Face (Normal) Count
  12++E4ED 28                                   DB $28                          ; Range when it turns to a dot
  13++E4EE FA                                   DB $FA                          ; Energy Max
  14++E4EF 18                                   DB $18                          ; Speed Max
  15++E4F0 AC E5                                DW BoaNormals                   ; Normals
  16++E4F2 00                                   DB $00                          ; Q scaling
  17++E4F3 1C                                   DB $1C                          ; Laser power and Nbr Missiles
  18++E4F4 FE E4                                DW BoaVertices                  ; Verticles Address
  19++E4F6 00                                   DB ShipTypeNormal               ; Ship Type
  20++E4F7 00                                   DB 0                            ; NewB Tactics
  21++E4F8 80                                   DB ShipCanAnger                 ; AI Flags
  22++E4F9 A0                                   DB $A0                          ; chance of ECM module
  23++E4FA FF                                   DB $FF                              ; Supports Solid Fill = false
  24++E4FB 00 00                                DW $0000                            ; no solid data
  25++E4FD 00                                   DB $00                              ; no solid data
  26++E4FE
  27++E4FE 00 00 5D 1F  BoaVertices:	        DB $00, $00, $5D, $1F, $FF, $FF ; 01
  27++E502 FF FF
  28++E504 00 28 57 38                          DB $00, $28, $57, $38, $02, $33 ; 02
  28++E508 02 33
  29++E50A 26 19 63 78                          DB $26, $19, $63, $78, $01, $44 ; 03
  29++E50E 01 44
  30++E510 26 19 63 F8                          DB $26, $19, $63, $F8, $12, $55 ; 04
  30++E514 12 55
  31++E516 26 28 3B BF                          DB $26, $28, $3B, $BF, $23, $69 ; 05
  31++E51A 23 69
  32++E51C 26 28 3B 3F                          DB $26, $28, $3B, $3F, $03, $6B ; 06
  32++E520 03 6B
  33++E522 3E 00 43 3F                          DB $3E, $00, $43, $3F, $04, $8B ; 07
  33++E526 04 8B
  34++E528 18 41 4F 7F                          DB $18, $41, $4F, $7F, $14, $8A ; 08
  34++E52C 14 8A
  35++E52E 18 41 4F FF                          DB $18, $41, $4F, $FF, $15, $7A ; 09
  35++E532 15 7A
  36++E534 3E 00 43 BF                          DB $3E, $00, $43, $BF, $25, $79 ; 10
  36++E538 25 79
  37++E53A 00 07 6B 36                          DB $00, $07, $6B, $36, $02, $AA ; 11
  37++E53E 02 AA
  38++E540 0D 09 6B 76                          DB $0D, $09, $6B, $76, $01, $AA ; 12
  38++E544 01 AA
  39++E546 0D 09 6B F6                          DB $0D, $09, $6B, $F6, $12, $CC ; 13
  39++E54A 12 CC
  40++E54C              BoaVertSize:            equ $ - BoaVertices
  41++E54C 1F 6B 00 14  BoaEdges:	            DB $1F, $6B, $00, $14
  42++E550 1F 8A 00 1C                          DB $1F, $8A, $00, $1C
  43++E554 1F 79 00 24                          DB $1F, $79, $00, $24
  44++E558 1D 69 00 10                          DB $1D, $69, $00, $10
  45++E55C 1D 8B 00 18                          DB $1D, $8B, $00, $18
  46++E560 1D 7A 00 20                          DB $1D, $7A, $00, $20
  47++E564 1F 36 10 14                          DB $1F, $36, $10, $14
  48++E568 1F 0B 14 18                          DB $1F, $0B, $14, $18
  49++E56C 1F 48 18 1C                          DB $1F, $48, $18, $1C
  50++E570 1F 1A 1C 20                          DB $1F, $1A, $1C, $20
  51++E574 1F 57 20 24                          DB $1F, $57, $20, $24
  52++E578 1F 29 10 24                          DB $1F, $29, $10, $24
  53++E57C 18 23 04 10                          DB $18, $23, $04, $10
  54++E580 18 03 04 14                          DB $18, $03, $04, $14
  55++E584 18 25 0C 24                          DB $18, $25, $0C, $24
  56++E588 18 15 0C 20                          DB $18, $15, $0C, $20
  57++E58C 18 04 08 18                          DB $18, $04, $08, $18
  58++E590 18 14 08 1C                          DB $18, $14, $08, $1C
  59++E594 16 02 04 28                          DB $16, $02, $04, $28
  60++E598 16 01 08 2C                          DB $16, $01, $08, $2C
  61++E59C 16 12 0C 30                          DB $16, $12, $0C, $30
  62++E5A0 0E 0C 28 2C                          DB $0E, $0C, $28, $2C
  63++E5A4 0E 1C 2C 30                          DB $0E, $1C, $2C, $30
  64++E5A8 0E 2C 30 28                          DB $0E, $2C, $30, $28
  65++E5AC              BoaEdgesSize:           equ $ - BoaEdges
  66++E5AC              BoaEdgesCnt:            equ BoaEdgesSize/4
  67++E5AC 3F 2B 25 3C  BoaNormals:	            DB $3F, $2B, $25, $3C
  68++E5B0 7F 00 2D 59                          DB $7F, $00, $2D, $59
  69++E5B4 BF 2B 25 3C                          DB $BF, $2B, $25, $3C
  70++E5B8 1F 00 28 00                          DB $1F, $00, $28, $00
  71++E5BC 7F 3E 20 14                          DB $7F, $3E, $20, $14
  72++E5C0 FF 3E 20 14                          DB $FF, $3E, $20, $14
  73++E5C4 1F 00 17 06                          DB $1F, $00, $17, $06
  74++E5C8 DF 17 0F 09                          DB $DF, $17, $0F, $09
  75++E5CC 5F 17 0F 09                          DB $5F, $17, $0F, $09
  76++E5D0 9F 1A 0D 0A                          DB $9F, $1A, $0D, $0A
  77++E5D4 5F 00 1F 0C                          DB $5F, $00, $1F, $0C
  78++E5D8 1F 1A 0D 0A                          DB $1F, $1A, $0D, $0A
  79++E5DC              BoaNormalsSize:         equ $ - BoaNormals
  80++E5DC              BoaLen:                 equ $ - Boa
  81++E5DC
# file closed: ./Data/ships/Boa.asm
  91+ E5DC                                      include "Data/ships/CargoType5.asm"
# file opened: ./Data/ships/CargoType5.asm
   1++E5DC 00           CargoType5              DB $00                                     ; Number of cargo canisters released when destroyed
   2++E5DD 90 01                                DW 20 * 20                                 ; Ship's targetable area LoHi
   3++E5DF 37 E6                                DW CargoType5Edges                         ; Edge Data
   4++E5E1 3C                                   DB CargoType5EdgesSize                     ; Size of Edge Data
   5++E5E2 00                                   DB $00                                     ; Gun Vertex Byte offset
   6++E5E3 12                                   DB $12                                     ; Explosion Count
   7++E5E4 0A                                   DB CargoType5VertSize /6                   ; Vertex Count /6
   8++E5E5 3C                                   DB CargoType5VertSize                      ; Vertex Count
   9++E5E6 0F                                   DB CargoType5EdgesCnt                      ; Edges Count
  10++E5E7 00 00                                DW $0000                                   ; Bounty LoHi
  11++E5E9 1C                                   DB CargoType5NormalsSize                   ; Face (Normal) Count
  12++E5EA 0C                                   DB $0C                                     ; Range when it turns to a dot
  13++E5EB 11                                   DB $11                                     ; Energy Max
  14++E5EC 0F                                   DB $0F                                     ; Speed Max
  15++E5ED 73 E6                                DW CargoType5Normals                       ; Normals
  16++E5EF 02                                   DB $02                                     ; Q scaling
  17++E5F0 00                                   DB $00                                     ; Laser power and Nbr Missiles
  18++E5F1 FB E5                                DW CargoType5Vertices                      ; Verticles Address
  19++E5F3 04                                   DB ShipTypeScoopable                       ; Ship Type
  20++E5F4 00                                   DB 0                                       ; NewB Tactics
  21++E5F5 00                                   DB 0                                       ; AI Flags
  22++E5F6 00                                   DB $0                                      ; chance of ECM module
  23++E5F7 00                                   DB $00                                     ; Supports Solid Fill
  24++E5F8 8F E6                                DW CargoType5Traingles                  ;
  25++E5FA 21                                   DB CargoType5TrainglesSize
  26++E5FB              ; So cargo is               Edge offset $0050  Face Offset $008C, Verices will alwys be +20, LineMax 31 -> 4  EdgeCnt 15  VertexCnt 60 -> 10     FaceCn 28 -> 7
  27++E5FB              ;                                       Faces
  28++E5FB              ;                            X  Y    Z  12 34  Vis
  29++E5FB 18 10 00 1F  CargoType5Vertices		DB $18,$10,$00,$1F,$10,$55 	               ;00  Top Right
  29++E5FF 10 55
  30++E601 18 05 0F 1F                          DB $18,$05,$0F,$1F,$10,$22                 ;01  Mid Right Near
  30++E605 10 22
  31++E607 18 0D 09 5F                          DB $18,$0D,$09,$5F,$20,$33                 ;02  Bottom right Near
  31++E60B 20 33
  32++E60D 18 0D 09 7F                          DB $18,$0D,$09,$7F,$30,$44                 ;03  Bottom Right Rear
  32++E611 30 44
  33++E613 18 05 0F 3F                          DB $18,$05,$0F,$3F,$40,$55                 ;04  Mid Right Rear
  33++E617 40 55
  34++E619 18 10 00 9F                          DB $18,$10,$00,$9F,$51,$66                 ;05  Left versions
  34++E61D 51 66
  35++E61F 18 05 0F 9F                          DB $18,$05,$0F,$9F,$21,$66                 ;06
  35++E623 21 66
  36++E625 18 0D 09 DF                          DB $18,$0D,$09,$DF,$32,$66                 ;07
  36++E629 32 66
  37++E62B 18 0D 09 FF                          DB $18,$0D,$09,$FF,$43,$66                 ;08
  37++E62F 43 66
  38++E631 18 05 0F BF                          DB $18,$05,$0F,$BF,$54,$66                 ;09
  38++E635 54 66
  39++E637              CargoType5VertSize      equ $  - CargoType5Vertices
  40++E637              ;                          Vis  FacVert Offset (4 bytexVertnbr)
  41++E637              ;                               12  01 02
  42++E637 1F 10 00 04  CargoType5Edges			DB $1F,$10,$00,$04 	       ;00 Face  0,1
  43++E63B 1F 20 04 08                          DB $1F,$20,$04,$08         ;01
  44++E63F 1F 30 08 0C                          DB $1F,$30,$08,$0C         ;02
  45++E643 1F 40 0C 10                          DB $1F,$40,$0C,$10         ;03
  46++E647 1F 50 00 10                          DB $1F,$50,$00,$10         ;04
  47++E64B 1F 51 00 14                          DB $1F,$51,$00,$14         ;05
  48++E64F 1F 21 04 18                          DB $1F,$21,$04,$18         ;06
  49++E653 1F 32 08 1C                          DB $1F,$32,$08,$1C         ;07
  50++E657 1F 43 0C 20                          DB $1F,$43,$0C,$20         ;08
  51++E65B 1F 54 10 24                          DB $1F,$54,$10,$24         ;19
  52++E65F 1F 61 14 18                          DB $1F,$61,$14,$18         ;10
  53++E663 1F 62 18 1C                          DB $1F,$62,$18,$1C         ;11
  54++E667 1F 63 1C 20                          DB $1F,$63,$1C,$20         ;12
  55++E66B 1F 64 20 24                          DB $1F,$64,$20,$24         ;13
  56++E66F 1F 65 24 14                          DB $1F,$65,$24,$14         ;14
  57++E673              CargoType5EdgesSize     equ $  - CargoType5Edges
  58++E673              CargoType5EdgesCnt      equ CargoType5EdgesSize / 4
  59++E673              ;                           x  y    z   vis
  60++E673 1F 60 00 00  CargoType5Normals    	DB $1F,$60,$00,$00 			               ;00 Right side
  61++E677 1F 00 29 1E                          DB $1F,$00,$29,$1E                         ;01
  62++E67B 5F 00 12 30                          DB $5F,$00,$12,$30                         ;02
  63++E67F 5F 00 33 00                          DB $5F,$00,$33,$00                         ;03
  64++E683 7F 00 12 30                          DB $7F,$00,$12,$30                         ;04
  65++E687 3F 00 29 1E                          DB $3F,$00,$29,$1E                         ;05 Left
  66++E68B 9F 60 00 00                          DB $9F,$60,$00,$00   ; end Cargo cannister ;06 right side
  67++E68F              CargoType5NormalsSize   equ $  - CargoType5Normals
  68++E68F              CargoType5Len           equ $  - CargoType5
  69++E68F                                      ; Triangles is made of a list of edges
  70++E68F              ; Ideal is pointers have a DW at the end to the list of triangles and count
  71++E68F              ; for testing we will do a simple search
  72++E68F              ;                          Nrm NodeOffset X 1
  73++E68F              ;                                0    1    2
  74++E68F 00 00 04 10  CargoType5Traingles     DB $00,$00*4, $01*4, $04*4
  75++E693 00 04 08 10                          DB $00,$01*4, $02*4, $04*4
  76++E697 00 08 0C 10                          DB $00,$02*4, $03*4, $04*4
  77++E69B 01 00 10 14                          DB $01,$00*4, $04*4, $05*4
  78++E69F 01 10 14 18                          DB $01,$04*4, $05*4, $06*4
  79++E6A3                                  ;   DB $02,
  80++E6A3                                  ;   DB $03,
  81++E6A3                                  ;   DB $03,
  82++E6A3                                  ;   DB $04,
  83++E6A3                                  ;   DB $04,
  84++E6A3                                  ;   DB $01,
  85++E6A3                                  ;   DB $01,
  86++E6A3                                  ;   DB $01,
  87++E6A3                                  ;   DB $01,
  88++E6A3 06 14 18 24                          DB $06,$05*4, $06*4, $09*4 ; its we store UBNkNodeArray + this offset it will save one memroy ready
  89++E6A7 06 18 1C 24                          DB $06,$06*4, $07*4, $09*4
  90++E6AB 06 1C 20 24                          DB $06,$07*4, $08*4, $09*4
  91++E6AF FF                                   DB $FF ; Very important end of traingle list marker
  92++E6B0              CargoType5TrainglesSize:equ $  -  CargoType5Traingles
  93++E6B0
  94++E6B0
  95++E6B0
# file closed: ./Data/ships/CargoType5.asm
  92+ E6B0                                      include "Data/ships/Boulder.asm"
# file opened: ./Data/ships/Boulder.asm
   1++E6B0 00           Boulder:	            DB $00                               ; Number of cargo canisters released when destroyed
   2++E6B1 84 03                                DW 30 * 30                           ; Ship's targetable area LoHi
   3++E6B3 F9 E6                                DW BoulderEdges                      ; Edge Data
   4++E6B5 3C                                   DB BoulderEdgesSize                  ; Size of Edge Data
   5++E6B6 00                                   DB $00                               ; Gun Vertex Byte offset
   6++E6B7 0E                                   DB $0E                               ; Explosion Count
   7++E6B8 07                                   DB BoulderVertSize /6                ; Vertex Count /6
   8++E6B9 2A                                   DB BoulderVertSize                   ; Vertex Count
   9++E6BA 0F                                   DB BoulderEdgesCnt                   ; Edges Count
  10++E6BB 01 00                                DW $0001                             ; Bounty LoHi
  11++E6BD 28                                   DB BoulderNormalsSize                ; Face (Normal) Count
  12++E6BE 14                                   DB $14                               ; Range when it turns to a dot
  13++E6BF 14                                   DB $14                               ; Energy Max
  14++E6C0 1E                                   DB $1E                               ; Speed Max
  15++E6C1 35 E7                                DW BoulderNormals                    ; Normals
  16++E6C3 02                                   DB $02                               ; Q scaling
  17++E6C4 00                                   DB $00                               ; Laser power and Nbr Missiles
  18++E6C5 CF E6                                DW BoulderVertices                   ; Verticles Address
  19++E6C7 03                                   DB ShipTypeJunk                      ; Ship Type
  20++E6C8 00                                   DB 0                                 ; NewB Tactics
  21++E6C9 00                                   DB 0                                 ; AI Flags
  22++E6CA A0                                   DB $A0                               ; chance of ECM module
  23++E6CB FF                                   DB $FF                              ; Supports Solid Fill = false
  24++E6CC 00 00                                DW $0000                            ; no solid data
  25++E6CE 00                                   DB $00                              ; no solid data
  26++E6CF
  27++E6CF 12 25 0B BF  BoulderVertices:	    DB $12, $25, $0B, $BF, $01, $59
  27++E6D3 01 59
  28++E6D5 1E 07 0C 1F                          DB $1E, $07, $0C, $1F, $12, $56
  28++E6D9 12 56
  29++E6DB 1C 07 0C 7F                          DB $1C, $07, $0C, $7F, $23, $67
  29++E6DF 23 67
  30++E6E1 02 00 27 3F                          DB $02, $00, $27, $3F, $34, $78
  30++E6E5 34 78
  31++E6E7 1C 22 1E BF                          DB $1C, $22, $1E, $BF, $04, $89
  31++E6EB 04 89
  32++E6ED 05 0A 0D 5F                          DB $05, $0A, $0D, $5F, $FF, $FF
  32++E6F1 FF FF
  33++E6F3 14 11 1E 3F                          DB $14, $11, $1E, $3F, $FF, $FF
  33++E6F7 FF FF
  34++E6F9              BoulderVertSize:        equ $ - BoulderVertices
  35++E6F9 1F 15 00 04  BoulderEdges:	        DB $1F, $15, $00, $04
  36++E6FD 1F 26 04 08                          DB $1F, $26, $04, $08
  37++E701 1F 37 08 0C                          DB $1F, $37, $08, $0C
  38++E705 1F 48 0C 10                          DB $1F, $48, $0C, $10
  39++E709 1F 09 10 00                          DB $1F, $09, $10, $00
  40++E70D 1F 01 00 14                          DB $1F, $01, $00, $14
  41++E711 1F 12 04 14                          DB $1F, $12, $04, $14
  42++E715 1F 23 08 14                          DB $1F, $23, $08, $14
  43++E719 1F 34 0C 14                          DB $1F, $34, $0C, $14
  44++E71D 1F 04 10 14                          DB $1F, $04, $10, $14
  45++E721 1F 59 00 18                          DB $1F, $59, $00, $18
  46++E725 1F 56 04 18                          DB $1F, $56, $04, $18
  47++E729 1F 67 08 18                          DB $1F, $67, $08, $18
  48++E72D 1F 78 0C 18                          DB $1F, $78, $0C, $18
  49++E731 1F 89 10 18                          DB $1F, $89, $10, $18
  50++E735              BoulderEdgesSize:       equ $ - BoulderEdges
  51++E735              BoulderEdgesCnt:        equ BoulderEdgesSize/4
  52++E735 DF 0F 03 08  BoulderNormals:	        DB $DF, $0F, $03, $08
  53++E739 9F 07 0C 1E                          DB $9F, $07, $0C, $1E
  54++E73D 5F 20 2F 18                          DB $5F, $20, $2F, $18
  55++E741 FF 03 27 07                          DB $FF, $03, $27, $07
  56++E745 FF 05 04 01                          DB $FF, $05, $04, $01
  57++E749 1F 31 54 08                          DB $1F, $31, $54, $08
  58++E74D 3F 70 15 15                          DB $3F, $70, $15, $15
  59++E751 7F 4C 23 52                          DB $7F, $4C, $23, $52
  60++E755 3F 16 38 89                          DB $3F, $16, $38, $89
  61++E759 3F 28 6E 26                          DB $3F, $28, $6E, $26
  62++E75D              BoulderNormalsSize:     equ $ - BoulderNormals
  63++E75D              BoulderLen:             equ $ - Boulder
  64++E75D
# file closed: ./Data/ships/Boulder.asm
  93+ E75D                                      include "Data/ships/Asteroid.asm"
# file opened: ./Data/ships/Asteroid.asm
   1++E75D 00           Asteroid:	            DB $00                          ; Number of cargo canisters released when destroyed
   2++E75E 00 19                                DW 80 * 80                      ; Ship's targetable area LoHi
   3++E760 B2 E7                                DW AsteroidEdges                ; Edge Data
   4++E762 54                                   DB AsteroidEdgesSize            ; Size of Edge Data
   5++E763 00                                   DB $00                          ; Gun Vertex Byte offset
   6++E764 22                                   DB $22                          ; Explosion Count
   7++E765 09                                   DB AsteroidVertSize /6          ; Vertex Count /6
   8++E766 36                                   DB AsteroidVertSize             ; Vertex Count
   9++E767 15                                   DB AsteroidEdgesCnt             ; Edges Count
  10++E768 05 00                                DW $0005                        ; Bounty LoHi
  11++E76A 38                                   DB AsteroidNormalsSize          ; Face (Normal) Count
  12++E76B 32                                   DB $32                          ; Range when it turns to a dot
  13++E76C 3C                                   DB $3C                          ; Energy Max
  14++E76D 1E                                   DB $1E                          ; Speed Max
  15++E76E 06 E8                                DW AsteroidNormals              ; Normals
  16++E770 01                                   DB $01                          ; Q scaling
  17++E771 00                                   DB $00                          ; Laser power and Nbr Missiles
  18++E772 7C E7                                DW AsteroidVertices             ; Verticles Address
  19++E774 03                                   DB ShipTypeJunk                 ; Ship Type
  20++E775 00                                   DB 0                            ; NewB Tactics
  21++E776 00                                   DB 0                            ; AI Flags
  22++E777 00                                   DB $00                          ; chance of ECM module
  23++E778 FF                                   DB $FF                              ; Supports Solid Fill = false
  24++E779 00 00                                DW $0000                            ; no solid data
  25++E77B 00                                   DB $00                              ; no solid data
  26++E77C
  27++E77C 00 50 00 1F  AsteroidVertices:	    DB $00, $50, $00, $1F, $FF, $FF ;01
  27++E780 FF FF
  28++E782 50 0A 00 DF                          DB $50, $0A, $00, $DF, $FF, $FF ;02
  28++E786 FF FF
  29++E788 00 50 00 5F                          DB $00, $50, $00, $5F, $FF, $FF ;03
  29++E78C FF FF
  30++E78E 46 28 00 5F                          DB $46, $28, $00, $5F, $FF, $FF ;04
  30++E792 FF FF
  31++E794 3C 32 00 1F                          DB $3C, $32, $00, $1F, $65, $DC ;05
  31++E798 65 DC
  32++E79A 32 00 3C 1F                          DB $32, $00, $3C, $1F, $FF, $FF ;06
  32++E79E FF FF
  33++E7A0 28 00 46 9F                          DB $28, $00, $46, $9F, $10, $32 ;07
  33++E7A4 10 32
  34++E7A6 00 1E 4B 3F                          DB $00, $1E, $4B, $3F, $FF, $FF ;08
  34++E7AA FF FF
  35++E7AC 00 32 3C 7F                          DB $00, $32, $3C, $7F, $98, $BA ;09
  35++E7B0 98 BA
  36++E7B2              AsteroidVertSize:       equ $ - AsteroidVertices
  37++E7B2 1F 72 00 04  AsteroidEdges:	        DB $1F, $72, $00, $04           ;01
  38++E7B6 1F D6 00 10                          DB $1F, $D6, $00, $10           ;02
  39++E7BA 1F C5 0C 10                          DB $1F, $C5, $0C, $10           ;03
  40++E7BE 1F B4 08 0C                          DB $1F, $B4, $08, $0C           ;04
  41++E7C2 1F A3 04 08                          DB $1F, $A3, $04, $08           ;05
  42++E7C6 1F 32 04 18                          DB $1F, $32, $04, $18           ;06
  43++E7CA 1F 31 08 18                          DB $1F, $31, $08, $18           ;07
  44++E7CE 1F 41 08 14                          DB $1F, $41, $08, $14           ;08
  45++E7D2 1F 10 14 18                          DB $1F, $10, $14, $18           ;09
  46++E7D6 1F 60 00 14                          DB $1F, $60, $00, $14           ;10
  47++E7DA 1F 54 0C 14                          DB $1F, $54, $0C, $14           ;11
  48++E7DE 1F 20 00 18                          DB $1F, $20, $00, $18           ;12
  49++E7E2 1F 65 10 14                          DB $1F, $65, $10, $14           ;13
  50++E7E6 1F A8 04 20                          DB $1F, $A8, $04, $20           ;14
  51++E7EA 1F 87 04 1C                          DB $1F, $87, $04, $1C           ;15
  52++E7EE 1F D7 00 1C                          DB $1F, $D7, $00, $1C           ;16
  53++E7F2 1F DC 10 1C                          DB $1F, $DC, $10, $1C           ;17
  54++E7F6 1F C9 0C 1C                          DB $1F, $C9, $0C, $1C           ;18
  55++E7FA 1F B9 0C 20                          DB $1F, $B9, $0C, $20
  56++E7FE 1F BA 08 20                          DB $1F, $BA, $08, $20
  57++E802 1F 98 1C 20                          DB $1F, $98, $1C, $20
  58++E806
  59++E806              AsteroidEdgesSize:      equ $ - AsteroidEdges
  60++E806              AsteroidEdgesCnt:       equ AsteroidEdgesSize/4
  61++E806 1F 09 42 51  AsteroidNormals:	    DB $1F, $09, $42, $51           ;01
  62++E80A 5F 09 42 51                          DB $5F, $09, $42, $51           ;02
  63++E80E 9F 48 40 1F                          DB $9F, $48, $40, $1F           ;03
  64++E812 DF 40 49 2F                          DB $DF, $40, $49, $2F           ;04
  65++E816 5F 2D 4F 41                          DB $5F, $2D, $4F, $41           ;05
  66++E81A 1F 87 0F 23                          DB $1F, $87, $0F, $23           ;06
  67++E81E 1F 26 4C 46                          DB $1F, $26, $4C, $46           ;07
  68++E822 BF 42 3B 27                          DB $BF, $42, $3B, $27           ;08
  69++E826 FF 43 0F 50                          DB $FF, $43, $0F, $50           ;09
  70++E82A 7F 42 0E 4B                          DB $7F, $42, $0E, $4B           ;10
  71++E82E FF 46 50 28                          DB $FF, $46, $50, $28           ;11
  72++E832 7F 3A 66 33                          DB $7F, $3A, $66, $33           ;12
  73++E836 3F 51 09 43                          DB $3F, $51, $09, $43           ;13
  74++E83A 3F 2F 5E 3F                          DB $3F, $2F, $5E, $3F           ;14
  75++E83E              AsteroidNormalsSize:    equ $ - AsteroidNormals
  76++E83E              AsteroidLen:            equ $ - Asteroid
  77++E83E
  78++E83E
# file closed: ./Data/ships/Asteroid.asm
  94+ E83E                                      include "Data/ships/Bushmaster.asm"
# file opened: ./Data/ships/Bushmaster.asm
   1++E83E 00           Bushmaster:	            DB $00                           ; Number of cargo canisters released when destroyed
   2++E83F 9A 10                                DW $109A                         ; Ship's targetable area LoHi
   3++E841 A5 E8                                DW BushmasterEdges               ; Edge Data
   4++E843 4C                                   DB BushmasterEdgesSize           ; Size of Edge Data
   5++E844 00                                   DB $00                           ; Gun Vertex Byte offset
   6++E845 1E                                   DB $1E                           ; Explosion Count
   7++E846 0C                                   DB BushmasterVertSize /6         ; Vertex Count /6
   8++E847 48                                   DB BushmasterVertSize            ; Vertex Count
   9++E848 13                                   DB BushmasterEdgesCnt            ; Edges Count
  10++E849 96 00                                DW $0096                         ; Bounty LoHi
  11++E84B 24                                   DB BushmasterNormalsSize         ; Face (Normal) Count
  12++E84C 14                                   DB $14                           ; Range when it turns to a dot
  13++E84D 4A                                   DB $4A                           ; Energy Max
  14++E84E 23                                   DB $23                           ; Speed Max
  15++E84F F1 E8                                DW BushmasterNormals             ; Normals
  16++E851 02                                   DB $02                           ; Q scaling
  17++E852 21                                   DB $20 | ShipMissiles1           ; Laser power and Nbr Missiles
  18++E853 5D E8                                DW BushmasterVertices            ; Verticles Address
  19++E855 00                                   DB ShipTypeNormal                ; Ship Type
  20++E856 00                                   DB 0                             ; NewB Tactics
  21++E857 80                                   DB ShipCanAnger                  ; AI Flags
  22++E858 70                                   DB $70                           ; chance of ECM module
  23++E859 FF                                   DB $FF                              ; Supports Solid Fill = false
  24++E85A 00 00                                DW $0000                            ; no solid data
  25++E85C 00                                   DB $00                              ; no solid data
  26++E85D
  27++E85D 00 00 3C 1F  BushmasterVertices:	    DB $00, $00, $3C, $1F, $23, $01  ; 01
  27++E861 23 01
  28++E863 32 00 14 1F                          DB $32, $00, $14, $1F, $57, $13  ; 02
  28++E867 57 13
  29++E869 32 00 14 9F                          DB $32, $00, $14, $9F, $46, $02  ; 03
  29++E86D 46 02
  30++E86F 00 14 00 1F                          DB $00, $14, $00, $1F, $45, $01  ; 04
  30++E873 45 01
  31++E875 00 14 28 7F                          DB $00, $14, $28, $7F, $FF, $FF  ; 05
  31++E879 FF FF
  32++E87B 00 0E 28 3F                          DB $00, $0E, $28, $3F, $88, $45  ; 06
  32++E87F 88 45
  33++E881 28 00 28 3F                          DB $28, $00, $28, $3F, $88, $57  ; 07
  33++E885 88 57
  34++E887 28 00 28 BF                          DB $28, $00, $28, $BF, $88, $46  ; 08
  34++E88B 88 46
  35++E88D 00 04 28 2A                          DB $00, $04, $28, $2A, $88, $88  ; 09
  35++E891 88 88
  36++E893 0A 00 28 2A                          DB $0A, $00, $28, $2A, $88, $88  ; 10
  36++E897 88 88
  37++E899 00 04 28 6A                          DB $00, $04, $28, $6A, $88, $88  ; 11
  37++E89D 88 88
  38++E89F 0A 00 28 AA                          DB $0A, $00, $28, $AA, $88, $88  ; 12           ; 12 * 6 = 72
  38++E8A3 88 88
  39++E8A5              BushmasterVertSize:     equ $ - BushmasterVertices
  40++E8A5 1F 13 00 04  BushmasterEdges:	    DB $1F, $13, $00, $04            ; 01
  41++E8A9 1F 02 00 08                          DB $1F, $02, $00, $08            ; 02
  42++E8AD 1F 01 00 0C                          DB $1F, $01, $00, $0C            ; 03
  43++E8B1 1F 23 00 10                          DB $1F, $23, $00, $10            ; 04
  44++E8B5 1F 45 0C 14                          DB $1F, $45, $0C, $14            ; 05
  45++E8B9 1F 04 08 0C                          DB $1F, $04, $08, $0C            ; 06
  46++E8BD 1F 15 04 0C                          DB $1F, $15, $04, $0C            ; 07
  47++E8C1 1F 46 08 1C                          DB $1F, $46, $08, $1C            ; 08
  48++E8C5 1F 57 04 18                          DB $1F, $57, $04, $18            ; 09
  49++E8C9 1F 26 08 10                          DB $1F, $26, $08, $10            ; 10
  50++E8CD 1F 37 04 10                          DB $1F, $37, $04, $10            ; 11
  51++E8D1 1F 48 14 1C                          DB $1F, $48, $14, $1C            ; 12
  52++E8D5 1F 58 14 18                          DB $1F, $58, $14, $18            ; 13
  53++E8D9 1F 68 10 1C                          DB $1F, $68, $10, $1C            ; 14
  54++E8DD 1F 78 10 18                          DB $1F, $78, $10, $18            ; 15
  55++E8E1 0A 88 20 24                          DB $0A, $88, $20, $24            ; 16
  56++E8E5 0A 88 24 28                          DB $0A, $88, $24, $28            ; 17
  57++E8E9 0A 88 28 2C                          DB $0A, $88, $28, $2C            ; 18
  58++E8ED 0A 88 2C 20                          DB $0A, $88, $2C, $20            ; 19           ; 19 * 4 = 76
  59++E8F1              BushmasterEdgesSize:    equ $ - BushmasterEdges
  60++E8F1              BushmasterEdgesCnt:     equ BushmasterEdgesSize/4        ;
  61++E8F1 9F 17 58 1D  BushmasterNormals:	    DB $9F, $17, $58, $1D            ; 01
  62++E8F5 1F 17 58 1D                          DB $1F, $17, $58, $1D            ; 02
  63++E8F9 DF 0E 5D 12                          DB $DF, $0E, $5D, $12            ; 03
  64++E8FD 5F 0E 5D 12                          DB $5F, $0E, $5D, $12            ; 04
  65++E901 BF 1F 59 0D                          DB $BF, $1F, $59, $0D            ; 05
  66++E905 3F 1F 59 0D                          DB $3F, $1F, $59, $0D            ; 06
  67++E909 FF 2A 55 07                          DB $FF, $2A, $55, $07            ; 07
  68++E90D 7F 2A 55 07                          DB $7F, $2A, $55, $07            ; 08
  69++E911 3F 00 00 60                          DB $3F, $00, $00, $60            ; 09           ; 9 * 4 = 36
  70++E915              BushmasterNormalsSize:  equ $ - BushmasterNormals
  71++E915              BushmasterLen:          equ $ - Bushmaster
  72++E915
# file closed: ./Data/ships/Bushmaster.asm
  95+ E915                                      include "Data/ships/Chameleon.asm"
# file opened: ./Data/ships/Chameleon.asm
   1++E915 03           Chameleon:	            DB $03                          ; Number of cargo canisters released when destroyed
   2++E916 A0 0F                                DW $0FA0                        ; Ship's targetable area LoHi
   3++E918 9F E9                                DW ChameleonEdges               ; Edge Data
   4++E91A 74                                   DB ChameleonEdgesSize           ; Size of Edge Data
   5++E91B 00                                   DB $00                          ; Gun Vertex Byte offset
   6++E91C 1A                                   DB $1A                          ; Explosion Count
   7++E91D 12                                   DB ChameleonVertSize /6         ; Vertex Count /6
   8++E91E 6C                                   DB ChameleonVertSize            ; Vertex Count
   9++E91F 1D                                   DB ChameleonEdgesCnt            ; Edges Count
  10++E920 C8                                   DB $00C8                        ; Bounty LoHi
  11++E921 34                                   DB ChameleonNormalsSize         ; Face (Normal) Count
  12++E922 0A                                   DB $0A                          ; Range when it turns to a dot
  13++E923 64                                   DB $64                          ; Energy Max
  14++E924 1D                                   DB $1D                          ; Speed Max
  15++E925 13 EA                                DW ChameleonNormals             ; Normals
  16++E927 01                                   DB $01                          ; Q scaling
  17++E928 23                                   DB $23                          ; Laser power and Nbr Missiles
  18++E929 33 E9                                DW ChameleonVertices            ; Verticles Address
  19++E92B 00                                   DB ShipTypeNormal               ; Ship Type
  20++E92C 00                                   DB 0                            ; NewB Tactics
  21++E92D 80                                   DB ShipCanAnger                 ; AI Flags
  22++E92E 40                                   DB $40                          ; chance of ECM module
  23++E92F FF                                   DB $FF                              ; Supports Solid Fill = false
  24++E930 00 00                                DW $0000                            ; no solid data
  25++E932 00                                   DB $00                              ; no solid data
  26++E933
  27++E933 12 00 6E 9F  ChameleonVertices:	    DB $12, $00, $6E, $9F, $25, $01
  27++E937 25 01
  28++E939 12 00 6E 1F                          DB $12, $00, $6E, $1F, $34, $01
  28++E93D 34 01
  29++E93F 28 00 00 9F                          DB $28, $00, $00, $9F, $8B, $25
  29++E943 8B 25
  30++E945 08 18 00 9F                          DB $08, $18, $00, $9F, $68, $22
  30++E949 68 22
  31++E94B 08 18 00 1F                          DB $08, $18, $00, $1F, $69, $33
  31++E94F 69 33
  32++E951 28 00 00 1F                          DB $28, $00, $00, $1F, $9A, $34
  32++E955 9A 34
  33++E957 08 18 00 5F                          DB $08, $18, $00, $5F, $7A, $44
  33++E95B 7A 44
  34++E95D 08 18 00 DF                          DB $08, $18, $00, $DF, $7B, $55
  34++E961 7B 55
  35++E963 00 18 28 1F                          DB $00, $18, $28, $1F, $36, $02
  35++E967 36 02
  36++E969 00 18 28 5F                          DB $00, $18, $28, $5F, $57, $14
  36++E96D 57 14
  37++E96F 20 00 28 BF                          DB $20, $00, $28, $BF, $BC, $88
  37++E973 BC 88
  38++E975 00 18 28 3F                          DB $00, $18, $28, $3F, $9C, $68
  38++E979 9C 68
  39++E97B 20 00 28 3F                          DB $20, $00, $28, $3F, $AC, $99
  39++E97F AC 99
  40++E981 00 18 28 7F                          DB $00, $18, $28, $7F, $BC, $7A
  40++E985 BC 7A
  41++E987 08 00 28 AA                          DB $08, $00, $28, $AA, $CC, $CC
  41++E98B CC CC
  42++E98D 00 08 28 2A                          DB $00, $08, $28, $2A, $CC, $CC
  42++E991 CC CC
  43++E993 08 00 28 2A                          DB $08, $00, $28, $2A, $CC, $CC
  43++E997 CC CC
  44++E999 00 08 28 6A                          DB $00, $08, $28, $6A, $CC, $CC
  44++E99D CC CC
  45++E99F              ChameleonVertSize:      equ $ - ChameleonVertices
  46++E99F 1F 01 00 04  ChameleonEdges:	        DB $1F, $01, $00, $04
  47++E9A3 1F 02 00 20                          DB $1F, $02, $00, $20
  48++E9A7 1F 15 00 24                          DB $1F, $15, $00, $24
  49++E9AB 1F 03 04 20                          DB $1F, $03, $04, $20
  50++E9AF 1F 14 04 24                          DB $1F, $14, $04, $24
  51++E9B3 1F 34 04 14                          DB $1F, $34, $04, $14
  52++E9B7 1F 25 00 08                          DB $1F, $25, $00, $08
  53++E9BB 1F 26 0C 20                          DB $1F, $26, $0C, $20
  54++E9BF 1F 36 10 20                          DB $1F, $36, $10, $20
  55++E9C3 1F 75 1C 24                          DB $1F, $75, $1C, $24
  56++E9C7 1F 74 18 24                          DB $1F, $74, $18, $24
  57++E9CB 1F 39 10 14                          DB $1F, $39, $10, $14
  58++E9CF 1F 4A 14 18                          DB $1F, $4A, $14, $18
  59++E9D3 1F 28 08 0C                          DB $1F, $28, $08, $0C
  60++E9D7 1F 5B 08 1C                          DB $1F, $5B, $08, $1C
  61++E9DB 1F 8B 08 28                          DB $1F, $8B, $08, $28
  62++E9DF 1F 9A 14 30                          DB $1F, $9A, $14, $30
  63++E9E3 1F 68 0C 2C                          DB $1F, $68, $0C, $2C
  64++E9E7 1F 7B 1C 34                          DB $1F, $7B, $1C, $34
  65++E9EB 1F 69 10 2C                          DB $1F, $69, $10, $2C
  66++E9EF 1F 7A 18 34                          DB $1F, $7A, $18, $34
  67++E9F3 1F 8C 28 2C                          DB $1F, $8C, $28, $2C
  68++E9F7 1F BC 28 34                          DB $1F, $BC, $28, $34
  69++E9FB 1F 9C 2C 30                          DB $1F, $9C, $2C, $30
  70++E9FF 1F AC 30 34                          DB $1F, $AC, $30, $34
  71++EA03 0A CC 38 3C                          DB $0A, $CC, $38, $3C
  72++EA07 0A CC 3C 40                          DB $0A, $CC, $3C, $40
  73++EA0B 0A CC 40 44                          DB $0A, $CC, $40, $44
  74++EA0F 0A CC 44 38                          DB $0A, $CC, $44, $38
  75++EA13              ChameleonEdgesSize:     equ $ - ChameleonEdges
  76++EA13              ChameleonEdgesCnt:      equ ChameleonEdgesSize/4
  77++EA13 1F 00 5A 1F  ChameleonNormals:	    DB $1F, $00, $5A, $1F
  78++EA17 5F 00 5A 1F                          DB $5F, $00, $5A, $1F
  79++EA1B 9F 39 4C 0B                          DB $9F, $39, $4C, $0B
  80++EA1F 1F 39 4C 0B                          DB $1F, $39, $4C, $0B
  81++EA23 5F 39 4C 0B                          DB $5F, $39, $4C, $0B
  82++EA27 DF 39 4C 0B                          DB $DF, $39, $4C, $0B
  83++EA2B 1F 00 60 00                          DB $1F, $00, $60, $00
  84++EA2F 5F 00 60 00                          DB $5F, $00, $60, $00
  85++EA33 BF 39 4C 0B                          DB $BF, $39, $4C, $0B
  86++EA37 3F 39 4C 0B                          DB $3F, $39, $4C, $0B
  87++EA3B 7F 39 4C 0B                          DB $7F, $39, $4C, $0B
  88++EA3F FF 39 4C 0B                          DB $FF, $39, $4C, $0B
  89++EA43 3F 00 00 60                          DB $3F, $00, $00, $60
  90++EA47              ChameleonNormalsSize:   equ $ - ChameleonNormals
  91++EA47              ChameleonLen:           equ $ - Chameleon
  92++EA47
# file closed: ./Data/ships/Chameleon.asm
  96+ EA47                                      include "Data/ships/CobraMk3.asm"
# file opened: ./Data/ships/CobraMk3.asm
   1++EA47              ; Corrected pointers
   2++EA47              ;                      0    1    2  3  4  5   6   7   8   9   10  11  12   13  14  15   16 17 18 19    20    21
   3++EA47              ;					   Scp  Missile Edge  Lin Gun Exp Vtx Edg Bounty  Face              Face           Vertices
   4++EA47              ;                      Deb  Lock    Lo Hi x4  Vtx Cnt x6  X1  lo  hi  x4   Dot Erg Spd  Lo Hi Q  Laser Lo    hi
   5++EA47 03           CobraMk3    		    DB $03                            ; Number of cargo canisters released when destroyed
   6++EA48 41 23                                DW $2341                          ; Ship's targetable area LoHi
   7++EA4A 0E EB                                DW CobraMk3Edges                  ; Edge Data
   8++EA4C 98                                   DB CobraMkEdgesSize               ; Size of Edge Data
   9++EA4D 54                                   DB $54                            ; Gun Vertex Byte offset
  10++EA4E 2A                                   DB $2A                            ; Explosion Count
  11++EA4F 1C                                   DB CobraMkVertSize /6             ; Vertex Count /6
  12++EA50 A8                                   DB CobraMkVertSize                ; Vertex Count
  13++EA51 26                                   DB CobraMkEdgesCnt                ; Edges Count
  14++EA52 00 00                                DW $0000                          ; Bounty LoHi
  15++EA54 34                                   DB CobraMk3NormalsSize            ; Face (Normal) Count
  16++EA55 32                                   DB $32                            ; Range when it turns to a dot
  17++EA56 96                                   DB $96                            ; Energy Max
  18++EA57 1C                                   DB $1C                            ; Speed Max
  19++EA58 A6 EB                                DW CobraMk3Normals                ; Normals
  20++EA5A 01                                   DB $01                            ; Q scaling
  21++EA5B 34                                   DB $30 | ShipMissiles4            ; Laser power and Nbr Missiles
  22++EA5C 66 EA                                DW CobraMk3Vertices               ; Verticles Address
  23++EA5E 00                                   DB ShipTypeNormal                 ; Ship Type
  24++EA5F 00                                   DB 0                              ; NewB Tactics
  25++EA60 80                                   DB ShipCanAnger                   ; AI Flags
  26++EA61 70                                   DB $70                            ; chance of ECM module
  27++EA62 FF                                   DB $FF                              ; Supports Solid Fill = false
  28++EA63 00 00                                DW $0000                            ; no solid data
  29++EA65 00                                   DB $00                              ; no solid data
  30++EA66
  31++EA66 20 00 4C 1F  CobraMk3Vertices	    DB $20,$00,$4C,$1F,$FF,$FF
  31++EA6A FF FF
  32++EA6C 20 00 4C 9F                          DB $20,$00,$4C,$9F,$FF,$FF
  32++EA70 FF FF
  33++EA72 00 1A 18 1F                          DB $00,$1A,$18,$1F,$FF,$FF
  33++EA76 FF FF
  34++EA78 78 03 08 FF                          DB $78,$03,$08,$FF,$73,$AA
  34++EA7C 73 AA
  35++EA7E 78 03 08 7F                          DB $78,$03,$08,$7F,$84,$CC
  35++EA82 84 CC
  36++EA84 58 10 28 BF                          DB $58,$10,$28,$BF,$FF,$FF
  36++EA88 FF FF
  37++EA8A 58 10 28 3F                          DB $58,$10,$28,$3F,$FF,$FF
  37++EA8E FF FF
  38++EA90 80 08 28 7F                          DB $80,$08,$28,$7F,$98,$CC
  38++EA94 98 CC
  39++EA96 80 08 28 FF                          DB $80,$08,$28,$FF,$97,$AA
  39++EA9A 97 AA
  40++EA9C 00 1A 28 3F                          DB $00,$1A,$28,$3F,$65,$99
  40++EAA0 65 99
  41++EAA2 20 18 28 FF                          DB $20,$18,$28,$FF,$A9,$BB
  41++EAA6 A9 BB
  42++EAA8 20 18 28 7F                          DB $20,$18,$28,$7F,$B9,$CC
  42++EAAC B9 CC
  43++EAAE 24 08 28 B4                          DB $24,$08,$28,$B4,$99,$99
  43++EAB2 99 99
  44++EAB4 08 0C 28 B4                          DB $08,$0C,$28,$B4,$99,$99
  44++EAB8 99 99
  45++EABA 08 0C 28 34                          DB $08,$0C,$28,$34,$99,$99
  45++EABE 99 99
  46++EAC0 24 08 28 34                          DB $24,$08,$28,$34,$99,$99
  46++EAC4 99 99
  47++EAC6 24 0C 28 74                          DB $24,$0C,$28,$74,$99,$99
  47++EACA 99 99
  48++EACC 08 10 28 74                          DB $08,$10,$28,$74,$99,$99
  48++EAD0 99 99
  49++EAD2 08 10 28 F4                          DB $08,$10,$28,$F4,$99,$99
  49++EAD6 99 99
  50++EAD8 24 0C 28 F4                          DB $24,$0C,$28,$F4,$99,$99
  50++EADC 99 99
  51++EADE 00 00 4C 06                          DB $00,$00,$4C,$06,$B0,$BB
  51++EAE2 B0 BB
  52++EAE4 00 00 5A 1F                          DB $00,$00,$5A,$1F,$B0,$BB
  52++EAE8 B0 BB
  53++EAEA 50 06 28 E8                          DB $50,$06,$28,$E8,$99,$99
  53++EAEE 99 99
  54++EAF0 50 06 28 A8                          DB $50,$06,$28,$A8,$99,$99
  54++EAF4 99 99
  55++EAF6 58 00 28 A6                          DB $58,$00,$28,$A6,$99,$99
  55++EAFA 99 99
  56++EAFC 50 06 28 28                          DB $50,$06,$28,$28,$99,$99
  56++EB00 99 99
  57++EB02 58 00 28 26                          DB $58,$00,$28,$26,$99,$99
  57++EB06 99 99
  58++EB08 50 06 28 68                          DB $50,$06,$28,$68,$99,$99
  58++EB0C 99 99
  59++EB0E              CobraMkVertSize         equ $  - CobraMk3Vertices
  60++EB0E 1F B0 00 04  CobraMk3Edges		    DB $1F,$B0,$00,$04
  61++EB12 1F C4 00 10                          DB $1F,$C4,$00,$10
  62++EB16 1F A3 04 0C                          DB $1F,$A3,$04,$0C
  63++EB1A 1F A7 0C 20                          DB $1F,$A7,$0C,$20
  64++EB1E 1F C8 10 1C                          DB $1F,$C8,$10,$1C
  65++EB22 1F 98 18 1C                          DB $1F,$98,$18,$1C
  66++EB26 1F 96 18 24                          DB $1F,$96,$18,$24
  67++EB2A 1F 95 14 24                          DB $1F,$95,$14,$24
  68++EB2E 1F 97 14 20                          DB $1F,$97,$14,$20
  69++EB32 1F 51 08 14                          DB $1F,$51,$08,$14
  70++EB36 1F 62 08 18                          DB $1F,$62,$08,$18
  71++EB3A 1F 73 0C 14                          DB $1F,$73,$0C,$14
  72++EB3E 1F 84 10 18                          DB $1F,$84,$10,$18
  73++EB42 1F 10 04 08                          DB $1F,$10,$04,$08
  74++EB46 1F 20 00 08                          DB $1F,$20,$00,$08
  75++EB4A 1F A9 20 28                          DB $1F,$A9,$20,$28
  76++EB4E 1F B9 28 2C                          DB $1F,$B9,$28,$2C
  77++EB52 1F C9 1C 2C                          DB $1F,$C9,$1C,$2C
  78++EB56 1F BA 04 28                          DB $1F,$BA,$04,$28
  79++EB5A 1F CB 00 2C                          DB $1F,$CB,$00,$2C
  80++EB5E 1D 31 04 14                          DB $1D,$31,$04,$14
  81++EB62 1D 42 00 18                          DB $1D,$42,$00,$18
  82++EB66 06 B0 50 54                          DB $06,$B0,$50,$54
  83++EB6A 14 99 30 34                          DB $14,$99,$30,$34
  84++EB6E 14 99 48 4C                          DB $14,$99,$48,$4C
  85++EB72 14 99 38 3C                          DB $14,$99,$38,$3C
  86++EB76 14 99 40 44                          DB $14,$99,$40,$44
  87++EB7A 13 99 3C 40                          DB $13,$99,$3C,$40
  88++EB7E 11 99 38 44                          DB $11,$99,$38,$44
  89++EB82 13 99 34 48                          DB $13,$99,$34,$48
  90++EB86 13 99 30 4C                          DB $13,$99,$30,$4C
  91++EB8A 1E 65 08 24                          DB $1E,$65,$08,$24
  92++EB8E 06 99 58 60                          DB $06,$99,$58,$60
  93++EB92 06 99 5C 60                          DB $06,$99,$5C,$60
  94++EB96 08 99 58 5C                          DB $08,$99,$58,$5C
  95++EB9A 06 99 64 68                          DB $06,$99,$64,$68
  96++EB9E 06 99 68 6C                          DB $06,$99,$68,$6C
  97++EBA2 08 99 64 6C                          DB $08,$99,$64,$6C
  98++EBA6              CobraMkEdgesSize        equ $  - CobraMk3Edges
  99++EBA6              CobraMkEdgesCnt         equ CobraMkEdgesSize/4
 100++EBA6              ; start normals #0 = top f,$on,$ p,$at,$ o,$ C,$br,$ Mk III
 101++EBA6 1F 00 3E 1F  CobraMk3Normals		    DB $1F,$00,$3E,$1F
 102++EBAA 9F 12 37 10                          DB $9F,$12,$37,$10
 103++EBAE 1F 12 37 10                          DB $1F,$12,$37,$10
 104++EBB2 9F 10 34 0E                          DB $9F,$10,$34,$0E
 105++EBB6 1F 10 34 0E                          DB $1F,$10,$34,$0E
 106++EBBA 9F 0E 2F 00                          DB $9F,$0E,$2F,$00
 107++EBBE 1F 0E 2F 00                          DB $1F,$0E,$2F,$00
 108++EBC2 9F 3D 66 00                          DB $9F,$3D,$66,$00
 109++EBC6 1F 3D 66 00                          DB $1F,$3D,$66,$00
 110++EBCA 3F 00 00 50                          DB $3F,$00,$00,$50
 111++EBCE DF 07 2A 09                          DB $DF,$07,$2A,$09
 112++EBD2 5F 00 1E 06                          DB $5F,$00,$1E,$06
 113++EBD6 5F 07 2A 09                          DB $5F,$07,$2A,$09 		;end of Cobra Mk III
 114++EBDA              CobraMk3NormalsSize     equ $  - CobraMk3Normals
 115++EBDA              CobraMk3Len             equ $  - CobraMk3
 116++EBDA
# file closed: ./Data/ships/CobraMk3.asm
  97+ EBDA                                      include "Data/ships/Cobra_Mk_1.asm"
# file opened: ./Data/ships/Cobra_Mk_1.asm
   1++EBDA 03           Cobra_Mk_1:	            DB $03                              ; Number of cargo canisters released when destroyed
   2++EBDB 49 26                                DW $2649                            ; Ship's targetable area LoHi
   3++EBDD 3B EC                                DW Cobra_Mk_1Edges                  ; Edge Data
   4++EBDF 48                                   DB Cobra_Mk_1EdgesSize              ; Size of Edge Data
   5++EBE0 28                                   DB $28                              ; Gun Vertex Byte offset
   6++EBE1 1A                                   DB $1A                              ; Explosion Count
   7++EBE2 0B                                   DB Cobra_Mk_1VertSize /6            ; Vertex Count /6
   8++EBE3 42                                   DB Cobra_Mk_1VertSize               ; Vertex Count
   9++EBE4 12                                   DB Cobra_Mk_1EdgesCnt               ; Edges Count
  10++EBE5 00 4B                                DW $4B00                            ; Bounty LoHi
  11++EBE7 28                                   DB Cobra_Mk_1NormalsSize            ; Face (Normal) Count
  12++EBE8 13                                   DB $13                              ; Range when it turns to a dot
  13++EBE9 51                                   DB $51                              ; Energy Max
  14++EBEA 1A                                   DB $1A                              ; Speed Max
  15++EBEB 83 EC                                DW Cobra_Mk_1Normals                ; Normals
  16++EBED 02                                   DB $02                              ; Q scaling
  17++EBEE 23                                   DB $20 | ShipMissiles3              ; Laser power and Nbr Missiles
  18++EBEF F9 EB                                DW Cobra_Mk_1Vertices               ; Verticles Address
  19++EBF1 00                                   DB ShipTypeNormal                   ; Ship Type
  20++EBF2 00                                   DB 0                                ; NewB Tactics
  21++EBF3 80                                   DB ShipCanAnger                     ; AI Flags
  22++EBF4 30                                   DB $30                              ; chance of ECM module
  23++EBF5 FF                                   DB $FF                              ; Supports Solid Fill = false
  24++EBF6 00 00                                DW $0000                            ; no solid data
  25++EBF8 00                                   DB $00                              ; no solid data
  26++EBF9
  27++EBF9 12 01 32 DF  Cobra_Mk_1Vertices:	    DB $12, $01, $32, $DF, $01, $23
  27++EBFD 01 23
  28++EBFF 12 01 32 5F                          DB $12, $01, $32, $5F, $01, $45
  28++EC03 01 45
  29++EC05 42 00 07 9F                          DB $42, $00, $07, $9F, $23, $88
  29++EC09 23 88
  30++EC0B 42 00 07 1F                          DB $42, $00, $07, $1F, $45, $99
  30++EC0F 45 99
  31++EC11 20 0C 26 BF                          DB $20, $0C, $26, $BF, $26, $78
  31++EC15 26 78
  32++EC17 20 0C 26 3F                          DB $20, $0C, $26, $3F, $46, $79
  32++EC1B 46 79
  33++EC1D 36 0C 26 FF                          DB $36, $0C, $26, $FF, $13, $78
  33++EC21 13 78
  34++EC23 36 0C 26 7F                          DB $36, $0C, $26, $7F, $15, $79
  34++EC27 15 79
  35++EC29 00 0C 06 34                          DB $00, $0C, $06, $34, $02, $46
  35++EC2D 02 46
  36++EC2F 00 01 32 42                          DB $00, $01, $32, $42, $01, $11
  36++EC33 01 11
  37++EC35 00 01 3C 5F                          DB $00, $01, $3C, $5F, $01, $11
  37++EC39 01 11
  38++EC3B              Cobra_Mk_1VertSize:     equ $ - Cobra_Mk_1Vertices
  39++EC3B 1F 01 04 00  Cobra_Mk_1Edges:	    DB $1F, $01, $04, $00
  40++EC3F 1F 23 00 08                          DB $1F, $23, $00, $08
  41++EC43 1F 38 08 18                          DB $1F, $38, $08, $18
  42++EC47 1F 17 18 1C                          DB $1F, $17, $18, $1C
  43++EC4B 1F 59 1C 0C                          DB $1F, $59, $1C, $0C
  44++EC4F 1F 45 0C 04                          DB $1F, $45, $0C, $04
  45++EC53 1F 28 08 10                          DB $1F, $28, $08, $10
  46++EC57 1F 67 10 14                          DB $1F, $67, $10, $14
  47++EC5B 1F 49 14 0C                          DB $1F, $49, $14, $0C
  48++EC5F 14 02 00 20                          DB $14, $02, $00, $20
  49++EC63 14 04 20 04                          DB $14, $04, $20, $04
  50++EC67 10 26 10 20                          DB $10, $26, $10, $20
  51++EC6B 10 46 20 14                          DB $10, $46, $20, $14
  52++EC6F 1F 78 10 18                          DB $1F, $78, $10, $18
  53++EC73 1F 79 14 1C                          DB $1F, $79, $14, $1C
  54++EC77 14 13 00 18                          DB $14, $13, $00, $18
  55++EC7B 14 15 04 1C                          DB $14, $15, $04, $1C
  56++EC7F 02 01 28 24                          DB $02, $01, $28, $24
  57++EC83              Cobra_Mk_1EdgesSize:    equ $ - Cobra_Mk_1Edges
  58++EC83              Cobra_Mk_1EdgesCnt:     equ Cobra_Mk_1EdgesSize/4
  59++EC83 1F 00 29 0A  Cobra_Mk_1Normals:	    DB $1F, $00, $29, $0A
  60++EC87 5F 00 1B 03                          DB $5F, $00, $1B, $03
  61++EC8B 9F 08 2E 08                          DB $9F, $08, $2E, $08
  62++EC8F DF 0C 39 0C                          DB $DF, $0C, $39, $0C
  63++EC93 1F 08 2E 08                          DB $1F, $08, $2E, $08
  64++EC97 5F 0C 39 0C                          DB $5F, $0C, $39, $0C
  65++EC9B 1F 00 31 00                          DB $1F, $00, $31, $00
  66++EC9F 3F 00 00 9A                          DB $3F, $00, $00, $9A
  67++ECA3 BF 79 6F 3E                          DB $BF, $79, $6F, $3E
  68++ECA7 3F 79 6F 3E                          DB $3F, $79, $6F, $3E
  69++ECAB              Cobra_Mk_1NormalsSize:  equ $ - Cobra_Mk_1Normals
  70++ECAB              Cobra_Mk_1Len:          equ $ - Cobra_Mk_1
  71++ECAB
# file closed: ./Data/ships/Cobra_Mk_1.asm
  98+ ECAB                                      include "Data/ships/Cobra_Mk_3_P.asm"
# file opened: ./Data/ships/Cobra_Mk_3_P.asm
   1++ECAB 01           Cobra_Mk_3_P:	        DB $01                              ; Number of cargo canisters released when destroyed
   2++ECAC 41 23                                DW $2341                            ; Ship's targetable area LoHi
   3++ECAE 72 ED                                DW Cobra_Mk_3_PEdges                ; Edge Data
   4++ECB0 98                                   DB Cobra_Mk_3_PEdgesSize            ; Size of Edge Data
   5++ECB1 54                                   DB $54                              ; Gun Vertex Byte offset
   6++ECB2 2A                                   DB $2A                              ; Explosion Count
   7++ECB3 1C                                   DB Cobra_Mk_3_PVertSize /6          ; Vertex Count /6
   8++ECB4 A8                                   DB Cobra_Mk_3_PVertSize             ; Vertex Count
   9++ECB5 26                                   DB Cobra_Mk_3_PEdgesCnt             ; Edges Count
  10++ECB6 00 AF                                DW $AF00                            ; Bounty LoHi
  11++ECB8 34                                   DB Cobra_Mk_3_PNormalsSize          ; Face (Normal) Count
  12++ECB9                                      ; Add in a new byte for range for LoD, if this is zero then no LoD Data
  13++ECB9 32                                   DB $32                              ; Range when it turns to a dot
  14++ECBA 96                                   DB $96                              ; Energy Max
  15++ECBB 1C                                   DB $1C                              ; Speed Max
  16++ECBC 0A EE                                DW Cobra_Mk_3_PNormals              ; Normals
  17++ECBE 01                                   DB $01                              ; Q scaling
  18++ECBF 14                                   DB $10 | ShipMissiles4              ; Laser power and Nbr Missiles
  19++ECC0 CA EC                                DW Cobra_Mk_3_PVertices             ; Verticles Address
  20++ECC2 00                                   DB ShipTypeNormal                   ; Ship Type
  21++ECC3 00                                   DB 0                                ; NewB Tactics
  22++ECC4 80                                   DB ShipCanAnger                     ; AI Flags
  23++ECC5 90                                   DB $90                              ; chance of ECM module
  24++ECC6 FF                                   DB $FF                              ; Supports Solid Fill = false
  25++ECC7 00 00                                DW $0000                            ; no solid data
  26++ECC9 00                                   DB $00                              ; no solid data
  27++ECCA
  28++ECCA 20 00 4C 1F  Cobra_Mk_3_PVertices:	DB $20, $00, $4C, $1F, $FF, $FF
  28++ECCE FF FF
  29++ECD0 20 00 4C 9F                          DB $20, $00, $4C, $9F, $FF, $FF
  29++ECD4 FF FF
  30++ECD6 00 1A 18 1F                          DB $00, $1A, $18, $1F, $FF, $FF
  30++ECDA FF FF
  31++ECDC 78 03 08 FF                          DB $78, $03, $08, $FF, $73, $AA
  31++ECE0 73 AA
  32++ECE2 78 03 08 7F                          DB $78, $03, $08, $7F, $84, $CC
  32++ECE6 84 CC
  33++ECE8 58 10 28 BF                          DB $58, $10, $28, $BF, $FF, $FF
  33++ECEC FF FF
  34++ECEE 58 10 28 3F                          DB $58, $10, $28, $3F, $FF, $FF
  34++ECF2 FF FF
  35++ECF4 80 08 28 7F                          DB $80, $08, $28, $7F, $98, $CC
  35++ECF8 98 CC
  36++ECFA 80 08 28 FF                          DB $80, $08, $28, $FF, $97, $AA
  36++ECFE 97 AA
  37++ED00 00 1A 28 3F                          DB $00, $1A, $28, $3F, $65, $99
  37++ED04 65 99
  38++ED06 20 18 28 FF                          DB $20, $18, $28, $FF, $A9, $BB
  38++ED0A A9 BB
  39++ED0C 20 18 28 7F                          DB $20, $18, $28, $7F, $B9, $CC
  39++ED10 B9 CC
  40++ED12 24 08 28 B4                          DB $24, $08, $28, $B4, $99, $99
  40++ED16 99 99
  41++ED18 08 0C 28 B4                          DB $08, $0C, $28, $B4, $99, $99
  41++ED1C 99 99
  42++ED1E 08 0C 28 34                          DB $08, $0C, $28, $34, $99, $99
  42++ED22 99 99
  43++ED24 24 08 28 34                          DB $24, $08, $28, $34, $99, $99
  43++ED28 99 99
  44++ED2A 24 0C 28 74                          DB $24, $0C, $28, $74, $99, $99
  44++ED2E 99 99
  45++ED30 08 10 28 74                          DB $08, $10, $28, $74, $99, $99
  45++ED34 99 99
  46++ED36 08 10 28 F4                          DB $08, $10, $28, $F4, $99, $99
  46++ED3A 99 99
  47++ED3C 24 0C 28 F4                          DB $24, $0C, $28, $F4, $99, $99
  47++ED40 99 99
  48++ED42 00 00 4C 06                          DB $00, $00, $4C, $06, $B0, $BB
  48++ED46 B0 BB
  49++ED48 00 00 5A 1F                          DB $00, $00, $5A, $1F, $B0, $BB
  49++ED4C B0 BB
  50++ED4E 50 06 28 E8                          DB $50, $06, $28, $E8, $99, $99
  50++ED52 99 99
  51++ED54 50 06 28 A8                          DB $50, $06, $28, $A8, $99, $99
  51++ED58 99 99
  52++ED5A 58 00 28 A6                          DB $58, $00, $28, $A6, $99, $99
  52++ED5E 99 99
  53++ED60 50 06 28 28                          DB $50, $06, $28, $28, $99, $99
  53++ED64 99 99
  54++ED66 58 00 28 26                          DB $58, $00, $28, $26, $99, $99
  54++ED6A 99 99
  55++ED6C 50 06 28 68                          DB $50, $06, $28, $68, $99, $99
  55++ED70 99 99
  56++ED72              Cobra_Mk_3_PVertSize:   equ $ - Cobra_Mk_3_PVertices
  57++ED72 1F B0 00 04  Cobra_Mk_3_PEdges:	    DB $1F, $B0, $00, $04
  58++ED76 1F C4 00 10                          DB $1F, $C4, $00, $10
  59++ED7A 1F A3 04 0C                          DB $1F, $A3, $04, $0C
  60++ED7E 1F A7 0C 20                          DB $1F, $A7, $0C, $20
  61++ED82 1F C8 10 1C                          DB $1F, $C8, $10, $1C
  62++ED86 1F 98 18 1C                          DB $1F, $98, $18, $1C
  63++ED8A 1F 96 18 24                          DB $1F, $96, $18, $24
  64++ED8E 1F 95 14 24                          DB $1F, $95, $14, $24
  65++ED92 1F 97 14 20                          DB $1F, $97, $14, $20
  66++ED96 1F 51 08 14                          DB $1F, $51, $08, $14
  67++ED9A 1F 62 08 18                          DB $1F, $62, $08, $18
  68++ED9E 1F 73 0C 14                          DB $1F, $73, $0C, $14
  69++EDA2 1F 84 10 18                          DB $1F, $84, $10, $18
  70++EDA6 1F 10 04 08                          DB $1F, $10, $04, $08
  71++EDAA 1F 20 00 08                          DB $1F, $20, $00, $08
  72++EDAE 1F A9 20 28                          DB $1F, $A9, $20, $28
  73++EDB2 1F B9 28 2C                          DB $1F, $B9, $28, $2C
  74++EDB6 1F C9 1C 2C                          DB $1F, $C9, $1C, $2C
  75++EDBA 1F BA 04 28                          DB $1F, $BA, $04, $28
  76++EDBE 1F CB 00 2C                          DB $1F, $CB, $00, $2C
  77++EDC2 1D 31 04 14                          DB $1D, $31, $04, $14
  78++EDC6 1D 42 00 18                          DB $1D, $42, $00, $18
  79++EDCA 06 B0 50 54                          DB $06, $B0, $50, $54
  80++EDCE 14 99 30 34                          DB $14, $99, $30, $34
  81++EDD2 14 99 48 4C                          DB $14, $99, $48, $4C
  82++EDD6 14 99 38 3C                          DB $14, $99, $38, $3C
  83++EDDA 14 99 40 44                          DB $14, $99, $40, $44
  84++EDDE 13 99 3C 40                          DB $13, $99, $3C, $40
  85++EDE2 11 99 38 44                          DB $11, $99, $38, $44
  86++EDE6 13 99 34 48                          DB $13, $99, $34, $48
  87++EDEA 13 99 30 4C                          DB $13, $99, $30, $4C
  88++EDEE 1E 65 08 24                          DB $1E, $65, $08, $24
  89++EDF2 06 99 58 60                          DB $06, $99, $58, $60
  90++EDF6 06 99 5C 60                          DB $06, $99, $5C, $60
  91++EDFA 08 99 58 5C                          DB $08, $99, $58, $5C
  92++EDFE 06 99 64 68                          DB $06, $99, $64, $68
  93++EE02 06 99 68 6C                          DB $06, $99, $68, $6C
  94++EE06 08 99 64 6C                          DB $08, $99, $64, $6C
  95++EE0A              Cobra_Mk_3_PEdgesSize:  equ $ - Cobra_Mk_3_PEdges
  96++EE0A              Cobra_Mk_3_PEdgesCnt:   equ Cobra_Mk_3_PEdgesSize/4
  97++EE0A 1F 00 3E 1F  Cobra_Mk_3_PNormals:	DB $1F, $00, $3E, $1F
  98++EE0E 9F 12 37 10                          DB $9F, $12, $37, $10
  99++EE12 1F 12 37 10                          DB $1F, $12, $37, $10
 100++EE16 9F 10 34 0E                          DB $9F, $10, $34, $0E
 101++EE1A 1F 10 34 0E                          DB $1F, $10, $34, $0E
 102++EE1E 9F 0E 2F 00                          DB $9F, $0E, $2F, $00
 103++EE22 1F 0E 2F 00                          DB $1F, $0E, $2F, $00
 104++EE26 9F 3D 66 00                          DB $9F, $3D, $66, $00
 105++EE2A 1F 3D 66 00                          DB $1F, $3D, $66, $00
 106++EE2E 3F 00 00 50                          DB $3F, $00, $00, $50
 107++EE32 DF 07 2A 09                          DB $DF, $07, $2A, $09
 108++EE36 5F 00 1E 06                          DB $5F, $00, $1E, $06
 109++EE3A 5F 07 2A 09                          DB $5F, $07, $2A, $09
 110++EE3E              Cobra_Mk_3_PNormalsSize:equ $ - Cobra_Mk_3_PNormals
 111++EE3E              Cobra_Mk_3_PLen:        equ $ - Cobra_Mk_3_P
 112++EE3E
# file closed: ./Data/ships/Cobra_Mk_3_P.asm
  99+ EE3E                                      include "Data/ships/Constrictor.asm"
# file opened: ./Data/ships/Constrictor.asm
   1++EE3E F3           Constrictor:    	    DB $F3                         ; Number of cargo canisters released when destroyed
   2++EE3F 49 26                                DW $2649                       ; Ship's targetable area LoHi
   3++EE41 C3 EE                                DW ConstrictorEdges            ; Edge Data
   4++EE43 60                                   DB ConstrictorEdgesSize        ; Size of Edge Data
   5++EE44 00                                   DB $00                         ; Gun Vertex Byte offset
   6++EE45 2E                                   DB $2E                         ; Explosion Count
   7++EE46 11                                   DB ConstrictorVertSize /6      ; Vertex Count /6
   8++EE47 66                                   DB ConstrictorVertSize         ; Vertex Count
   9++EE48 18                                   DB ConstrictorEdgesCnt         ; Edges Count
  10++EE49 18 00                                DW $0018                       ; Bounty LoHi
  11++EE4B 28                                   DB ConstrictorNormalsSize      ; Face (Normal) Count
  12++EE4C 2D                                   DB $2D                         ; Range when it turns to a dot
  13++EE4D C8                                   DB $C8                         ; Energy Max
  14++EE4E 37                                   DB $37                         ; Speed Max
  15++EE4F 23 EF                                DW ConstrictorNormals          ; Normals
  16++EE51 02                                   DB $02                         ; Q scaling
  17++EE52 2F                                   DB $20 | ShipMissiles15        ; Laser power and Nbr Missiles
  18++EE53 5D EE                                DW ConstrictorVertices         ; Verticles Address
  19++EE55 00                                   DB ShipTypeNormal              ; Ship Type
  20++EE56 00                                   DB 0                           ; NewB Tactics
  21++EE57 80                                   DB ShipCanAnger                ; AI Flags
  22++EE58 FF                                   DB $FF                         ; chance of ECM module
  23++EE59 FF                                   DB $FF                              ; Supports Solid Fill = false
  24++EE5A 00 00                                DW $0000                            ; no solid data
  25++EE5C 00                                   DB $00                              ; no solid data
  26++EE5D
  27++EE5D 14 07 50 5F  ConstrictorVertices     DB $14, $07, $50, $5F, $02, $99
  27++EE61 02 99
  28++EE63 14 07 50 DF                          DB $14, $07, $50, $DF, $01, $99
  28++EE67 01 99
  29++EE69 36 07 28 DF                          DB $36, $07, $28, $DF, $14, $99
  29++EE6D 14 99
  30++EE6F 36 07 28 FF                          DB $36, $07, $28, $FF, $45, $89
  30++EE73 45 89
  31++EE75 14 0D 28 BF                          DB $14, $0D, $28, $BF, $56, $88
  31++EE79 56 88
  32++EE7B 14 0D 28 3F                          DB $14, $0D, $28, $3F, $67, $88
  32++EE7F 67 88
  33++EE81 36 07 28 7F                          DB $36, $07, $28, $7F, $37, $89
  33++EE85 37 89
  34++EE87 36 07 28 5F                          DB $36, $07, $28, $5F, $23, $99
  34++EE8B 23 99
  35++EE8D 14 0D 05 1F                          DB $14, $0D, $05, $1F, $FF, $FF
  35++EE91 FF FF
  36++EE93 14 0D 05 9F                          DB $14, $0D, $05, $9F, $FF, $FF
  36++EE97 FF FF
  37++EE99 14 07 3E 52                          DB $14, $07, $3E, $52, $99, $99
  37++EE9D 99 99
  38++EE9F 14 07 3E D2                          DB $14, $07, $3E, $D2, $99, $99
  38++EEA3 99 99
  39++EEA5 19 07 19 72                          DB $19, $07, $19, $72, $99, $99
  39++EEA9 99 99
  40++EEAB 19 07 19 F2                          DB $19, $07, $19, $F2, $99, $99
  40++EEAF 99 99
  41++EEB1 0F 07 0F 6A                          DB $0F, $07, $0F, $6A, $99, $99
  41++EEB5 99 99
  42++EEB7 0F 07 0F EA                          DB $0F, $07, $0F, $EA, $99, $99
  42++EEBB 99 99
  43++EEBD 00 07 00 40                          DB $00, $07, $00, $40, $9F, $01
  43++EEC1 9F 01
  44++EEC3              ConstrictorVertSize     equ $  - ConstrictorVertices
  45++EEC3 1F 09 00 04  ConstrictorEdges        DB $1F, $09, $00, $04
  46++EEC7 1F 19 04 08                          DB $1F, $19, $04, $08
  47++EECB 1F 01 04 24                          DB $1F, $01, $04, $24
  48++EECF 1F 02 00 20                          DB $1F, $02, $00, $20
  49++EED3 1F 29 00 1C                          DB $1F, $29, $00, $1C
  50++EED7 1F 23 1C 20                          DB $1F, $23, $1C, $20
  51++EEDB 1F 14 08 24                          DB $1F, $14, $08, $24
  52++EEDF 1F 49 08 0C                          DB $1F, $49, $08, $0C
  53++EEE3 1F 39 18 1C                          DB $1F, $39, $18, $1C
  54++EEE7 1F 37 18 20                          DB $1F, $37, $18, $20
  55++EEEB 1F 67 14 20                          DB $1F, $67, $14, $20
  56++EEEF 1F 56 10 24                          DB $1F, $56, $10, $24
  57++EEF3 1F 45 0C 24                          DB $1F, $45, $0C, $24
  58++EEF7 1F 58 0C 10                          DB $1F, $58, $0C, $10
  59++EEFB 1F 68 10 14                          DB $1F, $68, $10, $14
  60++EEFF 1F 78 14 18                          DB $1F, $78, $14, $18
  61++EF03 1F 89 0C 18                          DB $1F, $89, $0C, $18
  62++EF07 1F 06 20 24                          DB $1F, $06, $20, $24
  63++EF0B 12 99 28 30                          DB $12, $99, $28, $30
  64++EF0F 05 99 30 38                          DB $05, $99, $30, $38
  65++EF13 0A 99 38 28                          DB $0A, $99, $38, $28
  66++EF17 0A 99 2C 3C                          DB $0A, $99, $2C, $3C
  67++EF1B 05 99 34 3C                          DB $05, $99, $34, $3C
  68++EF1F 12 99 2C 34                          DB $12, $99, $2C, $34
  69++EF23              ConstrictorEdgesSize    equ $  - ConstrictorEdges
  70++EF23              ConstrictorEdgesCnt     equ ConstrictorEdgesSize/4
  71++EF23 1F 00 37 0F  ConstrictorNormals      DB $1F, $00, $37, $0F, $9F, $18, $4B, $14
  71++EF27 9F 18 4B 14
  72++EF2B 1F 18 4B 14                          DB $1F, $18, $4B, $14, $1F, $2C, $4B, $00
  72++EF2F 1F 2C 4B 00
  73++EF33 9F 2C 4B 00                          DB $9F, $2C, $4B, $00, $9F, $2C, $4B, $00
  73++EF37 9F 2C 4B 00
  74++EF3B 1F 00 35 00                          DB $1F, $00, $35, $00, $1F, $2C, $4B, $00
  74++EF3F 1F 2C 4B 00
  75++EF43 3F 00 00 A0                          DB $3F, $00, $00, $A0, $5F, $00, $1B, $00
  75++EF47 5F 00 1B 00
  76++EF4B              ConstrictorNormalsSize  equ $  - ConstrictorNormals
  77++EF4B              ConstrictorLen          equ $  - Constrictor
  78++EF4B
# file closed: ./Data/ships/Constrictor.asm
 100+ EF4B                                      include "Data/ships/Coriolis.asm"
# file opened: ./Data/ships/Coriolis.asm
   1++EF4B 00           Coriolis:	            DB $00                                      ; Number of cargo canisters released when destroyed
   2++EF4C 00 64                                DW $6400                                    ; Ship's targetable area LoHi
   3++EF4E CA EF                                DW CoriolisEdges                            ; Edge Data
   4++EF50 70                                   DB CoriolisEdgesSize                        ; Size of Edge Data
   5++EF51 00                                   DB $00                                      ; Gun Vertex Byte offset
   6++EF52 36                                   DB $36                                      ; Explosion Count
   7++EF53 10                                   DB CoriolisVertSize /6                      ; Vertex Count /6
   8++EF54 60                                   DB CoriolisVertSize                         ; Vertex Count
   9++EF55 1C                                   DB CoriolisEdgesCnt                         ; Edges Count
  10++EF56 00 00                                DW $0000                                    ; Bounty LoHi
  11++EF58 38                                   DB CoriolisNormalsSize                      ; Face (Normal) Count
  12++EF59 78                                   DB $78                                      ; Range when it turns to a dot
  13++EF5A F0                                   DB $F0                                      ; Energy Max
  14++EF5B 00                                   DB $00                                      ; Speed Max
  15++EF5C 3A F0                                DW CoriolisNormals                          ; Normals
  16++EF5E 00                                   DB $00                                      ; Q scaling
  17++EF5F 06                                   DB $06                                      ; Laser power and Nbr Missiles
  18++EF60 6A EF                                DW CoriolisVertices                         ; Verticles Address
  19++EF62 02                                   DB ShipTypeStation                          ; Ship Type
  20++EF63 00                                   DB 0                                        ; NewB Tactics
  21++EF64 78                                   DB ShipFighterBaySize | ShipFighterViper    ; AI Flags
  22++EF65 FF                                   DB $FF                                      ; chance of ECM module
  23++EF66 FF                                   DB $FF                              ; Supports Solid Fill = false
  24++EF67 00 00                                DW $0000                            ; no solid data
  25++EF69 00                                   DB $00                              ; no solid data
  26++EF6A              ;Need to do a debug cube and test that, even better a debug square only
  27++EF6A              ; a debug cube would be -160, 160, 160  to -160,160,-160    top left forward     to top left rear         TLF   $A0, $A0, $A0, $9F, $14, $50
  28++EF6A              ;                       -160, 160, 160  to -160,-160,160    top left forward     to bottom left forward   TLR   $A0, $A0, $A0, $BF, $45, $60
  29++EF6A              ;                       -160, 160,-160  to  160,160,-160    top left rear        to top right rear        BLF   $A0, $A0, $A0, $DF, $12, $40
  30++EF6A              ;                       -160, 160,-160  to -160,-160,-160   top left rear        to bottom left rear      TRR   $A0, $A0, $A0, $3F, $35, $60
  31++EF6A              ;                       -160,-160,-160  to -160,-160,-160   bottom left forward  to bottom left rear      BLR   $A0, $A0, $A0, $FF, $24, $60
  32++EF6A              ;                       -160, 160, 160  to  160, 160, 160   top left forward     to top right forward     TRF   $A0, $A0, $A0, $1F, $13, $60
  33++EF6A              ;                       -160,-160, 160  to  160,-160, 160   bottom left forward  to bottom right forward  BRF   $A0, $A0, $A0, $5F, $12, $30
  34++EF6A              ;                       -160,-160,-160  to  160,-160,-160   bottom left rear     to bottom right rear     BRR   $A0, $A0, $A0, $7F, $23, $50
  35++EF6A              ;                        160, 160, 160  to  160, 160,-160   top right forward    to top right rear
  36++EF6A              ;                        160,-160, 160  to  160,-160,-160   bottom right forward to bottom right rear
  37++EF6A              ;                        160, 160, 160  to  160,-160, 160   top right forward    to bottom right forward
  38++EF6A              ;                        160, 160,-160  to  160,-160,-160   top right rear       to bottom right rear
  39++EF6A              CoriolisVertices:	    ; DB $A0, $A0, $A0, $9F, $14, $50    ; TLF 1
  40++EF6A                                      ; DB $A0, $A0, $A0, $BF, $45, $60    ; TLR 2
  41++EF6A                                      ; DB $A0, $A0, $A0, $DF, $12, $40    ; BLF 3
  42++EF6A                                      ; DB $A0, $A0, $A0, $3F, $35, $60    ; TRR 4
  43++EF6A                                      ; DB $A0, $A0, $A0, $FF, $24, $60    ; BLR 5
  44++EF6A                                      ; DB $A0, $A0, $A0, $1F, $13, $60    ; TRF 6
  45++EF6A                                      ; DB $A0, $A0, $A0, $5F, $12, $30    ; BRF 7
  46++EF6A                                      ; DB $A0, $A0, $A0, $7F, $23, $50    ; BRR 8
  47++EF6A A0 00 A0 1F                           DB $A0, $00, $A0, $1F, $10, $62     ; 160,   0 , 160
  47++EF6E 10 62
  48++EF70 00 A0 A0 1F                           DB $00, $A0, $A0, $1F, $20, $83     ;   0, 160 , 160
  48++EF74 20 83
  49++EF76 A0 00 A0 9F                           DB $A0, $00, $A0, $9F, $30, $74     ;-160,   0 , 160
  49++EF7A 30 74
  50++EF7C 00 A0 A0 5F                           DB $00, $A0, $A0, $5F, $10, $54     ;   0,-160 , 160
  50++EF80 10 54
  51++EF82 A0 A0 00 5F                           DB $A0, $A0, $00, $5F, $51, $A6     ; 160,-160 ,   0
  51++EF86 51 A6
  52++EF88 A0 A0 00 1F                           DB $A0, $A0, $00, $1F, $62, $B8     ; 160, 160 ,   0
  52++EF8C 62 B8
  53++EF8E A0 A0 00 9F                           DB $A0, $A0, $00, $9F, $73, $C8     ;-160, 160 ,   0
  53++EF92 73 C8
  54++EF94 A0 A0 00 DF                           DB $A0, $A0, $00, $DF, $54, $97     ;-160,-160 ,   0
  54++EF98 54 97
  55++EF9A A0 00 A0 3F                           DB $A0, $00, $A0, $3F, $A6, $DB     ; 160,   0 ,-160
  55++EF9E A6 DB
  56++EFA0 00 A0 A0 3F                           DB $00, $A0, $A0, $3F, $B8, $DC     ;   0, 160 ,-160
  56++EFA4 B8 DC
  57++EFA6 A0 00 A0 BF                           DB $A0, $00, $A0, $BF, $97, $DC     ;-160,   0 ,-160
  57++EFAA 97 DC
  58++EFAC 00 A0 A0 7F                           DB $00, $A0, $A0, $7F, $95, $DA     ;   0,-160 ,-160
  58++EFB0 95 DA
  59++EFB2 0A 1E A0 5E                           DB $0A, $1E, $A0, $5E, $00, $00     ; 160, -30 , 160
  59++EFB6 00 00
  60++EFB8 0A 1E A0 1E                           DB $0A, $1E, $A0, $1E, $00, $00     ; 160,  30 , 160
  60++EFBC 00 00
  61++EFBE 0A 1E A0 9E                           DB $0A, $1E, $A0, $9E, $00, $00     ;-160,  30 , 160
  61++EFC2 00 00
  62++EFC4 0A 1E A0 DE                          DB $0A, $1E, $A0, $DE, $00, $00     ;-160, -30 , 160
  62++EFC8 00 00
  63++EFCA              CoriolisVertSize:       equ $ - CoriolisVertices
  64++EFCA              CoriolisEdges:	        ; DB $1F, $46, $01, $02
  65++EFCA                                      ; DB $1F, $56, $02, $04
  66++EFCA                                      ; DB $1F, $36, $06, $04
  67++EFCA                                      ; DB $1F, $16, $01, $06
  68++EFCA                                      ; DB $1F, $14, $01, $03
  69++EFCA                                      ; DB $1F, $46, $02, $05
  70++EFCA                                      ; DB $1F, $35, $04, $08
  71++EFCA                                      ; DB $1F, $23, $06, $07
  72++EFCA                                      ; DB $1F, $24, $03, $05
  73++EFCA                                      ; DB $1F, $25, $05, $08
  74++EFCA                                      ; DB $1F, $23, $07, $08
  75++EFCA                                      ; DB $1F, $12, $03, $07
  76++EFCA
  77++EFCA 1F 10 00 0C                          DB $1F, $10, $00, $0C
  78++EFCE 1F 20 00 04                          DB $1F, $20, $00, $04
  79++EFD2 1F 30 04 08                          DB $1F, $30, $04, $08
  80++EFD6 1F 40 08 0C                          DB $1F, $40, $08, $0C
  81++EFDA 1F 51 0C 10                          DB $1F, $51, $0C, $10
  82++EFDE 1F 61 00 10                          DB $1F, $61, $00, $10
  83++EFE2 1F 62 00 14                          DB $1F, $62, $00, $14
  84++EFE6 1F 82 14 04                          DB $1F, $82, $14, $04
  85++EFEA 1F 83 04 18                          DB $1F, $83, $04, $18
  86++EFEE 1F 73 08 18                          DB $1F, $73, $08, $18
  87++EFF2 1F 74 08 1C                          DB $1F, $74, $08, $1C
  88++EFF6 1F 54 0C 1C                          DB $1F, $54, $0C, $1C
  89++EFFA 1F DA 20 2C                          DB $1F, $DA, $20, $2C
  90++EFFE 1F DB 20 24                          DB $1F, $DB, $20, $24
  91++F002 1F DC 24 28                          DB $1F, $DC, $24, $28
  92++F006 1F D9 28 2C                          DB $1F, $D9, $28, $2C
  93++F00A 1F A5 10 2C                          DB $1F, $A5, $10, $2C
  94++F00E 1F A6 10 20                          DB $1F, $A6, $10, $20
  95++F012 1F B6 14 20                          DB $1F, $B6, $14, $20
  96++F016 1F B8 14 24                          DB $1F, $B8, $14, $24
  97++F01A 1F C8 18 24                          DB $1F, $C8, $18, $24
  98++F01E 1F C7 18 28                          DB $1F, $C7, $18, $28
  99++F022 1F 97 1C 28                          DB $1F, $97, $1C, $28
 100++F026 1F 95 1C 2C                          DB $1F, $95, $1C, $2C
 101++F02A 1E 00 30 34                          DB $1E, $00, $30, $34
 102++F02E 1E 00 34 38                          DB $1E, $00, $34, $38
 103++F032 1E 00 38 3C                          DB $1E, $00, $38, $3C
 104++F036 1E 00 3C 30                          DB $1E, $00, $3C, $30
 105++F03A              CoriolisEdgesSize:      equ $ - CoriolisEdges
 106++F03A              CoriolisEdgesCnt:       equ CoriolisEdgesSize/4
 107++F03A              CoriolisNormals:	    ; DB $1F, $6B, $00, $00
 108++F03A                                      ; DB $5F, $00, $6B, $00
 109++F03A                                      ; DB $1F, $6B, $00, $00
 110++F03A                                      ; DB $9F, $6B, $00, $00
 111++F03A                                      ; DB $3F, $00, $00, $6B
 112++F03A                                      ; DB $1F, $00, $6B, $00
 113++F03A
 114++F03A 1F 00 00 A0                          DB $1F, $00, $00, $A0
 115++F03E 5F 6B 6B 6B                          DB $5F, $6B, $6B, $6B
 116++F042 1F 6B 6B 6B                          DB $1F, $6B, $6B, $6B
 117++F046 9F 6B 6B 6B                          DB $9F, $6B, $6B, $6B
 118++F04A DF 6B 6B 6B                          DB $DF, $6B, $6B, $6B
 119++F04E 5F 00 A0 00                          DB $5F, $00, $A0, $00
 120++F052 1F A0 00 00                          DB $1F, $A0, $00, $00
 121++F056 9F A0 00 00                          DB $9F, $A0, $00, $00
 122++F05A 1F 00 A0 00                          DB $1F, $00, $A0, $00
 123++F05E FF 6B 6B 6B                          DB $FF, $6B, $6B, $6B
 124++F062 7F 6B 6B 6B                          DB $7F, $6B, $6B, $6B
 125++F066 3F 6B 6B 6B                          DB $3F, $6B, $6B, $6B
 126++F06A BF 6B 6B 6B                          DB $BF, $6B, $6B, $6B
 127++F06E 3F 00 00 A0                          DB $3F, $00, $00, $A0
 128++F072              CoriolisNormalsSize:    equ $ - CoriolisNormals
 129++F072              CoriolisLen:            equ $ - Coriolis
 130++F072
# file closed: ./Data/ships/Coriolis.asm
 101+ F072                                      include "Data/ships/Cougar.asm"
# file opened: ./Data/ships/Cougar.asm
   1++F072 03           Cougar:	                DB $03                         ; Number of cargo canisters released when destroyed
   2++F073 24 13                                DW $1324                       ; Ship's targetable area LoHi
   3++F075 03 F1                                DW CougarEdges                 ; Edge Data
   4++F077 64                                   DB CougarEdgesSize             ; Size of Edge Data
   5++F078 00                                   DB $00                         ; Gun Vertex Byte offset
   6++F079 2A                                   DB $2A                         ; Explosion Count
   7++F07A 13                                   DB CougarVertSize /6           ; Vertex Count /6
   8++F07B 72                                   DB CougarVertSize              ; Vertex Count
   9++F07C 19                                   DB CougarEdgesCnt              ; Edges Count
  10++F07D 00 00                                DW $0000                       ; Bounty LoHi
  11++F07F 18                                   DB CougarNormalsSize           ; Face (Normal) Count
  12++F080 22                                   DB $22                         ; Range when it turns to a dot
  13++F081 FC                                   DB $FC                         ; Energy Max
  14++F082 28                                   DB $28                         ; Speed Max
  15++F083 67 F1                                DW CougarNormals               ; Normals
  16++F085 02                                   DB $02                         ; Q scaling
  17++F086 34                                   DB $30 | ShipMissiles4         ; Laser power and Nbr Missiles
  18++F087 91 F0                                DW CougarVertices              ; Verticles Address
  19++F089 00                                   DB ShipTypeNormal              ; Ship Type
  20++F08A 00                                   DB 0                           ; NewB Tactics
  21++F08B 80                                   DB ShipCanAnger                ; AI Flags
  22++F08C B0                                   DB $B0                         ; chance of ECM module
  23++F08D FF                                   DB $FF                              ; Supports Solid Fill = false
  24++F08E 00 00                                DW $0000                            ; no solid data
  25++F090 00                                   DB $00                              ; no solid data
  26++F091
  27++F091 00 05 43 1F  CougarVertices:	        DB $00, $05, $43, $1F, $02, $44
  27++F095 02 44
  28++F097 14 00 28 9F                          DB $14, $00, $28, $9F, $01, $22
  28++F09B 01 22
  29++F09D 28 00 28 BF                          DB $28, $00, $28, $BF, $01, $55
  29++F0A1 01 55
  30++F0A3 00 0E 28 3E                          DB $00, $0E, $28, $3E, $04, $55
  30++F0A7 04 55
  31++F0A9 00 0E 28 7E                          DB $00, $0E, $28, $7E, $12, $35
  31++F0AD 12 35
  32++F0AF 14 00 28 1F                          DB $14, $00, $28, $1F, $23, $44
  32++F0B3 23 44
  33++F0B5 28 00 28 3F                          DB $28, $00, $28, $3F, $34, $55
  33++F0B9 34 55
  34++F0BB 24 00 38 9F                          DB $24, $00, $38, $9F, $01, $11
  34++F0BF 01 11
  35++F0C1 3C 00 14 BF                          DB $3C, $00, $14, $BF, $01, $11
  35++F0C5 01 11
  36++F0C7 24 00 38 1F                          DB $24, $00, $38, $1F, $34, $44
  36++F0CB 34 44
  37++F0CD 3C 00 14 3F                          DB $3C, $00, $14, $3F, $34, $44
  37++F0D1 34 44
  38++F0D3 00 07 23 12                          DB $00, $07, $23, $12, $00, $44
  38++F0D7 00 44
  39++F0D9 00 08 19 14                          DB $00, $08, $19, $14, $00, $44
  39++F0DD 00 44
  40++F0DF 0C 02 2D 94                          DB $0C, $02, $2D, $94, $00, $00
  40++F0E3 00 00
  41++F0E5 0C 02 2D 14                          DB $0C, $02, $2D, $14, $44, $44
  41++F0E9 44 44
  42++F0EB 0A 06 28 B4                          DB $0A, $06, $28, $B4, $55, $55
  42++F0EF 55 55
  43++F0F1 0A 06 28 F4                          DB $0A, $06, $28, $F4, $55, $55
  43++F0F5 55 55
  44++F0F7 0A 06 28 74                          DB $0A, $06, $28, $74, $55, $55
  44++F0FB 55 55
  45++F0FD 0A 06 28 34                          DB $0A, $06, $28, $34, $55, $55
  45++F101 55 55
  46++F103              CougarVertSize:         equ $ - CougarVertices
  47++F103 1F 02 00 04  CougarEdges:	        DB $1F, $02, $00, $04
  48++F107 1F 01 04 1C                          DB $1F, $01, $04, $1C
  49++F10B 1F 01 1C 20                          DB $1F, $01, $1C, $20
  50++F10F 1F 01 20 08                          DB $1F, $01, $20, $08
  51++F113 1E 05 08 0C                          DB $1E, $05, $08, $0C
  52++F117 1E 45 0C 18                          DB $1E, $45, $0C, $18
  53++F11B 1E 15 08 10                          DB $1E, $15, $08, $10
  54++F11F 1E 35 10 18                          DB $1E, $35, $10, $18
  55++F123 1F 34 18 28                          DB $1F, $34, $18, $28
  56++F127 1F 34 28 24                          DB $1F, $34, $28, $24
  57++F12B 1F 34 24 14                          DB $1F, $34, $24, $14
  58++F12F 1F 24 14 00                          DB $1F, $24, $14, $00
  59++F133 1B 04 00 0C                          DB $1B, $04, $00, $0C
  60++F137 1B 12 04 10                          DB $1B, $12, $04, $10
  61++F13B 1B 23 14 10                          DB $1B, $23, $14, $10
  62++F13F 1A 01 04 08                          DB $1A, $01, $04, $08
  63++F143 1A 34 14 18                          DB $1A, $34, $14, $18
  64++F147 14 00 30 34                          DB $14, $00, $30, $34
  65++F14B 12 00 34 2C                          DB $12, $00, $34, $2C
  66++F14F 12 44 2C 38                          DB $12, $44, $2C, $38
  67++F153 14 44 38 30                          DB $14, $44, $38, $30
  68++F157 12 55 3C 40                          DB $12, $55, $3C, $40
  69++F15B 14 55 40 48                          DB $14, $55, $40, $48
  70++F15F 12 55 48 44                          DB $12, $55, $48, $44
  71++F163 14 55 44 3C                          DB $14, $55, $44, $3C
  72++F167              CougarEdgesSize:        equ $ - CougarEdges
  73++F167              CougarEdgesCnt:         equ CougarEdgesSize/4
  74++F167 9F 10 2E 04  CougarNormals:	        DB $9F, $10, $2E, $04
  75++F16B DF 10 2E 04                          DB $DF, $10, $2E, $04
  76++F16F 5F 00 1B 05                          DB $5F, $00, $1B, $05
  77++F173 5F 10 2E 04                          DB $5F, $10, $2E, $04
  78++F177 1F 10 2E 04                          DB $1F, $10, $2E, $04
  79++F17B 3E 00 00 A0                          DB $3E, $00, $00, $A0
  80++F17F              CougarNormalsSize:      equ $ - CougarNormals
  81++F17F              CougarLen:              equ $ - Cougar
  82++F17F
# file closed: ./Data/ships/Cougar.asm
 102+ F17F                                      include "Data/ships/Dodo.asm"
# file opened: ./Data/ships/Dodo.asm
   1++F17F 00           Dodo:	                DB $00                        ; Number of cargo canisters released when destroyed
   2++F180 90 7E                                DW $7E90                      ; Ship's targetable area LoHi
   3++F182 2E F2                                DW DodoEdges                  ; Edge Data
   4++F184 88                                   DB DodoEdgesSize              ; Size of Edge Data
   5++F185 00                                   DB $00                        ; Gun Vertex Byte offset
   6++F186 36                                   DB $36                        ; Explosion Count
   7++F187 18                                   DB DodoVertSize /6            ; Vertex Count /6
   8++F188 90                                   DB DodoVertSize               ; Vertex Count
   9++F189 22                                   DB DodoEdgesCnt               ; Edges Count
  10++F18A 00 00                                DW $0000                      ; Bounty LoHi
  11++F18C 30                                   DB DodoNormalsSize            ; Face (Normal) Count
  12++F18D 7D                                   DB $7D                        ; Range when it turns to a dot
  13++F18E F0                                   DB $F0                        ; Energy Max
  14++F18F 00                                   DB $00                        ; Speed Max
  15++F190 B6 F2                                DW DodoNormals                ; Normals
  16++F192 00                                   DB $00                        ; Q scaling
  17++F193 00                                   DB $00                        ; Laser power and Nbr Missiles
  18++F194 9E F1                                DW DodoVertices               ; Verticles Address
  19++F196 02                                   DB ShipTypeStation            ; Ship Type
  20++F197 00                                   DB 0                          ; NewB Tactics
  21++F198 00                                   DB 0                          ; AI Flags
  22++F199 FF                                   DB $FF                        ; chance of ECM module
  23++F19A FF                                   DB $FF                              ; Supports Solid Fill = false
  24++F19B 00 00                                DW $0000                            ; no solid data
  25++F19D 00                                   DB $00                              ; no solid data
  26++F19E
  27++F19E 00 96 C4 1F  DodoVertices:	        DB $00, $96, $C4, $1F, $01, $55
  27++F1A2 01 55
  28++F1A4 8F 2E C4 1F                          DB $8F, $2E, $C4, $1F, $01, $22
  28++F1A8 01 22
  29++F1AA 58 79 C4 5F                          DB $58, $79, $C4, $5F, $02, $33
  29++F1AE 02 33
  30++F1B0 58 79 C4 DF                          DB $58, $79, $C4, $DF, $03, $44
  30++F1B4 03 44
  31++F1B6 8F 2E C4 9F                          DB $8F, $2E, $C4, $9F, $04, $55
  31++F1BA 04 55
  32++F1BC 00 F3 2E 1F                          DB $00, $F3, $2E, $1F, $15, $66
  32++F1C0 15 66
  33++F1C2 E7 4B 2E 1F                          DB $E7, $4B, $2E, $1F, $12, $77
  33++F1C6 12 77
  34++F1C8 8F C4 2E 5F                          DB $8F, $C4, $2E, $5F, $23, $88
  34++F1CC 23 88
  35++F1CE 8F C4 2E DF                          DB $8F, $C4, $2E, $DF, $34, $99
  35++F1D2 34 99
  36++F1D4 E7 4B 2E 9F                          DB $E7, $4B, $2E, $9F, $45, $AA
  36++F1D8 45 AA
  37++F1DA 8F C4 2E 3F                          DB $8F, $C4, $2E, $3F, $16, $77
  37++F1DE 16 77
  38++F1E0 E7 4B 2E 7F                          DB $E7, $4B, $2E, $7F, $27, $88
  38++F1E4 27 88
  39++F1E6 00 F3 2E 7F                          DB $00, $F3, $2E, $7F, $38, $99
  39++F1EA 38 99
  40++F1EC E7 4B 2E FF                          DB $E7, $4B, $2E, $FF, $49, $AA
  40++F1F0 49 AA
  41++F1F2 8F C4 2E BF                          DB $8F, $C4, $2E, $BF, $56, $AA
  41++F1F6 56 AA
  42++F1F8 58 79 C4 3F                          DB $58, $79, $C4, $3F, $67, $BB
  42++F1FC 67 BB
  43++F1FE 8F 2E C4 7F                          DB $8F, $2E, $C4, $7F, $78, $BB
  43++F202 78 BB
  44++F204 00 96 C4 7F                          DB $00, $96, $C4, $7F, $89, $BB
  44++F208 89 BB
  45++F20A 8F 2E C4 FF                          DB $8F, $2E, $C4, $FF, $9A, $BB
  45++F20E 9A BB
  46++F210 58 79 C4 BF                          DB $58, $79, $C4, $BF, $6A, $BB
  46++F214 6A BB
  47++F216 10 20 C4 9E                          DB $10, $20, $C4, $9E, $00, $00
  47++F21A 00 00
  48++F21C 10 20 C4 DE                          DB $10, $20, $C4, $DE, $00, $00
  48++F220 00 00
  49++F222 10 20 C4 17                          DB $10, $20, $C4, $17, $00, $00
  49++F226 00 00
  50++F228 10 20 C4 57                          DB $10, $20, $C4, $57, $00, $00
  50++F22C 00 00
  51++F22E              DodoVertSize:           equ $ - DodoVertices
  52++F22E 1F 01 00 04  DodoEdges:	            DB $1F, $01, $00, $04
  53++F232 1F 02 04 08                          DB $1F, $02, $04, $08
  54++F236 1F 03 08 0C                          DB $1F, $03, $08, $0C
  55++F23A 1F 04 0C 10                          DB $1F, $04, $0C, $10
  56++F23E 1F 05 10 00                          DB $1F, $05, $10, $00
  57++F242 1F 16 14 28                          DB $1F, $16, $14, $28
  58++F246 1F 17 28 18                          DB $1F, $17, $28, $18
  59++F24A 1F 27 18 2C                          DB $1F, $27, $18, $2C
  60++F24E 1F 28 2C 1C                          DB $1F, $28, $2C, $1C
  61++F252 1F 38 1C 30                          DB $1F, $38, $1C, $30
  62++F256 1F 39 30 20                          DB $1F, $39, $30, $20
  63++F25A 1F 49 20 34                          DB $1F, $49, $20, $34
  64++F25E 1F 4A 34 24                          DB $1F, $4A, $34, $24
  65++F262 1F 5A 24 38                          DB $1F, $5A, $24, $38
  66++F266 1F 56 38 14                          DB $1F, $56, $38, $14
  67++F26A 1F 7B 3C 40                          DB $1F, $7B, $3C, $40
  68++F26E 1F 8B 40 44                          DB $1F, $8B, $40, $44
  69++F272 1F 9B 44 48                          DB $1F, $9B, $44, $48
  70++F276 1F AB 48 4C                          DB $1F, $AB, $48, $4C
  71++F27A 1F 6B 4C 3C                          DB $1F, $6B, $4C, $3C
  72++F27E 1F 15 00 14                          DB $1F, $15, $00, $14
  73++F282 1F 12 04 18                          DB $1F, $12, $04, $18
  74++F286 1F 23 08 1C                          DB $1F, $23, $08, $1C
  75++F28A 1F 34 0C 20                          DB $1F, $34, $0C, $20
  76++F28E 1F 45 10 24                          DB $1F, $45, $10, $24
  77++F292 1F 67 28 3C                          DB $1F, $67, $28, $3C
  78++F296 1F 78 2C 40                          DB $1F, $78, $2C, $40
  79++F29A 1F 89 30 44                          DB $1F, $89, $30, $44
  80++F29E 1F 9A 34 48                          DB $1F, $9A, $34, $48
  81++F2A2 1F 6A 38 4C                          DB $1F, $6A, $38, $4C
  82++F2A6 1E 00 50 54                          DB $1E, $00, $50, $54
  83++F2AA 14 00 54 5C                          DB $14, $00, $54, $5C
  84++F2AE 17 00 5C 58                          DB $17, $00, $5C, $58
  85++F2B2 14 00 58 50                          DB $14, $00, $58, $50
  86++F2B6              DodoEdgesSize:          equ $ - DodoEdges
  87++F2B6              DodoEdgesCnt:           equ DodoEdgesSize/4
  88++F2B6 1F 00 00 C4  DodoNormals:	        DB $1F, $00, $00, $C4
  89++F2BA 1F 67 8E 58                          DB $1F, $67, $8E, $58
  90++F2BE 5F A9 37 59                          DB $5F, $A9, $37, $59
  91++F2C2 5F 00 B0 58                          DB $5F, $00, $B0, $58
  92++F2C6 DF A9 37 59                          DB $DF, $A9, $37, $59
  93++F2CA 9F 67 8E 58                          DB $9F, $67, $8E, $58
  94++F2CE 3F 00 B0 58                          DB $3F, $00, $B0, $58
  95++F2D2 3F A9 37 59                          DB $3F, $A9, $37, $59
  96++F2D6 7F 67 8E 58                          DB $7F, $67, $8E, $58
  97++F2DA FF 67 8E 58                          DB $FF, $67, $8E, $58
  98++F2DE BF A9 37 59                          DB $BF, $A9, $37, $59
  99++F2E2 3F 00 00 C4                          DB $3F, $00, $00, $C4
 100++F2E6              DodoNormalsSize:        equ $ - DodoNormals
 101++F2E6              DodoLen:                equ $ - Dodo
 102++F2E6
# file closed: ./Data/ships/Dodo.asm
# file closed: ./Data/ShipModelMetaData1.asm
 846  F2E6                  DISPLAY "Bank ",BankShipModels1," - Bytes free ",/D, $2000 - ($-ShipModelsAddr), " - BankShipModels1"
 847  F2E6              ; Bank 66  ------------------------------------------------------------------------------------------------------------------------
 848  F2E6                  SLOT    DispMarketAddr
 849  F2E6                  PAGE    BankDispMarket
 850  F2E6                  ORG     DispMarketAddr
 851  C000                  INCLUDE "./Menus/market_prices_disp.asm"
# file opened: ./Menus/market_prices_disp.asm
   1+ C000 4D 61 72 6B  mktdisp_prices_page_marker  DB "MarketPricesPG54"
   1+ C004 65 74 50 72
   1+ C008 69 63 65 73
   1+ C00C 50 47 35 34
   2+ C010
   3+ C010              mktdisp_boiler_unit_col     equ $80
   4+ C010              mktdisp_boiler_qty_col      equ $D0
   5+ C010              mktdisp_boiler_product_col  equ $08
   6+ C010              mktdisp_boiler_uom_col      equ $70
   7+ C010              mktdisp_boiler_price_col    equ $C0
   8+ C010              mktdisp_boiler_stock_col    equ $F0
   9+ C010              mktdisp_boiler_inv_col      equ $0120
  10+ C010
  11+ C010              mktdisp_cash_pos_row        equ $D0
  12+ C010              mktdisp_cargo_pos_row       equ $C0
  13+ C010              marketdisp_cash_pos_row     equ $D0
  14+ C010              marketdisp_cargo_pos_row    equ $C0
  15+ C010              marketdisp_top_row          equ $20
  16+ C010
  17+ C010              mktdisp_cash_pos_col        equ $0010
  18+ C010              mktdisp_cargo_pos_col       equ $0010
  19+ C010              marketdisp_cash_pos_col     equ $0048
  20+ C010              marketdisp_cargo_pos_col    equ $0048
  21+ C010              marketdisp_uom_col			equ	mktdisp_boiler_uom_col
  22+ C010              marketdisp_price_col        equ mktdisp_boiler_price_col + 8
  23+ C010              marketdisp_quantity_col 	equ	mktdisp_boiler_stock_col + $10
  24+ C010              marketdisp_cargo_col        equ mktdisp_boiler_inv_col
  25+ C010
  26+ C010 50 00        marketdisp_boiler_text	DW $0050
  26+ C012 02             DB $02
  26+ C013 A6 8F          DW TextBuffer
  27+ C015 20 00        						DW $0020
  27+ C017 02             DB $02
  27+ C018 70 90          DW name_expanded
  28+ C01A 08 00        						DW mktdisp_boiler_product_col
  28+ C01C 13             DB $13
  28+ C01D 05 8C          DW WordProduct
  29+ C01F 70 00        						DW mktdisp_boiler_uom_col
  29+ C021 13             DB $13
  29+ C022 0D 8C          DW WordUoM
  30+ C024 C0 00        						DW mktdisp_boiler_price_col
  30+ C026 13             DB $13
  30+ C027 11 8C          DW WordPrice
  31+ C029 F0 00        						DW mktdisp_boiler_stock_col
  31+ C02B 13             DB $13
  31+ C02C 35 8C          DW WordStock
  32+ C02E 20 01        						DW mktdisp_boiler_inv_col
  32+ C030 13             DB $13
  32+ C031 31 8C          DW WordInv
  33+ C033 10 00                                DW mktdisp_cargo_pos_col
  33+ C035 C0             DB mktdisp_cargo_pos_row
  33+ C036 6B C0          DW mktdisp_hold_level
  34+ C038 10 00                                DW mktdisp_cash_pos_col
  34+ C03A D0             DB mktdisp_cash_pos_row
  34+ C03B 73 C0          DW mktdisp_cash
  35+ C03D
  36+ C03D 30 30 2E 30  txt_mktdisp_amount	    DB "00.0",0
  36+ C041 00
  37+ C042 39 39 39 00  txt_mktdisp_quantity    DB "999",0
  38+ C046 39 39 39 00  txt_mktdisp_cargo       DB "999",0
  39+ C04A
  40+ C04A              mktdisp_UomOffset		equ 46
  41+ C04A 20 20 20 20  mktdisp_blank_line      DB "                                ",0
  41+ C04E 20 20 20 20
  41+ C052 20 20 20 20
  41+ C056 20 20 20 20
  41+ C05A 20 20 20 20
  41+ C05E 20 20 20 20
  41+ C062 20 20 20 20
  41+ C066 20 20 20 20
  41+ C06A 00
  42+ C06B 43 61 72 67  mktdisp_hold_level      DB "Cargo: ",0
  42+ C06F 6F 3A 20 00
  43+ C073 43 61 73 68  mktdisp_cash			DB "Cash : ",0
  43+ C077 20 3A 20 00
  44+ C07B 00           mktdisp_selected_row    db  0
  45+ C07C
  46+ C07C              mktdisp_cash_position   equ $B048
  47+ C07C 00 00 00...  mktdisp_cash_amount		DS 20
  48+ C090 20 43 72 20  mktdisp_cash_UoM        DB " Cr       ",0
  48+ C094 20 20 20 20
  48+ C098 20 20 00
  49+ C09B              mktdisp_cargo_position  equ $A848
  50+ C09B 00 00 00...  mktdisp_cargo_amount	DS 20
  51+ C0AF 20 54 6F 6E  mktdisp_cargo_UoM       DB " Tonnes   ",0
  51+ C0B3 6E 65 73 20
  51+ C0B7 20 20 00
  52+ C0BA              ;                           12345678901
  53+ C0BA
  54+ C0BA CD D1 C0     mktdisp_DispDEIXtoIY1DP:    call    mktdisp_DispDEIXtoIY
  55+ C0BD FD 36 02 00                          ld (iy+2),0
  56+ C0C1 FD 7E 00                             ld      a,(IY+0)
  57+ C0C4 FD 77 01                             ld      (IY+1),a
  58+ C0C7 3E 2E                                ld      a,"."
  59+ C0C9 FD 77 00                             ld      (IY+0),a
  60+ C0CC FD 23                                inc     IY
  61+ C0CE FD 23                                inc     IY
  62+ C0D0 C9                                   ret
  63+ C0D1              ;----------------------------------------------------------------------------------------------------------------------------------
  64+ C0D1 DD 22 66 C1  mktdisp_DispDEIXtoIY:       ld (.MKTclcn32z),ix
  65+ C0D5 ED 53 68 C1                          ld (.MKTclcn32zIX),de
  66+ C0D9 DD 21 62 C1                          ld ix,.MKTclcn32t+36
  67+ C0DD 06 09                                ld b,9
  68+ C0DF 0E 00                                ld c,0
  69+ C0E1 3E 30        .MKTclcn321:            ld a,'0'
  70+ C0E3 B7                                   or a
  71+ C0E4 DD 5E 00     .MKTclcn322:            ld e,(ix+0)
  72+ C0E7 DD 56 01                             ld d,(ix+1)
  73+ C0EA 2A 66 C1                             ld hl,(.MKTclcn32z)
  74+ C0ED ED 52                                sbc hl,de
  75+ C0EF 22 66 C1                             ld (.MKTclcn32z),hl
  76+ C0F2 DD 5E 02                             ld e,(ix+2)
  77+ C0F5 DD 56 03                             ld d,(ix+3)
  78+ C0F8 2A 68 C1                             ld hl,(.MKTclcn32zIX)
  79+ C0FB ED 52                                sbc hl,de
  80+ C0FD 22 68 C1                             ld (.MKTclcn32zIX),hl
  81+ C100 38 04                                jr c,.MKTclcn325
  82+ C102 0C                                   inc c
  83+ C103 3C                                   inc a
  84+ C104 18 DE                                jr .MKTclcn322
  85+ C106 DD 5E 00     .MKTclcn325:            ld e,(ix+0)
  86+ C109 DD 56 01                             ld d,(ix+1)
  87+ C10C 2A 66 C1                             ld hl,(.MKTclcn32z)
  88+ C10F 19                                   add hl,de
  89+ C110 22 66 C1                             ld (.MKTclcn32z),hl
  90+ C113 DD 5E 02                             ld e,(ix+2)
  91+ C116 DD 56 03                             ld d,(ix+3)
  92+ C119 2A 68 C1                             ld hl,(.MKTclcn32zIX)
  93+ C11C ED 5A                                adc hl,de
  94+ C11E 22 68 C1                             ld (.MKTclcn32zIX),hl
  95+ C121 11 FC FF                             ld de,-4
  96+ C124 DD 19                                add ix,de
  97+ C126 0C                                   inc c
  98+ C127 0D                                   dec c
  99+ C128 28 05                                jr z,.MKTclcn323
 100+ C12A FD 77 00                             ld (iy+0),a
 101+ C12D FD 23                                inc iy
 102+ C12F 10 B0        .MKTclcn323:            djnz .MKTclcn321
 103+ C131 3A 66 C1                             ld a,(.MKTclcn32z)
 104+ C134 C6 30                                add A,'0'
 105+ C136 FD 77 00                             ld (iy+0),a
 106+ C139 FD 36 01 00                          ld (iy+1),0
 107+ C13D C9                                   ret
 108+ C13E 01 00 00 00  .MKTclcn32t             dw 1,0,     10,0,     100,0,     1000,0,       10000,0
 108+ C142 0A 00 00 00
 108+ C146 64 00 00 00
 108+ C14A E8 03 00 00
 108+ C14E 10 27 00 00
 109+ C152 A0 86 01 00                          dw $86a0,1, $4240,$0f, $9680,$98, $e100,$05f5, $ca00,$3b9a
 109+ C156 40 42 0F 00
 109+ C15A 80 96 98 00
 109+ C15E 00 E1 F5 05
 109+ C162 00 CA 9A 3B
 110+ C166 00 00        .MKTclcn32z             ds 2
 111+ C168 00 00        .MKTclcn32zIX           ds 2
 112+ C16A              ;----------------------------------------------------------------------------------------------------------------------------------
 113+ C16A              ; "DispHL, writes HL to DE address"
 114+ C16A 01 F0 D8     MPD_DispHLtoDE:         ld	bc,-10000
 115+ C16D CD 83 C1                             call	MPD_Num1
 116+ C170 01 18 FC                             ld	bc,-1000
 117+ C173 CD 83 C1                             call	MPD_Num1
 118+ C176 01 9C FF                             ld	bc,-100
 119+ C179 CD 83 C1                             call	MPD_Num1
 120+ C17C 0E F6                                ld	c,-10
 121+ C17E CD 83 C1                             call	MPD_Num1
 122+ C181 0E FF                                ld	c,-1
 123+ C183 3E 2F        MPD_Num1:	            ld	a,'0'-1
 124+ C185 3C           .Num2:	                inc	a
 125+ C186 09                                   add	hl,bc
 126+ C187 38 FC                                jr	c,.Num2
 127+ C189 ED 42                                sbc	hl,bc
 128+ C18B 12                                   ld	(de),a
 129+ C18C 13                                   inc	de
 130+ C18D C9                                   ret
 131+ C18E              ;----------------------------------------------------------------------------------------------------------------------------------
 132+ C18E 26 00        MPD_DispAtoDE:          ld h,0
 133+ C190 6F                                   ld l,a
 134+ C191 C3 6A C1                             jp MPD_DispHLtoDE
 135+ C194              ;----------------------------------------------------------------------------------------------------------------------------------
 136+ C194 26 00        MPD_DispPriceAtoDE:     ld h,0
 137+ C196 6F                                   ld l,a
 138+ C197 01 9C FF                             ld	bc,-100
 139+ C19A CD AA C1                             call	.NumLeadBlank1
 140+ C19D 0E F6                                ld	c,-10
 141+ C19F CD 83 C1                             call	MPD_Num1
 142+ C1A2 3E 2E                                ld		a,'.'					; we could assume preformat but
 143+ C1A4                                                  DISPLAY "TODO: optimse"
 144+ C1A4 12                                   ld		(de),a					; we can optimse that later TODO
 145+ C1A5 13                                   inc		de						; with just an inc De
 146+ C1A6 0E FF                                ld	c,-1
 147+ C1A8 18 D9                                jr		MPD_Num1
 148+ C1AA 3E 2F        .NumLeadBlank1:	        ld	a,'0'-1
 149+ C1AC 3C           .NumLeadBlank2:	        inc	a
 150+ C1AD 09                                   add	hl,bc
 151+ C1AE 38 FC                                jr	c,.NumLeadBlank2
 152+ C1B0 FE 30                                cp	'0'
 153+ C1B2 20 02                                jr	nz,.DontBlank
 154+ C1B4 3E 20        .Blank:                 ld	a,' '
 155+ C1B6 ED 42        .DontBlank:	            sbc	hl,bc
 156+ C1B8 12                                   ld	(de),a
 157+ C1B9 13                                   inc	de
 158+ C1BA C9                                   ret
 159+ C1BB              ;----------------------------------------------------------------------------------------------------------------------------------
 160+ C1BB FE 00        MPD_DispQtyAtoDE:       cp	0
 161+ C1BD 28 30                                jr	z,.NoStock
 162+ C1BF 26 00                                ld h,0
 163+ C1C1 6F                                   ld l,a
 164+ C1C2 01 9C FF                             ld	bc,-100
 165+ C1C5 CD DE C1                             call	.NumLeadBlank1
 166+ C1C8 FE 20        .WasLead0:              cp      ' '
 167+ C1CA 20 09                                jr      nz,.NotHundredsZero
 168+ C1CC 0E F6                                ld	c,-10
 169+ C1CE CD DE C1                             call	.NumLeadBlank1
 170+ C1D1 0E FF                                ld	c,-1
 171+ C1D3 18 AE                                jr		MPD_Num1
 172+ C1D5 0E F6        .NotHundredsZero:       ld	c,-10
 173+ C1D7 CD 83 C1                             call	MPD_Num1
 174+ C1DA 0E FF                                ld	c,-1
 175+ C1DC 18 A5                                jr		MPD_Num1
 176+ C1DE 3E 2F        .NumLeadBlank1:	        ld	a,'0'-1
 177+ C1E0 3C           .NumLeadBlank2:	        inc	a
 178+ C1E1 09                                   add	hl,bc
 179+ C1E2 38 FC                                jr	c,.NumLeadBlank2
 180+ C1E4 FE 30                                cp	'0'
 181+ C1E6 20 02                                jr	nz,.DontBlank
 182+ C1E8 3E 20        .Blank:                 ld	a,' '
 183+ C1EA ED 42        .DontBlank:	            sbc	hl,bc
 184+ C1EC 12                                   ld	(de),a
 185+ C1ED 13                                   inc	de
 186+ C1EE C9                                   ret
 187+ C1EF 3E 20        .NoStock:               ld	a,' '
 188+ C1F1 12                                   ld	(de),a
 189+ C1F2 13                                   inc	de
 190+ C1F3 12                                   ld	(de),a
 191+ C1F4 13                                   inc	de
 192+ C1F5 3E 2D                                ld	a,'-'
 193+ C1F7 12                                   ld	(de),a
 194+ C1F8 13                                   inc de
 195+ C1F9 C9                                   ret
 196+ C1FA              ;----------------------------------------------------------------------------------------------------------------------------------
 197+ C1FA 06 09        MPD_print_boiler_text:  ld		b,9
 198+ C1FC DD 21 10 C0                          ld		ix,marketdisp_boiler_text
 199+ C200 C5           .BoilerTextLoop:        push	bc			; Save Message Count loop value
 200+ C201 DD 6E 00                             ld		l,(ix+0)	; Get col into hl
 201+ C204 DD 66 01                             ld		h,(ix+1)	;
 202+ C207 DD 46 02                             ld		b,(ix+2)	; get row into b
 203+ C20A DD 5E 03                             ld		e,(ix+3)	; Get text address into hl
 204+ C20D DD 56 04                             ld		d,(ix+4)	; .
 205+ C210 DD E5                                push    ix          ; save ix and prep for add via hl
 206+ C212                                      MMUSelectLayer2
 206+ C212 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 207+ C216                                      print_msg_at_de_at_b_hl_macro txt_status_colour
 207+ C216 0E FF       >                        ld      c,txt_status_colour
 207+ C218 CD 4B E6    >                        call    l2_print_at_320
 208+ C21B E1                                   pop     hl          ; add 5 to ix
 209+ C21C 3E 05                                ld      a,5         ; .
 210+ C21E ED 31                                add     hl,a        ; .
 211+ C220 E5 DD E1                             ld      ix,hl       ; .
 212+ C223 C1                                   pop		bc
 213+ C224 10 DA                                djnz	.BoilerTextLoop
 214+ C226 C9                                   ret
 215+ C227              ;----------------------------------------------------------------------------------------------------------------------------------
 216+ C227 2A 91 85     mktdisp_GetCash:        ld		hl,(Cash+2)
 217+ C22A EB                                   ex      de,hl
 218+ C22B DD 2A 8F 85                          ld      ix,(Cash)
 219+ C22F FD 21 7C C0                          ld		iy,mktdisp_cash_amount
 220+ C233 CD BA C0                             call 	mktdisp_DispDEIXtoIY1DP
 221+ C236 FD E5                                push    IY
 222+ C238 D1                                   pop     de
 223+ C239 21 90 C0                             ld      hl,mktdisp_cash_UoM
 224+ C23C 01 0B 00                             ld      bc,11
 225+ C23F ED B0                                ldir
 226+ C241 C9                                   ret
 227+ C242              ;----------------------------------------------------------------------------------------------------------------------------------
 228+ C242 11 00 00     mktdisp_GetCargo:   	ld      de,0
 229+ C245 DD 21 00 00                          ld      ix,0
 230+ C249 3A 95 85                             ld      a,(CargoRunningLoad)
 231+ C24C DD 6F                                ld      ixl,a
 232+ C24E FD 21 9B C0                          ld		iy,mktdisp_cargo_amount
 233+ C252 CD D1 C0                             call 	mktdisp_DispDEIXtoIY
 234+ C255 FD E5                                push    IY
 235+ C257 D1                                   pop     de
 236+ C258 13                                   inc     de
 237+ C259 21 AF C0                             ld      hl,mktdisp_cargo_UoM
 238+ C25C 01 0B 00                             ld      bc,11
 239+ C25F ED B0                                ldir
 240+ C261 C9                                   ret
 241+ C262              ;----------------------------------------------------------------------------------------------------------------------------------
 242+ C262 CD 42 C2     mktdisp_DisplayCargo:   call	mktdisp_GetCargo
 243+ C265 21 9B C0                             ld		hl,mktdisp_cargo_amount
 244+ C268 11 48 A8                             ld      de,mktdisp_cargo_position
 245+ C26B                                      MMUSelectLayer1
 245+ C26B ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 246+ C26F CD E3 E0                             call	l1_print_at
 247+ C272 C9                                   ret
 248+ C273              ;----------------------------------------------------------------------------------------------------------------------------------
 249+ C273 CD 27 C2     mktdisp_DisplayCash:        call	mktdisp_GetCash
 250+ C276 21 7C C0                             ld		hl,mktdisp_cash_amount
 251+ C279 11 48 B0                             ld      de,mktdisp_cash_position
 252+ C27C                                      MMUSelectLayer1
 252+ C27C ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 253+ C280 CD E3 E0                             call	l1_print_at
 254+ C283 C9                                   ret
 255+ C284              ;----------------------------------------------------------------------------------------------------------------------------------
 256+ C284              ; "A = stock item number"
 257+ C284 00           PrintMarketdispColour:      DB 0
 258+ C285 00           PrintMarketdispRow:         DB 0
 259+ C286 08           PrintMktDispItem:       ex      af,af'
 260+ C287 3E FF                                ld      a,txt_status_colour
 261+ C289 32 84 C2                             ld      (PrintMarketdispColour),a
 262+ C28C 08                                   ex      af,af'
 263+ C28D F5                                   push    af
 264+ C28E 57                                   ld      d,a                 ; .
 265+ C28F 1E 08                                ld      e,8                 ; .
 266+ C291 ED 30                                mul     de                  ; .
 267+ C293 3E 20                                ld      a,market_top_row   ; hl = base cursor position + row number * 8
 268+ C295 83                                   add     a,e
 269+ C296 32 85 C2                             ld      (PrintMarketdispRow),a
 270+ C299 ED 4B 84 C2                          ld      bc,(PrintMarketdispColour)  ; loads b with row, c with color
 271+ C29D                                      MMUSelectLayer2
 271+ C29D ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 272+ C2A1                                      print_msg_ld_bc_macro $08, market_blank_line    ; Optimise later to have a specific blank line function
 272+ C2A1 21 08 00    >                        ld      hl,$08
 272+ C2A4 11 4B C0    >                        ld      de,market_blank_line
 272+ C2A7 CD 4B E6    >                        call    l2_print_at_320
 273+ C2AA F1                                   pop     af
 274+ C2AB DD 21 00 E0                          ld		ix,StockFood		; start 8 bytes before index as first add will shift
 275+ C2AF FD 21 96 85                          ld      iy,CargoTonnes
 276+ C2B3 1E 08                                ld		e,8
 277+ C2B5 57                                   ld		d,a
 278+ C2B6 ED 30                                mul
 279+ C2B8 DD 19                                add		ix,de				; Move down a row ix += a * 8
 280+ C2BA 16 00                                ld      d,0
 281+ C2BC 5F                                   ld      e,a
 282+ C2BD FD 19                                add     iy,de                ; cargo table is just 1 byte per item
 283+ C2BF              .GetName:               MMUSelectStockTable
 283+ C2BF ED 91 57 37 >                     nextreg StockTableMMU,     BankStockTable
 284+ C2C3 DD 7E 00                             ld		a,(ix+StockNameOffset)
 285+ C2C6 21 30 8E                             ld		hl,WordIdxStock
 286+ C2C9 CD 39 89                             call	getTableText
 287+ C2CC EB                                   ex      de,hl
 288+ C2CD DD E5                                push    ix
 289+ C2CF ED 4B 84 C2                          ld      bc,(PrintMarketdispColour)  ; loads b with row, c with color
 290+ C2D3                                      MMUSelectLayer2
 290+ C2D3 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 291+ C2D7                                      print_msg_ld_bc_at_de_macro  $08
 291+ C2D7 21 08 00    >                        ld      hl,$08
 291+ C2DA CD 4B E6    >                        call    l2_print_at_320
 292+ C2DD DD E1                                pop     ix
 293+ C2DF              .GetUom                 MMUSelectStockTable
 293+ C2DF ED 91 57 37 >                     nextreg StockTableMMU,     BankStockTable
 294+ C2E3 DD 7E 07                             ld		a,(ix+StockUoMOffset)
 295+ C2E6 21 52 8E                             ld		hl,WordIdxUoMFull
 296+ C2E9 CD 39 89                             call	getTableText
 297+ C2EC EB                                   ex      de,hl
 298+ C2ED DD E5                                push    ix
 299+ C2EF ED 4B 84 C2                          ld      bc,(PrintMarketdispColour)  ; loads b with row, c with color
 300+ C2F3                                      MMUSelectLayer2
 300+ C2F3 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 301+ C2F7                                      print_msg_ld_bc_at_de_macro market_uom_col
 301+ C2F7 21 70 00    >                        ld      hl,market_uom_col
 301+ C2FA CD 4B E6    >                        call    l2_print_at_320
 302+ C2FD DD E1                                pop     ix
 303+ C2FF              .GetPrice:              MMUSelectStockTable
 303+ C2FF ED 91 57 37 >                     nextreg StockTableMMU,     BankStockTable
 304+ C303 DD 7E 02                             ld		a,(ix+StockPriceOffset)
 305+ C306 11 3D C0                             ld		de,txt_market_amount
 306+ C309 CD A9 C1                             call	MPM_DispPriceAtoDE
 307+ C30C DD E5                                push    ix
 308+ C30E ED 4B 84 C2                          ld      bc,(PrintMarketdispColour)  ; loads b with row, c with color
 309+ C312                                      MMUSelectLayer2
 309+ C312 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 310+ C316                                      print_msg_ld_bc_macro market_price_col, txt_market_amount
 310+ C316 21 C8 00    >                        ld      hl,market_price_col
 310+ C319 11 3D C0    >                        ld      de,txt_market_amount
 310+ C31C CD 4B E6    >                        call    l2_print_at_320
 311+ C31F DD E1                                pop     ix
 312+ C321              .GetQty:                MMUSelectStockTable
 312+ C321 ED 91 57 37 >                     nextreg StockTableMMU,     BankStockTable
 313+ C325 DD 7E 01                             ld		a,(ix+StockQtyOffset)
 314+ C328 11 42 C0                             ld		de,txt_market_quantity
 315+ C32B CD D0 C1                             call	MPM_DispQtyAtoDE
 316+ C32E ED 4B 84 C2                          ld      bc,(PrintMarketdispColour)  ; loads b with row, c with color
 317+ C332                                      MMUSelectLayer2
 317+ C332 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 318+ C336                                      print_msg_ld_bc_macro market_quantity_col, txt_market_quantity
 318+ C336 21 00 01    >                        ld      hl,market_quantity_col
 318+ C339 11 42 C0    >                        ld      de,txt_market_quantity
 318+ C33C CD 4B E6    >                        call    l2_print_at_320
 319+ C33F FD 7E 00     .GetCargoQty:           ld      a,(iy+0)
 320+ C342 11 46 C0                             ld      de,txt_market_cargo
 321+ C345 CD D0 C1                             call	MPM_DispQtyAtoDE
 322+ C348 ED 4B 84 C2                          ld      bc,(PrintMarketdispColour)  ; loads b with row, c with color
 323+ C34C                                      MMUSelectLayer2
 323+ C34C ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 324+ C350                                      print_msg_ld_bc_macro market_cargo_col, txt_market_cargo
 324+ C350 21 20 01    >                        ld      hl,market_cargo_col
 324+ C353 11 46 C0    >                        ld      de,txt_market_cargo
 324+ C356 CD 4B E6    >                        call    l2_print_at_320
 325+ C359 C9                                   ret
 326+ C35A
 327+ C35A              draw_mktdisp_prices_menu:MMUSelectLayer1
 327+ C35A ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 328+ C35E CD 8F E0                             call	l1_cls
 329+ C361 3E 07                                ld		a,7
 330+ C363 CD AA E0                             call	l1_attr_cls_to_a
 331+ C366                                      MMUSelectLayer2
 331+ C366 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 332+ C36A CD 0C E0                             call    asm_l2_double_buffer_off
 333+ C36D CD C5 E3                             call    l2_320_initialise
 334+ C370 CD 40 E3                             call    l2_320_cls
 335+ C373                                      MMUSelectSpriteBank
 335+ C373 ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
 336+ C377 CD B7 E7                             call    sprite_cls_cursors
 337+ C37A                                      MMUSelectLayer2
 337+ C37A ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 338+ C37E CD 3D E7     .Drawbox:               call    l2_draw_menu_border
 339+ C381 01 C0 0A                             ld		bc,$0AC0
 340+ C384 21 01 00                             ld      hl,$0001
 341+ C387 11 3C 01                             ld		de,320-4
 342+ C38A CD FE E7                             call	l2_draw_horz_line_320       ;b = row; hl = col, de = length, c = color"
 343+ C38D 01 C0 1D     .DrawProductLine        ld		bc,$1DC0
 344+ C390 21 08 00                             ld      hl,mkt_boiler_product_col
 345+ C393 11 60 00                             ld		de,8*12
 346+ C396 CD FE E7                             call	l2_draw_horz_line_320       ;b = row; hl = col, de = length, c = color"
 347+ C399 01 C0 1D     .DrawUoMLine:           ld		bc,$1DC0
 348+ C39C 21 70 00                             ld      hl,mkt_boiler_uom_col
 349+ C39F 11 47 00                             ld		de,(8*9)-1
 350+ C3A2 CD FE E7                             call	l2_draw_horz_line_320       ;b = row; hl = col, de = length, c = color"
 351+ C3A5 01 C0 1D     .DrawPriceLine:         ld		bc,$1DC0
 352+ C3A8 21 C0 00                             ld      hl,mkt_boiler_price_col
 353+ C3AB 11 28 00                             ld		de,8*5
 354+ C3AE CD FE E7                             call	l2_draw_horz_line_320       ;b = row; hl = col, de = length, c = color"
 355+ C3B1 01 C0 1D     .DrawStockLine:         ld		bc,$1DC0
 356+ C3B4 21 F0 00                             ld      hl,mkt_boiler_stock_col
 357+ C3B7 11 28 00                             ld		de,8*5
 358+ C3BA CD FE E7                             call	l2_draw_horz_line_320       ;b = row; hl = col, de = length, c = color"
 359+ C3BD 01 C0 1D     .DrawInvLine:           ld		bc,$1DC0
 360+ C3C0 21 20 01                             ld      hl,mkt_boiler_inv_col
 361+ C3C3 11 18 00                             ld		de,8*3
 362+ C3C6 CD FE E7                             call	l2_draw_horz_line_320       ;b = row; hl = col, de = length, c = color"
 363+ C3C9 3A 45 80     .StaticText:	        ld      a,(Galaxy)
 364+ C3CC                                      MMUSelectGalaxyA
 364+ C3CC ED 92 57    >                     nextreg GalaxyDataMMU,     a
 365+ C3CF 3E 19                                ld		a,25
 366+ C3D1 CD ED 8F                             call	expandTokenToString
 367+ C3D4 CD 7A F6                             call	GetDigramGalaxySeed
 368+ C3D7 CD 0F C2                             call	MPM_print_boiler_text
 369+ C3DA              ; Generate the market list on screen
 370+ C3DA              .DisplayPrices:         ZeroA
 370+ C3DA AF          >                        xor a
 371+ C3DB 21 08 20                             ld		hl,market_position          ; set current cursor position on screen
 372+ C3DE 22 4A C0                             ld		(market_cursor),hl          ; .
 373+ C3E1 F5           .MarketLoop:	            push	af
 374+ C3E2 CD 86 C2                             call	PrintMktDispItem         ; display a single market item
 375+ C3E5 F1                                   pop		af
 376+ C3E6 3C                                   inc		a
 377+ C3E7 FE 10                                cp		StockTypeMax
 378+ C3E9 20 F6                                jr		nz,.MarketLoop
 379+ C3EB CD 77 C2     .DisCargo:              call    MKT_DisplayCargo
 380+ C3EE CD 8C C2     .DisCash:               call    MKT_DisplayCash
 381+ C3F1 C9                                   ret
 382+ C3F2
 383+ C3F2
# file closed: ./Menus/market_prices_disp.asm
 852  C3F2                  DISPLAY "Bank ",BankDispMarket," - Bytes free ",/D, $2000 - ($-MenuShrChtAddr), " - BankDispMarket"
 853  C3F2              ; Bank 67  ------------------------------------------------------------------------------------------------------------------------
 854  C3F2                  SLOT    ShipModelsAddr
 855  C3F2                  PAGE    BankShipModels2
 856  C3F2              	ORG     ShipModelsAddr, BankShipModels2
 857  E000
 858  E000                  INCLUDE "./Data/ShipBank2Label.asm"
# file opened: ./Data/ShipBank2Label.asm
   1+ E000 53 68 69 70  ShipBank2Label:         DB  "ShipBank2      "
   1+ E004 42 61 6E 6B
   1+ E008 32 20 20 20
   1+ E00C 20 20 20
   2+ E00F
# file closed: ./Data/ShipBank2Label.asm
 859  E00F              GetShipBank2Id:         MGetShipBankId ShipBankTable2
 859  E00F 06 00       >                        ld      b,0
 859  E011 4F          >                        ld      c,a                                 ; c= original ship id
 859  E012 CB 3F       >.ShiftLoop:             srl     a
 859  E014 CB 3F       >                        srl     a
 859  E016 CB 3F       >                        srl     a
 859  E018 CB 3F       >                        srl     a                                   ; divide by 16
 859  E01A 47          >                        ld      b,a                                 ; b = bank nbr
 859  E01B 79          >                        ld      a,c
 859  E01C 50          >                        ld      d,b
 859  E01D 1E 10       >                        ld      e,16
 859  E01F ED 30       >                        mul                                         ; de = 16 * bank number (max is about 15 banks)
 859  E021 93          >                        sub     e                                   ; a= actual model id now
 859  E022 50          >.SelectedBank:          ld      d,b                                 ; save current bank number
 859  E023 47          >                        ld      b,a                                 ; b = adjusted ship nbr
 859  E024 7A          >                        ld      a,d                                 ; a = bank number
 859  E025             >;.. Now b = bank and a = adjusted ship nbr
 859  E025 21 62 E0    >                        ld      hl,ShipBankTable2                        ; a= bank index
 859  E028 ED 31       >                        add     hl,a
 859  E02A ED 31       >                        add     hl,a
 859  E02C 7E          >                        ld      a,(hl)                              ; a = actual bank now
 859  E02D             >                        ClearCarryFlag
 859  E02D B7          >                        or a
 859  E02E C9          >                        ret
 860  E02F              CopyVertsToUniv2:       McopyVertsToUniverse
 860  E02F 2A 4C C4    >                        ld          hl,(VerticesAddyAddr)       ; now the pointers are in Ubnk its easy to read
 860  E032 11 52 C4    >                        ld          de,UBnkHullVerticies
 860  E035 06 00       >                        ld          b,0
 860  E037 3A 40 C4    >                        ld			a,(VertexCtX6Addr)
 860  E03A 4F          >                        ld          c,a
 860  E03B EB          >                        ex          de,hl                       ; dma transfer goes de -> hl i.e. opposite of ldir
 860  E03C CD 58 7E    >                        call        memcopy_dma
 860  E03F C9          >                        ret
 861  E040              CopyEdgesToUniv2:       McopyEdgesToUniverse
 861  E040 2A 3A C4    >                        ld          hl,(EdgeAddyAddr)          ; now the pointers are in Ubnk its easy to read
 861  E043 11 42 C5    >                        ld          de,UBnkHullEdges
 861  E046 06 00       >                        ld          b,0
 861  E048 3A 3C C4    >                        ld			a,(LineX4Addr)
 861  E04B 4F          >                        ld          c,a
 861  E04C EB          >                        ex          de,hl                       ; dma transfer goes de -> hl i.e. opposite of ldir
 861  E04D CD 58 7E    >                        call        memcopy_dma
 861  E050 C9          >                        ret
 862  E051              CopyNormsToUniv2:       McopyNormsToUniverse
 862  E051 2A 48 C4    >                        ld          hl,(FaceAddyAddr)          ; now the pointers are in Ubnk its easy to read
 862  E054 11 0A C6    >                        ld          de,UBnkHullNormals
 862  E057 06 00       >                        ld          b,0
 862  E059 3A 44 C4    >                        ld          a,(FaceCtX4Addr)
 862  E05C 4F          >                        ld          c,a
 862  E05D EB          >                        ex          de,hl                       ; dma transfer goes de -> hl i.e. opposite of ldir
 862  E05E CD 58 7E    >                        call        memcopy_dma
 862  E061 C9          >                        ret
 863  E062              ShipBankTable2:         MShipBankTable
 863  E062 3B 00       >                        DW      BankShipModels1
 863  E064 43 00       >                        DW      BankShipModels2
 863  E066 44 00       >                        DW      BankShipModels3
 863  E068 45 00       >                        DW      BankShipModels4
 864  E06A              CopyShipToUniverse2     MCopyShipToUniverse     BankShipModels2
 864  E06A 21 42 C0    >                        ld          hl,UBnkShipModelBank
 864  E06D 36 43       >                        ld          (hl),BankShipModels2
 864  E06F F5          >                        push        af
 864  E070 FD 7D       >                        ld          a,iyl
 864  E072 32 44 C0    >                        ld          (UBnKShipModelId),a
 864  E075 F1          >                        pop         af
 864  E076 32 43 C0    >                        ld          (UBnKShipModelNbr),a
 864  E079 21 46 E1    >.GetHullDataLength:     ld          hl,ShipModelSizeTable
 864  E07C ED 31       >                        add         hl,a
 864  E07E ED 31       >                        add         hl,a                        ; we won't multiply by 2 as GetInfo is a general purpose routines so would end up x 4
 864  E080 4E          >                        ld          c,(hl)
 864  E081 23          >                        inc         hl
 864  E082 46          >                        ld          b,(hl)                      ; bc now equals length of data set
 864  E083 21 C6 E0    >.GetHullDataAddress:    ld          hl,ShipModelTable
 864  E086 ED 31       >                        add         hl,a
 864  E088 ED 31       >                        add         hl,a                        ; now hl = address of ship data value
 864  E08A 7E          >                        ld          a,(hl)
 864  E08B 23          >                        inc         hl
 864  E08C 66          >                        ld          h,(hl)
 864  E08D 6F          >                        ld          l,a                         ; now hl = address of ship hull data
 864  E08E 11 37 C4    >                        ld          de,UBnkHullCopy             ; Universe bank
 864  E091 01 1B 00    >                        ld          bc,ShipDataLength
 864  E094 ED B0       >                        ldir
 864  E096 CD 2F E0    >                        call        CopyVertsToUniv
 864  E099 CD 40 E0    >                        call        CopyEdgesToUniv
 864  E09C CD 51 E0    >                        call        CopyNormsToUniv
 864  E09F 21 10 C0    >.ClearName:             ld          hl,StartOfUnivName
 864  E0A2 3E 20       >                        ld          a," "
 864  E0A4 06 10       >                        ld          b,16
 864  E0A6 77          >.fillLoop:              ld          (hl),a
 864  E0A7 23          >                        inc         hl
 864  E0A8 10 FC       >                        djnz        .fillLoop
 864  E0AA 3A 44 C0    >.SetName:               ld          a,(UBnKShipModelId)
 864  E0AD CD D9 8F    >                        call        ShipIndexToAddress
 864  E0B0 11 10 C0    >                        ld          de,StartOfUnivName
 864  E0B3 06 10       >                        ld          b,16
 864  E0B5 7E          >.CopyLoop:              ld          a,(hl)
 864  E0B6 FE 00       >                        cp          0
 864  E0B8 28 05       >                        jr          z,.CopyDone
 864  E0BA 12          >                        ld          (de),a
 864  E0BB 23          >                        inc         hl
 864  E0BC 13          >                        inc         de
 864  E0BD 10 F6       >                        djnz        .CopyLoop
 864  E0BF C9          >.CopyDone:              ret
 865  E0C0              CopyBodyToUniverse2:    MCopyBodyToUniverse     CopyShipToUniverse2
 865  E0C0 3E 0D       >                        ld          a,13
 865  E0C2 CD 6A E0    >                        call        CopyShipToUniverse2
 865  E0C5 C9          >                        ret
 866  E0C6
 867  E0C6                  INCLUDE "./Data/ShipModelMetaData2.asm"
# file opened: ./Data/ShipModelMetaData2.asm
   1+ E0C6 66 E1        ShipModelTable2:         DW Dragon                                  ;16  $10
   2+ E0C8 47 E2                                 DW Escape_Pod                              ;17  $11
   3+ E0CA A6 E2                                 DW Fer_De_Lance                            ;18  $12
   4+ E0CC CB E3                                 DW Gecko                                   ;19  $13
   5+ E0CE 9A E4                                 DW Ghavial                                 ;20  $14
   6+ E0D0 89 E5                                 DW Iguana                                  ;21  $15
   7+ E0D2 86 E6                                 DW Krait                                   ;22  $16
   8+ E0D4 77 E7                                 DW Logo                                    ;23  $17
   9+ E0D6 3A E9                                 DW Mamba                                   ;24  $18
  10+ E0D8 73 EA                                 DW Missile                                 ;25  $19
  11+ E0DA 7C EB                                 DW Monitor                                 ;26  $1A
  12+ E0DC 89 EC                                 DW Moray                                   ;27  $1B
  13+ E0DE 6C ED                                 DW Ophidian                                ;28  $1C
  14+ E0E0 AB EE                                 DW Plate                                   ;29  $1D
  15+ E0E2 F0 EE                                 DW Python                                  ;30  $1E
  16+ E0E4 ED EF                                 DW Python_P                                ;31  $1F
  17+ E0E6 85 E1        ShipVertexTable2:        DW DragonVertices                          ;16  $10
  18+ E0E8 66 E2                                 DW Escape_PodVertices                      ;17  $11
  19+ E0EA C5 E2                                 DW Fer_De_LanceVertices                    ;18  $12
  20+ E0EC EA E3                                 DW GeckoVertices                           ;19  $13
  21+ E0EE B9 E4                                 DW GhavialVertices                         ;20  $14
  22+ E0F0 A8 E5                                 DW IguanaVertices                          ;21  $15
  23+ E0F2 A5 E6                                 DW KraitVertices                           ;22  $16
  24+ E0F4 96 E7                                 DW LogoVertices                            ;23  $17
  25+ E0F6 59 E9                                 DW MambaVertices                           ;24  $18
  26+ E0F8 92 EA                                 DW MissileVertices                         ;25  $19
  27+ E0FA 9B EB                                 DW MonitorVertices                         ;26  $1A
  28+ E0FC A8 EC                                 DW MorayVertices                           ;27  $1B
  29+ E0FE 8B ED                                 DW OphidianVertices                        ;28  $1C
  30+ E100 CA EE                                 DW PlateVertices                           ;29  $1D
  31+ E102 0F EF                                 DW PythonVertices                          ;30  $1E
  32+ E104 0C F0                                 DW Python_PVertices                        ;31  $1F
  33+ E106 BB E1        ShipEdgeTable2:          DW DragonEdges                             ;16  $10
  34+ E108 7E E2                                 DW Escape_PodEdges                         ;17  $11
  35+ E10A 37 E3                                 DW Fer_De_LanceEdges                       ;18  $12
  36+ E10C 32 E4                                 DW GeckoEdges                              ;19  $13
  37+ E10E 01 E5                                 DW GhavialEdges                            ;20  $14
  38+ E110 02 E6                                 DW IguanaEdges                             ;21  $15
  39+ E112 0B E7                                 DW KraitEdges                              ;22  $16
  40+ E114 92 E8                                 DW LogoEdges                               ;23  $17
  41+ E116 EF E9                                 DW MambaEdges                              ;24  $18
  42+ E118 F8 EA                                 DW MissileEdges                            ;25  $19
  43+ E11A 01 EC                                 DW MonitorEdges                            ;26  $1A
  44+ E11C FC EC                                 DW MorayEdges                              ;27  $1B
  45+ E11E 03 EE                                 DW OphidianEdges                           ;28  $1C
  46+ E120 DC EE                                 DW PlateEdges                              ;29  $1D
  47+ E122 51 EF                                 DW PythonEdges                             ;30  $1E
  48+ E124 4E F0                                 DW Python_PEdges                           ;31  $1F
  49+ E126 0F E2        ShipNormalTable2:        DW DragonNormals                           ;16  $10
  50+ E128 96 E2                                 DW Escape_PodNormals                       ;17  $11
  51+ E12A A3 E3                                 DW Fer_De_LanceNormals                     ;18  $12
  52+ E12C 76 E4                                 DW GeckoNormals                            ;19  $13
  53+ E12E 59 E5                                 DW GhavialNormals                          ;20  $14
  54+ E130 5E E6                                 DW IguanaNormals                           ;21  $15
  55+ E132 5F E7                                 DW KraitNormals                            ;22  $16
  56+ E134 26 E9                                 DW LogoNormals                             ;23  $17
  57+ E136 5F EA                                 DW MambaNormals                            ;24  $18
  58+ E138 58 EB                                 DW MissileNormals                          ;25  $19
  59+ E13A 5D EC                                 DW MonitorNormals                          ;26  $1A
  60+ E13C 48 ED                                 DW MorayNormals                            ;27  $1B
  61+ E13E 7B EE                                 DW OphidianNormals                         ;28  $1C
  62+ E140 EC EE                                 DW PlateNormals                            ;29  $1D
  63+ E142 B9 EF                                 DW PythonNormals                           ;30  $1E
  64+ E144 B6 F0                                 DW Python_PNormals                         ;31  $1F
  65+ E146 E1 00        ShipModelSizeTable2:     DW DragonLen                               ;16  $10
  66+ E148 5F 00                                 DW Escape_PodLen                           ;17  $11
  67+ E14A 25 01                                 DW Fer_De_LanceLen                         ;18  $12
  68+ E14C CF 00                                 DW GeckoLen                                ;19  $13
  69+ E14E EF 00                                 DW GhavialLen                              ;20  $14
  70+ E150 FD 00                                 DW IguanaLen                               ;21  $15
  71+ E152 F1 00                                 DW KraitLen                                ;22  $16
  72+ E154 C3 01                                 DW LogoLen                                 ;23  $17
  73+ E156 39 01                                 DW MambaLen                                ;24  $18
  74+ E158 09 01                                 DW MissileLen                              ;25  $19
  75+ E15A 0D 01                                 DW MonitorLen                              ;26  $1A
  76+ E15C E3 00                                 DW MorayLen                                ;27  $1B
  77+ E15E 3F 01                                 DW OphidianLen                             ;28  $1C
  78+ E160 45 00                                 DW PlateLen                                ;29  $1D
  79+ E162 FD 00                                 DW PythonLen                               ;30  $1E
  80+ E164 FD 00                                 DW Python_PLen                             ;31  $1F
  81+ E166
  82+ E166                                      include "Data/ships/Dragon.asm"
# file opened: ./Data/ships/Dragon.asm
   1++E166 00           Dragon:	                DB $00                                                    ; Number of cargo canisters released when destroyed
   2++E167 66 50                                DW $5066                                                  ; Ship's targetable area LoHi
   3++E169 BB E1                                DW DragonEdges                                            ; Edge Data
   4++E16B 54                                   DB DragonEdgesSize                                        ; Size of Edge Data
   5++E16C 00                                   DB $00                                                    ; Gun Vertex Byte offset
   6++E16D 3C                                   db $3C                                                    ; Explosion Count
   7++E16E 09                                   DB DragonVertSize /6                                      ; Vertex Count /6
   8++E16F 36                                   DB DragonVertSize                                         ; Vertex Count
   9++E170 15                                   DB DragonEdgesCnt                                         ; Edges Count
  10++E171 00 00                                DW $0000                                                  ; Bounty LoHi
  11++E173 38                                   DB DragonNormalsSize                                      ; Face (Normal) Count
  12++E174 20                                   DB $20                                                    ; Range when it turns to a dot
  13++E175 F7                                   DB $F7                                                    ; Energy Max
  14++E176 14                                   DB $14                                                    ; Speed Max
  15++E177 0F E2                                DW DragonNormals                                          ; Normals
  16++E179 00                                   DB $00                                                    ; Q scaling
  17++E17A 47                                   DB $40 | ShipMissiles7                                    ; Laser power and Nbr Missiles
  18++E17B 85 E1                                DW DragonVertices                                         ; Verticles Address
  19++E17D 00                                   DB ShipTypeNormal                                         ; Ship Type
  20++E17E 00                                   DB 0                                                      ; NewB Tactics
  21++E17F A0                                   DB ShipCanAnger | ShipFighterBaySize2 | ShipFighterWorm   ; AI Flags
  22++E180 B0                                   DB $B0                                                    ; chance of ECM module
  23++E181 FF                                   DB $FF                              ; Supports Solid Fill = false
  24++E182 00 00                                DW $0000                            ; no solid data
  25++E184 00                                   DB $00                              ; no solid data
  26++E185
  27++E185 00 00 FA 1F  DragonVertices:	        DB $00, $00, $FA, $1F, $6B, $05
  27++E189 6B 05
  28++E18B D8 00 7C 1F                          DB $D8, $00, $7C, $1F, $67, $01
  28++E18F 67 01
  29++E191 D8 00 7C 3F                          DB $D8, $00, $7C, $3F, $78, $12
  29++E195 78 12
  30++E197 00 28 FA 3F                          DB $00, $28, $FA, $3F, $CD, $23
  30++E19B CD 23
  31++E19D 00 28 FA 7F                          DB $00, $28, $FA, $7F, $CD, $89
  31++E1A1 CD 89
  32++E1A3 D8 00 7C BF                          DB $D8, $00, $7C, $BF, $9A, $34
  32++E1A7 9A 34
  33++E1A9 D8 00 7C 9F                          DB $D8, $00, $7C, $9F, $AB, $45
  33++E1AD AB 45
  34++E1AF 00 50 00 1F                          DB $00, $50, $00, $1F, $FF, $FF
  34++E1B3 FF FF
  35++E1B5 00 50 00 5F                          DB $00, $50, $00, $5F, $FF, $FF
  35++E1B9 FF FF
  36++E1BB              DragonVertSize:         equ $ - DragonVertices
  37++E1BB 1F 01 04 1C  DragonEdges:	        DB $1F, $01, $04, $1C
  38++E1BF 1F 12 08 1C                          DB $1F, $12, $08, $1C
  39++E1C3 1F 23 0C 1C                          DB $1F, $23, $0C, $1C
  40++E1C7 1F 34 14 1C                          DB $1F, $34, $14, $1C
  41++E1CB 1F 45 18 1C                          DB $1F, $45, $18, $1C
  42++E1CF 1F 50 00 1C                          DB $1F, $50, $00, $1C
  43++E1D3 1F 67 04 20                          DB $1F, $67, $04, $20
  44++E1D7 1F 78 08 20                          DB $1F, $78, $08, $20
  45++E1DB 1F 89 10 20                          DB $1F, $89, $10, $20
  46++E1DF 1F 9A 14 20                          DB $1F, $9A, $14, $20
  47++E1E3 1F AB 18 20                          DB $1F, $AB, $18, $20
  48++E1E7 1F B6 00 20                          DB $1F, $B6, $00, $20
  49++E1EB 1F 06 00 04                          DB $1F, $06, $00, $04
  50++E1EF 1F 17 04 08                          DB $1F, $17, $04, $08
  51++E1F3 1F 4A 14 18                          DB $1F, $4A, $14, $18
  52++E1F7 1F 5B 00 18                          DB $1F, $5B, $00, $18
  53++E1FB 1F 2C 08 0C                          DB $1F, $2C, $08, $0C
  54++E1FF 1F 8C 08 10                          DB $1F, $8C, $08, $10
  55++E203 1F 3D 0C 14                          DB $1F, $3D, $0C, $14
  56++E207 1F 9D 10 14                          DB $1F, $9D, $10, $14
  57++E20B 1F CD 0C 10                          DB $1F, $CD, $0C, $10
  58++E20F              DragonEdgesSize:        equ $ - DragonEdges
  59++E20F              DragonEdgesCnt:         equ DragonEdgesSize/4
  60++E20F 1F 10 5A 1C  DragonNormals:	        DB $1F, $10, $5A, $1C
  61++E213 1F 21 5A 00                          DB $1F, $21, $5A, $00
  62++E217 3F 19 5B 0E                          DB $3F, $19, $5B, $0E
  63++E21B BF 19 5B 0E                          DB $BF, $19, $5B, $0E
  64++E21F 9F 21 5A 00                          DB $9F, $21, $5A, $00
  65++E223 9F 10 5A 1C                          DB $9F, $10, $5A, $1C
  66++E227 5F 10 5A 1C                          DB $5F, $10, $5A, $1C
  67++E22B 5F 21 5A 00                          DB $5F, $21, $5A, $00
  68++E22F 7F 19 5B 0E                          DB $7F, $19, $5B, $0E
  69++E233 FF 19 5B 0E                          DB $FF, $19, $5B, $0E
  70++E237 DF 21 5A 00                          DB $DF, $21, $5A, $00
  71++E23B DF 10 5A 1C                          DB $DF, $10, $5A, $1C
  72++E23F 3F 30 00 52                          DB $3F, $30, $00, $52
  73++E243 BF 30 00 52                          DB $BF, $30, $00, $52
  74++E247              DragonNormalsSize:      equ $ - DragonNormals
  75++E247              DragonLen:              equ $ - Dragon
  76++E247
# file closed: ./Data/ships/Dragon.asm
  83+ E247                                      include "Data/ships/Escape_Pod.asm"
# file opened: ./Data/ships/Escape_Pod.asm
   1++E247 20           Escape_Pod:             DB $20                          ; Number of cargo canisters released when destroyed
   2++E248 00 01                                DW $0100                        ; Ship's targetable area LoHi
   3++E24A 7E E2                                DW Escape_PodEdges              ; Edge Data
   4++E24C 18                                   DB Escape_PodEdgesSize          ; Size of Edge Data
   5++E24D 00                                   DB $00                          ; Gun Vertex Byte offset
   6++E24E 16                                   DB $16                          ; Explosion Count
   7++E24F 04                                   DB Escape_PodVertSize /6        ; Vertex Count /6
   8++E250 18                                   DB Escape_PodVertSize           ; Vertex Count
   9++E251 06                                   DB Escape_PodEdgesCnt           ; Edges Count
  10++E252 00 00                                DW $0000                        ; Bounty LoHi
  11++E254 10                                   DB Escape_PodNormalsSize        ; Face (Normal) Count
  12++E255 08                                   DB $08                          ; Range when it turns to a dot
  13++E256 11                                   DB $11                          ; Energy Max
  14++E257 08                                   DB $08                          ; Speed Max
  15++E258 96 E2                                DW Escape_PodNormals            ; Normals
  16++E25A 04                                   DB $04                          ; Q scaling
  17++E25B 00                                   DB $00                          ; Laser power and Nbr Missiles
  18++E25C 66 E2                                DW Escape_PodVertices           ; Verticles Address
  19++E25E 00                                   DB 0                            ; Ship Type
  20++E25F 00                                   DB 0                            ; NewB Tactics
  21++E260 00                                   DB 0                            ; AI Flags
  22++E261 FF                                   DB $FF                          ; chance of ECM module
  23++E262 FF                                   DB $FF                              ; Supports Solid Fill = false
  24++E263 00 00                                DW $0000                            ; no solid data
  25++E265 00                                   DB $00                              ; no solid data
  26++E266
  27++E266 07 00 24 9F  Escape_PodVertices:	    DB $07, $00, $24, $9F, $12, $33
  27++E26A 12 33
  28++E26C 07 0E 0C FF                          DB $07, $0E, $0C, $FF, $02, $33
  28++E270 02 33
  29++E272 07 0E 0C BF                          DB $07, $0E, $0C, $BF, $01, $33
  29++E276 01 33
  30++E278 15 00 00 1F                          DB $15, $00, $00, $1F, $01, $22
  30++E27C 01 22
  31++E27E              Escape_PodVertSize:     equ $ - Escape_PodVertices
  32++E27E 1F 23 00 04  Escape_PodEdges:	    DB $1F, $23, $00, $04
  33++E282 1F 03 04 08                          DB $1F, $03, $04, $08
  34++E286 1F 01 08 0C                          DB $1F, $01, $08, $0C
  35++E28A 1F 12 0C 00                          DB $1F, $12, $0C, $00
  36++E28E 1F 13 00 08                          DB $1F, $13, $00, $08
  37++E292 1F 02 0C 04                          DB $1F, $02, $0C, $04
  38++E296              Escape_PodEdgesSize:    equ $ - Escape_PodEdges
  39++E296              Escape_PodEdgesCnt:     equ Escape_PodEdgesSize/4
  40++E296 3F 34 00 7A  Escape_PodNormals:	    DB $3F, $34, $00, $7A
  41++E29A 1F 27 67 1E                          DB $1F, $27, $67, $1E
  42++E29E 5F 27 67 1E                          DB $5F, $27, $67, $1E
  43++E2A2 9F 70 00 00                          DB $9F, $70, $00, $00
  44++E2A6              Escape_PodNormalsSize:  equ $ - Escape_PodNormals
  45++E2A6              Escape_PodLen:          equ $ - Escape_Pod
  46++E2A6
# file closed: ./Data/ships/Escape_Pod.asm
  84+ E2A6                                      include "Data/ships/Fer_De_Lance.asm"
# file opened: ./Data/ships/Fer_De_Lance.asm
   1++E2A6 00           Fer_De_Lance:	        DB $00                          ; Number of cargo canisters released when destroyed
   2++E2A7 40 06                                DW $0640                        ; Ship's targetable area LoHi
   3++E2A9 37 E3                                DW Fer_De_LanceEdges            ; Edge Data
   4++E2AB 6C                                   DB Fer_De_LanceEdgesSize        ; Size of Edge Data
   5++E2AC 00                                   DB $00                          ; Gun Vertex Byte offset
   6++E2AD 1A                                   DB $1A                          ; Explosion Count
   7++E2AE 13                                   DB Fer_De_LanceVertSize /6      ; Vertex Count /6
   8++E2AF 72                                   DB Fer_De_LanceVertSize         ; Vertex Count
   9++E2B0 1B                                   DB Fer_De_LanceEdgesCnt         ; Edges Count
  10++E2B1 00 00                                DW $0000                        ; Bounty LoHi
  11++E2B3 28                                   DB Fer_De_LanceNormalsSize      ; Face (Normal) Count
  12++E2B4 28                                   DB $28                          ; Range when it turns to a dot
  13++E2B5 A0                                   DB $A0                          ; Energy Max
  14++E2B6 1E                                   DB $1E                          ; Speed Max
  15++E2B7 A3 E3                                DW Fer_De_LanceNormals          ; Normals
  16++E2B9 01                                   DB $01                          ; Q scaling
  17++E2BA 17                                   DB $10 | ShipMissiles7          ; Laser power and Nbr Missiles
  18++E2BB C5 E2                                DW Fer_De_LanceVertices         ; Verticles Address
  19++E2BD 00                                   DB ShipTypeNormal               ; Ship Type
  20++E2BE 00                                   DB 0                            ; NewB Tactics
  21++E2BF 80                                   DB ShipCanAnger                 ; AI Flags
  22++E2C0 FF                                   DB $FF                          ; chance of ECM module
  23++E2C1 FF                                   DB $FF                              ; Supports Solid Fill = false
  24++E2C2 00 00                                DW $0000                            ; no solid data
  25++E2C4 00                                   DB $00                              ; no solid data
  26++E2C5
  27++E2C5 00 0E 6C 5F  Fer_De_LanceVertices:	DB $00, $0E, $6C, $5F, $01, $59
  27++E2C9 01 59
  28++E2CB 28 0E 04 FF                          DB $28, $0E, $04, $FF, $12, $99
  28++E2CF 12 99
  29++E2D1 0C 0E 34 FF                          DB $0C, $0E, $34, $FF, $23, $99
  29++E2D5 23 99
  30++E2D7 0C 0E 34 7F                          DB $0C, $0E, $34, $7F, $34, $99
  30++E2DB 34 99
  31++E2DD 28 0E 04 7F                          DB $28, $0E, $04, $7F, $45, $99
  31++E2E1 45 99
  32++E2E3 28 0E 04 BC                          DB $28, $0E, $04, $BC, $01, $26
  32++E2E7 01 26
  33++E2E9 0C 02 34 BC                          DB $0C, $02, $34, $BC, $23, $67
  33++E2ED 23 67
  34++E2EF 0C 02 34 3C                          DB $0C, $02, $34, $3C, $34, $78
  34++E2F3 34 78
  35++E2F5 28 0E 04 3C                          DB $28, $0E, $04, $3C, $04, $58
  35++E2F9 04 58
  36++E2FB 00 12 14 2F                          DB $00, $12, $14, $2F, $06, $78
  36++E2FF 06 78
  37++E301 03 0B 61 CB                          DB $03, $0B, $61, $CB, $00, $00
  37++E305 00 00
  38++E307 1A 08 12 89                          DB $1A, $08, $12, $89, $00, $00
  38++E30B 00 00
  39++E30D 10 0E 04 AB                          DB $10, $0E, $04, $AB, $00, $00
  39++E311 00 00
  40++E313 03 0B 61 4B                          DB $03, $0B, $61, $4B, $00, $00
  40++E317 00 00
  41++E319 1A 08 12 09                          DB $1A, $08, $12, $09, $00, $00
  41++E31D 00 00
  42++E31F 10 0E 04 2B                          DB $10, $0E, $04, $2B, $00, $00
  42++E323 00 00
  43++E325 00 0E 14 6C                          DB $00, $0E, $14, $6C, $99, $99
  43++E329 99 99
  44++E32B 0E 0E 2C CC                          DB $0E, $0E, $2C, $CC, $99, $99
  44++E32F 99 99
  45++E331 0E 0E 2C 4C                          DB $0E, $0E, $2C, $4C, $99, $99
  45++E335 99 99
  46++E337              Fer_De_LanceVertSize:   equ $ - Fer_De_LanceVertices
  47++E337 1F 19 00 04  Fer_De_LanceEdges:	    DB $1F, $19, $00, $04
  48++E33B 1F 29 04 08                          DB $1F, $29, $04, $08
  49++E33F 1F 39 08 0C                          DB $1F, $39, $08, $0C
  50++E343 1F 49 0C 10                          DB $1F, $49, $0C, $10
  51++E347 1F 59 00 10                          DB $1F, $59, $00, $10
  52++E34B 1C 01 00 14                          DB $1C, $01, $00, $14
  53++E34F 1C 26 14 18                          DB $1C, $26, $14, $18
  54++E353 1C 37 18 1C                          DB $1C, $37, $18, $1C
  55++E357 1C 48 1C 20                          DB $1C, $48, $1C, $20
  56++E35B 1C 05 00 20                          DB $1C, $05, $00, $20
  57++E35F 0F 06 14 24                          DB $0F, $06, $14, $24
  58++E363 0B 67 18 24                          DB $0B, $67, $18, $24
  59++E367 0B 78 1C 24                          DB $0B, $78, $1C, $24
  60++E36B 0F 08 20 24                          DB $0F, $08, $20, $24
  61++E36F 0E 12 04 14                          DB $0E, $12, $04, $14
  62++E373 0E 23 08 18                          DB $0E, $23, $08, $18
  63++E377 0E 34 0C 1C                          DB $0E, $34, $0C, $1C
  64++E37B 0E 45 10 20                          DB $0E, $45, $10, $20
  65++E37F 08 00 28 2C                          DB $08, $00, $28, $2C
  66++E383 09 00 2C 30                          DB $09, $00, $2C, $30
  67++E387 0B 00 28 30                          DB $0B, $00, $28, $30
  68++E38B 08 00 34 38                          DB $08, $00, $34, $38
  69++E38F 09 00 38 3C                          DB $09, $00, $38, $3C
  70++E393 0B 00 34 3C                          DB $0B, $00, $34, $3C
  71++E397 0C 99 40 44                          DB $0C, $99, $40, $44
  72++E39B 0C 99 40 48                          DB $0C, $99, $40, $48
  73++E39F 08 99 44 48                          DB $08, $99, $44, $48
  74++E3A3              Fer_De_LanceEdgesSize:  equ $ - Fer_De_LanceEdges
  75++E3A3              Fer_De_LanceEdgesCnt:   equ Fer_De_LanceEdgesSize/4
  76++E3A3 1C 00 18 06  Fer_De_LanceNormals:	DB $1C, $00, $18, $06
  77++E3A7 9F 44 00 18                          DB $9F, $44, $00, $18
  78++E3AB BF 3F 00 25                          DB $BF, $3F, $00, $25
  79++E3AF 3F 00 00 68                          DB $3F, $00, $00, $68
  80++E3B3 3F 3F 00 25                          DB $3F, $3F, $00, $25
  81++E3B7 1F 44 00 18                          DB $1F, $44, $00, $18
  82++E3BB BC 0C 2E 13                          DB $BC, $0C, $2E, $13
  83++E3BF 3C 00 2D 16                          DB $3C, $00, $2D, $16
  84++E3C3 3C 0C 2E 13                          DB $3C, $0C, $2E, $13
  85++E3C7 5F 00 1C 00                          DB $5F, $00, $1C, $00
  86++E3CB              Fer_De_LanceNormalsSize:equ $ - Fer_De_LanceNormals
  87++E3CB              Fer_De_LanceLen:        equ $ - Fer_De_Lance
  88++E3CB
# file closed: ./Data/ships/Fer_De_Lance.asm
  85+ E3CB                                      include "Data/ships/Gecko.asm"
# file opened: ./Data/ships/Gecko.asm
   1++E3CB 00           Gecko:	                DB $00                         ; Number of cargo canisters released when destroyed
   2++E3CC 49 26                                DW $2649                       ; Ship's targetable area LoHi
   3++E3CE 32 E4                                DW GeckoEdges                  ; Edge Data
   4++E3D0 44                                   DB GeckoEdgesSize              ; Size of Edge Data
   5++E3D1 00                                   DB $00                         ; Gun Vertex Byte offset
   6++E3D2 1A                                   DB $1A                         ; Explosion Count
   7++E3D3 0C                                   DB GeckoVertSize /6            ; Vertex Count /6
   8++E3D4 48                                   DB GeckoVertSize               ; Vertex Count
   9++E3D5 11                                   DB GeckoEdgesCnt               ; Edges Count
  10++E3D6 37 00                                DW $0037                       ; Bounty LoHi
  11++E3D8 24                                   DB GeckoNormalsSize            ; Face (Normal) Count
  12++E3D9 12                                   DB $12                         ; Range when it turns to a dot
  13++E3DA 46                                   DB $46                         ; Energy Max
  14++E3DB 1E                                   DB $1E                         ; Speed Max
  15++E3DC 76 E4                                DW GeckoNormals                ; Normals
  16++E3DE 03                                   DB $03                         ; Q scaling
  17++E3DF 10                                   DB $10                         ; Laser power and Nbr Missiles
  18++E3E0 EA E3                                DW GeckoVertices               ; Verticles Address
  19++E3E2 00                                   DB ShipTypeNormal              ; Ship Type
  20++E3E3 00                                   DB 0                           ; NewB Tactics
  21++E3E4 80                                   DB ShipCanAnger                ; AI Flags
  22++E3E5 60                                   DB $60                         ; chance of ECM module
  23++E3E6 FF                                   DB $FF                              ; Supports Solid Fill = false
  24++E3E7 00 00                                DW $0000                            ; no solid data
  25++E3E9 00                                   DB $00                              ; no solid data
  26++E3EA
  27++E3EA 0A 04 2F DF  GeckoVertices:	        DB $0A, $04, $2F, $DF, $03, $45
  27++E3EE 03 45
  28++E3F0 0A 04 2F 5F                          DB $0A, $04, $2F, $5F, $01, $23
  28++E3F4 01 23
  29++E3F6 10 08 17 BF                          DB $10, $08, $17, $BF, $05, $67
  29++E3FA 05 67
  30++E3FC 10 08 17 3F                          DB $10, $08, $17, $3F, $01, $78
  30++E400 01 78
  31++E402 42 00 03 BF                          DB $42, $00, $03, $BF, $45, $66
  31++E406 45 66
  32++E408 42 00 03 3F                          DB $42, $00, $03, $3F, $12, $88
  32++E40C 12 88
  33++E40E 14 0E 17 FF                          DB $14, $0E, $17, $FF, $34, $67
  33++E412 34 67
  34++E414 14 0E 17 7F                          DB $14, $0E, $17, $7F, $23, $78
  34++E418 23 78
  35++E41A 08 06 21 D0                          DB $08, $06, $21, $D0, $33, $33
  35++E41E 33 33
  36++E420 08 06 21 51                          DB $08, $06, $21, $51, $33, $33
  36++E424 33 33
  37++E426 08 0D 10 F0                          DB $08, $0D, $10, $F0, $33, $33
  37++E42A 33 33
  38++E42C 08 0D 10 71                          DB $08, $0D, $10, $71, $33, $33
  38++E430 33 33
  39++E432              GeckoVertSize:          equ $ - GeckoVertices
  40++E432 1F 03 00 04  GeckoEdges:	            DB $1F, $03, $00, $04
  41++E436 1F 12 04 14                          DB $1F, $12, $04, $14
  42++E43A 1F 18 14 0C                          DB $1F, $18, $14, $0C
  43++E43E 1F 07 0C 08                          DB $1F, $07, $0C, $08
  44++E442 1F 56 08 10                          DB $1F, $56, $08, $10
  45++E446 1F 45 10 00                          DB $1F, $45, $10, $00
  46++E44A 1F 28 14 1C                          DB $1F, $28, $14, $1C
  47++E44E 1F 37 1C 18                          DB $1F, $37, $1C, $18
  48++E452 1F 46 18 10                          DB $1F, $46, $18, $10
  49++E456 1D 05 00 08                          DB $1D, $05, $00, $08
  50++E45A 1E 01 04 0C                          DB $1E, $01, $04, $0C
  51++E45E 1D 34 00 18                          DB $1D, $34, $00, $18
  52++E462 1E 23 04 1C                          DB $1E, $23, $04, $1C
  53++E466 14 67 08 18                          DB $14, $67, $08, $18
  54++E46A 14 78 0C 1C                          DB $14, $78, $0C, $1C
  55++E46E 10 33 20 28                          DB $10, $33, $20, $28
  56++E472 11 33 24 2C                          DB $11, $33, $24, $2C
  57++E476              GeckoEdgesSize:             equ $ - GeckoEdges
  58++E476              GeckoEdgesCnt:          equ GeckoEdgesSize/4
  59++E476 1F 00 1F 05  GeckoNormals:	        DB $1F, $00, $1F, $05
  60++E47A 1F 04 2D 08                          DB $1F, $04, $2D, $08
  61++E47E 5F 19 6C 13                          DB $5F, $19, $6C, $13
  62++E482 5F 00 54 0C                          DB $5F, $00, $54, $0C
  63++E486 DF 19 6C 13                          DB $DF, $19, $6C, $13
  64++E48A 9F 04 2D 08                          DB $9F, $04, $2D, $08
  65++E48E BF 58 10 D6                          DB $BF, $58, $10, $D6
  66++E492 3F 00 00 BB                          DB $3F, $00, $00, $BB
  67++E496 3F 58 10 D6                          DB $3F, $58, $10, $D6
  68++E49A              GeckoNormalsSize:       equ $ - GeckoNormals
  69++E49A              GeckoLen:               equ $ - Gecko
  70++E49A
# file closed: ./Data/ships/Gecko.asm
  86+ E49A                                      include "Data/ships/Ghavial.asm"
# file opened: ./Data/ships/Ghavial.asm
   1++E49A 03           Ghavial:	            DB $03                      ; Number of cargo canisters released when destroyed
   2++E49B 00 26                                DW $2600                    ; Ship's targetable area LoHi
   3++E49D 01 E5                                DW GhavialEdges             ; Edge Data
   4++E49F 58                                   DB GhavialEdgesSize         ; Size of Edge Data
   5++E4A0 00                                   DB $00                      ; Gun Vertex Byte offset
   6++E4A1 22                                   DB $22                      ; Explosion Count
   7++E4A2 0C                                   DB GhavialVertSize /6       ; Vertex Count /6
   8++E4A3 48                                   DB GhavialVertSize          ; Vertex Count
   9++E4A4 16                                   DB GhavialEdgesCnt          ; Edges Count
  10++E4A5 64 00                                DW $0064                    ; Bounty LoHi
  11++E4A7 30                                   DB GhavialNormalsSize       ; Face (Normal) Count
  12++E4A8 0A                                   DB $0A                      ; Range when it turns to a dot
  13++E4A9 72                                   DB $72                      ; Energy Max
  14++E4AA 10                                   DB $10                      ; Speed Max
  15++E4AB 59 E5                                DW GhavialNormals           ; Normals
  16++E4AD 00                                   DB $00                      ; Q scaling
  17++E4AE 27                                   DB $27                      ; Laser power and Nbr Missiles
  18++E4AF B9 E4                                DW GhavialVertices          ; Verticles Address
  19++E4B1 00                                   DB ShipTypeNormal           ; Ship Type
  20++E4B2 00                                   DB 0                        ; NewB Tactics
  21++E4B3 80                                   DB ShipCanAnger             ; AI Flags
  22++E4B4 60                                   DB $60                      ; chance of ECM module
  23++E4B5 FF                                   DB $FF                              ; Supports Solid Fill = false
  24++E4B6 00 00                                DW $0000                            ; no solid data
  25++E4B8 00                                   DB $00                              ; no solid data
  26++E4B9
  27++E4B9 1E 00 64 1F  GhavialVertices:	DB $1E, $00, $64, $1F, $67, $01
  27++E4BD 67 01
  28++E4BF 1E 00 64 9F                      DB $1E, $00, $64, $9F, $6B, $05
  28++E4C3 6B 05
  29++E4C5 28 1E 1A 3F                      DB $28, $1E, $1A, $3F, $23, $01
  29++E4C9 23 01
  30++E4CB 28 1E 1A BF                      DB $28, $1E, $1A, $BF, $45, $03
  30++E4CF 45 03
  31++E4D1 3C 00 14 3F                      DB $3C, $00, $14, $3F, $78, $12
  31++E4D5 78 12
  32++E4D7 28 00 3C 3F                      DB $28, $00, $3C, $3F, $89, $23
  32++E4DB 89 23
  33++E4DD 3C 00 14 BF                      DB $3C, $00, $14, $BF, $AB, $45
  33++E4E1 AB 45
  34++E4E3 28 00 3C BF                      DB $28, $00, $3C, $BF, $9A, $34
  34++E4E7 9A 34
  35++E4E9 00 1E 14 7F                      DB $00, $1E, $14, $7F, $FF, $FF
  35++E4ED FF FF
  36++E4EF 0A 18 00 09                      DB $0A, $18, $00, $09, $00, $00
  36++E4F3 00 00
  37++E4F5 0A 18 00 89                      DB $0A, $18, $00, $89, $00, $00
  37++E4F9 00 00
  38++E4FB 00 16 0A 09                      DB $00, $16, $0A, $09, $00, $00
  38++E4FF 00 00
  39++E501
  40++E501              GhavialVertSize: equ $ - GhavialVertices
  41++E501
  42++E501
  43++E501 1F 01 00 08  GhavialEdges:	DB $1F, $01, $00, $08
  44++E505 1F 12 10 08                  DB $1F, $12, $10, $08
  45++E509 1F 23 14 08                  DB $1F, $23, $14, $08
  46++E50D 1F 30 0C 08                  DB $1F, $30, $0C, $08
  47++E511 1F 34 1C 0C                  DB $1F, $34, $1C, $0C
  48++E515 1F 45 18 0C                  DB $1F, $45, $18, $0C
  49++E519 1F 50 0C 04                  DB $1F, $50, $0C, $04
  50++E51D 1F 67 00 20                  DB $1F, $67, $00, $20
  51++E521 1F 78 10 20                  DB $1F, $78, $10, $20
  52++E525 1F 89 14 20                  DB $1F, $89, $14, $20
  53++E529 1F 9A 1C 20                  DB $1F, $9A, $1C, $20
  54++E52D 1F AB 18 20                  DB $1F, $AB, $18, $20
  55++E531 1F B6 04 20                  DB $1F, $B6, $04, $20
  56++E535 1F 06 04 00                  DB $1F, $06, $04, $00
  57++E539 1F 17 00 10                  DB $1F, $17, $00, $10
  58++E53D 1F 28 10 14                  DB $1F, $28, $10, $14
  59++E541 1F 39 14 1C                  DB $1F, $39, $14, $1C
  60++E545 1F 4A 1C 18                  DB $1F, $4A, $1C, $18
  61++E549 1F 5B 18 04                  DB $1F, $5B, $18, $04
  62++E54D 09 00 24 28                  DB $09, $00, $24, $28
  63++E551 09 00 28 2C                  DB $09, $00, $28, $2C
  64++E555 09 00 2C 24                  DB $09, $00, $2C, $24
  65++E559
  66++E559              GhavialEdgesSize: equ $ - GhavialEdges
  67++E559
  68++E559
  69++E559              GhavialEdgesCnt: equ GhavialEdgesSize/4
  70++E559
  71++E559
  72++E559 1F 00 3E 0E  GhavialNormals:	DB $1F, $00, $3E, $0E
  73++E55D 1F 33 24 0C                  DB $1F, $33, $24, $0C
  74++E561 3F 33 1C 19                  DB $3F, $33, $1C, $19
  75++E565 3F 00 30 2A                  DB $3F, $00, $30, $2A
  76++E569 BF 33 1C 19                  DB $BF, $33, $1C, $19
  77++E56D 9F 33 24 0C                  DB $9F, $33, $24, $0C
  78++E571 5F 00 3E 0F                  DB $5F, $00, $3E, $0F
  79++E575 5F 1C 38 07                  DB $5F, $1C, $38, $07
  80++E579 7F 1B 37 0D                  DB $7F, $1B, $37, $0D
  81++E57D 7F 00 33 26                  DB $7F, $00, $33, $26
  82++E581 FF 1B 37 0D                  DB $FF, $1B, $37, $0D
  83++E585 DF 1C 38 07                  DB $DF, $1C, $38, $07
  84++E589
  85++E589              GhavialNormalsSize: equ $ - GhavialNormals
  86++E589              GhavialLen: equ $ - Ghavial
  87++E589
# file closed: ./Data/ships/Ghavial.asm
  87+ E589                                      include "Data/ships/Iguana.asm"
# file opened: ./Data/ships/Iguana.asm
   1++E589 01           Iguana:	                DB $01                      ; Number of cargo canisters released when destroyed
   2++E58A AC 0D                                DW $0DAC                    ; Ship's targetable area LoHi
   3++E58C 02 E6                                DW IguanaEdges              ; Edge Data
   4++E58E 5C                                   DB IguanaEdgesSize          ; Size of Edge Data
   5++E58F 00                                   DB $00                      ; Gun Vertex Byte offset
   6++E590 1A                                   DB $1A                      ; Explosion Count
   7++E591 0F                                   DB IguanaVertSize /6        ; Vertex Count /6
   8++E592 5A                                   DB IguanaVertSize           ; Vertex Count
   9++E593 17                                   DB IguanaEdgesCnt           ; Edges Count
  10++E594 96 00                                DW $0096                    ; Bounty LoHi
  11++E596 28                                   DB IguanaNormalsSize        ; Face (Normal) Count
  12++E597 0A                                   DB $0A                      ; Range when it turns to a dot
  13++E598 5A                                   DB $5A                      ; Energy Max
  14++E599 21                                   DB $21                      ; Speed Max
  15++E59A 5E E6                                DW IguanaNormals            ; Normals
  16++E59C 01                                   DB $01                      ; Q scaling
  17++E59D 23                                   DB $20 | ShipMissiles3      ; Laser power and Nbr Missiles
  18++E59E A8 E5                                DW IguanaVertices           ; Verticles Address
  19++E5A0 00                                   DB ShipTypeNormal           ; Ship Type
  20++E5A1 00                                   DB 0                        ; NewB Tactics
  21++E5A2 80                                   DB ShipCanAnger             ; AI Flags
  22++E5A3 80                                   DB $80                      ; chance of ECM module
  23++E5A4 FF                                   DB $FF                              ; Supports Solid Fill = false
  24++E5A5 00 00                                DW $0000                            ; no solid data
  25++E5A7 00                                   DB $00                              ; no solid data
  26++E5A8
  27++E5A8
  28++E5A8 00 00 5A 1F  IguanaVertices:	DB $00, $00, $5A, $1F, $23, $01
  28++E5AC 23 01
  29++E5AE 00 14 1E 1F                  DB $00, $14, $1E, $1F, $46, $02
  29++E5B2 46 02
  30++E5B4 28 00 0A 9F                  DB $28, $00, $0A, $9F, $45, $01
  30++E5B8 45 01
  31++E5BA 00 14 1E 5F                  DB $00, $14, $1E, $5F, $57, $13
  31++E5BE 57 13
  32++E5C0 28 00 0A 1F                  DB $28, $00, $0A, $1F, $67, $23
  32++E5C4 67 23
  33++E5C6 00 14 28 3F                  DB $00, $14, $28, $3F, $89, $46
  33++E5CA 89 46
  34++E5CC 28 00 1E BF                  DB $28, $00, $1E, $BF, $88, $45
  34++E5D0 88 45
  35++E5D2 00 14 28 7F                  DB $00, $14, $28, $7F, $89, $57
  35++E5D6 89 57
  36++E5D8 28 00 1E 3F                  DB $28, $00, $1E, $3F, $99, $67
  36++E5DC 99 67
  37++E5DE 28 00 28 9E                  DB $28, $00, $28, $9E, $11, $00
  37++E5E2 11 00
  38++E5E4 28 00 28 1E                  DB $28, $00, $28, $1E, $33, $22
  38++E5E8 33 22
  39++E5EA 00 08 28 2A                  DB $00, $08, $28, $2A, $99, $88
  39++E5EE 99 88
  40++E5F0 10 00 24 AA                  DB $10, $00, $24, $AA, $88, $88
  40++E5F4 88 88
  41++E5F6 00 08 28 6A                  DB $00, $08, $28, $6A, $99, $88
  41++E5FA 99 88
  42++E5FC 10 00 24 2A                  DB $10, $00, $24, $2A, $99, $99
  42++E600 99 99
  43++E602
  44++E602              IguanaVertSize: equ $ - IguanaVertices
  45++E602
  46++E602
  47++E602
  48++E602 1F 02 00 04  IguanaEdges:	DB $1F, $02, $00, $04
  49++E606 1F 01 00 08                  DB $1F, $01, $00, $08
  50++E60A 1F 13 00 0C                  DB $1F, $13, $00, $0C
  51++E60E 1F 23 00 10                  DB $1F, $23, $00, $10
  52++E612 1F 46 04 14                  DB $1F, $46, $04, $14
  53++E616 1F 45 08 18                  DB $1F, $45, $08, $18
  54++E61A 1F 57 0C 1C                  DB $1F, $57, $0C, $1C
  55++E61E 1F 67 10 20                  DB $1F, $67, $10, $20
  56++E622 1F 48 14 18                  DB $1F, $48, $14, $18
  57++E626 1F 58 18 1C                  DB $1F, $58, $18, $1C
  58++E62A 1F 69 14 20                  DB $1F, $69, $14, $20
  59++E62E 1F 79 1C 20                  DB $1F, $79, $1C, $20
  60++E632 1F 04 04 08                  DB $1F, $04, $04, $08
  61++E636 1F 15 08 0C                  DB $1F, $15, $08, $0C
  62++E63A 1F 26 04 10                  DB $1F, $26, $04, $10
  63++E63E 1F 37 0C 10                  DB $1F, $37, $0C, $10
  64++E642 1F 89 14 1C                  DB $1F, $89, $14, $1C
  65++E646 1E 01 08 24                  DB $1E, $01, $08, $24
  66++E64A 1E 23 10 28                  DB $1E, $23, $10, $28
  67++E64E 0A 88 2C 30                  DB $0A, $88, $2C, $30
  68++E652 0A 88 34 30                  DB $0A, $88, $34, $30
  69++E656 0A 99 2C 38                  DB $0A, $99, $2C, $38
  70++E65A 0A 99 34 38                  DB $0A, $99, $34, $38
  71++E65E
  72++E65E              IguanaEdgesSize: equ $ - IguanaEdges
  73++E65E
  74++E65E
  75++E65E              IguanaEdgesCnt: equ IguanaEdgesSize/4
  76++E65E
  77++E65E
  78++E65E 9F 33 4D 19  IguanaNormals:	DB $9F, $33, $4D, $19
  79++E662 DF 33 4D 19  	DB $DF, $33, $4D, $19
  80++E666 1F 33 4D 19  	DB $1F, $33, $4D, $19
  81++E66A 5F 33 4D 19  	DB $5F, $33, $4D, $19
  82++E66E 9F 2A 55 00  	DB $9F, $2A, $55, $00
  83++E672 DF 2A 55 00  	DB $DF, $2A, $55, $00
  84++E676 1F 2A 55 00  	DB $1F, $2A, $55, $00
  85++E67A 5F 2A 55 00  	DB $5F, $2A, $55, $00
  86++E67E BF 17 00 5D  	DB $BF, $17, $00, $5D
  87++E682 3F 17 00 5D  	DB $3F, $17, $00, $5D
  88++E686
  89++E686
  90++E686              IguanaNormalsSize: equ $ - IguanaNormals
  91++E686              IguanaLen: equ $ - Iguana
  92++E686
# file closed: ./Data/ships/Iguana.asm
  88+ E686                                      include "Data/ships/Krait.asm"
# file opened: ./Data/ships/Krait.asm
   1++E686
   2++E686 01           Krait:                  DB $01                         ; Number of cargo canisters released when destroyed
   3++E687 0E 10                                DW $100E                       ; Ship's targetable area LoHi
   4++E689 0B E7                                DW KraitEdges                  ; Edge Data
   5++E68B 54                                   DB KraitEdgesSize              ; Size of Edge Data
   6++E68C 00                                   DB $00                         ; Gun Vertex Byte offset
   7++E68D 12                                   DB $12                         ; Explosion Count
   8++E68E 11                                   DB KraitVertSize /6            ; Vertex Count /6
   9++E68F 66                                   DB KraitVertSize               ; Vertex Count
  10++E690 15                                   DB KraitEdgesCnt               ; Edges Count
  11++E691 64 00                                DW $0064                       ; Bounty LoHi
  12++E693 18                                   DB KraitNormalsSize            ; Face (Normal) Count
  13++E694 14                                   DB $14                         ; Range when it turns to a dot
  14++E695 50                                   DB $50                         ; Energy Max
  15++E696 1E                                   DB $1E                         ; Speed Max
  16++E697 5F E7                                DW KraitNormals                ; Normals
  17++E699 02                                   DB $02                         ; Q scaling
  18++E69A 14                                   DB $10 | ShipMissiles4         ; Laser power and Nbr Missiles
  19++E69B A5 E6                                DW KraitVertices               ; Verticles Address
  20++E69D 00                                   DB ShipTypeNormal              ; Ship Type
  21++E69E 00                                   DB 0                           ; NewB Tactics
  22++E69F 80                                   DB ShipCanAnger                ; AI Flags
  23++E6A0 D0                                   DB $D0                         ; chance of ECM module
  24++E6A1 FF                                   DB $FF                              ; Supports Solid Fill = false
  25++E6A2 00 00                                DW $0000                            ; no solid data
  26++E6A4 00                                   DB $00                              ; no solid data
  27++E6A5
  28++E6A5 00 00 60 1F  KraitVertices:          DB $00, $00, $60, $1F, $01, $23
  28++E6A9 01 23
  29++E6AB 00 12 30 3F                          DB $00, $12, $30, $3F, $03, $45
  29++E6AF 03 45
  30++E6B1 00 12 30 7F                          DB $00, $12, $30, $7F, $12, $45
  30++E6B5 12 45
  31++E6B7 5A 00 03 3F                          DB $5A, $00, $03, $3F, $01, $44
  31++E6BB 01 44
  32++E6BD 5A 00 03 BF                          DB $5A, $00, $03, $BF, $23, $55
  32++E6C1 23 55
  33++E6C3 5A 00 57 1C                          DB $5A, $00, $57, $1C, $01, $11
  33++E6C7 01 11
  34++E6C9 5A 00 57 9C                          DB $5A, $00, $57, $9C, $23, $33
  34++E6CD 23 33
  35++E6CF 00 05 35 09                          DB $00, $05, $35, $09, $00, $33
  35++E6D3 00 33
  36++E6D5 00 07 26 06                          DB $00, $07, $26, $06, $00, $33
  36++E6D9 00 33
  37++E6DB 12 07 13 89                          DB $12, $07, $13, $89, $33, $33
  37++E6DF 33 33
  38++E6E1 12 07 13 09                          DB $12, $07, $13, $09, $00, $00
  38++E6E5 00 00
  39++E6E7 12 0B 27 28                          DB $12, $0B, $27, $28, $44, $44
  39++E6EB 44 44
  40++E6ED 12 0B 27 68                          DB $12, $0B, $27, $68, $44, $44
  40++E6F1 44 44
  41++E6F3 24 00 1E 28                          DB $24, $00, $1E, $28, $44, $44
  41++E6F7 44 44
  42++E6F9 12 0B 27 A8                          DB $12, $0B, $27, $A8, $55, $55
  42++E6FD 55 55
  43++E6FF 12 0B 27 E8                          DB $12, $0B, $27, $E8, $55, $55
  43++E703 55 55
  44++E705 24 00 1E A8                          DB $24, $00, $1E, $A8, $55, $55
  44++E709 55 55
  45++E70B              KraitVertSize           equ $  - KraitVertices
  46++E70B 1F 03 00 04  KraitEdges:             DB $1F, $03, $00, $04, $1F, $12, $00, $08
  46++E70F 1F 12 00 08
  47++E713 1F 01 00 0C                          DB $1F, $01, $00, $0C, $1F, $23, $00, $10
  47++E717 1F 23 00 10
  48++E71B 1F 35 04 10                          DB $1F, $35, $04, $10, $1F, $25, $10, $08
  48++E71F 1F 25 10 08
  49++E723 1F 14 08 0C                          DB $1F, $14, $08, $0C, $1F, $04, $0C, $04
  49++E727 1F 04 0C 04
  50++E72B 1C 01 0C 14                          DB $1C, $01, $0C, $14, $1C, $23, $10, $18
  50++E72F 1C 23 10 18
  51++E733 05 45 04 08                          DB $05, $45, $04, $08, $09, $00, $1C, $28
  51++E737 09 00 1C 28
  52++E73B 06 00 20 28                          DB $06, $00, $20, $28, $09, $33, $1C, $24
  52++E73F 09 33 1C 24
  53++E743 06 33 20 24                          DB $06, $33, $20, $24, $08, $44, $2C, $34
  53++E747 08 44 2C 34
  54++E74B 08 44 34 30                          DB $08, $44, $34, $30, $07, $44, $30, $2C
  54++E74F 07 44 30 2C
  55++E753 07 55 38 3C                          DB $07, $55, $38, $3C, $08, $55, $3C, $40
  55++E757 08 55 3C 40
  56++E75B 08 55 40 38                          DB $08, $55, $40, $38
  57++E75F              KraitEdgesSize          equ $  - KraitEdges
  58++E75F              KraitEdgesCnt           equ KraitEdgesSize/4
  59++E75F 1F 07 30 06  KraitNormals            DB $1F, $07, $30, $06
  60++E763 5F 07 30 06                          DB $5F, $07, $30, $06, $DF, $07, $30, $06
  60++E767 DF 07 30 06
  61++E76B 9F 07 30 06                          DB $9F, $07, $30, $06, $3F, $4D, $00, $9A
  61++E76F 3F 4D 00 9A
  62++E773 BF 4D 00 9A                          DB $BF, $4D, $00, $9A
  63++E777              KraitNormalsSize        equ $  - KraitNormals
  64++E777              KraitLen                equ $  - Krait
  65++E777
# file closed: ./Data/ships/Krait.asm
  89+ E777                                      include "Data/ships/Logo.asm"
# file opened: ./Data/ships/Logo.asm
   1++E777 00           Logo:	                DB $00                    ; Number of cargo canisters released when destroyed
   2++E778 49 26                                DW $2649                  ; Ship's targetable area LoHi
   3++E77A 92 E8                                DW LogoEdges              ; Edge Data
   4++E77C 94                                   DB LogoEdgesSize          ; Size of Edge Data
   5++E77D 00                                   DB $00                    ; Gun Vertex Byte offset
   6++E77E 36                                   DB $36                    ; Explosion Count
   7++E77F 2A                                   DB LogoVertSize /6        ; Vertex Count /6
   8++E780 FC                                   DB LogoVertSize           ; Vertex Count
   9++E781 25                                   DB LogoEdgesCnt           ; Edges Count
  10++E782 00 00                                DW $0000                  ; Bounty LoHi
  11++E784 14                                   DB LogoNormalsSize        ; Face (Normal) Count
  12++E785 63                                   DB $63                    ; Range when it turns to a dot
  13++E786 FC                                   DB $FC                    ; Energy Max
  14++E787 24                                   DB $24                    ; Speed Max
  15++E788 26 E9                                DW LogoNormals            ; Normals
  16++E78A 01                                   DB $01                    ; Q scaling
  17++E78B 00                                   DB $00                    ; Laser power and Nbr Missiles
  18++E78C 96 E7                                DW LogoVertices           ; Verticles Address
  19++E78E FD                                   DB ShipTypeText           ; Ship Type
  20++E78F 00                                   DB 0                      ; NewB Tactics
  21++E790 00                                   DB 0                      ; AI Flags
  22++E791 FF                                   DB $FF                    ; chance of ECM module
  23++E792 FF                                   DB $FF                              ; Supports Solid Fill = false
  24++E793 00 00                                DW $0000                            ; no solid data
  25++E795 00                                   DB $00                              ; no solid data
  26++E796
  27++E796
  28++E796 00 09 37 5F  LogoVertices:	DB $00, $09, $37, $5F, $00, $00
  28++E79A 00 00
  29++E79C 0A 09 1E DF  	DB $0A, $09, $1E, $DF, $00, $00
  29++E7A0 00 00
  30++E7A2 19 09 5D DF  	DB $19, $09, $5D, $DF, $00, $00
  30++E7A6 00 00
  31++E7A8 96 09 B4 DF  	DB $96, $09, $B4, $DF, $00, $00
  31++E7AC 00 00
  32++E7AE 5A 09 0A DF  	DB $5A, $09, $0A, $DF, $00, $00
  32++E7B2 00 00
  33++E7B4 8C 09 0A DF  	DB $8C, $09, $0A, $DF, $00, $00
  33++E7B8 00 00
  34++E7BA 00 09 5F 7F  	DB $00, $09, $5F, $7F, $00, $00
  34++E7BE 00 00
  35++E7C0 8C 09 0A 5F  	DB $8C, $09, $0A, $5F, $00, $00
  35++E7C4 00 00
  36++E7C6 5A 09 0A 5F  	DB $5A, $09, $0A, $5F, $00, $00
  36++E7CA 00 00
  37++E7CC 96 09 B4 5F  	DB $96, $09, $B4, $5F, $00, $00
  37++E7D0 00 00
  38++E7D2 19 09 5D 5F  	DB $19, $09, $5D, $5F, $00, $00
  38++E7D6 00 00
  39++E7D8 0A 09 1E 5F  	DB $0A, $09, $1E, $5F, $00, $00
  39++E7DC 00 00
  40++E7DE 55 09 1E FF  	DB $55, $09, $1E, $FF, $02, $33
  40++E7E2 02 33
  41++E7E4 55 09 1E 7F  	DB $55, $09, $1E, $7F, $02, $44
  41++E7E8 02 44
  42++E7EA 46 0B 05 9F  	DB $46, $0B, $05, $9F, $01, $33
  42++E7EE 01 33
  43++E7F0 46 0B 19 BF  	DB $46, $0B, $19, $BF, $02, $33
  43++E7F4 02 33
  44++E7F6 46 0B 19 3F  	DB $46, $0B, $19, $3F, $02, $44
  44++E7FA 02 44
  45++E7FC 46 0B 05 1F  	DB $46, $0B, $05, $1F, $01, $44
  45++E800 01 44
  46++E802 00 09 05 5F  	DB $00, $09, $05, $5F, $00, $00
  46++E806 00 00
  47++E808 00 09 05 5F  	DB $00, $09, $05, $5F, $00, $00
  47++E80C 00 00
  48++E80E 00 09 05 5F  	DB $00, $09, $05, $5F, $00, $00
  48++E812 00 00
  49++E814 1C 0B 02 BF  	DB $1C, $0B, $02, $BF, $00, $00
  49++E818 00 00
  50++E81A 31 0B 02 BF  	DB $31, $0B, $02, $BF, $00, $00
  50++E81E 00 00
  51++E820 31 0B 0A BF  	DB $31, $0B, $0A, $BF, $00, $00
  51++E824 00 00
  52++E826 31 0B 11 BF  	DB $31, $0B, $11, $BF, $00, $00
  52++E82A 00 00
  53++E82C 1C 0B 11 BF  	DB $1C, $0B, $11, $BF, $00, $00
  53++E830 00 00
  54++E832 1C 0B 0A BF  	DB $1C, $0B, $0A, $BF, $00, $00
  54++E836 00 00
  55++E838 18 0B 02 BF  	DB $18, $0B, $02, $BF, $00, $00
  55++E83C 00 00
  56++E83E 18 0B 11 BF  	DB $18, $0B, $11, $BF, $00, $00
  56++E842 00 00
  57++E844 03 0B 11 BF  	DB $03, $0B, $11, $BF, $00, $00
  57++E848 00 00
  58++E84A 00 0B 02 3F  	DB $00, $0B, $02, $3F, $00, $00
  58++E84E 00 00
  59++E850 00 0B 11 3F  	DB $00, $0B, $11, $3F, $00, $00
  59++E854 00 00
  60++E856 04 0B 02 3F  	DB $04, $0B, $02, $3F, $00, $00
  60++E85A 00 00
  61++E85C 19 0B 02 3F  	DB $19, $0B, $02, $3F, $00, $00
  61++E860 00 00
  62++E862 0E 0B 02 3F  	DB $0E, $0B, $02, $3F, $00, $00
  62++E866 00 00
  63++E868 0E 0B 11 3F  	DB $0E, $0B, $11, $3F, $00, $00
  63++E86C 00 00
  64++E86E 31 0B 02 3F  	DB $31, $0B, $02, $3F, $00, $00
  64++E872 00 00
  65++E874 1C 0B 02 3F  	DB $1C, $0B, $02, $3F, $00, $00
  65++E878 00 00
  66++E87A 1C 0B 0A 3F  	DB $1C, $0B, $0A, $3F, $00, $00
  66++E87E 00 00
  67++E880 1C 0B 11 3F  	DB $1C, $0B, $11, $3F, $00, $00
  67++E884 00 00
  68++E886 31 0B 11 3F  	DB $31, $0B, $11, $3F, $00, $00
  68++E88A 00 00
  69++E88C 31 0B 0A 3F  	DB $31, $0B, $0A, $3F, $00, $00
  69++E890 00 00
  70++E892
  71++E892              LogoVertSize: equ $ - LogoVertices
  72++E892
  73++E892
  74++E892
  75++E892 1F 00 00 04  LogoEdges:	DB $1F, $00, $00, $04
  76++E896 1F 00 04 08  	DB $1F, $00, $04, $08
  77++E89A 1F 00 08 0C  	DB $1F, $00, $08, $0C
  78++E89E 1F 00 0C 10  	DB $1F, $00, $0C, $10
  79++E8A2 1F 00 10 14  	DB $1F, $00, $10, $14
  80++E8A6 1F 00 14 18  	DB $1F, $00, $14, $18
  81++E8AA 1F 00 18 1C  	DB $1F, $00, $18, $1C
  82++E8AE 1F 00 1C 20  	DB $1F, $00, $1C, $20
  83++E8B2 1F 00 20 24  	DB $1F, $00, $20, $24
  84++E8B6 1F 00 24 28  	DB $1F, $00, $24, $28
  85++E8BA 1F 00 28 2C  	DB $1F, $00, $28, $2C
  86++E8BE 1F 00 2C 00  	DB $1F, $00, $2C, $00
  87++E8C2 1E 03 38 3C  	DB $1E, $03, $38, $3C
  88++E8C6 1E 01 3C 40  	DB $1E, $01, $3C, $40
  89++E8CA 1E 04 40 44  	DB $1E, $04, $40, $44
  90++E8CE 1E 01 44 38  	DB $1E, $01, $44, $38
  91++E8D2 1E 03 10 30  	DB $1E, $03, $10, $30
  92++E8D6 1E 22 30 34  	DB $1E, $22, $30, $34
  93++E8DA 1E 04 34 20  	DB $1E, $04, $34, $20
  94++E8DE 1E 11 20 10  	DB $1E, $11, $20, $10
  95++E8E2 1E 13 10 38  	DB $1E, $13, $10, $38
  96++E8E6 1E 13 30 3C  	DB $1E, $13, $30, $3C
  97++E8EA 1E 24 34 40  	DB $1E, $24, $34, $40
  98++E8EE 1E 14 20 44  	DB $1E, $14, $20, $44
  99++E8F2 1E 00 54 58  	DB $1E, $00, $54, $58
 100++E8F6 1E 00 58 60  	DB $1E, $00, $58, $60
 101++E8FA 1E 00 60 64  	DB $1E, $00, $60, $64
 102++E8FE 1E 00 5C 68  	DB $1E, $00, $5C, $68
 103++E902 1E 00 6C 70  	DB $1E, $00, $6C, $70
 104++E906 1E 00 70 74  	DB $1E, $00, $70, $74
 105++E90A 1E 00 78 7C  	DB $1E, $00, $78, $7C
 106++E90E 1E 00 80 84  	DB $1E, $00, $80, $84
 107++E912 1E 00 88 8C  	DB $1E, $00, $88, $8C
 108++E916 1E 00 90 94  	DB $1E, $00, $90, $94
 109++E91A 1E 00 94 9C  	DB $1E, $00, $94, $9C
 110++E91E 1E 00 9C A0  	DB $1E, $00, $9C, $A0
 111++E922 1E 00 A4 98  	DB $1E, $00, $A4, $98
 112++E926
 113++E926              LogoEdgesSize: equ $ - LogoEdges
 114++E926
 115++E926
 116++E926              LogoEdgesCnt: equ LogoEdgesSize/4
 117++E926
 118++E926
 119++E926 1F 00 17 00  LogoNormals:	DB $1F, $00, $17, $00
 120++E92A 1F 00 04 0F  	DB $1F, $00, $04, $0F
 121++E92E 3F 00 0D 34  	DB $3F, $00, $0D, $34
 122++E932 9F 51 51 00  	DB $9F, $51, $51, $00
 123++E936 1F 51 51 00  	DB $1F, $51, $51, $00
 124++E93A
 125++E93A
 126++E93A              LogoNormalsSize: equ $ - LogoNormals
 127++E93A              LogoLen: equ $ - Logo
 128++E93A
# file closed: ./Data/ships/Logo.asm
  90+ E93A                                      include "Data/ships/Mamba.asm"
# file opened: ./Data/ships/Mamba.asm
   1++E93A 01           Mamba:	                DB $01                     ; Number of cargo canisters released when destroyed
   2++E93B 24 13                                DW $1324                   ; Ship's targetable area LoHi
   3++E93D EF E9                                DW MambaEdges              ; Edge Data
   4++E93F 70                                   DB MambaEdgesSize          ; Size of Edge Data
   5++E940 00                                   DB $00                     ; Gun Vertex Byte offset
   6++E941 22                                   DB $22                     ; Explosion Count
   7++E942 19                                   DB MambaVertSize /6        ; Vertex Count /6
   8++E943 96                                   DB MambaVertSize           ; Vertex Count
   9++E944 1C                                   DB MambaEdgesCnt           ; Edges Count
  10++E945 96 00                                DW $0096                   ; Bounty LoHi
  11++E947 14                                   DB MambaNormalsSize        ; Face (Normal) Count
  12++E948 19                                   DB $19                     ; Range when it turns to a dot
  13++E949 5A                                   DB $5A                     ; Energy Max
  14++E94A 1E                                   DB $1E                     ; Speed Max
  15++E94B 5F EA                                DW MambaNormals            ; Normals
  16++E94D 02                                   DB $02                     ; Q scaling
  17++E94E 12                                   DB $12 | ShipMissiles2     ; Laser power and Nbr Missiles
  18++E94F 59 E9                                DW MambaVertices           ; Verticles Address
  19++E951 00                                   DB ShipTypeNormal          ; Ship Type
  20++E952 00                                   DB 0                       ; NewB Tactics
  21++E953 80                                   DB ShipCanAnger            ; AI Flags
  22++E954 E0                                   DB $E0                     ; chance of ECM module
  23++E955 FF                                   DB $FF                              ; Supports Solid Fill = false
  24++E956 00 00                                DW $0000                            ; no solid data
  25++E958 00                                   DB $00                              ; no solid data
  26++E959
  27++E959
  28++E959 00 00 40 1F  MambaVertices:	DB $00, $00, $40, $1F, $10, $32
  28++E95D 10 32
  29++E95F 40 08 20 FF                  DB $40, $08, $20, $FF, $20, $44
  29++E963 20 44
  30++E965 20 08 20 BE                  DB $20, $08, $20, $BE, $21, $44
  30++E969 21 44
  31++E96B 20 08 20 3E                  DB $20, $08, $20, $3E, $31, $44
  31++E96F 31 44
  32++E971 40 08 20 7F                  DB $40, $08, $20, $7F, $30, $44
  32++E975 30 44
  33++E977 04 04 10 8E                  DB $04, $04, $10, $8E, $11, $11
  33++E97B 11 11
  34++E97D 04 04 10 0E                  DB $04, $04, $10, $0E, $11, $11
  34++E981 11 11
  35++E983 08 03 1C 0D                  DB $08, $03, $1C, $0D, $11, $11
  35++E987 11 11
  36++E989 08 03 1C 8D                  DB $08, $03, $1C, $8D, $11, $11
  36++E98D 11 11
  37++E98F 14 04 10 D4                  DB $14, $04, $10, $D4, $00, $00
  37++E993 00 00
  38++E995 14 04 10 54                  DB $14, $04, $10, $54, $00, $00
  38++E999 00 00
  39++E99B 18 07 14 F4                  DB $18, $07, $14, $F4, $00, $00
  39++E99F 00 00
  40++E9A1 10 07 14 F0                  DB $10, $07, $14, $F0, $00, $00
  40++E9A5 00 00
  41++E9A7 10 07 14 70                  DB $10, $07, $14, $70, $00, $00
  41++E9AB 00 00
  42++E9AD 18 07 14 74                  DB $18, $07, $14, $74, $00, $00
  42++E9B1 00 00
  43++E9B3 08 04 20 AD                  DB $08, $04, $20, $AD, $44, $44
  43++E9B7 44 44
  44++E9B9 08 04 20 2D                  DB $08, $04, $20, $2D, $44, $44
  44++E9BD 44 44
  45++E9BF 08 04 20 6E                  DB $08, $04, $20, $6E, $44, $44
  45++E9C3 44 44
  46++E9C5 08 04 20 EE                  DB $08, $04, $20, $EE, $44, $44
  46++E9C9 44 44
  47++E9CB 20 04 20 A7                  DB $20, $04, $20, $A7, $44, $44
  47++E9CF 44 44
  48++E9D1 20 04 20 27                  DB $20, $04, $20, $27, $44, $44
  48++E9D5 44 44
  49++E9D7 24 04 20 67                  DB $24, $04, $20, $67, $44, $44
  49++E9DB 44 44
  50++E9DD 24 04 20 E7                  DB $24, $04, $20, $E7, $44, $44
  50++E9E1 44 44
  51++E9E3 26 00 20 A5                  DB $26, $00, $20, $A5, $44, $44
  51++E9E7 44 44
  52++E9E9 26 00 20 25                  DB $26, $00, $20, $25, $44, $44
  52++E9ED 44 44
  53++E9EF
  54++E9EF              MambaVertSize: equ $ - MambaVertices
  55++E9EF
  56++E9EF
  57++E9EF
  58++E9EF 1F 20 00 04  MambaEdges:	DB $1F, $20, $00, $04
  59++E9F3 1F 30 00 10  	DB $1F, $30, $00, $10
  60++E9F7 1F 40 04 10  	DB $1F, $40, $04, $10
  61++E9FB 1E 42 04 08  	DB $1E, $42, $04, $08
  62++E9FF 1E 41 08 0C  	DB $1E, $41, $08, $0C
  63++EA03 1E 43 0C 10  	DB $1E, $43, $0C, $10
  64++EA07 0E 11 14 18  	DB $0E, $11, $14, $18
  65++EA0B 0C 11 18 1C  	DB $0C, $11, $18, $1C
  66++EA0F 0D 11 1C 20  	DB $0D, $11, $1C, $20
  67++EA13 0C 11 14 20  	DB $0C, $11, $14, $20
  68++EA17 14 00 24 2C  	DB $14, $00, $24, $2C
  69++EA1B 10 00 24 30  	DB $10, $00, $24, $30
  70++EA1F 10 00 28 34  	DB $10, $00, $28, $34
  71++EA23 14 00 28 38  	DB $14, $00, $28, $38
  72++EA27 0E 00 34 38  	DB $0E, $00, $34, $38
  73++EA2B 0E 00 2C 30  	DB $0E, $00, $2C, $30
  74++EA2F 0D 44 3C 40  	DB $0D, $44, $3C, $40
  75++EA33 0E 44 44 48  	DB $0E, $44, $44, $48
  76++EA37 0C 44 3C 48  	DB $0C, $44, $3C, $48
  77++EA3B 0C 44 40 44  	DB $0C, $44, $40, $44
  78++EA3F 07 44 50 54  	DB $07, $44, $50, $54
  79++EA43 05 44 50 60  	DB $05, $44, $50, $60
  80++EA47 05 44 54 60  	DB $05, $44, $54, $60
  81++EA4B 07 44 4C 58  	DB $07, $44, $4C, $58
  82++EA4F 05 44 4C 5C  	DB $05, $44, $4C, $5C
  83++EA53 05 44 58 5C  	DB $05, $44, $58, $5C
  84++EA57 1E 21 00 08  	DB $1E, $21, $00, $08
  85++EA5B 1E 31 00 0C  	DB $1E, $31, $00, $0C
  86++EA5F
  87++EA5F              MambaEdgesSize: equ $ - MambaEdges
  88++EA5F
  89++EA5F
  90++EA5F              MambaEdgesCnt: equ MambaEdgesSize/4
  91++EA5F
  92++EA5F
  93++EA5F 5E 00 18 02  MambaNormals:	DB $5E, $00, $18, $02
  94++EA63 1E 00 18 02  	DB $1E, $00, $18, $02
  95++EA67 9E 20 40 10  	DB $9E, $20, $40, $10
  96++EA6B 1E 20 40 10  	DB $1E, $20, $40, $10
  97++EA6F 3E 00 00 7F  	DB $3E, $00, $00, $7F
  98++EA73
  99++EA73              MambaNormalsSize: equ $ - MambaNormals
 100++EA73              MambaLen: equ $ - Mamba
 101++EA73
# file closed: ./Data/ships/Mamba.asm
  91+ EA73                                      include "Data/ships/Missile.asm"
# file opened: ./Data/ships/Missile.asm
   1++EA73              ;    DEFINE DEBUGMODEL 1
   2++EA73 00           Missile:	            DB $00                     ; Number of cargo canisters released when destroyed
   3++EA74 40 06                                DW $0640                   ; Ship's targetable area LoHi
   4++EA76 F8 EA                                DW MissileEdges            ; Edge Data
   5++EA78 60                                   DB MissileEdgesSize        ; Size of Edge Data
   6++EA79 00                                   DB $00                     ; Gun Vertex Byte offset
   7++EA7A 0A                                   DB $0A                     ; Explosion Count
   8++EA7B 11                                   DB MissileVertSize /6      ; Vertex Count /6
   9++EA7C 66                                   DB MissileVertSize         ; Vertex Count
  10++EA7D 18                                   DB MissileEdgesCnt         ; Edges Count
  11++EA7E 00 00                                DW $0000                   ; Bounty LoHi
  12++EA80 24                                   DB MissileNormalsSize      ; Face (Normal) Count
  13++EA81 0E                                   DB $0E                     ; Range when it turns to a dot
  14++EA82 02                                   DB $02                     ; Energy Max
  15++EA83 2C                                   DB $2C                     ; Speed Max
  16++EA84 58 EB                                DW MissileNormals          ; Normals
  17++EA86 02                                   DB $02                     ; Q scaling
  18++EA87 00                                   DB $00                     ; Laser power and Nbr Missiles
  19++EA88 92 EA                                DW MissileVertices         ; Verticles Address
  20++EA8A 01                                   DB ShipTypeMissile         ; Ship Type
  21++EA8B 00                                   DB 0                       ; NewB Tactics
  22++EA8C 00                                   DB 0                       ; AI Flags
  23++EA8D 00                                   DB $00                     ; chance of ECM module
  24++EA8E FF                                   DB $FF                              ; Supports Solid Fill = false
  25++EA8F 00 00                                DW $0000                            ; no solid data
  26++EA91 00                                   DB $00                              ; no solid data
  27++EA92
  28++EA92              ;; Modifications for solid:
  29++EA92              ;; Need a list of triangles, triangle are linked to faces
  30++EA92              ;; so on the verticies we can have an additional link on faces to triangle nbr, we also have to draw in z furthest sequenvce
  31++EA92
  32++EA92              ;;;     Byte 0 = X magnitide with origin at middle of ship
  33++EA92              ;;;		Byte 1 = Y magnitide with origin at middle of ship
  34++EA92              ;;;		Byte 2 = Z magnitide with origin at middle of ship
  35++EA92              ;;;		Byte 3 = Sign Bits of Vertex 7=X 6=Y 5 = Z 4 - 0 = visibility beyond which vertix is not shown
  36++EA92              ;;;		Byte 4 = High 4 bits Face 2 Index Low 4 bits = Face 1 Index
  37++EA92              ;;;		Byte 5 = High 4 bits Face 4 Index Low 4 bits = Face 3 Index
  38++EA92              MissileVertices:    IFDEF DEBUGMODEL
  39++EA92 ~                                    DB $00,$50,$00,$1F,$00,$00  ; 00 00 Y Tip (Roof)
  40++EA92 ~                                    DB $00,$00,$00,$1F,$00,$00  ; 01 04 Y base for all nodes
  41++EA92 ~                                    DB $50,$00,$00,$1F,$01,$01  ; 02 08 X Tip (Side)
  42++EA92 ~                                    DB $00,$00,$00,$1F,$01,$01  ; 03 0C X Base
  43++EA92 ~                                    DB $00,$00,$30,$1F,$02,$02  ; 04 10 Z Tip (Nose1)
  44++EA92 ~                                    DB $00,$00,$00,$1F,$02,$03  ; 05 14 Z base
  45++EA92 ~                                    DB $04,$00,$25,$9F,$03,$03  ; 06 18 Z Trangle point 1
  46++EA92 ~                                    DB $04,$00,$25,$1F,$03,$03  ; 07 1C Z Trangle point 2
  47++EA92 ~                                    DB $05,$10,$00,$9F,$00,$00  ; 08 20 Y Cross Member 1
  48++EA92 ~                                    DB $05,$10,$00,$1F,$00,$00  ; 09 24 Y Cross Member 2
  49++EA92 ~                                    DB $10,$05,$00,$1F,$00,$00  ; 10 28 X Cross Member 1
  50++EA92 ~                                    DB $20,$00,$00,$1F,$00,$00  ; 11 2C X Cross Member 2
  51++EA92 ~                                    DB $10,$05,$00,$5F,$00,$00  ; 12 30 X Cross Member 3
  52++EA92                                  ELSE
  53++EA92 00 00 44 1F                          DB $00, $00, $44, $1F, $10, $32
  53++EA96 10 32
  54++EA98 08 08 24 5F                          DB $08, $08, $24, $5F, $21, $54
  54++EA9C 21 54
  55++EA9E 08 08 24 1F                          DB $08, $08, $24, $1F, $32, $74
  55++EAA2 32 74
  56++EAA4 08 08 24 9F                          DB $08, $08, $24, $9F, $30, $76
  56++EAA8 30 76
  57++EAAA 08 08 24 DF                          DB $08, $08, $24, $DF, $10, $65
  57++EAAE 10 65
  58++EAB0 08 08 2C 3F                          DB $08, $08, $2C, $3F, $74, $88
  58++EAB4 74 88
  59++EAB6 08 08 2C 7F                          DB $08, $08, $2C, $7F, $54, $88
  59++EABA 54 88
  60++EABC 08 08 2C FF                          DB $08, $08, $2C, $FF, $65, $88
  60++EAC0 65 88
  61++EAC2 08 08 2C BF                          DB $08, $08, $2C, $BF, $76, $88
  61++EAC6 76 88
  62++EAC8 0C 0C 2C 28                          DB $0C, $0C, $2C, $28, $74, $88
  62++EACC 74 88
  63++EACE 0C 0C 2C 68                          DB $0C, $0C, $2C, $68, $54, $88
  63++EAD2 54 88
  64++EAD4 0C 0C 2C E8                          DB $0C, $0C, $2C, $E8, $65, $88
  64++EAD8 65 88
  65++EADA 0C 0C 2C A8                          DB $0C, $0C, $2C, $A8, $76, $88
  65++EADE 76 88
  66++EAE0 08 08 0C A8                          DB $08, $08, $0C, $A8, $76, $77
  66++EAE4 76 77
  67++EAE6 08 08 0C E8                          DB $08, $08, $0C, $E8, $65, $66
  67++EAEA 65 66
  68++EAEC 08 08 0C 28                          DB $08, $08, $0C, $28, $74, $77
  68++EAF0 74 77
  69++EAF2 08 08 0C 68                          DB $08, $08, $0C, $68, $54, $55
  69++EAF6 54 55
  70++EAF8                                  ENDIF
  71++EAF8              MissileVertSize: equ $ - MissileVertices
  72++EAF8
  73++EAF8              ;;;     Byte 0 = Edge visbility Distance if > XX4 distance then won't show
  74++EAF8              ;;;		Byte 1 = High 4 bits Face 2 Index Low 4 bits = Face 1 Index
  75++EAF8              ;;;		Byte 2 = Byte offset to Point 1 (divide by 4 for index)
  76++EAF8              ;;;		Byte 3 = Byte offset to Point 2 (divide by 4 for index)
  77++EAF8
  78++EAF8              MissileEdges:	    IFDEF DEBUGMODEL
  79++EAF8 ~                                    DB $1F,$00,$00,$04 ; Y
  80++EAF8 ~                                    DB $1F,$00,$08,$0C ; X
  81++EAF8 ~                                    DB $1F,$00,$10,$14 ; Z
  82++EAF8 ~                                    DB $1F,$00,$10,$18 ; Z Tip Traingle 1
  83++EAF8 ~                                    DB $1F,$00,$10,$1C ; Z Tip Traingle 2
  84++EAF8 ~                                    DB $1F,$00,$1C,$18 ; Z Tip Traingle 2
  85++EAF8 ~                                    DB $1F,$00,$20,$24 ; Y Cross memeber
  86++EAF8 ~                                    DB $1F,$00,$28,$2C ; X Triangle
  87++EAF8 ~                                    DB $1F,$00,$2C,$30 ; X Triangle
  88++EAF8 ~                                    ;DB $1F,$00,$18,$1C
  89++EAF8                                  ELSE
  90++EAF8 1F 21 00 04                          DB $1F, $21, $00, $04
  91++EAFC 1F 32 00 08                          DB $1F, $32, $00, $08
  92++EB00 1F 30 00 0C                          DB $1F, $30, $00, $0C
  93++EB04 1F 10 00 10                          DB $1F, $10, $00, $10
  94++EB08 1F 24 04 08                          DB $1F, $24, $04, $08
  95++EB0C 1F 51 04 10                          DB $1F, $51, $04, $10
  96++EB10 1F 60 0C 10                          DB $1F, $60, $0C, $10
  97++EB14 1F 73 08 0C                          DB $1F, $73, $08, $0C
  98++EB18 1F 74 08 14                          DB $1F, $74, $08, $14
  99++EB1C 1F 54 04 18                          DB $1F, $54, $04, $18
 100++EB20 1F 65 10 1C                          DB $1F, $65, $10, $1C
 101++EB24 1F 76 0C 20                          DB $1F, $76, $0C, $20
 102++EB28 1F 86 1C 20                          DB $1F, $86, $1C, $20
 103++EB2C 1F 87 14 20                          DB $1F, $87, $14, $20
 104++EB30 1F 84 14 18                          DB $1F, $84, $14, $18
 105++EB34 1F 85 18 1C                          DB $1F, $85, $18, $1C
 106++EB38 08 85 18 28                          DB $08, $85, $18, $28
 107++EB3C 08 87 14 24                          DB $08, $87, $14, $24
 108++EB40 08 87 20 30                          DB $08, $87, $20, $30
 109++EB44 08 85 1C 2C                          DB $08, $85, $1C, $2C
 110++EB48 08 74 24 3C                          DB $08, $74, $24, $3C
 111++EB4C 08 54 28 40                          DB $08, $54, $28, $40
 112++EB50 08 76 30 34                          DB $08, $76, $30, $34
 113++EB54 08 65 2C 38                          DB $08, $65, $2C, $38
 114++EB58                                  ENDIF
 115++EB58              MissileEdgesSize: equ $ - MissileEdges
 116++EB58
 117++EB58
 118++EB58              MissileEdgesCnt: equ MissileEdgesSize/4
 119++EB58
 120++EB58              ;;;		Byte 0 = Sign Bits of Vertex 7=X 6=Y 5 = Z, bits 4 to 0 are distance for always visible
 121++EB58              ;;;		Byte 1 = X Lo
 122++EB58              ;;;		Byte 2 = Y Lo
 123++EB58              ;;;		Byte 3 = Z Lo
 124++EB58              MissileNormals:	    IFDEF DEBUGMODEL
 125++EB58 ~                                    DB $1F,$00,$10,$00
 126++EB58 ~                                    DB $1F,$10,$00,$00
 127++EB58 ~                                    DB $1F,$00,$00,$10
 128++EB58 ~                                    DB $1F,$00,$00,$10
 129++EB58                                  ELSE
 130++EB58 9F 40 00 10                          DB $9F, $40, $00, $10
 131++EB5C 5F 00 40 10                          DB $5F, $00, $40, $10
 132++EB60 1F 40 00 10                          DB $1F, $40, $00, $10
 133++EB64 1F 00 40 10                          DB $1F, $00, $40, $10
 134++EB68 1F 20 00 00                          DB $1F, $20, $00, $00
 135++EB6C 5F 00 20 00                          DB $5F, $00, $20, $00
 136++EB70 9F 20 00 00                          DB $9F, $20, $00, $00
 137++EB74 1F 00 20 00                          DB $1F, $00, $20, $00
 138++EB78 3F 00 00 B0                          DB $3F, $00, $00, $B0
 139++EB7C                                  ENDIF
 140++EB7C
 141++EB7C              MissileNormalsSize: equ $ - MissileNormals
 142++EB7C              MissileLen: equ $ - Missile
 143++EB7C
# file closed: ./Data/ships/Missile.asm
  92+ EB7C                                      include "Data/ships/Monitor.asm"
# file opened: ./Data/ships/Monitor.asm
   1++EB7C 04           Monitor:	            DB $04                     ; Number of cargo canisters released when destroyed
   2++EB7D 00 36                                DW $3600                   ; Ship's targetable area LoHi
   3++EB7F 01 EC                                DW MonitorEdges            ; Edge Data
   4++EB81 5C                                   DB MonitorEdgesSize        ; Size of Edge Data
   5++EB82 00                                   DB $00                     ; Gun Vertex Byte offset
   6++EB83 2A                                   DB $2A                     ; Explosion Count
   7++EB84 11                                   DB MonitorVertSize /6      ; Vertex Count /6
   8++EB85 66                                   DB MonitorVertSize         ; Vertex Count
   9++EB86 17                                   DB MonitorEdgesCnt         ; Edges Count
  10++EB87 90 01                                DW $0190                   ; Bounty LoHi
  11++EB89 2C                                   DB MonitorNormalsSize      ; Face (Normal) Count
  12++EB8A 28                                   DB $28                     ; Range when it turns to a dot
  13++EB8B 84                                   DB $84                     ; Energy Max
  14++EB8C 10                                   DB $10                     ; Speed Max
  15++EB8D 5D EC                                DW MonitorNormals          ; Normals
  16++EB8F 00                                   DB $00                     ; Q scaling
  17++EB90 37                                   DB $37                     ; Laser power and Nbr Missiles
  18++EB91 9B EB                                DW MonitorVertices         ; Verticles Address
  19++EB93 00                                   DB ShipTypeNormal          ; Ship Type
  20++EB94 00                                   DB 0                       ; NewB Tactics
  21++EB95 80                                   DB ShipCanAnger            ; AI Flags
  22++EB96 40                                   DB $40                     ; chance of ECM module
  23++EB97 FF                                   DB $FF                              ; Supports Solid Fill = false
  24++EB98 00 00                                DW $0000                            ; no solid data
  25++EB9A 00                                   DB $00                              ; no solid data
  26++EB9B
  27++EB9B
  28++EB9B 00 0A 8C 1F  MonitorVertices:	    DB $00, $0A, $8C, $1F, $FF, $FF
  28++EB9F FF FF
  29++EBA1 14 28 14 3F                          DB $14, $28, $14, $3F, $23, $01
  29++EBA5 23 01
  30++EBA7 14 28 14 BF                          DB $14, $28, $14, $BF, $50, $34
  30++EBAB 50 34
  31++EBAD 32 00 0A 1F                          DB $32, $00, $0A, $1F, $78, $12
  31++EBB1 78 12
  32++EBB3 32 00 0A 9F                          DB $32, $00, $0A, $9F, $96, $45
  32++EBB7 96 45
  33++EBB9 1E 04 3C 3F                          DB $1E, $04, $3C, $3F, $AA, $28
  33++EBBD AA 28
  34++EBBF 1E 04 3C BF                          DB $1E, $04, $3C, $BF, $AA, $49
  34++EBC3 AA 49
  35++EBC5 12 14 3C 3F                          DB $12, $14, $3C, $3F, $AA, $23
  35++EBC9 AA 23
  36++EBCB 12 14 3C BF                          DB $12, $14, $3C, $BF, $AA, $34
  36++EBCF AA 34
  37++EBD1 00 14 3C 7F                          DB $00, $14, $3C, $7F, $AA, $89
  37++EBD5 AA 89
  38++EBD7 00 28 0A 5F                          DB $00, $28, $0A, $5F, $89, $67
  38++EBDB 89 67
  39++EBDD 00 22 0A 0A                          DB $00, $22, $0A, $0A, $00, $00
  39++EBE1 00 00
  40++EBE3 00 1A 32 0A                          DB $00, $1A, $32, $0A, $00, $00
  40++EBE7 00 00
  41++EBE9 14 0A 3C 4A                          DB $14, $0A, $3C, $4A, $77, $77
  41++EBED 77 77
  42++EBEF 0A 00 64 0A                          DB $0A, $00, $64, $0A, $77, $77
  42++EBF3 77 77
  43++EBF5 14 0A 3C CA                          DB $14, $0A, $3C, $CA, $66, $66
  43++EBF9 66 66
  44++EBFB 0A 00 64 8A                          DB $0A, $00, $64, $8A, $66, $66
  44++EBFF 66 66
  45++EC01              MonitorVertSize:        equ $ - MonitorVertices
  46++EC01 1F 01 00 04  MonitorEdges:	        DB $1F, $01, $00, $04
  47++EC05 1F 12 04 0C  	                    DB $1F, $12, $04, $0C
  48++EC09 1F 23 04 1C                          DB $1F, $23, $04, $1C
  49++EC0D 1F 34 08 20                          DB $1F, $34, $08, $20
  50++EC11 1F 45 08 10                          DB $1F, $45, $08, $10
  51++EC15 1F 50 00 08                          DB $1F, $50, $00, $08
  52++EC19 1F 03 04 08                          DB $1F, $03, $04, $08
  53++EC1D 1F 67 00 28                          DB $1F, $67, $00, $28
  54++EC21 1F 78 0C 28                          DB $1F, $78, $0C, $28
  55++EC25 1F 89 24 28                          DB $1F, $89, $24, $28
  56++EC29 1F 96 10 28                          DB $1F, $96, $10, $28
  57++EC2D 1F 17 00 0C                          DB $1F, $17, $00, $0C
  58++EC31 1F 28 0C 14                          DB $1F, $28, $0C, $14
  59++EC35 1F 49 18 10                          DB $1F, $49, $18, $10
  60++EC39 1F 56 10 00                          DB $1F, $56, $10, $00
  61++EC3D 1F 2A 1C 14                          DB $1F, $2A, $1C, $14
  62++EC41 1F 3A 20 1C                          DB $1F, $3A, $20, $1C
  63++EC45 1F 4A 20 18                          DB $1F, $4A, $20, $18
  64++EC49 1F 8A 14 24                          DB $1F, $8A, $14, $24
  65++EC4D 1F 9A 18 24                          DB $1F, $9A, $18, $24
  66++EC51 0A 00 2C 30                          DB $0A, $00, $2C, $30
  67++EC55 0A 77 34 38                          DB $0A, $77, $34, $38
  68++EC59 0A 66 3C 40                          DB $0A, $66, $3C, $40
  69++EC5D              MonitorEdgesSize:       equ $ - MonitorEdges
  70++EC5D              MonitorEdgesCnt:        equ MonitorEdgesSize/4
  71++EC5D 1F 00 3E 0B  MonitorNormals:	        DB $1F, $00, $3E, $0B
  72++EC61 1F 2C 2B 0D                          DB $1F, $2C, $2B, $0D
  73++EC65 3F 36 1C 10                          DB $3F, $36, $1C, $10
  74++EC69 3F 00 39 1C                          DB $3F, $00, $39, $1C
  75++EC6D BF 36 1C 10                          DB $BF, $36, $1C, $10
  76++EC71 9F 2C 2B 0D                          DB $9F, $2C, $2B, $0D
  77++EC75 DF 26 2F 12                          DB $DF, $26, $2F, $12
  78++EC79 5F 26 2F 12                          DB $5F, $26, $2F, $12
  79++EC7D 7F 27 30 0D                          DB $7F, $27, $30, $0D
  80++EC81 FF 27 30 0D                          DB $FF, $27, $30, $0D
  81++EC85 3F 00 00 40                          DB $3F, $00, $00, $40
  82++EC89              MonitorNormalsSize:     equ $ - MonitorNormals
  83++EC89              MonitorLen:             equ $ - Monitor
  84++EC89
# file closed: ./Data/ships/Monitor.asm
  93+ EC89                                      include "Data/ships/Moray.asm"
# file opened: ./Data/ships/Moray.asm
   1++EC89 01           Moray:	                DB $01                    ; Number of cargo canisters released when destroyed
   2++EC8A 84 03                                DW $0384                  ; Ship's targetable area LoHi
   3++EC8C FC EC                                DW MorayEdges             ; Edge Data
   4++EC8E 4C                                   DB MorayEdgesSize         ; Size of Edge Data
   5++EC8F 00                                   DB $00                    ; Gun Vertex Byte offset
   6++EC90 1A                                   DB $1A                    ; Explosion Count
   7++EC91 0E                                   DB MorayVertSize /6       ; Vertex Count /6
   8++EC92 54                                   DB MorayVertSize          ; Vertex Count
   9++EC93 13                                   DB MorayEdgesCnt          ; Edges Count
  10++EC94 32 00                                DW $0032                  ; Bounty LoHi
  11++EC96 24                                   DB MorayNormalsSize       ; Face (Normal) Count
  12++EC97 28                                   DB $28                    ; Range when it turns to a dot
  13++EC98 59                                   DB $59                    ; Energy Max
  14++EC99 19                                   DB $19                    ; Speed Max
  15++EC9A 48 ED                                DW MorayNormals           ; Normals
  16++EC9C 02                                   DB $02                    ; Q scaling
  17++EC9D 2A                                   DB $2A                    ; Laser power and Nbr Missiles
  18++EC9E A8 EC                                DW MorayVertices          ; Verticles Address
  19++ECA0 00                                   DB ShipTypeNormal         ; Ship Type
  20++ECA1 00                                   DB 0                      ; NewB Tactics
  21++ECA2 80                                   DB ShipCanAnger           ; AI Flags
  22++ECA3 C0                                   DB $C0                    ; chance of ECM module
  23++ECA4 FF                                   DB $FF                              ; Supports Solid Fill = false
  24++ECA5 00 00                                DW $0000                            ; no solid data
  25++ECA7 00                                   DB $00                              ; no solid data
  26++ECA8
  27++ECA8
  28++ECA8 0F 00 41 1F  MorayVertices:	        DB $0F, $00, $41, $1F, $02, $78
  28++ECAC 02 78
  29++ECAE 0F 00 41 9F                          DB $0F, $00, $41, $9F, $01, $67
  29++ECB2 01 67
  30++ECB4 00 12 28 31                          DB $00, $12, $28, $31, $FF, $FF
  30++ECB8 FF FF
  31++ECBA 3C 00 00 9F                          DB $3C, $00, $00, $9F, $13, $66
  31++ECBE 13 66
  32++ECC0 3C 00 00 1F                          DB $3C, $00, $00, $1F, $25, $88
  32++ECC4 25 88
  33++ECC6 1E 1B 0A 78                          DB $1E, $1B, $0A, $78, $45, $78
  33++ECCA 45 78
  34++ECCC 1E 1B 0A F8                          DB $1E, $1B, $0A, $F8, $34, $67
  34++ECD0 34 67
  35++ECD2 09 04 19 E7                          DB $09, $04, $19, $E7, $44, $44
  35++ECD6 44 44
  36++ECD8 09 04 19 67                          DB $09, $04, $19, $67, $44, $44
  36++ECDC 44 44
  37++ECDE 00 12 10 67                          DB $00, $12, $10, $67, $44, $44
  37++ECE2 44 44
  38++ECE4 0D 03 31 05                          DB $0D, $03, $31, $05, $00, $00
  38++ECE8 00 00
  39++ECEA 06 00 41 05                          DB $06, $00, $41, $05, $00, $00
  39++ECEE 00 00
  40++ECF0 0D 03 31 85                          DB $0D, $03, $31, $85, $00, $00
  40++ECF4 00 00
  41++ECF6 06 00 41 85                          DB $06, $00, $41, $85, $00, $00
  41++ECFA 00 00
  42++ECFC              MorayVertSize:          equ $ - MorayVertices
  43++ECFC 1F 07 00 04  MorayEdges:	            DB $1F, $07, $00, $04
  44++ED00 1F 16 04 0C                          DB $1F, $16, $04, $0C
  45++ED04 18 36 0C 18                          DB $18, $36, $0C, $18
  46++ED08 18 47 14 18                          DB $18, $47, $14, $18
  47++ED0C 18 58 10 14                          DB $18, $58, $10, $14
  48++ED10 1F 28 00 10                          DB $1F, $28, $00, $10
  49++ED14 0F 67 04 18                          DB $0F, $67, $04, $18
  50++ED18 0F 78 00 14                          DB $0F, $78, $00, $14
  51++ED1C 0F 02 00 08                          DB $0F, $02, $00, $08
  52++ED20 0F 01 04 08                          DB $0F, $01, $04, $08
  53++ED24 11 13 08 0C                          DB $11, $13, $08, $0C
  54++ED28 11 25 08 10                          DB $11, $25, $08, $10
  55++ED2C 0D 45 08 14                          DB $0D, $45, $08, $14
  56++ED30 0D 34 08 18                          DB $0D, $34, $08, $18
  57++ED34 05 44 1C 20                          DB $05, $44, $1C, $20
  58++ED38 07 44 1C 24                          DB $07, $44, $1C, $24
  59++ED3C 07 44 20 24                          DB $07, $44, $20, $24
  60++ED40 05 00 28 2C                          DB $05, $00, $28, $2C
  61++ED44 05 00 30 34                          DB $05, $00, $30, $34
  62++ED48              MorayEdgesSize:         equ $ - MorayEdges
  63++ED48              MorayEdgesCnt:          equ MorayEdgesSize/4
  64++ED48 1F 00 2B 07  MorayNormals:	        DB $1F, $00, $2B, $07
  65++ED4C 9F 0A 31 07                          DB $9F, $0A, $31, $07
  66++ED50 1F 0A 31 07                          DB $1F, $0A, $31, $07
  67++ED54 F8 3B 1C 65                          DB $F8, $3B, $1C, $65
  68++ED58 78 00 34 4E                          DB $78, $00, $34, $4E
  69++ED5C 78 3B 1C 65                          DB $78, $3B, $1C, $65
  70++ED60 DF 48 63 32                          DB $DF, $48, $63, $32
  71++ED64 5F 00 53 1E                          DB $5F, $00, $53, $1E
  72++ED68 5F 48 63 32                          DB $5F, $48, $63, $32
  73++ED6C
  74++ED6C              MorayNormalsSize:       equ $ - MorayNormals
  75++ED6C              MorayLen:               equ $ - Moray
  76++ED6C
# file closed: ./Data/ships/Moray.asm
  94+ ED6C                                      include "Data/ships/Ophidian.asm"
# file opened: ./Data/ships/Ophidian.asm
   1++ED6C 02           Ophidian:	            DB $02                     ; Number of cargo canisters released when destroyed
   2++ED6D 88 0E                                DW $0E88                   ; Ship's targetable area LoHi
   3++ED6F 03 EE                                DW OphidianEdges           ; Edge Data
   4++ED71 78                                   DB OphidianEdgesSize       ; Size of Edge Data
   5++ED72 00                                   DB $00                     ; Gun Vertex Byte offset
   6++ED73 3C                                   DB $3C                     ; Explosion Count
   7++ED74 14                                   DB OphidianVertSize /6     ; Vertex Count /6
   8++ED75 78                                   DB OphidianVertSize        ; Vertex Count
   9++ED76 1E                                   DB OphidianEdgesCnt        ; Edges Count
  10++ED77 32 00                                DW $0032                   ; Bounty LoHi
  11++ED79 30                                   DB OphidianNormalsSize     ; Face (Normal) Count
  12++ED7A 14                                   DB $14                     ; Range when it turns to a dot
  13++ED7B 40                                   DB $40                     ; Energy Max
  14++ED7C 22                                   DB $22                     ; Speed Max
  15++ED7D 7B EE                                DW OphidianNormals         ; Normals
  16++ED7F 01                                   DB $01                     ; Q scaling
  17++ED80 1A                                   DB $1A                     ; Laser power and Nbr Missiles
  18++ED81 8B ED                                DW OphidianVertices        ; Verticles Address
  19++ED83 00                                   DB ShipTypeNormal          ; Ship Type
  20++ED84 00                                   DB 0                       ; NewB Tactics
  21++ED85 80                                   DB ShipCanAnger            ; AI Flags
  22++ED86 C0                                   DB $C0                     ; chance of ECM module
  23++ED87 FF                                   DB $FF                              ; Supports Solid Fill = false
  24++ED88 00 00                                DW $0000                            ; no solid data
  25++ED8A 00                                   DB $00                              ; no solid data
  26++ED8B
  27++ED8B
  28++ED8B 14 00 46 9F  OphidianVertices:	    DB $14, $00, $46, $9F, $68, $02 ; 01
  28++ED8F 68 02
  29++ED91 14 00 46 1F                          DB $14, $00, $46, $1F, $67, $01 ; 02
  29++ED95 67 01
  30++ED97 00 0A 28 1F                          DB $00, $0A, $28, $1F, $22, $01 ; 03
  30++ED9B 22 01
  31++ED9D 1E 00 1E 9F                          DB $1E, $00, $1E, $9F, $8A, $24 ; 04
  31++EDA1 8A 24
  32++EDA3 1E 00 1E 1F                          DB $1E, $00, $1E, $1F, $79, $13 ; 05
  32++EDA7 79 13
  33++EDA9 00 10 0A 1F                          DB $00, $10, $0A, $1F, $FF, $FF ; 06
  33++EDAD FF FF
  34++EDAF 14 0A 32 3F                          DB $14, $0A, $32, $3F, $9B, $35 ; 07
  34++EDB3 9B 35
  35++EDB5 14 0A 32 BF                          DB $14, $0A, $32, $BF, $AB, $45 ; 08
  35++EDB9 AB 45
  36++EDBB 1E 00 32 BF                          DB $1E, $00, $32, $BF, $BB, $4A ; 09
  36++EDBF BB 4A
  37++EDC1 28 00 32 B0                          DB $28, $00, $32, $B0, $FF, $FF ; 10
  37++EDC5 FF FF
  38++EDC7 1E 00 1E B0                          DB $1E, $00, $1E, $B0, $FF, $FF ; 11
  38++EDCB FF FF
  39++EDCD 1E 00 32 3F                          DB $1E, $00, $32, $3F, $BB, $39 ; 12
  39++EDD1 BB 39
  40++EDD3 28 00 32 30                          DB $28, $00, $32, $30, $FF, $FF ; 13
  40++EDD7 FF FF
  41++EDD9 1E 00 1E 30                          DB $1E, $00, $1E, $30, $FF, $FF ; 14
  41++EDDD FF FF
  42++EDDF 00 0A 32 7F                          DB $00, $0A, $32, $7F, $BB, $9A ; 15
  42++EDE3 BB 9A
  43++EDE5 00 10 14 5F                          DB $00, $10, $14, $5F, $FF, $FF ; 16
  43++EDE9 FF FF
  44++EDEB 0A 04 32 30                          DB $0A, $04, $32, $30, $BB, $BB ; 17
  44++EDEF BB BB
  45++EDF1 0A 02 32 70                          DB $0A, $02, $32, $70, $BB, $BB ; 18
  45++EDF5 BB BB
  46++EDF7 0A 02 32 F0                          DB $0A, $02, $32, $F0, $BB, $BB ; 19
  46++EDFB BB BB
  47++EDFD 0A 04 32 B0                          DB $0A, $04, $32, $B0, $BB, $BB ; 20
  47++EE01 BB BB
  48++EE03
  49++EE03              OphidianVertSize:       equ $ - OphidianVertices
  50++EE03 1F 06 00 04  OphidianEdges:	        DB $1F, $06, $00, $04
  51++EE07 1F 01 04 08                          DB $1F, $01, $04, $08
  52++EE0B 1F 02 00 08                          DB $1F, $02, $00, $08
  53++EE0F 1F 12 08 14                          DB $1F, $12, $08, $14
  54++EE13 1F 13 10 14                          DB $1F, $13, $10, $14
  55++EE17 1F 24 0C 14                          DB $1F, $24, $0C, $14
  56++EE1B 1F 35 14 18                          DB $1F, $35, $14, $18
  57++EE1F 1F 45 14 1C                          DB $1F, $45, $14, $1C
  58++EE23 1F 28 00 0C                          DB $1F, $28, $00, $0C
  59++EE27 1F 17 04 10                          DB $1F, $17, $04, $10
  60++EE2B 1F 39 10 2C                          DB $1F, $39, $10, $2C
  61++EE2F 1F 4A 0C 20                          DB $1F, $4A, $0C, $20
  62++EE33 1F 67 04 3C                          DB $1F, $67, $04, $3C
  63++EE37 1F 68 00 3C                          DB $1F, $68, $00, $3C
  64++EE3B 1F 79 10 3C                          DB $1F, $79, $10, $3C
  65++EE3F 1F 8A 0C 3C                          DB $1F, $8A, $0C, $3C
  66++EE43 1F 9A 38 3C                          DB $1F, $9A, $38, $3C
  67++EE47 1F 5B 18 1C                          DB $1F, $5B, $18, $1C
  68++EE4B 1F 3B 18 2C                          DB $1F, $3B, $18, $2C
  69++EE4F 1F 4B 1C 20                          DB $1F, $4B, $1C, $20
  70++EE53 1F 9B 2C 38                          DB $1F, $9B, $2C, $38
  71++EE57 1F AB 20 38                          DB $1F, $AB, $20, $38
  72++EE5B 10 BB 40 44                          DB $10, $BB, $40, $44
  73++EE5F 10 BB 44 48                          DB $10, $BB, $44, $48
  74++EE63 10 BB 48 4C                          DB $10, $BB, $48, $4C
  75++EE67 10 BB 4C 40                          DB $10, $BB, $4C, $40
  76++EE6B 10 39 30 34                          DB $10, $39, $30, $34
  77++EE6F 10 39 2C 30                          DB $10, $39, $2C, $30
  78++EE73 10 4A 28 24                          DB $10, $4A, $28, $24
  79++EE77 10 4A 24 20                          DB $10, $4A, $24, $20
  80++EE7B              OphidianEdgesSize:      equ $ - OphidianEdges
  81++EE7B              OphidianEdgesCnt:       equ OphidianEdgesSize/4
  82++EE7B
  83++EE7B 1F 00 25 0C  OphidianNormals:	    DB $1F, $00, $25, $0C
  84++EE7F 1F 0B 1C 05                          DB $1F, $0B, $1C, $05
  85++EE83 9F 0B 1C 05                          DB $9F, $0B, $1C, $05
  86++EE87 1F 10 22 02                          DB $1F, $10, $22, $02
  87++EE8B 9F 10 22 02                          DB $9F, $10, $22, $02
  88++EE8F 3F 00 25 03                          DB $3F, $00, $25, $03
  89++EE93 5F 00 1F 0A                          DB $5F, $00, $1F, $0A
  90++EE97 5F 0A 14 02                          DB $5F, $0A, $14, $02
  91++EE9B DF 0A 14 02                          DB $DF, $0A, $14, $02
  92++EE9F 7F 12 20 02                          DB $7F, $12, $20, $02
  93++EEA3 FF 12 20 02                          DB $FF, $12, $20, $02
  94++EEA7 3F 00 00 25                          DB $3F, $00, $00, $25
  95++EEAB
  96++EEAB              OphidianNormalsSize:    equ $ - OphidianNormals
  97++EEAB              OphidianLen:            equ $ - Ophidian
  98++EEAB
# file closed: ./Data/ships/Ophidian.asm
  95+ EEAB                                      include "Data/ships/Plate.asm"
# file opened: ./Data/ships/Plate.asm
   1++EEAB 80           Plate:	                DB $80                    ; Number of cargo canisters released when destroyed
   2++EEAC 64 00                                DW $0064                  ; Ship's targetable area LoHi
   3++EEAE DC EE                                DW PlateEdges             ; Edge Data
   4++EEB0 10                                   DB PlateEdgesSize         ; Size of Edge Data
   5++EEB1 00                                   DB $00                    ; Gun Vertex Byte offset
   6++EEB2 0A                                   DB $0A                    ; Explosion Count
   7++EEB3 03                                   DB PlateVertSize /6       ; Vertex Count /6
   8++EEB4 12                                   DB PlateVertSize          ; Vertex Count
   9++EEB5 04                                   DB PlateEdgesCnt          ; Edges Count
  10++EEB6 00 00                                DW $0000                  ; Bounty LoHi
  11++EEB8 04                                   DB PlateNormalsSize       ; Face (Normal) Count
  12++EEB9 05                                   DB $05                    ; Range when it turns to a dot
  13++EEBA 10                                   DB $10                    ; Energy Max
  14++EEBB 10                                   DB $10                    ; Speed Max
  15++EEBC EC EE                                DW PlateNormals           ; Normals
  16++EEBE 03                                   DB $03                    ; Q scaling
  17++EEBF 00                                   DB $00                    ; Laser power and Nbr Missiles
  18++EEC0 CA EE                                DW PlateVertices          ; Verticles Address
  19++EEC2 04                                   DB ShipTypeScoopable      ; Ship Type
  20++EEC3 00                                   DB 0                      ; NewB Tactics
  21++EEC4 80                                   DB ShipCanAnger           ; AI Flags
  22++EEC5 00                                   DB $00                    ; chance of ECM module
  23++EEC6 FF                                   DB $FF                              ; Supports Solid Fill = false
  24++EEC7 00 00                                DW $0000                            ; no solid data
  25++EEC9 00                                   DB $00                              ; no solid data
  26++EECA
  27++EECA
  28++EECA
  29++EECA 0F 16 09 FF  PlateVertices:	        DB $0F, $16, $09, $FF, $FF, $FF
  29++EECE FF FF
  30++EED0 0F 26 09 BF                          DB $0F, $26, $09, $BF, $FF, $FF
  30++EED4 FF FF
  31++EED6 13 20 0B 14                          DB $13, $20, $0B, $14, $FF, $FF
  31++EEDA FF FF
  32++EEDC
  33++EEDC              PlateVertSize: equ $ - PlateVertices
  34++EEDC
  35++EEDC
  36++EEDC
  37++EEDC 1F FF 00 04  PlateEdges:	DB $1F, $FF, $00, $04
  38++EEE0 10 FF 04 08  	DB $10, $FF, $04, $08
  39++EEE4 14 FF 08 0C  	DB $14, $FF, $08, $0C
  40++EEE8 10 FF 0C 00  	DB $10, $FF, $0C, $00
  41++EEEC
  42++EEEC              PlateEdgesSize: equ $ - PlateEdges
  43++EEEC
  44++EEEC
  45++EEEC              PlateEdgesCnt: equ PlateEdgesSize/4
  46++EEEC
  47++EEEC
  48++EEEC 00 00 00 00  PlateNormals:	DB $00, $00, $00, $00
  49++EEF0
  50++EEF0
  51++EEF0              PlateNormalsSize: equ $ - PlateNormals
  52++EEF0              PlateLen: equ $ - Plate
  53++EEF0
# file closed: ./Data/ships/Plate.asm
  96+ EEF0                                      include "Data/ships/Python.asm"
# file opened: ./Data/ships/Python.asm
   1++EEF0              ;\ -> &5BA1 \ Python = Type 12                                                   ; Number of cargo canisters released when destroyed
   2++EEF0 05           Python:                 DB $05                                                   ; Ship's targetable area LoHi
   3++EEF1 00 19                                DW $1900                                                 ; Edge Data
   4++EEF3 51 EF                                DW PythonEdges                                           ; Size of Edge Data
   5++EEF5 68                                   DB PythonEdgesSize                                       ; Gun Vertex Byte offset
   6++EEF6 00                                   DB $00                                                   ; Explosion Count
   7++EEF7 2A                                   DB $2A                                                   ; Vertex Count /6
   8++EEF8 0B                                   DB PythonVertSize /6                                     ; Vertex Count
   9++EEF9 42                                   DB PythonVertSize                                        ; Edges Count
  10++EEFA 1A                                   DB PythonEdgesCnt                                        ; Bounty LoHi
  11++EEFB 00 00                                DW $0000                                                 ; Face (Normal) Count
  12++EEFD 34                                   DB PythonNormalsSize                                     ; Range when it turns to a dot
  13++EEFE 28                                   DB $28                                                   ; Energy Max
  14++EEFF FA                                   DB $FA                                                   ; Speed Max
  15++EF00 14                                   DB $14                                                   ; Normals
  16++EF01 B9 EF                                DW PythonNormals                                         ; Q scaling
  17++EF03 00                                   DB $00                                                   ; Laser power and Nbr Missiles
  18++EF04 56                                   DB $50 | ShipMissiles6                                   ; Verticles Address
  19++EF05 0F EF                                DW PythonVertices                                        ; Ship Type
  20++EF07 00                                   DB ShipTypeNormal                                        ; NewB Tactics
  21++EF08 00                                   DB 0                                                     ; AI Flags
  22++EF09 90                                   DB ShipCanAnger | ShipFighterBaySize1 | ShipFighterWorm  ; chance of ECM module
  23++EF0A E0                                   DB $E0
  24++EF0B FF                                   DB $FF                              ; Supports Solid Fill = false
  25++EF0C 00 00                                DW $0000                            ; no solid data
  26++EF0E 00                                   DB $00                              ; no solid data
  27++EF0F
  28++EF0F 00 00 E0 1F  PythonVertices:         DB $00, $00, $E0, $1F, $10, $32
  28++EF13 10 32
  29++EF15 00 30 30 1E                          DB $00, $30, $30, $1E, $10, $54
  29++EF19 10 54
  30++EF1B 60 00 10 3F                          DB $60, $00, $10, $3F, $FF, $FF
  30++EF1F FF FF
  31++EF21 60 00 10 BF                          DB $60, $00, $10, $BF, $FF, $FF
  31++EF25 FF FF
  32++EF27 00 30 20 3E                          DB $00, $30, $20, $3E, $54, $98
  32++EF2B 54 98
  33++EF2D 00 18 70 3F                          DB $00, $18, $70, $3F, $89, $CC
  33++EF31 89 CC
  34++EF33 30 00 70 BF                          DB $30, $00, $70, $BF, $B8, $CC
  34++EF37 B8 CC
  35++EF39 30 00 70 3F                          DB $30, $00, $70, $3F, $A9, $CC
  35++EF3D A9 CC
  36++EF3F 00 30 30 5E                          DB $00, $30, $30, $5E, $32, $76
  36++EF43 32 76
  37++EF45 00 30 20 7E                          DB $00, $30, $20, $7E, $76, $BA
  37++EF49 76 BA
  38++EF4B 00 18 70 7E                          DB $00, $18, $70, $7E, $BA, $CC
  38++EF4F BA CC
  39++EF51              PythonVertSize          equ $  - PythonVertices
  40++EF51 1E 32 00 20  PythonEdges:            DB $1E, $32, $00, $20, $1F, $20, $00, $0C
  40++EF55 1F 20 00 0C
  41++EF59 1F 31 00 08                          DB $1F, $31, $00, $08, $1E, $10, $00, $04
  41++EF5D 1E 10 00 04
  42++EF61 1D 59 08 10                          DB $1D, $59, $08, $10, $1D, $51, $04, $08
  42++EF65 1D 51 04 08
  43++EF69 1D 37 08 20                          DB $1D, $37, $08, $20, $1D, $40, $04, $0C
  43++EF6D 1D 40 04 0C
  44++EF71 1D 62 0C 20                          DB $1D, $62, $0C, $20, $1D, $A7, $08, $24
  44++EF75 1D A7 08 24
  45++EF79 1D 84 0C 10                          DB $1D, $84, $0C, $10, $1D, $B6, $0C, $24
  45++EF7D 1D B6 0C 24
  46++EF81 05 88 0C 14                          DB $05, $88, $0C, $14, $05, $BB, $0C, $28
  46++EF85 05 BB 0C 28
  47++EF89 05 99 08 14                          DB $05, $99, $08, $14, $05, $AA, $08, $28
  47++EF8D 05 AA 08 28
  48++EF91 1F A9 08 1C                          DB $1F, $A9, $08, $1C, $1F, $B8, $0C, $18
  48++EF95 1F B8 0C 18
  49++EF99 1F C8 14 18                          DB $1F, $C8, $14, $18, $1F, $C9, $14, $1C
  49++EF9D 1F C9 14 1C
  50++EFA1 1D AC 1C 28                          DB $1D, $AC, $1C, $28, $1D, $CB, $18, $28
  50++EFA5 1D CB 18 28
  51++EFA9 1D 98 10 14                          DB $1D, $98, $10, $14, $1D, $BA, $24, $28
  51++EFAD 1D BA 24 28
  52++EFB1 1D 54 04 10                          DB $1D, $54, $04, $10, $1D, $76, $20, $24
  52++EFB5 1D 76 20 24
  53++EFB9              PythonEdgesSize         equ $  - PythonEdges
  54++EFB9              PythonEdgesCnt          equ PythonEdgesSize/4
  55++EFB9 9E 1B 28 0B  PythonNormals           DB $9E, $1B, $28, $0B, $1E, $1B, $28, $0B
  55++EFBD 1E 1B 28 0B
  56++EFC1 DE 1B 28 0B                          DB $DE, $1B, $28, $0B, $5E, $1B, $28, $0B
  56++EFC5 5E 1B 28 0B
  57++EFC9 9E 13 26 00                          DB $9E, $13, $26, $00, $1E, $13, $26, $00
  57++EFCD 1E 13 26 00
  58++EFD1 DE 13 26 00                          DB $DE, $13, $26, $00, $5E, $13, $26, $00
  58++EFD5 5E 13 26 00
  59++EFD9 BE 19 25 0B                          DB $BE, $19, $25, $0B, $3E, $19, $25, $0B
  59++EFDD 3E 19 25 0B
  60++EFE1 7E 19 25 0B                          DB $7E, $19, $25, $0B, $FE, $19, $25, $0B
  60++EFE5 FE 19 25 0B
  61++EFE9 3E 00 00 70                          DB $3E, $00, $00, $70
  62++EFED              PythonNormalsSize       equ $  - PythonNormals
  63++EFED              PythonLen               equ $  - Python
  64++EFED
# file closed: ./Data/ships/Python.asm
  97+ EFED                                      include "Data/ships/Python_P.asm"
# file opened: ./Data/ships/Python_P.asm
   1++EFED 02           Python_P:	            DB $02                           ; Number of cargo canisters released when destroyed
   2++EFEE 00 19                                DW $1900                         ; Ship's targetable area LoHi
   3++EFF0 4E F0                                DW Python_PEdges                 ; Edge Data
   4++EFF2 68                                   DB Python_PEdgesSize             ; Size of Edge Data
   5++EFF3 00                                   DB $00                           ; Gun Vertex Byte offset
   6++EFF4 2A                                   DB $2A                           ; Explosion Count
   7++EFF5 0B                                   DB Python_PVertSize /6           ; Vertex Count /6
   8++EFF6 42                                   DB Python_PVertSize              ; Vertex Count
   9++EFF7 1A                                   DB Python_PEdgesCnt              ; Edges Count
  10++EFF8 C8 00                                DW $00C8                         ; Bounty LoHi
  11++EFFA 34                                   DB Python_PNormalsSize           ; Face (Normal) Count
  12++EFFB 28                                   DB $28                           ; Range when it turns to a dot
  13++EFFC FA                                   DB $FA                           ; Energy Max
  14++EFFD 14                                   DB $14                           ; Speed Max
  15++EFFE B6 F0                                DW Python_PNormals               ; Normals
  16++F000 00                                   DB $00                           ; Q scaling
  17++F001 66                                   DB $60 | ShipMissiles6           ; Laser power and Nbr Missiles
  18++F002 0C F0                                DW Python_PVertices              ; Verticles Address
  19++F004 00                                   DB ShipTypeNormal                ; Ship Type
  20++F005 00                                   DB 0                             ; NewB Tactics
  21++F006 80                                   DB ShipCanAnger                  ; AI Flags
  22++F007 F0                                   DB $F0                           ; chance of ECM module
  23++F008 FF                                   DB $FF                              ; Supports Solid Fill = false
  24++F009 00 00                                DW $0000                            ; no solid data
  25++F00B 00                                   DB $00                              ; no solid data
  26++F00C
  27++F00C
  28++F00C 00 00 E0 1F  Python_PVertices:	    DB $00, $00, $E0, $1F, $10, $32
  28++F010 10 32
  29++F012 00 30 30 1F                          DB $00, $30, $30, $1F, $10, $54
  29++F016 10 54
  30++F018 60 00 10 3F                          DB $60, $00, $10, $3F, $FF, $FF
  30++F01C FF FF
  31++F01E 60 00 10 BF                          DB $60, $00, $10, $BF, $FF, $FF
  31++F022 FF FF
  32++F024 00 30 20 3F                          DB $00, $30, $20, $3F, $54, $98
  32++F028 54 98
  33++F02A 00 18 70 3F                          DB $00, $18, $70, $3F, $89, $CC
  33++F02E 89 CC
  34++F030 30 00 70 BF                          DB $30, $00, $70, $BF, $B8, $CC
  34++F034 B8 CC
  35++F036 30 00 70 3F                          DB $30, $00, $70, $3F, $A9, $CC
  35++F03A A9 CC
  36++F03C 00 30 30 5F                          DB $00, $30, $30, $5F, $32, $76
  36++F040 32 76
  37++F042 00 30 20 7F                          DB $00, $30, $20, $7F, $76, $BA
  37++F046 76 BA
  38++F048 00 18 70 7F                          DB $00, $18, $70, $7F, $BA, $CC
  38++F04C BA CC
  39++F04E
  40++F04E              Python_PVertSize: equ $ - Python_PVertices
  41++F04E
  42++F04E
  43++F04E
  44++F04E 1F 32 00 20  Python_PEdges:	DB $1F, $32, $00, $20
  45++F052 1F 20 00 0C  	DB $1F, $20, $00, $0C
  46++F056 1F 31 00 08  	DB $1F, $31, $00, $08
  47++F05A 1F 10 00 04  	DB $1F, $10, $00, $04
  48++F05E 1F 59 08 10  	DB $1F, $59, $08, $10
  49++F062 1F 51 04 08  	DB $1F, $51, $04, $08
  50++F066 1F 37 08 20  	DB $1F, $37, $08, $20
  51++F06A 1F 40 04 0C  	DB $1F, $40, $04, $0C
  52++F06E 1F 62 0C 20  	DB $1F, $62, $0C, $20
  53++F072 1F A7 08 24  	DB $1F, $A7, $08, $24
  54++F076 1F 84 0C 10  	DB $1F, $84, $0C, $10
  55++F07A 1F B6 0C 24  	DB $1F, $B6, $0C, $24
  56++F07E 07 88 0C 14  	DB $07, $88, $0C, $14
  57++F082 07 BB 0C 28  	DB $07, $BB, $0C, $28
  58++F086 07 99 08 14  	DB $07, $99, $08, $14
  59++F08A 07 AA 08 28  	DB $07, $AA, $08, $28
  60++F08E 1F A9 08 1C  	DB $1F, $A9, $08, $1C
  61++F092 1F B8 0C 18  	DB $1F, $B8, $0C, $18
  62++F096 1F C8 14 18  	DB $1F, $C8, $14, $18
  63++F09A 1F C9 14 1C  	DB $1F, $C9, $14, $1C
  64++F09E 1F AC 1C 28  	DB $1F, $AC, $1C, $28
  65++F0A2 1F CB 18 28  	DB $1F, $CB, $18, $28
  66++F0A6 1F 98 10 14  	DB $1F, $98, $10, $14
  67++F0AA 1F BA 24 28  	DB $1F, $BA, $24, $28
  68++F0AE 1F 54 04 10  	DB $1F, $54, $04, $10
  69++F0B2 1F 76 20 24  	DB $1F, $76, $20, $24
  70++F0B6
  71++F0B6              Python_PEdgesSize: equ $ - Python_PEdges
  72++F0B6
  73++F0B6
  74++F0B6              Python_PEdgesCnt: equ Python_PEdgesSize/4
  75++F0B6
  76++F0B6
  77++F0B6 9F 1B 28 0B  Python_PNormals:	DB $9F, $1B, $28, $0B
  78++F0BA 1F 1B 28 0B  	DB $1F, $1B, $28, $0B
  79++F0BE DF 1B 28 0B  	DB $DF, $1B, $28, $0B
  80++F0C2 5F 1B 28 0B  	DB $5F, $1B, $28, $0B
  81++F0C6 9F 13 26 00  	DB $9F, $13, $26, $00
  82++F0CA 1F 13 26 00  	DB $1F, $13, $26, $00
  83++F0CE DF 13 26 00  	DB $DF, $13, $26, $00
  84++F0D2 5F 13 26 00  	DB $5F, $13, $26, $00
  85++F0D6 BF 19 25 0B  	DB $BF, $19, $25, $0B
  86++F0DA 3F 19 25 0B  	DB $3F, $19, $25, $0B
  87++F0DE 7F 19 25 0B  	DB $7F, $19, $25, $0B
  88++F0E2 FF 19 25 0B  	DB $FF, $19, $25, $0B
  89++F0E6 3F 00 00 70  	DB $3F, $00, $00, $70
  90++F0EA
  91++F0EA
  92++F0EA              Python_PNormalsSize: equ $ - Python_PNormals
  93++F0EA              Python_PLen: equ $ - Python_P
  94++F0EA
# file closed: ./Data/ships/Python_P.asm
  98+ F0EA
# file closed: ./Data/ShipModelMetaData2.asm
 868  F0EA                  DISPLAY "Bank ",BankShipModels2," - Bytes free ",/D, $2000 - ($-ShipModelsAddr), " - BankShipModels2"
 869  F0EA              ; Bank 68  ------------------------------------------------------------------------------------------------------------------------
 870  F0EA                  SLOT    ShipModelsAddr
 871  F0EA                  PAGE    BankShipModels3
 872  F0EA              	ORG     ShipModelsAddr, BankShipModels3
 873  E000
 874  E000                  INCLUDE "./Data/ShipBank3Label.asm"
# file opened: ./Data/ShipBank3Label.asm
   1+ E000 53 68 69 70  ShipBank3Label:         DB  "ShipBank3      "
   1+ E004 42 61 6E 6B
   1+ E008 33 20 20 20
   1+ E00C 20 20 20
   2+ E00F
# file closed: ./Data/ShipBank3Label.asm
 875  E00F              GetShipBank3Id:         MGetShipBankId ShipBankTable3
 875  E00F 06 00       >                        ld      b,0
 875  E011 4F          >                        ld      c,a                                 ; c= original ship id
 875  E012 CB 3F       >.ShiftLoop:             srl     a
 875  E014 CB 3F       >                        srl     a
 875  E016 CB 3F       >                        srl     a
 875  E018 CB 3F       >                        srl     a                                   ; divide by 16
 875  E01A 47          >                        ld      b,a                                 ; b = bank nbr
 875  E01B 79          >                        ld      a,c
 875  E01C 50          >                        ld      d,b
 875  E01D 1E 10       >                        ld      e,16
 875  E01F ED 30       >                        mul                                         ; de = 16 * bank number (max is about 15 banks)
 875  E021 93          >                        sub     e                                   ; a= actual model id now
 875  E022 50          >.SelectedBank:          ld      d,b                                 ; save current bank number
 875  E023 47          >                        ld      b,a                                 ; b = adjusted ship nbr
 875  E024 7A          >                        ld      a,d                                 ; a = bank number
 875  E025             >;.. Now b = bank and a = adjusted ship nbr
 875  E025 21 62 E0    >                        ld      hl,ShipBankTable3                        ; a= bank index
 875  E028 ED 31       >                        add     hl,a
 875  E02A ED 31       >                        add     hl,a
 875  E02C 7E          >                        ld      a,(hl)                              ; a = actual bank now
 875  E02D             >                        ClearCarryFlag
 875  E02D B7          >                        or a
 875  E02E C9          >                        ret
 876  E02F              CopyVertsToUniv3:       McopyVertsToUniverse
 876  E02F 2A 4C C4    >                        ld          hl,(VerticesAddyAddr)       ; now the pointers are in Ubnk its easy to read
 876  E032 11 52 C4    >                        ld          de,UBnkHullVerticies
 876  E035 06 00       >                        ld          b,0
 876  E037 3A 40 C4    >                        ld			a,(VertexCtX6Addr)
 876  E03A 4F          >                        ld          c,a
 876  E03B EB          >                        ex          de,hl                       ; dma transfer goes de -> hl i.e. opposite of ldir
 876  E03C CD 58 7E    >                        call        memcopy_dma
 876  E03F C9          >                        ret
 877  E040              CopyEdgesToUniv3:       McopyEdgesToUniverse
 877  E040 2A 3A C4    >                        ld          hl,(EdgeAddyAddr)          ; now the pointers are in Ubnk its easy to read
 877  E043 11 42 C5    >                        ld          de,UBnkHullEdges
 877  E046 06 00       >                        ld          b,0
 877  E048 3A 3C C4    >                        ld			a,(LineX4Addr)
 877  E04B 4F          >                        ld          c,a
 877  E04C EB          >                        ex          de,hl                       ; dma transfer goes de -> hl i.e. opposite of ldir
 877  E04D CD 58 7E    >                        call        memcopy_dma
 877  E050 C9          >                        ret
 878  E051              CopyNormsToUniv3:       McopyNormsToUniverse
 878  E051 2A 48 C4    >                        ld          hl,(FaceAddyAddr)          ; now the pointers are in Ubnk its easy to read
 878  E054 11 0A C6    >                        ld          de,UBnkHullNormals
 878  E057 06 00       >                        ld          b,0
 878  E059 3A 44 C4    >                        ld          a,(FaceCtX4Addr)
 878  E05C 4F          >                        ld          c,a
 878  E05D EB          >                        ex          de,hl                       ; dma transfer goes de -> hl i.e. opposite of ldir
 878  E05E CD 58 7E    >                        call        memcopy_dma
 878  E061 C9          >                        ret
 879  E062              ShipBankTable3:         MShipBankTable
 879  E062 3B 00       >                        DW      BankShipModels1
 879  E064 43 00       >                        DW      BankShipModels2
 879  E066 44 00       >                        DW      BankShipModels3
 879  E068 45 00       >                        DW      BankShipModels4
 880  E06A              CopyShipToUniverse3     MCopyShipToUniverse     BankShipModels3
 880  E06A 21 42 C0    >                        ld          hl,UBnkShipModelBank
 880  E06D 36 44       >                        ld          (hl),BankShipModels3
 880  E06F F5          >                        push        af
 880  E070 FD 7D       >                        ld          a,iyl
 880  E072 32 44 C0    >                        ld          (UBnKShipModelId),a
 880  E075 F1          >                        pop         af
 880  E076 32 43 C0    >                        ld          (UBnKShipModelNbr),a
 880  E079 21 46 E1    >.GetHullDataLength:     ld          hl,ShipModelSizeTable
 880  E07C ED 31       >                        add         hl,a
 880  E07E ED 31       >                        add         hl,a                        ; we won't multiply by 2 as GetInfo is a general purpose routines so would end up x 4
 880  E080 4E          >                        ld          c,(hl)
 880  E081 23          >                        inc         hl
 880  E082 46          >                        ld          b,(hl)                      ; bc now equals length of data set
 880  E083 21 C6 E0    >.GetHullDataAddress:    ld          hl,ShipModelTable
 880  E086 ED 31       >                        add         hl,a
 880  E088 ED 31       >                        add         hl,a                        ; now hl = address of ship data value
 880  E08A 7E          >                        ld          a,(hl)
 880  E08B 23          >                        inc         hl
 880  E08C 66          >                        ld          h,(hl)
 880  E08D 6F          >                        ld          l,a                         ; now hl = address of ship hull data
 880  E08E 11 37 C4    >                        ld          de,UBnkHullCopy             ; Universe bank
 880  E091 01 1B 00    >                        ld          bc,ShipDataLength
 880  E094 ED B0       >                        ldir
 880  E096 CD 2F E0    >                        call        CopyVertsToUniv
 880  E099 CD 40 E0    >                        call        CopyEdgesToUniv
 880  E09C CD 51 E0    >                        call        CopyNormsToUniv
 880  E09F 21 10 C0    >.ClearName:             ld          hl,StartOfUnivName
 880  E0A2 3E 20       >                        ld          a," "
 880  E0A4 06 10       >                        ld          b,16
 880  E0A6 77          >.fillLoop:              ld          (hl),a
 880  E0A7 23          >                        inc         hl
 880  E0A8 10 FC       >                        djnz        .fillLoop
 880  E0AA 3A 44 C0    >.SetName:               ld          a,(UBnKShipModelId)
 880  E0AD CD D9 8F    >                        call        ShipIndexToAddress
 880  E0B0 11 10 C0    >                        ld          de,StartOfUnivName
 880  E0B3 06 10       >                        ld          b,16
 880  E0B5 7E          >.CopyLoop:              ld          a,(hl)
 880  E0B6 FE 00       >                        cp          0
 880  E0B8 28 05       >                        jr          z,.CopyDone
 880  E0BA 12          >                        ld          (de),a
 880  E0BB 23          >                        inc         hl
 880  E0BC 13          >                        inc         de
 880  E0BD 10 F6       >                        djnz        .CopyLoop
 880  E0BF C9          >.CopyDone:              ret
 881  E0C0              CopyBodyToUniverse3:    MCopyBodyToUniverse     CopyShipToUniverse3
 881  E0C0 3E 0D       >                        ld          a,13
 881  E0C2 CD 6A E0    >                        call        CopyShipToUniverse3
 881  E0C5 C9          >                        ret
 882  E0C6                  INCLUDE "./Data/ShipModelMetaData3.asm"
# file opened: ./Data/ShipModelMetaData3.asm
   1+ E0C6 66 E1        ShipModelTable3:         DW Rock_Hermit                             ;32  $30
   2+ E0C8 47 E2                                 DW ShuttleType9                            ;33  $31
   3+ E0CA 84 E3                                 DW Shuttle_Mk_2                            ;34  $32
   4+ E0CC AD E4                                 DW Sidewinder                              ;35  $33
   5+ E0CE 60 E5                                 DW Splinter                                ;36  $34
   6+ E0D0 BF E5                                 DW TestVector                              ;37  $35
   7+ E0D2 28 E6                                 DW Thargoid                                ;38  $36
   8+ E0D4 4F E7                                 DW Thargon                                 ;39  $37
   9+ E0D6 02 E8                                 DW TransportType10                         ;40  $38
  10+ E0D8 EF E9                                 DW Viper                                   ;41  $39
  11+ E0DA D4 EA                                 DW Worm                                    ;42  $3A
  12+ E0DC 8F EB                                 DW Rattler                                 ;43  $3B
  13+ E0DE 00 00                                 DW 0                                       ;44  $3C
  14+ E0E0 00 00                                 DW 0                                       ;45  $3D
  15+ E0E2 00 00                                 DW 0                                       ;46  $3E
  16+ E0E4 00 00                                 DW 0                                       ;47  $3F
  17+ E0E6 85 E1        ShipVertexTable3:        DW Rock_HermitVertices                     ;32  $30
  18+ E0E8 66 E2                                 DW ShuttleType9Vertices                    ;33  $31
  19+ E0EA A3 E3                                 DW Shuttle_Mk_2Vertices                    ;34  $32
  20+ E0EC CC E4                                 DW SidewinderVertices                      ;35  $33
  21+ E0EE 7F E5                                 DW SplinterVertices                        ;36  $34
  22+ E0F0 DE E5                                 DW TestVectorVertices                      ;37  $35
  23+ E0F2 47 E6                                 DW ThargoidVertices                        ;38  $36
  24+ E0F4 6E E7                                 DW ThargonVertices                         ;39  $37
  25+ E0F6 21 E8                                 DW TransportType10Vertices                 ;40  $38
  26+ E0F8 0E EA                                 DW ViperVertices                           ;41  $39
  27+ E0FA F3 EA                                 DW WormVertices                            ;42  $3A
  28+ E0FC AE EB                                 DW RattlerVertices                         ;43  $3B
  29+ E0FE 00 00                                 DW 0                                       ;44  $3C
  30+ E100 00 00                                 DW 0                                       ;45  $3D
  31+ E102 00 00                                 DW 0                                       ;46  $3E
  32+ E104 00 00                                 DW 0                                       ;47  $3F
  33+ E106
  34+ E106 BB E1        ShipEdgeTable3:          DW Rock_HermitEdges                        ;32  $30
  35+ E108 D8 E2                                 DW ShuttleType9Edges                       ;33  $31
  36+ E10A 09 E4                                 DW Shuttle_Mk_2Edges                       ;34  $32
  37+ E10C 08 E5                                 DW SidewinderEdges                         ;35  $33
  38+ E10E 97 E5                                 DW SplinterEdges                           ;36  $34
  39+ E110 08 E6                                 DW TestVectorEdges                         ;37  $35
  40+ E112 BF E6                                 DW ThargoidEdges                           ;38  $36
  41+ E114 AA E7                                 DW ThargonEdges                            ;39  $37
  42+ E116 FF E8                                 DW TransportType10Edges                    ;40  $38
  43+ E118 68 EA                                 DW ViperEdges                              ;41  $39
  44+ E11A 2F EB                                 DW WormEdges                               ;42  $3A
  45+ E11C 08 EC                                 DW RattlerEdges                            ;43  $3B
  46+ E11E 00 00                                 DW 0                                       ;44  $3C
  47+ E120 00 00                                 DW 0                                       ;45  $3D
  48+ E122 00 00                                 DW 0                                       ;46  $3E
  49+ E124 00 00                                 DW 0                                       ;47  $3F
  50+ E126
  51+ E126 0F E2        ShipNormalTable3:        DW Rock_HermitNormals                      ;32  $30
  52+ E128 50 E3                                 DW ShuttleType9Normals                     ;33  $31
  53+ E12A 79 E4                                 DW Shuttle_Mk_2Normals                     ;34  $32
  54+ E12C 44 E5                                 DW SidewinderNormals                       ;35  $33
  55+ E12E AF E5                                 DW SplinterNormals                         ;36  $34
  56+ E130 18 E6                                 DW TestVectorNormals                       ;37  $35
  57+ E132 27 E7                                 DW ThargoidNormals                         ;38  $36
  58+ E134 E6 E7                                 DW ThargonNormals                          ;39  $37
  59+ E136 B7 E9                                 DW TransportType10Normals                  ;40  $38
  60+ E138 B8 EA                                 DW ViperNormals                            ;41  $39
  61+ E13A 6F EB                                 DW WormNormals                             ;42  $3A
  62+ E13C 08 EC                                 DW RattlerEdges                            ;43  $3B
  63+ E13E 00 00                                 DW 0                                       ;44  $3C
  64+ E140 00 00                                 DW 0                                       ;45  $3D
  65+ E142 00 00                                 DW 0                                       ;46  $3E
  66+ E144 00 00                                 DW 0                                       ;47  $3F
  67+ E146
  68+ E146 E1 00        ShipModelSizeTable3:     DW Rock_HermitLen                          ;32  $30
  69+ E148 3D 01                                 DW ShuttleType9Len                         ;33  $31
  70+ E14A 29 01                                 DW Shuttle_Mk_2Len                         ;34  $32
  71+ E14C B3 00                                 DW SidewinderLen                           ;35  $33
  72+ E14E 5F 00                                 DW SplinterLen                             ;36  $34
  73+ E150 69 00                                 DW TestVectorLen                           ;37  $35
  74+ E152 27 01                                 DW ThargoidLen                             ;38  $36
  75+ E154 B3 00                                 DW ThargonLen                              ;39  $37
  76+ E156 ED 01                                 DW TransportType10Len                      ;40  $38
  77+ E158 E5 00                                 DW ViperLen                                ;41  $39
  78+ E15A BB 00                                 DW WormLen                                 ;42  $3A
  79+ E15C 15 01                                 DW RattlerLen                              ;43  $3B
  80+ E15E 00 00                                 DW 0                                       ;44  $3C
  81+ E160 00 00                                 DW 0                                       ;45  $3D
  82+ E162 00 00                                 DW 0                                       ;46  $3E
  83+ E164 00 00                                 DW 0                                       ;47  $3F
  84+ E166
  85+ E166                                      include "Data/ships/Rock_Hermit.asm"
# file opened: ./Data/ships/Rock_Hermit.asm
   1++E166 07           Rock_Hermit:	        DB $07                            ; Number of cargo canisters released when destroyed
   2++E167 00 19                                DW $1900                          ; Ship's targetable area LoHi
   3++E169 BB E1                                DW Rock_HermitEdges               ; Edge Data
   4++E16B 54                                   DB Rock_HermitEdgesSize           ; Size of Edge Data
   5++E16C 00                                   DB $00                            ; Gun Vertex Byte offset
   6++E16D 32                                   DB $32                            ; Explosion Count
   7++E16E 09                                   DB Rock_HermitVertSize /6         ; Vertex Count /6
   8++E16F 36                                   DB Rock_HermitVertSize            ; Vertex Count
   9++E170 15                                   DB Rock_HermitEdgesCnt            ; Edges Count
  10++E171 00 00                                DW $0000                          ; Bounty LoHi
  11++E173 38                                   DB Rock_HermitNormalsSize         ; Face (Normal) Count
  12++E174 32                                   DB $32                            ; Range when it turns to a dot
  13++E175 B4                                   DB $B4                            ; Energy Max
  14++E176 1E                                   DB $1E                            ; Speed Max
  15++E177 0F E2                                DW Rock_HermitNormals             ; Normals
  16++E179 01                                   DB $01                            ; Q scaling
  17++E17A 02                                   DB $02                            ; Laser power and Nbr Missiles
  18++E17B 85 E1                                DW Rock_HermitVertices            ; Verticles Address
  19++E17D 00                                   DB ShipTypeNormal                 ; Ship Type
  20++E17E 00                                   DB 0                              ; NewB Tactics
  21++E17F 80                                   DB ShipCanAnger                   ; AI Flags
  22++E180 30                                   DB $30                            ; chance of ECM module
  23++E181 FF                                   DB $FF                              ; Supports Solid Fill = false
  24++E182 00 00                                DW $0000                            ; no solid data
  25++E184 00                                   DB $00                              ; no solid data
  26++E185
  27++E185
  28++E185
  29++E185 00 50 00 1F  Rock_HermitVertices:	DB $00, $50, $00, $1F, $FF, $FF
  29++E189 FF FF
  30++E18B 50 0A 00 DF                          DB $50, $0A, $00, $DF, $FF, $FF
  30++E18F FF FF
  31++E191 00 50 00 5F                          DB $00, $50, $00, $5F, $FF, $FF
  31++E195 FF FF
  32++E197 46 28 00 5F                          DB $46, $28, $00, $5F, $FF, $FF
  32++E19B FF FF
  33++E19D 3C 32 00 1F                          DB $3C, $32, $00, $1F, $65, $DC
  33++E1A1 65 DC
  34++E1A3 32 00 3C 1F                          DB $32, $00, $3C, $1F, $FF, $FF
  34++E1A7 FF FF
  35++E1A9 28 00 46 9F                          DB $28, $00, $46, $9F, $10, $32
  35++E1AD 10 32
  36++E1AF 00 1E 4B 3F                          DB $00, $1E, $4B, $3F, $FF, $FF
  36++E1B3 FF FF
  37++E1B5 00 32 3C 7F                          DB $00, $32, $3C, $7F, $98, $BA
  37++E1B9 98 BA
  38++E1BB
  39++E1BB
  40++E1BB              Rock_HermitVertSize: equ $ - Rock_HermitVertices
  41++E1BB
  42++E1BB
  43++E1BB
  44++E1BB 1F 72 00 04  Rock_HermitEdges:	DB $1F, $72, $00, $04
  45++E1BF 1F D6 00 10  	DB $1F, $D6, $00, $10
  46++E1C3 1F C5 0C 10  	DB $1F, $C5, $0C, $10
  47++E1C7 1F B4 08 0C  	DB $1F, $B4, $08, $0C
  48++E1CB 1F A3 04 08  	DB $1F, $A3, $04, $08
  49++E1CF 1F 32 04 18  	DB $1F, $32, $04, $18
  50++E1D3 1F 31 08 18  	DB $1F, $31, $08, $18
  51++E1D7 1F 41 08 14  	DB $1F, $41, $08, $14
  52++E1DB 1F 10 14 18  	DB $1F, $10, $14, $18
  53++E1DF 1F 60 00 14  	DB $1F, $60, $00, $14
  54++E1E3 1F 54 0C 14  	DB $1F, $54, $0C, $14
  55++E1E7 1F 20 00 18  	DB $1F, $20, $00, $18
  56++E1EB 1F 65 10 14  	DB $1F, $65, $10, $14
  57++E1EF 1F A8 04 20  	DB $1F, $A8, $04, $20
  58++E1F3 1F 87 04 1C  	DB $1F, $87, $04, $1C
  59++E1F7 1F D7 00 1C  	DB $1F, $D7, $00, $1C
  60++E1FB 1F DC 10 1C  	DB $1F, $DC, $10, $1C
  61++E1FF 1F C9 0C 1C  	DB $1F, $C9, $0C, $1C
  62++E203 1F B9 0C 20  	DB $1F, $B9, $0C, $20
  63++E207 1F BA 08 20  	DB $1F, $BA, $08, $20
  64++E20B 1F 98 1C 20  	DB $1F, $98, $1C, $20
  65++E20F
  66++E20F              Rock_HermitEdgesSize: equ $ - Rock_HermitEdges
  67++E20F
  68++E20F
  69++E20F              Rock_HermitEdgesCnt: equ Rock_HermitEdgesSize/4
  70++E20F
  71++E20F
  72++E20F 1F 09 42 51  Rock_HermitNormals:	DB $1F, $09, $42, $51
  73++E213 5F 09 42 51  	DB $5F, $09, $42, $51
  74++E217 9F 48 40 1F  	DB $9F, $48, $40, $1F
  75++E21B DF 40 49 2F  	DB $DF, $40, $49, $2F
  76++E21F 5F 2D 4F 41  	DB $5F, $2D, $4F, $41
  77++E223 1F 87 0F 23  	DB $1F, $87, $0F, $23
  78++E227 1F 26 4C 46  	DB $1F, $26, $4C, $46
  79++E22B BF 42 3B 27  	DB $BF, $42, $3B, $27
  80++E22F FF 43 0F 50  	DB $FF, $43, $0F, $50
  81++E233 7F 42 0E 4B  	DB $7F, $42, $0E, $4B
  82++E237 FF 46 50 28  	DB $FF, $46, $50, $28
  83++E23B 7F 3A 66 33  	DB $7F, $3A, $66, $33
  84++E23F 3F 51 09 43  	DB $3F, $51, $09, $43
  85++E243 3F 2F 5E 3F  	DB $3F, $2F, $5E, $3F
  86++E247
  87++E247
  88++E247              Rock_HermitNormalsSize: equ $ - Rock_HermitNormals
  89++E247              Rock_HermitLen: equ $ - Rock_Hermit
  90++E247
# file closed: ./Data/ships/Rock_Hermit.asm
  86+ E247                                      include "Data/ships/ShuttleType9.asm"
# file opened: ./Data/ships/ShuttleType9.asm
   1++E247 0F           ShuttleType9:	            DB $0F                       ; Number of cargo canisters released when destroyed
   2++E248 C4 09                                    DW $09C4                     ; Ship's targetable area LoHi
   3++E24A D8 E2                                    DW ShuttleType9Edges         ; Edge Data
   4++E24C 78                                       DB ShuttleType9EdgesSize     ; Size of Edge Data
   5++E24D 00                                       DB $00                       ; Gun Vertex Byte offset
   6++E24E 26                                       DB $26                       ; Explosion Count
   7++E24F 13                                       DB ShuttleType9VertSize /6   ; Vertex Count /6
   8++E250 72                                       DB ShuttleType9VertSize      ; Vertex Count
   9++E251 1E                                       DB ShuttleType9EdgesCnt      ; Edges Count
  10++E252 00 00                                    DW $0000                     ; Bounty LoHi
  11++E254 34                                       DB ShuttleType9NormalsSize   ; Face (Normal) Count
  12++E255 16                                       DB $16                       ; Range when it turns to a dot
  13++E256 20                                       DB $20                       ; Energy Max
  14++E257 08                                       DB $08                       ; Speed Max
  15++E258 50 E3                                    DW ShuttleType9Normals       ; Normals
  16++E25A 02                                       DB $02                       ; Q scaling
  17++E25B 00                                       DB $00                       ; Laser power and Nbr Missiles
  18++E25C 66 E2                                    DW ShuttleType9Vertices      ; Verticles Address
  19++E25E 00           	                        DB ShipTypeNormal            ; Ship Type
  20++E25F 00                                       DB 0                         ; NewB Tactics
  21++E260 00                                       DB 0                         ; AI Flags
  22++E261 80                                       DB $80                       ; chance of ECM module
  23++E262 FF                                   DB $FF                              ; Supports Solid Fill = false
  24++E263 00 00                                DW $0000                            ; no solid data
  25++E265 00                                   DB $00                              ; no solid data
  26++E266
  27++E266
  28++E266
  29++E266 00 11 17 5F  ShuttleType9Vertices:	DB $00, $11, $17, $5F, $FF, $FF ; 01
  29++E26A FF FF
  30++E26C 11 00 17 9F                          DB $11, $00, $17, $9F, $FF, $FF ; 02
  30++E270 FF FF
  31++E272 00 12 17 1F                          DB $00, $12, $17, $1F, $FF, $FF ; 03
  31++E276 FF FF
  32++E278 12 00 17 1F                          DB $12, $00, $17, $1F, $FF, $FF ; 04
  32++E27C FF FF
  33++E27E 14 14 1B FF                          DB $14, $14, $1B, $FF, $12, $39 ; 05
  33++E282 12 39
  34++E284 14 14 1B BF                          DB $14, $14, $1B, $BF, $34, $59 ; 06
  34++E288 34 59
  35++E28A 14 14 1B 3F                          DB $14, $14, $1B, $3F, $56, $79 ; 07
  35++E28E 56 79
  36++E290 14 14 1B 7F                          DB $14, $14, $1B, $7F, $17, $89 ; 08
  36++E294 17 89
  37++E296 05 00 1B 30                          DB $05, $00, $1B, $30, $99, $99 ; 09
  37++E29A 99 99
  38++E29C 00 02 1B 70                          DB $00, $02, $1B, $70, $99, $99 ; 10
  38++E2A0 99 99
  39++E2A2 05 00 1B A9                          DB $05, $00, $1B, $A9, $99, $99 ; 11
  39++E2A6 99 99
  40++E2A8 00 03 1B 29                          DB $00, $03, $1B, $29, $99, $99 ; 12
  40++E2AC 99 99
  41++E2AE 00 09 23 50                          DB $00, $09, $23, $50, $0A, $BC ; 13
  41++E2B2 0A BC
  42++E2B4 03 01 1F 47                          DB $03, $01, $1F, $47, $FF, $02 ; 14
  42++E2B8 FF 02
  43++E2BA 04 0B 19 08                          DB $04, $0B, $19, $08, $01, $F4 ; 15
  43++E2BE 01 F4
  44++E2C0 0B 04 19 08                          DB $0B, $04, $19, $08, $A1, $3F ; 16
  44++E2C4 A1 3F
  45++E2C6 03 01 1F C7                          DB $03, $01, $1F, $C7, $6B, $23 ; 17
  45++E2CA 6B 23
  46++E2CC 03 0B 19 88                          DB $03, $0B, $19, $88, $F8, $C0 ; 18
  46++E2D0 F8 C0
  47++E2D2 0A 04 19 88                          DB $0A, $04, $19, $88, $4F, $18 ; 19
  47++E2D6 4F 18
  48++E2D8
  49++E2D8              ShuttleType9VertSize: equ $ - ShuttleType9Vertices
  50++E2D8
  51++E2D8
  52++E2D8
  53++E2D8 1F 02 00 04  ShuttleType9Edges:	DB $1F, $02, $00, $04
  54++E2DC 1F 4A 04 08  	DB $1F, $4A, $04, $08
  55++E2E0 1F 6B 08 0C  	DB $1F, $6B, $08, $0C
  56++E2E4 1F 8C 00 0C  	DB $1F, $8C, $00, $0C
  57++E2E8 1F 18 00 1C  	DB $1F, $18, $00, $1C
  58++E2EC 18 12 00 10  	DB $18, $12, $00, $10
  59++E2F0 1F 23 04 10  	DB $1F, $23, $04, $10
  60++E2F4 18 34 04 14  	DB $18, $34, $04, $14
  61++E2F8 1F 45 08 14  	DB $1F, $45, $08, $14
  62++E2FC 0C 56 08 18  	DB $0C, $56, $08, $18
  63++E300 1F 67 0C 18  	DB $1F, $67, $0C, $18
  64++E304 18 78 0C 1C  	DB $18, $78, $0C, $1C
  65++E308 1F 39 10 14  	DB $1F, $39, $10, $14
  66++E30C 1F 59 14 18  	DB $1F, $59, $14, $18
  67++E310 1F 79 18 1C  	DB $1F, $79, $18, $1C
  68++E314 1F 19 10 1C  	DB $1F, $19, $10, $1C
  69++E318 10 0C 00 30  	DB $10, $0C, $00, $30
  70++E31C 10 0A 04 30  	DB $10, $0A, $04, $30
  71++E320 10 AB 08 30  	DB $10, $AB, $08, $30
  72++E324 10 BC 0C 30  	DB $10, $BC, $0C, $30
  73++E328 10 99 20 24  	DB $10, $99, $20, $24
  74++E32C 07 99 24 28  	DB $07, $99, $24, $28
  75++E330 09 99 28 2C  	DB $09, $99, $28, $2C
  76++E334 07 99 20 2C  	DB $07, $99, $20, $2C
  77++E338 05 BB 34 38  	DB $05, $BB, $34, $38
  78++E33C 08 BB 38 3C  	DB $08, $BB, $38, $3C
  79++E340 07 BB 34 3C  	DB $07, $BB, $34, $3C
  80++E344 05 AA 40 44  	DB $05, $AA, $40, $44
  81++E348 08 AA 44 48  	DB $08, $AA, $44, $48
  82++E34C 07 AA 40 48  	DB $07, $AA, $40, $48
  83++E350              ShuttleType9EdgesSize: equ $ - ShuttleType9Edges
  84++E350              ShuttleType9EdgesCnt: equ ShuttleType9EdgesSize/4
  85++E350
  86++E350 DF 37 37 28  ShuttleType9Normals:	DB $DF, $37, $37, $28
  87++E354 5F 00 4A 04  	DB $5F, $00, $4A, $04
  88++E358 DF 33 33 17  	DB $DF, $33, $33, $17
  89++E35C 9F 4A 00 04  	DB $9F, $4A, $00, $04
  90++E360 9F 33 33 17  	DB $9F, $33, $33, $17
  91++E364 1F 00 4A 04  	DB $1F, $00, $4A, $04
  92++E368 1F 33 33 17  	DB $1F, $33, $33, $17
  93++E36C 1F 4A 00 04  	DB $1F, $4A, $00, $04
  94++E370 5F 33 33 17  	DB $5F, $33, $33, $17
  95++E374 3F 00 00 6B  	DB $3F, $00, $00, $6B
  96++E378 9F 29 29 5A  	DB $9F, $29, $29, $5A
  97++E37C 1F 29 29 5A  	DB $1F, $29, $29, $5A
  98++E380 5F 37 37 28  	DB $5F, $37, $37, $28
  99++E384
 100++E384
 101++E384              ShuttleType9NormalsSize: equ $ - ShuttleType9Normals
 102++E384              ShuttleType9Len: equ $ - ShuttleType9
 103++E384
# file closed: ./Data/ships/ShuttleType9.asm
  87+ E384                                      include "Data/ships/Shuttle_Mk_2.asm"
# file opened: ./Data/ships/Shuttle_Mk_2.asm
   1++E384 0F           Shuttle_Mk_2:	        DB $0F                         ; Number of cargo canisters released when destroyed
   2++E385 C4 09                                DW $09C4                       ; Ship's targetable area LoHi
   3++E387 09 E4                                DW Shuttle_Mk_2Edges           ; Edge Data
   4++E389 70                                   DB Shuttle_Mk_2EdgesSize       ; Size of Edge Data
   5++E38A 00                                   DB $00                         ; Gun Vertex Byte offset
   6++E38B 26                                   DB $26                         ; Explosion Count
   7++E38C 11                                   DB Shuttle_Mk_2VertSize /6     ; Vertex Count /6
   8++E38D 66                                   DB Shuttle_Mk_2VertSize        ; Vertex Count
   9++E38E 1C                                   DB Shuttle_Mk_2EdgesCnt        ; Edges Count
  10++E38F 00 00                                DW $0000                       ; Bounty LoHi
  11++E391 34                                   DB Shuttle_Mk_2NormalsSize     ; Face (Normal) Count
  12++E392 0A                                   DB $0A                         ; Range when it turns to a dot
  13++E393 20                                   DB $20                         ; Energy Max
  14++E394 09                                   DB $09                         ; Speed Max
  15++E395 79 E4                                DW Shuttle_Mk_2Normals         ; Normals
  16++E397 02                                   DB $02                         ; Q scaling
  17++E398 00                                   DB $00                         ; Laser power and Nbr Missiles
  18++E399 A3 E3                                DW Shuttle_Mk_2Vertices        ; Verticles Address
  19++E39B 00                                   DB ShipTypeNormal              ; Ship Type
  20++E39C 00                                   DB 0                           ; NewB Tactics
  21++E39D 00                                   DB 0                           ; AI Flags
  22++E39E 80                                   DB $80                         ; chance of ECM module
  23++E39F FF                                   DB $FF                              ; Supports Solid Fill = false
  24++E3A0 00 00                                DW $0000                            ; no solid data
  25++E3A2 00                                   DB $00                              ; no solid data
  26++E3A3
  27++E3A3
  28++E3A3
  29++E3A3 00 00 28 1F  Shuttle_Mk_2Vertices:	DB $00, $00, $28, $1F, $23, $01
  29++E3A7 23 01
  30++E3A9 00 14 1E 1F  	DB $00, $14, $1E, $1F, $34, $00
  30++E3AD 34 00
  31++E3AF 14 00 1E 9F  	DB $14, $00, $1E, $9F, $15, $00
  31++E3B3 15 00
  32++E3B5 00 14 1E 5F  	DB $00, $14, $1E, $5F, $26, $11
  32++E3B9 26 11
  33++E3BB 14 00 1E 1F  	DB $14, $00, $1E, $1F, $37, $22
  33++E3BF 37 22
  34++E3C1 14 14 14 9F  	DB $14, $14, $14, $9F, $58, $04
  34++E3C5 58 04
  35++E3C7 14 14 14 DF  	DB $14, $14, $14, $DF, $69, $15
  35++E3CB 69 15
  36++E3CD 14 14 14 5F  	DB $14, $14, $14, $5F, $7A, $26
  36++E3D1 7A 26
  37++E3D3 14 14 14 1F  	DB $14, $14, $14, $1F, $7B, $34
  37++E3D7 7B 34
  38++E3D9 00 14 28 3F  	DB $00, $14, $28, $3F, $BC, $48
  38++E3DD BC 48
  39++E3DF 14 00 28 BF  	DB $14, $00, $28, $BF, $9C, $58
  39++E3E3 9C 58
  40++E3E5 00 14 28 7F  	DB $00, $14, $28, $7F, $AC, $69
  40++E3E9 AC 69
  41++E3EB 14 00 28 3F  	DB $14, $00, $28, $3F, $BC, $7A
  41++E3EF BC 7A
  42++E3F1 04 04 28 AA  	DB $04, $04, $28, $AA, $CC, $CC
  42++E3F5 CC CC
  43++E3F7 04 04 28 EA  	DB $04, $04, $28, $EA, $CC, $CC
  43++E3FB CC CC
  44++E3FD 04 04 28 6A  	DB $04, $04, $28, $6A, $CC, $CC
  44++E401 CC CC
  45++E403 04 04 28 2A  	DB $04, $04, $28, $2A, $CC, $CC
  45++E407 CC CC
  46++E409
  47++E409              Shuttle_Mk_2VertSize: equ $ - Shuttle_Mk_2Vertices
  48++E409
  49++E409
  50++E409
  51++E409 1F 01 00 08  Shuttle_Mk_2Edges:	DB $1F, $01, $00, $08
  52++E40D 1F 12 00 0C  	DB $1F, $12, $00, $0C
  53++E411 1F 23 00 10  	DB $1F, $23, $00, $10
  54++E415 1F 30 00 04  	DB $1F, $30, $00, $04
  55++E419 1F 04 04 14  	DB $1F, $04, $04, $14
  56++E41D 1F 05 08 14  	DB $1F, $05, $08, $14
  57++E421 1F 15 08 18  	DB $1F, $15, $08, $18
  58++E425 1F 16 0C 18  	DB $1F, $16, $0C, $18
  59++E429 1F 26 0C 1C  	DB $1F, $26, $0C, $1C
  60++E42D 1F 27 10 1C  	DB $1F, $27, $10, $1C
  61++E431 1F 37 10 20  	DB $1F, $37, $10, $20
  62++E435 1F 34 04 20  	DB $1F, $34, $04, $20
  63++E439 1F 48 14 24  	DB $1F, $48, $14, $24
  64++E43D 1F 58 14 28  	DB $1F, $58, $14, $28
  65++E441 1F 59 18 28  	DB $1F, $59, $18, $28
  66++E445 1F 69 18 2C  	DB $1F, $69, $18, $2C
  67++E449 1F 6A 1C 2C  	DB $1F, $6A, $1C, $2C
  68++E44D 1F 7A 1C 30  	DB $1F, $7A, $1C, $30
  69++E451 1F 7B 20 30  	DB $1F, $7B, $20, $30
  70++E455 1F 4B 20 24  	DB $1F, $4B, $20, $24
  71++E459 1F 8C 24 28  	DB $1F, $8C, $24, $28
  72++E45D 1F 9C 28 2C  	DB $1F, $9C, $28, $2C
  73++E461 1F AC 2C 30  	DB $1F, $AC, $2C, $30
  74++E465 1F BC 30 24  	DB $1F, $BC, $30, $24
  75++E469 0A CC 34 38  	DB $0A, $CC, $34, $38
  76++E46D 0A CC 38 3C  	DB $0A, $CC, $38, $3C
  77++E471 0A CC 3C 40  	DB $0A, $CC, $3C, $40
  78++E475 0A CC 40 34  	DB $0A, $CC, $40, $34
  79++E479
  80++E479              Shuttle_Mk_2EdgesSize: equ $ - Shuttle_Mk_2Edges
  81++E479
  82++E479
  83++E479              Shuttle_Mk_2EdgesCnt: equ Shuttle_Mk_2EdgesSize/4
  84++E479
  85++E479
  86++E479 9F 27 27 4E  Shuttle_Mk_2Normals:	DB $9F, $27, $27, $4E
  87++E47D DF 27 27 4E  	DB $DF, $27, $27, $4E
  88++E481 5F 27 27 4E  	DB $5F, $27, $27, $4E
  89++E485 1F 27 27 4E  	DB $1F, $27, $27, $4E
  90++E489 1F 00 60 00  	DB $1F, $00, $60, $00
  91++E48D 9F 60 00 00  	DB $9F, $60, $00, $00
  92++E491 5F 00 60 00  	DB $5F, $00, $60, $00
  93++E495 1F 60 00 00  	DB $1F, $60, $00, $00
  94++E499 BF 42 42 16  	DB $BF, $42, $42, $16
  95++E49D FF 42 42 16  	DB $FF, $42, $42, $16
  96++E4A1 7F 42 42 16  	DB $7F, $42, $42, $16
  97++E4A5 3F 42 42 16  	DB $3F, $42, $42, $16
  98++E4A9 3F 00 00 60  	DB $3F, $00, $00, $60
  99++E4AD
 100++E4AD
 101++E4AD              Shuttle_Mk_2NormalsSize: equ $ - Shuttle_Mk_2Normals
 102++E4AD              Shuttle_Mk_2Len: equ $ - Shuttle_Mk_2
 103++E4AD
# file closed: ./Data/ships/Shuttle_Mk_2.asm
  88+ E4AD                                      include "Data/ships/Sidewinder.asm"
# file opened: ./Data/ships/Sidewinder.asm
   1++E4AD 00           Sidewinder:	            DB $00                      ; Number of cargo canisters released when destroyed
   2++E4AE 81 10                                DW $1081                    ; Ship's targetable area LoHi
   3++E4B0 08 E5                                DW SidewinderEdges          ; Edge Data
   4++E4B2 3C                                   DB SidewinderEdgesSize      ; Size of Edge Data
   5++E4B3 00                                   DB $00                      ; Gun Vertex Byte offset
   6++E4B4 1E                                   DB $1E                      ; Explosion Count
   7++E4B5 0A                                   DB SidewinderVertSize /6    ; Vertex Count /6
   8++E4B6 3C                                   DB SidewinderVertSize       ; Vertex Count
   9++E4B7 0F                                   DB SidewinderEdgesCnt       ; Edges Count
  10++E4B8 32 00                                DW $0032                    ; Bounty LoHi
  11++E4BA 1C                                   DB SidewinderNormalsSize    ; Face (Normal) Count
  12++E4BB 14                                   DB $14                      ; Range when it turns to a dot
  13++E4BC 46                                   DB $46                      ; Energy Max
  14++E4BD 25                                   DB $25                      ; Speed Max
  15++E4BE 44 E5                                DW SidewinderNormals        ; Normals
  16++E4C0 02                                   DB $02                      ; Q scaling
  17++E4C1 11                                   DB $10 | ShipMissiles1      ; Laser power and Nbr Missiles
  18++E4C2 CC E4                                DW SidewinderVertices       ; Verticles Address
  19++E4C4 00                                   DB ShipTypeNormal           ; Ship Type
  20++E4C5 00                                   DB 0                        ; NewB Tactics
  21++E4C6 80                                   DB ShipCanAnger             ; AI Flags
  22++E4C7 30                                   DB $30                      ; chance of ECM module
  23++E4C8 FF                                   DB $FF                              ; Supports Solid Fill = false
  24++E4C9 00 00                                DW $0000                            ; no solid data
  25++E4CB 00                                   DB $00                              ; no solid data
  26++E4CC
  27++E4CC
  28++E4CC 20 00 24 9F  SidewinderVertices:	DB $20, $00, $24, $9F, $10, $54
  28++E4D0 10 54
  29++E4D2 20 00 24 1F  	DB $20, $00, $24, $1F, $20, $65
  29++E4D6 20 65
  30++E4D8 40 00 1C 3F  	DB $40, $00, $1C, $3F, $32, $66
  30++E4DC 32 66
  31++E4DE 40 00 1C BF  	DB $40, $00, $1C, $BF, $31, $44
  31++E4E2 31 44
  32++E4E4 00 10 1C 3F  	DB $00, $10, $1C, $3F, $10, $32
  32++E4E8 10 32
  33++E4EA 00 10 1C 7F  	DB $00, $10, $1C, $7F, $43, $65
  33++E4EE 43 65
  34++E4F0 0C 06 1C AF  	DB $0C, $06, $1C, $AF, $33, $33
  34++E4F4 33 33
  35++E4F6 0C 06 1C 2F  	DB $0C, $06, $1C, $2F, $33, $33
  35++E4FA 33 33
  36++E4FC 0C 06 1C 6C  	DB $0C, $06, $1C, $6C, $33, $33
  36++E500 33 33
  37++E502 0C 06 1C EC  	DB $0C, $06, $1C, $EC, $33, $33
  37++E506 33 33
  38++E508
  39++E508
  40++E508              SidewinderVertSize: equ $ - SidewinderVertices
  41++E508
  42++E508
  43++E508
  44++E508 1F 50 00 04  SidewinderEdges:	DB $1F, $50, $00, $04
  45++E50C 1F 62 04 08  	DB $1F, $62, $04, $08
  46++E510 1F 20 04 10  	DB $1F, $20, $04, $10
  47++E514 1F 10 00 10  	DB $1F, $10, $00, $10
  48++E518 1F 41 00 0C  	DB $1F, $41, $00, $0C
  49++E51C 1F 31 0C 10  	DB $1F, $31, $0C, $10
  50++E520 1F 32 08 10  	DB $1F, $32, $08, $10
  51++E524 1F 43 0C 14  	DB $1F, $43, $0C, $14
  52++E528 1F 63 08 14  	DB $1F, $63, $08, $14
  53++E52C 1F 65 04 14  	DB $1F, $65, $04, $14
  54++E530 1F 54 00 14  	DB $1F, $54, $00, $14
  55++E534 0F 33 18 1C  	DB $0F, $33, $18, $1C
  56++E538 0C 33 1C 20  	DB $0C, $33, $1C, $20
  57++E53C 0C 33 18 24  	DB $0C, $33, $18, $24
  58++E540 0C 33 20 24  	DB $0C, $33, $20, $24
  59++E544
  60++E544              SidewinderEdgesSize: equ $ - SidewinderEdges
  61++E544
  62++E544
  63++E544              SidewinderEdgesCnt: equ SidewinderEdgesSize/4
  64++E544
  65++E544
  66++E544 1F 00 20 08  SidewinderNormals:	DB $1F, $00, $20, $08
  67++E548 9F 0C 2F 06  	DB $9F, $0C, $2F, $06
  68++E54C 1F 0C 2F 06  	DB $1F, $0C, $2F, $06
  69++E550 3F 00 00 70  	DB $3F, $00, $00, $70
  70++E554 DF 0C 2F 06  	DB $DF, $0C, $2F, $06
  71++E558 5F 00 20 08  	DB $5F, $00, $20, $08
  72++E55C 5F 0C 2F 06  	DB $5F, $0C, $2F, $06
  73++E560
  74++E560
  75++E560              SidewinderNormalsSize: equ $ - SidewinderNormals
  76++E560              SidewinderLen: equ $ - Sidewinder
  77++E560
# file closed: ./Data/ships/Sidewinder.asm
  89+ E560                                      include "Data/ships/Splinter.asm"
# file opened: ./Data/ships/Splinter.asm
   1++E560 B0           Splinter:	            DB $B0                      ; Number of cargo canisters released when destroyed
   2++E561 00 01                                DW $0100                    ; Ship's targetable area LoHi
   3++E563 97 E5                                DW SplinterEdges            ; Edge Data
   4++E565 18                                   DB SplinterEdgesSize        ; Size of Edge Data
   5++E566 00                                   DB $00                      ; Gun Vertex Byte offset
   6++E567 16                                   DB $16                      ; Explosion Count
   7++E568 04                                   DB SplinterVertSize /6      ; Vertex Count /6
   8++E569 18                                   DB SplinterVertSize         ; Vertex Count
   9++E56A 06                                   DB SplinterEdgesCnt         ; Edges Count
  10++E56B 00 00                                DW $0000                    ; Bounty LoHi
  11++E56D 10                                   DB SplinterNormalsSize      ; Face (Normal) Count
  12++E56E 08                                   DB $08                      ; Range when it turns to a dot
  13++E56F 14                                   DB $14                      ; Energy Max
  14++E570 0A                                   DB $0A                      ; Speed Max
  15++E571 AF E5                                DW SplinterNormals          ; Normals
  16++E573 05                                   DB $05                      ; Q scaling
  17++E574 00                                   DB $00                      ; Laser power and Nbr Missiles
  18++E575 7F E5                                DW SplinterVertices         ; Verticles Address
  19++E577 00                                   DB ShipTypeNormal           ; Ship Type
  20++E578 00                                   DB 0                        ; NewB Tactics
  21++E579 00                                   DB 0                        ; AI Flags
  22++E57A 00                                   DB $00                      ; chance of ECM module
  23++E57B FF                                   DB $FF                              ; Supports Solid Fill = false
  24++E57C 00 00                                DW $0000                            ; no solid data
  25++E57E 00                                   DB $00                              ; no solid data
  26++E57F
  27++E57F
  28++E57F 18 19 10 DF  SplinterVertices:	    DB $18, $19, $10, $DF, $12, $33
  28++E583 12 33
  29++E585 00 0C 0A 3F                          DB $00, $0C, $0A, $3F, $02, $33
  29++E589 02 33
  30++E58B 0B 06 02 5F                          DB $0B, $06, $02, $5F, $01, $33
  30++E58F 01 33
  31++E591 0C 2A 07 1F                          DB $0C, $2A, $07, $1F, $01, $22
  31++E595 01 22
  32++E597              SplinterVertSize:       equ $ - SplinterVertices
  33++E597 1F 23 00 04  SplinterEdges:	        DB $1F, $23, $00, $04
  34++E59B 1F 03 04 08                          DB $1F, $03, $04, $08
  35++E59F 1F 01 08 0C                          DB $1F, $01, $08, $0C
  36++E5A3 1F 12 0C 00                          DB $1F, $12, $0C, $00
  37++E5A7 1F 13 00 08                          DB $1F, $13, $00, $08
  38++E5AB 1F 02 0C 04                          DB $1F, $02, $0C, $04
  39++E5AF              SplinterEdgesSize:      equ $ - SplinterEdges
  40++E5AF              SplinterEdgesCnt:       equ SplinterEdgesSize/4
  41++E5AF 1F 23 00 04  SplinterNormals:	    DB $1F, $23, $00, $04
  42++E5B3 1F 03 04 08                          DB $1F, $03, $04, $08
  43++E5B7 1F 01 08 0C                          DB $1F, $01, $08, $0C
  44++E5BB 1F 12 0C 00                          DB $1F, $12, $0C, $00
  45++E5BF              SplinterNormalsSize:    equ $ - SplinterNormals
  46++E5BF              SplinterLen:            equ $ - Splinter
  47++E5BF
# file closed: ./Data/ships/Splinter.asm
  90+ E5BF                                      include "Data/ships/TestVector.asm"
# file opened: ./Data/ships/TestVector.asm
   1++E5BF 03           TestVector:             DB $03                      ; Number of cargo canisters released when destroyed
   2++E5C0 23 41                                DW $4123                    ; Ship's targetable area LoHi
   3++E5C2 08 E6                                DW TestVectorEdges          ; Edge Data
   4++E5C4 10                                   DB TestVectorEdgesSize      ; Size of Edge Data
   5++E5C5 54                                   DB $54                      ; Gun Vertex Byte offset
   6++E5C6 2A                                   DB $2A                      ; Explosion Count
   7++E5C7 07                                   DB TestVectorVertSize /6    ; Vertex Count /6
   8++E5C8 2A                                   DB TestVectorVertSize       ; Vertex Count
   9++E5C9 04                                   DB TestVectorEdgesCnt       ; Edges Count
  10++E5CA 00 00                                DW $0000                    ; Bounty LoHi
  11++E5CC 10                                   DB TestVectorNormalsSize    ; Face (Normal) Count
  12++E5CD 32                                   DB $32                      ; Range when it turns to a dot
  13++E5CE 96                                   DB $96                      ; Energy Max
  14++E5CF 1C                                   DB $1C                      ; Speed Max
  15++E5D0 18 E6                                DW TestVectorNormals        ; Normals
  16++E5D2 04                                   DB $04                      ; Q scaling
  17++E5D3 01                                   DB $01                      ; Laser power and Nbr Missiles
  18++E5D4 DE E5                                DW TestVectorVertices       ; Verticles Address
  19++E5D6 FE                                   DB ShipTypeDebug            ; Ship Type
  20++E5D7 00                                   DB 0                        ; NewB Tactics
  21++E5D8 00                                   DB 0                        ; AI Flags
  22++E5D9 00                                   DB $00                      ; chance of ECM module
  23++E5DA FF                                   DB $FF                              ; Supports Solid Fill = false
  24++E5DB 00 00                                DW $0000                            ; no solid data
  25++E5DD 00                                   DB $00                              ; no solid data
  26++E5DE
  27++E5DE
  28++E5DE 00 40 00 1F  TestVectorVertices	    DB $00,$40,$00,$1F,$00,$00
  28++E5E2 00 00
  29++E5E4 00 20 00 1F                          DB $00,$20,$00,$1F,$00,$00
  29++E5E8 00 00
  30++E5EA 40 00 00 1F                          DB $40,$00,$00,$1F,$01,$01
  30++E5EE 01 01
  31++E5F0 20 00 00 1F                          DB $20,$00,$00,$1F,$01,$01
  31++E5F4 01 01
  32++E5F6 00 00 40 1F                          DB $00,$00,$40,$1F,$02,$02
  32++E5FA 02 02
  33++E5FC 00 00 20 1F                          DB $00,$00,$20,$1F,$02,$02
  33++E600 02 02
  34++E602 00 00 00 1F                          DB $00,$00,$00,$1F,$03,$03
  34++E606 03 03
  35++E608              TestVectorVertSize      equ $  - TestVectorVertices
  36++E608 1F 00 00 04  TestVectorEdges		    DB $1F,$00,$00,$04
  37++E60C 1F 00 08 0C                          DB $1F,$00,$08,$0C
  38++E610 1F 00 10 14                          DB $1F,$00,$10,$14
  39++E614 1F 00 18 18                          DB $1F,$00,$18,$18
  40++E618              TestVectorEdgesSize     equ $  - TestVectorEdges
  41++E618              TestVectorEdgesCnt      equ TestVectorEdgesSize/4
  42++E618              ; start normals #0 = top f,$on,$ p,$at,$ o,$ C,$br,$ Mk III
  43++E618 1F 00 10 00  TestVectorNormals	    DB $1F,$00,$10,$00
  44++E61C 1F 10 00 00                          DB $1F,$10,$00,$00
  45++E620 1F 00 00 10                          DB $1F,$00,$00,$10
  46++E624 1F 00 00 10                          DB $1F,$00,$00,$10
  47++E628              TestVectorNormalsSize   equ $  - TestVectorNormals
  48++E628              TestVectorLen           equ $  - TestVector
  49++E628
# file closed: ./Data/ships/TestVector.asm
  91+ E628                                      include "Data/ships/Thargoid.asm"
# file opened: ./Data/ships/Thargoid.asm
   1++E628 00           Thargoid:	            DB $00                                                      ; Number of cargo canisters released when destroyed
   2++E629 49 26                                DW $2649                                                    ; Ship's targetable area LoHi
   3++E62B BF E6                                DW ThargoidEdges                                            ; Edge Data
   4++E62D 68                                   DB ThargoidEdgesSize                                        ; Size of Edge Data
   5++E62E 3C                                   DB $3C                                                      ; Gun Vertex Byte offset
   6++E62F 26                                   DB $26                                                      ; Explosion Count
   7++E630 14                                   DB ThargoidVertSize /6                                      ; Vertex Count /6
   8++E631 78                                   DB ThargoidVertSize                                         ; Vertex Count
   9++E632 1A                                   DB ThargoidEdgesCnt                                         ; Edges Count
  10++E633 F4 01                                DW $01F4                                                    ; Bounty LoHi
  11++E635 28                                   DB ThargoidNormalsSize                                      ; Face (Normal) Count
  12++E636 37                                   DB $37                                                      ; Range when it turns to a dot
  13++E637 F0                                   DB $F0                                                      ; Energy Max
  14++E638 27                                   DB $27                                                      ; Speed Max
  15++E639 27 E7                                DW ThargoidNormals                                          ; Normals
  16++E63B 02                                   DB $02                                                      ; Q scaling
  17++E63C 16                                   DB $16                                                      ; Laser power and Nbr Missiles
  18++E63D 47 E6                                DW ThargoidVertices                                         ; Verticles Address
  19++E63F 00                                   DB 0                                                        ; Ship Type
  20++E640 00                                   DB 0                                                        ; NewB Tactics
  21++E641 FC                                   DB ShipCanAnger | ShipFighterBaySize  | ShipFighterThargon  ; AI Flags
  22++E642 FF                                   DB $FF                                                      ; chance of ECM module
  23++E643 FF                                   DB $FF                              ; Supports Solid Fill = false
  24++E644 00 00                                DW $0000                            ; no solid data
  25++E646 00                                   DB $00                              ; no solid data
  26++E647
  27++E647
  28++E647 20 30 30 5F  ThargoidVertices:	    DB $20, $30, $30, $5F, $40, $88 ; 01
  28++E64B 40 88
  29++E64D 20 44 00 5F                          DB $20, $44, $00, $5F, $10, $44 ; 02
  29++E651 10 44
  30++E653 20 30 30 7F                          DB $20, $30, $30, $7F, $21, $44 ; 03
  30++E657 21 44
  31++E659 20 00 44 3F                          DB $20, $00, $44, $3F, $32, $44 ; 04
  31++E65D 32 44
  32++E65F 20 30 30 3F                          DB $20, $30, $30, $3F, $43, $55 ; 05
  32++E663 43 55
  33++E665 20 44 00 1F                          DB $20, $44, $00, $1F, $54, $66 ; 06
  33++E669 54 66
  34++E66B 20 30 30 1F                          DB $20, $30, $30, $1F, $64, $77 ; 07
  34++E66F 64 77
  35++E671 20 00 44 1F                          DB $20, $00, $44, $1F, $74, $88 ; 08
  35++E675 74 88
  36++E677 18 74 74 DF                          DB $18, $74, $74, $DF, $80, $99 ; 09
  36++E67B 80 99
  37++E67D 18 A4 00 DF                          DB $18, $A4, $00, $DF, $10, $99 ; 10
  37++E681 10 99
  38++E683 18 74 74 FF                          DB $18, $74, $74, $FF, $21, $99 ; 11
  38++E687 21 99
  39++E689 18 00 A4 BF                          DB $18, $00, $A4, $BF, $32, $99 ; 12
  39++E68D 32 99
  40++E68F 18 74 74 BF                          DB $18, $74, $74, $BF, $53, $99 ; 13
  40++E693 53 99
  41++E695 18 A4 00 9F                          DB $18, $A4, $00, $9F, $65, $99 ; 14
  41++E699 65 99
  42++E69B 18 74 74 9F                          DB $18, $74, $74, $9F, $76, $99 ; 15
  42++E69F 76 99
  43++E6A1 18 00 A4 9F                          DB $18, $00, $A4, $9F, $87, $99 ; 16
  43++E6A5 87 99
  44++E6A7 18 40 50 9E                          DB $18, $40, $50, $9E, $99, $99 ; 17
  44++E6AB 99 99
  45++E6AD 18 40 50 BE                          DB $18, $40, $50, $BE, $99, $99 ; 18
  45++E6B1 99 99
  46++E6B3 18 40 50 FE                          DB $18, $40, $50, $FE, $99, $99 ; 19
  46++E6B7 99 99
  47++E6B9 18 40 50 DE                          DB $18, $40, $50, $DE, $99, $99 ; 20
  47++E6BD 99 99
  48++E6BF
  49++E6BF              ThargoidVertSize: equ $ - ThargoidVertices
  50++E6BF
  51++E6BF
  52++E6BF
  53++E6BF 1F 84 00 1C  ThargoidEdges:	DB $1F, $84, $00, $1C           ;01
  54++E6C3 1F 40 00 04                  DB $1F, $40, $00, $04           ;02
  55++E6C7 1F 41 04 08                  DB $1F, $41, $04, $08           ;03
  56++E6CB 1F 42 08 0C                  DB $1F, $42, $08, $0C           ;04
  57++E6CF 1F 43 0C 10                  DB $1F, $43, $0C, $10           ;05
  58++E6D3 1F 54 10 14                  DB $1F, $54, $10, $14           ;06
  59++E6D7 1F 64 14 18                  DB $1F, $64, $14, $18           ;07
  60++E6DB 1F 74 18 1C                  DB $1F, $74, $18, $1C           ;08
  61++E6DF 1F 80 00 20                  DB $1F, $80, $00, $20           ;09
  62++E6E3 1F 10 04 24                  DB $1F, $10, $04, $24           ;10
  63++E6E7 1F 21 08 28                  DB $1F, $21, $08, $28           ;11
  64++E6EB 1F 32 0C 2C                  DB $1F, $32, $0C, $2C           ;12
  65++E6EF 1F 53 10 30                  DB $1F, $53, $10, $30           ;13
  66++E6F3 1F 65 14 34                  DB $1F, $65, $14, $34           ;14
  67++E6F7 1F 76 18 38                  DB $1F, $76, $18, $38           ;15
  68++E6FB 1F 87 1C 3C                  DB $1F, $87, $1C, $3C           ;16
  69++E6FF 1F 98 20 3C                  DB $1F, $98, $20, $3C           ;17
  70++E703 1F 90 20 24                  DB $1F, $90, $20, $24           ;18
  71++E707 1F 91 24 28                  DB $1F, $91, $24, $28
  72++E70B 1F 92 28 2C                  DB $1F, $92, $28, $2C
  73++E70F 1F 93 2C 30                  DB $1F, $93, $2C, $30
  74++E713 1F 95 30 34                  DB $1F, $95, $30, $34
  75++E717 1F 96 34 38                  DB $1F, $96, $34, $38
  76++E71B 1F 97 38 3C                  DB $1F, $97, $38, $3C
  77++E71F 1E 99 40 44                  DB $1E, $99, $40, $44
  78++E723 1E 99 48 4C                  DB $1E, $99, $48, $4C
  79++E727
  80++E727              ThargoidEdgesSize: equ $ - ThargoidEdges
  81++E727
  82++E727              ThargoidEdgesCnt: equ ThargoidEdgesSize/4
  83++E727
  84++E727 5F 67 3C 19  ThargoidNormals:	DB $5F, $67, $3C, $19
  85++E72B 7F 67 3C 19  	DB $7F, $67, $3C, $19
  86++E72F 7F 67 19 3C  	DB $7F, $67, $19, $3C
  87++E733 3F 67 19 3C  	DB $3F, $67, $19, $3C
  88++E737 1F 40 00 00  	DB $1F, $40, $00, $00
  89++E73B 3F 67 3C 19  	DB $3F, $67, $3C, $19
  90++E73F 1F 67 3C 19  	DB $1F, $67, $3C, $19
  91++E743 1F 67 19 3C  	DB $1F, $67, $19, $3C
  92++E747 5F 67 19 3C  	DB $5F, $67, $19, $3C
  93++E74B 9F 30 00 00  	DB $9F, $30, $00, $00
  94++E74F
  95++E74F
  96++E74F              ThargoidNormalsSize: equ $ - ThargoidNormals
  97++E74F              ThargoidLen: equ $ - Thargoid
  98++E74F
# file closed: ./Data/ships/Thargoid.asm
  92+ E74F                                      include "Data/ships/Thargon.asm"
# file opened: ./Data/ships/Thargon.asm
   1++E74F F0           Thargon:	            DB $F0                          ; Number of cargo canisters released when destroyed
   2++E750 40 06                                DW $0640                        ; Ship's targetable area LoHi
   3++E752 AA E7                                DW ThargonEdges                 ; Edge Data
   4++E754 3C                                   DB ThargonEdgesSize             ; Size of Edge Data
   5++E755 00                                   DB $00                          ; Gun Vertex Byte offset
   6++E756 12                                   DB $12                          ; Explosion Count
   7++E757 0A                                   DB ThargonVertSize /6           ; Vertex Count /6
   8++E758 3C                                   DB ThargonVertSize              ; Vertex Count
   9++E759 0F                                   DB ThargonEdgesCnt              ; Edges Count
  10++E75A 32 00                                DW $0032                        ; Bounty LoHi
  11++E75C 1C                                   DB ThargonNormalsSize           ; Face (Normal) Count
  12++E75D 14                                   DB $14                          ; Range when it turns to a dot
  13++E75E 14                                   DB $14                          ; Energy Max
  14++E75F 1E                                   DB $1E                          ; Speed Max
  15++E760 E6 E7                                DW ThargonNormals               ; Normals
  16++E762 02                                   DB $02                          ; Q scaling
  17++E763 10                                   DB $10                          ; Laser power and Nbr Missiles
  18++E764 6E E7                                DW ThargonVertices              ; Verticles Address
  19++E766 00                                   DB 0                            ; Ship Type
  20++E767 00                                   DB 0                            ; NewB Tactics
  21++E768 80                                   DB ShipCanAnger                 ; AI Flags
  22++E769 00                                   DB $00                          ; chance of ECM module
  23++E76A FF                                   DB $FF                              ; Supports Solid Fill = false
  24++E76B 00 00                                DW $0000                            ; no solid data
  25++E76D 00                                   DB $00                              ; no solid data
  26++E76E
  27++E76E
  28++E76E
  29++E76E 09 00 28 9F  ThargonVertices:	    DB $09, $00, $28, $9F, $01, $55
  29++E772 01 55
  30++E774 09 26 0C DF                          DB $09, $26, $0C, $DF, $01, $22
  30++E778 01 22
  31++E77A 09 18 20 FF                          DB $09, $18, $20, $FF, $02, $33
  31++E77E 02 33
  32++E780 09 18 20 BF                          DB $09, $18, $20, $BF, $03, $44
  32++E784 03 44
  33++E786 09 26 0C 9F                          DB $09, $26, $0C, $9F, $04, $55
  33++E78A 04 55
  34++E78C 09 00 08 3F                          DB $09, $00, $08, $3F, $15, $66
  34++E790 15 66
  35++E792 09 0A 0F 7F                          DB $09, $0A, $0F, $7F, $12, $66
  35++E796 12 66
  36++E798 09 06 1A 7F                          DB $09, $06, $1A, $7F, $23, $66
  36++E79C 23 66
  37++E79E 09 06 1A 3F                          DB $09, $06, $1A, $3F, $34, $66
  37++E7A2 34 66
  38++E7A4 09 0A 0F 3F                          DB $09, $0A, $0F, $3F, $45, $66
  38++E7A8 45 66
  39++E7AA
  40++E7AA              ThargonVertSize:        equ $ - ThargonVertices
  41++E7AA
  42++E7AA
  43++E7AA 1F 10 00 04  ThargonEdges:	        DB $1F, $10, $00, $04
  44++E7AE 1F 20 04 08                          DB $1F, $20, $04, $08
  45++E7B2 1F 30 08 0C                          DB $1F, $30, $08, $0C
  46++E7B6 1F 40 0C 10                          DB $1F, $40, $0C, $10
  47++E7BA 1F 50 00 10                          DB $1F, $50, $00, $10
  48++E7BE 1F 51 00 14                          DB $1F, $51, $00, $14
  49++E7C2 1F 21 04 18                          DB $1F, $21, $04, $18
  50++E7C6 1F 32 08 1C                          DB $1F, $32, $08, $1C
  51++E7CA 1F 43 0C 20                          DB $1F, $43, $0C, $20
  52++E7CE 1F 54 10 24                          DB $1F, $54, $10, $24
  53++E7D2 1F 61 14 18                          DB $1F, $61, $14, $18
  54++E7D6 1F 62 18 1C                          DB $1F, $62, $18, $1C
  55++E7DA 1F 63 1C 20                          DB $1F, $63, $1C, $20
  56++E7DE 1F 64 20 24                          DB $1F, $64, $20, $24
  57++E7E2 1F 65 24 14                          DB $1F, $65, $24, $14
  58++E7E6
  59++E7E6              ThargonEdgesSize:       equ $ - ThargonEdges
  60++E7E6
  61++E7E6
  62++E7E6              ThargonEdgesCnt:        equ ThargonEdgesSize/4
  63++E7E6
  64++E7E6
  65++E7E6 9F 24 00 00  ThargonNormals:	        DB $9F, $24, $00, $00
  66++E7EA 5F 14 05 07                          DB $5F, $14, $05, $07
  67++E7EE 7F 2E 2A 0E                          DB $7F, $2E, $2A, $0E
  68++E7F2 3F 24 00 68                          DB $3F, $24, $00, $68
  69++E7F6 3F 2E 2A 0E                          DB $3F, $2E, $2A, $0E
  70++E7FA 1F 14 05 07                          DB $1F, $14, $05, $07
  71++E7FE 1F 24 00 00                          DB $1F, $24, $00, $00
  72++E802
  73++E802
  74++E802              ThargonNormalsSize:     equ $ - ThargonNormals
  75++E802              ThargonLen:             equ $ - Thargon
  76++E802
# file closed: ./Data/ships/Thargon.asm
  93+ E802                                      include "Data/ships/TransportType10.asm"
# file opened: ./Data/ships/TransportType10.asm
   1++E802 00           TransportType10:	    DB $00                             ; Number of cargo canisters released when destroyed
   2++E803 C4 09                                DW $09C4                           ; Ship's targetable area LoHi
   3++E805 FF E8                                DW TransportType10Edges            ; Edge Data
   4++E807 B8                                   DB TransportType10EdgesSize        ; Size of Edge Data
   5++E808 30                                   DB $30                             ; Gun Vertex Byte offset
   6++E809 1A                                   DB $1A                             ; Explosion Count
   7++E80A 25                                   DB TransportType10VertSize /6      ; Vertex Count /6
   8++E80B DE                                   DB TransportType10VertSize         ; Vertex Count
   9++E80C 2E                                   DB TransportType10EdgesCnt         ; Edges Count
  10++E80D 00 00                                DW $0000                           ; Bounty LoHi
  11++E80F 38                                   DB TransportType10NormalsSize      ; Face (Normal) Count
  12++E810 10                                   DB $10                             ; Range when it turns to a dot
  13++E811 20                                   DB $20                             ; Energy Max
  14++E812 0A                                   DB $0A                             ; Speed Max
  15++E813 B7 E9                                DW TransportType10Normals          ; Normals
  16++E815 02                                   DB $02                             ; Q scaling
  17++E816 00                                   DB $00                             ; Laser power and Nbr Missiles
  18++E817 21 E8                                DW TransportType10Vertices         ; Verticles Address
  19++E819 00                                   DB ShipTypeNormal                  ; Ship Type
  20++E81A 00                                   DB 0                               ; NewB Tactics
  21++E81B 00                                   DB 0                               ; AI Flags
  22++E81C FF                                   DB $FF                             ; chance of ECM module
  23++E81D FF                                   DB $FF                              ; Supports Solid Fill = false
  24++E81E 00 00                                DW $0000                            ; no solid data
  25++E820 00                                   DB $00                              ; no solid data
  26++E821
  27++E821
  28++E821 00 0A 1A 3F  TransportType10Vertices:DB $00, $0A, $1A, $3F, $06, $77     ;01
  28++E825 06 77
  29++E827 19 04 1A BF                          DB $19, $04, $1A, $BF, $01, $77     ;02
  29++E82B 01 77
  30++E82D 1C 03 1A FF                          DB $1C, $03, $1A, $FF, $01, $22     ;03
  30++E831 01 22
  31++E833 19 08 1A FF                          DB $19, $08, $1A, $FF, $02, $33     ;04
  31++E837 02 33
  32++E839 1A 08 1A 7F                          DB $1A, $08, $1A, $7F, $03, $44     ;05
  32++E83D 03 44
  33++E83F 1D 03 1A 7F                          DB $1D, $03, $1A, $7F, $04, $55     ;06
  33++E843 04 55
  34++E845 1A 04 1A 3F                          DB $1A, $04, $1A, $3F, $05, $66     ;07
  34++E849 05 66
  35++E84B 00 06 0C 13                          DB $00, $06, $0C, $13, $FF, $FF     ;08
  35++E84F FF FF
  36++E851 1E 01 0C DF                          DB $1E, $01, $0C, $DF, $17, $89     ;09
  36++E855 17 89
  37++E857 21 08 0C DF                          DB $21, $08, $0C, $DF, $12, $39     ;10
  37++E85B 12 39
  38++E85D 21 08 0C 5F                          DB $21, $08, $0C, $5F, $34, $5A     ;11
  38++E861 34 5A
  39++E863 1E 01 0C 5F                          DB $1E, $01, $0C, $5F, $56, $AB     ;12
  39++E867 56 AB
  40++E869 0B 02 1E DF                          DB $0B, $02, $1E, $DF, $89, $CD     ;13
  40++E86D 89 CD
  41++E86F 0D 08 1E DF                          DB $0D, $08, $1E, $DF, $39, $DD     ;14
  41++E873 39 DD
  42++E875 0E 08 1E 5F                          DB $0E, $08, $1E, $5F, $3A, $DD     ;15
  42++E879 3A DD
  43++E87B 0B 02 1E 5F                          DB $0B, $02, $1E, $5F, $AB, $CD     ;16
  43++E87F AB CD
  44++E881 05 06 02 87                          DB $05, $06, $02, $87, $77, $77     ;17
  44++E885 77 77
  45++E887 12 03 02 87                          DB $12, $03, $02, $87, $77, $77     ;18
  45++E88B 77 77
  46++E88D 05 07 07 A7                          DB $05, $07, $07, $A7, $77, $77     ;19
  46++E891 77 77
  47++E893 12 04 07 A7                          DB $12, $04, $07, $A7, $77, $77     ;20
  47++E897 77 77
  48++E899 0B 06 0E A7                          DB $0B, $06, $0E, $A7, $77, $77     ;21
  48++E89D 77 77
  49++E89F 0B 05 07 A7                          DB $0B, $05, $07, $A7, $77, $77     ;22
  49++E8A3 77 77
  50++E8A5 05 07 0E 27                          DB $05, $07, $0E, $27, $66, $66     ;23
  50++E8A9 66 66
  51++E8AB 12 04 0E 27                          DB $12, $04, $0E, $27, $66, $66     ;24
  51++E8AF 66 66
  52++E8B1 0B 05 07 27                          DB $0B, $05, $07, $27, $66, $66     ;25
  52++E8B5 66 66
  53++E8B7 05 06 03 27                          DB $05, $06, $03, $27, $66, $66     ;26
  53++E8BB 66 66
  54++E8BD 12 03 03 27                          DB $12, $03, $03, $27, $66, $66     ;27
  54++E8C1 66 66
  55++E8C3 0B 04 08 07                          DB $0B, $04, $08, $07, $66, $66     ;28
  55++E8C7 66 66
  56++E8C9 0B 05 03 27                          DB $0B, $05, $03, $27, $66, $66     ;29
  56++E8CD 66 66
  57++E8CF 10 08 0D E6                          DB $10, $08, $0D, $E6, $33, $33     ;30
  57++E8D3 33 33
  58++E8D5 10 08 10 C6                          DB $10, $08, $10, $C6, $33, $33     ;31
  58++E8D9 33 33
  59++E8DB 11 08 0D 66                          DB $11, $08, $0D, $66, $33, $33     ;32
  59++E8DF 33 33
  60++E8E1 11 08 10 46                          DB $11, $08, $10, $46, $33, $33     ;33
  60++E8E5 33 33
  61++E8E7 0D 03 1A E8                          DB $0D, $03, $1A, $E8, $00, $00     ;34
  61++E8EB 00 00
  62++E8ED 0D 03 1A 68                          DB $0D, $03, $1A, $68, $00, $00     ;35
  62++E8F1 00 00
  63++E8F3 09 03 1A 25                          DB $09, $03, $1A, $25, $00, $00     ;36
  63++E8F7 00 00
  64++E8F9 08 03 1A A5                          DB $08, $03, $1A, $A5, $00, $00     ;37
  64++E8FD 00 00
  65++E8FF
  66++E8FF              TransportType10VertSize: equ $ - TransportType10Vertices
  67++E8FF
  68++E8FF
  69++E8FF
  70++E8FF 1F 07 00 04  TransportType10Edges:	DB $1F, $07, $00, $04               ;01
  71++E903 1F 01 04 08                          DB $1F, $01, $04, $08               ;02
  72++E907 1F 02 08 0C                          DB $1F, $02, $08, $0C               ;03
  73++E90B 1F 03 0C 10                          DB $1F, $03, $0C, $10               ;04
  74++E90F 1F 04 10 14                          DB $1F, $04, $10, $14               ;05
  75++E913 1F 05 14 18                          DB $1F, $05, $14, $18               ;06
  76++E917 1F 06 00 18                          DB $1F, $06, $00, $18               ;07
  77++E91B 10 67 00 1C                          DB $10, $67, $00, $1C               ;08
  78++E91F 1F 17 04 20                          DB $1F, $17, $04, $20               ;09
  79++E923 0B 12 08 24                          DB $0B, $12, $08, $24               ;10
  80++E927 1F 23 0C 24                          DB $1F, $23, $0C, $24               ;11
  81++E92B 1F 34 10 28                          DB $1F, $34, $10, $28               ;12
  82++E92F 0B 45 14 28                          DB $0B, $45, $14, $28               ;13
  83++E933 1F 56 18 2C                          DB $1F, $56, $18, $2C               ;14
  84++E937 11 78 1C 20                          DB $11, $78, $1C, $20               ;15
  85++E93B 11 19 20 24                          DB $11, $19, $20, $24               ;16
  86++E93F 11 5A 28 2C                          DB $11, $5A, $28, $2C               ;17
  87++E943 11 6B 1C 2C                          DB $11, $6B, $1C, $2C               ;18
  88++E947 13 BC 1C 3C                          DB $13, $BC, $1C, $3C               ;19
  89++E94B 13 8C 1C 30                          DB $13, $8C, $1C, $30               ;20
  90++E94F 10 89 20 30                          DB $10, $89, $20, $30               ;21
  91++E953 1F 39 24 34                          DB $1F, $39, $24, $34               ;22
  92++E957 1F 3A 28 38                          DB $1F, $3A, $28, $38               ;23
  93++E95B 10 AB 2C 3C                          DB $10, $AB, $2C, $3C               ;24
  94++E95F 1F 9D 30 34                          DB $1F, $9D, $30, $34               ;25
  95++E963 1F 3D 34 38                          DB $1F, $3D, $34, $38               ;26
  96++E967 1F AD 38 3C                          DB $1F, $AD, $38, $3C               ;27
  97++E96B 1F CD 30 3C                          DB $1F, $CD, $30, $3C               ;28
  98++E96F 07 77 40 44                          DB $07, $77, $40, $44               ;29
  99++E973 07 77 48 4C                          DB $07, $77, $48, $4C               ;30
 100++E977 07 77 4C 50                          DB $07, $77, $4C, $50               ;31
 101++E97B 07 77 48 50                          DB $07, $77, $48, $50               ;32
 102++E97F 07 77 50 54                          DB $07, $77, $50, $54               ;33
 103++E983 07 66 58 5C                          DB $07, $66, $58, $5C               ;34
 104++E987 07 66 5C 60                          DB $07, $66, $5C, $60               ;35
 105++E98B 07 66 60 58                          DB $07, $66, $60, $58               ;36
 106++E98F 07 66 64 68                          DB $07, $66, $64, $68               ;37
 107++E993 07 66 68 6C                          DB $07, $66, $68, $6C               ;38
 108++E997 07 66 64 6C                          DB $07, $66, $64, $6C               ;39
 109++E99B 07 66 6C 70                          DB $07, $66, $6C, $70               ;40
 110++E99F 06 33 74 78                          DB $06, $33, $74, $78               ;41
 111++E9A3 06 33 7C 80                          DB $06, $33, $7C, $80               ;42
 112++E9A7 08 00 84 88                          DB $08, $00, $84, $88               ;43
 113++E9AB 05 00 88 8C                          DB $05, $00, $88, $8C               ;44
 114++E9AF 05 00 8C 90                          DB $05, $00, $8C, $90               ;45
 115++E9B3 05 00 90 84                          DB $05, $00, $90, $84               ;46
 116++E9B7
 117++E9B7              TransportType10EdgesSize: equ $ - TransportType10Edges
 118++E9B7
 119++E9B7
 120++E9B7              TransportType10EdgesCnt: equ TransportType10EdgesSize/4
 121++E9B7
 122++E9B7
 123++E9B7 3F 00 00 67  TransportType10Normals:	DB $3F, $00, $00, $67               ;01
 124++E9BB BF 6F 30 07                          DB $BF, $6F, $30, $07               ;02
 125++E9BF FF 69 3F 15                          DB $FF, $69, $3F, $15               ;03
 126++E9C3 5F 00 22 00                          DB $5F, $00, $22, $00               ;04
 127++E9C7 7F 69 3F 15                          DB $7F, $69, $3F, $15               ;05
 128++E9CB 3F 6F 30 07                          DB $3F, $6F, $30, $07               ;06
 129++E9CF 1F 08 20 03                          DB $1F, $08, $20, $03               ;07
 130++E9D3 9F 08 20 03                          DB $9F, $08, $20, $03               ;08
 131++E9D7 93 08 22 0B                          DB $93, $08, $22, $0B               ;09
 132++E9DB 9F 4B 20 4F                          DB $9F, $4B, $20, $4F               ;10
 133++E9DF 1F 4B 20 4F                          DB $1F, $4B, $20, $4F               ;11
 134++E9E3 13 08 22 0B                          DB $13, $08, $22, $0B               ;12
 135++E9E7 1F 00 26 11                          DB $1F, $00, $26, $11               ;13
 136++E9EB 1F 00 00 79                          DB $1F, $00, $00, $79               ;14
 137++E9EF
 138++E9EF
 139++E9EF              TransportType10NormalsSize: equ $ - TransportType10Normals
 140++E9EF              TransportType10Len: equ $ - TransportType10
 141++E9EF
# file closed: ./Data/ships/TransportType10.asm
  94+ E9EF                                      include "Data/ships/Viper.asm"
# file opened: ./Data/ships/Viper.asm
   1++E9EF 00           Viper:                  DB $00                         ; Number of cargo canisters released when destroyed
   2++E9F0 F9 15                                DW $15F9                       ; Ship's targetable area LoHi
   3++E9F2 68 EA                                DW ViperEdges                  ; Edge Data
   4++E9F4 50                                   DB ViperEdgesSize              ; Size of Edge Data
   5++E9F5 00                                   DB $00                         ; Gun Vertex Byte offset
   6++E9F6 2A                                   DB $2A                         ; Explosion Count
   7++E9F7 0F                                   DB ViperVertSize /6            ; Vertex Count /6
   8++E9F8 5A                                   DB ViperVertSize               ; Vertex Count
   9++E9F9 14                                   DB ViperEdgesCnt               ; Edges Count
  10++E9FA 00 00                                DW $0000                       ; Bounty LoHi
  11++E9FC 1C                                   DB ViperNormalsSize            ; Face (Normal) Count
  12++E9FD 17                                   DB $17 ;$17 before                        ; Range when it turns to a dot
  13++E9FE 64                                   DB $64                         ; Energy Max
  14++E9FF 20                                   DB $20                         ; Speed Max
  15++EA00 B8 EA                                DW ViperNormals                ; Normals
  16++EA02 01                                   DB $01                         ; Q scaling
  17++EA03 11                                   DB $11                         ; Laser power and Nbr Missiles
  18++EA04 0E EA                                DW ViperVertices               ; Verticles Address
  19++EA06 00                                   DB ShipTypeNormal              ; Ship Type
  20++EA07 00                                   DB 0                           ; NewB Tactics
  21++EA08 80                                   DB ShipCanAnger                ; AI Flags
  22++EA09 FF                                   DB $FF                         ; chance of ECM module
  23++EA0A FF                                   DB $FF                              ; Supports Solid Fill = false
  24++EA0B 00 00                                DW $0000                            ; no solid data
  25++EA0D 00                                   DB $00                              ; no solid data
  26++EA0E
  27++EA0E
  28++EA0E 00 00 48 1F  ViperVertices:          DB $00, $00, $48, $1F, $21, $43
  28++EA12 21 43
  29++EA14 00 10 18 1E                          DB $00, $10, $18, $1E, $10, $22
  29++EA18 10 22
  30++EA1A 00 10 18 5E                          DB $00, $10, $18, $5E, $43, $55
  30++EA1E 43 55
  31++EA20 30 00 18 3F                          DB $30, $00, $18, $3F, $42, $66
  31++EA24 42 66
  32++EA26 30 00 18 BF                          DB $30, $00, $18, $BF, $31, $66
  32++EA2A 31 66
  33++EA2C 18 10 18 7E                          DB $18, $10, $18, $7E, $54, $66
  33++EA30 54 66
  34++EA32 18 10 18 FE                          DB $18, $10, $18, $FE, $35, $66
  34++EA36 35 66
  35++EA38 18 10 18 3F                          DB $18, $10, $18, $3F, $20, $66
  35++EA3C 20 66
  36++EA3E 18 10 18 BF                          DB $18, $10, $18, $BF, $10, $66
  36++EA42 10 66
  37++EA44 20 00 18 B3                          DB $20, $00, $18, $B3, $66, $66
  37++EA48 66 66
  38++EA4A 20 00 18 33                          DB $20, $00, $18, $33, $66, $66
  38++EA4E 66 66
  39++EA50 08 08 18 33                          DB $08, $08, $18, $33, $66, $66
  39++EA54 66 66
  40++EA56 08 08 18 B3                          DB $08, $08, $18, $B3, $66, $66
  40++EA5A 66 66
  41++EA5C 08 08 18 F2                          DB $08, $08, $18, $F2, $66, $66
  41++EA60 66 66
  42++EA62 08 08 18 72                          DB $08, $08, $18, $72, $66, $66
  42++EA66 66 66
  43++EA68              ViperVertSize           equ $  - ViperVertices
  44++EA68 1F 42 00 0C  ViperEdges:             DB $1F, $42, $00, $0C, $1E, $21, $00, $04
  44++EA6C 1E 21 00 04
  45++EA70 1E 43 00 08                          DB $1E, $43, $00, $08, $1F, $31, $00, $10
  45++EA74 1F 31 00 10
  46++EA78 1E 20 04 1C                          DB $1E, $20, $04, $1C, $1E, $10, $04, $20
  46++EA7C 1E 10 04 20
  47++EA80 1E 54 08 14                          DB $1E, $54, $08, $14, $1E, $53, $08, $18
  47++EA84 1E 53 08 18
  48++EA88 1F 60 1C 20                          DB $1F, $60, $1C, $20, $1E, $65, $14, $18
  48++EA8C 1E 65 14 18
  49++EA90 1F 61 10 20                          DB $1F, $61, $10, $20, $1E, $63, $10, $18
  49++EA94 1E 63 10 18
  50++EA98 1F 62 0C 1C                          DB $1F, $62, $0C, $1C, $1E, $46, $0C, $14
  50++EA9C 1E 46 0C 14
  51++EAA0 13 66 24 30                          DB $13, $66, $24, $30, $12, $66, $24, $34
  51++EAA4 12 66 24 34
  52++EAA8 13 66 28 2C                          DB $13, $66, $28, $2C, $12, $66, $28, $38
  52++EAAC 12 66 28 38
  53++EAB0 10 66 2C 38                          DB $10, $66, $2C, $38, $10, $66, $30, $34
  53++EAB4 10 66 30 34
  54++EAB8              ViperEdgesSize          equ $  - ViperEdges
  55++EAB8              ViperEdgesCnt           equ ViperEdgesSize/4
  56++EAB8 1F 00 20 00  ViperNormals            DB $1F, $00, $20, $00, $9F, $16, $21, $0B
  56++EABC 9F 16 21 0B
  57++EAC0 1F 16 21 0B                          DB $1F, $16, $21, $0B, $DF, $16, $21, $0B
  57++EAC4 DF 16 21 0B
  58++EAC8 5F 16 21 0B                          DB $5F, $16, $21, $0B, $5F, $00, $20, $00
  58++EACC 5F 00 20 00
  59++EAD0 3F 00 00 30                          DB $3F, $00, $00, $30
  60++EAD4              ViperNormalsSize        equ $  - ViperNormals
  61++EAD4              ViperLen                equ $  - Viper
  62++EAD4
# file closed: ./Data/ships/Viper.asm
  95+ EAD4                                      include "Data/ships/Worm.asm"
# file opened: ./Data/ships/Worm.asm
   1++EAD4 00           Worm:	                DB $00                      ; Number of cargo canisters released when destroyed
   2++EAD5 49 26                                DW $2649                    ; Ship's targetable area LoHi
   3++EAD7 2F EB                                DW WormEdges                ; Edge Data
   4++EAD9 40                                   DB WormEdgesSize            ; Size of Edge Data
   5++EADA 00                                   DB $00                      ; Gun Vertex Byte offset
   6++EADB 12                                   DB $12                      ; Explosion Count
   7++EADC 0A                                   DB WormVertSize /6          ; Vertex Count /6
   8++EADD 3C                                   DB WormVertSize             ; Vertex Count
   9++EADE 10                                   DB WormEdgesCnt             ; Edges Count
  10++EADF 00 00                                DW $0000                    ; Bounty LoHi
  11++EAE1 20                                   DB WormNormalsSize          ; Face (Normal) Count
  12++EAE2 13                                   DB $13                      ; Range when it turns to a dot
  13++EAE3 1E                                   DB $1E                      ; Energy Max
  14++EAE4 17                                   DB $17                      ; Speed Max
  15++EAE5 6F EB                                DW WormNormals              ; Normals
  16++EAE7 03                                   DB $03                      ; Q scaling
  17++EAE8 30                                   DB $30                      ; Laser power and Nbr Missiles
  18++EAE9 F3 EA                                DW WormVertices             ; Verticles Address
  19++EAEB 00                                   DB ShipTypeNormal           ; Ship Type
  20++EAEC 00                                   DB 0                        ; NewB Tactics
  21++EAED 80                                   DB ShipCanAnger             ; AI Flags
  22++EAEE B0                                   DB $B0                      ; chance of ECM module
  23++EAEF FF                                   DB $FF                              ; Supports Solid Fill = false
  24++EAF0 00 00                                DW $0000                            ; no solid data
  25++EAF2 00                                   DB $00                              ; no solid data
  26++EAF3
  27++EAF3 0A 0A 23 5F  WormVertices:	        DB $0A, $0A, $23, $5F, $02, $77
  27++EAF7 02 77
  28++EAF9 0A 0A 23 DF                          DB $0A, $0A, $23, $DF, $03, $77
  28++EAFD 03 77
  29++EAFF 05 06 0F 1F                          DB $05, $06, $0F, $1F, $01, $24
  29++EB03 01 24
  30++EB05 05 06 0F 9F                          DB $05, $06, $0F, $9F, $01, $35
  30++EB09 01 35
  31++EB0B 0F 0A 19 5F                          DB $0F, $0A, $19, $5F, $24, $77
  31++EB0F 24 77
  32++EB11 0F 0A 19 DF                          DB $0F, $0A, $19, $DF, $35, $77
  32++EB15 35 77
  33++EB17 1A 0A 19 7F                          DB $1A, $0A, $19, $7F, $46, $77
  33++EB1B 46 77
  34++EB1D 1A 0A 19 FF                          DB $1A, $0A, $19, $FF, $56, $77
  34++EB21 56 77
  35++EB23 08 0E 19 3F                          DB $08, $0E, $19, $3F, $14, $66
  35++EB27 14 66
  36++EB29 08 0E 19 BF                          DB $08, $0E, $19, $BF, $15, $66
  36++EB2D 15 66
  37++EB2F
  38++EB2F              WormVertSize: equ $ - WormVertices
  39++EB2F
  40++EB2F
  41++EB2F 1F 07 00 04  WormEdges:	            DB $1F, $07, $00, $04
  42++EB33 1F 37 04 14                          DB $1F, $37, $04, $14
  43++EB37 1F 57 14 1C                          DB $1F, $57, $14, $1C
  44++EB3B 1F 67 1C 18                          DB $1F, $67, $1C, $18
  45++EB3F 1F 47 18 10                          DB $1F, $47, $18, $10
  46++EB43 1F 27 10 00                          DB $1F, $27, $10, $00
  47++EB47 1F 02 00 08                          DB $1F, $02, $00, $08
  48++EB4B 1F 03 04 0C                          DB $1F, $03, $04, $0C
  49++EB4F 1F 24 10 08                          DB $1F, $24, $10, $08
  50++EB53 1F 35 14 0C                          DB $1F, $35, $14, $0C
  51++EB57 1F 14 08 20                          DB $1F, $14, $08, $20
  52++EB5B 1F 46 20 18                          DB $1F, $46, $20, $18
  53++EB5F 1F 15 0C 24                          DB $1F, $15, $0C, $24
  54++EB63 1F 56 24 1C                          DB $1F, $56, $24, $1C
  55++EB67 1F 01 08 0C                          DB $1F, $01, $08, $0C
  56++EB6B 1F 16 20 24                          DB $1F, $16, $20, $24
  57++EB6F
  58++EB6F              WormEdgesSize: equ $ - WormEdges
  59++EB6F
  60++EB6F
  61++EB6F              WormEdgesCnt: equ WormEdgesSize/4
  62++EB6F
  63++EB6F
  64++EB6F 1F 00 58 46  WormNormals:	        DB $1F, $00, $58, $46
  65++EB73 1F 00 45 0E                          DB $1F, $00, $45, $0E
  66++EB77 1F 46 42 23                          DB $1F, $46, $42, $23
  67++EB7B 9F 46 42 23                          DB $9F, $46, $42, $23
  68++EB7F 1F 40 31 0E                          DB $1F, $40, $31, $0E
  69++EB83 9F 40 31 0E                          DB $9F, $40, $31, $0E
  70++EB87 3F 00 00 C8                          DB $3F, $00, $00, $C8
  71++EB8B 5F 00 50 00                          DB $5F, $00, $50, $00
  72++EB8F
  73++EB8F
  74++EB8F              WormNormalsSize: equ $ - WormNormals
  75++EB8F              WormLen: equ $ - Worm
  76++EB8F
# file closed: ./Data/ships/Worm.asm
  96+ EB8F                                      include "Data/ships/Rattler.asm"
# file opened: ./Data/ships/Rattler.asm
   1++EB8F 02           Rattler:	            DB $02                       ; Number of cargo canisters released when destroyed
   2++EB90 70 17                                DW $1770                     ; Ship's targetable area LoHi
   3++EB92 08 EC                                DW RattlerEdges              ; Edge Data
   4++EB94 68                                   DB RattlerEdgesSize          ; Size of Edge Data
   5++EB95 00                                   DB $00                       ; Gun Vertex Byte offset
   6++EB96 2A                                   DB $2A                       ; Explosion Count
   7++EB97 0F                                   DB RattlerVertSize /6        ; Vertex Count /6
   8++EB98 5A                                   DB RattlerVertSize           ; Vertex Count
   9++EB99 1A                                   DB RattlerEdgesCnt           ; Edges Count
  10++EB9A 96 00                                DW $0096                     ; Bounty LoHi
  11++EB9C 34                                   DB RattlerNormalsSize        ; Face (Normal) Count
  12++EB9D 0A                                   DB $0A                       ; Range when it turns to a dot
  13++EB9E 71                                   DB $71                       ; Energy Max
  14++EB9F 1F                                   DB $1F                       ; Speed Max
  15++EBA0 70 EC                                DW RattlerNormals            ; Normals
  16++EBA2 01                                   DB $01                       ; Q scaling
  17++EBA3 22                                   DB $20 | ShipMissiles2       ; Laser power and Nbr Missiles
  18++EBA4 AE EB                                DW RattlerVertices           ; Verticles Address
  19++EBA6 00                                   DB ShipTypeNormal            ; Ship Type
  20++EBA7 00                                   DB 0                         ; NewB Tactics
  21++EBA8 80                                   DB ShipCanAnger              ; AI Flags
  22++EBA9 90                                   DB $90                       ; chance of ECM module
  23++EBAA FF                                   DB $FF                              ; Supports Solid Fill = false
  24++EBAB 00 00                                DW $0000                            ; no solid data
  25++EBAD 00                                   DB $00                              ; no solid data
  26++EBAE
  27++EBAE
  28++EBAE
  29++EBAE 00 00 3C 1F  RattlerVertices:	    DB $00, $00, $3C, $1F, $89, $23
  29++EBB2 89 23
  30++EBB4 28 00 28 1F                          DB $28, $00, $28, $1F, $9A, $34
  30++EBB8 9A 34
  31++EBBA 28 00 28 9F                          DB $28, $00, $28, $9F, $78, $12
  31++EBBE 78 12
  32++EBC0 3C 00 00 1F                          DB $3C, $00, $00, $1F, $AB, $45
  32++EBC4 AB 45
  33++EBC6 3C 00 00 9F                          DB $3C, $00, $00, $9F, $67, $01
  33++EBCA 67 01
  34++EBCC 46 00 28 3F                          DB $46, $00, $28, $3F, $CC, $5B
  34++EBD0 CC 5B
  35++EBD2 46 00 28 BF                          DB $46, $00, $28, $BF, $CC, $06
  35++EBD6 CC 06
  36++EBD8 00 14 28 3F                          DB $00, $14, $28, $3F, $FF, $FF
  36++EBDC FF FF
  37++EBDE 00 14 28 7F                          DB $00, $14, $28, $7F, $FF, $FF
  37++EBE2 FF FF
  38++EBE4 0A 06 28 AA                          DB $0A, $06, $28, $AA, $CC, $CC
  38++EBE8 CC CC
  39++EBEA 0A 06 28 EA                          DB $0A, $06, $28, $EA, $CC, $CC
  39++EBEE CC CC
  40++EBF0 14 00 28 AA                          DB $14, $00, $28, $AA, $CC, $CC
  40++EBF4 CC CC
  41++EBF6 0A 06 28 2A                          DB $0A, $06, $28, $2A, $CC, $CC
  41++EBFA CC CC
  42++EBFC 0A 06 28 6A                          DB $0A, $06, $28, $6A, $CC, $CC
  42++EC00 CC CC
  43++EC02 14 00 28 2A                          DB $14, $00, $28, $2A, $CC, $CC
  43++EC06 CC CC
  44++EC08
  45++EC08              RattlerVertSize: equ $ - RattlerVertices
  46++EC08
  47++EC08
  48++EC08 1F 06 10 18  RattlerEdges:	DB $1F, $06, $10, $18
  49++EC0C 1F 17 08 10  	DB $1F, $17, $08, $10
  50++EC10 1F 28 00 08  	DB $1F, $28, $00, $08
  51++EC14 1F 39 00 04  	DB $1F, $39, $00, $04
  52++EC18 1F 4A 04 0C  	DB $1F, $4A, $04, $0C
  53++EC1C 1F 5B 0C 14  	DB $1F, $5B, $0C, $14
  54++EC20 1F 0C 18 1C  	DB $1F, $0C, $18, $1C
  55++EC24 1F 6C 18 20  	DB $1F, $6C, $18, $20
  56++EC28 1F 01 10 1C  	DB $1F, $01, $10, $1C
  57++EC2C 1F 67 10 20  	DB $1F, $67, $10, $20
  58++EC30 1F 12 08 1C  	DB $1F, $12, $08, $1C
  59++EC34 1F 78 08 20  	DB $1F, $78, $08, $20
  60++EC38 1F 23 00 1C  	DB $1F, $23, $00, $1C
  61++EC3C 1F 89 00 20  	DB $1F, $89, $00, $20
  62++EC40 1F 34 04 1C  	DB $1F, $34, $04, $1C
  63++EC44 1F 9A 04 20  	DB $1F, $9A, $04, $20
  64++EC48 1F 45 0C 1C  	DB $1F, $45, $0C, $1C
  65++EC4C 1F AB 0C 20  	DB $1F, $AB, $0C, $20
  66++EC50 1F 5C 14 1C  	DB $1F, $5C, $14, $1C
  67++EC54 1F BC 14 20  	DB $1F, $BC, $14, $20
  68++EC58 0A CC 24 28  	DB $0A, $CC, $24, $28
  69++EC5C 0A CC 28 2C  	DB $0A, $CC, $28, $2C
  70++EC60 0A CC 2C 24  	DB $0A, $CC, $2C, $24
  71++EC64 0A CC 30 34  	DB $0A, $CC, $30, $34
  72++EC68 0A CC 34 38  	DB $0A, $CC, $34, $38
  73++EC6C 0A CC 38 30  	DB $0A, $CC, $38, $30
  74++EC70
  75++EC70              RattlerEdgesSize: equ $ - RattlerEdges
  76++EC70
  77++EC70
  78++EC70              RattlerEdgesCnt: equ RattlerEdgesSize/4
  79++EC70
  80++EC70
  81++EC70 9F 1A 5C 06  RattlerNormals:	DB $9F, $1A, $5C, $06
  82++EC74 9F 17 5C 0B  	DB $9F, $17, $5C, $0B
  83++EC78 9F 09 5D 12  	DB $9F, $09, $5D, $12
  84++EC7C 1F 09 5D 12  	DB $1F, $09, $5D, $12
  85++EC80 1F 17 5C 0B  	DB $1F, $17, $5C, $0B
  86++EC84 1F 1A 5C 06  	DB $1F, $1A, $5C, $06
  87++EC88 DF 1A 5C 06  	DB $DF, $1A, $5C, $06
  88++EC8C DF 17 5C 0B  	DB $DF, $17, $5C, $0B
  89++EC90 DF 09 5D 12  	DB $DF, $09, $5D, $12
  90++EC94 5F 09 5D 12  	DB $5F, $09, $5D, $12
  91++EC98 5F 17 5C 0B  	DB $5F, $17, $5C, $0B
  92++EC9C 5F 1A 5C 06  	DB $5F, $1A, $5C, $06
  93++ECA0 3F 00 00 60  	DB $3F, $00, $00, $60
  94++ECA4
  95++ECA4              RattlerNormalsSize: equ $ - RattlerNormals
  96++ECA4              RattlerLen: equ $ - Rattler
  97++ECA4
# file closed: ./Data/ships/Rattler.asm
  97+ ECA4
# file closed: ./Data/ShipModelMetaData3.asm
 883  ECA4              ;;Privisioned for more models ; Bank 69  ------------------------------------------------------------------------------------------------------------------------
 884  ECA4              ;;Privisioned for more models     SLOT    ShipModelsAddr
 885  ECA4              ;;Privisioned for more models     PAGE    BankShipModels4
 886  ECA4              ;;Privisioned for more models 	ORG     ShipModelsAddr, BankShipModels4
 887  ECA4                  DISPLAY "Bank ",BankShipModels3," - Bytes free ",/D, $2000 - ($-ShipModelsAddr), " - BankShipModels3"
 888  ECA4              ; Bank 60  ------------------------------------------------------------------------------------------------------------------------
 889  ECA4                                  SLOT    SpritemembankAddr
 890  ECA4                                  PAGE    BankSPRITE
 891  ECA4                                  ORG     SpritemembankAddr, BankSPRITE
 892  E000                                  INCLUDE "./Layer3Sprites/sprite_routines.asm"
# file opened: ./Layer3Sprites/sprite_routines.asm
   1+ E000
   2+ E000              galactic_cursor_sprite				equ	0                            ; 00
   3+ E000              galactic_cursor_sprite1				equ	galactic_cursor_sprite+1     ; 01
   4+ E000              galactic_cursor_sprite2				equ	galactic_cursor_sprite1+2    ; 02
   5+ E000                                                                                   ;
   6+ E000              galactic_hyper_sprite				equ	galactic_cursor_sprite2+1    ; 03
   7+ E000              ;galactic_hyper_sprite1				equ galactic_hyper_sprite+1      ;
   8+ E000              ;galactic_hyper_sprite2				equ	galactic_hyper_sprite1+1     ;
   9+ E000
  10+ E000              local_cursor_sprite					equ	galactic_hyper_sprite+1      ; 04
  11+ E000              local_cursor_sprite1				equ	local_cursor_sprite+1        ; 05
  12+ E000              local_cursor_sprite2				equ	local_cursor_sprite1+1       ; 06
  13+ E000
  14+ E000              local_hyper_sprite					equ	local_cursor_sprite2+1       ; 07
  15+ E000              local_hyper_sprite1					equ	local_hyper_sprite+1         ; 08
  16+ E000              local_hyper_sprite2					equ	local_hyper_sprite1+2        ; 09
  17+ E000
  18+ E000              reticlule_sprite1                   equ	local_hyper_sprite2+1        ; 10
  19+ E000              reticlule_sprite2                   equ	reticlule_sprite1+1          ; 11
  20+ E000              reticlule_sprite3                   equ	reticlule_sprite2+1          ; 12
  21+ E000              reticlule_sprite4                   equ reticlule_sprite3+1          ; 13
  22+ E000
  23+ E000              laser_sprite1                       equ	reticlule_sprite4+1          ; 14
  24+ E000              laser_sprite2                       equ	laser_sprite1    +1          ; 15
  25+ E000              laser_sprite3                       equ	laser_sprite2    +1          ; 16
  26+ E000              laser_sprite4                       equ laser_sprite3    +1          ; 17
  27+ E000              laser_sprite5                       equ	laser_sprite4    +1          ; 18
  28+ E000              laser_sprite6                       equ	laser_sprite5    +1          ; 19
  29+ E000              laser_sprite7                       equ	laser_sprite6    +1          ; 20
  30+ E000              laser_sprite8                       equ laser_sprite7    +1          ; 21
  31+ E000              laser_sprite9                       equ	laser_sprite8    +1          ; 22
  32+ E000              laser_sprite10                      equ	laser_sprite9    +1          ; 23
  33+ E000              laser_sprite11                      equ	laser_sprite10   +1          ; 24
  34+ E000              laser_sprite12                      equ laser_sprite11   +1          ; 25
  35+ E000              laser_sprite13                      equ	laser_sprite12   +1          ; 26
  36+ E000              laser_sprite14                      equ	laser_sprite13   +1          ; 27
  37+ E000              laser_sprite15                      equ	laser_sprite14   +1          ; 28
  38+ E000              laser_sprite16                      equ laser_sprite15   +1          ; 29
  39+ E000              compass_sun                         equ laser_sprite16   +1          ; 30
  40+ E000              compass_planet                      equ compass_sun      +1          ; 31
  41+ E000              compass_station                     equ compass_planet   +1          ; 31
  42+ E000              targetting_sprite1                  equ compass_station  +1          ; 32
  43+ E000              targetting_sprite2                  equ targetting_sprite1   +1      ; 33
  44+ E000              ECM_sprite                          equ targetting_sprite2   +1      ; 34
  45+ E000              missile_sprite1                     equ ECM_sprite       +1          ; 35
  46+ E000              missile_sprite2                     equ missile_sprite1  +1          ; 36
  47+ E000              missile_sprite3                     equ missile_sprite2  +1          ; 37
  48+ E000              missile_sprite4                     equ missile_sprite3  +1          ; 38
  49+ E000              suncompass_sprite1                  equ missile_sprite4  +1
  50+ E000              suncompass_sprite2                  equ suncompass_sprite1  +1
  51+ E000              suncompass_sprite3                  equ suncompass_sprite2  +1
  52+ E000              suncompass_sprite4                  equ suncompass_sprite3  +1
  53+ E000
  54+ E000              ; For the local chart the sprites are all reused from 0 onwards to display the star map.
  55+ E000              ; For galactic chart they are plot pixels so sprites are not needed
  56+ E000
  57+ E000              planetcompass_sprite1               equ suncompass_sprite4  +1
  58+ E000              planetcompass_sprite2               equ planetcompass_sprite1  +1
  59+ E000              planetcompass_sprite3               equ planetcompass_sprite2  +1
  60+ E000              planetcompass_sprite4               equ planetcompass_sprite3  +1
  61+ E000
  62+ E000              stationcompass_sprite1              equ planetcompass_sprite4  +1
  63+ E000              stationcompass_sprite2              equ stationcompass_sprite1  +1
  64+ E000              stationcompass_sprite3              equ stationcompass_sprite2  +1
  65+ E000              stationcompass_sprite4              equ stationcompass_sprite3  +1
  66+ E000              diagnostic_sprite                   equ stationcompass_sprite4  +1
  67+ E000
  68+ E000
  69+ E000              glactic_pattern_1					equ 0
  70+ E000              glactic_hyper_pattern_1             equ 2
  71+ E000              local_present_cursor                equ 4
  72+ E000              local_hyper_pattern                 equ 7
  73+ E000              reticule_pattern_1                  equ 10
  74+ E000              reticule_pattern_2                  equ 11
  75+ E000              laser_pattern_1                     equ 12
  76+ E000              laser_pattern_2                     equ 13
  77+ E000              laser_pattern_3                     equ 14
  78+ E000              laser_pattern_4                     equ 15
  79+ E000              laser_pattern_5                     equ 16
  80+ E000              compass_sun_infront                 equ 17
  81+ E000              compass_sun_behind                  equ 18
  82+ E000              compass_planet_infront              equ 19
  83+ E000              compass_planet_behind               equ 20
  84+ E000              compass_station_infront             equ 21
  85+ E000              compass_station_behind              equ 22
  86+ E000              targetting_pattern                  equ 23
  87+ E000              lock_pattern                        equ 24
  88+ E000              ecm_pattern                         equ 25
  89+ E000              missile_ready_pattern               equ 26
  90+ E000              missile_armed_pattern               equ 27
  91+ E000              missile_locked_pattern              equ 28
  92+ E000              compass_sun_pattern                 equ 29
  93+ E000              compass_planet_pattern              equ 30
  94+ E000              compass_station_pattern             equ 31
  95+ E000              compass_bottomright_pattern         equ 32
  96+ E000              mass_locked_pattern                 equ 33
  97+ E000              space_station_safe_zone_pattern     equ 34
  98+ E000              star_size_1                         equ 35
  99+ E000              star_size_2                         equ 36
 100+ E000              star_size_3                         equ 37
 101+ E000              star_size_4                         equ 38
 102+ E000              star_size_5                         equ 39
 103+ E000
 104+ E000              spritecursoroffset					equ 17
 105+ E000              spriteborderoffset                  equ 32
 106+ E000
 107+ E000              HideSprite:                 MACRO   spritenbr
 108+ E000 ~                                        nextreg		SPRITE_PORT_INDEX_REGISTER,spritenbr
 109+ E000 ~                                        nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 110+ E000                                          ENDM
 111+ E000
 112+ E000 00           spr_nextStar                DB 0                                        ; Next Star to allocate for local chart
 113+ E001
 114+ E001              ; " sprite_big BC = rowcol, D = sprite nbr , E= , pattern"
 115+ E001              sprite_big:
 116+ E001 7A           .SetAnchor:	                ld		a,d                                 ; a = sprite nbr, bug fix?
 117+ E002 F5                                       push	af									; save id for next few
 118+ E003 D5                                       push	de
 119+ E004 ED 92 34                                 nextreg	SPRITE_PORT_INDEX_REGISTER,a		; set up sprite id
 120+ E007              ; write out X position bits 1 to 8
 121+ E007 79                                       ld		a,c
 122+ E008 21 11 00                                 ld      hl,spritecursoroffset
 123+ E00B ED 31                                    add		hl,a                                ; hl = full x position
 124+ E00D 7D                                       ld		a,l
 125+ E00E ED 92 35                                 nextreg	SPRITE_PORT_ATTR0_REGISTER,a		; Set up lower x cc
 126+ E011              ; write out Y position bits 1 to 8
 127+ E011 EB                                       ex		de,hl								; de = full x position
 128+ E012 78                                       ld		a,b
 129+ E013 21 11 00                                 ld      hl,spritecursoroffset
 130+ E016 ED 31                                    add		hl,a
 131+ E018 7D                                       ld		a,l                                 ; hl = full y position
 132+ E019 ED 92 36                                 nextreg	SPRITE_PORT_ATTR1_REGISTER,a		; lower y coord on screen
 133+ E01C              ; write out MSB of X as its an anchor
 134+ E01C 7A                                       ld		a,d									; de = MSB of X (hl bit 0)
 135+ E01D ED 92 37                                 nextreg	SPRITE_PORT_ATTR2_REGISTER,a		; lower y
 136+ E020              ; write out sprite pattern
 137+ E020 D1                                       pop		de                                  ; de = pattern and sprite nbr
 138+ E021 7B                                       ld		a,e
 139+ E022 F6 C0                                    or		%11000000							;
 140+ E024 ED 92 38                                 nextreg	SPRITE_PORT_ATTR3_REGISTER,a		; visible 5 bytes pattern e
 141+ E027              ; write out msb of y in h must be bit 0 only
 142+ E027 3E 00                                    ld		a,%00000000							; big unified composite
 143+ E029 B4                                       or		h									; MSB Y
 144+ E02A ED 92 39                                 nextreg	SPRITE_PORT_ATTR4_REGISTER,a		; visible 5 bytes pattern e
 145+ E02D F1           .BigSprite1:                pop		af
 146+ E02E 3C                                       inc		a
 147+ E02F F5                                       push	af
 148+ E030 ED 92 34                                                       nextreg	SPRITE_PORT_INDEX_REGISTER,a
 149+ E033 3E 10                                    ld		a,16
 149+ E035 ED 92 35       nextreg   SPRITE_PORT_ATTR0_REGISTER,a	; lower x
 150+ E038 AF                                       xor 	a
 150+ E039 ED 92 36       nextreg   SPRITE_PORT_ATTR1_REGISTER,a	; lower y
 151+ E03C ED 92 37                                                       nextreg   SPRITE_PORT_ATTR2_REGISTER,a	; relative setup
 152+ E03F 3E C1                                    ld		a,%11000001
 152+ E041
 153+ E041 ED 92 38                                 nextreg		SPRITE_PORT_ATTR3_REGISTER,a					; relative and 4 bytes of data, pattern 1
 154+ E044 3E 41                                    ld		a,%01000001							; big unified composite
 155+ E046 ED 92 39                                 nextreg	SPRITE_PORT_ATTR4_REGISTER,a		; visible 5 bytes pattern e
 156+ E049 F1           .BigSprite2:                pop		af
 157+ E04A 3C                                       inc		a
 157+ E04B ED 92 34       nextreg   SPRITE_PORT_INDEX_REGISTER,a
 158+ E04E AF                                       xor		a
 158+ E04F ED 92 35       nextreg   SPRITE_PORT_ATTR0_REGISTER,a	; lower x
 159+ E052 3E 10                                    ld		a,16
 159+ E054 ED 92 36       nextreg   SPRITE_PORT_ATTR1_REGISTER,a	; lower y
 160+ E057 AF                                       xor		a
 160+ E058 ED 92 37       nextreg   SPRITE_PORT_ATTR2_REGISTER,a	; relative setup
 161+ E05B 3E C2                                    ld		a,%11000010
 161+ E05D ED 92 38       nextreg   SPRITE_PORT_ATTR3_REGISTER,a	; relative and 4 bytes of data, pattern 2
 162+ E060 3E 41                                    ld		a,%01000001
 162+ E062 ED 92 39       nextreg   SPRITE_PORT_ATTR4_REGISTER,a	; visible 5 bytes pattern e 					; big unified composite
 163+ E065 C9                                       ret
 164+ E066
 165+ E066              ; Creates a 32x32 sprite based on first sprite number and pattern, then goes:
 166+ E066              ;    Spr,   pattern     spr+1, pattern+1
 167+ E066              ;    Spr+1, pattern+2   spr+3, pattern+3
 168+ E066              ; " sprite_big BC = row, hl= col D = sprite nbr , E= , pattern"
 169+ E066              ; note, BC and HL must be in correct range else they will mess up other byte's attributes, not masked for speed
 170+ E066              ; note this is based on full screen sprites including writing to border
 171+ E066              ; Currently can not get realtive sprites to work so will brute force it.
 172+ E066 7B           sprite_4x4:                 ld      a,e                                                         ; prep upper 2 bits as we will
 173+ E067 F6 C0                                    or      %11000000                                                   ; Enable visible and 5th byte
 174+ E069 5F                                       ld      e,a                                                         ; a now holds value to use for anchor
 175+ E06A                                          ;break
 176+ E06A 7A           .SetAnchor:	                ld		a,d
 176+ E06B ED 92 34       nextreg   SPRITE_PORT_INDEX_REGISTER,a		; set up sprite id
 177+ E06E 7D                                       ld		a,l
 177+ E06F ED 92 35       nextreg   SPRITE_PORT_ATTR0_REGISTER,a		; Set up lower x cc
 178+ E072 79                                       ld      a,c
 178+ E073 ED 92 36       nextreg   SPRITE_PORT_ATTR1_REGISTER,a		; Set up lower y cc
 179+ E076 7C                                       ld      a,h
 179+ E077 ED 92 37       nextreg   SPRITE_PORT_ATTR2_REGISTER,a		; MSB of X position
 180+ E07A 7B                                       ld      a,e
 180+ E07B ED 92 38       nextreg	SPRITE_PORT_ATTR3_REGISTER,a		; visible 5 bytes pattern e
 181+ E07E 78                                       ld      a,b                                 ; get down MSB from b
 182+ E07F F6 20                                    or      %00100000
 182+ E081 ED 92 79       nextreg   SPRITE_PORT_MIRROR_ATTRIBUTE_4_WITH_INC,a		; its going to be a unified "Big sprite" to uses rotations & scaling from anchor
 183+ E084              ;-- now process unified sprites
 184+ E084              .TopRightRelative:         ; inc     d
 185+ E084                                         ; ld      a,d         : nextreg	SPRITE_PORT_INDEX_REGISTER,a		; set up sprite id + 1
 186+ E084 7D                                       ld      a,l
 186+ E085 C6 10          add a,16
 186+ E087 ED 92 35       nextreg	SPRITE_PORT_ATTR0_REGISTER,a		; Set up lower x cc
 187+ E08A 79                                       ld      a,c
 187+ E08B ED 92 36       nextreg	SPRITE_PORT_ATTR1_REGISTER,a		; Set up lower y cc
 188+ E08E 7C                                       ld      a,h
 188+ E08F ED 92 37       nextreg   SPRITE_PORT_ATTR2_REGISTER,a        ; clear MSB of X
 189+ E092 1C                                       inc     e
 190+ E093 7B                                       ld      a,e
 190+ E094 ED 92 38       nextreg	SPRITE_PORT_ATTR3_REGISTER,a		; visible, 5 bytes pattern is achor + 1
 191+ E097 3E 20                                    ld      a,%0100000
 191+ E099 ED 92 79       nextreg	SPRITE_PORT_MIRROR_ATTRIBUTE_4_WITH_INC,a        ; pattern is relative and relative pattern
 192+ E09C              .BottomLeftRelative:       ; inc     d
 193+ E09C                                         ; ld      a,d         : nextreg	SPRITE_PORT_INDEX_REGISTER,a		; set up sprite id + 1
 194+ E09C 7D                                       ld      a,l
 194+ E09D
 194+ E09D ED 92 35       nextreg	SPRITE_PORT_ATTR0_REGISTER,a		; Set up lower x cc
 195+ E0A0 79                                       ld      a,c
 195+ E0A1 C6 10          add a,16
 195+ E0A3 ED 92 36       nextreg	SPRITE_PORT_ATTR1_REGISTER,a		; Set up lower y cc
 196+ E0A6                                          ZeroA
 196+ E0A6 AF          >                        xor a
 196+ E0A7 ED 92 37       nextreg   SPRITE_PORT_ATTR2_REGISTER,a        ; clear MSB of X
 197+ E0AA 1C                                       inc     e
 198+ E0AB 7B                                       ld      a,e
 198+ E0AC ~             /*%1100010*/
 198+ E0AC ED 92 38       nextreg	SPRITE_PORT_ATTR3_REGISTER,a		; visible, 5 bytes pattern is achor + 2
 199+ E0AF 3E 20                                    ld      a,%0100000
 199+ E0B1 ED 92 79       nextreg	SPRITE_PORT_MIRROR_ATTRIBUTE_4_WITH_INC,a        ; pattern is relative and relative pattern
 200+ E0B4              ;.BottomRightRelative:      ; inc     d
 201+ E0B4              ;                           ; inc     e
 202+ E0B4              ;                           ; ld      a,d         : nextreg	SPRITE_PORT_INDEX_REGISTER,a		; set up sprite id + 1
 203+ E0B4              ;                            ld      a,16        : nextreg	SPRITE_PORT_ATTR0_REGISTER,a		; Set up lower x cc
 204+ E0B4              ;                            ld      a,16        : nextreg	SPRITE_PORT_ATTR1_REGISTER,a		; Set up lower y cc
 205+ E0B4              ;                            ZeroA               : nextreg   SPRITE_PORT_ATTR2_REGISTER,a        ; clear MSB of X
 206+ E0B4              ;                            ld      a,%1100011  : nextreg	SPRITE_PORT_ATTR3_REGISTER,a		; visible, 5 bytes pattern is achor + 3
 207+ E0B4              ;                            ld      a,%0100001  : nextreg	SPRITE_PORT_ATTR4_REGISTER,a        ; pattern is relative and relative pattern
 208+ E0B4              ;                            ld      a,e                                                         ; prep upper 2 bits as we will
 209+ E0B4              ;                            or      %11000000                                                   ; Enable visible and 5th byte
 210+ E0B4              ;                            ld      e,a                                                         ; a now holds value to use for anchor
 211+ E0B4              ;                            break
 212+ E0B4 7A           .BRAbs:	                    ld		a,d
 212+ E0B5 C6 03         add a,3
 212+ E0B7 ED 92 34       nextreg   SPRITE_PORT_INDEX_REGISTER,a		; set up sprite id
 213+ E0BA 7D                                       ld		a,l
 213+ E0BB C6 10         add a,16
 213+ E0BD
 213+ E0BD ED 92 35       nextreg   SPRITE_PORT_ATTR0_REGISTER,a		; Set up lower x cc
 214+ E0C0 79                                       ld      a,c
 214+ E0C1 C6 10         add a,16
 214+ E0C3
 214+ E0C3 ED 92 36       nextreg   SPRITE_PORT_ATTR1_REGISTER,a		; Set up lower y cc
 215+ E0C6 7C                                       ld      a,h
 215+ E0C7 ED 92 37       nextreg   SPRITE_PORT_ATTR2_REGISTER,a		; MSB of X position
 216+ E0CA 1C                                       inc     e
 217+ E0CB 7B                                       ld      a,e
 217+ E0CC ED 92 38       nextreg	SPRITE_PORT_ATTR3_REGISTER,a		; visible 5 bytes pattern e
 218+ E0CF 78                                       ld      a,b                                 ; get down MSB from b
 219+ E0D0 F6 20                                    or      %00100000
 219+ E0D2 ED 92 79       nextreg   SPRITE_PORT_MIRROR_ATTRIBUTE_4_WITH_INC,a
 220+ E0D5 C9                                       ret
 221+ E0D6
 222+ E0D6
 223+ E0D6              ; for a sinle sprite within 256x192 area
 224+ E0D6 7A           sprite_single:              ld		a,d                                 ; a = sprite nbr, bug fix?
 225+ E0D7 D5                                       push    de
 226+ E0D8 ED 92 34                                 nextreg	SPRITE_PORT_INDEX_REGISTER,a		; set up sprite id
 227+ E0DB              ; write out X position bits 1 to 8
 228+ E0DB 79                                       ld		a,c                                 ; a = column (c)
 229+ E0DC 21 20 00                                 ld      hl,spriteborderoffset
 230+ E0DF ED 31                                    add		hl,a                                ; hl = full x position
 231+ E0E1 EB                                       ex		de,hl								; de = full x position
 232+ E0E2 7B                                       ld		a,e
 233+ E0E3 ED 92 35                                 nextreg	SPRITE_PORT_ATTR0_REGISTER,a		; Set up lower x cc
 234+ E0E6              ; write out Y position bits 1 to 8
 235+ E0E6 78                                       ld		a,b                                 ; a = row
 236+ E0E7 21 20 00                                 ld      hl,spriteborderoffset
 237+ E0EA ED 31                                    add		hl,a
 238+ E0EC 7D                                       ld		a,l                                 ; hl = full y position
 239+ E0ED ED 92 36                                 nextreg	SPRITE_PORT_ATTR1_REGISTER,a		; lower y coord on screen
 240+ E0F0              ; write out MSB of X as its an anchor
 241+ E0F0 7A                                       ld		a,d									; de = MSB of X (hl bit 0)
 242+ E0F1 ED 92 37                                 nextreg	SPRITE_PORT_ATTR2_REGISTER,a		; lower y
 243+ E0F4              ; write out sprite pattern
 244+ E0F4 D1                                       pop     de
 245+ E0F5 7B                                       ld		a,e
 246+ E0F6 F6 80                                    or		%10000000							;
 247+ E0F8 ED 92 38                                 nextreg	SPRITE_PORT_ATTR3_REGISTER,a		; visible 5 bytes pattern e
 248+ E0FB              ; write out extended attribute
 249+ E0FB 3E 00                                    ld      a,%00000000                         ; its a single sprite
 250+ E0FD B4                                       or      h
 251+ E0FE ED 92 39                                 nextreg	SPRITE_PORT_ATTR4_REGISTER,a
 252+ E101 C9                                       ret
 253+ E102              ;-----------------------------------------------------------------------
 254+ E102              ; ">sprite_galactic_cursor BC = rowcol"
 255+ E102 16 00        sprite_galactic_cursor:     ld		d,galactic_cursor_sprite
 256+ E104 1E 00                                    ld		e,0
 257+ E106 78                                       ld		a,b
 258+ E107 C6 18                                    add		a,galactic_chart_y_offset
 259+ E109 47                                       ld		b,a
 260+ E10A CD 01 E0                                 call	sprite_big
 261+ E10D C9                                       ret
 262+ E10E              ;-----------------------------------------------------------------------
 263+ E10E              ; "> sprite_galactic_hyper_cursorBC = rowcol"
 264+ E10E 78           sprite_galactic_hyper_cursor:ld		a,b
 265+ E10F C6 04                                    add		a,galactic_chart_hyper_offset
 266+ E111 47                                       ld		b,a
 267+ E112 16 04                                    ld		d,galactic_hyper_sprite
 268+ E114 1E 03                                    ld		e,3
 269+ E116 CD D6 E0                                 call	sprite_single ; sprite_big:
 270+ E119 C9                                       ret
 271+ E11A              ;-----------------------------------------------------------------------
 272+ E11A              ; moves hyperspace cursor to target system x position
 273+ E11A 3E 04        sprite_ghc_move:            ld		a,galactic_hyper_sprite
 274+ E11C ED 92 34                                 nextreg	SPRITE_PORT_INDEX_REGISTER,a		; set up sprite id
 275+ E11F              ; write out X position bits 1 to 8
 276+ E11F 79                                       ld		a,c
 277+ E120 21 1C 00                                 ld      hl,galactic_chart_hyper_x_offset
 278+ E123 ED 31                                    add		hl,a                                ; hl = full x position
 279+ E125 7D                                       ld		a,l
 280+ E126 ED 92 35                                 nextreg	SPRITE_PORT_ATTR0_REGISTER,a		; Set up lower x cc
 281+ E129              ; write out Y position bits 1 to 8
 282+ E129 EB                                       ex		de,hl								; de = full x position
 283+ E12A CB 38                                    srl		b			    					; row is row / 2
 284+ E12C 78                                       ld      a,b
 285+ E12D 21 34 00                                 ld      hl,galactic_chart_hyper_y_offset
 286+ E130 ED 31                                    add		hl,a
 287+ E132 7D                                       ld		a,l                                 ; hl = full y position
 288+ E133 ED 92 36                                 nextreg	SPRITE_PORT_ATTR1_REGISTER,a		; lower y coord on screen
 289+ E136              ; write out MSB of X as its an anchor
 290+ E136 7A                                       ld		a,d									; de = MSB of X (hl bit 0)
 291+ E137 ED 92 37                                 nextreg	SPRITE_PORT_ATTR2_REGISTER,a		; lower y
 292+ E13A              ; write out msb of y in h must be bit 0 only
 293+ E13A 3E 00                                    ld		a,%00000000							; big unified composite
 294+ E13C B2                                       or		d									; MSB Y
 295+ E13D ED 92 39                                 nextreg	SPRITE_PORT_ATTR4_REGISTER,a		; visible 5 bytes pattern e
 296+ E140 C9                                       ret
 297+ E141              ;-----------------------------------------------------------------------
 298+ E141 3E 08        sprite_lhc_move:            ld		a,local_hyper_sprite
 299+ E143 ED 92 34                                 nextreg	SPRITE_PORT_INDEX_REGISTER,a		; set up sprite id
 300+ E146              ; write out X position bits 1 to 8
 301+ E146 79                                       ld		a,c
 302+ E147 21 11 00                                 ld      hl,spritecursoroffset
 303+ E14A ED 31                                    add		hl,a                                ; hl = full x position
 304+ E14C 7D                                       ld		a,l
 305+ E14D ED 92 35                                 nextreg	SPRITE_PORT_ATTR0_REGISTER,a		; Set up lower x cc
 306+ E150              ; write out Y position bits 1 to 8
 307+ E150 EB                                       ex		de,hl								; de = full x position
 308+ E151 78                                       ld		a,b
 309+ E152 21 11 00                                 ld      hl,spritecursoroffset
 310+ E155 ED 31                                    add		hl,a
 311+ E157 7D                                       ld		a,l                                 ; hl = full y position
 312+ E158 ED 92 36                                 nextreg	SPRITE_PORT_ATTR1_REGISTER,a		; lower y coord on screen
 313+ E15B              ; write out MSB of X as its an anchor
 314+ E15B 7A                                       ld		a,d									; de = MSB of X (hl bit 0)
 315+ E15C ED 92 37                                 nextreg	SPRITE_PORT_ATTR2_REGISTER,a		; lower y
 316+ E15F              ; write out msb of y in h must be bit 0 only
 317+ E15F 3E 00                                    ld		a,%00000000							; big unified composite
 318+ E161 B2                                       or		d									; MSB Y
 319+ E162 ED 92 39                                 nextreg	SPRITE_PORT_ATTR4_REGISTER,a		; visible 5 bytes pattern e
 320+ E165 C9                                       ret
 321+ E166              ;-----------------------------------------------------------------------
 322+ E166              ; "sprite_local_cursor BC = rowcol"
 323+ E166 16 05        sprite_local_cursor:        ld		d,local_cursor_sprite
 324+ E168 1E 04                                    ld		e,local_present_cursor
 325+ E16A CD 01 E0                                 call	sprite_big
 326+ E16D C9                                       ret
 327+ E16E              ;-----------------------------------------------------------------------
 328+ E16E              ; "sprite_local_hyper_cursor BC = rowcol"
 329+ E16E 16 08        sprite_local_hyper_cursor:  ld		d,local_hyper_sprite
 330+ E170 1E 07                                    ld		e,local_hyper_pattern
 331+ E172 CD 01 E0                                 call	sprite_big
 332+ E175 C9                                       ret
 333+ E176              ;-----------------------------------------------------------------------
 334+ E176              SunCompassTLX               equ 0
 335+ E176              PlanetCompassTLX            equ 0
 336+ E176              StationCompassTLX           equ 0
 337+ E176              SunCompassTLY               equ 10
 338+ E176              PlanetCompassTLY            equ 60
 339+ E176              StationCompassTLY           equ 110
 340+ E176              RadarCentreX                equ 128
 341+ E176              RadarCentreY                equ 171
 342+ E176
 343+ E176              compass_offset              equ 2
 344+ E176              ScannerX                    equ RadarCentreX
 345+ E176              ScannerY                    equ RadarCentreY
 346+ E176              SunScanCenterX              equ SunCompassTLX + 17
 347+ E176              SunScanCenterY              equ SunCompassTLY + 17
 348+ E176              PlanetScanCenterX           equ PlanetCompassTLX + 17
 349+ E176              PlanetScanCenterY           equ PlanetCompassTLY + 17
 350+ E176              StationScanCenterX          equ StationCompassTLX + 17
 351+ E176              StationScanCenterY          equ StationCompassTLY + 17
 352+ E176
 353+ E176              ;-----------------------------------------------------------------------
 354+ E176              ; ">sprite_galactic_cursor BC = rowcol"
 355+ E176                      DISPLAY "TODO : Compass positions, correct offsets for indicators, add in hide/show"
 356+ E176              ; " sprite_big BC = row, hl= col D = sprite nbr , E= , pattern"
 357+ E176 21 AD E1     sprite_sun_compass:         ld		hl,sunCompositeData
 358+ E179 06 04                                    ld      b,4
 359+ E17B 7E                                       ld      a,(hl)
 359+ E17C ED 92 34       nextreg   SPRITE_PORT_INDEX_REGISTER,a
 359+ E17F 23             inc hl
 360+ E180 7E           .Loop:                      ld      a,(hl)
 360+ E181 ED 92 35       nextreg   SPRITE_PORT_ATTR0_REGISTER,a
 360+ E184 23             inc hl
 361+ E185 7E                                       ld      a,(hl)
 361+ E186 ED 92 36       nextreg   SPRITE_PORT_ATTR1_REGISTER,a
 361+ E189 23             inc hl
 362+ E18A 7E                                       ld      a,(hl)
 362+ E18B ED 92 37       nextreg   SPRITE_PORT_ATTR2_REGISTER,a
 362+ E18E 23             inc hl
 363+ E18F 7E                                       ld      a,(hl)
 363+ E190 ED 92 38       nextreg   SPRITE_PORT_ATTR3_REGISTER,a
 363+ E193 23             inc hl
 364+ E194 7E                                       ld      a,(hl)
 364+ E195 ED 92 79       nextreg   SPRITE_PORT_MIRROR_ATTRIBUTE_4_WITH_INC,a
 364+ E198 23             inc hl
 365+ E199 10 E5                                    djnz    .Loop
 366+ E19B C9                                       ret
 367+ E19C 2A 00 0A 00  sunCompassData:             db      suncompass_sprite1, SunCompassTLX,     SunCompassTLY,      %00000000 , $80 | compass_sun_pattern
 367+ E1A0 9D
 368+ E1A1 11 0A 08 9D                              db                          SunCompassTLX +17, SunCompassTLY,      %00001000 , $80 | compass_sun_pattern
 369+ E1A5 00 1B 04 9D                              db                          SunCompassTLX,     SunCompassTLY + 17, %00000100 , $80 | compass_sun_pattern
 370+ E1A9 11 1B 0C 9D                              db                          SunCompassTLX +17, SunCompassTLY + 17, %00001100 , $80 | compass_sun_pattern
 371+ E1AD 2A 00 0A 00  sunCompositeData:           db      suncompass_sprite1, SunCompassTLX,     SunCompassTLY,      %00000000 , $81 | compass_sun_pattern , %00000000
 371+ E1B1 9D 00
 372+ E1B3 11 0A 08 81                              db                          SunCompassTLX +17, SunCompassTLY,      %00001000 , $81                       , %01000001
 372+ E1B7 41
 373+ E1B8 00 1B 04 81                              db                          SunCompassTLX,     SunCompassTLY + 17, %00000100 , $81                       , %01000001
 373+ E1BC 41
 374+ E1BD 11 1B 0C 81                              db                          SunCompassTLX +17, SunCompassTLY + 17, %00001100 , $81                       , %01000001
 374+ E1C1 41
 375+ E1C2
 376+ E1C2              ;-----------------------------------------------------------------------
 377+ E1C2 21 F9 E1     sprite_planet_compass:      ld		hl,planetCompositeData
 378+ E1C5 06 04                                    ld      b,4
 379+ E1C7 7E                                       ld      a,(hl)
 379+ E1C8 ED 92 34       nextreg   SPRITE_PORT_INDEX_REGISTER,a
 379+ E1CB 23             inc hl
 380+ E1CC 7E           .Loop:                      ld      a,(hl)
 380+ E1CD ED 92 35       nextreg   SPRITE_PORT_ATTR0_REGISTER,a
 380+ E1D0 23             inc hl
 381+ E1D1 7E                                       ld      a,(hl)
 381+ E1D2 ED 92 36       nextreg   SPRITE_PORT_ATTR1_REGISTER,a
 381+ E1D5 23             inc hl
 382+ E1D6 7E                                       ld      a,(hl)
 382+ E1D7 ED 92 37       nextreg   SPRITE_PORT_ATTR2_REGISTER,a
 382+ E1DA 23             inc hl
 383+ E1DB 7E                                       ld      a,(hl)
 383+ E1DC ED 92 38       nextreg   SPRITE_PORT_ATTR3_REGISTER,a
 383+ E1DF 23             inc hl
 384+ E1E0 7E                                       ld      a,(hl)
 384+ E1E1 ED 92 79       nextreg   SPRITE_PORT_MIRROR_ATTRIBUTE_4_WITH_INC,a
 384+ E1E4 23             inc hl
 385+ E1E5 10 E5                                    djnz    .Loop
 386+ E1E7 C9                                       ret
 387+ E1E8 2E 00 3C 00  planetCompassData:          db      planetcompass_sprite1, PlanetCompassTLX,     PlanetCompassTLY,      %00000000 , $80 | compass_planet_pattern
 387+ E1EC 9E
 388+ E1ED 11 3C 08 9E                              db                             PlanetCompassTLX +17, PlanetCompassTLY,      %00001000 , $80 | compass_planet_pattern
 389+ E1F1 00 4D 04 9E                              db                             PlanetCompassTLX,     PlanetCompassTLY + 17, %00000100 , $80 | compass_planet_pattern
 390+ E1F5 11 4D 0C 9E                              db                             PlanetCompassTLX +17, PlanetCompassTLY + 17, %00001100 , $80 | compass_planet_pattern
 391+ E1F9 2E 00 3C 00  planetCompositeData:        db      planetcompass_sprite1, PlanetCompassTLX,     PlanetCompassTLY,      %00000000 , $81 | compass_planet_pattern , %00000000
 391+ E1FD 9F 00
 392+ E1FF 11 3C 08 81                              db                             PlanetCompassTLX +17, PlanetCompassTLY,      %00001000 , $81                          , %01000001
 392+ E203 41
 393+ E204 00 4D 04 81                              db                             PlanetCompassTLX,     PlanetCompassTLY + 17, %00000100 , $81                          , %01000001
 393+ E208 41
 394+ E209 11 4D 0C 81                              db                             PlanetCompassTLX +17, PlanetCompassTLY + 17, %00001100 , $81                          , %01000001
 394+ E20D 41
 395+ E20E
 396+ E20E              ;-----------------------------------------------------------------------
 397+ E20E
 398+ E20E 21 45 E2     sprite_station_compass:     ld		hl,stationCompositeData
 399+ E211 06 04                                    ld      b,4
 400+ E213 7E                                       ld      a,(hl)
 400+ E214 ED 92 34       nextreg   SPRITE_PORT_INDEX_REGISTER,a
 400+ E217 23             inc hl
 401+ E218 7E           .Loop:                      ld      a,(hl)
 401+ E219 ED 92 35       nextreg   SPRITE_PORT_ATTR0_REGISTER,a
 401+ E21C 23             inc hl
 402+ E21D 7E                                       ld      a,(hl)
 402+ E21E ED 92 36       nextreg   SPRITE_PORT_ATTR1_REGISTER,a
 402+ E221 23             inc hl
 403+ E222 7E                                       ld      a,(hl)
 403+ E223 ED 92 37       nextreg   SPRITE_PORT_ATTR2_REGISTER,a
 403+ E226 23             inc hl
 404+ E227 7E                                       ld      a,(hl)
 404+ E228 ED 92 38       nextreg   SPRITE_PORT_ATTR3_REGISTER,a
 404+ E22B 23             inc hl
 405+ E22C 7E                                       ld      a,(hl)
 405+ E22D ED 92 79       nextreg   SPRITE_PORT_MIRROR_ATTRIBUTE_4_WITH_INC,a
 405+ E230 23             inc hl
 406+ E231 10 E5                                    djnz    .Loop
 407+ E233 C9                                       ret
 408+ E234 32 00 6E 00  stationCompassData:         db      stationcompass_sprite1, StationCompassTLX,     StationCompassTLY,      %00000000 , $80 | compass_station_pattern
 408+ E238 9F
 409+ E239 11 6E 08 9F                              db                              StationCompassTLX +17, StationCompassTLY,      %00001000 , $80 | compass_station_pattern
 410+ E23D 00 7F 04 9F                              db                              StationCompassTLX,     StationCompassTLY + 17, %00000100 , $80 | compass_station_pattern
 411+ E241 11 7F 0C 9F                              db                              StationCompassTLX +17, StationCompassTLY + 17, %00001100 , $80 | compass_station_pattern
 412+ E245 32 00 6E 00  stationCompositeData:       db      stationcompass_sprite1, StationCompassTLX,     StationCompassTLY,      %00000000 , $81 | compass_station_pattern , %00000000
 412+ E249 9F 00
 413+ E24B 11 6E 08 81                              db                              StationCompassTLX +17, StationCompassTLY,      %00001000 , $81                           , %01000001
 413+ E24F 41
 414+ E250 00 7F 04 81                              db                              StationCompassTLX,     StationCompassTLY + 17, %00000100 , $81                           , %01000001
 414+ E254 41
 415+ E255 11 7F 0C 81                              db                              StationCompassTLX +17, StationCompassTLY + 17, %00001100 , $81                           , %01000001
 415+ E259 41
 416+ E25A
 417+ E25A
 418+ E25A
 419+ E25A              ; Put on compas based on bc = Y X position offset from compass center
 420+ E25A 3E 20        compass_sun_move:       ld		a,compass_sun
 421+ E25C ED 92 34                             nextreg	SPRITE_PORT_INDEX_REGISTER,a		; set up sprite id
 422+ E25F              ; write out X position bits 1 to 8
 423+ E25F 3E 0F                                ld      a, SunScanCenterX - compass_offset ; adjust offset for effective centre of sprite
 424+ E261 81                                   add     a,c
 425+ E262                                      DISPLAY "TODO - Add min max on X and Y"
 426+ E262 ED 92 35                             nextreg	SPRITE_PORT_ATTR0_REGISTER,a		; Set up lower x cc
 427+ E265              ; write out Y position bits 1 to 8
 428+ E265 3E 19                                ld      a, SunScanCenterY - compass_offset ; adjust offset for effective centre of sprite
 429+ E267 90                                   sub     b
 430+ E268 ED 92 36                             nextreg	SPRITE_PORT_ATTR1_REGISTER,a		; lower y coord on screen
 431+ E26B C9                                   ret
 432+ E26C
 433+ E26C              ; Put on compas based on bc = Y X position offset from compass center
 434+ E26C 3E 21        compass_planet_move:    ld		a,compass_planet
 435+ E26E ED 92 34                             nextreg	SPRITE_PORT_INDEX_REGISTER,a		; set up sprite id
 436+ E271              ; write out X position bits 1 to 8
 437+ E271 3E 0F                                ld      a, PlanetScanCenterX - compass_offset ; adjust offset for effective centre of sprite
 438+ E273 81                                   add     a,c
 439+ E274 ED 92 35                             nextreg	SPRITE_PORT_ATTR0_REGISTER,a		; Set up lower x cc
 440+ E277              ; write out Y position bits 1 to 8
 441+ E277 3E 4B                                ld      a, PlanetScanCenterY - compass_offset ; adjust offset for effective centre of sprite
 442+ E279 90                                   sub     b
 443+ E27A ED 92 36                             nextreg	SPRITE_PORT_ATTR1_REGISTER,a		; lower y coord on screen
 444+ E27D C9                                   ret
 445+ E27E
 446+ E27E
 447+ E27E              ; Put on compas based on bc = Y X position offset from compass center
 448+ E27E 3E 22        compass_station_move:   ld		a,compass_station
 449+ E280 ED 92 34                             nextreg	SPRITE_PORT_INDEX_REGISTER,a		; set up sprite id
 450+ E283              ; write out X position bits 1 to 8
 451+ E283 3E 0F                                ld      a, StationScanCenterX - compass_offset ; adjust offset for effective centre of sprite
 452+ E285 81                                   add     a,c
 453+ E286 ED 92 35                             nextreg	SPRITE_PORT_ATTR0_REGISTER,a		; Set up lower x cc
 454+ E289              ; write out Y position bits 1 to 8
 455+ E289 3E 7D                                ld      a, StationScanCenterY - compass_offset ; adjust offset for effective centre of sprite
 456+ E28B 90                                   sub     b
 457+ E28C ED 92 36                             nextreg	SPRITE_PORT_ATTR1_REGISTER,a		; lower y coord on screen
 458+ E28F C9                                   ret
 459+ E290
 460+ E290              ReticuleCentreX         EQU (256/2)+32 -1
 461+ E290              ReticuleCentreY         EQU (192/2)+32 -1
 462+ E290              ReticuleOffset          EQU 8
 463+ E290
 464+ E290              TargetetingCentreX1     EQU ReticuleCentreX -32
 465+ E290              TargetetingCentreX2     EQU ReticuleCentreX +16
 466+ E290              TargetetingCentreY      EQU ReticuleCentreY -7
 467+ E290
 468+ E290              sprite_missile_x        EQU 2+32
 469+ E290              sprite_missile_y        EQU 192-8+32
 470+ E290
 471+ E290              sprite_ecm_x            EQU (6*8) +2 +32
 472+ E290              sprite_ecm_y            EQU 192-15+32
 473+ E290
 474+ E290 3E 25        sprite_ECM:             ld      a,ECM_sprite
 475+ E292 ED 92 34                             nextreg SPRITE_PORT_INDEX_REGISTER,a
 476+ E295 3E 52                                ld      a,sprite_ecm_x
 477+ E297 ED 92 35                             nextreg	SPRITE_PORT_ATTR0_REGISTER,a
 478+ E29A 3E D1                                ld		a,sprite_ecm_y
 479+ E29C ED 92 36                             nextreg	SPRITE_PORT_ATTR1_REGISTER,a		; lower y coord on screen
 480+ E29F 3E 99                                ld      a,ecm_pattern | %10000000
 481+ E2A1 ED 92 38                             nextreg	SPRITE_PORT_ATTR3_REGISTER,a		; visible 5 bytes pattern left reticule
 482+ E2A4 C9                                   ret
 483+ E2A5
 484+ E2A5 ED 92 34     sprite_missile_ready:   nextreg SPRITE_PORT_INDEX_REGISTER,a
 485+ E2A8 79                                   ld      a,c
 486+ E2A9 ED 92 35                             nextreg	SPRITE_PORT_ATTR0_REGISTER,a
 487+ E2AC 3E D8                                ld		a,sprite_missile_y
 488+ E2AE ED 92 36                             nextreg	SPRITE_PORT_ATTR1_REGISTER,a		; lower y coord on screen
 489+ E2B1 3E 9A                                ld      a,missile_ready_pattern | %10000000
 490+ E2B3 ED 92 38                             nextreg	SPRITE_PORT_ATTR3_REGISTER,a		; visible 5 bytes pattern left reticule
 491+ E2B6 C9                                   ret
 492+ E2B7
 493+ E2B7 3E 26        sprite_missile_1:       ld      a,missile_sprite1
 494+ E2B9 0E 22                                ld      c,sprite_missile_x
 495+ E2BB C3 A5 E2                             jp      sprite_missile_ready
 496+ E2BE
 497+ E2BE 3E 27        sprite_missile_2:       ld      a,missile_sprite2
 498+ E2C0 0E 31                                ld      c,sprite_missile_x+15
 499+ E2C2 C3 A5 E2                             jp      sprite_missile_ready
 500+ E2C5
 501+ E2C5 3E 28        sprite_missile_3:       ld      a,missile_sprite3
 502+ E2C7 0E 3B                                ld      c,sprite_missile_x+25
 503+ E2C9 C3 A5 E2                             jp      sprite_missile_ready
 504+ E2CC
 505+ E2CC 3E 29        sprite_missile_4:       ld      a,missile_sprite4
 506+ E2CE 0E 45                                ld      c,sprite_missile_x +35
 507+ E2D0 C3 A5 E2                             jp      sprite_missile_ready
 508+ E2D3
 509+ E2D3
 510+ E2D3
 511+ E2D3 3E 0C        sprite_reticule:        ld      a,reticlule_sprite1                 ; LEFT ARM
 512+ E2D5 ED 92 34                             nextreg SPRITE_PORT_INDEX_REGISTER,a        ; select left hand side
 513+ E2D8 3E 87                                ld      a,ReticuleCentreX -16 - ReticuleOffset
 514+ E2DA ED 92 35                             nextreg	SPRITE_PORT_ATTR0_REGISTER,a		; Set up lower x pos as 136 (104 + 32 border)
 515+ E2DD 3E 7F                                ld		a,ReticuleCentreY
 516+ E2DF ED 92 36                             nextreg	SPRITE_PORT_ATTR1_REGISTER,a		; lower y coord on screen
 517+ E2E2 AF                                   xor     a
 518+ E2E3 ED 92 37                             nextreg	SPRITE_PORT_ATTR2_REGISTER,a		; attribute 2
 519+ E2E6 3E 8B                                ld      a,reticule_pattern_2 | %10000000
 520+ E2E8 ED 92 38                             nextreg	SPRITE_PORT_ATTR3_REGISTER,a		; visible 5 bytes pattern left reticule
 521+ E2EB 3E 0D        .rightReticule          ld      a,reticlule_sprite2                 ; RIGHT ARM
 522+ E2ED ED 92 34                             nextreg SPRITE_PORT_INDEX_REGISTER,a        ; select left hand side
 523+ E2F0 3E A7                                ld      a,ReticuleCentreX + ReticuleOffset
 524+ E2F2 ED 92 35                             nextreg	SPRITE_PORT_ATTR0_REGISTER,a		; Set up lower x pos as 136 (104 + 32 border)
 525+ E2F5 3E 7F                                ld		a,ReticuleCentreY
 526+ E2F7 ED 92 36                             nextreg	SPRITE_PORT_ATTR1_REGISTER,a		; lower y coord on screen
 527+ E2FA 3E 08                                ld      a,%00001000
 528+ E2FC ED 92 37                             nextreg	SPRITE_PORT_ATTR2_REGISTER,a		; attribute 2 including mirroring horizontal
 529+ E2FF 3E 8B                                ld      a,reticule_pattern_2 | %10000000
 530+ E301 ED 92 38                             nextreg	SPRITE_PORT_ATTR3_REGISTER,a		; visible 5 bytes pattern left reticule
 531+ E304 3E 0E        .topReticule            ld      a,reticlule_sprite3
 532+ E306 ED 92 34                             nextreg SPRITE_PORT_INDEX_REGISTER,a        ; select left hand side
 533+ E309 3E 9F                                ld      a,ReticuleCentreX
 534+ E30B ED 92 35                             nextreg	SPRITE_PORT_ATTR0_REGISTER,a		; Set up lower x pos as 136 (104 + 32 border)
 535+ E30E 3E 67                                ld		a,ReticuleCentreY-16 - ReticuleOffset
 536+ E310 ED 92 36                             nextreg	SPRITE_PORT_ATTR1_REGISTER,a		; lower y coord on screen
 537+ E313 AF                                   xor     a
 538+ E314 ED 92 37                             nextreg	SPRITE_PORT_ATTR2_REGISTER,a		; attribute 2
 539+ E317 3E 8A                                ld      a,reticule_pattern_1 | %10000000
 540+ E319 ED 92 38                             nextreg	SPRITE_PORT_ATTR3_REGISTER,a		; visible 5 bytes pattern left reticule
 541+ E31C 3E 0F        .bottomReticule         ld      a,reticlule_sprite4
 542+ E31E ED 92 34                             nextreg SPRITE_PORT_INDEX_REGISTER,a        ; select left hand side
 543+ E321 3E 9F                                ld      a,ReticuleCentreX
 544+ E323 ED 92 35                             nextreg	SPRITE_PORT_ATTR0_REGISTER,a		; Set up lower x pos as 136 (104 + 32 border)
 545+ E326 3E 87                                ld		a,ReticuleCentreY + ReticuleOffset
 546+ E328 ED 92 36                             nextreg	SPRITE_PORT_ATTR1_REGISTER,a		; lower y coord on screen
 547+ E32B 3E 04                                ld      a,%00000100
 548+ E32D ED 92 37                             nextreg	SPRITE_PORT_ATTR2_REGISTER,a		; attribute 2 including mirroring vertical
 549+ E330 3E 8A                                ld      a,reticule_pattern_1 | %10000000
 550+ E332 ED 92 38                             nextreg	SPRITE_PORT_ATTR3_REGISTER,a		; visible 5 bytes pattern left reticule
 551+ E335 C9                                   ret
 552+ E336
 553+ E336              laserbasex              equ 6
 554+ E336              laserbasey              equ 14
 555+ E336
 556+ E336              ShowSprite              MACRO   spritenbr, patternnbr
 557+ E336 ~                                    ld      a, spritenbr
 558+ E336 ~                                    nextreg SPRITE_PORT_INDEX_REGISTER,a
 559+ E336 ~                                    ld      a,patternnbr | %10000000
 560+ E336 ~                                    nextreg	SPRITE_PORT_ATTR3_REGISTER,a
 561+ E336                                      ENDM
 562+ E336
 563+ E336              LeftLaser:              MACRO   xoffset, yoffset, spriteL, patternL
 564+ E336 ~                                    ld      a, spriteL
 565+ E336 ~                                    nextreg SPRITE_PORT_INDEX_REGISTER,a        ; select left hand side
 566+ E336 ~                                    ld      a,((laserbasex + xoffset) *8) + 32
 567+ E336 ~                                    nextreg	SPRITE_PORT_ATTR0_REGISTER,a		; Set up lower x pos as 136 (104 + 32 border)
 568+ E336 ~                                    ld		a,((laserbasey -yoffset) * 8) + 32 -1
 569+ E336 ~                                    nextreg	SPRITE_PORT_ATTR1_REGISTER,a		; lower y coord on screen
 570+ E336 ~                                    xor     a
 571+ E336 ~                                    nextreg	SPRITE_PORT_ATTR2_REGISTER,a		; attribute 2
 572+ E336 ~                                    ld      a, patternL | %00000000             ; hidden by default
 573+ E336 ~                                    nextreg	SPRITE_PORT_ATTR3_REGISTER,a
 574+ E336                                      ENDM
 575+ E336
 576+ E336              RightLaser:             MACRO   xoffset, yoffset, spriteL, patternL
 577+ E336 ~                                    ld      a, spriteL
 578+ E336 ~                                    nextreg SPRITE_PORT_INDEX_REGISTER,a        ; select left hand side
 579+ E336 ~                                    ld      a,(((30-laserbasex) - xoffset) *8) + 32 -2
 580+ E336 ~                                    nextreg	SPRITE_PORT_ATTR0_REGISTER,a		; Set up lower x pos as 136 (104 + 32 border)
 581+ E336 ~                                    ld		a,((laserbasey -yoffset) * 8) + 32 -1
 582+ E336 ~                                    nextreg	SPRITE_PORT_ATTR1_REGISTER,a		; lower y coord on screen
 583+ E336 ~                                    ld      a,%00001000
 584+ E336 ~                                    nextreg	SPRITE_PORT_ATTR2_REGISTER,a		; attribute 2
 585+ E336 ~                                    ld      a, patternL | %00000000             ; hidden by default
 586+ E336 ~                                    nextreg	SPRITE_PORT_ATTR3_REGISTER,a
 587+ E336                                      ENDM
 588+ E336
 589+ E336              show_ecm_sprite:        ShowSprite  ECM_sprite, ecm_pattern
 589+ E336 3E 25       >                        ld      a, ECM_sprite
 589+ E338 ED 92 34    >                        nextreg SPRITE_PORT_INDEX_REGISTER,a
 589+ E33B 3E 99       >                        ld      a,ecm_pattern | %10000000
 589+ E33D ED 92 38    >                        nextreg	SPRITE_PORT_ATTR3_REGISTER,a
 590+ E340 C9                                   ret
 591+ E341
 592+ E341              show_missile_1_ready:   ShowSprite  missile_sprite1, missile_ready_pattern
 592+ E341 3E 26       >                        ld      a, missile_sprite1
 592+ E343 ED 92 34    >                        nextreg SPRITE_PORT_INDEX_REGISTER,a
 592+ E346 3E 9A       >                        ld      a,missile_ready_pattern | %10000000
 592+ E348 ED 92 38    >                        nextreg	SPRITE_PORT_ATTR3_REGISTER,a
 593+ E34B C9                                   ret
 594+ E34C
 595+ E34C              show_missile_2_ready:   ShowSprite  missile_sprite2, missile_ready_pattern
 595+ E34C 3E 27       >                        ld      a, missile_sprite2
 595+ E34E ED 92 34    >                        nextreg SPRITE_PORT_INDEX_REGISTER,a
 595+ E351 3E 9A       >                        ld      a,missile_ready_pattern | %10000000
 595+ E353 ED 92 38    >                        nextreg	SPRITE_PORT_ATTR3_REGISTER,a
 596+ E356 C9                                   ret
 597+ E357
 598+ E357              show_missile_3_ready:   ShowSprite  missile_sprite3, missile_ready_pattern
 598+ E357 3E 28       >                        ld      a, missile_sprite3
 598+ E359 ED 92 34    >                        nextreg SPRITE_PORT_INDEX_REGISTER,a
 598+ E35C 3E 9A       >                        ld      a,missile_ready_pattern | %10000000
 598+ E35E ED 92 38    >                        nextreg	SPRITE_PORT_ATTR3_REGISTER,a
 599+ E361 C9                                   ret
 600+ E362
 601+ E362              show_missile_4_ready:   ShowSprite  missile_sprite4, missile_ready_pattern
 601+ E362 3E 29       >                        ld      a, missile_sprite4
 601+ E364 ED 92 34    >                        nextreg SPRITE_PORT_INDEX_REGISTER,a
 601+ E367 3E 9A       >                        ld      a,missile_ready_pattern | %10000000
 601+ E369 ED 92 38    >                        nextreg	SPRITE_PORT_ATTR3_REGISTER,a
 602+ E36C C9                                   ret
 603+ E36D
 604+ E36D              show_missile_1_armed:   ShowSprite  missile_sprite1, missile_armed_pattern
 604+ E36D 3E 26       >                        ld      a, missile_sprite1
 604+ E36F ED 92 34    >                        nextreg SPRITE_PORT_INDEX_REGISTER,a
 604+ E372 3E 9B       >                        ld      a,missile_armed_pattern | %10000000
 604+ E374 ED 92 38    >                        nextreg	SPRITE_PORT_ATTR3_REGISTER,a
 605+ E377 C9                                   ret
 606+ E378
 607+ E378              show_missile_1_locked:  ShowSprite  missile_sprite1, missile_locked_pattern
 607+ E378 3E 26       >                        ld      a, missile_sprite1
 607+ E37A ED 92 34    >                        nextreg SPRITE_PORT_INDEX_REGISTER,a
 607+ E37D 3E 9C       >                        ld      a,missile_locked_pattern | %10000000
 607+ E37F ED 92 38    >                        nextreg	SPRITE_PORT_ATTR3_REGISTER,a
 608+ E382 C9                                   ret
 609+ E383
 610+ E383
 611+ E383              show_compass_sun_infront:ShowSprite  compass_sun, compass_sun_infront
 611+ E383 3E 20       >                        ld      a, compass_sun
 611+ E385 ED 92 34    >                        nextreg SPRITE_PORT_INDEX_REGISTER,a
 611+ E388 3E 91       >                        ld      a,compass_sun_infront | %10000000
 611+ E38A ED 92 38    >                        nextreg	SPRITE_PORT_ATTR3_REGISTER,a
 612+ E38D C9                                    ret
 613+ E38E
 614+ E38E              show_compass_sun_behind: ShowSprite  compass_sun, compass_sun_behind
 614+ E38E 3E 20       >                        ld      a, compass_sun
 614+ E390 ED 92 34    >                        nextreg SPRITE_PORT_INDEX_REGISTER,a
 614+ E393 3E 92       >                        ld      a,compass_sun_behind | %10000000
 614+ E395 ED 92 38    >                        nextreg	SPRITE_PORT_ATTR3_REGISTER,a
 615+ E398 C9                                    ret
 616+ E399
 617+ E399              show_compass_station_infront: ShowSprite  compass_station, compass_station_infront
 617+ E399 3E 22       >                        ld      a, compass_station
 617+ E39B ED 92 34    >                        nextreg SPRITE_PORT_INDEX_REGISTER,a
 617+ E39E 3E 95       >                        ld      a,compass_station_infront | %10000000
 617+ E3A0 ED 92 38    >                        nextreg	SPRITE_PORT_ATTR3_REGISTER,a
 618+ E3A3 C9                                    ret
 619+ E3A4
 620+ E3A4              show_compass_station_behind:  ShowSprite  compass_station, compass_station_behind
 620+ E3A4 3E 22       >                        ld      a, compass_station
 620+ E3A6 ED 92 34    >                        nextreg SPRITE_PORT_INDEX_REGISTER,a
 620+ E3A9 3E 96       >                        ld      a,compass_station_behind | %10000000
 620+ E3AB ED 92 38    >                        nextreg	SPRITE_PORT_ATTR3_REGISTER,a
 621+ E3AE C9                                       ret
 622+ E3AF              show_compass_planet_infront: ShowSprite  compass_planet, compass_planet_infront
 622+ E3AF 3E 21       >                        ld      a, compass_planet
 622+ E3B1 ED 92 34    >                        nextreg SPRITE_PORT_INDEX_REGISTER,a
 622+ E3B4 3E 93       >                        ld      a,compass_planet_infront | %10000000
 622+ E3B6 ED 92 38    >                        nextreg	SPRITE_PORT_ATTR3_REGISTER,a
 623+ E3B9 C9                                    ret
 624+ E3BA
 625+ E3BA              show_compass_planet_behind:  ShowSprite  compass_planet, compass_planet_behind
 625+ E3BA 3E 21       >                        ld      a, compass_planet
 625+ E3BC ED 92 34    >                        nextreg SPRITE_PORT_INDEX_REGISTER,a
 625+ E3BF 3E 94       >                        ld      a,compass_planet_behind | %10000000
 625+ E3C1 ED 92 38    >                        nextreg	SPRITE_PORT_ATTR3_REGISTER,a
 626+ E3C4 C9                                       ret
 627+ E3C5              ;-----------------------------------------------------------------------
 628+ E3C5              show_sprite_sun_compass:    ShowSprite  suncompass_sprite1, compass_sun_pattern
 628+ E3C5 3E 2A       >                        ld      a, suncompass_sprite1
 628+ E3C7 ED 92 34    >                        nextreg SPRITE_PORT_INDEX_REGISTER,a
 628+ E3CA 3E 9D       >                        ld      a,compass_sun_pattern | %10000000
 628+ E3CC ED 92 38    >                        nextreg	SPRITE_PORT_ATTR3_REGISTER,a
 629+ E3CF                                          ShowSprite  suncompass_sprite2, compass_sun_pattern
 629+ E3CF 3E 2B       >                        ld      a, suncompass_sprite2
 629+ E3D1 ED 92 34    >                        nextreg SPRITE_PORT_INDEX_REGISTER,a
 629+ E3D4 3E 9D       >                        ld      a,compass_sun_pattern | %10000000
 629+ E3D6 ED 92 38    >                        nextreg	SPRITE_PORT_ATTR3_REGISTER,a
 630+ E3D9                                          ShowSprite  suncompass_sprite3, compass_sun_pattern
 630+ E3D9 3E 2C       >                        ld      a, suncompass_sprite3
 630+ E3DB ED 92 34    >                        nextreg SPRITE_PORT_INDEX_REGISTER,a
 630+ E3DE 3E 9D       >                        ld      a,compass_sun_pattern | %10000000
 630+ E3E0 ED 92 38    >                        nextreg	SPRITE_PORT_ATTR3_REGISTER,a
 631+ E3E3                                          ShowSprite  suncompass_sprite4, compass_sun_pattern
 631+ E3E3 3E 2D       >                        ld      a, suncompass_sprite4
 631+ E3E5 ED 92 34    >                        nextreg SPRITE_PORT_INDEX_REGISTER,a
 631+ E3E8 3E 9D       >                        ld      a,compass_sun_pattern | %10000000
 631+ E3EA ED 92 38    >                        nextreg	SPRITE_PORT_ATTR3_REGISTER,a
 632+ E3ED C9                                       ret
 633+ E3EE              ;-----------------------------------------------------------------------
 634+ E3EE              show_sprite_planet_compass: ShowSprite  planetcompass_sprite1, compass_planet_pattern
 634+ E3EE 3E 2E       >                        ld      a, planetcompass_sprite1
 634+ E3F0 ED 92 34    >                        nextreg SPRITE_PORT_INDEX_REGISTER,a
 634+ E3F3 3E 9E       >                        ld      a,compass_planet_pattern | %10000000
 634+ E3F5 ED 92 38    >                        nextreg	SPRITE_PORT_ATTR3_REGISTER,a
 635+ E3F8                                          ShowSprite  planetcompass_sprite2, compass_planet_pattern
 635+ E3F8 3E 2F       >                        ld      a, planetcompass_sprite2
 635+ E3FA ED 92 34    >                        nextreg SPRITE_PORT_INDEX_REGISTER,a
 635+ E3FD 3E 9E       >                        ld      a,compass_planet_pattern | %10000000
 635+ E3FF ED 92 38    >                        nextreg	SPRITE_PORT_ATTR3_REGISTER,a
 636+ E402                                          ShowSprite  planetcompass_sprite3, compass_planet_pattern
 636+ E402 3E 30       >                        ld      a, planetcompass_sprite3
 636+ E404 ED 92 34    >                        nextreg SPRITE_PORT_INDEX_REGISTER,a
 636+ E407 3E 9E       >                        ld      a,compass_planet_pattern | %10000000
 636+ E409 ED 92 38    >                        nextreg	SPRITE_PORT_ATTR3_REGISTER,a
 637+ E40C                                          ShowSprite  planetcompass_sprite4, compass_planet_pattern
 637+ E40C 3E 31       >                        ld      a, planetcompass_sprite4
 637+ E40E ED 92 34    >                        nextreg SPRITE_PORT_INDEX_REGISTER,a
 637+ E411 3E 9E       >                        ld      a,compass_planet_pattern | %10000000
 637+ E413 ED 92 38    >                        nextreg	SPRITE_PORT_ATTR3_REGISTER,a
 638+ E416 C9                                       ret
 639+ E417              ;-----------------------------------------------------------------------
 640+ E417              show_sprite_station_compass:ShowSprite  stationcompass_sprite1, compass_station_pattern
 640+ E417 3E 32       >                        ld      a, stationcompass_sprite1
 640+ E419 ED 92 34    >                        nextreg SPRITE_PORT_INDEX_REGISTER,a
 640+ E41C 3E 9F       >                        ld      a,compass_station_pattern | %10000000
 640+ E41E ED 92 38    >                        nextreg	SPRITE_PORT_ATTR3_REGISTER,a
 641+ E421                                          ShowSprite  stationcompass_sprite2, compass_station_pattern
 641+ E421 3E 33       >                        ld      a, stationcompass_sprite2
 641+ E423 ED 92 34    >                        nextreg SPRITE_PORT_INDEX_REGISTER,a
 641+ E426 3E 9F       >                        ld      a,compass_station_pattern | %10000000
 641+ E428 ED 92 38    >                        nextreg	SPRITE_PORT_ATTR3_REGISTER,a
 642+ E42B                                          ShowSprite  stationcompass_sprite3, compass_station_pattern
 642+ E42B 3E 34       >                        ld      a, stationcompass_sprite3
 642+ E42D ED 92 34    >                        nextreg SPRITE_PORT_INDEX_REGISTER,a
 642+ E430 3E 9F       >                        ld      a,compass_station_pattern | %10000000
 642+ E432 ED 92 38    >                        nextreg	SPRITE_PORT_ATTR3_REGISTER,a
 643+ E435                                          ShowSprite  stationcompass_sprite4, compass_station_pattern
 643+ E435 3E 35       >                        ld      a, stationcompass_sprite4
 643+ E437 ED 92 34    >                        nextreg SPRITE_PORT_INDEX_REGISTER,a
 643+ E43A 3E 9F       >                        ld      a,compass_station_pattern | %10000000
 643+ E43C ED 92 38    >                        nextreg	SPRITE_PORT_ATTR3_REGISTER,a
 644+ E43F C9                                       ret
 645+ E440              ;-----------------------------------------------------------------------
 646+ E440              ;-----------------------------------------------------------------------
 647+ E440
 648+ E440              sprite_laser:           LeftLaser  0,0,laser_sprite1 ,laser_pattern_1
 648+ E440 3E 10       >                        ld      a, laser_sprite1
 648+ E442 ED 92 34    >                        nextreg SPRITE_PORT_INDEX_REGISTER,a        ; select left hand side
 648+ E445 3E 50       >                        ld      a,((laserbasex + 0) *8) + 32
 648+ E447 ED 92 35    >                        nextreg	SPRITE_PORT_ATTR0_REGISTER,a		; Set up lower x pos as 136 (104 + 32 border)
 648+ E44A 3E 8F       >                        ld		a,((laserbasey -0) * 8) + 32 -1
 648+ E44C ED 92 36    >                        nextreg	SPRITE_PORT_ATTR1_REGISTER,a		; lower y coord on screen
 648+ E44F AF          >                        xor     a
 648+ E450 ED 92 37    >                        nextreg	SPRITE_PORT_ATTR2_REGISTER,a		; attribute 2
 648+ E453 3E 0C       >                        ld      a, laser_pattern_1 | %00000000             ; hidden by default
 648+ E455 ED 92 38    >                        nextreg	SPRITE_PORT_ATTR3_REGISTER,a
 649+ E458                                      LeftLaser  2,0,laser_sprite2 ,laser_pattern_2
 649+ E458 3E 11       >                        ld      a, laser_sprite2
 649+ E45A ED 92 34    >                        nextreg SPRITE_PORT_INDEX_REGISTER,a        ; select left hand side
 649+ E45D 3E 60       >                        ld      a,((laserbasex + 2) *8) + 32
 649+ E45F ED 92 35    >                        nextreg	SPRITE_PORT_ATTR0_REGISTER,a		; Set up lower x pos as 136 (104 + 32 border)
 649+ E462 3E 8F       >                        ld		a,((laserbasey -0) * 8) + 32 -1
 649+ E464 ED 92 36    >                        nextreg	SPRITE_PORT_ATTR1_REGISTER,a		; lower y coord on screen
 649+ E467 AF          >                        xor     a
 649+ E468 ED 92 37    >                        nextreg	SPRITE_PORT_ATTR2_REGISTER,a		; attribute 2
 649+ E46B 3E 0D       >                        ld      a, laser_pattern_2 | %00000000             ; hidden by default
 649+ E46D ED 92 38    >                        nextreg	SPRITE_PORT_ATTR3_REGISTER,a
 650+ E470                                      LeftLaser  4,1,laser_sprite3 ,laser_pattern_3
 650+ E470 3E 12       >                        ld      a, laser_sprite3
 650+ E472 ED 92 34    >                        nextreg SPRITE_PORT_INDEX_REGISTER,a        ; select left hand side
 650+ E475 3E 70       >                        ld      a,((laserbasex + 4) *8) + 32
 650+ E477 ED 92 35    >                        nextreg	SPRITE_PORT_ATTR0_REGISTER,a		; Set up lower x pos as 136 (104 + 32 border)
 650+ E47A 3E 87       >                        ld		a,((laserbasey -1) * 8) + 32 -1
 650+ E47C ED 92 36    >                        nextreg	SPRITE_PORT_ATTR1_REGISTER,a		; lower y coord on screen
 650+ E47F AF          >                        xor     a
 650+ E480 ED 92 37    >                        nextreg	SPRITE_PORT_ATTR2_REGISTER,a		; attribute 2
 650+ E483 3E 0E       >                        ld      a, laser_pattern_3 | %00000000             ; hidden by default
 650+ E485 ED 92 38    >                        nextreg	SPRITE_PORT_ATTR3_REGISTER,a
 651+ E488                                      LeftLaser  6,1,laser_sprite4 ,laser_pattern_4
 651+ E488 3E 13       >                        ld      a, laser_sprite4
 651+ E48A ED 92 34    >                        nextreg SPRITE_PORT_INDEX_REGISTER,a        ; select left hand side
 651+ E48D 3E 80       >                        ld      a,((laserbasex + 6) *8) + 32
 651+ E48F ED 92 35    >                        nextreg	SPRITE_PORT_ATTR0_REGISTER,a		; Set up lower x pos as 136 (104 + 32 border)
 651+ E492 3E 87       >                        ld		a,((laserbasey -1) * 8) + 32 -1
 651+ E494 ED 92 36    >                        nextreg	SPRITE_PORT_ATTR1_REGISTER,a		; lower y coord on screen
 651+ E497 AF          >                        xor     a
 651+ E498 ED 92 37    >                        nextreg	SPRITE_PORT_ATTR2_REGISTER,a		; attribute 2
 651+ E49B 3E 0F       >                        ld      a, laser_pattern_4 | %00000000             ; hidden by default
 651+ E49D ED 92 38    >                        nextreg	SPRITE_PORT_ATTR3_REGISTER,a
 652+ E4A0                                      LeftLaser  8,2,laser_sprite5 ,laser_pattern_5
 652+ E4A0 3E 14       >                        ld      a, laser_sprite5
 652+ E4A2 ED 92 34    >                        nextreg SPRITE_PORT_INDEX_REGISTER,a        ; select left hand side
 652+ E4A5 3E 90       >                        ld      a,((laserbasex + 8) *8) + 32
 652+ E4A7 ED 92 35    >                        nextreg	SPRITE_PORT_ATTR0_REGISTER,a		; Set up lower x pos as 136 (104 + 32 border)
 652+ E4AA 3E 7F       >                        ld		a,((laserbasey -2) * 8) + 32 -1
 652+ E4AC ED 92 36    >                        nextreg	SPRITE_PORT_ATTR1_REGISTER,a		; lower y coord on screen
 652+ E4AF AF          >                        xor     a
 652+ E4B0 ED 92 37    >                        nextreg	SPRITE_PORT_ATTR2_REGISTER,a		; attribute 2
 652+ E4B3 3E 10       >                        ld      a, laser_pattern_5 | %00000000             ; hidden by default
 652+ E4B5 ED 92 38    >                        nextreg	SPRITE_PORT_ATTR3_REGISTER,a
 653+ E4B8                                      RightLaser 0,0,laser_sprite9 ,laser_pattern_1
 653+ E4B8 3E 18       >                        ld      a, laser_sprite9
 653+ E4BA ED 92 34    >                        nextreg SPRITE_PORT_INDEX_REGISTER,a        ; select left hand side
 653+ E4BD 3E DE       >                        ld      a,(((30-laserbasex) - 0) *8) + 32 -2
 653+ E4BF ED 92 35    >                        nextreg	SPRITE_PORT_ATTR0_REGISTER,a		; Set up lower x pos as 136 (104 + 32 border)
 653+ E4C2 3E 8F       >                        ld		a,((laserbasey -0) * 8) + 32 -1
 653+ E4C4 ED 92 36    >                        nextreg	SPRITE_PORT_ATTR1_REGISTER,a		; lower y coord on screen
 653+ E4C7 3E 08       >                        ld      a,%00001000
 653+ E4C9 ED 92 37    >                        nextreg	SPRITE_PORT_ATTR2_REGISTER,a		; attribute 2
 653+ E4CC 3E 0C       >                        ld      a, laser_pattern_1 | %00000000             ; hidden by default
 653+ E4CE ED 92 38    >                        nextreg	SPRITE_PORT_ATTR3_REGISTER,a
 654+ E4D1                                      RightLaser 2,0,laser_sprite10,laser_pattern_2
 654+ E4D1 3E 19       >                        ld      a, laser_sprite10
 654+ E4D3 ED 92 34    >                        nextreg SPRITE_PORT_INDEX_REGISTER,a        ; select left hand side
 654+ E4D6 3E CE       >                        ld      a,(((30-laserbasex) - 2) *8) + 32 -2
 654+ E4D8 ED 92 35    >                        nextreg	SPRITE_PORT_ATTR0_REGISTER,a		; Set up lower x pos as 136 (104 + 32 border)
 654+ E4DB 3E 8F       >                        ld		a,((laserbasey -0) * 8) + 32 -1
 654+ E4DD ED 92 36    >                        nextreg	SPRITE_PORT_ATTR1_REGISTER,a		; lower y coord on screen
 654+ E4E0 3E 08       >                        ld      a,%00001000
 654+ E4E2 ED 92 37    >                        nextreg	SPRITE_PORT_ATTR2_REGISTER,a		; attribute 2
 654+ E4E5 3E 0D       >                        ld      a, laser_pattern_2 | %00000000             ; hidden by default
 654+ E4E7 ED 92 38    >                        nextreg	SPRITE_PORT_ATTR3_REGISTER,a
 655+ E4EA                                      RightLaser 4,1,laser_sprite11,laser_pattern_3
 655+ E4EA 3E 1A       >                        ld      a, laser_sprite11
 655+ E4EC ED 92 34    >                        nextreg SPRITE_PORT_INDEX_REGISTER,a        ; select left hand side
 655+ E4EF 3E BE       >                        ld      a,(((30-laserbasex) - 4) *8) + 32 -2
 655+ E4F1 ED 92 35    >                        nextreg	SPRITE_PORT_ATTR0_REGISTER,a		; Set up lower x pos as 136 (104 + 32 border)
 655+ E4F4 3E 87       >                        ld		a,((laserbasey -1) * 8) + 32 -1
 655+ E4F6 ED 92 36    >                        nextreg	SPRITE_PORT_ATTR1_REGISTER,a		; lower y coord on screen
 655+ E4F9 3E 08       >                        ld      a,%00001000
 655+ E4FB ED 92 37    >                        nextreg	SPRITE_PORT_ATTR2_REGISTER,a		; attribute 2
 655+ E4FE 3E 0E       >                        ld      a, laser_pattern_3 | %00000000             ; hidden by default
 655+ E500 ED 92 38    >                        nextreg	SPRITE_PORT_ATTR3_REGISTER,a
 656+ E503                                      RightLaser 6,1,laser_sprite12,laser_pattern_4
 656+ E503 3E 1B       >                        ld      a, laser_sprite12
 656+ E505 ED 92 34    >                        nextreg SPRITE_PORT_INDEX_REGISTER,a        ; select left hand side
 656+ E508 3E AE       >                        ld      a,(((30-laserbasex) - 6) *8) + 32 -2
 656+ E50A ED 92 35    >                        nextreg	SPRITE_PORT_ATTR0_REGISTER,a		; Set up lower x pos as 136 (104 + 32 border)
 656+ E50D 3E 87       >                        ld		a,((laserbasey -1) * 8) + 32 -1
 656+ E50F ED 92 36    >                        nextreg	SPRITE_PORT_ATTR1_REGISTER,a		; lower y coord on screen
 656+ E512 3E 08       >                        ld      a,%00001000
 656+ E514 ED 92 37    >                        nextreg	SPRITE_PORT_ATTR2_REGISTER,a		; attribute 2
 656+ E517 3E 0F       >                        ld      a, laser_pattern_4 | %00000000             ; hidden by default
 656+ E519 ED 92 38    >                        nextreg	SPRITE_PORT_ATTR3_REGISTER,a
 657+ E51C                                      RightLaser 8,2,laser_sprite13,laser_pattern_5
 657+ E51C 3E 1C       >                        ld      a, laser_sprite13
 657+ E51E ED 92 34    >                        nextreg SPRITE_PORT_INDEX_REGISTER,a        ; select left hand side
 657+ E521 3E 9E       >                        ld      a,(((30-laserbasex) - 8) *8) + 32 -2
 657+ E523 ED 92 35    >                        nextreg	SPRITE_PORT_ATTR0_REGISTER,a		; Set up lower x pos as 136 (104 + 32 border)
 657+ E526 3E 7F       >                        ld		a,((laserbasey -2) * 8) + 32 -1
 657+ E528 ED 92 36    >                        nextreg	SPRITE_PORT_ATTR1_REGISTER,a		; lower y coord on screen
 657+ E52B 3E 08       >                        ld      a,%00001000
 657+ E52D ED 92 37    >                        nextreg	SPRITE_PORT_ATTR2_REGISTER,a		; attribute 2
 657+ E530 3E 10       >                        ld      a, laser_pattern_5 | %00000000             ; hidden by default
 657+ E532 ED 92 38    >                        nextreg	SPRITE_PORT_ATTR3_REGISTER,a
 658+ E535 C9                                   ret
 659+ E536                                      ; Need simple show updates just to update the show attribute
 660+ E536
 661+ E536              sprite_laser_show:      ShowSprite laser_sprite1 ,laser_pattern_1
 661+ E536 3E 10       >                        ld      a, laser_sprite1
 661+ E538 ED 92 34    >                        nextreg SPRITE_PORT_INDEX_REGISTER,a
 661+ E53B 3E 8C       >                        ld      a,laser_pattern_1 | %10000000
 661+ E53D ED 92 38    >                        nextreg	SPRITE_PORT_ATTR3_REGISTER,a
 662+ E540                                      ShowSprite laser_sprite2 ,laser_pattern_2
 662+ E540 3E 11       >                        ld      a, laser_sprite2
 662+ E542 ED 92 34    >                        nextreg SPRITE_PORT_INDEX_REGISTER,a
 662+ E545 3E 8D       >                        ld      a,laser_pattern_2 | %10000000
 662+ E547 ED 92 38    >                        nextreg	SPRITE_PORT_ATTR3_REGISTER,a
 663+ E54A                                      ShowSprite laser_sprite3 ,laser_pattern_3
 663+ E54A 3E 12       >                        ld      a, laser_sprite3
 663+ E54C ED 92 34    >                        nextreg SPRITE_PORT_INDEX_REGISTER,a
 663+ E54F 3E 8E       >                        ld      a,laser_pattern_3 | %10000000
 663+ E551 ED 92 38    >                        nextreg	SPRITE_PORT_ATTR3_REGISTER,a
 664+ E554                                      ShowSprite laser_sprite4 ,laser_pattern_4
 664+ E554 3E 13       >                        ld      a, laser_sprite4
 664+ E556 ED 92 34    >                        nextreg SPRITE_PORT_INDEX_REGISTER,a
 664+ E559 3E 8F       >                        ld      a,laser_pattern_4 | %10000000
 664+ E55B ED 92 38    >                        nextreg	SPRITE_PORT_ATTR3_REGISTER,a
 665+ E55E                                      ShowSprite laser_sprite5 ,laser_pattern_5
 665+ E55E 3E 14       >                        ld      a, laser_sprite5
 665+ E560 ED 92 34    >                        nextreg SPRITE_PORT_INDEX_REGISTER,a
 665+ E563 3E 90       >                        ld      a,laser_pattern_5 | %10000000
 665+ E565 ED 92 38    >                        nextreg	SPRITE_PORT_ATTR3_REGISTER,a
 666+ E568                                      ShowSprite laser_sprite9 ,laser_pattern_1
 666+ E568 3E 18       >                        ld      a, laser_sprite9
 666+ E56A ED 92 34    >                        nextreg SPRITE_PORT_INDEX_REGISTER,a
 666+ E56D 3E 8C       >                        ld      a,laser_pattern_1 | %10000000
 666+ E56F ED 92 38    >                        nextreg	SPRITE_PORT_ATTR3_REGISTER,a
 667+ E572                                      ShowSprite laser_sprite10,laser_pattern_2
 667+ E572 3E 19       >                        ld      a, laser_sprite10
 667+ E574 ED 92 34    >                        nextreg SPRITE_PORT_INDEX_REGISTER,a
 667+ E577 3E 8D       >                        ld      a,laser_pattern_2 | %10000000
 667+ E579 ED 92 38    >                        nextreg	SPRITE_PORT_ATTR3_REGISTER,a
 668+ E57C                                      ShowSprite laser_sprite11,laser_pattern_3
 668+ E57C 3E 1A       >                        ld      a, laser_sprite11
 668+ E57E ED 92 34    >                        nextreg SPRITE_PORT_INDEX_REGISTER,a
 668+ E581 3E 8E       >                        ld      a,laser_pattern_3 | %10000000
 668+ E583 ED 92 38    >                        nextreg	SPRITE_PORT_ATTR3_REGISTER,a
 669+ E586                                      ShowSprite laser_sprite12,laser_pattern_4
 669+ E586 3E 1B       >                        ld      a, laser_sprite12
 669+ E588 ED 92 34    >                        nextreg SPRITE_PORT_INDEX_REGISTER,a
 669+ E58B 3E 8F       >                        ld      a,laser_pattern_4 | %10000000
 669+ E58D ED 92 38    >                        nextreg	SPRITE_PORT_ATTR3_REGISTER,a
 670+ E590                                      ShowSprite laser_sprite13,laser_pattern_5
 670+ E590 3E 1C       >                        ld      a, laser_sprite13
 670+ E592 ED 92 34    >                        nextreg SPRITE_PORT_INDEX_REGISTER,a
 670+ E595 3E 90       >                        ld      a,laser_pattern_5 | %10000000
 670+ E597 ED 92 38    >                        nextreg	SPRITE_PORT_ATTR3_REGISTER,a
 671+ E59A C9                                   ret
 672+ E59B
 673+ E59B              sprite_galactic_hide:   HideSprite galactic_cursor_sprite
 673+ E59B ED 91 34 00 >                            nextreg		SPRITE_PORT_INDEX_REGISTER,galactic_cursor_sprite
 673+ E59F ED 91 38 00 >                            nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 674+ E5A3                                      HideSprite galactic_cursor_sprite1
 674+ E5A3 ED 91 34 01 >                            nextreg		SPRITE_PORT_INDEX_REGISTER,galactic_cursor_sprite1
 674+ E5A7 ED 91 38 00 >                            nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 675+ E5AB                                      HideSprite galactic_cursor_sprite2
 675+ E5AB ED 91 34 03 >                            nextreg		SPRITE_PORT_INDEX_REGISTER,galactic_cursor_sprite2
 675+ E5AF ED 91 38 00 >                            nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 676+ E5B3 C9                                   ret
 677+ E5B4
 678+ E5B4              sprite_galactic_hyper_hide:
 679+ E5B4                                      HideSprite galactic_hyper_sprite
 679+ E5B4 ED 91 34 04 >                            nextreg		SPRITE_PORT_INDEX_REGISTER,galactic_hyper_sprite
 679+ E5B8 ED 91 38 00 >                            nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 680+ E5BC                                       ;nextreg		SPRITE_PORT_INDEX_REGISTER,galactic_hyper_sprite1
 681+ E5BC              ;                        nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 682+ E5BC              ;                        nextreg		SPRITE_PORT_INDEX_REGISTER,galactic_hyper_sprite2
 683+ E5BC              ;                        nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 684+ E5BC C9                                   ret
 685+ E5BD
 686+ E5BD              sprite_local_hide:      HideSprite local_cursor_sprite
 686+ E5BD ED 91 34 05 >                            nextreg		SPRITE_PORT_INDEX_REGISTER,local_cursor_sprite
 686+ E5C1 ED 91 38 00 >                            nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 687+ E5C5                                      HideSprite local_cursor_sprite1
 687+ E5C5 ED 91 34 06 >                            nextreg		SPRITE_PORT_INDEX_REGISTER,local_cursor_sprite1
 687+ E5C9 ED 91 38 00 >                            nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 688+ E5CD                                      HideSprite local_cursor_sprite2
 688+ E5CD ED 91 34 07 >                            nextreg		SPRITE_PORT_INDEX_REGISTER,local_cursor_sprite2
 688+ E5D1 ED 91 38 00 >                            nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 689+ E5D5 C9                                   ret
 690+ E5D6
 691+ E5D6              sprite_local_hyper_hide:HideSprite local_hyper_sprite
 691+ E5D6 ED 91 34 08 >                            nextreg		SPRITE_PORT_INDEX_REGISTER,local_hyper_sprite
 691+ E5DA ED 91 38 00 >                            nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 692+ E5DE                                      HideSprite local_hyper_sprite1
 692+ E5DE ED 91 34 09 >                            nextreg		SPRITE_PORT_INDEX_REGISTER,local_hyper_sprite1
 692+ E5E2 ED 91 38 00 >                            nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 693+ E5E6                                      HideSprite local_hyper_sprite2
 693+ E5E6 ED 91 34 0B >                            nextreg		SPRITE_PORT_INDEX_REGISTER,local_hyper_sprite2
 693+ E5EA ED 91 38 00 >                            nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 694+ E5EE C9                                   ret
 695+ E5EF
 696+ E5EF              sprite_reticule_hide:   HideSprite reticlule_sprite1
 696+ E5EF ED 91 34 0C >                            nextreg		SPRITE_PORT_INDEX_REGISTER,reticlule_sprite1
 696+ E5F3 ED 91 38 00 >                            nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 697+ E5F7                                      HideSprite reticlule_sprite2
 697+ E5F7 ED 91 34 0D >                            nextreg		SPRITE_PORT_INDEX_REGISTER,reticlule_sprite2
 697+ E5FB ED 91 38 00 >                            nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 698+ E5FF                                      HideSprite reticlule_sprite3
 698+ E5FF ED 91 34 0E >                            nextreg		SPRITE_PORT_INDEX_REGISTER,reticlule_sprite3
 698+ E603 ED 91 38 00 >                            nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 699+ E607                                      HideSprite reticlule_sprite4
 699+ E607 ED 91 34 0F >                            nextreg		SPRITE_PORT_INDEX_REGISTER,reticlule_sprite4
 699+ E60B ED 91 38 00 >                            nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 700+ E60F C9                                   ret
 701+ E610
 702+ E610              sprite_ecm_hide:        HideSprite ECM_sprite
 702+ E610 ED 91 34 25 >                            nextreg		SPRITE_PORT_INDEX_REGISTER,ECM_sprite
 702+ E614 ED 91 38 00 >                            nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 703+ E618 C9                                   ret
 704+ E619
 705+ E619              sprite_missile_1_hide:  HideSprite missile_sprite1
 705+ E619 ED 91 34 26 >                            nextreg		SPRITE_PORT_INDEX_REGISTER,missile_sprite1
 705+ E61D ED 91 38 00 >                            nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 706+ E621 C9                                   ret
 707+ E622
 708+ E622              sprite_missile_2_hide:  HideSprite missile_sprite2
 708+ E622 ED 91 34 27 >                            nextreg		SPRITE_PORT_INDEX_REGISTER,missile_sprite2
 708+ E626 ED 91 38 00 >                            nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 709+ E62A C9                                   ret
 710+ E62B
 711+ E62B              sprite_missile_3_hide:  HideSprite missile_sprite3
 711+ E62B ED 91 34 28 >                            nextreg		SPRITE_PORT_INDEX_REGISTER,missile_sprite3
 711+ E62F ED 91 38 00 >                            nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 712+ E633 C9                                   ret
 713+ E634
 714+ E634              sprite_missile_4_hide:  HideSprite missile_sprite4
 714+ E634 ED 91 34 29 >                            nextreg		SPRITE_PORT_INDEX_REGISTER,missile_sprite4
 714+ E638 ED 91 38 00 >                            nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 715+ E63C C9                                   ret
 716+ E63D
 717+ E63D CD 19 E6     sprite_missile_all_hide:call  sprite_missile_1_hide
 718+ E640 CD 22 E6                             call  sprite_missile_2_hide
 719+ E643 CD 2B E6                             call  sprite_missile_3_hide
 720+ E646 CD 34 E6                             call  sprite_missile_4_hide
 721+ E649 C9                                   ret
 722+ E64A
 723+ E64A 3E 23        sprite_targetting:      ld      a,targetting_sprite1                 ; LEFT ARM
 724+ E64C ED 92 34                             nextreg SPRITE_PORT_INDEX_REGISTER,a        ; select left hand side
 725+ E64F 3E 7F                                ld      a,TargetetingCentreX1
 726+ E651 ED 92 35                             nextreg	SPRITE_PORT_ATTR0_REGISTER,a		; Set up lower x pos as 136 (104 + 32 border)
 727+ E654 3E 78                                ld		a,TargetetingCentreY
 728+ E656 ED 92 36                             nextreg	SPRITE_PORT_ATTR1_REGISTER,a		; lower y coord on screen
 729+ E659 AF                                   xor     a
 730+ E65A ED 92 37                             nextreg	SPRITE_PORT_ATTR2_REGISTER,a		; attribute 2
 731+ E65D 3E 97                                ld      a,targetting_pattern | %10000000
 732+ E65F ED 92 38                             nextreg	SPRITE_PORT_ATTR3_REGISTER,a		; visible 5 bytes pattern left reticule
 733+ E662 3E 24        .right:                 ld      a,targetting_sprite2                ; RIGHT ARM
 734+ E664 ED 92 34                             nextreg SPRITE_PORT_INDEX_REGISTER,a        ; select left hand side
 735+ E667 3E AF                                ld      a,TargetetingCentreX2
 736+ E669 ED 92 35                             nextreg	SPRITE_PORT_ATTR0_REGISTER,a		; Set up lower x pos as 136 (104 + 32 border)
 737+ E66C 3E 78                                ld		a,TargetetingCentreY
 738+ E66E ED 92 36                             nextreg	SPRITE_PORT_ATTR1_REGISTER,a		; lower y coord on screen
 739+ E671 3E 08                                ld      a,%00001000
 740+ E673 ED 92 37                             nextreg	SPRITE_PORT_ATTR2_REGISTER,a		; attribute 2 including mirroring horizontal
 741+ E676 3E 97                                ld      a,targetting_pattern | %10000000
 742+ E678 ED 92 38                             nextreg	SPRITE_PORT_ATTR3_REGISTER,a		; visible 5 bytes pattern left reticule
 743+ E67B C9                                   ret
 744+ E67C
 745+ E67C 3E 23        sprite_lock:            ld      a,targetting_sprite1                 ; LEFT ARM
 746+ E67E ED 92 34                             nextreg SPRITE_PORT_INDEX_REGISTER,a        ; select left hand side
 747+ E681 3E 7F                                ld      a,TargetetingCentreX1
 748+ E683 ED 92 35                             nextreg	SPRITE_PORT_ATTR0_REGISTER,a		; Set up lower x pos as 136 (104 + 32 border)
 749+ E686 3E 78                                ld		a,TargetetingCentreY
 750+ E688 ED 92 36                             nextreg	SPRITE_PORT_ATTR1_REGISTER,a		; lower y coord on screen
 751+ E68B AF                                   xor     a
 752+ E68C ED 92 37                             nextreg	SPRITE_PORT_ATTR2_REGISTER,a		; attribute 2
 753+ E68F 3E 98                                ld      a,lock_pattern | %10000000
 754+ E691 ED 92 38                             nextreg	SPRITE_PORT_ATTR3_REGISTER,a		; visible 5 bytes pattern left reticule
 755+ E694 3E 24        .right:                 ld      a,targetting_sprite2                 ; RIGHT ARM
 756+ E696 ED 92 34                             nextreg SPRITE_PORT_INDEX_REGISTER,a        ; select left hand side
 757+ E699 3E AF                                ld      a,TargetetingCentreX2
 758+ E69B ED 92 35                             nextreg	SPRITE_PORT_ATTR0_REGISTER,a		; Set up lower x pos as 136 (104 + 32 border)
 759+ E69E 3E 78                                ld		a,TargetetingCentreY
 760+ E6A0 ED 92 36                             nextreg	SPRITE_PORT_ATTR1_REGISTER,a		; lower y coord on screen
 761+ E6A3 3E 08                                ld      a,%00001000
 762+ E6A5 ED 92 37                             nextreg	SPRITE_PORT_ATTR2_REGISTER,a		; attribute 2 including mirroring horizontal
 763+ E6A8 3E 98                                ld      a,lock_pattern | %10000000
 764+ E6AA ED 92 38                             nextreg	SPRITE_PORT_ATTR3_REGISTER,a		; visible 5 bytes pattern left reticule
 765+ E6AD C9                                   ret
 766+ E6AE
 767+ E6AE
 768+ E6AE 3A 00 E0     sprite_local_chart_hide:ld      a,(spr_nextStar)
 769+ E6B1              .hideLoop:              HideSprite a                                ; hide sprite a
 769+ E6B1 ED 92 34    >                            nextreg		SPRITE_PORT_INDEX_REGISTER,a
 769+ E6B4 ED 91 38 00 >                            nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 770+ E6B8 3D                                   dec     a                                   ; count down to 0
 771+ E6B9 F2 B1 E6                             jp      p,.hideLoop                         ; once we hit negative then done
 772+ E6BC 3C                                   inc     a                                   ; move a from -1 to 0
 773+ E6BD 32 00 E0                             ld      (spr_nextStar),a                    ; next is 0
 774+ E6C0
 775+ E6C0              ; this takes paramters:
 776+ E6C0              ; b = row, hl = column, c = sprite size (1 to 5)
 777+ E6C0              sprite_local_chart_show:
 778+ E6C0 3A 00 E0                             ld      a,(spr_nextStar)                    ; select next sprite slot in queue
 779+ E6C3 ED 92 34                             nextreg   SPRITE_PORT_INDEX_REGISTER,a      ;
 780+ E6C6 3C                                   inc     a                                   ; mark next free slot
 781+ E6C7 32 00 E0                             ld      (spr_nextStar),a                    ;
 782+ E6CA 7D           .SetXLSB:               ld      a,l                                 ; LSB of X coordinate
 783+ E6CB ED 92 35                             nextreg   SPRITE_PORT_ATTR0_REGISTER,a      ; .
 784+ E6CE 78           .SetY                   ld      a,b                                 ; Y coordinate
 785+ E6CF ED 92 36                             nextreg   SPRITE_PORT_ATTR1_REGISTER,a      ; .
 786+ E6D2 7C           .SetXMSB:               ld      a,h                                 ; get MSB bit of X coordinate
 787+ E6D3 E6 01                                and     $01                                 ; and ensure other bits are clear
 788+ E6D5 ED 92 37                             nextreg   SPRITE_PORT_ATTR2_REGISTER,a      ; .
 789+ E6D8 3E A2        .SetVisPattern:         ld      a,(star_size_1 - 1) | $80           ; base pattern and visible bit, no attr 4
 790+ E6DA 81                                   add     a,c                                 ; select correct star from 1 to 5
 791+ E6DB ED 92 38                             nextreg   SPRITE_PORT_ATTR3_REGISTER,a      ; .
 792+ E6DE C9                                   ret
 793+ E6DF
 794+ E6DF
 795+ E6DF              sprite_targetting_hide: HideSprite targetting_sprite1
 795+ E6DF ED 91 34 23 >                            nextreg		SPRITE_PORT_INDEX_REGISTER,targetting_sprite1
 795+ E6E3 ED 91 38 00 >                            nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 796+ E6E7                                      HideSprite targetting_sprite2
 796+ E6E7 ED 91 34 24 >                            nextreg		SPRITE_PORT_INDEX_REGISTER,targetting_sprite2
 796+ E6EB ED 91 38 00 >                            nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 797+ E6EF C9                                   ret
 798+ E6F0
 799+ E6F0              sprite_targetting_show: ShowSprite targetting_sprite1, targetting_pattern
 799+ E6F0 3E 23       >                        ld      a, targetting_sprite1
 799+ E6F2 ED 92 34    >                        nextreg SPRITE_PORT_INDEX_REGISTER,a
 799+ E6F5 3E 97       >                        ld      a,targetting_pattern | %10000000
 799+ E6F7 ED 92 38    >                        nextreg	SPRITE_PORT_ATTR3_REGISTER,a
 800+ E6FA                                      ShowSprite targetting_sprite2, targetting_pattern
 800+ E6FA 3E 24       >                        ld      a, targetting_sprite2
 800+ E6FC ED 92 34    >                        nextreg SPRITE_PORT_INDEX_REGISTER,a
 800+ E6FF 3E 97       >                        ld      a,targetting_pattern | %10000000
 800+ E701 ED 92 38    >                        nextreg	SPRITE_PORT_ATTR3_REGISTER,a
 801+ E704 C9                                   ret
 802+ E705
 803+ E705              sprite_laser_hide:      HideSprite laser_sprite1
 803+ E705 ED 91 34 10 >                            nextreg		SPRITE_PORT_INDEX_REGISTER,laser_sprite1
 803+ E709 ED 91 38 00 >                            nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 804+ E70D                                      HideSprite laser_sprite2
 804+ E70D ED 91 34 11 >                            nextreg		SPRITE_PORT_INDEX_REGISTER,laser_sprite2
 804+ E711 ED 91 38 00 >                            nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 805+ E715                                      HideSprite laser_sprite3
 805+ E715 ED 91 34 12 >                            nextreg		SPRITE_PORT_INDEX_REGISTER,laser_sprite3
 805+ E719 ED 91 38 00 >                            nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 806+ E71D                                      HideSprite laser_sprite4
 806+ E71D ED 91 34 13 >                            nextreg		SPRITE_PORT_INDEX_REGISTER,laser_sprite4
 806+ E721 ED 91 38 00 >                            nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 807+ E725                                      HideSprite laser_sprite5
 807+ E725 ED 91 34 14 >                            nextreg		SPRITE_PORT_INDEX_REGISTER,laser_sprite5
 807+ E729 ED 91 38 00 >                            nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 808+ E72D                                      HideSprite laser_sprite6
 808+ E72D ED 91 34 15 >                            nextreg		SPRITE_PORT_INDEX_REGISTER,laser_sprite6
 808+ E731 ED 91 38 00 >                            nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 809+ E735                                      HideSprite laser_sprite7
 809+ E735 ED 91 34 16 >                            nextreg		SPRITE_PORT_INDEX_REGISTER,laser_sprite7
 809+ E739 ED 91 38 00 >                            nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 810+ E73D                                      HideSprite laser_sprite8
 810+ E73D ED 91 34 17 >                            nextreg		SPRITE_PORT_INDEX_REGISTER,laser_sprite8
 810+ E741 ED 91 38 00 >                            nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 811+ E745                                      HideSprite laser_sprite9
 811+ E745 ED 91 34 18 >                            nextreg		SPRITE_PORT_INDEX_REGISTER,laser_sprite9
 811+ E749 ED 91 38 00 >                            nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 812+ E74D                                      HideSprite laser_sprite10
 812+ E74D ED 91 34 19 >                            nextreg		SPRITE_PORT_INDEX_REGISTER,laser_sprite10
 812+ E751 ED 91 38 00 >                            nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 813+ E755                                      HideSprite laser_sprite11
 813+ E755 ED 91 34 1A >                            nextreg		SPRITE_PORT_INDEX_REGISTER,laser_sprite11
 813+ E759 ED 91 38 00 >                            nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 814+ E75D                                      HideSprite laser_sprite12
 814+ E75D ED 91 34 1B >                            nextreg		SPRITE_PORT_INDEX_REGISTER,laser_sprite12
 814+ E761 ED 91 38 00 >                            nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 815+ E765                                      HideSprite laser_sprite13
 815+ E765 ED 91 34 1C >                            nextreg		SPRITE_PORT_INDEX_REGISTER,laser_sprite13
 815+ E769 ED 91 38 00 >                            nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 816+ E76D                                      HideSprite laser_sprite14
 816+ E76D ED 91 34 1D >                            nextreg		SPRITE_PORT_INDEX_REGISTER,laser_sprite14
 816+ E771 ED 91 38 00 >                            nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 817+ E775                                      HideSprite laser_sprite15
 817+ E775 ED 91 34 1E >                            nextreg		SPRITE_PORT_INDEX_REGISTER,laser_sprite15
 817+ E779 ED 91 38 00 >                            nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 818+ E77D                                      HideSprite laser_sprite16
 818+ E77D ED 91 34 1F >                            nextreg		SPRITE_PORT_INDEX_REGISTER,laser_sprite16
 818+ E781 ED 91 38 00 >                            nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 819+ E785 C9                                   ret
 820+ E786
 821+ E786              sprite_compass_hide:    HideSprite compass_sun
 821+ E786 ED 91 34 20 >                            nextreg		SPRITE_PORT_INDEX_REGISTER,compass_sun
 821+ E78A ED 91 38 00 >                            nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 822+ E78E                                      HideSprite compass_planet
 822+ E78E ED 91 34 21 >                            nextreg		SPRITE_PORT_INDEX_REGISTER,compass_planet
 822+ E792 ED 91 38 00 >                            nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 823+ E796                                      HideSprite compass_station
 823+ E796 ED 91 34 22 >                            nextreg		SPRITE_PORT_INDEX_REGISTER,compass_station
 823+ E79A ED 91 38 00 >                            nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 824+ E79E                                      HideSprite suncompass_sprite1
 824+ E79E ED 91 34 2A >                            nextreg		SPRITE_PORT_INDEX_REGISTER,suncompass_sprite1
 824+ E7A2 ED 91 38 00 >                            nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 825+ E7A6                                      HideSprite planetcompass_sprite1
 825+ E7A6 ED 91 34 2E >                            nextreg		SPRITE_PORT_INDEX_REGISTER,planetcompass_sprite1
 825+ E7AA ED 91 38 00 >                            nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 826+ E7AE                                      HideSprite stationcompass_sprite1
 826+ E7AE ED 91 34 32 >                            nextreg		SPRITE_PORT_INDEX_REGISTER,stationcompass_sprite1
 826+ E7B2 ED 91 38 00 >                            nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 827+ E7B6 C9                                   ret
 828+ E7B7
 829+ E7B7 CD 9B E5     sprite_cls_cursors:     call	sprite_galactic_hide
 830+ E7BA CD B4 E5                             call	sprite_galactic_hyper_hide
 831+ E7BD CD BD E5                             call	sprite_local_hide
 832+ E7C0 CD D6 E5                             call	sprite_local_hyper_hide
 833+ E7C3 CD EF E5                             call    sprite_reticule_hide
 834+ E7C6 CD 05 E7                             call    sprite_laser_hide
 835+ E7C9 CD 86 E7                             call    sprite_compass_hide
 836+ E7CC CD DF E6                             call    sprite_targetting_hide
 837+ E7CF CD 3D E6                             call    sprite_missile_all_hide
 838+ E7D2 C9                                   ret
 839+ E7D3
 840+ E7D3 CD B7 E7     sprite_cls_all:         call    sprite_cls_cursors
 841+ E7D6 CD 10 E6                             call    sprite_ecm_hide
 842+ E7D9 CD 3D E6                             call    sprite_missile_all_hide
 843+ E7DC C9                                   ret
 844+ E7DD
 845+ E7DD              ; Initialises sprites to sprite 0 lowest Priority, Clipping not in over border, Enable over border, Enable visibility
 846+ E7DD CD B7 E7     init_sprites:           call		sprite_cls_cursors
 847+ E7E0 ED 91 15 03                          nextreg 	SPRITE_LAYERS_SYSTEM_REGISTER,%00000011 ; priority  SLU
 848+ E7E4 C9                                   ret
 849+ E7E5
 850+ E7E5 ED 91 15 07  init_sprites_l2_prity:  nextreg 	SPRITE_LAYERS_SYSTEM_REGISTER,%00000111 ; Priority LSU
 851+ E7E9 C9                                   ret
 852+ E7EA
 853+ E7EA ED 91 15 03  init_sprites_spr_prity: nextreg 	SPRITE_LAYERS_SYSTEM_REGISTER,%00000011 ; Priority LSU
 854+ E7EE C9                                   ret
 855+ E7EF
 856+ E7EF              select_sprite_a:        MACRO
 857+ E7EF ~                                    nextreg SPRITE_PORT_INDEX_REGISTER,a
 858+ E7EF                                      ENDM
 859+ E7EF
 860+ E7EF              set_sprite_x_low_a:     MACRO
 861+ E7EF ~                                    nextreg	SPRITE_PORT_ATTR0_REGISTER,a
 862+ E7EF                                      ENDM
 863+ E7EF
 864+ E7EF              set_sprite_y_low_a:     MACRO
 865+ E7EF ~                                    nextreg	SPRITE_PORT_ATTR1_REGISTER,a
 866+ E7EF                                      ENDM
 867+ E7EF
 868+ E7EF              set_sprite_x_msb_anc:   MACRO
 869+ E7EF ~                                    nextreg	SPRITE_PORT_ATTR2_REGISTER,a
 870+ E7EF                                      ENDM
 871+ E7EF
 872+ E7EF              set_sprite_pat_a:       MACRO
 873+ E7EF ~                                    nextreg	SPRITE_PORT_ATTR3_REGISTER,a
 874+ E7EF                                      ENDM
 875+ E7EF
 876+ E7EF              set_sprite_pat_a_nx:    MACRO
 877+ E7EF ~                                    and     %10111111
 878+ E7EF ~                                    set_sprite_pat_a
 879+ E7EF                                      ENDM
 880+ E7EF
 881+ E7EF              set_sprite_pat_a_vis:   MACRO
 882+ E7EF ~                                    or      %10000000
 883+ E7EF ~                                    set_sprite_pat_a
 884+ E7EF                                      ENDM
 885+ E7EF
 886+ E7EF              set_sprite_hidden:      MACRO
 887+ E7EF ~                                    xor     a
 888+ E7EF ~                                    set_sprite_pat_a
 889+ E7EF                                      ENDM
 890+ E7EF
 891+ E7EF              set_sprite_pas_a_vis_nx:MACRO
 892+ E7EF ~                                    or      %10000000
 893+ E7EF ~                                    set_sprite_pat_a_nx
 894+ E7EF                                      ENDM
 895+ E7EF
 896+ E7EF              set_sprite_extended_a:  MACRO
 897+ E7EF ~                                    nextreg	SPRITE_PORT_ATTR4_REGISTER,a
 898+ E7EF                                      ENDM
 899+ E7EF
 900+ E7EF 20           diag_x_pos:             DB 32
 901+ E7F0 40           diag_y_pos:             DB 64
 902+ E7F1 00           diag_sprite_nbr:        DB 0
 903+ E7F2
 904+ E7F2 06 40        sprite_diagnostic_clear:ld      b,64
 905+ E7F4 0E 00                                ld      c,0
 906+ E7F6 79           .HideLoop:              ld      a,c
 907+ E7F7                                      HideSprite a
 907+ E7F7 ED 92 34    >                            nextreg		SPRITE_PORT_INDEX_REGISTER,a
 907+ E7FA ED 91 38 00 >                            nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 908+ E7FE 0C                                   inc     c
 909+ E7FF 10 F5                                djnz    .HideLoop
 910+ E801 C9                                   ret
 911+ E802
 912+ E802 3E 80        sprite_diagnostic:      ld      a,$80
 913+ E804 32 F1 E7                             ld      (diag_sprite_nbr),a
 914+ E807 3E 40                                ld      a,64
 915+ E809 32 F0 E7                             ld      (diag_y_pos),a
 916+ E80C                                      ;break
 917+ E80C AF           .sprite_newline:        xor a
 918+ E80D 32 EF E7                             ld      (diag_x_pos),a
 919+ E810 3A F1 E7     .sprite_loop:           ld      a,(diag_sprite_nbr)
 919+ E813 E6 7F          and $7F
 919+ E815                 select_sprite_a
 919+ E815 ED 92 34    >                        nextreg SPRITE_PORT_INDEX_REGISTER,a
 920+ E818 3A EF E7                             ld      a,(diag_x_pos)
 920+ E81B                set_sprite_x_low_a
 920+ E81B ED 92 35    >                        nextreg	SPRITE_PORT_ATTR0_REGISTER,a
 921+ E81E C6 10                                add     a,16
 922+ E820 32 EF E7                             ld      (diag_x_pos),a
 923+ E823 3A F0 E7                             ld      a,(diag_y_pos)
 923+ E826                set_sprite_y_low_a
 923+ E826 ED 92 36    >                        nextreg	SPRITE_PORT_ATTR1_REGISTER,a
 924+ E829 3E 00                                ld      a,0
 924+ E82B                set_sprite_x_msb_anc
 924+ E82B ED 92 37    >                        nextreg	SPRITE_PORT_ATTR2_REGISTER,a
 925+ E82E 3A F1 E7                             ld      a,(diag_sprite_nbr)
 925+ E831                set_sprite_pat_a
 925+ E831 ED 92 38    >                        nextreg	SPRITE_PORT_ATTR3_REGISTER,a
 926+ E834 3C                                   inc     a
 927+ E835 32 F1 E7                             ld      (diag_sprite_nbr),a
 928+ E838 E6 7F                                and     $7F
 929+ E83A                                      JumpIfALTNusng  40,.cont
 929+ E83A FE 28       >                        cp      40
 929+ E83C DA 4C E8    >                        jp		c, .cont
 930+ E83F 11 1D 36     .drawBig:               ld      de,diagnostic_sprite*256 + compass_sun_pattern
 931+ E842 01 96 00                             ld      bc,150
 932+ E845 21 96 00                             ld      hl,150
 933+ E848 CD 66 E0                             call    sprite_4x4
 934+ E84B
 935+ E84B C9                                   ret
 936+ E84C 3A EF E7     .cont:                  ld      a,(diag_x_pos)
 937+ E84F                                      JumpIfALTNusng 200,.sprite_loop
 937+ E84F FE C8       >                        cp      200
 937+ E851 DA 10 E8    >                        jp		c, .sprite_loop
 938+ E854 3A F0 E7                             ld      a,(diag_y_pos)
 939+ E857 C6 14                                add     a,20
 940+ E859 32 F0 E7                             ld      (diag_y_pos),a
 941+ E85C 18 AE                                jr      .sprite_newline
 942+ E85E C9                                   ret
 943+ E85F
 944+ E85F
 945+ E85F
# file closed: ./Layer3Sprites/sprite_routines.asm
 893  E85F                                  INCLUDE "./Layer3Sprites/sprite_load.asm"
# file opened: ./Layer3Sprites/sprite_load.asm
   1+ E85F
   2+ E85F
   3+ E85F
   4+ E85F 00 00 00...  FileWork                DS 10
   5+ E869 00           FileNumber:             DB  0
   6+ E86A
   7+ E86A 4E 45 53 70  Filename                DB "NESpr"
   7+ E86E 72
   8+ E86F 30 30        FileNbr                 DB "00"
   9+ E871 2E 64 61 74  Extension:              DB ".dat",0
   9+ E875 00
  10+ E876
  11+ E876              SpriteCount             EQU     40
  12+ E876
  13+ E876 3A 69 E8     FileNbrA:               ld      a,(FileNumber)
  14+ E879 ED 23                                swapnib
  15+ E87B E6 0F                                and     %00001111
  16+ E87D 06 30                                ld      b,"0"
  17+ E87F 80                                   add     b
  18+ E880 32 6F E8                             ld      (FileNbr),a
  19+ E883 3A 69 E8                             ld      a,(FileNumber)
  20+ E886 E6 0F                                and     %00001111
  21+ E888 80                                   add     b
  22+ E889 32 70 E8                             ld      (FileNbr+1),a
  23+ E88C C9                                   ret
  24+ E88D
  25+ E88D 01 3B 30     load_pattern_files:     ld          bc,SPRITE_SLOT_PORT             ; select pattern 0
  26+ E890                                      ZeroA                                       ;
  26+ E890 AF          >                        xor a
  27+ E891 ED 79                                out         (c),a
  28+ E893 3E 01                                ld          a,$01
  29+ E895 32 69 E8                             ld          (FileNumber),a
  30+ E898 06 28                                ld          b,SpriteCount
  31+ E89A C5           .ReadLoop:              push        bc
  32+ E89B CD 76 E8                             call        FileNbrA
  33+ E89E CD AD E8                             call        load_a_pattern
  34+ E8A1 3A 69 E8                             ld          a,(FileNumber)
  35+ E8A4 3C                                   inc         a
  36+ E8A5 27                                   daa
  37+ E8A6 32 69 E8                             ld          (FileNumber),a
  38+ E8A9 C1                                   pop         bc
  39+ E8AA 10 EE                                djnz        .ReadLoop
  40+ E8AC C9                                   ret
  41+ E8AD                                                   ; write byte 256
  42+ E8AD
  43+ E8AD 21 6A E8     load_a_pattern:         ld          hl,Filename
  44+ E8B0 DD 21 CA E8                          ld          ix,SpriteDatabuffer
  45+ E8B4 01 00 01                             ld          bc,256
  46+ E8B7 CD 20 AB                             call        FileLoad
  47+ E8BA 1E FF                                ld          e,255
  48+ E8BC 01 5B 00     .streamPattern:         ld          bc, SPRITE_PATTERN_UPLOAD_PORT
  49+ E8BF 21 CA E8                             ld          hl, SpriteDatabuffer
  50+ E8C2 ED 90        .streamPatternLoop:     outinb                                      ; write byte of pattern
  51+ E8C4 1D                                   dec         e
  52+ E8C5 20 FB                                jr          nz, .streamPatternLoop          ; carry on writing for "e" iterations
  53+ E8C7 ED 90                                outinb
  54+ E8C9 C9                                   ret
  55+ E8CA
  56+ E8CA 00 00 00...  SpriteDatabuffer:       DS  256
  57+ E9CA
  58+ E9CA
# file closed: ./Layer3Sprites/sprite_load.asm
 894  E9CA              ;;;***    INCLUDE " A./Layer3Sprites/SpriteSheet.asm"
 895  E9CA                                  DISPLAY "Bank ",BankSPRITE," - Bytes free ",/D, $2000 - ($-ShipModelsAddr), " - BankSPRITE"
 896  E9CA                                  ASSERT $-SpritemembankAddr <8912 , Bank code leaks over 8K boundary
 897  E9CA              ; Bank 61  ------------------------------------------------------------------------------------------------------------------------
 898  E9CA                                  SLOT    ConsoleImageAddr
 899  E9CA                                  PAGE    BankConsole
 900  E9CA                                  ORG     ConsoleImageAddr, BankConsole
 901  E000                                  INCLUDE "./Images/ConsoleImageData.asm"
# file opened: ./Images/ConsoleImageData.asm
   1+ E000              ConsoleImageData:
   2+ E000 FF FF FF FF      DB $FF,$FF,$FF,$FF,$FF,$FF,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$FF,$FF,$FF,$FF,$FF,$FF ; row 1 Compass 1
   2+ E004 FF FF 00 00
   2+ E008 00 00 00 00
   2+ E00C 00 00 00 00
   2+ E010 00 00 00 00
   2+ E014 00 00 00 00
   2+ E018 00 00 FF FF
   2+ E01C FF FF FF FF
   3+ E020 9C C3 FF FF      DB $9C,$C3,$FF,$FF,$FF,$FF,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$80,$00,$00,$00,$00,$01 ;       Compass 2
   3+ E024 FF FF 00 00
   3+ E028 00 00 00 00
   3+ E02C 00 00 00 00
   3+ E030 00 00 00 00
   3+ E034 00 00 00 00
   3+ E038 00 00 80 00
   3+ E03C 00 00 00 01
   4+ E040 80 00 00 00      DB $80,$00,$00,$00,$00,$01,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$80,$00,$00,$00,$00,$01 ;       Compass 3
   4+ E044 00 01 00 00
   4+ E048 00 00 00 00
   4+ E04C 00 00 00 00
   4+ E050 00 00 00 00
   4+ E054 00 00 00 00
   4+ E058 00 00 80 00
   4+ E05C 00 00 00 01
   5+ E060 80 00 00 00      DB $80,$00,$00,$00,$00,$01,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$80,$00,$00,$00,$00,$01
   5+ E064 00 01 00 00
   5+ E068 00 00 00 00
   5+ E06C 00 00 00 00
   5+ E070 00 00 00 00
   5+ E074 00 00 00 00
   5+ E078 00 00 80 00
   5+ E07C 00 00 00 01
   6+ E080 80 00 00 00      DB $80,$00,$00,$00,$00,$01,$00,$00,$00,$07,$82,$00,$08,$06,$20,$01,$80,$04,$60,$10,$00,$41,$E0,$00,$00,$00,$FF,$FF,$FF,$FF,$FF,$FF
   6+ E084 00 01 00 00
   6+ E088 00 07 82 00
   6+ E08C 08 06 20 01
   6+ E090 80 04 60 10
   6+ E094 00 41 E0 00
   6+ E098 00 00 FF FF
   6+ E09C FF FF FF FF
   7+ E0A0 80 00 00 00      DB $80,$00,$00,$00,$00,$01,$00,$06,$00,$30,$00,$08,$00,$04,$00,$61,$86,$00,$20,$00,$10,$00,$0C,$00,$60,$00,$FF,$FF,$FF,$FF,$FF,$FF
   7+ E0A4 00 01 00 06
   7+ E0A8 00 30 00 08
   7+ E0AC 00 04 00 61
   7+ E0B0 86 00 20 00
   7+ E0B4 10 00 0C 00
   7+ E0B8 60 00 FF FF
   7+ E0BC FF FF FF FF
   8+ E0C0 80 00 00 00      DB $80,$00,$00,$00,$00,$01,$00,$0F,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$55,$55,$55,$55,$55,$55,$55,$55,$F0,$00,$FF,$FF,$FF,$FF,$FF,$FF
   8+ E0C4 00 01 00 0F
   8+ E0C8 AA AA AA AA
   8+ E0CC AA AA AA AA
   8+ E0D0 55 55 55 55
   8+ E0D4 55 55 55 55
   8+ E0D8 F0 00 FF FF
   8+ E0DC FF FF FF FF
   9+ E0E0 FF FF FF FF      DB $FF,$FF,$FF,$FF,$FF,$FF,$00,$00,$00,$1E,$00,$00,$08,$00,$00,$01,$80,$00,$00,$10,$00,$00,$78,$00,$00,$00,$FF,$FF,$FF,$FF,$FF,$FF
   9+ E0E4 FF FF 00 00
   9+ E0E8 00 1E 00 00
   9+ E0EC 08 00 00 01
   9+ E0F0 80 00 00 10
   9+ E0F4 00 00 78 00
   9+ E0F8 00 00 FF FF
   9+ E0FC FF FF FF FF
  10+ E100 80 00 00 00      DB $80,$00,$00,$00,$00,$01,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$80,$00,$00,$00,$00,$01 ; row 2 Compass 4
  10+ E104 00 01 00 00
  10+ E108 00 00 00 00
  10+ E10C 00 00 00 00
  10+ E110 00 00 00 00
  10+ E114 00 00 00 00
  10+ E118 00 00 80 00
  10+ E11C 00 00 00 01
  11+ E120 B2 C3 92 49      DB $B2,$C3,$92,$49,$24,$93,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$80,$00,$00,$00,$7C,$39 ;       Compass 5
  11+ E124 24 93 00 00
  11+ E128 00 00 00 00
  11+ E12C 00 00 00 00
  11+ E130 00 00 00 00
  11+ E134 00 00 00 00
  11+ E138 00 00 80 00
  11+ E13C 00 00 7C 39
  12+ E140 BE 66 00 00      DB $BE,$66,$00,$00,$00,$01,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$80,$00,$00,$00,$7C,$61 ;       Compass 6
  12+ E144 00 01 00 00
  12+ E148 00 00 00 00
  12+ E14C 00 00 00 00
  12+ E150 00 00 00 00
  12+ E154 00 00 00 00
  12+ E158 00 00 80 00
  12+ E15C 00 00 7C 61
  13+ E160 9C 7E 00 00      DB $9C,$7E,$00,$00,$00,$01,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$80,$00,$00,$00,$00,$01
  13+ E164 00 01 00 00
  13+ E168 00 00 00 00
  13+ E16C 00 00 00 00
  13+ E170 00 00 00 00
  13+ E174 00 00 00 00
  13+ E178 00 00 80 00
  13+ E17C 00 00 00 01
  14+ E180 B0 7E 00 00      DB $B0,$7E,$00,$00,$00,$01,$00,$00,$00,$38,$04,$00,$10,$01,$40,$01,$80,$06,$80,$08,$00,$20,$1C,$00,$00,$00,$80,$00,$00,$00,$00,$81
  14+ E184 00 01 00 00
  14+ E188 00 38 04 00
  14+ E18C 10 01 40 01
  14+ E190 80 06 80 08
  14+ E194 00 20 1C 00
  14+ E198 00 00 80 00
  14+ E19C 00 00 00 81
  15+ E1A0 9C 30 00 00      DB $9C,$30,$00,$00,$00,$01,$00,$0C,$00,$40,$00,$10,$00,$04,$00,$11,$88,$00,$20,$00,$08,$00,$02,$00,$30,$00,$80,$00,$00,$00,$00,$81
  15+ E1A4 00 01 00 0C
  15+ E1A8 00 40 00 10
  15+ E1AC 00 04 00 11
  15+ E1B0 88 00 20 00
  15+ E1B4 08 00 02 00
  15+ E1B8 30 00 80 00
  15+ E1BC 00 00 00 81
  16+ E1C0 80 00 00 00      DB $80,$00,$00,$00,$00,$01,$00,$06,$00,$00,$10,$00,$00,$80,$00,$01,$80,$00,$01,$00,$00,$08,$00,$00,$60,$00,$80,$00,$00,$00,$00,$81
  16+ E1C4 00 01 00 06
  16+ E1C8 00 00 10 00
  16+ E1CC 00 80 00 01
  16+ E1D0 80 00 01 00
  16+ E1D4 00 08 00 00
  16+ E1D8 60 00 80 00
  16+ E1DC 00 00 00 81
  17+ E1E0 80 00 00 00      DB $80,$00,$00,$00,$00,$01,$00,$00,$00,$01,$E0,$00,$10,$00,$00,$01,$80,$00,$00,$08,$00,$07,$80,$00,$00,$00,$80,$00,$00,$00,$00,$81
  17+ E1E4 00 01 00 00
  17+ E1E8 00 01 E0 00
  17+ E1EC 10 00 00 01
  17+ E1F0 80 00 00 08
  17+ E1F4 00 07 80 00
  17+ E1F8 00 00 80 00
  17+ E1FC 00 00 00 81
  18+ E200 BE 3C 00 00      DB $BE,$3C,$00,$00,$00,$01,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$80,$00,$00,$00,$3C,$79 ; row 3 Compass 7
  18+ E204 00 01 00 00
  18+ E208 00 00 00 00
  18+ E20C 00 00 00 00
  18+ E210 00 00 00 00
  18+ E214 00 00 00 00
  18+ E218 00 00 80 00
  18+ E21C 00 00 3C 79
  19+ E220 B2 C3 80 01      DB $B2,$C3,$80,$01,$00,$03,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$80,$00,$00,$00,$62,$65 ;       Compass 8
  19+ E224 00 03 00 00
  19+ E228 00 00 00 00
  19+ E22C 00 00 00 00
  19+ E230 00 00 00 00
  19+ E234 00 00 00 00
  19+ E238 00 00 80 00
  19+ E23C 00 00 62 65
  20+ E240 B0 66 00 00      DB $B0,$66,$00,$00,$00,$01,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$80,$00,$00,$00,$66,$61 ;       Compass 9
  20+ E244 00 01 00 00
  20+ E248 00 00 00 00
  20+ E24C 00 00 00 00
  20+ E250 00 00 00 00
  20+ E254 00 00 00 00
  20+ E258 00 00 80 00
  20+ E25C 00 00 66 61
  21+ E260 B2 18 00 00      DB $B2,$18,$00,$00,$00,$01,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$80,$00,$00,$00,$00,$01
  21+ E264 00 01 00 00
  21+ E268 00 00 00 00
  21+ E26C 00 00 00 00
  21+ E270 00 00 00 00
  21+ E274 00 00 00 00
  21+ E278 00 00 80 00
  21+ E27C 00 00 00 01
  22+ E280 B0 18 00 00      DB $B0,$18,$00,$00,$00,$01,$00,$00,$01,$CA,$BA,$AA,$AA,$AA,$EA,$AA,$55,$57,$55,$55,$55,$5D,$53,$80,$00,$00,$80,$00,$00,$00,$00,$99
  22+ E284 00 01 00 00
  22+ E288 01 CA BA AA
  22+ E28C AA AA EA AA
  22+ E290 55 57 55 55
  22+ E294 55 5D 53 80
  22+ E298 00 00 80 00
  22+ E29C 00 00 00 99
  23+ E2A0 B2 30 00 00      DB $B2,$30,$00,$00,$00,$01,$00,$08,$01,$80,$00,$20,$00,$08,$00,$05,$A0,$00,$10,$00,$04,$00,$01,$80,$10,$00,$80,$00,$00,$00,$00,$B9
  23+ E2A4 00 01 00 08
  23+ E2A8 01 80 00 20
  23+ E2AC 00 08 00 05
  23+ E2B0 A0 00 10 00
  23+ E2B4 04 00 01 80
  23+ E2B8 10 00 80 00
  23+ E2BC 00 00 00 B9
  24+ E2C0 80 00 00 00      DB $80,$00,$00,$00,$00,$01,$00,$01,$00,$00,$20,$00,$01,$00,$00,$01,$80,$00,$00,$80,$00,$04,$00,$00,$80,$00,$80,$00,$00,$00,$00,$B9
  24+ E2C4 00 01 00 01
  24+ E2C8 00 00 20 00
  24+ E2CC 01 00 00 01
  24+ E2D0 80 00 00 80
  24+ E2D4 00 04 00 00
  24+ E2D8 80 00 80 00
  24+ E2DC 00 00 00 B9
  25+ E2E0 80 00 00 00      DB $80,$00,$00,$00,$00,$01,$00,$00,$00,$00,$1F,$AA,$AA,$AA,$AA,$AA,$55,$55,$55,$55,$55,$F8,$00,$00,$00,$00,$80,$00,$00,$00,$00,$A9
  25+ E2E4 00 01 00 00
  25+ E2E8 00 00 1F AA
  25+ E2EC AA AA AA AA
  25+ E2F0 55 55 55 55
  25+ E2F4 55 F8 00 00
  25+ E2F8 00 00 80 00
  25+ E2FC 00 00 00 A9
  26+ E300 B0 7E 00 00      DB $B0,$7E,$00,$00,$00,$01,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$80,$00,$00,$00,$60,$65 ; row 4
  26+ E304 00 01 00 00
  26+ E308 00 00 00 00
  26+ E30C 00 00 00 00
  26+ E310 00 00 00 00
  26+ E314 00 00 00 00
  26+ E318 00 00 80 00
  26+ E31C 00 00 60 65
  27+ E320 BE 66 00 00      DB $BE,$66,$00,$00,$00,$01,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$80,$00,$00,$00,$62,$61
  27+ E324 00 01 00 00
  27+ E328 00 00 00 00
  27+ E32C 00 00 00 00
  27+ E330 00 00 00 00
  27+ E334 00 00 00 00
  27+ E338 00 00 80 00
  27+ E33C 00 00 62 61
  28+ E340 BC 66 00 00      DB $BC,$66,$00,$00,$00,$01,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$80,$00,$00,$00,$66,$61
  28+ E344 00 01 00 00
  28+ E348 00 00 00 00
  28+ E34C 00 00 00 00
  28+ E350 00 00 00 00
  28+ E354 00 00 00 00
  28+ E358 00 00 80 00
  28+ E35C 00 00 66 61
  29+ E360 B0 18 00 00      DB $B0,$18,$00,$00,$00,$01,$00,$00,$00,$00,$00,$00,$00,$0F,$FF,$FF,$FF,$FF,$F0,$00,$00,$00,$00,$00,$00,$00,$80,$00,$00,$00,$00,$01
  29+ E364 00 01 00 00
  29+ E368 00 00 00 00
  29+ E36C 00 0F FF FF
  29+ E370 FF FF F0 00
  29+ E374 00 00 00 00
  29+ E378 00 00 80 00
  29+ E37C 00 00 00 01
  30+ E380 B0 18 00 00      DB $B0,$18,$00,$00,$00,$01,$00,$00,$06,$00,$20,$00,$40,$00,$A0,$01,$80,$05,$00,$02,$00,$04,$00,$60,$00,$00,$80,$00,$00,$00,$00,$B9
  30+ E384 00 01 00 00
  30+ E388 06 00 20 00
  30+ E38C 40 00 A0 01
  30+ E390 80 05 00 02
  30+ E394 00 04 00 60
  30+ E398 00 00 80 00
  30+ E39C 00 00 00 B9
  31+ E3A0 B2 30 00 00      DB $B2,$30,$00,$00,$00,$01,$00,$1A,$AA,$AA,$AA,$EA,$AA,$BA,$AA,$AB,$D5,$55,$5D,$55,$57,$55,$55,$55,$58,$00,$80,$00,$00,$00,$00,$85
  31+ E3A4 00 01 00 1A
  31+ E3A8 AA AA AA EA
  31+ E3AC AA BA AA AB
  31+ E3B0 D5 55 5D 55
  31+ E3B4 57 55 55 55
  31+ E3B8 58 00 80 00
  31+ E3BC 00 00 00 85
  32+ E3C0 80 00 00 00      DB $80,$00,$00,$00,$00,$01,$00,$00,$C0,$00,$40,$00,$01,$00,$00,$01,$80,$00,$00,$80,$00,$02,$00,$03,$00,$00,$80,$00,$00,$00,$00,$85
  32+ E3C4 00 01 00 00
  32+ E3C8 C0 00 40 00
  32+ E3CC 01 00 00 01
  32+ E3D0 80 00 00 80
  32+ E3D4 00 02 00 03
  32+ E3D8 00 00 80 00
  32+ E3DC 00 00 00 85
  33+ E3E0 80 00 00 00      DB $80,$00,$00,$00,$00,$01,$00,$00,$00,$00,$00,$FC,$20,$00,$00,$01,$80,$00,$00,$04,$3F,$00,$00,$00,$00,$00,$80,$00,$00,$00,$00,$A9
  33+ E3E4 00 01 00 00
  33+ E3E8 00 00 00 FC
  33+ E3EC 20 00 00 01
  33+ E3F0 80 00 00 04
  33+ E3F4 3F 00 00 00
  33+ E3F8 00 00 80 00
  33+ E3FC 00 00 00 A9
  34+ E400 BE 66 00 00      DB $BE,$66,$00,$00,$00,$01,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$80,$00,$00,$00,$3C,$65 ; row 5
  34+ E404 00 01 00 00
  34+ E408 00 00 00 00
  34+ E40C 00 00 00 00
  34+ E410 00 00 00 00
  34+ E414 00 00 00 00
  34+ E418 00 00 80 00
  34+ E41C 00 00 3C 65
  35+ E420 B2 7E 00 00      DB $B2,$7E,$00,$00,$00,$01,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$80,$00,$00,$00,$7C,$61
  35+ E424 00 01 00 00
  35+ E428 00 00 00 00
  35+ E42C 00 00 00 00
  35+ E430 00 00 00 00
  35+ E434 00 00 00 00
  35+ E438 00 00 80 00
  35+ E43C 00 00 7C 61
  36+ E440 B0 66 00 00      DB $B0,$66,$00,$00,$00,$01,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$80,$00,$00,$00,$66,$61
  36+ E444 00 01 00 00
  36+ E448 00 00 00 00
  36+ E44C 00 00 00 00
  36+ E450 00 00 00 00
  36+ E454 00 00 00 00
  36+ E458 00 00 80 00
  36+ E45C 00 00 66 61
  37+ E460 B0 18 00 00      DB $B0,$18,$00,$00,$00,$01,$00,$00,$00,$00,$00,$00,$3F,$F0,$08,$01,$80,$10,$0F,$FC,$00,$00,$00,$00,$00,$00,$80,$00,$00,$00,$00,$01
  37+ E464 00 01 00 00
  37+ E468 00 00 00 00
  37+ E46C 3F F0 08 01
  37+ E470 80 10 0F FC
  37+ E474 00 00 00 00
  37+ E478 00 00 80 00
  37+ E47C 00 00 00 01
  38+ E480 B0 18 00 00      DB $B0,$18,$00,$00,$00,$01,$00,$00,$18,$00,$C0,$00,$80,$00,$18,$01,$80,$18,$00,$01,$00,$03,$00,$18,$00,$00,$80,$00,$00,$00,$00,$99
  38+ E484 00 01 00 00
  38+ E488 18 00 C0 00
  38+ E48C 80 00 18 01
  38+ E490 80 18 00 01
  38+ E494 00 03 00 18
  38+ E498 00 00 80 00
  38+ E49C 00 00 00 99
  39+ E4A0 BE 30 00 00      DB $BE,$30,$00,$00,$00,$01,$00,$10,$0C,$00,$00,$80,$00,$10,$00,$01,$80,$00,$08,$00,$01,$00,$00,$30,$08,$00,$80,$00,$00,$00,$00,$BD
  39+ E4A4 00 01 00 10
  39+ E4A8 0C 00 00 80
  39+ E4AC 00 10 00 01
  39+ E4B0 80 00 08 00
  39+ E4B4 01 00 00 30
  39+ E4B8 08 00 80 00
  39+ E4BC 00 00 00 BD
  40+ E4C0 80 00 00 00      DB $80,$00,$00,$00,$00,$01,$00,$00,$30,$00,$80,$00,$02,$00,$00,$01,$80,$00,$00,$40,$00,$01,$00,$0C,$00,$00,$80,$00,$00,$00,$00,$BD
  40+ E4C4 00 01 00 00
  40+ E4C8 30 00 80 00
  40+ E4CC 02 00 00 01
  40+ E4D0 80 00 00 40
  40+ E4D4 00 01 00 0C
  40+ E4D8 00 00 80 00
  40+ E4DC 00 00 00 BD
  41+ E4E0 80 00 00 00      DB $80,$00,$00,$00,$00,$01,$00,$00,$00,$00,$00,$03,$FC,$00,$00,$01,$80,$00,$00,$3F,$C0,$00,$00,$00,$00,$00,$80,$00,$00,$00,$00,$BD
  41+ E4E4 00 01 00 00
  41+ E4E8 00 00 00 03
  41+ E4EC FC 00 00 01
  41+ E4F0 80 00 00 3F
  41+ E4F4 C0 00 00 00
  41+ E4F8 00 00 80 00
  41+ E4FC 00 00 00 BD
  42+ E500 B0 C3 80 01      DB $B0,$C3,$80,$01,$00,$03,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$C0,$00,$80,$01,$06,$7D ; row 6
  42+ E504 00 03 00 00
  42+ E508 00 00 00 00
  42+ E50C 00 00 00 00
  42+ E510 00 00 00 00
  42+ E514 00 00 00 00
  42+ E518 00 00 C0 00
  42+ E51C 80 01 06 7D
  43+ E520 B2 3C 00 00      DB $B2,$3C,$00,$00,$00,$01,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$C0,$00,$80,$01,$66,$65
  43+ E524 00 01 00 00
  43+ E528 00 00 00 00
  43+ E52C 00 00 00 00
  43+ E530 00 00 00 00
  43+ E534 00 00 00 00
  43+ E538 00 00 C0 00
  43+ E53C 80 01 66 65
  44+ E540 B0 66 80 01      DB $B0,$66,$80,$01,$00,$03,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$C0,$00,$80,$01,$66,$61
  44+ E544 00 03 00 00
  44+ E548 00 00 00 00
  44+ E54C 00 00 00 00
  44+ E550 00 00 00 00
  44+ E554 00 00 00 00
  44+ E558 00 00 C0 00
  44+ E55C 80 01 66 61
  45+ E560 B2 18 80 01      DB $B2,$18,$80,$01,$00,$03,$00,$00,$00,$00,$00,$1F,$C1,$AA,$AA,$AA,$55,$55,$57,$83,$F8,$00,$00,$00,$00,$00,$80,$00,$00,$00,$00,$01
  45+ E564 00 03 00 00
  45+ E568 00 00 00 1F
  45+ E56C C1 AA AA AA
  45+ E570 55 55 57 83
  45+ E574 F8 00 00 00
  45+ E578 00 00 80 00
  45+ E57C 00 00 00 01
  46+ E580 B0 18 80 01      DB $B0,$18,$80,$01,$00,$03,$00,$00,$60,$01,$00,$01,$00,$01,$04,$01,$80,$20,$80,$00,$80,$00,$80,$06,$00,$00,$80,$00,$00,$00,$00,$99
  46+ E584 00 03 00 00
  46+ E588 60 01 00 01
  46+ E58C 00 01 04 01
  46+ E590 80 20 80 00
  46+ E594 80 00 80 06
  46+ E598 00 00 80 00
  46+ E59C 00 00 00 99
  47+ E5A0 B2 30 80 01      DB $B2,$30,$80,$01,$00,$03,$00,$10,$18,$00,$01,$00,$00,$20,$00,$01,$80,$00,$04,$00,$00,$80,$00,$18,$08,$00,$80,$00,$00,$00,$00,$A1
  47+ E5A4 00 03 00 10
  47+ E5A8 18 00 01 00
  47+ E5AC 00 20 00 01
  47+ E5B0 80 00 04 00
  47+ E5B4 00 80 00 18
  47+ E5B8 08 00 80 00
  47+ E5BC 00 00 00 A1
  48+ E5C0 80 00 00 00      DB $80,$00,$00,$00,$00,$01,$00,$00,$0E,$AB,$AA,$AA,$AE,$AA,$AA,$AA,$55,$55,$55,$75,$55,$55,$D5,$70,$00,$00,$80,$00,$00,$00,$00,$85
  48+ E5C4 00 01 00 00
  48+ E5C8 0E AB AA AA
  48+ E5CC AE AA AA AA
  48+ E5D0 55 55 55 75
  48+ E5D4 55 55 D5 70
  48+ E5D8 00 00 80 00
  48+ E5DC 00 00 00 85
  49+ E5E0 80 00 00 00      DB $80,$00,$00,$00,$00,$01,$00,$00,$00,$00,$00,$00,$03,$FF,$F0,$01,$80,$0F,$FF,$C0,$00,$00,$00,$00,$00,$00,$80,$00,$00,$00,$00,$89
  49+ E5E4 00 01 00 00
  49+ E5E8 00 00 00 00
  49+ E5EC 03 FF F0 01
  49+ E5F0 80 0F FF C0
  49+ E5F4 00 00 00 00
  49+ E5F8 00 00 80 00
  49+ E5FC 00 00 00 89
  50+ E600 B0 C3 92 49      DB $B0,$C3,$92,$49,$24,$93,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$C9,$24,$92,$49,$3C,$61 ; row 7
  50+ E604 24 93 00 00
  50+ E608 00 00 00 00
  50+ E60C 00 00 00 00
  50+ E610 00 00 00 00
  50+ E614 00 00 00 00
  50+ E618 00 00 C9 24
  50+ E61C 92 49 3C 61
  51+ E620 80 00 00 00      DB $80,$00,$00,$00,$00,$01,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$C9,$24,$92,$49,$66,$39
  51+ E624 00 01 00 00
  51+ E628 00 00 00 00
  51+ E62C 00 00 00 00
  51+ E630 00 00 00 00
  51+ E634 00 00 00 00
  51+ E638 00 00 C9 24
  51+ E63C 92 49 66 39
  52+ E640 B0 3C 92 49      DB $B0,$3C,$92,$49,$24,$93,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$C9,$24,$92,$49,$7C,$7D
  52+ E644 24 93 00 00
  52+ E648 00 00 00 00
  52+ E64C 00 00 00 00
  52+ E650 00 00 00 00
  52+ E654 00 00 00 00
  52+ E658 00 00 C9 24
  52+ E65C 92 49 7C 7D
  53+ E660 9C 18 92 49      DB $9C,$18,$92,$49,$24,$93,$00,$00,$00,$00,$03,$E0,$02,$60,$10,$01,$80,$08,$06,$40,$07,$E0,$00,$00,$00,$00,$80,$00,$00,$00,$00,$01
  53+ E664 24 93 00 00
  53+ E668 00 00 03 E0
  53+ E66C 02 60 10 01
  53+ E670 80 08 06 40
  53+ E674 07 E0 00 00
  53+ E678 00 00 80 00
  53+ E67C 00 00 00 01
  54+ E680 BE 18 92 49      DB $BE,$18,$92,$49,$24,$93,$00,$01,$AA,$AE,$AA,$AA,$AA,$AA,$AB,$AA,$55,$D5,$55,$55,$55,$55,$75,$55,$80,$00,$80,$00,$00,$00,$00,$99
  54+ E684 24 93 00 01
  54+ E688 AA AE AA AA
  54+ E68C AA AA AB AA
  54+ E690 55 D5 55 55
  54+ E694 55 55 75 55
  54+ E698 80 00 80 00
  54+ E69C 00 00 00 99
  55+ E6A0 B2 3E 92 49      DB $B2,$3E,$92,$49,$24,$93,$00,$10,$60,$00,$02,$00,$00,$20,$00,$01,$80,$00,$04,$00,$00,$40,$00,$06,$08,$00,$80,$00,$00,$00,$00,$BD
  55+ E6A4 24 93 00 10
  55+ E6A8 60 00 02 00
  55+ E6AC 00 20 00 01
  55+ E6B0 80 00 04 00
  55+ E6B4 00 40 00 06
  55+ E6B8 08 00 80 00
  55+ E6BC 00 00 00 BD
  56+ E6C0 80 00 00 00      DB $80,$00,$00,$00,$00,$01,$00,$00,$03,$02,$00,$00,$04,$00,$00,$01,$80,$00,$00,$20,$00,$00,$00,$C0,$00,$00,$80,$00,$00,$00,$00,$B9
  56+ E6C4 00 01 00 00
  56+ E6C8 03 02 00 00
  56+ E6CC 04 00 00 01
  56+ E6D0 80 00 00 20
  56+ E6D4 00 00 00 C0
  56+ E6D8 00 00 80 00
  56+ E6DC 00 00 00 B9
  57+ E6E0 80 00 00 00      DB $80,$00,$00,$00,$00,$01,$00,$00,$00,$00,$00,$00,$00,$00,$0F,$FF,$FF,$F0,$00,$00,$00,$00,$00,$00,$00,$00,$80,$00,$00,$00,$00,$89
  57+ E6E4 00 01 00 00
  57+ E6E8 00 00 00 00
  57+ E6EC 00 00 0F FF
  57+ E6F0 FF F0 00 00
  57+ E6F4 00 00 00 00
  57+ E6F8 00 00 80 00
  57+ E6FC 00 00 00 89
  58+ E700 80 C3 FF FF      DB $80,$C3,$FF,$FF,$FF,$FF,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$FF,$FF,$FF,$FF,$00,$61 ; row 8
  58+ E704 FF FF 00 00
  58+ E708 00 00 00 00
  58+ E70C 00 00 00 00
  58+ E710 00 00 00 00
  58+ E714 00 00 00 00
  58+ E718 00 00 FF FF
  58+ E71C FF FF 00 61
  59+ E720 FF FF FF FF      DB $FF,$FF,$FF,$FF,$FF,$FF,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$FF,$FF,$FF,$FF,$00,$01
  59+ E724 FF FF 00 00
  59+ E728 00 00 00 00
  59+ E72C 00 00 00 00
  59+ E730 00 00 00 00
  59+ E734 00 00 00 00
  59+ E738 00 00 FF FF
  59+ E73C FF FF 00 01
  60+ E740 80 00 FF FF      DB $80,$00,$FF,$FF,$FF,$FF,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$FF,$FF,$FF,$FF,$00,$01
  60+ E744 FF FF 00 00
  60+ E748 00 00 00 00
  60+ E74C 00 00 00 00
  60+ E750 00 00 00 00
  60+ E754 00 00 00 00
  60+ E758 00 00 FF FF
  60+ E75C FF FF 00 01
  61+ E760 80 00 FF FF      DB $80,$00,$FF,$FF,$FF,$FF,$00,$00,$00,$00,$7D,$8A,$AE,$BA,$AA,$AA,$55,$55,$5D,$75,$51,$BE,$00,$00,$00,$00,$80,$00,$00,$00,$00,$01
  61+ E764 FF FF 00 00
  61+ E768 00 00 7D 8A
  61+ E76C AE BA AA AA
  61+ E770 55 55 5D 75
  61+ E774 51 BE 00 00
  61+ E778 00 00 80 00
  61+ E77C 00 00 00 01
  62+ E780 80 00 FF FF      DB $80,$00,$FF,$FF,$FF,$FF,$00,$03,$00,$08,$00,$04,$00,$02,$00,$81,$81,$00,$40,$00,$20,$00,$10,$00,$C0,$00,$FF,$FF,$FF,$FF,$FF,$FF
  62+ E784 FF FF 00 03
  62+ E788 00 08 00 04
  62+ E78C 00 02 00 81
  62+ E790 81 00 40 00
  62+ E794 20 00 10 00
  62+ E798 C0 00 FF FF
  62+ E79C FF FF FF FF
  63+ E7A0 80 00 FF FF      DB $80,$00,$FF,$FF,$FF,$FF,$00,$08,$C0,$00,$04,$00,$00,$40,$00,$01,$80,$00,$02,$00,$00,$20,$00,$03,$10,$00,$FF,$FF,$FF,$FF,$FF,$FF
  63+ E7A4 FF FF 00 08
  63+ E7A8 C0 00 04 00
  63+ E7AC 00 40 00 01
  63+ E7B0 80 00 02 00
  63+ E7B4 00 20 00 03
  63+ E7B8 10 00 FF FF
  63+ E7BC FF FF FF FF
  64+ E7C0 80 00 00 00      DB $80,$00,$00,$00,$00,$01,$00,$00,$00,$E4,$00,$00,$08,$00,$00,$01,$80,$00,$00,$10,$00,$00,$27,$00,$00,$00,$FF,$FF,$FF,$FF,$FF,$FF
  64+ E7C4 00 01 00 00
  64+ E7C8 00 E4 00 00
  64+ E7CC 08 00 00 01
  64+ E7D0 80 00 00 10
  64+ E7D4 00 00 27 00
  64+ E7D8 00 00 FF FF
  64+ E7DC FF FF FF FF
  65+ E7E0 80 00 00 00      DB $80,$00,$00,$00,$00,$01,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$FF,$FF,$FF,$FF,$FF,$FF
  65+ E7E4 00 01 00 00
  65+ E7E8 00 00 00 00
  65+ E7EC 00 00 00 00
  65+ E7F0 00 00 00 00
  65+ E7F4 00 00 00 00
  65+ E7F8 00 00 FF FF
  65+ E7FC FF FF FF FF
  66+ E800              ConsoleAttributes:
  67+ E800 07 07 07 07      DB $07,$07,$07,$07,$07,$07,$45,$45,$45,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$41,$41,$41,$07,$07,$07,$07,$07,$07
  67+ E804 07 07 45 45
  67+ E808 45 00 00 00
  67+ E80C 00 00 00 00
  67+ E810 00 00 00 00
  67+ E814 00 00 00 41
  67+ E818 41 41 07 07
  67+ E81C 07 07 07 07
  68+ E820 07 07 07 07      DB $07,$07,$07,$07,$07,$07,$05,$45,$05,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$01,$41,$01,$07,$07,$07,$07,$07,$07
  68+ E824 07 07 05 45
  68+ E828 05 00 00 00
  68+ E82C 00 00 00 00
  68+ E830 00 00 00 00
  68+ E834 00 00 00 01
  68+ E838 41 01 07 07
  68+ E83C 07 07 07 07
  69+ E840 07 07 07 07      DB $07,$07,$07,$07,$07,$07,$45,$45,$45,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$41,$41,$41,$07,$07,$07,$07,$07,$07
  69+ E844 07 07 45 45
  69+ E848 45 00 00 00
  69+ E84C 00 00 00 00
  69+ E850 00 00 00 00
  69+ E854 00 00 00 41
  69+ E858 41 41 07 07
  69+ E85C 07 07 07 07
  70+ E860 07 07 07 07      DB $07,$07,$07,$07,$07,$07,$00,$00,$00,$00,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$00,$00,$00,$00,$07,$00,$00,$00,$00,$07
  70+ E864 07 07 00 00
  70+ E868 00 00 42 42
  70+ E86C 42 42 42 42
  70+ E870 42 42 42 42
  70+ E874 42 42 00 00
  70+ E878 00 00 07 00
  70+ E87C 00 00 00 07
  71+ E880 07 07 07 07      DB $07,$07,$07,$07,$07,$07,$00,$02,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$02,$00,$07,$07,$07,$07,$07,$07
  71+ E884 07 07 00 02
  71+ E888 42 42 42 42
  71+ E88C 42 42 42 42
  71+ E890 42 42 42 42
  71+ E894 42 42 42 42
  71+ E898 02 00 07 07
  71+ E89C 07 07 07 07
  72+ E8A0 07 07 07 07      DB $07,$07,$07,$07,$07,$07,$00,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$00,$07,$07,$07,$07,$07,$07
  72+ E8A4 07 07 00 02
  72+ E8A8 02 02 02 02
  72+ E8AC 02 02 02 02
  72+ E8B0 02 02 02 02
  72+ E8B4 02 02 02 02
  72+ E8B8 02 00 07 07
  72+ E8BC 07 07 07 07
  73+ E8C0 07 00 00 00      DB $07,$00,$00,$00,$00,$07,$00,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$00,$07,$07,$07,$07,$07,$07
  73+ E8C4 00 07 00 02
  73+ E8C8 02 02 02 02
  73+ E8CC 02 02 02 02
  73+ E8D0 02 02 02 02
  73+ E8D4 02 02 02 02
  73+ E8D8 02 00 07 07
  73+ E8DC 07 07 07 07
  74+ E8E0 07 07 07 07      DB $07,$07,$07,$07,$07,$07,$00,$00,$00,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$00,$00,$00,$07,$07,$07,$07,$07,$07
  74+ E8E4 07 07 00 00
  74+ E8E8 00 02 02 02
  74+ E8EC 02 02 02 02
  74+ E8F0 02 02 02 02
  74+ E8F4 02 02 02 00
  74+ E8F8 00 00 07 07
  74+ E8FC 07 07 07 07
  75+ E900
  76+ E900
# file closed: ./Images/ConsoleImageData.asm
 902  E900                                  DISPLAY "Bank ",BankConsole," - Bytes free ",/D, $2000 - ($-ConsoleImageAddr), " - BankConsole"
 903  E900                                  ASSERT $-ConsoleImageAddr <8912 , Bank code leaks over 8K boundary
 904  E900              ; Bank 62  ------------------------------------------------------------------------------------------------------------------------
 905  E900                                  SLOT    ViewFrontAddr
 906  E900                                  PAGE    BankFrontView
 907  E900                                  ORG     ViewFrontAddr
 908  C000                                  INCLUDE "./Views/Front_View.asm"
# file opened: ./Views/Front_View.asm
   1+ C000
   2+ C000 46 72 6F 6E  front_page_page_marker  DB "FrontView   PG62"
   2+ C004 74 56 69 65
   2+ C008 77 20 20 20
   2+ C00C 50 47 36 32
   3+ C010
   4+ C010 47           draw_front_calc_alpha:  ld      b,a
   5+ C011 E6 80                                and     $80
   6+ C013 32 D1 7E                             ld      (ALP2),a                            ; set sign
   7+ C016 4F                                   ld      c,a                                 ; save sign
   8+ C017 EE 80                                xor     $80
   9+ C019 32 D2 7E                             ld      (ALP2FLIP),a                        ; and oppsite sign
  10+ C01C 3A CD 7E                             ld      a,(JSTX)
  11+ C01F ED 27 80                             test    $80
  12+ C022 28 02                                jr      z,  .PositiveRoll
  13+ C024 ED 44        .NegativeRoll:          neg
  14+ C026 CB 3F        .PositiveRoll           srl     a                                   ; divide sign by 4
  15+ C028 CB 3F                                srl     a
  16+ C02A FE 08                                cp      8
  17+ C02C 38 02                                jr      c,.NotIncreasedDamp                 ; if a < 8 divide by 2 again
  18+ C02E CB 3F        .IncreasedDamp          srl     a
  19+ C030 32 D0 7E     .NotIncreasedDamp:      ld      (ALP1),a
  20+ C033 B1                                   or      c
  21+ C034 32 CF 7E                             ld      (ALPHA),a                           ; a = signed bit alph1
  22+ C037 21 03 C3     .RestartDampenRoll:     ld      hl,dampenRcounter
  23+ C03A 36 04                                ld      (hl),dampenRate
  24+ C03C C9                                   ret
  25+ C03D
  26+ C03D              ; Do the same for pitch
  27+ C03D 47           draw_front_calc_beta:   ld      b,a
  28+ C03E E6 80                                and     $80
  29+ C040 32 C5 7E                             ld      (BET2),a                            ; set sign
  30+ C043 4F                                   ld      c,a                                 ; save sign
  31+ C044 EE 80                                xor     $80
  32+ C046 32 C6 7E                             ld      (BET2FLIP),a                        ; and oppsite sign
  33+ C049 3A C3 7E                             ld      a,(JSTY)
  34+ C04C ED 27 80                             test    $80
  35+ C04F 28 02                                jr      z,  .PositivePitch
  36+ C051 ED 44        .NegativePitch:         neg
  37+ C053 CB 3F        .PositivePitch:         srl     a                                   ; divide sign by 4
  38+ C055 CB 3F                                srl     a
  39+ C057 FE 08                                cp      8
  40+ C059 38 02                                jr      c,.NotIncreasedDamp                 ; if a < 8 divide by 2 again
  41+ C05B CB 3F        .IncreasedDamp          srl     a
  42+ C05D 32 C4 7E     .NotIncreasedDamp:      ld      (BET1),a
  43+ C060 B1                                   or      c
  44+ C061 32 C2 7E                             ld      (BETA),a                            ; a = signed bit bet1
  45+ C064 21 04 C3     .RestartDampenPitch:    ld      hl,dampenPcounter          ; TODO mach dampen rates ship properies by having teh $20 as a ship config
  46+ C067 36 04                                ld      (hl),dampenRate
  47+ C069 C9                                   ret
  48+ C06A
  49+ C06A              initialise_front_view:
  50+ C06A
  51+ C06A              draw_front_view:        MMUSelectLayer1
  51+ C06A ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
  52+ C06E CD 8F E0                             call    l1_cls
  53+ C071 CD A9 E0                             call    l1_attr_cls
  54+ C074                                      MMUSelectLayer2
  54+ C074 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
  55+ C078 CD 06 E0                             call    asm_l2_double_buffer_on
  56+ C07B CD 85 E3                             call    l2_initialise
  57+ C07E                                      MMUSelectSpriteBank
  57+ C07E ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
  58+ C082 CD EA E7                             call    init_sprites_spr_prity
  59+ C085 CD B7 E7                             call    sprite_cls_cursors
  60+ C088 CD D3 E2                             call    sprite_reticule
  61+ C08B CD 40 E4                             call    sprite_laser
  62+ C08E CD 4A E6                             call    sprite_targetting
  63+ C091 CD 7C E6                             call    sprite_lock
  64+ C094 CD DF E6                             call    sprite_targetting_hide      ; do not show targeting initially
  65+ C097 CD 90 E2                             call    sprite_ECM
  66+ C09A CD B7 E2                             call    sprite_missile_1
  67+ C09D CD BE E2                             call    sprite_missile_2
  68+ C0A0 CD C5 E2                             call    sprite_missile_3
  69+ C0A3 CD CC E2                             call    sprite_missile_4
  70+ C0A6 CD 10 E6                             call    sprite_ecm_hide
  71+ C0A9 CD 3D E6                             call    sprite_missile_all_hide
  72+ C0AC CD 76 E1                             call    sprite_sun_compass
  73+ C0AF CD C2 E1                             call    sprite_planet_compass
  74+ C0B2 CD 0E E2                             call    sprite_station_compass
  75+ C0B5                                     ; call    sprite_laser_show
  76+ C0B5                                      MMUSelectConsoleBank
  76+ C0B5 ED 91 57 3D >					 nextreg ConsoleImageDataMMU,  BankConsole
  77+ C0B9 21 00 50                             ld          hl,ScreenL1Bottom       ; now the pointers are in Ubnk its easy to read
  78+ C0BC 11 00 E0                             ld          de,ConsoleImageData
  79+ C0BF 01 00 08                             ld          bc, ScreenL1BottomLen
  80+ C0C2 CD 58 7E                             call        memcopy_dma
  81+ C0C5 21 00 5A                             ld          hl,ScreenL1AttrBtm       ; now the pointers are in Ubnk its easy to read
  82+ C0C8 11 00 E8                             ld          de,ConsoleAttributes
  83+ C0CB 01 00 01                             ld          bc, ScreenL1AttrBtmLen
  84+ C0CE CD 58 7E                             call        memcopy_dma
  85+ C0D1 CD DA 7B                             call        InitialiseStars
  86+ C0D4 AF                                   xor         a
  87+ C0D5 32 94 81                             ld          (DockedFlag),a              ; we can never be docked if we hit a view screen
  88+ C0D8 32 DF C0                             ld          (CurrentLock),a             ; we are on no targetting sprites
  89+ C0DB 32 E0 C0                             ld          (ShowingLock),a
  90+ C0DE C9                                   ret
  91+ C0DF
  92+ C0DF 00           CurrentLock             DB      0
  93+ C0E0 00           ShowingLock             DB      0
  94+ C0E1 3A 58 82     update_front_view:      ld      a,(MissileTargettingFlag)
  95+ C0E4                                      JumpIfANEquNusng StageMissileNotTargeting,  .NoTarget
  95+ C0E4 FE FF       >                        cp     StageMissileNotTargeting
  95+ C0E6 CA F6 C0    >                        jp     z,.NoTarget
  96+ C0E9                                      JumpIfANEquNusng StageMissileTargeting, .Targetting
  96+ C0E9 FE FE       >                        cp     StageMissileTargeting
  96+ C0EB CA 03 C1    >                        jp     z,.Targetting
  97+ C0EE CB 7F                                bit     7,a
  98+ C0F0 20 26                                jr      nz, .Locked
  99+ C0F2 CD DF E6                             call    sprite_targetting_hide
 100+ C0F5 C9                                   ret
 101+ C0F6 3A E0 C0     .NoTarget:              ld      a,(ShowingLock)
 102+ C0F9                                      ReturnIfAIsZero
 102+ C0F9 A7          >                        and     a
 102+ C0FA C8          >                        ret     z
 103+ C0FB                                      MMUSelectSpriteBank
 103+ C0FB ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
 104+ C0FF CD DF E6                             call     sprite_targetting_hide
 105+ C102 C9                                   ret
 106+ C103              .Targetting:            CallIfMemZero CurrentLock, sprite_targetting
 106+ C103 3A DF C0    >                        ld      a,(CurrentLock)
 106+ C106 A7          >                        and     a
 106+ C107 CC 4A E6    >                        call    z, sprite_targetting
 107+ C10A                                      CallIfMemZero ShowingLock, sprite_targetting_show
 107+ C10A 3A E0 C0    >                        ld      a,(ShowingLock)
 107+ C10D A7          >                        and     a
 107+ C10E CC F0 E6    >                        call    z, sprite_targetting_show
 108+ C111 21 00 01                             ld      hl,$0100                        ; set both bytes in one go
 109+ C114 22 DF C0                             ld      (CurrentLock),hl
 110+ C117 C9                                   ret
 111+ C118              .Locked:                CallIfMemNotZero CurrentLock, sprite_lock
 111+ C118 3A DF C0    >                        ld      a,(CurrentLock)
 111+ C11B A7          >                        and     a
 111+ C11C C4 7C E6    >                        call    nz, sprite_lock
 112+ C11F                                      CallIfMemZero ShowingLock, sprite_targetting_show
 112+ C11F 3A E0 C0    >                        ld      a,(ShowingLock)
 112+ C122 A7          >                        and     a
 112+ C123 CC F0 E6    >                        call    z, sprite_targetting_show
 113+ C126 21 01 01                             ld      hl,$0101                        ; set both bytes in one go
 114+ C129 22 DF C0                             ld      (CurrentLock),hl
 115+ C12C C9                                   ret
 116+ C12D
 117+ C12D                                      ;  1......................  2......................  3......................  4......................  5......................  6...................... 7......................  8......................
 118+ C12D                                      ;  1......................  2......................  3......................  4......................  5......................  6...................... 7......................  8......................
 119+ C12D 80 40 60 28  LightningLines:         db 128, 064, 096, 040, 255, 097, 042, 076, 035, 031, 082, 039, 079, 020, 026, 079, 026, 058, 018, 022, 064, 021, 032, 026, 018, 038, 025, 030, 009, 026, 035, 020, 005, 016, 018, 037, 021, 000, 000, 018
 119+ C131 FF 61 2A 4C
 119+ C135 23 1F 52 27
 119+ C139 4F 14 1A 4F
 119+ C13D 1A 3A 12 16
 119+ C141 40 15 20 1A
 119+ C145 12 26 19 1E
 119+ C149 09 1A 23 14
 119+ C14D 05 10 12 25
 119+ C151 15 00 00 12
 120+ C155 80 40 8B 28                          db 128, 064, 139, 040, 255, 137, 045, 160, 035, 031, 150, 040, 157, 056, 026, 160, 036, 175, 010, 022, 156, 037, 196, 040, 018, 197, 041, 223, 033, 026, 223, 033, 245, 030, 018, 223, 032, 254, 047, 018
 120+ C159 FF 89 2D A0
 120+ C15D 23 1F 96 28
 120+ C161 9D 38 1A A0
 120+ C165 24 AF 0A 16
 120+ C169 9C 25 C4 28
 120+ C16D 12 C5 29 DF
 120+ C171 21 1A DF 21
 120+ C175 F5 1E 12 DF
 120+ C179 20 FE 2F 12
 121+ C17D 80 40 5A 59                          db 128, 064, 090, 089, 255, 089, 089, 064, 098, 031, 079, 092, 064, 072, 025, 065, 075, 030, 070, 022, 035, 071, 038, 064, 018, 067, 095, 021, 099, 026, 031, 097, 000, 080, 018, 031, 097, 021, 110, 018
 121+ C181 FF 59 59 40
 121+ C185 62 1F 4F 5C
 121+ C189 40 48 19 41
 121+ C18D 4B 1E 46 16
 121+ C191 23 47 26 40
 121+ C195 12 43 5F 15
 121+ C199 63 1A 1F 61
 121+ C19D 00 50 12 1F
 121+ C1A1 61 15 6E 12
 122+ C1A5 80 40 61 71                          db 128, 064, 097, 113, 255, 098, 110, 064, 115, 031, 070, 115, 073, 127, 025, 071, 114, 060, 112, 022, 030, 120, 020, 126, 018, 070, 114, 050, 120, 026, 050, 120, 027, 119, 018, 020, 125, 010, 120, 018
 122+ C1A9 FF 62 6E 40
 122+ C1AD 73 1F 46 73
 122+ C1B1 49 7F 19 47
 122+ C1B5 72 3C 70 16
 122+ C1B9 1E 78 14 7E
 122+ C1BD 12 46 72 32
 122+ C1C1 78 1A 32 78
 122+ C1C5 1B 77 12 14
 122+ C1C9 7D 0A 78 12
 123+ C1CD 80 40 84 59                          db 128, 064, 132, 089, 255, 131, 081, 145, 098, 031, 145, 097, 133, 103, 025, 145, 098, 150, 110, 022, 150, 109, 154, 105, 018, 150, 110, 146, 120, 026, 145, 120, 140, 126, 018, 147, 120, 159, 126, 018
 123+ C1D1 FF 83 51 91
 123+ C1D5 62 1F 91 61
 123+ C1D9 85 67 19 91
 123+ C1DD 62 96 6E 16
 123+ C1E1 96 6D 9A 69
 123+ C1E5 12 96 6E 92
 123+ C1E9 78 1A 91 78
 123+ C1ED 8C 7E 12 93
 123+ C1F1 78 9F 7E 12
 124+ C1F5 80 40 9F 67                          db 128, 064, 159, 103, 255, 161, 102, 171, 108, 031, 160, 102, 175, 127, 025, 175, 124, 200, 122, 022, 200, 121, 223, 120, 018, 224, 120, 225, 127, 026, 224, 119, 245, 116, 018, 246, 117, 254, 123, 018
 124+ C1F9 FF A1 66 AB
 124+ C1FD 6C 1F A0 66
 124+ C201 AF 7F 19 AF
 124+ C205 7C C8 7A 16
 124+ C209 C8 79 DF 78
 124+ C20D 12 E0 78 E1
 124+ C211 7F 1A E0 77
 124+ C215 F5 74 12 F6
 124+ C219 75 FE 7B 12
 125+ C21D 80 40 91 4A                          db 128, 064, 145, 074, 255, 145, 073, 158, 072, 031, 159, 072, 179, 064, 025, 159, 073, 185, 085, 022, 182, 084, 197, 076, 018, 195, 075, 207, 079, 026, 206, 079, 245, 063, 018, 206, 080, 245, 105, 018
 125+ C221 FF 91 49 9E
 125+ C225 48 1F 9F 48
 125+ C229 B3 40 19 9F
 125+ C22D 49 B9 55 16
 125+ C231 B6 54 C5 4C
 125+ C235 12 C3 4B CF
 125+ C239 4F 1A CE 4F
 125+ C23D F5 3F 12 CE
 125+ C241 50 F5 69 12
 126+ C245
 127+ C245              ; Draw line at hl for b lines
 128+ C245 E5 C5        DrawLighningLine:       push    hl,,bc
 129+ C247 4E                                   ld      c,(hl)
 130+ C248 23                                   inc     hl
 131+ C249 46                                   ld      b,(hl)
 132+ C24A 23                                   inc     hl
 133+ C24B 5E                                   ld      e,(hl)
 134+ C24C 23                                   inc     hl
 135+ C24D 56                                   ld      d,(hl)
 136+ C24E 23                                   inc     hl
 137+ C24F 7E                                   ld      a,(hl)          ; colour
 138+ C250 CD ED EA                             call    l2_draw_diagonal
 139+ C253 C1 E1                                pop     hl,,bc
 140+ C255 3E 05                                ld      a,5
 141+ C257 ED 31                                add     hl,a
 142+ C259 10 EA                                djnz    DrawLighningLine
 143+ C25B C9                                   ret
 144+ C25C
 145+ C25C              ;Loop though all lines
 146+ C25C              ;   60$% chance of drawing a line, call draw line
 147+ C25C              ;   go to next line
 148+ C25C              ;repeat
 149+ C25C 06 07        hyperspace_Lightning:   ld      b, 7                    ; total number of lightning bolts
 150+ C25E 21 2D C1                             ld      hl,LightningLines
 151+ C261                                      MMUSelectLayer2
 151+ C261 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 152+ C265                                      ;break
 153+ C265              ; above here select which lines table we will use
 154+ C265 C5 E5        .LineLoop:              push    bc,,hl
 155+ C267 CD EC 85                             call    doRandom
 156+ C26A FE 1E                                cp      30
 157+ C26C 30 0C                                jr      nc,.NextLine
 158+ C26E CD EC 85                             call    doRandom
 159+ C271 E6 07                                and     $07
 160+ C273 3C                                   inc     a
 161+ C274 47                                   ld      b,a
 162+ C275 E1                                   pop     hl
 163+ C276 E5                                   push    hl
 164+ C277 CD 45 C2                             call    DrawLighningLine
 165+ C27A E1 C1        .NextLine:              pop     bc,,hl
 166+ C27C 16 08                                ld      d,8
 167+ C27E 1E 05                                ld      e,5
 168+ C280 ED 30                                mul
 169+ C282 19                                   add     hl,de
 170+ C283 10 E0                                djnz    .LineLoop
 171+ C285 3A 9E 81                             ld      a,(HyperCircle)
 172+ C288 57                                   ld      d,a
 173+ C289 01 80 40                             ld      bc, $4080
 174+ C28C                                      ;break
 175+ C28C 1E 00                                ld      e,$00
 176+ C28E CD 5B F2                             call    l2_draw_circle_fill; ; ">l2_draw_circle_fill BC = center row col, d = radius, e = colour"
 177+ C291 01 80 40                             ld      bc, $4080
 178+ C294 3A 9E 81                             ld      a,(HyperCircle)
 179+ C297 3C                                   inc     a
 180+ C298 57                                   ld      d,a
 181+ C299 1E FF                                ld      e,$FF
 182+ C29B CD 3F EF                             call    l2_draw_circle
 183+ C29E 3A 9E 81                             ld      a,(HyperCircle)
 184+ C2A1 3C                                   inc     a
 185+ C2A2 3C                                   inc     a
 186+ C2A3 FE 40                                cp      64
 187+ C2A5 D0                                   ret     nc
 188+ C2A6 32 9E 81                             ld      (HyperCircle),a
 189+ C2A9                                      SetCarryFlag
 189+ C2A9 37          >                        scf
 190+ C2AA C9                                   ret
 191+ C2AB
 192+ C2AB
 193+ C2AB              draw_hyperspace:        MMUSelectLayer1
 193+ C2AB ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 194+ C2AF CD 8F E0                             call    l1_cls
 195+ C2B2 CD A9 E0                             call    l1_attr_cls
 196+ C2B5                                      MMUSelectLayer2
 196+ C2B5 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 197+ C2B9 CD 06 E0                             call     asm_l2_double_buffer_on
 198+ C2BC                                      MMUSelectSpriteBank
 198+ C2BC ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
 199+ C2C0 CD B7 E7                             call    sprite_cls_cursors
 200+ C2C3                                      MMUSelectConsoleBank
 200+ C2C3 ED 91 57 3D >					 nextreg ConsoleImageDataMMU,  BankConsole
 201+ C2C7 21 00 50                             ld          hl,ScreenL1Bottom       ; now the pointers are in Ubnk its easy to read
 202+ C2CA 11 00 E0                             ld          de,ConsoleImageData
 203+ C2CD 01 00 08                             ld          bc, ScreenL1BottomLen
 204+ C2D0 CD 58 7E                             call        memcopy_dma
 205+ C2D3 21 00 5A                             ld          hl,ScreenL1AttrBtm       ; now the pointers are in Ubnk its easy to read
 206+ C2D6 11 00 E8                             ld          de,ConsoleAttributes
 207+ C2D9 01 00 01                             ld          bc, ScreenL1AttrBtmLen
 208+ C2DC CD 58 7E                             call        memcopy_dma
 209+ C2DF CD E5 7B                             call        InitialiseHyperStars
 210+ C2E2 AF                                   xor         a
 211+ C2E3 32 94 81                             ld          (DockedFlag),a              ; we can never be docked if we hit a view screen
 212+ C2E6 3E 02                                ld          a,2
 213+ C2E8 32 9E 81                             ld          (HyperCircle),a
 214+ C2EB 3E FC                                ld          a,$FC
 215+ C2ED 32 94 81                             ld          (DockedFlag),a
 216+ C2F0 C9                                   ret
 217+ C2F1
 218+ C2F1              ;----------------------------------------------------------------------------------------------------------------------------------
 219+ C2F1              front_warp:             ;call        SaveCurrentDust                         ; save current dust positions
 220+ C2F1 06 AF                                ld          b,175                                    ; loop for x iterations
 221+ C2F3 C5           .warploop:              push        bc
 222+ C2F4 CD 3D 7C                             call        DustForward
 223+ C2F7                                      MMUSelectLayer2
 223+ C2F7 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 224+ C2FB CD 04 E4                             call        l2_flip_buffers
 225+ C2FE C1                                   pop         bc
 226+ C2FF 10 F2                                djnz        .warploop
 227+ C301 C9                                   ret
 228+ C302
 229+ C302              ;----------------------------------------------------------------------------------------------------------------------------------
 230+ C302 C9           loop_hyperspace         ret
 231+ C303              ;----------------------------------------------------------------------------------------------------------------------------------
 232+ C303              dampenRate:             equ     $04
 233+ C303 04           dampenRcounter:         DB      dampenRate
 234+ C304 04           dampenPcounter:         DB      dampenRate
 235+ C305              ;----------------------------------------------------------------------------------------------------------------------------------
 236+ C305              input_front_view:       ;DEFUNCT ClearEngineSoundChanged
 237+ C305 2A 59 E0                             ld      hl,(addr_Pressed_Accellerate)
 238+ C308 7E                                   ld      a,(hl)
 239+ C309                                      JumpIfAIsZero     .TestDecellerate
 239+ C309 A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
 239+ C30A CA 26 C3    >                        jp	    z, .TestDecellerate
 240+ C30D 3A AF 7F                             ld      a,(SHIPMAXSPEED)
 241+ C310 57                                   ld      d,a
 242+ C311 3A B0 7F                             ld      a,(DELTA)
 243+ C314                                      JumpIfAGTENusng d,.TestDecellerate
 243+ C314 BA          >                        cp     d
 243+ C315 D2 26 C3    >                        jp		nc,.TestDecellerate
 244+ C318 3C                                   inc     a
 245+ C319 32 B0 7F                             ld      (DELTA),a
 246+ C31C 2A B1 7F                             ld      hl,(DELT4Lo)
 247+ C31F ED 34 04 00                          add     hl,4
 248+ C323 22 B1 7F                             ld      (DELT4Lo),hl
 249+ C326                                      ;DEFUNCT SetEngineSoundChanged
 250+ C326 2A 5B E0     .TestDecellerate:       ld      hl,(addr_Pressed_Decellerate)
 251+ C329 7E                                   ld      a,(hl)
 252+ C32A                                      JumpIfAIsZero   .TestLeftPressed
 252+ C32A A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
 252+ C32B CA 43 C3    >                        jp	    z, .TestLeftPressed
 253+ C32E 3A B0 7F                             ld      a,(DELTA)
 254+ C331                                      JumpIfAIsZero   .TestLeftPressed
 254+ C331 A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
 254+ C332 CA 43 C3    >                        jp	    z, .TestLeftPressed
 255+ C335 3D                                   dec     a
 256+ C336 32 B0 7F                             ld      (DELTA),a
 257+ C339 2A B1 7F                             ld      hl,(DELT4Lo)
 258+ C33C 2B                                   dec     hl
 259+ C33D 2B                                   dec     hl
 260+ C33E 2B                                   dec     hl
 261+ C33F 2B                                   dec     hl
 262+ C340 22 B1 7F                             ld      (DELT4Lo),hl
 263+ C343                                      ;DEFUNCT SetEngineSoundChanged
 264+ C343 2A 51 E0     .TestLeftPressed:       ld      hl,(addr_Pressed_RollLeft)
 265+ C346 7E                                   ld      a,(hl)
 266+ C347                                      JumpIfAIsZero   .TestRightPressed
 266+ C347 A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
 266+ C348 CA 5E C3    >                        jp	    z, .TestRightPressed
 267+ C34B 3A CD 7E                             ld      a,(JSTX)                            ; have we maxed out Joystick?
 268+ C34E 21 D4 7E                             ld      hl,ALP1MAXL                         ; currnet ship max left roll
 269+ C351 BE                                   cp      (hl)
 270+ C352 28 0A                                jr      z,.TestRightPressed
 271+ C354                                      ;break
 272+ C354 3D                                   dec     a                                   ; increase joystick roll
 273+ C355 32 CD 7E                             ld      (JSTX),a
 274+ C358 CD 10 C0                             call    draw_front_calc_alpha
 275+ C35B C3 93 C3                             jp      .TestDivePressed                    ; when pressing ignore damper
 276+ C35E 2A 53 E0     .TestRightPressed:       ld      hl,(addr_Pressed_RollRight)
 277+ C361 7E                                   ld      a,(hl)
 278+ C362                                      JumpIfAIsZero   .DampenRoll
 278+ C362 A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
 278+ C363 CA 79 C3    >                        jp	    z, .DampenRoll
 279+ C366 3A CD 7E                             ld      a,(JSTX)                            ; have we maxed out Joystick?
 280+ C369 21 D3 7E                             ld      hl,ALP1MAXR                         ; currnet ship max left roll
 281+ C36C BE                                   cp      (hl)
 282+ C36D 28 24                                jr      z,.TestDivePressed                   ; if its held then we don't dampen
 283+ C36F                                      ;break
 284+ C36F 3C                                   inc     a                                   ; increase joystick roll
 285+ C370 32 CD 7E     .UpdateAlphRoll:        ld      (JSTX),a
 286+ C373 CD 10 C0                             call    draw_front_calc_alpha
 287+ C376 C3 93 C3                             jp      .TestDivePressed                    ; when pressing ignore damper
 288+ C379 21 03 C3     .DampenRoll:            ld      hl,dampenRcounter
 289+ C37C 35                                   dec     (hl)
 290+ C37D 20 14                                jr      nz,.TestDivePressed
 291+ C37F 3E 04                                ld      a,dampenRate
 292+ C381 77                                   ld      (hl),a
 293+ C382 3A CD 7E                             ld      a,(JSTX)
 294+ C385 FE 00                                cp      0
 295+ C387 28 0A                                jr      z, .TestDivePressed
 296+ C389 CB 7F                                bit     7,a
 297+ C38B 28 03                                jr      z,.PosRollDampen
 298+ C38D 3C           .NegRollDampen:         inc     a
 299+ C38E 18 01                                jr      .ApplyRollDampen
 300+ C390 3D           .PosRollDampen:         dec     a
 301+ C391 18 DD        .ApplyRollDampen:       jr      .UpdateAlphRoll
 302+ C393              ; Dive and Climb input
 303+ C393 2A 55 E0     .TestDivePressed:       ld      hl,(addr_Pressed_Dive)
 304+ C396 7E                                   ld      a,(hl)
 305+ C397                                      JumpIfAIsZero   .TestClimbPressed
 305+ C397 A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
 305+ C398 CA AE C3    >                        jp	    z, .TestClimbPressed
 306+ C39B 3A C3 7E                             ld      a,(JSTY)                            ; have we maxed out Joystick?
 307+ C39E 21 C8 7E                             ld      hl,BET1MAXD                         ; currnet ship max left roll
 308+ C3A1 BE                                   cp      (hl)
 309+ C3A2 28 0A                                jr      z,.TestClimbPressed
 310+ C3A4                                      ;break
 311+ C3A4 3D                                   dec     a                                   ; increase joystick roll
 312+ C3A5 32 C3 7E                             ld      (JSTY),a
 313+ C3A8 CD 3D C0                             call    draw_front_calc_beta
 314+ C3AB C3 E3 C3                             jp      .ForwardCursorKeysDone
 315+ C3AE 2A 57 E0     .TestClimbPressed:      ld      hl,(addr_Pressed_Climb)
 316+ C3B1 7E                                   ld      a,(hl)
 317+ C3B2                                      JumpIfAIsZero   .DampenPitch
 317+ C3B2 A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
 317+ C3B3 CA C9 C3    >                        jp	    z, .DampenPitch
 318+ C3B6 3A C3 7E                             ld      a,(JSTY)                            ; have we maxed out Joystick?
 319+ C3B9 21 C7 7E                             ld      hl,BET1MAXC                         ; currnet ship max left roll
 320+ C3BC BE                                   cp      (hl)
 321+ C3BD 28 24                                jr      z,.ForwardCursorKeysDone
 322+ C3BF 3C                                   inc     a                                   ; increase joystick roll
 323+ C3C0 32 C3 7E     .UpdateBetaPitch:       ld      (JSTY),a
 324+ C3C3 CD 3D C0                             call    draw_front_calc_beta
 325+ C3C6 C3 E3 C3                             jp      .ForwardCursorKeysDone
 326+ C3C9 21 04 C3     .DampenPitch:           ld      hl,dampenPcounter          ; TODO mach dampen rates ship properies by having teh $20 as a ship config
 327+ C3CC 35                                   dec     (hl)
 328+ C3CD 20 14                                jr      nz,.ForwardCursorKeysDone
 329+ C3CF 3E 04                                ld      a,dampenRate
 330+ C3D1 77                                   ld      (hl),a
 331+ C3D2 3A C3 7E                             ld      a,(JSTY)
 332+ C3D5 FE 00                                cp      0
 333+ C3D7 28 0A                                jr      z,.ForwardCursorKeysDone
 334+ C3D9 CB 7F                                bit     7,a
 335+ C3DB 28 03                                jr      z,.PosPitchDampen
 336+ C3DD 3C           .NegPitchDampen:        inc     a
 337+ C3DE 18 01                                jr      .ApplyPitchDampen
 338+ C3E0 3D           .PosPitchDampen:        dec     a
 339+ C3E1 18 DD        .ApplyPitchDampen:      jr      .UpdateBetaPitch
 340+ C3E3              ; Now test hyperpsace. We can't be docked as this is a view routine piece of logic but for say local charts we may
 341+ C3E3              ; be in flight and they have to force a forward view when hyperspace is pressed
 342+ C3E3              ; We won't do galatic here, but for other views force to forward view
 343+ C3E3              .ForwardCursorKeysDone: MacroIsKeyPressed c_Pressed_Hyperspace              ; Check for hyperspace
 343+ C3E3 3E 24       >                        ld      a,c_Pressed_Hyperspace
 343+ C3E5             >                        MMUSelectKeyboard
 343+ C3E5 ED 91 57 65 >                     nextreg KeyboardMMU,       BankKeyboard
 343+ C3E9 CD BB E1    >                        call    is_key_pressed
 344+ C3EC 20 48                                jr      nz,.NotHyperspace
 345+ C3EE              ; If we are in hyperspace countdown then test for hyperspace
 346+ C3EE 2A 9A 81                             ld      hl,(InnerHyperCount)                ; if hyperspace was enaged then cancel
 347+ C3F1 7C                                   ld      a,h                                 ; hyperspace
 348+ C3F2 B5                                   or      l                                   ; .
 349+ C3F3 20 41                                jr      nz,.CancelHyperspace                ; .
 350+ C3F5              ; check selected target if we find one then after gettting galaxy at bc a=0 if not found
 351+ C3F5 ED 5B 58 80                          ld      de,(PresentSystemX)
 352+ C3F9 2A 5A 80                             ld      hl,(TargetSystemX)
 353+ C3FC CD EA 9A                             call    compare16HLDE
 354+ C3FF 28 35                                jr      z,.NoTargetSelected                 ; can't jump to current system
 355+ C401 3A 45 80                             ld      a,(Galaxy)
 356+ C404                                      MMUSelectGalaxyA
 356+ C404 ED 92 57    >                     nextreg GalaxyDataMMU,     a
 357+ C407 ED 4B 5A 80                          ld      bc,(TargetSystemX)
 358+ C40B CD BB FA                             call    galaxy_name_at_bc
 359+ C40E FE 00                                cp      0
 360+ C410 28 24                                jr      z,.NotHyperspace
 361+ C412              ; check fuel is sufficient
 362+ C412 ED 4B 58 80                          ld      bc,(PresentSystemX)
 363+ C416 ED 43 57 E8                          ld      (GalaxyPresentSystem),bc
 364+ C41A ED 4B 5A 80                          ld      bc,(TargetSystemX)
 365+ C41E ED 43 59 E8                          ld      (GalaxyDestinationSystem),bc
 366+ C422 CD F7 FB                             call    galaxy_find_distance            ; get distance into HL
 367+ C425 7C                                   ld      a,h
 368+ C426 A7                                   and     a
 369+ C427 20 0D                                jr      nz,.InsufficientFuel            ; max jump capacity is 25 ly for any ship
 370+ C429 3A 93 85                             ld      a,(Fuel)
 371+ C42C                                      JumpIfALTNusng    l, .InsufficientFuel
 371+ C42C BD          >                        cp      l
 371+ C42D DA 36 C4    >                        jp		c, .InsufficientFuel
 372+ C430              ; set up timer countdown
 373+ C430 21 0B 0B                             ld      hl,HyperSpaceTimers                 ; set both timers to 15
 374+ C433 22 9A 81                             ld      (InnerHyperCount),hl                ; .
 375+ C436              .CancelHyperspace
 376+ C436              .NoTargetSelected
 377+ C436              .InsufficientFuel
 378+ C436              .NotHyperspace:
 379+ C436              ;--- Check for in system Jump---------------------------------------
 380+ C436 2A 9A 81     .CheckForWarpPressd:    ld      hl,(InnerHyperCount)                ; if hyperspace was enaged then cancel
 381+ C439 7C                                   ld      a,h                                 ; hyperspace
 382+ C43A B5                                   or      l                                   ; .
 383+ C43B 20 0F                                jr      nz,.WarpNotPressed
 384+ C43D 3E 54                                ld      a,c_Pressed_Warp
 385+ C43F                                      MMUSelectKeyboard
 385+ C43F ED 91 57 65 >                     nextreg KeyboardMMU,       BankKeyboard
 386+ C443 CD AE E1                             call    is_key_up_state
 387+ C446 28 04                                jr      z, .WarpNotPressed
 388+ C448                                      SetMemTrue  WarpPressed                     ; This signals the event , teh main loop will cancel this as an acknowlege
 388+ C448 AF          >                        xor     a
 388+ C449 32 C3 81    >                        ld      (WarpPressed),a
 389+ C44C              .WarpNotPressed:
 390+ C44C                              IFDEF   LASER_V2
 391+ C44C CD EE 83                             call    IsLaserUseable                      ; no laser or destroyed?
 392+ C44F 28 3A                                jr      z,          .FireNotPressed
 393+ C451 3E 14        .IsFirePressed:         ld      a,c_Pressed_FireLaser               ; else (beam type) if fire is pressed
 394+ C453                                      MMUSelectKeyboard
 394+ C453 ED 91 57 65 >                     nextreg KeyboardMMU,       BankKeyboard
 395+ C457 CD AE E1                             call    is_key_up_state
 396+ C45A 28 2F                                jr      z,.FireNotPressed
 397+ C45C              .FirePressed:           ;break
 398+ C45C                                      JumpIfMemNotZero    CurrentCooldown,     .LaserDone
 398+ C45C 3A 73 82    >                        ld  a,(CurrentCooldown)
 398+ C45F A7          >                        and a
 398+ C460 C2 AD C4    >                        jp  nz,.LaserDone
 399+ C463                                      JumpIfMemNotZero    CurrentBurstPause,   .LaserDone
 399+ C463 3A 72 82    >                        ld  a,(CurrentBurstPause)
 399+ C466 A7          >                        and a
 399+ C467 C2 AD C4    >                        jp  nz,.LaserDone
 400+ C46A                                      JumpIfMemNotZero    CurrLaserBurstCount, .LaserDone
 400+ C46A 3A 75 82    >                        ld  a,(CurrLaserBurstCount)
 400+ C46D A7          >                        and a
 400+ C46E C2 AD C4    >                        jp  nz,.LaserDone
 401+ C471                                      JumpIfMemTrue       LaserBeamOn,         .LaserDone
 401+ C471 3A 70 82    >                        ld      a,(LaserBeamOn)
 401+ C474 A7          >                        and     a
 401+ C475 CA AD C4    >                        jp      z, .LaserDone
 402+ C478                                      ldCopyByte          CurrLaserPulseRate,   CurrLaserBurstCount
 402+ C478 3A 6C 82    >                        ld       a,(CurrLaserPulseRate)
 402+ C47B 32 75 82    >                        ld       (CurrLaserBurstCount),a
 403+ C47E                                      ldCopyByte          CurrLaserPulseOnTime, CurrLaserDuration
 403+ C47E 3A 6D 82    >                        ld       a,(CurrLaserPulseOnTime)
 403+ C481 32 71 82    >                        ld       (CurrLaserDuration),a
 404+ C484                                      SetMemTrue          LaserBeamOn
 404+ C484 AF          >                        xor     a
 404+ C485 32 70 82    >                        ld      (LaserBeamOn),a
 405+ C488                                      ;call               TriggerLaserSound
 406+ C488 C3 AD C4                             jp                  .LaserDone
 407+ C48B              .FireNotPressed:        ReturnIfMemNotZero  CurrLaserBurstCount
 407+ C48B 3A 75 82    >                        ld     a,(CurrLaserBurstCount)
 407+ C48E A7          >                        and     a
 407+ C48F C0          >                        ret    nz
 408+ C490                                      ReturnIfMemNotZero  CurrLaserDuration
 408+ C490 3A 71 82    >                        ld     a,(CurrLaserDuration)
 408+ C493 A7          >                        and     a
 408+ C494 C0          >                        ret    nz
 409+ C495                                      ReturnIfMemFalse    LaserBeamOn
 409+ C495 3A 70 82    >                        ld      a,(LaserBeamOn)
 409+ C498 A7          >                        and     a
 409+ C499 C0          >                        ret     nz
 410+ C49A                                      ldCopyByte          CurrLaserPulseRest, CurrentCooldown
 410+ C49A 3A 6F 82    >                        ld       a,(CurrLaserPulseRest)
 410+ C49D 32 73 82    >                        ld       (CurrentCooldown),a
 411+ C4A0                                      SetMemFalse         LaserBeamOn
 411+ C4A0 3E FF       >                        ld      a,$FF
 411+ C4A2 32 70 82    >                        ld      (LaserBeamOn),a
 412+ C4A5                                      SetMemZero          CurrLaserBurstCount
 412+ C4A5 AF          >                        xor     a
 412+ C4A6 32 75 82    >                        ld      (CurrLaserBurstCount),a
 413+ C4A9                                      SetMemZero          CurrentBurstPause
 413+ C4A9 AF          >                        xor     a
 413+ C4AA 32 72 82    >                        ld      (CurrentBurstPause),a
 414+ C4AD              .LaserDone:
 415+ C4AD                              ELSE
 416+ C4AD ~            .CheckForLaserPressed:  call    IsLaserUseable                      ; no laser or destroyed?
 417+ C4AD ~                                    jr      z,.CheckTargetting
 418+ C4AD ~            .CanLaserStillFire:     SetMemFalse FireLaserPressed                ; default to no laser
 419+ C4AD ~                                    ld      a,(CurrLaserPulseRate)              ; if not beam type
 420+ C4AD ~                                    JumpIfAIsZero .BeamType                     ; .
 421+ C4AD ~                                    ld      b,a                                 ; and not run out of pulses
 422+ C4AD ~                                    ld      a,(CurrLaserPulseRateCount)         ;
 423+ C4AD ~                                    ld      a,(CurrLaserPulseOnCount)           ;    if not already on
 424+ C4AD ~                                    JumpIfAEqNusng  b, .PulseLimitReached       ;
 425+ C4AD ~                                    ld      hl,CurrLaserPulseOffCount           ;       and not in off phase
 426+ C4AD ~                                    or      (hl)                                ;
 427+ C4AD ~                                    inc     hl  ; CurrLaserPulseRestCount       ;       and not in rest phase.
 428+ C4AD ~                                    or      (hl)                                ;    .
 429+ C4AD ~                                    jr      nz, .CheckTargetting                ;    .
 430+ C4AD ~            .IsFirePressed:         ld      a,c_Pressed_FireLaser               ;       if fire is pressed
 431+ C4AD ~                                    MMUSelectKeyboard
 432+ C4AD ~                                    call    is_key_up_state                     ;       .
 433+ C4AD ~                                    jr      z,.CheckTargetting                  ;       .
 434+ C4AD ~            .CanProcesFire:         ld      a,(CurrLaserPulseRateCount)         ;            pulse rate count ++
 435+ C4AD ~                                    inc     a                                   ;            .
 436+ C4AD ~            .StillHavePulsesLeft:   ld      (CurrLaserPulseRateCount),a         ;            .
 437+ C4AD ~                                    ldCopyByte CurrLaserPulseOnTime, CurrLaserPulseOnCount  ; pulse on count = pulse on time
 438+ C4AD ~                                 ;   ldCopyByte CurrLaserPulseOffTime, CurrLaserPulseOffCount; pulse off count = pulse off time
 439+ C4AD ~                                 ;   ldCopyByte CurrLaserPulseRest, CurrLaserPulseRestCount  ; pulse rest count = pulse rest time
 440+ C4AD ~                                    jp      .CheckTargetting
 441+ C4AD ~            .BeamType:              ld      a,c_Pressed_FireLaser               ; else (beam type) if fire is pressed
 442+ C4AD ~                                    MMUSelectKeyboard
 443+ C4AD ~                                    call    is_key_up_state                     ;                   .
 444+ C4AD ~                                    jr      z,.CheckTargetting                  ;                   .
 445+ C4AD ~                                    SetMemTrue FireLaserPressed                 ;                   set pulse on to 1
 446+ C4AD ~                                    ld      a,0
 447+ C4AD ~                                    ld      (SoundFxToEnqueue),a
 448+ C4AD ~                                    jp      .CheckTargetting
 449+ C4AD ~            .PulseLimitReached:     ;ZeroA                                       ;
 450+ C4AD ~                                    ;ld      (CurrLaserPulseRateCount),a         ;
 451+ C4AD ~                                    ;ldCopyByte CurrLaserPulseRest, CurrLaserPulseRestCount   ; start the rest phase
 452+ C4AD                              ENDIF
 453+ C4AD              ; . Here we check to see if the target lock has been pressed
 454+ C4AD              .CheckTargetting:       MMUSelectKeyboard
 454+ C4AD ED 91 57 65 >                     nextreg KeyboardMMU,       BankKeyboard
 455+ C4B1 CD 45 E3                             call    TargetMissileTest
 456+ C4B4              .CheckForMissile:       MacroIsKeyPressed c_Pressed_FireMissile             ; launch pressed?
 456+ C4B4 3E 18       >                        ld      a,c_Pressed_FireMissile
 456+ C4B6             >                        MMUSelectKeyboard
 456+ C4B6 ED 91 57 65 >                     nextreg KeyboardMMU,       BankKeyboard
 456+ C4BA CD BB E1    >                        call    is_key_pressed
 457+ C4BD 20 13                                jr      nz,.NotMissileLaunch
 458+ C4BF                                      AnyMissilesLeft
 458+ C4BF 3A 65 80    >                        ld      a,(NbrMissiles)
 458+ C4C2 A7          >                        and     a
 459+ C4C3 28 0D                                jr      z,.NotMissileLaunch                 ; no missiles in rack
 460+ C4C5 CD 93 84                             call    IsMissileLockedOn
 461+ C4C8 28 08                                jr      z,.MissileNotLocked
 462+ C4CA              .MissileLaunch:         SetMissileLaunch
 462+ C4CA 3A 58 82    >                        ld      a,(MissileTargettingFlag)
 462+ C4CD E6 0F       >                        and     $0F
 462+ C4CF 32 58 82    >                        ld      (MissileTargettingFlag),a
 463+ C4D2              .MissileNotLocked:                       ; later on we need a "bing bong" nose for trying to launch an unlocked missile
 464+ C4D2              .NotMissileLaunch:
 465+ C4D2 3A B1 85     .CheckForECM:           ld      a,(ECMPresent)
 466+ C4D5                                      JumpIfAEqNusng EquipmentItemNotFitted,.NoECM
 466+ C4D5 FE 00       >                        cp     EquipmentItemNotFitted
 466+ C4D7 CA FE C4    >                        jp      z,.NoECM
 467+ C4DA 3A 66 80     .CheckECMActive:        ld      a,(PlayerECMActiveCount)
 468+ C4DD                                      JumpIfAIsNotZero .NoECM
 468+ C4DD A7          >                        and     a
 468+ C4DE C2 FE C4    >                        jp	    nz,.NoECM
 469+ C4E1              .CheckForKeyPress:      MacroIsKeyPressed c_Pressed_ECM
 469+ C4E1 3E 1C       >                        ld      a,c_Pressed_ECM
 469+ C4E3             >                        MMUSelectKeyboard
 469+ C4E3 ED 91 57 65 >                     nextreg KeyboardMMU,       BankKeyboard
 469+ C4E7 CD BB E1    >                        call    is_key_pressed
 470+ C4EA 20 12                                jr      nz, .NoECM
 471+ C4EC              .FireECM:               SetMemToN      PlayerECMActiveCount, ECMCounterMax
 471+ C4EC 3E 80       >                        ld      a,ECMCounterMax
 471+ C4EE 32 66 80    >                        ld      (PlayerECMActiveCount),a
 472+ C4F1 3A CB 7E                             ld      a,(ECMCountDown)
 473+ C4F4                                      JumpIfAGTENusng ECMCounterMax, .NoECM
 473+ C4F4 FE 80       >                        cp     ECMCounterMax
 473+ C4F6 D2 FE C4    >                        jp		nc,.NoECM
 474+ C4F9                                      SetMemToN      ECMCountDown, ECMCounterMax
 474+ C4F9 3E 80       >                        ld      a,ECMCounterMax
 474+ C4FB 32 CB 7E    >                        ld      (ECMCountDown),a
 475+ C4FE C9           .NoECM:                 ret
 476+ C4FF
 477+ C4FF
 478+ C4FF
 479+ C4FF
 480+ C4FF
 481+ C4FF
 482+ C4FF
# file closed: ./Views/Front_View.asm
 909  C4FF                                  DISPLAY "Bank ",BankFrontView," - Bytes free ",/D, $2000 - ($-ViewFrontAddr), " - BankFrontView"
 910  C4FF                                  ASSERT $-ViewFrontAddr <8912 , Bank code leaks over 8K boundary
 911  C4FF              ; Bank 63  ------------------------------------------------------------------------------------------------------------------------
 912  C4FF                                  SLOT    MenuStatusAddr
 913  C4FF                                  PAGE    BankMenuStatus
 914  C4FF                                  ORG     MenuStatusAddr
 915  C000                                  INCLUDE "./Menus/status_menu.asm"
# file opened: ./Menus/status_menu.asm
   1+ C000 53 74 61 74  status_page_marker  DB "Status      PG63"
   1+ C004 75 73 20 20
   1+ C008 20 20 20 20
   1+ C00C 50 47 36 33
   2+ C010
   3+ C010                  DEFINE  LARGE_MENUS 1
   4+ C010
   5+ C010 43 4F 4D 4D  txt_stat_commander 			DB "COMMANDER",0
   5+ C014 41 4E 44 45
   5+ C018 52 00
   6+ C01A 49 4E 56 45  txt_stat_inventory 			DB "INVENTORY",0
   6+ C01E 4E 54 4F 52
   6+ C022 59 00
   7+ C024 50 72 65 73  txt_stat_present_system		DB "Present System   :",0
   7+ C028 65 6E 74 20
   7+ C02C 53 79 73 74
   7+ C030 65 6D 20 20
   7+ C034 20 3A 00
   8+ C037 48 79 70 65  txt_stat_hyperspace_system	DB "Hyperspace System:",0
   8+ C03B 72 73 70 61
   8+ C03F 63 65 20 53
   8+ C043 79 73 74 65
   8+ C047 6D 3A 00
   9+ C04A 43 6F 6E 64  txt_stat_condition			DB "Condition        :",0
   9+ C04E 69 74 69 6F
   9+ C052 6E 20 20 20
   9+ C056 20 20 20 20
   9+ C05A 20 3A 00
  10+ C05D 46 75 65 6C  txt_stat_fuel				DB "Fuel             :",0
  10+ C061 20 20 20 20
  10+ C065 20 20 20 20
  10+ C069 20 20 20 20
  10+ C06D 20 3A 00
  11+ C070 43 61 73 68  txt_stat_cash				DB "Cash             :",0
  11+ C074 20 20 20 20
  11+ C078 20 20 20 20
  11+ C07C 20 20 20 20
  11+ C080 20 3A 00
  12+ C083 4C 65 67 61  txt_stat_legal_status		DB "Legal Status     :",0
  12+ C087 6C 20 53 74
  12+ C08B 61 74 75 73
  12+ C08F 20 20 20 20
  12+ C093 20 3A 00
  13+ C096 52 61 74 69  txt_stat_rating				DB "Rating           :",0
  13+ C09A 6E 67 20 20
  13+ C09E 20 20 20 20
  13+ C0A2 20 20 20 20
  13+ C0A6 20 3A 00
  14+ C0A9 4D 69 73 73  txt_stat_missle_type        DB "Missile Type     :",0
  14+ C0AD 69 6C 65 20
  14+ C0B1 54 79 70 65
  14+ C0B5 20 20 20 20
  14+ C0B9 20 3A 00
  15+ C0BC 4D 69 73 73  txt_stat_missle_count       DB "Missile Count    :",0
  15+ C0C0 69 6C 65 20
  15+ C0C4 43 6F 75 6E
  15+ C0C8 74 20 20 20
  15+ C0CC 20 3A 00
  16+ C0CF 45 51 55 49  txt_stat_equipment			DB "EQUIPMENT:",0
  16+ C0D3 50 4D 45 4E
  16+ C0D7 54 3A 00
  17+ C0DA
  18+ C0DA 30 30 2E 30  txt_stat_fuel_level			DB "00.0 Light Years",0
  18+ C0DE 20 4C 69 67
  18+ C0E2 68 74 20 59
  18+ C0E6 65 61 72 73
  18+ C0EA 00
  19+ C0EB 58 58 58 58  txt_stat_cash_amount		DB "XXXXXXXXXX",0
  19+ C0EF 58 58 58 58
  19+ C0F3 58 58 00
  20+ C0F6 2E           txt_stat_cash_decimal       DB "."
  21+ C0F7 58 20 43 72  txt_stat_cash_fraction      DB "X Cr",0
  21+ C0FB 00
  22+ C0FC
  23+ C0FC              ; 01234567890123456789012345678901234567890
  24+ C0FC              ;0
  25+ C0FC              ;1          COMMANDER <Comdr name>
  26+ C0FC              ;2
  27+ C0FC              ;3
  28+ C0FC              ;4 Present System    :
  29+ C0FC              ;5 Hyperspace System :
  30+ C0FC              ;6 Condition         :
  31+ C0FC              ;7 Fuel              :
  32+ C0FC              ;8 Cash              :
  33+ C0FC              ;9 Legal Status      :
  34+ C0FC              ;0 Rating            :
  35+ C0FC              ;1
  36+ C0FC              ;2 Equipment:
  37+ C0FC              ;3 >1:                 >2:
  38+ C0FC              ;4 >3:                 >4:
  39+ C0FC              ;5 >5:                 >6:
  40+ C0FC              ;6 >7:                 >8:
  41+ C0FC              ;7 >9:                 >10:
  42+ C0FC              ;8 >11:                >12:
  43+ C0FC              ;9 >13:                >14:
  44+ C0FC              ;0 >15:                >15:
  45+ C0FC              ;1 >17:                >18:
  46+ C0FC              ;2 >19:                >19:
  47+ C0FC              ;3 >21:                >20:
  48+ C0FC              ;4 >22:                >23:
  49+ C0FC              ;5 >23:                >24:
  50+ C0FC              ;6 >25:                >26:
  51+ C0FC              ;7 >25:                >26:
  52+ C0FC              ;8 >25:                >26:
  53+ C0FC              ;9 >27:                >28:
  54+ C0FC
  55+ C0FC              present_pos_row         equ $20
  56+ C0FC              hyperspace_pos_row		equ	$28
  57+ C0FC              condition_pos_row		equ	$30
  58+ C0FC              fuel_pos_row			equ	$38
  59+ C0FC              cash_pos_row			equ	$40
  60+ C0FC              legal_status_pos_row	equ $48
  61+ C0FC              rank_pos_row			equ $50
  62+ C0FC              missile_type_row        equ $58
  63+ C0FC              missile_count_row       equ $60
  64+ C0FC              equipment_pos_row		equ $68
  65+ C0FC              equipment_list_row      equ $70
  66+ C0FC              equipment1_pos_row		equ $78
  67+ C0FC
  68+ C0FC              present_pos_col         equ $00A0
  69+ C0FC              hyperspace_pos_col    	equ	$00A0
  70+ C0FC              hyperspace_position	    equ	$131B
  71+ C0FC              condition_pos_col		equ	$00A0
  72+ C0FC              fuel_pos_col			equ	$00A0
  73+ C0FC              cash_pos_col			equ	$00A0
  74+ C0FC              legal_status_pos_col	equ $00A0
  75+ C0FC              rank_pos_col			equ $00A0
  76+ C0FC              equipment1_pos_col		equ $0008
  77+ C0FC              equipment2_pos_col		equ $0090
  78+ C0FC
  79+ C0FC 50 00        status_boiler_text		DW $0050
  79+ C0FE 08             DB $08
  79+ C0FF 10 C0          DW txt_stat_commander             ; row
  80+ C101 A0 00        						DW $00A0
  80+ C103 08             DB $08
  80+ C104 59 82          DW CommanderName
  81+ C106 08 00        						DW $0008
  81+ C108 20             DB present_pos_row
  81+ C109 24 C0          DW txt_stat_present_system
  82+ C10B 08 00        						DW $0008
  82+ C10D 28             DB hyperspace_pos_row
  82+ C10E 37 C0          DW txt_stat_hyperspace_system
  83+ C110 08 00        						DW $0008
  83+ C112 30             DB condition_pos_row
  83+ C113 4A C0          DW txt_stat_condition
  84+ C115 08 00        						DW $0008
  84+ C117 38             DB fuel_pos_row
  84+ C118 5D C0          DW txt_stat_fuel
  85+ C11A 08 00        						DW $0008
  85+ C11C 40             DB cash_pos_row
  85+ C11D 70 C0          DW txt_stat_cash
  86+ C11F 08 00        						DW $0008
  86+ C121 48             DB legal_status_pos_row
  86+ C122 83 C0          DW txt_stat_legal_status
  87+ C124 08 00        						DW $0008
  87+ C126 50             DB rank_pos_row
  87+ C127 96 C0          DW txt_stat_rating
  88+ C129 08 00        						DW $0008
  88+ C12B 58             DB missile_type_row
  88+ C12C A9 C0          DW txt_stat_missle_type
  89+ C12E 08 00        						DW $0008
  89+ C130 60             DB missile_count_row
  89+ C131 BC C0          DW txt_stat_missle_count
  90+ C133 08 00        						DW $0008
  90+ C135 70             DB equipment_list_row
  90+ C136 CF C0          DW txt_stat_equipment
  91+ C138              status_boiler_count     equ 12
  92+ C138 00 00        equipment_cursor		DW  $0000
  93+ C13A
  94+ C13A              STAT_buffer_rows        EQU     128
  95+ C13A              STAT_buffer_row_len     EQU     20
  96+ C13A              STAT_eqip_window_len    EQU     26
  97+ C13A              STAT_display_buff_len   EQU     STAT_buffer_rows *   STAT_buffer_row_len
  98+ C13A 00 00 00...  STAT_display_buffer:    DS      STAT_display_buff_len                     ; maxium of 128 items can be coded for
  99+ CB3A              STAT_pos_row    		equ $58
 100+ CB3A              STAT_pos_col			equ $0040
 101+ CB3A 00 00 00...  STAT_cash_amount    	DS 10
 102+ CB44 20 43 72 00  STAT_cash_UoM           DB " Cr",0
 103+ CB48
 104+ CB48 00 00 00...  stat_present_name       DS  30
 105+ CB66 00                                   DB  0
 106+ CB67 00 00 00...  stat_target_name        DS  30
 107+ CB85 00                                   DB  0
 108+ CB86
 109+ CB86 21 7F E8     stat_copy_to_name:      ld      hl,GalaxyExpandedName
 110+ CB89 01 1E 00                             ld      bc,30
 111+ CB8C ED B0                                ldir
 112+ CB8E C9                                   ret
 113+ CB8F
 114+ CB8F              menu_box_colour         equ $C0
 115+ CB8F
 116+ CB8F
 117+ CB8F
 118+ CB8F
 119+ CB8F              ;----------------------------------------------------------------------------------------------------------------------------------
 120+ CB8F DD 22 33 CC  STAT_DispDEIXtoIY:      ld (.STATclcn32z),ix
 121+ CB93 ED 53 35 CC                          ld (.STATclcn32zIX),de
 122+ CB97 DD 21 2F CC                          ld ix,.STATclcn32t+36
 123+ CB9B 06 09                                ld b,9
 124+ CB9D 0E 00                                ld c,0
 125+ CB9F 3E 30        .STATclcn321:           ld a,'0'
 126+ CBA1 B7                                   or a
 127+ CBA2 DD 5E 00     .STATclcn322:           ld e,(ix+0)
 128+ CBA5 DD 56 01                             ld d,(ix+1)
 129+ CBA8 2A 33 CC                             ld hl,(.STATclcn32z)
 130+ CBAB ED 52                                sbc hl,de
 131+ CBAD 22 33 CC                             ld (.STATclcn32z),hl
 132+ CBB0 DD 5E 02                             ld e,(ix+2)
 133+ CBB3 DD 56 03                             ld d,(ix+3)
 134+ CBB6 2A 35 CC                             ld hl,(.STATclcn32zIX)
 135+ CBB9 ED 52                                sbc hl,de
 136+ CBBB 22 35 CC                             ld (.STATclcn32zIX),hl
 137+ CBBE 38 04                                jr c,.STATclcn325
 138+ CBC0 0C                                   inc c
 139+ CBC1 3C                                   inc a
 140+ CBC2 18 DE                                jr .STATclcn322
 141+ CBC4 DD 5E 00     .STATclcn325:           ld e,(ix+0)
 142+ CBC7 DD 56 01                             ld d,(ix+1)
 143+ CBCA 2A 33 CC                             ld hl,(.STATclcn32z)
 144+ CBCD 19                                   add hl,de
 145+ CBCE 22 33 CC                             ld (.STATclcn32z),hl
 146+ CBD1 DD 5E 02                             ld e,(ix+2)
 147+ CBD4 DD 56 03                             ld d,(ix+3)
 148+ CBD7 2A 35 CC                             ld hl,(.STATclcn32zIX)
 149+ CBDA ED 5A                                adc hl,de
 150+ CBDC 22 35 CC                             ld (.STATclcn32zIX),hl
 151+ CBDF 11 FC FF                             ld de,-4
 152+ CBE2 DD 19                                add ix,de
 153+ CBE4 0C                                   inc c
 154+ CBE5 0D                                   dec c
 155+ CBE6 28 05                                jr z,.STATclcn323
 156+ CBE8 FD 77 00                             ld (iy+0),a
 157+ CBEB FD 23                                inc iy
 158+ CBED 10 B0        .STATclcn323:           djnz .STATclcn321
 159+ CBEF 3A 33 CC                             ld a,(.STATclcn32z)
 160+ CBF2 C6 30                                add A,'0'
 161+ CBF4 FD 77 00                             ld (iy+0),a
 162+ CBF7 FD 36 02 00                          ld (iy+2),0
 163+ CBFB FD 7E 00                             ld      a,(IY+0)
 164+ CBFE FD 77 01                             ld      (IY+1),a
 165+ CC01 3E 2E                                ld      a,"."
 166+ CC03 FD 77 00                             ld      (IY+0),a
 167+ CC06 FD 23                                inc     IY
 168+ CC08 FD 23                                inc     IY
 169+ CC0A C9                                   ret
 170+ CC0B 01 00 00 00  .STATclcn32t            dw 1,0,     10,0,     100,0,     1000,0,       10000,0
 170+ CC0F 0A 00 00 00
 170+ CC13 64 00 00 00
 170+ CC17 E8 03 00 00
 170+ CC1B 10 27 00 00
 171+ CC1F A0 86 01 00                          dw $86a0,1, $4240,$0f, $9680,$98, $e100,$05f5, $ca00,$3b9a
 171+ CC23 40 42 0F 00
 171+ CC27 80 96 98 00
 171+ CC2B 00 E1 F5 05
 171+ CC2F 00 CA 9A 3B
 172+ CC33 00 00        .STATclcn32z            ds 2
 173+ CC35 00 00        .STATclcn32zIX          ds 2
 174+ CC37              ;----------------------------------------------------------------------------------------------------------------------------------
 175+ CC37 2A 91 85     STAT_GetCash:           ld		hl,(Cash+2)
 176+ CC3A EB                                   ex      de,hl
 177+ CC3B DD 2A 8F 85                          ld      ix,(Cash)
 178+ CC3F FD 21 3A CB                          ld		iy,STAT_cash_amount
 179+ CC43 CD 8F CB                             call 	STAT_DispDEIXtoIY
 180+ CC46 FD E5                                push    iy
 181+ CC48 D1                                   pop     de
 182+ CC49 21 44 CB                             ld      hl,STAT_cash_UoM
 183+ CC4C 01 04 00                             ld      bc,4
 184+ CC4F ED B0                                ldir
 185+ CC51 C9                                   ret
 186+ CC52              ;----------------------------------------------------------------------------------------------------------------------------------
 187+ CC52 7E           STAT_expand_word:       ld      a,(hl)
 188+ CC53 FE 00                                cp      0
 189+ CC55 C8                                   ret     z
 190+ CC56 12                                   ld      (de),a
 191+ CC57 23                                   inc     hl
 192+ CC58 13                                   inc     de
 193+ CC59 18 F7                                jr      STAT_expand_word
 194+ CC5B
 195+ CC5B              ; hl = list of words
 196+ CC5B              ; de = adress to expand to
 197+ CC5B 7E           STAT_expand_name:       ld      a,(hl)
 198+ CC5C 47                                   ld      b,a
 199+ CC5D 23                                   inc     hl
 200+ CC5E 7E                                   ld      a,(hl)              ; its a 16 bit
 201+ CC5F 2B                                   dec     hl                  ; move back one for now, need to optimise laters
 202+ CC60 B0                                   or      b
 203+ CC61 20 01                                jr      nz,.MoreToDo
 204+ CC63              ;                        ld      (de),a we dont want the null marker now
 205+ CC63 C9                                   ret
 206+ CC64 E5 D5        .MoreToDo:              push    hl,,de
 207+ CC66 7E                                   ld      a,(hl)              ; bodge for now no optimise
 208+ CC67 5F                                   ld      e,a
 209+ CC68 23                                   inc     hl
 210+ CC69 7E                                   ld      a,(hl)
 211+ CC6A 57                                   ld      d,a
 212+ CC6B EB                                   ex      hl,de               ; hl is now Word... address
 213+ CC6C D1                                   pop     de                  ; de back to pointer to buffer
 214+ CC6D CD 52 CC     .ProcessWord:           call    STAT_expand_word
 215+ CC70 3E 20                                ld      a," "               ; speculative space
 216+ CC72 12                                   ld      (de),a
 217+ CC73 13                                   inc     de
 218+ CC74 E1                                   pop     hl                  ; get string pointer back
 219+ CC75 23                                   inc     hl
 220+ CC76 23                                   inc     hl                  ; on to next word
 221+ CC77 18 E2                                jr      STAT_expand_name
 222+ CC79
 223+ CC79              STAT_First_Item         EQU     EQ_CARGO_BAY
 224+ CC79 3A 45 80     STAT_buffer_list:       ld      a,(Galaxy)       ; DEBUG as galaxy n is not working
 225+ CC7C                                      MMUSelectGalaxyA
 225+ CC7C ED 92 57    >                     nextreg GalaxyDataMMU,     a
 226+ CC7F 21 3A C1                             ld      hl,STAT_display_buffer                      ; hl - target buffer
 227+ CC82 3E 00                                ld      a,0                                         ; so it will still skip them on printing
 228+ CC84 11 00 0A                             ld      de, STAT_display_buff_len
 229+ CC87 CD 32 7E                             call    memfill_dma                                 ; full buffer with ASCII 1 (unprintable character)
 230+ CC8A 21 4D C1                             ld      hl,STAT_display_buffer+STAT_buffer_row_len-1
 231+ CC8D 11 14 00                             ld      de,STAT_buffer_row_len
 232+ CC90 06 80                                ld      b,STAT_buffer_rows
 233+ CC92                                      ZeroA
 233+ CC92 AF          >                        xor a
 234+ CC93 77           .EoLLoop:               ld      (hl),a                                      ; fix all buffer lines with a null
 235+ CC94 19                                   add     hl,de
 236+ CC95 10 FC                                djnz    .EoLLoop
 237+ CC97 DD 21 B0 85                          ld      ix,EquipmentFitted + STAT_First_Item        ; ix = equipment master table, ignore missiles
 238+ CC9B FD 21 3A C1                          ld      iy,STAT_display_buffer                      ; iy = target buffer
 239+ CC9F 06 18                                ld      b,EQ_ITEM_COUNT - EQ_CARGO_BAY              ; we do not include Fuel and Missile counts
 240+ CCA1 0E 00                                ld      c,0                                         ; Current Row
 241+ CCA3 1E 02                                ld      e,STAT_First_Item
 242+ CCA5 DD 7E 00     .ProcessRow:            ld      a,(ix+0)                                    ; Do we own one?
 243+ CCA8                                      JumpIfAIsZero .NotFitted                            ; optimised check for EquipmentItemNotFitted
 243+ CCA8 A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
 243+ CCA9 CA D1 CC    >                        jp	    z, .NotFitted
 244+ CCAC D5 FD E5 DD  .OwnItem:               push    de,, iy,, ix,, bc
 244+ CCB0 E5 C5
 245+ CCB2 21 06 F4                             ld      hl,ShipEquipNameTable                       ; look up equipment name
 246+ CCB5 16 08                                ld      d,EquipNameTableRowLen                      ; ship equip name row length, e = current equip row
 247+ CCB7 ED 30                                mul
 248+ CCB9 19                                   add     hl,de                                       ; hl = dword list of work pointers
 249+ CCBA FD 54 FD 5D                          ld      de,iy                                       ; de = 0 column at current display buffer row
 250+ CCBE 3E 3E                                ld      a,'>'                                       ; all items are prefixed ">"
 251+ CCC0 12                                   ld      (de),a                                      ; .
 252+ CCC1 13                                   inc     de                                          ; .
 253+ CCC2 CD 5B CC                             call    STAT_expand_name                            ; expand name
 254+ CCC5 C1 DD E1 FD                          pop     iy,,ix,,bc
 254+ CCC9 E1
 255+ CCCA 11 14 00                             ld      de,STAT_buffer_row_len
 256+ CCCD FD 19                                add     iy,de                                       ; now iy = start of next column
 257+ CCCF D1                                   pop     de
 258+ CCD0 0C                                   inc     c
 259+ CCD1              .NotFitted:
 260+ CCD1 DD 23        .DoneFittedCheck:       inc     ix
 261+ CCD3 1C                                   inc     e
 262+ CCD4 10 CF                                djnz    .ProcessRow
 263+ CCD6 C9                                   ret
 264+ CCD7
 265+ CCD7              ;----------------------------------------------------------------------------------------------------------------------------------
 266+ CCD7              ;">print_boilder_text ix = text structure, b = message count"
 267+ CCD7 06 0C        draw_STAT_boilertext:   ld		b,status_boiler_count
 268+ CCD9 DD 21 FC C0                          ld		ix,status_boiler_text
 269+ CCDD C5           .BoilerTextLoop:        push	bc			; Save Message Count loop value
 270+ CCDE DD 6E 00                             ld		l,(ix+0)	; Get col into hl
 271+ CCE1 DD 66 01                             ld		h,(ix+1)	;
 272+ CCE4 DD 46 02                             ld		b,(ix+2)	; get row into b
 273+ CCE7 DD 5E 03                             ld		e,(ix+3)	; Get text address into hl
 274+ CCEA DD 56 04                             ld		d,(ix+4)	; .
 275+ CCED DD E5                                push    ix          ; save ix and prep for add via hl
 276+ CCEF                                      print_msg_at_de_at_b_hl_macro txt_status_colour
 276+ CCEF 0E FF       >                        ld      c,txt_status_colour
 276+ CCF1 CD 4B E6    >                        call    l2_print_at_320
 277+ CCF4 E1                                   pop     hl          ; add 5 to ix
 278+ CCF5 3E 05                                ld      a,5         ; .
 279+ CCF7 ED 31                                add     hl,a        ; .
 280+ CCF9 E5 DD E1                             ld      ix,hl       ; .
 281+ CCFC C1                                   pop		bc
 282+ CCFD 10 DE                                djnz	.BoilerTextLoop
 283+ CCFF C9                                   ret
 284+ CD00
 285+ CD00              GetStatFuelLevel:       INCLUDE "Menus/get_fuel_level_inlineinclude.asm"
# file opened: ./Menus/get_fuel_level_inlineinclude.asm
   1++CD00
   2++CD00
   3++CD00 3A 93 85     	ld		a,(Fuel)
   4++CD03 11 D0 AE     	ld		de,txt_fuel_level
   5++CD06 0E 9C        	ld	c, -100
   6++CD08 CD 12 CD     	call	.Num1
   7++CD0B 0E F6        	ld	c,-10
   8++CD0D CD 12 CD     	call	.Num1
   9++CD10 0E FF        	ld	c,-1
  10++CD12              .Num1:
  11++CD12 06 2F        	ld	b,'0'-1
  12++CD14              .Num2:
  13++CD14 04           	inc		b
  14++CD15 81           	add		a,c
  15++CD16 38 FC        	jr		c,.Num2
  16++CD18 91           	sub 	c
  17++CD19 C5           	push	bc
  18++CD1A F5           	push	af
  19++CD1B 79           	ld		a,c
  20++CD1C FE FF        	cp		-1
  21++CD1E CC 27 CD     	call	z,.InsertDot
  22++CD21 78           	ld		a,b
  23++CD22 12           	ld		(de),a
  24++CD23 13           	inc		de
  25++CD24 F1           	pop		af
  26++CD25 C1           	pop		bc
  27++CD26 C9           	ret
  28++CD27              .InsertDot:
  29++CD27 3E 2E        	ld		a,'.'
  30++CD29 12           	ld		(de),a
  31++CD2A 13           	inc		de
  32++CD2B C9           	ret
  33++CD2C
# file closed: ./Menus/get_fuel_level_inlineinclude.asm
 286+ CD2C
 287+ CD2C              ;----------------------------------------------------------------------------------------------------------------------------------
 288+ CD2C CD D7 CC     draw_STAT_maintext:    	call    draw_STAT_boilertext
 289+ CD2F 3A 45 80     .PresentSystem:         ld      a,(Galaxy)       ; DEBUG as galaxy n is not working
 290+ CD32                                      MMUSelectGalaxyA
 290+ CD32 ED 92 57    >                     nextreg GalaxyDataMMU,     a
 291+ CD35 ED 4B 58 80                          ld      bc, (PresentSystemX)
 292+ CD39 CD BB FA                             call    galaxy_name_at_bc
 293+ CD3C 11 48 CB                             ld      de,stat_present_name
 294+ CD3F CD 86 CB                             call    stat_copy_to_name
 295+ CD42                                      MMUSelectLayer2
 295+ CD42 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 296+ CD46                                      print_msg_macro txt_status_colour,  present_pos_row,  present_pos_col,  stat_present_name
 296+ CD46 0E FF       >                        ld      c,txt_status_colour
 296+ CD48 06 20       >                        ld      b,present_pos_row
 296+ CD4A 21 A0 00    >                        ld      hl,present_pos_col
 296+ CD4D 11 48 CB    >                        ld      de,stat_present_name
 296+ CD50 CD 4B E6    >                        call    l2_print_at_320
 297+ CD53 3A 45 80     .HyperspaceSystem:      ld      a,(Galaxy)      ; DEBUG as galaxy n is not working
 298+ CD56                                      MMUSelectGalaxyA
 298+ CD56 ED 92 57    >                     nextreg GalaxyDataMMU,     a
 299+ CD59 ED 4B 5A 80                          ld      bc, (TargetSystemX)
 300+ CD5D CD BB FA                             call    galaxy_name_at_bc
 301+ CD60 11 67 CB                             ld      de,stat_target_name
 302+ CD63 CD 86 CB                             call    stat_copy_to_name
 302+ CD66
 303+ CD66                                      MMUSelectLayer2
 303+ CD66 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 304+ CD6A                                      print_msg_macro txt_status_colour,  hyperspace_pos_row,  hyperspace_pos_col,  stat_target_name
 304+ CD6A 0E FF       >                        ld      c,txt_status_colour
 304+ CD6C 06 28       >                        ld      b,hyperspace_pos_row
 304+ CD6E 21 A0 00    >                        ld      hl,hyperspace_pos_col
 304+ CD71 11 67 CB    >                        ld      de,stat_target_name
 304+ CD74 CD 4B E6    >                        call    l2_print_at_320
 305+ CD77 CD 21 CE     .StatusText:	        call	get_cmdr_condition
 306+ CD7A 21 21 88                             ld		hl, ConditionNameIdx
 307+ CD7D CD 39 89                             call	getTableText
 308+ CD80 EB                                   ex      hl,de
 309+ CD81                                      print_msg_at_de_macro txt_status_colour,  condition_pos_row,  condition_pos_col
 309+ CD81 0E FF       >                        ld      c,txt_status_colour
 309+ CD83 06 30       >                        ld      b,condition_pos_row
 309+ CD85 21 A0 00    >                        ld      hl,condition_pos_col
 309+ CD88 CD 4B E6    >                        call    l2_print_at_320
 310+ CD8B CD 00 CD     .DisplayFuel:           call	GetStatFuelLevel
 311+ CD8E 21 D0 AE                             ld		hl, txt_fuel_level
 312+ CD91 7E                                   ld		a,(hl)
 313+ CD92 FE 30                                cp		'0'
 314+ CD94 20 02                                jr		nz,.PrintFuel
 315+ CD96 23           .SkipLeadingZero:	    inc		hl
 316+ CD97 EB                                   ex      de,hl
 317+ CD98              .PrintFuel:             print_msg_at_de_macro txt_status_colour,  fuel_pos_row,  fuel_pos_col
 317+ CD98 0E FF       >                        ld      c,txt_status_colour
 317+ CD9A 06 38       >                        ld      b,fuel_pos_row
 317+ CD9C 21 A0 00    >                        ld      hl,fuel_pos_col
 317+ CD9F CD 4B E6    >                        call    l2_print_at_320
 318+ CDA2 CD 37 CC     .DisplayCash:           call	STAT_GetCash
 319+ CDA5                                      print_msg_macro txt_status_colour,  cash_pos_row,  cash_pos_col,  STAT_cash_amount
 319+ CDA5 0E FF       >                        ld      c,txt_status_colour
 319+ CDA7 06 40       >                        ld      b,cash_pos_row
 319+ CDA9 21 A0 00    >                        ld      hl,cash_pos_col
 319+ CDAC 11 3A CB    >                        ld      de,STAT_cash_amount
 319+ CDAF CD 4B E6    >                        call    l2_print_at_320
 320+ CDB2 3A 67 80     .PrintLegalStatus:      ld		a,(FugitiveInnocentStatus)
 321+ CDB5 FE 00                                cp		0
 322+ CDB7 20 05                                jr		nz,.Naughty
 323+ CDB9 11 16 8A                             ld		de,WordClean
 324+ CDBC 18 0C                                jr		.DisplayLegalStatus
 325+ CDBE FE 32        .Naughty:               cp		50
 326+ CDC0 38 05                                jr		c,.JustOffender
 327+ CDC2 11 25 8A     .VeryNaughty:           ld		de,WordFugitive
 328+ CDC5 18 03                                jr		.DisplayLegalStatus
 329+ CDC7 11 1C 8A     .JustOffender:          ld		de,WordOffender
 330+ CDCA              .DisplayLegalStatus:    print_msg_at_de_macro txt_status_colour,  legal_status_pos_row,  legal_status_pos_col
 330+ CDCA 0E FF       >                        ld      c,txt_status_colour
 330+ CDCC 06 48       >                        ld      b,legal_status_pos_row
 330+ CDCE 21 A0 00    >                        ld      hl,legal_status_pos_col
 330+ CDD1 CD 4B E6    >                        call    l2_print_at_320
 331+ CDD4 3A 6A 80     .DisplayRating:         ld      a,(CurrentRank)
 332+ CDD7                                      ; now cached ld		de,(KillTally)
 333+ CDD7                                      ; now cached call	getRankIndex
 334+ CDD7 21 23 89                             ld		hl, RankingNameIdx
 335+ CDDA CD 39 89                             call	getTableText
 336+ CDDD EB                                   ex      de,hl
 337+ CDDE                                      print_msg_at_de_macro txt_status_colour,  rank_pos_row,  rank_pos_col
 337+ CDDE 0E FF       >                        ld      c,txt_status_colour
 337+ CDE0 06 50       >                        ld      b,rank_pos_row
 337+ CDE2 21 A0 00    >                        ld      hl,rank_pos_col
 337+ CDE5 CD 4B E6    >                        call    l2_print_at_320
 338+ CDE8 C9                                   ret
 339+ CDE9              ; Draw items on 320 mode, max 28 items 14 per column
 340+ CDE9
 341+ CDE9              draw_STAT_items:        MMUSelectLayer2
 341+ CDE9 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 342+ CDED 21 3A C1                             ld      hl,STAT_display_buffer                      ; hl = pointer to first item in display
 343+ CDF0 EB           .ReadyToPrint:          ex      de,hl                                       ; de = message to print
 344+ CDF1 21 08 00                             ld      hl,equipment1_pos_col                       ; hl = column
 345+ CDF4 06 78                                ld      b,equipment1_pos_row                        ; b = row for first line
 346+ CDF6 1A           .CheckIfPrintable:      ld      a,(de)                                      ; if its not a lead ">" then we have run out
 347+ CDF7 FE 3E                                cp      '>'
 348+ CDF9 C0                                   ret     nz
 349+ CDFA D5 E5 C5     .DrawARow:              push    de,,hl,,bc                                  ; Save vars
 350+ CDFD                                      print_msg_at_de_at_b_hl_macro txt_status_colour     ; Print text at row b col hl
 350+ CDFD 0E FF       >                        ld      c,txt_status_colour
 350+ CDFF CD 4B E6    >                        call    l2_print_at_320
 351+ CE02 C1 E1 D1                             pop     de,,hl,,bc                                  ; get back row and column, we don't change column for now
 352+ CE05 7D                                   ld      a,l
 353+ CE06 FE 08                                cp      equipment1_pos_col
 354+ CE08 CA 15 CE                             jp      z,.MoveRight
 355+ CE0B 21 08 00     .DownOneLeft:           ld      hl,equipment1_pos_col
 356+ CE0E 3E 08                                ld      a,8
 357+ CE10 80                                   add     a,b
 358+ CE11 47                                   ld      b,a
 359+ CE12 C3 18 CE                             jp      .nextBufferItem
 360+ CE15 21 90 00     .MoveRight:             ld      hl,equipment2_pos_col
 361+ CE18 3E 14        .nextBufferItem:        ld      a,STAT_buffer_row_len                       ; nbr characters per message
 362+ CE1A EB                                   ex      de,hl
 363+ CE1B ED 31                                add     hl,a
 364+ CE1D EB                                   ex      de,hl
 365+ CE1E C3 F6 CD                             jp      .CheckIfPrintable
 366+ CE21
 367+ CE21
 368+ CE21              ;----------------------------------------------------------------------------------------------------------------------------------
 369+ CE21
 370+ CE21 3A 94 81     get_cmdr_condition:     ld			a,(DockedFlag)
 371+ CE24 FE FF                                cp			StatePlayerDocked
 372+ CE26 28 17                                jr			z,.PlayerIsDocked
 373+ CE28              .PlayerNotDocked:	    ReturnIfMemTrue    SpaceStationSafeZone
 373+ CE28 3A 5E 80    >                        ld      a,(SpaceStationSafeZone)
 373+ CE2B A7          >                        and     a
 373+ CE2C C8          >                        ret     z
 374+ CE2D CD 4C 85                             call        AreShipsPresent
 375+ CE30 38 03                                jr          c,.NoShipsAround
 376+ CE32 3E 01                                ld          a,1
 377+ CE34 C9                                   ret
 378+ CE35 3A 55 82     .NoShipsAround:         ld			a,(PlayerEnergy)
 379+ CE38 FE 80                                cp			$80
 380+ CE3A 3E 01                                ld          a,1
 381+ CE3C CE 01                                adc         1                                       ; add 1 + carry, if a < 128 then carry set so goes red
 382+ CE3E C9                                   ret
 383+ CE3F AF           .PlayerIsDocked:        xor			a
 384+ CE40 C9                                   ret
 385+ CE41
 386+ CE41              draw_status_menu:       MMUSelectLayer1
 386+ CE41 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 387+ CE45 CD 8F E0                             call	l1_cls
 388+ CE48 3E 07                                ld		a,7
 389+ CE4A CD AA E0                             call	l1_attr_cls_to_a
 390+ CE4D                                      MMUSelectLayer2
 390+ CE4D ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 391+ CE51 CD C5 E3                             call    l2_320_initialise
 392+ CE54 CD 0C E0                             call    asm_l2_double_buffer_off
 393+ CE57 CD 40 E3                             call    l2_320_cls
 394+ CE5A                                      MMUSelectSpriteBank
 394+ CE5A ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
 395+ CE5E CD B7 E7                             call    sprite_cls_cursors
 396+ CE61                                      MMUSelectLayer2
 396+ CE61 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 397+ CE65 CD 3D E7     .Drawbox:               call    l2_draw_menu_border
 398+ CE68 3E 08                                ld		a,8
 399+ CE6A 32 C3 7F                             ld		(MenuIdMax),a
 400+ CE6D 06 17                                ld      b,$17
 401+ CE6F 21 01 00                             ld      hl,1
 402+ CE72 11 3C 01                             ld      de,320-4
 403+ CE75 0E C0                                ld      c,$C0
 404+ CE77 CD FE E7                             call    l2_draw_horz_line_320           ;b = row; hl = col, de = length, c = color"
 405+ CE7A 06 6C                                ld      b,$6C
 406+ CE7C 21 01 00                             ld      hl,1
 407+ CE7F 11 3C 01                             ld      de,320-4
 408+ CE82 0E C0                                ld      c,$C0
 409+ CE84 CD FE E7                             call    l2_draw_horz_line_320           ;b = row; hl = col, de = length, c = color"
 410+ CE87 CD 2C CD                             call    draw_STAT_maintext
 411+ CE8A
 412+ CE8A CD 79 CC     .equipment              call    STAT_buffer_list
 413+ CE8D CD E9 CD                             call    draw_STAT_items
 414+ CE90
 415+ CE90 C9                                   ret
 416+ CE91
 417+ CE91              ;----------------------------------------------------------------------------------------------------------------------------------
 418+ CE91              ; Handles all the input whilst in the market menu
 419+ CE91              loop_STAT_menu:         ;MacroIsKeyPressed c_Pressed_CursorUp
 420+ CE91                                      ;call    z,STAT_UpPressed
 421+ CE91                                      ;MacroIsKeyPressed c_Pressed_CursorDown
 422+ CE91                                      ;call    z,STAT_DownPressed
 423+ CE91 C9                                   ret
 424+ CE92
 425+ CE92              ;----------------------------------------------------------------------------------------------------------------------------------
 426+ CE92              ;STAT_UpPressed:         xor     a
 427+ CE92              ;                        ld      (STAT_selected_row),a
 428+ CE92              ;.check_scroll_up:       ld      a,(STAT_current_topItem)
 429+ CE92              ;                        cp      0
 430+ CE92              ;                        ret     z
 431+ CE92              ;                        dec     a           ; chjange later to buffering step back 1
 432+ CE92              ;                        ld      (STAT_current_topItem),a
 433+ CE92              ;                        call    draw_STAT_items
 434+ CE92              ;                        call    draw_STAT_boilertext
 435+ CE92              ;                        ret
 436+ CE92              ;----------------------------------------------------------------------------------------------------------------------------------
 437+ CE92              ;STAT_DownPressed:       ld      a,STAT_eqip_window_len-1
 438+ CE92              ;                        ld      (STAT_selected_row),a
 439+ CE92              ;                        ld      a,(STAT_current_end)
 440+ CE92              ;                        ld      b,a                             ; This check is if the current list is < one screen
 441+ CE92              ;                        dec     b
 442+ CE92              ;                        ld      a,(STAT_selected_row)
 443+ CE92              ;                        cp      b
 444+ CE92              ;                        ret     z
 445+ CE92              ;                        cp      STAT_eqip_window_len-1
 446+ CE92              ;                        jr      z, .check_scroll_down
 447+ CE92              ;                        ld      hl,STAT_selected_row
 448+ CE92              ;                        inc     (hl)
 449+ CE92              ;                        ret
 450+ CE92              ;.check_scroll_down:     ld      b,a
 451+ CE92              ;                        ld      a,(STAT_current_topItem)
 452+ CE92              ;                        add     b
 453+ CE92              ;                        inc     a
 454+ CE92              ;                        ld      hl,STAT_current_end
 455+ CE92              ;                        ReturnIfAGTEusng      (hl)
 456+ CE92              ;.can_scroll_down:       ld      hl,STAT_current_topItem
 457+ CE92              ;                        inc     (hl)
 458+ CE92              ;                        call    draw_STAT_items
 459+ CE92              ;                        call    draw_STAT_boilertext
 460+ CE92              ;                        ret
 461+ CE92
 462+ CE92
# file closed: ./Menus/status_menu.asm
 916  CE92                                  DISPLAY "Bank ",BankMenuStatus," - Bytes free ",/D, $2000 - ($-MenuStatusAddr), " - BankMenuStatus"
 917  CE92                                  ASSERT $-MenuStatusAddr <8912 , Bank code leaks over 8K boundary
 918  CE92              ; Bank 64  ------------------------------------------------------------------------------------------------------------------------
 919  CE92                                  SLOT    MenuEquipSAddr
 920  CE92                                  PAGE    BankMenuEquipS
 921  CE92                                  ORG     MenuEquipSAddr
 922  C000                                  INCLUDE "./Menus/equip_ship_menu.asm"
# file opened: ./Menus/equip_ship_menu.asm
   1+ C000 45 71 75 69  eqshp_prices_page_marker  DB "EquipShipPG63"
   1+ C004 70 53 68 69
   1+ C008 70 50 47 36
   1+ C00C 33
   2+ C00D 50 02 19 C0  eqshp_boiler_text		DW $0250,eqship_title
   3+ C011 20 02 70 90  						DW $0220,name_expanded
   4+ C015 08 B0 24 C0                          DW $B008,eqship_cash
   5+ C019
   6+ C019 45 71 75 69  eqship_title            DB "Equip Ship",0
   6+ C01D 70 20 53 68
   6+ C021 69 70 00
   7+ C024 43 61 73 68  eqship_cash				DB "Cash : ",0
   7+ C028 20 3A 20 00
   8+ C02C
   9+ C02C 30 30 2E 30  txt_eqshp_amount	    DB "00.0",0
   9+ C030 00
  10+ C031 39 39 39 00  txt_eqshp_quantity      DB "999",0
  11+ C035 39 39 39 00  txt_eqshp_cargo         DB "999",0
  12+ C039 00 00        eqshp_cursor			DW  $0000
  13+ C03B              eqshp_position			equ $1808
  14+ C03B              eqshp_uom				equ	$68
  15+ C03B              eqshp_price 			equ $88
  16+ C03B              eqshp_Quantity			equ	$B0
  17+ C03B              eqshp_Cargo             equ $E0
  18+ C03B              eqshp_UomOffset		    equ 46
  19+ C03B 20 20 20 20  eqshp_blank_line        DB "                                ",0
  19+ C03F 20 20 20 20
  19+ C043 20 20 20 20
  19+ C047 20 20 20 20
  19+ C04B 20 20 20 20
  19+ C04F 20 20 20 20
  19+ C053 20 20 20 20
  19+ C057 20 20 20 20
  19+ C05B 00
  20+ C05C
  21+ C05C 00 00 00...  eqshp_item_price        DS 20
  22+ C070
  23+ C070              eqshp_cash_position     equ $B048
  24+ C070 00 00 00...  eqshp_cash_amount		DS 20
  25+ C084 20 43 72 20  eqshp_cash_UoM          DB " Cr       ",0
  25+ C088 20 20 20 20
  25+ C08C 20 20 00
  26+ C08F
  27+ C08F 00           eqshp_selected_row      DB 0
  28+ C090 00           eqshp_current_topItem   DB 0
  29+ C091 00           eqshp_current_end       DB 0
  30+ C092              eqship_buffer_rows      EQU     128
  31+ C092              eqship_buffer_row_len   EQU      32
  32+ C092              eqship_display_buff_len EQU     eqship_buffer_rows *   eqship_buffer_row_len
  33+ C092 00 00 00...  eqship_display_buffer:  DS      eqship_display_buff_len                     ; maxium of 128 items can be coded for
  34+ D092 00 00 00...  eqship_buyable_buffer:  DS      128
  35+ D112              eqship_buffer_cash_col: EQU     21
  36+ D112              eqship_fitted_module:   EQU     29
  37+ D112              ;----------------------------------------------------------------------------------------------------------------------------------
  38+ D112 3A 8F C0     eqshp_highlight_row:    ld      a,(eqshp_selected_row)
  39+ D115 C6 03                                add     a,3
  40+ D117 57                                   ld      d,a
  41+ D118 1E 56                                ld      e,L1InvHighlight
  42+ D11A                                      MMUSelectLayer1
  42+ D11A ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
  43+ D11E CD 3F E0                             call    l1_hilight_row
  44+ D121 C9                                   ret
  45+ D122              ;----------------------------------------------------------------------------------------------------------------------------------
  46+ D122 3A 8F C0     eqshp_lowlight_row      ld      a,(eqshp_selected_row)
  47+ D125 C6 03                                add     a,3
  48+ D127 57                                   ld      d,a
  49+ D128 1E 07                                ld      e,L1InvLowlight
  50+ D12A                                      MMUSelectLayer1
  50+ D12A ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
  51+ D12E CD 3F E0                             call    l1_hilight_row
  52+ D131 C9                                   ret
  53+ D132              ;----------------------------------------------------------------------------------------------------------------------------------
  54+ D132 CD 49 D1     eqshp_DispDEIXtoIY1DP:  call    eqshp_DispDEIXtoIY
  55+ D135 FD 36 02 00                          ld      (iy+2),0
  56+ D139 FD 7E 00                             ld      a,(IY+0)
  57+ D13C FD 77 01                             ld      (IY+1),a
  58+ D13F 3E 2E                                ld      a,"."
  59+ D141 FD 77 00                             ld      (IY+0),a
  60+ D144 FD 23                                inc     IY
  61+ D146 FD 23                                inc     IY
  62+ D148 C9                                   ret
  63+ D149              ;----------------------------------------------------------------------------------------------------------------------------------
  64+ D149 DD 22 DA D1  eqshp_DispDEIXtoIY:     ld (.EQSHPclcn32z),ix
  65+ D14D ED 53 DC D1                          ld (.EQSHPclcn32zIX),de
  66+ D151 DD 21 D6 D1                          ld ix,.EQSHPclcn32t+36
  67+ D155 06 09                                ld b,9
  68+ D157 0E 00                                ld c,0
  69+ D159 3E 30        .EQSHPclcn321:            ld a,'0'
  70+ D15B B7                                   or a
  71+ D15C DD 5E 00     .EQSHPclcn322:            ld e,(ix+0)
  72+ D15F DD 56 01                             ld d,(ix+1)
  73+ D162 2A DA D1                             ld hl,(.EQSHPclcn32z)
  74+ D165 ED 52                                sbc hl,de
  75+ D167 22 DA D1                             ld (.EQSHPclcn32z),hl
  76+ D16A DD 5E 02                             ld e,(ix+2)
  77+ D16D DD 56 03                             ld d,(ix+3)
  78+ D170 2A DC D1                             ld hl,(.EQSHPclcn32zIX)
  79+ D173 ED 52                                sbc hl,de
  80+ D175 22 DC D1                             ld (.EQSHPclcn32zIX),hl
  81+ D178 38 04                                jr c,.EQSHPclcn325
  82+ D17A 0C                                   inc c
  83+ D17B 3C                                   inc a
  84+ D17C 18 DE                                jr .EQSHPclcn322
  85+ D17E DD 5E 00     .EQSHPclcn325:            ld e,(ix+0)
  86+ D181 DD 56 01                             ld d,(ix+1)
  87+ D184 2A DA D1                             ld hl,(.EQSHPclcn32z)
  88+ D187 19                                   add hl,de
  89+ D188 22 DA D1                             ld (.EQSHPclcn32z),hl
  90+ D18B DD 5E 02                             ld e,(ix+2)
  91+ D18E DD 56 03                             ld d,(ix+3)
  92+ D191 2A DC D1                             ld hl,(.EQSHPclcn32zIX)
  93+ D194 ED 5A                                adc hl,de
  94+ D196 22 DC D1                             ld (.EQSHPclcn32zIX),hl
  95+ D199 11 FC FF                             ld de,-4
  96+ D19C DD 19                                add ix,de
  97+ D19E 0C                                   inc c
  98+ D19F 0D                                   dec c
  99+ D1A0 28 05                                jr z,.EQSHPclcn323
 100+ D1A2 FD 77 00                             ld (iy+0),a
 101+ D1A5 FD 23                                inc iy
 102+ D1A7 10 B0        .EQSHPclcn323:            djnz .EQSHPclcn321
 103+ D1A9 3A DA D1                             ld a,(.EQSHPclcn32z)
 104+ D1AC C6 30                                add A,'0'
 105+ D1AE FD 77 00                             ld (iy+0),a
 106+ D1B1 C9                                   ret
 107+ D1B2 01 00 00 00  .EQSHPclcn32t             dw 1,0,     10,0,     100,0,     1000,0,       10000,0
 107+ D1B6 0A 00 00 00
 107+ D1BA 64 00 00 00
 107+ D1BE E8 03 00 00
 107+ D1C2 10 27 00 00
 108+ D1C6 A0 86 01 00                          dw $86a0,1, $4240,$0f, $9680,$98, $e100,$05f5, $ca00,$3b9a
 108+ D1CA 40 42 0F 00
 108+ D1CE 80 96 98 00
 108+ D1D2 00 E1 F5 05
 108+ D1D6 00 CA 9A 3B
 109+ D1DA 00 00        .EQSHPclcn32z             ds 2
 110+ D1DC 00 00        .EQSHPclcn32zIX           ds 2
 111+ D1DE              ;----------------------------------------------------------------------------------------------------------------------------------
 112+ D1DE              ; "DispHL, writes HL to DE address"
 113+ D1DE 01 F0 D8     EQSHP_DispHLtoDE:         ld	bc,-10000
 114+ D1E1 CD F7 D1                             call	EQSHP_Num1
 115+ D1E4 01 18 FC                             ld	bc,-1000
 116+ D1E7 CD F7 D1                             call	EQSHP_Num1
 117+ D1EA 01 9C FF                             ld	bc,-100
 118+ D1ED CD F7 D1                             call	EQSHP_Num1
 119+ D1F0 0E F6                                ld	c,-10
 120+ D1F2 CD F7 D1                             call	EQSHP_Num1
 121+ D1F5 0E FF                                ld	c,-1
 122+ D1F7 3E 2F        EQSHP_Num1:	            ld	a,'0'-1
 123+ D1F9 3C           .Num2:	                inc	a
 124+ D1FA 09                                   add	hl,bc
 125+ D1FB 38 FC                                jr	c,.Num2
 126+ D1FD ED 42                                sbc	hl,bc
 127+ D1FF 12                                   ld	(de),a
 128+ D200 13                                   inc	de
 129+ D201 C9                                   ret
 130+ D202              ;----------------------------------------------------------------------------------------------------------------------------------
 131+ D202 26 00        EQSHP_DispAtoDE:          ld h,0
 132+ D204 6F                                   ld l,a
 133+ D205 C3 DE D1                             jp EQSHP_DispHLtoDE
 134+ D208              ;----------------------------------------------------------------------------------------------------------------------------------
 135+ D208 26 00        EQSHP_DispPriceAtoDE:     ld h,0
 136+ D20A 6F                                   ld l,a
 137+ D20B 01 9C FF                             ld	bc,-100
 138+ D20E CD 1E D2                             call	.NumLeadBlank1
 139+ D211 0E F6                                ld	c,-10
 140+ D213 CD F7 D1                             call	EQSHP_Num1
 141+ D216 3E 2E                                ld		a,'.'					; we could assume preformat but
 142+ D218                                                  DISPLAY "TODO: optimise"
 143+ D218 12                                   ld		(de),a					; we can optimse that later TODO
 144+ D219 13                                   inc		de						; with just an inc De
 145+ D21A 0E FF                                ld	c,-1
 146+ D21C 18 D9                                jr		EQSHP_Num1
 147+ D21E 3E 2F        .NumLeadBlank1:	        ld	a,'0'-1
 148+ D220 3C           .NumLeadBlank2:	        inc	a
 149+ D221 09                                   add	hl,bc
 150+ D222 38 FC                                jr	c,.NumLeadBlank2
 151+ D224 FE 30                                cp	'0'
 152+ D226 20 02                                jr	nz,.DontBlank
 153+ D228 3E 20        .Blank:                 ld	a,' '
 154+ D22A ED 42        .DontBlank:	            sbc	hl,bc
 155+ D22C 12                                   ld	(de),a
 156+ D22D 13                                   inc	de
 157+ D22E C9                                   ret
 158+ D22F              ;----------------------------------------------------------------------------------------------------------------------------------
 159+ D22F FE 00        EQSHP_DispQtyAtoDE:      cp	0
 160+ D231 28 30                                jr	z,.NoStock
 161+ D233 26 00                                ld h,0
 162+ D235 6F                                   ld l,a
 163+ D236 01 9C FF                             ld	bc,-100
 164+ D239 CD 52 D2                             call	.NumLeadBlank1
 165+ D23C FE 20        .WasLead0:              cp      ' '
 166+ D23E 20 09                                jr      nz,.NotHundredsZero
 167+ D240 0E F6                                ld	c,-10
 168+ D242 CD 52 D2                             call	.NumLeadBlank1
 169+ D245 0E FF                                ld	c,-1
 170+ D247 18 AE                                jr		EQSHP_Num1
 171+ D249 0E F6        .NotHundredsZero:       ld	c,-10
 172+ D24B CD F7 D1                             call	EQSHP_Num1
 173+ D24E 0E FF                                ld	c,-1
 174+ D250 18 A5                                jr		EQSHP_Num1
 175+ D252 3E 2F        .NumLeadBlank1:	        ld	a,'0'-1
 176+ D254 3C           .NumLeadBlank2:	        inc	a
 177+ D255 09                                   add	hl,bc
 178+ D256 38 FC                                jr	c,.NumLeadBlank2
 179+ D258 FE 30                                cp	'0'
 180+ D25A 20 02                                jr	nz,.DontBlank
 181+ D25C 3E 20        .Blank:                 ld	a,' '
 182+ D25E ED 42        .DontBlank:	            sbc	hl,bc
 183+ D260 12                                   ld	(de),a
 184+ D261 13                                   inc	de
 185+ D262 C9                                   ret
 186+ D263 3E 20        .NoStock:               ld	a,' '
 187+ D265 12                                   ld	(de),a
 188+ D266 13                                   inc	de
 189+ D267 12                                   ld	(de),a
 190+ D268 13                                   inc	de
 191+ D269 3E 2D                                ld	a,'-'
 192+ D26B 12                                   ld	(de),a
 193+ D26C 13                                   inc de
 194+ D26D C9                                   ret
 195+ D26E              ;----------------------------------------------------------------------------------------------------------------------------------
 196+ D26E              EQSHP_print_boiler_text:  INCLUDE "Menus/print_boiler_text_inlineInclude.asm"
# file opened: ./Menus/print_boiler_text_inlineInclude.asm
   1++D26E
   2++D26E              ;">print_boilder_text hl = text structure, b = message count"
   3++D26E C5           .BoilerTextLoop:        push		bc			; Save Message Count loop value
   4++D26F 4E                                   ld			c,(hl)		; Get Row into b
   5++D270 23                                   inc			hl
   6++D271 46                                   ld			b,(hl)		; Get Col into b
   7++D272 23                                   inc			hl
   8++D273 5E                                   ld			e,(hl)		; Get text address Lo into E
   9++D274 23                                   inc			hl
  10++D275 56                                   ld			d,(hl)		; Get text address Hi into E
  11++D276 23                                   inc			hl
  12++D277 E5                                   push		hl			; Save present HL to stack as this is the address for the next message
  13++D278 EB                                   ex			de,hl		; now hl = address of text data
  14++D279 1E FF                                ld			e,txt_status_colour
  15++D27B C5                                   push		bc
  16++D27C D1                                   pop			de
  17++D27D                                      MMUSelectLayer1
  17++D27D ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
  18++D281 CD E3 E0                             call		l1_print_at
  19++D284 E1                                   pop			hl
  20++D285 C1                                   pop			bc
  21++D286 10 E6                                djnz		.BoilerTextLoop
  22++D288 C9                                   ret
  23++D289
# file closed: ./Menus/print_boiler_text_inlineInclude.asm
 197+ D289              ;----------------------------------------------------------------------------------------------------------------------------------
 198+ D289 2A 91 85     eqshp_GetCash:          ld		hl,(Cash+2)
 199+ D28C EB                                   ex      de,hl
 200+ D28D DD 2A 8F 85                          ld      ix,(Cash)
 201+ D291 FD 21 70 C0                          ld		iy,eqshp_cash_amount
 202+ D295 CD 32 D1                             call 	eqshp_DispDEIXtoIY1DP
 203+ D298 FD E5                                push    IY
 204+ D29A D1                                   pop     de
 205+ D29B 21 84 C0                             ld      hl,eqshp_cash_UoM
 206+ D29E 01 0B 00                             ld      bc,11
 207+ D2A1 ED B0                                ldir
 208+ D2A3 C9                                   ret
 209+ D2A4              ;----------------------------------------------------------------------------------------------------------------------------------
 210+ D2A4 CD 89 D2     eqshp_DisplayCash:      call	eqshp_GetCash
 211+ D2A7 21 70 C0                             ld		hl,eqshp_cash_amount
 212+ D2AA 11 48 B0                             ld      de,eqshp_cash_position
 213+ D2AD                                      MMUSelectLayer1
 213+ D2AD ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 214+ D2B1 CD E3 E0                             call	l1_print_at
 215+ D2B4 C9                                   ret
 216+ D2B5              ;----------------------------------------------------------------------------------------------------------------------------------
 217+ D2B5 7E           eqshp_expand_word:      ld      a,(hl)
 218+ D2B6 FE 00                                cp      0
 219+ D2B8 C8                                   ret     z
 220+ D2B9 12                                   ld      (de),a
 221+ D2BA 23                                   inc     hl
 222+ D2BB 13                                   inc     de
 223+ D2BC 18 F7                                jr      eqshp_expand_word
 224+ D2BE
 225+ D2BE              ; hl = list of words
 226+ D2BE              ; de = adress to expand to
 227+ D2BE 7E           eqshp_expand_name:      ld      a,(hl)
 228+ D2BF 47                                   ld      b,a
 229+ D2C0 23                                   inc     hl
 230+ D2C1 7E                                   ld      a,(hl)              ; its a 16 bit
 231+ D2C2 2B                                   dec     hl                  ; move back one for now, need to optimise laters
 232+ D2C3 B0                                   or      b
 233+ D2C4 20 01                                jr      nz,.MoreToDo
 234+ D2C6              ;                        ld      (de),a we dont want the null marker now
 235+ D2C6 C9                                   ret
 236+ D2C7 E5 D5        .MoreToDo:              push    hl,,de
 237+ D2C9 7E                                   ld      a,(hl)              ; bodge for now no optimise
 238+ D2CA 5F                                   ld      e,a
 239+ D2CB 23                                   inc     hl
 240+ D2CC 7E                                   ld      a,(hl)
 241+ D2CD 57                                   ld      d,a
 242+ D2CE EB                                   ex      hl,de               ; hl is now Word... address
 243+ D2CF D1                                   pop     de                  ; de back to pointer to buffer
 244+ D2D0 CD B5 D2     .ProcessWord:           call    eqshp_expand_word
 245+ D2D3 3E 20                                ld      a," "               ; speculative space
 246+ D2D5 12                                   ld      (de),a
 247+ D2D6 13                                   inc     de
 248+ D2D7 E1                                   pop     hl                  ; get string pointer back
 249+ D2D8 23                                   inc     hl
 250+ D2D9 23                                   inc     hl                  ; on to next word
 251+ D2DA 18 E2                                jr      eqshp_expand_name
 252+ D2DC
 253+ D2DC 21 92 C0     eqshp_buffer_list:      ld      hl,eqship_display_buffer                    ; hl - target buffer
 254+ D2DF 3E 01                                ld      a,1                                         ; so it will still skip them on printing
 255+ D2E1 11 00 10                             ld      de, eqship_display_buff_len
 256+ D2E4 CD 32 7E                             call    memfill_dma                                 ; full buffer with ASCII 1 (unprintable character)
 257+ D2E7 21 B1 C0                             ld      hl,eqship_display_buffer+eqship_buffer_row_len-1
 258+ D2EA 11 20 00                             ld      de,eqship_buffer_row_len
 259+ D2ED 06 1A                                ld      b,ShipEquipTableSize
 260+ D2EF AF                                   xor     a
 261+ D2F0 77           .EoLLoop:               ld      (hl),a                                      ; fix all buffer lines with a null
 262+ D2F1 19                                   add     hl,de
 263+ D2F2 10 FC                                djnz    .EoLLoop
 264+ D2F4 06 1A                                ld      b,ShipEquipTableSize                        ; CurrentGameMaxEquipment
 265+ D2F6 DD 21 D6 F4                          ld      ix,ShipEquipmentList                        ; ix = equipment master table
 266+ D2FA FD 21 92 C0                          ld      iy,eqship_display_buffer                    ; iy = target buffer
 267+ D2FE 0E 00                                ld      c,0                                         ; Current Row
 268+ D300 DD 7E 01     .ProcessRow:            ld      a,(ix+1)                                    ; get can buy
 269+ D303 FE FF                                cp      $FF                                         ; if its $FF then do not display
 270+ D305 C2 12 D3                             jp      nz,.BufferItem
 271+ D308 11 10 00     .DoNotDisplay:          ld      de,ShipEquipTableRowLen                     ; mov eto next equipment list, 7 =  row length
 272+ D30B DD 19                                add     ix,de
 273+ D30D 10 F1                                djnz    .ProcessRow
 274+ D30F C3 75 D3                             jp      .DoneProcess
 275+ D312 FD E5 DD E5  .BufferItem:            push    iy,,ix,,bc
 275+ D316 C5
 276+ D317 DD 7E 00                             ld      a,(ix+0)                                    ; get can buy
 277+ D31A 21 92 D0                             ld      hl,eqship_buyable_buffer                    ;
 278+ D31D 59                                   ld      e,c
 279+ D31E 16 00                                ld      d,0                                         ;
 280+ D320 19                                   add     hl,de                                       ;
 281+ D321 77                                   ld      (hl),a                                      ; set buyable to 0
 282+ D322 21 06 F4                             ld      hl,ShipEquipNameTable                       ; look up equipment name
 283+ D325 16 08                                ld      d,EquipNameTableRowLen                       ; ship equip name row length
 284+ D327 59                                   ld      e,c
 285+ D328 ED 30                                mul
 286+ D32A 19                                   add     hl,de                                       ; hl = dword list of work pointers
 287+ D32B FD 54 FD 5D                          ld      de,iy                                       ; de = 0 column at current display buffer row
 288+ D32F C5                                   push    bc
 289+ D330 CD BE D2                             call    eqshp_expand_name                           ; expand name
 290+ D333 C1                                   pop     bc
 291+ D334 11 15 00                             ld      de,eqship_buffer_cash_col                   ; move buffer column to 20
 292+ D337 FD 19                                add     iy,de
 293+ D339 FD E5                                push    iy
 294+ D33B DD 7E 04                             ld      a,(ix+4)
 295+ D33E 5F                                   ld      e,a
 296+ D33F DD 7E 05                             ld      a,(ix+5)
 297+ D342 57                                   ld      d,a                                         ; de = price
 298+ D343 DD 62 DD 6B                          ld      ix,de
 299+ D347                                      ;push    de
 300+ D347                                      ;pop     ix
 301+ D347 11 00 00                             ld      de,0                                        ; deix = price
 302+ D34A CD 49 D1                             call    eqshp_DispDEIXtoIY                          ; print it to pos IY
 303+ D34D 3E 20                                ld      a," "
 304+ D34F FD 77 00                             ld      (IY+0),a
 305+ D352 FD 77 01                             ld      (IY+1),a
 306+ D355 FD 77 02                             ld      (IY+2),a
 307+ D358 FD E1                                pop     iy
 308+ D35A CD 7A D3                             call    .RightJustify
 309+ D35D C1 DD E1 FD                          pop     iy,,ix,,bc
 309+ D361 E1
 310+ D362 DD 7E 07     .CheckFitted:           ld      a,(ix+7)
 311+ D365 FD 77 1D                             ld      (iy+eqship_fitted_module),a
 312+ D368 11 20 00                             ld      de,eqship_buffer_row_len
 313+ D36B FD 19                                add     iy,de                                       ; now iy = start of next column
 314+ D36D 11 10 00                             ld      de,ShipEquipTableRowLen
 315+ D370 DD 19                                add     ix,de
 316+ D372 0C                                   inc     c
 317+ D373 10 8B                                djnz    .ProcessRow
 318+ D375 79           .DoneProcess:           ld      a,c
 319+ D376 32 91 C0                             ld      (eqshp_current_end),a
 320+ D379 C9                                   ret
 321+ D37A CD 7D D3     .RightJustify:          call    .RightJustify2
 322+ D37D CD 80 D3     .RightJustify2:         call    .RightJustify3
 323+ D380 FD 7E 03     .RightJustify3:         ld      a,(iy+3)
 324+ D383 FE 20                                cp      " "
 325+ D385 CC 89 D3                             call    z,.ShuffleRight
 326+ D388 C9                                   ret
 327+ D389 FD E5        .ShuffleRight:          push    iy
 328+ D38B E1                                   pop     hl
 329+ D38C 3E 03                                ld      a,3
 330+ D38E ED 31                                add     hl,a
 331+ D390 FD 7E 02                             ld      a,(iy+2)
 332+ D393 77                                   ld      (hl),a
 333+ D394 2B                                   dec     hl
 334+ D395 FD 7E 01                             ld      a,(iy+1)
 335+ D398 77                                   ld      (hl),a
 336+ D399 2B                                   dec     hl
 337+ D39A FD 7E 00                             ld      a,(iy+0)
 338+ D39D 77                                   ld      (hl),a
 339+ D39E 2B                                   dec     hl
 340+ D39F 3E 20                                ld      a," "
 341+ D3A1 77                                   ld      (hl),a
 342+ D3A2 C9                                   ret
 343+ D3A3
 344+ D3A3
 345+ D3A3              draw_eqship_items:      MMUSelectLayer1
 345+ D3A3 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 346+ D3A7 CD 8F E0                             call    l1_cls
 347+ D3AA 06 03                                ld		b,3
 348+ D3AC 21 0D C0                             ld		hl,eqshp_boiler_text
 349+ D3AF CD 6E D2                             call	EQSHP_print_boiler_text
 350+ D3B2 CD A4 D2                             call    eqshp_DisplayCash
 351+ D3B5 3A 90 C0                             ld      a,(eqshp_current_topItem)
 352+ D3B8 16 20                                ld      d,eqship_buffer_row_len
 353+ D3BA 5F                                   ld      e,a
 354+ D3BB ED 30                                mul
 355+ D3BD 21 92 C0                             ld      hl,eqship_display_buffer
 356+ D3C0 19                                   add     hl,de
 357+ D3C1 3A 90 C0                             ld      a,(eqshp_current_topItem)
 358+ D3C4 47                                   ld      b,a
 359+ D3C5 3A 91 C0                             ld      a,(eqshp_current_end)
 360+ D3C8 90                                   sub     b
 361+ D3C9                                      JumpIfALTNusng  18, .FillScreen
 361+ D3C9 FE 12       >                        cp      18
 361+ D3CB DA D2 D3    >                        jp		c, .FillScreen
 362+ D3CE 06 12        .JustWindowing:         ld      b,18
 363+ D3D0 18 01                                jr      .ReadyToPrint
 364+ D3D2 47           .FillScreen:            ld      b,a         ; the mumber of rows to display
 365+ D3D3 11 08 18     .ReadyToPrint:          ld      de,eqshp_position
 366+ D3D6 D5 E5 C5     .DrawARow:              push    de,,hl,,bc                  ; "l1 PrintAt, pixel row, whole char col, DE = yx, HL = message Addr"
 367+ D3D9 CD E3 E0                             call    l1_print_at
 367+ D3DC
 368+ D3DC C1 E1                                pop     hl,,bc                      ; get mesage addr back and move down one line
 369+ D3DE 11 20 00                             ld      de,eqship_buffer_row_len
 370+ D3E1 19                                   add     hl,de
 371+ D3E2 D1                                   pop     de                          ; get output row back
 372+ D3E3 3E 08                                ld      a,8
 373+ D3E5 82                                   add     a,d
 374+ D3E6 57                                   ld      d,a
 375+ D3E7 10 ED                                djnz    .DrawARow
 376+ D3E9 C9                                   ret
 377+ D3EA
 378+ D3EA              draw_eqshp_menu:        InitNoDoubleBuffer
 378+ D3EA             >                            MMUSelectLayer1
 378+ D3EA ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 378+ D3EE CD 8F E0    >                            call	l1_cls
 378+ D3F1 3E 07       >                            ld		a,7
 378+ D3F3 CD AA E0    >                            call	l1_attr_cls_to_a
 378+ D3F6             >                            MMUSelectLayer2
 378+ D3F6 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 378+ D3FA CD 0C E0    >                            call    asm_l2_double_buffer_off
 378+ D3FD CD 3A E3    >                            call	l2_cls	; Get some space
 378+ D400             >                            MMUSelectSpriteBank
 378+ D400 ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
 378+ D404 CD B7 E7    >                            call    sprite_cls_cursors
 379+ D407 3E 20                                ld      a,$20
 380+ D409 32 C3 7F                             ld      (MenuIdMax),a
 381+ D40C 3A 45 80     .SetData:               ld      a,(Galaxy)
 382+ D40F                                      MMUSelectGalaxyA
 382+ D40F ED 92 57    >                     nextreg GalaxyDataMMU,     a
 383+ D412 CD 6D F9                             call    galaxy_planet_data
 384+ D415 CD F5 F8                             call    galaxy_equip_market
 385+ D418 ED 4B 58 80                          ld      bc,(PresentSystemX)
 386+ D41C CD BB FA                             call    galaxy_name_at_bc
 387+ D41F CD 6D F9                             call    galaxy_planet_data
 388+ D422 AF                                   xor     a
 389+ D423 32 90 C0                             ld      (eqshp_current_topItem),a
 390+ D426 CD DC D2                             call    eqshp_buffer_list
 391+ D429 01 01 01     .Drawbox:               ld		bc,$0101
 392+ D42C 11 FD BE                             ld		de,$BEFD
 393+ D42F 3E C0                                ld		a,$C0
 394+ D431                                      MMUSelectLayer2
 394+ D431 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 395+ D435 CD DB E6                             call	l2_draw_box
 396+ D438 01 01 0A                             ld		bc,$0A01
 397+ D43B 11 C0 FE                             ld		de,$FEC0
 398+ D43E CD A7 E7                             call	l2_draw_horz_line
 399+ D441 3A 45 80     .StaticText:	        ld      a,(Galaxy)
 400+ D444                                      MMUSelectGalaxyA
 400+ D444 ED 92 57    >                     nextreg GalaxyDataMMU,     a
 401+ D447 3E 19                                ld		a,25
 402+ D449 CD ED 8F                             call	expandTokenToString
 403+ D44C CD 7A F6                             call	GetDigramGalaxySeed
 404+ D44F CD A3 D3                             call    draw_eqship_items
 405+ D452 AF           .InitialHighlight:      xor     a
 406+ D453 32 8F C0                             ld      (eqshp_selected_row),a        ; assume on row zero
 407+ D456 CD 12 D1                             call    eqshp_highlight_row
 408+ D459 CD A4 D2     .DisCash:               call    eqshp_DisplayCash
 409+ D45C C9                                   ret
 410+ D45D
 411+ D45D              ;----------------------------------------------------------------------------------------------------------------------------------
 412+ D45D CD DC D2     eqip_refesh_buffer:     call    eqshp_buffer_list
 413+ D460 3A 8F C0                             ld      a,(eqshp_selected_row)              ; get revised list length
 414+ D463 47                                   ld      b,a
 415+ D464 3A 90 C0                             ld      a,(eqshp_current_topItem)           ; get current top of screen
 416+ D467 4F                                   ld      c,a
 417+ D468 80                                   add     b                                   ; a = top + selected row
 418+ D469 21 91 C0                             ld      hl,eqshp_current_end
 419+ D46C                                      CallIfAGTENusng (hl), .NewListShorter       ; if a > new list len then rebuild
 419+ D46C BE          >                        cp      (hl)
 419+ D46D D4 73 D4    >                        call	nc,.NewListShorter
 420+ D470 C3 7F D4                             jp      .RedrawList
 421+ D473 C5           .NewListShorter:        push    bc
 422+ D474 CD 22 D1                             call    eqshp_lowlight_row
 423+ D477 C1                                   pop     bc
 424+ D478 3A 91 C0                             ld      a,(eqshp_current_end)               ; b = end of list
 425+ D47B 91                                   sub     c                                   ; minus current top
 426+ D47C 32 8F C0                             ld      (eqshp_selected_row),a
 427+ D47F CD 12 D1     .RedrawList:            call    eqshp_highlight_row
 428+ D482 CD A3 D3                             call    draw_eqship_items
 429+ D485 C9                                   ret
 430+ D486
 431+ D486              ;----------------------------------------------------------------------------------------------------------------------------------
 432+ D486              ; Handles all the input whilst in the market menu
 433+ D486              loop_eqshp_menu:        MacroIsKeyPressed c_Pressed_CursorUp
 433+ D486 3E 4A       >                        ld      a,c_Pressed_CursorUp
 433+ D488             >                        MMUSelectKeyboard
 433+ D488 ED 91 57 65 >                     nextreg KeyboardMMU,       BankKeyboard
 433+ D48C CD BB E1    >                        call    is_key_pressed
 434+ D48F CC B7 D4                             call    z,eqshp_UpPressed
 435+ D492                                      MacroIsKeyPressed c_Pressed_CursorDown
 435+ D492 3E 4C       >                        ld      a,c_Pressed_CursorDown
 435+ D494             >                        MMUSelectKeyboard
 435+ D494 ED 91 57 65 >                     nextreg KeyboardMMU,       BankKeyboard
 435+ D498 CD BB E1    >                        call    is_key_pressed
 436+ D49B CC D7 D4                             call    z,eqshp_DownPressed
 437+ D49E                                      MacroIsKeyPressed c_Pressed_RollLeft
 437+ D49E 3E 08       >                        ld      a,c_Pressed_RollLeft
 437+ D4A0             >                        MMUSelectKeyboard
 437+ D4A0 ED 91 57 65 >                     nextreg KeyboardMMU,       BankKeyboard
 437+ D4A4 CD BB E1    >                        call    is_key_pressed
 438+ D4A7 CC 03 D5                             call    z,eqshp_LeftPressed
 439+ D4AA                                      MacroIsKeyPressed c_Pressed_RollRight
 439+ D4AA 3E 0A       >                        ld      a,c_Pressed_RollRight
 439+ D4AC             >                        MMUSelectKeyboard
 439+ D4AC ED 91 57 65 >                     nextreg KeyboardMMU,       BankKeyboard
 439+ D4B0 CD BB E1    >                        call    is_key_pressed
 440+ D4B3 CC 78 D5                             call    z,eqshp_RightPressed
 441+ D4B6 C9                                   ret
 442+ D4B7
 443+ D4B7              ;----------------------------------------------------------------------------------------------------------------------------------
 444+ D4B7 3A 8F C0     eqshp_UpPressed:        ld      a,(eqshp_selected_row)
 445+ D4BA FE 00                                cp      0
 446+ D4BC 28 0B                                jr      z,.check_scroll_up
 447+ D4BE CD 22 D1                             call    eqshp_lowlight_row
 448+ D4C1 21 8F C0                             ld      hl,eqshp_selected_row
 449+ D4C4 35                                   dec     (hl)
 450+ D4C5 CD 12 D1                             call    eqshp_highlight_row
 451+ D4C8 C9                                   ret
 452+ D4C9 3A 90 C0     .check_scroll_up:       ld      a,(eqshp_current_topItem)
 453+ D4CC FE 00                                cp      0
 454+ D4CE C8                                   ret     z
 455+ D4CF 3D                                   dec     a           ; chjange later to buffering step back 1
 456+ D4D0 32 90 C0                             ld      (eqshp_current_topItem),a
 457+ D4D3 CD A3 D3                             call    draw_eqship_items
 458+ D4D6 C9                                   ret
 459+ D4D7              ;----------------------------------------------------------------------------------------------------------------------------------
 460+ D4D7 3A 91 C0     eqshp_DownPressed:      ld      a,(eqshp_current_end)
 461+ D4DA 47                                   ld      b,a                             ; This check is if the current list is < one screen
 462+ D4DB 05                                   dec     b
 463+ D4DC 3A 8F C0                             ld      a,(eqshp_selected_row)
 464+ D4DF B8                                   cp      b
 465+ D4E0 C8                                   ret     z
 466+ D4E1 FE 11                                cp      17
 467+ D4E3 28 0B                                jr      z, .check_scroll_down
 468+ D4E5 CD 22 D1                             call    eqshp_lowlight_row
 469+ D4E8 21 8F C0                             ld      hl,eqshp_selected_row
 470+ D4EB 34                                   inc     (hl)
 471+ D4EC CD 12 D1                             call    eqshp_highlight_row
 472+ D4EF C9                                   ret
 473+ D4F0 47           .check_scroll_down:     ld      b,a
 474+ D4F1 3A 90 C0                             ld      a,(eqshp_current_topItem)
 475+ D4F4 80                                   add     b
 476+ D4F5 3C                                   inc     a
 477+ D4F6 21 91 C0                             ld      hl,eqshp_current_end
 478+ D4F9                                      ReturnIfAGTEusng      (hl)
 478+ D4F9 BE          >                        cp    (hl)
 478+ D4FA D0          >                        ret	 nc
 479+ D4FB 21 90 C0     .can_scroll_down:       ld      hl,eqshp_current_topItem
 480+ D4FE 34                                   inc     (hl)
 481+ D4FF CD A3 D3                             call    draw_eqship_items
 482+ D502 C9                                   ret
 483+ D503              ;----------------------------------------------------------------------------------------------------------------------------------
 484+ D503 3A 45 80     eqshp_LeftPressed:      ld      a,(Galaxy)
 485+ D506                                      MMUSelectGalaxyA
 485+ D506 ED 92 57    >                     nextreg GalaxyDataMMU,     a
 486+ D509 DD 21 D6 F4                          ld      ix,ShipEquipmentList
 487+ D50D 3A 90 C0     .IsItFuel:              ld      a,(eqshp_current_topItem)   ; Can't refund fuel
 488+ D510 47                                   ld      b,a
 489+ D511 3A 8F C0                             ld      a,(eqshp_selected_row)
 490+ D514 80                                   add     b
 491+ D515 FE 00                                cp      0
 492+ D517 C8                                   ret     z
 493+ D518 4F           .FuelNotSelected:       ld      c,a
 494+ D519 16 10        .FindInTable:           ld      d,ShipEquipTableRowLen
 495+ D51B 5F                                   ld      e,a
 496+ D51C ED 30                                mul
 497+ D51E DD 19                                add     ix,de
 498+ D520 DD 7E 07                             ld      a,(ix+7)
 499+ D523 FE 2D                                cp      "-"
 500+ D525 C8                                   ret     z
 501+ D526 79           .CheckIfMissle:         ld      a,c
 502+ D527 FE 01                                cp      EQ_MISSILE
 503+ D529 28 2F                                jr      z,.RefundMissle
 504+ D52B DD 5E 04     .RefundItemCash:        ld      e,(ix+4)
 505+ D52E DD 56 05                             ld      d,(ix+5)
 506+ D531 E5 C5                                push    hl,,bc
 507+ D533 CD B2 90                             call    addDEtoCash         ; refund laser value
 508+ D536 C1 E1                                pop     hl,,bc
 509+ D538 3E 2D                                ld      a,"-"
 510+ D53A DD 77 07                             ld      (ix+7),a
 511+ D53D 21 AE 85                             ld      hl,EquipmentFitted
 512+ D540 79                                   ld      a,c                 ; get back current laser ref
 513+ D541 ED 31                                add     hl,a
 514+ D543 36 00                                ld      (hl),EquipmentItemNotFitted; remove laser from equipment
 515+ D545 CD 5D D4                             call    eqip_refesh_buffer
 516+ D548 DD 7E 08                             ld      a,(ix+8)
 517+ D54B FE FF                                cp      $FF
 518+ D54D C8                                   ret     z
 519+ D54E 21 A6 85     .ItsALaser              ld      hl,LaserType        ; clear out respective current laser
 520+ D551 47                                   ld      b,a
 521+ D552 DD 7E 09                             ld      a,(ix+9)
 522+ D555 ED 31                                add     hl,a
 523+ D557 36 FF                                ld      (hl),$FF            ; $FF = not fitted
 524+ D559 C9                                   ret
 525+ D55A DD 5E 04     .RefundMissle           ld      e,(ix+4)
 526+ D55D DD 56 05                             ld      d,(ix+5)
 527+ D560 E5 C5                                push    hl,,bc
 528+ D562 CD B2 90                             call    addDEtoCash         ; refund laser value
 529+ D565 C1 E1                                pop     hl,,bc
 530+ D567 DD 7E 07                             ld      a,(ix+7)
 531+ D56A 3D                                   dec     a
 532+ D56B FE 30                                cp      "0"
 533+ D56D 20 02                                jr      nz,.NotAllSold
 534+ D56F 3E 2D        .AllSold:               ld      a,"-"
 535+ D571 DD 77 07     .NotAllSold:            ld      (ix+7),a
 536+ D574 CD 5D D4                             call    eqip_refesh_buffer
 537+ D577 C9                                   ret
 538+ D578              ;----------------------------------------------------------------------------------------------------------------------------------
 539+ D578 3A 45 80     eqshp_RightPressed:     ld      a,(Galaxy)
 540+ D57B                                      MMUSelectGalaxyA
 540+ D57B ED 92 57    >                     nextreg GalaxyDataMMU,     a
 541+ D57E DD 21 D6 F4                          ld      ix,ShipEquipmentList
 542+ D582 3A 90 C0                             ld      a,(eqshp_current_topItem)
 543+ D585 47                                   ld      b,a
 544+ D586 3A 8F C0                             ld      a,(eqshp_selected_row)
 545+ D589 80                                   add     a,b
 546+ D58A FE 01                                cp      EQ_MISSILE
 547+ D58C 20 0A                                jr      nz,.NotAMissileBuy
 548+ D58E 08           .ItsAMissile:           ex      af,af'
 549+ D58F 3E 34                                ld      a,"4"
 550+ D591 32 AA D5                             ld      (.CompareCheck+1),a
 551+ D594 08                                   ex      af,af'
 552+ D595 C3 9F D5                             jp      .FindInTable
 553+ D598 08           .NotAMissileBuy:        ex      af,af'
 554+ D599 3E 2A                                ld      a,"*"
 555+ D59B 32 AA D5                             ld      (.CompareCheck+1),a
 556+ D59E 08                                   ex      af,af'
 557+ D59F 16 10        .FindInTable:           ld      d,ShipEquipTableRowLen
 558+ D5A1 5F                                   ld      e,a
 559+ D5A2 ED 30                                mul
 560+ D5A4 DD 19                                add     ix,de
 561+ D5A6 DD 7E 07                             ld      a,(ix+7)
 562+ D5A9 FE 2A        .CompareCheck:          cp      "*"; not true for missles astyou can buy 1 to 4
 563+ D5AB C8                                   ret     z
 564+ D5AC 47           .Purchasable:           ld      b,a
 565+ D5AD DD 7E 06                             ld      a,(ix+6)
 566+ D5B0 FE 01                                cp      EQ_MISSILE
 567+ D5B2 20 06                                jr      nz,.NotMissleMax
 568+ D5B4 21 65 80     .MissleQuanity:         ld      hl,NbrMissiles
 569+ D5B7 78                                   ld      a,b
 570+ D5B8 BE                                   cp      (hl)
 571+ D5B9 C8                                   ret     z
 572+ D5BA 4F           .NotMissleMax:          ld      c,a
 573+ D5BB DD 7E 01                             ld      a,(ix+1)
 574+ D5BE FE FF                                cp      $FF
 575+ D5C0 C8                                   ret     z
 576+ D5C1              .CheckCash:             JumpIfMemIsNotZero  Cash+2 , .MoreThanRequired      ; Nothing in game > 65535CR
 576+ D5C1 3A 91 85    >                        ld      a,(Cash+2)
 576+ D5C4 A7          >                        and     a
 576+ D5C5 C2 D5 D5    >                        jp	    nz,.MoreThanRequired
 577+ D5C8 2A 8F 85                             ld      hl,(Cash)                                   ; hl = lower 16 bits of cash
 578+ D5CB DD 5E 04                             ld      e,(ix+4)
 579+ D5CE DD 56 05                             ld      d,(ix+5)
 580+ D5D1 CD EA 9A                             call	compare16HLDE
 581+ D5D4 D8                                   ret     c                                           ; Insufficient Funds
 582+ D5D5 DD 7E 06     .MoreThanRequired:      ld      a,(ix+6)
 583+ D5D8 FE 00                                cp      0
 584+ D5DA 28 15                                jr      z,.MaxFuelOut
 585+ D5DC FE 01                                cp      1
 586+ D5DE 28 1B                                jr      z,.AddMissle
 587+ D5E0                                      JumpIfAGTENusng  EQ_FRONT_PULSE,.AddLaser
 587+ D5E0 FE 0A       >                        cp     EQ_FRONT_PULSE
 587+ D5E2 D2 05 D6    >                        jp		nc,.AddLaser
 588+ D5E5 21 AE 85     .AddNormalItem:         ld      hl,EquipmentFitted
 589+ D5E8 ED 31                                add     hl,a
 590+ D5EA 36 FF                                ld      (hl),EquipmentItemFitted
 591+ D5EC 3E 2A                                ld      a,"*"
 592+ D5EE C3 4D D6                             jp      .AddedItem
 593+ D5F1              .MaxFuelOut:            MaxFuelMacro
 593+ D5F1 3E 46       >						ld		a,MaxFuelLevel
 593+ D5F3 32 93 85    >						ld		(Fuel),a
 594+ D5F6 3E 2A                                ld      a,"*"
 595+ D5F8 C3 4D D6                             jp      .AddedItem
 596+ D5FB 21 65 80     .AddMissle:             ld      hl,NbrMissiles
 597+ D5FE 34                                   inc     (hl)
 598+ D5FF 7E                                   ld      a,(hl)
 599+ D600 C6 30                                add     "0"
 600+ D602 C3 4D D6                             jp      .AddedItem
 601+ D605 DD 7E 08     .AddLaser:              ld      a,(ix+8)            ; Get if its a laser, $FF = no laser
 602+ D608 FE FF                                cp      $FF
 603+ D60A 20 29                                jr      nz,.BuyLaser
 604+ D60C              .LargeCargoBay: ;TODO
 605+ D60C 4F           .RefundExistingLaser:   ld      c,a                 ; retain current laser nbr
 606+ D60D 21 D6 F4                             ld      hl,ShipEquipmentList
 607+ D610 16 10                                ld      d,ShipEquipTableRowLen
 608+ D612 5F                                   ld      e,a
 609+ D613 ED 30                                mul
 610+ D615 19                                   add     hl,de               ; now we have the row for the current laser
 611+ D616 3E 04                                ld      a,4
 612+ D618 ED 31                                add     hl,a
 613+ D61A 7E                                   ld      a,(hl)
 614+ D61B 5F                                   ld      e,a
 615+ D61C 23                                   inc     hl
 616+ D61D 7E                                   ld      a,(hl)
 617+ D61E 57                                   ld      d,a
 618+ D61F E5 C5                                push    hl,,bc
 619+ D621 CD B2 90                             call    addDEtoCash         ; refund laser value
 620+ D624 C1 E1                                pop     hl,,bc
 621+ D626 3E 02                                ld      a,2
 622+ D628 ED 31                                add     hl,a
 623+ D62A 3E 2D                                ld      a,"-"
 624+ D62C 77                                   ld      (hl),a              ; clear on ship equipment
 625+ D62D 21 AE 85                             ld      hl,EquipmentFitted
 626+ D630 79                                   ld      a,c                 ; get back current laser ref
 627+ D631 ED 31                                add     hl,a
 628+ D633 36 00                                ld      (hl),EquipmentItemNotFitted  ; remove laser from equipment
 629+ D635 21 AE 85     .BuyLaser:              ld      hl,EquipmentFitted
 630+ D638 DD 7E 06                             ld      a,(ix+6)
 631+ D63B ED 31                                add     hl,a
 632+ D63D 36 FF                                ld      (hl),EquipmentItemFitted
 633+ D63F DD 7E 09                             ld      a,(ix+9)            ; get laser position
 634+ D642 21 A6 85                             ld      hl,LaserType
 635+ D645 ED 31                                add     hl,a
 636+ D647 DD 7E 08                             ld      a,(ix+8)            ; get type
 637+ D64A 77                                   ld      (hl),a
 638+ D64B 3E 2A                                ld      a,"*"
 639+ D64D DD 77 07     .AddedItem              ld      (ix+7),a
 640+ D650 DD 5E 04                             ld      e,(ix+4)
 641+ D653 DD 56 05                             ld      d,(ix+5)
 642+ D656 CD C5 90                             call    subDEfromCash
 643+ D659 CD 5D D4                             call    eqip_refesh_buffer
 644+ D65C C9                                   ret
# file closed: ./Menus/equip_ship_menu.asm
 923  D65D                                  DISPLAY "Bank ",BankMenuEquipS," - Bytes free ",/D, $2000 - ($-MenuEquipSAddr), " - BankMenuEquipS"
 924  D65D                                  ASSERT $-MenuEquipSAddr <8912 , Bank code leaks over 8K boundary
 925  D65D              ; Bank 65  ------------------------------------------------------------------------------------------------------------------------
 926  D65D                                  SLOT    LaunchShipAddr
 927  D65D                                  PAGE    BankLaunchShip
 928  D65D                                  ORG     LaunchShipAddr
 929  C000                                  INCLUDE "./Transitions/launch_ship.asm"
# file opened: ./Transitions/launch_ship.asm
   1+ C000 4C 61 75 6E  launchship_page_marker  DB "LaunchShipPG65"
   1+ C004 63 68 53 68
   1+ C008 69 70 50 47
   1+ C00C 36 35
   2+ C00E
   3+ C00E 7E 3F 04 02  launchdraw_table        DB $7E,$3F, $04,$02, $66            ; purple blue
   3+ C012 66
   4+ C013              launchdraw_rowsize      equ $-launchdraw_table
   5+ C013 7C 3E 08 04                          DB $7C,$3E, $08,$04, $66
   5+ C017 66
   6+ C018 7A 3D 0C 06                          DB $7A,$3D, $0C,$06, $66
   6+ C01C 66
   7+ C01D 78 3C 10 08                          DB $78,$3C, $10,$08, $66
   7+ C021 66
   8+ C022 76 3B 14 0A                          DB $76,$3B, $14,$0A, $66
   8+ C026 66
   9+ C027 74 3A 18 0C                          DB $74,$3A, $18,$0C, $66
   9+ C02B 66
  10+ C02C 70 38 20 10                          DB $70,$38, $20,$10, $66
  10+ C030 66
  11+ C031 6C 36 28 14                          DB $6C,$36, $28,$14, $05            ; Black Blue
  11+ C035 05
  12+ C036 68 34 30 18                          DB $68,$34, $30,$18, $05
  12+ C03A 05
  13+ C03B 64 32 38 1C                          DB $64,$32, $38,$1C, $05
  13+ C03F 05
  14+ C040 60 30 40 20                          DB $60,$30, $40,$20, $05
  14+ C044 05
  15+ C045 5C 2E 48 24                          DB $5C,$2E, $48,$24, $05            ; Dark Blue
  15+ C049 05
  16+ C04A 58 2C 50 28                          DB $58,$2C, $50,$28, $02
  16+ C04E 02
  17+ C04F 54 2A 58 2C                          DB $54,$2A, $58,$2C, $02
  17+ C053 02
  18+ C054 50 28 60 30                          DB $50,$28, $60,$30, $02
  18+ C058 02
  19+ C059 4C 26 68 34                          DB $4C,$26, $68,$34, $02
  19+ C05D 02
  20+ C05E 46 23 74 3A                          DB $46,$23, $74,$3A, $02
  20+ C062 02
  21+ C063 40 20 80 40                          DB $40,$20, $80,$40, $02
  21+ C067 02
  22+ C068 38 1C 90 48                          DB $38,$1C, $90,$48, $01            ;Very Dark Blue
  22+ C06C 01
  23+ C06D 30 18 A0 50                          DB $30,$18, $A0,$50, $01
  23+ C071 01
  24+ C072 26 13 B4 5A                          DB $26,$13, $B4,$5A, $01
  24+ C076 01
  25+ C077 1C 0E C8 64                          DB $1C,$0E, $C8,$64, $01
  25+ C07B 01
  26+ C07C 10 08 E0 70                          DB $10,$08, $E0,$70, $00            ;Black
  26+ C080 00
  27+ C081 02 01 FC 7E                          DB $02,$01, $FC,$7E, $00
  27+ C085 00
  28+ C086 FF                                   DB $FF
  29+ C087
  30+ C087              launchtablesize         EQU ($ - launchdraw_table)/launchdraw_rowsize
  31+ C087
  32+ C087 7E 3F 04 02  dockingdraw_table       DB $7E,$3F, $04,$02, $00            ; purple blue
  32+ C08B 00
  33+ C08C              dockingdraw_rowsize     equ $-dockingdraw_table
  34+ C08C 7C 3E 08 04                          DB $7C,$3E, $08,$04, $00
  34+ C090 00
  35+ C091 7A 3D 0C 06                          DB $7A,$3D, $0C,$06, $00
  35+ C095 00
  36+ C096 78 3C 10 08                          DB $78,$3C, $10,$08, $04
  36+ C09A 04
  37+ C09B 76 3B 14 0A                          DB $76,$3B, $14,$0A, $04
  37+ C09F 04
  38+ C0A0 74 3A 18 0C                          DB $74,$3A, $18,$0C, $04
  38+ C0A4 04
  39+ C0A5 70 38 20 10                          DB $70,$38, $20,$10, $21
  39+ C0A9 21
  40+ C0AA 6C 36 28 14                          DB $6C,$36, $28,$14, $21            ; Black Blue
  40+ C0AE 21
  41+ C0AF 68 34 30 18                          DB $68,$34, $30,$18, $21
  41+ C0B3 21
  42+ C0B4 64 32 38 1C                          DB $64,$32, $38,$1C, $25
  42+ C0B8 25
  43+ C0B9 60 30 40 20                          DB $60,$30, $40,$20, $25
  43+ C0BD 25
  44+ C0BE 5C 2E 48 24                          DB $5C,$2E, $48,$24, $25            ; Dark Blue
  44+ C0C2 25
  45+ C0C3 58 2C 50 28                          DB $58,$2C, $50,$28, $25
  45+ C0C7 25
  46+ C0C8 54 2A 58 2C                          DB $54,$2A, $58,$2C, $25
  46+ C0CC 25
  47+ C0CD 50 28 60 30                          DB $50,$28, $60,$30, $4C
  47+ C0D1 4C
  48+ C0D2 4C 26 68 34                          DB $4C,$26, $68,$34, $4C
  48+ C0D6 4C
  49+ C0D7 46 23 74 3A                          DB $46,$23, $74,$3A, $4C
  49+ C0DB 4C
  50+ C0DC 40 20 80 40                          DB $40,$20, $80,$40, $4C
  50+ C0E0 4C
  51+ C0E1 38 1C 90 48                          DB $38,$1C, $90,$48, $6D            ;Very Dark Blue
  51+ C0E5 6D
  52+ C0E6 30 18 A0 50                          DB $30,$18, $A0,$50, $6D
  52+ C0EA 6D
  53+ C0EB 26 13 B4 5A                          DB $26,$13, $B4,$5A, $6D
  53+ C0EF 6D
  54+ C0F0 1C 0E C8 64                          DB $1C,$0E, $C8,$64, $6D
  54+ C0F4 6D
  55+ C0F5 10 08 E0 70                          DB $10,$08, $E0,$70, $92            ;Black
  55+ C0F9 92
  56+ C0FA 02 01 FC 7E                          DB $02,$01, $FC,$7E, $92
  56+ C0FE 92
  57+ C0FF FF                                   DB $FF
  58+ C100
  59+ C100              dockingtablesize         EQU ($ - dockingdraw_table)/dockingdraw_rowsize
  60+ C100
  61+ C100              init_countdown          EQU $FF
  62+ C100 00           launch_countdown        DB  $0000
  63+ C101 0E C0        launch_table_idx        DW launchdraw_table
  64+ C103 87 C0        docking_table_idx       DW dockingdraw_table
  65+ C105 00           current_offsetX         db 0
  66+ C106 00           current_offsetY         db 0
  67+ C107
  68+ C107
  69+ C107              LaunchTubeEdges         MMUSelectLayer2
  69+ C107 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
  70+ C10B 01 00 00                             ld      bc,$0000
  71+ C10E 11 92 01                             ld      de,$0192
  72+ C111 78           .drawLoop1              ld      a,b
  73+ C112 FE 80                                cp      128
  74+ C114 28 25                                jr      z,.DoneEdge
  75+ C116 F5                                   push    af
  76+ C117 C5 D5 C5 D5                          push    bc,,de,,bc,,de
  77+ C11B CD 9A E7                             call    l2_draw_horz_dma_bank           ;"bc = left side row,col, d = length, e = color"
  78+ C11E D1 C1                                pop     bc,,de
  79+ C120 3E FF                                ld      a,$FF
  80+ C122 92                                   sub     d
  81+ C123 4F                                   ld      c,a
  82+ C124 0C                                   inc     c
  83+ C125 CD 9A E7                             call    l2_draw_horz_dma_bank
  84+ C128 D1 C1                                pop     bc,,de
  85+ C12A 78                                   ld      a,b
  86+ C12B FE 40                                cp      64
  87+ C12D 30 06                                jr      nc,.ReduceLoop
  88+ C12F 14                                   inc     d
  89+ C130 14                                   inc     d
  90+ C131 F1                                   pop     af
  91+ C132 04                                   inc     b
  92+ C133 18 DC                                jr      .drawLoop1
  93+ C135 15           .ReduceLoop:            dec     d
  94+ C136 15                                   dec     d
  95+ C137 F1                                   pop     af
  96+ C138 04                                   inc     b
  97+ C139 18 D6                                jr      .drawLoop1
  98+ C13B 3E 80        .DoneEdge:              ld      a,$80
  99+ C13D 01 00 00                             ld      bc,$0000                        ; Top Left
 100+ C140 11 FF 80                             ld      de,$80FF                        ; Bottom Right
 101+ C143 CD ED EA                             call    l2_draw_diagonal
 102+ C146 3E 80                                ld      a,$80
 103+ C148 01 00 80                             ld      bc,$8000                        ; Botom Left
 104+ C14B 11 FF 00                             ld      de,$00FF                        ; Top Right
 105+ C14E CD ED EA                             call    l2_draw_diagonal
 106+ C151
 107+ C151 01 00 00                             ld      bc,$0000
 108+ C154 11 80 00                             ld      DE,$0080
 109+ C157 26 60                                ld      h,$60
 110+ C159 2E 55                                ld      l,$55
 111+ C15B C9                                   ret
 112+ C15C
 113+ C15C              LaunchConsole:          MMUSelectConsoleBank                    ; Draw Console
 113+ C15C ED 91 57 3D >					 nextreg ConsoleImageDataMMU,  BankConsole
 114+ C160 21 00 50                             ld      hl,ScreenL1Bottom
 115+ C163 11 00 E0                             ld      de,ConsoleImageData
 116+ C166 01 00 08                             ld      bc, ScreenL1BottomLen
 117+ C169 CD 58 7E                             call    memcopy_dma
 118+ C16C 21 00 5A                             ld      hl,ScreenL1AttrBtm       ; now the pointers are in Ubnk its easy to read
 119+ C16F 11 00 E8                             ld      de,ConsoleAttributes
 120+ C172 01 00 01                             ld      bc, ScreenL1AttrBtmLen
 121+ C175 CD 58 7E                             call    memcopy_dma
 122+ C178 C9                                   ret
 123+ C179
 124+ C179              CoriloisStation         equ     13
 125+ C179
 126+ C179
 127+ C179              draw_launch_ship:       MMUSelectLayer1
 127+ C179 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 128+ C17D CD 8F E0                             call    l1_cls
 129+ C180 CD A9 E0                             call    l1_attr_cls
 130+ C183                                      MMUSelectSpriteBank
 130+ C183 ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
 131+ C187 CD B7 E7                             call    sprite_cls_cursors
 132+ C18A                                      MMUSelectLayer2
 132+ C18A ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 133+ C18E CD 06 E0                             call    asm_l2_double_buffer_on
 134+ C191 3E FF        .CurrentBuffer:         ld      a,$FF                           ; Clear upper 2 thirds to white
 135+ C193 32 28 E2                             ld      (l2_cls_byte),a
 136+ C196 CD 67 E2                             call    l2_set_color_upper2
 137+ C199 3E E3                                ld      a,COLOUR_TRANSPARENT            ; Lower third transparent
 138+ C19B 32 28 E2                             ld      (l2_cls_byte),a
 139+ C19E CD F6 E2                             call    l2_cls_lower_third
 140+ C1A1 CD 07 C1                             call    LaunchTubeEdges
 141+ C1A4 CD 5C C1                             call    LaunchConsole
 142+ C1A7              .NextBuffer:            MMUSelectLayer2
 142+ C1A7 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 143+ C1AB CD 04 E4                             call    l2_flip_buffers
 144+ C1AE 3E FF                                ld      a,$FF                           ; Clear upper 2 thirds to white
 145+ C1B0 32 28 E2                             ld      (l2_cls_byte),a
 146+ C1B3 CD 67 E2                             call    l2_set_color_upper2
 147+ C1B6 3E E3                                ld      a,COLOUR_TRANSPARENT            ; Lower third transparent
 148+ C1B8 32 28 E2                             ld      (l2_cls_byte),a
 149+ C1BB CD F6 E2                             call    l2_cls_lower_third
 150+ C1BE CD 07 C1                             call    LaunchTubeEdges
 151+ C1C1 CD 5C C1                             call    LaunchConsole
 152+ C1C4 3E FF        .SetUpTimers:           ld      a,init_countdown
 153+ C1C6 32 00 C1                             ld      (launch_countdown),a
 154+ C1C9 21 0E C0                             ld      hl,launchdraw_table
 155+ C1CC 22 01 C1                             ld      (launch_table_idx),hl
 156+ C1CF AF                                   xor     a
 157+ C1D0 32 05 C1                             ld      (current_offsetX),a
 158+ C1D3 32 06 C1                             ld      (current_offsetY),a
 159+ C1D6              .SetupGalaxy:           MaxThrottle
 159+ C1D6 3A AF 7F    >                        ld      a,(SHIPMAXSPEED)
 159+ C1D9 32 B0 7F    >                        ld      (DELTA),a
 159+ C1DC 57          >                        ld      d,a
 159+ C1DD 1E 04       >                        ld      e,4
 159+ C1DF ED 30       >                        mul
 159+ C1E1 ED 53 B1 7F >                        ld      (DELT4Lo),de
 160+ C1E5                                      ZeroThrottle; DEBUG
 160+ C1E5 AF          >                        xor     a
 160+ C1E6 32 B0 7F    >                        ld      (DELTA),a
 160+ C1E9 32 B1 7F    >                        ld      (DELT4Lo),a
 160+ C1EC 32 B2 7F    >                        ld      (DELT4Lo+1),a
 161+ C1EF              ; To launch we need to set docked flag to transition FE and at teh end of the transition set to FD to rebuild universe
 162+ C1EF 3E FE                                ld      a,StateInTransition
 163+ C1F1 32 94 81                             ld      (DockedFlag),a
 164+ C1F4 C9                                   ret
 165+ C1F5
 166+ C1F5
 167+ C1F5              draw_docking_ship:      MMUSelectLayer1
 167+ C1F5 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 168+ C1F9 CD 8F E0                             call    l1_cls
 169+ C1FC CD A9 E0                             call    l1_attr_cls
 170+ C1FF                                      MMUSelectSpriteBank
 170+ C1FF ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
 171+ C203 CD B7 E7                             call    sprite_cls_cursors
 172+ C206                                      MMUSelectLayer2
 172+ C206 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 173+ C20A CD 06 E0                             call    asm_l2_double_buffer_on
 174+ C20D 3E FF        .CurrentBuffer:         ld      a,$FF                           ; Clear upper 2 thirds to white
 175+ C20F 32 28 E2                             ld      (l2_cls_byte),a
 176+ C212 CD 67 E2                             call    l2_set_color_upper2
 177+ C215 3E E3                                ld      a,COLOUR_TRANSPARENT            ; Lower third transparent
 178+ C217 32 28 E2                             ld      (l2_cls_byte),a
 179+ C21A CD F6 E2                             call    l2_cls_lower_third
 180+ C21D CD 07 C1                             call    LaunchTubeEdges
 181+ C220 CD 5C C1                             call    LaunchConsole
 182+ C223              .NextBuffer:            MMUSelectLayer2
 182+ C223 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 183+ C227 CD 04 E4                             call    l2_flip_buffers
 184+ C22A 3E FF                                ld      a,$FF                           ; Clear upper 2 thirds to white
 185+ C22C 32 28 E2                             ld      (l2_cls_byte),a
 186+ C22F CD 67 E2                             call    l2_set_color_upper2
 187+ C232 3E E3                                ld      a,COLOUR_TRANSPARENT            ; Lower third transparent
 188+ C234 32 28 E2                             ld      (l2_cls_byte),a
 189+ C237 CD F6 E2                             call    l2_cls_lower_third
 190+ C23A CD 07 C1                             call    LaunchTubeEdges
 191+ C23D CD 5C C1                             call    LaunchConsole
 192+ C240 3E FF        .SetUpTimers:           ld      a,init_countdown
 193+ C242 32 00 C1                             ld      (launch_countdown),a
 194+ C245 21 87 C0                             ld      hl,dockingdraw_table
 195+ C248 22 03 C1                             ld      (docking_table_idx),hl
 196+ C24B AF                                   xor     a
 197+ C24C 32 05 C1                             ld      (current_offsetX),a
 198+ C24F 32 06 C1                             ld      (current_offsetY),a
 199+ C252 AF           .SetupGalaxy:           xor     a ; palcehodler as it would cause next macro to fail re initialise all universe banks
 200+ C253                                      ZeroThrottle
 200+ C253 AF          >                        xor     a
 200+ C254 32 B0 7F    >                        ld      (DELTA),a
 200+ C257 32 B1 7F    >                        ld      (DELT4Lo),a
 200+ C25A 32 B2 7F    >                        ld      (DELT4Lo+1),a
 201+ C25D 3E FF                                ld      a,StatePlayerDocked
 202+ C25F 32 94 81                             ld      (DockedFlag),a ; we don't kill off shipts as we kill them on launch
 203+ C262 C9                                   ret
 204+ C263
 205+ C263 CD 07 C1     loop_launch_ship:       call    LaunchTubeEdges
 206+ C266 3E FF                                ld      a,init_countdown
 207+ C268 32 00 C1                             ld      (launch_countdown),a
 208+ C26B 2A 01 C1                             ld      hl,(launch_table_idx)
 209+ C26E 4E                                   ld      c,(hl)
 210+ C26F 79                                   ld      a,c
 211+ C270 FE FF                                cp      $FF
 212+ C272 28 1E                                jr      z,.FinishedLaunch
 213+ C274 23                                   inc     hl
 214+ C275 46                                   ld      b,(hl)                 ; bc = top left
 215+ C276 23                                   inc     hl
 216+ C277 5E                                   ld      e,(hl)
 217+ C278 23                                   inc     hl
 218+ C279 56                                   ld      d,(hl)                 ;de = width and height
 219+ C27A 23                                   inc     hl
 220+ C27B 7E                                   ld      a,(hl)                 ; a = colour
 221+ C27C 23                                   inc     hl
 222+ C27D 22 01 C1                             ld      (launch_table_idx),hl
 223+ C280 67                                   ld      h,a
 224+ C281 C5 D5                                push    bc,,de
 225+ C283                                      MMUSelectLayer2
 225+ C283 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 226+ C287 CD CB E6                             call    l2_draw_fill_box        ; ; "l2_draw_fill_box bc=rowcol, de=heightwidth h=color"
 227+ C28A D1 C1                                pop     bc,,de
 228+ C28C 3E 80                                ld      a,$80
 229+ C28E CD DB E6                             call    l2_draw_box             ; "l2_draw_box bc=rowcol, de=heightwidth a=color"
 230+ C291 C9                                   ret
 231+ C292 3E FD        .FinishedLaunch:        ld      a,StateCompletedLaunch  ; now seed that we need a universe rebuild post launch
 232+ C294 32 94 81                             ld      (DockedFlag),a
 233+ C297 C9                                   ret
 234+ C298
 235+ C298 CD 07 C1     loop_docking_ship:      call    LaunchTubeEdges
 236+ C29B 3E FF                                ld      a,init_countdown
 237+ C29D 32 00 C1                             ld      (launch_countdown),a
 238+ C2A0 2A 03 C1                             ld      hl,(docking_table_idx)
 239+ C2A3 4E                                   ld      c,(hl)
 240+ C2A4 79                                   ld      a,c
 241+ C2A5 FE FF                                cp      $FF
 242+ C2A7 28 1E                                jr      z,.FinishedDocking
 243+ C2A9 23                                   inc     hl
 244+ C2AA 46                                   ld      b,(hl)                 ; bc = top left
 245+ C2AB 23                                   inc     hl
 246+ C2AC 5E                                   ld      e,(hl)
 247+ C2AD 23                                   inc     hl
 248+ C2AE 56                                   ld      d,(hl)                 ;de = width and height
 249+ C2AF 23                                   inc     hl
 250+ C2B0 7E                                   ld      a,(hl)
 251+ C2B1 23                                   inc     hl
 252+ C2B2 22 03 C1                             ld      (docking_table_idx),hl
 253+ C2B5 67                                   ld      h,a
 254+ C2B6 C5 D5                                push    bc,,de
 255+ C2B8                                      MMUSelectLayer2
 255+ C2B8 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 256+ C2BC CD CB E6                             call    l2_draw_fill_box
 257+ C2BF D1 C1                                pop     bc,,de
 258+ C2C1 3E 80                                ld      a,$80
 259+ C2C3 CD DB E6                             call    l2_draw_box
 260+ C2C6 C9                                   ret
 261+ C2C7              .FinishedDocking        ForceTransition ScreenStatus              ; Force move to status screen
 261+ C2C7 3E 04       >                        ld      a,ScreenStatus
 261+ C2C9 32 37 6A    >                        ld      (ScreenTransitionForced), a
 262+ C2CC C9                                   ret
 263+ C2CD
 264+ C2CD
 265+ C2CD
# file closed: ./Transitions/launch_ship.asm
 930  C2CD                                  DISPLAY "Bank ",BankLaunchShip," - Bytes free ",/D, $2000 - ($-LaunchShipAddr), " - BankLaunchShip"
 931  C2CD                                  ASSERT $-LaunchShipAddr <8912 , Bank code leaks over 8K boundary
 932  C2CD              ; Bank 70  ------------------------------------------------------------------------------------------------------------------------
 933  C2CD                                  SLOT    UniverseBankAddr
 934  C2CD                                  PAGE    BankUNIVDATA0
 935  C2CD                                  ORG	    UniverseBankAddr,BankUNIVDATA0
 936  C000                                  INCLUDE "./Universe/Ships/univ_ship_data.asm"
# file opened: ./Universe/Ships/univ_ship_data.asm
   1+ C000              ;    DEFINE DEBUGMISSILELAUNCH 1
   2+ C000              ;    DEFINE PLOTPOINTSONLY 1
   3+ C000              ;   DEFINE OVERLAYNODES 1
   4+ C000              ; In  flight ship data tables
   5+ C000              ; In  flight ship data tables
   6+ C000              ; There can be upto &12 objects in flight.
   7+ C000              ; To avoid hassle of memory heap managment, the free list
   8+ C000              ; will correspond to a memory bank offset so data will be held in
   9+ C000              ; 1 bank per universe object. Its a waste of a lot of memory but really
  10+ C000              ; 1 bank per universe object. Its a waste of a lot of memory but really
  11+ C000              ; simple that way. Each bank will be 8K and swapped on 8K slot 7 $E000 to $FFFF
  12+ C000              ; This means each gets its own line list, inwork etc
  13+ C000
  14+ C000              ; "Runtime Ship Data paged into in Bank 7"
  15+ C000              ;                       1234567890123456
  16+ C000 55 6E 69 76  StartOfUniv:        DB "Universe PG"
  16+ C004 65 72 73 65
  16+ C008 20 50 47
  17+ C00B 58           StartOfUnivN:       DB "X"
  18+ C00C 00 00        StartOfUnivPad:     DS 2
  19+ C00E 00           StartOfUnivM:       DB 0
  20+ C00F 00           StartOfUnivT        DB 0
  21+ C010 00 00 00...  StartOfUnivName     DS 16
  22+ C020              ; NOTE we can cheat and pre allocate segs just using a DS for now
  23+ C020
  24+ C020              ;   \ -> & 565D \ See ship data files chosen and loaded after flight code starts running.
  25+ C020              ; Universe map substibute for INWK
  26+ C020              ;-Camera Position of Ship----------------------------------------------------------------------------------------------------------
  27+ C020                                     INCLUDE "./Universe/Ships/AIRuntimeData.asm"
# file opened: ././Universe/Ships/AIRuntimeData.asm
   1++C020              ;-Camera Position of Ship----------------------------------------------------------------------------------------------------------
   2++C020              ;--NOTE POSTITION AND MATRIX are loaded by a single LDIR in cases so must be contiguous
   3++C020              StartOfShipRuntimeData      EQU $
   4++C020 00           UBnKxlo                     DB  0                       ; INWK+0
   5++C021 00           UBnKxhi                     DB  0                       ; there are hi medium low as some times these are 24 bit
   6++C022 00           UBnKxsgn                    DB  0                       ; INWK+2
   7++C023 00           UBnKylo                     DB  0                       ; INWK+3 \ ylo
   8++C024 00           UBnKyhi                     DB  0                       ; INWK+4 \ yHi
   9++C025 00           UBnKysgn                    DB  0                       ; INWK +5
  10++C026 00           UBnKzlo                     DB  0                       ; INWK +6
  11++C027 00           UBnKzhi                     DB  0                       ; INWK +7
  12++C028 00           UBnKzsgn                    DB  0                       ; INWK +8
  13++C029              ;-Rotation Matrix of Ship----------------------------------------------------------------------------------------------------------
  14++C029              ; Rotation data is stored as lohi, but only 15 bits with 16th bit being  a sign bit. Note this is NOT 2'c compliment
  15++C029              ; Note they seem to have to be after camera position not quite found why yet, can only assume it does an iy or ix indexed copy? Bu oddly does not affect space station.
  16++C029 00           UBnkTidyCounter             DB  0                       ; every 16 iterations the rotation matrix is normalised
  17++C02A 00 00        UBnkrotmatSidevX            DW  0                       ; INWK +21
  18++C02C              UBnkrotmatSidev             equ UBnkrotmatSidevX
  19++C02C 00 00        UBnkrotmatSidevY            DW  0                       ; INWK +23
  20++C02E 00 00        UBnkrotmatSidevZ            DW  0                       ; INWK +25
  21++C030 00 00        UBnkrotmatRoofvX            DW  0                       ; INWK +15
  22++C032              UBnkrotmatRoofv             equ UBnkrotmatRoofvX
  23++C032 00 00        UBnkrotmatRoofvY            DW  0                       ; INWK +17
  24++C034 00 00        UBnkrotmatRoofvZ            DW  0                       ; INWK +19
  25++C036 00 00        UBnkrotmatNosevX            DW  0                       ; INWK +9
  26++C038              UBnkrotmatNosev             EQU UBnkrotmatNosevX
  27++C038 00 00        UBnkrotmatNosevY            DW  0                       ; INWK +11
  28++C03A 00 00        UBnkrotmatNosevZ            DW  0                       ; INWK +13
  29++C03C              ; -- Note these must be here for initialise blast as it does a 12 byte ldir
  30++C03C              ; . Note missile explosion will have to have logic to cause linger if a blast is to be enqued
  31++C03C 00           UBnKMissileBlastRange:      DB  0                       ; copied in when setting up a missile
  32++C03D 00           UBnKMissileBlastDamage:     DB  0                       ; copied in when setting up a missile
  33++C03E 00           UBnKMissileDetonateRange:   DB  0                       ; copied in when setting up a missile, allows for proximity missiles
  34++C03F 00           UBnKMissileDetonateDamage:  DB  0                       ; copied in when setting up a missile
  35++C040              ; -- Metadata for ship to help with bank managment
  36++C040              UBnKStartOfRuntimeData:
  37++C040 00           UBnKSlotNumber              DB  0
  38++C041 00           UbnKShipUnivBankNbr         DB  0                       ; Present ship universe bank number
  39++C042 00           UBnkShipModelBank           DB  0                       ; Bank nbr ship was from
  40++C043 00           UBnKShipModelNbr            DB  0                       ; Ship Id with in the bank
  41++C044 00           UBnKShipModelId             DB  0                       ; Absolute ship id
  42++C045              ; -- Ship AI data
  43++C045              ; -- Targetting runtime data
  44++C045 00           UBnKMissleHitToProcess      DB  0                       ; This is used for enquing missle blasts as we can only do one missile at a time, could make it multi but neeed to smooth CPU usage
  45++C046 00           UBnKMissileTarget           DB  0                       ; This is the ship slot number for the target from 0 to n if the missile is not hostile to us, if the target is $FF then its us
  46++C047 00 00 00     UBnKTargetXPos              DS  3                       ; target position for AI
  47++C04A 00 00 00     UBnKTargetYPos              DS  3                       ; .
  48++C04D 00 00 00     UBnKTargetZPos              DS  3                       ; .
  49++C050 00           UBnKTargetXPosSgn           DS  1                       ; target position sign for AI
  50++C051 00           UBnKTargetYPosSgn           DS  1                       ; .
  51++C052 00           UBnKTargetZPosSgn           DS  1                       ; .
  52++C053 00 00        UBnKTargetVectorX           DS  2                       ; target vector for AI
  53++C055 00 00        UBnKTargetVectorY           DS  2                       ; .
  54++C057 00 00        UBnKTargetVectorZ           DS  2                       ; .
  55++C059 00 00        UBnKTargetDotProduct1       DS  2
  56++C05B 00 00        UBnKTargetDotProduct2       DS  2
  57++C05D 00 00        UBnKTargetDotProduct3       DS  2
  58++C05F 00           UBnKTacticsRotMatX          DB  0
  59++C060 00           UBnKTacticsRotMatXSign      DB  0
  60++C061 00           UBnKTacticsRotMatY          DB  0
  61++C062 00           UBnKTacticsRotMatYSign      DB  0
  62++C063 00           UBnKTacticsRotMatZ          DB  0
  63++C064 00           UBnKTacticsRotMatZSign      DB  0
  64++C065 00 00 00...  UBnKOffset                  DS  3 * 3                   ; Offset position for target
  65++C06E              UBnKOffsetX                 equ UBnKOffset
  66++C06E              UBnKOffsetXHi               equ UBnKOffsetX+1
  67++C06E              UBnKOffsetXSign             equ UBnKOffsetX+2
  68++C06E              UBnKOffsetY                 equ UBnKOffset+3
  69++C06E              UBnKOffsetYHi               equ UBnKOffsetY+1
  70++C06E              UBnKOffsetYSign             equ UBnKOffsetY+2
  71++C06E              UBnKOffsetZ                 equ UBnKOffset+6
  72++C06E              UBnKOffsetZHi               equ UBnKOffsetZ+1
  73++C06E              UBnKOffsetZSign             equ UBnKOffsetZ+2
  74++C06E 00           UBnKDirectionX              DB  0
  75++C06F 00           UBnKDirectionXHi            DB  0
  76++C070 00           UBnKDirectionXSign          DB  0
  77++C071 00           UBnKDirectionY              DB  0
  78++C072 00           UBnKDirectionYHi            DB  0
  79++C073 00           UBnKDirectionYSign          DB  0
  80++C074 00           UBnKDirectionZ              DB  0
  81++C075 00           UBnKDirectionZHi            DB  0
  82++C076 00           UBnKDirectionZSign          DB  0
  83++C077 00           UBnKDirNormX                DB  0
  84++C078 00           UBnKDirNormXSign            DB  0
  85++C079 00           UBnKDirNormY                DB  0
  86++C07A 00           UBnKDirNormYSign            DB  0
  87++C07B 00           UBnKDirNormZ                DB  0
  88++C07C 00           UBnKDirNormZSign            DB  0
  89++C07D              UBnKDirection               equ UBnKDirectionX          ; Direction Vector
  90++C07D 00 00        UBnKDotProductNose          DW  0                       ; Dot Product
  91++C07F 00           UBnKDotProductNoseSign      DB  0
  92++C080 00 00        UBnKDotProductRoof          DW  0                       ; Dot Product
  93++C082 00           UBnKDotProductRoofSign      DB  0
  94++C083 00 00        UBnKDotProductSide          DW  0                       ; Dot Product
  95++C085 00           UBnKDotProductSideSign      DB  0
  96++C086 00           UBnKSpeed                   DB  0                       ; INWK +27
  97++C087 00           UBnKAccel                   DB  0                       ; INWK +28
  98++C088 00           UBnKRotXCounter             DB  0                       ; INWK +29
  99++C089              UBnKRollCounter             equ UBnKRotXCounter         ; change over to this in code
 100++C089 00           UBnKRotZCounter             DB  0                       ; INWK +30
 101++C08A              UBnKPitchCounter            equ UBnKRotZCounter
 102++C08A 00           UBnKRAT                     DB  0                       ; temporary for rotation magnitude or roll counter, for debugging state
 103++C08B 00           UBnKRAT2                    DB  0                       ; temporary for rotation threshold
 104++C08C 00           UBnKCNT                     DB  0                       ; temp for calculating roll and pitch
 105++C08D 00           UBnKCNT2                    DB  0                       ; roll threshold, max angle boynd ship will slow down
 106++C08E 00           univRAT                     DB  0               ; 99
 107++C08F 00           univRAT2                    DB  0               ; 9A
 108++C090 00           univRAT2Val                 DB  0               ; 9A
 109++C091 00           UBnKexplDsp                 DB  0                       ; INWK +31 clear exploding/display state|missiles
 110++C092 00           UBnkDrawAllFaces            DB  0
 111++C093 00           UBnKShipAggression          DB  0                       ; calculated agression factor
 112++C094 00           UBnkaiatkecm                DB  0                       ; INWK +32 ai_attack_univ_ecm i.e. AI type
 113++C095 00           UBnKSpawnObject             DB  0
 114++C096 00           UBnkCam0yLo                 DB  0                       ; INWK +33 ????
 115++C097 00           UBnkCam0yHi                 DB  0                       ; INWK +34?????
 116++C098 00           UBnKEnergy                  DB  0                       ; INWK +35
 117++C099 00           UBnKECMCountDown            DB  0                       ; counts down ECM usage if activated reducing energy too in update loop
 118++C09A 00           UBnKECMFitted               DB  0                       ; Does ship have ECM, true false
 119++C09B 00           UBnKLaserPower              DB  0                       ; Type of laser fitted
 120++C09C 00           UBnKMissilesLeft            DB  0
 121++C09D 00           UBnKFighterShipId           DB  0                       ; computed ship Id for any carriers
 122++C09E 00           UBnKFightersLeft            DB  0                       ; the number of ships left in hanger, 255 = infinite
 123++C09F 00           UBnKCloudCounter            DB  0                       ; cloud pixels
 124++C0A0 00           UBnKCloudRadius             DB  0                       ; cloud pixels
 125++C0A1 00           UBnKHeadingToPlanetOrSun    DB  0                       ; 0 = undefined 1 = heading to planet 2 = heading to sun, if it reaches planet then will move to docking, if it heads to sun then will jump
 126++C0A2
 127++C0A2              UBnKRuntimeSize             EQU $-UBnKStartOfRuntimeData
 128++C0A2              ; Flags work as follows:
 129++C0A2              ; UBnKSpawnObject - signals on death to spawn cargo items
 130++C0A2              ; 0 -                   Spawn Cargo 1
 131++C0A2              ; 1 -                   Spawn Cargo 2
 132++C0A2              ; 2 -                   Spawn Cargo 3
 133++C0A2              ; 3 -                   Spawn Cargo 4
 134++C0A2              ; 4 -                   Spawn Alloy 1
 135++C0A2              ; 5 -                   Spawn Alloy 2
 136++C0A2              ; 6 -                   Spawn Alloy 3
 137++C0A2              ; 7 -                   Spawn Alloy 4
 138++C0A2
 139++C0A2              ; UBnkaiatkecm
 140++C0A2              ; Bit	                Description
 141++C0A2              ; 7 -                   AI Enabled Flag
 142++C0A2              ; 6 -                   Ship Visible = ShipOnScreen/NotCloaked (cleared or set by check visible or cloaking override)
 143++C0A2              ; 5 -                   Ship is exploding if set, note if its a missile and one already equeued this will have to linger
 144++C0A2              ;                       linger can be done by not erasing ship unit missile equeue handled
 145++C0A2              ; 4 -                   Ship marked as exploded, cleared once aknowledged then bit 5 takes over and UBnKCloudCounter
 146++C0A2              ; 3 -                   Display state - Plot as a Dot
 147++C0A2              ; 2 -                   Nbr of Missiles bit 2
 148++C0A2              ; 1 -                   Nbr of Missiles bit 1
 149++C0A2              ; 0 -                   ECM present flag
 150++C0A2              ; ShipNewBitsAddr (in blueprint)
 151++C0A2              ;Bit	                Description
 152++C0A2              ;#0	Trader flag         * 0 = not a trader  * 1 = trader
 153++C0A2              ;                       80% of traders are peaceful and mind their own business plying their trade between the planet and space station, but 20% of them moonlight as bounty hunters (see bit #1)
 154++C0A2              ;                       Ships that are traders: Escape pod, Shuttle, Transporter, Anaconda, Rock hermit, Worm
 155++C0A2              ;#1 Bounty hunter flag  * 0 = not a bounty hunter* 1 = bounty hunter
 156++C0A2              ;                       If we are a fugitive or a serious offender and we bump into a bounty hunter, they will become hostile and attack us (see bit #2)
 157++C0A2              ;                       Ships that are bounty hunters: Viper, Fer-de-lance
 158++C0A2              ;#2	Hostile flag        * 0 = not hostile  * 1 = hostile
 159++C0A2              ;                       Hostile ships will attack us on sight; there are quite a few of them
 160++C0A2              ;                       Ships that are hostile: Sidewinder, Mamba, Krait, Adder, Gecko, Cobra Mk I, Worm, Cobra Mk III, Asp Mk II, Python (pirate), Moray, Thargoid, Thargon, Constrictor
 161++C0A2              ;#3	Pirate flag         * 0 = not a pirate * 1 = pirate
 162++C0A2              ;                       Hostile pirates will attack us on sight, but once we get inside the space station safe zone, they will stop
 163++C0A2              ;                       Ships that are pirates: Sidewinder, Mamba, Krait, Adder, Gecko, Cobra Mk I, Cobra Mk III, Asp Mk II, Python (pirate), Moray, Thargoid
 164++C0A2              ;#4	Docking flag        * 0 = not docking * 1 = docking
 165++C0A2              ;                       Traders with their docking flag set fly towards the space station to try to dock, otherwise they aim for the planet
 166++C0A2              ;                       This flag is randomly set for traders when they are spawned
 167++C0A2              ;                       Ships that can be docking: Escape pod, Shuttle, Transporter, Anaconda, Rock hermit, Worm
 168++C0A2              ;#5	Innocent bystander  * 0 = normal * 1 = innocent bystander
 169++C0A2              ;                       If we attack an innocent ship within the space station safe zone, then the station will get angry with us and start spawning cops
 170++C0A2              ;                       Ships that are innocent bystanders: Shuttle, Transporter, Cobra Mk III, Python, Boa, Anaconda, Rock hermit, Cougar
 171++C0A2              ;#6	Cop flag            * 0 = not a cop * 1 = cop
 172++C0A2              ;                       If we destroy a cop, then we instantly become a fugitive (the Transporter isn't actually a cop, but it's clearly under police protection)
 173++C0A2              ;                       Ships that are cops: Viper, Transporter
 174++C0A2              ;#7	Scooped, docked, escape pod flag
 175++C0A2              ;                       For spawned ships, this flag indicates that the ship been scooped or has docked (bit 7 is always clear on spawning)
 176++C0A2              ;                       For blueprints, this flag indicates whether the ship type has an escape pod fitted, so it can launch it when in dire straits
 177++C0A2              ;                       Ships that have escape pods: Cobra Mk III, Python, Boa, Anaconda, Rock hermit, Viper, Mamba, Krait, Adder, Cobra Mk I, Cobra Mk III (pirate), Asp Mk II, Python (pirate), Fer-de-lance
 178++C0A2
# file closed: ././Universe/Ships/AIRuntimeData.asm
  28+ C0A2              ; moved to runtime asm
  29+ C0A2              ;                        INCLUDE "./Universe/Ships/ShipPosVars.asm"
  30+ C0A2              ;                        INCLUDE "./Universe/Ships/RotationMatrixVars.asm"
  31+ C0A2
  32+ C0A2              ; Orientation Matrix [nosev x y z ] nose vector ( forward) 19 to 26
  33+ C0A2              ;                    [roofv x y z ] roof vector (up)
  34+ C0A2              ;                    [sidev x y z ] side vector (right)
  35+ C0A2              ;;rotXCounter                 equ UBnkrotXCounter         ; INWK +29
  36+ C0A2              ;;rotZCounter                 equ UBnkrotZCounter         ; INWK +30UBnkDrawCam0xLo   DB  0               ; XX18+0
  37+ C0A2
  38+ C0A2
  39+ C0A2                                      INCLUDE "./Universe/Ships/XX16Vars.asm"
# file opened: ././Universe/Ships/XX16Vars.asm
   1++C0A2              ;-- XX16 --------------------------------------------------------------------------------------------------------------------------
   2++C0A2 00 00        UBnkTransmatSidevX          DW  0               ; XX16+0
   3++C0A4              UBnkTransmatSidev           EQU UBnkTransmatSidevX
   4++C0A4 00 00        UBnkTransmatSidevY          DW 0                ; XX16+2
   5++C0A6 00 00        UBnkTransmatSidevZ          DW 0                ; XX16+2
   6++C0A8 00 00        UBnkTransmatRoofvX          DW 0
   7++C0AA              UBnkTransmatRoofv           EQU UBnkTransmatRoofvX
   8++C0AA 00 00        UBnkTransmatRoofvY          DW 0                ; XX16+2
   9++C0AC 00 00        UBnkTransmatRoofvZ          DW 0                ; XX16+2
  10++C0AE 00 00        UBnkTransmatNosevX          DW 0
  11++C0B0              UBnkTransmatNosev           EQU UBnkTransmatNosevX
  12++C0B0 00 00        UBnkTransmatNosevY          DW 0                ; XX16+2
  13++C0B2 00 00        UBnkTransmatNosevZ          DW 0                ; XX16+2
  14++C0B4 00 00        UbnkTransmatTransX          DW 0
  15++C0B6 00 00        UbnkTransmatTransY          DW 0
  16++C0B8 00 00        UbnkTransmatTransZ          DW 0
  17++C0BA              XX16                        equ UBnkTransmatSidev
  18++C0BA              ;-- XX16Inv --------------------------------------------------------------------------------------------------------------------------
  19++C0BA 00 00        UbnkTransInvRow0x0          DW 0
  20++C0BC 00 00        UbnkTransInvRow0x1          DW 0
  21++C0BE 00 00        UbnkTransInvRow0x2          DW 0
  22++C0C0 00 00        UbnkTransInvRow0x3          DW 0
  23++C0C2 00 00        UbnkTransInvRow1y0          DW 0
  24++C0C4 00 00        UbnkTransInvRow1y1          DW 0
  25++C0C6 00 00        UbnkTransInvRow1y2          DW 0
  26++C0C8 00 00        UbnkTransInvRow1y3          DW 0
  27++C0CA 00 00        UbnkTransInvRow2z0          DW 0
  28++C0CC 00 00        UbnkTransInvRow2z1          DW 0
  29++C0CE 00 00        UbnkTransInvRow2z2          DW 0
  30++C0D0 00 00        UbnkTransInvRow2z3          DW 0
  31++C0D2
  32++C0D2              XX16Inv             equ UbnkTransInvRow0x0
  33++C0D2
# file closed: ././Universe/Ships/XX16Vars.asm
  40+ C0D2                                      INCLUDE "./Universe/Ships/XX25Vars.asm"
# file opened: ././Universe/Ships/XX25Vars.asm
   1++C0D2              ;-- XX25 --------------------------------------------------------------------------------------------------------------------------
   2++C0D2 00           UbnkProjxLo                 DB  0
   3++C0D3 00           UbnkProjxHi                 DB  0
   4++C0D4 00           UbnkProjxSgn                DB  0
   5++C0D5              UbnkProjx                   EQU UbnkProjxLo
   6++C0D5 00           UbnkProjyLo                 DB  0
   7++C0D6 00           UbnkProjyHi                 DB  0
   8++C0D7 00           UbnkProjySgn                DB  0
   9++C0D8              UbnkProjy                   EQU UbnkProjyLo
  10++C0D8 00           UbnkProjzLo                 DB  0
  11++C0D9 00           UbnkProjzHi                 DB  0
  12++C0DA 00           UbnkProjzSgn                DB  0
  13++C0DB              UbnkProjz                   EQU UbnkProjzLo
  14++C0DB              XX25                        EQU UbnkProjxLo
  15++C0DB
# file closed: ././Universe/Ships/XX25Vars.asm
  41+ C0DB                                      INCLUDE "./Universe/Ships/XX18Vars.asm"
# file opened: ././Universe/Ships/XX18Vars.asm
   1++C0DB              ;-- XX18 --------------------------------------------------------------------------------------------------------------------------
   2++C0DB 00           UBnkDrawCam0xLo             DB  0               ; XX18+0
   3++C0DC 00           UBnkDrawCam0xHi             DB  0               ; XX18+1
   4++C0DD 00           UBnkDrawCam0xSgn            DB  0               ; XX18+2
   5++C0DE              UBnkDrawCam0x               equ UBnkDrawCam0xLo
   6++C0DE 00           UBnkDrawCam0yLo             DB  0               ; XX18+3
   7++C0DF 00           UBnkDrawCam0yHi             DB  0               ; XX18+4
   8++C0E0 00           UBnkDrawCam0ySgn            DB  0               ; XX18+5
   9++C0E1              UBnkDrawCam0y               equ UBnkDrawCam0yLo
  10++C0E1 00           UBnkDrawCam0zLo             DB  0               ; XX18+6
  11++C0E2 00           UBnkDrawCam0zHi             DB  0               ; XX18+7
  12++C0E3 00           UBnkDrawCam0zSgn            DB  0               ; XX18+8
  13++C0E4              UBnkDrawCam0z               equ UBnkDrawCam0zLo
  14++C0E4              XX18                        equ UBnkDrawCam0xLo
  15++C0E4
# file closed: ././Universe/Ships/XX18Vars.asm
  42+ C0E4
  43+ C0E4              ; Used to make 16 bit reads a little cleaner in source code
  44+ C0E4 00 00 00     UbnkZPoint                  DS  3
  45+ C0E7              UbnkZPointLo                equ UbnkZPoint
  46+ C0E7              UbnkZPointHi                equ UbnkZPoint+1
  47+ C0E7              UbnkZPointSign              equ UbnkZPoint+2
  48+ C0E7                                      INCLUDE "./Universe/Ships/XX15Vars.asm"
# file opened: ././Universe/Ships/XX15Vars.asm
   1++C0E7              ;-- XX15 --------------------------------------------------------------------------------------------------------------------------
   2++C0E7 00           UBnkXScaled                 DB  0               ; XX15+0Xscaled
   3++C0E8 00           UBnkXScaledSign             DB  0               ; XX15+1xsign
   4++C0E9 00           UBnkYScaled                 DB  0               ; XX15+2yscaled
   5++C0EA 00           UBnkYScaledSign             DB  0               ; XX15+3ysign
   6++C0EB 00           UBnkZScaled                 DB  0               ; XX15+4zscaled
   7++C0EC 00           UBnkZScaledSign             DB  0               ; XX15+5zsign
   8++C0ED
   9++C0ED              XX15                        equ UBnkXScaled
  10++C0ED              XX15VecX                    equ XX15
  11++C0ED              XX15VecY                    equ XX15+1
  12++C0ED              XX15VecZ                    equ XX15+2
  13++C0ED              UbnkXPoint                  equ XX15
  14++C0ED              UbnkXPointLo                equ XX15+0
  15++C0ED              UbnkXPointHi                equ XX15+1
  16++C0ED              UbnkXPointSign              equ XX15+2
  17++C0ED              UbnkYPoint                  equ XX15+3
  18++C0ED              UbnkYPointLo                equ XX15+3
  19++C0ED              UbnkYPointHi                equ XX15+4
  20++C0ED              UbnkYPointSign              equ XX15+5
  21++C0ED              ; Repurposed XX15 pre clip plines
  22++C0ED              UbnkPreClipX1               equ XX15+0
  23++C0ED              UbnkPreClipY1               equ XX15+2
  24++C0ED              UbnkPreClipX2               equ XX15+4
  25++C0ED              UbnkPreClipY2               equ XX15+6
  26++C0ED              ; Repurposed XX15 post clip lines
  27++C0ED              UBnkNewX1                   equ XX15+0
  28++C0ED              UBnkNewY1                   equ XX15+1
  29++C0ED              UBnkNewX2                   equ XX15+2
  30++C0ED              UBnkNewY2                   equ XX15+3
  31++C0ED              ; Repurposed XX15
  32++C0ED              regXX15fx                   equ UBnkXScaled
  33++C0ED              regXX15fxSgn                equ UBnkXScaledSign
  34++C0ED              regXX15fy                   equ UBnkYScaled
  35++C0ED              regXX15fySgn                equ UBnkYScaledSign
  36++C0ED              regXX15fz                   equ UBnkZScaled
  37++C0ED              regXX15fzSgn                equ UBnkZScaledSign
  38++C0ED              ; Repurposed XX15
  39++C0ED              varX1                       equ UBnkXScaled       ; Reused, verify correct position
  40++C0ED              varY1                       equ UBnkXScaledSign   ; Reused, verify correct position
  41++C0ED              varZ1                       equ UBnkYScaled       ; Reused, verify correct position
  42++C0ED              ; After clipping the coords are two 8 bit pairs
  43++C0ED              UBnkPoint1Clipped           equ UBnkXScaled
  44++C0ED              UBnkPoint2Clipped           equ UBnkYScaled
  45++C0ED              ; Repurposed XX15 when plotting lines
  46++C0ED              ; Repurposed XX15 before calling clip routine
  47++C0ED              UBnkX1                      equ XX15
  48++C0ED              UBnKx1Lo                    equ XX15
  49++C0ED              UBnKx1Hi                    equ XX15+1
  50++C0ED              UBnkY1                      equ XX15+2
  51++C0ED              UbnKy1Lo                    equ XX15+2
  52++C0ED              UBnkY1Hi                    equ XX15+3
  53++C0ED              UBnkX2                      equ XX15+4
  54++C0ED              UBnkX2Lo                    equ XX15+4
  55++C0ED              UBnkX2Hi                    equ XX15+5
  56++C0ED
# file closed: ././Universe/Ships/XX15Vars.asm
  49+ C0ED                                      INCLUDE "./Universe/Ships/XX12Vars.asm"
# file opened: ././Universe/Ships/XX12Vars.asm
   1++C0ED              ;-- transmat0 --------------------------------------------------------------------------------------------------------------------------
   2++C0ED              ; Note XX12 comes after as some logic in normal processing uses XX15 and XX12 combines
   3++C0ED 00           UBnkXX12xLo                 DB  0               ; XX12+0
   4++C0EE 00           UBnkXX12xSign               DB  0               ; XX12+1
   5++C0EF 00           UBnkXX12yLo                 DB  0               ; XX12+2
   6++C0F0 00           UBnkXX12ySign               DB  0               ; XX12+3
   7++C0F1 00           UBnkXX12zLo                 DB  0               ; XX12+4
   8++C0F2 00           UBnkXX12zSign               DB  0               ; XX12+5
   9++C0F3 00 00 00...  XX12Save                    DS  6
  10++C0F9 00 00 00...  XX12Save2                   DS  6
  11++C0FF              XX12                        equ UBnkXX12xLo
  12++C0FF              varXX12                     equ UBnkXX12xLo
  13++C0FF              ; Repurposed XX12 when plotting lines
  14++C0FF              UBnkY2                      equ XX12+0
  15++C0FF              UbnKy2Lo                    equ XX12+0
  16++C0FF              UBnkY2Hi                    equ XX12+1
  17++C0FF              UBnkDeltaXLo                equ XX12+2
  18++C0FF              UBnkDeltaXHi                equ XX12+3
  19++C0FF              UBnkDeltaYLo                equ XX12+4
  20++C0FF              UBnkDeltaYHi                equ XX12+5
  21++C0FF              UbnkGradient                equ XX12+2
  22++C0FF              UBnkTemp1                   equ XX12+2
  23++C0FF              UBnkTemp1Lo                 equ XX12+2
  24++C0FF              UBnkTemp1Hi                 equ XX12+3
  25++C0FF              UBnkTemp2                   equ XX12+3
  26++C0FF              UBnkTemp2Lo                 equ XX12+3
  27++C0FF              UBnkTemp2Hi                 equ XX12+4
  28++C0FF
# file closed: ././Universe/Ships/XX12Vars.asm
  50+ C0FF
  51+ C0FF
  52+ C0FF              ; Post clipping the results are now 8 bit
  53+ C0FF 00           UBnkVisibility              DB  0               ; replaces general purpose xx4 in rendering
  54+ C100 00           UBnkProjectedY              DB  0
  55+ C101 00           UBnkProjectedX              DB  0
  56+ C102              UBnkProjected               equ UBnkProjectedY  ; resultant projected position
  57+ C102 00 00 00...  XX15Save                    DS  8
  58+ C10A 00 00 00...  XX15Save2                   DS  8
  59+ C112 00           VarBackface                 DB 0
  60+ C113              ; Heap (or array) information for lines and normals
  61+ C113              ; Coords are stored XY,XY,XY,XY
  62+ C113              ; Normals
  63+ C113              ; This needs re-oprganising now.
  64+ C113              ; Runtime Calculation Store
  65+ C113
  66+ C113              FaceArraySize               equ 30
  67+ C113              EdgeHeapSize                equ 40
  68+ C113              NodeArraySize               equ 40
  69+ C113              LineArraySize               equ 50; incerased for max of 28 lines, of 4 points of 16 bits each
  70+ C113              ; ONLY IF TESTING SOLID FILL TraingleArraySize           equ 25
  71+ C113              ; Storage arrays for data
  72+ C113              ; Structure of arrays
  73+ C113              ; Visibility array  - 1 Byte per face/normal on ship model Bit 7 (or FF) visible, 0 Invisible
  74+ C113              ; Node array corresponds to a processed vertex from the ship model transformed into world coordinates and tracks the node list from model
  75+ C113              ; NodeArray         -  4 bytes per element      0           1            2          3
  76+ C113              ;                                               X Coord Lo  Y Coord Lo   Z CoordLo  Sign Bits 7 6 5 for X Y Z Signs (set = negative)
  77+ C113              ; Line Array        -  4 bytes per eleement     0           1            2          3
  78+ C113              ;                                               X1          Y1           X2         Y2
  79+ C113 00 00 00...  UbnkFaceVisArray            DS FaceArraySize            ; XX2 Up to 16 faces this may be normal list, each entry is controlled by bit 7, 1 visible, 0 hidden
  80+ C131              ; Node array holds the projected to screen position regardless of if its clipped or not
  81+ C131              ; When we use traingles we can cheat a bit on clipping as all lines will be horizontal so clipping is much simplified
  82+ C131 00 00 00...  UBnkNodeArray               DS NodeArraySize * 4        ; XX3 Holds the points as an array, its an array not a heap
  83+ C1D1 00 00 00...  UBnkNodeArray2              DS NodeArraySize * 4        ; XX3 Holds the points as an array, its an array not a heap
  84+ C271 00 00 00...  UbnkLineArray               DS LineArraySize * 8        ; XX19 Holds the clipped line details
  85+ C401              ; ONLY IF TESTING SOLID FILL UBnkTriangleOverspill       DS TraingleArraySize * 4    ; jsut a padding for testing
  86+ C401              UBnkLinesHeapMax            EQU $ - UbnkLineArray
  87+ C401              UBnkTraingleArray           EQU UbnkLineArray           ; We can use the line array as we draw lines or traingles
  88+ C401 00 00 00...  UbnkEdgeProcessedList DS EdgeHeapSize
  89+ C429              ; Array current Lengths
  90+ C429 00           UbnkFaceVisArrayLen         DS 1
  91+ C42A 00           UBnkNodeArrayLen            DS 1
  92+ C42B 00           UbnkLineArrayLen            DS 1                        ; total number of lines loaded to array
  93+ C42C 00           UbnkLineArrayBytes          DS 1                        ; total number of bytes loaded to array  = array len * 4
  94+ C42D              XX20                        equ UbnkLineArrayLen
  95+ C42D              varXX20                     equ UbnkLineArrayLen
  96+ C42D
  97+ C42D 00           UbnkEdgeHeapSize            DS 1
  98+ C42E 00           UbnkEdgeHeapBytes           DS 1
  99+ C42F 00           UBnkLinesHeapLen            DS 1
 100+ C430 00           UbnKEdgeHeapCounter         DS 1
 101+ C431 00           UbnKEdgeRadius              DS 1
 102+ C432 00           UbnKEdgeShipType            DS 1
 103+ C433 00           UbnKEdgeExplosionType       DS 1
 104+ C434
 105+ C434              ; Node heap is used to write out transformed Vertexs
 106+ C434
 107+ C434              ; Lines
 108+ C434 00 00 00     UBnkXX19                    DS  3
 109+ C437
 110+ C437 00 00 00...  UBnkHullCopy                DS  ShipDataLength
 111+ C452              ScoopDebrisAddr             equ UBnkHullCopy + ScoopDebrisOffset
 112+ C452              MissileLockLoAddr           equ UBnkHullCopy + MissileLockLoOffset
 113+ C452              MissileLockHiAddr           equ UBnkHullCopy + MissileLockHiOffset
 114+ C452              EdgeAddyAddr                equ UBnkHullCopy + EdgeAddyOffset
 115+ C452              LineX4Addr                  equ UBnkHullCopy + LineX4Offset
 116+ C452              GunVertexAddr               equ UBnkHullCopy + GunVertexOffset
 117+ C452              ExplosionCtAddr             equ UBnkHullCopy + ExplosionCtOffset
 118+ C452              VertexCountAddr             equ UBnkHullCopy + VertexCountOffset
 119+ C452              VertexCtX6Addr              equ UBnkHullCopy + VertexCtX6Offset
 120+ C452              EdgeCountAddr               equ UBnkHullCopy + EdgeCountOffset
 121+ C452              BountyLoAddr                equ UBnkHullCopy + BountyLoOffset
 122+ C452              BountyHiAddr                equ UBnkHullCopy + BountyHiOffset
 123+ C452              FaceCtX4Addr                equ UBnkHullCopy + FaceCtX4Offset
 124+ C452              DotAddr                     equ UBnkHullCopy + DotOffset
 125+ C452              EnergyAddr                  equ UBnkHullCopy + EnergyOffset
 126+ C452              SpeedAddr                   equ UBnkHullCopy + SpeedOffset
 127+ C452              FaceAddyAddr                equ UBnkHullCopy + FaceAddyOffset
 128+ C452              QAddr                       equ UBnkHullCopy + QOffset
 129+ C452              LaserAddr                   equ UBnkHullCopy + LaserOffset
 130+ C452              VerticesAddyAddr            equ UBnkHullCopy + VerticiesAddyOffset
 131+ C452              ShipTypeAddr                equ UBnkHullCopy + ShipTypeOffset
 132+ C452              ShipNewBitsAddr             equ UBnkHullCopy + ShipNewBitsOffset
 133+ C452              ShipAIFlagsAddr             equ UBnkHullCopy + ShipAIFlagsOffset
 134+ C452              ShipECMFittedChanceAddr     equ UBnkHullCopy + ShipECMFittedChanceOffset
 135+ C452              ShipSolidFlagAddr           equ UBnkHullCopy + ShipSolidFlagOffset
 136+ C452              ShipSolidFillAddr           equ UBnkHullCopy + ShipSolidFillOffset
 137+ C452              ShipSolidLenAddr            equ UBnkHullCopy + ShipSolidLenOffset
 138+ C452              ; Static Ship Data. This is copied in when creating the universe object
 139+ C452              XX0                         equ UBnkHullCopy        ; general hull index pointer TODO find biggest ship design
 140+ C452
 141+ C452 00 00 00...  UBnkHullVerticies           DS  40 * 6              ; largetst is trasnport type 10 at 37 vericies so alows for 40 * 6 Bytes  =
 142+ C542 00 00 00...  UBnkHullEdges               DS  50 * 4              ; ype 10 is 46 edges so allow 50
 143+ C60A 00 00 00...  UBnkHullNormals             DS  20 * 4              ; type 10 is 14 edges so 20 to be safe
 144+ C65A                  IFDEF SOLIDHULLTEST
 145+ C65A ~            UBnkHullSolid               DS  100 * 4             ; Up to 100 triangles (May optimise so only loads non hidden faces later
 146+ C65A                  ENDIF
 147+ C65A 0C           OrthagCountdown             DB  12
 148+ C65B
 149+ C65B              UBnkShipCopy                equ UBnkHullVerticies               ; Buffer for copy of ship data, for speed will copy to a local memory block, Cobra is around 400 bytes on creation of a new ship so should be plenty
 150+ C65B              UBnk_Data_len               EQU $ - StartOfUniv
 151+ C65B
 152+ C65B              ; --------------------------------------------------------------
 153+ C65B              ZeroUnivPitch:          MACRO
 154+ C65B ~                                    xor     a
 155+ C65B ~                                    ld      (UBnKRotZCounter),a
 156+ C65B                                      ENDM
 157+ C65B              ; --------------------------------------------------------------
 158+ C65B              ZeroUnivRoll:           MACRO
 159+ C65B ~                                    xor     a
 160+ C65B ~                                    ld      (UBnKRotXCounter),a
 161+ C65B                                      ENDM
 162+ C65B              ; --------------------------------------------------------------
 163+ C65B              ZeroUnivPitchAndRoll:   MACRO
 164+ C65B ~                                    xor     a
 165+ C65B ~                                    ld      (UBnKRotXCounter),a
 166+ C65B ~                                    ld      (UBnKRotZCounter),a
 167+ C65B                                      ENDM
 168+ C65B              ; --------------------------------------------------------------
 169+ C65B              MaxUnivPitchAndRoll:    MACRO
 170+ C65B ~                                    ld      a,127
 171+ C65B ~                                    ld      (UBnKRotXCounter),a
 172+ C65B ~                                    ld      (UBnKRotZCounter),a
 173+ C65B                                      ENDM
 174+ C65B              ; --------------------------------------------------------------
 175+ C65B              InfinitePitch:          MACRO
 176+ C65B ~                                    ld      a,$FF
 177+ C65B ~                                    ld      (UBnKRotZCounter),a
 178+ C65B                                      ENDM
 179+ C65B              ; --------------------------------------------------------------
 180+ C65B              InfiniteRoll:           MACRO
 181+ C65B ~                                    ld      a,$FF
 182+ C65B ~                                    ld      (UBnKRotXCounter),a
 183+ C65B                                      ENDM
 184+ C65B              ; --------------------------------------------------------------
 185+ C65B              InfinitePitchAndRoll:    MACRO
 186+ C65B ~                                    ld      a,$FF
 187+ C65B ~                                    ld      (UBnKRotXCounter),a
 188+ C65B ~                                    ld      (UBnKRotZCounter),a
 189+ C65B                                      ENDM
 190+ C65B              ; --------------------------------------------------------------
 191+ C65B              RandomUnivPitchAndRoll: MACRO
 192+ C65B ~                                    call    doRandom
 193+ C65B ~                                    or      %01101111
 194+ C65B ~                                    ld      (UBnKRotXCounter),a
 195+ C65B ~                                    call    doRandom
 196+ C65B ~                                    or      %01101111
 197+ C65B ~                                    ld      (UBnKRotZCounter),a
 198+ C65B                                      ENDM
 199+ C65B              ; --------------------------------------------------------------
 200+ C65B              RandomUnivSpeed:        MACRO
 201+ C65B ~                                    call    doRandom
 202+ C65B ~                                    and     31
 203+ C65B ~                                    ld      (UBnKSpeed),a
 204+ C65B                                      ENDM
 205+ C65B              ; --------------------------------------------------------------
 206+ C65B              MaxUnivSpeed:           MACRO
 207+ C65B ~                                    ld      a,31
 208+ C65B ~                                    ld      (UBnKSpeed),a
 209+ C65B                                      ENDM
 210+ C65B              ; --------------------------------------------------------------
 211+ C65B              ZeroUnivAccelleration:  MACRO
 212+ C65B ~                                    xor     a
 213+ C65B ~                                    ld      (UBnKAccel),a
 214+ C65B                                      ENDM
 215+ C65B              ; --------------------------------------------------------------
 216+ C65B 3A 4F C4     SetShipHostile:         ld      a,(ShipNewBitsAddr)
 217+ C65E F6 04                                or      ShipIsHostile
 218+ C660 32 4F C4                             ld      (ShipNewBitsAddr),a
 219+ C663 C9                                   ret
 220+ C664              ; --------------------------------------------------------------
 221+ C664 3A 4F C4     ClearShipHostile:       ld      a,(ShipNewBitsAddr)
 222+ C667 E6 FB                                and     ShipNotHostile
 223+ C669 32 4F C4                             ld      (ShipNewBitsAddr),a
 224+ C66C C9                                   ret
 225+ C66D              ; --------------------------------------------------------------
 226+ C66D 21 00 C0     ResetUBnkData:          ld      hl,StartOfUniv
 227+ C670 11 5B 06                             ld      de,UBnk_Data_len
 228+ C673 AF                                   xor     a
 229+ C674 CD 32 7E                             call    memfill_dma
 230+ C677 C9                                   ret
 231+ C678              ; --------------------------------------------------------------
 232+ C678 21 20 C0     ResetUbnkPosition:      ld      hl,UBnKxlo
 233+ C67B 06 09                                ld      b, 3*3
 234+ C67D AF                                   xor     a
 235+ C67E 77           .zeroLoop:              ld      (hl),a
 236+ C67F 23                                   inc     hl
 237+ C680 10 FC                                djnz    .zeroLoop
 238+ C682 C9                                   ret
 239+ C683              ; --------------------------------------------------------------
 240+ C683 DD 01        FireECM:                break
 241+ C685 3E 80                                ld      a,ECMCounterMax                 ; set ECM time
 242+ C687 32 99 C0                             ld      (UBnKECMCountDown),a            ;
 243+ C68A 3A CB 7E                             ld      a,(ECMCountDown)
 244+ C68D                                      ReturnIfALTNusng ECMCounterMax
 244+ C68D FE 80       >                        cp    ECMCounterMax
 244+ C68F D8          >                        ret	 c
 245+ C690 3E 80                                ld      a,ECMCounterMax
 246+ C692 32 CB 7E                             ld      (ECMCountDown),a
 247+ C695 C9                                   ret
 248+ C696              ; --------------------------------------------------------------
 249+ C696 3A 98 C0     RechargeEnergy:         ld      a,(UBnKEnergy)
 250+ C699                                      ReturnIfAGTEMemusng EnergyAddr
 250+ C699 21 46 C4    >                        ld      hl,EnergyAddr
 250+ C69C BE          >                        cp      (hl)
 250+ C69D D0          >                        ret	    nc
 251+ C69E                              DISPLAY "TODO: Add recharge rate logic for ship types"
 252+ C69E 3C                                   inc     a
 253+ C69F 32 98 C0                             ld      (UBnKEnergy),a
 254+ C6A2 C9                                   ret
 255+ C6A3              ; --------------------------------------------------------------
 256+ C6A3              ; A ship normally needs enough energy to fire ECM but if its shot then
 257+ C6A3              ; it may be too low, in which case the ECM does a saftey shutdown and returns 1 energy
 258+ C6A3              ; plus a 50% chance it will blow the ECM up
 259+ C6A3 3A 99 C0     UpdateECM:              ld      a,(UBnKECMCountDown)
 260+ C6A6                                      ReturnIfAIsZero
 260+ C6A6 A7          >                        and     a
 260+ C6A7 C8          >                        ret     z
 261+ C6A8 3D                                   dec     a
 262+ C6A9 32 99 C0                             ld      (UBnKECMCountDown),a
 263+ C6AC 21 98 C0                             ld      hl,UBnKEnergy
 264+ C6AF 35                                   dec     (hl)
 265+ C6B0 F0                                   ret     p
 266+ C6B1 CD DE C7     .ExhaustedEnergy:       call    UnivExplodeShip                 ; if it ran out of energy it was as it was also shot or collided as it checks in advance. Main ECM loop will continue as a compromise as multiple ships can fire ECM simultaneously
 267+ C6B4 C9                                   ret
 268+ C6B5              ;-- This takes an Axis and subtracts 1, handles leading sign and boundary of 0 going negative
 269+ C6B5              JumpOffSet:             MACRO   Axis
 270+ C6B5 ~                                    ld      hl,(Axis)
 271+ C6B5 ~                                    ld      a,h
 272+ C6B5 ~                                    and     SignOnly8Bit
 273+ C6B5 ~                                    jr      nz,.NegativeAxis
 274+ C6B5 ~            .PositiveAxis:          dec     l
 275+ C6B5 ~                                    jp      m,.MovingNegative
 276+ C6B5 ~                                    jp      .Done
 277+ C6B5 ~            .NegativeAxis:          inc     l                               ; negative means increment the z
 278+ C6B5 ~                                    jp      .Done
 279+ C6B5 ~            .MovingNegative:        ld      hl,$8001                        ; -1
 280+ C6B5 ~            .Done                   ld      (Axis),hl
 281+ C6B5                                      ENDM
 282+ C6B5              ; --------------------------------------------------------------
 283+ C6B5              WarpOffset:             JumpOffSet  UBnKzhi                     ; we will simplify on just moving Z
 283+ C6B5 2A 27 C0    >                        ld      hl,(UBnKzhi)
 283+ C6B8 7C          >                        ld      a,h
 283+ C6B9 E6 80       >                        and     SignOnly8Bit
 283+ C6BB 20 07       >                        jr      nz,.NegativeAxis
 283+ C6BD 2D          >.PositiveAxis:          dec     l
 283+ C6BE FA C8 C6    >                        jp      m,.MovingNegative
 283+ C6C1 C3 CB C6    >                        jp      .Done
 283+ C6C4 2C          >.NegativeAxis:          inc     l                               ; negative means increment the z
 283+ C6C5 C3 CB C6    >                        jp      .Done
 283+ C6C8 21 01 80    >.MovingNegative:        ld      hl,$8001                        ; -1
 283+ C6CB 22 27 C0    >.Done                   ld      (UBnKzhi),hl
 284+ C6CE C9                                   ret
 285+ C6CF              ; --------------------------------------------------------------
 286+ C6CF 44           WarpUnivByHL:           ld      b,h
 287+ C6D0 4D                                   ld      c,l
 288+ C6D1 26 00                                ld      h,0
 289+ C6D3 ED 5B 27 C0                          ld      de,(UBnKzhi)
 290+ C6D7 3A 26 C0                             ld      a,(UBnKzlo)
 291+ C6DA 6F                                   ld      l,a
 292+ C6DB                                      MMUSelectMathsBankedFns
 292+ C6DB ED 91 50 66 >                     nextreg MathsBankedFnsMMU, BankMathsBankedFns
 292+ C6DF CD 10 01       call  SubBCHfromDELsigned
 293+ C6E2 ED 53 27 C0                          ld      (UBnKzhi),de
 294+ C6E6 7D                                   ld      a,l
 295+ C6E7 32 26 C0                             ld      (UBnKzlo),a
 296+ C6EA C9                                   ret
 297+ C6EB              ; --------------------------------------------------------------
 298+ C6EB              ; update ship speed and pitch based on adjustments from AI Tactics
 299+ C6EB 3A 87 C0     UpdateSpeedAndPitch:    ld      a,(UBnKAccel)                   ; only apply non zero accelleration
 300+ C6EE                                      JumpIfAIsZero .SkipAccelleration
 300+ C6EE A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
 300+ C6EF CA 0D C7    >                        jp	    z, .SkipAccelleration
 301+ C6F2 47                                   ld      b,a                             ; b = accelleration in 2's c
 302+ C6F3 3A 86 C0                             ld      a,(UBnKSpeed)                   ; a = speed + accelleration
 303+ C6F6                                      ClearCarryFlag
 303+ C6F6 B7          >                        or a
 304+ C6F7 88                                   adc     a,b
 305+ C6F8                                      JumpIfPositive  .DoneAccelleration      ; if speed < 0
 305+ C6F8 F2 FC C6    >                        jp		p, .DoneAccelleration
 306+ C6FB              .SpeedNegative:         ZeroA                                   ;    then speed = 0
 306+ C6FB AF          >                        xor a
 307+ C6FC 47           .DoneAccelleration:     ld      b,a                             ; if speed > speed limit
 308+ C6FD 3A 47 C4                             ld      a,(SpeedAddr)                   ;    speed = limit
 309+ C700                                      JumpIfAGTENusng b, .SpeedInLimits       ; .
 309+ C700 B8          >                        cp     b
 309+ C701 D2 05 C7    >                        jp		nc,.SpeedInLimits
 310+ C704 47                                   ld      b,a                             ; .
 311+ C705 78           .SpeedInLimits:         ld      a,b                             ; .
 312+ C706 32 86 C0                             ld      (UBnKSpeed),a                   ; .
 313+ C709                                      ZeroA                                   ; acclleration = 0
 313+ C709 AF          >                        xor a
 314+ C70A 32 87 C0                             ld      (UBnKAccel),a                   ; for next AI update
 315+ C70D              .SkipAccelleration:     ; handle roll and pitch rates
 316+ C70D C9                                   ret
 317+ C70E              ; --------------------------------------------------------------
 318+ C70E 21 8F A5     UnivSetEnemyMissile:    ld      hl,NewLaunchUBnKX               ; Copy launch ship matrix
 319+ C711 11 20 C0                             ld      de,UBnKxlo                      ;
 320+ C714 01 1B 00                             ld      bc,NewLaunchDataBlockSize       ; positon + 3 rows of 3 bytes
 321+ C717 ED B0                                ldir                                    ;
 322+ C719 3E 03        .SetUpSpeed:            ld      a,3                             ; set accelleration
 323+ C71B 32 87 C0                             ld      (UBnKAccel),a                   ;
 324+ C71E                                      ZeroA
 324+ C71E AF          >                        xor a
 325+ C71F 32 88 C0                             ld      (UBnKRotXCounter),a
 326+ C722 32 89 C0                             ld      (UBnKRotZCounter),a
 327+ C725 3E 03                                ld      a,3                             ; these are max roll and pitch rates for later
 328+ C727 32 8A C0                             ld      (UBnKRAT),a
 329+ C72A 3C                                   inc     a
 330+ C72B 32 8B C0                             ld      (UBnKRAT2),a
 331+ C72E 3E 16                                ld      a,22
 332+ C730 32 8D C0                             ld      (UBnKCNT2),a
 333+ C733                                      MaxUnivSpeed                            ; and immediatley full speed (for now at least) TODO
 333+ C733 3E 1F       >                        ld      a,31
 333+ C735 32 86 C0    >                        ld      (UBnKSpeed),a
 334+ C738                                      SetMemFalse UBnKMissleHitToProcess
 334+ C738 3E FF       >                        ld      a,$FF
 334+ C73A 32 45 C0    >                        ld      (UBnKMissleHitToProcess),a
 335+ C73D CD A0 C7                             call    UnivSetAIOnly
 336+ C740 CD 5B C6                             call    SetShipHostile
 337+ C743 3E 96        .SetupPayload:          ld      a,150
 338+ C745 32 3D C0                             ld      (UBnKMissileBlastDamage),a
 339+ C748 32 3F C0                             ld      (UBnKMissileDetonateDamage),a
 340+ C74B 3E 05                                ld      a,5
 341+ C74D 32 3C C0                             ld      (UBnKMissileBlastRange),a
 342+ C750 32 3E C0                             ld      (UBnKMissileDetonateRange),a
 343+ C753 C9                                   ret
 344+ C754              ; --------------------------------------------------------------
 345+ C754              ; This sets the position of the current ship if its a player launched missile
 346+ C754 CD 20 CB     UnivSetPlayerMissile:   call    InitialisePlayerMissileOrientation  ; Copy in Player  facing
 347+ C757 CD 78 C6                             call    ResetUbnkPosition               ; home position
 348+ C75A 3E 05                                ld      a,MissileDropHeight             ; the missile launches from underneath
 349+ C75C 32 23 C0                             ld      (UBnKylo),a                     ; so its -ve drop height
 350+ C75F                                      IFDEF DEBUGMISSILELAUNCH
 351+ C75F ~                                        ld      a,$20       ; DEBUG
 352+ C75F ~                                        ld      (UBnKzlo),a
 353+ C75F                                      ENDIF
 354+ C75F 3E 80                                ld      a,$80                           ;
 355+ C761 32 25 C0                             ld      (UBnKysgn),a                    ;
 356+ C764 3E 03                                ld      a,3                             ; set accelleration
 357+ C766 32 87 C0                             ld      (UBnKAccel),a                   ;
 358+ C769                                      ZeroA
 358+ C769 AF          >                        xor a
 359+ C76A 32 88 C0                             ld      (UBnKRotXCounter),a
 360+ C76D 32 89 C0                             ld      (UBnKRotZCounter),a
 361+ C770 3E 03                                ld      a,3                             ; these are max roll and pitch rates for later
 362+ C772 32 8A C0                             ld      (UBnKRAT),a
 363+ C775 3C                                   inc     a
 364+ C776 32 8B C0                             ld      (UBnKRAT2),a
 365+ C779 3E 16                                ld      a,22
 366+ C77B 32 8D C0                             ld      (UBnKCNT2),a
 367+ C77E                                      MaxUnivSpeed                            ; and immediatley full speed (for now at least) TODO
 367+ C77E 3E 1F       >                        ld      a,31
 367+ C780 32 86 C0    >                        ld      (UBnKSpeed),a
 368+ C783                                      SetMemFalse UBnKMissleHitToProcess
 368+ C783 3E FF       >                        ld      a,$FF
 368+ C785 32 45 C0    >                        ld      (UBnKMissleHitToProcess),a
 369+ C788 CD A0 C7                             call    UnivSetAIOnly
 370+ C78B CD 64 C6                             call    ClearShipHostile                ; its a player missile
 371+ C78E C9                                   ret
 372+ C78F              ; --------------------------------------------------------------
 373+ C78F              ; this applies blast damage to ship
 374+ C78F 3A CD 80     ShipMissileBlast:       ld      a,(CurrentMissileBlastDamage)
 375+ C792 47                                   ld      b,a
 376+ C793 3A 98 C0                             ld      a,(UBnKEnergy)                   ; Reduce Energy
 377+ C796 90                                   sub     b
 378+ C797 C3 DE C7                             jp      UnivExplodeShip
 379+ C79A 18 42                                jr      UnivExplodeShip
 380+ C79C 32 98 C0                             ld      (UBnKEnergy),a
 381+ C79F C9                                   ret
 382+ C7A0              ; --------------------------------------------------------------
 383+ C7A0              ; this applies AI flag and resets all other bits
 384+ C7A0 3E 80        UnivSetAIOnly:          ld      a,ShipAIEnabled
 385+ C7A2 32 94 C0                             ld      (UBnkaiatkecm),a
 386+ C7A5 C9                                   ret
 387+ C7A6              ; --------------------------------------------------------------
 388+ C7A6              ; Sets visibile and not a dot
 389+ C7A6 3A 94 C0     UnivVisible:            ld      a,(UBnkaiatkecm)                ;  disable ship AI hostily and ECM
 390+ C7A9 F6 40                                or      ShipIsVisible
 391+ C7AB 32 94 C0                             ld      (UBnkaiatkecm),a                ;  .
 392+ C7AE C9                                   ret
 393+ C7AF              ; --------------------------------------------------------------
 394+ C7AF              ; Sets invisibile
 395+ C7AF              UnivInvisible:          ClearMemBitN  UBnkaiatkecm  , ShipIsVisibleBitNbr ; Assume its hidden
 395+ C7AF 21 94 C0    >                        ld      hl,UBnkaiatkecm
 395+ C7B2 CB B6       >                        res     ShipIsVisibleBitNbr,(hl)
 396+ C7B4 C9                                   ret
 397+ C7B5              ; --------------------------------------------------------------
 398+ C7B5              ; Clears ship killed bit to acknowled its happened
 399+ C7B5 21 94 C0     UnivAcknowledExploding: ld      hl, UBnkaiatkecm
 400+ C7B8 CB A6                                res     ShipKilledBitNbr,(hl)
 401+ C7BA C9                                   ret
 402+ C7BB              ; --------------------------------------------------------------
 403+ C7BB              ; Clears ship exploding bit
 404+ C7BB 21 94 C0     UnivFinishedExplosion:  ld      hl, UBnkaiatkecm
 405+ C7BE CB AE                                res     ShipExplodingBitNbr,(hl)
 406+ C7C0 C9                                   ret
 407+ C7C1              ; --------------------------------------------------------------
 408+ C7C1              ; Sets visibile and not a dot
 409+ C7C1 3A 94 C0     UnivVisibleNonDot:      ld      a,(UBnkaiatkecm)                ;  disable ship AI hostily and ECM
 410+ C7C4 F6 40                                or      ShipIsVisible
 411+ C7C6 E6 F7                                and     ShipIsNotDot
 412+ C7C8 32 94 C0                             ld      (UBnkaiatkecm),a                ;  .
 413+ C7CB C9                                   ret
 414+ C7CC              ; --------------------------------------------------------------
 415+ C7CC              ; Sets visibile and  a dot
 416+ C7CC 3A 94 C0     UnivVisibleDot:         ld      a,(UBnkaiatkecm)                ;  disable ship AI hostily and ECM
 417+ C7CF F6 48                                or      ShipIsVisible | ShipIsDot
 418+ C7D1 32 94 C0                             ld      (UBnkaiatkecm),a                ;  .
 419+ C7D4 C9                                   ret
 420+ C7D5              ; --------------------------------------------------------------
 421+ C7D5              ; Removes AI Bit from ship
 422+ C7D5 3A 94 C0     UnivClearAI:            ld      a,(UBnkaiatkecm)                ;  disable ship AI hostily and ECM
 423+ C7D8 E6 7F                                and     ShipAIDisabled                  ;  .
 424+ C7DA 32 94 C0                             ld      (UBnkaiatkecm),a                ;  .
 425+ C7DD C9                                   ret
 426+ C7DE
 427+ C7DE              ; --------------------------------------------------------------
 428+ C7DE              ; This sets the ship as a shower of explosiondwd, flags as killed and removes AI
 429+ C7DE DD 01        UnivExplodeShip:        break
 430+ C7E0 3A 94 C0                             ld      a,(UBnkaiatkecm)
 431+ C7E3 F6 30                                or      ShipExploding | ShipKilled      ; Set Exlpoding flag and mark as just been killed
 432+ C7E5 E6 7F                                and     Bit7Clear                       ; Remove AI
 433+ C7E7 32 94 C0                             ld      (UBnkaiatkecm),a
 434+ C7EA AF                                   xor     a
 435+ C7EB 32 98 C0                             ld      (UBnKEnergy),a
 436+ C7EE                                      ;TODO
 437+ C7EE C9                                   ret
 438+ C7EF              ; --------------------------------------------------------------
 439+ C7EF CD C3 C9     UnivSetDemoPostion:     call    UnivSetSpawnPosition
 440+ C7F2 3E 81                                ld      a,%10000001                     ; AI Enabled has 1 missile
 441+ C7F4 32 94 C0                             ld      (UBnkaiatkecm),a                ; set hostinle, no AI, has ECM
 442+ C7F7 32 4F C4                             ld      (ShipNewBitsAddr),a             ; initialise new bits logic
 443+ C7FA 3E FF                                ld      a,$FF
 444+ C7FC 32 89 C0                             ld      (UBnKRotZCounter),a             ; no pitch
 445+ C7FF 32 88 C0                             ld      (UBnKRotXCounter),a             ; set roll to maxi on station
 446+ C802                                      ZeroA
 446+ C802 AF          >                        xor a
 447+ C803 32 22 C0                             ld      (UBnKxsgn),a
 448+ C806 32 25 C0                             ld      (UBnKysgn),a
 449+ C809 32 28 C0                             ld      (UBnKzsgn),a
 450+ C80C 21 00 00                             ld      hl,0
 451+ C80F 22 20 C0                             ld      (UBnKxlo),hl
 452+ C812 22 23 C0                             ld      (UBnKylo),hl
 453+ C815 3A 4E C4                             ld      a,(ShipTypeAddr)
 454+ C818 21 B0 05                             ld      hl,$05B0                            ; so its a negative distance behind
 455+ C81B                                      JumpIfANENusng ShipTypeStation, .SkipFurther
 455+ C81B FE 02       >                        cp     ShipTypeStation
 455+ C81D C2 24 C8    >                        jp      nz,.SkipFurther
 456+ C820 3E 05                                ld      a,5
 457+ C822 84                                   add     h
 458+ C823 67                                   ld      h,a
 459+ C824 22 26 C0     .SkipFurther            ld      (UBnKzlo),hl
 460+ C827 C9                                   ret
 461+ C828              ; --------------------------------------------------------------
 462+ C828              CopyPlanetGlobaltoSpaceStation:
 463+ C828 21 7E 80                             ld      hl,ParentPlanetX
 464+ C82B 11 20 C0                             ld      de,UBnKxlo
 465+ C82E 01 09 00                             ld      bc,3*3
 466+ C831 ED B0                                ldir
 467+ C833 C9                                   ret
 468+ C834              ; --------------------------------------------------------------
 469+ C834              CopySpaceStationtoPlanetGlobal:
 470+ C834 21 20 C0                             ld      hl,UBnKxlo
 471+ C837 11 7E 80                             ld      de,ParentPlanetX
 472+ C83A 01 09 00                             ld      bc,3*3
 473+ C83D ED B0                                ldir
 474+ C83F C9                                   ret
 475+ C840              ; --------------------------------------------------------------
 476+ C840              ; This group of routines copy the global variables to local universe
 477+ C840              ; so we can a) track what is going on for debugging and b) encapsulate data
 478+ C840              CopyParentPlanettoUnivTarget:
 479+ C840 21 7E 80                             ld      hl,ParentPlanetX                ; Copy the interface data to Univ (interface may be scapped later to just use Planet X Pos
 480+ C843 C3 55 C8                             jp      copyHlToTargetXPos
 481+ C846              ; --------------------------------------------------------------
 482+ C846 21 87 80     CopyPlanettoUnivTarget: ld      hl,PlanetXPos                   ; Copy planet position to local target data
 483+ C849 C3 55 C8                             jp      copyHlToTargetXPos
 484+ C84C              ; --------------------------------------------------------------
 485+ C84C 21 9C 80     CopySpaceStationtoUniv: ld      hl,StationXPos                  ; Copy sun position to local target data
 486+ C84F C3 55 C8                             jp      copyHlToTargetXPos
 487+ C852              ; --------------------------------------------------------------
 488+ C852 21 93 80     CopySuntoUniv:          ld      hl,SunXPos                      ; the Sun routine as teh last one can just fall into copyHL
 489+ C855              ; --------------------------------------------------------------
 490+ C855              ; -- General purpose copy 9 bytes from HL to UBnKTarget block
 491+ C855              ; -- done here so that optimisation can be applied later
 492+ C855 11 47 C0     copyHlToTargetXPos:     ld      de,UBnKTargetXPos
 493+ C858 01 09 00                             ld      bc,3*3
 494+ C85B ED B0                                ldir
 495+ C85D C9                                   ret
 496+ C85E              ; --------------------------------------------------------------
 497+ C85E              ; generate space station type based on seed values
 498+ C85E              ; returns space station type in a
 499+ C85E 3A 73 80     UnivSelSpaceStationType:ld      a,(DisplayEcononmy)
 500+ C861 2A 74 80                             ld      hl,(DisplayGovernment)          ; h = TekLevel, l = Government
 501+ C864 ED 5B 76 80                          ld      de,(DisplayPopulation)          ; d = productivity e = Population
 502+ C868                                      ; so its economdy + government - TekLevel + productivity - population %00000001
 503+ C868 85                                   add     a,l
 504+ C869 9C                                   sbc     a,h
 505+ C86A 82                                   add     a,d
 506+ C86B 9B                                   sbc     a,e
 507+ C86C E6 01                                and     $01
 508+ C86E 21 1D 78                             ld      hl,MasterStations               ; in main memory
 509+ C871 ED 31                                add     hl,a
 510+ C873 7E                                   ld      a,(hl)
 511+ C874 C9                                   ret
 512+ C875              ; --------------------------------------------------------------
 513+ C875 2A 5B C0     UnivPitchToTarget:      ld      hl,( UBnKTargetDotProduct2)        ; pitch counter sign = opposite sign to roofdir sign
 514+ C878 7C                                   ld      a,h                                ; .
 515+ C879 EE 80                                xor     $80                                ; .
 516+ C87B E6 80                                and     $80                                ; .
 517+ C87D 67                                   ld      h,a                                ; h  = flipped sign
 518+ C87E 7D                                   ld      a,l                                ; a = value * 2
 519+ C87F CB 27                                sla     a                                  ;
 520+ C881                                      JumpIfAGTENusng 16, .skipPitchZero         ; if its > 16 then update pitch
 520+ C881 FE 10       >                        cp     16
 520+ C883 D2 8C C8    >                        jp		nc,.skipPitchZero
 521+ C886                                      ZeroA                                      ; else we zero pitch but
 521+ C886 AF          >                        xor a
 522+ C887 B4                                   or      h                                  ; we need to retain the sign
 523+ C888 32 89 C0                             ld      (UBnKRotZCounter),a                ; .
 524+ C88B C9                                   ret
 525+ C88C 3E 02        .skipPitchZero:         ld      a,2
 526+ C88E B4                                   or      h
 527+ C88F 32 89 C0                             ld      (UBnKRotZCounter),a
 528+ C892 C9                                   ret
 529+ C893
 530+ C893              ;Direct on dot product nose is $24
 531+ C893              ; Position                  Pitch   Roll    Speed
 532+ C893              ; Top left forwards         up      -ve     +
 533+ C893              ; Top right forwards        up      +ve     +
 534+ C893              ; Bottom left forwards      down    -ve     +
 535+ C893              ; Bottom right forwards     down    +ve     +
 536+ C893              ; Top left rear             up      -ve     -
 537+ C893              ; Top right rear            up      +ve     -
 538+ C893              ; Bottom left rear          down    -ve     -
 539+ C893              ; Bottom right rear         down    +ve     -
 540+ C893
 541+ C893 CD 61 03     UnivRollToTarget:       call    TacticsDotSidev             ; calculate side dot protuct
 542+ C896 32 5D C0                             ld      ( UBnKTargetDotProduct3),a             ; .
 543+ C899 6F                                   ld      l,a                                ; .
 544+ C89A 3A B8 7F                             ld      a,(varS)                           ; .
 545+ C89D 32 5E C0                             ld      ( UBnKTargetDotProduct3+1),a           ; .
 546+ C8A0 67                                   ld      h,a                                ; h = sign sidev
 547+ C8A1 3A 5C C0                             ld      a,( UBnKTargetDotProduct2+1)           ; get flipped pitch counter sign
 548+ C8A4 47                                   ld      b,a                                ; b = roof product
 549+ C8A5 7D                                   ld      a,l                                ; a = abs sidev  * 2
 550+ C8A6 CB 27                                sla     a                                  ;
 551+ C8A8                                      JumpIfAGTENusng 16,.skipRollZero           ;
 551+ C8A8 FE 10       >                        cp     16
 551+ C8AA D2 B3 C8    >                        jp		nc,.skipRollZero
 552+ C8AD                                      ZeroA                                      ; if its zoer then set rotx to zero
 552+ C8AD AF          >                        xor a
 553+ C8AE B0                                   or      b
 554+ C8AF 32 88 C0                             ld      (UBnKRotXCounter),a
 555+ C8B2 C9                                   ret
 556+ C8B3 3E 02        .skipRollZero:          ld      a,2
 557+ C8B5 B4                                   or      h
 558+ C8B6 A8                                   xor     b
 559+ C8B7 32 88 C0                             ld      (UBnKRotXCounter),a
 560+ C8BA C9                                   ret
 561+ C8BB
 562+ C8BB 2A 59 C0     UnivSpeedToTarget:      ld      hl,( UBnKTargetDotProduct1)
 563+ C8BE 7C                                   ld      a,h
 564+ C8BF A7                                   and     a
 565+ C8C0 20 10                                jr      nz,.SlowDown
 566+ C8C2 ED 5B 5B C0                          ld      de,( UBnKTargetDotProduct2)             ; dot product is +ve so heading at each other
 567+ C8C6 7D                                   ld      a,l
 568+ C8C7                                      JumpIfALTNusng  22,.SlowDown                                  ; nose dot product <
 568+ C8C7 FE 16       >                        cp      22
 568+ C8C9 DA D2 C8    >                        jp		c, .SlowDown
 569+ C8CC 3E 03        .Accelerate:            ld      a,3                                 ; else
 570+ C8CE 32 87 C0                             ld      (UBnKAccel),a                       ;  accelleration = 3
 571+ C8D1 C9                                   ret                                         ;  .
 572+ C8D2              .SlowDown:              JumpIfALTNusng 18, .NoSpeedChange
 572+ C8D2 FE 12       >                        cp      18
 572+ C8D4 DA DD C8    >                        jp		c, .NoSpeedChange
 573+ C8D7 3E FE        .Deccelerate:           ld      a,-2
 574+ C8D9 32 87 C0                             ld      (UBnKAccel),a
 575+ C8DC C9                                   ret
 576+ C8DD              .NoSpeedChange:         ZeroA                                       ; else no change
 576+ C8DD AF          >                        xor a
 577+ C8DE 32 87 C0                             ld      (UBnKAccel),a
 578+ C8E1 C9                                   ret
 579+ C8E2              ; --------------------------------------------------------------
 580+ C8E2              CalculateSpaceStationWarpPositon:
 581+ C8E2 3A 47 80     .CalcZPosition:         ld      a,(WorkingSeeds+1)      ; seed d & 7
 582+ C8E5 E6 07                                and     %00000111               ; .
 583+ C8E7 C6 07                                add     a,7                     ; + 7
 584+ C8E9 CB 2F                                sra     a                       ; / 2
 585+ C8EB 32 28 C0     .SetZPosition:          ld      (UBnKzsgn),a            ; << 16 (i.e. load into z sign byte
 586+ C8EE 21 00 00                             ld      hl, $0000               ; now set z hi and lo
 587+ C8F1 22 26 C0                             ld      (UBnKzlo),hl            ;
 588+ C8F4 3A 4B 80     .CalcXandYPosition:     ld      a,(WorkingSeeds+5)      ; seed f & 3
 589+ C8F7 E6 03                                and     %00000011               ; .
 590+ C8F9 C6 03                                add     a,3                     ; + 3
 591+ C8FB 47                                   ld      b,a
 592+ C8FC 3A 4A 80                             ld      a,(WorkingSeeds+4)      ; get low bit of seed e
 593+ C8FF E6 01                                and     %00000001
 594+ C901 1F                                   rra                             ; roll bit 0 into bit 7
 595+ C902 B0                                   or      b                       ; now calc is f & 3 * -1 if seed e is odd
 596+ C903 32 22 C0     .SetXandYPosition:      ld      (UBnKxsgn),a            ; set into x and y sign byte
 597+ C906 32 25 C0                             ld      (UBnKysgn),a            ; .
 598+ C909 78                                   ld      a,b                     ; we want just seed f & 3 here
 599+ C90A 32 21 C0                             ld      (UBnKxhi),a             ; set into x and y high byte
 600+ C90D 32 24 C0                             ld      (UBnKyhi),a             ; .
 601+ C910                                      ZeroA
 601+ C910 AF          >                        xor a
 602+ C911 32 20 C0                             ld      (UBnKxlo),a
 603+ C914 32 23 C0                             ld      (UBnKylo),a
 604+ C917              .CaclculateSpaceStationOffset:
 605+ C917 3A 48 80     .CalculateOffset:       ld      a,(WorkingSeeds+2)
 606+ C91A E6 03                                and     %00000011
 607+ C91C 4F                                   ld      c,a
 608+ C91D 3A 46 80                             ld      a,(WorkingSeeds)
 609+ C920 E6 01                                and     %00000001
 610+ C922 17                                   rla
 611+ C923 47                                   ld      b,a
 612+ C924 61                                   ld      h,c
 613+ C925 0E 00                                ld      c,0
 614+ C927 C5 E5        .TransposeX:            push    bc,,hl
 615+ C929 ED 5B 21 C0                          ld      de,(UBnKxhi)
 616+ C92D 3A 22 C0                             ld      a,(UBnKxsgn)
 617+ C930 6F                                   ld      l,a
 618+ C931                                      MMUSelectMathsBankedFns
 618+ C931 ED 91 50 66 >                     nextreg MathsBankedFnsMMU, BankMathsBankedFns
 618+ C935 CD 14 01       call        AddBCHtoDELsigned
 619+ C938 ED 53 21 C0                          ld      (UBnKxhi),de
 620+ C93C 7D                                   ld      a,l
 621+ C93D 32 22 C0                             ld      (UBnKxsgn),a
 622+ C940 E1 C1        .TransposeY:            pop     bc,,hl
 623+ C942 C5 E5                                push    bc,,hl
 624+ C944 ED 5B 24 C0                          ld      de,(UBnKyhi)
 625+ C948 3A 25 C0                             ld      a,(UBnKysgn)
 626+ C94B 6F                                   ld      l,a
 627+ C94C                                      MMUSelectMathsBankedFns
 627+ C94C ED 91 50 66 >                     nextreg MathsBankedFnsMMU, BankMathsBankedFns
 627+ C950 CD 14 01       call        AddBCHtoDELsigned
 628+ C953 ED 53 24 C0                          ld      (UBnKyhi),de
 629+ C957 7D                                   ld      a,l
 630+ C958 32 25 C0                             ld      (UBnKysgn),a
 631+ C95B E1 C1        .TransposeZ:            pop     bc,,hl
 632+ C95D ED 5B 27 C0                          ld      de,(UBnKzhi)
 633+ C961 3A 28 C0                             ld      a,(UBnKzsgn)
 634+ C964 6F                                   ld      l,a
 635+ C965                                      MMUSelectMathsBankedFns
 635+ C965 ED 91 50 66 >                     nextreg MathsBankedFnsMMU, BankMathsBankedFns
 635+ C969 CD 14 01       call        AddBCHtoDELsigned
 636+ C96C ED 53 27 C0                          ld      (UBnKzhi),de
 637+ C970 7D                                   ld      a,l
 638+ C971 32 28 C0                             ld      (UBnKzsgn),a
 639+ C974 C9                                   ret
 640+ C975              ; --------------------------------------------------------------
 641+ C975              UnivSpawnSpaceStationLaunched:
 642+ C975 CD 98 C9                             call    UnivSpawnSpaceStation
 643+ C978 CD 34 C8                             call    CopySpaceStationtoPlanetGlobal
 644+ C97B CD 45 CA                             call    ResetStationLaunch
 645+ C97E C9                                   ret
 646+ C97F                                      DISPLAY "TODO:fall into SpaceStation Launch Position once startup fixed"
 647+ C97F                                      DISPLAY "TODO: Fault is probably as maths for xyz is 16 bit and shoudl be 24"
 648+ C97F              ; --------------------------------------------------------------
 649+ C97F              SpaceStationLaunchPositon:
 650+ C97F 21 00 00                             ld      hl,0
 651+ C982                                      ZeroA
 651+ C982 AF          >                        xor a
 652+ C983 22 20 C0                             ld      (UBnKxlo),hl
 653+ C986 32 22 C0                             ld      (UBnKxsgn),a
 654+ C989 22 23 C0                             ld      (UBnKylo),hl
 655+ C98C 32 25 C0                             ld      (UBnKysgn),a
 656+ C98F 3E 81                                ld      a,$81
 657+ C991 22 26 C0                             ld      (UBnKzlo),hl
 658+ C994 32 28 C0                             ld      (UBnKzsgn),a
 659+ C997 C9                                   ret
 660+ C998              ; --------------------------------------------------------------
 661+ C998              UnivSpawnSpaceStation:  ;    UnivSelSpaceStationType ; set a to type
 662+ C998                                      ;ld      c,13                    ; c to slot 13 which is space station
 663+ C998                                      ;call    SpawnShipTypeASlotC     ; load inito universe slot
 664+ C998 CD 28 C8     .CalculatePosition:     call    CopyPlanetGlobaltoSpaceStation
 665+ C99B CD E2 C8     .CalcOrbitOffset:       call    CalculateSpaceStationWarpPositon
 666+ C99E CD FD CA                             call    InitialiseOrientation
 667+ C9A1              .SetRollCounters:       ZeroUnivPitch
 667+ C9A1 AF          >                        xor     a
 667+ C9A2 32 89 C0    >                        ld      (UBnKRotZCounter),a
 668+ C9A5                                      InfiniteRoll
 668+ C9A5 3E FF       >                        ld      a,$FF
 668+ C9A7 32 88 C0    >                        ld      (UBnKRotXCounter),a
 669+ C9AA              .SetOrientation:        FlipSignMem UBnkrotmatNosevX+1;  as its 0 flipping will make no difference
 669+ C9AA 3A 37 C0    >                        ld  a,(UBnkrotmatNosevX+1)
 669+ C9AD EE 80       >                        xor SignOnly8Bit
 669+ C9AF 32 37 C0    >                        ld  (UBnkrotmatNosevX+1),a
 670+ C9B2                                      FlipSignMem UBnkrotmatNosevY+1;  as its 0 flipping will make no difference
 670+ C9B2 3A 39 C0    >                        ld  a,(UBnkrotmatNosevY+1)
 670+ C9B5 EE 80       >                        xor SignOnly8Bit
 670+ C9B7 32 39 C0    >                        ld  (UBnkrotmatNosevY+1),a
 671+ C9BA                                      FlipSignMem UBnkrotmatNosevZ+1
 671+ C9BA 3A 3B C0    >                        ld  a,(UBnkrotmatNosevZ+1)
 671+ C9BD EE 80       >                        xor SignOnly8Bit
 671+ C9BF 32 3B C0    >                        ld  (UBnkrotmatNosevZ+1),a
 672+ C9C2 C9                                   ret
 673+ C9C3              ; --------------------------------------------------------------
 674+ C9C3              ; This sets the position of the current ship randomly, called after spawing
 675+ C9C3              ; Spawns in withink 16 bit range so 24 bit friendly
 676+ C9C3 CD FD CA     UnivSetSpawnPosition:   call    InitialiseOrientation
 677+ C9C6                                      RandomUnivPitchAndRoll
 677+ C9C6 CD EC 85    >                        call    doRandom
 677+ C9C9 F6 6F       >                        or      %01101111
 677+ C9CB 32 88 C0    >                        ld      (UBnKRotXCounter),a
 677+ C9CE CD EC 85    >                        call    doRandom
 677+ C9D1 F6 6F       >                        or      %01101111
 677+ C9D3 32 89 C0    >                        ld      (UBnKRotZCounter),a
 678+ C9D6 CD EC 85                             call    doRandom                        ; set x lo and y lo to random
 679+ C9D9 32 20 C0     .setXlo:                ld      (UBnKxlo),a
 680+ C9DC 32 23 C0     .setYlo:                ld      (UBnKylo),a
 681+ C9DF 0F           .setXsign:              rrca                                    ; rotate by 1 bit right
 682+ C9E0 47                                   ld      b,a
 683+ C9E1 E6 80                                and     SignOnly8Bit
 684+ C9E3 32 22 C0                             ld      (UBnKxsgn),a
 685+ C9E6 78           .setYSign:              ld      a,b                             ; get random back again
 686+ C9E7 0F                                   rrca                                    ; rotate by 1 bit right
 687+ C9E8 47                                   ld      b,a
 688+ C9E9 E6 80                                and     SignOnly8Bit                    ; and set y sign
 689+ C9EB 32 25 C0                             ld      (UBnKysgn),a
 690+ C9EE CB 08        .setYHigh:              rrc     b                               ; as value is in b rotate again
 691+ C9F0 78                                   ld      a,b                             ;
 692+ C9F1 E6 1F                                and     31                              ; set y hi to random 0 to 31
 693+ C9F3 32 24 C0                             ld      (UBnKyhi),a                     ;
 694+ C9F6 CB 08        .setXHigh:              rrc     b                               ; as value is in b rotate again
 695+ C9F8 78                                   ld      a,b
 696+ C9F9 E6 1F                                and     31                              ; set x hi to random 0 to 31
 697+ C9FB 4F                                   ld      c,a                             ; save shifted into c as well
 698+ C9FC 32 21 C0                             ld      (UBnKxhi),a
 699+ C9FF 3E 50        .setZHigh:              ld      a,80                            ; set z hi to 80 - xhi - yhi - carry
 700+ CA01 98                                   sbc     b
 701+ CA02 99                                   sbc     c
 702+ CA03 32 27 C0                             ld      (UBnKzhi),a
 703+ CA06 3A 4E C4     .CheckIfBodyOrJunk:     ld      a,(ShipTypeAddr)
 704+ CA09                                      ReturnIfAEqNusng ShipTypeJunk
 704+ CA09 FE 03       >                        cp      ShipTypeJunk
 704+ CA0B C8          >                        ret     z
 705+ CA0C                                      ReturnIfAEqNusng ShipTypeScoopable
 705+ CA0C FE 04       >                        cp      ShipTypeScoopable
 705+ CA0E C8          >                        ret     z
 706+ CA0F 78                                   ld      a,b                             ; its not junk to set z sign
 707+ CA10 0F                                   rrca                                    ; as it can jump in
 708+ CA11 E6 80                                and     SignOnly8Bit
 709+ CA13 32 28 C0                             ld      (UBnKzsgn),a
 710+ CA16 C9                                   ret
 711+ CA17
 712+ CA17              ; --------------------------------------------------------------
 713+ CA17              ; This sets the cargo type or carryflag set for not cargo
 714+ CA17              ; Later this will be done via a loadable lookup table
 715+ CA17 3A 4E C4     ShipCargoType:          ld      a,(ShipTypeAddr)
 716+ CA1A                                      JumpIfAEqNusng ShipID_CargoType5, .CargoCanister
 716+ CA1A FE 04       >                        cp     ShipID_CargoType5
 716+ CA1C CA 33 CA    >                        jp      z,.CargoCanister
 717+ CA1F              .IsItThargon:           JumpIfAEqNusng ShipID_Thargon,    .Thargon
 717+ CA1F FE 27       >                        cp     ShipID_Thargon
 717+ CA21 CA 39 CA    >                        jp      z,.Thargon
 718+ CA24              .IsItAlloy:             JumpIfAEqNusng ShipID_Plate,      .Plate
 718+ CA24 FE 1D       >                        cp     ShipID_Plate
 718+ CA26 CA 3C CA    >                        jp      z,.Plate
 719+ CA29              .IsItSplinter:          JumpIfAEqNusng ShipID_Splinter,   .Splinter
 719+ CA29 FE 24       >                        cp     ShipID_Splinter
 719+ CA2B CA 3F CA    >                        jp      z,.Splinter
 720+ CA2E              .IsItEscapePod:         JumpIfAEqNusng ShipID_Escape_Pod, .EscapePod
 720+ CA2E FE 11       >                        cp     ShipID_Escape_Pod
 720+ CA30 CA 42 CA    >                        jp      z,.EscapePod
 721+ CA33 CD EC 85     .CargoCanister:         call    doRandom
 722+ CA36 E6 0F                                and     15                      ; Limit stock from Food to Platinum
 723+ CA38 C9                                   ret
 724+ CA39 3E 11        .Thargon:               ld      a,AlienItemsIndex
 725+ CA3B C9                                   ret
 726+ CA3C 3E 0A        .Plate:                 ld      a,AlloysIndex
 727+ CA3E C9                                   ret
 728+ CA3F 3E 0D        .Splinter:              ld      a,MineralsIndex
 729+ CA41 C9                                   ret
 730+ CA42 3E 04        .EscapePod:             ld      a,SlavesIndex
 731+ CA44 C9                                   ret
 732+ CA45                      IFDEF DEBUG_SHIP_MOVEMENT
 733+ CA45 ~            FixStationPos:          ld      hl, DebugPos
 734+ CA45 ~                                    ld      de, UBnKxlo
 735+ CA45 ~                                    ld      bc,9
 736+ CA45 ~                                    ldir
 737+ CA45 ~                                    ld      hl,DebugRotMat
 738+ CA45 ~                                    ld      de, UBnkrotmatSidevX
 739+ CA45 ~                                    ld      bc,6*3
 740+ CA45 ~                                    ldir
 741+ CA45 ~                                    ret
 742+ CA45                      ENDIF
 743+ CA45                      IFDEF DEBUG_SHIP_MOVEMENT
 744+ CA45 ~            DebugPos:               DB $00,$00,$00,$92,$01,$00,$7E,$04,$00
 745+ CA45 ~            DebugRotMat:            DB $37,$88,$9A,$DC,$1B,$F7
 746+ CA45 ~            DebugRotMat1:           DB $DF,$6D,$2A,$07,$C1,$83
 747+ CA45 ~            DebugRotMat2:           DB $00,$80,$4A,$9B,$AA,$D8
 748+ CA45                      ENDIF
 749+ CA45
 750+ CA45              ; --------------------------------------------------------------
 751+ CA45              ; This sets current univrse object to space station
 752+ CA45 3E 81        ResetStationLaunch:     ld  a,%10000001                         ; Has AI and 1 Missile
 753+ CA47 32 94 C0                             ld  (UBnkaiatkecm),a                    ; set hostinle, no AI, has ECM
 754+ CA4A AF                                   xor a
 755+ CA4B 32 89 C0                             ld      (UBnKRotZCounter),a             ; no pitch
 756+ CA4E 32 4F C4                             ld      (ShipNewBitsAddr),a             ; initialise new bits logic
 757+ CA51 3E FF                                ld      a,$FF
 758+ CA53 32 88 C0                             ld      (UBnKRotXCounter),a             ; set roll to maxi on station
 759+ CA56 21 00 00     .SetPosBehindUs:        ld      hl,$0000
 760+ CA59 22 20 C0                             ld      (UBnKxlo),hl
 761+ CA5C 21 00 00                             ld      hl,$0000
 762+ CA5F 22 23 C0                             ld      (UBnKylo),hl
 763+ CA62 21 B0 01                             ld      hl,$01B0                            ; so its a negative distance behind
 764+ CA65 22 26 C0                             ld      (UBnKzlo),hl
 765+ CA68 AF                                   xor     a
 766+ CA69 32 22 C0                             ld      (UBnKxsgn),a
 767+ CA6C 32 25 C0                             ld      (UBnKysgn),a
 768+ CA6F 3E 80                                ld      a,$80
 769+ CA71 32 28 C0                             ld      (UBnKzsgn),a
 770+ CA74 CD 2A CB     .SetOrientation:        call    LaunchedOrientation             ; set initial facing
 771+ CA77 C9                                   ret
 772+ CA78                  ;Input: BC = Dividend, DE = Divisor, HL = 0
 773+ CA78              ;Output: BC = Quotient, HL = Remainder
 774+ CA78              ; --------------------------------------------------------------
 775+ CA78 2A 23 29 27  FighterTypeMapping:     DB ShipID_Worm, ShipID_Sidewinder, ShipID_Viper, ShipID_Thargon
 776+ CA7C
 777+ CA7C              ; Initialiase data, iyh must equal slot number
 778+ CA7C              ;                   iyl must be ship type
 779+ CA7C              ;                   a  = current bank number
 780+ CA7C 01 62 00     UnivInitRuntime:        ld      bc,UBnKRuntimeSize
 781+ CA7F 21 40 C0                             ld      hl,UBnKStartOfRuntimeData
 782+ CA82                                      ZeroA
 782+ CA82 AF          >                        xor a
 783+ CA83 32 99 C0                             ld      (UBnKECMCountDown),a
 784+ CA86 32 A1 C0                             ld      (UBnKHeadingToPlanetOrSun),a ; at the moment we don't have a preferred trader route
 785+ CA89 77           .InitLoop:              ld      (hl),a
 786+ CA8A 23                                   inc     hl
 787+ CA8B 10 FC                                djnz    .InitLoop
 788+ CA8D              .SetEnergy:             ldCopyByte EnergyAddr, UBnKEnergy
 788+ CA8D 3A 46 C4    >                        ld       a,(EnergyAddr)
 788+ CA90 32 98 C0    >                        ld       (UBnKEnergy),a
 789+ CA93 FD 7C        .SetBankData:           ld      a,iyh
 790+ CA95 32 40 C0                             ld      (UBnKSlotNumber),a
 791+ CA98 C6 46                                add     a,BankUNIVDATA0
 792+ CA9A 32 41 C0                             ld      (UbnKShipUnivBankNbr),a
 793+ CA9D FD 7D                                ld      a,iyl
 794+ CA9F 32 44 C0                             ld      (UBnKShipModelId),a
 795+ CAA2 CD 0F E0                             call    GetShipBankId                ; this will mostly be debugging info
 796+ CAA5 32 42 C0                             ld      (UBnkShipModelBank),a        ; this will mostly be debugging info
 797+ CAA8 78                                   ld      a,b                          ; this will mostly be debugging info
 798+ CAA9 32 43 C0                             ld      (UBnKShipModelNbr),a         ; this will mostly be debugging info
 799+ CAAC 3A 4B C4     .SetUpMissileCount:     ld      a,(LaserAddr)                ; get laser and missile details
 800+ CAAF E6 0F                                and     ShipMissileCount
 801+ CAB1 4F                                   ld      c,a
 802+ CAB2 3A AC 7E                             ld      a,(RandomSeed1)              ; missile flag limit
 803+ CAB5 A1                                   and     c                            ; .
 804+ CAB6 32 9C C0                             ld      (UBnKMissilesLeft),a
 805+ CAB9 3A 4B C4     .SetupLaserType         ld      a,(LaserAddr)
 806+ CABC E6 F0                                and     ShipLaserPower
 807+ CABE ED 23                                swapnib
 808+ CAC0 32 9B C0                             ld      (UBnKLaserPower),a
 809+ CAC3 3A 50 C4     .SetUpFighterBays:      ld      a,(ShipAIFlagsAddr)
 810+ CAC6 4F                                   ld      c,a
 811+ CAC7 E6 70                                and     ShipFighterBaySize
 812+ CAC9                                      JumpIfANENusng ShipFighterBaySizeInf, .LimitedBay
 812+ CAC9 FE 70       >                        cp     ShipFighterBaySizeInf
 812+ CACB C2 D0 CA    >                        jp      nz,.LimitedBay
 813+ CACE 3E FF                                ld      a,$FF                       ; force unlimited ships
 814+ CAD0 ED 23        .LimitedBay:            swapnib                             ; as its bits 6 to 4 and we have removed bit 7 we can cheat with a swapnib
 815+ CAD2 32 9E C0                             ld      (UBnKFightersLeft),a
 816+ CAD5 79           .SetUpFighterType:      ld      a,c                         ; get back AI flags
 817+ CAD6 E6 0C                                and     ShipFighterType             ; fighter type is bits 2 and 3
 818+ CAD8 CB 1F                                rr      a                           ; so get them down to 0 and 1
 819+ CADA CB 1F                                rr      a                           ;
 820+ CADC 21 78 CA                             ld      hl,FighterTypeMapping       ; then use the lookup table
 821+ CADF ED 31                                add     hl,a                        ; for the respective ship id
 822+ CAE1 7E                                   ld      a,(hl)                      ; we work on this for optimisation
 823+ CAE2 32 9D C0                             ld      (UBnKFighterShipId),a       ; ship data holds index to this table
 824+ CAE5 3A 51 C4     .SetUpECM:              ld      a,(ShipECMFittedChanceAddr) ; Now handle ECM
 825+ CAE8 47                                   ld      b,a
 826+ CAE9 3A AE 7E     .FetchLatestRandom:     ld      a,(RandomSeed3)
 827+ CAEC                                      JumpIfALTNusng b, .ECMFitted
 827+ CAEC B8          >                        cp      b
 827+ CAED DA F8 CA    >                        jp		c, .ECMFitted
 828+ CAF0              .ECMNotFitted:          SetMemFalse UBnKECMFitted
 828+ CAF0 3E FF       >                        ld      a,$FF
 828+ CAF2 32 9A C0    >                        ld      (UBnKECMFitted),a
 829+ CAF5 C3 FC CA                             jp      .DoneECM
 830+ CAF8              .ECMFitted:             SetMemTrue  UBnKECMFitted
 830+ CAF8 AF          >                        xor     a
 830+ CAF9 32 9A C0    >                        ld      (UBnKECMFitted),a
 831+ CAFC              .DoneECM:               ; TODO set up laser power
 832+ CAFC C9                                   ret
 833+ CAFD                  DISPLAY "Tracing 2", $
 834+ CAFD
 835+ CAFD                                      include "Universe/Ships/InitialiseOrientation.asm"
# file opened: ./Universe/Ships/InitialiseOrientation.asm
   1++CAFD              ;  sidev = (1,  0,  0)  sidev = (&6000, 0, 0)
   2++CAFD              ;  roofv = (0,  1,  0)  roofv = (0, &6000, 0)
   3++CAFD              ;  nosev = (0,  0, -1)  nosev = (0, 0, &E000)   E000 = SignBit[96]
   4++CAFD              InitialiseOrientation:
   5++CAFD 21 00 00     ZI1:                    ld      hl, 0
   6++CB00 22 2C C0                             ld      (UBnkrotmatSidevY),hl                ; set the zeroes
   7++CB03 22 2E C0                             ld      (UBnkrotmatSidevZ),hl                ; set the zeroes
   8++CB06 22 30 C0                             ld      (UBnkrotmatRoofvX),hl                ; set the zeroes
   9++CB09 22 34 C0                             ld      (UBnkrotmatRoofvZ),hl                ; set the zeroes
  10++CB0C 22 36 C0                             ld      (UBnkrotmatNosevX),hl                ; set the zeroes
  11++CB0F 22 38 C0                             ld      (UBnkrotmatNosevY),hl                ; set the zeroes
  12++CB12              ; Optimised as already have 0 in l
  13++CB12 26 60                                ld      h, $60	             				; 96 in hi byte
  14++CB14                                      ;ld      hl,1
  15++CB14 22 2A C0                             ld      (UBnkrotmatSidevX),hl
  16++CB17 22 32 C0                             ld      (UBnkrotmatRoofvY),hl
  17++CB1A              ; Optimised as already have 0 in l
  18++CB1A 26 E0                                ld      h, $E0					            ; -96 in hi byte which is +96 with hl bit 7 set
  19++CB1C 22 3A C0                             ld      (UBnkrotmatNosevZ),hl
  20++CB1F C9                                   ret
  21++CB20
  22++CB20              InitialisePlayerMissileOrientation:
  23++CB20 CD FD CA                             call    InitialiseOrientation
  24++CB23 21 00 60                             ld      hl,$6000
  25++CB26 22 3A C0                             ld      (UBnkrotmatNosevZ),hl           ; mius
  26++CB29 C9                                   ret
  27++CB2A
  28++CB2A
  29++CB2A              ;  sidev = (1,  0,  0)  sidev = (&6000, 0, 0)
  30++CB2A              ;  roofv = (0,  1,  0)  roofv = (0, &6000, 0)
  31++CB2A              ;  nosev = (-0,  -0, 1) nosev = (0, 0, &6000)
  32++CB2A CD FD CA     LaunchedOrientation:    call    InitialiseOrientation
  33++CB2D                                      FlipSignMem UBnkrotmatNosevX+1;  as its 0 flipping will make no difference
  33++CB2D 3A 37 C0    >                        ld  a,(UBnkrotmatNosevX+1)
  33++CB30 EE 80       >                        xor SignOnly8Bit
  33++CB32 32 37 C0    >                        ld  (UBnkrotmatNosevX+1),a
  34++CB35                                      FlipSignMem UBnkrotmatNosevY+1;  as its 0 flipping will make no difference
  34++CB35 3A 39 C0    >                        ld  a,(UBnkrotmatNosevY+1)
  34++CB38 EE 80       >                        xor SignOnly8Bit
  34++CB3A 32 39 C0    >                        ld  (UBnkrotmatNosevY+1),a
  35++CB3D                                      FlipSignMem UBnkrotmatNosevZ+1
  35++CB3D 3A 3B C0    >                        ld  a,(UBnkrotmatNosevZ+1)
  35++CB40 EE 80       >                        xor SignOnly8Bit
  35++CB42 32 3B C0    >                        ld  (UBnkrotmatNosevZ+1),a
  36++CB45 C9                                   ret
  37++CB46
# file closed: ./Universe/Ships/InitialiseOrientation.asm
 836+ CB46              ;----------------------------------------------------------------------------------------------------------------------------------
 837+ CB46              ;OrientateVertex:
 838+ CB46              ;                      [ sidev_x sidev_y sidev_z ]   [ x ]
 839+ CB46              ;  projected [x y z] = [ roofv_x roofv_y roofv_z ] . [ y ]
 840+ CB46              ;                      [ nosev_x nosev_y nosev_z ]   [ z ]
 841+ CB46              ;
 842+ CB46
 843+ CB46              ;----------------------------------------------------------------------------------------------------------------------------------
 844+ CB46              ;TransposeVertex:
 845+ CB46              ;                      [ sidev_x roofv_x nosev_x ]   [ x ]
 846+ CB46              ;  projected [x y z] = [ sidev_y roofv_y nosev_y ] . [ y ]
 847+ CB46              ;                      [ sidev_z roofv_z nosev_z ]   [ z ]
 848+ CB46              ; VectorToVertex:
 849+ CB46              ;                     [ sidev_x roofv_x nosev_x ]   [ x ]   [ x ]
 850+ CB46              ;  vector to vertex = [ sidev_y roofv_y nosev_y ] . [ y ] + [ y ]
 851+ CB46              ;                     [ sidev_z roofv_z nosev_z ]   [ z ]   [ z ]
 852+ CB46              ;INPUTS:    bhl = dividend  cde = divisor where b and c are sign bytes
 853+ CB46              ;OUTPUTS:   cahl = quotient cde = divisor
 854+ CB46              ;--------------------------------------------------------------------------------------------------------
 855+ CB46                                      ;include "./ModelRender/EraseOldLines-EE51.asm"
 856+ CB46               ; OBSOLETE                       include "./ModelRender/TrimToScreenGrad-LL118.asm"
 857+ CB46                                      include "./ModelRender/CLIP-LL145.asm"
# file opened: ././ModelRender/CLIP-LL145.asm
   1++CB46              ;--------------------------------------------------------------------------------------------------------------------
   2++CB46
   3++CB46 00           clipDx                  DB      0           ; also XX12+2
   4++CB47 00           clipDxHigh              DB      0           ; also XX12+3
   5++CB48 00           clipDxHighNonABS        DB      0           ; also XX12+3
   6++CB49 00           clipDy                  DB      0           ; also XX12+4
   7++CB4A 00           clipDyHigh              DB      0           ; also XX12+5
   8++CB4B 00           clipGradient            DB      0
   9++CB4C 00           clipDxySign             DB      0
  10++CB4D              varX12p3                equ     clipDxySign
  11++CB4D 00           clipXGTY                DB      0
  12++CB4E 00           clipFlags               DB      0
  13++CB4F 00           SWAP                    DB      0
  14++CB50 00 00        varYX                   DW      0
  15++CB52              ;varRegX                 DB      0
  16++CB52              ;varXX12p2               DB      0
  17++CB52 00           clipXX13                 DB      0
  18++CB53 00           Gradient                DB      0
  19++CB54              ; for start and end y. bit7 of lower determines its not been setup yet
  20++CB54
  21++CB54              ;--------------------------------------------------------------------------------------
  22++CB54                      IFNDEF       CLIPVersion3
  23++CB54 ED 4B E9 C0  ClipLine:               ld      bc,(UbnkPreClipY1)          ; bc - XX15(2,3) Y1
  24++CB58 DD 2A ED C0                          ld      ix,(UbnkPreClipY2)          ; ix - XX12(0,1) Y2
  25++CB5C 2A E7 C0                             ld      hl,(UbnkPreClipX1)          ; hl - XX15(0,1) X1
  26++CB5F ED 5B EB C0                          ld      de,(UbnkPreClipX2)          ; de - XX15(4,5) X2
  27++CB63 AF                                   xor     a
  28++CB64 32 4F CB                             ld      (SWAP),a                    ; SWAP = 0
  29++CB67 7A                                   ld      a,d                         ; A = X2Hi
  30++CB68 FD 26 BF     .LL147:                 ld      iyh,$BF                     ; we need to be 191 as its 128 + another bit set from 0 to 6, we are using iyh as regX (128 will actually do)
  31++CB6B DD B4                                or      ixh                         ; if (X2Hi L-OR Y2 Hi <> 0) goto LL107             -- X2Y2 off screen
  32++CB6D 20 0A                                jr      nz, .LL107
  33++CB6F DD 7D                                ld      a,ixl
  34++CB71 ED 27 80                             test    $80                         ; if screen hight < y2 lo, i.e y2 lo >127 goto LL107,
  35++CB74 20 03                                jr      nz,.LL107
  36++CB76 FD 26 00                             ld      iyh, 0                      ; else iyh = regX = 0                                                                        -- X2Y2 on screen
  37++CB79              ; XX13 = regX (i.e. iyh)      ( if XX13 = XX13 is 191 if (x2, y2) is off-screen else 0) we bin XX13 as not needed
  38++CB79              ; so XX13 = 0 if x2_hi = y2_hi = 0, y2_lo is on-screen,  XX13 = 191 if x2_hi or y2_hi are non-zero or y2_lo is off the bottom of the screen
  39++CB79 FD 7C        .LL107                  ld      a,iyh
  40++CB7B 32 52 CB                             ld      (clipXX13),a                ; debug copy iyh to xx13
  41++CB7E 7C                                   ld      a,h                         ; If (X1 hi L-OR Y1) hi  goto LL83                   -- X1Y1 off screen and maybe X2Y2
  42++CB7F B0                                   or      b                           ;
  43++CB80 20 27                                jr      nz,.LL83                    ;
  44++CB82 79                                   ld      a,c                         ; or (y1 lo > bottom of screen)
  45++CB83 ED 27 80                             test    $80                         ; i.e  screen height < y1)
  46++CB86 20 21                                jr      nz,.LL83
  47++CB88              ; If we get here, (x1, y1) is on-screen
  48++CB88 FD 7C                                ld      a,iyh                       ; iyh = xx13 at this point if  XX13 <> 0 goto LL108                                                        -- X1Y1 on screen, if we flagged X2Y2 off screen goto LL108
  49++CB8A FE 00                                cp      0
  50++CB8C 20 15                                jr      nz, .LL108
  51++CB8E              ; Finished clipping exit point ----------------------------------------------------------------------------------------
  52++CB8E 79           .ClipDone:              ld      a,c                         ; LL146 (Clip Done)               Y1 = y1 lo, x2 = x2 lo, x1 = x1 lo y1 = y1 lo                                   -- Nothing off screen
  53++CB8F 32 E8 C0                             ld      (UBnkNewY1),a
  54++CB92 DD 7D                                ld      a,ixl
  55++CB94 32 EA C0                             ld      (UBnkNewY2),a
  56++CB97 7D                                   ld      a,l
  57++CB98 32 E7 C0                             ld      (UBnkNewX1),a
  58++CB9B 7B                                   ld      a,e
  59++CB9C 32 E9 C0                             ld      (UBnkNewX2),a
  60++CB9F                                      ClearCarryFlag                      ; carry is clear so valid to plot is in XX15(0to3)
  60++CB9F B7          >                        or a
  61++CBA0 C9                                   ret                                 ; 2nd pro different, it swops based on swop flag around here.
  62++CBA1              ; Finished out of bounds exit point -----------------------------------------------------------------------------------
  63++CBA1              .PointsOutofBounds:     SetCarryFlag                        ; LL109 (ClipFailed) carry flag set as not visible
  63++CBA1 37          >                        scf
  64++CBA2 C9                                   ret
  65++CBA3 FD 7C        .LL108:                 ld      a,iyh
  66++CBA5 B7                                   or      a
  67++CBA6 1F                                   rra
  68++CBA7 FD 67                                ld      iyh,a                       ; (X2Y2 Off Screen)         XX13 = 95 (i.e. divide it by 2)                                                 -- X1Y1 on screen X2Y2 off screen
  69++CBA9 FD 7C        .LL83:                  ld      a,iyh                       ; (Line On screen Test)      if XX13 < 128 then only 1 point is on screen so goto LL115                      -- We only need to deal with X2Y2
  70++CBAB ED 27 80                             test    $80                         ;
  71++CBAE 28 28                                jr      z, .LL115                   ;
  72++CBB0              ;                       Check for X1 and X2 negative
  73++CBB0 7C                                   ld      a,h                         ; If both x1_hi and x2_hi have bit 7 set, jump to LL109  to return from the subroutine with the C flag set, as the entire line is above the top of the screen
  74++CBB1 A2                                   and     d
  75++CBB2                                      JumpIfNegative  .PointsOutofBounds
  75++CBB2 FA A1 CB    >                        jp		m, .PointsOutofBounds
  76++CBB5              ;                       Check for Y1 and Y2 negative
  77++CBB5 78                                   ld      a,b                         ; If both y1_hi and y2_hi have bit 7 set, jump to LL109  to return from the subroutine with the C flag set, as the entire line is above the top of the screen
  78++CBB6 DD A4                                and     ixh
  79++CBB8                                      JumpIfNegative  .PointsOutofBounds
  79++CBB8 FA A1 CB    >                        jp		m, .PointsOutofBounds
  80++CBBB              ;                       Check for X1 and X2 both > 255
  81++CBBB 7C                                   ld      a,h                         ; If neither (x1_hi - 1) or (x2_hi - 1) have bit 7 set, jump to LL109 to return from the subroutine with the C  flag set, as the line doesn't fit on-screen
  82++CBBC 3D                                   dec     a
  83++CBBD FD 6F                                ld      iyl,a                       ; using iyl as XX12+2 var
  84++CBBF 7A                                   ld      a,d                         ; a = x2 hi
  85++CBC0 3D                                   dec     a
  86++CBC1 FD B5                                or      iyl                         ; (x2 hi -1 ) or (x1 hi -1)
  87++CBC3                                      JumpIfPositive .PointsOutofBounds   ; if both x1 and x2hi were > 0 then subtracting 1 would result in 0..254 so either being negative means it was 0 before
  87++CBC3 F2 A1 CB    >                        jp		p, .PointsOutofBounds
  88++CBC6              ; by here we have eliminated -ve Y1 bounds so can just test for positive high and bit 7 of lo
  89++CBC6 DD 7C                                ld      a,ixh
  90++CBC8 3D                                   dec     a
  91++CBC9 FD 6F                                ld      iyl,a
  92++CBCB 78                                   ld      a,b
  93++CBCC 3D                                   dec     a
  94++CBCD FD B5                                or      iyl
  95++CBCF                                      JumpIfPositive .PointsOutofBounds   ; if both x1 and x2hi were > 0 then subtracting 1 would result in 0..254 so either being negative means it was 0 before
  95++CBCF F2 A1 CB    >                        jp		p, .PointsOutofBounds
  96++CBD2 79                                   ld      a,c
  97++CBD3 DD A5                                and     ixl
  98++CBD5                                      JumpIfNegative .PointsOutofBounds   ; really if both are > 127
  98++CBD5 FA A1 CB    >                        jp		m, .PointsOutofBounds
  99++CBD8              ; Clip line: calulate the line's gradient
 100++CBD8              ; here as an optimisation we make sure X1 is always < X2  later on
 101++CBD8              .LL115:                 ClearCarryFlag
 101++CBD8 B7          >                        or a
 102++CBD9 E5 D5        .CalcDX:                push    hl,,de
 103++CBDB EB                                   ex      hl,de                       ; so hl is x2 and de = x1
 104++CBDC ED 52                                sbc     hl,de
 105++CBDE 22 46 CB                             ld      (clipDx),hl
 106++CBE1 7C                                   ld      a,h
 107++CBE2 32 48 CB                             ld      (clipDxHighNonABS),a
 108++CBE5              .CalcDy:                ClearCarryFlag
 108++CBE5 B7          >                        or a
 109++CBE6 DD E5 E1                             ld      hl,ix
 110++CBE9 ED 42                                sbc     hl,bc
 111++CBEB 54 5D                                ld      de,hl           ;;OPTIMISATION 6/11/21
 112++CBED 22 49 CB                             ld      (clipDy),hl     ;OPTIMISATION 6/11/21 commented out
 113++CBF0 7C           .CalcQuadrant:          ld      a,h
 114++CBF1 32 4A CB                             ld      (clipDyHigh),a              ; so A = sign of deltay in effect
 115++CBF4              ; So we now have delta_x in XX12(3 2), delta_y in XX12(5 4)  where the delta is (x1, y1) - (x2, y2))
 116++CBF4 21 47 CB                             ld      hl,clipDxHigh
 117++CBF7 AE                                   xor     (hl)                        ; now a = sign dx xor sign dy
 118++CBF8 32 B8 7F                             ld      (varS),a                    ; DEBGU putting it in var S too for now
 119++CBFB 32 4C CB                             ld      (clipDxySign),a
 120++CBFE 3A 4A CB     .AbsDy:                 ld      a,(clipDyHigh)
 121++CC01 ED 27 80                             test    $80
 122++CC04 28 0E                                jr      z,.LL110                    ; If delta_y_hi is positive, jump down to LL110 to skip the following
 123++CC06 ED 5B 49 CB                          ld      de,(clipDy)                 ;OPTIMISATION 6/11/21 commented out
 124++CC0A                                      macronegate16de                     ; Otherwise flip the sign of delta_y to make it  positive, starting with the low bytes
 124++CC0A AF          >					xor 	a
 124++CC0B 93          >                    sub 	e
 124++CC0C 5F          >                    ld 		e,a
 124++CC0D 9F          >                    sbc 	a,a
 124++CC0E 92          >                    sub 	d
 124++CC0F 57          >                    ld 		d,a
 125++CC10 ED 53 49 CB                          ld      (clipDy),de                 ;OPTIMISATION 6/11/21 commented out
 126++CC14 2A 46 CB     .LL110:                 ld      hl,(clipDx)
 127++CC17 3A 47 CB                             ld      a,(clipDxHigh)
 128++CC1A ED 27 80                             test    $80                         ; is it a negative X
 129++CC1D 28 06                                jr      z,.LL111                    ; If delta_x_hi is positive, jump down to LL110 to skip the following
 130++CC1F                                      ;ld      hl,(clipDx)                 ;OPTIMISATION 6/11/21 commented out
 131++CC1F                                      macronegate16hl                     ; Otherwise flip the sign of delta_y to make it  positive, starting with the low bytes
 131++CC1F AF          >					xor 	a
 131++CC20 95          >					sub 	l
 131++CC21 6F          >					ld 		l,a
 131++CC22 9F          >					sbc 	a,a
 131++CC23 94          >					sub 	h
 131++CC24 67          >					ld 		h,a
 132++CC25              .LL111:
 133++CC25 7C           .ScaleLoop:             ld      a,h                         ; At this point DX and DY are ABS values
 134++CC26 B2                                   or      d
 135++CC27 28 0A                                jr      z,.CalculateDelta
 136++CC29                                      ShiftDERight1
 136++CC29 CB 3A       >			   srl d
 136++CC2B CB 1B       >			   rr  e
 137++CC2D                                      ShiftHLRight1
 137++CC2D CB 3C       >			   srl h
 137++CC2F CB 1D       >			   rr  l
 138++CC31 18 F2                                jr      .ScaleLoop                  ; scaled down Dx and Dy to 8 bit, Dy may have been negative
 139++CC33              .CalculateDelta:
 140++CC33              ; By now, the high bytes of both |delta_x| and |delta_y| are zero We know that h and d are both = 0 as that's what we tested with a BEQ
 141++CC33 AF           .LL113:                 xor     a
 142++CC34 32 D2 7F                             ld      (varT),a                    ; t = 0
 143++CC37 7D                                   ld      a,l                         ; If delta_x_lo < delta_y_lo, so our line is more vertical than horizontal, jump to LL114
 144++CC38                                      JumpIfALTNusng  e, .LL114           ;
 144++CC38 BB          >                        cp      e
 144++CC39 DA 49 CC    >                        jp		c, .LL114
 145++CC3C              ; Here Dx >= Dy sp calculate Delta Y / delta X
 146++CC3C 32 B6 7F     .DxGTEDy:               ld      (varQ),a                    ; Set Q = delta_x_lo
 147++CC3F 57                                   ld      d,a                         ; d = also Q for calc
 148++CC40 7B                                   ld      a,e                         ; Set A = delta_y_lo
 149++CC41 CD A4 96                             call    AEquAmul256DivD; LL28Amul256DivD             ; Call LL28 to calculate:  R (actually a reg) = 256 * A / Q   = 256 * delta_y_lo / delta_x_lo
 150++CC44 32 B7 7F                             ld      (varR),a                    ;
 151++CC47 18 10                                jr      .LL116                      ; Jump to LL116, as we now have the line's gradient in R
 152++CC49              ; Here Delta Y > Delta X so calulate delta X / delta Y
 153++CC49 7B           .LL114:                 ld      a,e                         ; Set Q = delta_y_lo
 154++CC4A 57                                   ld      d,a
 155++CC4B 32 B6 7F                             ld      (varQ),a
 156++CC4E 7D                                   ld      a,l                         ; Set A = delta_x_lo
 157++CC4F CD A4 96                             call    AEquAmul256DivD; LL28Amul256DivD             ; Call LL28 to calculate: R = 256 * A / Q  = 256 * delta_x_lo / delta_y_lo
 158++CC52 32 B7 7F                             ld      (varR),a                    ;
 159++CC55 21 D2 7F                             ld      hl,varT                     ; T was set to 0 above, so this sets T = &FF
 160++CC58 35                                   dec     (hl)
 161++CC59 D1           .LL116:                 pop     de                          ; get back X2
 162++CC5A E1                                   pop     hl                          ; get back X1 into hl,
 163++CC5B 3A B7 7F                             ld      a,(varR)                    ; Store the gradient in XX12+2 this can be optimised later
 164++CC5E 32 4B CB                             ld      (clipGradient),a
 165++CC61 FD 6F                                ld      iyl,a
 166++CC63 3A B8 7F                             ld      a,(varS)
 167++CC66 32 4C CB                             ld      (clipDxySign),a             ;  Store the type of slope in XX12+3, bit 7 clear means ?Not needed as clipDxySign is used for varS earlier?
 168++CC69                                                                          ; top left to bottom right, bit 7 set means top right to bottom left **CODE IS WRONG HERE A TEST IS BL to TR
 169++CC69 FD 7C                                ld      a,iyh                       ; iyh was XX13 from earlier
 170++CC6B FE 00                                cp      0                           ; If XX13 = 0, skip the following instruction
 171++CC6D 28 05                                jr      z,.LL138                    ;
 172++CC6F ED 27 80                             test    $80                         ; If XX13 is positive, it must be 95. This means (x1, y1) is on-screen but (x2, y2) isn't, so we jump to LLX117 to swap the (x1, y1) and (x2, y2)
 173++CC72 28 13                                jr      z,.LLX117                   ; coordinates around before doing the actual clipping, because we need to clip (x2, y2) but the clipping routine at LL118 only clips (x1, y1)
 174++CC74              ; If we get here, XX13 = 0 or 191, so (x1, y1) is off-screen and needs clipping
 175++CC74 CD 9B CC     .LL138                  call    ClipPointHLBC               ; Call LL118 to move (x1, y1) along the line onto the screen, i.e. clip the line at the (x1, y1) end
 176++CC77 FD 7C                                ld      a,iyh                       ; If XX13 = 0, i.e. (x2, y2) is on-screen, jump down to LL124 to return with a successfully clipped line
 177++CC79 ED 27 80                             test    $80
 178++CC7C 28 1A                                jr      z,.LL124
 179++CC7E              ; If we get here, XX13 = 191 (both coordinates are off-screen)
 180++CC7E 7C           .LL117:                 ld      a,h                         ; If either of x1_hi or y1_hi are non-zero, jump to
 181++CC7F B0                                   or      b                           ; LL137 to return from the subroutine with the C flag
 182++CC80 C2 A1 CB                             jp      nz, .PointsOutofBounds      ; set, as the line doesn't fit on-screen
 183++CC83 B1                                   or      c                           ; if x1 and y1 hi are both zero test bit 8 or Y1 to see if its > 128
 184++CC84 FA A1 CB                             jp      m, .PointsOutofBounds       ; set, as the line doesn't fit on-screen
 185++CC87              ; If we get here, XX13 = 95 or 191, and in both cases (x2, y2) is off-screen, so we now need to swap the (x1, y1) and (x2, y2) coordinates around before doing
 186++CC87              ; the actual clipping, because we need to clip (x2, y2) but the clipping routine at LL118 only clips (x1, y1)
 187++CC87 EB           .LLX117:                ex      de,hl                       ;  swap X1 and X2
 188++CC88 DD E5                                push    ix                          ;  swap Y1 and Y2
 189++CC8A C5                                   push    bc
 190++CC8B DD E1                                pop     ix
 191++CC8D C1                                   pop     bc
 192++CC8E CD 9B CC                             call    ClipPointHLBC               ;  Call LL118 to move (x1, y1) along the line onto the screen, i.e. clip the line at the (x1, y1) end
 193++CC91 3A 4F CB                             ld      a,(SWAP)
 194++CC94 3D                                   dec     a
 195++CC95 32 4F CB                             ld      (SWAP),a                    ; Set SWAP = &FF to indicate that we just clipped the line at the (x2, y2) end by swapping the coordinates (the DEC does this as we set SWAP to 0 at the start of this subroutine)
 196++CC98 C3 8E CB     .LL124:                 jp      .ClipDone                    ; now put points in place
 197++CC9B              ; Move a point along a line until it is on-screen point is held in HL(X) BC(Y) LL118
 198++CC9B              ; iyh still holds XX13 iyl still holds gradient
 199++CC9B 7C           ClipPointHLBC:          ld      a,h                         ; If x1_hi is positive, jump down to LL119 to skip the following
 200++CC9C ED 27 80                             test    $80
 201++CC9F 28 17                                jr      z,.LL119
 202++CCA1 32 B8 7F     .X1isNegative:          ld      (varS),a                    ;  Otherwise x1_hi is negative, i.e. off the left of the screen, so set S = x1_hi
 203++CCA4 E5 D5 C5                             push    hl,,de,,bc
 204++CCA7 CD 1D CD                             call    LL120                       ;  Call LL120 to calculate:   (Y X) = (S x1_lo) * XX12+2      if T = 0   = x1 * gradient
 205++CCAA                                                                          ;                             (Y X) = (S x1_lo) / XX12+2      if T <> 0  = x1 / gradient
 206++CCAA                                                                          ;  with the sign of (Y X) set to the opposite of the line's direction of slope
 207++CCAA C1 D1 E1                             pop    hl,,de,,bc                   ;  get coordinates back
 208++CCAD 2A 50 CB                             ld      hl,(varYX)
 209++CCB0 09                                   add     hl,bc                       ; y1 = y1 + varYX
 210++CCB1 44 4D                                ld      bc,hl
 211++CCB3 21 00 00                             ld      hl,0                        ; Set x1 = 0
 212++CCB6 18 1A                                jr      .LL134                      ; in BBC is set x to 0 to force jump, we will just jump
 213++CCB8 FE 00        .LL119:                 cp      0
 214++CCBA 28 16                                jr      z,.LL134                    ;  If x1_hi = 0 then jump down to LL134 to skip the following, as the x-coordinate is already on-screen (as 0 <= (x_hi x_lo) <= 255)
 215++CCBC 3D                                   dec     a
 216++CCBD 32 B8 7F                             ld      (varS),a                    ;  Otherwise x1_hi is positive, i.e. x1 >= 256 and off the right side of the screen, so set S = x1_hi - 1
 217++CCC0 E5 D5 C5                             push    hl,,de,,bc
 218++CCC3 CD 1D CD                             call    LL120                      ;  Call LL120 to calculate: (Y X) = (S x1_lo) * XX12+2      if T = 0  = (x1 - 256) * gradient
 219++CCC6                                                                          ;                           (Y X) = (S x1_lo) / XX12+2      if T <> 0 = (x1 - 256) / gradient
 220++CCC6                                                                          ;  with the sign of (Y X) set to the opposite of theline's direction of slope
 221++CCC6 C1 D1 E1                             pop     hl,,de,,bc
 222++CCC9 2A 50 CB                             ld      hl,(varYX)
 223++CCCC 09                                   add     hl,bc                        ;OPTIMISATION 6/11/21 simplfied post debug
 224++CCCD 44 4D                                ld      bc,hl                        ;OPTIMISATION 6/11/21 simplfied post debug
 225++CCCF 21 FF 00                             ld      hl,255                      ; Set x1 = 255
 226++CCD2              ; We have moved the point so the x-coordinate is on screen (i.e. in the range 0-255), so now for they-coordinate
 227++CCD2 78           .LL134:                 ld      a,b                         ; If y1_hi is positive, jump down to LL135  to skip the following
 228++CCD3 ED 27 80                             test    $80                         ;
 229++CCD6 28 1A                                jr      z,.LL135                    ;
 230++CCD8 32 B8 7F                             ld      (varS),a                    ; Otherwise y1_hi is negative, i.e. off the top of the screen, so set S = y1_hi
 231++CCDB 79                                   ld      a,c                         ; Set R = y1_lo
 232++CCDC 32 B7 7F                             ld      (varR),a                    ;
 233++CCDF E5 D5 C5                             push    hl,,de,,bc
 234++CCE2 CD 7E CD                             call    LL123                       ;  Call LL123 to calculate: (Y X) = (S R) / XX12+2      if T = 0  = y1 / gradient
 235++CCE5                                                                          ;                           (Y X) = (S R) * XX12+2      if T <> 0 = y1 * gradient
 236++CCE5                                                                          ;  with the sign of (Y X) set to the opposite of the line's direction of slope
 237++CCE5 C1 D1 E1                             pop     hl,,de,,bc
 238++CCE8 D5                                   push    de
 239++CCE9 EB                                   ex      hl,de                       ; de = x1
 240++CCEA 2A 50 CB                             ld      hl,(varYX)                  ; hl = varYX
 241++CCED 19                                   add     hl,de                       ; we don't need to swap back as its an add, Set x1 = x1 + (Y X)
 242++CCEE D1                                   pop     de                          ; de = x2 again
 243++CCEF 01 00 00                             ld      bc,0                        ; Set y1 = 0
 244++CCF2 79           .LL135:                 ld      a,c                         ; if bc < 128 then no work to do
 245++CCF3 E6 80                                and     $80
 246++CCF5 B0                                   or      b                           ; here we see if c bit 8 is set or anything in b as we know if its 0 this would mean there is no need to clip
 247++CCF6 C8                                   ret     z
 248++CCF7 E5                                   push    hl
 249++CCF8 60 69                                ld      hl,bc
 250++CCFA 01 80 00                             ld      bc,128
 251++CCFD B7                                   or      a
 252++CCFE ED 42                                sbc     hl,bc                       ; hl =  (S R) = (y1_hi y1_lo) - 128
 253++CD00 22 B7 7F                             ld      (varRS), hl                 ; and now RS (or SR)
 254++CD03 7C                                   ld      a,h
 255++CD04 E1                                   pop     hl
 256++CD05 ED 27 80                             test    $80                         ; If the subtraction underflowed, i.e. if y1 < 192, then y1 is already on-screen, so jump to LL136 to return from the subroutine, as we are done
 257++CD08 C0                                   ret     nz
 258++CD09              ; If we get here then y1 >= 192, i.e. off the bottom of the screen
 259++CD09 E5 D5 C5     .LL139:                 push    hl,,de,,bc
 260++CD0C CD 7E CD                             call    LL123                       ;  Call LL123 to calculate: (Y X) = (S R) / XX12+2      if T = 0  = y1 / gradient
 261++CD0F                                                                          ;                           (Y X) = (S R) * XX12+2      if T <> 0 = y1 * gradient
 262++CD0F                                                                          ;  with the sign of (Y X) set to the opposite of the line's direction of slope
 263++CD0F C1 D1 E1                             pop     hl,,de,,bc
 264++CD12 D5                                   push    de
 265++CD13 EB                                   ex      hl,de
 266++CD14 2A 50 CB                             ld      hl,(varYX)
 267++CD17 19                                   add     hl,de                       ; we don't need to swap back as its an add, Set x1 = x1 + (Y X)
 268++CD18 01 7F 00                             ld      bc,127                      ; set bc to 127 bottom of screen
 269++CD1B D1                                   pop     de
 270++CD1C C9           .LL136:                 ret                                 ;  Return from the subroutine
 271++CD1D                      ENDIF
 272++CD1D
 273++CD1D              ; Calculate the following:   * If T = 0  (more vertical than horizontal), (Y X) = (S x1_lo) * XX12+2
 274++CD1D              ;                            * If T <> 0 (more horizontal than vertical), (Y X) = (S x1_lo) / XX12+2
 275++CD1D              ;                              giving (Y X) the opposite sign to the slope direction in XX12+3.
 276++CD1D              ; Other entry points        LL122                Calculate (Y X) = (S R) * Q and set the sign to the opposite of the top byte on the stack
 277++CD1D 7D           LL120:                  ld      a,l                          ; Set R = x1_lo
 278++CD1E 32 B7 7F                             ld      (varR),a
 279++CD21 CD DB CD                             call    LL129                        ;  Call LL129 to do the following:  Q = XX12+2   = line gradient  A = S EOR XX12+3 = S EOR slope direction (S R) = |S R| So A contains the sign of S * slope direction
 280++CD24 F5                                   push    af                           ;  Store A on the stack so we can use it later
 281++CD25 C5                                   push    bc
 282++CD26 47                                   ld      b,a
 283++CD27 3A D2 7F                             ld      a,(varT)                     ; instead : (Y X) = (S R ) / Q
 284++CD2A FE 00                                cp      0
 285++CD2C 78                                   ld      a,b
 286++CD2D C1                                   pop     bc                           ; we can't use af as that would disrupt the flags
 287++CD2E C2 45 CD                             jp      nz, .LL121
 288++CD31              ; The following calculates:  (Y X) = (S R) * Q using the same shift-and-add algorithm that's documented in MULT1
 289++CD31 3A 4B CB     .LL122:                  ld      a,(clipGradient)
 290++CD34 32 B6 7F                             ld      (varQ),a; optimise
 291++CD37 CD 8C 91                             call    HLequSRmulQdiv256
 292++CD3A 22 50 CB                             ld      (varYX),hl
 293++CD3D F1                                   pop     af
 294++CD3E ED 27 80                             test    $80
 295++CD41 CA 71 CD                             jp      z,.LL133
 296++CD44 C9                                   ret
 297++CD45 11 FE FF     .LL121:                  ld      de,$FFFE                    ; set XY to &FFFE at start, de holds XY
 298++CD48 2A B7 7F                             ld      hl,(varRS)                  ; hl = RS
 299++CD4B 3A B6 7F                             ld      a,(varQ)
 300++CD4E 47                                   ld      b,a                         ; b = q
 301++CD4F              .LL130:                 ShiftHLLeft1                        ; RS *= 2
 301++CD4F CB 25       >			   sla l
 301++CD51 CB 14       >			   rl  h
 302++CD53 7C                                   ld      a,h
 303++CD54 38 04                                jr      c,.LL131                    ; if S overflowed skip Q test and do subtractions
 304++CD56                                      JumpIfALTNusng b, .LL132            ; if S <  Q = 256/gradient skip subtractions
 304++CD56 B8          >                        cp      b
 304++CD57 DA 62 CD    >                        jp		c, .LL132
 305++CD5A 3F           .LL131:                 ccf                                 ; compliment carry
 306++CD5B 98                                   sbc     a,b                         ; q
 307++CD5C 67                                   ld      h,a                         ; h (s)
 308++CD5D 7D                                   ld      a,l                         ; r
 309++CD5E DE 00                                sbc     a,0                         ; 0 - so in effect SR - Q*256
 310++CD60 37                                   scf                                 ; set carry for next rolls
 311++CD61 3F                                   ccf
 312++CD62              .LL132:                 RollDELeft1                         ; Rotate de bits left
 312++CD62 CB 13       >               rl  e
 312++CD64 CB 12       >               rl  d
 313++CD66 38 E7                                jr      c,.LL130                    ;
 314++CD68 ED 53 50 CB                          ld      (varYX),de
 315++CD6C F1                                   pop     af              ; get back sign
 316++CD6D ED 27 80                             test    $80
 317++CD70 C8                                   ret     z               ; if negative then return with value as is reversed sign
 318++CD71 2A 50 CB     .LL133:                 ld      hl,(varYX)      ; may not actually need this?
 319++CD74                                      NegHL
 319++CD74 AF          >                    xor a
 319++CD75 95          >                    sub l
 319++CD76 6F          >                    ld l,a
 319++CD77 9F          >                    sbc a,a
 319++CD78 94          >                    sub h
 319++CD79 67          >                    ld h,a
 320++CD7A 22 50 CB                             ld      (varYX),hl
 321++CD7D C9           .LL128:                 ret
 322++CD7E
 323++CD7E
 324++CD7E
 325++CD7E
 326++CD7E              ; Calculate the following: * If T = 0,  calculate (Y X) = (S R) / XX12+2 (actually SR & XX12+2 /256)
 327++CD7E              ;                          * If T <> 0, calculate (Y X) = (S R) * XX12+2
 328++CD7E              ;                          giving (Y X) the opposite sign to the slope direction in XX12+3.
 329++CD7E              ;
 330++CD7E              ; Other entry points:      LL121                Calculate (Y X) = (S R) / Q and set the sign to the opposite of the top byte on the stack
 331++CD7E              ;                          LL133                Negate (Y X) and return from the subroutine
 332++CD7E              ;                          LL128                Contains an RTS
 333++CD7E CD DB CD     LL123:                  call    LL129                       ; Call LL129 to do the following: Q = XX12+2   = line gradient  A = S EOR XX12+3 = S EOR slope direction (S R) = |S R| So A contains the sign of S * slope direction
 334++CD81 F5                                   push    af                          ; Store A on the stack so we can use it later
 335++CD82 C5                                   push    bc                          ; If T is non-zero, so it's more horizontal than vertical, jump down to LL121 to calculate this
 336++CD83 47                                   ld      b,a
 337++CD84 3A D2 7F                             ld      a,(varT)                    ; instead : (Y X) = (S R) * Q *** this looks to be the wrong way roudn for Y!!!!
 338++CD87 FE 00                                cp      0
 339++CD89 78                                   ld      a,b
 340++CD8A C1                                   pop     bc
 341++CD8B C2 C7 CD                             jp      nz, .LL122
 342++CD8E              ; The following calculates: (Y X) = (S R) / Q using the same shift-and-subtract algorithm that's documented in TIS2, its actually X.Y=R.S*256/Q
 343++CD8E 11 FE FF     .LL121:                 ld      de,$FFFE                    ; set XY to &FFFE at start, de holds XY
 344++CD91 2A B7 7F                             ld      hl,(varRS)                  ; hl = RS
 345++CD94 3A B6 7F                             ld      a,(varQ)
 346++CD97 47                                   ld      b,a                         ; b = q
 347++CD98              .LL130:                 ShiftHLLeft1                        ; RS *= 2
 347++CD98 CB 25       >			   sla l
 347++CD9A CB 14       >			   rl  h
 348++CD9C 7C                                   ld      a,h
 349++CD9D 38 04                                jr      c,.LL131                    ; if S overflowed skip Q test and do subtractions
 350++CD9F                                      JumpIfALTNusng b, .LL132            ; if S <  Q = 256/gradient skip subtractions
 350++CD9F B8          >                        cp      b
 350++CDA0 DA AB CD    >                        jp		c, .LL132
 351++CDA3 3F           .LL131:                 ccf                                 ; compliment carry
 352++CDA4 98                                   sbc     a,b                         ; q
 353++CDA5 67                                   ld      h,a                         ; h (s)
 354++CDA6 7D                                   ld      a,l                         ; r
 355++CDA7 DE 00                                sbc     a,0                         ; 0 - so in effect SR - Q*256
 356++CDA9 37                                   scf                                 ; set carry for next rolls
 357++CDAA 3F                                   ccf
 358++CDAB              .LL132:                 RollDELeft1                         ; Rotate de bits left
 358++CDAB CB 13       >               rl  e
 358++CDAD CB 12       >               rl  d
 359++CDAF 38 E7                                jr      c,.LL130                    ;
 360++CDB1 ED 53 50 CB                          ld      (varYX),de
 361++CDB5 F1                                   pop     af              ; get back sign
 362++CDB6 ED 27 80                             test    $80
 363++CDB9 C8                                   ret     z               ; if negative then return with value as is reversed sign
 364++CDBA 2A 50 CB     .LL133:                 ld      hl,(varYX)      ; may not actually need this?
 365++CDBD                                      NegHL
 365++CDBD AF          >                    xor a
 365++CDBE 95          >                    sub l
 365++CDBF 6F          >                    ld l,a
 365++CDC0 9F          >                    sbc a,a
 365++CDC1 94          >                    sub h
 365++CDC2 67          >                    ld h,a
 366++CDC3 22 50 CB                             ld      (varYX),hl
 367++CDC6 C9           .LL128:                 ret
 368++CDC7              ; The following calculates:  (Y X) = (S R) * Q using the same shift-and-add algorithm that's documented in MULT1
 369++CDC7 3A 4B CB     .LL122:                 ld      a,(clipGradient)
 370++CDCA 32 B6 7F                             ld      (varQ),a; optimise
 371++CDCD CD 8C 91                             call    HLequSRmulQdiv256
 372++CDD0 22 50 CB                             ld      (varYX),hl
 373++CDD3 F1                                   pop     af
 374++CDD4 ED 27 80                             test    $80
 375++CDD7 CA BA CD                             jp      z,.LL133
 376++CDDA C9                                   ret
 377++CDDB
 378++CDDB              ; Do the following, in this order:  Q = XX12+2
 379++CDDB              ;                                   A = S EOR XX12+3
 380++CDDB              ;                                   (S R) = |S R|
 381++CDDB              ; This sets up the variables required above to calculate (S R) / XX12+2 and give the result the opposite sign to XX13+3.
 382++CDDB 3A 4B CB     LL129:                  ld      a,(clipGradient)
 383++CDDE 32 B6 7F                             ld      (varQ),a                    ; Set Q = XX12+2
 384++CDE1 3A B8 7F                             ld      a,(varS)                    ; If S is positive, jump to LL127
 385++CDE4 E5 F5                                push    hl,,af                      ; else
 386++CDE6 ED 27 80                             test    $80                         ;   if bit 7 is clear
 387++CDE9 28 0C                                jr      z,.LL127                    ;      RS = ABS RS
 388++CDEB 2A B7 7F                             ld      hl,(varRS)                  ;      .
 389++CDEE                                      NegHL                               ;      .
 389++CDEE AF          >                    xor a
 389++CDEF 95          >                    sub l
 389++CDF0 6F          >                    ld l,a
 389++CDF1 9F          >                    sbc a,a
 389++CDF2 94          >                    sub h
 389++CDF3 67          >                    ld h,a
 390++CDF4 22 B7 7F                             ld      (varRS),hl                  ;      .
 391++CDF7 21 4C CB     .LL127:                 ld      hl,clipDxySign              ;   hl = dxy sign
 392++CDFA F1                                   pop     af                          ;
 393++CDFB AE                                   xor     (hl)                        ; a = S XOR clipDxySign
 394++CDFC E1                                   pop     hl
 395++CDFD C9                                   ret
 396++CDFE
 397++CDFE              ;--------------------------------------------------------------------------------------
 398++CDFE              ; Thow away out of bounds by more than 250
 399++CDFE              ClipLineV3:             ;break
 400++CDFE                      IFDEF       CLIPVersion3
 401++CDFE ~            ;My logic version
 402++CDFE ~            .CheckYorder:
 403++CDFE ~                                    ld      hl,(UbnkPreClipY1)
 404++CDFE ~                                    ld      de,(UbnkPreClipY2)
 405++CDFE ~                                    call    CompareHLDESgn
 406++CDFE ~                                    jr      c,.LineP1toP2                          ; if Y1 < Y2 then we can use the points as is else we have to swap
 407++CDFE ~            .LineP2toP1:            ld      bc,(UbnkPreClipY2)                      ; fetch and write out in reverse
 408++CDFE ~                                    ld      ix,(UbnkPreClipY1)
 409++CDFE ~                                    ld      de,(UbnkPreClipX1)
 410++CDFE ~                                    ld      hl,(UbnkPreClipX2)
 411++CDFE ~                                    ld      (UbnkPreClipY1),bc                      ; bc - XX15(2,3) Y1
 412++CDFE ~                                    ld      (UbnkPreClipY2),ix                      ; ix - XX12(0,1) Y2
 413++CDFE ~                                    ld      (UbnkPreClipX1),hl                      ; hl - XX15(0,1) X1
 414++CDFE ~                                    ld      (UbnkPreClipX2),de                      ;  de - XX15(4,5) X2
 415++CDFE ~                                    jp      .CheckNoClip
 416++CDFE ~            .LineP1toP2             ld      bc,(UbnkPreClipY1)                      ; bc - XX15(2,3) Y1
 417++CDFE ~                                    ld      ix,(UbnkPreClipY2)                      ; ix - XX12(0,1) Y2
 418++CDFE ~                                    ld      hl,(UbnkPreClipX1)                      ; hl - XX15(0,1) X1
 419++CDFE ~                                    ld      de,(UbnkPreClipX2)                      ; de - XX15(4,5) X2
 420++CDFE ~            .CheckNoClip:           ld      a,b
 421++CDFE ~                                    or      d
 422++CDFE ~                                    or      h
 423++CDFE ~                                    or      ixh
 424++CDFE ~                                    jp      nz,.CheckXOffScreen                 ; if both Y1 and y2 have bit 7 set
 425++CDFE ~                                    ld      a,c                                 ; then we clip
 426++CDFE ~                                    and     ixl
 427++CDFE ~                                    test    $80
 428++CDFE ~                                    jp      z, .ClipComplete
 429++CDFE ~            ;if either x1hi x2hi are 0 then we clip. if both <> 0and both same sign exit
 430++CDFE ~            .CheckXOffScreen:       ld      a,h
 431++CDFE ~                                    xor     d
 432++CDFE ~                                    test    $80                                 ; non descructive test of bit 7 is set
 433++CDFE ~                                    jp      nz,.X1X2OppositeSign                ; if bit 7 was set then x1 and x2 must be opposite signs so its on screen
 434++CDFE ~            .X1X2SameSigns:         ld      a,h                                 ; so to get there h and d must be the same sign
 435++CDFE ~                                    test    $80                                 ; if they are the same sign and at x1 is negative then x2 must be negative so off screen
 436++CDFE ~                                    JumpIfAIsZero .X1X2CheckIfBothRight
 437++CDFE ~            .X1X2BothNegative:      SetCarryFlag                                ; to get to here x1 and x2 must be high and off the same sign so its not to draw
 438++CDFE ~                                    ret
 439++CDFE ~            .X1X2CheckIfBothRight:  and     a                                   ; we have h in a already
 440++CDFE ~                                    jr      z,.X1OnScreen
 441++CDFE ~                                    ld      a,d
 442++CDFE ~                                    and     a
 443++CDFE ~                                    jr      z,.X2OnScreen
 444++CDFE ~            .X1X2OffRightSide:      SetCarryFlag                                ; to get to here x1 and x2 must be high and off the same sign so its not to draw
 445++CDFE ~                                    ret
 446++CDFE ~            ;                       to get to here x1 and x2 either span -ve to +ve or from on screen to off screen
 447++CDFE ~            .X1OnScreen:
 448++CDFE ~            .X2OnScreen:
 449++CDFE ~            .X1X2OppositeSign:
 450++CDFE ~            ;                       Now check to see if Y is off screen
 451++CDFE ~            .CheckYOffScreen:       ld      a,b                                     ; Check if y1 and y2 are opposite signs, fi so it spans screen so we are good
 452++CDFE ~            .CheckBothYNegative:    xor     ixh
 453++CDFE ~                                    test    $80                                     ; if bit 7 is set then opposite signs
 454++CDFE ~                                    jp      nz,.Y1Y2OppositeSign                    ; if y1 and y2 are opposite signs its on screen and spans at least one side
 455++CDFE ~            .Y1Y2SameSign:          ld      a,b                                     ; if they are the same sign then if one is negative, so is the other so off screen
 456++CDFE ~                                    test    $80
 457++CDFE ~                                    jp      z,.Y1Y2Positive
 458++CDFE ~            .Y1Y2Negative:          SetCarryFlag
 459++CDFE ~                                    ret
 460++CDFE ~            .Y1Y2Positive:          ld      a,c                                     ; if its the same sign y1 or y2 could be 0 and if they are
 461++CDFE ~                                    and     $80                                     ; this will test to see if b >0 or c > 127
 462++CDFE ~                                    or      b                                       ;
 463++CDFE ~                                    jp      z,.Y1OnScreen
 464++CDFE ~                                    ld      a,ixl
 465++CDFE ~                                    and     $80
 466++CDFE ~                                    or      ixh
 467++CDFE ~                                    jp      z,.Y2OnScreen
 468++CDFE ~            .Y1Y2OffBottomSide:     SetCarryFlag
 469++CDFE ~                                    ret
 470++CDFE ~            .Y1OnScreen:
 471++CDFE ~            .Y2OnScreen:
 472++CDFE ~            .Y1Y2OppositeSign:
 473++CDFE ~            .StartProcessing:       ld      hl,(UbnkPreClipX1)                      ; Now we can test and Clip
 474++CDFE ~                                    ld      de,(UbnkPreClipX2)                      ; de - XX15(4,5)
 475++CDFE ~                                    ld      iyh,0                                   ; set iyh flags to 0
 476++CDFE ~            ; if x1hi or y1 high <> 0 or y1 > 127 then set bit 1 of clipcoord       ; we can optimise this later
 477++CDFE ~                                    ld      a,h
 478++CDFE ~                                    or      b
 479++CDFE ~                                    jr      z,.CheckP1Ylo
 480++CDFE ~            ;                       iyh     bit 0 - P1 Needs Clipping
 481++CDFE ~            ;                               bit 1 - P2 Needs Clipping
 482++CDFE ~            ;                               bit 2 - x1 >= x2 (left to right)
 483++CDFE ~            ;                               bit 3 - y1 >= y2 (top to bottom)
 484++CDFE ~            ;                               bit 4 -  DY/DX (steep)
 485++CDFE ~            .P1OffScreen:           ld      iyh,1                                   ; if either p1 x or y was off screen set bit 0 to 1
 486++CDFE ~                                    jp      .CheckP2OffScreen                       ; .
 487++CDFE ~            .CheckP1Ylo:            ld      a,c                                     ; .
 488++CDFE ~                                    and     $80                                     ; .
 489++CDFE ~                                    jr      z,.CheckP2OffScreen                     ; .
 490++CDFE ~                                    ld      iyh,1                                   ; .
 491++CDFE ~            .CheckP2OffScreen:      ld      a,d                                     ; if x2hi or y2 off screen then set bit 2 of clipcoord to 1
 492++CDFE ~                                    or      ixh                                     ; .
 493++CDFE ~                                    jr      z,.CheckP2Ylo                           ; .
 494++CDFE ~            .P2OffScreen:           ld      a,iyh                                   ; .
 495++CDFE ~                                    or      2                                       ; .
 496++CDFE ~                                    ld      iyh,a                                   ; .
 497++CDFE ~                                    jp      .CheckXDirection                        ; .
 498++CDFE ~            .CheckP2Ylo:            ld      a,ixl                                   ; .
 499++CDFE ~                                    and     $80                                     ; .
 500++CDFE ~                                    jr      z,.CheckXDirection                      ; .
 501++CDFE ~                                    ld      a,iyh                                   ; .
 502++CDFE ~                                    or      2                                       ; .
 503++CDFE ~                                    ld      iyh,a                                   ; .
 504++CDFE ~            .CheckXDirection:       push    de,,hl
 505++CDFE ~                                    call    CompareHLDESgn                          ; IF HL equals DE, Z=1,C=0, IF HL is less than DE, Z=0,C=1, IF HL is more than DE, Z=0,C=0
 506++CDFE ~                                    pop     de,,hl
 507++CDFE ~                                    jp      c,.CalculateDx                          ;
 508++CDFE ~            .X1gteX2:               ld      a,iyh                                   ; if x1 >= x2 then set bit 3 to denote -ve x direction, note we will eliminate horziontal / vertical early as an optimisation
 509++CDFE ~                                    or      4                                       ; .
 510++CDFE ~                                    ld      iyh,a                                   ; .
 511++CDFE ~                                    ; Y Direction is now always top to bottom
 512++CDFE ~            .CalculateDx:           ClearCarryFlag                                  ;                       calculate DX
 513++CDFE ~                                    sbc     hl,de                                   ; .
 514++CDFE ~            .ABSDX:                 ld      a,h                                     ; HL = | HL - DE |
 515++CDFE ~                                    test    $80                                     ; .
 516++CDFE ~                                    jr      z,.DXPositive                           ; .
 517++CDFE ~                                    macronegate16hl                                 ; .
 518++CDFE ~            .DXPositive:            ex      de,hl                                   ; de = abs delta x
 519++CDFE ~            .CalculateDy:           ClearCarryFlag                                  ; hl = Y2 -Y1 as its pre sorted its always positive if on screen
 520++CDFE ~                                    ld      hl,ix                                   ; iy = hl = Y2 - Y1
 521++CDFE ~                                    sbc     hl,bc                                   ; .
 522++CDFE ~            .DYPositive:            ; Scale DX and DY to 8 bit, by here hl = abs dy, de = abs dx
 523++CDFE ~            ;calculate DY
 524++CDFE ~            .ScaleLoop:             ld      a,h                                     ; At this point DX and DY are ABS values
 525++CDFE ~                                    or      d                                       ; .
 526++CDFE ~                                    jr      z,.ScaleDone                            ; .
 527++CDFE ~                                    ShiftDERight1                                   ; .
 528++CDFE ~                                    ShiftHLRight1                                   ; .
 529++CDFE ~                                    jr      .ScaleLoop                              ; scaled down Dx and Dy to 8 bit, Dy may have been;;                                                                                               negative
 530++CDFE ~            .ScaleDone:             ; hl = ABS DY, DE = ABS DX,  bc = Y1, ix = Y2,   note H and D will be zero
 531++CDFE ~            ; if Dx = 0 then horizontal line and clip X1 & X2 only then exit
 532++CDFE ~            ; if Dy = 0 then vertical line and clip Y1 & Y2 only then exit
 533++CDFE ~
 534++CDFE ~            ; if DX < DY  gradient = 256 * delta_x_lo / delta_y_lo
 535++CDFE ~            ;        else gradient = 256 * delta_y_lo / delta_x_lo, set bit 5 of clipcord
 536++CDFE ~            .CalculateDelta:        ld      a,e                                     ; if DX < DY goto DX/DY
 537++CDFE ~                                    JumpIfALTNusng l,.DXdivDY                       ; else do DY/DX
 538++CDFE ~            .DYdivDX:               ld      a,l                                     ;    A = DY
 539++CDFE ~                                    ld      d,e                                     ;    D = DX
 540++CDFE ~                                    call    AEquAmul256DivD                         ;    A = R = 256 * DY / DX
 541++CDFE ~            .SaveGradientDYDX:      ld      (Gradient),a
 542++CDFE ~                                    ld      a,iyh                                   ;    bit 5 of iyh denotes that its a DX/DY (steep), if its clear its DY/DX (shallow)
 543++CDFE ~                                    or      16                                      ;    .
 544++CDFE ~                                    ld      iyh,a                                   ;    .
 545++CDFE ~                                    jp      .ClipP1                                 ;    .
 546++CDFE ~            .DXdivDY:               ld      a,e                                     ;    A = DX
 547++CDFE ~                                    ld      d,l                                     ;    D = DY
 548++CDFE ~                                    call    AEquAmul256DivD                         ;    A = R = 256 * DX / DY
 549++CDFE ~            .SaveGradientDXDY:      ld      (Gradient),a
 550++CDFE ~            ; if bit 1 of clipccord is set call    LL118
 551++CDFE ~            .ClipP1:                ld      a,iyh                                   ; if bit 1 is clear to say no need to clip pont 1 we just jump to point 2
 552++CDFE ~                                    test    1                                       ; .
 553++CDFE ~                                    jp      z,.ClipP2                               ; .
 554++CDFE ~                                    call    LL118v3                                 ; else clip P1 first
 555++CDFE ~                                    ld      a,b                                     ;      and if b or h have a value its failed to totally clip  as it may be only in bounds on just x or y
 556++CDFE ~                                    or      h                                       ;      .
 557++CDFE ~                                    jr      z, .P1Ygt127Check                       ;      .
 558++CDFE ~            .P1HighOutofBounds:     SetCarryFlag                                    ;      .
 559++CDFE ~                                    ret                                             ;      .
 560++CDFE ~            .P1Ygt127Check:         ld      a,c                                     ;      or if y > 127 its failed to totally clip
 561++CDFE ~                                    test    $80                                     ;      .
 562++CDFE ~                                    SetCarryFlag                                    ;      .
 563++CDFE ~                                    ret     nz                                      ;      .
 564++CDFE ~                                    ld      (UbnkPreClipY1), bc                     ;      else its valid and clipped point 1 so save ti back
 565++CDFE ~                                    ld      (UbnkPreClipX1), hl
 566++CDFE ~            ; if bit 2 of clipcoord is set
 567++CDFE ~            ;        swap x1y1 with x2y2
 568++CDFE ~            ;        call    LL118
 569++CDFE ~            .ClipP2:                ld      a,iyh                                   ; so now repeat all that for point 2
 570++CDFE ~                                    and     2
 571++CDFE ~                                    jp      z,.ClipComplete
 572++CDFE ~                                    call    LL118v3PreSwap                          ; now clip p2
 573++CDFE ~                                    ld      a,b                                     ; if either high is set then it failed to properly clip
 574++CDFE ~                                    or      h                                       ; .
 575++CDFE ~                                    jr      z, .P2Ygt127Check                       ; .
 576++CDFE ~            .P2HighOutofBounds:     SetCarryFlag                                    ; .
 577++CDFE ~                                    ret                                             ; .
 578++CDFE ~            .P2Ygt127Check:         ld      a,c                                     ; if c > 127 then it also failed to clip
 579++CDFE ~                                    test    $80                                     ; .
 580++CDFE ~                                    SetCarryFlag                                    ; .
 581++CDFE ~                                    ret     nz                                      ; .
 582++CDFE ~                                    ld      (UbnkPreClipY2), bc                     ; bc - XX15(2,3);;
 583++CDFE ~                                    ld      (UbnkPreClipX2), hl
 584++CDFE ~            ;clip compelte exit
 585++CDFE ~            .ClipComplete:          ld      bc,(UbnkPreClipY1)                      ; bc - XX15(2,3);;
 586++CDFE ~                                    ld      hl,(UbnkPreClipX1)
 587++CDFE ~                                    ld      ix,(UbnkPreClipY2)                      ; bc - XX15(2,3);;
 588++CDFE ~                                    ld      de,(UbnkPreClipX2)
 589++CDFE ~            .SaveClippedLine:       ld      a,c                                     ; Y1 = y1 lo, x2 = x2 lo, x1 = x1 lo y1 = y1 lo                                   -- Nothing off screen
 590++CDFE ~                                    ld      (UBnkNewY1),a
 591++CDFE ~                                    ld      a,ixl
 592++CDFE ~                                    ld      (UBnkNewY2),a
 593++CDFE ~                                    ld      a,l
 594++CDFE ~                                    ld      (UBnkNewX1),a
 595++CDFE ~                                    ld      a,e
 596++CDFE ~                                    ld      (UBnkNewX2),a
 597++CDFE ~                                    ClearCarryFlag                              ; we have a success so not carry
 598++CDFE ~                                    ret
 599++CDFE ~            ;-----------------------------------------------------------------------------------------------------------------------------------
 600++CDFE ~            LL118v3PreSwap:         ld      bc,(UbnkPreClipY2)                  ; bc - XX15(2,3);;
 601++CDFE ~                                    ld      hl,(UbnkPreClipX2)
 602++CDFE ~                                    jp      LL118v3Fetched
 603++CDFE ~            ;-----------------------------------------------------------------------------------------------------------------------------------
 604++CDFE ~            LL118v3:                ld      bc,(UbnkPreClipY1)                  ; bc - XX15(2,3);;
 605++CDFE ~                                    ld      hl,(UbnkPreClipX1)
 606++CDFE ~            ;-----------------------------------------------------------------------------------------------------------------------------------
 607++CDFE ~            LL118v3Fetched:
 608++CDFE ~            ;                       At this point bc = y position, hl = x position both 16 bit
 609++CDFE ~            ;                       if x < 0 then x = 0
 610++CDFE ~            ;                                     adjust = -x */ gradient depending on if its steep or shallow
 611++CDFE ~            ;                                     y = y +- adjust depending on if we are going +ve direction or negative direction  (or simplify it, that it will always be + for x1y1 and - for x2y2 as we pre-sort)
 612++CDFE ~            ;                       if x > 255 then x = 255
 613++CDFE ~            ;                                     adjust = x-255 */ gradient
 614++CDFE ~            ;                                     y = y +- adjust depending on if we are going +ve direction or negative direction  (or simplify it, that it will always be + for x1y1 and - for x2y2 as we pre-sort)
 615++CDFE ~            ;                       if y < 0 then y = 0
 616++CDFE ~            ;                                     adjust = -y */ gradient
 617++CDFE ~            ;                                     x = x +- adjust depending on if we are going left to right or visa versa
 618++CDFE ~            ;                       if y >127 then y = 127
 619++CDFE ~            ;                                     adjust = y-127 */ gradient
 620++CDFE ~            ;                                     x = x +- adjust depending on if we are going left to right or visa versa
 621++CDFE ~            ;
 622++CDFE ~            ;                       iyh     bit 0 - P1 Needs Clipping
 623++CDFE ~            ;                               bit 1 - P2 Needs Clipping
 624++CDFE ~            ;                               bit 2 - x1 >= x2 (left to right)
 625++CDFE ~            ;                               bit 3 - y1 >= y2 (top to bottom)
 626++CDFE ~            ;                               bit 4 -  DY/DX (steep)
 627++CDFE ~            ; if X1 hi <> 0
 628++CDFE ~            LL118:                  ;break
 629++CDFE ~                                    ld      a,h                                     ; if x1 high is 0 then we don't need to clip x at all
 630++CDFE ~                                    and     a
 631++CDFE ~                                    jp      z,.X1NoClipNeeded
 632++CDFE ~            ;                       if x1 hi bit 7 is set (so negative)
 633++CDFE ~            .CalcBlockX:            test    $80                                     ; if h is postiive then jump to the XPositive Calc block
 634++CDFE ~                                    jr      z,.CalcBlockXPositive
 635++CDFE ~            ;                       if clipccord bit 5 is set Adjust = abs(X1) / Gradient (may need to swap bit check?)
 636++CDFE ~            .CalcBlockXNegative:    ld      a,iyh                                   ;
 637++CDFE ~                                    test    16                                      ; bit 5 of iyh denotes that its a DY/DX, if its clear its DX/DY
 638++CDFE ~                                    jr      nz,.CalcBlockXNegMulGrad
 639++CDFE ~            .CaclBlockXNegDivGrad:  macronegate16hl
 640++CDFE ~                                    ld      a,(Gradient)
 641++CDFE ~                                    push    bc                                      ; abs(X1) / Gradient
 642++CDFE ~                                    ld      h,c                     ; move offset into high byte of h
 643++CDFE ~                                    ld      l,0
 644++CDFE ~                                    ld      c,a
 645++CDFE ~                                    call    div_hl_c
 646++CDFE ~                                    pop     bc
 647++CDFE ~                                    jp      .DoneXNegCalc
 648++CDFE ~            ;                       else set Adjust = abs(X1) * Gradient
 649++CDFE ~            .CalcBlockXNegMulGrad:  push    bc                                      ; abs(X1) * Gradient
 650++CDFE ~                                    macronegate16hl
 651++CDFE ~                                    ld      a,(Gradient)
 652++CDFE ~                                    call    HLeqyHLmulAdiv256
 653++CDFE ~                                    pop     bc
 654++CDFE ~            ;                       y1 += adjust * (-1 if bit 4 of clipcoord is set)
 655++CDFE ~            ;                       x1 = 0 then call into DonrX1Calc
 656++CDFE ~            ;                       we can skip the test for negative Y direection
 657++CDFE ~            .DoneXNegCalc:          macronegate16hl
 658++CDFE ~            .XNegSkipNegate:        ld      de,bc
 659++CDFE ~                                    ex      hl,de
 660++CDFE ~                                    add     hl,de
 661++CDFE ~                                    ld      bc,hl
 662++CDFE ~                                    ld      hl,0
 663++CDFE ~                                    jp      .DoneXCalc
 664++CDFE ~            ;                       else x1 hi is positive
 665++CDFE ~            ;                       if clipccord bit 5 is set Adjust = X1 lo / Gradient (may need to swap bit check?)
 666++CDFE ~            .CalcBlockXPositive:    ld      a,iyh
 667++CDFE ~                                    test    16
 668++CDFE ~                                    jr      nz,.CalcBlockXPosMulGrad
 669++CDFE ~            .CalcBlockXPosDivGrad:  ld      a,(Gradient)            ;Q = gradient
 670++CDFE ~                                    push    bc
 671++CDFE ~                                    ld      c,a
 672++CDFE ~                                    ld      de,255
 673++CDFE ~                                    sub     hl,de
 674++CDFE ~                                    ld      h,l
 675++CDFE ~                                    ld      l,0
 676++CDFE ~                                    call    div_hl_c
 677++CDFE ~                                    pop     bc
 678++CDFE ~                                    jp      .DoneX2Calc
 679++CDFE ~            ;                                 else set Adjust = X1 lo * Gradient
 680++CDFE ~            .CalcBlockXPosMulGrad:  push    bc
 681++CDFE ~                                    ld      a,(Gradient)            ;Q = gradient
 682++CDFE ~                                    ld      de,255
 683++CDFE ~                                    sub     hl,de
 684++CDFE ~                                    call    HLeqyHLmulAdiv256       ; hl = YX = SR / Q
 685++CDFE ~                                    pop     bc
 686++CDFE ~            ;                       y1 += adjust * (-1 if bit 4 of clipcoord is set)
 687++CDFE ~            ;                       x1 = 255
 688++CDFE ~            ;                       we can skip the test for negative Y direection
 689++CDFE ~            .DoneX2Calc:            macronegate16hl
 690++CDFE ~            .X2SkipNegate:          ex      de,hl
 691++CDFE ~                                    ld      hl,bc
 692++CDFE ~                                    add     hl,de
 693++CDFE ~                                    ld      bc,hl
 694++CDFE ~                                    ld      hl,255
 695++CDFE ~            ;                       if Y1 hi <> 0 or Y1 low >= 128 then y coordinate is good
 696++CDFE ~            .DoneXCalc:             ld      a,b
 697++CDFE ~                                    and     a
 698++CDFE ~                                    jr      nz,.CalcBlockY1Test
 699++CDFE ~                                    ld      a,c
 700++CDFE ~                                    and     $80
 701++CDFE ~                                    ClearCarryFlag                  ; speculative clear of carry in case its good
 702++CDFE ~                                    ret     z
 703++CDFE ~            ;                       if Y1 hi bit 7 is set
 704++CDFE ~            .X1NoClipNeeded:
 705++CDFE ~            .CalcBlockY1Test:       ld      a,b
 706++CDFE ~                                    test    $80
 707++CDFE ~                                    jr      z,.CalcBlockYPos       ; if Y is positive jump forward
 708++CDFE ~            ;                       if clipccord bit 5 is set Adjust = abs(Y1) / Gradient (may need to swap bit check?)
 709++CDFE ~                                    break
 710++CDFE ~            .CalcBlockY1:           ld      a,iyh
 711++CDFE ~                                    test    16
 712++CDFE ~                                    jr      nz,.CalcBlockYNegMulGrad
 713++CDFE ~            .CalcBlockYNegDivGrad:  macronegate16bc
 714++CDFE ~                                    ld      a,(Gradient)            ;Q = gradient
 715++CDFE ~                                    push    hl
 716++CDFE ~                                    ld      h,c                     ; move offset into high byte of h
 717++CDFE ~                                    ld      l,0
 718++CDFE ~                                    ld      c,a
 719++CDFE ~                                    call    div_hl_c;LLHLdivC;div_hl_c
 720++CDFE ~                                    pop     de
 721++CDFE ~                                    ex      de,hl
 722++CDFE ~                                    jp      .DoneBlockY1
 723++CDFE ~            ;                                 else set Adjust = abs(Y1) * Gradient
 724++CDFE ~            .CalcBlockYNegMulGrad:  macronegate16bc
 725++CDFE ~                                    push    hl
 726++CDFE ~                                    ld      hl,bc
 727++CDFE ~                                    ld      a,(Gradient)            ;Q = gradient
 728++CDFE ~                                    call    HLeqyHLmulAdiv256       ; hl = YX = SR / Q
 729++CDFE ~                                    pop     de
 730++CDFE ~                                    ex      de,hl
 731++CDFE ~            ;                       x1 += adjust * (-1 if bit 3 of clipcoord is set)
 732++CDFE ~            ;                       y1 = 0
 733++CDFE ~            ;                       ret
 734++CDFE ~            ;                       now we have done the adjustment, if y or x are off screen then the line spans screen in only 1 dimension so doesn't get drawn
 735++CDFE ~            .DoneBlockY1:           ld      a,iyh
 736++CDFE ~                                    test    4
 737++CDFE ~                                    jr      z,.Y1SkipNegate
 738++CDFE ~                                    macronegate16de
 739++CDFE ~            .Y1SkipNegate:          add     hl,de
 740++CDFE ~                                    ld      bc,0
 741++CDFE ~                                    ret
 742++CDFE ~            ;                       if clipccord bit 5 is set Adjust = Y1 lo / Gradient (may need to swap bit check?)
 743++CDFE ~            .CalcBlockYPos:         ld      a,iyh
 744++CDFE ~                                    test    16
 745++CDFE ~                                    jr      z,.CalcBlockYPosMulGrad
 746++CDFE ~            .CalcBlockYPosDivGrad:  ld      a,(Gradient)            ;Q = gradient
 747++CDFE ~                                    push    hl
 748++CDFE ~                                    ld      hl,bc
 749++CDFE ~                                    ld      de,127
 750++CDFE ~                                    sub     hl,de
 751++CDFE ~                                    ld      h,l
 752++CDFE ~                                    ld      l,0
 753++CDFE ~                                    ld      c,a
 754++CDFE ~                                    call    div_hl_c;LLHLdivC
 755++CDFE ~                                    pop     de
 756++CDFE ~                                    ex      de,hl
 757++CDFE ~                                    jp      .DoneBlockY2
 758++CDFE ~            ;                                 else set Adjust = Y1 lo * Gradient
 759++CDFE ~            .CalcBlockYPosMulGrad:  push    hl
 760++CDFE ~                                    ld      hl,bc
 761++CDFE ~                                    ld      de,127
 762++CDFE ~                                    sub     hl,de
 763++CDFE ~                                    ld      a,(Gradient)
 764++CDFE ~                                    call    HLeqyHLmulAdiv256       ; hl = YX = SR / Q
 765++CDFE ~                                    pop     de
 766++CDFE ~                                    ex      de,hl
 767++CDFE ~            ;                x1 += adjust * (-1 if bit 3 of clipcoord is set)
 768++CDFE ~            ;                y1 = 127
 769++CDFE ~            .DoneBlockY2:           ld      a,iyh
 770++CDFE ~                                    test    4
 771++CDFE ~                                    jr      nz,.Y2SkipNegate
 772++CDFE ~                                    macronegate16de
 773++CDFE ~            .Y2SkipNegate:          add     hl,de
 774++CDFE ~                                    ld      bc,127
 775++CDFE ~                                    ret
 776++CDFE                      ELSE
 777++CDFE C9                       ret
 778++CDFF                      ENDIF
 779++CDFF              ; old code for on screen test
 780++CDFF              ;;;;;;; if y1 > 127 and y2 > 127 then same sing and exit
 781++CDFF              ;;;;;;
 782++CDFF              ;;;;;;;if y1hi y2hi are <> 0 and both same sign exit
 783++CDFF              ;;;;;;.CheckYOffScreen:       ld      a,b                                 ; y1 and y2 high tests
 784++CDFF              ;;;;;;                        and     ixh
 785++CDFF              ;;;;;;                        jp      .CheckYLow
 786++CDFF              ;;;;;;                        ld
 787++CDFF              ;;;;;;                        and     a                                   ; if either is zero then we can check for > 127
 788++CDFF              ;;;;;;                        jr      z,.YHighNegativeCheck               ;
 789++CDFF              ;;;;;;                        ld      a,ixh                               ;
 790++CDFF              ;;;;;;                        and     a                                   ;
 791++CDFF              ;;;;;;                        ret     nz                                  ;
 792++CDFF              ;;;;;;;if y1h bit 7 and y2h bit 7 set then exit as both -ve
 793++CDFF              ;;;;;;                        ld      a,b                                 ;
 794++CDFF              ;;;;;;                        and     ixh                                 ;
 795++CDFF              ;;;;;;                        and     $80                                 ;
 796++CDFF              ;;;;;;                        ret     z                                   ;
 797++CDFF              ;;;;;;;if y1h > 0 and y2h > 0 then exit as both are +ve high
 798++CDFF              ;;;;;;                        ld      a,b                                 ;
 799++CDFF              ;;;;;;                        and     ixh                                 ;
 800++CDFF              ;;;;;;                        ret     nz                                  ;
 801++CDFF              ;;;;;;;if y1h or y2h is not 0 then proceed to clip
 802++CDFF              ;;;;;;                        ld      a,b
 803++CDFF              ;;;;;;                        or      ixh
 804++CDFF              ;;;;;;                        jr      nz,.StartProcessing
 805++CDFF              ;;;;;;;if (y1l bit 7 is set and y1h is clear ) or (y2l bit 7 is set and y2h is clear) the proceed to clip
 806++CDFF              ;;;;;;                        ld      a,c
 807++CDFF              ;;;;;;                        or      ixl
 808++CDFF              ;;;;;;                        and     $80
 809++CDFF              ;;;;;;                        jr      z,.StartProcessing
 810++CDFF              ;;;;;;
 811++CDFF              ;;;;;;.CheckYOffScreen:       ld      a,b                                 ;
 812++CDFF              ;;;;;;                        cp      0                                   ;
 813++CDFF              ;;;;;;                        jr      z,.Y1HighIsZero                     ;
 814++CDFF              ;;;;;;                        ld      a,ixh                               ; if we get here Y1 high <> 0
 815++CDFF              ;;;;;;                        cp      0                                   ;
 816++CDFF              ;;;;;;                        jr      z,.Y2HighIsZero                     ; if they are both non zero we can do a sign check
 817++CDFF              ;;;;;;.CheckYSameSign:        ld      a,b                                 ; if we get here Y1 high and Y2 high are not zero
 818++CDFF              ;;;;;;                        xor     ixh                                 ; so same sign then bail out if they are
 819++CDFF              ;;;;;;                        and     $80                                 ;
 820++CDFF              ;;;;;;                        ret     z                                   ;
 821++CDFF              ;;;;;;;if we get here either y1hi or y2 hi are 0, now check and y1 low > 127 & y2 low > 127, exit
 822++CDFF              ;;;;;;.Y1HighIsZero:          ld      a,ixh                               ; as y1h is zero, if y2h is zero we do y1 y2 test
 823++CDFF              ;;;;;;                        cp      0                                   ;
 824++CDFF              ;;;;;;                        jr      nz,.Startprocessing                 ;
 825++CDFF              ;;;;;;                        ld      a,c                                 ; so by here y1h and y2h must be zero
 826++CDFF              ;;;;;;                        and     ixl
 827++CDFF              ;;;;;;
 828++CDFF              ;;;;;;                        .CheckY2Lo                        ;
 829++CDFF              ;;;;;;.CheckY1Lo:             ld      a,c
 830++CDFF              ;;;;;;                        and     $80
 831++CDFF              ;;;;;;                        jr      z,.StartProcessing
 832++CDFF              ;;;;;;.CheckY2Lo:             ld      a,ixl
 833++CDFF              ;;;;;;                        and     $80
 834++CDFF              ;;;;;;                        ret     nz
 835++CDFF              ;;;;;;;clip = 0
# file closed: ././ModelRender/CLIP-LL145.asm
 858+ CDFF              ;--------------------------------------------------------------------------------------------------------
 859+ CDFF                                      include "./Universe/Ships/CopyRotmatToTransMat.asm"
# file opened: ././Universe/Ships/CopyRotmatToTransMat.asm
   1++CDFF              ; Set TransMatTo
   2++CDFF              ; XX16(1 0)   (3 2)   (5 4)   = sidev_x sidev_y sidev_z XX16(13,12) (15 14) (17 16)
   3++CDFF              ; XX16(7 6)   (9 8)   (11 10) = roofv_x roofv_y roofv_z XX16(7 6)   (9 8)   (11 10)
   4++CDFF              ; XX16(13 12) (15 14) (17 16) = nosev_x nosev_y nosev_z XX16(1 0)   (3 2)   (5 4)
   5++CDFF              ; This moves Side XYZ to position 0, Roof XYZ to position 1 annd nose XYZ to position 2 as a copy of each batch of 6 bytes
   6++CDFF              ; 18 byte fast copy
   7++CDFF
   8++CDFF              ; Fast copy using the stack                                                         ; T states
   9++CDFF F3           CopyRotmatToTransMat:   di                                                          ; disable interrups to protect during copy
  10++CE00 DD 21 00 00                          ld      ix,0                                                ; 14
  11++CE04 DD 39                                add     ix,sp                                               ; 15
  12++CE06 31 2A C0                             ld      sp,UBnkrotmatSidevX ; Source                        ; 10
  13++CE09 E1                                   pop     hl                  ; UBnkrotmatSidevX              ; 10
  14++CE0A D1                                   pop     de                  ; UBnkrotmatSidevY              ; 10
  15++CE0B C1                                   pop     bc                  ; UBnkrotmatSidevZ              ; 10
  16++CE0C D9                                   exx                                                         ; 4
  17++CE0D E1                                   pop     hl                  ; UBnkrotmatRoofvX              ; 10
  18++CE0E D1                                   pop     de                  ; UBnkrotmatRoofvY              ; 10
  19++CE0F C1                                   pop     bc                  ; UBnkrotmatRoofvZ              ; 10
  20++CE10 31 AE C0                             ld      sp,UBnkTransmatRoofvZ+2 ; Target + 2 reversed       ; 10
  21++CE13 C5                                   push    bc                                                  ; 10
  22++CE14 D5                                   push    de                                                  ; 10
  23++CE15 E5                                   push    hl                                                  ; 10
  24++CE16 D9                                   exx                                                         ; 4
  25++CE17 C5                                   push    bc                                                  ; 10
  26++CE18 D5                                   push    de                                                  ; 10
  27++CE19 E5                                   push    hl                                                  ; 10
  28++CE1A 31 36 C0                             ld      sp,UBnkrotmatNosevX ; Source                        ; 10
  29++CE1D E1                                   pop     hl                  ; UBnkrotmatSidevX              ; 10
  30++CE1E D1                                   pop     de                  ; UBnkrotmatSidevY              ; 10
  31++CE1F C1                                   pop     bc                  ; UBnkrotmatSidevZ              ; 10
  32++CE20 31 B4 C0                             ld      sp,UBnkTransmatNosevZ+2                             ; 10
  33++CE23 C5                                   push    bc                                                  ; 10
  34++CE24 D5                                   push    de                                                  ; 10
  35++CE25 E5                                   push    hl                                                  ; 10
  36++CE26 DD F9                                ld      sp,ix               ; restore stack                 ; 10
  37++CE28                                  IFNDEF INTERRUPS_DISABLE
  38++CE28 FB                                   ei
  39++CE29                                  ENDIF
  40++CE29 C9                                   ret                                                         ; 10 Total 267 (LDI version is 318)
  41++CE2A
  42++CE2A
  43++CE2A
  44++CE2A              ;CopyRotmatToTransMat:
  45++CE2A              ;                        ld      hl,UBnkrotmatSidevX
  46++CE2A              ;                        ld      de,UBnkTransmatSidevX
  47++CE2A              ;                        SixLDIInstrunctions
  48++CE2A              ;                        ld      hl,UBnkrotmatRoofvX
  49++CE2A              ;                        ld      de, UBnkTransmatRoofvX
  50++CE2A              ;                        SixLDIInstrunctions
  51++CE2A              ;                        ld      hl,UBnkrotmatNosevX
  52++CE2A              ;                        ld      de, UBnkTransmatNosevX
  53++CE2A              ;                        SixLDIInstrunctions
  54++CE2A              ;                        ret
  55++CE2A
  56++CE2A              CopyRotToTransMacro:    MACRO
  57++CE2A ~                                    ld      hl,UBnkrotmatSidevX
  58++CE2A ~                                    ld      de,UBnkTransmatSidevX
  59++CE2A ~                                    SixLDIInstrunctions
  60++CE2A ~                                    SixLDIInstrunctions
  61++CE2A ~                                    SixLDIInstrunctions
  62++CE2A                                      ENDM
  63++CE2A
# file closed: ././Universe/Ships/CopyRotmatToTransMat.asm
 860+ CE2A                                      include "./Universe/Ships/TransposeXX12ByShipToXX15.asm"
# file opened: ././Universe/Ships/TransposeXX12ByShipToXX15.asm
   1++CE2A              TransposeXX12ByShipToXX15:
   2++CE2A 2A ED C0             ld		hl,(UBnkXX12xLo)					; get X into HL
   3++CE2D 7C           		ld		a,h			                        ; get XX12 Sign
   4++CE2E E6 80        		and		$80									; check sign bit on high byte
   5++CE30 47           		ld		b,a									; and put it in of 12xlo in b
   6++CE31                      ;110921 debugld      h,0
   7++CE31 7C                   ld      a,h
   8++CE32 E6 7F                and     $7F
   9++CE34 67                   ld      h,a
  10++CE35                      ;110921 debugld      h,0
  11++CE35 ED 5B 20 C0  		ld		de,(UBnKxlo)						;
  12++CE39 3A 22 C0     		ld		a,(UBnKxsgn)						; get Ship Pos (low,high,sign)
  13++CE3C E6 80        		and		$80									; make sure we only have bit 7
  14++CE3E 4F           		ld		c,a									; and put sign of unkxsgn c
  15++CE3F CD 33 00     		call 	ADDHLDESignBC; XX12ProcessCalcHLPlusDESignBC		; this will result in HL = result and A = sign
  16++CE42 B4           		or		h									; combine sign in A with H to give 15 bit signed (*NOT* 2's c)
  17++CE43 67           		ld		h,a
  18++CE44 22 E7 C0     		ld		(UBnkXScaled),hl					; now write it out to XX15 X pos
  19++CE47              ; ..................................
  20++CE47 2A EF C0     		ld		hl,(UBnkXX12yLo)					; Repeat above for Y coordinate
  21++CE4A 7C           		ld		a,h
  22++CE4B E6 80        		and		$80
  23++CE4D 47           		ld		b,a
  24++CE4E                      ;110921 debugld      h,0
  25++CE4E 7C                   ld      a,h
  26++CE4F E6 7F                and     $7F
  27++CE51 67                   ld      h,a
  28++CE52                      ;110921 debugld      h,0
  29++CE52 ED 5B 23 C0  		ld		de,(UBnKylo)
  30++CE56 3A 25 C0     		ld		a,(UBnKysgn)
  31++CE59 E6 80        		and		$80									; make sure we only have bit 7
  32++CE5B 4F           		ld		c,a
  33++CE5C CD 33 00     		call 	ADDHLDESignBC; XX12ProcessCalcHLPlusDESignBC
  34++CE5F B4           		or		h									; combine sign in A with H
  35++CE60 67           		ld		h,a
  36++CE61 22 E9 C0     		ld		(UBnkYScaled),hl
  37++CE64              ; ..................................
  38++CE64 2A F1 C0     		ld		hl,(UBnkXX12zLo)					; and now repeat for Z cooord
  39++CE67 7C           		ld		a,h
  40++CE68 E6 80        		and		$80
  41++CE6A 47           		ld		b,a
  42++CE6B                      ;110921 debugld      h,0
  43++CE6B 7C                   ld      a,h
  44++CE6C E6 7F                and     $7F
  45++CE6E 67                   ld      h,a
  46++CE6F                      ;110921 debugld      h,0
  47++CE6F ED 5B 26 C0  		ld		de,(UBnKzlo)
  48++CE73 3A 28 C0     		ld		a,(UBnKzsgn)
  49++CE76 E6 80        		and		$80									; make sure we only have bit 7
  50++CE78 4F           		ld		c,a
  51++CE79 CD 33 00     		call 	ADDHLDESignBC; XX12ProcessCalcHLPlusDESignBC
  52++CE7C B4           		or		h									; combine sign in A with H
  53++CE7D 67           		ld		h,a
  54++CE7E CB 7C        		bit		7,h                                 ; if sign if positive then we don't need to do the clamp so we ony jump
  55++CE80 20 16        		jr		nz,ClampZto4                        ; result was negative so we need to clamp to 4
  56++CE82 E6 7F                and     $7F                                 ; a = value unsigned
  57++CE84 20 06                jr      nz,NoClampZto4                      ; if high byte was 0 then we could need to clamp still by this stage its +v but and will set z flag if high byte is zero
  58++CE86 7D                   ld      a,l                                 ; get low byte now
  59++CE87              		JumpIfALTNusng 4,ClampZto4					; if its < 4 then fix at 4
  59++CE87 FE 04       >                        cp      4
  59++CE89 DA 98 CE    >                        jp		c, ClampZto4
  60++CE8C              NoClampZto4:
  61++CE8C 22 EB C0     		ld		(UBnkZScaled),hl					; hl = signed calculation and > 4
  62++CE8F 7D           		ld		a,l									; in addition write out the z cooord to UT for now for backwards compat (DEBUG TODO remove later)
  63++CE90 32 D2 7F             ld      (varT),a
  64++CE93 7C           		ld		a,h
  65++CE94 32 B5 7F             ld      (varU),a
  66++CE97 C9           		ret
  67++CE98              ClampZto4:											; This is where we limit 4 to a minimum of 4
  68++CE98 21 04 00     		ld		hl,4
  69++CE9B 22 EB C0     		ld		(UBnkZScaled),hl; BODGE FOR NOW
  70++CE9E 7D           		ld		a,l
  71++CE9F 32 D2 7F             ld      (varT),a                            ;                                                                           ;;;
  72++CEA2 7C           		ld		a,h
  73++CEA3 32 B5 7F             ld      (varU),a 						; compatibility for now
  74++CEA6 C9           		ret
  75++CEA7
# file closed: ././Universe/Ships/TransposeXX12ByShipToXX15.asm
 861+ CEA7                                      include "./Maths/Utilities/ScaleNodeTo8Bit.asm"
# file opened: ././Maths/Utilities/ScaleNodeTo8Bit.asm
   1++CEA7              ScaleNodeTo8Bit:								; TODO make signed
   2++CEA7 ED 4B EB C0  	ld			bc,(UBnkZScaled)
   3++CEAB 2A E7 C0     	ld			hl,(UBnkXScaled)
   4++CEAE ED 5B E9 C0  	ld			de,(UBnkYScaled)
   5++CEB2              SetABSbc:
   6++CEB2 78           	ld			a,b
   7++CEB3 DD 67        	ld			ixh,a
   8++CEB5 E6 7F        	and			SignMask8Bit
   9++CEB7 47           	ld			b,a									; bc = ABS bc
  10++CEB8              SetABShl:
  11++CEB8 7C           	ld			a,h
  12++CEB9 DD 6F        	ld			ixl,a
  13++CEBB E6 7F        	and			SignMask8Bit
  14++CEBD 67           	ld			h,a									; hl = ABS hl
  15++CEBE              SetABSde:
  16++CEBE 7A           	ld			a,d
  17++CEBF FD 67        	ld			iyh,a
  18++CEC1 E6 7F        	and			SignMask8Bit
  19++CEC3 57           	ld			d,a									; de = ABS de
  20++CEC4              ScaleNodeTo8BitLoop:
  21++CEC4 78               ld          a,b		                            ; U	\ z hi
  22++CEC5 B4           	or			h                                   ; XX15+1	\ x hi
  23++CEC6 B2           	or			d                                   ; XX15+4	\ y hi
  24++CEC7 28 0F            jr          z,ScaleNodeDone                   ; if X, Y, Z = 0  exit loop down once hi U rolled to 0
  25++CEC9                  ShiftHLRight1
  25++CEC9 CB 3C       >			   srl h
  25++CECB CB 1D       >			   rr  l
  26++CECD                  ShiftDERight1
  26++CECD CB 3A       >			   srl d
  26++CECF CB 1B       >			   rr  e
  27++CED1              	ShiftBCRight1
  27++CED1 CB 38       >			   srl b
  27++CED3 CB 19       >			   rr  c
  28++CED5 C3 C4 CE         jp          ScaleNodeTo8BitLoop
  29++CED8              ScaleNodeDone:										; now we have scaled values we have to deal with sign
  30++CED8 DD 7C        	ld			a,ixh								; get sign bit and or with b
  31++CEDA E6 80        	and			SignOnly8Bit
  32++CEDC B0           	or			b
  33++CEDD 47           	ld			b,a
  34++CEDE              SignforHL:
  35++CEDE DD 7D        	ld			a,ixl								; get sign bit and or with b
  36++CEE0 E6 80        	and			SignOnly8Bit
  37++CEE2 B4           	or			h
  38++CEE3 67           	ld			h,a
  39++CEE4              SignforDE:
  40++CEE4 FD 7C        	ld			a,iyh								; get sign bit and or with b
  41++CEE6 E6 80        	and			SignOnly8Bit
  42++CEE8 B2           	or			d
  43++CEE9 57           	ld			d,a
  44++CEEA              SignsDoneSaveResult:
  45++CEEA ED 43 EB C0  	ld			(UBnkZScaled),bc
  46++CEEE 22 E7 C0     	ld			(UBnkXScaled),hl
  47++CEF1 ED 53 E9 C0  	ld			(UBnkYScaled),de
  48++CEF5 78           	ld			a,b
  49++CEF6 32 B5 7F     	ld			(varU),a
  50++CEF9 79           	ld			a,c
  51++CEFA 32 D2 7F     	ld			(varT),a
  52++CEFD C9           	ret
  53++CEFE
# file closed: ././Maths/Utilities/ScaleNodeTo8Bit.asm
 862+ CEFE
 863+ CEFE              ;--------------------------------------------------------------------------------------------------------
 864+ CEFE 21 13 C1     SetFaceAVisible:        ld      hl,UbnkFaceVisArray
 865+ CF01 ED 31                                add     hl,a
 866+ CF03 3E FF                                ld      a,$FF
 867+ CF05 77                                   ld      (hl),a
 868+ CF06 C9                                   ret
 869+ CF07              ;--------------------------------------------------------------------------------------------------------
 870+ CF07 21 13 C1     SetFaceAHidden:         ld      hl,UbnkFaceVisArray
 871+ CF0A ED 31                                add     hl,a
 872+ CF0C AF                                   xor     a
 873+ CF0D 77                                   ld      (hl),a
 874+ CF0E C9                                   ret
 875+ CF0F              ;--------------------------------------------------------------------------------------------------------
 876+ CF0F 3A 44 C4     SetAllFacesVisible:     ld      a,(FaceCtX4Addr)            ; (XX0),Y which is XX0[0C] or UBnkHullCopy+FaceCtX4Addr                                 ;;; Faces count (previously loaded into b up front but no need to shave bytes for clarity
 877+ CF12 CB 3F                                srl     a                           ; else do explosion needs all vertices                                                  ;;;
 878+ CF14 CB 3F                                srl     a                           ;  /=4  TODO add this into blueprint data for speed                                                           ;;; For loop = 15 to 0
 879+ CF16 47                                   ld      b,a                         ; b = Xreg = number of normals, faces
 880+ CF17 21 13 C1                             ld      hl,UbnkFaceVisArray
 881+ CF1A 3E FF                                ld      a,$FF
 882+ CF1C              SetAllFacesVisibleLoop:
 883+ CF1C 77           EE30:                   ld      (hl),a
 884+ CF1D 23                                   inc     hl
 885+ CF1E 10 FC                                djnz    SetAllFacesVisibleLoop
 886+ CF20 C9                                   ret
 887+ CF21              ;--------------------------------------------------------------------------------------------------------
 888+ CF21 3A 44 C4     SetAllFacesHidden:      ld      a,(FaceCtX4Addr)            ; (XX0),Y which is XX0[0C] or UBnkHullCopy+ShipHullFacesCount                           ;;; Faces count (previously loaded into b up front but no need to shave bytes for clarity
 889+ CF24 CB 3F                                srl     a                           ; else do explosion needs all vertices                                                  ;;;
 890+ CF26 CB 3F                                srl     a                           ;  /=4                                                                                  ;;; For loop = 15 to 0
 891+ CF28 47                                   ld      b,a                         ; b = Xreg = number of normals, faces
 892+ CF29 06 10                                ld      b,16
 893+ CF2B 21 13 C1                             ld      hl,UbnkFaceVisArray
 894+ CF2E 3E 00                                ld      a,$00
 895+ CF30 77           SetAllFacesHiddenLoop:  ld      (hl),a
 896+ CF31 23                                   inc     hl
 897+ CF32 10 FC                                djnz    SetAllFacesHiddenLoop
 898+ CF34 C9                                   ret
 899+ CF35              ;---------------------------------------------------------------------------------------------------------
 900+ CF35              ;--
 901+ CF35                  DISPLAY "TODO: Change to a tidy that checks for normal accuracy first"
 902+ CF35              TidyRotation:       IFNDEF FORCE_TIDY
 903+ CF35 3A 29 C0                             ld      a,(UBnkTidyCounter)         ; loops every 16 iterations
 904+ CF38 3D                                   dec     a                           ; and call is determined
 905+ CF39 E6 0F                                and     %00001111                   ; by if the counter
 906+ CF3B 32 29 C0                             ld      (UBnkTidyCounter),a         ; matches teh slot number
 907+ CF3E 21 40 C0                             ld      hl,UBnKSlotNumber           ; of course this is then 16 slots max
 908+ CF41 BE                                   cp      (hl)
 909+ CF42 C0                                   ret     nz                          ; when counter matches slot number tidy stops it doing all tidies on same iteration
 910+ CF43                                  ENDIF
 911+ CF43                                  IFNDEF BYPASS_TIDY
 912+ CF43 ~                                    call    TidyVectorsIX
 913+ CF43                                  ENDIF
 914+ CF43 C9                                   ret
 915+ CF44              ;;;;X = normal scale
 916+ CF44              ;;;;ZtempHi = zhi
 917+ CF44              ;;;;......................................................
 918+ CF44              ;;;; if ztemp hi <> 0                                   ::Scale Object Distance
 919+ CF44              ;;;;  Loop                                              ::LL90
 920+ CF44              ;;;;     inc X
 921+ CF44              ;;;;     divide X, Y & ZtempHiLo by 2
 922+ CF44              ;;;;  Until ZtempHi = 0
 923+ CF44              ;;;;......................................................
 924+ CF44              ;-LL21---------------------------------------------------------------------------------------------------
 925+ CF44                  DISPLAY "Tracing 3", $
 926+ CF44
 927+ CF44                                      include "Universe/Ships/NormaliseTransMat.asm"
# file opened: ./Universe/Ships/NormaliseTransMat.asm
   1++CF44              ;divdide by 16 using undocumented instrunctions
   2++CF44 47           Norm256mulAdivQ:        ld      b,a
   3++CF45 0E 00                                ld      c,0
   4++CF47 16 00                                ld      d,0
   5++CF49 3A B6 7F                             ld      a,(varQ)
   6++CF4C 5F                                   ld      e,a
   7++CF4D              ;Input: BC = Dividend, DE = Divisor, HL = 0
   8++CF4D              ;Output: BC = Quotient, HL = Remainder
   9++CF4D 21 00 00     NormDIV16UNDOC:         ld      hl,0
  10++CF50 78                                   ld      a,b
  11++CF51 06 10                                ld      b,16
  12++CF53 CB 31        NormDIV16UNDOCLOOP:     sll	    c		; unroll 16 times
  13++CF55 17                                   rla	    		; ...
  14++CF56 ED 6A                                adc	    hl,hl		; ...
  15++CF58 ED 52                                sbc	    hl,de		; ...
  16++CF5A 30 02                                jr	    nc,NormDIV16UNDOCSKIP		; ...
  17++CF5C 19                                   add	    hl,de		; ...
  18++CF5D 0D                                   dec	    c		; ...
  19++CF5E 10 F3        NormDIV16UNDOCSKIP:     djnz    NormDIV16UNDOCLOOP
  20++CF60 79                                   ld      a,c
  21++CF61 32 B7 7F                             ld      (varR),a
  22++CF64 C9                                   ret
  23++CF65
  24++CF65 FD 67        Norm256mulAdivQSignA:   ld      iyh,a
  25++CF67                                      ClearSignBitA
  25++CF67 E6 7F       >                        and     SignMask8Bit
  26++CF69 CD 44 CF                             call    Norm256mulAdivQ              ; do 15 bit unsigned
  27++CF6C FD 7C                                ld      a,iyh                       ; now correct R reg
  28++CF6E                                      SignBitOnlyA
  28++CF6E E6 80       >                        and     SignOnly8Bit
  29++CF70 B1                                   or      c
  30++CF71 32 B7 7F                             ld      (varR),a
  31++CF74 C9                                   ret
  32++CF75
  33++CF75              ; Tested OK
  34++CF75              ;LL21
  35++CF75              NormaliseTransMat:
  36++CF75                      IFDEF LOGMATHS
  37++CF75 ~                            ld      hl,UBnkTransmatNosevZ+1     ; initialise loop
  38++CF75 ~                            ld      b,9                         ; total of 9 elements to transform
  39++CF75 ~                            MMUSelectMathsTables
  40++CF75 ~            .LL21Loop:      ld      d,(hl)
  41++CF75 ~                            dec     hl
  42++CF75 ~                            ld      e,(hl)                      ; de = hilo now   hl now = pointer to low byte
  43++CF75 ~                            ShiftDELeft1                        ; De = DE * 2
  44++CF75 ~                            ld      a,d                         ; a = hi byte after shifting
  45++CF75 ~                            push	hl
  46++CF75 ~                            push	bc
  47++CF75 ~                            call    AEquAmul256Div197Log        ; R = (2(hi).0)/ConstNorm - LL28 Optimised BFRDIV R=A*256/Q = delta_y / delta_x Use Y/X grad. as not steep
  48++CF75 ~                            ;ld      a,c                         ; BFRDIV returns R also in l reg
  49++CF75 ~                            pop		bc
  50++CF75 ~                            pop		hl							; bc gets wrecked by BFRDIV
  51++CF75 ~                            ld      (hl),a                      ; write low result to low byte so zlo = (zhl *2)/197, we keep hi byte in tact as we need the sign bit
  52++CF75 ~                            dec     hl                          ; now hl = hi byte of pre val e.g z->y->x
  53++CF75 ~                            djnz    .LL21Loop                   ; loop from 2zLo through to 0xLo
  54++CF75 ~                            MMUSelectROM0
  55++CF75 ~                            ret
  56++CF75                      ELSE
  57++CF75 21 B3 C0                     ld      hl,UBnkTransmatNosevZ+1         ; initialise loop
  58++CF78 0E C5                        ld      c,ConstNorm                 ; c = Q = norm = 197
  59++CF7A 79                           ld      a,c
  60++CF7B 32 B6 7F                     ld      (varQ),a                    ; set up varQ
  61++CF7E 06 09                        ld      b,9                         ; total of 9 elements to transform
  62++CF80 56           LL21Loop:       ld      d,(hl)
  63++CF81 2B                           dec     hl
  64++CF82 5E                           ld      e,(hl)                      ; de = hilo now   hl now = pointer to low byte
  65++CF83                              ShiftDELeft1                        ; De = DE * 2
  65++CF83 CB 23       >			   sla e
  65++CF85 CB 12       >			   rl  d
  66++CF87 7A                           ld      a,d                         ; a = hi byte after shifting
  67++CF88 E5                           push	hl
  68++CF89 C5                           push	bc
  69++CF8A CD 44 CF                     call    Norm256mulAdivQ
  70++CF8D                              ;===call    RequAmul256divC				; R = (2(hi).0)/ConstNorm - LL28 Optimised BFRDIV R=A*256/Q = delta_y / delta_x Use Y/X grad. as not steep
  71++CF8D 79                           ld      a,c                         ; BFRDIV returns R also in l reg
  72++CF8E C1                           pop		bc
  73++CF8F E1                           pop		hl							; bc gets wrecked by BFRDIV
  74++CF90 77                           ld      (hl),a                      ; write low result to low byte so zlo = (zhl *2)/197, we keep hi byte in tact as we need the sign bit
  75++CF91 2B                           dec     hl                          ; now hl = hi byte of pre val e.g z->y->x
  76++CF92 10 EC                        djnz    LL21Loop                    ; loop from 2zLo through to 0xLo
  77++CF94 C9                           ret
  78++CF95                      ENDIF
# file closed: ./Universe/Ships/NormaliseTransMat.asm
 928+ CF95              ;;;                        include "Universe/Ships/NormaliseXX15.asm"
 929+ CF95              ;-LL91---------------------------------------------------------------------------------------------------
 930+ CF95
 931+ CF95              ; Now we have
 932+ CF95              ;   * XX18(2 1 0) = (x_sign x_hi x_lo)
 933+ CF95              ;   * XX18(5 4 3) = (y_sign y_hi y_lo)
 934+ CF95              ;   * XX18(8 7 6) = (z_sign z_hi z_lo)
 935+ CF95              ;
 936+ CF95              ;--------------------------------------------------------------------------------------------------------
 937+ CF95                                      include "Universe/Ships/InverseXX16.asm"
# file opened: ./Universe/Ships/InverseXX16.asm
   1++CF95              ; TESTEDOK
   2++CF95
   3++CF95              ;ScaleOrientationXX16:                       ; DEBUG TODO will combine with inverse later
   4++CF95              ;        ld      a,(XX17)
   5++CF95              ;        ld      ixl,a
   6++CF95              ;        ld      ixh,9
   7++CF95              ;        ld      hl,UBnkTransInv0x
   8++CF95              ;        ld      a,(hl)
   9++CF95              ;ScaleNode:
  10++CF95              ;        ld      b,ixl
  11++CF95              ;ScaleNodeLoop:
  12++CF95              ;        sla      a
  13++CF95              ;        djnz    ScaleNodeLoop
  14++CF95              ;        ld      (hl),a
  15++CF95              ;        inc     hl
  16++CF95              ;        inc     hl
  17++CF95              ;        dec     ixh
  18++CF95              ;        jr      nz,ScaleNode
  19++CF95              ;        ret
  20++CF95
  21++CF95
  22++CF95              InverseXX16:								; lead routine into .LL42	\ ->  &4B04 \ DO nodeX-Ycoords their comment  \  TrnspMat
  23++CF95              ; we coudl combine this with move to transmat later as an optimisation
  24++CF95              ; INPUT - All Scaled
  25++CF95              ;  They transmat has already been put into side, roof nose order
  26++CF95              ;  XX16   = |sidev_x| |sidev_y| |sidev_z|  1  0  3  2  5  4 note each bytepair is Scaled value in low and high byte just for sign
  27++CF95              ;  XX16   = |roofv_x| |roofv_y| |roofv_z|  7  6  8  9 11 10
  28++CF95              ;  XX16   = |nosev_x| |nosev_y| |nosev_z| 13 12 15 14 17 16
  29++CF95              ; OUTPUT
  30++CF95              ;  XX16(1 0)   ( 3 2) ( 5 4 ) =  sidev_x roofv_x nosev_x
  31++CF95              ;  XX16(7 6)   ( 8 9) (11 10) =  sidev_y roofv_y nosev_y
  32++CF95              ;  XX16(13 12) (15 14)(17 16) =  sidev_z roofv_z nosev_z
  33++CF95              ; First all side values become compoment 0 of each vector
  34++CF95 2A A2 C0             ld      hl,(UBnkTransmatSidevX)     ;
  35++CF98 ED 5B A8 C0          ld      de,(UBnkTransmatRoofvX)     ;
  36++CF9C ED 4B AE C0          ld      bc,(UBnkTransmatNosevX)     ;
  37++CFA0 22 BA C0             ld      (UbnkTransInvRow0x0),hl     ;
  38++CFA3 ED 53 BC C0          ld      (UbnkTransInvRow0x1),de     ;
  39++CFA7 ED 43 BE C0          ld      (UbnkTransInvRow0x2),bc     ;
  40++CFAB 2A A4 C0             ld      hl,(UBnkTransmatSidevY)     ;
  41++CFAE ED 5B AA C0          ld      de,(UBnkTransmatRoofvY)     ;
  42++CFB2 ED 4B B0 C0          ld      bc,(UBnkTransmatNosevY)     ;
  43++CFB6 22 C2 C0             ld      (UbnkTransInvRow1y0),hl     ;
  44++CFB9 ED 53 C4 C0          ld      (UbnkTransInvRow1y1),de     ;
  45++CFBD ED 43 C6 C0          ld      (UbnkTransInvRow1y2),bc     ;
  46++CFC1 2A A6 C0             ld      hl,(UBnkTransmatSidevZ)     ;
  47++CFC4 ED 5B AC C0          ld      de,(UBnkTransmatRoofvZ)     ;
  48++CFC8 ED 4B B2 C0          ld      bc,(UBnkTransmatNosevZ)     ;
  49++CFCC 22 CA C0             ld      (UbnkTransInvRow2z0),hl     ;
  50++CFCF ED 53 CC C0          ld      (UbnkTransInvRow2z1),de     ;
  51++CFD3 ED 43 CE C0          ld      (UbnkTransInvRow2z2),bc     ;
  52++CFD7 C9                   ret
  53++CFD8
  54++CFD8
# file closed: ./Universe/Ships/InverseXX16.asm
 938+ CFD8              ;--------------------------------------------------------------------------------------------------------
 939+ CFD8              ;--------------------------------------------------------------------------------------------------------
 940+ CFD8              ;   XX12(1 0) = [x y z] . sidev  = (dot_sidev_sign dot_sidev_lo)  = dot_sidev
 941+ CFD8              ;   XX12(3 2) = [x y z] . roofv  = (dot_roofv_sign dot_roofv_lo)  = dot_roofv
 942+ CFD8              ;   XX12(5 4) = [x y z] . nosev  = (dot_nosev_sign dot_nosev_lo)  = dot_nosev
 943+ CFD8              ; Returns
 944+ CFD8              ;
 945+ CFD8              ;   XX12(1 0)            The dot product of [x y z] vector with the sidev (or _x)
 946+ CFD8              ;                        vector, with the sign in XX12+1 and magnitude in XX12
 947+ CFD8              ;
 948+ CFD8              ;   XX12(3 2)            The dot product of [x y z] vector with the roofv (or _y)
 949+ CFD8              ;                        vector, with the sign in XX12+3 and magnitude in XX12+2
 950+ CFD8              ;
 951+ CFD8              ;   XX12(5 4)            The dot product of [x y z] vector with the nosev (or _z)
 952+ CFD8              ;                        vector, with the sign in XX12+5 and magnitude in XX12+4
 953+ CFD8              ; TESTEDOK
 954+ CFD8              XX12DotOneRow:
 955+ CFD8              XX12CalcX:              N0equN1byN2div256 varT, (hl), (UBnkXScaled)       ; T = (hl) * regXX15fx /256
 955+ CFD8 3A E7 C0    >                        ld      a,(UBnkXScaled)                        ;
 955+ CFDB 5F          >                        ld      e,a                         ; use e as var Q = value of XX15 [n] lo
 955+ CFDC 7E          >                        ld      a,(hl)                        ; A = XX16 element
 955+ CFDD 57          >                        ld      d,a
 955+ CFDE ED 30       >                        mul
 955+ CFE0 7A          >                        ld      a,d                         ; we get only the high byte which is like doing a /256 if we think of a as low
 955+ CFE1 32 D2 7F    >                        ld      (varT),a                      ; Q         ; result variable = XX16[n] * XX15[n]/256
 956+ CFE4 23                                   inc     hl                                  ; move to sign byte
 957+ CFE5              XX12CalcXSign:          AequN1xorN2 UBnkXScaledSign,(hl)             ;
 957+ CFE5 3A E8 C0    >                        ld      a,(UBnkXScaledSign)
 957+ CFE8 AE          >                        xor     (hl)
 958+ CFE9 32 B8 7F                             ld      (varS),a                            ; Set S to the sign of x_sign * sidev_x
 959+ CFEC 23                                   inc     hl
 960+ CFED              XX12CalcY:              N0equN1byN2div256 varQ, (hl),(UBnkYScaled)       ; Q = XX16 * XX15 /256 using varQ to hold regXX15fx
 960+ CFED 3A E9 C0    >                        ld      a,(UBnkYScaled)                        ;
 960+ CFF0 5F          >                        ld      e,a                         ; use e as var Q = value of XX15 [n] lo
 960+ CFF1 7E          >                        ld      a,(hl)                        ; A = XX16 element
 960+ CFF2 57          >                        ld      d,a
 960+ CFF3 ED 30       >                        mul
 960+ CFF5 7A          >                        ld      a,d                         ; we get only the high byte which is like doing a /256 if we think of a as low
 960+ CFF6 32 B6 7F    >                        ld      (varQ),a                      ; Q         ; result variable = XX16[n] * XX15[n]/256
 961+ CFF9                                      ldCopyByte varT,varR                        ; R = T =  |sidev_x| * x_lo / 256
 961+ CFF9 3A D2 7F    >                        ld       a,(varT)
 961+ CFFC 32 B7 7F    >                        ld       (varR),a
 962+ CFFF 23                                   inc     hl
 963+ D000                                      AequN1xorN2 UBnkYScaledSign,(hl)             ; Set A to the sign of y_sign * sidev_y
 963+ D000 3A EA C0    >                        ld      a,(UBnkYScaledSign)
 963+ D003 AE          >                        xor     (hl)
 964+ D004              ; (S)A = |sidev_x| * x_lo / 256  = |sidev_x| * x_lo + |sidev_y| * y_lo
 965+ D004 E5           STequSRplusAQ           push    hl
 966+ D005 CD 15 9F                             call    baddll38                            ; JSR &4812 \ LL38   \ BADD(S)A=R+Q(SA) \ 1byte add (subtract)
 967+ D008 E1                                   pop     hl
 968+ D009 32 D2 7F                             ld      (varT),a                            ; T = |sidev_x| * x_lo + |sidev_y| * y_lo
 969+ D00C 23                                   inc     hl
 970+ D00D              XX12CalcZ:              N0equN1byN2div256 varQ,(hl),(UBnkZScaled)       ; Q = |sidev_z| * z_lo / 256
 970+ D00D 3A EB C0    >                        ld      a,(UBnkZScaled)                        ;
 970+ D010 5F          >                        ld      e,a                         ; use e as var Q = value of XX15 [n] lo
 970+ D011 7E          >                        ld      a,(hl)                        ; A = XX16 element
 970+ D012 57          >                        ld      d,a
 970+ D013 ED 30       >                        mul
 970+ D015 7A          >                        ld      a,d                         ; we get only the high byte which is like doing a /256 if we think of a as low
 970+ D016 32 B6 7F    >                        ld      (varQ),a                      ; Q         ; result variable = XX16[n] * XX15[n]/256
 971+ D019                                      ldCopyByte varT,varR                        ; R = |sidev_x| * x_lo + |sidev_y| * y_lo
 971+ D019 3A D2 7F    >                        ld       a,(varT)
 971+ D01C 32 B7 7F    >                        ld       (varR),a
 972+ D01F 23                                   inc     hl
 973+ D020                                      AequN1xorN2 UBnkZScaledSign,(hl)             ; A = sign of z_sign * sidev_z
 973+ D020 3A EC C0    >                        ld      a,(UBnkZScaledSign)
 973+ D023 AE          >                        xor     (hl)
 974+ D024              ; (S)A= |sidev_x| * x_lo + |sidev_y| * y_lo + |sidev_z| * z_lo
 975+ D024 CD 15 9F                             call    baddll38                            ; JSR &4812 \ LL38   \ BADD(S)A=R+Q(SA)   \ 1byte add (subtract)
 976+ D027              ; Now we exit with A = result S = Sign
 977+ D027 C9                                   ret
 978+ D028
 979+ D028
 980+ D028                  DISPLAY "Tracing 4", $
 981+ D028
 982+ D028              ;-- LL51---------------------------------------------------------------------------------------------------------------------------
 983+ D028              ;TESTED OK
 984+ D028              ;XX12EquScaleDotOrientation:                         ; .LL51 \ -> &4832 \ XX12=XX15.XX16  each vector is 16-bit x,y,z
 985+ D028              XX12EquXX15DotProductXX16:
 986+ D028 01 00 00                             ld      bc,0                                ; LDX, LDY 0
 987+ D02B 21 A2 C0                             ld      hl,UBnkTransmatSidevX
 988+ D02E CD D8 CF                             call    XX12DotOneRow
 989+ D031 32 ED C0                             ld      (UBnkXX12xLo),a
 990+ D034 3A B8 7F                             ld      a,(varS)
 991+ D037 32 EE C0                             ld      (UBnkXX12xSign),a
 992+ D03A 21 A8 C0                             ld      hl,UBnkTransmatRoofvX
 993+ D03D CD D8 CF                             call    XX12DotOneRow
 994+ D040 32 EF C0                             ld      (UBnkXX12yLo),a
 995+ D043 3A B8 7F                             ld      a,(varS)
 996+ D046 32 F0 C0                             ld      (UBnkXX12ySign),a
 997+ D049 21 AE C0                             ld      hl,UBnkTransmatNosevX
 998+ D04C CD D8 CF                             call    XX12DotOneRow
 999+ D04F 32 F1 C0                             ld      (UBnkXX12zLo),a
1000+ D052 3A B8 7F                             ld      a,(varS)
1001+ D055 32 F2 C0                             ld      (UBnkXX12zSign),a
1002+ D058 C9                                   ret
1003+ D059              ;--------------------------------------------------------------------------------------------------------
1004+ D059                                      include "./Universe/Ships/CopyXX12ScaledToXX18.asm"
# file opened: ././Universe/Ships/CopyXX12ScaledToXX18.asm
   1++D059              CopyXX12ScaledToXX18:
   2++D059              CopyResultToDrawCam:
   3++D059                      ldCopyByte XX12         ,XX18             ; XX12+0 => XX18+0  Set XX18(2 0) = dot_sidev
   3++D059 3A ED C0    >                        ld       a,(XX12)
   3++D05C 32 DB C0    >                        ld       (XX18),a
   4++D05F                      ldCopyByte XX12+1       ,XX18+2           ; XX12+1 => XX18+2
   4++D05F 3A EE C0    >                        ld       a,(XX12+1)
   4++D062 32 DD C0    >                        ld       (XX18+2),a
   5++D065                      ldCopyByte XX12+2       ,XX18+3           ; XX12+2 => XX18+3  Set XX12+1 => XX18+2
   5++D065 3A EF C0    >                        ld       a,(XX12+2)
   5++D068 32 DE C0    >                        ld       (XX18+3),a
   6++D06B                      ldCopyByte XX12+3       ,XX18+5           ; XX12+3 => XX18+5
   6++D06B 3A F0 C0    >                        ld       a,(XX12+3)
   6++D06E 32 E0 C0    >                        ld       (XX18+5),a
   7++D071                      ldCopyByte XX12+4       ,XX18+6           ; XX12+4 => XX18+6  Set XX18(8 6) = dot_nosev
   7++D071 3A F1 C0    >                        ld       a,(XX12+4)
   7++D074 32 E1 C0    >                        ld       (XX18+6),a
   8++D077                      ldCopyByte XX12+5       ,XX18+8           ; XX12+5 => XX18+8
   8++D077 3A F2 C0    >                        ld       a,(XX12+5)
   8++D07A 32 E3 C0    >                        ld       (XX18+8),a
   9++D07D C9                   ret
  10++D07E
# file closed: ././Universe/Ships/CopyXX12ScaledToXX18.asm
1005+ D07E                                      include "./Universe/Ships/CopyXX12toXX15.asm"
# file opened: ././Universe/Ships/CopyXX12toXX15.asm
   1++D07E              CopyXX12toXX15:         ldCopyByte  UBnkXX12xLo     ,UBnkXScaled        ; xlo
   1++D07E 3A ED C0    >                        ld       a,(UBnkXX12xLo)
   1++D081 32 E7 C0    >                        ld       (UBnkXScaled),a
   2++D084                                      ldCopyByte  UBnkXX12xSign   ,UBnkXScaledSign    ; xsg
   2++D084 3A EE C0    >                        ld       a,(UBnkXX12xSign)
   2++D087 32 E8 C0    >                        ld       (UBnkXScaledSign),a
   3++D08A                                      ldCopyByte  UBnkXX12yLo     ,UBnkYScaled        ; xlo
   3++D08A 3A EF C0    >                        ld       a,(UBnkXX12yLo)
   3++D08D 32 E9 C0    >                        ld       (UBnkYScaled),a
   4++D090                                      ldCopyByte  UBnkXX12ySign   ,UBnkYScaledSign    ; xsg
   4++D090 3A F0 C0    >                        ld       a,(UBnkXX12ySign)
   4++D093 32 EA C0    >                        ld       (UBnkYScaledSign),a
   5++D096                                      ldCopyByte  UBnkXX12zLo     ,UBnkZScaled        ; xlo
   5++D096 3A F1 C0    >                        ld       a,(UBnkXX12zLo)
   5++D099 32 EB C0    >                        ld       (UBnkZScaled),a
   6++D09C                                      ldCopyByte  UBnkXX12zSign   ,UBnkZScaledSign    ; xsg
   6++D09C 3A F2 C0    >                        ld       a,(UBnkXX12zSign)
   6++D09F 32 EC C0    >                        ld       (UBnkZScaledSign),a
   7++D0A2 C9                                   ret
   8++D0A3
# file closed: ././Universe/Ships/CopyXX12toXX15.asm
1006+ D0A3                                      include "./Universe/Ships/CopyXX18toXX15.asm"
# file opened: ././Universe/Ships/CopyXX18toXX15.asm
   1++D0A3              CopyXX18toXX15:
   2++D0A3              CopyDrawCamToScaled:
   3++D0A3                      ldCopyByte  UBnkDrawCam0xLo ,UBnkXScaled        ; xlo
   3++D0A3 3A DB C0    >                        ld       a,(UBnkDrawCam0xLo)
   3++D0A6 32 E7 C0    >                        ld       (UBnkXScaled),a
   4++D0A9                      ldCopyByte  UBnkDrawCam0xSgn,UBnkXScaledSign    ; xsg
   4++D0A9 3A DD C0    >                        ld       a,(UBnkDrawCam0xSgn)
   4++D0AC 32 E8 C0    >                        ld       (UBnkXScaledSign),a
   5++D0AF                      ldCopyByte  UBnkDrawCam0yLo ,UBnkYScaled        ; xlo
   5++D0AF 3A DE C0    >                        ld       a,(UBnkDrawCam0yLo)
   5++D0B2 32 E9 C0    >                        ld       (UBnkYScaled),a
   6++D0B5                      ldCopyByte  UBnkDrawCam0ySgn,UBnkYScaledSign    ; xsg
   6++D0B5 3A E0 C0    >                        ld       a,(UBnkDrawCam0ySgn)
   6++D0B8 32 EA C0    >                        ld       (UBnkYScaledSign),a
   7++D0BB                      ldCopyByte  UBnkDrawCam0zLo ,UBnkZScaled        ; xlo
   7++D0BB 3A E1 C0    >                        ld       a,(UBnkDrawCam0zLo)
   7++D0BE 32 EB C0    >                        ld       (UBnkZScaled),a
   8++D0C1                      ldCopyByte  UBnkDrawCam0zSgn,UBnkZScaledSign    ; xsg
   8++D0C1 3A E3 C0    >                        ld       a,(UBnkDrawCam0zSgn)
   8++D0C4 32 EC C0    >                        ld       (UBnkZScaledSign),a
   9++D0C7 C9                   ret
  10++D0C8
# file closed: ././Universe/Ships/CopyXX18toXX15.asm
1007+ D0C8                                      include "./Universe/Ships/CopyXX18ScaledToXX15.asm"
# file opened: ././Universe/Ships/CopyXX18ScaledToXX15.asm
   1++D0C8 2A 20 C0     LoadCraftToCamera:      ld      hl,(UBnKxlo)            ; UBnKxlo, UBnKxhi
   2++D0CB ED 5B 22 C0                          ld      de,(UBnKxsgn)           ; UBnKxsgn, UBnKylo
   3++D0CF ED 4B 24 C0                          ld      bc,(UBnKyhi)            ; UBnKyhi, UBnKysgn
   4++D0D3 22 DB C0                             ld      (UBnkDrawCam0xLo),hl    ; UBnkDrawCam0xLo, UBnkDrawCam0xHi
   5++D0D6 ED 53 DD C0                          ld      (UBnkDrawCam0xSgn),de   ; UBnkDrawCam0xSgn,UBnkDrawCam0yLo
   6++D0DA ED 43 DF C0                          ld      (UBnkDrawCam0yHi),bc    ; UBnkDrawCam0yHi, UBnkDrawCam0ySgn
   7++D0DE
   8++D0DE 2A 26 C0                             ld      hl,(UBnKzlo)            ; UBnKzlo, UBnKzhi
   9++D0E1 3A 28 C0                             ld      a,(UBnKzsgn)             ; UBnKzlo
  10++D0E4 22 E1 C0                             ld      (UBnkDrawCam0zLo),hl    ; UBnkDrawCam0zLo, UBnkDrawCam0zHi
  11++D0E7 32 E3 C0                             ld      (UBnkDrawCam0zSgn),a    ; UBnkDrawCam0zSgn
  12++D0EA C9                                   ret
  13++D0EB              ;                       ld      hl,UBnKxlo
  14++D0EB              ;                       ld      de,UBnkDrawCam0xLo
  15++D0EB              ;                       NineLDIInstrunctions                ; transfer 9 bytes
  16++D0EB C9                                   ret
  17++D0EC
  18++D0EC 2A DB C0     CopyCameraToXX15Signed: ld  hl,(UBnkDrawCam0xLo)
  19++D0EF 3A DD C0                             ld  a,(UBnkDrawCam0xSgn)
  20++D0F2 B4                                   or  h
  21++D0F3 67                                   ld  h,a
  22++D0F4 22 E7 C0                             ld  (UBnkXScaled),hl
  23++D0F7 2A DE C0                             ld  hl,(UBnkDrawCam0yLo)
  24++D0FA 3A E0 C0                             ld  a,(UBnkDrawCam0ySgn)
  25++D0FD B4                                   or  h
  26++D0FE 67                                   ld  h,a
  27++D0FF 22 E9 C0                             ld  (UBnkYScaled),hl
  28++D102 2A E1 C0                             ld  hl,(UBnkDrawCam0zLo)
  29++D105 3A E3 C0                             ld  a,(UBnkDrawCam0zSgn)
  30++D108 B4                                   or  h
  31++D109 67                                   ld  h,a
  32++D10A 22 EB C0                             ld  (UBnkZScaled),hl
  33++D10D C9                                   ret
  34++D10E
  35++D10E              ;;;CopyXX18ScaledToXX15:
  36++D10E              ;;;CopyDrawCamToScaledMatrix:
  37++D10E              ;;;        ldCopyByte  UBnkDrawCam0zSgn, UBnkZScaledSign   ; XX18+8 => XX15+5
  38++D10E              ;;;        ldCopyByte  UBnkDrawCam0xLo,  UBnkXScaled       ; XX18+0 => XX15+0
  39++D10E              ;;;        ldCopyByte  UBnkDrawCam0xSgn, UBnkXScaledSign   ; XX18+2 => XX15+1
  40++D10E              ;;;        ldCopyByte  UBnkDrawCam0yLo,  UBnkYScaled       ; XX18+3 => XX15+2
  41++D10E              ;;;        ldCopyByte  UBnkDrawCam0ySgn, UBnkYScaledSign   ; XX18+5 => XX15+3
  42++D10E              ;;;        ldCopyByte  UBnkDrawCam0zLo,  UBnkZScaled       ; XX18+6 => XX15+4
  43++D10E              ;;;        ret
  44++D10E
  45++D10E              ;;;CopyXX15ToXX18Scaled:
  46++D10E              ;;;CopyScaledMatrixToDrawCam:
  47++D10E              ;;;        ldCopyByte UBnkZScaledSign,   UBnkDrawCam0zSgn  ; XX15+5 => XX18+8
  48++D10E              ;;;        ldCopyByte UBnkXScaled,       UBnkDrawCam0xLo   ; XX15+0 => XX18+0
  49++D10E              ;;;        ldCopyByte UBnkXScaledSign,   UBnkDrawCam0xSgn  ; XX15+1 => XX18+2
  50++D10E              ;;;        ldCopyByte UBnkYScaled,       UBnkDrawCam0yLo   ; XX15+2 => XX18+3
  51++D10E              ;;;        ldCopyByte UBnkYScaledSign,   UBnkDrawCam0ySgn  ; XX15+3 => XX18+5
  52++D10E              ;;;        ldCopyByte UBnkZScaled,       UBnkDrawCam0zLo   ; XX15+4 => XX18+6
  53++D10E              ;;;        ret
  54++D10E
  55++D10E
  56++D10E              XX15EquXX15AddXX18:
  57++D10E              LL94Z:
  58++D10E 26 00                ld      h,0                                                     ;           AddZ = FaceData (XX12)z +  ShipPos (XX18)z
  59++D110 16 00                ld      d,0                                                     ;
  60++D112 3A EB C0             ld      a,(UBnkZScaled)                                         ;
  61++D115 6F                   ld      l,a                                                     ;
  62++D116 3A EC C0             ld      a,(UBnkZScaledSign)                                     ;
  63++D119 47                   ld      b,a                                                     ;
  64++D11A 3A E1 C0             ld      a,(UBnkDrawCam0zLo)                                     ;
  65++D11D 5F                   ld      e,a                                                     ;
  66++D11E 3A E3 C0             ld      a,(UBnkDrawCam0zSgn)                                    ;
  67++D121 4F                   ld      c,a                                                     ;
  68++D122 CD 33 00             call    ADDHLDESignBC                                           ;
  69++D125 47                   ld      b,a                                                     ;
  70++D126 7C                   ld      a,h                                                     ;
  71++D127 78                   ld      a,b                                                     ;           else  Scaled (XX15) Z = AddZ
  72++D128 32 EC C0             ld      (UBnkZScaledSign),a                                     ;
  73++D12B 7D                   ld      a,l                                                     ;
  74++D12C 32 EB C0             ld      (UBnkZScaled),a                                         ;           endif
  75++D12F              LL94X:
  76++D12F 26 00                ld      h,0                                                     ;           AddZ = FaceData (XX12)z +  ShipPos (XX18)z
  77++D131 16 00                ld      d,0                                                     ;
  78++D133 3A E7 C0             ld      a,(UBnkXScaled)                                         ;
  79++D136 6F                   ld      l,a                                                     ;
  80++D137 3A E8 C0             ld      a,(UBnkXScaledSign)                                     ;
  81++D13A 47                   ld      b,a                                                     ;
  82++D13B 3A DB C0             ld      a,(UBnkDrawCam0xLo)                                     ;
  83++D13E 5F                   ld      e,a                                                     ;
  84++D13F 3A DD C0             ld      a,(UBnkDrawCam0xSgn)                                    ;
  85++D142 4F                   ld      c,a                                                     ;
  86++D143 CD 33 00             call    ADDHLDESignBC                                           ;
  87++D146 47                   ld      b,a                                                     ;
  88++D147 7C                   ld      a,h                                                     ;
  89++D148 78                   ld      a,b                                                     ;           else  Scaled (XX15) Z = AddZ
  90++D149 32 E8 C0             ld      (UBnkXScaledSign),a                                     ;
  91++D14C 7D                   ld      a,l                                                     ;
  92++D14D 32 E7 C0             ld      (UBnkXScaled),a                                         ;           endif
  93++D150              LL94Y:
  94++D150 26 00                ld      h,0                                                     ;           AddZ = FaceData (XX12)z +  ShipPos (XX18)z
  95++D152 16 00                ld      d,0                                                     ;
  96++D154 3A E9 C0             ld      a,(UBnkYScaled)                                         ;
  97++D157 6F                   ld      l,a                                                     ;
  98++D158 3A EA C0             ld      a,(UBnkYScaledSign)                                     ;
  99++D15B 47                   ld      b,a                                                     ;
 100++D15C 3A DE C0             ld      a,(UBnkDrawCam0yLo)                                     ;
 101++D15F 5F                   ld      e,a                                                     ;
 102++D160 3A E0 C0             ld      a,(UBnkDrawCam0ySgn)                                    ;
 103++D163 4F                   ld      c,a                                                     ;
 104++D164 CD 33 00             call    ADDHLDESignBC                                           ;
 105++D167 47                   ld      b,a                                                     ;
 106++D168 7C                   ld      a,h                                                     ;
 107++D169 78                   ld      a,b                                                     ;           else  Scaled (XX15) Z = AddZ
 108++D16A 32 EA C0             ld      (UBnkYScaledSign),a                                     ;
 109++D16D 7D                   ld      a,l                                                     ;
 110++D16E 32 E9 C0             ld      (UBnkYScaled),a                                         ;
 111++D171 C9                   ret
 112++D172
# file closed: ././Universe/Ships/CopyXX18ScaledToXX15.asm
1008+ D172                                      include "./Universe/Ships/CopyXX12ToScaled.asm"
# file opened: ././Universe/Ships/CopyXX12ToScaled.asm
   1++D172              CopyXX12ToScaled:
   2++D172              CopyResultToScaled:
   3++D172                      ldCopyByte  XX12+0,UBnkXScaled      ; xnormal lo
   3++D172 3A ED C0    >                        ld       a,(XX12+0)
   3++D175 32 E7 C0    >                        ld       (UBnkXScaled),a
   4++D178                      ldCopyByte  XX12+2,UBnkYScaled      ; ynormal lo
   4++D178 3A EF C0    >                        ld       a,(XX12+2)
   4++D17B 32 E9 C0    >                        ld       (UBnkYScaled),a
   5++D17E                      ldCopyByte  XX12+4,UBnkZScaled      ; znormal lo and leaves a holding zscaled normal
   5++D17E 3A F1 C0    >                        ld       a,(XX12+4)
   5++D181 32 EB C0    >                        ld       (UBnkZScaled),a
   6++D184 C9                   ret
   7++D185
# file closed: ././Universe/Ships/CopyXX12ToScaled.asm
1009+ D185              ;--------------------------------------------------------------------------------------------------------
1010+ D185                                      include "./Maths/Utilities/DotProductXX12XX15.asm"
# file opened: ././Maths/Utilities/DotProductXX12XX15.asm
   1++D185              ;;; Q = XX12 xLo ,A = XX15 xLo
   2++D185              ;;; T = A * Q/256 Usgined  (FMLTU)
   3++D185              ;;; S = XX12 XSign Xor XX15 XSign
   4++D185              ;;; Q = XX12 Ynormal Lo, A = XX15+2 (y lo)
   5++D185              ;;; Q = A * Q/256 Usigned (FMLTI)
   6++D185              ;;; R = T
   7++D185              ;;; A = XX12+3 (ySign) Xor XX15+3 (ySign)
   8++D185              ;;; T = BADD s(A) = R + Q(SA) (xdot + ydot)
   9++D185              ;;; Q = XX12+4 (znormal lo) A = XX15+4 z lo
  10++D185              ;;; Q = A * Q /256 usigned (zdot)
  11++D185              ;;; R = T
  12++D185              ;;; A - XX15+ 5 Zsign Xor XX12+5 Z Sign
  13++D185
  14++D185
  15++D185
  16++D185
  17++D185
  18++D185              MacroAequDxEdiv256usgn:	MACRO
  19++D185 ~            						mul
  20++D185 ~            						ld	a,d				; we get only the high byte which is like doing a /256 if we think of a as low
  21++D185              						ENDM
  22++D185              DotProductXX12XX15:
  23++D185 3A ED C0             ld          a,(UBnkXX12xLo)         ; Use e as var Q for xnormal lo
  24++D188                      JumpIfAIsZero dotxskipzero
  24++D188 A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
  24++D189 CA A6 D1    >                        jp	    z, dotxskipzero
  25++D18C 5F                   ld          e,a
  26++D18D 3A E7 C0             ld          a,(UBnkXScaled)         ; use d as XX12 world xform x, e = norm x
  27++D190 57                   ld          d,a                     ; de = xx12 x signed
  28++D191                      JumpIfAIsZero dotxskipzero
  28++D191 A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
  28++D192 CA A6 D1    >                        jp	    z, dotxskipzero
  29++D195 ED 30        		mul
  30++D197 42                   ld          b,d                     ; b = result
  31++D198 3A EE C0             ld          a,(UBnkXX12xSign)
  32++D19B 21 E8 C0             ld          hl,UBnkXScaledSign
  33++D19E AE                   xor         (hl)
  34++D19F E6 80                and         $80                     ; so sign bit only
  35++D1A1 FD 67                ld          iyh ,a                   ; we actually need to preserve sign in iyh here
  36++D1A3 C3 AA D1             jp          dotmuly
  37++D1A6              dotxskipzero:
  38++D1A6 AF                   xor         a
  39++D1A7 47                   ld          b,a
  40++D1A8 FD 67                ld          iyh,a
  41++D1AA              dotmuly:
  42++D1AA              ; now we have b = XX12 x &d  norm x signed
  43++D1AA 3A EF C0             ld          a,(UBnkXX12yLo)
  44++D1AD                      JumpIfAIsZero dotyskipzero
  44++D1AD A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
  44++D1AE CA CD D1    >                        jp	    z, dotyskipzero
  45++D1B1 5F                   ld          e,a
  46++D1B2 3A E9 C0             ld          a,(UBnkYScaled)         ; XX15+2
  47++D1B5                      JumpIfAIsZero dotyskipzero
  47++D1B5 A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
  47++D1B6 CA CD D1    >                        jp	    z, dotyskipzero
  48++D1B9 57                   ld          d,a                     ; de = xx12 x signed
  49++D1BA ED 30                mul
  50++D1BC 4A                   ld          c,d                     ; c = result
  51++D1BD DD 69                ld          ixl,c
  52++D1BF 3A F0 C0             ld          a,(UBnkXX12ySign)       ; A = ysg
  53++D1C2 21 EA C0             ld          hl, UBnkYScaledSign     ; a= y sign XOR Y scaled sign
  54++D1C5 AE                   xor         (hl)                    ; XX15+3
  55++D1C6 E6 80                and         $80                     ; do b = x mul c = y mul, iyh = sign for b and a = sign for c
  56++D1C8 DD 67                ld          ixh,a
  57++D1CA C3 D1 D1             jp          dotaddxy
  58++D1CD              dotyskipzero:
  59++D1CD AF                   xor         a
  60++D1CE 4F                   ld          c,a
  61++D1CF DD 67                ld          ixh,a
  62++D1D1              dotaddxy:
  63++D1D1              ; Optimise later as this is 16 bit
  64++D1D1 26 00                ld          h,0                     ;
  65++D1D3 68                   ld          l,b                     ; hl = xlo + x scaled
  66++D1D4 16 00                ld          d,0                     ;
  67++D1D6 59                   ld          e,c                     ; de = ylo + yscaled
  68++D1D7 FD 44                ld          b,iyh                   ; b = sign of xlo + xscaled
  69++D1D9 4F                   ld          c,a                     ; c = sign of ylo + yscaled
  70++D1DA CD 33 00             call ADDHLDESignBC                  ; so now hl = result so will push sign to h
  71++D1DD 47                   ld          b,a                     ; b = resultant sign , hl = add so far
  72++D1DE 3A F1 C0             ld          a,(UBnkXX12zLo)         ;
  73++D1E1                      JumpIfAIsZero dotzskipzero
  73++D1E1 A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
  73++D1E2 CA 07 D2    >                        jp	    z, dotzskipzero
  74++D1E5 5F                   ld          e,a                     ;
  75++D1E6 3A EB C0             ld          a,(UBnkZScaled)         ;
  76++D1E9                      JumpIfAIsZero dotzskipzero
  76++D1E9 A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
  76++D1EA CA 07 D2    >                        jp	    z, dotzskipzero
  77++D1ED 57                   ld          d,a
  78++D1EE ED 30                mul
  79++D1F0 E5                   push        hl                      ; save prev result
  80++D1F1 3A EC C0             ld          a,(UBnkZScaledSign)
  81++D1F4 21 F2 C0             ld          hl, UBnkXX12zSign       ; XX15+5
  82++D1F7 AE                   xor         (hl)                    ; hi sign
  83++D1F8 E6 80                and         $80                     ; a = sign of multiply
  84++D1FA 4F                   ld          c,a                     ; c = sign of z lo & z scaled
  85++D1FB E1                   pop         hl
  86++D1FC 5A                   ld          e,d
  87++D1FD 16 00                ld          d,0
  88++D1FF CD 33 00             call ADDHLDESignBC
  89++D202 32 B8 7F             ld          (varS),a
  90++D205 7D                   ld          a,l
  91++D206 C9                   ret                                 ; returns with A = value, varS = sign
  92++D207              dotzskipzero:                               ; if we got here then z was zero so no component so just tidy up from last add
  93++D207 78                   ld          a,b
  94++D208 32 B8 7F             ld          (varS),a
  95++D20B 7D                   ld          a,l
  96++D20C C9                   ret
  97++D20D              ;;;;       DotProductXX12XX15:
  98++D20D              ;;;;       ld          a,(UBnkXX12xLo)         ; Use e as var Q for xnormal lo
  99++D20D              ;;;;       ld          e,a
 100++D20D              ;;;;       ld          a,(UBnkXScaled)         ; use d as XX12 world xform x, e = norm x
 101++D20D              ;;;;       ld          d,a                     ; de = xx12 x signed
 102++D20D              ;;;;		; FMLTU	\ A=A*Q/256unsg using D as A and E as Q
 103++D20D              ;;;;		mul
 104++D20D              ;;;;       ld          b,d                     ; b as var T
 105++D20D              ;;;;       ld          a,(UBnkXX12xSign)
 106++D20D              ;;;;       ld          hl,UBnkXScaledSign
 107++D20D              ;;;;       xor         (hl)
 108++D20D              ;;;;       and         $80                     ; so sign bit only
 109++D20D              ;;;;       ld          (varS),a                ; we did use c as S \ S	\ x-sign, but we actually need it in varS for BADD
 110++D20D              ;;;; now we have b = XX12 x & norm x signed
 111++D20D              ;;;; by here B = xlo & xscaled C = result sign
 112++D20D              ;;;;       ld          a,(UBnkXX12yLo)
 113++D20D              ;;;;       ld          e,a
 114++D20D              ;;;;       ld          a,(UBnkYScaled)         ; XX15+2
 115++D20D              ;;;;		ld          d,a						; MISSED THIS EARLIER BUG FIX
 116++D20D              ;;;;       mul
 117++D20D              ;;;;       ld          a,d
 118++D20D              ;;;;       ld          (varQ),a                ; Q = Y y-dot
 119++D20D              ;;;;       ld          a,b                     ; get back T from above held in b
 120++D20D              ;;;;       ld          (varR),a                ; R= b \ T	\ x-dot
 121++D20D              ;;;;       ld          a,(UBnkXX12ySign)       ; A = ysg
 122++D20D              ;;;;       ld          hl, UBnkYScaledSign     ; a= y sign XOR Y scaled sign
 123++D20D              ;;;;       xor         (hl)                    ; XX15+3
 124++D20D              ;;;;       and         $80
 125++D20D              ;;;;       call        baddll38                ; LL38	\ BADD(S)A=R+Q(SA)   \ 1byte add (subtract)
 126++D20D              ;;;;       ld          (varT),a                ; var T	\ xdot+ydot
 127++D20D              ;;;;       ld          a,(UBnkXX12zLo)         ; use d as  varQ        ; XX12+4	\ znormal lo to varQ
 128++D20D              ;;;;       ld          e,a                     ; use e as var Q
 129++D20D              ;;;;       ld          a,(UBnkZScaled)         ;
 130++D20D              ;;;;       ld          d,a
 131++D20D              ;;;;       mul
 132++D20D              ;;;;       ld          a,d
 133++D20D              ;;;;       ld          (varQ),a                ; Q	\ zdot
 134++D20D              ;;;;       ldCopyByte  varT,varR               ; copy T to R so R = resutl of previous calc
 135++D20D              ;;;;       ld          a,(UBnkZScaledSign)
 136++D20D              ;;;;       ld          hl, UBnkXX12zSign       ; XX15+5
 137++D20D              ;;;;       xor         (hl)                    ; hi sign
 138++D20D              ;;;;       and         $80
 139++D20D              ;;;;       call        baddll38                ; LL38	\ BADD(S)A=R+Q(SA)   \ 1byte add (subtract)
 140++D20D              ;;;;       ret                                 ; returns with A = value, varS = sign
 141++D20D
# file closed: ././Maths/Utilities/DotProductXX12XX15.asm
1011+ D20D              ;--------------------------------------------------------------------------------------------------------
1012+ D20D              ; scale Normal. IXL is xReg and A is loaded with XX17 holds the scale factor to apply
1013+ D20D              ; Not Used in code      include "Universe/Ships/ScaleNormal.asm"
1014+ D20D              ;--------------------------------------------------------------------------------------------------------
1015+ D20D                                      include "./Universe/Ships/ScaleObjectDistance.asm"
# file opened: ././Universe/Ships/ScaleObjectDistance.asm
   1++D20D              ScaleObjectDistance:
   2++D20D              ; ">ScaleObjectDistance, scales camera location and returns c = scaling factor (equiv of X reg)"
   3++D20D 3A 4A C4             ld      a,(QAddr)                   ; Hull byte #18 normals scaled by 2^Q% DtProd^XX2  their comment   Dot product gives  normals' visibility in XX2
   4++D210 4F                   ld      c,a                         ; c = Q factor for scaling of normals
   5++D211              LL90:                                       ; scaling object distance
   6++D211 3A E2 C0             ld      a,(UBnkDrawCam0zHi)         ; z_hi
   7++D214 47                   ld      b,a                         ; z_hi (yReg)
   8++D215                      ReturnIfAIsZero                     ; if zHi 0 test ifis object close/small, i.e. zhi already zero then we are done
   8++D215 A7          >                        and     a
   8++D216 C8          >                        ret     z
   9++D217              LL90Loop:
  10++D217              ; Loop dividing camera by 2 until zhi is 0 and updating scale factor
  11++D217 0C                   inc     c                           ; LL90+3 \ repeat INWK z brought closer, take Qscale X up
  12++D218                      ShiftMem16Right1 UBnkDrawCam0yLo    ; cam Y /= 2
  12++D218 2A DE C0    >                    ld    hl,(UBnkDrawCam0yLo)
  12++D21B CB 3C       >                    srl   h
  12++D21D CB 1D       >                    rr    l
  12++D21F 22 DE C0    >                    ld    (UBnkDrawCam0yLo),hl
  13++D222                      ShiftMem16Right1 UBnkDrawCam0xLo    ; cam X /= 2
  13++D222 2A DB C0    >                    ld    hl,(UBnkDrawCam0xLo)
  13++D225 CB 3C       >                    srl   h
  13++D227 CB 1D       >                    rr    l
  13++D229 22 DB C0    >                    ld    (UBnkDrawCam0xLo),hl
  14++D22C                      ShiftMem16Right1 UBnkDrawCam0zLo    ; cam Z /= 2
  14++D22C 2A E1 C0    >                    ld    hl,(UBnkDrawCam0zLo)
  14++D22F CB 3C       >                    srl   h
  14++D231 CB 1D       >                    rr    l
  14++D233 22 E1 C0    >                    ld    (UBnkDrawCam0zLo),hl
  15++D236 7C                   ld      a,h                         ; last shift will result in zhi adjusted into h reg.
  16++D237                      JumpIfAIsNotZero LL90Loop           ; loop until z hi = 0 this gives scalinging in c
  16++D237 A7          >                        and     a
  16++D238 C2 17 D2    >                        jp	    nz,LL90Loop
  17++D23B C9                   ret
  18++D23C
# file closed: ././Universe/Ships/ScaleObjectDistance.asm
1016+ D23C              ;--------------------------------------------------------------------------------------------------------
1017+ D23C
1018+ D23C              ; Backface cull
1019+ D23C              ; is the angle between the ship -> camera vector and the normal of the face as long as both are unit vectors soo we can check that normal z > 0
1020+ D23C              ; normal vector = cross product of ship ccordinates
1021+ D23C              ;
1022+ D23C                                      include "./Universe/Ships/CopyFaceToXX15.asm"
# file opened: ././Universe/Ships/CopyFaceToXX15.asm
   1++D23C 7E           CopyFaceToXX15:         ld      a,(hl)                      ; get Normal byte 0                                                                    ;;;     if visibility (bits 4 to 0 of byte 0) > XX4
   2++D23D 47                                   ld      b,a                                                    ;;;
   3++D23E E6 80                                and     SignOnly8Bit
   4++D240 32 E8 C0                             ld      (UBnkXScaledSign),a           ; write Sign bits to x sign                                                            ;;;
   5++D243 78                                   ld      a,b
   6++D244 CB 27                                sla     a                           ; move y sign to bit 7                                                                 ;;;   copy sign bits to XX12
   7++D246 47                                   ld      b,a
   8++D247 E6 80                                and     SignOnly8Bit
   9++D249 32 EA C0                             ld      (UBnkYScaledSign),a           ;                                                                                      ;;;
  10++D24C 78                                   ld      a,b
  11++D24D CB 27                                sla     a                           ; move y sign to bit 7                                                                 ;;;   copy sign bits to XX12
  12++D24F E6 80                                and     SignOnly8Bit
  13++D251 32 EC C0                             ld      (UBnkZScaledSign),a           ;                                                                                      ;;;
  14++D254 23                                   inc     hl                          ; move to X ccord
  15++D255 7E                                   ld      a,(hl)                      ;                                                                                      ;;;   XX12 x,y,z lo = Normal[loop].x,y,z
  16++D256 32 E7 C0                             ld      (UBnkXScaled),a                                                                                                    ;;;
  17++D259 23                                   inc     hl                                                                                                                 ;;;
  18++D25A 7E                                   ld      a,(hl)                      ;                                                                                      ;;;
  19++D25B 32 E9 C0                             ld      (UBnkYScaled),a                                                                                                    ;;;
  20++D25E 23                                   inc     hl                                                                                                                 ;;;
  21++D25F 7E                                   ld      a,(hl)                      ;                                                                                      ;;;
  22++D260 32 EB C0                             ld      (UBnkZScaled),a
  23++D263 C9                                   ret
  24++D264
# file closed: ././Universe/Ships/CopyFaceToXX15.asm
1023+ D264                                      include "./Universe/Ships/CopyFaceToXX12.asm"
# file opened: ././Universe/Ships/CopyFaceToXX12.asm
   1++D264 7E           CopyFaceToXX12:         ld      a,(hl)                      ; get Normal byte 0                                                                    ;;;     if visibility (bits 4 to 0 of byte 0) > XX4
   2++D265 47                                   ld      b,a                         ; save sign bits to b
   3++D266 E6 80                                and     SignOnly8Bit
   4++D268 32 EE C0                             ld      (UBnkXX12xSign),a           ; write Sign bits to x sign                                                            ;;;
   5++D26B 78                                   ld      a,b
   6++D26C CB 27                                sla     a                           ; move y sign to bit 7                                                                 ;;;   copy sign bits to XX12
   7++D26E 47                                   ld      b,a
   8++D26F E6 80                                and     SignOnly8Bit
   9++D271 32 F0 C0                             ld      (UBnkXX12ySign),a           ;                                                                                      ;;;
  10++D274 78                                   ld      a,b
  11++D275 CB 27                                sla     a                           ; move y sign to bit 7                                                                 ;;;   copy sign bits to XX12
  12++D277 E6 80                                and     SignOnly8Bit
  13++D279 32 F2 C0                             ld      (UBnkXX12zSign),a           ;                                                                                      ;;;
  14++D27C 23                                   inc     hl                          ; move to X ccord
  15++D27D 7E                                   ld      a,(hl)                      ;                                                                                      ;;;   XX12 x,y,z lo = Normal[loop].x,y,z
  16++D27E 32 ED C0                             ld      (UBnkXX12xLo),a                                                                                                    ;;;
  17++D281 23                                   inc     hl                                                                                                                 ;;;
  18++D282 7E                                   ld      a,(hl)                      ;                                                                                      ;;;
  19++D283 32 EF C0                             ld      (UBnkXX12yLo),a                                                                                                    ;;;
  20++D286 23                                   inc     hl                                                                                                                 ;;;
  21++D287 7E                                   ld      a,(hl)                      ;                                                                                      ;;;
  22++D288 32 F1 C0                             ld      (UBnkXX12zLo),a
  23++D28B C9                                   ret
  24++D28C
# file closed: ././Universe/Ships/CopyFaceToXX12.asm
1024+ D28C              ;--------------------------------------------------------------
1025+ D28C              ; Original loginc in EE29 (LL9 4 of 12)
1026+ D28C              ; Enters with XX4 = z distnace scaled to 1 .. 31
1027+ D28C              ; get number of faces * 4      FaceCntX4
1028+ D28C              ; return if no faces
1029+ D28C              ; get Face Normal scale factor FaceScale (XX17)
1030+ D28C              ; get ship pos z hi     (XX18)
1031+ D28C              ; While Z hi <> 0
1032+ D28C              ;    FaceScale = FaceScale + 1           (XX17)
1033+ D28C              ;    Ship pos y = ship pos y / 2         (XX18)
1034+ D28C              ;    ship pos x = ship pos x / 2         (XX18)
1035+ D28C              ;    ship pos z = ship pos z / 2         (XX18)
1036+ D28C              ; Loop
1037+ D28C              ; Copy Ship Pos (XX18) to Scaled         (XX15)
1038+ D28C              ; Get Dot Product of Scaled (XX15) and XX16 (pre inverted) into XX12
1039+ D28C              ; Copy XX12 into XX18
1040+ D28C              ; For each face
1041+ D28C              ;     Get Face sign and visibility distance byte
1042+ D28C              ;     if normal visibility range  < XX4
1043+ D28C              ;        Get Face data into XX12
1044+ D28C              ;        if FaceScale (XX17) >= 4
1045+ D28C              ;            Copy Ship Pos (XX18) to scaled (XX15)                                                                  ::LL143
1046+ D28C              ;        else
1047+ D28C              ;           Copy FaceScale scaled to X  (XX17)
1048+ D28C              ;LabelOverflowLoop:
1049+ D28C              ;           Copy FaceData (XX12) to Scaled (XX15)                                                                   ::LL92
1050+ D28C              ;           While X >= 0
1051+ D28C              ;              X--                                                                                                  ::LL93
1052+ D28C              ;              if  x >= 0
1053+ D28C              ;                  XX15x = XX15x / 2
1054+ D28C              ;                  XX15y = XX15y / 2
1055+ D28C              ;                  XX15y = XX15y / 2
1056+ D28C              ;           loop
1057+ D28C              ;           AddZ = FaceData (XX12)z +  ShipPos (XX18)z                                                              ::LL94
1058+ D28C              ;           if A > 256 (i.e. was overflow)
1059+ D28C              ;               ShipPos (XX18)x,y & z = ShipPos(XX18)x,y & z / 2 (Divide each component by 2)
1060+ D28C              ;               X = 1
1061+ D28C              ;               Goto LabelOverflowLoop
1062+ D28C              ;           else
1063+ D28C              ;              Scaled (XX15) Z = AddZ
1064+ D28C              ;           endif
1065+ D28C              ;           AddX = FaceData (XX12)x +  ShipPos (XX18)x
1066+ D28C              ;           if A > 256 (i.e. was overflow)
1067+ D28C              ;               ShipPos (XX18)x,y & z = ShipPos(XX18)x,y & z / 2 (Divide each component by 2)
1068+ D28C              ;               X = 1
1069+ D28C              ;               Goto LabelOverflowLoop
1070+ D28C              ;           else
1071+ D28C              ;              Scaled (XX15) X = AddX
1072+ D28C              ;           endif
1073+ D28C              ;           AddY = FaceData (XX12)y +  ShipPos (XX18)y
1074+ D28C              ;           if A > 256 (i.e. was overflow)
1075+ D28C              ;               ShipPos (XX18)x,y & z = ShipPos(XX18)x,y & z / 2 (Divide each component by 2)
1076+ D28C              ;               X = 1
1077+ D28C              ;               Goto LabelOverflowLoop
1078+ D28C              ;           else
1079+ D28C              ;              Scaled (XX15) Y = AddY
1080+ D28C              ;           endif
1081+ D28C              ;        endif
1082+ D28C              ;        calculate dot product XX12.XX15  (XX15x * XX12x /256 + XX15y * XX12y /256 + XX15z * XX12z /256)        ::LL89
1083+ D28C              ;        if dot product < 0
1084+ D28C              ;           set face visible
1085+ D28C              ;        else
1086+ D28C              ;           set face invisible
1087+ D28C              ;        end if
1088+ D28C              ;     else
1089+ D28C              ;       Set FaceVisibility to true
1090+ D28C              ;     end if
1091+ D28C              ; Next Face
1092+ D28C
1093+ D28C              ;line of sight vector = [x y z] + face normal vector
1094+ D28C
1095+ D28C              ;               [ [x y z] . sidev + normal_x ]   [ normal_x ]
1096+ D28C              ;  visibility = [ [x y z] . roofv + normal_y ] . [ normal_y ]
1097+ D28C              ;               [ [x y z] . nosev + normal_z ]   [ normal_z ]
1098+ D28C              ;
1099+ D28C              ;--------------------------------------------------------------
1100+ D28C              ; line of sight (eye outwards dot face normal vector < 0
1101+ D28C              ; So lin eof sight = vector from 0,0,0 to ship pos, now we need to consider teh ship's facing
1102+ D28C              ; now if we add teh veector for teh normal(times magnitude)) to teh ship position we have the true center of the face
1103+ D28C              ; now we can calcualt teh dot product of this caulated vector and teh normal which if < 0 is goot. this means we use rot mat not inverted rotmat.
1104+ D28C                  include "./ModelRender/BackfaceCull.asm"
# file opened: ././ModelRender/BackfaceCull.asm
   1++D28C              ;    DEFINE DEBUGDRAWDISTANCE 1
   2++D28C                  DEFINE CHECKDOTSHIPDATA  1
   3++D28C               ;   DEFINE DEBUGFORCEFACEDRAW 1
   4++D28C 00           CurrentNormIdx  DB 0
   5++D28D              ; SomeFacesVisible:
   6++D28D              ; EE29:
   7++D28D
   8++D28D              ;   Backface cull logic  line of sight vector . face normal vector
   9++D28D              ;       line of sight vector . face normal vector
  10++D28D              ;       => line of sight vector = [x y z] + face normal vector
  11++D28D              ;       Where [x y z] =
  12++D28D              ;                                               [ [x y z] . sidev ]
  13++D28D              ;                    projected [x y z] vector = [ [x y z] . roofv ]
  14++D28D              ;                                               [ [x y z] . nosev ]
  15++D28D              ;
  16++D28D              ;   so project the [x y z] vector into the face's normal space
  17++D28D              ;  line of sight vector = projected [x y z] vector + face normal vector
  18++D28D              ;                         [ [x y z] . sidev ]   [ normal_x ]
  19++D28D              ;                       = [ [x y z] . roofv ] + [ normal_y ]
  20++D28D              ;                         [ [x y z] . nosev ]   [ normal_z ]
  21++D28D              ;
  22++D28D              ;                         [ [x y z] . sidev + normal_x ]
  23++D28D              ;                       = [ [x y z] . roofv + normal_y ]
  24++D28D              ;                         [ [x y z] . nosev + normal_z ]
  25++D28D              ;
  26++D28D              ; so
  27++D28D              ;              visibility = [ [x y z] . sidev + normal_x ]   [ normal_x ]
  28++D28D              ;                            [ [x y z] . roofv + normal_y ] . [ normal_y ]
  29++D28D              ;                           [ [x y z] . nosev + normal_z ]   [ normal_z ]
  30++D28D              ;
  31++D28D              ; where face is visible if visibility < 0
  32++D28D              ;
  33++D28D              ;   so we set XX15 to [x y z] . sidev
  34++D28D              ;                     [x y z] . roofv
  35++D28D              ;                     [x y z] . nosev
  36++D28D              ;
  37++D28D
  38++D28D
  39++D28D
  40++D28D 3A E2 C0     ScaleDrawcam:           ld      a,(UBnkDrawCam0zHi)         ; if z hi is 0 then we have scaled XX18
  41++D290                                      JumpIfAIsZero .ScaleDone            ;
  41++D290 A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
  41++D291 CA BD D2    >                        jp	    z, .ScaleDone
  42++D294 2A DB C0                             ld      hl,(UBnkDrawCam0xLo)        ; pull postition into registers
  43++D297 ED 5B DE C0                          ld      de,(UBnkDrawCam0yLo)        ; we only pull in if needed to save fetches
  44++D29B ED 4B E1 C0                          ld      bc,(UBnkDrawCam0zLo)        ;
  45++D29F FD 2C        .ScaleNormalLoop:       inc     iyl                         ; Q goes up by one
  46++D2A1                                      ShiftHLRight1                       ; divide cam position by 2
  46++D2A1 CB 3C       >			   srl h
  46++D2A3 CB 1D       >			   rr  l
  47++D2A5                                      ShiftDERight1                       ;
  47++D2A5 CB 3A       >			   srl d
  47++D2A7 CB 1B       >			   rr  e
  48++D2A9                                      ShiftBCRight1                       ;
  48++D2A9 CB 38       >			   srl b
  48++D2AB CB 19       >			   rr  c
  49++D2AD 78                                   ld      a,b                         ; loop if not scaled down
  50++D2AE                                      JumpIfAIsNotZero .ScaleNormalLoop     ;
  50++D2AE A7          >                        and     a
  50++D2AF C2 9F D2    >                        jp	    nz,.ScaleNormalLoop
  51++D2B2 22 DB C0                             ld      (UBnkDrawCam0xLo),hl        ; save position back to XX18
  52++D2B5 ED 53 DE C0                          ld      (UBnkDrawCam0yLo),de        ;
  53++D2B9 ED 43 E1 C0                          ld      (UBnkDrawCam0zLo),bc        ;
  54++D2BD FD 7D        .ScaleDone:             ld      a,iyl
  55++D2BF 32 BD 7F                             ld      (varXX17),a                  ; XX17 = normal scale factor for current ship adjusted for camera
  56++D2C2 C9                                   ret
  57++D2C3
  58++D2C3 3A 28 C0     CheckVisible:           ld      a,(UBnKzsgn)                 ; Is the ship behind us
  59++D2C6 E6 80        .CheckBehind:           and     SignOnly8Bit                 ; which means z sign is negative
  60++D2C8 20 2A                                jr      nz,.ShipNoDraw               ; .
  61++D2CA 2A 26 C0     .CheckViewPort:         ld      hl,(UBnKzlo)                 ; now check to see if its within 90 degree arc
  62++D2CD 7C                                   ld      a,h
  63++D2CE                                      JumpIfAGTENusng ShipMaxDistance, .ShipNoDraw
  63++D2CE FE C0       >                        cp     ShipMaxDistance
  63++D2D0 D2 F4 D2    >                        jp		nc,.ShipNoDraw
  64++D2D3 ED 5B 20 C0  .CheckXAxis:            ld      de,(UBnKxlo)                 ; if abs x > abx z then its out side of view port
  65++D2D7 CD EA 9A                             call    compare16HLDE
  66++D2DA 38 18                                jr      c,.ShipNoDraw               ; ship is too far out on the X Axis
  67++D2DC ED 5B 23 C0  .CheckYAxis:            ld      de,(UBnKylo)                ; if abs y > abx z then its out side of view port
  68++D2E0 CD EA 9A                             call    compare16HLDE
  69++D2E3 38 0F                                jr      c,.ShipNoDraw               ; ship is too far out on the X Axis
  70++D2E5                                      IFDEF   CHECKDOTSHIPDATA
  71++D2E5 3A 45 C4     .CheckDotV2:                ld      a,(DotAddr)
  72++D2E8                                          JumpIfAGTENusng h, .DrawFull
  72++D2E8 BC          >                        cp     h
  72++D2E9 D2 EF D2    >                        jp		nc,.DrawFull
  73++D2EC C3 F8 D2                                 jp      .ShipIsADot
  74++D2EF CD C1 C7     .DrawFull:                  call    UnivVisibleNonDot           ;
  75++D2F2                                          ClearCarryFlag
  75++D2F2 B7          >                        or a
  76++D2F3 C9                                       ret
  77++D2F4                                      ELSE
  78++D2F4 ~            .CalculateXX4:              ShiftHLRight1                       ; hl = z pos / 8
  79++D2F4 ~                                        ShiftHLRight1                       ; .
  80++D2F4 ~                                        ShiftHLRight1                       ; .
  81++D2F4 ~                                        ld      a,h
  82++D2F4 ~                                        srl     a                           ; if a / 16 <> 0 then ship is a dot
  83++D2F4 ~            .DrawAsDotCheck:            JumpIfNotZero   .ShipIsADot
  84++D2F4 ~                                        ; Check visbility distance
  85++D2F4 ~            .SetXX4Dist:                ;break
  86++D2F4 ~                                        ld      a,l
  87++D2F4 ~                                        rra                                 ; l may have had bit 0 of h carried in
  88++D2F4 ~                                        srl     a                           ; so move it to bit 4 giving A as distance $000xxxxx
  89++D2F4 ~                                        srl     a
  90++D2F4 ~                                        srl     a
  91++D2F4 ~                                        ld      (UBnkDrawAllFaces),a        ; XX4 = "all faces" distance
  92++D2F4 ~                                        call    UnivVisibleNonDot               ;
  93++D2F4 ~                                        ClearCarryFlag
  94++D2F4 ~                                        ret
  95++D2F4                                      ENDIF
  96++D2F4 CD AF C7     .ShipNoDraw:            call    UnivInvisible
  97++D2F7 C9                                   ret
  98++D2F8              .ShipIsADot:            IFDEF DEBUGDRAWDISTANCE
  99++D2F8 ~                                        call    UnivVisible  ;
 100++D2F8                                      ELSE
 101++D2F8 CD CC C7                                 call    UnivVisibleDot
 102++D2FB                                      ENDIF
 103++D2FB C9                                   ret
 104++D2FC
 105++D2FC                                                  DISPLAY "TODO:remove all teh processing of rotmat to load craft to camera as its already been done"
 106++D2FC              CullV2:                 ReturnIfMemisZero FaceCtX4Addr      ;
 106++D2FC 3A 44 C4    >                        ld   a,(FaceCtX4Addr)
 106++D2FF A7          >                        and a
 106++D300 C8          >                        ret    z
 107++D301                                      ;break
 108++D301 CD FF CD                             call    CopyRotmatToTransMat        ; XX16 = UBNKRotMat
 109++D304 CD 30 7B                             call    ScaleXX16Matrix197          ; scale rotation matrix in XX16
 110++D307 CD C8 D0                             call    LoadCraftToCamera           ; XX18 = camera
 111++D30A                                      ;call    CopyCameraToXX15Signed      ; Copy the camera to XX15 as signed 15 bit
 112++D30A 3A 4A C4     .BackfaceLoop:          ld      a,(QAddr)                   ;
 113++D30D FD 6F                                ld      iyl,a                       ; iyl = scale factor
 114++D30F              ; By this point XX18 = scaled draw cam and iyl = scale factor
 115++D30F CD 8D D2                             call    ScaleDrawcam                ; XX18 = scaled camera XX17 = scale
 116++D312 CD EC D0                             call    CopyCameraToXX15Signed      ; Xx18 -> xx15 sign + 15 bit
 117++D315 CD C3 7A     .LL91:                  call    XX12EquNodeDotXX16          ; xx12 = Scaled Camera . Rotation matrix (Note Xx16 no Xx16 inv)
 118++D318 CD 59 D0                             call    CopyXX12ScaledToXX18        ; now xx18 = XX12 = xx15.xx16
 119++D31B 21 0A C6     .PrepNormals:           ld      hl,UBnkHullNormals                                                                                                 ;;; V = address of Normal start
 120++D31E 22 BC 7E                             ld      (varV),hl
 121++D321 3A 44 C4                             ld      a,(FaceCtX4Addr)                                        ; For each face
 122++D324 CB 3F                                srl     a                                              ;
 123++D326 CB 3F                                srl     a                                              ;
 124++D328 47                                   ld      b,a                                            ;
 125++D329 AF                                   xor     a
 126++D32A 32 8C D2                             ld      (CurrentNormIdx),a                                          ; used to increment up face incdex as b decrements
 127++D32D E5           .ProcessNormalsLoop:    push    hl
 128++D32E C5                                   push    bc
 129++D32F 7E           .LL86:                  ld      a,(hl)                                         ; Get Face sign and visibility distance byte
 130++D330 E6 1F                                and     $1F                                            ; if normal visibility range  < XX4
 131++D332 E5                                   push    hl
 132++D333 21 92 C0                             ld      hl,UBnkDrawAllFaces
 133++D336 BE                                   cp      (hl)
 134++D337 E1                                   pop     hl
 135++D338                                      IFDEF DEBUGFORCEFACEDRAW
 136++D338 ~                                        jp      .FaceVisible
 137++D338                                      ELSE
 138++D338 DA 7D D4                                 jp      c,.FaceVisible              ; then we always draw
 139++D33B                                      ENDIF
 140++D33B              ; This bit needs to be added to force face visible
 141++D33B CD 64 D2     .LL87:                  call    CopyFaceToXX12              ; XX12 = normal (repolaced scale version) as a working copy
 142++D33E 3A BD 7F                             ld      a,(XX17)                    ; a = q scale XX17 cauclated by the call to ScaleDrawcam
 143++D341 47                                   ld      b,a
 144++D342                                      JumpIfALTNusng 4,.ScaleNormByXX17   ; if q >= 4 then is so big we don;t factor in + normal for dot product
 144++D342 FE 04       >                        cp      4
 144++D344 DA 7F D3    >                        jp		c, .ScaleNormByXX17
 145++D347 CD A3 D0     .LL143:                 call    CopyXX18toXX15              ; and we just set XX15 = scaled Camera dot rotation matrix
 146++D34A C3 0E D4                             jp      .DoneScalingIntoXX15        ; Now Process XX12 normal
 147++D34D 3A DB C0     .Ovflw:                 ld      a,(UBnkDrawCam0xLo)         ; divide camera by 2 if overflow
 148++D350 CB 3F                                srl     a                           ; which is held in XX18
 149++D352 32 DB C0                             ld      (UBnkDrawCam0xLo),a         ; .
 150++D355 3A E1 C0                             ld      a,(UBnkDrawCam0zLo)         ; .
 151++D358 CB 3F                                srl     a                           ; .
 152++D35A 32 E1 C0                             ld      (UBnkDrawCam0zLo),a         ; .
 153++D35D 3A DE C0                             ld      a,(UBnkDrawCam0yLo)         ; .
 154++D360 CB 3F                                srl     a                           ; .
 155++D362 32 DE C0                             ld      (UBnkDrawCam0yLo),a        ; .
 156++D365 06 01        .ScaleXScaledAgain:     ld      b,1                         ; set scale to 1 so we divide original normal by 2 into face and try again and hope we didn't scaled down XX12 earlier so if we did then we must be in the do doo as the object was obscenely large and very close
 157++D367                                      ShiftMem8Right1 UBnkXScaled         ; Divide XX15 by 2^B
 157++D367 3A E7 C0    >                    ld      a,(UBnkXScaled)
 157++D36A CB 3F       >                    srl     a
 157++D36C 32 E7 C0    >                    ld      (UBnkXScaled),a
 158++D36F                                      ShiftMem8Right1 UBnkYScaled         ;
 158++D36F 3A E9 C0    >                    ld      a,(UBnkYScaled)
 158++D372 CB 3F       >                    srl     a
 158++D374 32 E9 C0    >                    ld      (UBnkYScaled),a
 159++D377                                      ShiftMem8Right1 UBnkZScaled         ;
 159++D377 3A EB C0    >                    ld      a,(UBnkZScaled)
 159++D37A CB 3F       >                    srl     a
 159++D37C 32 EB C0    >                    ld      (UBnkZScaled),a
 160++D37F              ; if we jumped to here scale factor < 4 so we copy in normal to XX15 (scaled) LL92
 161++D37F              .ScaleNormByXX17:       ;ld      b,a
 162++D37F CD 7E D0                             call    CopyXX12toXX15
 163++D382 05           .LL93                   dec     b
 164++D383 FA A2 D3                             jp      m, .ScaledNorm
 165++D386              .LL93Loop:              ShiftMem8Right1 UBnkXScaled        ; Divide XX15 by 2^B, I think this should be really XX12 and is a bug in the original code
 165++D386 3A E7 C0    >                    ld      a,(UBnkXScaled)
 165++D389 CB 3F       >                    srl     a
 165++D38B 32 E7 C0    >                    ld      (UBnkXScaled),a
 166++D38E                                      ShiftMem8Right1 UBnkYScaled        ;
 166++D38E 3A E9 C0    >                    ld      a,(UBnkYScaled)
 166++D391 CB 3F       >                    srl     a
 166++D393 32 E9 C0    >                    ld      (UBnkYScaled),a
 167++D396                                      ShiftMem8Right1 UBnkZScaled        ;
 167++D396 3A EB C0    >                    ld      a,(UBnkZScaled)
 167++D399 CB 3F       >                    srl     a
 167++D39B 32 EB C0    >                    ld      (UBnkZScaled),a
 168++D39E 05                                   dec     b                          ;
 169++D39F F2 86 D3                             jp      p,.LL93Loop                ; Now we have XX15 as scaled Normal, XX15 as camera, don;t really knwo why as cals work on XX12 and XX18
 170++D3A2              .ScaledNorm:            ;ORIG CODE DOES NOT HAVE THIS call    CopyXX15ToXX12 ; DEBUG as XX15 shoudl be a sacled nromal
 171++D3A2              ; Add normal to XX15
 172++D3A2              ; if we jumped here direct from LL143 then XX15 = drawcam scaled by Q, XX12 = face normal unscaled, XX18 = drawcam scaled also
 173++D3A2              ; if we jumped here via scaling       then XX15 = normal scaled by Q,  XX12 = face normal unscaled, XX16 = drawcam scaled
 174++D3A2              ; if we hit an overflow               then XX15 = drawcam scaled by Q  XX12 = face normal unscaled, XX18 = (drawcam scaled / 2 ) / 2^ nbr overflows (if we cam in vai scaling then its a mess?
 175++D3A2              ; So LL94 is wrong as it shoud be operating on XX12 not XX15
 176++D3A2              .LL94:                  ldCopyByte UBnkZScaled, varR        ; ldCopyByte  UBnkZScaled,     varR  ; if we jumped direct XX15 = drawcam scaled, Xx12 = normal xx18 = drawcam
 176++D3A2 3A EB C0    >                        ld       a,(UBnkZScaled)
 176++D3A5 32 B7 7F    >                        ld       (varR),a
 177++D3A8                                      ldCopyByte UBnkXX12zSign, varS      ; ldCopyByte  UBnkYScaled,     varS  ; if we did scaling then xx15 = norm scaled XX18 = drawcam
 177++D3A8 3A F2 C0    >                        ld       a,(UBnkXX12zSign)
 177++D3AB 32 B8 7F    >                        ld       (varS),a
 178++D3AE                                      ldCopyByte  UBnkDrawCam0zLo, varQ   ; AQ = drawcam Z signed
 178++D3AE 3A E1 C0    >                        ld       a,(UBnkDrawCam0zLo)
 178++D3B1 32 B6 7F    >                        ld       (varQ),a
 179++D3B4 3A E3 C0                             ld      a,(UBnkDrawCam0zSgn)        ; .
 180++D3B7 CD 15 9F                             call    SAEquSRPlusAQ               ; SA = drawcam Z dot + z
 181++D3BA DA 4D D3                             jp      c,.Ovflw
 182++D3BD 32 EB C0                             ld      (UBnkZScaled),a             ; XX15Z = SA
 183++D3C0                                      ldCopyByte  varS, UBnkZScaledSign   ;
 183++D3C0 3A B8 7F    >                        ld       a,(varS)
 183++D3C3 32 EC C0    >                        ld       (UBnkZScaledSign),a
 184++D3C6                                      ldCopyByte  UBnkXScaled,     varR   ; SR = normal X
 184++D3C6 3A E7 C0    >                        ld       a,(UBnkXScaled)
 184++D3C9 32 B7 7F    >                        ld       (varR),a
 185++D3CC                                      ldCopyByte  UBnkXX12xSign,   varS   ; .
 185++D3CC 3A EE C0    >                        ld       a,(UBnkXX12xSign)
 185++D3CF 32 B8 7F    >                        ld       (varS),a
 186++D3D2                                      ldCopyByte  UBnkDrawCam0xLo, varQ   ; AQ = drawcam x dot
 186++D3D2 3A DB C0    >                        ld       a,(UBnkDrawCam0xLo)
 186++D3D5 32 B6 7F    >                        ld       (varQ),a
 187++D3D8 3A DD C0                             ld      a,(UBnkDrawCam0xSgn)        ; .
 188++D3DB CD 15 9F                             call    SAEquSRPlusAQ               ; SA = normal x + drawcam x dot
 189++D3DE DA 4D D3                             jp      c,.Ovflw
 190++D3E1 32 E7 C0                             ld      (UBnkXScaled),a             ; XX15Z = SA
 191++D3E4                                      ldCopyByte  varS, UBnkXScaledSign   ; .
 191++D3E4 3A B8 7F    >                        ld       a,(varS)
 191++D3E7 32 E8 C0    >                        ld       (UBnkXScaledSign),a
 192++D3EA                                      ldCopyByte  UBnkYScaled, varR       ; SR = normal Y
 192++D3EA 3A E9 C0    >                        ld       a,(UBnkYScaled)
 192++D3ED 32 B7 7F    >                        ld       (varR),a
 193++D3F0                                      ldCopyByte  UBnkXX12ySign, varS     ; .
 193++D3F0 3A F0 C0    >                        ld       a,(UBnkXX12ySign)
 193++D3F3 32 B8 7F    >                        ld       (varS),a
 194++D3F6                                      ldCopyByte  UBnkDrawCam0yLo, varQ   ; AQ = drawcam y dot
 194++D3F6 3A DE C0    >                        ld       a,(UBnkDrawCam0yLo)
 194++D3F9 32 B6 7F    >                        ld       (varQ),a
 195++D3FC 3A E0 C0                             ld      a,(UBnkDrawCam0ySgn)        ; .
 196++D3FF CD 15 9F                             call    SAEquSRPlusAQ               ; SA = normal y + drawcam y dot
 197++D402 DA 4D D3                             jp      c,.Ovflw                    ; .
 198++D405 32 E9 C0                             ld      (UBnkYScaled),a             ; XX15 Y = SA
 199++D408                                      ldCopyByte   varS, UBnkYScaledSign  ; .
 199++D408 3A B8 7F    >                        ld       a,(varS)
 199++D40B 32 EA C0    >                        ld       (UBnkYScaledSign),a
 200++D40E              ; calculate dot product LL89
 201++D40E              .DoneScalingIntoXX15:   ldCopyByte  UBnkXX12xLo, varQ       ; Q = norm X XX12
 201++D40E 3A ED C0    >                        ld       a,(UBnkXX12xLo)
 201++D411 32 B6 7F    >                        ld       (varQ),a
 202++D414 3A E7 C0                             ld      a,(UBnkXScaled)             ; A = XX15 X
 203++D417 CD DD 9E                             call    AequAmulQdiv256             ; A = XX15 X * XX 12 X
 204++D41A 32 D2 7F                             ld      (varT),a                    ; T = XX15 X * XX 12 X
 205++D41D 3A EE C0                             ld      a,(UBnkXX12xSign)           ; S = sign of XX15 X * XX12 X
 206++D420 21 E8 C0                             ld      hl,UBnkXScaledSign          ; .
 207++D423 AE                                   xor     (hl)                        ; .
 208++D424 32 B8 7F                             ld      (varS),a                    ; .
 209++D427                                      ldCopyByte  UBnkXX12yLo, varQ       ; Q = norm Y XX12
 209++D427 3A EF C0    >                        ld       a,(UBnkXX12yLo)
 209++D42A 32 B6 7F    >                        ld       (varQ),a
 210++D42D 3A E9 C0                             ld      a,(UBnkYScaled)             ; A = XX15 Y
 211++D430 CD DD 9E                             call    AequAmulQdiv256             ; A = XX15 Y * XX 12 Y
 212++D433 32 B6 7F                             ld      (varQ),a                    ; Q = XX15 Y * XX 12 Y
 213++D436                                      ldCopyByte  varT,varR               ; R = XX15 X * XX 12 X
 213++D436 3A D2 7F    >                        ld       a,(varT)
 213++D439 32 B7 7F    >                        ld       (varR),a
 214++D43C 3A F0 C0                             ld      a,  (UBnkXX12ySign)         ; A = sign of XX15 Y * XX 12 Y
 215++D43F 21 EA C0                             ld      hl, UBnkYScaledSign         ; .
 216++D442 AE                                   xor     (hl)                        ; .
 217++D443 CD 15 9F                             call    SAEquSRPlusAQ               ; SA = SR+AQ = (X calc) + (Y calc)
 218++D446 32 D2 7F                             ld      (varT),a                    ; T = usigned (X calc) + (Y calc)
 219++D449                                      ldCopyByte  UBnkXX12zLo, varQ       ; Q = XX12 Z
 219++D449 3A F1 C0    >                        ld       a,(UBnkXX12zLo)
 219++D44C 32 B6 7F    >                        ld       (varQ),a
 220++D44F 3A EB C0                             ld      a,  (UBnkZScaled)           ; A = XX15 Z
 221++D452 CD DD 9E                             call    AequAmulQdiv256             ; A = XX12 Z * XX15 Z
 222++D455 32 B6 7F                             ld      (varQ),a                    ; Q = XX12 Z * XX15 Z
 223++D458                                      ldCopyByte  varT, varR              ; R = usigned (X calc) + (Y calc)
 223++D458 3A D2 7F    >                        ld       a,(varT)
 223++D45B 32 B7 7F    >                        ld       (varR),a
 224++D45E 3A EC C0                             ld      a,  (UBnkZScaledSign)       ; A = sign of XX12 Z * XX15 Z
 225++D461 21 F2 C0                             ld      hl, UBnkXX12zSign           ; .
 226++D464 AE                                   xor     (hl)                        ; .
 227++D465 CD 15 9F                             call    SAEquSRPlusAQ               ; SA = ((X+Y signed)) (Z signed)
 228++D468 FE 00                                cp      0                           ; was the result 0, if so then there are scenarios where SAEquSRPlusAQ can return -ve 0
 229++D46A 28 08                                jr      z,.FaceNotVisible           ; in which case face is not visible
 230++D46C 3A B8 7F                             ld      a,(varS)                    ; if the cacl was a negative number then its visible
 231++D46F ED 27 80                             test    $80                         ; this should test S not A
 232++D472 20 09                                jr      nz,.FaceVisible                                      ;        if dot product < 0 set face visible
 233++D474 3A 8C D2     .FaceNotVisible:         ld          a,(CurrentNormIdx)
 234++D477 CD 07 CF                             call        SetFaceAHidden                                      ;           set face invisible
 235++D47A C3 83 D4                             jp          .ProcessNormalLoopEnd                                ;        end if
 236++D47D 3A 8C D2     .FaceVisible:            ld          a,(CurrentNormIdx)
 237++D480 CD FE CE                             call        SetFaceAVisible
 238++D483 21 8C D2     .ProcessNormalLoopEnd:  ld          hl, CurrentNormIdx
 239++D486 34                                   inc         (hl)                    ; move index pointer up by one
 240++D487 C1                                   pop         bc
 241++D488 E1                                   pop         hl                      ; get normal data pointer back
 242++D489 3E 04                                ld          a,4
 243++D48B ED 31                                add         hl,a                    ; move to next normal entry
 244++D48D 22 BC 7E                             ld          (varV),hl               ; save as we need it again
 245++D490 05                                   dec         b
 246++D491 C2 2D D3                             jp          nz,.ProcessNormalsLoop
 247++D494 C9                                   ret
 248++D495
# file closed: ././ModelRender/BackfaceCull.asm
1105+ D495              ;--LL52 to LL55-----------------------------------------------------------------------------------------------------------------
1106+ D495
1107+ D495              TransposeXX12NodeToXX15:
1108+ D495                      ldCopyByte  UBnKxsgn,UbnkXPointSign           ; UBnkXSgn => XX15+2 x sign
1108+ D495 3A 22 C0    >                        ld       a,(UBnKxsgn)
1108+ D498 32 E9 C0    >                        ld       (UbnkXPointSign),a
1109+ D49B ED 4B ED C0          ld          bc,(UBnkXX12xLo)                   ; c = lo, b = sign   XX12XLoSign
1110+ D49F A8                   xor         b                                   ; a = UBnkKxsgn (or XX15+2) here and b = XX12xsign,  XX12+1 \ rotated xnode h                                                                             ;;;           a = a XOR XX12+1                              XCALC
1111+ D4A0 FA B6 D4             jp          m,NodeNegativeX                                                                                                                                                            ;;;           if sign is +ve                        ::LL52   XCALC
1112+ D4A3              ; XX15 [0,1] = INWK[0]+ XX12[0] + 256*INWK[1]                                                                                       ;;;          while any of x,y & z hi <> 0
1113+ D4A3              NodeXPositiveX:
1114+ D4A3 79                   ld          a,c                                 ; We picked up XX12+0 above in bc Xlo
1115+ D4A4 06 00                ld          b,0                                 ; but only want to work on xlo                                                           ;;;              XX15xHiLo = XX12HiLo + xpos lo             XCALC
1116+ D4A6 2A 20 C0             ld          hl,(UBnKxlo)                       ; hl = XX1 UBNKxLo
1117+ D4A9 26 00                ld          h,0                                 ; but we don;t want the sign
1118+ D4AB 09                   add         hl,bc                               ; its a 16 bit add
1119+ D4AC 22 E7 C0             ld          (UbnkXPoint),hl                    ; And written to XX15 0,1
1120+ D4AF AF                   xor         a                                   ; we want to write 0 as sign bit (not in original code)
1121+ D4B0 32 E9 C0             ld          (UbnkXPointSign),a
1122+ D4B3 C3 D2 D4             jp          FinishedThisNodeX
1123+ D4B6              ; If we get here then _sign and vertv_ have different signs so do subtract
1124+ D4B6              NodeNegativeX:
1125+ D4B6              LL52X:                                                 ;
1126+ D4B6 2A 20 C0             ld          hl,(UBnKxlo)                       ; Coord
1127+ D4B9 ED 4B ED C0          ld          bc,(UBnkXX12xLo)                   ; XX12
1128+ D4BD 06 00                ld          b,0                                 ; XX12 lo byte only
1129+ D4BF ED 42                sbc         hl,bc                               ; hl = UBnKx - UBnkXX12xLo
1130+ D4C1 F2 CF D4             jp          p,SetAndMopX                       ; if result is positive skip to write back
1131+ D4C4              NodeXNegSignChangeX:
1132+ D4C4              ; If we get here the result is 2'c compliment so we reverse it and flip sign
1133+ D4C4 CD 94 94             call        negate16hl                          ; Convert back to positive and flip sign
1134+ D4C7 3A E9 C0             ld          a,(UbnkXPointSign)                 ; XX15+2
1135+ D4CA EE 80                xor         $80                                 ; Flip bit 7
1136+ D4CC 32 E9 C0             ld          (UbnkXPointSign),a                 ; XX15+2
1137+ D4CF              SetAndMopX:
1138+ D4CF 22 20 C0             ld          (UBnKxlo),hl                       ; XX15+0
1139+ D4D2              FinishedThisNodeX:
1140+ D4D2
1141+ D4D2              LL53:
1142+ D4D2
1143+ D4D2                      ldCopyByte  UBnKysgn,UbnkYPointSign           ; UBnkXSgn => XX15+2 x sign
1143+ D4D2 3A 25 C0    >                        ld       a,(UBnKysgn)
1143+ D4D5 32 EC C0    >                        ld       (UbnkYPointSign),a
1144+ D4D8 ED 4B EF C0          ld          bc,(UBnkXX12yLo)                   ; c = lo, b = sign   XX12XLoSign
1145+ D4DC A8                   xor         b                                   ; a = UBnkKxsgn (or XX15+2) here and b = XX12xsign,  XX12+1 \ rotated xnode h                                                                             ;;;           a = a XOR XX12+1                              XCALC
1146+ D4DD FA F3 D4             jp          m,NodeNegativeY                                                                                                                                                            ;;;           if sign is +ve                        ::LL52   XCALC
1147+ D4E0              ; XX15 [0,1] = INWK[0]+ XX12[0] + 256*INWK[1]                                                                                       ;;;          while any of x,y & z hi <> 0
1148+ D4E0              NodeXPositiveY:
1149+ D4E0 79                   ld          a,c                                 ; We picked up XX12+0 above in bc Xlo
1150+ D4E1 06 00                ld          b,0                                 ; but only want to work on xlo                                                           ;;;              XX15xHiLo = XX12HiLo + xpos lo             XCALC
1151+ D4E3 2A 23 C0             ld          hl,(UBnKylo)                       ; hl = XX1 UBNKxLo
1152+ D4E6 26 00                ld          h,0                                 ; but we don;t want the sign
1153+ D4E8 09                   add         hl,bc                               ; its a 16 bit add
1154+ D4E9 22 EA C0             ld          (UbnkYPoint),hl                    ; And written to XX15 0,1
1155+ D4EC AF                   xor         a                                   ; we want to write 0 as sign bit (not in original code)
1156+ D4ED 32 E9 C0             ld          (UbnkXPointSign),a
1157+ D4F0 C3 0F D5             jp          FinishedThisNodeY
1158+ D4F3              ; If we get here then _sign and vertv_ have different signs so do subtract
1159+ D4F3              NodeNegativeY:
1160+ D4F3              LL52Y:                                                 ;
1161+ D4F3 2A 23 C0             ld          hl,(UBnKylo)                       ; Coord
1162+ D4F6 ED 4B EF C0          ld          bc,(UBnkXX12yLo)                   ; XX12
1163+ D4FA 06 00                ld          b,0                                 ; XX12 lo byte only
1164+ D4FC ED 42                sbc         hl,bc                               ; hl = UBnKx - UBnkXX12xLo
1165+ D4FE F2 0C D5             jp          p,SetAndMopY                       ; if result is positive skip to write back
1166+ D501              NodeXNegSignChangeY:
1167+ D501              ; If we get here the result is 2'c compliment so we reverse it and flip sign
1168+ D501 CD 94 94             call        negate16hl                          ; Convert back to positive and flip sign
1169+ D504 3A EC C0             ld          a,(UbnkYPointSign)                 ; XX15+2
1170+ D507 EE 80                xor         $80                                 ; Flip bit 7
1171+ D509 32 EC C0             ld          (UbnkYPointSign),a                 ; XX15+2
1172+ D50C              SetAndMopY:
1173+ D50C 22 23 C0             ld          (UBnKylo),hl                       ; XX15+0
1174+ D50F              FinishedThisNodeY:
1175+ D50F
1176+ D50F                  DISPLAY "Tracing 5", $
1177+ D50F
1178+ D50F              TransposeZ:
1179+ D50F              LL55:                                                   ; Both y signs arrive here, Onto z                                          ;;;
1180+ D50F 3A F2 C0             ld          a,(UBnkXX12zSign)                   ; XX12+5    \ rotated znode hi                                              ;;;
1181+ D512                      JumpOnBitSet a,7,NegativeNodeZ                    ; LL56 -ve Z node                                                           ;;;
1181+ D512 CB 7F       >                        bit 	7,a
1181+ D514 C2 28 D5    >                        jp      nz,NegativeNodeZ
1182+ D517 3A F1 C0             ld          a,(UBnkXX12zLo)                     ; XX12+4 \ rotated znode lo                                                 ;;;
1183+ D51A 2A 26 C0             ld          hl,(UBnKzlo)                        ; INWK+6    \ zorg lo                                                       ;;;
1184+ D51D ED 31                add         hl,a                                ; hl = INWKZ + XX12z                                                        ;;;
1185+ D51F 7D                   ld          a,l
1186+ D520 32 D2 7F             ld          (varT),a                            ;                                                                           ;;;
1187+ D523 7C                   ld          a,h
1188+ D524 32 B5 7F             ld          (varU),a                            ; now z = hl or U(hi).T(lo)                                                 ;;;
1189+ D527 C9                   ret                                             ; LL57  \ Node additions done, z = U.T                                      ;;;
1190+ D528              ; Doing additions and scalings for each visible node around here                                                                    ;;;
1191+ D528              NegativeNodeZ:
1192+ D528              LL56:                                                   ; Enter XX12+5 -ve Z node case  from above                                  ;;;
1193+ D528 2A 26 C0             ld          hl,(UBnKzlo)                        ; INWK+6 \ z org lo                                                         ;;;
1194+ D52B ED 4B F1 C0          ld          bc,(UBnkXX12zLo)                    ; XX12+4    \ rotated z node lo                                                 ......................................................
1195+ D52F 06 00                ld          b,0                                 ; upper byte will be garbage
1196+ D531                      ClearCarryFlag
1196+ D531 B7          >                        or a
1197+ D532 ED 42                sbc         hl,bc                               ; 6502 used carry flag compliment
1198+ D534 7D                   ld          a,l
1199+ D535 32 D2 7F             ld          (varT),a                            ; t = result low
1200+ D538 7C                   ld          a,h
1201+ D539 32 B5 7F             ld          (varU),a                            ; u = result high
1202+ D53C E2 49 D5             jp          po,MakeNodeClose                    ; no overflow to parity would be clear
1203+ D53F              LL56Overflow:
1204+ D53F FE 00                cp          0                                   ; is varU 0?
1205+ D541 20 16                jr          nz,NodeAdditionsDone                ; Enter Node additions done, UT=z
1206+ D543 3A D2 7F             ld          a,(varT)                            ; T \ restore z lo
1207+ D546                      ReturnIfAGTENusng 4                              ; >= 4 ? zlo big enough, Enter Node additions done.
1207+ D546 FE 04       >                        cp    4
1207+ D548 D0          >                        ret	 nc
1208+ D549              MakeNodeClose:
1209+ D549              LL140:                                                  ; else make node close
1210+ D549 AF                   xor         a                                   ; hi This needs tuning to use a 16 bit variable
1211+ D54A 32 B5 7F             ld          (varU),a                            ; U
1212+ D54D 3E 04                ld          a,4                                 ; lo
1213+ D54F 32 D2 7F             ld          (varT),a                            ; T
1214+ D552 C9                   ret
1215+ D553              ;--LL49-------------------------------------------------------------------------------------------------------------------------
1216+ D553              ProcessVisibleNode:
1217+ D553              RotateNode:                                                                                                                         ;;;
1218+ D553 CD 28 D0             call        XX12EquXX15DotProductXX16                                                                                       ;;;           call      XX12=XX15.XX16
1219+ D556              LL52LL53LL54LL55
1220+ D556              TransposeNode:
1221+ D556 CD 95 D4             call        TransposeXX12NodeToXX15
1222+ D559
1223+ D559              ; ......................................................                                                         ;;;
1224+ D559              NodeAdditionsDone:
1225+ D559              Scale16BitTo8Bit:
1226+ D559              LL57:                                                   ; Enter Node additions done, z=T.U set up from LL55
1227+ D559 3A B5 7F             ld          a,(varU)                            ; U \ z hi
1228+ D55C 21 E8 C0             ld          hl,UbnkXPointHi
1229+ D55F B6                   or          (hl)                                ; XX15+1    \ x hi
1230+ D560 21 EB C0             ld          hl,UbnkYPointHi
1231+ D563 B6                   or          (hl)                                ; XX15+4    \ y hi
1232+ D564              AreXYZHiAllZero:
1233+ D564 28 2B                jr          z,NodeScalingDone                   ; if X, Y, Z = 0  exit loop down once hi U rolled to 0
1234+ D566              DivideXYZBy2:
1235+ D566                      ShiftMem16Right1    UbnkXPoint                  ; XX15[0,1]
1235+ D566 2A E7 C0    >                    ld    hl,(UbnkXPoint)
1235+ D569 CB 3C       >                    srl   h
1235+ D56B CB 1D       >                    rr    l
1235+ D56D 22 E7 C0    >                    ld    (UbnkXPoint),hl
1236+ D570                      ShiftMem16Right1    UbnkYPoint                  ; XX15[3,4]
1236+ D570 2A EA C0    >                    ld    hl,(UbnkYPoint)
1236+ D573 CB 3C       >                    srl   h
1236+ D575 CB 1D       >                    rr    l
1236+ D577 22 EA C0    >                    ld    (UbnkYPoint),hl
1237+ D57A 3A B5 7F             ld          a,(varU)                            ; U \ z hi
1238+ D57D 67                   ld          h,a
1239+ D57E 3A D2 7F             ld          a,(varT)                            ; T \ z lo
1240+ D581 6F                   ld          l,a
1241+ D582                      ShiftHLRight1
1241+ D582 CB 3C       >			   srl h
1241+ D584 CB 1D       >			   rr  l
1242+ D586 7C                   ld          a,h
1243+ D587 32 B5 7F             ld          (varU),a
1244+ D58A 7D                   ld          a,l
1245+ D58B 32 D2 7F             ld          (varT),a                            ; T \ z lo
1246+ D58E C3 59 D5             jp          Scale16BitTo8Bit                    ; loop U
1247+ D591              NodeScalingDone:
1248+ D591              LL60:                                                   ; hi U rolled to 0, exited loop above.
1249+ D591              ProjectNodeToScreen:
1250+ D591                      ldCopyByte  varT,varQ                           ; T =>  Q   \ zdist lo
1250+ D591 3A D2 7F    >                        ld       a,(varT)
1250+ D594 32 B6 7F    >                        ld       (varQ),a
1251+ D597 3A E7 C0             ld          a,(UbnkXPointLo)                    ; XX15  \ rolled x lo
1252+ D59A 21 B6 7F             ld          hl,varQ
1253+ D59D BE                   cp          (hl)                                ; Q
1254+ D59E                      JumpIfALTusng DoSmallAngle                      ; LL69 if xdist < zdist hop over jmp to small x angle
1254+ D59E DA A7 D5    >                        jp		c,DoSmallAngle
1255+ D5A1 CD DC 94             call        RequAmul256divQ;RequAdivQ                           ; LL61  \ visit up  R = A/Q = x/z
1256+ D5A4 C3 AF D5             jp          SkipSmallAngle                      ; LL65  \ hop over small xangle
1257+ D5A7              DoSmallAngle:                                           ; small x angle
1258+ D5A7              LL69:
1259+ D5A7              ; TODO check if we need to retain BC as this trashes it
1260+ D5A7              ;Input: BC = Dividend, DE = Divisor, HL = 0
1261+ D5A7              ;Output: BC = Quotient, HL = Remainder
1262+ D5A7 47                   ld      b,a
1263+ D5A8 CD 6D 97             call    DIV16UNDOC
1264+ D5AB 79                   ld      a,c
1265+ D5AC 32 B7 7F             ld      (varR),a
1266+ D5AF               ;;;       call        RequAmul256divQ                     ; LL28  \ BFRDIV R=A*256/Q byte for remainder of division
1267+ D5AF              SkipSmallAngle:
1268+ D5AF              ScaleX:
1269+ D5AF              LL65:                                                   ; both continue for scaling based on z
1270+ D5AF 3A E9 C0             ld          a,(UbnkXPointSign)                  ; XX15+2 \ sign of X dist
1271+ D5B2                      JumpOnBitSet a,7,NegativeXPoint                 ; LL62 up, -ve Xdist, RU screen onto XX3 heap
1271+ D5B2 CB 7F       >                        bit 	7,a
1271+ D5B4 C2 C7 D5    >                        jp      nz,NegativeXPoint
1272+ D5B7              ; ......................................................
1273+ D5B7              PositiveXPoint:
1274+ D5B7 3A B7 7F             ld          a,(varR)
1275+ D5BA 6F                   ld          l,a
1276+ D5BB 3A B5 7F             ld          a,(varU)
1277+ D5BE 67                   ld          h,a
1278+ D5BF 3E 80                ld          a,ScreenCenterX
1279+ D5C1 ED 31                add         hl,a
1280+ D5C3 EB                   ex          de,hl
1281+ D5C4 C3 D7 D5             jp          StoreXPoint
1282+ D5C7              NegativeXPoint:
1283+ D5C7              LL62:                                                   ; Arrive from LL65 just below, screen for -ve RU onto XX3 heap, index X=CNT ;;;
1284+ D5C7 3A B7 7F             ld          a,(varR)
1285+ D5CA 6F                   ld          l,a
1286+ D5CB 3A B5 7F             ld          a,(varU)
1287+ D5CE 67                   ld          h,a
1288+ D5CF 0E 80                ld          c,ScreenCenterX
1289+ D5D1 06 00                ld          b,0
1290+ D5D3                      ClearCarryFlag
1290+ D5D3 B7          >                        or a
1291+ D5D4 ED 42                sbc         hl,bc                               ; hl = RU-ScreenCenterX
1292+ D5D6 EB                   ex          de,hl
1293+ D5D7              StoreXPoint:                                            ; also from LL62, XX3 node heap has xscreen node so far.
1294+ D5D7 FD 73 00             ld          (iy+0),e                            ; Update X Point
1295+ D5DA FD 72 01             ld          (iy+1),d                            ; Update X Point
1296+ D5DD FD 23                inc         iy
1297+ D5DF FD 23                inc         iy
1298+ D5E1              ; ......................................................
1299+ D5E1              LL66:
1300+ D5E1              ProcessYPoint:
1301+ D5E1 AF                   xor         a                                   ; y hi = 0
1302+ D5E2 32 B5 7F             ld          (varU),a                            ; U
1303+ D5E5                      ldCopyByte  varT,varQ                           ; Q \ zdist lo
1303+ D5E5 3A D2 7F    >                        ld       a,(varT)
1303+ D5E8 32 B6 7F    >                        ld       (varQ),a
1304+ D5EB 3A EA C0             ld          a,(UbnkYPointLo)                    ; XX15+3 \ rolled y low
1305+ D5EE 21 B6 7F             ld          hl,varQ
1306+ D5F1 BE                   cp          (hl)                                ; Q
1307+ D5F2                      JumpIfALTusng SmallYHop                         ; if ydist < zdist hop to small yangle
1307+ D5F2 DA FB D5    >                        jp		c,SmallYHop
1308+ D5F5              SmallYPoint:
1309+ D5F5 CD DC 94             call        RequAmul256divQ;RequAdivQ                           ; LL61  \ else visit up R = A/Q = y/z
1310+ D5F8 C3 FE D5             jp          SkipYScale                          ; LL68 hop over small y yangle
1311+ D5FB              SmallYHop:
1312+ D5FB              LL67:                                                   ; Arrive from LL66 above if XX15+3 < Q \ small yangle
1313+ D5FB CD DC 94             call        RequAmul256divQ                     ; LL28  \ BFRDIV R=A*256/Q byte for remainder of division
1314+ D5FE              SkipYScale:
1315+ D5FE              LL68:                                                   ; both carry on, also arrive from LL66, yscaled based on z
1316+ D5FE 3A EC C0             ld          a,(UbnkYPointSign)                  ; XX15+5 \ sign of X dist
1317+ D601 CB 7F                bit         7,a
1318+ D603 C2 16 D6             jp          nz,NegativeYPoint                   ; LL62 up, -ve Xdist, RU screen onto XX3 heap
1319+ D606              PositiveYPoint:
1320+ D606 3A B7 7F             ld          a,(varR)
1321+ D609 6F                   ld          l,a
1322+ D60A 3A B5 7F             ld          a,(varU)
1323+ D60D 67                   ld          h,a
1324+ D60E 3E 60                ld          a,ScreenHeightHalf
1325+ D610 ED 31                add         hl,a
1326+ D612 EB                   ex          de,hl
1327+ D613 C3 26 D6             jp          LL50
1328+ D616              NegativeYPoint:
1329+ D616              LL70:                                                   ; Arrive from LL65 just below, screen for -ve RU onto XX3 heap, index X=CNT ;;;
1330+ D616 3A B7 7F             ld          a,(varR)
1331+ D619 6F                   ld          l,a
1332+ D61A 3A B5 7F             ld          a,(varU)
1333+ D61D 67                   ld          h,a
1334+ D61E 0E 60                ld          c,ScreenHeightHalf
1335+ D620 06 00                ld          b,0
1336+ D622                      ClearCarryFlag
1336+ D622 B7          >                        or a
1337+ D623 ED 42                sbc         hl,bc                               ; hl = RU-ScreenCenterX
1338+ D625 EB                   ex          de,hl
1339+ D626              LL50:                                                   ; also from LL62, XX3 node heap has xscreen node so far.
1340+ D626 FD 73 00             ld          (iy+0),e                            ; Update X Point
1341+ D629 FD 72 01             ld          (iy+1),d                            ; Update X Point
1342+ D62C FD 23                inc         iy
1343+ D62E FD 23                inc         iy
1344+ D630 C9                   ret
1345+ D631              ;--------------------------------------------------------------------------------------------------------
1346+ D631              ;;;     Byte 0 = X magnitide with origin at middle of ship
1347+ D631              ;;;     Byte 1 = Y magnitide with origin at middle of ship
1348+ D631              ;;;     Byte 2 = Z magnitide with origin at middle of ship
1349+ D631              ;;;     Byte 3 = Sign Bits of Vertex 7=X 6=Y 5 = Z 4 - 0 = visibility beyond which vertix is not shown
1350+ D631              CopyNodeToXX15:             ldCopyByte  hl, UBnkXScaled                     ; Load into XX15                                                                     Byte 0;;;     XX15 xlo   = byte 0
1350+ D631 7E          >                        ld       a,(hl)
1350+ D632 32 E7 C0    >                        ld       (UBnkXScaled),a
1351+ D635 23                                       inc         hl
1352+ D636                                          ldCopyByte  hl, UBnkYScaled                     ; Load into XX15                                                                     Byte 0;;;     XX15 xlo   = byte 0
1352+ D636 7E          >                        ld       a,(hl)
1352+ D637 32 E9 C0    >                        ld       (UBnkYScaled),a
1353+ D63A 23                                       inc         hl
1354+ D63B                                          ldCopyByte  hl, UBnkZScaled                     ; Load into XX15                                                                     Byte 0;;;     XX15 xlo   = byte 0
1354+ D63B 7E          >                        ld       a,(hl)
1354+ D63C 32 EB C0    >                        ld       (UBnkZScaled),a
1355+ D63F 23                                       inc         hl
1356+ D640              ; Simplfied for debugging, needs optimising back to original DEBUG TODO
1357+ D640 7E           .PopulateXX15SignBits:      ld          a,(hl)
1358+ D641 4F                                       ld          c,a                                 ; copy sign and visibility to c
1359+ D642 47                                       ld          b,a
1360+ D643 E6 80                                    and         $80                                 ; keep high 3 bits
1361+ D645 32 E8 C0                                 ld          (UBnkXScaledSign),a                 ; Copy Sign Bits                                                            ;;;
1362+ D648 78                                       ld          a,b
1363+ D649 E6 40                                    and         $40
1364+ D64B CB 27                                    sla         a                                   ; Copy Sign Bits                                                            ;;;
1365+ D64D 32 EA C0                                 ld          (UBnkYScaledSign),a                 ; Copy Sign Bits                                                            ;;;
1366+ D650 78                                       ld          a,b
1367+ D651 E6 20                                    and         $20
1368+ D653 CB 27                                    sla         a                                   ; Copy Sign Bits                                                            ;;;
1369+ D655 CB 27                                    sla         a                                   ; Copy Sign Bits                                                            ;;;
1370+ D657 32 EC C0                                 ld          (UBnkZScaledSign),a                 ; Copy Sign Bits                                                            ;;;
1371+ D65A 79                                       ld          a,c                                 ; returns a with visibility sign byte
1372+ D65B E6 1F                                    and         $1F                                 ; visibility is held in bits 0 to 4                                                              ;;;     A = XX15 Signs AND &1F (to get lower 5 visibility)
1373+ D65D 32 D2 7F                                 ld          (varT),a                            ; and store in varT as its needed later
1374+ D660 C9                                       ret
1375+ D661
1376+ D661              ;;;     Byte 4 = High 4 bits Face 2 Index Low 4 bits = Face 1 Index
1377+ D661              ;;;     Byte 5 = High 4 bits Face 4 Index Low 4 bits = Face 3 Index
1378+ D661              ;..............................................................................................................................
1379+ D661              ProcessANode:                                           ; Start loop on Nodes for visibility, each node has 4 faces associated with ;;; For each node (point) in model                  ::LL48
1380+ D661              LL48GetScale:
1381+ D661 3A A7 7E             ld          a,(LastNormalVisible)               ; get Normal visible range into e before we copy node
1382+ D664 5F                   ld          e,a
1383+ D665 CD 31 D6             call        CopyNodeToXX15
1384+ D668              LL48GetVertices:
1385+ D668              LL48GetVertSignAndVisDist:
1386+ D668                      JumpIfALTNusng e,NodeIsNotVisible               ; if XX4 > Visibility distance then vertext too far away , next vertex.                                             ;;;        goto LL50 (end of loop)
1386+ D668 BB          >                        cp      e
1386+ D669 DA A6 D6    >                        jp		c, NodeIsNotVisible
1387+ D66C              CheckFace1:                                                                                                                         ;;;     if all FaceVisile[point face any of idx1,2,3 or 4] = 0
1388+ D66C                      CopyByteAtNextHL varP                           ; vertex byte#4, first 2 faces two 4-bit indices 0:15 into XX2 for 2 of the ;;;     get point face idx from byte 4 & 5 of normal
1388+ D66C 23          >                    inc         hl                                  ; vertex byte#1
1388+ D66D 7E          >                    ld          a,(hl)                              ;
1388+ D66E 32 B6 7E    >                    ld          (varP),a                     ; SunXX15+2 = (V),Y
1389+ D671 57                   ld          d,a                                 ; use d to hold a as a temp                                                 ;;;
1390+ D672 E6 0F                and         $0F                                 ; face 1                                                                    ;;;
1391+ D674 E5                   push        hl                                  ; we need to save HL                                                        ;;;
1392+ D675                      ldHLIdxAToA UbnkFaceVisArray                    ; visibility at face 1                                                Byte 4;;;
1392+ D675 21 13 C1    >                    ld          hl,UbnkFaceVisArray
1392+ D678 ED 31       >                    add         hl,a
1392+ D67A 7E          >                    ld          a,(hl)
1393+ D67B E1                   pop         hl                                  ;                                                                           ;;;
1394+ D67C                      JumpIfAIsNotZero NodeIsVisible                  ; is face 1 visible                                                         ;;;
1394+ D67C A7          >                        and     a
1394+ D67D C2 AC D6    >                        jp	    nz,NodeIsVisible
1395+ D680              CheckFace2:                                                                                                                         ;;;
1396+ D680 7A                   ld          a,d                                                                                                             ;;;
1397+ D681 ED 23                swapnib                                                                                                                     ;;;
1398+ D683 E6 0F                and         $0F                                 ; this is face 2                                                            ;;;
1399+ D685                      JumpIfAIsNotZero NodeIsVisible                  ; is face 1 visible                                                         ;;;
1399+ D685 A7          >                        and     a
1399+ D686 C2 AC D6    >                        jp	    nz,NodeIsVisible
1400+ D689              CheckFace3:                                                                                                                         ;;;
1401+ D689                      CopyByteAtNextHL varP                           ; vertex byte#4, first 2 faces two 4-bit indices 0:15 into XX2 for 2 of the ;;;
1401+ D689 23          >                    inc         hl                                  ; vertex byte#1
1401+ D68A 7E          >                    ld          a,(hl)                              ;
1401+ D68B 32 B6 7E    >                    ld          (varP),a                     ; SunXX15+2 = (V),Y
1402+ D68E 57                   ld          d,a                                 ; use d to hold a as a temp                                                 ;;;
1403+ D68F E6 0F                and         $0F                                 ; face 1                                                                    ;;;
1404+ D691 E5                   push        hl                                  ; we need to save HL                                                        ;;;
1405+ D692                      ldHLIdxAToA UbnkFaceVisArray                  ; visibility at face 1                                                Byte 5;;;
1405+ D692 21 13 C1    >                    ld          hl,UbnkFaceVisArray
1405+ D695 ED 31       >                    add         hl,a
1405+ D697 7E          >                    ld          a,(hl)
1406+ D698 E1                   pop         hl                                  ;                                                                           ;;;
1407+ D699                      JumpIfAIsNotZero NodeIsVisible                  ; is face 1 visible                                                         ;;;
1407+ D699 A7          >                        and     a
1407+ D69A C2 AC D6    >                        jp	    nz,NodeIsVisible
1408+ D69D              CheckFace4:                                                                                                                         ;;;
1409+ D69D 7A                   ld          a,d                                                                                                             ;;;
1410+ D69E ED 23                swapnib                                                                                                                     ;;;
1411+ D6A0 E6 0F                and         $0F                                 ; this is face 2                                                            ;;;
1412+ D6A2                      JumpIfAIsNotZero NodeIsVisible                  ; is face 1 visible                                                         ;;;
1412+ D6A2 A7          >                        and     a
1412+ D6A3 C2 AC D6    >                        jp	    nz,NodeIsVisible
1413+ D6A6              NodeIsNotVisible:                                                                                                                   ;;;
1414+ D6A6 01 04 00             ld          bc,4
1415+ D6A9 FD 09                add         iy,bc                               ; if not visible then move to next element in array anyway                  ;;;
1416+ D6AB                      ;;; Should we be loading FFFFFFFF into 4 bytes or just ignore?
1417+ D6AB C9                   ret                                                                                                      ;;;        goto LL50 (end of loop)
1418+ D6AC              NodeIsVisible:
1419+ D6AC              LL49:
1420+ D6AC CD 53 D5             call        ProcessVisibleNode                  ; Process node to determine if it goes on heap
1421+ D6AF C9                   ret
1422+ D6B0
1423+ D6B0                  DISPLAY "Tracing 6", $
1424+ D6B0
1425+ D6B0              ProjectNodeToEye:
1426+ D6B0 ED 4B EB C0      ld          bc,(UBnkZScaled)                    ; BC = Z Cordinate. By here it MUST be positive as its clamped to 4 min
1427+ D6B4 79               ld          a,c                                 ;  so no need for a negative check
1428+ D6B5 32 B6 7F         ld          (varQ),a                            ; VarQ = z
1429+ D6B8 3A E7 C0         ld          a,(UBnkXScaled)                     ; XX15  \ rolled x lo which is signed
1430+ D6BB CD 56 97         call        DIV16Amul256dCUNDOC                 ; result in BC which is 16 bit TODO Move to 16 bit below not just C reg
1431+ D6BE 3A E8 C0         ld          a,(UBnkXScaledSign)                 ; XX15+2 \ sign of X dist
1432+ D6C1                  JumpOnBitSet a,7,EyeNegativeXPoint             ; LL62 up, -ve Xdist, RU screen onto XX3 heap
1432+ D6C1 CB 7F       >                        bit 	7,a
1432+ D6C3 C2 CE D6    >                        jp      nz,EyeNegativeXPoint
1433+ D6C6              EyePositiveXPoint:                                  ; x was positive result
1434+ D6C6 2E 80            ld          l,ScreenCenterX                     ;
1435+ D6C8 26 00            ld          h,0
1436+ D6CA 09               add         hl,bc                               ; hl = Screen Centre + X
1437+ D6CB C3 D5 D6         jp          EyeStoreXPoint
1438+ D6CE              EyeNegativeXPoint:                                 ; x < 0 so need to subtract from the screen centre position
1439+ D6CE 2E 80            ld          l,ScreenCenterX
1440+ D6D0 26 00            ld          h,0
1441+ D6D2                  ClearCarryFlag
1441+ D6D2 B7          >                        or a
1442+ D6D3 ED 42            sbc         hl,bc                               ; hl = Screen Centre - X
1443+ D6D5              EyeStoreXPoint:                                    ; also from LL62, XX3 node heap has xscreen node so far.
1444+ D6D5 EB               ex          de,hl
1445+ D6D6 FD 73 00         ld          (iy+0),e                            ; Update X Point TODO this bit is 16 bit aware just need to fix above bit
1446+ D6D9 FD 72 01         ld          (iy+1),d                            ; Update X Point
1447+ D6DC              EyeProcessYPoint:
1448+ D6DC ED 4B EB C0      ld          bc,(UBnkZScaled)                    ; Now process Y co-ordinate
1449+ D6E0 79               ld          a,c
1450+ D6E1 32 B6 7F         ld          (varQ),a
1451+ D6E4 3A E9 C0         ld          a,(UBnkYScaled)                     ; XX15  \ rolled x lo
1452+ D6E7 CD 56 97         call        DIV16Amul256dCUNDOC                 ; a = Y scaled * 256 / zscaled
1453+ D6EA 3A EA C0         ld          a,(UBnkYScaledSign)                 ; XX15+2 \ sign of X dist
1454+ D6ED                  JumpOnBitSet a,7,EyeNegativeYPoint             ; LL62 up, -ve Xdist, RU screen onto XX3 heap top of screen is Y = 0
1454+ D6ED CB 7F       >                        bit 	7,a
1454+ D6EF C2 FA D6    >                        jp      nz,EyeNegativeYPoint
1455+ D6F2              EyePositiveYPoint:                                  ; Y is positive so above the centre line
1456+ D6F2 2E 60            ld          l,ScreenCenterY
1457+ D6F4                  ClearCarryFlag
1457+ D6F4 B7          >                        or a
1458+ D6F5 ED 42            sbc         hl,bc                               ; hl = ScreenCentreY - Y coord (as screen is 0 at top)
1459+ D6F7 C3 FF D6         jp          EyeStoreYPoint
1460+ D6FA              EyeNegativeYPoint:                                  ; this bit is only 8 bit aware TODO FIX
1461+ D6FA 2E 60            ld          l,ScreenCenterY
1462+ D6FC 26 00            ld          h,0
1463+ D6FE 09               add         hl,bc                               ; hl = ScreenCenterY + Y as negative is below the center of screen
1464+ D6FF              EyeStoreYPoint:                                    ; also from LL62, XX3 node heap has xscreen node so far.
1465+ D6FF EB               ex          de,hl
1466+ D700 FD 73 02         ld          (iy+2),e                            ; Update Y Point
1467+ D703 FD 72 03         ld          (iy+3),d                            ; Update Y Point
1468+ D706 C9               ret
1469+ D707
1470+ D707
1471+ D707
1472+ D707              ; Pitch and roll are 2 phases
1473+ D707              ; 1 - we apply our pitch and roll to the ship position
1474+ D707              ;       x -> x + alpha * (y - alpha * x)
1475+ D707              ;       y -> y - alpha * x - beta * z
1476+ D707              ;       z -> z + beta * (y - alpha * x - beta * z)
1477+ D707              ; which can be simplified as:
1478+ D707              ;       1. K2 = y - alpha * x
1479+ D707              ;       2. z = z + beta * K2
1480+ D707              ;       3. y = K2 - beta * z
1481+ D707              ;       4. x = x + alpha * y
1482+ D707              ; 2 - we apply our patch and roll to the ship orientation
1483+ D707              ;      Roll calculations:
1484+ D707              ;
1485+ D707              ;        nosev_y = nosev_y - alpha * nosev_x_hi
1486+ D707              ;        nosev_x = nosev_x + alpha * nosev_y_hi
1487+ D707              ;      Pitch calculations:
1488+ D707              ;
1489+ D707              ;        nosev_y = nosev_y - beta * nosev_z_hi
1490+ D707              ;        nosev_z = nosev_z + beta * nosev_y_hi
1491+ D707
1492+ D707
1493+ D707              ; ---------------------------------------------------------------------------------------------------------------------------------
1494+ D707                          INCLUDE "./Universe/Ships/ApplyMyRollAndPitch.asm"
# file opened: ././Universe/Ships/ApplyMyRollAndPitch.asm
   1++D707
   2++D707              ; Full version
   3++D707              ; 1. K2 = y - alpha * x
   4++D707              ; 2. z = z + beta * K2
   5++D707              ; 3. y = K2 - beta * z
   6++D707              ; 4. x = x + alpha * y
   7++D707
   8++D707                  IFDEF USE_24BIT_ROLL_AND_PITCH
   9++D707 00 00 00 00  UBnK24BitAlphaMulX      DB $00,$00, $00, $00
  10++D70B 00 00 00 00  UBnK24BitAlphaMulY      DB $00,$00, $00, $00
  11++D70F 00 00 00 00  UBnK24BitAlphaMulZ      DB $00,$00, $00, $00
  12++D713 00 00 00 00  UBnK24BitBetaMulZ       DB $00,$00, $00, $00
  13++D717 00 00 00 00  UBnK24BitBetaMulY       DB $00,$00, $00, $00
  14++D71B 00 00 00     UBnK24BitK2             DS 3
  15++D71E
  16++D71E 01           PitchBlock              DB  1
  17++D71F
  18++D71F 3A CF 7E     ApplyMyRollAndPitch:    ld      a,(ALPHA)                   ; no roll or pitch, no calc needed
  19++D722 A7           .CheckForRoll:          and		a
  20++D723 C4 93 D7     						call	nz,UBnKRoll_24Bit
  21++D726 3A C2 7E     .CheckForPitch:			ld		a,(BETA)
  22++D729 A7           						and		a
  23++D72A C4 F9 D7     						call	nz,UBnKPitch_24Bit
  24++D72D 3A B0 7F     .ApplySpeed:            ld      a,(DELTA)                   ; BCH = - Delta
  25++D730 A7                                   and     a
  26++D731 CA 4C D7                             jp      z,.ApplyOrientation
  27++D734              						;ReturnIfAIsZero
  28++D734 0E 00        						ld      c,0                         ;
  29++D736 67           						ld      h,a                         ;
  30++D737 06 80        						ld      b,$80                       ;
  31++D739 ED 5B 27 C0  						ld      de,(UBnKzhi)                ; DEL = z position
  32++D73D 3A 26 C0     						ld      a,(UBnKzlo)                 ; .
  33++D740 6F           						ld      l,a                         ; .
  34++D741 CD 14 01     						call    AddBCHtoDELsigned           ; update speed
  35++D744 ED 53 27 C0  						ld      (UBnKzhi),DE                ; write back to zpos
  36++D748 7D           						ld      a,l
  37++D749 32 26 C0                             ld      (UBnKzlo),a                ;
  38++D74C 3A CF 7E     .ApplyOrientation:      ld      a,(ALPHA)
  39++D74F 21 C2 7E                             ld      hl,BETA
  40++D752 B6                                   or      (hl)
  41++D753 C8                                   ret     z
  42++D754 3A 1E D7                             ld      a,(PitchBlock)
  43++D757 A7                                   and     a
  44++D758 C8                                   ret     z
  45++D759                                      ;break
  46++D759 DD 21 2A C0  PitchBreak:             ld      ix,UBnkrotmatSidevX
  47++D75D DD 7E 01     DebugAlert1:            ld      a,(ix+1)
  48++D760 DD 56 03                             ld      d,(ix+3)
  49++D763 DD 5E 05                             ld      e,(ix+5)
  50++D766 B2                                   or     d
  51++D767 B3                                   or     e
  52++D768 E6 7F                                and     $7F
  53++D76A C2 6F D7                             jp      nz,.NoBreak
  54++D76D DD 01                                break
  55++D76F              .NoBreak
  56++D76F
  57++D76F CD BA 02                             call    ApplyRollAndPitchToIX
  58++D772 DD 7E 01     DebugAlert2:             ld      a,(ix+1)
  59++D775 DD 56 03                             ld      d,(ix+3)
  60++D778 DD 5E 05                             ld      e,(ix+5)
  61++D77B B2                                   or     d
  62++D77C B3                                   or     e
  63++D77D E6 7F                                and     $7F
  64++D77F C2 84 D7                             jp      nz,.NoBreak
  65++D782 DD 01                                break
  66++D784              .NoBreak
  67++D784 DD 21 30 C0                          ld      ix,UBnkrotmatRoofvX
  68++D788 CD BA 02                             call    ApplyRollAndPitchToIX
  69++D78B DD 21 36 C0                          ld      ix,UBnkrotmatNosevX
  70++D78F CD BA 02                             call    ApplyRollAndPitchToIX
  71++D792 C9                                   ret
  72++D793
  73++D793 3A CF 7E     UBnKRoll_24Bit:			ld      a,(ALPHA)                   ; get roll value
  74++D796 E6 7F        						and 	$7F
  75++D798 57           						ld      d,a                         ; .
  76++D799 3A 23 C0     						ld      a,(UBnKylo)                ; HLE = x sgn, hi, lo
  77++D79C 5F           						ld      e,a                         ; .
  78++D79D 2A 24 C0     						ld      hl,(UBnKyhi)               ; .
  79++D7A0 CD 17 93     						call    mulHLEbyDSigned             ; DELC = x * alpha, so DEL = X * -alpha / 256
  80++D7A3 7D           						ld		a,l
  81++D7A4 32 0B D7     						ld		(UBnK24BitAlphaMulY),a			; save result
  82++D7A7 ED 53 0C D7  						ld		(UBnK24BitAlphaMulY+1),de		; save result
  83++D7AB 3A CF 7E     						ld      a,(ALPHA)                   ; get roll value
  84++D7AE E6 7F        						and 	$7F
  85++D7B0 57           						ld      d,a                         ; .
  86++D7B1 3A 20 C0     						ld      a,(UBnKxlo)                ; HLE = x sgn, hi, lo
  87++D7B4 5F           						ld      e,a                         ; .
  88++D7B5 2A 21 C0     						ld      hl,(UBnKxhi)               ; .
  89++D7B8 CD 17 93     						call    mulHLEbyDSigned             ; DELC = x * alpha, so DEL = X * -alpha / 256
  90++D7BB 7D           						ld		a,l
  91++D7BC 32 07 D7     						ld		(UBnK24BitAlphaMulX),a			; save result
  92++D7BF ED 53 08 D7  						ld		(UBnK24BitAlphaMulX+1),de		; save result
  93++D7C3 3A CF 7E     						ld		a,(ALPHA)
  94++D7C6 E6 80        						and		$80
  95++D7C8 CA E2 D7     						jp		z,.RollingRight
  96++D7CB DD 21 20 C0  .RollingLeft:			ld		ix,UBnKxlo
  97++D7CF FD 21 0B D7  						ld		iy,UBnK24BitAlphaMulY
  98++D7D3 CD 90 00     						call	AddAtIXtoAtIY24Signed
  99++D7D6 DD 21 23 C0  						ld		ix,UBnKylo
 100++D7DA FD 21 07 D7  						ld		iy,UBnK24BitAlphaMulX
 101++D7DE CD CD 00     						call	SubAtIXtoAtIY24Signed
 102++D7E1 C9           						ret
 103++D7E2 DD 21 20 C0  .RollingRight:			ld		ix,UBnKxlo
 104++D7E6 FD 21 0B D7  						ld		iy,UBnK24BitAlphaMulY
 105++D7EA CD CD 00     						call	SubAtIXtoAtIY24Signed
 106++D7ED DD 21 23 C0  						ld		ix,UBnKylo
 107++D7F1 FD 21 07 D7  						ld		iy,UBnK24BitAlphaMulX
 108++D7F5 CD 90 00     						call	AddAtIXtoAtIY24Signed
 109++D7F8 C9           						ret
 110++D7F9
 111++D7F9 3A C2 7E     UBnKPitch_24Bit:		ld      a,(BETA)                   ; get roll value
 112++D7FC E6 7F        						and 	$7F
 113++D7FE 57           						ld      d,a                         ; .
 114++D7FF 3A 23 C0     						ld      a,(UBnKylo)                ; HLE = x sgn, hi, lo
 115++D802 5F           						ld      e,a                         ; .
 116++D803 2A 24 C0     						ld      hl,(UBnKyhi)               ; .
 117++D806 CD 17 93     						call    mulHLEbyDSigned             ; DELC = x * alpha, so DEL = X * -alpha / 256
 118++D809 7D           						ld		a,l
 119++D80A 32 17 D7     						ld		(UBnK24BitBetaMulY),a			; save result
 120++D80D ED 53 18 D7  						ld		(UBnK24BitBetaMulY+1),de		; save result
 121++D811 3A C2 7E     						ld      a,(BETA)                   ; get roll value
 122++D814 E6 7F        						and 	$7F
 123++D816 57           						ld      d,a                         ; .
 124++D817 3A 26 C0     						ld      a,(UBnKzlo)                ; HLE = x sgn, hi, lo
 125++D81A 5F           						ld      e,a                         ; .
 126++D81B 2A 27 C0     						ld      hl,(UBnKzhi)               ; .
 127++D81E CD 17 93     						call    mulHLEbyDSigned             ; DELC = x * alpha, so DEL = X * -alpha / 256
 128++D821 7D           						ld		a,l
 129++D822 32 13 D7     						ld		(UBnK24BitBetaMulZ),a			; save result
 130++D825 ED 53 14 D7  						ld		(UBnK24BitBetaMulZ+1),de		; save result
 131++D829 3A C2 7E     						ld		a,(BETA)
 132++D82C E6 80        						and		$80
 133++D82E CA 48 D8     						jp		z,.Climbing
 134++D831 DD 21 23 C0  .Diving:				ld		ix,UBnKylo
 135++D835 FD 21 13 D7  						ld		iy,UBnK24BitBetaMulZ
 136++D839 CD 90 00     						call	AddAtIXtoAtIY24Signed
 137++D83C DD 21 26 C0  						ld		ix,UBnKzlo
 138++D840 FD 21 17 D7  						ld		iy,UBnK24BitBetaMulY
 139++D844 CD CD 00     						call	SubAtIXtoAtIY24Signed
 140++D847 C9           						ret
 141++D848 DD 21 23 C0  .Climbing:		     	ld		ix,UBnKylo
 142++D84C FD 21 13 D7  						ld		iy,UBnK24BitBetaMulZ
 143++D850 CD CD 00     						call	SubAtIXtoAtIY24Signed
 144++D853 DD 21 26 C0  						ld		ix,UBnKzlo
 145++D857 FD 21 17 D7  						ld		iy,UBnK24BitBetaMulY
 146++D85B CD 90 00     						call	AddAtIXtoAtIY24Signed
 147++D85E C9           						ret
 148++D85F
 149++D85F                  ELSE
 150++D85F ~            APPequPosPlusAPP:       MACRO    Position, PositionSign
 151++D85F ~                                    push    bc
 152++D85F ~                                    ld      c,a                         ; save original value of a into c
 153++D85F ~                                    ld      a,(PositionSign)
 154++D85F ~                                    ld      b,a
 155++D85F ~                                    ld      a,c
 156++D85F ~                                    xor     b                           ; a = a xor x postition sign
 157++D85F ~                                    jp      m,.MV50                     ; if the sign is negative then A and X are both opposite signs
 158++D85F ~            ; Signs are the same to we just add and take which ever sign
 159++D85F ~                                    ld      de,(varPp1)                  ; Note we take p+2,p+1 we we did a previous 24 bit mulitple
 160++D85F ~                                    ld      hl,(Position)
 161++D85F ~                                    add     hl,de
 162++D85F ~                                    ld      (varPp1),hl                  ; now we have P1 and p2 with lo hi and
 163++D85F ~                                    ld      a,c                         ; and a = original sign as they were both the same
 164++D85F ~                                    pop     bc
 165++D85F ~                                    ret
 166++D85F ~            ; Signs are opposite so we subtract
 167++D85F ~            .MV50:                  ld      de,(varPp1)
 168++D85F ~                                    ld      hl,(Position)
 169++D85F ~                                    or      a
 170++D85F ~                                    sbc     hl,de
 171++D85F ~                                    jr      c,.MV51                     ; if the result was negative then negate result
 172++D85F ~                                    ld      a,c                         ; get back the original sign
 173++D85F ~                                    ld      (varPp1),hl                 ; and save result to P[2][1]
 174++D85F ~                                    xor     SignOnly8Bit                ; flip sign and exit A = flip of a
 175++D85F ~                                    pop     bc
 176++D85F ~                                    ret
 177++D85F ~            .MV51:                  NegHL
 178++D85F ~                                    ld      (varPp1),hl
 179++D85F ~                                    ld      a,c                         ; the original sign will still be good
 180++D85F ~                                    pop     bc
 181++D85F ~                                    ret
 182++D85F ~                                    ENDM
 183++D85F ~
 184++D85F ~
 185++D85F ~            APPequXPosPlusAPP:     APPequPosPlusAPP UBnKxlo, UBnKxsgn
 186++D85F ~
 187++D85F ~            APPequYPosPlusAPP:     APPequPosPlusAPP UBnKylo, UBnKysgn
 188++D85F ~
 189++D85F ~            APPequZPosPlusAPP:     APPequPosPlusAPP UBnKzlo, UBnKzsgn
 190++D85F ~
 191++D85F ~            ; rollWork holds Alpha intermidate results
 192++D85F ~            rollWork      DS 3
 193++D85F ~            rollWorkp1    equ rollWork
 194++D85F ~            rollWorkp2    equ rollWork+1
 195++D85F ~            rollWorkp3    equ rollWork+2
 196++D85F ~
 197++D85F ~            ;----------------------------------------------------------------------------------------------------------------------------------
 198++D85F ~            ; based on MVEIT part 4 of 9
 199++D85F ~            ApplyMyRollAndPitch:    ld      a,(ALP1)                    ; get roll magnitude
 200++D85F ~                                    ld      hl,BET1                     ; and pitch
 201++D85F ~                                    or      (hl)
 202++D85F ~                                    jp      z,.NoRotation               ; if both zero then don't compute
 203++D85F ~            ; If the xsgn,ysng or zsng are not 0 or $80 then we use 24 bit routines
 204++D85F ~            ; else we can just continue to use 16 bit
 205++D85F ~                                   ;jp      ApplyMyRollAndPitch24Bit
 206++D85F ~
 207++D85F ~            .CheckFor24Bit:         ld      a,(UBnKxsgn)
 208++D85F ~                                    ld      hl,UBnKysgn
 209++D85F ~                                    or      (hl)
 210++D85F ~                                    ld      hl,UBnKzsgn
 211++D85F ~                                    or      (hl)
 212++D85F ~                                    and     $7F
 213++D85F ~                                    jp      nz,ApplyMyRollAndPitch24Bit
 214++D85F ~                                    ;break
 215++D85F ~            ; P[210] = x * alph (we use P[2]P[1] later as result/256
 216++D85F ~            .Not24BitCalcs:         ld      e,a                         ; e = roll magnitude
 217++D85F ~                                    ld      hl,(UBnKxlo)                ; hl = ship x pos
 218++D85F ~                                    call    AHLequHLmulE                ; MULTU2-2 AHL = UbnkXlo * Alp1 both unsigned
 219++D85F ~                                    ld      (varPhi2),a                 ; set P[2] to high byte to help with ./256
 220++D85F ~                                    ld      (varP),hl                   ; P (2 1 0) = UbnkXlo * Alph1
 221++D85F ~            ; A = Flip sign
 222++D85F ~                                    ld      a,(ALP2)                ; flip the current roll angle alpha and xor with x sign
 223++D85F ~                                    ld      hl,UBnKxsgn                 ; and xor with x pos sign
 224++D85F ~                                    xor     (hl)                        ; so now  (A P+2 P+1) = - (x_sign x_hi x_lo) * alpha / 256
 225++D85F ~            ; AP[2]P[1] =Y + AP[2]P[1] (i.e. Previous APP/256)
 226++D85F ~                                    call    APPequYPosPlusAPP           ; MVT6 calculate APP = y - (x * alpha / 256)
 227++D85F ~            ; K2 = AP[2][1] K2(3 2 1) = (A P+2 P+1) = y - x * alpha / 256
 228++D85F ~                                    ld      (rollWorkp3),a               ; k2+3 = sign of result
 229++D85F ~                                    ld      (rollWorkp1),hl             ; k2+1,2 = result
 230++D85F ~            ; P[210] = K2[2 1] * Beta  = (A ~P) * X
 231++D85F ~                                    ld      a,(BET1)                    ; a = magnitude of pitch
 232++D85F ~                                    ld      e,a
 233++D85F ~                                    call    AHLequHLmulE                ; MLTU2-2 AHL = (P+2 P+1) * BET1 or by now ((UbnkXlo * Alph1)/256 * Bet1)
 234++D85F ~                                    ld      (varPp2),a                   ; save highest byte in P2
 235++D85F ~                                    ld      (varP),hl
 236++D85F ~            ; Fetch sign of previosu cal and xor with BETA inverted
 237++D85F ~                                    ld      a,(rollWorkp3)
 238++D85F ~                                    ld      e,a
 239++D85F ~                                    ld      a,(BET2)
 240++D85F ~                                    xor     e                           ; so we get the sign of K3 and xor with pitch sign
 241++D85F ~            ; Z = P[210] =Z + APP
 242++D85F ~                                    call    APPequZPosPlusAPP           ; MVT6
 243++D85F ~                                    ld      (UBnKzsgn),a                ; save result back into z
 244++D85F ~                                    ld      (UBnKzlo),hl
 245++D85F ~            ; A[P1]P[0] = z * Beta
 246++D85F ~                                    ld      a,(BET1)                    ; get pitch back again for mulitply in original it was kept in Q so no fetch needed
 247++D85F ~                                    ld      e,a
 248++D85F ~                                    call    AHLequHLmulE                ; MULTU2 P2 P1 was already in hl (A P+1 P) = (z_hi z_lo) * beta
 249++D85F ~                                    ld      (varPp2),a                  ; P2 = high byte of result
 250++D85F ~                                    ld      (varP),hl                   ; P (2 1 0) = UbnkXlo & Alph1
 251++D85F ~            ; A xor BET2,Zsign
 252++D85F ~                                    ld      a,(rollWorkp3)               ; get K3 (sign of y) and store it in y pos
 253++D85F ~                                    ld      (UBnKysgn),a                ; save result back into y
 254++D85F ~                                    ld      e,a                         ; a = y sign Xor pitch rate sign
 255++D85F ~                                    ld      a,(BET2)                    ;
 256++D85F ~                                    xor     e                           ;
 257++D85F ~                                    ld      e,a                         ; now xor it with z sign too
 258++D85F ~                                    ld      a,(UBnKzsgn)                ;
 259++D85F ~                                    xor     e                           ; so now a = sign of y * beta * sign y * sign z
 260++D85F ~                                    jp      p,.MV43                     ; if result is pve beta * z and y have differetn signs
 261++D85F ~                                    ld      hl,(varPp1)
 262++D85F ~                                    ld      de,(rollWorkp1)
 263++D85F ~                                    or      a
 264++D85F ~                                    add     hl,de
 265++D85F ~                                    jp      .MV44
 266++D85F ~            .MV43:                  ld      hl,(rollWorkp1)
 267++D85F ~                                    ld      de,(varPp1)
 268++D85F ~                                    or      a
 269++D85F ~                                    sbc     hl,de                       ; (y_hi y_lo) = K2(2 1) - P(2 1)
 270++D85F ~                                    jr      nc,.MV44                    ; if there was no over flow carry on
 271++D85F ~                                    NegHL
 272++D85F ~                                    ld      a,(UBnKysgn)                ; flip sign bit TODO, we may have to remove xor as planets and Univs are sign + 23 bit xpos
 273++D85F ~                                    xor     SignOnly8Bit
 274++D85F ~                                    ld      (UBnKysgn),a
 275++D85F ~            ; by here we have (y_sign y_hi y_lo) = K2(2 1) - P(2 1) = K2 - beta * z
 276++D85F ~            .MV44:                  ld      (UBnKylo),hl                ; we do save here to avoid two writes if MV43 ended up with a 2s'c conversion
 277++D85F ~                                    ld      a,(ALP1)                    ; get roll magnitude
 278++D85F ~                                    ld      e,a
 279++D85F ~                                    ld      hl,(UBnKylo)
 280++D85F ~                                    call    AHLequHLmulE                ; MLTU2-2 AHL = (y_hi y_lo) * alpha
 281++D85F ~                                    ld      (varPp2),a                  ; store high byte P(2 1 0) = (y_hi y_lo) * alpha
 282++D85F ~                                    ld      (varP),hl
 283++D85F ~                                    ld      a,(ALP2FLIP)
 284++D85F ~                                    ld      e,a
 285++D85F ~                                    ld      a,(UBnKysgn)
 286++D85F ~                                    xor     e                           ; a = sign of roll xor y so now we have (A P+2 P+1) = (y_sign y_hi y_lo) * alpha / 256
 287++D85F ~                                    call    APPequXPosPlusAPP           ; MVT6 Set (A P+2 P+1) = (x_sign x_hi x_lo) + (A P+2 P+1) = x + y * alpha / 256
 288++D85F ~                                    ld      (UBnKxsgn),a                ; save resutl stright into X pos
 289++D85F ~                                    ld      (UBnKxlo),hl
 290++D85F ~                                    ;break
 291++D85F ~                                    call    ApplyMyRollToOrientation
 292++D85F ~                                    call    ApplyMyPitchToOrientation
 293++D85F ~                                    ; if its not a Univ then apply to local orientation
 294++D85F ~            .NoRotation:            ld      a,(DELTA)                   ; get speed
 295++D85F ~                                    ld      d,0
 296++D85F ~                                    ld      e,a                         ; de = speed in low byte
 297++D85F ~                                    ld      hl,(UBnKzlo)                ; hl = z position
 298++D85F ~                                    ld      a,(UBnKzsgn)                ; b = z sign
 299++D85F ~                                    ld      b,a                         ;
 300++D85F ~                                    ld      c,$80                       ; c = -ve as we are always moving forwards
 301++D85F ~                                    call    ADDHLDESignBC               ; update speed
 302++D85F ~                                    ld      (UBnKzlo),hl                ; write back to zpos
 303++D85F ~                                    ld      (UBnKzsgn),a                ;
 304++D85F ~                                    ret
 305++D85F ~
 306++D85F ~                           DISPLAY "TODO: Looks like pitch is always being applied as positive"
 307++D85F ~            ApplyMyRollToOrientation:MMUSelectMathsBankedFns
 308++D85F ~                                    ld      a,(ALPHA)
 308++D85F ~              ld ix,UBnkrotmatNosevX
 308++D85F ~              ld iy,UBnkrotmatNosevY
 308++D85F ~              call ApplyMyAngleAToIXIY ; ApplyMyRollToNosev:
 309++D85F ~                                    ld      a,(ALPHA)
 309++D85F ~              ld ix,UBnkrotmatSidevX
 309++D85F ~              ld iy,UBnkrotmatSidevY
 309++D85F ~              call ApplyMyAngleAToIXIY ; ApplyMyRollToSidev:
 310++D85F ~                                    ld      a,(ALPHA)
 310++D85F ~              ld ix,UBnkrotmatRoofvX
 310++D85F ~              ld iy,UBnkrotmatRoofvY
 310++D85F ~              call ApplyMyAngleAToIXIY ; ApplyMyRollToRoofv:
 311++D85F ~                                    ret
 312++D85F ~
 313++D85F ~            ApplyMyPitchToOrientation:
 314++D85F ~                                    ld      a,(BETA)
 314++D85F ~              ld ix,UBnkrotmatNosevZ
 314++D85F ~              ld iy,UBnkrotmatNosevY
 314++D85F ~              call ApplyMyAngleAToIXIY ; ApplyMyPitchToNosev:
 315++D85F ~                                    ld      a,(BETA)
 315++D85F ~              ld ix,UBnkrotmatSidevZ
 315++D85F ~              ld iy,UBnkrotmatSidevY
 315++D85F ~              call ApplyMyAngleAToIXIY ; ApplyMyPitchToSidev:
 316++D85F ~                                    ld      a,(BETA)
 316++D85F ~              ld ix,UBnkrotmatRoofvZ
 316++D85F ~              ld iy,UBnkrotmatRoofvY
 316++D85F ~              call ApplyMyAngleAToIXIY ; ApplyMyPitchToRoofv:
 317++D85F ~                                    ret
 318++D85F ~            ;----------------------------------------------------------------------------------------------------------------------------------
 319++D85F ~            ; 24 bit version of pitch and roll is a 24 bit calculation 1 bit sign + 23 bit value
 320++D85F ~            ; Need to write a test routine for roll and pitchs
 321++D85F ~            ; Minsky Roll       Minsky Pitch
 322++D85F ~            ;  y -= alpha * x    y -= beta * z
 323++D85F ~            ;  x += alpha * y    z += beta * y
 324++D85F ~            ; or once combined
 325++D85F ~            ;   1. K2 = y - alpha * x
 326++D85F ~            ;   2. z = z + beta * K2
 327++D85F ~            ;   3. y = K2 - beta * z
 328++D85F ~            ;   4. x = x + alpha * y
 329++D85F ~            ;----------------------------------------------------------------------------------------------------------------------------------
 330++D85F ~            ; Based on non optimised version of Planet pitch and roll is a 24 bit calculation 1 bit sign + 23 bit value
 331++D85F ~            ; Now at least rolls the correct direction
 332++D85F ~            UnivAlphaMulX               DB $00,$00, $00, $00
 333++D85F ~            UnivAlphaMulY               DB $00,$00, $00, $00
 334++D85F ~            UnivAlphaMulZ               DB $00,$00, $00, $00
 335++D85F ~            UnivBetaMulZ                DB $00,$00, $00, $00
 336++D85F ~            UnivBetaMulY                DB $00,$00, $00, $00
 337++D85F ~            UnivK2                      DS 3
 338++D85F ~
 339++D85F ~            ApplyMyRollAndPitch24Bit: 	 ld     a,(ALPHA)                   ; no roll or pitch, no calc needed
 340++D85F ~                                         ld     hl,BETA
 341++D85F ~                                         or     (hl)
 342++D85F ~                                         call   nz, Univ_Roll_And_Pitch
 343++D85F ~            ;.CheckForRoll:              and		a
 344++D85F ~            ;							call	nz,Univ_Roll
 345++D85F ~            ;.CheckForPitch:				ld		a,(BETA)
 346++D85F ~            ;							and		a
 347++D85F ~            ;							call	nz,Univ_Pitch
 348++D85F ~            .ApplySpeed:            	ld      a,(DELTA)                   ; BCH = - Delta
 349++D85F ~            							ReturnIfAIsZero
 350++D85F ~            							ld      c,0                         ;
 351++D85F ~            							ld      h,a                         ;
 352++D85F ~            							ld      b,$80                       ;
 353++D85F ~            							ld      de,(UBnKzhi)                ; DEL = z position
 354++D85F ~            							ld      a,(UBnKzlo)                 ; .
 355++D85F ~            							ld      l,a                         ; .
 356++D85F ~            							call    AddBCHtoDELsigned           ; update speed
 357++D85F ~            							ld      (UBnKzhi),DE                ; write back to zpos
 358++D85F ~            							ld      a,l
 359++D85F ~            							ld      (UBnKzlo),a                ;
 360++D85F ~            							ret
 361++D85F ~
 362++D85F ~            ; Performs minsky rotation
 363++D85F ~            ; Joystick left          Joystick right
 364++D85F ~            ; ---------------------  ---------------------
 365++D85F ~            ; x :=  x      + y / 64  x :=  x -  y / 64  so rather than /64  is z * alpha / 256
 366++D85F ~            ; y :=  y      - x /64   y :=  y +  x / 64
 367++D85F ~            ;
 368++D85F ~            ; Joystick down          Joystick up
 369++D85F ~            ; ---------------------  ---------------------
 370++D85F ~            ; y :=  y      + z / 64  y :=  y - z / 64
 371++D85F ~            ; z :=  z      - y / 64  z :=  z + y / 64
 372++D85F ~            ;
 373++D85F ~            ; get z, multiply by alpha, pick top 3 bytes with sign
 374++D85F ~            ; get x, multiply by alpha, pick top 3 bytes with sign
 375++D85F ~            ; if alpha +ve subtract x = x - z adj, z =z + x adj , else x += z adj z -= z adj
 376++D85F ~            ; so we can assume 24 bit maths and just do 16 bit multiply of say HL = nosev x [sgn][hi] and de = [0][alpha] by calling AHLequHLmulE
 377++D85F ~            ; for roll
 378++D85F ~            ; nosev_y = nosev_y - alpha * nosev_x_hi
 379++D85F ~            ; nosev_x = nosev_x + alpha * nosev_y_hi
 380++D85F ~            ; and for pitch
 381++D85F ~            ; nosev_y = nosev_y - beta * nosev_z_hi
 382++D85F ~            ; nosev_z = nosev_z + beta * nosev_y_hi
 383++D85F ~            ;  1. K2 = y - alpha * x
 384++D85F ~            ;   2. z = z + beta * K2
 385++D85F ~            ;   3. y = K2 - beta * z
 386++D85F ~            ;   4. x = x + alpha * y
 387++D85F ~            ;
 388++D85F ~            ;   1a. K [3 2 1 0] = -alpha * (x sign hi lo)
 389++D85F ~            ;   1b. K [3 2 1]   = y sign hi lo + K [321] (in effect y minus (alpha * x / 256)
 390++D85F ~            ;   1c. K2 [3 2 1]  = k [3 2 1 ]
 391++D85F ~            ;   2a. K[3 2 1 0]  = k2 [3 2 1] * beta
 392++D85F ~            ;   2b. z sign hi lo += K[3 2 1] ( in effect z += (beta * K2)/256
 393++D85F ~            ;   3a. K [3 2 1 0] = z sign hi lo * -beta
 394++D85F ~            ;   3b. y sign hi lo = K2 [3 2 1] - K [3 2 1] ( in effect K2 - (beta * z) /256
 395++D85F ~            ;
 396++D85F ~            ;   4. x = x + alpha * y
 397++D85F ~
 398++D85F ~
 399++D85F ~
 400++D85F ~            ;-- Q = - ALPHA
 401++D85F ~            ;-- A P[1 0] = xsign xhi xlo
 402++D85F ~            ;-- call K[3 2 1 0] = A P[1 0] * Q which means  K(3 2 1) = (A P+1 P) * Q / 256 = x * -alpha / 256 = - alpha * x / 256
 403++D85F ~            ;-- call K[3 2 1] = ysign hi lo + K[3 2 1] (= y - alpha * x / 256)
 404++D85F ~            ;-- K2 [3 2 1 ] = K [ 3 2 1 ]
 405++D85F ~            ;-- A P [1 0]   = K [3 2 1]
 406++D85F ~            ;-- Q = BETA
 407++D85F ~            ;-- K[3 2 1 0] = A P[1 0] * Q
 408++D85F ~            ;-- K3[3 2 1] = z sign hi lo + K[3 2 1]
 409++D85F ~            ;-- A P [1 0] = -K [3 2 1]
 410++D85F ~            ;-- z sign hi lo = K[3 2 1]
 411++D85F ~            ;-- K[3 2 1 0] = A P[1 0] * Q
 412++D85F ~            ;-- T = K[3] sign bit
 413++D85F ~            ;-- A = K[3] sign bit xor K2[3]
 414++D85F ~            ;-- if positive A yhi lo - = K [3 2 1 0] + K2[3 2 1 0] so A yhi ylo = K + K2 /256 as we abandon low byte
 415++D85F ~            ;-- if negative A yhi lo = (K - k2 )/256
 416++D85F ~            ;-- A = A xor T
 417++D85F ~            ;-- y sign = A
 418++D85F ~            ;-- Q = alpha
 419++D85F ~            ;-- A P(1 0) = y sign hi lo
 420++D85F ~            ;-- K[3 2 1 0 ] A P[1 0] * Q
 421++D85F ~            ;-- x sign hi lo = K[3 2 1] = xsign hi lo * K[3 2 1]
 422++D85F ~
 423++D85F ~            K2      DS  3
 424++D85F ~
 425++D85F ~            Univ_Roll_And_Pitch:	    ld      a,(ALPHA)                   ; get roll value
 426++D85F ~            ;** 1. K2 = y - alpha * x **************************************
 427++D85F ~            ;-- DEL = alpha * (x sign hi lo) /256
 428++D85F ~            							ld      d,a                         ; d = alpha
 429++D85F ~            							ld      a,(UBnKxlo)                 ; HLE = x sgn, hi, lo
 430++D85F ~            							ld      e,a                         ; .
 431++D85F ~            							ld      hl,(UBnKxhi)                ; hl = UBnKchi sgn
 432++D85F ~            							call    mulHLEbyDSigned             ; DELC = x * alpha, so DEL = X * alpha / 256
 433++D85F ~            ;-- DEL = K2 = y - alpha * x
 434++D85F ~                                        ld      bc,de                       ; transfer to BCH for now
 435++D85F ~                                        ld      h,l
 436++D85F ~                                        ld      de,(UBnKyhi)
 437++D85F ~                                        ld      a,(UBnKylo)
 438++D85F ~                                        ld      l,a
 439++D85F ~                                        call    SubBCHfromDELsigned
 440++D85F ~                                        ld      (K2+1),de
 441++D85F ~                                        ld      a,l
 442++D85F ~                                        ld      (K2),a
 443++D85F ~            ;** 2. z = z + beta * K2 ***************************************
 444++D85F ~            ;-- HLE = DEL ..................................................
 445++D85F ~                                        ex      de,hl                       ; will set hl to de and e to l in one go
 446++D85F ~            ;-- DELC = beta * HLE, i.e. beta * K2
 447++D85F ~                                        ld      a,(BETA)
 448++D85F ~                                        ld      d,a
 449++D85F ~                                        call    mulHLEbyDSigned             ; DELC = beta * K2
 450++D85F ~            ;-- DEL = z + DEL, i.e. z + Beta * K2 /256
 451++D85F ~                                        ld      bc,(UBnKzhi)                ; BCH = z
 452++D85F ~                                        ld      a,(UBnKzlo)                 ; .
 453++D85F ~                                        ld      h,a                         ; .
 454++D85F ~                                        call    AddBCHtoDELsigned           ; DEL =z + (beta * K2)/256
 455++D85F ~                                        ld      (UBnKzhi),de                ; and save to Z
 456++D85F ~                                        ld      a,l                         ; .
 457++D85F ~                                        ld      (UBnKzlo),a                 ; .
 458++D85F ~            ;** 3. y = K2 - beta * z ***************************************
 459++D85F ~            ;-- DEL = beta * z / 256
 460++D85F ~                                        ld      a,(BETA)                    ; get pitch value
 461++D85F ~            							ld      d,a                         ; d = pitch
 462++D85F ~            							ld      a,(UBnKzlo)                 ; HLE = z sgn, hi, lo
 463++D85F ~            							ld      e,a                         ; .
 464++D85F ~            							ld      hl,(UBnKzhi)                ; hl = UBnKchi sgn
 465++D85F ~            							call    mulHLEbyDSigned             ; DELC = z * beta, so DEL = z * beta / 256
 466++D85F ~            ;-- BCH = DEL ..................................................
 467++D85F ~                                        ld      bc,de                       ; transfer to BCH for now
 468++D85F ~                                        ld      h,l
 469++D85F ~            ;-- y = DEL = K2 - beta * z = DEL - BCH
 470++D85F ~                                        ld      de,(K2+1)                   ; del = K2
 471++D85F ~                                        ld      a,(K2)                      ; .
 472++D85F ~                                        ld      l,a                         ; .
 473++D85F ~                                        call    SubBCHfromDELsigned         ; .
 474++D85F ~                                        ld      (UBnKyhi),de                ; and save to y
 475++D85F ~                                        ld      a,l                         ; .
 476++D85F ~                                        ld      (UBnKylo),a                 ; .
 477++D85F ~            ;** 4. x = x + alpha * y ***************************************
 478++D85F ~            ;-- DEL = alpha * y
 479++D85F ~                                        ld      a,(ALPHA)                   ; get roll value
 480++D85F ~            ;-- DEL = alpha * (y sign hi lo) /256
 481++D85F ~            							ld      d,a                         ; d = alpha
 482++D85F ~            							ld      a,(UBnKylo)                 ; HLE = y sgn, hi, lo
 483++D85F ~            							ld      e,a                         ; .
 484++D85F ~            							ld      hl,(UBnKyhi)                ; hl = UBnKyhi sgn
 485++D85F ~            							call    mulHLEbyDSigned             ; DELC = y * alpha, so DEL = Y * alpha / 256
 486++D85F ~            ;-- DEL = x + alpha * y
 487++D85F ~                                        ld      bc,de                       ; transfer to BCH for now
 488++D85F ~                                        ld      h,l                         ; .
 489++D85F ~                                        ld      de,(UBnKxhi)                ; del = x
 490++D85F ~                                        ld      a,(UBnKxlo)                 ; .
 491++D85F ~                                        ld      l,a                         ; .
 492++D85F ~                                        call    AddBCHtoDELsigned           ; del = del + bch = x + alpha * y
 493++D85F ~                                        ld      (UBnKxhi),de                ; and save to x
 494++D85F ~                                        ld      a,l                         ; .
 495++D85F ~                                        ld      (UBnKxlo),a                 ; .
 496++D85F ~            .ApplyRollToRight:          ;call    ApplyMyRollToOrientation
 497++D85F ~            .ApplyPitchToClimb:         call    ApplyMyPitchToOrientation
 498++D85F ~                                      ;  call    TidyVectorsIX ; doesn't work
 499++D85F ~            							ret
 500++D85F                  ENDIF
 501++D85F
# file closed: ././Universe/Ships/ApplyMyRollAndPitch.asm
1495+ D85F                          INCLUDE "./Universe/Ships/ApplyShipRollAndPitch.asm"
# file opened: ././Universe/Ships/ApplyShipRollAndPitch.asm
   1++D85F
   2++D85F
   3++D85F              ;----------------------------------------------------------------------------------------------------------------------------------
   4++D85F              ; based on MVEIT part 4 of 9
   5++D85F              ; x and z counters are proper 2's c values
   6++D85F 3A 89 C0     ApplyShipRollAndPitch:  ld      a,(UBnKRotZCounter)
   7++D862 FE FF                                cp      $FF
   8++D864 28 18                                jr      z,.PitchSAxes
   9++D866 47           .splitAndDampenZ:       ld      b,a                     ; preserve S7 counter
  10++D867 E6 7F                                and     SignMask8Bit            ; if abs (Rotz) is 0 then skip pitch
  11++D869 CA AB D8                             jp      z,.ProcessRoll
  12++D86C 78                                   ld      a,b                     ; b = rotate counter S7
  13++D86D E6 80                                and     SignOnly8Bit            ; a = sign rat2 = c = sign
  14++D86F 4F                                   ld      c,a                     ; .
  15++D870 32 8F C0                             ld      (univRAT2),a            ; .
  16++D873 78                                   ld      a,b                     ; a = abs b
  17++D874 E6 7F                                and     SignMask8Bit            ; .
  18++D876 3D                                   dec     a                       ; dampen
  19++D877 32 90 C0                             ld      (univRAT2Val),a
  20++D87A B1                                   or      c                       ; make S7 again after dampening
  21++D87B 32 89 C0                             ld      (UBnKRotZCounter),a     ; Update Rotation Counter
  22++D87E 21 30 C0     .PitchSAxes:            ld	    hl,UBnkrotmatRoofvX; UBnkrotmatSidevY
  23++D881 22 9B 7E                             ld	    (varAxis1),hl
  24++D884 21 36 C0                             ld	    hl,UBnkrotmatNosevX; UBnkrotmatSidevZ
  25++D887 22 9D 7E                             ld	    (varAxis2),hl
  26++D88A CD F7 D8                             call    MVS5RotateAxis
  27++D88D 21 32 C0     .PitchRAxes:            ld	    hl,UBnkrotmatRoofvY
  28++D890 22 9B 7E                             ld	    (varAxis1),hl
  29++D893 21 38 C0                             ld	    hl,UBnkrotmatNosevY;UBnkrotmatRoofvZ
  30++D896 22 9D 7E                             ld	    (varAxis2),hl
  31++D899 CD F7 D8                             call    MVS5RotateAxis
  32++D89C 21 34 C0     .PitchNAxes:            ld	    hl,UBnkrotmatRoofvZ; UBnkrotmatNosevY
  33++D89F 22 9B 7E                             ld	    (varAxis1),hl
  34++D8A2 21 3A C0                             ld	    hl,UBnkrotmatNosevZ
  35++D8A5 22 9D 7E                             ld	    (varAxis2),hl
  36++D8A8 CD F7 D8                             call    MVS5RotateAxis
  37++D8AB 3A 88 C0     .ProcessRoll:           ld      a,(UBnKRotXCounter)
  38++D8AE FE FF                                cp      $FF
  39++D8B0 28 17                                jr      z,.RollSAxis
  40++D8B2 47           .splitAndDampenX:       ld      b,a
  41++D8B3 E6 7F                                and     SignMask8Bit            ; exit early is ABS = 0
  42++D8B5 A7                                   and     a                       ; .
  43++D8B6 C8                                   ret     z                       ; .
  44++D8B7 78                                   ld      a,b                     ; a = rotate counter S7
  45++D8B8 E6 80                                and     SignOnly8Bit            ; rat2 = c = sign
  46++D8BA 4F                                   ld      c,a                     ; .
  47++D8BB 32 8F C0                             ld      (univRAT2),a            ; .
  48++D8BE 78                                   ld      a,b                     ; a = abs b
  49++D8BF E6 7F                                and     SignMask8Bit            ; .
  50++D8C1 3D                                   dec     a                       ; dampen
  51++D8C2 32 90 C0                             ld      (univRAT2Val),a
  52++D8C5 B1                                   or      c                       ; make S7 again after dampening
  53++D8C6 32 88 C0                             ld      (UBnKRotXCounter),a
  54++D8C9 21 30 C0     .RollSAxis:           	ld	    hl,UBnkrotmatRoofvX; UBnkrotmatSidevX
  55++D8CC 22 9B 7E                             ld	    (varAxis1),hl
  56++D8CF 21 2A C0                             ld	    hl,UBnkrotmatSidevX; UBnkrotmatSidevY
  57++D8D2 22 9D 7E                             ld	    (varAxis2),hl
  58++D8D5 CD F7 D8                             call    MVS5RotateAxis
  59++D8D8 21 32 C0     .RollRAxis:             ld	    hl,UBnkrotmatRoofvY; UBnkrotmatRoofvX
  60++D8DB 22 9B 7E                             ld	    (varAxis1),hl
  61++D8DE 21 2C C0                             ld	    hl,UBnkrotmatSidevY; UBnkrotmatRoofvY
  62++D8E1 22 9D 7E                             ld	    (varAxis2),hl
  63++D8E4 CD F7 D8                             call    MVS5RotateAxis
  64++D8E7 21 34 C0     .RollNAxis:             ld	    hl,UBnkrotmatRoofvZ; UBnkrotmatNosevX
  65++D8EA 22 9B 7E                             ld	    (varAxis1),hl
  66++D8ED 21 2E C0                             ld	    hl,UBnkrotmatSidevZ; UBnkrotmatNosevY
  67++D8F0 22 9D 7E                             ld	    (varAxis2),hl
  68++D8F3 CD F7 D8                             call    MVS5RotateAxis
  69++D8F6 C9                                   ret
  70++D8F7
  71++D8F7
  72++D8F7
  73++D8F7              ; Roate around axis
  74++D8F7              ; varAxis1 and varAxis2 point to the address of the axis to rotate
  75++D8F7              ; so the axis x1 points to roofv  x , y or z
  76++D8F7              ;             x2           nosev or sidev  x, y or z
  77++D8F7              ;   Axis1 = Axis1 * (1 - 1/512)  + Axis2 / 16
  78++D8F7              ;   Axis2 = Axis2 * (1 - 1/512)  - Axis1 / 16
  79++D8F7              ; var RAT2 gives direction
  80++D8F7              ; for pitch x we come in with Axis1 = roofv_x and Axis2 = nosev_x
  81++D8F7              ;-Set up S R -----------------------------------------
  82++D8F7              ; optimised we don't deal with sign here just the value of roof axis / 512
  83++D8F7 2A 9B 7E     MVS5RotateAxis:         ld      hl,(varAxis1)   ; work on roofv axis to get (1- 1/152) * roofv axis
  84++D8FA 5E                                   ld      e,(hl)
  85++D8FB 23                                   inc     hl
  86++D8FC 56                                   ld      d,(hl)          ; de = Axis1 (roofv x for pitch x)
  87++D8FD EB                                   ex      de,hl           ; hl = Axis1 (roofv x for pitch x)
  88++D8FE 7C                                   ld      a,h
  89++D8FF E6 80                                and     SignOnly8Bit
  90++D901 FD 67                                ld      iyh,a           ; iyh = sign Axis1
  91++D903 7C                                   ld      a,h
  92++D904 E6 7F                                and     SignMask8Bit    ; a = Axis1 (roof hi axis  unsigned)
  93++D906 CB 3F                                srl     a               ; a = Axis1/2
  94++D908 5F                                   ld      e,a             ;
  95++D909 FD 7C                                ld      a,iyh           ; A = Axis 1 sign
  96++D90B 57                                   ld      d,a             ; de = signed Axis1 / 512
  97++D90C B7                                   or      a               ; clear carry
  98++D90D CD 75 01                             call    subHLDES15      ; hl = roof axis - (roof axis /512) which in effect is roof * (1-1/512)
  99++D910              ;-Push to stack roof axis - (roofaxis/152)  ----------------------------------------------------------------------------------
 100++D910 E5                                   push    hl              ; save hl on stack PUSH ID 1 (roof axis - roofv aixs /512)
 101++D911 7D                                   ld      a,l
 102++D912 32 B7 7F                             ld      (varR),a
 103++D915 7C                                   ld      a,h
 104++D916 32 B8 7F                             ld      (varS),a        ;  RS now equals (1- 1/152) * roofv axis or (roof axis - roofv aixs /512)
 105++D919              ;-calculate roofv latter half of calc
 106++D919 2A 9D 7E                             ld      hl,(varAxis2)   ; now work on nosev axis to get nosev axis / 16
 107++D91C 5E                                   ld      e,(hl)
 108++D91D 23                                   inc     hl
 109++D91E 56                                   ld      d,(hl)          ; de = value of roof axis
 110++D91F 7A                                   ld      a,d
 111++D920 E6 80                                and     SignOnly8Bit
 112++D922 FD 67                                ld      iyh,a           ; save sign
 113++D924 7A                                   ld      a,d
 114++D925 E6 7F                                and     SignMask8Bit    ; a = nosev hi axis  unsigned
 115++D927 57                                   ld      d,a             ; de = abs (nosev)
 116++D928                                      ShiftDERight1
 116++D928 CB 3A       >			   srl d
 116++D92A CB 1B       >			   rr  e
 117++D92C                                      ShiftDERight1
 117++D92C CB 3A       >			   srl d
 117++D92E CB 1B       >			   rr  e
 118++D930                                      ShiftDERight1
 118++D930 CB 3A       >			   srl d
 118++D932 CB 1B       >			   rr  e
 119++D934                                      ShiftDERight1           ; de = nosev /16 unsigned
 119++D934 CB 3A       >			   srl d
 119++D936 CB 1B       >			   rr  e
 120++D938 3A 8F C0                             ld      a,(univRAT2)     ; need to consider direction, so by defautl we use rat2, but flip via sign bit
 121++D93B FD AC                                xor     iyh             ; get the sign back we saveded from DE in so de = nosev axis / 16 signed
 122++D93D E6 80                                and     SignOnly8Bit
 123++D93F B2                                   or      d
 124++D940 57                                   ld      d,a             ; de = nosev /16 signed and ready as if we were doing a + or - based on RAT2
 125++D941              ;;; ld      a,e
 126++D941              ;;;     or      iyh
 127++D941              ;;; ld      (varP),a        ; PA now equals nosev axis / 16 signed
 128++D941              ;-now AP = nosev /16  --------------------------------------------------------------------------------------------------------
 129++D941 E1                                   pop     hl              ; get back RS POP ID 1
 130++D942                  ;ex     de,hl           ; swapping around so hl = AP and de = SR , shoud not matter though as its an add
 131++D942              ;-now DE = (roofaxis/512) hl - abs(nosevaxis) --------------------------------------------------------------------------------
 132++D942 CD 56 00                             call    ADDHLDESignedV4 ; do add using hl and de
 133++D945 E5                                   push    hl              ; we use stack to represent var K here now varK = Nosev axis /16 + (1 - 1/512) * roofv axis PUSH ID 2
 134++D946              ;-push to stack nosev axis + roofvaxis /512  which is what roofv axis will be ------------------------------------------------
 135++D946              ;-- Set up SR = 1 - 1/512 * nosev-----------------------
 136++D946 2A 9D 7E                             ld      hl,(varAxis2)   ; work on nosev again to get nosev - novesv / 512
 137++D949 5E                                   ld      e,(hl)
 138++D94A 23                                   inc     hl
 139++D94B 56                                   ld      d,(hl)
 140++D94C EB                                   ex      de,hl
 141++D94D 7C                                   ld      a,h
 142++D94E E6 80                                and     $80
 143++D950 FD 67                                ld      iyh,a
 144++D952 7C                                   ld      a,h
 145++D953 E6 7F                                and     SignMask8Bit    ; a = roof hi axis  unsigned
 146++D955 CB 3F                                srl     a               ; now A = unsigned 15 bit nosev axis hi / 2 (or in effect nosev / 512
 147++D957 5F                                   ld      e,a
 148++D958 FD 7C                                ld      a,iyh
 149++D95A 57                                   ld      d,a
 150++D95B B7                                   or      a               ; clear carry
 151++D95C CD 75 01                             call    subHLDES15
 152++D95F              ;   sbc     hl,de           ; hl = nosev - novesv / 512
 153++D95F E5                                   push    hl              ; save hl on stack  PUSH ID 3
 154++D960 7D                                   ld      a,l
 155++D961 32 B6 7E                             ld      (varP),a        ; p = low of resuilt
 156++D964 7C                                   ld      a,h
 157++D965 E6 7F                                and     SignMask8Bit    ; a = roof hi axis  unsigned
 158++D967 32 D2 7F                             ld      (varT),a        ; t = high of result
 159++D96A              ;-- Set up TQ
 160++D96A 2A 9B 7E                             ld      hl,(varAxis1)   ; now work on roofv axis / 16
 161++D96D              ;   ld      hl,(varAxis2)   ; work on nosev again
 162++D96D 5E                                   ld      e,(hl)
 163++D96E 23                                   inc     hl
 164++D96F 56                                   ld      d,(hl)
 165++D970 7A                                   ld      a,d
 166++D971 E6 80                                and     $80
 167++D973 FD 67                                ld      iyh,a           ; save sign
 168++D975 7A                                   ld      a,d
 169++D976 E6 7F                                and     SignMask8Bit    ; a = nosev hi axis  unsigned
 170++D978 57                                   ld      d,a             ; de = abs (nosev)
 171++D979                                      ShiftDERight1
 171++D979 CB 3A       >			   srl d
 171++D97B CB 1B       >			   rr  e
 172++D97D                                      ShiftDERight1
 172++D97D CB 3A       >			   srl d
 172++D97F CB 1B       >			   rr  e
 173++D981                                      ShiftDERight1
 173++D981 CB 3A       >			   srl d
 173++D983 CB 1B       >			   rr  e
 174++D985                                      ShiftDERight1           ; de = nosev /16 unsigned
 174++D985 CB 3A       >			   srl d
 174++D987 CB 1B       >			   rr  e
 175++D989 3A 8F C0                             ld      a,(univRAT2)
 176++D98C FD AC                                xor     iyh             ; get the sign back in so de = nosev axis / 16 signed
 177++D98E E6 80                                and     $80
 178++D990 B2                                   or      d
 179++D991 57                                   ld      d,a
 180++D992              ;;; ld      a,e
 181++D992              ;;;     or      iyh
 182++D992              ;;; ld      (varP),a        ; PA now equals nosev axis / 16 signed
 183++D992 E1                                   pop     hl              ; get back RS   POP ID 3
 184++D993              ;   ex      de,hl           ; swapping around so hl = AP and de = SR , shoud not matter though as its an add
 185++D993 CD 75 01                             call    subHLDES15 ; do add using hl and de
 186++D996              ;-- Update nosev ---------------------------------------
 187++D996 EB                                   ex      de,hl           ; save hl to de
 188++D997 2A 9D 7E                             ld      hl,(varAxis2)
 189++D99A 73                                   ld      (hl),e
 190++D99B 23                                   inc     hl
 191++D99C 72                                   ld      (hl),d          ; copy result into nosev
 192++D99D              ;-- Update roofv ---------------------------------------
 193++D99D D1                                   pop     de              ; get calc saved on stack POP ID 2
 194++D99E 2A 9B 7E                             ld      hl,(varAxis1)
 195++D9A1 73                                   ld      (hl),e
 196++D9A2 23                                   inc     hl
 197++D9A3 72                                   ld      (hl),d          ; copy result into nosev
 198++D9A4 C9                                   ret
 199++D9A5
 200++D9A5
# file closed: ././Universe/Ships/ApplyShipRollAndPitch.asm
1496+ D9A5                          INCLUDE "./Universe/Ships/ApplyShipSpeed.asm"
# file opened: ././Universe/Ships/ApplyShipSpeed.asm
   1++D9A5
   2++D9A5
   3++D9A5              ;AddSpeedToVert:         MACRO   vertex
   4++D9A5              ;                        ld      hl,(vertex)
   5++D9A5              ;                        ld      a,(vertex+2)
   6++D9A5              ;                        ld      b,a
   7++D9A5              ;                        call    AHLEquBHLaddCDE
   8++D9A5              ;                        ld      (vertex),hl
   9++D9A5              ;                        ld      (vertex+2),a
  10++D9A5              ;                        ENDM
  11++D9A5
  12++D9A5
  13++D9A5              ; ---------------------------------------------------------------------------------------------------------------------------------
  14++D9A5 3A 86 C0     ApplyShipSpeed:         ld      a,(UBnKSpeed)                   ; get speed * 4
  15++D9A8 FE 00                                cp      0
  16++D9AA C8                                   ret     z
  17++D9AB CB 27                                sla     a
  18++D9AD CB 27                                sla     a
  19++D9AF FD 6F                                ld      iyl,a                           ; save pre calculated speed
  20++D9B1              .ApplyToX:              SpeedMulAxis    a, UBnkrotmatNosevX     ; e =  ABS (nosev x hi) c = sign
  20++D9B1 5F          >                        ld      e,a
  20++D9B2 2A 36 C0    >                        ld      hl,(UBnkrotmatNosevX)
  20++D9B5 7C          >                        ld      a,h
  20++D9B6             >                        ClearSignBitA
  20++D9B6 E6 7F       >                        and     SignMask8Bit
  20++D9B8 57          >                        ld      d,a
  20++D9B9 ED 30       >                        mul     de
  20++D9BB 7C          >                        ld      a,h
  20++D9BC             >                        SignBitOnlyA
  20++D9BC E6 80       >                        and     SignOnly8Bit
  20++D9BE 47          >                        ld      b,a;ld      c,a
  20++D9BF 62          >                        ld      h,d;ld      e,d
  20++D9C0 0E 00       >                        ld      c,0;ld      d,0
  21++D9C2              .AddSpeedToX:           AddSpeedToVert UBnKxlo
  21++D9C2 ED 5B 21 C0 >                        ld      de,(UBnKxlo+1)
  21++D9C6 3A 20 C0    >                        ld      a,(UBnKxlo)
  21++D9C9 6F          >                        ld      l,a
  21++D9CA CD 14 01    >                        call    AddBCHtoDELsigned               ; DEL = DEL + BCH
  21++D9CD 7D          >                        ld      a,l
  21++D9CE 32 20 C0    >                        ld      (UBnKxlo),a
  21++D9D1 ED 53 21 C0 >                        ld      (UBnKxlo+1),de
  22++D9D5              .ApplyToY:              SpeedMulAxis    iyl, UBnkrotmatNosevY
  22++D9D5 FD 5D       >                        ld      e,iyl
  22++D9D7 2A 38 C0    >                        ld      hl,(UBnkrotmatNosevY)
  22++D9DA 7C          >                        ld      a,h
  22++D9DB             >                        ClearSignBitA
  22++D9DB E6 7F       >                        and     SignMask8Bit
  22++D9DD 57          >                        ld      d,a
  22++D9DE ED 30       >                        mul     de
  22++D9E0 7C          >                        ld      a,h
  22++D9E1             >                        SignBitOnlyA
  22++D9E1 E6 80       >                        and     SignOnly8Bit
  22++D9E3 47          >                        ld      b,a;ld      c,a
  22++D9E4 62          >                        ld      h,d;ld      e,d
  22++D9E5 0E 00       >                        ld      c,0;ld      d,0
  23++D9E7              .AddSpeedToY:           AddSpeedToVert UBnKylo
  23++D9E7 ED 5B 24 C0 >                        ld      de,(UBnKylo+1)
  23++D9EB 3A 23 C0    >                        ld      a,(UBnKylo)
  23++D9EE 6F          >                        ld      l,a
  23++D9EF CD 14 01    >                        call    AddBCHtoDELsigned               ; DEL = DEL + BCH
  23++D9F2 7D          >                        ld      a,l
  23++D9F3 32 23 C0    >                        ld      (UBnKylo),a
  23++D9F6 ED 53 24 C0 >                        ld      (UBnKylo+1),de
  24++D9FA              .ApplyToZ:              SpeedMulAxis    iyl, UBnkrotmatNosevZ
  24++D9FA FD 5D       >                        ld      e,iyl
  24++D9FC 2A 3A C0    >                        ld      hl,(UBnkrotmatNosevZ)
  24++D9FF 7C          >                        ld      a,h
  24++DA00             >                        ClearSignBitA
  24++DA00 E6 7F       >                        and     SignMask8Bit
  24++DA02 57          >                        ld      d,a
  24++DA03 ED 30       >                        mul     de
  24++DA05 7C          >                        ld      a,h
  24++DA06             >                        SignBitOnlyA
  24++DA06 E6 80       >                        and     SignOnly8Bit
  24++DA08 47          >                        ld      b,a;ld      c,a
  24++DA09 62          >                        ld      h,d;ld      e,d
  24++DA0A 0E 00       >                        ld      c,0;ld      d,0
  25++DA0C              .AddSpeedToZ:           AddSpeedToVert UBnKzlo
  25++DA0C ED 5B 27 C0 >                        ld      de,(UBnKzlo+1)
  25++DA10 3A 26 C0    >                        ld      a,(UBnKzlo)
  25++DA13 6F          >                        ld      l,a
  25++DA14 CD 14 01    >                        call    AddBCHtoDELsigned               ; DEL = DEL + BCH
  25++DA17 7D          >                        ld      a,l
  25++DA18 32 26 C0    >                        ld      (UBnKzlo),a
  25++DA1B ED 53 27 C0 >                        ld      (UBnKzlo+1),de
  26++DA1F C9                                   ret
  27++DA20
# file closed: ././Universe/Ships/ApplyShipSpeed.asm
1497+ DA20                          INCLUDE "./ModelRender/DrawLines.asm"
# file opened: ././ModelRender/DrawLines.asm
   1++DA20
   2++DA20
   3++DA20              ; ---------------------------------------------------------------------------------------------------------------------------------
   4++DA20 00           DrawLinesCounter		db	0
   5++DA21              ; Initial tests look OK
   6++DA21              LL155:;
   7++DA21              ClearLine:                                  ; CLEAR LINEstr visited by EE31 when XX3 heap ready to draw/erase lines in XX19 heap.
   8++DA21                    ;break                                                                             ; ObjectInFront:
   9++DA21 3E 65        DrawLines:              ld	a,$65 ; DEBUG
  10++DA23 FD 6F                                ld    iyl,a							; set ixl to colour (assuming we come in here with a = colour to draw)
  11++DA25 3A 2B C4                             ld	a,(UbnkLineArrayLen)			; get number of lines
  12++DA28                                      ReturnIfAIsZero   						; No lines then bail out.
  12++DA28 A7          >                        and     a
  12++DA29 C8          >                        ret     z
  13++DA2A FD 67                                ld	iyh,a			                ; number of lines still to draw
  14++DA2C 21 71 C2                             ld	hl,UbnkLineArray
  15++DA2F 4E           .DrawLinesLoop:         ld    c,(hl)                          ; (XX19),Y c = varX1
  16++DA30 23                                   inc   hl
  17++DA31 46                                   ld    b,(hl)                          ; bc = point1 Y,X
  18++DA32 23                                   inc   hl
  19++DA33 5E                                   ld    e,(hl)                          ; c = varX1
  20++DA34 23                                   inc   hl
  21++DA35 56                                   ld    d,(hl)                          ; de = point2 Y,X
  22++DA36 23                                   inc   hl
  23++DA37 E5 FD E5                             push  hl,,iy
  24++DA3A 60                                   ld    h,b
  25++DA3B 69                                   ld    l,c
  26++DA3C                ;  call    l2_draw_any_line                ; call version of LOIN that used BCDE
  27++DA3C FD 7D                                ld	a,iyl							; get colour back before calling line draw
  28++DA3E                                      MMUSelectLayer2
  28++DA3E ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
  29++DA42 CD 28 FE                             call  LineHLtoDE
  30++DA45 FD E1 E1                             pop   hl,,iy
  31++DA48 FD 25                                dec   iyh
  32++DA4A 20 E3                                jr	nz, .DrawLinesLoop
  33++DA4C C9                                   ret                                     ; --- Wireframe end  \ LL118-1
  34++DA4D
  35++DA4D 3E 65        DrawLinesLateClipping:  ld	a,$65 ; DEBUG
  36++DA4F FD 6F                                ld    iyl,a					      ; set ixl to colour (assuming we come in here with a = colour to draw)
  37++DA51 3A 2B C4                             ld	a,(UbnkLineArrayLen)			; get number of lines
  38++DA54                                      ReturnIfAIsZero   				; No lines then bail out.
  38++DA54 A7          >                        and     a
  38++DA55 C8          >                        ret     z
  39++DA56 FD 67                                ld	iyh,a			                  ; number of lines still to draw
  40++DA58 21 71 C2                             ld	hl,UbnkLineArray
  41++DA5B                                      MMUSelectLayer2
  41++DA5B ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
  42++DA5F 3E BF                                ld    a,$BF
  43++DA61 32 22 E4                             ld    (line_gfx_colour),a
  44++DA64 11 29 FB     LateDrawLinesLoop:      ld    de,x1
  45++DA67                                      FourLDIInstrunctions
  45++DA67 ED A0       >                        ldi
  45++DA69 ED A0       >                        ldi
  45++DA6B ED A0       >                        ldi
  45++DA6D ED A0       >                        ldi
  46++DA6F                                      FourLDIInstrunctions
  46++DA6F ED A0       >                        ldi
  46++DA71 ED A0       >                        ldi
  46++DA73 ED A0       >                        ldi
  46++DA75 ED A0       >                        ldi
  47++DA77 E5 FD E5                             push  hl,,iy
  48++DA7A                                      //call  l2_draw_clipped_line
  49++DA7A                                      //call  l2_draw_elite_line
  50++DA7A CD 87 FB                             call    l2_draw_6502_line
  51++DA7D DA B9 DA                             jp      c,LateNoLineToDraw
  52++DA80                                      DISPLAY "TODO - Optimise fetching direct from XX1510 rather than using x1 to y2 as an interface"
  53++DA80 E5 C5 D5 FD  PreLate:                push    hl,,bc,,de,,iy
  53++DA84 E5
  54++DA85 3A 29 FB                             ld      a,(x1)
  55++DA88 4F                                   ld      c,a
  56++DA89 3A 2B FB                             ld      a,(y1)
  57++DA8C 47                                   ld      b,a
  58++DA8D 3A 2D FB                             ld      a,(x2)
  59++DA90 5F                                   ld      e,a
  60++DA91 3A 2F FB                             ld      a,(y2)
  61++DA94 57                                   ld      d,a
  62++DA95                                      ; bc = y0,x0 de=y1,x1,a=color)
  63++DA95 3E D5                                ld	    a, $D5 ; colour
  64++DA97              ReadyToDraw:            MMUSelectLayer2
  64++DA97 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
  65++DA9B 78           .CheckHorz:             ld      a,b                      ; Are y1 and y2 the same?
  66++DA9C BA                                   cp      d                        ; .
  67++DA9D C2 A6 DA                             jp      nz,.ItsNotHorizontal     ; .
  68++DAA0 CD D4 FA     .ItsHorizontal:         call    l2_drawHorzClip          ; if so its a horizontal line
  69++DAA3 C3 B4 DA                             jp      DrawnLine                ; done draw
  70++DAA6 79           .ItsNotHorizontal:      ld      a,c                      ; Are x1 and x2 the same?
  71++DAA7 BB                                   cp      e
  72++DAA8 C2 B1 DA                             jp      nz,LateLine
  73++DAAB CD A3 FA     .ItsVertical:           call    l2_drawVertClip
  74++DAAE C3 B4 DA                             jp      DrawnLine
  75++DAB1 CD C7 FB     LateLine:               call    l2_draw_elite_line; l2_draw_diagonal ** NOTE DOESNT DO HORZ OR VERT
  76++DAB4 FD E1 D1 C1  DrawnLine:              pop     hl,,bc,,de,,iy
  76++DAB8 E1
  77++DAB9 FD E1 E1     LateNoLineToDraw:       pop   hl,,iy
  78++DABC FD 25                                dec   iyh
  79++DABE 20 A4                                jr	nz, LateDrawLinesLoop
  80++DAC0 C9                                   ret                                     ; --- Wireframe end  \ LL118-1
# file closed: ././ModelRender/DrawLines.asm
1498+ DAC1              ; ---------------------------------------------------------------------------------------------------------------------------------
1499+ DAC1
1500+ DAC1              ; DIot seem to lawyas have Y = 0???
1501+ DAC1              ProcessDot:            ; break
1502+ DAC1 CD FF CD                             call    CopyRotmatToTransMat             ;#01; Load to Rotation Matrix to XX16, 16th bit is sign bit
1503+ DAC4 CD 30 7B                             call    ScaleXX16Matrix197               ;#02; Normalise XX16
1504+ DAC7 CD C8 D0                             call    LoadCraftToCamera                ;#04; Load Ship Coords to XX18
1505+ DACA CD 95 CF                             call    InverseXX16                      ;#11; Invert rotation matrix
1506+ DACD 21 00 00                             ld      hl,0
1507+ DAD0 22 E7 C0                             ld      (UBnkXScaled),hl
1508+ DAD3 22 E9 C0                             ld      (UBnkYScaled),hl
1509+ DAD6 22 EB C0                             ld      (UBnkZScaled),hl
1510+ DAD9 AF                                   xor     a
1511+ DADA CD 92 7A                             call    XX12EquNodeDotOrientation
1512+ DADD CD 2A CE                             call    TransposeXX12ByShipToXX15
1513+ DAE0 CD A7 CE                             call    ScaleNodeTo8Bit                     ; scale to 8 bit values, why don't we hold the magnitude here?x
1514+ DAE3 FD 21 31 C1                          ld      iy,UBnkNodeArray
1515+ DAE7 CD B0 D6                             call    ProjectNodeToEye
1516+ DAEA C9                                   ret
1517+ DAEB
1518+ DAEB              ; .....................................................
1519+ DAEB              ; Plot Node points as part of debugging
1520+ DAEB 3A 40 C4     PlotAllNodes:           ld      a,(VertexCtX6Addr)               ; get Hull byte#9 = number of vertices *6                                   ;;;
1521+ DAEE 4F           .GetActualVertexCount:  ld      c,a                              ; XX20 also c = number of vertices * 6 (or XX20)
1522+ DAEF 4F                                   ld      c,a                              ; XX20 also c = number of vertices * 6 (or XX20)
1523+ DAF0 16 06                                ld      d,6
1524+ DAF2 CD 86 97                             call    asm_div8                         ; asm_div8 C_Div_D - C is the numerator, D is the denominator, A is the remainder, B is 0, C is the result of C/D,D,E,H,L are not changed"
1525+ DAF5 41                                   ld      b,c                              ; c = number of vertices
1526+ DAF6 FD 21 31 C1                          ld      iy,UBnkNodeArray
1527+ DAFA FD 5E 00     .PlotLoop:              ld      e,(iy)
1528+ DAFD FD 56 01                             ld      d,(iy+1)
1529+ DB00 FD 6E 02                             ld      l,(iy+2)
1530+ DB03 FD 66 03                             ld      h,(iy+3)
1531+ DB06 C5 FD E5                             push    bc,,iy
1532+ DB09 CD 1A DB                             call    PlotAtDEHL
1533+ DB0C FD E1 C1                             pop     bc,,iy
1534+ DB0F FD 23                                inc     iy
1535+ DB11 FD 23                                inc     iy
1536+ DB13 FD 23                                inc     iy
1537+ DB15 FD 23                                inc     iy
1538+ DB17 10 E1                                djnz    .PlotLoop
1539+ DB19 C9                                   ret
1540+ DB1A
1541+ DB1A 7A           PlotAtDEHL:             ld      a,d
1542+ DB1B A7                                   and     a
1543+ DB1C C0                                   ret     nz
1544+ DB1D 7C                                   ld      a,h
1545+ DB1E A7                                   and     a
1546+ DB1F C0                                   ret     nz
1547+ DB20 7D                                   ld      a,l
1548+ DB21 E6 80                                and     $80
1549+ DB23 C0                                   ret     nz
1550+ DB24                                      MMUSelectLayer2
1550+ DB24 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
1551+ DB28 45                                   ld      b,l
1552+ DB29 4B                                   ld      c,e
1553+ DB2A 3E 88                                ld      a,$88
1554+ DB2C CD 23 E4                             call    l2_plot_pixel
1555+ DB2F C9                                   ret
1556+ DB30
1557+ DB30
1558+ DB30              ; .....................................................
1559+ DB30              ; Process Nodes does the following:
1560+ DB30              ; for each node:
1561+ DB30              ;     see if node >
1562+ DB30 00           PNXX20DIV6          DB      0
1563+ DB31 00 00        PNVERTEXPTR         DW      0   ; DEBUG WILL USE LATER
1564+ DB33 00 00        PNNODEPRT           DW      0   ; DEBUG WILL USE LATER
1565+ DB35 00           PNLASTNORM          DB      0
1566+ DB36              ProcessNodes:           ZeroA
1566+ DB36 AF          >                        xor a
1567+ DB37 32 2B C4                             ld      (UbnkLineArrayLen),a
1568+ DB3A CD FF CD                             call    CopyRotmatToTransMat ; CopyRotToTransMacro                      ;#01; Load to Rotation Matrix to XX16, 16th bit is sign bit
1569+ DB3D CD 30 7B                             call    ScaleXX16Matrix197               ;#02; Normalise XX16
1570+ DB40 CD C8 D0                             call    LoadCraftToCamera                ;#04; Load Ship Coords to XX18
1571+ DB43 CD 95 CF                             call    InverseXX16                      ;#11; Invert rotation matrix
1572+ DB46 21 52 C4                             ld      hl,UBnkHullVerticies
1573+ DB49 3A 40 C4                             ld      a,(VertexCtX6Addr)               ; get Hull byte#9 = number of vertices *6                                   ;;;
1574+ DB4C 4F           GetActualVertexCount:   ld      c,a                              ; XX20 also c = number of vertices * 6 (or XX20)
1575+ DB4D 4F                                   ld      c,a                              ; XX20 also c = number of vertices * 6 (or XX20)
1576+ DB4E 16 06                                ld      d,6
1577+ DB50 CD 86 97                             call    asm_div8                         ; asm_div8 C_Div_D - C is the numerator, D is the denominator, A is the remainder, B is 0, C is the result of C/D,D,E,H,L are not changed"
1578+ DB53 41                                   ld      b,c                              ; c = number of vertices
1579+ DB54 FD 21 31 C1                          ld      iy,UBnkNodeArray
1580+ DB58              LL48:
1581+ DB58 C5           PointLoop:              push    bc                                  ; save counters
1582+ DB59 E5                                   push    hl                                  ; save verticies list pointer
1583+ DB5A FD E5                                push    iy                                  ; save Screen plot array pointer
1584+ DB5C 78                                   ld      a,b
1585+ DB5D                                      ;break
1586+ DB5D CD 31 D6                             call    CopyNodeToXX15                      ; copy verices at hl to xx15
1587+ DB60 3A E8 C0                             ld      a,(UBnkXScaledSign)
1588+ DB63 CD 92 7A                             call    XX12EquNodeDotOrientation
1589+ DB66 CD 2A CE                             call    TransposeXX12ByShipToXX15
1590+ DB69 CD A7 CE                             call    ScaleNodeTo8Bit                     ; scale to 8 bit values, why don't we hold the magnitude here?x
1591+ DB6C FD E1                                pop     iy                                  ; get back screen plot array pointer
1592+ DB6E CD B0 D6                             call    ProjectNodeToEye                     ; set up screen plot list entry
1593+ DB71                 ; ld      hl,UbnkLineArrayLen
1594+ DB71                ;  inc     (hl)                                ; another node done
1595+ DB71 FD E5        ReadyForNextPoint:      push    iy                                  ; copy screen plot pointer to hl
1596+ DB73 E1                                   pop     hl
1597+ DB74 3E 04                                ld      a,4
1598+ DB76 ED 31                                add     hl,a
1599+ DB78 E5                                   push    hl                                  ; write it back at iy + 4
1600+ DB79 FD E1                                pop     iy                                  ; and put it in iy again
1601+ DB7B E1                                   pop     hl                                  ; get hl back as vertex list
1602+ DB7C 3E 06                                ld      a,6
1603+ DB7E ED 31                                add     hl,a                                ; and move to next vertex
1604+ DB80 C1                                   pop     bc                                  ; get counter back
1605+ DB81 10 D5                                djnz    PointLoop
1606+ DB83              ; ......................................................
1607+ DB83                                      ClearCarryFlag
1607+ DB83 B7          >                        or a
1608+ DB84 C9                                   ret
1609+ DB85              ; ...........................................................
1610+ DB85 CD C3 D2     ProcessShip:            call    CheckVisible                ; checks for z -ve and outside view frustrum, sets up flags for next bit
1611+ DB88 3A 94 C0     .IsItADot:              ld      a,(UBnkaiatkecm)
1612+ DB8B E6 68                                and     ShipIsVisible | ShipIsDot | ShipExploding  ; first off set if we can draw or need to update explosion
1613+ DB8D C8                                   ret     z                           ; if none of these flags are set we can fast exit
1614+ DB8E                                      JumpOnABitSet ShipExplodingBitNbr, .ExplodingCloud; we always do the cloud processing even if invisible
1614+ DB8E CB 6F       >                        bit 	ShipExplodingBitNbr, a
1614+ DB90 C2 CF DB    >                        jp      nz,.ExplodingCloud
1615+ DB93              ;............................................................
1616+ DB93              .DetermineDrawType:     ReturnOnBitClear    a, ShipIsVisibleBitNbr          ; if its not visible exit early
1616+ DB93 CB 77       >                        bit 	ShipIsVisibleBitNbr,a
1616+ DB95 C8          >                        ret		z
1617+ DB96                                      JumpOnABitClear ShipIsDotBitNbr, .CarryOnWithDraw   ; if not dot do normal draw
1617+ DB96 CB 5F       >                        bit 	ShipIsDotBitNbr, a
1617+ DB98 CA BD DB    >                        jp      z,.CarryOnWithDraw
1618+ DB9B              ;............................................................
1619+ DB9B CD C1 DA     .itsJustADot:           call    ProcessDot
1620+ DB9E CD C1 C7                             call    UnivVisibleNonDot           ; set is a dot flag
1621+ DBA1 ED 4B 31 C1                          ld      bc,(UBnkNodeArray)          ; if its at dot range get X
1622+ DBA5 ED 5B 33 C1                          ld      de,(UBnkNodeArray+2)        ; and Y
1623+ DBA9 78                                   ld      a,b                         ; if high byte components are not 0 then off screen
1624+ DBAA B2                                   or      d                           ;
1625+ DBAB C0                                   ret     nz                          ;
1626+ DBAC 7B                                   ld      a,e
1627+ DBAD E6 80                                and     %10000000                   ; check to see if Y > 128
1628+ DBAF C0                                   ret     nz
1629+ DBB0 43                                   ld      b,e                         ; now b = y and c = x
1630+ DBB1 3E FF                                ld      a,L2ColourWHITE_1           ; just draw a pixel
1631+ DBB3 3E E0                                ld      a,224
1632+ DBB5                                      MMUSelectLayer2                     ; then go to update radar
1632+ DBB5 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
1633+ DBB9 CD 7C E4                             call    ShipPixel                   ;
1634+ DBBC C9                                   ret
1635+ DBBD              ;............................................................
1636+ DBBD CD 36 DB     .CarryOnWithDraw:       call    ProcessNodes                ; process notes is the poor performer or check distnace is not culling
1637+ DBC0                                     ; break
1638+ DBC0                                  IFDEF PLOTPOINTSONLY
1639+ DBC0 ~                                    ld      a,$F6
1640+ DBC0 ~                                    ld      (line_gfx_colour),a
1641+ DBC0 ~                                    call    PlotAllNodes
1642+ DBC0                                  ELSE
1643+ DBC0 3E E3                                ld      a,$E3
1644+ DBC2 32 22 E4                             ld      (line_gfx_colour),a
1645+ DBC5 CD FC D2                             call    CullV2
1646+ DBC8 CD 6E DD                             call    PrepLines                       ; With late clipping this just moves the data to the line array which is now x2 size
1647+ DBCB CD 4D DA                             call    DrawLinesLateClipping
1648+ DBCE                                  ENDIF
1649+ DBCE                                  IFDEF OVERLAYNODES
1650+ DBCE ~                                    ld      a,$CF
1651+ DBCE ~                                    ld      (line_gfx_colour),a
1652+ DBCE ~                                    call    PlotAllNodes
1653+ DBCE                                  ENDIF
1654+ DBCE                                  IFDEF FLIPBUFFERSTEST
1655+ DBCE ~                                    DISPLAY "Univ_ship_data flip buffer test Enabled"
1656+ DBCE ~                                    call   l2_flip_buffers
1657+ DBCE ~                                    call   l2_flip_buffers
1658+ DBCE                                  ELSE
1659+ DBCE                                      DISPLAY "Univ_ship_data flip buffer test Disabled"
1660+ DBCE                                  ENDIF
1661+ DBCE C9                                   ret
1662+ DBCF              ;............................................................
1663+ DBCF DD 01        .ExplodingCloud:        break
1664+ DBD1 CD 36 DB                             call    ProcessNodes
1665+ DBD4 CD B5 C7                             call    UnivAcknowledExploding      ; acknowledge ship exploding
1666+ DBD7 3A 9F C0     .UpdateCloudCounter:    ld      a,(UBnKCloudCounter)        ; counter += 4 until > 255
1667+ DBDA C6 04                                add     4                           ; we do this early as we now have logic for
1668+ DBDC DA 9E DC                             jp      c,.FinishedExplosion        ; display or not later
1669+ DBDF 32 9F C0                             ld      (UBnKCloudCounter),a        ; .
1670+ DBE2              .SkipHiddenShip:        ReturnOnMemBitClear  UBnkaiatkecm , ShipIsVisibleBitNbr
1670+ DBE2 3A 94 C0    >                        ld     a,(UBnkaiatkecm)
1670+ DBE5 CB 77       >                        bit 	ShipIsVisibleBitNbr,a
1670+ DBE7 C8          >                        ret		z
1671+ DBE8              .IsShipADot:            JumpOnABitSet ShipIsDotBitNbr, .itsJustADot ; if its dot distance then explosion is a dot, TODO later we will do as a coloured dot
1671+ DBE8 CB 5F       >                        bit 	ShipIsDotBitNbr, a
1671+ DBEA C2 9B DB    >                        jp      nz,.itsJustADot
1672+ DBED 2A 26 C0     .CalculateZ:            ld      hl,(UBnKzlo)                ; al = hl = z
1673+ DBF0 7C                                   ld      a,h                         ; .
1674+ DBF1                                      JumpIfALTNusng 32,.CalcFromZ        ; if its >= 32 then set a to FE and we are done
1674+ DBF1 FE 20       >                        cp      32
1674+ DBF3 DA FB DB    >                        jp		c, .CalcFromZ
1675+ DBF6 26 FE                                ld      h,$FE                       ; .
1676+ DBF8 C3 06 DC                             jp      .DoneZDist                  ; .
1677+ DBFB              .CalcFromZ:             ShiftHLLeft1                        ; else
1677+ DBFB CB 25       >			   sla l
1677+ DBFD CB 14       >			   rl  h
1678+ DBFF                                      ShiftHLLeft1                        ; hl = hl * 2
1678+ DBFF CB 25       >			   sla l
1678+ DC01 CB 14       >			   rl  h
1679+ DC03                                      SetCarryFlag                        ; h = h * 3 rolling in lower bit
1679+ DC03 37          >                        scf
1680+ DC04 CB 14                                rl  h                               ;
1681+ DC06 06 00        .DoneZDist:             ld      b,0                         ; bc = cloud z distance calculateed
1682+ DC08 4C                                   ld      c,h                         ; .
1683+ DC09 3A 9F C0     .CalcCloudRadius:       ld      a,(UBnKCloudCounter)        ; de = cloud counter * 256
1684+ DC0C                      IFDEF LOGMATHS
1685+ DC0C ~                                    MMUSelectMathsTables
1686+ DC0C ~                                    ld      b,h
1687+ DC0C ~                                    call    AEquAmul256DivBLog
1688+ DC0C ~                                    ld      d,a
1689+ DC0C ~                                    MMUSelectROM0
1690+ DC0C                      ELSE
1691+ DC0C 57                                   ld      d,a                         ;
1692+ DC0D 1E 00                                ld      e,0                         ;
1693+ DC0F CD CA 96                             call    DEequDEDivBC                ; de = cloud counter * 256 / z distance
1694+ DC12 7A                                   ld      a,d                         ; if radius >= 28
1695+ DC13                      ENDIF
1696+ DC13                                      JumpIfALTNusng  28,.SetCloudRadius  ; then set raidus in d to $FE
1696+ DC13 FE 1C       >                        cp      28
1696+ DC15 DA 1D DC    >                        jp		c, .SetCloudRadius
1697+ DC18 16 FE        .MaxCloudRadius:        ld      d,$FE                       ;
1698+ DC1A C3 29 DC                             jp      .SizedUpCloud               ;
1699+ DC1D              .SetCloudRadius:        ShiftDELeft1                        ; de = 8 * de
1699+ DC1D CB 23       >			   sla e
1699+ DC1F CB 12       >			   rl  d
1700+ DC21                                      ShiftDELeft1                        ; .
1700+ DC21 CB 23       >			   sla e
1700+ DC23 CB 12       >			   rl  d
1701+ DC25                                      ShiftDELeft1                        ; .
1701+ DC25 CB 23       >			   sla e
1701+ DC27 CB 12       >			   rl  d
1702+ DC29 7A           .SizedUpCloud:          ld      a,d                         ; cloudradius = a = d or (cloudcounter * 8 / 256)
1703+ DC2A 32 A0 C0                             ld      (UBnKCloudRadius),a         ; .
1704+ DC2D DD 67                                ld      ixh,a                       ; ixh = a = calculated cloud radius
1705+ DC2F 3A 9F C0     .CalcSubParticleColour: ld      a,(UBnKCloudCounter)        ; colur fades away
1706+ DC32 ED 23                                swapnib                             ; divive by 16
1707+ DC34 E6 0F                                and     $0F                         ; mask off upper bytes
1708+ DC36 CB 2F                                sra     a                           ; divide by 32
1709+ DC38 21 A8 DC                             ld      hl,DebrisColourTable
1710+ DC3B ED 31                                add     hl,a
1711+ DC3D 7E                                   ld      a,(hl)
1712+ DC3E FD 6F                                ld      iyl,a                       ; iyl = pixel colours
1713+ DC40 3A 9F C0     .CalcSubParticleCount:  ld      a,(UBnKCloudCounter)        ; cloud counter = abs (cloud counter) in effect if > 127 then shrinks it
1714+ DC43                                      ABSa2c                              ; a = abs a
1714+ DC43 CB 7F       >                        bit     7,a
1714+ DC45 CA 4A DC    >                        jp      z,.DoneABSa
1714+ DC48 ED 44       >                        neg
1714+ DC4A             >.DoneABSa:
1715+ DC4A CB 2F        .ParticlePositive:      sra a                               ; iyh = (a /8)
1716+ DC4C CB 2F                                sra a                               ; .
1717+ DC4E CB 2F                                sra a                               ; .
1718+ DC50 F6 01                                or  1                               ; bit 0 set so minimum 1
1719+ DC52 DD 6F        .DoneSubParticleCount:  ld      ixl,a                       ; ixl = nbr particles per vertex
1720+ DC54 3A 3F C4     .ForEachVertex:         ld      a,(VertexCountAddr)         ; load vertex count into b
1721+ DC57 47                                   ld      b,a                         ; .
1722+ DC58 21 31 C1                             ld      hl,UBnkNodeArray            ; hl = list of vertices
1723+ DC5B C5 E5        .ExplosionVertLoop:     push    bc,,hl                      ; save vertex counter in b and pointer to verticles in hl
1724+ DC5D DD 68                                    ld      ixl,b                   ; save counter
1725+ DC5F 4E                                       ld      c,(hl)                  ; get vertex into bc and de
1726+ DC60 23                                       inc     hl                      ; .
1727+ DC61 46                                       ld      b,(hl)                  ; .
1728+ DC62 23                                       inc     hl                      ; .
1729+ DC63 5E                                       ld      e,(hl)                  ; .
1730+ DC64 23                                       inc     hl                      ; .
1731+ DC65 56                                       ld      d,(hl)                  ; now hl is done with and we can use it
1732+ DC66 DD 7D        .LoopSubParticles:          ld      a,ixl                   ; iyh = loop iterator for nbr of particles per vertex
1733+ DC68 FD 67                                    ld      iyh,a                   ;
1734+ DC6A                                          ;break
1735+ DC6A D5 C5        .ProcessAParticle:          push    de,,bc                  ; save y then x coordinates
1736+ DC6C EB                                           ex      de,hl               ; hl = de (Y)
1737+ DC6D DD 54                                        ld      d,ixh               ; d = cloud radius
1738+ DC6F CD B0 DC                                     call    HLEquARandCloud     ; vertex = vertex +/- (random * projected cloud side /256)
1739+ DC72 7C                                           ld      a,h                 ; if off screen skip
1740+ DC73                                              JumpIfAIsNotZero  .NextIteration
1740+ DC73 A7          >                        and     a
1740+ DC74 C2 8F DC    >                        jp	    nz,.NextIteration
1741+ DC77 EB                                           ex      de,hl               ; de = result for y which was put into hl
1742+ DC78 E1                                           pop     hl                  ; get x back from bc on stack
1743+ DC79 E5                                           push    hl                  ; put bc (which is now in hl) back on the stack
1744+ DC7A D5                                           push    de                  ; save de
1745+ DC7B DD 54                                        ld      d,ixh               ; d = cloud radius
1746+ DC7D CD B0 DC                                     call    HLEquARandCloud     ; vertex = vertex +/- (random * projected cloud side /256)
1747+ DC80 D1                                           pop     de                  ; get de back doing pop here clears stack up
1748+ DC81 7C                                           ld      a,h                 ; if high byte has a value then off screen
1749+ DC82                                              JumpIfAIsNotZero .NextIteration ;
1749+ DC82 A7          >                        and     a
1749+ DC83 C2 8F DC    >                        jp	    nz,.NextIteration
1750+ DC86 43                                           ld      b,e                 ; bc = y x of pixel from e and c regs
1751+ DC87 4D                                           ld      c,l                 ; iyl already has colour
1752+ DC88                                              MMUSelectLayer2             ; plot it with debris code as this can chop y > 128
1752+ DC88 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
1753+ DC8C CD 84 E4                                     call    DebrisPixel         ; .
1754+ DC8F C1 D1        .NextIteration:             pop    de,,bc                   ; ready for next iteration, get back y and x coordinates
1755+ DC91 FD 25                                    dec    iyh                      ; one partcile done
1756+ DC93 20 D5                                    jr      nz,.ProcessAParticle    ; until all done
1757+ DC95 E1 C1        .NextVert:              pop     bc,,hl                      ; recover loop counter and source pointer
1758+ DC97 3E 04                                ld      a,4                         ; move to next vertex group
1759+ DC99 ED 31                                add     hl,a                        ;
1760+ DC9B 10 BE                                djnz    .ExplosionVertLoop          ;
1761+ DC9D C9                                   ret
1762+ DC9E              .FinishedExplosion:     ;break
1763+ DC9E 3A 40 C0                             ld      a,(UBnKSlotNumber)          ; get slot number
1764+ DCA1 CD F9 84                             call    ClearSlotA                  ; gauranted to be in main memory as non bankables
1765+ DCA4 CD BB C7                             call    UnivFinishedExplosion       ;
1766+ DCA7 C9                                   ret
1767+ DCA8
1768+ DCA8
1769+ DCA8 FC D8 B4 90  DebrisColourTable:      DB L2ColourYELLOW_1, L2ColourYELLOW_2, L2ColourYELLOW_3, L2ColourYELLOW_4, L2ColourYELLOW_5, L2ColourYELLOW_6, L2ColourYELLOW_7,L2ColourGREY_4
1769+ DCAC 6C 48 24 25
1770+ DCB0                                      ; set flags and signal to remove from slot list
1771+ DCB0
1772+ DCB0              ; Hl = HlL +/- (Random * projected cloud size)
1773+ DCB0              ; In - d = z distance, hl = vert hi lo
1774+ DCB0              ; Out hl = adjusted distance
1775+ DCB0              ; uses registers hl, de
1776+ DCB0 E5           HLEquARandCloud:        push    hl                          ; random number geneator upsets hl register
1777+ DCB1 CD EC 85                             call    doRandom                    ; a= random * 2
1778+ DCB4 E1                                   pop     hl
1779+ DCB5 17                                   rla                                 ;
1780+ DCB6 38 0A                                jr      c,.Negative                 ; if buit 7 went into carry
1781+ DCB8 5F           .Positive:              ld  e,a
1782+ DCB9 ED 30                                mul
1783+ DCBB 5A                                   ld  e,d
1784+ DCBC 16 00                                ld  d,0
1785+ DCBE                                      ClearCarryFlag
1785+ DCBE B7          >                        or a
1786+ DCBF ED 5A                                adc     hl,de                       ; hl = hl + a
1787+ DCC1 C9                                   ret
1788+ DCC2 5F           .Negative:              ld  e,a
1789+ DCC3 ED 30                                mul
1790+ DCC5 5A                                   ld  e,d
1791+ DCC6 16 00                                ld  d,0
1792+ DCC8                                      ClearCarryFlag
1792+ DCC8 B7          >                        or a
1793+ DCC9 ED 52                                sbc     hl,de                       ; hl = hl + a
1794+ DCCB C9                                   ret
1795+ DCCC
1796+ DCCC              GetExperiencePoints:    ; TODO calculate experience points
1797+ DCCC                                      ; TODO mission updates check
1798+ DCCC C9                                   ret
1799+ DCCD
1800+ DCCD              ; ......................................................
1801+ DCCD 3A 4E C4     KillShip:               ld      a,(ShipTypeAddr)            ; we can't destroy stations in a collision
1802+ DCD0 FE 02                                cp      ShipTypeStation             ; for destructable one we will have a special type of ship
1803+ DCD2 C8                                   ret     z
1804+ DCD3 CD DE C7                             call    UnivExplodeShip             ; remove AI, mark killed, mark exploding
1805+ DCD6                                      SetMemToN   UBnKexplDsp, ShipExplosionDuration ; set debris cloud timer, also usered in main to remove from slots
1805+ DCD6 3E 4B       >                        ld      a,ShipExplosionDuration
1805+ DCD8 32 91 C0    >                        ld      (UBnKexplDsp),a
1806+ DCDB                                      ldWriteZero UBnKEnergy              ; Zero ship energy
1806+ DCDB AF          >                        xor      a
1806+ DCDC 32 98 C0    >                        ld       (UBnKEnergy),a
1807+ DCDF 32 A0 C0                             ld      (UBnKCloudRadius),a
1808+ DCE2 3E 12                                ld      a,18
1809+ DCE4 32 9F C0                             ld      (UBnKCloudCounter),a        ; Zero cloud
1810+ DCE7                                      ; TODO logic to spawn cargo/plates goes here
1811+ DCE7 C9                                   ret
1812+ DCE8
1813+ DCE8              ; in a = damage
1814+ DCE8 47           DamageShip:             ld      b,a                         ; b = a = damage comming in
1815+ DCE9 3A 4E C4                             ld      a,(ShipTypeAddr)            ; we can't destroy stations in a collision
1816+ DCEC FE 02                                cp      ShipTypeStation             ; for destructable one we will have a special type of ship
1817+ DCEE C8                                   ret     z
1818+ DCEF 3A 98 C0                             ld      a,(UBnKEnergy)              ; get current energy level
1819+ DCF2                                      ClearCarryFlag
1819+ DCF2 B7          >                        or a
1820+ DCF3 98                                   sbc     a,b                         ; subtract damage
1821+ DCF4 D2 FB DC     .Overkilled:            jp      nc,.DoneDamage              ; if no carry then its not gone negative
1822+ DCF7 CD CD DC                             call    KillShip                    ; else kill it
1823+ DCFA C9                                   ret
1824+ DCFB 32 98 C0     .DoneDamage:            ld      (UBnKEnergy),a
1825+ DCFE C9                                   ret
1826+ DCFF              ; need recovery for energy too
1827+ DCFF              ; Shall we have a "jolt ship off course routine for when it gets hit by a blast or collision)
1828+ DCFF
1829+ DCFF              ;-LL49-----------------------------------------------------------------------------------------------------------------------------
1830+ DCFF              ;  Entering Here we have the following:
1831+ DCFF              ;  XX15(1 0) = vertex x-coordinate but sign not populated
1832+ DCFF              ;  XX15(3 2) = vertex y-coordinate but sign not populated
1833+ DCFF              ;  XX15(5 4) = vertex z-coordinate but sign not populated
1834+ DCFF              ;
1835+ DCFF              ;  XX16(  1 0)sidev_x   (3 2)roofv_x   (5 4)nosev_x
1836+ DCFF              ;  XX16(  7 6)sidev_y   (9 8)roofv_y (11 10)nosev_y
1837+ DCFF              ;  XX16(13 12)sidev_z (15 14)roofv_z (17 16)nosev_z
1838+ DCFF              ;--------------------------------------------------------------------------------------------------------
1839+ DCFF              AddLaserBeamLine:
1840+ DCFF              ; this code is a bag of shit and needs re-writing
1841+ DCFF              GetGunVertexNode:
1842+ DCFF 3A 3D C4             ld          a,(GunVertexAddr)                   ; Hull byte#6, gun vertex*4 (XX0),Y
1843+ DD02 21 31 C1             ld          hl,UBnkNodeArray                    ; list of lines to read
1844+ DD05 ED 31                add         hl,a                                ; HL = address of GunVertexOnNodeArray
1845+ DD07 FD 2E 00             ld          iyl,0
1846+ DD0A              MoveX1PointToXX15:
1847+ DD0A 4E                   ld          c,(hl)                              ;
1848+ DD0B 23                   inc         hl
1849+ DD0C 46                   ld          b,(hl)                              ; bc = x1 of gun vertex
1850+ DD0D 23                   inc         hl
1851+ DD0E ED 43 E7 C0          ld          (UBnkX1),bc
1852+ DD12 0C                   inc         c
1853+ DD13 C8                   ret         z                                   ; was c 255?
1854+ DD14 04                   inc         b
1855+ DD15 C8                   ret         z                                   ; was c 255?
1856+ DD16              MoveY1PointToXX15:
1857+ DD16 4E                   ld          c,(hl)                              ;
1858+ DD17 23                   inc         hl
1859+ DD18 46                   ld          b,(hl)                              ; bc = y1 of gun vertex
1860+ DD19 23                   inc         hl
1861+ DD1A ED 43 E9 C0          ld          (UBnkY1),bc
1862+ DD1E              SetX2PointToXX15:
1863+ DD1E 01 00 00             ld          bc,0                                ; set X2 to 0
1864+ DD21 ED 43 EB C0          ld          (UBnkX2),bc
1865+ DD25 3A 26 C0             ld          a,(UBnKzlo)
1866+ DD28 4F                   ld          c,a
1867+ DD29              SetY2PointToXX15:
1868+ DD29 ED 43 ED C0          ld          (UBnkY2),bc                         ; set Y2to 0
1869+ DD2D 3A 22 C0             ld          a,(UBnKxsgn)
1870+ DD30                      JumpOnBitClear a,7,LL74SkipDec
1870+ DD30 CB 7F       >                        bit 	7,a
1870+ DD32 CA 3A DD    >                        jp      z,LL74SkipDec
1871+ DD35              LL74DecX2:
1872+ DD35 3E FF                ld          a,$FF
1873+ DD37 32 EB C0             ld          (UBnkX2Lo),a                        ; rather than dec (hl) just load with 255 as it will always be that at this code point
1874+ DD3A              LL74SkipDec:
1875+ DD3A CD FE CD             call        ClipLineV3                            ; LL145 \ clip test on XX15 XX12 vector, returns carry
1876+ DD3D 38 5A                jr          c,CalculateNewLines
1877+ DD3F              ;        jr          c,CalculateNewLines                 ; LL170 clip returned carry set so not visibile if carry set skip the rest (laser not firing)
1878+ DD3F              ; Here we are usign hl to replace VarU as index
1879+ DD3F 2A B9 7F             ld          hl,(varU16)
1880+ DD42 3A E7 C0             ld          a,(UBnKx1Lo)
1881+ DD45 77                   ld          (hl),a
1882+ DD46 23                   inc         hl
1883+ DD47 3A E9 C0             ld          a,(UbnKy1Lo)
1884+ DD4A 77                   ld          (hl),a
1885+ DD4B 23                   inc         hl
1886+ DD4C 3A EB C0             ld          a,(UBnkX2Lo)
1887+ DD4F 77                   ld          (hl),a
1888+ DD50 23                   inc         hl
1889+ DD51 3A ED C0             ld          a,(UbnKy2Lo)
1890+ DD54 77                   ld          (hl),a
1891+ DD55 FD 2C                inc         iyl                                 ; iyl holds as a counter to iterations
1892+ DD57 23                   inc         hl
1893+ DD58 FD 2C                inc         iyl                                 ; ready for next byte
1894+ DD5A 22 B9 7F             ld          (varU16),hl
1895+ DD5D C9                   ret
1896+ DD5E
1897+ DD5E                  DISPLAY "Tracing 7", $
1898+ DD5E
1899+ DD5E                  INCLUDE "Universe/Ships/PrepLines.asm"
# file opened: ./Universe/Ships/PrepLines.asm
   1++DD5E
   2++DD5E              ;--------------------------------------------------------------------------------------------------------
   3++DD5E                      DISPLAY "Tracing 8", $
   4++DD5E
   5++DD5E                  INCLUDE "./ModelRender/getVertexNodeAtAToX1Y1.asm"
# file opened: ././ModelRender/getVertexNodeAtAToX1Y1.asm
   1++DD5E              ;--------------------------------------------------------------------------------------------------------
   2++DD5E              ; a = byteoffset to node array as its pre computed to x4 bytes
   3++DD5E 21 31 C1     getVertexNodeAtAToDE:   ld          hl,UBnkNodeArray                    ; hl = edgelist  current pointer
   4++DD61 ED 31                                add         hl,a                                ; hl = address of Node
   5++DD63 7E                                   ld          a,(hl)                              ; get edge list nbr 1 edge
   6++DD64 ED A0                                ldi                                             ; x1 lo
   7++DD66 ED A0                                ldi                                             ; x1 hi
   8++DD68 ED A0                                ldi                                             ; y1 lo
   9++DD6A ED A0                                ldi                                             ; y1 hi
  10++DD6C C9                                   ret
  11++DD6D
  12++DD6D              ;getVertexNodeAtAToX1Y1: ld          hl,UBnkNodeArray                    ; hl = edgelist  current pointer
  13++DD6D              ;                        add         hl,a                                ; hl = address of Node
  14++DD6D              ;                        ld          a,(hl)                              ; get edge list nbr 1 edge
  15++DD6D              ;                        ld          de,UBnkX1
  16++DD6D              ;                        ldi                                             ; x1 lo
  17++DD6D              ;                        ldi                                             ; x1 hi
  18++DD6D              ;                        ldi                                             ; y1 lo
  19++DD6D              ;                        ldi                                             ; y1 hi
  20++DD6D              ;                        ret
  21++DD6D
# file closed: ././ModelRender/getVertexNodeAtAToX1Y1.asm
   6++DD6D
   7++DD6D                      DISPLAY "Tracing 9", $
   8++DD6D
   9++DD6D                  INCLUDE "./ModelRender/getVertexNodeAtAToX2Y2.asm"
# file opened: ././ModelRender/getVertexNodeAtAToX2Y2.asm
   1++DD6D              ;--------------------------------------------------------------------------------------------------------
   2++DD6D              ; a = byteoffset to node array as its pre computed to x4 bytes
   3++DD6D              ;getVertexNodeAtAToX2Y2: ld          hl,UBnkNodeArray                    ; hl = edgelist  current pointer
   4++DD6D              ;                        add         hl,a                                ; hl = address of Node
   5++DD6D              ;                        ld          a,(hl)                              ; get edge list nbr 1 edge
   6++DD6D              ;                        ld          de,UBnkX2
   7++DD6D              ;                        ldi                                             ; x1 lo
   8++DD6D              ;                        ldi                                             ; x1 hi
   9++DD6D              ;                        ldi                                             ; y1 lo
  10++DD6D              ;                        ldi                                             ; y1 hi
  11++DD6D              ;                        ret
# file closed: ././ModelRender/getVertexNodeAtAToX2Y2.asm
  10++DD6D                      DISPLAY "Tracing 10", $
  11++DD6D
  12++DD6D                  INCLUDE "./ModelRender/GetFaceAtA.asm"
# file opened: ././ModelRender/GetFaceAtA.asm
   1++DD6D              ;--------------------------------------------------------------------------------------------------------
   2++DD6D              GetFaceAtA:         MACRO
   3++DD6D ~                                ld          hl,UbnkFaceVisArray
   4++DD6D ~                                add         hl,a
   5++DD6D ~                                ld          a,(hl)                              ; get face visibility
   6++DD6D                                  ENDM
   7++DD6D
# file closed: ././ModelRender/GetFaceAtA.asm
  13++DD6D                      DISPLAY "Tracing 11", $
  14++DD6D
  15++DD6D              ;--------------------------------------------------------------------------------------------------------
  16++DD6D              ; LL72 Goes through each edge in to determine if they are on a visible face, if so load start and end to line array as clipped lines
  17++DD6D               ;   DEFINE NOBACKFACECULL 1
  18++DD6D 00           PLEDGECTR           DB          0
  19++DD6E
  20++DD6E              PrepLines:
  21++DD6E              ; FOR NOW BRUTE FORCE IF OFF SCREEN
  22++DD6E
  23++DD6E              ; TODO add in onced DOEXP is finished
  24++DD6E              ;        ld          a,(UBnkexplDsp)                     ; INWK+31  \ display/exploding state|missiles
  25++DD6E              ;        JumpOnBitClear  a,5,EE31                        ; bit5 of mask, if zero no explosion
  26++DD6E              ;        or          8
  27++DD6E              ;        ld          (UBnkexplDsp),a                     ; else else set bit3 to erase old line
  28++DD6E              ;        jp          DOEXP                               ; erase using Do Explosion and use implicit return
  29++DD6E              ;EE31:                                                   ; no explosion
  30++DD6E              ;        JumpOnBitClear  a,3,LL74                        ; clear is hop to do New lines
  31++DD6E              ;        call        ClearLine                           ; LL155    \ else erase lines in XX19 heap at LINEstr down
  32++DD6E              ;        ld          a, $08                              ; set bit 3 of a and fall into LL74
  33++DD6E              ;
  34++DD6E              ;--------------------------------------------------------------------------------------------------------
  35++DD6E
  36++DD6E              InitialiseLineRead:
  37++DD6E                      ;break
  38++DD6E                      ldWriteZero UbnkLineArrayLen                    ; current line array index = 0
  38++DD6E AF          >                        xor      a
  38++DD6F 32 2B C4    >                        ld       (UbnkLineArrayLen),a
  39++DD72 32 2C C4             ld          (UbnkLineArrayBytes),a              ; UbnkLineArrayBytes= nbr of bytes of lines laoded = array len * 4
  40++DD75 32 6D DD             ld          (PLEDGECTR),a
  41++DD78 3A 41 C4             ld          a,(EdgeCountAddr)
  42++DD7B DD 67                ld          ixh,a                               ; ixh = XX17 = Total number of edges to traverse
  43++DD7D FD 2E 00             ld          iyl,0                               ; ixl = current edge index
  44++DD80 21 71 C2             ld          hl,UbnkLineArray                    ; head of array
  45++DD83 22 B9 7F             ld          (varU16),hl                         ; store current line array pointer un varU16
  46++DD86                      ldCopyByte  EdgeCountAddr, XX17                 ; XX17  = total number of edges to traverse edge counter
  46++DD86 3A 41 C4    >                        ld       a,(EdgeCountAddr)
  46++DD89 32 BD 7F    >                        ld       (XX17),a
  47++DD8C 3A 91 C0             ld          a,(UBnKexplDsp)                     ; get explosion status
  48++DD8F                      JumpOnBitClear a,6,CalculateNewLines            ; LL170 bit6 of display state clear (laser not firing) \ Calculate new lines
  48++DD8F CB 77       >                        bit 	6,a
  48++DD91 CA 99 DD    >                        jp      z,CalculateNewLines
  49++DD94 E6 BF                and         $BF                                 ; else laser is firing, clear bit6.
  50++DD96 32 91 C0             ld          (UBnKexplDsp),a                     ; INWK+31
  51++DD99              ;   TODO commentedout as teh subroutine is a mess   call        AddLaserBeamLine                    ; add laser beam line to draw list
  52++DD99              ; NOw we can calculate hull after including laser line
  53++DD99              CalculateNewLines:
  54++DD99              LL170:                                                  ;(laser not firing) \ Calculate new lines   \ their comment
  55++DD99              CheckEdgesForVisibility:
  56++DD99 21 42 C5             ld          hl,UBnkHullEdges
  57++DD9C                      ; TODO change heap to 3 separate arrays and break them down during copy of ship hull data
  58++DD9C 22 BC 7E             ld          (varV),hl                           ; V \ is pointer to where edges data start
  59++DD9F 3A 3C C4             ld          a,(LineX4Addr)
  60++DDA2 47                   ld          b,a                                 ; nbr of bytes of edge data
  61++DDA3              LL75Loop:                                               ; count Visible edges
  62++DDA3              IsEdgeInVisibilityRange:
  63++DDA3 2A BC 7E             ld          hl,(varV)
  64++DDA6 E5                   push        hl
  65++DDA7 FD E1                pop         iy
  66++DDA9                     ; DEFINE NOBACKFACECULL 1
  67++DDA9                      IFDEF NOBACKFACECULL
  68++DDA9 ~                        jp          VisibileEdge; DEBUGTODO
  69++DDA9                      ENDIF
  70++DDA9 3A A7 7E             ld          a,(LastNormalVisible)               ; XX4 is visibility range
  71++DDAC 57                   ld          d,a                                 ; d holds copy of XX4
  72++DDAD              ; Get Edge Byte 0
  73++DDAD FD 7E 00             ld          a,(IY+0)                            ; edge data byte#0 is visibility distance
  74++DDB0                      JumpIfALTNusng d,LL78EdgeNotVisible             ; XX4   \ visibility LLx78 edge not visible
  74++DDB0 BA          >                        cp      d
  74++DDB1 DA 0C DE    >                        jp		c, LL78EdgeNotVisible
  75++DDB4              EdgeMayBeVisibile:
  76++DDB4              ; Get Edge Byte 1
  77++DDB4              IsFace1Visibile:                                        ; edges have 2 faces to test
  78++DDB4 FD 7E 01             ld          a,(IY+1)                            ; (V),Y \ edge data byte#1 bits 0 to 3 face 1 4 to 7 face 2
  79++DDB7 4F                   ld          c,a                                 ;  c = a copy of byte 1
  80++DDB8 E6 0F                and         $0F                                 ;
  81++DDBA                      GetFaceAtA
  81++DDBA 21 13 C1    >                    ld          hl,UbnkFaceVisArray
  81++DDBD ED 31       >                    add         hl,a
  81++DDBF 7E          >                    ld          a,(hl)                              ; get face visibility
  82++DDC0              ;       jp  VisibileEdge; DEBUG BODGE TEST TODO
  83++DDC0                      JumpIfAIsNotZero VisibileEdge                     ; LL70 visible edge
  83++DDC0 A7          >                        and     a
  83++DDC1 C2 D5 DD    >                        jp	    nz,VisibileEdge
  84++DDC4              IsFace2Visibile:
  85++DDC4 79                   ld          a,c                                 ; restore byte 1 from c register
  86++DDC5 ED 23                swapnib                                         ;
  87++DDC7 E6 0F                and         $0F                                 ; swap high byte into low byte
  88++DDC9 E5                   push        hl
  89++DDCA                      GetFaceAtA
  89++DDCA 21 13 C1    >                    ld          hl,UbnkFaceVisArray
  89++DDCD ED 31       >                    add         hl,a
  89++DDCF 7E          >                    ld          a,(hl)                              ; get face visibility
  90++DDD0 E1                   pop         hl
  91++DDD1                      JumpIfAIsZero LL78EdgeNotVisible                ; edge not visible
  91++DDD1 A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
  91++DDD2 CA 0C DE    >                        jp	    z, LL78EdgeNotVisible
  92++DDD5              VisibileEdge:                                           ; Now we need to node id from bytes 2 - start and 3 - end
  93++DDD5              ;LL79--Visible edge--------------------------------------
  94++DDD5              ; Get Edge Byte 2
  95++DDD5 FD 7E 02             ld          a,(IY+2)                            ; get Node id
  96++DDD8 11 E7 C0             ld          de,UBnkX1
  97++DDDB CD 5E DD             call        getVertexNodeAtAToDE; getVertexNodeAtAToX1Y1              ; get the points X1Y1 from node
  98++DDDE FD 7E 03             ld          a,(IY+3)
  99++DDE1 11 EB C0             ld          de,UBnkX2
 100++DDE4 CD 5E DD             call        getVertexNodeAtAToDE; getVertexNodeAtAToX2Y2              ; get the points X2Y2 from node
 101++DDE7
 102++DDE7                      IFDEF       CLIPVersion3
 103++DDE7 ~                        call        ClipLineV3
 104++DDE7 ~                        jr          nc,.SkipBreak1
 105++DDE7 ~                        nop
 106++DDE7 ~                        nop
 107++DDE7 ~                        ;break
 108++DDE7 ~            .SkipBreak1:
 109++DDE7 ~                        jr          c,LL78EdgeNotVisible
 110++DDE7 ~            //COMMENEDOUT FOR LATECLIPPING        ELSE
 111++DDE7 ~            //COMMENEDOUT FOR LATECLIPPING            call        ClipLine
 112++DDE7 ~            //COMMENEDOUT FOR LATECLIPPING            jr          c,LL78EdgeNotVisible                ; LL78 edge not visible
 113++DDE7                      ENDIF
 114++DDE7              LL80:                                                   ; ll80 \ Shove visible edge onto XX19 ship lines heap counter U
 115++DDE7                      IFDEF       LATECLIPPING
 116++DDE7 ED 5B B9 7F                  ld          de,(varU16)                         ; clipped edges heap address
 117++DDEB 21 E7 C0                     ld          hl,UbnkPreClipX1
 118++DDEE                              FourLDIInstrunctions
 118++DDEE ED A0       >                        ldi
 118++DDF0 ED A0       >                        ldi
 118++DDF2 ED A0       >                        ldi
 118++DDF4 ED A0       >                        ldi
 119++DDF6                              FourLDIInstrunctions
 119++DDF6 ED A0       >                        ldi
 119++DDF8 ED A0       >                        ldi
 119++DDFA ED A0       >                        ldi
 119++DDFC ED A0       >                        ldi
 120++DDFE ED 53 B9 7F                  ld          (varU16),de                         ; update U16 with current address
 121++DE02                      ELSE
 122++DE02 ~                            ld          de,(varU16)                         ; clipped edges heap address
 123++DE02 ~                            ld          hl,UBnkNewX1
 124++DE02 ~                            FourLDIInstrunctions
 125++DE02 ~                            ld          (varU16),de                         ; update U16 with current address
 126++DE02                      ENDIF
 127++DE02 21 2B C4             ld          hl,UbnkLineArrayLen                 ; we have loaded one line
 128++DE05 34                   inc         (hl)
 129++DE06 7E                   ld          a,(hl)
 130++DE07                      JumpIfAGTENusng LineArraySize,CompletedLineGeneration   ; have we hit max lines for a model hop over jmp to Exit edge data loop
 130++DE07 FE 32       >                        cp     LineArraySize
 130++DE09 D2 22 DE    >                        jp		nc,CompletedLineGeneration
 131++DE0C              ; If we hit here we skip the write of line arryay u16
 132++DE0C              LL78EdgeNotVisible:                                     ; also arrive here if Edge not visible, loop next data edge.
 133++DE0C              LL78:
 134++DE0C 2A BC 7E             ld          hl,(varV)                           ; varV is current edge address
 135++DE0F 3E 04                ld          a,4
 136++DE11 ED 31                add         hl,a
 137++DE13 22 BC 7E             ld          (varV),hl
 138++DE16 21 6D DD             ld          hl,PLEDGECTR                        ;
 139++DE19 34                   inc         (hl)                                ;
 140++DE1A 7E                   ld          a,(hl)                              ; current edge index ++
 141++DE1B                      JumpIfANEMemusng XX17,LL75Loop                  ; compare with total number of edges
 141++DE1B 21 BD 7F    >                        ld    hl,XX17
 141++DE1E BE          >                        cp    (hl)
 141++DE1F C2 A3 DD    >                        jp      nz,LL75Loop
 142++DE22              CompletedLineGeneration:
 143++DE22              LL81:
 144++DE22              LL81SHPPT:                                              ; SHPPT ship is a point arrives here with Acc=2, bottom entry in heap
 145++DE22 3A 2B C4             ld          a,(UbnkLineArrayLen)                ; UbnkLineArrayLen = nbr of lines loaded
 146++DE25 CB 27                sla         a
 147++DE27 CB 27                sla         a                                   ; multiple by 4 to equal number of bytes
 148++DE29                      IFDEF       LATECLIPPING
 149++DE29 CB 27                        sla         a                           ; multiple by 8 to equal number of bytes
 150++DE2B                      ENDIF
 151++DE2B 32 2C C4             ld          (UbnkLineArrayBytes),a              ; UbnkLineArrayBytes= nbr of bytes of lines laoded = array len * 4
 152++DE2E              ExitEdgeDataLoop:
 153++DE2E C9                   ret
 154++DE2F
# file closed: ./Universe/Ships/PrepLines.asm
1900+ DE2F
1901+ DE2F                  DISPLAY "Tracing XX", $
1902+ DE2F
1903+ DE2F              UnivBankSize  EQU $ - StartOfUniv
1904+ DE2F
# file closed: ./Universe/Ships/univ_ship_data.asm
 937  DE2F                                  DISPLAY "Sizing Bank ",BankUNIVDATA0," - Start ",UniverseBankAddr," End - ",$, "- Universe Data A"
 938  DE2F                                  DISPLAY "Bank ",BankUNIVDATA0," - Bytes free ",/D, $2000 - ($-UniverseBankAddr), "- Universe Data A"
 939  DE2F                                  ASSERT $-UniverseBankAddr <8912, Bank code leaks over 8K boundary
 940  DE2F              ; Bank 71  ------------------------------------------------------------------------------------------------------------------------
 941  DE2F                                  SLOT    UniverseBankAddr
 942  DE2F                                  PAGE    BankUNIVDATA1
 943  DE2F                                  ORG	UniverseBankAddr,BankUNIVDATA1
 944  C000 FF           UNIVDATABlock1      DB $FF
 945  C001 00 00 00...                      DS $1FFF                 ; just allocate 8000 bytes for now
 946  E000                                  DISPLAY "Bank ",BankUNIVDATA1," - Bytes free ",/D, $2000 - ($-UniverseBankAddr), "- Universe Data B"
 947  E000                                  ASSERT $-UniverseBankAddr <8912, Bank code leaks over 8K boundary
 948  E000              ; Bank 72  ------------------------------------------------------------------------------------------------------------------------
 949  E000                                  SLOT    UniverseBankAddr
 950  E000                                  PAGE    BankUNIVDATA2
 951  E000                                  ORG	UniverseBankAddr,BankUNIVDATA2
 952  C000 FF           UNIVDATABlock2      DB $FF
 953  C001 00 00 00...                      DS $1FFF                 ; just allocate 8000 bytes for now
 954  E000                                  DISPLAY "Bank ",BankUNIVDATA2," - Bytes free ",/D, $2000 - ($-UniverseBankAddr), "- Universe Data C"
 955  E000                                  ASSERT $-UniverseBankAddr <8912, Bank code leaks over 8K boundary
 956  E000              ; Bank 73  ------------------------------------------------------------------------------------------------------------------------
 957  E000                                  SLOT    UniverseBankAddr
 958  E000                                  PAGE    BankUNIVDATA3
 959  E000                                  ORG	UniverseBankAddr,BankUNIVDATA3
 960  C000 FF           UNIVDATABlock3      DB $FF
 961  C001 00 00 00...                      DS $1FFF                 ; just allocate 8000 bytes for now
 962  E000                                  DISPLAY "Bank ",BankUNIVDATA3," - Bytes free ",/D, $2000 - ($-UniverseBankAddr), "- Universe Data D"
 963  E000                                  ASSERT $-UniverseBankAddr <8912, Bank code leaks over 8K boundary
 964  E000              ; Bank 74  ------------------------------------------------------------------------------------------------------------------------
 965  E000                                  SLOT    UniverseBankAddr
 966  E000                                  PAGE    BankUNIVDATA4
 967  E000                                  ORG	UniverseBankAddr,BankUNIVDATA4
 968  C000 FF           UNIVDATABlock4      DB $FF
 969  C001 00 00 00...                      DS $1FFF                 ; just allocate 8000 bytes for now
 970  E000                                  DISPLAY "Bank ",BankUNIVDATA3," - Bytes free ",/D, $2000 - ($-UniverseBankAddr), "- Universe Data E"
 971  E000                                  ASSERT $-UniverseBankAddr <8912, Bank code leaks over 8K boundary
 972  E000              ; Bank 75  ------------------------------------------------------------------------------------------------------------------------
 973  E000                                  SLOT    UniverseBankAddr
 974  E000                                  PAGE    BankUNIVDATA5
 975  E000                                  ORG	UniverseBankAddr,BankUNIVDATA5
 976  C000 FF           UNIVDATABlock5      DB $FF
 977  C001 00 00 00...                      DS $1FFF                 ; just allocate 8000 bytes for now
 978  E000                                  DISPLAY "Bank ",BankUNIVDATA3," - Bytes free ",/D, $2000 - ($-UniverseBankAddr), "- Universe Data F"
 979  E000                                  ASSERT $-UniverseBankAddr <8912, Bank code leaks over 8K boundary
 980  E000              ; Bank 76  ------------------------------------------------------------------------------------------------------------------------
 981  E000                                  SLOT    UniverseBankAddr
 982  E000                                  PAGE    BankUNIVDATA6
 983  E000                                  ORG	UniverseBankAddr,BankUNIVDATA6
 984  C000 FF           UNIVDATABlock6      DB $FF
 985  C001 00 00 00...                      DS $1FFF                 ; just allocate 8000 bytes for now
 986  E000                                  DISPLAY "Bank ",BankUNIVDATA3," - Bytes free ",/D, $2000 - ($-UniverseBankAddr), "- Universe Data G"
 987  E000                                  ASSERT $-UniverseBankAddr <8912, Bank code leaks over 8K boundary
 988  E000              ; Bank 77  ------------------------------------------------------------------------------------------------------------------------
 989  E000                                  SLOT    UniverseBankAddr
 990  E000                                  PAGE    BankUNIVDATA7
 991  E000                                  ORG	UniverseBankAddr,BankUNIVDATA7
 992  C000 FF           UNIVDATABlock7      DB $FF
 993  C001 00 00 00...                      DS $1FFF                 ; just allocate 8000 bytes for now
 994  E000                                  DISPLAY "Bank ",BankUNIVDATA3," - Bytes free ",/D, $2000 - ($-UniverseBankAddr), "- Universe Data H"
 995  E000                                  ASSERT $-UniverseBankAddr <8912, Bank code leaks over 8K boundary
 996  E000              ; Bank 78  ------------------------------------------------------------------------------------------------------------------------
 997  E000                                  SLOT    UniverseBankAddr
 998  E000                                  PAGE    BankUNIVDATA8
 999  E000                                  ORG	UniverseBankAddr,BankUNIVDATA8
1000  C000 FF           UNIVDATABlock8      DB $FF
1001  C001 00 00 00...                      DS $1FFF                 ; just allocate 8000 bytes for now
1002  E000                                  DISPLAY "Bank ",BankUNIVDATA3," - Bytes free ",/D, $2000 - ($-UniverseBankAddr), "- Universe Data I"
1003  E000                                  ASSERT $-UniverseBankAddr <8912, Bank code leaks over 8K boundary
1004  E000              ; Bank 79  ------------------------------------------------------------------------------------------------------------------------
1005  E000                                  SLOT    UniverseBankAddr
1006  E000                                  PAGE    BankUNIVDATA9
1007  E000                                  ORG	UniverseBankAddr,BankUNIVDATA9
1008  C000 FF           UNIVDATABlock9      DB $FF
1009  C001 00 00 00...                      DS $1FFF                 ; just allocate 8000 bytes for now
1010  E000                                  DISPLAY "Bank ",BankUNIVDATA3," - Bytes free ",/D, $2000 - ($-UniverseBankAddr), "- Universe Data J"
1011  E000                                  ASSERT $-UniverseBankAddr <8912, Bank code leaks over 8K boundary
1012  E000              ; Bank 80  ------------------------------------------------------------------------------------------------------------------------
1013  E000                                  SLOT    UniverseBankAddr
1014  E000                                  PAGE    BankUNIVDATA10
1015  E000                                  ORG	UniverseBankAddr,BankUNIVDATA10
1016  C000 FF           UNIVDATABlock10     DB $FF
1017  C001 00 00 00...                      DS $1FFF                 ; just allocate 8000 bytes for now
1018  E000                                  DISPLAY "Bank ",BankUNIVDATA3," - Bytes free ",/D, $2000 - ($-UniverseBankAddr), "- Universe Data K"
1019  E000                                  ASSERT $-UniverseBankAddr <8912, Bank code leaks over 8K boundary
1020  E000              ; Bank 81  ------------------------------------------------------------------------------------------------------------------------
1021  E000                                  SLOT    UniverseBankAddr
1022  E000                                  PAGE    BankUNIVDATA11
1023  E000                                  ORG	UniverseBankAddr,BankUNIVDATA11
1024  C000 FF           UNIVDATABlock11     DB $FF
1025  C001 00 00 00...                      DS $1FFF                 ; just allocate 8000 bytes for now
1026  E000                                  DISPLAY "Bank ",BankUNIVDATA3," - Bytes free ",/D, $2000 - ($-UniverseBankAddr), "- Universe Data L"
1027  E000                                  ASSERT $-UniverseBankAddr <8912, Bank code leaks over 8K boundary
1028  E000              ; Bank 82  ------------------------------------------------------------------------------------------------------------------------
1029  E000                                  SLOT    UniverseBankAddr
1030  E000                                  PAGE    BankUNIVDATA12
1031  E000                                  ORG	UniverseBankAddr,BankUNIVDATA12
1032  C000 FF           UNIVDATABlock12     DB $FF
1033  C001 00 00 00...                      DS $1FFF                 ; just allocate 8000 bytes for now
1034  E000                                  DISPLAY "Bank ",BankUNIVDATA3," - Bytes free ",/D, $2000 - ($-UniverseBankAddr), "- Universe Data M"
1035  E000                                  ASSERT $-UniverseBankAddr <8912, Bank code leaks over 8K boundary
1036  E000              ; Bank 83  ------------------------------------------------------------------------------------------------------------------------
1037  E000                                  SLOT    SunBankAddr
1038  E000                                  PAGE    BankSunData
1039  E000                                  ORG	    SunBankAddr,BankSunData
1040  C000                                  INCLUDE "./Universe/Sun/sun_data.asm"
# file opened: ./Universe/Sun/sun_data.asm
   1+ C000              ; In  flight ship data tables
   2+ C000              ; In  flight ship data tables
   3+ C000              ; In  flight ship data tables
   4+ C000              ; There can be upto &12 objects in flight.
   5+ C000              ; To avoid hassle of memory heap managment, the free list
   6+ C000              ; will correspond to a memory bank offset so data will be held in
   7+ C000              ; 1 bank per universe object. Its a waste of a lot of memory but really
   8+ C000              ; 1 bank per universe object. Its a waste of a lot of memory but really
   9+ C000              ; simple that way. Each bank will be 8K and swapped on 8K slot 7 $E000 to $FFFF
  10+ C000              ; This means each gets its own line list, inwork etc
  11+ C000
  12+ C000              ; "Runtime Ship Data paged into in Bank 7"
  13+ C000              ;                      0123456789ABCDEF
  14+ C000 53 75 6E 20  StartOfSun:        DB "Sun Data ......."
  14+ C004 44 61 74 61
  14+ C008 20 2E 2E 2E
  14+ C00C 2E 2E 2E 2E
  15+ C010              ; NOTE we can cheat and pre allocate segs just using a DS for now
  16+ C010              CheckRowHLOnScreen:     MACRO   failtarget
  17+ C010 ~                                    ld      a,h                             ; is h byte set, i.e > 256 or < 0
  18+ C010 ~                                    and     a                               ; .
  19+ C010 ~                                    jr      nz,failtarget                   ; h <> 0 so fails (covers <0 and > 255
  20+ C010 ~                                    ld      a,l                             ; l bit 7 0?
  21+ C010 ~                                    and     Bit7Only                        ; covers l > 127 (screen draw area is 0 to 192 / 3 * 2 (128)
  22+ C010 ~                                    jr      nz,failtarget                   ;
  23+ C010                                      ENDM
  24+ C010
  25+ C010              ; IY = SBnKLineArray + rowValue*2
  26+ C010              IYEquRowN:              MACRO   rowValue                        ; set up iy as target address
  27+ C010 ~                                    ld      a,rowValue
  28+ C010 ~                                    ld      hl,SBnKLineArray
  29+ C010 ~                                    add     hl,a
  30+ C010 ~                                    add     hl,a
  31+ C010 ~                                    push    hl
  32+ C010 ~                                    pop     iy
  33+ C010                                      ENDM
  34+ C010              ;   \ -> & 565D \ See ship data files chosen and loaded after flight code starts running.
  35+ C010              ; Universe map substibute for INWK
  36+ C010              ;-Camera Position of Ship----------------------------------------------------------------------------------------------------------
  37+ C010              SBnKDataBlock:
  38+ C010                                      INCLUDE "./Universe/Sun/SunPosVars.asm"
# file opened: ././Universe/Sun/SunPosVars.asm
   1++C010              ;-Camera Position of Ship----------------------------------------------------------------------------------------------------------
   2++C010 00           SBnKxlo                     DB  0                       ; INWK+0
   3++C011 00           SBnKxhi                     DB  0                       ; there are hi medium low as some times these are 24 bit
   4++C012 00           SBnKxsgn                    DB  0                       ; INWK+2
   5++C013 00           SBnKylo                     DB  0                       ; INWK+3 \ ylo
   6++C014 00           SBnKyhi                     DB  0                       ; INWK+4 \ yHi
   7++C015 00           SBnKysgn                    DB  0                       ; INWK +5
   8++C016 00           SBnKzlo                     DB  0                       ; INWK +6
   9++C017 00           SBnKzhi                     DB  0                       ; INWK +7
  10++C018 00           SBnKzsgn                    DB  0                       ; INWK +8
  11++C019 00 00        SunCompassX                 DW  0
  12++C01B 00 00        SunCompassY                 DW  0
  13++C01D
# file closed: ././Universe/Sun/SunPosVars.asm
  39+ C01D              ; Not needed as we don't rotate planets and suns                        INCLUDE "./Universe/Sun/SunRotationMatrixVars.asm"
  40+ C01D                                      INCLUDE "./Universe/Sun/SunAIRuntimeData.asm"
# file opened: ././Universe/Sun/SunAIRuntimeData.asm
   1++C01D              ; -- Ship AI data
   2++C01D 00           SBnKRotXCounter             DB  0                       ; INWK +29
   3++C01E 00           SBnKRotZCounter             DB  0                       ; INWK +30
   4++C01F 00           SBnkCam0yLo                 DB  0                       ; INWK +33 ????
   5++C020 00           SBnkCam0yHi                 DB  0                       ; INWK +34?????
   6++C021
# file closed: ././Universe/Sun/SunAIRuntimeData.asm
  41+ C021
  42+ C021
  43+ C021                                      INCLUDE "./Universe/Sun/SunXX16Vars.asm"
# file opened: ././Universe/Sun/SunXX16Vars.asm
   1++C021              ;-- XX16 --------------------------------------------------------------------------------------------------------------------------
   2++C021 00 00        SBnkTransmatSidevX          DW  0               ; XX16+0
   3++C023              SBnkTransmatSidev           EQU SBnkTransmatSidevX
   4++C023 00 00        SBnkTransmatSidevY          DW 0                ; XX16+2
   5++C025 00 00        SBnkTransmatSidevZ          DW 0                ; XX16+2
   6++C027 00 00        SBnkTransmatRoofvX          DW 0
   7++C029              SBnkTransmatRoofv           EQU SBnkTransmatRoofvX
   8++C029 00 00        SBnkTransmatRoofvY          DW 0                ; XX16+2
   9++C02B 00 00        SBnkTransmatRoofvZ          DW 0                ; XX16+2
  10++C02D 00 00        SBnkTransmatNosevX          DW 0
  11++C02F              SBnkTransmatNosev           EQU SBnkTransmatNosevX
  12++C02F 00 00        SBnkTransmatNosevY          DW 0                ; XX16+2
  13++C031 00 00        SBnkTransmatNosevZ          DW 0                ; XX16+2
  14++C033 00 00        SBnkTransmatTransX          DW 0
  15++C035 00 00        SBnkTransmatTransY          DW 0
  16++C037 00 00        SBnkTransmatTransZ          DW 0
  17++C039              SunXX16                      equ SBnkTransmatSidev
  18++C039              ;-- XX16Inv --------------------------------------------------------------------------------------------------------------------------
  19++C039 00 00        SBnkTransInvRow0x0          DW 0
  20++C03B 00 00        SBnkTransInvRow0x1          DW 0
  21++C03D 00 00        SBnkTransInvRow0x2          DW 0
  22++C03F 00 00        SBnkTransInvRow0x3          DW 0
  23++C041 00 00        SBnkTransInvRow1y0          DW 0
  24++C043 00 00        SBnkTransInvRow1y1          DW 0
  25++C045 00 00        SBnkTransInvRow1y2          DW 0
  26++C047 00 00        SBnkTransInvRow1y3          DW 0
  27++C049 00 00        SBnkTransInvRow2z0          DW 0
  28++C04B 00 00        SBnkTransInvRow2z1          DW 0
  29++C04D 00 00        SBnkTransInvRow2z2          DW 0
  30++C04F 00 00        SBnkTransInvRow2z3          DW 0
  31++C051
  32++C051              SunXX16Inv             equ SBnkTransInvRow0x0
  33++C051
# file closed: ././Universe/Sun/SunXX16Vars.asm
  44+ C051                                      INCLUDE "./Universe/Sun/SunXX25Vars.asm"
# file opened: ././Universe/Sun/SunXX25Vars.asm
   1++C051              ;-- XX25 --------------------------------------------------------------------------------------------------------------------------
   2++C051 00           SBnKProjxLo                 DB  0
   3++C052 00           SBnKProjxHi                 DB  0
   4++C053 00           SBnKProjxSgn                DB  0
   5++C054              SBnKProjx                   EQU SBnKProjxLo
   6++C054 00           SBnKProjyLo                 DB  0
   7++C055 00           SBnKProjyHi                 DB  0
   8++C056 00           SBnKProjySgn                DB  0
   9++C057              SBnKProjy                   EQU SBnKProjyLo
  10++C057 00           SBnKProjzLo                 DB  0
  11++C058 00           SBnKProjzHi                 DB  0
  12++C059 00           SBnKProjzSgn                DB  0
  13++C05A              SBnKProjz                   EQU SBnKProjzLo
  14++C05A              SXX25                       EQU SBnKProjxLo
  15++C05A
# file closed: ././Universe/Sun/SunXX25Vars.asm
  45+ C05A                                      INCLUDE "./Universe/Sun/SunXX18Vars.asm"
# file opened: ././Universe/Sun/SunXX18Vars.asm
   1++C05A              ;-- XX18 --------------------------------------------------------------------------------------------------------------------------
   2++C05A 00           SBnKDrawCam0xLo             DB  0               ; XX18+0
   3++C05B 00           SBnKDrawCam0xHi             DB  0               ; XX18+1
   4++C05C 00           SBnKDrawCam0xSgn            DB  0               ; XX18+2
   5++C05D              SBnKDrawCam0x               equ SBnKDrawCam0xLo
   6++C05D 00           SBnKDrawCam0yLo             DB  0               ; XX18+3
   7++C05E 00           SBnKDrawCam0yHi             DB  0               ; XX18+4
   8++C05F 00           SBnKDrawCam0ySgn            DB  0               ; XX18+5
   9++C060              SBnKDrawCam0y               equ SBnKDrawCam0yLo
  10++C060 00           SBnKDrawCam0zLo             DB  0               ; XX18+6
  11++C061 00           SBnKDrawCam0zHi             DB  0               ; XX18+7
  12++C062 00           SBnKDrawCam0zSgn            DB  0               ; XX18+8
  13++C063              SBnKDrawCam0z               equ SBnKDrawCam0zLo
  14++C063              SXX18                       equ SBnKDrawCam0xLo
  15++C063
# file closed: ././Universe/Sun/SunXX18Vars.asm
  46+ C063
  47+ C063              ; Used to make 16 bit reads a little cleaner in source code
  48+ C063 00 00 00     SBnKzPoint                  DS  3
  49+ C066              SBnKzPointLo                equ SBnKzPoint
  50+ C066              SBnKzPointHi                equ SBnKzPoint+1
  51+ C066              SBnKzPointSign              equ SBnKzPoint+2
  52+ C066                                      INCLUDE "./Universe/Sun/SunXX15Vars.asm"
# file opened: ././Universe/Sun/SunXX15Vars.asm
   1++C066              ;-- XX15 --------------------------------------------------------------------------------------------------------------------------
   2++C066 00           SBnKXScaled                 DB  0               ; XX15+0Xscaled
   3++C067 00           SBnKXScaledSign             DB  0               ; XX15+1xsign
   4++C068 00           SBnKYScaled                 DB  0               ; XX15+2yscaled
   5++C069 00           SBnKYScaledSign             DB  0               ; XX15+3ysign
   6++C06A 00           SBnKZScaled                 DB  0               ; XX15+4zscaled
   7++C06B 00           SBnKZScaledSign             DB  0               ; XX15+5zsign
   8++C06C
   9++C06C              SXX15                       equ SBnKXScaled
  10++C06C              SXX15VecX                   equ SXX15
  11++C06C              SXX15VecY                   equ SXX15+1
  12++C06C              SXX15VecZ                   equ SXX15+2
  13++C06C              SBnKXPoint                  equ SXX15
  14++C06C              SBnKXPointLo                equ SXX15+0
  15++C06C              SBnKXPointHi                equ SXX15+1
  16++C06C              SBnKXPointSign              equ SXX15+2
  17++C06C              SBnKYPoint                  equ SXX15+3
  18++C06C              SBnKYPointLo                equ SXX15+3
  19++C06C              SBnKYPointHi                equ SXX15+4
  20++C06C              SBnKYPointSign              equ SXX15+5
  21++C06C
# file closed: ././Universe/Sun/SunXX15Vars.asm
  53+ C06C                                      INCLUDE "./Universe/Sun/SunXX12Vars.asm"
# file opened: ././Universe/Sun/SunXX12Vars.asm
   1++C06C              ;-- transmat0 --------------------------------------------------------------------------------------------------------------------------
   2++C06C              ; Note XX12 comes after as some logic in normal processing uses XX15 and XX12 combines
   3++C06C 00           SBnKXX12xLo                 DB  0               ; XX12+0
   4++C06D 00           SBnKXX12xSign               DB  0               ; XX12+1
   5++C06E 00           SBnKXX12yLo                 DB  0               ; XX12+2
   6++C06F 00           SBnKXX12ySign               DB  0               ; XX12+3
   7++C070 00           SBnKXX12zLo                 DB  0               ; XX12+4
   8++C071 00           SBnKXX12zSign               DB  0               ; XX12+5
   9++C072 00 00 00...  SXX12Save                   DS  6
  10++C078 00 00 00...  SXX12Save2                  DS  6
  11++C07E              SXX12                       equ SBnKXX12xLo
  12++C07E              varSXX12                    equ SBnKXX12xLo
  13++C07E              ; Repurposed XX12 when plotting lines
  14++C07E              SBnkY2                      equ SXX12+0
  15++C07E              SbnKy2Lo                    equ SXX12+0
  16++C07E              SBnkY2Hi                    equ SXX12+1
  17++C07E              SBnkDeltaXLo                equ SXX12+2
  18++C07E              SBnkDeltaXHi                equ SXX12+3
  19++C07E              SBnkDeltaYLo                equ SXX12+4
  20++C07E              SBnkDeltaYHi                equ SXX12+5
  21++C07E              SbnkGradient                equ SXX12+2
  22++C07E              SBnkTemp1                   equ SXX12+2
  23++C07E              SBnkTemp1Lo                 equ SXX12+2
  24++C07E              SBnkTemp1Hi                 equ SXX12+3
  25++C07E              SBnkTemp2                   equ SXX12+3
  26++C07E              SBnkTemp2Lo                 equ SXX12+3
  27++C07E              SBnkTemp2Hi                 equ SXX12+4
  28++C07E
# file closed: ././Universe/Sun/SunXX12Vars.asm
  54+ C07E
  55+ C07E
  56+ C07E              ; Post clipping the results are now 8 bit
  57+ C07E 00           SBnKVisibility              DB  0               ; replaces general purpose xx4 in rendering
  58+ C07F 00           SBnKProjectedY              DB  0
  59+ C080 00           SBnKProjectedX              DB  0
  60+ C081              SBnKProjected               equ SBnKProjectedY  ; resultant projected position
  61+ C081 00 00 00...  SunXX15Save                 DS  8
  62+ C089 00 00 00...  SunXX15Save2                DS  8
  63+ C091              ; Heap (or array) information for lines and normals
  64+ C091              ; Coords are stored XY,XY,XY,XY
  65+ C091              ; Normals
  66+ C091              ; This needs re-oprganising now.
  67+ C091              ; Runtime Calculation Store
  68+ C091
  69+ C091              SunLineArraySize            equ 128 * 2
  70+ C091              ; Storage arrays for data
  71+ C091
  72+ C091 00 00 00...  SBnKLineArray               DS SunLineArraySize ; XX19 Holds the clipped line details
  73+ C191              SBnKLinesHeapMax            EQU $ - SBnKLineArray
  74+ C191
  75+ C191 00 00        LineArrayPtr                DW  0
  76+ C193
  77+ C193              SBnK_Data_len               EQU $ - SBnKDataBlock
  78+ C193
  79+ C193              ; --------------------------------------------------------------
  80+ C193 21 10 C0     ResetSBnKData:          ld      hl,SBnKDataBlock
  81+ C196 11 83 01                             ld      de,SBnK_Data_len
  82+ C199 AF                                   xor     a
  83+ C19A CD 32 7E                             call    memfill_dma
  84+ C19D C9                                   ret
  85+ C19E              ; --------------------------------------------------------------
  86+ C19E 21 10 C0     ResetSBnKPosition:      ld      hl,SBnKxlo
  87+ C1A1 06 09                                ld      b, 3*3
  88+ C1A3 AF                                   xor     a
  89+ C1A4 77           .zeroLoop:              ld      (hl),a
  90+ C1A5 23                                   inc     hl
  91+ C1A6 10 FC                                djnz    .zeroLoop
  92+ C1A8 C9                                   ret
  93+ C1A9
  94+ C1A9 44           WarpSunByHL:            ld      b,h
  95+ C1AA 4D                                   ld      c,l
  96+ C1AB 26 00                                ld      h,0
  97+ C1AD ED 5B 17 C0                          ld      de,(SBnKzhi)
  98+ C1B1 3A 16 C0                             ld      a,(SBnKzlo)
  99+ C1B4 6F                                   ld      l,a
 100+ C1B5                                      MMUSelectMathsBankedFns
 100+ C1B5 ED 91 50 66 >                     nextreg MathsBankedFnsMMU, BankMathsBankedFns
 100+ C1B9 CD 10 01       call  SubBCHfromDELsigned
 101+ C1BC ED 53 17 C0                          ld      (SBnKzhi),de
 102+ C1C0 7D                                   ld      a,l
 103+ C1C1 32 16 C0                             ld      (SBnKzlo),a
 104+ C1C4 C9                                   ret
 105+ C1C5
 106+ C1C5
 107+ C1C5              ; Z Must be at least 2 and positve to warp
 108+ C1C5 21 18 C0     WarpSunCloser:          ld      hl,SBnKzsgn
 109+ C1C8 7E                                   ld      a,(hl)
 110+ C1C9                                      ReturnIfALTNusng 2                      ; hard liit along z axis
 110+ C1C9 FE 02       >                        cp    2
 110+ C1CB D8          >                        ret	 c
 111+ C1CC 35                                   dec     (hl)
 112+ C1CD C9                                   ret
 113+ C1CE
 114+ C1CE              ; It should normally be behind but someone could fly past a planet, turn aroudn and jump
 115+ C1CE 21 18 C0     WarpSunFurther:         ld      hl,SBnKzsgn
 116+ C1D1 7E                                   ld      a,(hl)
 117+ C1D2                                      ReturnIfAGTENusng $7F                   ; this is the hard limit else it woudl turn negative and flip to -0
 117+ C1D2 FE 7F       >                        cp    $7F
 117+ C1D4 D0          >                        ret	 nc
 118+ C1D5 34                                   inc     (hl)                           ; if its negative it will still increase as we will block insane values
 119+ C1D6 C9                                   ret
 120+ C1D7              ; This uses UBNKNodeArray as the list
 121+ C1D7              ; the array is 256 * 2 bytes
 122+ C1D7              ; counter is current row y pos
 123+ C1D7              ; byte 1 is start x pos
 124+ C1D7              ; byte 2 is end x pos
 125+ C1D7              ; if they are both 0 then skip
 126+ C1D7              ; its always horizontal, yellow
 127+ C1D7
 128+ C1D7              .SunNoDraw:             SetCarryFlag                    ; ship is behind so do not draw, so we don't care abour draw as dot
 128+ C1D7 37          >                        scf
 129+ C1D8 C9                                   ret
 130+ C1D9
 131+ C1D9              SunBankDraw:            MACRO
 132+ C1D9 ~            .drawLoop               ld      a,(hl)
 133+ C1D9 ~                                    ld      c,a                     ; c = left column
 134+ C1D9 ~                                    inc     hl
 135+ C1D9 ~                                    ld      d,(hl)                  ; d = right col
 136+ C1D9 ~                                    inc     hl                      ; now ready for next linel
 137+ C1D9 ~                                    push    hl,,bc
 138+ C1D9 ~                                    cp      d                       ; if both points are the same then no line (we will ignore single pixel as it can't happen at this stage other than tips of circles)
 139+ C1D9 ~                                    IfResultZeroGoto .NoLineDraw
 140+ C1D9 ~                                    ld      a,d                     ; get right col back
 141+ C1D9 ~                                    sub     c                       ; subtract left so a = length
 142+ C1D9 ~                                    inc     a                       ; so its at least 1 , TODO add cp jr c logic in dma routine so that it does non dma if line < x
 143+ C1D9 ~                                    call    z, .FixWidth
 144+ C1D9 ~                                    ld      d,a                     ; de = length (e - d)
 145+ C1D9 ~                                    ld      e,216                   ; yellow
 146+ C1D9 ~                                    call    l2_draw_horz_dma        ; draw without bank switch
 147+ C1D9 ~            .NoLineDraw:            pop     hl,,bc
 148+ C1D9 ~                                    inc     b
 149+ C1D9 ~                                    dec     iyh
 150+ C1D9 ~                                    IfResultNotZeroGoto  .drawLoop
 151+ C1D9                                      ENDM
 152+ C1D9
 153+ C1D9
 154+ C1D9
 155+ C1D9              SunDraw:                MMUSelectLayer2
 155+ C1D9 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 156+ C1DD 3A ED C5     .OptimiseStartPos:      ld      a,(MinYOffset)
 157+ C1E0                                      JumpIfAIsZero .OffsetIsZero     ; if offset is 0 then just initate as normal
 157+ C1E0 A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
 157+ C1E1 CA F1 C1    >                        jp	    z, .OffsetIsZero
 158+ C1E4                                      JumpIfALTNusng 64, .OffsetLT64  ; if offset >=64 then we adjust and mve to bank 0
 158+ C1E4 FE 40       >                        cp      64
 158+ C1E6 DA FE C1    >                        jp		c, .OffsetLT64
 159+ C1E9 D6 40        .OffsetGTE64:           sub     64
 160+ C1EB 32 ED C5                             ld      (MinYOffset),a          ; adjust offset for bank 2
 161+ C1EE C3 36 C2                             jp      .StartBank2
 162+ C1F1 06 00        .OffsetIsZero:          ld      b,0                     ; row
 163+ C1F3 FD 26 40                             ld      iyh,64                  ; counter
 164+ C1F6 21 91 C0                             ld      hl,SBnKLineArray        ; set hl to start of array
 165+ C1F9 C3 10 C2                             jp      .StartBank1
 166+ C1FC              ;-- Snuck routine in here so that the macro will be happier
 167+ C1FC 3D           .FixWidth:              dec     a                       ; if carry resulted in a value of zero then correct
 168+ C1FD C9                                   ret
 169+ C1FE 21 91 C0     .OffsetLT64:            ld      hl,SBnKLineArray        ; adjust hl for line array offset
 170+ C201 ED 31                                add     hl,a                    ; .
 171+ C203 ED 31                                add     hl,a                    ; .
 172+ C205 47                                   ld      b,a                     ; set b row to the actual offset
 173+ C206 4F                                   ld      c,a                     ; iyh = 64 - Y offset
 174+ C207 3E 40                                ld      a,64                    ; .
 175+ C209 91                                   sub     c                       ; .
 176+ C20A FD 67                                ld      iyh,a
 177+ C20C AF                                   xor     a                       ; Ready bank 2 with no offset
 178+ C20D 32 ED C5                             ld      (MinYOffset),a          ; .
 179+ C210 D9           .StartBank1:            exx
 180+ C211 3E 00                                ld      a,LAYER2_SHIFTED_SCREEN_TOP
 181+ C213 CD 3A E0                             call    asm_l2_bank_select      ; get in the first bank, we will only then bank select when needed
 182+ C216 D9                                   exx
 183+ C217                                      SunBankDraw
 183+ C217 7E          >.drawLoop               ld      a,(hl)
 183+ C218 4F          >                        ld      c,a                     ; c = left column
 183+ C219 23          >                        inc     hl
 183+ C21A 56          >                        ld      d,(hl)                  ; d = right col
 183+ C21B 23          >                        inc     hl                      ; now ready for next linel
 183+ C21C E5 C5       >                        push    hl,,bc
 183+ C21E BA          >                        cp      d                       ; if both points are the same then no line (we will ignore single pixel as it can't happen at this stage other than tips of circles)
 183+ C21F             >                        IfResultZeroGoto .NoLineDraw
 183+ C21F CA 2E C2    >                        jp	z,.NoLineDraw
 183+ C222 7A          >                        ld      a,d                     ; get right col back
 183+ C223 91          >                        sub     c                       ; subtract left so a = length
 183+ C224 3C          >                        inc     a                       ; so its at least 1 , TODO add cp jr c logic in dma routine so that it does non dma if line < x
 183+ C225 CC FC C1    >                        call    z, .FixWidth
 183+ C228 57          >                        ld      d,a                     ; de = length (e - d)
 183+ C229 1E D8       >                        ld      e,216                   ; yellow
 183+ C22B CD 81 E7    >                        call    l2_draw_horz_dma        ; draw without bank switch
 183+ C22E C1 E1       >.NoLineDraw:            pop     hl,,bc
 183+ C230 04          >                        inc     b
 183+ C231 FD 25       >                        dec     iyh
 183+ C233             >                        IfResultNotZeroGoto  .drawLoop
 183+ C233 C2 17 C2    >                        jp	nz,.drawLoop
 184+ C236 3A ED C5     .StartBank2:            ld      a,(MinYOffset)
 185+ C239                                      JumpIfAIsZero .OffsetBank2IsZero; if offset is 0 then we just continue, offset can never be >127 else there would be no draw
 185+ C239 A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
 185+ C23A CA 4E C2    >                        jp	    z, .OffsetBank2IsZero
 186+ C23D 21 11 C1     .NotZeroOffset:         ld      hl,SBnKLineArray + (64 * 2); adjust to correct offset
 187+ C240 ED 31                                add     hl,a
 188+ C242 ED 31                                add     hl,a
 189+ C244 4F                                   ld      c,a                     ; iyh = 64 - offset
 190+ C245 3E 40                                ld      a,64                    ; .
 191+ C247 91                                   sub     c                       ; .
 192+ C248 FD 67                                ld      iyh,a                   ; .
 193+ C24A 41                                   ld      b,c                     ; b = offset row
 194+ C24B C3 56 C2                             jp      .drawLineBank2
 195+ C24E 21 11 C1     .OffsetBank2IsZero:     ld      hl,SBnKLineArray + (64 * 2); start with offset adjusted
 196+ C251 06 00                                ld      b,0
 197+ C253 FD 26 40                             ld      iyh,64
 198+ C256 D9           .drawLineBank2:         exx
 199+ C257 3E 40                                ld      a,LAYER2_SHIFTED_SCREEN_MIDDLE
 200+ C259 CD 3A E0                             call    asm_l2_bank_select      ; now do the lower bank
 201+ C25C D9                                   exx
 202+ C25D              ; Could make this a sub routine but unwrapping saves a call
 203+ C25D                                      SunBankDraw
 203+ C25D 7E          >.drawLoop               ld      a,(hl)
 203+ C25E 4F          >                        ld      c,a                     ; c = left column
 203+ C25F 23          >                        inc     hl
 203+ C260 56          >                        ld      d,(hl)                  ; d = right col
 203+ C261 23          >                        inc     hl                      ; now ready for next linel
 203+ C262 E5 C5       >                        push    hl,,bc
 203+ C264 BA          >                        cp      d                       ; if both points are the same then no line (we will ignore single pixel as it can't happen at this stage other than tips of circles)
 203+ C265             >                        IfResultZeroGoto .NoLineDraw
 203+ C265 CA 74 C2    >                        jp	z,.NoLineDraw
 203+ C268 7A          >                        ld      a,d                     ; get right col back
 203+ C269 91          >                        sub     c                       ; subtract left so a = length
 203+ C26A 3C          >                        inc     a                       ; so its at least 1 , TODO add cp jr c logic in dma routine so that it does non dma if line < x
 203+ C26B CC FC C1    >                        call    z, .FixWidth
 203+ C26E 57          >                        ld      d,a                     ; de = length (e - d)
 203+ C26F 1E D8       >                        ld      e,216                   ; yellow
 203+ C271 CD 81 E7    >                        call    l2_draw_horz_dma        ; draw without bank switch
 203+ C274 C1 E1       >.NoLineDraw:            pop     hl,,bc
 203+ C276 04          >                        inc     b
 203+ C277 FD 25       >                        dec     iyh
 203+ C279             >                        IfResultNotZeroGoto  .drawLoop
 203+ C279 C2 5D C2    >                        jp	nz,.drawLoop
 204+ C27C C9                                   ret
 205+ C27D              ; -------------------------------------------------------------
 206+ C27D              ; Sun Position    z = ((seed.d & 7) | 1)      shift left 16
 207+ C27D              ;                 x = (seed.f & 3) shift left 16  | seed.f & 3 << 8 * -1 if seed f odd
 208+ C27D              ;                 y    = sun x position
 209+ C27D              ;
 210+ C27D              CalculateSunWarpPositon:
 211+ C27D 3A 49 80     .CalcZPosition:         ld      a,(WorkingSeeds+3)      ; seed d & 7
 212+ C280 E6 07                                and     %00000111               ; .
 213+ C282 F6 81                                or      %10000001               ; | 1
 214+ C284 32 18 C0     .SetZPosition:          ld      (SBnKzsgn),a            ; << 16 (i.e. load into z sign byte
 215+ C287 21 00 00                             ld      hl, $0000               ; now set z hi and lo
 216+ C28A 22 16 C0                             ld      (SBnKzlo),hl            ;
 217+ C28D 3A 4B 80     .CalcXandYPosition:     ld      a,(WorkingSeeds+5)      ; seed f & 3
 218+ C290 E6 03                                and     %00000011               ; .
 219+ C292 47                                   ld      b,a
 220+ C293 3A 4A 80                             ld      a,(WorkingSeeds+4)      ; get low bit of seed e
 221+ C296 E6 01                                and     %00000001
 222+ C298 1F                                   rra                             ; roll bi t0 into bit 7
 223+ C299 B0                                   or      b                       ; now calc is f & 3 * -1 if seed e is odd
 224+ C29A 32 12 C0     .SetXandYPosition:      ld      (SBnKxsgn),a            ; set into x and y sign byte
 225+ C29D 32 15 C0                             ld      (SBnKysgn),a            ; .
 226+ C2A0 78                                   ld      a,b                     ; we want just seed f & 3 here
 227+ C2A1 32 11 C0                             ld      (SBnKxhi),a             ; set into x and y high byte
 228+ C2A4 32 14 C0                             ld      (SBnKyhi),a             ; .
 229+ C2A7                                      ZeroA
 229+ C2A7 AF          >                        xor a
 230+ C2A8 32 10 C0                             ld      (SBnKxlo),a
 231+ C2AB 32 13 C0                             ld      (SBnKylo),a
 232+ C2AE C9                                   ret
 233+ C2AF
 234+ C2AF              CalculateSunLaunchedPosition:
 235+ C2AF              .CalcXPosition:         MMUSelectMathsBankedFns
 235+ C2AF ED 91 50 66 >                     nextreg MathsBankedFnsMMU, BankMathsBankedFns
 236+ C2B3 DD 21 10 C0                          ld      ix,SBnKxlo              ; Sun BnKxlo += ParentPlanetX
 237+ C2B7 FD 21 7E 80                          ld      iy,ParentPlanetX        ; .
 238+ C2BB CD 90 00                             call    AddAtIXtoAtIY24Signed   ; .
 239+ C2BE DD 21 13 C0  .CalcYPosition:         ld      ix,SBnKylo              ; Sun BnKylo += ParentPlanetZ
 240+ C2C2 FD 21 81 80                          ld      iy,ParentPlanetY        ; .
 241+ C2C6 CD 90 00                             call    AddAtIXtoAtIY24Signed   ; .
 242+ C2C9 DD 21 16 C0  .CalcZPosition:         ld      ix,SBnKzlo              ; Sun BnKzlo += ParentPlanetZ
 243+ C2CD FD 21 84 80                          ld      iy,ParentPlanetZ        ; .
 244+ C2D1 CD 90 00                             call    AddAtIXtoAtIY24Signed   ; .
 245+ C2D4 C9                                   ret
 246+ C2D5
 247+ C2D5              ; --------------------------------------------------------------
 248+ C2D5              ; This sets current universe object to a star / sun, they use sign + 23 bit positions
 249+ C2D5 CD 93 C1     CreateSun:              call    ResetSBnKData
 250+ C2D8 3A 49 80                             ld      a,(WorkingSeeds+3)
 251+ C2DB E6 07                                and     %00000111
 252+ C2DD F6 81                                or      %10000001
 253+ C2DF 32 18 C0                             ld      (SBnKzsgn),a
 254+ C2E2 3A 4B 80                             ld      a,(WorkingSeeds+5)
 255+ C2E5 E6 03                                and     %00000011
 256+ C2E7 32 12 C0                             ld      (SBnKxsgn),a
 257+ C2EA 32 15 C0                             ld      (SBnKysgn),a
 258+ C2ED 21 00 00                             ld      hl, $0000
 259+ C2F0 22 17 C0                             ld      (SBnKzhi),hl
 260+ C2F3 3E E3                                ld      a, $E3
 261+ C2F5 32 16 C0                             ld      (SBnKzlo),a
 262+ C2F8 C9                                   ret
 263+ C2F9              ; --------------------------------------------------------------
 264+ C2F9              ; This creates a sun relative to space station on launch
 265+ C2F9 CD 93 C1     CreateSunLaunched:      call    ResetSBnKData
 266+ C2FC 21 00 00                             ld      hl,0
 267+ C2FF 3E 00                                ld      a,0
 268+ C301 22 10 C0                             ld      (SBnKxlo),hl
 269+ C304 22 13 C0                             ld      (SBnKylo),hl
 270+ C307 21 00 E0                             ld      hl,$E000
 271+ C30A 22 16 C0                             ld      (SBnKzlo),hl
 272+ C30D 32 12 C0                             ld      (SBnKxsgn),a
 273+ C310 32 18 C0                             ld      (SBnKzsgn),a
 274+ C313 3E 06                                ld      a,$06
 275+ C315 32 15 C0                             ld      (SBnKysgn),a
 276+ C318 C9                                   ret
 277+ C319              ; --------------------------------------------------------------
 278+ C319              ; This sets current universe object to a planet,they use sign + 23 bit positions
 279+ C319              ;;TODOCreatePlanet:           call    ResetSBnKData
 280+ C319              ;;TODO                        ld      a,(DisplayTekLevel)
 281+ C319              ;;TODO                        and     $00000010               ; Set A = 128 or 130 depending on bit 1 of the system's tech level
 282+ C319              ;;TODO                        or      $10000000
 283+ C319              ;;TODO                        ld      (SBnKShipType),a
 284+ C319              ;;TODO                        xor     a
 285+ C319              ;;TODO                        ld      (SBnKaiatkecm),a
 286+ C319              ;;TODO                        MaxUnivPitchAndRoll
 287+ C319              ;;TODO                        ld      a,(WorkingSeeds+1)      ; a= bits 1 and 0 of working seed1 + 3 + carry
 288+ C319              ;;TODO                        and     %00000011               ; .
 289+ C319              ;;TODO                        adc     3                       ; .
 290+ C319              ;;TODO                        ld      (SBnKzsgn),a            ; set z sign to 3 + C + 0..3 bits
 291+ C319              ;;TODO                        rr      a
 292+ C319              ;;TODO                        ld      (PlanetXsgn),a
 293+ C319              ;;TODO                        ld      (PlanetYsgn),a
 294+ C319              ;;TODO                        ret
 295+ C319
 296+ C319
 297+ C319                                 ;     include "./Maths/ADDHLDESignBC.asm"
 298+ C319
 299+ C319 7C           SunADDHLDESignedv3:     ld      a,h
 300+ C31A E6 80                                and     SignOnly8Bit
 301+ C31C 47                                   ld      b,a                         ;save sign bit in b
 302+ C31D AA                                   xor     d                           ;if h sign and d sign were different then bit 7 of a will be 1 which means
 303+ C31E                                      JumpIfNegative .SunADDHLDEOppSGN    ;Signs are opposite there fore we can subtract to get difference
 303+ C31E FA 39 C3    >                        jp		m, .SunADDHLDEOppSGN
 304+ C321 78           .SunADDHLDESameSigns:   ld      a,b
 305+ C322 B2                                   or      d
 306+ C323                                      JumpIfNegative .SunADDHLDESameNeg   ; optimisation so we can just do simple add if both positive
 306+ C323 FA 2B C3    >                        jp		m, .SunADDHLDESameNeg
 307+ C326                                      JumpIfNegative .SunADDHLDESameNeg   ; optimisation so we can just do simple add if both positive
 307+ C326 FA 2B C3    >                        jp		m, .SunADDHLDESameNeg
 308+ C329 19                                   add     hl,de
 309+ C32A C9                                   ret
 310+ C32B 7C           .SunADDHLDESameNeg:     ld      a,h                         ; so if we enter here then signs are the same so we clear the 16th bit
 311+ C32C E6 7F                                and     SignMask8Bit                ; we could check the value of b for optimisation
 312+ C32E 67                                   ld      h,a
 313+ C32F 7A                                   ld      a,d
 314+ C330 E6 7F                                and     SignMask8Bit
 315+ C332 57                                   ld      d,a
 316+ C333 19                                   add     hl,de
 317+ C334 3E 80                                ld      a,SignOnly8Bit
 318+ C336 B4                                   or      h                           ; now set bit for negative value, we won't bother with overflow for now TODO
 319+ C337 67                                   ld      h,a
 320+ C338 C9                                   ret
 321+ C339 7C           .SunADDHLDEOppSGN:      ld      a,h                         ; so if we enter here then signs are the same so we clear the 16th bit                     ; here HL and DE are opposite
 322+ C33A E6 7F                                and     SignMask8Bit                ; we could check the value of b for optimisation
 323+ C33C 67                                   ld      h,a
 324+ C33D 7A                                   ld      a,d
 325+ C33E E6 7F                                and     SignMask8Bit
 326+ C340 57                                   ld      d,a
 327+ C341 B7                                   or      a
 328+ C342 ED 52                                sbc     hl,de
 329+ C344 38 04                                jr      c,.SunADDHLDEOppInvert
 330+ C346 78           .SunADDHLDEOppSGNNoCarry:   ld      a,b                         ; we got here so hl > de therefore we can just take hl's previous sign bit
 331+ C347 B4                                   or      h
 332+ C348 67                                   ld      h,a                         ; set the previou sign value
 333+ C349 C9                                   ret
 334+ C34A              .SunADDHLDEOppInvert:       NegHL                                                   ; we need to flip the sign and 2'c the Hl result
 334+ C34A AF          >                    xor a
 334+ C34B 95          >                    sub l
 334+ C34C 6F          >                    ld l,a
 334+ C34D 9F          >                    sbc a,a
 334+ C34E 94          >                    sub h
 334+ C34F 67          >                    ld h,a
 335+ C350 78                                   ld      a,b
 336+ C351 EE 80                                xor     SignOnly8Bit                ; flip sign bit
 337+ C353 B4                                   or      h
 338+ C354 67                                   ld      h,a                         ; recover sign
 339+ C355 C9                                   ret
 340+ C356
 341+ C356              ; we could cheat, flip the sign of DE and just add but its not very optimised
 342+ C356 7C           .SunSUBHLDESignedv3:        ld      a,h
 343+ C357 E6 80                                and     SignOnly8Bit
 344+ C359 47                                   ld      b,a                         ;save sign bit in b
 345+ C35A AA                                   xor     d                           ;if h sign and d sign were different then bit 7 of a will be 1 which means
 346+ C35B                                      JumpIfNegative .SunSUBHLDEOppSGN        ;Signs are opposite therefore we can add
 346+ C35B FA 89 C3    >                        jp		m, .SunSUBHLDEOppSGN
 347+ C35E 78           .SunSUBHLDESameSigns:       ld      a,b
 348+ C35F B2                                   or      d
 349+ C360                                      JumpIfNegative .SunSUBHLDESameNeg       ; optimisation so we can just do simple add if both positive
 349+ C360 FA 6A C3    >                        jp		m, .SunSUBHLDESameNeg
 350+ C363 B7                                   or      a
 351+ C364 ED 52                                sbc     hl,de
 352+ C366                                      JumpIfNegative .SunSUBHLDESameOvrFlw
 352+ C366 FA 7D C3    >                        jp		m, .SunSUBHLDESameOvrFlw
 353+ C369 C9                                   ret
 354+ C36A 7C           .SunSUBHLDESameNeg:         ld      a,h                         ; so if we enter here then signs are the same so we clear the 16th bit
 355+ C36B E6 7F                                and     SignMask8Bit                ; we could check the value of b for optimisation
 356+ C36D 67                                   ld      h,a
 357+ C36E 7A                                   ld      a,d
 358+ C36F E6 7F                                and     SignMask8Bit
 359+ C371 57                                   ld      d,a
 360+ C372 B7                                   or      a
 361+ C373 ED 52                                sbc     hl,de
 362+ C375                                      JumpIfNegative .SunSUBHLDESameOvrFlw
 362+ C375 FA 7D C3    >                        jp		m, .SunSUBHLDESameOvrFlw
 363+ C378 7C                                   ld      a,h                         ; now set bit for negative value, we won't bother with overflow for now TODO
 364+ C379 F6 80                                or      SignOnly8Bit
 365+ C37B 67                                   ld      h,a
 366+ C37C C9                                   ret
 367+ C37D              .SunSUBHLDESameOvrFlw:      NegHL                                                        ; we need to flip the sign and 2'c the Hl result
 367+ C37D AF          >                    xor a
 367+ C37E 95          >                    sub l
 367+ C37F 6F          >                    ld l,a
 367+ C380 9F          >                    sbc a,a
 367+ C381 94          >                    sub h
 367+ C382 67          >                    ld h,a
 368+ C383 78                                   ld      a,b
 369+ C384 EE 80                                xor     SignOnly8Bit                ; flip sign bit
 370+ C386 B4                                   or      h
 371+ C387 67                                   ld      h,a                         ; recover sign
 372+ C388 C9                                   ret
 373+ C389 B7           .SunSUBHLDEOppSGN:          or      a                                               ; here HL and DE are opposite so we can add the values
 374+ C38A 7C                                   ld      a,h                         ; so if we enter here then signs are the same so we clear the 16th bit
 375+ C38B E6 7F                                and     SignMask8Bit                ; we could check the value of b for optimisation
 376+ C38D 67                                   ld      h,a
 377+ C38E 7A                                   ld      a,d
 378+ C38F E6 7F                                and     SignMask8Bit
 379+ C391 57                                   ld      d,a
 380+ C392 19                                   add     hl,de
 381+ C393 78                                   ld      a,b                         ; we got here so hl > de therefore we can just take hl's previous sign bit
 382+ C394 B4                                   or      h
 383+ C395 67                                   ld      h,a                         ; set the previou sign value
 384+ C396 C9                                   ret
 385+ C397
 386+ C397
 387+ C397              .SunSBCHLDESigned:      JumpOnBitSet h,7,.SunSBCHLDEhlNeg
 387+ C397 CB 7C       >                        bit 	7,h
 387+ C399 C2 AA C3    >                        jp      nz,.SunSBCHLDEhlNeg
 388+ C39C              .SunSBCHLDEhlPos:       JumpOnBitSet h,7,.SunSBCHLDEhlNeg
 388+ C39C CB 7C       >                        bit 	7,h
 388+ C39E C2 AA C3    >                        jp      nz,.SunSBCHLDEhlNeg
 389+ C3A1 ED 52        .SunSBCHLDEhlPosDePos:  sbc     hl,de                           ; ignore overflow for now will sort later TODO
 390+ C3A3 C9                                   ret
 391+ C3A4 CB BA        .SunSBCHLDEhlPosDeNeg:  res     7,d
 392+ C3A6 19                                   add     hl,de                           ; ignore overflow for now will sort later TODO
 393+ C3A7 CB FA                                set     7,d
 394+ C3A9 C9                                   ret
 395+ C3AA CB BC        .SunSBCHLDEhlNeg:       res     7,h
 396+ C3AC                                      JumpOnBitSet d,7,.SunSBCHLDEhlNegdeNeg
 396+ C3AC CB 7A       >                        bit 	7,d
 396+ C3AE C2 B6 C3    >                        jp      nz,.SunSBCHLDEhlNegdeNeg
 397+ C3B1 ED 52        .SunSBCHLDEhlNegdePos:  sbc     hl,de                       ; ignore overflow for now will sort later TODO
 398+ C3B3 CB FC                                set     7,h
 399+ C3B5 C9                                   ret
 400+ C3B6 CB BA        .SunSBCHLDEhlNegdeNeg:      res     7,d
 401+ C3B8 19                                   add     hl,de                   ; ignore overflow for now will sort later TODO
 402+ C3B9 CB FA                                set     7,d
 403+ C3BB CB FC                                set     7,h
 404+ C3BD C9                                   ret
 405+ C3BE
 406+ C3BE
 407+ C3BE                                      include "./Universe/Sun/TransposeSunXX12BySunToSunXX15.asm"
# file opened: ././Universe/Sun/TransposeSunXX12BySunToSunXX15.asm
   1++C3BE              TransposeSXX12BySunToSXX15:
   2++C3BE 2A 6C C0                             ld		hl,(SBnKXX12xLo)					; get X into HL
   3++C3C1 7C                                   ld		a,h			                        ; get XX12 Sign
   4++C3C2 E6 80                                and		$80									; check sign bit on high byte
   5++C3C4 47                                   ld		b,a									; and put it in of 12xlo in b
   6++C3C5                                      ;110921 debugld      h,0
   7++C3C5 7C                                   ld      a,h
   8++C3C6 E6 7F                                and     $7F
   9++C3C8 67                                   ld      h,a
  10++C3C9                                      ;110921 debugld      h,0
  11++C3C9 ED 5B 10 C0                          ld		de,(SBnKxlo)						;
  12++C3CD 3A 12 C0                             ld		a,(SBnKxsgn)						; get Ship Pos (low,high,sign)
  13++C3D0 E6 80                                and		$80									; make sure we only have bit 7
  14++C3D2 4F                                   ld		c,a									; and put sign of unkxsgn c
  15++C3D3 CD 33 00                             call 	ADDHLDESignBC; XX12ProcessCalcHLPlusDESignBC		; this will result in HL = result and A = sign
  16++C3D6 B4                                   or		h									; combine sign in A with H to give 15 bit signed (*NOT* 2's c)
  17++C3D7 67                                   ld		h,a
  18++C3D8 22 66 C0                             ld		(SBnKXScaled),hl					; now write it out to XX15 X pos
  19++C3DB              ; ..................................
  20++C3DB 2A 6E C0                             ld		hl,(SBnKXX12yLo)					; Repeat above for Y coordinate
  21++C3DE 7C                                   ld		a,h
  22++C3DF E6 80                                and		$80
  23++C3E1 47                                   ld		b,a
  24++C3E2                                      ;110921 debugld      h,0
  25++C3E2 7C                                   ld      a,h
  26++C3E3 E6 7F                                and     $7F
  27++C3E5 67                                   ld      h,a
  28++C3E6                                      ;110921 debugld      h,0
  29++C3E6 ED 5B 13 C0                          ld		de,(SBnKylo)
  30++C3EA 3A 15 C0                             ld		a,(SBnKysgn)
  31++C3ED E6 80                                and		$80									; make sure we only have bit 7
  32++C3EF 4F                                   ld		c,a
  33++C3F0 CD 33 00                             call 	ADDHLDESignBC; XX12ProcessCalcHLPlusDESignBC
  34++C3F3 B4                                   or		h									; combine sign in A with H
  35++C3F4 67                                   ld		h,a
  36++C3F5 22 68 C0                             ld		(SBnKYScaled),hl
  37++C3F8              ; ..................................
  38++C3F8 2A 70 C0                             ld		hl,(SBnKXX12zLo)					; and now repeat for Z cooord
  39++C3FB 7C                                   ld		a,h
  40++C3FC E6 80                                and		$80
  41++C3FE 47                                   ld		b,a
  42++C3FF                                      ;110921 debugld      h,0
  43++C3FF 7C                                   ld      a,h
  44++C400 E6 7F                                and     $7F
  45++C402 67                                   ld      h,a
  46++C403                                      ;110921 debugld      h,0
  47++C403 ED 5B 16 C0                          ld		de,(SBnKzlo)
  48++C407 3A 18 C0                             ld		a,(SBnKzsgn)
  49++C40A E6 80                                and		$80									; make sure we only have bit 7
  50++C40C 4F                                   ld		c,a
  51++C40D CD 33 00                             call 	ADDHLDESignBC; XX12ProcessCalcHLPlusDESignBC
  52++C410 B4                                   or		h									; combine sign in A with H
  53++C411 67                                   ld		h,a
  54++C412 CB 7C                                bit		7,h                                 ; if sign if positive then we don't need to do the clamp so we ony jump
  55++C414 20 16                                jr		nz,.ClampZto4                        ; result was negative so we need to clamp to 4
  56++C416 E6 7F                                and     $7F                                 ; a = value unsigned
  57++C418 20 06                                jr      nz,.NoClampZto4                      ; if high byte was 0 then we could need to clamp still by this stage its +v but and will set z flag if high byte is zero
  58++C41A 7D                                   ld      a,l                                 ; get low byte now
  59++C41B                                      JumpIfALTNusng 4,.ClampZto4					; if its < 4 then fix at 4
  59++C41B FE 04       >                        cp      4
  59++C41D DA 2C C4    >                        jp		c, .ClampZto4
  60++C420 22 6A C0     .NoClampZto4:           ld		(SBnKZScaled),hl					; hl = signed calculation and > 4
  61++C423 7D                                   ld		a,l									; in addition write out the z cooord to UT for now for backwards compat (DEBUG TODO remove later)
  62++C424 32 D2 7F                             ld      (varT),a
  63++C427 7C                                   ld		a,h
  64++C428 32 B5 7F                             ld      (varU),a
  65++C42B C9                                   ret
  66++C42C              ; This is where we limit 4 to a minimum of 4
  67++C42C 21 04 00     .ClampZto4:             ld		hl,4
  68++C42F 22 6A C0                             ld		(SBnKZScaled),hl; BODGE FOR NOW
  69++C432 7D                                   ld		a,l
  70++C433 32 D2 7F                             ld      (varT),a                            ;                                                                           ;;;
  71++C436 7C                                   ld		a,h
  72++C437 32 B5 7F                             ld      (varU),a 						; compatibility for now
  73++C43A C9                                   ret
  74++C43B
# file closed: ././Universe/Sun/TransposeSunXX12BySunToSunXX15.asm
 408+ C43B
 409+ C43B
 410+ C43B ED 4B 6A C0  ScaleSunTo8Bit:			ld			bc,(SBnKZScaled)
 411+ C43F 2A 66 C0                             ld			hl,(SBnKXScaled)
 412+ C442 ED 5B 68 C0                          ld			de,(SBnKYScaled)
 413+ C446 78           .SetABSbc:              ld			a,b
 414+ C447 DD 67                                ld			ixh,a
 415+ C449 E6 7F                                and			SignMask8Bit
 416+ C44B 47                                   ld			b,a									; bc = ABS bc
 417+ C44C 7C           .SetABShl:              ld			a,h
 418+ C44D DD 6F                                ld			ixl,a
 419+ C44F E6 7F                                and			SignMask8Bit
 420+ C451 67                                   ld			h,a									; hl = ABS hl
 421+ C452 7A           .SetABSde:              ld			a,d
 422+ C453 FD 67                                ld			iyh,a
 423+ C455 E6 7F                                and			SignMask8Bit
 424+ C457 57                                   ld			d,a									; de = ABS de
 425+ C458 78           .ScaleNodeTo8BitLoop:   ld          a,b		                            ; U	\ z hi
 426+ C459 B4                                   or			h                                   ; XX15+1	\ x hi
 427+ C45A B2                                   or			d                                   ; XX15+4	\ y hi
 428+ C45B 28 0F                                jr          z,.ScaleNodeDone                   ; if X, Y, Z = 0  exit loop down once hi U rolled to 0
 429+ C45D                                      ShiftHLRight1
 429+ C45D CB 3C       >			   srl h
 429+ C45F CB 1D       >			   rr  l
 430+ C461                                      ShiftDERight1
 430+ C461 CB 3A       >			   srl d
 430+ C463 CB 1B       >			   rr  e
 431+ C465                                      ShiftBCRight1
 431+ C465 CB 38       >			   srl b
 431+ C467 CB 19       >			   rr  c
 432+ C469 C3 58 C4                             jp          .ScaleNodeTo8BitLoop
 433+ C46C              ; now we have scaled values we have to deal with sign
 434+ C46C DD 7C        .ScaleNodeDone:          ld			a,ixh								; get sign bit and or with b
 435+ C46E E6 80                                and			SignOnly8Bit
 436+ C470 B0                                   or			b
 437+ C471 47                                   ld			b,a
 438+ C472 DD 7D        .SignforHL:              ld			a,ixl								; get sign bit and or with b
 439+ C474 E6 80                                and			SignOnly8Bit
 440+ C476 B4                                   or			h
 441+ C477 67                                   ld			h,a
 442+ C478 FD 7C        .SignforDE:              ld			a,iyh								; get sign bit and or with b
 443+ C47A E6 80                                and			SignOnly8Bit
 444+ C47C B2                                   or			d
 445+ C47D 57                                   ld			d,a
 446+ C47E ED 43 6A C0  .SignsDoneSaveResult:	ld			(SBnKZScaled),bc
 447+ C482 22 66 C0                             ld			(SBnKXScaled),hl
 448+ C485 ED 53 68 C0                          ld			(SBnKYScaled),de
 449+ C489 78                                   ld			a,b
 450+ C48A 32 B5 7F                             ld			(varU),a
 451+ C48D 79                                   ld			a,c
 452+ C48E 32 D2 7F                             ld			(varT),a
 453+ C491 C9                                   ret
 454+ C492
 455+ C492              ;--------------------------------------------------------------------------------------------------------
 456+ C492              ;;;;X = normal scale
 457+ C492              ;;;;ZtempHi = zhi
 458+ C492              ;;;;......................................................
 459+ C492              ;;;; if ztemp hi <> 0                                   ::Scale Object Distance
 460+ C492              ;;;;  Loop                                              ::LL90
 461+ C492              ;;;;     inc X
 462+ C492              ;;;;     divide X, Y & ZtempHiLo by 2
 463+ C492              ;;;;  Until ZtempHi = 0
 464+ C492              ;;;;......................................................
 465+ C492              ;-LL21---------------------------------------------------------------------------------------------------
 466+ C492              ;                        include "./Universe/NormaliseTransMat.asm"
 467+ C492              ;-LL91---------------------------------------------------------------------------------------------------
 468+ C492
 469+ C492              ; Now we have
 470+ C492              ;   * XX18(2 1 0) = (x_sign x_hi x_lo)
 471+ C492              ;   * XX18(5 4 3) = (y_sign y_hi y_lo)
 472+ C492              ;   * XX18(8 7 6) = (z_sign z_hi z_lo)
 473+ C492              ;
 474+ C492              ;--------------------------------------------------------------------------------------------------------
 475+ C492              ;--------------------------------------------------------------------------------------------------------
 476+ C492              ;   XX12(1 0) = [x y z] . sidev  = (dot_sidev_sign dot_sidev_lo)  = dot_sidev
 477+ C492              ;   XX12(3 2) = [x y z] . roofv  = (dot_roofv_sign dot_roofv_lo)  = dot_roofv
 478+ C492              ;   XX12(5 4) = [x y z] . nosev  = (dot_nosev_sign dot_nosev_lo)  = dot_nosev
 479+ C492              ; Returns
 480+ C492              ;
 481+ C492              ;   XX12(1 0)            The dot product of [x y z] vector with the sidev (or _x)
 482+ C492              ;                        vector, with the sign in XX12+1 and magnitude in XX12
 483+ C492              ;
 484+ C492              ;   XX12(3 2)            The dot product of [x y z] vector with the roofv (or _y)
 485+ C492              ;                        vector, with the sign in XX12+3 and magnitude in XX12+2
 486+ C492              ;
 487+ C492              ;   XX12(5 4)            The dot product of [x y z] vector with the nosev (or _z)
 488+ C492              ;                        vector, with the sign in XX12+5 and magnitude in XX12+4
 489+ C492
 490+ C492
 491+ C492               ; TESTEDOK
 492+ C492              ;SXX12DotOneRow:
 493+ C492              ;SXX12CalcX:              N0equN1byN2div256 varT, (hl), (SBnKXScaled)       ; T = (hl) * regSunXX15fx /256
 494+ C492              ;                        inc     hl                                  ; move to sign byte
 495+ C492              ;SXX12CalcXSign:          AequN1xorN2 SBnKXScaledSign,(hl)             ;
 496+ C492              ;                        ld      (varS),a                            ; Set S to the sign of x_sign * sidev_x
 497+ C492              ;                        inc     hl
 498+ C492              ;SXX12CalcY:              N0equN1byN2div256 varQ, (hl),(SBnKYScaled)       ; Q = XX16 * SunXX15 /256 using varQ to hold regSunXX15fx
 499+ C492              ;                        ldCopyByte varT,varR                        ; R = T =  |sidev_x| * x_lo / 256
 500+ C492              ;                        inc     hl
 501+ C492              ;                        AequN1xorN2 SBnKYScaledSign,(hl)             ; Set A to the sign of y_sign * sidev_y
 502+ C492              ;; (S)A = |sidev_x| * x_lo / 256  = |sidev_x| * x_lo + |sidev_y| * y_lo
 503+ C492              ;SSTequSRplusAQ           push    hl
 504+ C492              ;                        call    baddll38                            ; JSR &4812 \ LL38   \ BADD(S)A=R+Q(SA) \ 1byte add (subtract)
 505+ C492              ;                        pop     hl
 506+ C492              ;                        ld      (varT),a                            ; T = |sidev_x| * x_lo + |sidev_y| * y_lo
 507+ C492              ;                        inc     hl
 508+ C492              ;SXX12CalcZ:              N0equN1byN2div256 varQ,(hl),(SBnKZScaled)       ; Q = |sidev_z| * z_lo / 256
 509+ C492              ;                        ldCopyByte varT,varR                        ; R = |sidev_x| * x_lo + |sidev_y| * y_lo
 510+ C492              ;                        inc     hl
 511+ C492              ;                        AequN1xorN2 SBnKZScaledSign,(hl)             ; A = sign of z_sign * sidev_z
 512+ C492              ;; (S)A= |sidev_x| * x_lo + |sidev_y| * y_lo + |sidev_z| * z_lo
 513+ C492              ;                        call    baddll38                            ; JSR &4812 \ LL38   \ BADD(S)A=R+Q(SA)   \ 1byte add (subtract)
 514+ C492              ;; Now we exit with A = result S = Sign
 515+ C492              ;                        ret
 516+ C492
 517+ C492
 518+ C492
 519+ C492              ;--------------------------------------------------------------------------------------------------------
 520+ C492                                      include "./Universe/Sun/CopySunXX12ScaledToSunXX18.asm"
# file opened: ././Universe/Sun/CopySunXX12ScaledToSunXX18.asm
   1++C492              CopySXX12ScaledToSXX18:
   2++C492              CopyResultToSDrawCam:
   3++C492                      ldCopyByte SXX12         ,SXX18             ; XX12+0 => XX18+0  Set XX18(2 0) = dot_sidev
   3++C492 3A 6C C0    >                        ld       a,(SXX12)
   3++C495 32 5A C0    >                        ld       (SXX18),a
   4++C498                      ldCopyByte SXX12+1       ,SXX18+2           ; XX12+1 => XX18+2
   4++C498 3A 6D C0    >                        ld       a,(SXX12+1)
   4++C49B 32 5C C0    >                        ld       (SXX18+2),a
   5++C49E                      ldCopyByte SXX12+2       ,SXX18+3           ; XX12+2 => XX18+3  Set XX12+1 => XX18+2
   5++C49E 3A 6E C0    >                        ld       a,(SXX12+2)
   5++C4A1 32 5D C0    >                        ld       (SXX18+3),a
   6++C4A4                      ldCopyByte SXX12+3       ,SXX18+5           ; XX12+3 => XX18+5
   6++C4A4 3A 6F C0    >                        ld       a,(SXX12+3)
   6++C4A7 32 5F C0    >                        ld       (SXX18+5),a
   7++C4AA                      ldCopyByte SXX12+4       ,SXX18+6           ; XX12+4 => XX18+6  Set XX18(8 6) = dot_nosev
   7++C4AA 3A 70 C0    >                        ld       a,(SXX12+4)
   7++C4AD 32 60 C0    >                        ld       (SXX18+6),a
   8++C4B0                      ldCopyByte SXX12+5       ,SXX18+8           ; XX12+5 => XX18+8
   8++C4B0 3A 71 C0    >                        ld       a,(SXX12+5)
   8++C4B3 32 62 C0    >                        ld       (SXX18+8),a
   9++C4B6 C9                   ret
  10++C4B7
# file closed: ././Universe/Sun/CopySunXX12ScaledToSunXX18.asm
 521+ C4B7              ;                        include "./Variables/CopySunXX12toSunXX15.asm"
 522+ C4B7              ;                       include "./Variables/CopySunXX18toSunXX15.asm"
 523+ C4B7              ;                       include "./Variables/CopySunXX18ScaledToSunXX15.asm"
 524+ C4B7              ;                       include "./Variables/CopySunXX12ToScaled.asm"
 525+ C4B7              ;--------------------------------------------------------------------------------------------------------
 526+ C4B7              ;                        include "./Maths/Utilities/DotProductXX12SunXX15.asm"
 527+ C4B7              ;--------------------------------------------------------------------------------------------------------
 528+ C4B7
 529+ C4B7 DD 25        ScaleDownSXX15byIXH:    dec     ixh
 530+ C4B9 F8                                   ret     m
 531+ C4BA 21 66 C0                             ld      hl,SBnKXScaled
 532+ C4BD CB 3E                                srl     (hl)                        ; SunXX15  \ xnormal lo/2 \ LL93+3 \ counter X
 533+ C4BF 23                                   inc     hl                          ; looking at SunXX15 x sign now
 534+ C4C0 23                                   inc     hl                          ; looking at SunXX15 y Lo now
 535+ C4C1 CB 3E                                srl     (hl)                        ; SunXX15+2    \ ynormal lo/2
 536+ C4C3 23                                   inc     hl                          ; looking at SunXX15 y sign now
 537+ C4C4 23                                   inc     hl                          ; looking at SunXX15 z Lo now
 538+ C4C5 CB 3E                                srl     (hl)
 539+ C4C7 C3 B7 C4                             jp      ScaleDownSXX15byIXH
 540+ C4CA C9                                   ret
 541+ C4CB
 542+ C4CB 21 5A C0     DivideSXX18By2:         ld      hl,SBnKDrawCam0xLo
 543+ C4CE CB 3E                                srl     (hl)                        ; XX18  \ xnormal lo/2 \ LL93+3 \ counter X
 544+ C4D0 23                                   inc     hl                          ; looking at XX18 x sign now
 545+ C4D1 23                                   inc     hl                          ; looking at XX18 y Lo now
 546+ C4D2 CB 3E                                srl     (hl)                        ; XX18+2    \ ynormal lo/2
 547+ C4D4 23                                   inc     hl                          ; looking at XX18 y sign now
 548+ C4D5 23                                   inc     hl                          ; looking at XX18 z Lo now
 549+ C4D6 CB 3E                                srl     (hl)
 550+ C4D8 C9                                   ret
 551+ C4D9
 552+ C4D9              ; ......................................................                                                         ;;;
 553+ C4D9
 554+ C4D9
 555+ C4D9
 556+ C4D9
 557+ C4D9              ; Pitch and roll are 2 phases
 558+ C4D9              ; 1 - we apply our pitch and roll to the ship position
 559+ C4D9              ;       x -> x + alpha * (y - alpha * x)
 560+ C4D9              ;       y -> y - alpha * x - beta * z
 561+ C4D9              ;       z -> z + beta * (y - alpha * x - beta * z)
 562+ C4D9              ; which can be simplified as:
 563+ C4D9              ;       1. K2 = y - alpha * x
 564+ C4D9              ;       2. z = z + beta * K2
 565+ C4D9              ;       3. y = K2 - beta * z
 566+ C4D9              ;       4. x = x + alpha * y
 567+ C4D9              ; 2 - we apply our patch and roll to the ship orientation
 568+ C4D9              ;      Roll calculations:
 569+ C4D9              ;
 570+ C4D9              ;        nosev_y = nosev_y - alpha * nosev_x_hi
 571+ C4D9              ;        nosev_x = nosev_x + alpha * nosev_y_hi
 572+ C4D9              ;      Pitch calculations:
 573+ C4D9              ;
 574+ C4D9              ;        nosev_y = nosev_y - beta * nosev_z_hi
 575+ C4D9              ;        nosev_z = nosev_z + beta * nosev_y_hi
 576+ C4D9
 577+ C4D9
 578+ C4D9                          INCLUDE "./Universe/Sun/SunApplyMyRollAndPitch.asm"
# file opened: ././Universe/Sun/SunApplyMyRollAndPitch.asm
   1++C4D9
   2++C4D9              ; Full version
   3++C4D9              ; 1. K2 = y - alpha * x
   4++C4D9              ; 2. z = z + beta * K2
   5++C4D9              ; 3. y = K2 - beta * z
   6++C4D9              ; 4. x = x + alpha * y
   7++C4D9
   8++C4D9
   9++C4D9
  10++C4D9              ; SunrollWork holds Alpha intermidate results
  11++C4D9              ;  1. K2 = y - alpha * x
  12++C4D9              ;  2. z = z + beta * K2
  13++C4D9              ;  3. y = K2 - beta * z
  14++C4D9              ;  4. x = x + alpha * y
  15++C4D9              ;.... or
  16++C4D9              ;  2. z = z + (beta * (y - alpha * x))
  17++C4D9              ;  3. y = (y - alpha * x) - (beta * z)
  18++C4D9              ;  4. x = x + (alpha * y)
  19++C4D9
  20++C4D9
  21++C4D9              ;----------------------------------------------------------------------------------------------------------------------------------
  22++C4D9              ; Sun version of pitch and roll is a 24 bit calculation 1 bit sign + 23 bit value
  23++C4D9              ; Need to write a test routine for roll and pitchs
  24++C4D9              ; Minsky Roll       Minsky Pitch
  25++C4D9              ;  y -= alpha * x    y -= beta * z
  26++C4D9              ;  x += alpha * y    z += beta * y
  27++C4D9              ; or once combined
  28++C4D9              ;   1. K2 = y - alpha * x
  29++C4D9              ;   2. z = z + beta * K2
  30++C4D9              ;   3. y = K2 - beta * z
  31++C4D9              ;   4. x = x + alpha * y
  32++C4D9              ;----------------------------------------------------------------------------------------------------------------------------------
  33++C4D9              ; Based on non optimised version of Sun pitch and roll is a 24 bit calculation 1 bit sign + 23 bit value
  34++C4D9              ; Now at least rolls the correct direction
  35++C4D9 00 00 00 00  SunAlphaMulX                DB $00,$00, $00, $00
  36++C4DD 00 00 00 00  SunAlphaMulY                DB $00,$00, $00, $00
  37++C4E1 00 00 00 00  SunAlphaMulZ                DB $00,$00, $00, $00
  38++C4E5 00 00 00 00  SunBetaMulZ                 DB $00,$00, $00, $00
  39++C4E9 00 00 00 00  SunBetaMulY                 DB $00,$00, $00, $00
  40++C4ED 00 00 00     SunK2                       DS 3
  41++C4F0
  42++C4F0 3A CF 7E     SunApplyMyRollAndPitch: 	ld      a,(ALPHA)                   ; no roll or pitch, no calc needed
  43++C4F3 A7           .CheckForRoll:              and		a
  44++C4F4 C4 1C C5     							call	nz,Sun_Roll
  45++C4F7 3A C2 7E     .CheckForPitch:				ld		a,(BETA)
  46++C4FA A7           							and		a
  47++C4FB C4 82 C5     							call	nz,Sun_Pitch
  48++C4FE 3A B0 7F     .ApplySpeed:            	ld      a,(DELTA)                   ; BCH = - Delta
  49++C501              							ReturnIfAIsZero
  49++C501 A7          >                        and     a
  49++C502 C8          >                        ret     z
  50++C503 0E 00        							ld      c,0                         ;
  51++C505 67           							ld      h,a                         ;
  52++C506 06 80        							ld      b,$80                       ;
  53++C508 ED 5B 17 C0  							ld      de,(SBnKzhi)                ; DEL = z position
  54++C50C 3A 16 C0     							ld      a,(SBnKzlo)                 ; .
  55++C50F 6F           							ld      l,a                         ; .
  56++C510 CD 14 01     							call    AddBCHtoDELsigned           ; update speed
  57++C513 ED 53 17 C0  							ld      (SBnKzhi),DE                ; write back to zpos
  58++C517 7D           							ld      a,l
  59++C518 32 16 C0     							ld      (SBnKzlo),a                ;
  60++C51B C9           							ret
  61++C51C              ; Performs minsky rotation
  62++C51C              ; Joystick left          Joystick right
  63++C51C              ; ---------------------  ---------------------
  64++C51C              ; x :=  x      + y / 64  x :=  x -  y / 64  so rather than /64  is z * alpha / 256
  65++C51C              ; y :=  y      - x /64   y :=  y +  x / 64
  66++C51C              ;
  67++C51C              ; Joystick down          Joystick up
  68++C51C              ; ---------------------  ---------------------
  69++C51C              ; y :=  y      + z / 64  y :=  y - z / 64
  70++C51C              ; z :=  z      - y / 64  z :=  z + y / 64
  71++C51C              ;
  72++C51C              ; get z, multiply by alpha, pick top 3 bytes with sign
  73++C51C              ; get x, multiply by alpha, pick top 3 bytes with sign
  74++C51C              ; if alpha +ve subtract x = x - z adj, z =z + x adj , else x += z adj z -= z adj
  75++C51C 3A CF 7E     Sun_Roll:				    ld      a,(ALPHA)                   ; get roll value
  76++C51F E6 7F        							and 	$7F
  77++C521 57           							ld      d,a                         ; .
  78++C522 3A 13 C0     							ld      a,(SBnKylo)                ; HLE = x sgn, hi, lo
  79++C525 5F           							ld      e,a                         ; .
  80++C526 2A 14 C0     							ld      hl,(SBnKyhi)               ; .
  81++C529 CD 17 93     							call    mulHLEbyDSigned             ; DELC = x * alpha, so DEL = X * -alpha / 256
  82++C52C 7D           							ld		a,l
  83++C52D 32 DD C4     							ld		(SunAlphaMulY),a			; save result
  84++C530 ED 53 DE C4  							ld		(SunAlphaMulY+1),de		; save result
  85++C534 3A CF 7E     							ld      a,(ALPHA)                   ; get roll value
  86++C537 E6 7F        							and 	$7F
  87++C539 57           							ld      d,a                         ; .
  88++C53A 3A 10 C0     							ld      a,(SBnKxlo)                ; HLE = x sgn, hi, lo
  89++C53D 5F           							ld      e,a                         ; .
  90++C53E 2A 11 C0     							ld      hl,(SBnKxhi)               ; .
  91++C541 CD 17 93     							call    mulHLEbyDSigned             ; DELC = x * alpha, so DEL = X * -alpha / 256
  92++C544 7D           							ld		a,l
  93++C545 32 D9 C4     							ld		(SunAlphaMulX),a			; save result
  94++C548 ED 53 DA C4  							ld		(SunAlphaMulX+1),de		; save result
  95++C54C 3A CF 7E     							ld		a,(ALPHA)
  96++C54F E6 80        							and		$80
  97++C551 CA 6B C5     							jp		z,.RollingRight
  98++C554 DD 21 10 C0  .RollingLeft:				ld		ix,SBnKxlo
  99++C558 FD 21 DD C4  							ld		iy,SunAlphaMulY
 100++C55C CD 90 00     							call	AddAtIXtoAtIY24Signed
 101++C55F DD 21 13 C0  							ld		ix,SBnKylo
 102++C563 FD 21 D9 C4  							ld		iy,SunAlphaMulX
 103++C567 CD CD 00     							call	SubAtIXtoAtIY24Signed
 104++C56A C9           							ret
 105++C56B DD 21 10 C0  .RollingRight:				ld		ix,SBnKxlo
 106++C56F FD 21 DD C4  							ld		iy,SunAlphaMulY
 107++C573 CD CD 00     							call	SubAtIXtoAtIY24Signed
 108++C576 DD 21 13 C0  							ld		ix,SBnKylo
 109++C57A FD 21 D9 C4  							ld		iy,SunAlphaMulX
 110++C57E CD 90 00     							call	AddAtIXtoAtIY24Signed
 111++C581 C9           							ret
 112++C582
 113++C582 3A C2 7E     Sun_Pitch:				    ld      a,(BETA)                   ; get roll value
 114++C585 E6 7F        							and 	$7F
 115++C587 57           							ld      d,a                         ; .
 116++C588 3A 13 C0     							ld      a,(SBnKylo)                ; HLE = x sgn, hi, lo
 117++C58B 5F           							ld      e,a                         ; .
 118++C58C 2A 14 C0     							ld      hl,(SBnKyhi)               ; .
 119++C58F CD 17 93     							call    mulHLEbyDSigned             ; DELC = x * alpha, so DEL = X * -alpha / 256
 120++C592 7D           							ld		a,l
 121++C593 32 E9 C4     							ld		(SunBetaMulY),a			; save result
 122++C596 ED 53 EA C4  							ld		(SunBetaMulY+1),de		; save result
 123++C59A 3A C2 7E     							ld      a,(BETA)                   ; get roll value
 124++C59D E6 7F        							and 	$7F
 125++C59F 57           							ld      d,a                         ; .
 126++C5A0 3A 16 C0     							ld      a,(SBnKzlo)                ; HLE = x sgn, hi, lo
 127++C5A3 5F           							ld      e,a                         ; .
 128++C5A4 2A 17 C0     							ld      hl,(SBnKzhi)               ; .
 129++C5A7 CD 17 93     							call    mulHLEbyDSigned             ; DELC = x * alpha, so DEL = X * -alpha / 256
 130++C5AA 7D           							ld		a,l
 131++C5AB 32 E5 C4     							ld		(SunBetaMulZ),a			; save result
 132++C5AE ED 53 E6 C4  							ld		(SunBetaMulZ+1),de		; save result
 133++C5B2 3A C2 7E     							ld		a,(BETA)
 134++C5B5 E6 80        							and		$80
 135++C5B7 CA D1 C5     							jp		z,.Climbing
 136++C5BA DD 21 13 C0  .Diving:					ld		ix,SBnKylo
 137++C5BE FD 21 E5 C4  							ld		iy,SunBetaMulZ
 138++C5C2 CD 90 00     							call	AddAtIXtoAtIY24Signed
 139++C5C5 DD 21 16 C0  							ld		ix,SBnKzlo
 140++C5C9 FD 21 E9 C4  							ld		iy,SunBetaMulY
 141++C5CD CD CD 00     							call	SubAtIXtoAtIY24Signed
 142++C5D0 C9           							ret
 143++C5D1 DD 21 13 C0  .Climbing:		     		ld		ix,SBnKylo
 144++C5D5 FD 21 E5 C4  							ld		iy,SunBetaMulZ
 145++C5D9 CD CD 00     							call	SubAtIXtoAtIY24Signed
 146++C5DC DD 21 16 C0  							ld		ix,SBnKzlo
 147++C5E0 FD 21 E9 C4  							ld		iy,SunBetaMulY
 148++C5E4 CD 90 00     							call	AddAtIXtoAtIY24Signed
 149++C5E7 C9           							ret
# file closed: ././Universe/Sun/SunApplyMyRollAndPitch.asm
 579+ C5E8              ;            INCLUDE "./Universe/SunApplyShipRollAndPitch.asm"
 580+ C5E8
 581+ C5E8 00           SunOnScreen             DB 0
 582+ C5E9 00 00        cLineArrayPtr            DW 0
 583+ C5EB 00           LineCount               DB 0
 584+ C5EC 00           RaggedSize              DB 0
 585+ C5ED 00           MinYOffset              DB 0
 586+ C5EE 00           MaxYOffSet              DB 0
 587+ C5EF 00 00        SunScrnX                DW  0       ; signed
 588+ C5F1 00 00        SunScrnY                DW  0       ; signed
 589+ C5F3 00           SunRadius               DB  0       ; unsigned
 590+ C5F4              ; draw circle
 591+ C5F4
 592+ C5F4              ;
 593+ C5F4              ;DIVD3B2 K(3 2 1 0) = (A P+1 P) / (z_sign z_hi z_lo)
 594+ C5F4
 595+ C5F4 00 00 00 00  SunVarK                 DS 4
 596+ C5F8 00 00 00     SunVarP                 DS 3
 597+ C5FB 00           SunVarQ                 DS 1
 598+ C5FC 00           SunVarR                 DS 1
 599+ C5FD 00           SunVarS                 DS 1
 600+ C5FE 00           SunVarT                 DS 1
 601+ C5FF
 602+ C5FF              ; Optimisation
 603+ C5FF              ; if a <> 0
 604+ C5FF              ;       divide AH by CD
 605+ C5FF              ; if h <> 0
 606+ C5FF              ;      if c <> 0 return 0
 607+ C5FF              ;      else
 608+ C5FF              ;        divide HL by DE
 609+ C5FF              ; if l <>0
 610+ C5FF              ;      if c or d <> 0 return 0
 611+ C5FF              ;      else
 612+ C5FF              ;        divide l by e
 613+ C5FF              ;
 614+ C5FF 47           SunAHLequAHLDivCDE:     ld      b,a                         ; save a reg
 615+ C600 79                                   ld      a,c                         ; check for divide by zero
 616+ C601 B2                                   or      d                           ; .
 617+ C602 B3                                   or      e                           ; .
 618+ C603                                      JumpIfZero      .divideByZero       ; .
 618+ C603 CA 1C C6    >                        jp	z,.divideByZero
 619+ C606 78                                   ld      a,b                         ; get a back
 620+ C607                                      JumpIfAIsNotZero    .divideAHLbyCDE
 620+ C607 A7          >                        and     a
 620+ C608 C2 23 C6    >                        jp	    nz,.divideAHLbyCDE
 621+ C60B 7C           .AIsZero:               ld      a,h
 622+ C60C                                      JumpIfAIsNotZero    .divideHLbyDE
 622+ C60C A7          >                        and     a
 622+ C60D C2 2A C6    >                        jp	    nz,.divideHLbyDE
 623+ C610 7D           .HIsZero:               ld      a,l
 624+ C611                                      JumpIfAIsNotZero    .divideLbyE
 624+ C611 A7          >                        and     a
 624+ C612 C2 39 C6    >                        jp	    nz,.divideLbyE
 625+ C615              .resultIsZero:          ZeroA
 625+ C615 AF          >                        xor a
 626+ C616 67                                   ld      h,a                        ; result is zero so set hlde
 627+ C617 6F                                   ld      l,a                        ; result is zero so set hlde
 628+ C618 54 5D                                ld      de,hl
 629+ C61A                                      ClearCarryFlag
 629+ C61A B7          >                        or a
 630+ C61B C9                                   ret
 631+ C61C 3E FF        .divideByZero:          ld      a,$FF
 632+ C61E 67                                   ld      h,a
 633+ C61F 6F                                   ld      l,a
 634+ C620 54 5D                                ld      de,hl
 635+ C622                                      SetCarryFlag
 635+ C622 37          >                        scf
 636+ C623              ; AHL = ahl/cde, this could be a genuine 24 bit divide
 637+ C623              ; if AHL is large and cde small then the value will be big so will be off screen so we can risk 16 bit divide
 638+ C623 CD F4 90     .divideAHLbyCDE:        call    Div24by24
 639+ C626 EB                                   ex      hl,de                         ; ahl is result
 640+ C627 79                                   ld      a,c                           ; ahl is result
 641+ C628                                      ClearCarryFlag
 641+ C628 B7          >                        or a
 642+ C629
 643+ C629 C9                                   ret
 644+ C62A              ; AHL = 0hl/0de as A is zero
 645+ C62A 79           .divideHLbyDE:          ld      a,c                         ;'if c = 0 then result must be zero
 646+ C62B                                      JumpIfAIsNotZero   .resultIsZero
 646+ C62B A7          >                        and     a
 646+ C62C C2 15 C6    >                        jp	    nz,.resultIsZero
 647+ C62F 44 4D                                ld      bc,hl
 648+ C631 CD E2 97                             call    BC_Div_DE                   ; BC = HL/DE
 649+ C634 60 69                                ld      hl,bc
 650+ C636                                      ZeroA                               ; so we can set A to Zero
 650+ C636 AF          >                        xor a
 651+ C637                                      ClearCarryFlag
 651+ C637 B7          >                        or a
 652+ C638 C9                                   ret
 653+ C639              ; AHL = 00l/00e as A and H are zero
 654+ C639 79           .divideLbyE:            ld      a,c                         ; if d = 0 then result must be zero
 655+ C63A B2                                   or      d
 656+ C63B                                      JumpIfAIsNotZero   .resultIsZero
 656+ C63B A7          >                        and     a
 656+ C63C C2 15 C6    >                        jp	    nz,.resultIsZero
 657+ C63F 4B                                   ld      c,e
 658+ C640 5D                                   ld      e,l
 659+ C641 CD A4 97                             call    E_Div_C
 660+ C644 6F                                   ld      l,a
 661+ C645                                      ZeroA
 661+ C645 AF          >                        xor a
 662+ C646 67                                   ld      h,a
 663+ C647                                      ClearCarryFlag
 663+ C647 B7          >                        or a
 664+ C648 C9                                   ret
 665+ C649
 666+ C649
 667+ C649              ; Needs tuning for registers vs memroy
 668+ C649 22 F8 C5     SunKEquAHLDivCDE:       ld      (SunVarP),hl
 669+ C64C 32 FA C5                             ld      (SunVarP+2),a
 670+ C64F ED 53 FB C5                          ld      (SunVarQ),de
 671+ C653 79                                   ld      a,c
 672+ C654 32 FD C5                             ld      (SunVarS),a
 673+ C657 3A F8 C5     SunDivD3B:              ld      a,(SunVarP)                 ; Ensure P is at least 1
 674+ C65A F6 01                                or      1
 675+ C65C 32 F8 C5                             ld      (SunVarP),a
 676+ C65F 3A FA C5                             ld      a,(SunVarP+2)               ; T = Sign xor Sign
 677+ C662 21 FD C5                             ld      hl,SunVarS
 678+ C665 AE                                   xor     (hl)
 679+ C666 E6 80                                and     SignOnly8Bit
 680+ C668 32 FE C5                             ld      (SunVarT),a
 681+ C66B 06 00                                ld      b,0                         ; b = y counter
 682+ C66D 3A FA C5                             ld      a,(SunVarP+2)               ; a = abs high byte of p
 683+ C670 E6 7F                                and     SignMask8Bit                ; .
 684+ C672 2A F8 C5                             ld      hl,(SunVarP)                ; shift P left
 685+ C675              .SunDVL9:               JumpIfAGTENusng   64, .SunDV14      ; if high p > 64 then go to DV14
 685+ C675 FE 40       >                        cp     64
 685+ C677 D2 84 C6    >                        jp		nc,.SunDV14
 686+ C67A                                      ShiftHLLeft1                        ;
 686+ C67A CB 25       >			   sla l
 686+ C67C CB 14       >			   rl  h
 687+ C67E CB 17                                rl      a                           ;
 688+ C680 04                                   inc     b                           ; increase shift count
 689+ C681 C3 75 C6                             jp      .SunDVL9
 690+ C684 22 F8 C5     .SunDV14:               ld      (SunVarP),hl                ; save off var P
 691+ C687 32 FA C5                             ld      (SunVarP+2),a
 692+ C68A 3A FD C5                             ld      a,(SunVarS)                 ; a= ABS varS
 693+ C68D E6 7F                                and     SignMask8Bit
 694+ C68F 2A FB C5                             ld      hl,(SunVarQ)                ; HL = vars Q & R
 695+ C692 05           .SunDVL6:               dec     b                           ; reduce b counter by 1
 696+ C693                                      ShiftHLLeft1                        ; varQRA  shift left
 696+ C693 CB 25       >			   sla l
 696+ C695 CB 14       >			   rl  h
 697+ C697 CB 17                                rl      a                           ;
 698+ C699 F2 92 C6                             jp      p, .SunDVL6                 ; keep shifting until bit 7 of a is set
 699+ C69C 22 FB C5                             ld      (SunVarQ),hl                ; save QR
 700+ C69F 32 FD C5     .SunDV9:                ld      (SunVarS),a                 ; save S
 701+ C6A2                                      ;ld      a,h
 702+ C6A2                                      ;ld      (varQ),a
 703+ C6A2 4F                                   ld      c,a
 704+ C6A3 3A FA C5                             ld      a,(SunVarP+2)
 705+ C6A6 C5                                   push    bc                          ; save shift counter in b
 706+ C6A7 CD 56 97                             call    DIV16Amul256dCUNDOC
 707+ C6AA                                      ;call    RequAmul256divQ
 708+ C6AA 79                                   ld      a, c
 709+ C6AB 32 B7 7F                             ld      (varR),a
 710+ C6AE C1                                   pop     bc                          ; retrieve shift counter
 711+ C6AF 21 00 00                             ld      hl,0                        ; set K to 0
 712+ C6B2 22 F4 C5                             ld      (SunVarK),hl                ; .
 713+ C6B5 22 F6 C5                             ld      (SunVarK+2),hl              ; .
 714+ C6B8 CB 78                                bit     7,b                         ; is counter positive
 715+ C6BA 28 32                                jr      z,.SunDV12                  ; .
 716+ C6BC 3A B7 7F                             ld      a,(varR)                    ;
 717+ C6BF CB 27        .SunDVL8:               sla     a                           ; Shift K by 1 left
 718+ C6C1 21 F5 C5                             ld      hl,SunVarK+1                ; .
 719+ C6C4 CB 16                                rl      (hl)                        ; .
 720+ C6C6 23                                   inc     hl                          ; .
 721+ C6C7 CB 16                                rl      (hl)                        ; .
 722+ C6C9 23                                   inc     hl                          ; .
 723+ C6CA CB 16                                rl      (hl)                        ; .
 724+ C6CC 04                                   inc     b
 725+ C6CD 20 F0                                jr      nz,.SunDVL8                 ; loop until K is shifted
 726+ C6CF 32 F4 C5                             ld      (SunVarK),a
 727+ C6D2 3A F7 C5                             ld      a,(SunVarK+3)
 728+ C6D5 21 FE C5                             ld      hl,SunVarT
 729+ C6D8 B6                                   or      (hl)
 730+ C6D9 32 F7 C5                             ld      (SunVarK+3),a
 731+ C6DC C9                                   ret
 732+ C6DD 3A B7 7F     .SunDV13:               ld      a,(varR)                    ; when we get here, shift is zero
 733+ C6E0 32 F4 C5                             ld      (SunVarK),a
 734+ C6E3 3A F7 C5                             ld      a,(SunVarK+3)
 735+ C6E6 21 FE C5                             ld      hl,SunVarT
 736+ C6E9 B6                                   or      (hl)
 737+ C6EA 32 F7 C5                             ld      (SunVarK+3),a
 738+ C6ED C9                                   ret
 739+ C6EE 78           .SunDV12:               ld      a,b
 740+ C6EF A7                                   and     a
 741+ C6F0 28 EB                                jr      z,.SunDV13
 742+ C6F2 3A B7 7F                             ld      a,(varR)                    ; it probably is already R so need to test
 743+ C6F5 CB 2F        .SunDVL10:              sra     a                           ; Shift K by 1 left
 744+ C6F7 05                                   dec     b
 745+ C6F8 20 FB                                jr      nz,.SunDVL10
 746+ C6FA 32 F4 C5                             ld      (SunVarK),a                 ; as original divide was onyl 8 bits K 1,2,3 don;t matter
 747+ C6FD 3A FE C5                             ld      a,(SunVarT)
 748+ C700 32 F7 C5                             ld      (SunVarK+3),a
 749+ C703 C9                                   ret
 750+ C704
 751+ C704
 752+ C704
 753+ C704 47           SunProcessVertex:       ld      b,a                         ; save sign byte
 754+ C705 ED 5B 16 C0  .SunProjectToEye:       ld      de,(SBnKzlo)                ; X Pos = X / Z
 755+ C709 3A 18 C0                             ld      a,(SBnKzsgn)                ; CDE = z
 756+ C70C FD 67                                ld      iyh,a                       ; save sign
 757+ C70E                                      ClearSignBitA
 757+ C70E E6 7F       >                        and     SignMask8Bit
 758+ C710                                      ; Addeed as it neds to be AHL/0CD to force * 256 and get correct screen position on scaling
 759+ C710              ;                        ld      c,a                         ;
 760+ C710 5A                                   ld      e,d
 761+ C711 57                                   ld      d,a
 762+ C712 0E 00                                ld      c,0
 763+ C714                                      ; added above to correct positioning as in reality its X/(Z/256)
 764+ C714 78                                   ld      a,b                         ; restore sign byte
 765+ C715 FD 6F                                ld      iyl,a                       ; save sign
 766+ C717                                      ClearSignBitA
 766+ C717 E6 7F       >                        and     SignMask8Bit
 767+ C719 CD FF C5                             call SunAHLequAHLDivCDE             ; AHL = AHL/CDE unsigned
 768+ C71C              .CheckPosOnScreenX:     JumpIfAIsNotZero .IsOffScreen         ; if A has a value then its way too large regardless of sign
 768+ C71C A7          >                        and     a
 768+ C71D C2 3A C7    >                        jp	    nz,.IsOffScreen
 769+ C720                                      JumpOnLeadSignSet h, .IsOffScreen      ; or bit 7 set of h
 769+ C720 7C          >                        ld      a,h
 769+ C721 E6 80       >                        and     SignOnly8Bit
 769+ C723 C2 3A C7    >                        jp      nz,.IsOffScreen
 770+ C726 7C                                   ld      a,h
 771+ C727                                      ReturnIfAGTEusng 4                  ; if a > 1024 then its way too large regardless of sign
 771+ C727 FE 04       >                        cp    4
 771+ C729 D0          >                        ret	 nc
 772+ C72A FD 7C                                ld      a,iyh                       ; now deal with the sign
 773+ C72C FD AD                                xor     iyl
 774+ C72E                                      SignBitOnlyA                        ; a= resultant sign
 774+ C72E E6 80       >                        and     SignOnly8Bit
 775+ C730 28 06                                jr      z,.calculatedVert           ; result is positive so we don't 2's compliment it
 776+ C732              .XIsNegative:           NegHL                               ; make 2's c as negative
 776+ C732 AF          >                    xor a
 776+ C733 95          >                    sub l
 776+ C734 6F          >                    ld l,a
 776+ C735 9F          >                    sbc a,a
 776+ C736 94          >                    sub h
 776+ C737 67          >                    ld h,a
 777+ C738              .calculatedVert:        ClearCarryFlag
 777+ C738 B7          >                        or a
 778+ C739 C9                                   ret
 779+ C73A 21 FF 7F     .IsOffScreen:           ld      hl,$7FFF
 780+ C73D FD 7C                                ld      a,iyh
 781+ C73F FD AD                                xor     iyl
 782+ C741                                      SignBitOnlyA
 782+ C741 E6 80       >                        and     SignOnly8Bit
 783+ C743 28 02                                jr      z,.calculatedOffScreen
 784+ C745 23                                   inc     hl                          ; set hl to $8001 i.e. -32768
 785+ C746 23                                   inc     hl                          ; .
 786+ C747              .calculatedOffScreen:   SetCarryFlag
 786+ C747 37          >                        scf
 787+ C748 C9                                   ret
 788+ C749
 789+ C749              ; --------------------------------------------------------------
 790+ C749 21 10 C0     CopySuntoGeneral:       ld      hl,SBnKxlo
 791+ C74C 11 93 80                             ld      de,SunXPos
 792+ C74F 01 09 00                             ld      bc,3*3
 793+ C752 ED B0                                ldir
 794+ C754 C9                                   ret
 795+ C755              ; .........................................................................................................................
 796+ C755              ; we only hit this if z is positive so we can ignore signs
 797+ C755 ED 4B 16 C0  SunCalculateRadius:     ld      bc,(SBnKzlo)                ; DBC = z position
 798+ C759 3A 18 C0                             ld      a,(SBnKzsgn)                ;
 799+ C75C 57                                   ld      d,a                         ;
 800+ C75D 21 00 60                             ld      hl,$6000  ; was hl          ; planet radius at Z = 1 006000
 801+ C760 CD 82 96                             call    Div16by24usgn               ; radius = HL/DBC = 24576 / distance z
 802+ C763 B4                                   or      h                           ; if A or H are not 0 then max Radius
 803+ C764                                      JumpIfAIsZero  .SaveRadius
 803+ C764 A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
 803+ C765 CA 6A C7    >                        jp	    z, .SaveRadius
 804+ C768 1E F8        .MaxRadius:             ld      e,248                       ;set radius to 248 as maxed out
 805+ C76A 7D           .SaveRadius:            ld      a,l                         ; l = resultant radius
 806+ C76B F6 01                                or      1                           ; at least radius 1 (never even so need to test)
 807+ C76D 32 F3 C5                             ld      (SunRadius),a               ; save a copy of radius now for later
 808+ C770 5F                                   ld      e,a                         ; as later code expects it to be in e
 809+ C771 C9                                   ret
 810+ C772
 811+ C772              ; Shorter version when sun does not need to be processed to screen
 812+ C772 3A 12 C0     SunUpdateCompass:       ld      a,(SBnKxsgn)
 813+ C775 2A 10 C0                             ld      hl,(SBnKxlo)
 814+ C778 CD 04 C7                             call    SunProcessVertex
 815+ C77B 22 19 C0                             ld      (SunCompassX),hl
 816+ C77E 3A 15 C0                             ld      a,(SBnKysgn)
 817+ C781 2A 13 C0                             ld      hl,(SBnKylo)
 818+ C784 CD 04 C7                             call    SunProcessVertex
 819+ C787 22 1B C0                             ld      (SunCompassY),hl
 820+ C78A C9                                   ret
 821+ C78B
 822+ C78B                                 ; could probabyl set a variable say "varGood", default as 1 then set to 0 if we end up with a good calulation?? may not need it as we draw here
 823+ C78B CD F0 C4     SunUpdateAndRender:     call    SunApplyMyRollAndPitch
 824+ C78E 3A 18 C0     .CheckDrawable:         ld      a,(SBnKzsgn)
 825+ C791                                      JumpIfAGTENusng 48,  SunUpdateCompass ; at a distance over 48 its too far away
 825+ C791 FE 30       >                        cp     48
 825+ C793 D2 72 C7    >                        jp		nc,SunUpdateCompass
 826+ C796 21 17 C0                             ld      hl,SBnKzhi                  ; if the two high bytes are zero then its too close
 827+ C799 B6                                   or      (hl)
 828+ C79A                                      JumpIfAIsZero       SunUpdateCompass
 828+ C79A A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
 828+ C79B CA 72 C7    >                        jp	    z, SunUpdateCompass
 829+ C79E 3A 12 C0     .calculateX:            ld      a,(SBnKxsgn)
 830+ C7A1 2A 10 C0                             ld      hl,(SBnKxlo)
 831+ C7A4 CD 04 C7                             call    SunProcessVertex            ; now returns carry set for failure
 832+ C7A7 22 19 C0                             ld      (SunCompassX),hl
 833+ C7AA D8                                   ret     c
 834+ C7AB 1E 80        .calculatedX:           ld      e,ScreenCenterX
 835+ C7AD 16 00                                ld      d,0
 836+ C7AF                                      ClearCarryFlag
 836+ C7AF B7          >                        or a
 837+ C7B0 ED 5A                                adc     hl,de
 838+ C7B2                                      ;call    HL2cEquHLSgnPlusAusgn       ; correct to center of screen
 839+ C7B2 22 EF C5                             ld      (SunScrnX),hl               ; save projected X Position, 2's compliment
 840+ C7B5 3A 15 C0     .calculateY:            ld      a,(SBnKysgn)
 841+ C7B8 2A 13 C0                             ld      hl,(SBnKylo)
 842+ C7BB CD 04 C7                             call    SunProcessVertex            ; now returns carry set for failure
 843+ C7BE 22 1B C0                             ld      (SunCompassY),hl
 844+ C7C1 D8                                   ret     c
 845+ C7C2 1E 60        .calculatedY:           ld      e,ScreenCenterY
 846+ C7C4 16 00                                ld      d,0
 847+ C7C6 EB                                   ex      de,hl
 848+ C7C7                                      ClearCarryFlag
 848+ C7C7 B7          >                        or a
 849+ C7C8 ED 52                                sbc     hl,de
 850+ C7CA                                      ;call    HL2cEquHLSgnPlusAusgn       ; correct to center of screen
 851+ C7CA 22 F1 C5                             ld      (SunScrnY),hl               ; save projected Y Position, 2's compliment
 852+ C7CD              ; .........................................................................................................................
 853+ C7CD CD 55 C7                             call    SunCalculateRadius
 854+ C7D0              ; .........................................................................................................................
 855+ C7D0 2A EF C5     .CheckIfSunOnScreen:    ld      hl,(SunScrnX)               ; get x pixel position
 856+ C7D3 FD 26 00                             ld      iyh,0                       ; iyh holds draw status, 0= OK
 857+ C7D6 16 00                                ld      d,0                         ; e still holds radius
 858+ C7D8 7C                                   ld      a,h
 859+ C7D9                                      JumpOnLeadSignSet   h,.CheckXNegative
 859+ C7D9 7C          >                        ld      a,h
 859+ C7DA E6 80       >                        and     SignOnly8Bit
 859+ C7DC C2 F2 C7    >                        jp      nz,.CheckXNegative
 860+ C7DF 7C           .CheckXPositive:        ld      a,h
 861+ C7E0                                      JumpIfAIsZero   .XOnScreen          ; if high byte of h is not zero its definitly on screen
 861+ C7E0 A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
 861+ C7E1 CA FB C7    >                        jp	    z, .XOnScreen
 862+ C7E4 16 00                                ld      d,0                         ; de = radius
 863+ C7E6                                      ClearCarryFlag
 863+ C7E6 B7          >                        or a
 864+ C7E7 ED 52                                sbc     hl,de
 865+ C7E9 FA FB C7                             jp      m   ,.XOnScreen             ; if result was negative then it spans screen
 866+ C7EC 7C                                   ld      a,h
 867+ C7ED                                      JumpIfAIsZero   .XOnScreen          ; if high byte of h is not zero then its partially on screen at least
 867+ C7ED A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
 867+ C7EE CA FB C7    >                        jp	    z, .XOnScreen
 868+ C7F1 C9                                   ret                                 ; None of the X coordinates are on screen
 869+ C7F2 16 00        .CheckXNegative:        ld      d,0                         ; de = radius
 870+ C7F4                                      ClearCarryFlag
 870+ C7F4 B7          >                        or a
 871+ C7F5 ED 5A                                adc     hl,de                       ; so we have hl - de
 872+ C7F7 F2 FB C7                             jp      p,.XOnScreen                ; if result was positive then it spans screen so we are good
 873+ C7FA C9                                   ret                                 ; else x is totally off the left side of the screen
 874+ C7FB              ; .........................................................................................................................
 875+ C7FB 2A F1 C5     .XOnScreen:             ld      hl,(SunScrnY)               ; now Check Y coordinate
 876+ C7FE                                      JumpOnLeadSignSet   h,.CheckYNegative
 876+ C7FE 7C          >                        ld      a,h
 876+ C7FF E6 80       >                        and     SignOnly8Bit
 876+ C801 C2 22 C8    >                        jp      nz,.CheckYNegative
 877+ C804 7C           .CheckYPositive:        ld      a,h
 878+ C805                                      JumpIfAIsNotZero   .PosYCheck2
 878+ C805 A7          >                        and     a
 878+ C806 C2 0F C8    >                        jp	    nz,.PosYCheck2
 879+ C809 7D                                   ld      a,l
 880+ C80A E6 80                                and     %10000000
 881+ C80C CA 2B C8                             jp      z,YOnScreen                ; at least 1 row is on screen as > 128
 882+ C80F 16 00        .PosYCheck2:            ld      d,0                         ; de = radius
 883+ C811                                      ClearCarryFlag
 883+ C811 B7          >                        or a
 884+ C812 ED 52                                sbc     hl,de
 885+ C814 FA 2B C8                             jp      m,YOnScreen                ; so if its -ve then it spans screen
 886+ C817 7C                                   ld      a,h                         ; if h > 0 then off screen so did not span
 887+ C818                                      ReturnIfANotZero                    ; .
 887+ C818 A7          >                        and     a
 887+ C819 C0          >                        ret     nz
 888+ C81A 7D                                   ld      a,l                         ; if l > 128 then off screen so did not span
 889+ C81B E6 80                                and     %10000000                   ; .
 890+ C81D                                      ReturnIfANotZero                    ; .
 890+ C81D A7          >                        and     a
 890+ C81E C0          >                        ret     nz
 891+ C81F C3 2B C8                             jp      YOnScreen                  ; so Y at least spans
 892+ C822 16 00        .CheckYNegative:        ld      d,0                         ; de = radius
 893+ C824                                      ClearCarryFlag
 893+ C824 B7          >                        or a
 894+ C825 ED 5A                                adc     hl,de                       ; so we have hl - de
 895+ C827 F2 2B C8                             jp      p,YOnScreen                ; if result was positive then it spans screen so we are good
 896+ C82A C9                                   ret                                 ; else never gets above 0 so return
 897+ C82B              ; .........................................................................................................................
 898+ C82B 21 91 C0     YOnScreen:             ld      hl,SBnKLineArray            ; we load start and end as 0
 899+ C82E 11 00 01                             ld		de, SunLineArraySize        ; just if we get a 0,0 genuine we will not plot it
 900+ C831 3E 00                                ld		a,0
 901+ C833 CD 32 7E                             call	memfill_dma
 902+ C836              ; .........................................................................................................................
 903+ C836 11 00 00     .SetRaggedEdgeMax:      ld      de,0
 904+ C839 3A F3 C5                             ld      a,(SunRadius)               ; get readius
 905+ C83C FE 60                                cp      96                          ; if > 96 then roll carry flag into e
 906+ C83E                                      FlipCarryFlag
 906+ C83E 3F          >                        ccf
 907+ C83F CB 13                                rl      e                           ; if > 40 then roll carry flag into e
 908+ C841 FE 28                                cp      40
 909+ C843                                      FlipCarryFlag
 909+ C843 3F          >                        ccf
 910+ C844 CB 13                                rl      e
 911+ C846 FE 10                                cp      16                          ; if > 16 then roll carry flag into e
 912+ C848                                      FlipCarryFlag
 912+ C848 3F          >                        ccf
 913+ C849 CB 13                                rl     e
 914+ C84B 7B                                   ld      a,e                         ; a = ragged size from %00000111 to %00000000
 915+ C84C 32 EC C5                             ld      (RaggedSize),a
 916+ C84F              ; .........................................................................................................................
 917+ C84F 21 91 C0     .SkipSetK:              ld      hl,SBnKLineArray            ; prep line array details ready for filling
 918+ C852 22 91 C1                             ld      (LineArrayPtr),hl
 919+ C855 AF                                   xor     a
 920+ C856 32 EB C5                             ld      (LineCount),a
 921+ C859              ; .........................................................................................................................
 922+ C859 2A F1 C5     .GetMinY:               ld      hl,(SunScrnY)               ; now calculate start Y position
 923+ C85C 3A F3 C5                             ld      a,(SunRadius)
 924+ C85F 5F                                   ld      e,a
 925+ C860 16 00                                ld      d,0
 926+ C862                                      ClearCarryFlag
 926+ C862 B7          >                        or a
 927+ C863 ED 52                                sbc     hl,de
 928+ C865 F2 6B C8                             jp      p,.DoneMinY
 929+ C868 21 00 00                             ld      hl,0                        ; if its negative then we start with 0 as it can only go up screen after radius
 930+ C86B              .DoneMinY:              ReturnIfRegNotZero h                ; if h > 0 then off the screen
 930+ C86B 7C          >                        ld      a, h
 930+ C86C A7          >                        and     a
 930+ C86D C0          >                        ret     nz
 931+ C86E 7D                                   ld      a,l                         ; check if l > 127
 932+ C86F E6 80                                and     SignOnly8Bit                ; .
 933+ C871 C0                                   ret     nz                          ; if bit is set then > 128
 934+ C872 7D           .SetMinY:               ld      a,l
 935+ C873 32 ED C5                             ld      (MinYOffset),a              ; so now we have Y top of screen
 936+ C876 2A F1 C5     .GetMaxY:               ld      hl,(SunScrnY)               ; get hl = Y + radius, note if we got here then this can never be a negative result but can go from -ve hl to +ve result
 937+ C879 3A F3 C5                             ld      a,(SunRadius)               ; hl = hl + radius
 938+ C87C 16 00                                ld      d,0                         ; .
 939+ C87E 5F                                   ld      e,a                         ; .
 940+ C87F                                      ClearCarryFlag                      ; .
 940+ C87F B7          >                        or a
 941+ C880 ED 5A                                adc     hl,de                       ; .
 942+ C882 7C                                   ld      a,h
 943+ C883 A7                                   and     a
 944+ C884 28 06                                jr      z,.YHiOK
 945+ C886 21 7F 00     .YHiGTE127:             ld      hl,127
 946+ C889 C3 95 C8                             jp      .SetMaxY
 947+ C88C 7D           .YHiOK:                 ld      a,l                         ; clamp at 127
 948+ C88D E6 80                                and     SignOnly8Bit                ; .
 949+ C88F CA 95 C8                             jp      z,.SetMaxY
 950+ C892 21 7F 00                             ld      hl,127
 951+ C895 7D           .SetMaxY                ld      a,l
 952+ C896 32 EE C5                             ld      (MaxYOffSet),a              ; so now we have min and max Y coordinates and SunScrnX & Y holds center
 953+ C899 CD A0 C8                             call    SunDrawCircle
 954+ C89C CD D9 C1                             call    SunDraw
 955+ C89F C9                                   ret
 956+ C8A0                                      ; b8 04 00 02 00 00 60 01 00 gives a 0.5 so we have the cal wrong as its +-1 so should be * result of divide by 128
 957+ C8A0              ;.. Now we caluclate the circle of the star
 958+ C8A0              ;.. its from MinY down the screen to MaxY center ProjX,ProjY.
 959+ C8A0              ;.. We can use the circle draw logic gtom Bressenham's algorithm
 960+ C8A0              ; so now there are the following conditions to consider
 961+ C8A0              ; y min = 0   y center is negative radius <= ABS (Y center)             => Don't draw
 962+ C8A0              ; y min = 0   y center is negative radius > ABS (Y center)+1            => Draw bottom half only
 963+ C8A0              ; y max = 127 y center is > 127    radius <= y center - 127             => Don't draw
 964+ C8A0              ; y max = 127 y center is > 127    radius > y center - 127              => Draw top half only
 965+ C8A0              ; y min >= 0  y center > y min     we don't need to worry about radius  => Draw both halves
 966+ C8A0              ; x center + radius < 0                                                 => Don't draw
 967+ C8A0              ; x center - radius > 255                                               => Don't draw
 968+ C8A0              ; we won't consider x more here as the driver is the y coordinate but we will check if x is vaiable
 969+ C8A0              ; x point = max (x point, 0)   on left
 970+ C8A0              ; x point = min (x point, 255) on right
 971+ C8A0
 972+ C8A0              SetIYPlusOffset:        MACRO   reg
 973+ C8A0 ~                                    push    hl,,iy                          ; save hl, then hl = iy
 974+ C8A0 ~                                    pop     hl                              ;
 975+ C8A0 ~                                    ld      a,reg
 976+ C8A0 ~                                    add     hl,a
 977+ C8A0 ~                                    add     hl,a
 978+ C8A0 ~                                    push    hl
 979+ C8A0 ~                                    pop     iy
 980+ C8A0 ~                                    pop     hl
 981+ C8A0                                      ENDM
 982+ C8A0
 983+ C8A0              SetIYMinusOffset:       MACRO   reg
 984+ C8A0 ~                                    push    de,,hl,,iy                      ; save hl, then hl = iy
 985+ C8A0 ~                                    pop     hl                              ;
 986+ C8A0 ~                                    ld      a,reg
 987+ C8A0 ~                                    add     a,a
 988+ C8A0 ~                                    ld      e,a
 989+ C8A0 ~                                    ld      d,0
 990+ C8A0 ~                                    ClearCarryFlag
 991+ C8A0 ~                                    sbc     hl,de
 992+ C8A0 ~                                    push    hl
 993+ C8A0 ~                                    pop     iy
 994+ C8A0 ~                                    pop     de,,hl
 995+ C8A0                                      ENDM
 996+ C8A0
 997+ C8A0
 998+ C8A0              ;;;-SunDrawCircle:          ld      a,(SunRadius)
 999+ C8A0              ;;;-.CheckRadius:           ReturnIfAIsZero                         ; elimiate zero or single pixel
1000+ C8A0              ;;;-                        JumpIfAEqNusng  1, SunCircleSinglePixel
1001+ C8A0              ;;;-                       ; JumpIfAGTENusng 127, SunFullScreen      ; if its covering whole then just make it yellow
1002+ C8A0              ;;;-; already done .MakeCentreX2C:         MemSignedTo2C SunScrnX                   ; convert 16 bit signed to 2's compliment
1003+ C8A0              ;;;-; already done .MakeCentreY2C:         MemSignedTo2C SunScrnY                   ; .
1004+ C8A0              ;;;-.BoundsCheck            ld      hl,(SunScrnY)
1005+ C8A0              ;;;-                        push    hl
1006+ C8A0              ;;;-                        ld      a,(SunRadius)
1007+ C8A0              ;;;-                        add     hl,a
1008+ C8A0              ;;;-                        bit     7,h
1009+ C8A0              ;;;-                        ret     nz                              ; if Y + radius is negative then off the screen
1010+ C8A0              ;;;-                        pop     hl
1011+ C8A0              ;;;-                        ld      d,0
1012+ C8A0              ;;;-                        ld      e,a
1013+ C8A0              ;;;-                        ClearCarryFlag
1014+ C8A0              ;;;-                        sbc     hl,de
1015+ C8A0              ;;;-                        ld      a,h
1016+ C8A0              ;;;-                        ReturnIfAGTENusng  1                     ; really shoudl be signed TODO
1017+ C8A0              ;;;-
1018+ C8A0              ;;;-                        ld      hl,(SunScrnX)
1019+ C8A0              ;;;-                        push    hl
1020+ C8A0              ;;;-                        ld      a,(SunRadius)
1021+ C8A0              ;;;-                        add     hl,a
1022+ C8A0              ;;;-                        bit     7,h
1023+ C8A0              ;;;-                        ret     nz                              ; if Y + radius is negative then off the screen
1024+ C8A0              ;;;-                        pop     hl
1025+ C8A0              ;;;-                        ld      d,0
1026+ C8A0              ;;;-                        ld      e,a
1027+ C8A0              ;;;-                        ClearCarryFlag
1028+ C8A0              ;;;-                        sbc     hl,de
1029+ C8A0              ;;;-                        ld      a,h
1030+ C8A0              ;;;-
1031+ C8A0              ;;;-                        ReturnIfAGTENusng 1                      ; really shoudl be signed TODO
1032+ C8A0              SunDrawCircle
1033+ C8A0                                      ; ** BNOTE Ptuichj abnd roll has a bug as piitch increases z axis value
1034+ C8A0              .PrepCircleData:       ; ld      ixl,0
1035+ C8A0                                     ; ld		(.Plot1+1),bc			        ; save origin into DE reg in code
1036+ C8A0 3A F3 C5                             ld      a,(SunRadius)
1037+ C8A3 DD 67                                ld		ixh,a							; ixh = radius
1038+ C8A5 DD 2E 00                             ld		ixl,0						    ; ixl = delta (y)
1039+ C8A8 26 00        .calcd:	                ld		h,0                             ; de = radius * 2
1040+ C8AA 6F                                   ld		l,a                             ; .
1041+ C8AB 29                                   add		hl,hl							; .
1042+ C8AC EB                                   ex		de,hl							; .
1043+ C8AD 21 03 00                             ld		hl,3                            ; hl = 3 - (r * 2)
1044+ C8B0 A7                                   and		a                               ; .
1045+ C8B1 ED 52                                sbc		hl,de							; .
1046+ C8B3 44                                   ld		b,h                             ; bc = 3 - (r * 2) : d = 3 - 2r
1047+ C8B4 4D                                   ld		c,l								; .
1048+ C8B5 21 01 00     .calcdelta:             ld		hl,1                            ; set hl to 1
1049+ C8B8 16 00                                ld		d,0                             ; de = ixl
1050+ C8BA DD 5D                                ld		e,ixl                           ;
1051+ C8BC                                      ClearCarryFlag                          ;
1051+ C8BC B7          >                        or a
1052+ C8BD ED 52                                sbc		hl,de                           ; hl = 1 - ixl
1053+ C8BF 11 01 00     .Setde1:                ld		de,1                            ; del = 1
1054+ C8C2 DD 7C        .CircleLoop:            ld		a,ixh                           ; if x = y then exit
1055+ C8C4 DD BD                                cp		ixl                             ;
1056+ C8C6 D8                                   ret		c                               ;
1057+ C8C7 D9           .ProcessLoop:	        exx                                     ; save out registers
1058+ C8C8              ; Process CY+Y CX+X & CY+Y CX-X..................................
1059+ C8C8 2A F1 C5     .Plot1:                 ld      hl, (SunScrnY)
1060+ C8CB DD 7C        .Get1YRow:              ld      a,ixh
1061+ C8CD ED 31                                add     hl,a                            ; Check to see if CY+Y (note is add hl ,a usginedf only??)
1062+ C8CF              .Check1YRowOnScreen:    CheckRowHLOnScreen .NoTopPixelPair
1062+ C8CF 7C          >                        ld      a,h                             ; is h byte set, i.e > 256 or < 0
1062+ C8D0 A7          >                        and     a                               ; .
1062+ C8D1 20 26       >                        jr      nz,.NoTopPixelPair                   ; h <> 0 so fails (covers <0 and > 255
1062+ C8D3 7D          >                        ld      a,l                             ; l bit 7 0?
1062+ C8D4 E6 80       >                        and     Bit7Only                        ; covers l > 127 (screen draw area is 0 to 192 / 3 * 2 (128)
1062+ C8D6 20 21       >                        jr      nz,.NoTopPixelPair                   ;
1063+ C8D8              .Write1YCoord:          SetIYPlusOffset ixh                     ; IY = IY + ixh
1063+ C8D8 E5 FD E5    >                        push    hl,,iy                          ; save hl, then hl = iy
1063+ C8DB E1          >                        pop     hl                              ;
1063+ C8DC DD 7C       >                        ld      a,ixh
1063+ C8DE ED 31       >                        add     hl,a
1063+ C8E0 ED 31       >                        add     hl,a
1063+ C8E2 E5          >                        push    hl
1063+ C8E3 FD E1       >                        pop     iy
1063+ C8E5 E1          >                        pop     hl
1064+ C8E6                                      IYEquRowN l                             ; IY = SBnkLineArray + (2 * l) - set up iy as target address
1064+ C8E6 7D          >                        ld      a,l
1064+ C8E7 21 91 C0    >                        ld      hl,SBnKLineArray
1064+ C8EA ED 31       >                        add     hl,a
1064+ C8EC ED 31       >                        add     hl,a
1064+ C8EE E5          >                        push    hl
1064+ C8EF FD E1       >                        pop     iy
1065+ C8F1 DD 7D                                ld      a,ixl
1066+ C8F3 CD C6 C9                             call    ProcessXRowA
1067+ C8F6 C3 F9 C8                             jp      .Plot2
1068+ C8F9              .NoTopPixelPair:        ;break
1069+ C8F9              ; Process CY-Y CX+X & CY-Y CX-X..................................
1070+ C8F9 2A F1 C5     .Plot2:                 ld      hl, (SunScrnY)
1071+ C8FC 16 00        .Get2YRow:              ld      d,0
1072+ C8FE DD 5C                                ld      e,ixh
1073+ C900                                      ClearCarryFlag
1073+ C900 B7          >                        or a
1074+ C901 ED 52                                sbc     hl,de
1075+ C903              .Check2YRowOnScreen:    CheckRowHLOnScreen .NoBottomPixelPair
1075+ C903 7C          >                        ld      a,h                             ; is h byte set, i.e > 256 or < 0
1075+ C904 A7          >                        and     a                               ; .
1075+ C905 20 2B       >                        jr      nz,.NoBottomPixelPair                   ; h <> 0 so fails (covers <0 and > 255
1075+ C907 7D          >                        ld      a,l                             ; l bit 7 0?
1075+ C908 E6 80       >                        and     Bit7Only                        ; covers l > 127 (screen draw area is 0 to 192 / 3 * 2 (128)
1075+ C90A 20 26       >                        jr      nz,.NoBottomPixelPair                   ;
1076+ C90C                                      SetIYMinusOffset ixh
1076+ C90C D5 E5 FD E5 >                        push    de,,hl,,iy                      ; save hl, then hl = iy
1076+ C910 E1          >                        pop     hl                              ;
1076+ C911 DD 7C       >                        ld      a,ixh
1076+ C913 87          >                        add     a,a
1076+ C914 5F          >                        ld      e,a
1076+ C915 16 00       >                        ld      d,0
1076+ C917             >                        ClearCarryFlag
1076+ C917 B7          >                        or a
1076+ C918 ED 52       >                        sbc     hl,de
1076+ C91A E5          >                        push    hl
1076+ C91B FD E1       >                        pop     iy
1076+ C91D E1 D1       >                        pop     de,,hl
1077+ C91F              .Write2YCoord:          IYEquRowN l                             ; set up iy as target address
1077+ C91F 7D          >                        ld      a,l
1077+ C920 21 91 C0    >                        ld      hl,SBnKLineArray
1077+ C923 ED 31       >                        add     hl,a
1077+ C925 ED 31       >                        add     hl,a
1077+ C927 E5          >                        push    hl
1077+ C928 FD E1       >                        pop     iy
1078+ C92A DD 7D                                ld      a,ixl
1079+ C92C CD C6 C9                             call    ProcessXRowA
1080+ C92F C3 32 C9                             jp      .Plot3
1081+ C932              .NoBottomPixelPair:     ;break
1082+ C932              ; Process CY+X CX+Y & CY+X CX-Y..................................
1083+ C932 2A F1 C5     .Plot3:                 ld      hl, (SunScrnY)
1084+ C935 DD 7D        .Get3YRow:              ld      a,ixl
1085+ C937 ED 31                                add     hl,a                            ; Check to see if CY+Y
1086+ C939              .Check3YRowOnScreen:    CheckRowHLOnScreen .NoTop3PixelPair
1086+ C939 7C          >                        ld      a,h                             ; is h byte set, i.e > 256 or < 0
1086+ C93A A7          >                        and     a                               ; .
1086+ C93B 20 26       >                        jr      nz,.NoTop3PixelPair                   ; h <> 0 so fails (covers <0 and > 255
1086+ C93D 7D          >                        ld      a,l                             ; l bit 7 0?
1086+ C93E E6 80       >                        and     Bit7Only                        ; covers l > 127 (screen draw area is 0 to 192 / 3 * 2 (128)
1086+ C940 20 21       >                        jr      nz,.NoTop3PixelPair                   ;
1087+ C942                                      SetIYPlusOffset ixl
1087+ C942 E5 FD E5    >                        push    hl,,iy                          ; save hl, then hl = iy
1087+ C945 E1          >                        pop     hl                              ;
1087+ C946 DD 7D       >                        ld      a,ixl
1087+ C948 ED 31       >                        add     hl,a
1087+ C94A ED 31       >                        add     hl,a
1087+ C94C E5          >                        push    hl
1087+ C94D FD E1       >                        pop     iy
1087+ C94F E1          >                        pop     hl
1088+ C950              .Write3YCoord:          IYEquRowN l                             ; set up iy as target address
1088+ C950 7D          >                        ld      a,l
1088+ C951 21 91 C0    >                        ld      hl,SBnKLineArray
1088+ C954 ED 31       >                        add     hl,a
1088+ C956 ED 31       >                        add     hl,a
1088+ C958 E5          >                        push    hl
1088+ C959 FD E1       >                        pop     iy
1089+ C95B DD 7C                                ld      a,ixh
1090+ C95D CD C6 C9                             call    ProcessXRowA
1091+ C960 C3 63 C9                             jp      .Plot4
1092+ C963              .NoTop3PixelPair:       ;break
1093+ C963              ; Process CY-X CX+Y & CY-X CX-Y..................................
1094+ C963 2A F1 C5     .Plot4:                 ld      hl, (SunScrnY)
1095+ C966 16 00        .Get4YRow:              ld      d,0
1096+ C968 DD 5D                                ld      e,ixl
1097+ C96A                                      ClearCarryFlag
1097+ C96A B7          >                        or a
1098+ C96B ED 52                                sbc     hl,de
1099+ C96D              .Check4YRowOnScreen:    CheckRowHLOnScreen .NoBottom4PixelPair
1099+ C96D 7C          >                        ld      a,h                             ; is h byte set, i.e > 256 or < 0
1099+ C96E A7          >                        and     a                               ; .
1099+ C96F 20 28       >                        jr      nz,.NoBottom4PixelPair                   ; h <> 0 so fails (covers <0 and > 255
1099+ C971 7D          >                        ld      a,l                             ; l bit 7 0?
1099+ C972 E6 80       >                        and     Bit7Only                        ; covers l > 127 (screen draw area is 0 to 192 / 3 * 2 (128)
1099+ C974 20 23       >                        jr      nz,.NoBottom4PixelPair                   ;
1100+ C976                                      SetIYMinusOffset ixl
1100+ C976 D5 E5 FD E5 >                        push    de,,hl,,iy                      ; save hl, then hl = iy
1100+ C97A E1          >                        pop     hl                              ;
1100+ C97B DD 7D       >                        ld      a,ixl
1100+ C97D 87          >                        add     a,a
1100+ C97E 5F          >                        ld      e,a
1100+ C97F 16 00       >                        ld      d,0
1100+ C981             >                        ClearCarryFlag
1100+ C981 B7          >                        or a
1100+ C982 ED 52       >                        sbc     hl,de
1100+ C984 E5          >                        push    hl
1100+ C985 FD E1       >                        pop     iy
1100+ C987 E1 D1       >                        pop     de,,hl
1101+ C989              .Write4YCoord:          IYEquRowN l                             ; set up iy as target address
1101+ C989 7D          >                        ld      a,l
1101+ C98A 21 91 C0    >                        ld      hl,SBnKLineArray
1101+ C98D ED 31       >                        add     hl,a
1101+ C98F ED 31       >                        add     hl,a
1101+ C991 E5          >                        push    hl
1101+ C992 FD E1       >                        pop     iy
1102+ C994 DD 7C                                ld      a,ixh
1103+ C996 CD C6 C9                             call    ProcessXRowA
1104+ C999              .NoBottom4PixelPair:
1105+ C999              ; Completed one iteration........................................
1106+ C999 D9                                   exx
1107+ C99A CB 7C        .IncrementCircle:	    bit     7,h				; Check for Hl<=0
1108+ C99C 28 03                                jr z,   .draw_circle_1
1109+ C99E 19                                   add hl,de			; Delta=Delta+D1
1110+ C99F 18 05                                jr      .draw_circle_2		;
1111+ C9A1 09           .draw_circle_1:		    add     hl,bc			; Delta=Delta+D2
1112+ C9A2 03                                   inc     bc
1113+ C9A3 03                                   inc     bc				; D2=D2+2
1114+ C9A4 DD 25                                dec     ixh				; Y=Y-1
1115+ C9A6 03           .draw_circle_2:		    inc bc				    ; D2=D2+2
1116+ C9A7 03                                   inc bc
1117+ C9A8 13                                   inc de				    ; D1=D1+2
1118+ C9A9 13                                   inc de
1119+ C9AA DD 2C                                inc ixl				    ; X=X+1
1120+ C9AC C3 C2 C8                             jp      .CircleLoop
1121+ C9AF 2A EF C5     SunCircleSinglePixel:     ld      hl,(SunScrnX)
1122+ C9B2 7C                                   ld      a,h
1123+ C9B3 A7                                   and     a
1124+ C9B4 C0                                   ret     nz                  ; if the high byte is set then no pixel
1125+ C9B5 4D                                   ld      c,l
1126+ C9B6 2A F1 C5                             ld      hl,(SunScrnY)
1127+ C9B9 7C                                   ld      a,h
1128+ C9BA A7                                   and     a
1129+ C9BB C0                                   ret     nz                  ; if the high byte is set then no pixel
1130+ C9BC 7D                                   ld      a,l
1131+ C9BD CB 7F                                bit     7,a
1132+ C9BF C0                                   ret     nz                  ; if l > 127 then no pixel
1133+ C9C0 47                                   ld      b,a
1134+ C9C1 7B                                   ld		a,e
1135+ C9C2 CD 8C E4                             call	l2_plot_pixel_y_test
1136+ C9C5 C9                                   ret
1137+ C9C6
1138+ C9C6              ProcessXRowA:           ;break
1139+ C9C6 2A EF C5                             ld      hl,(SunScrnX)                    ; get X Center
1140+ C9C9 F5                                   push    af                              ; save A (curent offset +/- value
1141+ C9CA ED 31                                add     hl,a                            ; Hl = HL + offset
1142+ C9CC 7C                                   ld      a,h                             ; is HL negative?, if so then set C to 0
1143+ C9CD CB 7F                                bit     7,a                             ;
1144+ C9CF 20 14                                jr      nz,.XCoordNegative              ; We can have this for non X + Radius i.e. the equater
1145+ C9D1 A7                                   and     a                               ; if H <> 0? (why by here must be +ve), set c to $FF
1146+ C9D2 20 16                                jr      nz,.XCoordMaxed                 ; .
1147+ C9D4 4D                                   ld      c,l                             ; else set c to l and do the -ve offset
1148+ C9D5 C5           .AddFuzz:               push    bc
1149+ C9D6 CD EC 85                             call    doRandom                        ; c = c - random AND ragged Size
1150+ C9D9 C1                                   pop     bc
1151+ C9DA 21 EC C5                             ld      hl,RaggedSize                   ;
1152+ C9DD A6                                   and     (hl)                            ;
1153+ C9DE 81                                   add     c                               ;
1154+ C9DF 4F                                   ld      c,a                             ;
1155+ C9E0 38 08                                jr      c,.XCoordMaxed                  ; has fuzz caused a carry, if so > 255 to make 255
1156+ C9E2 C3 EC C9                             jp      .ProcessSubtract                ;
1157+ C9E5 0E 00        .XCoordNegative:        ld      c,0                             ; if it was negative then 0
1158+ C9E7 C3 EC C9                             jp      .ProcessSubtract
1159+ C9EA 0E FF        .XCoordMaxed:           ld      c,255                           ; if it was +ve then 255
1160+ C9EC F1           .ProcessSubtract:       pop     af                              ; get offset back
1161+ C9ED 5F                                   ld      e,a                             ; but goes into DE as its a subtract
1162+ C9EE 16 00                                ld      d,0
1163+ C9F0 2A EF C5                             ld      hl,(SunScrnX)                    ; so do subtract
1164+ C9F3                                      ClearCarryFlag                          ; .
1164+ C9F3 B7          >                        or a
1165+ C9F4 ED 52                                sbc     hl,de                           ; .
1166+ C9F6 FA 13 CA                             jp      m,.XCoordLeftNegative           ; again test for min max
1167+ C9F9 E5 C5        .AddFuzzSubtract:       push    hl,,bc
1168+ C9FB CD EC 85                             call    doRandom                        ; c = c - random AND ragged Size
1169+ C9FE C1                                   pop     bc
1170+ C9FF 21 EC C5                             ld      hl,RaggedSize                   ;
1171+ CA02 A6                                   and     (hl)                            ;
1172+ CA03 5F                                   ld      e,a
1173+ CA04 E1                                   pop     hl
1174+ CA05 ED 52                                sbc     hl,de
1175+ CA07 FA 13 CA                             jp      m,.XCoordLeftNegative           ; again test for min max
1176+ CA0A 7C                                   ld      a,h
1177+ CA0B A7                                   and     a
1178+ CA0C C2 18 CA                             jp      nz,.XCordLeftMaxed
1179+ CA0F 45                                   ld      b,l
1180+ CA10 C3 1A CA                             jp      .CompletedXCoords
1181+ CA13 06 00        .XCoordLeftNegative:    ld      b,0
1182+ CA15 C3 1A CA                             jp      .CompletedXCoords
1183+ CA18 06 FF        .XCordLeftMaxed:        ld      b,255
1184+ CA1A 78           .CompletedXCoords:      ld      a,b
1185+ CA1B FD 77 00     .RowSaveIY1             ld      (iy+0),a                        ; iy holds current line array index
1186+ CA1E 79                                   ld      a,c
1187+ CA1F FD 77 01     .RowSaveIY3             ld      (iy+1),a
1188+ CA22 C9                                   ret
1189+ CA23
1190+ CA23              ; .....................................................
1191+ CA23              ; if the universe object is a planet or sun then do that instead
1192+ CA23              ;;TODOProcessPlanet:          cp      129
1193+ CA23              ;;TODO                        jr      nz, .ItsAPlanet
1194+ CA23              ;;TODO.ItsAStar:              ld      a,(SBnKzsgn)
1195+ CA23              ;;TODO                        cp      48                               ; if z > 48 (it must be positive to enter this routine)
1196+ CA23
1197+ CA23
1198+ CA23              ; Square Root using tables
1199+ CA23              ; DE = number to find
1200+ CA23 21 43 CC     SunLookupSqrtDE:        ld      hl,SunSquareRootTable
1201+ CA26 7A           .LookupCorseJump:       ld      a,d
1202+ CA27 ED 31                                add     hl,a
1203+ CA29 ED 31                                add     hl,a
1204+ CA2B 7E                                   ld      a,(hl)
1205+ CA2C 23                                   inc     hl
1206+ CA2D 66                                   ld      h,(hl)
1207+ CA2E 6F                                   ld      l,a
1208+ CA2F 7E           .FineSearchLoop:        ld      a,(hl)
1209+ CA30                                      JumpIfAEqNusng  e, .FoundByte
1209+ CA30 BB          >                        cp     e
1209+ CA31 CA 3D CA    >                        jp      z,.FoundByte
1210+ CA34                                      JumpIfAGTENusng e, .PreviousByte
1210+ CA34 BB          >                        cp     e
1210+ CA35 D2 40 CA    >                        jp		nc,.PreviousByte
1211+ CA38 23           .NotFound:              inc     hl
1212+ CA39 23                                   inc     hl
1213+ CA3A C3 2F CA                             jp      .FineSearchLoop
1214+ CA3D 23           .FoundByte:             inc     hl
1215+ CA3E 7E                                   ld      a,(hl)
1216+ CA3F C9                                   ret
1217+ CA40 2B           .PreviousByte:          dec     hl
1218+ CA41 7E                                   ld      a,(hl)
1219+ CA42 C9                                   ret
1220+ CA43
1221+ CA43 43 CC 55 CC  SunRootHighIndex:       DW SunSqr00,SunSqr01,SunSqr02,SunSqr03,SunSqr04,SunSqr05,SunSqr06,SunSqr07,SunSqr08,SunSqr09,SunSqr0A,SunSqr0B,SunSqr0C,SunSqr0D,SunSqr0E,SunSqr0F
1221+ CA47 63 CC 6F CC
1221+ CA4B 79 CC 81 CC
1221+ CA4F 89 CC 91 CC
1221+ CA53 99 CC 9F CC
1221+ CA57 A7 CC AD CC
1221+ CA5B B1 CC B7 CC
1221+ CA5F BD CC C3 CC
1222+ CA63 C9 CC CF CC                          DW SunSqr10,SunSqr11,SunSqr12,SunSqr13,SunSqr14,SunSqr15,SunSqr16,SunSqr17,SunSqr18,SunSqr19,SunSqr1A,SunSqr1B,SunSqr1C,SunSqr1D,SunSqr1E,SunSqr1F
1222+ CA67 D5 CC DB CC
1222+ CA6B E1 CC E5 CC
1222+ CA6F E9 CC EB CC
1222+ CA73 EF CC F3 CC
1222+ CA77 F7 CC FB CC
1222+ CA7B FF CC 03 CD
1222+ CA7F 05 CD 09 CD
1223+ CA83 0B CD 0F CD                          DW SunSqr20,SunSqr21,SunSqr22,SunSqr23,SunSqr24,SunSqr25,SunSqr26,SunSqr27,SunSqr28,SunSqr29,SunSqr2A,SunSqr2B,SunSqr2C,SunSqr2D,SunSqr2E,SunSqr2F
1223+ CA87 13 CD 15 CD
1223+ CA8B 17 CD 1B CD
1223+ CA8F 1D CD 1F CD
1223+ CA93 23 CD 25 CD
1223+ CA97 27 CD 29 CD
1223+ CA9B 2D CD 2F CD
1223+ CA9F 31 CD 35 CD
1224+ CAA3 39 CD 3D CD                          DW SunSqr30,SunSqr31,SunSqr32,SunSqr33,SunSqr34,SunSqr35,SunSqr36,SunSqr37,SunSqr38,SunSqr39,SunSqr3A,SunSqr3B,SunSqr3C,SunSqr3D,SunSqr3E,SunSqr3F
1224+ CAA7 41 CD 45 CD
1224+ CAAB 47 CD 4B CD
1224+ CAAF 4F CD 53 CD
1224+ CAB3 55 CD 59 CD
1224+ CAB7 5D CD 61 CD
1224+ CABB 65 CD 69 CD
1224+ CABF 6D CD 71 CD
1225+ CAC3 75 CD 79 CD                          DW SunSqr40,SunSqr41,SunSqr42,SunSqr43,SunSqr44,SunSqr45,SunSqr46,SunSqr47,SunSqr48,SunSqr49,SunSqr4A,SunSqr4B,SunSqr4C,SunSqr4D,SunSqr4E,SunSqr4F
1225+ CAC7 7D CD 81 CD
1225+ CACB 85 CD 89 CD
1225+ CACF 8D CD 91 CD
1225+ CAD3 95 CD 99 CD
1225+ CAD7 9D CD A1 CD
1225+ CADB A5 CD A9 CD
1225+ CADF AD CD B1 CD
1226+ CAE3 B5 CD B7 CD                          DW SunSqr50,SunSqr51,SunSqr52,SunSqr53,SunSqr54,SunSqr55,SunSqr56,SunSqr57,SunSqr58,SunSqr59,SunSqr5A,SunSqr5B,SunSqr5C,SunSqr5D,SunSqr5E,SunSqr5F
1226+ CAE7 BB CD BF CD
1226+ CAEB C3 CD C7 CD
1226+ CAEF CB CD CF CD
1226+ CAF3 D3 CD D5 CD
1226+ CAF7 D9 CD DD CD
1226+ CAFB E1 CD E5 CD
1226+ CAFF E9 CD EB CD
1227+ CB03 EF CD F3 CD                          DW SunSqr60,SunSqr61,SunSqr62,SunSqr63,SunSqr64,SunSqr65,SunSqr66,SunSqr67,SunSqr68,SunSqr69,SunSqr6A,SunSqr6B,SunSqr6C,SunSqr6D,SunSqr6E,SunSqr6F
1227+ CB07 F7 CD FB CD
1227+ CB0B FD CD 01 CE
1227+ CB0F 05 CE 09 CE
1227+ CB13 0D CE 0F CE
1227+ CB17 13 CE 17 CE
1227+ CB1B 1B CE 1D CE
1227+ CB1F 1F CE 23 CE
1228+ CB23 27 CE 2B CE                          DW SunSqr70,SunSqr71,SunSqr72,SunSqr73,SunSqr74,SunSqr75,SunSqr76,SunSqr77,SunSqr78,SunSqr79,SunSqr7A,SunSqr7B,SunSqr7C,SunSqr7D,SunSqr7E,SunSqr7F
1228+ CB27 2F CE 33 CE
1228+ CB2B 37 CE 3B CE
1228+ CB2F 3D CE 41 CE
1228+ CB33 45 CE 47 CE
1228+ CB37 4B CE 4F CE
1228+ CB3B 53 CE 55 CE
1228+ CB3F 59 CE 5D CE
1229+ CB43 61 CE 63 CE                          DW SunSqr80,SunSqr81,SunSqr82,SunSqr83,SunSqr84,SunSqr85,SunSqr86,SunSqr87,SunSqr88,SunSqr89,SunSqr8A,SunSqr8B,SunSqr8C,SunSqr8D,SunSqr8E,SunSqr8F
1229+ CB47 67 CE 69 CE
1229+ CB4B 6D CE 71 CE
1229+ CB4F 75 CE 77 CE
1229+ CB53 7B CE 7F CE
1229+ CB57 81 CE 85 CE
1229+ CB5B 89 CE 8B CE
1229+ CB5F 8F CE 93 CE
1230+ CB63 95 CE 99 CE                          DW SunSqr90,SunSqr91,SunSqr92,SunSqr93,SunSqr94,SunSqr95,SunSqr96,SunSqr97,SunSqr98,SunSqr99,SunSqr9A,SunSqr9B,SunSqr9C,SunSqr9D,SunSqr9E,SunSqr9F
1230+ CB67 9D CE 9F CE
1230+ CB6B A3 CE A7 CE
1230+ CB6F A9 CE AD CE
1230+ CB73 B1 CE B3 CE
1230+ CB77 B7 CE BB CE
1230+ CB7B BD CE C1 CE
1230+ CB7F C5 CE C7 CE
1231+ CB83 CB CE CF CE                          DW SunSqrA0,SunSqrA1,SunSqrA2,SunSqrA3,SunSqrA4,SunSqrA5,SunSqrA6,SunSqrA7,SunSqrA8,SunSqrA9,SunSqrAA,SunSqrAB,SunSqrAC,SunSqrAD,SunSqrAE,SunSqrAF
1231+ CB87 D1 CE D5 CE
1231+ CB8B D7 CE DB CE
1231+ CB8F DF CE E1 CE
1231+ CB93 E5 CE E7 CE
1231+ CB97 EB CE EF CE
1231+ CB9B F1 CE F5 CE
1231+ CB9F F9 CE FB CE
1232+ CBA3 FD CE FF CE                          DW SunSqrB0,SunSqrB1,SunSqrB2,SunSqrB3,SunSqrB4,SunSqrB5,SunSqrB6,SunSqrB7,SunSqrB8,SunSqrB9,SunSqrBA,SunSqrBB,SunSqrBC,SunSqrBD,SunSqrBE,SunSqrBF
1232+ CBA7 03 CF 07 CF
1232+ CBAB 09 CF 0D CF
1232+ CBAF 0F CF 13 CF
1232+ CBB3 17 CF 1B CF
1232+ CBB7 1D CF 1F CF
1232+ CBBB 23 CF 25 CF
1232+ CBBF 29 CF 2D CF
1233+ CBC3 2F CF 33 CF                          DW SunSqrC0,SunSqrC1,SunSqrC2,SunSqrC3,SunSqrC4,SunSqrC5,SunSqrC6,SunSqrC7,SunSqrC8,SunSqrC9,SunSqrCA,SunSqrCB,SunSqrCC,SunSqrCD,SunSqrCE,SunSqrCF
1233+ CBC7 35 CF 39 CF
1233+ CBCB 3B CF 3F CF
1233+ CBCF 43 CF 45 CF
1233+ CBD3 47 CF 49 CF
1233+ CBD7 4D CF 4F CF
1233+ CBDB 53 CF 57 CF
1233+ CBDF 59 CF 5D CF
1234+ CBE3 5F CF 63 CF                          DW SunSqrD0,SunSqrD1,SunSqrD2,SunSqrD3,SunSqrD4,SunSqrD5,SunSqrD6,SunSqrD7,SunSqrD8,SunSqrD9,SunSqrDA,SunSqrDB,SunSqrDC,SunSqrDD,SunSqrDE,SunSqrDF
1234+ CBE7 65 CF 69 CF
1234+ CBEB 6B CF 6F CF
1234+ CBEF 73 CF 75 CF
1234+ CBF3 79 CF 7B CF
1234+ CBF7 7F CF 81 CF
1234+ CBFB 85 CF 87 CF
1234+ CBFF 89 CF 8B CF
1235+ CC03 8F CF 93 CF                          DW SunSqrE0,SunSqrE1,SunSqrE2,SunSqrE3,SunSqrE4,SunSqrE5,SunSqrE6,SunSqrE7,SunSqrE8,SunSqrE9,SunSqrEA,SunSqrEB,SunSqrEC,SunSqrED,SunSqrEE,SunSqrEF
1235+ CC07 97 CF 9B CF
1235+ CC0B 9F CF A3 CF
1235+ CC0F A5 CF A9 CF
1235+ CC13 AD CF B1 CF
1235+ CC17 B3 CF B7 CF
1235+ CC1B B9 CF BB CF
1235+ CC1F BD CF C1 CF
1236+ CC23 C3 CF C5 CF                          DW SunSqrF0,SunSqrF1,SunSqrF2,SunSqrF3,SunSqrF4,SunSqrF5,SunSqrF6,SunSqrF7,SunSqrF8,SunSqrF9,SunSqrFA,SunSqrFB,SunSqrFC,SunSqrFD,SunSqrFE,SunSqrFF
1236+ CC27 C7 CF CB CF
1236+ CC2B CD CF D1 CF
1236+ CC2F D3 CF D7 CF
1236+ CC33 D9 CF DD CF
1236+ CC37 DF CF E3 CF
1236+ CC3B E5 CF E9 CF
1236+ CC3F EB CF ED CF
1237+ CC43
1238+ CC43              SunSquareRootTable:
1239+ CC43 00 00        SunSqr00:               DB $00,   0
1240+ CC45 04 02                                DB $04,   2
1241+ CC47 10 04                                DB $10,   4
1242+ CC49 24 06                                DB $24,   6
1243+ CC4B 40 08                                DB $40,   8
1244+ CC4D 64 0A                                DB $64,  10
1245+ CC4F 90 0C                                DB $90,  12
1246+ CC51 C4 0E                                DB $C4,  14
1247+ CC53 FF 0F                                DB $FF,  15
1248+ CC55 00 10        SunSqr01:               DB $00,  16
1249+ CC57 21 11                                DB $21,  17
1250+ CC59 44 12                                DB $44,  18
1251+ CC5B 69 13                                DB $69,  19
1252+ CC5D 90 14                                DB $90,  20
1253+ CC5F B9 15                                DB $B9,  21
1254+ CC61 FF 16                                DB $FF,  22
1255+ CC63 11 17        SunSqr02:               DB $11,  23
1256+ CC65 40 18                                DB $40,  24
1257+ CC67 71 19                                DB $71,  25
1258+ CC69 A4 1A                                DB $A4,  26
1259+ CC6B D9 1B                                DB $D9,  27
1260+ CC6D FF 1B                                DB $FF,  27
1261+ CC6F 10 1C        SunSqr03:               DB $10,  28
1262+ CC71 49 1D                                DB $49,  29
1263+ CC73 84 1E                                DB $84,  30
1264+ CC75 C1 1F                                DB $C1,  31
1265+ CC77 FF 1F                                DB $FF,  31
1266+ CC79 00 20        SunSqr04:               DB $00,  32
1267+ CC7B 41 21                                DB $41,  33
1268+ CC7D 84 22                                DB $84,  34
1269+ CC7F FF 23                                DB $FF,  35
1270+ CC81 10 24        SunSqr05:               DB $10,  36
1271+ CC83 59 25                                DB $59,  37
1272+ CC85 A4 26                                DB $A4,  38
1273+ CC87 FF 27                                DB $FF,  39
1274+ CC89 40 28        SunSqr06:               DB $40,  40
1275+ CC8B 91 29                                DB $91,  41
1276+ CC8D E4 2A                                DB $E4,  42
1277+ CC8F FF 2A                                DB $FF,  42
1278+ CC91 39 2B        SunSqr07:               DB $39,  43
1279+ CC93 90 2C                                DB $90,  44
1280+ CC95 E9 2D                                DB $E9,  45
1281+ CC97 FF 2D                                DB $FF,  45
1282+ CC99 44 2E        SunSqr08:               DB $44,  46
1283+ CC9B A1 2F                                DB $A1,  47
1284+ CC9D FF 2F                                DB $FF,  47
1285+ CC9F 00 30        SunSqr09:               DB $00,  48
1286+ CCA1 61 31                                DB $61,  49
1287+ CCA3 C4 32                                DB $C4,  50
1288+ CCA5 FF 32                                DB $FF,  50
1289+ CCA7 29 33        SunSqr0A:               DB $29,  51
1290+ CCA9 90 34                                DB $90,  52
1291+ CCAB FF 35                                DB $FF,  53
1292+ CCAD 64 36        SunSqr0B:               DB $64,  54
1293+ CCAF FF 37                                DB $FF,  55
1294+ CCB1 40 38        SunSqr0C:               DB $40,  56
1295+ CCB3 B1 39                                DB $B1,  57
1296+ CCB5 FF 39                                DB $FF,  57
1297+ CCB7 24 3A        SunSqr0D:               DB $24,  58
1298+ CCB9 99 3B                                DB $99,  59
1299+ CCBB FF 3B                                DB $FF,  59
1300+ CCBD 10 3C        SunSqr0E:               DB $10,  60
1301+ CCBF 89 3D                                DB $89,  61
1302+ CCC1 FF 3D                                DB $FF,  61
1303+ CCC3 04 3E        SunSqr0F:               DB $04,  62
1304+ CCC5 81 3F                                DB $81,  63
1305+ CCC7 FF 3F                                DB $FF,  63
1306+ CCC9 00 40        SunSqr10:               DB $00,  64
1307+ CCCB 81 41                                DB $81,  65
1308+ CCCD FF 41                                DB $FF,  65
1309+ CCCF 04 42        SunSqr11:               DB $04,  66
1310+ CCD1 89 43                                DB $89,  67
1311+ CCD3 FF 43                                DB $FF,  67
1312+ CCD5 10 44        SunSqr12:               DB $10,  68
1313+ CCD7 99 45                                DB $99,  69
1314+ CCD9 FF 45                                DB $FF,  69
1315+ CCDB 24 46        SunSqr13:               DB $24,  70
1316+ CCDD B1 47                                DB $B1,  71
1317+ CCDF FF 47                                DB $FF,  71
1318+ CCE1 40 48        SunSqr14:               DB $40,  72
1319+ CCE3 FF 49                                DB $FF,  73
1320+ CCE5 64 4A        SunSqr15:               DB $64,  74
1321+ CCE7 FF 4B                                DB $FF,  75
1322+ CCE9 FF 4C        SunSqr16:               DB $FF,  76
1323+ CCEB C4 4D        SunSqr17:               DB $C4,  77
1324+ CCED FF 4E                                DB $FF,  78
1325+ CCEF 61 4F        SunSqr18:               DB $61,  79
1326+ CCF1 FF 4F                                DB $FF,  79
1327+ CCF3 00 50        SunSqr19:               DB $00,  80
1328+ CCF5 FF 51                                DB $FF,  81
1329+ CCF7 44 52        SunSqr1A:               DB $44,  82
1330+ CCF9 FF 53                                DB $FF,  83
1331+ CCFB 90 54        SunSqr1B:               DB $90,  84
1332+ CCFD FF 54                                DB $FF,  84
1333+ CCFF 39 55        SunSqr1C:               DB $39,  85
1334+ CD01 FF 56                                DB $FF,  86
1335+ CD03 FF 57        SunSqr1D:               DB $FF,  87
1336+ CD05 40 58        SunSqr1E:               DB $40,  88
1337+ CD07 FF 59                                DB $FF,  89
1338+ CD09 FF 5A        SunSqr1F:               DB $FF,  90
1339+ CD0B 59 5B        SunSqr20:               DB $59,  91
1340+ CD0D FF 5B                                DB $FF,  91
1341+ CD0F 10 5C        SunSqr21:               DB $10,  92
1342+ CD11 FF 5D                                DB $FF,  93
1343+ CD13 FF 5E        SunSqr22:               DB $FF,  94
1344+ CD15 FF 5F        SunSqr23:               DB $FF,  95
1345+ CD17 00 60        SunSqr24:               DB $00,  96
1346+ CD19 FF 61                                DB $FF,  97
1347+ CD1B 84 62        SunSqr25:               DB $84,  98
1348+ CD1D 49 63        SunSqr26:               DB $49,  99
1349+ CD1F 10 64        SunSqr27:               DB $10, 100
1350+ CD21 FF 65                                DB $FF, 101
1351+ CD23 FF 66        SunSqr28:               DB $FF, 102
1352+ CD25 FF 67        SunSqr29:               DB $FF, 103
1353+ CD27 FF 68        SunSqr2A:               DB $FF, 104
1354+ CD29 11 69        SunSqr2B:               DB $11, 105
1355+ CD2B FF 6A                                DB $FF, 106
1356+ CD2D FF 6B        SunSqr2C:               DB $FF, 107
1357+ CD2F FF 6C        SunSqr2D:               DB $FF, 108
1358+ CD31 69 6D        SunSqr2E:               DB $69, 109
1359+ CD33 FF 6E                                DB $FF, 110
1360+ CD35 44 6E        SunSqr2F:               DB $44, 110
1361+ CD37 FF 6F                                DB $FF, 111
1362+ CD39 21 6F        SunSqr30:               DB $21, 111
1363+ CD3B FF 70                                DB $FF, 112
1364+ CD3D 00 70        SunSqr31:               DB $00, 112
1365+ CD3F FF 71                                DB $FF, 113
1366+ CD41 C4 72        SunSqr32:               DB $C4, 114
1367+ CD43 FF 72                                DB $FF, 114
1368+ CD45 FF 73        SunSqr33:               DB $FF, 115
1369+ CD47 90 74        SunSqr34:               DB $90, 116
1370+ CD49 FF 75                                DB $FF, 117
1371+ CD4B 79 75        SunSqr35:               DB $79, 117
1372+ CD4D FF 76                                DB $FF, 118
1373+ CD4F 64 76        SunSqr36:               DB $64, 118
1374+ CD51 64 77                                DB $64, 119
1375+ CD53 51 77        SunSqr37:               DB $51, 119
1376+ CD55 40 78        SunSqr38:               DB $40, 120
1377+ CD57 FF 79                                DB $FF, 121
1378+ CD59 31 79        SunSqr39:               DB $31, 121
1379+ CD5B FF 7A                                DB $FF, 122
1380+ CD5D 24 7A        SunSqr3A:               DB $24, 122
1381+ CD5F FF 7B                                DB $FF, 123
1382+ CD61 19 7B        SunSqr3B:               DB $19, 123
1383+ CD63 FF 7C                                DB $FF, 124
1384+ CD65 10 7C        SunSqr3C:               DB $10, 124
1385+ CD67 FF 7D                                DB $FF, 125
1386+ CD69 09 7D        SunSqr3D:               DB $09, 125
1387+ CD6B FF 7D                                DB $FF, 125
1388+ CD6D 04 7E        SunSqr3E:               DB $04, 126
1389+ CD6F FF 7E                                DB $FF, 126
1390+ CD71 01 7F        SunSqr3F:               DB $01, 127
1391+ CD73 FF 7F                                DB $FF, 127
1392+ CD75 00 80        SunSqr40:               DB $00, 128
1393+ CD77 FF 80                                DB $FF, 128
1394+ CD79 01 81        SunSqr41:               DB $01, 129
1395+ CD7B FF 82                                DB $FF, 130
1396+ CD7D 04 82        SunSqr42:               DB $04, 130
1397+ CD7F FF 83                                DB $FF, 131
1398+ CD81 09 83        SunSqr43:               DB $09, 131
1399+ CD83 FF 84                                DB $FF, 132
1400+ CD85 10 84        SunSqr44:               DB $10, 132
1401+ CD87 FF 85                                DB $FF, 133
1402+ CD89 19 85        SunSqr45:               DB $19, 133
1403+ CD8B FF 86                                DB $FF, 134
1404+ CD8D 24 86        SunSqr46:               DB $24, 134
1405+ CD8F FF 87                                DB $FF, 135
1406+ CD91 31 87        SunSqr47:               DB $31, 135
1407+ CD93 FF 88                                DB $FF, 136
1408+ CD95 40 88        SunSqr48:               DB $40, 136
1409+ CD97 FF 89                                DB $FF, 137
1410+ CD99 51 89        SunSqr49:               DB $51, 137
1411+ CD9B FF 8A                                DB $FF, 138
1412+ CD9D 64 8A        SunSqr4A:               DB $64, 138
1413+ CD9F FF 8A                                DB $FF, 138
1414+ CDA1 79 8B        SunSqr4B:               DB $79, 139
1415+ CDA3 FF 8B                                DB $FF, 139
1416+ CDA5 90 8C        SunSqr4C:               DB $90, 140
1417+ CDA7 FF 8C                                DB $FF, 140
1418+ CDA9 A9 8D        SunSqr4D:               DB $A9, 141
1419+ CDAB FF 8D                                DB $FF, 141
1420+ CDAD C4 8E        SunSqr4E:               DB $C4, 142
1421+ CDAF FF 8E                                DB $FF, 142
1422+ CDB1 E1 8F        SunSqr4F:               DB $E1, 143
1423+ CDB3 FF 8F                                DB $FF, 143
1424+ CDB5 FF 8F        SunSqr50:               DB $FF, 143
1425+ CDB7 00 90        SunSqr51:               DB $00, 144
1426+ CDB9 FF 90                                DB $FF, 144
1427+ CDBB 21 91        SunSqr52:               DB $21, 145
1428+ CDBD FF 91                                DB $FF, 145
1429+ CDBF 44 92        SunSqr53:               DB $44, 146
1430+ CDC1 FF 92                                DB $FF, 146
1431+ CDC3 69 93        SunSqr54:               DB $69, 147
1432+ CDC5 FF 93                                DB $FF, 147
1433+ CDC7 90 94        SunSqr55:               DB $90, 148
1434+ CDC9 FF 94                                DB $FF, 148
1435+ CDCB B9 95        SunSqr56:               DB $B9, 149
1436+ CDCD FF 95                                DB $FF, 149
1437+ CDCF E4 96        SunSqr57:               DB $E4, 150
1438+ CDD1 FF 96                                DB $FF, 150
1439+ CDD3 FF 96        SunSqr58:               DB $FF, 150
1440+ CDD5 11 97        SunSqr59:               DB $11, 151
1441+ CDD7 FF 97                                DB $FF, 151
1442+ CDD9 40 98        SunSqr5A:               DB $40, 152
1443+ CDDB FF 98                                DB $FF, 152
1444+ CDDD 71 99        SunSqr5B:               DB $71, 153
1445+ CDDF FF 99                                DB $FF, 153
1446+ CDE1 A4 9A        SunSqr5C:               DB $A4, 154
1447+ CDE3 FF 9A                                DB $FF, 154
1448+ CDE5 D9 9B        SunSqr5D:               DB $D9, 155
1449+ CDE7 FF 9B                                DB $FF, 155
1450+ CDE9 FF 9B        SunSqr5E:               DB $FF, 155
1451+ CDEB 10 9C        SunSqr5F:               DB $10, 156
1452+ CDED FF 9C                                DB $FF, 156
1453+ CDEF 49 9D        SunSqr60:               DB $49, 157
1454+ CDF1 FF 9D                                DB $FF, 157
1455+ CDF3 84 9E        SunSqr61:               DB $84, 158
1456+ CDF5 FF 9E                                DB $FF, 158
1457+ CDF7 C1 9F        SunSqr62:               DB $C1, 159
1458+ CDF9 FF 9F                                DB $FF, 159
1459+ CDFB FF 9F        SunSqr63:               DB $FF, 159
1460+ CDFD 00 A0        SunSqr64:               DB $00, 160
1461+ CDFF FF A0                                DB $FF, 160
1462+ CE01 41 A1        SunSqr65:               DB $41, 161
1463+ CE03 FF A1                                DB $FF, 161
1464+ CE05 84 A2        SunSqr66:               DB $84, 162
1465+ CE07 FF A2                                DB $FF, 162
1466+ CE09 C9 A3        SunSqr67:               DB $C9, 163
1467+ CE0B FF A3                                DB $FF, 163
1468+ CE0D FF A3        SunSqr68:               DB $FF, 163
1469+ CE0F 10 A4        SunSqr69:               DB $10, 164
1470+ CE11 FF A4                                DB $FF, 164
1471+ CE13 59 A5        SunSqr6A:               DB $59, 165
1472+ CE15 FF A5                                DB $FF, 165
1473+ CE17 A4 A6        SunSqr6B:               DB $A4, 166
1474+ CE19 FF A6                                DB $FF, 166
1475+ CE1B FF A7        SunSqr6C:               DB $FF, 167
1476+ CE1D FF A7        SunSqr6D:               DB $FF, 167
1477+ CE1F 40 A8        SunSqr6E:               DB $40, 168
1478+ CE21 FF A8                                DB $FF, 168
1479+ CE23 91 A9        SunSqr6F:               DB $91, 169
1480+ CE25 FF A9                                DB $FF, 169
1481+ CE27 E4 AA        SunSqr70:               DB $E4, 170
1482+ CE29 FF AA                                DB $FF, 170
1483+ CE2B 00 AA        SunSqr71:               DB $00, 170
1484+ CE2D FF AA                                DB $FF, 170
1485+ CE2F 39 AB        SunSqr72:               DB $39, 171
1486+ CE31 FF AB                                DB $FF, 171
1487+ CE33 90 AC        SunSqr73:               DB $90, 172
1488+ CE35 FF AC                                DB $FF, 172
1489+ CE37 E9 AD        SunSqr74:               DB $E9, 173
1490+ CE39 FF AD                                DB $FF, 173
1491+ CE3B FF AD        SunSqr75:               DB $FF, 173
1492+ CE3D 44 AE        SunSqr76:               DB $44, 174
1493+ CE3F FF AE                                DB $FF, 174
1494+ CE41 A1 AF        SunSqr77:               DB $A1, 175
1495+ CE43 FF AF                                DB $FF, 175
1496+ CE45 FF AF        SunSqr78:               DB $FF, 175
1497+ CE47 00 B0        SunSqr79:               DB $00, 176
1498+ CE49 FF B0                                DB $FF, 176
1499+ CE4B 61 B1        SunSqr7A:               DB $61, 177
1500+ CE4D FF B1                                DB $FF, 177
1501+ CE4F C4 B2        SunSqr7B:               DB $C4, 178
1502+ CE51 FF B2                                DB $FF, 178
1503+ CE53 FF B2        SunSqr7C:               DB $FF, 178
1504+ CE55 29 B3        SunSqr7D:               DB $29, 179
1505+ CE57 FF B3                                DB $FF, 179
1506+ CE59 90 B4        SunSqr7E:               DB $90, 180
1507+ CE5B FF B4                                DB $FF, 180
1508+ CE5D F9 B5        SunSqr7F:               DB $F9, 181
1509+ CE5F FF B5                                DB $FF, 181
1510+ CE61 FF B5        SunSqr80:               DB $FF, 181
1511+ CE63 64 B6        SunSqr81:               DB $64, 182
1512+ CE65 FF B6                                DB $FF, 182
1513+ CE67 D1 B7        SunSqr82:               DB $D1, 183
1514+ CE69 FF B7        SunSqr83:               DB $FF, 183
1515+ CE6B FF B7                                DB $FF, 183
1516+ CE6D 40 B8        SunSqr84:               DB $40, 184
1517+ CE6F FF B8                                DB $FF, 184
1518+ CE71 B1 B9        SunSqr85:               DB $B1, 185
1519+ CE73 FF B9                                DB $FF, 185
1520+ CE75 FF B9        SunSqr86:               DB $FF, 185
1521+ CE77 24 BA        SunSqr87:               DB $24, 186
1522+ CE79 FF BA                                DB $FF, 186
1523+ CE7B 99 BB        SunSqr88:               DB $99, 187
1524+ CE7D FF BB                                DB $FF, 187
1525+ CE7F FF BB        SunSqr89:               DB $FF, 187
1526+ CE81 10 BC        SunSqr8A:               DB $10, 188
1527+ CE83 FF BC                                DB $FF, 188
1528+ CE85 89 BD        SunSqr8B:               DB $89, 189
1529+ CE87 FF BD                                DB $FF, 189
1530+ CE89 FF BD        SunSqr8C:               DB $FF, 189
1531+ CE8B 04 BE        SunSqr8D:               DB $04, 190
1532+ CE8D FF BE                                DB $FF, 190
1533+ CE8F 81 BF        SunSqr8E:               DB $81, 191
1534+ CE91 FF BF                                DB $FF, 191
1535+ CE93 FF BF        SunSqr8F:               DB $FF, 191
1536+ CE95 00 C0        SunSqr90:               DB $00, 192
1537+ CE97 FF C0                                DB $FF, 192
1538+ CE99 81 C1        SunSqr91:               DB $81, 193
1539+ CE9B FF C1                                DB $FF, 193
1540+ CE9D FF C1        SunSqr92:               DB $FF, 193
1541+ CE9F 04 C2        SunSqr93:               DB $04, 194
1542+ CEA1 FF C2                                DB $FF, 194
1543+ CEA3 89 C3        SunSqr94:               DB $89, 195
1544+ CEA5 FF C3                                DB $FF, 195
1545+ CEA7 FF C3        SunSqr95:               DB $FF, 195
1546+ CEA9 10 C4        SunSqr96:               DB $10, 196
1547+ CEAB FF C4                                DB $FF, 196
1548+ CEAD 99 C5        SunSqr97:               DB $99, 197
1549+ CEAF FF C5                                DB $FF, 197
1550+ CEB1 FF C5        SunSqr98:               DB $FF, 197
1551+ CEB3 24 C6        SunSqr99:               DB $24, 198
1552+ CEB5 FF C6                                DB $FF, 198
1553+ CEB7 B1 C7        SunSqr9A:               DB $B1, 199
1554+ CEB9 FF C7                                DB $FF, 199
1555+ CEBB FF C7        SunSqr9B:               DB $FF, 199
1556+ CEBD 40 C8        SunSqr9C:               DB $40, 200
1557+ CEBF FF C8                                DB $FF, 200
1558+ CEC1 D1 C9        SunSqr9D:               DB $D1, 201
1559+ CEC3 FF C9                                DB $FF, 201
1560+ CEC5 FF C9        SunSqr9E:               DB $FF, 201
1561+ CEC7 64 CA        SunSqr9F:               DB $64, 202
1562+ CEC9 FF CA                                DB $FF, 202
1563+ CECB F9 CB        SunSqrA0:               DB $F9, 203
1564+ CECD FF CB                                DB $FF, 203
1565+ CECF FF CB        SunSqrA1:               DB $FF, 203
1566+ CED1 90 CC        SunSqrA2:               DB $90, 204
1567+ CED3 FF CC                                DB $FF, 204
1568+ CED5 FF CC        SunSqrA3:               DB $FF, 204
1569+ CED7 29 CD        SunSqrA4:               DB $29, 205
1570+ CED9 FF CD                                DB $FF, 205
1571+ CEDB C4 CE        SunSqrA5:               DB $C4, 206
1572+ CEDD FF CE                                DB $FF, 206
1573+ CEDF FF CE        SunSqrA6:               DB $FF, 206
1574+ CEE1 61 CF        SunSqrA7:               DB $61, 207
1575+ CEE3 FF CF                                DB $FF, 207
1576+ CEE5 FF CF        SunSqrA8:               DB $FF, 207
1577+ CEE7 00 D0        SunSqrA9:               DB $00, 208
1578+ CEE9 FF D0                                DB $FF, 208
1579+ CEEB A1 D1        SunSqrAA:               DB $A1, 209
1580+ CEED FF D1                                DB $FF, 209
1581+ CEEF FF D1        SunSqrAB:               DB $FF, 209
1582+ CEF1 44 D2        SunSqrAC:               DB $44, 210
1583+ CEF3 FF D2                                DB $FF, 210
1584+ CEF5 E9 D3        SunSqrAD:               DB $E9, 211
1585+ CEF7 FF D3                                DB $FF, 211
1586+ CEF9 FF D3        SunSqrAE:               DB $FF, 211
1587+ CEFB 90 D4        SunSqrAF:               DB $90, 212
1588+ CEFD FF D4        SunSqrB0:               DB $FF, 212
1589+ CEFF 39 D5        SunSqrB1:               DB $39, 213
1590+ CF01 FF D5                                DB $FF, 213
1591+ CF03 E4 D6        SunSqrB2:               DB $E4, 214
1592+ CF05 FF D6                                DB $FF, 214
1593+ CF07 FF D6        SunSqrB3:               DB $FF, 214
1594+ CF09 91 D7        SunSqrB4:               DB $91, 215
1595+ CF0B FF D7                                DB $FF, 215
1596+ CF0D FF D7        SunSqrB5:               DB $FF, 215
1597+ CF0F 40 D8        SunSqrB6:               DB $40, 216
1598+ CF11 FF D8                                DB $FF, 216
1599+ CF13 F1 D9        SunSqrB7:               DB $F1, 217
1600+ CF15 FF D9                                DB $FF, 217
1601+ CF17 FF D9        SunSqrB8:               DB $FF, 217
1602+ CF19 FF D9                                DB $FF, 217
1603+ CF1B A4 DA        SunSqrB9:               DB $A4, 218
1604+ CF1D FF DA        SunSqrBA:               DB $FF, 218 ; we can reuse SunSeqrBA as  $FF for B9 terminator as well as they have the same target
1605+ CF1F 59 DB        SunSqrBB:               DB $59, 219
1606+ CF21 FF DB                                DB $FF, 219
1607+ CF23 FF DB        SunSqrBC:               DB $FF, 219
1608+ CF25 10 DC        SunSqrBD:               DB $10, 220
1609+ CF27 FF DC                                DB $FF, 220
1610+ CF29 C9 DD        SunSqrBE:               DB $C9, 221
1611+ CF2B FF DD                                DB $FF, 221
1612+ CF2D FF DD        SunSqrBF:               DB $FF, 221
1613+ CF2F 84 DE        SunSqrC0:               DB $84, 222
1614+ CF31 FF DE                                DB $FF, 222
1615+ CF33 FF DE        SunSqrC1:               DB $FF, 222
1616+ CF35 41 DF        SunSqrC2:               DB $41, 223
1617+ CF37 FF DF                                DB $FF, 223
1618+ CF39 FF DF        SunSqrC3:               DB $FF, 223
1619+ CF3B 00 E0        SunSqrC4:               DB $00, 224
1620+ CF3D FF E0                                DB $FF, 224
1621+ CF3F C1 E1        SunSqrC5:               DB $C1, 225
1622+ CF41 FF E1                                DB $FF, 225
1623+ CF43 FF E1        SunSqrC6:               DB $FF, 225
1624+ CF45 84 E2        SunSqrC7:               DB $84, 226
1625+ CF47 FF E2        SunSqrC8:               DB $FF, 226
1626+ CF49 49 E3        SunSqrC9:               DB $49, 227
1627+ CF4B FF E3                                DB $FF, 227
1628+ CF4D FF E4        SunSqrCA:               DB $FF, 228
1629+ CF4F 10 E4        SunSqrCB:               DB $10, 228
1630+ CF51 FF E4                                DB $FF, 228
1631+ CF53 D9 E5        SunSqrCC:               DB $D9, 229
1632+ CF55 FF E5                                DB $FF, 229
1633+ CF57 FF E5        SunSqrCD:               DB $FF, 229
1634+ CF59 A4 E6        SunSqrCE:               DB $A4, 230
1635+ CF5B FF E6                                DB $FF, 230
1636+ CF5D FF E6        SunSqrCF:               DB $FF, 230
1637+ CF5F 71 E7        SunSqrD0:               DB $71, 231
1638+ CF61 FF E7                                DB $FF, 231
1639+ CF63 FF E7        SunSqrD1:               DB $FF, 231
1640+ CF65 40 E8        SunSqrD2:               DB $40, 232
1641+ CF67 FF E8                                DB $FF, 232
1642+ CF69 FF E8        SunSqrD3:               DB $FF, 232
1643+ CF6B 11 E9        SunSqrD4:               DB $11, 233
1644+ CF6D FF E9                                DB $FF, 233
1645+ CF6F E4 EA        SunSqrD5:               DB $E4, 234
1646+ CF71 FF EA                                DB $FF, 234
1647+ CF73 FF EA        SunSqrD6:               DB $FF, 234
1648+ CF75 B9 EB        SunSqrD7:               DB $B9, 235
1649+ CF77 FF EB                                DB $FF, 235
1650+ CF79 FF EB        SunSqrD8:               DB $FF, 235
1651+ CF7B 90 EC        SunSqrD9:               DB $90, 236
1652+ CF7D FF EC                                DB $FF, 236
1653+ CF7F FF EC        SunSqrDA:               DB $FF, 236
1654+ CF81 69 ED        SunSqrDB:               DB $69, 237
1655+ CF83 FF ED                                DB $FF, 237
1656+ CF85 FF ED        SunSqrDC:               DB $FF, 237
1657+ CF87 44 EE        SunSqrDD:               DB $44, 238
1658+ CF89 FF EE        SunSqrDE:               DB $FF, 238
1659+ CF8B 21 EF        SunSqrDF:               DB $21, 239
1660+ CF8D FF EF                                DB $FF, 239
1661+ CF8F 00 F0        SunSqrE0:               DB $00, 240
1662+ CF91 FF F0                                DB $FF, 240
1663+ CF93 00 F0        SunSqrE1:               DB $00, 240
1664+ CF95 FF F0                                DB $FF, 240
1665+ CF97 E1 F1        SunSqrE2:               DB $E1, 241
1666+ CF99 FF F1                                DB $FF, 241
1667+ CF9B E1 F1        SunSqrE3:               DB $E1, 241
1668+ CF9D FF F1                                DB $FF, 241
1669+ CF9F C4 F2        SunSqrE4:               DB $C4, 242
1670+ CFA1 FF F2                                DB $FF, 242
1671+ CFA3 FF F2        SunSqrE5:               DB $FF, 242
1672+ CFA5 A9 F3        SunSqrE6:               DB $A9, 243
1673+ CFA7 FF F3                                DB $FF, 243
1674+ CFA9 FF F3        SunSqrE7:               DB $FF, 243
1675+ CFAB FF F3                                DB $FF, 243
1676+ CFAD 90 F3        SunSqrE8:               DB $90, 243
1677+ CFAF FF F4                                DB $FF, 244
1678+ CFB1 FF F4        SunSqrE9:               DB $FF, 244
1679+ CFB3 79 F5        SunSqrEA:               DB $79, 245
1680+ CFB5 FF F5                                DB $FF, 245
1681+ CFB7 FF F5        SunSqrEB:               DB $FF, 245
1682+ CFB9 64 F6        SunSqrEC:               DB $64, 246
1683+ CFBB FF F6        SunSqrED:               DB $FF, 246
1684+ CFBD 51 F7        SunSqrEE:               DB $51, 247
1685+ CFBF FF F7                                DB $FF, 247
1686+ CFC1 FF F7        SunSqrEF:               DB $FF, 247
1687+ CFC3 40 F8        SunSqrF0:               DB $40, 248
1688+ CFC5 FF F8        SunSqrF1:               DB $FF, 248
1689+ CFC7 31 F9        SunSqrF2:               DB $31, 249
1690+ CFC9 FF F9                                DB $FF, 249
1691+ CFCB FF F9        SunSqrF3:               DB $FF, 249
1692+ CFCD 24 FA        SunSqrF4:               DB $24, 250
1693+ CFCF FF FA                                DB $FF, 250
1694+ CFD1 FF FA        SunSqrF5:               DB $FF, 250
1695+ CFD3 19 FB        SunSqrF6:               DB $19, 251
1696+ CFD5 FF FB                                DB $FF, 251
1697+ CFD7 FF FB        SunSqrF7:               DB $FF, 251
1698+ CFD9 10 FC        SunSqrF8:               DB $10, 252
1699+ CFDB FF FC                                DB $FF, 252
1700+ CFDD FF FC        SunSqrF9:               DB $FF, 252
1701+ CFDF 09 FD        SunSqrFA:               DB $09, 253
1702+ CFE1 FF FD                                DB $FF, 253
1703+ CFE3 FF FD        SunSqrFB:               DB $FF, 253
1704+ CFE5 04 FE        SunSqrFC:               DB $04, 254
1705+ CFE7 FF FE                                DB $FF, 254
1706+ CFE9 FF FE        SunSqrFD:               DB $FF, 254
1707+ CFEB 01 FF        SunSqrFE:               DB $01, 255
1708+ CFED FF FF        SunSqrFF:               DB $FF, 255
1709+ CFEF
1710+ CFEF
1711+ CFEF
1712+ CFEF              SunBankSize  EQU $ - StartOfSun
1713+ CFEF
1714+ CFEF
# file closed: ./Universe/Sun/sun_data.asm
1041  CFEF                                  DISPLAY "Bank ",BankSunData," - Bytes free ",/D, $2000 - ($-SunBankAddr), " - BankSunData"
1042  CFEF                                  ASSERT $-SunBankAddr <8912, Bank code leaks over 8K boundary
1043  CFEF              ; Bank 84  ------------------------------------------------------------------------------------------------------------------------
1044  CFEF                                  SLOT    PlanetBankAddr
1045  CFEF                                  PAGE    BankPlanetData
1046  CFEF                                  ORG	    PlanetBankAddr,BankPlanetData
1047  C000                                  INCLUDE "./Universe/Planet/planet_data.asm"
# file opened: ./Universe/Planet/planet_data.asm
   1+ C000
   2+ C000              ;- DEBUG CODE
   3+ C000                                      IFDEF BLINEDEBUG
   4+ C000 ~            TestBLINE:              ld  a,$FF
   5+ C000 ~                                    ld  (P_BnKFlag),a
   6+ C000 ~                                    ld  a,5
   7+ C000 ~                                    ld  (P_BnKSTP),a
   8+ C000 ~                                    ZeroA
   9+ C000 ~                                    ld  (P_BnKCNT),a
  10+ C000 ~            .DebugLoop:             ld  ix,(DataPointer)
  11+ C000 ~                                    ld  a,(ix+0)
  12+ C000 ~                                    ld  l,a
  13+ C000 ~                                    ld  a,(ix+1)
  14+ C000 ~                                    ld  h,a
  15+ C000 ~                                    ld  (P_NewXPos),hl
  16+ C000 ~                                    ld  a,(ix+2)
  17+ C000 ~                                    ld  l,a
  18+ C000 ~                                    ld  a,(ix+3)
  19+ C000 ~                                    ld  h,a
  20+ C000 ~                                    ld  (P_NewYPos),hl
  21+ C000 ~                                    call    BLINE
  22+ C000 ~                                    ld      a,(DataPointCounter)
  23+ C000 ~                                    inc     a
  24+ C000 ~                                    ld      hl,DataPointSize
  25+ C000 ~                                    cp      (hl)
  26+ C000 ~                                    ret     z
  27+ C000 ~                                    ld      (DataPointCounter),a
  28+ C000 ~                                    ld      hl,(DataPointer)
  29+ C000 ~                                    ld      a,4
  30+ C000 ~                                    add     hl,a
  31+ C000 ~                                    ld      (DataPointer),hl
  32+ C000 ~                                    jp      .DebugLoop
  33+ C000 ~
  34+ C000 ~            DataPoints:             DW  10,10, 20,60, 30,20, 40,50, 100,90, 150, 30
  35+ C000 ~            DataPointSize           DB  6
  36+ C000 ~            DataPointCounter        DB  0
  37+ C000 ~            DataPointer:            DW  DataPoints
  38+ C000                                      ENDIF
  39+ C000
  40+ C000                                      IFDEF TESTMERIDIAN
  41+ C000 ~            TestMeridian:           ld      hl,20        ; 20
  42+ C000 ~                                    ld      (P_BnKVx),hl ; vx
  43+ C000 ~                                    ld      hl,20        ; 20
  44+ C000 ~                                    ld      (P_BnKVy),hl ; vy
  45+ C000 ~                                    ld      hl,20        ; 20
  46+ C000 ~                                    ld      (P_BnKUx),hl ; ux
  47+ C000 ~                                    ld      hl, $8014    ; -20
  48+ C000 ~                                    ld      (P_BnKUy),hl ; uy
  49+ C000 ~                                    ld      de,120       ; 120
  50+ C000 ~                                    ld      (P_BnKCx),de ; cx
  51+ C000 ~                                    ld      de,69        ; 69
  52+ C000 ~                                    ld      (P_BnKCy),de ; cy
  53+ C000 ~                                    call    DrawMeridian
  54+ C000                                      ENDIF
  55+ C000
  56+ C000              ; In  flight ship data tables
  57+ C000              ; In  flight ship data tables
  58+ C000              ; In  flight ship data tables
  59+ C000              ; There can be upto &12 objects in flight.
  60+ C000              ; To avoid hassle of memory heap managment, the free list
  61+ C000              ; will correspond to a memory bank offset so data will be held in
  62+ C000              ; 1 bank per universe object. Its a waste of a lot of memory but really
  63+ C000              ; 1 bank per universe object. Its a waste of a lot of memory but really
  64+ C000              ; simple that way. Each bank will be 8K and swapped on 8K slot 7 $E000 to $FFFF
  65+ C000              ; This means each gets its own line list, inwork etc
  66+ C000
  67+ C000              ; "Runtime Ship Data paged into in Bank 7"
  68+ C000              ;                      0123456789ABCDEF
  69+ C000 50 6C 61 6E  StartOfPlanet:     DB "Planet Data....."
  69+ C004 65 74 20 44
  69+ C008 61 74 61 2E
  69+ C00C 2E 2E 2E 2E
  70+ C010              ; NOTE we can cheat and pre allocate segs just using a DS for now
  71+ C010              ;   \ -> & 565D \ See ship data files chosen and loaded after flight code starts running.
  72+ C010              ; Universe map substibute for INWK
  73+ C010              ;-Camera Position of Ship----------------------------------------------------------------------------------------------------------
  74+ C010              P_BnKDataBlock:
  75+ C010                                      ;INCLUDE "./Universe/Planet/PlanetPosVars.asm"
  76+ C010                                      ;INCLUDE "./Universe/Planet/PlanetRotationMatrixVars.asm"
  77+ C010                                      ;INCLUDE "./Universe/Planet/PlanetAIRuntimeData.asm"
  78+ C010                                          UnivPosVarsMacro P
  78+ C010 00          >P_BnKxlo                     DB  0                       ; INWK+0
  78+ C011 00          >P_BnKxhi                     DB  0                       ; there are hi medium low as some times these are 24 bit
  78+ C012 00          >P_BnKxsgn                    DB  0                       ; INWK+2
  78+ C013 00          >P_BnKylo                     DB  0                       ; INWK+3 \ ylo
  78+ C014 00          >P_BnKyhi                     DB  0                       ; INWK+4 \ yHi
  78+ C015 00          >P_BnKysgn                    DB  0                       ; INWK +5
  78+ C016 00          >P_BnKzlo                     DB  0                       ; INWK +6
  78+ C017 00          >P_BnKzhi                     DB  0                       ; INWK +7
  78+ C018 00          >P_BnKzsgn                    DB  0                       ; INWK +8
  78+ C019 00 00       >P_CompassX                   DW  0
  78+ C01B 00 00       >P_CompassY                   DW  0
  78+ C01D 00 00       >P_BnKElipseCenterX           DW  0
  78+ C01F 00 00       >P_BnKElipseCenterY           DW  0
  78+ C021 00 00       >P_BnKElipseRadiusU           DW  0
  78+ C023 00 00       >P_BnKElipseRadiusV           DW  0
  79+ C025                                      ; ; Not needed as we don't rotate planets and suns    UnivRotationVarsMacro P
  80+ C025
  81+ C025                                      ;INCLUDE "./Universe/Planet/PlanetXX16Vars.asm"
  82+ C025                                      ;INCLUDE "./Universe/Planet/PlanetXX25Vars.asm"
  83+ C025                                      ;INCLUDE "./Universe/Planet/PlanetXX18Vars.asm"
  84+ C025                                          XX16DefineMacro P
  84+ C025             >;-- XX16 --------------------------------------------------------------------------------------------------------------------------
  84+ C025 00 00       >P_BnkTransmatSidevX          DW  0               ; XX16+0
  84+ C027             >P_BnkTransmatSidev           EQU P_BnkTransmatSidevX
  84+ C027 00 00       >P_BnkTransmatSidevY          DW 0                ; XX16+2
  84+ C029 00 00       >P_BnkTransmatSidevZ          DW 0                ; XX16+2
  84+ C02B 00 00       >P_BnkTransmatRoofvX          DW 0
  84+ C02D             >P_BnkTransmatRoofv           EQU P_BnkTransmatRoofvX
  84+ C02D 00 00       >P_BnkTransmatRoofvY          DW 0                ; XX16+2
  84+ C02F 00 00       >P_BnkTransmatRoofvZ          DW 0                ; XX16+2
  84+ C031 00 00       >P_BnkTransmatNosevX          DW 0
  84+ C033             >P_BnkTransmatNosev           EQU P_BnkTransmatNosevX
  84+ C033 00 00       >P_BnkTransmatNosevY          DW 0                ; XX16+2
  84+ C035 00 00       >P_BnkTransmatNosevZ          DW 0                ; XX16+2
  84+ C037 00 00       >P_BnkTransmatTransX          DW 0
  84+ C039 00 00       >P_BnkTransmatTransY          DW 0
  84+ C03B 00 00       >P_BnkTransmatTransZ          DW 0
  84+ C03D             >P_XX16                       equ P_BnkTransmatSidev
  84+ C03D             >;-- XX16Inv --------------------------------------------------------------------------------------------------------------------------
  84+ C03D 00 00       >P_BnkTransInvRow0x0          DW 0
  84+ C03F 00 00       >P_BnkTransInvRow0x1          DW 0
  84+ C041 00 00       >P_BnkTransInvRow0x2          DW 0
  84+ C043 00 00       >P_BnkTransInvRow0x3          DW 0
  84+ C045 00 00       >P_BnkTransInvRow1y0          DW 0
  84+ C047 00 00       >P_BnkTransInvRow1y1          DW 0
  84+ C049 00 00       >P_BnkTransInvRow1y2          DW 0
  84+ C04B 00 00       >P_BnkTransInvRow1y3          DW 0
  84+ C04D 00 00       >P_BnkTransInvRow2z0          DW 0
  84+ C04F 00 00       >P_BnkTransInvRow2z1          DW 0
  84+ C051 00 00       >P_BnkTransInvRow2z2          DW 0
  84+ C053 00 00       >P_BnkTransInvRow2z3          DW 0
  84+ C055             >
  84+ C055             >P_XX16Inv                    equ P_BnkTransInvRow0x0
  85+ C055                                          XX25DefineMacro P
  85+ C055             >;-- XX25 --------------------------------------------------------------------------------------------------------------------------
  85+ C055 00          >P_BnKProjxLo                 DB  0
  85+ C056 00          >P_BnKProjxHi                 DB  0
  85+ C057 00          >P_BnKProjxSgn                DB  0
  85+ C058             >P_BnKProjx                   EQU P_BnKProjxLo
  85+ C058 00          >P_BnKProjyLo                 DB  0
  85+ C059 00          >P_BnKProjyHi                 DB  0
  85+ C05A 00          >P_BnKProjySgn                DB  0
  85+ C05B             >P_BnKProjy                   EQU P_BnKProjyLo
  85+ C05B 00          >P_BnKProjzLo                 DB  0
  85+ C05C 00          >P_BnKProjzHi                 DB  0
  85+ C05D 00          >P_BnKProjzSgn                DB  0
  85+ C05E             >P_BnKProjz                   EQU P_BnKProjzLo
  85+ C05E             >P_XX25                       EQU P_BnKProjxLo
  86+ C05E                                          XX18DefineMacro P
  86+ C05E             >;-- XX18 --------------------------------------------------------------------------------------------------------------------------
  86+ C05E 00          >P_BnkDrawCam0xLo             DB  0               ; XX18+0
  86+ C05F 00          >P_BnkDrawCam0xHi             DB  0               ; XX18+1
  86+ C060 00          >P_BnkDrawCam0xSgn            DB  0               ; XX18+2
  86+ C061             >P_BnkDrawCam0x               equ P_BnkDrawCam0xLo
  86+ C061 00          >P_BnkDrawCam0yLo             DB  0               ; XX18+3
  86+ C062 00          >P_BnkDrawCam0yHi             DB  0               ; XX18+4
  86+ C063 00          >P_BnkDrawCam0ySgn            DB  0               ; XX18+5
  86+ C064             >P_BnkDrawCam0y               equ P_BnkDrawCam0yLo
  86+ C064 00          >P_BnkDrawCam0zLo             DB  0               ; XX18+6
  86+ C065 00          >P_BnkDrawCam0zHi             DB  0               ; XX18+7
  86+ C066 00          >P_BnkDrawCam0zSgn            DB  0               ; XX18+8
  86+ C067             >P_BnkDrawCam0z               equ P_BnkDrawCam0zLo
  86+ C067             >P_XX18                       equ P_BnkDrawCam0xLo
  87+ C067
  88+ C067                                          UnivCoreAIVarsMacro P
  88+ C067 00          >P_BnKRotXCounter             DB  0                       ; INWK +29
  88+ C068 00          >P_BnKRotZCounter             DB  0                       ; INWK +30
  88+ C069 00          >P_BnkCam0yLo                 DB  0                       ; INWK +33 ????
  88+ C06A 00          >P_BnkCam0yHi                 DB  0                       ; INWK +34?????
  88+ C06B 00          >P_BnKShipType                DB  0
  88+ C06C             >
  88+ C06C             >; Used to make 16 bit reads a little cleaner in source code
  88+ C06C 00 00 00    >P_BnKzPoint                  DS  3
  88+ C06F             >P_BnKzPointLo                equ P_BnKzPoint
  88+ C06F             >P_BnKzPointHi                equ P_BnKzPoint+1
  88+ C06F             >P_BnKzPointSign              equ P_BnKzPoint+2
  88+ C06F             >
  88+ C06F             >; Used for medridan drawing routines
  88+ C06F 00 00       >P_BnKCx                      DW  0
  88+ C071             >P_BnKCxSign                  EQU P_BnKCx+1
  88+ C071 00 00       >P_BnKCy                      DW  0
  88+ C073             >P_BnKCySign                  EQU P_BnKCy+1
  88+ C073 00 00       >P_BnKUx                      DW  0
  88+ C075             >P_BnKUxSign                  EQU P_BnKUx+1
  88+ C075 00 00       >P_BnKUy                      DW  0
  88+ C077             >P_BnKUySign                  EQU P_BnKUy+1
  88+ C077 00 00       >P_BnKVx                      DW  0
  88+ C079             >P_BnKVxSign                  EQU P_BnKVx+1
  88+ C079 00 00       >P_BnKVy                      DW  0
  88+ C07B             >P_BnKVySign                  EQU P_BnKVy+1
  88+ C07B 00          >P_BnKSinCNT2                 DB  0
  88+ C07C 00          >P_BnKSinCNT2Sign             DB  0
  88+ C07D 00          >P_BnKCosCNT2                 DB  0
  88+ C07E 00          >P_BnKCosCNT2Sign             DB  0
  88+ C07F 00          >P_BnKUxCos                   DB  0
  88+ C080 00          >P_BnKUxCosSign               DB  0
  88+ C081 00          >P_BnKUyCos                   DB  0
  88+ C082 00          >P_BnKUyCosSign               DB  0
  88+ C083 00          >P_BnKVxSin                   DB  0
  88+ C084 00          >P_BnKVxSinSign               DB  0
  88+ C085 00          >P_BnKVySin                   DB  0
  88+ C086 00          >P_BnKVySinSign               DB  0
  88+ C087 00          >P_BnKVxVySinSign             DB  0
  88+ C088 00          >P_BnKUxUyCosSign             DB  0
  88+ C089 00 00       >P_BnKUxCosAddVxSin           DW  0
  88+ C08B 00 00       >P_BnKUyCosSubVySin           DW  0
  88+ C08D 00          >P_BnKAngle                   DB  0
  88+ C08E             >s
  88+ C08E             >
  88+ C08E             >; General local variables used in universe object
  88+ C08E 00          >P_BnKTGT                     DB  0
  88+ C08F 00          >P_BnKSTP                     DB  0
  88+ C090 00 00 00... >P_BnKLSP                     DS  50              ; move to planet or L2 code ?
  88+ C0C2 00          >P_BnKCNT                     DB  0               ; 93
  88+ C0C3 00          >P_BnKCNT2                    DB  0               ; 93
  88+ C0C4             >; Replaced LSX2 and LSY2 with plot heaps of 64 x 2 bytes each + 1 pair for initial point
  88+ C0C4             >    IFDEF MERIDANLINEDEBUG
  88+ C0C4 ~           >prefix1?_BnKPlotXHeap               DS  $82			   ; &0EC0	    \ LSX2 bline buffer size?
  88+ C0C4 ~           >prefix1?_BnKPlotYHeap               DS  $82            ; &0F0E	    \ LSY2
  88+ C0C4             >    ENDIF
  88+ C0C4 00          >P_BnKPlotIndex               DB  0
  88+ C0C5             >    DISPLAY "TODO can we remove this and just use BnkCNT = 0 as the same thing?"
  88+ C0C5 00          >P_BnKFlag					DB  0
  88+ C0C6             >
  88+ C0C6             >; Post clipping the results are now 8 bit
  88+ C0C6 00          >P_BnKVisibility              DB  0               ; replaces general purpose xx4 in renderingW
  88+ C0C7 00          >P_BnKProjectedY              DB  0
  88+ C0C8 00          >P_BnKProjectedX              DB  0
  88+ C0C9             >P_BnKProjected               equ P_BnKProjectedY  ; resultant projected position
  88+ C0C9 00 00 00... >P_XX15Save                   DS  8
  88+ C0D1 00 00 00... >P_XX15Save2                  DS  8
  88+ C0D9 00          >P_Radius                     DB  0
  88+ C0DA             >; Used when drawing curves for the end value from previous calls to BLINE
  88+ C0DA             >; held as 16 bit values pre clipping
  88+ C0DA 00 00       >P_PrevXPos                   DW 0
  88+ C0DC 00 00       >P_PrevYPos                   DW 0
  88+ C0DE 00 00       >P_NewXPos                    DW 0
  88+ C0E0 00 00       >P_NewYPos                    DW 0
  88+ C0E2             >
  88+ C0E2             >; Colouration
  88+ C0E2             >; For planets, Colour 1 is main colour, Colour 2 is outer rim
  88+ C0E2             >; if we are going to do outer rim then may have colour thickeness as number of pixels to simulat atmosphere
  88+ C0E2 00          >P_Colour1                    DB 0
  88+ C0E3 00          >P_Colour2                    DB 0
  88+ C0E4 00          >P_Colour2Thickness           DB 0
  88+ C0E5             >
  88+ C0E5             >;        -- _pl(prf .. "Radius                     DW  0
  88+ C0E5             >;        -- _pl(prf .. "RadiusHigh                 equ prefix1?_Radius+1
  89+ C0E5
  90+ C0E5
  91+ C0E5                                      ;INCLUDE "./Universe/Planet/PlanetXX15Vars.asm"
  92+ C0E5                                          XX15DefineMacro P
  92+ C0E5             >
  92+ C0E5 00          >P_BnKXScaled                  DB  0               ; XX15+0Xscaled
  92+ C0E6 00          >P_BnKXScaledSign              DB  0               ; XX15+1xsign
  92+ C0E7 00          >P_BnKYScaled                  DB  0               ; XX15+2yscaled
  92+ C0E8 00          >P_BnKYScaledSign              DB  0               ; XX15+3ysign
  92+ C0E9 00          >P_BnKZScaled                  DB  0               ; XX15+4zscaled
  92+ C0EA 00          >P_BnKZScaledSign              DB  0               ; XX15+5zsign
  92+ C0EB 00 00       >P_XX1576                      DW  0    ; y2
  92+ C0ED             >
  92+ C0ED             >P_XX15:                       equ P_BnKXScaled
  92+ C0ED             >P_XX15VecX:                   equ P_XX15
  92+ C0ED             >P_XX15VecY:                   equ P_XX15+1
  92+ C0ED             >P_XX15VecZ:                   equ P_XX15+2
  92+ C0ED             >P_BnKXPoint:                  equ P_XX15
  92+ C0ED             >P_BnKXPointLo:                equ P_XX15+0
  92+ C0ED             >P_BnKXPointHi:                equ P_XX15+1
  92+ C0ED             >P_BnKXPointSign:              equ P_XX15+2
  92+ C0ED             >P_BnKYPoint:                  equ P_XX15+3
  92+ C0ED             >P_BnKYPointLo:                equ P_XX15+3
  92+ C0ED             >P_BnKYPointHi:                equ P_XX15+4
  92+ C0ED             >P_BnKYPointSign:              equ P_XX15+5
  92+ C0ED             >
  92+ C0ED             >P_XX1510                      EQU P_BnKXScaled    ; x1 as a 16-bit coordinate (x1_hi x1_lo)
  92+ C0ED             >P_XX1532                      EQU P_BnKYScaled   ; y1 as a 16-bit coordinate (y1_hi y1_lo)
  92+ C0ED             >P_XX1554                      EQU P_BnKZScaled   ; x2
  92+ C0ED             >P_XX1554p1                    EQU P_XX1554+1
  92+ C0ED             >P_XX15X1lo                    EQU P_XX1510
  92+ C0ED             >P_XX15X1hi                    EQU P_XX1510+1
  92+ C0ED             >P_XX15Y1lo                    EQU P_XX1532
  92+ C0ED             >P_XX15Y1hi                    EQU P_XX1532+1
  92+ C0ED             >P_XX15X2lo                    EQU P_XX1554
  92+ C0ED             >P_XX15X2hi                    EQU P_XX1554+1
  92+ C0ED             >P_XX15Y2lo                    EQU P_XX1210
  92+ C0ED             >P_XX15Y2hi                    EQU P_XX1210+1
  92+ C0ED             >P_XX15PlotX1                  EQU P_XX15
  92+ C0ED             >P_XX15PlotY1                  EQU P_XX15+1
  92+ C0ED             >P_XX15PlotX2                  EQU P_XX15+2
  92+ C0ED             >P_XX15PlotY2                  EQU P_XX15+3
  93+ C0ED                                      ;INCLUDE "./Universe/Planet/PlanetXX12Vars.asm"
  94+ C0ED                                          XX12DefineMacro P
  94+ C0ED             >;-- transmat0 --------------------------------------------------------------------------------------------------------------------------
  94+ C0ED             >; Note XX12 comes after as some logic in normal processing uses XX15 and XX12 combines
  94+ C0ED             >
  94+ C0ED             >P_XX1210                     EQU P_XX1576
  94+ C0ED             >P_XX12p1                     EQU P_XX1210+1
  94+ C0ED             >P_XX12                       EQU P_XX1210
  94+ C0ED             >
  94+ C0ED             >
  94+ C0ED             >P_BnKXX12xLo                 EQU P_XX12               ; XX12+0
  94+ C0ED             >P_BnKXX12xSign               EQU P_XX12+1   ; XX12+1
  94+ C0ED             >P_BnKXX12yLo                 EQU P_XX12+2   ; XX12+2
  94+ C0ED             >P_BnKXX12ySign               EQU P_XX12+3   ; XX12+3
  94+ C0ED             >P_BnKXX12zLo                 EQU P_XX12+4   ; XX12+4
  94+ C0ED             >P_BnKXX12zSign               EQU P_XX12+5   ; XX12+5
  94+ C0ED 00 00 00... >P_XX12Save                   DS  6
  94+ C0F3 00 00 00... >P_XX12Save2                  DS  6
  94+ C0F9             >
  94+ C0F9             >P_varXX12                    EQU P_XX12
  94+ C0F9             >; Repurposed XX12 when plotting lines
  94+ C0F9             >P_BnkY2                      equ P_XX12+0
  94+ C0F9             >P_BnKy2Lo                    equ P_XX12+0
  94+ C0F9             >P_BnkY2Hi                    equ P_XX12+1
  94+ C0F9             >P_BnkDeltaXLo                equ P_XX12+2
  94+ C0F9             >P_BnkDeltaXHi                equ P_XX12+3
  94+ C0F9             >P_BnkDeltaYLo                equ P_XX12+4
  94+ C0F9             >P_BnkDeltaYHi                equ P_XX12+5
  94+ C0F9             >P_BnkGradient                equ P_XX12+2
  94+ C0F9             >P_BnkTemp1                   equ P_XX12+2
  94+ C0F9             >P_BnkTemp1Lo                 equ P_XX12+2
  94+ C0F9             >P_BnkTemp1Hi                 equ P_XX12+3
  94+ C0F9             >P_BnkTemp2                   equ P_XX12+3
  94+ C0F9             >P_BnkTemp2Lo                 equ P_XX12+3
  94+ C0F9             >P_BnkTemp2Hi                 equ P_XX12+4
  95+ C0F9
  96+ C0F9                                          ClippingVarsMacro P
  96+ C0F9             >;-- Clipping code for universe objects -------------------------------------------
  96+ C0F9 00          >P_XX13        DB 0
  96+ C0FA             >
  96+ C0FA             >
  96+ C0FA 00 00 00 00 >P_varK3		 DS	4				; D2
  96+ C0FE             >P_centreX     equ P_varK3
  96+ C0FE 00          >P_varK3p2	 DB	0				; 42
  96+ C0FF 00          >P_varK3p3	 DB	0				; 43
  96+ C100             >P_varK3p1	 equ P_varK3+1			; D3
  96+ C100 00 00 00 00 >P_varK4		 DS	4				; E0
  96+ C104             >P_centreY     equ P_varK4
  96+ C104             >P_varK4p1	 equ P_varK4+1			; D3
  96+ C104 00 00 00... >P_varK5       DS  6
  96+ C10A             >P_varK5p2     equ P_varK5+2
  96+ C10A 00 00 00... >P_varK6       DS  6
  96+ C110             >P_varK6p2     equ P_varK6+2
  96+ C110             >
  96+ C110 00          >P_XX12p2      DB 0    ; The line's gradient * 256 (so 1.0 = 256)
  96+ C111 00          >P_XX12p3      DB 0    ; The direction of slope ; + LT to BR; - TR to BL
  96+ C112 00          >P_XX12p4      DB 0
  96+ C113 00          >P_XX12p5      DB 0
  96+ C114             >P_Delta_x     EQU P_XX12p2
  96+ C114             >P_Delta_y     EQU P_XX12p4
  96+ C114 00          >P_Tvar        DB 0    ; The gradient of slope ; 0 if it's a shallow slope (DX > DY) ; &FF if it's a steep slope (DY > DX) Returns:  XX15        m         x1 as an 8-bit coordinate XX15+2               y1 as an 8-bit coordinate
  96+ C115 00          >P_Qvar        DB 0
  96+ C116 00          >P_Rvar        DB 0    ; general purpose for calcs  Paired with S must be done this way round for SUBHeightFromY1 etc to work
  96+ C117 00          >P_Svar        DB 0    ; sign variable
  96+ C118             >P_SRvarPair   EQU P_Rvar
  96+ C118 00          >P_Xreg        DB 0
  96+ C119 00          >P_Yreg        DB 0
  96+ C11A             >P_YXregPair   EQU P_Xreg
  97+ C11A
  98+ C11A
  99+ C11A              P_BnK_Data_len               EQU $ - P_BnKDataBlock
 100+ C11A
 101+ C11A
 102+ C11A                                          ClippingCodeLL28Macro P
 102+ C11A 21 02 F5    >P_LL28_6502:         ld      hl,Qvar                 ; CMP Q                  \ If A >= Q, then the answer will not fit in one byte,
 102+ C11D 4E          >                            ld      c,(hl)                  ; using c as Q var
 102+ C11E B9          >                            cp      c
 102+ C11F             >                            FlipCarryFlag
 102+ C11F 3F          >                        ccf
 102+ C120 DA 48 C1    >                            jp      c, P_LL2_6502    ; BCS LL2                \ so jump to LL2 to return 255
 102+ C123 06 FE       >                            ld      b,$FE                   ; LDX #%11111110         \ Set R to have bits 1-7 set, so we can rotate through 7 loop iterations, getting a 1 each time, and then we use b as Rvar
 102+ C125 CB 27       >P_LL31_6502:          sla     a                       ; ASL A                  \ Shift A to the left
 102+ C127 DA 3C C1    >                            jp      c, P_LL29_6502             ; BCS LL29               \ If bit 7 of A was set, then jump straight to the subtraction
 102+ C12A             >                            FlipCarryFlag                   ;                          If A < N, then C flag is set.
 102+ C12A 3F          >                        ccf
 102+ C12B             >                            JumpIfALTNusng c, P_LL31_SKIPSUB_6502 ; CMP Q              \ If A < Q, skip the following subtraction
 102+ C12B B9          >                        cp      c
 102+ C12C DA 31 C1    >                        jp		c, P_LL31_SKIPSUB_6502
 102+ C12F             >                                                                ; BCC P%+4
 102+ C12F 91          >                            sub     c                       ; SBC Q                  \ A >= Q, so set A = A - Q
 102+ C130             >                            ClearCarryFlag
 102+ C130 B7          >                        or a
 102+ C131             >P_LL31_SKIPSUB_6502:  FlipCarryFlag
 102+ C131 3F          >                        ccf
 102+ C132 CB 10       >                            rl      b                       ; ROL R                  \ Rotate the counter in R to the left, and catch the result bit into bit 0 (which will be a 0 if we didn't do the subtraction, or 1 if we did)
 102+ C134 DA 25 C1    >                            jp      c, P_LL31_6502            ; BCS LL31               \ If we still have set bits in R, loop back to LL31 to do the next iteration of 7
 102+ C137 78          >                            ld      a,b
 102+ C138 32 03 F5    >                            ld      (Rvar),a
 102+ C13B C9          >                            ret                             ; RTS                    \ R left with remainder of division
 102+ C13C 91          >P_LL29_6502:          sub     c                       ; SBC Q                  \ A >= Q, so set A = A - Q
 102+ C13D             >                            SetCarryFlag                    ; SEC                    \ Set the C flag to rotate into the result in R
 102+ C13D 37          >                        scf
 102+ C13E CB 10       >                            rl      b                       ; ROL R                  \ Rotate the counter in R to the left, and catch the result bit into bit 0 (which will be a 0 if we didn't do the subtraction, or 1 if we did)
 102+ C140 DA 25 C1    >                            jp      c, P_LL31_6502            ; BCS LL31               \ If we still have set bits in R, loop back to LL31 to do the next iteration of 7
 102+ C143 78          >                            ld      a,b                     ; RTS                    \ Return from the subroutine with R containing the
 102+ C144 32 03 F5    >                            ld      (Rvar),a                ; .
 102+ C147 C9          >                            ret                             ; .                      \ remainder of the division
 102+ C148 3E FF       >P_LL2_6502:          ld      a,$FF                   ; LDA #255               \ The division is very close to 1, so return the closest
 102+ C14A 32 03 F5    >                            ld      (Rvar),a                ; STA R                  \ possible answer to 256, i.e. R = 255
 102+ C14D             >                            SetCarryFlag                    ; we failed so need carry flag set
 102+ C14D 37          >                        scf
 102+ C14E C9          >                            ret                             ; RTS                    \ Return from the subroutine
 102+ C14F             >
 102+ C14F 3A 05 F5    >P_ADDXRegtoY1:       ld      a,(Xreg)                ; Set y1 = y1 + (Y X)
 102+ C152 4F          >                            ld      c,a
 102+ C153 06 00       >                            ld      b,0
 102+ C155 2A E7 C0    >                            ld      hl,(P_XX1532)
 102+ C158             >                            ClearCarryFlag
 102+ C158 B7          >                        or a
 102+ C159 ED 4A       >                            adc     hl,bc
 102+ C15B 22 E7 C0    >                            ld      (P_XX1532),hl
 102+ C15E C9          >                            ret
 102+ C15F             >
 102+ C15F ED 4B 05 F5 >P_ADDYXRegtoY1:      ld      bc,(YXregPair)          ; Set y1 = y1 + (Y X)
 102+ C163 2A E7 C0    >                            ld      hl,(P_XX1532)
 102+ C166             >                            ClearCarryFlag
 102+ C166 B7          >                        or a
 102+ C167 ED 4A       >                            adc     hl,bc
 102+ C169 22 E7 C0    >                            ld      (P_XX1532),hl
 102+ C16C C9          >                            ret
 102+ C16D             >
 102+ C16D ED 4B 05 F5 >P_ADDYXRegtoX1:      ld      bc,(YXregPair)          ; Set x1 = x1 + (Y X)
 102+ C171 2A E5 C0    >                            ld      hl,(P_XX1510)
 102+ C174             >                            ClearCarryFlag
 102+ C174 B7          >                        or a
 102+ C175 ED 4A       >                            adc     hl,bc
 102+ C177 22 E5 C0    >                            ld      (P_XX1510),hl
 102+ C17A C9          >                            ret
 102+ C17B             >
 102+ C17B 2A E7 C0    >P_SUBBCFromY1:       ld      hl,(P_XX1532)             ; Set (S R) = (y1_hi y1_lo) - BC where BC can be say screen height
 102+ C17E             >                            ClearCarryFlag
 102+ C17E B7          >                        or a
 102+ C17F ED 42       >                            sbc     hl,bc
 102+ C181 22 03 F5    >                            ld      (SRvarPair),hl
 102+ C184 C9          >                            ret
 102+ C185             >
 102+ C185 2A 05 F5    >P_AddSRToYX:         ld      hl,(YXregPair)
 102+ C188 ED 5B 03 F5 >                            ld      de,(SRvarPair)
 102+ C18C             >                            ClearCarryFlag
 102+ C18C B7          >                        or a
 102+ C18D ED 5A       >                            adc     hl,de
 102+ C18F 22 05 F5    >                            ld      (YXregPair),hl
 102+ C192 C9          >                            ret
 102+ C193             >
 102+ C193 7C          >P_ClampX:            ld      a,h
 102+ C194 A7          >                            and     a
 102+ C195 7D          >                            ld      a,l
 102+ C196 C8          >                            ret     z
 102+ C197 F2 9C C1    >                            jp      p,.Max255
 102+ C19A             >.ClampXMin0:                ZeroA
 102+ C19A AF          >                        xor a
 102+ C19B C9          >                            ret
 102+ C19C 3E FF       >.Max255:                    ld      a,$FF
 102+ C19E C9          >                            ret
 102+ C19F             >
 102+ C19F 7C          >P_ClampY:            ld      a,h
 102+ C1A0 A7          >                            and     a
 102+ C1A1 CA AC C1    >                            jp      z,.ClampYlo
 102+ C1A4 F2 A9 C1    >                            jp      p,.Max127
 102+ C1A7             >.ClampYMin0:                ZeroA
 102+ C1A7 AF          >                        xor a
 102+ C1A8 C9          >                            ret
 102+ C1A9 3E 7F       >.Max127:                    ld      a,127
 102+ C1AB C9          >                            ret
 102+ C1AC 7D          >.ClampYlo:                  ld      a,l
 102+ C1AD A7          >                            and     a
 102+ C1AE F0          >                            ret     p
 102+ C1AF 3E 7F       >                            ld      a,127
 102+ C1B1 C9          >                            ret
 103+ C1B2                                          ClippingCodeLL120Macro P
 103+ C1B2 3A E5 C0    >P_LL120_6502:        ld      a,(P_XX1510)              ;LDA XX15               \ Set R = x1_lo
 103+ C1B5 32 03 F5    >                            ld      (Rvar),a                ;STA R
 103+ C1B8 CD 64 C2    >                            call    P_LL129_6502              ;JSR LL129              \ Call LL129 to do the following:  Q = XX12+2 = line gradient, A = S EOR XX12+3 = S EOR slope direction  (S R) = |S R|
 103+ C1BB F5          >                            push    af                      ;PHA                    \ Store A on the stack so we can use it later
 103+ C1BC             >; DONT NEED PLUS MESSES UP FLAGS                    push    af                      ;LDX T                  \ If T is non-zero, then it's a steep slope, so jump
 103+ C1BC 3A 01 F5    >                            ld      a,(Tvar)                ; .
 103+ C1BF 32 05 F5    >                            ld      (Xreg),a                ;. REDUNDANT REMOVE IN OPTIMISATION
 103+ C1C2 A7          >                            and     a                       ;BNE LL121              \ down to LL121 to calculate this instead (Y X) = (S R) / Q
 103+ C1C3             >; DONT NEED PLUS MESSES UP FLAGS                    pop     af                      ;.                      (recover teh saved A before the cp)
 103+ C1C3 20 48       >                            jr      nz,P_LL121_6502           ;.
 103+ C1C5             >;..   (Y X) = (S R) * Q - must be ABS, sign determined by opposite of the sign of the value on top of stack
 103+ C1C5             >P_LL122_6502:         ZeroA                           ;LDA #0                 \ Set A = 0
 103+ C1C5 AF          >                        xor a
 103+ C1C6             >
 103+ C1C6             >                            IFDEF DEBUG_LL122_DIRECT"
 103+ C1C6 ~           >                                  DISPLAY "DIRECT CALL TO LL122 so dummy push a to stack with 0"
 103+ C1C6 ~           >                                  push    af
 103+ C1C6             >                            ENDIF
 103+ C1C6 32 05 F5    >                            ld      (Xreg),a                ;TAX                    \ Set (Y X) = 0 so we can start building the answer here
 103+ C1C9 32 06 F5    >                            ld      (Yreg),a                ;TAY
 103+ C1CC 21 04 F5    >                            ld      hl,Svar
 103+ C1CF ED 4B 03 F5 >                            ld      bc,(SRvarPair)          ;LSR S                  \ Shift (S R) to the right, so we extract bit 0 of (S R)
 103+ C1D3             >                            ShiftBCRight1                   ;ROR R                  \ into the C flag
 103+ C1D3 CB 38       >			   srl b
 103+ C1D5 CB 19       >			   rr  c
 103+ C1D7 ED 43 03 F5 >                            ld      (SRvarPair),bc
 103+ C1DB 21 02 F5    >                            ld      hl, Qvar                ;ASL Q                  \ Shift Q to the left, catching bit 7 in the C flag
 103+ C1DE CB 26       >                            sla     (hl)                    ;.
 103+ C1E0 30 03       >                            jr      nc, P_LL126_6502          ;BCC LL126              \ If C (i.e. the next bit from Q) is clear, do not do
 103+ C1E2             >; the addition for this bit of Q, and instead skip to LL126 to just do the shifts
 103+ C1E2 CD 72 F5    >P_LL125_6502:        call    AddSRToYX               ;TXA                    \ Set (Y X) = (Y X) + (S R)  starting with the low bytes And then doing the high bytes
 103+ C1E5 ED 4B 03 F5 >P_LL126_6502:        ld      bc,(SRvarPair)          ;LSR S                  \ Shift (S R) to the right
 103+ C1E9             >                            ShiftBCRight1                   ;ROR R
 103+ C1E9 CB 38       >			   srl b
 103+ C1EB CB 19       >			   rr  c
 103+ C1ED ED 43 03 F5 >                            ld      (SRvarPair),bc          ;.
 103+ C1F1 21 02 F5    >                            ld      hl, Qvar                ;ASL Q                  \ Shift Q to the left, catching bit 7 in the C flag
 103+ C1F4 CB 26       >                            sla     (hl)                    ;.
 103+ C1F6 38 EA       >                            jr      c,P_LL125_6502            ;BCS LL125              \ If C (i.e. the next bit from Q) is set, loop back to LL125 to do the addition for this bit of Q
 103+ C1F8 20 EB       >                            jr      nz,P_LL126_6502           ;BNE LL126              \ If Q has not yet run out of set bits, loop back to LL126 to do the \"shift\" part of shift-and-add until we have done additions for all the set bits in Q, to give us our multiplication result
 103+ C1FA F1          >                            pop     af                      ;PLA                    \ Restore A, which we calculated above, from the stack
 103+ C1FB A7          >                            and     a                       ;BPL LL133              \ If A is positive jump to LL133 to negate (Y X) and
 103+ C1FC F2 55 C2    >                            jp      p,P_LL133_6502            ;.
 103+ C1FF             >                            ;.. return from the subroutine using a tail call
 103+ C1FF C9          >                            ret                             ;RTS                    \ Return from the subroutine
 104+ C200                                          ClippingCodeLL122Macro P
 104+ C200 CD 64 C2    >P_LL123_6502:         call    P_LL129_6502              ;JSR LL129              \ Call LL129 to do the following   Q = XX12+2   = line gradient
 104+ C203 F5          >                             push    af                      ;PHA                    \ Store A on the stack so we can use it later
 104+ C204             >; DONT NEED PLUS MESSES UP FLAGS                    push    af                      ;LDX T                  \ If T is non-zero, then it's a steep slope, so jump up
 104+ C204 3A 01 F5    >                             ld      a,(Tvar)                ; .
 104+ C207 32 05 F5    >                             ld      (Xreg),a                ;BNE LL122              \ to LL122 to calculate this instead:
 104+ C20A A7          >                             and     a                       ;.
 104+ C20B             >;  DONT NEED PLUS MESSES UP FLAGS                    pop     af                      ;.
 104+ C20B 20 B8       >                             jr      nz,P_LL122_6502           ;.
 104+ C20D             >;--  The following calculates: (Y X) = (S R) / Q using the same shift-and-subtract algorithm that's documented in TIS2
 104+ C20D 3E FF       >P_LL121_6502:         ld      a,$FF                   ;LDA #%11111111         \ Set Y = %11111111
 104+ C20F 32 06 F5    >                             ld      (Yreg),a                ;TAY
 104+ C212 CB 27       >                             sla     a                       ;ASL A                  \ Set X = %11111110
 104+ C214 32 05 F5    >                             ld      (Xreg),a                ;TAX
 104+ C217             >;--  This sets (Y X) = %1111111111111110, so we can rotate through 15 loop iterations, getting a 1 each time, and then getting a 0 on the 16th iteration... and we can also use it to catch our result bits into bit 0 each time
 104+ C217 ED 4B 03 F5 >P_LL130_6502:         ld      bc,(SRvarPair)          ;ASL R                  \ Shift (S R) to the left
 104+ C21B             >                            ShiftBCLeft1                    ;.
 104+ C21B CB 21       >			   sla c
 104+ C21D CB 10       >			   rl  b
 104+ C21F ED 43 03 F5 >                            ld      (SRvarPair),bc          ;ROL S
 104+ C223 3A 04 F5    >                            ld      a,(Svar)                ;LDA S                  \ Set A = S
 104+ C226 38 07       >                            jr      c, P_LL131_6502           ;BCS LL131              \ If bit 7 of S was set, then jump straight to the subtraction
 104+ C228 21 02 F5    >                            ld      hl,Qvar                 ;CMP Q                  \ If A < Q (i.e. S < Q), skip the following subtractions
 104+ C22B BE          >                            cp      (hl)
 104+ C22C             >                            FlipCarryFlag                   ; note flip carry flag here to simulate 6502 operation
 104+ C22C 3F          >                        ccf
 104+ C22D 30 12       >                            jr      nc,P_LL132A_6502          ;BCC LL132  (NOTE Carry flag reversed in Z80 for CP)
 104+ C22F             >P_LL131_6502:         FlipCarryFlag                   ;flip carry to make it act like a 6502 borrow
 104+ C22F 3F          >                        ccf
 104+ C230 9E          >                            sbc     (hl)                    ;SBC Q                  \ A >= Q (i.e. S >= Q) so set:
 104+ C231 32 04 F5    >                            ld      (Svar),a                ;STA S
 104+ C234 3A 03 F5    >                            ld      a,(Rvar)                ;LDA R                  \ And then doing the high bytes
 104+ C237             >                            ClearCarryFlag                  ;\   S = (A R) - Q  = (S R) - Q starting with the low bytes (we know the C flag is set so the subtraction will be correct)
 104+ C237 B7          >                        or a
 104+ C238 DE 00       >                            sbc     0                       ;SBC #0
 104+ C23A 32 03 F5    >                            ld      (Rvar),a                ;STA R
 104+ C23D             >                            SetCarryFlag                    ;SEC                    \ Set the C flag to rotate into the result in (Y X)
 104+ C23D 37          >                        scf
 104+ C23E C3 42 C2    >                            jp      P_LL132_6502              ;added so that we can do a 6502 style carry above
 104+ C241 00          >P_LL132A_6502:        nop; FlipCarryFlag
 104+ C242 ED 4B 05 F5 >P_LL132_6502:         ld      bc,(YXregPair)          ; Rotate the counter in (Y X) to the left, and catch the
 104+ C246             >                            RollBCLeft1                     ; ROL A                  \ result bit into bit 0 (which will be a 0 if we didn't
 104+ C246 CB 11       >               rl  c
 104+ C248 CB 10       >               rl  b
 104+ C24A ED 43 05 F5 >                            ld      (YXregPair),bc          ; TAX                    \ do the subtraction, or 1 if we did)
 104+ C24E 38 C7       >                            jr      c, P_LL130_6502           ; BCS LL130              \ If we still have set bits in (Y X), loop back to LL130 to do the next iteration of 15, until we have done the whole division
 104+ C250             >        IFDEF DEBUG_LL121_DIRECT
 104+ C250 ~           >              DISPLAY "DIRECT CALL TO LL121 so dummy push"
 104+ C250 ~           >                            push    af
 104+ C250             >        ENDIF
 104+ C250 F1          >                            pop     af                      ; PLA                    \ Restore A, which we calculated above, from the stack
 104+ C251 A7          >                            and     a                       ; BMI LL128              \ If A is negative jump to LL128 to return from the
 104+ C252 FA 63 C2    >                            jp      m, P_LL128_6502           ; .                      \ subroutine with (Y X) as is
 104+ C255 ED 4B 05 F5 >P_LL133_6502:          ld      bc,(YXregPair)          ; TXA                    \ Otherwise negate (Y X) using two's complement by first
 104+ C259             >                            macronegate16bc                 ; EOR #%11111111         \ setting the low byte to ~X + 1
 104+ C259 AF          >					xor 	a
 104+ C25A 91          >                    sub 	c
 104+ C25B 4F          >                    ld 		c,a
 104+ C25C 9F          >                    sbc 	a,a
 104+ C25D 90          >                    sub 	b
 104+ C25E 47          >                    ld 		b,a
 104+ C25F ED 43 05 F5 >                            ld      (YXregPair),bc          ; ADC #1                 \ The addition works as we know the C flag is clear from\ when we passed through the BCS above
 104+ C263 C9          >P_LL128_6502:          ret                             ; RTS                    \ Return from the subroutine
 104+ C264             >;-------------------------------------------------------------------------------------------------------
 104+ C264             >;..  Do the following, in this order: Q = XX12+2 A = S EOR XX12+3 (S R) = |S R|
 104+ C264             >;..  This sets up the variables required above to calculate (S R) / XX12+2 and give the result the opposite sign to XX13+3.
 104+ C264 F5          >P_LL129_6502:        push    af                      ;LDX XX12+2             \ Set Q = XX12+2
 104+ C265 3A 10 C1    >                            ld      a,(P_XX12p2)              ;.
 104+ C268 32 05 F5    >                            ld      (Xreg),a                ;.
 104+ C26B 32 02 F5    >                            ld      (Qvar),a                ;STX Q
 104+ C26E F1          >                            pop     af                      ;.
 104+ C26F 3A 04 F5    >                            ld      a,(Svar)                ;LDA S                  \ If S is positive, jump to LL127
 104+ C272 A7          >                            and     a                       ;BPL LL127
 104+ C273 F2 8B C2    >                            jp      p,P_LL127_6502            ;.
 104+ C276             >                            ZeroA                           ;.LDA #0                \ Otherwise set R = -R
 104+ C276 AF          >                        xor a
 104+ C277             >                            ClearCarryFlag                  ;SEC
 104+ C277 B7          >                        or a
 104+ C278 21 03 F5    >                            ld      hl, Rvar                ;SBC R
 104+ C27B 9E          >                            sbc     (hl)                    ;.
 104+ C27C 32 03 F5    >                            ld      (Rvar),a                ;STA R
 104+ C27F 3A 04 F5    >                            ld      a,(Svar)                ;LDA S                  \ Push S onto the stack
 104+ C282 F5          >                            push    af                      ;PHA
 104+ C283 EE FF       >                            xor     $FF                     ;EOR #%11111111         \ Set S = ~S + 1 + C  ?? is this all just doing |Svar|?
 104+ C285 CE 00       >                            adc     0                       ;ADC #0
 104+ C287 32 04 F5    >                            ld      (Svar),a                ;STA S
 104+ C28A F1          >                            pop     af                      ;PLA                    \ Pull the original, negative S from the stack into A
 104+ C28B 21 11 C1    >P_LL127_6502:        ld      hl,P_XX12p3               ;EOR XX12+3             \ Set A = original argument S EOR'd with XX12+3
 104+ C28E AE          >                            xor     (hl)                    ;.
 104+ C28F C9          >                            ret                             ;RTS                    \ Return from the subroutine
 104+ C290             >;----------------------------------------------------------------------------------------------------------------
 104+ C290             >;--- LL118 Move along a point until on screen
 104+ C290             >; In XX1510 x1 as a 16-bit coordinate (x1_hi x1_lo)
 104+ C290             >;    XX1532 y1 as a 16-bit coordinate (y1_hi y1_lo)
 104+ C290             >;    XX12p2 The line's gradient * 256 (so 1.0 = 256)
 104+ C290             >;    XX12p3 The direction of slope: * Positive = top left to bottom right * Negative (bit 7 set) = top right to bottom left
 104+ C290             >;    T      The gradient of slope:* 0 if it's a shallow slope * &FF if it's a steep slope
 104+ C290             >;  Out  XX150               x1 as an 8-bit coordinate
 104+ C290             >;       XX152               y1 as an 8-bit coordinate
 104+ C290             >;----------------------------------------------------------------------------------------------------------------
 104+ C290             >
 104+ C290 3A E6 C0    >P_LL118_6502:         ld      a,(P_XX1510+1)            ; LDA XX15+1             \ If x1_hi is positive, jump down to LL119 to skip the
 104+ C293 A7          >                            and     a                       ; BPL LL119              \ .
 104+ C294 F2 B1 C2    >                            jp      p, P_LL119_6502           ;                        \ following
 104+ C297 32 04 F5    >.X1Negative:                ld      (Svar),a                ; STA S                  \ Otherwise x1_hi is negative, i.e. off the left of the screen, so set S = x1_hi
 104+ C29A CD B2 C1    >                            call    P_LL120_6502              ; Call LL120 to calculate:  (Y X) = (S x1_lo) * XX12+2      if T = 0   = x1 * gradient
 104+ C29D             >                                                    ;                            (Y X) = (S x1_lo) / XX12+2      if T <> 0  = x1 / gradient
 104+ C29D             >                                                    ; with the sign of (Y X) set to the opposite of the line's direction of slope
 104+ C29D CD 4C F5    >                            call    ADDYXRegtoY1             ; Set y1 = y1 + (Y X)
 104+ C2A0 22 E7 C0    >                            ld      (P_XX1532),hl             ; .
 104+ C2A3 21 00 00    >                            ld      hl,0                    ; Set x1 = 0
 104+ C2A6 22 E5 C0    >                            ld      (P_XX1510),hl             ; .
 104+ C2A9 3E 00       >                            ld      a,0                     ; set 0 up for replacemetn of the TAX and BEQ bit
 104+ C2AB 32 05 F5    >                            ld      (Xreg),a                ; TAX                    \ Set X = 0 so the next BEQ becomes a jmp but we will do it anyway in next line
 104+ C2AE C3 C7 C2    >                            jp      P_LL134_6502              ; just do the jump to LL134 rather than setting to equal flag and then jumping
 104+ C2B1             >;-- Entering LL119 a will always be the value of X1 Hi byte
 104+ C2B1 CA C7 C2    >P_LL119_6502:         jp      z,P_LL134_6502            ; BEQ LL134              \ x1_hi = 0 then jump down to LL134 to skip the following, as the x-coordinate is already on-screen
 104+ C2B4             >                                                            ;                        \ (as 0 <= (x_hi x_lo) <= 255)
 104+ C2B4 32 04 F5    >                            ld      (Svar),a                ; STA S                  \ Otherwise x1_hi is positive, i.e. x1 >= 256 and off
 104+ C2B7 3D          >                            dec     a                       ; DEC S                  \ the right side of the screen, so set S = x1_hi - 1
 104+ C2B8 32 04 F5    >                            ld      (Svar),a                ;
 104+ C2BB CD B2 C1    >                            call    P_LL120_6502              ; JSR LL120              \ Call LL120 to calculate:  (Y X) = (S x1_lo) * XX12+2      if T = 0   = (x1 - 256) * gradient
 104+ C2BE             >                                                            ;                        \                           (Y X) = (S x1_lo) / XX12+2      if T <> 0 = (x1 - 256) / gradient
 104+ C2BE             >                                                            ;                        \ with the sign of (Y X) set to the opposite of the line's direction of slope
 104+ C2BE CD 4C F5    >                            call    ADDYXRegtoY1             ; TXA                    \ Set y1 = y1 + (Y X)
 104+ C2C1 21 FF 00    >                            ld      hl,255                  ; LDX #255               \ Set x1 = 255
 104+ C2C4 22 E5 C0    >                            ld      ( P_XX1510 ),hl             ; STX XX15 ;INX; STX XX15+1
 104+ C2C7             >;--  We have moved the point so the x-coordinate is on  screen (i.e. in the range 0-255), so now for the  y-coordinate
 104+ C2C7 3A E8 C0    >P_LL134_6502:        ld      a,(P_XX1532+1)            ; LDA XX15+3             \ If y1_hi is positive, jump down to LL119 to skip
 104+ C2CA A7          >                            and     a                       ; BPL LL135              \ the following
 104+ C2CB F2 E3 C2    >                            jp      p, P_LL135_6502           ; .
 104+ C2CE 32 04 F5    >                            ld      (Svar),a                ; STA S                  \ Otherwise y1_hi is negative, i.e. off the top of the screen, so set S = y1_hi
 104+ C2D1 3A E7 C0    >                            ld      a, ( P_XX1532)             ; LDA XX15+2             \ Set R = y1_lo
 104+ C2D4 32 03 F5    >                            ld      (Rvar),a                ; STA R
 104+ C2D7 CD 00 C2    >                            call    P_LL123_6502              ; JSR LL123              \ Call LL123 to calculate:  (Y X) = (S R) / XX12+2      if T = 0 = y1 / gradient
 104+ C2DA             >                                                            ;                        \                           (Y X) = (S R) * XX12+2      if T <> 0 = y1 * gradient
 104+ C2DA             >                                                            ;                         with the sign of (Y X) set to the opposite of the line's direction of slope
 104+ C2DA CD 5A F5    >                            call    ADDYXRegtoX1            ; TXA                    \ Set x1 = x1 + (Y X)
 104+ C2DD 21 00 00    >                            ld      hl,0                    ; LDA #0                 \ Set y1 = 0
 104+ C2E0 22 E7 C0    >                            ld      ( P_XX1532),hl             ; STA XX15+2, XX15+3
 104+ C2E3 01 80 00    >P_LL135_6502:         ld      bc,128                  ; LDA XX15+2             \ Set (S R) = (y1_hi y1_lo) - screen height
 104+ C2E6 CD 68 F5    >                            call    SUBBCFromY1             ; .                      \ .
 104+ C2E9 38 0C       >                            jr      c, P_LL136_6502           ; BCC LL136              \ If the subtraction underflowed, i.e. if y1 < screen height, then y1 is already on-screen, so jump to LL136
 104+ C2EB             >                                                    ;                        \ to return from the subroutine, as we are done
 104+ C2EB             >;;-   If we get here then y1 >= screen height, i.e. off the bottom of the screen
 104+ C2EB CD 00 C2    >P_LL139_6502:         call    P_LL123_6502              ; JSR LL123              \ Call LL123 to calculate:   (Y X) = (S R) / XX12+2      if T = 0  = (y1 - screen height) / gradient
 104+ C2EE             >;                        \                            (Y X) = (S R) * XX12+2      if T <> 0 = (y1 - screen height) * gradient
 104+ C2EE             >;                          with the sign of (Y X) set to the opposite of the line's direction of slope
 104+ C2EE CD 5A F5    >                            call    ADDYXRegtoX1            ; TXA                    \ Set x1 = x1 + (Y X)
 104+ C2F1 21 7F 00    >                            ld      hl, 127                 ; LDA #Y*2-1             \ Set y1 = 2 * #Y - 1. The constant #Y is 96, the y-coordinate of the mid-point of the space view (or in our case 127)
 104+ C2F4 22 E7 C0    >                            ld      (P_XX1532),hl             ; STA XX15+3             \ pixel row of the space view
 104+ C2F7 C9          >P_LL136_6502:         ret                             ; RTS                    \ Return from the subroutine
 104+ C2F8             >;-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 104+ C2F8             >;-- LL145 LINE CLIP
 104+ C2F8             >;-- OPTISIATIONS - VERTICAL HORZONTAL POINT |DX| = |DY| (and all the veriants for +/-)
 104+ C2F8             >;-- This routine clips the line from (x1, y1) to (x2, y2) so it fits on-screen, or returns an error if it can't be clipped to fit. The arguments are 16-bit coordinates, and the clipped line is returned using 8-bit screen coordinates.
 104+ C2F8             >;-- This part sets XX13 to reflect which of the two points are on-screen and off-screen.
 104+ C2F8             >;-- IN  : XX15(1 0) x1 XX15(3 2) y1 XX15(5 4) x2 XX12(1 0) y2
 104+ C2F8             >;-- OUT : (X1, Y1), (X2, Y2) Screen coordinate C flag  Clear if the clipped line fits on-screen, set if itdoesn't
 104+ C2F8             >;         XX13 The state of the original coordinates on-screen:* 0   = (x2, y2) on-screen* 95(64)  = (x1, y1) on-screen,  (x2, y2) off-screen* 191(128) = (x1, y1) off-screen, (x2, y2) off-screen
 104+ C2F8             >;              So XX13 is non-zero if the end of the line was clipped,meaning the next line sent to BLINE can't join onto the end but has to start a new segment
 104+ C2F8             >;         SWAP The swap status of the returned coordinates:* &FF if we swapped the values of (x1, y1) and(x2, y2) as part of the clipping process* 0 if the coordinates are still in the same order
 104+ C2F8             >; TODO treat horizonal/vert and single pixel as special cases
 105+ C2F8                                          ClippingCodeLL145Macro P
 105+ C2F8             >P_LL145_6502:        ZeroA                           ; LDA #0                 \ Set SWAP = 0
 105+ C2F8 AF          >                        xor a
 105+ C2F9 32 4F CB    >                            ld      (SWAP),a                ; STA SWAP
 105+ C2FC 3A EA C0    >                            ld      a,(P_XX15X2hi)            ; LDA XX15+5             \ Set A = x2_hi (use b as a substibute for a)
 105+ C2FF 47          >                            ld      b,a                     ; .
 105+ C300             >; Note that as we are interested in the sign of XX113 then this needs to be >= 128 or < 128 or 0, we will use 191 as per bbc for now
 105+ C300             >; for the screen coord we will use 127 though, we use c as a temporay X register
 105+ C300 3E BF       >P_LL147_6502:        ld      a,191                   ; LDX #Y*2-1             \ Set X = #Y * 2 - 1. The constant #Y is 96, the y-coordinate of the mid-point of the space view, so this sets Y2 to 191, the y-coordinate of the bottom pixel row of the space view
 105+ C302 32 05 F5    >                            ld      (Xreg),a                ; .
 105+ C305             >;                    ld      a,127
 105+ C305             >;                    ld      c,a
 105+ C305 78          >.CheckX2Y2High:             ld      a,b                     ; ORA XX12+1             \ If one or both of x2_hi and y2_hi are non-zero, jump
 105+ C306 21 EC C0    >                            ld      hl,P_XX15Y2hi    ; .
 105+ C309 B6          >                            or      (hl)                    ; .
 105+ C30A C2 1A C3    >                            jp      nz,P_LL107_6502  ; BNE LL107              \ to LL107 to skip the following, leaving X at 191
 105+ C30D 3E 7F       >.CheckY2Lo:                 ld      a,127 ;,c               ; get back the temporary x reg from c
 105+ C30F 21 EB C0    >                            ld      hl,P_XX15Y2lo    ; CPX XX12               \ If y2_lo > the y-coordinate of the bottom of screen (a is being used as X at this point still)
 105+ C312 BE          >                            cp      (hl)                    ; .
 105+ C313 DA 1A C3    >                            jp      c,P_LL107_6502   ; BCC LL107              \ then (x2, y2) is off the bottom of the screen, so skip the following instruction, leaving X at 127
 105+ C316             >                            ZeroA                           ; LDX #0                 \ Set X = 0
 105+ C316 AF          >                        xor a
 105+ C317 32 05 F5    >                            ld      (Xreg),a
 105+ C31A 3A 05 F5    >P_LL107_6502:        ld      a,(Xreg)                ; STX XX13               \ Set XX13 = X, so we have * XX13 = 0 if x2_hi = y2_hi = 0, y2_lo is on-screen* XX13 = 191 if x2_hi or y2_hi are non-zero or y2_lois off the bottom of the screen
 105+ C31D 32 F9 C0    >                            ld      ( P_XX13),a      ; now c is released as a temporary x reg
 105+ C320 3A E6 C0    >                            ld      a,(P_XX15X1hi)   ; LDA XX15+1             \ If one or both of x1_hi and y1_hi are non-zero, jump
 105+ C323 21 E8 C0    >                            ld      hl,P_XX15Y1hi    ; ORA XX15+3             \ to LL83
 105+ C326 B6          >                            or      (hl)                    ; .
 105+ C327 C2 67 C3    >                            jp      nz,P_LL83_6502            ; BNE LL83
 105+ C32A             >; DEBUG SIMPLIFIED CODE, now we just compare y1 lo > 127
 105+ C32A 3A F7 F4    >                            ld      a,(XX1532)              ; If y1_lo > the y-coordinate of the bottom of screen (If A >= N, then C flag is reset.) ;ld      a,127                   ; LDA #Y*2-1             \ If y1_lo > the y-coordinate of the bottom of screen (If A >= N, then C flag is reset.)
 105+ C32D 26 7F       >                            ld      h,127                   ; then (x1, y1) is off the bottom of the screen, so jump                                 ;ld      hl,XX1532               ; CMP XX15+2             \ then (x1, y1) is off the bottom of the screen, so jump
 105+ C32F BC          >                            cp      h                       ; to LL83                                                                                ;cp      (hl)                    ; .                      \ to LL83
 105+ C330 D2 67 C3    >                            jp      nc, P_LL83_6502         ; BCC LL83               \ . (y1 > 127 jump, i.e. 127 <= y1 )
 105+ C333 3A F9 C0    >                            ld      a,( P_XX13)                ; LDA XX13               \ If we get here, (x1, y1) is on-screen. If XX13 is non-zero, i.e. (x2, y2) is off-screen, jump
 105+ C336 A7          >                            and     a                       ; BNE LL108              \ to LL108 to halve it before continuing at LL83
 105+ C337 C2 62 C3    >                            jp      nz,P_LL108_6502
 105+ C33A             >; If we get here, the high bytes are all zero, which means the x-coordinates are < 256 and therefore fit on screen, and neither coordinate is off the bottom of the screen. That means both coordinates are already on
 105+ C33A             >; screen, so we don't need to do any clipping, all weneed to do is move the low bytes into (X1, Y1) and X2, Y2) and return
 105+ C33A             >; X1 = XX15 (10)  Y1 = XX15+1 X2 = XX15+2 Y2 = XX15+3
 105+ C33A 2A E5 C0    >P_LL146_6502:        ld      hl,(P_XX15X1lo)           ;  Save X1 to XX1510
 105+ C33D CD 93 C1    >                            call    P_ClampX
 105+ C340 32 E5 C0    >                            ld      (P_XX15X1lo),a
 105+ C343 2A E7 C0    >                            ld      hl,(P_XX15Y1lo)           ;  hl = y1
 105+ C346 CD 9F C1    >                            call    P_ClampY
 105+ C349 32 E6 C0    >                            ld      (P_XX1510+1),a            ;  XX1510... = [X1][Y1]
 105+ C34C             >
 105+ C34C 2A E9 C0    >                            ld      hl,(P_XX15X2lo)           ;  de = x2
 105+ C34F CD 93 C1    >                            call    P_ClampX
 105+ C352 32 E7 C0    >                            ld      (P_XX1510+2),a            ;  XX1510... = [X1][Y1][X2]
 105+ C355             >
 105+ C355 2A EB C0    >                            ld      hl,(P_XX15Y2lo)           ;  bc = y2
 105+ C358 CD 9F C1    >                            call    P_ClampY
 105+ C35B 32 E8 C0    >                            ld      (P_XX1510+3),a            ;  XX1510... = [X1][Y1][X2][Y2]
 105+ C35E             >                            ClearCarryFlag                  ; CLC                    \ Clear the C flag as the clipped line fits on-screen
 105+ C35E B7          >                        or a
 105+ C35F C9          >                            ret                             ; RTS                    \ Return from the subroutine
 105+ C360             >P_LL109_6502:        SetCarryFlag                    ; SEC                    \ Set the C flag to indicate the clipped line does not fit on-screen
 105+ C360 37          >                        scf
 105+ C361 C9          >                            ret                             ; RTS                    \ Return from the subroutine
 105+ C362 21 F9 C0    >P_LL108_6502:        ld      hl, P_XX13                 ; LSR XX13               \ If we get here then (x2, y2) is off-screen and XX13 is
 105+ C365 CB 3E       >                            srl     (hl)                    ;                        \ 191, (128)  so shift XX13 right to halve it to 95 (64)
 105+ C367             >;-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 105+ C367             >;-- LL145 (Part 2 of 4)
 105+ C367 3A F9 C0    >P_LL83_6502:         ld      a,( P_XX13)               ; LDA XX13               \ If XX13 < 128 then only one of the points is on-screen
 105+ C36A A7          >                            and     a                                ; BPL LL115              \ so jump down to LL115 to skip the checks of whether
 105+ C36B F2 B7 C3    >                            jp      p,P_LL115_6502            ;                        \ both points are in the strips to the right or bottom of the screen
 105+ C36E             >;-- If we get here, both points are off-screen
 105+ C36E 3A E6 C0    >                            ld      a,(P_XX15X1hi)            ; LDA XX15+1             \ If both x1_hi and x2_hi have bit 7 set, jump to LL109
 105+ C371 21 EA C0    >                            ld      hl,P_XX15X2hi             ; AND XX15+5             \ to return from the subroutine with the C flag set, as
 105+ C374 A6          >                            and     (hl)
 105+ C375 FA 60 C3    >                            jp      m, P_LL109_6502           ; BMI LL109              \ the entire line is above the top of the screen
 105+ C378 3A E8 C0    >                            ld      a,(P_XX15Y1hi)            ; LDA XX15+3             \ If both y1_hi and y2_hi have bit 7 set, jump to LL109
 105+ C37B 21 EC C0    >                            ld      hl,P_XX15Y2hi             ; AND XX12+1             \ to return from the subroutine with the C flag set, as
 105+ C37E A6          >                            and     (hl)                             ; BMI LL109              \ the entire line is to the left of the screen
 105+ C37F FA 60 C3    >                            jp      m,P_LL109_6502            ; .
 105+ C382 3A E6 C0    >                            ld      a,(P_XX15X1hi)            ; LDX XX15+1             \ Set A = X = x1_hi - 1
 105+ C385 3D          >                            dec     a                                ; DEX
 105+ C386 32 05 F5    >                            ld      (Xreg),a                         ; TXA
 105+ C389 F5          >                            push    af                               ; LDX XX15+5     SP+1    \ Set XX12+2 = x2_hi - 1, we need to save a register first
 105+ C38A 3A EA C0    >                            ld      a,(P_XX15X2hi)            ; .
 105+ C38D 3D          >                            dec     a                                ; DEX
 105+ C38E 32 05 F5    >                            ld      (Xreg),a                         ; STX XX12+2
 105+ C391 F1          >                            pop     af                               ; .              SP+0    restore a register
 105+ C392 21 EC C0    >                            ld      hl,P_XX15Y2hi             ; ORA XX12+2             \ If neither (x1_hi - 1) or (x2_hi - 1) have bit 7 set,
 105+ C395 B6          >                            or      (hl)                             ; .
 105+ C396 F2 60 C3    >                            jp      p, P_LL109_6502           ; BPL LL109              \ jump to LL109 to return from the subroutine with the C flag set, as the line doesn't fit on-screen
 105+ C399             >; for this bit, while z80 uses carry the opposite way to 6502, 6502 uses borrow, in effect inverting the flip
 105+ C399             >;NOTEFOUND A PATH WHERE IT DOES NOT DO THIS CHECK e.g. 90 B2 8D A2
 105+ C399 3A E7 C0    >P_LL83_DEBUG:          ld      a,(P_XX1532)              ; LDA XX15+2             \ If y1_lo < y-coordinate of screen bottom, clear the C
 105+ C39C FE 80       >                            cp      128                     ; CMP #Y*2               \ flag, otherwise set it (NOTE FLIPPED IN z80)
 105+ C39E 3A E8 C0    >                            ld      a,(P_XX1532+1)            ; LDA XX15+3             \ Set XX12+2 = y1_hi - (1 - C), so:
 105+ C3A1 DE 00       >                            sbc     0                       ; SBC #0                 \ .
 105+ C3A3 32 10 C1    >                            ld      (P_XX12p2),a              ; STA XX12+2             \  * Set XX12+2 = y1_hi - 1 if y1_lo is on-screen * Set XX12+2 = y1_hi  otherwise We do this subtraction because we are only interested
 105+ C3A6 3A EB C0    >                            ld      a,(P_XX1576)              ; LDA XX12               \ If y2_lo < y-coordinate of screen bottom, clear the C
 105+ C3A9 FE 80       >                            cp      128                     ; CMP #Y*2               \ flag, otherwise set it
 105+ C3AB 3A EC C0    >                            ld      a,(P_XX1576+1)            ; LDA XX12+1             \ Set XX12+2 = y2_hi - (1 - C), so:
 105+ C3AE DE 00       >                            sbc     0                       ; SBC #0                   * Set XX12+1 = y2_hi - 1 if y2_lo is on-screen  * Set XX12+1 = y2_hi     otherwise
 105+ C3B0 21 10 C1    >                            ld      hl,P_XX12p2               ; ORA XX12+2             \ If neither XX12+1 or XX12+2 have bit 7 set, jump to
 105+ C3B3 B6          >                            or      (hl)                    ; .
 105+ C3B4 F2 60 C3    >                            jp      p,P_LL109_6502            ; BPL LL109              \ LL109 to return from the subroutine with the C flag set, as the line doesn't fit on-screen
 105+ C3B7             >;-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 105+ C3B7             >;-- LL145 (Part 3 of 4) Summary: Clip line: Calculate the line's gradient
 105+ C3B7 3A 06 F5    >P_LL115_6502:        ld      a,(Yreg)                ; TYA                    \ Store Y on the stack so we can preserve it through the call to this routine
 105+ C3BA F5          >                            push    af                      ; PHA            SP+1    \ call to this subroutine
 105+ C3BB 2A E9 C0    >                            ld      hl,(P_XX15X2lo)             ; LDA XX15+4             \ Set XX12+2 = x2_lo - x1_lo
 105+ C3BE ED 5B E5 C0 >                            ld      de,(P_XX15X1lo)             ; LDA XX15+5             \ Set XX12+3 = x2_hi - x1_hi
 105+ C3C2             >                            ClearCarryFlag                  ; SBC XX15+1
 105+ C3C2 B7          >                        or a
 105+ C3C3 ED 52       >                            sbc     hl,de                   ; .
 105+ C3C5 22 53 FB    >                            ld      (delta_x),hl            ; .
 105+ C3C8 2A EB C0    >                            ld      hl,(P_XX15Y2lo)             ; LDA XX12               \ Set XX12+4 = y2_lo - y1_lo
 105+ C3CB ED 5B E7 C0 >                            ld      de,(P_XX15Y1lo)             ;
 105+ C3CF             >                            ClearCarryFlag                  ; SBC XX15+2
 105+ C3CF B7          >                        or a
 105+ C3D0 ED 52       >                            sbc     hl,de                   ; .
 105+ C3D2 22 55 FB    >                            ld      (delta_y),hl            ; .
 105+ C3D5             >; So we now have:  delta_x in XX12(3 2)  delta_y in XX12(5 4) where the delta is (x1, y1) - (x2, y2))
 105+ C3D5 3A 56 FB    >                            ld      a,(delta_y+1)           ; EOR XX12+3             \ Set S = the sign of delta_x * the sign of delta_y, so
 105+ C3D8 21 54 FB    >                            ld      hl,delta_x+1
 105+ C3DB AE          >                            xor     (hl)
 105+ C3DC 32 04 F5    >                            ld      (Svar),a                ; STA S                  \ if bit 7 of S is set, the deltas have different signs (perhaps we should do bit 7 mask ?????????
 105+ C3DF 2A 55 FB    >                            ld      hl,(delta_y)            ; LDA XX12+5             \ If delta_y_hi is positive, jump down to LL110 to skip
 105+ C3E2 7C          >                            ld      a,h
 105+ C3E3 A7          >                            and     a
 105+ C3E4 F2 F0 C3    >                            jp      p, P_LL110_6502  ; BPL LL110              \ the following
 105+ C3E7             >                            NegHL                           ; LDA #0                 \ Otherwise flip the sign of delta_y to make it
 105+ C3E7 AF          >                    xor a
 105+ C3E8 95          >                    sub l
 105+ C3E9 6F          >                    ld l,a
 105+ C3EA 9F          >                    sbc a,a
 105+ C3EB 94          >                    sub h
 105+ C3EC 67          >                    ld h,a
 105+ C3ED 22 55 FB    >                            ld      (delta_y),hl            ; positive, starting with the low bytes
 105+ C3F0 2A 53 FB    >P_LL110_6502:        ld      hl,(delta_x)            ; LDA XX12+3             \ If delta_x_hi is positive, jump down to LL111 to skip
 105+ C3F3 7C          >                            ld      a,h                     ; BPL LL111              \ the following
 105+ C3F4 A7          >                            and     a                       ; .
 105+ C3F5 F2 01 C4    >                            jp      p,P_LL111_6502            ; .
 105+ C3F8             >                            NegHL                           ; SEC                    \ Otherwise flip the sign of delta_x to make it
 105+ C3F8 AF          >                    xor a
 105+ C3F9 95          >                    sub l
 105+ C3FA 6F          >                    ld l,a
 105+ C3FB 9F          >                    sbc a,a
 105+ C3FC 94          >                    sub h
 105+ C3FD 67          >                    ld h,a
 105+ C3FE 22 53 FB    >                            ld      (delta_x),hl            ; LDA #0                 \ positive, starting with the low bytes
 105+ C401             >;--  We now keep halving |delta_x| and |delta_y| until both of them have zero in their high bytes
 105+ C401 2A 53 FB    >P_LL111_6502:        ld      hl,(delta_x)
 105+ C404 ED 5B 55 FB >                            ld      de,(delta_y)
 105+ C408 7C          >                            ld      a,h                     ; TAX                    \ If |delta_x_hi| is non-zero, skip the following
 105+ C409 B2          >                            or      d                       ; BNE LL112
 105+ C40A CA 1F C4    >                            jp      z,P_LL113_6502            ; LDX XX12+5             \ If |delta_y_hi| = 0, jump down to LL113 (as both |delta_x_hi| and |delta_y_hi| are 0)
 105+ C40D             >P_LL112_6502:        ShiftHLRight1                   ; LSR A                  \ Halve the value of delta_x in (A XX12+2)
 105+ C40D CB 3C       >			   srl h
 105+ C40F CB 1D       >			   rr  l
 105+ C411             >                            ShiftDERight1                   ; LSR XX12+5             \ Halve the value of delta_y XX12(5 4)
 105+ C411 CB 3A       >			   srl d
 105+ C413 CB 1B       >			   rr  e
 105+ C415 22 53 FB    >                            ld      (delta_x),hl
 105+ C418 ED 53 55 FB >                            ld      (delta_y),de            ; write them back so we don't end up in an infinite loop
 105+ C41C C3 01 C4    >                            jp       P_LL111_6502                  ; JMP LL111              \ Loop back to LL111
 105+ C41F             >;-- By now, the high bytes of both |delta_x| and |delta_y| are zero
 105+ C41F             >P_LL113_6502:        ZeroA                           ; STX T                  \ We know that X = 0 as that's what we tested with a BEQ  above, so this sets T = 0
 105+ C41F AF          >                        xor a
 105+ C420 32 01 F5    >                            ld      (Tvar),a
 105+ C423 3A 53 FB    >                            ld      a,(delta_x)             ; LDA XX12+2             \ If delta_x_lo < delta_y_lo, so our line is more
 105+ C426 21 55 FB    >                            ld      hl,delta_y              ; CMP XX12+4             \ vertical than horizontal, jump to LL114
 105+ C429 BE          >                            cp      (hl)
 105+ C42A DA 3C C4    >                            jp      c, P_LL114_6502  ; BCC LL114              ; if delta y > delta x then its a steep slope so we do 256*dy/dx
 105+ C42D             >;-- If we get here then our line is more horizontal than vertical, so it is a shallow slope
 105+ C42D 3A 53 FB    >                            ld      a,(delta_x)             ; STA Q                  \ Set Q = delta_x_lo
 105+ C430 32 02 F5    >                            ld      (Qvar),a                ; .
 105+ C433 3A 55 FB    >                            ld      a,(delta_y)             ; LDA XX12+4             \ Set A = delta_y_lo
 105+ C436 CD 1A C1    >                            call    P_LL28_6502      ; JSR LL28               \ Call LL28 to calculate: R = 256 * A / Q = 256 * delta_y_lo / delta_x_lo
 105+ C439 C3 4D C4    >                            jp      P_LL116_6502     ; JMP LL116              \ Jump to LL116, as we now have the line's gradient in R
 105+ C43C             >;-- If we get here then our line is more vertical than horizontal, so it is a steep slope
 105+ C43C 3A 55 FB    >P_LL114_6502:        ld      a,(delta_y)             ; LDA XX12+4             \ Set Q = delta_y_lo
 105+ C43F 32 02 F5    >                            ld      (Qvar),a                ; STA Q
 105+ C442 3A 53 FB    >                            ld      a,(delta_x)             ; LDA XX12+2             \ Set A = delta_x_lo
 105+ C445 CD 1A C1    >                            call    P_LL28_6502               ; JSR LL28               \ Call LL28 to calculate: R = 256 * A / Q = 256 * delta_x_lo / delta_y_lo
 105+ C448 3E FF       >                            ld      a,$FF                   ; DEC T                  \ T was set to 0 above, so this sets T = &FF when our
 105+ C44A 32 01 F5    >                            ld      (Tvar),a                ;                        \ line is steep
 105+ C44D             >;----------------------------------------------------------------------------------------------------------------
 105+ C44D             >;--- LL116 This part sets things up to call the routine in LL188, which does the actual clipping.
 105+ C44D             >;--  If we get here, then R has been set to the gradient of the line (x1, y1) to(x2, y2), with T indicating the gradient of slope: * 0   = shallow slope (more horizontal than vertical)
 105+ C44D             >;--                                                                                                                                * &FF = steep slope (more vertical than horizontal)
 105+ C44D             >;-- XX13 has been set as follows: * 0   = (x1, y1) off-screen, (x2, y2) on-screen * 95(64)  = (x1, y1) on-screen,  (x2, y2) off-screen * 191(128) = (x1, y1) off-screen, (x2, y2) off-screen
 105+ C44D 3A 03 F5    >P_LL116_6502:        ld      a,(Rvar)                ; LDA R                  \ Store the gradient in XX12+2
 105+ C450 32 10 C1    >                            ld      (P_XX12p2),a     ; STA XX12+2
 105+ C453 3A 04 F5    >                            ld      a,(Svar)                ; LDA S                  \ Store the type of slope in XX12+3, bit 7 clear means
 105+ C456 32 11 C1    >                            ld      (P_XX12p3),a              ; STA XX12+3             \ top left to bottom right, bit 7 set means top right to bottom left
 105+ C459 3A F9 C0    >                            ld      a,( P_XX13)                ; LDA XX13               \ If XX13 = 0, skip the following instruction
 105+ C45C FE 00       >                            cp      0                       ; BEQ LL138
 105+ C45E CA 64 C4    >                            jp      z,P_LL138_6502            ; .
 105+ C461 F2 80 C4    >                            jp      p, P_LLX117_6502          ; If XX13 is positive, it must be 95 (64) as 128 would be negative). This means (x1, y1) is on-screen but (x2, y2) isn't, so we jump
 105+ C464             >;-- If we get here, XX13 = 0 or 191, so (x1, y1) is off-screen and needs clipping
 105+ C464 CD 90 C2    >P_LL138_6502:          call    P_LL118_6502              ; JSR LL118              \ Call LL118 to move (x1, y1) along the line onto the screen, i.e. clip the line at the (x1, y1) end
 105+ C467 3A F9 C0    >                            ld      a,( P_XX13)                ; LDA XX13               \ If XX13 = 0, i.e. (x2, y2) is on-screen, jump down to
 105+ C46A A7          >                            and     a
 105+ C46B F2 A3 C4    >                            jp      p,P_LL124_6502            ; BPL LL124              \ LL124 to return with a successfully clipped line
 105+ C46E             >;-- If we get here, XX13 = 191 (128) (both coordinates areoff-screen)
 105+ C46E 3A E6 C0    >P_LL117_6502:          ld      a,(P_XX1510+1)            ; LDA XX15+1             \ If either of x1_hi or y1_hi are non-zero, jump to
 105+ C471 21 E8 C0    >                            ld      hl,P_XX1532+1             ; ORA XX15+3             \ LL137 to return from the subroutine with the C flag
 105+ C474 B6          >                            or      (hl)
 105+ C475 C2 AB C4    >                            jp      nz, P_LL137_6502          ; BNE LL137              \ set, as the line doesn't fit on-screen
 105+ C478 3A E7 C0    >                            ld      a,(P_XX1532)              ; LDA XX15+2             \ If y1_lo > y-coordinate of the bottom of the screen
 105+ C47B FE 80       >                            cp      128                     ; CMP #Y*2               \ jump to LL137 to return from the subroutine with the
 105+ C47D D2 AB C4    >                            jp      nc, P_LL137_6502          ; BCS LL137              \ C flag set, as the line doesn't fit on-screen
 105+ C480             >;-- If we get here, XX13 = 95 or 191, and in both cases (x2, y2) is off-screen, so we now need to swap the (x1, y1) and (x2, y2) coordinates around before doing the actual clipping, because we need to clip (x2, y2) but the clipping routine at LL118 only clips (x1, y1)
 105+ C480 2A E5 C0    >P_LLX117_6502:         ld      hl,( P_XX1510)             ; LDX XX15               \ Swap x1_lo = x2_lo
 105+ C483 ED 5B E9 C0 >                            ld      de,( P_XX1554)
 105+ C487 ED 53 E5 C0 >                            ld      ( P_XX1510),de
 105+ C48B 22 E9 C0    >                            ld      ( P_XX1554),hl
 105+ C48E 2A E7 C0    >                            ld      hl,( P_XX1532)             ; LDX XX15+2             \ Swap y1_lo = y2_lo
 105+ C491 ED 5B EB C0 >                            ld      de,( P_XX1576)
 105+ C495 ED 53 E7 C0 >                            ld      ( P_XX1532),de
 105+ C499 22 EB C0    >                            ld      ( P_XX1576),hl
 105+ C49C CD 90 C2    >                            call    P_LL118_6502              ; JSR LL118              \ Call LL118 to move (x1, y1) along the line onto the screen, i.e. clip the line at the (x1, y1) end
 105+ C49F 21 4F CB    >                            ld      hl,SWAP
 105+ C4A2 35          >                            dec     (hl)                    ; DEC SWAP               \ Set SWAP = &FF to indicate that we just clipped the line at the (x2, y2) end by swapping the coordinates (the DEC does this as we set SWAP to 0 at the start of this subroutine)
 105+ C4A3 F1          >P_LL124_6502:          pop     af                      ; PLA            SP+0    \ Restore Y from the stack so it gets preserved through
 105+ C4A4 32 06 F5    >                            ld      (Yreg),a                ; TAY                    \ the call to this subroutine
 105+ C4A7 CD 3A C3    >                            call    P_LL146_6502              ; JMP LL146              \ Jump up to LL146 to move the low bytes of (x1, y1) and (x2, y2) into (X1, Y1) and (X2, Y2), and return from the subroutine with a successfully clipped line
 105+ C4AA C9          >                            ret                             ; then exit so we don't pop it twice
 105+ C4AB F1          >P_LL137_6502:          pop     af                      ; PLA            SP+0    \ Restore Y from the stack so it gets preserved through
 105+ C4AC 32 06 F5    >                            ld      (Yreg),a                ; TAY                    \ the call to this subroutine
 105+ C4AF             >                            SetCarryFlag                    ; SEC                    \ Set the C flag to indicate the clipped line does not fit on-screen
 105+ C4AF 37          >                        scf
 105+ C4B0 C9          >                            ret                             ; RTS                    \ Return from the subroutine
 105+ C4B1             >
 105+ C4B1             >
 105+ C4B1 21 29 FB    >P_l2_draw_6502_line:   ld      hl,x1                           ; copy from currnet position to 6502 variables
 105+ C4B4 11 E5 C0    >                            ld      de, P_XX1510
 105+ C4B7 01 08 00    >                            ld      bc,4*2
 105+ C4BA ED B0       >                            ldir
 105+ C4BC CD F8 C2    >                            call    P_LL145_6502                      ; perform 6502 version
 105+ C4BF D8          >                            ret     c                               ; returns if carry is set as its a no draw
 105+ C4C0 21 00 00    >.CopyBackResults:           ld      hl,0
 105+ C4C3 22 29 FB    >                            ld      (x1),hl
 105+ C4C6 22 2B FB    >                            ld      (y1),hl
 105+ C4C9 22 2D FB    >                            ld      (x2),hl
 105+ C4CC 22 2F FB    >                            ld      (y2),hl
 105+ C4CF 3A E5 C0    >                            ld      a,( P_XX1510)
 105+ C4D2 32 29 FB    >                            ld      (x1),a
 105+ C4D5 4F          >                            ld      c,a
 105+ C4D6 3A E6 C0    >                            ld      a,( P_XX1510+1)
 105+ C4D9 32 2B FB    >                            ld      (y1),a
 105+ C4DC 47          >                            ld      b,a
 105+ C4DD 3A E7 C0    >                            ld      a,( P_XX1510+2)
 105+ C4E0 32 2D FB    >                            ld      (x2),a
 105+ C4E3 5F          >                            ld      e,a
 105+ C4E4 3A E8 C0    >                            ld      a,( P_XX1510+3)
 105+ C4E7 32 2F FB    >                            ld      (y2),a
 105+ C4EA 57          >                            ld      d,a
 105+ C4EB 3E FF       >                            ld      a,$FF
 105+ C4ED             >                            ClearCarryFlag
 105+ C4ED B7          >                        or a
 105+ C4EE C9          >                            ret
 106+ C4EF                                          ; Not needed as we don't do rotation matrices for planets
 107+ C4EF                                          ;InitialiseUniverseObjMacro P
 108+ C4EF
 109+ C4EF              ; --------------------------------------------------------------
 110+ C4EF              ; clear out the planet data block
 111+ C4EF 21 10 C0     ResetP_BnKData:         ld      hl,P_BnKDataBlock
 112+ C4F2 11 0A 01                             ld      de,P_BnK_Data_len
 113+ C4F5 AF                                   xor     a
 114+ C4F6 CD 32 7E                             call    memfill_dma
 115+ C4F9 C9                                   ret
 116+ C4FA              ; --------------------------------------------------------------
 117+ C4FA 21 10 C0     ResetP_BnKPosition:     ld      hl,P_BnKxlo
 118+ C4FD 06 09                                ld      b, 3*3
 119+ C4FF AF                                   xor     a
 120+ C500 77           .zeroLoop:              ld      (hl),a
 121+ C501 23                                   inc     hl
 122+ C502 10 FC                                djnz    .zeroLoop
 123+ C504 C9                                   ret
 124+ C505              ; --------------------------------------------------------------
 125+ C505              ; Normalise planet vectors
 126+ C505              ; Not needed as we don't rotate planets and suns
 127+ C505              ;P_NormaliseRotMat:      ld      hl,P_BnkTransmatNosevZ+1   ; initialise loop
 128+ C505              ;                        ld      c,ConstNorm                 ; c = Q = norm = 197
 129+ C505              ;                        ld      a,c
 130+ C505              ;                        ld      (varQ),a                    ; set up varQ
 131+ C505              ;                        ld      b,9                         ; total of 9 elements to transform
 132+ C505              ;.LL21Loop:              ld      d,(hl)
 133+ C505              ;                        dec     hl
 134+ C505              ;                        ld      e,(hl)                      ; de = hilo now   hl now = pointer to low byte
 135+ C505              ;                        ShiftDELeft1                        ; De = DE * 2
 136+ C505              ;                        ld      a,d                         ; a = hi byte after shifting
 137+ C505              ;                        push	hl
 138+ C505              ;                        push	bc
 139+ C505              ;                        call    Norm256mulAdivQ
 140+ C505              ;                        ;===call    RequAmul256divC				; R = (2(hi).0)/ConstNorm - LL28 Optimised BFRDIV R=A*256/Q = delta_y / delta_x Use Y/X grad. as not steep
 141+ C505              ;                        ld      a,c                         ; BFRDIV returns R also in l reg
 142+ C505              ;                        pop		bc
 143+ C505              ;                        pop		hl							; bc gets wrecked by BFRDIV
 144+ C505              ;                        ld      (hl),a                      ; write low result to low byte so zlo = (zhl *2)/197, we keep hi byte in tact as we need the sign bit
 145+ C505              ;                        dec     hl                          ; now hl = hi byte of pre val e.g z->y->x
 146+ C505              ;                        djnz    .LL21Loop                    ; loop from 2zLo through to 0xLo
 147+ C505              ;                        ret
 148+ C505
 149+ C505
 150+ C505              ; This uses UBNKNodeArray as the list
 151+ C505              ; the array is 256 * 2 bytes
 152+ C505              ; counter is current row y pos
 153+ C505              ; byte 1 is start x pos
 154+ C505              ; byte 2 is end x pos
 155+ C505              ; if they are both 0 then skip
 156+ C505              ; its always horizontal, yellow
 157+ C505              ; 16 different Planet Colours
 158+ C505              ; codes D<> Dark, M<> Mid, L<> Light B<> Brightest
 159+ C505              PlanetColour10DG        equ      40     ; Green
 160+ C505              PlanetColour20DG        equ      44
 161+ C505              PlanetColour11MG        equ      44
 162+ C505              PlanetColour21MG        equ      80
 163+ C505              PlanetColour12LG        equ      80
 164+ C505              PlanetColour22LG        equ      84
 165+ C505              PlanetColour13BG        equ      84
 166+ C505              PlanetColour23BG        equ      120
 167+ C505              PlanetColour14DB        equ      1      ; Blue
 168+ C505              PlanetColour24DB        equ      2
 169+ C505              PlanetColour15MB        equ      2
 170+ C505              PlanetColour25MB        equ      3
 171+ C505              PlanetColour16LB        equ      3
 172+ C505              PlanetColour26LB        equ      67
 173+ C505              PlanetColour17DO        equ      68     ; Orange
 174+ C505              PlanetColour27DO        equ      100
 175+ C505              PlanetColour18MO        equ      100
 176+ C505              PlanetColour28MO        equ      136
 177+ C505              PlanetColour19LO        equ      136
 178+ C505              PlanetColour29LO        equ      168
 179+ C505              PlanetColour1ABO        equ      168
 180+ C505              PlanetColour2ABO        equ      204
 181+ C505              PlanetColour1BDR        equ      64     ; Red
 182+ C505              PlanetColour2BDR        equ      96
 183+ C505              PlanetColour1CMR        equ      96
 184+ C505              PlanetColour2CMR        equ      128
 185+ C505              PlanetColour1DLR        equ      128
 186+ C505              PlanetColour2DLR        equ      160
 187+ C505              PlanetColour1EMC        equ      18     ; Cyan
 188+ C505              PlanetColour2EMC        equ      22
 189+ C505              PlanetColour1FMP        equ      163    ; Purple
 190+ C505              PlanetColour2FMP        equ      226    ; note avoiding transparent
 191+ C505
 192+ C505 28 2C 50 54  PlanetColour1Table:     DB       PlanetColour10DG, PlanetColour11MG, PlanetColour12LG, PlanetColour13BG
 193+ C509 01 02 03 44                          DB       PlanetColour14DB, PlanetColour15MB, PlanetColour16LB, PlanetColour17DO
 194+ C50D 64 88 A8 40                          DB       PlanetColour18MO, PlanetColour19LO, PlanetColour1ABO, PlanetColour1BDR
 195+ C511 60 80 12 A3                          DB       PlanetColour1CMR, PlanetColour1DLR, PlanetColour1EMC, PlanetColour1FMP
 196+ C515 2C 50 54 78  PlanetColour2Table:     DB       PlanetColour20DG, PlanetColour21MG, PlanetColour22LG, PlanetColour23BG
 197+ C519 02 03 43 64                          DB       PlanetColour24DB, PlanetColour25MB, PlanetColour26LB, PlanetColour27DO
 198+ C51D 88 A8 CC 60                          DB       PlanetColour28MO, PlanetColour29LO, PlanetColour2ABO, PlanetColour2BDR
 199+ C521 80 A0 16 E2                          DB       PlanetColour2CMR, PlanetColour2DLR, PlanetColour2EMC, PlanetColour2FMP
 200+ C525
 201+ C525 44           WarpPlanetByHL:         ld      b,h
 202+ C526 4D                                   ld      c,l
 203+ C527 26 00                                ld      h,0
 204+ C529 ED 5B 17 C0                          ld      de,(P_BnKzhi)
 205+ C52D 3A 16 C0                             ld      a,(P_BnKzlo)
 206+ C530 6F                                   ld      l,a
 207+ C531                                      MMUSelectMathsBankedFns
 207+ C531 ED 91 50 66 >                     nextreg MathsBankedFnsMMU, BankMathsBankedFns
 207+ C535 CD 10 01       call  SubBCHfromDELsigned
 208+ C538 ED 53 17 C0                          ld      (P_BnKzhi),de
 209+ C53C 7D                                   ld      a,l
 210+ C53D 32 16 C0                             ld      (P_BnKzlo),a
 211+ C540 C9                                   ret
 212+ C541
 213+ C541              ; PLANET
 214+ C541 21 18 C0     WarpPlanetCloser:       ld      hl,P_BnKzsgn
 215+ C544 7E           .PositiveAxis:          ld      a,(hl)
 216+ C545                                      ReturnIfALTNusng 2                      ; hard liit along z axis
 216+ C545 FE 02       >                        cp    2
 216+ C547 D8          >                        ret	 c
 217+ C548 35                                   dec     (hl)
 218+ C549 C9                                   ret
 219+ C54A
 220+ C54A              ; It should normally be behind but someone could fly past a planet, turn aroudn and jump
 221+ C54A 21 18 C0     WarpPlanetFurther:      ld      hl,P_BnKzsgn
 222+ C54D 7E                                   ld      a,(hl)
 223+ C54E                                      ReturnIfAGTENusng $7F                   ; this is the hard limit else it woudl turn negative and flip to -0
 223+ C54E FE 7F       >                        cp    $7F
 223+ C550 D0          >                        ret	 nc
 224+ C551 34                                   inc     (hl)                           ; if its negative it will still increase as we will block insane values
 225+ C552 C9                                   ret
 226+ C553
 227+ C553              ; --------------------------------------------------------------
 228+ C553              ; This sets current universe object to a planet,they use sign + 23 bit positions
 229+ C553              ; we need to have variable size and color
 230+ C553              CalculatePlanetWarpPositon:
 231+ C553 3A 47 80     .CalcZPosition:         ld      a,(WorkingSeeds+1)      ; seed d & 7
 232+ C556 E6 07                                and     %00000111               ; .
 233+ C558 C6 07                                add     a,7                     ; + 7
 234+ C55A CB 2F                                sra     a                       ; / 2
 235+ C55C 32 18 C0     .SetZPosition:          ld      (P_BnKzsgn),a            ; << 16 (i.e. load into z sign byte
 236+ C55F 21 00 00                             ld      hl, $0000               ; now set z hi and lo
 237+ C562 22 16 C0                             ld      (P_BnKzlo),hl            ;
 238+ C565 3A 4B 80     .CalcXandYPosition:     ld      a,(WorkingSeeds+5)      ; seed f & 3
 239+ C568 E6 03                                and     %00000011               ; .
 240+ C56A C6 03                                add     a,3                     ; + 3
 241+ C56C 47                                   ld      b,a
 242+ C56D 3A 4A 80                             ld      a,(WorkingSeeds+4)      ; get low bit of seed e
 243+ C570 E6 01                                and     %00000001
 244+ C572 1F                                   rra                             ; roll bit 0 into bit 7
 245+ C573 B0                                   or      b                       ; now calc is f & 3 * -1 if seed e is odd
 246+ C574 32 12 C0     .SetXandYPosition:      ld      (P_BnKxsgn),a            ; set into x and y sign byte
 247+ C577 32 15 C0                             ld      (P_BnKysgn),a            ; .
 248+ C57A 78                                   ld      a,b                     ; we want just seed f & 3 here
 249+ C57B 32 11 C0                             ld      (P_BnKxhi),a             ; set into x and y high byte
 250+ C57E 32 14 C0                             ld      (P_BnKyhi),a             ; .
 251+ C581                                      ZeroA
 251+ C581 AF          >                        xor a
 252+ C582 32 10 C0                             ld      (P_BnKxlo),a
 253+ C585 32 13 C0                             ld      (P_BnKylo),a
 254+ C588 C9                                   ret
 255+ C589
 256+ C589              CalculatePlanetLaunchedPosition:
 257+ C589              .CalcXPosition:         MMUSelectMathsBankedFns
 257+ C589 ED 91 50 66 >                     nextreg MathsBankedFnsMMU, BankMathsBankedFns
 258+ C58D DD 21 10 C0                          ld      ix,P_BnKxlo             ; P_BnKxlo += ParentPlanetX
 259+ C591 FD 21 7E 80                          ld      iy,ParentPlanetX        ; .
 260+ C595 CD 90 00                             call    AddAtIXtoAtIY24Signed   ; .
 261+ C598 DD 21 13 C0  .CalcYPosition:         ld      ix,P_BnKylo             ; P_BnKylo += ParentPlanetZ
 262+ C59C FD 21 81 80                          ld      iy,ParentPlanetY        ; .
 263+ C5A0 CD 90 00                             call    AddAtIXtoAtIY24Signed   ; .
 264+ C5A3 DD 21 16 C0  .CalcZPosition:         ld      ix,P_BnKzlo             ; P_BnKzlo += ParentPlanetZ
 265+ C5A7 FD 21 84 80                          ld      iy,ParentPlanetZ        ; .
 266+ C5AB CD 90 00                             call    AddAtIXtoAtIY24Signed   ; .
 267+ C5AE C9                                   ret
 268+ C5AF              ; --------------------------------------------------------------
 269+ C5AF 21 10 C0     CopyPlanettoGlobal:     ld      hl,P_BnKxlo
 270+ C5B2 11 7E 80                             ld      de,ParentPlanetX
 271+ C5B5 01 09 00                             ld      bc,3*3
 272+ C5B8 ED B0                                ldir
 273+ C5BA C9                                   ret
 274+ C5BB              ; --------------------------------------------------------------
 275+ C5BB 21 10 C0     CopyPlanettoGeneral:    ld      hl,P_BnKxlo
 276+ C5BE 11 87 80                             ld      de,PlanetXPos
 277+ C5C1 01 09 00                             ld      bc,3*3
 278+ C5C4 ED B0                                ldir
 279+ C5C6 C9                                   ret
 280+ C5C7              ; This sets current universe object to a planet,they use sign + 23 bit positions
 281+ C5C7              ; we need to have variable size and color
 282+ C5C7 CD EF C4     CreatePlanet:           call    ResetP_BnKData          ; Clear out planet block
 283+ C5CA 3A 75 80                             ld      a,(DisplayTekLevel)
 284+ C5CD E6 02                                and     %00000010               ; Set A = 128 or 130 depending on bit 1 of the system's tech level
 285+ C5CF F6 80                                or      %10000000
 286+ C5D1 32 6B C0                             ld      (P_BnKShipType),a       ; and load to ship type (synomous with planet type)
 287+ C5D4                                      ; PLanets don't have pitch and roll MaxUnivPitchAndRoll
 288+ C5D4 3A 47 80                             ld      a,(WorkingSeeds+1)      ; a= bits 1 and 0 of working seed1 + 3 + carry
 289+ C5D7 E6 03                                and     %00000011               ; .
 290+ C5D9 CE 03                                adc     3                       ; we also lauch planet side so its infront of us
 291+ C5DB 32 18 C0                             ld      (P_BnKzsgn),a           ; set z sign to 3 + C + 0..3 bits
 292+ C5DE CB 1F                                rr      a
 293+ C5E0 32 12 C0                             ld      (P_BnKxsgn),a
 294+ C5E3 32 15 C0                             ld      (P_BnKysgn),a
 295+ C5E6 3A 75 80     .SetColour:             ld      a,(DisplayTekLevel)
 296+ C5E9 21 76 80                             ld      hl,DisplayPopulation    ; add displaypopulation
 297+ C5EC 86                                   add     a, (hl)
 298+ C5ED 47                                   ld      b,a                     ; save for atmosphere level
 299+ C5EE 23                                   inc     hl                      ; move to DisplayProductivity
 300+ C5EF 86                                   add     a, (hl)
 301+ C5F0 E6 0F                                and     $0F                     ; limit to 0 to 16
 302+ C5F2 21 05 C5                             ld      hl,PlanetColour1Table
 303+ C5F5 ED 31                                add     hl,a
 304+ C5F7 7E                                   ld      a,(hl)
 305+ C5F8 32 E2 C0                             ld      (P_Colour1),a
 306+ C5FB 3E 10                                ld      a,$10
 307+ C5FD ED 31                                add     hl,a
 308+ C5FF 7E                                   ld      a,(hl)
 309+ C600 32 E3 C0                             ld      (P_Colour2),a
 310+ C603 78                                   ld      a,b
 311+ C604 E6 07                                and     %00000111               ; atmosphere can be 0 to  3 pixels thick
 312+ C606 CB 3F                                srl     a                       ;
 313+ C608 32 E4 C0                             ld      (P_Colour2Thickness),a
 314+ C60B              .SetOrientation:        ; Not needed as we don't do planet rotation call    P_InitRotMat
 315+ C60B CD AF C5                             call    CopyPlanettoGlobal      ; Set up global position interface
 316+ C60E C9                                   ret
 317+ C60F
 318+ C60F CD EF C4     CreatePlanetLaunched:   call    ResetP_BnKData
 319+ C612 CD C7 C5                             call    CreatePlanet
 320+ C615 21 00 00                             ld      hl,0
 321+ C618 22 10 C0                             ld      (P_BnKxlo),hl
 322+ C61B 22 13 C0                             ld      (P_BnKylo),hl
 323+ C61E 21 03 FF                             ld      hl,$FF03
 324+ C621 22 16 C0                             ld      (P_BnKzlo),hl
 325+ C624                                      ZeroA
 325+ C624 AF          >                        xor a
 326+ C625 32 12 C0                             ld      (P_BnKxsgn),a
 327+ C628 32 15 C0                             ld      (P_BnKysgn),a
 328+ C62B 32 18 C0                             ld      (P_BnKzsgn),a
 329+ C62E                                      ; PLanets don't have pitch and roll MaxUnivPitchAndRoll
 330+ C62E CD AF C5                             call    CopyPlanettoGlobal      ; Set up global position interface
 331+ C631 C9                                   ret
 332+ C632              ; NEED FINSIHGING
 333+ C632
 334+ C632
 335+ C632 ED 4B E9 C0  ScalePlanetTo8Bit:		ld			bc,(P_BnKZScaled)
 336+ C636 2A E5 C0                             ld			hl,(P_BnKXScaled)
 337+ C639 ED 5B E7 C0                          ld			de,(P_BnKYScaled)
 338+ C63D 78           .SetABSbc:              ld			a,b
 339+ C63E DD 67                                ld			ixh,a
 340+ C640 E6 7F                                and			SignMask8Bit
 341+ C642 47                                   ld			b,a									; bc = ABS bc
 342+ C643 7C           .SetABShl:              ld			a,h
 343+ C644 DD 6F                                ld			ixl,a
 344+ C646 E6 7F                                and			SignMask8Bit
 345+ C648 67                                   ld			h,a									; hl = ABS hl
 346+ C649 7A           .SetABSde:              ld			a,d
 347+ C64A FD 67                                ld			iyh,a
 348+ C64C E6 7F                                and			SignMask8Bit
 349+ C64E 57                                   ld			d,a									; de = ABS de
 350+ C64F 78           .ScaleNodeTo8BitLoop:   ld          a,b		                            ; U	\ z hi
 351+ C650 B4                                   or			h                                   ; XX15+1	\ x hi
 352+ C651 B2                                   or			d                                   ; XX15+4	\ y hi
 353+ C652 28 0F                                jr          z,.ScaleNodeDone                   ; if X, Y, Z = 0  exit loop down once hi U rolled to 0
 354+ C654                                      ShiftHLRight1
 354+ C654 CB 3C       >			   srl h
 354+ C656 CB 1D       >			   rr  l
 355+ C658                                      ShiftDERight1
 355+ C658 CB 3A       >			   srl d
 355+ C65A CB 1B       >			   rr  e
 356+ C65C                                      ShiftBCRight1
 356+ C65C CB 38       >			   srl b
 356+ C65E CB 19       >			   rr  c
 357+ C660 C3 4F C6                             jp          .ScaleNodeTo8BitLoop
 358+ C663              ; now we have scaled values we have to deal with sign
 359+ C663 DD 7C        .ScaleNodeDone:          ld			a,ixh								; get sign bit and or with b
 360+ C665 E6 80                                and			SignOnly8Bit
 361+ C667 B0                                   or			b
 362+ C668 47                                   ld			b,a
 363+ C669 DD 7D        .SignforHL:              ld			a,ixl								; get sign bit and or with b
 364+ C66B E6 80                                and			SignOnly8Bit
 365+ C66D B4                                   or			h
 366+ C66E 67                                   ld			h,a
 367+ C66F FD 7C        .SignforDE:              ld			a,iyh								; get sign bit and or with b
 368+ C671 E6 80                                and			SignOnly8Bit
 369+ C673 B2                                   or			d
 370+ C674 57                                   ld			d,a
 371+ C675 ED 43 E9 C0  .SignsDoneSaveResult:	ld			(P_BnKZScaled),bc
 372+ C679 22 E5 C0                             ld			(P_BnKXScaled),hl
 373+ C67C ED 53 E7 C0                          ld			(P_BnKYScaled),de
 374+ C680 78                                   ld			a,b
 375+ C681 32 B5 7F                             ld			(varU),a
 376+ C684 79                                   ld			a,c
 377+ C685 32 D2 7F                             ld			(varT),a
 378+ C688 C9                                   ret
 379+ C689
 380+ C689              ;--------------------------------------------------------------------------------------------------------
 381+ C689                                      include "./Universe/Planet/CopyPlanetXX12ScaledToPlanetXX18.asm"
# file opened: ././Universe/Planet/CopyPlanetXX12ScaledToPlanetXX18.asm
   1++C689              CopyPSXX12ScaledToPXX18:
   2++C689              CopyResultToPDrawCam:
   3++C689                      ldCopyByte P_XX12         ,P_XX18             ; XX12+0 => XX18+0  Set XX18(2 0) = dot_sidev
   3++C689 3A EB C0    >                        ld       a,(P_XX12)
   3++C68C 32 5E C0    >                        ld       (P_XX18),a
   4++C68F                      ldCopyByte P_XX12+1       ,P_XX18+2           ; XX12+1 => XX18+2
   4++C68F 3A EC C0    >                        ld       a,(P_XX12+1)
   4++C692 32 60 C0    >                        ld       (P_XX18+2),a
   5++C695                      ldCopyByte P_XX12+2       ,P_XX18+3           ; XX12+2 => XX18+3  Set XX12+1 => XX18+2
   5++C695 3A ED C0    >                        ld       a,(P_XX12+2)
   5++C698 32 61 C0    >                        ld       (P_XX18+3),a
   6++C69B                      ldCopyByte P_XX12+3       ,P_XX18+5           ; XX12+3 => XX18+5
   6++C69B 3A EE C0    >                        ld       a,(P_XX12+3)
   6++C69E 32 63 C0    >                        ld       (P_XX18+5),a
   7++C6A1                      ldCopyByte P_XX12+4       ,P_XX18+6           ; XX12+4 => XX18+6  Set XX18(8 6) = dot_nosev
   7++C6A1 3A EF C0    >                        ld       a,(P_XX12+4)
   7++C6A4 32 64 C0    >                        ld       (P_XX18+6),a
   8++C6A7                      ldCopyByte P_XX12+5       ,P_XX18+8           ; XX12+5 => XX18+8
   8++C6A7 3A F0 C0    >                        ld       a,(P_XX12+5)
   8++C6AA 32 66 C0    >                        ld       (P_XX18+8),a
   9++C6AD C9                   ret
  10++C6AE
# file closed: ././Universe/Planet/CopyPlanetXX12ScaledToPlanetXX18.asm
 382+ C6AE                                      include "./Universe/Planet/CopyPlanetPosToPlanetXX15.asm"
# file opened: ././Universe/Planet/CopyPlanetPosToPlanetXX15.asm
   1++C6AE              PlanetCopyPosToXX15:    ldCopyByte  P_BnKxhi         ,P_BnKXScaled        ; xlo
   1++C6AE 3A 11 C0    >                        ld       a,(P_BnKxhi)
   1++C6B1 32 E5 C0    >                        ld       (P_BnKXScaled),a
   2++C6B4                                      ldCopyByte  P_BnKxsgn        ,P_BnKXScaledSign    ; xsg
   2++C6B4 3A 12 C0    >                        ld       a,(P_BnKxsgn)
   2++C6B7 32 E6 C0    >                        ld       (P_BnKXScaledSign),a
   3++C6BA                                      ldCopyByte  P_BnKyhi         ,P_BnKYScaled        ; xlo
   3++C6BA 3A 14 C0    >                        ld       a,(P_BnKyhi)
   3++C6BD 32 E7 C0    >                        ld       (P_BnKYScaled),a
   4++C6C0                                      ldCopyByte  P_BnKysgn        ,P_BnKYScaledSign    ; xsg
   4++C6C0 3A 15 C0    >                        ld       a,(P_BnKysgn)
   4++C6C3 32 E8 C0    >                        ld       (P_BnKYScaledSign),a
   5++C6C6                                      ldCopyByte  P_BnKzhi         ,P_BnKZScaled        ; xlo
   5++C6C6 3A 17 C0    >                        ld       a,(P_BnKzhi)
   5++C6C9 32 E9 C0    >                        ld       (P_BnKZScaled),a
   6++C6CC                                      ldCopyByte  P_BnKzsgn        ,P_BnKZScaledSign    ; xsg
   6++C6CC 3A 18 C0    >                        ld       a,(P_BnKzsgn)
   6++C6CF 32 EA C0    >                        ld       (P_BnKZScaledSign),a
   7++C6D2 C9                                   ret
   8++C6D3
# file closed: ././Universe/Planet/CopyPlanetPosToPlanetXX15.asm
 383+ C6D3
 384+ C6D3              ; ......................................................                                                         ;;;
 385+ C6D3                          INCLUDE "./Universe/Planet/PlanetApplyMyRollAndPitch.asm"
# file opened: ././Universe/Planet/PlanetApplyMyRollAndPitch.asm
   1++C6D3
   2++C6D3              ;----------------------------------------------------------------------------------------------------------------------------------
   3++C6D3              ; Planet version of pitch and roll is a 24 bit calculation 1 bit sign + 23 bit value
   4++C6D3              ; Need to write a test routine for roll and pitchs
   5++C6D3 00 00 00 00  PlanetAlphaMulX            DB $00,$00, $00, $00
   6++C6D7 00 00 00 00  PlanetAlphaMulY            DB $00,$00, $00, $00
   7++C6DB 00 00 00 00  PlanetAlphaMulZ            DB $00,$00, $00, $00
   8++C6DF 00 00 00 00  PlanetBetaMulZ             DB $00,$00, $00, $00
   9++C6E3 00 00 00 00  PlanetBetaMulY             DB $00,$00, $00, $00
  10++C6E7 00 00 00     PlanetK2                   DS 3
  11++C6EA
  12++C6EA              ;----------------------------------------------------------------------------------------------------------------------------------
  13++C6EA              ; Sun version of pitch and roll is a 24 bit calculation 1 bit sign + 23 bit value
  14++C6EA              ; Need to write a test routine for roll and pitchs
  15++C6EA
  16++C6EA              ; Gets values backwards, is it 24 bit safe?
  17++C6EA
  18++C6EA 3A CF 7E     PlanetApplyMyRollAndPitch: 	ld      a,(ALPHA)                   ; no roll or pitch, no calc needed
  19++C6ED A7           .CheckForRoll:              and		a
  20++C6EE C4 16 C7     							call	nz,Planet_Roll
  21++C6F1 3A C2 7E     .CheckForPitch:				ld		a,(BETA)
  22++C6F4 A7           							and		a
  23++C6F5 C4 7C C7     							call	nz,Planet_Pitch
  24++C6F8 3A B0 7F     .ApplySpeed:            	ld      a,(DELTA)                   ; BCH = - Delta
  25++C6FB              							ReturnIfAIsZero
  25++C6FB A7          >                        and     a
  25++C6FC C8          >                        ret     z
  26++C6FD 0E 00        							ld      c,0                         ;
  27++C6FF 67           							ld      h,a                         ;
  28++C700 06 80        							ld      b,$80                       ;
  29++C702 ED 5B 17 C0  							ld      de,(P_BnKzhi)                ; DEL = z position
  30++C706 3A 16 C0     							ld      a,(P_BnKzlo)                 ; .
  31++C709 6F           							ld      l,a                         ; .
  32++C70A CD 14 01     							call    AddBCHtoDELsigned           ; update speed
  33++C70D ED 53 17 C0  							ld      (P_BnKzhi),DE                ; write back to zpos
  34++C711 7D           							ld      a,l
  35++C712 32 16 C0     							ld      (P_BnKzlo),a                ;
  36++C715 C9           							ret
  37++C716
  38++C716              ; Performs minsky rotation
  39++C716              ; Joystick left          Joystick right
  40++C716              ; ---------------------  ---------------------
  41++C716              ; x :=  x      + y / 64  x :=  x -  y / 64  so rather than /64  is z * alpha / 256
  42++C716              ; y :=  y      - x /64   y :=  y +  x / 64
  43++C716              ;
  44++C716              ; Joystick down          Joystick up
  45++C716              ; ---------------------  ---------------------
  46++C716              ; y :=  y      + z / 64  y :=  y - z / 64
  47++C716              ; z :=  z      - y / 64  z :=  z + y / 64
  48++C716              ;
  49++C716              ; get z, multiply by alpha, pick top 3 bytes with sign
  50++C716              ; get x, multiply by alpha, pick top 3 bytes with sign
  51++C716              ; if alpha +ve subtract x = x - z adj, z =z + x adj , else x += z adj z -= z adj
  52++C716 3A CF 7E     Planet_Roll:				ld      a,(ALPHA)                   ; get roll value
  53++C719 E6 7F        							and 	$7F
  54++C71B 57           							ld      d,a                         ; .
  55++C71C 3A 13 C0     							ld      a,(P_BnKylo)                ; HLE = x sgn, hi, lo
  56++C71F 5F           							ld      e,a                         ; .
  57++C720 2A 14 C0     							ld      hl,(P_BnKyhi)               ; .
  58++C723 CD 17 93     							call    mulHLEbyDSigned             ; DELC = x * alpha, so DEL = X * -alpha / 256
  59++C726 7D           							ld		a,l
  60++C727 32 D7 C6     							ld		(PlanetAlphaMulY),a			; save result
  61++C72A ED 53 D8 C6  							ld		(PlanetAlphaMulY+1),de		; save result
  62++C72E 3A CF 7E     							ld      a,(ALPHA)                   ; get roll value
  63++C731 E6 7F        							and 	$7F
  64++C733 57           							ld      d,a                         ; .
  65++C734 3A 10 C0     							ld      a,(P_BnKxlo)                ; HLE = x sgn, hi, lo
  66++C737 5F           							ld      e,a                         ; .
  67++C738 2A 11 C0     							ld      hl,(P_BnKxhi)               ; .
  68++C73B CD 17 93     							call    mulHLEbyDSigned             ; DELC = x * alpha, so DEL = X * -alpha / 256
  69++C73E 7D           							ld		a,l
  70++C73F 32 D3 C6     							ld		(PlanetAlphaMulX),a			; save result
  71++C742 ED 53 D4 C6  							ld		(PlanetAlphaMulX+1),de		; save result
  72++C746 3A CF 7E     							ld		a,(ALPHA)
  73++C749 E6 80        							and		$80
  74++C74B CA 65 C7     							jp		z,.RollingRight
  75++C74E DD 21 10 C0  .RollingLeft:				ld		ix,P_BnKxlo
  76++C752 FD 21 D7 C6  							ld		iy,PlanetAlphaMulY
  77++C756 CD 90 00     							call	AddAtIXtoAtIY24Signed
  78++C759 DD 21 13 C0  							ld		ix,P_BnKylo
  79++C75D FD 21 D3 C6  							ld		iy,PlanetAlphaMulX
  80++C761 CD CD 00     							call	SubAtIXtoAtIY24Signed
  81++C764 C9           							ret
  82++C765 DD 21 10 C0  .RollingRight:				ld		ix,P_BnKxlo
  83++C769 FD 21 D7 C6  							ld		iy,PlanetAlphaMulY
  84++C76D CD CD 00     							call	SubAtIXtoAtIY24Signed
  85++C770 DD 21 13 C0  							ld		ix,P_BnKylo
  86++C774 FD 21 D3 C6  							ld		iy,PlanetAlphaMulX
  87++C778 CD 90 00     							call	AddAtIXtoAtIY24Signed
  88++C77B C9           							ret
  89++C77C
  90++C77C 3A C2 7E     Planet_Pitch:				ld      a,(BETA)                   ; get roll value
  91++C77F E6 7F        							and 	$7F
  92++C781 57           							ld      d,a                         ; .
  93++C782 3A 13 C0     							ld      a,(P_BnKylo)                ; HLE = x sgn, hi, lo
  94++C785 5F           							ld      e,a                         ; .
  95++C786 2A 14 C0     							ld      hl,(P_BnKyhi)               ; .
  96++C789 CD 17 93     							call    mulHLEbyDSigned             ; DELC = x * alpha, so DEL = X * -alpha / 256
  97++C78C 7D           							ld		a,l
  98++C78D 32 E3 C6     							ld		(PlanetBetaMulY),a			; save result
  99++C790 ED 53 E4 C6  							ld		(PlanetBetaMulY+1),de		; save result
 100++C794 3A C2 7E     							ld      a,(BETA)                   ; get roll value
 101++C797 E6 7F        							and 	$7F
 102++C799 57           							ld      d,a                         ; .
 103++C79A 3A 16 C0     							ld      a,(P_BnKzlo)                ; HLE = x sgn, hi, lo
 104++C79D 5F           							ld      e,a                         ; .
 105++C79E 2A 17 C0     							ld      hl,(P_BnKzhi)               ; .
 106++C7A1 CD 17 93     							call    mulHLEbyDSigned             ; DELC = x * alpha, so DEL = X * -alpha / 256
 107++C7A4 7D           							ld		a,l
 108++C7A5 32 DF C6     							ld		(PlanetBetaMulZ),a			; save result
 109++C7A8 ED 53 E0 C6  							ld		(PlanetBetaMulZ+1),de		; save result
 110++C7AC 3A C2 7E     							ld		a,(BETA)
 111++C7AF E6 80        							and		$80
 112++C7B1 CA CB C7     							jp		z,.Climbing
 113++C7B4 DD 21 13 C0  .Diving:					ld		ix,P_BnKylo
 114++C7B8 FD 21 DF C6  							ld		iy,PlanetBetaMulZ
 115++C7BC CD 90 00     							call	AddAtIXtoAtIY24Signed
 116++C7BF DD 21 16 C0  							ld		ix,P_BnKzlo
 117++C7C3 FD 21 E3 C6  							ld		iy,PlanetBetaMulY
 118++C7C7 CD CD 00     							call	SubAtIXtoAtIY24Signed
 119++C7CA C9           							ret
 120++C7CB DD 21 13 C0  .Climbing:		     		ld		ix,P_BnKylo
 121++C7CF FD 21 DF C6  							ld		iy,PlanetBetaMulZ
 122++C7D3 CD CD 00     							call	SubAtIXtoAtIY24Signed
 123++C7D6 DD 21 16 C0  							ld		ix,P_BnKzlo
 124++C7DA FD 21 E3 C6  							ld		iy,PlanetBetaMulY
 125++C7DE CD 90 00     							call	AddAtIXtoAtIY24Signed
 126++C7E1 C9           							ret
# file closed: ././Universe/Planet/PlanetApplyMyRollAndPitch.asm
 386+ C7E2
 387+ C7E2 00           PlanetOnScreen          DB 0
 388+ C7E3 00 00        PlanetScrnX             DW  0       ; signed
 389+ C7E5 00 00        PlanetScrnY             DW  0       ; signed
 390+ C7E7              ;PlanetRadius            DW  0       ; unsigned
 391+ C7E7              ; draw circle
 392+ C7E7
 393+ C7E7              ;
 394+ C7E7              ;DIVD3B2 K(3 2 1 0) = (A P+1 P) / (z_sign z_hi z_lo)
 395+ C7E7
 396+ C7E7 00 00 00 00  PlanetVarK                 DS 4
 397+ C7EB 00 00 00     PlanetVarP                 DS 3
 398+ C7EE 00           PlanetVarQ                 DS 1
 399+ C7EF 00           PlanetVarR                 DS 1
 400+ C7F0 00           PlanetVarS                 DS 1
 401+ C7F1 00           PlanetVarT                 DS 1
 402+ C7F2
 403+ C7F2
 404+ C7F2 DD 4E 00     MaximiseHLVector:       ld      c,(ix+0)
 405+ C7F5 DD 46 01                             ld      b,(ix+1)
 406+ C7F8 DD 5E 02                             ld      e,(ix+2)
 407+ C7FB DD 56 03                             ld      d,(ix+3)
 408+ C7FE DD 6E 04                             ld      l,(ix+4)
 409+ C801 DD 66 05                             ld      h,(ix+5)
 410+ C804              MaxShiftOutSign:        ShiftBCLeft1
 410+ C804 CB 21       >			   sla c
 410+ C806 CB 10       >			   rl  b
 411+ C808                                      ShiftDELeft1
 411+ C808 CB 23       >			   sla e
 411+ C80A CB 12       >			   rl  d
 412+ C80C                                      ShiftHLLeft1
 412+ C80C CB 25       >			   sla l
 412+ C80E CB 14       >			   rl  h
 413+ C810 78           MaximiseIXVector:       ld      a,b                 ; Now loop round until bit 7 is populated
 414+ C811 B2                                   or      d
 415+ C812 B3                                   or      e
 416+ C813 E6 80                                and     $80
 417+ C815 CA 04 C8                             jp      z,MaxShiftOutSign
 418+ C818              .MakeSpaceForSign:      ShiftBCRight1               ; Now go back 1 so sign bit is clear
 418+ C818 CB 38       >			   srl b
 418+ C81A CB 19       >			   rr  c
 419+ C81C                                      ShiftDERight1
 419+ C81C CB 3A       >			   srl d
 419+ C81E CB 1B       >			   rr  e
 420+ C820                                      ShiftHLRight1
 420+ C820 CB 3C       >			   srl h
 420+ C822 CB 1D       >			   rr  l
 421+ C824 DD 7E 00                             ld      a,(ix+0)
 422+ C827 E6 80                                and     SignOnly8Bit
 423+ C829 B0                                   or      b
 424+ C82A DD 7E 01                             ld      a,(ix+1)
 425+ C82D E6 80                                and     SignOnly8Bit
 426+ C82F B2                                   or      d
 427+ C830 DD 7E 03                             ld      a,(ix+3)
 428+ C833 E6 80                                and     SignOnly8Bit
 429+ C835 B3                                   or      e
 430+ C836 DD 71 00                             ld      (ix+0),c
 431+ C839 DD 70 01                             ld      (ix+1),b
 432+ C83C DD 73 02                             ld      (ix+2),e
 433+ C83F DD 72 03                             ld      (ix+3),d
 434+ C842 DD 74 04                             ld      (ix+4),h
 435+ C845 DD 75 05                             ld      (ix+5),l
 436+ C848 C9                                   ret
 437+ C849
 438+ C849
 439+ C849              ; Subroutine: SPS1 (Docked) Calculate the vector to the planet and store it in XX15
 440+ C849              ; calls SPS3 and falls into TAS2
 441+ C849
 442+ C849
 443+ C849 CD AE C6     VectorToPlanet:         call    PlanetCopyPosToXX15 ; Perform all of SPS3
 444+ C84C DD 21 E5 C0                          ld      ix,P_XX15
 445+ C850 CD 10 C8                             call    MaximiseIXVector
 446+ C853 CD 06 9B                             call    NormaliseIXVector
 447+ C856
 448+ C856
 449+ C856              ;;INWORK
 450+ C856              ;;INWORK Main loop
 451+ C856              ;;INWORK
 452+ C856              ;;INWORK Subroutine: Main flight loop (Part 14 of 16) (Flight)
 453+ C856              ;;INWORK
 454+ C856              ;;INWORK Spawn a space station if we are close enough to the planet
 455+ C856              ;;INWORK
 456+ C856              ;;INWORK Main loop
 457+ C856              ;;INWORK
 458+ C856              ;;INWORK Subroutine: Main flight loop (Part 15 of 16) (Flight)
 459+ C856              ;;INWORK
 460+ C856              ;;INWORK Perform altitude checks with the planet and sun and process fuel scooping if appropriate
 461+ C856              ;;INWORK
 462+ C856              ;;INWORK Maths (Geometry)
 463+ C856              ;;INWORK
 464+ C856              ;;INWORK Subroutine: MAS2 (Flight)
 465+ C856              ;;INWORK
 466+ C856              ;;INWORK Calculate a cap on the maximum distance to the planet or sun
 467+ C856              ;;INWORK
 468+ C856              ;;INWORK Universe
 469+ C856              ;;INWORK
 470+ C856              ;;INWORK Subroutine: SOS1 (Flight)
 471+ C856              ;;INWORK
 472+ C856              ;;INWORK Update the missile indicators, set up the planet data block
 473+ C856              ;;INWORK
 474+ C856              ;;INWORK
 475+ C856              ;;INWORK Dashboard
 476+ C856              ;;INWORK
 477+ C856              ;;INWORK Subroutine: SP2 (Flight)
 478+ C856              ;;INWORK
 479+ C856              ;;INWORK Draw a dot on the compass, given the planet/station vector
 480+ C856
 481+ C856              ; Drawing planets Subroutine: PL2 (Flight) Remove the planet or sun from the screen
 482+ C856              ;                             PLANET (Flight) Draw the planet or sun
 483+ C856              ;                             PL9 (Part 1 of 3) (Flight) Draw the planet, with either an equator and meridian, or a crater
 484+ C856              ;                             PL9 (Part 2 of 3) (Flight) Draw the planet's equator and meridian
 485+ C856              ;                             PL9 (Part 3 of 3) (Flight) Draw the planet's crater
 486+ C856              ;                             PLS1 (Flight)  Calculate (Y A) = nosev_x / z
 487+ C856              ;                             PLS2 (Flight) Draw a half-ellipse
 488+ C856              ;                             PLS22 (Flight) Draw an ellipse or half-ellipse
 489+ C856
 490+ C856
 491+ C856              ; Drawing circles Subroutine: CIRCLE (Flight) Draw a circle for the planet
 492+ C856              ;                             CIRCLE2 (Flight) Draw a circle (for the planet or chart)
 493+ C856              ;                             WPLS2 (Flight) Remove the planet from the screen
 494+ C856              ;                             WP1 (Flight) Reset the ball line heap
 495+ C856              ; Drawing planets PL21 (Flight) Return from a planet/sun-drawing routine with a failure flag
 496+ C856              ;                 PLS3 (Flight) Calculate (Y A P) = 222 * roofv_x / z
 497+ C856              ;                 PLS4 (Flight) Calculate CNT2 = arctan(P / A) / 4
 498+ C856              ;                 PLS5 (Flight) Calculate roofv_x / z and roofv_y / z
 499+ C856              ;                 PLS6 (Flight) Calculate (X K) = (A P) / (z_sign z_hi z_lo)
 500+ C856              ; SPS1 (Flight) Calculate the vector to the planet and store it in XX15
 501+ C856              ; MV40 rate planet by our pitch
 502+ C856              ;
 503+ C856              ;look at PL9
 504+ C856
 505+ C856
 506+ C856              ; Optimisation
 507+ C856              ; if a <> 0
 508+ C856              ;       divide AH by CD
 509+ C856              ; if h <> 0
 510+ C856              ;      if c <> 0 return 0
 511+ C856              ;      else
 512+ C856              ;        divide HL by DE
 513+ C856              ; if l <>0
 514+ C856              ;      if c or d <> 0 return 0
 515+ C856              ;      else
 516+ C856              ;        divide l by e
 517+ C856              ;
 518+ C856 47           PlanetAHLequAHLDivCDE:  ld      b,a                         ; save a reg
 519+ C857 79                                   ld      a,c                         ; check for divide by zero
 520+ C858 B2                                   or      d                           ; .
 521+ C859 B3                                   or      e                           ; .
 522+ C85A                                      JumpIfZero      .divideByZero       ; .
 522+ C85A CA 73 C8    >                        jp	z,.divideByZero
 523+ C85D 78                                   ld      a,b                         ; get a back
 524+ C85E                                      JumpIfAIsNotZero    .divideAHLbyCDE
 524+ C85E A7          >                        and     a
 524+ C85F C2 7B C8    >                        jp	    nz,.divideAHLbyCDE
 525+ C862 7C           .AIsZero:               ld      a,h
 526+ C863                                      JumpIfAIsNotZero    .divideHLbyDE
 526+ C863 A7          >                        and     a
 526+ C864 C2 82 C8    >                        jp	    nz,.divideHLbyDE
 527+ C867 7D           .HIsZero:               ld      a,l
 528+ C868                                      JumpIfAIsNotZero    .divideLbyE
 528+ C868 A7          >                        and     a
 528+ C869 C2 91 C8    >                        jp	    nz,.divideLbyE
 529+ C86C              .resultIsZero:          ZeroA
 529+ C86C AF          >                        xor a
 530+ C86D 67                                   ld      h,a                        ; result is zero so set hlde
 531+ C86E 6F                                   ld      l,a                        ; result is zero so set hlde
 532+ C86F 54 5D                                ld      de,hl
 533+ C871                                      ClearCarryFlag
 533+ C871 B7          >                        or a
 534+ C872 C9                                   ret
 535+ C873 3E FF        .divideByZero:          ld      a,$FF
 536+ C875 67                                   ld      h,a
 537+ C876 6F                                   ld      l,a
 538+ C877 54 5D                                ld      de,hl
 539+ C879                                      SetCarryFlag
 539+ C879 37          >                        scf
 540+ C87A C9                                   ret
 541+ C87B              ; AHL = ahl/cde, this could be a genuine 24 bit divide
 542+ C87B              ; if AHL is large and cde small then the value will be big so will be off screen so we can risk 16 bit divide
 543+ C87B CD F4 90     .divideAHLbyCDE:        call    Div24by24
 544+ C87E EB                                   ex      hl,de                         ; ahl is result
 545+ C87F 79                                   ld      a,c                           ; ahl is result
 546+ C880                                      ClearCarryFlag
 546+ C880 B7          >                        or a
 547+ C881 C9                                   ret
 548+ C882              ; AHL = 0hl/0de as A is zero
 549+ C882 79           .divideHLbyDE:          ld      a,c                         ;'if c = 0 then result must be zero
 550+ C883                                      JumpIfAIsNotZero   .resultIsZero
 550+ C883 A7          >                        and     a
 550+ C884 C2 6C C8    >                        jp	    nz,.resultIsZero
 551+ C887 44 4D                                ld      bc,hl
 552+ C889 CD E2 97                             call    BC_Div_DE                   ; BC = HL/DE
 553+ C88C 60 69                                ld      hl,bc
 554+ C88E                                      ZeroA                               ; so we can set A to Zero
 554+ C88E AF          >                        xor a
 555+ C88F                                      ClearCarryFlag
 555+ C88F B7          >                        or a
 556+ C890 C9                                   ret
 557+ C891              ; AHL = 00l/00e as A and H are zero
 558+ C891 79           .divideLbyE:            ld      a,c                         ; if d = 0 then result must be zero
 559+ C892 B2                                   or      d
 560+ C893                                      JumpIfAIsNotZero   .resultIsZero
 560+ C893 A7          >                        and     a
 560+ C894 C2 6C C8    >                        jp	    nz,.resultIsZero
 561+ C897 4B                                   ld      c,e
 562+ C898 5D                                   ld      e,l
 563+ C899 CD A4 97                             call    E_Div_C
 564+ C89C 6F                                   ld      l,a
 565+ C89D                                      ZeroA
 565+ C89D AF          >                        xor a
 566+ C89E 67                                   ld      h,a
 567+ C89F                                      ClearCarryFlag
 567+ C89F B7          >                        or a
 568+ C8A0 C9                                   ret
 569+ C8A1
 570+ C8A1              ; Project XY to screen location
 571+ C8A1 DD 26 00     ProjectPlanet:          ld      ixh,0
 572+ C8A4 2A 10 C0                             ld      hl,(P_BnKxlo)
 573+ C8A7 3A 12 C0                             ld      a,(P_BnKxsgn)
 574+ C8AA CD BF C8                             call    PlanetProcessVertex         ; hl = PixelCentreY + (Y / Z)*-1 (as its 0 = top of screen)
 575+ C8AD 22 FA C0                             ld      (P_centreX),hl
 576+ C8B0 DD 24                                inc     ixh
 577+ C8B2 2A 13 C0                             ld      hl,(P_BnKylo)
 578+ C8B5 3A 15 C0                             ld      a,(P_BnKysgn)
 579+ C8B8 CD BF C8                             call    PlanetProcessVertex         ; hl = PixelCentreY + (Y / Z)*-1 (as its 0 = top of screen)
 580+ C8BB 22 00 C1                             ld      (P_centreY),hl
 581+ C8BE C9                                   ret
 582+ C8BF
 583+ C8BF              ; PlanetProcessVertex AHL = X or Y position (sign in A)
 584+ C8BF              ;                     fetches z as this used in both calcs
 585+ C8BF 47           PlanetProcessVertex:    ld      b,a                         ; save sign/high byte
 586+ C8C0 ED 5B 16 C0  .PlanetProjectToEye:    ld      de,(P_BnKzlo)               ; B H L   = X or Y
 587+ C8C4 3A 18 C0                             ld      a,(P_BnKzsgn)               ; IYH D E = z
 588+ C8C7 FD 67                                ld      iyh,a                       ; save sign
 589+ C8C9                                      ClearSignBitA                       ; A D E   = | z |
 589+ C8C9 E6 7F       >                        and     SignMask8Bit
 590+ C8CB                                      ; Addeed as it neds to be AHL/0CD to force * 256 and get correct screen position on scaling
 591+ C8CB 5A                                   ld      e,d                         ; C D E   = A D E * 256, i.e. 0 A D
 592+ C8CC 57                                   ld      d,a                         ; .
 593+ C8CD 0E 00                                ld      c,0                         ; .
 594+ C8CF                                      ; added above to correct positioning as in reality its X/(Z/256) to get +-256 rather than +- 1
 595+ C8CF 78                                   ld      a,b                         ; copy X or Y sign into iyl
 596+ C8D0 FD 6F                                ld      iyl,a                       ; .
 597+ C8D2                                      ClearSignBitA                       ; A H L = |X| (or |Y|)
 597+ C8D2 E6 7F       >                        and     SignMask8Bit
 598+ C8D4 CD 56 C8                             call PlanetAHLequAHLDivCDE          ; AHL = AHL/CDE unsigned
 599+ C8D7 DA 36 C9                             jp      c,.IsOffScreen              ; carry flag indicates failure
 600+ C8DA              .CheckPosOnScreen:      JumpIfAIsNotZero .IsOffScreen       ; if A has a value then its way too large regardless of sign
 600+ C8DA A7          >                        and     a
 600+ C8DB C2 36 C9    >                        jp	    nz,.IsOffScreen
 601+ C8DE                                      JumpOnLeadSignSet h, .IsOffScreen   ; or bit 7 set of h
 601+ C8DE 7C          >                        ld      a,h
 601+ C8DF E6 80       >                        and     SignOnly8Bit
 601+ C8E1 C2 36 C9    >                        jp      nz,.IsOffScreen
 602+ C8E4 DD 7C        .CheckXorY:             ld      a,ixh
 603+ C8E6                                      JumpIfAIsNotZero .ProcessYCoord
 603+ C8E6 A7          >                        and     a
 603+ C8E7 C2 0D C9    >                        jp	    nz,.ProcessYCoord
 604+ C8EA              ; Handle X Coord offset
 605+ C8EA FD 7C        .ProcessXCoord:         ld      a,iyh                       ; determine if its + or - value of AHL/CDE
 606+ C8EC FD AD                                xor     iyl
 607+ C8EE E6 80                                and     $80
 608+ C8F0 CA F9 C8                             jp      z,.ProcessXPositive
 609+ C8F3              .ProcessXNegative:      macronegate16hl
 609+ C8F3 AF          >					xor 	a
 609+ C8F4 95          >					sub 	l
 609+ C8F5 6F          >					ld 		l,a
 609+ C8F6 9F          >					sbc 	a,a
 609+ C8F7 94          >					sub 	h
 609+ C8F8 67          >					ld 		h,a
 610+ C8F9 11 80 00     .ProcessXPositive:      ld      de,ScreenCenterX
 611+ C8FC                                      ClearCarryFlag
 611+ C8FC B7          >                        or a
 612+ C8FD ED 5A                                adc     hl,de                       ; now X position is CenterX+ (X / Z) in 2's c
 613+ C8FF 54 5D                                ld      de,hl                       ; set de to | hl for +/- 1024 check
 614+ C901 F2 2E C9                             jp      p,.CheckBoundaries          ; .
 615+ C904                                      macronegate16de                     ; .
 615+ C904 AF          >					xor 	a
 615+ C905 93          >                    sub 	e
 615+ C906 5F          >                    ld 		e,a
 615+ C907 9F          >                    sbc 	a,a
 615+ C908 92          >                    sub 	d
 615+ C909 57          >                    ld 		d,a
 616+ C90A C3 2E C9                             jp      .CheckBoundaries            ; .
 617+ C90D              ; Handle Y Coord offset
 618+ C90D FD 7C        .ProcessYCoord:         ld      a,iyh
 619+ C90F FD AD                                xor     iyl
 620+ C911 E6 80                                and     $80
 621+ C913 CA 1C C9                             jp      z,.ProcessYPositive
 622+ C916              .ProcessYNegative:      macronegate16hl
 622+ C916 AF          >					xor 	a
 622+ C917 95          >					sub 	l
 622+ C918 6F          >					ld 		l,a
 622+ C919 9F          >					sbc 	a,a
 622+ C91A 94          >					sub 	h
 622+ C91B 67          >					ld 		h,a
 623+ C91C 11 60 00     .ProcessYPositive:      ld      de,ScreenCenterY            ; set hl to center Y and de to 2s'c Y/Z
 624+ C91F EB                                   ex      de,hl
 625+ C920                                      ClearCarryFlag
 625+ C920 B7          >                        or a
 626+ C921 ED 52                                sbc     hl,de                       ; now HL  position is CenterY - (Y / Z) in 2's c
 627+ C923 54 5D                                ld      de,hl                       ;
 628+ C925 F2 2E C9                             jp      p,.CheckBoundaries          ; .
 629+ C928                                      macronegate16de                     ; load DE with | result to simplify +-1024 check|
 629+ C928 AF          >					xor 	a
 629+ C929 93          >                    sub 	e
 629+ C92A 5F          >                    ld 		e,a
 629+ C92B 9F          >                    sbc 	a,a
 629+ C92C 92          >                    sub 	d
 629+ C92D 57          >                    ld 		d,a
 630+ C92E 7A           .CheckBoundaries:       ld      a,d
 631+ C92F                                      JumpIfAGTENusng 4, .IsOffScreen     ; if |position| > 1024 then way to large
 631+ C92F FE 04       >                        cp     4
 631+ C931 D2 36 C9    >                        jp		nc,.IsOffScreen
 632+ C934              .calculatedVert:        ClearCarryFlag
 632+ C934 B7          >                        or a
 633+ C935 C9                                   ret
 634+ C936 21 FF 7F     .IsOffScreen:           ld      hl,$7FFF
 635+ C939 FD 7C                                ld      a,iyh
 636+ C93B FD AD                                xor     iyl
 637+ C93D                                      SignBitOnlyA
 637+ C93D E6 80       >                        and     SignOnly8Bit
 638+ C93F 28 02                                jr      z,.calculatedOffScreen
 639+ C941 23                                   inc     hl                          ; set hl to $8001 i.e. -32768
 640+ C942 23                                   inc     hl                          ; .
 641+ C943              .calculatedOffScreen:   SetCarryFlag
 641+ C943 37          >                        scf
 642+ C944 C9                                   ret
 643+ C945
 644+ C945
 645+ C945              ; .........................................................................................................................
 646+ C945              ; we only hit this if z is positive so we can ignore signs
 647+ C945              ; calculates 24576/z, maxes at 248
 648+ C945 ED 4B 16 C0  PlanetCalculateRadius:  ld      bc,(P_BnKzlo)                ; DBC = z position
 649+ C949 3A 18 C0                             ld      a,(P_BnKzsgn)                ;
 650+ C94C 57                                   ld      d,a                         ;
 651+ C94D 21 00 60                             ld      hl,$6000  ; was hl          ; planet radius at Z = 1 006000
 652+ C950 CD 82 96                             call    Div16by24usgn               ; radius = HL/DBC = 24576 / distance z
 653+ C953 B4                                   or      h                           ; if A or H are not 0 then max Radius
 654+ C954                                      JumpIfAIsZero  .SaveRadius
 654+ C954 A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
 654+ C955 CA 5B C9    >                        jp	    z, .SaveRadius
 655+ C958 21 F8 00     .MaxRadius:             ld      hl,248                      ; set radius to 248 as maxed out
 656+ C95B 7D           .SaveRadius:            ld      a,l                         ; l = resultant radius
 657+ C95C F6 01                                or      1                           ; at least radius 1 (never even so need to test)
 658+ C95E                                      DISPLAY "DONE - Eliiminate the check to see if planet radius is > 255 as its already fixed in Planet Calculate Radius"
 659+ C95E                                      ;ld      l,a                        ;
 660+ C95E                                      ;ld      (P_Radius),hl              ; save a copy of radius now for later
 661+ C95E 32 D9 C0                             ld      (P_Radius),a
 662+ C961 5F                                   ld      e,a                         ; as later code expects it to be in e
 663+ C962 16 08        .CalculateStep:         ld      d,8
 664+ C964                                      JumpIfALTNusng 8, .DoneStepCalc
 664+ C964 FE 08       >                        cp      8
 664+ C966 DA 72 C9    >                        jp		c, .DoneStepCalc
 665+ C969 CB 3A                                srl     d                           ; d = d / 2
 666+ C96B                                      JumpIfALTNusng 60, .DoneStepCalc
 666+ C96B FE 3C       >                        cp      60
 666+ C96D DA 72 C9    >                        jp		c, .DoneStepCalc
 667+ C970 CB 3A                                srl     d                           ; d = d / 2
 668+ C972 7A           .DoneStepCalc:          ld      a,d
 669+ C973 32 8F C0                             ld      (P_BnKSTP),a
 670+ C976 C9                                   ret
 671+ C977
 672+ C977              ; Shorter version when sun does not need to be processed to screen
 673+ C977 3A 12 C0     PlanetUpdateCompass:    ld      a,(P_BnKxsgn)
 674+ C97A 2A 10 C0                             ld      hl,(P_BnKxlo)
 675+ C97D CD BF C8                             call    PlanetProcessVertex
 676+ C980 22 19 C0                             ld      (P_CompassX),hl
 677+ C983 3A 15 C0                             ld      a,(P_BnKysgn)
 678+ C986 2A 13 C0                             ld      hl,(P_BnKylo)
 679+ C989 CD BF C8                             call    PlanetProcessVertex
 680+ C98C 22 1B C0                             ld      (P_CompassY),hl
 681+ C98F C9                                   ret
 682+ C990
 683+ C990                                 ; could probabyl set a variable say "varGood", default as 1 then set to 0 if we end up with a good calulation?? may not need it as we draw here
 684+ C990 CD EA C6     PlanetUpdateAndRender:  call    PlanetApplyMyRollAndPitch    ; not needed for solid as yet
 685+ C993 3A 18 C0     .DrawSolidPlanet:       ld      a,(P_BnKzsgn)                ; a = z sign of position
 686+ C996 A7           .ElimiateBehind:        and     a
 687+ C997 FA E6 C9                             jp      m,.SkipDrawPlanet            ; if its negative then behind so exit
 688+ C99A              .TooFarAway:            JumpIfAGTENusng   48,.SkipDrawPlanet  ; if sign (high byte 2) > 48 then too far away to render
 688+ C99A FE 30       >                        cp     48
 688+ C99C D2 E6 C9    >                        jp		nc,.SkipDrawPlanet
 689+ C99F 21 17 C0                             ld      hl, P_BnKzhi                 ; if |P_BnKzsgn| or P_BnKzsgn are both 0 then the planet is too close so return
 690+ C9A2 B6                                   or      (hl)                         ; .
 691+ C9A3 CA E6 C9                             jp      z,.SkipDrawPlanet            ; .
 692+ C9A6              ;                       loads P_centreX and Y with planet on screen centre
 693+ C9A6 CD A1 C8     .Project                call    ProjectPlanet                ; Project the planet/sun onto the screen, returning the centre's coordinates in K3(1 0) and K4(1 0)
 694+ C9A9 CD 45 C9     .CalcRadius:            call    PlanetCalculateRadius
 695+ C9AC                                      DISPLAY "ASSMEBLING WITH SOLID PLANETS"
 696+ C9AC                                      DISPLAY "TODO, pick colour based on galaxy map"
 697+ C9AC 2A FA C0                             ld      hl,(P_centreX)
 698+ C9AF ED 5B 00 C1                          ld      de,(P_centreY)
 699+ C9B3 3A D9 C0                             ld      a,(P_Radius)
 700+ C9B6 A7                                   and     a
 701+ C9B7 CA E6 C9                             jp      z,.SkipDrawPlanet            ; skip 0 size
 702+ C9BA 4F                                   ld      c,a
 703+ C9BB 3A E2 C0                             ld      a,(P_Colour1)
 704+ C9BE 47                                   ld      b,a
 705+ C9BF                                      MMUSelectLayer2
 705+ C9BF ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 706+ C9C3 CD FC F2                             call    l2_draw_clipped_circle_filled
 707+ C9C6                                      JumpIfMemLTNusng P_Radius, 5, .SkipDrawPlanet
 707+ C9C6 3A D9 C0    >                        ld      a,(P_Radius)
 707+ C9C9 FE 05       >                        cp      5
 707+ C9CB DA E6 C9    >                        jp	  c,.SkipDrawPlanet
 708+ C9CE FE 05                                cp      5               ; radius < 3 means no atmosphere
 709+ C9D0 4F                                   ld      c,a             ; as a holds radius from Jump Macro
 710+ C9D1 CA E6 C9                             jp      z,.SkipDrawPlanet
 711+ C9D4 2A FA C0                             ld      hl,(P_centreX) ; just to test putting a rim there
 712+ C9D7 ED 5B 00 C1                          ld      de,(P_centreY)
 713+ C9DB 3A E3 C0                             ld      a,(P_Colour2)
 714+ C9DE 47                                   ld      b,a
 715+ C9DF                                      MMUSelectLayer2
 715+ C9DF ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 716+ C9E3 CD 0E F0                             call    l2_draw_clipped_circle
 717+ C9E6 CD 77 C9     .SkipDrawPlanet:        call    PlanetUpdateCompass
 718+ C9E9 C9                                   ret                                 ; else x is totally off the left side of the screen
 719+ C9EA              ;
 720+ C9EA              ; (PLS4)
 721+ C9EA              ; CNT2 =  = arctan(-nosev_z_hi / side_z_hi) / 4,  if nosev_z_hi >= 0 add PI
 722+ C9EA              ; Not needed as we don't rotate planets and suns
 723+ C9EA              ;CalcNoseSideArcTanPI:   ld      a, (P_BnKrotmatNosevZ + 1)   ; P = - nosevz hi
 724+ C9EA              ;                        xor     $80
 725+ C9EA              ;                        ld      (varP),a
 726+ C9EA              ;                        ld      a, (P_BnKrotmatSidevZ + 1)
 727+ C9EA              ;                        jp      CalcArcTanPiPA
 728+ C9EA              ;;  CNT2 =  = arctan(-nosev_z_hi / roofv_z_hi) / 4,  if nosev_z_hi >= 0 add PI
 729+ C9EA              ;CalcNoseRoofArcTanPI:   ld      a, (P_BnKrotmatNosevZ + 1)   ; P = - nosevz hi
 730+ C9EA              ;                        xor     $80
 731+ C9EA              ;                        ld      (varP),a
 732+ C9EA              ;                        ld      a, (P_BnKrotmatRoofvZ + 1)
 733+ C9EA              ;; CNT2 = arctan(P / A) / 4
 734+ C9EA              ;CalcArcTanPiPA:         ld      (varQ),a                    ; STA Q                  \ Set Q = A
 735+ C9EA              ;                        call    ARCTAN                      ; A = arctan(P / Q)
 736+ C9EA              ;                        ld      c,a                         ; save a
 737+ C9EA              ;                        ld      a,(P_BnKrotmatNosevZ+1)
 738+ C9EA              ;                        and     $80
 739+ C9EA              ;                        ld      a,c                         ; restore a as it doesn't affect flags doing an ld
 740+ C9EA              ;                        jp      m,.SkipFlipSign             ; If nosev_z_hi is negativeleave the angle in A as a positive
 741+ C9EA              ;; Adds 128 to the result (rather than makes it negative)
 742+ C9EA              ;.FlipSign:              xor     $80                         ; If we get here then nosev_z_hi is positive, so flip bit 7 of the angle in A, which is the same as adding 128
 743+ C9EA              ;.SkipFlipSign:          srl     a                           ; Set CNT2 = A / 4
 744+ C9EA              ;                        srl     a                           ; .
 745+ C9EA              ;                        ld      (P_BnKCNT2),a                ; .
 746+ C9EA              ;                        ret
 747+ C9EA
 748+ C9EA              ; (PSL1)
 749+ C9EA              ; XX16 K2) = nosev_x / z
 750+ C9EA              ; Not needed as we don't rotate planets and suns
 751+ C9EA              ;CalcNoseXDivNoseZ:      ld      hl,(P_BnKrotmatNosevX)
 752+ C9EA              ;                        ld      de,(P_BnKrotmatNosevZ)
 753+ C9EA              ;                        jp      CalcRotMatDivide
 754+ C9EA              ;CalcNoseYDivNoseZ:      ld      hl,(P_BnKrotmatNosevY)
 755+ C9EA              ;                        ld      de,(P_BnKrotmatNosevZ)
 756+ C9EA              ;                        jp      CalcRotMatDivide
 757+ C9EA              ;CalcRoofXDivRoofZ:      ld      hl,(P_BnKrotmatRoofvX)
 758+ C9EA              ;                        ld      de,(P_BnKrotmatRoofvZ)
 759+ C9EA              ;                        jp      CalcRotMatDivide
 760+ C9EA              ;CalcRoofYDivRoofZ:      ld      hl,(P_BnKrotmatRoofvY)
 761+ C9EA              ;                        ld      de,(P_BnKrotmatRoofvZ)
 762+ C9EA              ;                        jp      CalcRotMatDivide
 763+ C9EA              ;CalcSideXDivSideZ:      ld      hl,(P_BnKrotmatSidevX)
 764+ C9EA              ;                        ld      de,(P_BnKrotmatSidevZ)
 765+ C9EA              ;                        jp      CalcRotMatDivide
 766+ C9EA              ;CalcSideYDivSideZ:      ld      hl,(P_BnKrotmatSidevY)
 767+ C9EA              ;                        ld      de,(P_BnKrotmatSidevZ)
 768+ C9EA              ; (PLS1) (Y A) = nosev_x / z where B = Y (also stores in regY), K+3 = sign of calculation
 769+ C9EA              ; stores result in BC now as well
 770+ C9EA              ; does not do increment of X as its not needed when directly loading verticies of rotation
 771+ C9EA              ; Not needed as we don't rotate planets and suns
 772+ C9EA              ;CalcRotMatDivide:
 773+ C9EA              ;.LoadDEtoQRS:           ld      a,e                         ; Q
 774+ C9EA              ;                        ld      (varQ),a                    ;
 775+ C9EA              ;                        ld      a,d                         ;
 776+ C9EA              ;                        and     $7F                         ;
 777+ C9EA              ;                        ld      (varR),a                    ;
 778+ C9EA              ;                        ld      a,d                         ;
 779+ C9EA              ;                        and     $80                         ;
 780+ C9EA              ;                        ld      (varS),a                    ;
 781+ C9EA              ;.LoadHLtoP012:          ld      a,l                         ; set A P+1 P to (signnoseX) (|noseX|)
 782+ C9EA              ;                        ld      (varP),a                    ; set P to nosevX lo
 783+ C9EA              ;                        ld      a,h                         ; set P_1 to |nosevX hi|
 784+ C9EA              ;                        ld      b,h                         ; .
 785+ C9EA              ;                        and     $7F                         ; .
 786+ C9EA              ;                        ld      (varP+1),a                  ; .
 787+ C9EA              ;                        ld      a,b                         ; set a to sign nosevX
 788+ C9EA              ;                        and     $80
 789+ C9EA              ;                        ld      (varP+2),a
 790+ C9EA              ;                        call    DVID3B                      ; call DVI3B2 variane where z is in de as 16 bit and needs expanding to 32
 791+ C9EA              ;                        ld      a,(varK+1)                  ; get second byte into b
 792+ C9EA              ;                        ld      b,a                         ; and also check to see if its
 793+ C9EA              ;                        and     a                           ; zero
 794+ C9EA              ;                        ld      a,(varK)
 795+ C9EA              ;                        ld      c,a                         ; so now BC = result too
 796+ C9EA              ;                        jp      z,.Skip254
 797+ C9EA              ;.Force254Result:        ld      a,254                       ; if 2nd byte is non zero set a to 254 as our max 1 byte value to return
 798+ C9EA              ;                        ld      c,a
 799+ C9EA              ;.Skip254:               push    af
 800+ C9EA              ;                        ld      a,c                         ; if a is 0 then force sign to be +ve
 801+ C9EA              ;                        and     a
 802+ C9EA              ;                        jp      nz,.DoNotForceSign
 803+ C9EA              ;.ForceSignPositive:     ld      (regY),a
 804+ C9EA              ;                        ld      b,a
 805+ C9EA              ;                        pop     af
 806+ C9EA              ;                        ret
 807+ C9EA              ;.DoNotForceSign:        ld      a,(varK+3)                  ; set b to sign (which was Y in 6502)
 808+ C9EA              ;                        ld      (regY),a
 809+ C9EA              ;                        ld      b,a                         ; bc also is result as c was a copy of a
 810+ C9EA              ;                        pop     af                          ; so c doesn't need to be pushed to stack
 811+ C9EA              ;                        ret
 812+ C9EA
 813+ C9EA              ; (PLS3)
 814+ C9EA              ;  (Y A P) = 222 * roofv_x / z to give the x-coordinate of the crater offset
 815+ C9EA              ; Not needed as we don't rotate planets and suns
 816+ C9EA              ;Cacl222MulRoofXDivRoofZ:ld      hl,(P_BnKrotmatRoofvX)
 817+ C9EA              ;                        ld      de,(P_BnKrotmatRoofvZ)
 818+ C9EA              ;                        jp      Calc222MulHLDivDE
 819+ C9EA              ;; (Y A P) = 222 * roofv_y / z to give the x-coordinate of the crater offset
 820+ C9EA              ;Cacl222MulRoofYDivRoofZ:ld      hl,(P_BnKrotmatRoofvY)
 821+ C9EA              ;                        ld      de,(P_BnKrotmatRoofvZ)
 822+ C9EA              ;; Optimise, move result at the end into HL instead of YA (we can ignore P)
 823+ C9EA              ;Calc222MulHLDivDE:      call    CalcRotMatDivide            ; calculate (Y A) = nosev_x(orY) / z
 824+ C9EA              ;                        ld      d,a                         ; P = |roofv_x / z|
 825+ C9EA              ;                        ld      e,222                       ; LDA #222               \ Set Q = 222, the offset to the crater
 826+ C9EA              ;                        ; Not needed                        ; STA Q
 827+ C9EA              ;                        ; Not needed                        ; STX U                  \ Store the vector index X in U for retrieval after the  call to MULTU
 828+ C9EA              ;                        mul     de                          ; call MULTU (unsigned multiply) de = 222 * |roofv_x / z|
 829+ C9EA              ;                        ld      a,(varK+3)                  ; LDY K+3                \ If the sign of the result in K+3 is positive, skip to
 830+ C9EA              ;                        and     a
 831+ C9EA              ;                        jp      p,.PL12                     ; BPL PL12               \ PL12 to return with Y = 0
 832+ C9EA              ;                        ld      a,$FF                       ; LDY #&FF               \ Set Y = &FF to be a negative high byte
 833+ C9EA              ;                        ld      (regY),a                    ; .
 834+ C9EA              ;                        ld      b,a                         ; .
 835+ C9EA              ;                        macronegate16de                     ; Otherwise the result should be negative, so negate
 836+ C9EA              ;                        ld      a,e                         ; now we have Y A P (with Y in b also)
 837+ C9EA              ;                        ld      (varP),a                    ; .
 838+ C9EA              ;                        ld      a,d                         ; .
 839+ C9EA              ;                        and     a
 840+ C9EA              ;                        jp      z,.ForcePositive            ; if A is 0, special case to make +ve
 841+ C9EA              ;                        ret                                 ; RTS                    \ Return from the subroutine
 842+ C9EA              ;.ForcePositive:         ZeroA                               ; set regY and b to 0
 843+ C9EA              ;                        ld      (regY),a
 844+ C9EA              ;                        ld      b,a
 845+ C9EA              ;                        ld      a,d                         ; get d back into a again
 846+ C9EA              ;                        ret
 847+ C9EA              ;.PL12:                  ZeroA                               ; set Y A P to be 0 D E from mul
 848+ C9EA              ;                        ld      b,a
 849+ C9EA              ;                        ld      (regY),a
 850+ C9EA              ;                        ld      a,e
 851+ C9EA              ;                        ld      (varP),a
 852+ C9EA              ;                        ld      a,d
 853+ C9EA              ;                        ret
 854+ C9EA
 855+ C9EA
 856+ C9EA              ; K3(1 0) = (Y A) + K3(1 0) = 222 * roofv_x / z + x-coordinate of planet centre
 857+ C9EA 6F           CalcCraterCenterX:      ld      l,a                         ; set HL to Y A
 858+ C9EB 3A A0 7E                             ld      a,(regY)                    ;
 859+ C9EE 67                                   ld      h,a                         ;
 860+ C9EF ED 5B DD 7F                          ld      de,(varK3)                  ; de = K3 [ 1 0 ]
 861+ C9F3                                      ClearCarryFlag
 861+ C9F3 B7          >                        or a
 862+ C9F4 ED 5A                                adc     hl,de
 863+ C9F6 22 DD 7F                             ld      (varK3),hl                  ; K3[1 0] = hl + de
 864+ C9F9 C9                                   ret
 865+ C9FA
 866+ C9FA              ; K4(1 0) = (Y A) - K4(1 0) = 222 * roofv_x / z + x-coordinate of planet centre
 867+ C9FA 6F           CalcCraterCenterY:      ld      l,a                         ; set HL to Y A
 868+ C9FB 3A A0 7E                             ld      a,(regY)                    ;
 869+ C9FE 67                                   ld      h,a                         ;
 870+ C9FF ED 5B E3 7F                          ld      de,(varK4)                  ; de = K4 [ 1 0 ]
 871+ CA03                                      ClearCarryFlag
 871+ CA03 B7          >                        or a
 872+ CA04 ED 52                                sbc     hl,de
 873+ CA06 22 E3 7F                             ld      (varK4),hl                  ; K4[1 0] = hl + de
 874+ CA09 C9                                   ret
 875+ CA0A
 876+ CA0A CB 7C        TwosCompToLeadingSign:  bit     7,h
 877+ CA0C C8                                   ret     z
 878+ CA0D                                      macronegate16hl
 878+ CA0D AF          >					xor 	a
 878+ CA0E 95          >					sub 	l
 878+ CA0F 6F          >					ld 		l,a
 878+ CA10 9F          >					sbc 	a,a
 878+ CA11 94          >					sub 	h
 878+ CA12 67          >					ld 		h,a
 879+ CA13 7C                                   ld      a,h
 880+ CA14 F6 80                                or      $80
 881+ CA16 67                                   ld      h,a
 882+ CA17 C9                                   ret
 883+ CA18
 884+ CA18 CB 7C        LeadingSignToTwosComp:  bit     7,h
 885+ CA1A C8                                   ret     z
 886+ CA1B 7C                                   ld      a,h
 887+ CA1C E6 7F                                and     $7F
 888+ CA1E 67                                   ld      h,a
 889+ CA1F                                      macronegate16hl
 889+ CA1F AF          >					xor 	a
 889+ CA20 95          >					sub 	l
 889+ CA21 6F          >					ld 		l,a
 889+ CA22 9F          >					sbc 	a,a
 889+ CA23 94          >					sub 	h
 889+ CA24 67          >					ld 		h,a
 890+ CA25 C9                                   ret
 891+ CA26
 892+ CA26              ;-- bc = bc * P_radius where bc = S.Fraction ,e.g nosex/nosey
 893+ CA26 3A D9 C0     P_BCmulRadius:          ld      a,(P_Radius)                ; we probably don't have radius already
 894+ CA29 57           P_BCmulRadiusInA:       ld      d,a                         ; d = radius already in a
 895+ CA2A 59                                   ld      e,c                         ; e = c (as we only hold 0.8 in bc, i.e. fractional +/- > 0)
 896+ CA2B ED 30                                mul     de                          ; mulitply raidus by c which will be fractional  generating a 8.X value)
 897+ CA2D 4A                                   ld      c,d                         ; we only want the whole number, preserving sign in b
 898+ CA2E C9                                   ret
 899+ CA2F
 900+ CA2F                 ; DEFINE  PlanetDebugLocal 1
 901+ CA2F              PlanetDraw:             IFDEF BLINEDEBUG
 902+ CA2F ~                                            call    TestBLINE
 903+ CA2F                                      ENDIF
 904+ CA2F                                      IFDEF TESTMERIDIAN
 905+ CA2F ~                                            call    TestMeridian
 906+ CA2F                                      ENDIF
 907+ CA2F                                      IFDEF PlanetDebugLocal
 908+ CA2F ~                                            ZeroA
 909+ CA2F ~                                            ; x 500, y 50, z 2000: 500/7,50/7 =>71,7 => 199,71 Yes
 910+ CA2F ~                                            ; radius becomes 24576/2000 = 12 (13 is good enough yes)
 911+ CA2F ~                                            ld      (P_BnKxsgn),a
 912+ CA2F ~                                            ld      (P_BnKysgn),a
 913+ CA2F ~                                            ld      (P_BnKzsgn),a
 914+ CA2F ~                                            ld      hl, 0
 915+ CA2F ~                                            ld      (P_BnKxlo),hl
 916+ CA2F ~                                            ld      hl,0
 917+ CA2F ~                                            ld      (P_BnKylo),hl
 918+ CA2F ~                                            ld      hl, 1500
 919+ CA2F ~                                            ld      (P_BnKzlo),hl
 920+ CA2F ~                                            ld      hl,$C800
 921+ CA2F ~                                            ld      bc,6144
 922+ CA2F ~                                            ld      de,0
 923+ CA2F ~                                            ld      (P_BnKrotmatNosevX),bc
 924+ CA2F ~                                            ld      (P_BnKrotmatNosevY),de
 925+ CA2F ~                                            ld      (P_BnKrotmatNosevZ),hl
 926+ CA2F ~                                            ld      (P_BnKrotmatRoofvX),de
 927+ CA2F ~                                            ld      (P_BnKrotmatRoofvY),hl
 928+ CA2F ~                                            ld      (P_BnKrotmatRoofvZ),bc
 929+ CA2F ~                                            ld      hl,18432
 930+ CA2F ~                                            ld      bc,$9800
 931+ CA2F ~                                            ld      (P_BnKrotmatSidevX),hl
 932+ CA2F ~                                            ld      (P_BnKrotmatSidevY),de
 933+ CA2F ~                                            ld      (P_BnKrotmatSidevZ),bc
 934+ CA2F ~            ;                                ld      hl, 230
 935+ CA2F ~            ;                                ld      de,100
 936+ CA2F ~            ;                                ld      c,200
 937+ CA2F ~            ;                                ld      b,$FF
 938+ CA2F ~                                            call    ProjectPlanet               ;  Project the planet/sun onto the screen, returning the centre's coordinates in K3(1 0) and K4(1 0)
 939+ CA2F ~                                            call    PlanetCalculateRadius
 940+ CA2F ~
 941+ CA2F ~                                            ld      hl, (P_centreX)
 942+ CA2F ~                                            ld      de,(P_centreY)
 943+ CA2F ~                                            ld      a,(P_Radius)
 944+ CA2F ~                                            ld      c,a
 945+ CA2F ~                                            ld      b,$FF
 946+ CA2F ~                                            MMUSelectLayer2
 947+ CA2F ~                                            call    l2_draw_clipped_circle
 948+ CA2F ~            .DebugMeridian1:                xor     a
 949+ CA2F ~                                            ld      (P_BnKCNT2),a
 950+ CA2F ~                                            ld      hl,(P_centreX)
 950+ CA2F ~               call    TwosCompToLeadingSign
 950+ CA2F ~              ld      (P_BnKCx),hl
 951+ CA2F ~                                            ld      hl,(P_centreY)
 951+ CA2F ~               call    TwosCompToLeadingSign
 951+ CA2F ~              ld      (P_BnKCy),hl
 952+ CA2F ~                                            call    CalcNoseRoofArcTanPI        ; CNT2 =  = arctan(-nosev_z_hi / roofv_z_hi) / 4,  if nosev_z_hi >= 0 add PI
 953+ CA2F ~                                            call    CalcNoseXDivNoseZ
 953+ CA2F ~               call  P_BCmulRadius
 953+ CA2F ~              ld      (P_BnKUx),bc
 954+ CA2F ~                                            call    CalcNoseYDivNoseZ
 954+ CA2F ~               call  P_BCmulRadius
 954+ CA2F ~              ld      (P_BnKUy),bc
 955+ CA2F ~                                            call    CalcRoofXDivRoofZ
 955+ CA2F ~               call  P_BCmulRadius
 955+ CA2F ~              ld      (P_BnKVx),bc
 956+ CA2F ~                                            call    CalcRoofYDivRoofZ
 956+ CA2F ~               call  P_BCmulRadius
 956+ CA2F ~              ld      (P_BnKVy),bc
 957+ CA2F ~
 958+ CA2F ~                                            call    DrawMeridian
 959+ CA2F ~
 960+ CA2F ~            .DebugMeridian2:                xor     a
 961+ CA2F ~                                            ld      (P_BnKCNT2),a
 962+ CA2F ~                                            ld      hl,(P_centreX)
 962+ CA2F ~               call    TwosCompToLeadingSign
 962+ CA2F ~              ld      (P_BnKCx),hl
 963+ CA2F ~                                            ld      hl,(P_centreY)
 963+ CA2F ~               call    TwosCompToLeadingSign
 963+ CA2F ~              ld      (P_BnKCy),hl
 964+ CA2F ~                                            call    CalcNoseRoofArcTanPI        ; CNT2 =  = arctan(-nosev_z_hi / roofv_z_hi) / 4,  if nosev_z_hi >= 0 add PI
 965+ CA2F ~                                            call    CalcNoseXDivNoseZ
 965+ CA2F ~               call  P_BCmulRadius
 965+ CA2F ~              ld      (P_BnKUx),bc
 966+ CA2F ~                                            call    CalcNoseYDivNoseZ
 966+ CA2F ~               call  P_BCmulRadius
 966+ CA2F ~              ld      (P_BnKUy),bc
 967+ CA2F ~                                            call    CalcSideXDivSideZ
 967+ CA2F ~               call  P_BCmulRadius
 967+ CA2F ~              ld      (P_BnKVx),bc
 968+ CA2F ~                                            call    CalcSideYDivSideZ
 968+ CA2F ~               call  P_BCmulRadius
 968+ CA2F ~              ld      (P_BnKVy),bc
 969+ CA2F ~
 970+ CA2F ~                                            call    DrawMeridian
 971+ CA2F ~
 972+ CA2F ~
 973+ CA2F ~
 974+ CA2F                                      ENDIF
 975+ CA2F 3A 18 C0                             ld      a,(P_BnKzsgn)                ; a = z sign of position
 976+ CA32 A7           .ElimiateBehind:        and     a
 977+ CA33 F8                                   ret     m                           ; if its negative then behind so exit
 978+ CA34              .TooFarAway:            ReturnIfAGTEusng   48               ; if sign (high byte 2) > 48 then too far away to render
 978+ CA34 FE 30       >                        cp    48
 978+ CA36 D0          >                        ret	 nc
 979+ CA37 21 17 C0                             ld      hl, P_BnKzhi                 ; if |P_BnKzsgn| or P_BnKzsgn are both 0 then the planet is too close so return
 980+ CA3A B6                                   or      (hl)                        ; .
 981+ CA3B C8                                   ret     z                           ; .
 982+ CA3C              ;                       loads P_centreX and Y with planet on screen centre
 983+ CA3C CD A1 C8     .Project                call    ProjectPlanet               ;  Project the planet/sun onto the screen, returning the centre's coordinates in K3(1 0) and K4(1 0)
 984+ CA3F D8                                   ret     c                           ; If the C flag is set by PROJ then the planet/sun is  not visible on-screen, so return
 985+ CA40 CD 45 C9     .CalcRadius:            call    PlanetCalculateRadius
 986+ CA43                              IFDEF   PLANETSARESOLID
 987+ CA43                                      DISPLAY "ASSMEBLING WITH SOLID PLANETS"
 988+ CA43                                      DISPLAY "TODO, pick colour based on galaxy map"
 989+ CA43 2A FA C0                             ld      hl,(P_centreX)
 990+ CA46 ED 5B 00 C1                          ld      de,(P_centreY)
 991+ CA4A 3A D9 C0                             ld      a,(P_Radius)
 992+ CA4D 4F                                   ld      c,a
 993+ CA4E 06 CF                                ld      b,$CF
 994+ CA50                                      MMUSelectLayer2
 994+ CA50 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 995+ CA54 CD FC F2                             call    l2_draw_clipped_circle_filled
 996+ CA57 C9                                   ret
 997+ CA58
 998+ CA58                              ELSE
 999+ CA58 ~
1000+ CA58 ~                                    DISPLAY "TODO: calculate STP step based on planet size"
1001+ CA58 ~            ; Note we don't to the planet type check as hitting here its always a planet
1002+ CA58 ~                                    DISPLAY "TODO:set color green"
1003+ CA58 ~                                    DISPLAY "TODO:draw circle (do we draw solid??)"
1004+ CA58 ~                                    ld      hl, (P_centreX)
1005+ CA58 ~                                    ld      de,(P_centreY)
1006+ CA58 ~                                    ld      a,(P_Radius)
1007+ CA58 ~                                    ld      c,a
1008+ CA58 ~                                    ld      b,$FF
1009+ CA58 ~                                    MMUSelectLayer2
1010+ CA58 ~                                    call    l2_draw_clipped_circle
1011+ CA58 ~                                    DISPLAY "TODO: Add check to see if on screen rather than checkign clipped Circle"
1012+ CA58 ~                                    ;ret     c                           ; circle failure means exit
1013+ CA58 ~                                    DISPLAY "DONE: REmoved check for Planet Radius high as its already done win calculate radius"
1014+ CA58 ~                                    ;ReturnIfMemNotZero    P_RadiusHigh   ; if planet raidus < 256 draw meridians or craters
1015+ CA58 ~            .DrawFeatures:          ;ld      a,(P_RadiusHigh)
1016+ CA58 ~                                    ;and     a
1017+ CA58 ~                                    ;ret     nz
1018+ CA58 ~                                    DISPLAY "TODO: Need logic to generate Planet Type"
1019+ CA58 ~            .DetermineFeature:      ld      a,(P_BnKShipType)
1020+ CA58 ~                                    cp      PlanetTypeMeridian
1021+ CA58 ~                                    jp      nz,DrawPlanetCrater
1022+ CA58 ~            DrawPlanetMeridian:     ld      a,(P_Radius)                 ; we only pull low byte as that is all we are interested in
1023+ CA58 ~            .MinSizeCheck:          ReturnIfALTNusng PlanetMinRadius
1024+ CA58 ~                                    ld      hl,(P_centreX)
1024+ CA58 ~               call    TwosCompToLeadingSign
1024+ CA58 ~              ld      (P_BnKCx),hl
1025+ CA58 ~                                    ld      hl,(P_centreY)
1025+ CA58 ~               call    TwosCompToLeadingSign
1025+ CA58 ~              ld      (P_BnKCy),hl
1026+ CA58 ~                                    call    CalcNoseRoofArcTanPI        ; CNT2 =  = arctan(-nosev_z_hi / roofv_z_hi) / 4,  if nosev_z_hi >= 0 add PI
1027+ CA58 ~                                    call    CalcNoseXDivNoseZ
1027+ CA58 ~               call  P_BCmulRadius
1027+ CA58 ~              ld      (P_BnKUx),bc
1028+ CA58 ~                                    call    CalcNoseYDivNoseZ
1028+ CA58 ~               call  P_BCmulRadius
1028+ CA58 ~              ld      (P_BnKUy),bc
1029+ CA58 ~                                    call    CalcRoofXDivRoofZ
1029+ CA58 ~               call  P_BCmulRadius
1029+ CA58 ~              ld      (P_BnKVx),bc
1030+ CA58 ~                                    call    CalcRoofYDivRoofZ
1030+ CA58 ~               call  P_BCmulRadius
1030+ CA58 ~              ld      (P_BnKVy),bc
1031+ CA58 ~                                    DISPLAY "TODO: PCNT2Debug"
1032+ CA58 ~                                    xor     a
1033+ CA58 ~                                    ld      (P_BnKCNT2),a
1034+ CA58 ~                                    call    DrawMeridian                ;--- Drawn first Meridian
1035+ CA58 ~                                    DISPLAY "TODO: Debug whilst sorting meridain"
1036+ CA58 ~                                    ret
1037+ CA58 ~            ;--- Start Second Meridian
1038+ CA58 ~                                    ld      a,(P_BnKrotmatNosevZ)       ; Set P = -nosev_z_hi
1039+ CA58 ~                                    xor     SignOnly8Bit                ; .
1040+ CA58 ~                                    ld      (varP),a                    ; .
1041+ CA58 ~                                    call    CalcNoseSideArcTanPI        ; CNT2 =  = arctan(-nosev_z_hi / side_z_hi) / 4,  if nosev_z_hi >= 0 add PI
1042+ CA58 ~                                    ld      hl,(P_centreX)
1042+ CA58 ~               call    TwosCompToLeadingSign
1042+ CA58 ~              ld      (P_BnKCx),hl
1043+ CA58 ~                                    ld      hl,(P_centreY)
1043+ CA58 ~               call    TwosCompToLeadingSign
1043+ CA58 ~              ld      (P_BnKCy),hl
1044+ CA58 ~                                    call    CalcNoseRoofArcTanPI        ; CNT2 =  = arctan(-nosev_z_hi / roofv_z_hi) / 4,  if nosev_z_hi >= 0 add PI
1045+ CA58 ~                                    call    CalcNoseXDivNoseZ
1045+ CA58 ~               call  P_BCmulRadius
1045+ CA58 ~              ld      (P_BnKUx),bc
1046+ CA58 ~                                    call    CalcNoseYDivNoseZ
1046+ CA58 ~               call  P_BCmulRadius
1046+ CA58 ~              ld      (P_BnKUy),bc
1047+ CA58 ~                                    call    CalcSideXDivSideZ
1047+ CA58 ~               call  P_BCmulRadius
1047+ CA58 ~              ld      (P_BnKVx),bc
1048+ CA58 ~                                    call    CalcSideYDivSideZ
1048+ CA58 ~               call  P_BCmulRadius
1048+ CA58 ~              ld      (P_BnKVy),bc
1049+ CA58 ~                                    DISPLAY "TODO: PCNT2Debug"
1050+ CA58 ~                                    xor     a
1051+ CA58 ~                                    ld      (P_BnKCNT2),a
1052+ CA58 ~                                    jp      DrawMeridian
1053+ CA58 ~                                    ; implicit ret
1054+ CA58 ~            DrawPlanetCrater:       ld      a,(P_BnKrotmatRoofvZ+1)      ; a= roofz hi
1055+ CA58 ~                                    and     a                           ; if its negative, crater is on far size of planet
1056+ CA58 ~                                    ret     m                           ; .
1057+ CA58 ~                                    call    Cacl222MulRoofXDivRoofZ     ;  (Y A P) = 222 * roofv_x / z to give the x-coordinate of the crater offset
1058+ CA58 ~                                    call    CalcCraterCenterX           ;  222 * roofv_x / z + x-coordinate of planet centre
1059+ CA58 ~                                    call    Cacl222MulRoofYDivRoofZ     ;  (Y A P) = 222 * roofv_y / z to give the x-coordinate of the crater offset
1060+ CA58 ~                                    call    CalcCraterCenterY           ;  222 * roofv_y / z - y-coordinate of planet centre
1061+ CA58 ~                                    call    CalcNoseXDivNoseZ           ;  (Y A) = nosev_x / z
1062+ CA58 ~                                    call    CalcNoseYDivNoseZ           ; (XX16+1 K2+1) = nosev_y / z
1063+ CA58 ~                                    call    CalcSideYDivSideZ           ;  (Y A) = sidev_y / z
1064+ CA58 ~                                    srl     a                           ; Set (XX16+3 K2+3) = (Y A) / 2
1065+ CA58 ~                                    ld      (varK2+3),a                 ; .
1066+ CA58 ~                                    ld      a,(regY)                    ; (which is also in b to optimise later)
1067+ CA58 ~                                    ld      (P_XX16+3),a                 ;
1068+ CA58 ~                                    ld      a,64                        ; Set TGT = 64, so we draw a full ellipse in the call to PLS22 below
1069+ CA58 ~                                    ld      (P_BnKTGT),a
1070+ CA58 ~                                    ZeroA
1071+ CA58 ~                                    ld      (P_BnKCNT2),a                ; Set CNT2 = 0 as we are drawing a full ellipse, so we don't need to apply an offset
1072+ CA58 ~                                    jp      DrawElipse
1073+ CA58                              ENDIF
1074+ CA58
1075+ CA58
1076+ CA58              ;PLS2                                                   Test
1077+ CA58              ; K[10] = radius                                        $0000?
1078+ CA58              ; k3[10], K4[10] X, y pixel of centre
1079+ CA58              ; (XX16, K2), (XX16+1,K2+1) u_x , u_y                   $1F80  $FE80
1080+ CA58              ; (XX16+2, K2+2), (XX16+3,K2+3) z_x , z_y               $0000  $0000
1081+ CA58              ; TGT - target segment count                            $00
1082+ CA58              ; CNT2 - starting segment                               $0D
1083+ CA58              ; Now uses (Word) P_BnKCx, Cy, (Byte) Ux, Uy, Vx, Vy
1084+ CA58                                      DISPLAY "TODO move code back in that was pulled outof BLINE"
1085+ CA58 3E 3F        DrawMeridian:           ld      a,63                        ; Set TGT = 31, so we only draw half an ellipse
1086+ CA5A 32 8E C0                             ld      (P_BnKTGT),a                ; and fall into DrawElipse
1087+ CA5D                                      DISPLAY "TODO DEBUG STP Default of 1"
1088+ CA5D 3E 01                                ld      a,1
1089+ CA5F 32 8F C0                             ld      (P_BnKSTP),a
1090+ CA62              ;PLS22
1091+ CA62                                      DISPLAY "TODO: Sort out sign byte for uxuy vxvy in calling code"
1092+ CA62              ; Set counter to 0 and reset flags--------------------------
1093+ CA62              DrawElipse:
1094+ CA62              .Initialise:            ZeroA
1094+ CA62 AF          >                        xor a
1095+ CA63 32 C2 C0                             ld      (P_BnKCNT),a                ; Set CNT = 0
1096+ CA66 32 7C C0                             ld      (P_BnKSinCNT2Sign),a
1097+ CA69 32 7E C0                             ld      (P_BnKCosCNT2Sign),a
1098+ CA6C 32 80 C0                             ld      (P_BnKUxCosSign),a          ; for debugging later we will just use the cos and sin signs above
1099+ CA6F 32 82 C0                             ld      (P_BnKUyCosSign),a          ; .
1100+ CA72 32 88 C0                             ld      (P_BnKUxUyCosSign),a        ; .
1101+ CA75 32 84 C0                             ld      (P_BnKVxSinSign),a          ; .
1102+ CA78 32 86 C0                             ld      (P_BnKVySinSign),a          ; .
1103+ CA7B 32 87 C0                             ld      (P_BnKVxVySinSign),a        ; .
1104+ CA7E 3D                                   dec     a
1105+ CA7F 32 C5 C0                             ld      (P_BnKFlag),a               ; Set FLAG = &FF to reset the ball line heap in the call to the BLINE routine below
1106+ CA82              .PLL4:                  ;break
1107+ CA82 3A C3 C0     .GetSinAngle:           ld      a,(P_BnKCNT2)               ; Set angle = CNT2 mod 32 (was regX)
1108+ CA85 E6 1F                                and     31                          ;
1109+ CA87              ; Caclulate Sin(CNT2)---------------------------------------;
1110+ CA87 32 8D C0                             ld      (P_BnKAngle),a              ; save for debugging So P_BnKAngle is the starting segment, reduced to the range 0 to 32, so as there are 64 segments in the circle, this
1111+ CA8A CD AB 93     .CalculateSinCNT2:      call    LookupSineA                 ; Set Q = sin(angle)  = sin(CNT2 mod 32) = |sin(CNT2)|
1112+ CA8D 32 B6 7F                             ld      (varQ),a                    ; .
1113+ CA90 32 7B C0                             ld      (P_BnKSinCNT2),a            ; for debugging
1114+ CA93              ; calculate BnKVxSin = VX*Sin(CNT2)-------------------------;
1115+ CA93 3A 77 C0     .GetVxSin:              ld      a,(P_BnKVx)                 ; Set A = K2+2 = |v_x|
1116+ CA96 CD B1 91                             call    AequAmulQdiv256usgn         ; R = A * Q / 256 = |v_x| * |sin(CNT2)|
1117+ CA99 32 83 C0                             ld      (P_BnKVxSin),a              ; now varR = vx*sin(CNT2)
1118+ CA9C              ; calculate BnkVySin = Vy*Sin(CNT2)-------------------------;
1119+ CA9C 3A 79 C0     .GetVySin:              ld      a,(P_BnKVy)                 ; Set A = K2+3 = |v_y|
1120+ CA9F CD B1 91                             call    AequAmulQdiv256usgn         ; Set varK = A * Q / 256 = |v_y| * |sin(CNT2)|
1121+ CAA2 32 85 C0                             ld      (P_BnKVySin),a              ;
1122+ CAA5              ; Now work sign of vx and vy * sin -------------------------; In 6502 below, in z80 C flag is reversed
1123+ CAA5 3A C3 C0     .CalcVxVyMulSinSign:    ld      a,(P_BnKCNT2)               ; If CNT2 >= 33 then this sets the C flag, else clear : C is clear if the segment starts in the first half of the circle, 0 to 180 degrees
1124+ CAA8 FE 21                                cp      33                          ;                                                       C is set if the segment starts in the second half of the circle, 180 to 360 degrees
1125+ CAAA DA BB CA                             jp      c,.NoSignChangeSin          ; in z80 c means < 33 so we don't do sign flip
1126+ CAAD 3E 80                                ld      a,$80
1127+ CAAF 32 7C C0                             ld      (P_BnKSinCNT2Sign),a        ; save sign of sin CNT2 for debugging
1128+ CAB2 32 84 C0                             ld      (P_BnKVxSinSign),a          ; |v_x| * |sin(CNT2)|
1129+ CAB5 32 86 C0                             ld      (P_BnKVySinSign),a          ; |v_y| * |sin(CNT2)|
1130+ CAB8 32 87 C0                             ld      (P_BnKVxVySinSign),a        ; |v_x/y| * |sin(CNT2)|
1131+ CABB              .NoSignChangeSin:
1132+ CABB              ; calculate cos(CNT2)---------------------------------------;
1133+ CABB 3A C3 C0     .CalculateCosCNT2:      ld      a,(P_BnKCNT2)               ; Set X = (CNT2 + 16) mod 32
1134+ CABE C6 10                                add     a, 16                       ; .
1135+ CAC0 E6 1F                                and     31                          ; .
1136+ CAC2 32 8D C0                             ld      (P_BnKAngle),a              ; save for debugging So we can use X as a lookup index into the SNE table to get the cosine (as there are 16 segments in a  quarter-circle)
1137+ CAC5 CD AB 93                             call    LookupSineA                 ; Set Q = sin(X)  = sin((CNT2 + 16) mod 32) = |cos(CNT2)|
1138+ CAC8 32 B6 7F                             ld      (varQ),a                    ; .
1139+ CACB 32 7D C0                             ld      (P_BnKCosCNT2),a            ; for debugging
1140+ CACE              ; calculate Uy*Cos(CNT2)------------------------------------;
1141+ CACE 3A 75 C0     .GetUyCos:              ld      a,(P_BnKUy)                 ; Set A = K2+1 = |u_y|
1142+ CAD1 CD B1 91                             call    AequAmulQdiv256usgn         ; Set P_BnKUyCos(wasK+2) = A * Q / 256 = |u_y| * |cos(CNT2)|
1143+ CAD4 32 81 C0                             ld      (P_BnKUyCos),a              ; .
1144+ CAD7              ; calculate Ux*Cos(CNT2)------------------------------------;
1145+ CAD7 3A 73 C0     .GetUxCos:              ld      a,(P_BnKUx)                 ; Set A = K2 = |u_x|
1146+ CADA CD B1 91                             call    AequAmulQdiv256usgn         ; Set P_BnKUxCos(wasP) = A * Q / 256 = |u_x| * |cos(CNT2)| also sets the C flag, so in the following, ADC #15 adds 16 rather than 15 (use use non carry add)
1147+ CADD 32 7F C0                             ld      (P_BnKUxCos),a              ; .
1148+ CAE0              ; now work out sign for cos CNT2----------------------------;
1149+ CAE0 3A C3 C0     .CalcUxUyMulCosSign:    ld      a,(P_BnKCNT2)               ; If (CNT2 + 16) mod 64 >= 33 then this sets the C flag,
1150+ CAE3 C6 10                                add     a,16                        ; otherwise it's clear, so this means that:
1151+ CAE5 E6 3F                                and     63                          ; .
1152+ CAE7 FE 21                                cp      33                          ; c is clear if the segment is 0 to 90 or 270 to 360, we need
1153+ CAE9 DA FA CA                             jp      c,.NoSignChangeCos          ; in z80 c means < 33 so we don't do sign flip
1154+ CAEC 3E 80                                ld      a,$80
1155+ CAEE 32 7E C0                             ld      (P_BnKCosCNT2Sign),a        ; save sign of sin CNT2 for debugging
1156+ CAF1 32 80 C0                             ld      (P_BnKUxCosSign),a          ; add XX16+5 as the high byte to give us (XX16+5 K) = |v_y| * sin(CNT2) &  (XX16+5 R) = |v_x| * sin(CNT2)
1157+ CAF4 32 82 C0                             ld      (P_BnKUyCosSign),a          ; add XX16+5 as the high byte to give us (XX16+5 K) = |v_y| * sin(CNT2) &  (XX16+5 R) = |v_x| * sin(CNT2)
1158+ CAF7 32 88 C0                             ld      (P_BnKUxUyCosSign),a        ; add XX16+5 as the high byte to give us (XX16+5 K) = |v_y| * sin(CNT2) &  (XX16+5 R) = |v_x| * sin(CNT2)
1159+ CAFA              .NoSignChangeCos:
1160+ CAFA              ; calculate Ux*cos + vx*sin---------------------------------;
1161+ CAFA 3A 7C C0     .CalcSignOfVxMulSin:    ld      a,(P_BnKSinCNT2Sign)        ; Set S = the sign of XX16+2 * XX16+5
1162+ CAFD 21 78 C0                             ld      hl,P_BnKVxSign              ; = the sign of v_x * XX16+5
1163+ CB00 AE                                   xor     (hl)                        ; .
1164+ CB01 E6 80                                and     $80                         ; so a is only sign bit now
1165+ CB03 32 84 C0                             ld      (P_BnKVxSinSign),a          ; P_BnKVxSin (was SR) = v_x * sin(CNT2)
1166+ CB06 3A 7E C0     .CalcSignOfUxMulCos:    ld      a,(P_BnKCosCNT2Sign)        ; Set A = the sign of XX16 * XX16+4
1167+ CB09 21 74 C0                             ld      hl,P_BnKUxSign              ; (i.e. sign of u_x * XX16_+4
1168+ CB0C AE                                   xor     (hl)                        ; so (A P) = u_x * cos(CNT2)
1169+ CB0D E6 80                                and     $80                         ; so a is only sign bit now
1170+ CB0F 32 80 C0                             ld      (P_BnKUxCosSign),a          ; now P_BnKUxCos
1171+ CB12 2A 7F C0     .AddUxCosVxSin:         ld      hl,(P_BnKUxCos)             ; Set (A X) = (A P) + (S R)  = u_x * cos(CNT2) + v_x * sin(CNT2) we could work with a but its simpler to jsut reload hl
1172+ CB15 ED 5B 83 C0                          ld      de,(P_BnKVxSin)             ; as R S are next to each other can load as one
1173+ CB19 CD 04 00                             call    AddDEtoHLSigned             ; hl = u_x * cos(CNT2) + v_x * sin(CNT2) format S15 not 2'sc
1174+ CB1C 22 89 C0     .DoneAddUxCosVxSin:     ld      (P_BnKUxCosAddVxSin),hl     ;
1175+ CB1F              ; calculate -(Uy*cos - vy*sin)------------------------------;
1176+ CB1F 3A 7C C0     .CalcSignOfVyMulSin:    ld      a,(P_BnKSinCNT2Sign)        ; Set S = the sign of XX16+2 * XX16+5
1177+ CB22 21 7A C0                             ld      hl,P_BnKVySign              ; = the sign of v_x * XX16+5
1178+ CB25 AE                                   xor     (hl)                        ; .
1179+ CB26 E6 80                                and     $80                         ; so a is only sign bit now
1180+ CB28 32 86 C0                             ld      (P_BnKVySinSign),a          ; P_BnKVxSin (was SR) = v_x * sin(CNT2)
1181+ CB2B 3A 7E C0     .CalcSignOfUyMulCos:    ld      a,(P_BnKCosCNT2Sign)        ; Set A = the sign of XX16 * XX16+4
1182+ CB2E 21 76 C0                             ld      hl,P_BnKUySign              ; (i.e. sign of u_x * XX16_+4
1183+ CB31 AE                                   xor     (hl)                        ; so (A P) = u_x * cos(CNT2)
1184+ CB32 E6 80                                and     $80                         ; so a is only sign bit now
1185+ CB34 32 82 C0                             ld      (P_BnKUyCosSign),a          ; now P_BnKUxCos
1186+ CB37 2A 81 C0     .AddUyCosVySin:         ld      hl,(P_BnKUyCos)             ; Set (A X) = (A P) + (S R)  = u_x * cos(CNT2) + v_x * sin(CNT2) we could work with a but its simpler to jsut reload hl
1187+ CB3A ED 5B 85 C0                          ld      de,(P_BnKVySin)             ; as R S are next to each other can load as one
1188+ CB3E CD 04 00                             call    AddDEtoHLSigned             ; hl = u_x * cos(CNT2) + v_x * sin(CNT2) format S15 not 2'sc
1189+ CB41 22 8B C0     .DoneAddUyCosVySin:     ld      (P_BnKUyCosSubVySin),hl     ;
1190+ CB44              ; Calculate NewXPos = Centrey - Uy cos - vy cos (which we still have in hl)
1191+ CB44              .PL42:
1192+ CB44 ED 5B 71 C0  .CalcNewYPos:           ld      de, (P_BnKCy)               ; Hl is already in HL so de =  Cx
1193+ CB48 EB                                   ex      hl,de                       ; swap round so we can do hl + de where de is already negated to effect a subtract (probabyl don't don't need this)
1194+ CB49 7A                                   ld      a,d
1195+ CB4A EE 80                                xor     $80                         ; now flip bit as its a subtract not add
1196+ CB4C 57                                   ld      d,a
1197+ CB4D CD 7C CB                             call    ScaleDE75pct
1198+ CB50 CD 04 00                             call    AddDEtoHLSigned             ; hl = cy - ( uy Cos + vy sin)
1199+ CB53 22 E0 C0                             ld      (P_NewYPos),hl              ; load to new Y Pos
1200+ CB56 2A 6F C0     .CalcNewXPos:           ld      hl,(P_BnKCx)
1201+ CB59 ED 5B 89 C0                          ld      de,(P_BnKUxCosAddVxSin)
1202+ CB5D CD 7C CB                             call    ScaleDE75pct
1203+ CB60 CD 04 00                             call    AddDEtoHLSigned             ; hl = cx - ( ux Cos + vx sin)
1204+ CB63 22 DE C0                             ld      (P_NewXPos),hl
1205+ CB66 CD A1 CB     .PL43:                  call    BLINE                       ; hl = TX  draw this segment, updates CNT in A
1206+ CB69                                      ReturnIfAGTEMemusng P_BnKTGT        ; If CNT > TGT then jump to PL40 to stop drawing the ellipse (which is how we draw half-ellipses)
1206+ CB69 21 8E C0    >                        ld      hl,P_BnKTGT
1206+ CB6C BE          >                        cp      (hl)
1206+ CB6D D0          >                        ret	    nc
1207+ CB6E 3A C3 C0                             ld      a,(P_BnKCNT2)               ; Set CNT2 = (CNT2 + STP) mod 64
1208+ CB71 21 8F C0                             ld      hl,P_BnKSTP                 ; .
1209+ CB74 86                                   add     a,(hl)                      ; .
1210+ CB75 32 C3 C0                             ld      (P_BnKCNT2),a               ; .
1211+ CB78 C3 82 CA                             jp      .PLL4                       ; Jump back to PLL4 to draw the next segment
1212+ CB7B C9           .PL40:                  ret
1213+ CB7C
1214+ CB7C
1215+ CB7C EB           ScaleDE75pct:           ex      de,hl
1216+ CB7D 7C                                   ld      a,h
1217+ CB7E A7                                   and     a
1218+ CB7F F5                                   push    af
1219+ CB80 F2 86 CB                             jp      p,.PositiveHL
1220+ CB83 E6 7F        .NegativeHL:            and     $7F
1221+ CB85 67                                   ld      h,a
1222+ CB86 D5           .PositiveHL:            push    de
1223+ CB87 54 5D                                ld      de,hl
1224+ CB89 29                                   add     hl,hl                       ; * 2
1225+ CB8A 19                                   add     hl,de
1226+ CB8B D1                                   pop     de
1227+ CB8C                                      ShiftHLRight1
1227+ CB8C CB 3C       >			   srl h
1227+ CB8E CB 1D       >			   rr  l
1228+ CB90                                      ShiftHLRight1
1228+ CB90 CB 3C       >			   srl h
1228+ CB92 CB 1D       >			   rr  l
1229+ CB94 EB           CheckSign:              ex      de,hl
1230+ CB95 F1                                   pop     af
1231+ CB96 A7                                   and     a
1232+ CB97 F0                                   ret     p
1233+ CB98 7C                                   ld      a,h
1234+ CB99 F6 80                                or      $80
1235+ CB9B 67                                   ld      h,a
1236+ CB9C C9                                   ret
1237+ CB9D
1238+ CB9D              ;  Draw a single segment of a circle, adding the point to the ball line heap.
1239+ CB9D              ;  Arguments:
1240+ CB9D              ;   CNT                  The number of this segment
1241+ CB9D              ;   STP                  The step size for the circle
1242+ CB9D              ;   K6(1 0)              The x-coordinate of the new point on the circle, as a screen coordinate
1243+ CB9D              ;   P_New Pos-- (T X)                The y-coordinate of the new point on the circle, as an offset from the centre of the circle
1244+ CB9D              ;   FLAG                 Set to &FF for the first call, so it sets up the first point in the heap but waits until the second call before drawing anything (as we need two points, i.e. two calls, before we can draw a line)
1245+ CB9D              ;   -- Not UsedK                    The circle's radius
1246+ CB9D              ;   -- Not UsedK3(1 0)              Pixel x-coordinate of the centre of the circle
1247+ CB9D              ;   -- Not UsedK4(1 0)              Pixel y-coordinate of the centre of the circle
1248+ CB9D              ;   P_PrevXPos--K5(1 0)              Screen x-coordinate of the previous point added to the ball line heap (if this is not the first point)
1249+ CB9D              ;   P_PrevYPos--K5(3 2)              Screen y-coordinate of the previous point added to the ball line heap (if this is not the first point)
1250+ CB9D              ;   SWAP                 If non-zero, we swap (X1, Y1) and (X2, Y2)
1251+ CB9D              ; Returns:
1252+ CB9D              ;   CNT                  CNT is updated to CNT + STP
1253+ CB9D              ;   A                    The new value of CNT
1254+ CB9D              ;   P_PrevXPos --K5(1 0)              Screen x-coordinate of the point that we just added to the ball line heap
1255+ CB9D              ;   P_PrevYPos--K5(3 2)              Screen y-coordinate of the point that we just added to the ball line heap
1256+ CB9D              ;   FLAG                 Set to 0`
1257+ CB9D              ; ** THIS NEEDS CHANGING TO IMMEDIATE DRAW and retain last line end pos) ;
1258+ CB9D              ; Flow of code
1259+ CB9D              ; Entry Bline, prepare T , X K4 etc
1260+ CB9D              ;       BL1
1261+ CB9D 00           PLINEx1                 DB 0
1262+ CB9E 00           PLINEy1                 DB 0
1263+ CB9F 00           PLINEx2                 DB 0
1264+ CBA0 00           PLINEy2                 DB 0
1265+ CBA1
1266+ CBA1                                      IFDEF MERIDANLINEDEBUG
1267+ CBA1 ~            ; Store X and Y on plot line (ball) heap, values bc = YX to save, a = offset
1268+ CBA1 ~            P_StoreXYOnHeap:        ld      hl,P_BnKPlotXHeap
1269+ CBA1 ~                                    ld      bc,(P_NewXPos)
1270+ CBA1 ~                                    ld      de,(P_NewYPos)      ; now save Y
1271+ CBA1 ~                                    ld      a,(P_BnKPlotIndex)  ; get off set
1272+ CBA1 ~                                    add     hl,a                ; now we have x heap target
1273+ CBA1 ~                                    ld      (hl),b
1274+ CBA1 ~                                    inc     hl
1275+ CBA1 ~                                    ld      (hl),c
1276+ CBA1 ~                                    ld      a, $80 - 1          ; note its 2 bytes per coord element, we have already incremeted by 1 byte
1277+ CBA1 ~                                    add     hl,a
1278+ CBA1 ~                                    ld      (hl),d
1279+ CBA1 ~                                    inc     hl
1280+ CBA1 ~                                    ld      (hl),e
1281+ CBA1 ~                                    ld      a,(P_BnKPlotIndex)  ; get index back
1282+ CBA1 ~                                    inc     a                   ; move on 2 bytes
1283+ CBA1 ~                                    inc     a                   ; .
1284+ CBA1 ~                                    ld      (P_BnKPlotIndex),a  ; and save it
1285+ CBA1 ~                                    ret
1286+ CBA1                                      ENDIF
1287+ CBA1
1288+ CBA1              ; We'll move the calculation of absolute screen pos outside of bline so we expect screen pixel coordinates
1289+ CBA1              BLINE:                  ;ld      a,(P_Tvar)          ; entry point if we need to fetch TX
1290+ CBA1                                      ;ld      h,a
1291+ CBA1                                      ;ld      a,(P_Xreg)
1292+ CBA1                                      ;ld      l,a
1293+ CBA1              BLINE_HL:               ;ld      de,(P_varK4)        ; Set K6(3 2) = (T X) + K4(1 0) = y-coord of centre + y-coord of new point
1294+ CBA1                                      ;ex      de,hl               ;not really needed
1295+ CBA1                                      ;ClearCarryFlag              ; .
1296+ CBA1                                      ;adc     hl,de               ; .
1297+ CBA1                                      ;ld      a,h
1298+ CBA1                                      ;ld      (P_varK6p2),hl      ; so K6(3 2) now contains the y-coordinate of the new point on the circle but as a screen coordinate, to go along with the screen y-coordinate in K6(1 0)
1299+ CBA1 3A C5 C0                             ld      a,(P_BnKFlag)       ; If FLAG = 0, jump down to BL1, else its FF so we save first point
1300+ CBA4 A7                                   and     a                   ; .
1301+ CBA5 CA AF CB                             jp      z,.BL1              ; .
1302+ CBA8              .FirstPlot:
1303+ CBA8              ; This code now stores on line heap if debugging is enabled else it just stores in Prev X and Y for direct plotting
1304+ CBA8              ; First time in we are just establinshign first position point, then we can exit
1305+ CBA8 3C           .BL5:                   inc     a                   ; Flag is &FF so this is the first call to BLINE so increment FLAG to set it to 0
1306+ CBA9 32 C5 C0                             ld      (P_BnKFlag),a       ; so we just save the first point and don't plot it
1307+ CBAC                                      DISPLAY "TODO, set up proper variables, hold variables for previous X Y, we don't need ball heap"
1308+ CBAC                                      DISPLAY "TODO, created a plot xy heap to store for debugging purposes, delete once not needed"
1309+ CBAC                                      DISPLAY "TODO, need flag for start which is probably CNT being 0?"
1310+ CBAC                                      IFDEF   MERIDANLINEDEBUG
1311+ CBAC ~                                    ZeroA
1312+ CBAC ~                                    ld      (P_BnKPlotIndex),a  ; Initialise line list
1313+ CBAC                                      ENDIF
1314+ CBAC              ; We don't need to copy to prev here as we do it in BL7
1315+ CBAC C3 DD CB                             jp      .SkipFirstPlot      ; Jump to BL7 to tidy up and return from the subroutine
1316+ CBAF              ; This section performs teh clipping and draw of the line. it retrieves previous position and draws to new
1317+ CBAF              .BL1:
1318+ CBAF              ; note we still need the unclipped points for the next segment as we have to clip again
1319+ CBAF                                      ;ld      hl,(PLINEx1)        ; Otherwise the coordinates were swapped by the call to
1320+ CBAF                                      ;ld      de,(PLINEx2)        ; LL145 above, so we swap (X1, Y1) and (X2, Y2) back
1321+ CBAF                                      ;ld      (PLINEx1),de        ; again
1322+ CBAF                                      ;ld      (PLINEx2),hl        ; .
1323+ CBAF              .BL9:                   DISPLAY "TODO  Removed BnKLSP, check fine"
1324+ CBAF              .BL8:                   DISPLAY "TODO  Removed BnKLSP, check fine"
1325+ CBAF                                      ;ld      a,(P_BnKPlotIndex) ; Set Line Stack Pointer to be the same as Plot Index)
1326+ CBAF                                      ;ld      (P_BnKLSP),a
1327+ CBAF 2A DA C0                             ld      hl,(P_PrevXPos)     ; set line X2 to PLINEx2
1328+ CBB2 22 E5 C0                             ld      (P_XX1510),hl
1329+ CBB5 2A DC C0                             ld      hl,(P_PrevYPos)     ; set line X2 to PLINEx2
1330+ CBB8 22 E7 C0                             ld      (P_XX1532),hl
1331+ CBBB 2A DE C0                             ld      hl,(P_NewXPos)      ; set line X2 to PLINEx2
1332+ CBBE 22 E9 C0                             ld      (P_XX1554),hl
1333+ CBC1 2A E0 C0                             ld      hl,(P_NewYPos)      ; set line X2 to PLINEx2
1334+ CBC4 22 EB C0                             ld      (P_XX1210),hl
1335+ CBC7 CD F8 C2     .CLipLine:              call    P_LL145_6502        ; Clip  line from (X1, Y1) to (X2, Y2), loads to X1,Y1,X2,Y2 P_XX1510 as bytes                        ld      bc,(XX1510)
1336+ CBCA 38 11                                jr      c,.LineTotallyClipped
1337+ CBCC                                      DISPLAY "TODO what was the Ld de for?"
1338+ CBCC              ;                        ld      de,(XX1532)
1339+ CBCC                                      DISPLAY "TODO SORT OUT PROPER PLANET COLOR"
1340+ CBCC 3E CC        .DrawLine:              ld      a,$CC
1341+ CBCE ED 4B E5 C0                          ld      bc,(P_XX15PlotX1)
1342+ CBD2 ED 5B E7 C0                          ld      de,(P_XX15PlotX2)
1343+ CBD6                                      MMUSelectLayer2
1343+ CBD6 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
1344+ CBDA CD FC FA                             call    l2_draw_any_line
1345+ CBDD                                      DISPLAY "TODO removed check for starting line segments again as we draw direct"
1346+ CBDD              ;                        ld      a,(P_XX13)          ; If XX13 is non-zero, jump up to BL5 to add a &FF marker to the end of the line heap. XX13 is non-zero
1347+ CBDD              ;                        and     a                   ; after the call to the clipping routine LL145 above if the end of the line was clipped, meaning the next line
1348+ CBDD              ;                        jp      z,.BL5              ; sent to BLINE can't join onto the end but has to start a new segment, and that's what inserting the &FF marker does
1349+ CBDD              ; if line was totally clipped just store new x and y as previous and continue from there
1350+ CBDD              .SkipFirstPlot:
1351+ CBDD              .LineTotallyClipped:
1352+ CBDD 2A DE C0     .BL7:                   ld      hl,(P_NewXPos)        ; Copy the data for this step point from K6(3 2 1 0)
1353+ CBE0 ED 5B E0 C0                          ld      de,(P_NewYPos)        ; into K5(3 2 1 0), for use in the next call to BLINE:
1354+ CBE4 22 DA C0                             ld      (P_PrevXPos),hl
1355+ CBE7 ED 53 DC C0                          ld      (P_PrevYPos),de
1356+ CBEB                                      IFDEF   MERIDANLINEDEBUG
1357+ CBEB ~                                    call    P_StoreXYOnHeap
1358+ CBEB                                      ENDIF
1359+ CBEB              ;                        ld      (P_varK5),hl        ; * K5(1 0)(3 2) = x, y of previous point
1360+ CBEB              ;                        ld      (P_varK5p2),de      ;
1361+ CBEB 3A C2 C0                             ld      a,(P_BnKCNT)         ; CNT = CNT + STP
1362+ CBEE 21 8F C0                             ld      hl,P_BnKSTP
1363+ CBF1                                      ClearCarryFlag
1363+ CBF1 B7          >                        or a
1364+ CBF2 8E                                   adc     a,(hl)
1365+ CBF3 32 C2 C0                             ld      (P_BnKCNT),a
1366+ CBF6 C9                                   ret
1367+ CBF7
1368+ CBF7              PlanetBankSize  EQU $ - StartOfPlanet
1369+ CBF7
1370+ CBF7
# file closed: ./Universe/Planet/planet_data.asm
1048  CBF7                                  DISPLAY "Bank ",BankPlanetData," - Bytes free ",/D, $2000 - ($-PlanetBankAddr), " - BankPlanetData"
1049  CBF7                                  ASSERT $-PlanetBankAddr <8912, Bank code leaks over 8K boundary
1050  CBF7              ;;;***; Bank 85  ------------------------------------------------------------------------------------------------------------------------
1051  CBF7              ;;;***                        SLOT    SpriteDataAAddr
1052  CBF7              ;;;***                        PAGE    BankSpriteDataA
1053  CBF7              ;;;***                        ORG     SpriteDataAAddr, BankSpriteDataA
1054  CBF7              ;;;***                        INCLUDE "./Layer3Sprites/sprite_loadA.asm"
1055  CBF7              ;;;***                        INCLUDE "./Layer3Sprites/SpriteSheetA.asm"
1056  CBF7              ;;;***                        DISPLAY "Bank ",BankSpriteDataA," - Bytes free ",/D, $2000 - ($-SpriteDataAAddr), " - BankSpriteDataA"
1057  CBF7              ;;;***; Bank 86  ------------------------------------------------------------------------------------------------------------------------
1058  CBF7              ;;;***                        SLOT    SpriteDataBAddr
1059  CBF7              ;;;***                        PAGE    BankSpriteDataB
1060  CBF7              ;;;***                        ORG     SpriteDataBAddr, BankSpriteDataB
1061  CBF7              ;;;***                        INCLUDE "./Layer3Sprites/sprite_loadB.asm"
1062  CBF7              ;;;***                        INCLUDE "./Layer3Sprites/SpriteSheetB.asm"
1063  CBF7              ;;;***                        DISPLAY "Bank ",BankSpriteDataB," - Bytes free ",/D, $2000 - ($-SpriteDataBAddr), " - BankSpriteDataB"
1064  CBF7              ; Bank 91  ------------------------------------------------------------------------------------------------------------------------
1065  CBF7                                  SLOT    GalaxyDataAddr
1066  CBF7                                  PAGE    BankGalaxyData0
1067  CBF7                                  ORG GalaxyDataAddr, BankGalaxyData0
1068  E000                                  INCLUDE "./Universe/Galaxy/galaxy_data.asm"
# file opened: ./Universe/Galaxy/galaxy_data.asm
   1+ E000 47 61 6C 61  galaxy_page_marker  DB "Galaxy      PG9"
   1+ E004 78 79 20 20
   1+ E008 20 20 20 20
   1+ E00C 50 47 39
   2+ E00F 30           galaxy_pg_cnt       DB "0"
   3+ E010 00 00 00...  galaxy_master_seed  DS 6
   4+ E016 00 00 00...  galaxy_data DS 8*256
   5+ E816 2D 2D 2D 2D  galaxy_code_end DB "-----------------------------------------------------------------"
   5+ E81A 2D 2D 2D 2D
   5+ E81E 2D 2D 2D 2D
   5+ E822 2D 2D 2D 2D
   5+ E826 2D 2D 2D 2D
   5+ E82A 2D 2D 2D 2D
   5+ E82E 2D 2D 2D 2D
   5+ E832 2D 2D 2D 2D
   5+ E836 2D 2D 2D 2D
   5+ E83A 2D 2D 2D 2D
   5+ E83E 2D 2D 2D 2D
   5+ E842 2D 2D 2D 2D
   5+ E846 2D 2D 2D 2D
   5+ E84A 2D 2D 2D 2D
   5+ E84E 2D 2D 2D 2D
   5+ E852 2D 2D 2D 2D
   5+ E856 2D
   6+ E857 00 00        GalaxyPresentSystem:     DW 0
   7+ E859 00 00        GalaxyDestinationSystem: DW 0
   8+ E85B 00 00        GalaxyTargetSystem:      DW 0
   9+ E85D              ; including a DB 0 as a catcher
  10+ E85D 00           GalaxySearchLength:      DB 0
  11+ E85E 00 00 00...  GalaxySearchString:      DS 32
  12+ E87E 00                                    DB 0
  13+ E87F 00 00 00...  GalaxyExpandedName:      DS 32
  14+ E89F 00                                    DB 0
  15+ E8A0 41 42 4F 55  GalaxyName_digrams	     DB "ABOUSEITILETSTONLONUTHNOALLEXEGEZACEBISOUSESARMAINDIREA?ERATENBERALAVETIEDORQUANTEISRION"
  15+ E8A4 53 45 49 54
  15+ E8A8 49 4C 45 54
  15+ E8AC 53 54 4F 4E
  15+ E8B0 4C 4F 4E 55
  15+ E8B4 54 48 4E 4F
  15+ E8B8 41 4C 4C 45
  15+ E8BC 58 45 47 45
  15+ E8C0 5A 41 43 45
  15+ E8C4 42 49 53 4F
  15+ E8C8 55 53 45 53
  15+ E8CC 41 52 4D 41
  15+ E8D0 49 4E 44 49
  15+ E8D4 52 45 41 3F
  15+ E8D8 45 52 41 54
  15+ E8DC 45 4E 42 45
  15+ E8E0 52 41 4C 41
  15+ E8E4 56 45 54 49
  15+ E8E8 45 44 4F 52
  15+ E8EC 51 55 41 4E
  15+ E8F0 54 45 49 53
  15+ E8F4 52 49 4F 4E
  16+ E8F8 00 00 00...  GalaxyWorkingSeed        DS 6
  17+ E8FE 00 00 00...  GalaxyNamingSeed         DS 6
  18+ E904 00 00 00...  GalaxySavedRandomSeed    DS 6
  19+ E90A
  20+ E90A 00           GalaxyDisplayGovernment         DB 0
  21+ E90B 00           GalaxyDisplayEconomy            DB 0
  22+ E90C 00           GalaxyDisplayTekLevel           DB 0
  23+ E90D 00           GalaxyDisplayPopulation         DB 0
  24+ E90E 00 00        GalaxyDisplayProductivity       DW 0
  25+ E910 00 00        GalaxyDisplayRadius             DW 0
  26+ E912
  27+ E912 66 61 62 6C  GalaxyDescList01A       DB "fabled",0
  27+ E916 65 64 00
  28+ E919 6E 6F 74 61  GalaxyDescList01B       DB "notable",0
  28+ E91D 62 6C 65 00
  29+ E921 77 65 6C 6C  GalaxyDescList01C       DB "well known",0
  29+ E925 20 6B 6E 6F
  29+ E929 77 6E 00
  30+ E92C 66 61 6D 6F  GalaxyDescList01D       DB "famous",0
  30+ E930 75 73 00
  31+ E933 6E 6F 74 65  GalaxyDescList01E       DB "noted",0
  31+ E937 64 00
  32+ E939 76 65 72 79  GalaxyDescList02A       DB "very",0
  32+ E93D 00
  33+ E93E 6D 69 6C 64  GalaxyDescList02B       DB "mildly",0
  33+ E942 6C 79 00
  34+ E945 6D 6F 73 74  GalaxyDescList02C       DB "most",0
  34+ E949 00
  35+ E94A 72 65 61 73  GalaxyDescList02D       DB "reasonably",0
  35+ E94E 6F 6E 61 62
  35+ E952 6C 79 00
  36+ E955 00           GalaxyDescList02E       DB 0
  37+ E956 61 6E 63 69  GalaxyDescList03A       DB "ancient",0
  37+ E95A 65 6E 74 00
  38+ E95E 3C 32 30 3E  GalaxyDescList03B       DB "<20>",0
  38+ E962 00
  39+ E963 67 72 65 61  GalaxyDescList03C       DB "great",0
  39+ E967 74 00
  40+ E969 76 61 73 74  GalaxyDescList03D       DB "vast",0
  40+ E96D 00
  41+ E96E 70 69 6E 6B  GalaxyDescList03E       DB "pink",0
  41+ E972 00
  42+ E973 3C 32 39 3E  GalaxyDescList04A       DB "<29> <28> plantations",0
  42+ E977 20 3C 32 38
  42+ E97B 3E 20 70 6C
  42+ E97F 61 6E 74 61
  42+ E983 74 69 6F 6E
  42+ E987 73 00
  43+ E989 6D 6F 75 6E  GalaxyDescList04B       DB "mountains",0
  43+ E98D 74 61 69 6E
  43+ E991 73 00
  44+ E993 3C 32 37 3E  GalaxyDescList04C       DB "<27>",0
  44+ E997 00
  45+ E998 3C 31 39 3E  GalaxyDescList04D       DB "<19> forests",0
  45+ E99C 20 66 6F 72
  45+ E9A0 65 73 74 73
  45+ E9A4 00
  46+ E9A5 6F 63 65 61  GalaxyDescList04E       DB "oceans",0
  46+ E9A9 6E 73 00
  47+ E9AC 73 68 79 6E  GalaxyDescList05A       DB "shyness",0
  47+ E9B0 65 73 73 00
  48+ E9B4 73 69 6C 6C  GalaxyDescList05B       DB "silliness",0
  48+ E9B8 69 6E 65 73
  48+ E9BC 73 00
  49+ E9BE 6D 61 74 69  GalaxyDescList05C       DB "mating traditions",0
  49+ E9C2 6E 67 20 74
  49+ E9C6 72 61 64 69
  49+ E9CA 74 69 6F 6E
  49+ E9CE 73 00
  50+ E9D0 6C 6F 61 74  GalaxyDescList05D       DB "loathing of <5>",0
  50+ E9D4 68 69 6E 67
  50+ E9D8 20 6F 66 20
  50+ E9DC 3C 35 3E 00
  51+ E9E0 6C 6F 76 65  GalaxyDescList05E       DB "love for <5>",0
  51+ E9E4 20 66 6F 72
  51+ E9E8 20 3C 35 3E
  51+ E9EC 00
  52+ E9ED 66 6F 6F 64  GalaxyDescList06A       DB "food blenders",0
  52+ E9F1 20 62 6C 65
  52+ E9F5 6E 64 65 72
  52+ E9F9 73 00
  53+ E9FB 74 6F 75 72  GalaxyDescList06B       DB "tourists",0
  53+ E9FF 69 73 74 73
  53+ EA03 00
  54+ EA04 70 6F 65 74  GalaxyDescList06C       DB "poetry",0
  54+ EA08 72 79 00
  55+ EA0B 64 69 73 63  GalaxyDescList06D       DB "discos",0
  55+ EA0F 6F 73 00
  56+ EA12 3C 31 33 3E  GalaxyDescList06E       DB "<13>",0
  56+ EA16 00
  57+ EA17 74 61 6C 6B  GalaxyDescList07A       DB "talking tree",0
  57+ EA1B 69 6E 67 20
  57+ EA1F 74 72 65 65
  57+ EA23 00
  58+ EA24 63 72 61 62  GalaxyDescList07B       DB "crab",0
  58+ EA28 00
  59+ EA29 62 61 74 00  GalaxyDescList07C       DB "bat",0
  60+ EA2D 6C 6F 62 73  GalaxyDescList07D       DB "lobst",0
  60+ EA31 74 00
  61+ EA33 25 52 00     GalaxyDescList07E       DB "%R",0
  62+ EA36 62 65 73 65  GalaxyDescList08A       DB "beset",0
  62+ EA3A 74 00
  63+ EA3C 70 6C 61 67  GalaxyDescList08B       DB "plagued",0
  63+ EA40 75 65 64 00
  64+ EA44 72 61 76 61  GalaxyDescList08C       DB "ravaged",0
  64+ EA48 67 65 64 00
  65+ EA4C 63 75 72 73  GalaxyDescList08D       DB "cursed",0
  65+ EA50 65 64 00
  66+ EA53 73 63 6F 75  GalaxyDescList08E       DB "scourged",0
  66+ EA57 72 67 65 64
  66+ EA5B 00
  67+ EA5C 3C 32 31 3E  GalaxyDescList09A       DB "<21> civil war",0
  67+ EA60 20 63 69 76
  67+ EA64 69 6C 20 77
  67+ EA68 61 72 00
  68+ EA6B 3C 32 36 3E  GalaxyDescList09B       DB "<26> <23> <24>s",0
  68+ EA6F 20 3C 32 33
  68+ EA73 3E 20 3C 32
  68+ EA77 34 3E 73 00
  69+ EA7B 61 20 3C 32  GalaxyDescList09C       DB "a <26> disease",0
  69+ EA7F 36 3E 20 64
  69+ EA83 69 73 65 61
  69+ EA87 73 65 00
  70+ EA8A 3C 32 31 3E  GalaxyDescList09D       DB "<21> earthquakes",0
  70+ EA8E 20 65 61 72
  70+ EA92 74 68 71 75
  70+ EA96 61 6B 65 73
  70+ EA9A 00
  71+ EA9B 3C 32 31 3E  GalaxyDescList09E       DB "<21> solar activity",0
  71+ EA9F 20 73 6F 6C
  71+ EAA3 61 72 20 61
  71+ EAA7 63 74 69 76
  71+ EAAB 69 74 79 00
  72+ EAAF 69 74 73 20  GalaxyDescList10A       DB "its <2> <3>",0
  72+ EAB3 3C 32 3E 20
  72+ EAB7 3C 33 3E 00
  73+ EABB 74 68 65 20  GalaxyDescList10B       DB "the %I <23> <24>",0
  73+ EABF 25 49 20 3C
  73+ EAC3 32 33 3E 20
  73+ EAC7 3C 32 34 3E
  73+ EACB 00
  74+ EACC 69 74 73 20  GalaxyDescList10C       DB "its inhabitants' <25> <4>",0
  74+ EAD0 69 6E 68 61
  74+ EAD4 62 69 74 61
  74+ EAD8 6E 74 73 27
  74+ EADC 20 3C 32 35
  74+ EAE0 3E 20 3C 34
  74+ EAE4 3E 00
  75+ EAE6 3C 33 32 3E  GalaxyDescList10D       DB "<32>",0
  75+ EAEA 00
  76+ EAEB 69 74 73 20  GalaxyDescList10E       DB "its <12> <13>",0
  76+ EAEF 3C 31 32 3E
  76+ EAF3 20 3C 31 33
  76+ EAF7 3E 00
  77+ EAF9 6A 75 69 63  GalaxyDescList11A       DB "juice",0
  77+ EAFD 65 00
  78+ EAFF 62 72 61 6E  GalaxyDescList11B       DB "brandy",0
  78+ EB03 64 79 00
  79+ EB06 77 61 74 65  GalaxyDescList11C       DB "water",0
  79+ EB0A 72 00
  80+ EB0C 62 72 65 77  GalaxyDescList11D       DB "brew",0
  80+ EB10 00
  81+ EB11 67 61 72 67  GalaxyDescList11E       DB "gargle blasters",0
  81+ EB15 6C 65 20 62
  81+ EB19 6C 61 73 74
  81+ EB1D 65 72 73 00
  82+ EB21 25 52 00     GalaxyDescList12A       DB "%R",0
  83+ EB24 25 49 20 3C  GalaxyDescList12B       DB "%I <24>",0
  83+ EB28 32 34 3E 00
  84+ EB2C 25 49 20 25  GalaxyDescList12C       DB "%I %R",0
  84+ EB30 52 00
  85+ EB32 25 49 20 3C  GalaxyDescList12D       DB "%I <26>",0
  85+ EB36 32 36 3E 00
  86+ EB3A 3C 32 36 3E  GalaxyDescList12E       DB "<26> %R",0
  86+ EB3E 20 25 52 00
  87+ EB42 66 61 62 75  GalaxyDescList13A       DB "fabulous",0
  87+ EB46 6C 6F 75 73
  87+ EB4A 00
  88+ EB4B 65 78 6F 74  GalaxyDescList13B       DB "exotic",0
  88+ EB4F 69 63 00
  89+ EB52 68 6F 6F 70  GalaxyDescList13C       DB "hoopy",0
  89+ EB56 79 00
  90+ EB58 75 6E 75 73  GalaxyDescList13D       DB "unusual",0
  90+ EB5C 75 61 6C 00
  91+ EB60 65 78 63 69  GalaxyDescList13E       DB "exciting",0
  91+ EB64 74 69 6E 67
  91+ EB68 00
  92+ EB69 63 75 69 73  GalaxyDescList14A       DB "cuisine",0
  92+ EB6D 69 6E 65 00
  93+ EB71 6E 69 67 68  GalaxyDescList14B       DB "night life",0
  93+ EB75 74 20 6C 69
  93+ EB79 66 65 00
  94+ EB7C 63 61 73 69  GalaxyDescList14C       DB "casinos",0
  94+ EB80 6E 6F 73 00
  95+ EB84 73 69 74 20  GalaxyDescList14D       DB "sit coms",0
  95+ EB88 63 6F 6D 73
  95+ EB8C 00
  96+ EB8D 20 3C 33 32  GalaxyDescList14E       DB " <32> ",0
  96+ EB91 3E 20 00
  97+ EB94 25 48 00     GalaxyDescList15A       DB "%H",0
  98+ EB97 54 68 65 20  GalaxyDescList15B       DB "The planet %H",0
  98+ EB9B 70 6C 61 6E
  98+ EB9F 65 74 20 25
  98+ EBA3 48 00
  99+ EBA5 54 68 65 20  GalaxyDescList15C       DB "The world %H",0
  99+ EBA9 77 6F 72 6C
  99+ EBAD 64 20 25 48
  99+ EBB1 00
 100+ EBB2 54 68 69 73  GalaxyDescList15D       DB "This planet",0
 100+ EBB6 20 70 6C 61
 100+ EBBA 6E 65 74 00
 101+ EBBE 54 68 69 73  GalaxyDescList15E       DB "This world",0
 101+ EBC2 20 77 6F 72
 101+ EBC6 6C 64 00
 102+ EBC9 6E 20 75 6E  GalaxyDescList16A       DB "n unremarkable",0
 102+ EBCD 72 65 6D 61
 102+ EBD1 72 6B 61 62
 102+ EBD5 6C 65 00
 103+ EBD8 20 62 6F 72  GalaxyDescList16B       DB " boring",0
 103+ EBDC 69 6E 67 00
 104+ EBE0 20 64 75 6C  GalaxyDescList16C       DB " dull",0
 104+ EBE4 6C 00
 105+ EBE6 20 74 65 64  GalaxyDescList16D       DB " tedious",0
 105+ EBEA 69 6F 75 73
 105+ EBEE 00
 106+ EBEF 20 72 65 76  GalaxyDescList16E       DB " revolting",0
 106+ EBF3 6F 6C 74 69
 106+ EBF7 6E 67 00
 107+ EBFA 70 6C 61 6E  GalaxyDescList17A       DB "planet",0
 107+ EBFE 65 74 00
 108+ EC01 77 6F 72 6C  GalaxyDescList17B       DB "world",0
 108+ EC05 64 00
 109+ EC07 70 6C 61 63  GalaxyDescList17C       DB "place",0
 109+ EC0B 65 00
 110+ EC0D 6C 69 74 74  GalaxyDescList17D       DB "little planet",0
 110+ EC11 6C 65 20 70
 110+ EC15 6C 61 6E 65
 110+ EC19 74 00
 111+ EC1B 64 75 6D 70  GalaxyDescList17E       DB "dump",0
 111+ EC1F 00
 112+ EC20 77 61 73 70  GalaxyDescList18A       DB "wasp",0
 112+ EC24 00
 113+ EC25 6D 6F 74 68  GalaxyDescList18B       DB "moth",0
 113+ EC29 00
 114+ EC2A 67 72 75 62  GalaxyDescList18C       DB "grub",0
 114+ EC2E 00
 115+ EC2F 61 6E 74 00  GalaxyDescList18D       DB "ant",0
 116+ EC33 25 52 00     GalaxyDescList18E       DB "%R",0
 117+ EC36 70 6F 65 74  GalaxyDescList19A       DB "poet",0
 117+ EC3A 00
 118+ EC3B 61 72 74 73  GalaxyDescList19B       DB "arts graduate",0
 118+ EC3F 20 67 72 61
 118+ EC43 64 75 61 74
 118+ EC47 65 00
 119+ EC49 79 61 6B 00  GalaxyDescList19C       DB "yak",0
 120+ EC4D 73 6E 61 69  GalaxyDescList19D       DB "snail",0
 120+ EC51 6C 00
 121+ EC53 73 6C 75 67  GalaxyDescList19E       DB "slug",0
 121+ EC57 00
 122+ EC58 74 72 6F 70  GalaxyDescList20A       DB "tropical",0
 122+ EC5C 69 63 61 6C
 122+ EC60 00
 123+ EC61 64 65 6E 73  GalaxyDescList20B       DB "dense",0
 123+ EC65 65 00
 124+ EC67 72 61 69 6E  GalaxyDescList20C       DB "rain",0
 124+ EC6B 00
 125+ EC6C 69 6D 70 65  GalaxyDescList20D       DB "impenetrable",0
 125+ EC70 6E 65 74 72
 125+ EC74 61 62 6C 65
 125+ EC78 00
 126+ EC79 65 78 75 62  GalaxyDescList20E       DB "exuberant",0
 126+ EC7D 65 72 61 6E
 126+ EC81 74 00
 127+ EC83 66 75 6E 6E  GalaxyDescList21A       DB "funny",0
 127+ EC87 79 00
 128+ EC89 77 69 65 72  GalaxyDescList21B       DB "wierd",0
 128+ EC8D 64 00
 129+ EC8F 75 6E 75 73  GalaxyDescList21C       DB "unusual",0
 129+ EC93 75 61 6C 00
 130+ EC97 73 74 72 61  GalaxyDescList21D       DB "strange",0
 130+ EC9B 6E 67 65 00
 131+ EC9F 70 65 63 75  GalaxyDescList21E       DB "peculiar",0
 131+ ECA3 6C 69 61 72
 131+ ECA7 00
 132+ ECA8 66 72 65 71  GalaxyDescList22A       DB "frequent",0
 132+ ECAC 75 65 6E 74
 132+ ECB0 00
 133+ ECB1 6F 63 63 61  GalaxyDescList22B       DB "occasional",0
 133+ ECB5 73 69 6F 6E
 133+ ECB9 61 6C 00
 134+ ECBC 75 6E 70 72  GalaxyDescList22C       DB "unpredictable",0
 134+ ECC0 65 64 69 63
 134+ ECC4 74 61 62 6C
 134+ ECC8 65 00
 135+ ECCA 64 72 65 61  GalaxyDescList22D       DB "dreadful",0
 135+ ECCE 64 66 75 6C
 135+ ECD2 00
 136+ ECD3 64 65 61 64  GalaxyDescList22E       DB "deadly",0
 136+ ECD7 6C 79 00
 137+ ECDA 3C 31 3E 20  GalaxyDescList23A       DB "<1> <0> for <9>",0
 137+ ECDE 3C 30 3E 20
 137+ ECE2 66 6F 72 20
 137+ ECE6 3C 39 3E 00
 138+ ECEA 3C 31 3E 20  GalaxyDescList23B       DB "<1> <0> for <9> and <9>",0
 138+ ECEE 3C 30 3E 20
 138+ ECF2 66 6F 72 20
 138+ ECF6 3C 39 3E 20
 138+ ECFA 61 6E 64 20
 138+ ECFE 3C 39 3E 00
 139+ ED02 3C 37 3E 20  GalaxyDescList23C       DB "<7> by <8>",0
 139+ ED06 62 79 20 3C
 139+ ED0A 38 3E 00
 140+ ED0D 3C 31 3E 20  GalaxyDescList23D       DB "<1> <0> for <9> but <7> by <8>",0
 140+ ED11 3C 30 3E 20
 140+ ED15 66 6F 72 20
 140+ ED19 3C 39 3E 20
 140+ ED1D 62 75 74 20
 140+ ED21 3C 37 3E 20
 140+ ED25 62 79 20 3C
 140+ ED29 38 3E 00
 141+ ED2C 61 3C 31 35  GalaxyDescList23E       DB "a<15> <16>",0
 141+ ED30 3E 20 3C 31
 141+ ED34 36 3E 00
 142+ ED37 3C 32 36 3E  GalaxyDescList24A       DB "<26>",0
 142+ ED3B 00
 143+ ED3C 6D 6F 75 6E  GalaxyDescList24B       DB "mountain",0
 143+ ED40 74 61 69 6E
 143+ ED44 00
 144+ ED45 65 64 69 62  GalaxyDescList24C       DB "edible",0
 144+ ED49 6C 65 00
 145+ ED4C 74 72 65 65  GalaxyDescList24D       DB "tree",0
 145+ ED50 00
 146+ ED51 73 70 6F 74  GalaxyDescList24E       DB "spotted",0
 146+ ED55 74 65 64 00
 147+ ED59 3C 33 30 3E  GalaxyDescList25A       DB "<30>",0
 147+ ED5D 00
 148+ ED5E 3C 33 31 3E  GalaxyDescList25B       DB "<31>",0
 148+ ED62 00
 149+ ED63 3C 36 3E 6F  GalaxyDescList25C       DB "<6>oid",0
 149+ ED67 69 64 00
 150+ ED6A 3C 31 38 3E  GalaxyDescList25D       DB "<18>",0
 150+ ED6E 00
 151+ ED6F 3C 31 37 3E  GalaxyDescList25E       DB "<17>",0
 151+ ED73 00
 152+ ED74 61 6E 63 69  GalaxyDescList26A       DB "ancient",0
 152+ ED78 65 6E 74 00
 153+ ED7C 65 78 63 65  GalaxyDescList26B       DB "exceptional",0
 153+ ED80 70 74 69 6F
 153+ ED84 6E 61 6C 00
 154+ ED88 65 63 63 65  GalaxyDescList26C       DB "eccentric",0
 154+ ED8C 6E 74 72 69
 154+ ED90 63 00
 155+ ED92 69 6E 67 72  GalaxyDescList26D       DB "ingrained",0
 155+ ED96 61 69 6E 65
 155+ ED9A 64 00
 156+ ED9C 3C 32 30 3E  GalaxyDescList26E       DB "<20>",0
 156+ EDA0 00
 157+ EDA1 6B 69 6C 6C  GalaxyDescList27A       DB "killer",0
 157+ EDA5 65 72 00
 158+ EDA8 64 65 61 64  GalaxyDescList27B       DB "deadly",0
 158+ EDAC 6C 79 00
 159+ EDAF 65 76 69 6C  GalaxyDescList27C       DB "evil",0
 159+ EDB3 00
 160+ EDB4 6C 65 74 68  GalaxyDescList27D       DB "lethal",0
 160+ EDB8 61 6C 00
 161+ EDBB 76 69 63 69  GalaxyDescList27E       DB "vicious",0
 161+ EDBF 6F 75 73 00
 162+ EDC3 70 61 72 6B  GalaxyDescList28A       DB "parking meters",0
 162+ EDC7 69 6E 67 20
 162+ EDCB 6D 65 74 65
 162+ EDCF 72 73 00
 163+ EDD2 64 75 73 74  GalaxyDescList28B       DB "dust clouds",0
 163+ EDD6 20 63 6C 6F
 163+ EDDA 75 64 73 00
 164+ EDDE 69 63 65 20  GalaxyDescList28C       DB "ice bergs",0
 164+ EDE2 62 65 72 67
 164+ EDE6 73 00
 165+ EDE8 72 6F 63 6B  GalaxyDescList28D       DB "rock formations",0
 165+ EDEC 20 66 6F 72
 165+ EDF0 6D 61 74 69
 165+ EDF4 6F 6E 73 00
 166+ EDF8 76 6F 6C 63  GalaxyDescList28E       DB "volcanoes",0
 166+ EDFC 61 6E 6F 65
 166+ EE00 73 00
 167+ EE02 70 6C 61 6E  GalaxyDescList29A       DB "plant",0
 167+ EE06 74 00
 168+ EE08 74 75 6C 69  GalaxyDescList29B       DB "tulip",0
 168+ EE0C 70 00
 169+ EE0E 62 61 6E 61  GalaxyDescList29C       DB "banana",0
 169+ EE12 6E 61 00
 170+ EE15 63 6F 72 6E  GalaxyDescList29D       DB "corn",0
 170+ EE19 00
 171+ EE1A 25 52 77 65  GalaxyDescList29E       DB "%Rweed",0
 171+ EE1E 65 64 00
 172+ EE21 25 52 00     GalaxyDescList30A       DB "%R",0
 173+ EE24 23 49 20 25  GalaxyDescList30B       DB "#I %R",0
 173+ EE28 52 00
 174+ EE2A 23 49 20 3C  GalaxyDescList30C       DB "#I <26>",0
 174+ EE2E 32 36 3E 00
 175+ EE32 69 6E 68 61  GalaxyDescList30D       DB "inhabitant",0
 175+ EE36 62 69 74 61
 175+ EE3A 6E 74 00
 176+ EE3D 25 49 20 25  GalaxyDescList30E       DB "%I %R",0
 176+ EE41 52 00
 177+ EE43 73 68 72 65  GalaxyDescList31A       DB "shrew",0
 177+ EE47 77 00
 178+ EE49 62 65 61 73  GalaxyDescList31B       DB "beast",0
 178+ EE4D 74 00
 179+ EE4F 62 69 73 6F  GalaxyDescList31C       DB "bison",0
 179+ EE53 6E 00
 180+ EE55 73 6E 61 6B  GalaxyDescList31D       DB "snake",0
 180+ EE59 65 00
 181+ EE5B 77 6F 6C 66  GalaxyDescList31E       DB "wolf",0
 181+ EE5F 00
 182+ EE60 6C 65 6F 70  GalaxyDescList32A       DB "leopard",0
 182+ EE64 61 72 64 00
 183+ EE68 63 61 74 00  GalaxyDescList32B       DB "cat",0
 184+ EE6C 6D 6F 6E 6B  GalaxyDescList32C       DB "monkey",0
 184+ EE70 65 79 00
 185+ EE73 67 6F 61 74  GalaxyDescList32D       DB "goat",0
 185+ EE77 00
 186+ EE78 66 69 73 68  GalaxyDescList32E       DB "fish",0
 186+ EE7C 00
 187+ EE7D 3C 31 31 3E  GalaxyDescList33A       DB "<11> <10>",0
 187+ EE81 20 3C 31 30
 187+ EE85 3E 00
 188+ EE87 23 49 20 3C  GalaxyDescList33B       DB "#I <30> <33>",0
 188+ EE8B 33 30 3E 20
 188+ EE8F 3C 33 33 3E
 188+ EE93 00
 189+ EE94 69 74 73 20  GalaxyDescList33C       DB "its <12> <31> <33>",0
 189+ EE98 3C 31 32 3E
 189+ EE9C 20 3C 33 31
 189+ EEA0 3E 20 3C 33
 189+ EEA4 33 3E 00
 190+ EEA7 3C 33 34 3E  GalaxyDescList33D       DB "<34> <35>",0
 190+ EEAB 20 3C 33 35
 190+ EEAF 3E 00
 191+ EEB1 3C 31 31 3E  GalaxyDescList33E       DB "<11> <10>",0
 191+ EEB5 20 3C 31 30
 191+ EEB9 3E 00
 192+ EEBB 6D 65 61 74  GalaxyDescList34A       DB "meat",0
 192+ EEBF 00
 193+ EEC0 63 75 74 6C  GalaxyDescList34B       DB "cutlet",0
 193+ EEC4 65 74 00
 194+ EEC7 73 74 65 61  GalaxyDescList34C       DB "steak",0
 194+ EECB 6B 00
 195+ EECD 62 75 72 67  GalaxyDescList34D       DB "burgers",0
 195+ EED1 65 72 73 00
 196+ EED5 73 6F 75 70  GalaxyDescList34E       DB "soup",0
 196+ EED9 00
 197+ EEDA 69 63 65 00  GalaxyDescList35A       DB "ice",0
 198+ EEDE 6D 75 64 00  GalaxyDescList35B       DB "mud",0
 199+ EEE2 5A 65 72 6F  GalaxyDescList35C       DB "Zero-G",0
 199+ EEE6 2D 47 00
 200+ EEE9 76 61 63 75  GalaxyDescList35D       DB "vacuum",0
 200+ EEED 75 6D 00
 201+ EEF0 25 49 20 75  GalaxyDescList35E       DB "%I ultra",0
 201+ EEF4 6C 74 72 61
 201+ EEF8 00
 202+ EEF9 68 6F 63 6B  GalaxyDescList36A       DB "hockey",0
 202+ EEFD 65 79 00
 203+ EF00 63 72 69 63  GalaxyDescList36B       DB "cricket",0
 203+ EF04 6B 65 74 00
 204+ EF08 6B 61 72 61  GalaxyDescList36C       DB "karate",0
 204+ EF0C 74 65 00
 205+ EF0F 70 6F 6C 6F  GalaxyDescList36D       DB "polo",0
 205+ EF13 00
 206+ EF14 74 65 6E 6E  GalaxyDescList36E       DB "tennis",0
 206+ EF18 69 73 00
 207+ EF1B
 208+ EF1B 12 E9 19 E9  GalaxyDescList          DW GalaxyDescList01A, GalaxyDescList01B, GalaxyDescList01C, GalaxyDescList01D, GalaxyDescList01E
 208+ EF1F 21 E9 2C E9
 208+ EF23 33 E9
 209+ EF25 39 E9 3E E9                          DW GalaxyDescList02A, GalaxyDescList02B, GalaxyDescList02C, GalaxyDescList02D, GalaxyDescList02E
 209+ EF29 45 E9 4A E9
 209+ EF2D 55 E9
 210+ EF2F 56 E9 5E E9                          DW GalaxyDescList03A, GalaxyDescList03B, GalaxyDescList03C, GalaxyDescList03D, GalaxyDescList03E
 210+ EF33 63 E9 69 E9
 210+ EF37 6E E9
 211+ EF39 73 E9 89 E9                          DW GalaxyDescList04A, GalaxyDescList04B, GalaxyDescList04C, GalaxyDescList04D, GalaxyDescList04E
 211+ EF3D 93 E9 98 E9
 211+ EF41 A5 E9
 212+ EF43 AC E9 B4 E9                          DW GalaxyDescList05A, GalaxyDescList05B, GalaxyDescList05C, GalaxyDescList05D, GalaxyDescList05E
 212+ EF47 BE E9 D0 E9
 212+ EF4B E0 E9
 213+ EF4D ED E9 FB E9                          DW GalaxyDescList06A, GalaxyDescList06B, GalaxyDescList06C, GalaxyDescList06D, GalaxyDescList06E
 213+ EF51 04 EA 0B EA
 213+ EF55 12 EA
 214+ EF57 17 EA 24 EA                          DW GalaxyDescList07A, GalaxyDescList07B, GalaxyDescList07C, GalaxyDescList07D, GalaxyDescList07E
 214+ EF5B 29 EA 2D EA
 214+ EF5F 33 EA
 215+ EF61 36 EA 3C EA                          DW GalaxyDescList08A, GalaxyDescList08B, GalaxyDescList08C, GalaxyDescList08D, GalaxyDescList08E
 215+ EF65 44 EA 4C EA
 215+ EF69 53 EA
 216+ EF6B 5C EA 6B EA                          DW GalaxyDescList09A, GalaxyDescList09B, GalaxyDescList09C, GalaxyDescList09D, GalaxyDescList09E
 216+ EF6F 7B EA 8A EA
 216+ EF73 9B EA
 217+ EF75 AF EA BB EA                          DW GalaxyDescList10A, GalaxyDescList10B, GalaxyDescList10C, GalaxyDescList10D, GalaxyDescList10E
 217+ EF79 CC EA E6 EA
 217+ EF7D EB EA
 218+ EF7F F9 EA FF EA                          DW GalaxyDescList11A, GalaxyDescList11B, GalaxyDescList11C, GalaxyDescList11D, GalaxyDescList11E
 218+ EF83 06 EB 0C EB
 218+ EF87 11 EB
 219+ EF89 21 EB 24 EB                          DW GalaxyDescList12A, GalaxyDescList12B, GalaxyDescList12C, GalaxyDescList12D, GalaxyDescList12E
 219+ EF8D 2C EB 32 EB
 219+ EF91 3A EB
 220+ EF93 42 EB 4B EB                          DW GalaxyDescList13A, GalaxyDescList13B, GalaxyDescList13C, GalaxyDescList13D, GalaxyDescList13E
 220+ EF97 52 EB 58 EB
 220+ EF9B 60 EB
 221+ EF9D 69 EB 71 EB                          DW GalaxyDescList14A, GalaxyDescList14B, GalaxyDescList14C, GalaxyDescList14D, GalaxyDescList14E
 221+ EFA1 7C EB 84 EB
 221+ EFA5 8D EB
 222+ EFA7 94 EB 97 EB                          DW GalaxyDescList15A, GalaxyDescList15B, GalaxyDescList15C, GalaxyDescList15D, GalaxyDescList15E
 222+ EFAB A5 EB B2 EB
 222+ EFAF BE EB
 223+ EFB1 C9 EB D8 EB                          DW GalaxyDescList16A, GalaxyDescList16B, GalaxyDescList16C, GalaxyDescList16D, GalaxyDescList16E
 223+ EFB5 E0 EB E6 EB
 223+ EFB9 EF EB
 224+ EFBB FA EB 01 EC                          DW GalaxyDescList17A, GalaxyDescList17B, GalaxyDescList17C, GalaxyDescList17D, GalaxyDescList17E
 224+ EFBF 07 EC 0D EC
 224+ EFC3 1B EC
 225+ EFC5 20 EC 25 EC                          DW GalaxyDescList18A, GalaxyDescList18B, GalaxyDescList18C, GalaxyDescList18D, GalaxyDescList18E
 225+ EFC9 2A EC 2F EC
 225+ EFCD 33 EC
 226+ EFCF 36 EC 3B EC                          DW GalaxyDescList19A, GalaxyDescList19B, GalaxyDescList19C, GalaxyDescList19D, GalaxyDescList19E
 226+ EFD3 49 EC 4D EC
 226+ EFD7 53 EC
 227+ EFD9 58 EC 61 EC                          DW GalaxyDescList20A, GalaxyDescList20B, GalaxyDescList20C, GalaxyDescList20D, GalaxyDescList20E
 227+ EFDD 67 EC 6C EC
 227+ EFE1 79 EC
 228+ EFE3 83 EC 89 EC                          DW GalaxyDescList21A, GalaxyDescList21B, GalaxyDescList21C, GalaxyDescList21D, GalaxyDescList21E
 228+ EFE7 8F EC 97 EC
 228+ EFEB 9F EC
 229+ EFED A8 EC B1 EC                          DW GalaxyDescList22A, GalaxyDescList22B, GalaxyDescList22C, GalaxyDescList22D, GalaxyDescList22E
 229+ EFF1 BC EC CA EC
 229+ EFF5 D3 EC
 230+ EFF7 DA EC EA EC                          DW GalaxyDescList23A, GalaxyDescList23B, GalaxyDescList23C, GalaxyDescList23D, GalaxyDescList23E
 230+ EFFB 02 ED 0D ED
 230+ EFFF 2C ED
 231+ F001 37 ED 3C ED                          DW GalaxyDescList24A, GalaxyDescList24B, GalaxyDescList24C, GalaxyDescList24D, GalaxyDescList24E
 231+ F005 45 ED 4C ED
 231+ F009 51 ED
 232+ F00B 59 ED 5E ED                          DW GalaxyDescList25A, GalaxyDescList25B, GalaxyDescList25C, GalaxyDescList25D, GalaxyDescList25E
 232+ F00F 63 ED 6A ED
 232+ F013 6F ED
 233+ F015 74 ED 7C ED                          DW GalaxyDescList26A, GalaxyDescList26B, GalaxyDescList26C, GalaxyDescList26D, GalaxyDescList26E
 233+ F019 88 ED 92 ED
 233+ F01D 9C ED
 234+ F01F A1 ED A8 ED                          DW GalaxyDescList27A, GalaxyDescList27B, GalaxyDescList27C, GalaxyDescList27D, GalaxyDescList27E
 234+ F023 AF ED B4 ED
 234+ F027 BB ED
 235+ F029 C3 ED D2 ED                          DW GalaxyDescList28A, GalaxyDescList28B, GalaxyDescList28C, GalaxyDescList28D, GalaxyDescList28E
 235+ F02D DE ED E8 ED
 235+ F031 F8 ED
 236+ F033 02 EE 08 EE                          DW GalaxyDescList29A, GalaxyDescList29B, GalaxyDescList29C, GalaxyDescList29D, GalaxyDescList29E
 236+ F037 0E EE 15 EE
 236+ F03B 1A EE
 237+ F03D 21 EE 24 EE                          DW GalaxyDescList30A, GalaxyDescList30B, GalaxyDescList30C, GalaxyDescList30D, GalaxyDescList30E
 237+ F041 2A EE 32 EE
 237+ F045 3D EE
 238+ F047 43 EE 49 EE                          DW GalaxyDescList31A, GalaxyDescList31B, GalaxyDescList31C, GalaxyDescList31D, GalaxyDescList31E
 238+ F04B 4F EE 55 EE
 238+ F04F 5B EE
 239+ F051 60 EE 68 EE                          DW GalaxyDescList32A, GalaxyDescList32B, GalaxyDescList32C, GalaxyDescList32D, GalaxyDescList32E
 239+ F055 6C EE 73 EE
 239+ F059 78 EE
 240+ F05B 7D EE 87 EE                          DW GalaxyDescList33A, GalaxyDescList33B, GalaxyDescList33C, GalaxyDescList33D, GalaxyDescList33E
 240+ F05F 94 EE A7 EE
 240+ F063 B1 EE
 241+ F065 BB EE C0 EE                          DW GalaxyDescList34A, GalaxyDescList34B, GalaxyDescList34C, GalaxyDescList34D, GalaxyDescList34E
 241+ F069 C7 EE CD EE
 241+ F06D D5 EE
 242+ F06F DA EE DE EE                          DW GalaxyDescList35A, GalaxyDescList35B, GalaxyDescList35C, GalaxyDescList35D, GalaxyDescList35E
 242+ F073 E2 EE E9 EE
 242+ F077 F0 EE
 243+ F079 F9 EE 00 EF                          DW GalaxyDescList36A, GalaxyDescList36B, GalaxyDescList36C, GalaxyDescList36D, GalaxyDescList36E
 243+ F07D 08 EF 0F EF
 243+ F081 14 EF
 244+ F083
 245+ F083 4C 61 72 67  GalaxyInhabitantDesc1   DB "Large ",0
 245+ F087 65 20 00
 246+ F08A 46 69 65 72  GalaxyInhabitantDesc1A  DB "Fierce ",0
 246+ F08E 63 65 20 00
 247+ F092 53 6D 61 6C  GalaxyInhabitantDesc1B  DB "Small ", 0
 247+ F096 6C 20 00
 248+ F099 47 72 65 65  GalaxyInhabitantDesc2   DB "Green ",0
 248+ F09D 6E 20 00
 249+ F0A0 52 65 64 20  GalaxyInhabitantDesc2A  DB "Red ",  0
 249+ F0A4 00
 250+ F0A5 59 65 6C 6C  GalaxyInhabitantDesc2B  DB "Yellow ",0
 250+ F0A9 6F 77 20 00
 251+ F0AD 42 6C 75 65  GalaxyInhabitantDesc2C  DB "Blue ",  0
 251+ F0B1 20 00
 252+ F0B3 42 6C 61 63  GalaxyInhabitantDesc2D  DB "Black ",0
 252+ F0B7 6B 20 00
 253+ F0BA 48 61 72 6D  GalaxyInhabitantDesc2E  DB "Harmless ",0
 253+ F0BE 6C 65 73 73
 253+ F0C2 20 00
 254+ F0C4 53 6C 69 6D  GalaxyInhabitantDesc3   DB "Slimy ",0
 254+ F0C8 79 20 00
 255+ F0CB 42 75 67 2D  GalaxyInhabitantDesc3A  DB "Bug-Eyed ", 0
 255+ F0CF 45 79 65 64
 255+ F0D3 20 00
 256+ F0D5 48 6F 72 6E  GalaxyInhabitantDesc3B  DB "Horned ",0
 256+ F0D9 65 64 20 00
 257+ F0DD 42 6F 6E 79  GalaxyInhabitantDesc3C  DB "Bony ",  0
 257+ F0E1 20 00
 258+ F0E3 46 61 74 20  GalaxyInhabitantDesc3D  DB "Fat ",  0
 258+ F0E7 00
 259+ F0E8 46 75 72 72  GalaxyInhabitantDesc3E  DB "Furry ",  0
 259+ F0EC 79 20 00
 260+ F0EF 52 6F 64 65  GalaxyInhabitantDesc4   DB "Rodent",0
 260+ F0F3 6E 74 00
 261+ F0F6 46 72 6F 67  GalaxyInhabitantDesc4A  DB "Frog",      0
 261+ F0FA 00
 262+ F0FB 4C 69 7A 61  GalaxyInhabitantDesc4B  DB "Lizard", 0
 262+ F0FF 72 64 00
 263+ F102 4C 6F 62 73  GalaxyInhabitantDesc4C  DB "Lobster",0
 263+ F106 74 65 72 00
 264+ F10A 42 69 72 64  GalaxyInhabitantDesc4D  DB "Bird",  0
 264+ F10E 00
 265+ F10F 48 75 6D 61  GalaxyInhabitantDesc4E  DB "Humanoid", 0
 265+ F113 6E 6F 69 64
 265+ F117 00
 266+ F118 46 65 6C 69  GalaxyInhabitantDesc4F  DB "Feline", 0
 266+ F11C 6E 65 00
 267+ F11F 49 6E 73 65  GalaxyInhabitantDesc4G  DB "Insect",0
 267+ F123 63 74 00
 268+ F126 48 75 6D 61  GalaxyInhabitantHuman   DB "Human Colonal",0
 268+ F12A 6E 20 43 6F
 268+ F12E 6C 6F 6E 61
 268+ F132 6C 00
 269+ F134
 270+ F134 83 F0 8A F0  GalaxyInhabitantDesc1Ix DW GalaxyInhabitantDesc1,GalaxyInhabitantDesc1A,GalaxyInhabitantDesc1B
 270+ F138 92 F0
 271+ F13A 99 F0 A0 F0  GalaxyInhabitantDesc2Ix DW GalaxyInhabitantDesc2,GalaxyInhabitantDesc2A,GalaxyInhabitantDesc2B,GalaxyInhabitantDesc2C,GalaxyInhabitantDesc2D,GalaxyInhabitantDesc2E
 271+ F13E A5 F0 AD F0
 271+ F142 B3 F0 BA F0
 272+ F146 C4 F0 CB F0  GalaxyInhabitantDesc3Ix DW GalaxyInhabitantDesc3,GalaxyInhabitantDesc3A,GalaxyInhabitantDesc3B,GalaxyInhabitantDesc3C,GalaxyInhabitantDesc3D,GalaxyInhabitantDesc3E
 272+ F14A D5 F0 DD F0
 272+ F14E E3 F0 E8 F0
 273+ F152 EF F0 F6 F0  GalaxyInhabitantDesc4Ix DW GalaxyInhabitantDesc4,GalaxyInhabitantDesc4A,GalaxyInhabitantDesc4B,GalaxyInhabitantDesc4C,GalaxyInhabitantDesc4D,GalaxyInhabitantDesc4E,GalaxyInhabitantDesc4F,GalaxyInhabitantDesc4G
 273+ F156 FB F0 02 F1
 273+ F15A 0A F1 0F F1
 273+ F15E 18 F1 1F F1
 274+ F162 26 F1        GalaxyInhabitantHumanIx DW GalaxyInhabitantHuman
 275+ F164 00 00 00...  GalaxySpecies           DS 32
 276+ F184 00                                   DB 0
 277+ F185 00 00 00...  GalaxyPlanetDescription DS 300
 278+ F2B1 00                                   DB 0
 279+ F2B2 00 00 00...  GalaxyPlanetSource      DS 300,0
 280+ F3DE 3C 31 34 3E  GalaxyPlanetDescStarter DB "<14> is <22>",0
 280+ F3E2 20 69 73 20
 280+ F3E6 3C 32 32 3E
 280+ F3EA 00
 281+ F3EB
 282+ F3EB
 283+ F3EB D3           GalaxyExtendedDescs:    DB 211                                                  ; System 211, Galaxy 0                Teorge = Token  1
 284+ F3EC 96                                   DB 150                                                  ; System 150, Galaxy 0, Mission 1       Xeer = Token  2
 285+ F3ED 24                                   DB 36                                                   ; System  36, Galaxy 0, Mission 1   Reesdice = Token  3
 286+ F3EE 1C                                   DB 28                                                   ; System  28, Galaxy 0, Mission 1      Arexe = Token  4
 287+ F3EF FD                                   DB 253                                                  ; System 253, Galaxy 1, Mission 1     Errius = Token  5
 288+ F3F0 4F                                   DB 79                                                   ; System  79, Galaxy 1, Mission 1     Inbibe = Token  6
 289+ F3F1 35                                   DB 53                                                   ; System  53, Galaxy 1, Mission 1      Ausar = Token  7
 290+ F3F2 76                                   DB 118                                                  ; System 118, Galaxy 1, Mission 1     Usleri = Token  8
 291+ F3F3 64                                   DB 100                                                  ; System 100, Galaxy 2                Arredi = Token  9
 292+ F3F4 20                                   DB 32                                                   ; System  32, Galaxy 1, Mission 1     Bebege = Token 10
 293+ F3F5 44                                   DB 68                                                   ; System  68, Galaxy 1, Mission 1     Cearso = Token 11
 294+ F3F6 A4                                   DB 164                                                  ; System 164, Galaxy 1, Mission 1     Dicela = Token 12
 295+ F3F7 DC                                   DB 220                                                  ; System 220, Galaxy 1, Mission 1     Eringe = Token 13
 296+ F3F8 6A                                   DB 106                                                  ; System 106, Galaxy 1, Mission 1     Gexein = Token 14
 297+ F3F9 10                                   DB 16                                                   ; System  16, Galaxy 1, Mission 1     Isarin = Token 15
 298+ F3FA A2                                   DB 162                                                  ; System 162, Galaxy 1, Mission 1   Letibema = Token 16
 299+ F3FB 03                                   DB 3                                                    ; System   3, Galaxy 1, Mission 1     Maisso = Token 17
 300+ F3FC 6B                                   DB 107                                                  ; System 107, Galaxy 1, Mission 1       Onen = Token 18
 301+ F3FD 1A                                   DB 26                                                   ; System  26, Galaxy 1, Mission 1     Ramaza = Token 19
 302+ F3FE C0                                   DB 192                                                  ; System 192, Galaxy 1, Mission 1     Sosole = Token 20
 303+ F3FF B8                                   DB 184                                                  ; System 184, Galaxy 1, Mission 1     Tivere = Token 21
 304+ F400 05                                   DB 5                                                    ; System   5, Galaxy 1, Mission 1     Veriar = Token 22
 305+ F401 65                                   DB 101                                                  ; System 101, Galaxy 2, Mission 1     Xeveon = Token 23
 306+ F402 C1                                   DB 193                                                  ; System 193, Galaxy 1, Mission 1     Orarra = Token 24
 307+ F403 29                                   DB 41                                                   ; System  41, Galaxy 2                Anreer = Token 25
 308+ F404 07                                   DB 7                                                    ; System   7, Galaxy 0                  Lave = Token 26
 309+ F405 2E                                   DB 46                                                   ; System  46, Galaxy 0              Riedquat = Token 27
 310+ F406
 311+ F406                  INCLUDE "./Data/EquipmentEquates.asm"
# file opened: ././Data/EquipmentEquates.asm
   1++F406
   2++F406              EQ_FUEL                 EQU 0
   3++F406              EQ_MISSILE              EQU 1
   4++F406              EQ_CARGO_BAY            EQU 2
   5++F406              EQ_ECM                  EQU 3
   6++F406              EQ_FUEL_SCOOPS          EQU 4
   7++F406              EQ_ESCAPE_POD           EQU 5
   8++F406              EQ_ENERGY_BOMB          EQU 6
   9++F406              EQ_ENERGY_UNIT          EQU 7
  10++F406              EQ_DOCK_COMP            EQU 8
  11++F406              EQ_GAL_DRIVE            EQU 9
  12++F406              EQ_FRONT_PULSE          EQU 10
  13++F406              EQ_REAR_PULSE           EQU 11
  14++F406              EQ_LEFT_PULSE           EQU 12
  15++F406              EQ_RIGHT_PULSE          EQU 13
  16++F406              EQ_FRONT_BEAM           EQU 14
  17++F406              EQ_REAR_BEAM            EQU 15
  18++F406              EQ_LEFT_BEAM            EQU 16
  19++F406              EQ_RIGHT_BEAM           EQU 17
  20++F406              EQ_FRONT_MINING         EQU 18
  21++F406              EQ_REAR_MINING          EQU 19
  22++F406              EQ_LEFT_MINING          EQU 20
  23++F406              EQ_RIGHT_MINING         EQU 21
  24++F406              EQ_FRONT_MILITARY       EQU 22
  25++F406              EQ_REAR_MILITARY        EQU 23
  26++F406              EQ_LEFT_MILITARY        EQU 24
  27++F406              EQ_RIGHT_MILITARY       EQU 25
  28++F406
  29++F406              EQ_ITEM_COUNT           EQU EQ_RIGHT_MILITARY+1
  30++F406
# file closed: ././Data/EquipmentEquates.asm
 312+ F406
 313+ F406              EquipNameTableRowLen    EQU 8
 314+ F406 91 89 00 00  ShipEquipNameTable      DW  WordFuel,       0,              0,          0
 314+ F40A 00 00 00 00
 315+ F40E 2E 8D 00 00                          DW  WordMissile,    0,              0,          0
 315+ F412 00 00 00 00
 316+ F416 76 89 87 89                          DW  WordLarge,      WordCargo,      WordBay,    0
 316+ F41A 8D 89 00 00
 317+ F41E 9D 89 A4 89                          DW  WordECM,        WordSystem,     0,          0
 317+ F422 00 00 00 00
 318+ F426 91 89 96 89                          DW  WordFuel,       WordScoops,     0,          0
 318+ F42A 00 00 00 00
 319+ F42E 7C 89 83 89                          DW  WordEscape,     WordPod,        0,          0
 319+ F432 00 00 00 00
 320+ F436 AB 89 B2 89                          DW  WordEnergy,     WordBomb,       0,          0
 320+ F43A 00 00 00 00
 321+ F43E 10 8A AB 89                          DW  WordExtra,      WordEnergy,     WordUnit,   0
 321+ F442 DE 89 00 00
 322+ F446 EA 89 F2 89                          DW  WordDocking,    WordComputers,  0,          0
 322+ F44A 00 00 00 00
 323+ F44E 07 8A 46 8C                          DW  WordGalactic,   WordHyperdrive, 0,          0
 323+ F452 00 00 00 00
 324+ F456 60 89 BD 89                          DW  WordFront,      WordPulse,      WordLaser,  0
 324+ F45A B7 89 00 00
 325+ F45E 71 89 BD 89                          DW  WordRear,       WordPulse,      WordLaser,  0
 325+ F462 B7 89 00 00
 326+ F466 6C 89 BD 89                          DW  WordLeft,       WordPulse,      WordLaser,  0
 326+ F46A B7 89 00 00
 327+ F46E 66 89 BD 89                          DW  WordRight,      WordPulse,      WordLaser,  0
 327+ F472 B7 89 00 00
 328+ F476 60 89 C3 89                          DW  WordFront,      WordBeam,       WordLaser,  0
 328+ F47A B7 89 00 00
 329+ F47E 71 89 C3 89                          DW  WordRear,       WordBeam,       WordLaser,  0
 329+ F482 B7 89 00 00
 330+ F486 6C 89 C3 89                          DW  WordLeft,       WordBeam,       WordLaser,  0
 330+ F48A B7 89 00 00
 331+ F48E 66 89 C3 89                          DW  WordRight,      WordBeam,       WordLaser,  0
 331+ F492 B7 89 00 00
 332+ F496 60 89 D0 89                          DW  WordFront,      WordMining,     WordLaser,  0
 332+ F49A B7 89 00 00
 333+ F49E 71 89 D0 89                          DW  WordRear,       WordMining,     WordLaser,  0
 333+ F4A2 B7 89 00 00
 334+ F4A6 6C 89 D0 89                          DW  WordLeft,       WordMining,     WordLaser,  0
 334+ F4AA B7 89 00 00
 335+ F4AE 66 89 D0 89                          DW  WordRight,      WordMining,     WordLaser,  0
 335+ F4B2 B7 89 00 00
 336+ F4B6 60 89 51 8C                          DW  WordFront,      WordMilitary,   WordLaser,  0
 336+ F4BA B7 89 00 00
 337+ F4BE 71 89 51 8C                          DW  WordRear,       WordMilitary,   WordLaser,  0
 337+ F4C2 B7 89 00 00
 338+ F4C6 6C 89 51 8C                          DW  WordLeft,       WordMilitary,   WordLaser,  0
 338+ F4CA B7 89 00 00
 339+ F4CE 66 89 51 8C                          DW  WordRight,      WordMilitary,   WordLaser,  0
 339+ F4D2 B7 89 00 00
 340+ F4D6
 341+ F4D6              ;Each row is 7 bytes
 342+ F4D6              ;                                                               12345  6  789012345678901
 343+ F4D6              ;	canbuy;
 344+ F4D6              ;	y;
 345+ F4D6              ;	show;
 346+ F4D6              ;	level;
 347+ F4D6              ;	price 2 bytes;
 348+ F4D6              ;	type;
 349+ F4D6              ;ShipFrontWeapons        DB EQ_FRONT_PULSE,  EQ_FRONT_PULSE,     EQ_FRONT_MINING,    EQ_FRONT_MINING
 350+ F4D6              ;ShipRearWeapons         DB EQ_REAR_PULSE,   EQ_REAR_PULSE,      EQ_REAR_MINING,     EQ_REAR_MINING
 351+ F4D6              ;ShipLeftWeapons         DB EQ_LEFT_PULSE,   EQ_LEFT_PULSE,      EQ_LEFT_MINING,     EQ_LEFT_MINING
 352+ F4D6              ;ShipRightWeapons        DB EQ_RIGHT_PULSE,  EQ_RIGHT_PULSE,     EQ_RIGHT_MINING,    EQ_RIGHT_MINING
 353+ F4D6              ;                           c  y  s  t
 354+ F4D6              ;                           a  p  h  e                                            fi     P     Vi
 355+ F4D6              ;                           n  o  o  c                                            tt     o     ew
 356+ F4D6              ;                           B  s  w  h  price                  type               ed     s
 357+ F4D6 00 00 01 01  ShipEquipmentList       DB  0, 0, 1, 1, low     2, high     2, EQ_FUEL          , 0     ,$FF , 0  , 0  , 0  , 0  , 0  , 0 , 0
 357+ F4DA 02 00 00 00
 357+ F4DE FF 00 00 00
 357+ F4E2 00 00 00 00
 358+ F4E6 00 01 01 01                          DB  0, 1, 1, 1, low   300, high   300, EQ_MISSILE       , 0     ,$FF , 0  , 0  , 0  , 0  , 0  , 0 , 0
 358+ F4EA 2C 01 01 00
 358+ F4EE FF 00 00 00
 358+ F4F2 00 00 00 00
 359+ F4F6 00 02 01 01                          DB  0, 2, 1, 1, low  4000, high  4000, EQ_CARGO_BAY     , 0     ,$FF , 0  , 0  , 0  , 0  , 0  , 0 , 0
 359+ F4FA A0 0F 02 00
 359+ F4FE FF 00 00 00
 359+ F502 00 00 00 00
 360+ F506 00 03 01 02                          DB  0, 3, 1, 2, low  6000, high  6000, EQ_ECM           , 0     ,$FF , 0  , 0  , 0  , 0  , 0  , 0 , 0
 360+ F50A 70 17 03 00
 360+ F50E FF 00 00 00
 360+ F512 00 00 00 00
 361+ F516 00 04 01 05                          DB  0, 4, 1, 5, low  5250, high  5250, EQ_FUEL_SCOOPS   , 0     ,$FF , 0  , 0  , 0  , 0  , 0  , 0 , 0
 361+ F51A 82 14 04 00
 361+ F51E FF 00 00 00
 361+ F522 00 00 00 00
 362+ F526 00 05 01 06                          DB  0, 5, 1, 6, low 10000, high 10000, EQ_ESCAPE_POD    , 0     ,$FF , 0  , 0  , 0  , 0  , 0  , 0 , 0
 362+ F52A 10 27 05 00
 362+ F52E FF 00 00 00
 362+ F532 00 00 00 00
 363+ F536 00 06 01 07                          DB  0, 6, 1, 7, low  9000, high  9000, EQ_ENERGY_BOMB   , 0     ,$FF , 0  , 0  , 0  , 0  , 0  , 0 , 0
 363+ F53A 28 23 06 00
 363+ F53E FF 00 00 00
 363+ F542 00 00 00 00
 364+ F546 00 07 01 08                          DB  0, 7, 1, 8, low 15000, high 15000, EQ_ENERGY_UNIT   , 0     ,$FF , 0  , 0  , 0  , 0  , 0  , 0 , 0
 364+ F54A 98 3A 07 00
 364+ F54E FF 00 00 00
 364+ F552 00 00 00 00
 365+ F556 00 08 01 09                          DB  0, 8, 1, 9, low 15000, high 15000, EQ_DOCK_COMP     , 0     ,$FF , 0  , 0  , 0  , 0  , 0  , 0 , 0
 365+ F55A 98 3A 08 00
 365+ F55E FF 00 00 00
 365+ F562 00 00 00 00
 366+ F566 00 09 01 0A                          DB  0, 9, 1,10, low 50000, high 50000, EQ_GAL_DRIVE     , 0     ,$FF , 0  , 0  , 0  , 0  , 0  , 0 , 0
 366+ F56A 50 C3 09 00
 366+ F56E FF 00 00 00
 366+ F572 00 00 00 00
 367+ F576 00 0A 01 03                          DB  0,10, 1, 3, low  4000, high  4000, EQ_FRONT_PULSE   , 0     ,$00 , 0  , 0  , 0  , 0  , 0  , 0 , 0
 367+ F57A A0 0F 0A 00
 367+ F57E 00 00 00 00
 367+ F582 00 00 00 00
 368+ F586 00 0B 01 03                          DB  0,11, 1, 3, low  4000, high  4000, EQ_REAR_PULSE    , 0     ,$01 , 1  , 0  , 0  , 0  , 0  , 0 , 0
 368+ F58A A0 0F 0B 00
 368+ F58E 01 01 00 00
 368+ F592 00 00 00 00
 369+ F596 00 0C 01 03                          DB  0,12, 1, 3, low  4000, high  4000, EQ_LEFT_PULSE    , 0     ,$02 , 2  , 0  , 0  , 0  , 0  , 0 , 0
 369+ F59A A0 0F 0C 00
 369+ F59E 02 02 00 00
 369+ F5A2 00 00 00 00
 370+ F5A6 00 0D 01 03                          DB  0,13, 1, 3, low  4000, high  4000, EQ_RIGHT_PULSE   , 0     ,$03 , 3  , 0  , 0  , 0  , 0  , 0 , 0
 370+ F5AA A0 0F 0D 00
 370+ F5AE 03 03 00 00
 370+ F5B2 00 00 00 00
 371+ F5B6 00 0E 00 04                          DB  0,14, 0, 4, low 10000, high 10000, EQ_FRONT_BEAM    , 0     ,$00 , 0  , 0  , 0  , 0  , 0  , 0 , 0
 371+ F5BA 10 27 0E 00
 371+ F5BE 00 00 00 00
 371+ F5C2 00 00 00 00
 372+ F5C6 00 0F 00 04                          DB  0,15, 0, 4, low 10000, high 10000, EQ_REAR_BEAM     , 0     ,$01 , 1  , 0  , 0  , 0  , 0  , 0 , 0
 372+ F5CA 10 27 0F 00
 372+ F5CE 01 01 00 00
 372+ F5D2 00 00 00 00
 373+ F5D6 00 10 00 04                          DB  0,16, 0, 4, low 10000, high 10000, EQ_LEFT_BEAM     , 0     ,$02 , 2  , 0  , 0  , 0  , 0  , 0 , 0
 373+ F5DA 10 27 10 00
 373+ F5DE 02 02 00 00
 373+ F5E2 00 00 00 00
 374+ F5E6 00 11 00 04                          DB  0,17, 0, 4, low 10000, high 10000, EQ_RIGHT_BEAM    , 0     ,$03 , 3  , 0  , 0  , 0  , 0  , 0 , 0
 374+ F5EA 10 27 11 00
 374+ F5EE 03 03 00 00
 374+ F5F2 00 00 00 00
 375+ F5F6 00 12 00 0A                          DB  0,18, 0,10, low  8000, high  8000, EQ_FRONT_MINING  , 0     ,$00 , 0  , 0  , 0  , 0  , 0  , 0 , 0
 375+ F5FA 40 1F 12 00
 375+ F5FE 00 00 00 00
 375+ F602 00 00 00 00
 376+ F606 00 13 00 0A                          DB  0,19, 0,10, low  8000, high  8000, EQ_REAR_MINING   , 0     ,$01 , 1  , 0  , 0  , 0  , 0  , 0 , 0
 376+ F60A 40 1F 13 00
 376+ F60E 01 01 00 00
 376+ F612 00 00 00 00
 377+ F616 00 14 00 0A                          DB  0,20, 0,10, low  8000, high  8000, EQ_LEFT_MINING   , 0     ,$02 , 2  , 0  , 0  , 0  , 0  , 0 , 0
 377+ F61A 40 1F 14 00
 377+ F61E 02 02 00 00
 377+ F622 00 00 00 00
 378+ F626 00 15 00 0A                          DB  0,21, 0,10, low  8000, high  8000, EQ_RIGHT_MINING  , 0     ,$03 , 3  , 0  , 0  , 0  , 0  , 0 , 0
 378+ F62A 40 1F 15 00
 378+ F62E 03 03 00 00
 378+ F632 00 00 00 00
 379+ F636 00 16 00 0A                          DB  0,22, 0,10, low 60000, high 60000, EQ_FRONT_MILITARY, 0     ,$00 , 0  , 0  , 0  , 0  , 0  , 0 , 0
 379+ F63A 60 EA 16 00
 379+ F63E 00 00 00 00
 379+ F642 00 00 00 00
 380+ F646 00 17 00 0A                          DB  0,23, 0,10, low 60000, high 60000, EQ_REAR_MILITARY , 0     ,$01 , 1  , 0  , 0  , 0  , 0  , 0 , 0
 380+ F64A 60 EA 17 00
 380+ F64E 01 01 00 00
 380+ F652 00 00 00 00
 381+ F656 00 18 00 0A                          DB  0,24, 0,10, low 60000, high 60000, EQ_LEFT_MILITARY , 0     ,$02 , 2  , 0  , 0  , 0  , 0  , 0 , 0
 381+ F65A 60 EA 18 00
 381+ F65E 02 02 00 00
 381+ F662 00 00 00 00
 382+ F666 00 19 00 0A                          DB  0,25, 0,10, low 60000, high 60000, EQ_RIGHT_MILITARY, 0     ,$03 , 3  , 0  , 0  , 0  , 0  , 0 , 0
 382+ F66A 60 EA 19 00
 382+ F66E 03 03 00 00
 382+ F672 00 00 00 00
 383+ F676              ShipEquipTableRowLen    EQU 16
 384+ F676              ShipEquipTableSize      EQU ($-ShipEquipmentList)/ShipEquipTableRowLen
 385+ F676
 386+ F676              ;------------------------------------------------------------------------------------------------------------------------------------
 387+ F676 2B           GalaxyRandSeed			DB	43	            ; Just some start values
 388+ F677 20           GalaxyRandSeed1			DB	32	            ; Just some start values
 389+ F678 0C           GalaxyRandSeed2			DB	12	            ; Just some start values
 390+ F679 42           GalaxyRandSeed3			DB	66	            ; Just some start values
 391+ F67A              GalaxySeedRandom:
 392+ F67A              ;------------------------------------------------------------------------------------------------------------------------------------
 393+ F67A CD 5A 86     GetDigramGalaxySeed:    call	copy_galaxy_to_working
 394+ F67D 18 03                                jr		GetDigramWorkingSeed
 395+ F67F CD 72 86     GetDigramSystemSeed:    call	copy_system_to_working
 396+ F682 11 70 90     GetDigramWorkingSeed:   ld		de,name_expanded    ; ">GetDigram a = digram seed"
 397+ F685 06 03                                ld		b,3
 398+ F687 3A 46 80                             ld		a,(WorkingSeeds)
 399+ F68A E6 40                                and		$40
 400+ F68C 28 03                                jr		z,.SmallSizeName
 401+ F68E CD 91 90     .LargeSizeName:         call	NamingLoop
 402+ F691 CD 91 90     .SmallSizeName:         call	NamingLoop
 403+ F694 CD 91 90                             call	NamingLoop
 404+ F697 CD 91 90                             call	NamingLoop
 405+ F69A EB           .DoneName:              ex		de,hl
 406+ F69B 36 00                                ld		(hl),0
 407+ F69D EB                                   ex		de,hl
 408+ F69E C9                                   ret
 409+ F69F
 410+ F69F 11 76 F6     GalaxySetSeedFromHL:    ld      de,GalaxyRandSeed
 411+ F6A2              ; Uses registers a,b and hl
 412+ F6A2 B7           GalaxyDoRandom:         or      a                                               ; in 6502 this is called after a bcc instruction to will always be clear (see .detok2 and .dt6)
 413+ F6A3 3A 76 F6                             ld      a,(GalaxyRandSeed)
 414+ F6A6 CB 17        .Seed0Rolled:           rl      a                                               ; r0 << 1
 415+ F6A8 47                                   ld      b,a                                             ; b = reg x in 6502 so x = r0 << 1
 416+ F6A9 21 78 F6     .AddSeed2               ld      hl,GalaxyRandSeed2                              ;
 417+ F6AC 8E                                   adc     a,(hl)                                          ; a = r0 << 1 + r2
 418+ F6AD 32 76 F6     .SetRandSeed0:          ld		(GalaxyRandSeed),a					            ; set r0' = (r0 << 1) +  r2 + (r0 bit 7)
 419+ F6B0 78                                   ld      a,b
 420+ F6B1 32 78 F6     .SetRandSeed2:          ld      (GalaxyRandSeed2),a                             ; set r2' =  r0 << 1
 421+ F6B4 3A 77 F6     .GetRandSeed1:          ld      a,(GalaxyRandSeed1)
 422+ F6B7 47                                   ld      b,a                                             ; b = r1
 423+ F6B8 21 79 F6                             ld      hl,GalaxyRandSeed3
 424+ F6BB 8E                                   adc     a,(hl)                                          ; Adc from before may have set carry flag or may not, will be set if r0 << 1 + r2 + carry > 256
 425+ F6BC 32 77 F6                             ld      (GalaxyRandSeed1),a                             ; set r1' = r1 + r3 + carry
 426+ F6BF 4F                                   ld      c,a
 427+ F6C0 78                                   ld      a,b
 428+ F6C1 32 79 F6                             ld      (GalaxyRandSeed3),a                             ; set r3 = r1
 429+ F6C4 79                                   ld      a,c
 430+ F6C5 C9                                   ret
 431+ F6C6
 432+ F6C6              ;------------------------------------------------------------------------------------------------------------------------------------
 433+ F6C6 ED 31        galaxy_cpy_str_a_at_hl_to_de:add     hl,a
 434+ F6C8 ED 31                                add     hl,a
 435+ F6CA 7E                                   ld      a,(hl)              ;  Fetch low byte
 436+ F6CB 47                                   ld      b,a
 437+ F6CC 23                                   inc     hl
 438+ F6CD 7E                                   ld      a,(hl)              ;  Fetch high byte
 439+ F6CE 68                                   ld      l,b
 440+ F6CF 67                                   ld      h,a
 441+ F6D0 7E           GalaxyCopyLoop:         ld      a,(hl)
 442+ F6D1 FE 00                                cp      0
 443+ F6D3 28 05                                jr      z,.CopyDone
 444+ F6D5 12                                   ld      (de),a
 445+ F6D6 23                                   inc     hl
 446+ F6D7 13                                   inc     de
 447+ F6D8 18 F6                                jr      GalaxyCopyLoop
 448+ F6DA 12           .CopyDone:              ld      (de),a
 449+ F6DB C9                                   ret
 450+ F6DC              ;------------------------------------------------------------------------------------------------------------------------------------
 451+ F6DC 11 64 F1     galaxy_get_species:     ld      de,GalaxySpecies
 452+ F6DF 3E 28                                ld      a,"("
 453+ F6E1 12                                   ld      (de),a
 454+ F6E2 13                                   inc     de
 455+ F6E3 3A FC E8                             ld      a,(GalaxyWorkingSeed+4)
 456+ F6E6 CB 7F                                bit     7,a
 457+ F6E8 20 0A                                jr      nz,.NonHuman
 458+ F6EA 21 62 F1                             ld      hl,GalaxyInhabitantHumanIx
 459+ F6ED AF                                   xor     a
 460+ F6EE CD C6 F6                             call    galaxy_cpy_str_a_at_hl_to_de
 461+ F6F1 C3 4F F7                             jp      .galaxy_species_exit
 462+ F6F4 3A FD E8     .NonHuman:              ld      a,(GalaxyWorkingSeed+5)
 463+ F6F7 CB 3F                                srl     a
 464+ F6F9 CB 3F                                srl     a
 465+ F6FB E6 07                                and     $07
 466+ F6FD FE 03                                cp      3
 467+ F6FF 30 0A                                jr      nc,.NotDesc1
 468+ F701 21 34 F1                             ld      hl,GalaxyInhabitantDesc1Ix
 469+ F704 CD C6 F6                             call    galaxy_cpy_str_a_at_hl_to_de
 470+ F707 3E 20                                ld      a," "
 471+ F709 12                                   ld      (de),a
 472+ F70A 13                                   inc     de
 473+ F70B 3A FD E8     .NotDesc1:              ld      a,(GalaxyWorkingSeed+5)
 474+ F70E CB 3F                                srl     a
 475+ F710 CB 3F                                srl     a
 476+ F712 CB 3F                                srl     a
 477+ F714 CB 3F                                srl     a
 478+ F716 CB 3F                                srl     a
 479+ F718 FE 06                                cp      6
 480+ F71A 30 0A                                jr      nc,.NotDesc2
 481+ F71C 21 3A F1                             ld      hl,GalaxyInhabitantDesc2Ix
 482+ F71F CD C6 F6                             call    galaxy_cpy_str_a_at_hl_to_de
 483+ F722 3E 20                                ld      a," "
 484+ F724 12                                   ld      (de),a
 485+ F725 13                                   inc     de
 486+ F726 3A F9 E8     .NotDesc2:              ld      a,(GalaxyWorkingSeed+1)
 487+ F729 47                                   ld      b,a
 488+ F72A 3A FB E8                             ld      a,(GalaxyWorkingSeed+3)
 489+ F72D A8                                   xor     b
 490+ F72E E6 07                                and     $07
 491+ F730 F5                                   push    af
 492+ F731 FE 06                                cp      6
 493+ F733 30 0A                                jr      nc,.NotDesc3
 494+ F735 21 46 F1                             ld      hl,GalaxyInhabitantDesc3Ix
 495+ F738 CD C6 F6                             call    galaxy_cpy_str_a_at_hl_to_de
 496+ F73B 3E 20                                ld      a," "
 497+ F73D 12                                   ld      (de),a
 498+ F73E 13                                   inc     de
 499+ F73F F1           .NotDesc3:              pop     af
 500+ F740 47                                   ld      b,a
 501+ F741 3A FD E8                             ld      a,(GalaxyWorkingSeed+5)
 502+ F744 E6 03                                and     $03
 503+ F746 80                                   add     a,b
 504+ F747 E6 07                                and     $07
 505+ F749 21 52 F1                             ld      hl,GalaxyInhabitantDesc4Ix
 506+ F74C CD C6 F6                             call    galaxy_cpy_str_a_at_hl_to_de
 507+ F74F 3E 73        .galaxy_species_exit:   ld      a,"s"
 508+ F751 12                                   ld      (de),a
 509+ F752 13                                   inc     de
 510+ F753 3E 29                                ld      a,")"
 511+ F755 12                                   ld      (de),a
 512+ F756 13                                   inc     de
 513+ F757 AF                                   xor     a
 514+ F758 12                                   ld      (de),a
 515+ F759 C9                                   ret
 516+ F75A
 517+ F75A
 518+ F75A              ; To copy seed, loops from 3 to 0
 519+ F75A              ; copy seed X + 2 to target X
 520+ F75A              ; x = x -1
 521+ F75A
 522+ F75A              ; For lave we shoudl have "Lave is most famous for its vast rain forests and the Lavian tree grub"
 523+ F75A
 524+ F75A              GalaxyCapitaliseString: ; ">CapitaliseString hl = address"
 525+ F75A 23                                   inc		hl
 526+ F75B 7E                                   ld		a,(hl)
 527+ F75C FE 00                                cp		0
 528+ F75E C8                                   ret		z
 529+ F75F FE 5B                                cp		'Z'+1
 530+ F761 30 F7                                jr		nc,GalaxyCapitaliseString
 531+ F763 FE 41                                cp		'A'
 532+ F765 38 F3                                jr		c,GalaxyCapitaliseString
 533+ F767 C6 20        .LowerCase:             add		a,'a'-'A'
 534+ F769 77                                   ld		(hl),a
 535+ F76A 18 EE                                jr		GalaxyCapitaliseString
 536+ F76C
 537+ F76C
 538+ F76C              GalaxyGoatSoup:         ;ld      (GalaxyTargetSystem),bc                         ; Set the galaxy target variable
 539+ F76C                                      ;call    galaxy_system_under_cursor                      ; and set the galaxyworkingseed based on cursor
 540+ F76C                                      ;cp      $FF
 541+ F76C                                      ;jr      z,.NoSystemFound
 542+ F76C 3A 48 80     .SeedGalaxy             ld      a,(WorkingSeeds+2)                              ;
 543+ F76F 32 76 F6                             ld      (GalaxyRandSeed),a                              ; r0 = Seed C
 544+ F772 3A 49 80                             ld      a,(WorkingSeeds+3)                              ;
 545+ F775 32 77 F6                             ld      (GalaxyRandSeed1),a                             ; r1 = Seeed D
 546+ F778 3A 4A 80                             ld      a,(WorkingSeeds+4)                              ;
 547+ F77B 32 78 F6                             ld      (GalaxyRandSeed2),a                             ; r2 = Seed E
 548+ F77E 3A 4B 80                             ld      a,(WorkingSeeds+5)                              ;
 549+ F781 32 79 F6                             ld      (GalaxyRandSeed3),a                             ; r3 = Seed F
 550+ F784 C9                                   ret
 551+ F785              ; For later......
 552+ F785 3E 05        .MarkExtendedDesc:      ld      a,5                                             ;  ("{lower case}{justify}{single cap}[86-90] IS [140-144].{cr}{left align}"
 553+ F787 F5           .GalaxyExpandDesc:      push    af
 554+ F788 47                                   ld      b,a                                             ; b = 6502 X reg
 555+ F789 C5                                   push    bc                                              ; save Y reg
 556+ F78A
 557+ F78A              ;------------------------------------------------------------------------------------------------------------------------------------
 558+ F78A              ; We enter here with BC = the Y and X Coordinates of the system to select in this galaxy
 559+ F78A              ; This is based on the docked BBC PDesc Pink Volcanoes version ratehr tha goat soup
 560+ F78A ED 43 5B E8  GalaxyPinkVolcano:      ld      (GalaxyTargetSystem),bc                         ; Set the galaxy target variable
 561+ F78E CD 64 FC                             call    galaxy_system_under_cursor                      ; and set the galaxyworkingseed based on cursor
 562+ F791                                      ;cp      $FF
 563+ F791                                      ;jr      z,.NoSystemFound
 564+ F791              .SpecialDescs:          ; this is not implemented yet to read GalaxyExtendedDescs look at .PDL1
 565+ F791
 566+ F791
 567+ F791
 568+ F791              ;.NoSytemFound:          Print the "Unable to identify a system at present position"
 569+ F791
 570+ F791 00 00 00...  GalaxyNameCopy          DS      30
 571+ F7AF
 572+ F7AF 1E 00        ExpandAtHLToE:          ld      e,0
 573+ F7B1 7E           .ExpandTokenLoop:       ld      a,(hl)
 574+ F7B2 FE 3E                                cp      ">"
 575+ F7B4 C8                                   ret     z
 576+ F7B5 23                                   inc     hl
 577+ F7B6 16 0A                                ld      d,10
 578+ F7B8 ED 30                                mul
 579+ F7BA D6 30                                sub     "0"
 580+ F7BC 83                                   add     a,e
 581+ F7BD 5F                                   ld      e,a
 582+ F7BE 18 F1                                jr      .ExpandTokenLoop
 583+ F7C0
 584+ F7C0 E5           SelectTokenToHL:        push    hl                                          ;+1
 585+ F7C1 C5                                   push    bc                                          ;+2
 586+ F7C2 CD A2 F6                             call    GalaxyDoRandom
 587+ F7C5 C1                                   pop     bc                                          ;+1
 588+ F7C6 E1                                   pop     hl                                          ;+0
 589+ F7C7 16 00        .CalcOptionAToD:        ld      d,0
 590+ F7C9 FE 33                                cp      $33
 591+ F7CB DA CF F7                             jp      c,.Check66
 592+ F7CE 14           .IsGTE33:               inc     d
 593+ F7CF FE 66        .Check66:               cp      $66
 594+ F7D1 DA D5 F7                             jp      c,.Check99
 595+ F7D4 14           .IsGTE66:               inc     d
 596+ F7D5 FE 99        .Check99:               cp      $99
 597+ F7D7 DA DB F7     .IsGTE99:               jp      c,.CheckCC
 598+ F7DA 14                                   inc     d
 599+ F7DB FE CC        .CheckCC:               cp      $CC
 600+ F7DD 38 01                                jr      c,.TokenIdToAddress
 601+ F7DF 14           .ItGETCC:               inc     d
 602+ F7E0 21 1B EF     .TokenIdToAddress:      ld      hl,GalaxyDescList
 603+ F7E3 7B                                   ld      a,e
 604+ F7E4 CB 27                                sla     a                                               ; x 2
 605+ F7E6 ED 31                                add     hl,a                                            ; hl + a * 2
 606+ F7E8 ED 31                                add     hl,a                                            ; hl + a * 4
 607+ F7EA ED 31                                add     hl,a                                            ; hl + a * 6
 608+ F7EC ED 31                                add     hl,a                                            ; hl + a * 8
 609+ F7EE ED 31                                add     hl,a                                            ; hl + a * 10
 610+ F7F0 7A                                   ld      a,d
 611+ F7F1 ED 31                                add     hl,a
 612+ F7F3 ED 31                                add     hl,a                                            ; hl = desc array [e][d]
 613+ F7F5 7E           .LookUpDataFromTable:   ld      a,(hl)
 614+ F7F6 DD 6F                                ld      ixl,a
 615+ F7F8 23                                   inc     hl
 616+ F7F9 7E                                   ld      a,(hl)
 617+ F7FA DD 67                                ld      ixh,a                                           ; ix = address at (hl)
 618+ F7FC DD E5                                push    ix                                              ;+2
 619+ F7FE E1                                   pop     hl                                              ;+1
 620+ F7FF C9                                   ret
 621+ F800              ;------------------------------------------------------------------------------------------------------------------------------------
 622+ F800 E5           ProcessHSymbol:         push    hl                                              ;+1
 623+ F801 D5                                   push    de                                              ;+2
 624+ F802 C5                                   push    bc                                              ;+3
 625+ F803 21 91 F7     .CopyInNameH:           ld      hl, GalaxyNameCopy
 626+ F806 FD 54                                ld      d,iyh
 627+ F808 FD 5D                                ld      e,iyl
 628+ F80A CD D0 F6                             call    GalaxyCopyLoop
 629+ F80D FD 62                                ld      iyh,d
 630+ F80F FD 6B                                ld      iyl,e
 631+ F811 C1                                   pop     bc                                              ;+2
 632+ F812 D1                                   pop     de                                              ;+1
 633+ F813 E1                                   pop     hl
 634+ F814 C9                                   ret
 635+ F815              ;------------------------------------------------------------------------------------------------------------------------------------
 636+ F815 E5           ProcessISymbol:         push    hl                                              ;+1
 637+ F816 D5                                   push    de                                              ;+2
 638+ F817 C5                                   push    bc                                              ;+3
 639+ F818 21 91 F7     .CopyInNameI:           ld      hl, GalaxyNameCopy
 640+ F81B FD 54                                ld      d,iyh
 641+ F81D FD 5D                                ld      e,iyl
 642+ F81F CD D0 F6                             call    GalaxyCopyLoop
 643+ F822 FD 62                                ld      iyh,d
 644+ F824 FD 6B                                ld      iyl,e
 645+ F826 3E 69                                ld      a,"i"
 646+ F828 EB                                   ex      de,hl
 647+ F829 77                                   ld      (hl),a
 648+ F82A 23                                   inc     hl
 649+ F82B 3E 61                                ld      a,"a"
 650+ F82D 77                                   ld      (hl),a
 651+ F82E 23                                   inc     hl
 652+ F82F 3E 6E                                ld      a,"n"
 653+ F831 77                                   ld      (hl),a
 654+ F832 23                                   inc     hl
 655+ F833 E5                                   push    hl
 656+ F834 FD E1                                pop     iy
 657+ F836 C1                                   pop     bc                                              ;+2
 658+ F837 D1                                   pop     de                                              ;+1
 659+ F838 E1                                   pop     hl                                              ;+0
 660+ F839 C9                                   ret
 661+ F83A              ;------------------------------------------------------------------------------------------------------------------------------------
 662+ F83A E5           ProcessRSymbol:         push    hl                                              ;+1
 663+ F83B D5                                   push    de                                              ;+2
 664+ F83C CD A2 F6                             call    GalaxyDoRandom ;(Correct one or do we use teh clear carry version?)
 665+ F83F E6 03                                and     $03
 666+ F841 47                                   ld      b,a
 667+ F842 04                                   inc     b
 668+ F843 AF                                   xor     a
 669+ F844 4F                                   ld      c,a
 670+ F845 C5           .RLoop:                 push    bc                                              ;+3
 671+ F846 CD A2 F6                             call    GalaxyDoRandom
 672+ F849 C1                                   pop     bc                                              ;+2
 673+ F84A E6 3E                                and     $3E
 674+ F84C 21 A0 E8                             ld      hl,GalaxyName_digrams
 675+ F84F ED 31                                add     hl,a
 676+ F851 7E                                   ld      a,(hl)
 677+ F852 FE 41                                cp      "A"
 678+ F854 38 01                                jr      c,.NotLowercase
 679+ F856 81                                   add     a,c
 680+ F857 FD 77 00     .NotLowercase:          ld      (iy+0),a
 681+ F85A 23                                   inc     hl
 682+ F85B FD 23                                inc     iy
 683+ F85D 0E 20                                ld      c,$20               ; fixed force to lower case
 684+ F85F 7E                                   ld      a,(hl)
 685+ F860 FE 41                                cp      "A"
 686+ F862 38 01                                jr      c,.NotLowercase2
 687+ F864 81                                   add     a,c
 688+ F865 FD 77 00     .NotLowercase2:         ld      (iy+0),a
 689+ F868 FD 23                                inc     iy
 690+ F86A 10 D9                                djnz    .RLoop
 691+ F86C D1                                   pop     de                                              ;+1
 692+ F86D E1                                   pop     hl                                              ;+0
 693+ F86E C9                                   ret
 694+ F86F              ;------------------------------------------------------------------------------------------------------------------------------------
 695+ F86F ED 43 5B E8  GalaxyGenerateDesc:     ld      (GalaxyTargetSystem),bc                         ; Set the galaxy target variable
 696+ F873 CD 64 FC                             call    galaxy_system_under_cursor
 697+ F876 CD BF FA     .CopySystemName:        call    galaxy_digram_seed                              ; make a local copy of system name
 698+ F879 21 7F E8                             ld      hl,GalaxyExpandedName
 699+ F87C 11 91 F7                             ld      de,GalaxyNameCopy
 700+ F87F CD D0 F6                             call    GalaxyCopyLoop
 701+ F882 21 91 F7     .CapitaliseName:        ld      hl,GalaxyNameCopy
 702+ F885 CD 5A F7                             call    GalaxyCapitaliseString
 703+ F888                                      ; we will also capitalise the local copy here later
 704+ F888 21 DE F3     .InitDescription:       ld      hl,GalaxyPlanetDescStarter                      ; Initialise galaxy description to  <14> is <22>
 705+ F88B 11 B2 F2                             ld      de,GalaxyPlanetSource
 706+ F88E CD D0 F6                             call    GalaxyCopyLoop
 707+ F891 AF           .ClearOutDescription:   xor     a
 708+ F892 21 85 F1                             ld      hl,GalaxyPlanetDescription
 709+ F895 77                                   ld      (hl),a
 710+ F896 11 86 F1                             ld      de,GalaxyPlanetDescription+1
 711+ F899 01 2C 01                             ld      bc,300                                          ; copy previous byte to current for 300 bytes (as we have DS 300 + 1)
 712+ F89C ED B0                                ldir                                                    ; zero it out, don't need this at the end but simplifies debugging
 713+ F89E CD 6C F7     .CopySeedToRandom:      call    GalaxyGoatSoup
 714+ F8A1 21 B2 F2                             ld      hl,GalaxyPlanetSource
 715+ F8A4 FD 21 85 F1                          ld      iy,GalaxyPlanetDescription
 716+ F8A8              ; At this point we are now prepped ready to expand the string to a full description
 717+ F8A8              ;-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.
 718+ F8A8 7E           .ExpRecursive:          ld      a,(hl)
 719+ F8A9 FE 00                                cp      0
 720+ F8AB CA F0 F8                             jp      z,.ExpansionComplete
 721+ F8AE FE 3C                                cp      "<"
 722+ F8B0 C2 C3 F8                             jp      nz,.NotToken
 723+ F8B3 23           .ItIsAToken:            inc     hl
 724+ F8B4 CD AF F7     .ReadToken:             call    ExpandAtHLToE                                   ; here we have a <X> token
 725+ F8B7 23                                   inc     hl
 726+ F8B8 E5           .SaveCurrentPosition:   push    hl                                              ;+1 Save the current pointer to the text as we are now diverting off to another address
 727+ F8B9 CD C0 F7     .LookUpToken:           call    SelectTokenToHL                                 ; Get random token id by using d as list and e as offest against galaxydesc list and return address in hl
 728+ F8BC CD A8 F8                             call    .ExpRecursive
 729+ F8BF E1           .RestoreCurrentPosition:pop     hl                                              ;+0 get back our old HL we saved off
 730+ F8C0 C3 A8 F8     .TokenNextIteration:    jp      .ExpRecursive
 731+ F8C3              ;-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.
 732+ F8C3 FE 25        .NotToken:              cp      "%"
 733+ F8C5 C2 E7 F8                             jp      nz,.RegularCharacter
 734+ F8C8 23                                   inc     hl                                              ; issue was that it was stuck on "%" and not reading the next character for the token to expand
 735+ F8C9 7E                                   ld      a,(hl)
 736+ F8CA FE 48                                cp      "H"
 737+ F8CC 20 07                                jr      nz,.IsItI
 738+ F8CE 23           .ItIsAnH:               inc     hl
 739+ F8CF CD 00 F8                             call    ProcessHSymbol
 740+ F8D2 C3 A8 F8                             jp      .ExpRecursive
 741+ F8D5 FE 49        .IsItI:                 cp      "I"
 742+ F8D7 20 07                                jr      nz,.ItIsR
 743+ F8D9 23           .ItIsAnI:               inc     hl
 744+ F8DA CD 15 F8                             call    ProcessISymbol
 745+ F8DD C3 A8 F8                             jp      .ExpRecursive
 746+ F8E0 CD 3A F8     .ItIsR:                 call    ProcessRSymbol
 747+ F8E3 23                                   inc     hl
 748+ F8E4 C3 A8 F8     .SystemNextIteration:   jp      .ExpRecursive
 749+ F8E7 FD 77 00     .RegularCharacter:      ld      (iy+0),a
 750+ F8EA FD 23                                inc     iy
 751+ F8EC 23                                   inc     hl
 752+ F8ED C3 A8 F8     .RegularNextIteration:  jp      .ExpRecursive
 753+ F8F0 AF           .ExpansionComplete:     xor     a
 754+ F8F1 FD 77 01                             ld      (iy+1),a    ; will thsi work as a bodge
 755+ F8F4 C9                                   ret
 756+ F8F5              ;----------------------------------------------------------------------------------------------------------------------------------
 757+ F8F5 3A 0C E9     galaxy_equip_market:    ld      a,(GalaxyDisplayTekLevel)
 758+ F8F8 3C                                   inc     a
 759+ F8F9 67                                   ld      h,a
 760+ F8FA 0E 00                                ld      c,0
 761+ F8FC 06 1A                                ld      b,ShipEquipTableSize            ;NO_OF_EQUIP_ITEMS
 762+ F8FE 11 10 00                             ld      de,ShipEquipTableRowLen         ; Bytes per row
 763+ F901 DD 21 D6 F4                          ld      ix,ShipEquipmentList
 764+ F905 DD 7E 06     .ItemCheckLoop:         ld      a,(ix+6)                        ; is it type fuel
 765+ F908 FE 00                                cp      0
 766+ F90A                                      ; Check Cash TODO
 767+ F90A 28 00                                jr      z,.CheckTechLevel
 768+ F90C DD 7E 03     .CheckTechLevel:        ld      a,(ix+3)                        ; ItemTech Level
 769+ F90F BC                                   cp      h
 770+ F910                                      ;jr      nc,.DoNotShowItem
 771+ F910 DD 7E 02     .CheckShowItem:         ld      a,(ix+2)
 772+ F913 FE 00                                cp      0
 773+ F915                                    ;  jr      z,.DoNotShowItem
 774+ F915 79           .ShowItem:              ld      a,c
 775+ F916 DD 71 01                             ld      (ix+1),c                        ; Show Item Row Id
 776+ F919 DD 7E 06     .CheckFitted:           ld      a,(ix+6)
 777+ F91C FE 00                                cp      EQ_FUEL
 778+ F91E 28 18                                jr      z,.FuelLevel
 779+ F920 FE 01                                cp      EQ_MISSILE
 780+ F922 28 25                                jr      z,.CountMissiles
 781+ F924 21 AE 85     .IsFitted:              ld      hl,EquipmentFitted
 782+ F927 ED 31                                add     hl,a
 783+ F929 7E                                   ld      a,(hl)
 784+ F92A FE 00                                cp      0
 785+ F92C 28 05                                jr      z,.NotFittedItem
 786+ F92E 3E 2A        .FittedItem:            ld      a,"*"
 787+ F930 C3 5A F9                             jp      .MoreToDoCheck
 788+ F933 3E 2D        .NotFittedItem:         ld      a,"-"
 789+ F935 C3 5A F9                             jp      .MoreToDoCheck
 790+ F938 3A 93 85     .FuelLevel:             ld      a,(Fuel)
 791+ F93B FE 46                                cp      MaxFuelLevel
 792+ F93D 28 05                                jr      z,.FullFuel
 793+ F93F 3E 2D        .NotFullFuel:           ld      a,"-"
 794+ F941 C3 5A F9                             jp      .MoreToDoCheck
 795+ F944 3E 2A        .FullFuel               ld      a,"*"                           ; later on do 3 starts low, med,full
 796+ F946 C3 5A F9                             jp      .MoreToDoCheck
 797+ F949 3A 65 80     .CountMissiles:         ld      a,(NbrMissiles)
 798+ F94C FE 00                                cp      0
 799+ F94E 28 05                                jr      z,.NoMissiles
 800+ F950 C6 30                                add     "0"
 801+ F952 C3 5A F9                             jp      .MoreToDoCheck
 802+ F955 3E 2D        .NoMissiles:            ld      a,"-"
 803+ F957 C3 5A F9                             jp      .MoreToDoCheck
 804+ F95A DD 77 07     .MoreToDoCheck:         ld      (ix+7),a                        ; update fitted status
 805+ F95D 0C                                   inc     c
 806+ F95E DD 19                                add     ix,de
 807+ F960 10 A3                                djnz    .ItemCheckLoop
 808+ F962 C9                                   ret
 809+ F963 3E FF        .DoNotShowItem          ld      a,$FF                           ; $FF = hide
 810+ F965 DD 77 01                             ld      (ix+1),a
 811+ F968 DD 19                                add     ix,de
 812+ F96A 10 99                                djnz    .ItemCheckLoop
 813+ F96C C9                                   ret
 814+ F96D              ;----------------------------------------------------------------------------------------------------------------------------------
 815+ F96D 3A FA E8     galaxy_planet_data:     ld      a,(GalaxyWorkingSeed+2)
 816+ F970 B7           .GenerateGovernment:    or      a
 817+ F971 CB 3F                                srl	    a                                               ; Government = seed2 / 8 & 7
 818+ F973 CB 3F                                srl	    a
 819+ F975 CB 3F                                srl	    a                                                   ;
 820+ F977 E6 07                                and     $07                                             ;
 821+ F979 32 0A E9                             ld      (GalaxyDisplayGovernment),a                     ;
 822+ F97C 3A F9 E8     .GenerateEconomy:       ld      a,(GalaxyWorkingSeed+1)
 823+ F97F E6 07                                and     $07
 824+ F981 47                                   ld      b,a
 825+ F982 3A 0A E9                             ld      a,(GalaxyDisplayGovernment)
 826+ F985                                      JumpIfAGTENusng 1, .GreaterThan1
 826+ F985 FE 01       >                        cp     1
 826+ F987 D2 93 F9    >                        jp		nc,.GreaterThan1
 827+ F98A 78           .OneOrZero:             ld      a,b
 828+ F98B F6 02                                or      2
 829+ F98D 32 0B E9                             ld      (GalaxyDisplayEconomy),a
 830+ F990 C3 97 F9                             jp      .GenerateTechLevel
 831+ F993 78           .GreaterThan1:          ld      a,b
 832+ F994 32 0B E9                             ld      (GalaxyDisplayEconomy),a
 833+ F997 EE 07        .GenerateTechLevel:     xor     $07                                             ; tech = economy xor 7 + seed3 & 3 + government /2 + fovernemnt & 1
 834+ F999 47                                   ld      b,a
 835+ F99A 3A FB E8                             ld      a,(GalaxyWorkingSeed+3)
 836+ F99D E6 03                                and     $03
 837+ F99F 80                                   add     b
 838+ F9A0 47                                   ld      b,a
 839+ F9A1 3A 0A E9                             ld      a,(GalaxyDisplayGovernment)
 840+ F9A4 4F                                   ld      c,a
 841+ F9A5 CB 2F                                sra     a
 842+ F9A7 80                                   add     b
 843+ F9A8 47                                   ld      b,a
 844+ F9A9 79                                   ld      a,c
 845+ F9AA E6 01                                and     $1
 846+ F9AC 80                                   add     b
 847+ F9AD 32 0C E9                             ld      (GalaxyDisplayTekLevel),a
 848+ F9B0 CB 27        .GeneratePopulation:    sla     a                                               ; population = tech level * 4 + government + economy + 1
 849+ F9B2 CB 27                                sla     a
 850+ F9B4 21 0A E9                             ld      hl,GalaxyDisplayGovernment
 851+ F9B7 86                                   add     a,(hl)
 852+ F9B8 47                                   ld      b,a
 853+ F9B9 3A 0B E9                             ld      a,(GalaxyDisplayEconomy)
 854+ F9BC 80                                   add     a,b
 855+ F9BD 3C                                   inc     a
 856+ F9BE 32 0D E9                             ld      (GalaxyDisplayPopulation),a
 857+ F9C1 3A 0B E9     .GenerateProductivity:  ld      a,(GalaxyDisplayEconomy)
 858+ F9C4 EE 07                                xor     7
 859+ F9C6 C6 03                                add     3
 860+ F9C8 57                                   ld      d,a
 861+ F9C9 3A 0A E9                             ld      a,(GalaxyDisplayGovernment)
 862+ F9CC C6 04                                add     4
 863+ F9CE 5F                                   ld      e,a
 864+ F9CF ED 30                                mul                                                     ; the next mulitply will be a 16 bit value
 865+ F9D1 3A 0D E9                             ld      a,(GalaxyDisplayPopulation)
 866+ F9D4 26 00                                ld      h,0
 867+ F9D6 6F                                   ld      l,a
 868+ F9D7 CD 7D 92                             call    mulDEbyHL
 869+ F9DA EB                                   ex      de,hl
 870+ F9DB                                      ShiftDELeft1
 870+ F9DB CB 23       >			   sla e
 870+ F9DD CB 12       >			   rl  d
 871+ F9DF                                      ShiftDELeft1
 871+ F9DF CB 23       >			   sla e
 871+ F9E1 CB 12       >			   rl  d
 872+ F9E3                                      ShiftDELeft1
 872+ F9E3 CB 23       >			   sla e
 872+ F9E5 CB 12       >			   rl  d
 873+ F9E7 ED 53 0E E9                          ld      (GalaxyDisplayProductivity),de
 874+ F9EB 3A FD E8     .GenerateRadius:        ld		a,(GalaxyWorkingSeed+5)                         ;radius min = 256*11 = 2816 km
 875+ F9EE E6 0F                                and		$0F
 876+ F9F0 C6 0B                                add     11
 877+ F9F2 47                                   ld      b,a
 878+ F9F3 3A FB E8                             ld      a,(GalaxyWorkingSeed+3)
 879+ F9F6 4F                                   ld      c,a
 880+ F9F7 ED 43 10 E9                          ld      (GalaxyDisplayRadius),bc
 881+ F9FB C9                                   ret
 882+ F9FC
 883+ F9FC              galaxy_master_seed_to_system:
 884+ F9FC 21 10 E0     		ld		hl,galaxy_master_seed
 885+ F9FF 11 2E 80     		ld		de,SystemSeed
 886+ FA02              galaxy_copy_seed:
 887+ FA02 ED A0        		ldi
 888+ FA04 ED A0        		ldi
 889+ FA06 ED A0        		ldi
 890+ FA08 ED A0        		ldi
 891+ FA0A ED A0        		ldi
 892+ FA0C ED A0        		ldi
 893+ FA0E C9           		ret
 894+ FA0F
 895+ FA0F              galaxy_master_to_galaxy_working:
 896+ FA0F 21 10 E0     		ld		hl,galaxy_master_seed
 897+ FA12 11 F8 E8     		ld		de,GalaxyWorkingSeed
 898+ FA15 18 EB        		jr		galaxy_copy_seed
 899+ FA17
 900+ FA17              galaxy_master_to_galaxy_naming:
 901+ FA17 21 10 E0     		ld		hl,galaxy_master_seed
 902+ FA1A 11 FE E8     		ld		de,GalaxyNamingSeed
 903+ FA1D 18 E3        		jr		galaxy_copy_seed
 904+ FA1F
 905+ FA1F              working_seed_to_galaxy_working:
 906+ FA1F 21 46 80             ld      hl,WorkingSeeds
 907+ FA22 11 F8 E8     		ld		de,GalaxyWorkingSeed
 908+ FA25 18 DB        		jr		galaxy_copy_seed
 909+ FA27
 910+ FA27              working_seed_to_galaxy_naming:
 911+ FA27 21 46 80             ld      hl,WorkingSeeds
 912+ FA2A 11 FE E8     		ld		de,GalaxyNamingSeed
 913+ FA2D 18 D3        		jr		galaxy_copy_seed
 914+ FA2F
 915+ FA2F              galaxy_ix_seed_to_galaxy_naming:
 916+ FA2F DD E5                push    ix
 917+ FA31 E1                   pop     hl
 918+ FA32 11 FE E8     		ld		de,GalaxyNamingSeed
 919+ FA35 18 CB        		jr		galaxy_copy_seed
 920+ FA37
 921+ FA37
 922+ FA37              galaxy_working_seed_to_galaxy_naming:
 923+ FA37 21 F8 E8             ld      hl,GalaxyWorkingSeed
 924+ FA3A 11 FE E8     		ld		de,GalaxyNamingSeed
 925+ FA3D 18 C3        		jr		galaxy_copy_seed
 926+ FA3F
 927+ FA3F              galaxy_working_seed_to_system:
 928+ FA3F 21 F8 E8     		ld		hl,GalaxyWorkingSeed
 929+ FA42 11 2E 80     		ld		de,SystemSeed
 930+ FA45 18 BB        		jr		galaxy_copy_seed
 931+ FA47
 932+ FA47              system_seed_to_galaxy_working:
 933+ FA47 21 2E 80     		ld		hl,SystemSeed
 934+ FA4A 11 F8 E8     		ld		de,GalaxyWorkingSeed
 935+ FA4D 18 B3        		jr		galaxy_copy_seed
 936+ FA4F
 937+ FA4F
 938+ FA4F              system_seed_to_galaxy_naming:
 939+ FA4F 21 2E 80     		ld		hl,SystemSeed
 940+ FA52 11 FE E8     		ld		de,GalaxyNamingSeed
 941+ FA55 18 AB        		jr		galaxy_copy_seed
 942+ FA57
 943+ FA57              ix_seed_to_galaxy_working:
 944+ FA57 DD E5                push    ix
 945+ FA59 E1                   pop     hl
 946+ FA5A 11 F8 E8     		ld		de,GalaxyWorkingSeed
 947+ FA5D 18 A3        		jr		galaxy_copy_seed
 948+ FA5F
 949+ FA5F              ; Here we twist just once rather than the usual4 for a system
 950+ FA5F 3A FE E8     NextGalaxyNamingSeed:   ld		a,(GalaxyNamingSeed)			; QQ15 ; x = a + c
 951+ FA62 B7                                   or		a							; clear carry flag
 952+ FA63 21 00 E9                             ld		hl,GalaxyNamingSeed+2			; hl -> qq+2 [c]
 953+ FA66 86                                   add		a,(hl)						; a= QQ15 [a]+ QQ15 [c]
 954+ FA67 47                                   ld		b,a							; partial sum lo [x]
 955+ FA68              ; y = b + d	+ carry
 956+ FA68 3A FF E8                             ld		a,(GalaxyNamingSeed+1)          ; [b]
 957+ FA6B 21 01 E9                             ld		hl,GalaxyNamingSeed+3			; HL -> QQ+3 [d] we don't inc as it affects carry)
 958+ FA6E 8E                                   adc		a,(hl)						; note add with carry
 959+ FA6F 4F                                   ld		c,a  						; c = QQ1+QQ3+carry bit parial sum hi
 960+ FA70 3A 00 E9                             ld		a,(GalaxyNamingSeed+2)
 961+ FA73 32 FE E8                             ld		(GalaxyNamingSeed+0),a			; copy qq152 to qq150 [a] = [c]
 962+ FA76 3A 01 E9                             ld		a,(GalaxyNamingSeed+3)
 963+ FA79 32 FF E8                             ld		(GalaxyNamingSeed+1),a			; copy qq153 to qq151 [b] = [d]
 964+ FA7C 3A 03 E9                             ld		a,(GalaxyNamingSeed+5)
 965+ FA7F 32 01 E9                             ld		(GalaxyNamingSeed+3),a			; copy qq155 to qq153 [d] = [f]
 966+ FA82 3A 02 E9                             ld		a,(GalaxyNamingSeed+4)
 967+ FA85 32 00 E9                             ld		(GalaxyNamingSeed+2),a			; copy qq154 to qq152 [c] = [e]
 968+ FA88 B7                                   or		a
 969+ FA89 78                                   ld		a,b
 970+ FA8A 21 00 E9                             ld		hl,GalaxyNamingSeed+2		    ; hl -> qq+2
 971+ FA8D 86                                   add	    a,(hl)
 972+ FA8E 32 02 E9                             ld		(GalaxyNamingSeed+4),a			; e = x + [c]
 973+ FA91 79                                   ld		a,c
 974+ FA92 21 01 E9                             ld		hl,GalaxyNamingSeed+3			; HL -> QQ+3 )we don't inc as it affects carry)
 975+ FA95 8E                                   adc		a,(hl)
 976+ FA96 32 03 E9                             ld		(GalaxyNamingSeed+5),a			; f = y + [d] + carry
 977+ FA99 C9                                   ret
 978+ FA9A
 979+ FA9A
 980+ FA9A 3A 03 E9     GalaxyNamingLoop:       ld		a,(GalaxyNamingSeed+5)	        ; a = first byte of name seed
 981+ FA9D E6 1F                                and 	$1F					            ; Keep bottom 5 bits only
 982+ FA9F FE 00                                cp		0					            ; 0 = skip 2 chars
 983+ FAA1 28 12                                jr		z,.SkipPhrase
 984+ FAA3 C6 0C                                add		a,12
 985+ FAA5 CB 27                                sla		a					            ; phrase = (a+12)*2
 986+ FAA7 21 A0 E8                             ld		hl,GalaxyName_digrams
 987+ FAAA ED 31                                add		hl,a
 988+ FAAC ED A0                                ldi
 989+ FAAE 7E                                   ld		a,(hl)
 990+ FAAF FE 3F                                cp		'?'
 991+ FAB1 28 02                                jr		z,.SkipPhrase
 992+ FAB3 ED A0        .AddExtra:              ldi
 993+ FAB5 D5           .SkipPhrase:            push	de
 994+ FAB6 CD 5F FA                             call	NextGalaxyNamingSeed
 995+ FAB9 D1                                   pop		de
 996+ FABA C9                                   ret
 997+ FABB
 998+ FABB              ; takes location in BC, finds seed and expands the name
 999+ FABB ED 43 5B E8  galaxy_name_at_bc:      ld      (GalaxyTargetSystem),bc
1000+ FABF CD 64 FC     galaxy_digram_seed:     call    galaxy_system_under_cursor
1001+ FAC2 FE 00                                cp      0
1002+ FAC4 C8                                   ret     z
1003+ FAC5
1004+ FAC5 CD 27 FA     GalaxyDigramWorkings:   call    working_seed_to_galaxy_naming
1005+ FAC8 C3 E0 FA                             jp      GalaxyDigramNamingSeed
1006+ FACB
1007+ FACB CD 17 FA     GalaxyDigramSeed:       call    galaxy_master_to_galaxy_naming
1008+ FACE C3 E0 FA                             jp      GalaxyDigramNamingSeed
1009+ FAD1
1010+ FAD1 CD 37 FA     GalaxyDigramWorkingSeed:call    galaxy_working_seed_to_galaxy_naming
1011+ FAD4 C3 E0 FA                             jp      GalaxyDigramNamingSeed
1012+ FAD7
1013+ FAD7 CD 2F FA     GalaxyDigramWIXSeed:    call    galaxy_ix_seed_to_galaxy_naming
1014+ FADA C3 E0 FA                             jp      GalaxyDigramNamingSeed
1015+ FADD
1016+ FADD CD 4F FA     SystemGetDigramSeed:    call    system_seed_to_galaxy_naming
1017+ FAE0
1018+ FAE0 11 7F E8     GalaxyDigramNamingSeed: ld		de,GalaxyExpandedName
1019+ FAE3 06 03        GalaxyDigramToDE:       ld		b,3
1020+ FAE5 3A FE E8                             ld		a,(GalaxyNamingSeed)
1021+ FAE8 E6 40                                and		$40
1022+ FAEA 28 03                                jr		z,.SmallSizeName
1023+ FAEC CD 9A FA     .LargeSizeName:         call	GalaxyNamingLoop
1024+ FAEF CD 9A FA     .SmallSizeName:         call	GalaxyNamingLoop
1025+ FAF2 CD 9A FA                             call	GalaxyNamingLoop
1026+ FAF5 CD 9A FA                             call	GalaxyNamingLoop
1027+ FAF8 EB           .DoneName:              ex		de,hl
1028+ FAF9 36 00                                ld		(hl),0
1029+ FAFB EB                                   ex		de,hl
1030+ FAFC AF                                   xor     a
1031+ FAFD 3D                                   dec     a
1032+ FAFE C9                                   ret
1033+ FAFF              ;reorte X 13 Y 97
1034+ FAFF
1035+ FAFF              ;----------------------------------------------------------------------------------------------------------------------------------
1036+ FAFF 3A 5D E8     is_system_found:        ld      a,(GalaxySearchLength)
1037+ FB02                                      ;dec     a                       ; as we won't check the /0 just first match
1038+ FB02 4F                                   ld      c,a                     ; will always be max of 32 as that is what length routine does
1039+ FB03 06 00                                ld      b,0                     ; so we can use cpir
1040+ FB05 11 5E E8     .readyToSearch:         ld      de,GalaxySearchString   ; hl = string we are serching
1041+ FB08 21 7F E8                             ld      hl,GalaxyExpandedName   ; de = the expanded galaxy name
1042+ FB0B 7E           .searchLoop:            ld      a,(hl)                  ; if the string is too short then maybe there is a longer one to find
1043+ FB0C                                      JumpIfAIsZero   .noMatch        ; but
1043+ FB0C A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
1043+ FB0D CA 1B FB    >                        jp	    z, .noMatch
1044+ FB10 1A                                   ld      a,(de)                  ; get the character to search for
1045+ FB11 ED A1                                cpi                             ; compare with value in A from HL
1046+ FB13 20 06                                jr      nz,.noMatch
1047+ FB15 13                                   inc     de                      ; move to next search character
1048+ FB16 E2 1E FB                             jp      po, .matched            ; if c = 0 then we have hit the bingpot
1049+ FB19 18 F0                                jr      .searchLoop             ; else keep looping
1050+ FB1B              .noMatch:               SetAFalse
1050+ FB1B 3E FF       >                        ld      a,$FF
1051+ FB1D C9                                   ret
1052+ FB1E              .matched:               SetATrue
1052+ FB1E AF          >                        xor     a
1053+ FB1F C9                                   ret
1054+ FB20
1055+ FB20 21 5E E8     set_galaxy_search_len:  ld      hl,GalaxySearchString
1056+ FB23 06 00                                ld      b,0
1057+ FB25 0E 20                                ld      c,32                    ; limiter for missing /0
1058+ FB27 7E           .SearchLoop:            ld      a,(hl)
1059+ FB28                                      JumpIfAIsZero .foundLength
1059+ FB28 A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
1059+ FB29 CA 34 FB    >                        jp	    z, .foundLength
1060+ FB2C 04                                   inc     b
1061+ FB2D 0D                                   dec     c
1062+ FB2E 28 04                                jr      z,.foundLength
1063+ FB30 23                                   inc     hl
1064+ FB31 C3 27 FB                             jp      .SearchLoop
1065+ FB34 78           .foundLength:           ld      a,b
1066+ FB35 32 5D E8                             ld      (GalaxySearchLength),a
1067+ FB38 C9                                   ret
1068+ FB39
1069+ FB39              ; find system by searching for GalaxySearchString
1070+ FB39 CD 20 FB     find_system_by_name:    call    set_galaxy_search_len
1071+ FB3C AF                                   xor     a
1072+ FB3D 32 BB 7F                             ld      (XSAV),a
1073+ FB40 DD 21 16 E0                          ld      ix,galaxy_data
1074+ FB44 CD 57 FA     .nextSystem:            call    ix_seed_to_galaxy_working
1075+ FB47 CD D1 FA                             call    GalaxyDigramWorkingSeed
1076+ FB4A CD FF FA                             call    is_system_found
1077+ FB4D                                      JumpIfATrue .FoundAtIX
1077+ FB4D A7          >                        and     a
1077+ FB4E CA 6A FB    >                        jp      z, .FoundAtIX
1078+ FB51 3A BB 7F     .notFoundYet:           ld      a,(XSAV)
1079+ FB54 3D                                   dec     a
1080+ FB55 28 10                                jr      z,.NoMoreSystems
1081+ FB57 32 BB 7F     .moreToSearch:          ld      (XSAV),a
1082+ FB5A DD E5                                push    ix
1083+ FB5C E1                                   pop     hl
1084+ FB5D ED 34 08 00                          add     hl,8
1085+ FB61 E5                                   push    hl
1086+ FB62 DD E1                                pop     ix
1087+ FB64 C3 44 FB                             jp      .nextSystem
1088+ FB67 3E FF        .NoMoreSystems:         ld      a,$FF
1089+ FB69 C9                                   ret
1090+ FB6A CD 57 FA     .FoundAtIX              call    ix_seed_to_galaxy_working
1091+ FB6D C9                                   ret
1092+ FB6E              ;----------------------------------------------------------------------------------------------------------------------------------
1093+ FB6E 00 00        nearestfound:           DW 0
1094+ FB70              ; In here de carries current nearest and loads into nearest found
1095+ FB70              ; does a basic distance check for x then y each under threshold, then does x+y under threshold  jsut in case we have an extreme like 0 x and high dist y
1096+ FB70 DD 21 16 E0  find_nearest_to_bc:     ld      ix,galaxy_data
1097+ FB74 FD 26 00                             ld      iyh,0
1098+ FB77 FD 2E 78                             ld      iyl,120
1099+ FB7A ED 43 6E FB                          ld      (nearestfound),bc
1100+ FB7E DD 7E 03     find_nearest_loop:      ld      a,(ix+3)                        ;
1101+ FB81 5F                                   ld      e,a                             ; e= current seed x
1102+ FB82                                      JumpIfALTNusng c, nearestXPosLT         ; not we need to know if its e - c or c - e we coudl do 2's compliement of course
1102+ FB82 B9          >                        cp      c
1102+ FB83 DA 94 FB    >                        jp		c, nearestXPosLT
1103+ FB86 D5           nearestXPosGTE:         push    de                              ;
1104+ FB87 26 00                                ld      h,0                             ;
1105+ FB89 6F                                   ld      l,a                             ; hl = seed x
1106+ FB8A 16 00                                ld      d,0                             ;
1107+ FB8C 59                                   ld      e,c                             ; de = nearest x
1108+ FB8D B7                                   or      a                               ;
1109+ FB8E ED 52                                sbc     hl,de                           ; hl = distance between the two
1110+ FB90 D1                                   pop     de
1111+ FB91 C3 9E FB                             jp      nearestDistXPos
1112+ FB94 D5           nearestXPosLT:          push    de                              ;
1113+ FB95 26 00                                ld      h,0                             ;
1114+ FB97 69                                   ld      l,c                             ; hl = nearest x
1115+ FB98 16 00                                ld      d,0                             ;
1116+ FB9A B7                                   or      a                               ; de = seed x
1117+ FB9B ED 52                                sbc     hl,de                           ;
1118+ FB9D D1                                   pop     de                              ; hl = distance between the two
1119+ FB9E 7D           nearestDistXPos:        ld      a,l                             ; so l = abs distance as does a
1120+ FB9F FD BD                                cp      iyl                             ; under initial threshold?
1121+ FBA1 30 3D                                jr      nc,find_nearest_miss            ; no so its a miss
1122+ FBA3               ;DEBUG                       ld      l,a                             ; l = distance (we can drop thsi as it was done above!)
1123+ FBA3 DD 7E 01                             ld      a,(ix+1)                        ;
1124+ FBA6 57                                   ld      d,a                             ; d = seed y
1125+ FBA7                                      JumpIfALTNusng b, nearestYPosLT         ; determine abs calc
1125+ FBA7 B8          >                        cp      b
1125+ FBA8 DA BC FB    >                        jp		c, nearestYPosLT
1126+ FBAB E5           nearestYPosGTE:         push    hl                              ; save current x distance
1127+ FBAC D5                                   push    de                              ;
1128+ FBAD 26 00                                ld      h,0                             ;
1129+ FBAF 6F                                   ld      l,a                             ; hl = seed y
1130+ FBB0 16 00                                ld      d,0                             ;
1131+ FBB2 58                                   ld      e,b                             ; de = nearest y
1132+ FBB3 B7                                   or      a                               ;
1133+ FBB4 ED 52                                sbc     hl,de                           ; hl = distance between the two
1134+ FBB6 7D                                   ld      a,l
1135+ FBB7 D1                                   pop     de
1136+ FBB8 E1                                   pop     hl
1137+ FBB9 C3 CA FB                             jp      nearestDistYPos
1138+ FBBC E5           nearestYPosLT:          push    hl                              ; save current x distance
1139+ FBBD D5                                   push    de                              ;
1140+ FBBE 26 00                                ld      h,0                             ;
1141+ FBC0 68                                   ld      l,b                             ; hl = nearest y
1142+ FBC1 5A                                   ld      e,d                             ;
1143+ FBC2 16 00                                ld      d,0                             ; de = seed y
1144+ FBC4 B7                                   or      a                               ;
1145+ FBC5 ED 52                                sbc     hl,de                           ; hl = distance between the two
1146+ FBC7 7D                                   ld      a,l
1147+ FBC8 D1                                   pop     de
1148+ FBC9 E1                                   pop     hl                              ; now we get distance in l back into hl, distance y is in a
1149+ FBCA FD BD        nearestDistYPos:        cp      iyl                             ; under initial threshold?
1150+ FBCC 30 12                                jr      nc, find_nearest_miss
1151+ FBCE 26 00                                ld      h,0                             ; hl = distance for x
1152+ FBD0 ED 31                                add     hl,a                            ; adding distance y
1153+ FBD2 7D                                   ld      a,l                             ; and copy it to l
1154+ FBD3 FD BD                                cp      iyl                             ; is the pair under distance
1155+ FBD5 30 09                                jr      nc, find_nearest_miss           ;
1156+ FBD7 FD 6F        nearest_found_a_hit:    ld      iyl,a                           ; so we have a hit
1157+ FBD9 ED 53 6E FB                          ld      (nearestfound),de               ;
1158+ FBDD                                      ReturnIfALTNusng 2                      ; exact match bail out, note 1 can be an exact match due to Y axis, as we are looking at seed pos then this is accurate enough and we won't hit dx 1 and dy 0 hopefully in any galaxy :)
1158+ FBDD FE 02       >                        cp    2
1158+ FBDF D8          >                        ret	 c
1159+ FBE0 DD E5        find_nearest_miss:      push     ix
1160+ FBE2 E1                                   pop      hl
1161+ FBE3 ED 34 08 00                          add      hl,8
1162+ FBE7 E5                                   push     hl
1163+ FBE8 DD E1                                pop      ix
1164+ FBEA FD 25                                dec     iyh
1165+ FBEC FD 7C                                ld      a,iyh
1166+ FBEE                                      JumpIfAIsNotZero find_nearest_loop
1166+ FBEE A7          >                        and     a
1166+ FBEF C2 7E FB    >                        jp	    nz,find_nearest_loop
1167+ FBF2 ED 4B 6E FB                          ld      bc ,(nearestfound)              ; if we hit here then after searching we have found a nearest
1168+ FBF6 C9                                   ret
1169+ FBF7              ;----------------------------------------------------------------------------------------------------------------------------------
1170+ FBF7              ; Does a sqare root distance
1171+ FBF7 16 00        galaxy_find_distance:   ld      d,0
1172+ FBF9 26 00                                ld      h,0
1173+ FBFB 3A 57 E8                             ld      a,(GalaxyPresentSystem)
1174+ FBFE 47                                   ld      b,a
1175+ FBFF 3A 59 E8                             ld      a,(GalaxyDestinationSystem)
1176+ FC02 B8                                   cp      b
1177+ FC03 20 0E                                jr      nz,.NotSame
1178+ FC05 C5           .XSame:                 push    bc
1179+ FC06 F5                                   push    af
1180+ FC07 3A 58 E8                             ld      a,(GalaxyPresentSystem+1)
1181+ FC0A 47                                   ld      b,a
1182+ FC0B 3A 5A E8                             ld      a,(GalaxyDestinationSystem+1)
1183+ FC0E B8                                   cp      b
1184+ FC0F C1                                   pop     bc
1185+ FC10 F1                                   pop     af
1186+ FC11 28 49                                jr      z,.ZeroDistance
1187+ FC13 30 08        .NotSame:               jr      nc,.DestinationGTEPresentX
1188+ FC15 68           .DestinationLTPresentX: ld      l,b
1189+ FC16 5F                                   ld      e,a
1190+ FC17 B7                                   or      a
1191+ FC18 ED 52                                sbc     hl,de
1192+ FC1A C3 22 FC                             jp      .SquareXDist
1193+ FC1D 6F           .DestinationGTEPresentX:ld      l,a
1194+ FC1E 58                                   ld      e,b
1195+ FC1F B7                                   or      a
1196+ FC20 ED 52                                sbc     hl,de
1197+ FC22 55           .SquareXDist:           ld      d,l
1198+ FC23 5D                                   ld      e,l
1199+ FC24 ED 30                                mul
1200+ FC26 3A 58 E8     .CalcYDistSq            ld      a,(GalaxyPresentSystem+1)
1201+ FC29 47                                   ld      b,a
1202+ FC2A 3A 5A E8                             ld      a,(GalaxyDestinationSystem+1)
1203+ FC2D B8                                   cp      b
1204+ FC2E 30 0B                                jr      nc,.DestinationGTEPresentY
1205+ FC30 4F           .DestinationLTPresentY: ld      c,a
1206+ FC31 68                                   ld      l,b
1207+ FC32 06 00                                ld      b,0
1208+ FC34 26 00                                ld      h,0
1209+ FC36 ED 42                                sbc     hl,bc
1210+ FC38 C3 43 FC                             jp      .DestinationYDone
1211+ FC3B 48           .DestinationGTEPresentY:ld      c,b
1212+ FC3C 6F                                   ld      l,a
1213+ FC3D 06 00                                ld      b,0
1214+ FC3F 26 00                                ld      h,0
1215+ FC41 ED 42                                sbc     hl,bc
1216+ FC43 CB 2D        .DestinationYDone:      sra     l                   ; divide L by 2 for galaxy size
1217+ FC45 7D                                   ld      a,l
1218+ FC46 EB                                   ex      de,hl
1219+ FC47 57                                   ld      d,a
1220+ FC48 5F                                   ld      e,a
1221+ FC49 ED 30        .SquareYDist:           mul
1222+ FC4B 19                                   add     hl,de
1223+ FC4C EB                                   ex      de,hl
1224+ FC4D CD B2 93                             call    asm_sqrt            ; distance via pythagoras in hl
1225+ FC50                                      ShiftHLLeft1
1225+ FC50 CB 25       >			   sla l
1225+ FC52 CB 14       >			   rl  h
1226+ FC54                                      ShiftHLLeft1                ; Multiply by 4 to get distance
1226+ FC54 CB 25       >			   sla l
1226+ FC56 CB 14       >			   rl  h
1227+ FC58 22 7A 80                             ld      (Distance),hl       ; Distance is now caulated distance
1228+ FC5B C9                                   ret
1229+ FC5C AF           .ZeroDistance:          xor     a
1230+ FC5D 32 7A 80                             ld      (Distance),a
1231+ FC60 32 7B 80                             ld      (Distance+1),a
1232+ FC63 C9                                   ret
1233+ FC64              ;----------------------------------------------------------------------------------------------------------------------------------
1234+ FC64              ; Find the systems pointed to by GalaxyTargetSystem and loads it into WorkingSeeds
1235+ FC64              ; this needs to chagne to galaxyresultseed or galayxworkingseed
1236+ FC64 AF           galaxy_system_under_cursor:xor     a
1237+ FC65 32 BB 7F                             ld		(XSAV),a
1238+ FC68 DD 21 16 E0                          ld      ix,galaxy_data
1239+ FC6C 2A 5B E8     .GCCounterLoop:         ld      hl,(GalaxyTargetSystem)
1240+ FC6F DD E5                                push    ix
1241+ FC71 7D                                   ld      a,l
1242+ FC72 DD BE 03                             cp      (ix+3)                          ; seed x
1243+ FC75 20 14                                jr      nz,.ItsNotThisX
1244+ FC77 7C                                   ld      a,h
1245+ FC78 DD BE 01                             cp      (ix+1)                          ; seed x
1246+ FC7B 20 0E        .FoundSystem:           jr      nz,.ItsNotThisX
1247+ FC7D DD E5                                push    ix
1248+ FC7F E1                                   pop     hl
1249+ FC80 11 46 80                             ld      de,WorkingSeeds                 ;' copy to wkring Seeds
1250+ FC83 CD 45 86                             call    copy_seed
1251+ FC86 3E FF                                ld      a,$FF
1252+ FC88 DD E1                                pop     ix
1253+ FC8A C9                                   ret
1254+ FC8B E1           .ItsNotThisX:           pop     hl
1255+ FC8C ED 34 08 00                          add     hl,8
1256+ FC90 E5                                   push    hl
1257+ FC91 DD E1                                pop     ix
1258+ FC93 3A BB 7F                             ld		a,(XSAV)
1259+ FC96 3D                                   dec		a
1260+ FC97 32 BB 7F                             ld      (XSAV),a
1261+ FC9A FE 00                                cp		0
1262+ FC9C C8                                   ret		z
1263+ FC9D 18 CD                                jr		.GCCounterLoop
1264+ FC9F              ;----------------------------------------------------------------------------------------------------------------------------------
1265+ FC9F 21 2E 80     SeedGalaxy:             ld      hl,SystemSeed                   ; First copy system seed to galaxy master
1266+ FCA2 11 10 E0                             ld      de,galaxy_master_seed           ; .
1267+ FCA5 ED A0                                ldi                                     ; .
1268+ FCA7 ED A0                                ldi                                     ; .
1269+ FCA9 ED A0                                ldi                                     ; .
1270+ FCAB ED A0                                ldi                                     ; .
1271+ FCAD ED A0                                ldi                                     ; .
1272+ FCAF ED A0                                ldi                                     ; .
1273+ FCB1 DD 21 16 E0                          ld      ix,galaxy_data                  ; Generate system seed data for each planet
1274+ FCB5 AF                                   xor		a                               ; .
1275+ FCB6 32 BB 7F                             ld		(XSAV),a                        ; .
1276+ FCB9 DD E5        SeedGalaxyLoop:         push    ix                              ; .
1277+ FCBB D1                                   pop     de                              ; .
1278+ FCBC 21 2E 80                             ld      hl,SystemSeed                   ; .
1279+ FCBF CD 45 86                             call    copy_seed                       ; .
1280+ FCC2 DD E5                                push    ix                              ; .
1281+ FCC4 E1                                   pop     hl                              ; .
1282+ FCC5 ED 34 08 00                          add     hl,8                            ; .
1283+ FCC9 E5                                   push    hl                              ; .
1284+ FCCA DD E1                                pop     ix                              ; .
1285+ FCCC CD 7A 86                             call    next_system_seed                ; .
1286+ FCCF 3A BB 7F                             ld		a,(XSAV)                        ; .
1287+ FCD2 3D                                   dec		a                               ; .
1288+ FCD3 FE 00                                cp		0                               ; .
1289+ FCD5 C8                                   ret		z                               ; .
1290+ FCD6 32 BB 7F                             ld		(XSAV),a                        ; .
1291+ FCD9 18 DE                                jr      SeedGalaxyLoop                  ; .
1292+ FCDB C9                                   ret
1293+ FCDC
1294+ FCDC              GalaxyBankSize   EQU $ - galaxy_page_marker
1295+ FCDC
# file closed: ./Universe/Galaxy/galaxy_data.asm
1069  FCDC                                  DISPLAY "Bank ",BankGalaxyData0," - Bytes free ",/D, $2000 - ($- GalaxyDataAddr), " - BankGalaxyData0"
1070  FCDC                                  ASSERT $-GalaxyDataAddr <8912, Bank code leaks over 8K boundary
1071  FCDC              ; Bank 92  ------------------------------------------------------------------------------------------------------------------------
1072  FCDC                                  SLOT    GalaxyDataAddr
1073  FCDC                                  PAGE    BankGalaxyData1
1074  FCDC                                  ORG GalaxyDataAddr, BankGalaxyData1
1075  E000 FF           GALAXYDATABlock1:   DB $FF
1076  E001 00 00 00...                      DS $1FFF                 ; just allocate 8000 bytes for now
1077  0000                                  DISPLAY "Bank ",BankGalaxyData1," - Bytes free ",/D, $2000 - ($- GalaxyDataAddr), " - BankGalaxyData1"
1078  0000                                  ASSERT $-GalaxyDataAddr <8912, Bank code leaks over 8K boundary
1079  0000              ; Bank 93  ------------------------------------------------------------------------------------------------------------------------
1080  0000                                  SLOT    GalaxyDataAddr
1081  0000                                  PAGE    BankGalaxyData2
1082  0000                                  ORG GalaxyDataAddr, BankGalaxyData2
1083  E000 FF           GALAXYDATABlock2:   DB $FF
1084  E001 00 00 00...                      DS $1FFF                 ; just allocate 8000 bytes for now
1085  0000                                  DISPLAY "Bank ",BankGalaxyData2," - Bytes free ",/D, $2000 - ($- GalaxyDataAddr), " - BankGalaxyData2"
1086  0000                                  ASSERT $-GalaxyDataAddr <8912, Bank code leaks over 8K boundary
1087  0000              ; Bank 94  ------------------------------------------------------------------------------------------------------------------------
1088  0000                                  SLOT    GalaxyDataAddr
1089  0000                                  PAGE    BankGalaxyData3
1090  0000                                  ORG GalaxyDataAddr, BankGalaxyData3
1091  E000 FF           GALAXYDATABlock3:   DB $FF
1092  E001 00 00 00...                      DS $1FFF                 ; just allocate 8000 bytes for now
1093  0000                                  DISPLAY "Bank ",BankGalaxyData3," - Bytes free ",/D, $2000 - ($- GalaxyDataAddr), " - BankGalaxyData3"
1094  0000                                  ASSERT $-GalaxyDataAddr <8912, Bank code leaks over 8K boundary
1095  0000              ; Bank 95  ------------------------------------------------------------------------------------------------------------------------
1096  0000                                  SLOT    GalaxyDataAddr
1097  0000                                  PAGE    BankGalaxyData4
1098  0000                                  ORG GalaxyDataAddr, BankGalaxyData4
1099  E000 FF           GALAXYDATABlock4:   DB $FF
1100  E001 00 00 00...                      DS $1FFF                 ; just allocate 8000 bytes for now
1101  0000                                  DISPLAY "Bank ",BankGalaxyData4," - Bytes free ",/D, $2000 - ($- GalaxyDataAddr), " - BankGalaxyData4"
1102  0000                                  ASSERT $-GalaxyDataAddr <8912, Bank code leaks over 8K boundary
1103  0000              ; Bank 96  ------------------------------------------------------------------------------------------------------------------------
1104  0000                                  SLOT    GalaxyDataAddr
1105  0000                                  PAGE    BankGalaxyData5
1106  0000                                  ORG GalaxyDataAddr,BankGalaxyData5
1107  E000 FF           GALAXYDATABlock5:   DB $FF
1108  E001 00 00 00...                      DS $1FFF                 ; just allocate 8000 bytes for now
1109  0000                                  DISPLAY "Bank ",BankGalaxyData5," - Bytes free ",/D, $2000 - ($- GalaxyDataAddr), " - BankGalaxyData5"
1110  0000                                  ASSERT $-GalaxyDataAddr <8912, Bank code leaks over 8K boundary
1111  0000              ; Bank 97  ------------------------------------------------------------------------------------------------------------------------
1112  0000                                  SLOT    GalaxyDataAddr
1113  0000                                  PAGE    BankGalaxyData6
1114  0000                                  ORG GalaxyDataAddr,BankGalaxyData6
1115  E000 FF           GALAXYDATABlock6:   DB $FF
1116  E001 00 00 00...                      DS $1FFF                 ; just allocate 8000 bytes for now
1117  0000                                  DISPLAY "Bank ",BankGalaxyData6," - Bytes free ",/D, $2000 - ($- GalaxyDataAddr), " - BankGalaxyData6"
1118  0000                                  ASSERT $-GalaxyDataAddr <8912, Bank code leaks over 8K boundary
1119  0000              ; Bank 98  ------------------------------------------------------------------------------------------------------------------------
1120  0000                                  SLOT    GalaxyDataAddr
1121  0000                                  PAGE    BankGalaxyData7
1122  0000                                  ORG GalaxyDataAddr,BankGalaxyData7
1123  E000 FF           GALAXYDATABlock7:   DB $FF
1124  E001 00 00 00...                      DS $1FFF                 ; just allocate 8000 bytes for now
1125  0000                                  DISPLAY "Bank ",BankGalaxyData7," - Bytes free ",/D, $2000 - ($- GalaxyDataAddr), " - BankGalaxyData7"
1126  0000                                  ASSERT $-GalaxyDataAddr <8912, Bank code leaks over 8K boundary
1127  0000              ; Bank 99  ------------------------------------------------------------------------------------------------------------------------
1128  0000                                  SLOT    MathsTablesAddr
1129  0000                                  PAGE    BankMathsTables
1130  0000                                  ORG     MathsTablesAddr,BankMathsTables
1131  0000                                  INCLUDE "./Maths/logmaths.asm"
# file opened: ./Maths/logmaths.asm
   1+ 0000 4C 6F 67 4D  logmaths_page_marker    DB "LogMaths   PG99"
   1+ 0004 61 74 68 73
   1+ 0008 20 20 20 50
   1+ 000C 47 39 39
   2+ 000F
   3+ 000F EB           AntiLogHL:              ex      de,hl
   4+ 0010 21 83 05                             ld      hl,LogReverseHighByte
   5+ 0013 01 14 02                             ld      bc,LogReverseTableLen
   6+ 0016 7A                                   ld      a,d
   7+ 0017 ED A1        .SearchLoop:            cpi                                     ; first pass index into high byte
   8+ 0019 28 03                                jr      z,.FoundHighByte
   9+ 001B 23                                   inc     hl
  10+ 001C 18 F9                                jr      .SearchLoop
  11+ 001E 23           .FoundHighByte:         inc     hl                              ; now we have high double it for table of words
  12+ 001F 7E                                   ld      a,(hl)                          ; .
  13+ 0020 21 83 03                             ld      hl,LogTable                     ; .
  14+ 0023 ED 31                                add     hl,a                            ; .
  15+ 0025 ED 31                                add     hl,a                            ; .
  16+ 0027 7A           .LookForLowByteLoop:    ld      a,d                             ; search for low byte or change in high byte
  17+ 0028 BE                                   cp      (hl)
  18+ 0029 20 09                                jr      nz,.SkippedPastHigh
  19+ 002B 23                                   inc     hl
  20+ 002C 7B                                   ld      a,e
  21+ 002D                                      JumpIfAGTENusng (hl), .SkippedPastLow
  21+ 002D BE          >                        cp     (hl)
  21+ 002E D2 35 00    >                        jp		nc,.SkippedPastLow
  22+ 0031 C3 27 00                             jp      .LookForLowByteLoop
  23+ 0034
  24+ 0034 2B           .SkippedPastHigh:       dec     hl                              ; for high we are on next word
  25+ 0035 2B           .SkippedPastLow:        dec     hl                              ; for low we are no next byte
  26+ 0036 EB                                   ex      de,hl                           ; move address to de for subtract
  27+ 0037 21 83 03                             ld      hl,LogTable                     ; subtract from log table address
  28+ 003A                                      ClearCarryFlag
  28+ 003A B7          >                        or a
  29+ 003B ED 52                                sbc     hl,de                           ; so nwo we have nbr of words, i.e anito log * 2
  30+ 003D                                      ShiftHLRight1                           ; now must be >= 255
  30+ 003D CB 3C       >			   srl h
  30+ 003F CB 1D       >			   rr  l
  31+ 0041 7D                                   ld      a,l
  32+ 0042 C9                                   ret
  33+ 0043
  34+ 0043              ; calculates R = 256 * A / Q
  35+ 0043              Requ256mulAdivQ_Log:    JumpIfAGTEMemusng varQ, LL2             ; If A >= Q, then the answer will not fit in one byte, return 255
  35+ 0043 21 B6 7F    >                        ld      hl,varQ
  35+ 0046 BE          >                        cp      (hl)
  35+ 0047 D2 BB 00    >                        jp		nc,LL2
  36+ 004A FD 6F                                ld      iyl,a                           ; STA widget             \ Store A in widget, so now widget = argument A
  37+ 004C DD 67                                ld      ixh,a                           ; TAX                    \ Transfer A into X, so now X = argument A
  38+ 004E                                      JumpIfAIsZero LLfix                     ; If A = 0, jump to LLfix to return a result of 0
  38+ 004E A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
  38+ 004F CA B7 00    >                        jp	    z, LLfix
  39+ 0052              ; calculate log(A) - log(Q), first adding the low bytes (from the logL table), and then the high bytes (from the log table)
  40+ 0052              ; this determins if we branch to antilog or antilogodd for negative value
  41+ 0052 21 83 03     .GetLogA:               ld      hl,LogTable                     ; LDA logL,X             \ e = low byte of log(X)
  42+ 0055 ED 31                                add     hl,a                            ; have to add twice as ist 8 bit so cant shift
  43+ 0057 ED 31                                add     hl,a                            ;
  44+ 0059 5E                                   ld      e,(hl)                          ;
  45+ 005A 23                                   inc     hl                              ;
  46+ 005B 56                                   ld      d,(hl)                          ; de = logH[X] logL[X]
  47+ 005C 21 83 03                             ld      hl,LogTable                     ;
  48+ 005F 3A B6 7F                             ld      a,(varQ)                        ;
  49+ 0062 ED 31                                add     hl,a                            ;
  50+ 0064 ED 31                                add     hl,a                            ;
  51+ 0066 4E                                   ld      c,(hl)                          ;
  52+ 0067 23                                   inc     hl                              ;
  53+ 0068 46                                   ld      b,(hl)                          ; bc = logH[X] logL[X]
  54+ 0069 7B                                   ld      a,e                             ; SBC logL,X             \       = low byte of log(A) - low byte of log(Q)
  55+ 006A                                      ClearCarryFlag                          ; .
  55+ 006A B7          >                        or a
  56+ 006B 99                                   sbc     a,c                             ; .
  57+ 006C D2 93 00                             jp      nc,NoCarryBranch
  58+ 006F FA 83 00     CarryBranch:            jp      m,.noddlog                     ; BMI noddlog            \ If the subtraction is negative, jump to noddlog
  59+ 0072 5F                                   ld      e,a                             ; save logL[A] - logL[Q] in e, probabyl dont need this
  60+ 0073 7A                                   ld      a,d                             ; a = logH(a)
  61+ 0074              .CarryFlagPoint1:       SetCarryFlag
  61+ 0074 37          >                        scf
  62+ 0075 98                                   sbc     a,b                             ; a = high byte of logH[A] - logH[Q] note carry is not affected from prev sbc
  63+ 0076 D2 BB 00                             jp      nc,LL2                          ; If the subtraction fitted into one byte and didn't underflow, then log(A) - log(Q) < 256, so we jump to LL2 return a result of 255
  64+ 0079 21 83 01                             ld      hl,AntiLogTable                 ; TAX                    \ Otherwise we return the A-th entry from the antilog
  65+ 007C ED 31                                add     hl,a                            ; LDA antilog,X          \ table
  66+ 007E 7E                                   ld      a,(hl)
  67+ 007F 32 B7 7F                             ld      (varR),a                        ; STA R                  \ Set the result in R to the value of A
  68+ 0082 C9                                   ret                                     ; RTS                    \ Return from the subroutine
  69+ 0083 7A           .noddlog:               ld      a,d                             ; LDX widget             \ Set d = high byte of log(A) - high byte of log(Q)
  70+ 0084              .CarryFlagPoint2:       SetCarryFlag
  70+ 0084 37          >                        scf
  71+ 0085 98                                   sbc     a,b
  72+ 0086 D2 BB 00                             jp      nc,LL2                          ; BCS LL2                \ If the subtraction fitted into one byte and didn't underflow, then log(A) - log(Q) < 256, so we jump to LL2 to return a result of 255
  73+ 0089 21 83 02                             ld      hl, AnitLogODDTable             ; TAX                    \ Otherwise we return the A-th entry from the antilogODD
  74+ 008C ED 31                                add     hl,a                            ; LDA antilogODD,X       \ table
  75+ 008E 7E                                   ld      a,(hl)
  76+ 008F 32 B7 7F                             ld      (varR),a                        ; STA R                  \ Set the result in R to the value of A
  77+ 0092 C9                                   ret                                     ; RTS                    \ Return from the subroutine
  78+ 0093 FA A7 00     NoCarryBranch:          jp      m,.noddlog                     ; BMI noddlog            \ If the subtraction is negative, jump to noddlog
  79+ 0096 5F                                   ld      e,a                             ; save logL[A] - logL[Q] in e, probabyl dont need this
  80+ 0097 7A                                   ld      a,d                             ; a = logH(a)
  81+ 0098              .CarryFlagPoint1:       ClearCarryFlag
  81+ 0098 B7          >                        or a
  82+ 0099 98                                   sbc     a,b                             ; a = high byte of logH[A] - logH[Q] note carry is not affected from prev sbc
  83+ 009A D2 BB 00                             jp      nc,LL2                          ; If the subtraction fitted into one byte and didn't underflow, then log(A) - log(Q) < 256, so we jump to LL2 return a result of 255
  84+ 009D 21 83 01                             ld      hl,AntiLogTable                 ; TAX                    \ Otherwise we return the A-th entry from the antilog
  85+ 00A0 ED 31                                add     hl,a                            ; LDA antilog,X          \ table
  86+ 00A2 7E                                   ld      a,(hl)
  87+ 00A3 32 B7 7F                             ld      (varR),a                        ; STA R                  \ Set the result in R to the value of A
  88+ 00A6 C9                                   ret                                     ; RTS                    \ Return from the subroutine
  89+ 00A7 7A           .noddlog:               ld      a,d                             ; LDX widget             \ Set d = high byte of log(A) - high byte of log(Q)
  90+ 00A8              .CarryFlagPoint2:       ClearCarryFlag
  90+ 00A8 B7          >                        or a
  91+ 00A9 98                                   sbc     a,b
  92+ 00AA D2 BB 00                             jp      nc,LL2                          ; BCS LL2                \ If the subtraction fitted into one byte and didn't underflow, then log(A) - log(Q) < 256, so we jump to LL2 to return a result of 255
  93+ 00AD 21 83 02                             ld      hl, AnitLogODDTable             ; TAX                    \ Otherwise we return the A-th entry from the antilogODD
  94+ 00B0 ED 31                                add     hl,a                            ; LDA antilogODD,X       \ table
  95+ 00B2 7E                                   ld      a,(hl)
  96+ 00B3 32 B7 7F                             ld      (varR),a                        ; STA R                  \ Set the result in R to the value of A
  97+ 00B6 C9                                   ret                                     ; RTS                    \ Return from the subroutine
  98+ 00B7 32 B7 7F     LLfix:                  ld      (varR),a                        ; Set the result in R to the value of A
  99+ 00BA C9                                   ret                                     ; RTS                    \ Return from the subroutine
 100+ 00BB 3E FF        LL2:                    ld      a,$FF
 101+ 00BD 32 B7 7F                             ld      (varR),a
 102+ 00C0 C9                                   ret
 103+ 00C1
 104+ 00C1
 105+ 00C1              AEquAmul256DivBLogLT:   JumpIfAIsZero   .ResultIsZero
 105+ 00C1 A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
 105+ 00C2 CA EA 00    >                        jp	    z, .ResultIsZero
 106+ 00C5 21 83 03                             ld      hl,LogTable                     ; de = log a
 107+ 00C8 ED 31                                add     hl,a                            ; .
 108+ 00CA ED 31                                add     hl,a                            ; .
 109+ 00CC 5E                                   ld      e,(hl)                          ; .
 110+ 00CD 23                                   inc     hl                              ; .
 111+ 00CE 56                                   ld      d,(hl)                          ; .
 112+ 00CF 21 83 03                             ld      hl,LogTable                     ; hl = log b
 113+ 00D2 78                                   ld      a,b                             ; .
 114+ 00D3 ED 31                                add     hl,a                            ; .
 115+ 00D5 ED 31                                add     hl,a                            ; .
 116+ 00D7 7E                                   ld      a,(hl)                          ; .
 117+ 00D8 23                                   inc     hl                              ; .
 118+ 00D9 66                                   ld      h,(hl)                          ; .
 119+ 00DA 6F                                   ld      l,a                             ; .
 120+ 00DB                                      ClearCarryFlag                          ;
 120+ 00DB B7          >                        or a
 121+ 00DC EB                                   ex      de,hl                           ; now hl = log a and de = log b
 122+ 00DD ED 52                                sbc     hl,de                           ; hl = log a - log b
 123+ 00DF 7C                                   ld      a,h                             ; .
 124+ 00E0 21 83 02                             ld      hl,AnitLogODDTable               ; hl = anti log (log a - log b)
 125+ 00E3 ED 31                                add     hl,a                            ; which is also a / b
 126+ 00E5 ED 31                                add     hl,a                            ; .
 127+ 00E7 7E                                   ld      a,(hl)                          ; .
 128+ 00E8                                      ClearCarryFlag                          ;
 128+ 00E8 B7          >                        or a
 129+ 00E9 C9                                   ret
 130+ 00EA              .ResultIsZero:          ClearCarryFlag
 130+ 00EA B7          >                        or a
 131+ 00EB                                      ZeroA
 131+ 00EB AF          >                        xor a
 132+ 00EC C9                                   ret
 133+ 00ED
 134+ 00ED              AEquAmul256DivBLog:     JumpIfAIsZero   .ResultIsZero
 134+ 00ED A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
 134+ 00EE CA 24 01    >                        jp	    z, .ResultIsZero
 135+ 00F1                                      JumpIfAGTENusng d, AEquAmul256DivBLogLT
 135+ 00F1 BA          >                        cp     d
 135+ 00F2 D2 C1 00    >                        jp		nc,AEquAmul256DivBLogLT
 136+ 00F5 21 83 03                             ld      hl,LogTable                     ; de = log a
 137+ 00F8 ED 31                                add     hl,a                            ; .
 138+ 00FA ED 31                                add     hl,a                            ; .
 139+ 00FC 5E                                   ld      e,(hl)                          ; .
 140+ 00FD 23                                   inc     hl                              ; .
 141+ 00FE 56                                   ld      d,(hl)                          ; .
 142+ 00FF 21 83 03                             ld      hl,LogTable                     ; hl = log b
 143+ 0102 78                                   ld      a,b                             ; .
 144+ 0103 ED 31                                add     hl,a                            ; .
 145+ 0105 ED 31                                add     hl,a                            ; .
 146+ 0107 7E                                   ld      a,(hl)                          ; .
 147+ 0108 23                                   inc     hl                              ; .
 148+ 0109 66                                   ld      h,(hl)                          ; .
 149+ 010A 6F                                   ld      l,a                             ; .
 150+ 010B                                      ClearCarryFlag                          ;
 150+ 010B B7          >                        or a
 151+ 010C EB                                   ex      de,hl                           ; now hl = log a and de = log b
 152+ 010D ED 52                                sbc     hl,de                           ; hl = log a - log b
 153+ 010F 38 0B                                jr      c,.ResultIsOne                  ; .
 154+ 0111 7C                                   ld      a,h                             ; .
 155+ 0112 21 83 01                             ld      hl,AntiLogTable                 ; hl = anti log (log a - log b)
 156+ 0115 ED 31                                add     hl,a                            ; which is also a / b
 157+ 0117 ED 31                                add     hl,a                            ; .
 158+ 0119 7E                                   ld      a,(hl)                          ; .
 159+ 011A                                      ClearCarryFlag                          ;
 159+ 011A B7          >                        or a
 160+ 011B C9                                   ret
 161+ 011C              .ResultIsOne:           ClearCarryFlag
 161+ 011C B7          >                        or a
 162+ 011D 3E FF                                ld      a,$FF
 163+ 011F C9                                   ret
 164+ 0120              .ResultIsInfinte:       SetCarryFlag
 164+ 0120 37          >                        scf
 165+ 0121 3E FF                                ld      a,$FF
 166+ 0123 C9                                   ret
 167+ 0124              .ResultIsZero:          ClearCarryFlag
 167+ 0124 B7          >                        or a
 168+ 0125 C9                                   ret
 169+ 0126
 170+ 0126              AEquAmul256Div197LogLT: JumpIfAIsZero   .ResultIsZero
 170+ 0126 A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
 170+ 0127 CA 46 01    >                        jp	    z, .ResultIsZero
 171+ 012A 21 83 03                             ld      hl,LogTable                     ; point to log a in LogTable
 172+ 012D ED 31                                add     hl,a                            ; Note we can't sla in case a > 127
 173+ 012F ED 31                                add     hl,a
 174+ 0131 5E                                   ld      e,(hl)                          ; de = log a
 175+ 0132 23                                   inc     hl                              ; .
 176+ 0133 56                                   ld      d,(hl)                          ; .
 177+ 0134 21 A9 F3                             ld      hl,$F3A9                        ; hl = $F3A9 = log 197
 178+ 0137                                      ClearCarryFlag
 178+ 0137 B7          >                        or a
 179+ 0138 EB                                   ex      hl,de                           ; hl = log a, de = log 197
 180+ 0139 ED 52                                sbc     hl,de
 181+ 013B 7C                                   ld      a,h
 182+ 013C 21 83 02                             ld      hl,AnitLogODDTable
 183+ 013F ED 31                                add     hl,a
 184+ 0141 ED 31                                add     hl,a
 185+ 0143 7E                                   ld      a,(hl)
 186+ 0144                                      ClearCarryFlag
 186+ 0144 B7          >                        or a
 187+ 0145 C9                                   ret
 188+ 0146              .ResultIsZero:          ClearCarryFlag
 188+ 0146 B7          >                        or a
 189+ 0147                                      ZeroA
 189+ 0147 AF          >                        xor a
 190+ 0148 C9                                   ret
 191+ 0149
 192+ 0149
 193+ 0149              AEquAmul256Div197Log:   JumpIfAIsZero   .ResultIsZero
 193+ 0149 A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
 193+ 014A CA 73 01    >                        jp	    z, .ResultIsZero
 194+ 014D                                      JumpIfAGTENusng d, AEquAmul256Div197LogLT
 194+ 014D BA          >                        cp     d
 194+ 014E D2 26 01    >                        jp		nc,AEquAmul256Div197LogLT
 195+ 0151 21 83 03                             ld      hl,LogTable                     ; point to log a in LogTable
 196+ 0154 ED 31                                add     hl,a                            ; Note we can't sla in case a > 127
 197+ 0156 ED 31                                add     hl,a
 198+ 0158 5E                                   ld      e,(hl)                          ; de = log a
 199+ 0159 23                                   inc     hl                              ; .
 200+ 015A 56                                   ld      d,(hl)                          ; .
 201+ 015B 21 A9 F3                             ld      hl,$F3A9                        ; hl = $F3A9 = log 197
 202+ 015E                                      ClearCarryFlag
 202+ 015E B7          >                        or a
 203+ 015F EB                                   ex      hl,de                           ; hl = log a, de = log 197
 204+ 0160 ED 52                                sbc     hl,de
 205+ 0162 38 0B                                jr      c,.ResultIsOne
 206+ 0164 7C                                   ld      a,h
 207+ 0165 21 83 01                             ld      hl,AntiLogTable
 208+ 0168 ED 31                                add     hl,a
 209+ 016A ED 31                                add     hl,a
 210+ 016C 7E                                   ld      a,(hl)
 211+ 016D                                      ClearCarryFlag
 211+ 016D B7          >                        or a
 212+ 016E C9                                   ret
 213+ 016F              .ResultIsOne:           ClearCarryFlag
 213+ 016F B7          >                        or a
 214+ 0170 3E FF                                ld      a,$FF
 215+ 0172 C9                                   ret
 216+ 0173              .ResultIsZero:          ClearCarryFlag
 216+ 0173 B7          >                        or a
 217+ 0174 C9                                   ret
 218+ 0175
 219+ 0175              AEquAmul256Div197LogSignA:
 220+ 0175 FD 67                                ld      iyh,a
 221+ 0177                                      ClearSignBitA
 221+ 0177 E6 7F       >                        and     SignMask8Bit
 222+ 0179 CD 49 01                             call    AEquAmul256Div197Log
 223+ 017C 47                                   ld      b,a
 224+ 017D FD 7C                                ld      a,iyh
 225+ 017F                                      SignBitOnlyA
 225+ 017F E6 80       >                        and     SignOnly8Bit
 226+ 0181 B0                                   or      b
 227+ 0182 C9                                   ret
# file closed: ./Maths/logmaths.asm
1132  0183                                  INCLUDE "./Tables/antilogtable.asm"
# file opened: ./Tables/antilogtable.asm
   1+ 0183 01 01 01 01  AntiLogTable:           DB $01, $01, $01, $01, $01, $01, $01, $01, $01, $01 ; 0 to 9
   1+ 0187 01 01 01 01
   1+ 018B 01 01
   2+ 018D 01 01 01 01                          DB $01, $01, $01, $01, $01, $01, $01, $01, $01, $01 ; 10 to 19
   2+ 0191 01 01 01 01
   2+ 0195 01 01
   3+ 0197 01 01 01 01                          DB $01, $01, $01, $01, $01, $01, $01, $01, $01, $01 ; 20 to 29
   3+ 019B 01 01 01 01
   3+ 019F 01 01
   4+ 01A1 01 01 02 02                          DB $01, $01, $02, $02, $02, $02, $02, $02, $02, $02 ; 30 to 39
   4+ 01A5 02 02 02 02
   4+ 01A9 02 02
   5+ 01AB 02 02 02 02                          DB $02, $02, $02, $02, $02, $02, $02, $02, $02, $02 ; 40 to 49
   5+ 01AF 02 02 02 02
   5+ 01B3 02 02
   6+ 01B5 02 03 03 03                          DB $02, $03, $03, $03, $03, $03, $03, $03, $03, $03 ; 50 to 59
   6+ 01B9 03 03 03 03
   6+ 01BD 03 03
   7+ 01BF 03 03 03 03                          DB $03, $03, $03, $03, $04, $04, $04, $04, $04, $04 ; 60 to 69
   7+ 01C3 04 04 04 04
   7+ 01C7 04 04
   8+ 01C9 04 04 04 04                          DB $04, $04, $04, $04, $04, $05, $05, $05, $05, $05 ; 70 to 79
   8+ 01CD 04 05 05 05
   8+ 01D1 05 05
   9+ 01D3 05 05 05 06                          DB $05, $05, $05, $06, $06, $06, $06, $06, $06, $06 ; 80 to 89
   9+ 01D7 06 06 06 06
   9+ 01DB 06 06
  10+ 01DD 07 07 07 07                          DB $07, $07, $07, $07, $07, $07, $08, $08, $08, $08 ; 90 to 99
  10+ 01E1 07 07 08 08
  10+ 01E5 08 08
  11+ 01E7 08 08 09 09                          DB $08, $08, $09, $09, $09, $09, $09, $0A, $0A, $0A ; 100 to 109
  11+ 01EB 09 09 09 0A
  11+ 01EF 0A 0A
  12+ 01F1 0A 0B 0B 0B                          DB $0A, $0B, $0B, $0B, $0B, $0C, $0C, $0C, $0C, $0D ; 110 to 119
  12+ 01F5 0B 0C 0C 0C
  12+ 01F9 0C 0D
  13+ 01FB 0D 0D 0E 0E                          DB $0D, $0D, $0E, $0E, $0E, $0E, $0F, $0F, $10, $10 ; 120 to 129
  13+ 01FF 0E 0E 0F 0F
  13+ 0203 10 10
  14+ 0205 10 11 11 11                          DB $10, $11, $11, $11, $12, $12, $13, $13, $13, $14 ; 130 to 139
  14+ 0209 12 12 13 13
  14+ 020D 13 14
  15+ 020F 14 15 15 16                          DB $14, $15, $15, $16, $16, $17, $17, $18, $18, $19 ; 140 to 149
  15+ 0213 16 17 17 18
  15+ 0217 18 19
  16+ 0219 19 1A 1A 1B                          DB $19, $1A, $1A, $1B, $1C, $1C, $1D, $1D, $1E, $1F ; 150 to 159
  16+ 021D 1C 1C 1D 1D
  16+ 0221 1E 1F
  17+ 0223 20 20 21 22                          DB $20, $20, $21, $22, $22, $23, $24, $25, $26, $26 ; 160 to 169
  17+ 0227 22 23 24 25
  17+ 022B 26 26
  18+ 022D 27 28 29 2A                          DB $27, $28, $29, $2A, $2B, $2C, $2D, $2E, $2F, $30 ; 170 to 179
  18+ 0231 2B 2C 2D 2E
  18+ 0235 2F 30
  19+ 0237 31 32 33 34                          DB $31, $32, $33, $34, $35, $36, $38, $39, $3A, $3B ; 180 to 189
  19+ 023B 35 36 38 39
  19+ 023F 3A 3B
  20+ 0241 3D 3E 40 41                          DB $3D, $3E, $40, $41, $42, $44, $45, $47, $48, $4A ; 190 to 199
  20+ 0245 42 44 45 47
  20+ 0249 48 4A
  21+ 024B 4C 4D 4F 51                          DB $4C, $4D, $4F, $51, $52, $54, $56, $58, $5A, $5C ; 200 to 219
  21+ 024F 52 54 56 58
  21+ 0253 5A 5C
  22+ 0255 5E 60 62 64                          DB $5E, $60, $62, $64, $67, $69, $6B, $6D, $70, $72 ; 210 to 229
  22+ 0259 67 69 6B 6D
  22+ 025D 70 72
  23+ 025F 75 77 7A 7D                          DB $75, $77, $7A, $7D, $80, $82, $85, $88, $8B, $8E ; 220 to 239
  23+ 0263 80 82 85 88
  23+ 0267 8B 8E
  24+ 0269 91 94 98 9B                          DB $91, $94, $98, $9B, $9E, $A2, $A5, $A9, $AD, $B1 ; 230 to 239
  24+ 026D 9E A2 A5 A9
  24+ 0271 AD B1
  25+ 0273 B5 B8 BD C1                          DB $B5, $B8, $BD, $C1, $C5, $C9, $CE, $D2, $D7, $DB ; 240 to 249
  25+ 0277 C5 C9 CE D2
  25+ 027B D7 DB
  26+ 027D E0 E5 EA EF                          DB $E0, $E5, $EA, $EF, $F5, $FA                     ; 250 to 255
  26+ 0281 F5 FA
  27+ 0283
  28+ 0283 01 01 01 01  AnitLogODDTable:        DB $01, $01, $01, $01, $01, $01, $01, $01, $01, $01 ; 0 to 9
  28+ 0287 01 01 01 01
  28+ 028B 01 01
  29+ 028D 01 01 01 01                          DB $01, $01, $01, $01, $01, $01, $01, $01, $01, $01 ; 10 to 19
  29+ 0291 01 01 01 01
  29+ 0295 01 01
  30+ 0297 01 01 01 01                          DB $01, $01, $01, $01, $01, $01, $01, $01, $01, $01 ; 20 to 29
  30+ 029B 01 01 01 01
  30+ 029F 01 01
  31+ 02A1 01 01 02 02                          DB $01, $01, $02, $02, $02, $02, $02, $02, $02, $02 ; 30 to 39
  31+ 02A5 02 02 02 02
  31+ 02A9 02 02
  32+ 02AB 02 02 02 02                          DB $02, $02, $02, $02, $02, $02, $02, $02, $02, $02 ; 40 to 49
  32+ 02AF 02 02 02 02
  32+ 02B3 02 02
  33+ 02B5 02 03 03 03                          DB $02, $03, $03, $03, $03, $03, $03, $03, $03, $03 ; 50 to 59
  33+ 02B9 03 03 03 03
  33+ 02BD 03 03
  34+ 02BF 03 03 03 03                          DB $03, $03, $03, $03, $04, $04, $04, $04, $04, $04 ; 60 to 69
  34+ 02C3 04 04 04 04
  34+ 02C7 04 04
  35+ 02C9 04 04 04 04                          DB $04, $04, $04, $04, $05, $05, $05, $05, $05, $05 ; 70 to 79
  35+ 02CD 05 05 05 05
  35+ 02D1 05 05
  36+ 02D3 05 05 05 06                          DB $05, $05, $05, $06, $06, $06, $06, $06, $06, $06 ; 80 to 89
  36+ 02D7 06 06 06 06
  36+ 02DB 06 06
  37+ 02DD 07 07 07 07                          DB $07, $07, $07, $07, $07, $07, $08, $08, $08, $08 ; 90 to 99
  37+ 02E1 07 07 08 08
  37+ 02E5 08 08
  38+ 02E7 08 09 09 09                          DB $08, $09, $09, $09, $09, $09, $0A, $0A, $0A, $0A ; 100 to 109
  38+ 02EB 09 09 0A 0A
  38+ 02EF 0A 0A
  39+ 02F1 0A 0B 0B 0B                          DB $0A, $0B, $0B, $0B, $0B, $0C, $0C, $0C, $0D, $0D ; 110 to 119
  39+ 02F5 0B 0C 0C 0C
  39+ 02F9 0D 0D
  40+ 02FB 0D 0D 0E 0E                          DB $0D, $0D, $0E, $0E, $0E, $0F, $0F, $0F, $10, $10 ; 120 to 129
  40+ 02FF 0E 0F 0F 0F
  40+ 0303 10 10
  41+ 0305 10 11 11 12                          DB $10, $11, $11, $12, $12, $12, $13, $13, $14, $14 ; 130 to 139
  41+ 0309 12 12 13 13
  41+ 030D 14 14
  42+ 030F 14 15 15 16                          DB $14, $15, $15, $16, $16, $17, $17, $18, $18, $19 ; 140 to 149
  42+ 0313 16 17 17 18
  42+ 0317 18 19
  43+ 0319 1A 1A 1B 1B                          DB $1A, $1A, $1B, $1B, $1C, $1D, $1D, $1E, $1E, $1F ; 150 to 159
  43+ 031D 1C 1D 1D 1E
  43+ 0321 1E 1F
  44+ 0323 20 21 21 22                          DB $20, $21, $21, $22, $23, $24, $24, $25, $26, $27 ; 160 to 169
  44+ 0327 23 24 24 25
  44+ 032B 26 27
  45+ 032D 28 29 29 2A                          DB $28, $29, $29, $2A, $2B, $2C, $2D, $2E, $2F, $30 ; 170 to 179
  45+ 0331 2B 2C 2D 2E
  45+ 0335 2F 30
  46+ 0337 31 32 34 35                          DB $31, $32, $34, $35, $36, $37, $38, $3A, $3B, $3C ; 180 to 189
  46+ 033B 36 37 38 3A
  46+ 033F 3B 3C
  47+ 0341 3D 3F 40 42                          DB $3D, $3F, $40, $42, $43, $45, $46, $48, $49, $4B ; 190 to 199
  47+ 0345 43 45 46 48
  47+ 0349 49 4B
  48+ 034B 4C 4E 50 52                          DB $4C, $4E, $50, $52, $53, $55, $57, $59, $5B, $5D ; 200 to 219
  48+ 034F 53 55 57 59
  48+ 0353 5B 5D
  49+ 0355 5F 61 63 65                          DB $5F, $61, $63, $65, $68, $6A, $6C, $6F, $71, $74 ; 210 to 229
  49+ 0359 68 6A 6C 6F
  49+ 035D 71 74
  50+ 035F 76 79 7B 7E                          DB $76, $79, $7B, $7E, $81, $84, $87, $8A, $8D, $90 ; 220 to 239
  50+ 0363 81 84 87 8A
  50+ 0367 8D 90
  51+ 0369 93 96 99 9D                          DB $93, $96, $99, $9D, $A0, $A4, $A7, $AB, $AF, $B3 ; 230 to 239
  51+ 036D A0 A4 A7 AB
  51+ 0371 AF B3
  52+ 0373 B6 BA BF C3                          DB $B6, $BA, $BF, $C3, $C7, $CB, $D0, $D4, $D9, $DE ; 240 to 249
  52+ 0377 C7 CB D0 D4
  52+ 037B D9 DE
  53+ 037D E3 E8 ED F2                          DB $E3, $E8, $ED, $F2, $F7, $FD                     ; 250 to 255
  53+ 0381 F7 FD
  54+ 0383
# file closed: ./Tables/antilogtable.asm
1133  0383                                  INCLUDE "./Tables/logtable.asm"
# file opened: ./Tables/logtable.asm
   1+ 0383 00 00        LogTable:               DW $0000                                                                   ; 0
   2+ 0385 00 00 00 20                          DW $0000, $2000, $32B8, $4000, $4A4D, $52B8, $59D6, $6000, $6570, $6A4D    ;   1 TO  10
   2+ 0389 B8 32 00 40
   2+ 038D 4D 4A B8 52
   2+ 0391 D6 59 00 60
   2+ 0395 70 65 4D 6A
   3+ 0399 B4 6E B8 72                          DW $6EB4, $72B8, $766A, $79D6, $7D05, $8000, $82CC, $8570, $87EF, $8A4D    ;  11 TO  20
   3+ 039D 6A 76 D6 79
   3+ 03A1 05 7D 00 80
   3+ 03A5 CC 82 70 85
   3+ 03A9 EF 87 4D 8A
   4+ 03AD 8E 8C B4 8E                          DW $8C8E, $8EB4, $90C1, $92B8, $949A, $966A, $9828, $99D6, $9B75, $9D05    ;  21 TO  30
   4+ 03B1 C1 90 B8 92
   4+ 03B5 9A 94 6A 96
   4+ 03B9 28 98 D6 99
   4+ 03BD 75 9B 05 9D
   5+ 03C1 89 9E 00 A0                          DW $9E89, $A000, $A16C, $A2CC, $A423, $A570, $A6B4, $A7EF, $A922, $AA4D    ;  31 TO  40
   5+ 03C5 6C A1 CC A2
   5+ 03C9 23 A4 70 A5
   5+ 03CD B4 A6 EF A7
   5+ 03D1 22 A9 4D AA
   6+ 03D5 71 AB 8E AC                          DW $AB71, $AC8E, $ADA4, $AEB4, $AFBD, $B0C1, $B1BF, $B2B8, $B3AC, $B49A    ;  41 TO  50
   6+ 03D9 A4 AD B4 AE
   6+ 03DD BD AF C1 B0
   6+ 03E1 BF B1 B8 B2
   6+ 03E5 AC B3 9A B4
   7+ 03E9 85 B5 6A B6                          DW $B585, $B66A, $B74B, $B828, $B901, $B9D6, $BAA7, $BB75, $BC3F, $BD05    ;  51 TO  60
   7+ 03ED 4B B7 28 B8
   7+ 03F1 01 B9 D6 B9
   7+ 03F5 A7 BA 75 BB
   7+ 03F9 3F BC 05 BD
   8+ 03FD C9 BD 89 BE                          DW $BDC9, $BE89, $BF46, $C000, $C0B7, $C16C, $C21D, $C2CC, $C379, $C423    ;  61 TO  70
   8+ 0401 46 BF 00 C0
   8+ 0405 B7 C0 6C C1
   8+ 0409 1D C2 CC C2
   8+ 040D 79 C3 23 C4
   9+ 0411 CB C4 70 C5                          DW $C4CB, $C570, $C613, $C6B4, $C752, $C7EF, $C88A, $C922, $C9B9, $CA4D    ;  71 TO  80
   9+ 0415 13 C6 B4 C6
   9+ 0419 52 C7 EF C7
   9+ 041D 8A C8 22 C9
   9+ 0421 B9 C9 4D CA
  10+ 0425 E0 CA 71 CB                          DW $CAE0, $CB71, $CC00, $CC8E, $CD1A, $CDA4, $CE2D, $CEB4, $CF39, $CFBD    ;  81 TO  90
  10+ 0429 00 CC 8E CC
  10+ 042D 1A CD A4 CD
  10+ 0431 2D CE B4 CE
  10+ 0435 39 CF BD CF
  11+ 0439 40 D0 C1 D0                          DW $D040, $D0C1, $D141, $D1BF, $D23C, $D2B8, $D332, $D3AC, $D424, $D49A    ;  91 TO 100
  11+ 043D 41 D1 BF D1
  11+ 0441 3C D2 B8 D2
  11+ 0445 32 D3 AC D3
  11+ 0449 24 D4 9A D4
  12+ 044D 10 D5 85 D5                          DW $D510, $D585, $D5F8, $D66A, $D6DB, $D74B, $D7BA, $D828, $D895, $D901    ; 101 TO 110
  12+ 0451 F8 D5 6A D6
  12+ 0455 DB D6 4B D7
  12+ 0459 BA D7 28 D8
  12+ 045D 95 D8 01 D9
  13+ 0461 6C D9 D6 D9                          DW $D96C, $D9D6, $DA3F, $DAA7, $DB0E, $DB75, $DBDA, $DC3F, $DCA2, $DD05    ; 111 TO 120
  13+ 0465 3F DA A7 DA
  13+ 0469 0E DB 75 DB
  13+ 046D DA DB 3F DC
  13+ 0471 A2 DC 05 DD
  14+ 0475 67 DD C9 DD                          DW $DD67, $DDC9, $DE29, $DE89, $DEE8, $DF46, $DFA3, $E000, $E05C, $E0B7    ; 121 TO 130
  14+ 0479 29 DE 89 DE
  14+ 047D E8 DE 46 DF
  14+ 0481 A3 DF 00 E0
  14+ 0485 5C E0 B7 E0
  15+ 0489 12 E1 6C E1                          DW $E112, $E16C, $E1C5, $E21D, $E275, $E2CC, $E323, $E379, $E3CE, $E423    ; 131 TO 140
  15+ 048D C5 E1 1D E2
  15+ 0491 75 E2 CC E2
  15+ 0495 23 E3 79 E3
  15+ 0499 CE E3 23 E4
  16+ 049D 77 E4 CB E4                          DW $E477, $E4CB, $E51E, $E570, $E5C2, $E613, $E664, $E6B4, $E703, $E752    ; 141 TO 150
  16+ 04A1 1E E5 70 E5
  16+ 04A5 C2 E5 13 E6
  16+ 04A9 64 E6 B4 E6
  16+ 04AD 03 E7 52 E7
  17+ 04B1 A1 E7 EF E7                          DW $E7A1, $E7EF, $E83D, $E88A, $E8D6, $E922, $E96E, $E9B9, $EA03, $EA4D    ; 151 TO 160
  17+ 04B5 3D E8 8A E8
  17+ 04B9 D6 E8 22 E9
  17+ 04BD 6E E9 B9 E9
  17+ 04C1 03 EA 4D EA
  18+ 04C5 97 EA E0 EA                          DW $EA97, $EAE0, $EB29, $EB71, $EBB9, $EC00, $EC47, $EC8E, $ECD4, $ED1A    ; 161 TO 170
  18+ 04C9 29 EB 71 EB
  18+ 04CD B9 EB 00 EC
  18+ 04D1 47 EC 8E EC
  18+ 04D5 D4 EC 1A ED
  19+ 04D9 5F ED A4 ED                          DW $ED5F, $EDA4, $EDE8, $EE2D, $EE70, $EEB4, $EEF7, $EF39, $EF7B, $EFBD    ; 171 TO 180
  19+ 04DD E8 ED 2D EE
  19+ 04E1 70 EE B4 EE
  19+ 04E5 F7 EE 39 EF
  19+ 04E9 7B EF BD EF
  20+ 04ED FF EF 40 F0                          DW $EFFF, $F040, $F081, $F0C1, $F101, $F141, $F180, $F1BF, $F1FE, $F23C    ; 181 TO 190
  20+ 04F1 81 F0 C1 F0
  20+ 04F5 01 F1 41 F1
  20+ 04F9 80 F1 BF F1
  20+ 04FD FE F1 3C F2
  21+ 0501 7A F2 B8 F2                          DW $F27A, $F2B8, $F2F5, $F332, $F36F, $F3AC, $F3E8, $F424, $F45F, $F49A    ; 191 TO 290
  21+ 0505 F5 F2 32 F3
  21+ 0509 6F F3 AC F3
  21+ 050D E8 F3 24 F4
  21+ 0511 5F F4 9A F4
  22+ 0515 D5 F4 10 F5                          DW $F4D5, $F510, $F54A, $F585, $F5BE, $F5F8, $F631, $F66A, $F6A3, $F6DB    ; 201 TO 210
  22+ 0519 4A F5 85 F5
  22+ 051D BE F5 F8 F5
  22+ 0521 31 F6 6A F6
  22+ 0525 A3 F6 DB F6
  23+ 0529 13 F7 4B F7                          DW $F713, $F74B, $F783, $F7BA, $F7F1, $F828, $F85F, $F895, $F8CB, $F901    ; 211 TO 220
  23+ 052D 83 F7 BA F7
  23+ 0531 F1 F7 28 F8
  23+ 0535 5F F8 95 F8
  23+ 0539 CB F8 01 F9
  24+ 053D 36 F9 6C F9                          DW $F936, $F96C, $F9A1, $F9D6, $FA0A, $FA3F, $FA73, $FAA7, $FADB, $FB0E    ; 221 TO 230
  24+ 0541 A1 F9 D6 F9
  24+ 0545 0A FA 3F FA
  24+ 0549 73 FA A7 FA
  24+ 054D DB FA 0E FB
  25+ 0551 42 FB 75 FB                          DW $FB42, $FB75, $FBA7, $FBDA, $FC0C, $FC3F, $FC71, $FCA2, $FCD4, $FD05    ; 231 TO 240
  25+ 0555 A7 FB DA FB
  25+ 0559 0C FC 3F FC
  25+ 055D 71 FC A2 FC
  25+ 0561 D4 FC 05 FD
  26+ 0565 36 FD 67 FD                          DW $FD36, $FD67, $FD98, $FDC9, $FDF9, $FE29, $FE59, $FE89, $FEB8, $FEE8    ; 241 TO 250
  26+ 0569 98 FD C9 FD
  26+ 056D F9 FD 29 FE
  26+ 0571 59 FE 89 FE
  26+ 0575 B8 FE E8 FE
  27+ 0579 17 FF 46 FF                          DW $FF17, $FF46, $FF75, $FFA3, $FFA3                                       ; 251 TO 255
  27+ 057D 75 FF A3 FF
  27+ 0581 A3 FF
  28+ 0583
  29+ 0583
  30+ 0583
  31+ 0583 00 00 00 00  LogReverseHighByte:     DW $00, 000, $20, 002, $32, 003, $40, 004, $4A, 005, $52, 006
  31+ 0587 20 00 02 00
  31+ 058B 32 00 03 00
  31+ 058F 40 00 04 00
  31+ 0593 4A 00 05 00
  31+ 0597 52 00 06 00
  32+ 059B 59 00 07 00                          DW $59, 007, $60, 008, $65, 009, $6A, 010, $6E, 011, $72, 012
  32+ 059F 60 00 08 00
  32+ 05A3 65 00 09 00
  32+ 05A7 6A 00 0A 00
  32+ 05AB 6E 00 0B 00
  32+ 05AF 72 00 0C 00
  33+ 05B3 76 00 0D 00                          DW $76, 013, $79, 014, $7D, 015, $80, 016, $82, 017, $85, 018
  33+ 05B7 79 00 0E 00
  33+ 05BB 7D 00 0F 00
  33+ 05BF 80 00 10 00
  33+ 05C3 82 00 11 00
  33+ 05C7 85 00 12 00
  34+ 05CB 87 00 13 00                          DW $87, 019, $8A, 020, $8C, 021, $8E, 022, $90, 023, $92, 024
  34+ 05CF 8A 00 14 00
  34+ 05D3 8C 00 15 00
  34+ 05D7 8E 00 16 00
  34+ 05DB 90 00 17 00
  34+ 05DF 92 00 18 00
  35+ 05E3 94 00 19 00                          DW $94, 025, $96, 026, $98, 027, $99, 028, $9B, 029, $9D, 030
  35+ 05E7 96 00 1A 00
  35+ 05EB 98 00 1B 00
  35+ 05EF 99 00 1C 00
  35+ 05F3 9B 00 1D 00
  35+ 05F7 9D 00 1E 00
  36+ 05FB 9E 00 1F 00                          DW $9E, 031, $A0, 032, $A1, 033, $A2, 034, $A4, 035, $A5, 036
  36+ 05FF A0 00 20 00
  36+ 0603 A1 00 21 00
  36+ 0607 A2 00 22 00
  36+ 060B A4 00 23 00
  36+ 060F A5 00 24 00
  37+ 0613 A6 00 25 00                          DW $A6, 037, $A7, 038, $A9, 039, $AA, 040, $AB, 041, $AC, 042
  37+ 0617 A7 00 26 00
  37+ 061B A9 00 27 00
  37+ 061F AA 00 28 00
  37+ 0623 AB 00 29 00
  37+ 0627 AC 00 2A 00
  38+ 062B AD 00 2B 00                          DW $AD, 043, $AE, 044, $AF, 045, $B0, 046, $B1, 047, $B2, 048
  38+ 062F AE 00 2C 00
  38+ 0633 AF 00 2D 00
  38+ 0637 B0 00 2E 00
  38+ 063B B1 00 2F 00
  38+ 063F B2 00 30 00
  39+ 0643 B3 00 31 00                          DW $B3, 049, $B4, 050, $B5, 051, $B6, 052, $B7, 053, $B8, 054
  39+ 0647 B4 00 32 00
  39+ 064B B5 00 33 00
  39+ 064F B6 00 34 00
  39+ 0653 B7 00 35 00
  39+ 0657 B8 00 36 00
  40+ 065B B9 00 38 00                          DW $B9, 056, $B9, 056, $BA, 057, $BB, 058, $BC, 059, $BD, 060
  40+ 065F B9 00 38 00
  40+ 0663 BA 00 39 00
  40+ 0667 BB 00 3A 00
  40+ 066B BC 00 3B 00
  40+ 066F BD 00 3C 00
  41+ 0673 BE 00 3E 00                          DW $BE, 062, $BF, 063, $C0, 064, $C1, 066, $C2, 067, $C3, 069
  41+ 0677 BF 00 3F 00
  41+ 067B C0 00 40 00
  41+ 067F C1 00 42 00
  41+ 0683 C2 00 43 00
  41+ 0687 C3 00 45 00
  42+ 068B C4 00 46 00                          DW $C4, 070, $C5, 072, $C6, 072, $C7, 074, $C8, 076, $C9, 077
  42+ 068F C5 00 48 00
  42+ 0693 C6 00 48 00
  42+ 0697 C7 00 4A 00
  42+ 069B C8 00 4C 00
  42+ 069F C9 00 4D 00
  43+ 06A3 CA 00 50 00                          DW $CA, 080, $CB, 082, $CC, 083, $CD, 085, $CE, 087, $CF, 088
  43+ 06A7 CB 00 52 00
  43+ 06AB CC 00 53 00
  43+ 06AF CD 00 55 00
  43+ 06B3 CE 00 57 00
  43+ 06B7 CF 00 58 00
  44+ 06BB D0 00 5A 00                          DW $D0, 090, $D1, 092, $D2, 094, $D3, 097, $D4, 100, $D5, 102
  44+ 06BF D1 00 5C 00
  44+ 06C3 D2 00 5E 00
  44+ 06C7 D3 00 61 00
  44+ 06CB D4 00 64 00
  44+ 06CF D5 00 66 00
  45+ 06D3 D6 00 68 00                          DW $D6, 104, $D6, 105, $D7, 106, $D7, 107, $D8, 108, $D8, 109
  45+ 06D7 D6 00 69 00
  45+ 06DB D7 00 6A 00
  45+ 06DF D7 00 6B 00
  45+ 06E3 D8 00 6C 00
  45+ 06E7 D8 00 6D 00
  46+ 06EB D9 00 6E 00                          DW $D9, 110, $D9, 111, $D9, 112, $DA, 113, $DB, 114, $DC, 117
  46+ 06EF D9 00 6F 00
  46+ 06F3 D9 00 70 00
  46+ 06F7 DA 00 71 00
  46+ 06FB DB 00 72 00
  46+ 06FF DC 00 75 00
  47+ 0703 DD 00 78 00                          DW $DD, 120, $DE, 123, $DF, 126, $E0, 128, $E1, 131, $E2, 134
  47+ 0707 DE 00 7B 00
  47+ 070B DF 00 7E 00
  47+ 070F E0 00 80 00
  47+ 0713 E1 00 83 00
  47+ 0717 E2 00 86 00
  48+ 071B E3 00 89 00                          DW $E3, 137, $E4, 140, $E5, 143, $E6, 146, $E7, 149, $E8, 153
  48+ 071F E4 00 8C 00
  48+ 0723 E5 00 8F 00
  48+ 0727 E6 00 92 00
  48+ 072B E7 00 95 00
  48+ 072F E8 00 99 00
  49+ 0733 E9 00 9C 00                          DW $E9, 156, $EA, 159, $EB, 163, $EC, 166, $ED, 170, $EE, 174
  49+ 0737 EA 00 9F 00
  49+ 073B EB 00 A3 00
  49+ 073F EC 00 A6 00
  49+ 0743 ED 00 AA 00
  49+ 0747 EE 00 AE 00
  50+ 074B EF 00 B2 00                          DW $EF, 178, $F0, 182, $F1, 185, $F2, 190, $F3, 194, $F4, 198
  50+ 074F F0 00 B6 00
  50+ 0753 F1 00 B9 00
  50+ 0757 F2 00 BE 00
  50+ 075B F3 00 C2 00
  50+ 075F F4 00 C6 00
  51+ 0763 F5 00 CA 00                          DW $F5, 202, $F6, 207, $F7, 211, $F8, 216, $F8, 217, $F9, 220
  51+ 0767 F6 00 CF 00
  51+ 076B F7 00 D3 00
  51+ 076F F8 00 D8 00
  51+ 0773 F8 00 D9 00
  51+ 0777 F9 00 DC 00
  52+ 077B FA 00 E1 00                          DW $FA, 225, $FB, 230, $FB, 233, $FC, 235, $FD, 240, $FE, 246
  52+ 077F FB 00 E6 00
  52+ 0783 FB 00 E9 00
  52+ 0787 FC 00 EB 00
  52+ 078B FD 00 F0 00
  52+ 078F FE 00 F6 00
  53+ 0793 FF 00 FB 00                          DW $FF, 251
  54+ 0797              LogReverseTableLen:     EQU $ - LogReverseHighByte
# file closed: ./Tables/logtable.asm
1134  0797                                  DISPLAY "Bank ",BankMathsTables," - Bytes free ",/D, $2000 - ($-MathsTablesAddr), " - BankMathsTables"
1135  0797                                  ASSERT $-MathsTablesAddr <8912, Bank code leaks over 8K boundary
1136  0797              ; Bank 100  -----------------------------------------------------------------------------------------------------------------------
1137  0797                                  SLOT    KeyboardAddr
1138  0797                                  PAGE    BankKeyboard
1139  0797                                  ORG SoundAddr, BankKeyboard
1140  E000                                  INCLUDE "./Hardware/keyboard.asm"
# file opened: ./Hardware/keyboard.asm
   1+ E000              ;
   2+ E000              ; $FEFE;65278 V, C, X, Z, Caps Shifts       4  3  2  1  0
   3+ E000              ; $FDFE;65022 G, F, D, S, A                 9  8  7  6  5
   4+ E000              ; $FBFE;64510 T, R, E, W, Q                14 13 12 11 10
   5+ E000              ; $F7FE;63486 5, 4, 3, 2, 1                19 18 17 16 15
   6+ E000              ; $EFFE;61438 6, 7, 8, 9, 0                24 23 22 23 20
   7+ E000              ; $DFFE;57342 Y, U, I, O, P                29 28 27 26 25
   8+ E000              ; $BFFE;49150 H, J, K, L, Enter            34 33 32 31 30
   9+ E000              ; $7FFE;32766 B, N, M, Symbol Shift, Space 39 38 37 36 35
  10+ E000              ;
  11+ E000              ; Keyboard
  12+ E000              ;
  13+ E000              ;   0      1       2       3       4       5        6       7       8       9
  14+ E000              ;  VK_CAPS, VK_Z,  VK_X,   VK_C,   VK_V,   VK_A,    VK_S,   VK_D,   VK_F,   VK_G
  15+ E000              ;   10     11      12      13      14      15       16      17      18      19
  16+ E000              ;  VK_Q,   VK_W,   VK_E,   VK_R,   VK_T,   VK_1,    VK_2,   VK_3,   VK_4,   VK_5
  17+ E000              ;   20     21      22      23      24      25       26      27      28      29
  18+ E000              ;  VK_0    VK_9,   VK_8,   VK_7,   VK_6,   VK_P ,    VK_O,  VK_I,   VK_U,   VK_Y
  19+ E000              ;   30     31      32      33      34      35       36      37      38      39
  20+ E000              ; VK_ENTER VK_L,   VK_K,   VK_J,   VK_H,   VK_SPACE VK_SYM, VK_M,   VK_N,   VK_B
  21+ E000              ;
  22+ E000              ; ZX Spectrum Next Compound keys
  23+ E000              ;   40     41       42       43      44      45       46       47
  24+ E000              ;  VK_SEMI VK_QUOTE VK_COMMA VK_STOP VK_UP   VK_DOWN  VK_LEFT  VK _RIGHT        $Register B0 bits 7 to 0    (Set to set ULA Register ($68) bit to to prevent default keystrokes
  25+ E000              ;   48       49      50       51         52          53       54      55
  26+ E000              ;  VK_DELETE VK_EDIT VK_BREAK VK_INV_VID VK_TRUE_VID VK_GRAPH VK_CAPS VK_EXTEND $Register B1 bits 7 to 0
  27+ E000              ; Default map
  28+ E000              ;-----------------------------------------------------------------------------------------------------------------------------------
  29+ E000              ;   0          1           2             3              4           5           6           7           8           9
  30+ E000              ;   VK_CAPS    VK_Z        VK_X,         VK_C,          VK_V,       VK_A        VK_S,       VK_D,       VK_F,       VK_G
  31+ E000              ;              GameSkip                  Equip          SelLCargo   Climb       Decelerate  Recentre    FireM       HomeCursor
  32+ E000              ;                                                                                                       Find System
  33+ E000              ;-----------------------------------------------------------------------------------------------------------------------------------
  34+ E000              ;   10         11          12            13             14          15          16          17          18          19
  35+ E000              ;   VK_Q       VK_W,       VK_E,         VK_R,          VK_T,       VK_1        VK_2        VK_3        VK_4        VK_5
  36+ E000              ;   Dive       Accelerate  ECM           UnarmMissile   TargetM     FrontV      AftV        LeftV       RightV      GalacticChart
  37+ E000              ;-----------------------------------------------------------------------------------------------------------------------------------
  38+ E000              ;   20         Accel       22            23             24          25          26          27          28          29
  39+ E000              ;   VK_0       VK_9,       VK_8,         VK_7,          VK_6,       VK_P ,      VK_O,       VK_I,       VK_U,       VK_Y
  40+ E000              ;   EscapePod  Inventory   Status        MarketPrices   LocalChart  RollRight   RolLLeft                EnergyBomb  Quit
  41+ E000              ;   PlanetData                                                      PauseGame   SaveGame
  42+ E000              ;-----------------------------------------------------------------------------------------------------------------------------------
  43+ E000              ;   30         31          32            33             34          Right       36          37          EnergyBomb  39
  44+ E000              ;   VK_ENTER   VK_L,       VK_K,         VK_J,          VK_H,       VK_SPACE    VK_SYM,     VK_M,       VK_N,       VK_B
  45+ E000              ;              Launch                    Distance       Hyperspace  Laser                               DockComp    BuyCargo
  46+ E000              ;              ResumeGame                WarpJump
  47+ E000              ;-----------------------------------------------------------------------------------------------------------------------------------
  48+ E000              ;   40         41          42            43             44          45          46          47          48          49
  49+ E000              ;   VK_SEMI    VK_QUOTE    VK_COMMA      VK_STOP        VK_UP       VK_DOWN     VK_LEFT     VK _RIGHT   VK_DELETE   VK_EDIT
  50+ E000              ;   Market     EquipShip   PlanetData    NearestObject  Map Cursor no auto repeat....................   Delete      Find System
  51+ E000              ;
  52+ E000              ;-----------------------------------------------------------------------------------------------------------------------------------
  53+ E000              ;   50         51          52            53             54          55
  54+ E000              ;   VK_BREAK   VK_INV_VID  VK_TRUE_VID   VK_GRAPH       VK_EXTCAPS  VK_EXTEND
  55+ E000              ;   EscapePod  Inventory   Status        GalacticChart  LocalChart  SystemJump
  56+ E000              ;
  57+ E000
  58+ E000              ; You can read address to check keystate by address KeyboardMap + c_Pressed corresponding key. There is also an addr_ helper too
  59+ E000
  60+ E000              c_Pressed_Front         equ 0  * 2
  61+ E000              c_Pressed_Aft           equ 1  * 2
  62+ E000              c_Pressed_Left          equ 2  * 2
  63+ E000              c_Pressed_Right         equ 3  * 2
  64+ E000              c_Pressed_RollLeft      equ 4  * 2
  65+ E000              c_Pressed_RollRight     equ 5  * 2
  66+ E000              c_Pressed_Dive          equ 6  * 2
  67+ E000              c_Pressed_Climb         equ 7  * 2
  68+ E000              c_Pressed_Accellerate   equ 8  * 2
  69+ E000              c_Pressed_Decellerate   equ 9  * 2
  70+ E000              c_Pressed_FireLaser     equ 10 * 2
  71+ E000              c_Pressed_TargetMissle  equ 11 * 2
  72+ E000              c_Pressed_FireMissile   equ 12 * 2
  73+ E000              c_Pressed_UnarmMissile  equ 13 * 2
  74+ E000              c_Pressed_ECM           equ 14 * 2
  75+ E000              c_Pressed_EnergyBomb    equ 15 * 2
  76+ E000              c_Pressed_EscapePod     equ 16 * 2
  77+ E000              c_Pressed_DockingComp   equ 17 * 2
  78+ E000              c_Pressed_Hyperspace    equ 18 * 2
  79+ E000              c_Pressed_Distance      equ 19 * 2
  80+ E000              c_Pressed_HomeCursor    equ 20 * 2
  81+ E000              c_Pressed_Launch        equ 21 * 2
  82+ E000              c_Pressed_BuyCargo      equ 22 * 2
  83+ E000              c_Pressed_SellCargo     equ 23 * 2
  84+ E000              c_Pressed_Equip         equ 24 * 2
  85+ E000              c_Pressed_GalacticChrt  equ 25 * 2
  86+ E000              c_Pressed_LocalChart    equ 26 * 2
  87+ E000              c_Pressed_MarketPrices  equ 27 * 2
  88+ E000              c_Pressed_Status        equ 28 * 2
  89+ E000              c_Pressed_Inventory     equ 29 * 2
  90+ E000              c_Pressed_GameSkip      equ 30 * 2
  91+ E000              c_Pressed_Save          equ 31 * 2
  92+ E000              c_Pressed_Freeze        equ 32 * 2
  93+ E000              c_Pressed_Resume        equ 33 * 2
  94+ E000              c_Pressed_Recentre      equ 34 * 2
  95+ E000              c_Pressed_Quit          equ 35 * 2
  96+ E000              c_Pressed_PlanetData    equ 36 * 2
  97+ E000              c_Pressed_CursorUp      equ 37 * 2
  98+ E000              c_Pressed_CursorDown    equ 38 * 2
  99+ E000              c_Pressed_Find          equ 39 * 2
 100+ E000              c_Pressed_Yes           equ 40 * 2
 101+ E000              c_Pressed_No            equ 41 * 2
 102+ E000              c_Pressed_Warp          equ 42 * 2
 103+ E000              c_Pressed_ExtMarket     equ 43 * 2
 104+ E000              c_Pressed_ExtEquip      equ 44 * 2
 105+ E000              c_Pressed_ExtPlanet     equ 45 * 2
 106+ E000              c_Pressed_ExtNearest    equ 46 * 2
 107+ E000              c_Pressed_ExtCurUp      equ 47 * 2
 108+ E000              c_Pressed_ExtCurDown    equ 48 * 2
 109+ E000              c_Pressed_ExtCurLeft    equ 49 * 2
 110+ E000              c_Pressed_ExtCurRight   equ 50 * 2
 111+ E000              c_Pressed_ExtDelete     equ 51 * 2
 112+ E000              c_Pressed_ExtFindSystem equ 52 * 2
 113+ E000              c_Pressed_ExtEscapePod  equ 53 * 2
 114+ E000              c_Pressed_ExtInventory  equ 54 * 2
 115+ E000              c_Pressed_ExtStatus     equ 55 * 2
 116+ E000              c_Pressed_ExtGlactic    equ 56 * 2
 117+ E000              c_Pressed_ExtLocal      equ 57 * 2
 118+ E000              c_Pressed_ExtSystemJump equ 58 * 2
 119+ E000
 120+ E000              ; half row 1
 121+ E000              VK_CAPS  				equ 0
 122+ E000              VK_Z  					equ 1
 123+ E000              VK_X  					equ 2
 124+ E000              VK_C  					equ 3
 125+ E000              VK_V  					equ 4
 126+ E000              ; half row 2
 127+ E000              VK_A  					equ 5
 128+ E000              VK_S  					equ 6
 129+ E000              VK_D  					equ 7
 130+ E000              VK_F					equ 8
 131+ E000              VK_G  					equ 9
 132+ E000              ; half row 3
 133+ E000              VK_Q  					equ 10
 134+ E000              VK_W  					equ 11
 135+ E000              VK_E  					equ 12
 136+ E000              VK_R  					equ 13
 137+ E000              VK_T  					equ 14
 138+ E000              ; half row 4
 139+ E000              VK_1  					equ 15
 140+ E000              VK_2  					equ 16
 141+ E000              VK_3  					equ 17
 142+ E000              VK_4  					equ 18
 143+ E000              VK_5  					equ 19
 144+ E000              ; half row 5
 145+ E000              VK_0 					equ 20
 146+ E000              VK_9 					equ 21
 147+ E000              VK_8 					equ 22
 148+ E000              VK_7 					equ 23
 149+ E000              VK_6 					equ 24
 150+ E000              ; half row 6
 151+ E000              VK_P  					equ 25
 152+ E000              VK_O  					equ 26
 153+ E000              VK_I  					equ 27
 154+ E000              VK_U  					equ 28
 155+ E000              VK_Y  					equ 29
 156+ E000              ; half row 7
 157+ E000              VK_ENTER 				equ 30
 158+ E000              VK_L  					equ 31
 159+ E000              VK_K  					equ 32
 160+ E000              VK_J  					equ 33
 161+ E000              VK_H  					equ 34
 162+ E000              ; half row 8
 163+ E000              VK_SPACE 				equ 35
 164+ E000              VK_SYM  				equ 36
 165+ E000              VK_M  					equ 37
 166+ E000              VK_N  					equ 38
 167+ E000              VK_B  					equ 39
 168+ E000              ; Extended Group B0
 169+ E000              VK_SEMI                 equ 40
 170+ E000              VK_QUOTE                equ 41
 171+ E000              VK_COMMA                equ 42
 172+ E000              VK_STOP                 equ 43
 173+ E000              VK_UP                   equ 44
 174+ E000              VK_DOWN                 equ 45
 175+ E000              VK_LEFT                 equ 46
 176+ E000              VK_RIGHT                equ 47
 177+ E000              ; Extended Group B1
 178+ E000              VK_DELETE               equ 48
 179+ E000              VK_EDIT                 equ 49
 180+ E000              VK_BREAK                equ 50
 181+ E000              VK_INV_VID              equ 51
 182+ E000              VK_TRUE_VID             equ 52
 183+ E000              VK_GRAPH                equ 53
 184+ E000              VK_EXTCAPS              equ 54
 185+ E000              VK_EXTEND               equ 55
 186+ E000              ;KeyboardMapping
 187+ E000              KeyCode_Front        	equ VK_1
 188+ E000              KeyCode_Aft          	equ VK_2
 189+ E000              KeyCode_Left         	equ VK_3
 190+ E000              KeyCode_Right        	equ VK_4
 191+ E000              KeyCode_RollLeft     	equ VK_O
 192+ E000              KeyCode_RollRight    	equ VK_P
 193+ E000              KeyCode_Dive         	equ VK_Q
 194+ E000              KeyCode_Climb        	equ VK_A
 195+ E000              KeyCode_Accellerate  	equ VK_W
 196+ E000              KeyCode_Decellerate  	equ VK_S
 197+ E000              KeyCode_FireLaser    	equ VK_SPACE
 198+ E000              KeyCode_TargetMissle 	equ VK_T
 199+ E000              KeyCode_FireMissile  	equ VK_STOP
 200+ E000              KeyCode_Find        	equ VK_F
 201+ E000              KeyCode_UnarmMissile 	equ VK_R
 202+ E000              KeyCode_ECM          	equ VK_E
 203+ E000              KeyCode_EnergyBomb   	equ VK_U
 204+ E000              KeyCode_EscapePod    	equ VK_CAPS
 205+ E000              KeyCode_DockingComp  	equ VK_N
 206+ E000              KeyCode_Hyperspace   	equ VK_H
 207+ E000              KeyCode_Distance     	equ VK_J
 208+ E000              KeyCode_HomeCursor   	equ VK_G
 209+ E000              KeyCode_Launch       	equ VK_L
 210+ E000              KeyCode_BuyCargo     	equ VK_B
 211+ E000              KeyCode_SellCargo    	equ VK_V
 212+ E000              KeyCode_Equip        	equ VK_C
 213+ E000              KeyCode_GalacticChrt 	equ VK_5
 214+ E000              KeyCode_LocalChart   	equ VK_6
 215+ E000              KeyCode_MarketPrices 	equ VK_7
 216+ E000              KeyCode_Status       	equ VK_8
 217+ E000              KeyCode_Inventory    	equ VK_9
 218+ E000              KeyCode_GameSkip     	equ VK_Z
 219+ E000              KeyCode_Save         	equ VK_O
 220+ E000              KeyCode_Freeze       	equ VK_B
 221+ E000              KeyCode_Resume       	equ VK_L
 222+ E000              KeyCode_Recentre     	equ VK_STOP
 223+ E000              KeyCode_Quit         	equ VK_Y
 224+ E000              KeyCode_PlanetData   	equ VK_0
 225+ E000              KeyCode_CursorUp        equ VK_Q
 226+ E000              KeyCode_CursorDown      equ VK_A
 227+ E000              KeyCode_PressedYes      equ VK_Y
 228+ E000              KeyCode_PressedNo       equ VK_N
 229+ E000              KeyCode_Warp            equ VK_J
 230+ E000              KeyCode_ExtMarket       equ VK_SEMI
 231+ E000              KeyCode_ExtEquip        equ VK_QUOTE
 232+ E000              KeyCode_ExtPlanet       equ VK_COMMA
 233+ E000              KeyCode_ExtNearest      equ VK_STOP
 234+ E000              KeyCode_ExtCurUp        equ VK_UP
 235+ E000              KeyCode_ExtCurDown      equ VK_DOWN
 236+ E000              KeyCode_ExtCurLeft      equ VK_LEFT
 237+ E000              KeyCode_ExtCurRight     equ VK_RIGHT
 238+ E000              KeyCode_ExtDelete       equ VK_DELETE
 239+ E000              KeyCode_ExtFindSystem   equ VK_EDIT
 240+ E000              KeyCode_ExtEscapePod    equ VK_BREAK
 241+ E000              KeyCode_ExtInventory    equ VK_INV_VID
 242+ E000              KeyCode_ExtStatus       equ VK_TRUE_VID
 243+ E000              KeyCode_ExtGlactic      equ VK_GRAPH
 244+ E000              KeyCode_ExtLocal        equ VK_EXTCAPS
 245+ E000              KeyCode_ExtSystemJump   equ VK_EXTEND
 246+ E000
 247+ E000 00 00 00...  Keys					DS	55          ; This is the list of key states for all the VK keys presssed i.e. VK_CAPS through to VK_B
 248+ E037              c_KeyBoardLen 			equ $ - Keys
 249+ E037 00 00 00...  RawKeys					DS	10          ; increased for extended keys
 250+ E041 FE FD FB F7  KeyAddrTab				DB	$FE, $FD, $FB, $F7, $EF, $DF, $BF, $7F
 250+ E045 EF DF BF 7F
 251+ E049              ; Now keyboard map lists each game key and the corresponding address in the Keys table to get the value. This way redefining keys is just a case
 252+ E049              ; of updating this table with the respective location to look up
 253+ E049              ; key list sequence is in table above
 254+ E049 0F E0 10 E0  KeyboardMap             DW  Keys+KeyCode_Front        ,Keys+KeyCode_Aft          ,Keys+KeyCode_Left         ,Keys+KeyCode_Right        ,Keys+KeyCode_RollLeft
 254+ E04D 11 E0 12 E0
 254+ E051 1A E0
 255+ E053 19 E0 0A E0                          DW  Keys+KeyCode_RollRight    ,Keys+KeyCode_Dive         ,Keys+KeyCode_Climb        ,Keys+KeyCode_Accellerate  ,Keys+KeyCode_Decellerate
 255+ E057 05 E0 0B E0
 255+ E05B 06 E0
 256+ E05D 23 E0 0E E0                          DW  Keys+KeyCode_FireLaser    ,Keys+KeyCode_TargetMissle ,Keys+KeyCode_FireMissile  ,Keys+KeyCode_UnarmMissile ,Keys+KeyCode_ECM
 256+ E061 2B E0 0D E0
 256+ E065 0C E0
 257+ E067 1C E0 00 E0                          DW  Keys+KeyCode_EnergyBomb   ,Keys+KeyCode_EscapePod    ,Keys+KeyCode_DockingComp  ,Keys+KeyCode_Hyperspace   ,Keys+KeyCode_Distance
 257+ E06B 26 E0 22 E0
 257+ E06F 21 E0
 258+ E071 09 E0 1F E0                          DW  Keys+KeyCode_HomeCursor   ,Keys+KeyCode_Launch       ,Keys+KeyCode_BuyCargo     ,Keys+KeyCode_SellCargo    ,Keys+KeyCode_Equip
 258+ E075 27 E0 04 E0
 258+ E079 03 E0
 259+ E07B 13 E0 18 E0                          DW  Keys+KeyCode_GalacticChrt ,Keys+KeyCode_LocalChart   ,Keys+KeyCode_MarketPrices ,Keys+KeyCode_Status       ,Keys+KeyCode_Inventory
 259+ E07F 17 E0 16 E0
 259+ E083 15 E0
 260+ E085 01 E0 1A E0                          DW  Keys+KeyCode_GameSkip     ,Keys+KeyCode_Save         ,Keys+KeyCode_Freeze       ,Keys+KeyCode_Resume       ,Keys+KeyCode_Recentre
 260+ E089 27 E0 1F E0
 260+ E08D 2B E0
 261+ E08F 1D E0 14 E0                          DW  Keys+KeyCode_Quit         ,Keys+KeyCode_PlanetData   ,Keys+KeyCode_CursorUp     ,Keys+KeyCode_CursorDown   ,Keys+KeyCode_Find
 261+ E093 0A E0 05 E0
 261+ E097 08 E0
 262+ E099 1D E0 26 E0                          DW  Keys+KeyCode_PressedYes   ,Keys+KeyCode_PressedNo    ,Keys+KeyCode_Warp         ,Keys+KeyCode_ExtMarket    ,Keys+KeyCode_ExtEquip
 262+ E09D 21 E0 28 E0
 262+ E0A1 29 E0
 263+ E0A3 2A E0 2B E0                          DW  Keys+KeyCode_ExtPlanet    ,Keys+KeyCode_ExtNearest   ,Keys+KeyCode_ExtCurUp     ,Keys+KeyCode_ExtCurDown   ,Keys+KeyCode_ExtCurLeft
 263+ E0A7 2C E0 2D E0
 263+ E0AB 2E E0
 264+ E0AD 2F E0 30 E0                          DW  Keys+KeyCode_ExtCurRight  ,Keys+KeyCode_ExtDelete    ,Keys+KeyCode_ExtFindSystem,Keys+KeyCode_ExtEscapePod ,Keys+KeyCode_ExtInventory
 264+ E0B1 31 E0 32 E0
 264+ E0B5 33 E0
 265+ E0B7 34 E0 35 E0                          DW  Keys+KeyCode_ExtStatus    ,Keys+KeyCode_ExtGlactic   ,Keys+KeyCode_ExtLocal     ,Keys+KeyCode_ExtSystemJump
 265+ E0BB 36 E0 37 E0
 266+ E0BF
 267+ E0BF
 268+ E0BF 3F 5A 58 43  ASCII_Map:              DB "?","Z","X","C","V"
 268+ E0C3 56
 269+ E0C4 41 53 44 46                          DB "A","S","D","F","G"
 269+ E0C8 47
 270+ E0C9 51 57 45 52                          DB "Q","W","E","R","T"
 270+ E0CD 54
 271+ E0CE 31 32 33 34                          DB "1","2","3","4","5"
 271+ E0D2 35
 272+ E0D3 30 39 38 37                          DB "0","9","8","7","6"
 272+ E0D7 36
 273+ E0D8 50 4F 49 55                          DB "P","O","I","U","Y"
 273+ E0DC 59
 274+ E0DD 3E 4C 4B 4A                          DB ">","L","K","J","H"
 274+ E0E1 48
 275+ E0E2 20 5E 4D 4E                          DB " ","^","M","N","B"
 275+ E0E6 42
 276+ E0E7 3B 22 2C 2E                          DB ";",'"',",",".","^","v","[","]"  ; Extended keys register 0 semicolon, quote, comman, fullstop, up, down, left, right
 276+ E0EB 5E 76 5B 5D
 277+ E0EF 23 65 62 69                          DB "#","e","b","i","t","g","c","x"  ; Extended keys register 1 delete, edit, break, inv video, true video graph, caps, extend
 277+ E0F3 74 67 63 78
 278+ E0F7              ; mapping of a code to the lookup table Keyboard map. So if you are using an addr_Pressed you can then fetch from KeyboardMap the address in Keys
 279+ E0F7              ; for the raw key press status
 280+ E0F7              addr_Pressed_Front         equ KeyboardMap+c_Pressed_Front
 281+ E0F7              addr_Pressed_Aft           equ KeyboardMap+c_Pressed_Aft
 282+ E0F7              addr_Pressed_Left          equ KeyboardMap+c_Pressed_Left
 283+ E0F7              addr_Pressed_Right         equ KeyboardMap+c_Pressed_Right
 284+ E0F7              addr_Pressed_RollLeft      equ KeyboardMap+c_Pressed_RollLeft
 285+ E0F7              addr_Pressed_RollRight     equ KeyboardMap+c_Pressed_RollRight
 286+ E0F7              addr_Pressed_Dive          equ KeyboardMap+c_Pressed_Dive
 287+ E0F7              addr_Pressed_Climb         equ KeyboardMap+c_Pressed_Climb
 288+ E0F7              addr_Pressed_Accellerate   equ KeyboardMap+c_Pressed_Accellerate
 289+ E0F7              addr_Pressed_Decellerate   equ KeyboardMap+c_Pressed_Decellerate
 290+ E0F7              addr_Pressed_FireLaser     equ KeyboardMap+c_Pressed_FireLaser
 291+ E0F7              addr_Pressed_TargetMissle  equ KeyboardMap+c_Pressed_TargetMissle
 292+ E0F7              addr_Pressed_FireMissile   equ KeyboardMap+c_Pressed_FireMissile
 293+ E0F7              addr_Pressed_UnarmMissile  equ KeyboardMap+c_Pressed_UnarmMissile
 294+ E0F7              addr_Pressed_ECM           equ KeyboardMap+c_Pressed_ECM
 295+ E0F7              addr_Pressed_EnergyBomb    equ KeyboardMap+c_Pressed_EnergyBomb
 296+ E0F7              addr_Pressed_EscapePod     equ KeyboardMap+c_Pressed_EscapePod
 297+ E0F7              addr_Pressed_DockingComp   equ KeyboardMap+c_Pressed_DockingComp
 298+ E0F7              addr_Pressed_Hyperspace    equ KeyboardMap+c_Pressed_Hyperspace
 299+ E0F7              addr_Pressed_Distance      equ KeyboardMap+c_Pressed_Distance
 300+ E0F7              addr_Pressed_HomeCursor    equ KeyboardMap+c_Pressed_HomeCursor
 301+ E0F7              addr_Pressed_Launch        equ KeyboardMap+c_Pressed_Launch
 302+ E0F7              addr_Pressed_BuyCargo      equ KeyboardMap+c_Pressed_BuyCargo
 303+ E0F7              addr_Pressed_SellCargo     equ KeyboardMap+c_Pressed_SellCargo
 304+ E0F7              addr_Pressed_Equip         equ KeyboardMap+c_Pressed_Equip
 305+ E0F7              addr_Pressed_GalacticChrt  equ KeyboardMap+c_Pressed_GalacticChrt
 306+ E0F7              addr_Pressed_LocalChart    equ KeyboardMap+c_Pressed_LocalChart
 307+ E0F7              addr_Pressed_MarketPrices  equ KeyboardMap+c_Pressed_MarketPrices
 308+ E0F7              addr_Pressed_Status        equ KeyboardMap+c_Pressed_Status
 309+ E0F7              addr_Pressed_Inventory     equ KeyboardMap+c_Pressed_Inventory
 310+ E0F7              addr_Pressed_GameSkip      equ KeyboardMap+c_Pressed_GameSkip
 311+ E0F7              addr_Pressed_Save          equ KeyboardMap+c_Pressed_Save
 312+ E0F7              addr_Pressed_Freeze        equ KeyboardMap+c_Pressed_Freeze
 313+ E0F7              addr_Pressed_Resume        equ KeyboardMap+c_Pressed_Resume
 314+ E0F7              addr_Pressed_Recentre      equ KeyboardMap+c_Pressed_Recentre
 315+ E0F7              addr_Pressed_Quit          equ KeyboardMap+c_Pressed_Quit
 316+ E0F7              addr_Pressed_PlanetData    equ KeyboardMap+c_Pressed_PlanetData
 317+ E0F7              addr_Pressed_CursorUp      equ KeyboardMap+c_Pressed_CursorUp
 318+ E0F7              addr_Pressed_CursorDown    equ KeyboardMap+c_Pressed_CursorDown
 319+ E0F7              addr_Pressed_Find          equ KeyboardMap+c_Pressed_Find
 320+ E0F7              addr_Pressed_Warp          equ KeyboardMap+c_Pressed_Warp
 321+ E0F7
 322+ E0F7
 323+ E0F7              MIsKeyPressed:          MACRO   keyaddress, misstarget
 324+ E0F7 ~                                    MMUSelectKeyboard
 325+ E0F7 ~                                    ld      hl,(keyaddress)
 326+ E0F7 ~                                    ld      a,(hl)
 327+ E0F7 ~                                    JumpIfAIsZero   misstarget
 328+ E0F7                                      ENDM
 329+ E0F7
 330+ E0F7
 331+ E0F7 21 00 E0     init_keyboard:          ld		hl,Keys                         ; no key s are pressed by default
 332+ E0FA 11 37 00                             ld		de, c_KeyBoardLen               ;
 333+ E0FD 3E 00                                ld		a,0                             ;
 334+ E0FF CD 32 7E                             call	memfill_dma                     ;
 335+ E102 C9                                   ret                                     ;
 336+ E103
 337+ E103
 338+ E103
 339+ E103 DD 21 37 E0  scan_keyboard:          ld		ix,RawKeys                      ; hl = table of raw IO port readings
 340+ E107 21 41 E0                             ld		hl,KeyAddrTab                   ; de = table of IO ports to read
 341+ E10A 0E 08                                ld		c,8                             ; 8 ports to ready
 342+ E10C 11 00 E0                             ld      de,Keys                         ; ix = table of key states from raw read
 343+ E10F 7E           .PortReadLoop:          ld		a,(hl)							; Set up port to read as (hl)$FE
 344+ E110 DB FE                                in		a,($FE)							; read port to a
 345+ E112 DD 77 00                             ld      (ix+0),a                        ; save raw scan
 346+ E115 DD 23                                inc     ix
 347+ E117 23                                   inc		hl                              ; and ready for next read
 348+ E118 06 05        .ProcessInputBits:      ld		b,5								; loop all bits (there are only 5 keys to a group)
 349+ E11A 1F           .ProcessBitsLoop:       rra                                     ; shit bit 0 into carry
 350+ E11B 30 08                                jr      nc,.SetKeyPressed               ; low bit means it was pressed
 351+ E11D FD 6F                                ld      iyl,a
 352+ E11F                                      ZeroA
 352+ E11F AF          >                        xor a
 353+ E120 C3 2D E1                             jp      .SetKey
 354+ E123 20 0B                                jr		nz,.SkipKeySet
 355+ E125 FD 6F        .SetKeyPressed:	        ld      iyl,a                           ; save current input byte
 356+ E127 1A                                   ld      a,(de)                          ; get current keystate
 357+ E128 FE 02                                cp      2
 358+ E12A 28 02                                jr      z,.AlreadyHeld
 359+ E12C 3C                                   inc     a                               ; and increment by 1 as its moved from previous state
 360+ E12D 12           .SetKey:                ld		(de),a				  	        ; save key Pressed state
 361+ E12E FD 7D        .AlreadyHeld:           ld      a,iyl                           ; and retrieve the current input byte
 362+ E130 13           .SkipKeySet:	        inc		de								; move to next key
 363+ E131 10 E7                                djnz	.ProcessBitsLoop				; Process all key group bits
 364+ E133 0D                                   dec     c                               ; thats one row of bits all processed
 365+ E134 20 D9                                jr      nz,.PortReadLoop				; Read next input port
 366+ E136              .ReadExtend0:           GetNextReg EXTENDED_KEYS_0_REGISTER
 366+ E136 01 3B 24    >            ld bc,$243B
 366+ E139 3E B0       >            ld a,EXTENDED_KEYS_0_REGISTER
 366+ E13B ED 79       >            out (c),a
 366+ E13D 04          >            inc b
 366+ E13E ED 78       >            in a,(c)
 367+ E140 32 3F E0                             ld      (RawKeys+8),a                   ; save to extended slot
 368+ E143 06 08                                ld      b,8
 369+ E145 21 28 E0                             ld      hl,Keys + VK_SEMI
 370+ E148 17           .ProcessExtend0:        rla                                     ; shift bits left into carry for extended keys
 371+ E149 30 04                                jr      nc,.SetExtend0KeyPressed
 372+ E14B              .Extend0NotPressed:     ZeroA
 372+ E14B AF          >                        xor a
 373+ E14C C3 55 E1                             jp      .SetExtend0Key
 374+ E14F 7E           .SetExtend0KeyPressed:  ld      a,(hl)
 375+ E150 FE 02                                cp      2
 376+ E152 28 02                                jr      z,.Extend0AlreadyHeld
 377+ E154 3C                                   inc     a
 378+ E155 77           .SetExtend0Key:         ld      (hl),a
 379+ E156 23           .Extend0AlreadyHeld:    inc     hl
 380+ E157 10 EF                                djnz    .ProcessExtend0
 381+ E159              .ReadExtend1:           GetNextReg EXTENDED_KEYS_1_REGISTER
 381+ E159 01 3B 24    >            ld bc,$243B
 381+ E15C 3E B1       >            ld a,EXTENDED_KEYS_1_REGISTER
 381+ E15E ED 79       >            out (c),a
 381+ E160 04          >            inc b
 381+ E161 ED 78       >            in a,(c)
 382+ E163 32 40 E0                             ld      (RawKeys+9),a                      ; save to extended slot
 383+ E166 06 08                                ld      b,8
 384+ E168 21 30 E0                             ld      hl,Keys + VK_DELETE
 385+ E16B 17           .ProcessExtend1:        rla                                     ; shift bits left into carry for extended keys
 386+ E16C 30 04                                jr      nc,.SetExtend1KeyPressed
 387+ E16E              .Extend1NotPressed:     ZeroA
 387+ E16E AF          >                        xor a
 388+ E16F C3 78 E1                             jp      .SetExtend1Key
 389+ E172 7E           .SetExtend1KeyPressed:  ld      a,(hl)
 390+ E173 FE 02                                cp      2
 391+ E175 28 02                                jr      z,.Extend1AlreadyHeld
 392+ E177 3C                                   inc     a
 393+ E178 77           .SetExtend1Key:         ld      (hl),a
 394+ E179 23           .Extend1AlreadyHeld:    inc     hl
 395+ E17A 10 EF                                djnz    .ProcessExtend1
 396+ E17C C9                                   ret
 397+ E17D
 398+ E17D
 399+ E17D
 400+ E17D              GetKeyStateAddressDE:   MACRO
 401+ E17D ~                                    ld      hl,KeyboardMap                  ; work our address to read from
 402+ E17D ~                                    add     hl,a
 403+ E17D ~                                    ld      e,(hl)
 404+ E17D ~                                    inc     hl
 405+ E17D ~                                    ld      d,(hl)                          ; now de = address in keypress list
 406+ E17D                                      ENDM
 407+ E17D
 408+ E17D              GetKeyStateAddressHL:   MACRO
 409+ E17D ~                                    ld      hl,KeyboardMap                  ; work our address to read from
 410+ E17D ~                                    add     hl,a
 411+ E17D ~                                    ld      a,(hl)
 412+ E17D ~                                    inc     hl
 413+ E17D ~                                    ld      h,(hl)                          ; now hl = address in keypress list
 414+ E17D ~                                    ld      l,a
 415+ E17D                                      ENDM
 416+ E17D
 417+ E17D
 418+ E17D              ;;old debug codeCurrentX            DB 0
 419+ E17D              ;;old debug codeCurrentY            DB 0
 420+ E17D              ;;old debug code
 421+ E17D              ;;old debug codedisplayKeyStatus:       xor         a
 422+ E17D              ;;old debug code                        ld          (CurrentX),a
 423+ E17D              ;;old debug code                        ld          hl,RawKeys
 424+ E17D              ;;old debug code                        ld          a,(hl)
 425+ E17D              ;;old debug code                        and         %00011111
 426+ E17D              ;;old debug code                        ld          b,5
 427+ E17D              ;;old debug code.displayLoop:           push        bc,,hl
 428+ E17D              ;;old debug code                        rra
 429+ E17D              ;;old debug code                        jr          c,.displayNoPress
 430+ E17D              ;;old debug code.displayPress:          push        af
 431+ E17D              ;;old debug code                        ld          a,(CurrentX)
 432+ E17D              ;;old debug code                        ld          e,a
 433+ E17D              ;;old debug code                        ld          a,(CurrentY)
 434+ E17D              ;;old debug code                        ld          d,a
 435+ E17D              ;;old debug code                        ld          a,'*'
 436+ E17D              ;;old debug code                        MMUSelectLayer1
 437+ E17D              ;;old debug code                        call        l1_print_char
 438+ E17D              ;;old debug code                        ld          a,(CurrentX)
 439+ E17D              ;;old debug code                        add         a,8
 440+ E17D              ;;old debug code                        ld          (CurrentX),a
 441+ E17D              ;;old debug code                        pop         af
 442+ E17D              ;;old debug code                        pop         bc,,hl
 443+ E17D              ;;old debug code                        djnz        .displayLoop
 444+ E17D              ;;old debug code                        ret
 445+ E17D              ;;old debug code.displayNoPress:        push        af
 446+ E17D              ;;old debug code                        ld          a,(CurrentX)
 447+ E17D              ;;old debug code                        ld          e,a
 448+ E17D              ;;old debug code                        ld          a,(CurrentY)
 449+ E17D              ;;old debug code                        ld          d,a
 450+ E17D              ;;old debug code                        ld          a,'O'
 451+ E17D              ;;old debug code                        MMUSelectLayer1
 452+ E17D              ;;old debug code                        call        l1_print_char
 453+ E17D              ;;old debug code                        ld          a,(CurrentX)
 454+ E17D              ;;old debug code                        add         a,8
 455+ E17D              ;;old debug code                        ld          (CurrentX),a
 456+ E17D              ;;old debug code                        pop         af
 457+ E17D              ;;old debug code                        pop         bc,,hl
 458+ E17D              ;;old debug code                        djnz        .displayLoop
 459+ E17D              ;;old debug code                        ret
 460+ E17D              ;;old debug code
 461+ E17D              ;;old debug codedisplayDownStatus:      ld  a,(Keys+      KeyCode_CursorUp)
 462+ E17D              ;;old debug code                        cp  0
 463+ E17D              ;;old debug code                        jr      z,.displayNoUp
 464+ E17D              ;;old debug code                        cp  1
 465+ E17D              ;;old debug code                        jr      z,.displayUp
 466+ E17D              ;;old debug code.displayHeld:           ld      de,8*15
 467+ E17D              ;;old debug code                        ld      a,"*"
 468+ E17D              ;;old debug code                        MMUSelectLayer1
 469+ E17D              ;;old debug code                        call        l1_print_char
 470+ E17D              ;;old debug code                        ret
 471+ E17D              ;;old debug code.displayUp:             ld      de,8*15
 472+ E17D              ;;old debug code                        ld      a,"+"
 473+ E17D              ;;old debug code                        MMUSelectLayer1
 474+ E17D              ;;old debug code                        call        l1_print_char
 475+ E17D              ;;old debug code                        ret
 476+ E17D              ;;old debug code.displayNoUp:             ld      de,8*15
 477+ E17D              ;;old debug code                        ld      a,"O"
 478+ E17D              ;;old debug code                        MMUSelectLayer1
 479+ E17D              ;;old debug code                        call        l1_print_char
 480+ E17D              ;;old debug code                        ret
 481+ E17D              ;;old debug code
 482+ E17D
 483+ E17D
 484+ E17D              ; call with a = c_Pressed key, will then read mapping does this with keyboard scan, waits until key gets to state 1, if it was already held then#
 485+ E17D              ; it will have to be let go to reset of 0 and scan again
 486+ E17D              ; Deprecated as not used as yet
 487+ E17D              ;;;;;;wait_for_key_a_press:   GetKeyStateAddressHL
 488+ E17D              ;;;;;;                        push    hl
 489+ E17D              ;;;;;;.wait_loop:             call    scan_keyboard
 490+ E17D              ;;;;;;                        pop     hl                              ; get key address into hl
 491+ E17D              ;;;;;;                        push    hl
 492+ E17D              ;;;;;;                        ld      a,(hl)
 493+ E17D              ;;;;;;                        JumpIfANENusng  1,.wait_loop             ; will also loop if held down when entering this routine
 494+ E17D              ;;;;;;                        pop     hl                              ; tidy up rogue push, less t states than detecting if we want to push or not
 495+ E17D              ;;;;;;                        ret
 496+ E17D              ;;;;;;; call with a = c_Pressed key, will then read mapping does this with keyboard scan waits until key gets to state 2
 497+ E17D              ;;;;;;wait_for_key_a_held:    GetKeyStateAddressDE
 498+ E17D              ;;;;;;                        push    hl
 499+ E17D              ;;;;;;.wait_loop:             call    scan_keyboard
 500+ E17D              ;;;;;;                        pop     hl
 501+ E17D              ;;;;;;                        push    hl
 502+ E17D              ;;;;;;                        ld      a,(hl)
 503+ E17D              ;;;;;;                        JumpIfALTNusng  2, .wait_loop
 504+ E17D              ;;;;;;                        pop     hl
 505+ E17D              ;;;;;;                        ret
 506+ E17D
 507+ E17D              ; Gets the current keystate of the c_Pressed Key in a register
 508+ E17D 21 00 E0     get_vkey_a_state:       ld      hl,Keys
 509+ E180 ED 31                                add     hl,a
 510+ E182 7E                                   ld      a,(hl)
 511+ E183 C9                                   ret
 512+ E184
 513+ E184 21 00 E0     is_vkey_held:           ld      hl,Keys
 514+ E187 ED 31                                add     hl,a
 515+ E189 7E                                   ld      a,(hl)
 516+ E18A E6 02                                and     Bit1Only
 517+ E18C C9                                   ret
 518+ E18D
 519+ E18D 21 00 E0     is_vkey_pressed:        ld      hl,Keys
 520+ E190 ED 31                                add     hl,a
 521+ E192 7E                                   ld      a,(hl)
 522+ E193 FE 01                                cp      1
 523+ E195 C9                                   ret
 524+ E196
 525+ E196              get_key_a_state:        GetKeyStateAddressHL                    ; reads a mapped key and sets a to key staus, e.g. 0 1 or >=2 DOES NOT SCAN KEYBOARD
 525+ E196 21 49 E0    >                        ld      hl,KeyboardMap                  ; work our address to read from
 525+ E199 ED 31       >                        add     hl,a
 525+ E19B 7E          >                        ld      a,(hl)
 525+ E19C 23          >                        inc     hl
 525+ E19D 66          >                        ld      h,(hl)                          ; now hl = address in keypress list
 525+ E19E 6F          >                        ld      l,a
 526+ E19F 7E                                   ld      a,(hl)                          ; a = keystate
 527+ E1A0 C9                                   ret
 528+ E1A1
 529+ E1A1              ; sets they keystate of c pressed key in a register to 1 (pressed)
 530+ E1A1              ; This will be used by auto dock
 531+ E1A1              force_key_press:        GetKeyStateAddressHL                    ; read key locations
 531+ E1A1 21 49 E0    >                        ld      hl,KeyboardMap                  ; work our address to read from
 531+ E1A4 ED 31       >                        add     hl,a
 531+ E1A6 7E          >                        ld      a,(hl)
 531+ E1A7 23          >                        inc     hl
 531+ E1A8 66          >                        ld      h,(hl)                          ; now hl = address in keypress list
 531+ E1A9 6F          >                        ld      l,a
 532+ E1AA 3E 01                                ld      a,1
 533+ E1AC 77                                   ld      (hl),a
 534+ E1AD C9                                   ret
 535+ E1AE
 536+ E1AE              is_key_up_state:        GetKeyStateAddressHL
 536+ E1AE 21 49 E0    >                        ld      hl,KeyboardMap                  ; work our address to read from
 536+ E1B1 ED 31       >                        add     hl,a
 536+ E1B3 7E          >                        ld      a,(hl)
 536+ E1B4 23          >                        inc     hl
 536+ E1B5 66          >                        ld      h,(hl)                          ; now hl = address in keypress list
 536+ E1B6 6F          >                        ld      l,a
 537+ E1B7 7E                                   ld      a,(hl)
 538+ E1B8 FE 00                                cp      0
 539+ E1BA C9                                   ret
 540+ E1BB
 541+ E1BB              ; returns z is set if c_ key is pressed
 542+ E1BB              is_key_pressed:         GetKeyStateAddressHL
 542+ E1BB 21 49 E0    >                        ld      hl,KeyboardMap                  ; work our address to read from
 542+ E1BE ED 31       >                        add     hl,a
 542+ E1C0 7E          >                        ld      a,(hl)
 542+ E1C1 23          >                        inc     hl
 542+ E1C2 66          >                        ld      h,(hl)                          ; now hl = address in keypress list
 542+ E1C3 6F          >                        ld      l,a
 543+ E1C4 7E                                   ld      a,(hl)                          ; a = keystate
 544+ E1C5 FE 01                                cp      1                               ; we cant just test bit 0 as this may have been held long
 545+ E1C7 C9                                   ret
 546+ E1C8
 547+ E1C8              ; returns nz is set if c_ key is held, if key was held then keystate would be 2 or 3, i.e. bit 1 set
 548+ E1C8              is_key_held:            GetKeyStateAddressHL
 548+ E1C8 21 49 E0    >                        ld      hl,KeyboardMap                  ; work our address to read from
 548+ E1CB ED 31       >                        add     hl,a
 548+ E1CD 7E          >                        ld      a,(hl)
 548+ E1CE 23          >                        inc     hl
 548+ E1CF 66          >                        ld      h,(hl)                          ; now hl = address in keypress list
 548+ E1D0 6F          >                        ld      l,a
 549+ E1D1 7E                                   ld      a,(hl)                          ; a = keystate
 550+ E1D2 E6 02                                and     Bit1Only                        ; clear out bit 1 which elimiates state 3, so it can now be 2 (held) or 0 (not pressed or one off)
 551+ E1D4 C9                                   ret
 552+ E1D5
 553+ E1D5              ; checks to see if any key is pressed in the key table
 554+ E1D5 21 00 E0     is_any_key_pressed:     ld      hl,Keys
 555+ E1D8 01 28 00                             ld      bc,40
 556+ E1DB 3E 01                                ld      a,1
 557+ E1DD ED B1                                cpir                                    ; search for the value 1
 558+ E1DF 28 03                                jr      z,.KeyPressed                   ; if a key was pressed then handle press
 559+ E1E1                                      SetAFalse
 559+ E1E1 3E FF       >                        ld      a,$FF
 560+ E1E3 C9                                   ret
 561+ E1E4 3E 27        .KeyPressed:            ld      a,39                            ; so c will be how many keys still to scan
 562+ E1E6 91                                   sub     c                               ; so a = 40 - c to get to result
 563+ E1E7 C9                                   ret
 564+ E1E8
 565+ E1E8 21 00 E0     is_any_key_held:        ld      hl,Keys
 566+ E1EB 06 28                                ld      b,40
 567+ E1ED 0E 00                                ld      c,0
 568+ E1EF 7E           .KeyReadLoop:           ld      a,(hl)
 569+ E1F0 E6 02                                and     Bit1Only                        ; clear out bit 1 which elimiates state 3, so it can now be 2 (held) or 0 (not pressed or one off)
 570+ E1F2 C2 FC E1                             jp      nz,.KeyPressed
 571+ E1F5 23                                   inc     hl
 572+ E1F6 0C                                   inc     c
 573+ E1F7 10 F6                                djnz    .KeyReadLoop
 574+ E1F9                                      SetAFalse
 574+ E1F9 3E FF       >                        ld      a,$FF
 575+ E1FB C9                                   ret
 576+ E1FC 79           .KeyPressed:            ld      a,c
 577+ E1FD C9                                   ret
 578+ E1FE
 579+ E1FE
 580+ E1FE 21 41 E0     WaitForNoKey:           ld      hl,KeyAddrTab                   ; de = table of IO ports to read
 581+ E201 06 08                                ld		b,8                             ; 8 ports to ready
 582+ E203 7E           .PortReadLoop:          ld		a,(hl)							; Set up port to read as (hl)$FE
 583+ E204 DB FE                                in		a,($FE)							; read port to a
 584+ E206 E6 1F                                and     %00011111
 585+ E208 FE 1F                                cp      %00011111
 586+ E20A 20 F2                                jr      nz ,WaitForNoKey
 587+ E20C 23                                   inc		hl                              ; and ready for next read
 588+ E20D 10 F4                                djnz    .PortReadLoop
 589+ E20F C9                                   ret
 590+ E210
 591+ E210 F5 D5 C5 E5  WaitForAnyKey:          push    af,,de,,bc,,hl
 592+ E214 CD FE E1                             call    WaitForNoKey
 593+ E217 21 41 E0     .waitKeyLoop:           ld		hl,KeyAddrTab                   ; de = table of IO ports to read
 594+ E21A 06 08                                ld		b,8                             ; 8 ports to ready
 595+ E21C 7E           .PortReadLoop:          ld		a,(hl)							; Set up port to read as (hl)$FE
 596+ E21D DB FE                                in		a,($FE)							; read port to a
 597+ E21F E6 1F                                and     %00011111
 598+ E221 FE 1F                                cp      %00011111
 599+ E223 C2 2D E2                             jp      nz,.WaitComplete
 600+ E226 C0                                   ret     nz
 601+ E227 23                                   inc		hl                              ; and ready for next read
 602+ E228 10 F2                                djnz    .PortReadLoop
 603+ E22A C3 17 E2                             jp      .waitKeyLoop
 604+ E22D E1 C1 D1 F1  .WaitComplete:          pop     af,,de,,bc,,hl
 605+ E231 C9                                   ret
 606+ E232
 607+ E232
 608+ E232 00 00 00...  InputString             DS  30              ; used for a 30 character input buffer
 609+ E250 00                                   DB  0               ; end of string marker as a safety
 610+ E251 00           InputLength             DB  0               ; Current String length
 611+ E252 00           InputCursor             DB  0               ; Current Cursor Position
 612+ E253 00           EnterPressed            DB  0               ; zero notpressed FF pressed
 613+ E254 00           InputChanged            DB  0
 614+ E255 00           InsertMode              DB  0
 615+ E256              InputLimit              EQU 20
 616+ E256
 617+ E256 21 32 E2     keyboard_copy_input_to_de:  ld      hl,InputString
 618+ E259 3A 52 E2                                 ld      a,(InputCursor)
 619+ E25C FE 00                                    cp      0
 620+ E25E 28 05                                    jr      z,.NoString
 621+ E260 4F                                       ld      c,a
 622+ E261 06 00                                    ld      b,0
 623+ E263 ED B0                                    ldir
 624+ E265 3E 00        .NoString                   ld      a,0
 625+ E267 12                                       ld      (de),a
 626+ E268 C9                                       ret
 627+ E269
 628+ E269               ;Input routine logic
 629+ E269               ;Intialise input state
 630+ E269
 631+ E269              ; Scans the key pressed to determine if its an alpha, returns ascii code or 0 if not alpha
 632+ E269              ; Input a = key pressed, returns with carry set if no alpha else carry is clear
 633+ E269              isKeyAlpha:             JumpIfALTNusng  "A",   .NotAlpha
 633+ E269 FE 41       >                        cp      "A"
 633+ E26B DA 75 E2    >                        jp		c, .NotAlpha
 634+ E26E                                      JumpIfAGTENusng "Z"+1, .NotAlpha
 634+ E26E FE 5B       >                        cp     "Z"+1
 634+ E270 D2 75 E2    >                        jp		nc,.NotAlpha
 635+ E273                                      ClearCarryFlag
 635+ E273 B7          >                        or a
 636+ E274 C9                                   ret
 637+ E275              .NotAlpha               SetCarryFlag
 637+ E275 37          >                        scf
 638+ E276 C9                                   ret
 639+ E277
 640+ E277 3A 52 E2     InsertKeystroke:        ld      a,(InputCursor)                         ; Current Cursor position
 641+ E27A FE 1E                                cp      30                                      ; protect from buffer overflow
 642+ E27C C8                                   ret     z                                       ; .
 643+ E27D 21 32 E2                             ld      hl,InputString                          ; position hl to position in input string
 644+ E280 ED 31                                add     hl,a                                    ; .
 645+ E282 E5                                   push    hl                                      ; save current cursor position
 646+ E283 47                                   ld      b,a                                     ; as a quick optimisation
 647+ E284                                      JumpIfMemFalse InsertMode, .NoCopyNeeded        ; if we are in overtype mode skip copy
 647+ E284 3A 55 E2    >                        ld      a,(InsertMode)
 647+ E287 A7          >                        and     a
 647+ E288 C2 A8 E2    >                        jp      nz, .NoCopyNeeded
 648+ E28B 3A 51 E2                             ld      a,(InputLength)                         ; no need to shuffle string
 649+ E28E B8                                   cp      b                                       ; if we are at the end already
 650+ E28F 78                                   ld      a,b                                     ; .
 651+ E290 CA A8 E2                             jp      z,.NoCopyNeeded                         ; so we can behave like overtype mode
 652+ E293 11 4F E2                             ld      de,InputString+29                       ; now from the end of the string
 653+ E296 21 4E E2                             ld      hl,InputString+28                       ; .
 654+ E299 06 1D                                ld      b,29                                    ; for up to 29 characters
 655+ E29B 4F                                   ld      c,a                                     ; back to the current cursor position
 656+ E29C C5           .CopyLoop:              push    bc                                      ; save current position
 657+ E29D 7E                                   ld      a,(hl)                                  ; now suffle from left char to right char
 658+ E29E 12                                   ld      (de),a                                  ; .
 659+ E29F 2B                                   dec     hl                                      ; moving back one byte at a time
 660+ E2A0 1B                                   dec     de                                      ;
 661+ E2A1 05                                   dec     b                                       ; and reducing the current copy position
 662+ E2A2 79                                   ld      a,c                                     ; have we reached the input cursor pos
 663+ E2A3 B8                                   cp      b                                       ;
 664+ E2A4 C1                                   pop     bc
 665+ E2A5 C2 9C E2                             jp      nz,.CopyLoop
 666+ E2A8 E1           .NoCopyNeeded:          pop     hl
 667+ E2A9 3A B4 E2                             ld      a,(LastKeyPressed)
 668+ E2AC 77                                   ld      (hl),a
 669+ E2AD 21 51 E2                             ld      hl,InputLength
 670+ E2B0 34                                   inc     (hl)
 671+ E2B1 23                                   inc     hl                                      ;  to input cursor as a short cut to logic
 672+ E2B2 34                                   inc     (hl)
 673+ E2B3 C9                                   ret
 674+ E2B4
 675+ E2B4
 676+ E2B4              ; We won't have any auto repeat on input
 677+ E2B4 00           LastKeyPressed:         db 0
 678+ E2B5
 679+ E2B5              initInputText:          ZeroA
 679+ E2B5 AF          >                        xor a
 680+ E2B6 32 52 E2                             ld      (InputCursor),a
 681+ E2B9 32 B4 E2                             ld      (LastKeyPressed),a
 682+ E2BC 32 51 E2                             ld      (InputLength),a
 683+ E2BF                                      SetMemTrue  InsertMode
 683+ E2BF AF          >                        xor     a
 683+ E2C0 32 55 E2    >                        ld      (InsertMode),a
 684+ E2C3                                      SetMemFalse EnterPressed
 684+ E2C3 3E FF       >                        ld      a,$FF
 684+ E2C5 32 53 E2    >                        ld      (EnterPressed),a
 685+ E2C8                                      SetMemFalse InputChanged
 685+ E2C8 3E FF       >                        ld      a,$FF
 685+ E2CA 32 54 E2    >                        ld      (InputChanged),a
 686+ E2CD 21 32 E2                             ld      hl,InputString
 687+ E2D0 06 1E                                ld      b,30
 688+ E2D2 77           .wipeloop:              ld      (hl),a
 689+ E2D3 23                                   inc     hl
 690+ E2D4 10 FC                                djnz    .wipeloop
 691+ E2D6 C9                                   ret
 692+ E2D7
 693+ E2D7              ;;;InputNameV2:            call    is_any_key_pressed              ; scan for key states
 694+ E2D7              ;;;                        cp      $FF                             ; no key means we reset auto repeat
 695+ E2D7              ;;;                        jp      z,.NoKeyPressed                 ;
 696+ E2D7              ;;;.IsItLastKeyHeld:       ld      hl,LastKeyPressed               ; is it the same key as before
 697+ E2D7              ;;;                        cp      (hl)                            ;
 698+ E2D7              ;;;                        ret     z                               ; if so just ignore it to avoid auto repeat
 699+ E2D7              ;;;.SetNewAntiRepeat:      ld      (LastKeyPressed),a
 700+ E2D7              ;;;.CheckKeyPressed:       call    isKeyAlpha
 701+ E2D7              ;;;                        jp      nc,.AlphaKeyPressed
 702+ E2D7              ;;;.CheckSpaceKeyPressed:  cp      " "
 703+ E2D7              ;;;                        jp      z,.SpacePressed
 704+ E2D7              ;;;.CheckEnterPressed:     cp      ">"
 705+ E2D7              ;;;                        jp      z,.EnterPressed
 706+ E2D7              ;;;.CheckLeftPressed:      cp      "["
 707+ E2D7              ;;;                        jp      z,.LeftPressed
 708+ E2D7              ;;;.CheckRightPressed:     cp      "]"
 709+ E2D7              ;;;                        jp      z,.RightPressed
 710+ E2D7              ;;;.CheckDeletePressed:    cp      "#"
 711+ E2D7              ;;;                        jp      z,.DeletePressed
 712+ E2D7              ;;;.AnyOtherKeyIsIgnored:  ret
 713+ E2D7              ;;;.AlphaKeyPressed:       ld      a,(InputLength)
 714+ E2D7              ;;;                        JumpIfAGTENusng 30,.MaxInputReached
 715+ E2D7              ;;;.InsertKey:             call    InsertKeystroke
 716+ E2D7              ;;;                        ret
 717+ E2D7              ;;;.SpacePressed:          call    InsertKeystroke
 718+ E2D7              ;;;                        ret
 719+ E2D7              ;;;.EnterPressed:
 720+ E2D7              ;;;
 721+ E2D7              ;;;.LeftPressed:           ld      a,(InputCusor)
 722+ E2D7              ;;;                        JumpIfAIsZero, .MaxInputReached
 723+ E2D7              ;;;                        dec     a
 724+ E2D7              ;;;                        ld      (InputCursor),a
 725+ E2D7              ;;;                        ret
 726+ E2D7              ;;;.RightPressed:          ld      a,(InputLength)
 727+ E2D7              ;;;                        inc     a
 728+ E2D7              ;;;                        ld      b,a
 729+ E2D7              ;;;                        ld      a,(InputCursor)
 730+ E2D7              ;;;                        JumpIfMemGTENusng b, .MaxInputReached
 731+ E2D7              ;;;                        inc     a
 732+ E2D7              ;;;                        ld      (InputCursor),a
 733+ E2D7              ;;;                        ret
 734+ E2D7              ;;;.DeletaPressed:         ld      a,(InputCusor)
 735+ E2D7              ;;;                        ld      c,a
 736+ E2D7              ;;;                        JumpIfAisZero, .MaxInputReached
 737+ E2D7              ;;;                        ld      a,(InputLength)
 738+ E2D7              ;;;                        JumpIfAisZero, .MaxInputReached
 739+ E2D7              ;;;                        ld      de,InputString
 740+ E2D7              ;;;                        ld      hl,de
 741+ E2D7              ;;;                        inc     hl
 742+ E2D7              ;;;                        ld      a,(InputLength)                 ; copy backwards
 743+ E2D7              ;;;                        dec     c                               ; for string length - curretn cursor
 744+ E2D7              ;;;                        ld      c,a
 745+ E2D7              ;;;                        ld      b,0
 746+ E2D7              ;;;                        ldir
 747+ E2D7              ;;;                        ret
 748+ E2D7              ;;;GOTTOHERE
 749+ E2D7
 750+ E2D7
 751+ E2D7
 752+ E2D7 C9           .MaxInputReached:       ret ; will add a beep later
 753+ E2D8
 754+ E2D8
 755+ E2D8
 756+ E2D8
 757+ E2D8              .NoKeyPressed:          ZeroA
 757+ E2D8 AF          >                        xor a
 758+ E2D9 32 B4 E2                             ld      (LastKeyPressed),a              ; Clear last key pressed
 759+ E2DC
 760+ E2DC
 761+ E2DC              InputName:              SetMemFalse InputChanged
 761+ E2DC 3E FF       >                        ld      a,$FF
 761+ E2DE 32 54 E2    >                        ld      (InputChanged),a
 762+ E2E1 CD D5 E1                             call    is_any_key_pressed
 763+ E2E4 FE FF                                cp      $FF
 764+ E2E6 C8                                   ret     z
 765+ E2E7 4F           .KeyPressed:            ld      c,a
 766+ E2E8 3A 52 E2                             ld      a,(InputCursor)                 ; No key so we can now look at if we are at the end of the buffer
 767+ E2EB FE 14                                cp      InputLimit                      ; move to variable later and then cp (hl)
 768+ E2ED 28 0B                                jr      z,.DeleteOrEnterOnly            ;
 769+ E2EF 21 BF E0                             ld      hl,ASCII_Map
 770+ E2F2 79                                   ld      a,c
 771+ E2F3 ED 31                                add     hl,a
 772+ E2F5 7E                                   ld      a,(hl)
 773+ E2F6 FE 41                                cp      "A"
 774+ E2F8 30 09                                jr      nc,.AlphaPressed
 775+ E2FA              ; CAPS and Symbol act as delete for now
 776+ E2FA FE 23        .DeleteOrEnterOnly      cp      "#"                             ; if space was  pressed (mapped to Hash in ASCII table))
 777+ E2FC 28 31                                jr      z,.SpacePressed                 ; for now we will ignore the shift and just assume delete
 778+ E2FE FE 3E                                cp      ">"         ; ENTER
 779+ E300 28 17                                jr      z,.EnterPressed
 780+ E302 C9                                   ret
 781+ E303 47           .AlphaPressed:          ld      b,a
 782+ E304 3A 52 E2                             ld      a,(InputCursor)
 783+ E307 4F                                   ld      c,a
 784+ E308 21 32 E2                             ld      hl,InputString
 785+ E30B ED 31                                add     hl,a
 786+ E30D 78                                   ld      a,b
 787+ E30E 70                                   ld      (hl),b
 788+ E30F 79                                   ld      a,c
 789+ E310 21 52 E2                             ld      hl,InputCursor
 790+ E313 34                                   inc     (hl)
 791+ E314                                      SetMemTrue InputChanged
 791+ E314 AF          >                        xor     a
 791+ E315 32 54 E2    >                        ld      (InputChanged),a
 792+ E318 C9                                   ret
 793+ E319 3A 52 E2     .EnterPressed:          ld      a,(InputCursor)
 794+ E31C 21 32 E2                             ld      hl,InputString
 795+ E31F ED 31                                add     hl,a
 796+ E321                                      ZeroA
 796+ E321 AF          >                        xor a
 797+ E322 77                                   ld      (hl),a
 798+ E323                                      SetMemTrue EnterPressed
 798+ E323 AF          >                        xor     a
 798+ E324 32 53 E2    >                        ld      (EnterPressed),a
 799+ E327                                      SetMemTrue InputChanged
 799+ E327 AF          >                        xor     a
 799+ E328 32 54 E2    >                        ld      (InputChanged),a
 800+ E32B CD F7 E0                             call    init_keyboard           ; Flush keyboard status so futher inputs don't auto read the enter key as a second press
 801+ E32E C9                                   ret
 802+ E32F 3A 52 E2     .SpacePressed:          ld      a,(InputCursor)         ; Space = delete
 803+ E332 FE 00                                cp      0                       ; if input is zero length then can not delete
 804+ E334 C8                                   ret     z
 805+ E335 3D                                   dec     a                       ; move back one and update cursor pos
 806+ E336 32 52 E2                             ld      (InputCursor),a         ;
 807+ E339 21 32 E2                             ld      hl,InputString          ; now update end of line to null
 808+ E33C ED 31                                add     hl,a                    ; .
 809+ E33E                                      ZeroA                           ; .
 809+ E33E AF          >                        xor a
 810+ E33F 77                                   ld      (hl),a                  ; .
 811+ E340                                      SetMemTrue InputChanged
 811+ E340 AF          >                        xor     a
 811+ E341 32 54 E2    >                        ld      (InputChanged),a
 812+ E344 C9                                   ret
 813+ E345
 814+ E345              TargetMissileTest:      AnyMissilesLeft
 814+ E345 3A 65 80    >                        ld      a,(NbrMissiles)
 814+ E348 A7          >                        and     a
 815+ E349                                      JumpIfZero      .ClearTargetting
 815+ E349 CA 60 E3    >                        jp	z,.ClearTargetting
 816+ E34C                                      IsMissileLaunchFlagged                      ; if we are comitted to launch
 816+ E34C 3A 58 82    >                        ld      a,(MissileTargettingFlag)
 816+ E34F E6 80       >                        and     $80
 817+ E351 C8                                   ret             z                           ; then don't scan as it will be cleared on launch
 818+ E352 3E 16        .ScanForKey:            ld              a,c_Pressed_TargetMissle    ; if not pressed we are done
 819+ E354 CD BB E1                             call            is_key_pressed              ; .
 820+ E357 C0                                   ret             nz                          ; .
 821+ E358 3A 58 82     .TargetPressed:         ld              a,(MissileTargettingFlag)   ; get flag back
 822+ E35B                                      JumpIfAEqNusng  StageMissileNotTargeting, .SetTargetting
 822+ E35B FE FF       >                        cp     StageMissileNotTargeting
 822+ E35D CA 66 E3    >                        jp      z,.SetTargetting
 823+ E360              .ClearTargetting:       ClearMissileTargetting
 823+ E360 3E FF       >                        ld      a,StageMissileNotTargeting
 823+ E362 32 58 82    >                        ld      (MissileTargettingFlag),a
 824+ E365 C9                                   ret
 825+ E366              .SetTargetting:         SetMissileTargetting
 825+ E366 3E FE       >                        ld      a,StageMissileTargeting
 825+ E368 32 58 82    >                        ld      (MissileTargettingFlag),a
 826+ E36B C9                                   ret
 827+ E36C
 828+ E36C AF           MovementKeyTest:        xor     a
 829+ E36D 32 C1 81                             ld      (CursorKeysPressed),a
 830+ E370 3A C3 7F                             ld      a,(MenuIdMax)
 831+ E373 E6 FC                                and     $FC
 832+ E375 20 26                                jr      nz,CursorKeys
 833+ E377 2A 57 E0     ClimbDiveKeys:          ld      hl,(addr_Pressed_Climb)                 ; Check for Climb
 834+ E37A 7E                                   ld      a,(hl)
 835+ E37B                                      JumpIfAIsZero ScanDiveKey
 835+ E37B A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
 835+ E37C CA 8A E3    >                        jp	    z, ScanDiveKey
 836+ E37F 3A C1 81                             ld      a,(CursorKeysPressed)
 837+ E382 F6 80                                or      CursorClimb
 838+ E384 32 C1 81                             ld      (CursorKeysPressed),a
 839+ E387 C3 C0 E3                             jp      ScanLeftKey
 840+ E38A 2A 55 E0     ScanDiveKey:            ld      hl,(addr_Pressed_Dive)                  ; Check for Dive
 841+ E38D 7E                                   ld      a,(hl)
 842+ E38E                                      JumpIfAIsZero ScanLeftKey
 842+ E38E A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
 842+ E38F CA C0 E3    >                        jp	    z, ScanLeftKey
 843+ E392 3A C1 81                             ld      a,(CursorKeysPressed)
 844+ E395 F6 40                                or      CursorDive
 845+ E397 32 C1 81                             ld      (CursorKeysPressed),a
 846+ E39A C3 C0 E3                             jp      ScanLeftKey
 847+ E39D 2A 93 E0     CursorKeys:             ld      hl,(addr_Pressed_CursorUp)              ; Check cursor keys
 848+ E3A0 7E                                   ld      a,(hl)
 849+ E3A1                                      JumpIfAIsZero ScanCursorDownKey
 849+ E3A1 A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
 849+ E3A2 CA B0 E3    >                        jp	    z, ScanCursorDownKey
 850+ E3A5 3A C1 81                             ld      a,(CursorKeysPressed)
 851+ E3A8 F6 80                                or      CursorClimb
 852+ E3AA 32 C1 81                             ld      (CursorKeysPressed),a
 853+ E3AD C3 C0 E3                             jp      ScanLeftKey
 854+ E3B0 2A 95 E0     ScanCursorDownKey:      ld      hl,(addr_Pressed_CursorDown)
 855+ E3B3 7E                                   ld      a,(hl)
 856+ E3B4                                      JumpIfAIsZero ScanLeftKey
 856+ E3B4 A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
 856+ E3B5 CA C0 E3    >                        jp	    z, ScanLeftKey
 857+ E3B8 3A C1 81                             ld      a,(CursorKeysPressed)
 858+ E3BB F6 40                                or      CursorDive
 859+ E3BD 32 C1 81                             ld      (CursorKeysPressed),a
 860+ E3C0 2A 51 E0     ScanLeftKey:            ld      hl,(addr_Pressed_RollLeft)
 861+ E3C3 7E                                   ld      a,(hl)
 862+ E3C4                                      JumpIfAIsZero ScanRightKey
 862+ E3C4 A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
 862+ E3C5 CA D1 E3    >                        jp	    z, ScanRightKey
 863+ E3C8 3A C1 81                             ld      a,(CursorKeysPressed)
 864+ E3CB F6 20                                or      CursorLeft
 865+ E3CD 32 C1 81                             ld      (CursorKeysPressed),a
 866+ E3D0 C9                                   ret
 867+ E3D1 2A 53 E0     ScanRightKey:           ld      hl,(addr_Pressed_RollRight)
 868+ E3D4 7E                                   ld      a,(hl)
 869+ E3D5                                      JumpIfAIsZero ScanHomeKey
 869+ E3D5 A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
 869+ E3D6 CA E2 E3    >                        jp	    z, ScanHomeKey
 870+ E3D9 3A C1 81                             ld      a,(CursorKeysPressed)
 871+ E3DC F6 10                                or      CursorRight
 872+ E3DE 32 C1 81                             ld      (CursorKeysPressed),a
 873+ E3E1 C9                                   ret
 874+ E3E2 2A 71 E0     ScanHomeKey:            ld      hl,(addr_Pressed_HomeCursor)
 875+ E3E5 7E                                   ld      a,(hl)
 876+ E3E6                                      JumpIfAIsZero ScanRecentreKey
 876+ E3E6 A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
 876+ E3E7 CA F3 E3    >                        jp	    z, ScanRecentreKey
 877+ E3EA 3A C1 81                             ld      a,(CursorKeysPressed)
 878+ E3ED F6 08                                or      CursorHome
 879+ E3EF 32 C1 81                             ld      (CursorKeysPressed),a
 880+ E3F2 C9                                   ret
 881+ E3F3 2A 8D E0     ScanRecentreKey:        ld      hl,(addr_Pressed_Recentre)
 882+ E3F6 7E                                   ld      a,(hl)
 883+ E3F7                                      ReturnIfAIsZero
 883+ E3F7 A7          >                        and     a
 883+ E3F8 C8          >                        ret     z
 884+ E3F9 3A C1 81                             ld      a,(CursorKeysPressed)
 885+ E3FC F6 04                                or      CursorRecenter
 886+ E3FE 32 C1 81                             ld      (CursorKeysPressed),a
 887+ E401 C9                                   ret
 888+ E402
 889+ E402
# file closed: ./Hardware/keyboard.asm
1141  E402                                  DISPLAY "Keyboard ",BankKeyboard," - Bytes free ",/D, $2000 - ($-KeyboardAddr), " - BankKeyboard"
1142  E402                                  ASSERT $-KeyboardAddr <8912, Bank code leaks over 8K boundary
1143  E402              ; Bank 101  -----------------------------------------------------------------------------------------------------------------------
1144  E402                                  SLOT    SoundAddr
1145  E402                                  PAGE    BankSound
1146  E402                                  ORG SoundAddr, BankSound
1147  E000                                  INCLUDE "./Hardware/sound.asm"
# file opened: ./Hardware/sound.asm
   1+ E000
   2+ E000              ;-------------------------------------------------------------------------------------------------
   3+ E000              ;--- Equates for sounds
   4+ E000              ;       DEFINE          USETIMER 1
   5+ E000                     DEFINE          DANUBEATTACK 1
   6+ E000                                      IFDEF   USETIMER
   7+ E000 ~            SOUNDSTEPLENGTH             EQU     25
   8+ E000                                      ENDIF
   9+ E000
  10+ E000
  11+ E000              WriteTurboControlA:     MACRO
  12+ E000 ~                                    ld      bc,TURBO_SOUND_NEXT_CONTROL
  13+ E000 ~                                    out     (c),a
  14+ E000                                      ENDM
  15+ E000
  16+ E000              WriteTurboRegisterA:    MACRO   value
  17+ E000 ~                                    WriteTurboControlA
  18+ E000 ~                                    ld      b,$BF
  19+ E000 ~                                    ld      a,value
  20+ E000 ~                                    out     (c),a
  21+ E000                                      ENDM
  22+ E000
  23+ E000              WriteTurboRegister:     MACRO   register,value
  24+ E000 ~                                    ld      a,register
  25+ E000 ~                                    WriteTurboControlA
  26+ E000 ~                                    ld      b,$BF
  27+ E000 ~                                    ld      a,value
  28+ E000 ~                                    out     (c),a
  29+ E000                                      ENDM
  30+ E000
  31+ E000              WriteAToTurboRegister:  MACRO   register
  32+ E000 ~                                    ex      af,af'
  33+ E000 ~                                    ld      a,register
  34+ E000 ~                                    WriteTurboControlA
  35+ E000 ~                                    ld      b, $BF
  36+ E000 ~                                    ex      af,af'
  37+ E000 ~                                    out     (c),a
  38+ E000                                      ENDM
  39+ E000
  40+ E000              SelectAY:               MACRO   chipNbr
  41+ E000 ~                                    ld      a,TURBO_MANDATORY | TURBO_LEFT | TURBO_RIGHT | chipNbr
  42+ E000 ~                                    WriteTurboControlA
  43+ E000                                      ENDM
  44+ E000
  45+ E000              ;--- Interrupt handler, moved from main code
  46+ E000 3A B0 7F     SoundInterruptHandler:  ld      a,(DELTA)
  47+ E003 21 06 B1                             ld      hl,LAST_DELTA
  48+ E006 BE                                   cp      (hl)
  49+ E007 C4 37 E2     .SpeedChange:           call    nz, UpdateEngineSound
  50+ E00A 3A B3 7F     .NoSpeedChange:         ld      a,(SoundFxToEnqueue)        ; Check for new sound
  51+ E00D FE FF                                cp      $FF
  52+ E00F C4 4C E1                             call    nz,EnqueSound
  53+ E012              .NoNewSound:            IFDEF   USETIMER
  54+ E012 ~                                        ld      hl,SoundChannelTimer
  55+ E012                                      ENDIF
  56+ E012 11 D2 E2                             ld      de,SoundChannelSeq
  57+ E015 06 08                                ld      b,8
  58+ E017 1A           .ResetLoop:             ld      a,(de)                  ; we only update active channels
  59+ E018 FE FF                                cp      $FF
  60+ E01A 28 0A                                jr      z,.NextCounter
  61+ E01C                                      IFDEF   USETIMER
  62+ E01C ~                                        dec     (hl)                    ; so update channel timer
  63+ E01C ~                                        jr      nz,.NextCounter         ; if its not zero then continue
  64+ E01C                                      ENDIF
  65+ E01C 3E 08                                ld      a,8                     ; a now = channel to play
  66+ E01E 90                                   sub     a,b
  67+ E01F                                      IFDEF   USETIMER
  68+ E01F ~                                        push    bc,,de,,hl              ; save state
  69+ E01F                                      ELSE
  70+ E01F C5 D5                                    push    bc,,de
  71+ E021                                      ENDIF
  72+ E021 CD A7 E1                             call    PlaySound               ; play sound
  73+ E024                                      IFDEF   USETIMER
  74+ E024 ~                                        pop     bc,,de,,hl              ; restore state so de = correct timer & hl = correct channel, b = coutner
  75+ E024                                      ELSE
  76+ E024 D1 C1                                    pop     bc,,de              ; restore state so de = correct timer & hl = correct channel, b = coutner
  77+ E026                                      ENDIF
  78+ E026              ; If it went negative new sound update
  79+ E026                                      IFDEF   USETIMER
  80+ E026 ~            .ResetTimer:                ld      a,SOUNDSTEPLENGTH       ; as we fallin to this it will auto update counter
  81+ E026 ~                                        ld      (hl),a                  ; so may take it out of playsound routine
  82+ E026                                      ENDIF
  83+ E026              .NextCounter:
  84+ E026                                      IFDEF   USETIMER
  85+ E026 ~                                        inc     hl
  86+ E026                                      ENDIF
  87+ E026 13                                   inc     de
  88+ E027 10 EE                                djnz    .ResetLoop
  89+ E029 C9                                   ret
  90+ E02A
  91+ E02A
  92+ E02A              ; On entering here a = AY chip to select
  93+ E02A 21 BF FF     DefaultAYChip:          ld      hl,$FFBF            ; h = turbo control, l = turbo register
  94+ E02D 0E FD                                ld      c,$FD               ; bc = h$FD or l$FD
  95+ E02F 11 0E 00                             ld      de,$000E            ; d = value 0, e = counter
  96+ E032 F6 FC                                or      TURBO_MANDATORY | TURBO_LEFT | TURBO_RIGHT
  97+ E034 44                                   ld      b,h                 ; now select chip and set to stereo
  98+ E035 ED 79                                out     (c),a               ; .
  99+ E037 1D           .DefaultLoop:           dec     e                   ; loop down we set E 1 higher
 100+ E038 CA 44 E0                             jp      z,.Complete         ; On zero we complete, we
 101+ E03B 44                                   ld      b,h                 ; Set register to 0
 102+ E03C ED 59                                out     (c),e               ; .
 103+ E03E 45                                   ld      b,l                 ; .
 104+ E03F ED 51                                out     (c),d               ; .
 105+ E041 C3 37 E0     .DefaultDone:           jp      .DefaultLoop        ; and loop
 106+ E044 44           .Complete:              ld      b,h                 ; we set fine tone to 0
 107+ E045 ED 59                                out     (c),e               ; though as volume is 0
 108+ E047 45                                   ld      b,l                 ; it doesn't really
 109+ E048 ED 51                                out     (c),d               ; matter
 110+ E04A C9                                   ret
 111+ E04B
 112+ E04B              ;-- Initialise Audio channels to AY1 noise, AY2 and 3 tone, all channels to volume 0
 113+ E04B
 114+ E04B              ; For each AY channel, set everything to zero, then set up envelope and tone channels.
 115+ E04B              ; for now we are blocking noise channels whilst debugging
 116+ E04B 3E 01        InitAudio:              ld      a, TURBO_CHIP_AY1
 117+ E04D CD 2A E0                             call    DefaultAYChip
 118+ E050                                      WriteTurboRegister ENVELOPE_SHAPE,ENVELOPE_SHAPE_SINGLE_ATTACK_HOLD
 118+ E050 3E 0D       >                        ld      a,ENVELOPE_SHAPE
 118+ E052             >                        WriteTurboControlA
 118+ E052 01 FD FF    >                        ld      bc,TURBO_SOUND_NEXT_CONTROL
 118+ E055 ED 79       >                        out     (c),a
 118+ E057 06 BF       >                        ld      b,$BF
 118+ E059 3E 0D       >                        ld      a,ENVELOPE_SHAPE_SINGLE_ATTACK_HOLD
 118+ E05B ED 79       >                        out     (c),a
 119+ E05D                                      WriteTurboRegister TONE_ENABLE,   NOISE_CHANNEL_A | NOISE_CHANNEL_B | NOISE_CHANNEL_C
 119+ E05D 3E 07       >                        ld      a,TONE_ENABLE
 119+ E05F             >                        WriteTurboControlA
 119+ E05F 01 FD FF    >                        ld      bc,TURBO_SOUND_NEXT_CONTROL
 119+ E062 ED 79       >                        out     (c),a
 119+ E064 06 BF       >                        ld      b,$BF
 119+ E066 3E 38       >                        ld      a,NOISE_CHANNEL_A | NOISE_CHANNEL_B | NOISE_CHANNEL_C
 119+ E068 ED 79       >                        out     (c),a
 120+ E06A 3E 02                                ld      a, TURBO_CHIP_AY2
 121+ E06C CD 2A E0                             call    DefaultAYChip
 122+ E06F                                      WriteTurboRegister ENVELOPE_SHAPE,ENVELOPE_SHAPE_SINGLE_ATTACK_HOLD
 122+ E06F 3E 0D       >                        ld      a,ENVELOPE_SHAPE
 122+ E071             >                        WriteTurboControlA
 122+ E071 01 FD FF    >                        ld      bc,TURBO_SOUND_NEXT_CONTROL
 122+ E074 ED 79       >                        out     (c),a
 122+ E076 06 BF       >                        ld      b,$BF
 122+ E078 3E 0D       >                        ld      a,ENVELOPE_SHAPE_SINGLE_ATTACK_HOLD
 122+ E07A ED 79       >                        out     (c),a
 123+ E07C                                      WriteTurboRegister TONE_ENABLE,   NOISE_CHANNEL_A | NOISE_CHANNEL_B | NOISE_CHANNEL_C
 123+ E07C 3E 07       >                        ld      a,TONE_ENABLE
 123+ E07E             >                        WriteTurboControlA
 123+ E07E 01 FD FF    >                        ld      bc,TURBO_SOUND_NEXT_CONTROL
 123+ E081 ED 79       >                        out     (c),a
 123+ E083 06 BF       >                        ld      b,$BF
 123+ E085 3E 38       >                        ld      a,NOISE_CHANNEL_A | NOISE_CHANNEL_B | NOISE_CHANNEL_C
 123+ E087 ED 79       >                        out     (c),a
 124+ E089 3E 03                                ld      a, TURBO_CHIP_AY3
 125+ E08B CD 2A E0                             call    DefaultAYChip
 126+ E08E                                      WriteTurboRegister ENVELOPE_SHAPE,ENVELOPE_SHAPE_SINGLE_ATTACK_HOLD
 126+ E08E 3E 0D       >                        ld      a,ENVELOPE_SHAPE
 126+ E090             >                        WriteTurboControlA
 126+ E090 01 FD FF    >                        ld      bc,TURBO_SOUND_NEXT_CONTROL
 126+ E093 ED 79       >                        out     (c),a
 126+ E095 06 BF       >                        ld      b,$BF
 126+ E097 3E 0D       >                        ld      a,ENVELOPE_SHAPE_SINGLE_ATTACK_HOLD
 126+ E099 ED 79       >                        out     (c),a
 127+ E09B                                      WriteTurboRegister TONE_ENABLE,   NOISE_CHANNEL_A | NOISE_CHANNEL_B | NOISE_CHANNEL_C
 127+ E09B 3E 07       >                        ld      a,TONE_ENABLE
 127+ E09D             >                        WriteTurboControlA
 127+ E09D 01 FD FF    >                        ld      bc,TURBO_SOUND_NEXT_CONTROL
 127+ E0A0 ED 79       >                        out     (c),a
 127+ E0A2 06 BF       >                        ld      b,$BF
 127+ E0A4 3E 38       >                        ld      a,NOISE_CHANNEL_A | NOISE_CHANNEL_B | NOISE_CHANNEL_C
 127+ E0A6 ED 79       >                        out     (c),a
 128+ E0A8 21 D2 E2                             ld      hl,SoundChannelSeq      ; now set up all the channel data to $FF
 129+ E0AB 21 D2 E2                             ld      hl,SoundChannelSeq      ; now set up all the channel data to $FF
 130+ E0AE 3E FF                                ld      a,$FF                   ; which means that it
 131+ E0B0 06 08                                ld      b,8                     ; has no data to play
 132+ E0B2 77           .InitLoop:              ld      (hl),a
 133+ E0B3 23                                   inc     hl
 134+ E0B4 10 FC                                djnz    .InitLoop
 135+ E0B6 C9                                   ret
 136+ E0B7
 137+ E0B7              ;Enable with no noise chanels active
 138+ E0B7 3E 01        InitAudioMusic:         ld      a, TURBO_CHIP_AY1
 139+ E0B9 CD 2A E0                             call    DefaultAYChip
 140+ E0BC                                      WriteTurboRegister ENVELOPE_SHAPE,ENVELOPE_SHAPE_SINGLE_ATTACK_HOLD
 140+ E0BC 3E 0D       >                        ld      a,ENVELOPE_SHAPE
 140+ E0BE             >                        WriteTurboControlA
 140+ E0BE 01 FD FF    >                        ld      bc,TURBO_SOUND_NEXT_CONTROL
 140+ E0C1 ED 79       >                        out     (c),a
 140+ E0C3 06 BF       >                        ld      b,$BF
 140+ E0C5 3E 0D       >                        ld      a,ENVELOPE_SHAPE_SINGLE_ATTACK_HOLD
 140+ E0C7 ED 79       >                        out     (c),a
 141+ E0C9                                      WriteTurboRegister TONE_ENABLE,   NOISE_CHANNEL_A | NOISE_CHANNEL_B | NOISE_CHANNEL_C
 141+ E0C9 3E 07       >                        ld      a,TONE_ENABLE
 141+ E0CB             >                        WriteTurboControlA
 141+ E0CB 01 FD FF    >                        ld      bc,TURBO_SOUND_NEXT_CONTROL
 141+ E0CE ED 79       >                        out     (c),a
 141+ E0D0 06 BF       >                        ld      b,$BF
 141+ E0D2 3E 38       >                        ld      a,NOISE_CHANNEL_A | NOISE_CHANNEL_B | NOISE_CHANNEL_C
 141+ E0D4 ED 79       >                        out     (c),a
 142+ E0D6 3E 02                                ld      a, TURBO_CHIP_AY2
 143+ E0D8 CD 2A E0                             call    DefaultAYChip
 144+ E0DB                                      WriteTurboRegister ENVELOPE_SHAPE,ENVELOPE_SHAPE_SINGLE_ATTACK_HOLD
 144+ E0DB 3E 0D       >                        ld      a,ENVELOPE_SHAPE
 144+ E0DD             >                        WriteTurboControlA
 144+ E0DD 01 FD FF    >                        ld      bc,TURBO_SOUND_NEXT_CONTROL
 144+ E0E0 ED 79       >                        out     (c),a
 144+ E0E2 06 BF       >                        ld      b,$BF
 144+ E0E4 3E 0D       >                        ld      a,ENVELOPE_SHAPE_SINGLE_ATTACK_HOLD
 144+ E0E6 ED 79       >                        out     (c),a
 145+ E0E8                                      WriteTurboRegister TONE_ENABLE,   NOISE_CHANNEL_A | NOISE_CHANNEL_B | NOISE_CHANNEL_C
 145+ E0E8 3E 07       >                        ld      a,TONE_ENABLE
 145+ E0EA             >                        WriteTurboControlA
 145+ E0EA 01 FD FF    >                        ld      bc,TURBO_SOUND_NEXT_CONTROL
 145+ E0ED ED 79       >                        out     (c),a
 145+ E0EF 06 BF       >                        ld      b,$BF
 145+ E0F1 3E 38       >                        ld      a,NOISE_CHANNEL_A | NOISE_CHANNEL_B | NOISE_CHANNEL_C
 145+ E0F3 ED 79       >                        out     (c),a
 146+ E0F5 3E 03                                ld      a, TURBO_CHIP_AY3
 147+ E0F7 CD 2A E0                             call    DefaultAYChip
 148+ E0FA                                      WriteTurboRegister ENVELOPE_SHAPE,ENVELOPE_SHAPE_SINGLE_ATTACK_HOLD
 148+ E0FA 3E 0D       >                        ld      a,ENVELOPE_SHAPE
 148+ E0FC             >                        WriteTurboControlA
 148+ E0FC 01 FD FF    >                        ld      bc,TURBO_SOUND_NEXT_CONTROL
 148+ E0FF ED 79       >                        out     (c),a
 148+ E101 06 BF       >                        ld      b,$BF
 148+ E103 3E 0D       >                        ld      a,ENVELOPE_SHAPE_SINGLE_ATTACK_HOLD
 148+ E105 ED 79       >                        out     (c),a
 149+ E107                                      WriteTurboRegister TONE_ENABLE,   NOISE_CHANNEL_A | NOISE_CHANNEL_B | NOISE_CHANNEL_C
 149+ E107 3E 07       >                        ld      a,TONE_ENABLE
 149+ E109             >                        WriteTurboControlA
 149+ E109 01 FD FF    >                        ld      bc,TURBO_SOUND_NEXT_CONTROL
 149+ E10C ED 79       >                        out     (c),a
 149+ E10E 06 BF       >                        ld      b,$BF
 149+ E110 3E 38       >                        ld      a,NOISE_CHANNEL_A | NOISE_CHANNEL_B | NOISE_CHANNEL_C
 149+ E112 ED 79       >                        out     (c),a
 150+ E114 C9                                   ret
 151+ E115
 152+ E115              GetSoundAAddressToHL:   MACRO
 153+ E115 ~                                    ld      hl,SFXPointerList
 154+ E115 ~                                    add     a,a
 155+ E115 ~                                    add     hl,a
 156+ E115 ~                                    ld      a,(hl)
 157+ E115 ~                                    inc     hl
 158+ E115 ~                                    ld      h,(hl)
 159+ E115 ~                                    ld      l,a
 160+ E115                                      ENDM
 161+ E115
 162+ E115              SetIXToChannelA:        MACRO
 163+ E115 ~                                    ld      hl,SoundChannelSeq
 164+ E115 ~                                    add     hl,a
 165+ E115 ~                                    ld      ix,hl
 166+ E115                                      ENDM
 167+ E115
 168+ E115              SelectChannelMapping:   MACRO
 169+ E115 ~                                    ld      hl,SoundChipMapNumber
 170+ E115 ~                                    add     hl,a
 171+ E115 ~                                    ld      a,(hl)
 172+ E115                                      ENDM
 173+ E115
 174+ E115              ; This version ignores nooise and envelope setup so its always 0 atack hold and
 175+ E115              ; noise is pre-configured in channel
 176+ E115              ; The channel always holds a pointer to the next block of data to play
 177+ E115 DD 7E 18     PlayChannelD:           ld      a,(ix+SoundDataPointerOffset)    ; set hl to current data block
 178+ E118 6F                                   ld      l,a                              ; for SFX step
 179+ E119 DD 7E 19                             ld      a,(ix+SoundDataPointerOffset1)   ;
 180+ E11C 67                                   ld      h,a                              ;
 181+ E11D 7E                                   ld      a,(hl)                           ; get fine
 182+ E11E                                      WriteAToTurboRegister d
 182+ E11E 08          >                        ex      af,af'
 182+ E11F 7A          >                        ld      a,d
 182+ E120             >                        WriteTurboControlA
 182+ E120 01 FD FF    >                        ld      bc,TURBO_SOUND_NEXT_CONTROL
 182+ E123 ED 79       >                        out     (c),a
 182+ E125 06 BF       >                        ld      b, $BF
 182+ E127 08          >                        ex      af,af'
 182+ E128 ED 79       >                        out     (c),a
 183+ E12A 14                                   inc     d                                ; Move to channel coarse
 184+ E12B 23                                   inc     hl
 185+ E12C 7E                                   ld      a,(hl)
 186+ E12D                                      WriteAToTurboRegister d
 186+ E12D 08          >                        ex      af,af'
 186+ E12E 7A          >                        ld      a,d
 186+ E12F             >                        WriteTurboControlA
 186+ E12F 01 FD FF    >                        ld      bc,TURBO_SOUND_NEXT_CONTROL
 186+ E132 ED 79       >                        out     (c),a
 186+ E134 06 BF       >                        ld      b, $BF
 186+ E136 08          >                        ex      af,af'
 186+ E137 ED 79       >                        out     (c),a
 187+ E139 7A                                   ld      a,d
 188+ E13A C6 07                                add     a,7
 189+ E13C 57                                   ld      d,a
 190+ E13D 23                                   inc     hl                               ; Get Volume
 191+ E13E 7E                                   ld      a,(hl)
 192+ E13F                                      WriteAToTurboRegister d
 192+ E13F 08          >                        ex      af,af'
 192+ E140 7A          >                        ld      a,d
 192+ E141             >                        WriteTurboControlA
 192+ E141 01 FD FF    >                        ld      bc,TURBO_SOUND_NEXT_CONTROL
 192+ E144 ED 79       >                        out     (c),a
 192+ E146 06 BF       >                        ld      b, $BF
 192+ E148 08          >                        ex      af,af'
 192+ E149 ED 79       >                        out     (c),a
 193+ E14B C9                                   ret
 194+ E14C
 195+ E14C              ;--- Take the current sound to play, Put it in a noise or tone channel (if bit 1 is clear is a tone only)
 196+ E14C 3A B3 7F     EnqueSound:             ld      a,(SoundFxToEnqueue)                ; Get Sound FX to Enque
 197+ E14F                                      JumpIfAGTENusng SFXEndOfList, .InvalidSound ; Invalid sounds get discarded quickly
 197+ E14F FE 01       >                        cp     SFXEndOfList
 197+ E151 D2 A1 E1    >                        jp		nc,.InvalidSound
 198+ E154 5F           .GetSoundData:          ld      e,a                                 ; save SoundFxToEnqeue
 199+ E155 E6 01                                and     $01                                 ; even numbers are tone only (Including 0)
 200+ E157 20 12                                jr      nz,.FindFreeNoiseChannel
 201+ E159 21 D4 E2     .FindFreeToneChannel:   ld      hl,SoundChannelSeq + 2              ; so we start at the first tone channel
 202+ E15C 16 FF                                ld      d,$FF                               ; d = marker for free slot cp d will be faster in the loop
 203+ E15E 0E 02                                ld      c,2                                 ; c= current slot
 204+ E160 06 07                                ld      b,7                                 ; b = nbr of slots
 205+ E162 7E           .ToneScanLoop:          ld      a,(hl)                              ; is channel occupied
 206+ E163 BA                                   cp      d
 207+ E164 28 16                                jr      z,.SaveSoundId                      ; if its free then move forward
 208+ E166 0C                                   inc     c                                   ; c is hunting for a free channel
 209+ E167 23                                   inc     hl                                  ; move tonext address in channel list
 210+ E168 10 F8                                djnz    .ToneScanLoop
 211+ E16A C9           .NoFreeSlot:            ret                                         ; no free slot, leave sound enqued
 212+ E16B 21 D2 E2     .FindFreeNoiseChannel:  ld      hl,SoundChannelSeq                  ; We only have 2 noise channels so no need to
 213+ E16E 0E 00                                ld      c,0                                 ; do a complex loop
 214+ E170 7E                                   ld      a,(hl)
 215+ E171 16 FF                                ld      d,$FF                               ; d = marker for free slot
 216+ E173 BA                                   cp      d
 217+ E174 28 06                                jr      z,.SaveSoundId
 218+ E176 23                                   inc     hl
 219+ E177 7E                                   ld      a,(hl)
 220+ E178 BA                                   cp      d
 221+ E179 C0           .NoNoiseSlot:           ret     nz                                  ; no free slot, leave sound enqued
 222+ E17A 0E 01        .NoiseChannel2:         ld      c,1                                 ; So we have channel 1 free
 223+ E17C 7B           .SaveSoundId:           ld      a,e                                 ; get back sound id
 224+ E17D                                      GetSoundAAddressToHL                        ; hl = pointer to sfx data
 224+ E17D 21 10 E3    >                        ld      hl,SFXPointerList
 224+ E180 87          >                        add     a,a
 224+ E181 ED 31       >                        add     hl,a
 224+ E183 7E          >                        ld      a,(hl)
 224+ E184 23          >                        inc     hl
 224+ E185 66          >                        ld      h,(hl)
 224+ E186 6F          >                        ld      l,a
 225+ E187 EB                                   ex      de,hl                               ; save pointer to data also makes loading to (ix) easier
 226+ E188 21 D2 E2     .SetIXToChannelPointer: ld      hl,SoundChannelSeq                  ; Get the sequence for the
 227+ E18B 79                                   ld      a,c                                 ; respective channel
 228+ E18C ED 31                                add     hl,a                                ; that we are looking at
 229+ E18E E5 DD E1                             ld      ix,hl                               ; now we can use indexed access
 230+ E191 EB           .GetSFXDataBack:        ex      de,hl                               ; hl = sound fx again
 231+ E192              .LoadSeqCount           ZeroA
 231+ E192 AF          >                        xor a
 232+ E193 DD 77 00                             ld      (ix+0),a                            ; set SoundChannelSeq[channel] to 0 as its starting
 233+ E196 7E                                   ld      a,(hl)                              ; get the nbr of steps
 234+ E197 DD 77 08                             ld      (ix+SoundLastSeqOffset),a           ; load SoundChannelLastSeq[channel]
 235+ E19A                                      IFDEF   USETIMER
 236+ E19A ~                                        ld      a,1                             ; for now we have separate timers, we enque with 1 so the loops starts immediatly
 237+ E19A ~                                        ld      (ix+SoundTimerOffset),a         a; load SoundChannelTimer[channel] with duration
 238+ E19A                                      ENDIF
 239+ E19A 23                                   inc     hl                                  ; move hl to first byte of data block
 240+ E19B DD 75 18                             ld      (ix+SoundDataPointerOffset),l       ; load SoundDataPointer[channel] with current data set
 241+ E19E DD 74 19                             ld      (ix+SoundDataPointerOffset1),h
 242+ E1A1 3E FF        .InvalidSound:          ld      a,$FF
 243+ E1A3 32 B3 7F                             ld      (SoundFxToEnqueue),a                ; ClearFXEnqeue
 244+ E1A6 C9                                   ret
 245+ E1A7
 246+ E1A7 5F           PlaySound:              ld      e,a                                 ; save channel number
 247+ E1A8                                      SetIXToChannelA                             ; We trap for debugging
 247+ E1A8 21 D2 E2    >                        ld      hl,SoundChannelSeq
 247+ E1AB ED 31       >                        add     hl,a
 247+ E1AD E5 DD E1    >                        ld      ix,hl
 248+ E1B0 DD 7E 00     .GetCurrentSeq:         ld      a,(ix+0)                            ; for optimisation we
 249+ E1B3 FE FF                                cp      $FF                                 ; will never call this if its $FF
 250+ E1B5 C8                                   ret     z                                   ; its just a belt n braces
 251+ E1B6              ;--- Play Next Step, we select chip, select channel, set up tone then step, timer & pointer
 252+ E1B6 DD 7E 28     .SelectChip             ld      a,(ix+SoundChipMapOffset)           ; get the mapping. bits 1 and 0 hold
 253+ E1B9 57                                   ld      d,a                                 ; .
 254+ E1BA F6 FC                                or      %11111100                           ; .
 255+ E1BC                                      WriteTurboControlA                          ; .
 255+ E1BC 01 FD FF    >                        ld      bc,TURBO_SOUND_NEXT_CONTROL
 255+ E1BF ED 79       >                        out     (c),a
 256+ E1C1 DD 7E 08     .CheckLastSeq:          ld      a,(ix+SoundLastSeqOffset)           ; get last in sequence
 257+ E1C4                                      JumpIfALTNusng  (ix+0),.CompletedSFX        ; if we have gone beyond last then done
 257+ E1C4 DD BE 00    >                        cp      (ix+0)
 257+ E1C7 DA E9 E1    >                        jp		c, .CompletedSFX
 258+ E1CA 7A           .PlayStep:              ld      a,d                                 ; Get the channel number
 259+ E1CB E6 30                                and     %00110000
 260+ E1CD ED 23                                swapnib                                     ; get channel to lower bits
 261+ E1CF 57                                   ld      d,a
 262+ E1D0 CD 15 E1                             call    PlayChannelD                        ; play channel D step ix is pointer to correct soundchannelseq
 263+ E1D3 DD 34 00     .UpdateStep:            inc     (ix+0)                              ; next stepssss
 264+ E1D6                                      IFDEF   USETIMER
 265+ E1D6 ~            .UpdateTimer:               ld      a,SOUNDSTEPLENGTH
 266+ E1D6 ~                                        ld      (ix+SoundTimerOffset),a
 267+ E1D6                                      ENDIF
 268+ E1D6 DD 5E 18     .UpdateStepPointer:     ld      e,(ix+SoundDataPointerOffset)       ; move pointer on by 7 bytes
 269+ E1D9 DD 56 19                             ld      d,(ix+SoundDataPointerOffset+1)     ;
 270+ E1DC EB                                   ex      de,hl                               ; hl = current pointer
 271+ E1DD 3E 03                                ld      a,SFXBlockLength                    ; move to next block
 272+ E1DF ED 31                                add     hl,a                                ; .
 273+ E1E1 EB                                   ex      de,hl                               ; move to de for load back
 274+ E1E2 DD 73 18                             ld      (ix+SoundDataPointerOffset),e       ;
 275+ E1E5 DD 72 19                             ld      (ix+SoundDataPointerOffset+1),d     ;
 276+ E1E8 C9                                   ret
 277+ E1E9 DD 7E 28     .CompletedSFX:          ld      a,(ix+SoundChipMapOffset)           ; channel number is in upper bits
 278+ E1EC ED 23                                swapnib                                     ; so we need it in
 279+ E1EE E6 03                                and     %00000011                           ; lower for selecting volume register
 280+ E1F0 C6 08                                add     a,CHANNEL_A_AMPLITUDE               ; select the register
 281+ E1F2                                      WriteTurboRegisterA 0                       ; set volume to 0
 281+ E1F2             >                        WriteTurboControlA
 281+ E1F2 01 FD FF    >                        ld      bc,TURBO_SOUND_NEXT_CONTROL
 281+ E1F5 ED 79       >                        out     (c),a
 281+ E1F7 06 BF       >                        ld      b,$BF
 281+ E1F9 3E 00       >                        ld      a,0
 281+ E1FB ED 79       >                        out     (c),a
 282+ E1FD                                      WriteTurboRegister ENVELOPE_PERIOD_FINE,0
 282+ E1FD 3E 0B       >                        ld      a,ENVELOPE_PERIOD_FINE
 282+ E1FF             >                        WriteTurboControlA
 282+ E1FF 01 FD FF    >                        ld      bc,TURBO_SOUND_NEXT_CONTROL
 282+ E202 ED 79       >                        out     (c),a
 282+ E204 06 BF       >                        ld      b,$BF
 282+ E206 3E 00       >                        ld      a,0
 282+ E208 ED 79       >                        out     (c),a
 283+ E20A                                      WriteTurboRegister ENVELOPE_PERIOD_COARSE,0
 283+ E20A 3E 0C       >                        ld      a,ENVELOPE_PERIOD_COARSE
 283+ E20C             >                        WriteTurboControlA
 283+ E20C 01 FD FF    >                        ld      bc,TURBO_SOUND_NEXT_CONTROL
 283+ E20F ED 79       >                        out     (c),a
 283+ E211 06 BF       >                        ld      b,$BF
 283+ E213 3E 00       >                        ld      a,0
 283+ E215 ED 79       >                        out     (c),a
 284+ E217                                      WriteTurboRegister ENVELOPE_SHAPE,ENVELOPE_SHAPE_SINGLE_ATTACK_HOLD
 284+ E217 3E 0D       >                        ld      a,ENVELOPE_SHAPE
 284+ E219             >                        WriteTurboControlA
 284+ E219 01 FD FF    >                        ld      bc,TURBO_SOUND_NEXT_CONTROL
 284+ E21C ED 79       >                        out     (c),a
 284+ E21E 06 BF       >                        ld      b,$BF
 284+ E220 3E 0D       >                        ld      a,ENVELOPE_SHAPE_SINGLE_ATTACK_HOLD
 284+ E222 ED 79       >                        out     (c),a
 285+ E224                                      WriteTurboRegister TONE_ENABLE,   NOISE_CHANNEL_A | NOISE_CHANNEL_B | NOISE_CHANNEL_C
 285+ E224 3E 07       >                        ld      a,TONE_ENABLE
 285+ E226             >                        WriteTurboControlA
 285+ E226 01 FD FF    >                        ld      bc,TURBO_SOUND_NEXT_CONTROL
 285+ E229 ED 79       >                        out     (c),a
 285+ E22B 06 BF       >                        ld      b,$BF
 285+ E22D 3E 38       >                        ld      a,NOISE_CHANNEL_A | NOISE_CHANNEL_B | NOISE_CHANNEL_C
 285+ E22F ED 79       >                        out     (c),a
 286+ E231 3E FF                                ld      a,$FF                               ; set sequence to FF to denote
 287+ E233 DD 77 00                             ld      (ix+0),a                            ; channel is now free
 288+ E236 C9                                   ret
 289+ E237
 290+ E237              ; Engine Sound is always a priority so gets a dedicated channel
 291+ E237              ; this is only called if delta has changed
 292+ E237              UpdateEngineSound:      SelectAY TURBO_CHIP_AY1
 292+ E237 3E FD       >                        ld      a,TURBO_MANDATORY | TURBO_LEFT | TURBO_RIGHT | TURBO_CHIP_AY1
 292+ E239             >                        WriteTurboControlA
 292+ E239 01 FD FF    >                        ld      bc,TURBO_SOUND_NEXT_CONTROL
 292+ E23C ED 79       >                        out     (c),a
 293+ E23E 3A B0 7F     .SetUpTone:             ld      a,(DELTA)
 294+ E241 A7                                   and     a
 295+ E242 CA 7D E2                             jp      z,.EngineOff    ; if speed is 0 the engine off as a = 0
 296+ E245 21 F3 08                             ld      hl,$08F3        ; base tone - delta * 15
 297+ E248 57                                   ld      d,a             ; we subtract as the tone is the
 298+ E249 1E 0F                                ld      e,15            ; time between pulses
 299+ E24B B7 ED 52                             sub     hl,de
 300+ E24E 3E 00                                ld      a,CHANNEL_A_FINE
 301+ E250 01 FD FF                             ld      bc,$FFFD
 302+ E253 ED 79                                out     (c),a
 303+ E255 06 BF                                ld      b,$BF
 304+ E257 ED 61                                out     (c),h
 305+ E259 3C                                   inc     a
 306+ E25A 06 FF                                ld      b,$FF
 307+ E25C ED 79                                out     (c),a
 308+ E25E 06 BF                                ld      b,$BF
 309+ E260 ED 69                                out     (c),l
 310+ E262 3A B0 7F     .SetUpNoise:            ld      a,(DELTA)       ; l = DELTA / 4
 311+ E265 CB 3F                                srl     a
 312+ E267 57                                   ld      d,a             ;
 313+ E268 CB 3F                                srl     a
 314+ E26A CB 3F                                srl     a               ; a = DELTA / 8
 315+ E26C C6 1F                                add     a, $1F          ; more noise higher the speed
 316+ E26E 06 FF                                ld      b,$FF
 317+ E270 1E 06                                ld      e,NOISE_PERIOD
 318+ E272 ED 59                                out     (c),e
 319+ E274 06 BF                                ld      b,$BF
 320+ E276 ED 79                                out     (c),a
 321+ E278 7A                                   ld      a,d             ; get back delta / 4
 322+ E279 C6 05                                add     a,5
 323+ E27B CB 3F                                srl     a               ; calculate a scaled from 2 to 7
 324+ E27D 1E 08        .EngineOff:             ld      e,CHANNEL_A_AMPLITUDE
 325+ E27F 06 FF                                ld      b,$FF
 326+ E281 ED 59                                out     (c),e
 327+ E283 06 BF                                ld      b,$BF
 328+ E285 ED 79                                out     (c),a
 329+ E287                                      WriteTurboRegister ENVELOPE_PERIOD_FINE,0
 329+ E287 3E 0B       >                        ld      a,ENVELOPE_PERIOD_FINE
 329+ E289             >                        WriteTurboControlA
 329+ E289 01 FD FF    >                        ld      bc,TURBO_SOUND_NEXT_CONTROL
 329+ E28C ED 79       >                        out     (c),a
 329+ E28E 06 BF       >                        ld      b,$BF
 329+ E290 3E 00       >                        ld      a,0
 329+ E292 ED 79       >                        out     (c),a
 330+ E294                                      WriteTurboRegister ENVELOPE_PERIOD_COARSE,0
 330+ E294 3E 0C       >                        ld      a,ENVELOPE_PERIOD_COARSE
 330+ E296             >                        WriteTurboControlA
 330+ E296 01 FD FF    >                        ld      bc,TURBO_SOUND_NEXT_CONTROL
 330+ E299 ED 79       >                        out     (c),a
 330+ E29B 06 BF       >                        ld      b,$BF
 330+ E29D 3E 00       >                        ld      a,0
 330+ E29F ED 79       >                        out     (c),a
 331+ E2A1                                      WriteTurboRegister ENVELOPE_SHAPE,ENVELOPE_SHAPE_SINGLE_ATTACK_HOLD
 331+ E2A1 3E 0D       >                        ld      a,ENVELOPE_SHAPE
 331+ E2A3             >                        WriteTurboControlA
 331+ E2A3 01 FD FF    >                        ld      bc,TURBO_SOUND_NEXT_CONTROL
 331+ E2A6 ED 79       >                        out     (c),a
 331+ E2A8 06 BF       >                        ld      b,$BF
 331+ E2AA 3E 0D       >                        ld      a,ENVELOPE_SHAPE_SINGLE_ATTACK_HOLD
 331+ E2AC ED 79       >                        out     (c),a
 332+ E2AE                                      WriteTurboRegister TONE_ENABLE,   NOISE_CHANNEL_A | NOISE_CHANNEL_B | NOISE_CHANNEL_C
 332+ E2AE 3E 07       >                        ld      a,TONE_ENABLE
 332+ E2B0             >                        WriteTurboControlA
 332+ E2B0 01 FD FF    >                        ld      bc,TURBO_SOUND_NEXT_CONTROL
 332+ E2B3 ED 79       >                        out     (c),a
 332+ E2B5 06 BF       >                        ld      b,$BF
 332+ E2B7 3E 38       >                        ld      a,NOISE_CHANNEL_A | NOISE_CHANNEL_B | NOISE_CHANNEL_C
 332+ E2B9 ED 79       >                        out     (c),a
 333+ E2BB 3A B0 7F                             ld      a,(DELTA)
 334+ E2BE 32 06 B1                             ld      (LAST_DELTA),a
 335+ E2C1 C9                                   ret
 336+ E2C2
 337+ E2C2 53 6F 75 6E  SoundLabel              DB      "Sound Channels  "
 337+ E2C6 64 20 43 68
 337+ E2CA 61 6E 6E 65
 337+ E2CE 6C 73 20 20
 338+ E2D2 00 00 00...  SoundChannelSeq         DS      8   ; The current step in the SFX or $FX for empty
 339+ E2DA 00 00 00...  SoundChannelLastSeq     DS      8   ; A copy of SFX length to save an extra lookup, $FF means 1 step always on, $00 means off
 340+ E2E2 00 00 00...  SoundChannelTimer       DS      8   ; The count down to next sequence
 341+ E2EA 00 00 00...  SoundDataPointer        DS      2*8 ; pointer to current sound step
 342+ E2FA              ;                  Channel/Chip B/1  C/1  A/2  B/2  C/2  A/3  B/3  C/3
 343+ E2FA 11 21        SoundChipMapNumber      DB      $10 | TURBO_CHIP_AY1, $20 | TURBO_CHIP_AY1
 344+ E2FC 02 32                                DB      $00 | TURBO_CHIP_AY2, $10 | TURBO_CHIP_AY2 | $20 | TURBO_CHIP_AY2
 345+ E2FE 02 33                                DB      $00 | TURBO_CHIP_AY2, $10 | TURBO_CHIP_AY3 | $20 | TURBO_CHIP_AY3
 346+ E300              SoundLastSeqOffset      EQU     8
 347+ E300              SoundTimerOffset        EQU     SoundLastSeqOffset + 8
 348+ E300              SoundDataPointerOffset  EQU     SoundTimerOffset + 8
 349+ E300              SoundDataPointerOffset1 EQU     SoundTimerOffset + 9
 350+ E300              SoundChipMapOffset      EQU     SoundDataPointerOffset + 16
 351+ E300              ;Chip map is            bits 5,4 channel letter A = 0 B =1 C = 2    1,0 Chip Number
 352+ E300              ;Mapping                0 = 1B, 1 = 1C, 3=2A, 4 = 2B, 5=2C, 6 = 3A, 7 = 3B, 8 = 3C
 353+ E300              ;                       Chip 1 Engine, noise channel but engine noise period is priority
 354+ E300              ;                       Chip 2 General FX, no noise
 355+ E300              ;                       Chip 3 General FX, no noise
 356+ E300
 357+ E300              ;--- Data sets for Sound
 358+ E300              ;--- Sound Channels are 0 to 9 AY1 A B C AY2 A B C AY3 A B C
 359+ E300              ;--- Sounds can not enqueu, the find a free slot & SoundFxtoEnqueue gets zeroed or it gets left
 360+ E300              ;--- AY1 channel 1 is reserved for engine noise as its calculated on the fly
 361+ E300              ; Predefined value for each channel to load to $FFFD before setting up tone
 362+ E300              ; Hcops a copy of the 3 chips register 7
 363+ E300
 364+ E300
 365+ E300              ; StepLength            DB      1   ; $FF = 1 step forever else number of entries in StepListArray
 366+ E300              ; StepListArray
 367+ E300              ;     TonePitch         DW      4 bits unused + 12 bits
 368+ E300              ;     NoisePitch        DB      5 bit or $FF for no noise
 369+ E300              ;     Volume            DB      0 to 15
 370+ E300              ;     EnvelopePeriod    DW      0
 371+ E300              ;     WaveForm          DB      0
 372+ E300
 373+ E300              ; SFX Format
 374+ E300              ; SFXPointerList - Odd numbers are tone, Even Numbers have noise too, optimisation for channel handling
 375+ E300 53 6F 75 6E  SoundLabelSFX   DB      "Sound Data      "
 375+ E304 64 20 44 61
 375+ E308 74 61 20 20
 375+ E30C 20 20 20 20
 376+ E310 19 E3        SFXPointerList  dw      SFXLaser
 377+ E312              SFXEndOfList    EQU     1
 378+ E312              SFXBlockLength  EQU     3
 379+ E312              SFXFineOffset   EQU     0
 380+ E312              SFXCorseOffset  EQU     1
 381+ E312              SFXVolOffset    EQU     2
 382+ E312              ;                       Step Count
 383+ E312 4C 61 73 65  SoundLaser      DB      "Laser  "
 383+ E316 72 20 20
 384+ E319 0B           SFXLaser        db      11
 385+ E31A              ;                       Tone
 386+ E31A              ;                      Fine Crs  Vol
 387+ E31A 5F 00 0E                    db      $5F, $00, $0E
 388+ E31D 39 00 0E                    db      $39, $00, $0E
 389+ E320 47 00 0D                    db      $47, $00, $0D
 390+ E323 5E 00 0C                    db      $5E, $00, $0C
 391+ E326 6E 10 0A                    db      $6E, $10, $0A
 392+ E329 76 00 08                    db      $76, $00, $08
 393+ E32C 76 00 07                    db      $76, $00, $07
 394+ E32F 06 01 06                    db      $06, $01, $06
 395+ E332 2E 01 03                    db      $2E, $01, $03
 396+ E335 16 01 03                    db      $16, $01, $03
 397+ E338 03 00 01                    db      $03, $00, $01
 398+ E33B
 399+ E33B              ;
 400+ E33B              ;
 401+ E33B              ;Laser1:          db 14,14,13,12,10, 8, 7, 6, 3, 1
 402+ E33B              ;LaserFrameCount  db  5, 5, 5, 5, 5, 5, 5, 5, 5, 5
 403+ E33B              ;LaserLength:     db $-LaserFrameCount
 404+ E33B              ;LaserTone:       dw $05F, $089, $097, $0AE, $0CE, $0B6, $0E6, $106, $13E, $126, $136
 405+ E33B
 406+ E33B C5 E5        DanubePointer1:         DW BlueDanube1
 407+ E33D DA E6        DanubePointer2:         DW BlueDanube2
 408+ E33F EF E7        DanubePointer3:         DW BlueDanube3
 409+ E341 04 E9        DanubePointer4:         DW BlueDanube4
 410+ E343 19 EA        DanubePointer5:         DW BlueDanube5
 411+ E345 2E EB        DanubePointer6:         DW BlueDanube6
 412+ E347              ; Sustain reduces volume each cycle, playing a note resets it
 413+ E347 00           DanubeVolume1:          DB 0
 414+ E348 02           DanubeChip1:            DB TURBO_CHIP_AY2
 415+ E349 00           DanubeVolume2:          DB 0
 416+ E34A 02           DanubeChip2:            DB TURBO_CHIP_AY2
 417+ E34B 00           DanubeVolume3:          DB 0
 418+ E34C 02           DanubeChip3:            DB TURBO_CHIP_AY2
 419+ E34D 00           DanubeVolume4:          DB 0
 420+ E34E 03           DanubeChip4:            DB TURBO_CHIP_AY3
 421+ E34F 00           DanubeVolume5:          DB 0
 422+ E350 03           DanubeChip5:            DB TURBO_CHIP_AY3
 423+ E351 00           DanubeVolume6:          DB 0
 424+ E352 03           DanubeChip6:            DB TURBO_CHIP_AY3
 425+ E353              PointerVolOffset:       EQU 12
 426+ E353              PointerChipOffset:      EQU 13
 427+ E353 00 00        DanubeCounter:          DW 0
 428+ E355              DanubeMax:              EQU BlueDanube2 - BlueDanube1 +1
 429+ E355 16 01        DanubeMaxMem:           DW  DanubeMax
 430+ E357 0F           DanubeVolume:           DB $0F
 431+ E358 08           DanubePace:             DB 8
 432+ E359 08           DanubeTimer:            DB 8
 433+ E35A 00 00        DanubeAttackEnvelope    DW $0000
 434+ E35C
 435+ E35C F6 FC        SelectDanubeAYa:        or TURBO_MANDATORY | TURBO_LEFT | TURBO_RIGHT
 436+ E35E                                      WriteTurboControlA
 436+ E35E 01 FD FF    >                        ld      bc,TURBO_SOUND_NEXT_CONTROL
 436+ E361 ED 79       >                        out     (c),a
 437+ E363 C9                                   ret
 438+ E364
 439+ E364 08           WriteAToTurboRegisterD: ex      af,af'
 440+ E365 7A                                   ld      a,d
 441+ E366                                      WriteTurboControlA
 441+ E366 01 FD FF    >                        ld      bc,TURBO_SOUND_NEXT_CONTROL
 441+ E369 ED 79       >                        out     (c),a
 442+ E36B 06 BF                                ld      b,$BF
 443+ E36D 08                                   ex      af,af'
 444+ E36E ED 79                                out     (c),a
 445+ E370 C9                                   ret
 446+ E371
 447+ E371              SetChannelAVolume0:     WriteTurboControlA
 447+ E371 01 FD FF    >                        ld      bc,TURBO_SOUND_NEXT_CONTROL
 447+ E374 ED 79       >                        out     (c),a
 448+ E376 06 BF                                ld      b,$BF
 449+ E378                                      ZeroA
 449+ E378 AF          >                        xor a
 450+ E379 ED 79                                out     (c),a
 451+ E37B C9                                   ret
 452+ E37C
 453+ E37C 7A           SetChannelDNoteAtHL:    ld      a,d                 ; a is now 0 to 2
 454+ E37D CB 27                                sla     a                   ; multiply by 2 so now 0, 2, 4
 455+ E37F F5                                   push    af                  ; save fine adjust register nbr
 456+ E380                                      WriteTurboControlA          ; Send out fine adjust
 456+ E380 01 FD FF    >                        ld      bc,TURBO_SOUND_NEXT_CONTROL
 456+ E383 ED 79       >                        out     (c),a
 457+ E385 06 BF                                ld      b,$BF
 458+ E387 7E                                   ld      a,(hl)              ; get fine note
 459+ E388 ED 79                                out     (c),a               ; write fine note
 460+ E38A F1                                   pop     af                  ; get back fine adjust register
 461+ E38B 3C                                   inc     a
 462+ E38C                                      WriteTurboControlA
 462+ E38C 01 FD FF    >                        ld      bc,TURBO_SOUND_NEXT_CONTROL
 462+ E38F ED 79       >                        out     (c),a
 463+ E391 23                                   inc     hl                  ; move to coarse value
 464+ E392 06 BF                                ld      b,$BF
 465+ E394 7E                                   ld      a,(hl)
 466+ E395 ED 79                                out     (c),a
 467+ E397                                      ;IFDEF   DANUBEATTACK
 468+ E397              .SetAttack:             ;    ld      hl,(DanubeAttackEnvelope)
 469+ E397                                      ;    ld      a,ENVELOPE_PERIOD_FINE
 470+ E397                                      ;    WriteTurboControlA
 471+ E397                                      ;    ld      b,$BF
 472+ E397                                      ;    ld      a,l
 473+ E397                                      ;    out     (c),a
 474+ E397                                      ;    ld      a,ENVELOPE_PERIOD_COARSE
 475+ E397                                      ;    WriteTurboControlA
 476+ E397                                      ;    ld      b,$BF
 477+ E397                                      ;    ld      a,h
 478+ E397                                      ;    out     (c),a
 479+ E397                                      ;ENDIF
 480+ E397 7A           .SetVolume:             ld      a,d                 ; get back channel
 481+ E398 C6 08                                add     a,8
 482+ E39A                                      WriteTurboControlA
 482+ E39A 01 FD FF    >                        ld      bc,TURBO_SOUND_NEXT_CONTROL
 482+ E39D ED 79       >                        out     (c),a
 483+ E39F 06 BF                                ld      b,$BF
 484+ E3A1 3A 57 E3                             ld      a,(DanubeVolume)    ; could put in ixh but we have plenty of cycles
 485+ E3A4 ED 79                                out     (c),a
 486+ E3A6 C9                                   ret
 487+ E3A7
 488+ E3A7 DD 7E 06     SustainNote:            ld      a,(ix+6)
 489+ E3AA 3D                                   dec     a
 490+ E3AB 20 02                                jr      nz,.MinNoteSkip
 491+ E3AD 3E 01                                ld      a,1
 492+ E3AF DD 77 0C     .MinNoteSkip:           ld      (ix+PointerVolOffset),a
 493+ E3B2 78                                   ld      a,b          ; get back channel which is passed in via b
 494+ E3B3 C6 08                                add     a,8
 495+ E3B5                                      WriteTurboControlA
 495+ E3B5 01 FD FF    >                        ld      bc,TURBO_SOUND_NEXT_CONTROL
 495+ E3B8 ED 79       >                        out     (c),a
 496+ E3BA 06 BF                                ld      b,$BF
 497+ E3BC DD 7E 0C                             ld      a,(ix+PointerVolOffset)
 498+ E3BF ED 79                                out     (c),a
 499+ E3C1                                      IFDEF   DANUBEATTACK
 500+ E3C1 3E 0B        .SetAttack:                 ld      a,ENVELOPE_PERIOD_FINE
 501+ E3C3                                          WriteTurboControlA
 501+ E3C3 01 FD FF    >                        ld      bc,TURBO_SOUND_NEXT_CONTROL
 501+ E3C6 ED 79       >                        out     (c),a
 502+ E3C8 06 BF                                    ld      b,$BF
 503+ E3CA                                          ZeroA
 503+ E3CA AF          >                        xor a
 504+ E3CB ED 79                                    out     (c),a
 505+ E3CD 3E 0C                                    ld      a,ENVELOPE_PERIOD_COARSE
 506+ E3CF                                          WriteTurboControlA
 506+ E3CF 01 FD FF    >                        ld      bc,TURBO_SOUND_NEXT_CONTROL
 506+ E3D2 ED 79       >                        out     (c),a
 507+ E3D4 06 BF                                    ld      b,$BF
 508+ E3D6                                          ZeroA
 508+ E3D6 AF          >                        xor a
 509+ E3D7 ED 79                                    out     (c),a
 510+ E3D9                                      ENDIF
 511+ E3D9 C9                                   ret
 512+ E3DA
 513+ E3DA
 514+ E3DA              ; IN iyh = channel number, a = note, ix = pointer to danubepointer table corresponding to guitar string
 515+ E3DA DD 7E 0D     PlayDanubeNote:         ld      a,(ix+PointerChipOffset)
 516+ E3DD C5                                   push    bc
 517+ E3DE CD 5C E3                             call    SelectDanubeAYa
 518+ E3E1 C1                                   pop     bc
 519+ E3E2 DD 7E 00                             ld      a,(ix+0)
 520+ E3E5 6F                                   ld      l,a
 521+ E3E6 DD 7E 01                             ld      a,(ix+1)
 522+ E3E9 67                                   ld      h,a
 523+ E3EA 7E                                   ld      a,(hl)
 524+ E3EB A7                                   and     a
 525+ E3EC 28 26                                jr      z,  .NoNote
 526+ E3EE FE FF                                cp      $FF
 527+ E3F0 C8                                   ret     z
 528+ E3F1                                      ;jp      z,SustainNote
 529+ E3F1 21 1D E5                             ld      hl, TonesPitch
 530+ E3F4 5F                                   ld      e,a         ; save a
 531+ E3F5 E6 F0                                and     $F0         ; load octave to d
 532+ E3F7 ED 23                                swapnib             ;
 533+ E3F9 57                                   ld      d,a         ;
 534+ E3FA 7B                                   ld      a,e         ; get a back
 535+ E3FB 1E 0C                                ld      e,12        ; 12 semi tones so mul by 12
 536+ E3FD ED 30                                mul                 ;
 537+ E3FF E6 0F                                and     $0F         ; get semi tone
 538+ E401 EB                                   ex      de,hl       ; hl = octave * 12 + semi tone
 539+ E402 ED 31                                add     hl,a        ; .
 540+ E404                                      ShiftHLLeft1        ; multiply by 2 as we have 2 bytes per tone
 540+ E404 CB 25       >			   sla l
 540+ E406 CB 14       >			   rl  h
 541+ E408 11 1D E5                             ld      de,TonesPitch
 542+ E40B 19                                   add     hl,de       ; now we are pointing at table
 543+ E40C 50                                   ld      d,b         ; get channel number
 544+ E40D CD 7C E3                             call    SetChannelDNoteAtHL ; leaves with A = volume note
 545+ E410 DD 77 0C                             ld      (ix+PointerVolOffset),a    ;
 546+ E413 C9                                   ret
 547+ E414 78           .NoNote:                ld      a,b         ; a= channel number 0 to 3
 548+ E415 C6 08                                add     8           ; adjust to volume register
 549+ E417 CD 71 E3     .NoNoteOK               call    SetChannelAVolume0
 550+ E41A C9                                   ret
 551+ E41B
 552+ E41B 3A 59 E3     PlayDanube:             ld      a,(DanubeTimer)
 553+ E41E 3D                                   dec     a
 554+ E41F 28 04                                jr      z,.PlaySequence
 555+ E421 32 59 E3                             ld      (DanubeTimer),a
 556+ E424 C9                                   ret
 557+ E425 06 06        .PlaySequence:          ld      b,6
 558+ E427 DD 21 3B E3                          ld      ix,DanubePointer1
 559+ E42B 0E 00                                ld      c,0
 560+ E42D C5           .ChannelLoop:           push    bc
 561+ E42E 41                                   ld      b,c
 562+ E42F CD DA E3                             call    PlayDanubeNote
 563+ E432 C1                                   pop     bc
 564+ E433 DD 23                                inc     ix
 565+ E435 DD 23                                inc     ix
 566+ E437 0C                                   inc     c
 567+ E438 79                                   ld      a,c
 568+ E439 FE 03                                cp      3
 569+ E43B 20 02                                jr      nz,.SkipChannelMax
 570+ E43D 0E 00                                ld      c,0
 571+ E43F 10 EC        .SkipChannelMax:        djnz    .ChannelLoop
 572+ E441 C3 AE E4                             jp      UpdatePointers
 573+ E444              ;
 574+ E444              .sPlaySequence:
 575+ E444 3E 02        .PlayChannel1:          ld      a,TURBO_CHIP_AY2
 576+ E446 CD 5C E3                             call    SelectDanubeAYa
 577+ E449 DD 21 3B E3                          ld      ix,DanubePointer1
 578+ E44D DD 7E 00                             ld      a,(ix+0)
 579+ E450 2A 3B E3                             ld      hl,(DanubePointer1)
 580+ E453 7E                                   ld      a,(hl)
 581+ E454 06 00                                ld      b,0
 582+ E456 CD DA E3                             call    PlayDanubeNote
 583+ E459              .PlayChannel2:          ;break
 584+ E459 3E 02                                ld      a,TURBO_CHIP_AY2
 585+ E45B CD 5C E3                             call    SelectDanubeAYa
 586+ E45E DD 21 3D E3                          ld      ix,DanubePointer2
 587+ E462 DD 7E 00                             ld      a,(ix+0)
 588+ E465 06 01                                ld      b,1
 589+ E467 CD DA E3                             call    PlayDanubeNote
 590+ E46A 3E 02        .PlayChannel3:          ld      a,TURBO_CHIP_AY2
 591+ E46C CD 5C E3                             call    SelectDanubeAYa
 592+ E46F DD 21 3F E3                          ld      ix,DanubePointer3
 593+ E473 DD 7E 00                             ld      a,(ix+0)
 594+ E476 06 02                                ld      b,2
 595+ E478 CD DA E3                             call    PlayDanubeNote
 596+ E47B 3E 03        .PlayChannel4:          ld      a,TURBO_CHIP_AY3
 597+ E47D CD 5C E3                             call    SelectDanubeAYa
 598+ E480 DD 21 41 E3                          ld      ix,DanubePointer4
 599+ E484 DD 7E 00                             ld      a,(ix+0)
 600+ E487 06 00                                ld      b,0
 601+ E489 CD DA E3                             call    PlayDanubeNote
 602+ E48C 3E 03        .PlayChannel5:          ld      a,TURBO_CHIP_AY3
 603+ E48E CD 5C E3                             call    SelectDanubeAYa
 604+ E491 DD 21 43 E3                          ld      ix,DanubePointer5
 605+ E495 DD 7E 00                             ld      a,(ix+0)
 606+ E498 06 01                                ld      b,1
 607+ E49A CD DA E3                             call    PlayDanubeNote
 608+ E49D 3E 03        .PlayChannel6:          ld      a,TURBO_CHIP_AY3
 609+ E49F CD 5C E3                             call    SelectDanubeAYa
 610+ E4A2 DD 21 45 E3                          ld      ix,DanubePointer6
 611+ E4A6 DD 7E 00                             ld      a,(ix+0)
 612+ E4A9 06 02                                ld      b,2
 613+ E4AB CD DA E3                             call    PlayDanubeNote
 614+ E4AE 3A 58 E3     UpdatePointers:         ld      a,(DanubePace)
 615+ E4B1 32 59 E3                             ld      (DanubeTimer),a
 616+ E4B4 2A 53 E3                             ld      hl,(DanubeCounter)
 617+ E4B7 11 16 01                             ld      de,DanubeMax
 618+ E4BA E5           .compare16HLDE:         push    hl
 619+ E4BB A7                                   and     a
 620+ E4BC ED 52                                sbc     hl,de
 621+ E4BE E1                                   pop     hl
 622+ E4BF                                      ;break
 623+ E4BF 20 2A                                jr      nz,.MovePointersForward
 624+ E4C1 21 C5 E5     .ResetPointers:         ld      hl,BlueDanube1
 625+ E4C4 22 3B E3                             ld      (DanubePointer1),hl
 626+ E4C7 21 DA E6                             ld      hl,BlueDanube2
 627+ E4CA 22 3D E3                             ld      (DanubePointer2),hl
 628+ E4CD 21 EF E7                             ld      hl,BlueDanube3
 629+ E4D0 22 3F E3                             ld      (DanubePointer3),hl
 630+ E4D3 21 04 E9                             ld      hl,BlueDanube4
 631+ E4D6 22 41 E3                             ld      (DanubePointer4),hl
 632+ E4D9 21 19 EA                             ld      hl,BlueDanube5
 633+ E4DC 22 43 E3                             ld      (DanubePointer5),hl
 634+ E4DF 21 2E EB                             ld      hl,BlueDanube6
 635+ E4E2 22 45 E3                             ld      (DanubePointer6),hl
 636+ E4E5 21 00 00                             ld      hl,0
 637+ E4E8 22 53 E3                             ld      (DanubeCounter),hl
 638+ E4EB 23           .MovePointersForward:   inc     hl
 639+ E4EC 22 53 E3                             ld      (DanubeCounter),hl
 640+ E4EF 21 3B E3                             ld      hl,DanubePointer1
 641+ E4F2 CD 14 E5                             call    AdvancePointer
 642+ E4F5 21 3D E3                             ld      hl,DanubePointer2
 643+ E4F8 CD 14 E5                             call    AdvancePointer
 644+ E4FB 21 3F E3                             ld      hl,DanubePointer3
 645+ E4FE CD 14 E5                             call    AdvancePointer
 646+ E501 21 41 E3                             ld      hl,DanubePointer4
 647+ E504 CD 14 E5                             call    AdvancePointer
 648+ E507 21 43 E3                             ld      hl,DanubePointer5
 649+ E50A CD 14 E5                             call    AdvancePointer
 650+ E50D 21 45 E3                             ld      hl,DanubePointer6
 651+ E510 CD 14 E5                             call    AdvancePointer
 652+ E513 C9                                   ret
 653+ E514
 654+ E514 7E           AdvancePointer:         ld      a,(hl)
 655+ E515 23                                   inc     hl
 656+ E516 56                                   ld      d,(hl)
 657+ E517 5F                                   ld      e,a
 658+ E518 13                                   inc     de
 659+ E519 72                                   ld      (hl),d
 660+ E51A 2B                                   dec     hl
 661+ E51B 73                                   ld      (hl),e
 662+ E51C C9                                   ret
 663+ E51D
 664+ E51D
 665+ E51D
 666+ E51D
 667+ E51D BF 0F        TonesPitch       db  $BF,   $0F
 668+ E51F DC 0E                         db  $DC,   $0E
 669+ E521 07 0E                         db  $07,   $0E
 670+ E523 7B 1A                         db  $7B,   $1A
 671+ E525 FE 18                         db  $FE,   $18
 672+ E527 97 17                         db  $97,   $17
 673+ E529 44 16                         db  $44,   $16
 674+ E52B 04 15                         db  $04,   $15
 675+ E52D D6 13                         db  $D6,   $13
 676+ E52F B9 12                         db  $B9,   $12
 677+ E531 AC 11                         db  $AC,   $11
 678+ E533 AE 10                         db  $AE,   $10
 679+ E535 DF 07                         db  $DF,   $07
 680+ E537 6E 07                         db  $6E,   $07
 681+ E539 03 07                         db  $03,   $07
 682+ E53B 3D 0D                         db  $3D,   $0D
 683+ E53D 7F 0C                         db  $7F,   $0C
 684+ E53F CC 0B                         db  $CC,   $0B
 685+ E541 22 0B                         db  $22,   $0B
 686+ E543 82 0A                         db  $82,   $0A
 687+ E545 EB 09                         db  $EB,   $09
 688+ E547 5D 09                         db  $5D,   $09
 689+ E549 D6 08                         db  $D6,   $08
 690+ E54B 57 08                         db  $57,   $08
 691+ E54D F0 03                         db  $F0,   $03
 692+ E54F B7 03                         db  $B7,   $03
 693+ E551 82 03                         db  $82,   $03
 694+ E553 9F 06                         db  $9F,   $06
 695+ E555 40 06                         db  $40,   $06
 696+ E557 E6 05                         db  $E6,   $05
 697+ E559 91 05                         db  $91,   $05
 698+ E55B 41 05                         db  $41,   $05
 699+ E55D F6 04                         db  $F6,   $04
 700+ E55F AE 04                         db  $AE,   $04
 701+ E561 6B 04                         db  $6B,   $04
 702+ E563 2C 04                         db  $2C,   $04
 703+ E565 F8 01                         db  $F8,   $01
 704+ E567 DC 01                         db  $DC,   $01
 705+ E569 C1 01                         db  $C1,   $01
 706+ E56B 4F 03                         db  $4F,   $03
 707+ E56D 20 03                         db  $20,   $03
 708+ E56F F3 02                         db  $F3,   $02
 709+ E571 C9 02                         db  $C9,   $02
 710+ E573 A1 02                         db  $A1,   $02
 711+ E575 7B 02                         db  $7B,   $02
 712+ E577 57 02                         db  $57,   $02
 713+ E579 36 02                         db  $36,   $02
 714+ E57B 16 02                         db  $16,   $02
 715+ E57D FC 00                         db  $FC,   $00
 716+ E57F EE 00                         db  $EE,   $00
 717+ E581 E0 00                         db  $E0,   $00
 718+ E583 A8 01                         db  $A8,   $01
 719+ E585 90 01                         db  $90,   $01
 720+ E587 79 01                         db  $79,   $01
 721+ E589 64 01                         db  $64,   $01
 722+ E58B 50 01                         db  $50,   $01
 723+ E58D 3D 01                         db  $3D,   $01
 724+ E58F 2C 01                         db  $2C,   $01
 725+ E591 1B 01                         db  $1B,   $01
 726+ E593 0B 01                         db  $0B,   $01
 727+ E595 7E 00                         db  $7E,   $00
 728+ E597 77 00                         db  $77,   $00
 729+ E599 70 00                         db  $70,   $00
 730+ E59B D4 00                         db  $D4,   $00
 731+ E59D C8 00                         db  $C8,   $00
 732+ E59F BD 00                         db  $BD,   $00
 733+ E5A1 B2 00                         db  $B2,   $00
 734+ E5A3 A8 00                         db  $A8,   $00
 735+ E5A5 9F 00                         db  $9F,   $00
 736+ E5A7 96 00                         db  $96,   $00
 737+ E5A9 8D 00                         db  $8D,   $00
 738+ E5AB 85 00                         db  $85,   $00
 739+ E5AD 3F 00                         db  $3F,   $00
 740+ E5AF 3B 00                         db  $3B,   $00
 741+ E5B1 38 00                         db  $38,   $00
 742+ E5B3 6A 00                         db  $6A,   $00
 743+ E5B5 64 00                         db  $64,   $00
 744+ E5B7 5E 00                         db  $5E,   $00
 745+ E5B9 59 00                         db  $59,   $00
 746+ E5BB 54 00                         db  $54,   $00
 747+ E5BD 4F 00                         db  $4F,   $00
 748+ E5BF 4B 00                         db  $4B,   $00
 749+ E5C1 47 00                         db  $47,   $00
 750+ E5C3 43 00                         db  $43,   $00
 751+ E5C5
 752+ E5C5
 753+ E5C5              ; 1 Byte high nibble Octave, low note
 754+ E5C5              ; for now middle octave 3,
 755+ E5C5              ; low nibble mapping
 756+ E5C5              ;       0      1  2  3  4  5  6   7  8  9   A  B  C
 757+ E5C5              ;       None   A  A# B  C  C# D  D#  E  F  F#  G  G#
 758+ E5C5              ;BlueDanube1:     DB $00, $00, $00, $00, $00, $61, $61, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $61, $61, $5B, $5B, $00, $00, $00
 759+ E5C5              ;BlueDanube2:     DB $00, $00, $00, $00, $00, $5A, $5A, $5A, $5A, $00, $00, $00, $00, $00, $00, $00, $00, $58, $58, $55, $55, $00, $00, $00
 760+ E5C5              ;BlueDanube3:     DB $00, $00, $00, $41, $41, $00, $00, $56, $56, $00, $00, $00, $00, $00, $00, $41, $41, $00, $00, $00, $00, $00, $00, $00
 761+ E5C5              ;BlueDanube4:     DB $36, $36, $3A, $00, $00, $00, $00, $00, $00, $00, $00, $00, $36, $36, $3A, $00, $00, $00, $00, $00, $00, $00, $00, $00
 762+ E5C5
 763+ E5C5 00 00 00 48  BlueDanube1:          DB 	$00, 	$00, 	$00, 	$48, 	$00, 	$00, 	$00, 	$4A, 	$FF, 	$4A, 	$FF, 	$4A, 	$FF, 	$00, 	$00, 	$48, 	$00, 	$00, 	$00, 	$4B, 	$FF, 	$4B, 	$FF, 	$4B, 	$FF, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00
 763+ E5C9 00 00 00 4A
 763+ E5CD FF 4A FF 4A
 763+ E5D1 FF 00 00 48
 763+ E5D5 00 00 00 4B
 763+ E5D9 FF 4B FF 4B
 763+ E5DD FF 00 00 00
 763+ E5E1 00 00 00 00
 763+ E5E5 00 00 00 00
 763+ E5E9 00 00 00 00
 763+ E5ED 00 00 00 00
 763+ E5F1 00 00 00 00
 763+ E5F5 00 00 00 00
 763+ E5F9 00 00 00 00
 763+ E5FD 00 00 00 00
 763+ E601 00 00 00 00
 764+ E605 00 00 00 00                        DB	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00
 764+ E609 00 00 00 00
 764+ E60D 00 00 00 00
 764+ E611 00 00 00 00
 764+ E615 00 00 00 00
 764+ E619 00 00 00 00
 764+ E61D 00 00 00 00
 764+ E621 00 00 00 00
 764+ E625 00 00 00 00
 764+ E629 00 00 00 00
 764+ E62D 00 00 00 00
 764+ E631 00 00 00 00
 764+ E635 00 00 00 00
 764+ E639 00 00 00 00
 764+ E63D 00 00 00 00
 764+ E641 00 00 00 00
 765+ E645 00 00 00 00                        DB	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$48, 	$FF, 	$48, 	$FF, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$48, 	$00, 	$48, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$4B, 	$FF, 	$4B, 	$FF, 	$00, 	$00
 765+ E649 00 00 00 00
 765+ E64D 00 00 48 FF
 765+ E651 48 FF 00 00
 765+ E655 00 00 00 00
 765+ E659 00 00 00 00
 765+ E65D 00 00 00 00
 765+ E661 00 00 00 00
 765+ E665 00 00 00 48
 765+ E669 00 48 00 00
 765+ E66D 00 00 00 00
 765+ E671 00 00 00 00
 765+ E675 00 00 00 00
 765+ E679 00 00 00 00
 765+ E67D 00 00 4B FF
 765+ E681 4B FF 00 00
 766+ E685 00 00 00 00                        DB	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$4B, 	$FF, 	$4B, 	$FF, 	$00, 	$00, 	$48, 	$FF, 	$48, 	$FF, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$4A, 	$FF, 	$4A, 	$FF, 	$4A, 	$FF, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$48
 766+ E689 00 00 00 00
 766+ E68D 00 00 00 00
 766+ E691 00 00 00 00
 766+ E695 00 4B FF 4B
 766+ E699 FF 00 00 48
 766+ E69D FF 48 FF 00
 766+ E6A1 00 00 00 00
 766+ E6A5 00 00 00 00
 766+ E6A9 00 00 00 4A
 766+ E6AD FF 4A FF 4A
 766+ E6B1 FF 00 00 00
 766+ E6B5 00 00 00 00
 766+ E6B9 00 00 00 00
 766+ E6BD 00 00 00 00
 766+ E6C1 00 00 00 48
 767+ E6C5 FF 00 00 00                        DB	$FF, 	$00, 	$00, 	$00, 	$00, 	$4A, 	$FF, 	$00, 	$00, 	$00, 	$00, 	$4B, 	$FF, 	$4B, 	$FF, 	$00, 	$00, 	$4B, 	$FF, 	$49, 	$FF
 767+ E6C9 00 4A FF 00
 767+ E6CD 00 00 00 4B
 767+ E6D1 FF 4B FF 00
 767+ E6D5 00 4B FF 49
 767+ E6D9 FF
 768+ E6DA 00 44 46 00  BlueDanube2:          DB 	$00, 	$44, 	$46, 	$00, 	$00, 	$44, 	$FF, 	$44, 	$FF, 	$44, 	$FF, 	$44, 	$FF, 	$44, 	$46, 	$00, 	$00, 	$43, 	$FF, 	$43, 	$FF, 	$43, 	$FF, 	$43, 	$FF, 	$43, 	$44, 	$46, 	$00, 	$00, 	$00, 	$44, 	$00, 	$00, 	$00, 	$00, 	$00, 	$44, 	$00, 	$00, 	$00, 	$00, 	$00, 	$44, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00
 768+ E6DE 00 44 FF 44
 768+ E6E2 FF 44 FF 44
 768+ E6E6 FF 44 46 00
 768+ E6EA 00 43 FF 43
 768+ E6EE FF 43 FF 43
 768+ E6F2 FF 43 44 46
 768+ E6F6 00 00 00 44
 768+ E6FA 00 00 00 00
 768+ E6FE 00 44 00 00
 768+ E702 00 00 00 44
 768+ E706 00 00 00 00
 768+ E70A 00 00 00 00
 768+ E70E 00 00 00 00
 768+ E712 00 00 00 00
 768+ E716 00 00 00 00
 769+ E71A 00 00 00 00                        DB	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$46, 	$00, 	$46, 	$00, 	$00, 	$00, 	$43, 	$00, 	$43, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$46, 	$FF, 	$46, 	$FF, 	$00, 	$00, 	$44, 	$44, 	$00, 	$00, 	$00, 	$00
 769+ E71E 00 00 00 00
 769+ E722 00 00 00 00
 769+ E726 00 00 00 00
 769+ E72A 00 00 00 00
 769+ E72E 00 00 00 00
 769+ E732 00 00 00 00
 769+ E736 46 00 46 00
 769+ E73A 00 00 43 00
 769+ E73E 43 00 00 00
 769+ E742 00 00 00 00
 769+ E746 00 00 00 00
 769+ E74A 00 00 00 00
 769+ E74E 46 FF 46 FF
 769+ E752 00 00 44 44
 769+ E756 00 00 00 00
 770+ E75A 00 00 00 00                        DB	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$44, 	$FF, 	$44, 	$FF, 	$00, 	$00, 	$44, 	$FF, 	$44, 	$FF, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$43, 	$00, 	$43, 	$00, 	$00, 	$00, 	$43, 	$FF, 	$43, 	$FF, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$43, 	$FF, 	$43, 	$FF, 	$00, 	$46
 770+ E75E 00 00 00 00
 770+ E762 00 00 44 FF
 770+ E766 44 FF 00 00
 770+ E76A 44 FF 44 FF
 770+ E76E 00 00 00 00
 770+ E772 00 00 00 00
 770+ E776 00 00 00 00
 770+ E77A 00 00 00 43
 770+ E77E 00 43 00 00
 770+ E782 00 43 FF 43
 770+ E786 FF 00 00 00
 770+ E78A 00 00 00 00
 770+ E78E 00 00 00 00
 770+ E792 00 00 43 FF
 770+ E796 43 FF 00 46
 771+ E79A FF 46 FF 00                        DB	$FF, 	$46, 	$FF, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$48, 	$FF, 	$48, 	$FF, 	$00, 	$00, 	$44, 	$FF, 	$44, 	$FF, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$44, 	$FF, 	$44, 	$FF, 	$44, 	$FF, 	$00, 	$00, 	$00, 	$00, 	$43, 	$FF, 	$00, 	$00, 	$00, 	$00, 	$43, 	$FF, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$44
 771+ E79E 00 00 00 00
 771+ E7A2 00 00 00 00
 771+ E7A6 00 00 00 00
 771+ E7AA 00 48 FF 48
 771+ E7AE FF 00 00 44
 771+ E7B2 FF 44 FF 00
 771+ E7B6 00 00 00 00
 771+ E7BA 00 00 00 00
 771+ E7BE 00 00 00 44
 771+ E7C2 FF 44 FF 44
 771+ E7C6 FF 00 00 00
 771+ E7CA 00 43 FF 00
 771+ E7CE 00 00 00 43
 771+ E7D2 FF 00 00 00
 771+ E7D6 00 00 00 44
 772+ E7DA FF 00 00 00                        DB	$FF, 	$00, 	$00, 	$00, 	$00, 	$44, 	$FF, 	$00, 	$00, 	$00, 	$00, 	$43, 	$FF, 	$43, 	$FF, 	$00, 	$00, 	$43, 	$FF, 	$00, 	$00
 772+ E7DE 00 44 FF 00
 772+ E7E2 00 00 00 43
 772+ E7E6 FF 43 FF 00
 772+ E7EA 00 43 FF 00
 772+ E7EE 00
 773+ E7EF 00 00 00 00  BlueDanube3:          DB 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$41, 	$FF, 	$41, 	$FF, 	$41, 	$FF, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$3B, 	$FF, 	$3B, 	$FF, 	$3B, 	$FF, 	$00, 	$00, 	$00, 	$00, 	$41, 	$00, 	$00, 	$00, 	$00, 	$00, 	$3B, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$41, 	$00, 	$00, 	$00, 	$00, 	$00, 	$3B, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00
 773+ E7F3 00 00 00 41
 773+ E7F7 FF 41 FF 41
 773+ E7FB FF 00 00 00
 773+ E7FF 00 00 00 3B
 773+ E803 FF 3B FF 3B
 773+ E807 FF 00 00 00
 773+ E80B 00 41 00 00
 773+ E80F 00 00 00 3B
 773+ E813 00 00 00 00
 773+ E817 00 00 00 00
 773+ E81B 00 00 00 00
 773+ E81F 00 41 00 00
 773+ E823 00 00 00 3B
 773+ E827 00 00 00 00
 773+ E82B 00 00 00 00
 774+ E82F 00 00 00 00                        DB	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$43, 	$00, 	$43, 	$00, 	$00, 	$00, 	$3B, 	$00, 	$3B, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$41, 	$FF, 	$41, 	$FF, 	$00, 	$00, 	$41, 	$41, 	$00, 	$00, 	$00, 	$00
 774+ E833 00 00 00 00
 774+ E837 00 00 00 00
 774+ E83B 00 00 00 00
 774+ E83F 00 00 00 00
 774+ E843 00 00 00 00
 774+ E847 00 00 00 00
 774+ E84B 43 00 43 00
 774+ E84F 00 00 3B 00
 774+ E853 3B 00 00 00
 774+ E857 00 00 00 00
 774+ E85B 00 00 00 00
 774+ E85F 00 00 00 00
 774+ E863 41 FF 41 FF
 774+ E867 00 00 41 41
 774+ E86B 00 00 00 00
 775+ E86F 00 00 00 00                        DB	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$41, 	$FF, 	$41, 	$FF, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$3B, 	$FF, 	$3B, 	$FF, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$3B, 	$FF, 	$FF, 	$FF, 	$FF, 	$FF, 	$FF, 	$FF, 	$00, 	$3B
 775+ E873 00 00 00 00
 775+ E877 00 00 00 00
 775+ E87B 00 00 00 00
 775+ E87F 41 FF 41 FF
 775+ E883 00 00 00 00
 775+ E887 00 00 00 00
 775+ E88B 00 00 00 00
 775+ E88F 00 00 00 00
 775+ E893 00 00 00 00
 775+ E897 00 3B FF 3B
 775+ E89B FF 00 00 00
 775+ E89F 00 00 00 00
 775+ E8A3 00 00 3B FF
 775+ E8A7 FF FF FF FF
 775+ E8AB FF FF 00 3B
 776+ E8AF FF 3B FF 00                        DB	$FF, 	$3B, 	$FF, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$3B, 	$FF, 	$00, 	$00, 	$00, 	$00, 	$3B, 	$FF, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$41, 	$FF, 	$41, 	$FF, 	$41, 	$FF, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$3B, 	$FF, 	$3B, 	$FF, 	$00, 	$00, 	$3B, 	$FF, 	$00, 	$00, 	$00, 	$00, 	$00
 776+ E8B3 00 00 00 00
 776+ E8B7 00 00 00 00
 776+ E8BB 00 3B FF 00
 776+ E8BF 00 00 00 3B
 776+ E8C3 FF 00 00 00
 776+ E8C7 00 00 00 00
 776+ E8CB 00 00 00 00
 776+ E8CF 00 00 00 00
 776+ E8D3 00 00 00 41
 776+ E8D7 FF 41 FF 41
 776+ E8DB FF 00 00 00
 776+ E8DF 00 00 00 3B
 776+ E8E3 FF 3B FF 00
 776+ E8E7 00 3B FF 00
 776+ E8EB 00 00 00 00
 777+ E8EF 00 00 00 00                        DB	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$3B, 	$FF, 	$3B, 	$FF, 	$00, 	$00, 	$00, 	$00, 	$3C, 	$FF
 777+ E8F3 00 00 00 00
 777+ E8F7 00 00 00 3B
 777+ E8FB FF 3B FF 00
 777+ E8FF 00 00 00 3C
 777+ E903 FF
 778+ E904 00 00 00 00  BlueDanube4:          DB 	$00, 	$00, 	$00, 	$00, 	$36, 	$00, 	$00, 	$36, 	$FF, 	$36, 	$FF, 	$36, 	$FF, 	$00, 	$00, 	$00, 	$36, 	$00, 	$00, 	$36, 	$FF, 	$36, 	$FF, 	$36, 	$FF, 	$00, 	$00, 	$00, 	$36, 	$36, 	$00, 	$00, 	$00, 	$36, 	$00, 	$36, 	$00, 	$00, 	$00, 	$36, 	$00, 	$3A, 	$00, 	$00, 	$00, 	$36, 	$00, 	$38, 	$00, 	$00, 	$00, 	$00, 	$00, 	$36, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$3A, 	$00, 	$00
 778+ E908 36 00 00 36
 778+ E90C FF 36 FF 36
 778+ E910 FF 00 00 00
 778+ E914 36 00 00 36
 778+ E918 FF 36 FF 36
 778+ E91C FF 00 00 00
 778+ E920 36 36 00 00
 778+ E924 00 36 00 36
 778+ E928 00 00 00 36
 778+ E92C 00 3A 00 00
 778+ E930 00 36 00 38
 778+ E934 00 00 00 00
 778+ E938 00 36 00 00
 778+ E93C 00 00 00 00
 778+ E940 00 3A 00 00
 779+ E944 00 36 00 00                        DB	$00, 	$36, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$36, 	$FF, 	$36, 	$FF, 	$FF, 	$FF, 	$FF, 	$FF, 	$FF, 	$FF, 	$FF, 	$FF, 	$FF, 	$FF, 	$FF, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$36, 	$FF, 	$36, 	$FF, 	$FF, 	$FF, 	$FF, 	$FF, 	$FF, 	$FF, 	$FF, 	$FF, 	$FF, 	$FF, 	$00, 	$00, 	$00, 	$00
 779+ E948 00 00 00 00
 779+ E94C 00 00 00 00
 779+ E950 00 00 00 00
 779+ E954 00 00 00 00
 779+ E958 00 00 00 36
 779+ E95C FF 36 FF FF
 779+ E960 FF FF FF FF
 779+ E964 FF FF FF FF
 779+ E968 FF FF 00 00
 779+ E96C 00 00 00 00
 779+ E970 00 00 36 FF
 779+ E974 36 FF FF FF
 779+ E978 FF FF FF FF
 779+ E97C FF FF FF FF
 779+ E980 00 00 00 00
 780+ E984 00 00 00 00                        DB	$00, 	$00, 	$00, 	$00, 	$38, 	$FF, 	$FF, 	$FF, 	$FF, 	$FF, 	$FF, 	$FF, 	$FF, 	$FF, 	$FF, 	$FF, 	$38, 	$FF, 	$38, 	$FF, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$38, 	$FF, 	$38, 	$FF, 	$FF, 	$FF, 	$FF, 	$FF, 	$FF, 	$FF, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$36, 	$36, 	$FF, 	$FF, 	$FF, 	$FF, 	$FF, 	$FF, 	$FF, 	$00, 	$00
 780+ E988 38 FF FF FF
 780+ E98C FF FF FF FF
 780+ E990 FF FF FF FF
 780+ E994 38 FF 38 FF
 780+ E998 00 00 00 00
 780+ E99C 00 00 00 00
 780+ E9A0 00 38 FF 38
 780+ E9A4 FF FF FF FF
 780+ E9A8 FF FF FF 00
 780+ E9AC 00 00 00 00
 780+ E9B0 00 00 00 00
 780+ E9B4 00 00 00 00
 780+ E9B8 00 36 36 FF
 780+ E9BC FF FF FF FF
 780+ E9C0 FF FF 00 00
 781+ E9C4 00 00 00 00                        DB	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$36, 	$FF, 	$38, 	$FF, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$38, 	$FF, 	$38, 	$FF, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$36, 	$FF, 	$00, 	$00, 	$36, 	$FF, 	$36, 	$FF, 	$36, 	$FF, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00
 781+ E9C8 00 00 00 00
 781+ E9CC 00 00 00 36
 781+ E9D0 FF 38 FF 00
 781+ E9D4 00 00 00 00
 781+ E9D8 00 00 00 00
 781+ E9DC 00 00 00 00
 781+ E9E0 00 00 00 00
 781+ E9E4 00 00 00 38
 781+ E9E8 FF 38 FF 00
 781+ E9EC 00 00 00 00
 781+ E9F0 00 00 00 36
 781+ E9F4 FF 00 00 36
 781+ E9F8 FF 36 FF 36
 781+ E9FC FF 00 00 00
 781+ EA00 00 00 00 00
 782+ EA04 00 00 00 38                        DB	$00, 	$00, 	$00, 	$38, 	$FF, 	$00, 	$00, 	$36, 	$FF, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00
 782+ EA08 FF 00 00 36
 782+ EA0C FF 00 00 00
 782+ EA10 00 00 00 00
 782+ EA14 00 00 00 00
 782+ EA18 00
 783+ EA19 00 00 00 00  BlueDanube5:          DB 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$34, 	$00, 	$00, 	$00, 	$00, 	$00, 	$33, 	$00, 	$34, 	$00, 	$00, 	$00, 	$31
 783+ EA1D 00 00 00 00
 783+ EA21 00 00 00 00
 783+ EA25 00 00 00 00
 783+ EA29 00 00 00 00
 783+ EA2D 00 00 00 00
 783+ EA31 00 00 00 00
 783+ EA35 00 00 00 00
 783+ EA39 00 00 00 00
 783+ EA3D 00 00 00 00
 783+ EA41 00 00 00 00
 783+ EA45 00 00 00 00
 783+ EA49 00 00 00 34
 783+ EA4D 00 00 00 00
 783+ EA51 00 33 00 34
 783+ EA55 00 00 00 31
 784+ EA59 00 00 00 00                        DB	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$34, 	$00, 	$00, 	$00, 	$00, 	$00, 	$31, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$33, 	$FF, 	$00, 	$00, 	$33, 	$FF, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$33, 	$FF, 	$00, 	$00, 	$31, 	$FF, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00
 784+ EA5D 00 00 00 34
 784+ EA61 00 00 00 00
 784+ EA65 00 31 00 00
 784+ EA69 00 00 00 00
 784+ EA6D 00 33 FF 00
 784+ EA71 00 33 FF 00
 784+ EA75 00 00 00 00
 784+ EA79 00 00 00 00
 784+ EA7D 00 00 00 00
 784+ EA81 00 00 00 00
 784+ EA85 33 FF 00 00
 784+ EA89 31 FF 00 00
 784+ EA8D 00 00 00 00
 784+ EA91 00 00 00 00
 784+ EA95 00 00 00 00
 785+ EA99 00 00 31 FF                        DB	$00, 	$00, 	$31, 	$FF, 	$00, 	$00, 	$31, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$31, 	$FF, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$31, 	$FF, 	$00, 	$00, 	$33, 	$FF, 	$FF, 	$FF, 	$FF, 	$FF, 	$FF, 	$FF, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$33, 	$FF, 	$00, 	$33, 	$FF, 	$FF, 	$FF, 	$FF, 	$FF, 	$FF, 	$FF, 	$00, 	$33
 785+ EA9D 00 00 31 00
 785+ EAA1 00 00 00 00
 785+ EAA5 00 00 00 00
 785+ EAA9 00 00 31 FF
 785+ EAAD 00 00 00 00
 785+ EAB1 00 00 00 31
 785+ EAB5 FF 00 00 33
 785+ EAB9 FF FF FF FF
 785+ EABD FF FF FF 00
 785+ EAC1 00 00 00 00
 785+ EAC5 00 00 00 00
 785+ EAC9 00 00 00 33
 785+ EACD FF 00 33 FF
 785+ EAD1 FF FF FF FF
 785+ EAD5 FF FF 00 33
 786+ EAD9 FF 33 FF 00                        DB	$FF, 	$33, 	$FF, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$33, 	$FF, 	$00, 	$00, 	$34, 	$FF, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$31, 	$FF, 	$31, 	$FF, 	$34, 	$FF, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$35, 	$FF, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$33, 	$FF, 	$33, 	$FF, 	$00
 786+ EADD 00 00 00 00
 786+ EAE1 00 33 FF 00
 786+ EAE5 00 34 FF 00
 786+ EAE9 00 00 00 00
 786+ EAED 00 00 00 00
 786+ EAF1 00 00 00 00
 786+ EAF5 00 31 FF 31
 786+ EAF9 FF 34 FF 00
 786+ EAFD 00 00 00 00
 786+ EB01 00 00 00 00
 786+ EB05 00 35 FF 00
 786+ EB09 00 00 00 00
 786+ EB0D 00 00 00 00
 786+ EB11 00 00 00 33
 786+ EB15 FF 33 FF 00
 787+ EB19 00 31 FF 00                        DB	$00, 	$31, 	$FF, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00
 787+ EB1D 00 00 00 00
 787+ EB21 00 00 00 00
 787+ EB25 00 00 00 00
 787+ EB29 00 00 00 00
 787+ EB2D 00
 788+ EB2E 00 00 00 00  BlueDanube6:          DB 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00
 788+ EB32 00 00 00 00
 788+ EB36 00 00 00 00
 788+ EB3A 00 00 00 00
 788+ EB3E 00 00 00 00
 788+ EB42 00 00 00 00
 788+ EB46 00 00 00 00
 788+ EB4A 00 00 00 00
 788+ EB4E 00 00 00 00
 788+ EB52 00 00 00 00
 788+ EB56 00 00 00 00
 788+ EB5A 00 00 00 00
 788+ EB5E 00 00 00 00
 788+ EB62 00 00 00 00
 788+ EB66 00 00 00 00
 788+ EB6A 00 00 00 00
 789+ EB6E 00 00 00 00                        DB	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$2B, 	$FF, 	$00, 	$00, 	$00, 	$00, 	$2B, 	$FF, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$2B, 	$FF, 	$2B, 	$FF, 	$00, 	$00, 	$00, 	$00, 	$2A, 	$FF, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$2A, 	$FF
 789+ EB72 00 00 00 00
 789+ EB76 00 00 00 00
 789+ EB7A 00 00 00 00
 789+ EB7E 00 00 00 2B
 789+ EB82 FF 00 00 00
 789+ EB86 00 2B FF 00
 789+ EB8A 00 00 00 00
 789+ EB8E 00 00 00 00
 789+ EB92 00 00 00 00
 789+ EB96 2B FF 2B FF
 789+ EB9A 00 00 00 00
 789+ EB9E 2A FF 00 00
 789+ EBA2 00 00 00 00
 789+ EBA6 00 00 00 00
 789+ EBAA 00 00 2A FF
 790+ EBAE 2A FF 00 00                        DB	$2A, 	$FF, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$2A, 	$FF, 	$2A, 	$FF, 	$00, 	$00, 	$00, 	$00, 	$2B, 	$FF, 	$FF, 	$FF, 	$FF, 	$FF, 	$FF, 	$FF, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$2B, 	$FF, 	$2B, 	$FF, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00
 790+ EBB2 00 00 00 00
 790+ EBB6 00 00 00 00
 790+ EBBA 00 00 00 00
 790+ EBBE 00 00 00 00
 790+ EBC2 00 00 00 2A
 790+ EBC6 FF 2A FF 00
 790+ EBCA 00 00 00 2B
 790+ EBCE FF FF FF FF
 790+ EBD2 FF FF FF 00
 790+ EBD6 00 00 00 00
 790+ EBDA 00 00 00 2B
 790+ EBDE FF 2B FF 00
 790+ EBE2 00 00 00 00
 790+ EBE6 00 00 00 00
 790+ EBEA 00 00 00 00
 791+ EBEE 00 00 00 00                        DB	$00, 	$00, 	$00, 	$00, 	$00, 	$2B, 	$FF, 	$2B, 	$FF, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$2B, 	$FF, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00
 791+ EBF2 00 2B FF 2B
 791+ EBF6 FF 00 00 00
 791+ EBFA 00 00 00 00
 791+ EBFE 00 00 00 00
 791+ EC02 00 00 00 00
 791+ EC06 00 00 00 00
 791+ EC0A 00 00 00 00
 791+ EC0E 00 00 00 00
 791+ EC12 00 00 00 00
 791+ EC16 00 00 00 00
 791+ EC1A 00 00 00 00
 791+ EC1E 00 2B FF 00
 791+ EC22 00 00 00 00
 791+ EC26 00 00 00 00
 791+ EC2A 00 00 00 00
 792+ EC2E 00 00 00 00                        DB	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$2B, 	$FF, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00, 	$00
 792+ EC32 00 00 00 00
 792+ EC36 00 2B FF 00
 792+ EC3A 00 00 00 00
 792+ EC3E 00 00 00 00
 792+ EC42 00
 793+ EC43
# file closed: ./Hardware/sound.asm
1148  EC43                                  DISPLAY "Sound ",BankSound," - Bytes free ",/D, $2000 - ($-SoundAddr), " - BankSound"
1149  EC43                                  ASSERT $-SoundAddr <8912, Bank code leaks over 8K boundary
1150  EC43               ; Bank 102  -----------------------------------------------------------------------------------------------------------------------
1151  EC43                                  SLOT    MathsBankedFnsAddr
1152  EC43                                  PAGE    BankMathsBankedFns
1153  EC43                                  ORG     MathsBankedFnsAddr,BankMathsBankedFns
1154  0000                                  INCLUDE "./Maths/MathsBankedFns.asm"
# file opened: ./Maths/MathsBankedFns.asm
   1+ 0000              ;------------------------------------------------------------
   2+ 0000              ; HL Signed = HL - DE
   3+ 0000 7A           SubDEfromHLSigned:      ld      a,d
   4+ 0001 EE 80                                xor     $80
   5+ 0003 57                                   ld      d,a
   6+ 0004              ;------------------------------------------------------------
   7+ 0004              ; Adds DE to HL, in form S15 result will also be S15 rather than 2's C
   8+ 0004 7C           AddDEtoHLSigned:        ld      a,h                         ; extract h sign to b
   9+ 0005 E6 80                                and     $80                         ; hl = abs (hl)
  10+ 0007 47                                   ld      b,a
  11+ 0008 7C                                   ld      a,h
  12+ 0009 E6 7F                                and     $7F
  13+ 000B 67                                   ld      h,a
  14+ 000C 7A                                   ld      a,d                         ; extract d sign to c
  15+ 000D E6 80                                and     $80                         ; de = abs (de)
  16+ 000F 4F                                   ld      c,a
  17+ 0010 7A                                   ld      a,d
  18+ 0011 E6 7F                                and     $7F
  19+ 0013 57                                   ld      d,a
  20+ 0014 78                                   ld      a,b
  21+ 0015 A9                                   xor     c
  22+ 0016 C2 1E 00                             jp      nz,.OppositeSigns
  23+ 0019 19           .SameSigns              add     hl,de                       ; same signs so just add
  24+ 001A 78                                   ld      a,b                         ; and bring in the sign from b
  25+ 001B B4                                   or      h                           ; note this has to be 15 bit result
  26+ 001C 67                                   ld      h,a                         ; but we can assume that
  27+ 001D C9                                   ret
  28+ 001E              .OppositeSigns:         ClearCarryFlag
  28+ 001E B7          >                        or a
  29+ 001F ED 52                                sbc     hl,de
  30+ 0021 38 04                                jr      c,.OppsiteSignInvert
  31+ 0023 78           .OppositeSignNoInvert:  ld      a,b                         ; we got here so hl > de therefore we can just take hl's previous sign bit
  32+ 0024 B4                                   or      h
  33+ 0025 67                                   ld      h,a                         ; set the previou sign value
  34+ 0026 C9                                   ret
  35+ 0027              .OppsiteSignInvert:     NegHL                              ; we need to flip the sign and 2'c the Hl result
  35+ 0027 AF          >                    xor a
  35+ 0028 95          >                    sub l
  35+ 0029 6F          >                    ld l,a
  35+ 002A 9F          >                    sbc a,a
  35+ 002B 94          >                    sub h
  35+ 002C 67          >                    ld h,a
  36+ 002D 78                                   ld      a,b
  37+ 002E EE 80                                xor     SignOnly8Bit               ; flip sign bit
  38+ 0030 B4                                   or      h
  39+ 0031 67                                   ld      h,a                         ; recover sign
  40+ 0032 C9                                   ret
  41+ 0033
  42+ 0033              ;------------------------------------------------------------
  43+ 0033              ; AHL = BHL+CDE where signs are held in B and C
  44+ 0033 78           ADDHLDESignBC:          ld      a,b
  45+ 0034 E6 80                                and     SignOnly8Bit
  46+ 0036 A9                                   xor     c                           ;if b sign and c sign were different then bit 7 of a will be 1 which means
  47+ 0037                                      JumpIfNegative .ADDHLDEsBCOppSGN     ;Signs are opposite there fore we can subtract to get difference
  47+ 0037 FA 45 00    >                        jp		m, .ADDHLDEsBCOppSGN
  48+ 003A 78           .ADDHLDEsBCSameSigns:   ld      a,b
  49+ 003B B1                                   or      c
  50+ 003C                                      JumpIfNegative .ADDHLDEsBCSameNeg    ; optimisation so we can just do simple add if both positive
  50+ 003C FA 41 00    >                        jp		m, .ADDHLDEsBCSameNeg
  51+ 003F 19                                   add     hl,de                       ; both positive so a will already be zero
  52+ 0040 C9                                   ret
  53+ 0041 19           .ADDHLDEsBCSameNeg:      add     hl,de
  54+ 0042 78                                   ld      a,b
  55+ 0043                                      DISPLAY "TODO: don't bother with overflow for now"
  56+ 0043 B1                                   or      c                           ; now set bit for negative value, we won't bother with overflow for now TODO
  57+ 0044 C9                                   ret
  58+ 0045              .ADDHLDEsBCOppSGN:      ClearCarryFlag
  58+ 0045 B7          >                        or a
  59+ 0046 ED 52                                sbc     hl,de
  60+ 0048 38 02                                jr      c,.ADDHLDEsBCOppInvert
  61+ 004A 78           .ADDHLDEsBCOppSGNNoCarry:ld      a,b                         ; we got here so hl > de therefore we can just take hl's previous sign bit
  62+ 004B C9                                   ret
  63+ 004C              .ADDHLDEsBCOppInvert:   NegHL                               ; if result was zero then set sign to zero (which doing h or l will give us for free)
  63+ 004C AF          >                    xor a
  63+ 004D 95          >                    sub l
  63+ 004E 6F          >                    ld l,a
  63+ 004F 9F          >                    sbc a,a
  63+ 0050 94          >                    sub h
  63+ 0051 67          >                    ld h,a
  64+ 0052 78                                   ld      a,b
  65+ 0053 EE 80                                xor     SignOnly8Bit                ; flip sign bit
  66+ 0055 C9                                   ret
  67+ 0056                  DISPLAY "TODO: Check if ADDHLDESignedV4 is deprecated by AddDEtoHLSigned"
  68+ 0056 7C           ADDHLDESignedV4:        ld      a,h
  69+ 0057 E6 80                                and     SignOnly8Bit
  70+ 0059 47                                   ld      b,a                         ;save sign bit in b
  71+ 005A AA                                   xor     d                           ;if h sign and d sign were different then bit 7 of a will be 1 which means
  72+ 005B                                      JumpIfNegative .ADDHLDEOppSGN       ;Signs are opposite there fore we can subtract to get difference
  72+ 005B FA 73 00    >                        jp		m, .ADDHLDEOppSGN
  73+ 005E 78           .ADDHLDESameSigns:      ld      a,b
  74+ 005F B2                                   or      d
  75+ 0060                                      JumpIfNegative .ADDHLDESameNeg      ; optimisation so we can just do simple add if both positive
  75+ 0060 FA 65 00    >                        jp		m, .ADDHLDESameNeg
  76+ 0063 19                                   add     hl,de
  77+ 0064 C9                                   ret
  78+ 0065 7C           .ADDHLDESameNeg:        ld      a,h                         ; so if we enter here then signs are the same so we clear the 16th bit
  79+ 0066 E6 7F                                and     SignMask8Bit                ; we could check the value of b for optimisation
  80+ 0068 67                                   ld      h,a
  81+ 0069 7A                                   ld      a,d
  82+ 006A E6 7F                                and     SignMask8Bit
  83+ 006C 57                                   ld      d,a
  84+ 006D 19                                   add     hl,de
  85+ 006E 3E 80                                ld      a,SignOnly8Bit
  86+ 0070                                      DISPLAY "TODO:  dont bother with overflow for now"
  87+ 0070 B4                                   or      h                           ; now set bit for negative value, we won't bother with overflow for now TODO
  88+ 0071 67                                   ld      h,a
  89+ 0072 C9                                   ret
  90+ 0073 7C           .ADDHLDEOppSGN:         ld      a,h                         ; so if we enter here then signs are the same so we clear the 16th bit                     ; here HL and DE are opposite
  91+ 0074 E6 7F                                and     SignMask8Bit                ; we could check the value of b for optimisation
  92+ 0076 67                                   ld      h,a
  93+ 0077 7A                                   ld      a,d
  94+ 0078 E6 7F                                and     SignMask8Bit
  95+ 007A 57                                   ld      d,a
  96+ 007B                                      ClearCarryFlag
  96+ 007B B7          >                        or a
  97+ 007C ED 52                                sbc     hl,de
  98+ 007E 38 04                                jr      c,.ADDHLDEOppInvert
  99+ 0080 78           .ADDHLDEOppSGNNoCarry:  ld      a,b                         ; we got here so hl > de therefore we can just take hl's previous sign bit
 100+ 0081 B4                                   or      h
 101+ 0082 67                                   ld      h,a                         ; set the previou sign value
 102+ 0083 C9                                   ret
 103+ 0084              .ADDHLDEOppInvert:      NegHL                                                   ; we need to flip the sign and 2'c the Hl result
 103+ 0084 AF          >                    xor a
 103+ 0085 95          >                    sub l
 103+ 0086 6F          >                    ld l,a
 103+ 0087 9F          >                    sbc a,a
 103+ 0088 94          >                    sub h
 103+ 0089 67          >                    ld h,a
 104+ 008A 78                                   ld      a,b
 105+ 008B EE 80                                xor     SignOnly8Bit                ; flip sign bit
 106+ 008D B4                                   or      h
 107+ 008E 67                                   ld      h,a                         ; recover sign
 108+ 008F C9                                   ret
 109+ 0090
 110+ 0090              ;------------------------------------------------------------
 111+ 0090              ; extension to AddBCHtoDELsigned
 112+ 0090              ; takes ix as the address of the values to load into DEL
 113+ 0090              ;       iy as the address of the values to load into BCH
 114+ 0090 DD 6E 00     AddAtIXtoAtIY24Signed:  ld      l,(ix+0)            ; del = ix (sign hi lo)
 115+ 0093 DD 5E 01                             ld      e,(ix+1)            ; .
 116+ 0096 DD 56 02                             ld      d,(ix+2)            ; .
 117+ 0099 FD 66 00                             ld      h,(iy+0)            ; bch = iy (sign, hi, lo)
 118+ 009C FD 4E 01                             ld      c,(iy+1)            ; .
 119+ 009F FD 46 02                             ld      b,(iy+2)            ; .
 120+ 00A2 FD E5                                push    iy                  ; save iy as add function changes is
 121+ 00A4 CD 14 01                             call    AddBCHtoDELsigned   ; Perform del += bch
 122+ 00A7 FD E1                                pop     iy                  ; get iy back
 123+ 00A9 DD 75 00                             ld      (ix+0),l            ; put result into (ix)
 124+ 00AC DD 73 01                             ld      (ix+1),e            ; .
 125+ 00AF DD 72 02                             ld      (ix+2),d            ; .
 126+ 00B2 C9                                   ret
 127+ 00B3              ;------------------------------------------------------------
 128+ 00B3              ; DEL = @IX + @IY 24 bit signed
 129+ 00B3              AddDELequAtIXPlusIY24Signed:
 130+ 00B3 DD 6E 00                             ld      l,(ix+0)            ; del = ix (sign hi lo)
 131+ 00B6 DD 5E 01                             ld      e,(ix+1)            ; .
 132+ 00B9 DD 56 02                             ld      d,(ix+2)            ; .
 133+ 00BC FD 66 00                             ld      h,(iy+0)            ; bch = iy (sign, hi, lo)
 134+ 00BF FD 4E 01                             ld      c,(iy+1)            ; .
 135+ 00C2 FD 46 02                             ld      b,(iy+2)            ; .
 136+ 00C5 FD E5                                push    iy                  ; save iy as add function changes is
 137+ 00C7 CD 14 01                             call    AddBCHtoDELsigned   ; Perform del += bch
 138+ 00CA FD E1                                pop     iy                  ; get iy back
 139+ 00CC C9                                   ret
 140+ 00CD              ;------------------------------------------------------------
 141+ 00CD              ; extension to AddBCHtoDELsigned
 142+ 00CD              ; takes ix as the address of the values to load into DEL
 143+ 00CD              ;       iy as the address of the values to load into BCH
 144+ 00CD              ; subtracts iy from ix putting result in ix
 145+ 00CD              ; DEL = @IX - @IY 24 bit signed
 146+ 00CD DD 6E 00     SubAtIXtoAtIY24Signed:  ld      l,(ix+0)            ; del = ix (sign hi lo)
 147+ 00D0 DD 5E 01                             ld      e,(ix+1)            ; .
 148+ 00D3 DD 56 02                             ld      d,(ix+2)            ; .
 149+ 00D6 FD 66 00                             ld      h,(iy+0)            ; bch = -iy (sign, hi, lo)
 150+ 00D9 FD 4E 01                             ld      c,(iy+1)            ; .
 151+ 00DC FD 7E 02                             ld      a,(iy+2)            ; .
 152+ 00DF EE 80                                xor     SignOnly8Bit        ; . this is where we flip sign to make add subtract
 153+ 00E1 47                                   ld      b,a                 ; .
 154+ 00E2 FD E5                                push    iy                  ; save iy as add function changes is
 155+ 00E4 CD 14 01                             call    AddBCHtoDELsigned   ; perform del += bch which as we flipped bch sign means (ix [210] -= iy [210])
 156+ 00E7 FD E1                                pop     iy                  ; get iy back
 157+ 00E9 DD 75 00                             ld      (ix+0),l            ; put result into (ix)
 158+ 00EC DD 73 01                             ld      (ix+1),e            ; .
 159+ 00EF DD 72 02                             ld      (ix+2),d            ; .
 160+ 00F2 C9                                   ret
 161+ 00F3              ;------------------------------------------------------------
 162+ 00F3              ; extension to AddBCHtoDELsigned
 163+ 00F3              ; takes ix as the address of the values to load into DEL
 164+ 00F3              ;       iy as the address of the values to load into BCH
 165+ 00F3              ; subtracts iy from ix leaving result in del
 166+ 00F3              SubDELequAtIXMinusAtIY24Signed:
 167+ 00F3 DD 6E 00                             ld      l,(ix+0)            ; del = ix (sign hi lo)
 168+ 00F6 DD 5E 01                             ld      e,(ix+1)            ; .
 169+ 00F9 DD 56 02                             ld      d,(ix+2)            ; .
 170+ 00FC FD 66 00                             ld      h,(iy+0)            ; bch = -iy (sign, hi, lo)
 171+ 00FF FD 4E 01                             ld      c,(iy+1)            ; .
 172+ 0102 FD 7E 02                             ld      a,(iy+2)            ; .
 173+ 0105 EE 80                                xor     SignOnly8Bit        ; . this is where we flip sign to make add subtract
 174+ 0107 47                                   ld      b,a                 ; .
 175+ 0108 FD E5                                push    iy                  ; save iy as add function changes is
 176+ 010A CD 14 01                             call    AddBCHtoDELsigned   ; perform del += bch which as we flipped bch sign means (ix [210] -= iy [210])
 177+ 010D FD E1                                pop     iy                  ; get iy back
 178+ 010F C9                                   ret
 179+ 0110              ;------------------------------------------------------------
 180+ 0110              ;tested mathstestsun2
 181+ 0110              ; DEL = DEL - BCH signed, uses BC, DE, HL, IY, A
 182+ 0110              ; Just flips sign on b then performs add
 183+ 0110 78           SubBCHfromDELsigned:    ld      a,b
 184+ 0111 EE 80                                xor     SignOnly8Bit
 185+ 0113 47                                   ld      b,a
 186+ 0114              ; DEL = DEL + BCH signed, uses BC, DE, HL, IY, A
 187+ 0114 78           AddBCHtoDELsigned:      ld      a,b                 ; Are the values both the same sign?
 188+ 0115 AA                                   xor     d                   ; .
 189+ 0116 E6 80                                and     SignOnly8Bit        ; .
 190+ 0118 20 19                                jr      nz,.SignDifferent   ; .
 191+ 011A 78           .SignSame:              ld      a,b                 ; if they are then we only need 1 signe
 192+ 011B E6 80                                and     SignOnly8Bit        ; so store it in iyh
 193+ 011D FD 67                                ld      iyh,a               ;
 194+ 011F 78                                   ld      a,b                 ; bch = abs bch
 195+ 0120 E6 7F                                and     SignMask8Bit        ; .
 196+ 0122 47                                   ld      b,a                 ; .
 197+ 0123 7A                                   ld      a,d                 ; del = abs del
 198+ 0124 E6 7F                                and     SignMask8Bit        ; .
 199+ 0126 57                                   ld      d,a                 ; .
 200+ 0127 7C                                   ld      a,h                 ; l = h + l
 201+ 0128 85                                   add     l                   ; .
 202+ 0129 6F                                   ld      l,a                 ; .
 203+ 012A 79                                   ld      a,c                 ; e = e + c + carry
 204+ 012B 8B                                   adc     e                   ; .
 205+ 012C 5F                                   ld      e,a                 ; .
 206+ 012D 78                                   ld      a,b                 ; d = b + d + carry (signed)
 207+ 012E 8A                                   adc     d                   ;
 208+ 012F FD B4                                or      iyh                 ; d = or back in sign bit
 209+ 0131 57                                   ld      d,a                 ;
 210+ 0132 C9                                   ret                         ; done
 211+ 0133 78           .SignDifferent:         ld      a,b                 ; bch = abs bch
 212+ 0134 FD 67                                ld      iyh,a               ; iyh = b sign
 213+ 0136 E6 7F                                and     SignMask8Bit        ; .
 214+ 0138 47                                   ld      b,a                 ; .
 215+ 0139 7A                                   ld      a,d                 ; del = abs del
 216+ 013A FD 6F                                ld      iyl,a               ; iyl = d sign
 217+ 013C E6 7F                                and     SignMask8Bit        ; .
 218+ 013E 57                                   ld      d,a                 ; .
 219+ 013F E5                                   push    hl                  ; save hl
 220+ 0140 60 69                                ld      hl,bc               ; hl = bc - de, if bc < de then there is a carry
 221+ 0142 ED 52                                sbc     hl,de               ;
 222+ 0144 E1                                   pop     hl                  ;
 223+ 0145 38 0E                                jr      c,.BCHltDEL
 224+ 0147 20 1C                                jr      nz,.DELltBCH        ; if the result was not zero then DEL > BCH
 225+ 0149 7C           .BCeqDE:                ld      a,h                 ; if the result was zero then check lowest bits
 226+ 014A                                      JumpIfALTNusng l,.BCHltDEL
 226+ 014A BD          >                        cp      l
 226+ 014B DA 55 01    >                        jp		c, .BCHltDEL
 227+ 014E 20 15                                jr      nz,.DELltBCH
 228+ 0150              ; The same so its just zero
 229+ 0150 AF           .BCHeqDEL:              xor     a                  ; its just zero
 230+ 0151 57                                   ld      d,a                ; .
 231+ 0152 5F                                   ld      e,a                ; .
 232+ 0153 6F                                   ld      l,a                ; .
 233+ 0154 C9                                   ret                        ; .
 234+ 0155              ;BCH is less than DEL so its DEL - BCH the sort out sign
 235+ 0155 7D           .BCHltDEL:              ld      a,l                ; l = l - h                      ; ex
 236+ 0156 94                                   sub     h                  ; .                              ;   01D70F DEL
 237+ 0157 6F                                   ld      l,a                ; .                              ;  -000028 BCH
 238+ 0158 7B                                   ld      a,e                ; e = e - c - carry              ;1.
 239+ 0159 99                                   sbc     c                  ; .                              ;
 240+ 015A 5F                                   ld      e,a                ; .                              ;
 241+ 015B 7A                                   ld      a,d                ; d = d - b - carry              ;
 242+ 015C 98                                   sbc     b                  ; .                              ;
 243+ 015D 57                                   ld      d,a                ; .                              ;
 244+ 015E FD 7D                                ld      a,iyl              ; as d was larger, take d sign
 245+ 0160 E6 80                                and     SignOnly8Bit       ;
 246+ 0162 B2                                   or      d                  ;
 247+ 0163 57                                   ld      d,a                ;
 248+ 0164 C9                                   ret
 249+ 0165 7C           .DELltBCH:              ld      a,h                ; l = h - l
 250+ 0166 95                                   sub     l                  ;
 251+ 0167 6F                                   ld      l,a                ;
 252+ 0168 79                                   ld      a,c                ; e = c - e - carry
 253+ 0169 9B                                   sbc     e                  ;
 254+ 016A 5F                                   ld      e,a                ;
 255+ 016B 78                                   ld      a,b                ; d = b - d - carry
 256+ 016C 9A                                   sbc     d                  ;
 257+ 016D 57                                   ld      d,a                ;
 258+ 016E FD 7C                                ld      a,iyh              ; as b was larger, take b sign into d
 259+ 0170 E6 80                                and     SignOnly8Bit       ;
 260+ 0172 B2                                   or      d                  ;
 261+ 0173 57                                   ld      d,a                ;
 262+ 0174 C9                                   ret
 263+ 0175              ;-----------------------------------------------------------------------------------------------------------
 264+ 0175              ; Subtract Functions
 265+ 0175              ;...subtract routines
 266+ 0175              ; we could cheat, flip the sign of DE and just add but its not very optimised
 267+ 0175 7C           subHLDES15:             ld      a,h
 268+ 0176 E6 80                                and     SignOnly8Bit
 269+ 0178 47                                   ld      b,a                         ;save sign bit in b
 270+ 0179 AA                                   xor     d                           ;if h sign and d sign were different then bit 7 of a will be 1 which means
 271+ 017A                                      JumpIfNegative .SUBHLDEOppSGN        ;Signs are opposite therefore we can add
 271+ 017A FA A8 01    >                        jp		m, .SUBHLDEOppSGN
 272+ 017D 78           .SUBHLDESameSigns:      ld      a,b
 273+ 017E B2                                   or      d
 274+ 017F                                      JumpIfNegative .SUBHLDESameNeg       ; optimisation so we can just do simple add if both positive
 274+ 017F FA 89 01    >                        jp		m, .SUBHLDESameNeg
 275+ 0182                                      ClearCarryFlag
 275+ 0182 B7          >                        or a
 276+ 0183 ED 52                                sbc     hl,de
 277+ 0185                                      JumpIfNegative .SUBHLDESameOvrFlw
 277+ 0185 FA 9C 01    >                        jp		m, .SUBHLDESameOvrFlw
 278+ 0188 C9                                   ret
 279+ 0189 7C           .SUBHLDESameNeg:        ld      a,h                         ; so if we enter here then signs are the same so we clear the 16th bit
 280+ 018A E6 7F                                and     SignMask8Bit                ; we could check the value of b for optimisation
 281+ 018C 67                                   ld      h,a
 282+ 018D 7A                                   ld      a,d
 283+ 018E E6 7F                                and     SignMask8Bit
 284+ 0190 57                                   ld      d,a
 285+ 0191                                      ClearCarryFlag
 285+ 0191 B7          >                        or a
 286+ 0192 ED 52                                sbc     hl,de
 287+ 0194                                      JumpIfNegative .SUBHLDESameOvrFlw
 287+ 0194 FA 9C 01    >                        jp		m, .SUBHLDESameOvrFlw
 288+ 0197                                                          DISPLAY "TODO:  don't bother with overflow for now"
 289+ 0197 7C                                   ld      a,h                         ; now set bit for negative value, we won't bother with overflow for now TODO
 290+ 0198 F6 80                                or      SignOnly8Bit
 291+ 019A 67                                   ld      h,a
 292+ 019B C9                                   ret
 293+ 019C              .SUBHLDESameOvrFlw:     NegHL
 293+ 019C AF          >                    xor a
 293+ 019D 95          >                    sub l
 293+ 019E 6F          >                    ld l,a
 293+ 019F 9F          >                    sbc a,a
 293+ 01A0 94          >                    sub h
 293+ 01A1 67          >                    ld h,a
 294+ 01A2 78                                   ld      a,b
 295+ 01A3 EE 80                                xor     SignOnly8Bit                ; flip sign bit
 296+ 01A5 B4                                   or      h
 297+ 01A6 67                                   ld      h,a                         ; recover sign
 298+ 01A7 C9                                   ret
 299+ 01A8 B7           .SUBHLDEOppSGN:         or      a
 300+ 01A9 7C                                   ld      a,h                         ; so if we enter here then signs are the same so we clear the 16th bit
 301+ 01AA E6 7F                                and     SignMask8Bit                ; we could check the value of b for optimisation
 302+ 01AC 67                                   ld      h,a
 303+ 01AD 7A                                   ld      a,d
 304+ 01AE E6 7F                                and     SignMask8Bit
 305+ 01B0 57                                   ld      d,a
 306+ 01B1 19                                   add     hl,de
 307+ 01B2 78                                   ld      a,b                         ; we got here so hl > de therefore we can just take hl's previous sign bit
 308+ 01B3 B4                                   or      h
 309+ 01B4 67                                   ld      h,a                         ; set the previou sign value
 310+ 01B5 C9                                   ret
 311+ 01B6              ;------------------------------------------------------------------------------------------------
 312+ 01B6              ;-- checks to see if a postition is in range of another, e.g. missile hit
 313+ 01B6              ;-- ix = ship position    - pointer to xyz vector as 3 bytes per element
 314+ 01B6              ;-- oy = misisle position - pointer to xyz vector as 3 bytes per element
 315+ 01B6              ;-- sets carry if in blast range, else not carry
 316+ 01B6              ;-- blast range will always be an 8 bit value
 317+ 01B6              CheckInCollisionRange:
 318+ 01B6 CD F3 00     .CheckXDistance:        call    SubDELequAtIXMinusAtIY24Signed ; get distance between x coordinates
 319+ 01B9 7A                                   ld      a,d                 ; check abs distance
 320+ 01BA E6 7F                                and     SignMask8Bit        ; if high bytes are set
 321+ 01BC B3                                   or      e                   ; then no hit
 322+ 01BD C2 FC 01                             jp      nz,.NoCollision     ; if high bytes are set no collision
 323+ 01C0 7D                                   ld      a,l
 324+ 01C1                                      JumpIfAGTEMemusng  CurrentMissileBlastRange ,.NoCollision
 324+ 01C1 21 CC 80    >                        ld      hl,CurrentMissileBlastRange
 324+ 01C4 BE          >                        cp      (hl)
 324+ 01C5 D2 FC 01    >                        jp		nc,.NoCollision
 325+ 01C8 01 03 00     .CheckYDistance:        ld      bc,3                ; move ix and iy
 326+ 01CB DD 09                                add     ix,bc               ; on 3 bytes
 327+ 01CD FD 09                                add     iy,bc               ;
 328+ 01CF CD F3 00                             call    SubDELequAtIXMinusAtIY24Signed ; get distance between x coordinates
 329+ 01D2 7A                                   ld      a,d                 ; check abs distance
 330+ 01D3 E6 7F                                and     SignMask8Bit        ; if high bytes are set
 331+ 01D5 B3                                   or      e                   ; then no hit
 332+ 01D6 C2 FC 01                             jp      nz,.NoCollision     ; if high bytes are set no collision
 333+ 01D9 7D                                   ld      a,l
 334+ 01DA                                      JumpIfAGTEMemusng  CurrentMissileBlastRange ,.NoCollision
 334+ 01DA 21 CC 80    >                        ld      hl,CurrentMissileBlastRange
 334+ 01DD BE          >                        cp      (hl)
 334+ 01DE D2 FC 01    >                        jp		nc,.NoCollision
 335+ 01E1 01 03 00     .CheckZDistance:        ld      bc,3                ; move ix and iy
 336+ 01E4 DD 09                                add     ix,bc               ; on 3 bytes
 337+ 01E6 FD 09                                add     iy,bc               ;
 338+ 01E8 CD F3 00                             call    SubDELequAtIXMinusAtIY24Signed ; get distance between x coordinates
 339+ 01EB 7A                                   ld      a,d                 ; check abs distance
 340+ 01EC E6 7F                                and     SignMask8Bit        ; if high bytes are set
 341+ 01EE B3                                   or      e                   ; then no hit
 342+ 01EF C2 FC 01                             jp      nz,.NoCollision     ; if high bytes are set no collision
 343+ 01F2 7D                                   ld      a,l
 344+ 01F3                                      JumpIfAGTEMemusng  CurrentMissileBlastRange ,.NoCollision
 344+ 01F3 21 CC 80    >                        ld      hl,CurrentMissileBlastRange
 344+ 01F6 BE          >                        cp      (hl)
 344+ 01F7 D2 FC 01    >                        jp		nc,.NoCollision
 345+ 01FA              .CollisionDetected:     SetCarryFlag                ; collision in blast range
 345+ 01FA 37          >                        scf
 346+ 01FB C9                                   ret
 347+ 01FC              .NoCollision:           ClearCarryFlag              ; no collision in blast range
 347+ 01FC B7          >                        or a
 348+ 01FD C9                                   ret
 349+ 01FE
 350+ 01FE              ;------------------------------------------------------------------------------------------------
 351+ 01FE              ; -- Checks if 24 bit value at ix > iy and returns ix pointing to the correct value
 352+ 01FE              ; -- Sets carryflag if a swap occured as part of the Jump If A LessThan check
 353+ 01FE FD 7E 02     CompareAtIXtoIYABS:     ld      a,(iy+2)
 354+ 0201 E6 7F        .CheckSignByte:         and     SignMask8Bit
 355+ 0203 47                                   ld      b,a
 356+ 0204 DD 7E 02                             ld      a,(ix+2)
 357+ 0207 E6 7F                                and     SignMask8Bit
 358+ 0209                                      JumpIfALTNusng b,.SwapIXIY
 358+ 0209 B8          >                        cp      b
 358+ 020A DA 22 02    >                        jp		c, .SwapIXIY
 359+ 020D DD 7E 01     .CheckHighByte:         ld      a,(ix+1)
 360+ 0210 FD BE 01                             cp      (iy+1)
 361+ 0213                                      JumpIfALTNusng b,.SwapIXIY
 361+ 0213 B8          >                        cp      b
 361+ 0214 DA 22 02    >                        jp		c, .SwapIXIY
 362+ 0217 DD 7E 00     .CheckLowByte:          ld      a,(ix+0)
 363+ 021A FD BE 00                             cp      (iy+0)
 364+ 021D                                      JumpIfALTNusng b,.SwapIXIY
 364+ 021D B8          >                        cp      b
 364+ 021E DA 22 02    >                        jp		c, .SwapIXIY
 365+ 0221 C9                                   ret
 366+ 0222 DD E5        .SwapIXIY               push    ix                  ; swap over ix and iy
 367+ 0224 FD E5                                push    iy                  ; this means that ix is always larger of two or ix if they are the same value
 368+ 0226 DD E1                                pop     ix                  ; iy is a smaller of the two values, or untouched in the same value
 369+ 0228 FD E1                                pop     iy                  ; Thsi means we can do a compare and pick which one we preferr after, carry says if swap occured if we need that
 370+ 022A C9                                   ret
 371+ 022B              ;------------------------------------------------------------------------------------------------
 372+ 022B              ; -- Manhattan distance
 373+ 022B              ; -- very quick distance calculation based on a cube
 374+ 022B              ; -- ix = pointer to vector of 3x3, iy = distance to check
 375+ 022B              ; simploy done by ABS (ix)
 376+ 022B              ; returns z if outside box, nz if inside box
 377+ 022B DD 6E 00     ManhattanDistanceIXIY:  ld      l,(ix+0)            ; del = abs ix (sign hi lo)
 378+ 022E DD 5E 01     .checkX:                ld      e,(ix+1)            ; .
 379+ 0231 DD 7E 02                             ld      a,(ix+2)            ; .
 380+ 0234 E6 7F                                and     SignMask8Bit        ;
 381+ 0236 57                                   ld      d,a                 ;
 382+ 0237 FD 66 00                             ld      h,(iy+0)            ; bch = distiance to check
 383+ 023A FD 4E 01                             ld      c,(iy+1)            ; .
 384+ 023D FD 7E 02                             ld      a,(iy+2)            ; .
 385+ 0240 EE 80                                xor     SignOnly8Bit        ; . this is where we flip sign to make add subtract
 386+ 0242 47                                   ld      b,a                 ; .
 387+ 0243 C5 E5                                push    bc,,hl              ; save this for 2nd and 3rd test
 388+ 0245 FD E5                                push    iy                  ; save iy as add function changes is
 389+ 0247 CD 14 01                             call    AddBCHtoDELsigned   ; perform del += bch which as we flipped bch sign means (ix [210] -= iy [210])
 390+ 024A FD E1                                pop     iy                  ; get iy back
 391+ 024C 7A                                   ld      a,d
 392+ 024D E6 80                                and     SignOnly8Bit
 393+ 024F CA 88 02                             jp      z,.ClearUp          ; so if its positive then outside boundary
 394+ 0252 E1 C1        .checkY:                pop     bc,,hl
 395+ 0254 C5 E5                                push    bc,,hl
 396+ 0256 DD 6E 03                             ld      l,(ix+3)            ; del = abs ix (sign hi lo)
 397+ 0259 DD 5E 04                             ld      e,(ix+4)            ; .
 398+ 025C DD 7E 05                             ld      a,(ix+5)            ; .
 399+ 025F E6 7F                                and     SignMask8Bit        ;
 400+ 0261 57                                   ld      d,a                 ;
 401+ 0262 FD E5                                push    iy                  ; save iy as add function changes is
 402+ 0264 CD 14 01                             call    AddBCHtoDELsigned   ; perform del += bch which as we flipped bch sign means (ix [210] -= iy [210])
 403+ 0267 FD E1                                pop     iy                  ; get iy back
 404+ 0269 7A                                   ld      a,d
 405+ 026A E6 80                                and     SignOnly8Bit
 406+ 026C CA 88 02                             jp      z,.ClearUp          ; so if its positive then outside boundary
 407+ 026F E1 C1        .checkZ:                pop     bc,,hl
 408+ 0271 DD 6E 06                             ld      l,(ix+6)            ; del = abs ix (sign hi lo)
 409+ 0274 DD 5E 07                             ld      e,(ix+7)            ; .
 410+ 0277 DD 7E 08                             ld      a,(ix+8)            ; .
 411+ 027A E6 7F                                and     SignMask8Bit        ;
 412+ 027C 57                                   ld      d,a                 ;
 413+ 027D FD E5                                push    iy                  ; save iy as add function changes is
 414+ 027F CD 14 01                             call    AddBCHtoDELsigned   ; perform del += bch which as we flipped bch sign means (ix [210] -= iy [210])
 415+ 0282 FD E1                                pop     iy                  ; get iy back
 416+ 0284 7A                                   ld      a,d
 417+ 0285 E6 80                                and     SignOnly8Bit
 418+ 0287 C9                                   ret
 419+ 0288 E1 C1        .ClearUp:               pop     bc,,hl
 420+ 028A C9                                   ret
 421+ 028B
 422+ 028B
 423+ 028B              ;------------------------------------------------------------
 424+ 028B              ; Note vectors are 2 byte lead sign, angle is 8 bit lead sign
 425+ 028B              ApplyMyAngleAToIXIY:    ;break
 426+ 028B F5                                   push    af                          ; save angle
 427+ 028C              ; Calculate Angle * vector /256, i.e take angle and mutiple by high byte of vector
 428+ 028C 5F           .processVector1:        ld      e,a                         ; e = angle
 429+ 028D DD 56 01                             ld      d,(ix+1)                    ; d = vector 1 / 256
 430+ 0290 CD BA 91                             call    mulDbyESigned               ; calcualte DE = Vector * angle /256
 431+ 0293 FD 6E 00 FD                          ld      hl,(iy+0)                   ; hl = vector 2
 431+ 0297 66 01
 432+ 0299 CD 00 00                             call    SubDEfromHLSigned           ; hl = vector 2 - (vector 1 * angle / 256)
 433+ 029C FD 75 00 FD                          ld      (iy+0),hl                   ; .
 433+ 02A0 74 01
 434+ 02A2 F1           .processVector2:        pop     af
 435+ 02A3 5F                                   ld      e,a                         ; e = angle
 436+ 02A4 FD 56 01                             ld      d,(iy+1)                    ; d = vector 2 / 256
 437+ 02A7 CD BA 91                             call    mulDbyESigned               ; de = vector 2 * angle /256
 438+ 02AA DD 6E 00 DD                          ld      hl,(ix+0)                   ; hl = vector 1
 438+ 02AE 66 01
 439+ 02B0 CD 04 00                             call    AddDEtoHLSigned             ; hl = hl + de
 440+ 02B3 DD 75 00 DD                          ld      (ix+0),hl                   ; .
 440+ 02B7 74 01
 441+ 02B9 C9                                   ret
 442+ 02BA              ;------------------------------------------------------------
 443+ 02BA              ; Applies Roll Alpha and Pitch Beta to vector at IX
 444+ 02BA              ApplyRollAndPitchToIX:
 445+ 02BA              ;-- y Vector = y - alpha * nosev_x_hi
 446+ 02BA DD 5E 01                             ld      e,(ix+1)                    ; e = X component hi
 447+ 02BD 3A CF 7E                             ld      a,(ALPHA)                   ; alpha S7
 448+ 02C0 57                                   ld      d,a
 449+ 02C1 CD BA 91                             call    mulDbyESigned               ; d = X Vector * alpha / 256
 450+ 02C4 DD 6E 02                             ld      l,(ix+2)                    ; hl = Y Vector component
 451+ 02C7 DD 66 03                             ld      h,(ix+3)                    ;
 452+ 02CA CD 00 00                             call    SubDEfromHLSigned           ; hl = Y - (alpha * nosev x hi)
 453+ 02CD DD 75 02                             ld      (ix+2),l                    ; dont round Y up yet
 454+ 02D0 DD 74 03                             ld      (ix+3),h
 455+ 02D3              ;-- x Vector = x Vector + alpha * y_hi
 456+ 02D3 DD 5E 03                             ld      e,(ix+3)                    ; e = y component hi
 457+ 02D6 3A CF 7E                             ld      a,(ALPHA)                   ; alpha S7
 458+ 02D9 57                                   ld      d,a
 459+ 02DA CD BA 91                             call    mulDbyESigned               ; d = y Vector * alpha / 256
 460+ 02DD DD 6E 00                             ld      l,(ix+0)                    ; hl = x Vector component
 461+ 02E0 DD 66 01                             ld      h,(ix+1)                    ;
 462+ 02E3 CD 04 00                             call    AddDEtoHLSigned             ; hl = x + (alpha * nosev x hi)
 463+ 02E6                                  IFDEF ROUND_ROLL_AND_PITCH
 464+ 02E6 ~                                    ld      l,0                         ; round up x
 465+ 02E6                                  ENDIF
 466+ 02E6 DD 75 00                             ld      (ix+0),l
 467+ 02E9 DD 74 01                             ld      (ix+1),h
 468+ 02EC              ;-- nosev_y = nosev_y - beta * nosev_z_hi
 469+ 02EC DD 5E 05                             ld      e,(ix+5)                    ; e = z component hi
 470+ 02EF 3A C2 7E                             ld      a,(BETA)                    ; beta S7
 471+ 02F2 57                                   ld      d,a
 472+ 02F3 CD BA 91                             call    mulDbyESigned               ; d = Z Vector * beta / 256
 473+ 02F6 DD 6E 02                             ld      l,(ix+2)                    ; hl = y Vector component
 474+ 02F9 DD 66 03                             ld      h,(ix+3)                    ;
 475+ 02FC CD 00 00                             call    SubDEfromHLSigned           ; hl = Y - (beta * nosev z hi)
 476+ 02FF                                  IFDEF ROUND_ROLL_AND_PITCH
 477+ 02FF ~                                    ld      l,0                         ; round up Y
 478+ 02FF                                  ENDIF
 479+ 02FF DD 75 02                             ld      (ix+2),l
 480+ 0302 DD 74 03                             ld      (ix+3),h
 481+ 0305              ;-- nosev_z = nosev_z + beta * nosev_y_hi
 482+ 0305 DD 5E 03                             ld      e,(ix+3)                    ; e = y component hi
 483+ 0308 3A C2 7E                             ld      a,(BETA)                    ; beta S7
 484+ 030B 57                                   ld      d,a
 485+ 030C CD BA 91                             call    mulDbyESigned               ; d = y Vector * beta / 256
 486+ 030F DD 6E 04                             ld      l,(ix+4)                    ; hl = z Vector component
 487+ 0312 DD 66 05                             ld      h,(ix+5)                    ;
 488+ 0315 CD 04 00                             call    AddDEtoHLSigned             ; hl = z + (beta * nosev z hi)
 489+ 0318                                  IFDEF ROUND_ROLL_AND_PITCH
 490+ 0318 ~                                    ld      l,0                         ; round up zwd
 491+ 0318                                  ENDIF
 492+ 0318 DD 75 04                             ld      (ix+4),l
 493+ 031B DD 74 05                             ld      (ix+5),h
 494+ 031E C9                                   ret
 495+ 031F              ;------------------------------------------------------------
 496+ 031F              ; Calculates the following:
 497+ 031F              ; loads UBnKTargetVector from UBnkPostion to IY as IY - position
 498+ 031F DD 21 20 C0  VectorUnivtoIY:     ld      ix,UBnKxlo                      ; target x = iy [x] - Univ XPos
 499+ 0323 CD F3 00                         call    SubDELequAtIXMinusAtIY24Signed  ; .
 500+ 0326 7D                               ld      a,l                             ; .
 501+ 0327 32 47 C0                         ld      (UBnKTargetXPos),a              ; .
 502+ 032A ED 53 48 C0                      ld      (UBnKTargetXPos+1),de           ; .
 503+ 032E DD 21 23 C0                      ld      ix,UBnKylo                      ; move to y component
 504+ 0332 01 03 00                         ld      bc,3                            ; .
 505+ 0335 FD 09                            add     iy,bc                           ; .
 506+ 0337 CD F3 00                         call    SubDELequAtIXMinusAtIY24Signed  ; target y = iy [y] - Univ YPos
 507+ 033A 7D                               ld      a,l                             ; .
 508+ 033B 32 4A C0                         ld      (UBnKTargetYPos),a              ; .
 509+ 033E ED 53 4B C0                      ld      (UBnKTargetYPos+1),de           ; .
 510+ 0342 DD 21 26 C0                      ld      ix,UBnKzlo                      ; move to y component
 511+ 0346 01 03 00                         ld      bc,3                            ; move to z component
 512+ 0349 FD 09                            add     iy,bc                           ; .
 513+ 034B CD F3 00                         call    SubDELequAtIXMinusAtIY24Signed  ; target z = iy [z] - Univ ZPos
 514+ 034E 7D                               ld      a,l                             ; .
 515+ 034F 32 4D C0                         ld      (UBnKTargetZPos),a              ; .
 516+ 0352 ED 53 4E C0                      ld      (UBnKTargetZPos+1),de           ; .
 517+ 0356 C9                               ret
 518+ 0357              ;------------------------------------------------------------
 519+ 0357              ; Takes the UBnKTarget position and works out if its ready for a docking routine or jump
 520+ 0357              ; returns carry flag if move to docking else leaves carry unset
 521+ 0357              UnivDistanceToTarget:DISPLAY "TODO : WRITE CODE FOR UnivDistanceToTarget"
 522+ 0357                                  ClearCarryFlag                              ; for now clear carry flag so its not at target
 522+ 0357 B7          >                        or a
 523+ 0358 C9                               ret
 524+ 0359              ;------------------------------------------------------------
 525+ 0359              ; Takes the UBnKTarget position and works out if its ready for a docking routine or jump
 526+ 0359
 527+ 0359
 528+ 0359                      IFNDEF  DEBUG_NO_TACTICS_CODE
 529+ 0359
 530+ 0359 00 00        TacticsVarResult        DW 0
 531+ 035B 21 30 C0     TacticsDotRoofv:        ld      hl,UBnkrotmatRoofvX
 532+ 035E C3 6A 03                             jp      TacticsDotHL
 533+ 0361
 534+ 0361 21 2A C0     TacticsDotSidev:        ld      hl,UBnkrotmatSidevX
 535+ 0364 C3 6A 03                             jp      TacticsDotHL
 536+ 0367
 537+ 0367 CD C3 03     TacticsDotNosev:        call    CopyRotNoseToUBnKTacticsMat
 538+ 036A 21 5F C0     TacticsDotHL:           ld      hl,UBnKTacticsRotMatX; UBnkTransmatNosevX    ; ROTMATX HI
 539+ 036D 7E           .CalcXValue:            ld      a,(hl)                              ; DE = RotMatX & Vect X
 540+ 036E 5F                                   ld      e,a                                 ; .
 541+ 036F 3A 53 C0                             ld      a,(UBnKTargetVectorX)                  ; .
 542+ 0372 57                                   ld      d,a                                 ; .
 543+ 0373 ED 30                                mul                                         ; .
 544+ 0375 7A                                   ld      a,d                                 ; S = A = Hi (RotMatX & Vect X)
 545+ 0376 32 B8 7F                             ld      (varS),a                            ; .
 546+ 0379 23                                   inc     hl                                  ; move to sign byte
 547+ 037A 3A 55 C0     .CalcXSign:             ld      a,(UBnKTargetVectorX+2)                ; B  = A = Sign VecX xor sign RotMatX
 548+ 037D AE                                   xor     (hl)                                ; .
 549+ 037E 47                                   ld      b,a                                 ; .
 550+ 037F 23           .MoveToY:               inc     hl                                  ; Move on to Y component
 551+ 0380 7E           .CalcYValue:            ld      a,(hl)                              ; D = 0, E = Hi (RotMatY & Vect Y)
 552+ 0381 5F                                   ld      e,a                                 ; .
 553+ 0382 3A 55 C0                             ld      a,(UBnKTargetVectorY)                  ; .
 554+ 0385 57                                   ld      d,a                                 ; .
 555+ 0386 ED 30                                mul     de                                  ; .
 556+ 0388 5A                                   ld      e,d                                 ; .
 557+ 0389 16 00                                ld      d,0                                 ; .
 558+ 038B 23                                   inc     hl                                  ; move to sign byte
 559+ 038C 3A 57 C0     .CalcYSign:             ld      a,(UBnKTargetVectorY+2)                ; c = sign of y_sign * sidev_y
 560+ 038F AE                                   xor     (hl)                                ;
 561+ 0390 4F                                   ld      c,a                                 ;
 562+ 0391 23           .MoveToZ:               inc     hl                                  ; Move on to Z component
 563+ 0392 E5           .AddXandY:              push    hl                                  ; but save HL as we need that
 564+ 0393 3A B8 7F                             ld      a,(varS)                            ; hl = Hi (RotMatX & Vect X) b= sign
 565+ 0396 26 00                                ld      h,0                                 ; de = Hi (RotMatY & Vect Y) c= sign
 566+ 0398 6F                                   ld      l,a                                 ;
 567+ 0399 CD 33 00                             call    ADDHLDESignBC                       ; a(sign) hl = sum
 568+ 039C 47                                   ld      b,a                                 ; b = sign of result
 569+ 039D 22 59 03                             ld      (TacticsVarResult),hl               ; save sub in TacticsVarResult
 570+ 03A0 E1           .CalcZValue:            pop     hl                                  ; get back to the rotation mat z
 571+ 03A1 7E                                   ld      a,(hl)                              ; D = 0, E = Hi (RotMatZ & Vect Z)
 572+ 03A2 5F                                   ld      e,a                                 ; .
 573+ 03A3 3A 57 C0                             ld      a,(UBnKTargetVectorZ)                  ; .
 574+ 03A6 57                                   ld      d,a                                 ; .
 575+ 03A7 ED 30                                mul     de                                  ; .
 576+ 03A9 5A                                   ld      e,d                                 ; .
 577+ 03AA 16 00                                ld      d,0                                 ; .
 578+ 03AC 23                                   inc     hl                                  ; move to sign byte
 579+ 03AD 3A 59 C0     .CalcZSign:             ld      a,(UBnKTargetVectorZ+2)
 580+ 03B0 AE                                   xor     (hl)
 581+ 03B1 4F                                   ld      c,a                                 ; Set C to the sign of z_sign * sidev_z
 582+ 03B2 2A 59 03                             ld      hl, (TacticsVarResult)              ; CHL = x + y, BDE = z products
 583+ 03B5 CD 33 00                             call    ADDHLDESignBC                       ; so AHL = X y z products
 584+ 03B8 32 B8 7F                             ld      (varS),a                            ; for backwards compatibility
 585+ 03BB 7D                                   ld      a,l                                  ; .
 586+ 03BC C9                                   ret
 587+ 03BD
 588+ 03BD 21 2B C0     CopyRotSideToUBnKTacticsMat:ld      hl,UBnkrotmatSidevX+1
 589+ 03C0 C3 0E A9                             jp      CopyRotmatToTacticsMat
 590+ 03C3
 591+ 03C3 21 37 C0     CopyRotNoseToUBnKTacticsMat:ld      hl,UBnkrotmatNosevX+1
 592+ 03C6 C3 0E A9                             jp      CopyRotmatToTacticsMat
 593+ 03C9
 594+ 03C9 21 31 C0     CopyRotRoofToBnKTacticsMat:ld      hl,UBnkrotmatRoofvX+1
 595+ 03CC              ; Coy rotation matrix high byte to trans rot mat, strip off sign and separate to rotmat byte 2
 596+ 03CC 11 5F C0     CopyRotmatToUBnKTacticsMat: ld      de,UBnKTacticsRotMatX
 597+ 03CF 7E                                   ld      a,(hl)              ; matrix high byte of x
 598+ 03D0 47                                   ld      b,a
 599+ 03D1 E6 7F                                and     SignMask8Bit
 600+ 03D3 12                                   ld      (de),a              ; set rot mat value
 601+ 03D4 13                                   inc     de
 602+ 03D5 78                                   ld      a,b
 603+ 03D6 E6 80                                and     SignOnly8Bit
 604+ 03D8 12                                   ld      (de),a              ; set rot mat sign
 605+ 03D9 13                                   inc     de                  ; move to next rot mat element
 606+ 03DA 23                                   inc     hl
 607+ 03DB 23                                   inc     hl                  ; matrix high byte of y
 608+ 03DC 7E           .processYElement:       ld      a,(hl)              ; matrix high byte of y
 609+ 03DD 47                                   ld      b,a
 610+ 03DE E6 7F                                and     SignMask8Bit
 611+ 03E0 12                                   ld      (de),a              ; set rot mat value
 612+ 03E1 13                                   inc     de
 613+ 03E2 78                                   ld      a,b
 614+ 03E3 E6 80                                and     SignOnly8Bit
 615+ 03E5 12                                   ld      (de),a              ; set rot mat sign
 616+ 03E6 13                                   inc     de                  ; move to next rot mat element
 617+ 03E7 23                                   inc     hl
 618+ 03E8 23                                   inc     hl                  ; matrix high byte of z
 619+ 03E9 7E           .ProcessZElement:       ld      a,(hl)              ; matrix high byte of z
 620+ 03EA 47                                   ld      b,a
 621+ 03EB E6 7F                                and     SignMask8Bit
 622+ 03ED 12                                   ld      (de),a              ; set rot mat value
 623+ 03EE 13                                   inc     de
 624+ 03EF 78                                   ld      a,b
 625+ 03F0 E6 80                                and     SignOnly8Bit
 626+ 03F2 12                                   ld      (de),a              ; set rot mat sign
 627+ 03F3 C9                                   ret
 628+ 03F4                      ENDIF
 629+ 03F4
 630+ 03F4
 631+ 03F4
# file closed: ./Maths/MathsBankedFns.asm
1155  03F4                                  DISPLAY "Bank ",BankMathsBankedFns," - Bytes free ",/D, $2000 - ($-MathsBankedFnsAddr), " - BankMathsBankedFns"
1156  03F4                                  ASSERT $-MathsBankedFnsAddr <8912, Bank code leaks over 8K boundary
1157  03F4
1158  03F4                  SAVENEX OPEN "EliteN.nex", EliteNextStartup , TopOfStack
1159  03F4                  SAVENEX CFG  0,0,0,1
1160  03F4                  SAVENEX AUTO
1161  03F4                  SAVENEX CLOSE
1162  03F4                  DISPLAY "Main Non Banked Code End ", MainNonBankedCodeEnd , " Bytes free ", 0B000H - MainNonBankedCodeEnd
1163  03F4                  ASSERT MainNonBankedCodeEnd < 0B000H, Program code leaks intot interrup vector table
1164  03F4
# file closed: eliteNext.asm
