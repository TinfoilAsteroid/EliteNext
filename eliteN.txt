# file opened: eliteNext.asm
   1  0000               DEVICE ZXSPECTRUMNEXT
   2  0000               DEFINE  DOUBLEBUFFER 1
   3  0000               DEFINE  LOGMATHS     1
   4  0000               CSPECTMAP eliteN.map
   5  0000               OPT --zxnext=cspect --syntax=a --reversepop
   6  0000
   7  0000              DEBUGSEGSIZE   equ 1
   8  0000              DEBUGLOGSUMMARY equ 1
   9  0000              ;DEBUGLOGDETAIL equ 1
  10  0000
  11  0000              ;----------------------------------------------------------------------------------------------------------------------------------
  12  0000              ; Game Defines
  13  0000              ScreenLocal      EQU 0
  14  0000              ScreenGalactic   EQU ScreenLocal + 1
  15  0000              ScreenMarket     EQU ScreenGalactic + 1
  16  0000              ScreenMarketDsp  EQU ScreenMarket + 1
  17  0000              ScreenStatus     EQU ScreenMarketDsp + 1
  18  0000              ScreenInvent     EQU ScreenStatus + 1
  19  0000              ScreenPlanet     EQU ScreenInvent + 1
  20  0000              ScreenEquip      EQU ScreenPlanet + 1
  21  0000              ScreenLaunch     EQU ScreenEquip + 1
  22  0000              ScreenFront      EQU ScreenLaunch + 1
  23  0000              ScreenAft        EQU ScreenFront+1
  24  0000              ScreenLeft       EQU ScreenAft+1
  25  0000              ScreenRight      EQU ScreenLeft+1
  26  0000              ScreenDocking    EQU ScreenRight+1
  27  0000              ScreenHyperspace EQU ScreenDocking+1
  28  0000              ;----------------------------------------------------------------------------------------------------------------------------------
  29  0000              ; Colour Defines
  30  0000                  INCLUDE "./Hardware/L2ColourDefines.asm"
# file opened: ./Hardware/L2ColourDefines.asm
   1+ 0000              L2ColourBLACK           EQU   0
   2+ 0000              L2ColourRED_1           EQU 224                 ; RGB 255,  0,  0
   3+ 0000              L2ColourRED_2           EQU 192                 ; RGB 218,  0,  0
   4+ 0000              L2ColourRED_3           EQU 160                 ; RGB 182,  0,  0
   5+ 0000              L2ColourRED_4           EQU 128                 ; RGB 145,  0,  0
   6+ 0000              L2ColourRED_5           EQU  96                 ; RGB 109,  0,  0
   7+ 0000              L2ColourRED_6           EQU  64                 ; RGB  72,  0,  0
   8+ 0000              L2ColourRED_7           EQU  32                 ; RGB  36,  0,  0
   9+ 0000              L2ColourYELLOW_1        EQU 252                 ; RGB 255,255,  0
  10+ 0000              L2ColourYELLOW_2        EQU 216                 ; RGB 218,218,  0
  11+ 0000              L2ColourYELLOW_3        EQU 180                 ; RGB 182,182,  0
  12+ 0000              L2ColourYELLOW_4        EQU 144                 ; RGB 145,145,  0
  13+ 0000              L2ColourYELLOW_5        EQU 108                 ; RGB 109.109,  0
  14+ 0000              L2ColourYELLOW_6        EQU  72                 ; RGB  72, 72,  0
  15+ 0000              L2ColourYELLOW_7        EQU  36                 ; RGB  36, 36,  0
  16+ 0000              L2ColourGREEN_1		    EQU  28                 ; RGB   0,255,  0
  17+ 0000              L2ColourGREEN_2		    EQU  24                 ; RGB   0,218,  0
  18+ 0000              L2ColourGREEN_3		    EQU  16                 ; RGB   0,145,  0
  19+ 0000              L2ColourGREEN_4         EQU  12                 ; RGB   0,109,  0
  20+ 0000              L2ColourGREEN_5         EQU   8                 ; RGB   0, 72,  0
  21+ 0000              L2ColourGREEN_6         EQU   4                 ; RGB   0, 36,  0
  22+ 0000              L2ColourBLUE_1          EQU   3                 ; RGB 0,0,255
  23+ 0000              L2ColourBLUE_2          EQU   2                 ; RGB 0,0,170
  24+ 0000              L2ColourBLUE_3          EQU   1                 ; RGB 0,0,85
  25+ 0000
  26+ 0000
  27+ 0000              L2ColourWHITE_1         EQU 255                 ; RGB 255,255,255
  28+ 0000              L2ColourWHITE_2         EQU 146
  29+ 0000              L2ColourGREY_1		    EQU L2ColourWHITE_2
  30+ 0000              L2ColourGREY_2		    EQU 109
  31+ 0000              L2ColourGREY_3		    EQU  73
  32+ 0000              L2ColourGREY_4		    EQU  37
  33+ 0000
  34+ 0000              L2ColourGREEN_MB        EQU  29                 ;RGB 0,255,85
  35+ 0000              L2ColourGREEN_MR        EQU 124                 ;RGB 109.255,0
  36+ 0000              L2ColourCREAM_1         EQU 218                 ; RGB 218,218,170
  37+ 0000              L2ColourCREAM_2         EQU 182                 ; RGB 182,182,170
  38+ 0000              L2ColourCREAM_3         EQU 146                 ; RGB 145,145,170
  39+ 0000
  40+ 0000              L2ColourTRANSPARENT     EQU 227                 ; RGB 255,  0,255
  41+ 0000              L2ColourMAGENTA_1       EQU 162                 ; RGB 182,  0,170
  42+ 0000              L2ColourMAGENTA_2       EQU 130                 ; RGB 145,  0,170
  43+ 0000              L2ColourMAGENTA_3       EQU  97                 ; RGB 109,  0, 85
  44+ 0000              L2ColourMAGENTA_4       EQU  65                 ; RGB  72,  0, 85
  45+ 0000              L2ColourORANGE_1        EQU 236                 ; RGB
  46+ 0000              L2ColourORANGE_2        EQU 168                 ; RGB
  47+ 0000              L2ColourORANGE_3        EQU  68                 ; RGB
  48+ 0000              L2ColourCYAN_1          EQU  31                 ; RGB   0,255, 255
  49+ 0000              L2ColourCYAN_2          EQU  18                 ; RGB
  50+ 0000              L2ColourCYAN_3          EQU   9                 ; RGB
  51+ 0000              L2ColourPURPLE_1        EQU 109                 ; RGB
  52+ 0000              L2ColourPURPLE_2        EQU  66                 ; RGB
  53+ 0000              L2ColourPURPLE_3        EQU  33                 ; RGB
  54+ 0000              L2ColourPINK_1		    EQU 231                 ; RGB
  55+ 0000              L2ColourPINK_2		    EQU 226                 ; RGB
  56+ 0000              L2ColourPINK_3		    EQU 225                 ; RGB
  57+ 0000              L2ColourPINK_4		    EQU 224                 ; RGB
  58+ 0000
# file closed: ./Hardware/L2ColourDefines.asm
  31  0000                  INCLUDE "./Hardware/L1ColourDefines.asm"
# file opened: ./Hardware/L1ColourDefines.asm
   1+ 0000
   2+ 0000              L1ColourInkBlack        EQU %00000000
   3+ 0000              L1ColourInkBlue         EQU %00000001
   4+ 0000              L1ColourInkRed          EQU %00000010
   5+ 0000              L1ColourInkMagenta      EQU %00000011
   6+ 0000              L1ColourInkGreen        EQU %00000100
   7+ 0000              L1ColourInkCyan         EQU %00000101
   8+ 0000              L1ColourInkYellow       EQU %00000110
   9+ 0000              L1ColourInkWhite        EQU %00000111
  10+ 0000              L1ColourPaperBlack      EQU %00000000
  11+ 0000              L1ColourPaperBlue       EQU %00001000
  12+ 0000              L1ColourPaperRed        EQU %00010000
  13+ 0000              L1ColourPaperMagenta    EQU %00011000
  14+ 0000              L1ColourPaperGreen      EQU %00100000
  15+ 0000              L1ColourPaperCyan       EQU %00101000
  16+ 0000              L1ColourPaperYellow     EQU %00110000
  17+ 0000              L1ColourPaperWhite      EQU %00111000
  18+ 0000              L1ColourFlash           EQU %10000000
  19+ 0000              L1ColourBright          EQU %01000000
  20+ 0000              ;----------------------------------------------------------------------------------------------------------------------------------
  21+ 0000              ; Screen Specific Colour Defines
  22+ 0000              L1InvHighlight          EQU L1ColourBright | L1ColourPaperRed   | L1ColourInkYellow
  23+ 0000              L1InvLowlight           EQU                  L1ColourPaperBlack | L1ColourInkWhite
# file closed: ./Hardware/L1ColourDefines.asm
  32  0000              ;----------------------------------------------------------------------------------------------------------------------------------
  33  0000              ; Total screen list
  34  0000              ; Local Chart
  35  0000              ; Galactic Chart
  36  0000              ; Market Prices
  37  0000              ; Inventory
  38  0000              ; Comander status
  39  0000              ; System Data
  40  0000              ; Mission Briefing
  41  0000              ; missio completion
  42  0000              ; Docked  Menu (only place otehr than pause you can load and save)
  43  0000              ; Pause Menu (only place you can load from )
  44  0000              ; byint and selling equipment
  45  0000              ; bying and selling stock
  46  0000
  47  0000                                      INCLUDE "./Hardware/register_defines.asm"
# file opened: ./Hardware/register_defines.asm
   1+ 0000              IO_LAYER2_PORT                          EQU $123B
   2+ 0000              IO_EXT_BANK_PORT 			            EQU $DFFD ; 57341
   3+ 0000              IO_BANK_PORT                            EQU $7FFD ; 32765
   4+ 0000              REGISTER_NUMBER_PORT					EQU $243B
   5+ 0000              REGISTER_VALUE_PORT						EQU $253B
   6+ 0000              SPRITE_SLOT_PORT						EQU $303B
   7+ 0000              SPRITE_INFO_PORT                        EQU $0057
   8+ 0000              SPRITE_PATTERN_UPLOAD_PORT				EQU $005B
   9+ 0000
  10+ 0000              MACHINE_ID_REGISTER						EQU 0
  11+ 0000              VERSION_REGISTER						EQU 1
  12+ 0000              RESET_REGISTER		    				EQU 2
  13+ 0000              MACHINE_TYPE_REGISTER					EQU 3
  14+ 0000              PAGE_RAM_REGISTER						EQU 4
  15+ 0000              PERIPHERAL_1_REGISTER					EQU 5
  16+ 0000              PERIPHERAL_2_REGISTER					EQU 6
  17+ 0000              TURBO_MODE_REGISTER						EQU 7
  18+ 0000              PERIPHERAL_3_REGISTER					EQU 8
  19+ 0000              ANTI_BRICK_SYSTEM_REGISTER				EQU 10
  20+ 0000              LAYER2_RAM_PAGE_REGISTER				EQU 18
  21+ 0000              LAYER2_RAM_SHADOW_REGISTER      		EQU 19
  22+ 0000              TRANSPARENCY_COLOUR_REGISTER			EQU 20
  23+ 0000              SPRITE_LAYERS_SYSTEM_REGISTER			EQU 21
  24+ 0000              LAYER2_OFFSET_X_REGISTER				EQU 22
  25+ 0000              LAYER2_OFFSET_Y_REGISTER				EQU 23
  26+ 0000              CLIP_WINDOW_LAYER2_REGISTER				EQU 24
  27+ 0000              CLIP_WINDOW_SPRITES_REGISTER			EQU 25
  28+ 0000              CLIP_WINDOW_ULA_REGISTER				EQU 26
  29+ 0000              CLIP_WINDOW_CONTROL_REGISTER			EQU 28
  30+ 0000              ACTIVE_VIDEO_LINE_MSB_REGISTER			EQU 30
  31+ 0000              ACTIVE_VIDEO_LINE_LSB_REGISTER			EQU 31
  32+ 0000              LINE_INTERRUPT_CONTROL_REGISTER			EQU 34
  33+ 0000              LINE_INTERRUPT_VALUE_LSB_REGISTER		EQU 35
  34+ 0000              KEYMAP_HIGH_ADDRESS_REGISTER			EQU 40
  35+ 0000              KEYMAP_LOW_ADDRESS_REGISTER				EQU 41
  36+ 0000              KEYMAP_HIGH_DATA_REGISTER				EQU 42
  37+ 0000              KEYMAP_LOW_DATA_REGISTER				EQU 43
  38+ 0000              DAC_B_MIRROR_REGISTER                   EQU 44
  39+ 0000              DAC_AB_MIRROR_REGISTER                  EQU 45
  40+ 0000              DAC_C_MORROR_REGISTER                   EQU 46
  41+ 0000              TILEMAP_OFFSET_XMSB_REGISTER            EQU 47
  42+ 0000              TILEMAP_OFFSET_XLSB_REGISTER            EQU 48
  43+ 0000              TILEMAP_OFFSET_YMSB_REGISTER            EQU 49
  44+ 0000              LORES_OFFSET_X_REGISTER					EQU 50
  45+ 0000              LORES_OFFSET_Y_REGISTER					EQU 51
  46+ 0000              SPRITE_PORT_INDEX_REGISTER              EQU 52
  47+ 0000              SPRITE_PORT_ATTR0_REGISTER              EQU 53
  48+ 0000              SPRITE_PORT_ATTR1_REGISTER              EQU 54
  49+ 0000              SPRITE_PORT_ATTR2_REGISTER              EQU 55
  50+ 0000              SPRITE_PORT_ATTR3_REGISTER              EQU 56
  51+ 0000              SPRITE_PORT_ATTR4_REGISTER              EQU 57
  52+ 0000              PALETTE_INDEX_REGISTER					EQU 64
  53+ 0000              PALETTE_VALUE_8BIT_REGISTER				EQU 65
  54+ 0000              PALETTE_FORMAT_REGISTER					EQU 66
  55+ 0000              PALETTE_CONTROL_REGISTER				EQU 67
  56+ 0000              PALETTE_VALUE_9BIT_REGISTER				EQU 68
  57+ 0000              MMU_SLOT_0_REGISTER						EQU 80
  58+ 0000              MMU_SLOT_1_REGISTER						EQU 81
  59+ 0000              MMU_SLOT_2_REGISTER						EQU 82
  60+ 0000              MMU_SLOT_3_REGISTER						EQU 83
  61+ 0000              MMU_SLOT_4_REGISTER						EQU 84
  62+ 0000              MMU_SLOT_5_REGISTER						EQU 85
  63+ 0000              MMU_SLOT_6_REGISTER						EQU 86
  64+ 0000              MMU_SLOT_7_REGISTER						EQU 87
  65+ 0000              COPPER_DATA_REGISTER					EQU 96
  66+ 0000              COPPER_CONTROL_LOW_REGISTER				EQU 97
  67+ 0000              COPPER_CONTROL_HIGH_REGISTER			EQU 98
  68+ 0000              DISPLAY_CONTROL_1_REGISTER              EQU 105
  69+ 0000              LAYER_2_CONTROL_REGISTER                EQU 112
  70+ 0000              LAYER_2_X_OFFSET_MSB_REGISTER           EQU 113
  71+ 0000              DEBUG_LEDS_REGISTER						EQU 255
  72+ 0000
  73+ 0000
  74+ 0000              GetNextReg:	MACRO register
  75+ 0000 ~                        push bc
  76+ 0000 ~                            ld bc,$243B
  77+ 0000 ~                                ld a,register
  78+ 0000 ~                                out (c),a
  79+ 0000 ~                                inc b
  80+ 0000 ~                            in a,(c)
  81+ 0000 ~                        pop bc
  82+ 0000                          ENDM
  83+ 0000
# file closed: ./Hardware/register_defines.asm
  48  0000                                      INCLUDE "./Layer2Graphics/layer2_defines.asm"
# file opened: ./Layer2Graphics/layer2_defines.asm
   1+ 0000
   2+ 0000
   3+ 0000              LAYER2_SHIFTED_SCREEN_TOP  	 equ 0
   4+ 0000              LAYER2_SHIFTED_SCREEN_MIDDLE equ $40
   5+ 0000              LAYER2_SHIFTED_SCREEN_BOTTOM equ $80
   6+ 0000
   7+ 0000              ; note hi byte is not decoded on DMA port so can out OUTIR
   8+ 0000              IO_DATAGEAR_DMA_PORT 		 equ 107
   9+ 0000              IO_SPRITE_SLOT_PORT 		 equ 12347
  10+ 0000              IO_SPRITE_PATTERN_PORT       equ 91
  11+ 0000              IO_SPRITE_ATTRIBUTES_PORT    equ 87
  12+ 0000
  13+ 0000              LAYER2_VISIBLE_MASK 		equ $02
  14+ 0000              ; DEBUG 0 for always write to primary 08 for double buffering
  15+ 0000                  IFDEF DOUBLEBUFFER
  16+ 0000              LAYER2_SHADOW_SCREEN_MASK 	equ $08
  17+ 0000                  ELSE
  18+ 0000 ~            LAYER2_SHADOW_SCREEN_MASK 	equ $00
  19+ 0000                  ENDIF
  20+ 0000              LAYER2_READ_ENABLE_MASK 	equ %00000100
  21+ 0000              LAYER2_WRITE_ENABLE_MASK 	equ %00000001
  22+ 0000              LAYER2_READ_WRITE_MASK      equ %00000101
  23+ 0000              LAYER2_SCREEN_SECTION_MASK 	equ $03
  24+ 0000              LAYER2_SCREEN_SECTION_SHIFT equ 6
  25+ 0000
  26+ 0000              LAYER2_DISABLE_MEM_WRITE    equ %11111110
  27+ 0000              LAYER2_DISABLE_MEM_READ     equ %11111011
  28+ 0000              LAYER2_DISABLE_MEM_ACCESS   equ %11111010
  29+ 0000
  30+ 0000              LAYER2_SCREEN_BANK1          equ 8
  31+ 0000              LAYER2_SCREEN_BANK2          equ 9
  32+ 0000              LAYER2_SCREEN_BANK3          equ 10
  33+ 0000              LAYER2_SHADOW_BANK1          equ 11
  34+ 0000              LAYER2_SHADOW_BANK2          equ 12
  35+ 0000              LAYER2_SHADOW_BANK3          equ 13
  36+ 0000
  37+ 0000              SCREEN_HEIGHT 				 equ 192
  38+ 0000              SCREEN_RAM_BASE				 equ $0000
  39+ 0000              SCREEN_HOZ_MIN_PIX		     equ 10
  40+ 0000
  41+ 0000              SPRITES_VISIBLE_MASK         equ $01
  42+ 0000              SPRITES_ON_BORDER_MASK       equ $02
  43+ 0000              LAYER_PRIORITIES_MASK        equ $07
  44+ 0000              LORES_MODE_MASK              equ $80
  45+ 0000              LAYER_PRIORITIES_SHIFT       equ 2
  46+ 0000
  47+ 0000              LAYER_PRIORITIES_S_L_U 		equ 0
  48+ 0000              LAYER_PRIORITIES_L_S_U 		equ 1
  49+ 0000              LAYER_PRIORITIES_S_U_L  	equ 2
  50+ 0000              LAYER_PRIORITIES_L_U_S 		equ 3
  51+ 0000              LAYER_PRIORITIES_U_S_L 		equ 4
  52+ 0000              LAYER_PRIORITIES_U_L_S 		equ 5
  53+ 0000
  54+ 0000              DMA_WRO_BLOCK_PORTA_A2B_XFR  equ $7D
  55+ 0000              DMA_WRO_BLOCK_PORTA_B2A_XFR  equ $79
  56+ 0000              DMA_WR1_P1FIXED_MEMORY       equ $24
  57+ 0000              DMA_WR1_P1DEC_MEMORY         equ $04
  58+ 0000              DMA_WR1_P1INC_MEMORY         equ $14
  59+ 0000              DMA_WR2_P2FIXED_MEMORY       equ $20
  60+ 0000              DMA_WR2_P2DEC_MEMORY         equ $00
  61+ 0000              DMA_WR2_P2INC_MEMORY         equ $10
  62+ 0000              DMA_WR4_CONT_MODE            equ $AD
  63+ 0000              DMA_RESET                    equ $c3
  64+ 0000              DMA_RESET_PORT_A_TIMING      equ $c7
  65+ 0000              DMA_RESET_PORT_B_TIMING      equ $cb
  66+ 0000              DMA_LOAD                     equ $cf
  67+ 0000              DMA_CONTINUE                 equ $d3
  68+ 0000              DMA_DISABLE_INTERUPTS        equ $af
  69+ 0000              DMA_ENABLE_INTERUPTS         equ $ab
  70+ 0000              DMA_RESET_DISABLE_INTERUPTS  equ $a3
  71+ 0000              DMA_ENABLE_AFTER_RETI        equ $b7
  72+ 0000              DMA_READ_STATUS_BYTE         equ $bf
  73+ 0000              DMA_REINIT_STATUS_BYTE       equ $8b
  74+ 0000              DMA_START_READ_SEQUENCE      equ $a7
  75+ 0000              DMA_FORCE_READY              equ $b3
  76+ 0000              DMA_STOP_AT_END			     equ $82
  77+ 0000              DMA_DISABLE                  equ $83
  78+ 0000              DMA_ENABLE                   equ $87
  79+ 0000              DMA_WRITE_REGISTER_COMMAND   equ $bb
  80+ 0000              DMA_BURST                    equ $cd
  81+ 0000              DMA_CONTINUOUS               equ $ad
  82+ 0000              ZXN_DMA_PORT                 equ $6b
  83+ 0000
  84+ 0000
  85+ 0000              COLOUR_TRANSPARENT			 equ $E3
  86+ 0000
  87+ 0000
  88+ 0000
  89+ 0000
# file closed: ./Layer2Graphics/layer2_defines.asm
  49  0000                                      INCLUDE	"./Hardware/memory_bank_defines.asm"
# file opened: ./Hardware/memory_bank_defines.asm
   1+ 0000
   2+ 0000              membanksize			    equ	$1FFF
   3+ 0000
   4+ 0000              StartOfBank     	    equ $0000
   5+ 0000
   6+ 0000              membank0 			    equ $0000
   7+ 0000              dmaCopySrcAddr		    equ	$0000
   8+ 0000              MathsTablesAddr         equ $0000
   9+ 0000              membank1 			    equ $2000
  10+ 0000              membank2 			    equ $4000
  11+ 0000              membank3 			    equ $6000
  12+ 0000              membank4 			    equ $8000
  13+ 0000              membank5 			    equ $a000
  14+ 0000              membank6 			    equ $c000
  15+ 0000              ScreenBank              equ $c000
  16+ 0000              MenuGalChtAddr          equ $c000
  17+ 0000              MenuEquipSAddr          equ $c000
  18+ 0000              MenuInventAddr          equ $c000
  19+ 0000              MenuMarketAddr          equ $c000
  20+ 0000              DispMarketAddr          equ $c000
  21+ 0000              MenuShrChtAddr          equ $c000
  22+ 0000              MenuStatusAddr          equ $c000
  23+ 0000              MenuSystemAddr          equ $c000
  24+ 0000              ViewFrontAddr           equ $c000
  25+ 0000              SunBankAddr             equ $c000
  26+ 0000              PlanetBankAddr          equ $c000
  27+ 0000              UniverseBankAddr	    equ $c000
  28+ 0000              LaunchShipAddr          equ $c000
  29+ 0000              membank7 			    equ $e000
  30+ 0000              L1membankAddr   	    equ $e000
  31+ 0000              L2membankAddr   	    equ $e000
  32+ 0000              ShipModelsAddr	        equ $e000
  33+ 0000              SpritemembankAddr       equ $e000
  34+ 0000              ResetUniverseAddr       equ $e000
  35+ 0000              StockTableAddr	        equ $e000
  36+ 0000              CommanderAddr           equ $e000
  37+ 0000              LAYER2Addr              equ $e000
  38+ 0000              LAYER1Addr              equ $e000
  39+ 0000              SPRITEAddr              equ $e000
  40+ 0000              ConsoleImageAddr        equ $e000
  41+ 0000              GalaxyDataAddr          equ $e000
  42+ 0000
  43+ 0000              EXSDOSMMU0              equ MMU_SLOT_0_REGISTER
  44+ 0000              MathsTablesMMU          equ MMU_SLOT_0_REGISTER
  45+ 0000              ShipReadMMU             equ MMU_SLOT_0_REGISTER
  46+ 0000              DMACpySourceMMU		    equ	MMU_SLOT_0_REGISTER
  47+ 0000              EXSDOSMMU1              equ MMU_SLOT_1_REGISTER
  48+ 0000              SunMMU 		            equ MMU_SLOT_6_REGISTER
  49+ 0000              PlanetMMU 		        equ MMU_SLOT_6_REGISTER
  50+ 0000              UniverseMMU 		    equ MMU_SLOT_6_REGISTER
  51+ 0000              ScreenBankMMU           equ MMU_SLOT_6_REGISTER
  52+ 0000              MenuEquipSMMU           equ MMU_SLOT_6_REGISTER
  53+ 0000              MenuShrChtMMU           equ MMU_SLOT_6_REGISTER
  54+ 0000              MenuGalChtMMU           equ MMU_SLOT_6_REGISTER
  55+ 0000              MenuInventMMU           equ MMU_SLOT_6_REGISTER
  56+ 0000              MenuSystemMMU           equ MMU_SLOT_6_REGISTER
  57+ 0000              MenuMarketMMU           equ MMU_SLOT_6_REGISTER
  58+ 0000              DispMarketMMU           equ MMU_SLOT_6_REGISTER
  59+ 0000              MenuStatusMMU           equ MMU_SLOT_6_REGISTER
  60+ 0000              LaunchShipMMU           equ MMU_SLOT_6_REGISTER
  61+ 0000              L1memMMU       		    equ MMU_SLOT_7_REGISTER
  62+ 0000              L2memMMU       		    equ MMU_SLOT_7_REGISTER
  63+ 0000              SpritememMMU   		    equ MMU_SLOT_7_REGISTER
  64+ 0000              ShipModelMMU  		    equ MMU_SLOT_7_REGISTER
  65+ 0000              ResetUniverseMMU	    equ MMU_SLOT_7_REGISTER
  66+ 0000              CommanderMMU	        equ MMU_SLOT_7_REGISTER
  67+ 0000              StockTableMMU		    equ MMU_SLOT_7_REGISTER
  68+ 0000              ConsoleImageDataMMU	    equ MMU_SLOT_7_REGISTER
  69+ 0000              GalaxyDataMMU	        equ MMU_SLOT_7_REGISTER
  70+ 0000
  71+ 0000              BankResetUniv           equ 49
  72+ 0000              BankMenuShrCht          equ 50
  73+ 0000              BankMenuGalCht          equ 51
  74+ 0000              BankMenuInvent          equ 52
  75+ 0000              BankMenuSystem          equ 53
  76+ 0000              BankMenuMarket          equ 54
  77+ 0000              BankStockTable          equ 55
  78+ 0000              BankCommander           equ 56
  79+ 0000              BankLAYER2              equ 57
  80+ 0000              BankLAYER1              equ 58
  81+ 0000              BankShipModels1         equ 59
  82+ 0000              BankSPRITE              equ 60
  83+ 0000              BankConsole             equ 61
  84+ 0000              BankFrontView           equ 62
  85+ 0000              BankMenuStatus          equ 63
  86+ 0000              BankMenuEquipS          equ 64
  87+ 0000              BankLaunchShip          equ 65
  88+ 0000              BankDispMarket          equ 66
  89+ 0000              BankShipModels2         equ 67
  90+ 0000              BankShipModels3         equ 68
  91+ 0000              BankShipModels4         equ 69
  92+ 0000
  93+ 0000              BankUNIVDATA0           equ 70
  94+ 0000              BankUNIVDATA1           equ 71
  95+ 0000              BankUNIVDATA2           equ 72
  96+ 0000              BankUNIVDATA3           equ 73
  97+ 0000              BankUNIVDATA4           equ 74
  98+ 0000              BankUNIVDATA5           equ 75
  99+ 0000              BankUNIVDATA6           equ 76
 100+ 0000              BankUNIVDATA7           equ 77
 101+ 0000              BankUNIVDATA8           equ 78
 102+ 0000              BankUNIVDATA9           equ 79
 103+ 0000              BankUNIVDATA10          equ 80
 104+ 0000              BankUNIVDATA11          equ 81
 105+ 0000              BankUNIVDATA12          equ 82
 106+ 0000              BankSunData             equ 83
 107+ 0000              BankPlanetData          equ 84
 108+ 0000
 109+ 0000              BankGalaxyData0         equ 91
 110+ 0000              BankGalaxyData1         equ 92
 111+ 0000              BankGalaxyData2         equ 93
 112+ 0000              BankGalaxyData3         equ 94
 113+ 0000              BankGalaxyData4         equ 95
 114+ 0000              BankGalaxyData5         equ 96
 115+ 0000              BankGalaxyData6         equ 97
 116+ 0000              BankGalaxyData7         equ 98
 117+ 0000
 118+ 0000              BankMathsTables         equ 99
 119+ 0000
 120+ 0000              BankROM                 equ 255
 121+ 0000
# file closed: ./Hardware/memory_bank_defines.asm
  50  0000                                      INCLUDE "./Hardware/screen_equates.asm"
# file opened: ./Hardware/screen_equates.asm
   1+ 0000              ScreenHeight 		equ 192
   2+ 0000              ScreenLastRow       equ ScreenHeight -1
   3+ 0000              ScreenWidth  		equ 256
   4+ 0000              ScreenLastCol       equ ScreenWidth -1
   5+ 0000              ScreenHeightHalf	equ 96
   6+ 0000              ScreenWidthHalf  	equ 128
   7+ 0000              ScreenCenterY		equ 96
   8+ 0000              ScreenCenterX       equ 128
   9+ 0000              ViewHeight          equ 128
  10+ 0000              ViewHeightPlus1     equ 128+1
  11+ 0000              ViewLastRow       	equ ViewHeight -1
  12+ 0000              ViewWidth  			equ 256
  13+ 0000              ViewLastCol         equ ViewWidth -1
  14+ 0000              ViewHeightHalf      equ 63
  15+ 0000              ViewWidthHalf       equ 127
  16+ 0000              ViewCenterY         equ 64
  17+ 0000              ViewCenterX         equ 128
  18+ 0000              ShipColour			equ $FF		; place holder for debugging TODO
  19+ 0000              ScreenL1Bottom      equ $5000
  20+ 0000              ScreenL1BottomLen   equ 32 * 8 * 8
  21+ 0000              ScreenL1AttrBtm     equ $5A00
  22+ 0000              ScreenL1AttrBtmLen  equ 32 * 8
  23+ 0000
# file closed: ./Hardware/screen_equates.asm
  51  0000                                      INCLUDE "./Data/ShipModelEquates.asm"
# file opened: ./Data/ShipModelEquates.asm
   1+ 0000              ScoopDebrisOffset	    equ	0                               ; hull byte#0 high nibble is scoop info, lower nibble is debris spin info
   2+ 0000              MissileLockLoOffset	    equ 1
   3+ 0000              MissileLockHiOffset	    equ 2
   4+ 0000              EdgeAddyOffset		    equ 3
   5+ 0000              LineX4Offset		    equ 5
   6+ 0000              GunVertexOffset		    equ 6
   7+ 0000              ExplosionCtOffset	    equ 7
   8+ 0000              VertexCountOffset       equ 8
   9+ 0000              VertexCtX6Offset	    equ 9
  10+ 0000              EdgeCountOffset		    equ 10
  11+ 0000              BountyLoOffset		    equ 11
  12+ 0000              BountyHiOffset		    equ 12
  13+ 0000              FaceCtX4Offset		    equ 13
  14+ 0000              DotOffset			    equ 14
  15+ 0000              EnergyOffset		    equ 15
  16+ 0000              SpeedOffset			    equ 16
  17+ 0000              FaceAddyOffset		    equ 17
  18+ 0000              QOffset				    equ 19
  19+ 0000              LaserOffset			    equ 20
  20+ 0000              VerticiesAddyOffset     equ 21
  21+ 0000              ShipTypeOffset          equ 23
  22+ 0000              ShipNewBitsOffset       equ 24
  23+ 0000              ShipAIFlagsOffset       equ 25
  24+ 0000              ShipECMFittedChanceOffset     equ 26
  25+ 0000              ShipDataLength          equ ShipECMFittedChanceOffset+1
  26+ 0000
  27+ 0000              CobraTablePointer       equ 43
  28+ 0000              ;29 faulty
  29+ 0000              BankThreshold           equ 16
  30+ 0000
  31+ 0000              ShipTableALast          equ 23
  32+ 0000              ShipTableBLast          equ 39
  33+ 0000              ShipTableCLast          equ 55
  34+ 0000
# file closed: ./Data/ShipModelEquates.asm
  52  0000                                      INCLUDE "./Menus/clear_screen_inline_no_double_buffer.asm"
# file opened: ./Menus/clear_screen_inline_no_double_buffer.asm
   1+ 0000              InitNoDoubleBuffer:         MACRO
   2+ 0000 ~                                        MMUSelectLayer1
   3+ 0000 ~                                        call	l1_cls
   4+ 0000 ~                                        ld		a,7
   5+ 0000 ~                                        call	l1_attr_cls_to_a
   6+ 0000 ~                                        MMUSelectLayer2
   7+ 0000 ~                                        call    asm_l2_double_buffer_off
   8+ 0000 ~                                        call	l2_cls	; Get some space
   9+ 0000 ~                                        MMUSelectSpriteBank
  10+ 0000 ~                                        call    sprite_cls_cursors
  11+ 0000                                          ENDM
  12+ 0000
  13+ 0000
# file closed: ./Menus/clear_screen_inline_no_double_buffer.asm
  53  0000                                      INCLUDE "./Macros/graphicsMacros.asm"
# file opened: ./Macros/graphicsMacros.asm
   1+ 0000              ; General Graphics macros
   2+ 0000              DoubleBufferIfPossible: MACRO
   3+ 0000 ~                                    IFDEF DOUBLEBUFFER
   4+ 0000 ~                                        MMUSelectLayer2
   5+ 0000 ~                                        call  l2_cls
   6+ 0000 ~                                        call  l2_flip_buffers
   7+ 0000 ~                                    ENDIF
   8+ 0000                                      ENDM
# file closed: ./Macros/graphicsMacros.asm
  54  0000                                      INCLUDE "./Macros/callMacros.asm"
# file opened: ./Macros/callMacros.asm
   1+ 0000
   2+ 0000              CallIfAEqNusng:         MACRO   reg,target
   3+ 0000 ~                                    cp      reg
   4+ 0000 ~                                    call	z,target
   5+ 0000                                      ENDM
   6+ 0000
   7+ 0000              CallIfAGTENusng:        MACRO   reg,target
   8+ 0000 ~                                    cp      reg
   9+ 0000 ~                                    call	nc,target
  10+ 0000                                      ENDM
  11+ 0000
  12+ 0000              CallIfAGTEMemusng:      MACRO   reg,target
  13+ 0000 ~                                    ld      hl,reg
  14+ 0000 ~                                    cp      (hl)
  15+ 0000 ~                                    call	nc,target
  16+ 0000                                      ENDM
  17+ 0000
  18+ 0000              CallIfALTNusng:         MACRO   reg,target
  19+ 0000 ~                                    cp      reg
  20+ 0000 ~                                    call	c,target
  21+ 0000                                      ENDM
  22+ 0000
  23+ 0000              CallIfMemEqMemusng:     MACRO mem, address, target
  24+ 0000 ~                                    ld   a,(mem)
  25+ 0000 ~                                    ld   hl,address
  26+ 0000 ~                                    cp   (hl)
  27+ 0000 ~                                    call    z,target
  28+ 0000                                      ENDM
  29+ 0000
  30+ 0000              CallIfMemEqNusng:       MACRO mem, value, target
  31+ 0000 ~                                    ld   a,(mem)
  32+ 0000 ~                                    cp   value
  33+ 0000 ~                                    call    z,target
  34+ 0000                                      ENDM
  35+ 0000
  36+ 0000              CallIfMemTrue:          MACRO mem, target
  37+ 0000 ~                                    ld      a,(mem)
  38+ 0000 ~                                    and     a
  39+ 0000 ~                                    call    z, target
  40+ 0000                                      ENDM
  41+ 0000
  42+ 0000              CallIfMemFalse:         MACRO mem, target
  43+ 0000 ~                                    ld      a,(mem)
  44+ 0000 ~                                    and     a
  45+ 0000 ~                                    call    nz, target
  46+ 0000                                      ENDM
  47+ 0000
  48+ 0000              CallIfMemZero:          MACRO mem, target
  49+ 0000 ~                                    ld      a,(mem)
  50+ 0000 ~                                    and     a
  51+ 0000 ~                                    call    z, target
  52+ 0000                                      ENDM
  53+ 0000
  54+ 0000              CallIfMemNotZero:       MACRO mem, target
  55+ 0000 ~                                    ld      a,(mem)
  56+ 0000 ~                                    and     a
  57+ 0000 ~                                    call    nz, target
  58+ 0000                                      ENDM
  59+ 0000              CallIfATrue:            MACRO target
  60+ 0000 ~                                    and     a
  61+ 0000 ~                                    call    z, target
  62+ 0000                                      ENDM
  63+ 0000
  64+ 0000              CallIfAFalse:           MACRO target
  65+ 0000 ~                                    and     a
  66+ 0000 ~                                    call    nz, target
  67+ 0000                                      ENDM
  68+ 0000
  69+ 0000              CallIfAZero:            MACRO target
  70+ 0000 ~                                    and     a
  71+ 0000 ~                                    call    z, target
  72+ 0000                                      ENDM
  73+ 0000
  74+ 0000              CallIfANotZero:         MACRO target
  75+ 0000 ~                                    and     a
  76+ 0000 ~                                    call    nz, target
  77+ 0000                                      ENDM
# file closed: ./Macros/callMacros.asm
  55  0000                                      INCLUDE "./Macros/carryFlagMacros.asm"
# file opened: ./Macros/carryFlagMacros.asm
   1+ 0000
   2+ 0000              SetCarryFlag:           MACRO
   3+ 0000 ~                                    scf
   4+ 0000                                      ENDM
   5+ 0000
   6+ 0000              ClearCarryFlag:	        MACRO
   7+ 0000 ~                                    or a
   8+ 0000                                      ENDM
   9+ 0000
  10+ 0000              FlipCarryFlag:          MACRO
  11+ 0000 ~                                    ccf
  12+ 0000                                      ENDM
  13+ 0000
# file closed: ./Macros/carryFlagMacros.asm
  56  0000                                      INCLUDE "./Macros/CopyByteMacros.asm"
# file opened: ./Macros/CopyByteMacros.asm
   1+ 0000              CopyByteAtHLixToA:		MACRO memloc
   2+ 0000 ~            						ex          de,hl                               ; save hl
   3+ 0000 ~            						ld          hl,memloc
   4+ 0000 ~            						add         hl,a
   5+ 0000 ~            						ld          a,(hl)                              ; get XX2[x]
   6+ 0000 ~            						ex          de,hl                               ; get hl back as we need it in loop
   7+ 0000              						ENDM
   8+ 0000
   9+ 0000              ; Increments IYL
  10+ 0000              ; Increments IHL
  11+ 0000              ; Gets value at hl and loads into Parameter 1 address
  12+ 0000
  13+ 0000              CopyByteAtNextHLiyl: 	MACRO memloc
  14+ 0000 ~            						inc         iyl                                 ;
  15+ 0000 ~            						inc         hl                                  ; vertex byte#1
  16+ 0000 ~            						ld          a,(hl)                              ;
  17+ 0000 ~            						ld          (memloc),a                     ; XX15+2 = (V),Y
  18+ 0000              						ENDM
  19+ 0000
  20+ 0000              ;------------------------------------------------------------------------------------------------------------------------------
  21+ 0000              CopyByteAtNextHL:   MACRO targetaddr
  22+ 0000 ~                                inc         hl                                  ; vertex byte#1
  23+ 0000 ~                                ld          a,(hl)                              ;
  24+ 0000 ~                                ld          (targetaddr),a                     ; SunXX15+2 = (V),Y
  25+ 0000                                  ENDM
# file closed: ./Macros/CopyByteMacros.asm
  57  0000                                      INCLUDE "./Macros/ldCopyMacros.asm"
# file opened: ./Macros/ldCopyMacros.asm
   1+ 0000              ZeroA:		            MACRO
   2+ 0000 ~                                    xor a
   3+ 0000                                      ENDM
   4+ 0000
   5+ 0000              SetATrue:               MACRO
   6+ 0000 ~                                    xor     a
   7+ 0000                                      ENDM
   8+ 0000
   9+ 0000              SetAFalse:              MACRO
  10+ 0000 ~                                    ld      a,$FF
  11+ 0000                                      ENDM
  12+ 0000
  13+ 0000              SetMemFalse             MACRO   mem
  14+ 0000 ~                                    ld      a,$FF
  15+ 0000 ~                                    ld      (mem),a
  16+ 0000                                      ENDM
  17+ 0000
  18+ 0000              SetMemTrue              MACRO   mem
  19+ 0000 ~                                    xor     a
  20+ 0000 ~                                    ld      (mem),a
  21+ 0000                                      ENDM
  22+ 0000
  23+ 0000              SetMemToN:              MACRO   mem,value
  24+ 0000 ~                                    ld      a,value
  25+ 0000 ~                                    ld      (mem),a
  26+ 0000                                      ENDM
  27+ 0000
  28+ 0000              ldCopyStringLen:        MACRO   source, target, strlen
  29+ 0000 ~                                    ld      hl,source
  30+ 0000 ~                                    ld      de, target
  31+ 0000 ~                                    ld      bc, strlen
  32+ 0000 ~                                    ldir
  33+ 0000                                      ENDM
  34+ 0000
  35+ 0000              ldCopyTextAtHLtoDE:     MACRO
  36+ 0000 ~            .CopyLoop:              ld      a,(hl)
  37+ 0000 ~                                    ld      (de),a
  38+ 0000 ~                                    cp      0
  39+ 0000 ~                                    jp      z,.DoneCopy
  40+ 0000 ~                                    inc     hl
  41+ 0000 ~                                    inc     de
  42+ 0000 ~                                    jr      .CopyLoop
  43+ 0000 ~            .DoneCopy:
  44+ 0000                                      ENDM
  45+ 0000
  46+ 0000              ldClearTextLoop:        MACRO   TextSize
  47+ 0000 ~                                    ld      b,a
  48+ 0000 ~                                    ld      a,TextSize
  49+ 0000 ~            .ClearLoop:             ld      (hl),a
  50+ 0000 ~                                    inc     hl
  51+ 0000 ~                                    djnz    .ClearLoop
  52+ 0000                                      ENDM
  53+ 0000
  54+ 0000              ldCopyByte:             MACRO memfrom, memto
  55+ 0000 ~                                    ld       a,(memfrom)
  56+ 0000 ~                                    ld       (memto),a
  57+ 0000                                      ENDM
  58+ 0000
  59+ 0000
  60+ 0000              ldCopyByteABS:          MACRO memfrom, memto
  61+ 0000 ~                                    ld       a,(memfrom)
  62+ 0000 ~                                    and		$7F
  63+ 0000 ~                                    ld       (memto),a
  64+ 0000                                      ENDM
  65+ 0000
  66+ 0000              ldAtHLtoMem:            MACRO   memto
  67+ 0000 ~                                    ld      a,(hl)
  68+ 0000 ~                                    ld      (memto),a
  69+ 0000                                      ENDM
  70+ 0000
  71+ 0000              ldCopy2Byte             MACRO  memfrom, memto
  72+ 0000 ~                                    ld       hl,(memfrom)
  73+ 0000 ~                                    ld       (memto),hl
  74+ 0000                                      ENDM
  75+ 0000
  76+ 0000              ldWriteConst            MACRO  memfrom, memto
  77+ 0000 ~                                    ld       a,memfrom
  78+ 0000 ~                                    ld       (memto),a
  79+ 0000                                      ENDM
  80+ 0000
  81+ 0000              ldWriteZero             MACRO  memto
  82+ 0000 ~                                    xor      a
  83+ 0000 ~                                    ld       (memto),a
  84+ 0000                                      ENDM
  85+ 0000
  86+ 0000              ldIXLaFromN:	        MACRO memfrom
  87+ 0000 ~                                    ld		a,(memfrom)
  88+ 0000 ~                                    ld		ixl,a
  89+ 0000                                      ENDM
  90+ 0000
  91+ 0000              ldIXHaFromN:	        MACRO memfrom
  92+ 0000 ~                                    ld		a,(memfrom)
  93+ 0000 ~                                    ld		ixh,a
  94+ 0000                                      ENDM
  95+ 0000
  96+ 0000              ldIYLaFromN:	        MACRO memfrom
  97+ 0000 ~                                    ld		a,(memfrom)
  98+ 0000 ~                                    ld		iyl,a
  99+ 0000                                      ENDM
 100+ 0000
 101+ 0000              ldIYHaFromN:	        MACRO memfrom
 102+ 0000 ~                                    ld		a,(memfrom)
 103+ 0000 ~                                    ld		iyh,a
 104+ 0000                                      ENDM
 105+ 0000
 106+ 0000              ldhlde:			        MACRO
 107+ 0000 ~                                    ld		h,d
 108+ 0000 ~                                    ld		l,e
 109+ 0000                                      ENDM
 110+ 0000
 111+ 0000              ldhlbc:			        MACRO
 112+ 0000 ~                                    ld		h,b
 113+ 0000 ~                                    ld		l,c
 114+ 0000                                      ENDM
 115+ 0000
 116+ 0000              ldbcde:			        MACRO
 117+ 0000 ~                                    ld		b,d
 118+ 0000 ~                                    ld		c,e
 119+ 0000                                      ENDM
 120+ 0000
 121+ 0000              lddebc:			        MACRO
 122+ 0000 ~                                    ld		d,b
 123+ 0000 ~                                    ld		e,c
 124+ 0000                                      ENDM
 125+ 0000
 126+ 0000              ldbchl:			        MACRO
 127+ 0000 ~                                    ld		b,h
 128+ 0000 ~                                    ld		c,l
 129+ 0000                                      ENDM
 130+ 0000
 131+ 0000              lddeiy:			        MACRO
 132+ 0000 ~                                    ld		d,iyh
 133+ 0000 ~                                    ld		e,iyl
 134+ 0000                                      ENDM
 135+ 0000
 136+ 0000              ldiyde:			        MACRO
 137+ 0000 ~                                    ld		iyh,d
 138+ 0000 ~                                    ld		iyl,e
 139+ 0000                                      ENDM
 140+ 0000
 141+ 0000
 142+ 0000              FourLDIInstrunctions:   MACRO
 143+ 0000 ~                                    ldi
 144+ 0000 ~                                    ldi
 145+ 0000 ~                                    ldi
 146+ 0000 ~                                    ldi
 147+ 0000                                      ENDM
 148+ 0000
 149+ 0000              FiveLDIInstrunctions:   MACRO
 150+ 0000 ~                                    ldi
 151+ 0000 ~                                    ldi
 152+ 0000 ~                                    ldi
 153+ 0000 ~                                    ldi
 154+ 0000 ~                                    ldi
 155+ 0000                                      ENDM
 156+ 0000
 157+ 0000              SixLDIInstrunctions:    MACRO
 158+ 0000 ~                                    ldi
 159+ 0000 ~                                    ldi
 160+ 0000 ~                                    ldi
 161+ 0000 ~                                    ldi
 162+ 0000 ~                                    ldi
 163+ 0000 ~                                    ldi
 164+ 0000                                      ENDM
 165+ 0000
 166+ 0000              EightLDIInstrunctions:  MACRO
 167+ 0000 ~            		                ldi
 168+ 0000 ~            		                ldi
 169+ 0000 ~            		                ldi
 170+ 0000 ~            		                ldi
 171+ 0000 ~            		                ldi
 172+ 0000 ~            		                ldi
 173+ 0000 ~            		                ldi
 174+ 0000 ~            		                ldi
 175+ 0000                                      ENDM
 176+ 0000
 177+ 0000              NineLDIInstrunctions:  MACRO
 178+ 0000 ~            		                ldi
 179+ 0000 ~            		                ldi
 180+ 0000 ~            		                ldi
 181+ 0000 ~            		                ldi
 182+ 0000 ~            		                ldi
 183+ 0000 ~            		                ldi
 184+ 0000 ~            		                ldi
 185+ 0000 ~            		                ldi
 186+ 0000 ~            		                ldi
 187+ 0000                                      ENDM
# file closed: ./Macros/ldCopyMacros.asm
  58  0000                                      INCLUDE "./Macros/ldIndexedMacros.asm"
# file opened: ./Macros/ldIndexedMacros.asm
   1+ 0000              GetByteAInTable:    MACRO table
   2+ 0000 ~                                ld          hl,table
   3+ 0000 ~                                add         hl,a
   4+ 0000 ~                                ld          a,(hl)
   5+ 0000                                  ENDM
   6+ 0000
   7+ 0000              HLWordAInTable:     MACRO table
   8+ 0000 ~                                ld          hl,table
   9+ 0000 ~                                sla         a
  10+ 0000 ~                                add         hl,a
  11+ 0000 ~                                ld          a,(hl)
  12+ 0000 ~                                inc         hl
  13+ 0000 ~                                ld          h,(hl)
  14+ 0000 ~                                ld          l,a
  15+ 0000                                  ENDM
  16+ 0000
  17+ 0000
  18+ 0000              ldAToHLixl:			MACRO value
  19+ 0000 ~            					ld          hl,value
  20+ 0000 ~            					ex          af,af'
  21+ 0000 ~            					ld          a,ixl
  22+ 0000 ~            					add         hl,a
  23+ 0000 ~            					ex          af,af'
  24+ 0000 ~            					ld          (hl),a
  25+ 0000              					ENDM
  26+ 0000
  27+ 0000              ldAToHLiyl:			MACRO value
  28+ 0000 ~            					ld          hl,value
  29+ 0000 ~            					ex          af,af'
  30+ 0000 ~            					ld          a,iyl
  31+ 0000 ~            					add         hl,a
  32+ 0000 ~            					ex          af,af'
  33+ 0000 ~            					ld          (hl),a
  34+ 0000              					ENDM
  35+ 0000
  36+ 0000
  37+ 0000              ldHLixlToA:         MACRO value
  38+ 0000 ~                                ld          hl,value
  39+ 0000 ~                                ex          af,af'
  40+ 0000 ~                                ld          a,ixl
  41+ 0000 ~                                add         hl,a
  42+ 0000 ~                                ld          a,(hl)
  43+ 0000                                  ENDM
  44+ 0000
  45+ 0000              ldHLiylToA:         MACRO value
  46+ 0000 ~                                ld          hl,value
  47+ 0000 ~                                ex          af,af'
  48+ 0000 ~                                ld          a,iyl
  49+ 0000 ~                                add         hl,a
  50+ 0000 ~                                ld          a,(hl)
  51+ 0000                                  ENDM
  52+ 0000
  53+ 0000              ldHLIdxAToA:        MACRO value
  54+ 0000 ~                                ld          hl,value
  55+ 0000 ~                                add         hl,a
  56+ 0000 ~                                ld          a,(hl)
  57+ 0000                                  ENDM
  58+ 0000
  59+ 0000              HLEquAddrAtHLPlusA: MACRO
  60+ 0000 ~                                sla         a
  61+ 0000 ~                                add         hl,a
  62+ 0000 ~                                ld          a,(hl)
  63+ 0000 ~                                inc         hl
  64+ 0000 ~                                ld          h,(hl)
  65+ 0000 ~                                ld          l,a
  66+ 0000                                  ENDM
# file closed: ./Macros/ldIndexedMacros.asm
  59  0000                                      INCLUDE "./Macros/jumpMacros.asm"
# file opened: ./Macros/jumpMacros.asm
   1+ 0000              JumpIfPositive:	        MACRO target
   2+ 0000 ~                                    jp		p, target
   3+ 0000                                      ENDM
   4+ 0000
   5+ 0000              JumpIfNegative:	        MACRO target
   6+ 0000 ~                                    jp		m, target
   7+ 0000                                      ENDM
   8+ 0000
   9+ 0000
  10+ 0000              JumpIfUnderflow:	    MACRO target
  11+ 0000 ~                                    jp		po, target
  12+ 0000                                      ENDM
  13+ 0000
  14+ 0000              JumpIfOverflow:	        MACRO target
  15+ 0000 ~                                    jp		po, target
  16+ 0000                                      ENDM
  17+ 0000
  18+ 0000
  19+ 0000              JumpIfNotZero:	        MACRO target
  20+ 0000 ~                                    jp	nz,target
  21+ 0000                                      ENDM
  22+ 0000
  23+ 0000              JumpIfZero:	            MACRO target
  24+ 0000 ~                                    jp	z,target
  25+ 0000                                      ENDM
  26+ 0000
  27+ 0000              ;.. Bit routines
  28+ 0000              JumpOnLeadSignSet:      MACRO   reg, target
  29+ 0000 ~                                    ld      a,reg
  30+ 0000 ~                                    and     SignOnly8Bit
  31+ 0000 ~                                    jp      nz,target
  32+ 0000                                      ENDM
  33+ 0000
  34+ 0000              JumpOnLeadSignClear:    MACRO   reg, target
  35+ 0000 ~                                    ld      a,reg
  36+ 0000 ~                                    and     SignOnly8Bit
  37+ 0000 ~                                    jp      z,target
  38+ 0000                                      ENDM
  39+ 0000
  40+ 0000              JumpOnLeadSignSetA:     MACRO   target
  41+ 0000 ~                                    and     SignOnly8Bit
  42+ 0000 ~                                    jp      nz,target
  43+ 0000                                      ENDM
  44+ 0000
  45+ 0000              JumpOnLeadSignClearA:   MACRO   target
  46+ 0000 ~                                    and     SignOnly8Bit
  47+ 0000 ~                                    jp      z,target
  48+ 0000                                      ENDM
  49+ 0000
  50+ 0000              JumpOnMemBitSet:        MACRO mem, bitnbr, target
  51+ 0000 ~                                    ld      a,(mem)
  52+ 0000 ~                                    bit 	bitnbr,a
  53+ 0000 ~                                    jp      nz,target
  54+ 0000                                      ENDM
  55+ 0000
  56+ 0000              JumpOnMemBitClear:      MACRO mem, bitnbr, target
  57+ 0000 ~                                    ld      a,(mem)
  58+ 0000 ~                                    bit 	bitnbr,a
  59+ 0000 ~                                    jp      z,target
  60+ 0000                                      ENDM
  61+ 0000
  62+ 0000
  63+ 0000              JumpOnABitSet:          MACRO   bitnbr, target
  64+ 0000 ~                                    bit 	bitnbr, a
  65+ 0000 ~                                    jp      nz,target
  66+ 0000                                      ENDM
  67+ 0000
  68+ 0000              JumpOnABitClear:        MACRO   bitnbr, target
  69+ 0000 ~                                    bit 	bitnbr, a
  70+ 0000 ~                                    jp      z,target
  71+ 0000                                      ENDM
  72+ 0000
  73+ 0000              JumpOnABit5Set:         MACRO   target
  74+ 0000 ~                                    and     Bit5Only
  75+ 0000 ~                                    jp      nz,target
  76+ 0000                                      ENDM
  77+ 0000
  78+ 0000              JumpOnABit5Clear:       MACRO   target
  79+ 0000 ~                                    and     Bit5Only
  80+ 0000 ~                                    jp      z,target
  81+ 0000                                      ENDM
  82+ 0000
  83+ 0000              JumpOnBitMaskSet:       MACRO   bitmask, target
  84+ 0000 ~                                    and     bitmask
  85+ 0000 ~                                    jp      nz,target
  86+ 0000                                      ENDM
  87+ 0000
  88+ 0000              JumpOnBitMaskClear:     MACRO   bitmask, target
  89+ 0000 ~                                    and     bitmask
  90+ 0000 ~                                    jp      z,target
  91+ 0000                                      ENDM
  92+ 0000
  93+ 0000              JumpOnMemBitMaskSet:    MACRO   mem, bitmask, target
  94+ 0000 ~                                    ld      a,(mem)
  95+ 0000 ~                                    and     bitmask
  96+ 0000 ~                                    jp      nz,target
  97+ 0000                                      ENDM
  98+ 0000
  99+ 0000              JumpOnMemBitMaskClear:  MACRO   mem, bitmask, target
 100+ 0000 ~                                    ld      a,(mem)
 101+ 0000 ~                                    and     bitmask
 102+ 0000 ~                                    jp      z,target
 103+ 0000                                      ENDM
 104+ 0000
 105+ 0000              JumpOnBitSet:           MACRO  reg, bitnbr, target
 106+ 0000 ~                                    bit 	bitnbr,reg
 107+ 0000 ~                                    jp      nz,target
 108+ 0000                                      ENDM
 109+ 0000
 110+ 0000              JumpOnBitClear:         MACRO  reg, bitnbr, target
 111+ 0000 ~                                    bit 	bitnbr,reg
 112+ 0000 ~                                    jp      z,target
 113+ 0000                                      ENDM
 114+ 0000
 115+ 0000              ; Comparison Routines
 116+ 0000              JumpIfAGTEusng:         MACRO
 117+ 0000 ~                                    jp		nc,target
 118+ 0000                                      ENDM
 119+ 0000
 120+ 0000              JumpIfAGTENusng:        MACRO reg,target
 121+ 0000 ~                                    cp     reg
 122+ 0000 ~                                    jp		nc,target
 123+ 0000                                      ENDM
 124+ 0000
 125+ 0000              JumpIfAGTEMemusng:      MACRO mem,target
 126+ 0000 ~                                    ld      hl,mem
 127+ 0000 ~                                    cp      (hl)
 128+ 0000 ~                                    jp		nc,target
 129+ 0000                                      ENDM
 130+ 0000
 131+ 0000              JumpIfALTMemusng:       MACRO mem,target
 132+ 0000 ~                                    ld      hl,mem
 133+ 0000 ~                                    cp      (hl)
 134+ 0000 ~                                    jp		c,target
 135+ 0000                                      ENDM
 136+ 0000
 137+ 0000              JumpIfMemGTENusng:      MACRO mem, value, target
 138+ 0000 ~                                    ld     a,(mem)
 139+ 0000 ~                                    cp     value
 140+ 0000 ~                                    jp	  nc,target
 141+ 0000                                      ENDM
 142+ 0000
 143+ 0000              JumpIfMemGTEMemusng:    MACRO mem, address, target
 144+ 0000 ~                                    ld   a,(mem)
 145+ 0000 ~                                    ld   hl,address
 146+ 0000 ~                                    cp   (hl)
 147+ 0000 ~                                    jp	  nc,target
 148+ 0000                                      ENDM
 149+ 0000
 150+ 0000              JumpIfMemEqMemusng:     MACRO mem, address, target
 151+ 0000 ~                                    ld   a,(mem)
 152+ 0000 ~                                    ld   hl,address
 153+ 0000 ~                                    cp   (hl)
 154+ 0000 ~                                    jp	  z,target
 155+ 0000                                      ENDM
 156+ 0000
 157+ 0000              JumpIfMemNeMemusng:     MACRO mem, address, target
 158+ 0000 ~                                    ld   a,(mem)
 159+ 0000 ~                                    ld   hl,address
 160+ 0000 ~                                    cp   (hl)
 161+ 0000 ~                                    jp	  nz,target
 162+ 0000                                      ENDM
 163+ 0000
 164+ 0000              JumpIfMemTrue:          MACRO mem, target
 165+ 0000 ~                                    ld      a,(mem)
 166+ 0000 ~                                    and     a
 167+ 0000 ~                                    jp      z, target
 168+ 0000                                      ENDM
 169+ 0000
 170+ 0000              JumpIfMemFalse:         MACRO mem, target
 171+ 0000 ~                                    ld      a,(mem)
 172+ 0000 ~                                    and     a
 173+ 0000 ~                                    jp      nz, target
 174+ 0000                                      ENDM
 175+ 0000
 176+ 0000              JumpIfATrue:            MACRO target
 177+ 0000 ~                                    and     a
 178+ 0000 ~                                    jp      z, target
 179+ 0000                                      ENDM
 180+ 0000
 181+ 0000              JumpIfAFalse:           MACRO target
 182+ 0000 ~                                    and     a
 183+ 0000 ~                                    jp      nz, target
 184+ 0000                                      ENDM
 185+ 0000
 186+ 0000              JumpIfALTusng:          MACRO target
 187+ 0000 ~                                    jp		c,target
 188+ 0000                                      ENDM
 189+ 0000
 190+ 0000              JumpIfALTNusng:         MACRO value, target
 191+ 0000 ~                                    cp      value
 192+ 0000 ~                                    jp		c, target
 193+ 0000                                      ENDM
 194+ 0000
 195+ 0000              JumpIfMemLTNusng:       MACRO mem, value, target
 196+ 0000 ~                                    ld      a,(mem)
 197+ 0000 ~                                    cp      value
 198+ 0000 ~                                    jp	  c,target
 199+ 0000                                      ENDM
 200+ 0000
 201+ 0000              JumpIfMemLTMemusng:     MACRO mem, value, target
 202+ 0000 ~                                    ld    a,(mem)
 203+ 0000 ~                                    ld    hl,value
 204+ 0000 ~                                    cp    (hl)
 205+ 0000 ~                                    jp	  c,target
 206+ 0000                                      ENDM
 207+ 0000
 208+ 0000              JumpIfMemEqNusng:       MACRO mem,value,target
 209+ 0000 ~                                    ld  a,(mem)
 210+ 0000 ~                                    cp  value
 211+ 0000 ~                                    jp  z,target
 212+ 0000                                      ENDM
 213+ 0000
 214+ 0000              JumpIfMemNeNusng:       MACRO mem,value,target
 215+ 0000 ~                                    ld  a,(mem)
 216+ 0000 ~                                    cp  value
 217+ 0000 ~                                    jp  nz,target
 218+ 0000                                      ENDM
 219+ 0000
 220+ 0000              JumpIfMemZero:          MACRO mem,target
 221+ 0000 ~                                    ld  a,(mem)
 222+ 0000 ~                                    and a
 223+ 0000 ~                                    jp  z,target
 224+ 0000                                      ENDM
 225+ 0000
 226+ 0000              JumpIfMemNotZero:       MACRO mem,target
 227+ 0000 ~                                    ld  a,(mem)
 228+ 0000 ~                                    and a
 229+ 0000 ~                                    jp  nz,target
 230+ 0000                                      ENDM
 231+ 0000
 232+ 0000              JumpIfALTMemHLusng:     MACRO target
 233+ 0000 ~                                    cp    (hl)
 234+ 0000 ~                                    jp	  c,target
 235+ 0000                                      ENDM
 236+ 0000
 237+ 0000              JumpIfANENusng:         MACRO value, target
 238+ 0000 ~                                    cp     value
 239+ 0000 ~                                    jp      nz,target
 240+ 0000                                      ENDM
 241+ 0000
 242+ 0000              JumpIfANEquNusng:       MACRO value, target
 243+ 0000 ~                                    cp     value
 244+ 0000 ~                                    jp     z,target
 245+ 0000                                      ENDM
 246+ 0000
 247+ 0000              JumpIfANEMemusng:       MACRO  value, target
 248+ 0000 ~                                    ld    hl,value
 249+ 0000 ~                                    cp    (hl)
 250+ 0000 ~                                    jp      nz,target
 251+ 0000                                      ENDM
 252+ 0000
 253+ 0000              JumpIfAEqNusng:         MACRO value, target
 254+ 0000 ~                                    cp     value
 255+ 0000 ~                                    jp      z,target
 256+ 0000                                      ENDM
 257+ 0000
 258+ 0000              JumpIfAIsZero:	        MACRO target
 259+ 0000 ~                                    and     a   ; cp 0 - changed to and a for optimisation but affects other flags
 260+ 0000 ~                                    jp	    z, target
 261+ 0000                                      ENDM
 262+ 0000
 263+ 0000              JumpIfRegIsNotZero:     MACRO   reg, target
 264+ 0000 ~                                    ld      a,reg
 265+ 0000 ~                                    and     a
 266+ 0000 ~                                    jp	    nz,target
 267+ 0000                                      ENDM
 268+ 0000
 269+ 0000              JumpIfAIsNotZero:       MACRO target
 270+ 0000 ~                                    and     a
 271+ 0000 ~                                    jp	    nz,target
 272+ 0000                                      ENDM
 273+ 0000
 274+ 0000              JumpIfMemIsNotZero:     MACRO value, target
 275+ 0000 ~                                    ld      a,(value)
 276+ 0000 ~                                    and     a
 277+ 0000 ~                                    jp	    nz,target
 278+ 0000                                      ENDM
 279+ 0000              IfResultZeroGoto:	    MACRO target
 280+ 0000 ~                                    jp	z,target
 281+ 0000                                      ENDM
 282+ 0000
 283+ 0000              IfResultNotZeroGoto:    MACRO target
 284+ 0000 ~                                    jp	nz,target
 285+ 0000                                      ENDM
 286+ 0000
# file closed: ./Macros/jumpMacros.asm
  60  0000                                      INCLUDE "./Macros/MathsMacros.asm"
# file opened: ./Macros/MathsMacros.asm
   1+ 0000
   2+ 0000              ABSa2c:                 MACRO
   3+ 0000 ~                                    bit     7,a
   4+ 0000 ~                                    jp      z,.DoneABSa
   5+ 0000 ~                                    neg
   6+ 0000 ~            .DoneABSa:
   7+ 0000                                      ENDM
   8+ 0000
   9+ 0000              DEEquSquareA:           MACRO
  10+ 0000 ~                                    ld  d,a
  11+ 0000 ~                                    ld  e,a
  12+ 0000 ~                                    mul de
  13+ 0000                                      ENDM
  14+ 0000
  15+ 0000              ApplyMyRollToVector:    MACRO angle, vectorX, vectorY
  16+ 0000 ~                                    ldCopyByte angle,varQ               ; Set Q = a = alpha (the roll angle to rotate through)
  17+ 0000 ~                                    ldCopy2Byte vectorY, varR           ; RS =  nosev_y
  18+ 0000 ~                                    ldCopyByte  vectorX, varP           ; set P to nosevX lo (may be redundant)
  19+ 0000 ~                                    ld a,(vectorX+1)                    ; Set A = -nosev_x_hi
  20+ 0000 ~                                    xor $80                             ;
  21+ 0000 ~                                    call  madXAequQmulAaddRS            ; Set (A X) = Q * A + (S R) = = alpha * -nosev_x_hi + nosev_y
  22+ 0000 ~                                    ld  (vectorY),de                    ; nosev_y = nosev_y - alpha * nosev_x_hi
  23+ 0000 ~                                    ldCopy2Byte vectorX, varR           ; Set (S R) = nosev_x
  24+ 0000 ~                                    ld  a,(vectorY+1)                   ;  Set A = nosev_y_hi
  25+ 0000 ~                                    call madXAequQmulAaddRS             ; Set (A X) = Q * A + (S R)
  26+ 0000 ~                                    ld  (vectorX),de                    ; nosev_x = nosev_x + alpha * nosev_y_hi
  27+ 0000                                      ENDM
  28+ 0000
  29+ 0000              SignedHLTo2C:           MACRO
  30+ 0000 ~                                    bit     7,h
  31+ 0000 ~                                    jr      z,.Done2c
  32+ 0000 ~                                    ld      a,h
  33+ 0000 ~                                    and     SignMask8Bit
  34+ 0000 ~                                    ld      h,a
  35+ 0000 ~                                    NegHL
  36+ 0000 ~            .Done2c:
  37+ 0000                                      ENDM
  38+ 0000
  39+ 0000              MemSignedTo2C:          MACRO   memfrom
  40+ 0000 ~                                    ld      hl,(memfrom)
  41+ 0000 ~                                    bit     7,h
  42+ 0000 ~                                    jr      z,.Done2c
  43+ 0000 ~                                    ld      a,h
  44+ 0000 ~                                    and     SignMask8Bit
  45+ 0000 ~                                    ld      h,a
  46+ 0000 ~            .Done2c:                ld      (memfrom),hl
  47+ 0000                                      ENDM
  48+ 0000
  49+ 0000
  50+ 0000                  ;returns result in H
  51+ 0000              EDiv10Inline:           MACRO
  52+ 0000 ~                                    ld      d,0
  53+ 0000 ~                                    ld      hl,de
  54+ 0000 ~                                    add     hl,hl
  55+ 0000 ~                                    add     hl,de
  56+ 0000 ~                                    add     hl,hl
  57+ 0000 ~                                    add     hl,hl
  58+ 0000 ~                                    add     hl,de
  59+ 0000 ~                                    add     hl,hl
  60+ 0000                                      ENDM
  61+ 0000
  62+ 0000              cpHLDE:                 MACRO
  63+ 0000 ~                                    push    hl
  64+ 0000 ~                                    and     a
  65+ 0000 ~                                    sbc     hl,de
  66+ 0000 ~                                    pop     hl
  67+ 0000                                      ENDM
  68+ 0000
  69+ 0000              ;Unsigned
  70+ 0000              ;If HL == DE, then Z flag is set.
  71+ 0000              ;If HL != DE, then Z flag is reset.
  72+ 0000              ;If HL <  DE, then C flag is set.
  73+ 0000              ;If HL >= DE, then C flag is reset.
  74+ 0000              ;
  75+ 0000              ;Signed
  76+ 0000              ;If HL == DE, then Z flag is set.
  77+ 0000              ;If HL != DE, then Z flag is reset.
  78+ 0000              ;If HL <  DE, then S and P/V are different.
  79+ 0000              ;If HL >= DE, then S and P/V are the same.
# file closed: ./Macros/MathsMacros.asm
  61  0000                                      INCLUDE "./Macros/MMUMacros.asm"
# file opened: ./Macros/MMUMacros.asm
   1+ 0000              MMUSelectROM0:       MACRO
   2+ 0000 ~                                 nextreg EXSDOSMMU0,        BankROM
   3+ 0000                                   ENDM
   4+ 0000
   5+ 0000              MMUSelectROMS:       MACRO
   6+ 0000 ~                                 nextreg EXSDOSMMU0,        BankROM
   7+ 0000 ~                                 nextreg EXSDOSMMU1,        BankROM
   8+ 0000                                   ENDM
   9+ 0000
  10+ 0000              MMUSelectMathsTables:MACRO
  11+ 0000 ~                                 nextreg MathsTablesMMU,    BankMathsTables
  12+ 0000                                   ENDM
  13+ 0000
  14+ 0000              MMUSelectSpriteBank: MACRO
  15+ 0000 ~            					 nextreg SpritememMMU,	    BankSPRITE
  16+ 0000              					 ENDM
  17+ 0000
  18+ 0000              MMUSelectConsoleBank: MACRO
  19+ 0000 ~            					 nextreg ConsoleImageDataMMU,  BankConsole
  20+ 0000              					 ENDM
  21+ 0000
  22+ 0000              MMUSelectLayer1: 	 MACRO
  23+ 0000 ~            					 nextreg L1memMMU,		    BankLAYER1
  24+ 0000              					 ENDM
  25+ 0000
  26+ 0000              MMUSelectLayer2: 	 MACRO
  27+ 0000 ~            					 nextreg L2memMMU,		    BankLAYER2
  28+ 0000              					 ENDM
  29+ 0000
  30+ 0000              MMUSelectResetUniv:  MACRO
  31+ 0000 ~                                 nextreg ResetUniverseMMU, BankResetUniv
  32+ 0000                                   ENDM
  33+ 0000
  34+ 0000              MMUSelectShipARead:  MACRO
  35+ 0000 ~                                 add    a,BankUNIVDATA0
  36+ 0000 ~                                 nextreg ShipReadMMU,       a
  37+ 0000                                   ENDM
  38+ 0000
  39+ 0000              MMUSelectShipBank1:  MACRO
  40+ 0000 ~            					 nextreg ShipModelMMU,	    BankShipModels1
  41+ 0000              					 ENDM
  42+ 0000              MMUSelectShipBank2:  MACRO
  43+ 0000 ~            					 nextreg ShipModelMMU,	    BankShipModels2
  44+ 0000              					 ENDM
  45+ 0000              MMUSelectShipBank3:  MACRO
  46+ 0000 ~            					 nextreg ShipModelMMU,	    BankShipModels3
  47+ 0000              					 ENDM
  48+ 0000              MMUSelectShipBank4:  MACRO
  49+ 0000 ~            					 nextreg ShipModelMMU,	    BankShipModels4
  50+ 0000              					 ENDM
  51+ 0000
  52+ 0000              MMUSelectShipBankA   MACRO
  53+ 0000 ~            					 nextreg ShipModelMMU,	    a
  54+ 0000              					 ENDM
  55+ 0000
  56+ 0000              MMUSelectShipBankN:  MACRO value
  57+ 0000 ~            					 nextreg ShipModelMMU,	    value
  58+ 0000              					 ENDM
  59+ 0000
  60+ 0000              MMUSelectCommander:	 MACRO
  61+ 0000 ~                                 nextreg CommanderMMU,       BankCommander
  62+ 0000              					 ENDM
  63+ 0000
  64+ 0000              MMUSelectStockTable: MACRO
  65+ 0000 ~                                 nextreg StockTableMMU,     BankStockTable
  66+ 0000              					 ENDM
  67+ 0000
  68+ 0000              MMUSelectCpySrcA:    MACRO
  69+ 0000 ~                                 nextreg DMACpySourceMMU,	a
  70+ 0000              					 ENDM
  71+ 0000
  72+ 0000              MMUSelectCpySrcN:    MACRO value
  73+ 0000 ~                                 nextreg DMACpySourceMMU,	value
  74+ 0000              					 ENDM
  75+ 0000
  76+ 0000              MMUSelectSun:        MACRO
  77+ 0000 ~                                 nextreg SunMMU,            BankSunData
  78+ 0000                                   ENDM
  79+ 0000
  80+ 0000              MMUSelectPlanet:     MACRO
  81+ 0000 ~                                 nextreg PlanetMMU,         BankPlanetData
  82+ 0000                                   ENDM
  83+ 0000
  84+ 0000              MMUSelectUniverseA:  MACRO
  85+ 0000 ~                                 add    a,BankUNIVDATA0
  86+ 0000 ~                                 nextreg UniverseMMU,       a
  87+ 0000                                   ENDM
  88+ 0000
  89+ 0000              MMUSelectUniverseN:  MACRO value
  90+ 0000 ~                                 nextreg UniverseMMU,       BankUNIVDATA0+value
  91+ 0000                                   ENDM
  92+ 0000
  93+ 0000              MMUSelectGalaxyA:    MACRO
  94+ 0000 ~                                 nextreg GalaxyDataMMU,       a
  95+ 0000                                   ENDM
  96+ 0000
  97+ 0000              MMUSelectGalaxyN:    MACRO value
  98+ 0000 ~                                 nextreg GalaxyDataMMU,     BankGalaxyData0+value
  99+ 0000                                   ENDM
 100+ 0000              MMUSelectGalaxyACopy:MACRO
 101+ 0000 ~                                 nextreg UniverseMMU,       a
 102+ 0000                                   ENDM
 103+ 0000
 104+ 0000              MMUSelectUniverseAbs:MACRO value
 105+ 0000 ~                                 nextreg UniverseMMU,       value
 106+ 0000                                   ENDM
 107+ 0000
 108+ 0000              MMUSelectMenuGalCht: MACRO
 109+ 0000 ~                                 nextreg MenuGalChtMMU,		BankMenuGalCht
 110+ 0000              					 ENDM
 111+ 0000
 112+ 0000              MMUSelectMenuShrCht: MACRO
 113+ 0000 ~            					 nextreg MenuShrChtMMU,		BankMenuShrCht
 114+ 0000              					 ENDM
 115+ 0000
 116+ 0000              MMUSelectMenuInvent: MACRO
 117+ 0000 ~                                 nextreg MenuInventMMU,		BankMenuInvent
 118+ 0000              					 ENDM
 119+ 0000
 120+ 0000              MMUSelectMenuSystem: MACRO
 121+ 0000 ~                                 nextreg MenuSystemMMU,		BankMenuSystem
 122+ 0000              					 ENDM
 123+ 0000
 124+ 0000              MMUSelectMenuMarket: MACRO
 125+ 0000 ~                                 nextreg MenuMarketMMU,		BankMenuMarket
 126+ 0000              					 ENDM
 127+ 0000
 128+ 0000              MMUSelectMenuStatus: MACRO
 129+ 0000 ~                                 nextreg MenuStatusMMU,		BankMenuStatus
 130+ 0000              					 ENDM
 131+ 0000
 132+ 0000              MMUSelectViewFront:  MACRO
 133+ 0000 ~                                 nextreg ScreenBankMMU,		BankFrontView
 134+ 0000              					 ENDM
 135+ 0000
 136+ 0000              MMUSelectScreenA:    MACRO
 137+ 0000 ~                                 nextreg ScreenBankMMU,		a
 138+ 0000              					 ENDM
 139+ 0000
# file closed: ./Macros/MMUMacros.asm
  62  0000                                      INCLUDE "./Macros/NegateMacros.asm"
# file opened: ./Macros/NegateMacros.asm
   1+ 0000
   2+ 0000              NegIY:			    MACRO
   3+ 0000 ~                                xor a
   4+ 0000 ~                                sub iyl
   5+ 0000 ~                                ld iyl,a
   6+ 0000 ~                                sbc a,a
   7+ 0000 ~                                sub iyh
   8+ 0000 ~                                ld iyh,a
   9+ 0000                                  ENDM
  10+ 0000
  11+ 0000              NegHL:			    MACRO
  12+ 0000 ~                                xor a
  13+ 0000 ~                                sub l
  14+ 0000 ~                                ld l,a
  15+ 0000 ~                                sbc a,a
  16+ 0000 ~                                sub h
  17+ 0000 ~                                ld h,a
  18+ 0000                                  ENDM
  19+ 0000
  20+ 0000              NegDE:			    MACRO
  21+ 0000 ~                                xor a
  22+ 0000 ~                                sub e
  23+ 0000 ~                                ld e,a
  24+ 0000 ~                                sbc a,a
  25+ 0000 ~                                sub d
  26+ 0000 ~                                ld d,a
  27+ 0000                                  ENDM
  28+ 0000
  29+ 0000              NegBC:			    MACRO
  30+ 0000 ~                                xor a
  31+ 0000 ~                                sub c
  32+ 0000 ~                                ld c,a
  33+ 0000 ~                                sbc a,a
  34+ 0000 ~                                sub  b
  35+ 0000 ~                                ld b,a
  36+ 0000                                  ENDM
  37+ 0000
  38+ 0000              NegH                MACRO
  39+ 0000 ~                                ld      a,h
  40+ 0000 ~                                neg
  41+ 0000 ~                                ld      h,a
  42+ 0000                                  ENDM
  43+ 0000
  44+ 0000              NegD                MACRO
  45+ 0000 ~                                ld      a,d
  46+ 0000 ~                                neg
  47+ 0000 ~                                ld      d,a
  48+ 0000                                  ENDM
  49+ 0000
  50+ 0000              NegB                MACRO
  51+ 0000 ~                                ld      a,b
  52+ 0000 ~                                neg
  53+ 0000 ~                                ld      b,a
  54+ 0000                                  ENDM
  55+ 0000
# file closed: ./Macros/NegateMacros.asm
  63  0000                                      INCLUDE "./Macros/returnMacros.asm"
# file opened: ./Macros/returnMacros.asm
   1+ 0000              ReturnOnBitSet:         MACRO  reg, bitnbr,
   2+ 0000 ~                                    bit 	bitnbr,reg
   3+ 0000 ~                                    ret     nz
   4+ 0000                                      ENDM
   5+ 0000
   6+ 0000              ReturnOnMemBitSet:      MACRO mem, bitnbr
   7+ 0000 ~                                    ld   a,(mem)
   8+ 0000 ~                                    bit 	bitnbr,a
   9+ 0000 ~                                    ret     nz
  10+ 0000                                      ENDM
  11+ 0000
  12+ 0000              ReturnOnBitClear:       MACRO reg, bitnbr
  13+ 0000 ~                                    bit 	bitnbr,reg
  14+ 0000 ~                                    ret		z
  15+ 0000                                      ENDM
  16+ 0000
  17+ 0000              ReturnOnMemBitClear:    MACRO mem, bitnbr
  18+ 0000 ~                                    ld     a,(mem)
  19+ 0000 ~                                    bit 	bitnbr,a
  20+ 0000 ~                                    ret		z
  21+ 0000                                      ENDM
  22+ 0000
  23+ 0000              ReturnIfMemFalse:       MACRO   mem
  24+ 0000 ~                                    ld      a,(mem)
  25+ 0000 ~                                    and     a
  26+ 0000 ~                                    ret     nz
  27+ 0000                                      ENDM
  28+ 0000
  29+ 0000              ReturnIfMemTrue:        MACRO   mem
  30+ 0000 ~                                    ld      a,(mem)
  31+ 0000 ~                                    and     a
  32+ 0000 ~                                    ret     z
  33+ 0000                                      ENDM
  34+ 0000
  35+ 0000              ReturnIfAIsZero:        MACRO
  36+ 0000 ~                                    and     a
  37+ 0000 ~                                    ret     z
  38+ 0000                                      ENDM
  39+ 0000
  40+ 0000              ReturnIfMemisZero:      MACRO mem
  41+ 0000 ~                                    ld   a,(mem)
  42+ 0000 ~                                    and a
  43+ 0000 ~                                    ret    z
  44+ 0000                                      ENDM
  45+ 0000
  46+ 0000              ReturnIfMemIsNegative:  MACRO mem
  47+ 0000 ~                                    ld      a,(mem)
  48+ 0000 ~                                    and     $80
  49+ 0000 ~                                    ret     nz
  50+ 0000                                      ENDM
  51+ 0000
  52+ 0000              ReturnIfBitMaskClear    MACRO   bitmask
  53+ 0000 ~                                    and     bitmask
  54+ 0000 ~                                    ret     z
  55+ 0000                                      ENDM
  56+ 0000
  57+ 0000              ReturnIfBitMaskSet      MACRO   bitmask
  58+ 0000 ~                                    and     bitmask
  59+ 0000 ~                                    ret     nz
  60+ 0000                                      ENDM
  61+ 0000
  62+ 0000              ReturnIfMemEquN:        MACRO mem, value
  63+ 0000 ~                                    ld     a,(mem)
  64+ 0000 ~                                    cp     value
  65+ 0000 ~                                    ret    nz
  66+ 0000                                      ENDM
  67+ 0000
  68+ 0000              ReturnIfMemNeNusng:     MACRO mem, value
  69+ 0000 ~                                    ld   a,(mem)
  70+ 0000 ~                                    cp     value
  71+ 0000 ~                                    ret    z
  72+ 0000                                      ENDM
  73+ 0000
  74+ 0000              ReturnIfRegNotZero:     MACRO reg
  75+ 0000 ~                                    ld      a, reg
  76+ 0000 ~                                    and     a
  77+ 0000 ~                                    ret     nz
  78+ 0000                                      ENDM
  79+ 0000
  80+ 0000              ReturnIfANotZero:       MACRO
  81+ 0000 ~                                    and     a
  82+ 0000 ~                                    ret     nz
  83+ 0000                                      ENDM
  84+ 0000
  85+ 0000              ReturnIfNotZero:        MACRO
  86+ 0000 ~                                    ret     nz
  87+ 0000                                      ENDM
  88+ 0000
  89+ 0000
  90+ 0000              ReturnIfNegative:       MACRO
  91+ 0000 ~                                    ret     m
  92+ 0000                                      ENDM
  93+ 0000
  94+ 0000
  95+ 0000              ReturnIfMemNotZero:     MACRO mem
  96+ 0000 ~                                    ld     a,(mem)
  97+ 0000 ~                                    and     a
  98+ 0000 ~                                    ret    nz
  99+ 0000                                      ENDM
 100+ 0000
 101+ 0000              ReturnIfAGTEusng:       MACRO value
 102+ 0000 ~                                    cp    value
 103+ 0000 ~                                    ret	 nc
 104+ 0000                                      ENDM
 105+ 0000
 106+ 0000              ReturnIfRegLTNusng:     MACRO reg, value
 107+ 0000 ~                                    ld      a,reg
 108+ 0000 ~                                    cp      value
 109+ 0000 ~                                    ret	    c
 110+ 0000                                      ENDM
 111+ 0000
 112+ 0000              ReturnIfALTNusng:       MACRO value
 113+ 0000 ~                                    cp    value
 114+ 0000 ~                                    ret	 c
 115+ 0000                                      ENDM
 116+ 0000
 117+ 0000              ReturnIfAGTENusng:      MACRO value
 118+ 0000 ~                                    cp    value
 119+ 0000 ~                                    ret	 nc
 120+ 0000                                      ENDM
 121+ 0000
 122+ 0000              ReturnIfAGTEMemusng:    MACRO value
 123+ 0000 ~                                    ld      hl,value
 124+ 0000 ~                                    cp      (hl)
 125+ 0000 ~                                    ret	    nc
 126+ 0000                                      ENDM
 127+ 0000
 128+ 0000              ReturnIfANENusng:       MACRO value
 129+ 0000 ~                                    cp      value
 130+ 0000 ~                                    ret     nz
 131+ 0000                                      ENDM
 132+ 0000
 133+ 0000              ReturnIfAEqNusng:       MACRO value
 134+ 0000 ~                                    cp      value
 135+ 0000 ~                                    ret     z
 136+ 0000                                      ENDM
 137+ 0000
# file closed: ./Macros/returnMacros.asm
  64  0000                                      INCLUDE "./Macros/ShiftMacros.asm"
# file opened: ./Macros/ShiftMacros.asm
   1+ 0000              ShiftIYRight1: MACRO
   2+ 0000 ~            			   ld 	a,iyh
   3+ 0000 ~            			   srl 	a
   4+ 0000 ~            			   ld	iyh,a
   5+ 0000 ~            			   ld 	a,iyl
   6+ 0000 ~            			   rra
   7+ 0000 ~            			   ld	iyl,a
   8+ 0000              			   ENDM
   9+ 0000
  10+ 0000              ShiftHLRight1: MACRO
  11+ 0000 ~            			   srl h
  12+ 0000 ~            			   rr  l
  13+ 0000              			   ENDM
  14+ 0000
  15+ 0000              ShiftDERight1: MACRO
  16+ 0000 ~            			   srl d
  17+ 0000 ~            			   rr  e
  18+ 0000              			   ENDM
  19+ 0000
  20+ 0000              ShiftBCRight1: MACRO
  21+ 0000 ~            			   srl b
  22+ 0000 ~            			   rr  c
  23+ 0000              			   ENDM
  24+ 0000
  25+ 0000
  26+ 0000
  27+ 0000              ShiftHLDiv8:   MACRO
  28+ 0000 ~            			   srl h
  29+ 0000 ~            			   rr  l
  30+ 0000 ~            			   srl h
  31+ 0000 ~            			   rr  l
  32+ 0000 ~            			   srl h
  33+ 0000 ~            			   rr  l
  34+ 0000              			   ENDM
  35+ 0000
  36+ 0000              ShiftHLLeft1:  MACRO
  37+ 0000 ~            			   sla l
  38+ 0000 ~            			   rl  h
  39+ 0000              			   ENDM
  40+ 0000
  41+ 0000              ShiftDELeft1:  MACRO
  42+ 0000 ~            			   sla e
  43+ 0000 ~            			   rl  d
  44+ 0000              			   ENDM
  45+ 0000
  46+ 0000
  47+ 0000              RollDELeft1:   MACRO
  48+ 0000 ~                           rl  e
  49+ 0000 ~                           rl  d
  50+ 0000                             ENDM
  51+ 0000
  52+ 0000              ShiftBCLeft1:  MACRO
  53+ 0000 ~            			   sla c
  54+ 0000 ~            			   rl  b
  55+ 0000              			   ENDM
  56+ 0000
  57+ 0000
  58+ 0000              ShiftMem16Right1:   MACRO memaddr
  59+ 0000 ~                                ld    hl,(memaddr)
  60+ 0000 ~                                srl   h
  61+ 0000 ~                                rr    l
  62+ 0000 ~                                ld    (memaddr),hl
  63+ 0000                                  ENDM
  64+ 0000
  65+ 0000              ShiftMem8Right1:    MACRO memaddr
  66+ 0000 ~                                ld      a,(memaddr)
  67+ 0000 ~                                srl     a
  68+ 0000 ~                                ld      (memaddr),a
  69+ 0000                                  ENDM
  70+ 0000
  71+ 0000
  72+ 0000              ShiftMem8Left1A:    MACRO memaddr
  73+ 0000 ~                                ld      a,(memaddr)
  74+ 0000 ~                                sla     a
  75+ 0000 ~                                ld      (memaddr),a
  76+ 0000                                  ENDM
  77+ 0000
# file closed: ./Macros/ShiftMacros.asm
  65  0000                                      INCLUDE "./Macros/signBitMacros.asm"
# file opened: ./Macros/signBitMacros.asm
   1+ 0000              SetMemBitN              MACRO mem,bitnbr
   2+ 0000 ~                                    ld      hl,mem
   3+ 0000 ~                                    set     bitnbr,(hl)
   4+ 0000                                      ENDM
   5+ 0000
   6+ 0000              ClearMemBitN            MACRO mem,bitnbr
   7+ 0000 ~                                    ld      hl,mem
   8+ 0000 ~                                    res     bitnbr,(hl)
   9+ 0000                                      ENDM
  10+ 0000
  11+ 0000
  12+ 0000              ClearSignBitMem:        MACRO mem
  13+ 0000 ~                                    ld      a,(mem)
  14+ 0000 ~                                    and     SignMask8Bit
  15+ 0000 ~                                    ld      (mem),a
  16+ 0000                                      ENDM
  17+ 0000
  18+ 0000              SetSignBitMem:          MACRO   mem
  19+ 0000 ~                                    ld      a,(mem)
  20+ 0000 ~                                    or      SignOnly8Bit
  21+ 0000 ~                                    ld      (mem),a
  22+ 0000                                      ENDM
  23+ 0000
  24+ 0000              FlipSignMem:            MACRO mem
  25+ 0000 ~                                    ld  a,(mem)
  26+ 0000 ~                                    xor SignOnly8Bit
  27+ 0000 ~                                    ld  (mem),a
  28+ 0000                                      ENDM
  29+ 0000
  30+ 0000              SignBitOnlyMem:         MACRO mem
  31+ 0000 ~                                    ld      a
  32+ 0000 ~                                    and     SignOnly8Bit
  33+ 0000 ~                                    ld      (mem),a
  34+ 0000                                      ENDM
  35+ 0000
  36+ 0000              ClearSignBit:           MACRO reg
  37+ 0000 ~                                    ld      a,reg
  38+ 0000 ~                                    and     SignMask8Bit
  39+ 0000 ~                                    ld      reg,a
  40+ 0000                                      ENDM
  41+ 0000
  42+ 0000              SetSignBit:             MACRO   reg
  43+ 0000 ~                                    ld      a,reg
  44+ 0000 ~                                    or      SignOnly8Bit
  45+ 0000 ~                                    ld      reg,a
  46+ 0000                                      ENDM
  47+ 0000
  48+ 0000              FlipSignBit:            MACRO   reg
  49+ 0000 ~                                    ld      a, reg
  50+ 0000 ~                                    xor     SignOnly8Bit
  51+ 0000 ~                                    ld      reg,a
  52+ 0000                                      ENDM
  53+ 0000
  54+ 0000              SignBitOnly:            MACRO   reg
  55+ 0000 ~                                    ld      a, reg
  56+ 0000 ~                                    and     SignOnly8Bit
  57+ 0000 ~                                    ld      reg,a
  58+ 0000                                      ENDM
  59+ 0000
  60+ 0000              ClearSignBitA:          MACRO
  61+ 0000 ~                                    and     SignMask8Bit
  62+ 0000                                      ENDM
  63+ 0000
  64+ 0000              SetSignBitA:            MACRO
  65+ 0000 ~                                    or      SignOnly8Bit
  66+ 0000                                      ENDM
  67+ 0000
  68+ 0000              FlipSignBitA:           MACRO
  69+ 0000 ~                                    xor     SignOnly8Bit
  70+ 0000                                      ENDM
  71+ 0000
  72+ 0000              SignBitOnlyA:           MACRO
  73+ 0000 ~                                    and     SignOnly8Bit
  74+ 0000                                      ENDM
# file closed: ./Macros/signBitMacros.asm
  66  0000                                      INCLUDE "./Tables/message_queue_macros.asm"
# file opened: ./Tables/message_queue_macros.asm
   1+ 0000
   2+ 0000              AnyMessagesMacro:       MACRO   NoMessageTarget
   3+ 0000 ~                                    ld      a, (MessageCount)
   4+ 0000 ~                                    and     a
   5+ 0000 ~                                    jr      z, NoMessageTarget
   6+ 0000                                      ENDM
   7+ 0000
   8+ 0000              AnyHyperSpaceMacro:     MACRO   NoMessageText
   9+ 0000 ~                                    ld      hl,(InnerHyperCount)
  10+ 0000 ~                                    ld      a,h
  11+ 0000 ~                                    or      l
  12+ 0000 ~                                    jr      z, NoMessageText
  13+ 0000                                      ENDM
  14+ 0000
# file closed: ./Tables/message_queue_macros.asm
  67  0000                                      INCLUDE "./Variables/general_variables_macros.asm"
# file opened: ./Variables/general_variables_macros.asm
   1+ 0000              ; limited to 255 character length
   2+ 0000              CountLengthHL:          MACRO   Limiter
   3+ 0000 ~                                    ld      de,hl
   4+ 0000 ~                                    ld      bc,Limiter
   5+ 0000 ~                                    xor     a
   6+ 0000 ~                                    cpir
   7+ 0000 ~                                    ClearCarryFlag
   8+ 0000 ~                                    sbc     hl,de
   9+ 0000 ~                                    ld      a,l
  10+ 0000 ~                                    ret
  11+ 0000                                      ENDM
  12+ 0000
  13+ 0000              HalfLengthHL:           MACRO
  14+ 0000 ~                                    ld      b,0
  15+ 0000 ~            .CountLenLoop:          ld      a,(hl)
  16+ 0000 ~                                    cp      0
  17+ 0000 ~                                    jr      z,.DoneCount
  18+ 0000 ~                                    inc     b
  19+ 0000 ~                                    inc     hl
  20+ 0000 ~                                    jr      .CountLenLoop
  21+ 0000 ~            .DoneCount:             ld      a,32
  22+ 0000 ~                                    sub     b
  23+ 0000 ~                                    sra     a
  24+ 0000                                      ENDM
  25+ 0000
  26+ 0000              MakeInnocentMacro:		MACRO
  27+ 0000 ~            						xor		a
  28+ 0000 ~            						ld		(FugitiveInnocentStatus),a
  29+ 0000              						ENDM
  30+ 0000
  31+ 0000              NoEscapePodMacro:		MACRO
  32+ 0000 ~            						xor		a
  33+ 0000 ~            						ld		(EscapePod),a
  34+ 0000              						ENDM
  35+ 0000
  36+ 0000              MaxFuelLevel            EQU     70              ; 7.0 light years max
  37+ 0000              MaxFuelMacro:			MACRO
  38+ 0000 ~            						ld		a,MaxFuelLevel
  39+ 0000 ~            						ld		(Fuel),a
  40+ 0000              						ENDM
  41+ 0000
  42+ 0000              MaxThrottle:            MACRO
  43+ 0000 ~                                    ld      a,(SHIPMAXSPEED)
  44+ 0000 ~                                    ld      (DELTA),a
  45+ 0000 ~                                    ld      d,a
  46+ 0000 ~                                    ld      e,4
  47+ 0000 ~                                    mul
  48+ 0000 ~                                    ld      (DELT4Lo),de
  49+ 0000                                      ENDM
  50+ 0000
  51+ 0000              ZeroThrottle:           MACRO
  52+ 0000 ~                                    xor     a
  53+ 0000 ~                                    ld      (DELTA),a
  54+ 0000 ~                                    ld      (DELT4Lo),a
  55+ 0000 ~                                    ld      (DELT4Lo+1),a
  56+ 0000                                      ENDM
  57+ 0000
  58+ 0000              ZeroPitch:              MACRO
  59+ 0000 ~                                    xor     a
  60+ 0000 ~                                    ld      (BET2),a
  61+ 0000 ~                                    ld      (BET2FLIP),a
  62+ 0000 ~                                    ld      (JSTY),a
  63+ 0000 ~                                    ld      (BETA),a
  64+ 0000                                      ENDM
  65+ 0000
  66+ 0000              ZeroRoll:               MACRO
  67+ 0000 ~                                    xor     a                              ; zero roll and climb
  68+ 0000 ~                                    ld      (ALP2),a
  69+ 0000 ~                                    ld      (ALP2FLIP),a
  70+ 0000 ~                                    ld      (JSTX),a
  71+ 0000 ~                                    ld      (ALPHA),a
  72+ 0000                                      ENDM
  73+ 0000
  74+ 0000              CorrectPostJumpFuel:    MACRO
  75+ 0000 ~                                    ld      a,(Fuel)
  76+ 0000 ~                                    ld      hl,Distance
  77+ 0000 ~                                    sub     a,(hl)
  78+ 0000 ~                                    ld      (Fuel),a
  79+ 0000                                      ENDM
  80+ 0000
  81+ 0000              AnyMissilesLeft:        MACRO
  82+ 0000 ~                                    ld      a,(NbrMissiles)
  83+ 0000 ~                                    and     a
  84+ 0000                                      ENDM
  85+ 0000
  86+ 0000              SetMissileTargetA:      MACRO
  87+ 0000 ~                                    ld      (MissileTargettingFlag),a   ; Set to slot number clearing bit 7
  88+ 0000                                      ENDM
  89+ 0000
  90+ 0000              ClearMissileTarget:     MACRO
  91+ 0000 ~                                    ld      a,StageMissileNoTarget
  92+ 0000 ~                                    ld      (MissileTargettingFlag),a           ; reset targetting
  93+ 0000                                      ENDM
  94+ 0000
  95+ 0000              ; Clear targetting bits which signals launch if lower nibble has selected target
  96+ 0000              SetMissileLaunch:       MACRO
  97+ 0000 ~                                    ld      a,(MissileTargettingFlag)
  98+ 0000 ~                                    and     $0F
  99+ 0000 ~                                    ld      (MissileTargettingFlag),a
 100+ 0000                                      ENDM
 101+ 0000
 102+ 0000              LockMissileToA:         MACRO
 103+ 0000 ~                                    or      $80
 104+ 0000 ~                                    ld      (MissileTargettingFlag),a
 105+ 0000                                      ENDM
 106+ 0000
 107+ 0000              ClearECM:               MACRO
 108+ 0000 ~                                    xor     a
 109+ 0000 ~                                    ld      (ECMCountDown),a
 110+ 0000                                      ENDM
 111+ 0000
 112+ 0000              ChargeEnergyAndShields: MACRO
 113+ 0000 ~                                    ld      a,$FF
 114+ 0000 ~                                    ld      (PlayerEnergy),a
 115+ 0000 ~                                    ld      (ForeShield),a
 116+ 0000 ~                                    ld      (AftShield),a
 117+ 0000                                      ENDM
 118+ 0000
 119+ 0000              CopyPresentSystemToTarget: MACRO
 120+ 0000 ~                                    ld      hl,(PresentSystemX)
 121+ 0000 ~                                    ld      (TargetSystemX),hl
 122+ 0000                                      ENDM
 123+ 0000
 124+ 0000              CopyTargetSystemToPresent: MACRO
 125+ 0000 ~                                    ld      hl,(TargetSystemX)
 126+ 0000 ~                                    ld      (PresentSystemX),hl
 127+ 0000                                      ENDM
 128+ 0000
 129+ 0000              HalveFugitiveStatus:    MACRO
 130+ 0000 ~                                    ld      hl,FugitiveInnocentStatus
 131+ 0000 ~                                    srl     (hl)
 132+ 0000                                      ENDM
 133+ 0000
 134+ 0000              ClearForceTransition    MACRO
 135+ 0000 ~                                    ld      a,$FF
 136+ 0000 ~                                    ld      (ScreenTransitionForced),a
 137+ 0000                                      ENDM
 138+ 0000
 139+ 0000              ForceTransition:        MACRO newScreen
 140+ 0000 ~                                    ld      a,newScreen
 141+ 0000 ~                                    ld      (ScreenTransitionForced), a
 142+ 0000                                      ENDM
 143+ 0000
 144+ 0000              IsSpaceStationPresent:  MACRO
 145+ 0000 ~                                    ld      a,(SpaceStationSafeZone)
 146+ 0000 ~                                    and     a
 147+ 0000                                      ENDM
 148+ 0000
 149+ 0000              SetSafeZone:            MACRO
 150+ 0000 ~                                    xor     a
 151+ 0000 ~                                    ld      (SpaceStationSafeZone),a
 152+ 0000                                      ENDM
 153+ 0000
 154+ 0000              ClearSafeZone:          MACRO
 155+ 0000 ~                                    ld      a,$FF
 156+ 0000 ~                                    ld      (SpaceStationSafeZone),a
 157+ 0000                                      ENDM
 158+ 0000
 159+ 0000              ClearTemperatures:      MACRO
 160+ 0000 ~                                    xor     a
 161+ 0000 ~                                    ld      (CabinTemperature),a
 162+ 0000 ~                                    ld      (GunTemperature),a
 163+ 0000                                      ENDM
 164+ 0000
 165+ 0000              CoolCabin:              MACRO
 166+ 0000 ~                                    ld      a,(CabinTemperature)
 167+ 0000 ~                                    and     a
 168+ 0000 ~                                    jr      z,.AlreadyCool
 169+ 0000 ~                                    dec     a
 170+ 0000 ~                                    ld      (CabinTemperature),a
 171+ 0000 ~            .AlreadyCool:
 172+ 0000                                      ENDM
 173+ 0000
 174+ 0000              CoolLasers:             MACRO
 175+ 0000 ~                                    ld      a,(GunTemperature)
 176+ 0000 ~                                    and     a
 177+ 0000 ~                                    jr      z,.AlreadyCool
 178+ 0000 ~                                    dec     a
 179+ 0000 ~                                    ld      (GunTemperature),a
 180+ 0000 ~            .AlreadyCool:
 181+ 0000                                      ENDM
 182+ 0000
 183+ 0000              ; type 255 is "not fitted"
 184+ 0000
 185+ 0000
 186+ 0000              InitEventCounter:       MACRO
 187+ 0000 ~                                    xor     a
 188+ 0000 ~                                    ld      (EventCounter),a
 189+ 0000                                      ENDM
 190+ 0000
 191+ 0000              ClearMissJump:          MACRO
 192+ 0000 ~                                    ld      a,$FF
 193+ 0000 ~                                    ld      (MissJumpFlag),a
 194+ 0000                                      ENDM
 195+ 0000
 196+ 0000
 197+ 0000              DrainSystem:            MACRO   SystemMem, DrainMem
 198+ 0000 ~                                    ld      a,(DrainMem)
 199+ 0000 ~                                    ld      b,a
 200+ 0000 ~                                    ld      a,(SystemMem)
 201+ 0000 ~                                    sub     a,b
 202+ 0000 ~                                    ld      (SystemMem),a
 203+ 0000 ~                                    jr      c,.ZeroSystem
 204+ 0000 ~                                    jp      .ExitPoint
 205+ 0000 ~            .ZeroSystem:            ZeroA
 206+ 0000 ~                                    ld      (SystemMem),a
 207+ 0000 ~            .ExitPoint
 208+ 0000                                      ENDM
 209+ 0000
 210+ 0000              BoostSystem:            MACRO   SystemMem, BoostMem
 211+ 0000 ~                                    ld      a,(BoostMem)
 212+ 0000 ~                                    ld      b,a
 213+ 0000 ~                                    ld      a,(SystemMem)
 214+ 0000 ~                                    add     b
 215+ 0000 ~                                    ld      (SystemMem),a
 216+ 0000 ~                                    jr      c, .MaxSystem
 217+ 0000 ~                                    jp      .ExitPoint
 218+ 0000 ~            .MaxSystem:             ld      a,255
 219+ 0000 ~                                    ld      (SystemMem),a
 220+ 0000 ~            .ExitPoint
 221+ 0000                                      ENDM
 222+ 0000
# file closed: ./Variables/general_variables_macros.asm
  68  0000                                      INCLUDE "./Variables/UniverseSlot_macros.asm"
# file opened: ./Variables/UniverseSlot_macros.asm
   1+ 0000
   2+ 0000              AddJunkCount:           MACRO
   3+ 0000 ~                                    ld      hl,JunkCount
   4+ 0000 ~                                    inc     (hl)
   5+ 0000                                      ENDM
   6+ 0000
   7+ 0000              SubJunkCount:           MACRO
   8+ 0000 ~                                    ld      hl,JunkCount
   9+ 0000 ~                                    dec     (hl)
  10+ 0000                                      ENDM
  11+ 0000
  12+ 0000              AddCop:                 MACRO
  13+ 0000 ~                                    ld      hl,CopCount
  14+ 0000 ~                                    inc     (hl)
  15+ 0000                                      ENDM
  16+ 0000
  17+ 0000              SubCop:                 MACRO
  18+ 0000 ~                                    ld      hl,CopCount
  19+ 0000 ~                                    dec     (hl)
  20+ 0000                                      ENDM
  21+ 0000
  22+ 0000              AddPirateCount:         MACRO
  23+ 0000 ~                                    ld      hl,PirateCount
  24+ 0000 ~                                    inc     (hl)
  25+ 0000                                      ENDM
  26+ 0000
  27+ 0000              SubPirateCount:         MACRO
  28+ 0000 ~                                    ld      hl,PirateCount
  29+ 0000 ~                                    inc     (hl)
  30+ 0000                                      ENDM
  31+ 0000
  32+ 0000              AreCopsPresent:         MACRO
  33+ 0000 ~                                    ld      a,(CopCount)
  34+ 0000 ~                                    and     a
  35+ 0000                                      ENDM
  36+ 0000
  37+ 0000              TestRoomForJunk:        MACRO   Target
  38+ 0000 ~                                    ld      a,3
  39+ 0000 ~                                    JumpIfALTMemusng    JunkCount, Target
  40+ 0000                                      ENDM
  41+ 0000
  42+ 0000              JumpIfSpaceStation:     MACRO   Target
  43+ 0000 ~                                    ld      hl,UniverseSlotType
  44+ 0000 ~                                    ld      a,(hl)
  45+ 0000 ~                                    cp      ShipTypeStation
  46+ 0000                                      ENDM
  47+ 0000
  48+ 0000              ClearSlotMem:           MACRO   mem
  49+ 0000 ~                                    ld      a,(mem)
  50+ 0000 ~                                    call    ClearSlotA
  51+ 0000                                      ENDM
  52+ 0000
  53+ 0000              IsSlotEmpty:            MACRO
  54+ 0000 ~                                    ld      hl,UniverseSlotList
  55+ 0000 ~                                    add     hl,a
  56+ 0000 ~                                    ld      a,(hl)
  57+ 0000 ~                                    cp      0
  58+ 0000                                      ENDM
  59+ 0000
  60+ 0000
  61+ 0000              ; Checks if slot is empty else A = ship type
  62+ 0000              ReturnIfSlotAEmpty:     MACRO
  63+ 0000 ~                                    ld      hl,UniverseSlotList
  64+ 0000 ~                                    add     hl,a
  65+ 0000 ~                                    ld      a,(hl)
  66+ 0000 ~                                    inc     a
  67+ 0000 ~                                    ret     z           ; if slot was ff inc would make it 0
  68+ 0000 ~                                    dec     a           ; get original value back for later
  69+ 0000                                      ENDM
  70+ 0000
  71+ 0000              JumpIfSlotAEmpty:       MACRO   Target
  72+ 0000 ~                                    ld      hl,UniverseSlotList
  73+ 0000 ~                                    add     hl,a
  74+ 0000 ~                                    ld      a,(hl)
  75+ 0000 ~                                    inc     a
  76+ 0000 ~                                    jp      z,Target    ; if slot was ff inc would make it 0
  77+ 0000 ~                                    dec     a           ; get original value back for later
  78+ 0000                                      ENDM
  79+ 0000
  80+ 0000              JumpIfSlotHLEmpty:      MACRO   Target
  81+ 0000 ~                                    ld      a,(hl)
  82+ 0000 ~                                    and     a
  83+ 0000 ~                                    jr      nz,Target
  84+ 0000                                      ENDM
# file closed: ./Variables/UniverseSlot_macros.asm
  69  0000
  70  0000                                      INCLUDE "./Data/ShipIdEquates.asm"
# file opened: ./Data/ShipIdEquates.asm
   1+ 0000              ShipID_Adder            EQU 00
   2+ 0000              ShipID_Anaconda         EQU 01
   3+ 0000              ShipID_Asp_Mk_2         EQU 02
   4+ 0000              ShipID_Boa              EQU 03
   5+ 0000              ShipID_CargoType5       EQU 04
   6+ 0000              ShipID_Boulder          EQU 05
   7+ 0000              ShipID_Asteroid         EQU 06
   8+ 0000              ShipID_Bushmaster       EQU 07
   9+ 0000              ShipID_Chameleon        EQU 08
  10+ 0000              ShipID_CobraMk3         EQU 09
  11+ 0000              ShipID_Cobra_Mk_1       EQU 10
  12+ 0000              ShipID_Cobra_Mk_3_P     EQU 11
  13+ 0000              ShipID_Constrictor      EQU 12
  14+ 0000              ShipID_Coriolis         EQU 13
  15+ 0000              ShipID_Cougar           EQU 14
  16+ 0000              ShipID_Dodo             EQU 15
  17+ 0000              ShipID_Dragon           EQU 16
  18+ 0000              ShipID_Escape_Pod       EQU 17
  19+ 0000              ShipID_Fer_De_Lance     EQU 18
  20+ 0000              ShipID_Gecko            EQU 19
  21+ 0000              ShipID_Ghavial          EQU 20
  22+ 0000              ShipID_Iguana           EQU 21
  23+ 0000              ShipID_Krait            EQU 22
  24+ 0000              ShipID_Logo             EQU 23
  25+ 0000              ShipID_Mamba            EQU 24
  26+ 0000              ShipID_Missile          EQU 25
  27+ 0000              ShipID_Monitor          EQU 26
  28+ 0000              ShipID_Moray            EQU 27
  29+ 0000              ShipID_Ophidian         EQU 28
  30+ 0000              ShipID_Plate            EQU 29
  31+ 0000              ShipID_Python           EQU 30
  32+ 0000              ShipID_Python_P         EQU 31
  33+ 0000              ShipID_Rock_Hermit      EQU 32
  34+ 0000              ShipID_ShuttleType9     EQU 33
  35+ 0000              ShipID_Shuttle_Mk_2     EQU 34
  36+ 0000              ShipID_Sidewinder       EQU 35
  37+ 0000              ShipID_Splinter         EQU 36
  38+ 0000              ShipID_TestVector       EQU 37
  39+ 0000              ShipID_Thargoid         EQU 38
  40+ 0000              ShipID_Thargon          EQU 39
  41+ 0000              ShipID_TransportType10  EQU 40
  42+ 0000              ShipID_Viper            EQU 41
  43+ 0000              ShipID_Worm             EQU 42
  44+ 0000              ShipID_Rattler          EQU 43
  45+ 0000
# file closed: ./Data/ShipIdEquates.asm
  71  0000
  72  0000              InputMainMacro:         MACRO
  73  0000 ~                                    call    ViewKeyTest
  74  0000 ~                                    call    TestPauseMode
  75  0000 ~                                    ld      a,(GamePaused)
  76  0000 ~                                    cp      0
  77  0000 ~                                    jr      nz,MainLoop
  78  0000 ~                                    call    MovementKeyTest
  79  0000                                      ENDM
  80  0000
  81  0000              DecrementIfPossible:    MACRO   memaddr,notpossjp
  82  0000 ~                                    JumpIfMemZero memaddr, notpossjp
  83  0000 ~                                    dec     a
  84  0000 ~                                    ld      (memaddr),a
  85  0000                                      ENDM
  86  0000
  87  0000              UpdateOnCounter:        MACRO
  88  0000 ~                                    DecrementIfPossible  CurrLaserPulseOnCount, .UpdateOnDone
  89  0000 ~                                    JumpIfAIsNotZero     .UpdateOnDone
  90  0000 ~                                    ldCopyByte CurrLaserPulseOffTime, CurrLaserPulseOffCount
  91  0000 ~            .UpdateOnDone:
  92  0000                                      ENDM
  93  0000
  94  0000              UpdateOffCounter:       MACRO
  95  0000 ~                                    DecrementIfPossible  CurrLaserPulseOffCount,  .UpdateOffDone
  96  0000 ~                                    JumpIfAIsNotZero     .UpdateOffDone
  97  0000 ~                                    JumpIfMemNeMemusng   CurrLaserPulseRate, CurrLaserPulseRateCount, .UpdateOffDone
  98  0000 ~                                    ldCopyByte CurrLaserPulseRest, CurrLaserPulseRestCount
  99  0000 ~            .UpdateOffDone:
 100  0000                                      ENDM
 101  0000
 102  0000              UpdateRestCounter:      MACRO
 103  0000 ~                                    DecrementIfPossible CurrLaserPulseRestCount, .UpdateRestDone                     ; if pulse rest > 0 then  pulse rest --
 104  0000 ~            .DonePulseRest:         JumpIfMemNotZero CurrLaserPulseRestCount, .UpdateRestDone                        ; if pulse rest = 0
 105  0000 ~            .ResetRate:             ZeroA                                                                           ;    then pulse rate count = 0
 106  0000 ~                                    ld      (CurrLaserPulseRateCount),a                                             ;    .
 107  0000 ~            .UpdateRestDone
 108  0000                                      ENDM
 109  0000
 110  0000
 111  0000              UpdateLaserCounters:    MACRO
 112  0000 ~
 113  0000 ~                                    UpdateOnCounter
 114  0000 ~                                    UpdateOffCounter
 115  0000 ~                                    UpdateRestCounter
 116  0000                                      ENDM
 117  0000
 118  0000              UpdateLaserCountersold: MACRO
 119  0000 ~                                    JumpIfMemZero CurrLaserPulseOnCount,   .SkipPulseOn     ; if beam on count > 0 then beam on count --
 120  0000 ~                                    dec     a                                               ; .
 121  0000 ~                                    ld      (CurrLaserPulseOnCount),a                       ; .
 122  0000 ~            .SkipPulseOn:           JumpIfAIsNotZero  .SkipRestCounter                      ;    if beam on = 0 then
 123  0000 ~                                    ld      a,(CurrLaserPulseOffCount)                      ;       if beam off > 0 then  beam off --
 124  0000 ~                                    JumpIfMemZero CurrLaserPulseOffCount, .SkipPulseOff     ;       .
 125  0000 ~                                    dec     a                                               ;       .
 126  0000 ~                                    ld      (CurrLaserPulseOffCount),a                      ;       .
 127  0000 ~            .SkipPulseOff:          JumpIfAIsNotZero  .SkipRestCounter                      ;       if beam off = 0
 128  0000 ~                                    JumpIfMemZero CurrLaserPulseRestCount, .ZeroRateCounter ;
 129  0000 ~                                    dec     a
 130  0000 ~                                    ld      (CurrLaserPulseRestCount),a
 131  0000 ~                                    jr      nz,.SkipRestCounter
 132  0000 ~            .ZeroRateCounter:       ld      (CurrLaserPulseRateCount),a
 133  0000 ~            .SkipRestCounter:
 134  0000                                      ENDM
 135  0000
 136  0000
 137  0000              charactersetaddr		equ 15360
 138  0000              STEPDEBUG               equ 1
 139  0000
 140  0000              TopOfStack              equ $7F00
 141  0000
 142  0000                                      ORG         $8000
 143  8000 F3           EliteNextStartup:       di
 144  8001                                      DISPLAY "Starting Assembly At ", EliteNextStartup
 145  8001                                      ; "STARTUP"
 146  8001                                      ; Make sure  rom is in page 0 during load
 147  8001                                      MMUSelectLayer2
 147  8001 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 148  8005 CD 0E E0                             call        asm_disable_l2_readwrite
 149  8008                                      MMUSelectROMS
 149  8008 ED 91 50 FF >                     nextreg EXSDOSMMU0,        BankROM
 149  800C ED 91 51 FF >                     nextreg EXSDOSMMU1,        BankROM
 150  8010              .GenerateDefaultCmdr:   MMUSelectCommander
 150  8010 ED 91 57 38 >                     nextreg CommanderMMU,       BankCommander
 151  8014 CD 45 E2                             call		defaultCommander
 152  8017 CD 18 E2                             call        saveCommander
 153  801A                                      MMUSelectLayer1
 153  801A ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 154  801E CD 80 E0                             call		l1_cls
 155  8021 3E 07                                ld			a,7
 156  8023 CD 9B E0                             call		l1_attr_cls_to_a
 157  8026 3E FF                                ld          a,$FF
 158  8028 CD A5 E0                             call        l1_set_border
 159  802B                                      MMUSelectSpriteBank
 159  802B ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
 160  802F CD C5 E4                             call		sprite_load_sprite_data
 161  8032              Initialise:             MMUSelectLayer2
 161  8032 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 162  8036 CD 08 E1                             call 		l2_initialise
 163  8039 CD A3 9A                             call        init_keyboard
 164  803C                                      ClearForceTransition
 164  803C 3E FF       >                        ld      a,$FF
 164  803E 32 84 88    >                        ld      (ScreenTransitionForced),a
 165  8041 3E 10        TidyDEBUG:              ld          a,16
 166  8043 32 52 87                             ld          (TidyCounter),a
 167  8046 AF           TestText:               xor			a
 168  8047 32 F3 9C                             ld      (JSTX),a
 169  804A              DEBUGCODE:              ClearSafeZone ; just set in open space so compas treacks su n
 169  804A 3E FF       >                        ld      a,$FF
 169  804C 32 CD 9E    >                        ld      (SpaceStationSafeZone),a
 170  804F                                      MMUSelectSpriteBank
 170  804F ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
 171  8053 CD BD E4                             call		init_sprites
 172  8056              .ClearLayer2Buffers:    DoubleBufferIfPossible
 172  8056             >                        IFDEF DOUBLEBUFFER
 172  8056             >                            MMUSelectLayer2
 172  8056 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 172  805A CD 01 E1    >                            call  l2_cls
 172  805D CD 15 E1    >                            call  l2_flip_buffers
 172  8060             >                        ENDIF
 173  8060                                      DoubleBufferIfPossible
 173  8060             >                        IFDEF DOUBLEBUFFER
 173  8060             >                            MMUSelectLayer2
 173  8060 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 173  8064 CD 01 E1    >                            call  l2_cls
 173  8067 CD 15 E1    >                            call  l2_flip_buffers
 173  806A             >                        ENDIF
 174  806A              ; Set up all 8 galaxies, 7later this will be pre built and loaded into memory from files
 175  806A CD 85 88     InitialiseGalaxies:     call		ResetUniv                       ; Reset ship data
 176  806D CD AD 88                             call        ResetGalaxy                     ; Reset each galaxy copying in code
 177  8070 CD D6 88                             call        SeedAllGalaxies
 178  8073 CD EE 93     StartAttractMode:       call        AttractMode
 179  8076                                      JumpIfAIsZero  .SkipDefault
 179  8076 A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
 179  8077 CA 84 80    >                        jp	    z, .SkipDefault
 180  807A                                      MMUSelectCommander
 180  807A ED 91 57 38 >                     nextreg CommanderMMU,       BankCommander
 181  807E CD 45 E2                             call		defaultCommander
 182  8081 C3 84 80                             jp          InitialiseMainLoop
 182  8084
 183  8084              .SkipDefault
 184  8084              ;                        call    FindNextFreeSlotInA
 185  8084              ;                        ld      b,a
 186  8084              ;                        ld      a,13 ;Coriolis station
 187  8084              ;                        call    InitialiseShipAUnivB
 188  8084              ;                        xor     a
 189  8084 CD 16 A2     InitialiseMainLoop:     call    InitMainLoop
 190  8087              ;..MAIN GAME LOOP..................................................................................................................
 191  8087              ; MACRO BLOCKS.....................................................................................................................
 192  8087              ;.. Check if keyboard scanning is allowed by screen. If this is set then skip all keyboard and AI..................................
 193  8087
 194  8087
 195  8087
 196  8087              ; if beam on count > 0
 197  8087              ;    then beam on count --
 198  8087              ;         if beam on count = 0
 199  8087              ;            then beam off count = beam off
 200  8087              ; if beam off > 0
 201  8087              ;    then beam off --
 202  8087              ;         if beam off = 0 and pulse rate count = max count
 203  8087              ;            then pulse rest count = pulse rest
 204  8087              ; if pulse rest > 0 then pulse rest --
 205  8087              ;    if pulse rest = 0
 206  8087              ;       then pulse rate count = 0
 207  8087
 208  8087
 209  8087              ; counter logic
 210  8087              ;    if beam on count > 0 then beam on count --
 211  8087              ;    if beam on = 0 then
 212  8087              ;       if beam off count >0 then beam off count --
 213  8087              ;       if beam off count = 0 them
 214  8087              ;          if pulse rest count > 0 then pulse rest count --
 215  8087              ;             if reset count = 0 then pulse rate count = 0
 216  8087              ; shoting logic
 217  8087              ;    if pulse on count is 0 and pulse off count is 0 and rest count is 0
 218  8087              ;       then  if fire pressed is OK
 219  8087              ;                if not beam type
 220  8087              ;                   then pulse rate count ++
 221  8087              ;                        if pulse rate count < pulse max count
 222  8087              ;                           then pulse on count = pulse on time
 223  8087              ;                                pulse off count = pulse off time
 224  8087              ;                                pulse rest count = pulse rest time
 225  8087              ;                           else pulse rest count = pulse rest time
 226  8087              ;                                pulse rate count, pulse on count, pulse off count = 0
 227  8087              ;                   else pulse on count = $FF
 228  8087              ;                        pulse off time , rest time = 0
 229  8087
 230  8087              ;..................................................................................................................................
 231  8087                                      INCLUDE "./GameEngine/MainLoop.asm"
# file opened: ./GameEngine/MainLoop.asm
   1+ 8087 CD 7C A3     MainLoop:	            call    doRandom                                                ; redo the seeds every frame
   2+ 808A                                      UpdateLaserCounters                                             ; update laser counters every frame
   2+ 808A             >
   2+ 808A             >                        UpdateOnCounter
   2+ 808A             >                        DecrementIfPossible  CurrLaserPulseOnCount, .UpdateOnDone
   2+ 808A             >                        JumpIfMemZero CurrLaserPulseOnCount, .UpdateOnDone
   2+ 808A 3A FE A0    >                        ld  a,(CurrLaserPulseOnCount)
   2+ 808D A7          >                        and a
   2+ 808E CA 9F 80    >                        jp  z,.UpdateOnDone
   2+ 8091 3D          >                        dec     a
   2+ 8092 32 FE A0    >                        ld      (CurrLaserPulseOnCount),a
   2+ 8095             >                        JumpIfAIsNotZero     .UpdateOnDone
   2+ 8095 A7          >                        and     a
   2+ 8096 C2 9F 80    >                        jp	    nz,.UpdateOnDone
   2+ 8099             >                        ldCopyByte CurrLaserPulseOffTime, CurrLaserPulseOffCount
   2+ 8099 3A F5 A0    >                        ld       a,(CurrLaserPulseOffTime)
   2+ 809C 32 FF A0    >                        ld       (CurrLaserPulseOffCount),a
   2+ 809F             >.UpdateOnDone:
   2+ 809F             >                        UpdateOffCounter
   2+ 809F             >                        DecrementIfPossible  CurrLaserPulseOffCount,  .UpdateOffDone
   2+ 809F             >                        JumpIfMemZero CurrLaserPulseOffCount, .UpdateOffDone
   2+ 809F 3A FF A0    >                        ld  a,(CurrLaserPulseOffCount)
   2+ 80A2 A7          >                        and a
   2+ 80A3 CA BE 80    >                        jp  z,.UpdateOffDone
   2+ 80A6 3D          >                        dec     a
   2+ 80A7 32 FF A0    >                        ld      (CurrLaserPulseOffCount),a
   2+ 80AA             >                        JumpIfAIsNotZero     .UpdateOffDone
   2+ 80AA A7          >                        and     a
   2+ 80AB C2 BE 80    >                        jp	    nz,.UpdateOffDone
   2+ 80AE             >                        JumpIfMemNeMemusng   CurrLaserPulseRate, CurrLaserPulseRateCount, .UpdateOffDone
   2+ 80AE 3A F3 A0    >                        ld   a,(CurrLaserPulseRate)
   2+ 80B1 21 01 A1    >                        ld   hl,CurrLaserPulseRateCount
   2+ 80B4 BE          >                        cp   (hl)
   2+ 80B5 C2 BE 80    >                        jp	  nz,.UpdateOffDone
   2+ 80B8             >                        ldCopyByte CurrLaserPulseRest, CurrLaserPulseRestCount
   2+ 80B8 3A F6 A0    >                        ld       a,(CurrLaserPulseRest)
   2+ 80BB 32 00 A1    >                        ld       (CurrLaserPulseRestCount),a
   2+ 80BE             >.UpdateOffDone:
   2+ 80BE             >                        UpdateRestCounter
   2+ 80BE             >                        DecrementIfPossible CurrLaserPulseRestCount, .UpdateRestDone                     ; if pulse rest > 0 then  pulse rest --
   2+ 80BE             >                        JumpIfMemZero CurrLaserPulseRestCount, .UpdateRestDone
   2+ 80BE 3A 00 A1    >                        ld  a,(CurrLaserPulseRestCount)
   2+ 80C1 A7          >                        and a
   2+ 80C2 CA D4 80    >                        jp  z,.UpdateRestDone
   2+ 80C5 3D          >                        dec     a
   2+ 80C6 32 00 A1    >                        ld      (CurrLaserPulseRestCount),a
   2+ 80C9             >.DonePulseRest:         JumpIfMemNotZero CurrLaserPulseRestCount, .UpdateRestDone                        ; if pulse rest = 0
   2+ 80C9 3A 00 A1    >                        ld  a,(CurrLaserPulseRestCount)
   2+ 80CC A7          >                        and a
   2+ 80CD C2 D4 80    >                        jp  nz,.UpdateRestDone
   2+ 80D0             >.ResetRate:             ZeroA                                                                           ;    then pulse rate count = 0
   2+ 80D0 AF          >                        xor a
   2+ 80D1 32 01 A1    >                        ld      (CurrLaserPulseRateCount),a                                             ;    .
   2+ 80D4             >.UpdateRestDone
   3+ 80D4                                      CoolLasers
   3+ 80D4 3A D5 A0    >                        ld      a,(GunTemperature)
   3+ 80D7 A7          >                        and     a
   3+ 80D8 28 04       >                        jr      z,.AlreadyCool
   3+ 80DA 3D          >                        dec     a
   3+ 80DB 32 D5 A0    >                        ld      (GunTemperature),a
   3+ 80DE             >.AlreadyCool:
   4+ 80DE CD AF 9A                             call    scan_keyboard                                           ; perform the physical input scan
   5+ 80E1              ;.. This bit allows cycling of ships on universe 0 in demo.........................................................................
   6+ 80E1 CD A5 85     DemoOfShipsDEBUG:       call    TestForNextShip
   7+ 80E4              ;.. Check if keyboard scanning is allowed by screen. If this is set then skip all keyboard and AI..................................
   8+ 80E4 3E 00        InputBlockerCheck:      ld      a,$0
   9+ 80E6                                      JumpIfAEqNusng $01, SkipInputHandlers                           ; as we are in a transition the whole update AI is skipped
   9+ 80E6 FE 01       >                        cp     $01
   9+ 80E8 CA 11 81    >                        jp      z,SkipInputHandlers
  10+ 80EB                                      JumpIfMemTrue TextInputMode, SkipInputHandlers                  ; in input mode all keys are processed by input
  10+ 80EB 3A CA 9E    >                        ld      a,(TextInputMode)
  10+ 80EE A7          >                        and     a
  10+ 80EF CA 11 81    >                        jp      z, SkipInputHandlers
  11+ 80F2                                      InputMainMacro
  11+ 80F2 CD 9C 89    >                        call    ViewKeyTest
  11+ 80F5 CD C1 86    >                        call    TestPauseMode
  11+ 80F8 3A EF 9D    >                        ld      a,(GamePaused)
  11+ 80FB FE 00       >                        cp      0
  11+ 80FD 20 88       >                        jr      nz,MainLoop
  11+ 80FF CD 2C 9C    >                        call    MovementKeyTest
  12+ 8102              ;.. Process cursor keys for respective screen if the address is 0 then we skill just skip movement.................................
  13+ 8102 3A 10 81     HandleMovement:         ld      a,(CallCursorRoutine+2)
  14+ 8105                                      JumpIfAIsZero     TestAreWeDocked
  14+ 8105 A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
  14+ 8106 CA 11 81    >                        jp	    z, TestAreWeDocked
  15+ 8109              ;.. Handle displaying correct screen ..............................................................................................
  16+ 8109 3E 00        HandleBankSelect:       ld      a,$00
  17+ 810B                                      MMUSelectScreenA
  17+ 810B ED 92 56    >                     nextreg ScreenBankMMU,		a
  18+ 810E CD 00 00     CallCursorRoutine:      call    $0000
  19+ 8111              ;.. Check to see if we are docked as if we are (or are docking.launching then no AI/Ship updates occur.............................
  20+ 8111              ;.. Also end up here if we have the screen input blocker set
  21+ 8111              SkipInputHandlers:
  22+ 8111              ;.. For Docked flag its - 0 = in free space, FF = Docked, FE transition, FD = Setup open space and transition to not docked
  23+ 8111 3A EE 9D     TestAreWeDocked:        ld      a,(DockedFlag)                                          ; if if we are in free space do universe update
  24+ 8114                                      JumpIfANENusng  0, UpdateLoop                                   ; else we skip it. As we are also in dock/transition then no models should be updated so we dont; need to draw
  24+ 8114 FE 00       >                        cp     0
  24+ 8116 C2 D0 81    >                        jp      nz,UpdateLoop
  25+ 8119 21 A7 9E     .UpdateEventCounter:    ld      hl,EventCounter                                         ; evnery 256 cycles we do a trigger test
  26+ 811C 35                                   dec     (hl)
  27+ 811D CC 73 82     .ProcessEvent:          call    z,LoopEventTriggered
  28+ 8120 3A A7 9E     .ProcessRecharge:       ld      a,(EventCounter)
  29+ 8123 E6 07                                and     7
  30+ 8125 CC 62 A2                             call    z, RechargeShip
  31+ 8128 3A DF A0     .PlayerMissileLaunch:   ld      a,(MissileTargettingFlag)                               ; if bit 7 is clear then we have a target and launch requested
  32+ 812B E6 80                                and     $80
  33+ 812D CC 5A 83                             call    z,  LaunchPlayerMissile
  34+ 8130              ;.. If we get here then we are in game running mode regardless of which screen we are on, so update AI.............................
  35+ 8130              ;.. we do one universe slot each loop update ......................................................................................
  36+ 8130              ;.. First update Sun...............................................................................................................
  37+ 8130 CD EE 83     .UpdateShips:           call    UpdateUniverseObjects
  38+ 8133                                      JumpIfMemNeNusng ScreenTransitionForced, $FF, BruteForceChange  ; if we docked then a transition would have been forced
  38+ 8133 3A 84 88    >                        ld  a,(ScreenTransitionForced)
  38+ 8136 FE FF       >                        cp  $FF
  38+ 8138 C2 C8 83    >                        jp  nz,BruteForceChange
  39+ 813B 3E 00        CheckIfViewUpdate:      ld      a,$00                                                   ; if this is set to a view number then we process a view
  40+ 813D                                      JumpIfAIsZero  UpdateLoop                                       ; This will change as more screens are added TODO
  40+ 813D A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
  40+ 813E CA D0 81    >                        jp	    z, UpdateLoop
  41+ 8141              ;..Processing a view...............................................................................................................
  42+ 8141              ;..Display any message ............................................................................................................
  43+ 8141              .CheckHyperspaceMessage:AnyHyperSpaceMacro .HandleMessages
  43+ 8141 2A A5 9E    >                        ld      hl,(InnerHyperCount)
  43+ 8144 7C          >                        ld      a,h
  43+ 8145 B5          >                        or      l
  43+ 8146 28 03       >                        jr      z, .HandleMessages
  44+ 8148 CD 59 92                             call    HyperSpaceMessage
  45+ 814B              .HandleMessages:        AnyMessagesMacro  .NoMessages
  45+ 814B 3A FB 9C    >                        ld      a, (MessageCount)
  45+ 814E A7          >                        and     a
  45+ 814F 28 06       >                        jr      z, .NoMessages
  46+ 8151 CD 3B 92                             call    DisplayCurrentMessage
  47+ 8154 CD 1A 92                             call    UpdateMessageTimer
  48+ 8157
  49+ 8157              .NoMessages:            MMUSelectLayer2
  49+ 8157 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
  50+ 815B 21 C8 9E     CheckConsoleReDraw:     ld      hl,ConsoleRefreshCounter
  51+ 815E 35                                   dec     (hl)
  52+ 815F CA 6F 81                             jp      z,.ConsoleDrawBuffer1                                   ; when it hits 0 then frame 1 of console is drawm
  53+ 8162 FA 6D 81                             jp      m,.ConsoleDrawBuffer2                                   ; need top also do next frame for double buffering
  54+ 8165              .ConsoleNotDraw:        SetMemFalse ConsoleRedrawFlag
  54+ 8165 3E FF       >                        ld      a,$FF
  54+ 8167 32 C9 9E    >                        ld      (ConsoleRedrawFlag),a
  55+ 816A C3 79 81                             jp      .JustViewPortCLS
  56+ 816D 36 05        .ConsoleDrawBuffer2:     ld      (hl),ConsoleRefreshInterval
  57+ 816F              .ConsoleDrawBuffer1:     SetMemTrue ConsoleRedrawFlag
  57+ 816F AF          >                        xor     a
  57+ 8170 32 C9 9E    >                        ld      (ConsoleRedrawFlag),a
  58+ 8173 CD 01 E1                             call    l2_cls                                                  ; Clear layer 2 for graphics
  59+ 8176 C3 7C 81                             jp      .ViewPortCLSDone
  60+ 8179 CD E1 E0     .JustViewPortCLS:       call   l2_cls_upper_two_thirds
  61+ 817C              .ViewPortCLSDone:
  62+ 817C                                      MMUSelectLayer1
  62+ 817C ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
  63+ 8180              .UpdateSun:             MMUSelectSun
  63+ 8180 ED 91 56 53 >                     nextreg SunMMU,            BankSunData
  64+ 8184              .DEBUGFORCE:
  65+ 8184                                     ;ld          hl,$0081
  66+ 8184                                     ;ld          (SBnKxlo),hl
  67+ 8184                                     ;ld          hl,$0001
  68+ 8184                                     ;ld          (SBnKylo),hl
  69+ 8184                                     ; ld          hl,$0160
  70+ 8184                                     ; ld          (SBnKzlo),hl
  71+ 8184                                      ;ld          a,$80
  72+ 8184                                      ;ld          (SBnKxsgn),a
  73+ 8184                                      ;ld          (SBnKysgn),a
  74+ 8184                                     ; ZeroA
  75+ 8184                                    ;  ld          (SBnKzsgn),a
  76+ 8184 CD 33 C7                             call    SunUpdateAndRender
  77+ 8187              .UpdatePlanet:          MMUSelectPlanet
  77+ 8187 ED 91 56 54 >                     nextreg PlanetMMU,         BankPlanetData
  78+ 818B CD 40 C3                             call    PlanetUpdateAndRender
  79+ 818E              ;..Later this will be done via self modifying code to load correct stars routine for view..........................................
  80+ 818E 3E DF        DrawDustForwards:       ld     a,$DF
  81+ 8190 32 CF EA                             ld     (line_gfx_colour),a
  82+ 8193              DustUpdateBank:         MMUSelectViewFront                                              ; This needs to be self modifying
  82+ 8193 ED 91 56 3E >                     nextreg ScreenBankMMU,		BankFrontView
  83+ 8197 CD B0 97     DustUpdateRoutine:      call   DustForward                                              ; This needs to be self modifying
  84+ 819A              ;ProcessSun:             call    DrawForwardSun
  85+ 819A 3A F3 A0     ProcessLaser:           ld      a,(CurrLaserPulseRate)
  86+ 819D                                      JumpIfAIsNotZero .CheckForPulse
  86+ 819D A7          >                        and     a
  86+ 819E C2 AB 81    >                        jp	    nz,.CheckForPulse
  87+ 81A1                                      JumpIfMemFalse FireLaserPressed, .NoLaser
  87+ 81A1 3A CC 9E    >                        ld      a,(FireLaserPressed)
  87+ 81A4 A7          >                        and     a
  87+ 81A5 C2 BF 81    >                        jp      nz, .NoLaser
  88+ 81A8 C3 B2 81                             jp      .FireLaser
  89+ 81AB              .CheckForPulse:         JumpIfMemZero CurrLaserPulseOnCount, .NoLaser
  89+ 81AB 3A FE A0    >                        ld  a,(CurrLaserPulseOnCount)
  89+ 81AE A7          >                        and a
  89+ 81AF CA BF 81    >                        jp  z,.NoLaser
  90+ 81B2              .FireLaser:             MMUSelectSpriteBank
  90+ 81B2 ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
  91+ 81B6 CD AE E2                             call    sprite_laser_show
  92+ 81B9 CD 54 A1                             call    LaserDrainSystems
  93+ 81BC C3 C6 81                             jp      ProcessPlanet
  94+ 81BF              .NoLaser:               MMUSelectSpriteBank
  94+ 81BF ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
  95+ 81C3 CD 12 E4                             call    sprite_laser_hide
  96+ 81C6              ProcessPlanet:
  97+ 81C6 CD 62 85     ProcessShipModels:      call   DrawForwardShips                                     ; Draw all ships (this may need to be self modifying)
  98+ 81C9                                      ; add in loop so we only update every 4 frames, need to change CLS logic too,
  99+ 81C9                                      ; every 4 frames needs to do 2 updates so updates both copies of buffer
 100+ 81C9                                      ; now will CLS bottom thrid
 101+ 81C9                                      CallIfMemTrue ConsoleRedrawFlag, UpdateConsole
 101+ 81C9 3A C9 9E    >                        ld      a,(ConsoleRedrawFlag)
 101+ 81CC A7          >                        and     a
 101+ 81CD CC C1 8A    >                        call    z, UpdateConsole
 102+ 81D0              ;..If we were not in views then we were in display screens/menus...................................................................
 103+ 81D0              UpdateLoop:             JumpIfMemZero ScreenLoopJP+1,LoopRepeatPoint
 103+ 81D0 3A DD 81    >                        ld  a,(ScreenLoopJP+1)
 103+ 81D3 A7          >                        and a
 103+ 81D4 CA DF 81    >                        jp  z,LoopRepeatPoint
 104+ 81D7              ;..This is the screen update routine for menus.....................................................................................
 105+ 81D7              ;.. Also used by transition routines
 106+ 81D7 3E 00        ScreenLoopBank:         ld      a,$0
 107+ 81D9                                      MMUSelectScreenA
 107+ 81D9 ED 92 56    >                     nextreg ScreenBankMMU,		a
 108+ 81DC CD 00 00     ScreenLoopJP:           call    $0000
 109+ 81DF 3A EE 9D     LoopRepeatPoint:        ld      a,(DockedFlag)
 110+ 81E2              HandleLaunched:         JumpIfAEqNusng  StateCompletedLaunch,   WeHaveCompletedLaunch
 110+ 81E2 FE FD       >                        cp     StateCompletedLaunch
 110+ 81E4 CA FE 81    >                        jp      z,WeHaveCompletedLaunch
 111+ 81E7                                      JumpIfAEqNusng  StateInTransition,      WeAreInTransition
 111+ 81E7 FE FE       >                        cp     StateInTransition
 111+ 81E9 CA AD 83    >                        jp      z,WeAreInTransition
 112+ 81EC                                      JumpIfAEqNusng  StateHJumping,          WeAreHJumping
 112+ 81EC FE FC       >                        cp     StateHJumping
 112+ 81EE CA 04 82    >                        jp      z,WeAreHJumping
 113+ 81F1                                      JumpIfAEqNusng  StateHEntering,         WeAreHEntering
 113+ 81F1 FE FB       >                        cp     StateHEntering
 113+ 81F3 CA 12 82    >                        jp      z,WeAreHEntering
 114+ 81F6                                      JumpIfAEqNusng  StateCompletedHJump,    WeHaveCompletedHJump
 114+ 81F6 FE FA       >                        cp     StateCompletedHJump
 114+ 81F8 CA 1A 82    >                        jp      z,WeHaveCompletedHJump
 115+ 81FB
 116+ 81FB C3 AD 83                             jp  DoubleBufferCheck
 117+ 81FE CD E7 88     WeHaveCompletedLaunch:  call    LaunchedFromStation
 118+ 8201 C3 AD 83                             jp      DoubleBufferCheck
 119+ 8204 CD 38 C2     WeAreHJumping:          call    hyperspace_Lightning
 120+ 8207 DA AD 83                             jp      c,DoubleBufferCheck
 121+ 820A 3E FB                                ld      a,StateHEntering
 122+ 820C 32 EE 9D                             ld      (DockedFlag),a
 123+ 820F C3 AD 83                             jp      DoubleBufferCheck
 124+ 8212 3E FA        WeAreHEntering:         ld      a,StateCompletedHJump
 125+ 8214 32 EE 9D                             ld      (DockedFlag),a
 126+ 8217 C3 AD 83                             jp      DoubleBufferCheck
 127+ 821A
 128+ 821A
 129+ 821A              ; to create planet position
 130+ 821A              ;       take seed 2 AND %00000011 + 3 + carry and store in z sign
 131+ 821A              ;       take result and divide by 2 then store in x and y sign
 132+ 821A              ;
 133+ 821A              ;       take seed 4 AND %00000111 OR %10000001 and store in z sign
 134+ 821A              ;       take seed 6 AND %00000011 and store in x sign and y sign
 135+ 821A              ;       set pitch and roll to 0
 136+ 821A              ;
 137+ 821A              ;
 138+ 821A              ;
 139+ 821A              ; --- At the end of a hyperspace jump we have to reset compass, market universe sun and planets etc
 140+ 821A 3A D4 9E     WeHaveCompletedHJump:   ld      a,(Galaxy)      ; DEBUG as galaxy n is not working
 141+ 821D                                      MMUSelectGalaxyA
 141+ 821D ED 92 57    >                     nextreg GalaxyDataMMU,       a
 142+ 8220 2A E9 9E                             ld      hl,(TargetSystemX)
 143+ 8223 22 E7 9E                             ld      (PresentSystemX),hl
 144+ 8226 44                                   ld      b,h
 145+ 8227 4D                                   ld      c,l
 146+ 8228                                      CorrectPostJumpFuel
 146+ 8228 3A 45 A3    >                        ld      a,(Fuel)
 146+ 822B 21 70 9E    >                        ld      hl,Distance
 146+ 822E 96          >                        sub     a,(hl)
 146+ 822F 32 45 A3    >                        ld      (Fuel),a
 147+ 8232                                      ForceTransition ScreenFront            ; This will also trigger stars
 147+ 8232 3E 09       >                        ld      a,ScreenFront
 147+ 8234 32 84 88    >                        ld      (ScreenTransitionForced), a
 148+ 8237 3E 00                                ld      a,$00
 149+ 8239 32 CE 9E                             ld      (ExtraVesselsCounter),a
 150+ 823C 32 EE 9D                             ld      (DockedFlag),a
 151+ 823F CD 6F F8                             call    GalaxyGenerateDesc             ; bc  holds new system to generate system
 152+ 8242 CD FA A3                             call    copy_working_to_system         ; and propogate copies of seeds
 153+ 8245 CD F2 A3                             call    copy_working_to_galaxy         ; .
 154+ 8248 CD E0 A4                             call    get_planet_data_working_seed   ; sort out system data
 155+ 824B                                      ;call    GetDigramGalaxySeed           ; .
 156+ 824B                                      MMUSelectStockTable                    ; .
 156+ 824B ED 91 57 37 >                     nextreg StockTableMMU,     BankStockTable
 157+ 824F CD AA E0                             call    generate_stock_market          ; generate new prices
 158+ 8252 CD B7 A2                             call    ClearUnivSlotList              ; clear out any ships
 159+ 8255 CD 7E A1                             call    ResetPlayerShip
 160+ 8258                                      HalveFugitiveStatus                    ; halves status and brings bit into carry
 160+ 8258 21 4B 9E    >                        ld      hl,FugitiveInnocentStatus
 160+ 825B CB 3E       >                        srl     (hl)
 161+ 825D                                      MMUSelectSun
 161+ 825D ED 91 56 53 >                     nextreg SunMMU,            BankSunData
 162+ 8261 CD 61 C2                             call    CreateSun                      ; create the local sun and set position based on seed
 163+ 8264                                      MMUSelectPlanet
 163+ 8264 ED 91 56 54 >                     nextreg PlanetMMU,         BankPlanetData
 164+ 8268 CD BA C0                             call    CreatePlanet
 165+ 826B              ;TODO                        call    generateSunAndPlanetPos        ; uses current carry state too
 166+ 826B              ;TODO.CreateSun:             call    SetSunSlot
 167+ 826B              ; PROBABLY NOT NEEDED NOW                      MMUSelectShipBank1
 168+ 826B              ; PROBABLY NOT NEEDED NOW                      call    GetShipBankId
 169+ 826B              ;;SELECT CORRECT BANK                        MMUSelectUniverseN 0
 170+ 826B              ;;TODO                        call    CopyBodyToUniverse
 171+ 826B              ;;TODO                        call    CreateSun
 172+ 826B              ;;TODOCreatePlanet:          call    SetPlanetSlot
 173+ 826B              ;;TODO                       MMUSelectShipBank1
 174+ 826B              ;;TODO                       call    GetShipBankId
 175+ 826B              ;;TODO                       MMUSelectUniverseBankN 1
 176+ 826B              ;;TODO                       call    CopyBodyToUniverse
 177+ 826B                                      SetMemFalse DockedFlag
 177+ 826B 3E FF       >                        ld      a,$FF
 177+ 826D 32 EE 9D    >                        ld      (DockedFlag),a
 178+ 8270 C3 AD 83                             jp  DoubleBufferCheck
 179+ 8273
 180+ 8273 CD 23 A3     LoopEventTriggered:     call    FindNextFreeSlotInC                 ; c= slot number, if we cant find a slot
 181+ 8276 D8                                   ret     c                                   ; then may as well just skip routine
 182+ 8277              .DEBUGTEST:             SetMemFalse SpaceStationSafeZone
 182+ 8277 3E FF       >                        ld      a,$FF
 182+ 8279 32 CD 9E    >                        ld      (SpaceStationSafeZone),a
 183+ 827C FD 61        .SpawnIsPossible:       ld      iyh,c                               ; save slot free in iyh
 184+ 827E              .AreWeInWhichSpace:     JumpIfMemTrue MissJumpFlag, .WitchSpaceEvent
 184+ 827E 3A A9 9E    >                        ld      a,(MissJumpFlag)
 184+ 8281 A7          >                        and     a
 184+ 8282 CA 59 83    >                        jp      z, .WitchSpaceEvent
 185+ 8285 CD 7C A3     .JunkOrNot:             call    doRandom                            ; if random > 35 then its not junk
 186+ 8288                                      JumpIfAGTENusng 35, .NotJunk                ; .
 186+ 8288 FE 23       >                        cp     35
 186+ 828A D2 BC 82    >                        jp		nc,.NotJunk
 187+ 828D              .JunkLimitHitTest:      TestRoomForJunk .NotJunk                    ; can we fit in any junk
 187+ 828D 3E 03       >                        ld      a,3
 187+ 828F             >                        JumpIfALTMemusng    JunkCount, .NotJunk
 187+ 828F 21 CF 9E    >                        ld      hl,JunkCount
 187+ 8292 BE          >                        cp      (hl)
 187+ 8293 DA BC 82    >                        jp		c,.NotJunk
 188+ 8296 CD 7C A3     .CouldBeTraderInstead:  call    doRandom                            ; so its now a 50/50 change of being a trader
 189+ 8299 E6 01                                and     1
 190+ 829B CA 07 83                             jp      z,.SpawnTrader
 191+ 829E              ;... Handle spawning of junk if possible
 192+ 829E CD 7C A3     .SpawnJunk:             call    doRandom
 193+ 82A1 FE 0A                                cp      10                                  ; will set carry if a < 10
 194+ 82A3                                      FlipCarryFlag                               ; so now carry is set if a > 10
 194+ 82A3 3F          >                        ccf
 195+ 82A4 E6 01                                and     1                                   ; so only have carry flag
 196+ 82A6 CE 04                                adc     ShipID_CargoType5                   ; so now a = 4 + random + poss carry
 197+ 82A8 47                                   ld      b,a                                 ; save ship type
 198+ 82A9                                      ; if in space station zone then we can't do asteroids
 199+ 82A9              .CanWeSpawnAsteroid:    JumpIfMemFalse  SpaceStationSafeZone, .NotInSafeZone
 199+ 82A9 3A CD 9E    >                        ld      a,(SpaceStationSafeZone)
 199+ 82AC A7          >                        and     a
 199+ 82AD C2 B4 82    >                        jp      nz, .NotInSafeZone
 200+ 82B0 78                                   ld      a,b
 201+ 82B1              .FailIfAsteroidInSafe:  ReturnIfAEqNusng   ShipID_Asteroid          ; we can't spawn asteroids near a space station
 201+ 82B1 FE 06       >                        cp      ShipID_Asteroid
 201+ 82B3 C8          >                        ret     z
 202+ 82B4              .NotInSafeZone:         AddJunkCount                                ; so its an increase in junk
 202+ 82B4 21 CF 9E    >                        ld      hl,JunkCount
 202+ 82B7 34          >                        inc     (hl)
 203+ 82B8 78                                   ld      a,b                                 ; get ship type back
 204+ 82B9 C3 7A 83                             jp      SpawnShipTypeA
 205+ 82BC                                      ;.......implicit ret
 206+ 82BC              ;... Handle spawing of non junk type object
 207+ 82BC              .NotJunk:               JumpIfMemTrue SpaceStationSafeZone, .SpawnTrader ; changed so that it can spawn friendly ships around a space station
 207+ 82BC 3A CD 9E    >                        ld      a,(SpaceStationSafeZone)
 207+ 82BF A7          >                        and     a
 207+ 82C0 CA 07 83    >                        jp      z, .SpawnTrader
 208+ 82C3              .PossibleCop:           MMUSelectCommander                          ; get cargo rating
 208+ 82C3 ED 91 57 38 >                     nextreg CommanderMMU,       BankCommander
 209+ 82C7 CD 40 E3     .AreWeABadPerson:       call    calculateBadness                    ; a = badness
 210+ 82CA CB 27                                sla     a                                   ; double badness for scans
 211+ 82CC                                      JumpIfMemZero CopCount,.NoCopsInSystem      ; are there any cops already
 211+ 82CC 3A D2 9E    >                        ld  a,(CopCount)
 211+ 82CF A7          >                        and a
 211+ 82D0 CA D7 82    >                        jp  z,.NoCopsInSystem
 212+ 82D3 21 4B 9E     .CopsAlreadyPresent:    ld      hl,FugitiveInnocentStatus           ; or a with FIST status
 213+ 82D6 B6                                   or      (hl)
 214+ 82D7 32 F0 A0     .NoCopsInSystem:        ld      (BadnessStatus),a                   ; if badness level triggers a cop
 215+ 82DA CD 7C A3                             call    doRandom                            ; then its hostile
 216+ 82DD                                      CallIfAGTEMemusng BadnessStatus, .SpawnHostileCop  ;
 216+ 82DD 21 F0 A0    >                        ld      hl,BadnessStatus
 216+ 82E0 BE          >                        cp      (hl)
 216+ 82E1 D4 07 83    >                        call	nc,.SpawnHostileCop
 217+ 82E4                                      ReturnIfMemNotZero CopCount                 ; if here are police then we are done
 217+ 82E4 3A D2 9E    >                        ld     a,(CopCount)
 217+ 82E7 A7          >                        and     a
 217+ 82E8 C0          >                        ret    nz
 218+ 82E9 21 CE 9E                             ld      hl, ExtraVesselsCounter             ; count down extra vessels counter
 219+ 82EC 35                                   dec     (hl)                                ; to prevent mass spawing
 220+ 82ED F0                                   ret     p                                   ;
 221+ 82EE 34           .ExtraVesselHit0:       inc     (hl)                                ; set counter to 0
 222+ 82EF                        ;TODO              JumpIfMemNotZero MissionData,.DoMissionPlans; call special mission spawn logic routine
 223+ 82EF                         ;TODO             ret     c                                   ; return if carry was set (i.e. it did something)
 224+ 82EF 3A D4 9E                             ld      a,(Galaxy)      ; DEBUG as galaxy n is not working
 225+ 82F2                                      MMUSelectGalaxyA
 225+ 82F2 ED 92 57    >                     nextreg GalaxyDataMMU,       a
 226+ 82F5 3A 0A E9                             ld      a,(GalaxyDisplayGovernment)
 227+ 82F8                                      JumpIfAIsNotZero .NotAnarchySystem
 227+ 82F8 A7          >                        and     a
 227+ 82F9 C2 2F 83    >                        jp	    nz,.NotAnarchySystem
 228+ 82FC 47                                   ld      b,a
 229+ 82FD CD 7C A3                             call    doRandom                            ; if random > 120 then don't spawn
 230+ 8300                                      ReturnIfAGTENusng 120                       ;
 230+ 8300 FE 78       >                        cp    120
 230+ 8302 D0          >                        ret	 nc
 231+ 8303 E6 07                                and     7                                   ; if random 0 ..7 < gov rating
 232+ 8305                                      ReturnIfALTNusng b                          ; then return
 232+ 8305 B8          >                        cp    b
 232+ 8306 D8          >                        ret	 c
 233+ 8307              .SpawnTrader:       ; TODO
 234+ 8307              ; ... Spawn a cop at hostile status
 235+ 8307 3E 29        .SpawnHostileCop:       ld      a,ShipID_Viper
 236+ 8309 CD 7A 83                             call    SpawnShipTypeA                      ; call rather than jump
 237+ 830C CD 3A C5                             call    SetShipHostile                      ; as we have correct universe banked in now
 238+ 830F C9                                   ret
 239+ 8310              ; ... Spawb a hostile ship or cluster
 240+ 8310 CD 7C A3     .SpawnHostile:          call    doRandom
 241+ 8313                                      JumpIfAGTENusng 100,.SpawnPirates           ; 100 in 255 change of one or more pirates
 241+ 8313 FE 64       >                        cp     100
 241+ 8315 D2 30 83    >                        jp		nc,.SpawnPirates
 242+ 8318 21 CE 9E     .SpawnAHostileHunter:   ld      hl, ExtraVesselsCounter             ; prevent the next spawning
 243+ 831B 34                                   inc     (hl)                                ;
 244+ 831C E6 03                                and     3                                   ; a = random 0..3
 245+ 831E                                      MMUSelectShipBank1
 245+ 831E ED 91 57 3B >					 nextreg ShipModelMMU,	    BankShipModels1
 246+ 8322                                      GetByteAInTable ShipHunterTable             ; get hunter ship type
 246+ 8322 21 9D 93    >                    ld          hl,ShipHunterTable
 246+ 8325 ED 31       >                    add         hl,a
 246+ 8327 7E          >                    ld          a,(hl)
 247+ 8328 CD 7A 83                             call    SpawnShipTypeA
 248+ 832B CD 3A C5                             call    SetShipHostile
 249+ 832E C9                                   ret
 250+ 832F C9           .NotAnarchySystem:      ret
 251+ 8330 CD 7C A3     .SpawnPirates:          call    doRandom                           ; a = random 0..3
 252+ 8333 E6 03                                and     3
 253+ 8335 32 CE 9E                             ld      (ExtraVesselsCounter),a
 254+ 8338 CD 7C A3     .PirateLoop:            call    doRandom
 255+ 833B 4F                                   ld      c,a                                 ; random and random and 7
 256+ 833C CD 7C A3                             call    doRandom
 257+ 833F A1                                   and     c
 258+ 8340 E6 07                                and     7
 259+ 8342                                      GetByteAInTable ShipPackList
 259+ 8342 21 95 93    >                    ld          hl,ShipPackList
 259+ 8345 ED 31       >                    add         hl,a
 259+ 8347 7E          >                    ld          a,(hl)
 260+ 8348 CD 7A 83                             call    SpawnShipTypeA
 261+ 834B CD 3A C5                             call    SetShipHostile                      ; make sure its hostile
 262+ 834E                                      AddPirateCount                              ; another pirate has been spawned
 262+ 834E 21 D3 9E    >                        ld      hl,PirateCount
 262+ 8351 34          >                        inc     (hl)
 263+ 8352 21 CE 9E                             ld      hl,ExtraVesselsCounter
 264+ 8355 35                                   dec     (hl)
 265+ 8356 20 E0                                jr      nz,.PirateLoop
 266+ 8358 C9                                   ret
 267+ 8359 C9           .WitchSpaceEvent:       ret; TODO for now
 268+ 835A
 269+ 835A
 270+ 835A CD 23 A3     LaunchPlayerMissile:    call    FindNextFreeSlotInC                 ; Check if we have a slot free
 271+ 835D 38 1A                                jr      c,.MissileMissFire                  ; give a miss fire indicator as we have no slots
 272+ 835F 3E 00        .LaunchGood:            ld      a,0                                 ; TODO For now only 1 missile type
 273+ 8361                                      GetByteAInTable ShipMissileTable            ; swap in missile data
 273+ 8361 21 A1 93    >                    ld          hl,ShipMissileTable
 273+ 8364 ED 31       >                    add         hl,a
 273+ 8366 7E          >                    ld          a,(hl)
 274+ 8367 CD 7A 83                             call    SpawnShipTypeA                      ; spawn the ship
 275+ 836A 3A DF A0                             ld      a,(MissileTargettingFlag)           ; Get target from computer
 276+ 836D 32 31 C0                             ld      (UBnKMissileTarget),a               ; load target Data
 277+ 8370 CD 85 C5                             call    UnivSetPlayerMissile                ; .
 278+ 8373                                      ClearMissileTarget                          ; reset targetting
 278+ 8373 3E FF       >                        ld      a,StageMissileNoTarget
 278+ 8375 32 DF A0    >                        ld      (MissileTargettingFlag),a           ; reset targetting
 279+ 8378                                      ; TODO handle removal of missile from inventory and console
 280+ 8378 C9                                   ret
 281+ 8379 C9           .MissileMissFire:       ret ; TODO bing bong noise misfire message
 282+ 837A
 283+ 837A              ; a = ship type, iyh = universe slot to create in
 284+ 837A FD 6F        SpawnShipTypeA:         ld      iyl,a                               ; save ship type
 285+ 837C                                      ReturnIfAGTENusng   ShipTotalModelCount     ; current ship count limit
 285+ 837C FE 2C       >                        cp    ShipTotalModelCount
 285+ 837E D0          >                        ret	 nc
 286+ 837F                                      MMUSelectShipBank1                          ; select bank 1
 286+ 837F ED 91 57 3B >					 nextreg ShipModelMMU,	    BankShipModels1
 287+ 8383 FD 7C                                ld      a,iyh                               ; select unverse free slot
 288+ 8385 FD 45                                ld      b,iyl
 289+ 8387 CD CE A2                             call    SetSlotAToTypeB
 290+ 838A                                      MMUSelectUniverseA                          ; .
 290+ 838A C6 46       >                     add    a,BankUNIVDATA0
 290+ 838C ED 92 56    >                     nextreg UniverseMMU,       a
 291+ 838F F5                                   push    af                                  ; save computed bank number
 292+ 8390 FD 7D                                ld      a, iyl                              ; retrive ship type
 293+ 8392                                      ;call    SetSlotAToTypeB                    ; record in the lookup tables
 294+ 8392 CD 0F E0                             call    GetShipBankId                       ; find actual memory location of data
 295+ 8395                                      MMUSelectShipBankA
 295+ 8395 ED 92 57    >					 nextreg ShipModelMMU,	    a
 296+ 8398 78                                   ld      a,b                                 ; b = computed ship id for bank
 297+ 8399 CD 6A E0                             call    CopyShipToUniverse
 298+ 839C CD 10 C6                             call    UnivSetSpawnPosition                ; set initial spawn position
 299+ 839F F1                                   pop     af                                  ; we need bank nbr in a
 300+ 83A0 CD C5 C6                             call    UnivInitRuntime                     ; Clear runtime data before startup, iy h and l are already set up
 301+ 83A3 3A 2D C3                             ld      a,(ShipTypeAddr)
 302+ 83A6 47                                   ld      b,a
 303+ 83A7 FD 7D                                ld      a,iyl
 304+ 83A9 CD D5 A2                             call    SetSlotAToClassB
 305+ 83AC C9                                   ret
 306+ 83AD
 307+ 83AD                                      ; reset main loop counters
 308+ 83AD                                      ; from BBC TT18 jump code
 309+ 83AD                                      ; need to set system corrodinates, flush out univere ships etc
 310+ 83AD                                      ; set up new star system and landing location in system
 311+ 83AD                                      ; reset ship speed etc (RES2)
 312+ 83AD                                      ; update legal status, missle indicatrions, planet data block, sun data block (SOLAR)
 313+ 83AD                                      ;   put planet into data blokc 1 of FRIN
 314+ 83AD                                      ;   put sun inot data block (NWWSHIP)
 315+ 83AD                                      ; need to look at in system warp code (WARP) - note we need to -reorg all to code for teh station as that will never be in slot 0
 316+ 83AD
 317+ 83AD
 318+ 83AD              WeAreInTransition:
 319+ 83AD 3E 00        DoubleBufferCheck:      ld      a,00
 320+ 83AF                                      IFDEF DOUBLEBUFFER
 321+ 83AF FE 00                                    cp      0
 322+ 83B1 CA C0 83                                 jp      z,TestTransition
 323+ 83B4                                          MMUSelectLayer2
 323+ 83B4 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 324+ 83B8 3A 01 E0                                 ld     a,(varL2_BUFFER_MODE)
 325+ 83BB FE 00                                    cp     0
 326+ 83BD C4 15 E1                                 call   nz,l2_flip_buffers
 327+ 83C0                                      ENDIF
 328+ 83C0 3A 84 88     TestTransition:         ld      a,(ScreenTransitionForced)          ; was there a bruite force screen change in any update loop
 329+ 83C3 FE FF                                cp      $FF
 330+ 83C5 CA 87 80                             jp      z,MainLoop
 331+ 83C8 57           BruteForceChange:       ld      d,a
 332+ 83C9 1E 10                                ld      e,ScreenMapRow
 333+ 83CB ED 30                                mul
 334+ 83CD DD 21 97 87                          ld      ix,ScreenKeyMap
 335+ 83D1 DD 19                                add     ix,de                               ; Force screen transition
 336+ 83D3 CD 3C 89                             call    SetScreenAIX
 337+ 83D6 C3 87 80                             jp MainLoop
 338+ 83D9
# file closed: ./GameEngine/MainLoop.asm
 232  83D9              ;..................................................................................................................................
 233  83D9              ;..Process A ship..................................................................................................................
 234  83D9              ; Apply Damage b to ship based on shield value of a
 235  83D9              ; returns a with new shield value
 236  83D9                                      INCLUDE "./GameEngine/DamagePlayer.asm"
# file opened: ./GameEngine/DamagePlayer.asm
   1+ 83D9              ;..Process A ship..................................................................................................................
   2+ 83D9              ; Apply Damage b to ship based on shield value of a
   3+ 83D9              ; returns a with new shield value
   4+ 83D9              ApplyDamage:            ClearCarryFlag
   4+ 83D9 B7          >                        or a
   5+ 83DA 98                                   sbc     b
   6+ 83DB D0                                   ret     nc                  ; no carry so was not negative
   7+ 83DC
   8+ 83DC ED 44        .KilledShield:          neg                         ; over hit shield
   9+ 83DE 4F                                   ld      c,a                 ; save overhit in c
  10+ 83DF 3A DC A0                             ld      a,(PlayerEnergy)    ; and apply it to player energy
  11+ 83E2                                      ClearCarryFlag
  11+ 83E2 B7          >                        or a
  12+ 83E3 99                                   sbc     c
  13+ 83E4 F2 E8 83                             jp      p,.DoneDamage       ; if result was 0 or more then completed damage
  14+ 83E7 AF           .KilledPlayer:          xor     a
  15+ 83E8 32 DC A0     .DoneDamage:            ld      (PlayerEnergy),a
  16+ 83EB AF                                   xor     a                   ; shield is gone
  17+ 83EC C9                                   ret
  18+ 83ED
# file closed: ./GameEngine/DamagePlayer.asm
 237  83ED              ;..Update Universe Objects.........................................................................................................
 238  83ED                                      INCLUDE "./GameEngine/UpdateUniverseObjects.asm"
# file opened: ./GameEngine/UpdateUniverseObjects.asm
   1+ 83ED              ;..................................................................................................................................
   2+ 83ED 00           CurrentShipUniv:        DB      0
   3+ 83EE              ;..................................................................................................................................
   4+ 83EE AF           UpdateUniverseObjects:  xor     a
   5+ 83EF 32 A2 9E                             ld      (SelectedUniverseSlot),a
   6+ 83F2 57           .UpdateUniverseLoop:    ld      d,a                                             ; d is unaffected by GetTypeInSlotA
   7+ 83F3              ;.. If the slot is empty (FF) then skip this slot..................................................................................
   8+ 83F3 CD 17 A3                             call    GetTypeAtSlotA
   9+ 83F6 FD 6F                                ld      iyl,a                                           ; save type into iyl for later
  10+ 83F8 FE FF                                cp      $FF
  11+ 83FA CA 25 85                             jp      z,.ProcessedUniverseSlot
  12+ 83FD 7A           .UniverseObjectFound:   ld      a,d                                             ; Get back Universe slot as we want it
  13+ 83FE                                      MMUSelectUniverseA                                      ; and we apply roll and pitch
  13+ 83FE C6 46       >                     add    a,BankUNIVDATA0
  13+ 8400 ED 92 56    >                     nextreg UniverseMMU,       a
  14+ 8403 CD BC D7                             call    ApplyMyRollAndPitch
  15+ 8406 CD 96 D8                             call    ApplyShipRollAndPitch
  16+ 8409              ;.. If its a space station then see if we are ready to dock........................................................................
  17+ 8409 3A 3D C0     .CheckExploding:        ld      a,(UBnKexplDsp)                                 ; is it destroyed
  18+ 840C E6 A0                                and     %10100000                                       ; or exploding
  19+ 840E C2 25 85                             jp      nz,.ProcessedUniverseSlot                       ; then no action
  20+ 8411              .CheckIfMissile:        JumpIfMemEqNusng ShipTypeAddr, ShipTypeMissile, .CollisionDone ; Missiles don't have ECM and do collision checks on their tactics phase
  20+ 8411 3A 2D C3    >                        ld  a,(ShipTypeAddr)
  20+ 8414 FE 01       >                        cp  ShipTypeMissile
  20+ 8416 CA EA 84    >                        jp  z,.CollisionDone
  21+ 8419 CD 73 C5     .ProcessECM:            call    UpdateECM                                       ; Update ECM Counters
  22+ 841C 2A 0C C0     .CheckIfClose:          ld      hl,(UBnKxlo)                                    ; chigh byte check or just too far away
  23+ 841F ED 5B 0F C0                          ld      de,(UBnKylo)                                    ; .
  24+ 8423 ED 4B 12 C0                          ld      bc,(UBnKzlo)                                    ; .
  25+ 8427 B4                                   or      h                                               ; .
  26+ 8428 B2                                   or      d                                               ; .
  27+ 8429 B0                                   or      b                                               ; .
  28+ 842A C2 EA 84                             jp      nz,.CollisionDone                                    ; .
  29+ 842D B5           .CheckLowBit7Close:     or      l                                               ; if bit 7 of low is set then still too far
  30+ 842E B3                                   or      e                                               ; .
  31+ 842F B1                                   or      c                                               ; .
  32+ 8430 FD 67                                ld      iyh,a                                           ; save it in case we need to check bit 6 in collision check
  33+ 8432 E6 80                                and     $80                                             ; .
  34+ 8434 C2 EA 84                             jp      nz,.CollisionDone                                    ; .
  35+ 8437 3A 2D C3     .CheckIfDockable:       ld      a,(ShipTypeAddr)                                ; Now we have the correct bank
  36+ 843A                                      JumpIfANENusng  ShipTypeStation, .CollisionCheck        ; if its not a station so we don't test docking
  36+ 843A FE 02       >                        cp     ShipTypeStation
  36+ 843C C2 70 84    >                        jp      nz,.CollisionCheck
  37+ 843F              .IsDockableAngryCheck:  JumpOnMemBitSet ShipNewBitsAddr, 4, .CollisionCheck     ; if it is angry then we dont test docking
  37+ 843F 3A 2E C3    >                        ld      a,(ShipNewBitsAddr)
  37+ 8442 CB 67       >                        bit 	4,a
  37+ 8444 C2 70 84    >                        jp      nz,.CollisionCheck
  38+ 8447              .CheckHighNoseZ:        JumpIfMemLTNusng  UBnkrotmatNosevZ+1 , 214, .CollisionCheck ; get get high byte of rotmat this is the magic angle to be within 26 degrees +/-
  38+ 8447 3A 26 C0    >                        ld      a,(UBnkrotmatNosevZ+1)
  38+ 844A FE D6       >                        cp      214
  38+ 844C DA 70 84    >                        jp	  c,.CollisionCheck
  39+ 844F CD EC 86     .GetStationVector:      call    GetStationVectorToWork                          ; Normalise position into XX15 as in effect its a vector from out ship to it given we are always 0,0,0, returns with A holding vector z
  40+ 8452                                      JumpIfALTNusng  89, .CollisionCheck                     ; if the z axis <89 the we are not in the 22 degree angle,m if its negative then unsigned comparison will cater for this
  40+ 8452 FE 59       >                        cp      89
  40+ 8454 DA 70 84    >                        jp		c, .CollisionCheck
  41+ 8457 3A 1C C0     .CheckAbsRoofXHi:       ld      a,(UBnkrotmatRoofvX+1)                          ; get abs roof vector high
  42+ 845A E6 7F                                and     SignMask8Bit                                    ; .
  43+ 845C                                      JumpIfALTNusng 80, .CollisionCheck                      ; note 80 decimal for 36.6 degrees horizontal
  43+ 845C FE 50       >                        cp      80
  43+ 845E DA 70 84    >                        jp		c, .CollisionCheck
  44+ 8461              ;.. Its passed all validation and we are docking...................................................................................
  45+ 8461              .WeAreDocking:          MMUSelectLayer1
  45+ 8461 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
  46+ 8465 3E 06                                ld        a,$6
  47+ 8467 CD A5 E0                             call      l1_set_border
  48+ 846A              .EnterDockingBay:       ForceTransition ScreenDocking                           ;  Force transition
  48+ 846A 3E 0D       >                        ld      a,ScreenDocking
  48+ 846C 32 84 88    >                        ld      (ScreenTransitionForced), a
  49+ 846F C9                                   ret                                                     ;  don't bother with other objects
  50+ 8470                                      ; So it is a candiate to test docking. Now we do the position and angle checks
  51+ 8470 FD 7D        .CollisionCheck:        ld      a,iyl
  52+ 8472                                      JumpIfAEqNusng ShipTypeStation, .HaveCollided           ; stations dont check bit 6
  52+ 8472 FE 02       >                        cp     ShipTypeStation
  52+ 8474 CA AD 84    >                        jp      z,.HaveCollided
  53+ 8477                                      JumpIfAEqNusng ShipTypeMissile, .CollisionDone          ; Missile collisions are done in the tactics code
  53+ 8477 FE 01       >                        cp     ShipTypeMissile
  53+ 8479 CA EA 84    >                        jp      z,.CollisionDone
  54+ 847C FD 7C        .VeryCloseCheck:        ld      a,iyh                                           ; bit 6 is still too far
  55+ 847E E6 C0                                and     %11000000                                       ; .
  56+ 8480 20 68                                jr      nz,.CollisionDone                                    ; .
  57+ 8482 FD 7D        .ScoopableCheck:        ld      a,iyl                                           ; so if its not scoopable
  58+ 8484                                      JumpIfANENusng  ShipTypeScoopable, .HaveCollided        ; then its a collision
  58+ 8484 FE 04       >                        cp     ShipTypeScoopable
  58+ 8486 C2 AD 84    >                        jp      nz,.HaveCollided
  59+ 8489 3A 64 A3     .ScoopsEquiped:         ld      a,(FuelScoop)                                   ; if there is no scoop then impact
  60+ 848C                                      JumpIfANENusng  EquipmentItemFitted, .HaveCollided      ; .
  60+ 848C FE FF       >                        cp     EquipmentItemFitted
  60+ 848E C2 AD 84    >                        jp      nz,.HaveCollided
  61+ 8491 3A 11 C0     .ScoopRegion:           ld      a,(UBnKysgn)                                    ; if the y axis is negative then we are OK
  62+ 8494                                      JumpIfAIsZero   .HaveCollided                           ; else its a collision
  62+ 8494 A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
  62+ 8495 CA AD 84    >                        jp	    z, .HaveCollided
  63+ 8498 CD 64 C6     .CollectedCargo:        call    ShipCargoType
  64+ 849B 57           .DoWeHaveCapacity:      ld      d,a                                             ; save cargotype
  65+ 849C CD D1 A1                             call    CanWeScoopCargoD
  66+ 849F 38 03                                jr      c, .NoRoom
  67+ 84A1 CD C9 A1     .CanScoop:              call    AddCargoTypeD
  68+ 84A4              .NoRoom:                ClearSlotMem    SelectedUniverseSlot                    ; we only need to clear slot list as univ ship is now junk
  68+ 84A4 3A A2 9E    >                        ld      a,(SelectedUniverseSlot)
  68+ 84A7 CD F0 A2    >                        call    ClearSlotA
  69+ 84AA C3 EA 84                             jp      .CollisionDone
  70+ 84AD              ; ... Generic collision
  71+ 84AD              .HaveCollided:          JumpIfMemLTNusng DELTA, 5, .SmallBump
  71+ 84AD 3A DB 9D    >                        ld      a,(DELTA)
  71+ 84B0 FE 05       >                        cp      5
  71+ 84B2 DA C1 84    >                        jp	  c,.SmallBump
  72+ 84B5 3A 43 C0     .BigBump:               ld      a,(UBnKEnergy)                                  ; get energy level which gives us an approximate to size and health
  73+ 84B8                                      SetCarryFlag
  73+ 84B8 37          >                        scf
  74+ 84B9 17                                   rla                                                     ; divide by 2 but also bring in carry so its 128 + energy / 2
  75+ 84BA 47                                   ld      b,a
  76+ 84BB CD 21 DB                             call    KillShip                                        ; mark ship as dead (if possible)
  77+ 84BE C3 CB 84                             jp      .ApplyDamage
  78+ 84C1 3A DB 9D     .SmallBump:             ld      a,(DELTA)                                       ; if out ship speed < 5 then set damage to
  79+ 84C4 47                                   ld      b,a
  80+ 84C5 CD 43 DB                             call    DamageShip                                      ; dent target too  TODO make damge totally proportional to speed
  81+ 84C8 C3 CB 84                             jp      .ApplyDamage
  82+ 84CB CD 57 A2     .ApplyDamage:           call    SetSpeedZero
  83+ 84CE 3A 14 C0                             ld      a,(UBnKzsgn)                                    ; front or back
  84+ 84D1 E6 80                                and     $80
  85+ 84D3 20 0C                                jr      nz,.HitRear
  86+ 84D5 3A DA A0                             ld      a,(ForeShield)
  87+ 84D8 CD D9 83                             call    ApplyDamage
  88+ 84DB 32 DA A0                             ld      (ForeShield),a
  89+ 84DE C3 EA 84                             jp      .CollisionDone
  90+ 84E1 3A DB A0     .HitRear:               ld      a,(AftShield)
  91+ 84E4 CD D9 83                             call    ApplyDamage
  92+ 84E7 32 DB A0                             ld      (AftShield),a
  93+ 84EA              ; Now check laser
  94+ 84EA CD 2F 8A     .CollisionDone:         call    ShipInSights
  95+ 84ED 30 36                                jr      nc,.ProcessedUniverseSlot                        ; for laser and missile we can check once
  96+ 84EF 3A F3 A0                             ld      a,(CurrLaserPulseRate)
  97+ 84F2                                      JumpIfAIsNotZero .CheckForPulse
  97+ 84F2 A7          >                        and     a
  97+ 84F3 C2 00 85    >                        jp	    nz,.CheckForPulse
  98+ 84F6                                      JumpIfMemFalse FireLaserPressed,     .NoLaser
  98+ 84F6 3A CC 9E    >                        ld      a,(FireLaserPressed)
  98+ 84F9 A7          >                        and     a
  98+ 84FA C2 15 85    >                        jp      nz, .NoLaser
  99+ 84FD C3 07 85                             jp      .LaserDamage
 100+ 8500              .CheckForPulse:         JumpIfMemZero CurrLaserPulseOnCount, .NoLaser
 100+ 8500 3A FE A0    >                        ld  a,(CurrLaserPulseOnCount)
 100+ 8503 A7          >                        and a
 100+ 8504 CA 15 85    >                        jp  z,.NoLaser
 101+ 8507 3A F9 A0     .LaserDamage:           ld      a,(CurrLaserDamageOutput)
 102+ 850A CD 43 DB                             call    DamageShip
 103+ 850D 3A 3D C0                             ld      a,(UBnKexplDsp)                                 ; is it destroyed
 104+ 8510 E6 A0                                and     %10100000
 105+ 8512 C2 25 85                             jp      nz,.ProcessedUniverseSlot                        ; can't lock on debris
 106+ 8515              .NoLaser:
 107+ 8515              ; Now check missile lock
 108+ 8515              .PlayerMissileLock:     JumpIfMemNeNusng MissileTargettingFlag, StageMissileTargeting, .ProcessedUniverseSlot
 108+ 8515 3A DF A0    >                        ld  a,(MissileTargettingFlag)
 108+ 8518 FE FE       >                        cp  StageMissileTargeting
 108+ 851A C2 25 85    >                        jp  nz,.ProcessedUniverseSlot
 109+ 851D 3A A2 9E     .LockPlayerMissile:     ld      a,(SelectedUniverseSlot)                        ; set to locked and nto launchedd
 110+ 8520                                      LockMissileToA                                          ; .
 110+ 8520 F6 80       >                        or      $80
 110+ 8522 32 DF A0    >                        ld      (MissileTargettingFlag),a
 111+ 8525              .ProcessedUniverseSlot:
 112+ 8525              ;...Tactics Section................................................................................................................
 113+ 8525              .AreWeReadyForAI:       CallIfMemEqMemusng SelectedUniverseSlot, CurrentUniverseAI, UpdateShip
 113+ 8525 3A A2 9E    >                        ld   a,(SelectedUniverseSlot)
 113+ 8528 21 A1 9E    >                        ld   hl,CurrentUniverseAI
 113+ 852B BE          >                        cp   (hl)
 113+ 852C CC 4D BA    >                        call    z,UpdateShip
 114+ 852F 3A A2 9E                             ld      a,(SelectedUniverseSlot)                        ; Move to next ship cycling if need be to 0
 115+ 8532 3C                                   inc     a                                               ; .
 116+ 8533                                      JumpIfAGTENusng   UniverseSlotListSize, .UpdateAICounter; .
 116+ 8533 FE 0C       >                        cp     UniverseSlotListSize
 116+ 8535 D2 3E 85    >                        jp		nc,.UpdateAICounter
 117+ 8538 32 A2 9E                             ld      (SelectedUniverseSlot),a
 118+ 853B C3 F2 83                             jp      .UpdateUniverseLoop
 119+ 853E 3A A1 9E     .UpdateAICounter:       ld      a,(CurrentUniverseAI)
 120+ 8541 3C                                   inc     a
 121+ 8542 FE 0C                                cp      12
 122+ 8544 38 01                                jr      c,.IterateAI
 123+ 8546 AF                                   xor     a
 124+ 8547 32 A1 9E     .IterateAI:             ld      (CurrentUniverseAI),a
 125+ 854A              .CheckIfStationAngry:   ReturnIfMemFalse  SetStationAngryFlag
 125+ 854A 3A A3 9E    >                        ld      a,(SetStationAngryFlag)
 125+ 854D A7          >                        and     a
 125+ 854E C0          >                        ret     nz
 126+ 854F              .SetStationAngryIfPoss: ReturnIfMemNeNusng UniverseSlotList, ShipTypeStation
 126+ 854F 3A B0 9E    >                        ld   a,(UniverseSlotList)
 126+ 8552 FE 02       >                        cp     ShipTypeStation
 126+ 8554 C8          >                        ret    z
 127+ 8555                                      MMUSelectUniverseN 0
 127+ 8555 ED 91 56 46 >                     nextreg UniverseMMU,       BankUNIVDATA0+0
 128+ 8559 CD 3A C5                             call    SetShipHostile
 129+ 855C                                      SetMemFalse    SetStationAngryFlag
 129+ 855C 3E FF       >                        ld      a,$FF
 129+ 855E 32 A3 9E    >                        ld      (SetStationAngryFlag),a
 130+ 8561 C9                                   ret
 131+ 8562
 132+ 8562              ;..................................................................................................................................
 133+ 8562
 134+ 8562 AF           DrawForwardShips:       xor     a
 135+ 8563 32 ED 83     .DrawShipLoop:          ld      (CurrentShipUniv),a
 136+ 8566 CD 17 A3                             call    GetTypeAtSlotA
 137+ 8569 FE FF                                cp      $FF
 138+ 856B 28 12                                jr      z,.ProcessedDrawShip
 139+ 856D              ; Add in a fast check for ship behind to process nodes and if behind jump to processed Draw ship
 140+ 856D 3A ED 83     .SelectShipToDraw:       ld      a,(CurrentShipUniv)
 141+ 8570                                      MMUSelectUniverseA
 141+ 8570 C6 46       >                     add    a,BankUNIVDATA0
 141+ 8572 ED 92 56    >                     nextreg UniverseMMU,       a
 142+ 8575 CD D4 D9     .ProcessUnivShip:       call    ProcessShip          ; The whole explosion logic is now encapsulated in process ship ;TODO TUNE THIS   ;; call    ProcessUnivShip
 143+ 8578              ; Debris still appears on radar
 144+ 8578              .UpdateRadar:
 145+ 8578              ;;;Does nothing                       ld      a,BankFrontView
 146+ 8578              ;;;Does nothing                       MMUSelectScreenA
 147+ 8578              ;;;Does nothing         ld      a,(CurrentShipUniv)
 148+ 8578              ;;;Does nothing         MMUSelectUniverseA
 149+ 8578
 150+ 8578                                      CallIfMemTrue ConsoleRedrawFlag,UpdateScannerShip ; Always update ship positions
 150+ 8578 3A C9 9E    >                        ld      a,(ConsoleRedrawFlag)
 150+ 857B A7          >                        and     a
 150+ 857C CC 15 91    >                        call    z, UpdateScannerShip
 151+ 857F 3A ED 83     .ProcessedDrawShip:     ld      a,(CurrentShipUniv)
 152+ 8582 3C                                   inc     a
 153+ 8583                                      JumpIfALTNusng   UniverseSlotListSize, .DrawShipLoop
 153+ 8583 FE 0C       >                        cp      UniverseSlotListSize
 153+ 8585 DA 63 85    >                        jp		c, .DrawShipLoop
 154+ 8588              .DrawSunCompass:        MMUSelectSun
 154+ 8588 ED 91 56 53 >                     nextreg SunMMU,            BankSunData
 155+ 858C CD 30 8D                             call    UpdateCompassSun                ; Always update the sun position
 156+ 858F CD 93 8F                             call    UpdateScannerSun                ; Always attempt to put the sun on the scanner
 157+ 8592              .CheckPlanetCompass:    JumpIfMemFalse SpaceStationSafeZone, .DrawStationCompass
 157+ 8592 3A CD 9E    >                        ld      a,(SpaceStationSafeZone)
 157+ 8595 A7          >                        and     a
 157+ 8596 C2 A4 85    >                        jp      nz, .DrawStationCompass
 158+ 8599              .DrawPlanetCompass:     MMUSelectPlanet
 158+ 8599 ED 91 56 54 >                     nextreg PlanetMMU,         BankPlanetData
 159+ 859D CD B0 8D                             call    UpdateCompassPlanet
 160+ 85A0 CD 54 90                             call    UpdateScannerPlanet
 161+ 85A3 C9                                   ret
 162+ 85A4              .DrawStationCompass:
 163+ 85A4
 164+ 85A4 C9                                   ret
 165+ 85A5
 166+ 85A5
 167+ 85A5              ;..................................................................................................................................
 168+ 85A5
 169+ 85A5 3E 46        TestForNextShip:        ld      a,c_Pressed_Quit
 170+ 85A7 CD 0A 9B                             call    is_key_pressed
 171+ 85AA C0                                   ret     nz
 172+ 85AB 3A EB 86                             ld      a,(currentDemoShip)
 173+ 85AE 3C                                   inc     a
 174+ 85AF FE 2C                                cp      44
 175+ 85B1 20 01                                jr      nz,.TestOK
 176+ 85B3 AF                                   xor     a
 177+ 85B4 32 EB 86     .TestOK:                ld      (currentDemoShip),a
 178+ 85B7 CD B7 A2                             call    ClearUnivSlotList
 179+ 85BA 3A EB 86                             ld      a,(currentDemoShip)
 180+ 85BD 47                                   ld      b,a
 181+ 85BE AF                                   xor     a
 182+ 85BF CD CE A2                             call    SetSlotAToTypeB
 183+ 85C2                                      MMUSelectUniverseN 2
 183+ 85C2 ED 91 56 48 >                     nextreg UniverseMMU,       BankUNIVDATA0+2
 184+ 85C6 CD 4C C5                             call    ResetUBnkData                         ; call the routine in the paged in bank, each universe bank will hold a code copy local to it
 185+ 85C9 3A EB 86                             ld      a,(currentDemoShip)
 186+ 85CC                                      MMUSelectShipBank1
 186+ 85CC ED 91 57 3B >					 nextreg ShipModelMMU,	    BankShipModels1
 187+ 85D0 CD 0F E0                             call    GetShipBankId
 188+ 85D3                                      MMUSelectShipBankA
 188+ 85D3 ED 92 57    >					 nextreg ShipModelMMU,	    a
 189+ 85D6 78                                   ld      a,b
 190+ 85D7 CD 6A E0                             call    CopyShipToUniverse
 191+ 85DA CD 04 8A                             call    SetInitialShipPosition
 192+ 85DD CD 53 87                             call    DEBUGSETNODES
 193+ 85E0 C9                                   ret
 194+ 85E1
# file closed: ./GameEngine/UpdateUniverseObjects.asm
 239  85E1              ;..................................................................................................................................
 240  85E1              ;; TODODrawForwardSun:         MMUSelectSun
 241  85E1              ;; TODO                        ld      a,(SunKShipType)
 242  85E1              ;; TODO.ProcessBody:           cp      129
 243  85E1              ;; TODO                        jr      nz,.ProcessPlanet
 244  85E1              ;; TODO.ProcessSun:            call    ProcessSun
 245  85E1              ;; TODO
 246  85E1              ;; TODOProcessSun:             call    CheckSunDistance
 247  85E1              ;; TODO
 248  85E1              ;; TODO                        ret
 249  85E1              ;; TODO.ProcessPlanet:         call    ProcessPlanet
 250  85E1              ;; TODO                        ret
 251  85E1              ;..................................................................................................................................
 252  85E1
 253  85E1
 254  85E1              ;;;ProcessUnivShip:        call    CheckVisible               ; Will check for negative Z and skip (how do we deal with read and side views? perhaps minsky transformation handles that?)
 255  85E1              ;;;                        ret     c
 256  85E1              ;;;                        ld      a,(UbnkDrawAsDot)
 257  85E1              ;;;                        and     a
 258  85E1              ;;;                        jr      z,.CarryOnWithDraw
 259  85E1              ;;;.itsJustADot:           ld      bc,(UBnkNodeArray)          ; if its at dot range
 260  85E1              ;;;                        ld      a,$FF                       ; just draw a pixel
 261  85E1              ;;;                        MMUSelectLayer2                     ; then go to update radar
 262  85E1              ;;;                        call    l2_plot_pixel               ;
 263  85E1              ;;;                        ClearCarryFlag
 264  85E1              ;;;                        ret
 265  85E1              ;;;.ProcessShipNodes:      call    ProcessShip
 266  85E1              ;;;
 267  85E1              ;;;call    ProcessNodes ; it hink here we need the star and planet special cases
 268  85E1              ;;;.DrawShip:              call    CullV2				        ; culling but over aggressive backface assumes all 0 up front TOFIX
 269  85E1              ;;;                        call    PrepLines                   ; LL72, process lines and clip, ciorrectly processing face visibility now
 270  85E1              ;;;                        ld      a,(CurrentShipUniv)
 271  85E1              ;;;                        MMUSelectUniverseA
 272  85E1              ;;;                        call   DrawLines
 273  85E1              ;;;                        ClearCarryFlag
 274  85E1              ;;;                        ret
 275  85E1
 276  85E1
 277  85E1
 278  85E1              ;----------------------------------------------------------------------------------------------------------------------------------
 279  85E1              NeedAMessageQueue:
 280  85E1
 281  85E1              ;..................................................................................................................................
 282  85E1                                      INCLUDE "./GameEngine/HyperSpaceTimers.asm"
# file opened: ./GameEngine/HyperSpaceTimers.asm
   1+ 85E1              ;----------------------------------------------------------------------------------------------------------------------------------
   2+ 85E1 3A A6 9E     UpdateCountdownNumber:  ld		a,(OuterHyperCount)
   3+ 85E4 11 3B 86                             ld		de,Hyp_counter
   4+ 85E7 0E 9C                                ld	c, -100
   5+ 85E9 CD F3 85                             call	.Num1
   6+ 85EC 0E F6                                ld	c,-10
   7+ 85EE CD F3 85                             call	.Num1
   8+ 85F1 0E FF                                ld	c,-1
   9+ 85F3 06 2F        .Num1:	                ld	b,'0'-1
  10+ 85F5 04           .Num2:	                inc		b
  11+ 85F6 81                                   add		a,c
  12+ 85F7 38 FC                                jr		c,.Num2
  13+ 85F9 91                                   sub 	c
  14+ 85FA C5                                   push	bc
  15+ 85FB F5                                   push	af
  16+ 85FC 79                                   ld		a,c
  17+ 85FD FE FF                                cp		-1
  18+ 85FF 78                                   ld		a,b
  19+ 8600 12                                   ld		(de),a
  20+ 8601 13                                   inc		de
  21+ 8602 F1                                   pop		af
  22+ 8603 C1                                   pop		bc
  23+ 8604 C9                                   ret
  24+ 8605
  25+ 8605              ;----------------------------------------------------------------------------------------------------------------------------------
  26+ 8605 54 6F 3A     Hyp_message             DB "To:"
  27+ 8608 00 00 00...  Hyp_to                  DS 32
  28+ 8628 20           Hyp_space1              DB " "
  29+ 8629 30 2E 30     Hyp_dist_amount         DB "0.0"
  30+ 862C 2E           Hyp_decimal             DB "."
  31+ 862D 30           Hyp_fraction            DB "0"
  32+ 862E 20 4C 59 00  Hyp_dis_ly              DB " LY",0
  33+ 8632 43 68 61 72  Hyp_charging            DB "Charging:"
  33+ 8636 67 69 6E 67
  33+ 863A 3A
  34+ 863B 30 30 30 00  Hyp_counter             DB "000",0
  35+ 863F 00 00 00...  Hyp_centeredTarget      DS 32
  36+ 865F 00           Hyp_centeredEol         DB 0
  37+ 8660 00 00 00...  Hyp_bufferpadding       DS 32   ; just in case we get a buffer ovverun. shoudl never get beyond 32 chars
  38+ 8680 00 00 00...  Hyp_centeredCharging    DS 32
  39+ 86A0 00           Hyp_centeredEol2        DB 0
  40+ 86A1 00 00 00...  Hyp_bufferpadding2      DS 32   ; just in case we get a buffer ovverun. shoudl never get beyond 32 chars
  41+ 86C1
  42+ 86C1
# file closed: ./GameEngine/HyperSpaceTimers.asm
 283  86C1
 284  86C1
 285  86C1
 286  86C1              ;DisplayTargetAndRange
 287  86C1              ;DisplayCountDownNumber
 288  86C1              ;----------------------------------------------------------------------------------------------------------------------------------
 289  86C1 3A EF 9D     TestPauseMode:          ld      a,(GamePaused)
 290  86C4 FE 00                                cp      0
 291  86C6 20 12                                jr      nz,.TestForResume
 292  86C8 3A E8 9D     .CheckViewMode:         ld      a,(ScreenIndex)                     ; we can only pause if not on screen view
 293  86CB                                      ReturnIfAGTENusng       ScreenFront
 293  86CB FE 09       >                        cp    ScreenFront
 293  86CD D0          >                        ret	 nc
 294  86CE 3E 40        .CheckPauseKey:         ld      a,c_Pressed_Freeze
 295  86D0 CD 0A 9B                             call    is_key_pressed
 296  86D3 C0                                   ret     nz
 297  86D4              .PausePressed:          SetAFalse                                  ; doesn't really matter if we were in pause already as resume is a different key
 297  86D4 3E FF       >                        ld      a,$FF
 298  86D6 32 EF 9D                             ld      (GamePaused),a
 299  86D9 C9                                   ret
 300  86DA 3E 42        .TestForResume:         ld      a,c_Pressed_Resume                  ; In pause loop so we can check for resume key
 301  86DC CD 0A 9B                             call    is_key_pressed
 302  86DF C0                                   ret     nz
 303  86E0 AF           .ResumePressed:         xor     a
 304  86E1 32 EF 9D                             ld      (GamePaused),a                      ; Resume pressed to reset pause state
 305  86E4 C9                                   ret
 306  86E5
 307  86E5 3E 46        TestQuit:               ld      a,c_Pressed_Quit
 308  86E7 CD 0A 9B                             call    is_key_pressed
 309  86EA C9                                   ret
 310  86EB 0D           currentDemoShip:        DB      13;$12 ; 13 - corirollis
 311  86EC
 312  86EC
 313  86EC 21 0C C0     GetStationVectorToWork: ld      hl,UBnKxlo
 314  86EF 11 FC 9D                             ld      de,varVector9ByteWork
 315  86F2 ED A0                                ldi
 316  86F4 ED A0                                ldi
 317  86F6 ED A0                                ldi
 318  86F8 ED A0                                ldi
 319  86FA ED A0                                ldi
 320  86FC ED A0                                ldi
 321  86FE ED A0                                ldi
 322  8700 ED A0                                ldi
 323  8702 ED A0                                ldi
 324  8704 2A FC 9D     .CalcNormalToXX15:      ld      hl, (varVector9ByteWork)  ; X
 325  8707 ED 5B FF 9D                          ld      de, (varVector9ByteWork+3); Y
 326  870B ED 4B 02 9E                          ld      bc, (varVector9ByteWork+6); Z
 327  870F 7D                                   ld      a,l
 328  8710 B3                                   or      e
 329  8711 B1                                   or      c
 330  8712 F6 01                                or      1
 331  8714 DD 6F                                ld      ixl,a                   ; or all bytes and with 1 so we have at least a 1
 332  8716 7C                                   ld      a,h
 333  8717 B2                                   or      d
 334  8718 B0                                   or      b                       ; or all high bytes but don't worry about 1 as its sorted on low bytes
 335  8719 C5           .MulBy2Loop:            push    bc
 336  871A DD 45                                ld      b,ixl
 337  871C CB 20                                sla     b                       ; Shift ixl left
 338  871E DD 68                                ld      ixl,b
 339  8720 C1                                   pop     bc
 340  8721 CB 17                                rl      a                       ; roll into a
 341  8723 38 0E                                jr      c,.TA2                  ; if bit rolled out of rl a then we can't shift any more to the left
 342  8725                                      ShiftHLLeft1                    ; Shift Left X
 342  8725 CB 25       >			   sla l
 342  8727 CB 14       >			   rl  h
 343  8729                                      ShiftDELeft1                    ; Shift Left Y
 343  8729 CB 23       >			   sla e
 343  872B CB 12       >			   rl  d
 344  872D                                      ShiftBCLeft1                    ; Shift Left Z
 344  872D CB 21       >			   sla c
 344  872F CB 10       >			   rl  b
 345  8731 18 E6                                jr      .MulBy2Loop              ; no need to do jr nc as the first check looks for high bits across all X Y and Z
 346  8733 3A FE 9D     .TA2:                   ld      a,(varVector9ByteWork+2); x sign
 347  8736 CB 3C                                srl     h
 348  8738 B4                                   or      h
 349  8739 32 8E C0                             ld      (XX15VecX),a         ; note this is now a signed highbyte
 350  873C 3A 01 9E                             ld      a,(varVector9ByteWork+5); y sign
 351  873F CB 3A                                srl     d
 352  8741 B2                                   or      d
 353  8742 32 8F C0                             ld      (XX15VecY),a         ; note this is now a signed highbyte
 354  8745 3A 04 9E                             ld      a,(varVector9ByteWork+8); y sign
 355  8748 CB 38                                srl     b
 356  874A B0                                   or      b
 357  874B 32 90 C0                             ld      (XX15VecZ),a         ; note this is now a signed highbyte
 358  874E CD 9D B3                             call    normaliseXX1596fast
 359  8751 C9                                   ret                          ; will return with a holding Vector Z
 360  8752
 361  8752 00           TidyCounter             DB  0
 362  8753
 363  8753                          INCLUDE "./debugMatrices.asm"
# file opened: ./debugMatrices.asm
   1+ 8753
   2+ 8753
   3+ 8753 21 76 87     DEBUGSETNODES:          ld      hl,DEBUGUBNKDATA
   4+ 8756 11 0C C0                             ld      de,UBnKxlo
   5+ 8759 01 09 00                             ld      bc,9
   6+ 875C ED B0                                ldir
   7+ 875E 21 7F 87                             ld      hl,DEBUGROTMATDATA
   8+ 8761 11 15 C0                             ld      de,UBnkrotmatSidevX
   9+ 8764 01 12 00                             ld      bc,6*3
  10+ 8767 ED B0                                ldir
  11+ 8769 C9                                   ret
  12+ 876A
  13+ 876A 21 76 87     DEBUGSETPOS:            ld      hl,DEBUGUBNKDATA
  14+ 876D 11 0C C0                             ld      de,UBnKxlo
  15+ 8770 01 06 00                             ld      bc,9 - 3
  16+ 8773 ED B0                                ldir
  17+ 8775 C9                                   ret
  18+ 8776
  19+ 8776              ; culltest
  20+ 8776              ;DEBUGUBNKDATA:          db      $00,	$00,	$00,	$00,	$00,	$00,	$31,	$03,	$00
  21+ 8776 00 00 00 00  DEBUGUBNKDATA:          db      $00,	$00,	$00,	$00,	$00,	$00,	$5C,	$07,	$00
  21+ 877A 00 00 5C 07
  21+ 877E 00
  22+ 877F 00 60 00 00  DEBUGROTMATDATA:        db      $00,	$60,	$00,	$00,	$00,	$00
  22+ 8783 00 00
  23+ 8785 00 00 00 60                          db      $00,	$00,	$00,	$60,	$00,	$00
  23+ 8789 00 00
  24+ 878B 00 00 00 00                          db      $00,	$00,	$00,	$00,	$00,	$E0
  24+ 878F 00 E0
  25+ 8791
  26+ 8791              ; FAILS due to sharp angle, OK now
  27+ 8791              ;DEBUGUBNKDATA:          db      $39,	$01,	$00,	$43,	$01,	$00,	$EF,	$03,	$00
  28+ 8791              ;DEBUGROTMATDATA:        db      $01,	$2F,	$B2,	$CC,	$4C,	$27
  29+ 8791              ;                        db      $17,	$46,	$87,	$3C,	$95,	$20
  30+ 8791              ;                        db      $E2,	$32,	$31,	$8C,	$EF,	$D1
  31+ 8791              ; TOP RIGHT CORNER Passes as python and cobra
  32+ 8791              ;DEBUGUBNKDATA:          db      $39,	$01,	$00,	$43,	$01,	$00,	$5B,	$04,	$00
  33+ 8791              ;DEBUGROTMATDATA:        db      $E2,	$03,	$3A,	$16,	$F5,	$60
  34+ 8791              ;                        db      $D3,	$CE,	$F3,	$BA,	$4E,	$0F
  35+ 8791              ;                        db      $03,	$BE,	$4A,	$4B,	$DB,	$8C
  36+ 8791              ; Looks OK
  37+ 8791              ;DEBUGUBNKDATA:          db      $39,    $01,    $00,    $43,    $01,    $00,    $EE,    $02,    $00
  38+ 8791              ;DEBUGROTMATDATA:        db      $35,    $d8,    $98,    $9f,    $b0,    $1a
  39+ 8791              ;                        db      $4B,    $26,    $CE,    $d6,    $60,    $16
  40+ 8791              ;                        db      $89,    $90,    $c4,    $9f,    $dd,    $d9
  41+ 8791              ;
  42+ 8791              ; Massive horizontal line
  43+ 8791              ; 15th line (or line 14 has corrodinates 05,00 to D8,00) which looks wrong
  44+ 8791              ; node array looks OK, looks liek its sorted as it was both -ve Y off screen fix added
  45+ 8791              ;DEBUGUBNKDATA:          db      $39,    $01,    $00,    $43,    $01,    $00,    $BD,    $03,    $00
  46+ 8791              ;DEBUGROTMATDATA:        db      $59,    $CF,    $06,    $B6,    $61,    $8D
  47+ 8791              ;                        db      $AD,    $B1,    $97,    $4F,    $C9,    $98
  48+ 8791              ;                        db      $61,    $99,    $E0,    $0D,    $11,    $5C
  49+ 8791              ; Line lost in clipping
  50+ 8791              ;DEBUGUBNKDATA:          db      $39,    $01,    $00,    $43,    $01,    $00,    $8B,    $04,    $00
  51+ 8791              ;DEBUGROTMATDATA:        db      $A3,    $4D,    $A9,    $28,    $F8,    $AF
  52+ 8791              ;                        db      $FB,    $97,    $8C,    $B5,    $FB,    $D0
  53+ 8791              ;                        db      $DB,    $3A,    $29,    $CA,    $29,    $1C
  54+ 8791              ;DEBUGUBNKDATA:          db      $5E,    $02,    $00,    $FE,    $00,    $FE,    $E5,    $09,    $00
  55+ 8791              ;DEBUGROTMATDATA:        db      $A6,    $88,    $89,    $BB,    $53,    $4D
  56+ 8791              ;                        db      $6D,    $D9,    $F0,    $99,    $BA,    $9E
  57+ 8791              ;                        db      $4A,    $A8,    $89,    $47,    $DF,    $33
  58+ 8791              ;
  59+ 8791              ;DEBUGUBNKDATA:          db      $ED,    $05,    $00,    $FE,    $00,    $FE,    $F1,    $0A,    $00
  60+ 8791              ;DEBUGROTMATDATA:        db      $1B,    $33,    $DE,    $B4,    $ED,    $C5
  61+ 8791              ;                        db      $73,    $C4,    $BC,    $1E,    $96,    $C4
  62+ 8791              ;                        db      $55,    $B9,    $35,    $D1,    $80,    $0F
  63+ 8791              ; top left off right issue
  64+ 8791              ;DEBUGUBNKDATA:          db      $39,    $01,    $00,    $43,    $01,    $00,    $2F,    $03,    $00
  65+ 8791              ;DEBUGROTMATDATA:        db      $FD,    $50,    $47,    $B0,    $53,    $9A
  66+ 8791              ;                        db      $73,    $B7,    $98,    $C8,    $80,    $A3
  67+ 8791              ;                        db      $E6,    $01,    $81,    $AD,    $B0,    $55
  68+ 8791              ; test middle of screen
  69+ 8791              ;DEBUGUBNKDATA:          db      $00,    $00,    $00,    $00,    $00,    $00,    $20,    $01,    $00
  70+ 8791              ;
  71+ 8791              ;DEBUGROTMATDATA:        db      $FD,    $50,    $47,    $B0,    $53,    $9A
  72+ 8791              ;                        db      $73,    $B7,    $98,    $C8,    $80,    $A3
  73+ 8791              ;                        db      $E6,    $01,    $81,    $AD,    $B0,    $55
  74+ 8791              ; test middle of screen futher away
  75+ 8791              ;DEBUGUBNKDATA:          db      $00,    $00,    $00,    $00,    $00,    $00,    $20,    $02,    $00
  76+ 8791              ;
  77+ 8791              ;DEBUGROTMATDATA:        db      $FD,    $50,    $47,    $B0,    $53,    $9A
  78+ 8791              ;                        db      $73,    $B7,    $98,    $C8,    $80,    $A3
  79+ 8791              ;                        db      $E6,    $01,    $81,    $AD,    $B0,    $55
  80+ 8791
  81+ 8791              ; Test left center clip still warping
  82+ 8791              ;DEBUGUBNKDATA:          db      $80,    $00,    $80,    $00,    $00,    $00,    $20,    $01,    $00
  83+ 8791              ;
  84+ 8791              ;DEBUGROTMATDATA:        db      $FD,    $50,    $47,    $B0,    $53,    $9A
  85+ 8791              ;                        db      $73,    $B7,    $98,    $C8,    $80,    $A3
  86+ 8791              ;                        db      $E6,    $01,    $81,    $AD,    $B0,    $55
  87+ 8791              ; Test right center clip - seems to be warping values towards bottom of screen on clip
  88+ 8791              ;DEBUGUBNKDATA:          db      $80,    $00,    $00,    $00,    $00,    $00,    $20,    $01,    $00
  89+ 8791              ;
  90+ 8791              ;DEBUGROTMATDATA:        db      $FD,    $50,    $47,    $B0,    $53,    $9A
  91+ 8791              ;                        db      $73,    $B7,    $98,    $C8,    $80,    $A3
  92+ 8791              ;                        db      $E6,    $01,    $81,    $AD,    $B0,    $55
  93+ 8791              ; Test top center clip test 1 - good test many ships fail
  94+ 8791              ;DEBUGUBNKDATA:          db      $19,    $00,    $00,    $50,    $00,    $00,    $20,    $01,    $00
  95+ 8791              ;
  96+ 8791              ;DEBUGROTMATDATA:        db      $FD,    $50,    $47,    $B0,    $53,    $9A
  97+ 8791              ;                        db      $73,    $B7,    $98,    $C8,    $80,    $A3
  98+ 8791              ;                        db      $E6,    $01,    $81,    $AD,    $B0,    $55
  99+ 8791              ; Test top center clip test 2 - Poss 2nd ship has an issue with a small line
 100+ 8791              ;DEBUGUBNKDATA:          db      $19,    $00,    $00,    $60,    $00,    $00,    $2F,    $01,    $00
 101+ 8791              ;
 102+ 8791              ;DEBUGROTMATDATA:        db      $FD,    $50,    $47,    $B0,    $53,    $9A
 103+ 8791              ;                        db      $73,    $B7,    $98,    $C8,    $80,    $A3
 104+ 8791              ;                        db      $E6,    $01,    $81,    $AD,    $B0,    $55
 105+ 8791              ; Test bottom center clip ; complet shambles as if its forcing cip to below 128
 106+ 8791              ; looks better now may have some clipping issues maybe ship data
 107+ 8791              ;DEBUGUBNKDATA:          db      $19,    $00,    $00,    $50,    $00,    $80,    $20,    $01,    $00
 108+ 8791              ;
 109+ 8791              ;DEBUGROTMATDATA:        db      $FD,    $50,    $47,    $B0,    $53,    $9A
 110+ 8791              ;                        db      $73,    $B7,    $98,    $C8,    $80,    $A3
 111+ 8791 E6 01 81 AD                          db      $E6,    $01,    $81,    $AD,    $B0,    $55
 111+ 8795 B0 55
 112+ 8797              ; Test left top center clip
 113+ 8797
 114+ 8797              ; Test right top center clip
 115+ 8797              ; Test left bottom center clip
 116+ 8797              ; Test right bottom center clip
 117+ 8797
 118+ 8797              ; Tests with no clip
 119+ 8797              ;DEBUGUBNKDATA:          db      $39,    $00,    $00,    $43,    $00,    $00,    $2F,    $04,    $00
 120+ 8797              ;
 121+ 8797              ;DEBUGROTMATDATA:        db      $FD,    $50,    $47,    $B0,    $53,    $9A
 122+ 8797              ;                        db      $73,    $B7,    $98,    $C8,    $80,    $A3
 123+ 8797              ;                        db      $E6,    $01,    $81,    $AD,    $B0,    $55
 124+ 8797              ;
 125+ 8797              ;DEBUGUBNKDATA:          db      $00,    $00,    $00,    $00,    $00,    $00,    $1F,    $00,    $00
 126+ 8797              ;
 127+ 8797              ; UBNKPOs example 39,01,00,43,01,00,f4,03,00
 128+ 8797              ; rotmat  example b1, 83,ae,5d,b0,1a,5e,de,82,8a,69,16,70,99,52,19,dd,d9
 129+ 8797
# file closed: ./debugMatrices.asm
 364  8797
 365  8797
 366  8797              ;TODO Optimisation
 367  8797              ; Need this table to handle differnet events
 368  8797              ; 1-main loop update - just general updates specfic to that screen that are not galaxy or stars, e.g. update heat, console
 369  8797              ; cursor key, joystick press
 370  8797              ; cursor key, joystick press
 371  8797              ; non cursor keys presses
 372  8797              ;
 373  8797              ; First byte is now docked flag
 374  8797              ;
 375  8797              ; Padded to 8 bytes to allow a * 8 for addressing
 376  8797              ; Byte 0   - Docked flag  : 0 = not applicable (always read), 1 = only whilst docked, 2 = only when not docked, 3 = No keypress allowed
 377  8797              ; Byte 1   - Screen Id
 378  8797              ; Byte 2,3 - address of keypress table
 379  8797              ; Byte 4   - Bank with Display code
 380  8797              ; Byte 5,6 - Function for display
 381  8797              ; Byte 7,8 - Main loop update routine
 382  8797              ; Byte 9   - Draw stars Y/N ; also are we in an external view that can have guns?
 383  8797              ; byte 10  - Input Blocker (set to 1 will not allow keyboard screen change until flagged, used by transition screens and pause menus)
 384  8797              ; byte 11  - Double Buffering 0 = no, 1 = yes
 385  8797              ; byte 12,13  - cursor key input routine
 386  8797              ; byte 14  - HyperspaceBlock - can not select this screen if in hyperpace - 00 can , 01 can not
 387  8797              ; byte 15    padding at the momnent (should add in an "AI enabled flag" for optimistation, hold previous value and on change create ships
 388  8797              ;
 389  8797              ;                          0    1                 2                              3                               4                    5                            6                              7                     8                       9   10  11  12                          13                          14  15
 390  8797 00 00 5B 9A  ScreenKeyMap:           DB 0,   ScreenLocal     , low addr_Pressed_LocalChart,   high addr_Pressed_LocalChart,   BankMenuShrCht,      low draw_local_chart_menu,   high draw_local_chart_menu,    $00,                  $00,                    $00,$00,$00,low local_chart_cursors,    high local_chart_cursors,   $01,$00;low loop_local_chart_menu,   high loop_local_chart_menu
 390  879B 32 FC C3 00
 390  879F 00 00 00 00
 390  87A3 5A C4 01 00
 391  87A7 00 01 59 9A  ScreenKeyGalactic:      DB 0,   ScreenGalactic  , low addr_Pressed_GalacticChrt, high addr_Pressed_GalacticChrt, BankMenuGalCht,      low draw_galactic_chart_menu,high draw_galactic_chart_menu, low loop_gc_menu,     high loop_gc_menu,      $00,$00,$00,low galctic_chart_cursors,  high galctic_chart_cursors, $01,$00
 391  87AB 33 48 C1 78
 391  87AF C2 00 00 00
 391  87B3 00 C3 01 00
 392  87B7 01 02 5D 9A                          DB 1,   ScreenMarket    , low addr_Pressed_MarketPrices, high addr_Pressed_MarketPrices, BankMenuMarket,      low draw_market_prices_menu, high draw_market_prices_menu,  low loop_market_menu, high loop_market_menu,  $00,$00,$00,$00,                        $00,                        $01,$00
 392  87BB 36 43 C3 FA
 392  87BF C3 00 00 00
 392  87C3 00 00 01 00
 393  87C7 02 03 5D 9A                          DB 2,   ScreenMarketDsp , low addr_Pressed_MarketPrices, high addr_Pressed_MarketPrices, BankMenuMarket,      low draw_market_prices_menu, high draw_market_prices_menu,  $00,                  $00,                    $00,$00,$00,$00,                        $00,                        $01,$00
 393  87CB 36 43 C3 00
 393  87CF 00 00 00 00
 393  87D3 00 00 01 00
 394  87D7 00 04 5F 9A  ScreenCmdr:             DB 0,   ScreenStatus    , low addr_Pressed_Status,       high addr_Pressed_Status,       BankMenuStatus,      low draw_status_menu,        high draw_status_menu,         low loop_STAT_menu,  high loop_STAT_menu,     $00,$00,$00,$00,                        $00,                        $01,$00
 394  87DB 3F 46 CF 8A
 394  87DF CF 00 00 00
 394  87E3 00 00 01 00
 395  87E7 00 05 61 9A                          DB 0,   ScreenInvent    , low addr_Pressed_Inventory,    high addr_Pressed_Inventory,    BankMenuInvent,      low draw_inventory_menu,     high draw_inventory_menu,      $00,                  $00,                    $00,$00,$00,$00,                        $00,                        $01,$00
 395  87EB 34 F5 C1 00
 395  87EF 00 00 00 00
 395  87F3 00 00 01 00
 396  87F7 00 06 6F 9A                          DB 0,   ScreenPlanet    , low addr_Pressed_PlanetData,   high addr_Pressed_PlanetData,   BankMenuSystem,      low draw_system_data_menu,   high draw_system_data_menu,    $00,                  $00,                    $00,$00,$00,$00,                        $00,                        $01,$00
 396  87FB 35 F0 C2 00
 396  87FF 00 00 00 00
 396  8803 00 00 01 00
 397  8807 01 07 57 9A                          DB 1,   ScreenEquip     , low addr_Pressed_Equip,        high addr_Pressed_Equip,        BankMenuEquipS,      low draw_eqshp_menu,         high draw_eqshp_menu,          low loop_eqshp_menu,  high loop_eqshp_menu,   $00,$00,$00,$00,                        $00,                        $01,$00
 397  880B 40 EA D3 86
 397  880F D4 00 00 00
 397  8813 00 00 01 00
 398  8817 01 08 51 9A                          DB 1,   ScreenLaunch    , low addr_Pressed_Launch,       high addr_Pressed_Launch,       BankLaunchShip,      low draw_launch_ship,        high draw_launch_ship,         low loop_launch_ship, high loop_launch_ship,  $00,$01,$01,$00,                        $00,                        $01,$00
 398  881B 41 79 C1 63
 398  881F C2 00 01 01
 398  8823 00 00 01 00
 399  8827 02 09 27 9A  ScreenKeyFront:         DB 2,   ScreenFront     , low addr_Pressed_Front,        high addr_Pressed_Front,        BankFrontView,       low draw_front_view,         high draw_front_view,          low update_front_view,high update_front_view, $01,$00,$01,low input_front_view,      high input_front_view,       $00,$00
 399  882B 3E 6A C0 BD
 399  882F C0 01 00 01
 399  8833 CF C2 00 00
 400  8837 02 0A 27 9A                          DB 2,   ScreenAft       , low addr_Pressed_Front,        high addr_Pressed_Front,        BankFrontView,       low draw_front_view,         high draw_front_view,          $00,                  $00,                    $01,$00,$01,low input_front_view,      high input_front_view,       $00,$00
 400  883B 3E 6A C0 00
 400  883F 00 01 00 01
 400  8843 CF C2 00 00
 401  8847 02 0B 27 9A                          DB 2,   ScreenLeft      , low addr_Pressed_Front,        high addr_Pressed_Front,        BankFrontView,       low draw_front_view,         high draw_front_view,          $00,                  $00,                    $01,$00,$01,low input_front_view,      high input_front_view,       $00,$00
 401  884B 3E 6A C0 00
 401  884F 00 01 00 01
 401  8853 CF C2 00 00
 402  8857 02 0C 27 9A                          DB 2,   ScreenRight     , low addr_Pressed_Front,        high addr_Pressed_Front,        BankFrontView,       low draw_front_view,         high draw_front_view,          $00,                  $00,                    $01,$00,$01,low input_front_view,      high input_front_view,       $00,$00
 402  885B 3E 6A C0 00
 402  885F 00 01 00 01
 402  8863 CF C2 00 00
 403  8867 03 0D FF FF                          DB 3,   ScreenDocking   , $FF,                           $FF,                            BankLaunchShip,      low draw_docking_ship,       high draw_docking_ship,        low loop_docking_ship,high loop_docking_ship, $00,$01,$01,$00,                        $00,                        $01,$00
 403  886B 41 F5 C1 98
 403  886F C2 00 01 01
 403  8873 00 00 01 00
 404  8877 01 0E FF FF                          DB 1,   ScreenHyperspace, $FF,                           $FF,                            BankFrontView,       low draw_hyperspace,         high draw_hyperspace,          low loop_hyperspace,  high loop_hyperspace,   $00,$01,$01,$00
 404  887B 3E 87 C2 CD
 404  887F C2 00 01 01
 404  8883 00
 405  8884
 406  8884              ;               DB low addr_Pressed_Aft,          high addr_Pressed_Aft,          BankMenuGalCht,      low SelectFrontView,         high SelectFrontView,          $00,$00,$00,$00,$00,$00,$00,$00,$00,$00
 407  8884              ;               DB low addr_Pressed_Left,         high addr_Pressed_Left,         BankMenuGalCht,      low SelectFrontView,         high SelectFrontView,          $00,$00,$00,$00,$00,$00,$00,$00,$00,$00
 408  8884              ;               DB low addr_Pressed_Right,        high addr_Pressed_Right,        BankMenuGalCht,      low SelectFrontView,         high SelectFrontView,          $00,$00,$00,$00,$00,$00,$00,$00,$00,$00
 409  8884              ScreenMapRow        EQU ScreenKeyGalactic - ScreenKeyMap
 410  8884              ScreenMapLen        EQU ($ - ScreenKeyMap) / ScreenMapRow
 411  8884              ScreenViewsStart    EQU (ScreenKeyFront - ScreenKeyMap)/ScreenMapRow
 412  8884 FF           ScreenTransitionForced  DB $FF
 413  8885                  INCLUDE "./GameEngine/resetUniverse.asm"
# file opened: ./GameEngine/resetUniverse.asm
   1+ 8885              ; Use bank 0 as source and bank 7 as write target
   2+ 8885              ResetUniv:              MMUSelectCpySrcN BankUNIVDATA0	         ; master universe def in bank 0
   2+ 8885 ED 91 50 46 >                     nextreg DMACpySourceMMU,	BankUNIVDATA0
   3+ 8889 3E 01                                ld		a,1             				 ; we can read bank 0 as if it was rom
   4+ 888B 06 0C                                ld		b,12
   5+ 888D C5 F5        .ResetCopyLoop:         push	bc,,af
   6+ 888F                                      MMUSelectUniverseA			             ; copy from bank 0 to 71 to 12
   6+ 888F C6 46       >                     add    a,BankUNIVDATA0
   6+ 8891 ED 92 56    >                     nextreg UniverseMMU,       a
   7+ 8894 21 00 C0                             ld		hl,UniverseBankAddr
   8+ 8897 11 00 00                             ld		de,dmaCopySrcAddr
   9+ 889A 01 96 1C                             ld		bc,UnivBankSize
  10+ 889D CD CB 99                             call	memcopy_dma
  11+ 88A0 F1 C1                                pop		bc,,af
  12+ 88A2 57                                   ld      d,a
  13+ 88A3 C6 41                                add     "A"
  14+ 88A5 32 0B C0                             ld      (StartOfUnivN),a
  15+ 88A8 7A                                   ld      a,d
  16+ 88A9 3C                                   inc		a
  17+ 88AA 10 E1                                djnz	.ResetCopyLoop
  18+ 88AC C9                                   ret
  19+ 88AD
  20+ 88AD              ; Use bank 0 as source and bank 7 as write target
  21+ 88AD              ResetGalaxy:            MMUSelectCpySrcN BankGalaxyData0	     ; master universe def in bank 0 we can read bank 0 as if it was rom
  21+ 88AD ED 91 50 5B >                     nextreg DMACpySourceMMU,	BankGalaxyData0
  22+ 88B1 3E 5C                                ld		a,BankGalaxyData1 			   	 ; and write to real location for galaxy data
  23+ 88B3 06 07                                ld		b,7                              ; 8 galaxies but we start with galaxy 0
  24+ 88B5 0E 01                                ld      c,1                              ;
  25+ 88B7 F5           .ResetCopyLoop:         push	af                               ;
  26+ 88B8 C5                                   push	bc                               ;
  27+ 88B9                                      MMUSelectGalaxyA    	                 ; copy from bank 0 to galaxy 1 to 7
  27+ 88B9 ED 92 57    >                     nextreg GalaxyDataMMU,       a
  28+ 88BC 21 00 E0                             ld		hl,GalaxyDataAddr                ; using dma transfer
  29+ 88BF 11 00 00                             ld		de,dmaCopySrcAddr                ; .
  30+ 88C2 01 DC 1C                             ld		bc,GalaxyBankSize                ; .
  31+ 88C5 CD CB 99                             call	memcopy_dma                      ; .
  32+ 88C8 C1                                   pop		bc                               ; .
  33+ 88C9 21 0F E0                             ld      hl, galaxy_pg_cnt                ; write out the galaxy page nbr to the page so we can diagnose page swapping
  34+ 88CC 79                                   ld      a,c                              ;
  35+ 88CD C6 30                                add     a, $30                           ; add $30 (48) to get ascii of galaxy nbr
  36+ 88CF 77                                   ld      (hl),a                           ; .
  37+ 88D0 0C                                   inc     c                                ; Do next bank
  38+ 88D1 F1                                   pop     af                               ; .
  39+ 88D2 3C                                   inc		a                                ; .
  40+ 88D3 10 E2                                djnz	.ResetCopyLoop                    ; .
  41+ 88D5 C9                                   ret
  42+ 88D6
  43+ 88D6 06 08        SeedAllGalaxies:        ld          b,8
  44+ 88D8 0E 5B                                ld          c,BankGalaxyData0
  45+ 88DA C5           .SeedAllGalaxiesLoop:   push        bc
  46+ 88DB 79                                   ld          a,c
  47+ 88DC                                      MMUSelectGalaxyA
  47+ 88DC ED 92 57    >                     nextreg GalaxyDataMMU,       a
  48+ 88DF CD 9F FC                             call        SeedGalaxy
  49+ 88E2 C1                                   pop         bc
  50+ 88E3 0C                                   inc         c
  51+ 88E4 10 F4                                djnz        .SeedAllGalaxiesLoop
  52+ 88E6 C9                                   ret
# file closed: ./GameEngine/resetUniverse.asm
 414  88E7
 415  88E7
 416  88E7              ;----------------------------------------------------------------------------------------------------------------------------------
 417  88E7              LaunchedFromStation:    MMUSelectSun
 417  88E7 ED 91 56 53 >                     nextreg SunMMU,            BankSunData
 418  88EB CD 85 C2                             call    CreateSunLaunched                   ; create the local sun and set position based on seed
 419  88EE                                      MMUSelectPlanet
 419  88EE ED 91 56 54 >                     nextreg PlanetMMU,         BankPlanetData
 420  88F2 CD E2 C0                             call    CreatePlanetLaunched
 421  88F5 CD B7 A2                             call    ClearUnivSlotList
 422  88F8 CD C3 A2                             call    SetSlot0ToSpaceStation              ; set slot 1 to space station
 423  88FB                                      MMUSelectUniverseN 0                        ; Prep Target universe
 423  88FB ED 91 56 46 >                     nextreg UniverseMMU,       BankUNIVDATA0+0
 424  88FF                                      MMUSelectShipBank1                          ; Bank in the ship model code
 424  88FF ED 91 57 3B >					 nextreg ShipModelMMU,	    BankShipModels1
 425  8903 FD 26 00                             ld      iyh,0                               ; Zero ship runtime data
 426  8906 FD 2E 02                             ld      iyl,ShipTypeStation                 ; and mark as spece station
 427  8909 CD C5 C6                             call    UnivInitRuntime                     ; its always slot 0
 428  890C 3E 0D                                ld      a,CoriloisStation
 429  890E CD 0F E0                             call    GetShipBankId
 430  8911                                      MMUSelectShipBankA                          ; Select the correct bank found
 430  8911 ED 92 57    >					 nextreg ShipModelMMU,	    a
 431  8914 78                                   ld      a,b                                 ; Select the correct ship
 432  8915 CD 6A E0                             call    CopyShipToUniverse
 433  8918 CD 92 C6     .BuiltStation:          call    ResetStationLaunch
 434  891B AF           .NowInFlight:           xor     a
 435  891C 32 EE 9D                             ld      (DockedFlag),a
 436  891F                                      ForceTransition ScreenFront
 436  891F 3E 09       >                        ld      a,ScreenFront
 436  8921 32 84 88    >                        ld      (ScreenTransitionForced), a
 437  8924 CD 7E A1                             call    ResetPlayerShip
 438  8927 C9                                   ret
 439  8928
 440  8928 3A D8 87     InitialiseCommander:    ld      a,(ScreenCmdr+1)
 441  892B DD 21 D7 87                          ld      ix,ScreenCmdr
 442  892F C3 3C 89                             jp      SetScreenAIX
 443  8932
 444  8932 3A 28 88     InitialiseFrontView:    ld      a,(ScreenKeyFront+1)
 445  8935 DD 21 27 88                          ld      ix,ScreenKeyFront
 446  8939 C3 3C 89                             jp      SetScreenAIX
 447  893C              ; false ret here as we get it free from jp
 448  893C
 449  893C              ;----------------------------------------------------------------------------------------------------------------------------------
 450  893C 32 E8 9D     SetScreenAIX:           ld      (ScreenIndex),a                 ; Set screen index to a
 451  893F                                      ClearForceTransition                    ; In case it was called by a brute force change in an update loop
 451  893F 3E FF       >                        ld      a,$FF
 451  8941 32 84 88    >                        ld      (ScreenTransitionForced),a
 452  8944 32 E7 9D                             ld      (ScreenChanged),a               ; Set screen changed to FF
 453  8947 DD 7E 09     .IsItAViewPort:         ld      a,(ix+9)                        ; Screen Map Byte 9  - Draw stars Y/N and also guns present
 454  894A 32 3C 81                             ld      (CheckIfViewUpdate+1),a         ; Set flag to determine if we are on an exterior view
 455  894D                                      JumpIfAIsZero .NotViewPort              ;
 455  894D A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
 455  894E CA 5D 89    >                        jp	    z, .NotViewPort
 456  8951 DD 7E 01                             ld      a,(ix+1)                        ; get screen view number
 457  8954 D6 09                                sub     ScreenFront                     ; Now a = screen number 0 = front, 1 = aft, 2 = left 3 = right
 458  8956                                      MMUSelectCommander                      ; Load view laser to current
 458  8956 ED 91 57 38 >                     nextreg CommanderMMU,       BankCommander
 459  895A CD F4 E2                             call    LoadLaserToCurrent              ;
 460  895D DD 7E 04     .NotViewPort:           ld      a,(ix+4)                        ; Screen Map Byte 4   - Bank with Display code
 461  8960 32 D8 81                             ld      (ScreenLoopBank+1),a            ; setup loop
 462  8963 32 0A 81                             ld      (HandleBankSelect+1),a          ; setup cursor keys
 463  8966                                      MMUSelectScreenA
 463  8966 ED 92 56    >                     nextreg ScreenBankMMU,		a
 464  8969 DD 7E 05                             ld      a,(ix+5)                        ; Screen Map Byte 5 - Function for display
 465  896C 32 9A 89                             ld      (ScreenUpdateAddr+1),a
 466  896F DD 7E 06                             ld      a,(ix+6)                        ; Screen Map Byte 6 - Function for display
 467  8972 32 9B 89                             ld      (ScreenUpdateAddr+2),a
 468  8975 DD 7E 07                             ld      a,(ix+7)                        ; Screen Map Byte 7 - Main loop update routine
 469  8978 32 DD 81                             ld      (ScreenLoopJP+1),a
 470  897B DD 7E 08                             ld      a,(ix+8)                        ; Screen Map Byte 8 - Main loop update routine
 471  897E 32 DE 81                             ld      (ScreenLoopJP+2),a
 472  8981 DD 7E 0A                             ld      a,(ix+10)                       ; Screen Map Byte 10  - Input Blocker (set to 1 will not allow keyboard screen change until flagged, used by transition screens and pause menus)
 473  8984 32 E5 80                             ld      (InputBlockerCheck+1),a          ; Set flag to block transitions as needed e.g. launch screen
 474  8987 DD 7E 0B                             ld      a,(ix+11)                       ; Screen Map Byte 11  - Double Buffering 0 = no, 1 = yes
 475  898A 32 AE 83                             ld      (DoubleBufferCheck+1),a
 476  898D DD 7E 0C                             ld      a,(ix+12)
 477  8990 32 0F 81                             ld      (CallCursorRoutine+1),a
 478  8993 DD 7E 0D                             ld      a,(ix+13)
 479  8996 32 10 81                             ld      (CallCursorRoutine+2),a
 480  8999
 481  8999 C3 00 00     ScreenUpdateAddr:       jp      $0000                          ; We can just drop out now and also get a free ret from caller
 482  899C              ;----------------------------------------------------------------------------------------------------------------------------------
 483  899C 3A E8 9D     ViewKeyTest:            ld      a,(ScreenIndex)
 484  899F 4F                                   ld      c,a
 485  89A0 06 0E                                ld      b,ScreenMapLen                  ; For now until add screens are added
 486  89A2 DD 21 97 87                          ld      ix,ScreenKeyMap
 487  89A6 2A A5 9E                             ld      hl,(InnerHyperCount)
 488  89A9 7C                                   ld      a,h
 489  89AA B5                                   or      l
 490  89AB FD 67                                ld      iyh,a
 491  89AD FD 7C        ViewScanLoop:           ld      a,iyh
 492  89AF A7           .HyperspaceCountdown:   and     a
 493  89B0 28 08                                jr      z,.DockedFlag
 494  89B2 DD 7E 0E                             ld      a,(ix+14)
 495  89B5 FE 01                                cp      1
 496  89B7 CA FC 89                             jp      z,NotReadNextKey
 497  89BA DD 7E 00     .DockedFlag:            ld      a,(ix+0)                        ; Screen Map Byte 0 Docked flag
 498  89BD              ; 0 = not applicable (always read), 1 = only whilst docked, 2 = only when not docked, 3 = No keypress allowed
 499  89BD FE 03                                cp      3                               ; if not selectable then don't scan this (becuase its a transition screen)
 500  89BF 28 3B                                jr      z,NotReadNextKey                ;
 501  89C1 FE 00                                cp      0                               ; if itr a always read skip docking check
 502  89C3 28 14                                jr      z,.NoDocCheck
 503  89C5 57           .DocCheck:              ld      d,a
 504  89C6 3A EE 9D                             ld      a,(DockedFlag)
 505  89C9 FE 00                                cp      0                               ; if we are docked
 506  89CB 28 07                                jr      z,.NotDockedCheck
 507  89CD 7A           .DockedCheck:           ld      a,d
 508  89CE FE 01                                cp      1                               ; if we are docked and its a dock only then scan
 509  89D0 20 2A                                jr      nz,NotReadNextKey
 510  89D2 18 05                                jr      .NoDocCheck
 511  89D4 7A           .NotDockedCheck:        ld      a,d
 512  89D5 FE 02                                cp      2                               ; if we are not docked and its a flight only then scan
 513  89D7 20 23                                jr      nz,NotReadNextKey
 514  89D9 DD 7E 01     .NoDocCheck:            ld      a,(ix+1)                        ; Screen Map Byte 1 Screen Id
 515  89DC B9                                   cp      c                               ; is the index the current screen, if so skip the scan
 516  89DD 5F                                   ld      e,a
 517  89DE 28 1C                                jr      z,NotReadNextKey
 518  89E0 DD 7E 02                             ld      a,(ix+2)                        ; Screen Map Byte 2 - address of keypress table
 519  89E3 FE FF                                cp      $FF                             ; if upper byte is FF then we do not respond
 520  89E5 28 15                                jr      z,NotReadNextKey
 521  89E7 32 F1 89                             ld      (ReadKeyAddr+1),a               ; Poke address into the ld hl,(....) below
 522  89EA DD 7E 03                             ld      a,(ix+3)                        ; Screen Map Byte 3 - address of keypress table
 523  89ED 32 F2 89                             ld      (ReadKeyAddr+2),a
 524  89F0 2A 00 00     ReadKeyAddr:            ld      hl,($0000)                      ; address is entry in the pointer table to the actual keypress
 525  89F3 7E                                   ld      a,(hl)                          ; now fetch the actual keypress
 526  89F4                                      JumpIfAIsZero NotReadNextKey
 526  89F4 A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
 526  89F5 CA FC 89    >                        jp	    z, NotReadNextKey
 527  89F8 7B           .ValidScreenChange:     ld      a,e
 528  89F9 C3 3C 89                             jp      SetScreenAIX
 529  89FC              ;--- CODE WILL NOT FALL TO HERE ---
 530  89FC 11 10 00     NotReadNextKey:         ld      de,ScreenMapRow
 531  89FF DD 19                                add     ix,de                           ; we have only processed 3 of 8 bytes at here
 532  8A01 10 AA                                djnz    ViewScanLoop
 533  8A03 C9                                   ret
 534  8A04
 535  8A04 21 00 00     SetInitialShipPosition: ld      hl,$0000
 536  8A07 22 0C C0                             ld      (UBnKxlo),hl
 537  8A0A 21 00 00                             ld      hl,$0000
 538  8A0D 22 0F C0                             ld      (UBnKylo),hl
 539  8A10 21 B4 03                             ld      hl,$03B4
 540  8A13 22 12 C0                             ld      (UBnKzlo),hl
 541  8A16 AF                                   xor     a
 542  8A17 32 0E C0                             ld      (UBnKxsgn),a
 543  8A1A 32 11 C0                             ld      (UBnKysgn),a
 544  8A1D 32 14 C0                             ld      (UBnKzsgn),a
 545  8A20              ;    call    Reset TODO
 546  8A20 CD 60 C8                             call	InitialiseOrientation            ;#00;
 547  8A23 3E 01                                ld      a,1
 548  8A25 32 DB 9D                             ld      (DELTA),a
 549  8A28 21 04 00                             ld      hl,4
 550  8A2B 22 DC 9D                             ld      (DELTA4),hl
 551  8A2E C9                                   ret
 552  8A2F
 553  8A2F              ; Checks to see if current ship swapped in is in our sights
 554  8A2F              ; we don;t need to deal with planets or sun as they have their own memory bank
 555  8A2F              ShipInSights:           ClearCarryFlag                          ; Carry clear no hit
 555  8A2F B7          >                        or a
 556  8A30                                      ReturnIfMemIsNegative UBnKzsgn
 556  8A30 3A 14 C0    >                        ld      a,(UBnKzsgn)
 556  8A33 E6 80       >                        and     $80
 556  8A35 C0          >                        ret     nz
 557  8A36 3A 3D C0                             ld      a,(UBnKexplDsp)                 ; get exploding flag and or with x and y high
 558  8A39 2A 0C C0                             ld      hl,(UBnKxlo)                    ; do 16 bit fetch as we will often need both bytes
 559  8A3C ED 4B 0F C0                          ld      bc,(UBnKylo)                    ; .
 560  8A40 B4                                   or      h
 561  8A41 B0                                   or      b
 562  8A42 C0                                   ret     nz                              ; if exploding or x hi or y hi are set then its nto targetable
 563  8A43 7D                                   ld      a,l                             ; hl =xlo ^ 2
 564  8A44                                      DEEquSquareA                            ; .
 564  8A44 57          >                        ld  d,a
 564  8A45 5F          >                        ld  e,a
 564  8A46 ED 30       >                        mul de
 565  8A48 62 6B                                ld      hl,de                           ; .
 566  8A4A 79                                   ld      a,c                             ; de = de = ylo ^ 2
 567  8A4B                                      DEEquSquareA                            ; .
 567  8A4B 57          >                        ld  d,a
 567  8A4C 5F          >                        ld  e,a
 567  8A4D ED 30       >                        mul de
 568  8A4F 19                                   add     hl,de                           ; hl = xlo ^ 2 + ylo ^ 2
 569  8A50 D8                                   ret     c                               ; if there was a carry then out of line of sight
 570  8A51 ED 5B 17 C3                          ld      de,(MissileLockLoAddr)          ; get targettable area ^ 2 from blueprint copy
 571  8A55                                      cpHLDE                                  ; now compare x^2 + y^2 to target area
 571  8A55 E5          >                        push    hl
 571  8A56 A7          >                        and     a
 571  8A57 ED 52       >                        sbc     hl,de
 571  8A59 E1          >                        pop     hl
 572  8A5A 28 01                                jr      z,.EdgeHit                      ; if its an edge hit then we need to set carry
 573  8A5C C9                                   ret                                     ; if its < area then its a hit and carry is set, we will not work on =
 574  8A5D              .EdgeHit:               SetCarryFlag                            ; its an edge hit then we need to set carry
 574  8A5D 37          >                        scf
 575  8A5E C9                                   ret
 576  8A5F
 577  8A5F
 578  8A5F                          INCLUDE "./Views/ConsoleDrawing.asm"
# file opened: ./Views/ConsoleDrawing.asm
   1+ 8A5F              ; bc = start position, d = length, e = colour
   2+ 8A5F 1E 10        Draw3LineBar:           ld      e,16
   3+ 8A61 C5 D5                                push    bc,,de
   4+ 8A63                                      MMUSelectLayer2
   4+ 8A63 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
   5+ 8A67 CD B5 E2                             call    l2_draw_horz_line
   6+ 8A6A D1 C1                                pop     bc,,de
   7+ 8A6C 05                                   dec     b
   8+ 8A6D C5 D5                                push    bc,,de
   9+ 8A6F 1E 14                                ld      e,20
  10+ 8A71                                      MMUSelectLayer2
  10+ 8A71 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
  11+ 8A75 CD B5 E2                             call    l2_draw_horz_line
  12+ 8A78 D1 C1                                pop     bc,,de
  13+ 8A7A 05                                   dec     b
  14+ 8A7B                                      MMUSelectLayer2
  14+ 8A7B ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
  15+ 8A7F CD B5 E2                             call    l2_draw_horz_line
  16+ 8A82 C9                                   ret
  17+ 8A83
  18+ 8A83 1E 7C        DrawColourCodedBar:     ld      e,124
  19+ 8A85 FE 28                                cp      40
  20+ 8A87 30 18                                jr      nc,DrawColourEBar
  21+ 8A89 1E 54                                ld      e,84
  22+ 8A8B FE 1E                                cp      30
  23+ 8A8D 30 12                                jr      nc,DrawColourEBar
  24+ 8A8F 1E D8                                ld      e,216
  25+ 8A91 FE 14                                cp      20
  26+ 8A93 1E EC                                ld      e,236
  27+ 8A95 FE 0A                                cp      10
  28+ 8A97 30 08                                jr      nc,DrawColourEBar
  29+ 8A99 1E E1                                ld      e,225
  30+ 8A9B FE 05                                cp      5
  31+ 8A9D 30 02                                jr      nc,DrawColourEBar
  32+ 8A9F 1E E0                                ld      e,224
  33+ 8AA1 C5 D5        DrawColourEBar:         push    bc,,de
  34+ 8AA3                                      MMUSelectLayer2
  34+ 8AA3 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
  35+ 8AA7 CD B5 E2                             call    l2_draw_horz_line
  36+ 8AAA D1 C1                                pop     bc,,de
  37+ 8AAC 05                                   dec     b
  38+ 8AAD C5 D5                                push    bc,,de
  39+ 8AAF                                      MMUSelectLayer2
  39+ 8AAF ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
  40+ 8AB3 CD B5 E2                             call    l2_draw_horz_line
  41+ 8AB6 D1 C1                                pop     bc,,de
  42+ 8AB8 05                                   dec     b
  43+ 8AB9                                      MMUSelectLayer2
  43+ 8AB9 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
  44+ 8ABD CD B5 E2                             call    l2_draw_horz_line
  45+ 8AC0 C9                                   ret
  46+ 8AC1
  47+ 8AC1                                      ; no ret needed as jp handles it
  48+ 8AC1
  49+ 8AC1
  50+ 8AC1 3A DB 9D     UpdateConsole:          ld      a,(DELTA)
  51+ 8AC4 FE 00                                cp      0                           ; don't draw if there is nothing to draw
  52+ 8AC6 28 0C                                jr      z,.UpdateRoll
  53+ 8AC8 01 D1 84                             ld      bc,SpeedoStart
  54+ 8ACB 21 2B A1                             ld      hl,SpeedoMapping
  55+ 8ACE ED 31                                add     hl,a
  56+ 8AD0 56                                   ld      d,(hl)
  57+ 8AD1 CD 5F 8A                             call    Draw3LineBar
  58+ 8AD4 3A F6 9C     .UpdateRoll:            ld      a,(ALP1)
  59+ 8AD7 FE 00                                cp      0
  60+ 8AD9 CA 0D 8B                             jp      z,.UpdatePitch
  61+ 8ADC 21 E0 8C                             ld      hl,RollMiddle
  62+ 8ADF 3A F7 9C                             ld      a,(ALP2)
  63+ 8AE2 FE 00                                cp      0
  64+ 8AE4 CA FF 8A                             jp     z,.PosRoll
  65+ 8AE7 16 00        .NegRoll:               ld      d,0
  66+ 8AE9 3A F6 9C                             ld      a,(ALP1)
  67+ 8AEC CB 27                                sla     a
  68+ 8AEE 5F                                   ld      e,a
  69+ 8AEF B7                                   or      a
  70+ 8AF0 ED 52                                sbc     hl,de
  71+ 8AF2 44 4D                                ld      bc,hl
  72+ 8AF4 3E E1                                ld      a,DialMiddleXPos
  73+ 8AF6 91                                   sub     c
  74+ 8AF7 57                                   ld      d,a
  75+ 8AF8 1E FF                                ld      e,$FF
  76+ 8AFA CD 5F 8A                             call    Draw3LineBar
  77+ 8AFD 18 0E                                jr      .UpdatePitch
  78+ 8AFF 01 E0 8C     .PosRoll:               ld      bc,RollMiddle
  79+ 8B02 3A F6 9C                             ld      a,(ALP1)
  80+ 8B05 CB 27                                sla     a
  81+ 8B07 57                                   ld      d,a
  82+ 8B08 1E FF                                ld      e,$FF
  83+ 8B0A CD 5F 8A                             call    Draw3LineBar
  84+ 8B0D 3A EA 9C     .UpdatePitch:           ld      a,(BET1)
  85+ 8B10 FE 00                                cp      0
  86+ 8B12 CA 47 8B                             jp      z,.Fuel
  87+ 8B15 21 E0 94                             ld      hl,PitchMiddle
  88+ 8B18 3A EB 9C                             ld      a,(BET2)
  89+ 8B1B FE 00                                cp      0
  90+ 8B1D CA 39 8B                             jp      z,.PosPitch
  91+ 8B20 16 00        .NegPitch:              ld      d,0
  92+ 8B22 3A EA 9C                             ld      a,(BET1)
  93+ 8B25 CB 27                                sla     a
  94+ 8B27 5F                                   ld      e,a
  95+ 8B28 B7                                   or      a
  96+ 8B29 ED 52                                sbc     hl,de
  97+ 8B2B 44 4D                                ld      bc,hl
  98+ 8B2D 3E E1                                ld      a,DialMiddleXPos
  99+ 8B2F 91                                   sub     c
 100+ 8B30 57                                   ld      d,a
 101+ 8B31 1E FF                                ld      e,$FF
 102+ 8B33 CD 5F 8A                             call    Draw3LineBar
 103+ 8B36 C3 47 8B                             jp      .Fuel
 104+ 8B39 01 E0 94     .PosPitch:              ld      bc,PitchMiddle
 105+ 8B3C 3A EA 9C                             ld      a,(BET1)
 106+ 8B3F CB 27                                sla     a
 107+ 8B41 57                                   ld      d,a
 108+ 8B42 1E FF                                ld      e,$FF
 109+ 8B44 CD 5F 8A                             call    Draw3LineBar
 110+ 8B47 3A 45 A3     .Fuel:                  ld      a,(Fuel)
 111+ 8B4A CB 3F                                srl     a               ; divide by 4 to get range on screen
 112+ 8B4C 21 06 A1                             ld      hl,FuelMapping
 113+ 8B4F ED 31                                add     hl,a
 114+ 8B51 7E                                   ld      a,(hl)
 115+ 8B52 01 10 94                             ld      bc,FuelStart
 116+ 8B55 57                                   ld      d,a
 117+ 8B56 CD 83 8A                             call    DrawColourCodedBar
 118+ 8B59 3A DA A0     .FrontShield:           ld      a,(ForeShield)
 119+ 8B5C CB 3F                                srl     a
 120+ 8B5E CB 3F                                srl     a
 121+ 8B60 CB 3F                                srl     a
 122+ 8B62 01 10 84                             ld      bc,FShieldStart
 123+ 8B65 57                                   ld      d,a
 124+ 8B66 CD 83 8A                             call    DrawColourCodedBar
 125+ 8B69 3A DB A0     .AftShield:             ld      a,(AftShield)
 126+ 8B6C CB 3F                                srl     a
 127+ 8B6E CB 3F                                srl     a
 128+ 8B70 CB 3F                                srl     a
 129+ 8B72 01 10 8D                             ld      bc,AShieldStart
 130+ 8B75 57                                   ld      d,a
 131+ 8B76 CD 83 8A                             call    DrawColourCodedBar
 132+ 8B79              ;PlayerEnergy
 133+ 8B79              ; BNEED LASER temp
 134+ 8B79              ; NEED CABIN TEMP
 135+ 8B79              ;NEED ALTITUDE
 136+ 8B79              ; Draw compas - if in range draw station, else do planet
 137+ 8B79 3A DC A0     .EnergyBars:            ld      a,(PlayerEnergy)
 138+ 8B7C CB 3F                                srl     a                   ; energy = energy / 2 so 31 per bar
 139+ 8B7E                                      JumpIfALTNusng  31 + 1,     Draw1EnergyBar
 139+ 8B7E FE 20       >                        cp      31 + 1
 139+ 8B80 DA 91 8B    >                        jp		c, Draw1EnergyBar
 140+ 8B83                                      JumpIfALTNusng  (31*2) + 1, Draw2EnergyBars
 140+ 8B83 FE 3F       >                        cp      (31*2) + 1
 140+ 8B85 DA 9B 8B    >                        jp		c, Draw2EnergyBars
 141+ 8B88                                      JumpIfALTNusng  (31*3) + 1, Draw3EnergyBars
 141+ 8B88 FE 5E       >                        cp      (31*3) + 1
 141+ 8B8A DA B1 8B    >                        jp		c, Draw3EnergyBars
 142+ 8B8D C3 D3 8B                             jp      Draw4EnergyBars
 143+ 8B90              ; implicit ret
 144+ 8B90
 145+ 8B90
 146+ 8B90              ; NEED ENERGY BAR
 147+ 8B90
 148+ 8B90 C9           .DoneConsole:           ret
 149+ 8B91
 150+ 8B91 1E E0        Draw1EnergyBar:         ld      e,224
 151+ 8B93 57                                   ld      d,a
 152+ 8B94 01 D5 BD                             ld      bc,EnergyBar1Start
 153+ 8B97 CD A1 8A                             call    DrawColourEBar
 154+ 8B9A C9                                   ret
 155+ 8B9B 1E D8        Draw2EnergyBars:        ld      e,216
 156+ 8B9D D6 1F                                sub     31
 157+ 8B9F 57                                   ld      d,a
 158+ 8BA0 01 D5 B5                             ld      bc,EnergyBar2Start
 159+ 8BA3 CD A1 8A                             call    DrawColourEBar
 160+ 8BA6 16 1F                                ld      d,31
 161+ 8BA8 1E D8                                ld      e,216
 162+ 8BAA 01 D5 BD                             ld      bc,EnergyBar1Start
 163+ 8BAD CD A1 8A                             call    DrawColourEBar
 164+ 8BB0 C9                                   ret
 165+ 8BB1 1E 14        Draw3EnergyBars:        ld      e,20
 166+ 8BB3 D6 3E                                sub     31*2
 167+ 8BB5 57                                   ld      d,a
 168+ 8BB6 1E 14                                ld      e,20
 169+ 8BB8 01 D5 AD                             ld      bc,EnergyBar3Start
 170+ 8BBB CD A1 8A                             call    DrawColourEBar
 171+ 8BBE 16 1F                                ld      d,31
 172+ 8BC0 1E 14                                ld      e,20
 173+ 8BC2 01 D5 B5                             ld      bc,EnergyBar2Start
 174+ 8BC5 CD A1 8A                             call    DrawColourEBar
 175+ 8BC8 16 1F                                ld      d,31
 176+ 8BCA 1E 14                                ld      e,20
 177+ 8BCC 01 D5 BD                             ld      bc,EnergyBar1Start
 178+ 8BCF CD A1 8A                             call    DrawColourEBar
 179+ 8BD2 C9                                   ret
 180+ 8BD3 1E 18        Draw4EnergyBars:        ld      e,24
 181+ 8BD5 D6 5D                                sub     31*3
 182+ 8BD7                                      JumpIfALTNusng 31,.NoMax
 182+ 8BD7 FE 1F       >                        cp      31
 182+ 8BD9 DA DE 8B    >                        jp		c, .NoMax
 183+ 8BDC 3E 1F        .Max                    ld      a,31
 184+ 8BDE 57           .NoMax:                 ld      d,a
 185+ 8BDF 01 D5 A5                             ld      bc,EnergyBar4Start
 186+ 8BE2 CD A1 8A                             call    DrawColourEBar
 187+ 8BE5 16 1F                                ld      d,31
 188+ 8BE7 1E 18                                ld      e,24
 189+ 8BE9 01 D5 AD                             ld      bc,EnergyBar3Start
 190+ 8BEC CD A1 8A                             call    DrawColourEBar
 191+ 8BEF 16 1F                                ld      d,31
 192+ 8BF1 1E 18                                ld      e,24
 193+ 8BF3 01 D5 B5                             ld      bc,EnergyBar2Start
 194+ 8BF6 CD A1 8A                             call    DrawColourEBar
 195+ 8BF9 16 1F                                ld      d,31
 196+ 8BFB 1E 18                                ld      e,24
 197+ 8BFD 01 D5 BD                             ld      bc,EnergyBar1Start
 198+ 8C00 CD A1 8A                             call    DrawColourEBar
 199+ 8C03 C9                                   ret
 200+ 8C04
 201+ 8C04              ScannerBottom           equ 190
 202+ 8C04              ScannerTypeMissle       equ 2
 203+ 8C04              ScannerXRangeOffset     equ $35
 204+ 8C04              ScannerCenter           equ 127
 205+ 8C04
 206+ 8C04              ScannerDefault          equ 0
 207+ 8C04              ScannerMissile          equ 2
 208+ 8C04              ScannerStation          equ 4
 209+ 8C04              ScannerEnemy            equ 6
 210+ 8C04
 211+ 8C04
 212+ 8C04 00           SunXScaled              DB  0
 213+ 8C05 00           SunYScaled              DB  0
 214+ 8C06 00           SunZScaled              DB  0
 215+ 8C07
 216+ 8C07
 217+ 8C07 18 1C 90 FC  ScannerColourTable:     DB  L2ColourGREEN_2, L2ColourGREEN_1, L2ColourYELLOW_4,L2ColourYELLOW_1,L2ColourCYAN_2,L2ColourCYAN_1,L2ColourRED_4,L2ColourPINK_4
 217+ 8C0B 12 1F 80 E0
 218+ 8C0F C0 E0        ScannerColourTableAngry:DB  L2ColourRED_2, L2ColourRED_1 ; just a place holder for now
 219+ 8C11
 220+ 8C11              GetShipColor:           MACRO
 221+ 8C11 ~                                    ld      a,(ShipTypeAddr)
 222+ 8C11 ~                                    sla     a                            ; as its byte pairs * 2
 223+ 8C11 ~                                    ld      hl,ScannerColourTable
 224+ 8C11 ~                                    add     hl,a
 225+ 8C11 ~                                    ld      a,(hl)
 226+ 8C11                                      ENDM
 227+ 8C11              GetShipColorBright:     MACRO
 228+ 8C11 ~                                    ld      a,(ShipTypeAddr)
 229+ 8C11 ~                                    sla     a                            ; as its byte pairs * 2
 230+ 8C11 ~                                    inc     a
 231+ 8C11 ~                                    ld      hl,ScannerColourTable
 232+ 8C11 ~                                    add     hl,a
 233+ 8C11 ~                                    ld      a,(hl)
 234+ 8C11                                      ENDM
 235+ 8C11
 236+ 8C11              Shift24BitScan:         MACRO   regHi, reglo
 237+ 8C11 ~                                    ld      hl,(regHi)
 238+ 8C11 ~                                    ld      b,h
 239+ 8C11 ~                                    ld      a,h
 240+ 8C11 ~                                    and     SignMask8Bit
 241+ 8C11 ~                                    ld      h,a
 242+ 8C11 ~                                    ld      a,(reglo)
 243+ 8C11 ~                                    sla     a
 244+ 8C11 ~                                    rl      l
 245+ 8C11 ~                                    rl      h
 246+ 8C11 ~                                    sla     a
 247+ 8C11 ~                                    rl      l
 248+ 8C11 ~                                    rl      h
 249+ 8C11 ~                                    sla     a
 250+ 8C11 ~                                    rl      l
 251+ 8C11 ~                                    rl      h
 252+ 8C11 ~                                    sla     a
 253+ 8C11 ~                                    rl      l
 254+ 8C11 ~                                    rl      h
 255+ 8C11 ~                                    sla     a
 256+ 8C11 ~                                    rl      l
 257+ 8C11 ~                                    rl      h
 258+ 8C11 ~                                    sla     a
 259+ 8C11 ~                                    rl      l
 260+ 8C11 ~                                    rl      h
 261+ 8C11                                      ENDM
 262+ 8C11
 263+ 8C11              SunShiftRight           MACRO   reglo, reghi, regsgn
 264+ 8C11 ~                                    ld      a,regsgn
 265+ 8C11 ~                                    srl     a
 266+ 8C11 ~                                    rr      reghi
 267+ 8C11 ~                                    rr      reglo
 268+ 8C11 ~                                    ld      regsgn,a
 269+ 8C11                                      ENDM
 270+ 8C11
 271+ 8C11              ;SunShiftPosTo15Bit:     ld      de,(SBnKzlo)
 272+ 8C11              ;                        ld      a,(SBnKzsgn)
 273+ 8C11              ;                        push    af
 274+ 8C11              ;                        and     SignMask8Bit
 275+ 8C11              ;                        ld      iyl,a
 276+ 8C11              ;                        ld      hl,(SBnKxlo)
 277+ 8C11              ;                        ld      a,(SBnKxsgn)
 278+ 8C11              ;                        push    af
 279+ 8C11              ;                        and     SignMask8Bit
 280+ 8C11              ;                        ld      ixl,a
 281+ 8C11              ;                        ld      bc,(SBnKylo)
 282+ 8C11              ;                        ld      a,(SBnKysgn)
 283+ 8C11              ;                        and     SignMask8Bit
 284+ 8C11              ;                        push    af
 285+ 8C11              ;                        ld      iyh,a
 286+ 8C11              ;.ShiftLoop:             ld      a,iyh
 287+ 8C11              ;                        or      iyl
 288+ 8C11              ;                        or      ixl
 289+ 8C11              ;                        jr      z,.ShiftBit15
 290+ 8C11              ;.ShiftZ:                SunShiftRight iyl, d, e
 291+ 8C11              ;.ShiftX:                SunShiftRight ixl, h, l
 292+ 8C11              ;.ShiftY:                SunShiftRight ixh, b, c
 293+ 8C11              ;                        jr      .ShipLoop
 294+ 8C11              ;.ShiftBit15:            ld      a,iyh
 295+ 8C11              ;                        or      iyl
 296+ 8C11              ;                        or      ixl
 297+ 8C11              ;                        jr      z,.CompletedShift
 298+ 8C11              ;.ShiftZ:                SunShiftRight iyl, d, e
 299+ 8C11              ;.ShiftX:                SunShiftRight ixl, h, l
 300+ 8C11              ;.ShiftY:                SunShiftRight ixh, b, c             ; finally shift to 15 bits so we can get the sign back
 301+ 8C11              ;.CompletedShift:        pop     af                          ; get ysgn
 302+ 8C11              ;                        and     SignOnly8Bit
 303+ 8C11              ;                        or      b
 304+ 8C11              ;                        ld      b,a
 305+ 8C11              ;                        pop     af                          ; get xsgn
 306+ 8C11              ;                        and     SignOnly8Bit
 307+ 8C11              ;                        or      h
 308+ 8C11              ;                        ld      h,a
 309+ 8C11              ;                        pop     af                          ; get zsgn
 310+ 8C11              ;                        and     SignOnly8Bit
 311+ 8C11              ;                        or      d
 312+ 8C11              ;                        ld      d,a
 313+ 8C11              ;                        ret
 314+ 8C11              ;
 315+ 8C11 ED 5B 17 C0  ScalePlanetPos:         ld      de,(PBnKzhi)                ; de = abs z & save sign on stack
 316+ 8C15 7A                                   ld      a,d                         ; .
 317+ 8C16 F5                                   push    af                          ; .
 318+ 8C17 E6 7F                                and     SignMask8Bit                ; .
 319+ 8C19 57                                   ld      d,a                         ; .
 320+ 8C1A 2A 11 C0                             ld      hl,(PBnKxhi)                ; hl = abs x & save sign on stack
 321+ 8C1D 7C                                   ld      a,h                         ; .
 322+ 8C1E F5                                   push    af                          ; .
 323+ 8C1F E6 7F                                and     SignMask8Bit                ; .
 324+ 8C21 67                                   ld      h,a                         ; .
 325+ 8C22 ED 4B 14 C0                          ld      bc,(PBnKyhi)                ; bc = abs y & save sign on stack
 326+ 8C26 78                                   ld      a,b                         ; .
 327+ 8C27 F5                                   push    af                          ; .
 328+ 8C28 E6 7F                                and     SignMask8Bit                ; .
 329+ 8C2A 47                                   ld      b,a                         ; .
 330+ 8C2B 78           .ShiftLoop:             ld      a,b                         ; Scale down to an 8 bit value
 331+ 8C2C B2                                   or      d                           ; .
 332+ 8C2D B4                                   or      h                           ; .
 333+ 8C2E 28 0E                                jr      z,.Shifted                  ; .
 334+ 8C30                                      ShiftBCRight1                       ; .
 334+ 8C30 CB 38       >			   srl b
 334+ 8C32 CB 19       >			   rr  c
 335+ 8C34                                      ShiftHLRight1                       ; .
 335+ 8C34 CB 3C       >			   srl h
 335+ 8C36 CB 1D       >			   rr  l
 336+ 8C38                                      ShiftDERight1                       ; .
 336+ 8C38 CB 3A       >			   srl d
 336+ 8C3A CB 1B       >			   rr  e
 337+ 8C3C 18 ED                                jr      .ShiftLoop
 338+ 8C3E 79           .Shifted:               ld      a,c                         ; See if we already have 7 bit
 339+ 8C3F B5                                   or      l                           ;
 340+ 8C40 B3                                   or      e                           ;
 341+ 8C41 E6 80                                and     $80                         ;
 342+ 8C43 28 0C                                jr      z,.NoAdditionalShift        ;
 343+ 8C45                                      ShiftBCRight1                       ; we want 7 bit
 343+ 8C45 CB 38       >			   srl b
 343+ 8C47 CB 19       >			   rr  c
 344+ 8C49                                      ShiftHLRight1                       ; to acommodate the sign
 344+ 8C49 CB 3C       >			   srl h
 344+ 8C4B CB 1D       >			   rr  l
 345+ 8C4D                                      ShiftDERight1                       ; .
 345+ 8C4D CB 3A       >			   srl d
 345+ 8C4F CB 1B       >			   rr  e
 346+ 8C51 F1           .NoAdditionalShift:     pop     af                          ; get ysgn
 347+ 8C52 E6 80                                and     SignOnly8Bit                ;
 348+ 8C54 47                                   ld      b,a                         ; bc = shifted signed Y
 349+ 8C55 F1                                   pop     af                          ; get xsgn
 350+ 8C56 E6 80                                and     SignOnly8Bit                ;
 351+ 8C58 67                                   ld      h,a                         ; hl = shifted signed X
 352+ 8C59 F1                                   pop     af                          ; get zsgn
 353+ 8C5A E6 80                                and     SignOnly8Bit                ;
 354+ 8C5C 57                                   ld      d,a                         ; de = shifted signed Z
 355+ 8C5D C9                                   ret
 356+ 8C5E
 357+ 8C5E ED 5B 17 C0  ScaleSunPos:            ld      de,(SBnKzhi)                ; de = abs z & save sign on stack
 358+ 8C62 7A                                   ld      a,d                         ; .
 359+ 8C63 F5                                   push    af                          ; .
 360+ 8C64 E6 7F                                and     SignMask8Bit                ; .
 361+ 8C66 57                                   ld      d,a                         ; .
 362+ 8C67 2A 11 C0                             ld      hl,(SBnKxhi)                ; hl = abs x & save sign on stack
 363+ 8C6A 7C                                   ld      a,h                         ; .
 364+ 8C6B F5                                   push    af                          ; .
 365+ 8C6C E6 7F                                and     SignMask8Bit                ; .
 366+ 8C6E 67                                   ld      h,a                         ; .
 367+ 8C6F ED 4B 14 C0                          ld      bc,(SBnKyhi)                ; bc = abs y & save sign on stack
 368+ 8C73 78                                   ld      a,b                         ; .
 369+ 8C74 F5                                   push    af                          ; .
 370+ 8C75 E6 7F                                and     SignMask8Bit                ; .
 371+ 8C77 47                                   ld      b,a                         ; .
 372+ 8C78 78           .ShiftLoop:             ld      a,b                         ; Scale down to an 8 bit value
 373+ 8C79 B2                                   or      d                           ; .
 374+ 8C7A B4                                   or      h                           ; .
 375+ 8C7B 28 0E                                jr      z,.Shifted                  ; .
 376+ 8C7D                                      ShiftBCRight1                       ; .
 376+ 8C7D CB 38       >			   srl b
 376+ 8C7F CB 19       >			   rr  c
 377+ 8C81                                      ShiftHLRight1                       ; .
 377+ 8C81 CB 3C       >			   srl h
 377+ 8C83 CB 1D       >			   rr  l
 378+ 8C85                                      ShiftDERight1                       ; .
 378+ 8C85 CB 3A       >			   srl d
 378+ 8C87 CB 1B       >			   rr  e
 379+ 8C89 18 ED                                jr      .ShiftLoop
 380+ 8C8B 79           .Shifted:               ld      a,c                         ; See if we already have 7 bit
 381+ 8C8C B5                                   or      l                           ;
 382+ 8C8D B3                                   or      e                           ;
 383+ 8C8E E6 80                                and     $80                         ;
 384+ 8C90 28 0C                                jr      z,.NoAdditionalShift        ;
 385+ 8C92                                      ShiftBCRight1                       ; we want 7 bit
 385+ 8C92 CB 38       >			   srl b
 385+ 8C94 CB 19       >			   rr  c
 386+ 8C96                                      ShiftHLRight1                       ; to acommodate the sign
 386+ 8C96 CB 3C       >			   srl h
 386+ 8C98 CB 1D       >			   rr  l
 387+ 8C9A                                      ShiftDERight1                       ; .
 387+ 8C9A CB 3A       >			   srl d
 387+ 8C9C CB 1B       >			   rr  e
 388+ 8C9E F1           .NoAdditionalShift:     pop     af                          ; get ysgn
 389+ 8C9F E6 80                                and     SignOnly8Bit                ;
 390+ 8CA1 47                                   ld      b,a                         ; bc = shifted signed Y
 391+ 8CA2 F1                                   pop     af                          ; get xsgn
 392+ 8CA3 E6 80                                and     SignOnly8Bit                ;
 393+ 8CA5 67                                   ld      h,a                         ; hl = shifted signed X
 394+ 8CA6 F1                                   pop     af                          ; get zsgn
 395+ 8CA7 E6 80                                and     SignOnly8Bit                ;
 396+ 8CA9 57                                   ld      d,a                         ; de = shifted signed Z
 397+ 8CAA C9                                   ret
 398+ 8CAB
 399+ 8CAB              ;compass sun
 400+ 8CAB              ;            if value is still 24 bit
 401+ 8CAB              ;                copy xhi/xsgn y and z to xxx15 ([2 1 0 ] [ 5 4 3] [ 8 7 6 ]
 402+ 8CAB              ;                normalise vector (note this assumes sun is just sign byte+ 2 bytes)
 403+ 8CAB              ;                tempk39 = OR 3 low bytes
 404+ 8CAB              ;                tempkA = OR 3 high bytes
 405+ 8CAB              ;                 TAL2:    repeat
 406+ 8CAB              ;                             asl tempka tempk39
 407+ 8CAB              ;                             exit if carry set
 408+ 8CAB              ;                             x coord << 1
 409+ 8CAB              ;                             y corrd << 1
 410+ 8CAB              ;                             z coord << 1
 411+ 8CAB              ;                          until carry clear
 412+ 8CAB              ;                 TA2:     shift x y and z right one and put sign bit in from sign bytes
 413+ 8CAB              ;                          now XX15 holds sign + 7 bit bytes maximused for coords
 414+ 8CAB              ;                          RQ = AP = X ^ 2
 415+ 8CAB              ;                          TP = AP = Y ^ 2
 416+ 8CAB              ;                          RQ = RQ + TP
 417+ 8CAB              ;                          TP = AP = Z ^ 2
 418+ 8CAB              ;                          RQ = RQ + TP
 419+ 8CAB              ;                          Q = SQRT (RQ)
 420+ 8CAB              ;                          for each coord - A = A/Q * 3/ 8
 421+ 8CAB              ;
 422+ 8CAB              ;
 423+ 8CAB
 424+ 8CAB ED 5B 17 C0  UpscaleSunPosition:     ld      de,(SBnKzhi)                ; de = abs z & save sign on stack
 425+ 8CAF 2A 11 C0                             ld      hl,(SBnKxhi)                ; hl = abs x & save sign on stack
 426+ 8CB2 ED 4B 14 C0                          ld      bc,(SBnKyhi)                ; bc = abs y & save sign on stack
 427+ 8CB6 7A                                   ld      a,d
 428+ 8CB7 E6 80                                and     SignOnly8Bit
 429+ 8CB9 CB 3F                                srl     a
 430+ 8CBB FD 6F                                ld      iyl,a
 431+ 8CBD 7C                                   ld      a,h
 432+ 8CBE E6 80                                and     SignOnly8Bit
 433+ 8CC0 FD B5                                or      iyl
 434+ 8CC2 CB 3F                                srl     a
 435+ 8CC4 78                                   ld      a,b
 436+ 8CC5 E6 80                                and     SignOnly8Bit
 437+ 8CC7 FD B5                                or      iyl
 438+ 8CC9 FD 6F                                ld      iyl,a                       ; IYL now equals YXH00000 where letters = sign bits
 439+ 8CCB                                      ClearSignBit d
 439+ 8CCB 7A          >                        ld      a,d
 439+ 8CCC E6 7F       >                        and     SignMask8Bit
 439+ 8CCE 57          >                        ld      d,a
 440+ 8CCF                                      ClearSignBit h
 440+ 8CCF 7C          >                        ld      a,h
 440+ 8CD0 E6 7F       >                        and     SignMask8Bit
 440+ 8CD2 67          >                        ld      h,a
 441+ 8CD3                                      ClearSignBit b
 441+ 8CD3 78          >                        ld      a,b
 441+ 8CD4 E6 7F       >                        and     SignMask8Bit
 441+ 8CD6 47          >                        ld      b,a
 442+ 8CD7 78                                   ld      a,b
 443+ 8CD8 B3                                   or      e
 444+ 8CD9 B4                                   or      h
 445+ 8CDA B5                                   or      l
 446+ 8CDB B0                                   or      b
 447+ 8CDC B1                                   or      c
 448+ 8CDD 28 41                                jr      z, .Setto1                 ; to prevent and infinite loop in upscale if all zero
 449+ 8CDF 7A                                   ld      a,d
 450+ 8CE0 B3                                   or      e
 451+ 8CE1 B4                                   or      h
 452+ 8CE2 CB 27                                sla     a
 453+ 8CE4 38 15                                jr      c,.DoneCalc
 454+ 8CE6 28 13                                jr      z,.DoneCalc
 455+ 8CE8              .UpscaleLoop:           ShiftDELeft1
 455+ 8CE8 CB 23       >			   sla e
 455+ 8CEA CB 12       >			   rl  d
 456+ 8CEC                                      ShiftHLLeft1
 456+ 8CEC CB 25       >			   sla l
 456+ 8CEE CB 14       >			   rl  h
 457+ 8CF0                                      ShiftBCLeft1
 457+ 8CF0 CB 21       >			   sla c
 457+ 8CF2 CB 10       >			   rl  b
 458+ 8CF4 CB 27                                sla     a
 459+ 8CF6 38 03                                jr      c,.DoneCalc
 460+ 8CF8 C3 E8 8C                             jp      .UpscaleLoop
 461+ 8CFB              .DoneCalc               ShiftDERight1
 461+ 8CFB CB 3A       >			   srl d
 461+ 8CFD CB 1B       >			   rr  e
 462+ 8CFF                                      ShiftHLRight1
 462+ 8CFF CB 3C       >			   srl h
 462+ 8D01 CB 1D       >			   rr  l
 463+ 8D03                                      ShiftBCRight1
 463+ 8D03 CB 38       >			   srl b
 463+ 8D05 CB 19       >			   rr  c
 464+ 8D07 5A           .NowSetResultInLowByte: ld      e,d
 465+ 8D08 6C                                   ld      l,h
 466+ 8D09 48                                   ld      c,b
 467+ 8D0A FD 7D                                ld      a,iyl
 468+ 8D0C E6 80                                and     SignOnly8Bit
 469+ 8D0E 47                                   ld      b,a
 470+ 8D0F FD 7D                                ld      a,iyl
 471+ 8D11 CB 27                                sla     a
 472+ 8D13 FD 6F                                ld      iyl,a
 473+ 8D15 E6 80                                and     SignOnly8Bit
 474+ 8D17 67                                   ld      h,a
 475+ 8D18 FD 7D                                ld      a,iyl
 476+ 8D1A CB 27                                sla     a
 477+ 8D1C E6 80                                and     SignOnly8Bit
 478+ 8D1E 57                                   ld      d,a
 479+ 8D1F C9                                   ret
 480+ 8D20 3E 01        .Setto1:                ld      a,1
 481+ 8D22 4F                                   ld      c,a
 482+ 8D23 5F                                   ld      e,a
 483+ 8D24 6F                                   ld      l,a
 484+ 8D25 FD 7D                                ld      a,iyl
 485+ 8D27 CB 27                                sla     a
 486+ 8D29 CB 27                                sla     a
 487+ 8D2B E6 80                                and     SignOnly8Bit
 488+ 8D2D B3                                   or      e
 489+ 8D2E 5F                                   ld      e,a
 490+ 8D2F C9                                   ret
 491+ 8D30
 492+ 8D30
 493+ 8D30              UpdateCompassSun:       MMUSelectSun
 493+ 8D30 ED 91 56 53 >                     nextreg SunMMU,            BankSunData
 494+ 8D34 CD 5E 8C                             call    ScaleSunPos                 ; get as 7 bit signed
 495+ 8D37 C5 E5 D5                             push    bc,,hl,,de                  ; +3 save to stack Y, X and Z scaled and signed hihg = sign, low = 7 bit value
 496+ 8D3A 51           .normaliseYSqr:         ld      d,c                         ; bc = y ^ 2
 497+ 8D3B 59                                   ld      e,c                         ; .
 498+ 8D3C ED 30                                mul                                 ; .
 499+ 8D3E 42 4B                                ld      bc,de                       ; .
 500+ 8D40 55           .normaliseXSqr:         ld      d,l                         ; hl = x ^ 2
 501+ 8D41 5D                                   ld      e,l                         ; .
 502+ 8D42 ED 30                                mul                                 ; .
 503+ 8D44 EB                                   ex      de,hl                       ; .
 504+ 8D45 D1           .normaliseZSqr:         pop     de                          ; +2 get Z saved from stack so now stack contains Y Z X
 505+ 8D46 53                                   ld      d,e                         ; de = z ^
 506+ 8D47 ED 30                                mul                                 ; .
 507+ 8D49 19           .normaliseSqrt:         add     hl,de                       ; de = x^2 + y^2 + z^2
 508+ 8D4A 09                                   add     hl,bc                       ; .
 509+ 8D4B EB                                   ex      de,hl                       ; .
 510+ 8D4C CD 23 B0                             call    asm_sqrt                    ; (Q) = hl = sqrt (x^2 + y^2 + x^2)
 511+ 8D4F                                      ; if h <> 0 then more difficult
 512+ 8D4F 55                                   ld      d,l                         ; iyl = q
 513+ 8D50 FD 6A                                ld      iyl,d                       ; .
 514+ 8D52 E1           .NormaliseX:            pop     hl                          ; +1 get back hl x scaled
 515+ 8D53 7C                                   ld      a,h                         ; c = sign
 516+ 8D54 E6 80                                and     SignOnly8Bit                ; .
 517+ 8D56 4F                                   ld      c,a                         ; .
 518+ 8D57 C5                                   push    bc                          ; +2 save bc temporarily as it will get altered
 519+ 8D58 7D                                   ld      a,l                         ; a = 8 bit abs z
 520+ 8D59 CD 9C B5                             call    AequAdivQmul96ABS           ; e = a /q * 96 (d was already loaded with q)
 521+ 8D5C 5F                                   ld      e,a                         ; .
 522+ 8D5D                                      EDiv10Inline                        ; a = e / 10
 522+ 8D5D 16 00       >                        ld      d,0
 522+ 8D5F 62 6B       >                        ld      hl,de
 522+ 8D61 29          >                        add     hl,hl
 522+ 8D62 19          >                        add     hl,de
 522+ 8D63 29          >                        add     hl,hl
 522+ 8D64 29          >                        add     hl,hl
 522+ 8D65 19          >                        add     hl,de
 522+ 8D66 29          >                        add     hl,hl
 523+ 8D67 7C                                   ld      a,h                         ; .
 524+ 8D68 C1                                   pop     bc                          ; +1 retrieve bc
 525+ 8D69 FE 00                                cp      0                           ; if result in h was 0 then done
 526+ 8D6B 28 06                                jr      z,.DoneNormX                ; in case we end up with - 0
 527+ 8D6D CB 79                                bit     7,c                         ; if sign is negative then 2'c value
 528+ 8D6F 28 02                                jr      z,.DoneNormX
 529+ 8D71 ED 44                                neg
 530+ 8D73 DD 67        .DoneNormX:             ld      ixh,a                       ; ixh = (signed 2's c x /q * 96) / 10
 531+ 8D75 FD 55        .NormaliseY:            ld      d,iyl                       ; d = q
 532+ 8D77 E1                                   pop     hl                          ; +0 hl y scaled
 533+ 8D78 7C                                   ld      a,h                         ; c = sign
 534+ 8D79 E6 80                                and     SignOnly8Bit                ; .
 535+ 8D7B 4F                                   ld      c,a                         ; .
 536+ 8D7C C5                                   push    bc                          ; +1 save sign to stack
 537+ 8D7D 7D                                   ld      a,l                         ; a = 8 bit signed z
 538+ 8D7E CD 9C B5                             call    AequAdivQmul96ABS           ; .
 539+ 8D81 5F                                   ld      e,a                         ; a = e / 10
 540+ 8D82                                      EDiv10Inline                        ; .
 540+ 8D82 16 00       >                        ld      d,0
 540+ 8D84 62 6B       >                        ld      hl,de
 540+ 8D86 29          >                        add     hl,hl
 540+ 8D87 19          >                        add     hl,de
 540+ 8D88 29          >                        add     hl,hl
 540+ 8D89 29          >                        add     hl,hl
 540+ 8D8A 19          >                        add     hl,de
 540+ 8D8B 29          >                        add     hl,hl
 541+ 8D8C 7C                                   ld      a,h                         ; retrieve sign
 542+ 8D8D C1                                   pop     bc                          ; +1 retrieve sign
 543+ 8D8E FE 00                                cp      0
 544+ 8D90 28 06                                jr      z,.DoneNormY                ; in case we end up with - 0
 545+ 8D92 CB 79                                bit     7,c                         ; if sign is negative then 2'c value
 546+ 8D94 28 02                                jr      z,.DoneNormY
 547+ 8D96 ED 44                                neg                                 ;
 548+ 8D98 47           .DoneNormY:             ld      b,a                         ; result from Y
 549+ 8D99 DD 4C                                ld      c,ixh                       ; x = saved X
 550+ 8D9B              .SetSprite:             MMUSelectSpriteBank
 550+ 8D9B ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
 551+ 8D9F CD 05 E1                             call    compass_sun_move
 552+ 8DA2 DD 7D                                ld      a,ixl
 553+ 8DA4 CB 7F                                bit     7,a
 554+ 8DA6 20 04                                jr      nz,.SunBehind
 555+ 8DA8 CD 8C E1     .SunInfront:            call    show_compass_sun_infront
 556+ 8DAB C9                                   ret
 557+ 8DAC CD 97 E1     .SunBehind:             call    show_compass_sun_behind
 558+ 8DAF C9                                   ret
 559+ 8DB0
 560+ 8DB0
 561+ 8DB0              UpdateCompassPlanet:    MMUSelectPlanet
 561+ 8DB0 ED 91 56 54 >                     nextreg PlanetMMU,         BankPlanetData
 562+ 8DB4 CD 11 8C                             call    ScalePlanetPos              ; get as 7 bit signed
 563+ 8DB7 C5 E5 D5                             push    bc,,hl,,de                  ; save to stack Y, Z, X and copy of X scaled and signed hihg = sign, low = 7 bit value
 564+ 8DBA 51           .normaliseYSqr:         ld      d,c                         ; bc = y ^ 2
 565+ 8DBB 59                                   ld      e,c                         ; .
 566+ 8DBC ED 30                                mul                                 ; .
 567+ 8DBE 42 4B                                ld      bc,de                       ; .
 568+ 8DC0 55           .normaliseXSqr:         ld      d,l                         ; hl = x ^ 2
 569+ 8DC1 5D                                   ld      e,l                         ; .
 570+ 8DC2 ED 30                                mul                                 ; .
 571+ 8DC4 EB                                   ex      de,hl                       ; .
 572+ 8DC5 D1           .normaliseZSqr:         pop     de                          ; get saved from stack 2
 573+ 8DC6 53                                   ld      d,e                         ; de = z ^
 574+ 8DC7 ED 30                                mul                                 ; .
 575+ 8DC9 19           .normaliseSqrt:         add     hl,de                       ; hl = x^2 + y^2 + z^2
 576+ 8DCA 09                                   add     hl,bc
 577+ 8DCB EB                                   ex      de,hl
 578+ 8DCC CD 23 B0                             call    asm_sqrt                    ; (Q) = hl = sqrt (x^2 + y^2 + x^2)
 579+ 8DCF                                      ; if h <> 0 then more difficult
 580+ 8DCF 55                                   ld      d,l                         ; iyl = q
 581+ 8DD0 FD 6A                                ld      iyl,d                       ; .
 582+ 8DD2 E1           .NormaliseX:            pop     hl                          ; hl x scaled
 583+ 8DD3 7C                                   ld      a,h                         ; c = sign
 584+ 8DD4 E6 80                                and     SignOnly8Bit                ; .
 585+ 8DD6 4F                                   ld      c,a                         ; .
 586+ 8DD7 C5                                   push    bc                          ; save sign to stack
 587+ 8DD8 7D                                   ld      a,l                         ; a = 8 bit abs z
 588+ 8DD9 CD 9C B5                             call    AequAdivQmul96ABS              ; e = a /q * 96 (d was already loaded with q)
 589+ 8DDC 5F                                   ld      e,a                         ; .
 590+ 8DDD                                      EDiv10Inline                        ; a = e / 10
 590+ 8DDD 16 00       >                        ld      d,0
 590+ 8DDF 62 6B       >                        ld      hl,de
 590+ 8DE1 29          >                        add     hl,hl
 590+ 8DE2 19          >                        add     hl,de
 590+ 8DE3 29          >                        add     hl,hl
 590+ 8DE4 29          >                        add     hl,hl
 590+ 8DE5 19          >                        add     hl,de
 590+ 8DE6 29          >                        add     hl,hl
 591+ 8DE7 7C                                   ld      a,h                         ; .
 592+ 8DE8 C1                                   pop     bc                          ; retrieve sign
 593+ 8DE9 FE 00                                cp      0
 594+ 8DEB 28 06                                jr      z,.DoneNormX                ; in case we end up with - 0
 595+ 8DED CB 79                                bit     7,c                         ; if sign is negative then 2'c value
 596+ 8DEF 28 02                                jr      z,.DoneNormX
 597+ 8DF1 ED 44                                neg
 598+ 8DF3 DD 67        .DoneNormX:             ld      ixh,a                       ; ixh = (signed 2's c x /q * 96) / 10
 599+ 8DF5 FD 55        .NormaliseY:            ld      d,iyl                       ; d = q
 600+ 8DF7 E1                                   pop     hl                          ; hl y scaled
 601+ 8DF8 7C                                   ld      a,h                         ; c = sign
 602+ 8DF9 E6 80                                and     SignOnly8Bit                ; .
 603+ 8DFB 4F                                   ld      c,a                         ; .
 604+ 8DFC C5                                   push    bc                          ; save sign to stack
 605+ 8DFD 7D                                   ld      a,l                         ; a = 8 bit signed z
 606+ 8DFE CD 9C B5                             call    AequAdivQmul96ABS           ; .
 607+ 8E01 5F                                   ld      e,a                         ; a = e / 10
 608+ 8E02                                      EDiv10Inline                        ; .
 608+ 8E02 16 00       >                        ld      d,0
 608+ 8E04 62 6B       >                        ld      hl,de
 608+ 8E06 29          >                        add     hl,hl
 608+ 8E07 19          >                        add     hl,de
 608+ 8E08 29          >                        add     hl,hl
 608+ 8E09 29          >                        add     hl,hl
 608+ 8E0A 19          >                        add     hl,de
 608+ 8E0B 29          >                        add     hl,hl
 609+ 8E0C 7C                                   ld      a,h                         ; retrieve sign
 610+ 8E0D C1                                   pop     bc                          ; retrieve sign
 611+ 8E0E FE 00                                cp      0
 612+ 8E10 28 06                                jr      z,.DoneNormY                 ; in case we end up with - 0
 613+ 8E12 CB 79                                bit     7,c                         ; if sign is negative then 2'c value
 614+ 8E14 28 02                                jr      z,.DoneNormY
 615+ 8E16 ED 44                                neg                                 ;
 616+ 8E18 47           .DoneNormY:             ld      b,a                         ; result from Y
 617+ 8E19 DD 4C                                ld      c,ixh                       ; x = saved X
 618+ 8E1B              .SetSprite:             MMUSelectSpriteBank
 618+ 8E1B ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
 619+ 8E1F CD 17 E1                             call    compass_station_move
 620+ 8E22 DD 7D                                ld      a,ixl
 621+ 8E24 CB 7F                                bit     7,a
 622+ 8E26 20 04                                jr      nz,.PlanetBehind
 623+ 8E28 CD A2 E1     .PlanetInfront:         call    show_compass_station_infront
 624+ 8E2B C9                                   ret
 625+ 8E2C CD AD E1     .PlanetBehind:          call    show_compass_station_behind
 626+ 8E2F C9                                   ret
 627+ 8E30
 628+ 8E30              UpdatePlanetSun:        MMUSelectPlanet
 628+ 8E30 ED 91 56 54 >                     nextreg PlanetMMU,         BankPlanetData
 629+ 8E34                                      Shift24BitScan  PBnKyhi, PBnKylo
 629+ 8E34 2A 14 C0    >                        ld      hl,(PBnKyhi)
 629+ 8E37 44          >                        ld      b,h
 629+ 8E38 7C          >                        ld      a,h
 629+ 8E39 E6 7F       >                        and     SignMask8Bit
 629+ 8E3B 67          >                        ld      h,a
 629+ 8E3C 3A 13 C0    >                        ld      a,(PBnKylo)
 629+ 8E3F CB 27       >                        sla     a
 629+ 8E41 CB 15       >                        rl      l
 629+ 8E43 CB 14       >                        rl      h
 629+ 8E45 CB 27       >                        sla     a
 629+ 8E47 CB 15       >                        rl      l
 629+ 8E49 CB 14       >                        rl      h
 629+ 8E4B CB 27       >                        sla     a
 629+ 8E4D CB 15       >                        rl      l
 629+ 8E4F CB 14       >                        rl      h
 629+ 8E51 CB 27       >                        sla     a
 629+ 8E53 CB 15       >                        rl      l
 629+ 8E55 CB 14       >                        rl      h
 629+ 8E57 CB 27       >                        sla     a
 629+ 8E59 CB 15       >                        rl      l
 629+ 8E5B CB 14       >                        rl      h
 629+ 8E5D CB 27       >                        sla     a
 629+ 8E5F CB 15       >                        rl      l
 629+ 8E61 CB 14       >                        rl      h
 630+ 8E63 3A 12 C0     .IsItInRange:           ld      a,(PBnKxsgn)                ; if the high byte is not
 631+ 8E66 21 15 C0                             ld      hl,PBnKysgn                 ; a sign only
 632+ 8E69 B6                                   or      (hl)                        ; then its too far away
 633+ 8E6A 21 18 C0                             ld      hl,PBnKzsgn                 ; for the scanner to draw
 634+ 8E6D B6                                   or      (hl)                        ; so rely on the compass
 635+ 8E6E E6 7F                                and     SignMask8Bit                ;
 636+ 8E70 C0                                   ret     nz                          ;
 637+ 8E71 2A 16 C0     .ItsInRange:            ld      hl,(PBnKzlo)                ; we will get unsigned values
 638+ 8E74 ED 5B 10 C0                          ld      de,(PBnKxlo)
 639+ 8E78 ED 4B 13 C0                          ld      bc,(PBnKylo)
 640+ 8E7C 7C                                   ld      a,h
 641+ 8E7D B2                                   or      d
 642+ 8E7E B0                                   or      b
 643+ 8E7F E6 C0                                and     %11000000
 644+ 8E81 C0                                   ret     nz                          ; if distance Hi > 64 on any ccord- off screen
 645+ 8E82 3A 12 C0     .MakeX2Compliment:      ld      a,(PBnKxsgn)
 646+ 8E85 CB 7F                                bit     7,a
 647+ 8E87 28 04                                jr      z,.absXHi
 648+ 8E89                                      NegD
 648+ 8E89 7A          >                    ld      a,d
 648+ 8E8A ED 44       >                    neg
 648+ 8E8C 57          >                    ld      d,a
 649+ 8E8D 7A           .absXHi:                ld      a,d
 650+ 8E8E C6 80                                add     ScannerX
 651+ 8E90 DD 67                                ld      ixh,a                       ; store adjusted X in ixh
 652+ 8E92 CB 3C        .ProcessZCoord:         srl     h
 653+ 8E94 CB 3C                                srl     h
 654+ 8E96 3A 18 C0     .MakeZ2Compliment:      ld      a,(PBnKzsgn)
 655+ 8E99 CB 7F                                bit     7,a
 656+ 8E9B 28 04                                jr      z,.absZHi
 657+ 8E9D                                      NegH
 657+ 8E9D 7C          >                    ld      a,h
 657+ 8E9E ED 44       >                    neg
 657+ 8EA0 67          >                    ld      h,a
 658+ 8EA1 3E AB        .absZHi:                ld      a,ScannerY
 659+ 8EA3 94                                   sub     h
 660+ 8EA4 FD 67                                ld      iyh,a                       ; make iyh adjusted Z = row on screen
 661+ 8EA6 CB 38        .ProcessStickLength:    srl     b                           ; divide b by 2
 662+ 8EA8 20 0B                                jr      nz,.StickHasLength
 663+ 8EAA FD 7C        .Stick0Length:          ld      a,iyh                       ; abs stick end is row - length
 664+ 8EAC FD 6F                                ld      iyl,a
 665+ 8EAE                                      MMUSelectLayer2
 665+ 8EAE ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 666+ 8EB2 C3 DD 8E                             jp      .NoStick
 667+ 8EB5 3A 15 C0     .StickHasLength:        ld      a,(PBnKysgn)                ; if b  =  0 then no line
 668+ 8EB8 CB 7F                                bit     7,a
 669+ 8EBA 28 04                                jr      z,.absYHi
 670+ 8EBC                                      NegB
 670+ 8EBC 78          >                    ld      a,b
 670+ 8EBD ED 44       >                    neg
 670+ 8EBF 47          >                    ld      b,a
 671+ 8EC0 FD 7C        .absYHi:                ld      a,iyh
 672+ 8EC2 90           .SetStickPos:           sub     b
 673+ 8EC3                                      JumpIfALTNusng ScannerBottom, .StickOnScreen
 673+ 8EC3 FE BE       >                        cp      ScannerBottom
 673+ 8EC5 DA CA 8E    >                        jp		c, .StickOnScreen
 674+ 8EC8 3E BE                                ld      a,ScannerBottom
 675+ 8ECA FD 6F        .StickOnScreen:         ld      iyl,a                       ; iyh is again stick end point
 676+ 8ECC DD 6F                                ld      ixl,a
 677+ 8ECE FD 44                                ld      b,iyh                       ; from row
 678+ 8ED0 DD 4C                                ld      c,ixh                       ; from col
 679+ 8ED2 FD 55                                ld      d,iyl                       ; to row
 680+ 8ED4 1E B4                                ld      e,L2SunScanner
 681+ 8ED6                                      MMUSelectLayer2
 681+ 8ED6 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 682+ 8EDA CD 60 E3                             call    l2_draw_vert_line_to
 683+ 8EDD FD 45        .NoStick:               ld      b,iyl                       ; row
 684+ 8EDF DD 4C                                ld      c,ixh                       ; col
 685+ 8EE1 3E FC                                ld      a,L2SunScannerBright
 686+ 8EE3 CD 37 E1                             call    l2_plot_pixel
 687+ 8EE6 FD 45                                ld      b,iyl
 688+ 8EE8 DD 4C                                ld      c,ixh
 689+ 8EEA 0C                                   inc     c
 690+ 8EEB 3E FC                                ld      a,L2SunScannerBright
 691+ 8EED CD 37 E1                             call    l2_plot_pixel
 692+ 8EF0 C9                                   ret
 693+ 8EF1
 694+ 8EF1              UpdateCompassStation:   MMUSelectShipBankN 0
 694+ 8EF1 ED 91 57 00 >					 nextreg ShipModelMMU,	    0
 695+ 8EF5
 696+ 8EF5 CD 5E 8C                             call    ScaleSunPos                 ; get as 7 bit signed
 697+ 8EF8 C5 D5 E5 D5                          push    bc,,de,,hl,,de              ; save to stack Y, Z, X and copy of X scaled and signed hihg = sign, low = 7 bit value
 698+ 8EFC 51           .normaliseYSqr:         ld      d,c                         ; bc = y ^ 2
 699+ 8EFD 59                                   ld      e,c                         ; .
 700+ 8EFE ED 30                                mul                                 ; .
 701+ 8F00 42 4B                                ld      bc,de                       ; .
 702+ 8F02 55           .normaliseXSqr:         ld      d,l                         ; hl = x ^ 2
 703+ 8F03 5D                                   ld      e,l                         ; .
 704+ 8F04 ED 30                                mul                                 ; .
 705+ 8F06 EB                                   ex      de,hl                       ; .
 706+ 8F07 D1           .normaliseZSqr:         pop     de                          ; get saved from stack 2
 707+ 8F08 53                                   ld      d,e                         ; de = z ^
 708+ 8F09 ED 30                                mul                                 ; .
 709+ 8F0B 19           .normaliseSqrt:         add     hl,de                       ; hl = x^2 + y^2 + x^2
 710+ 8F0C 09                                   add     hl,bc
 711+ 8F0D EB                                   ex      de,hl
 712+ 8F0E CD 23 B0                             call    asm_sqrt                    ; (Q) = hl = sqrt (x^2 + y^2 + x^2)
 713+ 8F11                                      ; if h <> 0 then more difficult
 714+ 8F11 55                                   ld      d,l                         ; iyl = q
 715+ 8F12 FD 6A                                ld      iyl,d                       ; .
 716+ 8F14 E1           .NormaliseX:            pop     hl                          ; hl x scaled
 717+ 8F15 7C                                   ld      a,h                         ; c = sign
 718+ 8F16 E6 80                                and     SignOnly8Bit                ; .
 719+ 8F18 4F                                   ld      c,a                         ; .
 720+ 8F19 C5                                   push    bc                          ; save sign to stack
 721+ 8F1A 7D                                   ld      a,l                         ; a = 8 bit abs z
 722+ 8F1B CD 9C B5                             call    AequAdivQmul96ABS              ; e = a /q * 96 (d was already loaded with q)
 723+ 8F1E 5F                                   ld      e,a                         ; .
 724+ 8F1F                                      EDiv10Inline                        ; a = e / 10
 724+ 8F1F 16 00       >                        ld      d,0
 724+ 8F21 62 6B       >                        ld      hl,de
 724+ 8F23 29          >                        add     hl,hl
 724+ 8F24 19          >                        add     hl,de
 724+ 8F25 29          >                        add     hl,hl
 724+ 8F26 29          >                        add     hl,hl
 724+ 8F27 19          >                        add     hl,de
 724+ 8F28 29          >                        add     hl,hl
 725+ 8F29 7C                                   ld      a,h                         ; .
 726+ 8F2A C1                                   pop     bc                          ; retrieve sign
 727+ 8F2B FE 00                                cp      0
 728+ 8F2D 28 06                                jr      z,.DoneNormX                 ; in case we end up with - 0
 729+ 8F2F CB 79                                bit     7,c                         ; if sign is negative then 2'c value
 730+ 8F31 28 02                                jr      z,.DoneNormX
 731+ 8F33 ED 44                                neg
 732+ 8F35 DD 67        .DoneNormX:             ld      ixh,a                       ; ixh = (signed 2's c x /q * 96) / 10
 733+ 8F37 FD 55        .NormaliseZ:            ld      d,iyl                       ; d = q
 734+ 8F39 E1                                   pop     hl                          ; hl z scaled
 735+ 8F3A 7C                                   ld      a,h                         ; c = sign
 736+ 8F3B E6 80                                and     SignOnly8Bit                ; .
 737+ 8F3D 4F                                   ld      c,a                         ; .
 738+ 8F3E C5                                   push    bc                          ; save sign to stack
 739+ 8F3F 7D                                   ld      a,l                         ; e = a /q * 96
 740+ 8F40 CD 9C B5                             call    AequAdivQmul96ABS              ; .
 741+ 8F43 5F                                   ld      e,a                         ; a = e / 10
 742+ 8F44                                      EDiv10Inline                        ; .
 742+ 8F44 16 00       >                        ld      d,0
 742+ 8F46 62 6B       >                        ld      hl,de
 742+ 8F48 29          >                        add     hl,hl
 742+ 8F49 19          >                        add     hl,de
 742+ 8F4A 29          >                        add     hl,hl
 742+ 8F4B 29          >                        add     hl,hl
 742+ 8F4C 19          >                        add     hl,de
 742+ 8F4D 29          >                        add     hl,hl
 743+ 8F4E 7C                                   ld      a,h                         ; retrieve sign
 744+ 8F4F C1                                   pop     bc                          ; retrieve sign
 745+ 8F50 CB 79                                bit     7,c                         ; if sign is negative then 2'c value
 746+ 8F52 28 02                                jr      z,.DoneNormZ
 747+ 8F54 ED 44                                neg
 748+ 8F56 DD 6F        .DoneNormZ:             ld      ixl,a                       ; .
 749+ 8F58 FD 55        .NormaliseY:            ld      d,iyl                       ; d = q
 750+ 8F5A E1                                   pop     hl                          ; hl y scaled
 751+ 8F5B 7C                                   ld      a,h                         ; c = sign
 752+ 8F5C E6 80                                and     SignOnly8Bit                ; .
 753+ 8F5E 4F                                   ld      c,a                         ; .
 754+ 8F5F C5                                   push    bc                          ; save sign to stack
 755+ 8F60 7D                                   ld      a,l                         ; a = 8 bit signed z
 756+ 8F61 CD 9C B5                             call    AequAdivQmul96ABS              ; .
 757+ 8F64 5F                                   ld      e,a                         ; a = e / 10
 758+ 8F65                                      EDiv10Inline                        ; .
 758+ 8F65 16 00       >                        ld      d,0
 758+ 8F67 62 6B       >                        ld      hl,de
 758+ 8F69 29          >                        add     hl,hl
 758+ 8F6A 19          >                        add     hl,de
 758+ 8F6B 29          >                        add     hl,hl
 758+ 8F6C 29          >                        add     hl,hl
 758+ 8F6D 19          >                        add     hl,de
 758+ 8F6E 29          >                        add     hl,hl
 759+ 8F6F 7C                                   ld      a,h                         ; retrieve sign
 760+ 8F70 C1                                   pop     bc                          ; retrieve sign
 761+ 8F71 FE 00                                cp      0
 762+ 8F73 28 06                                jr      z,.DoneNormY                ; in case we end up with - 0
 763+ 8F75 CB 79                                bit     7,c                         ; if sign is negative then 2'c value
 764+ 8F77 28 02                                jr      z,.DoneNormY
 765+ 8F79 ED 44                                neg
 766+ 8F7B 47           .DoneNormY:             ld      b,a                         ; .
 767+ 8F7C DD 4C                                ld      c,ixh
 768+ 8F7E              .SetSprite:             MMUSelectSpriteBank
 768+ 8F7E ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
 769+ 8F82 CD 05 E1                             call    compass_sun_move
 770+ 8F85 DD 7D                                ld      a,ixl
 771+ 8F87 CB 7F                                bit     7,a
 772+ 8F89 20 04                                jr      nz,.SunBehind
 773+ 8F8B CD 8C E1     .SunInfront:            call    show_compass_sun_infront
 774+ 8F8E C9                                   ret
 775+ 8F8F CD 97 E1     .SunBehind:             call    show_compass_sun_behind
 776+ 8F92 C9                                   ret
 777+ 8F93
 778+ 8F93
 779+ 8F93              UpdateScannerSun:       MMUSelectSun
 779+ 8F93 ED 91 56 53 >                     nextreg SunMMU,            BankSunData
 780+ 8F97                                      Shift24BitScan  SBnKyhi, SBnKylo
 780+ 8F97 2A 14 C0    >                        ld      hl,(SBnKyhi)
 780+ 8F9A 44          >                        ld      b,h
 780+ 8F9B 7C          >                        ld      a,h
 780+ 8F9C E6 7F       >                        and     SignMask8Bit
 780+ 8F9E 67          >                        ld      h,a
 780+ 8F9F 3A 13 C0    >                        ld      a,(SBnKylo)
 780+ 8FA2 CB 27       >                        sla     a
 780+ 8FA4 CB 15       >                        rl      l
 780+ 8FA6 CB 14       >                        rl      h
 780+ 8FA8 CB 27       >                        sla     a
 780+ 8FAA CB 15       >                        rl      l
 780+ 8FAC CB 14       >                        rl      h
 780+ 8FAE CB 27       >                        sla     a
 780+ 8FB0 CB 15       >                        rl      l
 780+ 8FB2 CB 14       >                        rl      h
 780+ 8FB4 CB 27       >                        sla     a
 780+ 8FB6 CB 15       >                        rl      l
 780+ 8FB8 CB 14       >                        rl      h
 780+ 8FBA CB 27       >                        sla     a
 780+ 8FBC CB 15       >                        rl      l
 780+ 8FBE CB 14       >                        rl      h
 780+ 8FC0 CB 27       >                        sla     a
 780+ 8FC2 CB 15       >                        rl      l
 780+ 8FC4 CB 14       >                        rl      h
 781+ 8FC6 3A 12 C0     .IsItInRange:           ld      a,(SBnKxsgn)                ; if the high byte is not
 782+ 8FC9 21 15 C0                             ld      hl,SBnKysgn                 ; a sign only
 783+ 8FCC B6                                   or      (hl)                        ; then its too far away
 784+ 8FCD 21 18 C0                             ld      hl,SBnKzsgn                 ; for the scanner to draw
 785+ 8FD0 B6                                   or      (hl)                        ; so rely on the compass
 786+ 8FD1 E6 7F                                and     SignMask8Bit                ;
 787+ 8FD3 C0                                   ret     nz                          ;
 788+ 8FD4 2A 16 C0     .ItsInRange:            ld      hl,(SBnKzlo)                ; we will get unsigned values
 789+ 8FD7 ED 5B 10 C0                          ld      de,(SBnKxlo)
 790+ 8FDB ED 4B 13 C0                          ld      bc,(SBnKylo)
 791+ 8FDF 7C                                   ld      a,h
 792+ 8FE0 B2                                   or      d
 793+ 8FE1 B0                                   or      b
 794+ 8FE2 E6 C0                                and     %11000000
 795+ 8FE4 C0                                   ret     nz                          ; if distance Hi > 64 on any ccord- off screen
 796+ 8FE5 3A 12 C0     .MakeX2Compliment:      ld      a,(SBnKxsgn)
 797+ 8FE8 CB 7F                                bit     7,a
 798+ 8FEA 28 04                                jr      z,.absXHi
 799+ 8FEC                                      NegD
 799+ 8FEC 7A          >                    ld      a,d
 799+ 8FED ED 44       >                    neg
 799+ 8FEF 57          >                    ld      d,a
 800+ 8FF0 7A           .absXHi:                ld      a,d
 801+ 8FF1 C6 80                                add     ScannerX
 802+ 8FF3 DD 67                                ld      ixh,a                       ; store adjusted X in ixh
 803+ 8FF5 CB 3C        .ProcessZCoord:         srl     h
 804+ 8FF7 CB 3C                                srl     h
 805+ 8FF9 3A 18 C0     .MakeZ2Compliment:      ld      a,(SBnKzsgn)
 806+ 8FFC CB 7F                                bit     7,a
 807+ 8FFE 28 04                                jr      z,.absZHi
 808+ 9000                                      NegH
 808+ 9000 7C          >                    ld      a,h
 808+ 9001 ED 44       >                    neg
 808+ 9003 67          >                    ld      h,a
 809+ 9004 3E AB        .absZHi:                ld      a,ScannerY
 810+ 9006 94                                   sub     h
 811+ 9007 FD 67                                ld      iyh,a                       ; make iyh adjusted Z = row on screen
 812+ 9009 CB 38        .ProcessStickLength:    srl     b                           ; divide b by 2
 813+ 900B 20 0B                                jr      nz,.StickHasLength
 814+ 900D FD 7C        .Stick0Length:          ld      a,iyh                       ; abs stick end is row - length
 815+ 900F FD 6F                                ld      iyl,a
 816+ 9011                                      MMUSelectLayer2
 816+ 9011 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 817+ 9015 C3 40 90                             jp      .NoStick
 818+ 9018 3A 15 C0     .StickHasLength:        ld      a,(SBnKysgn)                ; if b  =  0 then no line
 819+ 901B CB 7F                                bit     7,a
 820+ 901D 28 04                                jr      z,.absYHi
 821+ 901F                                      NegB
 821+ 901F 78          >                    ld      a,b
 821+ 9020 ED 44       >                    neg
 821+ 9022 47          >                    ld      b,a
 822+ 9023 FD 7C        .absYHi:                ld      a,iyh
 823+ 9025 90           .SetStickPos:           sub     b
 824+ 9026                                      JumpIfALTNusng ScannerBottom, .StickOnScreen
 824+ 9026 FE BE       >                        cp      ScannerBottom
 824+ 9028 DA 2D 90    >                        jp		c, .StickOnScreen
 825+ 902B 3E BE                                ld      a,ScannerBottom
 826+ 902D FD 6F        .StickOnScreen:         ld      iyl,a                       ; iyh is again stick end point
 827+ 902F DD 6F                                ld      ixl,a
 828+ 9031 FD 44                                ld      b,iyh                       ; from row
 829+ 9033 DD 4C                                ld      c,ixh                       ; from col
 830+ 9035 FD 55                                ld      d,iyl                       ; to row
 831+ 9037 1E B4                                ld      e,L2SunScanner
 832+ 9039                                      MMUSelectLayer2
 832+ 9039 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 833+ 903D CD 60 E3                             call    l2_draw_vert_line_to
 834+ 9040 FD 45        .NoStick:               ld      b,iyl                       ; row
 835+ 9042 DD 4C                                ld      c,ixh                       ; col
 836+ 9044 3E FC                                ld      a,L2SunScannerBright
 837+ 9046 CD 37 E1                             call    l2_plot_pixel
 838+ 9049 FD 45                                ld      b,iyl
 839+ 904B DD 4C                                ld      c,ixh
 840+ 904D 0C                                   inc     c
 841+ 904E 3E FC                                ld      a,L2SunScannerBright
 842+ 9050 CD 37 E1                             call    l2_plot_pixel
 843+ 9053 C9                                   ret
 844+ 9054
 845+ 9054              ; This will do a planet update if we are not in space station range
 846+ 9054              UpdateScannerPlanet:    MMUSelectPlanet
 846+ 9054 ED 91 56 54 >                     nextreg PlanetMMU,         BankPlanetData
 847+ 9058                                      Shift24BitScan  PBnKyhi, PBnKylo
 847+ 9058 2A 14 C0    >                        ld      hl,(PBnKyhi)
 847+ 905B 44          >                        ld      b,h
 847+ 905C 7C          >                        ld      a,h
 847+ 905D E6 7F       >                        and     SignMask8Bit
 847+ 905F 67          >                        ld      h,a
 847+ 9060 3A 13 C0    >                        ld      a,(PBnKylo)
 847+ 9063 CB 27       >                        sla     a
 847+ 9065 CB 15       >                        rl      l
 847+ 9067 CB 14       >                        rl      h
 847+ 9069 CB 27       >                        sla     a
 847+ 906B CB 15       >                        rl      l
 847+ 906D CB 14       >                        rl      h
 847+ 906F CB 27       >                        sla     a
 847+ 9071 CB 15       >                        rl      l
 847+ 9073 CB 14       >                        rl      h
 847+ 9075 CB 27       >                        sla     a
 847+ 9077 CB 15       >                        rl      l
 847+ 9079 CB 14       >                        rl      h
 847+ 907B CB 27       >                        sla     a
 847+ 907D CB 15       >                        rl      l
 847+ 907F CB 14       >                        rl      h
 847+ 9081 CB 27       >                        sla     a
 847+ 9083 CB 15       >                        rl      l
 847+ 9085 CB 14       >                        rl      h
 848+ 9087 3A 12 C0     .IsItInRange:           ld      a,(PBnKxsgn)                ; if the high byte is not
 849+ 908A 21 15 C0                             ld      hl,PBnKysgn                 ; a sign only
 850+ 908D B6                                   or      (hl)                        ; then its too far away
 851+ 908E 21 18 C0                             ld      hl,PBnKzsgn                 ; for the scanner to draw
 852+ 9091 B6                                   or      (hl)                        ; so rely on the compass
 853+ 9092 E6 7F                                and     SignMask8Bit                ;
 854+ 9094 C0                                   ret     nz                          ;
 855+ 9095 2A 16 C0     .ItsInRange:            ld      hl,(PBnKzlo)                ; we will get unsigned values
 856+ 9098 ED 5B 10 C0                          ld      de,(PBnKxlo)
 857+ 909C ED 4B 13 C0                          ld      bc,(PBnKylo)
 858+ 90A0 7C                                   ld      a,h
 859+ 90A1 B2                                   or      d
 860+ 90A2 B0                                   or      b
 861+ 90A3 E6 C0                                and     %11000000
 862+ 90A5 C0                                   ret     nz                          ; if distance Hi > 64 on any ccord- off screen
 863+ 90A6 3A 12 C0     .MakeX2Compliment:      ld      a,(PBnKxsgn)
 864+ 90A9 CB 7F                                bit     7,a
 865+ 90AB 28 04                                jr      z,.absXHi
 866+ 90AD                                      NegD
 866+ 90AD 7A          >                    ld      a,d
 866+ 90AE ED 44       >                    neg
 866+ 90B0 57          >                    ld      d,a
 867+ 90B1 7A           .absXHi:                ld      a,d
 868+ 90B2 C6 80                                add     ScannerX
 869+ 90B4 DD 67                                ld      ixh,a                       ; store adjusted X in ixh
 870+ 90B6 CB 3C        .ProcessZCoord:         srl     h
 871+ 90B8 CB 3C                                srl     h
 872+ 90BA 3A 18 C0     .MakeZ2Compliment:      ld      a,(PBnKzsgn)
 873+ 90BD CB 7F                                bit     7,a
 874+ 90BF 28 04                                jr      z,.absZHi
 875+ 90C1                                      NegH
 875+ 90C1 7C          >                    ld      a,h
 875+ 90C2 ED 44       >                    neg
 875+ 90C4 67          >                    ld      h,a
 876+ 90C5 3E AB        .absZHi:                ld      a,ScannerY
 877+ 90C7 94                                   sub     h
 878+ 90C8 FD 67                                ld      iyh,a                       ; make iyh adjusted Z = row on screen
 879+ 90CA CB 38        .ProcessStickLength:    srl     b                           ; divide b by 2
 880+ 90CC 20 0B                                jr      nz,.StickHasLength
 881+ 90CE FD 7C        .Stick0Length:          ld      a,iyh                       ; abs stick end is row - length
 882+ 90D0 FD 6F                                ld      iyl,a
 883+ 90D2                                      MMUSelectLayer2
 883+ 90D2 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 884+ 90D6 C3 01 91                             jp      .NoStick
 885+ 90D9 3A 15 C0     .StickHasLength:        ld      a,(PBnKysgn)                ; if b  =  0 then no line
 886+ 90DC CB 7F                                bit     7,a
 887+ 90DE 28 04                                jr      z,.absYHi
 888+ 90E0                                      NegB
 888+ 90E0 78          >                    ld      a,b
 888+ 90E1 ED 44       >                    neg
 888+ 90E3 47          >                    ld      b,a
 889+ 90E4 FD 7C        .absYHi:                ld      a,iyh
 890+ 90E6 90           .SetStickPos:           sub     b
 891+ 90E7                                      JumpIfALTNusng ScannerBottom, .StickOnScreen
 891+ 90E7 FE BE       >                        cp      ScannerBottom
 891+ 90E9 DA EE 90    >                        jp		c, .StickOnScreen
 892+ 90EC 3E BE                                ld      a,ScannerBottom
 893+ 90EE FD 6F        .StickOnScreen:         ld      iyl,a                       ; iyh is again stick end point
 894+ 90F0 DD 6F                                ld      ixl,a
 895+ 90F2 FD 44                                ld      b,iyh                       ; from row
 896+ 90F4 DD 4C                                ld      c,ixh                       ; from col
 897+ 90F6 FD 55                                ld      d,iyl                       ; to row
 898+ 90F8 1E B4                                ld      e,L2SunScanner
 899+ 90FA                                      MMUSelectLayer2
 899+ 90FA ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 900+ 90FE CD 60 E3                             call    l2_draw_vert_line_to
 901+ 9101 FD 45        .NoStick:               ld      b,iyl                       ; row
 902+ 9103 DD 4C                                ld      c,ixh                       ; col
 903+ 9105 3E FC                                ld      a,L2SunScannerBright
 904+ 9107 CD 37 E1                             call    l2_plot_pixel
 905+ 910A FD 45                                ld      b,iyl
 906+ 910C DD 4C                                ld      c,ixh
 907+ 910E 0C                                   inc     c
 908+ 910F 3E FC                                ld      a,L2SunScannerBright
 909+ 9111 CD 37 E1                             call    l2_plot_pixel
 910+ 9114 C9                                   ret
 911+ 9115
 912+ 9115
 913+ 9115              ; As the space station is always ship 0 then we can just use the scanner
 914+ 9115
 915+ 9115              ; This will go though all the universe ship data banks and plot, for now we will just work on one bank
 916+ 9115 3A 3D C0     UpdateScannerShip:      ld      a,(UBnKexplDsp)             ; if bit 4 is clear then ship should not be drawn
 917+ 9118 CB 67                                bit     4,a                         ; .
 918+ 911A                                      ;DEBUG ret     z                           ; .
 919+ 911A 3A 2D C3                             ld      a,(ShipTypeAddr)            ; if its a planet or sun, do not display
 920+ 911D CB 7F                                bit     7,a
 921+ 911F C0                                   ret     nz
 922+ 9120              ; DEBUG Add in station types later
 923+ 9120 2A 12 C0     .NotMissile:            ld      hl,(UBnKzlo)
 924+ 9123 ED 5B 0C C0                          ld      de,(UBnKxlo)
 925+ 9127 ED 4B 0F C0                          ld      bc,(UBnKylo)
 926+ 912B 7C                                   ld      a,h
 927+ 912C B2                                   or      d
 928+ 912D B0                                   or      b
 929+ 912E E6 C0                                and     %11000000
 930+ 9130 C0                                   ret     nz                          ; if distance Hi > 64 on any ccord- off screen
 931+ 9131 3A 0E C0     .MakeX2Compliment:      ld      a,(UBnKxsgn)
 932+ 9134 CB 7F                                bit     7,a
 933+ 9136 28 04                                jr      z,.absXHi
 934+ 9138                                      NegD
 934+ 9138 7A          >                    ld      a,d
 934+ 9139 ED 44       >                    neg
 934+ 913B 57          >                    ld      d,a
 935+ 913C 7A           .absXHi:                ld      a,d
 936+ 913D C6 80                                add     ScannerX
 937+ 913F DD 67                                ld      ixh,a                       ; store adjusted X in ixh
 938+ 9141 CB 3C        .ProcessZCoord:         srl     h
 939+ 9143 CB 3C                                srl     h
 940+ 9145 3A 14 C0     .MakeZ2Compliment:      ld      a,(UBnKzsgn)
 941+ 9148 CB 7F                                bit     7,a
 942+ 914A 28 04                                jr      z,.absZHi
 943+ 914C                                      NegH
 943+ 914C 7C          >                    ld      a,h
 943+ 914D ED 44       >                    neg
 943+ 914F 67          >                    ld      h,a
 944+ 9150 3E AB        .absZHi:                ld      a,ScannerY
 945+ 9152 94                                   sub     h
 946+ 9153 FD 67                                ld      iyh,a                       ; make iyh adjusted Z = row on screen
 947+ 9155 CB 38        .ProcessStickLength:    srl     b                           ; divide b by 2
 948+ 9157 20 19                                jr      nz,.StickHasLength
 949+ 9159 FD 7C        .Stick0Length:          ld      a,iyh                       ; abs stick end is row - length
 950+ 915B FD 6F                                ld      iyl,a
 951+ 915D DD 7D                                ld      a,ixl
 952+ 915F                                      GetShipColorBright
 952+ 915F 3A 2D C3    >                        ld      a,(ShipTypeAddr)
 952+ 9162 CB 27       >                        sla     a                            ; as its byte pairs * 2
 952+ 9164 3C          >                        inc     a
 952+ 9165 21 07 8C    >                        ld      hl,ScannerColourTable
 952+ 9168 ED 31       >                        add     hl,a
 952+ 916A 7E          >                        ld      a,(hl)
 953+ 916B                                      MMUSelectLayer2
 953+ 916B ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 954+ 916F C3 A9 91                             jp      .NoStick
 955+ 9172 3A 11 C0     .StickHasLength:        ld      a,(UBnKysgn)                ; if b  =  0 then no line
 956+ 9175 CB 7F                                bit     7,a
 957+ 9177 28 04                                jr      z,.absYHi
 958+ 9179                                      NegB
 958+ 9179 78          >                    ld      a,b
 958+ 917A ED 44       >                    neg
 958+ 917C 47          >                    ld      b,a
 959+ 917D FD 7C        .absYHi:                ld      a,iyh
 960+ 917F 90           .SetStickPos:           sub     b
 961+ 9180                                      JumpIfALTNusng ScannerBottom, .StickOnScreen
 961+ 9180 FE BE       >                        cp      ScannerBottom
 961+ 9182 DA 87 91    >                        jp		c, .StickOnScreen
 962+ 9185 3E BE                                ld      a,ScannerBottom
 963+ 9187 FD 6F        .StickOnScreen:         ld      iyl,a                       ; iyh is again stick end point
 964+ 9189                                      GetShipColor
 964+ 9189 3A 2D C3    >                        ld      a,(ShipTypeAddr)
 964+ 918C CB 27       >                        sla     a                            ; as its byte pairs * 2
 964+ 918E 21 07 8C    >                        ld      hl,ScannerColourTable
 964+ 9191 ED 31       >                        add     hl,a
 964+ 9193 7E          >                        ld      a,(hl)
 965+ 9194 DD 6F                                ld      ixl,a
 966+ 9196 FD 44                                ld      b,iyh                       ; from row
 967+ 9198 DD 4C                                ld      c,ixh                       ; from col
 968+ 919A FD 55                                ld      d,iyl                       ; to row
 969+ 919C DD 5D                                ld      e,ixl                       ; colur will only be green or yellow for now
 970+ 919E E5                                   push    hl
 971+ 919F                                      MMUSelectLayer2
 971+ 919F ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 972+ 91A3 CD 60 E3                             call    l2_draw_vert_line_to
 973+ 91A6 E1                                   pop     hl
 974+ 91A7 23                                   inc     hl
 975+ 91A8 7E                                   ld      a,(hl)
 976+ 91A9 FD 45        .NoStick:               ld      b,iyl                       ; row
 977+ 91AB DD 4C                                ld      c,ixh                       ; col
 978+ 91AD F5                                   push    af
 979+ 91AE CD 37 E1                             call    l2_plot_pixel
 980+ 91B1 F1                                   pop     af
 981+ 91B2 FD 45                                ld      b,iyl
 982+ 91B4 DD 4C                                ld      c,ixh
 983+ 91B6 0C                                   inc     c
 984+ 91B7 CD 37 E1                             call    l2_plot_pixel
 985+ 91BA C9                                   ret
 986+ 91BB
 987+ 91BB
# file closed: ./Views/ConsoleDrawing.asm
 579  91BB                          INCLUDE "./Tables/message_queue.asm"
# file opened: ./Tables/message_queue.asm
   1+ 91BB
   2+ 91BB
   3+ 91BB              ResetMessageQueue:      ZeroA
   3+ 91BB AF          >                        xor a
   4+ 91BC 32 FB 9C                             ld      (MessageCount),a
   5+ 91BF 32 FC 9C                             ld      (MessageCurrent),a
   6+ 91C2 21 FF 9C                             ld      hl,MessageQueue
   7+ 91C5 11 FD 9C                             ld      de,MessageIndex
   8+ 91C8 06 05                                ld      b,5
   9+ 91CA 7D           .ClearMessageIndexs:    ld      a,l                                 ; Wipe out the indexes to all the data
  10+ 91CB 12                                   ld      (de),a                              ;
  11+ 91CC 13                                   inc     de                                  ;
  12+ 91CD 7C                                   ld      a,h                                 ;
  13+ 91CE 12                                   ld      (de),a                              ;
  14+ 91CF 13                                   inc     de                                  ;
  15+ 91D0 3E 21                                ld      a,MESSAGESIZE                       ;
  16+ 91D2 ED 31                                add     hl,a                                ;
  17+ 91D4 10 F4                                djnz    .ClearMessageIndexs                 ;
  18+ 91D6 21 FF 9C     .ClearText:             ld      hl,MessageQueue
  19+ 91D9 11 AA 00                             ld      de,(MAXMESSAGES * MESSAGESIZE) + MAXMESSAGES    ; MessageQueue + MessageTimeout
  20+ 91DC 3E 00                                ld      a,0
  21+ 91DE CD A5 99                             call	memfill_dma
  22+ 91E1 C9                                   ret
  23+ 91E2
  24+ 91E2              ; Message to enqeue is a string held at DE that must be terminated in \0
  25+ 91E2              ;                                       IYH = timer for message
  26+ 91E2 3A FB 9C     EnqueMessage:           ld      a,(MessageCount)                    ; Maximum message count check
  27+ 91E5                                      ReturnIfAGTENusng    MAXMESSAGES            ; we do not enque if queue is full
  27+ 91E5 FE 05       >                        cp    MAXMESSAGES
  27+ 91E7 D0          >                        ret	 nc
  28+ 91E8 3C                                   inc     a
  29+ 91E9 32 FB 9C                             ld      (MessageCount),a                    ; get ready for next message
  30+ 91EC 4F           .AddMessage:            ld      c,a
  31+ 91ED 3A FC 9C                             ld      a,(MessageCurrent)                  ; a = current message id + count + 1
  32+ 91F0 81                                   add     c                                   ;
  33+ 91F1                                      JumpIfALTNusng MAXMESSAGES, .ReadyToAdd     ; a = a modulus 5 (note we can only hit 5 messages
  33+ 91F1 FE 05       >                        cp      MAXMESSAGES
  33+ 91F3 DA F8 91    >                        jp		c, .ReadyToAdd
  34+ 91F6 D6 05        .CircularQueue:         sub     MAXMESSAGES                         ; so only need 1 cycle of modulus
  35+ 91F8 21 A4 9D     .ReadyToAdd:            ld      hl,MessageTimeout                   ; write out message display time
  36+ 91FB ED 31                                add     hl,a                                ; as some may be brief messages
  37+ 91FD 4F                                   ld      c,a                                 ;
  38+ 91FE FD 7C                                ld      a,iyh                               ;
  39+ 9200 77                                   ld      (hl),a                              ;
  40+ 9201 79                                   ld      a,c                                 ; get back index
  41+ 9202 21 FD 9C                             ld      hl,MessageIndex
  42+ 9205                                      HLEquAddrAtHLPlusA                          ; hl = target location for message
  42+ 9205 CB 27       >                    sla         a
  42+ 9207 ED 31       >                    add         hl,a
  42+ 9209 7E          >                    ld          a,(hl)
  42+ 920A 23          >                    inc         hl
  42+ 920B 66          >                    ld          h,(hl)
  42+ 920C 6F          >                    ld          l,a
  43+ 920D EB                                   ex      de,hl                               ; de = destination, hl = message
  44+ 920E                                      ldCopyTextAtHLtoDE                          ; copy over text as we have done the rest
  44+ 920E 7E          >.CopyLoop:              ld      a,(hl)
  44+ 920F 12          >                        ld      (de),a
  44+ 9210 FE 00       >                        cp      0
  44+ 9212 CA 19 92    >                        jp      z,.DoneCopy
  44+ 9215 23          >                        inc     hl
  44+ 9216 13          >                        inc     de
  44+ 9217 18 F5       >                        jr      .CopyLoop
  44+ 9219             >.DoneCopy:
  45+ 9219 C9                                   ret
  46+ 921A
  47+ 921A 3A FC 9C     UpdateMessageTimer:     ld      a,(MessageCurrent)
  48+ 921D 21 A4 9D                             ld      hl,MessageTimeout
  49+ 9220 ED 31                                add     hl,a
  50+ 9222 7E                                   ld      a,(hl)
  51+ 9223 3D                                   dec     a
  52+ 9224 28 02                                jr      z,.UpdateQueue
  53+ 9226 77           .UpdateTimer            ld      (hl),a
  54+ 9227 C9                                   ret
  55+ 9228 77           .UpdateQueue:           ld      (hl),a
  56+ 9229 21 FB 9C                             ld      hl,MessageCount
  57+ 922C 35                                   dec     (hl)
  58+ 922D 3A FC 9C                             ld      a,(MessageCurrent)
  59+ 9230 23                                   inc     hl
  60+ 9231                                      JumpIfALTNusng MAXMESSAGES, .ReadyToUpdate
  60+ 9231 FE 05       >                        cp      MAXMESSAGES
  60+ 9233 DA 37 92    >                        jp		c, .ReadyToUpdate
  61+ 9236              .CircularQueue:         ZeroA
  61+ 9236 AF          >                        xor a
  62+ 9237 32 FC 9C     .ReadyToUpdate          ld      (MessageCurrent),a
  63+ 923A C9                                   ret
  64+ 923B
  65+ 923B 3A FB 9C     DisplayCurrentMessage:  ld      a,(MessageCount)
  66+ 923E                                      ReturnIfAIsZero
  66+ 923E A7          >                        and     a
  66+ 923F C8          >                        ret     z
  67+ 9240 3A FC 9C                             ld      a,(MessageCurrent)
  68+ 9243 21 FD 9C                             ld      hl,MessageIndex
  69+ 9246                                      HLEquAddrAtHLPlusA
  69+ 9246 CB 27       >                    sla         a
  69+ 9248 ED 31       >                    add         hl,a
  69+ 924A 7E          >                    ld          a,(hl)
  69+ 924B 23          >                    inc         hl
  69+ 924C 66          >                    ld          h,(hl)
  69+ 924D 6F          >                    ld          l,a
  70+ 924E                                      MMUSelectLayer1
  70+ 924E ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
  71+ 9252 11 01 00                             ld      de,MESSAGELINE
  72+ 9255 CD 15 E1                             call    l1_print_at_wrap
  73+ 9258 C9                                   ret
  74+ 9259
  75+ 9259              HyperSpaceMessage:      MMUSelectLayer1
  75+ 9259 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
  76+ 925D 11 08 86     .DisplayHyperCountDown: ld      de,Hyp_to
  77+ 9260 21 00 AC                             ld      hl,name_expanded
  78+ 9263                                      ldCopyTextAtHLtoDE
  78+ 9263 7E          >.CopyLoop:              ld      a,(hl)
  78+ 9264 12          >                        ld      (de),a
  78+ 9265 FE 00       >                        cp      0
  78+ 9267 CA 6E 92    >                        jp      z,.DoneCopy
  78+ 926A 23          >                        inc     hl
  78+ 926B 13          >                        inc     de
  78+ 926C 18 F5       >                        jr      .CopyLoop
  78+ 926E             >.DoneCopy:
  79+ 926E AF           .DoneName:              xor     a
  80+ 926F 12                                   ld      (de),a
  81+ 9270 32 24 86                             ld      (Hyp_message+31),a      ; max out at 32 characters
  82+ 9273 21 05 86     .CentreJustify:         ld      hl,Hyp_message
  83+ 9276                                      HalfLengthHL
  83+ 9276 06 00       >                        ld      b,0
  83+ 9278 7E          >.CountLenLoop:          ld      a,(hl)
  83+ 9279 FE 00       >                        cp      0
  83+ 927B 28 04       >                        jr      z,.DoneCount
  83+ 927D 04          >                        inc     b
  83+ 927E 23          >                        inc     hl
  83+ 927F 18 F7       >                        jr      .CountLenLoop
  83+ 9281 3E 20       >.DoneCount:             ld      a,32
  83+ 9283 90          >                        sub     b
  83+ 9284 CB 2F       >                        sra     a
  84+ 9286 21 3F 86                             ld      hl,Hyp_centeredTarget
  85+ 9289                                      ldClearTextLoop 32
  85+ 9289 47          >                        ld      b,a
  85+ 928A 3E 20       >                        ld      a,32
  85+ 928C 77          >.ClearLoop:             ld      (hl),a
  85+ 928D 23          >                        inc     hl
  85+ 928E 10 FC       >                        djnz    .ClearLoop
  86+ 9290 EB                                   ex      de,hl
  87+ 9291 21 05 86                             ld      hl,Hyp_message
  88+ 9294                                      ldCopyTextAtHLtoDE
  88+ 9294 7E          >.CopyLoop:              ld      a,(hl)
  88+ 9295 12          >                        ld      (de),a
  88+ 9296 FE 00       >                        cp      0
  88+ 9298 CA 9F 92    >                        jp      z,.DoneCopy
  88+ 929B 23          >                        inc     hl
  88+ 929C 13          >                        inc     de
  88+ 929D 18 F5       >                        jr      .CopyLoop
  88+ 929F             >.DoneCopy:
  89+ 929F                                      ZeroA
  89+ 929F AF          >                        xor a
  90+ 92A0 32 5F 86                             ld      (Hyp_centeredEol),a
  91+ 92A3 21 3B 86                             ld      hl,Hyp_counter           ; clear counter digits
  92+ 92A6 3E 20                                ld      a,32                     ; clear counter digits
  93+ 92A8 77                                   ld      (hl),a                   ; clear counter digits
  94+ 92A9 23                                   inc     hl                       ; clear counter digits
  95+ 92AA 77                                   ld      (hl),a                   ; clear counter digits
  96+ 92AB 23                                   inc     hl                       ; clear counter digits
  97+ 92AC 77                                   ld      (hl),a                   ; clear counter digits
  98+ 92AD CD E1 85                             call    UpdateCountdownNumber
  99+ 92B0 21 32 86                             ld      hl,Hyp_charging
 100+ 92B3                                      HalfLengthHL
 100+ 92B3 06 00       >                        ld      b,0
 100+ 92B5 7E          >.CountLenLoop:          ld      a,(hl)
 100+ 92B6 FE 00       >                        cp      0
 100+ 92B8 28 04       >                        jr      z,.DoneCount
 100+ 92BA 04          >                        inc     b
 100+ 92BB 23          >                        inc     hl
 100+ 92BC 18 F7       >                        jr      .CountLenLoop
 100+ 92BE 3E 20       >.DoneCount:             ld      a,32
 100+ 92C0 90          >                        sub     b
 100+ 92C1 CB 2F       >                        sra     a
 101+ 92C3 21 80 86                             ld      hl,Hyp_centeredCharging
 102+ 92C6                                      ldClearTextLoop 32
 102+ 92C6 47          >                        ld      b,a
 102+ 92C7 3E 20       >                        ld      a,32
 102+ 92C9 77          >.ClearLoop:             ld      (hl),a
 102+ 92CA 23          >                        inc     hl
 102+ 92CB 10 FC       >                        djnz    .ClearLoop
 103+ 92CD EB                                   ex      de,hl
 104+ 92CE 21 32 86                             ld      hl,Hyp_charging
 105+ 92D1                                      ldCopyTextAtHLtoDE
 105+ 92D1 7E          >.CopyLoop:              ld      a,(hl)
 105+ 92D2 12          >                        ld      (de),a
 105+ 92D3 FE 00       >                        cp      0
 105+ 92D5 CA DC 92    >                        jp      z,.DoneCopy
 105+ 92D8 23          >                        inc     hl
 105+ 92D9 13          >                        inc     de
 105+ 92DA 18 F5       >                        jr      .CopyLoop
 105+ 92DC             >.DoneCopy:
 106+ 92DC AF                                   xor     a
 107+ 92DD 32 A0 86                             ld      (Hyp_centeredEol2),a
 108+ 92E0 2A A5 9E     .UpdateHyperCountdown:  ld      hl,(InnerHyperCount)
 109+ 92E3 2D                                   dec     l
 110+ 92E4 20 26                                jr      nz,.decHyperInnerOnly
 111+ 92E6 25                                   dec     h
 112+ 92E7 FA 10 93                             jp      m,.HyperCountDone
 113+ 92EA 2E 0B        .resetHyperInner:       ld      l,$0B
 114+ 92EC E5                                   push    hl
 115+ 92ED 16 0C                                ld      d,12
 116+ 92EF 3E 06                                ld      a,L1ColourPaperBlack | L1ColourInkYellow
 117+ 92F1 CD 8B E0                             call    l1_attr_cls_2DlinesA
 118+ 92F4 16 60                                ld      d,12 * 8
 119+ 92F6 CD 74 E0                             call    l1_cls_2_lines_d
 120+ 92F9 11 00 60                             ld      de,$6000
 121+ 92FC 21 3F 86                             ld      hl,Hyp_centeredTarget
 122+ 92FF CD C8 E0                             call    l1_print_at
 123+ 9302 11 00 68                             ld      de,$6800
 124+ 9305 21 80 86                             ld      hl,Hyp_centeredCharging
 125+ 9308 CD C8 E0                             call    l1_print_at
 126+ 930B E1                                   pop     hl
 127+ 930C 22 A5 9E     .decHyperInnerOnly:     ld      (InnerHyperCount),hl
 128+ 930F C9                                   ret
 129+ 9310 21 00 00     .HyperCountDone:        ld      hl,0
 130+ 9313 22 A5 9E                             ld      (InnerHyperCount),hl
 131+ 9316 16 0C                                ld      d,12
 132+ 9318 3E 00                                ld      a,L1ColourPaperBlack | L1ColourInkBlack
 133+ 931A CD 8B E0                             call    l1_attr_cls_2DlinesA
 134+ 931D 16 60                                ld      d,12 * 8
 135+ 931F CD 74 E0                             call    l1_cls_2_lines_d
 136+ 9322                                      ForceTransition ScreenHyperspace                            ; transition to hyperspace
 136+ 9322 3E 0E       >                        ld      a,ScreenHyperspace
 136+ 9324 32 84 88    >                        ld      (ScreenTransitionForced), a
 137+ 9327 C9                                   ret
 138+ 9328
# file closed: ./Tables/message_queue.asm
 580  9328                          INCLUDE "./Tables/LaserStatsTable.asm"
# file opened: ./Tables/LaserStatsTable.asm
   1+ 9328              ; LaserTypeTable
   2+ 9328              ; laser type = id of laser
   3+ 9328              ; laser pulse pause = time before next pulse
   4+ 9328              ; laser pulse duration = time laser is on per shot
   5+ 9328              ; laser damage output
   6+ 9328              ;
   7+ 9328              ; LaserType
   8+ 9328              ; LaserPulseRate                          ; how many pulses can be fired before long pause
   9+ 9328              ; LaserPulseOnTime                        ; cycles laser is on for
  10+ 9328              ; LaserPulseOffTime                       ; cycles laser is off for
  11+ 9328              ; LaserPulseRest                          ; time before pulse count resets to 0 (i.e cooldown)
  12+ 9328              ; LaserDamageOutput                       ; amount of damage for a laser hit
  13+ 9328              ; LaserEnergyDrain                        ; amount of energy drained by cycle
  14+ 9328              ; LaserHeat                               ; amount of heat generated
  15+ 9328              ; LaserDurability                         ; probabability out of 255 that a hit on unshielded will add random amount of damage
  16+ 9328              ; LaserDurabilityAmount                   ; max amount of damagage can be sustained in one damage hit
  17+ 9328              ; LaserInMarkets                          ; can this laser be purchased 0 = yes 1 = no
  18+ 9328              ; LaserTechLevel                          ; minimum tech level system to buy from
  19+ 9328              ;
  20+ 9328              LaserStatsTableWidth    EQU 12
  21+ 9328              ;                           0    1    2    3    4    5    6    7    8    9   10   11
  22+ 9328              ;                          Typ  Rate On   Off  Rst  Dam  Drn  Het  Dur  DAt  Mrk  Tek
  23+ 9328 00 02 05 20  LaserStatsTable:        DB $00, $02, $05, $20, $40, $03, $10, $02, $20 ,$10 ,$00, $00; basic laser
  23+ 932C 40 03 10 02
  23+ 9330 20 10 00 00
  24+ 9334 01 01 08 08                          DB $01, $01, $08, $08, $20, $03, $10, $08, $20 ,$10 ,$00, $01; pulse laser
  24+ 9338 20 03 10 08
  24+ 933C 20 10 00 01
  25+ 9340 02 06 08 03                          DB $02, $06, $08, $03, $3A, $03, $10, $02, $20 ,$10 ,$00, $02; burst laser TODO THIS ONE IS ODD
  25+ 9344 3A 03 10 02
  25+ 9348 20 10 00 02
  26+ 934C 03 11 06 04                          DB $03, $11, $06, $04, $50, $02, $10, $05, $30 ,$10 ,$00, $03; Gatling laser
  26+ 9350 50 02 10 05
  26+ 9354 30 10 00 03
  27+ 9358 04 00 01 00                          DB $04, $00, $01, $00, $03, $03, $03, $10, $20 ,$10 ,$00, $04; beam ; DOES NOT WORK
  27+ 935C 03 03 03 10
  27+ 9360 20 10 00 04
  28+ 9364 05 01 20 30                          DB $05, $01, $20, $30, $60, $03, $02, $02, $20 ,$10 ,$00, $05; mining
  28+ 9368 60 03 02 02
  28+ 936C 20 10 00 05
  29+ 9370 06 00 01 00                          DB $06, $00, $01, $00, $06, $05, $05, $05, $10 ,$10 ,$00, $08; military beam DOES NOT WORK
  29+ 9374 06 05 05 05
  29+ 9378 10 10 00 08
  30+ 937C 07 01 01 02                          DB $07, $01, $01, $02, $20, $22, $01, $30, $30 ,$11 ,$01, $10; thargoid
  30+ 9380 20 22 01 30
  30+ 9384 30 11 01 10
  31+ 9388 08 01 05 10                          DB $08, $01, $05, $10, $80, $70, $02, $03, $60 ,$11 ,$01, $10; Starkiller
  31+ 938C 80 70 02 03
  31+ 9390 60 11 01 10
  32+ 9394
  33+ 9394
  34+ 9394
  35+ 9394
  36+ 9394
  37+ 9394
  38+ 9394
# file closed: ./Tables/LaserStatsTable.asm
 581  9394                          INCLUDE "./Tables/ShipClassTable.asm"
# file opened: ./Tables/ShipClassTable.asm
   1+ 9394 00           ShipBodiesTable:        DB  $ - ShipBodiesTable
   2+ 9395 23 18 16 00  ShipPackList:           DB  ShipID_Sidewinder, ShipID_Mamba, ShipID_Krait, ShipID_Adder, ShipID_Gecko, ShipID_Cobra_Mk_1, ShipID_Worm, ShipID_Cobra_Mk_3_P
   2+ 9399 13 0A 2A 0B
   3+ 939D              ShipPackTableSize       EQU $ - ShipPackList
   4+ 939D 0B 02 1F 12  ShipHunterTable         DB  ShipID_Cobra_Mk_3_P, ShipID_Asp_Mk_2, ShipID_Python_P, ShipID_Fer_De_Lance
   5+ 93A1              ShipHunterTableSize     EQU $ - ShipHunterTable
   6+ 93A1 19           ShipMissileTable        DB  ShipID_Missile
   7+ 93A2              ShipMissileTableSize    EQU $ - ShipMissileTable
# file closed: ./Tables/ShipClassTable.asm
 582  93A2
 583  93A2 AF           SeedGalaxy0:            xor     a
 584  93A3                                      MMUSelectGalaxyA
 584  93A3 ED 92 57    >                     nextreg GalaxyDataMMU,       a
 585  93A6 DD 21 16 E0                          ld      ix,galaxy_data
 586  93AA AF                                   xor		a
 587  93AB 32 E4 9D                             ld		(XSAV),a
 588  93AE CD CF A3                             call    copy_galaxy_to_system
 589  93B1 DD E5        SeedGalaxy0Loop:        push    ix
 590  93B3 D1                                   pop     de
 591  93B4 21 CB 9D                             ld      hl,SystemSeed
 592  93B7 CD D5 A3                             call    copy_seed
 593  93BA DD E5                                push    ix
 594  93BC E1                                   pop     hl
 595  93BD ED 34 08 00                          add     hl,8
 596  93C1 E5                                   push    hl
 597  93C2 DD E1                                pop     ix
 598  93C4 CD 0A A4                             call    next_system_seed
 599  93C7 3A E4 9D                             ld		a,(XSAV)
 600  93CA 3D                                   dec		a
 601  93CB FE 00                                cp		0
 602  93CD C8                                   ret		z
 603  93CE 32 E4 9D                             ld		(XSAV),a
 604  93D1 20 DE                                jr      nz,SeedGalaxy0Loop
 605  93D3 C9                                   ret
 606  93D4
 607  93D4
 608  93D4
 609  93D4
 610  93D4                  ;include "./ModelRender/testdrawing.asm"
 611  93D4                  include "./Menus/AttractMode.asm"
# file opened: ./Menus/AttractMode.asm
   1+ 93D4              AttractDuration             EQU $00F0
   2+ 93D4              AttractCounterStart         EQU $80
   3+ 93D4 F0 00        AttractTimer:              DW      AttractDuration
   4+ 93D6 80           AttractCounter:            DB      AttractCounterStart
   5+ 93D7
   6+ 93D7 3D 08        Attract_boiler_text		DW $083D
   7+ 93D9
   8+ 93D9
   9+ 93D9 4C 6F 61 64  ATTR_LoadCommander      DB "Load Commander (Y/N)",0
   9+ 93DD 20 43 6F 6D
   9+ 93E1 6D 61 6E 64
   9+ 93E5 65 72 20 28
   9+ 93E9 59 2F 4E 29
   9+ 93ED 00
  10+ 93EE
  11+ 93EE              AttractMode:            MMUSelectLayer1
  11+ 93EE ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
  12+ 93F2 CD 80 E0                             call	l1_cls
  13+ 93F5 3E 07                                ld		a,7
  14+ 93F7 CD 9B E0                             call	l1_attr_cls_to_a
  15+ 93FA 1E FF                                ld      e,$FF
  16+ 93FC ED 5B D7 93                          ld      de,(Attract_boiler_text)
  17+ 9400 21 D9 93                             ld      hl,ATTR_LoadCommander
  18+ 9403 CD C8 E0                             call    l1_print_at
  19+ 9406                                      MMUSelectSpriteBank
  19+ 9406 ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
  20+ 940A CD A4 E4                             call        sprite_cls_cursors
  21+ 940D CD F6 E0                             call    l2_cls_lower_third
  22+ 9410                                      MMUSelectConsoleBank
  22+ 9410 ED 91 57 3D >					 nextreg ConsoleImageDataMMU,  BankConsole
  23+ 9414 21 00 50                             ld          hl,ScreenL1Bottom       ; now the pointers are in Ubnk its easy to read
  24+ 9417 11 00 E0                             ld          de,ConsoleImageData
  25+ 941A 01 00 08                             ld          bc, ScreenL1BottomLen
  26+ 941D CD CB 99                             call        memcopy_dma
  27+ 9420 21 00 5A                             ld          hl,ScreenL1AttrBtm       ; now the pointers are in Ubnk its easy to read
  28+ 9423 11 00 E8                             ld          de,ConsoleAttributes
  29+ 9426 01 00 01                             ld          bc, ScreenL1AttrBtmLen
  30+ 9429 CD CB 99                             call        memcopy_dma
  31+ 942C                                      MMUSelectLayer2
  31+ 942C ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
  32+ 9430 CD 03 E0                             call    asm_l2_double_buffer_on
  33+ 9433 CD 9F 94     .StartShip:             call    SelectARandomShip
  34+ 9436 CD AF 9A     .DrawLoop:              call    scan_keyboard
  35+ 9439 3E 50                                ld      a,c_Pressed_Yes
  36+ 943B CD FD 9A                             call    is_key_up_state
  37+ 943E 20 57                                jr      nz,.YPressed
  38+ 9440 3E 52                                ld      a,c_Pressed_No
  39+ 9442 CD FD 9A                             call    is_key_up_state
  40+ 9445 20 53                                jr      nz,.NPressed
  41+ 9447                                      MMUSelectUniverseN  1
  41+ 9447 ED 91 56 47 >                     nextreg UniverseMMU,       BankUNIVDATA0+1
  42+ 944B CD 96 D8                             call    ApplyShipRollAndPitch
  43+ 944E                                   ;   xor     a
  44+ 944E                                   ;  ld      (UBnKRotXCounter),a
  45+ 944E                                   ;  ld      (UBnKRotZCounter),a
  46+ 944E              .ProcessUnivShip:       MMUSelectLayer2
  46+ 944E ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
  47+ 9452 CD E1 E0                             call   l2_cls_upper_two_thirds
  48+ 9455 CD D4 D9                             call    ProcessShip
  49+ 9458 01 01 01     .Drawbox:               ld		bc,$0101
  50+ 945B 11 FD 7F                             ld		de,$7FFD
  51+ 945E 3E C0                                ld		a,$C0
  52+ 9460                                      MMUSelectLayer2
  52+ 9460 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
  53+ 9464 CD 4B E2                             call	l2_draw_box
  54+ 9467 CD 15 E1     .DoubleBuffer:          call    l2_flip_buffers
  55+ 946A 3A D6 93                             ld      a,(AttractCounter)
  56+ 946D                                      JumpIfAIsZero .SameShipPosition
  56+ 946D A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
  56+ 946E CA 83 94    >                        jp	    z, .SameShipPosition
  57+ 9471 3D                                   dec     a
  58+ 9472 32 D6 93                             ld      (AttractCounter),a
  59+ 9475 2A 12 C0                             ld      hl, (UBnKzlo)
  60+ 9478 11 08 00     .UpdatePos:             ld      de, $0008
  61+ 947B ED 52                                sbc     hl,de
  62+ 947D 22 12 C0                             ld      (UBnKzlo),hl
  63+ 9480 CD 7C A3                             call    doRandom
  64+ 9483 2A D4 93     .SameShipPosition:      ld      hl,(AttractTimer)
  65+ 9486 2B                                   dec     hl
  66+ 9487 22 D4 93                             ld      (AttractTimer),hl
  67+ 948A 7C                                   ld      a,h
  68+ 948B B5                                   or      l
  69+ 948C 20 A8                                jr      nz,.DrawLoop
  70+ 948E 21 F0 00     .NewShip:               ld      hl,AttractDuration
  71+ 9491 22 D4 93                             ld      (AttractTimer),hl
  72+ 9494 C3 33 94                             jp      .StartShip
  73+ 9497 3E 00        .YPressed:              ld      a,0
  74+ 9499 C9                                   ret
  75+ 949A 3E FF        .NPressed:              ld      a,$FF
  76+ 949C C9                                   ret
  77+ 949D DD 01        .ExitAttractMode:       break
  78+ 949F
  79+ 949F 06 01        SelectARandomShip:      ld      b,1                             ; Demo screen uses slot 1
  80+ 94A1                                      MMUSelectUniverseN  1
  80+ 94A1 ED 91 56 47 >                     nextreg UniverseMMU,       BankUNIVDATA0+1
  81+ 94A5                                      MMUSelectShipBank1
  81+ 94A5 ED 91 57 3B >					 nextreg ShipModelMMU,	    BankShipModels1
  82+ 94A9 FD 26 01                             ld      iyh, 1
  83+ 94AC CD 7C A3     .SelectRandom:          call    doRandom
  84+ 94AF                                      JumpIfAGTENusng ShipID_Rattler+1, .SelectRandom
  84+ 94AF FE 2C       >                        cp     ShipID_Rattler+1
  84+ 94B1 D2 AC 94    >                        jp		nc,.SelectRandom
  85+ 94B4 FD 6F                                ld      iyl,a
  86+ 94B6 CD 0F E0                             call    GetShipBankId                       ; find actual memory location of data
  87+ 94B9                                      MMUSelectShipBankA
  87+ 94B9 ED 92 57    >					 nextreg ShipModelMMU,	    a
  88+ 94BC 78                                   ld      a,b
  89+ 94BD CD 6A E0                             call    CopyShipToUniverse
  90+ 94C0 3A 2D C3                             ld      a,(ShipTypeAddr)
  91+ 94C3 CB 7F                                bit     7,a                                 ; is it a type we don't want in attract mode
  92+ 94C5 20 E5                                jr      nz,.SelectRandom
  93+ 94C7 3E 01                                ld      a,1                                 ; slot 1, iyh and iyl already set
  94+ 94C9 CD C5 C6                             call    UnivInitRuntime
  95+ 94CC CD D7 C5                             call    UnivSetDemoPostion
  96+ 94CF 21 F0 00                             ld      hl,AttractDuration
  97+ 94D2 22 D4 93                             ld      (AttractTimer),hl
  98+ 94D5 3E 80                                ld      a, AttractCounterStart
  99+ 94D7 32 D6 93                             ld      (AttractCounter),a
 100+ 94DA C9                                   ret
 101+ 94DB
 102+ 94DB
 103+ 94DB
# file closed: ./Menus/AttractMode.asm
 612  94DB
 613  94DB                  include "./Maths/Utilities/XX12EquNodeDotOrientation.asm"
# file opened: ./Maths/Utilities/XX12EquNodeDotOrientation.asm
   1+ 94DB              ; We enter here with hl pointing at XX16 and bc = XX15 value
   2+ 94DB              ; so xx12 = XX15 * XX16 row
   3+ 94DB              XX12ProcessOneRow:
   4+ 94DB              XX12CalcXCell:
   5+ 94DB ED 4B 8E C0          ld		bc,(UBnkXScaled)
   6+ 94DF 5E           		ld		e,(hl)								    ; get orientation ZX
   7+ 94E0 23           		inc		hl
   8+ 94E1 56           		ld		d,(hl)                                  ; so now e = xx16 value d = xx16 sign
   9+ 94E2 7A           		ld		a,d
  10+ 94E3 A8                   xor     b
  11+ 94E4 E6 80        		and		SignOnly8Bit                            ; a = XX 16 sign
  12+ 94E6 DD 67        		ld		ixh,a								    ; orientation sign to ixh
  13+ 94E8 78           		ld		a,b                                     ; now make bc abs bc
  14+ 94E9 E6 7F        		and		SignMask8Bit
  15+ 94EB 47           		ld		b,a                                     ; bc = abs(bc) now
  16+ 94EC E5           		push	hl
  17+ 94ED 16 00                ld      d,0                                     ; d = value
  18+ 94EF 60           		ld		h,b
  19+ 94F0 69           		ld		l,c
  20+ 94F1 CD 44 AF     		call	mulDEbyHL							    ; hl = |orientation| * |x pos)
  21+ 94F4 22 E6 99     		ld		(XX12PVarResult1),hl				    ; T = 16 bit result, we only want to use high byte later
  22+ 94F7 DD 7C        		ld		a,ixh
  23+ 94F9 32 ED 99     		ld		(XX12PVarSign1),a					    ; S = sign  not sign 1 and 2 are reversed in memory so that fetchign back will put 1 in high byte 2 in low byte
  24+ 94FC E1           		pop		hl
  25+ 94FD              XX12CalcYCell:
  26+ 94FD ED 4B 90 C0          ld		bc,(UBnkYScaled)
  27+ 9501 23           		inc		hl
  28+ 9502 5E           		ld		e,(hl)							    	; get orientation ZX
  29+ 9503 23           		inc		hl
  30+ 9504 56           		ld		d,(hl)
  31+ 9505 7A           		ld		a,d
  32+ 9506 A8                   xor     b
  33+ 9507 E6 80        		and		SignOnly8Bit
  34+ 9509 DD 67        		ld		ixh,a								    ; XX16 orientation sign to ixh
  35+ 950B 78           		ld		a,b                                     ; now make bc abs bc
  36+ 950C E6 7F        		and		SignMask8Bit
  37+ 950E 47           		ld		b,a                                     ; bc = abs(bc) now
  38+ 950F E5           		push	hl
  39+ 9510 16 00                ld      d,0                                     ; d = value
  40+ 9512 60           		ld		h,b
  41+ 9513 69           		ld		l,c
  42+ 9514 CD 44 AF     		call	mulDEbyHL							    ; hl = |orientation| * |x pos)
  43+ 9517 22 E8 99     		ld		(XX12PVarResult2),hl				    ; T = 16 bit result
  44+ 951A DD 7C        		ld		a,ixh
  45+ 951C 32 EC 99     		ld		(XX12PVarSign2),a					    ; S = sign
  46+ 951F E1           		pop		hl
  47+ 9520              XX12CalcZCell:
  48+ 9520 ED 4B 92 C0          ld		bc,(UBnkZScaled)
  49+ 9524 23           		inc		hl
  50+ 9525 5E           		ld		e,(hl)								    ; get orientation ZX
  51+ 9526 23           		inc		hl
  52+ 9527 56           		ld		d,(hl)
  53+ 9528 7A           		ld		a,d
  54+ 9529 A8                   xor     b
  55+ 952A E6 80        		and		SignOnly8Bit
  56+ 952C DD 67        		ld		ixh,a								    ; orientation sign to ixh
  57+ 952E 78           		ld		a,b                                     ; now make bc abs bc
  58+ 952F E6 7F        		and		SignMask8Bit
  59+ 9531 47           		ld		b,a                                     ; bc = abs(bc) now
  60+ 9532 16 00                ld      d,0                                     ; d = value
  61+ 9534 60           		ld		h,b
  62+ 9535 69           		ld		l,c
  63+ 9536 CD 44 AF     		call	mulDEbyHL							    ; hl = |orientation| * |x pos)
  64+ 9539 22 EA 99     		ld		(XX12PVarResult3),hl				    ; T = 16 bit result
  65+ 953C DD 7C        		ld		a,ixh
  66+ 953E 32 EE 99     		ld		(XX12PVarSign3),a					    ; S = sign
  67+ 9541              XX12CalcCellResult:
  68+ 9541 2A E6 99     		ld		hl,(XX12PVarResult1)				    ; X Cell Result
  69+ 9544 ED 5B E8 99  		ld		de,(XX12PVarResult2)				    ; Y Cell Result
  70+ 9548 ED 4B EC 99  		ld		bc,(XX12PVarSign2)					    ; b = var 1 result sign c = var 2 result signs
  71+ 954C              XX12MSBOnly:
  72+ 954C 6C           		ld		l,h									    ; now move results into lower byte so / 256
  73+ 954D 5A           		ld		e,d									    ; for both results
  74+ 954E AF           		xor		a									    ;
  75+ 954F 67           		ld		h,a									    ;
  76+ 9550 57           		ld		d,a									    ; so set high byte to 0
  77+ 9551 CD 7B AC     		call	ADDHLDESignBC                           ;  XX12ProcessCalcHLPlusDESignBC		; returns with HL = result1 + result 2 signed in a
  78+ 9554 47           		ld		b,a									    ; move sign into b ready for next calc
  79+ 9555 3A EE 99     		ld		a,(XX12PVarSign3)					    ; result of the calcZ cell
  80+ 9558 4F           		ld		c,a									    ; goes into c to align with DE
  81+ 9559 ED 5B EA 99  		ld		de,(XX12PVarResult3)				    ; now add result to Result 3
  82+ 955D 5A           		ld		e,d                                     ; d = result /256
  83+ 955E 16 00        		ld		d,0									    ; and only us high byte
  84+ 9560 CD 7B AC     		call	ADDHLDESignBC; XX12ProcessCalcHLPlusDESignBC		; returns with HL = result and a = sign
  85+ 9563 C9           		ret											    ; hl = result, a = sign
  86+ 9564              								    ; hl = result, a = sign
  87+ 9564
  88+ 9564              XX12EquNodeDotTransMat:							    ; .LL51	\ -> &4832 \ XX12=XX15.XX16  each vector is 16-bit x,y,z **** ACTUALLY XX16 is value in low sign bit in high
  89+ 9564              ;...X cell
  90+ 9564 21 61 C0     		ld		hl,UbnkTransInvRow0x0     			; process orientation matrix row 0
  91+ 9567 CD DB 94             call    XX12ProcessOneRow                   ; hl = result, a = sign
  92+ 956A 47           		ld		b,a                                 ; b = sign
  93+ 956B 7C           		ld		a,h                                 ; a = high byte
  94+ 956C B0           		or		b
  95+ 956D 32 95 C0     		ld		(UBnkXX12xSign),a					; a = result with sign in bit 7
  96+ 9570 7D           		ld		a,l                                 ; the result will be in the lower byte now
  97+ 9571 32 94 C0             ld      (UBnkXX12xLo),a						; that is result done for
  98+ 9574              ;...Y cell
  99+ 9574 21 69 C0     		ld		hl,UbnkTransInvRow1y0     			; process orientation matrix row 1
 100+ 9577 CD DB 94             call    XX12ProcessOneRow
 101+ 957A 47           		ld		b,a
 102+ 957B 7C           		ld		a,h
 103+ 957C              ;		ld		a,l
 104+ 957C B0           		or		b
 105+ 957D 32 97 C0     		ld		(UBnkXX12ySign),a					; a = result with sign in bit 7
 106+ 9580 7D           		ld		a,l                                 ; the result will be in the lower byte now
 107+ 9581 32 96 C0             ld      (UBnkXX12yLo),a						; that is result done for
 108+ 9584              ;...Z cell
 109+ 9584 21 71 C0     		ld		hl,UbnkTransInvRow2z0     			; process orientation matrix row 1
 110+ 9587 CD DB 94             call    XX12ProcessOneRow
 111+ 958A 47           		ld		b,a
 112+ 958B 7C                   ld		a,h
 113+ 958C              ;		ld		a,l
 114+ 958C B0           		or		b
 115+ 958D 32 99 C0     		ld		(UBnkXX12zSign),a					; a = result with sign in bit 7
 116+ 9590 7D           		ld		a,l                                 ; the result will be in the lower byte now
 117+ 9591 32 98 C0             ld      (UBnkXX12zLo),a						; that is result done for
 118+ 9594 C9                   ret
 119+ 9595
 120+ 9595              XX12EquNodeDotOrientation:							; .LL51	\ -> &4832 \ XX12=XX15.XX16  each vector is 16-bit x,y,z **** ACTUALLY XX16 is value in low sign bit in high
 121+ 9595              ;...X cell
 122+ 9595 21 61 C0     		ld		hl,UbnkTransInvRow0x0     			; process orientation matrix row 0
 123+ 9598 CD DB 94             call    XX12ProcessOneRow                   ; hl = result, a = sign
 124+ 959B 47           		ld		b,a                                 ; b = sign
 125+ 959C 7C           		ld		a,h                                 ; a = high byte
 126+ 959D B0           		or		b
 127+ 959E 32 95 C0     		ld		(UBnkXX12xSign),a					; a = result with sign in bit 7
 128+ 95A1 7D           		ld		a,l                                 ; the result will be in the lower byte now
 129+ 95A2 32 94 C0             ld      (UBnkXX12xLo),a						; that is result done for
 130+ 95A5              ;...Y cell
 131+ 95A5 21 69 C0     		ld		hl,UbnkTransInvRow1y0     			; process orientation matrix row 1
 132+ 95A8 CD DB 94             call    XX12ProcessOneRow
 133+ 95AB 47           		ld		b,a
 134+ 95AC 7C           		ld		a,h
 135+ 95AD              ;		ld		a,l
 136+ 95AD B0           		or		b
 137+ 95AE 32 97 C0     		ld		(UBnkXX12ySign),a					; a = result with sign in bit 7
 138+ 95B1 7D           		ld		a,l                                 ; the result will be in the lower byte now
 139+ 95B2 32 96 C0             ld      (UBnkXX12yLo),a						; that is result done for
 140+ 95B5              ;...Z cell
 141+ 95B5 21 71 C0     		ld		hl,UbnkTransInvRow2z0     			; process orientation matrix row 1
 142+ 95B8 CD DB 94             call    XX12ProcessOneRow
 143+ 95BB 47           		ld		b,a
 144+ 95BC 7C                   ld		a,h
 145+ 95BD              ;		ld		a,l
 146+ 95BD B0           		or		b
 147+ 95BE 32 99 C0     		ld		(UBnkXX12zSign),a					; a = result with sign in bit 7
 148+ 95C1 7D           		ld		a,l                                 ; the result will be in the lower byte now
 149+ 95C2 32 98 C0             ld      (UBnkXX12zLo),a						; that is result done for
 150+ 95C5 C9                   ret
 151+ 95C6
 152+ 95C6              XX12EquNodeDotXX16:					         		; .LL51	\ -> &4832 \ XX12=XX15.XX16  each vector is 16-bit x,y,z **** ACTUALLY XX16 is value in low sign bit in high
 153+ 95C6              ;...X cell
 154+ 95C6 21 49 C0     		ld		hl,UBnkTransmatSidevX     			; process orientation matrix row 0
 155+ 95C9 CD DB 94             call    XX12ProcessOneRow                   ; hl = result, a = sign
 156+ 95CC 47           		ld		b,a                                 ; b = sign
 157+ 95CD 7C           		ld		a,h                                 ; a = high byte
 158+ 95CE B0           		or		b
 159+ 95CF 32 95 C0     		ld		(UBnkXX12xSign),a					; a = result with sign in bit 7
 160+ 95D2 7D           		ld		a,l                                 ; the result will be in the lower byte now
 161+ 95D3 32 94 C0             ld      (UBnkXX12xLo),a						; that is result done for
 162+ 95D6              ;...Y cell
 163+ 95D6 21 4F C0     		ld		hl,UBnkTransmatRoofvX     			; process orientation matrix row 1
 164+ 95D9 CD DB 94             call    XX12ProcessOneRow
 165+ 95DC 47           		ld		b,a
 166+ 95DD 7C           		ld		a,h
 167+ 95DE              ;		ld		a,l
 168+ 95DE B0           		or		b
 169+ 95DF 32 97 C0     		ld		(UBnkXX12ySign),a					; a = result with sign in bit 7
 170+ 95E2 7D           		ld		a,l                                 ; the result will be in the lower byte now
 171+ 95E3 32 96 C0             ld      (UBnkXX12yLo),a						; that is result done for
 172+ 95E6              ;...Z cell
 173+ 95E6 21 55 C0     		ld		hl,UBnkTransmatNosevX     			; process orientation matrix row 1
 174+ 95E9 CD DB 94             call    XX12ProcessOneRow
 175+ 95EC 47           		ld		b,a
 176+ 95ED 7C                   ld		a,h
 177+ 95EE              ;		ld		a,l
 178+ 95EE B0           		or		b
 179+ 95EF 32 99 C0     		ld		(UBnkXX12zSign),a					; a = result with sign in bit 7
 180+ 95F2 7D           		ld		a,l                                 ; the result will be in the lower byte now
 181+ 95F3 32 98 C0             ld      (UBnkXX12zLo),a						; that is result done for
 182+ 95F6 C9                   ret
# file closed: ./Maths/Utilities/XX12EquNodeDotOrientation.asm
 614  95F7                  include "./ModelRender/CopyXX12ToXX15.asm"
# file opened: ./ModelRender/CopyXX12ToXX15.asm
   1+ 95F7 21 94 C0     CopyXX12ToXX15:         ld      hl,XX12
   2+ 95FA 11 8E C0                             ld      de,XX15
   3+ 95FD 01 06 00                             ld      bc,6
   4+ 9600 ED B0                                ldir
   5+ 9602 C9                                   ret
   6+ 9603
   7+ 9603 21 94 C0     CopyXX12ToXX12Save:     ld      hl,XX12
   8+ 9606 11 9A C0                             ld      de,XX12Save
   9+ 9609 01 06 00                             ld      bc,6
  10+ 960C ED B0                                ldir
  11+ 960E C9                                   ret
  12+ 960F
  13+ 960F 21 9A C0     CopyXX12SaveToXX12:     ld      hl,XX12Save
  14+ 9612 11 94 C0                             ld      de,XX12
  15+ 9615 01 06 00                             ld      bc,6
  16+ 9618 ED B0                                ldir
  17+ 961A C9                                   ret
  18+ 961B
  19+ 961B 21 94 C0     CopyXX12ToXX12Save2:    ld      hl,XX12
  20+ 961E 11 A0 C0                             ld      de,XX12Save2
  21+ 9621 01 06 00                             ld      bc,6
  22+ 9624 ED B0                                ldir
  23+ 9626 C9                                   ret
  24+ 9627
  25+ 9627 21 A0 C0     CopyXX12Save2ToXX12:    ld      hl,XX12Save2
  26+ 962A 11 94 C0                             ld      de,XX12
  27+ 962D 01 06 00                             ld      bc,6
  28+ 9630 ED B0                                ldir
  29+ 9632 C9                                   ret
  30+ 9633
# file closed: ./ModelRender/CopyXX12ToXX15.asm
 615  9633                  include "./ModelRender/CopyXX15ToXX12.asm"
# file opened: ./ModelRender/CopyXX15ToXX12.asm
   1+ 9633 21 8E C0     CopyXX15ToXX12:         ld		hl,XX15
   2+ 9636 11 94 C0                             ld      de,XX12
   3+ 9639 01 06 00                             ld      bc,6
   4+ 963C ED B0                                ldir
   5+ 963E C9                                   ret
   6+ 963F
   7+ 963F
   8+ 963F
   9+ 963F 21 8E C0     CopyXX15ToXX15Save:     ld		hl,XX15
  10+ 9642 11 A9 C0                             ld      de,XX15Save
  11+ 9645 01 06 00                             ld      bc,6
  12+ 9648 ED B0                                ldir
  13+ 964A C9                                   ret
  14+ 964B
  15+ 964B 21 A9 C0     CopyXX15SaveToXX15:     ld		hl,XX15Save
  16+ 964E 11 8E C0                             ld      de,XX15
  17+ 9651 01 06 00                             ld      bc,6
  18+ 9654 ED B0                                ldir
  19+ 9656 C9                                   ret
  20+ 9657
  21+ 9657 21 8E C0     CopyXX15ToXX15Save2:    ld		hl,XX15
  22+ 965A 11 B1 C0                             ld      de,XX15Save2
  23+ 965D 01 06 00                             ld      bc,6
  24+ 9660 ED B0                                ldir
  25+ 9662 C9                                   ret
  26+ 9663
  27+ 9663 21 B1 C0     CopyXX15Save2ToXX15:    ld		hl,XX15Save2
  28+ 9666 11 8E C0                             ld      de,XX15
  29+ 9669 01 06 00                             ld      bc,6
  30+ 966C ED B0                                ldir
  31+ 966E C9                                   ret
  32+ 966F
# file closed: ./ModelRender/CopyXX15ToXX12.asm
 616  966F                  include "./Maths/Utilities/ScaleXX16Matrix197.asm"
# file opened: ./Maths/Utilities/ScaleXX16Matrix197.asm
   1+ 966F              ScaleXX16Matrix197:
   2+ 966F                      IFDEF LOGMATHS
   3+ 966F 06 09                                ld		b,9                 ; Interate though all 9 matrix elements
   4+ 9671 21 49 C0                             ld		hl,UBnkTransmatSidev ; within XX16 (transmat)
   5+ 9674                                      MMUSelectMathsTables
   5+ 9674 ED 91 50 63 >                     nextreg MathsTablesMMU,    BankMathsTables
   6+ 9678 7E           .ScaleXX16Loop:         ld		a,(hl)              ; set DE = matrix value
   7+ 9679 5F                                   ld		e,a                 ;
   8+ 967A 23                                   inc		hl                  ;
   9+ 967B 7E                                   ld		a,(hl)              ;
  10+ 967C 57                                   ld		d,a                 ;
  11+ 967D E6 80                                and     SignOnly8Bit        ; A holds high still to we can strip out sign bit
  12+ 967F DD 6F                                ld		ixl,a				; retain for sign bit
  13+ 9681                                      ShiftDELeft1				; carry now holds sign bit and DE = De * 2, this will in effect strip off the sign bit automatically
  13+ 9681 CB 23       >			   sla e
  13+ 9683 CB 12       >			   rl  d
  14+ 9685 7A                                   ld      a,d                 ; a = high byte after x 2
  15+ 9686 C5                                   push	bc                  ; save BC  counter and constant 197
  16+ 9687 E5                                   push	hl                  ; save HL
  17+ 9688 CD CB 00                             call    AEquAmul256Div197Log;
  18+ 968B E1                                   pop		hl
  19+ 968C 2B                                   dec     hl                  ; move back to low byte
  20+ 968D 77                                   ld      (hl),a              ; save result in low byte as we want to preserve high byte sign
  21+ 968E 23                                   inc     hl                  ; move back to high byte
  22+ 968F DD 7D                                ld      a,ixl
  23+ 9691 77                                   ld      (hl),a              ; write back just sign bit
  24+ 9692 C1                                   pop		bc                  ; retrieve both counter and constant 197
  25+ 9693 23                                   inc     hl                  ; no to next vertex value
  26+ 9694 10 E2                                djnz	.ScaleXX16Loop
  27+ 9696                                      MMUSelectROM0
  27+ 9696 ED 91 50 FF >                     nextreg EXSDOSMMU0,        BankROM
  28+ 969A C9                                   ret
  29+ 969B                      ELSE
  30+ 969B ~                                    ld		b,9                 ; Interate though all 9 matrix elements
  31+ 969B ~                                    ld		c,ConstNorm         ; c = 197
  32+ 969B ~                                    ld		hl,UBnkTransmatSidev ; within XX16 (transmat)
  33+ 969B ~            .ScaleXX16Loop:         ld		a,(hl)              ; set DE = matrix value
  34+ 969B ~                                    ld		e,a                 ;
  35+ 969B ~                                    inc		hl                  ;
  36+ 969B ~                                    ld		a,(hl)              ;
  37+ 969B ~                                    ld		d,a                 ;
  38+ 969B ~                                    and     SignOnly8Bit        ; A holds high still to we can strip out sign bit
  39+ 969B ~                                    ld		ixl,a				; retain for sign bit
  40+ 969B ~                                    ShiftDELeft1				; carry now holds sign bit and DE = De * 2, this will in effect strip off the sign bit automatically
  41+ 969B ~                                    ld      a,d                 ; a = high byte after x 2
  42+ 969B ~                                    push	bc                  ; save BC  counter and constant 197
  43+ 969B ~                                    push	hl                  ; save HL
  44+ 969B ~                                    call	DIV16Amul256dCUNDOC; AEquAmul256DivD; DIV16Amul256dCUNDOC	; result in BC = A*256 / 197 or D *512 / 197 = 2.6 * vector element, effectivley the result will always be in c
  45+ 969B ~                                    pop		hl
  46+ 969B ~                                    dec     hl                  ; move back to low byte
  47+ 969B ~                                    ld      (hl),c              ; save result in low byte as we want to preserve high byte sign
  48+ 969B ~                                    inc     hl                  ; move back to high byte
  49+ 969B ~                                ;    ld      a,(hl)
  50+ 969B ~                                ;    and     $80
  51+ 969B ~                                    ld      a,ixl
  52+ 969B ~                                    ld      (hl),a              ; write back just sign bit
  53+ 969B ~                                    pop		bc                  ; retrieve both counter and constant 197
  54+ 969B ~                                    inc     hl                  ; no to next vertex value
  55+ 969B ~                                    djnz	.ScaleXX16Loop
  56+ 969B ~                                    ret
  57+ 969B                      ENDIF
# file closed: ./Maths/Utilities/ScaleXX16Matrix197.asm
 617  969B
 618  969B                  include "./Universe/StarDust/StarRoutines.asm"
# file opened: ./Universe/StarDust/StarRoutines.asm
   1+ 969B              ;note: DIV16Amul256dCUNDOC as per
   2+ 969B              ;                                   BC = A0
   3+ 969B              ;                                   DE = 0C
   4+ 969B              ;                                   so BC = a * 256 / C
   5+ 969B
   6+ 969B              ; We can cheat here, Speed is always 0 or positive
   7+ 969B              ; z postion will always be positive if we can see it
   8+ 969B
   9+ 969B EB           InitStarAtHL:           ex      de,hl               ; preserving hl
  10+ 969C CD 7C A3                             call    doRND               ; a = random OR bit 5
  11+ 969F EB                                   ex      de,hl               ; .
  12+ 96A0 F6 08                                or      8                   ; .
  13+ 96A2 77                                   ld      (hl),a              ; save to x pos
  14+ 96A3 E6 7F                                and     $7F                 ; a = abs a
  15+ 96A5 23                                   inc     hl                  ;
  16+ 96A6 77                                   ld      (hl),a              ;
  17+ 96A7 EB                                   ex      de,hl               ; preserving hl
  18+ 96A8 CD 7C A3                             call    doRND               ; a = -ve (random / 2)
  19+ 96AB EB                                   ex      de,hl               ; .
  20+ 96AC 0F                                   rrca                        ; .
  21+ 96AD E6 80                                and     $80                 ; .
  22+ 96AF B6                                   or      (hl)                ; or with
  23+ 96B0 77                                   ld      (hl),a
  24+ 96B1 23                                   inc     hl
  25+ 96B2 EB                                   ex      de,hl
  26+ 96B3 CD 7C A3                             call    doRND
  27+ 96B6 EB                                   ex      de,hl
  28+ 96B7 F6 04                                or      4
  29+ 96B9 77                                   ld      (hl),a
  30+ 96BA 23                                   inc     hl
  31+ 96BB E6 7F                                and     $7F
  32+ 96BD 77                                   ld      (hl),a
  33+ 96BE EB                                   ex      de,hl
  34+ 96BF CD 7C A3                             call    doRND
  35+ 96C2 EB                                   ex      de,hl
  36+ 96C3 0F                                   rrca
  37+ 96C4 E6 80                                and     $80
  38+ 96C6 B6                                   or      (hl)
  39+ 96C7 77                                   ld      (hl),a
  40+ 96C8 23                                   inc     hl
  41+ 96C9 EB                                   ex      de,hl
  42+ 96CA CD 7C A3                             call    doRND
  43+ 96CD EB                                   ex      de,hl
  44+ 96CE F6 90                                or      144
  45+ 96D0 77                                   ld      (hl),a
  46+ 96D1 23                                   inc     hl
  47+ 96D2 F6 70                                or      %01110000
  48+ 96D4 E6 7F                                and     $7f     ; bodge
  49+ 96D6 77                                   ld      (hl),a
  50+ 96D7 23                                   inc     hl
  51+ 96D8 C9                                   ret
  52+ 96D9
  53+ 96D9 EB           InitHyperStarAtHL:      ex      de,hl
  54+ 96DA CD 7C A3                             call    doRND
  55+ 96DD CB 27                                sla     a
  56+ 96DF CB 27                                sla     a                ; so its * 4 as we have a blank spot
  57+ 96E1 EB                                   ex      de,hl
  58+ 96E2 E6 F8                                and     %11111000
  59+ 96E4 77                                   ld      (hl),a
  60+ 96E5 E6 7F                                and     $7F
  61+ 96E7 23                                   inc     hl
  62+ 96E8 77                                   ld      (hl),a
  63+ 96E9 EB                                   ex      de,hl
  64+ 96EA CD 7C A3                             call    doRND
  65+ 96ED EB                                   ex      de,hl
  66+ 96EE 0F                                   rrca
  67+ 96EF E6 80                                and     $80
  68+ 96F1 B6                                   or      (hl)
  69+ 96F2 77                                   ld      (hl),a
  70+ 96F3 23                                   inc     hl
  71+ 96F4 EB                                   ex      de,hl
  72+ 96F5 CD 7C A3                             call    doRND
  73+ 96F8 CB 27                                sla     a
  74+ 96FA CB 27                                sla     a               ; so its * 4 as we have a blank spot
  75+ 96FC EB                                   ex      de,hl
  76+ 96FD E6 F8                                and     %11111000
  77+ 96FF 77                                   ld      (hl),a
  78+ 9700 23                                   inc     hl
  79+ 9701 E6 7F                                and     $7F
  80+ 9703 77                                   ld      (hl),a
  81+ 9704 EB                                   ex      de,hl
  82+ 9705 CD 7C A3                             call    doRND
  83+ 9708 EB                                   ex      de,hl
  84+ 9709 0F                                   rrca
  85+ 970A E6 80                                and     $80
  86+ 970C B6                                   or      (hl)
  87+ 970D 77                                   ld      (hl),a
  88+ 970E 23                                   inc     hl
  89+ 970F EB                                   ex      de,hl
  90+ 9710 CD 7C A3                             call    doRND
  91+ 9713 EB                                   ex      de,hl
  92+ 9714 F6 5F                                or      95
  93+ 9716 77                                   ld      (hl),a
  94+ 9717 23                                   inc     hl
  95+ 9718 F6 70                                or      %01110000
  96+ 971A E6 7F                                and     $7f     ; bodge
  97+ 971C 77                                   ld      (hl),a
  98+ 971D 23                                   inc     hl
  99+ 971E C9                                   ret
 100+ 971F
 101+ 971F              ; we could cheat, flip the sign of DE and just add but its not very optimised
 102+ 971F 7C           StarsSUBHLDESigned:     ld      a,h
 103+ 9720 E6 80                                and     SignOnly8Bit
 104+ 9722 47                                   ld      b,a                         ;save sign bit in b
 105+ 9723 AA                                   xor     d                           ;if h sign and d sign were different then bit 7 of a will be 1 which means
 106+ 9724                                      JumpIfNegative .SUBHLDEOppSGN        ;Signs are opposite therefore we can add
 106+ 9724 FA 52 97    >                        jp		m, .SUBHLDEOppSGN
 107+ 9727 78           .SUBHLDESameSigns:      ld      a,b
 108+ 9728 B2                                   or      d
 109+ 9729                                      JumpIfNegative .SUBHLDESameNeg       ; optimisation so we can just do simple add if both positive
 109+ 9729 FA 33 97    >                        jp		m, .SUBHLDESameNeg
 110+ 972C B7                                   or      a
 111+ 972D ED 52                                sbc     hl,de
 112+ 972F                                      JumpIfNegative .SUBHLDESameOvrFlw
 112+ 972F FA 46 97    >                        jp		m, .SUBHLDESameOvrFlw
 113+ 9732 C9                                   ret
 114+ 9733 7C           .SUBHLDESameNeg:        ld      a,h                         ; so if we enter here then signs are the same so we clear the 16th bit
 115+ 9734 E6 7F                                and     SignMask8Bit                ; we could check the value of b for optimisation
 116+ 9736 67                                   ld      h,a
 117+ 9737 7A                                   ld      a,d
 118+ 9738 E6 7F                                and     SignMask8Bit
 119+ 973A 57                                   ld      d,a
 120+ 973B B7                                   or      a
 121+ 973C ED 52                                sbc     hl,de
 122+ 973E                                      JumpIfNegative .SUBHLDESameOvrFlw
 122+ 973E FA 46 97    >                        jp		m, .SUBHLDESameOvrFlw
 123+ 9741 7C                                   ld      a,h                         ; now set bit for negative value, we won't bother with overflow for now TODO
 124+ 9742 F6 80                                or      SignOnly8Bit
 125+ 9744 67                                   ld      h,a
 126+ 9745 C9                                   ret
 127+ 9746              .SUBHLDESameOvrFlw:     NegHL
 127+ 9746 AF          >                    xor a
 127+ 9747 95          >                    sub l
 127+ 9748 6F          >                    ld l,a
 127+ 9749 9F          >                    sbc a,a
 127+ 974A 94          >                    sub h
 127+ 974B 67          >                    ld h,a
 128+ 974C 78                                   ld      a,b
 129+ 974D EE 80                                xor     SignOnly8Bit                ; flip sign bit
 130+ 974F B4                                   or      h
 131+ 9750 67                                   ld      h,a                         ; recover sign
 132+ 9751 C9                                   ret
 133+ 9752 B7           .SUBHLDEOppSGN:         or      a
 134+ 9753 7C                                   ld      a,h                         ; so if we enter here then signs are the same so we clear the 16th bit
 135+ 9754 E6 7F                                and     SignMask8Bit                ; we could check the value of b for optimisation
 136+ 9756 67                                   ld      h,a
 137+ 9757 7A                                   ld      a,d
 138+ 9758 E6 7F                                and     SignMask8Bit
 139+ 975A 57                                   ld      d,a
 140+ 975B 19                                   add     hl,de
 141+ 975C 78                                   ld      a,b                         ; we got here so hl > de therefore we can just take hl's previous sign bit
 142+ 975D B4                                   or      h
 143+ 975E 67                                   ld      h,a                         ; set the previou sign value
 144+ 975F C9                                   ret
 145+ 9760
 146+ 9760 7C           StarsADDHLDESigned:     ld      a,h
 147+ 9761 E6 80                                and     SignOnly8Bit
 148+ 9763 47                                   ld      b,a                         ;save sign bit in b
 149+ 9764 AA                                   xor     d                           ;if h sign and d sign were different then bit 7 of a will be 1 which means
 150+ 9765                                      JumpIfNegative .ADDHLDEOppSGN        ;Signs are opposite there fore we can subtract to get difference
 150+ 9765 FA 7D 97    >                        jp		m, .ADDHLDEOppSGN
 151+ 9768 78           .ADDHLDESameSigns:      ld      a,b
 152+ 9769 B2                                   or      d
 153+ 976A                                      JumpIfNegative .ADDHLDESameNeg       ; optimisation so we can just do simple add if both positive
 153+ 976A FA 6F 97    >                        jp		m, .ADDHLDESameNeg
 154+ 976D 19                                   add     hl,de
 155+ 976E C9                                   ret
 156+ 976F 7C           .ADDHLDESameNeg:        ld      a,h                         ; so if we enter here then signs are the same so we clear the 16th bit
 157+ 9770 E6 7F                                and     SignMask8Bit                ; we could check the value of b for optimisation
 158+ 9772 67                                   ld      h,a
 159+ 9773 7A                                   ld      a,d
 160+ 9774 E6 7F                                and     SignMask8Bit
 161+ 9776 57                                   ld      d,a
 162+ 9777 19                                   add     hl,de
 163+ 9778 3E 80                                ld      a,SignOnly8Bit
 164+ 977A B4                                   or      h                           ; now set bit for negative value, we won't bother with overflow for now TODO
 165+ 977B 67                                   ld      h,a
 166+ 977C C9                                   ret
 167+ 977D 7C           .ADDHLDEOppSGN:         ld      a,h                         ; here HL and DE are opposite  so if we enter here then signs are the same so we clear the 16th bit
 168+ 977E E6 7F                                and     SignMask8Bit                ; we could check the value of b for optimisation
 169+ 9780 67                                   ld      h,a
 170+ 9781 7A                                   ld      a,d
 171+ 9782 E6 7F                                and     SignMask8Bit
 172+ 9784 57                                   ld      d,a
 173+ 9785 B7                                   or      a
 174+ 9786 ED 52                                sbc     hl,de
 175+ 9788 38 04                                jr      c,.ADDHLDEOppInvert
 176+ 978A 78           .ADDHLDEOppSGNNoCarry:  ld      a,b                         ; we got here so hl > de therefore we can just take hl's previous sign bit
 177+ 978B B4                                   or      h
 178+ 978C 67                                   ld      h,a                         ; set the previou sign value
 179+ 978D C9                                   ret
 180+ 978E              .ADDHLDEOppInvert:      NegHL
 180+ 978E AF          >                    xor a
 180+ 978F 95          >                    sub l
 180+ 9790 6F          >                    ld l,a
 180+ 9791 9F          >                    sbc a,a
 180+ 9792 94          >                    sub h
 180+ 9793 67          >                    ld h,a
 181+ 9794 78                                   ld      a,b
 182+ 9795 EE 80                                xor     SignOnly8Bit                ; flip sign bit
 183+ 9797 B4                                   or      h
 184+ 9798 67                                   ld      h,a                         ; recover sign
 185+ 9799 C9                                   ret
 186+ 979A              ;----------------------------------------------------------------------------------------------------------------------------------
 187+ 979A 06 0B        InitialiseStars:        ld      b,MaxNumberOfStars
 188+ 979C 21 39 A0                             ld      hl,varDust
 189+ 979F CD 9B 96     .InitStarsLoop:         call    InitStarAtHL
 190+ 97A2 10 FB                                djnz    .InitStarsLoop
 191+ 97A4 C9                                   ret
 192+ 97A5              ;----------------------------------------------------------------------------------------------------------------------------------
 193+ 97A5 06 0B        InitialiseHyperStars:   ld      b,MaxNumberOfStars
 194+ 97A7 21 39 A0                             ld      hl,varDust
 195+ 97AA CD D9 96     .InitStarsLoop:         call    InitHyperStarAtHL
 196+ 97AD 10 FB                                djnz    .InitStarsLoop
 197+ 97AF C9                                   ret
 198+ 97B0              ;----------------------------------------------------------------------------------------------------------------------------------
 199+ 97B0 06 0B        DustForward:            ld      b,MaxNumberOfStars                  ; get the number of stars to process
 200+ 97B2 FD 21 39 A0                          ld      iy,varDust                          ; hl is now a pointer to the dust array
 201+ 97B6 C5           StarProcessLoop:        push    bc                                  ; save counter +1
 202+ 97B7 FD 7E 05     .Qequ64XSpeedDivZHi:    ld      a,(iy+5)                            ; e  = z high
 203+ 97BA 5F                                   ld      e,a                                 ; d = 0
 204+ 97BB 16 00                                ld      d,0                                 ; de = zhi/256
 205+ 97BD 3A DB 9D                             ld      a,(DELTA)                           ; a = speed
 206+ 97C0                                      JumpIfAIsNotZero .NormalSpeed               ; if we are stationary set speed
 206+ 97C0 A7          >                        and     a
 206+ 97C1 C2 C5 97    >                        jp	    nz,.NormalSpeed
 207+ 97C4 3C                                   inc     a                                   ; so it is at least some dust movement
 208+ 97C5 47           .NormalSpeed:           ld      b,a                                 ;
 209+ 97C6 0E 00                                ld      c,0                                 ; bc = delta * 256
 210+ 97C8 CD 0F B2                             call    BC_Div_DE                           ; BC = Speed/Z , HL = remainder
 211+ 97CB                                      ShiftHLRight1
 211+ 97CB CB 3C       >			   srl h
 211+ 97CD CB 1D       >			   rr  l
 212+ 97CF                                      ShiftHLRight1                               ; hl = remainder/2 so now 64 * speed / zhi
 212+ 97CF CB 3C       >			   srl h
 212+ 97D1 CB 1D       >			   rr  l
 213+ 97D3 7D                                   ld      a,l                                 ;
 214+ 97D4 F6 01                                or      1                                   ; so ensure A is at least 1 for ambient movement
 215+ 97D6 DD 6F                                ld      ixl,a                               ; preserve A which is also VarQ = 64 * speed / zhi
 216+ 97D8 FD 6E 04 FD  .ZequZMinusSpeedX64:    ld      hl,(iy+4)                           ; hl = z
 216+ 97DC 66 05
 217+ 97DE ED 5B DC 9D                          ld      de, (DELTA4)                         ; de = delta4 i.e. speed * 64 pre computed
 218+ 97E2 CD 1F 97                             call    StarsSUBHLDESigned
 219+ 97E5                                      JumpOnBitSet h,7,ResetStar                  ; if z ended up negative then reset the star
 219+ 97E5 CB 7C       >                        bit 	7,h
 219+ 97E7 C2 3C 99    >                        jp      nz,ResetStar
 220+ 97EA FD 75 04 FD                          ld      (iy+4),hl                           ; save new z pos
 220+ 97EE 74 05
 221+ 97F0 FD 6E 00 FD  .XEquXPlusXhiMulQ       ld      hl,(iy+0)                           ; hl  = x
 221+ 97F4 66 01
 222+ 97F6 7C                                   ld      a,h                                 ;
 223+ 97F7 E6 7F                                and     $7F                                 ;
 224+ 97F9 57                                   ld      d,a                                 ; d = abs(x hi)
 225+ 97FA DD 5D                                ld      e,ixl                               ; e = Q = 64 * speed / zhi
 226+ 97FC ED 30                                mul                                         ; de =  abs(x hi) * Q
 227+ 97FE 7C                                   ld      a,h                                 ;
 228+ 97FF E6 80                                and     $80                                 ;
 229+ 9801 B2                                   or      d                                   ; set sign bit in d
 230+ 9802 57                                   ld      d,a                                 ;
 231+ 9803 CD 60 97                             call    StarsADDHLDESigned                  ; x = x + (x hi/256 * Q)
 232+ 9806 7C                                   ld      a,h
 233+ 9807 E6 7F                                and     $7F
 234+ 9809                                      JumpIfAGTENusng $70, ResetStar
 234+ 9809 FE 70       >                        cp     $70
 234+ 980B D2 3C 99    >                        jp		nc,ResetStar
 235+ 980E FD 75 00 FD                          ld      (iy+0),hl                           ;
 235+ 9812 74 01
 236+ 9814 FD 6E 02 FD  .YEquYPlusYhiMulQ       ld      hl,(iy+2)                           ; hl  = y
 236+ 9818 66 03
 237+ 981A 7C                                   ld      a,h                                 ;
 238+ 981B E6 7F                                and     $7F                                 ;
 239+ 981D 57                                   ld      d,a                                 ; d = abs(y hi)
 240+ 981E DD 5D                                ld      e,ixl                               ; e = Q = 64 * speed / zhi
 241+ 9820 ED 30                                mul                                         ; de =  abs(y hi) * Q
 242+ 9822 7C                                   ld      a,h                                 ;
 243+ 9823 E6 80                                and     $80                                 ;
 244+ 9825 B2                                   or      d                                   ; set sign bit in d
 245+ 9826 57                                   ld      d,a                                 ;
 246+ 9827 CD 60 97                             call    StarsADDHLDESigned                  ; y = y + (x hi/256 * Q)
 247+ 982A 7C                                   ld      a,h
 248+ 982B E6 7F                                and     $7F
 249+ 982D                                      JumpIfAGTENusng $60, ResetStar
 249+ 982D FE 60       >                        cp     $60
 249+ 982F D2 3C 99    >                        jp		nc,ResetStar
 250+ 9832 7C                                   ld      a,h
 251+ 9833 E6 80                                and     $80
 252+ 9835 20 06                                jr      nz,.NoSecondCheck
 253+ 9837 7C                                   ld      a,h
 254+ 9838                                      JumpIfAGTENusng $20, ResetStar
 254+ 9838 FE 20       >                        cp     $20
 254+ 983A D2 3C 99    >                        jp		nc,ResetStar
 255+ 983D FD 75 02 FD  .NoSecondCheck:         ld      (iy+2),hl                           ;
 255+ 9841 74 03
 256+ 9843              ; Now roll
 257+ 9843              ;  6. x = x - alpha * y / 256
 258+ 9843 2A F6 9C     .XRoll:                 ld      hl,(ALP1)                           ; h = sign, l = magnitude
 259+ 9846 7D                                   ld      a,l
 260+ 9847 FE 00                                cp      0
 261+ 9849 28 4C                                jr      z,.NoRoll                           ; don;t roll if magnitude is 0
 262+ 984B                                      ;break
 263+ 984B                                      ;ld      a,$80
 264+ 984B                                      ;xor     l                                   ; l = flipped sign as we are rotating stars not us
 265+ 984B E5                                   push    hl
 266+ 984C 7C                                   ld      a,h
 267+ 984D E6 80                                and     $80
 268+ 984F 4F           .rxSaveAlphaSign:       ld      c,a                                 ; save alpha sign in c
 269+ 9850 55           .rxDEquABSAlpha:        ld      d,l                                 ; d= abs (alpha)
 270+ 9851 FD 7E 03                             ld      a,(iy+3)                            ; get high byte from x coord
 271+ 9854 5F                                   ld      e,a
 272+ 9855 E6 80                                and     $80
 273+ 9857 47           .rxBEquSignXHi:         ld      b,a                                 ; save sign of x in b
 274+ 9858 7B           .rxEEquABSignX:         ld      a,e
 275+ 9859 E6 7F                                and     $7F
 276+ 985B 5F                                   ld      e,a                                 ; save abs x hi in e
 277+ 985C ED 30                                mul                                         ; abs(alpha) * abs(y high) (so /256)
 278+ 985E 79                                   ld      a,c
 279+ 985F A8                                   xor     b                                   ; handle muliple sign bits
 280+ 9860 B2                                   or      d
 281+ 9861 57                                   ld      d,a                                 ; de = signed alpha & y high / 256
 282+ 9862 FD 6E 00 FD                          ld      hl,(iy+0)                           ; h = iy+1, l = iy+0
 282+ 9866 66 01
 283+ 9868 CD 1F 97                             call    StarsSUBHLDESigned                  ; we are usign add, so may need to fip sign?
 284+ 986B FD 75 00 FD                          ld      (iy+0),hl
 284+ 986F 74 01
 285+ 9871              ;  5. y = y + alpha * x / 256
 286+ 9871              .YRoll:                 ;break
 287+ 9871 E1                                   pop     hl                                  ; h = sign, l = magnitude
 288+ 9872 7C                                   ld      a,h
 289+ 9873 E6 80                                and     $80
 290+ 9875 4F           .rySaveAlphaSign:       ld      c,a                                 ; save alpha sign in c
 291+ 9876 55           .ryDEquABSAlpha:        ld      d,l                                 ; d= abs (alpha)
 292+ 9877 FD 7E 01                             ld      a,(iy+1)                            ; get high byte from x coord
 293+ 987A 5F                                   ld      e,a
 294+ 987B E6 80                                and     $80
 295+ 987D 47           .ryBEquSignXHi:         ld      b,a                                 ; save sign of x in b
 296+ 987E 7B           .ryEEquABSignX:         ld      a,e
 297+ 987F E6 7F                                and     $7F
 298+ 9881 5F                                   ld      e,a                                 ; save abs x hi in e
 299+ 9882 ED 30                                mul                                         ; abs(alpha) * abs(y high) (so /256)
 300+ 9884 79                                   ld      a,c
 301+ 9885 A8                                   xor     b                                   ; handle muliple sign bits
 302+ 9886 B2                                   or      d
 303+ 9887 57                                   ld      d,a                                 ; de = signed alpha & y high / 256
 304+ 9888 FD 6E 02 FD                          ld      hl,(iy+2)                           ; h = iy+1, l = iy+0
 304+ 988C 66 03
 305+ 988E CD 60 97                             call    StarsADDHLDESigned                  ; we are usign add, so may need to fip sign?
 306+ 9891 FD 75 02 FD                          ld      (iy+2),hl
 306+ 9895 74 03
 307+ 9897 3A EA 9C     .NoRoll:                ld      a,(BET1)
 308+ 989A FE 00                                cp      0
 309+ 989C 28 22                                jr      z,.NoPitch
 310+ 989E              ;  8. y = y - beta * 256
 311+ 989E 57           .YPitch:                ld      d,a                                 ; d = BET1
 312+ 989F FD 7E 02                             ld      a,(iy+2)
 313+ 98A2 5F                                   ld      e,a                                 ; e = Y HI
 314+ 98A3 ED 30                                mul                                         ; de = BET1 * YHi so now D = BETA & YHI / 256
 315+ 98A5 5F                                   ld      e,a
 316+ 98A6 ED 30                                mul                                         ; so now de = (BETA & Yhi) ^ 2
 317+ 98A8                                      ShiftDELeft1                                ; de = 2 * ((BETA & Yhi) ^ 2)
 317+ 98A8 CB 23       >			   sla e
 317+ 98AA CB 12       >			   rl  d
 318+ 98AC 3A EC 9C                             ld      a,(BET2FLIP)                        ; get inverted Sign
 319+ 98AF B2                                   or      d
 320+ 98B0 57                                   ld      d,a                                 ; de = - (2 * ((BETA & Yhi) ^ 2))
 321+ 98B1 FD 6E 02 FD                          ld      hl,(iy+2)
 321+ 98B5 66 03
 322+ 98B7 CD 60 97                             call    StarsADDHLDESigned
 323+ 98BA FD 75 02 FD                          ld      (iy+2),hl
 323+ 98BE 74 03
 324+ 98C0              ; now work out screen pos
 325+ 98C0              ; Note two optimistations, write to layer 2 - we get a free removal via double buffer cls
 326+ 98C0              ; read z dept than determine hw many pixesl to plot, e.g. 1,2,3,4
 327+ 98C0              ;        pop     de
 328+ 98C0               ;       call    ProjectStarXToScreen
 329+ 98C0                                      ;pop     de
 330+ 98C0              .NoPitch:
 331+ 98C0 FD 7E 01     .ProjectStar:           ld      a,(iy+1)
 332+ 98C3 6F                                   ld      l,a
 333+ 98C4 E6 7F                                and     $7F
 334+ 98C6                                      JumpOnBitSet l,7,StarNegXPt
 334+ 98C6 CB 7D       >                        bit 	7,l
 334+ 98C8 C2 D1 98    >                        jp      nz,StarNegXPt
 335+ 98CB C6 80                                add     a,$80
 336+ 98CD 4F                                   ld      c,a
 337+ 98CE C3 D6 98                             jp      StarDoneX
 338+ 98D1 47           StarNegXPt:             ld      b,a
 339+ 98D2 3E 80                                ld      a,$80
 340+ 98D4 90                                   sub     b
 341+ 98D5 4F                                   ld      c,a
 342+ 98D6 FD 7E 03     StarDoneX:              ld      a,(iy+3)
 343+ 98D9 6F                                   ld      l,a
 344+ 98DA E6 7F                                and     $7F
 345+ 98DC                                      JumpOnBitSet l,7,StarNegYPt
 345+ 98DC CB 7D       >                        bit 	7,l
 345+ 98DE C2 E7 98    >                        jp      nz,StarNegYPt
 346+ 98E1 C6 60                                add     a,$60
 347+ 98E3 47                                   ld      b,a
 348+ 98E4 C3 EC 98                             jp      StarDoneY
 349+ 98E7 47           StarNegYPt:             ld      b,a
 350+ 98E8 3E 60                                ld      a,$60
 351+ 98EA 90                                   sub     b
 352+ 98EB 47                                   ld      b,a
 353+ 98EC 3E 92        StarDoneY:              ld      a,L2DustColour
 354+ 98EE C5                                   push    bc
 355+ 98EF              .DrawStar:              MMUSelectLayer2
 355+ 98EF ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 355+ 98F3 CD 37 E1       call    l2_plot_pixel
 356+ 98F6 FD 7E 05                             ld      a,(iy+5)
 357+ 98F9 C1                                   pop    bc
 358+ 98FA                                      JumpIfAGTENusng $60,EndofStarsLoop
 358+ 98FA FE 60       >                        cp     $60
 358+ 98FC D2 2C 99    >                        jp		nc,EndofStarsLoop
 359+ 98FF 3E 92                                ld      a,L2DustColour
 360+ 9901 0C                                   inc     c
 361+ 9902 C5                                   push    bc
 362+ 9903                                      MMUSelectLayer2
 362+ 9903 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 363+ 9907 CD 37 E1                             call    l2_plot_pixel
 364+ 990A FD 7E 05                             ld      a,(iy+5)
 365+ 990D C1                                   pop    bc
 366+ 990E                                      JumpIfAGTENusng $37,EndofStarsLoop
 366+ 990E FE 37       >                        cp     $37
 366+ 9910 D2 2C 99    >                        jp		nc,EndofStarsLoop
 367+ 9913 3E 92                                ld      a,L2DustColour
 368+ 9915 04                                   inc     b
 369+ 9916 C5                                   push    bc
 370+ 9917                                      MMUSelectLayer2
 370+ 9917 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 370+ 991B CD 37 E1         call    l2_plot_pixel
 371+ 991E FD 7E 05                             ld      a,(iy+5)
 372+ 9921 C1                                   pop    bc
 373+ 9922 3E 92                                ld      a,L2DustColour
 374+ 9924 0D                                   dec     c
 375+ 9925                                      MMUSelectLayer2
 375+ 9925 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 375+ 9929 CD 37 E1         call    l2_plot_pixel
 376+ 992C C1           EndofStarsLoop:         pop     bc                                      ;  0
 377+ 992D FD E5        NextStarLoop3:          push    iy                                      ; +1
 378+ 992F E1                                   pop     hl                                      ;  0
 379+ 9930 ED 34 06 00                          add     hl,6
 380+ 9934 E5           NextStarLoop2:          push    hl                                      ; +1
 381+ 9935 FD E1                                pop     iy                                      ;  0
 382+ 9937 05                                   dec     b
 383+ 9938 C2 B6 97                             jp      nz,StarProcessLoop
 384+ 993B C9                                   ret
 385+ 993C C1           ResetStar:              pop     bc                                      ; 0
 386+ 993D FD E5                                push    iy                                      ; +1 (current star)
 387+ 993F E1                                   pop     hl                                      ; 0
 388+ 9940 CD 9B 96                             call    InitStarAtHL
 389+ 9943 C3 2D 99                             jp      NextStarLoop3
 390+ 9946              ;----------------------------------------------------------------------------------------------------------------------------------
 391+ 9946 FD 4E 00     ProjectStarXToScreen:   ld      c,(iy+0)
 392+ 9949 FD 7E 01                             ld      a,(iy+1)
 393+ 994C 6F                                   ld      l,a
 394+ 994D E6 7F                                and     $7F
 395+ 994F 47                                   ld      b,a
 396+ 9950 CD 74 B1                             call    DIV16BCDivDEUNDOC
 397+ 9953 7D                                   ld      a,l
 398+ 9954                                      JumpOnBitSet a,7,StarXNegativePoint             ; LL62 up, -ve Xdist, RU screen onto XX3 heap
 398+ 9954 CB 7F       >                        bit 	7,a
 398+ 9956 C2 61 99    >                        jp      nz,StarXNegativePoint
 399+ 9959              ;StarXPositivePoint:									; x was positive result
 400+ 9959 2E 80                                ld          l,ScreenCenterX						;
 401+ 995B 26 00                                ld          h,0
 402+ 995D 09                                   add         hl,bc								; hl = Screen Centre + X
 403+ 995E C3 68 99                             jp          StarStoreXPoint
 404+ 9961              StarXNegativePoint:                                 ; x < 0 so need to subtract from the screen centre position
 405+ 9961 2E 80                                ld          l,ScreenCenterX
 406+ 9963 26 00                                ld          h,0
 407+ 9965                                      ClearCarryFlag
 407+ 9965 B7          >                        or a
 408+ 9966 ED 42                                sbc         hl,bc                               ; hl = Screen Centre - X
 409+ 9968              StarStoreXPoint:                                    ; also from LL62, XX3 node heap has xscreen node so far.
 410+ 9968 7D                                   ld          a,l
 411+ 9969 32 91 A0                             ld          (varStarX),a
 412+ 996C C9                                   ret
 413+ 996D
 414+ 996D FD 46 02     ProjectStarYToScreen:   ld          b,(iy+2)
 415+ 9970 FD 7E 03                             ld          a,(iy+3)
 416+ 9973 6F                                   ld          l,a
 417+ 9974 E6 7F                                and         $7F
 418+ 9976 47                                   ld          b,a
 419+ 9977 CD 74 B1                             call        DIV16BCDivDEUNDOC
 420+ 997A 7D                                   ld          a,l                                 ; XX15+2 \ sign of X dist
 421+ 997B                                      JumpOnBitSet a,7,StarNegativeYPoint             ; LL62 up, -ve Xdist, RU screen onto XX3 heap top of screen is Y = 0
 421+ 997B CB 7F       >                        bit 	7,a
 421+ 997D C2 88 99    >                        jp      nz,StarNegativeYPoint
 422+ 9980                                  ;StarPositiveYPoint:									; Y is positive so above the centre line
 423+ 9980 2E 60                               ld          l,ScreenCenterY
 424+ 9982                                      ClearCarryFlag
 424+ 9982 B7          >                        or a
 425+ 9983 ED 42                                sbc         hl,bc  							 	; hl = ScreenCentreY - Y coord (as screen is 0 at top)
 426+ 9985 C3 8D 99                             jp          StarStoreYPoint
 427+ 9988              StarNegativeYPoint:									; this bit is only 8 bit aware TODO FIX
 428+ 9988 2E 60                                ld          l,ScreenCenterY
 429+ 998A 26 00                                ld          h,0
 430+ 998C 09                                   add         hl,bc								; hl = ScreenCenterY + Y as negative is below the center of screen
 431+ 998D              StarStoreYPoint:                                    ; also from LL62, XX3 node heap has xscreen node so far.
 432+ 998D 7D                                   ld          a,l
 433+ 998E 32 92 A0                             ld          (varStarY),a
 434+ 9991 C9                                   ret
 435+ 9992
 436+ 9992
# file closed: ./Universe/StarDust/StarRoutines.asm
 619  9992              ;    include "Universe/move_object-MVEIT.asm"
 620  9992              ;    include "./ModelRender/draw_object.asm"
 621  9992              ;    include "./ModelRender/draw_ship_point.asm"
 622  9992              ;    include "./ModelRender/drawforwards-LL17.asm"
 623  9992              ;    include "./ModelRender/drawforwards-LL17.asm"
 624  9992
 625  9992                  INCLUDE	"./Hardware/memfill_dma.asm"
# file opened: ./Hardware/memfill_dma.asm
   1+ 9992
   2+ 9992 00           memfillvalue		DB 0
   3+ 9993 83 C3 C7 CB  memfill        		DB DMA_DISABLE,  DMA_RESET, DMA_RESET_PORT_A_TIMING, DMA_RESET_PORT_B_TIMING ,DMA_WRO_BLOCK_PORTA_A2B_XFR
   3+ 9997 7D
   4+ 9998 92 99        memfill_astrt  		DW memfillvalue
   5+ 999A 00 40        memfill_length 		DB $00,$40
   6+ 999C 24 10 AD     					DB DMA_WR1_P1FIXED_MEMORY ,DMA_WR2_P2INC_MEMORY ,DMA_WR4_CONT_MODE
   7+ 999F 00 00        memfill_bstrt  		DB $00,$00
   8+ 99A1 82 CF B3 87  					DB DMA_STOP_AT_END, DMA_LOAD, DMA_FORCE_READY, DMA_ENABLE
   9+ 99A5              memfill_cmd_len	  	EQU $ - memfill
  10+ 99A5
  11+ 99A5              memfill_dma:
  12+ 99A5              ; "memfill_dma, hl = address to fill, a = value, de = length"
  13+ 99A5              .set_fill_value:
  14+ 99A5 32 92 99     	ld 		(memfillvalue),a
  15+ 99A8              .set_target:
  16+ 99A8 22 9F 99     	ld		(memfill_bstrt),hl
  17+ 99AB              .set_length:
  18+ 99AB ED 53 9A 99  	ld		(memfill_length),de
  19+ 99AF              .write_dma:
  20+ 99AF 21 93 99     	ld 		hl, memfill
  21+ 99B2 06 12        	ld 		b, memfill_cmd_len
  22+ 99B4 0E 6B        	ld		c,IO_DATAGEAR_DMA_PORT
  23+ 99B6 ED B3        	otir
  24+ 99B8 C9           	ret
  25+ 99B9
# file closed: ./Hardware/memfill_dma.asm
 626  99B9                  INCLUDE	"./Hardware/memcopy_dma.asm"
# file opened: ./Hardware/memcopy_dma.asm
   1+ 99B9
   2+ 99B9 83 C3 C7 CB  memcopy        		DB DMA_DISABLE,  DMA_RESET, DMA_RESET_PORT_A_TIMING, DMA_RESET_PORT_B_TIMING ,DMA_WRO_BLOCK_PORTA_A2B_XFR
   2+ 99BD 7D
   3+ 99BE 00 00        memcopy_astrt  		DB $00,$00
   4+ 99C0 00 40        memcopy_length 		DB $00,$40
   5+ 99C2 14 10 AD     					DB DMA_WR1_P1INC_MEMORY ,DMA_WR2_P2INC_MEMORY ,DMA_WR4_CONT_MODE
   6+ 99C5 00 00        memcopy_bstrt  		DB $00,$00
   7+ 99C7 82 CF B3 87  					DB DMA_STOP_AT_END, DMA_LOAD, DMA_FORCE_READY, DMA_ENABLE
   8+ 99CB              memcopy_cmd_len	  	equ $ - memcopy
   9+ 99CB
  10+ 99CB              memcopy_dma:
  11+ 99CB              ; "memcopy_dma, hl = target address de = source address to copy, bc = length"
  12+ 99CB              .set_target:
  13+ 99CB 22 C5 99     	ld		(memcopy_bstrt),hl
  14+ 99CE              .set_source:
  15+ 99CE ED 53 BE 99  	ld		(memcopy_astrt),de
  16+ 99D2              .set_length:
  17+ 99D2 ED 43 C0 99  	ld		(memcopy_length),bc
  18+ 99D6              .write_dma:
  19+ 99D6 21 B9 99     	ld 		hl, memcopy
  20+ 99D9 06 12        	ld 		b, memcopy_cmd_len
  21+ 99DB 0E 6B        	ld		c,IO_DATAGEAR_DMA_PORT
  22+ 99DD ED B3        	otir
  23+ 99DF C9           	ret
  24+ 99E0
# file closed: ./Hardware/memcopy_dma.asm
 627  99E0 00 00        XX12PVarQ			DW 0
 628  99E2 00 00        XX12PVarR			DW 0
 629  99E4 00 00        XX12PVarS			DW 0
 630  99E6 00 00        XX12PVarResult1		DW 0
 631  99E8 00 00        XX12PVarResult2		DW 0
 632  99EA 00 00        XX12PVarResult3		DW 0
 633  99EC 00           XX12PVarSign2		DB 0
 634  99ED 00           XX12PVarSign1		DB 0								; Note reversed so BC can do a little endian fetch
 635  99EE 00           XX12PVarSign3		DB 0
 636  99EF                  INCLUDE "./Hardware/keyboard.asm"
# file opened: ./Hardware/keyboard.asm
   1+ 99EF              ;
   2+ 99EF              ; $FEFE;65278 V, C, X, Z, Caps Shifts       4  3  2  1  0
   3+ 99EF              ; $FDFE;65022 G, F, D, S, A                 9  8  7  6  5
   4+ 99EF              ; $FBFE;64510 T, R, E, W, Q                14 13 12 11 10
   5+ 99EF              ; $F7FE;63486 5, 4, 3, 2, 1                19 18 17 16 15
   6+ 99EF              ; $EFFE;61438 6, 7, 8, 9, 0                24 23 22 23 20
   7+ 99EF              ; $DFFE;57342 Y, U, I, O, P                29 28 27 26 25
   8+ 99EF              ; $BFFE;49150 H, J, K, L, Enter            34 33 32 31 30
   9+ 99EF              ; $7FFE;32766 B, N, M, Symbol Shift, Space 39 38 37 36 35
  10+ 99EF              ;
  11+ 99EF              ; Keyboard
  12+ 99EF              ;
  13+ 99EF              ;   0      1       2       3       4       5        6       7       8       9
  14+ 99EF              ;  VK_CAPS, VK_Z,  VK_X,   VK_C,   VK_V,   VK_A,    VK_S,   VK_D,   VK_F,   VK_G
  15+ 99EF              ;   10     11      12      13      14      15       16      17      18      19
  16+ 99EF              ;  VK_Q,   VK_W,   VK_E,   VK_R,   VK_T,   VK_1,    VK_2,   VK_3,   VK_4,   VK_5
  17+ 99EF              ;   20     21      22      23      24      25       26      27      28      29
  18+ 99EF              ;  VK_0    VK_9,   VK_8,   VK_7,   VK_6,   VK_P ,    VK_O,  VK_I,   VK_U,   VK_Y
  19+ 99EF              ;   30     31      32      33      34      35       36      37      38      39
  20+ 99EF              ; VK_ENTER VK_L,   VK_K,   VK_J,   VK_H,   VK_SPACE VK_SYM, VK_M,   VK_N,   VK_B
  21+ 99EF              ;
  22+ 99EF              ; Default map
  23+ 99EF              ;-----------------------------------------------------------------------------------------------------------------------------------
  24+ 99EF              ;   0          1           2             3              4           5           6           7           8           9
  25+ 99EF              ;   VK_CAPS    VK_Z        VK_X,         VK_C,          VK_V,       VK_A        VK_S,       VK_D,       VK_F,       VK_G
  26+ 99EF              ;              GameSkip                  Equip          SelLCargo   Climb       Decelerate  Recentre    FireM       HomeCursor
  27+ 99EF              ;                                                                                                       Find System
  28+ 99EF              ;-----------------------------------------------------------------------------------------------------------------------------------
  29+ 99EF              ;   10         11          12            13             14          15          16          17          18          19
  30+ 99EF              ;   VK_Q       VK_W,       VK_E,         VK_R,          VK_T,       VK_1        VK_2        VK_3        VK_4        VK_5
  31+ 99EF              ;   Dive       Accelerate  ECM           UnarmMissile   TargetM     FrontV      AftV        LeftV       RightV      GalacticChart
  32+ 99EF              ;-----------------------------------------------------------------------------------------------------------------------------------
  33+ 99EF              ;   20         Accel       22            23             24          25          26          27          28          29
  34+ 99EF              ;   VK_0       VK_9,       VK_8,         VK_7,          VK_6,       VK_P ,      VK_O,       VK_I,       VK_U,       VK_Y
  35+ 99EF              ;   EscapePod  Inventory   Status        MarketPrices   LocalChart  RollRight   RolLLeft                EnergyBomb  Quit
  36+ 99EF              ;   PlanetData                                                      PauseGame   SaveGame
  37+ 99EF              ;-----------------------------------------------------------------------------------------------------------------------------------
  38+ 99EF              ;   30         31          32            33             34          Right       36          37          EnergyBomb  39
  39+ 99EF              ;   VK_ENTER   VK_L,       VK_K,         VK_J,          VK_H,       VK_SPACE    VK_SYM,     VK_M,       VK_N,       VK_B
  40+ 99EF              ;              Launch                    Distance       Hyperspace  Laser                               DockComp    BuyCargo
  41+ 99EF              ;              ResumeGame
  42+ 99EF
  43+ 99EF              ; You can read address to check keystate by address KeyboardMap + c_Pressed corresponding key. There is also an addr_ helper too
  44+ 99EF
  45+ 99EF              c_Pressed_Front         equ 0  * 2
  46+ 99EF              c_Pressed_Aft           equ 1  * 2
  47+ 99EF              c_Pressed_Left          equ 2  * 2
  48+ 99EF              c_Pressed_Right         equ 3  * 2
  49+ 99EF              c_Pressed_RollLeft      equ 4  * 2
  50+ 99EF              c_Pressed_RollRight     equ 5  * 2
  51+ 99EF              c_Pressed_Dive          equ 6  * 2
  52+ 99EF              c_Pressed_Climb         equ 7  * 2
  53+ 99EF              c_Pressed_Accellerate   equ 8  * 2
  54+ 99EF              c_Pressed_Decellerate   equ 9  * 2
  55+ 99EF              c_Pressed_FireLaser     equ 10 * 2
  56+ 99EF              c_Pressed_TargetMissle  equ 11 * 2
  57+ 99EF              c_Pressed_FireMissile   equ 12 * 2
  58+ 99EF              c_Pressed_UnarmMissile  equ 13 * 2
  59+ 99EF              c_Pressed_ECM           equ 14 * 2
  60+ 99EF              c_Pressed_EnergyBomb    equ 15 * 2
  61+ 99EF              c_Pressed_EscapePod     equ 16 * 2
  62+ 99EF              c_Pressed_DockingComp   equ 17 * 2
  63+ 99EF              c_Pressed_Hyperspace    equ 18 * 2
  64+ 99EF              c_Pressed_Distance      equ 19 * 2
  65+ 99EF              c_Pressed_HomeCursor    equ 20 * 2
  66+ 99EF              c_Pressed_Launch        equ 21 * 2
  67+ 99EF              c_Pressed_BuyCargo      equ 22 * 2
  68+ 99EF              c_Pressed_SellCargo     equ 23 * 2
  69+ 99EF              c_Pressed_Equip         equ 24 * 2
  70+ 99EF              c_Pressed_GalacticChrt  equ 25 * 2
  71+ 99EF              c_Pressed_LocalChart    equ 26 * 2
  72+ 99EF              c_Pressed_MarketPrices  equ 27 * 2
  73+ 99EF              c_Pressed_Status        equ 28 * 2
  74+ 99EF              c_Pressed_Inventory     equ 29 * 2
  75+ 99EF              c_Pressed_GameSkip      equ 30 * 2
  76+ 99EF              c_Pressed_Save          equ 31 * 2
  77+ 99EF              c_Pressed_Freeze        equ 32 * 2
  78+ 99EF              c_Pressed_Resume        equ 33 * 2
  79+ 99EF              c_Pressed_Recentre      equ 34 * 2
  80+ 99EF              c_Pressed_Quit          equ 35 * 2
  81+ 99EF              c_Pressed_PlanetData    equ 36 * 2
  82+ 99EF              c_Pressed_CursorUp      equ 37 * 2
  83+ 99EF              c_Pressed_CursorDown    equ 38 * 2
  84+ 99EF              c_Pressed_Find          equ 39 * 2
  85+ 99EF              c_Pressed_Yes           equ 40 * 2
  86+ 99EF              c_Pressed_No            equ 41 * 2
  87+ 99EF
  88+ 99EF
  89+ 99EF              ; half row 1
  90+ 99EF              VK_CAPS  				equ 0
  91+ 99EF              VK_Z  					equ 1
  92+ 99EF              VK_X  					equ 2
  93+ 99EF              VK_C  					equ 3
  94+ 99EF              VK_V  					equ 4
  95+ 99EF              ; half row 2
  96+ 99EF              VK_A  					equ 5
  97+ 99EF              VK_S  					equ 6
  98+ 99EF              VK_D  					equ 7
  99+ 99EF              VK_F  					equ 8
 100+ 99EF              VK_G  					equ 9
 101+ 99EF              ; half row 3
 102+ 99EF              VK_Q  					equ 10
 103+ 99EF              VK_W  					equ 11
 104+ 99EF              VK_E  					equ 12
 105+ 99EF              VK_R  					equ 13
 106+ 99EF              VK_T  					equ 14
 107+ 99EF              ; half row 4
 108+ 99EF              VK_1  					equ 15
 109+ 99EF              VK_2  					equ 16
 110+ 99EF              VK_3  					equ 17
 111+ 99EF              VK_4  					equ 18
 112+ 99EF              VK_5  					equ 19
 113+ 99EF              ; half row 5
 114+ 99EF              VK_0 					equ 20
 115+ 99EF              VK_9 					equ 21
 116+ 99EF              VK_8 					equ 22
 117+ 99EF              VK_7 					equ 23
 118+ 99EF              VK_6 					equ 24
 119+ 99EF              ; half row 6
 120+ 99EF              VK_P  					equ 25
 121+ 99EF              VK_O  					equ 26
 122+ 99EF              VK_I  					equ 27
 123+ 99EF              VK_U  					equ 28
 124+ 99EF              VK_Y  					equ 29
 125+ 99EF              ; half row 7
 126+ 99EF              VK_ENTER 				equ 30
 127+ 99EF              VK_L  					equ 31
 128+ 99EF              VK_K  					equ 32
 129+ 99EF              VK_J  					equ 33
 130+ 99EF              VK_H  					equ 34
 131+ 99EF              ; half row 8
 132+ 99EF              VK_SPACE 				equ 35
 133+ 99EF              VK_SYM  				equ 36
 134+ 99EF              VK_M  					equ 37
 135+ 99EF              VK_N  					equ 38
 136+ 99EF              VK_B  					equ 39
 137+ 99EF
 138+ 99EF              ;KeyboardMapping
 139+ 99EF              KeyCode_Front        	equ VK_1
 140+ 99EF              KeyCode_Aft          	equ VK_2
 141+ 99EF              KeyCode_Left         	equ VK_3
 142+ 99EF              KeyCode_Right        	equ VK_4
 143+ 99EF              KeyCode_RollLeft     	equ VK_O
 144+ 99EF              KeyCode_RollRight    	equ VK_P
 145+ 99EF              KeyCode_Dive         	equ VK_Q
 146+ 99EF              KeyCode_Climb        	equ VK_A
 147+ 99EF              KeyCode_Accellerate  	equ VK_W
 148+ 99EF              KeyCode_Decellerate  	equ VK_S
 149+ 99EF              KeyCode_FireLaser    	equ VK_SPACE
 150+ 99EF              KeyCode_TargetMissle 	equ VK_T
 151+ 99EF              KeyCode_FireMissile  	equ VK_F
 152+ 99EF              KeyCode_Find        	equ VK_F
 153+ 99EF              KeyCode_UnarmMissile 	equ VK_R
 154+ 99EF              KeyCode_ECM          	equ VK_E
 155+ 99EF              KeyCode_EnergyBomb   	equ VK_U
 156+ 99EF              KeyCode_EscapePod    	equ VK_CAPS
 157+ 99EF              KeyCode_DockingComp  	equ VK_N
 158+ 99EF              KeyCode_Hyperspace   	equ VK_H
 159+ 99EF              KeyCode_Distance     	equ VK_J
 160+ 99EF              KeyCode_HomeCursor   	equ VK_G
 161+ 99EF              KeyCode_Launch       	equ VK_L
 162+ 99EF              KeyCode_BuyCargo     	equ VK_B
 163+ 99EF              KeyCode_SellCargo    	equ VK_V
 164+ 99EF              KeyCode_Equip        	equ VK_C
 165+ 99EF              KeyCode_GalacticChrt 	equ VK_5
 166+ 99EF              KeyCode_LocalChart   	equ VK_6
 167+ 99EF              KeyCode_MarketPrices 	equ VK_7
 168+ 99EF              KeyCode_Status       	equ VK_8
 169+ 99EF              KeyCode_Inventory    	equ VK_9
 170+ 99EF              KeyCode_GameSkip     	equ VK_Z
 171+ 99EF              KeyCode_Save         	equ VK_O
 172+ 99EF              KeyCode_Freeze       	equ VK_B
 173+ 99EF              KeyCode_Resume       	equ VK_L
 174+ 99EF              KeyCode_Recentre     	equ VK_D
 175+ 99EF              KeyCode_Quit         	equ VK_Y
 176+ 99EF              KeyCode_PlanetData   	equ VK_0
 177+ 99EF              KeyCode_CursorUp        equ VK_Q
 178+ 99EF              KeyCode_CursorDown      equ VK_A
 179+ 99EF              KeyCode_PressedYes      equ VK_Y
 180+ 99EF              KeyCode_PressedNo       equ VK_N
 181+ 99EF
 182+ 99EF 00 00 00...  Keys					DS	40          ; This is the list of key states for all the VK keys presssed i.e. VK_CAPS through to VK_B
 183+ 9A17              c_KeyBoardLen 			equ $ - Keys
 184+ 9A17 00 00 00...  RawKeys					DS	8
 185+ 9A1F FE FD FB F7  KeyAddrTab				DB	$FE, $FD, $FB, $F7, $EF, $DF, $BF, $7F
 185+ 9A23 EF DF BF 7F
 186+ 9A27              ; Now keyboard map lists each game key and the corresponding address in the Keys table to get the value. This way redefining keys is just a case
 187+ 9A27              ; of updating this table with the respective location to look up
 188+ 9A27              ; key list sequence is in table above
 189+ 9A27 FE 99 FF 99  KeyboardMap             DW  Keys+KeyCode_Front        ,Keys+KeyCode_Aft          ,Keys+KeyCode_Left         ,Keys+KeyCode_Right        ,Keys+KeyCode_RollLeft
 189+ 9A2B 00 9A 01 9A
 189+ 9A2F 09 9A
 190+ 9A31 08 9A F9 99                          DW  Keys+KeyCode_RollRight    ,Keys+KeyCode_Dive         ,Keys+KeyCode_Climb        ,Keys+KeyCode_Accellerate  ,Keys+KeyCode_Decellerate
 190+ 9A35 F4 99 FA 99
 190+ 9A39 F5 99
 191+ 9A3B 12 9A FD 99                          DW  Keys+KeyCode_FireLaser    ,Keys+KeyCode_TargetMissle ,Keys+KeyCode_FireMissile  ,Keys+KeyCode_UnarmMissile ,Keys+KeyCode_ECM
 191+ 9A3F F7 99 FC 99
 191+ 9A43 FB 99
 192+ 9A45 0B 9A EF 99                          DW  Keys+KeyCode_EnergyBomb   ,Keys+KeyCode_EscapePod    ,Keys+KeyCode_DockingComp  ,Keys+KeyCode_Hyperspace   ,Keys+KeyCode_Distance
 192+ 9A49 15 9A 11 9A
 192+ 9A4D 10 9A
 193+ 9A4F F8 99 0E 9A                          DW  Keys+KeyCode_HomeCursor   ,Keys+KeyCode_Launch       ,Keys+KeyCode_BuyCargo     ,Keys+KeyCode_SellCargo    ,Keys+KeyCode_Equip
 193+ 9A53 16 9A F3 99
 193+ 9A57 F2 99
 194+ 9A59 02 9A 07 9A                          DW  Keys+KeyCode_GalacticChrt ,Keys+KeyCode_LocalChart   ,Keys+KeyCode_MarketPrices ,Keys+KeyCode_Status       ,Keys+KeyCode_Inventory
 194+ 9A5D 06 9A 05 9A
 194+ 9A61 04 9A
 195+ 9A63 F0 99 09 9A                          DW  Keys+KeyCode_GameSkip     ,Keys+KeyCode_Save         ,Keys+KeyCode_Freeze       ,Keys+KeyCode_Resume       ,Keys+KeyCode_Recentre
 195+ 9A67 16 9A 0E 9A
 195+ 9A6B F6 99
 196+ 9A6D 0C 9A 03 9A                          DW  Keys+KeyCode_Quit         ,Keys+KeyCode_PlanetData   ,Keys+KeyCode_CursorUp     ,Keys+KeyCode_CursorDown   ,Keys+KeyCode_Find
 196+ 9A71 F9 99 F4 99
 196+ 9A75 F7 99
 197+ 9A77 0C 9A 15 9A                          DW  Keys+KeyCode_PressedYes   ,Keys+KeyCode_PressedNo
 198+ 9A7B
 199+ 9A7B 23 5A 58 43  ASCII_Map:              DB "#","Z","X","C","V"
 199+ 9A7F 56
 200+ 9A80 41 53 44 46                          DB "A","S","D","F","G"
 200+ 9A84 47
 201+ 9A85 51 57 45 52                          DB "Q","W","E","R","T"
 201+ 9A89 54
 202+ 9A8A 31 32 33 34                          DB "1","2","3","4","5"
 202+ 9A8E 35
 203+ 9A8F 30 39 38 37                          DB "0","9","8","7","6"
 203+ 9A93 36
 204+ 9A94 50 4F 49 55                          DB "P","O","I","U","Y"
 204+ 9A98 59
 205+ 9A99 3E 4C 4B 4A                          DB ">","L","K","J","H"
 205+ 9A9D 48
 206+ 9A9E 20 5E 4D 4E                          DB " ","^","M","N","B"
 206+ 9AA2 42
 207+ 9AA3
 208+ 9AA3              ; mapping of a code to the lookup table Keyboard map. So if you are using an addr_Pressed you can then fetch from KeyboardMap the address in Keys
 209+ 9AA3              ; for the raw key press status
 210+ 9AA3              addr_Pressed_Front         equ KeyboardMap+c_Pressed_Front
 211+ 9AA3              addr_Pressed_Aft           equ KeyboardMap+c_Pressed_Aft
 212+ 9AA3              addr_Pressed_Left          equ KeyboardMap+c_Pressed_Left
 213+ 9AA3              addr_Pressed_Right         equ KeyboardMap+c_Pressed_Right
 214+ 9AA3              addr_Pressed_RollLeft      equ KeyboardMap+c_Pressed_RollLeft
 215+ 9AA3              addr_Pressed_RollRight     equ KeyboardMap+c_Pressed_RollRight
 216+ 9AA3              addr_Pressed_Dive          equ KeyboardMap+c_Pressed_Dive
 217+ 9AA3              addr_Pressed_Climb         equ KeyboardMap+c_Pressed_Climb
 218+ 9AA3              addr_Pressed_Accellerate   equ KeyboardMap+c_Pressed_Accellerate
 219+ 9AA3              addr_Pressed_Decellerate   equ KeyboardMap+c_Pressed_Decellerate
 220+ 9AA3              addr_Pressed_FireLaser     equ KeyboardMap+c_Pressed_FireLaser
 221+ 9AA3              addr_Pressed_TargetMissle  equ KeyboardMap+c_Pressed_TargetMissle
 222+ 9AA3              addr_Pressed_FireMissile   equ KeyboardMap+c_Pressed_FireMissile
 223+ 9AA3              addr_Pressed_UnarmMissile  equ KeyboardMap+c_Pressed_UnarmMissile
 224+ 9AA3              addr_Pressed_ECM           equ KeyboardMap+c_Pressed_ECM
 225+ 9AA3              addr_Pressed_EnergyBomb    equ KeyboardMap+c_Pressed_EnergyBomb
 226+ 9AA3              addr_Pressed_EscapePod     equ KeyboardMap+c_Pressed_EscapePod
 227+ 9AA3              addr_Pressed_DockingComp   equ KeyboardMap+c_Pressed_DockingComp
 228+ 9AA3              addr_Pressed_Hyperspace    equ KeyboardMap+c_Pressed_Hyperspace
 229+ 9AA3              addr_Pressed_Distance      equ KeyboardMap+c_Pressed_Distance
 230+ 9AA3              addr_Pressed_HomeCursor    equ KeyboardMap+c_Pressed_HomeCursor
 231+ 9AA3              addr_Pressed_Launch        equ KeyboardMap+c_Pressed_Launch
 232+ 9AA3              addr_Pressed_BuyCargo      equ KeyboardMap+c_Pressed_BuyCargo
 233+ 9AA3              addr_Pressed_SellCargo     equ KeyboardMap+c_Pressed_SellCargo
 234+ 9AA3              addr_Pressed_Equip         equ KeyboardMap+c_Pressed_Equip
 235+ 9AA3              addr_Pressed_GalacticChrt  equ KeyboardMap+c_Pressed_GalacticChrt
 236+ 9AA3              addr_Pressed_LocalChart    equ KeyboardMap+c_Pressed_LocalChart
 237+ 9AA3              addr_Pressed_MarketPrices  equ KeyboardMap+c_Pressed_MarketPrices
 238+ 9AA3              addr_Pressed_Status        equ KeyboardMap+c_Pressed_Status
 239+ 9AA3              addr_Pressed_Inventory     equ KeyboardMap+c_Pressed_Inventory
 240+ 9AA3              addr_Pressed_GameSkip      equ KeyboardMap+c_Pressed_GameSkip
 241+ 9AA3              addr_Pressed_Save          equ KeyboardMap+c_Pressed_Save
 242+ 9AA3              addr_Pressed_Freeze        equ KeyboardMap+c_Pressed_Freeze
 243+ 9AA3              addr_Pressed_Resume        equ KeyboardMap+c_Pressed_Resume
 244+ 9AA3              addr_Pressed_Recentre      equ KeyboardMap+c_Pressed_Recentre
 245+ 9AA3              addr_Pressed_Quit          equ KeyboardMap+c_Pressed_Quit
 246+ 9AA3              addr_Pressed_PlanetData    equ KeyboardMap+c_Pressed_PlanetData
 247+ 9AA3              addr_Pressed_CursorUp      equ KeyboardMap+c_Pressed_CursorUp
 248+ 9AA3              addr_Pressed_CursorDown    equ KeyboardMap+c_Pressed_CursorDown
 249+ 9AA3              addr_Pressed_Find          equ KeyboardMap+c_Pressed_Find
 250+ 9AA3
 251+ 9AA3
 252+ 9AA3              MIsKeyPressed:          MACRO   keyaddress, misstarget
 253+ 9AA3 ~                                    ld      hl,(keyaddress)
 254+ 9AA3 ~                                    ld      a,(hl)
 255+ 9AA3 ~                                    JumpIfAIsZero   misstarget
 256+ 9AA3                                      ENDM
 257+ 9AA3
 258+ 9AA3 21 EF 99     init_keyboard:          ld		hl,Keys                         ; no key s are pressed by default
 259+ 9AA6 11 28 00                             ld		de, c_KeyBoardLen               ;
 260+ 9AA9 3E 00                                ld		a,0                             ;
 261+ 9AAB CD A5 99                             call	memfill_dma                     ;
 262+ 9AAE C9                                   ret                                     ;
 263+ 9AAF
 264+ 9AAF
 265+ 9AAF
 266+ 9AAF DD 21 17 9A  scan_keyboard:          ld		ix,RawKeys                      ; hl = table of raw IO port readings
 267+ 9AB3 21 1F 9A                             ld		hl,KeyAddrTab                   ; de = table of IO ports to read
 268+ 9AB6 0E 08                                ld		c,8                             ; 8 ports to ready
 269+ 9AB8 11 EF 99                             ld      de,Keys                         ; ix = table of key states from raw read
 270+ 9ABB 7E           .PortReadLoop:          ld		a,(hl)							; Set up port to read as (hl)$FE
 271+ 9ABC DB FE                                in		a,($FE)							; read port to a
 272+ 9ABE DD 77 00                             ld      (ix+0),a                        ; save raw scan
 273+ 9AC1 DD 23                                inc     ix
 274+ 9AC3 23                                   inc		hl                              ; and ready for next read
 275+ 9AC4 06 05        .ProcessInputBits:      ld		b,5								; loop all bits (there are only 5 keys to a group)
 276+ 9AC6 1F           .ProcessBitsLoop:       rra                                     ; shit bit 0 into carry
 277+ 9AC7 CB 47                                bit		0,a								; is bit set
 278+ 9AC9 30 08                                jr      nc,.SetKeyPressed               ; low bit means it was pressed
 279+ 9ACB FD 6F                                ld      iyl,a
 280+ 9ACD                                      ZeroA
 280+ 9ACD AF          >                        xor a
 281+ 9ACE C3 DB 9A                             jp      .SetKey
 282+ 9AD1 20 0B                                jr		nz,.SkipKeySet
 283+ 9AD3 FD 6F        .SetKeyPressed:	        ld      iyl,a                           ; save current input byte
 284+ 9AD5 1A                                   ld      a,(de)                          ; get current keystate
 285+ 9AD6 FE 02                                cp      2
 286+ 9AD8 28 02                                jr      z,.AlreadyHeld
 287+ 9ADA 3C                                   inc     a                               ; and increment by 1 as its moved from previous state
 288+ 9ADB 12           .SetKey:                ld		(de),a				  	        ; save key Pressed state
 289+ 9ADC FD 7D        .AlreadyHeld:           ld      a,iyl                           ; and retrieve the current input byte
 290+ 9ADE 13           .SkipKeySet:	        inc		de								; move to next key
 291+ 9ADF 10 E5                                djnz	.ProcessBitsLoop				; Process all key group bits
 292+ 9AE1 0D                                   dec     c                               ; thats one row of bits all processed
 293+ 9AE2 20 D7                                jr      nz,.PortReadLoop				; Read next input port
 294+ 9AE4 C9                                   ret
 295+ 9AE5
 296+ 9AE5
 297+ 9AE5
 298+ 9AE5              GetKeyStateAddressDE:   MACRO
 299+ 9AE5 ~                                    ld      hl,KeyboardMap                  ; work our address to read from
 300+ 9AE5 ~                                    add     hl,a
 301+ 9AE5 ~                                    ld      e,(hl)
 302+ 9AE5 ~                                    inc     hl
 303+ 9AE5 ~                                    ld      d,(hl)                          ; now de = address in keypress list
 304+ 9AE5                                      ENDM
 305+ 9AE5
 306+ 9AE5              GetKeyStateAddressHL:   MACRO
 307+ 9AE5 ~                                    ld      hl,KeyboardMap                  ; work our address to read from
 308+ 9AE5 ~                                    add     hl,a
 309+ 9AE5 ~                                    ld      a,(hl)
 310+ 9AE5 ~                                    inc     hl
 311+ 9AE5 ~                                    ld      h,(hl)                          ; now hl = address in keypress list
 312+ 9AE5 ~                                    ld      l,a
 313+ 9AE5                                      ENDM
 314+ 9AE5
 315+ 9AE5
 316+ 9AE5              ;;old debug codeCurrentX            DB 0
 317+ 9AE5              ;;old debug codeCurrentY            DB 0
 318+ 9AE5              ;;old debug code
 319+ 9AE5              ;;old debug codedisplayKeyStatus:       xor         a
 320+ 9AE5              ;;old debug code                        ld          (CurrentX),a
 321+ 9AE5              ;;old debug code                        ld          hl,RawKeys
 322+ 9AE5              ;;old debug code                        ld          a,(hl)
 323+ 9AE5              ;;old debug code                        and         %00011111
 324+ 9AE5              ;;old debug code                        ld          b,5
 325+ 9AE5              ;;old debug code.displayLoop:           push        bc,,hl
 326+ 9AE5              ;;old debug code                        rra
 327+ 9AE5              ;;old debug code                        jr          c,.displayNoPress
 328+ 9AE5              ;;old debug code.displayPress:          push        af
 329+ 9AE5              ;;old debug code                        ld          a,(CurrentX)
 330+ 9AE5              ;;old debug code                        ld          e,a
 331+ 9AE5              ;;old debug code                        ld          a,(CurrentY)
 332+ 9AE5              ;;old debug code                        ld          d,a
 333+ 9AE5              ;;old debug code                        ld          a,'*'
 334+ 9AE5              ;;old debug code                        MMUSelectLayer1
 335+ 9AE5              ;;old debug code                        call        l1_print_char
 336+ 9AE5              ;;old debug code                        ld          a,(CurrentX)
 337+ 9AE5              ;;old debug code                        add         a,8
 338+ 9AE5              ;;old debug code                        ld          (CurrentX),a
 339+ 9AE5              ;;old debug code                        pop         af
 340+ 9AE5              ;;old debug code                        pop         bc,,hl
 341+ 9AE5              ;;old debug code                        djnz        .displayLoop
 342+ 9AE5              ;;old debug code                        ret
 343+ 9AE5              ;;old debug code.displayNoPress:        push        af
 344+ 9AE5              ;;old debug code                        ld          a,(CurrentX)
 345+ 9AE5              ;;old debug code                        ld          e,a
 346+ 9AE5              ;;old debug code                        ld          a,(CurrentY)
 347+ 9AE5              ;;old debug code                        ld          d,a
 348+ 9AE5              ;;old debug code                        ld          a,'O'
 349+ 9AE5              ;;old debug code                        MMUSelectLayer1
 350+ 9AE5              ;;old debug code                        call        l1_print_char
 351+ 9AE5              ;;old debug code                        ld          a,(CurrentX)
 352+ 9AE5              ;;old debug code                        add         a,8
 353+ 9AE5              ;;old debug code                        ld          (CurrentX),a
 354+ 9AE5              ;;old debug code                        pop         af
 355+ 9AE5              ;;old debug code                        pop         bc,,hl
 356+ 9AE5              ;;old debug code                        djnz        .displayLoop
 357+ 9AE5              ;;old debug code                        ret
 358+ 9AE5              ;;old debug code
 359+ 9AE5              ;;old debug codedisplayDownStatus:      ld  a,(Keys+      KeyCode_CursorUp)
 360+ 9AE5              ;;old debug code                        cp  0
 361+ 9AE5              ;;old debug code                        jr      z,.displayNoUp
 362+ 9AE5              ;;old debug code                        cp  1
 363+ 9AE5              ;;old debug code                        jr      z,.displayUp
 364+ 9AE5              ;;old debug code.displayHeld:           ld      de,8*15
 365+ 9AE5              ;;old debug code                        ld      a,"*"
 366+ 9AE5              ;;old debug code                        MMUSelectLayer1
 367+ 9AE5              ;;old debug code                        call        l1_print_char
 368+ 9AE5              ;;old debug code                        ret
 369+ 9AE5              ;;old debug code.displayUp:             ld      de,8*15
 370+ 9AE5              ;;old debug code                        ld      a,"+"
 371+ 9AE5              ;;old debug code                        MMUSelectLayer1
 372+ 9AE5              ;;old debug code                        call        l1_print_char
 373+ 9AE5              ;;old debug code                        ret
 374+ 9AE5              ;;old debug code.displayNoUp:             ld      de,8*15
 375+ 9AE5              ;;old debug code                        ld      a,"O"
 376+ 9AE5              ;;old debug code                        MMUSelectLayer1
 377+ 9AE5              ;;old debug code                        call        l1_print_char
 378+ 9AE5              ;;old debug code                        ret
 379+ 9AE5              ;;old debug code
 380+ 9AE5
 381+ 9AE5
 382+ 9AE5              ; call with a = c_Pressed key, will then read mapping does this with keyboard scan, waits until key gets to state 1, if it was already held then#
 383+ 9AE5              ; it will have to be let go to reset of 0 and scan again
 384+ 9AE5              ; Deprecated as not used as yet
 385+ 9AE5              ;;;;;;wait_for_key_a_press:   GetKeyStateAddressHL
 386+ 9AE5              ;;;;;;                        push    hl
 387+ 9AE5              ;;;;;;.wait_loop:             call    scan_keyboard
 388+ 9AE5              ;;;;;;                        pop     hl                              ; get key address into hl
 389+ 9AE5              ;;;;;;                        push    hl
 390+ 9AE5              ;;;;;;                        ld      a,(hl)
 391+ 9AE5              ;;;;;;                        JumpIfANENusng  1,.wait_loop             ; will also loop if held down when entering this routine
 392+ 9AE5              ;;;;;;                        pop     hl                              ; tidy up rogue push, less t states than detecting if we want to push or not
 393+ 9AE5              ;;;;;;                        ret
 394+ 9AE5              ;;;;;;; call with a = c_Pressed key, will then read mapping does this with keyboard scan waits until key gets to state 2
 395+ 9AE5              ;;;;;;wait_for_key_a_held:    GetKeyStateAddressDE
 396+ 9AE5              ;;;;;;                        push    hl
 397+ 9AE5              ;;;;;;.wait_loop:             call    scan_keyboard
 398+ 9AE5              ;;;;;;                        pop     hl
 399+ 9AE5              ;;;;;;                        push    hl
 400+ 9AE5              ;;;;;;                        ld      a,(hl)
 401+ 9AE5              ;;;;;;                        JumpIfALTNusng  2, .wait_loop
 402+ 9AE5              ;;;;;;                        pop     hl
 403+ 9AE5              ;;;;;;                        ret
 404+ 9AE5
 405+ 9AE5              ; Gets the current keystate of the c_Pressed Key in a register
 406+ 9AE5              get_key_a_state:        GetKeyStateAddressHL                    ; reads a mapped key and sets a to key staus, e.g. 0 1 or >=2 DOES NOT SCAN KEYBOARD
 406+ 9AE5 21 27 9A    >                        ld      hl,KeyboardMap                  ; work our address to read from
 406+ 9AE8 ED 31       >                        add     hl,a
 406+ 9AEA 7E          >                        ld      a,(hl)
 406+ 9AEB 23          >                        inc     hl
 406+ 9AEC 66          >                        ld      h,(hl)                          ; now hl = address in keypress list
 406+ 9AED 6F          >                        ld      l,a
 407+ 9AEE 7E                                   ld      a,(hl)                          ; a = keystate
 408+ 9AEF C9                                   ret
 409+ 9AF0
 410+ 9AF0              ; sets they keystate of c pressed key in a register to 1 (pressed)
 411+ 9AF0              force_key_press:        GetKeyStateAddressHL                    ; read key locations
 411+ 9AF0 21 27 9A    >                        ld      hl,KeyboardMap                  ; work our address to read from
 411+ 9AF3 ED 31       >                        add     hl,a
 411+ 9AF5 7E          >                        ld      a,(hl)
 411+ 9AF6 23          >                        inc     hl
 411+ 9AF7 66          >                        ld      h,(hl)                          ; now hl = address in keypress list
 411+ 9AF8 6F          >                        ld      l,a
 412+ 9AF9 3E 01                                ld      a,1
 413+ 9AFB 77                                   ld      (hl),a
 414+ 9AFC C9                                   ret
 415+ 9AFD
 416+ 9AFD              is_key_up_state:        GetKeyStateAddressHL
 416+ 9AFD 21 27 9A    >                        ld      hl,KeyboardMap                  ; work our address to read from
 416+ 9B00 ED 31       >                        add     hl,a
 416+ 9B02 7E          >                        ld      a,(hl)
 416+ 9B03 23          >                        inc     hl
 416+ 9B04 66          >                        ld      h,(hl)                          ; now hl = address in keypress list
 416+ 9B05 6F          >                        ld      l,a
 417+ 9B06 7E                                   ld      a,(hl)
 418+ 9B07 FE 00                                cp      0
 419+ 9B09 C9                                   ret
 420+ 9B0A
 421+ 9B0A              ; returns z is set if c_ key is pressed
 422+ 9B0A              is_key_pressed:         GetKeyStateAddressHL
 422+ 9B0A 21 27 9A    >                        ld      hl,KeyboardMap                  ; work our address to read from
 422+ 9B0D ED 31       >                        add     hl,a
 422+ 9B0F 7E          >                        ld      a,(hl)
 422+ 9B10 23          >                        inc     hl
 422+ 9B11 66          >                        ld      h,(hl)                          ; now hl = address in keypress list
 422+ 9B12 6F          >                        ld      l,a
 423+ 9B13 7E                                   ld      a,(hl)                          ; a = keystate
 424+ 9B14 FE 01                                cp      1                               ; we cant just test bit 0 as this may have been held long
 425+ 9B16 C9                                   ret
 426+ 9B17
 427+ 9B17              ; returns nz is set if c_ key is held, if key was held then keystate would be 2 or 3, i.e. bit 1 set
 428+ 9B17              is_key_held:            GetKeyStateAddressHL
 428+ 9B17 21 27 9A    >                        ld      hl,KeyboardMap                  ; work our address to read from
 428+ 9B1A ED 31       >                        add     hl,a
 428+ 9B1C 7E          >                        ld      a,(hl)
 428+ 9B1D 23          >                        inc     hl
 428+ 9B1E 66          >                        ld      h,(hl)                          ; now hl = address in keypress list
 428+ 9B1F 6F          >                        ld      l,a
 429+ 9B20 7E                                   ld      a,(hl)                          ; a = keystate
 430+ 9B21 E6 02                                and     Bit1Only                        ; clear out bit 1 which elimiates state 3, so it can now be 2 (held) or 0 (not pressed or one off)
 431+ 9B23 C9                                   ret
 432+ 9B24
 433+ 9B24              ; checks to see if any key is pressed in the key table
 434+ 9B24 21 EF 99     is_any_key_pressed:     ld      hl,Keys
 435+ 9B27 01 28 00                             ld      bc,40
 436+ 9B2A 3E 01                                ld      a,1
 437+ 9B2C ED B1                                cpir                                    ; search for the value 1
 438+ 9B2E 28 03                                jr      z,.KeyPressed                   ; if a key was pressed then handle press
 439+ 9B30                                      SetAFalse
 439+ 9B30 3E FF       >                        ld      a,$FF
 440+ 9B32 C9                                   ret
 441+ 9B33 3E 27        .KeyPressed:            ld      a,39                            ; so c will be how many keys still to scan
 442+ 9B35 91                                   sub     c                               ; so a = 40 - c to get to result
 443+ 9B36 C9                                   ret
 444+ 9B37
 445+ 9B37 21 EF 99     is_any_key_held:        ld      hl,Keys
 446+ 9B3A 06 28                                ld      b,40
 447+ 9B3C 0E 00                                ld      c,0
 448+ 9B3E 7E           .KeyReadLoop:           ld      a,(hl)
 449+ 9B3F E6 02                                and     Bit1Only                        ; clear out bit 1 which elimiates state 3, so it can now be 2 (held) or 0 (not pressed or one off)
 450+ 9B41 C2 4B 9B                             jp      nz,.KeyPressed
 451+ 9B44 23                                   inc     hl
 452+ 9B45 0C                                   inc     c
 453+ 9B46 10 F6                                djnz    .KeyReadLoop
 454+ 9B48                                      SetAFalse
 454+ 9B48 3E FF       >                        ld      a,$FF
 455+ 9B4A C9                                   ret
 456+ 9B4B 79           .KeyPressed:            ld      a,c
 457+ 9B4C C9                                   ret
 458+ 9B4D
 459+ 9B4D
 460+ 9B4D 00 00 00...  InputString             DS  30              ; used for a 30 character input buffer
 461+ 9B6B 00                                   DB  0               ; end of string marker as a safety
 462+ 9B6C 00           InputCursor             DB  0
 463+ 9B6D 00           EnterPressed            DB  0               ; zero notpressed FF pressed
 464+ 9B6E 00           InputChanged            DB  0
 465+ 9B6F              InputLimit              EQU 20
 466+ 9B6F
 467+ 9B6F 21 4D 9B     keyboard_copy_input_to_de:  ld      hl,InputString
 468+ 9B72 3A 6C 9B                                 ld      a,(InputCursor)
 469+ 9B75 FE 00                                    cp      0
 470+ 9B77 28 05                                    jr      z,.NoString
 471+ 9B79 4F                                       ld      c,a
 472+ 9B7A 06 00                                    ld      b,0
 473+ 9B7C ED B0                                    ldir
 474+ 9B7E 3E 00        .NoString                   ld      a,0
 475+ 9B80 12                                       ld      (de),a
 476+ 9B81 C9                                       ret
 477+ 9B82
 478+ 9B82 AF           initInputText:          xor     a
 479+ 9B83 32 6C 9B                             ld      (InputCursor),a
 480+ 9B86                                      SetMemFalse EnterPressed
 480+ 9B86 3E FF       >                        ld      a,$FF
 480+ 9B88 32 6D 9B    >                        ld      (EnterPressed),a
 481+ 9B8B                                      SetMemFalse InputChanged
 481+ 9B8B 3E FF       >                        ld      a,$FF
 481+ 9B8D 32 6E 9B    >                        ld      (InputChanged),a
 482+ 9B90 21 4D 9B                             ld      hl,InputString
 483+ 9B93 06 1E                                ld      b,30
 484+ 9B95 77           .wipeloop:              ld      (hl),a
 485+ 9B96 23                                   inc     hl
 486+ 9B97 10 FC                                djnz    .wipeloop
 487+ 9B99 C9                                   ret
 488+ 9B9A
 489+ 9B9A              InputName:              SetMemFalse InputChanged
 489+ 9B9A 3E FF       >                        ld      a,$FF
 489+ 9B9C 32 6E 9B    >                        ld      (InputChanged),a
 490+ 9B9F CD 24 9B                             call    is_any_key_pressed
 491+ 9BA2 FE FF                                cp      $FF
 492+ 9BA4 C8                                   ret     z
 493+ 9BA5 4F           .KeyPressed:            ld      c,a
 494+ 9BA6 3A 6C 9B                             ld      a,(InputCursor)                 ; No key so we can now look at if we are at the end of the buffer
 495+ 9BA9 FE 14                                cp      InputLimit                      ; move to variable later and then cp (hl)
 496+ 9BAB 28 0B                                jr      z,.DeleteOrEnterOnly            ;
 497+ 9BAD 21 7B 9A                             ld      hl,ASCII_Map
 498+ 9BB0 79                                   ld      a,c
 499+ 9BB1 ED 31                                add     hl,a
 500+ 9BB3 7E                                   ld      a,(hl)
 501+ 9BB4 FE 41                                cp      "A"
 502+ 9BB6 30 0B                                jr      nc,.AlphaPressed
 503+ 9BB8              ; CAPS and Symbol act as delete for now
 504+ 9BB8 FE 20        .DeleteOrEnterOnly      cp      " "                             ; if space was  pressed (mapped to Hash in ASCII table))
 505+ 9BBA 28 33                                jr      z,.SpacePressed               ; for now we will ignore the shift and just assume delete
 506+ 9BBC FE 3E                                cp      ">"         ; ENTER
 507+ 9BBE 28 19                                jr      z,.EnterPressed
 508+ 9BC0 FE 23                                cp      "#"         ; CAPS
 509+ 9BC2 C9                                   ret
 510+ 9BC3 47           .AlphaPressed:          ld      b,a
 511+ 9BC4 3A 6C 9B                             ld      a,(InputCursor)
 512+ 9BC7 4F                                   ld      c,a
 513+ 9BC8 21 4D 9B                             ld      hl,InputString
 514+ 9BCB ED 31                                add     hl,a
 515+ 9BCD 78                                   ld      a,b
 516+ 9BCE 70                                   ld      (hl),b
 517+ 9BCF 79                                   ld      a,c
 518+ 9BD0 21 6C 9B                             ld      hl,InputCursor
 519+ 9BD3 34                                   inc     (hl)
 520+ 9BD4                                      SetMemTrue InputChanged
 520+ 9BD4 AF          >                        xor     a
 520+ 9BD5 32 6E 9B    >                        ld      (InputChanged),a
 521+ 9BD8 C9                                   ret
 522+ 9BD9 3A 6C 9B     .EnterPressed:          ld      a,(InputCursor)
 523+ 9BDC 21 4D 9B                             ld      hl,InputString
 524+ 9BDF ED 31                                add     hl,a
 525+ 9BE1                                      ZeroA
 525+ 9BE1 AF          >                        xor a
 526+ 9BE2 77                                   ld      (hl),a
 527+ 9BE3                                      SetMemTrue EnterPressed
 527+ 9BE3 AF          >                        xor     a
 527+ 9BE4 32 6D 9B    >                        ld      (EnterPressed),a
 528+ 9BE7                                      SetMemTrue InputChanged
 528+ 9BE7 AF          >                        xor     a
 528+ 9BE8 32 6E 9B    >                        ld      (InputChanged),a
 529+ 9BEB CD A3 9A                             call    init_keyboard           ; Flush keyboard status so futher inputs don't auto read the enter key as a second press
 530+ 9BEE C9                                   ret
 531+ 9BEF 3A 6C 9B     .SpacePressed:          ld      a,(InputCursor)         ; Space = delete
 532+ 9BF2 FE 00                                cp      0                       ; if input is zero length then can not delete
 533+ 9BF4 C8                                   ret     z
 534+ 9BF5 3D                                   dec     a                       ; move back one and update cursor pos
 535+ 9BF6 32 6C 9B                             ld      (InputCursor),a         ;
 536+ 9BF9 21 4D 9B                             ld      hl,InputString          ; now update end of line to null
 537+ 9BFC ED 31                                add     hl,a                    ; .
 538+ 9BFE                                      ZeroA                           ; .
 538+ 9BFE AF          >                        xor a
 539+ 9BFF 77                                   ld      (hl),a                  ; .
 540+ 9C00                                      SetMemTrue InputChanged
 540+ 9C00 AF          >                        xor     a
 540+ 9C01 32 6E 9B    >                        ld      (InputChanged),a
 541+ 9C04 C9                                   ret
 542+ 9C05
 543+ 9C05              TargetMissileTest:      JumpIfMemZero NbrMissiles,      .ClearTargetting
 543+ 9C05 3A 4A 9E    >                        ld  a,(NbrMissiles)
 543+ 9C08 A7          >                        and a
 543+ 9C09 CA 20 9C    >                        jp  z,.ClearTargetting
 544+ 9C0C 3A DF A0                             ld      a,(MissileTargettingFlag)   ; if we are comitted to launch
 545+ 9C0F CB 7F                                bit     7,a                         ; then don't scan
 546+ 9C11 C8                                   ret     z                           ; as it will be cleared on launch
 547+ 9C12 3E 16        .ScanForKey:            ld      a,c_Pressed_TargetMissle    ; if not pressed we are done
 548+ 9C14 CD 0A 9B                             call    is_key_pressed              ; .
 549+ 9C17 C0                                   ret     nz                          ; .
 550+ 9C18 3A DF A0     .TargetPressed:         ld      a,(MissileTargettingFlag)   ; get flag back
 551+ 9C1B                                      JumpIfAEqNusng StageMissileNoTarget, .SetTargetting
 551+ 9C1B FE FF       >                        cp     StageMissileNoTarget
 551+ 9C1D CA 26 9C    >                        jp      z,.SetTargetting
 552+ 9C20              .ClearTargetting:       SetMemToN   MissileTargettingFlag, StageMissileNoTarget
 552+ 9C20 3E FF       >                        ld      a,StageMissileNoTarget
 552+ 9C22 32 DF A0    >                        ld      (MissileTargettingFlag),a
 553+ 9C25 C9                                   ret
 554+ 9C26              .SetTargetting:         SetMemToN   MissileTargettingFlag, StageMissileTargeting
 554+ 9C26 3E FE       >                        ld      a,StageMissileTargeting
 554+ 9C28 32 DF A0    >                        ld      (MissileTargettingFlag),a
 555+ 9C2B C9                                   ret
 556+ 9C2C
 557+ 9C2C AF           MovementKeyTest:        xor     a
 558+ 9C2D 32 CB 9E                             ld      (CursorKeysPressed),a
 559+ 9C30 3A EA 9D                             ld      a,(MenuIdMax)
 560+ 9C33 E6 FC                                and     $FC
 561+ 9C35 20 26                                jr      nz,CursorKeys
 562+ 9C37 2A 35 9A     ClimbDiveKeys:          ld      hl,(addr_Pressed_Climb)
 563+ 9C3A 7E                                   ld      a,(hl)
 564+ 9C3B                                      JumpIfAIsZero ScanDiveKey
 564+ 9C3B A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
 564+ 9C3C CA 4A 9C    >                        jp	    z, ScanDiveKey
 565+ 9C3F 3A CB 9E                             ld      a,(CursorKeysPressed)
 566+ 9C42 F6 80                                or      $80
 567+ 9C44 32 CB 9E                             ld      (CursorKeysPressed),a
 568+ 9C47 C3 80 9C                             jp      ScanLeftKey
 569+ 9C4A 2A 33 9A     ScanDiveKey:            ld      hl,(addr_Pressed_Dive)
 570+ 9C4D 7E                                   ld      a,(hl)
 571+ 9C4E                                      JumpIfAIsZero ScanLeftKey
 571+ 9C4E A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
 571+ 9C4F CA 80 9C    >                        jp	    z, ScanLeftKey
 572+ 9C52 3A CB 9E                             ld      a,(CursorKeysPressed)
 573+ 9C55 F6 40                                or      $40
 574+ 9C57 32 CB 9E                             ld      (CursorKeysPressed),a
 575+ 9C5A C3 80 9C                             jp      ScanLeftKey
 576+ 9C5D 2A 71 9A     CursorKeys:             ld      hl,(addr_Pressed_CursorUp)
 577+ 9C60 7E                                   ld      a,(hl)
 578+ 9C61                                      JumpIfAIsZero ScanCursorDownKey
 578+ 9C61 A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
 578+ 9C62 CA 70 9C    >                        jp	    z, ScanCursorDownKey
 579+ 9C65 3A CB 9E                             ld      a,(CursorKeysPressed)
 580+ 9C68 F6 80                                or      $80
 581+ 9C6A 32 CB 9E                             ld      (CursorKeysPressed),a
 582+ 9C6D C3 80 9C                             jp      ScanLeftKey
 583+ 9C70 2A 73 9A     ScanCursorDownKey:      ld      hl,(addr_Pressed_CursorDown)
 584+ 9C73 7E                                   ld      a,(hl)
 585+ 9C74                                      JumpIfAIsZero ScanLeftKey
 585+ 9C74 A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
 585+ 9C75 CA 80 9C    >                        jp	    z, ScanLeftKey
 586+ 9C78 3A CB 9E                             ld      a,(CursorKeysPressed)
 587+ 9C7B F6 40                                or      $40
 588+ 9C7D 32 CB 9E                             ld      (CursorKeysPressed),a
 589+ 9C80 2A 2F 9A     ScanLeftKey:            ld      hl,(addr_Pressed_RollLeft)
 590+ 9C83 7E                                   ld      a,(hl)
 591+ 9C84                                      JumpIfAIsZero ScanRightKey
 591+ 9C84 A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
 591+ 9C85 CA 91 9C    >                        jp	    z, ScanRightKey
 592+ 9C88 3A CB 9E                             ld      a,(CursorKeysPressed)
 593+ 9C8B F6 20                                or      $20
 594+ 9C8D 32 CB 9E                             ld      (CursorKeysPressed),a
 595+ 9C90 C9                                   ret
 596+ 9C91 2A 31 9A     ScanRightKey:           ld      hl,(addr_Pressed_RollRight)
 597+ 9C94 7E                                   ld      a,(hl)
 598+ 9C95                                      JumpIfAIsZero ScanHomeKey
 598+ 9C95 A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
 598+ 9C96 CA A2 9C    >                        jp	    z, ScanHomeKey
 599+ 9C99 3A CB 9E                             ld      a,(CursorKeysPressed)
 600+ 9C9C F6 10                                or      $10
 601+ 9C9E 32 CB 9E                             ld      (CursorKeysPressed),a
 602+ 9CA1 C9                                   ret
 603+ 9CA2 2A 4F 9A     ScanHomeKey:            ld      hl,(addr_Pressed_HomeCursor)
 604+ 9CA5 7E                                   ld      a,(hl)
 605+ 9CA6                                      JumpIfAIsZero ScanRecentreKey
 605+ 9CA6 A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
 605+ 9CA7 CA B3 9C    >                        jp	    z, ScanRecentreKey
 606+ 9CAA 3A CB 9E                             ld      a,(CursorKeysPressed)
 607+ 9CAD F6 08                                or      $08
 608+ 9CAF 32 CB 9E                             ld      (CursorKeysPressed),a
 609+ 9CB2 C9                                   ret
 610+ 9CB3 2A 6B 9A     ScanRecentreKey:        ld      hl,(addr_Pressed_Recentre)
 611+ 9CB6 7E                                   ld      a,(hl)
 612+ 9CB7                                      ReturnIfAIsZero
 612+ 9CB7 A7          >                        and     a
 612+ 9CB8 C8          >                        ret     z
 613+ 9CB9 3A CB 9E                             ld      a,(CursorKeysPressed)
 614+ 9CBC F6 04                                or      $04
 615+ 9CBE 32 CB 9E                             ld      (CursorKeysPressed),a
 616+ 9CC1 C9                                   ret
 617+ 9CC2
 618+ 9CC2
# file closed: ./Hardware/keyboard.asm
 637  9CC2
 638  9CC2                  INCLUDE "./Variables/constant_equates.asm"
# file opened: ./Variables/constant_equates.asm
   1+ 9CC2              ;Contants
   2+ 9CC2
   3+ 9CC2              SignMask8Bit		equ %01111111
   4+ 9CC2              SignMask16Bit		equ %0111111111111111
   5+ 9CC2              SignOnly8Bit		equ $80
   6+ 9CC2              SignOnly16Bit		equ $8000
   7+ 9CC2
   8+ 9CC2              Bit7Only            equ %10000000
   9+ 9CC2              Bit6Only            equ %01000000
  10+ 9CC2              Bit5Only            equ %00100000
  11+ 9CC2              Bit4Only            equ %00010000
  12+ 9CC2              Bit3Only            equ %00001000
  13+ 9CC2              Bit2Only            equ %00000100
  14+ 9CC2              Bit1Only            equ %00000010
  15+ 9CC2              Bit0Only            equ %00000001
  16+ 9CC2              Bit7Clear           equ %01111111
  17+ 9CC2              Bit6Clear           equ %10111111
  18+ 9CC2              Bit5Clear           equ %11011111
  19+ 9CC2              Bit4Clear           equ %11101111
  20+ 9CC2              Bit3Clear           equ %11110111
  21+ 9CC2              Bit2Clear           equ %11111011
  22+ 9CC2              Bit1Clear           equ %11111101
  23+ 9CC2              Bit0Clear           equ %11111110
  24+ 9CC2              ConstPi				equ $80
  25+ 9CC2              ConstNorm           equ 197
  26+ 9CC2
  27+ 9CC2              ;Text Tokens
  28+ 9CC2              EliteToken			equ $1E			; Token ID for text messsage ---- E L I T E ----
  29+ 9CC2              BrabenBellToken 	equ $0D
  30+ 9CC2              AcorToken			equ $0C
  31+ 9CC2
  32+ 9CC2              ; Intro Screen
  33+ 9CC2              TitleShip			equ	$8C
  34+ 9CC2              RotationUnity		equ $60
  35+ 9CC2              DBCheckCode			equ $DB
  36+ 9CC2              MaxVisibility		equ $1F
  37+ 9CC2              FarInFront			equ $C0
  38+ 9CC2              ; Equipment Flags
  39+ 9CC2              EquipmentItemFitted     equ $FF
  40+ 9CC2              EquipmentItemNotFitted  equ 0
  41+ 9CC2              ; Universe Managment
  42+ 9CC2              ShipTotalModelCount     equ 44
  43+ 9CC2              ShipTypeScoopable       equ 4         ; a sub set of junk
  44+ 9CC2              ShipTypeJunk            equ 3
  45+ 9CC2              ShipTypeStation         equ 2
  46+ 9CC2              ShipTypeMissile         equ 1
  47+ 9CC2              ShipTypeNormal          equ 0
  48+ 9CC2              ShipTypeText            equ 253
  49+ 9CC2              ShipTypeDebug           equ 254
  50+ 9CC2              ShipTypeEmpty           equ 255
  51+ 9CC2              ; TacticsControl
  52+ 9CC2              ShipExplosionDuration   equ 75         ; amount of frames an explosion lasts for
  53+ 9CC2              ShipIsTrader            equ Bit0Only   ; Trader flag  80% are peaceful 20% also have Bounty Hunter flag
  54+ 9CC2              ShipIsBountyHunter      equ Bit1Only   ;
  55+ 9CC2              ShipIsHostile           equ Bit2Only   ;
  56+ 9CC2              ShipNotHostile          equ Bit2Clear   ;
  57+ 9CC2              ShipIsPirate            equ Bit3Only   ;
  58+ 9CC2              ShipIsDot               equ Bit3Only
  59+ 9CC2              ShipIsNotDot            equ Bit3Clear
  60+ 9CC2              ShipIsDotBitNbr         equ 3
  61+ 9CC2              ShipKilled              equ Bit4Only    ; Ship has just been marked as killed so initiate cloud of debris
  62+ 9CC2              ShipKilledBitNbr        equ 4
  63+ 9CC2              ShipIsDocking           equ Bit4Only   ;
  64+ 9CC2              ShipIsBystander         equ Bit5Only   ;
  65+ 9CC2              ShipIsVisible           equ Bit6Only
  66+ 9CC2              ShipIsVisibleBitNbr     equ 6
  67+ 9CC2              ShipIsCop               equ Bit6Only   ;
  68+ 9CC2              ShipIsScoopDockEsc      equ Bit7Only   ;
  69+ 9CC2              ShipAIEnabled           equ Bit7Only   ;
  70+ 9CC2              ShipAIDisabled          equ Bit7Clear
  71+ 9CC2              ShipAIEnabledBitNbr     equ 7
  72+ 9CC2              ShipExploding           equ Bit5Only
  73+ 9CC2              ShipExplodingBitNbr     equ 5
  74+ 9CC2              ; Equipment Defaults
  75+ 9CC2              ECMCounterMax           equ $80
  76+ 9CC2              ; Main Loop State
  77+ 9CC2              StatePlayerDocked       equ $FF
  78+ 9CC2              StateCompletedLaunch    equ $FD
  79+ 9CC2              StateInTransition       equ $FE
  80+ 9CC2              StateHJumping           equ $FC
  81+ 9CC2              StateHEntering          equ $FB
  82+ 9CC2              StateCompletedHJump     equ $FA
  83+ 9CC2              StateNormal             equ 0
  84+ 9CC2              ; Missile Stage flags , $8x = locked to ship id x, $0x = fire at ship id x requested
  85+ 9CC2              StageMissileNoTarget equ $FF
  86+ 9CC2              StageMissileTargeting equ $FE
  87+ 9CC2              ; UniverseAIControl
  88+ 9CC2              ShipCanAnger        equ %00000001
  89+ 9CC2
  90+ 9CC2
  91+ 9CC2              ShipMaxDistance     equ 192
  92+ 9CC2              HyperSpaceTimers    equ $0B0B
  93+ 9CC2
  94+ 9CC2
  95+ 9CC2              MaxNumberOfStars	equ 11
  96+ 9CC2              ConsoleRefreshInterval  equ 5
  97+ 9CC2
  98+ 9CC2              ShipTypeSize		equ	32 			;??????? just a guess for now
  99+ 9CC2              ShipSST				equ 4			; its a space station
 100+ 9CC2              UniverseBasePage 	equ 70			; Base memory bank for universe Item #0
 101+ 9CC2              ShipDataBasePage	equ	90			; Needs 2mb upgrade but what the heck
 102+ 9CC2              ShipCountMax		equ	2			; For now just 2 ships to debug
 103+ 9CC2              LineLimitPerShip	equ 70			; Max lines per ship
 104+ 9CC2              FaceLimitPerShip	equ	70			; Same as line limit to simplify some logic
 105+ 9CC2              ; "NEED TO DEFINE SHIPTYPESIZE TODO"
 106+ 9CC2
 107+ 9CC2              ; Memory page managment	(Refers to a memory slot as a place to access data)
 108+ 9CC2              ShipDataSlot		equ	6			; this may move into rom swap out space later
 109+ 9CC2              UniverseObjectSlot	equ	7
 110+ 9CC2
 111+ 9CC2              KeyForwardsView		equ	$20
 112+ 9CC2              ; Game specific equates
 113+ 9CC2              MissileDropHeight   equ 5           ; how far the missile is ejected on launch in y axis
 114+ 9CC2
 115+ 9CC2              ;...Game Colour Mapping
 116+ 9CC2              L2DustColour        equ L2ColourGREY_1
 117+ 9CC2              L2SunScannerBright  equ 252
 118+ 9CC2              L2SunScanner        equ 180
 119+ 9CC2              L2DebrisColour      equ L2ColourYELLOW_1
 120+ 9CC2
 121+ 9CC2
 122+ 9CC2              ; Ship Data
 123+ 9CC2              ;;;;	.XX21	\ -> &5600 \ Table of pointers to ships' data given to XX0
 124+ 9CC2              ;;;;00 7F			 EQUW &7F00 \ type  1 is #MSL  Missile data on page off bottom of screen
 125+ 9CC2              ;;;;00 00			 EQUW 0     \ type  2 is #SST  Space Station, Coriolis or Dodo.
 126+ 9CC2              ;;;;00 00			 EQUW 0     \ type  3 is #ESC  Escape capsule
 127+ 9CC2              ;;;;00 00			 EQUW 0     \ type  4 is #PLT  Plate, alloys
 128+ 9CC2              ;;;;00 00			 EQUW 0     \ type  5 is #OIL  Cargo cannister
 129+ 9CC2              ;;;;00 00			 EQUW 0     \ type  6 is       Boulder
 130+ 9CC2              ;;;;00 00			 EQUW 0     \ type  7 is #AST  Asteroid
 131+ 9CC2              ;;;;00 00			 EQUW 0     \ type  8 is #SPL  Splinter, rock.
 132+ 9CC2              ;;;;00 00			 EQUW 0     \ type  9 is #SHU  Shuttle
 133+ 9CC2              ;;;;00 00			 EQUW 0     \ type 10 is       Transporter
 134+ 9CC2              ;;;;00 00			 EQUW 0     \ type 11 is #CYL  Cobra Mk III,  Boa
 135+ 9CC2              ;;;;00 00			 EQUW 0     \ type 12 is       Python
 136+ 9CC2              ;;;;00 00			 EQUW 0     \ type 13 is       Last of three traders
 137+ 9CC2              ;;;;00 00			 EQUW 0     \ type 14 is #ANA  Anaconda
 138+ 9CC2              ;;;;00 00			 EQUW 0     \ type 15 is #WRM  Worm with Anaconda
 139+ 9CC2              ;;;;00 00			 EQUW 0     \ type 16 is #COP  Viper
 140+ 9CC2              ;;;;00 00			 EQUW 0     \ type 17 is       First pirate
 141+ 9CC2              ;;;;00 00			 EQUW 0     \ type 18 is
 142+ 9CC2              ;;;;00 00			 EQUW 0     \ type 19 is #KRA  Krait small pirate
 143+ 9CC2              ;;;;00 00			 EQUW 0     \ type 20 is #ADA  Adder
 144+ 9CC2              ;;;;00 00			 EQUW 0     \ type 21 is
 145+ 9CC2              ;;;;00 00			 EQUW 0     \ type 22 is
 146+ 9CC2              ;;;;00 00			 EQUW 0     \ type 23 is
 147+ 9CC2              ;;;;00 00			 EQUW 0     \ type 24 is #CYL2 Last strong pirate
 148+ 9CC2              ;;;;00 00			 EQUW 0     \ type 25 is #ASP  Asp Mk II
 149+ 9CC2              ;;;;00 00			 EQUW 0     \ type 26 is #FER  Fer de Lance
 150+ 9CC2              ;;;;00 00			 EQUW 0     \ type 27 is
 151+ 9CC2              ;;;;00 00			 EQUW 0     \ type 28 is	Last of three bounty hunters
 152+ 9CC2              ;;;;00 00			 EQUW 0     \ type 29 is #THG  Thargoid
 153+ 9CC2              ;;;;00 00			 EQUW 0     \ type 30 is #TGL  Thargon
 154+ 9CC2              ;;;;00 00			 EQUW 0     \ type 31 is #CON  Constrictor
 155+ 9CC2              ;;;;	.E%	\ -> &563E \ Hull NEWB bits are escpod, cop, inno, ?, pirate, angry, hunter, trader.
 156+ 9CC2              ;;;;			\ NEWB examples
 157+ 9CC2              ;;;;\ 21			EQUB &21    \ 0010 0001    9 Shuttle has no escape pod, inno, trader.
 158+ 9CC2              ;;;;\ 61			EQUB &61    \ 0110 0001   10 Tansporter no escape pod, Cop, inno, trader.
 159+ 9CC2              ;;;;\ A0			EQUB &A0    \ 1010 0000   11 Cobra has Escape pod, inno, not a trader.
 160+ 9CC2              ;;;;\ C2			EQUB &C2    \ 1100 0010   16 Viper has Escape pod, Cop, hunter.
 161+ 9CC2              ;;;;\ 8C			EQUB &8C    \ 1000 1100   19 Krait pirate has escape pod, is pirate and angry.
 162+ 9CC2
# file closed: ./Variables/constant_equates.asm
 639  9CC2                  INCLUDE "./Variables/general_variables.asm"
# file opened: ./Variables/general_variables.asm
   1+ 9CC2
   2+ 9CC2
   3+ 9CC2 00 00        varAxis1	DW 	0				; address of first axis in a rotation action
   4+ 9CC4 00 00        varAxis2	DW	0				; address of 2nd axis in a roation action
   5+ 9CC6              ; Variables to simulate 6502 registers until code fixed
   6+ 9CC6              ; These must be here in this order as reading Y and X can then be a 16 bit read
   7+ 9CC6 00           regX		DB	0               ; using 16 bit read into BC this would go into C
   8+ 9CC7 00           regY		DB	0               ; using 16 bit read into BC this would go into B
   9+ 9CC8 00           regA		DB	0
  10+ 9CC9
  11+ 9CC9
  12+ 9CC9 00           varGPLoopA	DB	0				; General Purpose innermost loop variable
  13+ 9CCA 00 00        INF			DW	0				; page 0 &20 Used to get address from UNIV array
  14+ 9CCC 00 00        INF28		DW	0				; page 0 &20 Used to get address from UNIV array
  15+ 9CCE
  16+ 9CCE
  17+ 9CCE
  18+ 9CCE              ;XX16		DS	16				; 16 byte Matrix
  19+ 9CCE
  20+ 9CCE              P0INWK							; page 0 & 46
  21+ 9CCE              p0INWK31						; page 0 & 65
  22+ 9CCE              P0INWK36						; PAGE 0 &6A
  23+ 9CCE
  24+ 9CCE 00           XX4			DB	0				; XX4 page 0 &96 last Normal Found to be visible
  25+ 9CCF              LastNormalVisible	equ	XX4
  26+ 9CCF              varXX4              equ XX4
  27+ 9CCF
  28+ 9CCF
  29+ 9CCF
  30+ 9CCF 00           PATG		DB	0				; 6502 &03C9
  31+ 9CD0 00 00        SLSP 		DW	0				; &03B0 \ SLSP \ ship lines pointer
  32+ 9CD2
  33+ 9CD2
  34+ 9CD2              ;UNIV		DS FreeListSize*2	; Array of Universe Pointers
  35+ 9CD2              ;HULLINDEX	DS ShipTypeSize*2	; hull index for table at XX21= &5600 XX21-1,Y
  36+ 9CD2
  37+ 9CD2              ; Present System Variables
  38+ 9CD2
  39+ 9CD2 2B           RandomSeed				DB	43			    ; 00 DEBUG JUST SOME START VALUES
  40+ 9CD3 20           RandomSeed1				DB	32	            ; 01
  41+ 9CD4 0C           RandomSeed2				DB	12			    ; 02
  42+ 9CD5 42           RandomSeed3				DB	66			    ; 03
  43+ 9CD6 00 00 00 00  RandomSeedSave          DS  4               ; used in explosion routine to save randoms
  44+ 9CDA 00           varT1					DB	0				; 06
  45+ 9CDB 00           SClo					DB 0				; 07
  46+ 9CDC 00           SChi					DB 0				; 08
  47+ 9CDD 00           varP					DB 0 				; 10	XX16+7
  48+ 9CDE 00           varPhi					DB 0 				; 11	XX16+8
  49+ 9CDF 00           varPhi2					DB 0 				; 12	XX16+9
  50+ 9CE0              varPp1                  equ varPhi
  51+ 9CE0              varPp2                  equ varPhi2
  52+ 9CE0 00           UnivPointerLo			DB	0				; 20		INF                 XX0+2
  53+ 9CE1 00           UnivPointerHi			DB	0				; 21      INF+1               XX0+3
  54+ 9CE2              UnivPointer				equ	UnivPointerLo
  55+ 9CE2 00           varV					DB 0				; 22                          XX0+4
  56+ 9CE3 00           varVHi					DB 0				; 23                          XX0+5
  57+ 9CE4 00           varXXlo                 DB 0                ; 24
  58+ 9CE5 00           varXXHi                 DB 0                ; 25
  59+ 9CE6              varXX					equ	varXXlo
  60+ 9CE6 00           YYlo                    DB 0                ; 26
  61+ 9CE7 00           YYHi                    DB 0                ; 27
  62+ 9CE8              varYY					equ	YYlo
  63+ 9CE8              											;	28
  64+ 9CE8              											;	29
  65+ 9CE8              ;PlayerShipPositionData - Must be contiguous for setup
  66+ 9CE8 00           BETA 					DB	0               ; 2A        (pitch done)
  67+ 9CE9 00           JSTY                    DB  0               ; Joystick analog
  68+ 9CEA 00           BET1 					DB	0               ; 2B        lower7 magnitude
  69+ 9CEB 00           BET2                    DB  0               ;            climb sign
  70+ 9CEC 00           BET2FLIP				DB	0				; 7C		BET 2 pitch Sign negated
  71+ 9CED 1F           BET1MAXC                DB  31              ; max climb
  72+ 9CEE E1           BET1MAXD                DB  -31             ; max dive
  73+ 9CEF 00           XC						DB	0               ; 2C
  74+ 9CF0 00           YC						DB 	0               ; 2D
  75+ 9CF1              ;... ECM logic. If another ship adds ECM then we just set the loop A and B to starting values so they overlap
  76+ 9CF1 00           ECMCountDown            DB  0
  77+ 9CF2 00           ECMLoopB                DB  0
  78+ 9CF3 00 00        JSTX                    DW  0               ;           Joystick analog value
  79+ 9CF5 00           ALPHA					DB	0				; 8D        Alpha with bit 7 sign
  80+ 9CF6 00           ALP1					DB 	0				; 31		ALP1	Roll magnitude Also Apha
  81+ 9CF7 00           ALP2					DB  0				; 32		ALP2	Roll Sign
  82+ 9CF8 00           ALP2FLIP				DB  0				; 33		ALP2	negated roll sign
  83+ 9CF9 1F           ALP1MAXR                DB  31               ;   Maximum roll, added becuase we may allow different ship types
  84+ 9CFA E1           ALP1MAXL                DB  -31             ;   Maximum roll, added becuase we may allow different ship types
  85+ 9CFB
  86+ 9CFB
  87+ 9CFB
  88+ 9CFB              MAXMESSAGES             EQU 5
  89+ 9CFB              MESSAGETIMELIMIT        EQU 20
  90+ 9CFB              MESSAGESIZE             EQU 33
  91+ 9CFB              MESSAGELINE             EQU $0001
  92+ 9CFB
  93+ 9CFB 00           MessageCount            DB  0                ; used for enquing messages later
  94+ 9CFC 00           MessageCurrent          DB  0
  95+ 9CFD 05 00        MessageIndex            DW  MAXMESSAGES
  96+ 9CFF 00 00 00...  MessageQueue            DS  MAXMESSAGES * MESSAGESIZE
  97+ 9DA4 05           MessageTimeout          DB  MAXMESSAGES
  98+ 9DA5 00 00 00...  IndexedWork				DS	37				; General purpose work space when doing temp arrays
  99+ 9DCA
 100+ 9DCA              ; MOVED TO Universe XX19					DB	0				; page 0 &67
 101+ 9DCA              ; MOVED TO Universe XX20					DB	0				; page 0 &67 also used as XX19+1 for XX19 being a word
 102+ 9DCA              ;DEFUNCT EQUATE NormalCountCopyBy4		equ	XX20			; Also used for normal * 4 holding variable
 103+ 9DCA 00           XX21					DB  0				; this may be part of XX20/xx21 accordign to spawn new shipXX21		DW	0				; Ah XX21 is hull pointer  hull pointer lo as it can;t hold HULLINDX as 16bit array
 104+ 9DCB              ;XX21 is the pointer table to the pages for ship types. this will be repalaced by paging so just need an equate for first page
 105+ 9DCB
 106+ 9DCB
 107+ 9DCB 00 00 00...  SystemSeed				DS  5				;	6C		QQ15	Current Galaxy Seed
 108+ 9DD0              											;	6D		QQ15+1
 109+ 9DD0              											;	6E		QQ15+2
 110+ 9DD0              											;	6F		QQ15+3
 111+ 9DD0              											;	70		QQ15+4
 112+ 9DD0              											;	71		QQ15+5
 113+ 9DD0 00           QQ17					DB	0				;   72
 114+ 9DD1 00           XX18xlo                 DB  0               ;	72		XX18   xlo
 115+ 9DD2 00           XX18xhi                 DB  0               ;	73		XX18+1 xhi
 116+ 9DD3 00           XX18xsg                 DB  0               ;	74		XX18+2 xsgn
 117+ 9DD4 00           XX18ylo                 DB  0               ;	75		XX18   ylo
 118+ 9DD5 00           XX18yhi                 DB  0               ;	76		XX18+1 yhi
 119+ 9DD6 00           XX18ysg                 DB  0               ;	77		XX18+2 ysgn
 120+ 9DD7 00           XX18zlo                 DB  0               ;	78		XX18   zlo
 121+ 9DD8 00           XX18zhi                 DB  0               ;	79		XX18+1 zhi
 122+ 9DD9 00           XX18zsg                 DB  0               ;	7A		XX18+2 zsgn
 123+ 9DDA
 124+ 9DDA 28           SHIPMAXSPEED            DB  40              ; variable to facilitate ship editing later
 125+ 9DDB 00           DELTA					DB 	0				; 7D 		DELTA  \ bpl -2 inserted here to stall from title code if byte check fails
 126+ 9DDC 00           DELT4Lo					DB 	0				; 7E
 127+ 9DDD 00           DELT4Hi					DB 	0				; 7F
 128+ 9DDE              DELTA4                  equ                 DELT4Lo
 129+ 9DDE
 130+ 9DDE
 131+ 9DDE              ; Not thise must be in this order else 16 bit fetches will fail
 132+ 9DDE 00           varU                    DB  0               ;   80
 133+ 9DDF 00           varQ					DB  0 				;	81
 134+ 9DE0 00           varR					DB  0 				;	82
 135+ 9DE1 00           varS					DB  0 				;	83
 136+ 9DE2              varRS                   equ varR
 137+ 9DE2
 138+ 9DE2 00 00        varU16                  DW  0               ; 16 bit variant on varU as I can't use above for this
 139+ 9DE4
 140+ 9DE4 00           XSAV					DB	0				; 84	   XSAV usef for nearby ship count outer
 141+ 9DE5 00           YSAV                    DB  0               ; 85
 142+ 9DE6 00           XX17					DB	0				; 86
 143+ 9DE7              RequiredScale			equ  XX17			; use to hold calculated scale in drawing ship
 144+ 9DE7              varXX17                 equ  XX17
 145+ 9DE7 00           ScreenChanged           DB  0
 146+ 9DE8 00           ScreenIndex             DB  0
 147+ 9DE9 00           InvertedYAxis           DB  0
 148+ 9DEA 00           MenuIdMax				DB	0				;	87		MenuIdMax		QQ11
 149+ 9DEB              											; Bit 7 Set  ShortRangeChart    $80
 150+ 9DEB              											; Bit 6 Set  Galactic Chart     $40
 151+ 9DEB              											; Bit 5 Set  Market Place       $20
 152+ 9DEB              											; Bit 4 Set  Status Screen      $10
 153+ 9DEB              											; Bit 3 Set  Display Inventory  $08
 154+ 9DEB                                                          ; Bit 2 Set  Planet Data        $04
 155+ 9DEB                                                          ; View bit combinations if the ones above not matched
 156+ 9DEB                                                          ; bits 1 0
 157+ 9DEB                                                          ;      1 1  Front view , i.e. $03
 158+ 9DEB                                                          ;      1 0  Aft View          $02
 159+ 9DEB                                                          ;      0 1  Left View         $01
 160+ 9DEB                                                          ;      0 0  Right view        $00
 161+ 9DEB              											; Bit 0 Set  Data On System
 162+ 9DEB              											; 0  Space View (Not a menu)
 163+ 9DEB 00           ZZDust					DB	0				;	88		ZZDust (Poss 16 bit need to check)
 164+ 9DEC 00           XX13                    DB  0               ;   89
 165+ 9DED 00           TYPE					DB	0				; 8C used for ship type in drawing
 166+ 9DEE              ;Docked flag = 00 = in free space
 167+ 9DEE              ;              FF = Docked
 168+ 9DEE              ;              FE = transition
 169+ 9DEE              ;              FD = Setup open space and transition to not docked
 170+ 9DEE              ;              FC = Hyperspace manimation
 171+ 9DEE              ;              FB = Hyperspace complete
 172+ 9DEE 00           DockedFlag				DB	0				; 8E -
 173+ 9DEF 00           GamePaused              DB  0
 174+ 9DF0 00           varSWAP                 DB  0               ; 90 , general purpose swap variable
 175+ 9DF1 00           varCNT                  DB  0               ; 93
 176+ 9DF2
 177+ 9DF2 00           varK					DB	0				; 40
 178+ 9DF3 00           varKp1					DB	0				; 41
 179+ 9DF4 00           varKp2					DB	0				; 42
 180+ 9DF5 00           varKp3					DB	0				; 43
 181+ 9DF6
 182+ 9DF6 00           varK2                   DB  0               ; 9B
 183+ 9DF7 00           varK2p1                 DB  0               ; 9C K2 plus 1
 184+ 9DF8 00           varK2p2                 DB  0               ; 9D K2 plus 2
 185+ 9DF9 00           varK2p3                 DB  0               ; 9E K2 plus 3
 186+ 9DFA
 187+ 9DFA 00           Point                   DB  0               ; 9F      POINT
 188+ 9DFB
 189+ 9DFB 00           varT					DB	0				; D1
 190+ 9DFC
 191+ 9DFC 00 00 00...  varVector9ByteWork      DS  9
 192+ 9E05
 193+ 9E05 00 00 00 00  varK3					DS	4				; D2
 194+ 9E09 00           varK3p2					DB	0				; 42
 195+ 9E0A 00           varK3p3					DB	0				; 43
 196+ 9E0B              varK3p1					equ varK3+1			; D3
 197+ 9E0B 00 00 00 00  varK4					DS	4				; E0
 198+ 9E0F              varK4p1					equ varK4+1			; D3
 199+ 9E0F
 200+ 9E0F
 201+ 9E0F              ;Heap
 202+ 9E0F
 203+ 9E0F 00 00        HeapStart				DS	2				; &0100 XX3 50 bytes for now
 204+ 9E11 00 00 00...  HeapData				DS	50
 205+ 9E43              ; Contains 				X 16 bit, Y ;MissileArmedStatus		DB	0				; 0344 MSAR   using MissileTarget, if missile is not armed tehn target is FF
 206+ 9E43              ; TODO will need an read for a list of missiles, who they are targeting an the target current vector for AI persuit
 207+ 9E43              ; i.e. a list of programmed missiles in universe slot list code
 208+ 9E43 00 00 00...  DampingKeys				DS  7				; 0387 - 038D
 209+ 9E4A              ;  #&6 Does K toggle keyboard/joystick control -  03CD certainly makes keyboard not work anymore.
 210+ 9E4A              ;  #&5 Does J reverse both joystick channels
 211+ 9E4A              ;  #&4 Does Y reverse joystick Y channel			03CB
 212+ 9E4A              ;  #&2 Does X toggle startup message display ? PATG?	03C9
 213+ 9E4A              ;  #&3 Does F toggle flashing information			03CA
 214+ 9E4A              ;  #&1 Does A toggle keyboard auto-recentering ?
 215+ 9E4A              ;  #&0 Caps-lock toggles keyboard flight damping
 216+ 9E4A 00           NbrMissiles				DB	0				; 038B	Does this clash with Dampingkeys?
 217+ 9E4B 00           FugitiveInnocentStatus	DB	0				; 038C	FIST
 218+ 9E4C 00 00 00...  StockAvaliabiliy		DS 	16				; 038D - 039C Stock inventory in station
 219+ 9E5C 00           AlienItemsAvaliability  DB	0				; 039D
 220+ 9E5D 00           RandomMarketSeed		DB	0				; 039E   \ QQ26	\ random byte for each system vist (for market)
 221+ 9E5E 00 00        KillTally  				DW	0				; 039F - 03A0 \ TALLY   \ kills lo hi
 222+ 9E60 00           COMP     				DB	0				; 03A1 2nd competion byte used for save integrity checks?
 223+ 9E61              											;
 224+ 9E61 00           MCH						DB	0				; 03A4  \ MCH  \ old message to erase
 225+ 9E62 00           MarketPrice				DB	0				; 03AA QQ24
 226+ 9E63 00           MaxStockAvaliable		DB  0				; 03AB   \ QQ25     \ max available
 227+ 9E64 00           SystemEconomy			DB  0				; 03AC \ QQ28   \ the economy byte of present system (0 is Rich Ind.)
 228+ 9E65 00           CargoItem				DB	0				; 03AD (I think its item type just scooped) QQ29
 229+ 9E66 00 00        ShipLineStackPointer	DW	0				; 03B0 & 03B1 ship Lines pointer reset to top LS% = &0CFF (make DW for z80 and direct hl pointer)
 230+ 9E68              											; this is ship lines stack pointer so may be redundant with paging
 231+ 9E68              											; LS = line stack so we will have one for now to remove later
 232+ 9E68 00           COK						DB	0				; 0366 Competition Byte what ? Does some file check and accelleration check
 233+ 9E69 00           DisplayEcononmy			DB	0				; 03B8
 234+ 9E6A 00           DisplayGovernment		DB  0				; 03B9 Is it target? 03B9 \ QQ4	 \ Government, 0 is Anarchy.
 235+ 9E6B 00           DisplayTekLevel			DB	0				; 03BA   \ QQ5	\ Tech
 236+ 9E6C 00 00        DisplayPopulation		DW	0				; 03BB \ QQ6  \ population*10
 237+ 9E6E 00 00        DisplayProductivity		DW	0				; 03BD \ QQ7   \ productivity*10
 238+ 9E70 00 00        Distance          		DW	0				; 03BE \ QQ8 distince in 0.1LY units
 239+ 9E72 00 00        DisplayRadius			DW	0
 240+ 9E74              ; --- Used in creation of sun and planet----;
 241+ 9E74 00           PlanetXPos              DS  1
 242+ 9E75 00           PlanetYPos              DS  1
 243+ 9E76 00           PlanetZPos              DS  1
 244+ 9E77 00           PlanetType              DS  1
 245+ 9E78 00           SunXPos                 DS  1
 246+ 9E79 00           SunYPos                 DS  1
 247+ 9E7A 00           SunZPos                 DS  1
 248+ 9E7B              ; -- Current Missile Runbtime data
 249+ 9E7B 00           CurrentMissileBank:     DB      0                                   ; used by missile logic as local copy of missile bank number
 250+ 9E7C 00 00        MissileXPos             DW      0
 251+ 9E7E 00           MissileXSgn             DB      0
 252+ 9E7F 00 00        MissileYPos             DW      0
 253+ 9E81 00           MissileYSgn             DB      0
 254+ 9E82 00 00        MissileZPos             DW      0
 255+ 9E84 00           MissileZSgn             DB      0
 256+ 9E85 00 00        CurrentTargetXpos       DS      2
 257+ 9E87 00 00        CurrentTargetXsgn       DS      2
 258+ 9E89 00 00        CurrentTargetYpos       DS      2
 259+ 9E8B 00 00        CurrentTargetYsgn       DS      2
 260+ 9E8D 00 00        CurrentTargetZpos       DS      2
 261+ 9E8F 00 00        CurrentTargetZsgn       DS      2
 262+ 9E91 00 00        TargetVectorXpos        DS      2
 263+ 9E93 00 00        TargetVectorXsgn        DS      2
 264+ 9E95 00 00        TargetVectorYpos        DS      2
 265+ 9E97 00 00        TargetVectorYsgn        DS      2
 266+ 9E99 00 00        TargetVectorZpos        DS      2
 267+ 9E9B 00 00        TargetVectorZsgn        DS      2
 268+ 9E9D 00           CurrentMissileBlastRange:      DB  0                       ; TODO Initi for runtime copied in when setting up a missile
 269+ 9E9E 00           CurrentMissileBlastDamage:     DB  0                       ; TODO Initi for runtime copied in when setting up a missile
 270+ 9E9F 00           CurrentMissileDetonateRange:   DB  0                       ; TODO Initi for runtime copied in when setting up a missile, allows for proximity missiles
 271+ 9EA0 00           CurrentMissileDetonateDamage:  DB  0                       ; TODO Initi for runtime copied in when setting up a missile
 272+ 9EA1
 273+ 9EA1              ; --- Main Loop Data -----------------------;
 274+ 9EA1 00           CurrentUniverseAI       DB  0               ; current ship unviverse slot due an AI update
 275+ 9EA2 00           SelectedUniverseSlot    DB  0
 276+ 9EA3 00           SetStationAngryFlag     DB  0               ; used to semaphore angry space station
 277+ 9EA4 00           ShipBlastCheckCounter   DB  0
 278+ 9EA5 00           InnerHyperCount			DB 	0				; 2F QQ22+1
 279+ 9EA6 00           OuterHyperCount			DB 	0				; 2E QQ22
 280+ 9EA7 00           EventCounter            DB  0
 281+ 9EA8 00           HyperCircle             DB  0
 282+ 9EA9 00           MissJumpFlag            DB  0
 283+ 9EAA 00           PlayerMisJump			DB	0				; $0341 witchspace misjump
 284+ 9EAB 00           HyperSpaceFX			DB	0				; 0348 HFX (probabyl BBC specific
 285+ 9EAC 00           ExtraVessels			DB	0				; 0349 EV Use d by cops, extra vessels still to spawn?
 286+ 9EAD 00           Delay					DB	0				; 034A Delay general purpose eg. spawing EV or when printign messages
 287+ 9EAE 00           CurrentMissileCheck:    DB  0               ; if > Universe Slot list then free for next missile
 288+ 9EAF 00           MessageForDestroyed		DB	0				; 034B Message flag for item + destroyed
 289+ 9EB0              UniverseSlotListSize    equ	12
 290+ 9EB0 00 00 00...  UniverseSlotList        DS  UniverseSlotListSize
 291+ 9EBC 00 00 00...  UniverseSlotType        DS  UniverseSlotListSize ; base type, e.g. missile, cargo etc,
 292+ 9EC8              ; Probably not needed UniverseTypeCount       DS  UniverseSlotListSize
 293+ 9EC8 05           ConsoleRefreshCounter   DB  ConsoleRefreshInterval ; Every 4 interations the console will update twice (once for primary and once for seconday buffer)
 294+ 9EC9 00           ConsoleRedrawFlag       DB  0
 295+ 9ECA 00           TextInputMode           DB  0
 296+ 9ECB 00           CursorKeysPressed       DB  0               ; mapping of the current key presses
 297+ 9ECC                                                          ; 7    6    5    4     3    2        1    0
 298+ 9ECC                                                          ; Up   Down Left Right Home Recentre
 299+ 9ECC 00           FireLaserPressed        DB  0
 300+ 9ECD              ; --- Current System Data ------------------;
 301+ 9ECD 00           SpaceStationSafeZone    DB  0               ; Flag to determine if we are in safe zone
 302+ 9ECE 00           ExtraVesselsCounter     DB  0
 303+ 9ECF 00           JunkCount				DB  0				; $033E
 304+ 9ED0 00           AsteroidCount           DB  0               ; Not used as yet
 305+ 9ED1 00           TransporterCount        DB  0
 306+ 9ED2 00           CopCount                DB  0
 307+ 9ED3 00           PirateCount             DB  0
 308+ 9ED4              ; --- Galaxy Data --------------------------;
 309+ 9ED4 00           Galaxy      			DB	0				; 0367 Galaxy (incremented with galactiv drive
 310+ 9ED5 00 00 00...  WorkingSeeds			DS	6
 311+ 9EDB 00 00 00...  PresentSystemSeeds		DS	6				; 03B2 - 03B7
 312+ 9EE1 00 00 00...  GalaxySeeds				DS	6				; 035B - 0360 QQ21
 313+ 9EE7 00           PresentSystemX			DB	0				; System we are currently in
 314+ 9EE8 00           PresentSystemY			DB  0				; System we are currently in
 315+ 9EE9 00           TargetSystemX			DB	0				; System we are targeting for jump
 316+ 9EEA 00           TargetSystemY			DB	0				; System we are targeting for jump
 317+ 9EEB 00           GovPresentSystem		DB	0				; 03AE Govenment
 318+ 9EEC 00           TekPresentSystem		DB	0				; 03AF Technology
 319+ 9EED
 320+ 9EED 00           CompassColor			DB	0				; 03C5
 321+ 9EEE 00           SoundToggle				DB	0				; 03C6
 322+ 9EEF 00           KeyboardRecenterToggle	DB	0				; 03C8
 323+ 9EF0 00           PATGMask				DB	0				; &03C9    \ PATG	\ Mask to scan keyboard X-key, for misjump
 324+ 9EF1 00           FlashToggle				DB  0				; 03CA \ FLH \ flash toggle
 325+ 9EF2 00           ReverseJoystick			DB	0				; 03CB \ JSTGY \ Y reverse joystick Y channel
 326+ 9EF3 00           JoystickToggle			DB	0				; 03CD  \ JSTK    \ K toggle keyboard/joystick
 327+ 9EF4 00           DigitalJoystick			DB	0				; 03CE \ JDB   \ . = toggle between keyboard and bitpaddle
 328+ 9EF5 00           DiskReadFailFlag		DB	0				; 03CF \ CATF \ Disk catalog fail flag
 329+ 9EF6
 330+ 9EF6              ; Working Data
 331+ 9EF6
 332+ 9EF6              ;UniverseTable			DS	26				; 1741  \ address pointers for 13 ships INF on pages &9. 37 bytes each.
 333+ 9EF6              ; $0900 =	EQUW page9+37* 0 \ copied to inner worskpace INWK on zero-page when needed
 334+ 9EF6              ; $0925 =	EQUW page9+37* 1
 335+ 9EF6              ; $094A =	EQUW page9+37* 2
 336+ 9EF6              ; $096F =	EQUW page9+37* 3
 337+ 9EF6              ; $0994 =	EQUW page9+37* 4
 338+ 9EF6              ; $09B9 =	EQUW page9+37* 5
 339+ 9EF6              ; $09DE =	EQUW page9+37* 6
 340+ 9EF6              ; $0A03 =	EQUW page9+37* 7
 341+ 9EF6              ; $0A28 =	EQUW page9+37* 8
 342+ 9EF6              ; $0A4D =	EQUW page9+37* 9
 343+ 9EF6              ; $0A72 =	EQUW page9+37*10
 344+ 9EF6              ; $0A97 =	EQUW page9+37*11
 345+ 9EF6              ; $0ABC =	EQUW page9+37*12 \ allwk up to &0ABC while heap for edges working down from &CFF.
 346+ 9EF6
 347+ 9EF6
 348+ 9EF6
 349+ 9EF6              ; 0b00 is start address of data to save
 350+ 9EF6              ; Now MissionData VarTP					DB	0				; 0358 TP? The Plan  \ mission uses lower 4 bits
 351+ 9EF6              											; Bit mask XXXX10XX - Thargoid plan mission
 352+ 9EF6
 353+ 9EF6 00           MissionData				DB	0				; &0B00	  \ look at data, first byte is TP mission bits
 354+ 9EF7
 355+ 9EF7 00 00        FileNameStringPointer	DW	0				;0C00	   \ pointer to filename string
 356+ 9EF9 00 00        CommanderLoadAddress	DW	0				;0C03
 357+ 9EFB 00 00        LengthOfFile			DW	0				;0C0B
 358+ 9EFD 00 00        SaveDataEndAddress		DW	0				;&0C0F	      \ &0C00 is end address of data to save
 359+ 9EFF
 360+ 9EFF 00 00 00...  EdgesBuffer				DS 50
 361+ 9F31              EdgesBufferSP			equ	$				; Was $0CFF			; Heap pointer for edges buffer
 362+ 9F31              ShipLinesBufferSP		equ EdgesBufferSP	; was $0CFF
 363+ 9F31
 364+ 9F31 00 00 00...  ShipLineStack			DS  70			; For now but will be in the page later
 365+ 9F77              ShipLineStackTop		equ $ - ShipLineStack
 366+ 9F77
 367+ 9F77 00 00 00...  LSO						DS 	$C0				;0E00 Line Buffer Solar of 192 lines (may be 191 in reality)
 368+ A037              ; LSX vector overlaps with LSO
 369+ A037 00           LSX2					DB	0				; &0EC0	    \ LSX2 bline buffer size?
 370+ A038 00           LSY2					DB	0           	; &0F0E	    \ LSY2
 371+ A039
 372+ A039              ; Star Positions are 16 bit 3d coordinates
 373+ A039 00 00 00...  varDust                 DS  MaxNumberOfStars * 6
 374+ A07B 00 00 00...  varDustSceen            DS  MaxNumberOfStars * 2 ; To optimise star list to wipe from screen
 375+ A091 00           varStarX                DB  0
 376+ A092 00           varStarY                DB  0
 377+ A093 00 00 00...  varDustX                DS MaxNumberOfStars *2
 378+ A0A9 00 00 00...  varDustY                DS MaxNumberOfStars *2
 379+ A0BF 00 00 00...  varDustZ                DS MaxNumberOfStars *2
 380+ A0D5              ; -- Player Runtime Data
 381+ A0D5 00           GunTemperature          DB  0
 382+ A0D6 00           CabinTemperature        DB  0
 383+ A0D7 00           PlayerForwardSheild0	DB	0 ; ?????
 384+ A0D8 00           PlayerForwardSheild1    DB	0
 385+ A0D9 00           PlayerForwardSheild2    DB	0
 386+ A0DA 00           ForeShield				DB	0				; These three must be contiguous
 387+ A0DB 00           AftShield				DB	0				; .
 388+ A0DC 00           PlayerEnergy			DB	0				; and in this order
 389+ A0DD 00           CompassX				DB	0				; 03A8
 390+ A0DE 00           CompassY				DB	0				; 03A9
 391+ A0DF              ; Simplification of missile targetting
 392+ A0DF              ; $FF no missile targettting enabled
 393+ A0DF              ; $FE missile targetting, no target selected
 394+ A0DF              ; bit 7 set then tagetting and lower nibble holds missile target and launching
 395+ A0DF              ; bit 7 clear launch at selected target in lower nibble
 396+ A0DF 00           MissileTargettingFlag   DB  0
 397+ A0E0              ;;MissileTarget			DB  0				; 45
 398+ A0E0              ;;MissileLaunchFlag       DB  0
 399+ A0E0 00 00 00...  CommanderName           DS  15
 400+ A0EF 00           CommanderName0			DB	0				; Sneaky little 0 to allow use of print name directly
 401+ A0F0 00           BadnessStatus           DB  0
 402+ A0F1              ;note rapidly changing views could reset these so need to consider it in an array
 403+ A0F1              ; LaserType
 404+ A0F1              ; LaserPulseRate                          ; how many pulses can be fired before long pause
 405+ A0F1              ; LaserPulsePause                         ; time before next pulse - 0 = beam
 406+ A0F1              ; LaserPulseRest                          ; time before pulse count resets to 0
 407+ A0F1              ; LaserDamageOutput                       ; amount of damage for a laser hit
 408+ A0F1              ; LaserEnergyDrain                        ; amount of energy drained by cycle
 409+ A0F1              ; LaserHeat                               ; amount of heat generated
 410+ A0F1              ; LaserDurability                         ; probabability out of 255 that a hit on unshielded will add random amount of damage
 411+ A0F1              ; LaserDurabilityAmount                   ; max amount of damagage can be sustained in one damage hit
 412+ A0F1              ; LaserInMarkets                          ; can this laser be purchased 0 = yes 1 = no
 413+ A0F1              ; LaserTechLevel                          ; minimum tech level system to buy from
 414+ A0F1              ; need to add copy table routines
 415+ A0F1 00           CurrLaserType           DB  0               ; current view laser type, copied in from LaserType array
 416+ A0F2 00           CurrLaserDamage         DB  0               ; copied in from LaserDamagedFlag array
 417+ A0F3 00           CurrLaserPulseRate      DB  0               ; current view laser amount of pulses
 418+ A0F4 00           CurrLaserPulseOnTime    DB  0               ; how many cycles the laser is on
 419+ A0F5 00           CurrLaserPulseOffTime   DB  0               ; how many cycles the laser is on
 420+ A0F6 00           CurrLaserPulseRest      DB  0               ; current view laser delay setup between pulses
 421+ A0F7
 422+ A0F7 00           CurrLaserBurstRate      DB  0
 423+ A0F8 00           CurrLaserBurstCount     DB  0
 424+ A0F9 00           CurrLaserDamageOutput   DB  0
 425+ A0FA 00           CurrLaserEnergyDrain    DB  0
 426+ A0FB 00           CurrLaserHeat           DB  0
 427+ A0FC 00           CurrLaserDurability     DB  0
 428+ A0FD 00           CurrLaserDurabilityAmount DB  0
 429+ A0FE
 430+ A0FE              ; Count down timers must be aligned like this to work
 431+ A0FE 00           CurrLaserPulseOnCount   DB  0               ; how many cycles the laser is on timer
 432+ A0FF 00           CurrLaserPulseOffCount  DB  0               ; how many cycles the laser is on timer
 433+ A100 00           CurrLaserPulseRestCount DB  0               ; countdown after shooting for next shot
 434+ A101 00           CurrLaserPulseRateCount DB  0               ; current view laser current pulses fired
 435+ A102
 436+ A102              ; -- Input variables
 437+ A102 00           JoystickX				DB	0				; 034C JSTX
 438+ A103 00           JoystickY				DB	0				; 034D JSTY
 439+ A104 00           XSAV2 					DB	0				; 034E used to temporary save 6502 X reg
 440+ A105 00           YSAV2 					DB	0				; 034F used to temporary save 6502 Y reg
 441+ A106
 442+ A106              ; -- Console drawing data
 443+ A106              FShieldStart            equ $8410
 444+ A106              AShieldStart            equ $8D10
 445+ A106              FuelStart               equ $9410
 446+ A106
 447+ A106              EnergyBar4Start         equ $A5D5
 448+ A106              EnergyBar3Start         equ $ADD5
 449+ A106              EnergyBar2Start         equ $B5D5
 450+ A106              EnergyBar1Start         equ $BDD5
 451+ A106              ; 70 /2 = 35 values
 452+ A106              ;                            0                             1                             2                             3
 453+ A106              ;                            0  1  2  3  4  5  6  7  8  9  0  1  2  3  4  5  6  7  8  9  0  1  2  3  4  5  6  7  8  9  0  1  2  3  4  5  6
 454+ A106 01 02 02 03  FuelMapping             DB  01,02,02,03,04,04,05,06,06,07,08,09,10,10,11,12,13,14,14,15,16,16,17,19,20,21,21,22,23,24,25,26,27,28,30,31,31
 454+ A10A 04 04 05 06
 454+ A10E 06 07 08 09
 454+ A112 0A 0A 0B 0C
 454+ A116 0D 0E 0E 0F
 454+ A11A 10 10 11 13
 454+ A11E 14 15 15 16
 454+ A122 17 18 19 1A
 454+ A126 1B 1C 1E 1F
 454+ A12A 1F
 455+ A12B              SpeedoStart             equ $84D1
 456+ A12B              ;                            0                             1                             2                             3                             4
 457+ A12B              ;                            0  1  2  3  4  5  6  7  8  9  0  1  2  3  4  5  6  7  8  9  0  1  2  3  4  5  6  7  8  9  0  1  2  3  4  5  6  7  8  9  0
 458+ A12B 01 02 02 03  SpeedoMapping           DB  01,02,02,03,04,04,05,06,06,07,08,09,10,10,11,12,13,14,14,15,16,16,17,18,19,20,20,21,22,23,24,24,25,26,26,27,28,28,29,30,31
 458+ A12F 04 04 05 06
 458+ A133 06 07 08 09
 458+ A137 0A 0A 0B 0C
 458+ A13B 0D 0E 0E 0F
 458+ A13F 10 10 11 12
 458+ A143 13 14 14 15
 458+ A147 16 17 18 18
 458+ A14B 19 1A 1A 1B
 458+ A14F 1C 1C 1D 1E
 458+ A153 1F
 459+ A154
 460+ A154              DialMiddleXPos          equ $E1
 461+ A154              RollMiddle              equ $8CE0
 462+ A154              PitchMiddle             equ $94E0
 463+ A154
 464+ A154
 465+ A154
 466+ A154
 467+ A154
# file closed: ./Variables/general_variables.asm
 640  A154                  INCLUDE "./Variables/general_variablesRoutines.asm"
# file opened: ./Variables/general_variablesRoutines.asm
   1+ A154              LaserDrainSystems:      DrainSystem PlayerEnergy, CurrLaserEnergyDrain
   1+ A154 3A FA A0    >                        ld      a,(CurrLaserEnergyDrain)
   1+ A157 47          >                        ld      b,a
   1+ A158 3A DC A0    >                        ld      a,(PlayerEnergy)
   1+ A15B 90          >                        sub     a,b
   1+ A15C 32 DC A0    >                        ld      (PlayerEnergy),a
   1+ A15F 38 03       >                        jr      c,.ZeroSystem
   1+ A161 C3 68 A1    >                        jp      .ExitPoint
   1+ A164             >.ZeroSystem:            ZeroA
   1+ A164 AF          >                        xor a
   1+ A165 32 DC A0    >                        ld      (PlayerEnergy),a
   1+ A168             >.ExitPoint
   2+ A168                                      BoostSystem GunTemperature, CurrLaserHeat
   2+ A168 3A FB A0    >                        ld      a,(CurrLaserHeat)
   2+ A16B 47          >                        ld      b,a
   2+ A16C 3A D5 A0    >                        ld      a,(GunTemperature)
   2+ A16F 80          >                        add     b
   2+ A170 32 D5 A0    >                        ld      (GunTemperature),a
   2+ A173 38 03       >                        jr      c, .MaxSystem
   2+ A175 C3 7D A1    >                        jp      .ExitPoint
   2+ A178 3E FF       >.MaxSystem:             ld      a,255
   2+ A17A 32 D5 A0    >                        ld      (GunTemperature),a
   2+ A17D             >.ExitPoint
   3+ A17D C9                                   ret
   4+ A17E
   5+ A17E
   6+ A17E              ResetPlayerShip:        ZeroThrottle
   6+ A17E AF          >                        xor     a
   6+ A17F 32 DB 9D    >                        ld      (DELTA),a
   6+ A182 32 DC 9D    >                        ld      (DELT4Lo),a
   6+ A185 32 DD 9D    >                        ld      (DELT4Lo+1),a
   7+ A188                                      ZeroPitch
   7+ A188 AF          >                        xor     a
   7+ A189 32 EB 9C    >                        ld      (BET2),a
   7+ A18C 32 EC 9C    >                        ld      (BET2FLIP),a
   7+ A18F 32 E9 9C    >                        ld      (JSTY),a
   7+ A192 32 E8 9C    >                        ld      (BETA),a
   8+ A195                                      ZeroRoll
   8+ A195 AF          >                        xor     a                              ; zero roll and climb
   8+ A196 32 F7 9C    >                        ld      (ALP2),a
   8+ A199 32 F8 9C    >                        ld      (ALP2FLIP),a
   8+ A19C 32 F3 9C    >                        ld      (JSTX),a
   8+ A19F 32 F5 9C    >                        ld      (ALPHA),a
   9+ A1A2                                      ClearMissileTarget
   9+ A1A2 3E FF       >                        ld      a,StageMissileNoTarget
   9+ A1A4 32 DF A0    >                        ld      (MissileTargettingFlag),a           ; reset targetting
  10+ A1A7                                      ClearECM
  10+ A1A7 AF          >                        xor     a
  10+ A1A8 32 F1 9C    >                        ld      (ECMCountDown),a
  11+ A1AB                                      ChargeEnergyAndShields
  11+ A1AB 3E FF       >                        ld      a,$FF
  11+ A1AD 32 DC A0    >                        ld      (PlayerEnergy),a
  11+ A1B0 32 DA A0    >                        ld      (ForeShield),a
  11+ A1B3 32 DB A0    >                        ld      (AftShield),a
  12+ A1B6                                      ClearTemperatures
  12+ A1B6 AF          >                        xor     a
  12+ A1B7 32 D6 A0    >                        ld      (CabinTemperature),a
  12+ A1BA 32 D5 A0    >                        ld      (GunTemperature),a
  13+ A1BD CD 0A A2                             call    IsLaserUseable
  14+ A1C0                                      MMUSelectCommander
  14+ A1C0 ED 91 57 38 >                     nextreg CommanderMMU,       BankCommander
  15+ A1C4 CD F4 E2                             call    LoadLaserToCurrent
  16+ A1C7 C8                                   ret     z
  17+ A1C8
  18+ A1C8 C9                                   ret
  19+ A1C9
  20+ A1C9 21 48 A3     AddCargoTypeD:          ld      hl,CargoTonnes
  21+ A1CC 57                                   ld      d,a
  22+ A1CD ED 31                                add     hl,a
  23+ A1CF 34                                   inc     (hl)
  24+ A1D0 C9                                   ret
  25+ A1D1
  26+ A1D1 7A           CanWeScoopCargoD:       ld      a,d
  27+ A1D2                                      JumpIfAGTENusng  GoldIndex, .ItMayNotBeTonnes  ; if its cargo in kgs or gs then jump
  27+ A1D2 FE 0E       >                        cp     GoldIndex
  27+ A1D4 D2 F6 A1    >                        jp		nc,.ItMayNotBeTonnes
  28+ A1D7 21 48 A3     .ItsTonnes:             ld      hl,CargoTonnes
  29+ A1DA 0E 00                                ld      c,0
  30+ A1DC 06 0E                                ld      b,MineralsIndex+1           ; Only count to Gold as that is in KG
  31+ A1DE 7E           .AddLoop:               ld      a,(hl)
  32+ A1DF 81                                   add     c
  33+ A1E0 4F                                   ld      c,a                     ; add to counter
  34+ A1E1 05                                   dec     b
  35+ A1E2 23                                   inc     hl
  36+ A1E3 10 F9                                djnz    .AddLoop
  37+ A1E5 21 59 A3                             ld      hl,AlienItemsTonnes     ; Finally do alien items
  38+ A1E8 7E                                   ld      a,(hl)
  39+ A1E9 81                                   add     c
  40+ A1EA 4F                                   ld      c,a
  41+ A1EB 3A 46 A3                             ld      a,(CargoBaySize)        ; Get Bay Size
  42+ A1EE                                      JumpIfAEqNusng c, .CargoFull
  42+ A1EE B9          >                        cp     c
  42+ A1EF CA F4 A1    >                        jp      z,.CargoFull
  43+ A1F2              .StillRoom:             ClearCarryFlag
  43+ A1F2 B7          >                        or a
  44+ A1F3 C9                                   ret
  45+ A1F4              .CargoFull:             SetCarryFlag
  45+ A1F4 37          >                        scf
  46+ A1F5 C9                                   ret
  47+ A1F6              .ItMayNotBeTonnes:      JumpIfAEqNusng  AlienItemsIndex,.ItsTonnes       ;ALienItems are tonnes
  47+ A1F6 FE 11       >                        cp     AlienItemsIndex
  47+ A1F8 CA D7 A1    >                        jp      z,.ItsTonnes
  48+ A1FB 21 48 A3                             ld      hl,CargoTonnes
  49+ A1FE 7A                                   ld      a,d
  50+ A1FF ED 31                                add     hl,a
  51+ A201 7E                                   ld      a,(hl)
  52+ A202                                      JumpIfAEqNusng  200, .StillRoom
  52+ A202 FE C8       >                        cp     200
  52+ A204 CA F2 A1    >                        jp      z,.StillRoom
  53+ A207 C3 F4 A1                             jp      .CargoFull
  54+ A20A              ; END of rountine
  55+ A20A
  56+ A20A 3A F1 A0     IsLaserUseable:         ld      a,(CurrLaserType)
  57+ A20D FE FF                                cp      255
  58+ A20F C8                                   ret     z
  59+ A210 3A F2 A0                             ld      a,(CurrLaserDamage)
  60+ A213 FE FF                                cp      255
  61+ A215 C9                                   ret
  62+ A216
  63+ A216 CD B7 A2     InitMainLoop:           call    ClearUnivSlotList
  64+ A219 AF                                   xor     a
  65+ A21A 32 A1 9E                             ld      (CurrentUniverseAI),a
  66+ A21D 32 A3 9E                             ld      (SetStationAngryFlag),a
  67+ A220 3E 03                                ld      a,3
  68+ A222 32 EA 9D                             ld      (MenuIdMax),a
  69+ A225                                      SetMemFalse DockedFlag
  69+ A225 3E FF       >                        ld      a,$FF
  69+ A227 32 EE 9D    >                        ld      (DockedFlag),a
  70+ A22A              ;                        call    InitialiseFrontView
  71+ A22A CD 28 89                             call    InitialiseCommander
  72+ A22D                                      MMUSelectUniverseN 2
  72+ A22D ED 91 56 48 >                     nextreg UniverseMMU,       BankUNIVDATA0+2
  73+ A231 CD 04 8A                             call    SetInitialShipPosition
  74+ A234              ; Initialist screen refresh
  75+ A234 3E 05                                ld      a, ConsoleRefreshInterval
  76+ A236 32 C8 9E                             ld      (ConsoleRefreshCounter),a
  77+ A239                                      SetMemFalse    ConsoleRedrawFlag
  77+ A239 3E FF       >                        ld      a,$FF
  77+ A23B 32 C9 9E    >                        ld      (ConsoleRedrawFlag),a
  78+ A23E                                      MMUSelectStockTable
  78+ A23E ED 91 57 37 >                     nextreg StockTableMMU,     BankStockTable
  79+ A242 CD AA E0                             call    generate_stock_market
  80+ A245 CD BB 91                             call    ResetMessageQueue
  81+ A248                                      InitEventCounter
  81+ A248 AF          >                        xor     a
  81+ A249 32 A7 9E    >                        ld      (EventCounter),a
  82+ A24C                                      ClearMissJump
  82+ A24C 3E FF       >                        ld      a,$FF
  82+ A24E 32 A9 9E    >                        ld      (MissJumpFlag),a
  83+ A251                                      SetMemFalse TextInputMode
  83+ A251 3E FF       >                        ld      a,$FF
  83+ A253 32 CA 9E    >                        ld      (TextInputMode),a
  84+ A256 C9                                   ret
  85+ A257
  86+ A257 3E 00        SetSpeedZero:           ld      a,0
  87+ A259 32 DB 9D                             ld      (DELTA),a                                       ;
  88+ A25C 67                                   ld      h,a                                             ;
  89+ A25D 6F                                   ld      l,a                                             ;
  90+ A25E 22 DC 9D                             ld      (DELT4Lo),hl                                    ;
  91+ A261 C9                                   ret
  92+ A262
  93+ A262 3A DC A0     RechargeShip:           ld      a,(PlayerEnergy)
  94+ A265 CB 7F                                bit     7,a
  95+ A267 28 0D                                jr      z,.UpdatePlayerEnergy
  96+ A269 21 DA A0     .ShieldCharge:          ld      hl,ForeShield
  97+ A26C 34                                   inc     (hl)
  98+ A26D 20 01                                jr      nz,.DoneForeShield
  99+ A26F 35           .ForeOverCharge:        dec     (hl)
 100+ A270 23           .DoneForeShield:        inc     hl                                              ; point to aft shield
 101+ A271 34                                   inc     (hl)
 102+ A272 20 01                                jr      nz,.DoneAftShield
 103+ A274 35                                   dec     (hl)                                            ; back to 255
 104+ A275 23           .DoneAftShield:         inc     hl                                              ; point to energy
 105+ A276 34           .UpdatePlayerEnergy:    inc     (hl)
 106+ A277 28 0A                                jr      z,.OverflowedEnergy
 107+ A279 3A 67 A3                             ld      a,(ExtraEnergyUnit)
 108+ A27C                                      ReturnIfANENusng EquipmentItemFitted                    ; if energy unit fitted an extra step
 108+ A27C FE FF       >                        cp      EquipmentItemFitted
 108+ A27E C0          >                        ret     nz
 109+ A27F 34           .EnergyUnitFitted:      inc     (hl)
 110+ A280 28 01                                jr      z,.OverflowedEnergy
 111+ A282 C9                                   ret
 112+ A283 35           .OverflowedEnergy:      dec     (hl)                                            ;  restore to 255
 113+ A284 C9                                   ret
 114+ A285 21 DC A0     .SkipShieldCharge:      ld      hl,PlayerEnergy
 115+ A288 18 EC                                jr      .UpdatePlayerEnergy
 116+ A28A
 117+ A28A              ; sets carry to true if target
 118+ A28A 3A DF A0     IsMissileLockedOn:      ld      a,(MissileTargettingFlag)
 119+ A28D CB 7F                                bit     7,a
 120+ A28F 28 07                                jr      z, .TargetSelected
 121+ A291 E6 70                                and     $70                         ; are all upper bits set (we can ignore bit 7)
 122+ A293 CA 98 A2                             jp      z, .TargetSelected           ; if its only bit 7 then we have a lock
 123+ A296                                      ClearCarryFlag                      ; if bitsd 6 to 4 were set then it must be unlocked status
 123+ A296 B7          >                        or a
 124+ A297 C9                                   ret
 125+ A298              .TargetSelected:        JumpIfSlotAEmpty .TargetInvalid     ; does slot A have an target
 125+ A298 21 B0 9E    >                        ld      hl,UniverseSlotList
 125+ A29B ED 31       >                        add     hl,a
 125+ A29D 7E          >                        ld      a,(hl)
 125+ A29E 3C          >                        inc     a
 125+ A29F CA A5 A2    >                        jp      z,.TargetInvalid    ; if slot was ff inc would make it 0
 125+ A2A2 3D          >                        dec     a           ; get original value back for later
 126+ A2A3                                      SetCarryFlag
 126+ A2A3 37          >                        scf
 127+ A2A4 C9                                   ret
 128+ A2A5 3E FF        .TargetInvalid:         ld      a, StageMissileNoTarget     ; housekeep missile status if target gone
 129+ A2A7 32 DF A0                             ld      (MissileTargettingFlag),a
 130+ A2AA C9                                   ret
 131+ A2AB
 132+ A2AB              SetMissileTargetting:   MACRO
 133+ A2AB ~                                    SetMemTrue MissileTargettingFlag
 134+ A2AB                                      ENDM
 135+ A2AB
 136+ A2AB              ClearMissileTargetting: MACRO
 137+ A2AB ~                                    SetMemTrue MissileTargettingFlag
 138+ A2AB                                      ENDM
 139+ A2AB
# file closed: ./Variables/general_variablesRoutines.asm
 641  A2AB
 642  A2AB                  INCLUDE "./Variables/UniverseSlotRoutines.asm"
# file opened: ./Variables/UniverseSlotRoutines.asm
   1+ A2AB              ; Note this code is core code and can not be in a memory bank unless do explosion code is changed too
   2+ A2AB AF           ClearSlotCount:         xor     a
   3+ A2AC 21 B0 9E                             ld      hl,UniverseSlotList
   4+ A2AF 06 0C                                ld      b, UniverseSlotListSize ; prbably not needed + UniverseSlotTypeSize
   5+ A2B1 77           .fillLoop:              ld      (hl),a
   6+ A2B2 23                                   inc     hl
   7+ A2B3 10 FC                                djnz    .fillLoop
   8+ A2B5 C9                                   ret
   9+ A2B6
  10+ A2B6              ; Initialises all types to a count of 1 where there is an occupied universe slot
  11+ A2B6              ; this needs expanding to cater for a missing type, find type and increment count (use cpir?)
  12+ A2B6              ; DOE NOT WORK CorrectSlotCount:       call    ClearSlotCount
  13+ A2B6              ; DOE NOT WORK                         ld      hl,UniverseSlotCount
  14+ A2B6              ; DOE NOT WORK                         ld      de,UniverseSlotList
  15+ A2B6              ; DOE NOT WORK                         ld      b,UniverseSlotListSize
  16+ A2B6              ; DOE NOT WORK .fillLoop:              ld      a,(de)
  17+ A2B6              ; DOE NOT WORK                         cp      $FF
  18+ A2B6              ; DOE NOT WORK                         jr      z,.SkipSlot
  19+ A2B6              ; DOE NOT WORK .CorrectSlot:           ld      (hl),a
  20+ A2B6              ; DOE NOT WORK                         inc     hl
  21+ A2B6              ; DOE NOT WORK                         ld      (hl),1
  22+ A2B6              ; DOE NOT WORK                         inc     hl
  23+ A2B6              ; DOE NOT WORK                         inc     hl
  24+ A2B6              ; DOE NOT WORK .SkipSlot               inc     de
  25+ A2B6              ; DOE NOT WORK                         djnz    .fillLoop
  26+ A2B6 C9                                   ret
  27+ A2B7              ; Wipe all items
  28+ A2B7 3E FF        ClearUnivSlotList:      ld      a,$FF
  29+ A2B9 21 B0 9E                             ld      hl,UniverseSlotList
  30+ A2BC 06 18                                ld      b, UniverseSlotListSize * 2
  31+ A2BE 77           .fillLoop:              ld      (hl),a
  32+ A2BF 23                                   inc     hl
  33+ A2C0 10 FC                                djnz    .fillLoop
  34+ A2C2 C9                                   ret
  35+ A2C3
  36+ A2C3 21 B0 9E     SetSlot0ToSpaceStation: ld      hl,UniverseSlotList
  37+ A2C6 36 02                                ld      (hl),ShipTypeStation
  38+ A2C8 21 BC 9E                             ld      hl,UniverseSlotType
  39+ A2CB 36 02                                ld      (hl),ShipTypeStation
  40+ A2CD C9                                   ret
  41+ A2CE
  42+ A2CE 21 B0 9E     SetSlotAToTypeB:        ld      hl,UniverseSlotList
  43+ A2D1 ED 31                                add     hl,a
  44+ A2D3 70                                   ld      (hl),b
  45+ A2D4 C9                                   ret
  46+ A2D5
  47+ A2D5 21 BC 9E     SetSlotAToClassB:       ld      hl,UniverseSlotType
  48+ A2D8 ED 31                                add     hl,a
  49+ A2DA 70                                   ld      (hl),b
  50+ A2DB C9                                   ret
  51+ A2DC
  52+ A2DC              ; Clears all except slot A, used when say restarting a space station post launch
  53+ A2DC 57           ClearFreeSlotListSaveA: ld      d,a
  54+ A2DD 0E 00                                ld      c,0
  55+ A2DF 21 B0 9E                             ld      hl,UniverseSlotList
  56+ A2E2 06 18                                ld      b, UniverseSlotListSize * 2
  57+ A2E4 79           .fillLoop:              ld      a,c
  58+ A2E5 BA                                   cp      d
  59+ A2E6 28 03                                jr      z,.SkipSlot
  60+ A2E8 3E FF                                ld      a,$FF
  61+ A2EA 77                                   ld      (hl),a
  62+ A2EB 23           .SkipSlot:              inc     hl
  63+ A2EC 23                                   inc     hl
  64+ A2ED 10 F5                                djnz    .fillLoop
  65+ A2EF C9                                   ret
  66+ A2F0
  67+ A2F0 21 B0 9E     ClearSlotA:             ld      hl,UniverseSlotList
  68+ A2F3 ED 31                                add     hl,a
  69+ A2F5 36 FF                                ld      (hl),$FF
  70+ A2F7 3E 0C                                ld      a,UniverseSlotListSize  ; move to types
  71+ A2F9 ED 31                                add     hl,a
  72+ A2FB 36 FF                                ld      (hl),$FF
  73+ A2FD C9                                   ret
  74+ A2FE              ; Space Station will always be slot 0
  75+ A2FE
  76+ A2FE 21 BD 9E     AreShipsPresent:        ld      hl,UniverseSlotType+1
  77+ A301 06 0B                                ld      b,UniverseSlotListSize -1      ; ignore space station
  78+ A303 7E           .NextShip:              ld      a,(hl)
  79+ A304 FE 00                                cp      ShipTypeNormal
  80+ A306                                      ClearCarryFlag
  80+ A306 B7          >                        or a
  81+ A307 C8                                   ret     z
  82+ A308 23                                   inc     hl
  83+ A309 10 F8                                djnz    .NextShip
  84+ A30B                                      SetCarryFlag
  84+ A30B 37          >                        scf
  85+ A30C C9                                   ret
  86+ A30D
  87+ A30D 21 B0 9E     IsSpaceStationPresent:  ld      hl,UniverseSlotList
  88+ A310                                      ClearCarryFlag
  88+ A310 B7          >                        or a
  89+ A311 7E           .SearchLoop:            ld      a,(hl)
  90+ A312                                      ReturnIfAEqNusng ShipTypeStation
  90+ A312 FE 02       >                        cp      ShipTypeStation
  90+ A314 C8          >                        ret     z
  91+ A315                                      SetCarryFlag
  91+ A315 37          >                        scf
  92+ A316 C9                                   ret
  93+ A317
  94+ A317 21 B0 9E     GetTypeAtSlotA:         ld      hl,UniverseSlotList
  95+ A31A ED 31                                add     hl,a
  96+ A31C 7E                                   ld      a,(hl)
  97+ A31D C9                                   ret
  98+ A31E
  99+ A31E 21 B1 9E     IsPlanetOrSpaceStation: ld      hl,UniverseSlotList+1
 100+ A321 7E                                   ld      a,(hl)
 101+ A322 C9                                   ret
 102+ A323
 103+ A323 21 B0 9E     FindNextFreeSlotInC:    ld      hl,UniverseSlotList
 104+ A326 06 0C                                ld      b, UniverseSlotListSize
 105+ A328 0E 00                                ld      c, 0
 106+ A32A 7E           .SearchLoop:            ld      a,(hl)
 107+ A32B                                      JumpIfAEqNusng $FF, .FoundSlot
 107+ A32B FE FF       >                        cp     $FF
 107+ A32D CA 36 A3    >                        jp      z,.FoundSlot
 108+ A330 0C                                   inc     c
 109+ A331 23                                   inc     hl
 110+ A332 10 F6                                djnz    .SearchLoop
 111+ A334                                      SetCarryFlag
 111+ A334 37          >                        scf
 112+ A335 C9                                   ret
 113+ A336              .FoundSlot:             ClearCarryFlag
 113+ A336 B7          >                        or a
 114+ A337 C9                                   ret
 115+ A338
 116+ A338
 117+ A338 CD 23 A3     FindNextFreeSlotInA:    call    FindNextFreeSlotInC
 118+ A33B 79                                   ld      a,c
 119+ A33C C9                                   ret
 120+ A33D
# file closed: ./Variables/UniverseSlotRoutines.asm
 643  A33D
 644  A33D                  INCLUDE "./Variables/EquipmentVariables.asm"
# file opened: ./Variables/EquipmentVariables.asm
   1+ A33D 00           AutoDocking				DB	0				; $033F
   2+ A33E 00           PlayerECM				DB	0				; $0340
   3+ A33F 00           Laser2					DB	0				; 0343 laser Power? Not sure
   4+ A340 00           LaserCount				DB	0				; 0346  LASCT  \ laser count =9 for pulse, cooled off?
   5+ A341 00 00 00 00  Cash					DB  0,0,0,0			; 0361 - 0364 Cash now litte endian
   6+ A345 19           Fuel					DB	25				; 0365  QQ14
   7+ A346 46           CargoBaySize			DB	70				; 036E
   8+ A347 00           CargoRunningLoad        DB  0
   9+ A348 00 00 00 00  CargoTonnes             DB  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
   9+ A34C 00 00 00 00
   9+ A350 00 00 00 00
   9+ A354 00 00 00 00
  10+ A358              ;CargoTonnes		    DB	16,1,2,3,4,5,6,7,6,9,10,11,12,13,14,15			; 036F - 037F	QQ20
  11+ A358              SlaveCargoTonnes		equ CargoTonnes+3
  12+ A358              NarcoticsCargoTonnes	equ CargoTonnes+6
  13+ A358              FirearmsCargoTonnes		equ CargoTonnes+10
  14+ A358              GoldCargoKGs:           equ CargoTonnes+15
  15+ A358              AlienItemsTonnes        equ CargoTonnes+17
  16+ A358              ; For each view laser a localised copy of the stats
  17+ A358              ; TODO - need to add code to maintain on load/save/equipment transactions
  18+ A358 00 00 00 00  LaserType               DS  4               ; quick reference to laser type
  19+ A35C 00 00 00 00  LaserDamagedFlag        DS  4               ; probabiliy out of 255 that it will no fire, 0 = good, 255 = will not fire
  20+ A360              ; dont need as static from table LaserPulseRate          DS  4               ; how many pulses can be fired before long pause
  21+ A360              ; dont need as static from table LaserPulsePause         DS  4               ; time before next pulse - 0 = beam
  22+ A360              ; dont need as static from table LaserPulseRest          DS  4               ; time before pulse count resets to 0
  23+ A360              ; dont need as static from table LaserDamageOutput       DS  4               ; amount of damage for a laser hit
  24+ A360              ; dont need as static from table LaserEnergyDrain        DS  4               ; amount of energy drained by cycle
  25+ A360              ; dont need as static from table LaserHeat               DS  4               ; amount of heat generated
  26+ A360              ; dont need as static from table LaserDurability         DS  4               ; probabability out of 255 that a hit on it unshielded will add random amount of damage
  27+ A360              ; dont need as static from table LaserDurabilityAmount   DS  4               ; max amount of damagage can be sustained in one damage hit
  28+ A360
  29+ A360
  30+ A360              QQ20                    equ CargoTonnes
  31+ A360 00 00 00...  EquipmentFitted         DS  EQ_ITEM_COUNT    ; Series of flags for if each item is fitted
  32+ A37A              ECMPresent				EQU EquipmentFitted + EQ_ECM				; 0380
  33+ A37A              FuelScoop               EQU EquipmentFitted + EQ_FUEL_SCOOPS
  34+ A37A              EnergyBomb				EQU EquipmentFitted + EQ_ENERGY_BOMB		; 0382	Also random hyperspeace in Elite A
  35+ A37A              ExtraEnergyUnit			EQU EquipmentFitted + EQ_ENERGY_UNIT        ; 0383
  36+ A37A              DockingComputer 		EQU EquipmentFitted + EQ_DOCK_COMP    		; 0384
  37+ A37A              GalacticHyperDrive		EQU EquipmentFitted + EQ_GAL_DRIVE   		; 0385
  38+ A37A              EscapePod				EQU EquipmentFitted + EQ_ESCAPE_POD  		; 0386
  39+ A37A 01           FuelScoopsBarrelStatus	DB	1				; 0381
  40+ A37B
# file closed: ./Variables/EquipmentVariables.asm
 645  A37B
 646  A37B                  INCLUDE "./Variables/random_number.asm"
# file opened: ./Variables/random_number.asm
   1+ A37B              doRandom2:									; .DORND2	\ -> &3F85 \ Restricted for explosion dust.
   2+ A37B              doRND2:
   3+ A37B A7           	and		a								; fast clear carry  leave bit0 of RAND+2 at 0.
   4+ A37C              doRandom:									;.DORND	\ -> &3F86 \ do random, new A, X.
   5+ A37C              ; "doRandom, Random Seed update, new value in A & C)"
   6+ A37C              ; uses a c h l registers
   7+ A37C              doRND:                  ;exx                                     ; protect bc,de,hl
   8+ A37C 3A D2 9C                             ld		a,(RandomSeed)					; Get Seed 0
   9+ A37F CB 17                                rl		a								; Rotate L including carry
  10+ A381 4F                                   ld		c,a								; c =  double lo
  11+ A382 21 D4 9C     .AddSeed2:              ld		hl,RandomSeed2
  12+ A385 8E                                   adc		a,(hl)							; RAND+2
  13+ A386 32 D2 9C     .SaveAtoSeed:           ld		(RandomSeed),a					; and save RAND
  14+ A389 08           .SaveBtoSeed2:          ex		af,af'
  15+ A38A 79                                   ld		a,c
  16+ A38B 32 D4 9C                             ld		(RandomSeed2),a
  17+ A38E 08                                   ex		af,af'
  18+ A38F 3A D3 9C                             ld		a,(RandomSeed1)
  19+ A392 4F                                   ld		c,a								; C = Seed1
  20+ A393 21 D5 9C     .AddSeed3:              ld		hl,RandomSeed3
  21+ A396 8E                                   adc		a,(hl)
  22+ A397 32 D3 9C                             ld		(RandomSeed1),a
  23+ A39A 08                                   ex		af,af'
  24+ A39B 79                                   ld		a,c
  25+ A39C 32 D5 9C                             ld		(RandomSeed3),a
  26+ A39F 08                                   ex		af,af'
  27+ A3A0                                      ;exx                                     ; get bc,de,hl back
  28+ A3A0 C9                                   ret
  29+ A3A1
  30+ A3A1 21 D2 9C     saveRandomSeeds:        ld      hl,RandomSeed
  31+ A3A4 11 D6 9C                             ld      de,RandomSeedSave
  32+ A3A7 01 04 00                             ld      bc,4
  33+ A3AA ED A0                                ldi
  34+ A3AC ED A0                                ldi
  35+ A3AE ED A0                                ldi
  36+ A3B0 ED A0                                ldi
  37+ A3B2 C9                                   ret
  38+ A3B3
  39+ A3B3 21 D6 9C     restoreRandomSeeds:     ld      hl,RandomSeedSave
  40+ A3B6 11 D2 9C                             ld      de,RandomSeed
  41+ A3B9 01 04 00                             ld      bc,4
  42+ A3BC ED A0                                ldi
  43+ A3BE ED A0                                ldi
  44+ A3C0 ED A0                                ldi
  45+ A3C2 ED A0                                ldi
  46+ A3C4 C9                                   ret
# file closed: ./Variables/random_number.asm
 647  A3C5                  INCLUDE "./Variables/galaxy_seed.asm"
# file opened: ./Variables/galaxy_seed.asm
   1+ A3C5 47 41 4C 41  GALAXYSEED DB "GALAXYSEED"
   1+ A3C9 58 59 53 45
   1+ A3CD 45 44
   2+ A3CF 21 E1 9E     copy_galaxy_to_system:  ld		hl,GalaxySeeds
   3+ A3D2 11 CB 9D                             ld		de,SystemSeed
   4+ A3D5 ED A0        copy_seed:		        ldi
   5+ A3D7 ED A0                                ldi
   6+ A3D9 ED A0                                ldi
   7+ A3DB ED A0                                ldi
   8+ A3DD ED A0                                ldi
   9+ A3DF ED A0                                ldi
  10+ A3E1 C9                                   ret
  11+ A3E2
  12+ A3E2 21 CB 9D     copy_system_to_galaxy:  ld		hl,SystemSeed
  13+ A3E5 11 E1 9E                             ld		de,GalaxySeeds
  14+ A3E8 18 EB                                jr		copy_seed
  15+ A3EA
  16+ A3EA 21 E1 9E     copy_galaxy_to_working: ld		hl,GalaxySeeds
  17+ A3ED 11 D5 9E                             ld		de,WorkingSeeds
  18+ A3F0 18 E3                                jr		copy_seed
  19+ A3F2
  20+ A3F2 21 D5 9E     copy_working_to_galaxy: ld		hl,WorkingSeeds
  21+ A3F5 11 E1 9E                             ld		de,GalaxySeeds
  22+ A3F8 18 DB                                jr		copy_seed
  23+ A3FA
  24+ A3FA 21 D5 9E     copy_working_to_system: ld		hl,WorkingSeeds
  25+ A3FD 11 CB 9D                             ld		de,SystemSeed
  26+ A400 18 D3                                jr		copy_seed
  27+ A402
  28+ A402 21 CB 9D     copy_system_to_working: ld		hl,SystemSeed
  29+ A405 11 D5 9E                             ld		de,WorkingSeeds
  30+ A408 18 CB                                jr		copy_seed
  31+ A40A
  32+ A40A              next_system_seed:							;.TT20	\ -> &2B0E  \ TWIST on QQ15 to next system
  33+ A40A CD 0D A4     		call	.NextStep					; This logic means we hard code x4
  34+ A40D              .NextStep:
  35+ A40D CD 10 A4     		call	process_seed				; This logic means we hard code x2
  36+ A410              process_seed:								; TT54	\ -> &2637 \ Twist seed for next digram in QQ15
  37+ A410 3A CB 9D     		ld		a,(SystemSeed)				; QQ15
  38+ A413 B7           		or		a							; clear carry flag
  39+ A414 21 CD 9D     		ld		hl,SystemSeed+2				; hl -> qq+2
  40+ A417 86           		add		a,(hl)						; a= QQ15 + QQ152
  41+ A418 47           		ld		b,a							; partial sum lo
  42+ A419 3A CC 9D     		ld		a,(SystemSeed+1)
  43+ A41C 21 CE 9D     		ld		hl,SystemSeed+3				; HL -> QQ+3 )we don't inc as it affects carry)
  44+ A41F 8E           		adc		a,(hl)						; note add with carry
  45+ A420 4F           		ld		c,a  						; c = QQ1+QQ3+carry bit parial sum hi
  46+ A421 3A CD 9D     		ld		a,(SystemSeed+2)
  47+ A424 32 CB 9D     		ld		(SystemSeed+0),a			; copy qq152 to qq150
  48+ A427 3A CE 9D     		ld		a,(SystemSeed+3)
  49+ A42A 32 CC 9D     		ld		(SystemSeed+1),a			; copy qq153 to qq151
  50+ A42D 3A D0 9D     		ld		a,(SystemSeed+5)
  51+ A430 32 CE 9D     		ld		(SystemSeed+3),a			; copy qq155 to qq153
  52+ A433 3A CF 9D     		ld		a,(SystemSeed+4)
  53+ A436 32 CD 9D     		ld		(SystemSeed+2),a			; copy qq154 to qq152
  54+ A439 B7           		or		a
  55+ A43A 78           		ld		a,b
  56+ A43B 21 CD 9D     		ld		hl,SystemSeed+2				; hl -> qq+2
  57+ A43E 86           		add	    a,(hl)
  58+ A43F 32 CF 9D     		ld		(SystemSeed+4),a
  59+ A442 79           		ld		a,c
  60+ A443 21 CE 9D     		ld		hl,SystemSeed+3				; HL -> QQ+3 )we don't inc as it affects carry)
  61+ A446 8E           		adc		a,(hl)
  62+ A447 32 D0 9D     		ld		(SystemSeed+5),a
  63+ A44A C9           		ret
  64+ A44B
  65+ A44B              next_working_seed:							;.TT20	\ -> &2B0E  \ TWIST on QQ15 to next system
  66+ A44B CD 4E A4     		call	.NextStep					; This logic means we hard code x4
  67+ A44E              .NextStep:
  68+ A44E CD 51 A4     		call	working_seed				; This logic means we hard code x2
  69+ A451              working_seed:								; TT54	\ -> &2637 \ Twist seed for next digram in QQ15
  70+ A451              ; x = a + c
  71+ A451 3A D5 9E     		ld		a,(WorkingSeeds)			; QQ15
  72+ A454 B7           		or		a							; clear carry flag
  73+ A455 21 D7 9E     		ld		hl,WorkingSeeds+2			; hl -> qq+2 [c]
  74+ A458 86           		add		a,(hl)						; a= QQ15 [a]+ QQ15 [c]
  75+ A459 47           		ld		b,a							; partial sum lo [x]
  76+ A45A              ; y = b + d	+ carry
  77+ A45A 3A D6 9E     		ld		a,(WorkingSeeds+1)          ; [b]
  78+ A45D 21 D8 9E     		ld		hl,WorkingSeeds+3			; HL -> QQ+3 [d] we don't inc as it affects carry)
  79+ A460 8E           		adc		a,(hl)						; note add with carry
  80+ A461 4F           		ld		c,a  						; c = QQ1+QQ3+carry bit parial sum hi
  81+ A462 3A D7 9E     		ld		a,(WorkingSeeds+2)
  82+ A465 32 D5 9E     		ld		(WorkingSeeds+0),a			; copy qq152 to qq150 [a] = [c]
  83+ A468 3A D8 9E     		ld		a,(WorkingSeeds+3)
  84+ A46B 32 D6 9E     		ld		(WorkingSeeds+1),a			; copy qq153 to qq151 [b] = [d]
  85+ A46E 3A DA 9E     		ld		a,(WorkingSeeds+5)
  86+ A471 32 D8 9E     		ld		(WorkingSeeds+3),a			; copy qq155 to qq153 [d] = [f]
  87+ A474 3A D9 9E     		ld		a,(WorkingSeeds+4)
  88+ A477 32 D7 9E     		ld		(WorkingSeeds+2),a			; copy qq154 to qq152 [c] = [e]
  89+ A47A B7           		or		a
  90+ A47B 78           		ld		a,b
  91+ A47C 21 D7 9E     		ld		hl,WorkingSeeds+2		    ; hl -> qq+2
  92+ A47F 86           		add	    a,(hl)
  93+ A480 32 D9 9E     		ld		(WorkingSeeds+4),a			; e = x + [c]
  94+ A483 79           		ld		a,c
  95+ A484 21 D8 9E     		ld		hl,WorkingSeeds+3			; HL -> QQ+3 )we don't inc as it affects carry)
  96+ A487 8E           		adc		a,(hl)
  97+ A488 32 DA 9E     		ld		(WorkingSeeds+5),a			; f = y + [d] + carry
  98+ A48B C9           		ret
  99+ A48C
 100+ A48C 32           working_distX	DB 50
 101+ A48D 32           working_distY	DB 50
 102+ A48E 00           current_distY	DB 0
 103+ A48F
 104+ A48F AF           find_present_system:    xor		a
 105+ A490 32 E4 9D                             ld		(XSAV),a
 106+ A493 3A CC 9D     .CounterLoop:           ld		a,(SystemSeed+1)				; QQ15+1 \ seed Ycoord of star
 107+ A496 4F                                   ld		c,a
 108+ A497 3A E8 9E     .calcLocaldy:           ld		a,(PresentSystemY)
 109+ A49A 47                                   ld		b,a								; so b holds Y ccord
 110+ A49B 79                                   ld		a,c
 111+ A49C 90                                   sub		b
 112+ A49D CB 7F                                bit		7,a
 113+ A49F 28 02                                jr		z,.positivedy
 114+ A4A1 ED 44        .negativedy:            neg
 115+ A4A3 32 8E A4     .positivedy:            ld		(current_distY),a				; save cuirrent_dist Y as we need it maybe
 116+ A4A6 ED 5B 8C A4                          ld		de,(working_distX)
 117+ A4AA BA                                   cp		d
 118+ A4AB 30 24                                jr		nc,.toofar
 119+ A4AD 3A CE 9D     .calcLocaldx:           ld		a,(SystemSeed+3)				; QQ15+3 \ seed Xcoord of star
 120+ A4B0 4F                                   ld		c,a
 121+ A4B1 3A E7 9E                             ld		a,(PresentSystemX)
 122+ A4B4 47                                   ld		b,a								; so b holds Y ccord
 123+ A4B5 79                                   ld		a,c
 124+ A4B6 90                                   sub		b
 125+ A4B7 CB 7F                                bit		7,a
 126+ A4B9 28 02                                jr		z,.positivedx
 127+ A4BB ED 44        .negativedx:            neg
 128+ A4BD 4F           .positivedx:            ld		c,a
 129+ A4BE BB                                   cp		e
 130+ A4BF 30 10                                jr		nc,.toofar
 131+ A4C1 3A 8E A4     .Nearer:			    ld		a,(current_distY) 				; we have a closer system
 132+ A4C4 47                                   ld		b,a								; we have c to recall Y into b
 133+ A4C5 ED 43 8C A4                          ld		(working_distX),bc
 134+ A4C9 C5                                   push	bc
 135+ A4CA CD 02 A4                             call 	copy_system_to_working
 136+ A4CD C1                                   pop		bc
 137+ A4CE 78                                   ld		a,b								;
 138+ A4CF B1                                   or		c								;
 139+ A4D0 C8                                   ret		z								; if we have distance 0 then bang on
 140+ A4D1 CD 0A A4     .toofar:                call	next_system_seed
 141+ A4D4 3A E4 9D                             ld		a,(XSAV)
 142+ A4D7 3D                                   dec		a
 143+ A4D8 FE 00                                cp		0
 144+ A4DA C8                                   ret		z
 145+ A4DB 32 E4 9D                             ld		(XSAV),a
 146+ A4DE 18 B3                                jr		.CounterLoop
 147+ A4E0
 148+ A4E0              get_planet_data_working_seed:
 149+ A4E0 3A D6 9E     		ld		a, (WorkingSeeds+1)
 150+ A4E3 E6 07        		and		7
 151+ A4E5 32 69 9E     		ld		(DisplayEcononmy),a
 152+ A4E8 3A D7 9E     		ld		a, (WorkingSeeds+2)
 153+ A4EB CB 3F        		srl	a
 154+ A4ED CB 3F        		srl	a
 155+ A4EF CB 3F        		srl	a
 156+ A4F1 CB 3F        		srl	a								; c/8
 157+ A4F3 E6 07        		and		7
 158+ A4F5 32 6A 9E     		ld		(DisplayGovernment),a
 159+ A4F8 CB 3F        		srl	a
 160+ A4FA FE 00        		cp		0
 161+ A4FC 20 08        		jr		nz,.CanBeRich
 162+ A4FE              .Fedual:
 163+ A4FE 3A 69 9E     		ld		a,(DisplayEcononmy)
 164+ A501 F6 02        		or		2							; Adjust Eco for Anarchy and Feudal, set bit 1.
 165+ A503 32 69 9E     		ld		(DisplayEcononmy),a
 166+ A506              .CanBeRich:
 167+ A506 3A 69 9E     		ld		a,(DisplayEcononmy)
 168+ A509 EE 07        		xor		7							; flip economy so Rich is now 7
 169+ A50B 32 6B 9E     		ld		(DisplayTekLevel),a			; Flipped Eco, EcoEOR7, Rich Ind = 7
 170+ A50E 47           		ld		b,a
 171+ A50F 3A D8 9E     		ld		a,(WorkingSeeds+3)
 172+ A512 E6 03        		and		3
 173+ A514 80           		add		a,b
 174+ A515 32 6B 9E     		ld		(DisplayTekLevel),a			; Tek Level += seed d & 3
 175+ A518 3A 6A 9E     		ld		a,(DisplayGovernment)		; Government, 0 is Anarchy
 176+ A51B CB 3F        		srl		a 							; gov/2
 177+ A51D 47           		ld		b,a
 178+ A51E 3A 6B 9E     		ld		a,(DisplayTekLevel)
 179+ A521 80           		add		a,b
 180+ A522 32 6B 9E     		ld		(DisplayTekLevel),a			; Tek += gov /2
 181+ A525 CB 27        		sla		a
 182+ A527 CB 27        		sla		a							; Onto Population (TL-1)*= 4
 183+ A529 47           		ld		b,a
 184+ A52A 3A 69 9E     		ld		a,(DisplayEcononmy)
 185+ A52D 80           		add		a,b                  		; TechLevel*4 + Eco   7-56
 186+ A52E 47           		ld		b,a
 187+ A52F 3A 6A 9E     		ld		a,(DisplayGovernment)
 188+ A532 3C           		inc		a  							; +Government, 0 is Anarchy + 1
 189+ A533 32 6C 9E     		ld		(DisplayPopulation),a
 190+ A536 3A 69 9E     		ld		a,(DisplayEcononmy)
 191+ A539 EE 07        		xor		7							; Onto productivity
 192+ A53B C6 03        		add		3							;  (Flipped eco +3)
 193+ A53D 57           		ld		d,a
 194+ A53E 3A 6A 9E     		ld		a,(DisplayGovernment)		; Government, 0 is Anarchy
 195+ A541 C6 04        		add		4
 196+ A543 5F           		ld		e,a
 197+ A544 ED 30        		mul									; ; DE = d*e, Productivity part 1. has hsb in A, lsb in P.
 198+ A546 3A 6C 9E     		ld		a,(DisplayPopulation)		; then we use d for radius
 199+ A549 57           		ld		d,a
 200+ A54A ED 30        		mul
 201+ A54C CB 23        		sla		e
 202+ A54E CB 1A        		rr		d
 203+ A550 CB 23        		sla		e
 204+ A552 CB 1A        		rr		d
 205+ A554 CB 23        		sla		e
 206+ A556 CB 1A        		rr		d							; de * 8
 207+ A558 ED 53 6E 9E  		ld		(DisplayProductivity),de
 208+ A55C              .DoRadius:
 209+ A55C 3A D8 9E     		ld		a,(WorkingSeeds+3)
 210+ A55F 4F           		ld		c,a
 211+ A560 3A DA 9E     		ld		a,(WorkingSeeds+5)
 212+ A563 E6 0F        		and		$0F							;  lower 4 bits of w2_h determine planet radius
 213+ A565 C6 0B        		add		11							;  radius min = 256*11 = 2816 km
 214+ A567 47           		ld		b,a							;
 215+ A568 ED 43 72 9E  		ld		(DisplayRadius),bc
 216+ A56C C9           		ret
 217+ A56D
# file closed: ./Variables/galaxy_seed.asm
 648  A56D                  INCLUDE "./Tables/text_tables.asm"
# file opened: ./Tables/text_tables.asm
   1+ A56D 50 75 6C 73  StatusLaserName1	DB	"Pulse",0
   1+ A571 65 00
   2+ A573 42 65 61 6D  StatusLaserName2	DB	"Beam",0
   2+ A577 00
   3+ A578 4D 69 6C 69  StatusLaserName3    DB  "Military",0
   3+ A57C 74 61 72 79
   3+ A580 00
   4+ A581 4D 69 6E 69  StatusLaserName4    DB  "Mining",0
   4+ A585 6E 67 00
   5+ A588 43 75 73 74  StatusLaserName5    DB  "Custom",0
   5+ A58C 6F 6D 00
   6+ A58F
   7+ A58F 6D A5 73 A5  StatusLaserNameIdx	DW	StatusLaserName1,StatusLaserName2,StatusLaserName3,StatusLaserName4,StatusLaserName5
   7+ A593 78 A5 81 A5
   7+ A597 88 A5
   8+ A599              StatusLaserNameIdxLen EQU $ - StatusLaserNameIdx
   9+ A599
  10+ A599 44 6F 63 6B  ConditionName1		DB "Docked",0
  10+ A59D 65 64 00
  11+ A5A0 47 72 65 65  ConditionName2		DB "Green",0
  11+ A5A4 6E 00
  12+ A5A6 59 65 6C 6C  ConditionName3		DB "Yellow",0
  12+ A5AA 6F 77 00
  13+ A5AD 52 65 64 00  ConditionName4		DB "Red",0
  14+ A5B1
  15+ A5B1 99 A5 A0 A5  ConditionNameIdx	DW ConditionName1,ConditionName2,ConditionName3,ConditionName4
  15+ A5B5 A6 A5 AD A5
  16+ A5B9              ConditionNameIdxLen EQU $ - ConditionNameIdx
  17+ A5B9
  18+ A5B9 41 42 4F 55  StatusDiagrams		DB "ABOUSEITILETSTONLONUTHNOALLEXEGEZACEBISOUSESARMAINDIREA?ERATENBERALAVETIEDORQUANTEISRION",0
  18+ A5BD 53 45 49 54
  18+ A5C1 49 4C 45 54
  18+ A5C5 53 54 4F 4E
  18+ A5C9 4C 4F 4E 55
  18+ A5CD 54 48 4E 4F
  18+ A5D1 41 4C 4C 45
  18+ A5D5 58 45 47 45
  18+ A5D9 5A 41 43 45
  18+ A5DD 42 49 53 4F
  18+ A5E1 55 53 45 53
  18+ A5E5 41 52 4D 41
  18+ A5E9 49 4E 44 49
  18+ A5ED 52 45 41 3F
  18+ A5F1 45 52 41 54
  18+ A5F5 45 4E 42 45
  18+ A5F9 52 41 4C 41
  18+ A5FD 56 45 54 49
  18+ A601 45 44 4F 52
  18+ A605 51 55 41 4E
  18+ A609 54 45 49 53
  18+ A60D 52 49 4F 4E
  18+ A611 00
  19+ A612
  20+ A612 00 00 08 00  RankingTable		DW	$0000,$0008,$0010,$0020,$0040,$0080,$0200,$0A00,$1900,$4900,$FFFF
  20+ A616 10 00 20 00
  20+ A61A 40 00 80 00
  20+ A61E 00 02 00 0A
  20+ A622 00 19 00 49
  20+ A626 FF FF
  21+ A628
  22+ A628 48 61 72 6D  RankingName1		DB 	"Harmless",0
  22+ A62C 6C 65 73 73
  22+ A630 00
  23+ A631 4D 6F 73 74  RankingName2		DB 	"Mostly Harmless",0
  23+ A635 6C 79 20 48
  23+ A639 61 72 6D 6C
  23+ A63D 65 73 73 00
  24+ A641 50 6F 6F 72  RankingName3		DB 	"Poor",0
  24+ A645 00
  25+ A646 41 76 65 72  RankingName4		DB 	"Average",0
  25+ A64A 61 67 65 00
  26+ A64E 41 62 6F 76  RankingName5		DB 	"Above Average",0
  26+ A652 65 20 41 76
  26+ A656 65 72 61 67
  26+ A65A 65 00
  27+ A65C 43 6F 6D 70  RankingName6		DB 	"Competent",0
  27+ A660 65 74 65 6E
  27+ A664 74 00
  28+ A666 44 61 6E 67  RankingName7		DB 	"Dangerous",0
  28+ A66A 65 72 6F 75
  28+ A66E 73 00
  29+ A670 44 65 61 64  RankingName8		DB 	"Deadly",0
  29+ A674 6C 79 00
  30+ A677 2D 2D 2D 2D  RankingName9		DB 	"---- E L I T E ---",0
  30+ A67B 20 45 20 4C
  30+ A67F 20 49 20 54
  30+ A683 20 45 20 2D
  30+ A687 2D 2D 00
  31+ A68A 53 6B 6F 6C  RankingName10		DB 	"Skollobsgod",0
  31+ A68E 6C 6F 62 73
  31+ A692 67 6F 64 00
  32+ A696 4E 75 74 74  RankingName11		DB 	"Nutter",0
  32+ A69A 65 72 00
  33+ A69D
  34+ A69D 28 A6 31 A6  RankingNameIdx		dw RankingName1,RankingName2,RankingName3,RankingName4,RankingName5,RankingName6,RankingName7,RankingName8,RankingName9,RankingName10,RankingName11
  34+ A6A1 41 A6 46 A6
  34+ A6A5 4E A6 5C A6
  34+ A6A9 66 A6 70 A6
  34+ A6AD 77 A6 8A A6
  34+ A6B1 96 A6
  35+ A6B3              RankingNameIdxLen EQU $ - RankingNameIdx
  36+ A6B3
  37+ A6B3
  38+ A6B3              getTableText:
  39+ A6B3              ; ">getTableText, hl = indexlist, a = textnbr, returns with hl = porinter to head of text"
  40+ A6B3              ; ">Note for ranking first 2 bytes are target rank"
  41+ A6B3 D5           	push	de								; save DE as we will likley need it in caller
  42+ A6B4 ED 31        	add		hl,a							; 0 based ref, and its 2 bytes
  43+ A6B6 ED 31        	add		hl,a
  44+ A6B8 5E           	ld		e,(hl)
  45+ A6B9 23           	inc		hl
  46+ A6BA 56           	ld		d,(hl)							; de = indexed address
  47+ A6BB EB           	ex		de,hl							; flip it to hl
  48+ A6BC D1           	pop		de								; retrieve de
  49+ A6BD C9           	ret										; return with hl as start entry
  50+ A6BE
  51+ A6BE
  52+ A6BE              ;               CF      ZF      Result
  53+ A6BE              ;               -----------------------------------
  54+ A6BE              ;               0       0       HL > DE
  55+ A6BE              ;               0       1       HL == DE
  56+ A6BE              ;               1       0       HL < DE
  57+ A6BE              ;               1       1       Impossible
  58+ A6BE              getRankIndex:
  59+ A6BE              ; ">getRank, de = kill count, returns a = index,hl destroyed"
  60+ A6BE              ; ">Note for ranking first 2 bytes are target rank"
  61+ A6BE 7A           	ld		a,d
  62+ A6BF B3           	or		e
  63+ A6C0 FE 00        	cp		0
  64+ A6C2 C8           	ret		z								; quicks skip for 0 kills
  65+ A6C3 AF           	xor 	a
  66+ A6C4 21 12 A6     	ld		hl,RankingTable
  67+ A6C7              .testLoop:
  68+ A6C7 4E           	ld		c,(hl)
  69+ A6C8 23           	inc		hl
  70+ A6C9 46           	ld		b,(hl)							; bc = ranking
  71+ A6CA E5           	push	hl
  72+ A6CB 60           	ld		h,b
  73+ A6CC 69           	ld		l,c
  74+ A6CD CD 53 B3     	call	compare16HLDE
  75+ A6D0 38 06        	jr		c,.HLLTDE
  76+ A6D2              .HLGTEDE									; Found the correct rank
  77+ A6D2 E1           	pop		hl
  78+ A6D3 23           	inc		hl								; move to next value
  79+ A6D4 23           	inc		hl
  80+ A6D5 3C           	inc		a								; we canloop forever as if kills was $FFFF then hits nutter rank but also +1 = 0000 as its 16 bit
  81+ A6D6 18 EF        	jr		.testLoop
  82+ A6D8              .HLLTDE:									; HL < Kills so found correct rank
  83+ A6D8 E1           	pop		hl
  84+ A6D9 C9           	ret
  85+ A6DA
# file closed: ./Tables/text_tables.asm
 649  A6DA                  INCLUDE "./Tables/dictionary.asm"
# file opened: ./Tables/dictionary.asm
   1+ A6DA 58 00        WordDummy					DB  "X",0
   2+ A6DC 46 72 6F 6E  WordFront					DB	"Front",0              ;1
   2+ A6E0 74 00
   3+ A6E2 52 69 67 68  WordRight					DB	"Right",0              ;2
   3+ A6E6 74 00
   4+ A6E8 4C 65 66 74  WordLeft 					DB	"Left",0               ;3
   4+ A6EC 00
   5+ A6ED 52 65 61 72  WordRear   	 				DB	"Rear",0               ;4
   5+ A6F1 00
   6+ A6F2 4C 61 72 67  WordLarge           		DB  "Large",0              ;5
   6+ A6F6 65 00
   7+ A6F8 45 73 63 61  WordEscape          		DB  "Escape",0             ;6
   7+ A6FC 70 65 00
   8+ A6FF 50 6F 64 00  WordPod             		DB  "Pod",0                ;7
   9+ A703 43 61 72 67  WordCargo           		DB  "Cargo",0              ;8
   9+ A707 6F 00
  10+ A709 42 61 79 00  WordBay             		DB  "Bay",0                ;9
  11+ A70D 46 75 65 6C  WordFuel            		DB  "Fuel",0               ;10
  11+ A711 00
  12+ A712 53 63 6F 6F  WordScoops          		DB  "Scoops",0             ;11
  12+ A716 70 73 00
  13+ A719 45 2E 43 2E  WordECM             		DB  "E.C.M.",0             ;12
  13+ A71D 4D 2E 00
  14+ A720 53 79 73 74  WordSystem          		DB  "System",0             ;13
  14+ A724 65 6D 00
  15+ A727 45 6E 65 72  WordEnergy					DB  "Energy",0             ;14
  15+ A72B 67 79 00
  16+ A72E 42 6F 6D 62  WordBomb					DB  "Bomb",0               ;15
  16+ A732 00
  17+ A733 4C 61 73 65  WordLaser					DB  "Laser",0              ;16
  17+ A737 72 00
  18+ A739 50 75 6C 73  WordPulse           		DB  "Pulse",0              ;17
  18+ A73D 65 00
  19+ A73F 42 65 61 6D  WordBeam            		DB  "Beam",0               ;18
  19+ A743 00
  20+ A744 4D 69 6C 69  WordMiliary         		DB  "Miliary",0            ;19
  20+ A748 61 72 79 00
  21+ A74C 4D 69 6E 69  WordMining          		DB  "Mining",0             ;20
  21+ A750 6E 67 00
  22+ A753 43 75 73 74  WordCustom          		DB  "Custom",0             ;21
  22+ A757 6F 6D 00
  23+ A75A 55 6E 69 74  WordUnit            		DB  "Unit",0               ;22
  23+ A75E 00
  24+ A75F 53 68 69 65  WordShield          		DB  "Shield",0             ;23
  24+ A763 6C 64 00
  25+ A766 44 6F 63 6B  WordDocking         		DB  "Docking",0            ;24
  25+ A76A 69 6E 67 00
  26+ A76E 43 6F 6D 70  WordComputers       		DB  "Computers",0          ;25
  26+ A772 75 74 65 72
  26+ A776 73 00
  27+ A778 48 79 70 65  WordHyperspace      		DB  "Hyperspace",0         ;26
  27+ A77C 72 73 70 61
  27+ A780 63 65 00
  28+ A783 47 61 6C 61  WordGalactic        		DB  "Galactic",0           ;27
  28+ A787 63 74 69 63
  28+ A78B 00
  29+ A78C 45 78 74 72  WordExtra           		DB  "Extra",0              ;28
  29+ A790 61 00
  30+ A792 43 6C 65 61  WordClean           		DB  "Clean",0              ;29
  30+ A796 6E 00
  31+ A798 4F 66 66 65  WordOffender        		DB  "Offender",0           ;30
  31+ A79C 6E 64 65 72
  31+ A7A0 00
  32+ A7A1 46 75 67 69  WordFugitive        		DB  "Fugitive",0           ;31
  32+ A7A5 74 69 76 65
  32+ A7A9 00
  33+ A7AA 46 6F 6F 64  WordFood					DB	"Food",0               ;32
  33+ A7AE 00
  34+ A7AF 54 65 78 74  WordTextiles				DB 	"Textiles",0           ;33
  34+ A7B3 69 6C 65 73
  34+ A7B7 00
  35+ A7B8 52 61 64 69  WordRadioactives			DB  "Radioactives",0       ;34
  35+ A7BC 6F 61 63 74
  35+ A7C0 69 76 65 73
  35+ A7C4 00
  36+ A7C5 53 6C 61 76  WordSlaves					DB  "Slaves",0             ;35
  36+ A7C9 65 73 00
  37+ A7CC 4C 69 71 75  WordLiquorWines     		DB  "Liquor/Wines",0       ;36
  37+ A7D0 6F 72 2F 57
  37+ A7D4 69 6E 65 73
  37+ A7D8 00
  38+ A7D9 4C 75 78 75  WordLuxuries  	    		DB  "Luxuries",0	       ;37
  38+ A7DD 72 69 65 73
  38+ A7E1 00
  39+ A7E2 4E 61 72 63  WordNarcotics  	    		DB  "Narcotics",0	       ;38
  39+ A7E6 6F 74 69 63
  39+ A7EA 73 00
  40+ A7EC 4D 61 63 68  WordMachinery  	    		DB  "Machinery",0	       ;39
  40+ A7F0 69 6E 65 72
  40+ A7F4 79 00
  41+ A7F6 41 6C 6C 6F  WordAlloys  				DB  "Alloys",0		       ;40
  41+ A7FA 79 73 00
  42+ A7FD 46 69 72 65  WordFirearms  	    		DB  "Firearms",0	       ;41
  42+ A801 61 72 6D 73
  42+ A805 00
  43+ A806 46 75 72 73  WordFurs  		    		DB  "Furs",0	           ;42
  43+ A80A 00
  44+ A80B 4D 69 6E 65  WordMinerals  	    		DB  "Minerals",0           ;43
  44+ A80F 72 61 6C 73
  44+ A813 00
  45+ A814 47 6F 6C 64  WordGold  		    		DB  "Gold",0	           ;44
  45+ A818 00
  46+ A819 50 6C 61 74  WordPlatinum  	    		DB  "Platinum",0           ;45
  46+ A81D 69 6E 75 6D
  46+ A821 00
  47+ A822 47 65 6D 2D  WordGemStones  				DB  "Gem-Stones",0         ;46
  47+ A826 53 74 6F 6E
  47+ A82A 65 73 00
  48+ A82D 41 6C 69 65  WordAlienItems      		DB  "Alien Items",0        ;47
  48+ A831 6E 20 49 74
  48+ A835 65 6D 73 00
  49+ A839 54 6F 6E 6E  WordTonnes          		DB  "Tonnes",0             ;48
  49+ A83D 65 73 00
  50+ A840 4B 69 6C 6F  WordKilograms       		DB  "Kilograms",0          ;49
  50+ A844 67 72 61 6D
  50+ A848 73 00
  51+ A84A 47 72 61 6D  WordGrams           		DB  "Grams",0			   ;50
  51+ A84E 73 00
  52+ A850 53 68 6F 72  WordShort           		DB  "Short",0			   ;51
  52+ A854 74 00
  53+ A856 52 61 6E 67  WordRange           		DB  "Range",0			   ;52
  53+ A85A 65 00
  54+ A85C 43 68 61 72  WordChart	        		DB  "Chart",0			   ;53
  54+ A860 74 00
  55+ A862 44 61 74 61  WordData					DB	"Data",0			   ;54
  55+ A866 00
  56+ A867 4F 6E 00     WordOn						DB  "On",0                 ;55
  57+ A86A 44 69 73 74  WordDistance        		DB  "Distance",0           ;56
  57+ A86E 61 6E 63 65
  57+ A872 00
  58+ A873 45 63 6F 6E  WordEconomy         		DB  "Economy",0            ;57
  58+ A877 6F 6D 79 00
  59+ A87B 47 6F 76 65  WordGovernment      		DB  "Government",0         ;58
  59+ A87F 72 6E 6D 65
  59+ A883 6E 74 00
  60+ A886 54 65 63 68  WordTechLevel       		DB  "TechLevel",0          ;59
  60+ A88A 4C 65 76 65
  60+ A88E 6C 00
  61+ A890 50 6F 70 75  WordPopulation      		DB  "Population",0         ;60
  61+ A894 6C 61 74 69
  61+ A898 6F 6E 00
  62+ A89B 4D 69 6C 6C  WordMillion         		DB  "Million",0            ;61
  62+ A89F 69 6F 6E 00
  63+ A8A3 42 69 6C 6C  WordBillion         		DB  "Billion",0            ;62
  63+ A8A7 69 6F 6E 00
  64+ A8AB 47 72 6F 73  WordGross           		DB  "Gross",0              ;63
  64+ A8AF 73 00
  65+ A8B1 50 72 6F 64  WordProductivity    		DB  "Productivity",0       ;64
  65+ A8B5 75 63 74 69
  65+ A8B9 76 69 74 79
  65+ A8BD 00
  66+ A8BE 41 76 65 72  WordAverage         		DB  "Average",0            ;65
  66+ A8C2 61 67 65 00
  67+ A8C6 52 61 64 69  WordRadius          		DB  "Radius",0             ;66
  67+ A8CA 75 73 00
  68+ A8CD 4B 4D 00     WordKM              		DB  "KM",0                 ;67
  69+ A8D0 4D 20 43 52  WordMCR             		DB  "M CR",0               ;68
  69+ A8D4 00
  70+ A8D5 52 69 63 68  WordRich					DB  "Rich",0               ;69
  70+ A8D9 00
  71+ A8DA 41 76 67 00  WordAvg         			DB  "Avg",0            	   ;70
  72+ A8DE 4D 61 69 6E  WordMainly          		DB  "Mainly",0             ;71
  72+ A8E2 6C 79 00
  73+ A8E5 50 6F 6F 72  WordPoor            		DB  "Poor",0               ;72
  73+ A8E9 00
  74+ A8EA 49 6E 64 75  WordIndustrial      		DB  "Industrial",0         ;73
  74+ A8EE 73 74 72 69
  74+ A8F2 61 6C 00
  75+ A8F5 41 67 72 69  WordAgricultural    		DB  "Agricultural",0       ;74
  75+ A8F9 63 75 6C 74
  75+ A8FD 75 72 61 6C
  75+ A901 00
  76+ A902 41 6E 61 72  WordAnarchy                 DB  "Anarchy",0            ;75
  76+ A906 63 68 79 00
  77+ A90A 46 65 75 64  WordFeudal                  DB  "Feudal",0             ;76
  77+ A90E 61 6C 00
  78+ A911 4D 75 6C 74  WordMultiGovernment         DB  "Multi-Government",0   ;77
  78+ A915 69 2D 47 6F
  78+ A919 76 65 72 6E
  78+ A91D 6D 65 6E 74
  78+ A921 00
  79+ A922 44 69 63 74  WordDictatorship            DB  "Dictatorship",0       ;78
  79+ A926 61 74 6F 72
  79+ A92A 73 68 69 70
  79+ A92E 00
  80+ A92F 43 6F 6D 6D  WordCommunist               DB  "Communist",0          ;79
  80+ A933 75 6E 69 73
  80+ A937 74 00
  81+ A939 43 6F 6E 66  WordConfederacy             DB  "Confederacy",0        ;80
  81+ A93D 65 64 65 72
  81+ A941 61 63 79 00
  82+ A945 44 65 6D 6F  WordDemocracy               DB  "Democracy",0          ;81
  82+ A949 63 72 61 63
  82+ A94D 79 00
  83+ A94F 43 6F 72 70  WordCorporate               DB  "Corporate State",0    ;82
  83+ A953 6F 72 61 74
  83+ A957 65 20 53 74
  83+ A95B 61 74 65 00
  84+ A95F 53 74 61 74  WordState 					DB  "State",0              ;83
  84+ A963 65 00
  85+ A965 4C 69 67 68  WordLight 					DB  "Light",0              ;84
  85+ A969 74 00
  86+ A96B 59 65 61 72  WordYears 					DB  "Years",0              ;85
  86+ A96F 73 00
  87+ A971 30 00        Word0						DB  "0",0				   ;86
  88+ A973 4D 61 72 6B  WordMarket					DB  "Market",0			   ;87
  88+ A977 65 74 00
  89+ A97A 50 72 69 63  WordPrices					DB  "Prices",0			   ;88
  89+ A97E 65 73 00
  90+ A981 50 72 6F 64  WordProduct    				DB  "Product",0  		   ;89
  90+ A985 75 63 74 00
  91+ A989 55 6F 4D 00  WordUoM						DB  "UoM",0                ;90
  92+ A98D 50 72 69 63  WordPrice					DB  "Price",0              ;91
  92+ A991 65 00
  93+ A993 46 6F 72 00  WordFor                     DB  "For",0                ;92
  94+ A997 53 61 6C 65  WordSale                    DB  "Sale",0               ;93
  94+ A99B 00
  95+ A99C 74 00        Wordt						DB  "t",0                  ;94
  96+ A99E 6B 67 00     Wordkg						DB  "kg",0                 ;95
  97+ A9A1 67 00        Wordg						DB  "g",0                  ;96
  98+ A9A3 51 75 61 6E  WordQuantity				DB  "Quanitity",0		   ;97
  98+ A9A7 69 74 69 74
  98+ A9AB 79 00
  99+ A9AD 49 6E 76 00  WordInv                     DB  "Inv",0                ;98
 100+ A9B1 53 74 6F 63  WordStock                   DB  "Stock",0              ;99
 100+ A9B5 6B 00
 101+ A9B7 45 71 75 69  WordEquip                   DB  "Equip",0              ;100
 101+ A9BB 70 00
 102+ A9BD 53 68 69 70  WordShip                    DB  "Ship",0               ;101
 102+ A9C1 00
 103+ A9C2 4D 69 73 73  WordMissile                 DB  "Missile",0            ;102
 103+ A9C6 69 6C 65 00
 104+ A9CA 48 79 70 65  WordHyperdrive              DB  "Hyperdrive",0
 104+ A9CE 72 64 72 69
 104+ A9D2 76 65 00
 105+ A9D5 4D 69 6C 69  WordMilitary                DB  "Military",0
 105+ A9D9 74 61 72 79
 105+ A9DD 00
 106+ A9DE
 107+ A9DE DA A6 DC A6  WordIdx				DW  WordDummy,          WordFront,        WordRight,        WordLeft		;0-3
 107+ A9E2 E2 A6 E8 A6
 108+ A9E6 ED A6 F2 A6  					DW  WordRear,           WordLarge,        WordEscape,       WordPod      	;4-7
 108+ A9EA F8 A6 FF A6
 109+ A9EE 03 A7 09 A7  					DW  WordCargo,          WordBay,          WordFuel,         WordScoops   	;8
 109+ A9F2 0D A7 12 A7
 110+ A9F6 19 A7 20 A7  					DW  WordECM,            WordSystem,       WordEnergy,       WordBomb     	;12
 110+ A9FA 27 A7 2E A7
 111+ A9FE 33 A7 39 A7  					DW  WordLaser,          WordPulse,        WordBeam,         WordMiliary  	;16
 111+ AA02 3F A7 44 A7
 112+ AA06 4C A7 53 A7  					DW  WordMining,         WordCustom,       WordUnit,         WordShield   	;20
 112+ AA0A 5A A7 5F A7
 113+ AA0E 66 A7 6E A7  					DW  WordDocking,        WordComputers,    WordHyperspace,   WordGalactic 	;24
 113+ AA12 78 A7 83 A7
 114+ AA16 8C A7 92 A7  					DW  WordExtra,          WordClean,        WordOffender,     WordFugitive	;28
 114+ AA1A 98 A7 A1 A7
 115+ AA1E AA A7 AF A7  					DW  WordFood,           WordTextiles,     WordRadioactives, WordSlaves		;32
 115+ AA22 B8 A7 C5 A7
 116+ AA26 CC A7 D9 A7  					DW  WordLiquorWines,    WordLuxuries,     WordNarcotics,    WordMachinery   ;36
 116+ AA2A E2 A7 EC A7
 117+ AA2E F6 A7 FD A7  					DW  WordAlloys,         WordFirearms,     WordFurs,         WordMinerals    ;40
 117+ AA32 06 A8 0B A8
 118+ AA36 14 A8 19 A8  					DW  WordGold,           WordPlatinum,     WordGemStones,    WordAlienItems  ;44               ;
 118+ AA3A 22 A8 2D A8
 119+ AA3E 39 A8 40 A8  WordIdxUoMFull		DW  WordTonnes,         WordKilograms,    WordGrams,		WordShort		;48
 119+ AA42 4A A8 50 A8
 120+ AA46 56 A8 5C A8  					DW	WordRange,		    WordChart,        WordData,         WordOn          ;52
 120+ AA4A 62 A8 67 A8
 121+ AA4E 6A A8 73 A8  					DW  WordDistance,       WordEconomy,      WordGovernment,   WordTechLevel   ;56
 121+ AA52 7B A8 86 A8
 122+ AA56 90 A8 9B A8  					DW  WordPopulation,     WordMillion,      WordBillion,      WordGross       ;60
 122+ AA5A A3 A8 AB A8
 123+ AA5E B1 A8 BE A8  					DW  WordProductivity,   WordAverage,      WordRadius,       WordKM          ;64
 123+ AA62 C6 A8 CD A8
 124+ AA66 D0 A8        					DW  WordMCR																	;68
 125+ AA68 D5 A8 DA A8  WordIdxEconomy		DW  WordRich,           WordAvg,      	  WordMainly,       WordPoor        ;69
 125+ AA6C DE A8 E5 A8
 126+ AA70 EA A8 F5 A8                      DW  WordIndustrial,     WordAgricultural									;73
 127+ AA74 02 A9 0A A9  WordIdxGovernment	DW  WordAnarchy,        WordFeudal,       WordMultiGovernment, WordDictatorship ;75
 127+ AA78 11 A9 22 A9
 128+ AA7C 2F A9 39 A9                      DW  WordCommunist,      WordConfederacy,  WordDemocracy,       WordCorporate ;79
 128+ AA80 45 A9 4F A9
 129+ AA84 5F A9 65 A9  					DW  WordState,          WordLight,        WordYears,           Word0         ; 83
 129+ AA88 6B A9 71 A9
 130+ AA8C 73 A9 7A A9  WordIdxMarketmenu	DW  WordMarket,         WordPrices,       WordProduct,         WordUoM	    ;87
 130+ AA90 81 A9 89 A9
 131+ AA94 8D A9 93 A9                      DW  WordPrice,          WordFor,          WordSale                          ;91
 131+ AA98 97 A9
 132+ AA9A 9C A9 9E A9  WordIdxUomAbbrev	DW	Wordt,				Wordkg,           Wordg                 		    ;94
 132+ AA9E A1 A9
 133+ AAA0 A3 A9 AD A9  					DW  WordQuantity,       WordInv,          WordStock,           WordEquip	;97
 133+ AAA4 B1 A9 B7 A9
 134+ AAA8 BD A9 C2 A9                      DW  WordShip,           WordMissile       ; 101
 135+ AAAC
 136+ AAAC              ; Phrases
 137+ AAAC 05 08 09 00  TextLargeCargoBay			DB 	5,8,9,0          ;0
 138+ AAB0 06 07 00     TextEscapePod				DB	6,7,0            ;1
 139+ AAB3 0A 0B 00     TextFuelScoops				DB	10,11,0          ;2
 140+ AAB6 0C 0D 00     TextECMSystem				DB	12,13,0          ;3
 141+ AAB9 0E 0F 00     TextEnergyBomb				DB	14,15,0          ;4
 142+ AABC 0E 16 00     TextEnergyUnit				DB	14,22,0          ;5
 143+ AABF 18 19 00     TextDockingComp     		DB  24,25,0          ;6
 144+ AAC2 1B 1A 00     TextGalacticHyper			DB	27,26,0          ;7
 145+ AAC5 01 12 10 00  TextFrontLaser      		DB  01,18,16,0       ;8
 146+ AAC9 03 12 10 00  TextLeftLaser       		DB  03,18,16,0       ;9
 147+ AACD 02 12 10 00  TextRightLaser      		DB  02,18,16,0       ;10
 148+ AAD1 04 12 10 00  TextRearLaser       		DB  04,18,16,0       ;11
 149+ AAD5 33 34 35 00  TextShortRangeChart 		DB	51,52,53,0       ;12
 150+ AAD9 1B 35 00     TextGalacticChart   		DB	27,53,0          ;13
 151+ AADC 36 37 00     TextDataOn					DB	54,55,0          ;14
 152+ AADF 45 49 00     TextRichIndustrial          DB  69,73,0          ;15
 153+ AAE2 46 49 00     TextAvgIndustrial           DB  70,73,0			 ;16
 154+ AAE5 47 49 00     TextMainIndustrial          DB  71,73,0          ;17
 155+ AAE8 48 49 00     TextPoorIndustrial          DB  72,73,0          ;18
 156+ AAEB 45 4A 00     TextRichAgricultural        DB  69,74,0          ;19
 157+ AAEE 46 4A 00     TextAvgAgricultural         DB  70,74,0          ;20
 158+ AAF1 47 4A 00     TextMainAgricultural        DB  71,74,0          ;21
 159+ AAF4 48 4A 00     TextPoorAgricultural        DB  72,74,0          ;22
 160+ AAF7 54 55 00     TextLightYears				DB  84,85,0			 ;23
 161+ AAFA 56 54 55 00  Text0LightYears				DB  86,84,85,0		 ;24
 162+ AAFE 57 58 00     TextMarketPrices			DB  87,88,0			 ;25
 163+ AB01 64 65        TextEquipShip               DB  100,101          ;26
 164+ AB03
 165+ AB03 00           TextDummy					DB  0
 166+ AB04
 167+ AB04 AC AA B0 AA  TextTokens			DW  TextLargeCargoBay, TextEscapePod, TextFuelScoops				; 0 2
 167+ AB08 B3 AA
 168+ AB0A B6 AA B9 AA  					DW  TextECMSystem, TextEnergyBomb, TextEnergyUnit					; 3 5
 168+ AB0E BC AA
 169+ AB10 BF AA C2 AA  					DW  TextDockingComp, TextGalacticHyper  							; 6 7
 170+ AB14 C5 AA C9 AA  					DW	TextFrontLaser, TextLeftLaser, TextRightLaser, TextRearLaser	; 8 11
 170+ AB18 CD AA D1 AA
 171+ AB1C D5 AA D9 AA  					DW  TextShortRangeChart, TextGalacticChart, TextDataOn				; 12 14
 171+ AB20 DC AA
 172+ AB22 DF AA E2 AA  TextTokenEconomy	DW  TextRichIndustrial, TextAvgIndustrial, TextPoorIndustrial, TextMainIndustrial, TextMainAgricultural, TextRichAgricultural, TextAvgAgricultural,  TextPoorAgricultural
 172+ AB26 E8 AA E5 AA
 172+ AB2A F1 AA EB AA
 172+ AB2E EE AA F4 AA
 173+ AB32 F7 AA        					DW  TextLightYears		                                            ; 21 23
 174+ AB34 FA AA FE AA  					DW  Text0LightYears, TextMarketPrices
 175+ AB38 03 AB        					DW  TextDummy;  25
 176+ AB3A 00 00 00...  TextBuffer			DS	33
 177+ AB5B
 178+ AB5B              TextEconomyOffset   EQU (TextTokenEconomy - TextTokens)/2
 179+ AB5B              TextGovOffset       EQU (WordIdxGovernment - WordIdx)/2
 180+ AB5B
 181+ AB5B              CapitaliseString:
 182+ AB5B              ; ">CapitaliseString hl = address"
 183+ AB5B              .CapLoop:
 184+ AB5B 23           	inc		hl
 185+ AB5C 7E           	ld		a,(hl)
 186+ AB5D FE 00        	cp		0
 187+ AB5F C8           	ret		z
 188+ AB60 FE 5B        	cp		'Z'+1
 189+ AB62 30 F7        	jr		nc,.CapLoop
 190+ AB64 FE 41        	cp		'A'
 191+ AB66 38 F3        	jr		c,.CapLoop
 192+ AB68              .LowerCase:
 193+ AB68 C6 20        	add		a,'a'-'A'
 194+ AB6A 77           	ld		(hl),a
 195+ AB6B 18 EE        	jr		.CapLoop
 196+ AB6D
 197+ AB6D              WordIndexToAddress:
 198+ AB6D 21 DE A9     	ld		hl,WordIdx
 199+ AB70 ED 31        	add		hl,a
 200+ AB72 ED 31        	add		hl,a
 201+ AB74 D5           	push	de
 202+ AB75 5E           	ld		e,(hl)
 203+ AB76 23           	inc		hl
 204+ AB77 56           	ld		d,(hl)
 205+ AB78 EB           	ex		de,hl
 206+ AB79 D1           	pop		de
 207+ AB7A C9           	ret
 208+ AB7B
 209+ AB7B
 210+ AB7B              expandTokenToString:
 211+ AB7B              ; ">expandTokenToString a = texttoken"
 212+ AB7B 21 04 AB     	ld		hl,TextTokens
 213+ AB7E CD B3 A6     	call	getTableText
 214+ AB81 11 3A AB     	ld		de,TextBuffer
 215+ AB84              .ReadLoop:
 216+ AB84 7E           	ld		a,(hl)
 217+ AB85 FE 00        	cp		0
 218+ AB87 28 1B        	jr		z,.ReadDone
 219+ AB89 E5           	push	hl
 220+ AB8A D5           	push	de
 221+ AB8B 21 DE A9     	ld		hl,WordIdx
 222+ AB8E CD B3 A6     	call	getTableText
 223+ AB91 D1           	pop		de
 224+ AB92              .WordExpandLoop:
 225+ AB92 7E           	ld		a,(hl)
 226+ AB93 FE 00        	cp		0
 227+ AB95 28 05        	jr		z,.AddSpace
 228+ AB97              ;.GetChar:
 229+ AB97 12           	ld		(de),a
 230+ AB98 13           	inc		de
 231+ AB99 23           	inc		hl
 232+ AB9A 18 F6        	jr		.WordExpandLoop
 233+ AB9C              .AddSpace:
 234+ AB9C 3E 20        	ld		a,' '
 235+ AB9E 12           	ld		(de),a
 236+ AB9F 13           	inc		de
 237+ ABA0 E1           	pop		hl
 238+ ABA1 23           	inc		hl
 239+ ABA2 18 E0        	jr		.ReadLoop
 240+ ABA4              .ReadDone:
 241+ ABA4 1B           	dec		de
 242+ ABA5 AF           	xor		a
 243+ ABA6 12           	ld		(de),a
 244+ ABA7 C9           	ret
 245+ ABA8
# file closed: ./Tables/dictionary.asm
 650  ABA8                  INCLUDE "./Tables/name_digrams.asm"
# file opened: ./Tables/name_digrams.asm
   1+ ABA8 41 42 4F 55  name_digrams	DB "ABOUSEITILETSTONLONUTHNO"
   1+ ABAC 53 45 49 54
   1+ ABB0 49 4C 45 54
   1+ ABB4 53 54 4F 4E
   1+ ABB8 4C 4F 4E 55
   1+ ABBC 54 48 4E 4F
   2+ ABC0 41 4C 4C     name_digrams2   DB "ALL"
   3+ ABC3 45 58 45 47  				DB "EXEGEZACEBISOUSESARMAINDIREA"
   3+ ABC7 45 5A 41 43
   3+ ABCB 45 42 49 53
   3+ ABCF 4F 55 53 45
   3+ ABD3 53 41 52 4D
   3+ ABD7 41 49 4E 44
   3+ ABDB 49 52 45 41
   4+ ABDF 3F 45 52 41  				DB "?ERATENBERALAVETIEDORQUANTEISRION"
   4+ ABE3 54 45 4E 42
   4+ ABE7 45 52 41 4C
   4+ ABEB 41 56 45 54
   4+ ABEF 49 45 44 4F
   4+ ABF3 52 51 55 41
   4+ ABF7 4E 54 45 49
   4+ ABFB 53 52 49 4F
   4+ ABFF 4E
   5+ AC00
   6+ AC00              ; TODO Moveinto galaxy data module
   7+ AC00 00 00 00...  name_expanded	DS 32
   8+ AC20 00           				DB 0
   9+ AC21
  10+ AC21
  11+ AC21
  12+ AC21              NamingLoop:
  13+ AC21 3A DA 9E     	ld		a,(WorkingSeeds+5)	; a = first byte of name seed
  14+ AC24 E6 1F        	and 	$1F					; Keep bottom 5 bits only
  15+ AC26 FE 00        	cp		0					; 0 = skip 2 chars
  16+ AC28 28 12        	jr		z,.SkipPhrase
  17+ AC2A C6 0C        	add		a,12
  18+ AC2C CB 27        	sla		a					; phrase = (a+12)*2
  19+ AC2E 21 A8 AB     	ld		hl,name_digrams
  20+ AC31 ED 31        	add		hl,a
  21+ AC33 ED A0        	ldi
  22+ AC35 7E           	ld		a,(hl)
  23+ AC36 FE 3F        	cp		'?'
  24+ AC38 28 02        	jr		z,.SkipPhrase
  25+ AC3A              .AddExtra:
  26+ AC3A ED A0        	ldi
  27+ AC3C              .SkipPhrase:
  28+ AC3C D5           	push	de
  29+ AC3D CD 51 A4     	call	working_seed
  30+ AC40 D1           	pop		de
  31+ AC41 C9           	ret
  32+ AC42
  33+ AC42              ;GetDigramGalaxySeed:
  34+ AC42              ;	call	copy_galaxy_to_working
  35+ AC42              ;	jr		GetDigramWorkingSeed
  36+ AC42              ;GetDigramSystemSeed:
  37+ AC42              ;	call	copy_system_to_working
  38+ AC42              ;GetDigramWorkingSeed:
  39+ AC42              ;; ">GetDigram a = digram seed"
  40+ AC42              ;	ld		de,name_expanded
  41+ AC42              ;	ld		b,3
  42+ AC42              ;	ld		a,(WorkingSeeds)
  43+ AC42              ;	and		$40
  44+ AC42              ;	jr		z,.SmallSizeName
  45+ AC42              ;.LargeSizeName:
  46+ AC42              ;	call	NamingLoop
  47+ AC42              ;.SmallSizeName:
  48+ AC42              ;	call	NamingLoop
  49+ AC42              ;	call	NamingLoop
  50+ AC42              ;	call	NamingLoop
  51+ AC42              ;.DoneName:
  52+ AC42              ;	ex		de,hl
  53+ AC42              ;	ld		(hl),0
  54+ AC42              ;	ex		de,hl
  55+ AC42              ;	ret
  56+ AC42
  57+ AC42
  58+ AC42
  59+ AC42              ;GetDigramWorkingSeed:
  60+ AC42              ;	MESSAGE ">GetDigram a = digram seed b = length"
  61+ AC42              ;	ld		b,5					; working seed
  62+ AC42              ;	ld		de,name_expanded
  63+ AC42              ;.ExpansionLoop:
  64+ AC42              ;	push	bc
  65+ AC42              ;	ld		hl,WorkingSeeds
  66+ AC42              ;	ld		a,b
  67+ AC42              ;	add		hl,a
  68+ AC42              ;	ld		a,(hl)	; a = first byte of name seed
  69+ AC42              ;	and 	$1F					; Keep bottom 5 bits only
  70+ AC42              ;	cp		0					; 0 = skip 2 chars
  71+ AC42              ;	jr		z,.SkipPhrase
  72+ AC42              ;	or		&80					; set buit 7 high (probabtyl capitalisation)
  73+ AC42              ;	call	TT27
  74+ AC42              ;.SkipPhrase:
  75+ AC42              ;	push	de
  76+ AC42              ;	call	next_working_seed
  77+ AC42              ;	pop		de
  78+ AC42              ;	pop		bc
  79+ AC42              ;	djnz	GetDigramWorkingSeed
  80+ AC42              ;.DoneName:
  81+ AC42              ;	ex		de,hl
  82+ AC42              ;	ld		(hl),0
  83+ AC42              ;	ex		de,hl
  84+ AC42              ;	ret
  85+ AC42              ;
  86+ AC42              ;ExpandToken:
  87+ AC42              ;	DE = target
  88+ AC42              ;	a = token
  89+ AC42              ;
  90+ AC42              ;PlanetDigram:
  91+ AC42              ;	cp		&A0							; >- 160
  92+ AC42              ;	jr		c,MorePage4
  93+ AC42              ;	and		$7F							; 128 to 159 now 0 to 31
  94+ AC42              ;	asl		2							; Multiply by 2
  95+ AC42              ;	ld		hl, name_digrams2
  96+ AC42              ;	add		hl,a
  97+ AC42              ;	ld		a,(hl)
  98+ AC42              ;	call	ProcessTextToken
  99+ AC42              ;	inc		hl
 100+ AC42              ;	ld		a,(hl)
 101+ AC42              ;	cp		'?'
 102+ AC42              ;	ret		z
 103+ AC42              ;	call	ProcessTextToken
 104+ AC42              ;	ret
 105+ AC42              ;MorePage4:
 106+ AC42              ;	sub		$A0
 107+ AC42              ;ExtraTokenCheck:
 108+ AC42              ;	push	de							; save target address
 109+ AC42              ;	push	bc
 110+ AC42              ;	ld		b,a
 111+ AC42              ;	ld		hl,varV
 112+ AC42              ;	ld		(VarV),0400
 113+ AC42              ;	ld		(varV),a
 114+ AC42              ;	ld
 115+ AC42              ;
 116+ AC42              ;		.TT43	\ Token > 127 page4 token or planet digram.
 117+ AC42              ;C9 A0                   CMP #&A0	      \ >= #160 ?
 118+ AC42              ;B0 14                   BCS TT47	      \ more page4, subtract #160
 119+ AC42              ;29 7F                   AND #&7F	      \ else token 128to159  -> 0 to 31
 120+ AC42              ;0A                      ASL A		      \ *= 2
 121+ AC42              ;A8                      TAY 		      \ digram index = 0to62
 122+ AC42              ;B9 80 08                LDA &0880,Y \ QQ16,Y  \ ALLEXEGEZACEBISOUSESARMAINDIREA?ER  etc.
 123+ AC42              ;20 9A 33                JSR &339A   \ TT27    \ process text token
 124+ AC42              ;B9 81 08                LDA &0881,Y \ QQ16+1,Y \ 2nd character of diagram. Flight copied down from docked code.
 125+ AC42              ;C9 3F                   CMP #&3F	      \ is second letter '?'
 126+ AC42              ;F0 40                   BEQ TT48    	      \ rts, name has odd-number of letters.
 127+ AC42              ;4C 9A 33                JMP &339A   \ TT27    \ process text token
 128+ AC42              ;
 129+ AC42              ;	.TT47	\ more page4, subtract #160
 130+ AC42              ;E9 A0                   SBC #&A0	\ -= 160
 131+ AC42              ;	.ex	\ -> &342D \ extra, token >= 96 or Acc = 128to145 or -=160
 132+ AC42              ;AA                      TAX 		\ copy of word index
 133+ AC42              ;A9 00                   LDA #0		\ page 4 words lo  #QQ18 MOD 256
 134+ AC42              ;85 22                   STA &22		\ V
 135+ AC42              ;A9 04                   LDA #4		\ page 4 words hi  #QQ18 DIV 256
 136+ AC42              ;85 23                   STA &23		\ V+1
 137+ AC42              ;A0 00                   LDY #0
 138+ AC42              ;8A                      TXA 		\ token = word index
 139+ AC42              ;F0 13                   BEQ TT50	\ if X=0 then Y offset to word correct
 140+ AC42              ;	.TT51	\ counters Y letter, X token
 141+ AC42              ;B1 22                   LDA (&22),Y	\ (V),Y
 142+ AC42              ;F0 07                   BEQ TT49	\ exit as word ended
 143+ AC42              ;C8                      INY 		\ letter count
 144+ AC42              ;D0 F9                   BNE TT51	\ loop Y
 145+ AC42              ;E6 23                   INC &23	  \ V+1 \ next page as Y reached 256
 146+ AC42              ;D0 F5                   BNE TT51    	\ guaranteed, loop Y letter
 147+ AC42              ;	.TT49	\ word ended
 148+ AC42              ;C8                      INY
 149+ AC42              ;D0 02                   BNE TT59    	\ next word
 150+ AC42              ;E6 23                   INC &23	  \ V+1	\ next page as Y reached 256
 151+ AC42              ;	.TT59	\ next word
 152+ AC42              ;CA                      DEX 		\ token count
 153+ AC42              ;D0 ED                   BNE TT51	\ loop X token
 154+ AC42              ;	.TT50	\ token X = 0, counter Y offset to word correct
 155+ AC42              ;98                      TYA
 156+ AC42              ;48                      PHA 		\ store Yindex
 157+ AC42              ;A5 23                   LDA &23		\ V+1
 158+ AC42              ;48                      PHA 		\ correct pointer hi
 159+ AC42              ;B1 22                   LDA (&22),Y 	\ (V),Y
 160+ AC42              ;49 23                   EOR #&23	\ decode '#'
 161+ AC42              ;20 9A 33                JSR &339A \ TT27 \ process text token to next depth
 162+ AC42              ;68                      PLA 		\ restore this depth's Vhi
 163+ AC42              ;85 23                   STA &23		\ V+1
 164+ AC42              ;68                      PLA
 165+ AC42              ;A8                      TAY 		\ restore this depth's Yindex
 166+ AC42              ;C8                      INY 		\ next letter
 167+ AC42              ;D0 02                   BNE P%+4	\ not zero so skip next page
 168+ AC42              ;E6 23                   INC &23		\ V+1
 169+ AC42              ;B1 22                   LDA (&22),Y	\ (V),Y
 170+ AC42              ;D0 E6                   BNE TT50    	\ loop Y for next letter of page4 token
 171+ AC42              ;	.TT48 	\ rts
 172+ AC42              ;60                      RTS 		\ end of flight token printing TT27
 173+ AC42              ;
 174+ AC42              ;
 175+ AC42              ;
 176+ AC42              ;
 177+ AC42              ;
 178+ AC42              ;
 179+ AC42              ;		.TT27	\ -> &36E0 \ process flight text Token in Acc
 180+ AC42              ;;AA                      TAX		\ copy token to count down
 181+ AC42              ;;F0 DE                   BEQ csh		\ Acc = 0, up to Cash
 182+ AC42              ;30 74                   BMI TT43	\ if token is >  127 down, page4 token or digram
 183+ AC42              ;CA                      DEX
 184+ AC42              ;F0 BC                   BEQ tal		\ Acc == 1, up, print Galaxy number.
 185+ AC42              ;CA                      DEX
 186+ AC42              ;F0 A3                   BEQ ypl		\ Acc == 2, up, present planet in QQ2.
 187+ AC42              ;CA                      DEX
 188+ AC42              ;D0 03                   BNE P%+5	\ hop over, else X == 0
 189+ AC42              ;4C 0A 33                JMP &330A \ cpl \ Acc = 3 print Planet name for seed QQ15
 190+ AC42              ;CA                      DEX
 191+ AC42              ;F0 8A                   BEQ cmn		\ Acc == 4, up, commander name.
 192+ AC42              ;CA                      DEX
 193+ AC42              ;F0 B5                   BEQ fwl		\ Acc == 5, up, fuel followed by cash.
 194+ AC42              ;CA                      DEX
 195+ AC42              ;D0 05                   BNE  P%+7	\ hop over, else X == 0
 196+ AC42              ;A9 80                   LDA #&80	\ Acc == 6, set bit 7 TT27m
 197+ AC42              ;85 72                   STA &72	 	\ QQ17
 198+ AC42              ;60                      RTS
 199+ AC42              ;CA                      DEX 		\ skip Acc ==7
 200+ AC42              ;CA                      DEX
 201+ AC42              ;D0 03                   BNE P%+5	\ hop over to continue Acc 9to127
 202+ AC42              ;86 72                   STX &72	 \ QQ17	\ else Acc ==8, QQ17 set to X = 0
 203+ AC42              ;60                      RTS
 204+ AC42              ;CA                      DEX 		\ continue 9to127 tokens
 205+ AC42              ;F0 38                   BEQ crlf	\ Acc == 9, down, colon on right.
 206+ AC42              ;C9 60                   CMP #&60	\ discard X, look at Acc = token >= 96
 207+ AC42              ;B0 66                   BCS ex   	\ extra >= #&60, far down
 208+ AC42              ;C9 0E                   CMP #14		\ < 14 ?
 209+ AC42              ;90 04                   BCC P%+6	\ goes to Token < 14 or > 31
 210+ AC42              ;C9 20                   CMP #32		\ < 32 ?
 211+ AC42              ;90 28                   BCC qw   	\ 14 <= token A < 32 becomes 128to145 page4 digram
 212+ AC42              ;		\ Token  < 14 or > 31
 213+ AC42              ;A6 72                   LDX &72	 	\ QQ17
 214+ AC42              ;F0 3D                   BEQ TT74 	\ if QQ17 = 0 Upper case, jmp TT26, print character.
 215+ AC42              ;30 11                   BMI TT41 	\ if bit7 set
 216+ AC42              ;24 72                   BIT &72		\ QQ17 has bit6 set too
 217+ AC42              ;70 30                   BVS TT46 	\ If only bit6 set, clear bit6 and print as Upper
 218+ AC42              ;	.TT42	\ Uppercase to lowercase
 219+ AC42              ;C9 41                   CMP #&41	\ < ascii 'A'
 220+ AC42              ;90 06                   BCC TT44 	\ jmp TT26, print character
 221+ AC42              ;C9 5B                   CMP #&5B	\ >= ascii 'Z'+1
 222+ AC42              ;B0 02                   BCS TT44 	\ jmp TT26, print character
 223+ AC42              ;69 20                   ADC #&20	\ else Upper to lowercase
 224+ AC42              ;	.TT44	\ print character as is with TT26
 225+ AC42              ;4C FC 1E                JMP &1EFC \ TT26 \ print character
 226+ AC42              ;
 227+ AC42              ;	.TT41	\ QQ17 bit7 set
 228+ AC42              ;24 72                   BIT &72		\ QQ17
 229+ AC42              ;70 17                   BVS TT45	\ bit6 set too, Nothing or lower.
 230+ AC42              ;C9 41                   CMP #&41	\ < ascii 'A'
 231+ AC42              ;90 22                   BCC TT74 	\ print as is using TT26
 232+ AC42              ;48                      PHA 		\ else store token Acc
 233+ AC42              ;8A                      TXA 		\ QQ17 copy
 234+ AC42              ;09 40                   ORA #&40	\ set bit6 in QQ17 so subsequent ones lower
 235+ AC42              ;85 72                   STA &72	 	\ QQ17
 236+ AC42              ;68                      PLA 		\ restore token
 237+ AC42              ;D0 EC                   BNE TT44	\ guaranteed up, print as Uppercase with TT26.
 238+ AC42              ;
 239+ AC42              ;	.qw	\ Acc = 14to31 becomes 128to145 page4 digram
 240+ AC42              ;69 72                   ADC #&72	\ A+=114 becomes 128to145 page4 digram
 241+ AC42              ;D0 32                   BNE ex		\ guaranteed down, extra.
 242+ AC42              ;
 243+ AC42              ;	.crlf	\ Acc == 9,  colon on right
 244+ AC42              ;A9 15                   LDA #21		\ on right
 245+ AC42              ;85 2C                   STA &2C		\ XC
 246+ AC42              ;D0 97                   BNE TT73	\ guaranteed up, print colon.
 247+ AC42              ;
 248+ AC42              ;	.TT45	\ QQ17 bits 7,6 set. Nothing or lower.
 249+ AC42              ;E0 FF                   CPX #&FF	\ if QQ17 = #&FF
 250+ AC42              ;F0 63                   BEQ TT48	\ rts
 251+ AC42              ;C9 41                   CMP #&41	\ >= ascii 'A' ?
 252+ AC42              ;B0 D0                   BCS TT42	\ Uppercase to lowercase, up.
 253+ AC42              ;	.TT46	\ clear bit6 QQ17 and print as is using TT26
 254+ AC42              ;48                      PHA 		\ push token
 255+ AC42              ;8A                      TXA 		\ QQ17 copy
 256+ AC42              ;29 BF                   AND #&BF	\ clear bit6
 257+ AC42              ;85 72                   STA &72	 	\ QQ17
 258+ AC42              ;68                      PLA 		\ pull token
 259+ AC42              ;	.TT74	\ TT26, print character.
 260+ AC42              ;4C FC 1E                JMP &1EFC	\ TT26
 261+ AC42              ;
 262+ AC42              ;	.TT43	\ Token > 127 page4 token or planet digram.
 263+ AC42              ;C9 A0                   CMP #&A0	      \ >= #160 ?
 264+ AC42              ;B0 14                   BCS TT47	      \ more page4, subtract #160
 265+ AC42              ;29 7F                   AND #&7F	      \ else token 128to159  -> 0 to 31
 266+ AC42              ;0A                      ASL A		      \ *= 2
 267+ AC42              ;A8                      TAY 		      \ digram index = 0to62
 268+ AC42              ;B9 80 08                LDA &0880,Y \ QQ16,Y  \ ALLEXEGEZACEBISOUSESARMAINDIREA?ER  etc.
 269+ AC42              ;20 9A 33                JSR &339A   \ TT27    \ process text token
 270+ AC42              ;B9 81 08                LDA &0881,Y \ QQ16+1,Y \ 2nd character of diagram. Flight copied down from docked code.
 271+ AC42              ;C9 3F                   CMP #&3F	      \ is second letter '?'
 272+ AC42              ;F0 40                   BEQ TT48    	      \ rts, name has odd-number of letters.
 273+ AC42              ;4C 9A 33                JMP &339A   \ TT27    \ process text token
 274+ AC42              ;
 275+ AC42              ;	.TT47	\ more page4, subtract #160
 276+ AC42              ;E9 A0                   SBC #&A0	\ -= 160
 277+ AC42              ;	.ex	\ -> &342D \ extra, token >= 96 or Acc = 128to145 or -=160
 278+ AC42              ;AA                      TAX 		\ copy of word index
 279+ AC42              ;A9 00                   LDA #0		\ page 4 words lo  #QQ18 MOD 256
 280+ AC42              ;85 22                   STA &22		\ V
 281+ AC42              ;A9 04                   LDA #4		\ page 4 words hi  #QQ18 DIV 256
 282+ AC42              ;85 23                   STA &23		\ V+1
 283+ AC42              ;A0 00                   LDY #0
 284+ AC42              ;8A                      TXA 		\ token = word index
 285+ AC42              ;F0 13                   BEQ TT50	\ if X=0 then Y offset to word correct
 286+ AC42              ;	.TT51	\ counters Y letter, X token
 287+ AC42              ;B1 22                   LDA (&22),Y	\ (V),Y
 288+ AC42              ;F0 07                   BEQ TT49	\ exit as word ended
 289+ AC42              ;C8                      INY 		\ letter count
 290+ AC42              ;D0 F9                   BNE TT51	\ loop Y
 291+ AC42              ;E6 23                   INC &23	  \ V+1 \ next page as Y reached 256
 292+ AC42              ;D0 F5                   BNE TT51    	\ guaranteed, loop Y letter
 293+ AC42              ;	.TT49	\ word ended
 294+ AC42              ;C8                      INY
 295+ AC42              ;D0 02                   BNE TT59    	\ next word
 296+ AC42              ;E6 23                   INC &23	  \ V+1	\ next page as Y reached 256
 297+ AC42              ;	.TT59	\ next word
 298+ AC42              ;CA                      DEX 		\ token count
 299+ AC42              ;D0 ED                   BNE TT51	\ loop X token
 300+ AC42              ;	.TT50	\ token X = 0, counter Y offset to word correct
 301+ AC42              ;98                      TYA
 302+ AC42              ;48                      PHA 		\ store Yindex
 303+ AC42              ;A5 23                   LDA &23		\ V+1
 304+ AC42              ;48                      PHA 		\ correct pointer hi
 305+ AC42              ;B1 22                   LDA (&22),Y 	\ (V),Y
 306+ AC42              ;49 23                   EOR #&23	\ decode '#'
 307+ AC42              ;20 9A 33                JSR &339A \ TT27 \ process text token to next depth
 308+ AC42              ;68                      PLA 		\ restore this depth's Vhi
 309+ AC42              ;85 23                   STA &23		\ V+1
 310+ AC42              ;68                      PLA
 311+ AC42              ;A8                      TAY 		\ restore this depth's Yindex
 312+ AC42              ;C8                      INY 		\ next letter
 313+ AC42              ;D0 02                   BNE P%+4	\ not zero so skip next page
 314+ AC42              ;E6 23                   INC &23		\ V+1
 315+ AC42              ;B1 22                   LDA (&22),Y	\ (V),Y
 316+ AC42              ;D0 E6                   BNE TT50    	\ loop Y for next letter of page4 token
 317+ AC42              ;	.TT48 	\ rts
 318+ AC42              ;60                      RTS 		\ end of flight token printing TT27
 319+ AC42              ;
 320+ AC42              ;
 321+ AC42              ;
# file closed: ./Tables/name_digrams.asm
 651  AC42              ;INCLUDE "Tables/inwk_table.asm" This is no longer needed as we will write to univer object bank
 652  AC42
 653  AC42              ; Include all maths libraries to test assembly
 654  AC42
 655  AC42              ;;    INCLUDE "./Maths/addhldesigned.asm"
 656  AC42                  INCLUDE "./Maths/asm_add.asm"
# file opened: ./Maths/asm_add.asm
   1+ AC42              ;; calcs HLB + DEC where B and C are signs
   2+ AC42              ;; result HL with A as sign
   3+ AC42              ;; special handling if result is zero forcign sign bit to be zero
   4+ AC42 78           AHLEquBHLaddCDE:        ld      a,b
   5+ AC43 A9                                   xor     c
   6+ AC44 E6 80                                and     SignOnly8Bit
   7+ AC46                                      JumpIfNegative   .OppositeSigns
   7+ AC46 FA 59 AC    >                        jp		m, .OppositeSigns
   8+ AC49 DD 60        .SameSigns:             ld      ixh,b                      ; ixh = b
   9+ AC4B                                      ClearSignBit b                      ; b = ABS b
   9+ AC4B 78          >                        ld      a,b
   9+ AC4C E6 7F       >                        and     SignMask8Bit
   9+ AC4E 47          >                        ld      b,a
  10+ AC4F 19                                   add     hl,de                      ; hl = hl + de
  11+ AC50 78                                   ld      a,b                        ; a = b + c + carry
  12+ AC51 89                                   adc     c                          ;
  13+ AC52 47                                   ld      b,a                        ;
  14+ AC53 DD 7C                                ld      a,ixh                      ;
  15+ AC55                                      SignBitOnlyA                        ;
  15+ AC55 E6 80       >                        and     SignOnly8Bit
  16+ AC57 B0                                   or      b                          ;
  17+ AC58 C9                                   ret                                ;
  18+ AC59 DD 60        .OppositeSigns:         ld      ixh,b
  19+ AC5B DD 69                                ld      ixl,c
  20+ AC5D                                      ClearSignBit c                      ; c = ABS C
  20+ AC5D 79          >                        ld      a,c
  20+ AC5E E6 7F       >                        and     SignMask8Bit
  20+ AC60 4F          >                        ld      c,a
  21+ AC61 78                                   ld      a,b
  22+ AC62                                      ClearSignBitA
  22+ AC62 E6 7F       >                        and     SignMask8Bit
  23+ AC64 99                                   sbc     c
  24+ AC65                                      JumpIfNegative  .OppositeCDEgtBHL
  24+ AC65 FA 74 AC    >                        jp		m, .OppositeCDEgtBHL
  25+ AC68 ED 52                                sbc     hl,de
  26+ AC6A                                      JumpIfNegative  .OppositeCDEgtBHL
  26+ AC6A FA 74 AC    >                        jp		m, .OppositeCDEgtBHL
  27+ AC6D 47                                   ld      b,a
  28+ AC6E DD 7C                                ld      a,ixh
  29+ AC70                                      SignBitOnlyA                        ;
  29+ AC70 E6 80       >                        and     SignOnly8Bit
  30+ AC72 B0                                   or      b                          ;
  31+ AC73 C9                                   ret                                ;
  32+ AC74 EB           .OppositeCDEgtBHL:      ex      de,hl
  33+ AC75 78                                   ld      a,b
  34+ AC76 41                                   ld      b,c
  35+ AC77 4F                                   ld      c,a
  36+ AC78 C3 59 AC                             jp      .OppositeSigns
  37+ AC7B
  38+ AC7B 78           ADDHLDESignBC:          ld      a,b
  39+ AC7C E6 80                                and     SignOnly8Bit
  40+ AC7E A9                                   xor     c                           ;if b sign and c sign were different then bit 7 of a will be 1 which means
  41+ AC7F                                      JumpIfNegative ADDHLDEsBCOppSGN     ;Signs are opposite there fore we can subtract to get difference
  41+ AC7F FA 8D AC    >                        jp		m, ADDHLDEsBCOppSGN
  42+ AC82 78           ADDHLDEsBCSameSigns:    ld      a,b
  43+ AC83 B1                                   or      c
  44+ AC84                                      JumpIfNegative ADDHLDEsBCSameNeg    ; optimisation so we can just do simple add if both positive
  44+ AC84 FA 89 AC    >                        jp		m, ADDHLDEsBCSameNeg
  45+ AC87 19                                   add     hl,de                       ; both positive so a will already be zero
  46+ AC88 C9                                   ret
  47+ AC89 19           ADDHLDEsBCSameNeg:      add     hl,de
  48+ AC8A 78                                   ld      a,b
  49+ AC8B B1                                   or      c                           ; now set bit for negative value, we won't bother with overflow for now TODO
  50+ AC8C C9                                   ret
  51+ AC8D              ADDHLDEsBCOppSGN:       ClearCarryFlag
  51+ AC8D B7          >                        or a
  52+ AC8E ED 52                                sbc     hl,de
  53+ AC90 38 02                                jr      c,ADDHLDEsBCOppInvert
  54+ AC92 78           ADDHLDEsBCOppSGNNoCarry: ld      a,b                        ; we got here so hl > de therefore we can just take hl's previous sign bit
  55+ AC93 C9                                   ret
  56+ AC94              ADDHLDEsBCOppInvert:    NegHL                               ; if result was zero then set sign to zero (which doing h or l will give us for free)
  56+ AC94 AF          >                    xor a
  56+ AC95 95          >                    sub l
  56+ AC96 6F          >                    ld l,a
  56+ AC97 9F          >                    sbc a,a
  56+ AC98 94          >                    sub h
  56+ AC99 67          >                    ld h,a
  57+ AC9A 78                                   ld      a,b
  58+ AC9B EE 80                                xor     SignOnly8Bit                ; flip sign bit
  59+ AC9D C9                                   ret
  60+ AC9E
  61+ AC9E
  62+ AC9E CB 7C        addhldesigned:          bit     7,h
  63+ ACA0 20 03                                jr      nz,.noneghl
  64+ ACA2 CD 69 B3                             call    negate16hl
  65+ ACA5 CB 7A        .noneghl:               bit     7,d
  66+ ACA7 20 03                                jr      nz,.nonegde
  67+ ACA9 CD 70 B3                             call    negate16de
  68+ ACAC 19           .nonegde:               add     hl,de                       ; do 2'd c add
  69+ ACAD AF                                   xor     a                           ; assume positive
  70+ ACAE CB 7C                                bit     7,h
  71+ ACB0 C8                                   ret     z                           ; if not set then can exit early
  72+ ACB1 CD 69 B3                             call    negate16hl
  73+ ACB4 3E FF                                ld      a,$FF
  74+ ACB6 C9                                   ret
  75+ ACB7
  76+ ACB7
  77+ ACB7              ; HL(2sc) = HL (signed) + A (unsigned), uses HL, DE, A
  78+ ACB7 16 00        HL2cEquHLSgnPlusAusgn:  ld      d,0
  79+ ACB9 5F                                   ld      e,a                         ; set up DE = A
  80+ ACBA 7C                                   ld      a,h
  81+ ACBB E6 7F                                and     SignMask8Bit
  82+ ACBD 28 07                                jr      z,.HLPositive               ; if HL is negative then do HL - A
  83+ ACBF 67           .HLNegative:            ld      h,a                         ; hl = ABS (HL)
  84+ ACC0                                      NegHL                               ; hl = - hl
  84+ ACC0 AF          >                    xor a
  84+ ACC1 95          >                    sub l
  84+ ACC2 6F          >                    ld l,a
  84+ ACC3 9F          >                    sbc a,a
  84+ ACC4 94          >                    sub h
  84+ ACC5 67          >                    ld h,a
  85+ ACC6              .HLPositive:            ClearCarryFlag                      ; now do adc hl,de
  85+ ACC6 B7          >                        or a
  86+ ACC7 ED 5A                                adc     hl,de                       ; aftert his hl will be 2's c
  87+ ACC9 C9                                   ret
  88+ ACCA
  89+ ACCA 5F           HLEquHLSgnPlusAusgn:    ld      e,a
  90+ ACCB 7C                                   ld      a,h
  91+ ACCC E6 7F                                and     SignMask8Bit
  92+ ACCE 20 04                                jr      nz,.HLNegative              ; if HL is negative then do HL - A
  93+ ACD0 7B           .HLPositive:            ld      a,e                         ; else its HL + A
  94+ ACD1 ED 31                                add     hl,a
  95+ ACD3 C9                                   ret
  96+ ACD4              .HLNegative:            ClearSignBit    h                   ; Clear sign of HL
  96+ ACD4 7C          >                        ld      a,h
  96+ ACD5 E6 7F       >                        and     SignMask8Bit
  96+ ACD7 67          >                        ld      h,a
  97+ ACD8                                      NegHL                               ; and convert to 2's C
  97+ ACD8 AF          >                    xor a
  97+ ACD9 95          >                    sub l
  97+ ACDA 6F          >                    ld l,a
  97+ ACDB 9F          >                    sbc a,a
  97+ ACDC 94          >                    sub h
  97+ ACDD 67          >                    ld h,a
  98+ ACDE 16 00                                ld      d,0
  99+ ACE0                                      ClearCarryFlag
  99+ ACE0 B7          >                        or a
 100+ ACE1 ED 52                                sbc     hl,de                       ; now add a to -ve HL , add does not do 2's c
 101+ ACE3 FA EB AC                             jp      m,.FlipResult               ; if it was negative then its really positive
 102+ ACE6                                      SetSignBit      h
 102+ ACE6 7C          >                        ld      a,h
 102+ ACE7 F6 80       >                        or      SignOnly8Bit
 102+ ACE9 67          >                        ld      h,a
 103+ ACEA C9                                   ret
 104+ ACEB              .FlipResult:            NegHL                               ; so if -hl + A => HL - A => HL - DE is negative then the actual result is +ve
 104+ ACEB AF          >                    xor a
 104+ ACEC 95          >                    sub l
 104+ ACED 6F          >                    ld l,a
 104+ ACEE 9F          >                    sbc a,a
 104+ ACEF 94          >                    sub h
 104+ ACF0 67          >                    ld h,a
 105+ ACF1 C9                                   ret
 106+ ACF2
 107+ ACF2
 108+ ACF2
 109+ ACF2              ; HL = HL (signed) + A (unsigned), uses HL, DE, A
 110+ ACF2 57           AddAusngToHLsng:        ld      d,a
 111+ ACF3 5C                                   ld      e,h
 112+ ACF4 7C                                   ld      a,h
 113+ ACF5 E6 7F                                and     SignMask8Bit
 114+ ACF7 67                                   ld      h,a
 115+ ACF8 7A                                   ld      a,d
 116+ ACF9 ED 31                                add     hl,a
 117+ ACFB 7B                                   ld      a,e
 118+ ACFC E6 80                                and     SignOnly8Bit
 119+ ACFE B4                                   or      h
 120+ ACFF C9                                   ret
 121+ AD00              ; HL = A (unsigned) - HL (signed), uses HL, DE, BC, A
 122+ AD00 44           HLEequAusngMinusHLsng:  ld      b,h
 123+ AD01 4F                                   ld      c,a
 124+ AD02 78                                   ld      a,b
 125+ AD03 E6 80                                and     SignOnly8Bit
 126+ AD05 20 08                                jr      nz,.DoAdd
 127+ AD07 EB           .DoSubtract:            ex      de,hl               ; move hl into de
 128+ AD08 26 00                                ld      h,0                 ; hl = a
 129+ AD0A 69                                   ld      l,c
 130+ AD0B                                      ClearCarryFlag
 130+ AD0B B7          >                        or a
 131+ AD0C ED 52                                sbc     hl,de               ; hl = a - hl
 132+ AD0E C9                                   ret
 133+ AD0F 79           .DoAdd:                 ld      a,c
 134+ AD10 ED 31                                add hl,a
 135+ AD12 C9                                   ret
 136+ AD13              ;tested mathstestsun2
 137+ AD13              ; DEL = DEL + BCH signed, uses BC, DE, HL, IY, A
 138+ AD13 78           AddBCHtoDELsigned:      ld      a,b                 ; Are the values both the same sign?
 139+ AD14 AA                                   xor     d                   ; .
 140+ AD15 E6 80                                and     SignOnly8Bit        ; .
 141+ AD17 20 19                                jr      nz,.SignDifferent   ; .
 142+ AD19 78           .SignSame:              ld      a,b                 ; if they are then we only need 1 signe
 143+ AD1A E6 80                                and     SignOnly8Bit        ; so store it in iyh
 144+ AD1C FD 67                                ld      iyh,a               ;
 145+ AD1E 78                                   ld      a,b                 ; bch = abs bch
 146+ AD1F E6 7F                                and     SignMask8Bit        ; .
 147+ AD21 47                                   ld      b,a                 ; .
 148+ AD22 7A                                   ld      a,d                 ; del = abs del
 149+ AD23 E6 7F                                and     SignMask8Bit        ; .
 150+ AD25 57                                   ld      d,a                 ; .
 151+ AD26 7C                                   ld      a,h                 ; l = h + l
 152+ AD27 85                                   add     l                   ; .
 153+ AD28 6F                                   ld      l,a                 ; .
 154+ AD29 79                                   ld      a,c                 ; e = e + c + carry
 155+ AD2A 8B                                   adc     e                   ; .
 156+ AD2B 5F                                   ld      e,a                 ; .
 157+ AD2C 78                                   ld      a,b                 ; d = b + d + carry (signed)
 158+ AD2D 8A                                   adc     d                   ;
 159+ AD2E FD B4                                or      iyh                 ; d = or back in sign bit
 160+ AD30 57                                   ld      d,a                 ;
 161+ AD31 C9                                   ret                         ; done
 162+ AD32 78           .SignDifferent:         ld      a,b                 ; bch = abs bch
 163+ AD33 FD 67                                ld      iyh,a               ; iyh = b sign
 164+ AD35 E6 7F                                and     SignMask8Bit        ; .
 165+ AD37 47                                   ld      b,a                 ; .
 166+ AD38 7A                                   ld      a,d                 ; del = abs del
 167+ AD39 FD 6F                                ld      iyl,a               ; iyl = d sign
 168+ AD3B E6 7F                                and     SignMask8Bit        ; .
 169+ AD3D 57                                   ld      d,a                 ; .
 170+ AD3E E5                                   push    hl                  ; save hl
 171+ AD3F 60 69                                ld      hl,bc               ; hl = bc - de, if bc < de then there is a carry
 172+ AD41 ED 52                                sbc     hl,de               ;
 173+ AD43 E1                                   pop     hl                  ;
 174+ AD44 38 0E                                jr      c,.BCHltDEL
 175+ AD46 20 1C                                jr      nz,.DELltBCH        ; if the result was not zero then DEL > BCH
 176+ AD48 7C           .BCeqDE:                ld      a,h                 ; if the result was zero then check lowest bits
 177+ AD49                                      JumpIfALTNusng l,.BCHltDEL
 177+ AD49 BD          >                        cp      l
 177+ AD4A DA 54 AD    >                        jp		c, .BCHltDEL
 178+ AD4D 20 15                                jr      nz,.DELltBCH
 179+ AD4F              ; The same so its just zero
 180+ AD4F AF           .BCHeqDEL:              xor     a                  ; its just zero
 181+ AD50 57                                   ld      d,a                ; .
 182+ AD51 5F                                   ld      e,a                ; .
 183+ AD52 6F                                   ld      l,a                ; .
 184+ AD53 C9                                   ret                        ; .
 185+ AD54              ;BCH is less than DEL so its DEL - BCH the sort out sign
 186+ AD54 7D           .BCHltDEL:              ld      a,l                ; l = l - h                      ; ex
 187+ AD55 94                                   sub     h                  ; .                              ;   01D70F DEL
 188+ AD56 6F                                   ld      l,a                ; .                              ;  -000028 BCH
 189+ AD57 7B                                   ld      a,e                ; e = e - c - carry              ;1.
 190+ AD58 99                                   sbc     c                  ; .                              ;
 191+ AD59 5F                                   ld      e,a                ; .                              ;
 192+ AD5A 7A                                   ld      a,d                ; d = d - b - carry              ;
 193+ AD5B 98                                   sbc     b                  ; .                              ;
 194+ AD5C 57                                   ld      d,a                ; .                              ;
 195+ AD5D FD 7D                                ld      a,iyl              ; as d was larger, take d sign
 196+ AD5F E6 80                                and     SignOnly8Bit       ;
 197+ AD61 B2                                   or      d                  ;
 198+ AD62 57                                   ld      d,a                ;
 199+ AD63 C9                                   ret
 200+ AD64 7C           .DELltBCH:              ld      a,h                ; l = h - l
 201+ AD65 95                                   sub     l                  ;
 202+ AD66 6F                                   ld      l,a                ;
 203+ AD67 79                                   ld      a,c                ; e = c - e - carry
 204+ AD68 9B                                   sbc     e                  ;
 205+ AD69 5F                                   ld      e,a                ;
 206+ AD6A 78                                   ld      a,b                ; d = b - d - carry
 207+ AD6B 9A                                   sbc     d                  ;
 208+ AD6C 57                                   ld      d,a                ;
 209+ AD6D FD 7C                                ld      a,iyh              ; as b was larger, take b sign into d
 210+ AD6F E6 80                                and     SignOnly8Bit       ;
 211+ AD71 B2                                   or      d                  ;
 212+ AD72 57                                   ld      d,a                ;
 213+ AD73 C9                                   ret
 214+ AD74
 215+ AD74
 216+ AD74              ;BHL = AHL + DE where AHL = 16 bit + A sign and DE = 15 bit signed
 217+ AD74 47           AddAHLtoDEsigned:       ld      b,a                     ; B = A , C = D (save sign bytes)
 218+ AD75 4A                                   ld      c,d                     ; .
 219+ AD76 A9                                   xor     c                       ; A = A xor C
 220+ AD77 CB BA                                res     7,d                     ; clear sign bit of D
 221+ AD79 20 02                                jr nz,  .OppositeSigns          ; if A xor C is opposite signs job to A0A1
 222+ AD7B 19                                   add     hl,de                   ; HL = HL + DE
 223+ AD7C C9                                   ret                             ; return
 224+ AD7D ED 52        .OppositeSigns:         sbc     hl,de                   ; HL = HL -DE
 225+ AD7F D0                                   ret     nc                      ; if no carry return
 226+ AD80 19                                   add     hl,de                   ; else HL = HL + DE
 227+ AD81 EB                                   ex      de,hl                   ;      swap HL and DE
 228+ AD82 A7                                   and     a                       ;      reset carry
 229+ AD83 ED 52                                sbc     hl,de                   ;      HL = DE - HL (as they were swapped)
 230+ AD85 41                                   ld      b,c                     ;      B = sign of C
 231+ AD86 C9                                   ret                             ;      ret
 232+ AD87
 233+ AD87
 234+ AD87
 235+ AD87              ; a = value to add
 236+ AD87              ; b = offset (equivalent to regX)
 237+ AD87              ; returns INWK [x] set to new value
 238+ AD87              addINWKbasigned:
 239+ AD87 21 0C C0     		ld 		hl,UBnKxlo                  ; hl = INWK 0
 240+ AD8A 4F           		ld      c,a                         ; preserve a
 241+ AD8B 78           		ld		a,b
 242+ AD8C ED 31        		add		hl,a                        ; hl = INWK[x]
 243+ AD8E 79                   ld      a,c                         ; get back a value
 244+ AD8F E6 80                and     $80                         ; get sign bit from a
 245+ AD91 47                   ld      b,a                         ; now b = sign bit of a
 246+ AD92 79                   ld      a,c                         ; a = original value
 247+ AD93 E6 7F                and     SignMask8Bit                ; a = unsigned version of original value
 248+ AD95              ; hl = unsigned version of INWK0[b]
 249+ AD95              ; a = value to add, also in c which will optimise later code
 250+ AD95              ; b = sign bit of a ( in old code was varT)
 251+ AD95              addhlcsigned:
 252+ AD95 5E                   ld      e,(hl)                      ; de = INKK value
 253+ AD96 23                   inc     hl
 254+ AD97 56                   ld      d,(hl)
 255+ AD98 23                   inc     hl                          ; now pointing a sign
 256+ AD99 7E                   ld      a,(hl)                      ; a = sign bit
 257+ AD9A EB                   ex      de,hl                       ; hl = value now and de = pointer to sign
 258+ AD9B A8                   xor     b                           ; a = resultant sign
 259+ AD9C CB 7F                bit     7,a                         ; is it negative?
 260+ AD9E 28 2B                jr      z,.postivecalc
 261+ ADA0              .negativecalc:
 262+ ADA0 7C                   ld      a,h
 263+ ADA1 E6 7F                and     SignMask8Bit
 264+ ADA3 67                   ld      h,a                         ; strip high bit
 265+ ADA4 DD 68                ld      ixl,b                       ; save sign bit from b into d
 266+ ADA6 06 00                ld      b,0                         ; c = value to subtract so now bc = value to subtract
 267+ ADA8 ED 42                sbc     hl,bc
 268+ ADAA DD 45                ld      b,ixl                       ; get sign back
 269+ ADAC EB                   ex      de,hl                       ; de = value hl = pointer to sign
 270+ ADAD 7E                   ld      a,(hl)                      ;
 271+ ADAE E6 7F                and     SignMask8Bit
 272+ ADB0 DE 00                sbc     a,0                         ; subtract carry which could flip sign bit
 273+ ADB2 F6 80                or      $80                         ; set bit 0
 274+ ADB4 A8                   xor     b                           ; flip bit on sign (var T)
 275+ ADB5 77                   ld      (hl),a
 276+ ADB6 2B                   dec     hl
 277+ ADB7 72                   ld      (hl),d
 278+ ADB8 2B                   dec     hl
 279+ ADB9 73                   ld      (hl),e                      ; write out DE to INKW[x]0,1
 280+ ADBA EB                   ex      de,hl                       ; hl = value de = pointer to start if INKW[x]
 281+ ADBB D8                   ret     c                           ; if carry was set then we can exit now
 282+ ADBC              .nocarry:
 283+ ADBC                      NegHL                               ; get hl back to positive, a is still inkw+2
 283+ ADBC AF          >                    xor a
 283+ ADBD 95          >                    sub l
 283+ ADBE 6F          >                    ld l,a
 283+ ADBF 9F          >                    sbc a,a
 283+ ADC0 94          >                    sub h
 283+ ADC1 67          >                    ld h,a
 284+ ADC2 B0                   or      b                           ; b is still varT
 285+ ADC3 EB                   ex      de,hl                       ; de = value hl = pointer to start if INKW[x]
 286+ ADC4 73                   ld      (hl),e
 287+ ADC5 23                   inc     hl
 288+ ADC6 72                   ld      (hl),d
 289+ ADC7 23                   inc     hl
 290+ ADC8 77                   ld      (hl),a                      ; set sign bit in INKK[x]+2
 291+ ADC9 EB                   ex      de,hl                       ; hl = value de = pointer to sign
 292+ ADCA C9                   ret
 293+ ADCB              .postivecalc:
 294+ ADCB DD 68                ld      ixl,b
 295+ ADCD 06 00                ld      b,0
 296+ ADCF 19                   add     hl,de
 297+ ADD0 EB                   ex      de,hl
 298+ ADD1 DD B5                or      ixl                         ; we don;t need to recover b here
 299+ ADD3 77                   ld      (hl),a                      ; push sign into INWK[x]
 300+ ADD4 2B                   dec     hl
 301+ ADD5 72                   ld      (hl),d
 302+ ADD6 2B                   dec     hl
 303+ ADD7 73                   ld      (hl),e
 304+ ADD8 C9                   ret
 305+ ADD9
 306+ ADD9              ;a = a AND 80 (i.e. bit 7) =>carry       so value is -
 307+ ADD9              ;MVT1
 308+ ADD9              ;    S = bits 6 to 0 of A
 309+ ADD9              ;    A = sign bit => T
 310+ ADD9              ;    xor sign bit with ink[x] Sign
 311+ ADD9              ;    if negative thn its not an add
 312+ ADD9              ;
 313+ ADD9              ;        and h, 7F
 314+ ADD9              ;        b = 0
 315+ ADD9              ;        c = varS
 316+ ADD9              ;        subtract INW[X]hilo, bc
 317+ ADD9              ;        retain carry
 318+ ADD9              ;        get INKW[x]Sign
 319+ ADD9              ;        and 7F
 320+ ADD9              ;        subtract carry (so will go negtive if negative)
 321+ ADD9              ;        xor bit 7 of h with T to flip bit
 322+ ADD9              ;        write to INKW[x]Sign
 323+ ADD9              ;
 324+ ADD9              ;    else
 325+ ADD9              ;MV10.
 326+ ADD9              ;        add INWK[x]hi,lo, varS
 327+ ADD9              ;        or      sign bit
 328+ ADD9
 329+ ADD9
# file closed: ./Maths/asm_add.asm
 657  ADD9                  INCLUDE "./Maths/Utilities/AddDEToCash.asm"
# file opened: ./Maths/Utilities/AddDEToCash.asm
   1+ ADD9              ; Note its big endian
   2+ ADD9 2A 41 A3     addDEtoCash:            ld      hl,(Cash)
   3+ ADDC 19                                   add     hl,de
   4+ ADDD 22 41 A3                             ld      (Cash),hl
   5+ ADE0 11 00 00                             ld      de,0
   6+ ADE3 2A 43 A3                             ld      hl,(Cash+2)
   7+ ADE6 ED 5A                                adc     hl,de
   8+ ADE8 22 43 A3                             ld      (Cash+2),hl
   9+ ADEB C9                                   ret
  10+ ADEC
  11+ ADEC 2A 41 A3     subDEfromCash:          ld      hl,(Cash)
  12+ ADEF 7C                                   ld      a,h
  13+ ADF0 B5                                   or      l
  14+ ADF1 2A 43 A3                             ld      hl,(Cash+2)
  15+ ADF4 B4                                   or      h
  16+ ADF5 B5                                   or      l
  17+ ADF6 C8                                   ret     z               ; No cash return
  18+ ADF7 B7                                   or      a
  19+ ADF8 2A 41 A3                             ld      hl,(Cash)
  20+ ADFB ED 52                                sbc     hl,de
  21+ ADFD 22 41 A3                             ld      (Cash),hl
  22+ AE00 11 00 00                             ld      de,0
  23+ AE03 2A 43 A3                             ld      hl,(Cash+2)
  24+ AE06 ED 52                                sbc     hl,de
  25+ AE08 22 43 A3                             ld      (Cash+2),hl
  26+ AE0B                                      JumpOnBitSet h,7,.ZeroCash
  26+ AE0B CB 7C       >                        bit 	7,h
  26+ AE0D C2 11 AE    >                        jp      nz,.ZeroCash
  27+ AE10 C9                                   ret
  28+ AE11 21 00 00     .ZeroCash:              ld      hl,0
  29+ AE14 22 41 A3                             ld      (Cash),hl
  30+ AE17 22 43 A3                             ld      (Cash+2),hl
  31+ AE1A C9                                   ret
  32+ AE1B
# file closed: ./Maths/Utilities/AddDEToCash.asm
 658  AE1B                  INCLUDE "./Maths/DIVD3B2.asm"
# file opened: ./Maths/DIVD3B2.asm
   1+ AE1B              ;INPUTS: ahl = dividend cde = divisor
   2+ AE1B              ;OUTPUTS: cde = quotient ahl = remainder
   3+ AE1B 47           Div24by24:              ld b,a
   4+ AE1C E5                                   push hl
   5+ AE1D DD E1                                pop ix
   6+ AE1F 2E 18                                ld l,24
   7+ AE21 E5                                   push hl
   8+ AE22 AF                                   xor a
   9+ AE23 67                                   ld h,a
  10+ AE24 6F                                   ld l,a
  11+ AE25 DD 29        .Div24by24loop:         add ix,ix
  12+ AE27 CB 10                                rl b
  13+ AE29 ED 6A                                adc hl,hl
  14+ AE2B 17                                   rla
  15+ AE2C B9                                   cp c
  16+ AE2D 38 0C                                jr c,.Div24by24skip
  17+ AE2F 20 05                                jr nz,.Div24by24setbit
  18+ AE31 ED 52                                sbc hl,de
  19+ AE33 19                                   add hl,de
  20+ AE34 38 05                                jr c,.Div24by24skip
  21+ AE36 ED 52        .Div24by24setbit:       sbc hl,de
  22+ AE38 99                                   sbc a,c
  23+ AE39 DD 23                                inc ix
  24+ AE3B E3           .Div24by24skip:         ex (sp),hl
  25+ AE3C 2D                                   dec l
  26+ AE3D E3                                   ex (sp),hl
  27+ AE3E 20 E5                                jr nz,.Div24by24loop
  28+ AE40 D1                                   pop de
  29+ AE41 48                                   ld c,b
  30+ AE42 DD E5                                push ix
  31+ AE44 D1                                   pop de
  32+ AE45 C9                                   ret
  33+ AE46
  34+ AE46 FD 67        Div24by24ASigned:       ld      iyh,a
  35+ AE48 E6 7F                                and     SignMask8Bit
  36+ AE4A CD 1B AE                             call    Div24by24
  37+ AE4D F5                                   push    af
  38+ AE4E FD 7C                                ld      a,iyh
  39+ AE50 E6 80                                and     SignOnly8Bit
  40+ AE52 B1                                   or      c
  41+ AE53 4F                                   ld      c,a
  42+ AE54 F1                                   pop     af
  43+ AE55 C9                                   ret
  44+ AE56
  45+ AE56                                      ; CDE = AHL/CDE, AHL = remainder
  46+ AE56 FD 67        Div24by24LeadSign:      ld      iyh,a           ; Preserve signed in IYL
  47+ AE58 A9                                   xor     c               ; flip sign if negative
  48+ AE59 E6 80                                and     SignOnly8Bit    ; .
  49+ AE5B FD 6F                                ld      iyl,a           ; .
  50+ AE5D 79                                   ld      a,c             ; make both values ABS
  51+ AE5E E6 7F                                and     SignMask8Bit    ; .
  52+ AE60 4F                                   ld      c,a             ; .
  53+ AE61 FD 7C                                ld      a,iyh           ; .
  54+ AE63 E6 7F                                and     SignMask8Bit    ; .
  55+ AE65 CD 1B AE                             call    Div24by24       ; do abs divide
  56+ AE68 FD B5                                or      iyl             ; bring in sign bit
  57+ AE6A FD 67                                ld      iyh,a           ; save a
  58+ AE6C 79                                   ld      a,c             ; sort sign for c
  59+ AE6D FD B5                                or      iyl             ;
  60+ AE6F 4F                                   ld      c,a             ;
  61+ AE70 FD 7C                                ld      a,iyh           ; sort sign of a
  62+ AE72 C9                                   ret
  63+ AE73
  64+ AE73              ; --------------------------------------------------------------
  65+ AE73              ;divdide by 16 using undocumented instrunctions
  66+ AE73              ;Input: BC = Dividend, DE = Divisor, HL = 0
  67+ AE73              ;Output: BC = Quotient, HL = Remainder
  68+ AE73 47           PROJ256mulAdivQ:        ld      b,a
  69+ AE74 0E 00                                ld      c,0
  70+ AE76 16 00                                ld      d,0
  71+ AE78 3A DF 9D                             ld      a,(varQ)
  72+ AE7B 5F                                   ld      e,a
  73+ AE7C 21 00 00     PROJDIV16UNDOC:         ld      hl,0
  74+ AE7F 78                                   ld      a,b
  75+ AE80 06 10                                ld      b,16
  76+ AE82 CB 31        PROJDIV16UNDOCLOOP:     sll     c       ; unroll 16 times
  77+ AE84 17                                   rla             ; ...
  78+ AE85 ED 6A                                adc     hl,hl       ; ...
  79+ AE87 ED 52                                sbc     hl,de       ; ...
  80+ AE89 30 02                                jr      nc,PROJDIV16UNDOCSKIP       ; ...
  81+ AE8B 19                                   add     hl,de       ; ...
  82+ AE8C 0D                                   dec     c       ; ...
  83+ AE8D 10 F3        PROJDIV16UNDOCSKIP:     djnz    PROJDIV16UNDOCLOOP
  84+ AE8F 79                                   ld      a,c
  85+ AE90 32 E0 9D                             ld      (varR),a
  86+ AE93 C9                                   ret
  87+ AE94
  88+ AE94
  89+ AE94
  90+ AE94
# file closed: ./Maths/DIVD3B2.asm
 659  AE94                  INCLUDE "./Maths/multiply.asm"
# file opened: ./Maths/multiply.asm
   1+ AE94              HLequSRmulQdiv256:      ;X.Y=x1lo.S*M/256  	\ where M/256 is gradient
   2+ AE94 2A E0 9D                             ld  hl,(varRS)
   3+ AE97 3A DF 9D                             ld  a,(varQ)
   4+ AE9A C5 D5        HLeqyHLmulAdiv256:      push    bc,,de
   5+ AE9C 11 00 00                             ld  de,0        ; de = XY
   6+ AE9F 47                                   ld  b,a         ; b = Q
   7+ AEA0                                      ShiftHLRight1
   7+ AEA0 CB 3C       >			   srl h
   7+ AEA2 CB 1D       >			   rr  l
   8+ AEA4 CB 20                                sla b
   9+ AEA6 30 03                                jr  nc,.LL126
  10+ AEA8 EB           .LL125:                 ex de,hl
  11+ AEA9 19                                   add hl,de
  12+ AEAA EB                                   ex  de,hl       ; de = de + rs
  13+ AEAB              .LL126:                 ShiftHLRight1
  13+ AEAB CB 3C       >			   srl h
  13+ AEAD CB 1D       >			   rr  l
  14+ AEAF CB 20                                sla b
  15+ AEB1 38 F5                                jr      c,.LL125
  16+ AEB3 20 F6                                jr      nz,.LL126
  17+ AEB5 EB                                   ex      de,hl   ; hl = result
  18+ AEB6 D1 C1                                pop     bc,,de
  19+ AEB8 C9                                   ret
  20+ AEB9
  21+ AEB9
  22+ AEB9              MacroDEEquQmulASigned:  MACRO
  23+ AEB9 ~                                    ld      d,a                         ; save a into d
  24+ AEB9 ~                                    ld      a,(varQ)
  25+ AEB9 ~                                    ld      e,a
  26+ AEB9 ~                                    xor     d                           ; a = a xor var Q
  27+ AEB9 ~                                    and     SignOnly8Bit
  28+ AEB9 ~                                    ld      b,a                         ; b = sign of a xor q
  29+ AEB9 ~                                    ld      a,d                         ; d = abs d (or a reg)
  30+ AEB9 ~                                    and     SignMask8Bit
  31+ AEB9 ~                                    ld      d,a
  32+ AEB9 ~                                    ld      a,e                         ; e = abs e (or varQ)
  33+ AEB9 ~                                    and     SignMask8Bit
  34+ AEB9 ~                                    ld      e,a
  35+ AEB9 ~                                    mul                                 ; de = a * Q
  36+ AEB9 ~                                    ld      a,d
  37+ AEB9 ~                                    or      b                           ; de = a * Q leading sign bit
  38+ AEB9 ~                                    ld      d,a
  39+ AEB9                                      ENDM
  40+ AEB9
  41+ AEB9
  42+ AEB9
  43+ AEB9                                 ; .MAD	\ -> &22AD  \ Multiply and Add  (DE also) X.A(Lo.Hi) = Q*A + R.S (Lo.Hi)
  44+ AEB9              madXAequQmulAaddRS:     MacroDEEquQmulASigned
  44+ AEB9 57          >                        ld      d,a                         ; save a into d
  44+ AEBA 3A DF 9D    >                        ld      a,(varQ)
  44+ AEBD 5F          >                        ld      e,a
  44+ AEBE AA          >                        xor     d                           ; a = a xor var Q
  44+ AEBF E6 80       >                        and     SignOnly8Bit
  44+ AEC1 47          >                        ld      b,a                         ; b = sign of a xor q
  44+ AEC2 7A          >                        ld      a,d                         ; d = abs d (or a reg)
  44+ AEC3 E6 7F       >                        and     SignMask8Bit
  44+ AEC5 57          >                        ld      d,a
  44+ AEC6 7B          >                        ld      a,e                         ; e = abs e (or varQ)
  44+ AEC7 E6 7F       >                        and     SignMask8Bit
  44+ AEC9 5F          >                        ld      e,a
  44+ AECA ED 30       >                        mul                                 ; de = a * Q
  44+ AECC 7A          >                        ld      a,d
  44+ AECD B0          >                        or      b                           ; de = a * Q leading sign bit
  44+ AECE 57          >                        ld      d,a
  45+ AECF 2A E0 9D     madDEaddRS:             ld		hl,(varR)
  46+ AED2 CD DB AE                             call	madXAAddHLDESigned
  47+ AED5 EB                                   ex      de,hl                       ; de = R.S + DE
  48+ AED6                                      ClearCarryFlag
  48+ AED6 B7          >                        or a
  49+ AED7 DD 6B                                ld      ixl,e
  50+ AED9 7A                                   ld      a,d
  51+ AEDA C9                                   ret
  52+ AEDB
  53+ AEDB
  54+ AEDB 7C           madXAAddHLDESigned:     ld      a,h
  55+ AEDC E6 80                                and     SignOnly8Bit
  56+ AEDE 47                                   ld      b,a                         ;save sign bit in b
  57+ AEDF AA                                   xor     d                           ;if h sign and d sign were different then bit 7 of a will be 1 which means
  58+ AEE0                                      JumpIfNegative .ADDHLDEOppSGN        ;Signs are opposite there fore we can subtract to get difference
  58+ AEE0 FA F8 AE    >                        jp		m, .ADDHLDEOppSGN
  59+ AEE3 78           .ADDHLDESameSigns:       ld      a,b
  60+ AEE4 B2                                   or      d
  61+ AEE5                                      JumpIfNegative .ADDHLDESameNeg       ; optimisation so we can just do simple add if both positive
  61+ AEE5 FA EA AE    >                        jp		m, .ADDHLDESameNeg
  62+ AEE8 19                                   add     hl,de
  63+ AEE9 C9                                   ret
  64+ AEEA 7C           .ADDHLDESameNeg:         ld      a,h                         ; so if we enter here then signs are the same so we clear the 16th bit
  65+ AEEB E6 7F                                and     SignMask8Bit                ; we could check the value of b for optimisation
  66+ AEED 67                                   ld      h,a
  67+ AEEE 7A                                   ld      a,d
  68+ AEEF E6 7F                                and     SignMask8Bit
  69+ AEF1 57                                   ld      d,a
  70+ AEF2 19                                   add     hl,de
  71+ AEF3 3E 80                                ld      a,SignOnly8Bit
  72+ AEF5 B4                                   or      h                           ; now set bit for negative value, we won't bother with overflow for now TODO
  73+ AEF6 67                                   ld      h,a
  74+ AEF7 C9                                   ret
  75+ AEF8 7C           .ADDHLDEOppSGN:          ld      a,h                         ; so if we enter here then signs are the same so we clear the 16th bit                     ; here HL and DE are opposite
  76+ AEF9 E6 7F                                and     SignMask8Bit                ; we could check the value of b for optimisation
  77+ AEFB 67                                   ld      h,a
  78+ AEFC 7A                                   ld      a,d
  79+ AEFD E6 7F                                and     SignMask8Bit
  80+ AEFF 57                                   ld      d,a
  81+ AF00 B7                                   or      a
  82+ AF01 ED 52                                sbc     hl,de
  83+ AF03 38 04                                jr      c,.ADDHLDEOppInvert
  84+ AF05 78           .ADDHLDEOppSGNNoCarry:   ld      a,b                         ; we got here so hl > de therefore we can just take hl's previous sign bit
  85+ AF06 B4                                   or      h
  86+ AF07 67                                   ld      h,a                         ; set the previou sign value
  87+ AF08 C9                                   ret
  88+ AF09              .ADDHLDEOppInvert:       NegHL                                                   ; we need to flip the sign and 2'c the Hl result
  88+ AF09 AF          >                    xor a
  88+ AF0A 95          >                    sub l
  88+ AF0B 6F          >                    ld l,a
  88+ AF0C 9F          >                    sbc a,a
  88+ AF0D 94          >                    sub h
  88+ AF0E 67          >                    ld h,a
  89+ AF0F 78                                   ld      a,b
  90+ AF10 EE 80                                xor     SignOnly8Bit                ; flip sign bit
  91+ AF12 B4                                   or      h
  92+ AF13 67                                   ld      h,a                         ; recover sign
  93+ AF14 C9                                   ret
  94+ AF15
  95+ AF15
  96+ AF15                  ; multiplication of 16-bit number and 8-bit number into a 24-bit product
  97+ AF15                  ;
  98+ AF15                  ; enter : hl = 16-bit multiplier   = x
  99+ AF15                  ;          e =  8-bit multiplicand = y
 100+ AF15                  ;
 101+ AF15                  ; exit  : ahl = 24-bit product
 102+ AF15                  ;         carry reset
 103+ AF15                  ;
 104+ AF15                  ; uses  : af, de, hl
 105+ AF15 54           AHLequHLmulE:           ld d,h                      ; xh
 106+ AF16 63                                   ld h,e                      ; yl
 107+ AF17 ED 30                                mul de                      ; xh*yl
 108+ AF19 EB                                   ex de,hl
 109+ AF1A ED 30                                mul de                      ; yl*xl, hl = xh*yl
 110+ AF1C
 111+ AF1C 7A                                   ld  a,d                     ; sum products
 112+ AF1D 85                                   add a,l
 113+ AF1E 57                                   ld  d,a
 114+ AF1F EB                                   ex de,hl
 115+ AF20
 116+ AF20 7A                                   ld  a,d
 117+ AF21 CE 00                                adc a,0
 118+ AF23 C9                                   ret
 119+ AF24
 120+ AF24
 121+ AF24
 122+ AF24                 ; multiplication of two 16-bit numbers into a 32-bit product
 123+ AF24                 ;
 124+ AF24                 ; enter : de = 16-bit multiplicand = y
 125+ AF24                 ;         hl = 16-bit multiplicand = x
 126+ AF24                 ;
 127+ AF24                 ; exit  : dehl = 32-bit product
 128+ AF24                 ;         carry reset
 129+ AF24                 ;
 130+ AF24                 ; uses  : af, bc, de, hl
 131+ AF24
 132+ AF24
 133+ AF24
 134+ AF24 45           DEHLequDEmulHL:         ld b,l                      ; x0
 135+ AF25 4B                                   ld c,e                      ; y0
 136+ AF26 5D                                   ld e,l                      ; x0
 137+ AF27 6A                                   ld l,d
 138+ AF28 E5                                   push hl                     ; x1 y1
 139+ AF29 69                                   ld l,c                      ; y0
 140+ AF2A              ; bc = x0 y0, de = y1 x0,  hl = x1 y0,  stack = x1 y1
 141+ AF2A ED 30                                mul de                      ; y1*x0
 142+ AF2C EB                                   ex de,hl
 143+ AF2D ED 30                                mul de                      ; x1*y0
 144+ AF2F
 145+ AF2F AF                                   xor a                       ; zero A
 146+ AF30 19                                   add hl,de                   ; sum cross products p2 p1
 147+ AF31 8F                                   adc a,a                     ; capture carry p3
 148+ AF32
 149+ AF32 59                                   ld e,c                      ; x0
 150+ AF33 50                                   ld d,b                      ; y0
 151+ AF34 ED 30                                mul de                      ; y0*x0
 152+ AF36
 153+ AF36 47                                   ld b,a                      ; carry from cross products
 154+ AF37 4C                                   ld c,h                      ; LSB of MSW from cross products
 155+ AF38
 156+ AF38 7A                                   ld a,d
 157+ AF39 85                                   add a,l
 158+ AF3A 67                                   ld h,a
 159+ AF3B 6B                                   ld l,e                      ; LSW in HL p1 p0
 160+ AF3C
 161+ AF3C D1                                   pop de
 162+ AF3D ED 30                                mul de                      ; x1*y1
 163+ AF3F
 164+ AF3F EB                                   ex de,hl
 165+ AF40 ED 4A                                adc hl,bc
 166+ AF42 EB                                   ex de,hl                    ; de = final MSW
 167+ AF43
 168+ AF43 C9                                   ret
 169+ AF44
 170+ AF44              ; multiplication of two 16-bit numbers into a 16-bit product
 171+ AF44              ; enter : de = 16-bit multiplicand
 172+ AF44              ;         hl = 16-bit multiplicand
 173+ AF44              ; exit  : hl = 16-bit product
 174+ AF44              ;         carry reset
 175+ AF44              ; maths is
 176+ AF44              ;        hl = y , de= x
 177+ AF44              ;        hl = xhi,ylo + (yhigh * xlow)
 178+ AF44              ;        hl = yhih & xlo + x
 179+ AF44              ;
 180+ AF44              ;
 181+ AF44              ; uses  : af, bc, de, hl
 182+ AF44 C5           mulDEbyHL:              push    bc
 183+ AF45 7A                                   ld a,d                      ; a = xh
 184+ AF46 54                                   ld d,h                      ; d = yh
 185+ AF47 67                                   ld h,a                      ; h = xh
 186+ AF48 4B                                   ld c,e                      ; c = xl
 187+ AF49 45                                   ld b,l                      ; b = yl
 188+ AF4A ED 30                                mul                         ; yh * yl
 189+ AF4C EB                                   ex de,hl
 190+ AF4D ED 30                                mul                         ; xh * yl
 191+ AF4F 19                                   add hl,de                   ; add cross products
 192+ AF50 59                                   ld e,c
 193+ AF51 50                                   ld d,b
 194+ AF52 ED 30                                mul                         ; yl * xl
 195+ AF54 7D                                   ld a,l                      ; cross products lsb
 196+ AF55 82                                   add a,d                     ; add to msb final
 197+ AF56 67                                   ld h,a
 198+ AF57 6B                                   ld l,e                      ; hl = final
 199+ AF58                                      ; 83 cycles, 19 bytes
 200+ AF58 AF                                   xor a                       ; reset carry
 201+ AF59 C1                                   pop     bc
 202+ AF5A C9                                   ret
 203+ AF5B
 204+ AF5B
 205+ AF5B              ; CHL = multiplicand D = multiplier
 206+ AF5B              ; DCHL = CHL * D
 207+ AF5B 7A           mulCHLbyDSigned:        ld      a,d                 ; get sign from d
 208+ AF5C AC                                   xor     h                   ; xor with h to get resultant sign
 209+ AF5D E6 80                                and     SignOnly8Bit        ; .
 210+ AF5F FD 67                                ld      iyh,a               ; iyh = copy of sign
 211+ AF61 79                                   ld      a,c                 ; now CHL = ABS (CHL)
 212+ AF62 E6 7F                                and     SignMask8Bit        ; .
 213+ AF64 4F                                   ld      c,a                 ; .
 214+ AF65 7A                                   ld      a,d                 ; d = ABS D
 215+ AF66 E6 7F                                and     SignMask8Bit        ; .
 216+ AF68              ; At this point CHL = ABS (HLE), A = ABS(D)
 217+ AF68 57           .mul1:                  ld      d,a                 ; first do D * L
 218+ AF69 5D                                   ld      e,l                 ; .
 219+ AF6A ED 30                                mul     de                  ; DE = L * D
 220+ AF6C 08                                   ex      af,af'              ; save multiplier
 221+ AF6D 6B                                   ld      l,e                 ; L = p0
 222+ AF6E 7A                                   ld      a,d                 ; carry byte
 223+ AF6F 08                                   ex      af,af'              ; retrieve muliplier and save carry byte along with flags
 224+ AF70 5C           .mul2:                  ld      e,h                 ; byte 2 of multiplicand
 225+ AF71 57                                   ld      d,a                 ; and multiplier
 226+ AF72 ED 30                                mul     de                  ; now its D & L
 227+ AF74 08                                   ex      af,af'              ; get back carry byte with flags
 228+ AF75 83           .carrybyte1:            add     a,e                 ; add low byte carry to result and retain carry too through next instructions
 229+ AF76 67                                   ld      h,a                 ; h = P1
 230+ AF77 7A                                   ld      a,d                 ; a = carry byte
 231+ AF78 08                                   ex      af,af'              ; save carry byte and get back multiplier with flags
 232+ AF79 59           .mul3:                  ld      e,c                 ; byte 3 of multiplicand
 233+ AF7A 57                                   ld      d,a                 ;
 234+ AF7B ED 30                                mul     de                  ;
 235+ AF7D 08                                   ex      af,af'              ; get back carry byte and carry prior to first add
 236+ AF7E 8B                                   adc     a,e                 ;
 237+ AF7F FD B4                                or      iyh                 ; recover saved resultant sign
 238+ AF81 4F                                   ld      c,a                 ; c byte 3. Note the value range allowed can never cause a byte 3 carry
 239+ AF82 C9                                   ret
 240+ AF83
 241+ AF83              ;  CHL = 53456 D = 1E
 242+ AF83              ;  56 * 1E = A14 L = 14 carry = 0A
 243+ AF83              ;  34 * 1E = 618 H = 18 +A = 22 carry = 6
 244+ AF83              ;  5  * 1E = 096 C = 96 + 6 = 9C
 245+ AF83              ;  CHL = 9C2214
 246+ AF83              ;mult3
 247+ AF83              ; DELC = HLE * D, uses HL, DE, C , A , IYH
 248+ AF83              ; HLE = multiplicand D = multiplier
 249+ AF83              ; tested by mathstestsun.asm all passed
 250+ AF83              ; Algorithm
 251+ AF83              ; AC =  E * D   (save carry)         H    L    E
 252+ AF83              ; DE =  L * D                                  D
 253+ AF83              ;  L =  A + E + carry                         E*D (lo)
 254+ AF83              ; DE =  H * D                             L*D+ ^ (hi)
 255+ AF83              ;  E =  A + E + carry                H*D (lo) + carry
 256+ AF83              ;
 257+ AF83              ;
 258+ AF83 7A           mulHLEbyDSigned:        ld      a,d                 ; get sign from d
 259+ AF84 AC                                   xor     h                   ; xor with h to get resultant sign
 260+ AF85 E6 80                                and     SignOnly8Bit        ; .
 261+ AF87 FD 67                                ld      iyh,a               ; iyh = copy of sign
 262+ AF89 7C                                   ld      a,h                 ; now HLE = ABS (HLE)
 263+ AF8A E6 7F                                and     SignMask8Bit        ; .
 264+ AF8C 67                                   ld      h,a                 ; .
 265+ AF8D 7A                                   ld      a,d                 ; d = ABS D
 266+ AF8E E6 7F                                and     SignMask8Bit        ; .
 267+ AF90 57                                   ld      d,a                 ; .
 268+ AF91 B7           .testEitherSideZero:    or      a
 269+ AF92 28 24                                jr      z,.ResultZero
 270+ AF94 7C                                   ld      a,h
 271+ AF95 B5                                   or      l
 272+ AF96 B3                                   or      e
 273+ AF97 28 1F                                jr      z,.ResultZero
 274+ AF99              ; At this point HLE = ABS (HLE), A = ABS(D)
 275+ AF99 42                                   ld      b,d                 ; save Quotient
 276+ AF9A ED 30        .mul1:                  mul     de                  ; C = E * D
 277+ AF9C 4B                                   ld      c,e                 ; C = p0
 278+ AF9D FD 6A                                ld      iyl,d               ; save carry (p1)
 279+ AF9F 5D           .mul2:                  ld      e,l                 ; L = L * D
 280+ AFA0 50                                   ld      d,b                 ; .
 281+ AFA1 ED 30                                mul     de                  ; .
 282+ AFA3 FD 7D                                ld      a,iyl               ; get back p1
 283+ AFA5 83           .carrybyte1:            add     a,e                 ; L = L + E
 284+ AFA6 6F                                   ld      l,a                 ; .
 285+ AFA7 FD 6A                                ld      iyl,d               ; save new carry byte
 286+ AFA9 5C           .mul3:                  ld      e,h                 ; E = H * D
 287+ AFAA 50                                   ld      d,b                 ; .
 288+ AFAB ED 30                                mul     de                  ; .
 289+ AFAD FD 7D                                ld      a,iyl
 290+ AFAF 8B                                   adc     a,e                 ; .
 291+ AFB0 5F                                   ld      e,a                 ; .
 292+ AFB1 7A           .ItsNotZero:            ld      a,d                 ;
 293+ AFB2 CE 00                                adc     a,0                 ; final carry bit
 294+ AFB4 FD B4                                or      iyh                 ; bring back sign
 295+ AFB6 57                                   ld      d,a                 ; s = sign
 296+ AFB7 C9                                   ret
 297+ AFB8 11 00 00     .ResultZero:            ld      de,0
 298+ AFBB                                      ZeroA
 298+ AFBB AF          >                        xor a
 299+ AFBC 4F                                   ld      c,a
 300+ AFBD 6F                                   ld      l,a
 301+ AFBE C9                                   ret
 302+ AFBF
 303+ AFBF              ;;;
 304+ AFBF              ;;;
 305+ AFBF              ;;;mulHLEbyDSigned:        ld      a,d                 ; get sign from d
 306+ AFBF              ;;;                        xor     h                   ; xor with h to get resultant sign
 307+ AFBF              ;;;                        and     SignOnly8Bit        ; .
 308+ AFBF              ;;;                        ld      iyh,a               ; iyh = copy of sign
 309+ AFBF              ;;;                        ld      a,h                 ; now HLE = ABS (HLE)
 310+ AFBF              ;;;                        and     SignMask8Bit        ; .
 311+ AFBF              ;;;                        ld      h,a                 ; .
 312+ AFBF              ;;;                        ld      a,d                 ; d = ABS D
 313+ AFBF              ;;;                        and     SignMask8Bit        ; .
 314+ AFBF              ;;;                        ld      d,a                 ; .
 315+ AFBF              ;;;.testEitherSideZero:    or      a
 316+ AFBF              ;;;                        jr      z,.ResultZero
 317+ AFBF              ;;;                        ld      a,h
 318+ AFBF              ;;;                        or      l
 319+ AFBF              ;;;                        or      e
 320+ AFBF              ;;;                        jr      z,.ResultZero
 321+ AFBF              ;;;; At this point HLE = ABS (HLE), A = ABS(D)
 322+ AFBF              ;;;.mul1:                  mul     de                  ; C = E * D
 323+ AFBF              ;;;                        ex      af,af'              ; save mulitplier
 324+ AFBF              ;;;                        ld      c,e                 ; C = p0
 325+ AFBF              ;;;                        ld      a,d                 ; save carry (p1)
 326+ AFBF              ;;;                        ex      af,af'              ; .
 327+ AFBF              ;;;.mul2:                  ld      e,l                 ; L = L * D
 328+ AFBF              ;;;                        ld      d,a                 ; .
 329+ AFBF              ;;;                        mul     de                  ; .
 330+ AFBF              ;;;                        ex      af,af'              ; .
 331+ AFBF              ;;;.carrybyte1:            add     a,e                 ; L = L + E
 332+ AFBF              ;;;                        ld      l,a                 ; .
 333+ AFBF              ;;;                        ld      a,d
 334+ AFBF              ;;;                        ex      af,af'              ; save new carry byte
 335+ AFBF              ;;;.mul3:                  ld      e,h                 ; E = H * D
 336+ AFBF              ;;;                        ld      d,a                 ; .
 337+ AFBF              ;;;                        mul     de                  ; .
 338+ AFBF              ;;;                        ex      af,af'              ; .
 339+ AFBF              ;;;                        adc     a,e                 ; .
 340+ AFBF              ;;;                        ld      e,a                 ; .
 341+ AFBF              ;;;.ItsNotZero:            ld      a,d                 ;
 342+ AFBF              ;;;                        adc     a,0                 ; final carry bit
 343+ AFBF              ;;;                        or      iyh                 ; bring back sign
 344+ AFBF              ;;;                        ld      d,a                 ; s = sign
 345+ AFBF              ;;;                        ret
 346+ AFBF              ;;;.ResultZero:            ld      de,0
 347+ AFBF              ;;;                        ZeroA
 348+ AFBF              ;;;                        ld      c,a
 349+ AFBF              ;;;                        ld      l,a
 350+ AFBF              ;;;                        ret
 351+ AFBF
 352+ AFBF              ; multiplication of two S156-bit numbers into a 16-bit 2'd compliment product
 353+ AFBF              ; enter : de = 16-bit multiplicand
 354+ AFBF              ;         hl = 16-bit multiplicand
 355+ AFBF              ; exit  : hl = 16-bit product
 356+ AFBF              ;         carry reset
 357+ AFBF              ;
 358+ AFBF              ; uses  : af, bc, de, hl
 359+ AFBF 00           mulDEbyHLSignByte       DB      0
 360+ AFC0 AF           mulDEbyHLSgnTo2c:       xor     a
 361+ AFC1 32 BF AF                             ld      (mulDEbyHLSignByte),a
 362+ AFC4 7A           .SignDE:                ld      a,d
 363+ AFC5 ED 27 80                             test    $80
 364+ AFC8 28 08                                jr      z,.SignHL
 365+ AFCA E6 7F        .NegativeDE:            and     $7F
 366+ AFCC 57                                   ld      d,a
 367+ AFCD 3E 80                                ld      a,$80
 368+ AFCF 32 BF AF                             ld      (mulDEbyHLSignByte),a
 369+ AFD2 7C           .SignHL:                ld      a,h
 370+ AFD3 ED 27 80                             test    $80
 371+ AFD6 28 0B                                jr      z,.AbsoluteMultiply
 372+ AFD8 E6 7F        .NegativeHL:            and     $7F
 373+ AFDA 67                                   ld      h,a
 374+ AFDB 3A BF AF                             ld      a,(mulDEbyHLSignByte)
 375+ AFDE EE 80                                xor     $80
 376+ AFE0 32 BF AF                             ld      (mulDEbyHLSignByte),a
 377+ AFE3 CD 44 AF     .AbsoluteMultiply:      call    mulDEbyHL
 378+ AFE6 3A BF AF     .RecoverSign:           ld      a,(mulDEbyHLSignByte)
 379+ AFE9 ED 27 80                             test    $80
 380+ AFEC C8                                   ret     z
 381+ AFED AF           .Negateghl: 			xor 	a
 382+ AFEE 95                                   sub 	l
 383+ AFEF 6F                                   ld 		l,a
 384+ AFF0 9F                                   sbc 	a,a
 385+ AFF1 94                                   sub 	h
 386+ AFF2 67                                   ld 		h,a
 387+ AFF3 C9                                   ret
 388+ AFF4
 389+ AFF4 AF           mulDESgnbyHLUnsgnTo2c:  xor     a
 390+ AFF5 32 BF AF                             ld      (mulDEbyHLSignByte),a
 391+ AFF8 7A           .SignDE:                ld      a,d
 392+ AFF9 ED 27 80                             test    $80
 393+ AFFC 28 08                                jr      z,.AbsoluteMultiply
 394+ AFFE E6 7F        .NegativeDE:            and     $7F
 395+ B000 57                                   ld      d,a
 396+ B001 3E 80                                ld      a,$80
 397+ B003 32 BF AF                             ld      (mulDEbyHLSignByte),a
 398+ B006 CD 44 AF     .AbsoluteMultiply:      call    mulDEbyHL
 399+ B009 3A BF AF     .RecoverSign:           ld      a,(mulDEbyHLSignByte)
 400+ B00C ED 27 80                             test    $80
 401+ B00F C8                                   ret     z
 402+ B010 AF           .Negateghl:             xor 	a
 403+ B011 95                                   sub 	l
 404+ B012 6F                                   ld 		l,a
 405+ B013 9F                                   sbc 	a,a
 406+ B014 94                                   sub 	h
 407+ B015 67                                   ld 		h,a
 408+ B016 C9                                   ret
 409+ B017
 410+ B017
# file closed: ./Maths/multiply.asm
 660  B017                  INCLUDE "./Maths/asm_square.asm"
# file opened: ./Maths/asm_square.asm
   1+ B017              ; "ASM_SQUA : TESTGOOD"
   2+ B017              ; "AP = A^2 A = low,P = hi"
   3+ B017
   4+ B017              inline_squde: MACRO
   5+ B017 ~            			ld	e,a
   6+ B017 ~            			ld  d,a
   7+ B017 ~            			mul
   8+ B017              			ENDM
   9+ B017
  10+ B017              inline_squa: MACRO
  11+ B017 ~            			ld	e,a
  12+ B017 ~            			ld  d,a
  13+ B017 ~            			mul
  14+ B017 ~            			ld	a,e
  15+ B017              			ENDM
  16+ B017
  17+ B017
  18+ B017              asm_squa:
  19+ B017 E6 7F        	and SignMask8Bit
  20+ B019              ; "ASM SQUA2 : TESTGOOD"
  21+ B019              ; "AP = A^2 A = low,P = hi singed"
  22+ B019              asm_squa2:
  23+ B019 5F           	ld e, a
  24+ B01A 57           	ld d,a
  25+ B01B ED 30        	mul
  26+ B01D ED 53 DD 9C  	ld (varP),de
  27+ B021 7B           	ld a,e
  28+ B022 C9           	ret
# file closed: ./Maths/asm_square.asm
 661  B023                  INCLUDE "./Maths/asm_sqrt.asm"
# file opened: ./Maths/asm_sqrt.asm
   1+ B023              ; "ASM SQRT : TESTGOOD"
   2+ B023              ; "16-bit integer square root"
   3+ B023              ; "call with de = number to square root"
   4+ B023              ; "returns   hl = square root"
   5+ B023              ; "corrupts  bc, de"
   6+ B023              asm_sqrt:
   7+ B023 01 00 80     	ld bc,$8000
   8+ B026 61           	ld h,c
   9+ B027 69           	ld l,c
  10+ B028              .sqrloop:
  11+ B028 CB 38        	srl b
  12+ B02A CB 19        	rr c
  13+ B02C 09           	add hl,bc
  14+ B02D EB           	ex de,hl
  15+ B02E ED 52        	sbc hl,de
  16+ B030 38 04        	jr c,.sqrbit
  17+ B032 EB           	ex de,hl
  18+ B033 09           	add hl,bc
  19+ B034 18 05        	jr .sqrfi
  20+ B036              .sqrbit:
  21+ B036 19           	add hl,de
  22+ B037 EB           	ex de,hl
  23+ B038 B7           	or a
  24+ B039 ED 42        	sbc hl,bc
  25+ B03B              .sqrfi:
  26+ B03B CB 3C        	srl h
  27+ B03D CB 1D        	rr l
  28+ B03F CB 38        	srl b
  29+ B041 CB 19        	rr c
  30+ B043 30 E3        	jr nc,.sqrloop
  31+ B045 C9           	ret
  32+ B046
  33+ B046
  34+ B046              sqrtQR:					; Q = SQR(Qlo.Rhi) Q <~127
  35+ B046 3A DF 9D     	ld		a,(varQ)
  36+ B049 5F           	ld		e,a
  37+ B04A 3A E0 9D     	ld		a,(varR)
  38+ B04D 57           	ld		d,a
  39+ B04E CD 23 B0     	call	asm_sqrt
  40+ B051 7D               ld      a,l
  41+ B052 32 DF 9D     	ld		(varQ),a
  42+ B055 C9           	ret
  43+ B056
# file closed: ./Maths/asm_sqrt.asm
 662  B056                  INCLUDE "./Maths/asm_divide.asm"
# file opened: ./Maths/asm_divide.asm
   1+ B056
   2+ B056
   3+ B056
   4+ B056              ;
   5+ B056              ;   Set flags E to 11111110
   6+ B056              ;   Loop:   A << 2
   7+ B056              ;           if carry was 0
   8+ B056              ;               if a >= D
   9+ B056              ;                   A = A - D
  10+ B056              ;                   clear carry (probably irrelevant really)
  11+ B056              ;           else
  12+ B056
  13+ B056              ;               sla flags << bringing in carry of 1
  14+ B056              ;               if bit 7 of flag was set then loop
  15+ B056              ;                                        elase a = e and exit
  16+ B056              ;
  17+ B056              ; ">BC_Div_DE: BC = BC / DE. HL = remainder fast divide with unrolled loop BC/DE ==> BC, remainder in HL
  18+ B056              ;
  19+ B056              ;INPUTS: hl = dividend dbc = divisor
  20+ B056              ;OUTPUTS: hl/de -> AHL = quotient CDE = remainder, Carryflag set if divide by 0
  21+ B056
  22+ B056 14           Div16by24usgn:          inc     d                           ; can we fast retu
  23+ B057 15                                   dec     d
  24+ B058 20 13                                jr      nz,.ResultZero
  25+ B05A 50 59                                ld      de,bc                       ; so prep for bc/de
  26+ B05C 44 4D                                ld      bc,hl
  27+ B05E 7A           .div16by16usng:         ld      a,d
  28+ B05F B3                                   or      e
  29+ B060 28 10                                jr      z,.DivideByZero
  30+ B062 14                                   inc     d
  31+ B063 15                                   dec     d
  32+ B064 CD 0F B2                             call    BC_Div_DE
  33+ B067                                      ZeroA
  33+ B067 AF          >                        xor a
  34+ B068 EB                                   ex      de,hl                       ; de = remainder (need to fix c after hl = nothing of worth)
  35+ B069 60 69                                ld      hl,bc                       ; hl = result (a is zero from above)
  36+ B06B 4F                                   ld      c,a                         ; now fix c
  37+ B06C C9                                   ret
  38+ B06D AF           .ResultZero:            xor     a                           ; set AHL to 0 as d was 0 so h is zero
  39+ B06E 4F                                   ld      c,a                         ; c = 0
  40+ B06F 67                                   ld      h,a
  41+ B070 6F                                   ld      l,a
  42+ B071 C9                                   ret
  43+ B072 3E FF        .DivideByZero:          ld      a,$FF
  44+ B074 67                                   ld      h,a
  45+ B075 6F                                   ld      l,a
  46+ B076                                      SetCarryFlag
  46+ B076 37          >                        scf
  47+ B077 C9                                   ret
  48+ B078
  49+ B078              ;DIVD4 P-R=A/Qunsg  \P.R = A/Q unsigned called by Hall
  50+ B078 06 08        HLEquAmul256DivD:       ld		b,8							; counter
  51+ B07A CB 27                                sla		a							;
  52+ B07C 67                                   ld		h,a							; r a * 2 we will build result in hl
  53+ B07D CB 17        .DivideLoop:            rl		a							; a = a * 2
  54+ B07F 38 03                                jr      c,.StraightToSubtraction    ; jump on carry to subtraction
  55+ B081 BA                                   cp      d                           ; what was var Q
  56+ B082 38 03                                jr		c,.SkipSubtraction	        ; if a < d skip subtraction, note this will come to skip subtraction with carry the wrong way round
  57+ B084              .StraightToSubtraction: ClearCarryFlag                      ; in 6502 the borrow flag is inverted carry, z80 just uses carry so we need to clear it
  57+ B084 B7          >                        or a
  58+ B085 9A                                   sbc     a,d                         ; a = a - q
  59+ B086                                      ClearCarryFlag                      ; set carry so it gets shifted into bit 0 of b. we do this as we have to flip carry due to jr c from earlier cp d
  59+ B086 B7          >                        or a
  60+ B087 3F           .SkipSubtraction:       ccf                                 ; we need to do this as 6502 does opposite on carry, i.e. if we jumped direct here then carry would be set in z80
  61+ B088 CB 14                                rl      h                           ; roll d left bringing in carry if there was an sbc performed
  62+ B08A 10 F1                                djnz    .DivideLoop                 ; 8 cycles
  63+ B08C BA           .CalculateRemainder:    cp      d                           ; calulate 256 * a / d if q >= q then answer will not fit in one byte d is still set, a holds remainder to be subtracted
  64+ B08D 30 19                                jr      nc, .RemainderTooBig
  65+ B08F                                      ClearCarryFlag                      ; remove carry as the previous cp will have set it and mess up the sla in the remainder loop
  65+ B08F B7          >                        or a
  66+ B090 06 FE        .InitRemainderLoop:     ld      b,%11111110                 ; loop for bits 1 to 7
  67+ B092 68                                   ld      l,b                         ; and set l to capture result bits (R)
  68+ B093 CB 27        .RemainderLoop:         sla     a                           ; shift a left
  69+ B095 38 0A                                jr      c, .RemainderSubtraction    ; if there was a carry go to subtraction
  70+ B097 BA                                   cp      d                           ; if a < d then skip subtraction
  71+ B098 38 01                                jr      c,.RemainderSkipSubtract    ; .
  72+ B09A 9A                                   sbc     d                           ; a > q so a = a - q, carry will be clear here
  73+ B09B 3F           .RemainderSkipSubtract: ccf                                 ; as the jr used z80 we need to flip the carry to behave like 6502
  74+ B09C CB 15                                rl      l                           ; rotate counter to the left
  75+ B09E 38 F3                                jr      c, .RemainderLoop           ; if there was a bit pushed to carry then loop
  76+ B0A0 C9                                   ret
  77+ B0A1 9A           .RemainderSubtraction:  sbc     d                           ; as the carry came from an sla we want to retain it
  78+ B0A2                                      SetCarryFlag                        ; roll in a carry bit to result
  78+ B0A2 37          >                        scf
  79+ B0A3 CB 15                                rl      l                           ;
  80+ B0A5 38 EC                                jr      c, .RemainderLoop           ; and loop if there was a carry bit that came out
  81+ B0A7 C9                                   ret
  82+ B0A8 2E FF        .RemainderTooBig:       ld      l,$FF                       ; now hl = result
  83+ B0AA C9                                   ret
  84+ B0AB
  85+ B0AB BA           AEquAmul256DivD:        cp      d
  86+ B0AC 28 1D                                jr      z,.BothSame
  87+ B0AE 30 1E                                jr      nc,.DgtA
  88+ B0B0 1E FE                                ld      e,%11111110                 ; Set R to have bits 1-7 set, so we can rotate through 7
  89+ B0B2 CB 27        .DivideLoop:            sla     a
  90+ B0B4 38 0D                                jr      c,.LL29
  91+ B0B6                                      JumpIfALTNusng  d, .SkipSub         ; will jump if carry set, so we need to reset on the rol
  91+ B0B6 BA          >                        cp      d
  91+ B0B7 DA BC B0    >                        jp		c, .SkipSub
  92+ B0BA 92                                   sub     d
  93+ B0BB                                      ClearCarryFlag                      ; reset clarry as it will be complimented for rotate as 6502 does carry flags inverted
  93+ B0BB B7          >                        or a
  94+ B0BC              .SkipSub:               FlipCarryFlag                       ; if we did the subtract the carry will be clear so we need to invert to roll in.
  94+ B0BC 3F          >                        ccf
  95+ B0BD CB 13                                rl      e
  96+ B0BF 38 F1                                jr      c,.DivideLoop
  97+ B0C1 7B                                   ld      a,e
  98+ B0C2 C9                                   ret
  99+ B0C3 92           .LL29:                  sub     d                           ; A >= Q, so set A = A - Q
 100+ B0C4                                      SetCarryFlag                        ; Set the C flag to rotate into the result in R
 100+ B0C4 37          >                        scf
 101+ B0C5 CB 13                                rl      e                           ; rotate counter e left
 102+ B0C7 38 E9                                jr      c,.DivideLoop               ; if a bit was spat off teh end then loop
 103+ B0C9 7B                                   ld      a,e                         ; stick result in a
 104+ B0CA C9                                   ret
 105+ B0CB 3E 01        .BothSame:              ld  a,1
 106+ B0CD C9                                   ret
 107+ B0CE 3E FF        .DgtA:                  ld  a,255                           ; Fail with FF as result
 108+ B0D0 C9                                   ret
 109+ B0D1
 110+ B0D1
 111+ B0D1              ; Divide 8-bit values
 112+ B0D1              ; In: Divide E by divider C
 113+ B0D1              ; Out: A = result, B = rest
 114+ B0D1              ;
 115+ B0D1              ;;;Div8:
 116+ B0D1              ;;;    xor a
 117+ B0D1              ;;;    ld b,8
 118+ B0D1              ;;;Div8_Loop:
 119+ B0D1              ;;;    rl e
 120+ B0D1              ;;;    rla
 121+ B0D1              ;;;    sub c
 122+ B0D1              ;;;    jr nc,Div8_NoAdd
 123+ B0D1              ;;;    add a,c
 124+ B0D1              ;;;Div8_NoAdd:
 125+ B0D1              ;;;    djnz Div8_Loop
 126+ B0D1              ;;;    ld b,a0
 127+ B0D1              ;;;    ld a,e
 128+ B0D1              ;;;    rla
 129+ B0D1              ;;;    cpl
 130+ B0D1              ;;;    ret
 131+ B0D1
 132+ B0D1              ;;Inputs: DE is the numerator, BC is the divisor
 133+ B0D1              ;;Outputs: DE is the result
 134+ B0D1              ;;         A is a copy of E
 135+ B0D1              ;;         HL is the remainder
 136+ B0D1              ;;         BC is not changed
 137+ B0D1              ;; so DE = DE /BC
 138+ B0D1              ;140 bytes
 139+ B0D1              ;145cc
 140+ B0D1
 141+ B0D1              MacroDEDivBC:       MACRO
 142+ B0D1 ~                                rla
 143+ B0D1 ~                                adc     hl,hl
 144+ B0D1 ~                                sbc     hl,bc
 145+ B0D1 ~                                jr      nc,$+3
 146+ B0D1 ~                                add     hl,bc
 147+ B0D1                                  ENDM
 148+ B0D1
 149+ B0D1              DEequDEDivBC:
 150+ B0D1 AF               xor a
 151+ B0D2 ED 62            sbc hl,hl
 152+ B0D4 7A               ld a,d
 153+ B0D5                  MacroDEDivBC
 153+ B0D5 17          >                    rla
 153+ B0D6 ED 6A       >                    adc     hl,hl
 153+ B0D8 ED 42       >                    sbc     hl,bc
 153+ B0DA 30 01       >                    jr      nc,$+3
 153+ B0DC 09          >                    add     hl,bc
 154+ B0DD                  MacroDEDivBC
 154+ B0DD 17          >                    rla
 154+ B0DE ED 6A       >                    adc     hl,hl
 154+ B0E0 ED 42       >                    sbc     hl,bc
 154+ B0E2 30 01       >                    jr      nc,$+3
 154+ B0E4 09          >                    add     hl,bc
 155+ B0E5                  MacroDEDivBC
 155+ B0E5 17          >                    rla
 155+ B0E6 ED 6A       >                    adc     hl,hl
 155+ B0E8 ED 42       >                    sbc     hl,bc
 155+ B0EA 30 01       >                    jr      nc,$+3
 155+ B0EC 09          >                    add     hl,bc
 156+ B0ED                  MacroDEDivBC
 156+ B0ED 17          >                    rla
 156+ B0EE ED 6A       >                    adc     hl,hl
 156+ B0F0 ED 42       >                    sbc     hl,bc
 156+ B0F2 30 01       >                    jr      nc,$+3
 156+ B0F4 09          >                    add     hl,bc
 157+ B0F5                  MacroDEDivBC
 157+ B0F5 17          >                    rla
 157+ B0F6 ED 6A       >                    adc     hl,hl
 157+ B0F8 ED 42       >                    sbc     hl,bc
 157+ B0FA 30 01       >                    jr      nc,$+3
 157+ B0FC 09          >                    add     hl,bc
 158+ B0FD                  MacroDEDivBC
 158+ B0FD 17          >                    rla
 158+ B0FE ED 6A       >                    adc     hl,hl
 158+ B100 ED 42       >                    sbc     hl,bc
 158+ B102 30 01       >                    jr      nc,$+3
 158+ B104 09          >                    add     hl,bc
 159+ B105                  MacroDEDivBC
 159+ B105 17          >                    rla
 159+ B106 ED 6A       >                    adc     hl,hl
 159+ B108 ED 42       >                    sbc     hl,bc
 159+ B10A 30 01       >                    jr      nc,$+3
 159+ B10C 09          >                    add     hl,bc
 160+ B10D                  MacroDEDivBC
 160+ B10D 17          >                    rla
 160+ B10E ED 6A       >                    adc     hl,hl
 160+ B110 ED 42       >                    sbc     hl,bc
 160+ B112 30 01       >                    jr      nc,$+3
 160+ B114 09          >                    add     hl,bc
 161+ B115 17               rla
 162+ B116 2F               cpl
 163+ B117 57               ld d,a
 164+ B118
 165+ B118 7B               ld a,e
 166+ B119                  MacroDEDivBC
 166+ B119 17          >                    rla
 166+ B11A ED 6A       >                    adc     hl,hl
 166+ B11C ED 42       >                    sbc     hl,bc
 166+ B11E 30 01       >                    jr      nc,$+3
 166+ B120 09          >                    add     hl,bc
 167+ B121                  MacroDEDivBC
 167+ B121 17          >                    rla
 167+ B122 ED 6A       >                    adc     hl,hl
 167+ B124 ED 42       >                    sbc     hl,bc
 167+ B126 30 01       >                    jr      nc,$+3
 167+ B128 09          >                    add     hl,bc
 168+ B129                  MacroDEDivBC
 168+ B129 17          >                    rla
 168+ B12A ED 6A       >                    adc     hl,hl
 168+ B12C ED 42       >                    sbc     hl,bc
 168+ B12E 30 01       >                    jr      nc,$+3
 168+ B130 09          >                    add     hl,bc
 169+ B131                  MacroDEDivBC
 169+ B131 17          >                    rla
 169+ B132 ED 6A       >                    adc     hl,hl
 169+ B134 ED 42       >                    sbc     hl,bc
 169+ B136 30 01       >                    jr      nc,$+3
 169+ B138 09          >                    add     hl,bc
 170+ B139                  MacroDEDivBC
 170+ B139 17          >                    rla
 170+ B13A ED 6A       >                    adc     hl,hl
 170+ B13C ED 42       >                    sbc     hl,bc
 170+ B13E 30 01       >                    jr      nc,$+3
 170+ B140 09          >                    add     hl,bc
 171+ B141                  MacroDEDivBC
 171+ B141 17          >                    rla
 171+ B142 ED 6A       >                    adc     hl,hl
 171+ B144 ED 42       >                    sbc     hl,bc
 171+ B146 30 01       >                    jr      nc,$+3
 171+ B148 09          >                    add     hl,bc
 172+ B149                  MacroDEDivBC
 172+ B149 17          >                    rla
 172+ B14A ED 6A       >                    adc     hl,hl
 172+ B14C ED 42       >                    sbc     hl,bc
 172+ B14E 30 01       >                    jr      nc,$+3
 172+ B150 09          >                    add     hl,bc
 173+ B151                  MacroDEDivBC
 173+ B151 17          >                    rla
 173+ B152 ED 6A       >                    adc     hl,hl
 173+ B154 ED 42       >                    sbc     hl,bc
 173+ B156 30 01       >                    jr      nc,$+3
 173+ B158 09          >                    add     hl,bc
 174+ B159 17               rla
 175+ B15A 2F               cpl
 176+ B15B 5F               ld e,a
 177+ B15C C9               ret
 178+ B15D
 179+ B15D
 180+ B15D
 181+ B15D              ;divdide by 16 using undocumented instrunctions
 182+ B15D              ;Input: BC = Dividend, DE = Divisor, HL = 0
 183+ B15D              ;Output: BC = Quotient, HL = Remainder
 184+ B15D              ; Our use
 185+ B15D              ; BC = A0
 186+ B15D              ; DE = 0C
 187+ B15D              ; so BC = a * 256 / C
 188+ B15D              DIV16Amul256dCUNDOC:    JumpIfAGTENusng	  c,DEV16ATooLarge                                          ; first off if a > c ten return 255
 188+ B15D B9          >                        cp     c
 188+ B15E D2 89 B1    >                        jp		nc,DEV16ATooLarge
 189+ B161 47                                   ld      b,a
 190+ B162 59                                   ld      e,c
 191+ B163 0E 00                                ld      c,0
 192+ B165 16 00                                ld      d,0
 193+ B167 C3 74 B1                             jp      DIV16UNDOC
 194+ B16A 47           DIV16Amul256dQUNDOC:    ld      b,a
 195+ B16B 0E 00                                ld      c,0
 196+ B16D 21 DF 9D                             ld      hl,varQ
 197+ B170 7E                                   ld      a,(hl)
 198+ B171 16 00                                ld      d,0
 199+ B173 5F                                   ld      e,a
 200+ B174              DIV16BCDivDEUNDOC:
 201+ B174 21 00 00     DIV16UNDOC:             ld      hl,0
 202+ B177 78                                   ld      a,b
 203+ B178 06 10                                ld      b,16
 204+ B17A CB 31        DIV16UNDOCLOOP:         sll	c		; unroll 16 times
 205+ B17C 17                                   rla			; ...
 206+ B17D ED 6A                                adc	hl,hl		; ...
 207+ B17F ED 52                                sbc	hl,de		; ...
 208+ B181 30 02                                jr	nc,DIV16UNDOCSKIP		; ...
 209+ B183 19                                   add	hl,de		; ...
 210+ B184 0D                                   dec	c		; ...
 211+ B185 10 F3        DIV16UNDOCSKIP:         djnz DIV16UNDOCLOOP
 212+ B187 47                                   ld   b,a
 213+ B188 C9                                   ret
 214+ B189 01 FF 00     DEV16ATooLarge:         ld     bc,$00FF
 215+ B18C C9                                   ret
 216+ B18D
 217+ B18D              ; "> asm_div8 C_Div_D - C is the numerator, D is the denominator, A is the remainder, B is 0, C is the result of C/D,D,E,H,L are not changed"
 218+ B18D 06 08        asm_div8:               ld b,8
 219+ B18F AF                                   xor a
 220+ B190 CB 21        .div8_loop:	            sla c
 221+ B192 17                                   rla
 222+ B193 BA                                   cp d
 223+ B194 38 02                                jr c,.div8_skip
 223+ B196
 224+ B196 0C                                   inc c
 225+ B197 92                                   sub d
 226+ B198 10 F6        .div8_skip:	            djnz .div8_loop
 227+ B19A C9                                   ret
 228+ B19B              ; ">asm_div16: HL_Div_C: HL is the numerator,  C is the denominator, output A is the remainder, B is 0, C,DE is not changedHL is the quotient"
 229+ B19B 06 10        asm_div16:              ld b,16
 230+ B19D AF                                   xor a
 231+ B19E CB 25        div16_loop:	            sla l
 232+ B1A0 CB 14                                rl	h
 233+ B1A2              ;    add hl,hl
 234+ B1A2 17                                   rla
 235+ B1A3 B9                                   cp c
 236+ B1A4 38 02                                jr c,div16_skip
 237+ B1A6 2C                                   inc l
 238+ B1A7 91                                   sub c
 239+ B1A8 10 F4        div16_skip:		        djnz div16_loop
 240+ B1AA C9                                   ret
 241+ B1AB              ;
 242+ B1AB              ; Divide 16-bit values (with 16-bit result)
 243+ B1AB              ; In: Divide BC by divider DE
 244+ B1AB              ; Out: BC = result, HL = rest
 245+ B1AB              ;
 246+ B1AB              HLDivC_Iteration: 	MACRO
 247+ B1AB ~            					add	hl,hl		; unroll 16 times
 248+ B1AB ~            					rla				; ...
 249+ B1AB ~            					cp	c			; ...
 250+ B1AB ~            					jr	1F
 251+ B1AB ~            					sub	c			; ...
 252+ B1AB ~            1:
 253+ B1AB ~            					inc	l			; ...
 254+ B1AB              					ENDM
 255+ B1AB
 256+ B1AB
 257+ B1AB
 258+ B1AB              ; ">div1616: BC = BC / DE. HL = remainder"
 259+ B1AB 21 00 00     Div1616:            ld hl,0
 260+ B1AE 78                               ld a,b
 261+ B1AF 06 08                            ld b,8
 262+ B1B1 17           .Div16_Loop1:       rla
 263+ B1B2 ED 6A                            adc hl,hl
 264+ B1B4 ED 52                            sbc hl,de
 265+ B1B6 30 01                            jr nc,.Div16_NoAdd1
 266+ B1B8 19                               add hl,de
 267+ B1B9 10 F6        .Div16_NoAdd1:      djnz .Div16_Loop1
 268+ B1BB 17                               rla
 269+ B1BC 2F                               cpl
 270+ B1BD 47                               ld b,a
 271+ B1BE 79                               ld a,c
 272+ B1BF 48                               ld c,b
 273+ B1C0 06 08                            ld b,8
 274+ B1C2 17           .Div16_Loop2:       rla
 275+ B1C3 ED 6A                            adc hl,hl
 276+ B1C5 ED 52                            sbc hl,de
 277+ B1C7 30 01                            jr nc,.Div16_NoAdd2
 278+ B1C9 19                               add hl,de
 279+ B1CA 10 F6        .Div16_NoAdd2:      djnz .Div16_Loop2
 280+ B1CC 17                               rla
 281+ B1CD 2F                               cpl
 282+ B1CE 41                               ld b,c
 283+ B1CF 4F                               ld c,a
 284+ B1D0 C9                               ret
 285+ B1D1
 286+ B1D1
 287+ B1D1              EDivC_Iteration:        MACRO
 288+ B1D1 ~                                    rl  e
 289+ B1D1 ~                                    rla
 290+ B1D1 ~                                    sub c
 291+ B1D1 ~                                    jr  nc,.Div8_NoAdd
 292+ B1D1 ~                                    add a,c
 293+ B1D1 ~            .Div8_NoAdd:
 294+ B1D1                                      ENDM
 295+ B1D1
 296+ B1D1              ; Divide E by divider C Out: A = result, B = rest
 297+ B1D1              E_Div_C:                ZeroA
 297+ B1D1 AF          >                        xor a
 298+ B1D2                                      EDivC_Iteration
 298+ B1D2 CB 13       >                        rl  e
 298+ B1D4 17          >                        rla
 298+ B1D5 91          >                        sub c
 298+ B1D6 30 01       >                        jr  nc,.Div8_NoAdd
 298+ B1D8 81          >                        add a,c
 298+ B1D9             >.Div8_NoAdd:
 299+ B1D9                                      EDivC_Iteration
 299+ B1D9 CB 13       >                        rl  e
 299+ B1DB 17          >                        rla
 299+ B1DC 91          >                        sub c
 299+ B1DD 30 01       >                        jr  nc,.Div8_NoAdd
 299+ B1DF 81          >                        add a,c
 299+ B1E0             >.Div8_NoAdd:
 300+ B1E0                                      EDivC_Iteration
 300+ B1E0 CB 13       >                        rl  e
 300+ B1E2 17          >                        rla
 300+ B1E3 91          >                        sub c
 300+ B1E4 30 01       >                        jr  nc,.Div8_NoAdd
 300+ B1E6 81          >                        add a,c
 300+ B1E7             >.Div8_NoAdd:
 301+ B1E7                                      EDivC_Iteration
 301+ B1E7 CB 13       >                        rl  e
 301+ B1E9 17          >                        rla
 301+ B1EA 91          >                        sub c
 301+ B1EB 30 01       >                        jr  nc,.Div8_NoAdd
 301+ B1ED 81          >                        add a,c
 301+ B1EE             >.Div8_NoAdd:
 302+ B1EE                                      EDivC_Iteration
 302+ B1EE CB 13       >                        rl  e
 302+ B1F0 17          >                        rla
 302+ B1F1 91          >                        sub c
 302+ B1F2 30 01       >                        jr  nc,.Div8_NoAdd
 302+ B1F4 81          >                        add a,c
 302+ B1F5             >.Div8_NoAdd:
 303+ B1F5                                      EDivC_Iteration
 303+ B1F5 CB 13       >                        rl  e
 303+ B1F7 17          >                        rla
 303+ B1F8 91          >                        sub c
 303+ B1F9 30 01       >                        jr  nc,.Div8_NoAdd
 303+ B1FB 81          >                        add a,c
 303+ B1FC             >.Div8_NoAdd:
 304+ B1FC                                      EDivC_Iteration
 304+ B1FC CB 13       >                        rl  e
 304+ B1FE 17          >                        rla
 304+ B1FF 91          >                        sub c
 304+ B200 30 01       >                        jr  nc,.Div8_NoAdd
 304+ B202 81          >                        add a,c
 304+ B203             >.Div8_NoAdd:
 305+ B203                                      EDivC_Iteration
 305+ B203 CB 13       >                        rl  e
 305+ B205 17          >                        rla
 305+ B206 91          >                        sub c
 305+ B207 30 01       >                        jr  nc,.Div8_NoAdd
 305+ B209 81          >                        add a,c
 305+ B20A             >.Div8_NoAdd:
 306+ B20A 47                                   ld      b,a
 307+ B20B 7B                                   ld      a,e
 308+ B20C 17                                   rla
 309+ B20D 2F                                   cpl
 310+ B20E C9                                   ret
 311+ B20F
 312+ B20F
 313+ B20F              BCDIVDE_Iteration:      MACRO
 314+ B20F ~                                    rla
 315+ B20F ~                                    adc	    hl,hl
 316+ B20F ~                                    add	    hl,de
 317+ B20F ~                                    jr	    c,1F
 318+ B20F ~                                    sbc	    hl,de
 319+ B20F ~            1:
 320+ B20F                                      ENDM
 321+ B20F
 322+ B20F
 323+ B20F              ; ">BC_Div_DE: BC = BC / DE. HL = remainder fast divide with unrolled loop"
 324+ B20F              ;BC/DE ==> BC, remainder in HL
 325+ B20F              ;NOTE: BC/0 returns 0 as the quotient.
 326+ B20F              ;min: 738cc
 327+ B20F              ;max: 898cc
 328+ B20F              ;avg: 818cc
 329+ B20F              ;144 bytes
 330+ B20F AF           BC_Div_DE:              xor a
 331+ B210 67                                   ld h,a
 332+ B211 6F                                   ld l,a
 333+ B212 93                                   sub e
 334+ B213 5F                                   ld e,a
 335+ B214 9F                                   sbc a,a
 336+ B215 92                                   sub d
 337+ B216 57                                   ld d,a
 338+ B217 78                                   ld a,b
 339+ B218                                      BCDIVDE_Iteration
 339+ B218 17          >                        rla
 339+ B219 ED 6A       >                        adc	    hl,hl
 339+ B21B 19          >                        add	    hl,de
 339+ B21C 38 02       >                        jr	    c,1F
 339+ B21E ED 52       >                        sbc	    hl,de
 339+ B220             >1:
 340+ B220                                      BCDIVDE_Iteration
 340+ B220 17          >                        rla
 340+ B221 ED 6A       >                        adc	    hl,hl
 340+ B223 19          >                        add	    hl,de
 340+ B224 38 02       >                        jr	    c,1F
 340+ B226 ED 52       >                        sbc	    hl,de
 340+ B228             >1:
 341+ B228                                      BCDIVDE_Iteration
 341+ B228 17          >                        rla
 341+ B229 ED 6A       >                        adc	    hl,hl
 341+ B22B 19          >                        add	    hl,de
 341+ B22C 38 02       >                        jr	    c,1F
 341+ B22E ED 52       >                        sbc	    hl,de
 341+ B230             >1:
 342+ B230                                      BCDIVDE_Iteration
 342+ B230 17          >                        rla
 342+ B231 ED 6A       >                        adc	    hl,hl
 342+ B233 19          >                        add	    hl,de
 342+ B234 38 02       >                        jr	    c,1F
 342+ B236 ED 52       >                        sbc	    hl,de
 342+ B238             >1:
 343+ B238                                      BCDIVDE_Iteration
 343+ B238 17          >                        rla
 343+ B239 ED 6A       >                        adc	    hl,hl
 343+ B23B 19          >                        add	    hl,de
 343+ B23C 38 02       >                        jr	    c,1F
 343+ B23E ED 52       >                        sbc	    hl,de
 343+ B240             >1:
 344+ B240                                      BCDIVDE_Iteration
 344+ B240 17          >                        rla
 344+ B241 ED 6A       >                        adc	    hl,hl
 344+ B243 19          >                        add	    hl,de
 344+ B244 38 02       >                        jr	    c,1F
 344+ B246 ED 52       >                        sbc	    hl,de
 344+ B248             >1:
 345+ B248                                      BCDIVDE_Iteration
 345+ B248 17          >                        rla
 345+ B249 ED 6A       >                        adc	    hl,hl
 345+ B24B 19          >                        add	    hl,de
 345+ B24C 38 02       >                        jr	    c,1F
 345+ B24E ED 52       >                        sbc	    hl,de
 345+ B250             >1:
 346+ B250                                      BCDIVDE_Iteration
 346+ B250 17          >                        rla
 346+ B251 ED 6A       >                        adc	    hl,hl
 346+ B253 19          >                        add	    hl,de
 346+ B254 38 02       >                        jr	    c,1F
 346+ B256 ED 52       >                        sbc	    hl,de
 346+ B258             >1:
 347+ B258 17                                   rla
 348+ B259 47                                   ld b,a
 349+ B25A
 350+ B25A 79                                   ld a,c
 351+ B25B                                      BCDIVDE_Iteration
 351+ B25B 17          >                        rla
 351+ B25C ED 6A       >                        adc	    hl,hl
 351+ B25E 19          >                        add	    hl,de
 351+ B25F 38 02       >                        jr	    c,1F
 351+ B261 ED 52       >                        sbc	    hl,de
 351+ B263             >1:
 352+ B263                                      BCDIVDE_Iteration
 352+ B263 17          >                        rla
 352+ B264 ED 6A       >                        adc	    hl,hl
 352+ B266 19          >                        add	    hl,de
 352+ B267 38 02       >                        jr	    c,1F
 352+ B269 ED 52       >                        sbc	    hl,de
 352+ B26B             >1:
 353+ B26B                                      BCDIVDE_Iteration
 353+ B26B 17          >                        rla
 353+ B26C ED 6A       >                        adc	    hl,hl
 353+ B26E 19          >                        add	    hl,de
 353+ B26F 38 02       >                        jr	    c,1F
 353+ B271 ED 52       >                        sbc	    hl,de
 353+ B273             >1:
 354+ B273                                      BCDIVDE_Iteration
 354+ B273 17          >                        rla
 354+ B274 ED 6A       >                        adc	    hl,hl
 354+ B276 19          >                        add	    hl,de
 354+ B277 38 02       >                        jr	    c,1F
 354+ B279 ED 52       >                        sbc	    hl,de
 354+ B27B             >1:
 355+ B27B                                      BCDIVDE_Iteration
 355+ B27B 17          >                        rla
 355+ B27C ED 6A       >                        adc	    hl,hl
 355+ B27E 19          >                        add	    hl,de
 355+ B27F 38 02       >                        jr	    c,1F
 355+ B281 ED 52       >                        sbc	    hl,de
 355+ B283             >1:
 356+ B283                                      BCDIVDE_Iteration
 356+ B283 17          >                        rla
 356+ B284 ED 6A       >                        adc	    hl,hl
 356+ B286 19          >                        add	    hl,de
 356+ B287 38 02       >                        jr	    c,1F
 356+ B289 ED 52       >                        sbc	    hl,de
 356+ B28B             >1:
 357+ B28B                                      BCDIVDE_Iteration
 357+ B28B 17          >                        rla
 357+ B28C ED 6A       >                        adc	    hl,hl
 357+ B28E 19          >                        add	    hl,de
 357+ B28F 38 02       >                        jr	    c,1F
 357+ B291 ED 52       >                        sbc	    hl,de
 357+ B293             >1:
 358+ B293                                      BCDIVDE_Iteration
 358+ B293 17          >                        rla
 358+ B294 ED 6A       >                        adc	    hl,hl
 358+ B296 19          >                        add	    hl,de
 358+ B297 38 02       >                        jr	    c,1F
 358+ B299 ED 52       >                        sbc	    hl,de
 358+ B29B             >1:
 359+ B29B 17                                   rla
 360+ B29C 4F                                   ld c,a
 361+ B29D C9                                   ret
 362+ B29E
 363+ B29E              ;Inputs:
 364+ B29E              ;     DE,BC are 8.8 Fixed Point numbers
 365+ B29E              ;Outputs:
 366+ B29E              ;     DE is the 8.8 Fixed Point result (rounded to the least significant bit)
 367+ B29E              ;if DE is 0 : 122cc or 136cc if BC is negative
 368+ B29E              ;if |BC|>=128*|DE| : 152cc or 166cc if BC is negative
 369+ B29E              ;Otherwise:
 370+ B29E              ;min: 1107cc
 371+ B29E              ;max: 1319cc
 372+ B29E              ;avg: 1201cc
 373+ B29E 78           BC_Div_DE_88:           ld a,b  ; First, find out if the output is positive or negative
 374+ B29F AA                                   xor d
 375+ B2A0 F5                                   push af   ;sign bit is the result sign bit
 376+ B2A1              ; Now make sure the inputs are positive
 377+ B2A1 A8                                   xor b     ;A now has the value of B, since I XORed it with D twice (cancelling)
 378+ B2A2 F2 AB B2                             jp p,BC_Div_DE_88_lbl1   ;if Positive, don't negate
 379+ B2A5 AF                                   xor a
 380+ B2A6 91                                   sub c
 381+ B2A7 4F                                   ld c,a
 382+ B2A8 9F                                   sbc a,a
 383+ B2A9 90                                   sub b
 384+ B2AA 47                                   ld b,a
 385+ B2AB 7A           BC_Div_DE_88_lbl1:      ld a,d  ;now make DE negative to optimize the remainder comparison
 386+ B2AC B2                                   or d
 387+ B2AD FA B6 B2                             jp m,BC_Div_DE_88_lbl2
 388+ B2B0 AF                                   xor a
 389+ B2B1 93                                   sub e
 390+ B2B2 5F                                   ld e,a
 391+ B2B3 9F                                   sbc a,a
 392+ B2B4 92                                   sub d
 393+ B2B5 57                                   ld d,a
 394+ B2B6 B3           BC_Div_DE_88_lbl2:      or e      ;if DE is 0, we can call it an overflow ;A is the current value of D
 395+ B2B7 28 1D                                jr z,div_fixed88_overflow
 396+ B2B9 26 00                                ld h,0          ;The accumulator gets set to B if no overflow.;We can use H=0 to save a few cc in the meantime
 397+ B2BB 78                                   ld a,b;if B+DE>=0, then we'll have overflow
 398+ B2BC 83                                   add a,e
 399+ B2BD 7A                                   ld a,d
 400+ B2BE 8C                                   adc a,h
 401+ B2BF 38 15                                jr c,div_fixed88_overflow
 402+ B2C1 68                                   ld l,b  ;Now we can load the accumulator/remainder with B;H is already 0
 403+ B2C2 79                                   ld a,c
 404+ B2C3 CD DE B2                             call div_fixed88_sub
 405+ B2C6 4F                                   ld c,a
 406+ B2C7 78                                   ld a,b      ;A is now 0
 407+ B2C8 CD DE B2                             call div_fixed88_sub
 408+ B2CB 51                                   ld d,c
 409+ B2CC 5F                                   ld e,a
 410+ B2CD F1                                   pop af
 411+ B2CE F0                                   ret p
 412+ B2CF AF                                   xor a
 413+ B2D0 93                                   sub e
 414+ B2D1 5F                                   ld e,a
 415+ B2D2 9F                                   sbc a,a
 416+ B2D3 92                                   sub d
 417+ B2D4 57                                   ld d,a
 418+ B2D5 C9                                   ret
 419+ B2D6
 420+ B2D6 11 FF 7F     div_fixed88_overflow:   ld de,$7FFF
 421+ B2D9 F1                                   pop af
 422+ B2DA F0                                   ret p
 423+ B2DB 13                                   inc de
 424+ B2DC 1C                                   inc e
 425+ B2DD C9                                   ret
 426+ B2DE
 427+ B2DE              ;min: 456cc
 428+ B2DE              ;max: 536cc
 429+ B2DE              ;avg: 496cc
 430+ B2DE 06 08        div_fixed88_sub:        ld b,8
 431+ B2E0 17           BC_Div_DE_88_lbl3:      rla
 432+ B2E1 ED 6A                                adc hl,hl
 433+ B2E3 19                                   add hl,de
 434+ B2E4 38 02                                jr c,$+4
 435+ B2E6 ED 52                                sbc hl,de
 436+ B2E8 10 F6                                djnz BC_Div_DE_88_lbl3
 437+ B2EA 8F                                   adc a,a
 438+ B2EB C9                                   ret
 439+ B2EC
# file closed: ./Maths/asm_divide.asm
 663  B2EC                  INCLUDE "./Maths/asm_unitvector.asm"
# file opened: ./Maths/asm_unitvector.asm
   1+ B2EC              asm_tis2:
   2+ B2EC              ; ">TIS2 A = (A / Q * 96) so A = -96 ---- 96  range "
   3+ B2EC              ; ">DOES NOT DO SIGNED YET"
   4+ B2EC F5           	push af
   5+ B2ED E6 7F            and SignMask8Bit
   6+ B2EF 57           	ld d,a				;; d = A
   7+ B2F0 3A DF 9D     	ld a,(varQ)
   8+ B2F3 5F           	ld e,a
   9+ B2F4 7A           	ld a,d
  10+ B2F5 BB           	cp e
  11+ B2F6 30 11        	jr nc, .tis2_set96	;; jump if a >= Q
  12+ B2F8 1E 60        	ld e, 96
  13+ B2FA ED 30        	mul				; de = d * 96 (also a * 96 )
  14+ B2FC EB           	ex de,hl
  15+ B2FD 3A DF 9D     	ld a,(varQ)
  16+ B300 4F           	ld c,a
  17+ B301 CD 9B B1     	call asm_div16
  18+ B304 F1           	pop af
  19+ B305 E6 80        	and $80
  20+ B307 B5           	or l
  21+ B308 C9           	ret
  22+ B309              .tis2_set96:
  23+ B309 F1           	pop af
  24+ B30A E6 80        	and $80
  25+ B30C F6 96        	or $96
  26+ B30E C9           	ret
  27+ B30F
  28+ B30F
  29+ B30F              asm_unit_vector:
  30+ B30F              squareregfx:
  31+ B30F 3A 8E C0     	ld a,(UBnkXScaled)
  32+ B312 57           	ld d,a
  33+ B313 5F           	ld e,a
  34+ B314 ED 30        	mul
  35+ B316 EB           	ex de,hl
  36+ B317              squareregfy:
  37+ B317 3A 90 C0     	ld a, (UBnkYScaled)
  38+ B31A 57           	ld d,a
  39+ B31B 5F           	ld e,a
  40+ B31C ED 30        	mul
  41+ B31E 19           	add hl,de
  42+ B31F              squareregfz:
  43+ B31F 3A 92 C0     	ld a, (UBnkZScaled)
  44+ B322 57           	ld d,a
  45+ B323 5F           	ld e,a
  46+ B324 ED 30        	mul
  47+ B326 19           	add hl,de
  48+ B327 EB           	ex de,hl			; de de to number to root
  49+ B328              hlequsquareroot:
  50+ B328 CD 23 B0     	call asm_sqrt		; hl = sqrt (fx^2 + fy^2 + fx^2)
  51+ B32B E5           	push hl				; save it for work 3 copies
  52+ B32C E5           	push hl				; save it for work
  53+ B32D E5           	push hl				; save it for work
  54+ B32E              normfx:
  55+ B32E 3A 8E C0     	ld a,(UBnkXScaled)
  56+ B331 E1           	pop hl				; get copy #1
  57+ B332 7D           	ld a,l				; we assume only l had worthwhile data but could spill into h
  58+ B333 4F           	ld c,a
  59+ B334 CD EC B2     	call asm_tis2
  60+ B337 32 8E C0     	ld (UBnkXScaled),a
  61+ B33A              normfy:
  62+ B33A 3A 90 C0     	ld a,(UBnkYScaled)
  63+ B33D E1           	pop hl				; get copy #2
  64+ B33E 7D           	ld a,l
  65+ B33F 4F           	ld c,a
  66+ B340 CD EC B2     	call asm_tis2
  67+ B343 32 90 C0     	ld (UBnkYScaled),a
  68+ B346              normfz:
  69+ B346 3A 92 C0     	ld a,(UBnkZScaled)
  70+ B349 E1           	pop hl				; get copy #2
  71+ B34A 7D           	ld a,l
  72+ B34B 4F           	ld c,a
  73+ B34C CD EC B2     	call asm_tis2
  74+ B34F 32 92 C0     	ld (UBnkZScaled),a
  75+ B352              asm_unit_vector_end:
  76+ B352 C9           	ret
  77+ B353
# file closed: ./Maths/asm_unitvector.asm
 664  B353                  INCLUDE "./Maths/compare16.asm"
# file opened: ./Maths/compare16.asm
   1+ B353              ; Input:
   2+ B353              ;       HL = 1st value
   3+ B353              ;       DE = 2nd value
   4+ B353              ; Output:
   5+ B353              ;       CF, ZF = results of comparison:
   6+ B353              ;
   7+ B353              ;               CF      ZF      Result
   8+ B353              ;               -----------------------------------
   9+ B353              ;               0       0       HL > DE
  10+ B353              ;               0       1       HL == DE
  11+ B353              ;               1       0       HL < DE
  12+ B353              ;               1       1       Impossible
  13+ B353              ;
  14+ B353
  15+ B353 E5           compare16HLDE:      push    hl
  16+ B354 A7                               and     a
  17+ B355 ED 52                            sbc     hl,de
  18+ B357 E1                               pop     hl
  19+ B358 C9                               ret
  20+ B359
  21+ B359              ; With compare signed we do ABS comparison
  22+ B359              ; this is used for view ports as we just want to know if its +/- out side of 90 degrees
  23+ B359
  24+ B359 E5 D5        compare16HLDEABS:   push    hl,,de
  25+ B35B 7C                               ld      a,h                                     ; Quick pass see of both the same sign
  26+ B35C E6 7F                            and     SignMask8Bit
  27+ B35E 67                               ld      h,a
  28+ B35F 7A                               ld      a,d                                     ; Quick pass see of both the same sign
  29+ B360 E6 7F                            and     SignMask8Bit
  30+ B362 57                               ld      d,a
  31+ B363 A7                               and     a
  32+ B364 ED 52                            sbc     hl,de
  33+ B366 D1 E1                            pop     hl,,de
  34+ B368 C9                               ret
  35+ B369
  36+ B369
# file closed: ./Maths/compare16.asm
 665  B369                  INCLUDE "./Maths/negate16.asm"
# file opened: ./Maths/negate16.asm
   1+ B369              ;;----------------------------------------------------------------------------------------------------------------------
   2+ B369              ;; 16-bit negate
   3+ B369              negate16:
   4+ B369              negate16hl:
   5+ B369                      ; Input:
   6+ B369                      ;       HL = value
   7+ B369                      ; Output:
   8+ B369                      ;       HL = -value
   9+ B369                      ; Destroys:
  10+ B369                      ;       AF
  11+ B369                      ;
  12+ B369 AF           	xor 	a
  13+ B36A 95           	sub 	l
  14+ B36B 6F           	ld 		l,a
  15+ B36C 9F           	sbc 	a,a
  16+ B36D 94           	sub 	h
  17+ B36E 67           	ld 		h,a
  18+ B36F C9           	ret
  19+ B370
  20+ B370              negate16de:
  21+ B370 AF           	xor 	a
  22+ B371 93           	sub 	e
  23+ B372 5F           	ld 		e,a
  24+ B373 9F           	sbc 	a,a
  25+ B374 92           	sub 	d
  26+ B375 57           	ld 		d,a
  27+ B376 C9           	ret
  28+ B377
  29+ B377              negate16bc:
  30+ B377 AF           	xor 	a
  31+ B378 91           	sub 	c
  32+ B379 4F           	ld 		c,a
  33+ B37A 9F           	sbc 	a,a
  34+ B37B 90           	sub 	b
  35+ B37C 47           	ld 		b,a
  36+ B37D C9           	ret
  37+ B37E
  38+ B37E
  39+ B37E              macronegate16hl:	MACRO
  40+ B37E ~            					xor 	a
  41+ B37E ~            					sub 	l
  42+ B37E ~            					ld 		l,a
  43+ B37E ~            					sbc 	a,a
  44+ B37E ~            					sub 	h
  45+ B37E ~            					ld 		h,a
  46+ B37E              					ENDM
  47+ B37E
  48+ B37E              macronegate16de:	MACRO
  49+ B37E ~            					xor 	a
  50+ B37E ~                                sub 	e
  51+ B37E ~                                ld 		e,a
  52+ B37E ~                                sbc 	a,a
  53+ B37E ~                                sub 	d
  54+ B37E ~                                ld 		d,a
  55+ B37E              					ENDM
  56+ B37E              macronegate16bc:	MACRO
  57+ B37E ~            					xor 	a
  58+ B37E ~                                sub 	c
  59+ B37E ~                                ld 		c,a
  60+ B37E ~                                sbc 	a,a
  61+ B37E ~                                sub 	b
  62+ B37E ~                                ld 		b,a
  63+ B37E              					ENDM
  64+ B37E
  65+ B37E              macronegate16ix:	MACRO
  66+ B37E ~            					xor 	a
  67+ B37E ~                                sub 	ixl
  68+ B37E ~                                ld 		ixl,a
  69+ B37E ~                                sbc 	a,a
  70+ B37E ~                                sub 	ixh
  71+ B37E ~                                ld 		ixh,a
  72+ B37E              					ENDM
# file closed: ./Maths/negate16.asm
 666  B37E                  INCLUDE "./Maths/normalise96.asm"
# file opened: ./Maths/normalise96.asm
   1+ B37E DD 68        AequAdivDmul96Unsg:     ld			ixl,b						; Get sign bit passed in as bit 7 in b
   2+ B380                                      JumpIfAGTENusng d, TISXAccGTEQ			; if A >= Q then return with a 1 (unity i.e. 96) with the correct sign
   2+ B380 BA          >                        cp     d
   2+ B381 D2 96 B3    >                        jp		nc,TISXAccGTEQ
   3+ B384 4F                                   ld			c,a
   4+ B385 CD 8D B1                             call		asm_div8
   5+ B388 79                                   ld			a,c							; a = result
   6+ B389 CB 3F                                srl			a							; result / 4
   7+ B38B 47                                   ld			b,a							; t = t /4
   8+ B38C CB 3F                                srl			a							; result / 8
   9+ B38E 80                                   add			a,b							; result /8 + result /4
  10+ B38F 47                                   ld			b,a							; b = 3/8*Acc (max = 96)
  11+ B390 DD 7D                                ld			a,ixl						; copy of Acc to look at sign bit
  12+ B392 E6 80                                and			$80							; recover sign only
  13+ B394 B0                                   or			b							; now put b back in so we have a leading sign bit (note not 2's compliment)
  14+ B395 C9                                   ret
  15+ B396              TISXAccGTEQ:
  16+ B396              ;TI4:										;\ clean to +/- unity
  17+ B396 DD 7D                                ld			a,ixl     					; get saved sign from b
  18+ B398 E6 80                                and			$80							; copy of Acc
  19+ B39A F6 60                                or			$60							; unity
  20+ B39C C9                                   ret
  21+ B39D
  22+ B39D
  23+ B39D
  24+ B39D
  25+ B39D              normaliseXX1596fast:
  26+ B39D                  ; .NORM	\ -> &3BD6 \ Normalize 3-vector length of XX15
  27+ B39D 3A 8E C0     	ld		a,(XX15)		    ; XX15+0
  28+ B3A0 DD 67        	ld		ixh,a               ; ixh = signed x component
  29+ B3A2 E6 7F        	and		SignMask8Bit                 ; a = unsigned version
  30+ B3A4              N96SQX:
  31+ B3A4              	inline_squde				; Use inline square for speed	objective is SQUA \ P.A =A7*A7 x^2
  31+ B3A4 5F          >			ld	e,a
  31+ B3A5 57          >			ld  d,a
  31+ B3A6 ED 30       >			mul
  32+ B3A8 62           	ld		h,d					; h == varR d = varO e= varA
  33+ B3A9 6B           	ld		l,e					; l == varQ  															:: so HL = XX15[x]^2
  34+ B3AA              N96SQY:
  35+ B3AA 3A 8F C0     	ld		a,(XX15+1)
  36+ B3AD DD 6F        	ld		ixl,a               ; ixl = signed y componet
  37+ B3AF E6 7F        	and		SignMask8Bit                 ; = abs
  38+ B3B1              	inline_squde				; Use inline square for speed	objective is SQUA \ P.A =A7*A7 x^2		:: so DE = XX15[y]^2
  38+ B3B1 5F          >			ld	e,a
  38+ B3B2 57          >			ld  d,a
  38+ B3B3 ED 30       >			mul
  39+ B3B5 19           	add		hl,de				; hl = XX15[x]^2 + XX15[y]^2
  40+ B3B6              N96SQZ:
  41+ B3B6 3A 90 C0     	ld		a,(XX15+2)			; Note comments say \ ZZ15+2  should be \ XX15+2 as per code
  42+ B3B9 FD 67        	ld		iyh,a               ; iyh = signed
  43+ B3BB E6 7F        	and		SignMask8Bit                 ; unsigned
  44+ B3BD              	inline_squde				; Use inline square for speed	objective is SQUA \ P.A =A7*A7 x^2		:: so DE = XX15[z]^2
  44+ B3BD 5F          >			ld	e,a
  44+ B3BE 57          >			ld  d,a
  44+ B3BF ED 30       >			mul
  45+ B3C1              N96SQADD:
  46+ B3C1 19           	add		hl,de				; hl = XX15[x]^2 + XX15[y]^2 + XX15[z]^2
  47+ B3C2 EB           	ex		de,hl				; hl => de ready for square root
  48+ B3C3              N96SQRT:
  49+ B3C3 CD 23 B0     	call	asm_sqrt			; hl = sqrt(XX15[x]^2 + XX15[y]^2 + XX15[z]^2), we just are interested in l which is the new Q
  50+ B3C6              N96NORMX:
  51+ B3C6 3A 8E C0     	ld		a,(XX15+0)
  52+ B3C9 E6 7F        	and		SignMask8Bit
  53+ B3CB 4F           	ld		c,a
  54+ B3CC 55           	ld		d,l					; Q(i.e. l) => D, later we can just pop into de
  55+ B3CD CD D1 B5     	call	AequAdivDmul96	; does not use HL so we can retain it
  56+ B3D0 47           	ld		b,a				;++SGN
  57+ B3D1 DD 7C        	ld		a,ixh			;++SGN
  58+ B3D3 E6 80        	and		$80				;++SGN
  59+ B3D5 B0           	or		b				;++SGN
  60+ B3D6 32 8E C0     	ld		(XX15+0),a
  61+ B3D9              N96NORMY:
  62+ B3D9 3A 8F C0     	ld		a,(XX15+1)
  63+ B3DC E6 7F        	and		SignMask8Bit
  64+ B3DE 4F           	ld		c,a
  65+ B3DF 55           	ld		d,l					; Q(i.e. l) => D, later we can just pop into de
  66+ B3E0 CD D1 B5     	call	AequAdivDmul96     	; does not use HL so we can retain it
  67+ B3E3 47           	ld		b,a				;++SGN
  68+ B3E4 DD 7D        	ld		a,ixl			;++SGN
  69+ B3E6 E6 80        	and		$80				;++SGN
  70+ B3E8 B0           	or		b				;++SGN
  71+ B3E9 32 8F C0     	ld		(XX15+1),a
  72+ B3EC              N96NORMZ:
  73+ B3EC 3A 90 C0     	ld		a,(XX15+2)
  74+ B3EF E6 7F        	and		SignMask8Bit
  75+ B3F1 4F           	ld		c,a
  76+ B3F2 55           	ld		d,l					; Q(i.e. l) => D, later we can just pop into de
  77+ B3F3 CD D1 B5     	call	AequAdivDmul96	; does not use HL so we can retain it
  78+ B3F6 47           	ld		b,a				;++SGN
  79+ B3F7 FD 7C        	ld		a,iyh			;++SGN
  80+ B3F9 E6 80        	and		$80				;++SGN
  81+ B3FB B0           	or		b				;++SGN
  82+ B3FC 32 90 C0     	ld		(XX15+2),a
  83+ B3FF C9           	ret
  84+ B400
  85+ B400              ; Normalise vector
  86+ B400              ; scale Q = Sqrt (X^2 + Y^2 + Z^2)
  87+ B400              ; X = X / Q with 96 = 1 , i.e X = X / Q * 3/8
  88+ B400              ; Y = Y / Q with 96 = 1 , i.e Y = Y / Q * 3/8
  89+ B400              ; Z = Z / Q with 96 = 1 , i.e Z = Z / Q * 3/8
  90+ B400              ;
  91+ B400              ;
  92+ B400              ;
  93+ B400
  94+ B400              ; .NORM	\ -> &3BD6 \ Normalize 3-vector length of XX15
  95+ B400 3A 8E C0     normaliseXX1596:        ld		a,(XX15)		    ; XX15+0
  96+ B403                                      inline_squde				; Use inline square for speed	objective is SQUA \ P.A =A7*A7 x^2
  96+ B403 5F          >			ld	e,a
  96+ B404 57          >			ld  d,a
  96+ B405 ED 30       >			mul
  97+ B407 7A                                   ld		a,d
  98+ B408 32 E0 9D                             ld		(varR),a			; R	 \ hi sum later use b
  99+ B40B 7B                                   ld		a,e
 100+ B40C 32 DF 9D                             ld		(varQ),a			; Q	 \ lo sum later use c
 101+ B40F 32 DD 9C                             ld		(varP),a			; P	 \ lo sum later just drop
 102+ B412 3A 8F C0                             ld		a,(XX15+1)
 103+ B415                                      inline_squde				; Use inline square for speed	objective is SQUA \ P.A =A7*A7 x^2
 103+ B415 5F          >			ld	e,a
 103+ B416 57          >			ld  d,a
 103+ B417 ED 30       >			mul
 104+ B419 7A                                   ld		a,d
 105+ B41A 32 FB 9D                             ld		(varT),a			; T	 \ hi sum
 106+ B41D 7B                                   ld		a,e
 107+ B41E 32 DD 9C                             ld		(varP),a			; P	 \ lo sum
 108+ B421 21 DF 9D                             ld		hl,varQ
 109+ B424 8E                                   adc		a,(hl)				; +Q
 110+ B425 32 DF 9D                             ld		(varQ),a			; =>Q
 111+ B428 3A FB 9D                             ld		a,(varT)			;
 112+ B42B 21 E0 9D                             ld		hl,varR
 113+ B42E 8E                                   adc		a,(hl)				;  R
 114+ B42F 32 E0 9D                             ld		(varR),a			; R
 115+ B432 3A 90 C0                             ld		a,(XX15+2)			; Note comments say \ ZZ15+2  should be \ XX15+2 as per code
 116+ B435                                      inline_squde				; Use inline square for speed	objective is SQUA \ P.A =A7*A7 x^2
 116+ B435 5F          >			ld	e,a
 116+ B436 57          >			ld  d,a
 116+ B437 ED 30       >			mul
 117+ B439 7A                                   ld		a,d
 118+ B43A 32 FB 9D                             ld		(varT),a			; T	 \ hi sum
 119+ B43D 7B                                   ld		a,e
 120+ B43E 32 DD 9C                             ld		(varP),a			; P	 \ lo sum
 121+ B441 21 DF 9D                             ld		hl,varQ
 122+ B444 8E                                   adc		a,(hl)				; +Q
 123+ B445 32 DF 9D                             ld		(varQ),a			; =>Q  xlo2 + ylo2 + zlo2
 124+ B448 3A FB 9D                             ld		a,(varT)			; T temp Hi
 125+ B44B 21 E0 9D                             ld		hl,varR
 126+ B44E 8E                                   adc		a,(hl)				; +R
 127+ B44F 32 E0 9D                             ld		(varR),a			; R
 128+ B452 CD 46 B0                             call	sqrtQR				; Q = SQR(Qlo.Rhi) Q <~127
 129+ B455 3A 8E C0                             ld		a,(XX15+0)
 130+ B458 CD CB B5                             call	AequAdivQmul96		;  TIS2 \ *96/Q
 131+ B45B 32 8E C0                             ld		(XX15+0),a
 132+ B45E 3A 8F C0                             ld		a,(XX15+1)
 133+ B461 CD CB B5                             call	AequAdivQmul96		;  TIS2 \ *96/Q
 134+ B464 32 8F C0                             ld		(XX15+1),a
 135+ B467 3A 8F C0                             ld		a,(XX15+1)
 136+ B46A CD CB B5                             call	AequAdivQmul96		;  TIS2 \ *96/Q
 137+ B46D 32 8F C0                             ld		(XX15+1),a
 138+ B470 C9                                   ret
 139+ B471
 140+ B471
# file closed: ./Maths/normalise96.asm
 667  B471                  INCLUDE "./Maths/binary_to_decimal.asm"
# file opened: ./Maths/binary_to_decimal.asm
   1+ B471              ;Number in hl to decimal ASCII
   2+ B471              ;Thanks to z80 Bits
   3+ B471              ;inputs:	hl = number to ASCII
   4+ B471              ;example: hl=300 outputs '00300'
   5+ B471              ;destroys: af, bc, hl, de used
   6+ B471              DispHLtoDE:
   7+ B471              ; "DispHL, writes HL to DE address"
   8+ B471 01 F0 D8     	ld	bc,-10000
   9+ B474 CD 8A B4     	call	Num1
  10+ B477 01 18 FC     	ld	bc,-1000
  11+ B47A CD 8A B4     	call	Num1
  12+ B47D 01 9C FF     	ld	bc,-100
  13+ B480 CD 8A B4     	call	Num1
  14+ B483 0E F6        	ld	c,-10
  15+ B485 CD 8A B4     	call	Num1
  16+ B488 0E FF        	ld	c,-1
  17+ B48A              Num1:
  18+ B48A 3E 2F        	ld	a,'0'-1
  19+ B48C              .Num2:
  20+ B48C 3C           	inc	a
  21+ B48D 09           	add	hl,bc
  22+ B48E 38 FC        	jr	c,.Num2
  23+ B490 ED 42        	sbc	hl,bc
  24+ B492 12           	ld	(de),a
  25+ B493 13           	inc	de
  26+ B494 C9           	ret
  27+ B495
  28+ B495              DispAtoDE:
  29+ B495 26 00        	ld h,0
  30+ B497 6F           	ld l,a
  31+ B498 C3 71 B4     	jp DispHLtoDE
  32+ B49B
  33+ B49B              DispPriceAtoDE:
  34+ B49B 26 00        	ld h,0
  35+ B49D 6F           	ld l,a
  36+ B49E 01 9C FF     	ld	bc,-100
  37+ B4A1 CD B1 B4     	call	.NumLeadBlank1
  38+ B4A4 0E F6        	ld	c,-10
  39+ B4A6 CD 8A B4     	call	Num1
  40+ B4A9 3E 2E        	ld		a,'.'					; we could assume preformat but
  41+ B4AB 12           	ld		(de),a					; we can optimse that later TODO
  42+ B4AC 13           	inc		de						; with just an inc De
  43+ B4AD 0E FF        	ld	c,-1
  44+ B4AF 18 D9        	jr		Num1
  45+ B4B1              .NumLeadBlank1:
  46+ B4B1 3E 2F        	ld	a,'0'-1
  47+ B4B3              .NumLeadBlank2:
  48+ B4B3 3C           	inc	a
  49+ B4B4 09           	add	hl,bc
  50+ B4B5 38 FC        	jr	c,.NumLeadBlank2
  51+ B4B7 FE 30        	cp	'0'
  52+ B4B9 20 02        	jr	nz,.DontBlank
  53+ B4BB              .Blank:
  54+ B4BB 3E 20        	ld	a,' '
  55+ B4BD              .DontBlank:
  56+ B4BD ED 42        	sbc	hl,bc
  57+ B4BF 12           	ld	(de),a
  58+ B4C0 13           	inc	de
  59+ B4C1 C9           	ret
  60+ B4C2
  61+ B4C2              DispQtyAtoDE:
  62+ B4C2 FE 00        	cp	0
  63+ B4C4 28 23        	jr	z,.NoStock
  64+ B4C6 26 00        	ld h,0
  65+ B4C8 6F           	ld l,a
  66+ B4C9 01 9C FF     	ld	bc,-100
  67+ B4CC CD D8 B4     	call	.NumLeadBlank1
  68+ B4CF 0E F6        	ld	c,-10
  69+ B4D1 CD D8 B4     	call	.NumLeadBlank1
  70+ B4D4 0E FF        	ld	c,-1
  71+ B4D6 18 B2        	jr		Num1
  72+ B4D8              .NumLeadBlank1:
  73+ B4D8 3E 2F        	ld	a,'0'-1
  74+ B4DA              .NumLeadBlank2:
  75+ B4DA 3C           	inc	a
  76+ B4DB 09           	add	hl,bc
  77+ B4DC 38 FC        	jr	c,.NumLeadBlank2
  78+ B4DE FE 30        	cp	'0'
  79+ B4E0 20 02        	jr	nz,.DontBlank
  80+ B4E2              .Blank:
  81+ B4E2 3E 20        	ld	a,' '
  82+ B4E4              .DontBlank:
  83+ B4E4 ED 42        	sbc	hl,bc
  84+ B4E6 12           	ld	(de),a
  85+ B4E7 13           	inc	de
  86+ B4E8 C9           	ret
  87+ B4E9              .NoStock:
  88+ B4E9 3E 20        	ld	a,' '
  89+ B4EB 12           	ld	(de),a
  90+ B4EC 13           	inc	de
  91+ B4ED 12           	ld	(de),a
  92+ B4EE 13           	inc	de
  93+ B4EF 3E 2D        	ld	a,'-'
  94+ B4F1 12           	ld	(de),a
  95+ B4F2 13           	inc de
  96+ B4F3 C9           	ret
  97+ B4F4
  98+ B4F4
  99+ B4F4              ;### CLCN32 -> Converts 32Bit-Value in ASCII-String (terminated by 0)
 100+ B4F4              ;### Input      DE,IX=32bit value, IY=destination address
 101+ B4F4              ;### Output     IY=last char in destination string
 102+ B4F4              ;### Destroyed AF,BC,DE,HL,IX
 103+ B4F4 01 00 00 00  clcn32t dw 1,0,     10,0,     100,0,     1000,0,       10000,0
 103+ B4F8 0A 00 00 00
 103+ B4FC 64 00 00 00
 103+ B500 E8 03 00 00
 103+ B504 10 27 00 00
 104+ B508 A0 86 01 00          dw $86a0,1, $4240,$0f, $9680,$98, $e100,$05f5, $ca00,$3b9a
 104+ B50C 40 42 0F 00
 104+ B510 80 96 98 00
 104+ B514 00 E1 F5 05
 104+ B518 00 CA 9A 3B
 105+ B51C 00 00 00 00  clcn32z ds 4
 106+ B520
 107+ B520              ; As per display but shifts final digit by 1 and puts in "." for 1 decimal place
 108+ B520 CD 2F B5     DispDEIXtoIY1DP:        call    DispDEIXtoIY
 109+ B523 FD 7E 00                             ld      a,(IY+0)
 110+ B526 FD 77 01                             ld      (IY+1),a
 111+ B529 3E 2E                                ld      a,"."
 112+ B52B FD 77 00                             ld      (IY+0),a
 113+ B52E C9                                   ret
 114+ B52F
 115+ B52F DD 22 1C B5  DispDEIXtoIY:           ld (clcn32z),ix
 116+ B533 ED 53 1E B5                          ld (clcn32z+2),de
 117+ B537 DD 21 18 B5                          ld ix,clcn32t+36
 118+ B53B 06 09                                ld b,9
 119+ B53D 0E 00                                ld c,0
 120+ B53F 3E 30        .clcn321:               ld a,'0'
 121+ B541 B7                                   or a
 122+ B542 DD 5E 00     .clcn322:               ld e,(ix+0)
 123+ B545 DD 56 01                             ld d,(ix+1)
 124+ B548 2A 1C B5                             ld hl,(clcn32z)
 125+ B54B ED 52                                sbc hl,de
 126+ B54D 22 1C B5                             ld (clcn32z),hl
 127+ B550 DD 5E 02                             ld e,(ix+2)
 128+ B553 DD 56 03                             ld d,(ix+3)
 129+ B556 2A 1E B5                             ld hl,(clcn32z+2)
 130+ B559 ED 52                                sbc hl,de
 131+ B55B 22 1E B5                             ld (clcn32z+2),hl
 132+ B55E 38 04                                jr c,.clcn325
 133+ B560 0C                                   inc c
 134+ B561 3C                                   inc a
 135+ B562 18 DE                                jr .clcn322
 136+ B564 DD 5E 00     .clcn325:               ld e,(ix+0)
 137+ B567 DD 56 01                             ld d,(ix+1)
 138+ B56A 2A 1C B5                             ld hl,(clcn32z)
 139+ B56D 19                                   add hl,de
 140+ B56E 22 1C B5                             ld (clcn32z),hl
 141+ B571 DD 5E 02                             ld e,(ix+2)
 142+ B574 DD 56 03                             ld d,(ix+3)
 143+ B577 2A 1E B5                             ld hl,(clcn32z+2)
 144+ B57A ED 5A                                adc hl,de
 145+ B57C 22 1E B5                             ld (clcn32z+2),hl
 146+ B57F 11 FC FF                             ld de,-4
 147+ B582 DD 19                                add ix,de
 148+ B584 0C                                   inc c
 149+ B585 0D                                   dec c
 150+ B586 28 05                                jr z,.clcn323
 151+ B588 FD 77 00                             ld (iy+0),a
 152+ B58B FD 23                                inc iy
 153+ B58D 10 B0        .clcn323:               djnz .clcn321
 154+ B58F 3A 1C B5                             ld a,(clcn32z)
 155+ B592 C6 30                                add A,'0'
 156+ B594 FD 77 00                             ld (iy+0),a
 157+ B597 FD 36 01 00                          ld (iy+1),0
 158+ B59B C9                                   ret
 159+ B59C
# file closed: ./Maths/binary_to_decimal.asm
 668  B59C              ;;    include "./Maths/ADDHLDESignBC.asm"
 669  B59C              ;INCLUDE "badd_ll38.asm"
 670  B59C              ;;INCLUDE "XX12equXX15byXX16.asm"
 671  B59C                  INCLUDE "./Maths/Utilities/AequAdivQmul96-TIS2.asm"
# file opened: ./Maths/Utilities/AequAdivQmul96-TIS2.asm
   1+ B59C              AequAdivQmul96ABS:      JumpIfAGTENusng d, .TIS2AccGTEQ			; if A >= Q then return with a 1 (unity i.e. 96) with the correct sign
   1+ B59C BA          >                        cp     d
   1+ B59D D2 B8 B5    >                        jp		nc,.TIS2AccGTEQ
   2+ B5A0 06 FE                                ld			b,$FE						; division roll (replaced varT)
   3+ B5A2 CB 27        .TIS2RollTLoop:			sla			a
   4+ B5A4                                      JumpIfALTNusng d,.TIS2SkipSub           ; a < d so don;t subtract
   4+ B5A4 BA          >                        cp      d
   4+ B5A5 DA BB B5    >                        jp		c, .TIS2SkipSub
   5+ B5A8 9A                                   sbc			a,d							; do subtraction with carry
   6+ B5A9 37                                   scf
   7+ B5AA CB 10                                rl			b							; T rolled left to push bit out the end
   8+ B5AC 38 F4                                jr			c,.TIS2RollTLoop				; if we still have not hit the empty marker continue
   9+ B5AE 78           .TIS2SKIPCont:	        ld			a,b							; T
  10+ B5AF CB 3F                                srl			a							; result / 2
  11+ B5B1 CB 3F                                srl			a							; result / 4
  12+ B5B3 47                                   ld			b,a							; t = t /4
  13+ B5B4 CB 3F                                srl			a							; result / 8
  14+ B5B6 80                                   add			a,b							; result /8 + result /4
  15+ B5B7 C9                                   ret
  16+ B5B8 3E 60        .TIS2AccGTEQ:           ld			a,$60							; unity
  17+ B5BA C9                                   ret
  18+ B5BB B7           .TIS2SkipSub:           or			a
  19+ B5BC CB 10                                rl			b							; T rolled left to push bit out the end
  20+ B5BE 38 E2                                jr			c,.TIS2RollTLoop				; if we still have not hit the empty marker continue
  21+ B5C0 C3 AE B5                             jp			.TIS2SKIPCont
  22+ B5C3
  23+ B5C3
  24+ B5C3              ; USES 			A DE BC
  25+ B5C3              ; DOES NOT USE 	HL
  26+ B5C3              TIS2962C:		; two's compliment entry point, exits not 2's compliment
  27+ B5C3 CB 7F        	bit			7,a
  28+ B5C5 28 04        	jr			z,AequAdivQmul96
  29+ B5C7 ED 44        	neg										; revers 2s'c and just set neg bit
  30+ B5C9 CB FF        	set			7,a
  31+ B5CB              ; Note negative numbers are bit 7 set not 2's compliment
  32+ B5CB              AequAdivQmul96:								; TIS296:			; .tis2 A = A /Q *96 (or A = A * 3/8 * Q) Reduce Acc in NORM routine i.e. *96/Q clamps at +- 96
  33+ B5CB              TIS2:
  34+ B5CB 4F           	ld			c,a							; copy of Acc
  35+ B5CC 3A DF 9D     	ld			a,(varQ)
  36+ B5CF 57           	ld			d,a							; d = varQ
  37+ B5D0 79           	ld			a,c							; recover a
  38+ B5D1              AequAdivDmul96:
  39+ B5D1 4F           	ld			c,a							; copy of Acc as we need the sign, alternate entry point assuming D preloaded, wastes an "ld c,a" but simplifies code
  40+ B5D2 E6 7F        	and			SignMask8Bit				; ignore sign
  41+ B5D4              	JumpIfAGTENusng d, .TIS2AccGTEQ			; if A >= Q then return with a 1 (unity i.e. 96) with the correct sign
  41+ B5D4 BA          >                        cp     d
  41+ B5D5 D2 F5 B5    >                        jp		nc,.TIS2AccGTEQ
  42+ B5D8 06 FE        	ld			b,$FE						; division roll (replaced varT)
  43+ B5DA              .TIS2RollTLoop:									; .TIL2	; roll T
  44+ B5DA CB 27        	sla			a
  45+ B5DC              	JumpIfALTNusng d,.TIS2SkipSub            ; a < d so don;t subtract
  45+ B5DC BA          >                        cp      d
  45+ B5DD DA FB B5    >                        jp		c, .TIS2SkipSub
  46+ B5E0 9A           	sbc			a,d							; do subtraction with carry
  47+ B5E1 37           	scf
  48+ B5E2 CB 10        	rl			b							; T rolled left to push bit out the end
  49+ B5E4 38 F4        	jr			c,.TIS2RollTLoop				; if we still have not hit the empty marker continue
  50+ B5E6              .TIS2SKIPCont:
  51+ B5E6 78           	ld			a,b							; T
  52+ B5E7 CB 3F        	srl			a							; result / 2
  53+ B5E9 CB 3F        	srl			a							; result / 4
  54+ B5EB 47           	ld			b,a							; t = t /4
  55+ B5EC CB 3F        	srl			a							; result / 8
  56+ B5EE 80           	add			a,b							; result /8 + result /4
  57+ B5EF 47           	ld			b,a							; b = 3/8*Acc (max = 96)
  58+ B5F0 79           	ld			a,c							; copy of Acc to look at sign bit
  59+ B5F1 E6 80        	and			$80							; recover sign only
  60+ B5F3 B0           	or			b							; now put b back in so we have a leading sign bit (note not 2's compliment)
  61+ B5F4 C9           	ret
  62+ B5F5              .TIS2AccGTEQ:
  63+ B5F5              ;TI4:										;\ clean to +/- unity
  64+ B5F5 79           	ld			a,c
  65+ B5F6 E6 80        	and			$80							; copy of Acc
  66+ B5F8 F6 60        	or			$60							; unity
  67+ B5FA C9           	ret
  68+ B5FB              .TIS2SkipSub:
  69+ B5FB B7           	or			a
  70+ B5FC CB 10        	rl			b							; T rolled left to push bit out the end
  71+ B5FE 38 DA        	jr			c,.TIS2RollTLoop				; if we still have not hit the empty marker continue
  72+ B600 C3 E6 B5     	jp			.TIS2SKIPCont
  73+ B603
# file closed: ./Maths/Utilities/AequAdivQmul96-TIS2.asm
 672  B603                  INCLUDE "./Maths/Utilities/AequAmulQdiv256-FMLTU.asm"
# file opened: ./Maths/Utilities/AequAmulQdiv256-FMLTU.asm
   1+ B603              ; "ASM_FMUTKL .FMLTU	\ -> &2847  \ A=A*Q/256unsg  Fast multiply"
   2+ B603              fmltu:
   3+ B603 57           AequAmulQdiv256:        ld	d,a
   4+ B604 3A DF 9D                             ld	a,(varQ)
   5+ B607 5F                                   ld	e,a
   6+ B608 ED 30                                mul
   7+ B60A 7A                                   ld	a,d				; we get only the high byte which is like doing a /256 if we think of a as low
   8+ B60B C9                                   ret
   9+ B60C
  10+ B60C 5F           AequAmulDdiv256:        ld  e,a
  11+ B60D ED 30                                mul
  12+ B60F 7A                                   ld  a,d
  13+ B610 C9                                   ret
  14+ B611
# file closed: ./Maths/Utilities/AequAmulQdiv256-FMLTU.asm
 673  B611                  INCLUDE "./Maths/Utilities/PRequSpeedDivZZdiv8-DV42-DV42IYH.asm"
# file opened: ./Maths/Utilities/PRequSpeedDivZZdiv8-DV42-DV42IYH.asm
   1+ B611              ; "DV42,DV42IYH DE = P.R, c = R"
   2+ B611              DV42IYH:									; as per DV42 but using iyl for Y reg
   3+ B611 21 BF A0     		ld		hl,varDustZ
   4+ B614 FD 7D        		ld		a,iyl
   5+ B616 ED 31        		add		hl,a
   6+ B618 7E           		ld		a,(hl)
   7+ B619 C3 25 B6     		jp		DV41
   8+ B61C              DV42:										; travel step of dust particle front/rear
   9+ B61C 21 BF A0     		ld		hl,varDustZ
  10+ B61F 3A C7 9C     		ld		a,(regY)
  11+ B622 ED 31        		add		hl,a
  12+ B624 7E           		ld		a,(hl)						; a = SZ[y]
  13+ B625              DV41:										; P.R = speed/ (ZZ/8) dust left/right
  14+ B625 5F           		ld		e,a							; using E as Q var replacement
  15+ B626 3A DB 9D     		ld		a,(DELTA)					; DELTA \ speed, how far has dust moved based on its z-coord.
  16+ B629              DVID4:										; P-R=A/Qunsg  \P.R = A/Q unsigned called by Hall
  17+ B629 06 08        		ld		b,8							; counter
  18+ B62B CB 27        		sla		a							;
  19+ B62D 57           		ld		d,a							; use d for - p = delta * 2
  20+ B62E AF           		xor		a
  21+ B62F              DVL4:										; counter x loop (b reg)
  22+ B62F CB 17        		rl		a							; a = a * 2
  23+ B631 38 03        		jr		c,DV8						; jump on carry
  24+ B633 BB           		cp		e							; var Q
  25+ B634 38 02        		jr		c,DV5						; skip subtraction
  26+ B636              DV8:
  27+ B636 9B           		sbc		a,e							; a = a - q (with carry)
  28+ B637 37           		scf									;  carry gets set
  29+ B638              DV5:										; skipped subtraction
  30+ B638 CB 12        		rl		d							; d (P hi)
  31+ B63A 10 F3        		djnz	DVL4						; dec b and loop loop X, hi left in P.
  32+ B63C              .CalcRemainder:								; BFRDIV R=A*256/Q
  33+ B63C              ; Note we are not going to call LL28+4 but inline code here:
  34+ B63C 06 FE        		ld		b,$FE						; remainder R for AofQ *256/Q
  35+ B63E 4F           		ld		c,a							; use c as R var
  36+ B63F              .RollRemainder:
  37+ B63F CB 27        		sla		a
  38+ B641 38 11        		jr		c,.Reduce					; if a >> generates carry reduce
  39+ B643 B8           		cp		b							; a < q?
  40+ B644 30 01        		jr		nc,.DontSBC
  41+ B646              .DoSBC:										; a is < q
  42+ B646 98           		sbc		a,b							; 	a -= q
  43+ B647              .DontSBC:
  44+ B647 CB 11        		rl		c							; r << 1
  45+ B649 38 F4        		jr		c, .RollRemainder			; if rol generated a carry, continue
  46+ B64B 79           		ld		a,c
  47+ B64C 32 E0 9D     		ld		(varR),a					; for backwards compat
  48+ B64F 7A           		ld		a,d
  49+ B650 32 DD 9C     		ld		(varP),a
  50+ B653 C9           		ret									; R (c) left with remainder
  51+ B654              .Reduce:									; a geneated a carry
  52+ B654 98           		sbc		a,b							; a = a - (q +1)
  53+ B655 37           		scf									; set carry flag for rl
  54+ B656 CB 11        		rl		c							; r << 1 briging in carry
  55+ B658 38 E5        		jr		c,	.RollRemainder			; if a carry fell off bit 7 then repeat
  56+ B65A 79           		ld		a,c
  57+ B65B 32 E0 9D     		ld		(varR),a					; for backwards compat
  58+ B65E 7A           		ld		a,d
  59+ B65F 32 DD 9C     		ld		(varP),a
  60+ B662 C9           		ret
  61+ B663              .AnswerTooBig:
  62+ B663 0E FF        		ld		c,$FF						; arse its too big
  63+ B665 79           		ld		a,c
  64+ B666 32 E0 9D     		ld		(varR),a					; for backwards compat
  65+ B669 7A           		ld		a,d
  66+ B66A 32 DD 9C     		ld		(varP),a
  67+ B66D C9           		ret
  68+ B66E
# file closed: ./Maths/Utilities/PRequSpeedDivZZdiv8-DV42-DV42IYH.asm
 674  B66E                  INCLUDE "./Maths/Utilities/AequDmulEdiv256usgn-DEFMUTL.asm"
# file opened: ./Maths/Utilities/AequDmulEdiv256usgn-DEFMUTL.asm
   1+ B66E
   2+ B66E              asm_defmutl:
   3+ B66E              AequDmulEdiv256usgn:
   4+ B66E              ; "ASM_FMUTKL .FMLTU	\ -> &2847  \ A=D*E/256unsg  Fast multiply"
   5+ B66E ED 30        	mul
   6+ B670 7A           	ld	a,d				; we get only the high byte which is like doing a /256 if we think of a as low
   7+ B671 C9           	ret
   8+ B672
   9+ B672
# file closed: ./Maths/Utilities/AequDmulEdiv256usgn-DEFMUTL.asm
 675  B672              ;INCLUDE "AP2equAPmulQunsgEorP-MLTU2.asm"
 676  B672              ;INCLUDE "APequPmulQUnsg-MULTU.asm"
 677  B672              ;INCLUDE "APequPmulX-MU11.asm"
 678  B672                  INCLUDE "./Maths/Utilities/APequQmulA-MULT1.asm"
# file opened: ./Maths/Utilities/APequQmulA-MULT1.asm
   1+ B672              APequQmulA:
   2+ B672              asm_mult1:
   3+ B672              ; "ASM_MULT1 (DE) A(hi).P(lo) = Q * A first part of MAD, multiply and add. Visited Quite often. A=hi P = lo also returns result in DE"
   4+ B672 FE 00        	cp	0
   5+ B674 28 1F        	jr	z,.mul0			; quick exit if its Q * 0
   6+ B676 5F           	ld	e,a
   7+ B677 3A DF 9D     	ld	a,(varQ)
   8+ B67A 57           	ld	d,a
   9+ B67B FE 00        	cp	0				; compare a
  10+ B67D 28 16        	jr	z,.mul0			; quick exit if its 0 * a
  11+ B67F AB           	xor	e				; -- = + +- = - -+ = - ++ = +
  12+ B680 E6 80        	and $80				; get the resultant sign and save into b
  13+ B682 47           	ld	b,a
  14+ B683 7A           	ld	a,d
  15+ B684 E6 7F        	and	SignMask8Bit	; now strip off sign bits
  16+ B686 57           	ld	d,a
  17+ B687 7B           	ld	a,e
  18+ B688 E6 7F        	and SignMask8Bit
  19+ B68A 5F           	ld	e,a
  20+ B68B ED 30        	mul					; zxn de = d * e
  21+ B68D 7B           	ld	a,e
  22+ B68E 32 DD 9C     	ld	(varP),a		; p = lo
  23+ B691 7A           	ld	a,d				; a = hi
  24+ B692 B0           	or	b				; de goes to a and varP also re-do sign bit
  25+ B693 57           	ld	d,a				; we will work with de having result as we may bin vars later
  26+ B694 C9           	ret
  27+ B695              .mul0:
  28+ B695 AF           	xor	a
  29+ B696 32 DD 9C     	ld	(varP),a
  30+ B699 57           	ld	d,a
  31+ B69A 5F           	ld  e,a
  32+ B69B C9           	ret
  33+ B69C
# file closed: ./Maths/Utilities/APequQmulA-MULT1.asm
 679  B69C                  INCLUDE "./Maths/Utilities/badd_ll38.asm"
# file opened: ./Maths/Utilities/badd_ll38.asm
   1+ B69C              baddll38:				;.LL38	\ -> &4812 \ BADD(S)A=R+Q(SA) \ byte add (subtract)   (Sign S)A = R + Q*(Sign from A^S)
   2+ B69C              SAEquSRPlusAQ:
   3+ B69C              ; Calculate the following between sign-magnitude numbers:
   4+ B69C              ;   (S A) = (S R) + (A Q)
   5+ B69C              ; where the sign bytes only contain the sign bits, not magnitudes.
   6+ B69C              ; note goes wrong at <-127 >128 so need 16 bit version
   7+ B69C              ; so need to fix the issue with carry flag not returning a fault correctly
   8+ B69C              LL38:
   9+ B69C              ;	ld		d,a
  10+ B69C              ;	ld		a,(varQ)
  11+ B69C              ;	ld		e,a
  12+ B69C              ;	ld		a,(varS)
  13+ B69C              ;	ld		h,a
  14+ B69C              ;	ld		a,(varR)
  15+ B69C              ;	ld		l,a
  16+ B69C              ;	call	ADDHLDESignedv3
  17+ B69C              ;	ld		a,h
  18+ B69C              ;	ld		(varS),a
  19+ B69C              ;	ld		a,l
  20+ B69C              ;	ret
  21+ B69C              ; calculation table
  22+ B69C              ;   R     Q    Op            Sign calc
  23+ B69C              ;	10    5    Add           +    sign same add R sign
  24+ B69C              ;   -10   5    ABS Sub       -    sign diff ABS R > S sub R sign
  25+ B69C              ;   10   -5    ABS sub       +    sign diff ABS R > S sub R sign
  26+ B69C              ;	-10  -5    ABS Add       -    sign same add R sign
  27+ B69C              ;   5    10    Add           +    sign same add R sign
  28+ B69C              ;   -5   10    Swap ABS SUB  +    sign diff ABS Q > R swap SUB Q sign
  29+ B69C              ;   5    -10   swap ABS Sub  -    sign diff ABS Q > R swap SUB R sign
  30+ B69C              ;   -5   -10   ABS  add      -    sign same add R sign
  31+ B69C
  32+ B69C              ;   -10   5    ABS Sub       -    sign diff ABS R > S sub R sign
  33+ B69C              ;   10   -5    ABS sub       +    sign diff ABS R > S sub R sign
  34+ B69C              ;   -5   10    Swap ABS SUB  +    sign diff ABS Q > R swap SUB Q sign
  35+ B69C              ;   5    -10   swap ABS Sub  -    sign diff ABS Q > R swap SUB R sign
  36+ B69C
  37+ B69C
  38+ B69C              ; Calculate sign for Q from A and varS
  39+ B69C 21 E1 9D     	ld		hl,varS							;
  40+ B69F AE           	xor		(hl)							;  EOR &83		\ S	\ sign of operator is A xor S
  41+ B6A0 FA AB B6     	jp		m,.LL39Subtraction  			; if signs are different then we have subtraction
  42+ B6A3 3A DF 9D     	ld		a,(varQ)						; Q	\ else addition, S already correct
  43+ B6A6 21 E0 9D     	ld		hl,varR
  44+ B6A9 86           	add		a,(hl)							; a = Q + R
  45+ B6AA C9           	ret										; Done carry set if overflow
  46+ B6AB              .LL39Subtraction:							; 1 byte subtraction (S)A = R-Q
  47+ B6AB 3A E0 9D     	ld		a,(varR)						; a = R
  48+ B6AE 21 DF 9D     	ld		hl,varQ                         ; Q
  49+ B6B1              ;--	JumpIfALTMemHLusng LL39SwapSubtraction	; if a < (hl) then do LL39SwapSubtraction
  50+ B6B1              	ClearCarryFlag                          ; we need to not use carry (6502 is different that it uses the compliement)
  50+ B6B1 B7          >                        or a
  51+ B6B2 9E           	sbc		a,(hl)							; A = R - Q which as R >= Q will always be a positive result
  52+ B6B3 38 01            jr      c,.LL39SignCorrection
  53+ B6B5              ;--    jr      a,.LL39ResultZero
  54+ B6B5              ;--   JumpIfNegative LL39SignCorrection		; if there was underflow we have to correct sign
  55+ B6B5              ;--	or		a								; Clear carry flag to say result is correct
  56+ B6B5 C9           	ret
  57+ B6B6              .LL39SignCorrection:
  58+ B6B6 FE 00            cp      0                               ; if its 0 then neg will affect flag so we just zero result to save compute
  59+ B6B8 28 0E            jr      z,.LL39ResultZero
  60+ B6BA ED 44            neg                                     ; flip A 2'c value to positive
  61+ B6BC 08           	ex		af,af'							; save A temporarily
  62+ B6BD 3A E1 9D     	ld		a,(varS)						; Flip Sign bit in varS
  63+ B6C0 EE 80        	xor		$80							    ;
  64+ B6C2 32 E1 9D     	ld		(varS),a                        ; flip sign bit of a
  65+ B6C5 08           	ex		af,af'                          ; get back a which is the result
  66+ B6C6                  ClearCarryFlag                          ; clear carry as NEG instrunction sets it for non zero
  66+ B6C6 B7          >                        or a
  67+ B6C7 C9           	ret
  68+ B6C8              .LL39ResultZero:
  69+ B6C8 32 E1 9D         ld      (varS),a                        ; a is zero at this stage so set sign as well
  70+ B6CB                  ClearCarryFlag                          ; clear carry
  70+ B6CB B7          >                        or a
  71+ B6CC C9               ret
  72+ B6CD              ;--LL39SwapSubtraction:
  73+ B6CD              ;--	push	bc
  74+ B6CD              ;--	ld		b,a
  75+ B6CD              ;--	ld		a,(hl)
  76+ B6CD              ;--	sub		b
  77+ B6CD              ;--	pop		bc
  78+ B6CD              ;--	ex		af,af'							; do we flip here or negate. i think its flip as its overflowed unsigned
  79+ B6CD              ;--	ld		a,(varS)
  80+ B6CD              ;--	xor		$80
  81+ B6CD              ;--	ld		(varS),a
  82+ B6CD              ;--	ex		af,af'
  83+ B6CD              ;--	ret
  84+ B6CD
  85+ B6CD              ;;;;	baddll38:				;.LL38	\ -> &4812 \ BADD(S)A=R+Q(SA) \ byte add (subtract)   (Sign S)A = R + Q*(Sign from A^S)
  86+ B6CD              ;;;;; Calculate the following between sign-magnitude numbers:
  87+ B6CD              ;;;;;   (S A) = (S R) + (A Q)
  88+ B6CD              ;;;;; where the sign bytes only contain the sign bits, not magnitudes.
  89+ B6CD              ;;;;; note goes wrong at <-127 >128 so need 16 bit version
  90+ B6CD              ;;;;LL38:
  91+ B6CD              ;;;;; Calculate sign for Q from A and varS
  92+ B6CD              ;;;;	ld		hl,varS							;
  93+ B6CD              ;;;;	xor		(hl)							;  EOR &83		\ S	\ sign of operator is A xor S
  94+ B6CD              ;;;;	jp		m,.LL39Subtraction  			; if signs are different then we have subtraction
  95+ B6CD              ;;;;	ld		a,(varQ)						; Q	\ else addition, S already correct
  96+ B6CD              ;;;;	ld		hl,varR
  97+ B6CD              ;;;;	add		a,(hl)							; a = Q + R
  98+ B6CD              ;;;;	ret										; Done
  99+ B6CD              ;;;;.LL39Subtraction:							; 1 byte subtraction (S)A = R-Q
 100+ B6CD              ;;;;	ld		hl,varQ                         ;
 101+ B6CD              ;;;;	ld		a,(hl)
 102+ B6CD              ;;;;	JumpIfAGTENusng 128,LL39Sub16bit		; does this need to be 16 bit
 103+ B6CD              ;;;;	ld		a,(varR)						;
 104+ B6CD              ;;;;	ClearCarryFlag                          ; we need to not use carry (6502 is different that it uses the compliement)
 105+ B6CD              ;;;;	sbc		a,(hl)							; A = R - Q
 106+ B6CD              ;;;;	jr		c,.SignCorrection				; if there was underflow we have to correct sign
 107+ B6CD              ;;;;	or		a								; Clear carry flag to say result is correct
 108+ B6CD              ;;;;	ret
 109+ B6CD              ;;;;.SignCorrection:
 110+ B6CD              ;;;;    neg                                     ; flip A 2'c value to positive
 111+ B6CD              ;;;;	ex		af,af'							; save A temporarily
 112+ B6CD              ;;;;	ld		a,(varS)						; Flip Sign bit in varS
 113+ B6CD              ;;;;	xor		$80							    ;
 114+ B6CD              ;;;;	ld		(varS),a                        ; flip sign bit of a
 115+ B6CD              ;;;;	ex		af,af'                          ; get back a which is the result
 116+ B6CD              ;;;;	ret
 117+ B6CD              ;;;;LL39Sub16Bit:
 118+ B6CD              ;;;;	ld		e,a
 119+ B6CD              ;;;;	ld		d,0
 120+ B6CD              ;;;;	ld		a,(varR)
 121+ B6CD              ;;;;	ld		l,a
 122+ B6CD              ;;;;	ld		h,0
 123+ B6CD              ;;;;	ClearCarryFlag
 124+ B6CD              ;;;;	sbc		hl,de
 125+ B6CD              ;;;;	jr		c,.SignCorrection16bit
 126+ B6CD              ;;;;	bit		7,h
 127+ B6CD              ;;;;	jr		z,.GoodToReturn
 128+ B6CD              ;;;;.Needtonegate:
 129+ B6CD              ;;;;	macronegate16hl
 130+ B6CD              ;;;;.GoodToReturn
 131+ B6CD              ;;;;	ld		a,l
 132+ B6CD              ;;;;	or		a
 133+ B6CD              ;;;;	ret
 134+ B6CD              ;;;;.SignCorrection16bit:
 135+ B6CD              ;;;;	macronegate16hl
 136+ B6CD              ;;;;	ld		a,(varS)						; Flip Sign bit in varS
 137+ B6CD              ;;;;	xor		$80							    ;
 138+ B6CD              ;;;;	ld		(varS),a                        ; flip sign bit of a
 139+ B6CD              ;;;;	ld		a,l
 140+ B6CD              ;;;;	ret
 141+ B6CD
 142+ B6CD
# file closed: ./Maths/Utilities/badd_ll38.asm
 680  B6CD                  INCLUDE "./Maths/Utilities/moveship4-MVS4.asm"
# file opened: ./Maths/Utilities/moveship4-MVS4.asm
   1+ B6CD              ; Note comparing hl vs iY, you need at least 3 incs or decs for hl to be slower
   2+ B6CD              ; it may be faster though if we can use hl to avoid memory actions if needed
   3+ B6CD              ; need to optimise mad as push hl pop hl and use de doesn't really improve speed
   4+ B6CD
   5+ B6CD
   6+ B6CD              moveship4Yreg:
   7+ B6CD 3A C7 9C     		ld		a,(regY)
   8+ B6D0 47           		ld		b,a
   9+ B6D1              moveship4breg:
  10+ B6D1              		; b = Y index, 9 = nosev, 15 = roofv 21 = sidev
  11+ B6D1              MVS4PitchAlphaRollBeta:
  12+ B6D1              MVS4:										;.MVS4	\ -> &52A1 \ Moveship4, Y is matrix row, pitch&roll update to coordinates
  13+ B6D1 3A F5 9C     		ld		a,(ALPHA)					;  ALPHA
  14+ B6D4 32 DF 9D     		ld		(varQ),a					; player ship's roll Q = Alpha
  15+ B6D7 21 0E C0     		ld		hl,UBnKxsgn
  16+ B6DA 78           		ld		a,b							; from
  17+ B6DB ED 31        		add		hl,a
  18+ B6DD 7E           		ld		a,(hl)						; INWK+2,Y
  19+ B6DE 32 E0 9D     		ld		(varR),a					; R  \ lo
  20+ B6E1 23           		inc		hl
  21+ B6E2 7E           		ld		a,(hl)						; INWK+3,Y
  22+ B6E3 32 E1 9D     		ld		(varS),a					; S  \ hi		SR = nosev_y (or axis y)
  23+ B6E6 2B           		dec		hl
  24+ B6E7 2B           		dec		hl
  25+ B6E8 2B           		dec		hl							;
  26+ B6E9 7E           		ld		a,(hl)						; INWK+0,Y
  27+ B6EA 32 DD 9C     		ld		(varP),a					; P  \ over-written	 P = nosevx lo
  28+ B6ED 23           		inc		hl
  29+ B6EE 7E           		ld		a,(hl)						; INWK+1,Y
  30+ B6EF EE 80        		xor		$80							; flip sign  AP = nosevx * - 1
  31+ B6F1 CD B9 AE     		call	madXAequQmulAaddRS			; MAD	\ DE = X.A = alpha*INWK+1,Y + INWK+2to3,Y
  32+ B6F4 23                   inc     hl
  33+ B6F5 23                   inc     hl
  34+ B6F6 77                   ld      (hl),a                      ; INWK+3,Y \ hi
  35+ B6F7 2B                   dec     hl
  36+ B6F8 3A C6 9C             ld      a,(regX)
  37+ B6FB 77                   ld      (hl),a                      ; INWK+2,Y \ Y=Y-aX   \ their comment
  38+ B6FC 32 DD 9C             ld      (varP),a                    ;  P
  39+ B6FF 2B                   dec     hl
  40+ B700 2B                   dec     hl
  41+ B701 7E                   ld      a,(hl)                      ; INWK+0,Y
  42+ B702 32 E0 9D             ld      (varR),a                    ;  R	\ lo
  43+ B705 23                   inc     hl
  44+ B706 7E                   ld      a,(hl)                      ;  INWK+1,Y
  45+ B707 32 E1 9D             ld      (varS),a                    ; S	\ hi
  46+ B70A 23                   inc     hl
  47+ B70B 23                   inc     hl
  48+ B70C 7E                   ld      a,(hl)                      ; INWK+3,Y
  49+ B70D CD B9 AE             call    madXAequQmulAaddRS          ; MAD	\ X.A = alpha*INWK+3,Y + INWK+0to1,Y
  50+ B710 2B                   dec     hl
  51+ B711 2B                   dec     hl
  52+ B712 77                   ld      (hl),a                      ; INWK+1,Y  \ hi
  53+ B713 3A C6 9C             ld      a,(regX)
  54+ B716 2B                   dec     hl
  55+ B717 77                   ld      (hl),a                      ; INWK+0,Y  \ X=X+aY   \ their comment
  56+ B718 32 DD 9C             ld      (varP),a                    ; P
  57+ B71B 3A E8 9C             ld      a,(BETA)                    ; BETA
  58+ B71E 32 DF 9D             ld      (varQ),a                    ; Q	\ player ship's pitch
  59+ B721 23                   inc     hl
  60+ B722 23                   inc     hl
  61+ B723 7E                   ld      a,(hl)                      ; INWK+2,Y
  62+ B724 32 E0 9D             ld      (varR),a                    ; R	\ lo
  63+ B727 23                   inc     hl
  64+ B728 7E                   ld      a,(hl)                      ; INWK+3,Y
  65+ B729 32 E1 9D             ld      (varS),a                    ; S	\ hi
  66+ B72C 23                   inc     hl
  67+ B72D 7E                   ld      a,(hl)                      ; INWK+4,Y
  68+ B72E 32 DD 9C             ld      (varP),a                    ; P	\ lo
  69+ B731 23                   inc     hl
  70+ B732 7E                   ld      a,(hl)                      ; INWK+5,Y
  71+ B733 EE 80                xor     $80                         ; flip sign hi
  72+ B735 CD B9 AE             call    madXAequQmulAaddRS          ; MAD	\ X.A =-beta*INWK+5,Y + INWK+2to3,Y
  73+ B738 2B                   dec     hl
  74+ B739 2B                   dec     hl
  75+ B73A 77                   ld      (hl),a                      ; INWK+3,Y \ hi
  76+ B73B 3A C6 9C             ld      a,(regX)
  77+ B73E 2B                   dec     hl
  78+ B73F 77                   ld      (hl),a                      ; INWK+2,Y \ Y=Y-bZ  \ their comment
  79+ B740 32 DD 9C             ld      (varP),a                    ; P
  80+ B743 23                   inc     hl
  81+ B744 23                   inc     hl
  82+ B745 7E                   ld      a,(hl)                      ; INWK+4,Y
  83+ B746 32 E0 9D             ld      (varR),a                    ; R	\ lo
  84+ B749 23                   inc     hl
  85+ B74A 7E                   ld      a,(hl)                      ; INWK+5,Y
  86+ B74B 32 E1 9D             ld      (varS),a                    ; S	\ hi
  87+ B74E 2B                   dec     hl
  88+ B74F 2B                   dec     hl
  89+ B750 7E                   ld      a,(hl)                      ; INWK+3,Y
  90+ B751 CD B9 AE             call    madXAequQmulAaddRS          ; MAD	\ X.A = beta*INWK+3,Y + INWK+4,5,Y
  91+ B754 23                   inc     hl
  92+ B755 23                   inc     hl
  93+ B756 77                   ld      (hl),a                      ; INWK+5,Y \ hi
  94+ B757 3A C6 9C             ld      a,(regX)
  95+ B75A 2B                   dec     hl
  96+ B75B 77                   ld      (hl),a                      ; INWK+4,Y \ Z=Z+bY   \ their comment
  97+ B75C C9                   ret
  98+ B75D
  99+ B75D
# file closed: ./Maths/Utilities/moveship4-MVS4.asm
 681  B75D              ;INCLUDE "MoveShip5-MVS5.asm"
 682  B75D              ;INCLUDE "PAequAmulQusgn-MLU2.asm"
 683  B75D              ;INCLUDE "PAequDustYIdxYmulQ-MLU1.asm"
 684  B75D              ;INCLUDE "PlanetP12addInwkX-MVT6.asm"
 685  B75D                  INCLUDE "./Maths/Utilities/RequAmul256divQ-BFRDIV.asm"
# file opened: ./Maths/Utilities/RequAmul256divQ-BFRDIV.asm
   1+ B75D              ;;;LL28:
   2+ B75D              ;;;    ld      c,a                         ;
   3+ B75D              ;;;    ld      a,(varQ)                    ;
   4+ B75D              ;;;    ld      b,a                         ;
   5+ B75D              ;;;    ld      a,c                         ; Get varQ into b and retain c
   6+ B75D              ;;;RequAmul256divB:                        ;
   7+ B75D              ;;;LL28Breg:
   8+ B75D              ;;;; "BFRDIV R = (A * 256 / Q)  byte from remainder of division, not signed a = a, b = q, c = r"
   9+ B75D              ;;;	cp		b							; Check A >= Q
  10+ B75D              ;;;	jr		nc, .AnswerTooBig			; A >= Q? yes too big
  11+ B75D              ;;;.CalcRemainder:
  12+ B75D              ;;;	ld		c, 	$FE						; set R to $FE
  13+ B75D              ;;;.RollRemainder:
  14+ B75D              ;;;	sla		a
  15+ B75D              ;;;	jr		c,.Reduce					; if a >> generates carry reduce
  16+ B75D              ;;;	cp		b							; a < q?
  17+ B75D              ;;;	jr		nc,.DontSBC
  18+ B75D              ;;;.DoSBC:									; a is < q
  19+ B75D              ;;;	sbc		a,b							; 	a -= q
  20+ B75D              ;;;.DontSBC:
  21+ B75D              ;;;	rl		c							; r << 1
  22+ B75D              ;;;	jr		c, .RollRemainder			; if rol generated a carry, continue
  23+ B75D              ;;;    ld      a,c
  24+ B75D              ;;;    ld      (varR),a
  25+ B75D              ;;;	ret									; R (c) left with remainder
  26+ B75D              ;;;.Reduce:								; a geneated a carry
  27+ B75D              ;;;	sbc		a,b							; a = a - (q +1)
  28+ B75D              ;;;	scf									; set carry flag for rl
  29+ B75D              ;;;	rl		c							; r << 1 briging in carry
  30+ B75D              ;;;	jr		c,	.RollRemainder			; if a carry fell off bit 7 then repeat
  31+ B75D              ;;;    ld      a,c
  32+ B75D              ;;;    ld      (varR),a
  33+ B75D              ;;;	ret
  34+ B75D              ;;;.AnswerTooBig:
  35+ B75D              ;;;	ld	    c,$FF							; arse its too big
  36+ B75D              ;;;    ld      a,c
  37+ B75D              ;;;    ld      (varR),a
  38+ B75D              ;;;	ret
  39+ B75D
  40+ B75D              BCequAmul256DivC:
  41+ B75D 59             ld    e,c
  42+ B75E 67             ld    h,a
  43+ B75F 2E 00          ld    l,0
  44+ B761              AdivEDivide:                             ; this routine performs the operation BC=HL/E
  45+ B761 7B             ld a,e                                 ; checking the divisor; returning if it is zero
  46+ B762 B7             or a                                   ; from this time on the carry is cleared
  47+ B763 C8             ret z
  48+ B764 01 FF FF       ld bc,-1                               ; BC is used to accumulate the result
  49+ B767 16 00          ld d,0                                 ; clearing D, so DE holds the divisor
  50+ B769              AdivEDivLoop:                            ; subtracting DE from HL until the first overflow
  51+ B769 ED 52          sbc hl,de                              ; since the carry is zero, SBC works as if it was a SUB
  52+ B76B 03             inc bc                                 ;  note that this instruction does not alter the flags
  53+ B76C 30 FB          jr nc,AdivEDivLoop                     ; no carry means that there was no overflow
  54+ B76E C9             ret
  55+ B76F
  56+ B76F              HL_Div_C:
  57+ B76F              ; Integer divides HL by C
  58+ B76F              ; Result in HL, remainder in A
  59+ B76F              ; Clobbers F, B
  60+ B76F 06 10                ld b,16
  61+ B771 AF                   xor a
  62+ B772              HL_Div_C_Loop:
  63+ B772 29                   add hl,hl
  64+ B773 17                   rla
  65+ B774 B9                   cp c
  66+ B775 38 02                jr c,HL_DivC_Skip
  67+ B777 91                   sub c
  68+ B778 2C                   inc l
  69+ B779              HL_DivC_Skip:
  70+ B779 10 F7                djnz HL_Div_C_Loop
  71+ B77B 7D                   ld   a,l
  72+ B77C 32 E0 9D             ld  (varR),a
  73+ B77F C9                   ret
  74+ B780
  75+ B780
  76+ B780
  77+ B780              ; Entry point if varQ is populated with demoninator
  78+ B780              RequAmul256divQ:
  79+ B780              BFRDIV:
  80+ B780 F5           		push	af
  81+ B781 3A DF 9D     		ld		a,(varQ)
  82+ B784 4F           		ld		c,a
  83+ B785 F1           		pop		af
  84+ B786 FE 00        		cp		0
  85+ B788 CA 9F B7     		jp		z, HLDIVC_0_BY	; fast exit if numerator is 0
  86+ B78B              RequAmul256divC:
  87+ B78B 2E 00        		ld		l,0
  88+ B78D 67           		ld		h,a
  89+ B78E              HL_Div_Cold:						; fast entry point if C and HL are already set
  90+ B78E 06 10        		ld b,16
  91+ B790 AF           		xor a
  92+ B791              LOOPPOINT:
  93+ B791 29           		add hl,hl
  94+ B792 17           		rla
  95+ B793 B9           		cp c
  96+ B794 38 02        		jr c,SKIPINCSUB
  97+ B796 2C           		inc l
  98+ B797 91           		sub c
  99+ B798              SKIPINCSUB:
 100+ B798 10 F7        		djnz LOOPPOINT
 101+ B79A 7D           		ld		a,l
 102+ B79B 32 E0 9D     		ld 		(varR),a
 103+ B79E C9           		ret
 104+ B79F              HLDIVC_0_BY:
 105+ B79F 32 E0 9D     		ld		(varR),a
 106+ B7A2 C9           		ret
 107+ B7A3              ;	push	af
 108+ B7A3              ;	ld		a,b
 109+ B7A3              ;	ld		(varQ),a
 110+ B7A3              ;	pop		af
 111+ B7A3              ;RequAmul256divQ:
 112+ B7A3              ;BFRDIV:									;BFRDIV R=A*256/Q   byte from remainder of division
 113+ B7A3              ;	ld		hl,varQ
 114+ B7A3              ;	JumpIfAGTENusng	(hl),LL2			;  is A >=  Q ?, if yes, answer too big for 1 byte, R=#&FF
 115+ B7A3              ;	ld		b,$FE						; b = X
 116+ B7A3              ;	ld		c,a							; c = R	div roll counter
 117+ B7A3              ;LL31:									; roll R
 118+ B7A3              ;	sla		a
 119+ B7A3              ;	jr		c,LL29						; hop to Reduce
 120+ B7A3              ;	JumpIfALTNusng (hl)					; Q skip sbc if a < Q
 121+ B7A3              ;	sbc		a,(hl)						; a = a - Q
 122+ B7A3              ;	rl		c							; rotate R left
 123+ B7A3              ;	jr		c,LL31						; loop if R poped out a carry bit
 124+ B7A3              ;	jr		LL2Good
 125+ B7A3              ;LL29:									; Reduce
 126+ B7A3              ;	sbc		a,(hl)
 127+ B7A3              ;	scf
 128+ B7A3              ;	rl		c							; roll a carry flag into R
 129+ B7A3              ;	jr		c,LL31						;  loop R
 130+ B7A3              ;	jr		LL2Good
 131+ B7A3              ;LL2:
 132+ B7A3              ;	ld		c,$FF
 133+ B7A3              ;LL2Good:
 134+ B7A3              ;	ld		a,c
 135+ B7A3              ;	ld		(varR),a
 136+ B7A3              ;	ret
 137+ B7A3
# file closed: ./Maths/Utilities/RequAmul256divQ-BFRDIV.asm
 686  B7A3                  INCLUDE "./Maths/Utilities/RequAdivQ-LL61.asm"
# file opened: ./Maths/Utilities/RequAdivQ-LL61.asm
   1+ B7A3              RequAdivQ:
   2+ B7A3              	; R = A/Q, U = remainder, code looked a little odd as if R is reminader and U = result
   3+ B7A3              LL61:										; Handling division R=A/Q for case further down
   4+ B7A3 4F           	ld		c,a								; c = A
   5+ B7A4 3A DF 9D     	ld		a,(varQ)						; test for divide by 0
   6+ B7A7 FE 00        	cp		0
   7+ B7A9 28 16        	jr		z,LL84							; divide by zero error
   8+ B7AB 57           	ld		d,a								; now we can do C/D
   9+ B7AC 06 08            ld b,8
  10+ B7AE AF               xor a
  11+ B7AF              LL63:										; roll divide loop
  12+ B7AF CB 21            sla c
  13+ B7B1 17               rla
  14+ B7B2 BA               cp d
  15+ B7B3 38 02            jr c,LL64
  16+ B7B5 0C               inc c
  17+ B7B6 92               sub d
  18+ B7B7              LL64:
  19+ B7B7 10 F6            djnz LL63
  20+ B7B9 32 DE 9D     	ld	(varU),a							; store remainder in U
  21+ B7BC 79           	ld	a,c
  22+ B7BD 32 E0 9D     	ld	(varR),a							; store remainder in R
  23+ B7C0 C9               ret
  24+ B7C1              LL84:										; div error  R=U=#5
  25+ B7C1 3E 32        	ld		a,50
  26+ B7C3 32 E0 9D     	ld		(varR),a
  27+ B7C6 32 DE 9D     	ld		(varU),a
  28+ B7C9 C9           	ret
  29+ B7CA
# file closed: ./Maths/Utilities/RequAdivQ-LL61.asm
 687  B7CA              ;    INCLUDE "./Maths/Utilities/RSequABSrs-LL129.asm"
 688  B7CA                  INCLUDE "./Maths/Utilities/RSequQmulA-MULT12.asm"
# file opened: ./Maths/Utilities/RSequQmulA-MULT12.asm
   1+ B7CA              asm_mult12:
   2+ B7CA              RSequQmulA:
   3+ B7CA              ; "asm_ult12  R.S = Q * A \ visited quite often S = hi, R = lo, odd that its opposite to mult1"
   4+ B7CA CD 72 B6     	call APequQmulA
   5+ B7CD 08           	ex 	af,af'
   6+ B7CE 7A           	ld	a,d
   7+ B7CF 32 E1 9D     	ld	(varS),a
   8+ B7D2 7B           	ld	a,e
   9+ B7D3 32 E0 9D     	ld	(varR),a
  10+ B7D6 08           	ex 	af,af'
  11+ B7D7 C9           	ret
  12+ B7D8
# file closed: ./Maths/Utilities/RSequQmulA-MULT12.asm
 689  B7D8              ;INCLUDE "SwapRotmapXY-PUS1.asm"
 690  B7D8                  INCLUDE "./Maths/Utilities/tidy.asm"
# file opened: ./Maths/Utilities/tidy.asm
   1+ B7D8              ;rotmap0xLo: DB	0				; INWK +9
   2+ B7D8              ;rotmap0xHi: DB	0				; INWK +10
   3+ B7D8              ;rotmat0yLo: DB	0				; INWK +11
   4+ B7D8              ;rotmat0yHi: DB	0				; INWK +12
   5+ B7D8              ;rotmat0zLo:	DB 	0				; INWK +13
   6+ B7D8              ;rotmat0zHi:	DB 	0				; INWK +14
   7+ B7D8              ;rotmap1xLo: DB	0				; INWK +15
   8+ B7D8              ;rotmap1xHi:	DB	0				; INWK +16
   9+ B7D8              ;rotmat1yLo:	DB	0				; INWK +17
  10+ B7D8              ;rotmat1yHi:	DB	0				; INWK +18
  11+ B7D8              ;rotmat1zLo:	DB	0				; INWK +19
  12+ B7D8              ;rotmat1zHi:	DB	0				; INWK +20
  13+ B7D8              ;rotmat2xLo: DB	0				; INWK +21
  14+ B7D8              ;rotmat2xHi:	DB	0				; INWK +22
  15+ B7D8              ;rotmat2yLo:	DB	0				; INWK +23
  16+ B7D8              ;rotmat2yHi:	DB	0				; INWK +24
  17+ B7D8              ;rotmat2zLo:	DB	0				; INWK +25
  18+ B7D8              ;rotmat2zHi:	DB	0				; INWK +26
  19+ B7D8              ;
  20+ B7D8              ;rotmatFx	equ	rotmat0xHi
  21+ B7D8              ;rotmatFy	equ	rotmat0yHi
  22+ B7D8              ;rotmatFz	equ	rotmat0zHi
  23+ B7D8              ;rotmatUx	equ	rotmat1xHi
  24+ B7D8              ;rotmatUy	equ	rotmat1yHi
  25+ B7D8              ;rotmatUz	equ	rotmat1zHi
  26+ B7D8              ;
  27+ B7D8              ;inwkarray			equ		INWK+10
  28+ B7D8
  29+ B7D8                  include "./Universe/Ships/CopyRotMattoXX15.asm"
# file opened: ././Universe/Ships/CopyRotMattoXX15.asm
   1++B7D8              CopyRotMatNoseVtoXX15:
   2++B7D8                      ldCopyByte  UBnkrotmatNosevX+1 ,XX15VecX
   2++B7D8 3A 22 C0    >                        ld       a,(UBnkrotmatNosevX+1)
   2++B7DB 32 8E C0    >                        ld       (XX15VecX),a
   3++B7DE                      ldCopyByte  UBnkrotmatNosevY+1, XX15VecY
   3++B7DE 3A 24 C0    >                        ld       a,(UBnkrotmatNosevY+1)
   3++B7E1 32 8F C0    >                        ld       (XX15VecY),a
   4++B7E4                      ldCopyByte  UBnkrotmatNosevZ+1 ,XX15VecZ
   4++B7E4 3A 26 C0    >                        ld       a,(UBnkrotmatNosevZ+1)
   4++B7E7 32 90 C0    >                        ld       (XX15VecZ),a
   5++B7EA C9                   ret
   6++B7EB
   7++B7EB              CopyRotMatRoofVtoXX15:
   8++B7EB                      ldCopyByte  UBnkrotmatRoofvX+1 ,XX15VecX
   8++B7EB 3A 1C C0    >                        ld       a,(UBnkrotmatRoofvX+1)
   8++B7EE 32 8E C0    >                        ld       (XX15VecX),a
   9++B7F1                      ldCopyByte  UBnkrotmatRoofvY+1, XX15VecY
   9++B7F1 3A 1E C0    >                        ld       a,(UBnkrotmatRoofvY+1)
   9++B7F4 32 8F C0    >                        ld       (XX15VecY),a
  10++B7F7                      ldCopyByte  UBnkrotmatRoofvZ+1 ,XX15VecZ
  10++B7F7 3A 20 C0    >                        ld       a,(UBnkrotmatRoofvZ+1)
  10++B7FA 32 90 C0    >                        ld       (XX15VecZ),a
  11++B7FD C9                   ret
  12++B7FE
  13++B7FE              CopyRotMatSideVtoXX15:
  14++B7FE                      ldCopyByte  UBnkrotmatSidevX+1 ,XX15VecX
  14++B7FE 3A 16 C0    >                        ld       a,(UBnkrotmatSidevX+1)
  14++B801 32 8E C0    >                        ld       (XX15VecX),a
  15++B804                      ldCopyByte  UBnkrotmatSidevY+1, XX15VecY
  15++B804 3A 18 C0    >                        ld       a,(UBnkrotmatSidevY+1)
  15++B807 32 8F C0    >                        ld       (XX15VecY),a
  16++B80A                      ldCopyByte  UBnkrotmatSidevZ+1 ,XX15VecZ
  16++B80A 3A 1A C0    >                        ld       a,(UBnkrotmatSidevZ+1)
  16++B80D 32 90 C0    >                        ld       (XX15VecZ),a
  17++B810 C9                   ret
  18++B811
# file closed: ././Universe/Ships/CopyRotMattoXX15.asm
  30+ B811
  31+ B811                  include "./Universe/Ships/CopyXX15toRotMat.asm"
# file opened: ././Universe/Ships/CopyXX15toRotMat.asm
   1++B811              CopyXX15toRotMatNoseV:
   2++B811                      ldCopyByte  XX15VecX, UBnkrotmatNosevX+1
   2++B811 3A 8E C0    >                        ld       a,(XX15VecX)
   2++B814 32 22 C0    >                        ld       (UBnkrotmatNosevX+1),a
   3++B817                      ldCopyByte  XX15VecY, UBnkrotmatNosevY+1
   3++B817 3A 8F C0    >                        ld       a,(XX15VecY)
   3++B81A 32 24 C0    >                        ld       (UBnkrotmatNosevY+1),a
   4++B81D                      ldCopyByte  XX15VecZ, UBnkrotmatNosevZ+1
   4++B81D 3A 90 C0    >                        ld       a,(XX15VecZ)
   4++B820 32 26 C0    >                        ld       (UBnkrotmatNosevZ+1),a
   5++B823 C9                   ret
   6++B824
   7++B824              CopyXX15toRotMatRoofV:
   8++B824                      ldCopyByte  XX15VecX, UBnkrotmatRoofvX+1
   8++B824 3A 8E C0    >                        ld       a,(XX15VecX)
   8++B827 32 1C C0    >                        ld       (UBnkrotmatRoofvX+1),a
   9++B82A                      ldCopyByte  XX15VecY, UBnkrotmatRoofvY+1
   9++B82A 3A 8F C0    >                        ld       a,(XX15VecY)
   9++B82D 32 1E C0    >                        ld       (UBnkrotmatRoofvY+1),a
  10++B830                      ldCopyByte  XX15VecZ, UBnkrotmatRoofvZ+1
  10++B830 3A 90 C0    >                        ld       a,(XX15VecZ)
  10++B833 32 20 C0    >                        ld       (UBnkrotmatRoofvZ+1),a
  11++B836 C9                   ret
  12++B837
  13++B837              CopyXX15toRotMatSideV:
  14++B837                      ldCopyByte  XX15VecX, UBnkrotmatSidevX+1
  14++B837 3A 8E C0    >                        ld       a,(XX15VecX)
  14++B83A 32 16 C0    >                        ld       (UBnkrotmatSidevX+1),a
  15++B83D                      ldCopyByte  XX15VecY, UBnkrotmatSidevY+1
  15++B83D 3A 8F C0    >                        ld       a,(XX15VecY)
  15++B840 32 18 C0    >                        ld       (UBnkrotmatSidevY+1),a
  16++B843                      ldCopyByte  XX15VecZ, UBnkrotmatSidevZ+1
  16++B843 3A 90 C0    >                        ld       a,(XX15VecZ)
  16++B846 32 1A C0    >                        ld       (UBnkrotmatSidevZ+1),a
  17++B849 C9                   ret
  18++B84A
# file closed: ././Universe/Ships/CopyXX15toRotMat.asm
  32+ B84A
  33+ B84A              TidySub1:									;.TIS1	\ -> &293B  \ Tidy subroutine 1  X.A =  (-X*A  + (R.S))/96
  34+ B84A              		; b = regX on entry
  35+ B84A              TIS1Prep:									;.TIS1	\ -> &293B  \ Tidy subroutine 1 using B register = X
  36+ B84A 08           		ex		af,af'
  37+ B84B 78           		ld		a,b
  38+ B84C 32 DF 9D     		ld		(varQ),a
  39+ B84F 08           		ex		af,af'
  40+ B850 EE 80        		xor		$80							;	 flip sign of Acc
  41+ B852 CD B9 AE     		call	madXAequQmulAaddRS			; \ MAD \ multiply and add (X,A) =  -X*A  + (R,S)
  42+ B855              ; USES 				A BC E
  43+ B855              ; DOES NOT USE		D HL
  44+ B855              Tis1Div96:							   		; .DVID96	\ Their comment A=A/96: answer is A*255/96
  45+ B855 4F           		ld		c,a							; Store sign bit in  ct (we use e reg for that)
  46+ B856 E6 80        		and		SignOnly8Bit						; ..
  47+ B858 5F           		ld		e,a							; ..
  48+ B859 79           		ld		a,c							; a = high byte again with sign bit cleared
  49+ B85A E6 7F        		and		SignMask8Bit							; ..
  50+ B85C 06 FE        		ld		b,$FE						; slide counter T1
  51+ B85E              TIS1RollTLoop								; roll T1  clamp Acc to #96 for rotation matrix unity
  52+ B85E CB 27        		sla		a
  53+ B860              		JumpIfALTNusng $60, TIS1SkipSub
  53+ B860 FE 60       >                        cp      $60
  53+ B862 DA 6F B8    >                        jp		c, TIS1SkipSub
  54+ B865 DE 60        		sbc		a,$60							; subtract 96
  55+ B867 37           		scf
  56+ B868 CB 10        		rl		b							;  T1
  57+ B86A 38 F2        		jr		c,TIS1RollTLoop
  58+ B86C              TIS1KIPCont:
  59+ B86C 78           		ld		a,b							;   T1
  60+ B86D B3           		or		e							;   restore T sign
  61+ B86E C9           		ret
  62+ B86F              TIS1SkipSub:
  63+ B86F B7           	or			a
  64+ B870 CB 10        	rl			b							; T rolled left to push bit out the end
  65+ B872 38 EA        	jr			c,TIS1RollTLoop				; if we still have not hit the empty marker continue
  66+ B874 C3 6C B8     	jp			TIS1KIPCont
  67+ B877
  68+ B877              ;.TIDY	\ -> &4679 \ Orthogonalize rotation matrix that uses 0x60 as unity returns INWK(16,18,20) = INWK(12*18+14*20, 10*16+14*20, 10*16+12*18) / INWK(10,12,14)
  69+ B877              ; Ux,Uy,Uz = -(FyUy+FzUz, FxUx+FzUz, FxUx+FyUy)/ Fx,Fy,Fz
  70+ B877
  71+ B877
  72+ B877
  73+ B877
  74+ B877              TidyRotYSmall:
  75+ B877 CD A2 B9     		call	CalcRoofvZ
  76+ B87A 32 20 C0     		ld		(UBnkrotmatRoofvZ+1),a			; set roofvy hi?? Says roofz TODO
  77+ B87D C3 B3 B8     		jp		NormaliseRoofV
  78+ B880
  79+ B880              TidyRotXSmall:
  80+ B880 AF           		xor		a
  81+ B881 47           		ld		b,a
  82+ B882 3A 24 C0     		ld		a,(UBnkrotmatNosevY+1)			; nosev_y
  83+ B885 E6 60        		and		%01100000
  84+ B887 CA 77 B8     		jp		z,TidyRotYSmall
  85+ B88A 3A 26 C0     		ld		a,(UBnkrotmatNosevZ+1)			; nosev z
  86+ B88D 47           		ld		b,a							; b = regX for now
  87+ B88E 3A 1E C0     		ld		a,(UBnkrotmatRoofvY+1)			; roofv y
  88+ B891 CD 68 B9     		call	CalcRoofvY					; Set (roofvy= (nosev_x * roofv_x + nosev_z * roofv_z) / nosev_y, Q -= nosev_z
  89+ B894 32 1E C0     		ld		(UBnkrotmatRoofvY+1),a			; set roofvy hi
  90+ B897 C3 B3 B8     		jp		NormaliseRoofV
  91+ B89A              ; TIDY is broken
  92+ B89A              TIDY:
  93+ B89A DD 01                break
  94+ B89C              ORTHOGALISE:
  95+ B89C              ;-- NormaliseNosev
  96+ B89C CD D8 B7     		call	CopyRotMatNoseVtoXX15
  97+ B89F CD 9D B3     		call	normaliseXX1596fast			; normalise z hi, its really TIS3
  98+ B8A2 CD 11 B8     		call	CopyXX15toRotMatNoseV
  99+ B8A5              .CheckNXSmall:
 100+ B8A5 3A 22 C0     		ld		a,(UBnkrotmatNosevX+1)
 101+ B8A8 E6 60        		and		%01100000					; check top two magnitude bits
 102+ B8AA CA 80 B8     		jp		z,TidyRotXSmall
 103+ B8AD              .RotXIsBig:
 104+ B8AD CD 2E B9             call	CalcRoofvX
 105+ B8B0 32 1C C0     		ld		(UBnkrotmatRoofvX+1),a    	; set roofvx hi
 106+ B8B3              NormaliseRoofV:
 107+ B8B3 CD EB B7     		call	CopyRotMatRoofVtoXX15		; xx15 = roofv
 108+ B8B6 CD 9D B3     		call	normaliseXX1596fast			; normalise roof
 109+ B8B9              ;calc sidev x
 110+ B8B9 CD 24 B8     		call	CopyXX15toRotMatRoofV		; get back normalised version
 111+ B8BC 3A 22 C0     		ld		a,(UBnkrotmatNosevX+1)
 112+ B8BF 32 DF 9D     		ld		(varQ),a					; q = nosev_y
 113+ B8C2 3A 20 C0     		ld		a,(UBnkrotmatRoofvZ+1)	     ;roov z
 114+ B8C5 CD CA B7     		call	RSequQmulA
 115+ B8C8 3A 26 C0     		ld		a,(UBnkrotmatNosevZ+1)		; nosev z
 116+ B8CB 47           		ld		b,a							; b = regX for now
 117+ B8CC 3A 1E C0     		ld		a,(UBnkrotmatRoofvY+1)	    ; roofv y
 118+ B8CF CD 4A B8     		call	TidySub1					; Set (A ?)= (-nosev_z * roofv_y + nosev_y * roofv_z) / 96, Q -= nosev_z
 119+ B8D2                      JumpIfAIsZero NormSideXNoNeg
 119+ B8D2 A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
 119+ B8D3 CA D8 B8    >                        jp	    z, NormSideXNoNeg
 120+ B8D6 EE 80        		xor		$80							; flip a to get -sidev_x
 121+ B8D8              NormSideXNoNeg:
 122+ B8D8 32 16 C0     		ld		(UBnkrotmatSidevX+1),a
 123+ B8DB              ;calc sidev y
 124+ B8DB 3A 26 C0     		ld		a,(UBnkrotmatNosevZ+1)			; nosev z
 125+ B8DE 32 DF 9D     		ld		(varQ),a
 126+ B8E1 3A 1C C0     		ld		a,(UBnkrotmatRoofvX+1)			; roofv x
 127+ B8E4 CD CA B7     		call	RSequQmulA
 128+ B8E7 3A 22 C0     		ld		a,(UBnkrotmatNosevX+1)			        ; nosev x
 129+ B8EA 47           		ld		b,a							; b = regX for now
 130+ B8EB 3A 20 C0     		ld		a,(UBnkrotmatRoofvZ+1)			; roofv z
 131+ B8EE CD 4A B8     		call	TidySub1					; Set (A ?)= (-nosev_z * roofv_y + nosev_y * roofv_z) / 96, Q -= nosev_z
 132+ B8F1                      JumpIfAIsZero NormSideYNoNeg
 132+ B8F1 A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
 132+ B8F2 CA F7 B8    >                        jp	    z, NormSideYNoNeg
 133+ B8F5 EE 80        		xor		$80							; flip a to get -sidev_y
 134+ B8F7              NormSideYNoNeg:
 135+ B8F7 32 24 C0     		ld		(UBnkrotmatNosevY+1),a
 136+ B8FA              ;calc sidev z
 137+ B8FA 3A 22 C0     		ld		a,(UBnkrotmatNosevX+1)			; nosev x
 138+ B8FD 32 DF 9D     		ld		(varQ),a
 139+ B900 3A 1E C0     		ld		a,(UBnkrotmatRoofvY+1)			; roofv y
 140+ B903 CD CA B7     		call	RSequQmulA
 141+ B906 3A 24 C0     		ld		a,(UBnkrotmatNosevY+1)			; nosev y
 142+ B909 47           		ld		b,a							; b = regX for now
 143+ B90A 3A 1C C0     		ld		a,(UBnkrotmatRoofvX+1)			; roofv x
 144+ B90D CD 4A B8     		call	TidySub1					; Set (A ?)= (-nosev_z * roofv_y + nosev_y * roofv_z) / 96, Q -= nosev_z
 145+ B910                      JumpIfAIsZero NormSideZNoNeg
 145+ B910 A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
 145+ B911 CA 16 B9    >                        jp	    z, NormSideZNoNeg
 146+ B914 EE 80        		xor		$80							; flip a to get -sidev_y
 147+ B916              NormSideZNoNeg:
 148+ B916 32 18 C0     		ld		(UBnkrotmatSidevY+1),a ;TODO SHoudl this be Y??
 149+ B919              .ClearLoBytes:
 150+ B919 21 21 C0     		ld		hl,UBnkrotmatNosevX
 151+ B91C 06 09        		ld		b,9
 152+ B91E AF                   xor     a
 153+ B91F              .ClearLoLoop:
 154+ B91F 77           		ld		(hl),a						; zero out lo bytes
 155+ B920 23           		inc		hl
 156+ B921 23           		inc		hl
 157+ B922 10 FB        		djnz	.ClearLoLoop
 158+ B924 CD FE B7     		call	CopyRotMatSideVtoXX15		; xx15 = roofv
 159+ B927 CD 9D B3     		call	normaliseXX1596fast			; normalise roof
 160+ B92A              ;calc sidev x
 161+ B92A CD 37 B8     		call	CopyXX15toRotMatSideV		; get back normalised version
 162+ B92D
 163+ B92D C9           		ret
 164+ B92E
 165+ B92E
 166+ B92E
 167+ B92E              ;;;;;;;;.CheckNYSmall:
 168+ B92E              ;;;;;;;;		ld		a,(XX15+2)					; first check z zero, if so we have to do Y
 169+ B92E              ;;;;;;;;		and		$7F
 170+ B92E              ;;;;;;;;		cp		0
 171+ B92E              ;;;;;;;;		jp		z,Tidy1RZ
 172+ B92E              ;;;;;;;;		ld		a,(XX15+1)					; now we can do a realistic check of RY
 173+ B92E              ;;;;;;;;		cp 		0							; we can't end up with divide by 0 for RY
 174+ B92E              ;;;;;;;;		jp		z,Tidy1RZ					; We can't have all values of vector 0 so we must do RZ
 175+ B92E              ;;;;;;;;		and		%01100000					; check top two magnitude bits
 176+ B92E              ;;;;;;;;		jp		z,Tidy1RY					; and tidy based on roofy
 177+ B92E              ;;;;;;;;.DoNZ:
 178+ B92E              ;;;;;;;;		jp		Tidy1RZ						; else we tidy based on roofz
 179+ B92E              ;;;;;;;;;---RE ENTRY POINT -------------------------------------
 180+ B92E              ;;;;;;;;NormaliseRoofv:
 181+ B92E              ;;;;;;;;		call	CopyRotMatRoofVtoXX15		; xx15 = roofv
 182+ B92E              ;;;;;;;;		push	bc
 183+ B92E              ;;;;;;;;		call	normaliseXX1596fast			; normalise
 184+ B92E              ;;;;;;;;		pop		bc
 185+ B92E              ;;;;;;;;		call	CopyXX15toRotMatRoofV		; get back normalised version
 186+ B92E              ;;;;;;;;ProcessSidev:
 187+ B92E              ;;;;;;;;; -- SIDEV X
 188+ B92E              ;;;;;;;;		ldCopyByte	nosev_z+1, varQ         ; use ixh as Q later
 189+ B92E              ;;;;;;;;		ld		a,(UBnkrotmatRoofvY+1)				; a = roofv_hi
 190+ B92E              ;;;;;;;;		push	bc
 191+ B92E              ;;;;;;;;		call	RSequQmulA					; RS = Q * A MULT12
 192+ B92E              ;;;;;;;;		pop		bc
 193+ B92E              ;;;;;;;;		ld		a,(UBnkrotmatNosevY+1)
 194+ B92E              ;;;;;;;;		ld		b,a							; set x (b) to value of nosev_z
 195+ B92E              ;;;;;;;;		ld		a,(UBnkrotmatRoofvZ+1)				; a = roofv_y hi
 196+ B92E              ;;;;;;;;		push	bc
 197+ B92E              ;;;;;;;;		call	TidySub1					; set A (-nosev_z * roofv_y + nosev_y * roofv_z) / 96, This also sets Q = nosev_z TIS1
 198+ B92E              ;;;;;;;;		pop		bc
 199+ B92E              ;;;;;;;;		ld		(UBnkrotmatSidevX+1),a				; sidev_x = = (nosev_z * roofv_y - nosev_y * roofv_z) / 96
 200+ B92E              ;;;;;;;;; -- SIDEV Y
 201+ B92E              ;;;;;;;;		ldCopyByte	UBnkrotmatNosevX+1, varQ         ; use ixh as Q later
 202+ B92E              ;;;;;;;;		ld		a,(UBnkrotmatRoofvZ+1)				;
 203+ B92E              ;;;;;;;;		push	bc
 204+ B92E              ;;;;;;;;		call	RSequQmulA					; RS = Q * A MULT12 MULT12
 205+ B92E              ;;;;;;;;		pop		bc
 206+ B92E              ;;;;;;;;		ld		a,(UBnkrotmatNosevZ+1)
 207+ B92E              ;;;;;;;;		ld		b,a
 208+ B92E              ;;;;;;;;		ld		a,(UBnkrotmatRoofvX+1)
 209+ B92E              ;;;;;;;;		push	bc
 210+ B92E              ;;;;;;;;		call	TidySub1						; set A (-nosev_z * roofv_y + nosev_y * roofv_z) / 96, This also sets Q = nosev_z
 211+ B92E              ;;;;;;;;		pop		bc
 212+ B92E              ;;;;;;;;		ld		(sidev_y+1),a				; sidev_y  = (nosev_x * roofv_z - nosev_z * roofv_x) / 96
 213+ B92E              ;;;;;;;;		ld		a,(UBnkrotmatRoofvY+1)
 214+ B92E              ;;;;;;;;		push	bc
 215+ B92E              ;;;;;;;;; -- SIDEV Z
 216+ B92E              ;;;;;;;;		ldCopyByte	UBnkrotmatNosevY+1, varQ         ; use ixh as Q later
 217+ B92E              ;;;;;;;;		ld		a,(UBnkrotmatRoofvX+1)				;
 218+ B92E              ;;;;;;;;		call	RSequQmulA					; RS = Q * A MULT12
 219+ B92E              ;;;;;;;;		pop		bc
 220+ B92E              ;;;;;;;;		ld		a,(UBnkrotmatNosevX+1)
 221+ B92E              ;;;;;;;;		ld		b,a
 222+ B92E              ;;;;;;;;		ld		a,(UBnkrotmatRoofvY+1)
 223+ B92E              ;;;;;;;;		push	bc
 224+ B92E              ;;;;;;;;		call	TidySub1						; set A (-nosev_z * roofv_y + nosev_y * roofv_z) / 96, This also sets Q = nosev_z
 225+ B92E              ;;;;;;;;		pop		bc
 226+ B92E              ;;;;;;;;		ld		(sidev_z+1),a
 227+ B92E              ;;;;;;;;		xor		a							; set a = 0 so we can clear orientation low bytes
 228+ B92E              ;;;;;;;;		ld		hl,sidev_z
 229+ B92E              ;;;;;;;;		ld		b,9							; only on 6 cells (3 x row 0 and row 1)
 230+ B92E              ;;;;;;;;		ld		hl,UBnkrotmatNosevX
 231+ B92E              ;;;;;;;;NormaliseSideV:
 232+ B92E              ;;;;;;;;		call	CopyRotMatSideVtoXX15		; xx15 = roofv
 233+ B92E              ;;;;;;;;		push	bc
 234+ B92E              ;;;;;;;;		call	normaliseXX1596fast			; normalise
 235+ B92E              ;;;;;;;;		pop		bc
 236+ B92E              ;;;;;;;;		call	CopyXX15toRotMatSideV		; get back normalised version
 237+ B92E              ;;;;;;;;
 238+ B92E
 239+ B92E
 240+ B92E              CalcRoofvX:
 241+ B92E              Tidy1RX:										; roofv_x´ = -(nosev_y´ * roofv_y + nosev_z´ * roofv_z) / nosev_x´
 242+ B92E              		ldCopyByte UBnkrotmatNosevZ+1,varQ
 242+ B92E 3A 26 C0    >                        ld       a,(UBnkrotmatNosevZ+1)
 242+ B931 32 DF 9D    >                        ld       (varQ),a
 243+ B934 3A 20 C0     		ld		a,(UBnkrotmatRoofvZ+1)
 244+ B937 CD CA B7     		call	RSequQmulA						; rs = nosez hi * roofz hi
 245+ B93A              		ldCopyByte UBnkrotmatNosevY+1,varQ
 245+ B93A 3A 24 C0    >                        ld       a,(UBnkrotmatNosevY+1)
 245+ B93D 32 DF 9D    >                        ld       (varQ),a
 246+ B940 3A 1E C0     		ld		a,(UBnkrotmatRoofvY+1)
 247+ B943 CD B9 AE     		call	madXAequQmulAaddRS				; DE = nosey hi * roofy hi + rs
 248+ B946 7A           		ld		a,d
 249+ B947 E6 80        		and 	$80
 250+ B949 FD 67        		ld		iyh,a
 251+ B94B              ;DEBUG		ld		c,a
 252+ B94B 3A 22 C0     		ld		a,(UBnkrotmatNosevX+1)					; get nosev x sign
 253+ B94E 4F           		ld		c,a								; temp save
 254+ B94F E6 80        		and		$80
 255+ B951 FD AC        		xor		iyh								; flip from saved multiply sign result
 256+ B953 FD 67        		ld		iyh,a							; save nosesev sign to iyh
 257+ B955 79           		ld		a,c								; recover a
 258+ B956 E6 7F        		and		$7F								; a is unsigned nosev x
 259+ B958 42           		ld		b,d
 260+ B959 4B           		ld		c,e								; bc = nosev_y´ * roofv_y + nosev_z´ * roofv_z
 261+ B95A 57           		ld		d,a								; de = nosev x hi
 262+ B95B 1E 00        		ld		e,0
 263+ B95D CD 0F B2     		call	BC_Div_DE
 264+ B960 FD 7C        		ld		a,iyh							; get back sign from nosevx
 265+ B962 EE 80        		xor		$80								; flip sign
 266+ B964 E6 80        		and		$80								; keep sign bit only
 267+ B966 B0           		or		b
 268+ B967 C9           		ret
 269+ B968
 270+ B968
 271+ B968              CalcRoofvY:
 272+ B968              Tidy1RY:										; roofv_y´ = -(nosev_x´ * roofv_x + nosev_z´ * roofv_z) / nosev_y´
 273+ B968              		ldCopyByte UBnkrotmatNosevZ+1,varQ				;                  A        Q              RS
 273+ B968 3A 26 C0    >                        ld       a,(UBnkrotmatNosevZ+1)
 273+ B96B 32 DF 9D    >                        ld       (varQ),a
 274+ B96E 3A 20 C0     		ld		a,(UBnkrotmatRoofvZ+1)
 275+ B971 CD CA B7     		call	RSequQmulA
 276+ B974              		ldCopyByte UBnkrotmatNosevX+1,varQ
 276+ B974 3A 22 C0    >                        ld       a,(UBnkrotmatNosevX+1)
 276+ B977 32 DF 9D    >                        ld       (varQ),a
 277+ B97A 3A 1C C0     		ld		a,(UBnkrotmatRoofvX+1)
 278+ B97D CD B9 AE     		call	madXAequQmulAaddRS
 279+ B980 7A           		ld		a,d
 280+ B981 E6 80        		and 	$80
 281+ B983 FD 67        		ld		iyh,a
 282+ B985 3A 24 C0     		ld		a,(UBnkrotmatNosevY+1)					; get nosev x sign
 283+ B988 4F           		ld		c,a								; temp save
 284+ B989 E6 80        		and		$80
 285+ B98B FD AC        		xor		iyh								; flip from saved multiply sign result
 286+ B98D FD 67        		ld		iyh,a							; save nosesev sign to iyh
 287+ B98F 79           		ld		a,c								; recover a
 288+ B990 E6 7F        		and		$7F								; a is unsigned nosev x
 289+ B992 42           		ld		b,d
 290+ B993 4B           		ld		c,e								; bc = nosev_y´ * roofv_y + nosev_z´ * roofv_z
 291+ B994 57           		ld		d,a								; de = nosev x hi
 292+ B995 1E 00        		ld		e,0
 293+ B997 CD 0F B2     		call	BC_Div_DE
 294+ B99A FD 7C        		ld		a,iyh
 295+ B99C EE 80        		xor		$80
 296+ B99E E6 80        		and		$80
 297+ B9A0 B0           		or		b
 298+ B9A1 C9           		ret
 299+ B9A2
 300+ B9A2              CalcRoofvZ:
 301+ B9A2              Tidy1RZ:										; roofv_z´ = -(nosev_x´ * roofv_x + nosev_y´ * roofv_y) / nosev_z´
 302+ B9A2              		ldCopyByte UBnkrotmatNosevY+1,varQ
 302+ B9A2 3A 24 C0    >                        ld       a,(UBnkrotmatNosevY+1)
 302+ B9A5 32 DF 9D    >                        ld       (varQ),a
 303+ B9A8 3A 1E C0     		ld		a,(UBnkrotmatRoofvY+1)
 304+ B9AB CD CA B7     		call	RSequQmulA						; rs = NOSEy * ROOFy
 305+ B9AE              		ldCopyByte UBnkrotmatNosevX+1,varQ
 305+ B9AE 3A 22 C0    >                        ld       a,(UBnkrotmatNosevX+1)
 305+ B9B1 32 DF 9D    >                        ld       (varQ),a
 306+ B9B4 3A 1C C0     		ld		a,(UBnkrotmatRoofvX+1)
 307+ B9B7 CD B9 AE     		call	madXAequQmulAaddRS				; de (A,ixl) = NOSEx * ROOFx + RS
 308+ B9BA 7A           		ld		a,d
 309+ B9BB E6 80        		and 	$80
 310+ B9BD FD 67        		ld		iyh,a
 311+ B9BF 3A 26 C0     		ld		a,(UBnkrotmatNosevZ+1)					; get nosev x sign
 312+ B9C2 4F           		ld		c,a								; temp save
 313+ B9C3 E6 80        		and		$80
 314+ B9C5 FD AC        		xor		iyh								; flip from saved multiply sign result
 315+ B9C7 FD 67        		ld		iyh,a							; save nosesev sign to iyh
 316+ B9C9 79           		ld		a,c								; recover a
 317+ B9CA E6 7F        		and		$7F								; a is unsigned nosev x
 318+ B9CC 42           		ld		b,d
 319+ B9CD 4B           		ld		c,e								; bc = nosev_y´ * roofv_y + nosev_z´ * roofv_z
 320+ B9CE 57           		ld		d,a								; de = nosev x hi
 321+ B9CF 1E 00        		ld		e,0
 322+ B9D1 CD 0F B2     		call	BC_Div_DE
 323+ B9D4 FD 7C        		ld		a,iyh
 324+ B9D6 EE 80        		xor		$80
 325+ B9D8 E6 80        		and		$80
 326+ B9DA B0           		or		b
 327+ B9DB C9           		ret
 328+ B9DC
 329+ B9DC
 330+ B9DC
 331+ B9DC              ;;ProcessSidev:
 332+ B9DC              ;;		ldCopyByte	UBnkrotmatNosevZ+1, varQ         ; use ixh as Q later
 333+ B9DC              ;;		ld		a,(UBnkrotmatRoofvY+1)				; a = roofv_hi
 334+ B9DC              ;;		push	bc
 335+ B9DC              ;;		call	RSequQmulA					; RS = Q * A MULT12
 336+ B9DC              ;;		pop		bc
 337+ B9DC              ;;		ld		a,(UBnkrotmatNosevY+1)
 338+ B9DC              ;;		ld		b,a							; set x (b) to value of nosev_z
 339+ B9DC              ;;		ld		a,(UBnkrotmatRoofvZ+1)				; a = roofv_y hi
 340+ B9DC              ;;		push	bc
 341+ B9DC              ;;		call	TidySub1					; set A (-nosev_z * roofv_y + nosev_y * roofv_z) / 96, This also sets Q = nosev_z TIS1
 342+ B9DC              ;;		pop		bc
 343+ B9DC              ;;		xor		$80							; sidev_x = -a by flipping sign bit
 344+ B9DC              ;;		ld		(UBnkrotmatSidevX+1),a				; sidev_x = = (nosev_z * roofv_y - nosev_y * roofv_z) / 96
 345+ B9DC              ;;		ldCopyByte	UBnkrotmatNosevX+1, varQ         ; use ixh as Q later
 346+ B9DC              ;;		ld		a,(UBnkrotmatRoofvZ+1)				;
 347+ B9DC              ;;		push	bc
 348+ B9DC              ;;		call	RSequQmulA					; RS = Q * A MULT12 MULT12
 349+ B9DC              ;;		pop		bc
 350+ B9DC              ;;		ld		a,(UBnkrotmatNosevZ+1)
 351+ B9DC              ;;		ld		b,a
 352+ B9DC              ;;		ld		a,(UBnkrotmatNosevY+1)
 353+ B9DC              ;;		push	bc
 354+ B9DC              ;;		call	TidySub1						; set A (-nosev_z * roofv_y + nosev_y * roofv_z) / 96, This also sets Q = nosev_z
 355+ B9DC              ;;		pop		bc
 356+ B9DC              ;;		xor		$80							; a *= -1
 357+ B9DC              ;;		ld		(UBnkrotmatSidevY+1),a				; sidev_y  = (nosev_x * roofv_z - nosev_z * roofv_x) / 96
 358+ B9DC              ;;		ld		a,(UBnkrotmatRoofvY+1)
 359+ B9DC              ;;		push	bc
 360+ B9DC              ;;		ldCopyByte	UBnkrotmatNosevY+1, varQ         ; use ixh as Q later
 361+ B9DC              ;;		ld		a,(UBnkrotmatRoofvX+1)				;
 362+ B9DC              ;;		call	RSequQmulA					; RS = Q * A MULT12
 363+ B9DC              ;;		pop		bc
 364+ B9DC              ;;		ld		a,(UBnkrotmatNosevX+1)
 365+ B9DC              ;;		ld		b,a
 366+ B9DC              ;;		ld		a,(UBnkrotmatRoofvY+1)
 367+ B9DC              ;;		push	bc
 368+ B9DC              ;;		call	TidySub1						; set A (-nosev_z * roofv_y + nosev_y * roofv_z) / 96, This also sets Q = nosev_z
 369+ B9DC              ;;		pop		bc
 370+ B9DC              ;;		xor		$80
 371+ B9DC              ;;		ld		(UBnkrotmatSidevZ+1),a
 372+ B9DC              ;;		xor		a							; set a = 0 so we can clear orientation low bytes
 373+ B9DC              ;;		ld		hl,UBnkrotmatSidevZ
 374+ B9DC              ;;		ld		b,9							; only on 6 cells (3 x row 0 and row 1)
 375+ B9DC              ;;		ld		hl,UBnkrotmatNosevX
 376+ B9DC
 377+ B9DC
 378+ B9DC
 379+ B9DC
 380+ B9DC
 381+ B9DC
 382+ B9DC              ;;;;;;;;;-- Check to see if the top two magnitude bits are clear in nosev_x, if so jump to TI1
 383+ B9DC              ;;;;;;;;.ProcessRoofv:
 384+ B9DC              ;;;;;;;;		call	CopyRotMatRoofVtoXX15		; xx15 = roofv
 385+ B9DC              ;;;;;;;;		push	bc
 386+ B9DC              ;;;;;;;;		call	normaliseXX1596fast			; normalise roof
 387+ B9DC              ;;;;;;;;		pop		bc
 388+ B9DC              ;;;;;;;;		call	CopyXX15toRotMatRoofV		; get back normalised version
 389+ B9DC              ;;;;;;;;.ProcessSidev:
 390+ B9DC              ;;;;;;;;		call	CopyRotMatSideVtoXX15		; xx15 = roofv
 391+ B9DC              ;;;;;;;;		push	bc
 392+ B9DC              ;;;;;;;;		call	normaliseXX1596fast			; normalise roof
 393+ B9DC              ;;;;;;;;		pop		bc
 394+ B9DC              ;;;;;;;;		call	CopyXX15toRotMatSideV		; get back normalised version
 395+ B9DC
# file closed: ./Maths/Utilities/tidy.asm
 691  B9DC                  INCLUDE "./Maths/Utilities/LL28AequAmul256DivD.asm"
# file opened: ./Maths/Utilities/LL28AequAmul256DivD.asm
   1+ B9DC
   2+ B9DC              LL28Amul256DivD:        JumpIfAGTENusng  d, .Ll28Exit255
   2+ B9DC BA          >                        cp     d
   2+ B9DD D2 FB B9    >                        jp		nc,.Ll28Exit255
   3+ B9E0 1E FE                                ld      e,%11111110                 ; Set R to have bits 1-7 set, so we can rotate through 7
   4+ B9E2 CB 27        .LL31:                  sla     a
   5+ B9E4 38 0D                                jr      c,.LL29
   6+ B9E6                                      JumpIfALTNusng  d, .SkipSub         ; will jump if carry set, so we need to reset on the rol
   6+ B9E6 BA          >                        cp      d
   6+ B9E7 DA EC B9    >                        jp		c, .SkipSub
   7+ B9EA 92                                   sub     d
   8+ B9EB                                      ClearCarryFlag                      ; reset clarry as it will be complimented for rotate as 6502 does carry flags inverted
   8+ B9EB B7          >                        or a
   9+ B9EC 3F           .SkipSub:               ccf                                 ; if we did the subtract the carry will be clear so we need to invert to roll in.
  10+ B9ED CB 13                                rl      e
  11+ B9EF 38 F1                                jr      c,.LL31
  12+ B9F1 7B                                   ld      a,e
  13+ B9F2 C9                                   ret
  14+ B9F3 92           .LL29:                  sub     d                           ; A >= Q, so set A = A - Q
  15+ B9F4 37                                   scf                                 ; Set the C flag to rotate into the result in R
  16+ B9F5 CB 13                                rl      e                           ; rotate counter e left
  17+ B9F7 38 E9                                jr      c,.LL31                     ; if a bit was spat off teh end then loop
  18+ B9F9 7B                                   ld      a,e                         ; stick result in a
  19+ B9FA C9                                   ret
  20+ B9FB 3E FF        .Ll28Exit255:           ld  a,255                           ; Fail with FF as result
  21+ B9FD C9                                   ret
  22+ B9FE
# file closed: ./Maths/Utilities/LL28AequAmul256DivD.asm
 692  B9FE                  INCLUDE "./Maths/Utilities/XAequMinusXAPplusRSdiv96-TIS1.asm"
# file opened: ./Maths/Utilities/XAequMinusXAPplusRSdiv96-TIS1.asm
   1+ B9FE              XAequMinusXAplusRSdiv96:					;.TIS1	\ -> &293B  \ Tidy subroutine 1  X.A =  (-X*A  + (R.S))/96
   2+ B9FE              TIS1:
   3+ B9FE 08           		ex		af,af'
   4+ B9FF 3A C6 9C     		ld		a,(regX)
   5+ BA02 47           		ld		b,a
   6+ BA03 08           		ex		af,af'
   7+ BA04              BAequMinusBAplusRSdiv96:					;.TIS1	\ -> &293B  \ Tidy subroutine 1 using B register = X
   8+ BA04 08           		ex		af,af'
   9+ BA05 78           		ld		a,b
  10+ BA06 32 DF 9D     		ld		(varQ),a
  11+ BA09 08           		ex		af,af'
  12+ BA0A EE 80        		xor		$80							;	 flip sign of Acc
  13+ BA0C CD B9 AE     		call	madXAequQmulAaddRS			; \ MAD \ multiply and add (X,A) =  -X*A  + (R,S)
  14+ BA0F              ; USES 				A BC E
  15+ BA0F              ; DOES NOT USE		D HL
  16+ BA0F              Div96:										; .DVID96	\ Their comment A=A/96: answer is A*255/96
  17+ BA0F 47           		ld		b,a
  18+ BA10 E6 80        		and		$80							;	hi sign
  19+ BA12 5F           		ld		e,a							;   e = varT
  20+ BA13 78           		ld		a,b
  21+ BA14 E6 7F        		and		$7F							;	hi A7
  22+ BA16 06 FE        		ld		b,$FE						;   slide counter
  23+ BA18 48           		ld		c,b							;   c == T1 ::  T1
  24+ BA19              .DVL3:										;   roll T1  clamp Acc to #96 for rotation matrix unity
  25+ BA19 CB 27        		sla		a
  26+ BA1B FE 60        		cp		$60							; max 96
  27+ BA1D 30 02        		jr		nc,.DV4
  28+ BA1F DE 60        		sbc		a,$60							;  SBC #&60
  29+ BA21              .DV4:										; skip subtraction
  30+ BA21 CB 11        		rl		c							;  T1
  31+ BA23 38 F4        		jr		c,.DVL3
  32+ BA25 79           		ld		a,c							;   T1
  33+ BA26 B3           		or		e							;   restore T sign
  34+ BA27 C9           		ret
  35+ BA28
# file closed: ./Maths/Utilities/XAequMinusXAPplusRSdiv96-TIS1.asm
 693  BA28              ;INCLUDE "XAequQmuilAaddRS-MAD-ADD.asm"
 694  BA28              ;INCLUDE "XHiYLoequPA-gc3.asm"
 695  BA28              ;INCLUDE "XHiYLoequPmulAmul4-gc2.asm"
 696  BA28              ;INCLUDE "XLoYHiequPmulQmul4-gcash.asm"
 697  BA28              ;INCLUDE "XX12equXX15byXX16-LL51.asm"
 698  BA28                ;  INCLUDE "./Maths/Utilities/XYeqyx1loSmulMdiv256-Ll120-LL123.asm"
 699  BA28
 700  BA28                  INCLUDE "./GameEngine/Tactics.asm"
# file opened: ./GameEngine/Tactics.asm
   1+ BA28              ;Ship Tactics
   2+ BA28 63 BA AA BB  ShipAIJumpTable:      DW    NormalAI,   MissileAI,  StationAI,  JunkAI,     ScoopableAI
   2+ BA2C 64 BA 65 BA
   2+ BA30 66 BA
   3+ BA32 67 BA 68 BA                        DW    ThargoidAI, NoAI,       NoAI,       NoAI,       NoAI
   3+ BA36 68 BA 68 BA
   3+ BA3A 68 BA
   4+ BA3C
   5+ BA3C
   6+ BA3C 3E 80        ZeroBankFireECM:        ld      a,ECMCounterMax                 ; set ECM time
   7+ BA3E 32 E5 DC                             ld      (ZeroPageUBnKECMCountDown),a            ;
   8+ BA41 3A F1 9C                             ld      a,(ECMCountDown)
   9+ BA44                                      ReturnIfALTNusng ECMCounterMax
   9+ BA44 FE 80       >                        cp    ECMCounterMax
   9+ BA46 D8          >                        ret	 c
  10+ BA47 3E 80                                ld      a,ECMCounterMax
  11+ BA49 32 F1 9C                             ld      (ECMCountDown),a
  12+ BA4C C9                                   ret
  13+ BA4D
  14+ BA4D              ;----------------------------------------------------------------------------------------------------------------------------------
  15+ BA4D              ; Main entry point to tactics. Every time it will do a a tidy and the do AI logic
  16+ BA4D              UpdateShip:             ;  call    DEBUGSETNODES ;       call    DEBUGSETPOS
  17+ BA4D 21 52 87                            ld      hl,TidyCounter
  18+ BA50 35                                  dec     (hl)
  19+ BA51 C0                                  ret     nz
  20+ BA52 3E 10                               ld      a,16
  21+ BA54 32 52 87                            ld      (TidyCounter),a
  22+ BA57                                      ; call    TIDY TIDY IS BROKEN
  23+ BA57                                     ; add AI in here too
  24+ BA57 3A 2D C3                            ld       a,(ShipTypeAddr)
  25+ BA5A 21 28 BA                            ld       hl,ShipAIJumpTable
  26+ BA5D ED 31                               add      hl,a
  27+ BA5F ED 31                               add      hl,a
  28+ BA61 E9                                  jp       (hl)                                    ; Follow the AI Jump Table
  29+ BA62 C9                                   ret
  30+ BA63
  31+ BA63
  32+ BA63
  33+ BA63              ; used  when no pre-checks are requrired, e.g. if forcing a space station from main loop
  34+ BA63
  35+ BA63 C9           NormalAI:               ret
  36+ BA64 C9           StationAI:              ret
  37+ BA65 C9           JunkAI:                 ret
  38+ BA66 C9           ScoopableAI:            ret
  39+ BA67 C9           ThargoidAI:             ret
  40+ BA68 C9           NoAI:                   ret
  41+ BA69
  42+ BA69              ;----------------------------------------------------------------------------------------------------------------------------------
  43+ BA69              ; set angry if possible, if its an innocent then flag the space station to get angry
  44+ BA69 3A 2E C3     MakeAngry:              ld      a,(ShipNewBitsAddr)                     ; Check bit 5 of newb flags
  45+ BA6C                                      JumpIfMemEqNusng ShipTypeAddr, ShipTypeStation, .SetNewbAngry
  45+ BA6C 3A 2D C3    >                        ld  a,(ShipTypeAddr)
  45+ BA6F FE 02       >                        cp  ShipTypeStation
  45+ BA71 CA 90 BA    >                        jp  z,.SetNewbAngry
  46+ BA74 E6 20        .ItsNotAStation:        and     ShipIsBystander                         ; check if space station present if its a bystander
  47+ BA76 C4 97 BA                             call    nz, SetStationAngry                     ; Set Space Station if present, Angry
  48+ BA79 3A 3F C0                             ld      a,(UBnkaiatkecm)                        ; get AI data
  49+ BA7C                                      ReturnOnBitClear a, ShipAIEnabledBitNbr         ; if 0 then no AI attached so it can't get angry
  49+ BA7C CB 7F       >                        bit 	ShipAIEnabledBitNbr,a
  49+ BA7E C8          >                        ret		z
  50+ BA7F 4F                                   ld      c,a                                     ; Copy to c in case we need it later
  51+ BA80                                      SetMemToN UBnKAccel, 2                          ; set accelleration to 2 to speed up
  51+ BA80 3E 02       >                        ld      a,2
  51+ BA82 32 33 C0    >                        ld      (UBnKAccel),a
  52+ BA85 CB 27                                sla     a                                       ; set pitch to 4
  53+ BA87 32 35 C0                             ld      (UBnKRotZCounter),a                     ; .
  54+ BA8A 3A 2F C3                             ld      a,(ShipAIFlagsAddr)
  55+ BA8D                                      ReturnIfBitMaskClear ShipCanAnger
  55+ BA8D E6 01       >                        and     ShipCanAnger
  55+ BA8F C8          >                        ret     z
  56+ BA90 CD 3A C5     .SetNewbAngry:          call    SetShipHostile
  57+ BA93 C9                                   ret
  58+ BA94
  59+ BA94              ;----------------------------------------------------------------------------------------------------------------------------------
  60+ BA94 C9           MissileDidHitUs:        ret ; TODO
  61+ BA95
  62+ BA95              ;----------------------------------------------------------------------------------------------------------------------------------
  63+ BA95 C9           PlayerHitByMissile:     ret; TODO , do hit set up blast radius etc
  64+ BA96              ;----------------------------------------------------------------------------------------------------------------------------------
  65+ BA96 C9           MissileHitShipA:        ret; TODO hit ship do explosion, check for near by and if player is near and missile type logic, e.g. AP or HE
  66+ BA97              ;----------------------------------------------------------------------------------------------------------------------------------
  67+ BA97 CD 0D A3     SetStationAngry:        call    IsSpaceStationPresent                   ; only if present
  68+ BA9A D8                                   ret     c
  69+ BA9B 3A 2C C0                             ld      a,(UbnKShipUnivBankNbr)                     ; save current bank
  70+ BA9E FD 67                                ld      iyh,a
  71+ BAA0                                      MMUSelectUniverseN 0                            ; space station is always 0
  71+ BAA0 ED 91 56 46 >                     nextreg UniverseMMU,       BankUNIVDATA0+0
  72+ BAA4 CD 3A C5                             call    SetShipHostile
  73+ BAA7 FD 7C                                ld      a,iyh                                   ; get prev bank back
  74+ BAA9                                      MMUSelectUniverseA                              ;
  74+ BAA9 C6 46       >                     add    a,BankUNIVDATA0
  74+ BAAB ED 92 56    >                     nextreg UniverseMMU,       a
  75+ BAAE C9                                   ret
  76+ BAAF
  77+ BAAF              ;----------------------------------------------------------------------------------------------------------------------------------
  78+ BAAF              CheckMissileBlastInit:  ZeroA
  78+ BAAF AF          >                        xor a
  79+ BAB0 32 AE 9E                             ld      (CurrentMissileCheck),a
  80+ BAB3 21 0C C0                             ld      hl,UBnKxlo                      ; Copy Blast Coordinates
  81+ BAB6 01 0C 00                             ld      bc,12                           ; and Damage stats
  82+ BAB9 11 7C 9E                             ld      de,MissileXPos
  83+ BABC ED B0                                ldir
  84+ BABE                                      ZeroA                                   ; we have processd enque request
  84+ BABE AF          >                        xor a
  85+ BABF 32 30 C0                             ld      (UBnKMissleHitToProcess),a      ;
  86+ BAC2 CD 7F BB                             call    CheckIfBlastHitUs               ; If we are in Range
  87+ BAC5 DC 94 BA                             call    c, MissileDidHitUs              ; Then we get hit
  88+ BAC8 C9                                   ret
  89+ BAC9
  90+ BAC9              ;----------------------------------------------------------------------------------------------------------------------------------
  91+ BAC9              CheckPointRange:        MACRO   ShipPos, ShipSign, MissilePos, MissileSign
  92+ BAC9 ~                                    ld      a,(MissilePos)                      ; check X Coord
  93+ BAC9 ~                                    ld      hl,(ShipSign)
  94+ BAC9 ~                                    xor     (hl)
  95+ BAC9 ~                                    and     SignOnly8Bit
  96+ BAC9 ~                                    ld      hl,(ShipPos)
  97+ BAC9 ~                                    ld      de,(MissilePos)
  98+ BAC9 ~                                    jr      z,.SignsDiffernt
  99+ BAC9 ~            .XSame:                 and     a
 100+ BAC9 ~                                    sbc     hl,de                               ; distance = Ship X - Missile X
 101+ BAC9 ~                                    JumpIfPositive      .CheckDiff              ; if result was -ve
 102+ BAC9 ~                                    NegHL
 103+ BAC9 ~                                    jp      .CheckDiff
 104+ BAC9 ~            .SignsDiffernt:         add     hl,de
 105+ BAC9 ~                                    ReturnIfNegative                            ; if we overflowed then return
 106+ BAC9 ~            .CheckDiff:             ld      a,h                                 ; if we have an h outside blast raidus
 107+ BAC9 ~                                    ReturnIfANotZero
 108+ BAC9 ~                                    ld      a,l
 109+ BAC9 ~                                    and     a
 110+ BAC9 ~                                    ReturnIfAGTEMemusng   CurrentMissileBlastRange
 111+ BAC9                                      ENDM
 112+ BAC9              ;...................................................................
 113+ BAC9              ; We only do one test per loop for spreading the load of work
 114+ BAC9 3A AE 9E     CheckMissileBlastLoop:  ld      a,(CurrentMissileCheck)
 115+ BACC                                      ReturnIfAGTENusng   UniverseSlotListSize
 115+ BACC FE 0C       >                        cp    UniverseSlotListSize
 115+ BACE D0          >                        ret	 nc
 116+ BACF FD 6F                                ld      iyl,a
 117+ BAD1 3C                                   inc     a                                   ; update for next slot so re can fast return on distance checks
 118+ BAD2 32 AE 9E                             ld      (CurrentMissileCheck),a
 119+ BAD5                                      ReturnIfSlotAEmpty
 119+ BAD5 21 B0 9E    >                        ld      hl,UniverseSlotList
 119+ BAD8 ED 31       >                        add     hl,a
 119+ BADA 7E          >                        ld      a,(hl)
 119+ BADB 3C          >                        inc     a
 119+ BADC C8          >                        ret     z           ; if slot was ff inc would make it 0
 119+ BADD 3D          >                        dec     a           ; get original value back for later
 120+ BADE CD 0D A3                             call    IsSpaceStationPresent               ; If its a station its imune to missiles
 121+ BAE1 D8                                   ret     c                                   ; if we have a special mission to kill a staion then its type won't be space station for game logic
 122+ BAE2 3A 3D C0                             ld      a,(UBnKexplDsp)                     ; Don't explode a ship twice
 123+ BAE5 E6 20                                and     ShipExploding                       ;
 124+ BAE7                                      ReturnIfNotZero                             ;
 124+ BAE7 C0          >                        ret     nz
 125+ BAE8 3A 9D 9E                             ld      a,(CurrentMissileBlastRange)
 126+ BAEB FD 67                                ld      iyh,a                               ; iyh = missile blast depending on type
 127+ BAED FD 7D        .CheckRange:            ld      a,iyl                               ; now page in universe data
 128+ BAEF                                      MMUSelectUniverseA
 128+ BAEF C6 46       >                     add    a,BankUNIVDATA0
 128+ BAF1 ED 92 56    >                     nextreg UniverseMMU,       a
 129+ BAF4                                      CheckPointRange UBnKxlo, UBnKxsgn, MissileXPos, MissileXSgn  ; its a square but its good enough
 129+ BAF4 3A 7C 9E    >                        ld      a,(MissileXPos)                      ; check X Coord
 129+ BAF7 2A 0E C0    >                        ld      hl,(UBnKxsgn)
 129+ BAFA AE          >                        xor     (hl)
 129+ BAFB E6 80       >                        and     SignOnly8Bit
 129+ BAFD 2A 0C C0    >                        ld      hl,(UBnKxlo)
 129+ BB00 ED 5B 7C 9E >                        ld      de,(MissileXPos)
 129+ BB04 28 0F       >                        jr      z,.SignsDiffernt
 129+ BB06 A7          >.XSame:                 and     a
 129+ BB07 ED 52       >                        sbc     hl,de                               ; distance = Ship X - Missile X
 129+ BB09             >                        JumpIfPositive      .CheckDiff              ; if result was -ve
 129+ BB09 F2 17 BB    >                        jp		p, .CheckDiff
 129+ BB0C             >                        NegHL
 129+ BB0C AF          >                    xor a
 129+ BB0D 95          >                    sub l
 129+ BB0E 6F          >                    ld l,a
 129+ BB0F 9F          >                    sbc a,a
 129+ BB10 94          >                    sub h
 129+ BB11 67          >                    ld h,a
 129+ BB12 C3 17 BB    >                        jp      .CheckDiff
 129+ BB15 19          >.SignsDiffernt:         add     hl,de
 129+ BB16             >                        ReturnIfNegative                            ; if we overflowed then return
 129+ BB16 F8          >                        ret     m
 129+ BB17 7C          >.CheckDiff:             ld      a,h                                 ; if we have an h outside blast raidus
 129+ BB18             >                        ReturnIfANotZero
 129+ BB18 A7          >                        and     a
 129+ BB19 C0          >                        ret     nz
 129+ BB1A 7D          >                        ld      a,l
 129+ BB1B A7          >                        and     a
 129+ BB1C             >                        ReturnIfAGTEMemusng   CurrentMissileBlastRange
 129+ BB1C 21 9D 9E    >                        ld      hl,CurrentMissileBlastRange
 129+ BB1F BE          >                        cp      (hl)
 129+ BB20 D0          >                        ret	    nc
 130+ BB21                                      CheckPointRange UBnKylo, UBnKysgn, MissileYPos, MissileYSgn
 130+ BB21 3A 7F 9E    >                        ld      a,(MissileYPos)                      ; check X Coord
 130+ BB24 2A 11 C0    >                        ld      hl,(UBnKysgn)
 130+ BB27 AE          >                        xor     (hl)
 130+ BB28 E6 80       >                        and     SignOnly8Bit
 130+ BB2A 2A 0F C0    >                        ld      hl,(UBnKylo)
 130+ BB2D ED 5B 7F 9E >                        ld      de,(MissileYPos)
 130+ BB31 28 0F       >                        jr      z,.SignsDiffernt
 130+ BB33 A7          >.XSame:                 and     a
 130+ BB34 ED 52       >                        sbc     hl,de                               ; distance = Ship X - Missile X
 130+ BB36             >                        JumpIfPositive      .CheckDiff              ; if result was -ve
 130+ BB36 F2 44 BB    >                        jp		p, .CheckDiff
 130+ BB39             >                        NegHL
 130+ BB39 AF          >                    xor a
 130+ BB3A 95          >                    sub l
 130+ BB3B 6F          >                    ld l,a
 130+ BB3C 9F          >                    sbc a,a
 130+ BB3D 94          >                    sub h
 130+ BB3E 67          >                    ld h,a
 130+ BB3F C3 44 BB    >                        jp      .CheckDiff
 130+ BB42 19          >.SignsDiffernt:         add     hl,de
 130+ BB43             >                        ReturnIfNegative                            ; if we overflowed then return
 130+ BB43 F8          >                        ret     m
 130+ BB44 7C          >.CheckDiff:             ld      a,h                                 ; if we have an h outside blast raidus
 130+ BB45             >                        ReturnIfANotZero
 130+ BB45 A7          >                        and     a
 130+ BB46 C0          >                        ret     nz
 130+ BB47 7D          >                        ld      a,l
 130+ BB48 A7          >                        and     a
 130+ BB49             >                        ReturnIfAGTEMemusng   CurrentMissileBlastRange
 130+ BB49 21 9D 9E    >                        ld      hl,CurrentMissileBlastRange
 130+ BB4C BE          >                        cp      (hl)
 130+ BB4D D0          >                        ret	    nc
 131+ BB4E                                      CheckPointRange UBnKzlo, UBnKzsgn, MissileZPos, MissileZSgn
 131+ BB4E 3A 82 9E    >                        ld      a,(MissileZPos)                      ; check X Coord
 131+ BB51 2A 14 C0    >                        ld      hl,(UBnKzsgn)
 131+ BB54 AE          >                        xor     (hl)
 131+ BB55 E6 80       >                        and     SignOnly8Bit
 131+ BB57 2A 12 C0    >                        ld      hl,(UBnKzlo)
 131+ BB5A ED 5B 82 9E >                        ld      de,(MissileZPos)
 131+ BB5E 28 0F       >                        jr      z,.SignsDiffernt
 131+ BB60 A7          >.XSame:                 and     a
 131+ BB61 ED 52       >                        sbc     hl,de                               ; distance = Ship X - Missile X
 131+ BB63             >                        JumpIfPositive      .CheckDiff              ; if result was -ve
 131+ BB63 F2 71 BB    >                        jp		p, .CheckDiff
 131+ BB66             >                        NegHL
 131+ BB66 AF          >                    xor a
 131+ BB67 95          >                    sub l
 131+ BB68 6F          >                    ld l,a
 131+ BB69 9F          >                    sbc a,a
 131+ BB6A 94          >                    sub h
 131+ BB6B 67          >                    ld h,a
 131+ BB6C C3 71 BB    >                        jp      .CheckDiff
 131+ BB6F 19          >.SignsDiffernt:         add     hl,de
 131+ BB70             >                        ReturnIfNegative                            ; if we overflowed then return
 131+ BB70 F8          >                        ret     m
 131+ BB71 7C          >.CheckDiff:             ld      a,h                                 ; if we have an h outside blast raidus
 131+ BB72             >                        ReturnIfANotZero
 131+ BB72 A7          >                        and     a
 131+ BB73 C0          >                        ret     nz
 131+ BB74 7D          >                        ld      a,l
 131+ BB75 A7          >                        and     a
 131+ BB76             >                        ReturnIfAGTEMemusng   CurrentMissileBlastRange
 131+ BB76 21 9D 9E    >                        ld      hl,CurrentMissileBlastRange
 131+ BB79 BE          >                        cp      (hl)
 131+ BB7A D0          >                        ret	    nc
 132+ BB7B CD B5 C5                             call    ShipMissileBlast                    ; Ship hit by missile blast
 133+ BB7E C9                                   ret                                         ; we are done
 134+ BB7F              ;...................................................................
 135+ BB7F 3A 27 C0     CheckIfBlastHitUs:      ld      a,(UBnKMissileBlastRange)
 136+ BB82 4F                                   ld      c,a
 137+ BB83 C3 8A BB                             jp      MissileHitUsCheckPos
 138+ BB86              ;...................................................................
 139+ BB86 3A 29 C0     CheckIfMissileHitUs:    ld      a,(UBnKMissileDetonateRange)
 140+ BB89 4F                                   ld      c,a
 141+ BB8A              ;...................................................................
 142+ BB8A 2A 0C C0     MissileHitUsCheckPos:   ld      hl, (UBnKxlo)
 143+ BB8D                                      ZeroA
 143+ BB8D AF          >                        xor a
 144+ BB8E B4                                   or      h
 145+ BB8F                                      ClearCarryFlag
 145+ BB8F B7          >                        or a
 146+ BB90                                      ReturnIfNotZero                             ; will return with carry clear if way far away
 146+ BB90 C0          >                        ret     nz
 147+ BB91 7D                                   ld      a,l
 148+ BB92                                      ReturnIfAGTENusng    c                      ; return no carry if x far
 148+ BB92 B9          >                        cp    c
 148+ BB93 D0          >                        ret	 nc
 149+ BB94 2A 0F C0     .CheckY:                ld      hl,(UBnKylo)
 150+ BB97                                      ZeroA
 150+ BB97 AF          >                        xor a
 151+ BB98 B5                                   or      l
 152+ BB99                                      ClearCarryFlag
 152+ BB99 B7          >                        or a
 153+ BB9A                                      ReturnIfNotZero                             ; will return with carry clear if way far away
 153+ BB9A C0          >                        ret     nz
 154+ BB9B 7D                                   ld      a,l
 155+ BB9C                                      ReturnIfAGTENusng    c                      ; return no carry if y far
 155+ BB9C B9          >                        cp    c
 155+ BB9D D0          >                        ret	 nc
 156+ BB9E 2A 12 C0     .CheckZ:                ld      hl,(UBnKzlo)
 157+ BBA1                                      ZeroA
 157+ BBA1 AF          >                        xor a
 158+ BBA2 B5                                   or      l
 159+ BBA3                                      ClearCarryFlag
 159+ BBA3 B7          >                        or a
 160+ BBA4                                      ReturnIfNotZero                             ; will return with carry clear if way far away
 160+ BBA4 C0          >                        ret     nz
 161+ BBA5 7D                                   ld      a,l
 162+ BBA6                                      ReturnIfAGTENusng    c                      ; return no carry if z far
 162+ BBA6 B9          >                        cp    c
 162+ BBA7 D0          >                        ret	 nc
 163+ BBA8              .ItsAHit:               SetCarryFlag
 163+ BBA8 37          >                        scf
 163+ BBA9                                              ; So must have hit
 164+ BBA9 C9                                   ret
 165+ BBAA
 166+ BBAA              ;...................................................................
 167+ BBAA              ;... Now the tactics if current ship is the missile
 168+ BBAA              MissileAI:              JumpIfMemTrue UBnKMissleHitToProcess, .ProcessMissileHit
 168+ BBAA 3A 30 C0    >                        ld      a,(UBnKMissleHitToProcess)
 168+ BBAD A7          >                        and     a
 168+ BBAE CA 9E BC    >                        jp      z, .ProcessMissileHit
 169+ BBB1              .CheckForECM:           JumpIfMemNotZero ECMCountDown,.ECMIsActive        ; If ECM is running then kill the missile
 169+ BBB1 3A F1 9C    >                        ld  a,(ECMCountDown)
 169+ BBB4 A7          >                        and a
 169+ BBB5 C2 A7 BC    >                        jp  nz,.ECMIsActive
 170+ BBB8 3A 2E C3     .IsMissileHostile:      ld      a,(ShipNewBitsAddr)                 ; is missle attacking us?
 171+ BBBB E6 04                                and     ShipIsHostile
 172+ BBBD                                      JumpIfNotZero .MissileTargetingShip
 172+ BBBD C2 D4 BB    >                        jp	nz,.MissileTargetingShip
 173+ BBC0 2A 0C C0     .MissileTargetingPlayer:ld      hl, (UBnKxlo)                       ; check if missile in range of us
 174+ BBC3 3A 29 C0                             ld      a,(UBnKMissileDetonateRange)
 175+ BBC6 4F                                   ld      c,a                                 ; c holds detonation range
 176+ BBC7 CD 8A BB                             call    MissileHitUsCheckPos
 177+ BBCA D2 D3 BB     .MissileNotHitUsYet:    jp      nc, .UpdateTargetingUsPos
 178+ BBCD CD 95 BA     .MissleHitUs:           call    PlayerHitByMissile
 179+ BBD0 C3 A7 BC                             jp      .ECMIsActive                        ; we use ECM logic to destroy missile which eqneues is
 180+ BBD3 C9           .UpdateTargetingUsPos:  ret                         //TODO
 181+ BBD4 3A 31 C0     .MissileTargetingShip:  ld      a,(UBnKMissileTarget)
 182+ BBD7              .IsMissleTargetGone:    JumpIfSlotAEmpty    .ECMIsActive            ; if the target was blown up then detonate
 182+ BBD7 21 B0 9E    >                        ld      hl,UniverseSlotList
 182+ BBDA ED 31       >                        add     hl,a
 182+ BBDC 7E          >                        ld      a,(hl)
 182+ BBDD 3C          >                        inc     a
 182+ BBDE CA A7 BC    >                        jp      z,.ECMIsActive    ; if slot was ff inc would make it 0
 182+ BBE1 3D          >                        dec     a           ; get original value back for later
 183+ BBE2              ;... Note we don't have to check for impact as we already have a loop doing that
 184+ BBE2 FD 6F        .SelectTargetShip:      ld      iyl,a
 185+ BBE4                                      MMUSelectUniverseA
 185+ BBE4 C6 46       >                     add    a,BankUNIVDATA0
 185+ BBE6 ED 92 56    >                     nextreg UniverseMMU,       a
 186+ BBE9 3A 3F C0     .IsShipExploding:       ld      a,(UBnkaiatkecm)
 187+ BBEC E6 20                                and     ShipExploding
 188+ BBEE 20 0A                                jr      nz,.UpdateTargetingShipPos
 189+ BBF0 FD 7D        .ShipIsExploding:       ld      a,iyl                               ; get missile back into memory
 190+ BBF2                                      MMUSelectUniverseA
 190+ BBF2 C6 46       >                     add    a,BankUNIVDATA0
 190+ BBF4 ED 92 56    >                     nextreg UniverseMMU,       a
 191+ BBF7 C3 A7 BC                             jp      .ECMIsActive
 192+ BBFA 21 0C C0     .UpdateTargetingShipPos:ld      hl,UBnKxlo                          ; get missile target pos top temp while
 193+ BBFD 11 85 9E                             ld      de,CurrentTargetXpos
 194+ BC00 01 09 00                             ld      bc,3*3
 195+ BC03 ED B0                                ldir
 196+ BC05 FD 7D                                ld a,iyl
 197+ BC07              ;--- calculatge VSSUB Vector from current position to target into matrix K3
 198+ BC07 3A 31 C0     .CalculateMissileVector:ld      a,(UBnKMissileTarget)               ; get target ship slot number from UBnKMissileTarget
 199+ BC0A                                      MMUSelectShipARead                          ; MMU Seect page 0 to slot number
 199+ BC0A C6 46       >                     add    a,BankUNIVDATA0
 199+ BC0C ED 92 50    >                     nextreg ShipReadMMU,       a
 200+ BC0F 2A 0C C0     .CalcMissileToTargetX:  ld      hl,(UBnKxlo)                        ; Note this needs to be 24 bit for space stations
 201+ BC12                                      DISPLAY "Expected lo read on ZeroPageUBnKxlo here"
Tactics.asm(202): warning[rdlow]: Reading memory at low address: 0
 202+ BC12 ED 5B 00 00                          ld      de,(ZeroPageUBnKxlo)
 203+ BC16 3A 0E C0                             ld      a,(UBnKxsgn)
 204+ BC19 47                                   ld      b,a
 205+ BC1A                                      DISPLAY "Expected lo read on ZeroPageUBnKxsgn here"
Tactics.asm(206): warning[rdlow]: Reading memory at low address: 2
 206+ BC1A 3A 02 00                             ld      a,(ZeroPageUBnKxsgn)                     ; turn it negative so we can use add as subtract
 207+ BC1D                                      FlipSignBitA
 207+ BC1D EE 80       >                        xor     SignOnly8Bit
 208+ BC1F 4F                                   ld      c,a
 209+ BC20 CD 7B AC                             call    ADDHLDESignBC                       ;AHL = BHL + CDE
 210+ BC23 22 B1 BC                             ld      (TacticsVectorX),hl
 211+ BC26 32 B3 BC                             ld      (TacticsVectorX+2),a
 212+ BC29 2A 0F C0     .CalcMissileToTargetY:  ld      hl,(UBnKylo)                        ; Note this needs to be 24 bit for space stations
 213+ BC2C                                      DISPLAY "Expected lo read on ZeroPageUBnKylo here"
Tactics.asm(214): warning[rdlow]: Reading memory at low address: 3
 214+ BC2C ED 5B 03 00                          ld      de,(ZeroPageUBnKylo)
 215+ BC30 3A 11 C0                             ld      a,(UBnKysgn)
 216+ BC33 47                                   ld      b,a
 217+ BC34                                      DISPLAY "Expected lo read on ZeroPageUBnKysgn here"
Tactics.asm(218): warning[rdlow]: Reading memory at low address: 5
 218+ BC34 3A 05 00                             ld      a,(ZeroPageUBnKysgn)                     ; turn it negative so we can use add as subtract
 219+ BC37                                      FlipSignBitA
 219+ BC37 EE 80       >                        xor     SignOnly8Bit
 220+ BC39 4F                                   ld      c,a
 221+ BC3A CD 7B AC                             call    ADDHLDESignBC                       ;AHL = BHL + CDE
 222+ BC3D 22 B4 BC                             ld      (TacticsVectorY),hl
 223+ BC40 32 B6 BC                             ld      (TacticsVectorY+2),a
 224+ BC43 2A 12 C0     .CalcMissileToTargetZ:  ld      hl,(UBnKzlo)                        ; Note this needs to be 24 bit for space stations
 225+ BC46                                      DISPLAY "Expected lo read on ZeroPageUBnKzlo here"
Tactics.asm(226): warning[rdlow]: Reading memory at low address: 6
 226+ BC46 ED 5B 06 00                          ld      de,(ZeroPageUBnKzlo)
 227+ BC4A 3A 14 C0                             ld      a,(UBnKzsgn)
 228+ BC4D 47                                   ld      b,a
 229+ BC4E                                      DISPLAY "Expected lo read on ZeroPageUBnKzsgn here"
Tactics.asm(230): warning[rdlow]: Reading memory at low address: 8
 230+ BC4E 3A 08 00                             ld      a,(ZeroPageUBnKzsgn)                     ; turn it negative so we can use add as subtract
 231+ BC51                                      FlipSignBitA
 231+ BC51 EE 80       >                        xor     SignOnly8Bit
 232+ BC53 4F                                   ld      c,a
 233+ BC54 CD 7B AC                             call    ADDHLDESignBC                       ;AHL = BHL + CDE
 234+ BC57 22 B7 BC                             ld      (TacticsVectorZ),hl
 235+ BC5A 32 B9 BC                             ld      (TacticsVectorZ+2),a
 236+ BC5D               ; if or ABS all high bytes is <> 0
 237+ BC5D 2A 0D C0     .CheckDistance:         ld      hl,(UBnKxhi)
 238+ BC60 7C                                   ld      a,h
 239+ BC61 ED 5B 10 C0                          ld      de,(UBnKyhi)
 240+ BC65 B2                                   or      d
 241+ BC66 ED 4B 13 C0                          ld      bc,(UBnKzhi)
 242+ BC6A B0                                   or      b
 243+ BC6B                                      ClearSignBitA
 243+ BC6B E6 7F       >                        and     SignMask8Bit
 244+ BC6D                                      JumpIfNotZero       .FarAway
 244+ BC6D C2 7C BC    >                        jp	nz,.FarAway
 245+ BC70 B5                                   or      l
 246+ BC71 B3                                   or      e
 247+ BC72 B1                                   or      c
 248+ BC73                                      JumpIfNotZero       .FarAway
 248+ BC73 C2 7C BC    >                        jp	nz,.FarAway
 249+ BC76 3A 31 C0     .CloseMissileExplode:   ld      a,(UBnKMissileTarget)
 250+ BC79 C3 96 BA                             jp      MissileHitShipA
 251+ BC7C              ;   *far away
 252+ BC7C                                      DISPLAY "Expected lo read macro on ZeroPageUBnKECMFitted here"
 253+ BC7C              .FarAway:               JumpIfMemFalse      ZeroPageUBnKECMFitted, .NoECM                   ; if target has ECM and enough energy to use it
jumpMacros.asm(171): warning[rdlow]: Reading memory at low address: 57
Tactics.asm(253): ^ emitted from here
 253+ BC7C 3A 39 00    >                        ld      a,(ZeroPageUBnKECMFitted)
 253+ BC7F A7          >                        and     a
 253+ BC80 C2 9D BC    >                        jp      nz, .NoECM
 254+ BC83                                      DISPLAY "Expected lo read macro on ZeroPageUBnKEnergy here"
 255+ BC83                                      JumpIfMemLTNusng    ZeroPageUBnKEnergy,    ECMCounterMax, .NoECM    ; .
jumpMacros.asm(196): warning[rdlow]: Reading memory at low address: 55
Tactics.asm(255): ^ emitted from here
 255+ BC83 3A 37 00    >                        ld      a,(ZeroPageUBnKEnergy)
 255+ BC86 FE 80       >                        cp      ECMCounterMax
 255+ BC88 DA 9D BC    >                        jp	  c,.NoECM
 256+ BC8B                                      DISPLAY "Expected lo read macro on ZeroPageUBnKECMCountDown here"
 257+ BC8B                                      JumpIfMemIsNotZero   ZeroPageUBnKECMCountDown, .NoECM                ; . ECM is already active
 257+ BC8B 3A E5 DC    >                        ld      a,(ZeroPageUBnKECMCountDown)
 257+ BC8E A7          >                        and     a
 257+ BC8F C2 9D BC    >                        jp	    nz,.NoECM
 258+ BC92 3A D4 9C     .TestIfUsingECM:        ld      a,(RandomSeed2)                                             ; if random < 16
 259+ BC95                                      JumpIfAGTENusng     16, .UpdateMissilePos                           ;   then fire ECM destroying missile
 259+ BC95 FE 10       >                        cp     16
 259+ BC97 D2 9D BC    >                        jp		nc,.UpdateMissilePos
 260+ BC9A C3 3C BA     .ZeroPageFireECM:       jp      ZeroBankFireECM                                             ; with an implicit return
 261+ BC9D              ;                       implicit ret
 262+ BC9D              .NoECM:
 263+ BC9D              .UpdateMissilePos:      ;           normalise vector K3 into XX15
 264+ BC9D                                      ;           AX = nosev . XX15
 265+ BC9D                                      ;           CNT = A (high byte of dot product)
 266+ BC9D                                      ;           negate vector in XX15 so it points opposite direction
 267+ BC9D                                      ;           negate value of CNT so +ve if facing or -ve if facing same way
 268+ BC9D                                      ;           AX = roofv.XX15
 269+ BC9D                                      ;           SaveA
 270+ BC9D                                      ;           ships pitch counter = calculate teh shipt pitch counter (jsr nroll)
 271+ BC9D                                      ;           get roll counter from ship byte 29 (value = abs(byte 29 * 2) ,e. shift left
 272+ BC9D                                      ;           if roll counter < 32
 273+ BC9D                                      ;               AX = sidev . XX15
 274+ BC9D                                      ;               A = A xor pitch counter sigh
 275+ BC9D                                      ;               byte 29 = calcualte nroll to get ship pitch counter into
 276+ BC9D                                      ;           get back CNT
 277+ BC9D                                      ;           if CNT >= 0 AND CNT < CNT2 ** how is CNT2 set up?
 278+ BC9D                                      ;             then
 279+ BC9D                                      ;               Accelleration (byte 28) = 3
 280+ BC9D                                      ;               return
 281+ BC9D                                      ;           A = ABS(CNT)
 282+ BC9D                                      ;          if |CNT| >=  18
 283+ BC9D                                      ;            then
 284+ BC9D                                      ;              ship accelleration = -2
 285+ BC9D C9                                   ret
 286+ BC9E
 287+ BC9E
 288+ BC9E
 289+ BC9E
 290+ BC9E                                      ;
 291+ BC9E                                      ; else
 292+ BC9E                                      ;   *close enough for a detoniation
 293+ BC9E                                      ;   if target is a space station, set space station to trigger ECM and destroy missile (note that compromised station will not trigger ECM)
 294+ BC9E                                      ;   process missile hit object
 295+ BC9E                                      ;   work out if blast hit anythign else including us
 296+ BC9E
 297+ BC9E 3A AE 9E     .ProcessMissileHit:     ld      a,(CurrentMissileCheck)
 298+ BCA1                                      ReturnIfAGTENusng UniverseSlotListSize  ; need to wait another loop
 298+ BCA1 FE 0C       >                        cp    UniverseSlotListSize
 298+ BCA3 D0          >                        ret	 nc
 299+ BCA4 C3 AF BA     .ActivateNewExplosion:  jp  CheckMissileBlastInit               ; initialise
 300+ BCA7                                      ; DUMMY RET get a free return by using jp
 301+ BCA7 CD C6 C5     .ECMIsActive:           call    UnivExplodeShip                 ; ECM detonates missile
 302+ BCAA                                      SetMemTrue  UBnKMissleHitToProcess      ; Enque an explosion
 302+ BCAA AF          >                        xor     a
 302+ BCAB 32 30 C0    >                        ld      (UBnKMissleHitToProcess),a
 303+ BCAE C3 9E BC                             jp      .ProcessMissileHit              ; lets see if we can enqueue now
 304+ BCB1                                      ; DUMMY RET get a free return as activenewexplosion does jp to init with a free ret
 305+ BCB1
 306+ BCB1
 307+ BCB1 00 00 00     TacticsVectorX:         DS 3
 308+ BCB4 00 00 00     TacticsVectorY:         DS 3
 309+ BCB7 00 00 00     TacticsVectorZ:         DS 3
 310+ BCBA
 311+ BCBA              ;TODOcall    TacticsPosMinusTarget              ; calculate vector to target
 312+ BCBA              ;;TODO                        check range
 313+ BCBA              ;;TODO                        if target has ecm then 7% chance it will active, reduce target energy (i.e. damage)
 314+ BCBA              ;;TODO                        else
 315+ BCBA              ;;TODO                            normalise teh vector for direction
 316+ BCBA              ;;TODO                            dot product = missile nosev . normalised vector
 317+ BCBA              ;;TODO                            cnt = high byte of dot product, cnf is +ve if facing similar direction
 318+ BCBA              ;;TODO                            negate normalised vector so its opposite product
 319+ BCBA              ;;TODO                            invert sign of cnt
 320+ BCBA              ;;TODO                            AK = roovf . XX15
 321+ BCBA              ;;TODO                            Ships pitch = call nroll to caulate teh valu eof ships pitch counter
 322+ BCBA              ;;TODO                            if pitch * 2 < 32 then
 323+ BCBA              ;;TODO                                ax = sidev . xx15
 324+ BCBA              ;;TODO                                    a = x xort current pitch direction
 325+ BCBA              ;;TODO                                    shipts roll = nroll
 326+ BCBA              ;;TODO                            do accelleration at TA6 (    https://www.bbcelite.com/disc/flight/subroutine/tactics_part_7_of_7.html#ta20
 327+ BCBA
 328+ BCBA              ;;TODO
 329+ BCBA              ;;TODO
 330+ BCBA              ;;TODO
 331+ BCBA              ;;TODOget the targetted ship inbto bank
 332+ BCBA              ;;TODO                        check range as per player
 333+ BCBA              ;;TODO                        handle explosion enc
 334+ BCBA
 335+ BCBA              ;                    else see how close it is to target
 336+ BCBA              ;                         if close to target
 337+ BCBA              ;                            then explodes destroy missile
 338+ BCBA              ;                                 if ship is not station
 339+ BCBA              ;                                    then set up signal target ship hit my missile flag
 340+ BCBA              ;                                         set blastcheckcounter to slotlist length  (12)
 341+ BCBA              ;                                 end if
 342+ BCBA              ;                                 if we are in range of missle blast
 343+ BCBA              ;                                    cause blast damage to our ship (this will signal death is needed)
 344+ BCBA              ;                                 end if
 345+ BCBA              ;                                 return
 346+ BCBA              ;                         end if
 347+ BCBA              ;                 end if
 348+ BCBA              ;         end if
 349+ BCBA
 350+ BCBA
 351+ BCBA                          ;            else if ship is angry at us
 352+ BCBA              ;
 353+ BCBA
 354+ BCBA              ; Part 1 - if type is missile and enquing a missile blast and slot free
 355+ BCBA              ;             then enqueue missile blast details
 356+ BCBA              ;                  mark as exploded
 357+ BCBA              ;                  remove missile from universe slot list
 358+ BCBA
 359+ BCBA              ; TODO, how to we deal with scared ships, e.g. if angry and no guns or missiles then should be considered scared or if hull mass < say 25% of our ship
 360+ BCBA              ; also for future ship vs ship combat
 361+ BCBA              ;... Tactics........................................................................
 362+ BCBA              ;.PART 1
 363+ BCBA              ; if shiphitbymissleflag <> false
 364+ BCBA              ;    then dec blast check counter
 365+ BCBA              ;         if blast check counter = 0
 366+ BCBA              ;            then set shiphitbymissileflag to FF
 367+ BCBA              ;    else if SetShipHitByMissileFlag = current ship number
 368+ BCBA              ;            then cause damage to ship
 369+ BCBA              ;         else if ship is in range and ship is not a station
 370+ BCBA              ;                  then cause blast damage to ship
 371+ BCBA              ;         if destroyed
 372+ BCBA              ;            then explode ship
 373+ BCBA              ;                 return
 374+ BCBA              ; end if
 375+ BCBA              ; if ship is a missle (I think we allow missile on missle action)
 376+ BCBA              ;    then if ecm is active
 377+ BCBA              ;            then destroy missile and return
 378+ BCBA              ;            else if ship is angry at us
 379+ BCBA              ;                    then if ship is close to us
 380+ BCBA              ;                            then explodes causing damage to our ship
 381+ BCBA              ;                                 enque missile blast
 382+ BCBA              ;                                 destroy missile
 383+ BCBA              ;                                 set blastcheckcounter to slotlist length
 384+ BCBA              ;                                 set shiphitbymissileflag to FE (general blast)
 385+ BCBA              ;                                 return
 386+ BCBA              ;                            else jump to part 3 to do updates
 387+ BCBA              ;                         end if
 388+ BCBA              ;                    else see how close it is to target
 389+ BCBA              ;                         if close to target
 390+ BCBA              ;                            then
 391+ BCBA              ;                                 enque missile blast
 392+ BCBA              ;                                 destroy missile
 393+ BCBA              ;                                 if ship is not station
 394+ BCBA              ;                                    then set up signal target ship hit my missile flag
 395+ BCBA              ;                                         set blastcheckcounter to slotlist length  (12)
 396+ BCBA              ;                                 end if
 397+ BCBA              ;                                 if we are in range of missle blast
 398+ BCBA              ;                                    cause blast damage to our ship (this will signal death is needed)
 399+ BCBA              ;                                 end if
 400+ BCBA              ;                                 return
 401+ BCBA              ;                         end if
 402+ BCBA              ;                 end if
 403+ BCBA              ;         end if
 404+ BCBA              ;.PART 2A ** adding in a collision logic
 405+ BCBA              ;    else if ship is close to another ship
 406+ BCBA              ;            then if docking flag set and other ship is space station or we are space station and other ship has docking flag
 407+ BCBA              ;                    then if aligned correctly
 408+ BCBA              ;                         then remove ship as docked
 409+ BCBA              ;                              return
 410+ BCBA              ;         else
 411+ BCBA              ;            call collision route and determine daamage based on sizes and bounce vectors
 412+ BCBA              ;            return
 413+ BCBA              ;.PART 2 ** Need to check if ship has AI flag
 414+ BCBA              ;    else if not hostile
 415+ BCBA              ;            then if not docking or station not present
 416+ BCBA              ;                    then calculate vector to planet
 417+ BCBA              ;                         jump to part 7
 418+ BCBA              ;                    else calculate verctor to docking slot
 419+ BCBA              ;                         call caluclate vector to docking slot (DOCKIT)
 420+ BCBA              ;                         jump to part 7
 421+ BCBA              ;                 end if
 422+ BCBA              ;            else case ship type
 423+ BCBA              ;                      >>escape pod>> point at planet and jump to step 7
 424+ BCBA              ;                      >>space station>> if hostile
 425+ BCBA              ;                                           then if cop counter < 7 and 6.2% chance
 426+ BCBA              ;                                                   then spawm hostile cop
 427+ BCBA              ;                                                end if
 428+ BCBA              ;                                           else
 429+ BCBA              ;                                                if 0.8% change and transporter count = 0
 430+ BCBA              ;                                                   then if 50% chance
 431+ BCBA              ;                                                           then spawn transporter
 432+ BCBA              ;                                                           else spawn shuttle
 433+ BCBA              ;                                                        end if
 434+ BCBA              ;                                                end if
 435+ BCBA              ;                                        end if
 436+ BCBA              ;                                        return
 437+ BCBA              ;                      >>targoid and no mother ship in slot list>> set random drift
 438+ BCBA              ;                                                                  return
 439+ BCBA              ;                      >>if bounty hunter flag>> if ship not hostile
 440+ BCBA              ;                                                   then if trader flag clear or 20% chance
 441+ BCBA              ;                                                        then if fugitive or offender
 442+ BCBA              ;                                                                then set hosile
 443+ BCBA              ;                                                end if
 444+ BCBA              ;                      >>Carrier and hanger slots > 0 >> if 22% chance (code to be added later)
 445+ BCBA              ;                                         then spawn agressive hosting one of types carried
 446+ BCBA              ;                                              reduce ships in hanger by 1
 447+ BCBA              ;                                              return
 448+ BCBA              ;                      >>rock hermit>> if 22% chance
 449+ BCBA              ;                                         then spawn agressive hosting one of Sidewinder, Mamba, Krait, Adder or Gecko
 450+ BCBA              ;                                              return
 451+ BCBA              ;                      >>pirate and in safe zone>> stop pirate being hostile by removing agressive and hostileflags
 452+ BCBA              ;                 end case
 453+ BCBA              ;         end if
 454+ BCBA              ;         recharge ship energy by recharge factor (TODO as a config item on ship type but by default 1)
 455+ BCBA              ; .PART 3
 456+ BCBA              ;         calulcate dot product of ship nose to us
 457+ BCBA              ; .PART 4
 458+ BCBA              ;         2.5% change ship rill roll a noticable amount
 459+ BCBA              ;         if ship has > 50% energy jump to part 6
 460+ BCBA              ;         if ship > 1/8th energy jump to part 5
 461+ BCBA              ;         if random 10% chance (i.e. ship < 1/8 energy and bails out)
 462+ BCBA              ;            then launch escape pod
 463+ BCBA              ;                 set AI to null
 464+ BCBA              ;                 set random pitch and roll
 465+ BCBA              ;                 set accelleation to 0
 466+ BCBA              ;         end if
 467+ BCBA              ; .PART 5
 468+ BCBA              ;         if ship does not have any missilesor ECM is firing to part 6
 469+ BCBA              ;            then if random > threshold for ship type (TODO as a config item on ship type)
 470+ BCBA              ;                    then if tharoid ; note this means thargoids are sensitve to ECM
 471+ BCBA              ;                            then launch thargon
 472+ BCBA              ;                            else spawn angry missle under ship
 473+ BCBA              ;                         end if
 474+ BCBA              ;                 end if
 475+ BCBA              ;            else return
 476+ BCBA              ;         end if
 477+ BCBA              ; .PART 6
 478+ BCBA              ;         if ship is not pointing at us from dot product ( < 160 , also > -32)
 479+ BCBA              ;            then jump to part 7
 480+ BCBA              ;            else if ship is pointing directly at us ( < 163 i.e. > -35)
 481+ BCBA              ;                    then fire laser at us (which reduces energy)
 482+ BCBA              ;                         cause laser damage to our ship (this will signal death is needed)
 483+ BCBA              ;                         decellerate by half as ship has lock on
 484+ BCBA              ;                         return
 485+ BCBA              ;                    else fire laser into space (which reduces energy)
 486+ BCBA              ;                 end if
 487+ BCBA              ;         end if
 488+ BCBA              ; .PART 7#
 489+ BCBA              ;        if ship is a msile targetting us
 490+ BCBA              ;           then ship turns towards us some more
 491+ BCBA              ;           else if z hi > =  3 or ( x hi or y hi > 1) , i.e. ship is far away
 492+ BCBA              ;                    then do random wiht bit 7 set
 493+ BCBA              ;                         if random < AI flag
 494+ BCBA              ;                            then   ship turned towards us
 495+ BCBA              ;                            else   ship turns away from us
 496+ BCBA              ;                         end if
 497+ BCBA              ;                end if
 498+ BCBA              ;           end if
 499+ BCBA              ;           calculate new roll, pitch and accelleration based on new targe vector
 500+ BCBA
 501+ BCBA
 502+ BCBA              ;        determine ship direction based on agression and type
 503+ BCBA              ;        set pitch and roll coutners
 504+ BCBA              ;        adjust speed depleding on relationship to us
 505+ BCBA              ; .PART 8 - new
 506+ BCBA              ;        if ship has ECM, another ECM is not active and missile targeted at it
 507+ BCBA              ;           if ship has enery of ECM energey cost + 1/8th total
 508+ BCBA              ;              if chance 25%
 509+ BCBA              ;                 then fire ECM
 510+ BCBA              ;
# file closed: ./GameEngine/Tactics.asm
 701  BCBA                  INCLUDE "./Hardware/drive_access.asm"
# file opened: ./Hardware/drive_access.asm
   1+ BCBA              M_GETSETDRV             equ $89
   2+ BCBA              F_OPEN                  equ $9a
   3+ BCBA              F_CLOSE                 equ $9b
   4+ BCBA              F_READ                  equ $9d
   5+ BCBA              F_WRITE                 equ $9e
   6+ BCBA              F_SEEK                  equ $9f
   7+ BCBA
   8+ BCBA              FA_READ                 equ $01
   9+ BCBA              FA_APPEND               equ $06
  10+ BCBA              FA_OVERWRITE            equ $0C
  11+ BCBA
  12+ BCBA              ; Success 1 = default drive, carry reset
  13+ BCBA              ; Failure HL = -1 , carry set, errno set
  14+ BCBA F5 C5 D5 E5  GetDefaultDrive:        push	af,,bc,,de,,hl,,ix
  14+ BCBE DD E5
  15+ BCC0 AF                                   xor	    a	; a = 0 means get default drive into A
  16+ BCC1 CF                                   rst	    $08
  17+ BCC2 89                                   db	    $89
  18+ BCC3 32 CD BC                             ld	    (DefaultDrive),a
  19+ BCC6 DD E1 E1 D1                          pop		af,,bc,,de,,hl,,ix
  19+ BCCA C1 F1
  20+ BCCC C9                                   ret
  21+ BCCD 00           DefaultDrive:	        db	0
  22+ BCCE
  23+ BCCE              ; *******************************************************************************************************
  24+ BCCE              ;	Function:	Open a file read for reading/writing
  25+ BCCE              ;	In:		ix = filename
  26+ BCCE              ;			b  = Open filemode
  27+ BCCE              ;	ret		a  = handle, 0 on error
  28+ BCCE              ; *******************************************************************************************************
  29+ BCCE E5           fOpen:	                push	hl
  30+ BCCF DD E5 E1                             ld      hl,ix
  31+ BCD2 3A CD BC                             ld	    a,(DefaultDrive)
  32+ BCD5 CF                                   rst	    $08
  33+ BCD6 9A                                   db	    F_OPEN
  34+ BCD7 E1                                   pop	    hl
  35+ BCD8 C9                                   ret
  36+ BCD9
  37+ BCD9              ; *******************************************************************************************************
  38+ BCD9              ;	Function	Read bytes from the open file
  39+ BCD9              ;	In:		ix  = address to read into
  40+ BCD9              ;			bc  = amount to read
  41+ BCD9              ;	ret:		carry set = error
  42+ BCD9              ; *******************************************************************************************************
  43+ BCD9 B7           fRead:                  or   	a             ; is it zero?
  44+ BCDA C8                                   ret  	z             ; if so return
  45+ BCDB E5                                   push    hl
  46+ BCDC DD E5 E1                             ld      hl,ix    	 ; load ix into hl and save hl for later
  47+ BCDF CF                                   rst	    $08
  48+ BCE0 9D                                   db	    F_READ
  49+ BCE1 E1                                   pop	    hl
  50+ BCE2 C9                                   ret
  51+ BCE3
  52+ BCE3              ; *******************************************************************************************************
  53+ BCE3              ;	Function	Read bytes from the open file
  54+ BCE3              ;	In:		ix  = address to read into
  55+ BCE3              ;			bc  = amount to read
  56+ BCE3              ;	ret:		carry set = error
  57+ BCE3              ; *******************************************************************************************************
  58+ BCE3 B7           fWrite:                 or   	a             ; is it zero?
  59+ BCE4 C8                                   ret  	z             ; if so return
  60+ BCE5 E5                                   push	hl
  61+ BCE6 DD E5 E1                             ld      hl,ix
  62+ BCE9 CF                                   rst	    $08
  63+ BCEA 9E                                   db	    F_WRITE
  64+ BCEB E1                                   pop	    hl
  65+ BCEC C9                                   ret
  66+ BCED
  67+ BCED              ; *******************************************************************************************************
  68+ BCED              ;	Function:	Close open file
  69+ BCED              ;	In:		a  = handle
  70+ BCED              ;	ret		a  = handle, 0 on error
  71+ BCED              ; *******************************************************************************************************
  72+ BCED B7           fClose:		            or   	a             ; is it zero?
  73+ BCEE C8                                   ret  	z             ; if so return
  74+ BCEF CF                                   rst	    $08
  75+ BCF0 9B                                   db	    F_CLOSE
  76+ BCF1 C9                                   ret
  77+ BCF2
  78+ BCF2              ; *******************************************************************************************************
  79+ BCF2              ;	Function	Read bytes from the open file
  80+ BCF2              ;	In:		a   = file handle
  81+ BCF2              ;			L   = Seek mode (0=start, 1=rel, 2=-rel)
  82+ BCF2              ;			BCDE = bytes to seek
  83+ BCF2              ;	ret:		BCDE = file pos from start
  84+ BCF2              ; *******************************************************************************************************
  85+ BCF2 DD E5 E5     fSeek:                  push	ix,,hl
  86+ BCF5 CF                                   rst	    $08
  87+ BCF6 9F                                   db	    F_SEEK
  88+ BCF7 E1 DD E1                             pop	    ix,,hl
  89+ BCFA C9                                   ret
  90+ BCFB
  91+ BCFB              ; *******************************************************************************************************
  92+ BCFB              ; Init the file system
  93+ BCFB              ; *******************************************************************************************************
  94+ BCFB CD BA BC     InitFileSystem:         call    GetDefaultDrive
  95+ BCFE C9                                   ret
  96+ BCFF
  97+ BCFF              ; *******************************************************************************************************
  98+ BCFF              ; Function:	Load a whole file into memory	(confirmed working on real machine)
  99+ BCFF              ; In:		hl = file data pointer
 100+ BCFF              ;		    ix = address to load to
 101+ BCFF              ;           bc = filelength
 102+ BCFF              ; *******************************************************************************************************
 103+ BCFF CD BA BC     FileLoad:	            call    GetDefaultDrive
 104+ BD02 C5 D5 F5                             push	bc,,de,,af
 105+ BD05                                      ; get file size
 106+ BD05 C5 DD E5                             push	bc,,ix			; store size, load address,
 107+ BD08 E5 DD E1                             ld      ix,hl
 108+ BD0B 06 01                                ld      b,FA_READ		; mode open for reading
 109+ BD0D CD CE BC                             call    fOpen
 110+ BD10 38 17                                jr	    c,.error_opening; carry set? so there was an error opening and A=error code
 111+ BD12 FE 00                                cp	    0				; was file handle 0?
 112+ BD14 28 13                                jr	    z,.error_opening; of so there was an error opening.
 113+ BD16 DD E1 C1                             pop     bc,,ix          ; get load address back and size back
 114+ BD19 F5                                   push	af				; remember handle
 115+ BD1A CD D9 BC                             call	fRead			; read data from A to address IX of length BC
 116+ BD1D 38 0C                                jr	    c,.error_reading
 117+ BD1F F1                                   pop	    af			    ; get handle back
 118+ BD20 CD ED BC                             call	fClose			; close file
 119+ BD23 38 07                                jr	    c,.error_closing
 120+ BD25 F1 D1 C1                             pop     bc,,de,,af      ; normal exit
 121+ BD28 C9                                   ret
 122+ BD29              ;
 123+ BD29              ; On error, display error code an lock up so we can see it
 124+ BD29              ;
 125+ BD29 DD E1        .error_opening:         pop	ix
 126+ BD2B C1           .error_reading:		    pop	bc	; don't pop a, need error code
 127+ BD2C
 128+ BD2C              .error_closing:
 129+ BD2C C1           .NormalError:  	        pop	bc	; don't pop into A, return with error code
 130+ BD2D D1                                   pop	de
 131+ BD2E C1                                   pop	bc
 132+ BD2F C9                                   ret
 133+ BD30
 134+ BD30              ; *******************************************************************************************************
 135+ BD30              ; Function:	Save a whole file into memory	(confirmed working on real machine)
 136+ BD30              ; In:		hl = file name
 137+ BD30              ;		    ix = address to save from
 138+ BD30              ;		    bc = size
 139+ BD30              ; *******************************************************************************************************
 140+ BD30 CD BA BC     FileSave:	            call    GetDefaultDrive		; need to do this each time?!?!?
 141+ BD33 C5 DD E5                             push	bc,,ix   			; store size& save address
 142+ BD36 E5 DD E1                             ld      ix,hl               ; get name into ix
 143+ BD39 06 0C                                ld      b,FA_OVERWRITE		; mode open for writing
 144+ BD3B CD CE BC                             call    fOpen
 145+ BD3E 38 12                                jr	    c,.error_opening	; carry set? so there was an error opening and A=error code
 146+ BD40 FE 00                                cp	    0			        ; was file handle 0?
 147+ BD42 28 0E                                jr	    z,.error_opening	; of so there was an error opening.
 148+ BD44 DD E1 C1                             pop	    bc,,ix			    ; get lenght and save address back
 149+ BD47 F5                                   push	af			        ; remember handle
 150+ BD48 CD E3 BC                             call	fWrite			    ; read data from A to address IX of length BC
 151+ BD4B 38 04                                jr	c,.error
 152+ BD4D F1                                   pop	af			            ; get handle back
 153+ BD4E CD ED BC                             call	fClose			    ; close file
 154+ BD51 C9           .error:                 ret
 155+ BD52              ;
 156+ BD52              ; On error, display error code an lock up so we can see it
 157+ BD52              ;
 158+ BD52 DD E1 C1     .error_opening:         pop	bc,,ix                  ; don't pop a, need error code
 159+ BD55 C9                                   ret
 160+ BD56
# file closed: ./Hardware/drive_access.asm
 702  BD56
 703  BD56                  INCLUDE "./Menus/common_menu.asm"
# file opened: ./Menus/common_menu.asm
   1+ BD56 43 4F 4D 4D  txt_commander 			DB "COMMANDER",0
   1+ BD5A 41 4E 44 45
   1+ BD5E 52 00
   2+ BD60 49 4E 56 45  txt_inventory 			DB "INVENTORY",0
   2+ BD64 4E 54 4F 52
   2+ BD68 59 00
   3+ BD6A 50 72 65 73  txt_present_system		DB "Present System   :",0
   3+ BD6E 65 6E 74 20
   3+ BD72 53 79 73 74
   3+ BD76 65 6D 20 20
   3+ BD7A 20 3A 00
   4+ BD7D 48 79 70 65  txt_hyperspace_system	DB "Hyperspace System:",0
   4+ BD81 72 73 70 61
   4+ BD85 63 65 20 53
   4+ BD89 79 73 74 65
   4+ BD8D 6D 3A 00
   5+ BD90 43 6F 6E 64  txt_condition			DB "Condition   :",0
   5+ BD94 69 74 69 6F
   5+ BD98 6E 20 20 20
   5+ BD9C 3A 00
   6+ BD9E 46 75 65 6C  txt_fuel				DB "Fuel        :",0
   6+ BDA2 20 20 20 20
   6+ BDA6 20 20 20 20
   6+ BDAA 3A 00
   7+ BDAC 43 61 73 68  txt_cash				DB "Cash        :",0
   7+ BDB0 20 20 20 20
   7+ BDB4 20 20 20 20
   7+ BDB8 3A 00
   8+ BDBA 4C 65 67 61  txt_legal_status		DB "Legal Status:",0
   8+ BDBE 6C 20 53 74
   8+ BDC2 61 74 75 73
   8+ BDC6 3A 00
   9+ BDC8 52 61 74 69  txt_rating				DB "Rating      :",0
   9+ BDCC 6E 67 20 20
   9+ BDD0 20 20 20 20
   9+ BDD4 3A 00
  10+ BDD6 45 51 55 49  txt_equipment			DB "EQUIPMENT:",0
  10+ BDDA 50 4D 45 4E
  10+ BDDE 54 3A 00
  11+ BDE1
  12+ BDE1 30 30 2E 30  txt_fuel_level			DB "00.0 Light Years",0
  12+ BDE5 20 4C 69 67
  12+ BDE9 68 74 20 59
  12+ BDED 65 61 72 73
  12+ BDF1 00
  13+ BDF2 58 58 58 58  txt_cash_amount			DB "XXXXXXXXXX",0
  13+ BDF6 58 58 58 58
  13+ BDFA 58 58 00
  14+ BDFD 2E           txt_cash_decimal        DB "."
  15+ BDFE 58 20 43 72  txt_cash_fraction       DB "X Cr",0
  15+ BE02 00
  16+ BE03
  17+ BE03              txt_status_colour		equ $FF
  18+ BE03
  19+ BE03              print_boiler_text_l2:
  20+ BE03              ; ">print_boilder_text hl = text structure, b = message count"
  21+ BE03              BoilerTextLoop:
  22+ BE03 C5           	push		bc			; Save Message Count loop value
  23+ BE04 4E           	ld			c,(hl)		; Get Row into b
  24+ BE05 23           	inc			hl
  25+ BE06 46           	ld			b,(hl)		; Get Col into b
  26+ BE07 23           	inc			hl
  27+ BE08 5E           	ld			e,(hl)		; Get text address Lo into E
  28+ BE09 23           	inc			hl
  29+ BE0A 56           	ld			d,(hl)		; Get text address Hi into E
  30+ BE0B 23           	inc			hl
  31+ BE0C E5           	push		hl			; Save present HL to stack as this is the address for the next message
  32+ BE0D EB           	ex			de,hl		; now hl = address of text data
  33+ BE0E 1E FF        	ld			e,txt_status_colour
  34+ BE10                  MMUSelectLayer2
  34+ BE10 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
  35+ BE14 CD C8 E0     	call		l1_print_at
  36+ BE17 E1           	pop			hl
  37+ BE18 C1           	pop			bc
  38+ BE19 10 E8        	djnz		BoilerTextLoop
  39+ BE1B C9           	ret
  40+ BE1C
  41+ BE1C
  42+ BE1C              print_boiler_text:
  43+ BE1C              ; ">print_boilder_text hl = text structure, b = message count"
  44+ BE1C              .BoilerTextLoop:
  45+ BE1C C5           	push		bc			; Save Message Count loop value
  46+ BE1D 4E           	ld			c,(hl)		; Get Row into b
  47+ BE1E 23           	inc			hl
  48+ BE1F 46           	ld			b,(hl)		; Get Col into b
  49+ BE20 23           	inc			hl
  50+ BE21 5E           	ld			e,(hl)		; Get text address Lo into E
  51+ BE22 23           	inc			hl
  52+ BE23 56           	ld			d,(hl)		; Get text address Hi into E
  53+ BE24 23           	inc			hl
  54+ BE25 E5           	push		hl			; Save present HL to stack as this is the address for the next message
  55+ BE26 EB           	ex			de,hl		; now hl = address of text data
  56+ BE27 1E FF        	ld			e,txt_status_colour
  57+ BE29 C5           	push		bc
  58+ BE2A D1           	pop			de
  59+ BE2B CD C8 E0     	call		l1_print_at
  60+ BE2E E1           	pop			hl
  61+ BE2F C1           	pop			bc
  62+ BE30 10 EA        	djnz		.BoilerTextLoop
  63+ BE32 C9           	ret
  64+ BE33
  65+ BE33              GetFuelLevel:           INCLUDE "Menus/get_fuel_level_inlineinclude.asm"
# file opened: ./Menus/get_fuel_level_inlineinclude.asm
   1++BE33
   2++BE33
   3++BE33 3A 45 A3     	ld		a,(Fuel)
   4++BE36 11 E1 BD     	ld		de,txt_fuel_level
   5++BE39 0E 9C        	ld	c, -100
   6++BE3B CD 45 BE     	call	.Num1
   7++BE3E 0E F6        	ld	c,-10
   8++BE40 CD 45 BE     	call	.Num1
   9++BE43 0E FF        	ld	c,-1
  10++BE45              .Num1:
  11++BE45 06 2F        	ld	b,'0'-1
  12++BE47              .Num2:
  13++BE47 04           	inc		b
  14++BE48 81           	add		a,c
  15++BE49 38 FC        	jr		c,.Num2
  16++BE4B 91           	sub 	c
  17++BE4C C5           	push	bc
  18++BE4D F5           	push	af
  19++BE4E 79           	ld		a,c
  20++BE4F FE FF        	cp		-1
  21++BE51 CC 5A BE     	call	z,.InsertDot
  22++BE54 78           	ld		a,b
  23++BE55 12           	ld		(de),a
  24++BE56 13           	inc		de
  25++BE57 F1           	pop		af
  26++BE58 C1           	pop		bc
  27++BE59 C9           	ret
  28++BE5A              .InsertDot:
  29++BE5A 3E 2E        	ld		a,'.'
  30++BE5C 12           	ld		(de),a
  31++BE5D 13           	inc		de
  32++BE5E C9           	ret
  33++BE5F
# file closed: ./Menus/get_fuel_level_inlineinclude.asm
  66+ BE5F
  67+ BE5F 2A 41 A3     GetCash:                ld      hl,(Cash)
  68+ BE62 EB                                   ex      de,hl
  69+ BE63 DD 2A 43 A3                          ld      ix,(Cash+2)
  70+ BE67 FD 21 F2 BD                          ld		iy,txt_cash_amount
  71+ BE6B CD 2F B5                             call 	DispDEIXtoIY	; This will write out with 0 termination after last digit
  72+ BE6E FD 7E 00     .ShiftDecimalDigit:     ld		a,(IY+0)				;Push last digit to post decimal
  73+ BE71 32 FE BD                             ld		(txt_cash_fraction),a
  74+ BE74 21 F3 BD     .UpdateInteger:         ld		hl,txt_cash_amount+1	; Now was there only 1 digit
  75+ BE77 7E                                   ld		a,(hl)					; if so we leave it alone so its "0.0"
  76+ BE78 FE 00                                cp		0
  77+ BE7A C8                                   ret		z
  78+ BE7B FD 36 00 00                          ld		(IY),0					; Else we erase last digit as it went to fraction
  79+ BE7F C9                                   ret
  80+ BE80
# file closed: ./Menus/common_menu.asm
 704  BE80
 705  BE80              EndOfNonBanked:
 706  BE80                  DISPLAY "Non Banked Code Ends At", EndOfNonBanked
 707  BE80
 708  BE80              ; ARCHIVED INCLUDE "Menus/draw_fuel_and_crosshair.asm"
 709  BE80              ;INCLUDE "./title_page.asm"
 710  BE80
 711  BE80              ; Blocks dependent on variables in Universe Banks
 712  BE80              ; Bank 49
 713  BE80              ;    SEG RESETUNIVSEG
 714  BE80              ;seg     CODE_SEG,       4:              $0000,       $8000                 ; flat address
 715  BE80              ;seg     RESETUNIVSEG,   BankResetUniv:  StartOfBank, ResetUniverseAddr
 716  BE80
 717  BE80
 718  BE80
 719  BE80              ;	ORG ResetUniverseAddr
 720  BE80              ;INCLUDE "./GameEngine/resetUniverse.asm"
 721  BE80              ; Bank 50
 722  BE80
 723  BE80
 724  BE80
 725  BE80                  SLOT    MenuShrChtAddr
 726  BE80                  PAGE    BankMenuShrCht
 727  BE80              	ORG     MenuShrChtAddr,BankMenuShrCht
 728  C000                  INCLUDE "./Menus/short_range_chart_menu.asm"
# file opened: ./Menus/short_range_chart_menu.asm
   1+ C000
   2+ C000 53 68 6F 72  short_range_page_marker  DB "ShortRange  PG50"
   2+ C004 74 52 61 6E
   2+ C008 67 65 20 20
   2+ C00C 50 47 35 30
   3+ C010
   4+ C010 30 02 3A AB  short_range_boiler_text	DW $0230,TextBuffer
   5+ C014              short_range_header		equ 12
   6+ C014              src_xy_centre			equ $6080
   7+ C014              src_x_centre			equ $80
   8+ C014              src_y_centre			equ $60
   9+ C014              local_chart_star_colour	equ 216
  10+ C014 00 00        local_dx				dw 0
  11+ C016 00 00        local_dy				dw 0
  12+ C018              local_max_range_x		equ 20
  13+ C018              local_max_range_y		equ $26
  14+ C018 00           local_name_row			db	0
  15+ C019 00           local_name_col			db	0
  16+ C01A              local_label_shift_x		equ	3
  17+ C01A              local_label_shift_y		equ	5
  18+ C01A
  19+ C01A 44 69 73 74  src_distance            DB "Distance: "
  19+ C01E 61 6E 63 65
  19+ C022 3A 20
  20+ C024 30 30 30     src_dist_amount         DB "000"
  21+ C027 2E           src_decimal             DB "."
  22+ C028 30           src_fraction            DB "0"
  23+ C029 20 4C 69 67  src_dis_ly              DB " Light Years",0
  23+ C02D 68 74 20 59
  23+ C031 65 61 72 73
  23+ C035 00
  24+ C036 20 20 30 2E  src_default_dist        DB "  0.0"
  24+ C03A 30
  25+ C03B
  26+ C03B 00 00 00...  src_distance_val        DS  6
  27+ C041              src_fill_buffer_len     EQU 32
  28+ C041              src_fill_buffer_size    EQU 4 * src_fill_buffer_len                          ; up to 32 labels topx topy lengthx spare
  29+ C041 00 00 00...  src_printed_text        DS  src_fill_buffer_size                             ; space for occupied cells may move to bit flags later TODO
  30+ C0C1 00           src_buffer_size         DB  0
  31+ C0C2              ;----------------------------------------------------------------------------------------------------------------------------------
  32+ C0C2              SRM_print_boiler_text:  INCLUDE "Menus/print_boiler_text_inlineInclude.asm"
# file opened: ./Menus/print_boiler_text_inlineInclude.asm
   1++C0C2
   2++C0C2              ;">print_boilder_text hl = text structure, b = message count"
   3++C0C2              .BoilerTextLoop:
   4++C0C2 C5           	push		bc			; Save Message Count loop value
   5++C0C3 4E           	ld			c,(hl)		; Get Row into b
   6++C0C4 23           	inc			hl
   7++C0C5 46           	ld			b,(hl)		; Get Col into b
   8++C0C6 23           	inc			hl
   9++C0C7 5E           	ld			e,(hl)		; Get text address Lo into E
  10++C0C8 23           	inc			hl
  11++C0C9 56           	ld			d,(hl)		; Get text address Hi into E
  12++C0CA 23           	inc			hl
  13++C0CB E5           	push		hl			; Save present HL to stack as this is the address for the next message
  14++C0CC EB           	ex			de,hl		; now hl = address of text data
  15++C0CD 1E FF        	ld			e,txt_status_colour
  16++C0CF C5           	push		bc
  17++C0D0 D1           	pop			de
  18++C0D1                  MMUSelectLayer1
  18++C0D1 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
  19++C0D5 CD C8 E0     	call		l1_print_at
  20++C0D8 E1           	pop			hl
  21++C0D9 C1           	pop			bc
  22++C0DA 10 E6        	djnz		.BoilerTextLoop
  23++C0DC C9           	ret
  24++C0DD
# file closed: ./Menus/print_boiler_text_inlineInclude.asm
  33+ C0DD              ;----------------------------------------------------------------------------------------------------------------------------------
  34+ C0DD              SRM_draw_chart_circle_and_crosshair:
  35+ C0DD ED 4B E7 9E                          ld		bc,(PresentSystemX)				; bc = present system
  36+ C0E1 01 80 60                             ld		bc,src_xy_centre					; must be ordered x y in data
  37+ C0E4                                      MMUSelectSpriteBank
  37+ C0E4 ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
  38+ C0E8 CD F5 E0                             call	sprite_local_cursor
  39+ C0EB 3A 45 A3                             ld		a,(Fuel)
  40+ C0EE 57                                   ld		d,a
  41+ C0EF 1E FF                                ld		e,$FF
  42+ C0F1                                      MMUSelectLayer2
  42+ C0F1 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
  43+ C0F5 CD AB E7                             call	l2_draw_circle
  44+ C0F8 C9                                   ret
  45+ C0F9              ; TODO MOVE CURSOR CODE
  46+ C0F9              ;----------------------------------------------------------------------------------------------------------------------------------
  47+ C0F9              SRM_draw_hyperspace_cross_hair:
  48+ C0F9 ED 4B E9 9E                          ld		bc,(TargetSystemX)              ; bc = selected jump
  49+ C0FD ED 5B E7 9E                          ld		de,(PresentSystemX)
  50+ C101 0E 80                                ld		c,src_x_centre
  51+ C103 06 60                                ld		b,src_y_centre
  52+ C105                                      MMUSelectSpriteBank
  52+ C105 ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
  53+ C109 CD FD E0                             call	sprite_local_hyper_cursor
  54+ C10C C9                                   ret
  55+ C10D              ;----------------------------------------------------------------------------------------------------------------------------------
  56+ C10D 3A D4 9E     src_get_name:           ld      a,(Galaxy)
  57+ C110                                      MMUSelectGalaxyA
  57+ C110 ED 92 57    >                     nextreg GalaxyDataMMU,       a
  58+ C113 ED 4B E9 9E                          ld      bc,(TargetSystemX)
  59+ C117 ED 43 5B E8                          ld      (GalaxyTargetSystem),bc
  60+ C11B CD 64 FC                             call    galaxy_system_under_cursor
  61+ C11E FE 00                                cp      0
  62+ C120 C8                                   ret     z
  63+ C121 CD 82 F6                             call	GetDigramWorkingSeed
  64+ C124 21 00 AC                             ld		hl,name_expanded
  65+ C127 CD 5B AB                             call	CapitaliseString
  66+ C12A 21 00 AC                             ld		hl, name_expanded
  67+ C12D 3E FF                                ld      a,$FF
  68+ C12F C9                                   ret
  69+ C130              ;----------------------------------------------------------------------------------------------------------------------------------
  70+ C130              SRM_update_hyperspace_cross_hair:
  71+ C130 ED 4B E9 9E                          ld		bc,(TargetSystemX)              ; bc = selected jump
  72+ C134 ED 5B E7 9E                          ld		de,(PresentSystemX)
  73+ C138 79                                   ld		a,c                             ; a = target x pos
  74+ C139 93                                   sub		e                               ; a = target x - present x
  75+ C13A F2 4B C1                             jp      p,.NoFlipX                      ; if > 0 skip next bit
  76+ C13D ED 44                                neg                                     ; c = a = abs a * 4
  77+ C13F CB 27                                sla		a                               ; .
  78+ C141 CB 27                                sla		a                               ; .
  79+ C143 4F                                   ld      c,a                             ;  .
  80+ C144 3E 80                                ld      a,src_x_centre                  ; c = a = centre screen - c
  81+ C146 91                                   sub     c                               ; .
  82+ C147 4F                                   ld      c,a                             ; .
  83+ C148 C3 52 C1                             jp      .fixY                           ;. now do Y
  84+ C14B CB 27        .NoFlipX:               sla		a
  85+ C14D CB 27                                sla		a
  86+ C14F C6 80                                add		a,src_x_centre
  87+ C151 4F                                   ld      c,a
  88+ C152 78           .fixY:                  ld		a,b                             ; for Y its * 2
  89+ C153 92                                   sub		d
  90+ C154 F2 63 C1                             jp      p,.NoFlipY
  91+ C157 ED 44                                neg
  92+ C159 CB 27                                sla     a
  93+ C15B 47                                   ld      b,a
  94+ C15C 3E 60                                ld      a,src_y_centre
  95+ C15E 90                                   sub     b
  96+ C15F 47                                   ld      b,a
  97+ C160 C3 68 C1                             jp      .RedrawSprite
  98+ C163 CB 27        .NoFlipY                sla		a
  99+ C165 C6 60                                add		a,src_y_centre
 100+ C167 47                                   ld		b,a
 101+ C168              .RedrawSprite:          MMUSelectSpriteBank
 101+ C168 ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
 102+ C16C CD D0 E0                             call	sprite_lhc_move
 103+ C16F CD A1 C1                             call    src_name_current
 104+ C172 C9                                   ret
 105+ C173
 106+ C173 26 08        src_clear_name_area:    ld      h,8
 107+ C175 11 E3 A0                             ld      de,$A000 | COLOUR_TRANSPARENT
 108+ C178 01 0A A8                             ld      bc,$A80A
 109+ C17B E5           .ClearLoop:             push    hl
 110+ C17C D5                                   push    de
 111+ C17D C5                                   push    bc
 112+ C17E                                      MMUSelectLayer2
 112+ C17E ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 113+ C182 CD B5 E2                             call	l2_draw_horz_line
 114+ C185 C1                                   pop     bc
 115+ C186 D1                                   pop     de
 116+ C187 E1                                   pop     hl
 117+ C188 04                                   inc     b
 118+ C189 25                                   dec     h
 119+ C18A 20 EF                                jr      nz,.ClearLoop
 120+ C18C C9                                   ret
 121+ C18D              ;----------------------------------------------------------------------------------------------------------------------------------
 122+ C18D 3A D4 9E     src_system_undercursor: ld      a,(Galaxy)
 123+ C190                                      MMUSelectGalaxyA
 123+ C190 ED 92 57    >                     nextreg GalaxyDataMMU,       a
 124+ C193 ED 4B E9 9E                          ld      bc,(TargetSystemX)
 125+ C197 ED 43 5B E8                          ld      (GalaxyTargetSystem),bc
 126+ C19B CD 64 FC                             call    galaxy_system_under_cursor
 127+ C19E FE 00                                cp      0
 128+ C1A0 C8                                   ret     z
 129+ C1A1 CD 0D C1     src_name_current:       call    src_get_name
 130+ C1A4 FE 00                                cp      0
 131+ C1A6 C8                                   ret     z
 132+ C1A7 E5                                   push    hl
 133+ C1A8 F5                                   push    af
 134+ C1A9 CD 73 C1                             call    src_clear_name_area
 135+ C1AC F1                                   pop     af
 136+ C1AD E1                                   pop     hl
 137+ C1AE 01 0A A8                             ld      bc,$A80A
 138+ C1B1 1E FF                                ld		e,$FF
 139+ C1B3                                      MMUSelectLayer2
 139+ C1B3 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 140+ C1B7 CD 24 E2                             call	l2_print_7at
 141+ C1BA CD CD C1                             call    src_calc_distance
 142+ C1BD 21 1A C0                             ld      hl,src_distance
 143+ C1C0 01 0A B0                             ld      bc,$B00A
 144+ C1C3 1E FF                                ld		e,$FF
 145+ C1C5                                      MMUSelectLayer2
 145+ C1C5 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 146+ C1C9 CD 24 E2                             call	l2_print_7at
 147+ C1CC C9                                   ret
 148+ C1CD              ;----------------------------------------------------------------------------------------------------------------------------------
 149+ C1CD 3A D4 9E     src_calc_distance:      ld      a,(Galaxy)                                      ; Default in 0 distance
 150+ C1D0                                      MMUSelectGalaxyA
 150+ C1D0 ED 92 57    >                     nextreg GalaxyDataMMU,       a
 151+ C1D3 11 24 C0                             ld      de,src_dist_amount
 152+ C1D6 21 36 C0                             ld      hl,src_default_dist
 153+ C1D9 ED A0                                ldi
 154+ C1DB ED A0                                ldi
 155+ C1DD ED A0                                ldi
 156+ C1DF ED A0                                ldi
 157+ C1E1 ED A0                                ldi
 158+ C1E3 ED 4B E7 9E                          ld      bc,(PresentSystemX)
 159+ C1E7 ED 43 57 E8                          ld      (GalaxyPresentSystem),bc
 160+ C1EB ED 4B E9 9E                          ld      bc,(TargetSystemX)
 161+ C1EF ED 43 59 E8                          ld      (GalaxyDestinationSystem),bc
 162+ C1F3 CD F7 FB                             call    galaxy_find_distance                            ; get distance into HL
 163+ C1F6 DD 2A 70 9E                          ld      ix,(Distance)
 164+ C1FA 11 00 00                             ld      de,0
 165+ C1FD FD 21 3B C0                          ld      iy,src_distance_val
 166+ C201 CD 2F B5                             call    DispDEIXtoIY                                    ; use DEIX as distance and write to string at location IY
 167+ C204 FD E5                                push    iy
 168+ C206 E1                                   pop     hl                                              ; hl = iy
 169+ C207 11 3B C0                             ld      de,src_distance_val
 170+ C20A 7E                                   ld		a,(hl)				                            ;Push last digit to post decimal
 171+ C20B 32 28 C0                             ld		(src_fraction),a
 172+ C20E 2B                                   dec     hl
 173+ C20F CD 53 B3                             call    compare16HLDE
 174+ C212 38 18                                jr      c,.done_number
 175+ C214 7E                                   ld      a,(hl)
 176+ C215 32 26 C0                             ld      (src_dist_amount+2),a
 177+ C218 2B                                   dec     hl
 178+ C219 CD 53 B3                             call    compare16HLDE
 179+ C21C 38 0E                                jr      c,.done_number
 180+ C21E 7E                                   ld      a,(hl)
 181+ C21F 32 25 C0                             ld      (src_dist_amount+1),a
 182+ C222 2B                                   dec     hl
 183+ C223 CD 53 B3                             call    compare16HLDE
 184+ C226 38 04                                jr      c,.done_number
 185+ C228 7E                                   ld      a,(hl)
 186+ C229 32 24 C0                             ld      (src_dist_amount),a
 187+ C22C C9           .done_number:           ret
 188+ C22D
 189+ C22D 00 00        PosScan1                DW      0
 190+ C22F 00 00        PosScan2                DW      0
 191+ C231              ; bc = row col, d = xlength e = y length
 192+ C231              ; Check logic simplies to , if 1 = bc and 2 = de:
 193+ C231              ; 12   X1            X2    OK         2 LT X1
 194+ C231              ; 1    X1  2         X2    FAIL       1 LT X1 && 2 GT X1 && 2 LT X2
 195+ C231              ;      X1  12        X2    FAIL       1 GT X1 && 1 LT X2 && 2 GT X1 && 2 LT X2
 196+ C231              ;      X1  1         X2 2  FAIL       1 GT X1 && 1 LT X2 && 2 GT X2
 197+ C231              ;      X1            X2 12 OK         1 GT X2
 198+ C231 16 07        FreeSlotCheck:          ld      d,7
 199+ C233 ED 30                                mul
 200+ C235 79                                   ld      a,c
 201+ C236 83                                   add     e
 202+ C237 30 02                                jr      nc,.NoOverflow
 203+ C239 3E FF        .Overflow:              ld      a,$FF
 204+ C23B 5F           .NoOverflow:            ld      e,a                     ; e now equals max length in pixels
 205+ C23C 78                                   ld      a,b
 206+ C23D C6 08                                add     8
 207+ C23F 57                                   ld      d,a                     ; e = max height
 208+ C240 ED 43 2D C2                          ld      (PosScan1),bc
 209+ C244 ED 53 2F C2                          ld      (PosScan2),de
 210+ C248 DD 21 41 C0  .CheckBoxes:            ld      ix,src_printed_text
 211+ C24C 3A C1 C0                             ld      a,(src_buffer_size)
 212+ C24F FE 00                                cp      0
 213+ C251 28 3C                                jr      z,.SafeToPrint
 214+ C253 60                                   ld      h,b                     ; h will substite for row b as b is used in dnjz
 215+ C254 47                                   ld      b,a
 216+ C255 DD 7E 02     .CheckBoxLoop:          ld      a,(ix+2)
 217+ C258 FE 00                                cp      0                       ; zerolength, not applicable
 218+ C25A 28 29                                jr      z,.NoBox
 219+ C25C 3A 2D C2     .CheckRow:              ld      a,(PosScan1)
 220+ C25F 3C                                   inc     a
 221+ C260                                      JumpIfAGTENusng (ix+2), .NoBox  ; X1 >= BottomLeftX
 221+ C260 DD BE 02    >                        cp     (ix+2)
 221+ C263 D2 85 C2    >                        jp		nc,.NoBox
 222+ C266 3A 2F C2                             ld      a,(PosScan2)
 223+ C269                                      JumpIfALTNusng (ix+0),  .NoBox   ; X2 <= TopRightX
 223+ C269 DD BE 00    >                        cp      (ix+0)
 223+ C26C DA 85 C2    >                        jp		c, .NoBox
 224+ C26F 3A 2E C2     .SafeToPrintX:          ld      a,(PosScan1+1)
 225+ C272 3C                                   inc     a
 226+ C273                                      JumpIfAGTENusng (ix+3), .NoBox  ; Y1 >= BottomLeftY
 226+ C273 DD BE 03    >                        cp     (ix+3)
 226+ C276 D2 85 C2    >                        jp		nc,.NoBox
 227+ C279 3A 30 C2                             ld      a,(PosScan2+1)
 228+ C27C                                      JumpIfALTNusng (ix+1),  .NoBox  ; Y2 <= TopRightY
 228+ C27C DD BE 01    >                        cp      (ix+1)
 228+ C27F DA 85 C2    >                        jp		c, .NoBox
 229+ C282 3E FF        .MatchedBox:            ld      a,$FF
 230+ C284 C9                                   ret
 231+ C285 DD 23        .NoBox:                 inc     ix
 232+ C287 DD 23                                inc     ix
 233+ C289 DD 23                                inc     ix
 234+ C28B DD 23                                inc     ix
 235+ C28D 10 C6                                djnz    .CheckBoxLoop
 236+ C28F 21 41 C0     .SafeToPrint:           ld      hl,src_printed_text
 237+ C292 3A C1 C0                             ld      a,(src_buffer_size)
 238+ C295 57                                   ld      d,a
 239+ C296 1E 04                                ld      e,4
 240+ C298 ED 30                                mul
 241+ C29A 19                                   add     hl,de
 242+ C29B ED 5B 2D C2                          ld      de,(PosScan1)
 243+ C29F 73 23 72 2B                          ld      (hl),de
 244+ C2A3 23                                   inc     hl
 245+ C2A4 23                                   inc     hl
 246+ C2A5 ED 5B 2F C2                          ld      de,(PosScan2)
 247+ C2A9 73 23 72 2B                          ld      (hl),de
 248+ C2AD 21 C1 C0                             ld      hl,src_buffer_size
 249+ C2B0 34                                   inc     (hl)
 250+ C2B1 AF                                   xor     a
 251+ C2B2 C9                                   ret
 252+ C2B3
 253+ C2B3 CD 02 A4     src_label_ssytem:       call	copy_system_to_working
 254+ C2B6 3A D4 9E                             ld      a,(Galaxy)
 255+ C2B9                                      MMUSelectGalaxyA
 255+ C2B9 ED 92 57    >                     nextreg GalaxyDataMMU,       a
 256+ C2BC CD 82 F6                             call	GetDigramWorkingSeed
 257+ C2BF 21 00 AC                             ld		hl,name_expanded
 258+ C2C2 CD 5B AB                             call	CapitaliseString
 259+ C2C5 3A 18 C0                             ld		a,(local_name_row)
 260+ C2C8 D6 05                                sub		local_label_shift_y
 261+ C2CA 47                                   ld		b,a					    ; b = effective pixel row
 262+ C2CB 3A 19 C0                             ld		a,(local_name_col)
 263+ C2CE C6 03                                add		a,local_label_shift_x
 264+ C2D0 4F                                   ld		c,a                     ; c = effective pixel col
 265+ C2D1 1E 00        .GetStringName:         ld      e,0
 266+ C2D3 21 00 AC                             ld      hl,name_expanded
 267+ C2D6 7E           .getStringLoop:         ld      a,(hl)
 268+ C2D7 23                                   inc     hl
 269+ C2D8 1C                                   inc     e
 270+ C2D9 FE 00                                cp      0                       ; String must have a terminator to work
 271+ C2DB 20 F9                                jr      nz,.getStringLoop
 272+ C2DD 16 08                                ld      d,8
 273+ C2DF C5                                   push    bc
 274+ C2E0 CD 31 C2                             call    FreeSlotCheck           ; first attemps
 275+ C2E3 C1                                   pop     bc
 276+ C2E4 FE 00                                cp      0
 277+ C2E6 28 19                                jr      z,.OKToPrint
 278+ C2E8 78                                   ld      a,b
 279+ C2E9 C6 08                                add     8
 280+ C2EB 47                                   ld      b,a
 281+ C2EC C5                                   push    bc
 282+ C2ED CD 31 C2                             call    FreeSlotCheck           ; attempt down 8 pixels attemps
 283+ C2F0 C1                                   pop     bc
 284+ C2F1 FE 00                                cp      0
 285+ C2F3 28 0C                                jr      z,.OKToPrint
 286+ C2F5 78                                   ld      a,b
 287+ C2F6 D6 10                                sub     16
 288+ C2F8 47                                   ld      b,a
 289+ C2F9 C5                                   push    bc
 290+ C2FA CD 31 C2                             call    FreeSlotCheck           ; attempt down 8 pixels attemps
 291+ C2FD C1                                   pop     bc
 292+ C2FE FE 00                                cp      0
 293+ C300 C0                                   ret     nz
 294+ C301 1E FF        .OKToPrint:             ld		e,$FF
 295+ C303 21 00 AC                             ld		hl,name_expanded
 296+ C306                                      MMUSelectLayer2
 296+ C306 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 297+ C30A CD 24 E2                             call	l2_print_7at
 298+ C30D C9                                   ret
 299+ C30E
 300+ C30E              name_if_possible:
 301+ C30E 3A 18 C0     SRCpixelRowToRefRow:    ld		a,(local_name_row)
 302+ C311 D6 05                                sub		local_label_shift_y
 303+ C313 47                                   ld		b,a					; b = effective pixel row
 304+ C314 CB 3F                                srl		a
 305+ C316 CB 3F                                srl		a
 306+ C318 CB 3F                                srl		a					; divide by 8 to get character row
 307+ C31A                                  ;	sub		2					; don;t write over header TODO tweaks
 308+ C31A 21 A5 9D                             ld		hl,IndexedWork
 309+ C31D ED 31                                add		hl,a
 310+ C31F 7E                                   ld		a,(hl)
 311+ C320 FE 00                                cp		0
 312+ C322 20 04                                jr		nz, SRCtryAbove		; if its not empty don't print *(need to test +-1 row TODO)
 313+ C324 36 01                                ld		(hl),1				; flag as in use
 314+ C326 18 12                                jr		SRCFoundRow
 315+ C328 2B           SRCtryAbove:            dec		hl
 316+ C329 7E                                   ld		a,(hl)
 317+ C32A FE 00                                cp		0
 318+ C32C 20 04                                jr		nz, SRCtryBelow		; if its not empty don't print *(need to test +-1 row TODO)
 319+ C32E 36 01                                ld		(hl),1				; flag as in use
 320+ C330 18 08                                jr		SRCFoundRow
 321+ C332 23           SRCtryBelow:            inc		hl
 322+ C333 23                                   inc		hl
 323+ C334 7E                                   ld		a,(hl)
 324+ C335 FE 00                                cp		0
 325+ C337 C8                                   ret		z
 326+ C338 36 01                                ld		(hl),1				; flag as in use
 327+ C33A CD 02 A4     SRCFoundRow:            call	copy_system_to_working
 328+ C33D 3A D4 9E     SRCSmallSizeName:       ld      a,(Galaxy)
 329+ C340                                      MMUSelectGalaxyA
 329+ C340 ED 92 57    >                     nextreg GalaxyDataMMU,       a
 330+ C343 CD 82 F6                             call	GetDigramWorkingSeed
 331+ C346 21 00 AC     SRCCapitaliseName:      ld		hl,name_expanded
 332+ C349 CD 5B AB                             call	CapitaliseString
 333+ C34C 21 00 AC     SRCPrintName:           ld		hl, name_expanded
 334+ C34F 3A 18 C0                             ld		a,(local_name_row)
 335+ C352 D6 05                                sub		local_label_shift_y
 336+ C354 47                                   ld		b,a					; b = effective pixel row
 337+ C355 3A 19 C0                             ld		a,(local_name_col)
 338+ C358 C6 03                                add		a,local_label_shift_x
 339+ C35A 4F                                   ld		c,a
 340+ C35B 1E FF                                ld		e,$FF
 341+ C35D                                      MMUSelectLayer2
 341+ C35D ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 342+ C361 CD 24 E2                             call	l2_print_7at
 343+ C364 C9                                   ret
 344+ C365
 345+ C365 AF           plot_local_stars:       xor		a
 346+ C366 32 E4 9D                             ld		(XSAV),a
 347+ C369 DD 21 16 E0                          ld      ix,galaxy_data
 348+ C36D 32 C1 C0                             ld      (src_buffer_size),a
 349+ C370 21 41 C0     SRCClearNameList:       ld		hl,src_printed_text
 350+ C373 11 80 00                             ld		de,src_fill_buffer_size
 351+ C376 CD A5 99                             call	memfill_dma
 351+ C379
 352+ C379 AF           SRCCounterLoop:         xor		a
 353+ C37A 3A D4 9E                             ld      a,(Galaxy)
 354+ C37D                                      MMUSelectGalaxyA
 354+ C37D ED 92 57    >                     nextreg GalaxyDataMMU,       a
 355+ C380 DD E5                                push    ix
 356+ C382 DD E5                                push    ix
 357+ C384 E1                                   pop     hl
 358+ C385 11 CB 9D                             ld      de,SystemSeed
 359+ C388 CD D5 A3                             call    copy_seed
 360+ C38B 3A CC 9D                             ld		a,(SystemSeed+1)				; QQ15+1 \ seed Ycoord of star
 361+ C38E 4F                                   ld		c,a
 362+ C38F 3A E8 9E     SRCcalcLocaldy:         ld		a,(PresentSystemY)
 363+ C392 47                                   ld		b,a								; so b holds Y ccord
 364+ C393 79                                   ld		a,c
 365+ C394 90                                   sub		b
 366+ C395 CB 7F                                bit		7,a
 367+ C397 28 02                                jr		z,SRCpositivedy
 368+ C399 ED 44        SRCnegativedy:          neg
 369+ C39B FE 26        SRCpositivedy:          cp		local_max_range_y
 370+ C39D 30 48                                jr		nc,SRCtoofar
 371+ C39F 3A CE 9D     SRCcalcLocaldx:         ld		a,(SystemSeed+3)				; QQ15+3 \ seed Xcoord of star
 372+ C3A2 4F                                   ld		c,a
 373+ C3A3 3A E7 9E                             ld		a,(PresentSystemX)
 374+ C3A6 47                                   ld		b,a								; so b holds Y ccord
 375+ C3A7 79                                   ld		a,c
 376+ C3A8 90                                   sub		b
 377+ C3A9 CB 7F                                bit		7,a
 378+ C3AB 28 02                                jr		z,SRCpositivedx
 379+ C3AD ED 44        SRCnegativedx:          neg
 380+ C3AF FE 14        SRCpositivedx:          cp		local_max_range_x
 381+ C3B1 30 34                                jr		nc,SRCtoofar
 382+ C3B3 3A CC 9D     SRCOKToPlot             ld		a,(SystemSeed+1)
 383+ C3B6 21 E8 9E                             ld		hl,PresentSystemY
 384+ C3B9 96                                   sub		(hl)
 385+ C3BA CB 27                                sla		a								; * 2
 386+ C3BC C6 60                                add		src_y_centre
 387+ C3BE 32 18 C0                             ld		(local_name_row),a
 388+ C3C1 47                                   ld		b,a
 389+ C3C2 3A CE 9D                             ld		a,(SystemSeed+3)
 390+ C3C5 21 E7 9E                             ld		hl,PresentSystemX
 391+ C3C8 96                                   sub		(hl)
 392+ C3C9 CB 27                                sla		a
 393+ C3CB CB 27                                sla		a								; * 4
 394+ C3CD C6 80                                add		src_x_centre
 395+ C3CF 32 19 C0                             ld		(local_name_col),a
 396+ C3D2 4F                                   ld		c,a
 397+ C3D3 3A D0 9D                             ld		a,(SystemSeed+5)
 398+ C3D6 E6 01                                and		$01
 399+ C3D8 C6 02                                add		a,2
 400+ C3DA 57                                   ld		d,a
 401+ C3DB 1E D8                                ld		e,local_chart_star_colour
 402+ C3DD                                      MMUSelectLayer2
 402+ C3DD ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 403+ C3E1 CD EF E9                             call	l2_draw_circle_fill
 404+ C3E4                                     ; call    src_get_name
 405+ C3E4 CD B3 C2                             call	src_label_ssytem
 406+ C3E7 E1           SRCtoofar:              pop     hl
 407+ C3E8 ED 34 08 00                          add     hl,8
 408+ C3EC E5                                   push    hl
 409+ C3ED DD E1                                pop     ix
 410+ C3EF 3A E4 9D                             ld		a,(XSAV)
 411+ C3F2 3D                                   dec		a
 412+ C3F3 FE 00                                cp		0
 413+ C3F5 C8                                   ret		z
 414+ C3F6 32 E4 9D                             ld		(XSAV),a
 415+ C3F9 C3 79 C3                             jp		SRCCounterLoop
 416+ C3FC              ;----------------------------------------------------------------------------------------------------------------------------------
 417+ C3FC              draw_local_chart_menu:  InitNoDoubleBuffer
 417+ C3FC             >                            MMUSelectLayer1
 417+ C3FC ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 417+ C400 CD 80 E0    >                            call	l1_cls
 417+ C403 3E 07       >                            ld		a,7
 417+ C405 CD 9B E0    >                            call	l1_attr_cls_to_a
 417+ C408             >                            MMUSelectLayer2
 417+ C408 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 417+ C40C CD 09 E0    >                            call    asm_l2_double_buffer_off
 417+ C40F CD 01 E1    >                            call	l2_cls	; Get some space
 417+ C412             >                            MMUSelectSpriteBank
 417+ C412 ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
 417+ C416 CD A4 E4    >                            call    sprite_cls_cursors
 418+ C419 3E 80                                ld      a,$80
 419+ C41B 32 EA 9D                             ld      (MenuIdMax),a
 420+ C41E                                      CopyPresentSystemToTarget               ; for short range we always start at present and cusor on present
 420+ C41E 2A E7 9E    >                        ld      hl,(PresentSystemX)
 420+ C421 22 E9 9E    >                        ld      (TargetSystemX),hl
 421+ C424 01 01 01     SRCDrawbox:             ld		bc,$0101
 422+ C427 11 FD BE                             ld		de,$BEFD
 423+ C42A 3E C0                                ld		a,$C0
 424+ C42C                                      MMUSelectLayer2
 424+ C42C ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 425+ C430 CD 4B E2                             call	l2_draw_box
 426+ C433 01 01 0A                             ld		bc,$0A01
 427+ C436 11 C0 FE                             ld		de,$FEC0
 428+ C439                                      MMUSelectLayer2
 428+ C439 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 429+ C43D CD B5 E2                             call	l2_draw_horz_line
 430+ C440 3E 0C        SRCStaticText:          ld		a,short_range_header
 431+ C442 CD 7B AB                             call	expandTokenToString
 432+ C445 06 01                                ld		b,1
 433+ C447 21 10 C0                             ld		hl,short_range_boiler_text
 434+ C44A CD C2 C0                             call	SRM_print_boiler_text
 435+ C44D CD CF A3     SRCSetUpChart:          call	copy_galaxy_to_system
 436+ C450 CD 65 C3                             call	plot_local_stars
 437+ C453 CD DD C0     .CircleandCrosshair:    call	SRM_draw_chart_circle_and_crosshair
 438+ C456 CD F9 C0                             call	SRM_draw_hyperspace_cross_hair
 439+ C459 C9                                   ret
 440+ C45A              ;----------------------------------------------------------------------------------------------------------------------------------
 441+ C45A 3A CB 9E     local_chart_cursors:    ld     a,(CursorKeysPressed)
 442+ C45D FE 00                                cp      0
 443+ C45F C8                                   ret     z
 444+ C460 17                                   rla
 445+ C461 DC 79 C4                             call   c,src_UpPressed
 446+ C464 17                                   rla
 447+ C465 DC 96 C4                             call   c,src_DownPressed
 448+ C468 17                                   rla
 449+ C469 DC B5 C4                             call   c,src_LeftPressed
 450+ C46C 17                                   rla
 451+ C46D DC D2 C4                             call   c,src_RightPressed
 452+ C470 17                                   rla
 453+ C471 DC F1 C4                             call   c,src_HomePressed
 454+ C474 17                                   rla
 455+ C475 DC FB C4                             call   c,src_RecenterPressed
 456+ C478 C9                                   ret
 457+ C479              ;----------------------------------------------------------------------------------------------------------------------------------
 458+ C479 3A EA 9E     src_UpPressed:          ld     a,(TargetSystemY)
 459+ C47C                                      JumpIfAIsZero   src_BoundsLimit
 459+ C47C A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
 459+ C47D CA 10 C5    >                        jp	    z, src_BoundsLimit
 460+ C480 47                                   ld      b,a                         ; save target as we will need it
 461+ C481 3A E8 9E                             ld      a,(PresentSystemY)
 462+ C484 90                                   sub     b                           ; get the difference between present and target
 463+ C485 FA 8D C4                             jp      m,.SkipBoundsTest           ; if target is right of present, we can go left
 464+ C488                                      JumpIfAGTENusng 40,src_BoundsLimit  ; if no more than 20 then OK
 464+ C488 FE 28       >                        cp     40
 464+ C48A D2 10 C5    >                        jp		nc,src_BoundsLimit
 465+ C48D 78           .SkipBoundsTest:        ld      a,b
 466+ C48E 3D                                   dec     a
 467+ C48F 32 EA 9E                             ld      (TargetSystemY),a
 468+ C492 CD 30 C1                             call    SRM_update_hyperspace_cross_hair
 469+ C495 C9                                   ret
 470+ C496              ;----------------------------------------------------------------------------------------------------------------------------------
 471+ C496 3A E8 9E     src_DownPressed:        ld     a,(PresentSystemY)
 472+ C499 47                                   ld      b,a
 473+ C49A 3A EA 9E                             ld      a,(TargetSystemY)
 474+ C49D 4F                                   ld      c,a
 475+ C49E                                      JumpIfAEqNusng 128,src_BoundsLimit
 475+ C49E FE 80       >                        cp     128
 475+ C4A0 CA 10 C5    >                        jp      z,src_BoundsLimit
 476+ C4A3 90                                   sub     b
 477+ C4A4 FA AC C4                             jp      m,.SkipBoundsTest
 478+ C4A7                                      JumpIfAGTENusng 40,src_BoundsLimit
 478+ C4A7 FE 28       >                        cp     40
 478+ C4A9 D2 10 C5    >                        jp		nc,src_BoundsLimit
 479+ C4AC 79           .SkipBoundsTest:        ld      a,c
 480+ C4AD 3C                                   inc    a
 481+ C4AE 32 EA 9E                             ld      (TargetSystemY),a
 482+ C4B1 CD 30 C1                             call    SRM_update_hyperspace_cross_hair
 483+ C4B4 C9                                   ret
 484+ C4B5              ;----------------------------------------------------------------------------------------------------------------------------------
 485+ C4B5 3A E9 9E     src_LeftPressed:        ld      a,(TargetSystemX)           ; we can't move left if target is zero
 486+ C4B8                                      JumpIfAIsZero   src_BoundsLimit
 486+ C4B8 A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
 486+ C4B9 CA 10 C5    >                        jp	    z, src_BoundsLimit
 487+ C4BC 47                                   ld      b,a                         ; save target as we will need it
 488+ C4BD 3A E7 9E                             ld      a,(PresentSystemX)
 489+ C4C0 90                                   sub     b                           ; get the difference between present and target
 490+ C4C1 FA C9 C4                             jp      m,.SkipBoundsTest           ; if target is right of present, we can go left
 491+ C4C4                                      JumpIfAGTENusng 20,src_BoundsLimit  ; if no more than 20 then OK
 491+ C4C4 FE 14       >                        cp     20
 491+ C4C6 D2 10 C5    >                        jp		nc,src_BoundsLimit
 492+ C4C9 78           .SkipBoundsTest:        ld      a,b
 493+ C4CA 3D                                   dec     a
 494+ C4CB 32 E9 9E                             ld      (TargetSystemX),a
 495+ C4CE CD 30 C1                             call    SRM_update_hyperspace_cross_hair
 496+ C4D1 C9                                   ret
 497+ C4D2              ;----------------------------------------------------------------------------------------------------------------------------------
 498+ C4D2 3A E7 9E     src_RightPressed:       ld      a,(PresentSystemX)
 499+ C4D5 47                                   ld      b,a
 500+ C4D6 3A E9 9E                             ld      a,(TargetSystemX)
 501+ C4D9 4F                                   ld      c,a
 502+ C4DA                                      JumpIfAEqNusng 255,src_BoundsLimit
 502+ C4DA FE FF       >                        cp     255
 502+ C4DC CA 10 C5    >                        jp      z,src_BoundsLimit
 503+ C4DF 90                                   sub     b
 504+ C4E0 FA E8 C4                             jp      m,.SkipBoundsTest
 505+ C4E3                                      JumpIfAGTENusng 20,src_BoundsLimit
 505+ C4E3 FE 14       >                        cp     20
 505+ C4E5 D2 10 C5    >                        jp		nc,src_BoundsLimit
 506+ C4E8 79           .SkipBoundsTest:        ld      a,c
 507+ C4E9 3C                                   inc    a
 508+ C4EA 32 E9 9E                             ld      (TargetSystemX),a
 509+ C4ED CD 30 C1                             call    SRM_update_hyperspace_cross_hair
 510+ C4F0 C9                                   ret
 511+ C4F1              ;----------------------------------------------------------------------------------------------------------------------------------
 512+ C4F1 2A E7 9E     src_HomePressed:        ld      hl,(PresentSystemX)
 513+ C4F4 22 E9 9E                             ld      (TargetSystemX),hl
 514+ C4F7 CD 30 C1                             call    SRM_update_hyperspace_cross_hair
 515+ C4FA C9                                   ret
 516+ C4FB              ;----------------------------------------------------------------------------------------------------------------------------------
 517+ C4FB 3A D4 9E     src_RecenterPressed:    ld      a,(Galaxy)      ; DEBUG as galaxy n is not working
 518+ C4FE                                      MMUSelectGalaxyA
 518+ C4FE ED 92 57    >                     nextreg GalaxyDataMMU,       a
 519+ C501 ED 4B E9 9E                          ld      bc,(TargetSystemX)
 520+ C505 CD 70 FB                             call    find_nearest_to_bc
 521+ C508 ED 43 E9 9E                          ld      (TargetSystemX),bc
 522+ C50C CD 30 C1                             call    SRM_update_hyperspace_cross_hair
 523+ C50F C9                                   ret
 524+ C510              ;----------------------------------------------------------------------------------------------------------------------------------
 525+ C510 AF           src_BoundsLimit:        xor     a
 526+ C511 C9                                   ret
 527+ C512
# file closed: ./Menus/short_range_chart_menu.asm
 729  C512              ; Bank 51
 730  C512
 731  C512                  SLOT    MenuGalChtAddr
 732  C512                  PAGE    BankMenuGalCht
 733  C512              	ORG     MenuGalChtAddr
 734  C000                  INCLUDE "./Menus//galactic_chart_menu.asm"
# file opened: ./Menus//galactic_chart_menu.asm
   1+ C000
   2+ C000 47 61 6C 61  galactic_chart_page_marker  DB "GalacticChrtPG51"
   2+ C004 63 74 69 63
   2+ C008 43 68 72 74
   2+ C00C 50 47 35 31
   3+ C010 40 02 3A AB  galactic_chart_boiler_text	DW $0240,TextBuffer
   4+ C014              galactic_chart_header		equ 13
   5+ C014              galactic_star_colour		equ 216
   6+ C014              galactic_star_colour2		equ 108
   7+ C014              galactic_chart_y_offset		equ $18
   8+ C014              galactic_chart_hyper_offset equ 4
   9+ C014              galactic_chart_hyper_x_offset equ 32 - 4
  10+ C014              galactic_chart_hyper_y_offset equ 32 - 4 + 24
  11+ C014 44 69 73 74  galactic_chart_distance     DB "Distance: "
  11+ C018 61 6E 63 65
  11+ C01C 3A 20
  12+ C01E 30 30 30     galactic_chart_dist_amount  DB "000"
  13+ C021 2E           galactic_chart_decimal      DB "."
  14+ C022 30           galactic_chart_fraction     DB "0"
  15+ C023 20 4C 69 67  galactic_chart_dis_ly       DB " Light Years",0
  15+ C027 68 74 20 59
  15+ C02B 65 61 72 73
  15+ C02F 00
  16+ C030 20 20 30 2E  galactic_default_dist       DB "  0.0",0
  16+ C034 30 00
  17+ C036
  18+ C036 00 00 00...  galactic_distance           DS  6
  19+ C03C
  20+ C03C              galactic_find_position      equ $B008
  21+ C03C 46 69 6E 64  galactic_find_message       DB "Find: ",0
  21+ C040 3A 20 00
  22+ C043              galactic_find_text          equ $B038
  23+ C043 20 20 20 20  galactic_blank_message      DB  "                    ",0
  23+ C047 20 20 20 20
  23+ C04B 20 20 20 20
  23+ C04F 20 20 20 20
  23+ C053 20 20 20 20
  23+ C057 00
  24+ C058 2A 2A 2D 2D  galactic_find_no_match      DB "**-- System Not Found --**",0
  24+ C05C 20 53 79 73
  24+ C060 74 65 6D 20
  24+ C064 4E 6F 74 20
  24+ C068 46 6F 75 6E
  24+ C06C 64 20 2D 2D
  24+ C070 2A 2A 00
  25+ C073 20 20 2A 2A  galactic_find_match         DB "  **-- System Found --**  ",0
  25+ C077 2D 2D 20 53
  25+ C07B 79 73 74 65
  25+ C07F 6D 20 46 6F
  25+ C083 75 6E 64 20
  25+ C087 2D 2D 2A 2A
  25+ C08B 20 20 00
  26+ C08E
  27+ C08E              GCM_print_boiler_text:
  28+ C08E                  INCLUDE "Menus/print_boiler_text_inlineInclude.asm"
# file opened: ./Menus/print_boiler_text_inlineInclude.asm
   1++C08E
   2++C08E              ;">print_boilder_text hl = text structure, b = message count"
   3++C08E              .BoilerTextLoop:
   4++C08E C5           	push		bc			; Save Message Count loop value
   5++C08F 4E           	ld			c,(hl)		; Get Row into b
   6++C090 23           	inc			hl
   7++C091 46           	ld			b,(hl)		; Get Col into b
   8++C092 23           	inc			hl
   9++C093 5E           	ld			e,(hl)		; Get text address Lo into E
  10++C094 23           	inc			hl
  11++C095 56           	ld			d,(hl)		; Get text address Hi into E
  12++C096 23           	inc			hl
  13++C097 E5           	push		hl			; Save present HL to stack as this is the address for the next message
  14++C098 EB           	ex			de,hl		; now hl = address of text data
  15++C099 1E FF        	ld			e,txt_status_colour
  16++C09B C5           	push		bc
  17++C09C D1           	pop			de
  18++C09D                  MMUSelectLayer1
  18++C09D ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
  19++C0A1 CD C8 E0     	call		l1_print_at
  20++C0A4 E1           	pop			hl
  21++C0A5 C1           	pop			bc
  22++C0A6 10 E6        	djnz		.BoilerTextLoop
  23++C0A8 C9           	ret
  24++C0A9
# file closed: ./Menus/print_boiler_text_inlineInclude.asm
  29+ C0A9              GCM_draw_chart_circle_and_crosshair:
  30+ C0A9 ED 4B E7 9E  	ld		bc,(PresentSystemX)				; bc = present system
  31+ C0AD              .OnGalacticChart:
  32+ C0AD CB 38        	srl		b								; but row is row / 2
  33+ C0AF C5           	push  	bc
  34+ C0B0              	MMUSelectSpriteBank
  34+ C0B0 ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
  35+ C0B4 CD 91 E0     	call	sprite_galactic_cursor
  36+ C0B7 C1           	pop		bc
  37+ C0B8 78           	ld		a,b
  38+ C0B9 C6 18        	add		a,galactic_chart_y_offset
  39+ C0BB 47           	ld		b,a
  40+ C0BC 3A 45 A3     	ld		a,(Fuel)
  41+ C0BF CB 3F        	srl		a
  42+ C0C1 CB 3F        	srl		a								; divide range of fuel by 4 for galactic chart
  43+ C0C3 57           	ld		d,a
  44+ C0C4 1E FF        	ld		e,$FF
  45+ C0C6              	MMUSelectLayer2
  45+ C0C6 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
  46+ C0CA CD AB E7     	call	l2_draw_circle
  47+ C0CD C9           	ret
  48+ C0CE              ; TODO MOVE CURSOR CODE
  49+ C0CE
  50+ C0CE ED 4B E9 9E  GCM_draw_hyperspace_cross_hair: ld		bc,(TargetSystemX)              ; bc = selected jump
  51+ C0D2 C5                                           push    bc
  52+ C0D3 CB 38                                        srl		b								; but row is row / 2
  53+ C0D5                                              MMUSelectSpriteBank
  53+ C0D5 ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
  54+ C0D9 CD 9D E0                                     call	sprite_galactic_hyper_cursor
  55+ C0DC C1                                           pop     bc
  56+ C0DD CD A9 E0                                     call	sprite_ghc_move
  57+ C0E0 C9                                           ret
  58+ C0E1
  59+ C0E1
  60+ C0E1 AF           plot_gc_stars:          xor		a
  61+ C0E2 32 E4 9D                             ld		(XSAV),a
  62+ C0E5 DD 21 16 E0                          ld      ix,galaxy_data
  63+ C0E9 3A D4 9E     .CounterLoop:           ld      a,(Galaxy)
  64+ C0EC                                      MMUSelectGalaxyA
  64+ C0EC ED 92 57    >                     nextreg GalaxyDataMMU,       a
  65+ C0EF DD E5                                push    ix
  66+ C0F1 E1                                   pop     hl
  67+ C0F2 11 CB 9D                             ld      de,SystemSeed
  68+ C0F5 CD D5 A3                             call    copy_seed
  69+ C0F8 3A CE 9D                             ld		a,(SystemSeed+3)				; QQ15+3 \ seed w1_h is Xcoord of star
  70+ C0FB 4F                                   ld		c,a								; c = X Coord
  71+ C0FC 3A CC 9D                             ld		a,(SystemSeed+1)
  72+ C0FF CB 3F                                srl		a								; Ycoord /2
  73+ C101 C6 18                                add		a,galactic_chart_y_offset		; add offset to Y coord of star
  74+ C103 47                                   ld		b,a								; b = row
  75+ C104 C5                                   push	bc
  76+ C105 3E D8                                ld		a,galactic_star_colour
  77+ C107                                      MMUSelectLayer2
  77+ C107 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
  78+ C10B CD 37 E1                             call	l2_plot_pixel
  79+ C10E C1                                   pop		bc
  80+ C10F 3A CF 9D                             ld		a,(SystemSeed+4)
  81+ C112 F6 50                                or		$50								; minimum distance away
  82+ C114 FE 90                                cp		$90
  83+ C116 30 0A                                jr		nc,.NoSecondPixel
  84+ C118 0C           .SecondPixel:           inc		c
  85+ C119 3E 6C                                ld		a,galactic_star_colour2
  86+ C11B                                      MMUSelectLayer2
  86+ C11B ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
  87+ C11F CD 37 E1                             call	l2_plot_pixel
  88+ C122 DD E5        .NoSecondPixel:         push    ix
  89+ C124 E1                                   pop     hl
  90+ C125 ED 34 08 00                          add     hl,8
  91+ C129 E5                                   push    hl
  92+ C12A DD E1                                pop     ix
  93+ C12C 3A E4 9D                             ld		a,(XSAV)
  94+ C12F 3D                                   dec		a
  95+ C130 FE 00                                cp		0
  96+ C132 C8                                   ret		z
  97+ C133 32 E4 9D                             ld		(XSAV),a
  98+ C136 18 B1                                jr		.CounterLoop
  99+ C138
 100+ C138 2A 2A 2A 2A  GALDP       DB "********++++++++"
 100+ C13C 2A 2A 2A 2A
 100+ C140 2B 2B 2B 2B
 100+ C144 2B 2B 2B 2B
 101+ C148              draw_galactic_chart_menu:   InitNoDoubleBuffer
 101+ C148             >                            MMUSelectLayer1
 101+ C148 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 101+ C14C CD 80 E0    >                            call	l1_cls
 101+ C14F 3E 07       >                            ld		a,7
 101+ C151 CD 9B E0    >                            call	l1_attr_cls_to_a
 101+ C154             >                            MMUSelectLayer2
 101+ C154 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 101+ C158 CD 09 E0    >                            call    asm_l2_double_buffer_off
 101+ C15B CD 01 E1    >                            call	l2_cls	; Get some space
 101+ C15E             >                            MMUSelectSpriteBank
 101+ C15E ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
 101+ C162 CD A4 E4    >                            call    sprite_cls_cursors
 102+ C165 DD 2E DC                                 ld      ixl,$DC
 103+ C168 3E 40                                    ld      a,$40
 104+ C16A 32 EA 9D                                 ld      (MenuIdMax),a
 105+ C16D 2A E7 9E                                 ld      hl,(PresentSystemX)
 106+ C170              ;                            ld      (TargetSystemX),hl
 107+ C170 CD 4C C4                                 call    gc_present_system               ; Set up the seed for present system
 108+ C173 01 01 01     .Drawbox:                   ld		bc,$0101
 109+ C176 11 FD BE                                 ld		de,$BEFD
 110+ C179 3E C0                                    ld		a,$C0
 111+ C17B                                          MMUSelectLayer2
 111+ C17B ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 112+ C17F CD 4B E2                                 call	l2_draw_box
 113+ C182 01 01 0A                                 ld		bc,$0A01
 114+ C185 11 C0 FE                                 ld		de,$FEC0
 115+ C188 CD B5 E2                                 call	l2_draw_horz_line
 116+ C18B 3E 0D        .StaticText:                ld		a,galactic_chart_header
 117+ C18D CD 7B AB                                 call	expandTokenToString
 118+ C190 06 01                                    ld		b,1
 119+ C192 21 10 C0                                 ld		hl,galactic_chart_boiler_text
 120+ C195 CD 8E C0                                 call	GCM_print_boiler_text
 121+ C198 CD A9 C0     .CircleandCrosshair:        call	GCM_draw_chart_circle_and_crosshair
 122+ C19B CD CE C0                                 call	GCM_draw_hyperspace_cross_hair
 123+ C19E CD E1 C0                                 call	plot_gc_stars
 124+ C1A1 3A D4 9E                                 ld      a,(Galaxy)
 125+ C1A4                                          MMUSelectGalaxyA
 125+ C1A4 ED 92 57    >                     nextreg GalaxyDataMMU,       a
 126+ C1A7 ED 4B E9 9E                              ld      bc,(TargetSystemX)
 127+ C1AB CD 64 FC                                 call    galaxy_system_under_cursor          ; TODO for some reason this bit
 128+ C1AE FE 00                                    cp      0                                   ; does not reset cursor on a miss
 129+ C1B0 20 11                                    jr      nz,.CurrentTargetIsValid
 130+ C1B2              .CurrentTargetIsInvalid:    CopyPresentSystemToTarget
 130+ C1B2 2A E7 9E    >                        ld      hl,(PresentSystemX)
 130+ C1B5 22 E9 9E    >                        ld      (TargetSystemX),hl
 131+ C1B8 ED 4B E9 9E                              ld      bc,(TargetSystemX)
 132+ C1BC                                          MMUSelectSpriteBank
 132+ C1BC ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
 133+ C1C0 CD A9 E0                                 call	sprite_ghc_move
 134+ C1C3 3A D4 9E     .CurrentTargetIsValid:      ld      a,(Galaxy)
 135+ C1C6                                          MMUSelectGalaxyA
 135+ C1C6 ED 92 57    >                     nextreg GalaxyDataMMU,       a
 136+ C1C9 ED 43 5B E8                              ld      (GalaxyTargetSystem),bc
 137+ C1CD CD 64 FC                                 call    galaxy_system_under_cursor
 138+ C1D0 CD A4 C3                                 call    gc_name_if_possible
 139+ C1D3                                          SetMemFalse TextInputMode
 139+ C1D3 3E FF       >                        ld      a,$FF
 139+ C1D5 32 CA 9E    >                        ld      (TextInputMode),a
 140+ C1D8 C9                                       ret
 141+ C1D9
 142+ C1D9              gcDelayVal                  equ $0A
 143+ C1D9              gcBlinkVal                  equ $10
 144+ C1D9
 145+ C1D9
 146+ C1D9 10           gcCursorBlink               DB  gcBlinkVal
 147+ C1DA 20           gcCursorChar                DB  " "
 148+ C1DB 00           gcEndOfString               DB  0
 149+ C1DC 00 00 00...  gcInputText                 DS  31
 150+ C1FB 00 00 00 00                              DB  0,0,0,0,0
 150+ C1FF 00
 151+ C200 00 00 00...  gcBlank                     DS  32
 152+ C220
 153+ C220              ;----------------------------------------------------------------------------------------------------------------------------------
 154+ C220 11 08 B0     gc_display_find_text:   ld		de,galactic_find_position   ; Wipe input area on screen
 155+ C223 21 3C C0                             ld      hl,galactic_find_message
 156+ C226                                      MMUSelectLayer1
 156+ C226 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 157+ C22A CD C8 E0                             call	l1_print_at
 158+ C22D C9                                   ret
 159+ C22E              ;----------------------------------------------------------------------------------------------------------------------------------
 160+ C22E 11 DC C1     gc_display_find_string: ld      de,gcInputText
 161+ C231 CD 6F 9B                             call    keyboard_copy_input_to_de
 162+ C234 21 DA C1                             ld      hl,gcCursorChar         ; Now just copy cursor char too
 163+ C237 ED A0                                ldi                             ; Copy cursor to local
 164+ C239 3A 6C 9B                             ld      a,(InputCursor)
 165+ C23C 3C                                   inc     a
 166+ C23D 47                                   ld      b,a
 167+ C23E 3E 14                                ld      a,20
 168+ C240 90                                   sub     b
 169+ C241 47                                   ld      b,a
 170+ C242 3E 20                                ld      a," "
 171+ C244 12           .SpacePad:              ld      (de),a
 172+ C245 13                                   inc     de
 173+ C246 10 FC                                djnz    .SpacePad
 174+ C248 AF                                   xor     a
 175+ C249 12                                   ld      (de),a
 176+ C24A 11 38 B0                             ld		de,galactic_find_text    ; Display text
 177+ C24D 21 DC C1                             ld      hl,gcInputText
 178+ C250                                      MMUSelectLayer1
 178+ C250 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 179+ C254 CD C8 E0                             call	l1_print_at
 180+ C257 C9                                   ret
 181+ C258
 182+ C258 3A D9 C1     blink_cursor:           ld      a,(gcCursorBlink)
 183+ C25B 3D                                   dec     a
 184+ C25C 32 D9 C1                             ld      (gcCursorBlink),a
 185+ C25F C0                                   ret     nz
 186+ C260 3E 10        .FlashCursor:           ld      a,gcBlinkVal
 187+ C262 32 D9 C1                             ld      (gcCursorBlink),a
 188+ C265 3A DA C1                             ld      a,(gcCursorChar)
 189+ C268 FE 20                                cp      " "
 190+ C26A 28 06                                jr      z,.ChangeToStar
 191+ C26C 3E 20                                ld      a," "
 192+ C26E 32 DA C1                             ld      (gcCursorChar),a
 193+ C271 C9                                   ret
 194+ C272 3E 2A        .ChangeToStar:          ld      a,"*"
 195+ C274 32 DA C1                             ld      (gcCursorChar),a
 196+ C277 C9                                   ret
 197+ C278              ;----------------------------------------------------------------------------------------------------------------------------------
 198+ C278              ; The main loop handles the find key
 199+ C278              loop_gc_menu:           JumpIfMemTrue TextInputMode,AlreadyInInputMode  ;if we are in input mode then go directly there
 199+ C278 3A CA 9E    >                        ld      a,(TextInputMode)
 199+ C27B A7          >                        and     a
 199+ C27C CA 95 C2    >                        jp      z, AlreadyInInputMode
 200+ C27F 3E 4E        .StartFindCheck:        ld      a,c_Pressed_Find                        ;Is F pressed
 201+ C281 CD 0A 9B                             call    is_key_pressed
 202+ C284 C0                                   ret     nz                                      ;the main loop handles find key
 203+ C285 CD 82 9B                             call    initInputText                           ;Initialise find input
 204+ C288                                      SetMemTrue TextInputMode                        ;Set input mode to true
 204+ C288 AF          >                        xor     a
 204+ C289 32 CA 9E    >                        ld      (TextInputMode),a
 205+ C28C                                      SetMemToN gcCursorBlink, gcBlinkVal             ; set up blink
 205+ C28C 3E 10       >                        ld      a,gcBlinkVal
 205+ C28E 32 D9 C1    >                        ld      (gcCursorBlink),a
 206+ C291 CD 20 C2     .DisplayInputbar:       call    gc_display_find_text                    ; now prep the boiler plate input text
 207+ C294 C9                                   ret                                             ; and exit so next interation handles new input as we have to rescan keyboard
 208+ C295              ;Already in input mode post pressing find
 209+ C295 CD 9A 9B     AlreadyInInputMode:     call    InputName                               ; Call input routine to parse a key
 210+ C298                                      JumpIfMemFalse InputChanged, .blinkNoDelay      ; no key they bypass rest of input
 210+ C298 3A 6E 9B    >                        ld      a,(InputChanged)
 210+ C29B A7          >                        and     a
 210+ C29C C2 A9 C2    >                        jp      nz, .blinkNoDelay
 211+ C29F              .WasItEnter:            JumpIfMemTrue EnterPressed, .FindEnterPressed   ; if enter was pressed then find
 211+ C29F 3A 6D 9B    >                        ld      a,(EnterPressed)
 211+ C2A2 A7          >                        and     a
 211+ C2A3 CA B5 C2    >                        jp      z, .FindEnterPressed
 212+ C2A6 CD 2E C2                             call    gc_display_find_string                  ; update string
 213+ C2A9 CD 58 C2     .blinkNoDelay:          call    blink_cursor
 214+ C2AC                                      CallIfMemEqNusng    gcCursorBlink, gcBlinkVal, gc_display_find_string ; on blink we get a double update but we can live with that
 214+ C2AC 3A D9 C1    >                        ld   a,(gcCursorBlink)
 214+ C2AF FE 10       >                        cp   gcBlinkVal
 214+ C2B1 CC 2E C2    >                        call    z,gc_display_find_string
 215+ C2B4 C9                                   ret
 216+ C2B5              .FindEnterPressed:      SetMemFalse EnterPressed                        ; reset enter
 216+ C2B5 3E FF       >                        ld      a,$FF
 216+ C2B7 32 6D 9B    >                        ld      (EnterPressed),a
 217+ C2BA                                      SetMemFalse TextInputMode                       ; leave input mode
 217+ C2BA 3E FF       >                        ld      a,$FF
 217+ C2BC 32 CA 9E    >                        ld      (TextInputMode),a
 218+ C2BF 3A D4 9E                             ld      a,(Galaxy)                              ; Fetch correct galaxy seed bank into memory
 219+ C2C2                                      MMUSelectGalaxyA
 219+ C2C2 ED 92 57    >                     nextreg GalaxyDataMMU,       a
 220+ C2C5 21 4D 9B                             ld      hl,InputString
 221+ C2C8 11 5E E8                             ld      de,GalaxySearchString
 222+ C2CB CD D0 F6                             call    GalaxyCopyLoop
 223+ C2CE CD 39 FB                             call    find_system_by_name
 224+ C2D1 FE FF                                cp      $FF                                     ; 0 denotes found FF, failure
 225+ C2D3 28 1D                                jr      z,.FindNoMatch
 226+ C2D5 3A FB E8                             ld      a,(GalaxyWorkingSeed+3)
 227+ C2D8 4F                                   ld      c,a
 228+ C2D9 3A F9 E8                             ld      a,(GalaxyWorkingSeed+1)
 229+ C2DC 47                                   ld      b,a
 230+ C2DD ED 43 E9 9E                          ld      (TargetSystemX),bc
 231+ C2E1 CD 85 C3                             call    UpdateGalacticCursor
 232+ C2E4 11 08 B0                             ld		de,galactic_find_position               ; Wipe input area on screen
 233+ C2E7 21 73 C0                             ld      hl,galactic_find_match
 234+ C2EA                                      MMUSelectLayer1
 234+ C2EA ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 235+ C2EE CD C8 E0                             call	l1_print_at
 236+ C2F1 C9                                   ret
 237+ C2F2              .FindNoMatch:           ; if not found display "Not found"
 238+ C2F2                                      ; move curor if found
 239+ C2F2 11 08 B0                             ld		de,galactic_find_position   ; Wipe input area on screen
 240+ C2F5 21 58 C0                             ld      hl,galactic_find_no_match
 241+ C2F8                                      MMUSelectLayer1
 241+ C2F8 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 242+ C2FC CD C8 E0                             call	l1_print_at
 243+ C2FF C9                                   ret; DOSTUFFHERE
 244+ C300              ;----------------------------------------------------------------------------------------------------------------------------------
 245+ C300              galctic_chart_cursors:  ReturnIfMemTrue TextInputMode
 245+ C300 3A CA 9E    >                        ld      a,(TextInputMode)
 245+ C303 A7          >                        and     a
 245+ C304 C8          >                        ret     z
 246+ C305 3A CB 9E                             ld      a,(CursorKeysPressed)
 247+ C308 FE 00                                cp      0
 248+ C30A C8                                   ret     z
 249+ C30B 17                                   rla
 250+ C30C DC 24 C3                             call   c,gc_UpPressed
 251+ C30F 17                                   rla
 252+ C310 DC 34 C3                             call   c,gc_DownPressed
 253+ C313 17                                   rla
 254+ C314 DC 44 C3                             call   c,gc_LeftPressed
 255+ C317 17                                   rla
 256+ C318 DC 54 C3                             call   c,gc_RightPressed
 257+ C31B 17                                   rla
 258+ C31C DC 64 C3                             call   c,gc_HomePressed
 259+ C31F 17                                   rla
 260+ C320 DC 6E C3                             call   c,gc_RecenterPressed
 261+ C323 C9                                   ret
 262+ C324              ;----------------------------------------------------------------------------------------------------------------------------------
 263+ C324 3A EA 9E     gc_UpPressed:           ld     a,(TargetSystemX+1)
 264+ C327                                      JumpIfAEqNusng 1,gc_BoundsLimit
 264+ C327 FE 01       >                        cp     1
 264+ C329 CA 83 C3    >                        jp      z,gc_BoundsLimit
 265+ C32C 3D                                   dec     a
 266+ C32D 32 EA 9E                             ld      (TargetSystemX+1),a
 267+ C330 CD 85 C3                             call    UpdateGalacticCursor
 268+ C333 C9                                   ret
 269+ C334              ;----------------------------------------------------------------------------------------------------------------------------------
 270+ C334 3A EA 9E     gc_DownPressed:         ld     a,(TargetSystemX+1)
 271+ C337                                      JumpIfAEqNusng 255,gc_BoundsLimit
 271+ C337 FE FF       >                        cp     255
 271+ C339 CA 83 C3    >                        jp      z,gc_BoundsLimit
 272+ C33C 3C                                   inc    a
 273+ C33D 32 EA 9E                             ld      (TargetSystemX+1),a
 274+ C340 CD 85 C3                             call    UpdateGalacticCursor
 275+ C343 C9                                   ret
 276+ C344              ;----------------------------------------------------------------------------------------------------------------------------------
 277+ C344 3A E9 9E     gc_LeftPressed:         ld     a,(TargetSystemX)
 278+ C347                                      JumpIfAEqNusng 2,gc_BoundsLimit
 278+ C347 FE 02       >                        cp     2
 278+ C349 CA 83 C3    >                        jp      z,gc_BoundsLimit
 279+ C34C 3D                                   dec    a
 280+ C34D 32 E9 9E                             ld      (TargetSystemX),a
 281+ C350 CD 85 C3                             call    UpdateGalacticCursor
 282+ C353 C9                                   ret
 283+ C354              ;----------------------------------------------------------------------------------------------------------------------------------
 284+ C354 3A E9 9E     gc_RightPressed:        ld     a,(TargetSystemX)
 285+ C357                                      JumpIfAEqNusng 253,gc_BoundsLimit
 285+ C357 FE FD       >                        cp     253
 285+ C359 CA 83 C3    >                        jp      z,gc_BoundsLimit
 286+ C35C 3C                                   inc    a
 287+ C35D 32 E9 9E                             ld      (TargetSystemX),a
 288+ C360 CD 85 C3                             call    UpdateGalacticCursor
 289+ C363 C9                                   ret
 290+ C364              ;----------------------------------------------------------------------------------------------------------------------------------
 291+ C364 2A E7 9E     gc_HomePressed:         ld      hl,(PresentSystemX)
 292+ C367 22 E9 9E                             ld      (TargetSystemX),hl
 293+ C36A CD 85 C3                             call    UpdateGalacticCursor
 294+ C36D C9                                   ret
 295+ C36E              ;----------------------------------------------------------------------------------------------------------------------------------
 296+ C36E 3A D4 9E     gc_RecenterPressed:     ld      a,(Galaxy)       ; DEBUG as galaxy n is not working
 297+ C371                                      MMUSelectGalaxyA
 297+ C371 ED 92 57    >                     nextreg GalaxyDataMMU,       a
 298+ C374 ED 4B E9 9E                          ld      bc,(TargetSystemX)
 299+ C378 CD 70 FB                             call    find_nearest_to_bc
 300+ C37B ED 43 E9 9E                          ld      (TargetSystemX),bc
 301+ C37F CD 85 C3                             call    UpdateGalacticCursor
 302+ C382 C9                                   ret
 303+ C383              ;----------------------------------------------------------------------------------------------------------------------------------
 304+ C383 AF           gc_BoundsLimit          xor     a
 305+ C384 C9                                   ret
 306+ C385
 307+ C385              ;----------------------------------------------------------------------------------------------------------------------------------
 308+ C385 ED 4B E9 9E  UpdateGalacticCursor:   ld		bc,(TargetSystemX)              ; bc = selected jump
 309+ C389              OnGalacticChart:        MMUSelectSpriteBank
 309+ C389 ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
 310+ C38D CD A9 E0                             call	sprite_ghc_move
 311+ C390 3A D4 9E                             ld      a,(Galaxy)
 312+ C393                                      MMUSelectGalaxyA
 312+ C393 ED 92 57    >                     nextreg GalaxyDataMMU,       a
 313+ C396 ED 4B E9 9E                          ld      bc,(TargetSystemX)
 314+ C39A ED 43 5B E8                          ld      (GalaxyTargetSystem),bc
 315+ C39E CD 64 FC                             call    galaxy_system_under_cursor
 316+ C3A1 FE 00                                cp      0
 317+ C3A3 C8                                   ret     z
 318+ C3A4              ; just fall into gc_name_if_possible
 319+ C3A4 CD 82 F6     gc_name_if_possible:    call	GetDigramWorkingSeed
 320+ C3A7 CD D2 C3                             call    gc_clear_name_area
 321+ C3AA 21 00 AC                             ld		hl,name_expanded
 322+ C3AD CD 5B AB                             call	CapitaliseString
 323+ C3B0 21 00 AC                             ld		hl, name_expanded
 324+ C3B3 01 0A A0                             ld      bc,$A00A
 325+ C3B6 1E FF                                ld		e,$FF
 326+ C3B8                                      MMUSelectLayer2
 326+ C3B8 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 327+ C3BC CD 24 E2                             call	l2_print_7at
 328+ C3BF CD EC C3                             call    gc_calc_distance
 329+ C3C2 21 14 C0                             ld      hl,galactic_chart_distance
 330+ C3C5 01 0A A8                             ld      bc,$A80A
 331+ C3C8 1E FF                                ld		e,$FF
 332+ C3CA                                      MMUSelectLayer2
 332+ C3CA ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 333+ C3CE CD 24 E2                             call	l2_print_7at
 334+ C3D1 C9                                   ret
 335+ C3D2              ;----------------------------------------------------------------------------------------------------------------------------------
 336+ C3D2 26 08        gc_clear_name_area:     ld      h,8
 337+ C3D4 11 E3 A0                             ld      de,$A000 | COLOUR_TRANSPARENT
 338+ C3D7 01 0A A0                             ld      bc,$A00A
 339+ C3DA E5           .ClearLoop:             push    hl
 340+ C3DB D5                                   push    de
 341+ C3DC C5                                   push    bc
 342+ C3DD                                      MMUSelectLayer2
 342+ C3DD ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 343+ C3E1 CD B5 E2                             call	l2_draw_horz_line
 344+ C3E4 C1                                   pop     bc
 345+ C3E5 D1                                   pop     de
 346+ C3E6 E1                                   pop     hl
 347+ C3E7 04                                   inc     b
 348+ C3E8 25                                   dec     h
 349+ C3E9 20 EF                                jr      nz,.ClearLoop
 350+ C3EB C9                                   ret
 351+ C3EC              ;----------------------------------------------------------------------------------------------------------------------------------
 352+ C3EC 3A D4 9E     gc_calc_distance:       ld      a,(Galaxy)
 353+ C3EF                                      MMUSelectGalaxyA
 353+ C3EF ED 92 57    >                     nextreg GalaxyDataMMU,       a
 354+ C3F2 11 1E C0                             ld      de,galactic_chart_dist_amount
 355+ C3F5 21 30 C0                             ld      hl,galactic_default_dist
 356+ C3F8 ED A0                                ldi
 357+ C3FA ED A0                                ldi
 358+ C3FC ED A0                                ldi
 359+ C3FE ED A0                                ldi
 360+ C400 ED A0                                ldi
 361+ C402 ED 4B E7 9E                          ld      bc,(PresentSystemX)
 362+ C406 ED 43 57 E8                          ld      (GalaxyPresentSystem),bc
 363+ C40A ED 4B E9 9E                          ld      bc,(TargetSystemX)
 364+ C40E ED 43 59 E8                          ld      (GalaxyDestinationSystem),bc
 365+ C412 CD F7 FB                             call    galaxy_find_distance            ; get distance into HL
 366+ C415 DD 2A 70 9E                          ld      ix,(Distance)
 367+ C419 11 00 00                             ld      de,0
 368+ C41C FD 21 36 C0                          ld      iy,galactic_distance
 369+ C420 CD 2F B5                             call    DispDEIXtoIY
 370+ C423 FD E5                                push    iy
 371+ C425 E1                                   pop     hl
 372+ C426 11 36 C0                             ld      de,galactic_distance
 373+ C429 7E                                   ld		a,(hl)				;Push last digit to post decimal
 374+ C42A 32 22 C0                             ld		(galactic_chart_fraction),a
 375+ C42D 2B                                   dec     hl
 376+ C42E CD 53 B3                             call    compare16HLDE
 377+ C431 38 18                                jr      c,.done_number
 378+ C433 7E                                   ld      a,(hl)
 379+ C434 32 20 C0                             ld      (galactic_chart_dist_amount+2),a
 380+ C437 2B                                   dec     hl
 381+ C438 CD 53 B3                             call    compare16HLDE
 382+ C43B 38 0E                                jr      c,.done_number
 383+ C43D 7E                                   ld      a,(hl)
 384+ C43E 32 1F C0                             ld      (galactic_chart_dist_amount+1),a
 385+ C441 2B                                   dec     hl
 386+ C442 CD 53 B3                             call    compare16HLDE
 387+ C445 38 04                                jr      c,.done_number
 388+ C447 7E                                   ld      a,(hl)
 389+ C448 32 1E C0                             ld      (galactic_chart_dist_amount),a
 390+ C44B C9           .done_number:           ret
 391+ C44C              ;----------------------------------------------------------------------------------------------------------------------------------
 392+ C44C AF           gc_present_system:      xor     a
 393+ C44D 32 E4 9D                             ld		(XSAV),a
 394+ C450 DD 21 16 E0                          ld      ix,galaxy_data
 395+ C454 3A D4 9E     GCCounterLoop:          ld      a,(Galaxy)
 396+ C457                                      MMUSelectGalaxyA
 396+ C457 ED 92 57    >                     nextreg GalaxyDataMMU,       a
 397+ C45A 2A E7 9E                             ld      hl,(PresentSystemX)
 398+ C45D DD E5                                push    ix
 399+ C45F 7D                                   ld      a,l
 400+ C460 DD BE 03                             cp      (ix+3)                          ; seed x
 401+ C463 20 14                                jr      nz,.ItsNotThisX
 402+ C465 7C                                   ld      a,h
 403+ C466 DD BE 01                             cp      (ix+1)                          ; seed x
 404+ C469 20 0E        .FoundSystem:           jr      nz,.ItsNotThisX
 405+ C46B DD E5                                push    ix
 406+ C46D E1                                   pop     hl
 407+ C46E 11 DB 9E                             ld      de,PresentSystemSeeds
 408+ C471 CD D5 A3                             call    copy_seed
 409+ C474 3E FF                                ld      a,$FF
 410+ C476 DD E1                                pop     ix
 411+ C478 C9                                   ret
 412+ C479 E1           .ItsNotThisX:           pop     hl
 413+ C47A ED 34 08 00                          add     hl,8
 414+ C47E E5                                   push    hl
 415+ C47F DD E1                                pop     ix
 416+ C481 3A E4 9D                             ld		a,(XSAV)
 417+ C484 3D                                   dec		a
 418+ C485 32 E4 9D                             ld      (XSAV),a
 419+ C488 FE 00                                cp		0
 420+ C48A C8                                   ret		z
 421+ C48B 18 C7                                jr		GCCounterLoop
 422+ C48D
# file closed: ./Menus//galactic_chart_menu.asm
 735  C48D              ; Bank 52
 736  C48D
 737  C48D                  SLOT    MenuInventAddr
 738  C48D                  PAGE    BankMenuInvent
 739  C48D              	ORG     MenuInventAddr
 740  C000                  INCLUDE "./Menus/inventory_menu.asm"
# file opened: ./Menus/inventory_menu.asm
   1+ C000 49 6E 76 65  ivnentory_page_marker   DB "Inventory   PG52"
   1+ C004 6E 74 6F 72
   1+ C008 79 20 20 20
   1+ C00C 50 47 35 32
   2+ C010 48 02 1C C0  inventory_boiler_text	DW $0248,INM_inventory
   3+ C014 08 0B 26 C0  						DW $0B08,INM_fuel
   4+ C018 08 13 2C C0  						DW $1308,INM_cash
   5+ C01C
   6+ C01C 49 4E 56 45  INM_inventory 			DB "INVENTORY",0
   6+ C020 4E 54 4F 52
   6+ C024 59 00
   7+ C026 46 75 65 6C  INM_fuel				DB "Fuel:",0
   7+ C02A 3A 00
   8+ C02C 43 61 73 68  INM_cash				DB "Cash:",0
   8+ C030 3A 00
   9+ C032
  10+ C032 30 30 30 30  txt_inventory_amount	DB "00000",0
  10+ C036 30 00
  11+ C038 00 00        inventory_cursor		DW $0000
  12+ C03A              inv_fuel_position		equ	$0B30
  13+ C03A              inv_cash_position		equ	$1330
  14+ C03A
  15+ C03A              inventory_position		equ $2008
  16+ C03A              inventory_amount		equ $80
  17+ C03A              inventory_uom			equ	$B0
  18+ C03A 00           inv_selected_row        DB 0
  19+ C03B
  20+ C03B 00 00 00...  INM_cash_amount			DS 10
  21+ C045 20 43 72 00  INM_cash_UoM            DB " Cr",0
  22+ C049
  23+ C049 26 00        INM_DispAtoDE:          ld h,0
  24+ C04B 6F                                   ld l,a
  25+ C04C 01 F0 D8                             ld	bc,-10000
  26+ C04F CD 65 C0                             call	.Num1
  27+ C052 01 18 FC                             ld	bc,-1000
  28+ C055 CD 65 C0                             call	.Num1
  29+ C058 01 9C FF                             ld	bc,-100
  30+ C05B CD 65 C0                             call	.Num1
  31+ C05E 0E F6                                ld	c,-10
  32+ C060 CD 65 C0                             call	.Num1
  33+ C063 0E FF                                ld	c,-1
  34+ C065 3E 2F        .Num1:	                ld	a,'0'-1
  35+ C067 3C           .Num2:	                inc	a
  36+ C068 09                                   add	hl,bc
  37+ C069 38 FC                                jr	c,.Num2
  38+ C06B ED 42                                sbc	hl,bc
  39+ C06D 12                                   ld	(de),a
  40+ C06E 13                                   inc	de
  41+ C06F C9                                   ret
  42+ C070
  43+ C070              INM_print_boiler_text:  INCLUDE "Menus/print_boiler_text_inlineInclude.asm"
# file opened: ./Menus/print_boiler_text_inlineInclude.asm
   1++C070
   2++C070              ;">print_boilder_text hl = text structure, b = message count"
   3++C070              .BoilerTextLoop:
   4++C070 C5           	push		bc			; Save Message Count loop value
   5++C071 4E           	ld			c,(hl)		; Get Row into b
   6++C072 23           	inc			hl
   7++C073 46           	ld			b,(hl)		; Get Col into b
   8++C074 23           	inc			hl
   9++C075 5E           	ld			e,(hl)		; Get text address Lo into E
  10++C076 23           	inc			hl
  11++C077 56           	ld			d,(hl)		; Get text address Hi into E
  12++C078 23           	inc			hl
  13++C079 E5           	push		hl			; Save present HL to stack as this is the address for the next message
  14++C07A EB           	ex			de,hl		; now hl = address of text data
  15++C07B 1E FF        	ld			e,txt_status_colour
  16++C07D C5           	push		bc
  17++C07E D1           	pop			de
  18++C07F                  MMUSelectLayer1
  18++C07F ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
  19++C083 CD C8 E0     	call		l1_print_at
  20++C086 E1           	pop			hl
  21++C087 C1           	pop			bc
  22++C088 10 E6        	djnz		.BoilerTextLoop
  23++C08A C9           	ret
  24++C08B
# file closed: ./Menus/print_boiler_text_inlineInclude.asm
  44+ C08B
  45+ C08B DD 22 2F C1  INM_DispDEIXtoIY:       ld (.inmclcn32z),ix
  46+ C08F ED 53 31 C1                          ld (.inmclcn32zIX),de
  47+ C093 DD 21 2B C1                          ld ix,.inmclcn32t+36
  48+ C097 06 09                                ld b,9
  49+ C099 0E 00                                ld c,0
  50+ C09B 3E 30        .inmclcn321:            ld a,'0'
  51+ C09D B7                                   or a
  52+ C09E DD 5E 00     .inmclcn322:            ld e,(ix+0)
  53+ C0A1 DD 56 01                             ld d,(ix+1)
  54+ C0A4 2A 2F C1                             ld hl,(.inmclcn32z)
  55+ C0A7 ED 52                                sbc hl,de
  56+ C0A9 22 2F C1                             ld (.inmclcn32z),hl
  57+ C0AC DD 5E 02                             ld e,(ix+2)
  58+ C0AF DD 56 03                             ld d,(ix+3)
  59+ C0B2 2A 31 C1                             ld hl,(.inmclcn32zIX)
  60+ C0B5 ED 52                                sbc hl,de
  61+ C0B7 22 31 C1                             ld (.inmclcn32zIX),hl
  62+ C0BA 38 04                                jr c,.inmclcn325
  63+ C0BC 0C                                   inc c
  64+ C0BD 3C                                   inc a
  65+ C0BE 18 DE                                jr .inmclcn322
  66+ C0C0 DD 5E 00     .inmclcn325:            ld e,(ix+0)
  67+ C0C3 DD 56 01                             ld d,(ix+1)
  68+ C0C6 2A 2F C1                             ld hl,(.inmclcn32z)
  69+ C0C9 19                                   add hl,de
  70+ C0CA 22 2F C1                             ld (.inmclcn32z),hl
  71+ C0CD DD 5E 02                             ld e,(ix+2)
  72+ C0D0 DD 56 03                             ld d,(ix+3)
  73+ C0D3 2A 31 C1                             ld hl,(.inmclcn32zIX)
  74+ C0D6 ED 5A                                adc hl,de
  75+ C0D8 22 31 C1                             ld (.inmclcn32zIX),hl
  76+ C0DB 11 FC FF                             ld de,-4
  77+ C0DE DD 19                                add ix,de
  78+ C0E0 0C                                   inc c
  79+ C0E1 0D                                   dec c
  80+ C0E2 28 05                                jr z,.inmclcn323
  81+ C0E4 FD 77 00                             ld (iy+0),a
  82+ C0E7 FD 23                                inc iy
  83+ C0E9 10 B0        .inmclcn323:            djnz .inmclcn321
  84+ C0EB 3A 2F C1                             ld a,(.inmclcn32z)
  85+ C0EE C6 30                                add A,'0'
  86+ C0F0 FD 77 00                             ld (iy+0),a
  87+ C0F3 FD 36 02 00                          ld (iy+2),0
  88+ C0F7 FD 7E 00                             ld      a,(IY+0)
  89+ C0FA FD 77 01                             ld      (IY+1),a
  90+ C0FD 3E 2E                                ld      a,"."
  91+ C0FF FD 77 00                             ld      (IY+0),a
  92+ C102 FD 23                                inc     IY
  93+ C104 FD 23                                inc     IY
  94+ C106 C9                                   ret
  95+ C107 01 00 00 00  .inmclcn32t             dw 1,0,     10,0,     100,0,     1000,0,       10000,0
  95+ C10B 0A 00 00 00
  95+ C10F 64 00 00 00
  95+ C113 E8 03 00 00
  95+ C117 10 27 00 00
  96+ C11B A0 86 01 00                          dw $86a0,1, $4240,$0f, $9680,$98, $e100,$05f5, $ca00,$3b9a
  96+ C11F 40 42 0F 00
  96+ C123 80 96 98 00
  96+ C127 00 E1 F5 05
  96+ C12B 00 CA 9A 3B
  97+ C12F 00 00        .inmclcn32z             ds 2
  98+ C131 00 00        .inmclcn32zIX           ds 2
  99+ C133
 100+ C133              INM_GetFuelLevel:       INCLUDE "Menus/get_fuel_level_inlineinclude.asm"
# file opened: ./Menus/get_fuel_level_inlineinclude.asm
   1++C133
   2++C133
   3++C133 3A 45 A3     	ld		a,(Fuel)
   4++C136 11 E1 BD     	ld		de,txt_fuel_level
   5++C139 0E 9C        	ld	c, -100
   6++C13B CD 45 C1     	call	.Num1
   7++C13E 0E F6        	ld	c,-10
   8++C140 CD 45 C1     	call	.Num1
   9++C143 0E FF        	ld	c,-1
  10++C145              .Num1:
  11++C145 06 2F        	ld	b,'0'-1
  12++C147              .Num2:
  13++C147 04           	inc		b
  14++C148 81           	add		a,c
  15++C149 38 FC        	jr		c,.Num2
  16++C14B 91           	sub 	c
  17++C14C C5           	push	bc
  18++C14D F5           	push	af
  19++C14E 79           	ld		a,c
  20++C14F FE FF        	cp		-1
  21++C151 CC 5A C1     	call	z,.InsertDot
  22++C154 78           	ld		a,b
  23++C155 12           	ld		(de),a
  24++C156 13           	inc		de
  25++C157 F1           	pop		af
  26++C158 C1           	pop		bc
  27++C159 C9           	ret
  28++C15A              .InsertDot:
  29++C15A 3E 2E        	ld		a,'.'
  30++C15C 12           	ld		(de),a
  31++C15D 13           	inc		de
  32++C15E C9           	ret
  33++C15F
# file closed: ./Menus/get_fuel_level_inlineinclude.asm
 101+ C15F
 102+ C15F              ; "A = stock item number"
 103+ C15F              ;----------------------------------------------------------------------------------------------------------------------------------
 104+ C15F 47           PrintInvItem:           ld		b,a
 105+ C160 21 48 A3                             ld		hl,CargoTonnes
 106+ C163 ED 31                                add		hl,a
 107+ C165 7E                                   ld		a,(hl)
 108+ C166 4F                                   ld		c,a
 109+ C167 FE 00                                cp		0
 110+ C169 C8                                   ret		z
 111+ C16A 78                                   ld		a,b
 112+ C16B C5                                   push	bc						; push item nbr + quantity
 113+ C16C                                      MMUSelectStockTable
 113+ C16C ED 91 57 37 >                     nextreg StockTableMMU,     BankStockTable
 114+ C170 21 88 E0                             ld		hl, StockItemTable
 115+ C173 CD B3 A6                             call	getTableText
 116+ C176 7E           .ItemItemName           ld		a,(hl)
 117+ C177 21 DE A9                             ld		hl, WordIdx
 118+ C17A CD B3 A6                             call	getTableText
 119+ C17D ED 5B 38 C0                          ld		de,(inventory_cursor)
 120+ C181                                      MMUSelectLayer1
 120+ C181 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 121+ C185 CD C8 E0                             call	l1_print_at
 122+ C188 C1           .ItemAmount:            pop		bc						; b = item number, c = quantity
 123+ C189 C5                                   push	bc
 124+ C18A 79                                   ld		a,c
 125+ C18B 11 32 C0                             ld		de,txt_inventory_amount
 126+ C18E CD 49 C0                             call	INM_DispAtoDE
 127+ C191 21 32 C0                             ld		hl,txt_inventory_amount
 128+ C194 E5                                   push	hl
 129+ C195 7E           .ZeroLoop:              ld		a,(hl)
 130+ C196 FE 30                                cp		'0'
 131+ C198 20 05                                jr		nz,.NotZero
 132+ C19A 36 20        .ZeroDigit:             ld		(hl),' '
 133+ C19C 23                                   inc		hl
 134+ C19D 18 F6                                jr		.ZeroLoop
 135+ C19F ED 5B 38 C0  .NotZero:               ld		de,(inventory_cursor)
 136+ C1A3 E1                                   pop		hl
 137+ C1A4 1E 80                                ld		e,inventory_amount
 138+ C1A6                                      MMUSelectLayer1
 138+ C1A6 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 139+ C1AA CD C8 E0                             call	l1_print_at
 140+ C1AD              .ItemMeasure:	        MMUSelectStockTable
 140+ C1AD ED 91 57 37 >                     nextreg StockTableMMU,     BankStockTable
 141+ C1B1 21 88 E0                             ld		hl, StockItemTable
 142+ C1B4 C1                                   pop		bc
 143+ C1B5 78                                   ld		a,b
 144+ C1B6 CD B3 A6                             call	getTableText
 145+ C1B9 ED 34 07 00                          add		hl,7
 146+ C1BD 7E                                   ld		a,(hl)
 147+ C1BE 21 DE A9                             ld		hl,WordIdx
 148+ C1C1 CD B3 A6                             call	getTableText
 149+ C1C4 ED 5B 38 C0                          ld		de,(inventory_cursor)
 150+ C1C8 1E B0                                ld		e,inventory_uom
 151+ C1CA                                      MMUSelectLayer1
 151+ C1CA ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 152+ C1CE CD C8 E0                             call	l1_print_at
 153+ C1D1 3A 39 C0                             ld 		a,(inventory_cursor+1)
 154+ C1D4 C6 08                                add		a,8
 155+ C1D6 32 39 C0                             ld 		(inventory_cursor+1),a
 156+ C1D9 C9                                   ret
 157+ C1DA              ;----------------------------------------------------------------------------------------------------------------------------------
 158+ C1DA 2A 43 A3     INM_GetCash:            ld		hl,(Cash+2)
 159+ C1DD EB                                   ex      de,hl
 160+ C1DE DD 2A 41 A3                          ld      ix,(Cash)
 161+ C1E2 FD 21 3B C0                          ld		iy,INM_cash_amount
 162+ C1E6 CD 8B C0                             call 	INM_DispDEIXtoIY
 163+ C1E9 FD E5                                push    IY
 164+ C1EB D1                                   pop     de
 165+ C1EC 21 45 C0                             ld      hl,INM_cash_UoM
 166+ C1EF 01 04 00                             ld      bc,4
 167+ C1F2 ED B0                                ldir
 168+ C1F4 C9                                   ret
 169+ C1F5              ;----------------------------------------------------------------------------------------------------------------------------------
 170+ C1F5              draw_inventory_menu:    InitNoDoubleBuffer
 170+ C1F5             >                            MMUSelectLayer1
 170+ C1F5 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 170+ C1F9 CD 80 E0    >                            call	l1_cls
 170+ C1FC 3E 07       >                            ld		a,7
 170+ C1FE CD 9B E0    >                            call	l1_attr_cls_to_a
 170+ C201             >                            MMUSelectLayer2
 170+ C201 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 170+ C205 CD 09 E0    >                            call    asm_l2_double_buffer_off
 170+ C208 CD 01 E1    >                            call	l2_cls	; Get some space
 170+ C20B             >                            MMUSelectSpriteBank
 170+ C20B ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
 170+ C20F CD A4 E4    >                            call    sprite_cls_cursors
 171+ C212 3E 08                                ld      a,$08
 172+ C214 32 EA 9D                             ld      (MenuIdMax),a
 173+ C217                                      MMUSelectSpriteBank
 173+ C217 ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
 174+ C21B CD A4 E4                             call        sprite_cls_cursors
 175+ C21E 01 01 01     .Drawbox:               ld		bc,$0101
 176+ C221 11 FD BE                             ld		de,$BEFD
 177+ C224 3E C0                                ld		a,$C0
 178+ C226                                      MMUSelectLayer2
 178+ C226 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 179+ C22A CD 4B E2                             call	l2_draw_box
 180+ C22D 01 01 0A                             ld		bc,$0A01
 181+ C230 11 C0 FE                             ld		de,$FEC0
 182+ C233 CD B5 E2                             call	l2_draw_horz_line
 183+ C236 06 03        .StaticText:	        ld		b,3
 184+ C238 21 10 C0                             ld		hl,inventory_boiler_text
 185+ C23B CD 70 C0                             call	INM_print_boiler_text
 186+ C23E CD 33 C1     .DisplayFuel:           call	INM_GetFuelLevel
 187+ C241 21 E1 BD                             ld		hl, txt_fuel_level
 188+ C244 7E                                   ld		a,(hl)
 189+ C245 FE 30                                cp		'0'
 190+ C247 20 01                                jr		nz,.PrintFuel
 191+ C249 23           .SkipLeadingZero:	    inc		hl
 192+ C24A 1E FF        .PrintFuel:             ld		e,txt_status_colour
 193+ C24C 01 30 0B                             ld		bc,inv_fuel_position
 194+ C24F                                      MMUSelectLayer2
 194+ C24F ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 195+ C253 CD C4 E1                             call	l2_print_at
 196+ C256 CD DA C1     .DisplayCash:           call	INM_GetCash
 197+ C259 21 3B C0                             ld		hl,INM_cash_amount
 198+ C25C 1E FF                                ld		e,txt_status_colour
 199+ C25E 01 30 13                             ld		bc,inv_cash_position
 200+ C261                                      MMUSelectLayer2
 200+ C261 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 201+ C265 CD C4 E1                             call	l2_print_at						; now we have the correct integer
 202+ C268 01 30 13                             ld		bc,inv_cash_position
 203+ C26B 21 3B C0                             ld		hl,INM_cash_amount
 204+ C26E 3E 00        .DisplayInventory:      ld		a,0
 205+ C270 21 08 20                             ld		hl,inventory_position
 206+ C273 22 38 C0                             ld		(inventory_cursor),hl
 207+ C276 F5           .InvLoop:	            push	af
 208+ C277 CD 5F C1                             call	PrintInvItem
 209+ C27A F1                                   pop		af
 210+ C27B 3C                                   inc		a
 211+ C27C FE 11                                cp		17
 212+ C27E 38 F6                                jr		c,.InvLoop
 213+ C280 C9                                   ret
 214+ C281
# file closed: ./Menus/inventory_menu.asm
 741  C281
 742  C281              ; Bank 53
 743  C281
 744  C281                  SLOT    MenuSystemAddr
 745  C281                  PAGE    BankMenuSystem
 746  C281              	ORG     MenuSystemAddr
 747  C000                  INCLUDE "./Menus/system_data_menu.asm"
# file opened: ./Menus/system_data_menu.asm
   1+ C000 53 79 73 74  system_data_page_marker DB "System      PG53"
   1+ C004 65 6D 20 20
   1+ C008 20 20 20 20
   1+ C00C 50 47 35 33
   2+ C010
   3+ C010 40 02 3A AB  plant_boiler_text		DW $0240,TextBuffer
   4+ C014 80 02 00 AC  						DW $0280,name_expanded
   5+ C018 08 0B 6A A8  						DW $0B08,WordDistance
   6+ C01C 08 13 73 A8  						DW $1308,WordEconomy
   7+ C020 08 1B 7B A8  						DW $1B08,WordGovernment
   8+ C024 08 23 86 A8  						DW $2308,WordTechLevel
   9+ C028 08 2B 90 A8  						DW $2B08,WordPopulation
  10+ C02C 08 3B AB A8  						DW $3B08,WordGross
  11+ C030 38 3B B1 A8  						DW $3B38,WordProductivity
  12+ C034 08 43 BE A8  						DW $4308,WordAverage
  13+ C038 48 43 C6 A8  						DW $4348,WordRadius
  14+ C03C 60 0B 3A AB  planet_zero_dist		DW $0B60,TextBuffer
  15+ C040 60 13 3A AB  planet_economy_disp		DW $1360,TextBuffer
  16+ C044 0A 00        techlevel_value			DB 10,0
  17+ C046 00 00 00...  distance_value          DS 20,0
  18+ C05A 20 4C 69 67  distance_uom            DB " Light Years",0
  18+ C05E 68 74 20 59
  18+ C062 65 61 72 73
  18+ C066 00
  19+ C067 00 00 00...  radius_value            DS 20
  20+ C07B 00                                   DB 0
  21+ C07C 20 6B 6D 00  radius_uom              DB " km",0
  22+ C080 00 00 00...  population_value        DS 20
  23+ C094 00                                   DB 0
  24+ C095 20 42 69 6C  population_uom          DB " Billion",0
  24+ C099 6C 69 6F 6E
  24+ C09D 00
  25+ C09E 00 00 00...  productivity_value      DS 20
  26+ C0B2 00                                   DB 0
  27+ C0B3 20 4D 20 43  productivity_uom        DB " M CR",0
  27+ C0B7 52 00
  28+ C0B9
  29+ C0B9              GovernmentIndexOffset	EQU 75
  30+ C0B9              DistanceScreenPos       EQU $0B60
  31+ C0B9              GovernmentScreenPos		EQU $1B60
  32+ C0B9              TechLevelScreenPos		EQU $2360
  33+ C0B9              SpeciesScreenPos        EQU $3308
  34+ C0B9
  35+ C0B9 00           system_present_or_target DB 0
  36+ C0BA 00 00        saved_present			 DW 0
  37+ C0BC
  38+ C0BC
  39+ C0BC 00 00 00...  SD_present_name         DS  30
  40+ C0DA 00                                   DB  0
  41+ C0DB 00 00 00...  SD_target_name          DS  30
  42+ C0F9 00                                   DB  0
  43+ C0FA 00 00 00...  SD_species              DS 30
  44+ C118 00                                   DB 0
  45+ C119 00 00 00...  SD_planet_description   DS 300,0
  46+ C245
  47+ C245 00           SDDisplayGovernment     DB 0
  48+ C246 00           SDDisplayEconomy        DB 0
  49+ C247 00           SDDisplayTekLevel       DB 0
  50+ C248 00           SDDisplayPopulation     DB 0
  51+ C249 00 00        SDDisplayProductivity   DW 0
  52+ C24B 00 00        SDDisplayRadius         DW 0
  53+ C24D              SDDataLength            EQU $ - SDDisplayEconomy
  54+ C24D
  55+ C24D 21 0A E9     SD_copy_system_data:    ld      hl,GalaxyDisplayGovernment
  56+ C250 11 45 C2                             ld      de,SDDisplayGovernment
  57+ C253 01 07 00                             ld      bc,SDDataLength
  58+ C256 ED B0                                ldir
  59+ C258 21 47 C2     .DisplayTechPlus1:      ld     hl,SDDisplayTekLevel
  60+ C25B 34                                   inc    (hl)
  61+ C25C C9                                   ret
  62+ C25D
  63+ C25D 21 7F E8     SD_copy_to_name:        ld      hl,GalaxyExpandedName
  64+ C260 01 1E 00                             ld      bc,30
  65+ C263 ED B0                                ldir
  66+ C265 C9                                   ret
  67+ C266
  68+ C266 21 64 F1     SD_copy_species:        ld      hl,GalaxySpecies
  69+ C269 11 FA C0                             ld      de,SD_species
  70+ C26C 01 1E 00                             ld      bc,30
  71+ C26F ED B0                                ldir
  72+ C271 C9                                   ret
  73+ C272
  74+ C272 21 85 F1     SD_copy_description:    ld      hl,GalaxyPlanetDescription
  75+ C275 11 19 C1                             ld      de,SD_planet_description
  76+ C278 7E           SDCopyLoop:             ld      a,(hl)
  77+ C279 FE 00                                cp      0
  78+ C27B 28 05                                jr      z,.SD_Copy_Done
  79+ C27D ED A0                                ldi
  80+ C27F C3 78 C2                             jp      SDCopyLoop
  81+ C282 12           .SD_Copy_Done:          ld      (de),a
  82+ C283 C9                                   ret
  83+ C284
  84+ C284 26 00        SDM_DispAtoDE:          ld h,0
  85+ C286 6F                                   ld l,a
  86+ C287 01 F0 D8                             ld	bc,-10000
  87+ C28A CD A0 C2                             call	.Num1
  88+ C28D 01 18 FC                             ld	bc,-1000
  89+ C290 CD A0 C2                             call	.Num1
  90+ C293 01 9C FF                             ld	bc,-100
  91+ C296 CD A0 C2                             call	.Num1
  92+ C299 0E F6                                ld	c,-10
  93+ C29B CD A0 C2                             call	.Num1
  94+ C29E 0E FF                                ld	c,-1
  95+ C2A0 3E 2F        .Num1:	                ld	a,'0'-1
  96+ C2A2 3C           .Num2:	                inc	a
  97+ C2A3 09                                   add	hl,bc
  98+ C2A4 38 FC                                jr	c,.Num2
  99+ C2A6 ED 42                                sbc	hl,bc
 100+ C2A8 12                                   ld	(de),a
 101+ C2A9 13                                   inc	de
 102+ C2AA C9                                   ret
 103+ C2AB
 104+ C2AB
 105+ C2AB 3A D4 9E     sdm_calc_distance:      ld      a,(Galaxy)
 106+ C2AE                                      MMUSelectGalaxyA
 106+ C2AE ED 92 57    >                     nextreg GalaxyDataMMU,       a
 107+ C2B1 ED 4B E7 9E                          ld      bc,(PresentSystemX)
 108+ C2B5 ED 43 57 E8                          ld      (GalaxyPresentSystem),bc
 109+ C2B9 ED 4B E8 C2                          ld      bc,(SD_working_cursor)
 110+ C2BD ED 43 59 E8                          ld      (GalaxyDestinationSystem),bc
 111+ C2C1 CD F7 FB                             call    galaxy_find_distance            ; get distance into HL
 112+ C2C4 C9           .done_number:           ret
 113+ C2C5
 114+ C2C5
 115+ C2C5              SDM_print_boiler_text:
 116+ C2C5                  INCLUDE "Menus/print_boiler_text_inlineInclude.asm"
# file opened: ./Menus/print_boiler_text_inlineInclude.asm
   1++C2C5
   2++C2C5              ;">print_boilder_text hl = text structure, b = message count"
   3++C2C5              .BoilerTextLoop:
   4++C2C5 C5           	push		bc			; Save Message Count loop value
   5++C2C6 4E           	ld			c,(hl)		; Get Row into b
   6++C2C7 23           	inc			hl
   7++C2C8 46           	ld			b,(hl)		; Get Col into b
   8++C2C9 23           	inc			hl
   9++C2CA 5E           	ld			e,(hl)		; Get text address Lo into E
  10++C2CB 23           	inc			hl
  11++C2CC 56           	ld			d,(hl)		; Get text address Hi into E
  12++C2CD 23           	inc			hl
  13++C2CE E5           	push		hl			; Save present HL to stack as this is the address for the next message
  14++C2CF EB           	ex			de,hl		; now hl = address of text data
  15++C2D0 1E FF        	ld			e,txt_status_colour
  16++C2D2 C5           	push		bc
  17++C2D3 D1           	pop			de
  18++C2D4                  MMUSelectLayer1
  18++C2D4 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
  19++C2D8 CD C8 E0     	call		l1_print_at
  20++C2DB E1           	pop			hl
  21++C2DC C1           	pop			bc
  22++C2DD 10 E6        	djnz		.BoilerTextLoop
  23++C2DF C9           	ret
  24++C2E0
# file closed: ./Menus/print_boiler_text_inlineInclude.asm
 117+ C2E0
 118+ C2E0 7E           PlanetLeftJustifyLoop:  ld      a,(hl)
 119+ C2E1 FE 30                                cp      "0"
 120+ C2E3 C0                                   ret      nz
 121+ C2E4 23                                   inc     hl
 122+ C2E5 10 F9                                djnz    PlanetLeftJustifyLoop
 123+ C2E7 C9                                   ret
 124+ C2E8
 125+ C2E8 00 00        SD_working_cursor       DW   0
 126+ C2EA
 127+ C2EA 00 00 00...  sd_copy_of_seed         DS 6
 128+ C2F0
 129+ C2F0              draw_system_data_menu:  InitNoDoubleBuffer
 129+ C2F0             >                            MMUSelectLayer1
 129+ C2F0 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 129+ C2F4 CD 80 E0    >                            call	l1_cls
 129+ C2F7 3E 07       >                            ld		a,7
 129+ C2F9 CD 9B E0    >                            call	l1_attr_cls_to_a
 129+ C2FC             >                            MMUSelectLayer2
 129+ C2FC ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 129+ C300 CD 09 E0    >                            call    asm_l2_double_buffer_off
 129+ C303 CD 01 E1    >                            call	l2_cls	; Get some space
 129+ C306             >                            MMUSelectSpriteBank
 129+ C306 ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
 129+ C30A CD A4 E4    >                            call    sprite_cls_cursors
 130+ C30D                                      ZeroA
 130+ C30D AF          >                        xor a
 131+ C30E 32 B9 C0                             ld      (system_present_or_target),a
 132+ C311 3E 08                                ld		a,8
 133+ C313 32 EA 9D                             ld		(MenuIdMax),a
 134+ C316 3A D4 9E     .SelectGalaxy:          ld      a,(Galaxy)
 135+ C319                                      MMUSelectGalaxyA
 135+ C319 ED 92 57    >                     nextreg GalaxyDataMMU,       a
 136+ C31C ED 4B E9 9E  .CheckCursorOrHome:     ld      bc,(TargetSystemX)              ; Find out if we have to work on hyperspace or normal cursor
 137+ C320 ED 43 E8 C2                          ld      (SD_working_cursor),bc
 138+ C324 ED 43 5B E8                          ld      (GalaxyTargetSystem),bc
 139+ C328 CD 64 FC                             call    galaxy_system_under_cursor
 140+ C32B FE FF        .IsCursorOnSystem:      cp      $FF                               ; if a = 0 then failed
 141+ C32D 28 0F                                jr      z,.FoundASystem
 142+ C32F ED 4B E7 9E  .UsePresentSystem:      ld      bc,(PresentSystemX)
 143+ C333 ED 43 E8 C2                          ld      (SD_working_cursor),bc
 144+ C337 ED 43 5B E8                          ld      (GalaxyTargetSystem),bc
 145+ C33B CD 64 FC                             call    galaxy_system_under_cursor
 146+ C33E ED 4B E9 9E  .FoundASystem:          ld      bc,(TargetSystemX)
 147+ C342 2A E7 9E                             ld      hl,(PresentSystemX)
 148+ C345 78                                   ld      a,b
 149+ C346 BC                                   cp      h
 150+ C347 20 04                                jr      nz,.DiffCoord
 151+ C349 79                                   ld      a,c
 152+ C34A BD                                   cp      l
 153+ C34B 28 05                                jr      z,.SameCoord
 154+ C34D 3E FF        .DiffCoord:             ld      a,$FF
 155+ C34F 32 B9 C0                             ld      (system_present_or_target),a
 156+ C352 21 D5 9E     .SameCoord:             ld      hl,WorkingSeeds            ; found a system so save it
 157+ C355 11 EA C2                             ld      de,sd_copy_of_seed
 158+ C358 CD 02 FA                             call    galaxy_copy_seed
 159+ C35B CD C5 FA     .GetSystemName:         call    GalaxyDigramWorkings       ; we have galaxy working seed populated now
 160+ C35E 01 01 01     .Drawbox:               ld		bc,$0101
 161+ C361 11 FD BE                             ld		de,$BEFD
 162+ C364 3E C0                                ld		a,$C0
 163+ C366                                      MMUSelectLayer2
 163+ C366 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 164+ C36A CD 4B E2                             call	l2_draw_box
 165+ C36D 01 01 0A                             ld		bc,$0A01
 166+ C370 11 C0 FE                             ld		de,$FEC0
 167+ C373 CD B5 E2                             call	l2_draw_horz_line
 168+ C376 3E 0E        .ExpandStatic:          ld		a,14
 169+ C378 CD 7B AB                             call	expandTokenToString
 170+ C37B 3A D4 9E     .TargetSystem:          ld      a,(Galaxy)      ; DEBUG as galaxy n is not working
 171+ C37E                                      MMUSelectGalaxyA
 171+ C37E ED 92 57    >                     nextreg GalaxyDataMMU,       a
 172+ C381 ED 4B E8 C2                          ld      bc, (SD_working_cursor)
 173+ C385               ;   call    galaxy_name_at_bc
 174+ C385                ;  cp      $FF               ; if we didn't get a
 175+ C385 21 EA C2                             ld      hl,sd_copy_of_seed
 176+ C388 11 F8 E8                             ld      de,GalaxyWorkingSeed
 177+ C38B CD 02 FA                             call    galaxy_copy_seed
 178+ C38E CD 6D F9                             call    galaxy_planet_data                              ; Geneate galaxy data from working seed
 179+ C391 CD 4D C2                             call    SD_copy_system_data
 180+ C394 11 00 AC                             ld      de,name_expanded
 181+ C397 CD 5D C2                             call    SD_copy_to_name
 181+ C39A
 182+ C39A 11 98 13                             ld      de,hyperspace_position
 183+ C39D 21 00 AC                             ld      hl,name_expanded
 184+ C3A0 06 0B        .StaticText:	        ld		b,11
 185+ C3A2 21 10 C0                             ld		hl,plant_boiler_text
 186+ C3A5 CD C5 C2                             call	SDM_print_boiler_text
 187+ C3A8 3A B9 C0     .CalcDistance:          ld		a,(system_present_or_target)
 188+ C3AB FE 00                                cp		0
 189+ C3AD 28 2B                                jr		z,.ZeroDistance
 190+ C3AF CD AB C2     .NotZero:               call    sdm_calc_distance
 191+ C3B2 DD 2A 70 9E  .DisplayDistance:       ld      ix,(Distance)
 192+ C3B6 11 00 00                             ld      de,0
 193+ C3B9 FD 21 46 C0                          ld      iy,distance_value
 194+ C3BD CD 20 B5                             call    DispDEIXtoIY1DP
 195+ C3C0 FD E5        .AddDistUo              push    iy
 196+ C3C2 E1                                   pop     hl
 197+ C3C3 23                                   inc     hl
 198+ C3C4 11 5A C0                             ld      de,distance_uom
 199+ C3C7 CD F0 C4                             call    SDTackOnUOMtoHL
 200+ C3CA 11 60 0B                             ld      de,DistanceScreenPos
 201+ C3CD 21 46 C0                             ld      hl,distance_value
 202+ C3D0                                      MMUSelectLayer1
 202+ C3D0 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 203+ C3D4 CD C8 E0                             call	l1_print_at
 204+ C3D7 C3 E7 C3                             jp      .DisplayEconomy
 205+ C3DA 3E 18        .ZeroDistance:          ld		a,24						; print literal zero dist
 206+ C3DC CD 7B AB                             call	expandTokenToString
 207+ C3DF 06 01                                ld		b,1
 208+ C3E1 21 3C C0                             ld		hl,planet_zero_dist
 209+ C3E4 CD C5 C2                             call	SDM_print_boiler_text
 210+ C3E7 3A 46 C2     .DisplayEconomy:        ld		a,(SDDisplayEconomy)
 211+ C3EA C6 0F                                add     a,TextEconomyOffset
 212+ C3EC CD 7B AB                             call	expandTokenToString
 213+ C3EF 06 01                                ld		b,1
 214+ C3F1 21 40 C0                             ld		hl,planet_economy_disp
 215+ C3F4 CD C5 C2                             call	SDM_print_boiler_text
 216+ C3F7 3A 45 C2     .DisplayGovernment:     ld		a,(SDDisplayGovernment)
 217+ C3FA C6 4B                                add		a,TextGovOffset
 218+ C3FC CD 6D AB                             call	WordIndexToAddress
 219+ C3FF 11 60 1B                             ld		de,GovernmentScreenPos
 220+ C402                                      MMUSelectLayer1
 220+ C402 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 221+ C406 CD C8 E0                             call	l1_print_at
 222+ C409 3A 47 C2     .DisplayTechLevel:      ld		a,(SDDisplayTekLevel)
 223+ C40C 11 44 C0                             ld		de,techlevel_value
 224+ C40F CD 84 C2                             call    SDM_DispAtoDE
 225+ C412 AF                                   xor     a
 226+ C413 12                                   ld      (de),a
 227+ C414 21 44 C0                             ld      hl,techlevel_value
 228+ C417 06 05                                ld      b,5
 229+ C419 CD E0 C2                             call    PlanetLeftJustifyLoop
 230+ C41C 11 60 23                             ld		de,TechLevelScreenPos
 231+ C41F                                      MMUSelectLayer1
 231+ C41F ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 232+ C423 CD C8 E0                             call	l1_print_at
 233+ C426 3A 48 C2     .DisplayPopulation:     ld      a,(SDDisplayPopulation)
 234+ C429 DD 26 00                             ld      ixh,0
 235+ C42C DD 6F                                ld      ixl,a
 236+ C42E 11 00 00                             ld      de,0
 237+ C431 FD 21 80 C0                          ld      iy,population_value
 238+ C435 CD 20 B5                             call    DispDEIXtoIY1DP
 239+ C438 FD E5        .AddUoM:                push    iy
 240+ C43A E1                                   pop     hl
 241+ C43B 23                                   inc     hl
 242+ C43C 11 95 C0                             ld      de,population_uom
 243+ C43F CD F0 C4                             call    SDTackOnUOMtoHL
 244+ C442 11 60 2B                             ld      de,$2B60
 245+ C445 21 80 C0                             ld      hl,population_value
 246+ C448                                      MMUSelectLayer1
 246+ C448 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 247+ C44C CD C8 E0                             call	l1_print_at
 248+ C44F              ;SDDisplayPopulation     DB 0
 249+ C44F 3A D4 9E     .DisplayPopulationType: ld      a,(Galaxy)      ; DEBUG as galaxy n is not working
 250+ C452                                      MMUSelectGalaxyA
 250+ C452 ED 92 57    >                     nextreg GalaxyDataMMU,       a
 251+ C455 CD DC F6                             call    galaxy_get_species
 252+ C458 CD 66 C2                             call    SD_copy_species
 253+ C45B 21 FA C0                             ld		hl,SD_species
 254+ C45E 11 08 33                             ld		de,SpeciesScreenPos
 255+ C461                                      MMUSelectLayer1
 255+ C461 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 256+ C465 CD C8 E0                             call	l1_print_at
 257+ C468 2A 49 C2     .DisplayProductivity:   ld      hl,(SDDisplayProductivity)
 258+ C46B E5                                   push    hl
 259+ C46C DD E1                                pop     ix
 260+ C46E 11 00 00                             ld      de,0
 261+ C471 FD 21 9E C0                          ld      iy,productivity_value
 262+ C475 CD 2F B5                             call    DispDEIXtoIY
 263+ C478 FD E5        .AddProdUoM:            push    iy
 264+ C47A E1                                   pop     hl
 265+ C47B 23                                   inc     hl
 266+ C47C 11 B3 C0                             ld      de,productivity_uom
 267+ C47F CD F0 C4                             call    SDTackOnUOMtoHL
 268+ C482 11 A0 3B                             ld      de,$3BA0
 269+ C485 21 9E C0                             ld      hl,productivity_value
 270+ C488                                      MMUSelectLayer1
 270+ C488 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 271+ C48C CD C8 E0                             call	l1_print_at
 272+ C48F 3A D4 9E     .DisplayRadius:         ld      a,(Galaxy)      ; DEBUG as galaxy n is not working
 273+ C492                                      MMUSelectGalaxyA
 273+ C492 ED 92 57    >                     nextreg GalaxyDataMMU,       a
 274+ C495 2A 10 E9                             ld      hl,(GalaxyDisplayRadius)
 275+ C498 E5                                   push    hl
 276+ C499 DD E1                                pop     ix
 277+ C49B 11 00 00                             ld      de,0
 278+ C49E FD 21 67 C0                          ld      iy,radius_value
 279+ C4A2 CD 2F B5                             call    DispDEIXtoIY
 280+ C4A5 FD E5        .AddRadiusUoM:          push    iy
 281+ C4A7 E1                                   pop     hl
 282+ C4A8 23                                   inc     hl
 283+ C4A9 11 7C C0                             ld      de,radius_uom
 284+ C4AC CD F0 C4                             call    SDTackOnUOMtoHL
 285+ C4AF 21 67 C0                             ld      hl,radius_value
 286+ C4B2 11 A0 43                             ld      de,$43A0
 287+ C4B5                                      MMUSelectLayer1
 287+ C4B5 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 288+ C4B9 CD C8 E0                             call	l1_print_at
 289+ C4BC 3A D4 9E     .DisplayDescription:    ld      a,(Galaxy)      ; DEBUG as galaxy n is not working
 290+ C4BF                                      MMUSelectGalaxyA
 290+ C4BF ED 92 57    >                     nextreg GalaxyDataMMU,       a
 291+ C4C2 11 F8 E8     .CopySaveToGal:         ld      de,GalaxyWorkingSeed
 292+ C4C5 21 EA C2                             ld      hl,sd_copy_of_seed
 293+ C4C8 CD 02 FA                             call    galaxy_copy_seed
 294+ C4CB ED 4B E8 C2                          ld      bc,(SD_working_cursor)
 295+ C4CF CD 6F F8                             call     GalaxyGenerateDesc
 296+ C4D2 CD 72 C2                             call    SD_copy_description
 297+ C4D5 11 08 57                             ld      de,$5708
 298+ C4D8 21 19 C1                             ld      hl,SD_planet_description
 299+ C4DB                                      MMUSelectLayer1
 299+ C4DB ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 300+ C4DF CD 15 E1                             call	l1_print_at_wrap
 301+ C4E2 C9                                   ret
 302+ C4E3
 303+ C4E3              ; HL = value to add on
 304+ C4E3              ; de = Unit of Measure
 305+ C4E3 7E           SDAddUoMtoHL:           ld      a,(hl)
 306+ C4E4 FE 00                                cp      0
 307+ C4E6 28 03                                jr      z,.FoundEnd
 308+ C4E8 23                                   inc     hl
 309+ C4E9 18 F8                                jr      SDAddUoMtoHL
 310+ C4EB EB           .FoundEnd:              ex      de,hl
 311+ C4EC CD 78 C2                             call    SDCopyLoop
 312+ C4EF C9                                   ret
 313+ C4F0
 314+ C4F0              ; works on HL already being at end
 315+ C4F0              ; de = Unit of Measure
 316+ C4F0 23           SDTackOnUOMtoHL:        inc     hl
 317+ C4F1 EB                                   ex      hl,de
 318+ C4F2 CD 78 C2                             call    SDCopyLoop
 319+ C4F5 C9                                   ret
 320+ C4F6              ;
 321+ C4F6              ;
 322+ C4F6              ;    SDDisplayEconomy        DB 0
 323+ C4F6              ;SDDisplayGovernment     DB 0
 324+ C4F6              ;SDDisplayEcononmy       DB 0
 325+ C4F6              ;SDDisplayTekLevel       DB 0
 326+ C4F6              ;
 327+ C4F6              ;SDDisplayProductivity   DW 0
 328+ C4F6              ;SDDisplayRadius         DW 0
 329+ C4F6              ;SDDataLength            EQU $ - SDDisplayEconomy
 330+ C4F6              ;
 331+ C4F6
 332+ C4F6
 333+ C4F6
 334+ C4F6
 335+ C4F6
 336+ C4F6              ;; PREsent ssytem
 337+ C4F6              ;; hyperspace systrem
 338+ C4F6              ;.StatusText:
 339+ C4F6              ;	; get closet ssytem to cursor
 340+ C4F6              ;	call	get_cmdr_condition
 341+ C4F6              ;	ld		hl, ConditionNameIdx
 342+ C4F6              ;	call	getTableText
 343+ C4F6              ;	ld		de,condition_position
 344+ C4F6              ;	call	l1_print_at
 345+ C4F6              ;.DisplayFuel:
 346+ C4F6              ;	call	GetFuelLevel
 347+ C4F6              ;	ld		hl, txt_fuel_level
 348+ C4F6              ;	ld		a,(hl)
 349+ C4F6              ;	cp		'0'
 350+ C4F6              ;	jr		nz,.PrintFuel
 351+ C4F6              ;.SkipLeadingZero:
 352+ C4F6              ;	inc		hl
 353+ C4F6              ;.PrintFuel:
 354+ C4F6              ;	ld		de,fuel_position
 355+ C4F6              ;	call	l1_print_at
 356+ C4F6              ;.DisplayCash:
 357+ C4F6              ;	call	GetCash
 358+ C4F6              ;	ld		hl,txt_cash_amount
 359+ C4F6              ;	ld		de,cash_position
 360+ C4F6              ;	call	l1_print_at						; now we have the correct integer
 361+ C4F6              ;	ld		bc,cash_position
 362+ C4F6              ;	ld		hl,txt_cash_amount
 363+ C4F6              ;.CorrectPosition:
 364+ C4F6              ;	ld		a,(hl)
 365+ C4F6              ;	cp		0
 366+ C4F6              ;	jr		z,.DoneCorrection
 367+ C4F6              ;.StillDigits:
 368+ C4F6              ;	ld		a,c
 369+ C4F6              ;	add		a,8								; its 1 character forwards
 370+ C4F6              ;	ld		c,a
 371+ C4F6              ;	inc		hl
 372+ C4F6              ;	jr		.CorrectPosition
 373+ C4F6              ;.DoneCorrection:
 374+ C4F6              ;	ld		hl,txt_cash_decimal
 375+ C4F6              ;	ld		d,b
 376+ C4F6              ;	ld		e,c
 377+ C4F6              ;	call	l1_print_at
 378+ C4F6              ;.PrintLegalStatus:
 379+ C4F6              ;	ld		a,(FugitiveInnocentStatus)
 380+ C4F6              ;	cp		0
 381+ C4F6              ;	jr		nz,.Naughty
 382+ C4F6              ;	ld		hl,WordClean
 383+ C4F6              ;	jr		.DisplayLegalStatus
 384+ C4F6              ;.Naughty:
 385+ C4F6              ;	cp		50
 386+ C4F6              ;	jr		c,.JustOffender
 387+ C4F6              ;.VeryNaughty:
 388+ C4F6              ;	ld		hl,WordFugitive
 389+ C4F6              ;	jr		.DisplayLegalStatus
 390+ C4F6              ;.JustOffender:
 391+ C4F6              ;	ld		hl,WordOffender
 392+ C4F6              ;.DisplayLegalStatus:
 393+ C4F6              ;	ld		de,legal_status_position
 394+ C4F6              ;	call	l1_print_at						; now we have the correct integer
 395+ C4F6              ;
 396+ C4F6 C9           	ret
 397+ C4F7
# file closed: ./Menus/system_data_menu.asm
 748  C4F7
 749  C4F7              ; Bank 54
 750  C4F7
 751  C4F7                  SLOT    MenuMarketAddr
 752  C4F7                  PAGE    BankMenuMarket
 753  C4F7                  ORG     MenuMarketAddr
 754  C000                  INCLUDE "./Menus/market_prices_menu.asm"
# file opened: ./Menus/market_prices_menu.asm
   1+ C000 4D 61 72 6B  market_prices_page_marker  DB "MarketPricesPG54"
   1+ C004 65 74 50 72
   1+ C008 69 63 65 73
   1+ C00C 50 47 35 34
   2+ C010 50 02 3A AB  market_boiler_text		DW $0250,TextBuffer
   3+ C014 20 02 00 AC  						DW $0220,name_expanded
   4+ C018 80 0B 5A A7  						DW $0B80,WordUnit
   5+ C01C B0 0B A3 A9  						DW $0BB0,WordQuantity
   6+ C020 08 13 81 A9  						DW $1308,WordProduct
   7+ C024 60 13 89 A9  						DW $1360,WordUoM
   8+ C028 80 13 8D A9  						DW $1380,WordPrice
   9+ C02C B0 13 B1 A9  						DW $13B0,WordStock
  10+ C030 E0 13 AD A9  						DW $13E0,WordInv
  11+ C034
  12+ C034              ;char name[16];
  13+ C034              ;current_quantity;
  14+ C034              ;current_price;
  15+ C034              ;base_price;
  16+ C034              ;eco_adjust;
  17+ C034              ;base_quantity;
  18+ C034              ;mask;
  19+ C034              ;units;
  20+ C034
  21+ C034
  22+ C034 30 30 2E 30  txt_market_amount	    DB "00.0",0
  22+ C038 00
  23+ C039 39 39 39 00  txt_market_quantity     DB "999",0
  24+ C03D 39 39 39 00  txt_market_cargo        DB "999",0
  25+ C041 00 00        market_cursor			DW  $0000
  26+ C043              market_position			equ $2008
  27+ C043              market_uom				equ	$68
  28+ C043              market_price 			equ $88
  29+ C043              market_Quantity			equ	$B0
  30+ C043              market_Cargo            equ $E0
  31+ C043              market_UomOffset		equ 46
  32+ C043 20 20 20 20  market_blank_line       DB "                                ",0
  32+ C047 20 20 20 20
  32+ C04B 20 20 20 20
  32+ C04F 20 20 20 20
  32+ C053 20 20 20 20
  32+ C057 20 20 20 20
  32+ C05B 20 20 20 20
  32+ C05F 20 20 20 20
  32+ C063 00
  33+ C064 43 61 72 67  mkt_hold_level          DB "Cargo: ",0
  33+ C068 6F 3A 20 00
  34+ C06C 43 61 73 68  mkt_cash				DB "Cash : ",0
  34+ C070 20 3A 20 00
  35+ C074 00           mkt_selected_row        db  0
  36+ C075
  37+ C075              mkt_cash_position       equ $B048
  38+ C075 00 00 00...  mkt_cash_amount			DS 20
  39+ C089 20 43 72 20  mkt_cash_UoM            DB " Cr       ",0
  39+ C08D 20 20 20 20
  39+ C091 20 20 00
  40+ C094              mkt_cargo_position      equ $A848
  41+ C094 00 00 00...  mkt_cargo_amount		DS 20
  42+ C0A8 20 54 6F 6E  mkt_cargo_UoM           DB " Tonnes   ",0
  42+ C0AC 6E 65 73 20
  42+ C0B0 20 20 00
  43+ C0B3              ;                           12345678901
  44+ C0B3
  45+ C0B3              ;----------------------------------------------------------------------------------------------------------------------------------
  46+ C0B3 3A 74 C0     mkt_highlight_row:      ld      a,(mkt_selected_row)
  47+ C0B6 C6 04                                add     a,4
  48+ C0B8 57                                   ld      d,a
  49+ C0B9 1E 56                                ld      e,L1InvHighlight
  50+ C0BB                                      MMUSelectLayer1
  50+ C0BB ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
  51+ C0BF CD 30 E0                             call    l1_hilight_row
  52+ C0C2 C9                                   ret
  53+ C0C3              ;----------------------------------------------------------------------------------------------------------------------------------
  54+ C0C3 3A 74 C0     mkt_lowlight_row        ld      a,(mkt_selected_row)
  55+ C0C6 C6 04                                add     a,4
  56+ C0C8 57                                   ld      d,a
  57+ C0C9 1E 07                                ld      e,L1InvLowlight
  58+ C0CB                                      MMUSelectLayer1
  58+ C0CB ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
  59+ C0CF CD 30 E0                             call    l1_hilight_row
  60+ C0D2 C9                                   ret
  61+ C0D3              ;----------------------------------------------------------------------------------------------------------------------------------
  62+ C0D3 CD EA C0     MKT_DispDEIXtoIY1DP:    call    MKT_DispDEIXtoIY
  63+ C0D6 FD 36 02 00                          ld (iy+2),0
  64+ C0DA FD 7E 00                             ld      a,(IY+0)
  65+ C0DD FD 77 01                             ld      (IY+1),a
  66+ C0E0 3E 2E                                ld      a,"."
  67+ C0E2 FD 77 00                             ld      (IY+0),a
  68+ C0E5 FD 23                                inc     IY
  69+ C0E7 FD 23                                inc     IY
  70+ C0E9 C9                                   ret
  71+ C0EA              ;----------------------------------------------------------------------------------------------------------------------------------
  72+ C0EA DD 22 7F C1  MKT_DispDEIXtoIY:       ld (.MKTclcn32z),ix
  73+ C0EE ED 53 81 C1                          ld (.MKTclcn32zIX),de
  74+ C0F2 DD 21 7B C1                          ld ix,.MKTclcn32t+36
  75+ C0F6 06 09                                ld b,9
  76+ C0F8 0E 00                                ld c,0
  77+ C0FA 3E 30        .MKTclcn321:            ld a,'0'
  78+ C0FC B7                                   or a
  79+ C0FD DD 5E 00     .MKTclcn322:            ld e,(ix+0)
  80+ C100 DD 56 01                             ld d,(ix+1)
  81+ C103 2A 7F C1                             ld hl,(.MKTclcn32z)
  82+ C106 ED 52                                sbc hl,de
  83+ C108 22 7F C1                             ld (.MKTclcn32z),hl
  84+ C10B DD 5E 02                             ld e,(ix+2)
  85+ C10E DD 56 03                             ld d,(ix+3)
  86+ C111 2A 81 C1                             ld hl,(.MKTclcn32zIX)
  87+ C114 ED 52                                sbc hl,de
  88+ C116 22 81 C1                             ld (.MKTclcn32zIX),hl
  89+ C119 38 04                                jr c,.MKTclcn325
  90+ C11B 0C                                   inc c
  91+ C11C 3C                                   inc a
  92+ C11D 18 DE                                jr .MKTclcn322
  93+ C11F DD 5E 00     .MKTclcn325:            ld e,(ix+0)
  94+ C122 DD 56 01                             ld d,(ix+1)
  95+ C125 2A 7F C1                             ld hl,(.MKTclcn32z)
  96+ C128 19                                   add hl,de
  97+ C129 22 7F C1                             ld (.MKTclcn32z),hl
  98+ C12C DD 5E 02                             ld e,(ix+2)
  99+ C12F DD 56 03                             ld d,(ix+3)
 100+ C132 2A 81 C1                             ld hl,(.MKTclcn32zIX)
 101+ C135 ED 5A                                adc hl,de
 102+ C137 22 81 C1                             ld (.MKTclcn32zIX),hl
 103+ C13A 11 FC FF                             ld de,-4
 104+ C13D DD 19                                add ix,de
 105+ C13F 0C                                   inc c
 106+ C140 0D                                   dec c
 107+ C141 28 05                                jr z,.MKTclcn323
 108+ C143 FD 77 00                             ld (iy+0),a
 109+ C146 FD 23                                inc iy
 110+ C148 10 B0        .MKTclcn323:            djnz .MKTclcn321
 111+ C14A 3A 7F C1                             ld a,(.MKTclcn32z)
 112+ C14D C6 30                                add A,'0'
 113+ C14F FD 77 00                             ld (iy+0),a
 114+ C152 FD 36 01 00                          ld (iy+1),0
 115+ C156 C9                                   ret
 116+ C157 01 00 00 00  .MKTclcn32t             dw 1,0,     10,0,     100,0,     1000,0,       10000,0
 116+ C15B 0A 00 00 00
 116+ C15F 64 00 00 00
 116+ C163 E8 03 00 00
 116+ C167 10 27 00 00
 117+ C16B A0 86 01 00                          dw $86a0,1, $4240,$0f, $9680,$98, $e100,$05f5, $ca00,$3b9a
 117+ C16F 40 42 0F 00
 117+ C173 80 96 98 00
 117+ C177 00 E1 F5 05
 117+ C17B 00 CA 9A 3B
 118+ C17F 00 00        .MKTclcn32z             ds 2
 119+ C181 00 00        .MKTclcn32zIX           ds 2
 120+ C183              ;----------------------------------------------------------------------------------------------------------------------------------
 121+ C183              ; "DispHL, writes HL to DE address"
 122+ C183 01 F0 D8     MPM_DispHLtoDE:         ld	bc,-10000
 123+ C186 CD 9C C1                             call	MPM_Num1
 124+ C189 01 18 FC                             ld	bc,-1000
 125+ C18C CD 9C C1                             call	MPM_Num1
 126+ C18F 01 9C FF                             ld	bc,-100
 127+ C192 CD 9C C1                             call	MPM_Num1
 128+ C195 0E F6                                ld	c,-10
 129+ C197 CD 9C C1                             call	MPM_Num1
 130+ C19A 0E FF                                ld	c,-1
 131+ C19C 3E 2F        MPM_Num1:	            ld	a,'0'-1
 132+ C19E 3C           .Num2:	                inc	a
 133+ C19F 09                                   add	hl,bc
 134+ C1A0 38 FC                                jr	c,.Num2
 135+ C1A2 ED 42                                sbc	hl,bc
 136+ C1A4 12                                   ld	(de),a
 137+ C1A5 13                                   inc	de
 138+ C1A6 C9                                   ret
 139+ C1A7              ;----------------------------------------------------------------------------------------------------------------------------------
 140+ C1A7 26 00        MPM_DispAtoDE:          ld h,0
 141+ C1A9 6F                                   ld l,a
 142+ C1AA C3 83 C1                             jp MPM_DispHLtoDE
 143+ C1AD              ;----------------------------------------------------------------------------------------------------------------------------------
 144+ C1AD 26 00        MPM_DispPriceAtoDE:     ld h,0
 145+ C1AF 6F                                   ld l,a
 146+ C1B0 01 9C FF                             ld	bc,-100
 147+ C1B3 CD C3 C1                             call	.NumLeadBlank1
 148+ C1B6 0E F6                                ld	c,-10
 149+ C1B8 CD 9C C1                             call	MPM_Num1
 150+ C1BB 3E 2E                                ld		a,'.'					; we could assume preformat but
 151+ C1BD 12                                   ld		(de),a					; we can optimse that later TODO
 152+ C1BE 13                                   inc		de						; with just an inc De
 153+ C1BF 0E FF                                ld	c,-1
 154+ C1C1 18 D9                                jr		MPM_Num1
 155+ C1C3 3E 2F        .NumLeadBlank1:	        ld	a,'0'-1
 156+ C1C5 3C           .NumLeadBlank2:	        inc	a
 157+ C1C6 09                                   add	hl,bc
 158+ C1C7 38 FC                                jr	c,.NumLeadBlank2
 159+ C1C9 FE 30                                cp	'0'
 160+ C1CB 20 02                                jr	nz,.DontBlank
 161+ C1CD 3E 20        .Blank:                 ld	a,' '
 162+ C1CF ED 42        .DontBlank:	            sbc	hl,bc
 163+ C1D1 12                                   ld	(de),a
 164+ C1D2 13                                   inc	de
 165+ C1D3 C9                                   ret
 166+ C1D4              ;----------------------------------------------------------------------------------------------------------------------------------
 167+ C1D4 FE 00        MPM_DispQtyAtoDE:       cp	0
 168+ C1D6 28 30                                jr	z,.NoStock
 169+ C1D8 26 00                                ld h,0
 170+ C1DA 6F                                   ld l,a
 171+ C1DB 01 9C FF                             ld	bc,-100
 172+ C1DE CD F7 C1                             call	.NumLeadBlank1
 173+ C1E1 FE 20        .WasLead0:              cp      ' '
 174+ C1E3 20 09                                jr      nz,.NotHundredsZero
 175+ C1E5 0E F6                                ld	c,-10
 176+ C1E7 CD F7 C1                             call	.NumLeadBlank1
 177+ C1EA 0E FF                                ld	c,-1
 178+ C1EC 18 AE                                jr		MPM_Num1
 179+ C1EE 0E F6        .NotHundredsZero:       ld	c,-10
 180+ C1F0 CD 9C C1                             call	MPM_Num1
 181+ C1F3 0E FF                                ld	c,-1
 182+ C1F5 18 A5                                jr		MPM_Num1
 183+ C1F7 3E 2F        .NumLeadBlank1:	        ld	a,'0'-1
 184+ C1F9 3C           .NumLeadBlank2:	        inc	a
 185+ C1FA 09                                   add	hl,bc
 186+ C1FB 38 FC                                jr	c,.NumLeadBlank2
 187+ C1FD FE 30                                cp	'0'
 188+ C1FF 20 02                                jr	nz,.DontBlank
 189+ C201 3E 20        .Blank:                 ld	a,' '
 190+ C203 ED 42        .DontBlank:	            sbc	hl,bc
 191+ C205 12                                   ld	(de),a
 192+ C206 13                                   inc	de
 193+ C207 C9                                   ret
 194+ C208 3E 20        .NoStock:               ld	a,' '
 195+ C20A 12                                   ld	(de),a
 196+ C20B 13                                   inc	de
 197+ C20C 12                                   ld	(de),a
 198+ C20D 13                                   inc	de
 199+ C20E 3E 2D                                ld	a,'-'
 200+ C210 12                                   ld	(de),a
 201+ C211 13                                   inc de
 202+ C212 C9                                   ret
 203+ C213              ;----------------------------------------------------------------------------------------------------------------------------------
 204+ C213              MPM_print_boiler_text:  INCLUDE "Menus/print_boiler_text_inlineInclude.asm"
# file opened: ./Menus/print_boiler_text_inlineInclude.asm
   1++C213
   2++C213              ;">print_boilder_text hl = text structure, b = message count"
   3++C213              .BoilerTextLoop:
   4++C213 C5           	push		bc			; Save Message Count loop value
   5++C214 4E           	ld			c,(hl)		; Get Row into b
   6++C215 23           	inc			hl
   7++C216 46           	ld			b,(hl)		; Get Col into b
   8++C217 23           	inc			hl
   9++C218 5E           	ld			e,(hl)		; Get text address Lo into E
  10++C219 23           	inc			hl
  11++C21A 56           	ld			d,(hl)		; Get text address Hi into E
  12++C21B 23           	inc			hl
  13++C21C E5           	push		hl			; Save present HL to stack as this is the address for the next message
  14++C21D EB           	ex			de,hl		; now hl = address of text data
  15++C21E 1E FF        	ld			e,txt_status_colour
  16++C220 C5           	push		bc
  17++C221 D1           	pop			de
  18++C222                  MMUSelectLayer1
  18++C222 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
  19++C226 CD C8 E0     	call		l1_print_at
  20++C229 E1           	pop			hl
  21++C22A C1           	pop			bc
  22++C22B 10 E6        	djnz		.BoilerTextLoop
  23++C22D C9           	ret
  24++C22E
# file closed: ./Menus/print_boiler_text_inlineInclude.asm
 205+ C22E              ;----------------------------------------------------------------------------------------------------------------------------------
 206+ C22E 2A 43 A3     MKT_GetCash:            ld		hl,(Cash+2)
 207+ C231 EB                                   ex      de,hl
 208+ C232 DD 2A 41 A3                          ld      ix,(Cash)
 209+ C236 FD 21 75 C0                          ld		iy,mkt_cash_amount
 210+ C23A CD D3 C0                             call 	MKT_DispDEIXtoIY1DP
 211+ C23D FD E5                                push    IY
 212+ C23F D1                                   pop     de
 213+ C240 21 89 C0                             ld      hl,mkt_cash_UoM
 214+ C243 01 0B 00                             ld      bc,11
 215+ C246 ED B0                                ldir
 216+ C248 C9                                   ret
 217+ C249              ;----------------------------------------------------------------------------------------------------------------------------------
 218+ C249 11 00 00     MKT_GetCargo:   	    ld      de,0
 219+ C24C DD 21 00 00                          ld      ix,0
 220+ C250 3A 47 A3                             ld      a,(CargoRunningLoad)
 221+ C253 DD 6F                                ld      ixl,a
 222+ C255 FD 21 94 C0                          ld		iy,mkt_cargo_amount
 223+ C259 CD EA C0                             call 	MKT_DispDEIXtoIY
 224+ C25C FD E5                                push    IY
 225+ C25E D1                                   pop     de
 226+ C25F 13                                   inc     de
 227+ C260 21 A8 C0                             ld      hl,mkt_cargo_UoM
 228+ C263 01 0B 00                             ld      bc,11
 229+ C266 ED B0                                ldir
 230+ C268 C9                                   ret
 231+ C269              ;----------------------------------------------------------------------------------------------------------------------------------
 232+ C269 CD 49 C2     MKT_DisplayCargo:       call	MKT_GetCargo
 233+ C26C 21 94 C0                             ld		hl,mkt_cargo_amount
 234+ C26F 11 48 A8                             ld      de,mkt_cargo_position
 235+ C272                                      MMUSelectLayer1
 235+ C272 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 236+ C276 CD C8 E0                             call	l1_print_at
 237+ C279 C9                                   ret
 238+ C27A              ;----------------------------------------------------------------------------------------------------------------------------------
 239+ C27A CD 2E C2     MKT_DisplayCash:        call	MKT_GetCash
 240+ C27D 21 75 C0                             ld		hl,mkt_cash_amount
 241+ C280 11 48 B0                             ld      de,mkt_cash_position
 242+ C283                                      MMUSelectLayer1
 242+ C283 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 243+ C287 CD C8 E0                             call	l1_print_at
 244+ C28A C9                                   ret
 245+ C28B              ;----------------------------------------------------------------------------------------------------------------------------------
 246+ C28B              ; "A = stock item number"
 247+ C28B F5           PrintMarketItem:        push     af
 248+ C28C 21 08 20                             ld      hl,market_position  ; hl = base cursor position + row number * 8
 249+ C28F 57                                   ld      d,a                 ; .
 250+ C290 1E 08                                ld      e,8                 ; .
 251+ C292 ED 30                                mul                         ; .
 252+ C294 53                                   ld      d,e                 ; .
 253+ C295 1E 00                                ld      e,0                 ; .
 254+ C297 19                                   add     hl,de               ; .
 255+ C298 22 41 C0                             ld      (market_cursor),hl  ; save in market cursor and copy to de
 256+ C29B EB                                   ex      hl,de               ; .
 257+ C29C 21 43 C0                             ld      hl,market_blank_line; hl = blank line text
 258+ C29F                                      MMUSelectLayer1             ; print blank line (hl) and position DE
 258+ C29F ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 259+ C2A3 CD C8 E0                             call	l1_print_at         ; .
 260+ C2A6 F1                                   pop     af
 261+ C2A7 DD 21 00 E0                          ld		ix,StockFood		; start 8 bytes before index as first add will shift
 262+ C2AB FD 21 48 A3                          ld      iy,CargoTonnes
 263+ C2AF 1E 08                                ld		e,8
 264+ C2B1 57                                   ld		d,a
 265+ C2B2 ED 30                                mul
 266+ C2B4 DD 19                                add		ix,de				; Move down a row ix += a * 8
 267+ C2B6 16 00                                ld      d,0
 268+ C2B8 5F                                   ld      e,a
 269+ C2B9 FD 19                                add     iy,de                ; cargo table is just 1 byte per item
 270+ C2BB              .GetName:               MMUSelectStockTable
 270+ C2BB ED 91 57 37 >                     nextreg StockTableMMU,     BankStockTable
 271+ C2BF DD 7E 00                             ld		a,(ix+0)
 272+ C2C2 21 DE A9                             ld		hl,WordIdx
 273+ C2C5 CD B3 A6                             call	getTableText
 274+ C2C8 ED 5B 41 C0                          ld		de,(market_cursor)
 275+ C2CC                                      MMUSelectLayer1
 275+ C2CC ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 276+ C2D0 CD C8 E0                             call	l1_print_at
 277+ C2D3              .GetUom                 MMUSelectStockTable
 277+ C2D3 ED 91 57 37 >                     nextreg StockTableMMU,     BankStockTable
 278+ C2D7 DD 7E 07                             ld		a,(ix+7)
 279+ C2DA C6 2E                                add		a,market_UomOffset
 280+ C2DC 21 DE A9                             ld		hl,WordIdx
 281+ C2DF CD B3 A6                             call	getTableText
 282+ C2E2 ED 5B 41 C0                          ld		de,(market_cursor)
 283+ C2E6 1E 68                                ld		e,market_uom
 284+ C2E8                                      MMUSelectLayer1
 284+ C2E8 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 285+ C2EC CD C8 E0                             call	l1_print_at
 286+ C2EF              .GetPrice:              MMUSelectStockTable
 286+ C2EF ED 91 57 37 >                     nextreg StockTableMMU,     BankStockTable
 287+ C2F3 DD 7E 02                             ld		a,(ix+2)
 288+ C2F6 11 34 C0                             ld		de,txt_market_amount
 289+ C2F9 CD AD C1                             call	MPM_DispPriceAtoDE
 290+ C2FC 21 34 C0                             ld		hl,txt_market_amount
 291+ C2FF ED 5B 41 C0                          ld		de,(market_cursor)
 292+ C303 1E 88                                ld		e,market_price
 293+ C305                                      MMUSelectLayer1
 293+ C305 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 294+ C309 CD C8 E0                             call	l1_print_at
 295+ C30C              .GetQty:                MMUSelectStockTable
 295+ C30C ED 91 57 37 >                     nextreg StockTableMMU,     BankStockTable
 296+ C310 DD 7E 01                             ld		a,(ix+1)
 297+ C313 11 39 C0                             ld		de,txt_market_quantity
 298+ C316 CD D4 C1                             call	MPM_DispQtyAtoDE
 299+ C319 21 39 C0                             ld		hl,txt_market_quantity
 300+ C31C ED 5B 41 C0                          ld		de,(market_cursor)
 301+ C320 1E B0                                ld		e,market_Quantity
 302+ C322                                      MMUSelectLayer1
 302+ C322 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 303+ C326 CD C8 E0                             call	l1_print_at
 304+ C329 FD 7E 00     .GetCargoQty:           ld      a,(iy+0)
 305+ C32C 11 3D C0                             ld      de,txt_market_cargo
 306+ C32F CD D4 C1                             call	MPM_DispQtyAtoDE
 307+ C332 21 3D C0                             ld      hl,txt_market_cargo
 308+ C335 ED 5B 41 C0                          ld      de,(market_cursor)
 309+ C339 1E E0                                ld      e,market_Cargo
 310+ C33B                                      MMUSelectLayer1
 310+ C33B ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 311+ C33F CD C8 E0                             call	l1_print_at
 312+ C342 C9                                   ret
 313+ C343
 314+ C343              draw_market_prices_menu:InitNoDoubleBuffer
 314+ C343             >                            MMUSelectLayer1
 314+ C343 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 314+ C347 CD 80 E0    >                            call	l1_cls
 314+ C34A 3E 07       >                            ld		a,7
 314+ C34C CD 9B E0    >                            call	l1_attr_cls_to_a
 314+ C34F             >                            MMUSelectLayer2
 314+ C34F ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 314+ C353 CD 09 E0    >                            call    asm_l2_double_buffer_off
 314+ C356 CD 01 E1    >                            call	l2_cls	; Get some space
 314+ C359             >                            MMUSelectSpriteBank
 314+ C359 ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
 314+ C35D CD A4 E4    >                            call    sprite_cls_cursors
 315+ C360 3E 20                                ld      a,$20
 316+ C362 32 EA 9D                             ld      (MenuIdMax),a
 317+ C365 01 01 01     .Drawbox:               ld		bc,$0101
 318+ C368 11 FD BE                             ld		de,$BEFD
 319+ C36B 3E C0                                ld		a,$C0
 320+ C36D                                      MMUSelectLayer2
 320+ C36D ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 321+ C371 CD 4B E2                             call	l2_draw_box
 322+ C374 01 01 0A                             ld		bc,$0A01
 323+ C377 11 C0 FE                             ld		de,$FEC0
 324+ C37A CD B5 E2                             call	l2_draw_horz_line
 325+ C37D 01 08 1A     .DrawProductLine        ld		bc,$1A08
 326+ C380 11 C0 50                             ld		de,$50C0
 327+ C383 CD B5 E2                             call	l2_draw_horz_line
 328+ C386 01 60 1A     .DrawUoMLine:           ld		bc,$1A60
 329+ C389 11 C0 18                             ld		de,$18C0
 330+ C38C CD B5 E2                             call	l2_draw_horz_line
 331+ C38F 01 80 1A     .DrawPriceLine:         ld		bc,$1A80
 332+ C392 11 C0 28                             ld		de,$28C0
 333+ C395 CD B5 E2                             call	l2_draw_horz_line
 334+ C398 01 B0 1A     .DrawStockLine:         ld		bc,$1AB0
 335+ C39B 11 C0 28                             ld		de,$28C0
 336+ C39E CD B5 E2                             call	l2_draw_horz_line
 337+ C3A1 01 E0 1A     .DrawInvLine:           ld		bc,$1AE0
 338+ C3A4 11 C0 18                             ld		de,$18C0
 339+ C3A7 CD B5 E2                             call	l2_draw_horz_line
 340+ C3AA 3A D4 9E     .StaticText:	        ld      a,(Galaxy)
 341+ C3AD                                      MMUSelectGalaxyA
 341+ C3AD ED 92 57    >                     nextreg GalaxyDataMMU,       a
 342+ C3B0 3E 19                                ld		a,25
 343+ C3B2 CD 7B AB                             call	expandTokenToString
 344+ C3B5 CD 7A F6                             call	GetDigramGalaxySeed
 345+ C3B8 06 09                                ld		b,9
 346+ C3BA 21 10 C0                             ld		hl,market_boiler_text
 347+ C3BD CD 13 C2                             call	MPM_print_boiler_text
 348+ C3C0              ; Generate the market list on screen
 349+ C3C0 3E 00        .DisplayPrices:         ld		a,0
 350+ C3C2 21 08 20                             ld		hl,market_position          ; set current cursor position on screen
 351+ C3C5 22 41 C0                             ld		(market_cursor),hl          ; .
 352+ C3C8 F5           MarketLoop:	            push	af
 353+ C3C9 CD 8B C2                             call	PrintMarketItem             ; display a single market item
 354+ C3CC F1                                   pop		af
 355+ C3CD 3C                                   inc		a
 356+ C3CE FE 11                                cp		17
 357+ C3D0 20 F6                                jr		nz,MarketLoop
 358+ C3D2 AF           .InitialHighlight:      xor     a
 359+ C3D3 32 74 C0                             ld      (mkt_selected_row),a        ; assume on row zero
 360+ C3D6 CD B3 C0                             call    mkt_highlight_row
 361+ C3D9 21 64 C0     .DisCargo:              ld      hl,mkt_hold_level
 362+ C3DC 11 10 A8                             ld      de,$A810
 363+ C3DF                                      MMUSelectLayer1
 363+ C3DF ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 364+ C3E3 CD C8 E0                             call	l1_print_at
 365+ C3E6 CD 69 C2                             call    MKT_DisplayCargo
 366+ C3E9 21 6C C0     .DisCash:               ld      hl,mkt_cash
 367+ C3EC 11 10 B0                             ld      de,$B010
 368+ C3EF                                      MMUSelectLayer1
 368+ C3EF ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 369+ C3F3 CD C8 E0                             call	l1_print_at
 370+ C3F6 CD 7A C2                             call    MKT_DisplayCash
 371+ C3F9 C9                                   ret
 372+ C3FA
 373+ C3FA
 374+ C3FA              ;----------------------------------------------------------------------------------------------------------------------------------
 375+ C3FA              ; Handles all the input whilst in the market menu
 376+ C3FA 3E 4A        loop_market_menu:       ld      a,c_Pressed_CursorUp
 377+ C3FC CD 0A 9B                             call    is_key_pressed
 378+ C3FF CC 1B C4                             call    z,mkt_UpPressed
 379+ C402 3E 4C                                ld      a,c_Pressed_CursorDown
 380+ C404 CD 0A 9B                             call    is_key_pressed
 381+ C407 CC 2C C4                             call    z,mkt_DownPressed
 382+ C40A 3E 08                                ld      a,c_Pressed_RollLeft
 383+ C40C CD 0A 9B                             call    is_key_pressed
 384+ C40F CC 48 C4                             call    z,mkt_LeftPressed
 385+ C412 3E 0A                                ld      a,c_Pressed_RollRight
 386+ C414 CD 0A 9B                             call    is_key_pressed
 387+ C417 CC 8B C4                             call    z,mkt_RightPressed
 388+ C41A C9                                   ret
 389+ C41B
 390+ C41B              ;----------------------------------------------------------------------------------------------------------------------------------
 391+ C41B 3A 74 C0     mkt_UpPressed:          ld      a,(mkt_selected_row)
 392+ C41E FE 00                                cp      0
 393+ C420 C8                                   ret     z
 394+ C421 CD C3 C0                             call    mkt_lowlight_row
 395+ C424 21 74 C0                             ld      hl,mkt_selected_row
 396+ C427 35                                   dec     (hl)
 397+ C428 CD B3 C0                             call    mkt_highlight_row
 398+ C42B C9                                   ret
 399+ C42C              ;----------------------------------------------------------------------------------------------------------------------------------
 400+ C42C 3E 4C        mkt_DownPressed:        ld      a,c_Pressed_CursorDown
 401+ C42E CD E5 9A                             call    get_key_a_state
 402+ C431 FE 01                                cp      1
 403+ C433 28 02                                jr      z,.ItsOK
 404+ C435 DD 01                                break
 405+ C437 3A 74 C0     .ItsOK:                        ld      a,(mkt_selected_row)
 406+ C43A FE 10                                cp      16
 407+ C43C C8                                   ret     z
 408+ C43D CD C3 C0                             call    mkt_lowlight_row
 409+ C440 21 74 C0                             ld      hl,mkt_selected_row
 410+ C443 34                                   inc     (hl)
 411+ C444 CD B3 C0                             call    mkt_highlight_row
 412+ C447 C9                                   ret
 413+ C448              ;----------------------------------------------------------------------------------------------------------------------------------
 414+ C448 3A 74 C0     mkt_LeftPressed:        ld      a,(mkt_selected_row)
 415+ C44B 21 48 A3                             ld      hl,CargoTonnes
 416+ C44E ED 31                                add     hl,a
 417+ C450 7E                                   ld      a,(hl)
 418+ C451 FE 00                                cp      0
 419+ C453 C8                                   ret     z
 420+ C454 35                                   dec     (hl)
 421+ C455 DD 21 00 E0                          ld      ix,StockFood
 422+ C459 3A 74 C0                             ld      a,(mkt_selected_row)
 423+ C45C 16 08                                ld      d,8
 424+ C45E 5F                                   ld      e,a
 425+ C45F ED 30                                mul
 426+ C461 DD 19                                add     ix,de
 427+ C463                                      MMUSelectStockTable
 427+ C463 ED 91 57 37 >                     nextreg StockTableMMU,     BankStockTable
 428+ C467 DD 34 01                             inc     (ix+1)
 429+ C46A DD 7E 07                             ld      a,(ix+7)
 430+ C46D FE 30                                cp      48
 431+ C46F 20 04                                jr      nz,.UnderATonne
 432+ C471 21 47 A3                             ld      hl,CargoRunningLoad
 433+ C474 35                                   dec     (hl)            ; We need to cosider UoM
 434+ C475 DD 7E 02     .UnderATonne:           ld      a,(ix+2)
 435+ C478 16 00                                ld      d,0
 436+ C47A 5F                                   ld      e,a
 437+ C47B CD D9 AD                             call    addDEtoCash
 438+ C47E                                      ; DO ADD CASH
 439+ C47E 3A 74 C0                             ld      a,(mkt_selected_row)
 440+ C481 CD 8B C2                             call    PrintMarketItem
 441+ C484 CD 69 C2                             call    MKT_DisplayCargo
 442+ C487 CD 7A C2                             call    MKT_DisplayCash
 443+ C48A C9                                   ret
 444+ C48B              ;----------------------------------------------------------------------------------------------------------------------------------
 445+ C48B              mkt_RightPressed:       MMUSelectStockTable
 445+ C48B ED 91 57 37 >                     nextreg StockTableMMU,     BankStockTable
 446+ C48F DD 21 00 E0                          ld      ix,StockFood
 447+ C493 3A 74 C0                             ld      a,(mkt_selected_row)
 448+ C496 16 08                                ld      d,8
 449+ C498 5F                                   ld      e,a
 450+ C499 ED 30                                mul
 451+ C49B DD 19                                add     ix,de
 452+ C49D 4F                                   ld      c,a
 453+ C49E DD 7E 01                             ld      a,(ix+1)
 454+ C4A1 FE 00                                cp      0
 455+ C4A3 C8                                   ret     z
 456+ C4A4 DD 7E 07     .CheckUoM:              ld      a,(ix+7)
 457+ C4A7 FE 30                                cp      48
 458+ C4A9 28 0F                                jr      z,.CheckCargo                       ; cargo is in tonnes
 459+ C4AB 3A 74 C0     .NotTonnage:            ld      a,(mkt_selected_row)
 460+ C4AE 21 48 A3                             ld      hl,CargoTonnes
 461+ C4B1 ED 31                                add     hl,a
 462+ C4B3 7E                                   ld      a,(hl)
 463+ C4B4 FE C8                                cp      200
 464+ C4B6 C8                                   ret     z                                   ; else its a 200 UoM limit
 465+ C4B7 C3 C0 C4                             jp      .CheckCash
 466+ C4BA 2A 46 A3     .CheckCargo:            ld      hl,(CargoBaySize)                   ; = h = runningload l = cargo bay size
 467+ C4BD 7C                                   ld      a,h
 468+ C4BE BD                                   cp      l
 469+ C4BF C8                                   ret     z                                   ; return if we have already maxed out
 470+ C4C0 2A 43 A3     .CheckCash:             ld      hl,(Cash+2)
 471+ C4C3 7C                                   ld      a,h
 472+ C4C4 B5                                   or      l
 473+ C4C5 20 0F                                jr      nz,.MoreThanRequired
 474+ C4C7 2A 41 A3                             ld      hl,(Cash)
 475+ C4CA 7C                                   ld      a,h
 476+ C4CB FE 00                                cp      0
 477+ C4CD 20 07                                jr      nz,.MoreThanRequired
 478+ C4CF DD 7E 02                             ld      a,(ix+2)
 479+ C4D2 BD                                   cp      l
 480+ C4D3 30 01                                jr      nc,.MoreThanRequired
 481+ C4D5 C9                                   ret                         ; Insufficient Funds
 482+ C4D6 19           .MoreThanRequired:      add     hl,de
 483+ C4D7 7C                                   ld      a,h
 484+ C4D8 B3                                   or      e
 485+ C4D9                                      ; check cash can we buy, and cargo capacity
 486+ C4D9 DD 35 01                             dec     (ix+1)
 487+ C4DC 3A 74 C0                             ld      a,(mkt_selected_row)
 488+ C4DF 21 48 A3                             ld      hl,CargoTonnes
 489+ C4E2 ED 31                                add     hl,a
 490+ C4E4 34                                   inc     (hl)
 491+ C4E5 DD 7E 07                             ld      a,(ix+7)
 492+ C4E8 47                                   ld      b,a
 493+ C4E9 FE 30                                cp      48
 494+ C4EB 20 05                                jr      nz,.UnderOneTonne
 495+ C4ED 78                                   ld      a,b
 496+ C4EE 21 47 A3                             ld      hl,CargoRunningLoad
 497+ C4F1 34                                   inc     (hl)
 498+ C4F2 DD 7E 02     .UnderOneTonne:         ld      a,(ix+2)
 499+ C4F5 16 00                                ld      d,0
 500+ C4F7 5F                                   ld      e,a
 501+ C4F8 CD EC AD                             call    subDEfromCash
 502+ C4FB 3A 74 C0                             ld      a,(mkt_selected_row)
 503+ C4FE CD 8B C2                             call    PrintMarketItem
 504+ C501 CD 69 C2                             call    MKT_DisplayCargo
 505+ C504 CD 7A C2                             call    MKT_DisplayCash
 506+ C507 C9                                   ret
# file closed: ./Menus/market_prices_menu.asm
 755  C508
 756  C508              ; Bank 66
 757  C508
 758  C508                  SLOT    DispMarketAddr
 759  C508                  PAGE    BankDispMarket
 760  C508                  ORG     DispMarketAddr
 761  C000                  INCLUDE "./Menus/market_prices_disp.asm"
# file opened: ./Menus/market_prices_disp.asm
   1+ C000 4D 61 72 6B  mktdisp_prices_page_marker  DB "MarketPricesPG54"
   1+ C004 65 74 50 72
   1+ C008 69 63 65 73
   1+ C00C 50 47 35 34
   2+ C010 50 02 3A AB  mktdisp_boiler_text		DW $0250,TextBuffer
   3+ C014 20 02 00 AC  						DW $0220,name_expanded
   4+ C018 80 0B 5A A7  						DW $0B80,WordUnit
   5+ C01C B0 0B A3 A9  						DW $0BB0,WordQuantity
   6+ C020 08 13 81 A9  						DW $1308,WordProduct
   7+ C024 60 13 89 A9  						DW $1360,WordUoM
   8+ C028 80 13 8D A9  						DW $1380,WordPrice
   9+ C02C B0 13 B1 A9  						DW $13B0,WordStock
  10+ C030 E0 13 AD A9  						DW $13E0,WordInv
  11+ C034
  12+ C034              ;char name[16];
  13+ C034              ;current_quantity;
  14+ C034              ;current_price;
  15+ C034              ;base_price;
  16+ C034              ;eco_adjust;
  17+ C034              ;base_quantity;
  18+ C034              ;mask;
  19+ C034              ;units;
  20+ C034
  21+ C034
  22+ C034 30 30 2E 30  txt_mktdisp_amount	    DB "00.0",0
  22+ C038 00
  23+ C039 39 39 39 00  txt_mktdisp_quantity    DB "999",0
  24+ C03D 39 39 39 00  txt_mktdisp_cargo       DB "999",0
  25+ C041 00 00        mktdisp_cursor			DW  $0000
  26+ C043              mktdisp_position		equ $2008
  27+ C043              mktdisp_uom				equ	$68
  28+ C043              mktdisp_price 			equ $88
  29+ C043              mktdisp_Quantity		equ	$B0
  30+ C043              mktdisp_Cargo           equ $E0
  31+ C043              mktdisp_UomOffset		equ 46
  32+ C043 20 20 20 20  mktdisp_blank_line      DB "                                ",0
  32+ C047 20 20 20 20
  32+ C04B 20 20 20 20
  32+ C04F 20 20 20 20
  32+ C053 20 20 20 20
  32+ C057 20 20 20 20
  32+ C05B 20 20 20 20
  32+ C05F 20 20 20 20
  32+ C063 00
  33+ C064 43 61 72 67  mktdisp_hold_level      DB "Cargo: ",0
  33+ C068 6F 3A 20 00
  34+ C06C 43 61 73 68  mktdisp_cash			DB "Cash : ",0
  34+ C070 20 3A 20 00
  35+ C074 00           mktdisp_selected_row    db  0
  36+ C075
  37+ C075              mktdisp_cash_position   equ $B048
  38+ C075 00 00 00...  mktdisp_cash_amount		DS 20
  39+ C089 20 43 72 20  mktdisp_cash_UoM        DB " Cr       ",0
  39+ C08D 20 20 20 20
  39+ C091 20 20 00
  40+ C094              mktdisp_cargo_position  equ $A848
  41+ C094 00 00 00...  mktdisp_cargo_amount	DS 20
  42+ C0A8 20 54 6F 6E  mktdisp_cargo_UoM       DB " Tonnes   ",0
  42+ C0AC 6E 65 73 20
  42+ C0B0 20 20 00
  43+ C0B3              ;                           12345678901
  44+ C0B3
  45+ C0B3 CD CA C0     mktdisp_DispDEIXtoIY1DP:    call    mktdisp_DispDEIXtoIY
  46+ C0B6 FD 36 02 00                          ld (iy+2),0
  47+ C0BA FD 7E 00                             ld      a,(IY+0)
  48+ C0BD FD 77 01                             ld      (IY+1),a
  49+ C0C0 3E 2E                                ld      a,"."
  50+ C0C2 FD 77 00                             ld      (IY+0),a
  51+ C0C5 FD 23                                inc     IY
  52+ C0C7 FD 23                                inc     IY
  53+ C0C9 C9                                   ret
  54+ C0CA              ;----------------------------------------------------------------------------------------------------------------------------------
  55+ C0CA DD 22 5F C1  mktdisp_DispDEIXtoIY:       ld (.MKTclcn32z),ix
  56+ C0CE ED 53 61 C1                          ld (.MKTclcn32zIX),de
  57+ C0D2 DD 21 5B C1                          ld ix,.MKTclcn32t+36
  58+ C0D6 06 09                                ld b,9
  59+ C0D8 0E 00                                ld c,0
  60+ C0DA 3E 30        .MKTclcn321:            ld a,'0'
  61+ C0DC B7                                   or a
  62+ C0DD DD 5E 00     .MKTclcn322:            ld e,(ix+0)
  63+ C0E0 DD 56 01                             ld d,(ix+1)
  64+ C0E3 2A 5F C1                             ld hl,(.MKTclcn32z)
  65+ C0E6 ED 52                                sbc hl,de
  66+ C0E8 22 5F C1                             ld (.MKTclcn32z),hl
  67+ C0EB DD 5E 02                             ld e,(ix+2)
  68+ C0EE DD 56 03                             ld d,(ix+3)
  69+ C0F1 2A 61 C1                             ld hl,(.MKTclcn32zIX)
  70+ C0F4 ED 52                                sbc hl,de
  71+ C0F6 22 61 C1                             ld (.MKTclcn32zIX),hl
  72+ C0F9 38 04                                jr c,.MKTclcn325
  73+ C0FB 0C                                   inc c
  74+ C0FC 3C                                   inc a
  75+ C0FD 18 DE                                jr .MKTclcn322
  76+ C0FF DD 5E 00     .MKTclcn325:            ld e,(ix+0)
  77+ C102 DD 56 01                             ld d,(ix+1)
  78+ C105 2A 5F C1                             ld hl,(.MKTclcn32z)
  79+ C108 19                                   add hl,de
  80+ C109 22 5F C1                             ld (.MKTclcn32z),hl
  81+ C10C DD 5E 02                             ld e,(ix+2)
  82+ C10F DD 56 03                             ld d,(ix+3)
  83+ C112 2A 61 C1                             ld hl,(.MKTclcn32zIX)
  84+ C115 ED 5A                                adc hl,de
  85+ C117 22 61 C1                             ld (.MKTclcn32zIX),hl
  86+ C11A 11 FC FF                             ld de,-4
  87+ C11D DD 19                                add ix,de
  88+ C11F 0C                                   inc c
  89+ C120 0D                                   dec c
  90+ C121 28 05                                jr z,.MKTclcn323
  91+ C123 FD 77 00                             ld (iy+0),a
  92+ C126 FD 23                                inc iy
  93+ C128 10 B0        .MKTclcn323:            djnz .MKTclcn321
  94+ C12A 3A 5F C1                             ld a,(.MKTclcn32z)
  95+ C12D C6 30                                add A,'0'
  96+ C12F FD 77 00                             ld (iy+0),a
  97+ C132 FD 36 01 00                          ld (iy+1),0
  98+ C136 C9                                   ret
  99+ C137 01 00 00 00  .MKTclcn32t             dw 1,0,     10,0,     100,0,     1000,0,       10000,0
  99+ C13B 0A 00 00 00
  99+ C13F 64 00 00 00
  99+ C143 E8 03 00 00
  99+ C147 10 27 00 00
 100+ C14B A0 86 01 00                          dw $86a0,1, $4240,$0f, $9680,$98, $e100,$05f5, $ca00,$3b9a
 100+ C14F 40 42 0F 00
 100+ C153 80 96 98 00
 100+ C157 00 E1 F5 05
 100+ C15B 00 CA 9A 3B
 101+ C15F 00 00        .MKTclcn32z             ds 2
 102+ C161 00 00        .MKTclcn32zIX           ds 2
 103+ C163              ;----------------------------------------------------------------------------------------------------------------------------------
 104+ C163              ; "DispHL, writes HL to DE address"
 105+ C163 01 F0 D8     MPD_DispHLtoDE:         ld	bc,-10000
 106+ C166 CD 7C C1                             call	MPD_Num1
 107+ C169 01 18 FC                             ld	bc,-1000
 108+ C16C CD 7C C1                             call	MPD_Num1
 109+ C16F 01 9C FF                             ld	bc,-100
 110+ C172 CD 7C C1                             call	MPD_Num1
 111+ C175 0E F6                                ld	c,-10
 112+ C177 CD 7C C1                             call	MPD_Num1
 113+ C17A 0E FF                                ld	c,-1
 114+ C17C 3E 2F        MPD_Num1:	            ld	a,'0'-1
 115+ C17E 3C           .Num2:	                inc	a
 116+ C17F 09                                   add	hl,bc
 117+ C180 38 FC                                jr	c,.Num2
 118+ C182 ED 42                                sbc	hl,bc
 119+ C184 12                                   ld	(de),a
 120+ C185 13                                   inc	de
 121+ C186 C9                                   ret
 122+ C187              ;----------------------------------------------------------------------------------------------------------------------------------
 123+ C187 26 00        MPD_DispAtoDE:          ld h,0
 124+ C189 6F                                   ld l,a
 125+ C18A C3 63 C1                             jp MPD_DispHLtoDE
 126+ C18D              ;----------------------------------------------------------------------------------------------------------------------------------
 127+ C18D 26 00        MPD_DispPriceAtoDE:     ld h,0
 128+ C18F 6F                                   ld l,a
 129+ C190 01 9C FF                             ld	bc,-100
 130+ C193 CD A3 C1                             call	.NumLeadBlank1
 131+ C196 0E F6                                ld	c,-10
 132+ C198 CD 7C C1                             call	MPD_Num1
 133+ C19B 3E 2E                                ld		a,'.'					; we could assume preformat but
 134+ C19D 12                                   ld		(de),a					; we can optimse that later TODO
 135+ C19E 13                                   inc		de						; with just an inc De
 136+ C19F 0E FF                                ld	c,-1
 137+ C1A1 18 D9                                jr		MPD_Num1
 138+ C1A3 3E 2F        .NumLeadBlank1:	        ld	a,'0'-1
 139+ C1A5 3C           .NumLeadBlank2:	        inc	a
 140+ C1A6 09                                   add	hl,bc
 141+ C1A7 38 FC                                jr	c,.NumLeadBlank2
 142+ C1A9 FE 30                                cp	'0'
 143+ C1AB 20 02                                jr	nz,.DontBlank
 144+ C1AD 3E 20        .Blank:                 ld	a,' '
 145+ C1AF ED 42        .DontBlank:	            sbc	hl,bc
 146+ C1B1 12                                   ld	(de),a
 147+ C1B2 13                                   inc	de
 148+ C1B3 C9                                   ret
 149+ C1B4              ;----------------------------------------------------------------------------------------------------------------------------------
 150+ C1B4 FE 00        MPD_DispQtyAtoDE:       cp	0
 151+ C1B6 28 30                                jr	z,.NoStock
 152+ C1B8 26 00                                ld h,0
 153+ C1BA 6F                                   ld l,a
 154+ C1BB 01 9C FF                             ld	bc,-100
 155+ C1BE CD D7 C1                             call	.NumLeadBlank1
 156+ C1C1 FE 20        .WasLead0:              cp      ' '
 157+ C1C3 20 09                                jr      nz,.NotHundredsZero
 158+ C1C5 0E F6                                ld	c,-10
 159+ C1C7 CD D7 C1                             call	.NumLeadBlank1
 160+ C1CA 0E FF                                ld	c,-1
 161+ C1CC 18 AE                                jr		MPD_Num1
 162+ C1CE 0E F6        .NotHundredsZero:       ld	c,-10
 163+ C1D0 CD 7C C1                             call	MPD_Num1
 164+ C1D3 0E FF                                ld	c,-1
 165+ C1D5 18 A5                                jr		MPD_Num1
 166+ C1D7 3E 2F        .NumLeadBlank1:	        ld	a,'0'-1
 167+ C1D9 3C           .NumLeadBlank2:	        inc	a
 168+ C1DA 09                                   add	hl,bc
 169+ C1DB 38 FC                                jr	c,.NumLeadBlank2
 170+ C1DD FE 30                                cp	'0'
 171+ C1DF 20 02                                jr	nz,.DontBlank
 172+ C1E1 3E 20        .Blank:                 ld	a,' '
 173+ C1E3 ED 42        .DontBlank:	            sbc	hl,bc
 174+ C1E5 12                                   ld	(de),a
 175+ C1E6 13                                   inc	de
 176+ C1E7 C9                                   ret
 177+ C1E8 3E 20        .NoStock:               ld	a,' '
 178+ C1EA 12                                   ld	(de),a
 179+ C1EB 13                                   inc	de
 180+ C1EC 12                                   ld	(de),a
 181+ C1ED 13                                   inc	de
 182+ C1EE 3E 2D                                ld	a,'-'
 183+ C1F0 12                                   ld	(de),a
 184+ C1F1 13                                   inc de
 185+ C1F2 C9                                   ret
 186+ C1F3              ;----------------------------------------------------------------------------------------------------------------------------------
 187+ C1F3              MPD_print_boiler_text:  INCLUDE "Menus/print_boiler_text_inlineInclude.asm"
# file opened: ./Menus/print_boiler_text_inlineInclude.asm
   1++C1F3
   2++C1F3              ;">print_boilder_text hl = text structure, b = message count"
   3++C1F3              .BoilerTextLoop:
   4++C1F3 C5           	push		bc			; Save Message Count loop value
   5++C1F4 4E           	ld			c,(hl)		; Get Row into b
   6++C1F5 23           	inc			hl
   7++C1F6 46           	ld			b,(hl)		; Get Col into b
   8++C1F7 23           	inc			hl
   9++C1F8 5E           	ld			e,(hl)		; Get text address Lo into E
  10++C1F9 23           	inc			hl
  11++C1FA 56           	ld			d,(hl)		; Get text address Hi into E
  12++C1FB 23           	inc			hl
  13++C1FC E5           	push		hl			; Save present HL to stack as this is the address for the next message
  14++C1FD EB           	ex			de,hl		; now hl = address of text data
  15++C1FE 1E FF        	ld			e,txt_status_colour
  16++C200 C5           	push		bc
  17++C201 D1           	pop			de
  18++C202                  MMUSelectLayer1
  18++C202 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
  19++C206 CD C8 E0     	call		l1_print_at
  20++C209 E1           	pop			hl
  21++C20A C1           	pop			bc
  22++C20B 10 E6        	djnz		.BoilerTextLoop
  23++C20D C9           	ret
  24++C20E
# file closed: ./Menus/print_boiler_text_inlineInclude.asm
 188+ C20E              ;----------------------------------------------------------------------------------------------------------------------------------
 189+ C20E 2A 43 A3     mktdisp_GetCash:            ld		hl,(Cash+2)
 190+ C211 EB                                   ex      de,hl
 191+ C212 DD 2A 41 A3                          ld      ix,(Cash)
 192+ C216 FD 21 75 C0                          ld		iy,mktdisp_cash_amount
 193+ C21A CD B3 C0                             call 	mktdisp_DispDEIXtoIY1DP
 194+ C21D FD E5                                push    IY
 195+ C21F D1                                   pop     de
 196+ C220 21 89 C0                             ld      hl,mktdisp_cash_UoM
 197+ C223 01 0B 00                             ld      bc,11
 198+ C226 ED B0                                ldir
 199+ C228 C9                                   ret
 200+ C229              ;----------------------------------------------------------------------------------------------------------------------------------
 201+ C229 11 00 00     mktdisp_GetCargo:   	ld      de,0
 202+ C22C DD 21 00 00                          ld      ix,0
 203+ C230 3A 47 A3                             ld      a,(CargoRunningLoad)
 204+ C233 DD 6F                                ld      ixl,a
 205+ C235 FD 21 94 C0                          ld		iy,mktdisp_cargo_amount
 206+ C239 CD CA C0                             call 	mktdisp_DispDEIXtoIY
 207+ C23C FD E5                                push    IY
 208+ C23E D1                                   pop     de
 209+ C23F 13                                   inc     de
 210+ C240 21 A8 C0                             ld      hl,mktdisp_cargo_UoM
 211+ C243 01 0B 00                             ld      bc,11
 212+ C246 ED B0                                ldir
 213+ C248 C9                                   ret
 214+ C249              ;----------------------------------------------------------------------------------------------------------------------------------
 215+ C249 CD 29 C2     mktdisp_DisplayCargo:   call	mktdisp_GetCargo
 216+ C24C 21 94 C0                             ld		hl,mktdisp_cargo_amount
 217+ C24F 11 48 A8                             ld      de,mktdisp_cargo_position
 218+ C252                                      MMUSelectLayer1
 218+ C252 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 219+ C256 CD C8 E0                             call	l1_print_at
 220+ C259 C9                                   ret
 221+ C25A              ;----------------------------------------------------------------------------------------------------------------------------------
 222+ C25A CD 0E C2     mktdisp_DisplayCash:        call	mktdisp_GetCash
 223+ C25D 21 75 C0                             ld		hl,mktdisp_cash_amount
 224+ C260 11 48 B0                             ld      de,mktdisp_cash_position
 225+ C263                                      MMUSelectLayer1
 225+ C263 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 226+ C267 CD C8 E0                             call	l1_print_at
 227+ C26A C9                                   ret
 228+ C26B              ;----------------------------------------------------------------------------------------------------------------------------------
 229+ C26B              ; "A = stock item number"
 230+ C26B F5           PrintMktDispItem:       push     af
 231+ C26C 21 08 20                             ld      hl,mktdisp_position
 232+ C26F 57                                   ld      d,a
 233+ C270 1E 08                                ld      e,8
 234+ C272 ED 30                                mul
 235+ C274 53                                   ld      d,e
 236+ C275 1E 00                                ld      e,0
 237+ C277 19                                   add     hl,de
 238+ C278 22 41 C0                             ld      (mktdisp_cursor),hl
 239+ C27B EB                                   ex      hl,de
 240+ C27C 21 43 C0                             ld      hl,mktdisp_blank_line
 241+ C27F                                      MMUSelectLayer1
 241+ C27F ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 242+ C283 CD C8 E0                             call	l1_print_at
 243+ C286 F1                                   pop     af
 244+ C287 DD 21 00 E0                          ld		ix,StockFood		; start 8 bytes before index as first add will shift
 245+ C28B FD 21 48 A3                          ld      iy,CargoTonnes
 246+ C28F 1E 08                                ld		e,8
 247+ C291 57                                   ld		d,a
 248+ C292 ED 30                                mul
 249+ C294 DD 19                                add		ix,de				; Move down a row ix += a * 8
 250+ C296 16 00                                ld      d,0
 251+ C298 5F                                   ld      e,a
 252+ C299 FD 19                                add     iy,de                ; cargo table is just 1 byte per item
 253+ C29B              .GetName:               MMUSelectStockTable
 253+ C29B ED 91 57 37 >                     nextreg StockTableMMU,     BankStockTable
 254+ C29F DD 7E 00                             ld		a,(ix+0)
 255+ C2A2 21 DE A9                             ld		hl,WordIdx
 256+ C2A5 CD B3 A6                             call	getTableText
 257+ C2A8 ED 5B 41 C0                          ld		de,(mktdisp_cursor)
 258+ C2AC                                      MMUSelectLayer1
 258+ C2AC ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 259+ C2B0 CD C8 E0                             call	l1_print_at
 260+ C2B3              .GetUom                 MMUSelectStockTable
 260+ C2B3 ED 91 57 37 >                     nextreg StockTableMMU,     BankStockTable
 261+ C2B7 DD 7E 07                             ld		a,(ix+7)
 262+ C2BA C6 2E                                add		a,mktdisp_UomOffset
 263+ C2BC 21 DE A9                             ld		hl,WordIdx
 264+ C2BF CD B3 A6                             call	getTableText
 265+ C2C2 ED 5B 41 C0                          ld		de,(mktdisp_cursor)
 266+ C2C6 1E 68                                ld		e,mktdisp_uom
 267+ C2C8                                      MMUSelectLayer1
 267+ C2C8 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 268+ C2CC CD C8 E0                             call	l1_print_at
 269+ C2CF              .GetPrice:              MMUSelectStockTable
 269+ C2CF ED 91 57 37 >                     nextreg StockTableMMU,     BankStockTable
 270+ C2D3 DD 7E 02                             ld		a,(ix+2)
 271+ C2D6 11 34 C0                             ld		de,txt_mktdisp_amount
 272+ C2D9 CD 8D C1                             call	MPD_DispPriceAtoDE
 273+ C2DC 21 34 C0                             ld		hl,txt_mktdisp_amount
 274+ C2DF ED 5B 41 C0                          ld		de,(mktdisp_cursor)
 275+ C2E3 1E 88                                ld		e,mktdisp_price
 276+ C2E5                                      MMUSelectLayer1
 276+ C2E5 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 277+ C2E9 CD C8 E0                             call	l1_print_at
 278+ C2EC              .GetQty:                MMUSelectStockTable
 278+ C2EC ED 91 57 37 >                     nextreg StockTableMMU,     BankStockTable
 279+ C2F0 DD 7E 01                             ld		a,(ix+1)
 280+ C2F3 11 39 C0                             ld		de,txt_mktdisp_quantity
 281+ C2F6 CD B4 C1                             call	MPD_DispQtyAtoDE
 282+ C2F9 21 39 C0                             ld		hl,txt_mktdisp_quantity
 283+ C2FC ED 5B 41 C0                          ld		de,(mktdisp_cursor)
 284+ C300 1E B0                                ld		e,mktdisp_Quantity
 285+ C302                                      MMUSelectLayer1
 285+ C302 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 286+ C306 CD C8 E0                             call	l1_print_at
 287+ C309 FD 7E 00     .GetCargoQty:           ld      a,(iy+0)
 288+ C30C 11 3D C0                             ld      de,txt_mktdisp_cargo
 289+ C30F CD B4 C1                             call	MPD_DispQtyAtoDE
 290+ C312 21 3D C0                             ld      hl,txt_mktdisp_cargo
 291+ C315 ED 5B 41 C0                          ld      de,(mktdisp_cursor)
 292+ C319 1E E0                                ld      e,mktdisp_Cargo
 293+ C31B                                      MMUSelectLayer1
 293+ C31B ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 294+ C31F CD C8 E0                             call	l1_print_at
 295+ C322 C9                                   ret
 296+ C323
 297+ C323              draw_mktdisp_prices_menu:InitNoDoubleBuffer
 297+ C323             >                            MMUSelectLayer1
 297+ C323 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 297+ C327 CD 80 E0    >                            call	l1_cls
 297+ C32A 3E 07       >                            ld		a,7
 297+ C32C CD 9B E0    >                            call	l1_attr_cls_to_a
 297+ C32F             >                            MMUSelectLayer2
 297+ C32F ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 297+ C333 CD 09 E0    >                            call    asm_l2_double_buffer_off
 297+ C336 CD 01 E1    >                            call	l2_cls	; Get some space
 297+ C339             >                            MMUSelectSpriteBank
 297+ C339 ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
 297+ C33D CD A4 E4    >                            call    sprite_cls_cursors
 298+ C340 3E 20                                ld      a,$20
 299+ C342 32 EA 9D                             ld      (MenuIdMax),a
 300+ C345 01 01 01     .Drawbox:               ld		bc,$0101
 301+ C348 11 FD BE                             ld		de,$BEFD
 302+ C34B 3E C0                                ld		a,$C0
 303+ C34D                                      MMUSelectLayer2
 303+ C34D ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 304+ C351 CD 4B E2                             call	l2_draw_box
 305+ C354 01 01 0A                             ld		bc,$0A01
 306+ C357 11 C0 FE                             ld		de,$FEC0
 307+ C35A CD B5 E2                             call	l2_draw_horz_line
 308+ C35D 01 08 1A     .DrawProductLine        ld		bc,$1A08
 309+ C360 11 C0 50                             ld		de,$50C0
 310+ C363 CD B5 E2                             call	l2_draw_horz_line
 311+ C366 01 60 1A     .DrawUoMLine:           ld		bc,$1A60
 312+ C369 11 C0 18                             ld		de,$18C0
 313+ C36C CD B5 E2                             call	l2_draw_horz_line
 314+ C36F 01 80 1A     .DrawPriceLine:         ld		bc,$1A80
 315+ C372 11 C0 28                             ld		de,$28C0
 316+ C375 CD B5 E2                             call	l2_draw_horz_line
 317+ C378 01 B0 1A     .DrawStockLine:         ld		bc,$1AB0
 318+ C37B 11 C0 28                             ld		de,$28C0
 319+ C37E CD B5 E2                             call	l2_draw_horz_line
 320+ C381 01 E0 1A     .DrawInvLine:           ld		bc,$1AE0
 321+ C384 11 C0 18                             ld		de,$18C0
 322+ C387 CD B5 E2                             call	l2_draw_horz_line
 323+ C38A 3A D4 9E     .StaticText:	        ld      a,(Galaxy)
 324+ C38D                                      MMUSelectGalaxyA
 324+ C38D ED 92 57    >                     nextreg GalaxyDataMMU,       a
 325+ C390 3E 19                                ld		a,25
 326+ C392 CD 7B AB                             call	expandTokenToString
 327+ C395 CD 7A F6                             call	GetDigramGalaxySeed
 328+ C398 06 09                                ld		b,9
 329+ C39A 21 10 C0                             ld		hl,mktdisp_boiler_text
 330+ C39D CD F3 C1                             call	MPD_print_boiler_text
 331+ C3A0 3E 00        .DisplayPrices:         ld		a,0
 332+ C3A2 21 08 20                             ld		hl,mktdisp_position
 333+ C3A5 22 41 C0                             ld		(mktdisp_cursor),hl
 334+ C3A8 F5           .MarketLoop:	        push	af
 335+ C3A9 CD 6B C2                             call	PrintMktDispItem
 336+ C3AC F1                                   pop		af
 337+ C3AD 3C                                   inc		a
 338+ C3AE FE 11                                cp		17
 339+ C3B0 20 F6                                jr		nz,.MarketLoop
 340+ C3B2 21 64 C0     .DisCargo:              ld      hl,mktdisp_hold_level
 341+ C3B5 11 10 A8                             ld      de,$A810
 342+ C3B8                                      MMUSelectLayer1
 342+ C3B8 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 343+ C3BC CD C8 E0                             call	l1_print_at
 344+ C3BF CD 49 C2                             call    mktdisp_DisplayCargo
 345+ C3C2 21 6C C0     .DisCash:               ld      hl,mktdisp_cash
 346+ C3C5 11 10 B0                             ld      de,$B010
 347+ C3C8                                      MMUSelectLayer1
 347+ C3C8 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 348+ C3CC CD C8 E0                             call	l1_print_at
 349+ C3CF CD 5A C2                             call    mktdisp_DisplayCash
 350+ C3D2 C9                                   ret
 351+ C3D3
 352+ C3D3
# file closed: ./Menus/market_prices_disp.asm
 762  C3D3
 763  C3D3              ; Bank 55
 764  C3D3
 765  C3D3                  SLOT    StockTableAddr
 766  C3D3                  PAGE    BankStockTable
 767  C3D3                  ORG     StockTableAddr
 768  E000                  INCLUDE "./Tables/stock_table.asm"
# file opened: ./Tables/stock_table.asm
   1+ E000
   2+ E000
   3+ E000              ;                       Can Buy
   4+ E000              ;                       computed row on screen considering what stock is visible
   5+ E000              ;                       Show
   6+ E000              ;                       Tech Level
   7+ E000              ;                       Price
   8+ E000              ;                       Name
   9+ E000              ;                       TypeId
  10+ E000
  11+ E000
  12+ E000              ;char name[16];
  13+ E000              ;current_quantity;
  14+ E000              ;current_price;
  15+ E000              ;base_price;
  16+ E000              ;eco_adjust;
  17+ E000              ;base_quantity;
  18+ E000              ;mask;
  19+ E000              ;units;
  20+ E000
  21+ E000              ;						nam	currr   CR  Ecadj  Qty  Msk  UoM
  22+ E000 20 00 00 13  StockFood			DB  32,  0, 0,  19, -2,      6, $01, 48  ; 01
  22+ E004 FE 06 01 30
  23+ E008 21 00 00 14  StockTextiles		DB	33,  0, 0,  20, -1,     10, $03, 48  ; 02
  23+ E00C FF 0A 03 30
  24+ E010 22 00 00 41  StockRadioactives	DB  34,  0, 0,  65, -3,      2, $07, 48  ; 03
  24+ E014 FD 02 07 30
  25+ E018 23 00 00 28  StockSlaves			DB  35,  0, 0,  40, -5,    226, $1F, 48  ; 04
  25+ E01C FB E2 1F 30
  26+ E020 24 00 00 53  StockLiquorWines	DB  36,  0, 0,  83, -5,    251, $0F, 48  ; 05
  26+ E024 FB FB 0F 30
  27+ E028 25 00 00 C4  StockLuxuries		DB  37,  0, 0, 196,  8,     54, $03, 48  ; 06
  27+ E02C 08 36 03 30
  28+ E030 26 00 00 EB  StockNarcotics		DB  38,  0, 0, 235, 29,      8, $78, 48  ; 07
  28+ E034 1D 08 78 30
  29+ E038 19 00 00 9A  StockComputers		DB  25,  0, 0, 154, 14,     56, $03, 48  ; 08
  29+ E03C 0E 38 03 30
  30+ E040 27 00 00 75  StockMachinery		DB  39,  0, 0, 117,  6,     40, $07, 48  ; 09
  30+ E044 06 28 07 30
  31+ E048 28 00 00 4E  StockAlloys			DB  40,  0, 0,  78,  1,     17, $1F, 48  ; 11
  31+ E04C 01 11 1F 30
  32+ E050 29 00 00 7C  StockFirearms   	DB  41,  0, 0, 124, 13,     29, $07, 48  ; 12
  32+ E054 0D 1D 07 30
  33+ E058 2A 00 00 B0  StockFurs       	DB  42,  0, 0, 176, -9,    220, $3F, 48  ; 13
  33+ E05C F7 DC 3F 30
  34+ E060 2B 00 00 20  StockMinerals   	DB  43,  0, 0,  32, -1,     53, $03, 48  ; 14
  34+ E064 FF 35 03 30
  35+ E068 2C 00 00 61  StockGold       	DB  44,  0, 0,  97, -1,     66, $07, 49  ; 15
  35+ E06C FF 42 07 31
  36+ E070 2D 00 00 AB  StockPlatinum   	DB  45,  0, 0, 171, -2,     55, $1F, 49  ; 16
  36+ E074 FE 37 1F 31
  37+ E078 2E 00 00 2D  StockGemStones 		DB  46,  0, 0,  45, -1,    250, $0F, 50  ; 17
  37+ E07C FF FA 0F 32
  38+ E080 2F 00 00 35  StockAlienItems		DB  47,  0, 0,  53, 15,    192, $07, 48  ; 18
  38+ E084 0F C0 07 30
  39+ E088
  40+ E088
  41+ E088              ;.QQ23	\Prxs -> &3DA6 \  Market prices info
  42+ E088              ;\ base_price, gradient sign+5bits, base_quantity, mask, units 2bits
  43+ E088              ;13 82 06 01			EQUD &01068213 \ Food
  44+ E088              ;14 81 0A 03 		EQUD &030A8114 \ Textiles
  45+ E088              ;41 83 02 07 		EQUD &07028341 \ Radioactives
  46+ E088              ;28 85 E2 1F 		EQUD &1FE28528 \ Slaves
  47+ E088              ;53 85 FB 0F 		EQUD &0FFB8553 \ Liquor/Wines
  48+ E088              ;C4 08 36 03 		EQUD &033608C4 \ Luxuries
  49+ E088              ;EB 1D 08 78 		EQUD &78081DEB \ Narcotics
  50+ E088              ;9A 0E 38 03 		EQUD &03380E9A \ Computers
  51+ E088              ;75 06 28 07 		EQUD &07280675 \ Machinery
  52+ E088              ;4E 01 11 1F 		EQUD &1F11014E \ Alloys
  53+ E088              ;7C 0D 1D 07 		EQUD &071D0D7C \ Firearms
  54+ E088              ;B0 89 DC 3F 		EQUD &3FDC89B0 \ Furs
  55+ E088              ;20 81 35 03 		EQUD &03358120 \ Minerals
  56+ E088              ;61 A1 42 07 		EQUD &0742A161 \ Gold
  57+ E088              ;AB A2 37 1F 		EQUD &1F37A2AB \ Platinum
  58+ E088              ;2D C1 FA 0F 		EQUD &0FFAC12D \ Gem-Stones
  59+ E088              ;35 0F C0 07 		EQUD &07C00F35 \ Alien Items
  60+ E088
  61+ E088
  62+ E088              FoodIndex               EQU 01
  63+ E088              TextilesIndex           EQU 02
  64+ E088              RadioactivesIndex       EQU 03
  65+ E088              SlavesIndex             EQU 04
  66+ E088              LiquorWinesIndex        EQU 05
  67+ E088              LuxuriesIndex           EQU 06
  68+ E088              NarcoticsIndex          EQU 07
  69+ E088              ComputersIndex          EQU 08
  70+ E088              MachineryIndex          EQU 09
  71+ E088              AlloysIndex             EQU 10
  72+ E088              FirearmsIndex           EQU 11
  73+ E088              FursIndex               EQU 12
  74+ E088              MineralsIndex           EQU 13
  75+ E088              GoldIndex               EQU 14
  76+ E088              PlatinumIndex           EQU 15
  77+ E088              GemStonesIndex          EQU 16
  78+ E088              AlienItemsIndex		    equ 17
  79+ E088              StockListLen		    equ	18
  80+ E088
  81+ E088 00 E0 08 E0  StockItemTable		    DW 	StockFood,  StockTextiles,	   StockRadioactives
  81+ E08C 10 E0
  82+ E08E 18 E0 20 E0                          DW 	StockSlaves, StockLiquorWines, StockLuxuries
  82+ E092 28 E0
  83+ E094 30 E0 38 E0                          DW 	StockNarcotics, StockComputers, StockMachinery
  83+ E098 40 E0
  84+ E09A 48 E0 50 E0                          DW	StockAlloys, StockFirearms, StockFurs
  84+ E09E 58 E0
  85+ E0A0 60 E0 68 E0                          DW  StockMinerals, StockGold, StockPlatinum
  85+ E0A4 70 E0
  86+ E0A6 78 E0 80 E0                          DW  StockGemStones, StockAlienItems
  87+ E0AA
  88+ E0AA 06 FF        generate_stock_market:  ld		b,$FF				; so the first iteration puts it at 0
  89+ E0AC CD CF A3                             call	copy_galaxy_to_system
  90+ E0AF DD 21 F8 DF                          ld		ix,StockFood-8		; start 8 bytes before index as first add will shift
  91+ E0B3 11 08 00     .generate_stock_loop:   ld		de,8
  92+ E0B6 DD 19                                add		ix,de				; Move down a row
  93+ E0B8 04                                   inc		b
  94+ E0B9 DD 4E 03     .CalcPrice:	            ld		c,(ix+3);			; c = base price
  95+ E0BC 3A 5D 9E                             ld		a,(RandomMarketSeed)
  96+ E0BF DD A6 06                             and		(ix+6)				; and with market mask
  97+ E0C2 81                                   add		a,c
  98+ E0C3 4F                                   ld		c,a					; c = base + rand & market mask
  99+ E0C4 3A 69 9E                             ld		a,(DisplayEcononmy)	; d= economy
 100+ E0C7 57                                   ld		d,a
 101+ E0C8 DD 7E 04                             ld		a,(ix+4)
 102+ E0CB 5F                                   ld		e,a					; e  = economy adjust
 103+ E0CC CB 7B                                bit		7,e
 104+ E0CE 20 04                                jr		nz,.PosMul			; it could be negative and we onnly want
 105+ E0D0              ;.NegMul:						; e reg from mulitply not a 2'c 16 bit word
 106+ E0D0 7B                                   ld		a,e
 107+ E0D1 ED 44                                neg
 108+ E0D3 5F                                   ld		e,a
 109+ E0D4              .PosMul:
 110+ E0D4 7B                                   ld		a,e
 111+ E0D5 ED 44                                neg
 112+ E0D7 5F                                   ld		e,a
 113+ E0D8 ED 30                                mul
 114+ E0DA 79                                   ld		a,c
 115+ E0DB 83                                   add		a,e
 116+ E0DC CB 27                                sla		a
 117+ E0DE CB 27                                sla		a					; Multply price by 4
 118+ E0E0 DD 77 02                             ld		(ix+2),a			; Now have set price
 119+ E0E3 DD 4E 05     .CalcQty:	            ld		c,(ix+5);			; c = base price
 120+ E0E6 3A 5D 9E                             ld		a,(RandomMarketSeed)
 121+ E0E9 DD A6 06                             and		(ix+6)				; and with market mask
 122+ E0EC 81                                   add		a,c
 123+ E0ED 4F                                   ld		c,a					; c = base + rand & market mask
 124+ E0EE 3A 69 9E                             ld		a,(DisplayEcononmy)	; d= economy
 125+ E0F1 57                                   ld		d,a
 126+ E0F2 DD 7E 04                             ld		a,(ix+4)
 127+ E0F5 5F                                   ld		e,a					; e  = economy adjust
 128+ E0F6 CB 7B                                bit		7,e
 129+ E0F8 20 04                                jr		nz,.PosQtyMul			; it could be negative and we onnly want
 130+ E0FA 7B           .NegQtyMul:				ld		a,e		; e reg from mulitply not a 2'c 16 bit word
 131+ E0FB ED 44                                neg
 132+ E0FD 5F                                   ld		e,a
 133+ E0FE 7B           .PosQtyMul:             ld		a,e
 134+ E0FF ED 44                                neg
 135+ E101 5F                                   ld		e,a
 136+ E102 ED 30                                mul
 137+ E104 79                                   ld		a,c
 138+ E105 93                                   sub		e
 139+ E106 DD 77 01                             ld		(ix+1),a			; Now have set quanity
 140+ E109 78                                   ld		a,b
 141+ E10A FE 11                                cp		AlienItemsIndex
 142+ E10C 20 A5                                jr		nz,.generate_stock_loop
 143+ E10E AF                                   xor		a
 144+ E10F DD 77 01                             ld		(ix+1),a			; Now have set quanity of alient items to always 0 in stock
 145+ E112 C9                                   ret
 146+ E113
# file closed: ./Tables/stock_table.asm
 769  E113
 770  E113              ; Bank 57
 771  E113
 772  E113                  SLOT    LAYER2Addr
 773  E113                  PAGE    BankLAYER2
 774  E113                  ORG     LAYER2Addr
 775  E000
 776  E000                  INCLUDE "./Layer2Graphics/layer2_bank_select.asm"
# file opened: ./Layer2Graphics/layer2_bank_select.asm
   1+ E000
   2+ E000 00           varL2_BANK_SELECTED			 DB	0
   3+ E001 00           varL2_BUFFER_MODE            DB 0
   4+ E002 00           varL2_ACCESS_MODE            DB 0
   5+ E003
   6+ E003 3E 08        asm_l2_double_buffer_on:    ld      a,8
   7+ E005 32 01 E0                                 ld      (varL2_BUFFER_MODE),a
   8+ E008 C9                                       ret
   9+ E009
  10+ E009 AF           asm_l2_double_buffer_off:   xor     a
  11+ E00A 32 01 E0                                 ld      (varL2_BUFFER_MODE),a
  12+ E00D C9                                       ret
  13+ E00E
  14+ E00E 01 3B 12     asm_disable_l2_readwrite:   ld      bc, IO_LAYER2_PORT
  15+ E011 ED 70                                    in      (c)
  16+ E013 32 02 E0                                 ld      (varL2_ACCESS_MODE),a
  17+ E016 E6 FA                                    and     LAYER2_DISABLE_MEM_ACCESS
  18+ E018 ED 79                                    out     (c),a
  19+ E01A C9                                       ret
  20+ E01B
  21+ E01B 3A 02 E0     asm_restore_l2_readwrite:   ld      a,(varL2_ACCESS_MODE)
  22+ E01E E6 05                                    and     LAYER2_READ_WRITE_MASK
  23+ E020 57                                       ld      d,a
  24+ E021 01 3B 12                                 ld      bc, IO_LAYER2_PORT
  25+ E024 ED 70                                    in      (c)
  26+ E026 32 02 E0                                 ld      (varL2_ACCESS_MODE),a
  27+ E029 A2                                       and     d
  28+ E02A ED 79                                    out     (c),a
  29+ E02C C9                                       ret
  30+ E02D
  31+ E02D 01 3B 12     asm_enable_l2_readwrite:    ld      bc, IO_LAYER2_PORT
  32+ E030 ED 70                                    in      (c)
  33+ E032 F6 05                                    or      LAYER2_READ_WRITE_MASK
  34+ E034 ED 79                                    out     (c),a
  35+ E036 C9                                       ret
  36+ E037
  37+ E037              ; "asm_l2_bank_select"
  38+ E037              ; " a = sepecific bank mask value to select, does not set varL2_BANK_SELECTED"
  39+ E037 57           asm_l2_bank_select:         ld      d,a
  40+ E038 FE 00                                    cp      0
  41+ E03A 28 0A                                    jr      z,.NotBreakDebug
  42+ E03C FE 40                                    cp      $40
  43+ E03E 28 06                                    jr      z,.NotBreakDebug
  44+ E040 FE 80                                    cp      $80
  45+ E042 28 02                                    jr      z,.NotBreakDebug
  46+ E044 DD 01                                    break
  47+ E046              .NotBreakDebug:
  48+ E046 3A 01 E0                                 ld      a,(varL2_BUFFER_MODE)
  49+ E049 F6 03                                    or		LAYER2_VISIBLE_MASK  |  LAYER2_WRITE_ENABLE_MASK
  50+ E04B B2                                       or      d; | LAYER2_SHADOW_SCREEN_MASK
  51+ E04C 01 3B 12                                 ld 		bc, IO_LAYER2_PORT
  52+ E04F ED 79                                    out 	(c),a
  53+ E051 C9                                       ret
  54+ E052              ;  "asm_l2_bank_select a = sepecific bank number to select, dsets varL2_BANK_SELECTED"
  55+ E052 32 00 E0     asm_l2_bank_n_select:       ld		(varL2_BANK_SELECTED),a
  56+ E055 FE 00                                    cp		0
  57+ E057 20 04                                    jr 		nz,.nottopbank
  58+ E059 3E 00        .topbank:                   ld		a,LAYER2_SHIFTED_SCREEN_TOP
  59+ E05B 18 DA                                    jr		asm_l2_bank_select
  60+ E05D FE 01        .nottopbank:                cp		1
  61+ E05F 20 04                                    jr 		nz,.notmiddlebank
  62+ E061 3E 40        .middlebank:                ld		a,LAYER2_SHIFTED_SCREEN_MIDDLE
  63+ E063 18 D2                                    jr		asm_l2_bank_select
  64+ E065 3E 80        .notmiddlebank:             ld		a,LAYER2_SHIFTED_SCREEN_BOTTOM ; default to bottom
  65+ E067 18 CE                                    jr		asm_l2_bank_select
  66+ E069              		; Note no ret as its handled by above routines
  67+ E069
  68+ E069              ; "asm_l2_row_bank_select"
  69+ E069              ; "A (unsinged) = y row of pixel line from top, sets the bank to top middle or bottom and adjusts a reg to row memory address"
  70+ E069              ; "Could optimise by holding the previous bank but given its only an out statement it may not save T states at all"
  71+ E069              ; "destroys BC call de is safe a = adjusted poke pixel row"
  72+ E069 FE 40        asm_l2_row_bank_select:     cp 		64			; row < 64?
  73+ E06B 30 11                                    jr 		nc, .l2rowGTE64
  74+ E06D 08           .l2rowLT64:                 ex		af,af'
  75+ E06E                                          ;ld		a, LAYER2_VISIBLE_MASK  |  LAYER2_WRITE_ENABLE_MASK | LAYER2_SHIFTED_SCREEN_TOP | LAYER2_SHADOW_SCREEN_MASK
  76+ E06E 3A 01 E0                                 ld      a,(varL2_BUFFER_MODE)
  77+ E071 F6 03                                    or		LAYER2_VISIBLE_MASK  |  LAYER2_WRITE_ENABLE_MASK | LAYER2_SHIFTED_SCREEN_TOP
  78+ E073 01 3B 12                                 ld 		bc, IO_LAYER2_PORT
  79+ E076 ED 79                                    out 	(c),a
  80+ E078 AF                                       xor		a						; set a to 0
  81+ E079 32 00 E0                                 ld		(varL2_BANK_SELECTED),a	; save selected bank number 0
  82+ E07C 08                                       ex		af,af'					; return pixel poke unharmed
  83+ E07D C9                                       ret
  84+ E07E FE 80        .l2rowGTE64:                cp 		128
  85+ E080 30 14                                    jr 		nc, .l2rowGTE128
  86+ E082 08           .l2row64to127:              ex		af,af'
  87+ E083                                  ;		ld		a, LAYER2_VISIBLE_MASK  |  LAYER2_WRITE_ENABLE_MASK | LAYER2_SHIFTED_SCREEN_MIDDLE | LAYER2_SHADOW_SCREEN_MASK
  88+ E083 3A 01 E0                                 ld      a,(varL2_BUFFER_MODE)
  89+ E086 F6 43                                    or		LAYER2_VISIBLE_MASK  |  LAYER2_WRITE_ENABLE_MASK | LAYER2_SHIFTED_SCREEN_MIDDLE
  90+ E088 01 3B 12                                 ld 		bc, IO_LAYER2_PORT
  91+ E08B ED 79                                    out 	(c),a
  92+ E08D 3E 01                                    ld		a,1						; set a to 1
  93+ E08F 32 00 E0                                 ld		(varL2_BANK_SELECTED),a	; save selected bank
  94+ E092 08                                       ex		af,af'
  95+ E093 D6 40                                    sub		64
  96+ E095 C9                                       ret
  97+ E096 08           .l2rowGTE128:               ex		af,af'
  98+ E097                                  ;		ld		a, LAYER2_VISIBLE_MASK  |  LAYER2_WRITE_ENABLE_MASK | LAYER2_SHIFTED_SCREEN_BOTTOM | LAYER2_SHADOW_SCREEN_MASK
  99+ E097 3A 01 E0                                 ld      a,(varL2_BUFFER_MODE)
 100+ E09A F6 83                                    or		LAYER2_VISIBLE_MASK  |  LAYER2_WRITE_ENABLE_MASK | LAYER2_SHIFTED_SCREEN_BOTTOM
 101+ E09C
 102+ E09C 01 3B 12                                 ld 		bc, IO_LAYER2_PORT
 103+ E09F ED 79                                    out 	(c),a
 104+ E0A1 3E 01                                    ld		a,1						; set a to 2
 105+ E0A3 32 00 E0                                 ld		(varL2_BANK_SELECTED),a	; save selected bank
 106+ E0A6 08                                       ex		af,af'
 107+ E0A7 D6 80                                    sub		128
 108+ E0A9 C9                                       ret
 109+ E0AA
 110+ E0AA
# file closed: ./Layer2Graphics/layer2_bank_select.asm
 777  E0AA                  INCLUDE "./Layer2Graphics/layer2_cls.asm"
# file opened: ./Layer2Graphics/layer2_cls.asm
   1+ E0AA
   2+ E0AA 00           l2_cls_byte	            DB 0
   3+ E0AB              ; ">DMA Command BLOCK"
   4+ E0AB
   5+ E0AB 83 C3 C7 CB  l2_fill                 DB DMA_DISABLE,  DMA_RESET, DMA_RESET_PORT_A_TIMING, DMA_RESET_PORT_B_TIMING ,DMA_WRO_BLOCK_PORTA_A2B_XFR
   5+ E0AF 7D
   6+ E0B0 AA E0        l2_fill_astrt           DW l2_cls_byte
   7+ E0B2 00 40        l2_fill_length          DB $00,$40
   8+ E0B4 24 10 AD                             DB DMA_WR1_P1FIXED_MEMORY ,DMA_WR2_P2INC_MEMORY ,DMA_WR4_CONT_MODE
   9+ E0B7 00 00        l2_fill_bstrt           DB $00,$00
  10+ E0B9 82 CF B3 87                          DB DMA_STOP_AT_END, DMA_LOAD, DMA_FORCE_READY, DMA_ENABLE
  11+ E0BD              l2_fill_cmd_len	        EQU $ - l2_fill
  12+ E0BD
  13+ E0BD              l2_cls_dma_bank:
  14+ E0BD              ; ">l2_cls_dma_bank"
  15+ E0BD              ; ">sets a bank to"
  16+ E0BD 32 AA E0     .set_colour:            ld (l2_cls_byte),a
  17+ E0C0 21 AB E0     .write_dma:             ld hl, l2_fill
  18+ E0C3 06 12                                ld b, l2_fill_cmd_len
  19+ E0C5 0E 6B                                ld	c,IO_DATAGEAR_DMA_PORT
  20+ E0C7 ED B3                                otir
  21+ E0C9 C9                                   ret
  22+ E0CA
  23+ E0CA 3E 00        l2_set_color_upper2:    ld      a,0
  24+ E0CC CD 69 E0                             call asm_l2_row_bank_select
  25+ E0CF 3A AA E0                             ld      a,(l2_cls_byte)
  26+ E0D2 CD BD E0                             call l2_cls_dma_bank
  27+ E0D5 3E 40                                ld a,64								; pretend we are plotting pixel on row 64 to force mid selection
  28+ E0D7 CD 69 E0                             call asm_l2_row_bank_select
  29+ E0DA 3A AA E0                             ld      a,(l2_cls_byte)
  30+ E0DD CD BD E0                             call l2_cls_dma_bank
  31+ E0E0 C9                                   ret
  32+ E0E1
  33+ E0E1
  34+ E0E1 3E 00        l2_cls_upper_two_thirds:ld a,0								; pretend we are plotting pixel on row 0 to force top selection
  35+ E0E3 CD 69 E0                             call asm_l2_row_bank_select
  36+ E0E6 3E E3                                ld 	a,COLOUR_TRANSPARENT
  37+ E0E8 CD BD E0                             call l2_cls_dma_bank
  38+ E0EB 3E 40                                ld a,64								; pretend we are plotting pixel on row 64 to force mid selection
  39+ E0ED CD 69 E0                             call asm_l2_row_bank_select
  40+ E0F0 3E E3                                ld 	a,COLOUR_TRANSPARENT
  41+ E0F2 CD BD E0                             call l2_cls_dma_bank
  42+ E0F5 C9                                   ret
  43+ E0F6
  44+ E0F6 3E 80        l2_cls_lower_third:     ld a,128							; pretend we are plotting pixel on row 64 to force mid selection
  45+ E0F8 CD 69 E0                             call asm_l2_row_bank_select
  46+ E0FB 3E E3                                ld 	a,COLOUR_TRANSPARENT
  47+ E0FD CD BD E0                             call l2_cls_dma_bank
  48+ E100 C9                                   ret
  49+ E101
  50+ E101 CD E1 E0     l2_cls:                 call l2_cls_upper_two_thirds
  51+ E104 CD F6 E0                             call l2_cls_lower_third
  52+ E107 C9                                   ret
  53+ E108
# file closed: ./Layer2Graphics/layer2_cls.asm
 778  E108                  INCLUDE "./Layer2Graphics/layer2_initialise.asm"
# file opened: ./Layer2Graphics/layer2_initialise.asm
   1+ E108
   2+ E108 ED 91 12 08  l2_initialise:          nextreg		LAYER2_RAM_PAGE_REGISTER,          	LAYER2_SCREEN_BANK1
   3+ E10C ED 91 13 0B                          nextreg		LAYER2_RAM_SHADOW_REGISTER,     	LAYER2_SHADOW_BANK1
   4+ E110 ED 91 14 E3                          nextreg		TRANSPARENCY_COLOUR_REGISTER, 		COLOUR_TRANSPARENT
   5+ E114 C9                                   ret
   6+ E115
# file closed: ./Layer2Graphics/layer2_initialise.asm
 779  E115                  INCLUDE "./Layer2Graphics/l2_flip_buffers.asm"
# file opened: ./Layer2Graphics/l2_flip_buffers.asm
   1+ E115              l2_flip_buffers:        GetNextReg LAYER2_RAM_PAGE_REGISTER
   1+ E115 C5          >            push bc
   1+ E116 01 3B 24    >                ld bc,$243B
   1+ E119 3E 12       >                    ld a,LAYER2_RAM_PAGE_REGISTER
   1+ E11B ED 79       >                    out (c),a
   1+ E11D 04          >                    inc b
   1+ E11E ED 78       >                in a,(c)
   1+ E120 C1          >            pop bc
   2+ E121 57                                   ld      d,a
   3+ E122                                      GetNextReg LAYER2_RAM_SHADOW_REGISTER
   3+ E122 C5          >            push bc
   3+ E123 01 3B 24    >                ld bc,$243B
   3+ E126 3E 13       >                    ld a,LAYER2_RAM_SHADOW_REGISTER
   3+ E128 ED 79       >                    out (c),a
   3+ E12A 04          >                    inc b
   3+ E12B ED 78       >                in a,(c)
   3+ E12D C1          >            pop bc
   4+ E12E 5F                                   ld      e,a
   5+ E12F ED 92 12                             nextreg LAYER2_RAM_PAGE_REGISTER, a
   6+ E132 7A                                   ld      a,d
   7+ E133 ED 92 13                             nextreg LAYER2_RAM_SHADOW_REGISTER, a
   8+ E136 C9                                   ret
   9+ E137
# file closed: ./Layer2Graphics/l2_flip_buffers.asm
 780  E137                  INCLUDE "./Layer2Graphics/layer2_plot_pixel.asm"
# file opened: ./Layer2Graphics/layer2_plot_pixel.asm
   1+ E137              ; ">l2_plot_pixel b= row number, c = column number, a = pixel col"
   2+ E137 F5           l2_plot_pixel:          push    af
   3+ E138 78                                   ld      a,b
   4+ E139              l2_pp_row_valid:        JumpIfAGTENusng ScreenHeight,l2_pp_dont_plot
   4+ E139 FE C0       >                        cp     ScreenHeight
   4+ E13B D2 49 E1    >                        jp		nc,l2_pp_dont_plot
   5+ E13E C5                                   push    bc								; bank select destroys bc so need to save it
   6+ E13F                                  ;	ld      a,b
   7+ E13F CD 69 E0                             call    asm_l2_row_bank_select
   8+ E142 C1                                   pop     bc
   9+ E143 47                                   ld      b,a
  10+ E144 60                                   ld      h,b								; hl now holds ram address after bank select
  11+ E145 69                                   ld      l,c
  12+ E146 F1                                   pop     af								; a = colour to plott
  13+ E147 77                                   ld      (hl),a
  14+ E148 C9                                   ret
  15+ E149 F1           l2_pp_dont_plot:        pop     af
  16+ E14A C9                                   ret
  17+ E14B
  18+ E14B              ; y aixs bounds check must have been done before calling this
  19+ E14B F5           l2_plot_pixel_no_check: push    af
  20+ E14C C5                                   push    bc								; bank select destroys bc so need to save it
  21+ E14D 78                                   ld      a,b                             ; determine target bank
  22+ E14E CD 69 E0                             call    asm_l2_row_bank_select
  23+ E151 C1                                   pop     bc
  24+ E152 47                                   ld      b,a                             ; b now adjusted for bank, c = column
  25+ E153 60 69                                ld      hl,bc                           ; hl now holds ram address after bank select
  26+ E155 F1                                   pop     af								; a = colour to plott
  27+ E156 77                                   ld      (hl),a                          ; poke to ram
  28+ E157 C9                                   ret
  29+ E158
  30+ E158              ; ">l2_plot_pixel_no_bank b= row number, c = column number, a = pixel col"
  31+ E158              ; This version assues pixel is in the same bank as previously plotted ones. optimised for horizontal lines
  32+ E158 E5           l2_plot_pixel_no_bank:  push 	hl
  33+ E159 60                                   ld 		h,b								; hl now holds ram address after bank select
  34+ E15A 69                                   ld 		l,c
  35+ E15B 77                                   ld 		(hl),a
  36+ E15C E1                                   pop		hl
  37+ E15D C9                                   ret
  38+ E15E
  39+ E15E F5           ShipPixel:              push    af
  40+ E15F 78                                   ld      a,b
  41+ E160 FE 7F                                cp      127
  42+ E162 D0                                   ret     nc
  43+ E163 F1                                   pop     af
  44+ E164 18 E5                                jr      l2_plot_pixel_no_check
  45+ E166                                      ;***Implicit ret due to jr
  46+ E166
  47+ E166              ; in bc = yx iyl = colour
  48+ E166 78           DebrisPixel:            ld      a,b
  49+ E167 FE 7F                                cp      127
  50+ E169 D0                                   ret     nc
  51+ E16A FD 7D                                ld      a, iyl
  52+ E16C 18 DD                                jr      l2_plot_pixel_no_check
  53+ E16E                                      ;***Implicit ret due to jr
  54+ E16E
  55+ E16E F5           l2_plot_pixel_y_test:   push	af
  56+ E16F 78                                   ld		a,b
  57+ E170 FE C0                                cp		192
  58+ E172 30 03                                jr		nc,.clearup
  59+ E174 F1                                   pop		af
  60+ E175 18 C0                                jr		l2_plot_pixel
  61+ E177 F1           .clearup:               pop		af
  62+ E178 C9                                   ret
  63+ E179
  64+ E179              l2_point_pixel_y_safe:	MACRO
  65+ E179 ~            						push	hl
  66+ E179 ~            						push	bc
  67+ E179 ~            						call	l2_plot_pixel
  68+ E179 ~            						pop		bc
  69+ E179 ~            						pop		hl
  70+ E179              						ENDM
  71+ E179
# file closed: ./Layer2Graphics/layer2_plot_pixel.asm
 781  E179                  INCLUDE "./Layer2Graphics/layer2_print_character.asm"
# file opened: ./Layer2Graphics/layer2_print_character.asm
   1+ E179
   2+ E179              l2_print_chr_at:
   3+ E179              ; "l2_print_chr_at, bc = col,row, d= character, e = colour"
   4+ E179              ; "Need a version that also prints absence of character"
   5+ E179 7A           	ld		a,d
   6+ E17A FE 20        	cp		32
   7+ E17C 38 3F        	jr		c,.InvalidCharacter		; Must be between 32 and 127
   8+ E17E FE 7F        	cp		127
   9+ E180 30 3B        	jr		nc,.InvalidCharacter
  10+ E182              .ValidCharater:
  11+ E182 26 00        	ld		h,0
  12+ E184 6A           	ld		l,d
  13+ E185 29           	add		hl,hl						; * 2
  14+ E186 29           	add		hl,hl						; * 4
  15+ E187 29           	add		hl,hl						; * 8 to get byte address
  16+ E188 ED 34 00 3C  	add		hl,charactersetaddr			; hl = address of rom char
  17+ E18C 04           	inc		b							; start + 1 pixel x and y as we only print 7x7
  18+ E18D 23           	inc		hl							; skip first byte
  19+ E18E 16 07        	ld		d,7
  20+ E190              .PrintCharLoop:
  21+ E190 D5           	push	de
  22+ E191 7E           	ld		a,(hl)
  23+ E192 FE 00        	cp		0
  24+ E194 28 21        	jr		z,.NextRowNoBCPop
  25+ E196              .PrintARow:
  26+ E196 C5           	push	bc							; save row col
  27+ E197 16 07        	ld		d,7							; d is loop row number now
  28+ E199              .PrintPixelLoop:
  29+ E199 0C           	inc		c							; we start at col 1 not 0 so can move inc here
  30+ E19A              .PrintTheRow:
  31+ E19A CB 27        	sla		a							; scroll char 1 pixel as we read from bit 7
  32+ E19C F5           	push	af							; save character byte
  33+ E19D CB 7F        	bit		7,a							; If left most pixel set then plot
  34+ E19F 20 04        	jr		nz,.PixelToPrint
  35+ E1A1              .NoPixelToPrint:
  36+ E1A1 3E E3        	ld		a,$E3
  37+ E1A3 18 01        	jr		.HaveSetPixelColour
  38+ E1A5              .PixelToPrint:
  39+ E1A5 7B           	ld		a,e							; Get Colour
  40+ E1A6              .HaveSetPixelColour
  41+ E1A6 E5           	push	hl
  42+ E1A7              ;	push	bc							; at the moment we don't do paging on first plot so need to preserve BC
  43+ E1A7              .BankOnFirstOnly:
  44+ E1A7 F5           	push	af
  45+ E1A8 7A           	ld		a,d
  46+ E1A9 FE 07        	cp		7
  47+ E1AB 28 11        	jr		z,.PlotWithBank
  48+ E1AD              .PlotNoBank:
  49+ E1AD F1           	pop		af
  50+ E1AE 60           	ld 		h,b								; hl now holds ram address after bank select
  51+ E1AF 69           	ld 		l,c
  52+ E1B0 77           	ld 		(hl),a
  53+ E1B1              .IterateLoop:
  54+ E1B1              ;	pop		bc
  55+ E1B1 E1           	pop		hl
  56+ E1B2 F1           	pop		af							; a= current byte shifted
  57+ E1B3 15           	dec		d						 	; do dec after inc as we amy
  58+ E1B4 20 E3        	jr		nz,.PrintPixelLoop
  59+ E1B6              .NextRow:
  60+ E1B6 C1           	pop		bc							; Current Col Row
  61+ E1B7              .NextRowNoBCPop:
  62+ E1B7 D1           	pop		de							; d= row loop
  63+ E1B8 04           	inc		b							; Down 1 row
  64+ E1B9 23           	inc		hl							; Next character byte
  65+ E1BA 15           	dec		d							; 1 done now
  66+ E1BB 20 D3        	jr		nz,.PrintCharLoop
  67+ E1BD              .InvalidCharacter:
  68+ E1BD C9           	ret
  69+ E1BE              .PlotWithBank:
  70+ E1BE F1           	pop		af
  71+ E1BF CD 37 E1     	call	l2_plot_pixel				; This will shift bc to poke row
  72+ E1C2 18 ED        	jr		.IterateLoop
  73+ E1C4
  74+ E1C4              l2_print_at:
  75+ E1C4              ; "l2_print_at bc= colrow, hl = addr of message, e = colour"
  76+ E1C4              ; "No error trapping, if there is no null is will just cycle on the line"
  77+ E1C4 7E           	ld	a,(hl)							; Return if empty string
  78+ E1C5 FE 00        	cp	0
  79+ E1C7 C8           	ret	z
  80+ E1C8 E5           	push	hl
  81+ E1C9 D5           	push	de
  82+ E1CA C5           	push	bc
  83+ E1CB 57           	ld		d,a							; bc = pos, de = char and colour
  84+ E1CC CD 79 E1     	call 	l2_print_chr_at
  85+ E1CF C1           	pop		bc
  86+ E1D0 D1           	pop		de
  87+ E1D1 E1           	pop		hl
  88+ E1D2              .Move8Pixlestoright:
  89+ E1D2 08           	ex		af,af'
  90+ E1D3 79           	ld		a,c
  91+ E1D4 C6 08        	add		8
  92+ E1D6 4F           	ld		c,a
  93+ E1D7 08           	ex		af,af'
  94+ E1D8 23           	inc		hl
  95+ E1D9 18 E9        	jr		l2_print_at					; Just loop until 0 found
  96+ E1DB
  97+ E1DB
  98+ E1DB              ; "l2_print_chr_at, bc = col,row, d= character, e = colour"
  99+ E1DB              ; "Need a version that also prints absence of character"
 100+ E1DB              ; removed blank line optimisation as we need spaces printed
 101+ E1DB 7A           l2_print_7chr_at:       ld		a,d
 102+ E1DC FE 1F                                cp		31
 103+ E1DE 38 3D                                jr		c,.InvalidCharacter		; Must be between 32 and 127
 104+ E1E0 FE 7F                                cp		127
 105+ E1E2 30 39                                jr		nc,.InvalidCharacter
 106+ E1E4 26 00        .ValidCharater:         ld		h,0
 107+ E1E6 6A                                   ld		l,d
 108+ E1E7 29                                   add		hl,hl						; * 2
 109+ E1E8 29                                   add		hl,hl						; * 4
 110+ E1E9 29                                   add		hl,hl						; * 8 to get byte address
 111+ E1EA ED 34 00 3C                          add		hl,charactersetaddr			; hl = address of rom char
 112+ E1EE 04                                   inc		b							; start + 1 pixel x and y as we only print 7x7
 113+ E1EF 23                                   inc		hl							; skip first byte
 114+ E1F0 16 07                                ld		d,7
 115+ E1F2 D5           .PrintCharLoop:         push	de
 116+ E1F3 7E                                   ld		a,(hl)
 117+ E1F4                                      ;cp		0
 118+ E1F4                                      ;jr		z,.NextRowNoBCPop
 119+ E1F4 C5           .PrintARow:             push	bc							; save row col
 120+ E1F5 16 06                                ld		d,6							; d is loop row number now
 121+ E1F7 0C           .PrintPixelLoop:        inc		c							; we start at col 1 not 0 so can move inc here
 122+ E1F8 28 1C                                jr		z,.NextRow
 123+ E1FA CB 27                                sla		a							; scroll char 1 pixel as we read from bit 7
 124+ E1FC F5                                   push	af							; save character byte
 125+ E1FD CB 7F                                bit		7,a							; If left most pixel set then plot
 126+ E1FF 20 04                                jr		nz,.PixelToPrint
 127+ E201 3E E3        .NoPixelToPrint:        ld		a,$E3
 128+ E203 18 01                                jr		.HaveSetPixelColour
 129+ E205 7B           .PixelToPrint:          ld		a,e							; Get Colour
 130+ E206 E5           .HaveSetPixelColour		push	hl
 131+ E207                                      ;	push	bc							; at the moment we don't do paging on first plot so need to preserve BC
 132+ E207 F5           .BankOnFirstOnly:       push	af
 133+ E208 7A                                   ld		a,d
 134+ E209 FE 06                                cp		6
 135+ E20B 28 11                                jr		z,.PlotWithBank
 136+ E20D F1           .PlotNoBank:            pop		af
 137+ E20E 60                                   ld 		h,b								; hl now holds ram address after bank select
 138+ E20F 69                                   ld 		l,c
 139+ E210 77                                   ld 		(hl),a
 140+ E211              .IterateLoop:	        ;	pop		bc
 141+ E211 E1                                   pop		hl
 142+ E212 F1                                   pop		af							; a= current byte shifted
 143+ E213 15                                   dec		d						 	; do dec after inc as we amy
 144+ E214 20 E1                                jr		nz,.PrintPixelLoop
 145+ E216 C1           .NextRow:               pop		bc							; Current Col Row
 146+ E217 D1           .NextRowNoBCPop:	    pop		de							; d= row loop
 147+ E218 04                                   inc		b							; Down 1 row
 148+ E219 23                                   inc		hl							; Next character byte
 149+ E21A 15                                   dec		d							; 1 done now
 150+ E21B 20 D5                                jr		nz,.PrintCharLoop
 151+ E21D C9           .InvalidCharacter:      ret
 152+ E21E F1           .PlotWithBank:          pop		af
 153+ E21F CD 37 E1                             call	l2_plot_pixel				; This will shift bc to poke row
 154+ E222 18 ED                                jr		.IterateLoop
 155+ E224
 156+ E224              ; "l2_print_7at bc= colrow, hl = addr of message, e = colour"
 157+ E224              ; "No error trapping, if there is no null is will just cycle on the line"
 158+ E224 7E           l2_print_7at:           ld	a,(hl)							; Return if empty string
 159+ E225 FE 00                                cp	0
 160+ E227 C8                                   ret	z
 161+ E228 E5                                   push	hl
 162+ E229 D5                                   push	de
 163+ E22A C5                                   push	bc
 164+ E22B 57                                   ld		d,a							; bc = pos, de = char and colour
 165+ E22C CD DB E1                             call 	l2_print_7chr_at
 166+ E22F C1                                   pop		bc
 167+ E230 D1                                   pop		de
 168+ E231 E1                                   pop		hl
 169+ E232 08           .Move7Pixlestoright:	ex		af,af'
 170+ E233 79                                   ld		a,c
 171+ E234 C6 07                                add		7
 172+ E236 4F                                   ld		c,a
 173+ E237 08                                   ex		af,af'
 174+ E238 23                                   inc		hl
 175+ E239 18 E9                                jr		l2_print_7at					; Just loop until 0 found
 176+ E23B
 177+ E23B
# file closed: ./Layer2Graphics/layer2_print_character.asm
 782  E23B                  INCLUDE "./Layer2Graphics/layer2_draw_box.asm"
# file opened: ./Layer2Graphics/layer2_draw_box.asm
   1+ E23B              ; "l2_draw_thick_box bc=rowcol, de=heightwidth h=color"
   2+ E23B              ; TODO DMA Optimise
   3+ E23B C5 D5 E5     l2_draw_fill_box:       push    bc,,de,,hl
   4+ E23E 53                                   ld      d,e
   5+ E23F 5C                                   ld      e,h
   6+ E240 CD B5 E2                             call    l2_draw_horz_line           ; "bc = left side row,col, d = length, e = color"
   7+ E243 E1 D1 C1                             pop     bc,,de,,hl
   8+ E246 04                                   inc     b
   9+ E247 15                                   dec     d
  10+ E248 C8                                   ret     z
  11+ E249 18 F0                                jr      l2_draw_fill_box
  12+ E24B
  13+ E24B              ; "l2_draw_box bc=rowcol, de=heightwidth a=color"
  14+ E24B C5 D5 F5     l2_draw_box:            push	bc,,de,,af
  15+ E24E 53                                   ld		d,e
  16+ E24F 5F                                   ld		e,a
  17+ E250 14                                   inc		d
  18+ E251 CD B5 E2                             call	l2_draw_horz_line
  19+ E254 F1 D1 C1                             pop		bc,,de,,af
  20+ E257 C5 D5 F5     .bottomhorzline:	    push	bc,,de,,af
  21+ E25A 67                                   ld		h,a							;save color whilst b = row + height
  22+ E25B 78                                   ld		a,b
  23+ E25C 82                                   add		a,d
  24+ E25D 47                                   ld		b,a
  25+ E25E 53                                   ld		d,e							; d = width
  26+ E25F 14                                   inc		d							; Extra pixel for width
  27+ E260 5C                                   ld		e,h							; e = colour
  28+ E261 CD B5 E2                             call	l2_draw_horz_line
  29+ E264 F1 D1 C1                             pop		bc,,de,,af
  30+ E267 C5 D5 F5     .leftvertline:          push	bc,,de,,af
  31+ E26A 04                                   inc		b							; save 2 pixles
  32+ E26B 15                                   dec		d
  33+ E26C 5F                                   ld		e,a							; e = color
  34+ E26D CD 06 E3                             call	l2_draw_vert_line
  35+ E270 F1 D1 C1                             pop		bc,,de,,af
  36+ E273 04           .rightvertline:         inc		b							; save 2 pixles
  37+ E274 15                                   dec		d
  38+ E275 67                                   ld		h,a							;save color whilst c = col + width
  39+ E276 79                                   ld		a,c
  40+ E277 83                                   add		a,e
  41+ E278 4F                                   ld		c,a
  42+ E279 5C                                   ld		e,h							; e = color
  43+ E27A CD 06 E3                             call	l2_draw_vert_line
  44+ E27D C9                                   ret
  45+ E27E
# file closed: ./Layer2Graphics/layer2_draw_box.asm
 783  E27E                  INCLUDE "./Layer2Graphics/asm_l2_plot_horizontal.asm"
# file opened: ./Layer2Graphics/asm_l2_plot_horizontal.asm
   1+ E27E
   2+ E27E              ;; NOTE DMA is little endian
   3+ E27E 00           l2_horz_pixel           DB 0
   4+ E27F
   5+ E27F 83 C3 C7 CB  l2_horz_line            DB DMA_DISABLE,  DMA_RESET, DMA_RESET_PORT_A_TIMING, DMA_RESET_PORT_B_TIMING ,DMA_WRO_BLOCK_PORTA_A2B_XFR
   5+ E283 7D
   6+ E284 7E E2        l2_horz_colr            DW l2_horz_pixel
   7+ E286 00           l2_horz_lenlo           DB 0
   8+ E287 00           l2_horz_lenhi           DB 0
   9+ E288 24 10 AD                             DB DMA_WR1_P1FIXED_MEMORY, DMA_WR2_P2INC_MEMORY, DMA_WR4_CONT_MODE
  10+ E28B 00 00        l2_horz_target          DB $00, $00
  11+ E28D CF 87                                DB DMA_LOAD, DMA_ENABLE
  12+ E28F              l2_horz_cmd_len	        EQU $ - l2_horz_line
  13+ E28F
  14+ E28F
  15+ E28F              ; "l2_draw_horz_dma"
  16+ E28F              ; "plot at bc for length d colour e using dma, assumes bank already selected"
  17+ E28F 7B           l2_draw_horz_dma:       ld		a,e                                               ; T=4      ;
  18+ E290 32 7E E2                             ld		(l2_horz_pixel),a                                 ; T=13     ;
  19+ E293 5A                                   ld      e,d ; saved 3 t states ld		a,d                                               ; T=4      ; e=d   4
  20+ E294 16 00                                ld      d,0; saved 3 t states ld 		(l2_horz_lenlo),a                                 ; T=13     ; d = 0  7
  21+ E296 ED 53 86 E2                          ld      (l2_horz_lenlo),de; saved 3 t states xor 	a                                                 ; T=4      ; t 20  31
  22+ E29A                                      ; saved 3 t states ld ld 		(l2_horz_lenhi),a                                 ; T=13     ;
  23+ E29A                                    ; saved 4 t states  ld		h,b                           ;          ;
  24+ E29A                                    ; saved 4 t states  ld		l,c                           ;          ;
  25+ E29A ED 43 8B E2                          ld      (l2_horz_target),bc ; saved 4 t states  was , hl  ; T=20     ;
  26+ E29E 21 7F E2     .write_dma:             ld 		hl, l2_horz_line                                  ;          ;
  27+ E2A1 06 10                                ld 		b, l2_horz_cmd_len                                ;
  28+ E2A3 0E 6B                                ld		c,IO_DATAGEAR_DMA_PORT                            ;
  29+ E2A5 ED B3                                otir                                                      ;
  30+ E2A7 C9                                   ret
  31+ E2A8
  32+ E2A8              ; "bc = left side row,col, d = length, e = color"
  33+ E2A8 D5           l2_draw_horz_dma_bank:  push 	de							; save length and colour
  34+ E2A9 C5                                   push 	bc							; save row col
  35+ E2AA 78                                   ld   	a,b
  36+ E2AB CD 69 E0                             call 	asm_l2_row_bank_select		; now we have the correct bank, its a horizontal line so bank will not shift
  37+ E2AE C1                                   pop  	bc
  38+ E2AF 47                                   ld	 	b,a	       					; fixed row by the call we can go straight into HL with row col
  39+ E2B0 D1                                   pop  	de							; get length back
  40+ E2B1 CD 8F E2                             call    l2_draw_horz_dma
  41+ E2B4 C9                                   ret
  42+ E2B5
  43+ E2B5              ; "l2_draw_horz_line"
  44+ E2B5              ; "bc = left side row,col, d = length, e = color"
  45+ E2B5              ; "optimisation if above min pix is will use dma call SCREEN_HOZ_MIN_PIX not implemented yet"
  46+ E2B5 7A           l2_draw_horz_line:      ld		a,d
  47+ E2B6 FE 00                                cp 		0							; if its zero length then just return
  48+ E2B8 C8           .zerolengthexit:        ret		z
  49+ E2B9 FE 01        .isitlen1:              cp 		1
  50+ E2BB CA DD E2                             jp 		z,.l2_draw_horz_line_1
  51+ E2BE FE 0A        .longenoughtfordma:     cp  10
  52+ E2C0 C3 A8 E2                             jp  l2_draw_horz_dma_bank
  53+ E2C3 D5 C5        .plottableline:         push 	de,,bc  					; save length and colour an d row col
  54+ E2C5 78                                   ld   	a,b
  55+ E2C6 CD 69 E0                             call 	asm_l2_row_bank_select		; now we have the correct bank, its a horizontal line so bank will not shift
  56+ E2C9 C1                                   pop  	bc
  57+ E2CA 67                                   ld	 	h,a	       					; fixed row by the call we can go straight into HL with row col
  58+ E2CB 69                                   ld   	l,c
  59+ E2CC D1                                   pop  	de							; get length back
  60+ E2CD 79           .cliptest:              ld	 	a,c							; get column + length
  61+ E2CE 42                                   ld  	b,d  						; speculate that we don't clip by pre-loading b with length
  62+ E2CF 82                                   add  	a,d
  63+ E2D0 30 06                                jr   	nc, .l2_draw_horz_plot_loop	; if carry is set c+d > 255
  64+ E2D2 3E FF        .clipat255:             ld   	a,$FF
  65+ E2D4 91                                   sub  	c							; a holds clipped length
  66+ E2D5 47                                   ld 		b, a 						; so now hl holds poke address  b = clipped length e = colour
  67+ E2D6 18 00                                jr		.l2_draw_horz_plot_loop
  68+ E2D8 73           .l2_draw_horz_plot_loop:ld (hl),e							; loop poking hl with e for b pixels
  69+ E2D9 23                                   inc hl
  70+ E2DA 10 FC                                djnz .l2_draw_horz_plot_loop
  71+ E2DC C9                                   ret
  72+ E2DD 7B           .l2_draw_horz_line_1:   ld		a,e
  73+ E2DE C3 37 E1                             jp		l2_plot_pixel				; hijack return
  74+ E2E1
  75+ E2E1              ; "l2_draw_horz_line_to"
  76+ E2E1              ; "bc = left side row,col, d right pixel, e = color"
  77+ E2E1 7A           l2_draw_horz_line_to:   ld 		a,d
  78+ E2E2 B9                                   cp 		c
  79+ E2E3 30 04                                jr		nc, .noswap
  80+ E2E5 28 07                                jr      z, .singlepixel
  81+ E2E7 51           .swap:                  ld		d,c
  82+ E2E8 4F                                   ld		c,a
  83+ E2E9 7A           .noswap:                ld		a,d
  84+ E2EA 91                                   sub		c
  85+ E2EB              ;                        dec		a							; so now its length not offset
  86+ E2EB 57                                   ld		d,a
  87+ E2EC 18 C7                                jr 		l2_draw_horz_line			; hijack routine and return statements
  88+ E2EE 7B           .singlepixel:           ld		a,e
  89+ E2EF C3 37 E1                             jp		l2_plot_pixel				; hijack return
  90+ E2F2
# file closed: ./Layer2Graphics/asm_l2_plot_horizontal.asm
 784  E2F2                  INCLUDE "./Layer2Graphics/asm_l2_plot_vertical.asm"
# file opened: ./Layer2Graphics/asm_l2_plot_vertical.asm
   1+ E2F2              ; ">l2_draw_vert_segment"
   2+ E2F2              ; ">hl = bank adjusted pixel poke address d = length, e = color"
   3+ E2F2              ; ">will always clip once h = 64 even if length > 64 destroys a and hl, d = resudual length not plotted"
   4+ E2F2 7A           l2_draw_vert_segment:   ld		a,d
   5+ E2F3 FE 00        .emptylinecheck:	    cp 		0
   6+ E2F5 C8                                   ret		z
   7+ E2F6 FE 01        .justonepixel	        cp		1
   8+ E2F8 20 02                                jr		nz, .multiplepixelsLoop
   9+ E2FA 73                                   ld		(hl),e
  10+ E2FB C9                                   ret
  11+ E2FC              .multiplepixelsLoop:
  12+ E2FC 7C           .endofbankcheck:        ld   	a,h
  13+ E2FD FE 40                                cp   	64
  14+ E2FF D0                                   ret		nc							; check before we poke data if we have hit a boundary
  15+ E300 73           .canplotapixel:         ld   	(hl),e						; set colour
  16+ E301 24                                   inc 	h							; we don't check here else we would need a dec d on ret could do for optimisation of loop though
  17+ E302 15                                   dec		d
  18+ E303 C8                                   ret		z
  19+ E304 18 F6                                jr		.multiplepixelsLoop
  20+ E306
  21+ E306              ; ">l2_draw_vert_line"
  22+ E306              ; ">bc = row col d = length, e = color"
  23+ E306 78           l2_draw_vert_line:      ld 		a,b
  24+ E307 FE C0        .offscreencheck:        cp 		SCREEN_HEIGHT
  25+ E309 D0                                   ret 	nc							; can't start off the screen
  26+ E30A 7A           .emptylinecheck:        ld		a,d
  27+ E30B FE 00                                cp		0
  28+ E30D C8                                   ret		z
  29+ E30E FE 01                                cp		1
  30+ E310 20 04                                jr		nz,.multiplepixels
  31+ E312 CD 37 E1     .itsonepixel:           call	l2_plot_pixel
  32+ E315 C9                                   ret
  33+ E316              .multiplepixels:						; so now we have at least 2 pixels to plot
  34+ E316 7A           .clipto192:             ld		a,d							; get length
  35+ E317 80                                   add		a,b							; a= row + length
  36+ E318 38 04                                jr		c,.needtoclip				; if it was > 255 then there is a definite need
  37+ E31A FE C0                                cp		SCREEN_HEIGHT
  38+ E31C 38 08                                jr		c, .noclipneeded
  39+ E31E 78           .needtoclip             ld		a,b
  40+ E31F 82                                   add		a,d
  41+ E320 D6 C0                                sub		SCREEN_HEIGHT
  42+ E322 67                                   ld		h,a							; use h as a temp holding for (row + length) - 192
  43+ E323 7A                                   ld		a,d
  44+ E324 94                                   sub		h
  45+ E325 57                                   ld		d,a							; d = length - ((row + length) - 192)
  46+ E326              ; so now BC = row col, d = length clipped, e = color
  47+ E326 78           .noclipneeded:          ld		a,b
  48+ E327 C5 D5                                push	bc,,de
  49+ E329 CD 69 E0                             call 	asm_l2_row_bank_select
  49+ E32C               	 	; we now have poke address and a variable holding current bank number
  50+ E32C D1 C1                                pop		bc,,de
  51+ E32E 67                                   ld		h,a							; b now tolds target pixel for first plot
  52+ E32F 69                                   ld		l,c  						; and c holds pixel column for plotting
  53+ E330 CD F2 E2                             call 	l2_draw_vert_segment		; draw seg, d = pixels remaining
  54+ E333 7A                                   ld		a,d							; a and d = nbr pixels remaining
  55+ E334 FE 00                                cp		0
  56+ E336 28 27                                jr		z, .doneplotting
  57+ E338 3A 00 E0     .anotherbank:           ld		a, (varL2_BANK_SELECTED)
  58+ E33B 3C                                   inc		a
  59+ E33C 06 00                                ld		b,0
  60+ E33E C5 D5                                push	bc,,de
  61+ E340 CD 52 E0                             call 	asm_l2_bank_n_select
  62+ E343 D1 C1                                pop     bc,,de
  63+ E345 60                                   ld		h,b							; b now tolds target pixel for first plot
  64+ E346 69                                   ld		l,c  						; and c holds pixel column for plotting
  65+ E347 CD F2 E2                             call	l2_draw_vert_segment
  66+ E34A 7A                                   ld		a,d
  67+ E34B FE 00                                cp		0
  68+ E34D 28 10                                jr		z,.doneplotting
  69+ E34F 3A 00 E0     .yetanotherbank:        ld		a, (varL2_BANK_SELECTED)
  70+ E352 3C                                   inc		a
  71+ E353 06 00                                ld		b,0
  72+ E355 C5 D5                                push	bc,,de
  73+ E357 CD 52 E0                             call 	asm_l2_bank_n_select
  74+ E35A D1                                   pop		de
  75+ E35B E1                                   pop		hl							; hl = bc
  76+ E35C CD F2 E2                             call	l2_draw_vert_segment		; we have now hit 192 pixels so done
  77+ E35F C9           .doneplotting:	        ret
  78+ E360
  79+ E360              ; ">l2_draw_vert_line_to"
  80+ E360              ; ">bc = row col d = to position, e = color"
  81+ E360 78           l2_draw_vert_line_to:   ld		a,b
  82+ E361 BA                                   cp		d
  83+ E362 38 02                                jr		c, .noyswap
  84+ E364 42           .yswap:                 ld		b,d			; Swap round row numbers so we are always incrementing
  85+ E365 57                                   ld		d,a			; now we have a top to bottom to we we can calc length from bc
  86+ E366 7A           .noyswap:               ld		a,d 		; we still may have d in a but only if it was bottom to top
  87+ E367 90                                   sub		b
  88+ E368 3C                                   inc		a			; so now its length not offset
  89+ E369 57                                   ld		d,a
  90+ E36A 18 9A                                jr		l2_draw_vert_line	; we can hijack its clipping, 0 check and return logic
  91+ E36C                                      ; no return needed
  92+ E36C
# file closed: ./Layer2Graphics/asm_l2_plot_vertical.asm
 785  E36C                  INCLUDE "./Layer2Graphics/layer2_plot_diagonal.asm"
# file opened: ./Layer2Graphics/layer2_plot_diagonal.asm
   1+ E36C
   2+ E36C              l2_draw_box_to:
   3+ E36C              ; ">l2_draw_box_to bc=rowcol, de=torowcol a=color"
   4+ E36C              ; ">NOT IMPLEMENTED YET"
   5+ E36C C9           	ret
   6+ E36D
   7+ E36D              ;; Note l2stepx is done via self modifying code rather than an if for speed
   8+ E36D              ;; l2stepx1 and l2stepx2 are the addresses to stick the inc or dec in
   9+ E36D              l2decbstep	EQU $05
  10+ E36D              l2incbstep	EQU	$04
  11+ E36D              l2deccstep	EQU $0D
  12+ E36D              l2inccstep	EQU	$0C
  13+ E36D              		; l2 deltas are signed
  14+ E36D 00 00        l2deltaY	DW	0
  15+ E36F 00 00        l2deltaX	DW	0
  16+ E371 00           l2deltaYsq	db	0
  17+ E372 00           l2deltaXsq	db	0
  18+ E373 00           l2deltaYn	db	0
  19+ E374 00           l2deltaXn	db	0
  20+ E375 00           l2deltaYsqn	db	0
  21+ E376 00           l2deltaXsqn	db	0
  22+ E377 00           l2linecolor	db	0
  23+ E378 00 00        l2fraction	dw	0
  24+ E37A 00 00        l2e2		dw	0
  25+ E37C 00           l2way		db	0
  26+ E37D 00 00        l2targetPtr	dw	0
  27+ E37F              ;; These arrays should be 192 but if we use 256 then getting array2 value is just inc h rather than indexing again.
  28+ E37F 00 00 00...  l2targetArray1 ds	256
  29+ E47F 00 00 00...  l2targetArray2 ds	256
  30+ E57F              ;; Using Bresenham Algorithm draw a diagonal line top to bottom. First we must sort of course
  31+ E57F              ;;plotLine(int x0, int y0, int x1, int y1)
  32+ E57F              ;;    dx =  abs(x1-x0);
  33+ E57F              ;;    sx = x0<x1 ? 1 : -1;
  34+ E57F              ;;    dy = -abs(y1-y0);
  35+ E57F              ;;    sy = y0<y1 ? 1 : -1;
  36+ E57F              ;;    err = dx+dy;  /* error value e_xy */
  37+ E57F              ;;    while (true)   /* loop */
  38+ E57F              ;;        plot(x0, y0);
  39+ E57F              ;;        if (x0==x1 && y0==y1) break;
  40+ E57F              ;;        e2 = 2*err;
  41+ E57F              ;;        if (e2 >= dy) /* e_xy+e_x > 0 */
  42+ E57F              ;;            err += dy;
  43+ E57F              ;;            x0 += sx;
  44+ E57F              ;;        end if
  45+ E57F              ;;        if (e2 <= dx) /* e_xy+e_y < 0 */
  46+ E57F              ;;            err += dx;
  47+ E57F              ;;            y0 += sy;
  48+ E57F              ;;        end if
  49+ E57F              ;;    end while
  50+ E57F              ; ">l2_draw_diagonal_save, bc = y0,x0 de=y1,x1,a=array nbr ESOURCE LL30 or LION"
  51+ E57F              ; ">hl will be either l2targetArray1 or 2"
  52+ E57F              ; NOTE IF WE INTERLEAVE THESE TWO TABLES WE COUDL READ BOTH X POS as a 16 bit read
  53+ E57F FE 01        l2_draw_diagonal_save:  cp		1
  54+ E581 28 06                                jr		z,l2S_ItsArray1
  55+ E583 21 7F E4                             ld		hl,l2targetArray2
  56+ E586 C3 8C E5                             jp		l2S_setTarget
  57+ E589 21 7F E3     l2S_ItsArray1:	        ld		hl,l2targetArray1
  58+ E58C 22 7D E3     l2S_setTarget:	        ld		(l2targetPtr),hl
  59+ E58F              ; ">l2_draw_diagonal, bc = y0,x0 de=y1,x1,a=color) Thsi version performs a pre sort based on y axis"
  60+ E58F 32 77 E3                             ld		(l2linecolor),a					;save colour for later
  61+ E592 21 00 00                             ld		hl,0                            ;
  62+ E595 22 6F E3                             ld		(l2deltaX),hl                   ;
  63+ E598 22 6D E3                             ld		(l2deltaY),hl                   ; initlaise deltas as we will only be loading 8 bit in there but workign in 16 bit later
  64+ E59B 78           l2S_preSort:            ld		a,b								;
  65+ E59C                                      JumpIfALTNusng	d,l2S_noYSort			; we must have Y1 < Y2 (if eqyal then verical line picked up earlier
  65+ E59C BA          >                        cp      d
  65+ E59D DA A5 E5    >                        jp		c, l2S_noYSort
  66+ E5A0              l2S_SortBasedOnY:	    ldhlbc									;
  66+ E5A0 60          >                        ld		h,b
  66+ E5A1 69          >                        ld		l,c
  67+ E5A2 EB                                   ex		de,hl                           ;
  68+ E5A3                                      ldbchl									; swap over bc and de using hl as an intermediate
  68+ E5A3 44          >                        ld		b,h
  68+ E5A4 4D          >                        ld		c,l
  69+ E5A5 DD 62        l2S_noYSort:		    ld		ixh,d							; ixh now holds target Y coord post sorting
  70+ E5A7 DD 6B                                ld		ixl,e							; ixl now holds target X coord post sorting
  71+ E5A9 79           l2S_setXLen:            ld		a,c                             ;
  72+ E5AA                                      JumpIfALTNusng e,l2S_PosXLen			; if x1 < x2 then we have a positive increment
  72+ E5AA BB          >                        cp      e
  72+ E5AB DA B7 E5    >                        jp		c, l2S_PosXLen
  73+ E5AE 79           l2S_NegXLen:            ld		a,c                             ;
  74+ E5AF 93                                   sub     e                               ;
  75+ E5B0 32 6F E3                             ld		(l2deltaX),a					; As x1 > x2 we do deltaX = X1 - X2
  76+ E5B3 3E 0D                                ld		a,l2deccstep					; and set the value for inc dec self modifying to Dec
  77+ E5B5 18 07                                jr		l2S_XINCDEC
  78+ E5B7 7B           l2S_PosXLen:	        ld		a,e                             ;
  79+ E5B8 91                                   sub		c                               ;
  80+ E5B9 32 6F E3                             ld 		(l2deltaX),a                    ; As x1 < x2 we do deltaX = X2 - X1
  81+ E5BC 3E 0C                                ld		a,l2inccstep                    ; and set the value for inc dec self modifying to Inc
  82+ E5BE              l2S_XINCDEC:
  83+ E5BE 32 2A E6     	ld		(l2S_adjustCol),a				;
  84+ E5C1 32 5A E6     	ld		(l2S_adjustCol2),a				; update self modifying code for X update with inc or dec from above
  85+ E5C4              l2S_setYLen
  86+ E5C4 7A           	ld		a,d							 	; presorted on Y so it is now always positive
  87+ E5C5 90           	sub		b
  88+ E5C6 32 6D E3     	ld 		(l2deltaY),a					; DeltaY = Y2 - Y1
  89+ E5C9              l2S_setErr:									;  LD H  := (D'-E')/2    round up if +ve or down if -ve
  90+ E5C9              ldS_FracDYltDX:								;
  91+ E5C9 2A 6D E3     	ld		hl,(l2deltaY)					; Fraction = dY - dX
  92+ E5CC ED 5B 6F E3  	ld		de,(l2deltaX)
  93+ E5D0              	ClearCarryFlag
  93+ E5D0 B7          >                        or a
  94+ E5D1 ED 52        	sbc		hl,de							; sbc does not have an SBC IY so need to do this in HL
  95+ E5D3 EB           	ex		de,hl
  96+ E5D4 FD 62        	ld		iyh,d							; we will use IY reg for fractions
  97+ E5D6 FD 6B        	ld		iyl,e
  98+ E5D8 F2 FD E5     	jp		p,l2S_fracIsPositive
  99+ E5DB              l2S_fracIsNegative:
 100+ E5DB              	NegIY
 100+ E5DB AF          >                    xor a
 100+ E5DC FD 95       >                    sub iyl
 100+ E5DE FD 6F       >                    ld iyl,a
 100+ E5E0 9F          >                    sbc a,a
 100+ E5E1 FD 94       >                    sub iyh
 100+ E5E3 FD 67       >                    ld iyh,a
 101+ E5E5              	ShiftIYRight1
 101+ E5E5 FD 7C       >			   ld 	a,iyh
 101+ E5E7 CB 3F       >			   srl 	a
 101+ E5E9 FD 67       >			   ld	iyh,a
 101+ E5EB FD 7D       >			   ld 	a,iyl
 101+ E5ED 1F          >			   rra
 101+ E5EE FD 6F       >			   ld	iyl,a
 102+ E5F0              	NegIY
 102+ E5F0 AF          >                    xor a
 102+ E5F1 FD 95       >                    sub iyl
 102+ E5F3 FD 6F       >                    ld iyl,a
 102+ E5F5 9F          >                    sbc a,a
 102+ E5F6 FD 94       >                    sub iyh
 102+ E5F8 FD 67       >                    ld iyh,a
 103+ E5FA C3 08 E6     	jp		l2S_SkipCalcInc					; so we have a negative frac
 104+ E5FD              l2S_fracIsPositive:
 105+ E5FD              	ShiftIYRight1
 105+ E5FD FD 7C       >			   ld 	a,iyh
 105+ E5FF CB 3F       >			   srl 	a
 105+ E601 FD 67       >			   ld	iyh,a
 105+ E603 FD 7D       >			   ld 	a,iyl
 105+ E605 1F          >			   rra
 105+ E606 FD 6F       >			   ld	iyl,a
 106+ E608              l2S_SkipCalcInc:
 107+ E608              l2S_Loop:									; As we loop, bc = to plot current XY
 108+ E608 2A 7D E3     	ld		hl,(l2targetPtr)				; Insert into respective array
 109+ E60B 78           	ld		a,b
 110+ E60C ED 31        	add		hl,a
 111+ E60E 71           	ld		(hl),c
 112+ E60F              l2S_CheckIfEnd:
 113+ E60F DD 7C        	ld		a,ixh
 114+ E611              	JumpIfAGTENusng	  b,l2S_CheckXPos		; if Y1 < Y2 then continue regardless, when it hits Y2 then we must check X1 and X2
 114+ E611 B8          >                        cp     b
 114+ E612 D2 18 E6    >                        jp		nc,l2S_CheckXPos
 115+ E615 C3 1C E6     	jp		l2S_Continue
 116+ E618              l2S_CheckXPos:
 117+ E618 79           	ld		a,c
 118+ E619              	ReturnIfAGTENusng ixl					; if X1 has reached or exceeded X2 then we are done
 118+ E619 DD BD       >                        cp    ixl
 118+ E61B D0          >                        ret	 nc
 119+ E61C              l2S_Continue:
 120+ E61C              l2S_HNegative:
 121+ E61C FD 7C        	ld		a,iyh
 122+ E61E CB 7F        	bit		7,a								; if its negative then we need to deal with delta Y, there is no bit n,iyh instrunction
 123+ E620 28 0B        	jr		z,l2S_ErrNotNegative			;
 124+ E622              l2S_ErrNegative:								; if its a negative error update X
 125+ E622 3A 6D E3     	ld		a,(l2deltaY)
 126+ E625 16 00        	ld		d,0
 127+ E627 5F           	ld		e,a
 128+ E628 FD 19        	add		iy,de							; add deltaY(unsinged) to l2fraction
 129+ E62A              l2S_adjustCol:
 130+ E62A 00           	nop										; this is our inc/dec of X
 131+ E62B 18 DB        	jr		l2S_Loop							; repeat loop
 132+ E62D              l2S_ErrNotNegative:
 133+ E62D FD 7C        	ld		a,iyh
 134+ E62F FD B5        	or		iyl
 135+ E631              	JumpIfAIsZero l2S_ErrZero					; if there is no error then goto zeroerror
 135+ E631 A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
 135+ E632 CA 4B E6    >                        jp	    z, l2S_ErrZero
 136+ E635              l2S_ErrPositive:								; if its a positive error then we update Y
 137+ E635              	lddeiy
 137+ E635 FD 54       >                        ld		d,iyh
 137+ E637 FD 5D       >                        ld		e,iyl
 138+ E639 EB           	ex		de,hl
 139+ E63A 16 00        	ld		d,0
 140+ E63C 3A 6F E3     	ld		a,(l2deltaX)
 141+ E63F 5F           	ld		e,a
 142+ E640              	ClearCarryFlag
 142+ E640 B7          >                        or a
 143+ E641 ED 52        	sbc		hl,de
 144+ E643 EB           	ex		de,hl
 145+ E644              	ldiyde
 145+ E644 FD 62       >                        ld		iyh,d
 145+ E646 FD 6B       >                        ld		iyl,e
 146+ E648              l2S_adjustRow:									; move Y down by one
 147+ E648 04           	inc		b
 148+ E649 18 BD        	jr		l2S_Loop
 149+ E64B              l2S_ErrZero:
 150+ E64B 2A 6F E3     	ld		hl,(l2deltaX)
 151+ E64E EB           	ex		de,hl
 152+ E64F 2A 6D E3     	ld		hl,(l2deltaY)
 153+ E652              	ClearCarryFlag
 153+ E652 B7          >                        or a
 154+ E653 ED 52        	sbc		hl,de
 155+ E655 EB           	ex		de,hl
 156+ E656              	ldiyde
 156+ E656 FD 62       >                        ld		iyh,d
 156+ E658 FD 6B       >                        ld		iyl,e
 157+ E65A              l2S_adjustCol2:
 158+ E65A 00           	nop										; update X and Y
 159+ E65B 04           	inc		b
 160+ E65C 18 AA        	jr		l2S_Loop
 161+ E65E
 162+ E65E              ; ">l2_draw_diagonal, bc = y0,x0 de=y1,x1,a=color) Thsi version performs a pre sort based on y axis"
 163+ E65E 32 77 E3     l2_draw_diagonal:       ld		(l2linecolor),a					;save colour for later
 164+ E661 21 00 00                             ld		hl,0                            ;
 165+ E664 22 6F E3                             ld		(l2deltaX),hl                   ;
 166+ E667 22 6D E3                             ld		(l2deltaY),hl                   ; initlaise deltas as we will only be loading 8 bit in there but workign in 16 bit later
 167+ E66A 78           l2D_preSort:            ld		a,b								;
 168+ E66B                                      JumpIfALTNusng	d,l2D_noYSort			; we must have Y1 < Y2 (if equal then verical line picked up earlier
 168+ E66B BA          >                        cp      d
 168+ E66C DA 74 E6    >                        jp		c, l2D_noYSort
 169+ E66F              l2D_SortBasedOnY:	    ldhlbc									;
 169+ E66F 60          >                        ld		h,b
 169+ E670 69          >                        ld		l,c
 170+ E671 EB                                   ex		de,hl                           ;
 171+ E672                                      ldbchl									; swap over bc and de using hl as an intermediate
 171+ E672 44          >                        ld		b,h
 171+ E673 4D          >                        ld		c,l
 172+ E674 DD 62        l2D_noYSort:		    ld		ixh,d							; ixh now holds target Y coord post sorting
 173+ E676 DD 6B                                ld		ixl,e							; ixl now holds target X coord post sorting
 174+ E678 79           l2D_setXLen:            ld		a,c                             ;
 175+ E679                                      JumpIfALTNusng e,l2D_PosXLen			; if x1 < x2 then we have a positive increment
 175+ E679 BB          >                        cp      e
 175+ E67A DA 86 E6    >                        jp		c, l2D_PosXLen
 176+ E67D 79           l2D_NegXLen:            ld		a,c                             ;
 177+ E67E 93                                   sub     e                               ;
 178+ E67F 32 6F E3                             ld		(l2deltaX),a					; As x1 > x2 we do deltaX = X1 - X2
 179+ E682 3E 0D                                ld		a,l2deccstep					; and set the value for inc dec self modifying to Dec
 180+ E684 18 07                                jr		l2D_XINCDEC
 181+ E686 7B           l2D_PosXLen:	        ld		a,e                             ;
 182+ E687 91                                   sub		c                               ;
 183+ E688 32 6F E3                             ld 		(l2deltaX),a                    ; As x1 < x2 we do deltaX = X2 - X1
 184+ E68B 3E 0C                                ld		a,l2inccstep                    ; and set the value for inc dec self modifying to Inc
 185+ E68D 32 FC E6     l2D_XINCDEC:	        ld		(l2D_adjustCol),a				;
 186+ E690 32 2C E7                             ld		(l2D_adjustCol2),a				; update self modifying code for X update with inc or dec from above
 187+ E693 7A           l2D_setYLen				ld		a,d							 	; presorted on Y so it is now always positive
 188+ E694 90                                   sub		b
 189+ E695 32 6D E3                             ld 		(l2deltaY),a					; DeltaY = Y2 - Y1
 190+ E698              l2D_setErr:									;  LD H  := (D'-E')/2    round up if +ve or down if -ve
 191+ E698 2A 6D E3     ldD_FracDYltDX:			ld		hl,(l2deltaY)					; Fraction = dY - dX
 192+ E69B ED 5B 6F E3                          ld		de,(l2deltaX)
 193+ E69F                                      ClearCarryFlag
 193+ E69F B7          >                        or a
 194+ E6A0 ED 52                                sbc		hl,de							; sbc does not have an SBC IY so need to do this in HL
 195+ E6A2 EB                                   ex		de,hl
 196+ E6A3 FD 62                                ld		iyh,d							; we will use IY reg for fractions
 197+ E6A5 FD 6B                                ld		iyl,e
 198+ E6A7 F2 CC E6                             jp		p,l2D_fracIsPositive
 199+ E6AA              l2D_fracIsNegative:     NegIY
 199+ E6AA AF          >                    xor a
 199+ E6AB FD 95       >                    sub iyl
 199+ E6AD FD 6F       >                    ld iyl,a
 199+ E6AF 9F          >                    sbc a,a
 199+ E6B0 FD 94       >                    sub iyh
 199+ E6B2 FD 67       >                    ld iyh,a
 200+ E6B4                                      ShiftIYRight1
 200+ E6B4 FD 7C       >			   ld 	a,iyh
 200+ E6B6 CB 3F       >			   srl 	a
 200+ E6B8 FD 67       >			   ld	iyh,a
 200+ E6BA FD 7D       >			   ld 	a,iyl
 200+ E6BC 1F          >			   rra
 200+ E6BD FD 6F       >			   ld	iyl,a
 201+ E6BF                                      NegIY
 201+ E6BF AF          >                    xor a
 201+ E6C0 FD 95       >                    sub iyl
 201+ E6C2 FD 6F       >                    ld iyl,a
 201+ E6C4 9F          >                    sbc a,a
 201+ E6C5 FD 94       >                    sub iyh
 201+ E6C7 FD 67       >                    ld iyh,a
 202+ E6C9 C3 D7 E6                             jp		l2D_SkipCalcInc					; so we have a negative frac
 203+ E6CC              l2D_fracIsPositive:     ShiftIYRight1
 203+ E6CC FD 7C       >			   ld 	a,iyh
 203+ E6CE CB 3F       >			   srl 	a
 203+ E6D0 FD 67       >			   ld	iyh,a
 203+ E6D2 FD 7D       >			   ld 	a,iyl
 203+ E6D4 1F          >			   rra
 203+ E6D5 FD 6F       >			   ld	iyl,a
 204+ E6D7              l2D_SkipCalcInc:
 205+ E6D7 C5 D5        l2D_Loop:				push	bc,,de                 			; l2DeltaY and l2DeltaX are set
 206+ E6D9 3A 77 E3                             ld		a,(l2linecolor)     			;
 207+ E6DC CD 37 E1                             call	l2_plot_pixel       			; Plot Pixel
 208+ E6DF D1 C1                                pop     bc,,de
 209+ E6E1 DD 7C        l2D_CheckIfEnd:	        ld		a,ixh
 210+ E6E3                                      JumpIfAGTENusng	  b,l2D_CheckXPos		; if Y1 < Y2 then continue regardless, when it hits Y2 then we must check X1 and X2
 210+ E6E3 B8          >                        cp     b
 210+ E6E4 D2 EA E6    >                        jp		nc,l2D_CheckXPos
 211+ E6E7 C3 EE E6                             jp		l2D_Continue
 212+ E6EA 79           l2D_CheckXPos:          ld		a,c
 213+ E6EB                                      ReturnIfAEqNusng ixl					; if X1 has reached or exceeded X2 then we are done
 213+ E6EB DD BD       >                        cp      ixl
 213+ E6ED C8          >                        ret     z
 214+ E6EE              l2D_Continue:
 215+ E6EE FD 7C        l2D_HNegative:			ld		a,iyh
 216+ E6F0 CB 7F                                bit		7,a								; if its negative then we need to deal with delta Y, there is no bit n,iyh instrunction
 217+ E6F2 28 0B                                jr		z,l2D_ErrNotNegative			;
 218+ E6F4 3A 6D E3     l2D_ErrNegative:		ld		a,(l2deltaY)
 219+ E6F7 16 00                                ld		d,0
 220+ E6F9 5F                                   ld		e,a
 221+ E6FA FD 19                                add		iy,de							; add deltaY(unsinged) to l2fraction
 222+ E6FC 00           l2D_adjustCol:          nop										; this is our inc/dec of X
 223+ E6FD 18 D8                                jr		l2D_Loop							; repeat loop
 224+ E6FF FD 7C        l2D_ErrNotNegative:     ld		a,iyh
 225+ E701 FD B5                                or		iyl
 226+ E703                                      JumpIfAIsZero l2D_ErrZero					; if there is no error then goto zeroerror
 226+ E703 A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
 226+ E704 CA 1D E7    >                        jp	    z, l2D_ErrZero
 227+ E707              l2D_ErrPositive:		lddeiy
 227+ E707 FD 54       >                        ld		d,iyh
 227+ E709 FD 5D       >                        ld		e,iyl
 228+ E70B EB                                   ex		de,hl
 229+ E70C 16 00                                ld		d,0
 230+ E70E 3A 6F E3                             ld		a,(l2deltaX)
 231+ E711 5F                                   ld		e,a
 232+ E712                                      ClearCarryFlag
 232+ E712 B7          >                        or a
 233+ E713 ED 52                                sbc		hl,de
 234+ E715 EB                                   ex		de,hl
 235+ E716                                      ldiyde
 235+ E716 FD 62       >                        ld		iyh,d
 235+ E718 FD 6B       >                        ld		iyl,e
 236+ E71A 04           l2D_adjustRow:			inc		b
 237+ E71B 18 BA                                jr		l2D_Loop
 238+ E71D 2A 6F E3     l2D_ErrZero:            ld		hl,(l2deltaX)
 239+ E720 EB                                   ex		de,hl
 240+ E721 2A 6D E3                             ld		hl,(l2deltaY)
 241+ E724                                      ClearCarryFlag
 241+ E724 B7          >                        or a
 242+ E725 ED 52                                sbc		hl,de
 243+ E727 EB                                   ex		de,hl
 244+ E728                                      ldiyde
 244+ E728 FD 62       >                        ld		iyh,d
 244+ E72A FD 6B       >                        ld		iyl,e
 245+ E72C 00           l2D_adjustCol2:         nop										; update X and Y
 246+ E72D 04                                   inc		b
 247+ E72E 18 A7                                jr		l2D_Loop
 248+ E730              ;----------------------------------------------------------------------------------------------------------------------------------
 249+ E730
 250+ E730
 251+ E730
 252+ E730
 253+ E730              ;Loin:				; BBC version of line draw
 254+ E730              ;; ">l2_draw_diagonal, bc = y0,x0 de=y1,x1,a=color)"
 255+ E730              ;	ld		(l2linecolor),a					; save colour as a reg gets used alot, coudl move this into interrupt flag and disable interrups
 256+ E730              ;	ld		ixh,0							; ixh = s
 257+ E730              ;	ld		iyh,0							; iyh = swap
 258+ E730              ;	ld		l,0								; l will hold delta sign flags
 259+ E730              ;LoinCalcDeltaX:
 260+ E730              ;	ld		a,e
 261+ E730              ;	sub		c								; a = deltaX
 262+ E730              ;	JumpIfPositive LoinPosDx
 263+ E730              ;LoinNegDx:
 264+ E730              ;	neg										; carry flag will indicate deltaX was negative
 265+ E730              ;	ld		l,$80							; set bit 7 of l for negative
 266+ E730              ;LoinPosDx:
 267+ E730              ;	ld		ixl,a							; ixl = varP = deltaX
 268+ E730              ;LoinCalcDeltaY:
 269+ E730              ;	ld		a,d
 270+ E730              ;	sub		b								; a= deltaY
 271+ E730              ;	JumpIfPositive LoinPosDy
 272+ E730              ;LoinNegDy:
 273+ E730              ;	neg
 274+ E730              ;	set		6,l								; set bit 6 of l for negative deltaY
 275+ E730              ;LoinPosDy:
 276+ E730              ;	ld		iyl,a							; iyl = varQ = deltaY
 277+ E730              ;	JumpIfAGTENusng ixl, LoinSTPy			; if deltaY >= DeltaX then step along Y
 278+ E730              ;LoinSTPx:									; step along X
 279+ E730              ;	JumpOnBitClear l,7						; if l flags were clear then X2 < X2
 280+ E730              ;LoinSTPxSwapCoords:
 281+ E730              ;	dec		iyh								; swap flag now becomes FF
 282+ E730              ;	ld		a,l								; save l flags
 283+ E730              ;	ex		de,hl							; save de to hl
 284+ E730              ;	lddebc									; Point2 = point1
 285+ E730              ;	ldbchl									; Point1 = point2 that was saved
 286+ E730              ;	ld		l,a								; get back l flags
 287+ E730              ;LoinSTPxCorrectOrder:
 288+ E730              ;	l2_point_pixel_y_safe					; call plot pixel preseving bc hl
 289+ E730              ;	ld		a,iyl							; get delta Y back
 290+ E730              ;	ld		iy1,$FE							; roll counter
 291+ E730              ;LionSTPxRollQ:
 292+ E730              ;	sla		a								; highest bit of delta-Y
 293+ E730              ;	jp		c,LoinSTPxSteep
 294+ E730              ;	cp		ixl								; compare with DeltaX
 295+ E730              ;	jp		cs,LoinSTPxShallow
 296+ E730              ;LoinSTPxSteep:								;; LI4
 297+ E730              ;	sbc		a,ixl							; deltaYwork -= (deltaX+1)
 298+ E730              ;	scf										; force carry flag set
 299+ E730              ;LoinSTPxShallow:							;; LI5
 300+ E730              ;	rl		iyl								; rotate iyl which started as FE
 301+ E730              ;	jp		c,LionSTPxRollQ					; so we are doing a 6 bit loop
 302+ E730              ;	inc		ihl								; DeltaX += 1
 303+ E730              ;LoinSTPxYDirection:							; change this to self modifying code
 304+ E730              ;	ld		a,d
 305+ E730              ;	JumpIfAGTEn	b,LionDOWN:
 306+ E730              ;	ld		a,iyh							; swap flag
 307+ E730              ;	JumpIfANotZero	X1Inc  					; if swap flag was not set then no need to update R
 308+ E730              ;LoinSTPxX1Dec:
 309+ E730              ;	dec		c								; move left 1 pixel as we sawped
 310+ E730              ;LoinSTPxXCounter:							;; LIL2
 311+ E730              ;	sub		b
 312+ E730              ;	if
 313+ E730              ;
 314+ E730              ;85 82                   STA &82	   \ R	\ mask byte
 315+ E730              ;A5 81                   LDA &81	   \ Q	\ delta-Y
 316+ E730              ;A2 FE                   LDX #&FE	\ roll counter
 317+ E730              ;86 81                   STX &81		\ Q
 318+ E730              ;.LIL1	\ roll Q
 319+ E730              ;0A                      ASL A		\ highest bit of delta-Y
 320+ E730              ;B0 04                   BCS LI4		\ steep
 321+ E730              ;C5 1B                   CMP &1B	   \ P	\ delta-X
 322+ E730              ;90 03                   BCC LI5		\ shallow
 323+ E730              ;.LI4	\ steep
 324+ E730              ;E5 1B                   SBC &1B		\ P
 325+ E730              ;38                      SEC
 326+ E730              ;.LI5	\ shallow
 327+ E730              ;26 81                   ROL &81	   \ Q	\ #&FE
 328+ E730              ;B0 F2                   BCS LIL1 	\ loop Q, end with some low bits in Q
 329+ E730              ;A6 1B                   LDX &1B		\ P
 330+ E730              ;E8                      INX 		\ Xreg is width
 331+ E730              ;A5 37                   LDA &37		\ Y2
 332+ E730              ;E5 35                   SBC &35		\ Y1
 333+ E730              ;B0 2C                   BCS DOWN	\ draw line to the right and down
 334+ E730              ;A5 90                   LDA &90		\ SWAP
 335+ E730              ;D0 07                   BNE LI6		\ else Xreg was correct after all, no need to update R
 336+ E730              ;CA                      DEX
 337+ E730              ;.LIL2	\ counter X width
 338+ E730              ;A5 82                   LDA &82	   \ R	\ mask byte
 339+ E730              ;51 07                   EOR (&07),Y	\ (SC),Y
 340+ E730              ;91 07                   STA (&07),Y	\ (SC),Y
 341+ E730              ;.LI6	\ Xreg correct
 342+ E730              ;46 82                   LSR &82	   \ R	\ mask byte
 343+ E730              ;90 08                   BCC LI7   	\ else moving to next column to right. Bring carry in back
 344+ E730              ;66 82                   ROR &82		\ R
 345+ E730              ;A5 07                   LDA &07		\ SC
 346+ E730              ;69 08                   ADC #8		\ next column
 347+ E730              ;85 07                   STA &07		\ SC
 348+ E730              ;.LI7	\ S += Q. this is like an overflow monitor to update Y
 349+ E730              ;A5 83                   LDA &83		\ S
 350+ E730              ;65 81                   ADC &81	   \ Q	\ some low bits
 351+ E730              ;85 83                   STA &83		\ S
 352+ E730              ;90 07                   BCC LIC2	\ skip Y adjustment
 353+ E730              ;88                      DEY
 354+ E730              ;10 04                   BPL LIC2	\ skip Y adjustment
 355+ E730              ;C6 08                   DEC &08		\ SC+1
 356+ E730              ;A0 07                   LDY #7
 357+ E730              ;.LIC2	\ skip Y adjustment
 358+ E730              ;CA                      DEX
 359+ E730              ;D0 DC                   BNE LIL2	\ loop X width
 360+ E730              ;A4 85                   LDY &85	 \ YSAV \ restore Yreg
 361+ E730              ;60                      RTS
 362+ E730              ;
 363+ E730              ;.DOWN	\ Line is going to the right and down
 364+ E730              ;A5 90                   LDA &90		\ SWAP
 365+ E730              ;F0 07                   BEQ LI9		\ no swap
 366+ E730              ;CA                      DEX
 367+ E730              ;.LIL3	\ counter X width
 368+ E730              ;A5 82                   LDA &82	    \ R \ mask byte
 369+ E730              ;51 07                   EOR (&07),Y	\ (SC),Y
 370+ E730              ;91 07                   STA (&07),Y	\ (SC),Y
 371+ E730              ;.LI9	\ no swap
 372+ E730              ;46 82                   LSR &82		\ R
 373+ E730              ;90 08                   BCC LI10	\ still in correct column, hop
 374+ E730              ;66 82                   ROR &82		\ R
 375+ E730              ;A5 07                   LDA &07		\ SC
 376+ E730              ;69 08                   ADC #8		\ next column
 377+ E730              ;85 07                   STA &07		\ SC
 378+ E730              ;.LI10	\ this is like an overflow monitor to update Y
 379+ E730              ;A5 83                   LDA &83		\ S
 380+ E730              ;65 81                   ADC &81		\ Q
 381+ E730              ;85 83                   STA &83		\ S
 382+ E730              ;90 09                   BCC LIC3	\ skip Y adjustment
 383+ E730              ;C8                      INY
 384+ E730              ;C0 08                   CPY #8
 385+ E730              ;D0 04                   BNE LIC3	\ have not reached bottom byte of char, hop
 386+ E730              ;E6 08                   INC &08		\ SC+1
 387+ E730              ;A0 00                   LDY #0
 388+ E730              ;.LIC3	\ skipped Y adjustment
 389+ E730              ;CA                      DEX
 390+ E730              ;D0 DA                   BNE LIL3	\ loop X width
 391+ E730              ;A4 85                   LDY &85	 \ YSAV \ restore Yreg
 392+ E730              ;60                      RTS
 393+ E730              ;
 394+ E730              ;.STPY	\ -> &1797 \ Step along y for line, goes down and to right
 395+ E730              ;A4 35                   LDY &35		\ Y1
 396+ E730              ;98                      TYA
 397+ E730              ;A6 34                   LDX &34		\ X1
 398+ E730              ;C4 37                   CPY &37		\ Y2
 399+ E730              ;B0 10                   BCS LI15	\ skip swap if Y1 >= Y2
 400+ E730              ;C6 90                   DEC &90		\ SWAP
 401+ E730              ;A5 36                   LDA &36		\ X2
 402+ E730              ;85 34                   STA &34		\ X1
 403+ E730              ;86 36                   STX &36		\ X2
 404+ E730              ;AA                      TAX
 405+ E730              ;A5 37                   LDA &37		\ Y2
 406+ E730              ;85 35                   STA &35		\ Y1
 407+ E730              ;84 37                   STY &37		\ Y2
 408+ E730              ;A8                      TAY
 409+ E730              ;.LI15	\ Y1 Y2 order is now correct
 410+ E730              ;4A                      LSR A
 411+ E730              ;4A                      LSR A
 412+ E730              ;4A                      LSR A
 413+ E730              ;09 60                   ORA #&60
 414+ E730              ;85 08                   STA &08	 \ SC+1	\ screen hi
 415+ E730              ;8A                      TXA 		\ X1
 416+ E730              ;29 F8                   AND #&F8
 417+ E730              ;85 07                   STA &07	  \ SC	\ screen lo
 418+ E730              ;8A                      TXA
 419+ E730              ;29 07                   AND #7		\ mask index
 420+ E730              ;AA                      TAX
 421+ E730              ;BD AF 16                LDA &16AF,X \ TWOS,X \ Mode4 single pixel
 422+ E730              ;85 82                   STA &82	    \ R	\ mask
 423+ E730              ;A5 35                   LDA &35		\ Y1
 424+ E730              ;29 07                   AND #7
 425+ E730              ;A8                      TAY
 426+ E730              ;A5 1B                   LDA &1B	    \ P	\ delta-X
 427+ E730              ;A2 01                   LDX #1		\ roll counter
 428+ E730              ;86 1B                   STX &1B	    	\ P
 429+ E730              ;.LIL4	\ roll P
 430+ E730              ;0A                      ASL A
 431+ E730              ;B0 04                   BCS LI13	\ do subtraction
 432+ E730              ;C5 81                   CMP &81	    \ Q	\ delta-Y
 433+ E730              ;90 03                   BCC LI14	\ less than Q
 434+ E730              ;.LI13	\ do subtraction
 435+ E730              ;E5 81                   SBC &81		\ Q
 436+ E730              ;38                      SEC
 437+ E730              ;.LI14	\ less than Q
 438+ E730              ;26 1B                   ROL &1B		\ P
 439+ E730              ;90 F2                   BCC LIL4	\ loop P, end with some low bits in P
 440+ E730              ;A6 81                   LDX &81		\ Q
 441+ E730              ;E8                      INX 		\ adjust height
 442+ E730              ;A5 36                   LDA &36		\ X2
 443+ E730              ;E5 34                   SBC &34		\ X1
 444+ E730              ;90 2D                   BCC LFT		\ if C cleared then line moving to the left - hop down
 445+ E730              ;18                      CLC
 446+ E730              ;A5 90                   LDA &90		\ SWAP
 447+ E730              ;F0 07                   BEQ LI17 	\ skip first point
 448+ E730              ;CA                      DEX
 449+ E730              ;.LIL5	\ skipped first point, counter X
 450+ E730              ;A5 82                   LDA &82	    \ R \ mask byte
 451+ E730              ;51 07                   EOR (&07),Y	\ (SC),Y
 452+ E730              ;91 07                   STA (&07),Y	\ (SC),Y
 453+ E730              ;.LI17	\ skipped first point
 454+ E730              ;88                      DEY
 455+ E730              ;10 04                   BPL LI16	\ skip hi adjust
 456+ E730              ;C6 08                   DEC &08		\ SC+1
 457+ E730              ;A0 07                   LDY #7		\ new char
 458+ E730              ;	.LI16	\ skipped hi adjust
 459+ E730              ;A5 83                   LDA &83		\ S
 460+ E730              ;65 1B                   ADC &1B		\ P
 461+ E730              ;85 83                   STA &83		\ S
 462+ E730              ;90 0C                   BCC LIC5	\ skip, still in same column
 463+ E730              ;46 82                   LSR &82	  \ R	\ mask
 464+ E730              ;90 08                   BCC LIC5  	\ no mask bit hop
 465+ E730              ;66 82                   ROR &82   \ R	\ else moved over to next column, reset mask
 466+ E730              ;A5 07                   LDA &07	  \ SC  \ screen lo
 467+ E730              ;69 08                   ADC #8		\ next char below
 468+ E730              ;85 07                   STA &07		\ SC
 469+ E730              ;.LIC5	\ same column
 470+ E730              ;CA                      DEX
 471+ E730              ;D0 DC                   BNE LIL5	\ loop X height
 472+ E730              ;A4 85                   LDY &85	 \ YSAV	\ restore Yreg
 473+ E730              ;60                      RTS
 474+ E730              ;
 475+ E730              ;.LFT	\ going left
 476+ E730              ;A5 90                   LDA &90		\ SWAP
 477+ E730              ;F0 07                   BEQ LI18	\ skip first point
 478+ E730              ;CA                      DEX 		\ reduce height
 479+ E730              ;.LIL6	\ counter X height
 480+ E730              ;A5 82                   LDA &82	   \ R	\ mask byte
 481+ E730              ;51 07                   EOR (&07),Y	\ (SC),Y
 482+ E730              ;91 07                   STA (&07),Y	\ (SC),Y
 483+ E730              ;.LI18
 484+ E730              ;88                      DEY
 485+ E730              ;10 04                   BPL LI19	\ skip hi adjust
 486+ E730              ;C6 08                   DEC &08		\ SC+1
 487+ E730              ;A0 07                   LDY #7		\ rest char row
 488+ E730              ;.LI19	\ skipped hi adjust
 489+ E730              ;A5 83                   LDA &83		\ S
 490+ E730              ;65 1B                   ADC &1B	    \ P \ some low bits
 491+ E730              ;85 83                   STA &83		\ S
 492+ E730              ;90 0D                   BCC LIC6	\ no overflow
 493+ E730              ;06 82                   ASL &82	    \ R \ else move byte mask to the left
 494+ E730              ;90 09                   BCC LIC6	\ no overflow
 495+ E730              ;26 82                   ROL &82		\ R
 496+ E730              ;A5 07                   LDA &07		\ SC
 497+ E730              ;E9 07                   SBC #7		\ down 1 char
 498+ E730              ;85 07                   STA &07		\ SC
 499+ E730              ;18                      CLC
 500+ E730              ;.LIC6	\ no overflow
 501+ E730              ;CA                      DEX 		\ height
 502+ E730              ;D0 DB                   BNE LIL6	\ loop X
 503+ E730              ;A4 85                   LDY &85	 \ YSAV	\ restore Yreg
 504+ E730              ;.HL6
 505+ E730              ;60                      RTS 		\ end Line drawing
 506+ E730
 507+ E730
 508+ E730              ;;l2_draw_diagonalopt:
 509+ E730              	; ">TODO l2_draw_diagonalopt fast horz vert optmisation"
 510+ E730              ;;	push	af
 511+ E730              ;;	ld		a,b
 512+ E730              ;;	cp		d
 513+ E730              ;;	jr		z,.RegularDiagnonal
 514+ E730              ;;.CheckHorz:
 515+ E730              ;;	ld		a,c
 516+ E730              ;;	cp		e
 517+ E730              ;;	jr		z,.horizontalLine
 518+ E730              ;;.RegularDiagnonal:
 519+ E730              ;;	pop		af
 520+ E730              ;;	call diag
 521+ E730
 522+ E730
 523+ E730              ;;l2_signed_mul2a:
 524+ E730              ;;; ">l2_signed_mul2a - Signed a = a * 2 using shift)"
 525+ E730              ;;	TEST	$80
 526+ E730              ;;	jr		nz, .negativecalc
 527+ E730              ;;.positivecalc:
 528+ E730              ;;	ccf
 529+ E730              ;;	rla
 530+ E730              ;;	ret
 531+ E730              ;;.negativecalc:
 532+ E730              ;;	neg
 533+ E730              ;;	ccf
 534+ E730              ;;	rla
 535+ E730              ;;	neg
 536+ E730              ;;	ret
 537+ E730              ;;
 538+ E730              ;;l2_signed_mul2atohl:
 539+ E730              ;;; ">l2_signed_mul2ahl - Signed hl = a * 2 using shift)"
 540+ E730              ;;	TEST	$80
 541+ E730              ;;	jr		nz, .negativecalc
 542+ E730              ;;.positivecalc:
 543+ E730              ;;	ld		hl,0
 544+ E730              ;;	ld		l,a
 545+ E730              ;;	add		hl,a
 546+ E730              ;;	ret
 547+ E730              ;;.negativecalc:
 548+ E730              ;;	neg
 549+ E730              ;;	ld		hl,0
 550+ E730              ;;	ld		l,a
 551+ E730              ;;	neghl
 552+ E730              ;;	ret
 553+ E730              ;;
 554+ E730              ;;l2_e2fractionby2:
 555+ E730              ;;	ld 		hl,(l2fraction)
 556+ E730              ;;	push	de
 557+ E730              ;;	ld		d,h
 558+ E730              ;;	ld		e,l
 559+ E730              ;;	add		hl,de
 560+ E730              ;;	pop		de
 561+ E730              ;;	ld		(l2e2),hl
 562+ E730              ;;	ret
 563+ E730
 564+ E730
 565+ E730
 566+ E730
 567+ E730
 568+ E730              ;;//	ld		(l2linecolor),a   			; could do an ex but it will be needed multiple times between many uses of a reg
 569+ E730              ;;//.catchLoop:
 570+ E730              ;;//	jp .catchLoop
 571+ E730              ;;//.continue:
 572+ E730              ;;//    ld      A,D
 573+ E730              ;;//    sub     H
 574+ E730              ;;//    jr      NC,.DXpositive    ;delta_x > 0
 575+ E730              ;;//.DXNegative:
 576+ E730              ;;//    neg
 577+ E730              ;;//.DXPositive:
 578+ E730              ;;//    ld      B,A              ;B <- |delta_x|
 579+ E730              ;;//    ld      A,E
 580+ E730              ;;//    sub     L
 581+ E730              ;;//    jr      NC,.DYpositive    ;delta_y > 0
 582+ E730              ;;//.DYNegative:
 583+ E730              ;;//    neg
 584+ E730              ;;//.DYPositive:
 585+ E730              ;;//    sub     B               ;|delta_y|
 586+ E730              ;;//	push	af
 587+ E730              ;;//	jr		c,.DeltaX
 588+ E730              ;;//.DeltaY
 589+ E730              ;;//	ld      A,H             			;if |delta_x| < |delta_y| then
 590+ E730              ;;//    ld      H,L             			;then values x and y are swapped
 591+ E730              ;;//    ld      L,A             			;so the loop will always be performed on the
 592+ E730              ;;//    ld      A,D             			;x value. A flag must be set to
 593+ E730              ;;//    ld      D,E             			;remind that data must be drawn (y,x)
 594+ E730              ;;//    ld      E,A             			;instead of (x,y)
 595+ E730              ;;//.DeltaX:
 596+ E730              ;;//	ld		a,d
 597+ E730              ;;//	sub		h
 598+ E730              ;;//	jr		nc,.TestDY					; x1 < x2
 599+ E730              ;;//.TestDX:
 600+ E730              ;;//	ex		de,hl
 601+ E730              ;;//.TestDY:
 602+ E730              ;;//	ld		a,e
 603+ E730              ;;//	sub		l
 604+ E730              ;;//    ld      A,$01
 605+ E730              ;;//    jr      NC,.StoreA
 606+ E730              ;;//    neg                     ;y1 > y2 : in case2 the 'y' variable
 607+ E730              ;;//.StoreA:
 608+ E730              ;;//        ld      (l2way),A
 609+ E730              ;;//.InitLine:
 610+ E730              ;;//        ld      B,H
 611+ E730              ;;//        ld      C,L
 612+ E730              ;;//        ld      A,E
 613+ E730              ;;//        sub     L
 614+ E730              ;;//        jr      NC,.EndInit
 615+ E730              ;;//        ld      A,L
 616+ E730              ;;//        ld      L,E
 617+ E730              ;;//        ld      E,A
 618+ E730              ;;//.EndInit:
 619+ E730              ;;//        ld      A,E
 620+ E730              ;;//        sub     L
 621+ E730              ;;//        rla
 622+ E730              ;;//        ld      L,A             ;value to add in case1 (d < 0)
 623+ E730              ;;//        add     A,H
 624+ E730              ;;//        sub     D
 625+ E730              ;;//        ld      E,A             ;'d' variable is initialised
 626+ E730              ;;//        add     A,H
 627+ E730              ;;//        sub     D
 628+ E730              ;;//        ld      H,A             ;value to add in case2 (d >= 0)
 629+ E730              ;;//.Loop:
 630+ E730              ;;//        ld      A,B
 631+ E730              ;;//        sub     D
 632+ E730              ;;//        jr      NC,.EndLine       ;the line is completely drawn.
 633+ E730              ;;//        pop     AF
 634+ E730              ;;//        bit     7,A
 635+ E730              ;;//        push    AF
 636+ E730              ;;//        push    AF
 637+ E730              ;;//        push    BC
 638+ E730              ;;//        jr      Z,.DrawPoint
 639+ E730              ;;//        ld      A,B
 640+ E730              ;;//        ld      B,C
 641+ E730              ;;//        ld      C,A
 642+ E730              ;;//.DrawPoint:
 643+ E730              ;;//		push	hl
 644+ E730              ;;//		pushbcdeaf
 645+ E730              ;;//		ld		b,e
 646+ E730              ;;//		ld		c,d
 647+ E730              ;;//	ld 		a,(l2linecolor)
 648+ E730              ;;//	call	l2_plot_pixel
 649+ E730              ;;//		popafdebc
 650+ E730              ;;//		pop		hl
 651+ E730              ;;//        pop     BC
 652+ E730              ;;//        pop     AF
 653+ E730              ;;//.TestD:
 654+ E730              ;;//        bit     7,E
 655+ E730              ;;//        jr      NZ,.Case1
 656+ E730              ;;//.Case2:                          ;d >= 0
 657+ E730              ;;//        ld      A,E
 658+ E730              ;;//        add     A,H
 659+ E730              ;;//        ld      E,A
 660+ E730              ;;//        ld      A,(l2way)
 661+ E730              ;;//        add     A,C
 662+ E730              ;;//        ld      C,A
 663+ E730              ;;//        jr      .EndLoop
 664+ E730              ;;//.Case1:                          ;d < 0
 665+ E730              ;;//        ld      A,E
 666+ E730              ;;//        add     A,L
 667+ E730              ;;//        ld      E,A
 668+ E730              ;;//.EndLoop:
 669+ E730              ;;//        inc     B
 670+ E730              ;;//        jr      .Loop
 671+ E730              ;;//.EndLine:
 672+ E730              ;;//        pop     AF              ;MUST NOT BE REMOVED
 673+ E730              ;;//        pop     HL              ;can be removed
 674+ E730              ;;//        pop     DE              ;can be removed
 675+ E730              ;;//        ret
 676+ E730
 677+ E730              ;;	ld		(.l2yadjust),a
 678+ E730              ;;	call	calcdeltax:
 679+ E730              ;;	ld		(.l2xadjust),a
 680+ E730              ;;.calcfraction:							; err(or fraction) = dx+dy;
 681+ E730              ;;	push	hl
 682+ E730              ;;	push	de
 683+ E730              ;;	ld		hl,(l2deltaX)
 684+ E730              ;;	ld		de,(l2deltaY)
 685+ E730              ;;	add		hl,de
 686+ E730              ;;	ld		(l2fraction),hl
 687+ E730              ;;	pop		de
 688+ E730              ;;	pop		hl
 689+ E730              ;;.mainloop:
 690+ E730              ;;	push	bc
 691+ E730              ;;	push	de
 692+ E730              ;;	ld 		a,(l2linecolor)
 693+ E730              ;;	call	l2_plot_pixel
 694+ E730              ;;	pop		de
 695+ E730              ;;	pop		bc
 696+ E730              ;;.arewefinishedtest
 697+ E730              ;;	ld		a,b
 698+ E730              ;;	cp		d
 699+ E730              ;;	jr		nz,.notthereyet
 700+ E730              ;;	ld		a,c
 701+ E730              ;;	cp		e
 702+ E730              ;;	ret		z
 703+ E730              ;;.notthereyet:
 704+ E730              ;;	push	de
 705+ E730              ;;	call	l2_e2fractionby2			; e2 = 2*err;
 706+ E730              ;;	pop		de
 707+ E730              ;;.e2dytest:								; if (e2 >= dy) /* e_xy+e_x > 0 */  then S and P/V are the same
 708+ E730              ;;	push	de							; so if m & pe  or p & po calc (m = sign set p = 0)
 709+ E730              ;;	ld		de,(l2deltaY)				;    if m & po  or p & pe skip  (pe = pv set po = pv 0)
 710+ E730              ;;	or		a							;
 711+ E730              ;;	sbc		hl,de						;
 712+ E730              ;;	pop		de
 713+ E730              ;;	jr		z,  .dodycalc				; if equal then calc
 714+ E730              ;;	jp		p,	.dodycalc				; sign clear to H>D even with negtives
 715+ E730              ;;	jr		.skipdycalc         		; sign = 0     so  skip as pe
 716+ E730              ;;.dodycalc:
 717+ E730              ;;	ld		hl,(l2fraction)
 718+ E730              ;;	push	de
 719+ E730              ;;	ld		de,(l2deltaY)
 720+ E730              ;;	add		hl,de
 721+ E730              ;;	ld		(l2fraction),de
 722+ E730              ;;	pop		de
 723+ E730              ;;.l2yadjust:
 724+ E730              ;;	nop
 725+ E730              ;;.skipdycalc:
 726+ E730              ;;.e2dxtest:								;  if (e2 <= dx) /* e_xy+e_y < 0 */ then S and P/V are different.
 727+ E730              ;;	ld		hl,(l2e2)
 728+ E730              ;;	push	de							;
 729+ E730              ;;	ld		de,(l2deltaX)				;
 730+ E730              ;;	or		a							; clear carry flag
 731+ E730              ;;	sbc		hl,de						; hl = hl - de is if de > hl will get pv and signed different?
 732+ E730              ;;	pop		de
 733+ E730              ;;	jr		z,.dodxcalc					; e2 == dx so do calc
 734+ E730              ;;	jp		m,.dodxcalc					; was sign bit set
 735+ E730              ;;	jr		.skipdxcalc         	    ; diff so skip ; pvclear = po        pvset = pe
 736+ E730              ;;.dodxcalc:
 737+ E730              ;;	ld		hl,(l2fraction)
 738+ E730              ;;	push	de
 739+ E730              ;;	ld		de,(l2deltaX)
 740+ E730              ;;	add		hl,de
 741+ E730              ;;	ld		(l2fraction),de
 742+ E730              ;;	pop		de
 743+ E730              ;;.l2xadjust:
 744+ E730              ;;	nop
 745+ E730              ;;.skipdxcalc:
 746+ E730              ;;	jr 		.mainloop
 747+ E730
 748+ E730
 749+ E730              ;;/l2_draw_diagonalold:
 750+ E730              ;;/MESSAGE ">l2_draw_diagonal, bc = y0,x0 de=y1,x1,a=color)"
 751+ E730              ;;/	ld		(l2linecolor),a   			; could do an ex but it will be needed multiple times between many uses of a reg
 752+ E730              ;;/.sortycoords:
 753+ E730              ;;/	ld		a,b							; Sort to Y0 is always > y1 so we don't have to deal with step y and only step x
 754+ E730              ;;/	cp		d
 755+ E730              ;;/	jr		nc, .nocoordswap
 756+ E730              ;;/.swapcoords:
 757+ E730              ;;/	ex		de,hl						; save de to hl ! effective code line 98 after macros
 758+ E730              ;;/	lddebc
 759+ E730              ;;/	ldbchl
 760+ E730              ;;/.nocoordswap:
 761+ E730              ;;/	ld		a,d							; l2_dy = -ABS(l2_vy1 - l2_vy0)
 762+ E730              ;;/	sub		b							; we have already sorted  so y1 > y0
 763+ E730              ;;/	ld		(l2deltaY),a
 764+ E730              ;;/	neg									; DEBUG
 765+ E730              ;;/	ld		(l2deltaYn),a				; DEBUG
 766+ E730              ;;/	neg									; DEBUG
 767+ E730              ;;/.deltaxequABSx0Minusx1:						; we need to set l2dx to abs x1-x0 and set
 768+ E730              ;;/    ld		a,c
 769+ E730              ;;/	cp		e
 770+ E730              ;;/	jr		c, .x1GTx0
 771+ E730              ;;/.x1LTx0
 772+ E730              ;;/	ld		a,c
 773+ E730              ;;/	sub		e
 774+ E730              ;;/	ld		(l2deltaX),a				; just 8 bit for now should it be 16?
 775+ E730              ;;/	neg									; DEBUG
 776+ E730              ;;/	ld		(l2deltaXn),a				; DEBUG
 777+ E730              ;;/	neg									; DEBUG
 778+ E730              ;;/	ld		a,l2incbstep
 779+ E730              ;;/	jr		.setlayershift0
 780+ E730              ;;/.x1GTx0:
 781+ E730              ;;/	ld		a,e
 782+ E730              ;;/	sub		c
 783+ E730              ;;/	ld		(l2deltaX),a					; just 8 bit for now should it be 16?
 784+ E730              ;;/	neg									; DEBUG
 785+ E730              ;;/	ld		(l2deltaXn),a				; DEBUG
 786+ E730              ;;/	neg									; DEBUG
 787+ E730              ;;/	ld		a,l2decbstep
 788+ E730              ;;/.setlayershift0:
 789+ E730              ;;/	ld		a,0
 790+ E730              ;;/	pushbcde
 791+ E730              ;;/	call	asm_l2_bank_n_select		; l2_layer_shift = 0 and bank 0 selected
 792+ E730              ;;/	popdebc
 793+ E730              ;;/; so now we have set inc or dec instruction, l2dy, l2dx and on bank 0,
 794+ E730              ;;/.dymuliplyby2:
 795+ E730              ;;/	ld		a, (l2deltaY)				; dy *= 2
 796+ E730              ;;/	call	l2_signed_mul2a
 797+ E730              ;;/	ld		(l2deltaYsq),a
 798+ E730              ;;/	neg									; DEBUG
 799+ E730              ;;/	ld		(l2deltaYsqn),a				; DEBUG
 800+ E730              ;;/	neg									; DEBUG
 801+ E730              ;;/.dxmuliplyby2:
 802+ E730              ;;/	ld		a, (l2deltaX)				; dx *= 2
 803+ E730              ;;/	call	l2_signed_mul2a
 804+ E730              ;;/	ld		(l2deltaXsq),a
 805+ E730              ;;/	neg									; DEBUG
 806+ E730              ;;/	ld		(l2deltaXsqn),a				; DEBUG
 807+ E730              ;;/	neg									; DEBUG
 808+ E730              ;;/.plotfirstpixel:
 809+ E730              ;;/	pushbcde
 810+ E730              ;;/	ld a,(l2linecolor)
 811+ E730              ;;/	call	l2_plot_pixel
 812+ E730              ;;/	popdebc
 813+ E730              ;;/.mainloop:								; if (l2_dx > l2_dy) signed
 814+ E730              ;;/	ld		a,(l2deltaX)				;If A < N, then S and P/V are different.
 815+ E730              ;;/	ld		hl,l2deltaY					;A >= N, then S and P/V are the same
 816+ E730              ;;/	cp		(hl)
 817+ E730              ;;/	jp		m,	.signset
 818+ E730              ;;/.signclear:
 819+ E730              ;;/	jp		pe,	.dxLTEdybranch
 820+ E730              ;;/	jr		.dxGTdybranch
 821+ E730              ;;/.signset:
 822+ E730              ;;/	jp		po,	.dxLTEdybranch
 823+ E730              ;;/.dxGTdybranch:
 824+ E730              ;;/	ld		a,(l2deltaYsq)
 825+ E730              ;;/	ld		hl,l2deltaX
 826+ E730              ;;/	sub		(hl)
 827+ E730              ;;/	ld		(l2fraction),a				; faction = dy - 1/2 dx
 828+ E730              ;;/.BranchAwhile							; while (l2_vx0 != l2_vx1)
 829+ E730              ;;/	ld		a,c
 830+ E730              ;;/	cp		e
 831+ E730              ;;/	ret		z							; if x0 = x1 then done
 832+ E730              ;;/.BranchAtestfraction:					; if (l2_fraction >= 0)
 833+ E730              ;;/	ld		a,(l2fraction)
 834+ E730              ;;/	TEST	$80
 835+ E730              ;;/	jr		nz,.BranchAskipYstep
 836+ E730              ;;/	inc		b							; 		++l2_vy0;
 837+ E730              ;;/	ld		hl,l2deltaXsq
 838+ E730              ;;/	sub		(hl)						; 		l2_fraction -= l2_dx;
 839+ E730              ;;/	ld		(l2fraction),a
 840+ E730              ;;/.BranchAskipYstep:
 841+ E730              ;;/.l2stepx1:
 842+ E730              ;;/	inc		b							; this is self modifying code point 1 l2_vx0 += l2_stepx
 843+ E730              ;;/	ld		a,(l2fraction)				; l2_fraction += l2_dy can optimise later as a already has this?
 844+ E730              ;;/	ld		hl,l2deltaYsq
 845+ E730              ;;/	add		a,(hl)
 846+ E730              ;;/	ld		(l2fraction),a
 847+ E730              ;;/.BranchAplotBCColA:						; l2_plot_pixel(l2_vx0,l2_vy0,color);
 848+ E730              ;;/	pushbcde
 849+ E730              ;;/	ld a,(l2linecolor)
 850+ E730              ;;/	call	l2_plot_pixel
 851+ E730              ;;/	popdebc
 852+ E730              ;;/.BranchAloop:
 853+ E730              ;;/	jr		.BranchAwhile
 854+ E730              ;;/.dxLTEdybranch:
 855+ E730              ;;/	ld		a,(l2deltaXsq)				; l2_fraction = l2_dx - (l2_dy >> 1);
 856+ E730              ;;/	ld		hl, l2deltaY
 857+ E730              ;;/	sub		(hl)
 858+ E730              ;;/	ld		(l2fraction),a				; faction = dy - 1/2 d
 859+ E730              ;;/.BranchBwhile:							; while (l2_vy0 != l2_vy1)
 860+ E730              ;;/	ld		a,b
 861+ E730              ;;/	cp		d
 862+ E730              ;;/	ret		z							; if x0 = x1 then done
 863+ E730              ;;/.BranchBtestfraction:					; if (l2_fraction >= 0)
 864+ E730              ;;/	ld		a,(l2fraction)
 865+ E730              ;;/	TEST	$80
 866+ E730              ;;/	jr		nz,.BranchBskipYstep
 867+ E730              ;;/.l2stepx2
 868+ E730              ;;/	inc		b							; l2_vx0 += l2_stepx; this is self modifying code point 2
 869+ E730              ;;/	ld		a,(l2fraction)				; l2_fraction -= l2_dy
 870+ E730              ;;/	ld		hl,l2deltaYsq
 871+ E730              ;;/	sub		(hl)
 872+ E730              ;;/	ld		(l2fraction),a
 873+ E730              ;;/.BranchBskipYstep:
 874+ E730              ;;/	ld		hl, l2deltaYsq
 875+ E730              ;;/	add		a,(hl)
 876+ E730              ;;/	ld		(l2fraction),a
 877+ E730              ;;/	inc		b							; ++l2_vy0;
 878+ E730              ;;/.BranchBplotBCColA:
 879+ E730              ;;/	pushbcde
 880+ E730              ;;/	ld a,(l2linecolor)
 881+ E730              ;;/	call	l2_plot_pixel
 882+ E730              ;;/	popdebc
 883+ E730              ;;/.BranchBloop:
 884+ E730              ;;/	jr		.BranchBwhile
 885+ E730
# file closed: ./Layer2Graphics/layer2_plot_diagonal.asm
 786  E730                  INCLUDE "./Layer2Graphics/asm_l2_plot_triangle.asm"
# file opened: ./Layer2Graphics/asm_l2_plot_triangle.asm
   1+ E730
   2+ E730
   3+ E730
   4+ E730 00 00        l2trianglebc	        DW 0
   5+ E732 00 00        l2trianglede	        DW 0
   6+ E734 00 00        l2trianglehl	        DW 0
   7+ E736
   8+ E736              ; "l2_draw_triangle, BC = y1x1, DE=y2x2, HL=y3x3 a = Color"
   9+ E736 C5 D5 E5 F5  l2_draw_triangle:       push	bc,,de,,hl,,af
  10+ E73A CD 5E E6                             call	l2_draw_diagonal		; BC to DE
  11+ E73D F1                                   pop		af
  12+ E73E D1                                   pop		de						; swap DE and HL
  13+ E73F E1                                   pop		hl						; so BC to DE is really to HL
  14+ E740 C1                                   pop		bc
  15+ E741 D5 E5                                push    de,,hl                    ; which is pushing original hl then original de
  16+ E743 F5                                   push	af
  17+ E744 CD 5E E6                             call	l2_draw_diagonal		; BC to HL (leaving DE and HL swapped)
  18+ E747 F1                                   pop		af
  19+ E748 C1                                   pop		bc						; Now bc = original de
  20+ E749 D1                                   pop		de						; de = original hl
  21+ E74A CD 5E E6                             call	l2_draw_diagonal		; BC to HL (leaving DE and HL swapped)
  22+ E74D C9                                   ret
  23+ E74E
  24+ E74E
  25+ E74E
  26+ E74E
  27+ E74E
# file closed: ./Layer2Graphics/asm_l2_plot_triangle.asm
 787  E74E                  INCLUDE "./Layer2Graphics/asm_l2_fill_triangle.asm"
# file opened: ./Layer2Graphics/asm_l2_fill_triangle.asm
   1+ E74E              ; ">l2_fillBottomFlatTriangle BC y0x0 DE x1x2, H YCommon, L Colour"
   2+ E74E              ; "note >l2_draw_diagonal_save, bc = y0,x0 de=y1,x1,a=array nbr ESOURCE LL30 or LION"
   3+ E74E              ; "note line to   bc = left side row,col, d right pixel, e = color"
   4+ E74E DD 01        l2_fillBottomFlatTriangle:break
   5+ E750 7D                                   ld		a,l
   6+ E751 32 77 E3                             ld		(l2linecolor),a
   7+ E754 79                                   ld		a,c
   8+ E755 BB                                   cp		e
   9+ E756 30 08                                jr		nc, .x2gtex1
  10+ E758 DD 26 01     .x1ltx2:                ld		ixh,1                           ; list 1 holds x0 down to x1
  11+ E75B DD 2E 02                             ld		ixl,2                           ; list 2 hols  x0 down to x2
  12+ E75E 18 06                                jr		.storepoints
  13+ E760 DD 26 02     .x2gtex1:               ld		ixh,2
  14+ E763 DD 2E 01                             ld		ixl,1
  15+ E766 C5 D5 E5     .storepoints:           push	bc,,de,,hl
  16+ E769 DD 7C                                ld		a,ixh
  17+ E76B 5A                                   ld		e,d                             ; we alreay have bc so its now bc -> hd
  18+ E76C 54                                   ld		d,h
  19+ E76D CD 7F E5                             call	l2_draw_diagonal_save			;l2_store_diagonal(x0,y0,x1,ycommon,l2_LineMinX);
  20+ E770 E1 D1 C1                             pop		bc,,de,,hl
  21+ E773 C5 E5                                push	bc,,hl
  22+ E775 54                                   ld		d,h                             ; now its bc -> he
  23+ E776 DD 7D                                ld		a,ixl
  24+ E778 CD 7F E5                             call	l2_draw_diagonal_save			;l2_store_diagonal(x0,y0,x2,ycommon,l2_LineMaxX);
  25+ E77B E1 C1                                pop		bc,,hl
  26+ E77D 50           .SaveForLoop:           ld		d,b
  27+ E77E 5C                                   ld		e,h								; save loop counters
  28+ E77F D5                                   push	de								; de = y0ycommon
  29+ E780 21 7F E3     .GetFirstHorizontalRow:	ld		hl,l2targetArray1               ; get first row for loop
  30+ E783 78                                   ld		a,b
  31+ E784 ED 31                                add		hl,a							; hl = l2targetArray1 row b
  32+ E786 7E                                   ld		a,(hl)							;
  33+ E787 4F                                   ld		c,a								; c = col1 i.e. l2targetarray1[b]
  34+ E788 21 7F E4                             ld      hl,l2targetArray2
  35+ E78B 78                                   ld      a,b
  36+ E78C ED 31                                add     hl,a
  37+ E78E              ;                        inc		h								; hl = l2targetArray2 row b if we interleave
  38+ E78E 7E                                   ld		a,(hl)
  39+ E78F 57                                   ld		d,a								; d = col2 i.e. l2targetarray2[b]
  40+ E790 3A 77 E3     .SetColour:             ld		a,(l2linecolor)
  41+ E793 5F                                   ld		e,a								; de = to colour
  42+ E794 C5           .SavePoints:            push	bc								; bc = rowcol
  43+ E795 25                                   dec		h
  44+ E796 E5                                   push	hl								; hl = l2targetArray1[b]
  45+ E797 CD E1 E2     .DoLine:	            call	l2_draw_horz_line_to
  46+ E79A E1                                   pop		hl
  47+ E79B C1                                   pop		bc
  48+ E79C 04                                   inc		b								; down a rowc
  49+ E79D D1                                   pop		de								; de = from to (and b also = current)
  50+ E79E 14                                   inc		d
  51+ E79F 7B                                   ld		a,e								; while e >= d
  52+ E7A0 BA                                   cp		d
  53+ E7A1 30 DA                                jr 		nc,.SaveForLoop					; Is this the right point??
  54+ E7A3 C9                                   ret
  55+ E7A4
# file closed: ./Layer2Graphics/asm_l2_fill_triangle.asm
 788  E7A4                  INCLUDE "./Layer2Graphics/layer2_plot_circle.asm"
# file opened: ./Layer2Graphics/layer2_plot_circle.asm
   1+ E7A4
   2+ E7A4 00 00        l2_circle_pos		DW 0
   3+ E7A6 00           l2_circle_colour	DB 0
   4+ E7A7 00           l2_circle_radius	DB 0
   5+ E7A8 00           l2_circle_x			DB 0
   6+ E7A9 00           l2_circle_y			DB 0
   7+ E7AA 00           l2_circle_d			DB 0
   8+ E7AB
   9+ E7AB              ; ">l2_draw_circle BC = center row col, d = radius, e = colour"
  10+ E7AB 7B           l2_draw_circle:     ld		a,e
  11+ E7AC 32 52 E8                         ld		(.PlotPixel+1),a
  12+ E7AF 7A                               ld		a,d								; get radius
  13+ E7B0 A7                               and		a
  14+ E7B1 C8                               ret		z
  15+ E7B2 FE 01                            cp		1
  16+ E7B4 CA 5D E8                         jp		z,CircleSinglepixel
  17+ E7B7 ED 43 E1 E7                      ld		(.Plot1+1),bc					; save origin into DE reg in code
  18+ E7BB DD 67                            ld		ixh,a							; ixh = raidus
  19+ E7BD DD 2E 00                         ld		ixl,0
  20+ E7C0 26 00        .calcd:	            ld		h,0
  21+ E7C2 6F                               ld		l,a
  22+ E7C3 29                               add		hl,hl							; hl = r * 2
  23+ E7C4 EB                               ex		de,hl							; de = r * 2
  24+ E7C5 21 03 00                         ld		hl,3
  25+ E7C8 A7                               and		a
  26+ E7C9 ED 52                            sbc		hl,de							; hl = 3 - (r * 2)
  27+ E7CB 44                               ld		b,h
  28+ E7CC 4D                               ld		c,l								; bc = 3 - (r * 2)
  29+ E7CD 21 01 00     .calcdelta:         ld		hl,1
  30+ E7D0 16 00                            ld		d,0
  31+ E7D2 DD 5D                            ld		e,ixl
  32+ E7D4 A7                               and		a
  33+ E7D5 ED 52                            sbc		hl,de
  34+ E7D7 11 01 00     .Setde1:            ld		de,1
  35+ E7DA DD 7C        .CircleLoop:        ld		a,ixh
  36+ E7DC DD BD                            cp		ixl
  37+ E7DE D8                               ret		c
  38+ E7DF D9           .ProcessLoop:	    exx
  39+ E7E0 11 00 00     .Plot1:             ld		de,0
  40+ E7E3 7B                               ld		a,e
  41+ E7E4 DD 85                            add		a,ixl
  42+ E7E6 4F                               ld		c,a
  43+ E7E7 7A                               ld		a,d
  44+ E7E8 DD 84                            add		a,ixh
  45+ E7EA 47                               ld		b,a
  46+ E7EB CD 51 E8                         call	.PlotPixel			;CX+X,CY+Y
  47+ E7EE 7B           .Plot2:             ld 		a,e
  48+ E7EF DD 95                            sub 	ixl
  49+ E7F1 4F                               ld 		c,a
  50+ E7F2 7A                               ld 		a,d
  51+ E7F3 DD 84                            add 	a,ixh
  52+ E7F5 47                               ld		b,a
  53+ E7F6 CD 51 E8                         call	.PlotPixel			;CX-X,CY+Y
  54+ E7F9 7B           .Plot3:             ld 		a,e
  55+ E7FA DD 85                            add		a,ixl
  56+ E7FC 4F                               ld 		c,a
  57+ E7FD 7A                               ld 		a,d
  58+ E7FE DD 94                            sub 	ixh
  59+ E800 47                               ld 		b,a
  60+ E801 CD 51 E8                         call	.PlotPixel			;CX+X,CY-Y
  61+ E804 7B           .Plot4:             ld 		a,e
  62+ E805 DD 95                            sub 	ixl
  63+ E807 4F                               ld 		c,a
  64+ E808 7A                               ld 		a,d
  65+ E809 DD 94                            sub 	ixh
  66+ E80B 47                               ld 		b,a
  67+ E80C CD 51 E8                         call	.PlotPixel			;CX-X,CY-Y
  68+ E80F 7A           .Plot5:	            ld 		a,d
  69+ E810 DD 85                            add 	a,ixl
  70+ E812 47                               ld 		b,a
  71+ E813 7B                               ld 		a,e
  72+ E814 DD 84                            add 	a,ixh
  73+ E816 4F                               ld 		c,a
  74+ E817 CD 51 E8                         call	.PlotPixel			;CY+X,CX+Y
  75+ E81A 7A           .Plot6:	            ld 		a,d
  76+ E81B DD 95                            sub 	ixl
  77+ E81D 47                               ld 		b,a
  78+ E81E 7B                               ld 		a,e
  79+ E81F DD 84                            add 	a,ixh
  80+ E821 4F                               ld 		c,a
  81+ E822 CD 51 E8                         call	.PlotPixel			;CY-X,CX+Y
  82+ E825 7A           .Plot7:	            ld 		a,d
  83+ E826 DD 85                            add 	a,ixl
  84+ E828 47                               ld 		b,a
  85+ E829 7B                               ld 		a,e
  86+ E82A DD 94                            sub 	ixh
  87+ E82C 4F                               ld 		c,a
  88+ E82D CD 51 E8                         call	.PlotPixel			;CY+X,CX-Y
  89+ E830 7A           .Plot8:	            ld 		a,d
  90+ E831 DD 95                            sub 	ixl
  91+ E833 47                               ld		b,a
  92+ E834 7B                               ld 		a,e
  93+ E835 DD 94                            sub 	ixh
  94+ E837 4F                               ld 		c,a
  95+ E838 CD 51 E8                         call	.PlotPixel			;CY-X,CX-Y
  96+ E83B D9                               exx
  97+ E83C CB 7C        .IncrementCircle:	bit     7,h				; Check for Hl<=0
  98+ E83E 28 03                            jr z,   .draw_circle_1
  99+ E840 19                               add hl,de			; Delta=Delta+D1
 100+ E841 18 05                            jr      .draw_circle_2		;
 101+ E843 09           .draw_circle_1:		add     hl,bc			; Delta=Delta+D2
 102+ E844 03                               inc     bc
 103+ E845 03                               inc     bc				; D2=D2+2
 104+ E846 DD 25                            dec     ixh				; Y=Y-1
 105+ E848 03           .draw_circle_2:		inc bc				; D2=D2+2
 106+ E849 03                               inc bc
 107+ E84A 13                               inc de				; D1=D1+2
 108+ E84B 13                               inc de
 109+ E84C DD 2C                            inc ixl				; X=X+1
 110+ E84E C3 DA E7                         jp      .CircleLoop
 111+ E851 3E 00        .PlotPixel:         ld		a,0                  ; This was originally indirect, where as it neeed to be value
 112+ E853 D5 C5 E5                         push	de,,bc,,hl
 113+ E856 CD 6E E1                         call 	l2_plot_pixel_y_test
 114+ E859 E1 C1 D1                         pop		de,,bc,,hl
 115+ E85C C9                               ret
 116+ E85D 7B           CircleSinglepixel:  ld		a,e
 117+ E85E CD 6E E1                         call	l2_plot_pixel_y_test
 118+ E861 C9                               ret
 119+ E862
 120+ E862              ; ">l2_draw_clipped_circle HL = Center X 2's c, DE = Center Y 2's c = center , c = radius, b = colour"
 121+ E862 43           l2_draw_clipped_circle:     ld		b,e                     ; save Colour
 122+ E863 32 DB E9                         ld		(.PlotPixel+1),a
 123+ E866 79                               ld		a,c								; get radius
 124+ E867                                  ReturnIfAIsZero
 124+ E867 A7          >                        and     a
 124+ E868 C8          >                        ret     z
 125+ E869                                  JumpIfAEqNusng  1, .circleSinglepixel
 125+ E869 FE 01       >                        cp     1
 125+ E86B CA E8 E9    >                        jp      z,.circleSinglepixel
 126+ E86E ED 53 9B E8                      ld		(.Plot1Y+1),de					; save origin into DE and HL
 127+ E872 22 9E E8                         ld      (.Plot1X+1),hl                  ; .
 128+ E875 DD 67                            ld		ixh,a							; ixh = raidus
 129+ E877 DD 2E 00                         ld		ixl,0						    ; ixl = 0
 130+ E87A 26 00        .calcd:	            ld		h,0                             ; hl = radius
 131+ E87C 6F                               ld		l,a                             ; .
 132+ E87D 29                               add		hl,hl							; hl = r * 2
 133+ E87E EB                               ex		de,hl							; de = r * 2
 134+ E87F 21 03 00                         ld		hl,3                            ; hl = 3 - (r * 2)
 135+ E882 A7                               and		a                               ; .
 136+ E883 ED 52                            sbc		hl,de							; .
 137+ E885 44                               ld		b,h                             ; bc = 3 - (r * 2)
 138+ E886 4D                               ld		c,l								; .
 139+ E887 21 01 00     .calcdelta:         ld		hl,1                            ; hl = 1
 140+ E88A 16 00                            ld		d,0                             ; de = ixl
 141+ E88C DD 5D                            ld		e,ixl                           ;
 142+ E88E A7                               and		a                               ;
 143+ E88F ED 52                            sbc		hl,de                           ; hl = 1 - radius
 144+ E891 11 01 00     .Setde1:            ld		de,1                            ; de = 1
 145+ E894              .CircleLoop:        ReturnIfRegLTNusng ixh, ixl             ; if radius > ixl counter
 145+ E894 DD 7C       >                        ld      a,ixh
 145+ E896 DD BD       >                        cp      ixl
 145+ E898 D8          >                        ret	    c
 146+ E899 D9           .ProcessLoop:	    exx                                     ; save all bc,de,hl registers
 147+ E89A 11 00 00     .Plot1Y:            ld		de,0                            ; this is Y coord
 148+ E89D 21 00 00     .Plot1X:            ld      hl,0                            ; this is x coord
 149+ E8A0 E5 D5 C5                         push    hl,,de,,bc                      ; save bc +3
 150+ E8A3 06 00                            ld      b,0
 151+ E8A5 DD 4D                            ld      c,ixl
 152+ E8A7                                  ClearCarryFlag
 152+ E8A7 B7          >                        or a
 153+ E8A8 ED 4A                            adc     hl,bc
 154+ E8AA C1                               pop     bc                              ; can optimise, perhaps use iy instead of bc or just optimise push pop and jump to an overall .Plot1Done and minimise push pops + 2
 155+ E8AB                                  JumpIfRegIsNotZero  h,.Plot1Done        ; if h <> 0 then hl < 0 or hl > 255
 155+ E8AB 7C          >                        ld      a,h
 155+ E8AC A7          >                        and     a
 155+ E8AD C2 C2 E8    >                        jp	    nz,.Plot1Done
 156+ E8B0 EB                               ex      de,hl                           ; now de = x coord calculated
 157+ E8B1 C5                               push    bc                              ; + 3
 158+ E8B2                                  ClearCarryFlag
 158+ E8B2 B7          >                        or a
 159+ E8B3 06 00                            ld      b,0
 160+ E8B5 DD 4D                            ld      c,ixl
 161+ E8B7 ED 4A                            adc     hl,bc
 162+ E8B9 C1                               pop     bc                              ; + 2
 163+ E8BA                                  JumpIfRegIsNotZero  h,.Plot1Done        ; if h <> 0 then hl < 0 or hl > 255
 163+ E8BA 7C          >                        ld      a,h
 163+ E8BB A7          >                        and     a
 163+ E8BC C2 C2 E8    >                        jp	    nz,.Plot1Done
 164+ E8BF CD DA E9                         call	.PlotPixel	            		;CX+X,CY+Y using DE = x and hl = y *** Note if we order plot 1 to 8 we can selectivley jump past many on elimiation check
 165+ E8C2 D1 E1        .Plot1Done:         pop     hl,,de                          ; get de (y) and hl (x) back but reversed as the next plot expected the to be reversed from the ex de,hl above  + 0
 166+ E8C4 E5 D5 C5     .Plot2:             push    hl,,de,,bc                      ; e.g  do all CX + X first, so plot1, plot3 and just one check for cx + x off screen
 167+ E8C7 06 00                            ld      b,0                             ;                              plot2, plot8 for cx - x
 168+ E8C9 DD 4D                            ld      c,ixl                           ;                              plot4, plot5 for cy + x  ** Need to check the comments on each plot are correct
 169+ E8CB                                  ClearCarryFlag                          ;                              plot6        for cy - x
 169+ E8CB B7          >                        or a
 170+ E8CC ED 42                            sbc     hl,bc                           ;                              plot7 is last one
 171+ E8CE C1                               pop     bc                              ;
 172+ E8CF                                  JumpIfRegIsNotZero  h,.Plot2Done        ;
 172+ E8CF 7C          >                        ld      a,h
 172+ E8D0 A7          >                        and     a
 172+ E8D1 C2 E6 E8    >                        jp	    nz,.Plot2Done
 173+ E8D4 EB                               ex      de,hl
 174+ E8D5 C5                               push    bc
 175+ E8D6 06 00                            ld      b,0
 176+ E8D8 DD 4D                            ld      c,ixl
 177+ E8DA                                  ClearCarryFlag
 177+ E8DA B7          >                        or a
 178+ E8DB ED 4A                            adc     hl,bc
 179+ E8DD C1                               pop     bc
 180+ E8DE                                  JumpIfRegIsNotZero  h,.Plot2Done
 180+ E8DE 7C          >                        ld      a,h
 180+ E8DF A7          >                        and     a
 180+ E8E0 C2 E6 E8    >                        jp	    nz,.Plot2Done
 181+ E8E3 CD DA E9                         call	.PlotPixel	                    ; CX-X,CY+Y
 182+ E8E6 E1 D1        .Plot2Done:         pop     de,,hl
 183+ E8E8 E5 D5 C5     .Plot3:             push    hl,,de,,bc
 184+ E8EB 06 00                            ld      b,0
 185+ E8ED DD 4D                            ld      c,ixl
 186+ E8EF                                  ClearCarryFlag
 186+ E8EF B7          >                        or a
 187+ E8F0 ED 4A                            adc     hl,bc
 188+ E8F2 C1                               pop     bc
 189+ E8F3                                  JumpIfRegIsNotZero  h,.Plot3Done
 189+ E8F3 7C          >                        ld      a,h
 189+ E8F4 A7          >                        and     a
 189+ E8F5 C2 0A E9    >                        jp	    nz,.Plot3Done
 190+ E8F8 EB                               ex      de,hl
 191+ E8F9 C5                               push    bc
 192+ E8FA 06 00                            ld      b,0
 193+ E8FC DD 4D                            ld      c,ixl
 194+ E8FE                                  ClearCarryFlag
 194+ E8FE B7          >                        or a
 195+ E8FF ED 42                            sbc     hl,bc
 196+ E901 C1                               pop     bc
 197+ E902                                  JumpIfRegIsNotZero  h,.Plot3Done
 197+ E902 7C          >                        ld      a,h
 197+ E903 A7          >                        and     a
 197+ E904 C2 0A E9    >                        jp	    nz,.Plot3Done
 198+ E907 CD DA E9                         call	.PlotPixel	                    ; CX+X,CY-Y
 199+ E90A E1 D1        .Plot3Done:         pop     de,,hl
 200+ E90C E5 D5 C5     .Plot4:             push    hl,,de,,bc
 201+ E90F 06 00                            ld      b,0
 202+ E911 DD 4D                            ld      c,ixl
 203+ E913                                  ClearCarryFlag
 203+ E913 B7          >                        or a
 204+ E914 ED 42                            sbc     hl,bc
 205+ E916 C1                               pop     bc
 206+ E917                                  JumpIfRegIsNotZero  h,.Plot4Done
 206+ E917 7C          >                        ld      a,h
 206+ E918 A7          >                        and     a
 206+ E919 C2 2E E9    >                        jp	    nz,.Plot4Done
 207+ E91C EB                               ex      de,hl
 208+ E91D C5                               push    bc
 209+ E91E 06 00                            ld      b,0
 210+ E920 DD 4D                            ld      c,ixl
 211+ E922                                  ClearCarryFlag
 211+ E922 B7          >                        or a
 212+ E923 ED 42                            sbc     hl,bc
 213+ E925 C1                               pop     bc
 214+ E926                                  JumpIfRegIsNotZero  h,.Plot4Done
 214+ E926 7C          >                        ld      a,h
 214+ E927 A7          >                        and     a
 214+ E928 C2 2E E9    >                        jp	    nz,.Plot4Done
 215+ E92B CD DA E9                         call	.PlotPixel	                    ; CX-X,CY-Y
 216+ E92E E1 D1        .Plot4Done:         pop     de,,hl
 217+ E930 EB           .Plot5:             ex      de,hl
 218+ E931 E5 D5 C5                         push    hl,,de,,bc
 219+ E934 06 00                            ld      b,0
 220+ E936 DD 4D                            ld      c,ixl
 221+ E938                                  ClearCarryFlag
 221+ E938 B7          >                        or a
 222+ E939 ED 4A                            adc     hl,bc
 223+ E93B C1                               pop     bc
 224+ E93C                                  JumpIfRegIsNotZero  h,.Plot5Done
 224+ E93C 7C          >                        ld      a,h
 224+ E93D A7          >                        and     a
 224+ E93E C2 53 E9    >                        jp	    nz,.Plot5Done
 225+ E941 EB                               ex      de,hl
 226+ E942 C5                               push    bc
 227+ E943 06 00                            ld      b,0
 228+ E945 DD 4D                            ld      c,ixl
 229+ E947                                  ClearCarryFlag
 229+ E947 B7          >                        or a
 230+ E948 ED 4A                            adc     hl,bc
 231+ E94A C1                               pop     bc
 232+ E94B                                  JumpIfRegIsNotZero  h,.Plot5Done
 232+ E94B 7C          >                        ld      a,h
 232+ E94C A7          >                        and     a
 232+ E94D C2 53 E9    >                        jp	    nz,.Plot5Done
 233+ E950 CD DA E9                         call	.PlotPixel	                    ;CY+X,CX+Y
 234+ E953 E1 D1        .Plot5Done:         pop     de,,hl
 235+ E955 EB           .Plot6:             ex      de,hl
 236+ E956 E5 D5 C5                         push    hl,,de,,bc
 237+ E959 06 00                            ld      b,0
 238+ E95B DD 4D                            ld      c,ixl
 239+ E95D                                  ClearCarryFlag
 239+ E95D B7          >                        or a
 240+ E95E ED 42                            sbc     hl,bc
 241+ E960 C1                               pop     bc
 242+ E961                                  JumpIfRegIsNotZero  h,.Plot6Done
 242+ E961 7C          >                        ld      a,h
 242+ E962 A7          >                        and     a
 242+ E963 C2 78 E9    >                        jp	    nz,.Plot6Done
 243+ E966 EB                               ex      de,hl
 244+ E967 C5                               push    bc
 245+ E968 06 00                            ld      b,0
 246+ E96A DD 4D                            ld      c,ixl
 247+ E96C                                  ClearCarryFlag
 247+ E96C B7          >                        or a
 248+ E96D ED 4A                            adc     hl,bc
 249+ E96F C1                               pop     bc
 250+ E970                                  JumpIfRegIsNotZero  h,.Plot6Done
 250+ E970 7C          >                        ld      a,h
 250+ E971 A7          >                        and     a
 250+ E972 C2 78 E9    >                        jp	    nz,.Plot6Done
 251+ E975 CD DA E9                         call	.PlotPixel	                    ; CY-X,CX+Y
 252+ E978 E1 D1        .Plot6Done:         pop     de,,hl
 253+ E97A EB           .Plot7:             ex      de,hl
 254+ E97B E5 D5 C5                         push    hl,,de,,bc
 255+ E97E 06 00                            ld      b,0
 256+ E980 DD 4D                            ld      c,ixl
 257+ E982                                  ClearCarryFlag
 257+ E982 B7          >                        or a
 258+ E983 ED 4A                            adc     hl,bc
 259+ E985 C1                               pop     bc
 260+ E986                                  JumpIfRegIsNotZero  h,.Plot7Done
 260+ E986 7C          >                        ld      a,h
 260+ E987 A7          >                        and     a
 260+ E988 C2 9D E9    >                        jp	    nz,.Plot7Done
 261+ E98B EB                               ex      de,hl
 262+ E98C C5                               push    bc
 263+ E98D 06 00                            ld      b,0
 264+ E98F DD 4D                            ld      c,ixl
 265+ E991                                  ClearCarryFlag
 265+ E991 B7          >                        or a
 266+ E992 ED 42                            sbc     hl,bc
 267+ E994 C1                               pop     bc
 268+ E995                                  JumpIfRegIsNotZero  h,.Plot7Done
 268+ E995 7C          >                        ld      a,h
 268+ E996 A7          >                        and     a
 268+ E997 C2 9D E9    >                        jp	    nz,.Plot7Done
 269+ E99A CD DA E9                         call	.PlotPixel	                    ; CY+X,CX-Y
 270+ E99D E1 D1        .Plot7Done:         pop     de,,hl
 271+ E99F EB           .Plot8:             ex      de,hl
 272+ E9A0 E5 D5 C5                         push    hl,,de,,bc
 273+ E9A3 06 00                            ld      b,0
 274+ E9A5 DD 4D                            ld      c,ixl
 275+ E9A7                                  ClearCarryFlag
 275+ E9A7 B7          >                        or a
 276+ E9A8 ED 42                            sbc     hl,bc
 277+ E9AA C1                               pop     bc
 278+ E9AB                                  JumpIfRegIsNotZero  h,.Plot8Done
 278+ E9AB 7C          >                        ld      a,h
 278+ E9AC A7          >                        and     a
 278+ E9AD C2 C2 E9    >                        jp	    nz,.Plot8Done
 279+ E9B0 EB                               ex      de,hl
 280+ E9B1 C5                               push    bc
 281+ E9B2 06 00                            ld      b,0
 282+ E9B4 DD 4D                            ld      c,ixl
 283+ E9B6                                  ClearCarryFlag
 283+ E9B6 B7          >                        or a
 284+ E9B7 ED 42                            sbc     hl,bc
 285+ E9B9 C1                               pop     bc
 286+ E9BA                                  JumpIfRegIsNotZero  h,.Plot8Done
 286+ E9BA 7C          >                        ld      a,h
 286+ E9BB A7          >                        and     a
 286+ E9BC C2 C2 E9    >                        jp	    nz,.Plot8Done
 287+ E9BF CD DA E9                         call	.PlotPixel	                    ; CY-X,CX-Y
 288+ E9C2 E1 D1        .Plot8Done:         pop     de,,hl
 289+ E9C4 D9           .PlotDone:          exx
 290+ E9C5 CB 7C        .IncrementCircle:	bit     7,h				; Check for Hl<=0
 291+ E9C7 28 03                            jr z,   .draw_circle_1
 292+ E9C9 19                               add hl,de			; Delta=Delta+D1
 293+ E9CA 18 05                            jr      .draw_circle_2		;
 294+ E9CC 09           .draw_circle_1:		add     hl,bc			; Delta=Delta+D2
 295+ E9CD 03                               inc     bc
 296+ E9CE 03                               inc     bc				; D2=D2+2
 297+ E9CF DD 25                            dec     ixh				; Y=Y-1
 298+ E9D1 03           .draw_circle_2:		inc     bc				; D2=D2+2
 299+ E9D2 03                               inc     bc
 300+ E9D3 13                               inc     de				; D1=D1+2
 301+ E9D4 13                               inc     de
 302+ E9D5 DD 2C                            inc     ixl				; X=X+1
 303+ E9D7 C3 94 E8                         jp      .CircleLoop
 304+ E9DA 3E 00        .PlotPixel:         ld		a,0                  ; This was originally indirect, where as it neeed to be value
 305+ E9DC D5 C5 E5                         push	de,,bc,,hl
 306+ E9DF 45                               ld      b,l                     ; At this point de = x and hl = y
 307+ E9E0 4B                               ld      c,e
 308+ E9E1 CD 6E E1                         call 	l2_plot_pixel_y_test
 309+ E9E4 E1 C1 D1                         pop		de,,bc,,hl
 310+ E9E7 C9                               ret
 311+ E9E8 7B           .circleSinglepixel:  ld		a,e
 312+ E9E9 CD 6E E1                         call	l2_plot_pixel_y_test
 313+ E9EC C9                               ret
# file closed: ./Layer2Graphics/layer2_plot_circle.asm
 789  E9ED                  INCLUDE "./Layer2Graphics/layer2_plot_circle_fill.asm"
# file opened: ./Layer2Graphics/layer2_plot_circle_fill.asm
   1+ E9ED
   2+ E9ED 00           l2_circle_dblx		DB 0
   3+ E9EE 00           l2_circle_dbly		DB 0
   4+ E9EF
   5+ E9EF              ; ">l2_draw_circle_fill BC = center row col, d = radius, e = colour"
   6+ E9EF              ; Note this code currently does not process BC
   7+ E9EF 7B           l2_draw_circle_fill:    ld		a,e
   8+ E9F0 32 86 EA                             ld		(.LineColour+1),a
   9+ E9F3 7A                                   ld		a,d								; get radius
  10+ E9F4 A7                                   and		a
  11+ E9F5 C8                                   ret		z
  12+ E9F6 FE 01                                cp		1
  13+ E9F8 CA 5D E8                             jp		z,CircleSinglepixel
  14+ E9FB ED 43 25 EA                          ld		(.Line1+1),bc					; save origin into DE reg in code
  15+ E9FF DD 67                                ld		ixh,a							; ixh = raidus (x)
  16+ EA01 DD 2E 00                             ld		ixl,0							; ihy = y
  17+ EA04 26 00        .calcd:	                ld		h,0
  18+ EA06 6F                                   ld		l,a
  19+ EA07 29                                   add		hl,hl							; hl = r * 2
  20+ EA08 EB                                   ex		de,hl							; de = r * 2
  21+ EA09 21 03 00                             ld		hl,3
  22+ EA0C A7                                   and		a
  23+ EA0D ED 52                                sbc		hl,de							; hl = 3 - (r * 2)
  24+ EA0F 44                                   ld		b,h
  25+ EA10 4D                                   ld		c,l								; bc = 3 - (r * 2)
  26+ EA11 21 01 00     .calcdelta              ld		hl,1
  27+ EA14 16 00                                ld		d,0
  28+ EA16 DD 5D                                ld		e,ixl
  29+ EA18 A7                                   and		a
  30+ EA19 ED 52                                sbc		hl,de
  31+ EA1B 11 01 00     .Setde1	                ld		de,1
  32+ EA1E DD 7C        .CircleLoop:            ld		a,ixh
  33+ EA20 DD BD                                cp		ixl
  34+ EA22 D8                                   ret		c
  35+ EA23 D9           .ProcessLoop:	        exx
  36+ EA24 11 00 00     .Line1:                 ld		de,0
  37+ EA27 7B                                   ld 		a,e
  38+ EA28 DD 95                                sub 	ixl
  39+ EA2A 4F                                   ld 		c,a
  40+ EA2B 7A                                   ld 		a,d
  41+ EA2C DD 84                                add 	a,ixh
  42+ EA2E 47                                   ld		b,a
  43+ EA2F                                      ;; TODO ADD DOUBLE X CALC
  44+ EA2F D5                                   push	de
  45+ EA30 DD 55                                ld		d,ixl
  46+ EA32 CB 22                                sla		d
  47+ EA34 CD 81 EA                             call	.PlotLine			;CX-X,CY+Y
  48+ EA37 D1                                   pop		de
  49+ EA38 7B           .Line2:                 ld 		a,e
  50+ EA39 DD 95                                sub		ixl
  51+ EA3B 4F                                   ld 		c,a
  52+ EA3C 7A                                   ld 		a,d
  53+ EA3D DD 94                                sub 	ixh
  54+ EA3F 47                                   ld 		b,a
  55+ EA40                                      ;; TODO ADD DOUBLE X CALC
  56+ EA40 D5                                   push	de
  57+ EA41 DD 55                                ld		d,ixl
  58+ EA43 CB 22                                sla		d
  59+ EA45 CD 81 EA                             call	.PlotLine			;CX-X,CY-Y
  60+ EA48 D1                                   pop		de
  61+ EA49 7B           .Line3:	                ld 		a,e
  62+ EA4A DD 94                                sub		ixh
  63+ EA4C 4F                                   ld 		c,a
  64+ EA4D 7A                                   ld 		a,d
  65+ EA4E DD 85                                add 	a,ixl
  66+ EA50 47                                   ld 		b,a
  67+ EA51                                      ;; TODO ADD DOUBLE Y CALC
  68+ EA51 D5                                   push	de
  69+ EA52 DD 54                                ld		d,ixh
  70+ EA54 CB 22                                sla		d
  71+ EA56 CD 81 EA                             call	.PlotLine			;CX-Y,CY+x
  72+ EA59 D1                                   pop		de
  73+ EA5A 7B           .Line4:	                ld 		a,e
  74+ EA5B DD 94                                sub		ixh
  75+ EA5D 4F                                   ld 		c,a
  76+ EA5E 7A                                   ld 		a,d
  77+ EA5F DD 95                                sub 	ixl
  78+ EA61 47                                   ld 		b,a
  79+ EA62                                      ;; TODO ADD DOUBLE Y CALC
  80+ EA62 D5                                   push	de
  81+ EA63 DD 54                                ld		d,ixh
  82+ EA65 CB 22                                sla		d
  83+ EA67 CD 81 EA                             call	.PlotLine			;CX-Y,CY+x
  84+ EA6A D1                                   pop		de
  85+ EA6B D9                                   exx
  86+ EA6C CB 7C        .IncrementCircle:	    bit 7,h				; Check for Hl<=0
  87+ EA6E 28 03                                jr z,.draw_circle_1
  88+ EA70 19                                   add hl,de			; Delta=Delta+D1
  89+ EA71 18 05                                jr .draw_circle_2		;
  90+ EA73 09           .draw_circle_1:		    add hl,bc			; Delta=Delta+D2
  91+ EA74 03                                   inc bc
  92+ EA75 03                                   inc bc				; D2=D2+2
  93+ EA76 DD 25                                dec ixh				; Y=Y-1
  94+ EA78 03           .draw_circle_2:		    inc bc				; D2=D2+2
  95+ EA79 03                                   inc bc
  96+ EA7A 13                                   inc de				; D1=D1+2
  97+ EA7B 13                                   inc de
  98+ EA7C DD 2C                                inc ixl				; X=X+1
  99+ EA7E C3 1E EA                             jp .CircleLoop
 100+ EA81 D5 C5 E5 F5  .PlotLine:              push	de,,bc,,hl,,af
 101+ EA85 3E 00        .LineColour:	        ld		a,0         ; circle colur
 102+ EA87 5F                                   ld      e,a
 103+ EA88 CD B5 E2                             call 	l2_draw_horz_line
 104+ EA8B F1 E1 C1 D1                          pop     de,,bc,,hl,,af
 105+ EA8F C9                                   ret
 106+ EA90
# file closed: ./Layer2Graphics/layer2_plot_circle_fill.asm
 790  EA90                  INCLUDE "./Layer2Graphics/l2_draw_any_line.asm"
# file opened: ./Layer2Graphics/l2_draw_any_line.asm
   1+ EA90              ; ">l2_draw_any_line, bc = y0,x0 de=y1,x1,a=color: determines if its horizontal, vertical or diagonal then hands off the work"
   2+ EA90 08           l2_draw_any_line:       ex		af,af'              ; save colour into a'
   3+ EA91 79                                   ld		a,c                 ; if x and e are the same its horizontal
   4+ EA92 BB                                   cp		e
   5+ EA93 28 08                                jr		z,.HorizontalLineCheck
   6+ EA95 78                                   ld		a,b                 ; if b and d are the same its vertica;
   7+ EA96 BA                                   cp		d
   8+ EA97 28 0E                                jr		z,.VerticalLine
   9+ EA99              ; use jp and get a free ret instruction optimisation
  10+ EA99 08           .DiagonalLine:		    ex		af,af'			     ; get colour back into a
  11+ EA9A C3 5E E6                             jp		l2_draw_diagonal
  12+ EA9D
  13+ EA9D 78           .HorizontalLineCheck:   ld      a,b
  14+ EA9E BA                                   cp      d
  15+ EA9F 28 0B                                jr      z, .SinglePixel
  16+ EAA1 08           .HorizontalLine:        ex		af,af'              ; get colour back into a
  17+ EAA2 53                                   ld		d,e				    ; set d as target right pixel
  18+ EAA3 5F                                   ld		e,a				    ; e holds colour on this call
  19+ EAA4 C3 E1 E2                             jp		l2_draw_horz_line_to
  20+ EAA7 08           .VerticalLine:          ex		af,af'
  21+ EAA8 5F                                   ld		e,a				    ; e holds colour on this call
  22+ EAA9 C3 60 E3                             jp		l2_draw_vert_line_to
  23+ EAAC 08           .SinglePixel:           ex		af,af'              ; get colour back into a
  24+ EAAD C3 37 E1                             jp      l2_plot_pixel
  25+ EAB0              ;......................................................
  26+ EAB0
# file closed: ./Layer2Graphics/l2_draw_any_line.asm
 791  EAB0                  INCLUDE "./Layer2Graphics/clearLines-LL155.asm"
# file opened: ./Layer2Graphics/clearLines-LL155.asm
   1+ EAB0              ; ClearLines (LL155)
   2+ EAB0              ;   y = 0
   3+ EAB0              ; 	XX20 = UbnkEdgeHeapSize
   4+ EAB0              ;   exit if XX20 < 4
   5+ EAB0              ;   ++y
   6+ EAB0              ;   do
   7+ EAB0              ;		X1 = XX19(Y) ;	Y1 = XX19(++Y) ;	X2 = XX19(++Y);	Y2 = XX19(++Y)
   8+ EAB0              ;   	call DrawLine (x1,y1 to x2,y2) two's compliment (we will do 0)
   9+ EAB0              ;		++y
  10+ EAB0              ;	until Y > XX20
  11+ EAB0
  12+ EAB0              clearLines:
  13+ EAB0              layer2_clearLines:
  14+ EAB0 3A 0A C3     LL155cl:                ld		a,(UbnkLineArrayLen)
  15+ EAB3 47                                   ld		b,a
  16+ EAB4 21 18 C2                             ld		hl,UbnkLineArray
  17+ EAB7 C5           clearLinesLoop:         push	bc
  18+ EAB8 7E                                   ld		a,(hl)
  19+ EAB9 23                                   inc		hl
  20+ EABA 4F                                   ld		c,a
  21+ EABB 7E                                   ld		a,(hl)
  22+ EABC 23                                   inc		hl
  23+ EABD 47                                   ld		b,a
  24+ EABE 7E                                   ld		a,(hl)
  25+ EABF 23                                   inc		hl
  26+ EAC0 5F                                   ld		e,a
  27+ EAC1 7E                                   ld		a,(hl)
  28+ EAC2 23                                   inc		hl
  29+ EAC3 57                                   ld		d,a
  30+ EAC4 3E E3                                ld		a,COLOUR_TRANSPARENT		; we erase here
  31+ EAC6 E5                                   push	hl
  32+ EAC7 CD 90 EA                             call    l2_draw_any_line
  33+ EACA E1                                   pop		hl
  34+ EACB C1                                   pop		bc
  35+ EACC 10 E9                                djnz	clearLinesLoop
  36+ EACE C9                                   ret
  37+ EACF
# file closed: ./Layer2Graphics/clearLines-LL155.asm
 792  EACF                  INCLUDE "./Layer2Graphics/l2_draw_line_v2.asm"
# file opened: ./Layer2Graphics/l2_draw_line_v2.asm
   1+ EACF              ; ******************************************************************************
   2+ EACF              ;
   3+ EACF              ;	Draw a pixel line from (x0,y0) defined in (COORDS) - the current plot
   4+ EACF              ;	coordinate, to the relative distance points (x0+x,y0+y).
   5+ EACF              ;
   6+ EACF              ;	Design & programming by Gunther Strube,	Copyright (C) InterLogic 1995
   7+ EACF              ;
   8+ EACF              ;	The (COORDS+0)	pointer contains the current y coordinate, (COORDS+1) the
   9+ EACF              ;	current x coordinate. The main program should reset the (COORDS) variables
  10+ EACF              ;	before using line drawing.
  11+ EACF              ;
  12+ EACF              ;	The routine checks the range of specified coordinates which is the
  13+ EACF              ;	boundaries of the graphics area (256x64	pixels).
  14+ EACF              ;	If a boundary error occurs the routine exits automatically.	This may be
  15+ EACF              ;	useful if you are trying to draw a line longer than allowed. Only the
  16+ EACF              ;	visible part will be drawn.
  17+ EACF              ;
  18+ EACF              ;	The hardware graphics memory is organized as (0,0) in the top left corner.
  19+ EACF              ;
  20+ EACF              ;	The plot routine is	defined by an address pointer	in IX.
  21+ EACF              ;
  22+ EACF              ;	IN:	HL =	move	relative x horisontal points (maximum +/- 255).
  23+ EACF              ;		DE =	move	relative y vertical	points (maximum +/-	255).
  24+ EACF              ;		IX =	pointer to plot routine that uses HL = (x,y)	of plot coordinate.
  25+ EACF              ;
  26+ EACF              ;	OUT:	None.
  27+ EACF              ;
  28+ EACF              ;	Registers	used	by routine:
  29+ EACF              ;		   N	:	B, loop counter
  30+ EACF              ;		   i	:	line	balance variable
  31+ EACF              ;		   x	:	H/L,	horisontal, vertical distance	variables
  32+ EACF              ;		   y	:	H/L,	horisontal, vertical distance	variables
  33+ EACF              ;	  (x0,y0)	:	(h,l)
  34+ EACF              ;	  direc_x	:	d, horisontal step increment
  35+ EACF              ;	  direc_y	:	e, vertical step increment
  36+ EACF              ;		 ddx	:	b, horisontal step increment
  37+ EACF              ;		 ddy	:	c, vertical step increment
  38+ EACF              ;
  39+ EACF              ;		DE, A work registers.
  40+ EACF              ;
  41+ EACF              ; The algorithm in pseudo-code:
  42+ EACF              ;
  43+ EACF              ;	direc_x =	SGN x: direc_y	= SGN y
  44+ EACF              ;	x = ABS x: y =	ABS y
  45+ EACF              ;
  46+ EACF              ;	if x	>= y
  47+ EACF              ;		if x+y=0 then return
  48+ EACF              ;		H = x
  49+ EACF              ;		L = y
  50+ EACF              ;		ddx = direc_x
  51+ EACF              ;		ddy = 0
  52+ EACF              ;	else
  53+ EACF              ;		H = y
  54+ EACF              ;		L = x
  55+ EACF              ;		ddx = 0
  56+ EACF              ;		ddy = direc_y
  57+ EACF              ;	endif
  58+ EACF              ;
  59+ EACF              ;	B = H
  60+ EACF              ;	i = INT(B/2)
  61+ EACF              ;	FOR N=B TO 1 STEP -1
  62+ EACF              ;		i = i + L
  63+ EACF              ;		if i	< H
  64+ EACF              ;			ix =	ddx
  65+ EACF              ;			iy =	ddy
  66+ EACF              ;		else
  67+ EACF              ;			i = i - H
  68+ EACF              ;			ix =	direc_x
  69+ EACF              ;			iy =	direc_y
  70+ EACF              ;		endif
  71+ EACF              ;		x0 =	x0 +	ix
  72+ EACF              ;		y0 =	y0 +	iy
  73+ EACF              ;		plot	(x0,y0)
  74+ EACF              ;	NEXT	N
  75+ EACF              ;
  76+ EACF              ;
  77+ EACF              ;	Registers	changed after return:
  78+ EACF              ;		..BCDEHL/IXIY/af......	same
  79+ EACF              ;		AF....../..../..bcdehl	different
  80+ EACF              ;
  81+ EACF DF           line_gfx_colour db $DF
  82+ EAD0 00 00        line_gfx_coords	dw 0
  83+ EAD2              LineHLtoDE:
  84+ EAD2 7C           TestMaxY:               ld	a,h ; were h = y or l = y?
  85+ EAD3 FE C0                                cp	192
  86+ EAD5 30 26                                jr	nc, exit_line		; y0	coordinate out	of range
  87+ EAD7 7A                                   ld	a,d
  88+ EAD8 FE C0                                cp	192
  89+ EADA 30 21                                jr	nc, exit_line		; y1	coordinate out	of range
  90+ EADC 22 D0 EA                             ld	(line_gfx_coords),hl		; the starting	point is now default
  91+ EADF E5                                   push	hl
  92+ EAE0 D5                                   push	de
  93+ EAE1 6C                                   ld	l,h				; L = x0
  94+ EAE2 62                                   ld	h,d				; H = x1
  95+ EAE3 7C           distanceX:		        ld	a,h
  96+ EAE4 95                                   sub	l
  97+ EAE5 6F                                   ld	l,a
  98+ EAE6 26 00                                ld	h,0
  99+ EAE8 30 02                                jr	nc, distanceXDone
 100+ EAEA 26 FF                                ld	h,-1
 101+ EAEC D1           distanceXDone:          pop	de
 102+ EAED E3                                   ex	(sp),hl			; L = y0
 103+ EAEE 63                                   ld	h,e				; H = y1
 104+ EAEF 7C           distanceY:		        ld	a,h
 105+ EAF0 95                                   sub	l
 106+ EAF1 6F                                   ld	l,a
 107+ EAF2 26 00                                ld	h,0
 108+ EAF4 30 02                                jr	nc, distanceYDone
 109+ EAF6 26 FF                                ld	h,-1
 110+ EAF8 D1           distanceYDone:          pop	de
 111+ EAF9 EB                                   ex	de,hl			; h.dist.	= HL, v.dist. = DE
 112+ EAFA CD FE EA                             call	DrawLineRelative			; draw line...
 113+ EAFD C9           exit_line:              ret
 114+ EAFE
 115+ EAFE              ; ***************************************************************************
 116+ EAFE              ;
 117+ EAFE              ;	IN:	HL =	move	relative x horisontal points (maximum +/- 255).
 118+ EAFE              ;		DE =	move	relative y vertical	points (maximum +/-	255).
 119+ EAFE              ;
 120+ EAFE              ; OUT: h - l distance in	HL
 121+ EAFE              ;
 122+ EAFE
 123+ EAFE D5           DrawLineRelative:       push	de
 124+ EAFF E5                                   push	hl
 125+ EB00 D9                                   exx
 126+ EB01 E1                                   pop	hl					; get relative	horisontal movement
 127+ EB02 CD 6D EB                             call	sgn
 128+ EB05 57                                   ld	d,a					; direc_x	= SGN(x) installed d = +/-1 for horizontal update
 129+ EB06 CD 7A EB                             call	absValue
 130+ EB09 45                                   ld	b,l					; x = ABS(x)
 131+ EB0A E1           DrawLineGetVertRelative:pop	hl					; get relative	vertical movement
 132+ EB0B CD 6D EB                             call	sgn
 133+ EB0E 5F                                   ld	e,a					; direc_y	= SGN(y) installed  = +/-1 for vertical update
 134+ EB0F CD 7A EB                             call	absValue
 135+ EB12 4D                                   ld	c,l					; y = ABS(y) so now bc = dxdy
 136+ EB13              ; so by here BC = dx dy HL in increment/decrement x y
 137+ EB13 C5                                   push	bc
 138+ EB14 D9                                   exx
 139+ EB15 E1                                   pop	hl					; H = absolute	x dist., L = absolute y distance
 140+ EB16 7C                                   ld	a,h
 141+ EB17 BD                                   cp	l
 142+ EB18 38 0A                                jr	c, x_smaller_y		; if	x >=	y
 143+ EB1A B4           areXandYZero:           or	h					;	if x+y = 0
 144+ EB1B 28 4F                                jr	z, exit_draw		;		return
 145+ EB1D D9           y_lessorequal_x:        exx						;	else
 146+ EB1E 42                                   ld	b,d					;		ddx = direc_x
 147+ EB1F 0E 00                                ld	c,0					;		ddy = 0
 148+ EB21 D9                                   exx
 149+ EB22 18 08                                jr	init_drawloop		; else
 150+ EB24 7C           x_smaller_y:	        ld	a,h
 151+ EB25 65                                   ld	h,l					;	H = y
 152+ EB26 6F                                   ld	l,a					;	L = x
 153+ EB27 D9                                   exx
 154+ EB28 06 00                                ld	b,0					;	ddx = 0
 155+ EB2A 4B                                   ld	c,e					;	ddy = direc_y
 156+ EB2B D9                                   exx
 157+ EB2C 44           init_drawloop:	        ld	b,h
 158+ EB2D 4C                                   ld	c,h					; B = H
 159+ EB2E CB 39                                srl	c					; i = INT(B/2)
 160+ EB30              										; FOR N=B	TO 1	STEP	-1
 161+ EB30 79           drawloop:		        ld	a,c
 162+ EB31 85                                   add	a,l
 163+ EB32 38 09                                jr	c, i_greater		;	i + L > 255  (i > H)
 164+ EB34 BC                                   cp	h
 165+ EB35 30 06                                jr	nc, i_greater		;	if i	< H
 166+ EB37 4F                                   ld	c,a					;		i = i + L
 167+ EB38 D9                                   exx
 168+ EB39 C5                                   push	bc				;		ix =	ddx:	iy =	ddy
 169+ EB3A D9                                   exx
 170+ EB3B 18 05                                jr	check_plot			;	else
 171+ EB3D 94           i_greater:		        sub	h					;		i = i - H
 172+ EB3E 4F                                   ld	c,a
 173+ EB3F D9                                   exx
 174+ EB40 D5                                   push	de				;		ix =	direc_x: iy = direc_y
 175+ EB41 D9                                   exx						;	endif
 176+ EB42 E3           check_plot:		        ex	(sp),hl				;	preserve H,L distances on stack
 177+ EB43 EB                                   ex	de,hl				;	D,E = ix,	iy
 178+ EB44 2A D0 EA                             ld	hl,(line_gfx_coords)
 179+ EB47 7D                                   ld	a,l
 180+ EB48 83                                   add	a,e					;
 181+ EB49 6F                                   ld	l,a					;	y0 =	y0 +	iy (y0 is	checked by plot)
 182+ EB4A 7A                                   ld	a,d
 183+ EB4B 3C                                   inc	a
 184+ EB4C 84                                   add	a,h
 185+ EB4D 38 04                                jr	c, check_range		;	check out	of range
 186+ EB4F 28 1A                                jr	z, range_error		;	Fz=1	& Fc=0 denotes	x0 <	0
 187+ EB51 18 02                                jr	plot_point
 188+ EB53 20 16        check_range:            jr	nz, range_error	;	Fz=0	& Fc=1 denotes	x0 >	255
 189+ EB55
 190+ EB55 3D           plot_point:             dec	a
 191+ EB56 C5                                   push	bc
 192+ EB57 F5                                   push	af
 193+ EB58 47                                   ld	    b,a					;	x0 =	x0 +	ix
 194+ EB59 4D                                   ld		c,l
 195+ EB5A 3A CF EA                             ld		a,(line_gfx_colour)
 196+ EB5D ED 43 D0 EA                          ld      (line_gfx_coords),bc
 197+ EB61 CD 37 E1                             call	l2_plot_pixel
 197+ EB64
 198+ EB64 F1                                   pop		af
 199+ EB65 C1                                   pop		bc
 200+ EB66 E1           plot_RET:		        pop	hl					;	restore H,L distances...
 201+ EB67 10 C7                                djnz	drawloop		; NEXT N
 202+ EB69 18 01                                jr	exit_draw
 203+ EB6B
 204+ EB6B E1           range_error:	        pop	hl					; remove H,L distances...
 205+ EB6C C9           exit_draw:		        ret
 206+ EB6D
 207+ EB6D
 208+ EB6D              ; ******************************************************************************
 209+ EB6D              ;
 210+ EB6D              ;	SGN (Signum value) of 16	bit signed integer.
 211+ EB6D              ;
 212+ EB6D              ;	IN:		HL =	integer
 213+ EB6D              ;	OUT:		A = result: 0,1,-1 (if zero, positive, negative)
 214+ EB6D              ;
 215+ EB6D              ;	Registers	changed after return:
 216+ EB6D              ;	..BCDEHL/IXIY	same
 217+ EB6D              ;	AF....../....	different
 218+ EB6D              ;
 219+ EB6D 7C           sgn:				    ld	a,h
 220+ EB6E B5                                   or	l
 221+ EB6F C8                                   ret	z				; integer	is zero, return 0...
 222+ EB70 CB 7C                                bit	7,h
 223+ EB72 20 03                                jr	nz, negative_int
 224+ EB74 3E 01                                ld	a,1
 225+ EB76 C9                                   ret
 226+ EB77 3E FF        negative_int:		    ld	a,-1
 227+ EB79 C9                                   ret
 228+ EB7A
 229+ EB7A
 230+ EB7A              ; ******************************************************************************
 231+ EB7A              ;
 232+ EB7A              ;	ABS (Absolute value) of 16 bit signed integer.
 233+ EB7A              ;
 234+ EB7A              ;	IN:		HL =	integer
 235+ EB7A              ;	OUT:		HL =	converted	integer
 236+ EB7A              ;
 237+ EB7A              ;	Registers	changed after return:
 238+ EB7A              ;	A.BCDE../IXIY	same
 239+ EB7A              ;	.F....HL/....	different
 240+ EB7A              ;
 241+ EB7A CB 7C        absValue:			    bit	7,h
 242+ EB7C C8                                   ret	z				; integer	is positive...
 243+ EB7D D5                                   push	de
 244+ EB7E EB                                   ex	de,hl
 245+ EB7F 21 00 00                             ld	hl,0
 246+ EB82 BF                                   cp	a				; Fc	= 0,	may not be used...
 247+ EB83 ED 52                                sbc	hl,de			; convert	negative integer
 248+ EB85 D1                                   pop	de
 249+ EB86 C9                                   ret
 250+ EB87
# file closed: ./Layer2Graphics/l2_draw_line_v2.asm
 793  EB87              ; Bank 56  ------------------------------------------------------------------------------------------------------------------------
 794  EB87                  SLOT    CommanderAddr
 795  EB87                  PAGE    BankCommander
 796  EB87                  ORG     CommanderAddr, BankCommander
 797  E000                  INCLUDE "./Commander/commanderData.asm"
# file opened: ./Commander/commanderData.asm
   1+ E000 43 4F 4D 4D  commanderPage           DB  "COMMANDERPAGE 56"
   1+ E004 41 4E 44 45
   1+ E008 52 50 41 47
   1+ E00C 45 20 35 36
   2+ E010 4A 41 4D 45  defaultName		        DB	"JAMESON",0
   2+ E014 53 4F 4E 00
   3+ E018 10 0F 11 00  defaultStock	        DB $10, $0F, $11, $00, $03, $1C,$0E, $00, $00, $0A, $00, $11,$3A, $07, $09, $08, $00
   3+ E01C 03 1C 0E 00
   3+ E020 00 0A 00 11
   3+ E024 3A 07 09 08
   3+ E028 00
   4+ E029 4A 5A 48 02  defaultSeeds	        DB $4a, $5a, $48, $02, $53, $b7
   4+ E02D 53 B7
   5+ E02F 14           defaultHomeX	        DB $14
   6+ E030 AD           defaultHomeY	        DB $AD
   7+ E031 44 65 66 61  defaultSaveName         DB "Default.SAV",0,0,0,0
   7+ E035 75 6C 74 2E
   7+ E039 53 41 56 00
   7+ E03D 00 00 00
   8+ E040
   9+ E040              ; Gun and cabin temps are not saved as can only be saved in dock
  10+ E040              ; Note Can only save whilst docked
  11+ E040 43 4F 4D 4D  SaveCommanderHeader     DB  "COMMANDERSAVE..."
  11+ E044 41 4E 44 45
  11+ E048 52 53 41 56
  11+ E04C 45 2E 2E 2E
  12+ E050 00 00 00...  SaveFilename            DS  15
  13+ E05F 00 00 00...  SaveCommanderName       DS  15
  14+ E06E 00 00 00...  SaveSeeds               DS  06
  15+ E074 00 00 00...  SaveStockAvaliabiliy    DS  17
  16+ E085 00 00 00...  SaveCargo               DS  16
  17+ E095 00 00 00...  SaveEquipmentFitted     DS  EQ_ITEM_COUNT
  18+ E0AF 00 00 00 00  SaveLaserType           DS  4
  19+ E0B3 00 00 00 00  SaveLaserDamagedFlag    DS  4
  20+ E0B7 00           SavePresentSystemX      DS  1
  21+ E0B8 00           SavePresentSystemY      DS  1
  22+ E0B9 00           SaveTargetSystemX       DS  1
  23+ E0BA 00           SaveTargetSystemY       DS  1
  24+ E0BB 00 00 00 00  SaveCash                DS  4
  25+ E0BF 00           SaveFuel                DS  1
  26+ E0C0 00           SaveFugitiveInnocentStatus DS 1
  27+ E0C1 00 00        SaveKillTally           DS  2
  28+ E0C3 00           SaveOuterHyperCount     DS  1
  29+ E0C4 00           SaveInnerHyperCount     DS  1
  30+ E0C5 00           SaveForeShield          DS  1
  31+ E0C6 00           SaveAftShield           DS  1
  32+ E0C7 00           SavePlayerEnergy        DS  1
  33+ E0C8 00           SaveCargoBaySize        DS  1
  34+ E0C9 00           SaveFuelScoopStatus     DS  1
  35+ E0CA              SaveSize                equ $ - SaveCommanderHeader
  36+ E0CA
  37+ E0CA              copyCommanderToSave:    ldCopyStringLen CommanderName,      SaveCommanderName, 15
  37+ E0CA 21 E0 A0    >                        ld      hl,CommanderName
  37+ E0CD 11 5F E0    >                        ld      de, SaveCommanderName
  37+ E0D0 01 0F 00    >                        ld      bc, 15
  37+ E0D3 ED B0       >                        ldir
  38+ E0D5                                      ldCopyStringLen GalaxySeeds,        SaveSeeds, 6
  38+ E0D5 21 E1 9E    >                        ld      hl,GalaxySeeds
  38+ E0D8 11 6E E0    >                        ld      de, SaveSeeds
  38+ E0DB 01 06 00    >                        ld      bc, 6
  38+ E0DE ED B0       >                        ldir
  39+ E0E0                                      ldCopyStringLen StockAvaliabiliy,   SaveStockAvaliabiliy, 16
  39+ E0E0 21 4C 9E    >                        ld      hl,StockAvaliabiliy
  39+ E0E3 11 74 E0    >                        ld      de, SaveStockAvaliabiliy
  39+ E0E6 01 10 00    >                        ld      bc, 16
  39+ E0E9 ED B0       >                        ldir
  40+ E0EB                                      ldCopyStringLen CargoTonnes,        SaveCargo, 16
  40+ E0EB 21 48 A3    >                        ld      hl,CargoTonnes
  40+ E0EE 11 85 E0    >                        ld      de, SaveCargo
  40+ E0F1 01 10 00    >                        ld      bc, 16
  40+ E0F4 ED B0       >                        ldir
  41+ E0F6                                      ldCopyStringLen EquipmentFitted,    SaveEquipmentFitted, EQ_ITEM_COUNT
  41+ E0F6 21 60 A3    >                        ld      hl,EquipmentFitted
  41+ E0F9 11 95 E0    >                        ld      de, SaveEquipmentFitted
  41+ E0FC 01 1A 00    >                        ld      bc, EQ_ITEM_COUNT
  41+ E0FF ED B0       >                        ldir
  42+ E101                                      ldCopyStringLen LaserType,          SaveLaserType, 4
  42+ E101 21 58 A3    >                        ld      hl,LaserType
  42+ E104 11 AF E0    >                        ld      de, SaveLaserType
  42+ E107 01 04 00    >                        ld      bc, 4
  42+ E10A ED B0       >                        ldir
  43+ E10C                                      ldCopyStringLen LaserDamagedFlag,   SaveLaserDamagedFlag, 4
  43+ E10C 21 5C A3    >                        ld      hl,LaserDamagedFlag
  43+ E10F 11 B3 E0    >                        ld      de, SaveLaserDamagedFlag
  43+ E112 01 04 00    >                        ld      bc, 4
  43+ E115 ED B0       >                        ldir
  44+ E117                                      ldCopy2Byte     PresentSystemX,     SavePresentSystemX
  44+ E117 2A E7 9E    >                        ld       hl,(PresentSystemX)
  44+ E11A 22 B7 E0    >                        ld       (SavePresentSystemX),hl
  45+ E11D                                      ldCopy2Byte     TargetSystemX,      SaveTargetSystemX
  45+ E11D 2A E9 9E    >                        ld       hl,(TargetSystemX)
  45+ E120 22 B9 E0    >                        ld       (SaveTargetSystemX),hl
  46+ E123                                      ldCopyStringLen Cash,               SaveCash, 6
  46+ E123 21 41 A3    >                        ld      hl,Cash
  46+ E126 11 BB E0    >                        ld      de, SaveCash
  46+ E129 01 06 00    >                        ld      bc, 6
  46+ E12C ED B0       >                        ldir
  47+ E12E                                      ldCopyByte      Fuel,               SaveFuel
  47+ E12E 3A 45 A3    >                        ld       a,(Fuel)
  47+ E131 32 BF E0    >                        ld       (SaveFuel),a
  48+ E134                                      ldCopyByte      FugitiveInnocentStatus,  SaveFugitiveInnocentStatus
  48+ E134 3A 4B 9E    >                        ld       a,(FugitiveInnocentStatus)
  48+ E137 32 C0 E0    >                        ld       (SaveFugitiveInnocentStatus),a
  49+ E13A                                      ldCopy2Byte     KillTally           ,SaveKillTally
  49+ E13A 2A 5E 9E    >                        ld       hl,(KillTally)
  49+ E13D 22 C1 E0    >                        ld       (SaveKillTally),hl
  50+ E140                                      ldCopyByte      OuterHyperCount     ,SaveOuterHyperCount
  50+ E140 3A A6 9E    >                        ld       a,(OuterHyperCount)
  50+ E143 32 C3 E0    >                        ld       (SaveOuterHyperCount),a
  51+ E146                                      ldCopyByte      InnerHyperCount     ,SaveInnerHyperCount
  51+ E146 3A A5 9E    >                        ld       a,(InnerHyperCount)
  51+ E149 32 C4 E0    >                        ld       (SaveInnerHyperCount),a
  52+ E14C                                      ldCopyByte      ForeShield          ,SaveForeShield
  52+ E14C 3A DA A0    >                        ld       a,(ForeShield)
  52+ E14F 32 C5 E0    >                        ld       (SaveForeShield),a
  53+ E152                                      ldCopyByte      AftShield           ,SaveAftShield
  53+ E152 3A DB A0    >                        ld       a,(AftShield)
  53+ E155 32 C6 E0    >                        ld       (SaveAftShield),a
  54+ E158                                      ldCopyByte      PlayerEnergy        ,SavePlayerEnergy
  54+ E158 3A DC A0    >                        ld       a,(PlayerEnergy)
  54+ E15B 32 C7 E0    >                        ld       (SavePlayerEnergy),a
  55+ E15E                                      ldCopyByte      CargoBaySize        ,SaveCargoBaySize
  55+ E15E 3A 46 A3    >                        ld       a,(CargoBaySize)
  55+ E161 32 C8 E0    >                        ld       (SaveCargoBaySize),a
  56+ E164                                      ldCopyByte      FuelScoopsBarrelStatus     ,SaveFuelScoopStatus
  56+ E164 3A 7A A3    >                        ld       a,(FuelScoopsBarrelStatus)
  56+ E167 32 C9 E0    >                        ld       (SaveFuelScoopStatus),a
  57+ E16A C9                                   ret
  58+ E16B
  59+ E16B              copyCommanderFromSave:  ldCopyStringLen SaveCommanderName,      CommanderName, 15
  59+ E16B 21 5F E0    >                        ld      hl,SaveCommanderName
  59+ E16E 11 E0 A0    >                        ld      de, CommanderName
  59+ E171 01 0F 00    >                        ld      bc, 15
  59+ E174 ED B0       >                        ldir
  60+ E176                                      ldCopyStringLen SaveSeeds,              GalaxySeeds, 6
  60+ E176 21 6E E0    >                        ld      hl,SaveSeeds
  60+ E179 11 E1 9E    >                        ld      de, GalaxySeeds
  60+ E17C 01 06 00    >                        ld      bc, 6
  60+ E17F ED B0       >                        ldir
  61+ E181                                      ldCopyStringLen SaveStockAvaliabiliy,   StockAvaliabiliy, 16
  61+ E181 21 74 E0    >                        ld      hl,SaveStockAvaliabiliy
  61+ E184 11 4C 9E    >                        ld      de, StockAvaliabiliy
  61+ E187 01 10 00    >                        ld      bc, 16
  61+ E18A ED B0       >                        ldir
  62+ E18C                                      ldCopyStringLen SaveCargo,              CargoTonnes, 16
  62+ E18C 21 85 E0    >                        ld      hl,SaveCargo
  62+ E18F 11 48 A3    >                        ld      de, CargoTonnes
  62+ E192 01 10 00    >                        ld      bc, 16
  62+ E195 ED B0       >                        ldir
  63+ E197                                      ldCopyStringLen SaveEquipmentFitted,    EquipmentFitted, EQ_ITEM_COUNT
  63+ E197 21 95 E0    >                        ld      hl,SaveEquipmentFitted
  63+ E19A 11 60 A3    >                        ld      de, EquipmentFitted
  63+ E19D 01 1A 00    >                        ld      bc, EQ_ITEM_COUNT
  63+ E1A0 ED B0       >                        ldir
  64+ E1A2                                      ldCopyStringLen SaveLaserType,          LaserType, 4
  64+ E1A2 21 AF E0    >                        ld      hl,SaveLaserType
  64+ E1A5 11 58 A3    >                        ld      de, LaserType
  64+ E1A8 01 04 00    >                        ld      bc, 4
  64+ E1AB ED B0       >                        ldir
  65+ E1AD                                      ldCopyStringLen SaveLaserDamagedFlag,    LaserDamagedFlag, 4
  65+ E1AD 21 B3 E0    >                        ld      hl,SaveLaserDamagedFlag
  65+ E1B0 11 5C A3    >                        ld      de, LaserDamagedFlag
  65+ E1B3 01 04 00    >                        ld      bc, 4
  65+ E1B6 ED B0       >                        ldir
  66+ E1B8                                      ldCopy2Byte     SavePresentSystemX,     PresentSystemX
  66+ E1B8 2A B7 E0    >                        ld       hl,(SavePresentSystemX)
  66+ E1BB 22 E7 9E    >                        ld       (PresentSystemX),hl
  67+ E1BE                                      ldCopy2Byte     SaveTargetSystemX,      TargetSystemX
  67+ E1BE 2A B9 E0    >                        ld       hl,(SaveTargetSystemX)
  67+ E1C1 22 E9 9E    >                        ld       (TargetSystemX),hl
  68+ E1C4 21 A5 9D                             ld		hl,IndexedWork              ; not sure yet why thisis done here
  69+ E1C7 CD CF A3                             call	        copy_galaxy_to_system
  70+ E1CA CD 8F A4                             call	        find_present_system
  71+ E1CD CD F2 A3                             call	        copy_working_to_galaxy
  72+ E1D0                                      ldCopyStringLen SaveCash,               Cash, 6
  72+ E1D0 21 BB E0    >                        ld      hl,SaveCash
  72+ E1D3 11 41 A3    >                        ld      de, Cash
  72+ E1D6 01 06 00    >                        ld      bc, 6
  72+ E1D9 ED B0       >                        ldir
  73+ E1DB                                      ldCopyByte      SaveFuel,               Fuel
  73+ E1DB 3A BF E0    >                        ld       a,(SaveFuel)
  73+ E1DE 32 45 A3    >                        ld       (Fuel),a
  74+ E1E1                                      ldCopyByte      SaveFugitiveInnocentStatus,  FugitiveInnocentStatus
  74+ E1E1 3A C0 E0    >                        ld       a,(SaveFugitiveInnocentStatus)
  74+ E1E4 32 4B 9E    >                        ld       (FugitiveInnocentStatus),a
  75+ E1E7                                      ldCopy2Byte     SaveKillTally           ,KillTally
  75+ E1E7 2A C1 E0    >                        ld       hl,(SaveKillTally)
  75+ E1EA 22 5E 9E    >                        ld       (KillTally),hl
  76+ E1ED                                      ldCopyByte      SaveOuterHyperCount     ,OuterHyperCount
  76+ E1ED 3A C3 E0    >                        ld       a,(SaveOuterHyperCount)
  76+ E1F0 32 A6 9E    >                        ld       (OuterHyperCount),a
  77+ E1F3                                      ldCopyByte      SaveInnerHyperCount     ,InnerHyperCount
  77+ E1F3 3A C4 E0    >                        ld       a,(SaveInnerHyperCount)
  77+ E1F6 32 A5 9E    >                        ld       (InnerHyperCount),a
  78+ E1F9                                      ldCopyByte      SaveForeShield          ,ForeShield
  78+ E1F9 3A C5 E0    >                        ld       a,(SaveForeShield)
  78+ E1FC 32 DA A0    >                        ld       (ForeShield),a
  79+ E1FF                                      ldCopyByte      SaveAftShield           ,AftShield
  79+ E1FF 3A C6 E0    >                        ld       a,(SaveAftShield)
  79+ E202 32 DB A0    >                        ld       (AftShield),a
  80+ E205                                      ldCopyByte      SavePlayerEnergy        ,PlayerEnergy
  80+ E205 3A C7 E0    >                        ld       a,(SavePlayerEnergy)
  80+ E208 32 DC A0    >                        ld       (PlayerEnergy),a
  81+ E20B                                      ldCopyByte      SaveCargoBaySize        ,CargoBaySize
  81+ E20B 3A C8 E0    >                        ld       a,(SaveCargoBaySize)
  81+ E20E 32 46 A3    >                        ld       (CargoBaySize),a
  82+ E211                                      ldCopyByte      SaveFuelScoopStatus     ,FuelScoopsBarrelStatus
  82+ E211 3A C9 E0    >                        ld       a,(SaveFuelScoopStatus)
  82+ E214 32 7A A3    >                        ld       (FuelScoopsBarrelStatus),a
  83+ E217 C9                                   ret
  84+ E218
  85+ E218 CD CA E0     saveCommander:          call    copyCommanderToSave
  86+ E21B                                      ldCopyStringLen defaultSaveName, SaveFilename, 15
  86+ E21B 21 31 E0    >                        ld      hl,defaultSaveName
  86+ E21E 11 50 E0    >                        ld      de, SaveFilename
  86+ E221 01 0F 00    >                        ld      bc, 15
  86+ E224 ED B0       >                        ldir
  87+ E226 21 31 E0                             ld      hl, defaultSaveName             ; default debug name
  88+ E229 DD 21 40 E0                          ld      ix, SaveCommanderHeader
  89+ E22D 01 8A 00                             ld      bc, SaveSize
  90+ E230 CD 30 BD                             call    FileSave
  91+ E233 C9                                   ret
  92+ E234
  93+ E234 21 31 E0     loadCommander:          ld      hl, defaultSaveName             ; default debug name
  94+ E237 DD 21 40 E0                          ld      ix, SaveCommanderHeader
  95+ E23B 01 8A 00                             ld      bc, SaveSize
  96+ E23E CD FF BC                             call    FileLoad
  97+ E241 CD 6B E1                             call    copyCommanderFromSave
  98+ E244 C9                                   ret
  99+ E245
 100+ E245               ; For now hard laod, later correctlt sequence gneeral vars and dma fill with 0 for a start
 101+ E245              defaultCommander:       ldCopyStringLen defaultName, CommanderName, 8
 101+ E245 21 10 E0    >                        ld      hl,defaultName
 101+ E248 11 E0 A0    >                        ld      de, CommanderName
 101+ E24B 01 08 00    >                        ld      bc, 8
 101+ E24E ED B0       >                        ldir
 102+ E250                                      ldCopyStringLen defaultSeeds, GalaxySeeds, 6
 102+ E250 21 29 E0    >                        ld      hl,defaultSeeds
 102+ E253 11 E1 9E    >                        ld      de, GalaxySeeds
 102+ E256 01 06 00    >                        ld      bc, 6
 102+ E259 ED B0       >                        ldir
 103+ E25B                                      ldCopy2Byte defaultHomeX, PresentSystemX
 103+ E25B 2A 2F E0    >                        ld       hl,(defaultHomeX)
 103+ E25E 22 E7 9E    >                        ld       (PresentSystemX),hl
 104+ E261                                      ldCopy2Byte defaultHomeX, TargetSystemX
 104+ E261 2A 2F E0    >                        ld       hl,(defaultHomeX)
 104+ E264 22 E9 9E    >                        ld       (TargetSystemX),hl
 105+ E267 21 A5 9D                             ld		hl,IndexedWork              ; not sure yet why thisis done here
 106+ E26A CD CF A3                             call	copy_galaxy_to_system
 107+ E26D CD 8F A4                             call	find_present_system
 108+ E270 CD F2 A3                             call	copy_working_to_galaxy
 109+ E273 01 60 EA                             ld      bc,60000
 110+ E276 ED 43 41 A3                          ld      (Cash),bc
 111+ E27A 01 00 00                             ld		bc,0
 112+ E27D ED 43 43 A3                          ld		(Cash+2), bc                    ; cash no longer big endian
 113+ E281 3E 46                                ld		a,MaxFuelLevel
 114+ E283 32 45 A3                             ld		(Fuel),a
 115+ E286 3E 5B                                ld      a,BankGalaxyData0
 116+ E288 32 D4 9E                             ld		(Galaxy),a
 117+ E28B AF                                   xor		a
 118+ E28C 21 60 A3                             ld      hl,EquipmentFitted
 119+ E28F 06 1A                                ld      b, EQ_ITEM_COUNT
 120+ E291 77           .ClearFittedLooop:      ld      (hl),a
 121+ E292 23                                   inc     hl
 122+ E293 10 FC                                djnz    .ClearFittedLooop
 123+ E295                                      SetAFalse
 123+ E295 3E FF       >                        ld      a,$FF
 124+ E297 32 6E A3                             ld      (EquipmentFitted+EQ_FRONT_BEAM),a
 125+ E29A 32 F6 9E                             ld		(MissionData),a						;The Plan/Mission
 126+ E29D 3E 04                                ld      a,4                                  ; a = 0 = pulse laser
 127+ E29F 32 58 A3                             ld		(LaserType),a
 128+ E2A2 3E FF                                ld      a,$FF                                 ; a = 255
 129+ E2A4 32 59 A3                             ld		(LaserType+1),a
 130+ E2A7 32 5A A3                             ld		(LaserType+2),a
 131+ E2AA 32 5B A3                             ld		(LaserType+3),a
 132+ E2AD AF                                   xor     a                                  ; a= 0
 133+ E2AE 32 5C A3                             ld      (LaserDamagedFlag),a
 134+ E2B1 32 5D A3                             ld      (LaserDamagedFlag+1),a
 135+ E2B4 32 5E A3                             ld      (LaserDamagedFlag+2),a
 136+ E2B7 32 5F A3                             ld      (LaserDamagedFlag+3),a
 137+ E2BA              ; REMOVE?             ld      a,EQ_FRONT_PULSE
 138+ E2BA AF                                   xor     a
 139+ E2BB 32 63 A3                             ld		(ECMPresent),a
 140+ E2BE 32 7A A3                             ld		(FuelScoopsBarrelStatus),a
 141+ E2C1 32 66 A3                             ld		(EnergyBomb),a
 142+ E2C4 32 67 A3                             ld		(ExtraEnergyUnit),a
 143+ E2C7 32 68 A3                             ld		(DockingComputer),a
 144+ E2CA 32 69 A3                             ld		(GalacticHyperDrive),a
 145+ E2CD 32 65 A3                             ld		(EscapePod),a
 146+ E2D0 32 4B 9E                             ld      (FugitiveInnocentStatus),a
 147+ E2D3 32 5E 9E                             ld		(KillTally),a
 148+ E2D6 32 A6 9E                             ld      (OuterHyperCount),a
 149+ E2D9 32 A5 9E                             ld      (InnerHyperCount),a
 150+ E2DC 3D                                   dec		a								; now a = 255
 151+ E2DD 32 DA A0                             ld		(ForeShield),a
 152+ E2E0 32 DB A0                             ld		(AftShield),a
 153+ E2E3 32 DC A0                             ld		(PlayerEnergy),a
 154+ E2E6 3E 14                                ld		a,20
 155+ E2E8 32 46 A3                             ld		(CargoBaySize),a
 156+ E2EB CD 5E E3                             call	ZeroCargo						; Clear out cargo
 157+ E2EE 3E 00        .SetLasers:             ld      a,0                             ; we start on Front view
 158+ E2F0 CD F4 E2                             call    LoadLaserToCurrent
 159+ E2F3 C9                                   ret
 160+ E2F4
 161+ E2F4
 162+ E2F4              ; a = current view number
 163+ E2F4 21 58 A3     LoadLaserToCurrent:     ld      hl,LaserType                    ; .
 164+ E2F7 ED 31                                add     hl,a                            ; .
 165+ E2F9 7E                                   ld      a,(hl)                          ; .
 166+ E2FA 47                                   ld      b,a                             ; first off is there a laser present in current view
 167+ E2FB 32 F1 A0                             ld      (CurrLaserType),a               ; set type
 168+ E2FE FE FF                                cp      255                             ; .
 169+ E300 C8                                   ret     z                               ; we can then drop out early if nothing fitted
 170+ E301 3E 04                                ld      a,4                             ; Damage state is in next variable in memory
 171+ E303 ED 31                                add     hl,a
 172+ E305 7E                                   ld      a,(hl)
 173+ E306 32 F2 A0                             ld      (CurrLaserDamage),a             ; copy over current laser's damage
 174+ E309 50                                   ld      d,b                             ; get table index
 175+ E30A 1E 0C                                ld      e,LaserStatsTableWidth          ;
 176+ E30C ED 30                                mul     de                              ;
 177+ E30E 21 28 93                             ld      hl,LaserStatsTable              ;
 178+ E311 19                                   add     hl,de                           ;
 179+ E312 23                                   inc     hl                              ; we already have type
 180+ E313                                      ldAtHLtoMem CurrLaserPulseRate          ; table [1]
 180+ E313 7E          >                        ld      a,(hl)
 180+ E314 32 F3 A0    >                        ld      (CurrLaserPulseRate),a
 181+ E317 23                                   inc     hl                              ; table [2]
 182+ E318                                      ldAtHLtoMem CurrLaserPulseOnTime
 182+ E318 7E          >                        ld      a,(hl)
 182+ E319 32 F4 A0    >                        ld      (CurrLaserPulseOnTime),a
 183+ E31C 23                                   inc     hl                              ; table [3]
 184+ E31D                                      ldAtHLtoMem CurrLaserPulseOffTime
 184+ E31D 7E          >                        ld      a,(hl)
 184+ E31E 32 F5 A0    >                        ld      (CurrLaserPulseOffTime),a
 185+ E321 23                                   inc     hl                              ; table [4]
 186+ E322                                      ldAtHLtoMem CurrLaserPulseRest
 186+ E322 7E          >                        ld      a,(hl)
 186+ E323 32 F6 A0    >                        ld      (CurrLaserPulseRest),a
 187+ E326 23                                   inc     hl                              ; table [5]
 188+ E327                                      ldAtHLtoMem CurrLaserDamageOutput
 188+ E327 7E          >                        ld      a,(hl)
 188+ E328 32 F9 A0    >                        ld      (CurrLaserDamageOutput),a
 189+ E32B 23                                   inc     hl                              ; table [6]
 190+ E32C                                      ldAtHLtoMem CurrLaserEnergyDrain
 190+ E32C 7E          >                        ld      a,(hl)
 190+ E32D 32 FA A0    >                        ld      (CurrLaserEnergyDrain),a
 191+ E330 23                                   inc     hl                              ; table [7]
 192+ E331                                      ldAtHLtoMem CurrLaserHeat
 192+ E331 7E          >                        ld      a,(hl)
 192+ E332 32 FB A0    >                        ld      (CurrLaserHeat),a
 193+ E335 23                                   inc     hl                              ; table [8]
 194+ E336                                      ldAtHLtoMem CurrLaserDurability
 194+ E336 7E          >                        ld      a,(hl)
 194+ E337 32 FC A0    >                        ld      (CurrLaserDurability),a
 195+ E33A 23                                   inc     hl                              ; table [9]
 196+ E33B                                      ldAtHLtoMem CurrLaserDurabilityAmount   ; we don't need tech level etc for in game run only markets so stop here
 196+ E33B 7E          >                        ld      a,(hl)
 196+ E33C 32 FD A0    >                        ld      (CurrLaserDurabilityAmount),a
 197+ E33F C9                                   ret
 198+ E340
 199+ E340              ; Set a = 2 * (slaves + narcotics) + firearms
 200+ E340 3A 4B A3     calculateBadness:       ld      a,(SlaveCargoTonnes)            ; Badness = 2(slaves + narcotics)
 201+ E343 47                                   ld      b,a                             ; .
 202+ E344 3A 4E A3                             ld      a,(NarcoticsCargoTonnes)        ; .
 203+ E347 80                                   add     b                               ; .
 204+ E348 CB 27                                sla     a                               ; .
 205+ E34A 47                                   ld      b,a                             ;
 206+ E34B 3A 52 A3                             ld      a,(FirearmsCargoTonnes)         ; Badness += firearms tonns
 207+ E34E 80                                   add     b
 208+ E34F C9                                   ret
 209+ E350
 210+ E350 CD 6B E1     PlayerDeath:            call    copyCommanderFromSave           ; load last loaded/saved commander
 211+ E353                                      ZeroA                                   ; set current laser to front
 211+ E353 AF          >                        xor a
 212+ E354 CD F4 E2                             call    LoadLaserToCurrent
 213+ E357 CD 16 A2                             call    InitMainLoop
 214+ E35A CD 7E A1                             call    ResetPlayerShip
 215+ E35D C9                                   ret
 216+ E35E                                  ;    clear out all other objects
 217+ E35E                                  ;    create debris
 218+ E35E                                  ;    if cargo presetn then create a cargo
 219+ E35E                                  ;
 220+ E35E                                  ;    enqueve message game over
 221+ E35E                                  ;    go to load commander page
# file closed: ./Commander/commanderData.asm
 798  E35E                  INCLUDE "./Commander/zero_player_cargo.asm"
# file opened: ./Commander/zero_player_cargo.asm
   1+ E35E              ZeroCargo:
   2+ E35E AF           		xor		a							;zero-out cargo, including gems.
   3+ E35F 06 10        		ld		b,16						;all the way up to alien items
   4+ E361 21 48 A3     		ld		hl,CargoTonnes   			; cargo levels
   5+ E364              .ZeroLoop:
   6+ E364 77                   ld      (hl),a
   7+ E365 23           		inc		hl
   8+ E366 10 FC        		djnz	.ZeroLoop
   9+ E368 C9           		ret
  10+ E369
# file closed: ./Commander/zero_player_cargo.asm
 799  E369              ; Bank 58  ------------------------------------------------------------------------------------------------------------------------
 800  E369                  SLOT    LAYER1Addr
 801  E369                  PAGE    BankLAYER1
 802  E369                  ORG     LAYER1Addr, BankLAYER1
 803  E000
 804  E000                  INCLUDE "./Layer1Graphics/layer1_attr_utils.asm"
# file opened: ./Layer1Graphics/layer1_attr_utils.asm
   1+ E000
   2+ E000 00 58        L1AttrRow00:            DW $5800                    ;Row 1    */
   3+ E002 20 58        L1AttrRow01:            DW $5820                    ;Row 2    */
   4+ E004 40 58        L1AttrRow02:            DW $5840                    ;Row 3    */
   5+ E006 60 58        L1AttrRow03:            DW $5860                    ;Row 4    */
   6+ E008 80 58        L1AttrRow04:            DW $5880                    ;Row 5    */
   7+ E00A A0 58        L1AttrRow05:            DW $58A0                    ;Row 6    */
   8+ E00C C0 58        L1AttrRow06:            DW $58C0                    ;Row 7    */
   9+ E00E E0 58        L1AttrRow07:            DW $58E0                    ;Row 8    */
  10+ E010 00 59        L1AttrRow08:            DW $5900                    ;Row 9    */
  11+ E012 20 59        L1AttrRow09:            DW $5920                    ;Row 10   */
  12+ E014 40 59        L1AttrRow10:            DW $5940                    ;Row 11   */
  13+ E016 60 59        L1AttrRow11:            DW $5960                    ;Row 12   */
  14+ E018 80 59        L1AttrRow12:            DW $5980                    ;Row 13   */
  15+ E01A A0 59        L1AttrRow13:            DW $59A0                    ;Row 14   */
  16+ E01C C0 59        L1AttrRow14:            DW $59C0                    ;Row 15   */
  17+ E01E E0 59        L1AttrRow15:            DW $59E0                    ;Row 16   */
  18+ E020 00 5A        L1AttrRow16:            DW $5A00                    ;Row 17   */
  19+ E022 20 5A        L1AttrRow17:            DW $5A20                    ;Row 18   */
  20+ E024 40 5A        L1AttrRow18:            DW $5A40                    ;Row 19   */
  21+ E026 60 5A        L1AttrRow19:            DW $5A60                    ;Row 20   */
  22+ E028 80 5A        L1AttrRow20:            DW $5A80                    ;Row 21   */
  23+ E02A A0 5A        L1AttrRow21:            DW $5AA0                    ;Row 22   */
  24+ E02C C0 5A        L1AttrRow22:            DW $5AC0                    ;Row 23   */
  25+ E02E E0 5A        L1AttrRow23:            DW $5AE0                    ;Row 23   */
  26+ E030
  27+ E030              ; "l2_hilight_row, d = row, e = colour"
  28+ E030 21 00 E0     l1_hilight_row:         ld      hl, L1AttrRow00
  29+ E033 4B                                   ld      c,e
  30+ E034 7A                                   ld      a,d
  31+ E035 CB 27                                sla     a
  32+ E037 ED 31                                add     hl,a
  33+ E039 7E                                   ld      a,(hl)
  34+ E03A 5F                                   ld      e,a
  35+ E03B 23                                   inc     hl
  36+ E03C 7E                                   ld      a,(hl)
  37+ E03D 57                                   ld      d,a
  38+ E03E EB                                   ex      hl,de
  39+ E03F 79                                   ld		a,c
  40+ E040 11 20 00                             ld		de, 32
  41+ E043 CD A5 99                             call	memfill_dma
  42+ E046 C9                                   ret
  43+ E047
# file closed: ./Layer1Graphics/layer1_attr_utils.asm
 805  E047                  INCLUDE "./Layer1Graphics/layer1_cls.asm"
# file opened: ./Layer1Graphics/layer1_cls.asm
   1+ E047 AF           l1_cls_top:             xor     a
   2+ E048 21 00 40                             ld      hl, $4000
   3+ E04B 11 00 08                             ld      de, $0800
   4+ E04E CD A5 99                             call    memfill_dma
   5+ E051 C9                                   ret
   6+ E052
   7+ E052 AF           l1_cls_mid:             xor     a
   8+ E053 21 00 48                             ld      hl, $4800
   9+ E056 11 00 08                             ld      de, $0800
  10+ E059 CD A5 99                             call    memfill_dma
  11+ E05C C9                                   ret
  12+ E05D
  13+ E05D AF           l1_cls_bottom:          xor     a
  14+ E05E 21 00 50                             ld      hl, $5000
  15+ E061 11 00 08                             ld      de, $0800
  16+ E064 CD A5 99                             call    memfill_dma
  17+ E067 C9                                   ret
  18+ E068
  19+ E068              ; Designed specifically to clear a whole character aligned line
  20+ E068 1E 00        l1_cls_line_d:          ld      e,0
  21+ E06A ED 94                                pixelad
  22+ E06C 11 00 01                             ld      de,32 * 8
  23+ E06F AF                                   xor     a
  24+ E070 CD A5 99                             call    memfill_dma
  25+ E073 C9                                   ret
  26+ E074
  27+ E074              ; Designed specifically to clear a whole character aligned 2 lines line, used for say clearing hyperspace message
  28+ E074 1E 00        l1_cls_2_lines_d:       ld      e,0
  29+ E076 ED 94                                pixelad
  30+ E078 11 00 02                             ld      de,32 * 16
  31+ E07B AF                                   xor     a
  32+ E07C CD A5 99                             call    memfill_dma
  33+ E07F C9                                   ret
  34+ E080
  35+ E080 AF           l1_cls:                 xor		a
  36+ E081 21 00 40     l1_cls_to_a:            ld		hl,	$4000
  37+ E084 11 00 18                             ld		de, $1800
  38+ E087 CD A5 99                             call	memfill_dma
  39+ E08A C9                                   ret
  40+ E08B
  41+ E08B 21 00 58     l1_attr_cls_2DlinesA:   ld		hl,	$5800
  42+ E08E 1E 20                                ld      e,32
  43+ E090 ED 30                                mul
  44+ E092 19                                   add     hl,de
  45+ E093 11 40 00                             ld		de, 32 * 2
  46+ E096 CD A5 99                             call	memfill_dma
  47+ E099 C9                                   ret
  48+ E09A
  49+ E09A
  50+ E09A AF           l1_attr_cls:            xor		a
  51+ E09B 21 00 58     l1_attr_cls_to_a:       ld		hl,	$5800
  52+ E09E 11 00 03                             ld		de, $0300
  53+ E0A1 CD A5 99                             call	memfill_dma
  54+ E0A4 C9                                   ret
  55+ E0A5
  56+ E0A5 01 FE FE     l1_set_border:          ld	    bc, 0xFEFE
  57+ E0A8 ED 79                                out		(c),a
  58+ E0AA C9                                   ret
# file closed: ./Layer1Graphics/layer1_cls.asm
 806  E0AB                  INCLUDE "./Layer1Graphics/layer1_print_at.asm"
# file opened: ./Layer1Graphics/layer1_print_at.asm
   1+ E0AB              ; "l1 print char a = character, de = Ypixel Xchar of print"
   2+ E0AB D5 E5        l1_print_char:          push	de,,hl
   3+ E0AD ED 94                                pixelad								; hl = address of de
   4+ E0AF E5                                   push	hl							; save hl for loop
   5+ E0B0 26 00                                ld		h,0
   6+ E0B2 6F                                   ld		l,a
   7+ E0B3 29                                   add		hl,hl						; * 2
   8+ E0B4 29                                   add		hl,hl						; * 4
   9+ E0B5 29                                   add		hl,hl						; * 8 to get byte address
  10+ E0B6 ED 34 00 3C                          add		hl,charactersetaddr			; hl = address of rom char
  11+ E0BA EB                                   ex		de,hl						; save address into de
  12+ E0BB E1                                   pop		hl							; get back hl for loop
  13+ E0BC 06 08                                ld		b,8							; do 8 rows
  14+ E0BE 1A           .PrintCharLoop:         ld		a,(de)						; row byte
  15+ E0BF 13                                   inc		de							; next byte
  16+ E0C0 77                                   ld		(hl),a						; poke to screen
  17+ E0C1 ED 93                                pixeldn								; Down 1 row
  18+ E0C3 10 F9                                djnz	.PrintCharLoop				; loop for 8 bytes
  19+ E0C5 E1 D1                                pop		de,,hl					    ; restore hl
  20+ E0C7 C9                                   ret
  21+ E0C8
  22+ E0C8              ; "l1 PrintAt, pixel row, whole char col, DE = yx, HL = message Addr"
  23+ E0C8              ; now skips ascii code < 32 but moves on cursor by 1 char
  24+ E0C8              l1_print_at:
  25+ E0C8 7E           .PrintLoop:             ld		a,(hl)
  26+ E0C9 FE 00                                cp		0
  27+ E0CB C8                                   ret		z
  28+ E0CC                                      CallIfAGTENusng " ", l1_print_char
  28+ E0CC FE 20       >                        cp      " "
  28+ E0CE D4 AB E0    >                        call	nc,l1_print_char
  29+ E0D1 23                                   inc		hl							; move 1 message character right
  30+ E0D2 7B                                   ld		a,e
  31+ E0D3 C6 08                                add		a,8
  32+ E0D5 5F                                   ld		e,a							; move 1 screen character right
  33+ E0D6 18 F0                                jr		.PrintLoop
  34+ E0D8              .Clearstackandfinish:   ;pop		de                      ; TODO LOOOKS TO BE A ROGUE POPDE
  35+ E0D8 C9                                   ret
  36+ E0D9
  37+ E0D9              ;l1_print_at_wrap:
  38+ E0D9              ;; "l1 PrintAt, pixel row, whole char col, DE = yx, HL = message Addr"
  39+ E0D9              ;	ld      iyh,e
  40+ E0D9              ;.PrintLoop:
  41+ E0D9              ;	ld		a,(hl)
  42+ E0D9              ;	cp		0
  43+ E0D9              ;	ret		z
  44+ E0D9              ;.CountWordCharLen
  45+ E0D9              ;; Need to change to word wrap, so it will loop through string as before
  46+ E0D9              ;; but read up until a null or space, take the character count * 8 for pixels
  47+ E0D9              ;; if that is > 238 then force a premature line wrap
  48+ E0D9              ;
  49+ E0D9              ;
  50+ E0D9              ;    push    iy
  51+ E0D9              ;    call	l1_print_char
  52+ E0D9              ;    pop     iy
  53+ E0D9              ;	inc		hl							; move 1 message character right
  54+ E0D9              ;	ld		a,e
  55+ E0D9              ;    cp      238
  56+ E0D9              ;    jr      nc,.NextLine
  57+ E0D9              ;	add		a,8
  58+ E0D9              ;	ld		e,a							; move 1 screen character right
  59+ E0D9              ;	jr		.PrintLoop
  60+ E0D9              ;.Clearstackandfinish:
  61+ E0D9              ;	pop		de
  62+ E0D9              ;	ret
  63+ E0D9              ;.NextLine:
  64+ E0D9              ;    ld      a,(hl)
  65+ E0D9              ;    cp      " "
  66+ E0D9              ;    ld      e,iyh
  67+ E0D9              ;    ld      a,d
  68+ E0D9              ;    add     a,8
  69+ E0D9              ;    ld      d,a
  70+ E0D9              ;    jr		.PrintLoop
  71+ E0D9
  72+ E0D9              ; Counts next word at hl, uses e and forces a wrap if it would over flow puts value in c
  73+ E0D9 E5           L1LenWordAtHL:          push    hl
  74+ E0DA D5                                   push    de
  75+ E0DB 7E           .CountLoop:             ld      a,(hl)
  76+ E0DC FE 00                                cp      0
  77+ E0DE 28 0F                                jr      z,.CountDone
  78+ E0E0 FE 20                                cp      32
  79+ E0E2 28 0B                                jr      z,.CountDone
  80+ E0E4 7B                                   ld      a,e
  81+ E0E5 C6 08                                add     a,8
  82+ E0E7 5F                                   ld      e,a
  83+ E0E8 FE EE                                cp      238
  84+ E0EA 30 07                                jr      nc,.TooLong
  85+ E0EC 23                                   inc     hl
  86+ E0ED 18 EC                                jr      .CountLoop
  87+ E0EF D1           .CountDone:             pop     de
  88+ E0F0 E1                                   pop     hl
  89+ E0F1 AF                                   xor     a
  90+ E0F2 C9                                   ret
  91+ E0F3 D1           .TooLong                pop     de
  92+ E0F4 E1                                   pop     hl
  93+ E0F5 3E FF                                ld      a,$FF
  94+ E0F7 C9                                   ret
  95+ E0F8
  96+ E0F8 7E           L1PrintWordAtHL:        ld      a,(hl)
  97+ E0F9 FE 00                                cp      0
  98+ E0FB C8                                   ret     z
  99+ E0FC FE 20                                cp      32
 100+ E0FE 28 0F                                jr      z,.ItsASpace
 101+ E100 FD E5                                push    iy
 102+ E102 CD AB E0                             call	l1_print_char
 103+ E105 FD E1                                pop     iy
 104+ E107 7B                                   ld      a,e
 105+ E108 C6 08                                add     a,8
 106+ E10A 5F                                   ld      e,a
 107+ E10B 23                                   inc     hl
 108+ E10C C3 F8 E0                             jp      L1PrintWordAtHL
 109+ E10F 23           .ItsASpace:             inc     hl      ;  Just a bodge for now
 110+ E110 7B                                   ld      a,e
 111+ E111 C6 08                                add     a,8
 112+ E113 5F                                   ld      e,a
 113+ E114 C9                                   ret
 114+ E115
 115+ E115
 116+ E115              ; "l1 PrintAt, pixel row, whole char col, DE = yx, HL = message Addr"
 117+ E115              ; Now has full word level wrapping
 118+ E115 FD 63        l1_print_at_wrap:       ld      iyh,e
 119+ E117 7E           .PrintLoop:             ld		a,(hl)
 120+ E118 FE 00                                cp		0
 121+ E11A C8                                   ret		z
 122+ E11B CD D9 E0     .CountWordCharLen:      call    L1LenWordAtHL
 123+ E11E FE FF                                cp      $FF
 124+ E120 28 06                                jr      z,.WrapNextLine
 125+ E122 CD F8 E0     .NotTooLong:            call    L1PrintWordAtHL
 126+ E125              ; Need to change to word wrap, so it will loop through string as before
 127+ E125              ; but read up until a null or space, take the character count * 8 for pixels
 128+ E125              ; if that is > 238 then force a premature line wrap
 129+ E125 18 F0                                jr		.PrintLoop
 130+ E127              .Clearstackandfinish:   ;op		de
 131+ E127 C9                                   ret
 132+ E128              .WrapNextLine:
 133+ E128 FD 5C        .NextLine:              ld      e,iyh
 134+ E12A 7A                                   ld      a,d
 135+ E12B C6 08                                add     a,8
 136+ E12D 57                                   ld      d,a
 137+ E12E 18 E7                                jr		.PrintLoop
 138+ E130
 139+ E130
# file closed: ./Layer1Graphics/layer1_print_at.asm
 807  E130              ; Bank 59  ------------------------------------------------------------------------------------------------------------------------
 808  E130              ; In the first copy of the banks the "Non number" labels exist. They will map directly in other banks
 809  E130              ; as the is aligned and data tables are after that
 810  E130              ; need to make the ship index tables same size in each to simplify further
 811  E130                  SLOT    ShipModelsAddr
 812  E130                  PAGE    BankShipModels1
 813  E130              	ORG     ShipModelsAddr, BankShipModels1
 814  E000                  INCLUDE "./Data/ShipModelMacros.asm"
# file opened: ./Data/ShipModelMacros.asm
   1+ E000              MShipBankTable          MACRO
   2+ E000 ~                                    DW      BankShipModels1
   3+ E000 ~                                    DW      BankShipModels2
   4+ E000 ~                                    DW      BankShipModels3
   5+ E000 ~                                    DW      BankShipModels4
   6+ E000                                      ENDM
   7+ E000              ; For ship number A fetch
   8+ E000              ;           the adjusted ship number in B , C = original number
   9+ E000              ;           bank number in A for the respective ship based on the ship table
  10+ E000              MGetShipBankId:         MACRO   banktable
  11+ E000 ~                                    ld      b,0
  12+ E000 ~                                    ld      c,a                                 ; c= original ship id
  13+ E000 ~            .ShiftLoop:             srl     a
  14+ E000 ~                                    srl     a
  15+ E000 ~                                    srl     a
  16+ E000 ~                                    srl     a                                   ; divide by 16
  17+ E000 ~                                    ld      b,a                                 ; b = bank nbr
  18+ E000 ~                                    ld      a,c
  19+ E000 ~                                    ld      d,b
  20+ E000 ~                                    ld      e,16
  21+ E000 ~                                    mul                                         ; de = 16 * bank number (max is about 15 banks)
  22+ E000 ~                                    sub     e                                   ; a= actual model id now
  23+ E000 ~            .SelectedBank:          ld      d,b                                 ; save current bank number
  24+ E000 ~                                    ld      b,a                                 ; b = adjusted ship nbr
  25+ E000 ~                                    ld      a,d                                 ; a = bank number
  26+ E000 ~            ;.. Now b = bank and a = adjusted ship nbr
  27+ E000 ~                                    ld      hl,banktable                        ; a= bank index
  28+ E000 ~                                    add     hl,a
  29+ E000 ~                                    add     hl,a
  30+ E000 ~                                    ld      a,(hl)                              ; a = actual bank now
  31+ E000 ~                                    ClearCarryFlag
  32+ E000 ~                                    ret
  33+ E000                                      ENDM
  34+ E000
  35+ E000              McopyVertsToUniverse:   MACRO
  36+ E000 ~                                    ld          hl,(VerticesAddyAddr)       ; now the pointers are in Ubnk its easy to read
  37+ E000 ~                                    ld          de,UBnkHullVerticies
  38+ E000 ~                                    ld          b,0
  39+ E000 ~                                    ld			a,(VertexCtX6Addr)
  40+ E000 ~                                    ld          c,a
  41+ E000 ~                                    ex          de,hl                       ; dma transfer goes de -> hl i.e. opposite of ldir
  42+ E000 ~                                    call        memcopy_dma
  43+ E000 ~                                    ret
  44+ E000                                      ENDM
  45+ E000
  46+ E000              McopyEdgesToUniverse:   MACRO
  47+ E000 ~                                    ld          hl,(EdgeAddyAddr)          ; now the pointers are in Ubnk its easy to read
  48+ E000 ~                                    ld          de,UBnkHullEdges
  49+ E000 ~                                    ld          b,0
  50+ E000 ~                                    ld			a,(LineX4Addr)
  51+ E000 ~                                    ld          c,a
  52+ E000 ~                                    ex          de,hl                       ; dma transfer goes de -> hl i.e. opposite of ldir
  53+ E000 ~                                    call        memcopy_dma
  54+ E000 ~                                    ret
  55+ E000                                      ENDM
  56+ E000
  57+ E000              McopyNormsToUniverse:   MACRO
  58+ E000 ~                                    ld          hl,(FaceAddyAddr)          ; now the pointers are in Ubnk its easy to read
  59+ E000 ~                                    ld          de,UBnkHullNormals
  60+ E000 ~                                    ld          b,0
  61+ E000 ~                                    ld          a,(FaceCtX4Addr)
  62+ E000 ~                                    ld          c,a
  63+ E000 ~                                    ex          de,hl                       ; dma transfer goes de -> hl i.e. opposite of ldir
  64+ E000 ~                                    call        memcopy_dma
  65+ E000 ~                                    ret
  66+ E000                                      ENDM
  67+ E000
  68+ E000              ; Passes in ship nbr in A and bank is part of MACRO
  69+ E000              MCopyShipToUniverse:    MACRO       banklabel
  70+ E000 ~                                    ld          hl,UBnkShipModelBank
  71+ E000 ~                                    ld          (hl),banklabel
  72+ E000 ~                                    ld          (UBnKShipModelNbr),a
  73+ E000 ~            .GetHullDataLength:     ld          hl,ShipModelSizeTable
  74+ E000 ~                                    add         hl,a
  75+ E000 ~                                    add         hl,a                        ; we won't multiply by 2 as GetInfo is a general purpose routines so would end up x 4
  76+ E000 ~                                    ld          c,(hl)
  77+ E000 ~                                    inc         hl
  78+ E000 ~                                    ld          b,(hl)                      ; bc now equals length of data set
  79+ E000 ~            .GetHullDataAddress:    ld          hl,ShipModelTable
  80+ E000 ~                                    add         hl,a
  81+ E000 ~                                    add         hl,a                        ; now hl = address of ship data value
  82+ E000 ~                                    ld          a,(hl)
  83+ E000 ~                                    inc         hl
  84+ E000 ~                                    ld          h,(hl)
  85+ E000 ~                                    ld          l,a                         ; now hl = address of ship hull data
  86+ E000 ~                                    ld          de,UBnkHullCopy             ; Universe bank
  87+ E000 ~                                    ld          bc,ShipDataLength
  88+ E000 ~                                    ldir
  89+ E000 ~                                    call        CopyVertsToUniv
  90+ E000 ~                                    call        CopyEdgesToUniv
  91+ E000 ~                                    call        CopyNormsToUniv
  92+ E000 ~                                    ret
  93+ E000                                      ENDM
  94+ E000
  95+ E000              MCopyBodyToUniverse:    MACRO       copyRoutine
  96+ E000 ~                                    ld          a,13
  97+ E000 ~                                    call        copyRoutine
  98+ E000 ~                                    ret
  99+ E000                                      ENDM
 100+ E000
 101+ E000
 102+ E000              MCopyShipIdToUniverse:  MACRO
 103+ E000 ~                                    call        GetShipModelId
 104+ E000 ~                                    MMUSelectShipBankA
 105+ E000 ~                                    ld          a,b
 106+ E000 ~                                    jp          CopyShipToUniverse
 107+ E000                                      ENDM
# file closed: ./Data/ShipModelMacros.asm
 815  E000                  INCLUDE "./Data/ShipBank1Label.asm"
# file opened: ./Data/ShipBank1Label.asm
   1+ E000 53 68 69 70  ShipBank1Label:         DB  "ShipBank1      "
   1+ E004 42 61 6E 6B
   1+ E008 31 20 20 20
   1+ E00C 20 20 20
   2+ E00F
# file closed: ./Data/ShipBank1Label.asm
 816  E00F              GetShipBankId:
 817  E00F              GetShipBank1Id:        MGetShipBankId ShipBankTable
 817  E00F 06 00       >                        ld      b,0
 817  E011 4F          >                        ld      c,a                                 ; c= original ship id
 817  E012 CB 3F       >.ShiftLoop:             srl     a
 817  E014 CB 3F       >                        srl     a
 817  E016 CB 3F       >                        srl     a
 817  E018 CB 3F       >                        srl     a                                   ; divide by 16
 817  E01A 47          >                        ld      b,a                                 ; b = bank nbr
 817  E01B 79          >                        ld      a,c
 817  E01C 50          >                        ld      d,b
 817  E01D 1E 10       >                        ld      e,16
 817  E01F ED 30       >                        mul                                         ; de = 16 * bank number (max is about 15 banks)
 817  E021 93          >                        sub     e                                   ; a= actual model id now
 817  E022 50          >.SelectedBank:          ld      d,b                                 ; save current bank number
 817  E023 47          >                        ld      b,a                                 ; b = adjusted ship nbr
 817  E024 7A          >                        ld      a,d                                 ; a = bank number
 817  E025             >;.. Now b = bank and a = adjusted ship nbr
 817  E025 21 62 E0    >                        ld      hl,ShipBankTable                        ; a= bank index
 817  E028 ED 31       >                        add     hl,a
 817  E02A ED 31       >                        add     hl,a
 817  E02C 7E          >                        ld      a,(hl)                              ; a = actual bank now
 817  E02D             >                        ClearCarryFlag
 817  E02D B7          >                        or a
 817  E02E C9          >                        ret
 818  E02F              CopyVertsToUniv:
 819  E02F              CopyVertsToUniv1:       McopyVertsToUniverse
 819  E02F 2A 2B C3    >                        ld          hl,(VerticesAddyAddr)       ; now the pointers are in Ubnk its easy to read
 819  E032 11 31 C3    >                        ld          de,UBnkHullVerticies
 819  E035 06 00       >                        ld          b,0
 819  E037 3A 1F C3    >                        ld			a,(VertexCtX6Addr)
 819  E03A 4F          >                        ld          c,a
 819  E03B EB          >                        ex          de,hl                       ; dma transfer goes de -> hl i.e. opposite of ldir
 819  E03C CD CB 99    >                        call        memcopy_dma
 819  E03F C9          >                        ret
 820  E040              CopyEdgesToUniv:
 821  E040              CopyEdgesToUniv1:       McopyEdgesToUniverse
 821  E040 2A 19 C3    >                        ld          hl,(EdgeAddyAddr)          ; now the pointers are in Ubnk its easy to read
 821  E043 11 21 C4    >                        ld          de,UBnkHullEdges
 821  E046 06 00       >                        ld          b,0
 821  E048 3A 1B C3    >                        ld			a,(LineX4Addr)
 821  E04B 4F          >                        ld          c,a
 821  E04C EB          >                        ex          de,hl                       ; dma transfer goes de -> hl i.e. opposite of ldir
 821  E04D CD CB 99    >                        call        memcopy_dma
 821  E050 C9          >                        ret
 822  E051              CopyNormsToUniv:
 823  E051              CopyNormsToUniv1:       McopyNormsToUniverse
 823  E051 2A 27 C3    >                        ld          hl,(FaceAddyAddr)          ; now the pointers are in Ubnk its easy to read
 823  E054 11 E9 C4    >                        ld          de,UBnkHullNormals
 823  E057 06 00       >                        ld          b,0
 823  E059 3A 23 C3    >                        ld          a,(FaceCtX4Addr)
 823  E05C 4F          >                        ld          c,a
 823  E05D EB          >                        ex          de,hl                       ; dma transfer goes de -> hl i.e. opposite of ldir
 823  E05E CD CB 99    >                        call        memcopy_dma
 823  E061 C9          >                        ret
 824  E062              ShipBankTable:
 825  E062              ShipBankTable1:         MShipBankTable
 825  E062 3B 00       >                        DW      BankShipModels1
 825  E064 43 00       >                        DW      BankShipModels2
 825  E066 44 00       >                        DW      BankShipModels3
 825  E068 45 00       >                        DW      BankShipModels4
 826  E06A              CopyShipToUniverse:
 827  E06A              CopyShipToUniverse1     MCopyShipToUniverse     BankShipModels1
 827  E06A 21 2D C0    >                        ld          hl,UBnkShipModelBank
 827  E06D 36 3B       >                        ld          (hl),BankShipModels1
 827  E06F 32 2E C0    >                        ld          (UBnKShipModelNbr),a
 827  E072 21 1F E1    >.GetHullDataLength:     ld          hl,ShipModelSizeTable
 827  E075 ED 31       >                        add         hl,a
 827  E077 ED 31       >                        add         hl,a                        ; we won't multiply by 2 as GetInfo is a general purpose routines so would end up x 4
 827  E079 4E          >                        ld          c,(hl)
 827  E07A 23          >                        inc         hl
 827  E07B 46          >                        ld          b,(hl)                      ; bc now equals length of data set
 827  E07C 21 9F E0    >.GetHullDataAddress:    ld          hl,ShipModelTable
 827  E07F ED 31       >                        add         hl,a
 827  E081 ED 31       >                        add         hl,a                        ; now hl = address of ship data value
 827  E083 7E          >                        ld          a,(hl)
 827  E084 23          >                        inc         hl
 827  E085 66          >                        ld          h,(hl)
 827  E086 6F          >                        ld          l,a                         ; now hl = address of ship hull data
 827  E087 11 16 C3    >                        ld          de,UBnkHullCopy             ; Universe bank
 827  E08A 01 1B 00    >                        ld          bc,ShipDataLength
 827  E08D ED B0       >                        ldir
 827  E08F CD 2F E0    >                        call        CopyVertsToUniv
 827  E092 CD 40 E0    >                        call        CopyEdgesToUniv
 827  E095 CD 51 E0    >                        call        CopyNormsToUniv
 827  E098 C9          >                        ret
 828  E099              CopyBodyToUniverse:
 829  E099              CopyBodyToUniverse1:    MCopyBodyToUniverse     CopyShipToUniverse1
 829  E099 3E 0D       >                        ld          a,13
 829  E09B CD 6A E0    >                        call        CopyShipToUniverse1
 829  E09E C9          >                        ret
 830  E09F                  INCLUDE "./Data/ShipModelMetaData1.asm"
# file opened: ./Data/ShipModelMetaData1.asm
   1+ E09F              ShipModelTable:
   2+ E09F 3F E1        ShipModelTable1:         DW Adder                                   ;00 $00
   3+ E0A1 76 E2                                 DW Anaconda                                ;01 $01
   4+ E0A3 7F E3                                 DW Asp_Mk_2                                ;02 $02
   5+ E0A5 AC E4                                 DW Boa                                     ;03 $03
   6+ E0A7 A5 E5                                 DW CargoType5                              ;04 $04
   7+ E0A9 54 E6                                 DW Boulder                                 ;05 $05
   8+ E0AB FD E6                                 DW Asteroid                                ;06 $06
   9+ E0AD DA E7                                 DW Bushmaster                              ;07 $07
  10+ E0AF AD E8                                 DW Chameleon                               ;08 $08
  11+ E0B1 DC E9                                 DW CobraMk3                                ;09 $09
  12+ E0B3 6B EB                                 DW Cobra_Mk_1                              ;10 $0A
  13+ E0B5 38 EC                                 DW Cobra_Mk_3_P                            ;11 $0B
  14+ E0B7 C7 ED                                 DW Constrictor                             ;12 $0C
  15+ E0B9 D0 EE                                 DW Coriolis                                ;13 $0D
  16+ E0BB F3 EF                                 DW Cougar                                  ;14 $0E
  17+ E0BD FC F0                                 DW Dodo                                    ;15 $0F
  18+ E0BF              ShipVertexTable:
  19+ E0BF 5A E1        ShipVertexTable1:        DW AdderVertices                           ;00 $00
  20+ E0C1 91 E2                                 DW AnacondaVertices                        ;01 $01
  21+ E0C3 9A E3                                 DW Asp_Mk_2Vertices                        ;02 $02
  22+ E0C5 C7 E4                                 DW BoaVertices                             ;03 $03
  23+ E0C7 C0 E5                                 DW CargoType5Vertices                      ;04 $04
  24+ E0C9 6F E6                                 DW BoulderVertices                         ;05 $05
  25+ E0CB 18 E7                                 DW AsteroidVertices                        ;06 $06
  26+ E0CD F5 E7                                 DW BushmasterVertices                      ;07 $07
  27+ E0CF C8 E8                                 DW ChameleonVertices                       ;08 $08
  28+ E0D1 F7 E9                                 DW CobraMk3Vertices                        ;09 $09
  29+ E0D3 86 EB                                 DW Cobra_Mk_1Vertices                      ;10 $0A
  30+ E0D5 53 EC                                 DW Cobra_Mk_3_PVertices                    ;11 $0B
  31+ E0D7 E2 ED                                 DW ConstrictorVertices                     ;12 $0C
  32+ E0D9 EB EE                                 DW CoriolisVertices                        ;13 $0D
  33+ E0DB 0E F0                                 DW CougarVertices                          ;14 $0E
  34+ E0DD 17 F1                                 DW DodoVertices                            ;15 $0F
  35+ E0DF              ShipEdgeTable:
  36+ E0DF C6 E1        ShipEdgeTable1:          DW AdderEdges                              ;00 $00
  37+ E0E1 EB E2                                 DW AnacondaEdges                           ;01 $01
  38+ E0E3 0C E4                                 DW Asp_Mk_2Edges                           ;02 $02
  39+ E0E5 15 E5                                 DW BoaEdges                                ;03 $03
  40+ E0E7 FC E5                                 DW CargoType5Edges                         ;04 $04
  41+ E0E9 99 E6                                 DW BoulderEdges                            ;05 $05
  42+ E0EB 4E E7                                 DW AsteroidEdges                           ;06 $06
  43+ E0ED 3D E8                                 DW BushmasterEdges                         ;07 $07
  44+ E0EF 34 E9                                 DW ChameleonEdges                          ;08 $08
  45+ E0F1 9F EA                                 DW CobraMk3Edges                           ;09 $09
  46+ E0F3 C8 EB                                 DW Cobra_Mk_1Edges                         ;10 $0A
  47+ E0F5 FB EC                                 DW Cobra_Mk_3_PEdges                       ;11 $0B
  48+ E0F7 48 EE                                 DW ConstrictorEdges                        ;12 $0C
  49+ E0F9 4B EF                                 DW CoriolisEdges                           ;13 $0D
  50+ E0FB 80 F0                                 DW CougarEdges                             ;14 $0E
  51+ E0FD A7 F1                                 DW DodoEdges                               ;15 $0F
  52+ E0FF              ShipNormalTable:
  53+ E0FF 3A E2        ShipNormalTable1:        DW AdderNormals                            ;00 $00
  54+ E101 4F E3                                 DW AnacondaNormals                         ;01 $01
  55+ E103 7C E4                                 DW Asp_Mk_2Normals                         ;02 $02
  56+ E105 75 E5                                 DW BoaNormals                              ;03 $03
  57+ E107 38 E6                                 DW CargoType5Normals                       ;04 $04
  58+ E109 D5 E6                                 DW BoulderNormals                          ;05 $05
  59+ E10B A2 E7                                 DW AsteroidNormals                         ;06 $06
  60+ E10D 89 E8                                 DW BushmasterNormals                       ;07 $07
  61+ E10F A8 E9                                 DW ChameleonNormals                        ;08 $08
  62+ E111 37 EB                                 DW CobraMk3Normals                         ;09 $09
  63+ E113 10 EC                                 DW Cobra_Mk_1Normals                       ;10 $0A
  64+ E115 93 ED                                 DW Cobra_Mk_3_PNormals                     ;11 $0B
  65+ E117 A8 EE                                 DW ConstrictorNormals                      ;12 $0C
  66+ E119 BB EF                                 DW CoriolisNormals                         ;13 $0D
  67+ E11B E4 F0                                 DW CougarNormals                           ;14 $0E
  68+ E11D 2F F2                                 DW DodoNormals                             ;15 $0F
  69+ E11F              ShipModelSizeTable:
  70+ E11F 37 01        ShipModelSizeTable1:     DW AdderLen                                ;00 $00
  71+ E121 09 01                                 DW AnacondaLen                             ;01 $01
  72+ E123 2D 01                                 DW Asp_Mk_2Len                             ;02 $02
  73+ E125 F9 00                                 DW BoaLen                                  ;03 $03
  74+ E127 AF 00                                 DW CargoType5Len                           ;04 $04
  75+ E129 A9 00                                 DW BoulderLen                              ;05 $05
  76+ E12B DD 00                                 DW AsteroidLen                             ;06 $06
  77+ E12D D3 00                                 DW BushmasterLen                           ;07 $07
  78+ E12F 2F 01                                 DW ChameleonLen                            ;08 $08
  79+ E131 8F 01                                 DW CobraMk3Len                             ;09 $09
  80+ E133 CD 00                                 DW Cobra_Mk_1Len                           ;10 $0A
  81+ E135 8F 01                                 DW Cobra_Mk_3_PLen                         ;11 $0B
  82+ E137 09 01                                 DW ConstrictorLen                          ;12 $0C
  83+ E139 23 01                                 DW CoriolisLen                             ;13 $0D
  84+ E13B 09 01                                 DW CougarLen                               ;14 $0E
  85+ E13D 63 01                                 DW DodoLen                                 ;15 $0F
  86+ E13F
  87+ E13F                                      include "Data/ships/Adder.asm"
# file opened: ./Data/ships/Adder.asm
   1++E13F 00           Adder:	                DB $00
   2++E140 C4 09                                DW $09C4
   3++E142 C6 E1                                DW AdderEdges
   4++E144 74                                   DB AdderEdgesSize
   5++E145 00 16                                DB $00, $16
   6++E147 12                                   DB AdderVertSize / 6
   7++E148 6C                                   DB AdderVertSize
   8++E149 1D                                   DB AdderEdgesCnt
   9++E14A 00 28                                DB $00, $28
  10++E14C 3C                                   DB AdderNormalsSize
  11++E14D 17 48 18                             DB $17, $48, $18
  12++E150 3A E2                                DW AdderNormals
  13++E152 02 21                                DB $02, $21
  14++E154 5A E1                                DW AdderVertices
  15++E156 00 00                                DB 0,0                      ; Type and Tactics
  16++E158 01                                   DB ShipCanAnger
  17++E159 80                                   DB $80                      ; chance of ECM module
  18++E15A 12 00 28 9F  AdderVertices:	        DB $12, $00, $28, $9F, $01, $BC     ;01
  18++E15E 01 BC
  19++E160 12 00 28 1F                          DB $12, $00, $28, $1F, $01, $23     ;02
  19++E164 01 23
  20++E166 1E 00 18 3F                          DB $1E, $00, $18, $3F, $23, $45     ;03
  20++E16A 23 45
  21++E16C 1E 00 28 3F                          DB $1E, $00, $28, $3F, $45, $66     ;04
  21++E170 45 66
  22++E172 12 07 28 7F                          DB $12, $07, $28, $7F, $56, $7E     ;05
  22++E176 56 7E
  23++E178 12 07 28 FF                          DB $12, $07, $28, $FF, $78, $AE     ;06
  23++E17C 78 AE
  24++E17E 1E 00 28 BF                          DB $1E, $00, $28, $BF, $89, $AA     ;07
  24++E182 89 AA
  25++E184 1E 00 18 BF                          DB $1E, $00, $18, $BF, $9A, $BC     ;08
  25++E188 9A BC
  26++E18A 12 07 28 BF                          DB $12, $07, $28, $BF, $78, $9D     ;09
  26++E18E 78 9D
  27++E190 12 07 28 3F                          DB $12, $07, $28, $3F, $46, $7D     ;10
  27++E194 46 7D
  28++E196 12 07 0D 9F                          DB $12, $07, $0D, $9F, $09, $BD     ;11
  28++E19A 09 BD
  29++E19C 12 07 0D 1F                          DB $12, $07, $0D, $1F, $02, $4D     ;12
  29++E1A0 02 4D
  30++E1A2 12 07 0D DF                          DB $12, $07, $0D, $DF, $1A, $CE     ;13
  30++E1A6 1A CE
  31++E1A8 12 07 0D 5F                          DB $12, $07, $0D, $5F, $13, $5E     ;14
  31++E1AC 13 5E
  32++E1AE 0B 03 1D 85                          DB $0B, $03, $1D, $85, $00, $00     ;15
  32++E1B2 00 00
  33++E1B4 0B 03 1D 05                          DB $0B, $03, $1D, $05, $00, $00     ;16
  33++E1B8 00 00
  34++E1BA 0B 04 18 04                          DB $0B, $04, $18, $04, $00, $00     ;17
  34++E1BE 00 00
  35++E1C0 0B 04 18 84                          DB $0B, $04, $18, $84, $00, $00     ;18
  35++E1C4 00 00
  36++E1C6              AdderVertSize:          equ $ - AdderVertices
  37++E1C6 1F 01 00 04  AdderEdges:	            DB $1F, $01, $00, $04               ;01
  38++E1CA 07 23 04 08                          DB $07, $23, $04, $08               ;02
  39++E1CE 1F 45 08 0C                          DB $1F, $45, $08, $0C               ;03
  40++E1D2 1F 56 0C 10                          DB $1F, $56, $0C, $10               ;04
  41++E1D6 1F 7E 10 14                          DB $1F, $7E, $10, $14               ;05
  42++E1DA 1F 8A 14 18                          DB $1F, $8A, $14, $18               ;06
  43++E1DE 1F 9A 18 1C                          DB $1F, $9A, $18, $1C               ;07
  44++E1E2 07 BC 1C 00                          DB $07, $BC, $1C, $00               ;08
  45++E1E6 1F 46 0C 24                          DB $1F, $46, $0C, $24               ;09
  46++E1EA 1F 7D 24 20                          DB $1F, $7D, $24, $20               ;10
  47++E1EE 1F 89 20 18                          DB $1F, $89, $20, $18               ;11
  48++E1F2 1F 0B 00 28                          DB $1F, $0B, $00, $28               ;12
  49++E1F6 1F 9B 1C 28                          DB $1F, $9B, $1C, $28               ;13
  50++E1FA 1F 02 04 2C                          DB $1F, $02, $04, $2C               ;14
  51++E1FE 1F 24 08 2C                          DB $1F, $24, $08, $2C               ;15
  52++E202 1F 1C 00 30                          DB $1F, $1C, $00, $30               ;16
  53++E206 1F AC 1C 30                          DB $1F, $AC, $1C, $30               ;17
  54++E20A 1F 13 04 34                          DB $1F, $13, $04, $34               ;18
  55++E20E 1F 35 08 34                          DB $1F, $35, $08, $34               ;19
  56++E212 1F 0D 28 2C                          DB $1F, $0D, $28, $2C               ;20
  57++E216 1F 1E 30 34                          DB $1F, $1E, $30, $34               ;21
  58++E21A 1F 9D 20 28                          DB $1F, $9D, $20, $28               ;22
  59++E21E 1F 4D 24 2C                          DB $1F, $4D, $24, $2C               ;23
  60++E222 1F AE 14 30                          DB $1F, $AE, $14, $30               ;24
  61++E226 1F 5E 10 34                          DB $1F, $5E, $10, $34               ;25
  62++E22A 05 00 38 3C                          DB $05, $00, $38, $3C               ;26
  63++E22E 03 00 3C 40                          DB $03, $00, $3C, $40               ;27
  64++E232 04 00 40 44                          DB $04, $00, $40, $44               ;28
  65++E236 03 00 44 38                          DB $03, $00, $44, $38               ;29
  66++E23A              AdderEdgesSize:         equ $ - AdderEdges
  67++E23A              AdderEdgesCnt:          equ AdderEdgesSize/4
  68++E23A 1F 00 27 0A  AdderNormals:	        DB $1F, $00, $27, $0A               ;01
  69++E23E 5F 00 27 0A                          DB $5F, $00, $27, $0A               ;02
  70++E242 1F 45 32 0D                          DB $1F, $45, $32, $0D               ;03
  71++E246 5F 45 32 0D                          DB $5F, $45, $32, $0D               ;04
  72++E24A 1F 1E 34 00                          DB $1F, $1E, $34, $00               ;05
  73++E24E 5F 1E 34 00                          DB $5F, $1E, $34, $00               ;06
  74++E252 3F 00 00 A0                          DB $3F, $00, $00, $A0               ;07
  75++E256 3F 00 00 A0                          DB $3F, $00, $00, $A0               ;08
  76++E25A 3F 00 00 A0                          DB $3F, $00, $00, $A0               ;09
  77++E25E 9F 1E 34 00                          DB $9F, $1E, $34, $00               ;10
  78++E262 DF 1E 34 00                          DB $DF, $1E, $34, $00               ;11
  79++E266 9F 45 32 0D                          DB $9F, $45, $32, $0D               ;12
  80++E26A DF 45 32 0D                          DB $DF, $45, $32, $0D               ;13
  81++E26E 1F 00 1C 00                          DB $1F, $00, $1C, $00               ;14
  82++E272 5F 00 1C 00                          DB $5F, $00, $1C, $00               ;15
  83++E276
  84++E276              AdderNormalsSize:       equ $ - AdderNormals
  85++E276              AdderLen:                equ $ - Adder
  86++E276
  87++E276
  88++E276
  89++E276
  90++E276
  91++E276
  92++E276
  93++E276
  94++E276
  95++E276
  96++E276
# file closed: ./Data/ships/Adder.asm
  88+ E276                                      include "Data/ships/Anaconda.asm"
# file opened: ./Data/ships/Anaconda.asm
   1++E276 07           Anaconda:	            DB $07
   2++E277 10 27                                DW $2710
   3++E279 EB E2                                DW AnacondaEdges
   4++E27B 64                                   DB AnacondaEdgesSize
   5++E27C 30 2E                                DB $30, $2E
   6++E27E 0F                                   DB AnacondaVertSize / 6
   7++E27F 5A                                   DB AnacondaVertSize
   8++E280 19                                   DB AnacondaEdgesCnt
   9++E281 00 00                                DB $00, $00
  10++E283 30                                   DB AnacondaNormalsSize
  11++E284 24 FC 0E                             DB $24, $FC, $0E
  12++E287 4F E3                                DW AnacondaNormals
  13++E289 01 3F                                DB $01, $3F
  14++E28B 91 E2                                DW AnacondaVertices
  15++E28D 00 00                                DB 0,0                      ; Type and Tactics
  16++E28F 01                                   DB ShipCanAnger
  17++E290 D0                                   DB $D0                      ; chance of ECM module
  18++E291 00 07 3A 3E  AnacondaVertices:	    DB $00, $07, $3A, $3E, $01, $55 ;01
  18++E295 01 55
  19++E297 2B 0D 25 FE                          DB $2B, $0D, $25, $FE, $01, $22 ;02
  19++E29B 01 22
  20++E29D 1A 2F 03 FE                          DB $1A, $2F, $03, $FE, $02, $33 ;03
  20++E2A1 02 33
  21++E2A3 1A 2F 03 7E                          DB $1A, $2F, $03, $7E, $03, $44 ;04
  21++E2A7 03 44
  22++E2A9 2B 0D 25 7E                          DB $2B, $0D, $25, $7E, $04, $55 ;05
  22++E2AD 04 55
  23++E2AF 00 30 31 3E                          DB $00, $30, $31, $3E, $15, $66 ;06
  23++E2B3 15 66
  24++E2B5 45 0F 0F BE                          DB $45, $0F, $0F, $BE, $12, $77 ;07
  24++E2B9 12 77
  25++E2BB 2B 27 28 DF                          DB $2B, $27, $28, $DF, $23, $88 ;08
  25++E2BF 23 88
  26++E2C1 2B 27 28 5F                          DB $2B, $27, $28, $5F, $34, $99 ;09
  26++E2C5 34 99
  27++E2C7 45 0F 0F 3E                          DB $45, $0F, $0F, $3E, $45, $AA ;10
  27++E2CB 45 AA
  28++E2CD 2B 35 17 BF                          DB $2B, $35, $17, $BF, $FF, $FF ;11
  28++E2D1 FF FF
  29++E2D3 45 01 20 DF                          DB $45, $01, $20, $DF, $27, $88 ;12
  29++E2D7 27 88
  30++E2D9 00 00 FE 1F                          DB $00, $00, $FE, $1F, $FF, $FF ;13
  30++E2DD FF FF
  31++E2DF 45 01 20 5F                          DB $45, $01, $20, $5F, $49, $AA ;14
  31++E2E3 49 AA
  32++E2E5 2B 35 17 3F                          DB $2B, $35, $17, $3F, $FF, $FF ;15
  32++E2E9 FF FF
  33++E2EB              AnacondaVertSize:       equ $ - AnacondaVertices
  34++E2EB 1E 01 00 04  AnacondaEdges:	        DB $1E, $01, $00, $04           ;01
  35++E2EF 1E 02 04 08                          DB $1E, $02, $04, $08           ;02
  36++E2F3 1E 03 08 0C                          DB $1E, $03, $08, $0C           ;03
  37++E2F7 1E 04 0C 10                          DB $1E, $04, $0C, $10           ;04
  38++E2FB 1E 05 00 10                          DB $1E, $05, $00, $10           ;05
  39++E2FF 1D 15 00 14                          DB $1D, $15, $00, $14           ;06
  40++E303 1D 12 04 18                          DB $1D, $12, $04, $18           ;07
  41++E307 1D 23 08 1C                          DB $1D, $23, $08, $1C           ;08
  42++E30B 1D 34 0C 20                          DB $1D, $34, $0C, $20           ;09
  43++E30F 1D 45 10 24                          DB $1D, $45, $10, $24           ;10
  44++E313 1E 16 14 28                          DB $1E, $16, $14, $28           ;11
  45++E317 1E 17 18 28                          DB $1E, $17, $18, $28           ;12
  46++E31B 1E 27 18 2C                          DB $1E, $27, $18, $2C           ;13
  47++E31F 1E 28 1C 2C                          DB $1E, $28, $1C, $2C           ;14
  48++E323 1F 38 1C 30                          DB $1F, $38, $1C, $30           ;15
  49++E327 1F 39 20 30                          DB $1F, $39, $20, $30           ;16
  50++E32B 1E 49 20 34                          DB $1E, $49, $20, $34           ;17
  51++E32F 1E 4A 24 34                          DB $1E, $4A, $24, $34           ;18
  52++E333 1E 5A 24 38                          DB $1E, $5A, $24, $38
  53++E337 1E 56 14 38                          DB $1E, $56, $14, $38
  54++E33B 1E 6B 28 38                          DB $1E, $6B, $28, $38
  55++E33F 1F 7B 28 30                          DB $1F, $7B, $28, $30
  56++E343 1F 78 2C 30                          DB $1F, $78, $2C, $30
  57++E347 1F 9A 30 34                          DB $1F, $9A, $30, $34
  58++E34B 1F AB 30 38                          DB $1F, $AB, $30, $38
  59++E34F              AnacondaEdgesSize:      equ $ - AnacondaEdges
  60++E34F              AnacondaEdgesCnt:       equ AnacondaEdgesSize/4
  61++E34F 7E 00 33 31  AnacondaNormals:	    DB $7E, $00, $33, $31           ;01
  62++E353 BE 33 12 57                          DB $BE, $33, $12, $57           ;02
  63++E357 FE 4D 39 13                          DB $FE, $4D, $39, $13           ;03
  64++E35B 5F 00 5A 10                          DB $5F, $00, $5A, $10           ;04
  65++E35F 7E 4D 39 13                          DB $7E, $4D, $39, $13           ;05
  66++E363 3E 33 12 57                          DB $3E, $33, $12, $57           ;06
  67++E367 3E 00 6F 14                          DB $3E, $00, $6F, $14           ;07
  68++E36B 9F 61 48 18                          DB $9F, $61, $48, $18           ;08
  69++E36F DF 6C 44 22                          DB $DF, $6C, $44, $22           ;09
  70++E373 5F 6C 44 22                          DB $5F, $6C, $44, $22           ;10
  71++E377 1F 61 48 18                          DB $1F, $61, $48, $18           ;11
  72++E37B 1F 00 5E 12                          DB $1F, $00, $5E, $12           ;12
  73++E37F              AnacondaNormalsSize:    equ $ - AnacondaNormals
  74++E37F              AnacondaLen:            equ $ - Anaconda
  75++E37F
  76++E37F
  77++E37F
  78++E37F
# file closed: ./Data/ships/Anaconda.asm
  89+ E37F                                      include "Data/ships/Asp_Mk_2.asm"
# file opened: ./Data/ships/Asp_Mk_2.asm
   1++E37F 00           Asp_Mk_2:	            DB $00
   2++E380 10 0E                                DW $0E10
   3++E382 0C E4                                DW Asp_Mk_2Edges
   4++E384 70                                   DB Asp_Mk_2EdgesSize
   5++E385 20 1A                                DB $20, $1A
   6++E387 13                                   DB Asp_Mk_2VertSize /6
   7++E388 72                                   DB Asp_Mk_2VertSize
   8++E389 1C                                   DB Asp_Mk_2EdgesCnt
   9++E38A 00 C8                                DB $00, $C8
  10++E38C 30                                   DB Asp_Mk_2NormalsSize
  11++E38D 28 96 28                             DB $28, $96, $28
  12++E390 7C E4                                DW Asp_Mk_2Normals
  13++E392 01 29                                DB $01, $29
  14++E394 9A E3                                DW Asp_Mk_2Vertices
  15++E396 00 00                                DB 0,0                      ; Type and Tactics
  16++E398 01                                   DB ShipCanAnger
  17++E399 80                                   DB $80                      ; chance of ECM module
  18++E39A 00 12 00 56  Asp_Mk_2Vertices:	    DB $00, $12, $00, $56, $01, $22 ;01
  18++E39E 01 22
  19++E3A0 00 09 2D 7F                          DB $00, $09, $2D, $7F, $12, $BB ;02
  19++E3A4 12 BB
  20++E3A6 2B 00 2D 3F                          DB $2B, $00, $2D, $3F, $16, $BB ;03
  20++E3AA 16 BB
  21++E3AC 45 03 00 5F                          DB $45, $03, $00, $5F, $16, $79 ;04
  21++E3B0 16 79
  22++E3B2 2B 0E 1C 5F                          DB $2B, $0E, $1C, $5F, $01, $77 ;05
  22++E3B6 01 77
  23++E3B8 2B 00 2D BF                          DB $2B, $00, $2D, $BF, $25, $BB ;06
  23++E3BC 25 BB
  24++E3BE 45 03 00 DF                          DB $45, $03, $00, $DF, $25, $8A ;07
  24++E3C2 25 8A
  25++E3C4 2B 0E 1C DF                          DB $2B, $0E, $1C, $DF, $02, $88 ;08
  25++E3C8 02 88
  26++E3CA 1A 07 49 5F                          DB $1A, $07, $49, $5F, $04, $79 ;09
  26++E3CE 04 79
  27++E3D0 1A 07 49 DF                          DB $1A, $07, $49, $DF, $04, $8A ;10
  27++E3D4 04 8A
  28++E3D6 2B 0E 1C 1F                          DB $2B, $0E, $1C, $1F, $34, $69 ;11
  28++E3DA 34 69
  29++E3DC 2B 0E 1C 9F                          DB $2B, $0E, $1C, $9F, $34, $5A ;12
  29++E3E0 34 5A
  30++E3E2 00 09 2D 3F                          DB $00, $09, $2D, $3F, $35, $6B ;13
  30++E3E6 35 6B
  31++E3E8 11 00 2D AA                          DB $11, $00, $2D, $AA, $BB, $BB ;14
  31++E3EC BB BB
  32++E3EE 11 00 2D 29                          DB $11, $00, $2D, $29, $BB, $BB ;15
  32++E3F2 BB BB
  33++E3F4 00 04 2D 6A                          DB $00, $04, $2D, $6A, $BB, $BB ;16
  33++E3F8 BB BB
  34++E3FA 00 04 2D 28                          DB $00, $04, $2D, $28, $BB, $BB ;17
  34++E3FE BB BB
  35++E400 00 07 49 4A                          DB $00, $07, $49, $4A, $04, $04 ;18
  35++E404 04 04
  36++E406 00 07 53 4A                          DB $00, $07, $53, $4A, $04, $04 ;19
  36++E40A 04 04
  37++E40C              Asp_Mk_2VertSize:       equ $ - Asp_Mk_2Vertices
  38++E40C 16 12 00 04  Asp_Mk_2Edges:	        DB $16, $12, $00, $04           ;01
  39++E410 16 01 00 10                          DB $16, $01, $00, $10           ;02
  40++E414 16 02 00 1C                          DB $16, $02, $00, $1C           ;03
  41++E418 1F 1B 04 08                          DB $1F, $1B, $04, $08           ;04
  42++E41C 1F 16 08 0C                          DB $1F, $16, $08, $0C           ;05
  43++E420 10 79 0C 20                          DB $10, $79, $0C, $20           ;06
  44++E424 1F 04 20 24                          DB $1F, $04, $20, $24           ;07
  45++E428 10 8A 18 24                          DB $10, $8A, $18, $24           ;08
  46++E42C 1F 25 14 18                          DB $1F, $25, $14, $18           ;09
  47++E430 1F 2B 04 14                          DB $1F, $2B, $04, $14           ;10
  48++E434 1F 17 0C 10                          DB $1F, $17, $0C, $10           ;11
  49++E438 1F 07 10 20                          DB $1F, $07, $10, $20           ;12
  50++E43C 1F 28 18 1C                          DB $1F, $28, $18, $1C           ;13
  51++E440 1F 08 1C 24                          DB $1F, $08, $1C, $24           ;14
  52++E444 1F 6B 08 30                          DB $1F, $6B, $08, $30           ;15
  53++E448 1F 5B 14 30                          DB $1F, $5B, $14, $30           ;16
  54++E44C 16 36 28 30                          DB $16, $36, $28, $30           ;17
  55++E450 16 35 2C 30                          DB $16, $35, $2C, $30           ;18
  56++E454 16 34 28 2C                          DB $16, $34, $28, $2C
  57++E458 1F 5A 18 2C                          DB $1F, $5A, $18, $2C
  58++E45C 1F 4A 24 2C                          DB $1F, $4A, $24, $2C
  59++E460 1F 69 0C 28                          DB $1F, $69, $0C, $28
  60++E464 1F 49 20 28                          DB $1F, $49, $20, $28
  61++E468 0A BB 34 3C                          DB $0A, $BB, $34, $3C
  62++E46C 09 BB 3C 38                          DB $09, $BB, $3C, $38
  63++E470 08 BB 38 40                          DB $08, $BB, $38, $40
  64++E474 08 BB 40 34                          DB $08, $BB, $40, $34
  65++E478 0A 04 48 44                          DB $0A, $04, $48, $44
  66++E47C              Asp_Mk_2EdgesSize:      equ $ - Asp_Mk_2Edges
  67++E47C              Asp_Mk_2EdgesCnt:       equ Asp_Mk_2EdgesSize/4
  68++E47C 5F 00 23 05  Asp_Mk_2Normals:	    DB $5F, $00, $23, $05           ;01
  69++E480 7F 08 26 07                          DB $7F, $08, $26, $07           ;02
  70++E484 FF 08 26 07                          DB $FF, $08, $26, $07           ;03
  71++E488 36 00 18 01                          DB $36, $00, $18, $01           ;04
  72++E48C 1F 00 2B 13                          DB $1F, $00, $2B, $13           ;05
  73++E490 BF 06 1C 02                          DB $BF, $06, $1C, $02           ;06
  74++E494 3F 06 1C 02                          DB $3F, $06, $1C, $02           ;07
  75++E498 5F 3B 40 1F                          DB $5F, $3B, $40, $1F           ;08
  76++E49C DF 3B 40 1F                          DB $DF, $3B, $40, $1F           ;09
  77++E4A0 1F 50 2E 32                          DB $1F, $50, $2E, $32           ;10
  78++E4A4 9F 50 2E 32                          DB $9F, $50, $2E, $32           ;11
  79++E4A8 3F 00 00 5A                          DB $3F, $00, $00, $5A           ;12
  80++E4AC              Asp_Mk_2NormalsSize:    equ $ - Asp_Mk_2Normals
  81++E4AC              Asp_Mk_2Len:            equ $ - Asp_Mk_2
  82++E4AC
  83++E4AC
  84++E4AC
  85++E4AC
# file closed: ./Data/ships/Asp_Mk_2.asm
  90+ E4AC                                      include "Data/ships/Boa.asm"
# file opened: ./Data/ships/Boa.asm
   1++E4AC 05           Boa:	                DB $05
   2++E4AD 24 13                                DW $1324
   3++E4AF 15 E5                                DW BoaEdges
   4++E4B1 60                                   DB BoaEdgesSize
   5++E4B2 00 26                                DB $00, $26
   6++E4B4 0D                                   DB BoaVertSize /6
   7++E4B5 4E                                   DB BoaVertSize
   8++E4B6 18                                   DB BoaEdgesCnt
   9++E4B7 00 00                                DB $00, $00
  10++E4B9 30                                   DB BoaNormalsSize
  11++E4BA 28 FA 18                             DB $28, $FA, $18
  12++E4BD 75 E5                                DW BoaNormals
  13++E4BF 00 1C                                DB $00, $1C
  14++E4C1 C7 E4                                DW BoaVertices
  15++E4C3 00 00                                DB 0,0                      ; Type and Tactics
  16++E4C5 01                                   DB ShipCanAnger
  17++E4C6 A0                                   DB $A0                      ; chance of ECM module
  18++E4C7 00 00 5D 1F  BoaVertices:	        DB $00, $00, $5D, $1F, $FF, $FF ; 01
  18++E4CB FF FF
  19++E4CD 00 28 57 38                          DB $00, $28, $57, $38, $02, $33 ; 02
  19++E4D1 02 33
  20++E4D3 26 19 63 78                          DB $26, $19, $63, $78, $01, $44 ; 03
  20++E4D7 01 44
  21++E4D9 26 19 63 F8                          DB $26, $19, $63, $F8, $12, $55 ; 04
  21++E4DD 12 55
  22++E4DF 26 28 3B BF                          DB $26, $28, $3B, $BF, $23, $69 ; 05
  22++E4E3 23 69
  23++E4E5 26 28 3B 3F                          DB $26, $28, $3B, $3F, $03, $6B ; 06
  23++E4E9 03 6B
  24++E4EB 3E 00 43 3F                          DB $3E, $00, $43, $3F, $04, $8B ; 07
  24++E4EF 04 8B
  25++E4F1 18 41 4F 7F                          DB $18, $41, $4F, $7F, $14, $8A ; 08
  25++E4F5 14 8A
  26++E4F7 18 41 4F FF                          DB $18, $41, $4F, $FF, $15, $7A ; 09
  26++E4FB 15 7A
  27++E4FD 3E 00 43 BF                          DB $3E, $00, $43, $BF, $25, $79 ; 10
  27++E501 25 79
  28++E503 00 07 6B 36                          DB $00, $07, $6B, $36, $02, $AA ; 11
  28++E507 02 AA
  29++E509 0D 09 6B 76                          DB $0D, $09, $6B, $76, $01, $AA ; 12
  29++E50D 01 AA
  30++E50F 0D 09 6B F6                          DB $0D, $09, $6B, $F6, $12, $CC ; 13
  30++E513 12 CC
  31++E515              BoaVertSize:            equ $ - BoaVertices
  32++E515 1F 6B 00 14  BoaEdges:	            DB $1F, $6B, $00, $14
  33++E519 1F 8A 00 1C                          DB $1F, $8A, $00, $1C
  34++E51D 1F 79 00 24                          DB $1F, $79, $00, $24
  35++E521 1D 69 00 10                          DB $1D, $69, $00, $10
  36++E525 1D 8B 00 18                          DB $1D, $8B, $00, $18
  37++E529 1D 7A 00 20                          DB $1D, $7A, $00, $20
  38++E52D 1F 36 10 14                          DB $1F, $36, $10, $14
  39++E531 1F 0B 14 18                          DB $1F, $0B, $14, $18
  40++E535 1F 48 18 1C                          DB $1F, $48, $18, $1C
  41++E539 1F 1A 1C 20                          DB $1F, $1A, $1C, $20
  42++E53D 1F 57 20 24                          DB $1F, $57, $20, $24
  43++E541 1F 29 10 24                          DB $1F, $29, $10, $24
  44++E545 18 23 04 10                          DB $18, $23, $04, $10
  45++E549 18 03 04 14                          DB $18, $03, $04, $14
  46++E54D 18 25 0C 24                          DB $18, $25, $0C, $24
  47++E551 18 15 0C 20                          DB $18, $15, $0C, $20
  48++E555 18 04 08 18                          DB $18, $04, $08, $18
  49++E559 18 14 08 1C                          DB $18, $14, $08, $1C
  50++E55D 16 02 04 28                          DB $16, $02, $04, $28
  51++E561 16 01 08 2C                          DB $16, $01, $08, $2C
  52++E565 16 12 0C 30                          DB $16, $12, $0C, $30
  53++E569 0E 0C 28 2C                          DB $0E, $0C, $28, $2C
  54++E56D 0E 1C 2C 30                          DB $0E, $1C, $2C, $30
  55++E571 0E 2C 30 28                          DB $0E, $2C, $30, $28
  56++E575              BoaEdgesSize:           equ $ - BoaEdges
  57++E575              BoaEdgesCnt:            equ BoaEdgesSize/4
  58++E575 3F 2B 25 3C  BoaNormals:	            DB $3F, $2B, $25, $3C
  59++E579 7F 00 2D 59                          DB $7F, $00, $2D, $59
  60++E57D BF 2B 25 3C                          DB $BF, $2B, $25, $3C
  61++E581 1F 00 28 00                          DB $1F, $00, $28, $00
  62++E585 7F 3E 20 14                          DB $7F, $3E, $20, $14
  63++E589 FF 3E 20 14                          DB $FF, $3E, $20, $14
  64++E58D 1F 00 17 06                          DB $1F, $00, $17, $06
  65++E591 DF 17 0F 09                          DB $DF, $17, $0F, $09
  66++E595 5F 17 0F 09                          DB $5F, $17, $0F, $09
  67++E599 9F 1A 0D 0A                          DB $9F, $1A, $0D, $0A
  68++E59D 5F 00 1F 0C                          DB $5F, $00, $1F, $0C
  69++E5A1 1F 1A 0D 0A                          DB $1F, $1A, $0D, $0A
  70++E5A5              BoaNormalsSize:         equ $ - BoaNormals
  71++E5A5              BoaLen:                 equ $ - Boa
  72++E5A5
# file closed: ./Data/ships/Boa.asm
  91+ E5A5
  92+ E5A5                                      include "Data/ships/CargoType5.asm"
# file opened: ./Data/ships/CargoType5.asm
   1++E5A5              ;	\ Transporter hull data header info 37 vertices  6*37  = &DE
   2++E5A5              ; Corrected pointers
   3++E5A5              ;                      0    1    2  3  4  5   6   7   8   9   10  11  12   13  14  15   16 17 18 19    20    21
   4++E5A5              ;					   Scp  Missile Edge  Lin Gun Exp Vtx Edg Bounty  Face              Face           Vertices
   5++E5A5              ;                      Deb  Lock    Lo Hi x4  Vtx Cnt x6  X1  lo  hi  x4   Dot Erg Spd  Lo Hi Q  Laser Lo    hi
   6++E5A5              ;;;				 Example of cargo
   7++E5A5              ;;;
   8++E5A5              ;;;		Points (nodes, vetices)		6 bytes per vertex
   9++E5A5              ;;;     Byte 0 = X magnitide with origin at middle of ship
  10++E5A5              ;;;		Byte 1 = Y magnitide with origin at middle of ship
  11++E5A5              ;;;		Byte 2 = Z magnitide with origin at middle of ship
  12++E5A5              ;;;		Byte 3 = Sign Bits of Vertex 7=X 6=Y 5 = Z 4 - 0 = visibility beyond which vertix is not shown
  13++E5A5              ;;;		Byte 4 = High 4 bits Face 2 Index Low 4 bits = Face 1 Index
  14++E5A5              ;;;		Byte 5 = High 4 bits Face 4 Index Low 4 bits = Face 3 Index
  15++E5A5              ;;;		Edges
  16++E5A5              ;;;		Byte 0 = Edge visbility Distance if > XX4 distance then won't show
  17++E5A5              ;;;		Byte 1 = High 4 bits Face 2 Index Low 4 bits = Face 1 Index
  18++E5A5              ;;;		Byte 2 = Byte offset to Point 1 (divide by 4 for index)
  19++E5A5              ;;;		Byte 3 = Byte offset to Point 2 (divide by 4 for index)
  20++E5A5              ;;;	  	Normals (Faces)
  21++E5A5              ;;;		Byte 0 = Sign Bits of Vertex 7=X 6=Y 5 = Z, bits 4 to 0 are distance for always visible
  22++E5A5              ;;;		Byte 1 = X Lo
  23++E5A5              ;;;		Byte 2 = Y Lo
  24++E5A5              ;;;		Byte 3 = Z Lo
  25++E5A5
  26++E5A5 00           CargoType5              DB $00
  27++E5A6 90 01                                DW $0190
  28++E5A8 FC E5                                DW CargoType5Edges
  29++E5AA 3C                                   DB CargoType5EdgesSize
  30++E5AB 00 12                                DB $00,$12
  31++E5AD 0A                                   DB CargoType5VertSize /6
  32++E5AE 3C                                   DB CargoType5VertSize
  33++E5AF 0F                                   DB CargoType5EdgesCnt
  34++E5B0 00 00                                DB $00,$00
  35++E5B2 1C                                   DB CargoType5NormalsSize
  36++E5B3 0C 11 0F                             DB $0C,$11,$0F
  37++E5B6 38 E6                                DW CargoType5Normals
  38++E5B8 02 00                                DB $02,$00
  39++E5BA C0 E5                                DW CargoType5Vertices
  40++E5BC 04                                   DB ShipTypeScoopable        ; Type
  41++E5BD 00                                   DB 0                        ; Tactics
  42++E5BE 00                                   DB 0
  43++E5BF 00                                   DB $0                      ; chance of ECM module
  44++E5C0              ; So cargo is               Edge offset $0050  Face Offset $008C, Verices will alwys be +20, LineMax 31 -> 4  EdgeCnt 15  VertexCnt 60 -> 10     FaceCn 28 -> 7
  45++E5C0 18 10 00 1F  CargoType5Vertices		DB $18,$10,$00,$1F,$10,$55 	; 60 bytes in total for data
  45++E5C4 10 55
  46++E5C6 18 05 0F 1F                          DB $18,$05,$0F,$1F,$10,$22
  46++E5CA 10 22
  47++E5CC 18 0D 09 5F                          DB $18,$0D,$09,$5F,$20,$33
  47++E5D0 20 33
  48++E5D2 18 0D 09 7F                          DB $18,$0D,$09,$7F,$30,$44
  48++E5D6 30 44
  49++E5D8 18 05 0F 3F                          DB $18,$05,$0F,$3F,$40,$55   ; end of left pentagon
  49++E5DC 40 55
  50++E5DE 18 10 00 9F                          DB $18,$10,$00,$9F,$51,$66   ; start of right pentagon
  50++E5E2 51 66
  51++E5E4 18 05 0F 9F                          DB $18,$05,$0F,$9F,$21,$66
  51++E5E8 21 66
  52++E5EA 18 0D 09 DF                          DB $18,$0D,$09,$DF,$32,$66
  52++E5EE 32 66
  53++E5F0 18 0D 09 FF                          DB $18,$0D,$09,$FF,$43,$66
  53++E5F4 43 66
  54++E5F6 18 05 0F BF                          DB $18,$05,$0F,$BF,$54,$66
  54++E5FA 54 66
  55++E5FC              CargoType5VertSize      equ $  - CargoType5Vertices
  56++E5FC 1F 10 00 04  CargoType5Edges			DB $1F,$10,$00,$04,$1F,$20,$04,$08 	; 8 x 7 = 60 bytes
  56++E600 1F 20 04 08
  57++E604 1F 30 08 0C                          DB $1F,$30,$08,$0C,$1F,$40,$0C,$10
  57++E608 1F 40 0C 10
  58++E60C 1F 50 00 10                          DB $1F,$50,$00,$10,$1F,$51,$00,$14
  58++E610 1F 51 00 14
  59++E614 1F 21 04 18                          DB $1F,$21,$04,$18,$1F,$32,$08,$1C
  59++E618 1F 32 08 1C
  60++E61C 1F 43 0C 20                          DB $1F,$43,$0C,$20,$1F,$54,$10,$24
  60++E620 1F 54 10 24
  61++E624 1F 61 14 18                          DB $1F,$61,$14,$18,$1F,$62,$18,$1C
  61++E628 1F 62 18 1C
  62++E62C 1F 63 1C 20                          DB $1F,$63,$1C,$20,$1F,$64,$20,$24
  62++E630 1F 64 20 24
  63++E634 1F 65 24 14                          DB $1F,$65,$24,$14
  64++E638              CargoType5EdgesSize     equ $  - CargoType5Edges
  65++E638              CargoType5EdgesCnt      equ CargoType5EdgesSize / 4
  66++E638 1F 60 00 00  CargoType5Normals    	DB $1F,$60,$00,$00
  67++E63C 1F 00 29 1E                          DB $1F,$00,$29,$1E,$5F,$00,$12,$30
  67++E640 5F 00 12 30
  68++E644 5F 00 33 00                          DB $5F,$00,$33,$00,$7F,$00,$12,$30
  68++E648 7F 00 12 30
  69++E64C 3F 00 29 1E                          DB $3F,$00,$29,$1E,$9F,$60,$00,$00   ; end Cargo cannister
  69++E650 9F 60 00 00
  70++E654              CargoType5NormalsSize   equ $  - CargoType5Normals
  71++E654              CargoType5Len           equ $  - CargoType5
# file closed: ./Data/ships/CargoType5.asm
  93+ E654                                      include "Data/ships/Boulder.asm"
# file opened: ./Data/ships/Boulder.asm
   1++E654 00           Boulder:	            DB $00
   2++E655 84 03                                DW $0384
   3++E657 99 E6                                DW BoulderEdges
   4++E659 3C                                   DB BoulderEdgesSize
   5++E65A 00 0E                                DB $00, $0E
   6++E65C 07                                   DB BoulderVertSize /6
   7++E65D 2A                                   DB BoulderVertSize
   8++E65E 0F                                   DB BoulderEdgesCnt
   9++E65F 00 01                                DB $00, $01
  10++E661 28                                   DB BoulderNormalsSize
  11++E662 14 14 1E                             DB $14, $14, $1E
  12++E665 D5 E6                                DW BoulderNormals
  13++E667 02 00                                DB $02, $00
  14++E669 6F E6                                DW BoulderVertices
  15++E66B 03 00                                DB ShipTypeJunk,0                      ; Type and Tactics  its only junk for spawing logic
  16++E66D 00                                   DB 0
  17++E66E A0                                   DB $A0                      ; chance of ECM module
  18++E66F 12 25 0B BF  BoulderVertices:	    DB $12, $25, $0B, $BF, $01, $59
  18++E673 01 59
  19++E675 1E 07 0C 1F                          DB $1E, $07, $0C, $1F, $12, $56
  19++E679 12 56
  20++E67B 1C 07 0C 7F                          DB $1C, $07, $0C, $7F, $23, $67
  20++E67F 23 67
  21++E681 02 00 27 3F                          DB $02, $00, $27, $3F, $34, $78
  21++E685 34 78
  22++E687 1C 22 1E BF                          DB $1C, $22, $1E, $BF, $04, $89
  22++E68B 04 89
  23++E68D 05 0A 0D 5F                          DB $05, $0A, $0D, $5F, $FF, $FF
  23++E691 FF FF
  24++E693 14 11 1E 3F                          DB $14, $11, $1E, $3F, $FF, $FF
  24++E697 FF FF
  25++E699              BoulderVertSize:        equ $ - BoulderVertices
  26++E699 1F 15 00 04  BoulderEdges:	        DB $1F, $15, $00, $04
  27++E69D 1F 26 04 08                          DB $1F, $26, $04, $08
  28++E6A1 1F 37 08 0C                          DB $1F, $37, $08, $0C
  29++E6A5 1F 48 0C 10                          DB $1F, $48, $0C, $10
  30++E6A9 1F 09 10 00                          DB $1F, $09, $10, $00
  31++E6AD 1F 01 00 14                          DB $1F, $01, $00, $14
  32++E6B1 1F 12 04 14                          DB $1F, $12, $04, $14
  33++E6B5 1F 23 08 14                          DB $1F, $23, $08, $14
  34++E6B9 1F 34 0C 14                          DB $1F, $34, $0C, $14
  35++E6BD 1F 04 10 14                          DB $1F, $04, $10, $14
  36++E6C1 1F 59 00 18                          DB $1F, $59, $00, $18
  37++E6C5 1F 56 04 18                          DB $1F, $56, $04, $18
  38++E6C9 1F 67 08 18                          DB $1F, $67, $08, $18
  39++E6CD 1F 78 0C 18                          DB $1F, $78, $0C, $18
  40++E6D1 1F 89 10 18                          DB $1F, $89, $10, $18
  41++E6D5              BoulderEdgesSize:       equ $ - BoulderEdges
  42++E6D5              BoulderEdgesCnt:        equ BoulderEdgesSize/4
  43++E6D5 DF 0F 03 08  BoulderNormals:	        DB $DF, $0F, $03, $08
  44++E6D9 9F 07 0C 1E                          DB $9F, $07, $0C, $1E
  45++E6DD 5F 20 2F 18                          DB $5F, $20, $2F, $18
  46++E6E1 FF 03 27 07                          DB $FF, $03, $27, $07
  47++E6E5 FF 05 04 01                          DB $FF, $05, $04, $01
  48++E6E9 1F 31 54 08                          DB $1F, $31, $54, $08
  49++E6ED 3F 70 15 15                          DB $3F, $70, $15, $15
  50++E6F1 7F 4C 23 52                          DB $7F, $4C, $23, $52
  51++E6F5 3F 16 38 89                          DB $3F, $16, $38, $89
  52++E6F9 3F 28 6E 26                          DB $3F, $28, $6E, $26
  53++E6FD              BoulderNormalsSize:     equ $ - BoulderNormals
  54++E6FD              BoulderLen:             equ $ - Boulder
  55++E6FD
# file closed: ./Data/ships/Boulder.asm
  94+ E6FD                                      include "Data/ships/Asteroid.asm"
# file opened: ./Data/ships/Asteroid.asm
   1++E6FD 00           Asteroid:	            DB $00
   2++E6FE 00 19                                DW $1900
   3++E700 4E E7                                DW AsteroidEdges
   4++E702 54                                   DB AsteroidEdgesSize
   5++E703 00 22                                DB $00, $22
   6++E705 09                                   DB AsteroidVertSize /6
   7++E706 36                                   DB AsteroidVertSize
   8++E707 15                                   DB AsteroidEdgesCnt
   9++E708 00 05                                DB $00, $05
  10++E70A 38                                   DB AsteroidNormalsSize
  11++E70B 32 3C 1E                             DB $32, $3C, $1E
  12++E70E A2 E7                                DW AsteroidNormals
  13++E710 01 00                                DB $01, $00
  14++E712 18 E7                                DW AsteroidVertices
  15++E714 03 00                                DB ShipTypeJunk,0                      ; Type and Tactics
  16++E716 00                                   DB 0
  17++E717 00                                   DB $00                      ; chance of ECM module
  18++E718 00 50 00 1F  AsteroidVertices:	    DB $00, $50, $00, $1F, $FF, $FF ;01
  18++E71C FF FF
  19++E71E 50 0A 00 DF                          DB $50, $0A, $00, $DF, $FF, $FF ;02
  19++E722 FF FF
  20++E724 00 50 00 5F                          DB $00, $50, $00, $5F, $FF, $FF ;03
  20++E728 FF FF
  21++E72A 46 28 00 5F                          DB $46, $28, $00, $5F, $FF, $FF ;04
  21++E72E FF FF
  22++E730 3C 32 00 1F                          DB $3C, $32, $00, $1F, $65, $DC ;05
  22++E734 65 DC
  23++E736 32 00 3C 1F                          DB $32, $00, $3C, $1F, $FF, $FF ;06
  23++E73A FF FF
  24++E73C 28 00 46 9F                          DB $28, $00, $46, $9F, $10, $32 ;07
  24++E740 10 32
  25++E742 00 1E 4B 3F                          DB $00, $1E, $4B, $3F, $FF, $FF ;08
  25++E746 FF FF
  26++E748 00 32 3C 7F                          DB $00, $32, $3C, $7F, $98, $BA ;09
  26++E74C 98 BA
  27++E74E              AsteroidVertSize:       equ $ - AsteroidVertices
  28++E74E 1F 72 00 04  AsteroidEdges:	        DB $1F, $72, $00, $04           ;01
  29++E752 1F D6 00 10                          DB $1F, $D6, $00, $10           ;02
  30++E756 1F C5 0C 10                          DB $1F, $C5, $0C, $10           ;03
  31++E75A 1F B4 08 0C                          DB $1F, $B4, $08, $0C           ;04
  32++E75E 1F A3 04 08                          DB $1F, $A3, $04, $08           ;05
  33++E762 1F 32 04 18                          DB $1F, $32, $04, $18           ;06
  34++E766 1F 31 08 18                          DB $1F, $31, $08, $18           ;07
  35++E76A 1F 41 08 14                          DB $1F, $41, $08, $14           ;08
  36++E76E 1F 10 14 18                          DB $1F, $10, $14, $18           ;09
  37++E772 1F 60 00 14                          DB $1F, $60, $00, $14           ;10
  38++E776 1F 54 0C 14                          DB $1F, $54, $0C, $14           ;11
  39++E77A 1F 20 00 18                          DB $1F, $20, $00, $18           ;12
  40++E77E 1F 65 10 14                          DB $1F, $65, $10, $14           ;13
  41++E782 1F A8 04 20                          DB $1F, $A8, $04, $20           ;14
  42++E786 1F 87 04 1C                          DB $1F, $87, $04, $1C           ;15
  43++E78A 1F D7 00 1C                          DB $1F, $D7, $00, $1C           ;16
  44++E78E 1F DC 10 1C                          DB $1F, $DC, $10, $1C           ;17
  45++E792 1F C9 0C 1C                          DB $1F, $C9, $0C, $1C           ;18
  46++E796 1F B9 0C 20                          DB $1F, $B9, $0C, $20
  47++E79A 1F BA 08 20                          DB $1F, $BA, $08, $20
  48++E79E 1F 98 1C 20                          DB $1F, $98, $1C, $20
  49++E7A2
  50++E7A2              AsteroidEdgesSize:      equ $ - AsteroidEdges
  51++E7A2              AsteroidEdgesCnt:       equ AsteroidEdgesSize/4
  52++E7A2 1F 09 42 51  AsteroidNormals:	    DB $1F, $09, $42, $51           ;01
  53++E7A6 5F 09 42 51                          DB $5F, $09, $42, $51           ;02
  54++E7AA 9F 48 40 1F                          DB $9F, $48, $40, $1F           ;03
  55++E7AE DF 40 49 2F                          DB $DF, $40, $49, $2F           ;04
  56++E7B2 5F 2D 4F 41                          DB $5F, $2D, $4F, $41           ;05
  57++E7B6 1F 87 0F 23                          DB $1F, $87, $0F, $23           ;06
  58++E7BA 1F 26 4C 46                          DB $1F, $26, $4C, $46           ;07
  59++E7BE BF 42 3B 27                          DB $BF, $42, $3B, $27           ;08
  60++E7C2 FF 43 0F 50                          DB $FF, $43, $0F, $50           ;09
  61++E7C6 7F 42 0E 4B                          DB $7F, $42, $0E, $4B           ;10
  62++E7CA FF 46 50 28                          DB $FF, $46, $50, $28           ;11
  63++E7CE 7F 3A 66 33                          DB $7F, $3A, $66, $33           ;12
  64++E7D2 3F 51 09 43                          DB $3F, $51, $09, $43           ;13
  65++E7D6 3F 2F 5E 3F                          DB $3F, $2F, $5E, $3F           ;14
  66++E7DA              AsteroidNormalsSize:    equ $ - AsteroidNormals
  67++E7DA              AsteroidLen:            equ $ - Asteroid
  68++E7DA
  69++E7DA
# file closed: ./Data/ships/Asteroid.asm
  95+ E7DA
  96+ E7DA                                      include "Data/ships/Bushmaster.asm"
# file opened: ./Data/ships/Bushmaster.asm
   1++E7DA 00           Bushmaster:	            DB $00                          ; 00 scoop debris
   2++E7DB 9A 10                                DW $109A                        ; 01 missile lock radius
   3++E7DD 3D E8                                DW BushmasterEdges              ; 03 edge address
   4++E7DF 4C                                   DB BushmasterEdgesSize          ; 05 edge data length
   5++E7E0 00                                   DB $00                          ; 06 gun vertex
   6++E7E1 1E                                   DB $1E                          ; 07 explosion count
   7++E7E2 0C                                   DB BushmasterVertSize /6        ; 08 vertex count
   8++E7E3 48                                   DB BushmasterVertSize           ; 09 vertex data length
   9++E7E4 13                                   DB BushmasterEdgesCnt           ; 10 edge count
  10++E7E5 00 96                                DB $00, $96                     ; 11 bounty hi lo
  11++E7E7 24                                   DB BushmasterNormalsSize        ; 13 normal data length
  12++E7E8 14                                   DB $14                          ; 14 dot range
  13++E7E9 4A                                   DB $4A                          ; 15 energy
  14++E7EA 23                                   DB $23                          ; 16 speed
  15++E7EB 89 E8                                DW BushmasterNormals            ; 17 normal data address
  16++E7ED 02 21                                DB $02, $21                     ; 19 scaling factor, laser type
  17++E7EF F5 E7                                DW BushmasterVertices           ; 21 Verticies adddress
  18++E7F1 00 00                                DB 0,0                          ; 23 type, new bits
  19++E7F3 01                                   DB ShipCanAnger                 ; 25 ai flags
  20++E7F4 70                                   DB $70                          ; chance of ECM module
  21++E7F5 00 00 3C 1F  BushmasterVertices:	    DB $00, $00, $3C, $1F, $23, $01  ; 01
  21++E7F9 23 01
  22++E7FB 32 00 14 1F                          DB $32, $00, $14, $1F, $57, $13  ; 02
  22++E7FF 57 13
  23++E801 32 00 14 9F                          DB $32, $00, $14, $9F, $46, $02  ; 03
  23++E805 46 02
  24++E807 00 14 00 1F                          DB $00, $14, $00, $1F, $45, $01  ; 04
  24++E80B 45 01
  25++E80D 00 14 28 7F                          DB $00, $14, $28, $7F, $FF, $FF  ; 05
  25++E811 FF FF
  26++E813 00 0E 28 3F                          DB $00, $0E, $28, $3F, $88, $45  ; 06
  26++E817 88 45
  27++E819 28 00 28 3F                          DB $28, $00, $28, $3F, $88, $57  ; 07
  27++E81D 88 57
  28++E81F 28 00 28 BF                          DB $28, $00, $28, $BF, $88, $46  ; 08
  28++E823 88 46
  29++E825 00 04 28 2A                          DB $00, $04, $28, $2A, $88, $88  ; 09
  29++E829 88 88
  30++E82B 0A 00 28 2A                          DB $0A, $00, $28, $2A, $88, $88  ; 10
  30++E82F 88 88
  31++E831 00 04 28 6A                          DB $00, $04, $28, $6A, $88, $88  ; 11
  31++E835 88 88
  32++E837 0A 00 28 AA                          DB $0A, $00, $28, $AA, $88, $88  ; 12           ; 12 * 6 = 72
  32++E83B 88 88
  33++E83D              BushmasterVertSize:     equ $ - BushmasterVertices
  34++E83D 1F 13 00 04  BushmasterEdges:	    DB $1F, $13, $00, $04            ; 01
  35++E841 1F 02 00 08                          DB $1F, $02, $00, $08            ; 02
  36++E845 1F 01 00 0C                          DB $1F, $01, $00, $0C            ; 03
  37++E849 1F 23 00 10                          DB $1F, $23, $00, $10            ; 04
  38++E84D 1F 45 0C 14                          DB $1F, $45, $0C, $14            ; 05
  39++E851 1F 04 08 0C                          DB $1F, $04, $08, $0C            ; 06
  40++E855 1F 15 04 0C                          DB $1F, $15, $04, $0C            ; 07
  41++E859 1F 46 08 1C                          DB $1F, $46, $08, $1C            ; 08
  42++E85D 1F 57 04 18                          DB $1F, $57, $04, $18            ; 09
  43++E861 1F 26 08 10                          DB $1F, $26, $08, $10            ; 10
  44++E865 1F 37 04 10                          DB $1F, $37, $04, $10            ; 11
  45++E869 1F 48 14 1C                          DB $1F, $48, $14, $1C            ; 12
  46++E86D 1F 58 14 18                          DB $1F, $58, $14, $18            ; 13
  47++E871 1F 68 10 1C                          DB $1F, $68, $10, $1C            ; 14
  48++E875 1F 78 10 18                          DB $1F, $78, $10, $18            ; 15
  49++E879 0A 88 20 24                          DB $0A, $88, $20, $24            ; 16
  50++E87D 0A 88 24 28                          DB $0A, $88, $24, $28            ; 17
  51++E881 0A 88 28 2C                          DB $0A, $88, $28, $2C            ; 18
  52++E885 0A 88 2C 20                          DB $0A, $88, $2C, $20            ; 19           ; 19 * 4 = 76
  53++E889              BushmasterEdgesSize:    equ $ - BushmasterEdges
  54++E889              BushmasterEdgesCnt:     equ BushmasterEdgesSize/4        ;
  55++E889 9F 17 58 1D  BushmasterNormals:	    DB $9F, $17, $58, $1D            ; 01
  56++E88D 1F 17 58 1D                          DB $1F, $17, $58, $1D            ; 02
  57++E891 DF 0E 5D 12                          DB $DF, $0E, $5D, $12            ; 03
  58++E895 5F 0E 5D 12                          DB $5F, $0E, $5D, $12            ; 04
  59++E899 BF 1F 59 0D                          DB $BF, $1F, $59, $0D            ; 05
  60++E89D 3F 1F 59 0D                          DB $3F, $1F, $59, $0D            ; 06
  61++E8A1 FF 2A 55 07                          DB $FF, $2A, $55, $07            ; 07
  62++E8A5 7F 2A 55 07                          DB $7F, $2A, $55, $07            ; 08
  63++E8A9 3F 00 00 60                          DB $3F, $00, $00, $60            ; 09           ; 9 * 4 = 36
  64++E8AD              BushmasterNormalsSize:  equ $ - BushmasterNormals
  65++E8AD              BushmasterLen:          equ $ - Bushmaster
  66++E8AD
# file closed: ./Data/ships/Bushmaster.asm
  97+ E8AD                                      include "Data/ships/Chameleon.asm"
# file opened: ./Data/ships/Chameleon.asm
   1++E8AD 03           Chameleon:	            DB $03
   2++E8AE A0 0F                                DW $0FA0
   3++E8B0 34 E9                                DW ChameleonEdges
   4++E8B2 74                                   DB ChameleonEdgesSize
   5++E8B3 00 1A                                DB $00, $1A
   6++E8B5 12                                   DB ChameleonVertSize /6
   7++E8B6 6C                                   DB ChameleonVertSize
   8++E8B7 1D                                   DB ChameleonEdgesCnt
   9++E8B8 00 C8                                DB $00, $C8
  10++E8BA 34                                   DB ChameleonNormalsSize
  11++E8BB 0A 64 1D                             DB $0A, $64, $1D
  12++E8BE A8 E9                                DW ChameleonNormals
  13++E8C0 01 23                                DB $01, $23
  14++E8C2 C8 E8                                DW ChameleonVertices
  15++E8C4 00 00                                DB 0,0                      ; Type and Tactics
  16++E8C6 01                                   DB ShipCanAnger
  17++E8C7 40                                   DB $40                      ; chance of ECM module
  18++E8C8 12 00 6E 9F  ChameleonVertices:	    DB $12, $00, $6E, $9F, $25, $01
  18++E8CC 25 01
  19++E8CE 12 00 6E 1F                          DB $12, $00, $6E, $1F, $34, $01
  19++E8D2 34 01
  20++E8D4 28 00 00 9F                          DB $28, $00, $00, $9F, $8B, $25
  20++E8D8 8B 25
  21++E8DA 08 18 00 9F                          DB $08, $18, $00, $9F, $68, $22
  21++E8DE 68 22
  22++E8E0 08 18 00 1F                          DB $08, $18, $00, $1F, $69, $33
  22++E8E4 69 33
  23++E8E6 28 00 00 1F                          DB $28, $00, $00, $1F, $9A, $34
  23++E8EA 9A 34
  24++E8EC 08 18 00 5F                          DB $08, $18, $00, $5F, $7A, $44
  24++E8F0 7A 44
  25++E8F2 08 18 00 DF                          DB $08, $18, $00, $DF, $7B, $55
  25++E8F6 7B 55
  26++E8F8 00 18 28 1F                          DB $00, $18, $28, $1F, $36, $02
  26++E8FC 36 02
  27++E8FE 00 18 28 5F                          DB $00, $18, $28, $5F, $57, $14
  27++E902 57 14
  28++E904 20 00 28 BF                          DB $20, $00, $28, $BF, $BC, $88
  28++E908 BC 88
  29++E90A 00 18 28 3F                          DB $00, $18, $28, $3F, $9C, $68
  29++E90E 9C 68
  30++E910 20 00 28 3F                          DB $20, $00, $28, $3F, $AC, $99
  30++E914 AC 99
  31++E916 00 18 28 7F                          DB $00, $18, $28, $7F, $BC, $7A
  31++E91A BC 7A
  32++E91C 08 00 28 AA                          DB $08, $00, $28, $AA, $CC, $CC
  32++E920 CC CC
  33++E922 00 08 28 2A                          DB $00, $08, $28, $2A, $CC, $CC
  33++E926 CC CC
  34++E928 08 00 28 2A                          DB $08, $00, $28, $2A, $CC, $CC
  34++E92C CC CC
  35++E92E 00 08 28 6A                          DB $00, $08, $28, $6A, $CC, $CC
  35++E932 CC CC
  36++E934              ChameleonVertSize:      equ $ - ChameleonVertices
  37++E934 1F 01 00 04  ChameleonEdges:	        DB $1F, $01, $00, $04
  38++E938 1F 02 00 20                          DB $1F, $02, $00, $20
  39++E93C 1F 15 00 24                          DB $1F, $15, $00, $24
  40++E940 1F 03 04 20                          DB $1F, $03, $04, $20
  41++E944 1F 14 04 24                          DB $1F, $14, $04, $24
  42++E948 1F 34 04 14                          DB $1F, $34, $04, $14
  43++E94C 1F 25 00 08                          DB $1F, $25, $00, $08
  44++E950 1F 26 0C 20                          DB $1F, $26, $0C, $20
  45++E954 1F 36 10 20                          DB $1F, $36, $10, $20
  46++E958 1F 75 1C 24                          DB $1F, $75, $1C, $24
  47++E95C 1F 74 18 24                          DB $1F, $74, $18, $24
  48++E960 1F 39 10 14                          DB $1F, $39, $10, $14
  49++E964 1F 4A 14 18                          DB $1F, $4A, $14, $18
  50++E968 1F 28 08 0C                          DB $1F, $28, $08, $0C
  51++E96C 1F 5B 08 1C                          DB $1F, $5B, $08, $1C
  52++E970 1F 8B 08 28                          DB $1F, $8B, $08, $28
  53++E974 1F 9A 14 30                          DB $1F, $9A, $14, $30
  54++E978 1F 68 0C 2C                          DB $1F, $68, $0C, $2C
  55++E97C 1F 7B 1C 34                          DB $1F, $7B, $1C, $34
  56++E980 1F 69 10 2C                          DB $1F, $69, $10, $2C
  57++E984 1F 7A 18 34                          DB $1F, $7A, $18, $34
  58++E988 1F 8C 28 2C                          DB $1F, $8C, $28, $2C
  59++E98C 1F BC 28 34                          DB $1F, $BC, $28, $34
  60++E990 1F 9C 2C 30                          DB $1F, $9C, $2C, $30
  61++E994 1F AC 30 34                          DB $1F, $AC, $30, $34
  62++E998 0A CC 38 3C                          DB $0A, $CC, $38, $3C
  63++E99C 0A CC 3C 40                          DB $0A, $CC, $3C, $40
  64++E9A0 0A CC 40 44                          DB $0A, $CC, $40, $44
  65++E9A4 0A CC 44 38                          DB $0A, $CC, $44, $38
  66++E9A8              ChameleonEdgesSize:     equ $ - ChameleonEdges
  67++E9A8              ChameleonEdgesCnt:      equ ChameleonEdgesSize/4
  68++E9A8 1F 00 5A 1F  ChameleonNormals:	    DB $1F, $00, $5A, $1F
  69++E9AC 5F 00 5A 1F                          DB $5F, $00, $5A, $1F
  70++E9B0 9F 39 4C 0B                          DB $9F, $39, $4C, $0B
  71++E9B4 1F 39 4C 0B                          DB $1F, $39, $4C, $0B
  72++E9B8 5F 39 4C 0B                          DB $5F, $39, $4C, $0B
  73++E9BC DF 39 4C 0B                          DB $DF, $39, $4C, $0B
  74++E9C0 1F 00 60 00                          DB $1F, $00, $60, $00
  75++E9C4 5F 00 60 00                          DB $5F, $00, $60, $00
  76++E9C8 BF 39 4C 0B                          DB $BF, $39, $4C, $0B
  77++E9CC 3F 39 4C 0B                          DB $3F, $39, $4C, $0B
  78++E9D0 7F 39 4C 0B                          DB $7F, $39, $4C, $0B
  79++E9D4 FF 39 4C 0B                          DB $FF, $39, $4C, $0B
  80++E9D8 3F 00 00 60                          DB $3F, $00, $00, $60
  81++E9DC              ChameleonNormalsSize:   equ $ - ChameleonNormals
  82++E9DC              ChameleonLen:           equ $ - Chameleon
  83++E9DC
# file closed: ./Data/ships/Chameleon.asm
  98+ E9DC                                      include "Data/ships/CobraMk3.asm"
# file opened: ./Data/ships/CobraMk3.asm
   1++E9DC              ; Corrected pointers
   2++E9DC              ;                      0    1    2  3  4  5   6   7   8   9   10  11  12   13  14  15   16 17 18 19    20    21
   3++E9DC              ;					   Scp  Missile Edge  Lin Gun Exp Vtx Edg Bounty  Face              Face           Vertices
   4++E9DC              ;                      Deb  Lock    Lo Hi x4  Vtx Cnt x6  X1  lo  hi  x4   Dot Erg Spd  Lo Hi Q  Laser Lo    hi
   5++E9DC 03           CobraMk3    		    DB $03
   6++E9DD 41 23                                DW $2341
   7++E9DF 9F EA                                DW CobraMk3Edges
   8++E9E1 98                                   DB CobraMkEdgesSize
   9++E9E2 54 2A                                DB $54,$2A
  10++E9E4 1C                                   DB CobraMkVertSize /6
  11++E9E5 A8                                   DB CobraMkVertSize
  12++E9E6 26                                   DB CobraMkEdgesCnt
  13++E9E7 00 00                                DB $00,$00
  14++E9E9 34                                   DB CobraMk3NormalsSize
  15++E9EA 32 96 1C                             DB $32,$96,$1C
  16++E9ED 37 EB                                DW CobraMk3Normals
  17++E9EF 01 13                                DB $01,$13
  18++E9F1 F7 E9                                DW CobraMk3Vertices
  19++E9F3 00 00                                DB 0,0                      ; Type and Tactics
  20++E9F5 01                                   DB ShipCanAnger
  21++E9F6                                  ; missiles = 3
  22++E9F6 70                                   DB $70                      ; chance of ECM module
  23++E9F7 20 00 4C 1F  CobraMk3Vertices	    DB $20,$00,$4C,$1F,$FF,$FF
  23++E9FB FF FF
  24++E9FD 20 00 4C 9F                          DB $20,$00,$4C,$9F,$FF,$FF
  24++EA01 FF FF
  25++EA03 00 1A 18 1F                          DB $00,$1A,$18,$1F,$FF,$FF
  25++EA07 FF FF
  26++EA09 78 03 08 FF                          DB $78,$03,$08,$FF,$73,$AA
  26++EA0D 73 AA
  27++EA0F 78 03 08 7F                          DB $78,$03,$08,$7F,$84,$CC
  27++EA13 84 CC
  28++EA15 58 10 28 BF                          DB $58,$10,$28,$BF,$FF,$FF
  28++EA19 FF FF
  29++EA1B 58 10 28 3F                          DB $58,$10,$28,$3F,$FF,$FF
  29++EA1F FF FF
  30++EA21 80 08 28 7F                          DB $80,$08,$28,$7F,$98,$CC
  30++EA25 98 CC
  31++EA27 80 08 28 FF                          DB $80,$08,$28,$FF,$97,$AA
  31++EA2B 97 AA
  32++EA2D 00 1A 28 3F                          DB $00,$1A,$28,$3F,$65,$99
  32++EA31 65 99
  33++EA33 20 18 28 FF                          DB $20,$18,$28,$FF,$A9,$BB
  33++EA37 A9 BB
  34++EA39 20 18 28 7F                          DB $20,$18,$28,$7F,$B9,$CC
  34++EA3D B9 CC
  35++EA3F 24 08 28 B4                          DB $24,$08,$28,$B4,$99,$99
  35++EA43 99 99
  36++EA45 08 0C 28 B4                          DB $08,$0C,$28,$B4,$99,$99
  36++EA49 99 99
  37++EA4B 08 0C 28 34                          DB $08,$0C,$28,$34,$99,$99
  37++EA4F 99 99
  38++EA51 24 08 28 34                          DB $24,$08,$28,$34,$99,$99
  38++EA55 99 99
  39++EA57 24 0C 28 74                          DB $24,$0C,$28,$74,$99,$99
  39++EA5B 99 99
  40++EA5D 08 10 28 74                          DB $08,$10,$28,$74,$99,$99
  40++EA61 99 99
  41++EA63 08 10 28 F4                          DB $08,$10,$28,$F4,$99,$99
  41++EA67 99 99
  42++EA69 24 0C 28 F4                          DB $24,$0C,$28,$F4,$99,$99
  42++EA6D 99 99
  43++EA6F 00 00 4C 06                          DB $00,$00,$4C,$06,$B0,$BB
  43++EA73 B0 BB
  44++EA75 00 00 5A 1F                          DB $00,$00,$5A,$1F,$B0,$BB
  44++EA79 B0 BB
  45++EA7B 50 06 28 E8                          DB $50,$06,$28,$E8,$99,$99
  45++EA7F 99 99
  46++EA81 50 06 28 A8                          DB $50,$06,$28,$A8,$99,$99
  46++EA85 99 99
  47++EA87 58 00 28 A6                          DB $58,$00,$28,$A6,$99,$99
  47++EA8B 99 99
  48++EA8D 50 06 28 28                          DB $50,$06,$28,$28,$99,$99
  48++EA91 99 99
  49++EA93 58 00 28 26                          DB $58,$00,$28,$26,$99,$99
  49++EA97 99 99
  50++EA99 50 06 28 68                          DB $50,$06,$28,$68,$99,$99
  50++EA9D 99 99
  51++EA9F              CobraMkVertSize         equ $  - CobraMk3Vertices
  52++EA9F 1F B0 00 04  CobraMk3Edges		    DB $1F,$B0,$00,$04,$1F,$C4,$00,$10
  52++EAA3 1F C4 00 10
  53++EAA7 1F A3 04 0C                          DB $1F,$A3,$04,$0C,$1F,$A7,$0C,$20
  53++EAAB 1F A7 0C 20
  54++EAAF 1F C8 10 1C                          DB $1F,$C8,$10,$1C,$1F,$98,$18,$1C
  54++EAB3 1F 98 18 1C
  55++EAB7 1F 96 18 24                          DB $1F,$96,$18,$24,$1F,$95,$14,$24
  55++EABB 1F 95 14 24
  56++EABF 1F 97 14 20                          DB $1F,$97,$14,$20,$1F,$51,$08,$14
  56++EAC3 1F 51 08 14
  57++EAC7 1F 62 08 18                          DB $1F,$62,$08,$18,$1F,$73,$0C,$14
  57++EACB 1F 73 0C 14
  58++EACF 1F 84 10 18                          DB $1F,$84,$10,$18,$1F,$10,$04,$08
  58++EAD3 1F 10 04 08
  59++EAD7 1F 20 00 08                          DB $1F,$20,$00,$08,$1F,$A9,$20,$28
  59++EADB 1F A9 20 28
  60++EADF 1F B9 28 2C                          DB $1F,$B9,$28,$2C,$1F,$C9,$1C,$2C
  60++EAE3 1F C9 1C 2C
  61++EAE7 1F BA 04 28                          DB $1F,$BA,$04,$28,$1F,$CB,$00,$2C
  61++EAEB 1F CB 00 2C
  62++EAEF 1D 31 04 14                          DB $1D,$31,$04,$14,$1D,$42,$00,$18
  62++EAF3 1D 42 00 18
  63++EAF7 06 B0 50 54                          DB $06,$B0,$50,$54,$14,$99,$30,$34
  63++EAFB 14 99 30 34
  64++EAFF 14 99 48 4C                          DB $14,$99,$48,$4C,$14,$99,$38,$3C
  64++EB03 14 99 38 3C
  65++EB07 14 99 40 44                          DB $14,$99,$40,$44,$13,$99,$3C,$40
  65++EB0B 13 99 3C 40
  66++EB0F 11 99 38 44                          DB $11,$99,$38,$44,$13,$99,$34,$48
  66++EB13 13 99 34 48
  67++EB17 13 99 30 4C                          DB $13,$99,$30,$4C,$1E,$65,$08,$24
  67++EB1B 1E 65 08 24
  68++EB1F 06 99 58 60                          DB $06,$99,$58,$60,$06,$99,$5C,$60
  68++EB23 06 99 5C 60
  69++EB27 08 99 58 5C                          DB $08,$99,$58,$5C,$06,$99,$64,$68
  69++EB2B 06 99 64 68
  70++EB2F 06 99 68 6C                          DB $06,$99,$68,$6C,$08,$99,$64,$6C
  70++EB33 08 99 64 6C
  71++EB37              CobraMkEdgesSize        equ $  - CobraMk3Edges
  72++EB37              CobraMkEdgesCnt         equ CobraMkEdgesSize/4
  73++EB37              ; start normals #0 = top f,$on,$ p,$at,$ o,$ C,$br,$ Mk III
  74++EB37 1F 00 3E 1F  CobraMk3Normals		    DB $1F,$00,$3E,$1F
  75++EB3B 9F 12 37 10                          DB $9F,$12,$37,$10
  76++EB3F 1F 12 37 10                          DB $1F,$12,$37,$10
  77++EB43 9F 10 34 0E                          DB $9F,$10,$34,$0E
  78++EB47 1F 10 34 0E                          DB $1F,$10,$34,$0E
  79++EB4B 9F 0E 2F 00                          DB $9F,$0E,$2F,$00
  80++EB4F 1F 0E 2F 00                          DB $1F,$0E,$2F,$00
  81++EB53 9F 3D 66 00                          DB $9F,$3D,$66,$00
  82++EB57 1F 3D 66 00                          DB $1F,$3D,$66,$00
  83++EB5B 3F 00 00 50                          DB $3F,$00,$00,$50
  84++EB5F DF 07 2A 09                          DB $DF,$07,$2A,$09
  85++EB63 5F 00 1E 06                          DB $5F,$00,$1E,$06
  86++EB67 5F 07 2A 09                          DB $5F,$07,$2A,$09 		;end of Cobra Mk III
  87++EB6B              CobraMk3NormalsSize     equ $  - CobraMk3Normals
  88++EB6B              CobraMk3Len             equ $  - CobraMk3
  89++EB6B
# file closed: ./Data/ships/CobraMk3.asm
  99+ EB6B                                      include "Data/ships/Cobra_Mk_1.asm"
# file opened: ./Data/ships/Cobra_Mk_1.asm
   1++EB6B 03           Cobra_Mk_1:	            DB $03
   2++EB6C 49 26                                DW $2649
   3++EB6E C8 EB                                DW Cobra_Mk_1Edges
   4++EB70 48                                   DB Cobra_Mk_1EdgesSize
   5++EB71 28 1A                                DB $28, $1A
   6++EB73 0B                                   DB Cobra_Mk_1VertSize /6
   7++EB74 42                                   DB Cobra_Mk_1VertSize
   8++EB75 12                                   DB Cobra_Mk_1EdgesCnt
   9++EB76 00 4B                                DB $00, $4B
  10++EB78 28                                   DB Cobra_Mk_1NormalsSize
  11++EB79 13 51 1A                             DB $13, $51, $1A
  12++EB7C 10 EC                                DW Cobra_Mk_1Normals
  13++EB7E 02 22                                DB $02, $22
  14++EB80 86 EB                                DW Cobra_Mk_1Vertices
  15++EB82 00 00                                DB 0,0                      ; Type and Tactics
  16++EB84 01                                   DB ShipCanAnger
  17++EB85 30                                   DB $30                      ; chance of ECM module
  18++EB86 12 01 32 DF  Cobra_Mk_1Vertices:	    DB $12, $01, $32, $DF, $01, $23
  18++EB8A 01 23
  19++EB8C 12 01 32 5F                          DB $12, $01, $32, $5F, $01, $45
  19++EB90 01 45
  20++EB92 42 00 07 9F                          DB $42, $00, $07, $9F, $23, $88
  20++EB96 23 88
  21++EB98 42 00 07 1F                          DB $42, $00, $07, $1F, $45, $99
  21++EB9C 45 99
  22++EB9E 20 0C 26 BF                          DB $20, $0C, $26, $BF, $26, $78
  22++EBA2 26 78
  23++EBA4 20 0C 26 3F                          DB $20, $0C, $26, $3F, $46, $79
  23++EBA8 46 79
  24++EBAA 36 0C 26 FF                          DB $36, $0C, $26, $FF, $13, $78
  24++EBAE 13 78
  25++EBB0 36 0C 26 7F                          DB $36, $0C, $26, $7F, $15, $79
  25++EBB4 15 79
  26++EBB6 00 0C 06 34                          DB $00, $0C, $06, $34, $02, $46
  26++EBBA 02 46
  27++EBBC 00 01 32 42                          DB $00, $01, $32, $42, $01, $11
  27++EBC0 01 11
  28++EBC2 00 01 3C 5F                          DB $00, $01, $3C, $5F, $01, $11
  28++EBC6 01 11
  29++EBC8              Cobra_Mk_1VertSize:     equ $ - Cobra_Mk_1Vertices
  30++EBC8 1F 01 04 00  Cobra_Mk_1Edges:	    DB $1F, $01, $04, $00
  31++EBCC 1F 23 00 08                          DB $1F, $23, $00, $08
  32++EBD0 1F 38 08 18                          DB $1F, $38, $08, $18
  33++EBD4 1F 17 18 1C                          DB $1F, $17, $18, $1C
  34++EBD8 1F 59 1C 0C                          DB $1F, $59, $1C, $0C
  35++EBDC 1F 45 0C 04                          DB $1F, $45, $0C, $04
  36++EBE0 1F 28 08 10                          DB $1F, $28, $08, $10
  37++EBE4 1F 67 10 14                          DB $1F, $67, $10, $14
  38++EBE8 1F 49 14 0C                          DB $1F, $49, $14, $0C
  39++EBEC 14 02 00 20                          DB $14, $02, $00, $20
  40++EBF0 14 04 20 04                          DB $14, $04, $20, $04
  41++EBF4 10 26 10 20                          DB $10, $26, $10, $20
  42++EBF8 10 46 20 14                          DB $10, $46, $20, $14
  43++EBFC 1F 78 10 18                          DB $1F, $78, $10, $18
  44++EC00 1F 79 14 1C                          DB $1F, $79, $14, $1C
  45++EC04 14 13 00 18                          DB $14, $13, $00, $18
  46++EC08 14 15 04 1C                          DB $14, $15, $04, $1C
  47++EC0C 02 01 28 24                          DB $02, $01, $28, $24
  48++EC10              Cobra_Mk_1EdgesSize:    equ $ - Cobra_Mk_1Edges
  49++EC10              Cobra_Mk_1EdgesCnt:     equ Cobra_Mk_1EdgesSize/4
  50++EC10 1F 00 29 0A  Cobra_Mk_1Normals:	    DB $1F, $00, $29, $0A
  51++EC14 5F 00 1B 03                          DB $5F, $00, $1B, $03
  52++EC18 9F 08 2E 08                          DB $9F, $08, $2E, $08
  53++EC1C DF 0C 39 0C                          DB $DF, $0C, $39, $0C
  54++EC20 1F 08 2E 08                          DB $1F, $08, $2E, $08
  55++EC24 5F 0C 39 0C                          DB $5F, $0C, $39, $0C
  56++EC28 1F 00 31 00                          DB $1F, $00, $31, $00
  57++EC2C 3F 00 00 9A                          DB $3F, $00, $00, $9A
  58++EC30 BF 79 6F 3E                          DB $BF, $79, $6F, $3E
  59++EC34 3F 79 6F 3E                          DB $3F, $79, $6F, $3E
  60++EC38              Cobra_Mk_1NormalsSize:  equ $ - Cobra_Mk_1Normals
  61++EC38              Cobra_Mk_1Len:          equ $ - Cobra_Mk_1
  62++EC38
# file closed: ./Data/ships/Cobra_Mk_1.asm
 100+ EC38                                      include "Data/ships/Cobra_Mk_3_P.asm"
# file opened: ./Data/ships/Cobra_Mk_3_P.asm
   1++EC38 01           Cobra_Mk_3_P:	        DB $01
   2++EC39 41 23                                DW $2341
   3++EC3B FB EC                                DW Cobra_Mk_3_PEdges
   4++EC3D 98                                   DB Cobra_Mk_3_PEdgesSize
   5++EC3E 54 2A                                DB $54, $2A
   6++EC40 1C                                   DB Cobra_Mk_3_PVertSize /6
   7++EC41 A8                                   DB Cobra_Mk_3_PVertSize
   8++EC42 26                                   DB Cobra_Mk_3_PEdgesCnt
   9++EC43 00 AF                                DB $00, $AF
  10++EC45 34                                   DB Cobra_Mk_3_PNormalsSize
  11++EC46 32 96 1C                             DB $32, $96, $1C
  12++EC49 93 ED                                DW Cobra_Mk_3_PNormals
  13++EC4B 01 12                                DB $01, $12
  14++EC4D 53 EC                                DW Cobra_Mk_3_PVertices
  15++EC4F 00 00                                DB 0,0                      ; Type and Tactics
  16++EC51 01                                   DB ShipCanAnger
  17++EC52 90                                   DB $90                      ; chance of ECM module
  18++EC53 20 00 4C 1F  Cobra_Mk_3_PVertices:	DB $20, $00, $4C, $1F, $FF, $FF
  18++EC57 FF FF
  19++EC59 20 00 4C 9F                          DB $20, $00, $4C, $9F, $FF, $FF
  19++EC5D FF FF
  20++EC5F 00 1A 18 1F                          DB $00, $1A, $18, $1F, $FF, $FF
  20++EC63 FF FF
  21++EC65 78 03 08 FF                          DB $78, $03, $08, $FF, $73, $AA
  21++EC69 73 AA
  22++EC6B 78 03 08 7F                          DB $78, $03, $08, $7F, $84, $CC
  22++EC6F 84 CC
  23++EC71 58 10 28 BF                          DB $58, $10, $28, $BF, $FF, $FF
  23++EC75 FF FF
  24++EC77 58 10 28 3F                          DB $58, $10, $28, $3F, $FF, $FF
  24++EC7B FF FF
  25++EC7D 80 08 28 7F                          DB $80, $08, $28, $7F, $98, $CC
  25++EC81 98 CC
  26++EC83 80 08 28 FF                          DB $80, $08, $28, $FF, $97, $AA
  26++EC87 97 AA
  27++EC89 00 1A 28 3F                          DB $00, $1A, $28, $3F, $65, $99
  27++EC8D 65 99
  28++EC8F 20 18 28 FF                          DB $20, $18, $28, $FF, $A9, $BB
  28++EC93 A9 BB
  29++EC95 20 18 28 7F                          DB $20, $18, $28, $7F, $B9, $CC
  29++EC99 B9 CC
  30++EC9B 24 08 28 B4                          DB $24, $08, $28, $B4, $99, $99
  30++EC9F 99 99
  31++ECA1 08 0C 28 B4                          DB $08, $0C, $28, $B4, $99, $99
  31++ECA5 99 99
  32++ECA7 08 0C 28 34                          DB $08, $0C, $28, $34, $99, $99
  32++ECAB 99 99
  33++ECAD 24 08 28 34                          DB $24, $08, $28, $34, $99, $99
  33++ECB1 99 99
  34++ECB3 24 0C 28 74                          DB $24, $0C, $28, $74, $99, $99
  34++ECB7 99 99
  35++ECB9 08 10 28 74                          DB $08, $10, $28, $74, $99, $99
  35++ECBD 99 99
  36++ECBF 08 10 28 F4                          DB $08, $10, $28, $F4, $99, $99
  36++ECC3 99 99
  37++ECC5 24 0C 28 F4                          DB $24, $0C, $28, $F4, $99, $99
  37++ECC9 99 99
  38++ECCB 00 00 4C 06                          DB $00, $00, $4C, $06, $B0, $BB
  38++ECCF B0 BB
  39++ECD1 00 00 5A 1F                          DB $00, $00, $5A, $1F, $B0, $BB
  39++ECD5 B0 BB
  40++ECD7 50 06 28 E8                          DB $50, $06, $28, $E8, $99, $99
  40++ECDB 99 99
  41++ECDD 50 06 28 A8                          DB $50, $06, $28, $A8, $99, $99
  41++ECE1 99 99
  42++ECE3 58 00 28 A6                          DB $58, $00, $28, $A6, $99, $99
  42++ECE7 99 99
  43++ECE9 50 06 28 28                          DB $50, $06, $28, $28, $99, $99
  43++ECED 99 99
  44++ECEF 58 00 28 26                          DB $58, $00, $28, $26, $99, $99
  44++ECF3 99 99
  45++ECF5 50 06 28 68                          DB $50, $06, $28, $68, $99, $99
  45++ECF9 99 99
  46++ECFB              Cobra_Mk_3_PVertSize:   equ $ - Cobra_Mk_3_PVertices
  47++ECFB 1F B0 00 04  Cobra_Mk_3_PEdges:	    DB $1F, $B0, $00, $04
  48++ECFF 1F C4 00 10                          DB $1F, $C4, $00, $10
  49++ED03 1F A3 04 0C                          DB $1F, $A3, $04, $0C
  50++ED07 1F A7 0C 20                          DB $1F, $A7, $0C, $20
  51++ED0B 1F C8 10 1C                          DB $1F, $C8, $10, $1C
  52++ED0F 1F 98 18 1C                          DB $1F, $98, $18, $1C
  53++ED13 1F 96 18 24                          DB $1F, $96, $18, $24
  54++ED17 1F 95 14 24                          DB $1F, $95, $14, $24
  55++ED1B 1F 97 14 20                          DB $1F, $97, $14, $20
  56++ED1F 1F 51 08 14                          DB $1F, $51, $08, $14
  57++ED23 1F 62 08 18                          DB $1F, $62, $08, $18
  58++ED27 1F 73 0C 14                          DB $1F, $73, $0C, $14
  59++ED2B 1F 84 10 18                          DB $1F, $84, $10, $18
  60++ED2F 1F 10 04 08                          DB $1F, $10, $04, $08
  61++ED33 1F 20 00 08                          DB $1F, $20, $00, $08
  62++ED37 1F A9 20 28                          DB $1F, $A9, $20, $28
  63++ED3B 1F B9 28 2C                          DB $1F, $B9, $28, $2C
  64++ED3F 1F C9 1C 2C                          DB $1F, $C9, $1C, $2C
  65++ED43 1F BA 04 28                          DB $1F, $BA, $04, $28
  66++ED47 1F CB 00 2C                          DB $1F, $CB, $00, $2C
  67++ED4B 1D 31 04 14                          DB $1D, $31, $04, $14
  68++ED4F 1D 42 00 18                          DB $1D, $42, $00, $18
  69++ED53 06 B0 50 54                          DB $06, $B0, $50, $54
  70++ED57 14 99 30 34                          DB $14, $99, $30, $34
  71++ED5B 14 99 48 4C                          DB $14, $99, $48, $4C
  72++ED5F 14 99 38 3C                          DB $14, $99, $38, $3C
  73++ED63 14 99 40 44                          DB $14, $99, $40, $44
  74++ED67 13 99 3C 40                          DB $13, $99, $3C, $40
  75++ED6B 11 99 38 44                          DB $11, $99, $38, $44
  76++ED6F 13 99 34 48                          DB $13, $99, $34, $48
  77++ED73 13 99 30 4C                          DB $13, $99, $30, $4C
  78++ED77 1E 65 08 24                          DB $1E, $65, $08, $24
  79++ED7B 06 99 58 60                          DB $06, $99, $58, $60
  80++ED7F 06 99 5C 60                          DB $06, $99, $5C, $60
  81++ED83 08 99 58 5C                          DB $08, $99, $58, $5C
  82++ED87 06 99 64 68                          DB $06, $99, $64, $68
  83++ED8B 06 99 68 6C                          DB $06, $99, $68, $6C
  84++ED8F 08 99 64 6C                          DB $08, $99, $64, $6C
  85++ED93              Cobra_Mk_3_PEdgesSize:  equ $ - Cobra_Mk_3_PEdges
  86++ED93              Cobra_Mk_3_PEdgesCnt:   equ Cobra_Mk_3_PEdgesSize/4
  87++ED93 1F 00 3E 1F  Cobra_Mk_3_PNormals:	DB $1F, $00, $3E, $1F
  88++ED97 9F 12 37 10                          DB $9F, $12, $37, $10
  89++ED9B 1F 12 37 10                          DB $1F, $12, $37, $10
  90++ED9F 9F 10 34 0E                          DB $9F, $10, $34, $0E
  91++EDA3 1F 10 34 0E                          DB $1F, $10, $34, $0E
  92++EDA7 9F 0E 2F 00                          DB $9F, $0E, $2F, $00
  93++EDAB 1F 0E 2F 00                          DB $1F, $0E, $2F, $00
  94++EDAF 9F 3D 66 00                          DB $9F, $3D, $66, $00
  95++EDB3 1F 3D 66 00                          DB $1F, $3D, $66, $00
  96++EDB7 3F 00 00 50                          DB $3F, $00, $00, $50
  97++EDBB DF 07 2A 09                          DB $DF, $07, $2A, $09
  98++EDBF 5F 00 1E 06                          DB $5F, $00, $1E, $06
  99++EDC3 5F 07 2A 09                          DB $5F, $07, $2A, $09
 100++EDC7              Cobra_Mk_3_PNormalsSize:equ $ - Cobra_Mk_3_PNormals
 101++EDC7              Cobra_Mk_3_PLen:        equ $ - Cobra_Mk_3_P
 102++EDC7
# file closed: ./Data/ships/Cobra_Mk_3_P.asm
 101+ EDC7                                      include "Data/ships/Constrictor.asm"
# file opened: ./Data/ships/Constrictor.asm
   1++EDC7              ;                      0    1    2    3   4   5   6   7   8   9   10  11  12  13  14  15   16                    17                  18  19     20                     21
   2++EDC7              ;					   Scp  Missile   Edg Edg Lin Gun Exp Vtx Edg Bounty  Face             Edg                   Face                           Vertices
   3++EDC7              ;                      Deb  Lock      Lo  Hi  x4  Vtx Cnt x6  X1  lo  hi  x4  Dot Erg Spd  hi                    Hi                  Q   Laser  Lo                     hi
   4++EDC7 F3           Constrictor:    	    DB $F3
   5++EDC8 49 26                                DW $2649
   6++EDCA 48 EE                                DW ConstrictorEdges
   7++EDCC 60                                   DB ConstrictorEdgesSize
   8++EDCD 00 2E                                DB $00,$2E
   9++EDCF 11                                   DB ConstrictorVertSize /6
  10++EDD0 66                                   DB ConstrictorVertSize
  11++EDD1 18                                   DB ConstrictorEdgesCnt
  12++EDD2 18 00                                DB $18,$00
  13++EDD4 28                                   DB ConstrictorNormalsSize
  14++EDD5 2D C8 37                             DB $2D,$C8,$37
  15++EDD8 A8 EE                                DW ConstrictorNormals
  16++EDDA 02 2F                                DB $02,$2F
  17++EDDC E2 ED                                DW ConstrictorVertices
  18++EDDE 00 00                                DB 0,0                      ; Type and Tactics
  19++EDE0                                  ; missiles = 3
  20++EDE0 01                                   DB ShipCanAnger
  21++EDE1 FF                                   DB $FF                      ; chance of ECM module
  22++EDE2 14 07 50 5F  ConstrictorVertices     DB $14, $07, $50, $5F, $02, $99
  22++EDE6 02 99
  23++EDE8 14 07 50 DF                          DB $14, $07, $50, $DF, $01, $99
  23++EDEC 01 99
  24++EDEE 36 07 28 DF                          DB $36, $07, $28, $DF, $14, $99
  24++EDF2 14 99
  25++EDF4 36 07 28 FF                          DB $36, $07, $28, $FF, $45, $89
  25++EDF8 45 89
  26++EDFA 14 0D 28 BF                          DB $14, $0D, $28, $BF, $56, $88
  26++EDFE 56 88
  27++EE00 14 0D 28 3F                          DB $14, $0D, $28, $3F, $67, $88
  27++EE04 67 88
  28++EE06 36 07 28 7F                          DB $36, $07, $28, $7F, $37, $89
  28++EE0A 37 89
  29++EE0C 36 07 28 5F                          DB $36, $07, $28, $5F, $23, $99
  29++EE10 23 99
  30++EE12 14 0D 05 1F                          DB $14, $0D, $05, $1F, $FF, $FF
  30++EE16 FF FF
  31++EE18 14 0D 05 9F                          DB $14, $0D, $05, $9F, $FF, $FF
  31++EE1C FF FF
  32++EE1E 14 07 3E 52                          DB $14, $07, $3E, $52, $99, $99
  32++EE22 99 99
  33++EE24 14 07 3E D2                          DB $14, $07, $3E, $D2, $99, $99
  33++EE28 99 99
  34++EE2A 19 07 19 72                          DB $19, $07, $19, $72, $99, $99
  34++EE2E 99 99
  35++EE30 19 07 19 F2                          DB $19, $07, $19, $F2, $99, $99
  35++EE34 99 99
  36++EE36 0F 07 0F 6A                          DB $0F, $07, $0F, $6A, $99, $99
  36++EE3A 99 99
  37++EE3C 0F 07 0F EA                          DB $0F, $07, $0F, $EA, $99, $99
  37++EE40 99 99
  38++EE42 00 07 00 40                          DB $00, $07, $00, $40, $9F, $01
  38++EE46 9F 01
  39++EE48              ConstrictorVertSize     equ $  - ConstrictorVertices
  40++EE48 1F 09 00 04  ConstrictorEdges        DB $1F, $09, $00, $04, $1F, $19, $04, $08
  40++EE4C 1F 19 04 08
  41++EE50 1F 01 04 24                          DB $1F, $01, $04, $24, $1F, $02, $00, $20
  41++EE54 1F 02 00 20
  42++EE58 1F 29 00 1C                          DB $1F, $29, $00, $1C, $1F, $23, $1C, $20
  42++EE5C 1F 23 1C 20
  43++EE60 1F 14 08 24                          DB $1F, $14, $08, $24, $1F, $49, $08, $0C
  43++EE64 1F 49 08 0C
  44++EE68 1F 39 18 1C                          DB $1F, $39, $18, $1C, $1F, $37, $18, $20
  44++EE6C 1F 37 18 20
  45++EE70 1F 67 14 20                          DB $1F, $67, $14, $20, $1F, $56, $10, $24
  45++EE74 1F 56 10 24
  46++EE78 1F 45 0C 24                          DB $1F, $45, $0C, $24, $1F, $58, $0C, $10
  46++EE7C 1F 58 0C 10
  47++EE80 1F 68 10 14                          DB $1F, $68, $10, $14, $1F, $78, $14, $18
  47++EE84 1F 78 14 18
  48++EE88 1F 89 0C 18                          DB $1F, $89, $0C, $18, $1F, $06, $20, $24
  48++EE8C 1F 06 20 24
  49++EE90 12 99 28 30                          DB $12, $99, $28, $30, $05, $99, $30, $38
  49++EE94 05 99 30 38
  50++EE98 0A 99 38 28                          DB $0A, $99, $38, $28, $0A, $99, $2C, $3C
  50++EE9C 0A 99 2C 3C
  51++EEA0 05 99 34 3C                          DB $05, $99, $34, $3C, $12, $99, $2C, $34
  51++EEA4 12 99 2C 34
  52++EEA8              ConstrictorEdgesSize    equ $  - ConstrictorEdges
  53++EEA8              ConstrictorEdgesCnt     equ ConstrictorEdgesSize/4
  54++EEA8 1F 00 37 0F  ConstrictorNormals      DB $1F, $00, $37, $0F, $9F, $18, $4B, $14
  54++EEAC 9F 18 4B 14
  55++EEB0 1F 18 4B 14                          DB $1F, $18, $4B, $14, $1F, $2C, $4B, $00
  55++EEB4 1F 2C 4B 00
  56++EEB8 9F 2C 4B 00                          DB $9F, $2C, $4B, $00, $9F, $2C, $4B, $00
  56++EEBC 9F 2C 4B 00
  57++EEC0 1F 00 35 00                          DB $1F, $00, $35, $00, $1F, $2C, $4B, $00
  57++EEC4 1F 2C 4B 00
  58++EEC8 3F 00 00 A0                          DB $3F, $00, $00, $A0, $5F, $00, $1B, $00
  58++EECC 5F 00 1B 00
  59++EED0              ConstrictorNormalsSize  equ $  - ConstrictorNormals
  60++EED0              ConstrictorLen          equ $  - Constrictor
  61++EED0
# file closed: ./Data/ships/Constrictor.asm
 102+ EED0                                      include "Data/ships/Coriolis.asm"
# file opened: ./Data/ships/Coriolis.asm
   1++EED0 00           Coriolis:	            DB $00
   2++EED1 00 64                                DW $6400
   3++EED3 4B EF                                DW CoriolisEdges
   4++EED5 70                                   DB CoriolisEdgesSize
   5++EED6 00 36                                DB $00, $36
   6++EED8 10                                   DB CoriolisVertSize /6
   7++EED9 60                                   DB CoriolisVertSize
   8++EEDA 1C                                   DB CoriolisEdgesCnt
   9++EEDB 00 00                                DB $00, $00
  10++EEDD 38                                   DB CoriolisNormalsSize
  11++EEDE 78 F0 00                             DB $78, $F0, $00
  12++EEE1 BB EF                                DW CoriolisNormals
  13++EEE3 00 06                                DB $00, $06
  14++EEE5 EB EE                                DW CoriolisVertices
  15++EEE7 02 00                                DB ShipTypeStation,0                        ; Type and Tactics
  16++EEE9 00                                   DB 0                                        ; can't anger arbitrarily needs to see innocent bystander shot
  17++EEEA FF                                   DB $FF                                      ; will always have ECM
  18++EEEB A0 00 A0 1F  CoriolisVertices:	    DB $A0, $00, $A0, $1F, $10, $62
  18++EEEF 10 62
  19++EEF1 00 A0 A0 1F                          DB $00, $A0, $A0, $1F, $20, $83
  19++EEF5 20 83
  20++EEF7 A0 00 A0 9F                          DB $A0, $00, $A0, $9F, $30, $74
  20++EEFB 30 74
  21++EEFD 00 A0 A0 5F                          DB $00, $A0, $A0, $5F, $10, $54
  21++EF01 10 54
  22++EF03 A0 A0 00 5F                          DB $A0, $A0, $00, $5F, $51, $A6
  22++EF07 51 A6
  23++EF09 A0 A0 00 1F                          DB $A0, $A0, $00, $1F, $62, $B8
  23++EF0D 62 B8
  24++EF0F A0 A0 00 9F                          DB $A0, $A0, $00, $9F, $73, $C8
  24++EF13 73 C8
  25++EF15 A0 A0 00 DF                          DB $A0, $A0, $00, $DF, $54, $97
  25++EF19 54 97
  26++EF1B A0 00 A0 3F                          DB $A0, $00, $A0, $3F, $A6, $DB
  26++EF1F A6 DB
  27++EF21 00 A0 A0 3F                          DB $00, $A0, $A0, $3F, $B8, $DC
  27++EF25 B8 DC
  28++EF27 A0 00 A0 BF                          DB $A0, $00, $A0, $BF, $97, $DC
  28++EF2B 97 DC
  29++EF2D 00 A0 A0 7F                          DB $00, $A0, $A0, $7F, $95, $DA
  29++EF31 95 DA
  30++EF33 0A 1E A0 5E                          DB $0A, $1E, $A0, $5E, $00, $00
  30++EF37 00 00
  31++EF39 0A 1E A0 1E                          DB $0A, $1E, $A0, $1E, $00, $00
  31++EF3D 00 00
  32++EF3F 0A 1E A0 9E                          DB $0A, $1E, $A0, $9E, $00, $00
  32++EF43 00 00
  33++EF45 0A 1E A0 DE                          DB $0A, $1E, $A0, $DE, $00, $00
  33++EF49 00 00
  34++EF4B              CoriolisVertSize:       equ $ - CoriolisVertices
  35++EF4B 1F 10 00 0C  CoriolisEdges:	        DB $1F, $10, $00, $0C
  36++EF4F 1F 20 00 04                          DB $1F, $20, $00, $04
  37++EF53 1F 30 04 08                          DB $1F, $30, $04, $08
  38++EF57 1F 40 08 0C                          DB $1F, $40, $08, $0C
  39++EF5B 1F 51 0C 10                          DB $1F, $51, $0C, $10
  40++EF5F 1F 61 00 10                          DB $1F, $61, $00, $10
  41++EF63 1F 62 00 14                          DB $1F, $62, $00, $14
  42++EF67 1F 82 14 04                          DB $1F, $82, $14, $04
  43++EF6B 1F 83 04 18                          DB $1F, $83, $04, $18
  44++EF6F 1F 73 08 18                          DB $1F, $73, $08, $18
  45++EF73 1F 74 08 1C                          DB $1F, $74, $08, $1C
  46++EF77 1F 54 0C 1C                          DB $1F, $54, $0C, $1C
  47++EF7B 1F DA 20 2C                          DB $1F, $DA, $20, $2C
  48++EF7F 1F DB 20 24                          DB $1F, $DB, $20, $24
  49++EF83 1F DC 24 28                          DB $1F, $DC, $24, $28
  50++EF87 1F D9 28 2C                          DB $1F, $D9, $28, $2C
  51++EF8B 1F A5 10 2C                          DB $1F, $A5, $10, $2C
  52++EF8F 1F A6 10 20                          DB $1F, $A6, $10, $20
  53++EF93 1F B6 14 20                          DB $1F, $B6, $14, $20
  54++EF97 1F B8 14 24                          DB $1F, $B8, $14, $24
  55++EF9B 1F C8 18 24                          DB $1F, $C8, $18, $24
  56++EF9F 1F C7 18 28                          DB $1F, $C7, $18, $28
  57++EFA3 1F 97 1C 28                          DB $1F, $97, $1C, $28
  58++EFA7 1F 95 1C 2C                          DB $1F, $95, $1C, $2C
  59++EFAB 1E 00 30 34                          DB $1E, $00, $30, $34
  60++EFAF 1E 00 34 38                          DB $1E, $00, $34, $38
  61++EFB3 1E 00 38 3C                          DB $1E, $00, $38, $3C
  62++EFB7 1E 00 3C 30                          DB $1E, $00, $3C, $30
  63++EFBB              CoriolisEdgesSize:      equ $ - CoriolisEdges
  64++EFBB              CoriolisEdgesCnt:       equ CoriolisEdgesSize/4
  65++EFBB 1F 00 00 A0  CoriolisNormals:	    DB $1F, $00, $00, $A0
  66++EFBF 5F 6B 6B 6B                          DB $5F, $6B, $6B, $6B
  67++EFC3 1F 6B 6B 6B                          DB $1F, $6B, $6B, $6B
  68++EFC7 9F 6B 6B 6B                          DB $9F, $6B, $6B, $6B
  69++EFCB DF 6B 6B 6B                          DB $DF, $6B, $6B, $6B
  70++EFCF 5F 00 A0 00                          DB $5F, $00, $A0, $00
  71++EFD3 1F A0 00 00                          DB $1F, $A0, $00, $00
  72++EFD7 9F A0 00 00                          DB $9F, $A0, $00, $00
  73++EFDB 1F 00 A0 00                          DB $1F, $00, $A0, $00
  74++EFDF FF 6B 6B 6B                          DB $FF, $6B, $6B, $6B
  75++EFE3 7F 6B 6B 6B                          DB $7F, $6B, $6B, $6B
  76++EFE7 3F 6B 6B 6B                          DB $3F, $6B, $6B, $6B
  77++EFEB BF 6B 6B 6B                          DB $BF, $6B, $6B, $6B
  78++EFEF 3F 00 00 A0                          DB $3F, $00, $00, $A0
  79++EFF3              CoriolisNormalsSize:    equ $ - CoriolisNormals
  80++EFF3              CoriolisLen:            equ $ - Coriolis
  81++EFF3
# file closed: ./Data/ships/Coriolis.asm
 103+ EFF3                                      include "Data/ships/Cougar.asm"
# file opened: ./Data/ships/Cougar.asm
   1++EFF3 03           Cougar:	                DB $03
   2++EFF4 24 13                                DW $1324
   3++EFF6 80 F0                                DW CougarEdges
   4++EFF8 64                                   DB CougarEdgesSize
   5++EFF9 00 2A                                DB $00, $2A
   6++EFFB 13                                   DB CougarVertSize /6
   7++EFFC 72                                   DB CougarVertSize
   8++EFFD 19                                   DB CougarEdgesCnt
   9++EFFE 00 00                                DB $00, $00
  10++F000 18                                   DB CougarNormalsSize
  11++F001 22 FC 28                             DB $22, $FC, $28
  12++F004 E4 F0                                DW CougarNormals
  13++F006 02 34                                DB $02, $34
  14++F008 0E F0                                DW CougarVertices
  15++F00A 00 00                                DB 0,0                      ; Type and Tactics
  16++F00C 01                                   DB ShipCanAnger
  17++F00D B0                                   DB $B0                      ; chance of ECM module
  18++F00E 00 05 43 1F  CougarVertices:	        DB $00, $05, $43, $1F, $02, $44
  18++F012 02 44
  19++F014 14 00 28 9F                          DB $14, $00, $28, $9F, $01, $22
  19++F018 01 22
  20++F01A 28 00 28 BF                          DB $28, $00, $28, $BF, $01, $55
  20++F01E 01 55
  21++F020 00 0E 28 3E                          DB $00, $0E, $28, $3E, $04, $55
  21++F024 04 55
  22++F026 00 0E 28 7E                          DB $00, $0E, $28, $7E, $12, $35
  22++F02A 12 35
  23++F02C 14 00 28 1F                          DB $14, $00, $28, $1F, $23, $44
  23++F030 23 44
  24++F032 28 00 28 3F                          DB $28, $00, $28, $3F, $34, $55
  24++F036 34 55
  25++F038 24 00 38 9F                          DB $24, $00, $38, $9F, $01, $11
  25++F03C 01 11
  26++F03E 3C 00 14 BF                          DB $3C, $00, $14, $BF, $01, $11
  26++F042 01 11
  27++F044 24 00 38 1F                          DB $24, $00, $38, $1F, $34, $44
  27++F048 34 44
  28++F04A 3C 00 14 3F                          DB $3C, $00, $14, $3F, $34, $44
  28++F04E 34 44
  29++F050 00 07 23 12                          DB $00, $07, $23, $12, $00, $44
  29++F054 00 44
  30++F056 00 08 19 14                          DB $00, $08, $19, $14, $00, $44
  30++F05A 00 44
  31++F05C 0C 02 2D 94                          DB $0C, $02, $2D, $94, $00, $00
  31++F060 00 00
  32++F062 0C 02 2D 14                          DB $0C, $02, $2D, $14, $44, $44
  32++F066 44 44
  33++F068 0A 06 28 B4                          DB $0A, $06, $28, $B4, $55, $55
  33++F06C 55 55
  34++F06E 0A 06 28 F4                          DB $0A, $06, $28, $F4, $55, $55
  34++F072 55 55
  35++F074 0A 06 28 74                          DB $0A, $06, $28, $74, $55, $55
  35++F078 55 55
  36++F07A 0A 06 28 34                          DB $0A, $06, $28, $34, $55, $55
  36++F07E 55 55
  37++F080              CougarVertSize:         equ $ - CougarVertices
  38++F080 1F 02 00 04  CougarEdges:	        DB $1F, $02, $00, $04
  39++F084 1F 01 04 1C                          DB $1F, $01, $04, $1C
  40++F088 1F 01 1C 20                          DB $1F, $01, $1C, $20
  41++F08C 1F 01 20 08                          DB $1F, $01, $20, $08
  42++F090 1E 05 08 0C                          DB $1E, $05, $08, $0C
  43++F094 1E 45 0C 18                          DB $1E, $45, $0C, $18
  44++F098 1E 15 08 10                          DB $1E, $15, $08, $10
  45++F09C 1E 35 10 18                          DB $1E, $35, $10, $18
  46++F0A0 1F 34 18 28                          DB $1F, $34, $18, $28
  47++F0A4 1F 34 28 24                          DB $1F, $34, $28, $24
  48++F0A8 1F 34 24 14                          DB $1F, $34, $24, $14
  49++F0AC 1F 24 14 00                          DB $1F, $24, $14, $00
  50++F0B0 1B 04 00 0C                          DB $1B, $04, $00, $0C
  51++F0B4 1B 12 04 10                          DB $1B, $12, $04, $10
  52++F0B8 1B 23 14 10                          DB $1B, $23, $14, $10
  53++F0BC 1A 01 04 08                          DB $1A, $01, $04, $08
  54++F0C0 1A 34 14 18                          DB $1A, $34, $14, $18
  55++F0C4 14 00 30 34                          DB $14, $00, $30, $34
  56++F0C8 12 00 34 2C                          DB $12, $00, $34, $2C
  57++F0CC 12 44 2C 38                          DB $12, $44, $2C, $38
  58++F0D0 14 44 38 30                          DB $14, $44, $38, $30
  59++F0D4 12 55 3C 40                          DB $12, $55, $3C, $40
  60++F0D8 14 55 40 48                          DB $14, $55, $40, $48
  61++F0DC 12 55 48 44                          DB $12, $55, $48, $44
  62++F0E0 14 55 44 3C                          DB $14, $55, $44, $3C
  63++F0E4              CougarEdgesSize:        equ $ - CougarEdges
  64++F0E4              CougarEdgesCnt:         equ CougarEdgesSize/4
  65++F0E4 9F 10 2E 04  CougarNormals:	        DB $9F, $10, $2E, $04
  66++F0E8 DF 10 2E 04                          DB $DF, $10, $2E, $04
  67++F0EC 5F 00 1B 05                          DB $5F, $00, $1B, $05
  68++F0F0 5F 10 2E 04                          DB $5F, $10, $2E, $04
  69++F0F4 1F 10 2E 04                          DB $1F, $10, $2E, $04
  70++F0F8 3E 00 00 A0                          DB $3E, $00, $00, $A0
  71++F0FC              CougarNormalsSize:      equ $ - CougarNormals
  72++F0FC              CougarLen:              equ $ - Cougar
  73++F0FC
# file closed: ./Data/ships/Cougar.asm
 104+ F0FC                                      include "Data/ships/Dodo.asm"
# file opened: ./Data/ships/Dodo.asm
   1++F0FC 00           Dodo:	                DB $00
   2++F0FD 90 7E                                DW $7E90
   3++F0FF A7 F1                                DW DodoEdges
   4++F101 88                                   DB DodoEdgesSize
   5++F102 00 36                                DB $00, $36
   6++F104 18                                   DB DodoVertSize /6
   7++F105 90                                   DB DodoVertSize
   8++F106 22                                   DB DodoEdgesCnt
   9++F107 00 00                                DB $00, $00
  10++F109 30                                   DB DodoNormalsSize
  11++F10A 7D F0 00                             DB $7D, $F0, $00
  12++F10D 2F F2                                DW DodoNormals
  13++F10F 00 00                                DB $00, $00
  14++F111 17 F1                                DW DodoVertices
  15++F113 02 00                                DB ShipTypeStation,0                      ; Type and Tactics
  16++F115 00                                   DB 0
  17++F116 FF                                   DB $FF                                      ; will always have ECM
  18++F117 00 96 C4 1F  DodoVertices:	        DB $00, $96, $C4, $1F, $01, $55
  18++F11B 01 55
  19++F11D 8F 2E C4 1F                          DB $8F, $2E, $C4, $1F, $01, $22
  19++F121 01 22
  20++F123 58 79 C4 5F                          DB $58, $79, $C4, $5F, $02, $33
  20++F127 02 33
  21++F129 58 79 C4 DF                          DB $58, $79, $C4, $DF, $03, $44
  21++F12D 03 44
  22++F12F 8F 2E C4 9F                          DB $8F, $2E, $C4, $9F, $04, $55
  22++F133 04 55
  23++F135 00 F3 2E 1F                          DB $00, $F3, $2E, $1F, $15, $66
  23++F139 15 66
  24++F13B E7 4B 2E 1F                          DB $E7, $4B, $2E, $1F, $12, $77
  24++F13F 12 77
  25++F141 8F C4 2E 5F                          DB $8F, $C4, $2E, $5F, $23, $88
  25++F145 23 88
  26++F147 8F C4 2E DF                          DB $8F, $C4, $2E, $DF, $34, $99
  26++F14B 34 99
  27++F14D E7 4B 2E 9F                          DB $E7, $4B, $2E, $9F, $45, $AA
  27++F151 45 AA
  28++F153 8F C4 2E 3F                          DB $8F, $C4, $2E, $3F, $16, $77
  28++F157 16 77
  29++F159 E7 4B 2E 7F                          DB $E7, $4B, $2E, $7F, $27, $88
  29++F15D 27 88
  30++F15F 00 F3 2E 7F                          DB $00, $F3, $2E, $7F, $38, $99
  30++F163 38 99
  31++F165 E7 4B 2E FF                          DB $E7, $4B, $2E, $FF, $49, $AA
  31++F169 49 AA
  32++F16B 8F C4 2E BF                          DB $8F, $C4, $2E, $BF, $56, $AA
  32++F16F 56 AA
  33++F171 58 79 C4 3F                          DB $58, $79, $C4, $3F, $67, $BB
  33++F175 67 BB
  34++F177 8F 2E C4 7F                          DB $8F, $2E, $C4, $7F, $78, $BB
  34++F17B 78 BB
  35++F17D 00 96 C4 7F                          DB $00, $96, $C4, $7F, $89, $BB
  35++F181 89 BB
  36++F183 8F 2E C4 FF                          DB $8F, $2E, $C4, $FF, $9A, $BB
  36++F187 9A BB
  37++F189 58 79 C4 BF                          DB $58, $79, $C4, $BF, $6A, $BB
  37++F18D 6A BB
  38++F18F 10 20 C4 9E                          DB $10, $20, $C4, $9E, $00, $00
  38++F193 00 00
  39++F195 10 20 C4 DE                          DB $10, $20, $C4, $DE, $00, $00
  39++F199 00 00
  40++F19B 10 20 C4 17                          DB $10, $20, $C4, $17, $00, $00
  40++F19F 00 00
  41++F1A1 10 20 C4 57                          DB $10, $20, $C4, $57, $00, $00
  41++F1A5 00 00
  42++F1A7              DodoVertSize:           equ $ - DodoVertices
  43++F1A7 1F 01 00 04  DodoEdges:	            DB $1F, $01, $00, $04
  44++F1AB 1F 02 04 08                          DB $1F, $02, $04, $08
  45++F1AF 1F 03 08 0C                          DB $1F, $03, $08, $0C
  46++F1B3 1F 04 0C 10                          DB $1F, $04, $0C, $10
  47++F1B7 1F 05 10 00                          DB $1F, $05, $10, $00
  48++F1BB 1F 16 14 28                          DB $1F, $16, $14, $28
  49++F1BF 1F 17 28 18                          DB $1F, $17, $28, $18
  50++F1C3 1F 27 18 2C                          DB $1F, $27, $18, $2C
  51++F1C7 1F 28 2C 1C                          DB $1F, $28, $2C, $1C
  52++F1CB 1F 38 1C 30                          DB $1F, $38, $1C, $30
  53++F1CF 1F 39 30 20                          DB $1F, $39, $30, $20
  54++F1D3 1F 49 20 34                          DB $1F, $49, $20, $34
  55++F1D7 1F 4A 34 24                          DB $1F, $4A, $34, $24
  56++F1DB 1F 5A 24 38                          DB $1F, $5A, $24, $38
  57++F1DF 1F 56 38 14                          DB $1F, $56, $38, $14
  58++F1E3 1F 7B 3C 40                          DB $1F, $7B, $3C, $40
  59++F1E7 1F 8B 40 44                          DB $1F, $8B, $40, $44
  60++F1EB 1F 9B 44 48                          DB $1F, $9B, $44, $48
  61++F1EF 1F AB 48 4C                          DB $1F, $AB, $48, $4C
  62++F1F3 1F 6B 4C 3C                          DB $1F, $6B, $4C, $3C
  63++F1F7 1F 15 00 14                          DB $1F, $15, $00, $14
  64++F1FB 1F 12 04 18                          DB $1F, $12, $04, $18
  65++F1FF 1F 23 08 1C                          DB $1F, $23, $08, $1C
  66++F203 1F 34 0C 20                          DB $1F, $34, $0C, $20
  67++F207 1F 45 10 24                          DB $1F, $45, $10, $24
  68++F20B 1F 67 28 3C                          DB $1F, $67, $28, $3C
  69++F20F 1F 78 2C 40                          DB $1F, $78, $2C, $40
  70++F213 1F 89 30 44                          DB $1F, $89, $30, $44
  71++F217 1F 9A 34 48                          DB $1F, $9A, $34, $48
  72++F21B 1F 6A 38 4C                          DB $1F, $6A, $38, $4C
  73++F21F 1E 00 50 54                          DB $1E, $00, $50, $54
  74++F223 14 00 54 5C                          DB $14, $00, $54, $5C
  75++F227 17 00 5C 58                          DB $17, $00, $5C, $58
  76++F22B 14 00 58 50                          DB $14, $00, $58, $50
  77++F22F              DodoEdgesSize:          equ $ - DodoEdges
  78++F22F              DodoEdgesCnt:           equ DodoEdgesSize/4
  79++F22F 1F 00 00 C4  DodoNormals:	        DB $1F, $00, $00, $C4
  80++F233 1F 67 8E 58                          DB $1F, $67, $8E, $58
  81++F237 5F A9 37 59                          DB $5F, $A9, $37, $59
  82++F23B 5F 00 B0 58                          DB $5F, $00, $B0, $58
  83++F23F DF A9 37 59                          DB $DF, $A9, $37, $59
  84++F243 9F 67 8E 58                          DB $9F, $67, $8E, $58
  85++F247 3F 00 B0 58                          DB $3F, $00, $B0, $58
  86++F24B 3F A9 37 59                          DB $3F, $A9, $37, $59
  87++F24F 7F 67 8E 58                          DB $7F, $67, $8E, $58
  88++F253 FF 67 8E 58                          DB $FF, $67, $8E, $58
  89++F257 BF A9 37 59                          DB $BF, $A9, $37, $59
  90++F25B 3F 00 00 C4                          DB $3F, $00, $00, $C4
  91++F25F              DodoNormalsSize:        equ $ - DodoNormals
  92++F25F              DodoLen:                equ $ - Dodo
  93++F25F
# file closed: ./Data/ships/Dodo.asm
# file closed: ./Data/ShipModelMetaData1.asm
 831  F25F              ; Bank 67  ------------------------------------------------------------------------------------------------------------------------
 832  F25F                  SLOT    ShipModelsAddr
 833  F25F                  PAGE    BankShipModels2
 834  F25F              	ORG     ShipModelsAddr, BankShipModels2
 835  E000
 836  E000                  INCLUDE "./Data/ShipBank2Label.asm"
# file opened: ./Data/ShipBank2Label.asm
   1+ E000 53 68 69 70  ShipBank2Label:         DB  "ShipBank2      "
   1+ E004 42 61 6E 6B
   1+ E008 32 20 20 20
   1+ E00C 20 20 20
   2+ E00F
# file closed: ./Data/ShipBank2Label.asm
 837  E00F              GetShipBank2Id:         MGetShipBankId ShipBankTable2
 837  E00F 06 00       >                        ld      b,0
 837  E011 4F          >                        ld      c,a                                 ; c= original ship id
 837  E012 CB 3F       >.ShiftLoop:             srl     a
 837  E014 CB 3F       >                        srl     a
 837  E016 CB 3F       >                        srl     a
 837  E018 CB 3F       >                        srl     a                                   ; divide by 16
 837  E01A 47          >                        ld      b,a                                 ; b = bank nbr
 837  E01B 79          >                        ld      a,c
 837  E01C 50          >                        ld      d,b
 837  E01D 1E 10       >                        ld      e,16
 837  E01F ED 30       >                        mul                                         ; de = 16 * bank number (max is about 15 banks)
 837  E021 93          >                        sub     e                                   ; a= actual model id now
 837  E022 50          >.SelectedBank:          ld      d,b                                 ; save current bank number
 837  E023 47          >                        ld      b,a                                 ; b = adjusted ship nbr
 837  E024 7A          >                        ld      a,d                                 ; a = bank number
 837  E025             >;.. Now b = bank and a = adjusted ship nbr
 837  E025 21 62 E0    >                        ld      hl,ShipBankTable2                        ; a= bank index
 837  E028 ED 31       >                        add     hl,a
 837  E02A ED 31       >                        add     hl,a
 837  E02C 7E          >                        ld      a,(hl)                              ; a = actual bank now
 837  E02D             >                        ClearCarryFlag
 837  E02D B7          >                        or a
 837  E02E C9          >                        ret
 838  E02F              CopyVertsToUniv2:       McopyVertsToUniverse
 838  E02F 2A 2B C3    >                        ld          hl,(VerticesAddyAddr)       ; now the pointers are in Ubnk its easy to read
 838  E032 11 31 C3    >                        ld          de,UBnkHullVerticies
 838  E035 06 00       >                        ld          b,0
 838  E037 3A 1F C3    >                        ld			a,(VertexCtX6Addr)
 838  E03A 4F          >                        ld          c,a
 838  E03B EB          >                        ex          de,hl                       ; dma transfer goes de -> hl i.e. opposite of ldir
 838  E03C CD CB 99    >                        call        memcopy_dma
 838  E03F C9          >                        ret
 839  E040              CopyEdgesToUniv2:       McopyEdgesToUniverse
 839  E040 2A 19 C3    >                        ld          hl,(EdgeAddyAddr)          ; now the pointers are in Ubnk its easy to read
 839  E043 11 21 C4    >                        ld          de,UBnkHullEdges
 839  E046 06 00       >                        ld          b,0
 839  E048 3A 1B C3    >                        ld			a,(LineX4Addr)
 839  E04B 4F          >                        ld          c,a
 839  E04C EB          >                        ex          de,hl                       ; dma transfer goes de -> hl i.e. opposite of ldir
 839  E04D CD CB 99    >                        call        memcopy_dma
 839  E050 C9          >                        ret
 840  E051              CopyNormsToUniv2:       McopyNormsToUniverse
 840  E051 2A 27 C3    >                        ld          hl,(FaceAddyAddr)          ; now the pointers are in Ubnk its easy to read
 840  E054 11 E9 C4    >                        ld          de,UBnkHullNormals
 840  E057 06 00       >                        ld          b,0
 840  E059 3A 23 C3    >                        ld          a,(FaceCtX4Addr)
 840  E05C 4F          >                        ld          c,a
 840  E05D EB          >                        ex          de,hl                       ; dma transfer goes de -> hl i.e. opposite of ldir
 840  E05E CD CB 99    >                        call        memcopy_dma
 840  E061 C9          >                        ret
 841  E062              ShipBankTable2:         MShipBankTable
 841  E062 3B 00       >                        DW      BankShipModels1
 841  E064 43 00       >                        DW      BankShipModels2
 841  E066 44 00       >                        DW      BankShipModels3
 841  E068 45 00       >                        DW      BankShipModels4
 842  E06A              CopyShipToUniverse2     MCopyShipToUniverse     BankShipModels2
 842  E06A 21 2D C0    >                        ld          hl,UBnkShipModelBank
 842  E06D 36 43       >                        ld          (hl),BankShipModels2
 842  E06F 32 2E C0    >                        ld          (UBnKShipModelNbr),a
 842  E072 21 1F E1    >.GetHullDataLength:     ld          hl,ShipModelSizeTable
 842  E075 ED 31       >                        add         hl,a
 842  E077 ED 31       >                        add         hl,a                        ; we won't multiply by 2 as GetInfo is a general purpose routines so would end up x 4
 842  E079 4E          >                        ld          c,(hl)
 842  E07A 23          >                        inc         hl
 842  E07B 46          >                        ld          b,(hl)                      ; bc now equals length of data set
 842  E07C 21 9F E0    >.GetHullDataAddress:    ld          hl,ShipModelTable
 842  E07F ED 31       >                        add         hl,a
 842  E081 ED 31       >                        add         hl,a                        ; now hl = address of ship data value
 842  E083 7E          >                        ld          a,(hl)
 842  E084 23          >                        inc         hl
 842  E085 66          >                        ld          h,(hl)
 842  E086 6F          >                        ld          l,a                         ; now hl = address of ship hull data
 842  E087 11 16 C3    >                        ld          de,UBnkHullCopy             ; Universe bank
 842  E08A 01 1B 00    >                        ld          bc,ShipDataLength
 842  E08D ED B0       >                        ldir
 842  E08F CD 2F E0    >                        call        CopyVertsToUniv
 842  E092 CD 40 E0    >                        call        CopyEdgesToUniv
 842  E095 CD 51 E0    >                        call        CopyNormsToUniv
 842  E098 C9          >                        ret
 843  E099              CopyBodyToUniverse2:    MCopyBodyToUniverse     CopyShipToUniverse2
 843  E099 3E 0D       >                        ld          a,13
 843  E09B CD 6A E0    >                        call        CopyShipToUniverse2
 843  E09E C9          >                        ret
 844  E09F
 845  E09F                  INCLUDE "./Data/ShipModelMetaData2.asm"
# file opened: ./Data/ShipModelMetaData2.asm
   1+ E09F 3F E1        ShipModelTable2:         DW Dragon                                  ;16  $10
   2+ E0A1 1C E2                                 DW Escape_Pod                              ;17  $11
   3+ E0A3 77 E2                                 DW Fer_De_Lance                            ;18  $12
   4+ E0A5 98 E3                                 DW Gecko                                   ;19  $13
   5+ E0A7 63 E4                                 DW Ghavial                                 ;20  $14
   6+ E0A9 4E E5                                 DW Iguana                                  ;21  $15
   7+ E0AB 47 E6                                 DW Krait                                   ;22  $16
   8+ E0AD 34 E7                                 DW Logo                                    ;23  $17
   9+ E0AF F3 E8                                 DW Mamba                                   ;24  $18
  10+ E0B1 28 EA                                 DW Missile                                 ;25  $19
  11+ E0B3 2D EB                                 DW Monitor                                 ;26  $1A
  12+ E0B5 36 EC                                 DW Moray                                   ;27  $1B
  13+ E0B7 15 ED                                 DW Ophidian                                ;28  $1C
  14+ E0B9 50 EE                                 DW Plate                                   ;29  $1D
  15+ E0BB 91 EE                                 DW Python                                  ;30  $1E
  16+ E0BD 8A EF                                 DW Python_P                                ;31  $1F
  17+ E0BF 5A E1        ShipVertexTable2:        DW DragonVertices                          ;16  $10
  18+ E0C1 37 E2                                 DW Escape_PodVertices                      ;17  $11
  19+ E0C3 92 E2                                 DW Fer_De_LanceVertices                    ;18  $12
  20+ E0C5 B3 E3                                 DW GeckoVertices                           ;19  $13
  21+ E0C7 7E E4                                 DW GhavialVertices                         ;20  $14
  22+ E0C9 69 E5                                 DW IguanaVertices                          ;21  $15
  23+ E0CB 62 E6                                 DW KraitVertices                           ;22  $16
  24+ E0CD 4F E7                                 DW LogoVertices                            ;23  $17
  25+ E0CF 0E E9                                 DW MambaVertices                           ;24  $18
  26+ E0D1 43 EA                                 DW MissileVertices                         ;25  $19
  27+ E0D3 48 EB                                 DW MonitorVertices                         ;26  $1A
  28+ E0D5 51 EC                                 DW MorayVertices                           ;27  $1B
  29+ E0D7 30 ED                                 DW OphidianVertices                        ;28  $1C
  30+ E0D9 6B EE                                 DW PlateVertices                           ;29  $1D
  31+ E0DB AC EE                                 DW PythonVertices                          ;30  $1E
  32+ E0DD A5 EF                                 DW Python_PVertices                        ;31  $1F
  33+ E0DF 90 E1        ShipEdgeTable2:          DW DragonEdges                             ;16  $10
  34+ E0E1 4F E2                                 DW Escape_PodEdges                         ;17  $11
  35+ E0E3 04 E3                                 DW Fer_De_LanceEdges                       ;18  $12
  36+ E0E5 FB E3                                 DW GeckoEdges                              ;19  $13
  37+ E0E7 C6 E4                                 DW GhavialEdges                            ;20  $14
  38+ E0E9 C3 E5                                 DW IguanaEdges                             ;21  $15
  39+ E0EB C8 E6                                 DW KraitEdges                              ;22  $16
  40+ E0ED 4B E8                                 DW LogoEdges                               ;23  $17
  41+ E0EF A4 E9                                 DW MambaEdges                              ;24  $18
  42+ E0F1 A9 EA                                 DW MissileEdges                            ;25  $19
  43+ E0F3 AE EB                                 DW MonitorEdges                            ;26  $1A
  44+ E0F5 A5 EC                                 DW MorayEdges                              ;27  $1B
  45+ E0F7 A8 ED                                 DW OphidianEdges                           ;28  $1C
  46+ E0F9 7D EE                                 DW PlateEdges                              ;29  $1D
  47+ E0FB EE EE                                 DW PythonEdges                             ;30  $1E
  48+ E0FD E7 EF                                 DW Python_PEdges                           ;31  $1F
  49+ E0FF E4 E1        ShipNormalTable2:        DW DragonNormals                           ;16  $10
  50+ E101 67 E2                                 DW Escape_PodNormals                       ;17  $11
  51+ E103 70 E3                                 DW Fer_De_LanceNormals                     ;18  $12
  52+ E105 3F E4                                 DW GeckoNormals                            ;19  $13
  53+ E107 1E E5                                 DW GhavialNormals                          ;20  $14
  54+ E109 1F E6                                 DW IguanaNormals                           ;21  $15
  55+ E10B 1C E7                                 DW KraitNormals                            ;22  $16
  56+ E10D DF E8                                 DW LogoNormals                             ;23  $17
  57+ E10F 14 EA                                 DW MambaNormals                            ;24  $18
  58+ E111 09 EB                                 DW MissileNormals                          ;25  $19
  59+ E113 0A EC                                 DW MonitorNormals                          ;26  $1A
  60+ E115 F1 EC                                 DW MorayNormals                            ;27  $1B
  61+ E117 20 EE                                 DW OphidianNormals                         ;28  $1C
  62+ E119 8D EE                                 DW PlateNormals                            ;29  $1D
  63+ E11B 56 EF                                 DW PythonNormals                           ;30  $1E
  64+ E11D 4F F0                                 DW Python_PNormals                         ;31  $1F
  65+ E11F DD 00        ShipModelSizeTable2:     DW DragonLen                               ;16  $10
  66+ E121 5B 00                                 DW Escape_PodLen                           ;17  $11
  67+ E123 21 01                                 DW Fer_De_LanceLen                         ;18  $12
  68+ E125 CB 00                                 DW GeckoLen                                ;19  $13
  69+ E127 EB 00                                 DW GhavialLen                              ;20  $14
  70+ E129 F9 00                                 DW IguanaLen                               ;21  $15
  71+ E12B ED 00                                 DW KraitLen                                ;22  $16
  72+ E12D BF 01                                 DW LogoLen                                 ;23  $17
  73+ E12F 35 01                                 DW MambaLen                                ;24  $18
  74+ E131 05 01                                 DW MissileLen                              ;25  $19
  75+ E133 09 01                                 DW MonitorLen                              ;26  $1A
  76+ E135 DF 00                                 DW MorayLen                                ;27  $1B
  77+ E137 3B 01                                 DW OphidianLen                             ;28  $1C
  78+ E139 41 00                                 DW PlateLen                                ;29  $1D
  79+ E13B F9 00                                 DW PythonLen                               ;30  $1E
  80+ E13D F9 00                                 DW Python_PLen                             ;31  $1F
  81+ E13F
  82+ E13F                                      include "Data/ships/Dragon.asm"
# file opened: ./Data/ships/Dragon.asm
   1++E13F 00           Dragon:	                DB $00
   2++E140 66 50                                DW $5066
   3++E142 90 E1                                DW DragonEdges
   4++E144 54                                   DB DragonEdgesSize
   5++E145 00 3C                                DB $00, $3C
   6++E147 09                                   DB DragonVertSize /6
   7++E148 36                                   DB DragonVertSize
   8++E149 15                                   DB DragonEdgesCnt
   9++E14A 00 00                                DB $00, $00
  10++E14C 38                                   DB DragonNormalsSize
  11++E14D 20 F7 14                             DB $20, $F7, $14
  12++E150 E4 E1                                DW DragonNormals
  13++E152 00 47                                DB $00, $47
  14++E154 5A E1                                DW DragonVertices
  15++E156 00 00                                DB 0,0                      ; Type and Tactics
  16++E158 01                                   DB ShipCanAnger
  17++E159 B0                                   DB $B0                      ; chance of ECM module
  18++E15A 00 00 FA 1F  DragonVertices:	        DB $00, $00, $FA, $1F, $6B, $05
  18++E15E 6B 05
  19++E160 D8 00 7C 1F                          DB $D8, $00, $7C, $1F, $67, $01
  19++E164 67 01
  20++E166 D8 00 7C 3F                          DB $D8, $00, $7C, $3F, $78, $12
  20++E16A 78 12
  21++E16C 00 28 FA 3F                          DB $00, $28, $FA, $3F, $CD, $23
  21++E170 CD 23
  22++E172 00 28 FA 7F                          DB $00, $28, $FA, $7F, $CD, $89
  22++E176 CD 89
  23++E178 D8 00 7C BF                          DB $D8, $00, $7C, $BF, $9A, $34
  23++E17C 9A 34
  24++E17E D8 00 7C 9F                          DB $D8, $00, $7C, $9F, $AB, $45
  24++E182 AB 45
  25++E184 00 50 00 1F                          DB $00, $50, $00, $1F, $FF, $FF
  25++E188 FF FF
  26++E18A 00 50 00 5F                          DB $00, $50, $00, $5F, $FF, $FF
  26++E18E FF FF
  27++E190              DragonVertSize:         equ $ - DragonVertices
  28++E190 1F 01 04 1C  DragonEdges:	        DB $1F, $01, $04, $1C
  29++E194 1F 12 08 1C                          DB $1F, $12, $08, $1C
  30++E198 1F 23 0C 1C                          DB $1F, $23, $0C, $1C
  31++E19C 1F 34 14 1C                          DB $1F, $34, $14, $1C
  32++E1A0 1F 45 18 1C                          DB $1F, $45, $18, $1C
  33++E1A4 1F 50 00 1C                          DB $1F, $50, $00, $1C
  34++E1A8 1F 67 04 20                          DB $1F, $67, $04, $20
  35++E1AC 1F 78 08 20                          DB $1F, $78, $08, $20
  36++E1B0 1F 89 10 20                          DB $1F, $89, $10, $20
  37++E1B4 1F 9A 14 20                          DB $1F, $9A, $14, $20
  38++E1B8 1F AB 18 20                          DB $1F, $AB, $18, $20
  39++E1BC 1F B6 00 20                          DB $1F, $B6, $00, $20
  40++E1C0 1F 06 00 04                          DB $1F, $06, $00, $04
  41++E1C4 1F 17 04 08                          DB $1F, $17, $04, $08
  42++E1C8 1F 4A 14 18                          DB $1F, $4A, $14, $18
  43++E1CC 1F 5B 00 18                          DB $1F, $5B, $00, $18
  44++E1D0 1F 2C 08 0C                          DB $1F, $2C, $08, $0C
  45++E1D4 1F 8C 08 10                          DB $1F, $8C, $08, $10
  46++E1D8 1F 3D 0C 14                          DB $1F, $3D, $0C, $14
  47++E1DC 1F 9D 10 14                          DB $1F, $9D, $10, $14
  48++E1E0 1F CD 0C 10                          DB $1F, $CD, $0C, $10
  49++E1E4              DragonEdgesSize:        equ $ - DragonEdges
  50++E1E4              DragonEdgesCnt:         equ DragonEdgesSize/4
  51++E1E4 1F 10 5A 1C  DragonNormals:	        DB $1F, $10, $5A, $1C
  52++E1E8 1F 21 5A 00                          DB $1F, $21, $5A, $00
  53++E1EC 3F 19 5B 0E                          DB $3F, $19, $5B, $0E
  54++E1F0 BF 19 5B 0E                          DB $BF, $19, $5B, $0E
  55++E1F4 9F 21 5A 00                          DB $9F, $21, $5A, $00
  56++E1F8 9F 10 5A 1C                          DB $9F, $10, $5A, $1C
  57++E1FC 5F 10 5A 1C                          DB $5F, $10, $5A, $1C
  58++E200 5F 21 5A 00                          DB $5F, $21, $5A, $00
  59++E204 7F 19 5B 0E                          DB $7F, $19, $5B, $0E
  60++E208 FF 19 5B 0E                          DB $FF, $19, $5B, $0E
  61++E20C DF 21 5A 00                          DB $DF, $21, $5A, $00
  62++E210 DF 10 5A 1C                          DB $DF, $10, $5A, $1C
  63++E214 3F 30 00 52                          DB $3F, $30, $00, $52
  64++E218 BF 30 00 52                          DB $BF, $30, $00, $52
  65++E21C              DragonNormalsSize:      equ $ - DragonNormals
  66++E21C              DragonLen:              equ $ - Dragon
  67++E21C
# file closed: ./Data/ships/Dragon.asm
  83+ E21C                                      include "Data/ships/Escape_Pod.asm"
# file opened: ./Data/ships/Escape_Pod.asm
   1++E21C 20           Escape_Pod:             DB $20
   2++E21D 00 01                                DW $0100
   3++E21F 4F E2                                DW Escape_PodEdges
   4++E221 18                                   DB Escape_PodEdgesSize
   5++E222 00 16                                DB $00, $16
   6++E224 04                                   DB Escape_PodVertSize /6
   7++E225 18                                   DB Escape_PodVertSize
   8++E226 06                                   DB Escape_PodEdgesCnt
   9++E227 00 00                                DB $00, $00
  10++E229 10                                   DB Escape_PodNormalsSize
  11++E22A 08 11 08                             DB $08, $11, $08
  12++E22D 67 E2                                DW Escape_PodNormals
  13++E22F 04 00                                DB $04, $00
  14++E231 37 E2                                DW Escape_PodVertices
  15++E233 00 00                                DB 0,0                      ; Type and Tactics
  16++E235 00                                   DB 0
  17++E236 FF                                   DB $FF                      ; chance of ECM module
  18++E237 07 00 24 9F  Escape_PodVertices:	    DB $07, $00, $24, $9F, $12, $33
  18++E23B 12 33
  19++E23D 07 0E 0C FF                          DB $07, $0E, $0C, $FF, $02, $33
  19++E241 02 33
  20++E243 07 0E 0C BF                          DB $07, $0E, $0C, $BF, $01, $33
  20++E247 01 33
  21++E249 15 00 00 1F                          DB $15, $00, $00, $1F, $01, $22
  21++E24D 01 22
  22++E24F              Escape_PodVertSize:     equ $ - Escape_PodVertices
  23++E24F 1F 23 00 04  Escape_PodEdges:	    DB $1F, $23, $00, $04
  24++E253 1F 03 04 08                          DB $1F, $03, $04, $08
  25++E257 1F 01 08 0C                          DB $1F, $01, $08, $0C
  26++E25B 1F 12 0C 00                          DB $1F, $12, $0C, $00
  27++E25F 1F 13 00 08                          DB $1F, $13, $00, $08
  28++E263 1F 02 0C 04                          DB $1F, $02, $0C, $04
  29++E267              Escape_PodEdgesSize:    equ $ - Escape_PodEdges
  30++E267              Escape_PodEdgesCnt:     equ Escape_PodEdgesSize/4
  31++E267 3F 34 00 7A  Escape_PodNormals:	    DB $3F, $34, $00, $7A
  32++E26B 1F 27 67 1E                          DB $1F, $27, $67, $1E
  33++E26F 5F 27 67 1E                          DB $5F, $27, $67, $1E
  34++E273 9F 70 00 00                          DB $9F, $70, $00, $00
  35++E277              Escape_PodNormalsSize:  equ $ - Escape_PodNormals
  36++E277              Escape_PodLen:          equ $ - Escape_Pod
  37++E277
# file closed: ./Data/ships/Escape_Pod.asm
  84+ E277                                      include "Data/ships/Fer_De_Lance.asm"
# file opened: ./Data/ships/Fer_De_Lance.asm
   1++E277 00           Fer_De_Lance:	        DB $00
   2++E278 40 06                                DW $0640
   3++E27A 04 E3                                DW Fer_De_LanceEdges
   4++E27C 6C                                   DB Fer_De_LanceEdgesSize
   5++E27D 00 1A                                DB $00, $1A
   6++E27F 13                                   DB Fer_De_LanceVertSize /6
   7++E280 72                                   DB Fer_De_LanceVertSize
   8++E281 1B                                   DB Fer_De_LanceEdgesCnt
   9++E282 00 00                                DB $00, $00
  10++E284 28                                   DB Fer_De_LanceNormalsSize
  11++E285 28 A0 1E                             DB $28, $A0, $1E
  12++E288 70 E3                                DW Fer_De_LanceNormals
  13++E28A 01 12                                DB $01, $12
  14++E28C 92 E2                                DW Fer_De_LanceVertices
  15++E28E 00 00                                DB 0,0                      ; Type and Tactics
  16++E290 01                                   DB ShipCanAnger
  17++E291 FF                                   DB $FF                      ; chance of ECM module
  18++E292 00 0E 6C 5F  Fer_De_LanceVertices:	DB $00, $0E, $6C, $5F, $01, $59
  18++E296 01 59
  19++E298 28 0E 04 FF                          DB $28, $0E, $04, $FF, $12, $99
  19++E29C 12 99
  20++E29E 0C 0E 34 FF                          DB $0C, $0E, $34, $FF, $23, $99
  20++E2A2 23 99
  21++E2A4 0C 0E 34 7F                          DB $0C, $0E, $34, $7F, $34, $99
  21++E2A8 34 99
  22++E2AA 28 0E 04 7F                          DB $28, $0E, $04, $7F, $45, $99
  22++E2AE 45 99
  23++E2B0 28 0E 04 BC                          DB $28, $0E, $04, $BC, $01, $26
  23++E2B4 01 26
  24++E2B6 0C 02 34 BC                          DB $0C, $02, $34, $BC, $23, $67
  24++E2BA 23 67
  25++E2BC 0C 02 34 3C                          DB $0C, $02, $34, $3C, $34, $78
  25++E2C0 34 78
  26++E2C2 28 0E 04 3C                          DB $28, $0E, $04, $3C, $04, $58
  26++E2C6 04 58
  27++E2C8 00 12 14 2F                          DB $00, $12, $14, $2F, $06, $78
  27++E2CC 06 78
  28++E2CE 03 0B 61 CB                          DB $03, $0B, $61, $CB, $00, $00
  28++E2D2 00 00
  29++E2D4 1A 08 12 89                          DB $1A, $08, $12, $89, $00, $00
  29++E2D8 00 00
  30++E2DA 10 0E 04 AB                          DB $10, $0E, $04, $AB, $00, $00
  30++E2DE 00 00
  31++E2E0 03 0B 61 4B                          DB $03, $0B, $61, $4B, $00, $00
  31++E2E4 00 00
  32++E2E6 1A 08 12 09                          DB $1A, $08, $12, $09, $00, $00
  32++E2EA 00 00
  33++E2EC 10 0E 04 2B                          DB $10, $0E, $04, $2B, $00, $00
  33++E2F0 00 00
  34++E2F2 00 0E 14 6C                          DB $00, $0E, $14, $6C, $99, $99
  34++E2F6 99 99
  35++E2F8 0E 0E 2C CC                          DB $0E, $0E, $2C, $CC, $99, $99
  35++E2FC 99 99
  36++E2FE 0E 0E 2C 4C                          DB $0E, $0E, $2C, $4C, $99, $99
  36++E302 99 99
  37++E304              Fer_De_LanceVertSize:   equ $ - Fer_De_LanceVertices
  38++E304 1F 19 00 04  Fer_De_LanceEdges:	    DB $1F, $19, $00, $04
  39++E308 1F 29 04 08                          DB $1F, $29, $04, $08
  40++E30C 1F 39 08 0C                          DB $1F, $39, $08, $0C
  41++E310 1F 49 0C 10                          DB $1F, $49, $0C, $10
  42++E314 1F 59 00 10                          DB $1F, $59, $00, $10
  43++E318 1C 01 00 14                          DB $1C, $01, $00, $14
  44++E31C 1C 26 14 18                          DB $1C, $26, $14, $18
  45++E320 1C 37 18 1C                          DB $1C, $37, $18, $1C
  46++E324 1C 48 1C 20                          DB $1C, $48, $1C, $20
  47++E328 1C 05 00 20                          DB $1C, $05, $00, $20
  48++E32C 0F 06 14 24                          DB $0F, $06, $14, $24
  49++E330 0B 67 18 24                          DB $0B, $67, $18, $24
  50++E334 0B 78 1C 24                          DB $0B, $78, $1C, $24
  51++E338 0F 08 20 24                          DB $0F, $08, $20, $24
  52++E33C 0E 12 04 14                          DB $0E, $12, $04, $14
  53++E340 0E 23 08 18                          DB $0E, $23, $08, $18
  54++E344 0E 34 0C 1C                          DB $0E, $34, $0C, $1C
  55++E348 0E 45 10 20                          DB $0E, $45, $10, $20
  56++E34C 08 00 28 2C                          DB $08, $00, $28, $2C
  57++E350 09 00 2C 30                          DB $09, $00, $2C, $30
  58++E354 0B 00 28 30                          DB $0B, $00, $28, $30
  59++E358 08 00 34 38                          DB $08, $00, $34, $38
  60++E35C 09 00 38 3C                          DB $09, $00, $38, $3C
  61++E360 0B 00 34 3C                          DB $0B, $00, $34, $3C
  62++E364 0C 99 40 44                          DB $0C, $99, $40, $44
  63++E368 0C 99 40 48                          DB $0C, $99, $40, $48
  64++E36C 08 99 44 48                          DB $08, $99, $44, $48
  65++E370              Fer_De_LanceEdgesSize:  equ $ - Fer_De_LanceEdges
  66++E370              Fer_De_LanceEdgesCnt:   equ Fer_De_LanceEdgesSize/4
  67++E370 1C 00 18 06  Fer_De_LanceNormals:	DB $1C, $00, $18, $06
  68++E374 9F 44 00 18                          DB $9F, $44, $00, $18
  69++E378 BF 3F 00 25                          DB $BF, $3F, $00, $25
  70++E37C 3F 00 00 68                          DB $3F, $00, $00, $68
  71++E380 3F 3F 00 25                          DB $3F, $3F, $00, $25
  72++E384 1F 44 00 18                          DB $1F, $44, $00, $18
  73++E388 BC 0C 2E 13                          DB $BC, $0C, $2E, $13
  74++E38C 3C 00 2D 16                          DB $3C, $00, $2D, $16
  75++E390 3C 0C 2E 13                          DB $3C, $0C, $2E, $13
  76++E394 5F 00 1C 00                          DB $5F, $00, $1C, $00
  77++E398              Fer_De_LanceNormalsSize:equ $ - Fer_De_LanceNormals
  78++E398              Fer_De_LanceLen:        equ $ - Fer_De_Lance
  79++E398
# file closed: ./Data/ships/Fer_De_Lance.asm
  85+ E398                                      include "Data/ships/Gecko.asm"
# file opened: ./Data/ships/Gecko.asm
   1++E398 00           Gecko:	                DB $00
   2++E399 49 26                                DW $2649
   3++E39B FB E3                                DW GeckoEdges
   4++E39D 44                                   DB GeckoEdgesSize
   5++E39E 00 1A                                DB $00, $1A
   6++E3A0 0C                                   DB GeckoVertSize /6
   7++E3A1 48                                   DB GeckoVertSize
   8++E3A2 11                                   DB GeckoEdgesCnt
   9++E3A3 00 37                                DB $00, $37
  10++E3A5 24                                   DB GeckoNormalsSize
  11++E3A6 12 46 1E                             DB $12, $46, $1E
  12++E3A9 3F E4                                DW GeckoNormals
  13++E3AB 03 10                                DB $03, $10
  14++E3AD B3 E3                                DW GeckoVertices
  15++E3AF 00 00                                DB 0,0                      ; Type and Tactics
  16++E3B1 01                                   DB ShipCanAnger
  17++E3B2 60                                   DB $60                      ; chance of ECM module
  18++E3B3 0A 04 2F DF  GeckoVertices:	        DB $0A, $04, $2F, $DF, $03, $45
  18++E3B7 03 45
  19++E3B9 0A 04 2F 5F                          DB $0A, $04, $2F, $5F, $01, $23
  19++E3BD 01 23
  20++E3BF 10 08 17 BF                          DB $10, $08, $17, $BF, $05, $67
  20++E3C3 05 67
  21++E3C5 10 08 17 3F                          DB $10, $08, $17, $3F, $01, $78
  21++E3C9 01 78
  22++E3CB 42 00 03 BF                          DB $42, $00, $03, $BF, $45, $66
  22++E3CF 45 66
  23++E3D1 42 00 03 3F                          DB $42, $00, $03, $3F, $12, $88
  23++E3D5 12 88
  24++E3D7 14 0E 17 FF                          DB $14, $0E, $17, $FF, $34, $67
  24++E3DB 34 67
  25++E3DD 14 0E 17 7F                          DB $14, $0E, $17, $7F, $23, $78
  25++E3E1 23 78
  26++E3E3 08 06 21 D0                          DB $08, $06, $21, $D0, $33, $33
  26++E3E7 33 33
  27++E3E9 08 06 21 51                          DB $08, $06, $21, $51, $33, $33
  27++E3ED 33 33
  28++E3EF 08 0D 10 F0                          DB $08, $0D, $10, $F0, $33, $33
  28++E3F3 33 33
  29++E3F5 08 0D 10 71                          DB $08, $0D, $10, $71, $33, $33
  29++E3F9 33 33
  30++E3FB              GeckoVertSize:          equ $ - GeckoVertices
  31++E3FB 1F 03 00 04  GeckoEdges:	            DB $1F, $03, $00, $04
  32++E3FF 1F 12 04 14                          DB $1F, $12, $04, $14
  33++E403 1F 18 14 0C                          DB $1F, $18, $14, $0C
  34++E407 1F 07 0C 08                          DB $1F, $07, $0C, $08
  35++E40B 1F 56 08 10                          DB $1F, $56, $08, $10
  36++E40F 1F 45 10 00                          DB $1F, $45, $10, $00
  37++E413 1F 28 14 1C                          DB $1F, $28, $14, $1C
  38++E417 1F 37 1C 18                          DB $1F, $37, $1C, $18
  39++E41B 1F 46 18 10                          DB $1F, $46, $18, $10
  40++E41F 1D 05 00 08                          DB $1D, $05, $00, $08
  41++E423 1E 01 04 0C                          DB $1E, $01, $04, $0C
  42++E427 1D 34 00 18                          DB $1D, $34, $00, $18
  43++E42B 1E 23 04 1C                          DB $1E, $23, $04, $1C
  44++E42F 14 67 08 18                          DB $14, $67, $08, $18
  45++E433 14 78 0C 1C                          DB $14, $78, $0C, $1C
  46++E437 10 33 20 28                          DB $10, $33, $20, $28
  47++E43B 11 33 24 2C                          DB $11, $33, $24, $2C
  48++E43F              GeckoEdgesSize:             equ $ - GeckoEdges
  49++E43F              GeckoEdgesCnt:          equ GeckoEdgesSize/4
  50++E43F 1F 00 1F 05  GeckoNormals:	        DB $1F, $00, $1F, $05
  51++E443 1F 04 2D 08                          DB $1F, $04, $2D, $08
  52++E447 5F 19 6C 13                          DB $5F, $19, $6C, $13
  53++E44B 5F 00 54 0C                          DB $5F, $00, $54, $0C
  54++E44F DF 19 6C 13                          DB $DF, $19, $6C, $13
  55++E453 9F 04 2D 08                          DB $9F, $04, $2D, $08
  56++E457 BF 58 10 D6                          DB $BF, $58, $10, $D6
  57++E45B 3F 00 00 BB                          DB $3F, $00, $00, $BB
  58++E45F 3F 58 10 D6                          DB $3F, $58, $10, $D6
  59++E463              GeckoNormalsSize:       equ $ - GeckoNormals
  60++E463              GeckoLen:               equ $ - Gecko
  61++E463
# file closed: ./Data/ships/Gecko.asm
  86+ E463                                      include "Data/ships/Ghavial.asm"
# file opened: ./Data/ships/Ghavial.asm
   1++E463 03           Ghavial:	            DB $03
   2++E464 00 26                                DW $2600
   3++E466 C6 E4                                DW GhavialEdges
   4++E468 58                                   DB GhavialEdgesSize
   5++E469 00 22                                DB $00, $22
   6++E46B 0C                                   DB GhavialVertSize /6
   7++E46C 48                                   DB GhavialVertSize
   8++E46D 16                                   DB GhavialEdgesCnt
   9++E46E 00 64                                DB $00, $64
  10++E470 30                                   DB GhavialNormalsSize
  11++E471 0A 72 10                             DB $0A, $72, $10
  12++E474 1E E5                                DW GhavialNormals
  13++E476 00 27                                DB $00, $27
  14++E478 7E E4                                DW GhavialVertices
  15++E47A 00 00                                DB 0,0                      ; Type and Tactics
  16++E47C 01                                   DB ShipCanAnger
  17++E47D 60                                   DB $60                      ; chance of ECM module
  18++E47E
  19++E47E 1E 00 64 1F  GhavialVertices:	DB $1E, $00, $64, $1F, $67, $01
  19++E482 67 01
  20++E484 1E 00 64 9F                      DB $1E, $00, $64, $9F, $6B, $05
  20++E488 6B 05
  21++E48A 28 1E 1A 3F                      DB $28, $1E, $1A, $3F, $23, $01
  21++E48E 23 01
  22++E490 28 1E 1A BF                      DB $28, $1E, $1A, $BF, $45, $03
  22++E494 45 03
  23++E496 3C 00 14 3F                      DB $3C, $00, $14, $3F, $78, $12
  23++E49A 78 12
  24++E49C 28 00 3C 3F                      DB $28, $00, $3C, $3F, $89, $23
  24++E4A0 89 23
  25++E4A2 3C 00 14 BF                      DB $3C, $00, $14, $BF, $AB, $45
  25++E4A6 AB 45
  26++E4A8 28 00 3C BF                      DB $28, $00, $3C, $BF, $9A, $34
  26++E4AC 9A 34
  27++E4AE 00 1E 14 7F                      DB $00, $1E, $14, $7F, $FF, $FF
  27++E4B2 FF FF
  28++E4B4 0A 18 00 09                      DB $0A, $18, $00, $09, $00, $00
  28++E4B8 00 00
  29++E4BA 0A 18 00 89                      DB $0A, $18, $00, $89, $00, $00
  29++E4BE 00 00
  30++E4C0 00 16 0A 09                      DB $00, $16, $0A, $09, $00, $00
  30++E4C4 00 00
  31++E4C6
  32++E4C6              GhavialVertSize: equ $ - GhavialVertices
  33++E4C6
  34++E4C6
  35++E4C6 1F 01 00 08  GhavialEdges:	DB $1F, $01, $00, $08
  36++E4CA 1F 12 10 08                  DB $1F, $12, $10, $08
  37++E4CE 1F 23 14 08                  DB $1F, $23, $14, $08
  38++E4D2 1F 30 0C 08                  DB $1F, $30, $0C, $08
  39++E4D6 1F 34 1C 0C                  DB $1F, $34, $1C, $0C
  40++E4DA 1F 45 18 0C                  DB $1F, $45, $18, $0C
  41++E4DE 1F 50 0C 04                  DB $1F, $50, $0C, $04
  42++E4E2 1F 67 00 20                  DB $1F, $67, $00, $20
  43++E4E6 1F 78 10 20                  DB $1F, $78, $10, $20
  44++E4EA 1F 89 14 20                  DB $1F, $89, $14, $20
  45++E4EE 1F 9A 1C 20                  DB $1F, $9A, $1C, $20
  46++E4F2 1F AB 18 20                  DB $1F, $AB, $18, $20
  47++E4F6 1F B6 04 20                  DB $1F, $B6, $04, $20
  48++E4FA 1F 06 04 00                  DB $1F, $06, $04, $00
  49++E4FE 1F 17 00 10                  DB $1F, $17, $00, $10
  50++E502 1F 28 10 14                  DB $1F, $28, $10, $14
  51++E506 1F 39 14 1C                  DB $1F, $39, $14, $1C
  52++E50A 1F 4A 1C 18                  DB $1F, $4A, $1C, $18
  53++E50E 1F 5B 18 04                  DB $1F, $5B, $18, $04
  54++E512 09 00 24 28                  DB $09, $00, $24, $28
  55++E516 09 00 28 2C                  DB $09, $00, $28, $2C
  56++E51A 09 00 2C 24                  DB $09, $00, $2C, $24
  57++E51E
  58++E51E              GhavialEdgesSize: equ $ - GhavialEdges
  59++E51E
  60++E51E
  61++E51E              GhavialEdgesCnt: equ GhavialEdgesSize/4
  62++E51E
  63++E51E
  64++E51E 1F 00 3E 0E  GhavialNormals:	DB $1F, $00, $3E, $0E
  65++E522 1F 33 24 0C                  DB $1F, $33, $24, $0C
  66++E526 3F 33 1C 19                  DB $3F, $33, $1C, $19
  67++E52A 3F 00 30 2A                  DB $3F, $00, $30, $2A
  68++E52E BF 33 1C 19                  DB $BF, $33, $1C, $19
  69++E532 9F 33 24 0C                  DB $9F, $33, $24, $0C
  70++E536 5F 00 3E 0F                  DB $5F, $00, $3E, $0F
  71++E53A 5F 1C 38 07                  DB $5F, $1C, $38, $07
  72++E53E 7F 1B 37 0D                  DB $7F, $1B, $37, $0D
  73++E542 7F 00 33 26                  DB $7F, $00, $33, $26
  74++E546 FF 1B 37 0D                  DB $FF, $1B, $37, $0D
  75++E54A DF 1C 38 07                  DB $DF, $1C, $38, $07
  76++E54E
  77++E54E              GhavialNormalsSize: equ $ - GhavialNormals
  78++E54E              GhavialLen: equ $ - Ghavial
  79++E54E
# file closed: ./Data/ships/Ghavial.asm
  87+ E54E                                      include "Data/ships/Iguana.asm"
# file opened: ./Data/ships/Iguana.asm
   1++E54E 01           Iguana:	                DB $01
   2++E54F AC 0D                                DW $0DAC
   3++E551 C3 E5                                DW IguanaEdges
   4++E553 5C                                   DB IguanaEdgesSize
   5++E554 00 1A                                DB $00, $1A
   6++E556 0F                                   DB IguanaVertSize /6
   7++E557 5A                                   DB IguanaVertSize
   8++E558 17                                   DB IguanaEdgesCnt
   9++E559 00 96                                DB $00, $96
  10++E55B 28                                   DB IguanaNormalsSize
  11++E55C 0A 5A 21                             DB $0A, $5A, $21
  12++E55F 1F E6                                DW IguanaNormals
  13++E561 01 23                                DB $01, $23
  14++E563 69 E5                                DW IguanaVertices
  15++E565 00 00                                DB 0,0                      ; Type and Tactics
  16++E567 01                                   DB ShipCanAnger
  17++E568 80                                   DB $80                      ; chance of ECM module
  18++E569
  19++E569
  20++E569 00 00 5A 1F  IguanaVertices:	DB $00, $00, $5A, $1F, $23, $01
  20++E56D 23 01
  21++E56F 00 14 1E 1F                  DB $00, $14, $1E, $1F, $46, $02
  21++E573 46 02
  22++E575 28 00 0A 9F                  DB $28, $00, $0A, $9F, $45, $01
  22++E579 45 01
  23++E57B 00 14 1E 5F                  DB $00, $14, $1E, $5F, $57, $13
  23++E57F 57 13
  24++E581 28 00 0A 1F                  DB $28, $00, $0A, $1F, $67, $23
  24++E585 67 23
  25++E587 00 14 28 3F                  DB $00, $14, $28, $3F, $89, $46
  25++E58B 89 46
  26++E58D 28 00 1E BF                  DB $28, $00, $1E, $BF, $88, $45
  26++E591 88 45
  27++E593 00 14 28 7F                  DB $00, $14, $28, $7F, $89, $57
  27++E597 89 57
  28++E599 28 00 1E 3F                  DB $28, $00, $1E, $3F, $99, $67
  28++E59D 99 67
  29++E59F 28 00 28 9E                  DB $28, $00, $28, $9E, $11, $00
  29++E5A3 11 00
  30++E5A5 28 00 28 1E                  DB $28, $00, $28, $1E, $33, $22
  30++E5A9 33 22
  31++E5AB 00 08 28 2A                  DB $00, $08, $28, $2A, $99, $88
  31++E5AF 99 88
  32++E5B1 10 00 24 AA                  DB $10, $00, $24, $AA, $88, $88
  32++E5B5 88 88
  33++E5B7 00 08 28 6A                  DB $00, $08, $28, $6A, $99, $88
  33++E5BB 99 88
  34++E5BD 10 00 24 2A                  DB $10, $00, $24, $2A, $99, $99
  34++E5C1 99 99
  35++E5C3
  36++E5C3              IguanaVertSize: equ $ - IguanaVertices
  37++E5C3
  38++E5C3
  39++E5C3
  40++E5C3 1F 02 00 04  IguanaEdges:	DB $1F, $02, $00, $04
  41++E5C7 1F 01 00 08                  DB $1F, $01, $00, $08
  42++E5CB 1F 13 00 0C                  DB $1F, $13, $00, $0C
  43++E5CF 1F 23 00 10                  DB $1F, $23, $00, $10
  44++E5D3 1F 46 04 14                  DB $1F, $46, $04, $14
  45++E5D7 1F 45 08 18                  DB $1F, $45, $08, $18
  46++E5DB 1F 57 0C 1C                  DB $1F, $57, $0C, $1C
  47++E5DF 1F 67 10 20                  DB $1F, $67, $10, $20
  48++E5E3 1F 48 14 18                  DB $1F, $48, $14, $18
  49++E5E7 1F 58 18 1C                  DB $1F, $58, $18, $1C
  50++E5EB 1F 69 14 20                  DB $1F, $69, $14, $20
  51++E5EF 1F 79 1C 20                  DB $1F, $79, $1C, $20
  52++E5F3 1F 04 04 08                  DB $1F, $04, $04, $08
  53++E5F7 1F 15 08 0C                  DB $1F, $15, $08, $0C
  54++E5FB 1F 26 04 10                  DB $1F, $26, $04, $10
  55++E5FF 1F 37 0C 10                  DB $1F, $37, $0C, $10
  56++E603 1F 89 14 1C                  DB $1F, $89, $14, $1C
  57++E607 1E 01 08 24                  DB $1E, $01, $08, $24
  58++E60B 1E 23 10 28                  DB $1E, $23, $10, $28
  59++E60F 0A 88 2C 30                  DB $0A, $88, $2C, $30
  60++E613 0A 88 34 30                  DB $0A, $88, $34, $30
  61++E617 0A 99 2C 38                  DB $0A, $99, $2C, $38
  62++E61B 0A 99 34 38                  DB $0A, $99, $34, $38
  63++E61F
  64++E61F              IguanaEdgesSize: equ $ - IguanaEdges
  65++E61F
  66++E61F
  67++E61F              IguanaEdgesCnt: equ IguanaEdgesSize/4
  68++E61F
  69++E61F
  70++E61F 9F 33 4D 19  IguanaNormals:	DB $9F, $33, $4D, $19
  71++E623 DF 33 4D 19  	DB $DF, $33, $4D, $19
  72++E627 1F 33 4D 19  	DB $1F, $33, $4D, $19
  73++E62B 5F 33 4D 19  	DB $5F, $33, $4D, $19
  74++E62F 9F 2A 55 00  	DB $9F, $2A, $55, $00
  75++E633 DF 2A 55 00  	DB $DF, $2A, $55, $00
  76++E637 1F 2A 55 00  	DB $1F, $2A, $55, $00
  77++E63B 5F 2A 55 00  	DB $5F, $2A, $55, $00
  78++E63F BF 17 00 5D  	DB $BF, $17, $00, $5D
  79++E643 3F 17 00 5D  	DB $3F, $17, $00, $5D
  80++E647
  81++E647
  82++E647              IguanaNormalsSize: equ $ - IguanaNormals
  83++E647              IguanaLen: equ $ - Iguana
  84++E647
# file closed: ./Data/ships/Iguana.asm
  88+ E647                                      include "Data/ships/Krait.asm"
# file opened: ./Data/ships/Krait.asm
   1++E647
   2++E647 01           Krait:                  DB $01
   3++E648 0E 10                                DW $100E
   4++E64A C8 E6                                DW KraitEdges
   5++E64C 54                                   DB KraitEdgesSize
   6++E64D 00 12                                DB $00, $12
   7++E64F 11                                   DB KraitVertSize /6
   8++E650 66                                   DB KraitVertSize
   9++E651 15                                   DB KraitEdgesCnt
  10++E652 64 00                                DB $64,$00
  11++E654 18                                   DB KraitNormalsSize
  12++E655 14 50 1E                             DB $14, $50, $1E
  13++E658 1C E7                                DW KraitNormals
  14++E65A 02 10                                DB $02, $10
  15++E65C 62 E6                                DW KraitVertices
  16++E65E 00 00                                DB 0,0                      ; Type and Tactics
  17++E660 01                                   DB ShipCanAnger
  18++E661 D0                                   DB $D0                      ; chance of ECM module
  19++E662 00 00 60 1F  KraitVertices:          DB $00, $00, $60, $1F, $01, $23
  19++E666 01 23
  20++E668 00 12 30 3F                          DB $00, $12, $30, $3F, $03, $45
  20++E66C 03 45
  21++E66E 00 12 30 7F                          DB $00, $12, $30, $7F, $12, $45
  21++E672 12 45
  22++E674 5A 00 03 3F                          DB $5A, $00, $03, $3F, $01, $44
  22++E678 01 44
  23++E67A 5A 00 03 BF                          DB $5A, $00, $03, $BF, $23, $55
  23++E67E 23 55
  24++E680 5A 00 57 1C                          DB $5A, $00, $57, $1C, $01, $11
  24++E684 01 11
  25++E686 5A 00 57 9C                          DB $5A, $00, $57, $9C, $23, $33
  25++E68A 23 33
  26++E68C 00 05 35 09                          DB $00, $05, $35, $09, $00, $33
  26++E690 00 33
  27++E692 00 07 26 06                          DB $00, $07, $26, $06, $00, $33
  27++E696 00 33
  28++E698 12 07 13 89                          DB $12, $07, $13, $89, $33, $33
  28++E69C 33 33
  29++E69E 12 07 13 09                          DB $12, $07, $13, $09, $00, $00
  29++E6A2 00 00
  30++E6A4 12 0B 27 28                          DB $12, $0B, $27, $28, $44, $44
  30++E6A8 44 44
  31++E6AA 12 0B 27 68                          DB $12, $0B, $27, $68, $44, $44
  31++E6AE 44 44
  32++E6B0 24 00 1E 28                          DB $24, $00, $1E, $28, $44, $44
  32++E6B4 44 44
  33++E6B6 12 0B 27 A8                          DB $12, $0B, $27, $A8, $55, $55
  33++E6BA 55 55
  34++E6BC 12 0B 27 E8                          DB $12, $0B, $27, $E8, $55, $55
  34++E6C0 55 55
  35++E6C2 24 00 1E A8                          DB $24, $00, $1E, $A8, $55, $55
  35++E6C6 55 55
  36++E6C8              KraitVertSize           equ $  - KraitVertices
  37++E6C8 1F 03 00 04  KraitEdges:             DB $1F, $03, $00, $04, $1F, $12, $00, $08
  37++E6CC 1F 12 00 08
  38++E6D0 1F 01 00 0C                          DB $1F, $01, $00, $0C, $1F, $23, $00, $10
  38++E6D4 1F 23 00 10
  39++E6D8 1F 35 04 10                          DB $1F, $35, $04, $10, $1F, $25, $10, $08
  39++E6DC 1F 25 10 08
  40++E6E0 1F 14 08 0C                          DB $1F, $14, $08, $0C, $1F, $04, $0C, $04
  40++E6E4 1F 04 0C 04
  41++E6E8 1C 01 0C 14                          DB $1C, $01, $0C, $14, $1C, $23, $10, $18
  41++E6EC 1C 23 10 18
  42++E6F0 05 45 04 08                          DB $05, $45, $04, $08, $09, $00, $1C, $28
  42++E6F4 09 00 1C 28
  43++E6F8 06 00 20 28                          DB $06, $00, $20, $28, $09, $33, $1C, $24
  43++E6FC 09 33 1C 24
  44++E700 06 33 20 24                          DB $06, $33, $20, $24, $08, $44, $2C, $34
  44++E704 08 44 2C 34
  45++E708 08 44 34 30                          DB $08, $44, $34, $30, $07, $44, $30, $2C
  45++E70C 07 44 30 2C
  46++E710 07 55 38 3C                          DB $07, $55, $38, $3C, $08, $55, $3C, $40
  46++E714 08 55 3C 40
  47++E718 08 55 40 38                          DB $08, $55, $40, $38
  48++E71C              KraitEdgesSize          equ $  - KraitEdges
  49++E71C              KraitEdgesCnt           equ KraitEdgesSize/4
  50++E71C 1F 07 30 06  KraitNormals            DB $1F, $07, $30, $06
  51++E720 5F 07 30 06                          DB $5F, $07, $30, $06, $DF, $07, $30, $06
  51++E724 DF 07 30 06
  52++E728 9F 07 30 06                          DB $9F, $07, $30, $06, $3F, $4D, $00, $9A
  52++E72C 3F 4D 00 9A
  53++E730 BF 4D 00 9A                          DB $BF, $4D, $00, $9A
  54++E734              KraitNormalsSize        equ $  - KraitNormals
  55++E734              KraitLen                equ $  - Krait
  56++E734
# file closed: ./Data/ships/Krait.asm
  89+ E734                                      include "Data/ships/Logo.asm"
# file opened: ./Data/ships/Logo.asm
   1++E734 00           Logo:	                DB $00
   2++E735 49 26                                DW $2649
   3++E737 4B E8                                DW LogoEdges
   4++E739 94                                   DB LogoEdgesSize
   5++E73A 00 36                                DB $00, $36
   6++E73C 2A                                   DB LogoVertSize /6
   7++E73D FC                                   DB LogoVertSize
   8++E73E 25                                   DB LogoEdgesCnt
   9++E73F 00 00                                DB $00, $00
  10++E741 14                                   DB LogoNormalsSize
  11++E742 63 FC 24                             DB $63, $FC, $24
  12++E745 DF E8                                DW LogoNormals
  13++E747 01 00                                DB $01, $00
  14++E749 4F E7                                DW LogoVertices
  15++E74B FD 00                                DB ShipTypeText,0                      ; Type and Tactics
  16++E74D 00                                   DB 0
  17++E74E FF                                   DB $FF                      ; chance of ECM module
  18++E74F
  19++E74F 00 09 37 5F  LogoVertices:	DB $00, $09, $37, $5F, $00, $00
  19++E753 00 00
  20++E755 0A 09 1E DF  	DB $0A, $09, $1E, $DF, $00, $00
  20++E759 00 00
  21++E75B 19 09 5D DF  	DB $19, $09, $5D, $DF, $00, $00
  21++E75F 00 00
  22++E761 96 09 B4 DF  	DB $96, $09, $B4, $DF, $00, $00
  22++E765 00 00
  23++E767 5A 09 0A DF  	DB $5A, $09, $0A, $DF, $00, $00
  23++E76B 00 00
  24++E76D 8C 09 0A DF  	DB $8C, $09, $0A, $DF, $00, $00
  24++E771 00 00
  25++E773 00 09 5F 7F  	DB $00, $09, $5F, $7F, $00, $00
  25++E777 00 00
  26++E779 8C 09 0A 5F  	DB $8C, $09, $0A, $5F, $00, $00
  26++E77D 00 00
  27++E77F 5A 09 0A 5F  	DB $5A, $09, $0A, $5F, $00, $00
  27++E783 00 00
  28++E785 96 09 B4 5F  	DB $96, $09, $B4, $5F, $00, $00
  28++E789 00 00
  29++E78B 19 09 5D 5F  	DB $19, $09, $5D, $5F, $00, $00
  29++E78F 00 00
  30++E791 0A 09 1E 5F  	DB $0A, $09, $1E, $5F, $00, $00
  30++E795 00 00
  31++E797 55 09 1E FF  	DB $55, $09, $1E, $FF, $02, $33
  31++E79B 02 33
  32++E79D 55 09 1E 7F  	DB $55, $09, $1E, $7F, $02, $44
  32++E7A1 02 44
  33++E7A3 46 0B 05 9F  	DB $46, $0B, $05, $9F, $01, $33
  33++E7A7 01 33
  34++E7A9 46 0B 19 BF  	DB $46, $0B, $19, $BF, $02, $33
  34++E7AD 02 33
  35++E7AF 46 0B 19 3F  	DB $46, $0B, $19, $3F, $02, $44
  35++E7B3 02 44
  36++E7B5 46 0B 05 1F  	DB $46, $0B, $05, $1F, $01, $44
  36++E7B9 01 44
  37++E7BB 00 09 05 5F  	DB $00, $09, $05, $5F, $00, $00
  37++E7BF 00 00
  38++E7C1 00 09 05 5F  	DB $00, $09, $05, $5F, $00, $00
  38++E7C5 00 00
  39++E7C7 00 09 05 5F  	DB $00, $09, $05, $5F, $00, $00
  39++E7CB 00 00
  40++E7CD 1C 0B 02 BF  	DB $1C, $0B, $02, $BF, $00, $00
  40++E7D1 00 00
  41++E7D3 31 0B 02 BF  	DB $31, $0B, $02, $BF, $00, $00
  41++E7D7 00 00
  42++E7D9 31 0B 0A BF  	DB $31, $0B, $0A, $BF, $00, $00
  42++E7DD 00 00
  43++E7DF 31 0B 11 BF  	DB $31, $0B, $11, $BF, $00, $00
  43++E7E3 00 00
  44++E7E5 1C 0B 11 BF  	DB $1C, $0B, $11, $BF, $00, $00
  44++E7E9 00 00
  45++E7EB 1C 0B 0A BF  	DB $1C, $0B, $0A, $BF, $00, $00
  45++E7EF 00 00
  46++E7F1 18 0B 02 BF  	DB $18, $0B, $02, $BF, $00, $00
  46++E7F5 00 00
  47++E7F7 18 0B 11 BF  	DB $18, $0B, $11, $BF, $00, $00
  47++E7FB 00 00
  48++E7FD 03 0B 11 BF  	DB $03, $0B, $11, $BF, $00, $00
  48++E801 00 00
  49++E803 00 0B 02 3F  	DB $00, $0B, $02, $3F, $00, $00
  49++E807 00 00
  50++E809 00 0B 11 3F  	DB $00, $0B, $11, $3F, $00, $00
  50++E80D 00 00
  51++E80F 04 0B 02 3F  	DB $04, $0B, $02, $3F, $00, $00
  51++E813 00 00
  52++E815 19 0B 02 3F  	DB $19, $0B, $02, $3F, $00, $00
  52++E819 00 00
  53++E81B 0E 0B 02 3F  	DB $0E, $0B, $02, $3F, $00, $00
  53++E81F 00 00
  54++E821 0E 0B 11 3F  	DB $0E, $0B, $11, $3F, $00, $00
  54++E825 00 00
  55++E827 31 0B 02 3F  	DB $31, $0B, $02, $3F, $00, $00
  55++E82B 00 00
  56++E82D 1C 0B 02 3F  	DB $1C, $0B, $02, $3F, $00, $00
  56++E831 00 00
  57++E833 1C 0B 0A 3F  	DB $1C, $0B, $0A, $3F, $00, $00
  57++E837 00 00
  58++E839 1C 0B 11 3F  	DB $1C, $0B, $11, $3F, $00, $00
  58++E83D 00 00
  59++E83F 31 0B 11 3F  	DB $31, $0B, $11, $3F, $00, $00
  59++E843 00 00
  60++E845 31 0B 0A 3F  	DB $31, $0B, $0A, $3F, $00, $00
  60++E849 00 00
  61++E84B
  62++E84B              LogoVertSize: equ $ - LogoVertices
  63++E84B
  64++E84B
  65++E84B
  66++E84B 1F 00 00 04  LogoEdges:	DB $1F, $00, $00, $04
  67++E84F 1F 00 04 08  	DB $1F, $00, $04, $08
  68++E853 1F 00 08 0C  	DB $1F, $00, $08, $0C
  69++E857 1F 00 0C 10  	DB $1F, $00, $0C, $10
  70++E85B 1F 00 10 14  	DB $1F, $00, $10, $14
  71++E85F 1F 00 14 18  	DB $1F, $00, $14, $18
  72++E863 1F 00 18 1C  	DB $1F, $00, $18, $1C
  73++E867 1F 00 1C 20  	DB $1F, $00, $1C, $20
  74++E86B 1F 00 20 24  	DB $1F, $00, $20, $24
  75++E86F 1F 00 24 28  	DB $1F, $00, $24, $28
  76++E873 1F 00 28 2C  	DB $1F, $00, $28, $2C
  77++E877 1F 00 2C 00  	DB $1F, $00, $2C, $00
  78++E87B 1E 03 38 3C  	DB $1E, $03, $38, $3C
  79++E87F 1E 01 3C 40  	DB $1E, $01, $3C, $40
  80++E883 1E 04 40 44  	DB $1E, $04, $40, $44
  81++E887 1E 01 44 38  	DB $1E, $01, $44, $38
  82++E88B 1E 03 10 30  	DB $1E, $03, $10, $30
  83++E88F 1E 22 30 34  	DB $1E, $22, $30, $34
  84++E893 1E 04 34 20  	DB $1E, $04, $34, $20
  85++E897 1E 11 20 10  	DB $1E, $11, $20, $10
  86++E89B 1E 13 10 38  	DB $1E, $13, $10, $38
  87++E89F 1E 13 30 3C  	DB $1E, $13, $30, $3C
  88++E8A3 1E 24 34 40  	DB $1E, $24, $34, $40
  89++E8A7 1E 14 20 44  	DB $1E, $14, $20, $44
  90++E8AB 1E 00 54 58  	DB $1E, $00, $54, $58
  91++E8AF 1E 00 58 60  	DB $1E, $00, $58, $60
  92++E8B3 1E 00 60 64  	DB $1E, $00, $60, $64
  93++E8B7 1E 00 5C 68  	DB $1E, $00, $5C, $68
  94++E8BB 1E 00 6C 70  	DB $1E, $00, $6C, $70
  95++E8BF 1E 00 70 74  	DB $1E, $00, $70, $74
  96++E8C3 1E 00 78 7C  	DB $1E, $00, $78, $7C
  97++E8C7 1E 00 80 84  	DB $1E, $00, $80, $84
  98++E8CB 1E 00 88 8C  	DB $1E, $00, $88, $8C
  99++E8CF 1E 00 90 94  	DB $1E, $00, $90, $94
 100++E8D3 1E 00 94 9C  	DB $1E, $00, $94, $9C
 101++E8D7 1E 00 9C A0  	DB $1E, $00, $9C, $A0
 102++E8DB 1E 00 A4 98  	DB $1E, $00, $A4, $98
 103++E8DF
 104++E8DF              LogoEdgesSize: equ $ - LogoEdges
 105++E8DF
 106++E8DF
 107++E8DF              LogoEdgesCnt: equ LogoEdgesSize/4
 108++E8DF
 109++E8DF
 110++E8DF 1F 00 17 00  LogoNormals:	DB $1F, $00, $17, $00
 111++E8E3 1F 00 04 0F  	DB $1F, $00, $04, $0F
 112++E8E7 3F 00 0D 34  	DB $3F, $00, $0D, $34
 113++E8EB 9F 51 51 00  	DB $9F, $51, $51, $00
 114++E8EF 1F 51 51 00  	DB $1F, $51, $51, $00
 115++E8F3
 116++E8F3
 117++E8F3              LogoNormalsSize: equ $ - LogoNormals
 118++E8F3              LogoLen: equ $ - Logo
 119++E8F3
# file closed: ./Data/ships/Logo.asm
  90+ E8F3                                      include "Data/ships/Mamba.asm"
# file opened: ./Data/ships/Mamba.asm
   1++E8F3 01           Mamba:	                DB $01
   2++E8F4 24 13                                DW $1324
   3++E8F6 A4 E9                                DW MambaEdges
   4++E8F8 70                                   DB MambaEdgesSize
   5++E8F9 00 22                                DB $00, $22
   6++E8FB 19                                   DB MambaVertSize /6
   7++E8FC 96                                   DB MambaVertSize
   8++E8FD 1C                                   DB MambaEdgesCnt
   9++E8FE 00 96                                DB $00, $96
  10++E900 14                                   DB MambaNormalsSize
  11++E901 19 5A 1E                             DB $19, $5A, $1E
  12++E904 14 EA                                DW MambaNormals
  13++E906 02 12                                DB $02, $12
  14++E908 0E E9                                DW MambaVertices
  15++E90A 00 00                                DB 0,0                      ; Type and Tactics
  16++E90C 01                                   DB ShipCanAnger
  17++E90D E0                                   DB $E0                      ; chance of ECM module
  18++E90E
  19++E90E 00 00 40 1F  MambaVertices:	DB $00, $00, $40, $1F, $10, $32
  19++E912 10 32
  20++E914 40 08 20 FF                  DB $40, $08, $20, $FF, $20, $44
  20++E918 20 44
  21++E91A 20 08 20 BE                  DB $20, $08, $20, $BE, $21, $44
  21++E91E 21 44
  22++E920 20 08 20 3E                  DB $20, $08, $20, $3E, $31, $44
  22++E924 31 44
  23++E926 40 08 20 7F                  DB $40, $08, $20, $7F, $30, $44
  23++E92A 30 44
  24++E92C 04 04 10 8E                  DB $04, $04, $10, $8E, $11, $11
  24++E930 11 11
  25++E932 04 04 10 0E                  DB $04, $04, $10, $0E, $11, $11
  25++E936 11 11
  26++E938 08 03 1C 0D                  DB $08, $03, $1C, $0D, $11, $11
  26++E93C 11 11
  27++E93E 08 03 1C 8D                  DB $08, $03, $1C, $8D, $11, $11
  27++E942 11 11
  28++E944 14 04 10 D4                  DB $14, $04, $10, $D4, $00, $00
  28++E948 00 00
  29++E94A 14 04 10 54                  DB $14, $04, $10, $54, $00, $00
  29++E94E 00 00
  30++E950 18 07 14 F4                  DB $18, $07, $14, $F4, $00, $00
  30++E954 00 00
  31++E956 10 07 14 F0                  DB $10, $07, $14, $F0, $00, $00
  31++E95A 00 00
  32++E95C 10 07 14 70                  DB $10, $07, $14, $70, $00, $00
  32++E960 00 00
  33++E962 18 07 14 74                  DB $18, $07, $14, $74, $00, $00
  33++E966 00 00
  34++E968 08 04 20 AD                  DB $08, $04, $20, $AD, $44, $44
  34++E96C 44 44
  35++E96E 08 04 20 2D                  DB $08, $04, $20, $2D, $44, $44
  35++E972 44 44
  36++E974 08 04 20 6E                  DB $08, $04, $20, $6E, $44, $44
  36++E978 44 44
  37++E97A 08 04 20 EE                  DB $08, $04, $20, $EE, $44, $44
  37++E97E 44 44
  38++E980 20 04 20 A7                  DB $20, $04, $20, $A7, $44, $44
  38++E984 44 44
  39++E986 20 04 20 27                  DB $20, $04, $20, $27, $44, $44
  39++E98A 44 44
  40++E98C 24 04 20 67                  DB $24, $04, $20, $67, $44, $44
  40++E990 44 44
  41++E992 24 04 20 E7                  DB $24, $04, $20, $E7, $44, $44
  41++E996 44 44
  42++E998 26 00 20 A5                  DB $26, $00, $20, $A5, $44, $44
  42++E99C 44 44
  43++E99E 26 00 20 25                  DB $26, $00, $20, $25, $44, $44
  43++E9A2 44 44
  44++E9A4
  45++E9A4              MambaVertSize: equ $ - MambaVertices
  46++E9A4
  47++E9A4
  48++E9A4
  49++E9A4 1F 20 00 04  MambaEdges:	DB $1F, $20, $00, $04
  50++E9A8 1F 30 00 10  	DB $1F, $30, $00, $10
  51++E9AC 1F 40 04 10  	DB $1F, $40, $04, $10
  52++E9B0 1E 42 04 08  	DB $1E, $42, $04, $08
  53++E9B4 1E 41 08 0C  	DB $1E, $41, $08, $0C
  54++E9B8 1E 43 0C 10  	DB $1E, $43, $0C, $10
  55++E9BC 0E 11 14 18  	DB $0E, $11, $14, $18
  56++E9C0 0C 11 18 1C  	DB $0C, $11, $18, $1C
  57++E9C4 0D 11 1C 20  	DB $0D, $11, $1C, $20
  58++E9C8 0C 11 14 20  	DB $0C, $11, $14, $20
  59++E9CC 14 00 24 2C  	DB $14, $00, $24, $2C
  60++E9D0 10 00 24 30  	DB $10, $00, $24, $30
  61++E9D4 10 00 28 34  	DB $10, $00, $28, $34
  62++E9D8 14 00 28 38  	DB $14, $00, $28, $38
  63++E9DC 0E 00 34 38  	DB $0E, $00, $34, $38
  64++E9E0 0E 00 2C 30  	DB $0E, $00, $2C, $30
  65++E9E4 0D 44 3C 40  	DB $0D, $44, $3C, $40
  66++E9E8 0E 44 44 48  	DB $0E, $44, $44, $48
  67++E9EC 0C 44 3C 48  	DB $0C, $44, $3C, $48
  68++E9F0 0C 44 40 44  	DB $0C, $44, $40, $44
  69++E9F4 07 44 50 54  	DB $07, $44, $50, $54
  70++E9F8 05 44 50 60  	DB $05, $44, $50, $60
  71++E9FC 05 44 54 60  	DB $05, $44, $54, $60
  72++EA00 07 44 4C 58  	DB $07, $44, $4C, $58
  73++EA04 05 44 4C 5C  	DB $05, $44, $4C, $5C
  74++EA08 05 44 58 5C  	DB $05, $44, $58, $5C
  75++EA0C 1E 21 00 08  	DB $1E, $21, $00, $08
  76++EA10 1E 31 00 0C  	DB $1E, $31, $00, $0C
  77++EA14
  78++EA14              MambaEdgesSize: equ $ - MambaEdges
  79++EA14
  80++EA14
  81++EA14              MambaEdgesCnt: equ MambaEdgesSize/4
  82++EA14
  83++EA14
  84++EA14 5E 00 18 02  MambaNormals:	DB $5E, $00, $18, $02
  85++EA18 1E 00 18 02  	DB $1E, $00, $18, $02
  86++EA1C 9E 20 40 10  	DB $9E, $20, $40, $10
  87++EA20 1E 20 40 10  	DB $1E, $20, $40, $10
  88++EA24 3E 00 00 7F  	DB $3E, $00, $00, $7F
  89++EA28
  90++EA28              MambaNormalsSize: equ $ - MambaNormals
  91++EA28              MambaLen: equ $ - Mamba
  92++EA28
# file closed: ./Data/ships/Mamba.asm
  91+ EA28                                      include "Data/ships/Missile.asm"
# file opened: ./Data/ships/Missile.asm
   1++EA28 00           Missile:	            DB $00
   2++EA29 40 06                                DW $0640
   3++EA2B A9 EA                                DW MissileEdges
   4++EA2D 60                                   DB MissileEdgesSize
   5++EA2E 00 0A                                DB $00, $0A
   6++EA30 11                                   DB MissileVertSize /6
   7++EA31 66                                   DB MissileVertSize
   8++EA32 18                                   DB MissileEdgesCnt
   9++EA33 00 00                                DB $00, $00
  10++EA35 24                                   DB MissileNormalsSize
  11++EA36 0E 02 2C                             DB $0E, $02, $2C
  12++EA39 09 EB                                DW MissileNormals
  13++EA3B 02 00                                DB $02, $00
  14++EA3D 43 EA                                DW MissileVertices
  15++EA3F 01 00                                DB ShipTypeMissile,0                      ; Type and Tactics
  16++EA41 00                                   DB 0
  17++EA42 00                                   DB $00                      ; chance of ECM module
  18++EA43
  19++EA43 00 00 44 1F  MissileVertices:	DB $00, $00, $44, $1F, $10, $32
  19++EA47 10 32
  20++EA49 08 08 24 5F                      DB $08, $08, $24, $5F, $21, $54
  20++EA4D 21 54
  21++EA4F 08 08 24 1F                      DB $08, $08, $24, $1F, $32, $74
  21++EA53 32 74
  22++EA55 08 08 24 9F                      DB $08, $08, $24, $9F, $30, $76
  22++EA59 30 76
  23++EA5B 08 08 24 DF                      DB $08, $08, $24, $DF, $10, $65
  23++EA5F 10 65
  24++EA61 08 08 2C 3F                      DB $08, $08, $2C, $3F, $74, $88
  24++EA65 74 88
  25++EA67 08 08 2C 7F                      DB $08, $08, $2C, $7F, $54, $88
  25++EA6B 54 88
  26++EA6D 08 08 2C FF                      DB $08, $08, $2C, $FF, $65, $88
  26++EA71 65 88
  27++EA73 08 08 2C BF                      DB $08, $08, $2C, $BF, $76, $88
  27++EA77 76 88
  28++EA79 0C 0C 2C 28                      DB $0C, $0C, $2C, $28, $74, $88
  28++EA7D 74 88
  29++EA7F 0C 0C 2C 68                      DB $0C, $0C, $2C, $68, $54, $88
  29++EA83 54 88
  30++EA85 0C 0C 2C E8                      DB $0C, $0C, $2C, $E8, $65, $88
  30++EA89 65 88
  31++EA8B 0C 0C 2C A8                      DB $0C, $0C, $2C, $A8, $76, $88
  31++EA8F 76 88
  32++EA91 08 08 0C A8                      DB $08, $08, $0C, $A8, $76, $77
  32++EA95 76 77
  33++EA97 08 08 0C E8                      DB $08, $08, $0C, $E8, $65, $66
  33++EA9B 65 66
  34++EA9D 08 08 0C 28                      DB $08, $08, $0C, $28, $74, $77
  34++EAA1 74 77
  35++EAA3 08 08 0C 68                      DB $08, $08, $0C, $68, $54, $55
  35++EAA7 54 55
  36++EAA9
  37++EAA9              MissileVertSize: equ $ - MissileVertices
  38++EAA9
  39++EAA9
  40++EAA9
  41++EAA9 1F 21 00 04  MissileEdges:	DB $1F, $21, $00, $04
  42++EAAD 1F 32 00 08  	DB $1F, $32, $00, $08
  43++EAB1 1F 30 00 0C  	DB $1F, $30, $00, $0C
  44++EAB5 1F 10 00 10  	DB $1F, $10, $00, $10
  45++EAB9 1F 24 04 08  	DB $1F, $24, $04, $08
  46++EABD 1F 51 04 10  	DB $1F, $51, $04, $10
  47++EAC1 1F 60 0C 10  	DB $1F, $60, $0C, $10
  48++EAC5 1F 73 08 0C  	DB $1F, $73, $08, $0C
  49++EAC9 1F 74 08 14  	DB $1F, $74, $08, $14
  50++EACD 1F 54 04 18  	DB $1F, $54, $04, $18
  51++EAD1 1F 65 10 1C  	DB $1F, $65, $10, $1C
  52++EAD5 1F 76 0C 20  	DB $1F, $76, $0C, $20
  53++EAD9 1F 86 1C 20  	DB $1F, $86, $1C, $20
  54++EADD 1F 87 14 20  	DB $1F, $87, $14, $20
  55++EAE1 1F 84 14 18  	DB $1F, $84, $14, $18
  56++EAE5 1F 85 18 1C  	DB $1F, $85, $18, $1C
  57++EAE9 08 85 18 28  	DB $08, $85, $18, $28
  58++EAED 08 87 14 24  	DB $08, $87, $14, $24
  59++EAF1 08 87 20 30  	DB $08, $87, $20, $30
  60++EAF5 08 85 1C 2C  	DB $08, $85, $1C, $2C
  61++EAF9 08 74 24 3C  	DB $08, $74, $24, $3C
  62++EAFD 08 54 28 40  	DB $08, $54, $28, $40
  63++EB01 08 76 30 34  	DB $08, $76, $30, $34
  64++EB05 08 65 2C 38  	DB $08, $65, $2C, $38
  65++EB09
  66++EB09              MissileEdgesSize: equ $ - MissileEdges
  67++EB09
  68++EB09
  69++EB09              MissileEdgesCnt: equ MissileEdgesSize/4
  70++EB09
  71++EB09
  72++EB09 9F 40 00 10  MissileNormals:	DB $9F, $40, $00, $10
  73++EB0D 5F 00 40 10  	DB $5F, $00, $40, $10
  74++EB11 1F 40 00 10  	DB $1F, $40, $00, $10
  75++EB15 1F 00 40 10  	DB $1F, $00, $40, $10
  76++EB19 1F 20 00 00  	DB $1F, $20, $00, $00
  77++EB1D 5F 00 20 00  	DB $5F, $00, $20, $00
  78++EB21 9F 20 00 00  	DB $9F, $20, $00, $00
  79++EB25 1F 00 20 00  	DB $1F, $00, $20, $00
  80++EB29 3F 00 00 B0  	DB $3F, $00, $00, $B0
  81++EB2D
  82++EB2D
  83++EB2D              MissileNormalsSize: equ $ - MissileNormals
  84++EB2D              MissileLen: equ $ - Missile
  85++EB2D
# file closed: ./Data/ships/Missile.asm
  92+ EB2D                                      include "Data/ships/Monitor.asm"
# file opened: ./Data/ships/Monitor.asm
   1++EB2D 04           Monitor:	            DB $04
   2++EB2E 00 36                                DW $3600
   3++EB30 AE EB                                DW MonitorEdges
   4++EB32 5C                                   DB MonitorEdgesSize
   5++EB33 00 2A                                DB $00, $2A
   6++EB35 11                                   DB MonitorVertSize /6
   7++EB36 66                                   DB MonitorVertSize
   8++EB37 17                                   DB MonitorEdgesCnt
   9++EB38 01 90                                DB $01, $90
  10++EB3A 2C                                   DB MonitorNormalsSize
  11++EB3B 28 84 10                             DB $28, $84, $10
  12++EB3E 0A EC                                DW MonitorNormals
  13++EB40 00 37                                DB $00, $37
  14++EB42 48 EB                                DW MonitorVertices
  15++EB44 00 00                                DB 0,0                      ; Type and Tactics
  16++EB46 01                                   DB ShipCanAnger
  17++EB47 40                                   DB $40                      ; chance of ECM module
  18++EB48
  19++EB48 00 0A 8C 1F  MonitorVertices:	    DB $00, $0A, $8C, $1F, $FF, $FF
  19++EB4C FF FF
  20++EB4E 14 28 14 3F                          DB $14, $28, $14, $3F, $23, $01
  20++EB52 23 01
  21++EB54 14 28 14 BF                          DB $14, $28, $14, $BF, $50, $34
  21++EB58 50 34
  22++EB5A 32 00 0A 1F                          DB $32, $00, $0A, $1F, $78, $12
  22++EB5E 78 12
  23++EB60 32 00 0A 9F                          DB $32, $00, $0A, $9F, $96, $45
  23++EB64 96 45
  24++EB66 1E 04 3C 3F                          DB $1E, $04, $3C, $3F, $AA, $28
  24++EB6A AA 28
  25++EB6C 1E 04 3C BF                          DB $1E, $04, $3C, $BF, $AA, $49
  25++EB70 AA 49
  26++EB72 12 14 3C 3F                          DB $12, $14, $3C, $3F, $AA, $23
  26++EB76 AA 23
  27++EB78 12 14 3C BF                          DB $12, $14, $3C, $BF, $AA, $34
  27++EB7C AA 34
  28++EB7E 00 14 3C 7F                          DB $00, $14, $3C, $7F, $AA, $89
  28++EB82 AA 89
  29++EB84 00 28 0A 5F                          DB $00, $28, $0A, $5F, $89, $67
  29++EB88 89 67
  30++EB8A 00 22 0A 0A                          DB $00, $22, $0A, $0A, $00, $00
  30++EB8E 00 00
  31++EB90 00 1A 32 0A                          DB $00, $1A, $32, $0A, $00, $00
  31++EB94 00 00
  32++EB96 14 0A 3C 4A                          DB $14, $0A, $3C, $4A, $77, $77
  32++EB9A 77 77
  33++EB9C 0A 00 64 0A                          DB $0A, $00, $64, $0A, $77, $77
  33++EBA0 77 77
  34++EBA2 14 0A 3C CA                          DB $14, $0A, $3C, $CA, $66, $66
  34++EBA6 66 66
  35++EBA8 0A 00 64 8A                          DB $0A, $00, $64, $8A, $66, $66
  35++EBAC 66 66
  36++EBAE              MonitorVertSize:        equ $ - MonitorVertices
  37++EBAE 1F 01 00 04  MonitorEdges:	        DB $1F, $01, $00, $04
  38++EBB2 1F 12 04 0C  	                    DB $1F, $12, $04, $0C
  39++EBB6 1F 23 04 1C                          DB $1F, $23, $04, $1C
  40++EBBA 1F 34 08 20                          DB $1F, $34, $08, $20
  41++EBBE 1F 45 08 10                          DB $1F, $45, $08, $10
  42++EBC2 1F 50 00 08                          DB $1F, $50, $00, $08
  43++EBC6 1F 03 04 08                          DB $1F, $03, $04, $08
  44++EBCA 1F 67 00 28                          DB $1F, $67, $00, $28
  45++EBCE 1F 78 0C 28                          DB $1F, $78, $0C, $28
  46++EBD2 1F 89 24 28                          DB $1F, $89, $24, $28
  47++EBD6 1F 96 10 28                          DB $1F, $96, $10, $28
  48++EBDA 1F 17 00 0C                          DB $1F, $17, $00, $0C
  49++EBDE 1F 28 0C 14                          DB $1F, $28, $0C, $14
  50++EBE2 1F 49 18 10                          DB $1F, $49, $18, $10
  51++EBE6 1F 56 10 00                          DB $1F, $56, $10, $00
  52++EBEA 1F 2A 1C 14                          DB $1F, $2A, $1C, $14
  53++EBEE 1F 3A 20 1C                          DB $1F, $3A, $20, $1C
  54++EBF2 1F 4A 20 18                          DB $1F, $4A, $20, $18
  55++EBF6 1F 8A 14 24                          DB $1F, $8A, $14, $24
  56++EBFA 1F 9A 18 24                          DB $1F, $9A, $18, $24
  57++EBFE 0A 00 2C 30                          DB $0A, $00, $2C, $30
  58++EC02 0A 77 34 38                          DB $0A, $77, $34, $38
  59++EC06 0A 66 3C 40                          DB $0A, $66, $3C, $40
  60++EC0A              MonitorEdgesSize:       equ $ - MonitorEdges
  61++EC0A              MonitorEdgesCnt:        equ MonitorEdgesSize/4
  62++EC0A 1F 00 3E 0B  MonitorNormals:	        DB $1F, $00, $3E, $0B
  63++EC0E 1F 2C 2B 0D                          DB $1F, $2C, $2B, $0D
  64++EC12 3F 36 1C 10                          DB $3F, $36, $1C, $10
  65++EC16 3F 00 39 1C                          DB $3F, $00, $39, $1C
  66++EC1A BF 36 1C 10                          DB $BF, $36, $1C, $10
  67++EC1E 9F 2C 2B 0D                          DB $9F, $2C, $2B, $0D
  68++EC22 DF 26 2F 12                          DB $DF, $26, $2F, $12
  69++EC26 5F 26 2F 12                          DB $5F, $26, $2F, $12
  70++EC2A 7F 27 30 0D                          DB $7F, $27, $30, $0D
  71++EC2E FF 27 30 0D                          DB $FF, $27, $30, $0D
  72++EC32 3F 00 00 40                          DB $3F, $00, $00, $40
  73++EC36              MonitorNormalsSize:     equ $ - MonitorNormals
  74++EC36              MonitorLen:             equ $ - Monitor
  75++EC36
# file closed: ./Data/ships/Monitor.asm
  93+ EC36                                      include "Data/ships/Moray.asm"
# file opened: ./Data/ships/Moray.asm
   1++EC36 01           Moray:	                DB $01
   2++EC37 84 03                                DW $0384
   3++EC39 A5 EC                                DW MorayEdges
   4++EC3B 4C                                   DB MorayEdgesSize
   5++EC3C 00 1A                                DB $00, $1A
   6++EC3E 0E                                   DB MorayVertSize /6
   7++EC3F 54                                   DB MorayVertSize
   8++EC40 13                                   DB MorayEdgesCnt
   9++EC41 00 32                                DB $00, $32
  10++EC43 24                                   DB MorayNormalsSize
  11++EC44 28 59 19                             DB $28, $59, $19
  12++EC47 F1 EC                                DW MorayNormals
  13++EC49 02 2A                                DB $02, $2A
  14++EC4B 51 EC                                DW MorayVertices
  15++EC4D 00 00                                DB 0,0                      ; Type and Tactics
  16++EC4F 01                                   DB ShipCanAnger
  17++EC50 C0                                   DB $C0                      ; chance of ECM module
  18++EC51
  19++EC51 0F 00 41 1F  MorayVertices:	        DB $0F, $00, $41, $1F, $02, $78
  19++EC55 02 78
  20++EC57 0F 00 41 9F                          DB $0F, $00, $41, $9F, $01, $67
  20++EC5B 01 67
  21++EC5D 00 12 28 31                          DB $00, $12, $28, $31, $FF, $FF
  21++EC61 FF FF
  22++EC63 3C 00 00 9F                          DB $3C, $00, $00, $9F, $13, $66
  22++EC67 13 66
  23++EC69 3C 00 00 1F                          DB $3C, $00, $00, $1F, $25, $88
  23++EC6D 25 88
  24++EC6F 1E 1B 0A 78                          DB $1E, $1B, $0A, $78, $45, $78
  24++EC73 45 78
  25++EC75 1E 1B 0A F8                          DB $1E, $1B, $0A, $F8, $34, $67
  25++EC79 34 67
  26++EC7B 09 04 19 E7                          DB $09, $04, $19, $E7, $44, $44
  26++EC7F 44 44
  27++EC81 09 04 19 67                          DB $09, $04, $19, $67, $44, $44
  27++EC85 44 44
  28++EC87 00 12 10 67                          DB $00, $12, $10, $67, $44, $44
  28++EC8B 44 44
  29++EC8D 0D 03 31 05                          DB $0D, $03, $31, $05, $00, $00
  29++EC91 00 00
  30++EC93 06 00 41 05                          DB $06, $00, $41, $05, $00, $00
  30++EC97 00 00
  31++EC99 0D 03 31 85                          DB $0D, $03, $31, $85, $00, $00
  31++EC9D 00 00
  32++EC9F 06 00 41 85                          DB $06, $00, $41, $85, $00, $00
  32++ECA3 00 00
  33++ECA5              MorayVertSize:          equ $ - MorayVertices
  34++ECA5 1F 07 00 04  MorayEdges:	            DB $1F, $07, $00, $04
  35++ECA9 1F 16 04 0C                          DB $1F, $16, $04, $0C
  36++ECAD 18 36 0C 18                          DB $18, $36, $0C, $18
  37++ECB1 18 47 14 18                          DB $18, $47, $14, $18
  38++ECB5 18 58 10 14                          DB $18, $58, $10, $14
  39++ECB9 1F 28 00 10                          DB $1F, $28, $00, $10
  40++ECBD 0F 67 04 18                          DB $0F, $67, $04, $18
  41++ECC1 0F 78 00 14                          DB $0F, $78, $00, $14
  42++ECC5 0F 02 00 08                          DB $0F, $02, $00, $08
  43++ECC9 0F 01 04 08                          DB $0F, $01, $04, $08
  44++ECCD 11 13 08 0C                          DB $11, $13, $08, $0C
  45++ECD1 11 25 08 10                          DB $11, $25, $08, $10
  46++ECD5 0D 45 08 14                          DB $0D, $45, $08, $14
  47++ECD9 0D 34 08 18                          DB $0D, $34, $08, $18
  48++ECDD 05 44 1C 20                          DB $05, $44, $1C, $20
  49++ECE1 07 44 1C 24                          DB $07, $44, $1C, $24
  50++ECE5 07 44 20 24                          DB $07, $44, $20, $24
  51++ECE9 05 00 28 2C                          DB $05, $00, $28, $2C
  52++ECED 05 00 30 34                          DB $05, $00, $30, $34
  53++ECF1              MorayEdgesSize:         equ $ - MorayEdges
  54++ECF1              MorayEdgesCnt:          equ MorayEdgesSize/4
  55++ECF1 1F 00 2B 07  MorayNormals:	        DB $1F, $00, $2B, $07
  56++ECF5 9F 0A 31 07                          DB $9F, $0A, $31, $07
  57++ECF9 1F 0A 31 07                          DB $1F, $0A, $31, $07
  58++ECFD F8 3B 1C 65                          DB $F8, $3B, $1C, $65
  59++ED01 78 00 34 4E                          DB $78, $00, $34, $4E
  60++ED05 78 3B 1C 65                          DB $78, $3B, $1C, $65
  61++ED09 DF 48 63 32                          DB $DF, $48, $63, $32
  62++ED0D 5F 00 53 1E                          DB $5F, $00, $53, $1E
  63++ED11 5F 48 63 32                          DB $5F, $48, $63, $32
  64++ED15
  65++ED15              MorayNormalsSize:       equ $ - MorayNormals
  66++ED15              MorayLen:               equ $ - Moray
  67++ED15
# file closed: ./Data/ships/Moray.asm
  94+ ED15                                      include "Data/ships/Ophidian.asm"
# file opened: ./Data/ships/Ophidian.asm
   1++ED15 02           Ophidian:	            DB $02
   2++ED16 88 0E                                DW $0E88
   3++ED18 A8 ED                                DW OphidianEdges
   4++ED1A 78                                   DB OphidianEdgesSize
   5++ED1B 00 3C                                DB $00, $3C
   6++ED1D 14                                   DB OphidianVertSize /6
   7++ED1E 78                                   DB OphidianVertSize
   8++ED1F 1E                                   DB OphidianEdgesCnt
   9++ED20 00 32                                DB $00, $32
  10++ED22 30                                   DB OphidianNormalsSize
  11++ED23 14 40 22                             DB $14, $40, $22
  12++ED26 20 EE                                DW OphidianNormals
  13++ED28 01 1A                                DB $01, $1A
  14++ED2A 30 ED                                DW OphidianVertices
  15++ED2C 00 00                                DB 0,0                      ; Type and Tactics
  16++ED2E 01                                   DB ShipCanAnger
  17++ED2F C0                                   DB $C0                      ; chance of ECM module
  18++ED30
  19++ED30 14 00 46 9F  OphidianVertices:	    DB $14, $00, $46, $9F, $68, $02 ; 01
  19++ED34 68 02
  20++ED36 14 00 46 1F                          DB $14, $00, $46, $1F, $67, $01 ; 02
  20++ED3A 67 01
  21++ED3C 00 0A 28 1F                          DB $00, $0A, $28, $1F, $22, $01 ; 03
  21++ED40 22 01
  22++ED42 1E 00 1E 9F                          DB $1E, $00, $1E, $9F, $8A, $24 ; 04
  22++ED46 8A 24
  23++ED48 1E 00 1E 1F                          DB $1E, $00, $1E, $1F, $79, $13 ; 05
  23++ED4C 79 13
  24++ED4E 00 10 0A 1F                          DB $00, $10, $0A, $1F, $FF, $FF ; 06
  24++ED52 FF FF
  25++ED54 14 0A 32 3F                          DB $14, $0A, $32, $3F, $9B, $35 ; 07
  25++ED58 9B 35
  26++ED5A 14 0A 32 BF                          DB $14, $0A, $32, $BF, $AB, $45 ; 08
  26++ED5E AB 45
  27++ED60 1E 00 32 BF                          DB $1E, $00, $32, $BF, $BB, $4A ; 09
  27++ED64 BB 4A
  28++ED66 28 00 32 B0                          DB $28, $00, $32, $B0, $FF, $FF ; 10
  28++ED6A FF FF
  29++ED6C 1E 00 1E B0                          DB $1E, $00, $1E, $B0, $FF, $FF ; 11
  29++ED70 FF FF
  30++ED72 1E 00 32 3F                          DB $1E, $00, $32, $3F, $BB, $39 ; 12
  30++ED76 BB 39
  31++ED78 28 00 32 30                          DB $28, $00, $32, $30, $FF, $FF ; 13
  31++ED7C FF FF
  32++ED7E 1E 00 1E 30                          DB $1E, $00, $1E, $30, $FF, $FF ; 14
  32++ED82 FF FF
  33++ED84 00 0A 32 7F                          DB $00, $0A, $32, $7F, $BB, $9A ; 15
  33++ED88 BB 9A
  34++ED8A 00 10 14 5F                          DB $00, $10, $14, $5F, $FF, $FF ; 16
  34++ED8E FF FF
  35++ED90 0A 04 32 30                          DB $0A, $04, $32, $30, $BB, $BB ; 17
  35++ED94 BB BB
  36++ED96 0A 02 32 70                          DB $0A, $02, $32, $70, $BB, $BB ; 18
  36++ED9A BB BB
  37++ED9C 0A 02 32 F0                          DB $0A, $02, $32, $F0, $BB, $BB ; 19
  37++EDA0 BB BB
  38++EDA2 0A 04 32 B0                          DB $0A, $04, $32, $B0, $BB, $BB ; 20
  38++EDA6 BB BB
  39++EDA8
  40++EDA8              OphidianVertSize:       equ $ - OphidianVertices
  41++EDA8 1F 06 00 04  OphidianEdges:	        DB $1F, $06, $00, $04
  42++EDAC 1F 01 04 08                          DB $1F, $01, $04, $08
  43++EDB0 1F 02 00 08                          DB $1F, $02, $00, $08
  44++EDB4 1F 12 08 14                          DB $1F, $12, $08, $14
  45++EDB8 1F 13 10 14                          DB $1F, $13, $10, $14
  46++EDBC 1F 24 0C 14                          DB $1F, $24, $0C, $14
  47++EDC0 1F 35 14 18                          DB $1F, $35, $14, $18
  48++EDC4 1F 45 14 1C                          DB $1F, $45, $14, $1C
  49++EDC8 1F 28 00 0C                          DB $1F, $28, $00, $0C
  50++EDCC 1F 17 04 10                          DB $1F, $17, $04, $10
  51++EDD0 1F 39 10 2C                          DB $1F, $39, $10, $2C
  52++EDD4 1F 4A 0C 20                          DB $1F, $4A, $0C, $20
  53++EDD8 1F 67 04 3C                          DB $1F, $67, $04, $3C
  54++EDDC 1F 68 00 3C                          DB $1F, $68, $00, $3C
  55++EDE0 1F 79 10 3C                          DB $1F, $79, $10, $3C
  56++EDE4 1F 8A 0C 3C                          DB $1F, $8A, $0C, $3C
  57++EDE8 1F 9A 38 3C                          DB $1F, $9A, $38, $3C
  58++EDEC 1F 5B 18 1C                          DB $1F, $5B, $18, $1C
  59++EDF0 1F 3B 18 2C                          DB $1F, $3B, $18, $2C
  60++EDF4 1F 4B 1C 20                          DB $1F, $4B, $1C, $20
  61++EDF8 1F 9B 2C 38                          DB $1F, $9B, $2C, $38
  62++EDFC 1F AB 20 38                          DB $1F, $AB, $20, $38
  63++EE00 10 BB 40 44                          DB $10, $BB, $40, $44
  64++EE04 10 BB 44 48                          DB $10, $BB, $44, $48
  65++EE08 10 BB 48 4C                          DB $10, $BB, $48, $4C
  66++EE0C 10 BB 4C 40                          DB $10, $BB, $4C, $40
  67++EE10 10 39 30 34                          DB $10, $39, $30, $34
  68++EE14 10 39 2C 30                          DB $10, $39, $2C, $30
  69++EE18 10 4A 28 24                          DB $10, $4A, $28, $24
  70++EE1C 10 4A 24 20                          DB $10, $4A, $24, $20
  71++EE20              OphidianEdgesSize:      equ $ - OphidianEdges
  72++EE20              OphidianEdgesCnt:       equ OphidianEdgesSize/4
  73++EE20
  74++EE20 1F 00 25 0C  OphidianNormals:	    DB $1F, $00, $25, $0C
  75++EE24 1F 0B 1C 05                          DB $1F, $0B, $1C, $05
  76++EE28 9F 0B 1C 05                          DB $9F, $0B, $1C, $05
  77++EE2C 1F 10 22 02                          DB $1F, $10, $22, $02
  78++EE30 9F 10 22 02                          DB $9F, $10, $22, $02
  79++EE34 3F 00 25 03                          DB $3F, $00, $25, $03
  80++EE38 5F 00 1F 0A                          DB $5F, $00, $1F, $0A
  81++EE3C 5F 0A 14 02                          DB $5F, $0A, $14, $02
  82++EE40 DF 0A 14 02                          DB $DF, $0A, $14, $02
  83++EE44 7F 12 20 02                          DB $7F, $12, $20, $02
  84++EE48 FF 12 20 02                          DB $FF, $12, $20, $02
  85++EE4C 3F 00 00 25                          DB $3F, $00, $00, $25
  86++EE50
  87++EE50              OphidianNormalsSize:    equ $ - OphidianNormals
  88++EE50              OphidianLen:            equ $ - Ophidian
  89++EE50
# file closed: ./Data/ships/Ophidian.asm
  95+ EE50                                      include "Data/ships/Plate.asm"
# file opened: ./Data/ships/Plate.asm
   1++EE50 80           Plate:	                DB $80
   2++EE51 64 00                                DW $0064
   3++EE53 7D EE                                DW PlateEdges
   4++EE55 10                                   DB PlateEdgesSize
   5++EE56 00 0A                                DB $00, $0A
   6++EE58 03                                   DB PlateVertSize /6
   7++EE59 12                                   DB PlateVertSize
   8++EE5A 04                                   DB PlateEdgesCnt
   9++EE5B 00 00                                DB $00, $00
  10++EE5D 04                                   DB PlateNormalsSize
  11++EE5E 05 10 10                             DB $05, $10, $10
  12++EE61 8D EE                                DW PlateNormals
  13++EE63 03 00                                DB $03, $00
  14++EE65 6B EE                                DW PlateVertices
  15++EE67 00 00                                DB 0,0                      ; Type and Tactics
  16++EE69 01                                   DB ShipCanAnger
  17++EE6A 00                                   DB $00                      ; chance of ECM module
  18++EE6B
  19++EE6B
  20++EE6B 0F 16 09 FF  PlateVertices:	        DB $0F, $16, $09, $FF, $FF, $FF
  20++EE6F FF FF
  21++EE71 0F 26 09 BF                          DB $0F, $26, $09, $BF, $FF, $FF
  21++EE75 FF FF
  22++EE77 13 20 0B 14                          DB $13, $20, $0B, $14, $FF, $FF
  22++EE7B FF FF
  23++EE7D
  24++EE7D              PlateVertSize: equ $ - PlateVertices
  25++EE7D
  26++EE7D
  27++EE7D
  28++EE7D 1F FF 00 04  PlateEdges:	DB $1F, $FF, $00, $04
  29++EE81 10 FF 04 08  	DB $10, $FF, $04, $08
  30++EE85 14 FF 08 0C  	DB $14, $FF, $08, $0C
  31++EE89 10 FF 0C 00  	DB $10, $FF, $0C, $00
  32++EE8D
  33++EE8D              PlateEdgesSize: equ $ - PlateEdges
  34++EE8D
  35++EE8D
  36++EE8D              PlateEdgesCnt: equ PlateEdgesSize/4
  37++EE8D
  38++EE8D
  39++EE8D 00 00 00 00  PlateNormals:	DB $00, $00, $00, $00
  40++EE91
  41++EE91
  42++EE91              PlateNormalsSize: equ $ - PlateNormals
  43++EE91              PlateLen: equ $ - Plate
  44++EE91
# file closed: ./Data/ships/Plate.asm
  96+ EE91                                      include "Data/ships/Python.asm"
# file opened: ./Data/ships/Python.asm
   1++EE91              ;\ -> &5BA1 \ Python = Type 12
   2++EE91 05           Python:                 DB $05
   3++EE92 00 19                                DW $1900
   4++EE94 EE EE                                DW PythonEdges
   5++EE96 68                                   DB PythonEdgesSize
   6++EE97 00 2A                                DB $00,$2A
   7++EE99 0B                                   DB PythonVertSize /6
   8++EE9A 42                                   DB PythonVertSize
   9++EE9B 1A                                   DB PythonEdgesCnt
  10++EE9C 00 00                                DB $00,$00
  11++EE9E 34                                   DB PythonNormalsSize
  12++EE9F 28 FA 14                             DB $28,$FA,$14
  13++EEA2 56 EF                                DW PythonNormals
  14++EEA4 00 1B                                DB $00, $1B
  15++EEA6 AC EE                                DW PythonVertices
  16++EEA8 00 00                                DB 0,0                      ; Type and Tactics
  17++EEAA 01                                   DB ShipCanAnger
  18++EEAB E0                                   DB $E0                      ; chance of ECM module
  19++EEAC
  20++EEAC 00 00 E0 1F  PythonVertices:         DB $00, $00, $E0, $1F, $10, $32
  20++EEB0 10 32
  21++EEB2 00 30 30 1E                          DB $00, $30, $30, $1E, $10, $54
  21++EEB6 10 54
  22++EEB8 60 00 10 3F                          DB $60, $00, $10, $3F, $FF, $FF
  22++EEBC FF FF
  23++EEBE 60 00 10 BF                          DB $60, $00, $10, $BF, $FF, $FF
  23++EEC2 FF FF
  24++EEC4 00 30 20 3E                          DB $00, $30, $20, $3E, $54, $98
  24++EEC8 54 98
  25++EECA 00 18 70 3F                          DB $00, $18, $70, $3F, $89, $CC
  25++EECE 89 CC
  26++EED0 30 00 70 BF                          DB $30, $00, $70, $BF, $B8, $CC
  26++EED4 B8 CC
  27++EED6 30 00 70 3F                          DB $30, $00, $70, $3F, $A9, $CC
  27++EEDA A9 CC
  28++EEDC 00 30 30 5E                          DB $00, $30, $30, $5E, $32, $76
  28++EEE0 32 76
  29++EEE2 00 30 20 7E                          DB $00, $30, $20, $7E, $76, $BA
  29++EEE6 76 BA
  30++EEE8 00 18 70 7E                          DB $00, $18, $70, $7E, $BA, $CC
  30++EEEC BA CC
  31++EEEE              PythonVertSize          equ $  - PythonVertices
  32++EEEE 1E 32 00 20  PythonEdges:            DB $1E, $32, $00, $20, $1F, $20, $00, $0C
  32++EEF2 1F 20 00 0C
  33++EEF6 1F 31 00 08                          DB $1F, $31, $00, $08, $1E, $10, $00, $04
  33++EEFA 1E 10 00 04
  34++EEFE 1D 59 08 10                          DB $1D, $59, $08, $10, $1D, $51, $04, $08
  34++EF02 1D 51 04 08
  35++EF06 1D 37 08 20                          DB $1D, $37, $08, $20, $1D, $40, $04, $0C
  35++EF0A 1D 40 04 0C
  36++EF0E 1D 62 0C 20                          DB $1D, $62, $0C, $20, $1D, $A7, $08, $24
  36++EF12 1D A7 08 24
  37++EF16 1D 84 0C 10                          DB $1D, $84, $0C, $10, $1D, $B6, $0C, $24
  37++EF1A 1D B6 0C 24
  38++EF1E 05 88 0C 14                          DB $05, $88, $0C, $14, $05, $BB, $0C, $28
  38++EF22 05 BB 0C 28
  39++EF26 05 99 08 14                          DB $05, $99, $08, $14, $05, $AA, $08, $28
  39++EF2A 05 AA 08 28
  40++EF2E 1F A9 08 1C                          DB $1F, $A9, $08, $1C, $1F, $B8, $0C, $18
  40++EF32 1F B8 0C 18
  41++EF36 1F C8 14 18                          DB $1F, $C8, $14, $18, $1F, $C9, $14, $1C
  41++EF3A 1F C9 14 1C
  42++EF3E 1D AC 1C 28                          DB $1D, $AC, $1C, $28, $1D, $CB, $18, $28
  42++EF42 1D CB 18 28
  43++EF46 1D 98 10 14                          DB $1D, $98, $10, $14, $1D, $BA, $24, $28
  43++EF4A 1D BA 24 28
  44++EF4E 1D 54 04 10                          DB $1D, $54, $04, $10, $1D, $76, $20, $24
  44++EF52 1D 76 20 24
  45++EF56              PythonEdgesSize         equ $  - PythonEdges
  46++EF56              PythonEdgesCnt          equ PythonEdgesSize/4
  47++EF56 9E 1B 28 0B  PythonNormals           DB $9E, $1B, $28, $0B, $1E, $1B, $28, $0B
  47++EF5A 1E 1B 28 0B
  48++EF5E DE 1B 28 0B                          DB $DE, $1B, $28, $0B, $5E, $1B, $28, $0B
  48++EF62 5E 1B 28 0B
  49++EF66 9E 13 26 00                          DB $9E, $13, $26, $00, $1E, $13, $26, $00
  49++EF6A 1E 13 26 00
  50++EF6E DE 13 26 00                          DB $DE, $13, $26, $00, $5E, $13, $26, $00
  50++EF72 5E 13 26 00
  51++EF76 BE 19 25 0B                          DB $BE, $19, $25, $0B, $3E, $19, $25, $0B
  51++EF7A 3E 19 25 0B
  52++EF7E 7E 19 25 0B                          DB $7E, $19, $25, $0B, $FE, $19, $25, $0B
  52++EF82 FE 19 25 0B
  53++EF86 3E 00 00 70                          DB $3E, $00, $00, $70
  54++EF8A              PythonNormalsSize       equ $  - PythonNormals
  55++EF8A              PythonLen               equ $  - Python
  56++EF8A
# file closed: ./Data/ships/Python.asm
  97+ EF8A                                      include "Data/ships/Python_P.asm"
# file opened: ./Data/ships/Python_P.asm
   1++EF8A 02           Python_P:	            DB $02
   2++EF8B 00 19                                DW $1900
   3++EF8D E7 EF                                DW Python_PEdges
   4++EF8F 68                                   DB Python_PEdgesSize
   5++EF90 00 2A                                DB $00, $2A
   6++EF92 0B                                   DB Python_PVertSize /6
   7++EF93 42                                   DB Python_PVertSize
   8++EF94 1A                                   DB Python_PEdgesCnt
   9++EF95 00 C8                                DB $00, $C8
  10++EF97 34                                   DB Python_PNormalsSize
  11++EF98 28 FA 14                             DB $28, $FA, $14
  12++EF9B 4F F0                                DW Python_PNormals
  13++EF9D 00 1B                                DB $00, $1B
  14++EF9F A5 EF                                DW Python_PVertices
  15++EFA1 00 00                                DB 0,0                      ; Type and Tactics
  16++EFA3 01                                   DB ShipCanAnger
  17++EFA4 F0                                   DB $F0                      ; chance of ECM module
  18++EFA5
  19++EFA5 00 00 E0 1F  Python_PVertices:	    DB $00, $00, $E0, $1F, $10, $32
  19++EFA9 10 32
  20++EFAB 00 30 30 1F                          DB $00, $30, $30, $1F, $10, $54
  20++EFAF 10 54
  21++EFB1 60 00 10 3F                          DB $60, $00, $10, $3F, $FF, $FF
  21++EFB5 FF FF
  22++EFB7 60 00 10 BF                          DB $60, $00, $10, $BF, $FF, $FF
  22++EFBB FF FF
  23++EFBD 00 30 20 3F                          DB $00, $30, $20, $3F, $54, $98
  23++EFC1 54 98
  24++EFC3 00 18 70 3F                          DB $00, $18, $70, $3F, $89, $CC
  24++EFC7 89 CC
  25++EFC9 30 00 70 BF                          DB $30, $00, $70, $BF, $B8, $CC
  25++EFCD B8 CC
  26++EFCF 30 00 70 3F                          DB $30, $00, $70, $3F, $A9, $CC
  26++EFD3 A9 CC
  27++EFD5 00 30 30 5F                          DB $00, $30, $30, $5F, $32, $76
  27++EFD9 32 76
  28++EFDB 00 30 20 7F                          DB $00, $30, $20, $7F, $76, $BA
  28++EFDF 76 BA
  29++EFE1 00 18 70 7F                          DB $00, $18, $70, $7F, $BA, $CC
  29++EFE5 BA CC
  30++EFE7
  31++EFE7              Python_PVertSize: equ $ - Python_PVertices
  32++EFE7
  33++EFE7
  34++EFE7
  35++EFE7 1F 32 00 20  Python_PEdges:	DB $1F, $32, $00, $20
  36++EFEB 1F 20 00 0C  	DB $1F, $20, $00, $0C
  37++EFEF 1F 31 00 08  	DB $1F, $31, $00, $08
  38++EFF3 1F 10 00 04  	DB $1F, $10, $00, $04
  39++EFF7 1F 59 08 10  	DB $1F, $59, $08, $10
  40++EFFB 1F 51 04 08  	DB $1F, $51, $04, $08
  41++EFFF 1F 37 08 20  	DB $1F, $37, $08, $20
  42++F003 1F 40 04 0C  	DB $1F, $40, $04, $0C
  43++F007 1F 62 0C 20  	DB $1F, $62, $0C, $20
  44++F00B 1F A7 08 24  	DB $1F, $A7, $08, $24
  45++F00F 1F 84 0C 10  	DB $1F, $84, $0C, $10
  46++F013 1F B6 0C 24  	DB $1F, $B6, $0C, $24
  47++F017 07 88 0C 14  	DB $07, $88, $0C, $14
  48++F01B 07 BB 0C 28  	DB $07, $BB, $0C, $28
  49++F01F 07 99 08 14  	DB $07, $99, $08, $14
  50++F023 07 AA 08 28  	DB $07, $AA, $08, $28
  51++F027 1F A9 08 1C  	DB $1F, $A9, $08, $1C
  52++F02B 1F B8 0C 18  	DB $1F, $B8, $0C, $18
  53++F02F 1F C8 14 18  	DB $1F, $C8, $14, $18
  54++F033 1F C9 14 1C  	DB $1F, $C9, $14, $1C
  55++F037 1F AC 1C 28  	DB $1F, $AC, $1C, $28
  56++F03B 1F CB 18 28  	DB $1F, $CB, $18, $28
  57++F03F 1F 98 10 14  	DB $1F, $98, $10, $14
  58++F043 1F BA 24 28  	DB $1F, $BA, $24, $28
  59++F047 1F 54 04 10  	DB $1F, $54, $04, $10
  60++F04B 1F 76 20 24  	DB $1F, $76, $20, $24
  61++F04F
  62++F04F              Python_PEdgesSize: equ $ - Python_PEdges
  63++F04F
  64++F04F
  65++F04F              Python_PEdgesCnt: equ Python_PEdgesSize/4
  66++F04F
  67++F04F
  68++F04F 9F 1B 28 0B  Python_PNormals:	DB $9F, $1B, $28, $0B
  69++F053 1F 1B 28 0B  	DB $1F, $1B, $28, $0B
  70++F057 DF 1B 28 0B  	DB $DF, $1B, $28, $0B
  71++F05B 5F 1B 28 0B  	DB $5F, $1B, $28, $0B
  72++F05F 9F 13 26 00  	DB $9F, $13, $26, $00
  73++F063 1F 13 26 00  	DB $1F, $13, $26, $00
  74++F067 DF 13 26 00  	DB $DF, $13, $26, $00
  75++F06B 5F 13 26 00  	DB $5F, $13, $26, $00
  76++F06F BF 19 25 0B  	DB $BF, $19, $25, $0B
  77++F073 3F 19 25 0B  	DB $3F, $19, $25, $0B
  78++F077 7F 19 25 0B  	DB $7F, $19, $25, $0B
  79++F07B FF 19 25 0B  	DB $FF, $19, $25, $0B
  80++F07F 3F 00 00 70  	DB $3F, $00, $00, $70
  81++F083
  82++F083
  83++F083              Python_PNormalsSize: equ $ - Python_PNormals
  84++F083              Python_PLen: equ $ - Python_P
  85++F083
# file closed: ./Data/ships/Python_P.asm
  98+ F083
# file closed: ./Data/ShipModelMetaData2.asm
 846  F083              ; Bank 68  ------------------------------------------------------------------------------------------------------------------------
 847  F083                  SLOT    ShipModelsAddr
 848  F083                  PAGE    BankShipModels3
 849  F083              	ORG     ShipModelsAddr, BankShipModels3
 850  E000
 851  E000                  INCLUDE "./Data/ShipBank3Label.asm"
# file opened: ./Data/ShipBank3Label.asm
   1+ E000 53 68 69 70  ShipBank3Label:         DB  "ShipBank3      "
   1+ E004 42 61 6E 6B
   1+ E008 33 20 20 20
   1+ E00C 20 20 20
   2+ E00F
# file closed: ./Data/ShipBank3Label.asm
 852  E00F              GetShipBank3Id:         MGetShipBankId ShipBankTable3
 852  E00F 06 00       >                        ld      b,0
 852  E011 4F          >                        ld      c,a                                 ; c= original ship id
 852  E012 CB 3F       >.ShiftLoop:             srl     a
 852  E014 CB 3F       >                        srl     a
 852  E016 CB 3F       >                        srl     a
 852  E018 CB 3F       >                        srl     a                                   ; divide by 16
 852  E01A 47          >                        ld      b,a                                 ; b = bank nbr
 852  E01B 79          >                        ld      a,c
 852  E01C 50          >                        ld      d,b
 852  E01D 1E 10       >                        ld      e,16
 852  E01F ED 30       >                        mul                                         ; de = 16 * bank number (max is about 15 banks)
 852  E021 93          >                        sub     e                                   ; a= actual model id now
 852  E022 50          >.SelectedBank:          ld      d,b                                 ; save current bank number
 852  E023 47          >                        ld      b,a                                 ; b = adjusted ship nbr
 852  E024 7A          >                        ld      a,d                                 ; a = bank number
 852  E025             >;.. Now b = bank and a = adjusted ship nbr
 852  E025 21 62 E0    >                        ld      hl,ShipBankTable3                        ; a= bank index
 852  E028 ED 31       >                        add     hl,a
 852  E02A ED 31       >                        add     hl,a
 852  E02C 7E          >                        ld      a,(hl)                              ; a = actual bank now
 852  E02D             >                        ClearCarryFlag
 852  E02D B7          >                        or a
 852  E02E C9          >                        ret
 853  E02F              CopyVertsToUniv3:       McopyVertsToUniverse
 853  E02F 2A 2B C3    >                        ld          hl,(VerticesAddyAddr)       ; now the pointers are in Ubnk its easy to read
 853  E032 11 31 C3    >                        ld          de,UBnkHullVerticies
 853  E035 06 00       >                        ld          b,0
 853  E037 3A 1F C3    >                        ld			a,(VertexCtX6Addr)
 853  E03A 4F          >                        ld          c,a
 853  E03B EB          >                        ex          de,hl                       ; dma transfer goes de -> hl i.e. opposite of ldir
 853  E03C CD CB 99    >                        call        memcopy_dma
 853  E03F C9          >                        ret
 854  E040              CopyEdgesToUniv3:       McopyEdgesToUniverse
 854  E040 2A 19 C3    >                        ld          hl,(EdgeAddyAddr)          ; now the pointers are in Ubnk its easy to read
 854  E043 11 21 C4    >                        ld          de,UBnkHullEdges
 854  E046 06 00       >                        ld          b,0
 854  E048 3A 1B C3    >                        ld			a,(LineX4Addr)
 854  E04B 4F          >                        ld          c,a
 854  E04C EB          >                        ex          de,hl                       ; dma transfer goes de -> hl i.e. opposite of ldir
 854  E04D CD CB 99    >                        call        memcopy_dma
 854  E050 C9          >                        ret
 855  E051              CopyNormsToUniv3:       McopyNormsToUniverse
 855  E051 2A 27 C3    >                        ld          hl,(FaceAddyAddr)          ; now the pointers are in Ubnk its easy to read
 855  E054 11 E9 C4    >                        ld          de,UBnkHullNormals
 855  E057 06 00       >                        ld          b,0
 855  E059 3A 23 C3    >                        ld          a,(FaceCtX4Addr)
 855  E05C 4F          >                        ld          c,a
 855  E05D EB          >                        ex          de,hl                       ; dma transfer goes de -> hl i.e. opposite of ldir
 855  E05E CD CB 99    >                        call        memcopy_dma
 855  E061 C9          >                        ret
 856  E062              ShipBankTable3:         MShipBankTable
 856  E062 3B 00       >                        DW      BankShipModels1
 856  E064 43 00       >                        DW      BankShipModels2
 856  E066 44 00       >                        DW      BankShipModels3
 856  E068 45 00       >                        DW      BankShipModels4
 857  E06A              CopyShipToUniverse3     MCopyShipToUniverse     BankShipModels3
 857  E06A 21 2D C0    >                        ld          hl,UBnkShipModelBank
 857  E06D 36 44       >                        ld          (hl),BankShipModels3
 857  E06F 32 2E C0    >                        ld          (UBnKShipModelNbr),a
 857  E072 21 1F E1    >.GetHullDataLength:     ld          hl,ShipModelSizeTable
 857  E075 ED 31       >                        add         hl,a
 857  E077 ED 31       >                        add         hl,a                        ; we won't multiply by 2 as GetInfo is a general purpose routines so would end up x 4
 857  E079 4E          >                        ld          c,(hl)
 857  E07A 23          >                        inc         hl
 857  E07B 46          >                        ld          b,(hl)                      ; bc now equals length of data set
 857  E07C 21 9F E0    >.GetHullDataAddress:    ld          hl,ShipModelTable
 857  E07F ED 31       >                        add         hl,a
 857  E081 ED 31       >                        add         hl,a                        ; now hl = address of ship data value
 857  E083 7E          >                        ld          a,(hl)
 857  E084 23          >                        inc         hl
 857  E085 66          >                        ld          h,(hl)
 857  E086 6F          >                        ld          l,a                         ; now hl = address of ship hull data
 857  E087 11 16 C3    >                        ld          de,UBnkHullCopy             ; Universe bank
 857  E08A 01 1B 00    >                        ld          bc,ShipDataLength
 857  E08D ED B0       >                        ldir
 857  E08F CD 2F E0    >                        call        CopyVertsToUniv
 857  E092 CD 40 E0    >                        call        CopyEdgesToUniv
 857  E095 CD 51 E0    >                        call        CopyNormsToUniv
 857  E098 C9          >                        ret
 858  E099              CopyBodyToUniverse3:    MCopyBodyToUniverse     CopyShipToUniverse3
 858  E099 3E 0D       >                        ld          a,13
 858  E09B CD 6A E0    >                        call        CopyShipToUniverse3
 858  E09E C9          >                        ret
 859  E09F                  INCLUDE "./Data/ShipModelMetaData3.asm"
# file opened: ./Data/ShipModelMetaData3.asm
   1+ E09F 3F E1        ShipModelTable3:         DW Rock_Hermit                             ;32  $30
   2+ E0A1 1C E2                                 DW ShuttleType9                            ;33  $31
   3+ E0A3 55 E3                                 DW Shuttle_Mk_2                            ;34  $32
   4+ E0A5 7A E4                                 DW Sidewinder                              ;35  $33
   5+ E0A7 29 E5                                 DW Splinter                                ;36  $34
   6+ E0A9 84 E5                                 DW TestVector                              ;37  $35
   7+ E0AB E9 E5                                 DW Thargoid                                ;38  $36
   8+ E0AD 0C E7                                 DW Thargon                                 ;39  $37
   9+ E0AF BB E7                                 DW TransportType10                         ;40  $38
  10+ E0B1 A4 E9                                 DW Viper                                   ;41  $39
  11+ E0B3 85 EA                                 DW Worm                                    ;42  $3A
  12+ E0B5 3C EB                                 DW Rattler                                 ;43  $3B
  13+ E0B7 00 00                                 DW 0                                       ;44  $3C
  14+ E0B9 00 00                                 DW 0                                       ;45  $3D
  15+ E0BB 00 00                                 DW 0                                       ;46  $3E
  16+ E0BD 00 00                                 DW 0                                       ;47  $3F
  17+ E0BF 5A E1        ShipVertexTable3:        DW Rock_HermitVertices                     ;32  $30
  18+ E0C1 37 E2                                 DW ShuttleType9Vertices                    ;33  $31
  19+ E0C3 70 E3                                 DW Shuttle_Mk_2Vertices                    ;34  $32
  20+ E0C5 95 E4                                 DW SidewinderVertices                      ;35  $33
  21+ E0C7 44 E5                                 DW SplinterVertices                        ;36  $34
  22+ E0C9 9F E5                                 DW TestVectorVertices                      ;37  $35
  23+ E0CB 04 E6                                 DW ThargoidVertices                        ;38  $36
  24+ E0CD 27 E7                                 DW ThargonVertices                         ;39  $37
  25+ E0CF D6 E7                                 DW TransportType10Vertices                 ;40  $38
  26+ E0D1 BF E9                                 DW ViperVertices                           ;41  $39
  27+ E0D3 A0 EA                                 DW WormVertices                            ;42  $3A
  28+ E0D5 57 EB                                 DW RattlerVertices                         ;43  $3B
  29+ E0D7 00 00                                 DW 0                                       ;44  $3C
  30+ E0D9 00 00                                 DW 0                                       ;45  $3D
  31+ E0DB 00 00                                 DW 0                                       ;46  $3E
  32+ E0DD 00 00                                 DW 0                                       ;47  $3F
  33+ E0DF
  34+ E0DF 90 E1        ShipEdgeTable3:          DW Rock_HermitEdges                        ;32  $30
  35+ E0E1 A9 E2                                 DW ShuttleType9Edges                       ;33  $31
  36+ E0E3 D6 E3                                 DW Shuttle_Mk_2Edges                       ;34  $32
  37+ E0E5 D1 E4                                 DW SidewinderEdges                         ;35  $33
  38+ E0E7 5C E5                                 DW SplinterEdges                           ;36  $34
  39+ E0E9 C9 E5                                 DW TestVectorEdges                         ;37  $35
  40+ E0EB 7C E6                                 DW ThargoidEdges                           ;38  $36
  41+ E0ED 63 E7                                 DW ThargonEdges                            ;39  $37
  42+ E0EF B4 E8                                 DW TransportType10Edges                    ;40  $38
  43+ E0F1 19 EA                                 DW ViperEdges                              ;41  $39
  44+ E0F3 DC EA                                 DW WormEdges                               ;42  $3A
  45+ E0F5 B1 EB                                 DW RattlerEdges                            ;43  $3B
  46+ E0F7 00 00                                 DW 0                                       ;44  $3C
  47+ E0F9 00 00                                 DW 0                                       ;45  $3D
  48+ E0FB 00 00                                 DW 0                                       ;46  $3E
  49+ E0FD 00 00                                 DW 0                                       ;47  $3F
  50+ E0FF
  51+ E0FF E4 E1        ShipNormalTable3:        DW Rock_HermitNormals                      ;32  $30
  52+ E101 21 E3                                 DW ShuttleType9Normals                     ;33  $31
  53+ E103 46 E4                                 DW Shuttle_Mk_2Normals                     ;34  $32
  54+ E105 0D E5                                 DW SidewinderNormals                       ;35  $33
  55+ E107 74 E5                                 DW SplinterNormals                         ;36  $34
  56+ E109 D9 E5                                 DW TestVectorNormals                       ;37  $35
  57+ E10B E4 E6                                 DW ThargoidNormals                         ;38  $36
  58+ E10D 9F E7                                 DW ThargonNormals                          ;39  $37
  59+ E10F 6C E9                                 DW TransportType10Normals                  ;40  $38
  60+ E111 69 EA                                 DW ViperNormals                            ;41  $39
  61+ E113 1C EB                                 DW WormNormals                             ;42  $3A
  62+ E115 B1 EB                                 DW RattlerEdges                            ;43  $3B
  63+ E117 00 00                                 DW 0                                       ;44  $3C
  64+ E119 00 00                                 DW 0                                       ;45  $3D
  65+ E11B 00 00                                 DW 0                                       ;46  $3E
  66+ E11D 00 00                                 DW 0                                       ;47  $3F
  67+ E11F
  68+ E11F DD 00        ShipModelSizeTable3:     DW Rock_HermitLen                          ;32  $30
  69+ E121 39 01                                 DW ShuttleType9Len                         ;33  $31
  70+ E123 25 01                                 DW Shuttle_Mk_2Len                         ;34  $32
  71+ E125 AF 00                                 DW SidewinderLen                           ;35  $33
  72+ E127 5B 00                                 DW SplinterLen                             ;36  $34
  73+ E129 65 00                                 DW TestVectorLen                           ;37  $35
  74+ E12B 23 01                                 DW ThargoidLen                             ;38  $36
  75+ E12D AF 00                                 DW ThargonLen                              ;39  $37
  76+ E12F E9 01                                 DW TransportType10Len                      ;40  $38
  77+ E131 E1 00                                 DW ViperLen                                ;41  $39
  78+ E133 B7 00                                 DW WormLen                                 ;42  $3A
  79+ E135 11 01                                 DW RattlerLen                              ;43  $3B
  80+ E137 00 00                                 DW 0                                       ;44  $3C
  81+ E139 00 00                                 DW 0                                       ;45  $3D
  82+ E13B 00 00                                 DW 0                                       ;46  $3E
  83+ E13D 00 00                                 DW 0                                       ;47  $3F
  84+ E13F
  85+ E13F                                      include "Data/ships/Rock_Hermit.asm"
# file opened: ./Data/ships/Rock_Hermit.asm
   1++E13F 07           Rock_Hermit:	        DB $07
   2++E140 00 19                                DW $1900
   3++E142 90 E1                                DW Rock_HermitEdges
   4++E144 54                                   DB Rock_HermitEdgesSize
   5++E145 00 32                                DB $00, $32
   6++E147 09                                   DB Rock_HermitVertSize /6
   7++E148 36                                   DB Rock_HermitVertSize
   8++E149 15                                   DB Rock_HermitEdgesCnt
   9++E14A 00 00                                DB $00, $00
  10++E14C 38                                   DB Rock_HermitNormalsSize
  11++E14D 32 B4 1E                             DB $32, $B4, $1E
  12++E150 E4 E1                                DW Rock_HermitNormals
  13++E152 01 02                                DB $01, $02
  14++E154 5A E1                                DW Rock_HermitVertices
  15++E156 00 00                                DB 0,0                      ; Type and Tactics
  16++E158 01                                   DB ShipCanAnger
  17++E159 30                                   DB $30                      ; chance of ECM module
  18++E15A
  19++E15A
  20++E15A 00 50 00 1F  Rock_HermitVertices:	DB $00, $50, $00, $1F, $FF, $FF
  20++E15E FF FF
  21++E160 50 0A 00 DF                          DB $50, $0A, $00, $DF, $FF, $FF
  21++E164 FF FF
  22++E166 00 50 00 5F                          DB $00, $50, $00, $5F, $FF, $FF
  22++E16A FF FF
  23++E16C 46 28 00 5F                          DB $46, $28, $00, $5F, $FF, $FF
  23++E170 FF FF
  24++E172 3C 32 00 1F                          DB $3C, $32, $00, $1F, $65, $DC
  24++E176 65 DC
  25++E178 32 00 3C 1F                          DB $32, $00, $3C, $1F, $FF, $FF
  25++E17C FF FF
  26++E17E 28 00 46 9F                          DB $28, $00, $46, $9F, $10, $32
  26++E182 10 32
  27++E184 00 1E 4B 3F                          DB $00, $1E, $4B, $3F, $FF, $FF
  27++E188 FF FF
  28++E18A 00 32 3C 7F                          DB $00, $32, $3C, $7F, $98, $BA
  28++E18E 98 BA
  29++E190
  30++E190
  31++E190              Rock_HermitVertSize: equ $ - Rock_HermitVertices
  32++E190
  33++E190
  34++E190
  35++E190 1F 72 00 04  Rock_HermitEdges:	DB $1F, $72, $00, $04
  36++E194 1F D6 00 10  	DB $1F, $D6, $00, $10
  37++E198 1F C5 0C 10  	DB $1F, $C5, $0C, $10
  38++E19C 1F B4 08 0C  	DB $1F, $B4, $08, $0C
  39++E1A0 1F A3 04 08  	DB $1F, $A3, $04, $08
  40++E1A4 1F 32 04 18  	DB $1F, $32, $04, $18
  41++E1A8 1F 31 08 18  	DB $1F, $31, $08, $18
  42++E1AC 1F 41 08 14  	DB $1F, $41, $08, $14
  43++E1B0 1F 10 14 18  	DB $1F, $10, $14, $18
  44++E1B4 1F 60 00 14  	DB $1F, $60, $00, $14
  45++E1B8 1F 54 0C 14  	DB $1F, $54, $0C, $14
  46++E1BC 1F 20 00 18  	DB $1F, $20, $00, $18
  47++E1C0 1F 65 10 14  	DB $1F, $65, $10, $14
  48++E1C4 1F A8 04 20  	DB $1F, $A8, $04, $20
  49++E1C8 1F 87 04 1C  	DB $1F, $87, $04, $1C
  50++E1CC 1F D7 00 1C  	DB $1F, $D7, $00, $1C
  51++E1D0 1F DC 10 1C  	DB $1F, $DC, $10, $1C
  52++E1D4 1F C9 0C 1C  	DB $1F, $C9, $0C, $1C
  53++E1D8 1F B9 0C 20  	DB $1F, $B9, $0C, $20
  54++E1DC 1F BA 08 20  	DB $1F, $BA, $08, $20
  55++E1E0 1F 98 1C 20  	DB $1F, $98, $1C, $20
  56++E1E4
  57++E1E4              Rock_HermitEdgesSize: equ $ - Rock_HermitEdges
  58++E1E4
  59++E1E4
  60++E1E4              Rock_HermitEdgesCnt: equ Rock_HermitEdgesSize/4
  61++E1E4
  62++E1E4
  63++E1E4 1F 09 42 51  Rock_HermitNormals:	DB $1F, $09, $42, $51
  64++E1E8 5F 09 42 51  	DB $5F, $09, $42, $51
  65++E1EC 9F 48 40 1F  	DB $9F, $48, $40, $1F
  66++E1F0 DF 40 49 2F  	DB $DF, $40, $49, $2F
  67++E1F4 5F 2D 4F 41  	DB $5F, $2D, $4F, $41
  68++E1F8 1F 87 0F 23  	DB $1F, $87, $0F, $23
  69++E1FC 1F 26 4C 46  	DB $1F, $26, $4C, $46
  70++E200 BF 42 3B 27  	DB $BF, $42, $3B, $27
  71++E204 FF 43 0F 50  	DB $FF, $43, $0F, $50
  72++E208 7F 42 0E 4B  	DB $7F, $42, $0E, $4B
  73++E20C FF 46 50 28  	DB $FF, $46, $50, $28
  74++E210 7F 3A 66 33  	DB $7F, $3A, $66, $33
  75++E214 3F 51 09 43  	DB $3F, $51, $09, $43
  76++E218 3F 2F 5E 3F  	DB $3F, $2F, $5E, $3F
  77++E21C
  78++E21C
  79++E21C              Rock_HermitNormalsSize: equ $ - Rock_HermitNormals
  80++E21C              Rock_HermitLen: equ $ - Rock_Hermit
  81++E21C
# file closed: ./Data/ships/Rock_Hermit.asm
  86+ E21C                                      include "Data/ships/ShuttleType9.asm"
# file opened: ./Data/ships/ShuttleType9.asm
   1++E21C 0F           ShuttleType9:	            DB $0F
   2++E21D C4 09                                    DW $09C4
   3++E21F A9 E2                                    DW ShuttleType9Edges
   4++E221 78                                       DB ShuttleType9EdgesSize
   5++E222 00 26                                    DB $00, $26
   6++E224 13                                       DB ShuttleType9VertSize /6
   7++E225 72                                       DB ShuttleType9VertSize
   8++E226 1E                                       DB ShuttleType9EdgesCnt
   9++E227 00 00                                    DB $00, $00
  10++E229 34                                       DB ShuttleType9NormalsSize
  11++E22A 16 20 08                                 DB $16, $20, $08
  12++E22D 21 E3                                    DW ShuttleType9Normals
  13++E22F 02 00                                    DB $02, $00
  14++E231 37 E2                                    DW ShuttleType9Vertices
  15++E233 00 00        	                        DB 0,0                      ; Type and Tactics
  16++E235 00                                       DB 0
  17++E236 80                                       DB $80                      ; chance of ECM module
  18++E237
  19++E237
  20++E237 00 11 17 5F  ShuttleType9Vertices:	DB $00, $11, $17, $5F, $FF, $FF ; 01
  20++E23B FF FF
  21++E23D 11 00 17 9F                          DB $11, $00, $17, $9F, $FF, $FF ; 02
  21++E241 FF FF
  22++E243 00 12 17 1F                          DB $00, $12, $17, $1F, $FF, $FF ; 03
  22++E247 FF FF
  23++E249 12 00 17 1F                          DB $12, $00, $17, $1F, $FF, $FF ; 04
  23++E24D FF FF
  24++E24F 14 14 1B FF                          DB $14, $14, $1B, $FF, $12, $39 ; 05
  24++E253 12 39
  25++E255 14 14 1B BF                          DB $14, $14, $1B, $BF, $34, $59 ; 06
  25++E259 34 59
  26++E25B 14 14 1B 3F                          DB $14, $14, $1B, $3F, $56, $79 ; 07
  26++E25F 56 79
  27++E261 14 14 1B 7F                          DB $14, $14, $1B, $7F, $17, $89 ; 08
  27++E265 17 89
  28++E267 05 00 1B 30                          DB $05, $00, $1B, $30, $99, $99 ; 09
  28++E26B 99 99
  29++E26D 00 02 1B 70                          DB $00, $02, $1B, $70, $99, $99 ; 10
  29++E271 99 99
  30++E273 05 00 1B A9                          DB $05, $00, $1B, $A9, $99, $99 ; 11
  30++E277 99 99
  31++E279 00 03 1B 29                          DB $00, $03, $1B, $29, $99, $99 ; 12
  31++E27D 99 99
  32++E27F 00 09 23 50                          DB $00, $09, $23, $50, $0A, $BC ; 13
  32++E283 0A BC
  33++E285 03 01 1F 47                          DB $03, $01, $1F, $47, $FF, $02 ; 14
  33++E289 FF 02
  34++E28B 04 0B 19 08                          DB $04, $0B, $19, $08, $01, $F4 ; 15
  34++E28F 01 F4
  35++E291 0B 04 19 08                          DB $0B, $04, $19, $08, $A1, $3F ; 16
  35++E295 A1 3F
  36++E297 03 01 1F C7                          DB $03, $01, $1F, $C7, $6B, $23 ; 17
  36++E29B 6B 23
  37++E29D 03 0B 19 88                          DB $03, $0B, $19, $88, $F8, $C0 ; 18
  37++E2A1 F8 C0
  38++E2A3 0A 04 19 88                          DB $0A, $04, $19, $88, $4F, $18 ; 19
  38++E2A7 4F 18
  39++E2A9
  40++E2A9              ShuttleType9VertSize: equ $ - ShuttleType9Vertices
  41++E2A9
  42++E2A9
  43++E2A9
  44++E2A9 1F 02 00 04  ShuttleType9Edges:	DB $1F, $02, $00, $04
  45++E2AD 1F 4A 04 08  	DB $1F, $4A, $04, $08
  46++E2B1 1F 6B 08 0C  	DB $1F, $6B, $08, $0C
  47++E2B5 1F 8C 00 0C  	DB $1F, $8C, $00, $0C
  48++E2B9 1F 18 00 1C  	DB $1F, $18, $00, $1C
  49++E2BD 18 12 00 10  	DB $18, $12, $00, $10
  50++E2C1 1F 23 04 10  	DB $1F, $23, $04, $10
  51++E2C5 18 34 04 14  	DB $18, $34, $04, $14
  52++E2C9 1F 45 08 14  	DB $1F, $45, $08, $14
  53++E2CD 0C 56 08 18  	DB $0C, $56, $08, $18
  54++E2D1 1F 67 0C 18  	DB $1F, $67, $0C, $18
  55++E2D5 18 78 0C 1C  	DB $18, $78, $0C, $1C
  56++E2D9 1F 39 10 14  	DB $1F, $39, $10, $14
  57++E2DD 1F 59 14 18  	DB $1F, $59, $14, $18
  58++E2E1 1F 79 18 1C  	DB $1F, $79, $18, $1C
  59++E2E5 1F 19 10 1C  	DB $1F, $19, $10, $1C
  60++E2E9 10 0C 00 30  	DB $10, $0C, $00, $30
  61++E2ED 10 0A 04 30  	DB $10, $0A, $04, $30
  62++E2F1 10 AB 08 30  	DB $10, $AB, $08, $30
  63++E2F5 10 BC 0C 30  	DB $10, $BC, $0C, $30
  64++E2F9 10 99 20 24  	DB $10, $99, $20, $24
  65++E2FD 07 99 24 28  	DB $07, $99, $24, $28
  66++E301 09 99 28 2C  	DB $09, $99, $28, $2C
  67++E305 07 99 20 2C  	DB $07, $99, $20, $2C
  68++E309 05 BB 34 38  	DB $05, $BB, $34, $38
  69++E30D 08 BB 38 3C  	DB $08, $BB, $38, $3C
  70++E311 07 BB 34 3C  	DB $07, $BB, $34, $3C
  71++E315 05 AA 40 44  	DB $05, $AA, $40, $44
  72++E319 08 AA 44 48  	DB $08, $AA, $44, $48
  73++E31D 07 AA 40 48  	DB $07, $AA, $40, $48
  74++E321              ShuttleType9EdgesSize: equ $ - ShuttleType9Edges
  75++E321              ShuttleType9EdgesCnt: equ ShuttleType9EdgesSize/4
  76++E321
  77++E321 DF 37 37 28  ShuttleType9Normals:	DB $DF, $37, $37, $28
  78++E325 5F 00 4A 04  	DB $5F, $00, $4A, $04
  79++E329 DF 33 33 17  	DB $DF, $33, $33, $17
  80++E32D 9F 4A 00 04  	DB $9F, $4A, $00, $04
  81++E331 9F 33 33 17  	DB $9F, $33, $33, $17
  82++E335 1F 00 4A 04  	DB $1F, $00, $4A, $04
  83++E339 1F 33 33 17  	DB $1F, $33, $33, $17
  84++E33D 1F 4A 00 04  	DB $1F, $4A, $00, $04
  85++E341 5F 33 33 17  	DB $5F, $33, $33, $17
  86++E345 3F 00 00 6B  	DB $3F, $00, $00, $6B
  87++E349 9F 29 29 5A  	DB $9F, $29, $29, $5A
  88++E34D 1F 29 29 5A  	DB $1F, $29, $29, $5A
  89++E351 5F 37 37 28  	DB $5F, $37, $37, $28
  90++E355
  91++E355
  92++E355              ShuttleType9NormalsSize: equ $ - ShuttleType9Normals
  93++E355              ShuttleType9Len: equ $ - ShuttleType9
  94++E355
# file closed: ./Data/ships/ShuttleType9.asm
  87+ E355                                      include "Data/ships/Shuttle_Mk_2.asm"
# file opened: ./Data/ships/Shuttle_Mk_2.asm
   1++E355 0F           Shuttle_Mk_2:	        DB $0F
   2++E356 C4 09                                DW $09C4
   3++E358 D6 E3                                DW Shuttle_Mk_2Edges
   4++E35A 70                                   DB Shuttle_Mk_2EdgesSize
   5++E35B 00 26                                DB $00, $26
   6++E35D 11                                   DB Shuttle_Mk_2VertSize /6
   7++E35E 66                                   DB Shuttle_Mk_2VertSize
   8++E35F 1C                                   DB Shuttle_Mk_2EdgesCnt
   9++E360 00 00                                DB $00, $00
  10++E362 34                                   DB Shuttle_Mk_2NormalsSize
  11++E363 0A 20 09                             DB $0A, $20, $09
  12++E366 46 E4                                DW Shuttle_Mk_2Normals
  13++E368 02 00                                DB $02, $00
  14++E36A 70 E3                                DW Shuttle_Mk_2Vertices
  15++E36C 00 00                                DB 0,0                      ; Type and Tactics
  16++E36E 00                                   DB 0
  17++E36F 80                                   DB $80                      ; chance of ECM module
  18++E370
  19++E370
  20++E370 00 00 28 1F  Shuttle_Mk_2Vertices:	DB $00, $00, $28, $1F, $23, $01
  20++E374 23 01
  21++E376 00 14 1E 1F  	DB $00, $14, $1E, $1F, $34, $00
  21++E37A 34 00
  22++E37C 14 00 1E 9F  	DB $14, $00, $1E, $9F, $15, $00
  22++E380 15 00
  23++E382 00 14 1E 5F  	DB $00, $14, $1E, $5F, $26, $11
  23++E386 26 11
  24++E388 14 00 1E 1F  	DB $14, $00, $1E, $1F, $37, $22
  24++E38C 37 22
  25++E38E 14 14 14 9F  	DB $14, $14, $14, $9F, $58, $04
  25++E392 58 04
  26++E394 14 14 14 DF  	DB $14, $14, $14, $DF, $69, $15
  26++E398 69 15
  27++E39A 14 14 14 5F  	DB $14, $14, $14, $5F, $7A, $26
  27++E39E 7A 26
  28++E3A0 14 14 14 1F  	DB $14, $14, $14, $1F, $7B, $34
  28++E3A4 7B 34
  29++E3A6 00 14 28 3F  	DB $00, $14, $28, $3F, $BC, $48
  29++E3AA BC 48
  30++E3AC 14 00 28 BF  	DB $14, $00, $28, $BF, $9C, $58
  30++E3B0 9C 58
  31++E3B2 00 14 28 7F  	DB $00, $14, $28, $7F, $AC, $69
  31++E3B6 AC 69
  32++E3B8 14 00 28 3F  	DB $14, $00, $28, $3F, $BC, $7A
  32++E3BC BC 7A
  33++E3BE 04 04 28 AA  	DB $04, $04, $28, $AA, $CC, $CC
  33++E3C2 CC CC
  34++E3C4 04 04 28 EA  	DB $04, $04, $28, $EA, $CC, $CC
  34++E3C8 CC CC
  35++E3CA 04 04 28 6A  	DB $04, $04, $28, $6A, $CC, $CC
  35++E3CE CC CC
  36++E3D0 04 04 28 2A  	DB $04, $04, $28, $2A, $CC, $CC
  36++E3D4 CC CC
  37++E3D6
  38++E3D6              Shuttle_Mk_2VertSize: equ $ - Shuttle_Mk_2Vertices
  39++E3D6
  40++E3D6
  41++E3D6
  42++E3D6 1F 01 00 08  Shuttle_Mk_2Edges:	DB $1F, $01, $00, $08
  43++E3DA 1F 12 00 0C  	DB $1F, $12, $00, $0C
  44++E3DE 1F 23 00 10  	DB $1F, $23, $00, $10
  45++E3E2 1F 30 00 04  	DB $1F, $30, $00, $04
  46++E3E6 1F 04 04 14  	DB $1F, $04, $04, $14
  47++E3EA 1F 05 08 14  	DB $1F, $05, $08, $14
  48++E3EE 1F 15 08 18  	DB $1F, $15, $08, $18
  49++E3F2 1F 16 0C 18  	DB $1F, $16, $0C, $18
  50++E3F6 1F 26 0C 1C  	DB $1F, $26, $0C, $1C
  51++E3FA 1F 27 10 1C  	DB $1F, $27, $10, $1C
  52++E3FE 1F 37 10 20  	DB $1F, $37, $10, $20
  53++E402 1F 34 04 20  	DB $1F, $34, $04, $20
  54++E406 1F 48 14 24  	DB $1F, $48, $14, $24
  55++E40A 1F 58 14 28  	DB $1F, $58, $14, $28
  56++E40E 1F 59 18 28  	DB $1F, $59, $18, $28
  57++E412 1F 69 18 2C  	DB $1F, $69, $18, $2C
  58++E416 1F 6A 1C 2C  	DB $1F, $6A, $1C, $2C
  59++E41A 1F 7A 1C 30  	DB $1F, $7A, $1C, $30
  60++E41E 1F 7B 20 30  	DB $1F, $7B, $20, $30
  61++E422 1F 4B 20 24  	DB $1F, $4B, $20, $24
  62++E426 1F 8C 24 28  	DB $1F, $8C, $24, $28
  63++E42A 1F 9C 28 2C  	DB $1F, $9C, $28, $2C
  64++E42E 1F AC 2C 30  	DB $1F, $AC, $2C, $30
  65++E432 1F BC 30 24  	DB $1F, $BC, $30, $24
  66++E436 0A CC 34 38  	DB $0A, $CC, $34, $38
  67++E43A 0A CC 38 3C  	DB $0A, $CC, $38, $3C
  68++E43E 0A CC 3C 40  	DB $0A, $CC, $3C, $40
  69++E442 0A CC 40 34  	DB $0A, $CC, $40, $34
  70++E446
  71++E446              Shuttle_Mk_2EdgesSize: equ $ - Shuttle_Mk_2Edges
  72++E446
  73++E446
  74++E446              Shuttle_Mk_2EdgesCnt: equ Shuttle_Mk_2EdgesSize/4
  75++E446
  76++E446
  77++E446 9F 27 27 4E  Shuttle_Mk_2Normals:	DB $9F, $27, $27, $4E
  78++E44A DF 27 27 4E  	DB $DF, $27, $27, $4E
  79++E44E 5F 27 27 4E  	DB $5F, $27, $27, $4E
  80++E452 1F 27 27 4E  	DB $1F, $27, $27, $4E
  81++E456 1F 00 60 00  	DB $1F, $00, $60, $00
  82++E45A 9F 60 00 00  	DB $9F, $60, $00, $00
  83++E45E 5F 00 60 00  	DB $5F, $00, $60, $00
  84++E462 1F 60 00 00  	DB $1F, $60, $00, $00
  85++E466 BF 42 42 16  	DB $BF, $42, $42, $16
  86++E46A FF 42 42 16  	DB $FF, $42, $42, $16
  87++E46E 7F 42 42 16  	DB $7F, $42, $42, $16
  88++E472 3F 42 42 16  	DB $3F, $42, $42, $16
  89++E476 3F 00 00 60  	DB $3F, $00, $00, $60
  90++E47A
  91++E47A
  92++E47A              Shuttle_Mk_2NormalsSize: equ $ - Shuttle_Mk_2Normals
  93++E47A              Shuttle_Mk_2Len: equ $ - Shuttle_Mk_2
  94++E47A
# file closed: ./Data/ships/Shuttle_Mk_2.asm
  88+ E47A                                      include "Data/ships/Sidewinder.asm"
# file opened: ./Data/ships/Sidewinder.asm
   1++E47A 00           Sidewinder:	            DB $00
   2++E47B 81 10                                DW $1081
   3++E47D D1 E4                                DW SidewinderEdges
   4++E47F 3C                                   DB SidewinderEdgesSize
   5++E480 00 1E                                DB $00, $1E
   6++E482 0A                                   DB SidewinderVertSize /6
   7++E483 3C                                   DB SidewinderVertSize
   8++E484 0F                                   DB SidewinderEdgesCnt
   9++E485 00 32                                DB $00, $32
  10++E487 1C                                   DB SidewinderNormalsSize
  11++E488 14 46 25                             DB $14, $46, $25
  12++E48B 0D E5                                DW SidewinderNormals
  13++E48D 02 10                                DB $02, $10
  14++E48F 95 E4                                DW SidewinderVertices
  15++E491 00 00                                DB 0,0                      ; Type and Tactics
  16++E493 01                                   DB ShipCanAnger
  17++E494 30                                   DB $30                      ; chance of ECM module
  18++E495
  19++E495 20 00 24 9F  SidewinderVertices:	DB $20, $00, $24, $9F, $10, $54
  19++E499 10 54
  20++E49B 20 00 24 1F  	DB $20, $00, $24, $1F, $20, $65
  20++E49F 20 65
  21++E4A1 40 00 1C 3F  	DB $40, $00, $1C, $3F, $32, $66
  21++E4A5 32 66
  22++E4A7 40 00 1C BF  	DB $40, $00, $1C, $BF, $31, $44
  22++E4AB 31 44
  23++E4AD 00 10 1C 3F  	DB $00, $10, $1C, $3F, $10, $32
  23++E4B1 10 32
  24++E4B3 00 10 1C 7F  	DB $00, $10, $1C, $7F, $43, $65
  24++E4B7 43 65
  25++E4B9 0C 06 1C AF  	DB $0C, $06, $1C, $AF, $33, $33
  25++E4BD 33 33
  26++E4BF 0C 06 1C 2F  	DB $0C, $06, $1C, $2F, $33, $33
  26++E4C3 33 33
  27++E4C5 0C 06 1C 6C  	DB $0C, $06, $1C, $6C, $33, $33
  27++E4C9 33 33
  28++E4CB 0C 06 1C EC  	DB $0C, $06, $1C, $EC, $33, $33
  28++E4CF 33 33
  29++E4D1
  30++E4D1
  31++E4D1              SidewinderVertSize: equ $ - SidewinderVertices
  32++E4D1
  33++E4D1
  34++E4D1
  35++E4D1 1F 50 00 04  SidewinderEdges:	DB $1F, $50, $00, $04
  36++E4D5 1F 62 04 08  	DB $1F, $62, $04, $08
  37++E4D9 1F 20 04 10  	DB $1F, $20, $04, $10
  38++E4DD 1F 10 00 10  	DB $1F, $10, $00, $10
  39++E4E1 1F 41 00 0C  	DB $1F, $41, $00, $0C
  40++E4E5 1F 31 0C 10  	DB $1F, $31, $0C, $10
  41++E4E9 1F 32 08 10  	DB $1F, $32, $08, $10
  42++E4ED 1F 43 0C 14  	DB $1F, $43, $0C, $14
  43++E4F1 1F 63 08 14  	DB $1F, $63, $08, $14
  44++E4F5 1F 65 04 14  	DB $1F, $65, $04, $14
  45++E4F9 1F 54 00 14  	DB $1F, $54, $00, $14
  46++E4FD 0F 33 18 1C  	DB $0F, $33, $18, $1C
  47++E501 0C 33 1C 20  	DB $0C, $33, $1C, $20
  48++E505 0C 33 18 24  	DB $0C, $33, $18, $24
  49++E509 0C 33 20 24  	DB $0C, $33, $20, $24
  50++E50D
  51++E50D              SidewinderEdgesSize: equ $ - SidewinderEdges
  52++E50D
  53++E50D
  54++E50D              SidewinderEdgesCnt: equ SidewinderEdgesSize/4
  55++E50D
  56++E50D
  57++E50D 1F 00 20 08  SidewinderNormals:	DB $1F, $00, $20, $08
  58++E511 9F 0C 2F 06  	DB $9F, $0C, $2F, $06
  59++E515 1F 0C 2F 06  	DB $1F, $0C, $2F, $06
  60++E519 3F 00 00 70  	DB $3F, $00, $00, $70
  61++E51D DF 0C 2F 06  	DB $DF, $0C, $2F, $06
  62++E521 5F 00 20 08  	DB $5F, $00, $20, $08
  63++E525 5F 0C 2F 06  	DB $5F, $0C, $2F, $06
  64++E529
  65++E529
  66++E529              SidewinderNormalsSize: equ $ - SidewinderNormals
  67++E529              SidewinderLen: equ $ - Sidewinder
  68++E529
# file closed: ./Data/ships/Sidewinder.asm
  89+ E529                                      include "Data/ships/Splinter.asm"
# file opened: ./Data/ships/Splinter.asm
   1++E529 B0           Splinter:	            DB $B0
   2++E52A 00 01                                DW $0100
   3++E52C 5C E5                                DW SplinterEdges
   4++E52E 18                                   DB SplinterEdgesSize
   5++E52F 00 16                                DB $00, $16
   6++E531 04                                   DB SplinterVertSize /6
   7++E532 18                                   DB SplinterVertSize
   8++E533 06                                   DB SplinterEdgesCnt
   9++E534 00 00                                DB $00, $00
  10++E536 10                                   DB SplinterNormalsSize
  11++E537 08 14 0A                             DB $08, $14, $0A
  12++E53A 74 E5                                DW SplinterNormals
  13++E53C 05 00                                DB $05, $00
  14++E53E 44 E5                                DW SplinterVertices
  15++E540 00 00                                DB 0,0                      ; Type and Tactics
  16++E542 00                                   DB 0
  17++E543 00                                   DB $00                      ; chance of ECM module
  18++E544
  19++E544 18 19 10 DF  SplinterVertices:	    DB $18, $19, $10, $DF, $12, $33
  19++E548 12 33
  20++E54A 00 0C 0A 3F                          DB $00, $0C, $0A, $3F, $02, $33
  20++E54E 02 33
  21++E550 0B 06 02 5F                          DB $0B, $06, $02, $5F, $01, $33
  21++E554 01 33
  22++E556 0C 2A 07 1F                          DB $0C, $2A, $07, $1F, $01, $22
  22++E55A 01 22
  23++E55C              SplinterVertSize:       equ $ - SplinterVertices
  24++E55C 1F 23 00 04  SplinterEdges:	        DB $1F, $23, $00, $04
  25++E560 1F 03 04 08                          DB $1F, $03, $04, $08
  26++E564 1F 01 08 0C                          DB $1F, $01, $08, $0C
  27++E568 1F 12 0C 00                          DB $1F, $12, $0C, $00
  28++E56C 1F 13 00 08                          DB $1F, $13, $00, $08
  29++E570 1F 02 0C 04                          DB $1F, $02, $0C, $04
  30++E574              SplinterEdgesSize:      equ $ - SplinterEdges
  31++E574              SplinterEdgesCnt:       equ SplinterEdgesSize/4
  32++E574 1F 23 00 04  SplinterNormals:	    DB $1F, $23, $00, $04
  33++E578 1F 03 04 08                          DB $1F, $03, $04, $08
  34++E57C 1F 01 08 0C                          DB $1F, $01, $08, $0C
  35++E580 1F 12 0C 00                          DB $1F, $12, $0C, $00
  36++E584              SplinterNormalsSize:    equ $ - SplinterNormals
  37++E584              SplinterLen:            equ $ - Splinter
  38++E584
# file closed: ./Data/ships/Splinter.asm
  90+ E584                                      include "Data/ships/TestVector.asm"
# file opened: ./Data/ships/TestVector.asm
   1++E584 03           TestVector:             DB $03
   2++E585 23 41                                DW $4123
   3++E587 C9 E5                                DW TestVectorEdges
   4++E589 10                                   DB TestVectorEdgesSize
   5++E58A 54 2A                                DB $54,$2A
   6++E58C 07                                   DB TestVectorVertSize /6
   7++E58D 2A                                   DB TestVectorVertSize
   8++E58E 04                                   DB TestVectorEdgesCnt
   9++E58F 00 00                                DB $00,$00
  10++E591 10                                   DB TestVectorNormalsSize
  11++E592 32 96 1C                             DB $32,$96,$1C
  12++E595 D9 E5                                DW TestVectorNormals
  13++E597 04 01                                DB $04,$01
  14++E599 9F E5                                DW TestVectorVertices
  15++E59B FE 00                                DB ShipTypeDebug,0                      ; Type and Tactics
  16++E59D 00                                   DB 0
  17++E59E 00                                   DB $00                      ; chance of ECM module
  18++E59F
  19++E59F 00 40 00 1F  TestVectorVertices	    DB $00,$40,$00,$1F,$00,$00
  19++E5A3 00 00
  20++E5A5 00 20 00 1F                          DB $00,$20,$00,$1F,$00,$00
  20++E5A9 00 00
  21++E5AB 40 00 00 1F                          DB $40,$00,$00,$1F,$01,$01
  21++E5AF 01 01
  22++E5B1 20 00 00 1F                          DB $20,$00,$00,$1F,$01,$01
  22++E5B5 01 01
  23++E5B7 00 00 40 1F                          DB $00,$00,$40,$1F,$02,$02
  23++E5BB 02 02
  24++E5BD 00 00 20 1F                          DB $00,$00,$20,$1F,$02,$02
  24++E5C1 02 02
  25++E5C3 00 00 00 1F                          DB $00,$00,$00,$1F,$03,$03
  25++E5C7 03 03
  26++E5C9              TestVectorVertSize      equ $  - TestVectorVertices
  27++E5C9 1F 00 00 04  TestVectorEdges		    DB $1F,$00,$00,$04
  28++E5CD 1F 00 08 0C                          DB $1F,$00,$08,$0C
  29++E5D1 1F 00 10 14                          DB $1F,$00,$10,$14
  30++E5D5 1F 00 18 18                          DB $1F,$00,$18,$18
  31++E5D9              TestVectorEdgesSize     equ $  - TestVectorEdges
  32++E5D9              TestVectorEdgesCnt      equ TestVectorEdgesSize/4
  33++E5D9              ; start normals #0 = top f,$on,$ p,$at,$ o,$ C,$br,$ Mk III
  34++E5D9 1F 00 10 00  TestVectorNormals	    DB $1F,$00,$10,$00
  35++E5DD 1F 10 00 00                          DB $1F,$10,$00,$00
  36++E5E1 1F 00 00 10                          DB $1F,$00,$00,$10
  37++E5E5 1F 00 00 10                          DB $1F,$00,$00,$10
  38++E5E9              TestVectorNormalsSize   equ $  - TestVectorNormals
  39++E5E9              TestVectorLen           equ $  - TestVector
  40++E5E9
# file closed: ./Data/ships/TestVector.asm
  91+ E5E9                                      include "Data/ships/Thargoid.asm"
# file opened: ./Data/ships/Thargoid.asm
   1++E5E9 00           Thargoid:	            DB $00
   2++E5EA 49 26                                DW $2649
   3++E5EC 7C E6                                DW ThargoidEdges
   4++E5EE 68                                   DB ThargoidEdgesSize
   5++E5EF 3C 26                                DB $3C, $26
   6++E5F1 14                                   DB ThargoidVertSize /6
   7++E5F2 78                                   DB ThargoidVertSize
   8++E5F3 1A                                   DB ThargoidEdgesCnt
   9++E5F4 01 F4                                DB $01, $F4
  10++E5F6 28                                   DB ThargoidNormalsSize
  11++E5F7 37 F0 27                             DB $37, $F0, $27
  12++E5FA E4 E6                                DW ThargoidNormals
  13++E5FC 02 16                                DB $02, $16
  14++E5FE 04 E6                                DW ThargoidVertices
  15++E600 00 00                                DB 0,0                      ; Type and Tactics
  16++E602 01                                   DB ShipCanAnger
  17++E603 FF                                   DB $FF                      ; chance of ECM module
  18++E604
  19++E604 20 30 30 5F  ThargoidVertices:	    DB $20, $30, $30, $5F, $40, $88 ; 01
  19++E608 40 88
  20++E60A 20 44 00 5F                          DB $20, $44, $00, $5F, $10, $44 ; 02
  20++E60E 10 44
  21++E610 20 30 30 7F                          DB $20, $30, $30, $7F, $21, $44 ; 03
  21++E614 21 44
  22++E616 20 00 44 3F                          DB $20, $00, $44, $3F, $32, $44 ; 04
  22++E61A 32 44
  23++E61C 20 30 30 3F                          DB $20, $30, $30, $3F, $43, $55 ; 05
  23++E620 43 55
  24++E622 20 44 00 1F                          DB $20, $44, $00, $1F, $54, $66 ; 06
  24++E626 54 66
  25++E628 20 30 30 1F                          DB $20, $30, $30, $1F, $64, $77 ; 07
  25++E62C 64 77
  26++E62E 20 00 44 1F                          DB $20, $00, $44, $1F, $74, $88 ; 08
  26++E632 74 88
  27++E634 18 74 74 DF                          DB $18, $74, $74, $DF, $80, $99 ; 09
  27++E638 80 99
  28++E63A 18 A4 00 DF                          DB $18, $A4, $00, $DF, $10, $99 ; 10
  28++E63E 10 99
  29++E640 18 74 74 FF                          DB $18, $74, $74, $FF, $21, $99 ; 11
  29++E644 21 99
  30++E646 18 00 A4 BF                          DB $18, $00, $A4, $BF, $32, $99 ; 12
  30++E64A 32 99
  31++E64C 18 74 74 BF                          DB $18, $74, $74, $BF, $53, $99 ; 13
  31++E650 53 99
  32++E652 18 A4 00 9F                          DB $18, $A4, $00, $9F, $65, $99 ; 14
  32++E656 65 99
  33++E658 18 74 74 9F                          DB $18, $74, $74, $9F, $76, $99 ; 15
  33++E65C 76 99
  34++E65E 18 00 A4 9F                          DB $18, $00, $A4, $9F, $87, $99 ; 16
  34++E662 87 99
  35++E664 18 40 50 9E                          DB $18, $40, $50, $9E, $99, $99 ; 17
  35++E668 99 99
  36++E66A 18 40 50 BE                          DB $18, $40, $50, $BE, $99, $99 ; 18
  36++E66E 99 99
  37++E670 18 40 50 FE                          DB $18, $40, $50, $FE, $99, $99 ; 19
  37++E674 99 99
  38++E676 18 40 50 DE                          DB $18, $40, $50, $DE, $99, $99 ; 20
  38++E67A 99 99
  39++E67C
  40++E67C              ThargoidVertSize: equ $ - ThargoidVertices
  41++E67C
  42++E67C
  43++E67C
  44++E67C 1F 84 00 1C  ThargoidEdges:	DB $1F, $84, $00, $1C           ;01
  45++E680 1F 40 00 04                  DB $1F, $40, $00, $04           ;02
  46++E684 1F 41 04 08                  DB $1F, $41, $04, $08           ;03
  47++E688 1F 42 08 0C                  DB $1F, $42, $08, $0C           ;04
  48++E68C 1F 43 0C 10                  DB $1F, $43, $0C, $10           ;05
  49++E690 1F 54 10 14                  DB $1F, $54, $10, $14           ;06
  50++E694 1F 64 14 18                  DB $1F, $64, $14, $18           ;07
  51++E698 1F 74 18 1C                  DB $1F, $74, $18, $1C           ;08
  52++E69C 1F 80 00 20                  DB $1F, $80, $00, $20           ;09
  53++E6A0 1F 10 04 24                  DB $1F, $10, $04, $24           ;10
  54++E6A4 1F 21 08 28                  DB $1F, $21, $08, $28           ;11
  55++E6A8 1F 32 0C 2C                  DB $1F, $32, $0C, $2C           ;12
  56++E6AC 1F 53 10 30                  DB $1F, $53, $10, $30           ;13
  57++E6B0 1F 65 14 34                  DB $1F, $65, $14, $34           ;14
  58++E6B4 1F 76 18 38                  DB $1F, $76, $18, $38           ;15
  59++E6B8 1F 87 1C 3C                  DB $1F, $87, $1C, $3C           ;16
  60++E6BC 1F 98 20 3C                  DB $1F, $98, $20, $3C           ;17
  61++E6C0 1F 90 20 24                  DB $1F, $90, $20, $24           ;18
  62++E6C4 1F 91 24 28                  DB $1F, $91, $24, $28
  63++E6C8 1F 92 28 2C                  DB $1F, $92, $28, $2C
  64++E6CC 1F 93 2C 30                  DB $1F, $93, $2C, $30
  65++E6D0 1F 95 30 34                  DB $1F, $95, $30, $34
  66++E6D4 1F 96 34 38                  DB $1F, $96, $34, $38
  67++E6D8 1F 97 38 3C                  DB $1F, $97, $38, $3C
  68++E6DC 1E 99 40 44                  DB $1E, $99, $40, $44
  69++E6E0 1E 99 48 4C                  DB $1E, $99, $48, $4C
  70++E6E4
  71++E6E4              ThargoidEdgesSize: equ $ - ThargoidEdges
  72++E6E4
  73++E6E4              ThargoidEdgesCnt: equ ThargoidEdgesSize/4
  74++E6E4
  75++E6E4 5F 67 3C 19  ThargoidNormals:	DB $5F, $67, $3C, $19
  76++E6E8 7F 67 3C 19  	DB $7F, $67, $3C, $19
  77++E6EC 7F 67 19 3C  	DB $7F, $67, $19, $3C
  78++E6F0 3F 67 19 3C  	DB $3F, $67, $19, $3C
  79++E6F4 1F 40 00 00  	DB $1F, $40, $00, $00
  80++E6F8 3F 67 3C 19  	DB $3F, $67, $3C, $19
  81++E6FC 1F 67 3C 19  	DB $1F, $67, $3C, $19
  82++E700 1F 67 19 3C  	DB $1F, $67, $19, $3C
  83++E704 5F 67 19 3C  	DB $5F, $67, $19, $3C
  84++E708 9F 30 00 00  	DB $9F, $30, $00, $00
  85++E70C
  86++E70C
  87++E70C              ThargoidNormalsSize: equ $ - ThargoidNormals
  88++E70C              ThargoidLen: equ $ - Thargoid
  89++E70C
# file closed: ./Data/ships/Thargoid.asm
  92+ E70C                                      include "Data/ships/Thargon.asm"
# file opened: ./Data/ships/Thargon.asm
   1++E70C F0           Thargon:	            DB $F0
   2++E70D 40 06                                DW $0640
   3++E70F 63 E7                                DW ThargonEdges
   4++E711 3C                                   DB ThargonEdgesSize
   5++E712 00 12                                DB $00, $12
   6++E714 0A                                   DB ThargonVertSize /6
   7++E715 3C                                   DB ThargonVertSize
   8++E716 0F                                   DB ThargonEdgesCnt
   9++E717 00 32                                DB $00, $32
  10++E719 1C                                   DB ThargonNormalsSize
  11++E71A 14 14 1E                             DB $14, $14, $1E
  12++E71D 9F E7                                DW ThargonNormals
  13++E71F 02 10                                DB $02, $10
  14++E721 27 E7                                DW ThargonVertices
  15++E723 00 00                                DB 0,0                      ; Type and Tactics
  16++E725 01                                   DB ShipCanAnger
  17++E726 00                                   DB $00                      ; chance of ECM module
  18++E727
  19++E727
  20++E727 09 00 28 9F  ThargonVertices:	    DB $09, $00, $28, $9F, $01, $55
  20++E72B 01 55
  21++E72D 09 26 0C DF                          DB $09, $26, $0C, $DF, $01, $22
  21++E731 01 22
  22++E733 09 18 20 FF                          DB $09, $18, $20, $FF, $02, $33
  22++E737 02 33
  23++E739 09 18 20 BF                          DB $09, $18, $20, $BF, $03, $44
  23++E73D 03 44
  24++E73F 09 26 0C 9F                          DB $09, $26, $0C, $9F, $04, $55
  24++E743 04 55
  25++E745 09 00 08 3F                          DB $09, $00, $08, $3F, $15, $66
  25++E749 15 66
  26++E74B 09 0A 0F 7F                          DB $09, $0A, $0F, $7F, $12, $66
  26++E74F 12 66
  27++E751 09 06 1A 7F                          DB $09, $06, $1A, $7F, $23, $66
  27++E755 23 66
  28++E757 09 06 1A 3F                          DB $09, $06, $1A, $3F, $34, $66
  28++E75B 34 66
  29++E75D 09 0A 0F 3F                          DB $09, $0A, $0F, $3F, $45, $66
  29++E761 45 66
  30++E763
  31++E763              ThargonVertSize:        equ $ - ThargonVertices
  32++E763
  33++E763
  34++E763 1F 10 00 04  ThargonEdges:	        DB $1F, $10, $00, $04
  35++E767 1F 20 04 08                          DB $1F, $20, $04, $08
  36++E76B 1F 30 08 0C                          DB $1F, $30, $08, $0C
  37++E76F 1F 40 0C 10                          DB $1F, $40, $0C, $10
  38++E773 1F 50 00 10                          DB $1F, $50, $00, $10
  39++E777 1F 51 00 14                          DB $1F, $51, $00, $14
  40++E77B 1F 21 04 18                          DB $1F, $21, $04, $18
  41++E77F 1F 32 08 1C                          DB $1F, $32, $08, $1C
  42++E783 1F 43 0C 20                          DB $1F, $43, $0C, $20
  43++E787 1F 54 10 24                          DB $1F, $54, $10, $24
  44++E78B 1F 61 14 18                          DB $1F, $61, $14, $18
  45++E78F 1F 62 18 1C                          DB $1F, $62, $18, $1C
  46++E793 1F 63 1C 20                          DB $1F, $63, $1C, $20
  47++E797 1F 64 20 24                          DB $1F, $64, $20, $24
  48++E79B 1F 65 24 14                          DB $1F, $65, $24, $14
  49++E79F
  50++E79F              ThargonEdgesSize:       equ $ - ThargonEdges
  51++E79F
  52++E79F
  53++E79F              ThargonEdgesCnt:        equ ThargonEdgesSize/4
  54++E79F
  55++E79F
  56++E79F 9F 24 00 00  ThargonNormals:	        DB $9F, $24, $00, $00
  57++E7A3 5F 14 05 07                          DB $5F, $14, $05, $07
  58++E7A7 7F 2E 2A 0E                          DB $7F, $2E, $2A, $0E
  59++E7AB 3F 24 00 68                          DB $3F, $24, $00, $68
  60++E7AF 3F 2E 2A 0E                          DB $3F, $2E, $2A, $0E
  61++E7B3 1F 14 05 07                          DB $1F, $14, $05, $07
  62++E7B7 1F 24 00 00                          DB $1F, $24, $00, $00
  63++E7BB
  64++E7BB
  65++E7BB              ThargonNormalsSize:     equ $ - ThargonNormals
  66++E7BB              ThargonLen:             equ $ - Thargon
  67++E7BB
# file closed: ./Data/ships/Thargon.asm
  93+ E7BB                                      include "Data/ships/TransportType10.asm"
# file opened: ./Data/ships/TransportType10.asm
   1++E7BB 00           TransportType10:	    DB $00
   2++E7BC C4 09                                DW $09C4
   3++E7BE B4 E8                                DW TransportType10Edges
   4++E7C0 B8                                   DB TransportType10EdgesSize
   5++E7C1 30 1A                                DB $30, $1A
   6++E7C3 25                                   DB TransportType10VertSize /6
   7++E7C4 DE                                   DB TransportType10VertSize
   8++E7C5 2E                                   DB TransportType10EdgesCnt
   9++E7C6 00 00                                DB $00, $00
  10++E7C8 38                                   DB TransportType10NormalsSize
  11++E7C9 10 20 0A                             DB $10, $20, $0A
  12++E7CC 6C E9                                DW TransportType10Normals
  13++E7CE 02 00                                DB $02, $00
  14++E7D0 D6 E7                                DW TransportType10Vertices
  15++E7D2 00 00                                DB 0,0                      ; Type and Tactics
  16++E7D4 00                                   DB 0
  17++E7D5 FF                                   DB $FF                      ; chance of ECM module
  18++E7D6
  19++E7D6 00 0A 1A 3F  TransportType10Vertices:DB $00, $0A, $1A, $3F, $06, $77     ;01
  19++E7DA 06 77
  20++E7DC 19 04 1A BF                          DB $19, $04, $1A, $BF, $01, $77     ;02
  20++E7E0 01 77
  21++E7E2 1C 03 1A FF                          DB $1C, $03, $1A, $FF, $01, $22     ;03
  21++E7E6 01 22
  22++E7E8 19 08 1A FF                          DB $19, $08, $1A, $FF, $02, $33     ;04
  22++E7EC 02 33
  23++E7EE 1A 08 1A 7F                          DB $1A, $08, $1A, $7F, $03, $44     ;05
  23++E7F2 03 44
  24++E7F4 1D 03 1A 7F                          DB $1D, $03, $1A, $7F, $04, $55     ;06
  24++E7F8 04 55
  25++E7FA 1A 04 1A 3F                          DB $1A, $04, $1A, $3F, $05, $66     ;07
  25++E7FE 05 66
  26++E800 00 06 0C 13                          DB $00, $06, $0C, $13, $FF, $FF     ;08
  26++E804 FF FF
  27++E806 1E 01 0C DF                          DB $1E, $01, $0C, $DF, $17, $89     ;09
  27++E80A 17 89
  28++E80C 21 08 0C DF                          DB $21, $08, $0C, $DF, $12, $39     ;10
  28++E810 12 39
  29++E812 21 08 0C 5F                          DB $21, $08, $0C, $5F, $34, $5A     ;11
  29++E816 34 5A
  30++E818 1E 01 0C 5F                          DB $1E, $01, $0C, $5F, $56, $AB     ;12
  30++E81C 56 AB
  31++E81E 0B 02 1E DF                          DB $0B, $02, $1E, $DF, $89, $CD     ;13
  31++E822 89 CD
  32++E824 0D 08 1E DF                          DB $0D, $08, $1E, $DF, $39, $DD     ;14
  32++E828 39 DD
  33++E82A 0E 08 1E 5F                          DB $0E, $08, $1E, $5F, $3A, $DD     ;15
  33++E82E 3A DD
  34++E830 0B 02 1E 5F                          DB $0B, $02, $1E, $5F, $AB, $CD     ;16
  34++E834 AB CD
  35++E836 05 06 02 87                          DB $05, $06, $02, $87, $77, $77     ;17
  35++E83A 77 77
  36++E83C 12 03 02 87                          DB $12, $03, $02, $87, $77, $77     ;18
  36++E840 77 77
  37++E842 05 07 07 A7                          DB $05, $07, $07, $A7, $77, $77     ;19
  37++E846 77 77
  38++E848 12 04 07 A7                          DB $12, $04, $07, $A7, $77, $77     ;20
  38++E84C 77 77
  39++E84E 0B 06 0E A7                          DB $0B, $06, $0E, $A7, $77, $77     ;21
  39++E852 77 77
  40++E854 0B 05 07 A7                          DB $0B, $05, $07, $A7, $77, $77     ;22
  40++E858 77 77
  41++E85A 05 07 0E 27                          DB $05, $07, $0E, $27, $66, $66     ;23
  41++E85E 66 66
  42++E860 12 04 0E 27                          DB $12, $04, $0E, $27, $66, $66     ;24
  42++E864 66 66
  43++E866 0B 05 07 27                          DB $0B, $05, $07, $27, $66, $66     ;25
  43++E86A 66 66
  44++E86C 05 06 03 27                          DB $05, $06, $03, $27, $66, $66     ;26
  44++E870 66 66
  45++E872 12 03 03 27                          DB $12, $03, $03, $27, $66, $66     ;27
  45++E876 66 66
  46++E878 0B 04 08 07                          DB $0B, $04, $08, $07, $66, $66     ;28
  46++E87C 66 66
  47++E87E 0B 05 03 27                          DB $0B, $05, $03, $27, $66, $66     ;29
  47++E882 66 66
  48++E884 10 08 0D E6                          DB $10, $08, $0D, $E6, $33, $33     ;30
  48++E888 33 33
  49++E88A 10 08 10 C6                          DB $10, $08, $10, $C6, $33, $33     ;31
  49++E88E 33 33
  50++E890 11 08 0D 66                          DB $11, $08, $0D, $66, $33, $33     ;32
  50++E894 33 33
  51++E896 11 08 10 46                          DB $11, $08, $10, $46, $33, $33     ;33
  51++E89A 33 33
  52++E89C 0D 03 1A E8                          DB $0D, $03, $1A, $E8, $00, $00     ;34
  52++E8A0 00 00
  53++E8A2 0D 03 1A 68                          DB $0D, $03, $1A, $68, $00, $00     ;35
  53++E8A6 00 00
  54++E8A8 09 03 1A 25                          DB $09, $03, $1A, $25, $00, $00     ;36
  54++E8AC 00 00
  55++E8AE 08 03 1A A5                          DB $08, $03, $1A, $A5, $00, $00     ;37
  55++E8B2 00 00
  56++E8B4
  57++E8B4              TransportType10VertSize: equ $ - TransportType10Vertices
  58++E8B4
  59++E8B4
  60++E8B4
  61++E8B4 1F 07 00 04  TransportType10Edges:	DB $1F, $07, $00, $04               ;01
  62++E8B8 1F 01 04 08                          DB $1F, $01, $04, $08               ;02
  63++E8BC 1F 02 08 0C                          DB $1F, $02, $08, $0C               ;03
  64++E8C0 1F 03 0C 10                          DB $1F, $03, $0C, $10               ;04
  65++E8C4 1F 04 10 14                          DB $1F, $04, $10, $14               ;05
  66++E8C8 1F 05 14 18                          DB $1F, $05, $14, $18               ;06
  67++E8CC 1F 06 00 18                          DB $1F, $06, $00, $18               ;07
  68++E8D0 10 67 00 1C                          DB $10, $67, $00, $1C               ;08
  69++E8D4 1F 17 04 20                          DB $1F, $17, $04, $20               ;09
  70++E8D8 0B 12 08 24                          DB $0B, $12, $08, $24               ;10
  71++E8DC 1F 23 0C 24                          DB $1F, $23, $0C, $24               ;11
  72++E8E0 1F 34 10 28                          DB $1F, $34, $10, $28               ;12
  73++E8E4 0B 45 14 28                          DB $0B, $45, $14, $28               ;13
  74++E8E8 1F 56 18 2C                          DB $1F, $56, $18, $2C               ;14
  75++E8EC 11 78 1C 20                          DB $11, $78, $1C, $20               ;15
  76++E8F0 11 19 20 24                          DB $11, $19, $20, $24               ;16
  77++E8F4 11 5A 28 2C                          DB $11, $5A, $28, $2C               ;17
  78++E8F8 11 6B 1C 2C                          DB $11, $6B, $1C, $2C               ;18
  79++E8FC 13 BC 1C 3C                          DB $13, $BC, $1C, $3C               ;19
  80++E900 13 8C 1C 30                          DB $13, $8C, $1C, $30               ;20
  81++E904 10 89 20 30                          DB $10, $89, $20, $30               ;21
  82++E908 1F 39 24 34                          DB $1F, $39, $24, $34               ;22
  83++E90C 1F 3A 28 38                          DB $1F, $3A, $28, $38               ;23
  84++E910 10 AB 2C 3C                          DB $10, $AB, $2C, $3C               ;24
  85++E914 1F 9D 30 34                          DB $1F, $9D, $30, $34               ;25
  86++E918 1F 3D 34 38                          DB $1F, $3D, $34, $38               ;26
  87++E91C 1F AD 38 3C                          DB $1F, $AD, $38, $3C               ;27
  88++E920 1F CD 30 3C                          DB $1F, $CD, $30, $3C               ;28
  89++E924 07 77 40 44                          DB $07, $77, $40, $44               ;29
  90++E928 07 77 48 4C                          DB $07, $77, $48, $4C               ;30
  91++E92C 07 77 4C 50                          DB $07, $77, $4C, $50               ;31
  92++E930 07 77 48 50                          DB $07, $77, $48, $50               ;32
  93++E934 07 77 50 54                          DB $07, $77, $50, $54               ;33
  94++E938 07 66 58 5C                          DB $07, $66, $58, $5C               ;34
  95++E93C 07 66 5C 60                          DB $07, $66, $5C, $60               ;35
  96++E940 07 66 60 58                          DB $07, $66, $60, $58               ;36
  97++E944 07 66 64 68                          DB $07, $66, $64, $68               ;37
  98++E948 07 66 68 6C                          DB $07, $66, $68, $6C               ;38
  99++E94C 07 66 64 6C                          DB $07, $66, $64, $6C               ;39
 100++E950 07 66 6C 70                          DB $07, $66, $6C, $70               ;40
 101++E954 06 33 74 78                          DB $06, $33, $74, $78               ;41
 102++E958 06 33 7C 80                          DB $06, $33, $7C, $80               ;42
 103++E95C 08 00 84 88                          DB $08, $00, $84, $88               ;43
 104++E960 05 00 88 8C                          DB $05, $00, $88, $8C               ;44
 105++E964 05 00 8C 90                          DB $05, $00, $8C, $90               ;45
 106++E968 05 00 90 84                          DB $05, $00, $90, $84               ;46
 107++E96C
 108++E96C              TransportType10EdgesSize: equ $ - TransportType10Edges
 109++E96C
 110++E96C
 111++E96C              TransportType10EdgesCnt: equ TransportType10EdgesSize/4
 112++E96C
 113++E96C
 114++E96C 3F 00 00 67  TransportType10Normals:	DB $3F, $00, $00, $67               ;01
 115++E970 BF 6F 30 07                          DB $BF, $6F, $30, $07               ;02
 116++E974 FF 69 3F 15                          DB $FF, $69, $3F, $15               ;03
 117++E978 5F 00 22 00                          DB $5F, $00, $22, $00               ;04
 118++E97C 7F 69 3F 15                          DB $7F, $69, $3F, $15               ;05
 119++E980 3F 6F 30 07                          DB $3F, $6F, $30, $07               ;06
 120++E984 1F 08 20 03                          DB $1F, $08, $20, $03               ;07
 121++E988 9F 08 20 03                          DB $9F, $08, $20, $03               ;08
 122++E98C 93 08 22 0B                          DB $93, $08, $22, $0B               ;09
 123++E990 9F 4B 20 4F                          DB $9F, $4B, $20, $4F               ;10
 124++E994 1F 4B 20 4F                          DB $1F, $4B, $20, $4F               ;11
 125++E998 13 08 22 0B                          DB $13, $08, $22, $0B               ;12
 126++E99C 1F 00 26 11                          DB $1F, $00, $26, $11               ;13
 127++E9A0 1F 00 00 79                          DB $1F, $00, $00, $79               ;14
 128++E9A4
 129++E9A4
 130++E9A4              TransportType10NormalsSize: equ $ - TransportType10Normals
 131++E9A4              TransportType10Len: equ $ - TransportType10
 132++E9A4
# file closed: ./Data/ships/TransportType10.asm
  94+ E9A4                                      include "Data/ships/Viper.asm"
# file opened: ./Data/ships/Viper.asm
   1++E9A4              ; Mapping Orginal to new
   2++E9A4              ; 0    => 0
   3++E9A4              ; 1-2  => 1-2
   4++E9A4              ; 3    => EQU Edges
   5++E9A4              ; 4    => EQU Normals
   6++E9A4              ; 5    => EQU EdgesCnt
   7++E9A4              ; 6    => 6
   8++E9A4              ; 7    => 7
   9++E9A4              ; 8    => EQU VertSize
  10++E9A4              ; 9    => EQU EdgesCnt
  11++E9A4              ; 10-11=> 10-11
  12++E9A4              ; 12   => EQU  NormalsSize
  13++E9A4              ; 13   => 13
  14++E9A4              ; 14   => 14
  15++E9A4              ; 15   => 15
  16++E9A4              ; 16   => EQU Edges
  17++E9A4              ; 17   => EQU Normals
  18++E9A4              ; 18   => 18
  19++E9A4              ; 19   => 19
  20++E9A4              ;\ -> &5C93  \ Viper = Type 16
  21++E9A4 00           Viper:                  DB $00
  22++E9A5 F9 15                                DW $15F9
  23++E9A7 19 EA                                DW ViperEdges
  24++E9A9 50                                   DB ViperEdgesSize
  25++E9AA 00 2A                                DB $00,$2A
  26++E9AC 0F                                   DB ViperVertSize /6
  27++E9AD 5A                                   DB ViperVertSize
  28++E9AE 14                                   DB ViperEdgesCnt
  29++E9AF 00 00                                DB $00,$00
  30++E9B1 1C                                   DB ViperNormalsSize
  31++E9B2 17 64 20                             DB $17, $64, $20
  32++E9B5 69 EA                                DW ViperNormals
  33++E9B7 01 11                                DB $01, $11
  34++E9B9 BF E9                                DW ViperVertices
  35++E9BB 00 00                                DB 0,0                      ; Type and Tactics
  36++E9BD 01                                   DB ShipCanAnger
  37++E9BE FF                                   DB $FF                      ; chance of ECM module
  38++E9BF
  39++E9BF 00 00 48 1F  ViperVertices:          DB $00, $00, $48, $1F, $21, $43
  39++E9C3 21 43
  40++E9C5 00 10 18 1E                          DB $00, $10, $18, $1E, $10, $22
  40++E9C9 10 22
  41++E9CB 00 10 18 5E                          DB $00, $10, $18, $5E, $43, $55
  41++E9CF 43 55
  42++E9D1 30 00 18 3F                          DB $30, $00, $18, $3F, $42, $66
  42++E9D5 42 66
  43++E9D7 30 00 18 BF                          DB $30, $00, $18, $BF, $31, $66
  43++E9DB 31 66
  44++E9DD 18 10 18 7E                          DB $18, $10, $18, $7E, $54, $66
  44++E9E1 54 66
  45++E9E3 18 10 18 FE                          DB $18, $10, $18, $FE, $35, $66
  45++E9E7 35 66
  46++E9E9 18 10 18 3F                          DB $18, $10, $18, $3F, $20, $66
  46++E9ED 20 66
  47++E9EF 18 10 18 BF                          DB $18, $10, $18, $BF, $10, $66
  47++E9F3 10 66
  48++E9F5 20 00 18 B3                          DB $20, $00, $18, $B3, $66, $66
  48++E9F9 66 66
  49++E9FB 20 00 18 33                          DB $20, $00, $18, $33, $66, $66
  49++E9FF 66 66
  50++EA01 08 08 18 33                          DB $08, $08, $18, $33, $66, $66
  50++EA05 66 66
  51++EA07 08 08 18 B3                          DB $08, $08, $18, $B3, $66, $66
  51++EA0B 66 66
  52++EA0D 08 08 18 F2                          DB $08, $08, $18, $F2, $66, $66
  52++EA11 66 66
  53++EA13 08 08 18 72                          DB $08, $08, $18, $72, $66, $66
  53++EA17 66 66
  54++EA19              ViperVertSize           equ $  - ViperVertices
  55++EA19 1F 42 00 0C  ViperEdges:             DB $1F, $42, $00, $0C, $1E, $21, $00, $04
  55++EA1D 1E 21 00 04
  56++EA21 1E 43 00 08                          DB $1E, $43, $00, $08, $1F, $31, $00, $10
  56++EA25 1F 31 00 10
  57++EA29 1E 20 04 1C                          DB $1E, $20, $04, $1C, $1E, $10, $04, $20
  57++EA2D 1E 10 04 20
  58++EA31 1E 54 08 14                          DB $1E, $54, $08, $14, $1E, $53, $08, $18
  58++EA35 1E 53 08 18
  59++EA39 1F 60 1C 20                          DB $1F, $60, $1C, $20, $1E, $65, $14, $18
  59++EA3D 1E 65 14 18
  60++EA41 1F 61 10 20                          DB $1F, $61, $10, $20, $1E, $63, $10, $18
  60++EA45 1E 63 10 18
  61++EA49 1F 62 0C 1C                          DB $1F, $62, $0C, $1C, $1E, $46, $0C, $14
  61++EA4D 1E 46 0C 14
  62++EA51 13 66 24 30                          DB $13, $66, $24, $30, $12, $66, $24, $34
  62++EA55 12 66 24 34
  63++EA59 13 66 28 2C                          DB $13, $66, $28, $2C, $12, $66, $28, $38
  63++EA5D 12 66 28 38
  64++EA61 10 66 2C 38                          DB $10, $66, $2C, $38, $10, $66, $30, $34
  64++EA65 10 66 30 34
  65++EA69              ViperEdgesSize          equ $  - ViperEdges
  66++EA69              ViperEdgesCnt           equ ViperEdgesSize/4
  67++EA69 1F 00 20 00  ViperNormals            DB $1F, $00, $20, $00, $9F, $16, $21, $0B
  67++EA6D 9F 16 21 0B
  68++EA71 1F 16 21 0B                          DB $1F, $16, $21, $0B, $DF, $16, $21, $0B
  68++EA75 DF 16 21 0B
  69++EA79 5F 16 21 0B                          DB $5F, $16, $21, $0B, $5F, $00, $20, $00
  69++EA7D 5F 00 20 00
  70++EA81 3F 00 00 30                          DB $3F, $00, $00, $30
  71++EA85              ViperNormalsSize        equ $  - ViperNormals
  72++EA85              ViperLen                equ $  - Viper
  73++EA85
# file closed: ./Data/ships/Viper.asm
  95+ EA85                                      include "Data/ships/Worm.asm"
# file opened: ./Data/ships/Worm.asm
   1++EA85 00           Worm:	                DB $00
   2++EA86 49 26                                DW $2649
   3++EA88 DC EA                                DW WormEdges
   4++EA8A 40                                   DB WormEdgesSize
   5++EA8B 00 12                                DB $00, $12
   6++EA8D 0A                                   DB WormVertSize /6
   7++EA8E 3C                                   DB WormVertSize
   8++EA8F 10                                   DB WormEdgesCnt
   9++EA90 00 00                                DB $00, $00
  10++EA92 20                                   DB WormNormalsSize
  11++EA93 13 1E 17                             DB $13, $1E, $17
  12++EA96 1C EB                                DW WormNormals
  13++EA98 03 08                                DB $03, $08
  14++EA9A A0 EA                                DW WormVertices
  15++EA9C 00 00                                DB 0,0                      ; Type and Tactics
  16++EA9E 01                                   DB ShipCanAnger
  17++EA9F B0                                   DB $B0                      ; chance of ECM module
  18++EAA0 0A 0A 23 5F  WormVertices:	        DB $0A, $0A, $23, $5F, $02, $77
  18++EAA4 02 77
  19++EAA6 0A 0A 23 DF                          DB $0A, $0A, $23, $DF, $03, $77
  19++EAAA 03 77
  20++EAAC 05 06 0F 1F                          DB $05, $06, $0F, $1F, $01, $24
  20++EAB0 01 24
  21++EAB2 05 06 0F 9F                          DB $05, $06, $0F, $9F, $01, $35
  21++EAB6 01 35
  22++EAB8 0F 0A 19 5F                          DB $0F, $0A, $19, $5F, $24, $77
  22++EABC 24 77
  23++EABE 0F 0A 19 DF                          DB $0F, $0A, $19, $DF, $35, $77
  23++EAC2 35 77
  24++EAC4 1A 0A 19 7F                          DB $1A, $0A, $19, $7F, $46, $77
  24++EAC8 46 77
  25++EACA 1A 0A 19 FF                          DB $1A, $0A, $19, $FF, $56, $77
  25++EACE 56 77
  26++EAD0 08 0E 19 3F                          DB $08, $0E, $19, $3F, $14, $66
  26++EAD4 14 66
  27++EAD6 08 0E 19 BF                          DB $08, $0E, $19, $BF, $15, $66
  27++EADA 15 66
  28++EADC
  29++EADC              WormVertSize: equ $ - WormVertices
  30++EADC
  31++EADC
  32++EADC 1F 07 00 04  WormEdges:	            DB $1F, $07, $00, $04
  33++EAE0 1F 37 04 14                          DB $1F, $37, $04, $14
  34++EAE4 1F 57 14 1C                          DB $1F, $57, $14, $1C
  35++EAE8 1F 67 1C 18                          DB $1F, $67, $1C, $18
  36++EAEC 1F 47 18 10                          DB $1F, $47, $18, $10
  37++EAF0 1F 27 10 00                          DB $1F, $27, $10, $00
  38++EAF4 1F 02 00 08                          DB $1F, $02, $00, $08
  39++EAF8 1F 03 04 0C                          DB $1F, $03, $04, $0C
  40++EAFC 1F 24 10 08                          DB $1F, $24, $10, $08
  41++EB00 1F 35 14 0C                          DB $1F, $35, $14, $0C
  42++EB04 1F 14 08 20                          DB $1F, $14, $08, $20
  43++EB08 1F 46 20 18                          DB $1F, $46, $20, $18
  44++EB0C 1F 15 0C 24                          DB $1F, $15, $0C, $24
  45++EB10 1F 56 24 1C                          DB $1F, $56, $24, $1C
  46++EB14 1F 01 08 0C                          DB $1F, $01, $08, $0C
  47++EB18 1F 16 20 24                          DB $1F, $16, $20, $24
  48++EB1C
  49++EB1C              WormEdgesSize: equ $ - WormEdges
  50++EB1C
  51++EB1C
  52++EB1C              WormEdgesCnt: equ WormEdgesSize/4
  53++EB1C
  54++EB1C
  55++EB1C 1F 00 58 46  WormNormals:	        DB $1F, $00, $58, $46
  56++EB20 1F 00 45 0E                          DB $1F, $00, $45, $0E
  57++EB24 1F 46 42 23                          DB $1F, $46, $42, $23
  58++EB28 9F 46 42 23                          DB $9F, $46, $42, $23
  59++EB2C 1F 40 31 0E                          DB $1F, $40, $31, $0E
  60++EB30 9F 40 31 0E                          DB $9F, $40, $31, $0E
  61++EB34 3F 00 00 C8                          DB $3F, $00, $00, $C8
  62++EB38 5F 00 50 00                          DB $5F, $00, $50, $00
  63++EB3C
  64++EB3C
  65++EB3C              WormNormalsSize: equ $ - WormNormals
  66++EB3C              WormLen: equ $ - Worm
  67++EB3C
# file closed: ./Data/ships/Worm.asm
  96+ EB3C                                      include "Data/ships/Rattler.asm"
# file opened: ./Data/ships/Rattler.asm
   1++EB3C 02           Rattler:	            DB $02
   2++EB3D 70 17                                DW $1770
   3++EB3F B1 EB                                DW RattlerEdges
   4++EB41 68                                   DB RattlerEdgesSize
   5++EB42 00 2A                                DB $00, $2A
   6++EB44 0F                                   DB RattlerVertSize /6
   7++EB45 5A                                   DB RattlerVertSize
   8++EB46 1A                                   DB RattlerEdgesCnt
   9++EB47 00 96                                DB $00, $96
  10++EB49 34                                   DB RattlerNormalsSize
  11++EB4A 0A 71 1F                             DB $0A, $71, $1F
  12++EB4D 19 EC                                DW RattlerNormals
  13++EB4F 01 22                                DB $01, $22
  14++EB51 57 EB                                DW RattlerVertices
  15++EB53 00 00                                DB 0,0                      ; Type and Tactics
  16++EB55 01                                   DB ShipCanAnger
  17++EB56 90                                   DB $90                      ; chance of ECM module
  18++EB57
  19++EB57
  20++EB57 00 00 3C 1F  RattlerVertices:	    DB $00, $00, $3C, $1F, $89, $23
  20++EB5B 89 23
  21++EB5D 28 00 28 1F                          DB $28, $00, $28, $1F, $9A, $34
  21++EB61 9A 34
  22++EB63 28 00 28 9F                          DB $28, $00, $28, $9F, $78, $12
  22++EB67 78 12
  23++EB69 3C 00 00 1F                          DB $3C, $00, $00, $1F, $AB, $45
  23++EB6D AB 45
  24++EB6F 3C 00 00 9F                          DB $3C, $00, $00, $9F, $67, $01
  24++EB73 67 01
  25++EB75 46 00 28 3F                          DB $46, $00, $28, $3F, $CC, $5B
  25++EB79 CC 5B
  26++EB7B 46 00 28 BF                          DB $46, $00, $28, $BF, $CC, $06
  26++EB7F CC 06
  27++EB81 00 14 28 3F                          DB $00, $14, $28, $3F, $FF, $FF
  27++EB85 FF FF
  28++EB87 00 14 28 7F                          DB $00, $14, $28, $7F, $FF, $FF
  28++EB8B FF FF
  29++EB8D 0A 06 28 AA                          DB $0A, $06, $28, $AA, $CC, $CC
  29++EB91 CC CC
  30++EB93 0A 06 28 EA                          DB $0A, $06, $28, $EA, $CC, $CC
  30++EB97 CC CC
  31++EB99 14 00 28 AA                          DB $14, $00, $28, $AA, $CC, $CC
  31++EB9D CC CC
  32++EB9F 0A 06 28 2A                          DB $0A, $06, $28, $2A, $CC, $CC
  32++EBA3 CC CC
  33++EBA5 0A 06 28 6A                          DB $0A, $06, $28, $6A, $CC, $CC
  33++EBA9 CC CC
  34++EBAB 14 00 28 2A                          DB $14, $00, $28, $2A, $CC, $CC
  34++EBAF CC CC
  35++EBB1
  36++EBB1              RattlerVertSize: equ $ - RattlerVertices
  37++EBB1
  38++EBB1
  39++EBB1 1F 06 10 18  RattlerEdges:	DB $1F, $06, $10, $18
  40++EBB5 1F 17 08 10  	DB $1F, $17, $08, $10
  41++EBB9 1F 28 00 08  	DB $1F, $28, $00, $08
  42++EBBD 1F 39 00 04  	DB $1F, $39, $00, $04
  43++EBC1 1F 4A 04 0C  	DB $1F, $4A, $04, $0C
  44++EBC5 1F 5B 0C 14  	DB $1F, $5B, $0C, $14
  45++EBC9 1F 0C 18 1C  	DB $1F, $0C, $18, $1C
  46++EBCD 1F 6C 18 20  	DB $1F, $6C, $18, $20
  47++EBD1 1F 01 10 1C  	DB $1F, $01, $10, $1C
  48++EBD5 1F 67 10 20  	DB $1F, $67, $10, $20
  49++EBD9 1F 12 08 1C  	DB $1F, $12, $08, $1C
  50++EBDD 1F 78 08 20  	DB $1F, $78, $08, $20
  51++EBE1 1F 23 00 1C  	DB $1F, $23, $00, $1C
  52++EBE5 1F 89 00 20  	DB $1F, $89, $00, $20
  53++EBE9 1F 34 04 1C  	DB $1F, $34, $04, $1C
  54++EBED 1F 9A 04 20  	DB $1F, $9A, $04, $20
  55++EBF1 1F 45 0C 1C  	DB $1F, $45, $0C, $1C
  56++EBF5 1F AB 0C 20  	DB $1F, $AB, $0C, $20
  57++EBF9 1F 5C 14 1C  	DB $1F, $5C, $14, $1C
  58++EBFD 1F BC 14 20  	DB $1F, $BC, $14, $20
  59++EC01 0A CC 24 28  	DB $0A, $CC, $24, $28
  60++EC05 0A CC 28 2C  	DB $0A, $CC, $28, $2C
  61++EC09 0A CC 2C 24  	DB $0A, $CC, $2C, $24
  62++EC0D 0A CC 30 34  	DB $0A, $CC, $30, $34
  63++EC11 0A CC 34 38  	DB $0A, $CC, $34, $38
  64++EC15 0A CC 38 30  	DB $0A, $CC, $38, $30
  65++EC19
  66++EC19              RattlerEdgesSize: equ $ - RattlerEdges
  67++EC19
  68++EC19
  69++EC19              RattlerEdgesCnt: equ RattlerEdgesSize/4
  70++EC19
  71++EC19
  72++EC19 9F 1A 5C 06  RattlerNormals:	DB $9F, $1A, $5C, $06
  73++EC1D 9F 17 5C 0B  	DB $9F, $17, $5C, $0B
  74++EC21 9F 09 5D 12  	DB $9F, $09, $5D, $12
  75++EC25 1F 09 5D 12  	DB $1F, $09, $5D, $12
  76++EC29 1F 17 5C 0B  	DB $1F, $17, $5C, $0B
  77++EC2D 1F 1A 5C 06  	DB $1F, $1A, $5C, $06
  78++EC31 DF 1A 5C 06  	DB $DF, $1A, $5C, $06
  79++EC35 DF 17 5C 0B  	DB $DF, $17, $5C, $0B
  80++EC39 DF 09 5D 12  	DB $DF, $09, $5D, $12
  81++EC3D 5F 09 5D 12  	DB $5F, $09, $5D, $12
  82++EC41 5F 17 5C 0B  	DB $5F, $17, $5C, $0B
  83++EC45 5F 1A 5C 06  	DB $5F, $1A, $5C, $06
  84++EC49 3F 00 00 60  	DB $3F, $00, $00, $60
  85++EC4D
  86++EC4D              RattlerNormalsSize: equ $ - RattlerNormals
  87++EC4D              RattlerLen: equ $ - Rattler
  88++EC4D
# file closed: ./Data/ships/Rattler.asm
  97+ EC4D
# file closed: ./Data/ShipModelMetaData3.asm
 860  EC4D              ;;Privisioned for more models ; Bank 69  ------------------------------------------------------------------------------------------------------------------------
 861  EC4D              ;;Privisioned for more models     SLOT    ShipModelsAddr
 862  EC4D              ;;Privisioned for more models     PAGE    BankShipModels4
 863  EC4D              ;;Privisioned for more models 	ORG     ShipModelsAddr, BankShipModels4
 864  EC4D
 865  EC4D              ; Bank 60  ------------------------------------------------------------------------------------------------------------------------
 866  EC4D                  SLOT    SpritemembankAddr
 867  EC4D                  PAGE    BankSPRITE
 868  EC4D              	ORG     SpritemembankAddr, BankSPRITE
 869  E000                  INCLUDE "./Layer3Sprites/sprite_routines.asm"
# file opened: ./Layer3Sprites/sprite_routines.asm
   1+ E000
   2+ E000              galactic_cursor_sprite				equ	0
   3+ E000              galactic_cursor_sprite1				equ	galactic_cursor_sprite+1
   4+ E000              galactic_cursor_sprite2				equ	galactic_cursor_sprite1+2
   5+ E000
   6+ E000              galactic_hyper_sprite				equ	galactic_cursor_sprite2+1
   7+ E000              ;galactic_hyper_sprite1				equ galactic_hyper_sprite+1
   8+ E000              ;galactic_hyper_sprite2				equ	galactic_hyper_sprite1+1
   9+ E000
  10+ E000              local_cursor_sprite					equ	galactic_hyper_sprite+1
  11+ E000              local_cursor_sprite1				equ	local_cursor_sprite+1
  12+ E000              local_cursor_sprite2				equ	local_cursor_sprite1+1
  13+ E000
  14+ E000              local_hyper_sprite					equ	local_cursor_sprite2+1
  15+ E000              local_hyper_sprite1					equ	local_hyper_sprite+1
  16+ E000              local_hyper_sprite2					equ	local_hyper_sprite1+2
  17+ E000
  18+ E000              reticlule_sprite1                   equ	local_hyper_sprite2+1
  19+ E000              reticlule_sprite2                   equ	reticlule_sprite1+1
  20+ E000              reticlule_sprite3                   equ	reticlule_sprite2+1
  21+ E000              reticlule_sprite4                   equ reticlule_sprite3+1
  22+ E000
  23+ E000              laser_sprite1                       equ	reticlule_sprite4+1
  24+ E000              laser_sprite2                       equ	laser_sprite1    +1
  25+ E000              laser_sprite3                       equ	laser_sprite2    +1
  26+ E000              laser_sprite4                       equ laser_sprite3    +1
  27+ E000              laser_sprite5                       equ	laser_sprite4    +1
  28+ E000              laser_sprite6                       equ	laser_sprite5    +1
  29+ E000              laser_sprite7                       equ	laser_sprite6    +1
  30+ E000              laser_sprite8                       equ laser_sprite7    +1
  31+ E000              laser_sprite9                       equ	laser_sprite8    +1
  32+ E000              laser_sprite10                      equ	laser_sprite9    +1
  33+ E000              laser_sprite11                      equ	laser_sprite10   +1
  34+ E000              laser_sprite12                      equ laser_sprite11   +1
  35+ E000              laser_sprite13                      equ	laser_sprite12   +1
  36+ E000              laser_sprite14                      equ	laser_sprite13   +1
  37+ E000              laser_sprite15                      equ	laser_sprite14   +1
  38+ E000              laser_sprite16                      equ laser_sprite15   +1
  39+ E000              compass_sun                         equ laser_sprite16   +1
  40+ E000              compass_station                     equ compass_sun      +1
  41+ E000              targetting_sprite1                  equ compass_station  +1
  42+ E000              targetting_sprite2                  equ targetting_sprite1   +1
  43+ E000
  44+ E000              glactic_pattern_1					equ 0
  45+ E000              glactic_hyper_pattern_1             equ 2
  46+ E000              local_present_cursor                equ 4
  47+ E000              local_hyper_pattern                 equ 7
  48+ E000              reticule_pattern_1                  equ 10
  49+ E000              reticule_pattern_2                  equ 11
  50+ E000              laser_pattern_1                     equ 12
  51+ E000              laser_pattern_2                     equ 13
  52+ E000              laser_pattern_3                     equ 14
  53+ E000              laser_pattern_4                     equ 15
  54+ E000              laser_pattern_5                     equ 16
  55+ E000              targetting_pattern                  equ 23
  56+ E000              lock_pattern                        equ 24
  57+ E000
  58+ E000              compass_sun_infront                 equ 17
  59+ E000              compass_sun_behind                  equ 18
  60+ E000              compass_station_infront             equ 19
  61+ E000              compass_station_behind              equ 20
  62+ E000              spritecursoroffset					equ 17
  63+ E000              spriteborderoffset                  equ 32
  64+ E000
  65+ E000              HideSprite:                 MACRO   spritenbr
  66+ E000 ~                                        nextreg		SPRITE_PORT_INDEX_REGISTER,spritenbr
  67+ E000 ~                                        nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
  68+ E000                                          ENDM
  69+ E000
  70+ E000              ; " sprite_big BC = rowcol, D = sprite nbr , E= , pattern"
  71+ E000              sprite_big:
  72+ E000 7A           .SetAnchor:	                ld		a,d                                 ; a = sprite nbr, bug fix?
  73+ E001 F5                                       push	af									; save id for next few
  74+ E002 D5                                       push	de
  75+ E003 ED 92 34                                 nextreg	SPRITE_PORT_INDEX_REGISTER,a		; set up sprite id
  76+ E006              ; write out X position bits 1 to 8
  77+ E006 79                                       ld		a,c
  78+ E007 21 11 00                                 ld      hl,spritecursoroffset
  79+ E00A ED 31                                    add		hl,a                                ; hl = full x position
  80+ E00C 7D                                       ld		a,l
  81+ E00D ED 92 35                                 nextreg	SPRITE_PORT_ATTR0_REGISTER,a		; Set up lower x cc
  82+ E010              ; write out Y position bits 1 to 8
  83+ E010 EB                                       ex		de,hl								; de = full x position
  84+ E011 78                                       ld		a,b
  85+ E012 21 11 00                                 ld      hl,spritecursoroffset
  86+ E015 ED 31                                    add		hl,a
  87+ E017 7D                                       ld		a,l                                 ; hl = full y position
  88+ E018 ED 92 36                                 nextreg	SPRITE_PORT_ATTR1_REGISTER,a		; lower y coord on screen
  89+ E01B              ; write out MSB of X as its an anchor
  90+ E01B 7A                                       ld		a,d									; de = MSB of X (hl bit 0)
  91+ E01C ED 92 37                                 nextreg	SPRITE_PORT_ATTR2_REGISTER,a		; lower y
  92+ E01F              ; write out sprite pattern
  93+ E01F D1                                       pop		de                                  ; de = pattern and sprite nbr
  94+ E020 7B                                       ld		a,e
  95+ E021 F6 C0                                    or		%11000000							;
  96+ E023 ED 92 38                                 nextreg	SPRITE_PORT_ATTR3_REGISTER,a		; visible 5 bytes pattern e
  97+ E026              ; write out msb of y in h must be bit 0 only
  98+ E026 3E 00                                    ld		a,%00000000							; big unified composite
  99+ E028 B4                                       or		h									; MSB Y
 100+ E029 ED 92 39                                 nextreg	SPRITE_PORT_ATTR4_REGISTER,a		; visible 5 bytes pattern e
 101+ E02C F1           .BigSprite1:                pop		af
 102+ E02D 3C                                       inc		a
 103+ E02E F5                                       push	af
 104+ E02F ED 92 34                                 nextreg		SPRITE_PORT_INDEX_REGISTER,a
 105+ E032 3E 10                                    ld		a,16
 106+ E034 ED 92 35                                 nextreg		SPRITE_PORT_ATTR0_REGISTER,a	; lower x
 107+ E037 AF                                       xor 	a
 108+ E038 ED 92 36                                 nextreg		SPRITE_PORT_ATTR1_REGISTER,a	; lower y
 109+ E03B ED 92 37                                 nextreg		SPRITE_PORT_ATTR2_REGISTER,a	; relative setup
 110+ E03E 3E C1                                    ld		a,%11000001							; relative and 4 bytes of data, pattern 1
 111+ E040 ED 92 38                                 nextreg		SPRITE_PORT_ATTR3_REGISTER,a
 112+ E043 3E 41                                    ld		a,%01000001							; big unified composite
 113+ E045 ED 92 39                                 nextreg	SPRITE_PORT_ATTR4_REGISTER,a		; visible 5 bytes pattern e
 114+ E048 F1           .BigSprite2:                pop		af
 115+ E049 3C                                       inc		a
 116+ E04A ED 92 34                                 nextreg		SPRITE_PORT_INDEX_REGISTER,a
 117+ E04D AF                                       xor		a
 118+ E04E ED 92 35                                 nextreg		SPRITE_PORT_ATTR0_REGISTER,a	; lower x
 119+ E051 3E 10                                    ld		a,16
 120+ E053 ED 92 36                                 nextreg		SPRITE_PORT_ATTR1_REGISTER,a	; lower y
 121+ E056 AF                                       xor		a
 122+ E057 ED 92 37                                 nextreg		SPRITE_PORT_ATTR2_REGISTER,a	; relative setup
 123+ E05A 3E C2                                    ld		a,%11000010							; relative and 4 bytes of data, pattern 2
 124+ E05C ED 92 38                                 nextreg		SPRITE_PORT_ATTR3_REGISTER,a
 125+ E05F 3E 41                                    ld		a,%01000001							; big unified composite
 126+ E061 ED 92 39                                 nextreg	SPRITE_PORT_ATTR4_REGISTER,a		; visible 5 bytes pattern e
 127+ E064 C9                                       ret
 128+ E065
 129+ E065              ; for a sinle sprite within 256x192 area
 130+ E065 7A           sprite_single:          ld		a,d                                 ; a = sprite nbr, bug fix?
 131+ E066 D5                                   push    de
 132+ E067 ED 92 34                             nextreg	SPRITE_PORT_INDEX_REGISTER,a		; set up sprite id
 133+ E06A              ; write out X position bits 1 to 8
 134+ E06A 79                                   ld		a,c                                 ; a = column (c)
 135+ E06B 21 20 00                             ld      hl,spriteborderoffset
 136+ E06E ED 31                                add		hl,a                                ; hl = full x position
 137+ E070 EB                                   ex		de,hl								; de = full x position
 138+ E071 7B                                   ld		a,e
 139+ E072 ED 92 35                             nextreg	SPRITE_PORT_ATTR0_REGISTER,a		; Set up lower x cc
 140+ E075              ; write out Y position bits 1 to 8
 141+ E075 78                                   ld		a,b                                 ; a = row
 142+ E076 21 20 00                             ld      hl,spriteborderoffset
 143+ E079 ED 31                                add		hl,a
 144+ E07B 7D                                   ld		a,l                                 ; hl = full y position
 145+ E07C ED 92 36                             nextreg	SPRITE_PORT_ATTR1_REGISTER,a		; lower y coord on screen
 146+ E07F              ; write out MSB of X as its an anchor
 147+ E07F 7A                                   ld		a,d									; de = MSB of X (hl bit 0)
 148+ E080 ED 92 37                             nextreg	SPRITE_PORT_ATTR2_REGISTER,a		; lower y
 149+ E083              ; write out sprite pattern
 150+ E083 D1                                   pop     de
 151+ E084 7B                                   ld		a,e
 152+ E085 F6 80                                or		%10000000							;
 153+ E087 ED 92 38                             nextreg	SPRITE_PORT_ATTR3_REGISTER,a		; visible 5 bytes pattern e
 154+ E08A              ; write out extended attribute
 155+ E08A 3E 00                                ld      a,%00000000                         ; its a single sprite
 156+ E08C B4                                   or      h
 157+ E08D ED 92 39                             nextreg	SPRITE_PORT_ATTR4_REGISTER,a
 158+ E090 C9                                   ret
 159+ E091              ; ">sprite_galactic_cursor BC = rowcol"
 160+ E091 16 00        sprite_galactic_cursor:     ld		d,galactic_cursor_sprite
 161+ E093 1E 00                                    ld		e,0
 162+ E095 78                                       ld		a,b
 163+ E096 C6 18                                    add		a,galactic_chart_y_offset
 164+ E098 47                                       ld		b,a
 165+ E099 CD 00 E0                                 call	sprite_big
 166+ E09C C9                                       ret
 167+ E09D
 168+ E09D              ; "> sprite_galactic_hyper_cursorBC = rowcol"
 169+ E09D 78           sprite_galactic_hyper_cursor:ld		a,b
 170+ E09E C6 04                                    add		a,galactic_chart_hyper_offset
 171+ E0A0 47                                       ld		b,a
 172+ E0A1 16 04                                    ld		d,galactic_hyper_sprite
 173+ E0A3 1E 03                                    ld		e,3
 174+ E0A5 CD 65 E0                                 call	sprite_single ; sprite_big:
 175+ E0A8 C9                                       ret
 176+ E0A9              ; moves hyperspace cursor to target system x position
 177+ E0A9 3E 04        sprite_ghc_move:            ld		a,galactic_hyper_sprite
 178+ E0AB ED 92 34                                 nextreg	SPRITE_PORT_INDEX_REGISTER,a		; set up sprite id
 179+ E0AE              ; write out X position bits 1 to 8
 180+ E0AE 79                                       ld		a,c
 181+ E0AF 21 1C 00                                 ld      hl,galactic_chart_hyper_x_offset
 182+ E0B2 ED 31                                    add		hl,a                                ; hl = full x position
 183+ E0B4 7D                                       ld		a,l
 184+ E0B5 ED 92 35                                 nextreg	SPRITE_PORT_ATTR0_REGISTER,a		; Set up lower x cc
 185+ E0B8              ; write out Y position bits 1 to 8
 186+ E0B8 EB                                       ex		de,hl								; de = full x position
 187+ E0B9 CB 38                                    srl		b			    					; row is row / 2
 188+ E0BB 78                                       ld      a,b
 189+ E0BC 21 34 00                                 ld      hl,galactic_chart_hyper_y_offset
 190+ E0BF ED 31                                    add		hl,a
 191+ E0C1 7D                                       ld		a,l                                 ; hl = full y position
 192+ E0C2 ED 92 36                                 nextreg	SPRITE_PORT_ATTR1_REGISTER,a		; lower y coord on screen
 193+ E0C5              ; write out MSB of X as its an anchor
 194+ E0C5 7A                                       ld		a,d									; de = MSB of X (hl bit 0)
 195+ E0C6 ED 92 37                                 nextreg	SPRITE_PORT_ATTR2_REGISTER,a		; lower y
 196+ E0C9              ; write out msb of y in h must be bit 0 only
 197+ E0C9 3E 00                                    ld		a,%00000000							; big unified composite
 198+ E0CB B2                                       or		d									; MSB Y
 199+ E0CC ED 92 39                                 nextreg	SPRITE_PORT_ATTR4_REGISTER,a		; visible 5 bytes pattern e
 200+ E0CF C9                                       ret
 201+ E0D0
 202+ E0D0
 203+ E0D0 3E 08        sprite_lhc_move:            ld		a,local_hyper_sprite
 204+ E0D2 ED 92 34                                 nextreg	SPRITE_PORT_INDEX_REGISTER,a		; set up sprite id
 205+ E0D5              ; write out X position bits 1 to 8
 206+ E0D5 79                                       ld		a,c
 207+ E0D6 21 11 00                                 ld      hl,spritecursoroffset
 208+ E0D9 ED 31                                    add		hl,a                                ; hl = full x position
 209+ E0DB 7D                                       ld		a,l
 210+ E0DC ED 92 35                                 nextreg	SPRITE_PORT_ATTR0_REGISTER,a		; Set up lower x cc
 211+ E0DF              ; write out Y position bits 1 to 8
 212+ E0DF EB                                       ex		de,hl								; de = full x position
 213+ E0E0 78                                       ld		a,b
 214+ E0E1 21 11 00                                 ld      hl,spritecursoroffset
 215+ E0E4 ED 31                                    add		hl,a
 216+ E0E6 7D                                       ld		a,l                                 ; hl = full y position
 217+ E0E7 ED 92 36                                 nextreg	SPRITE_PORT_ATTR1_REGISTER,a		; lower y coord on screen
 218+ E0EA              ; write out MSB of X as its an anchor
 219+ E0EA 7A                                       ld		a,d									; de = MSB of X (hl bit 0)
 220+ E0EB ED 92 37                                 nextreg	SPRITE_PORT_ATTR2_REGISTER,a		; lower y
 221+ E0EE              ; write out msb of y in h must be bit 0 only
 222+ E0EE 3E 00                                    ld		a,%00000000							; big unified composite
 223+ E0F0 B2                                       or		d									; MSB Y
 224+ E0F1 ED 92 39                                 nextreg	SPRITE_PORT_ATTR4_REGISTER,a		; visible 5 bytes pattern e
 225+ E0F4 C9                                       ret
 226+ E0F5
 227+ E0F5              ; "sprite_local_cursor BC = rowcol"
 228+ E0F5 16 05        sprite_local_cursor:        ld		d,local_cursor_sprite
 229+ E0F7 1E 04                                    ld		e,local_present_cursor
 230+ E0F9 CD 00 E0                                 call	sprite_big
 231+ E0FC C9                                       ret
 232+ E0FD
 233+ E0FD              ; "sprite_local_hyper_cursor BC = rowcol"
 234+ E0FD 16 08        sprite_local_hyper_cursor:  ld		d,local_hyper_sprite
 235+ E0FF 1E 07                                    ld		e,local_hyper_pattern
 236+ E101 CD 00 E0                                 call	sprite_big
 237+ E104 C9                                       ret
 238+ E105
 239+ E105              compass_offset              equ 2
 240+ E105              ScannerX                    equ 128
 241+ E105              ScannerY                    equ 171
 242+ E105              SunScanCenterX              equ 92
 243+ E105              SunScanCenterY              equ 171
 244+ E105              PlanetScanCenterX           equ 164
 245+ E105              PlanetScanCenterY           equ 171
 246+ E105
 247+ E105
 248+ E105 3E 20        compass_sun_move:       ld		a,compass_sun
 249+ E107 ED 92 34                             nextreg	SPRITE_PORT_INDEX_REGISTER,a		; set up sprite id
 250+ E10A              ; write out X position bits 1 to 8
 251+ E10A 3E 5A                                ld      a, SunScanCenterX-compass_offset
 252+ E10C 81                                   add     a,c
 253+ E10D ED 92 35                             nextreg	SPRITE_PORT_ATTR0_REGISTER,a		; Set up lower x cc
 254+ E110              ; write out Y position bits 1 to 8
 255+ E110 3E A9                                ld      a, SunScanCenterY-compass_offset
 256+ E112 90                                   sub     b
 257+ E113 ED 92 36                             nextreg	SPRITE_PORT_ATTR1_REGISTER,a		; lower y coord on screen
 258+ E116 C9                                   ret
 259+ E117
 260+ E117 3E 21        compass_station_move:   ld		a,compass_station
 261+ E119 ED 92 34                             nextreg	SPRITE_PORT_INDEX_REGISTER,a		; set up sprite id
 262+ E11C              ; write out X position bits 1 to 8
 263+ E11C 3E A2                                ld      a, PlanetScanCenterX-compass_offset
 264+ E11E 81                                   add     a,c
 265+ E11F ED 92 35                             nextreg	SPRITE_PORT_ATTR0_REGISTER,a		; Set up lower x cc
 266+ E122              ; write out Y position bits 1 to 8
 267+ E122 3E A9                                ld      a, PlanetScanCenterY-compass_offset
 268+ E124 90                                   sub     b
 269+ E125 ED 92 36                             nextreg	SPRITE_PORT_ATTR1_REGISTER,a		; lower y coord on screen
 270+ E128 C9                                   ret
 271+ E129
 272+ E129              ReticuleCentreX         EQU (256/2)+32 -1
 273+ E129              ReticuleCentreY         EQU (192/2)+32 -1
 274+ E129              ReticuleOffset          EQU 8
 275+ E129
 276+ E129              TargetetingCentreX1     EQU ReticuleCentreX -32
 277+ E129              TargetetingCentreX2     EQU ReticuleCentreX +16
 278+ E129              TargetetingCentreY      EQU ReticuleCentreY -7
 279+ E129
 280+ E129 3E 0C        sprite_reticule:        ld      a,reticlule_sprite1                 ; LEFT ARM
 281+ E12B ED 92 34                             nextreg SPRITE_PORT_INDEX_REGISTER,a        ; select left hand side
 282+ E12E 3E 87                                ld      a,ReticuleCentreX -16 - ReticuleOffset
 283+ E130 ED 92 35                             nextreg	SPRITE_PORT_ATTR0_REGISTER,a		; Set up lower x pos as 136 (104 + 32 border)
 284+ E133 3E 7F                                ld		a,ReticuleCentreY
 285+ E135 ED 92 36                             nextreg	SPRITE_PORT_ATTR1_REGISTER,a		; lower y coord on screen
 286+ E138 AF                                   xor     a
 287+ E139 ED 92 37                             nextreg	SPRITE_PORT_ATTR2_REGISTER,a		; attribute 2
 288+ E13C 3E 8B                                ld      a,reticule_pattern_2 | %10000000
 289+ E13E ED 92 38                             nextreg	SPRITE_PORT_ATTR3_REGISTER,a		; visible 5 bytes pattern left reticule
 290+ E141 3E 0D        .rightReticule          ld      a,reticlule_sprite2                 ; RIGHT ARM
 291+ E143 ED 92 34                             nextreg SPRITE_PORT_INDEX_REGISTER,a        ; select left hand side
 292+ E146 3E A7                                ld      a,ReticuleCentreX + ReticuleOffset
 293+ E148 ED 92 35                             nextreg	SPRITE_PORT_ATTR0_REGISTER,a		; Set up lower x pos as 136 (104 + 32 border)
 294+ E14B 3E 7F                                ld		a,ReticuleCentreY
 295+ E14D ED 92 36                             nextreg	SPRITE_PORT_ATTR1_REGISTER,a		; lower y coord on screen
 296+ E150 3E 08                                ld      a,%00001000
 297+ E152 ED 92 37                             nextreg	SPRITE_PORT_ATTR2_REGISTER,a		; attribute 2 including mirroring horizontal
 298+ E155 3E 8B                                ld      a,reticule_pattern_2 | %10000000
 299+ E157 ED 92 38                             nextreg	SPRITE_PORT_ATTR3_REGISTER,a		; visible 5 bytes pattern left reticule
 300+ E15A 3E 0E        .topReticule            ld      a,reticlule_sprite3
 301+ E15C ED 92 34                             nextreg SPRITE_PORT_INDEX_REGISTER,a        ; select left hand side
 302+ E15F 3E 9F                                ld      a,ReticuleCentreX
 303+ E161 ED 92 35                             nextreg	SPRITE_PORT_ATTR0_REGISTER,a		; Set up lower x pos as 136 (104 + 32 border)
 304+ E164 3E 67                                ld		a,ReticuleCentreY-16 - ReticuleOffset
 305+ E166 ED 92 36                             nextreg	SPRITE_PORT_ATTR1_REGISTER,a		; lower y coord on screen
 306+ E169 AF                                   xor     a
 307+ E16A ED 92 37                             nextreg	SPRITE_PORT_ATTR2_REGISTER,a		; attribute 2
 308+ E16D 3E 8A                                ld      a,reticule_pattern_1 | %10000000
 309+ E16F ED 92 38                             nextreg	SPRITE_PORT_ATTR3_REGISTER,a		; visible 5 bytes pattern left reticule
 310+ E172 3E 0F        .bottomReticule         ld      a,reticlule_sprite4
 311+ E174 ED 92 34                             nextreg SPRITE_PORT_INDEX_REGISTER,a        ; select left hand side
 312+ E177 3E 9F                                ld      a,ReticuleCentreX
 313+ E179 ED 92 35                             nextreg	SPRITE_PORT_ATTR0_REGISTER,a		; Set up lower x pos as 136 (104 + 32 border)
 314+ E17C 3E 87                                ld		a,ReticuleCentreY + ReticuleOffset
 315+ E17E ED 92 36                             nextreg	SPRITE_PORT_ATTR1_REGISTER,a		; lower y coord on screen
 316+ E181 3E 04                                ld      a,%00000100
 317+ E183 ED 92 37                             nextreg	SPRITE_PORT_ATTR2_REGISTER,a		; attribute 2 including mirroring vertical
 318+ E186 3E 8A                                ld      a,reticule_pattern_1 | %10000000
 319+ E188 ED 92 38                             nextreg	SPRITE_PORT_ATTR3_REGISTER,a		; visible 5 bytes pattern left reticule
 320+ E18B C9                                   ret
 321+ E18C
 322+ E18C              laserbasex              equ 6
 323+ E18C              laserbasey              equ 14
 324+ E18C
 325+ E18C              ShowSprite              MACRO   spritenbr, patternnbr
 326+ E18C ~                                    ld      a, spritenbr
 327+ E18C ~                                    nextreg SPRITE_PORT_INDEX_REGISTER,a
 328+ E18C ~                                    ld      a,patternnbr | %10000000
 329+ E18C ~                                    nextreg	SPRITE_PORT_ATTR3_REGISTER,a
 330+ E18C                                      ENDM
 331+ E18C
 332+ E18C              LeftLaser:              MACRO   xoffset, yoffset, spriteL, patternL
 333+ E18C ~                                    ld      a, spriteL
 334+ E18C ~                                    nextreg SPRITE_PORT_INDEX_REGISTER,a        ; select left hand side
 335+ E18C ~                                    ld      a,((laserbasex + xoffset) *8) + 32
 336+ E18C ~                                    nextreg	SPRITE_PORT_ATTR0_REGISTER,a		; Set up lower x pos as 136 (104 + 32 border)
 337+ E18C ~                                    ld		a,((laserbasey -yoffset) * 8) + 32 -1
 338+ E18C ~                                    nextreg	SPRITE_PORT_ATTR1_REGISTER,a		; lower y coord on screen
 339+ E18C ~                                    xor     a
 340+ E18C ~                                    nextreg	SPRITE_PORT_ATTR2_REGISTER,a		; attribute 2
 341+ E18C ~                                    ld      a, patternL | %00000000             ; hidden by default
 342+ E18C ~                                    nextreg	SPRITE_PORT_ATTR3_REGISTER,a
 343+ E18C                                      ENDM
 344+ E18C
 345+ E18C              RightLaser:             MACRO   xoffset, yoffset, spriteL, patternL
 346+ E18C ~                                    ld      a, spriteL
 347+ E18C ~                                    nextreg SPRITE_PORT_INDEX_REGISTER,a        ; select left hand side
 348+ E18C ~                                    ld      a,(((30-laserbasex) - xoffset) *8) + 32 -2
 349+ E18C ~                                    nextreg	SPRITE_PORT_ATTR0_REGISTER,a		; Set up lower x pos as 136 (104 + 32 border)
 350+ E18C ~                                    ld		a,((laserbasey -yoffset) * 8) + 32 -1
 351+ E18C ~                                    nextreg	SPRITE_PORT_ATTR1_REGISTER,a		; lower y coord on screen
 352+ E18C ~                                    ld      a,%00001000
 353+ E18C ~                                    nextreg	SPRITE_PORT_ATTR2_REGISTER,a		; attribute 2
 354+ E18C ~                                    ld      a, patternL | %00000000             ; hidden by default
 355+ E18C ~                                    nextreg	SPRITE_PORT_ATTR3_REGISTER,a
 356+ E18C                                      ENDM
 357+ E18C
 358+ E18C
 359+ E18C              show_compass_sun_infront:ShowSprite  compass_sun, compass_sun_infront
 359+ E18C 3E 20       >                        ld      a, compass_sun
 359+ E18E ED 92 34    >                        nextreg SPRITE_PORT_INDEX_REGISTER,a
 359+ E191 3E 91       >                        ld      a,compass_sun_infront | %10000000
 359+ E193 ED 92 38    >                        nextreg	SPRITE_PORT_ATTR3_REGISTER,a
 360+ E196 C9                                    ret
 361+ E197
 362+ E197              show_compass_sun_behind: ShowSprite  compass_sun, compass_sun_behind
 362+ E197 3E 20       >                        ld      a, compass_sun
 362+ E199 ED 92 34    >                        nextreg SPRITE_PORT_INDEX_REGISTER,a
 362+ E19C 3E 92       >                        ld      a,compass_sun_behind | %10000000
 362+ E19E ED 92 38    >                        nextreg	SPRITE_PORT_ATTR3_REGISTER,a
 363+ E1A1 C9                                    ret
 364+ E1A2
 365+ E1A2              show_compass_station_infront: ShowSprite  compass_station, compass_station_infront
 365+ E1A2 3E 21       >                        ld      a, compass_station
 365+ E1A4 ED 92 34    >                        nextreg SPRITE_PORT_INDEX_REGISTER,a
 365+ E1A7 3E 93       >                        ld      a,compass_station_infront | %10000000
 365+ E1A9 ED 92 38    >                        nextreg	SPRITE_PORT_ATTR3_REGISTER,a
 366+ E1AC C9                                    ret
 367+ E1AD
 368+ E1AD              show_compass_station_behind:  ShowSprite  compass_station, compass_station_behind
 368+ E1AD 3E 21       >                        ld      a, compass_station
 368+ E1AF ED 92 34    >                        nextreg SPRITE_PORT_INDEX_REGISTER,a
 368+ E1B2 3E 94       >                        ld      a,compass_station_behind | %10000000
 368+ E1B4 ED 92 38    >                        nextreg	SPRITE_PORT_ATTR3_REGISTER,a
 369+ E1B7 C9                                    ret
 370+ E1B8
 371+ E1B8              sprite_laser:           LeftLaser  0,0,laser_sprite1 ,laser_pattern_1
 371+ E1B8 3E 10       >                        ld      a, laser_sprite1
 371+ E1BA ED 92 34    >                        nextreg SPRITE_PORT_INDEX_REGISTER,a        ; select left hand side
 371+ E1BD 3E 50       >                        ld      a,((laserbasex + 0) *8) + 32
 371+ E1BF ED 92 35    >                        nextreg	SPRITE_PORT_ATTR0_REGISTER,a		; Set up lower x pos as 136 (104 + 32 border)
 371+ E1C2 3E 8F       >                        ld		a,((laserbasey -0) * 8) + 32 -1
 371+ E1C4 ED 92 36    >                        nextreg	SPRITE_PORT_ATTR1_REGISTER,a		; lower y coord on screen
 371+ E1C7 AF          >                        xor     a
 371+ E1C8 ED 92 37    >                        nextreg	SPRITE_PORT_ATTR2_REGISTER,a		; attribute 2
 371+ E1CB 3E 0C       >                        ld      a, laser_pattern_1 | %00000000             ; hidden by default
 371+ E1CD ED 92 38    >                        nextreg	SPRITE_PORT_ATTR3_REGISTER,a
 372+ E1D0                                      LeftLaser  2,0,laser_sprite2 ,laser_pattern_2
 372+ E1D0 3E 11       >                        ld      a, laser_sprite2
 372+ E1D2 ED 92 34    >                        nextreg SPRITE_PORT_INDEX_REGISTER,a        ; select left hand side
 372+ E1D5 3E 60       >                        ld      a,((laserbasex + 2) *8) + 32
 372+ E1D7 ED 92 35    >                        nextreg	SPRITE_PORT_ATTR0_REGISTER,a		; Set up lower x pos as 136 (104 + 32 border)
 372+ E1DA 3E 8F       >                        ld		a,((laserbasey -0) * 8) + 32 -1
 372+ E1DC ED 92 36    >                        nextreg	SPRITE_PORT_ATTR1_REGISTER,a		; lower y coord on screen
 372+ E1DF AF          >                        xor     a
 372+ E1E0 ED 92 37    >                        nextreg	SPRITE_PORT_ATTR2_REGISTER,a		; attribute 2
 372+ E1E3 3E 0D       >                        ld      a, laser_pattern_2 | %00000000             ; hidden by default
 372+ E1E5 ED 92 38    >                        nextreg	SPRITE_PORT_ATTR3_REGISTER,a
 373+ E1E8                                      LeftLaser  4,1,laser_sprite3 ,laser_pattern_3
 373+ E1E8 3E 12       >                        ld      a, laser_sprite3
 373+ E1EA ED 92 34    >                        nextreg SPRITE_PORT_INDEX_REGISTER,a        ; select left hand side
 373+ E1ED 3E 70       >                        ld      a,((laserbasex + 4) *8) + 32
 373+ E1EF ED 92 35    >                        nextreg	SPRITE_PORT_ATTR0_REGISTER,a		; Set up lower x pos as 136 (104 + 32 border)
 373+ E1F2 3E 87       >                        ld		a,((laserbasey -1) * 8) + 32 -1
 373+ E1F4 ED 92 36    >                        nextreg	SPRITE_PORT_ATTR1_REGISTER,a		; lower y coord on screen
 373+ E1F7 AF          >                        xor     a
 373+ E1F8 ED 92 37    >                        nextreg	SPRITE_PORT_ATTR2_REGISTER,a		; attribute 2
 373+ E1FB 3E 0E       >                        ld      a, laser_pattern_3 | %00000000             ; hidden by default
 373+ E1FD ED 92 38    >                        nextreg	SPRITE_PORT_ATTR3_REGISTER,a
 374+ E200                                      LeftLaser  6,1,laser_sprite4 ,laser_pattern_4
 374+ E200 3E 13       >                        ld      a, laser_sprite4
 374+ E202 ED 92 34    >                        nextreg SPRITE_PORT_INDEX_REGISTER,a        ; select left hand side
 374+ E205 3E 80       >                        ld      a,((laserbasex + 6) *8) + 32
 374+ E207 ED 92 35    >                        nextreg	SPRITE_PORT_ATTR0_REGISTER,a		; Set up lower x pos as 136 (104 + 32 border)
 374+ E20A 3E 87       >                        ld		a,((laserbasey -1) * 8) + 32 -1
 374+ E20C ED 92 36    >                        nextreg	SPRITE_PORT_ATTR1_REGISTER,a		; lower y coord on screen
 374+ E20F AF          >                        xor     a
 374+ E210 ED 92 37    >                        nextreg	SPRITE_PORT_ATTR2_REGISTER,a		; attribute 2
 374+ E213 3E 0F       >                        ld      a, laser_pattern_4 | %00000000             ; hidden by default
 374+ E215 ED 92 38    >                        nextreg	SPRITE_PORT_ATTR3_REGISTER,a
 375+ E218                                      LeftLaser  8,2,laser_sprite5 ,laser_pattern_5
 375+ E218 3E 14       >                        ld      a, laser_sprite5
 375+ E21A ED 92 34    >                        nextreg SPRITE_PORT_INDEX_REGISTER,a        ; select left hand side
 375+ E21D 3E 90       >                        ld      a,((laserbasex + 8) *8) + 32
 375+ E21F ED 92 35    >                        nextreg	SPRITE_PORT_ATTR0_REGISTER,a		; Set up lower x pos as 136 (104 + 32 border)
 375+ E222 3E 7F       >                        ld		a,((laserbasey -2) * 8) + 32 -1
 375+ E224 ED 92 36    >                        nextreg	SPRITE_PORT_ATTR1_REGISTER,a		; lower y coord on screen
 375+ E227 AF          >                        xor     a
 375+ E228 ED 92 37    >                        nextreg	SPRITE_PORT_ATTR2_REGISTER,a		; attribute 2
 375+ E22B 3E 10       >                        ld      a, laser_pattern_5 | %00000000             ; hidden by default
 375+ E22D ED 92 38    >                        nextreg	SPRITE_PORT_ATTR3_REGISTER,a
 376+ E230                                      RightLaser 0,0,laser_sprite9 ,laser_pattern_1
 376+ E230 3E 18       >                        ld      a, laser_sprite9
 376+ E232 ED 92 34    >                        nextreg SPRITE_PORT_INDEX_REGISTER,a        ; select left hand side
 376+ E235 3E DE       >                        ld      a,(((30-laserbasex) - 0) *8) + 32 -2
 376+ E237 ED 92 35    >                        nextreg	SPRITE_PORT_ATTR0_REGISTER,a		; Set up lower x pos as 136 (104 + 32 border)
 376+ E23A 3E 8F       >                        ld		a,((laserbasey -0) * 8) + 32 -1
 376+ E23C ED 92 36    >                        nextreg	SPRITE_PORT_ATTR1_REGISTER,a		; lower y coord on screen
 376+ E23F 3E 08       >                        ld      a,%00001000
 376+ E241 ED 92 37    >                        nextreg	SPRITE_PORT_ATTR2_REGISTER,a		; attribute 2
 376+ E244 3E 0C       >                        ld      a, laser_pattern_1 | %00000000             ; hidden by default
 376+ E246 ED 92 38    >                        nextreg	SPRITE_PORT_ATTR3_REGISTER,a
 377+ E249                                      RightLaser 2,0,laser_sprite10,laser_pattern_2
 377+ E249 3E 19       >                        ld      a, laser_sprite10
 377+ E24B ED 92 34    >                        nextreg SPRITE_PORT_INDEX_REGISTER,a        ; select left hand side
 377+ E24E 3E CE       >                        ld      a,(((30-laserbasex) - 2) *8) + 32 -2
 377+ E250 ED 92 35    >                        nextreg	SPRITE_PORT_ATTR0_REGISTER,a		; Set up lower x pos as 136 (104 + 32 border)
 377+ E253 3E 8F       >                        ld		a,((laserbasey -0) * 8) + 32 -1
 377+ E255 ED 92 36    >                        nextreg	SPRITE_PORT_ATTR1_REGISTER,a		; lower y coord on screen
 377+ E258 3E 08       >                        ld      a,%00001000
 377+ E25A ED 92 37    >                        nextreg	SPRITE_PORT_ATTR2_REGISTER,a		; attribute 2
 377+ E25D 3E 0D       >                        ld      a, laser_pattern_2 | %00000000             ; hidden by default
 377+ E25F ED 92 38    >                        nextreg	SPRITE_PORT_ATTR3_REGISTER,a
 378+ E262                                      RightLaser 4,1,laser_sprite11,laser_pattern_3
 378+ E262 3E 1A       >                        ld      a, laser_sprite11
 378+ E264 ED 92 34    >                        nextreg SPRITE_PORT_INDEX_REGISTER,a        ; select left hand side
 378+ E267 3E BE       >                        ld      a,(((30-laserbasex) - 4) *8) + 32 -2
 378+ E269 ED 92 35    >                        nextreg	SPRITE_PORT_ATTR0_REGISTER,a		; Set up lower x pos as 136 (104 + 32 border)
 378+ E26C 3E 87       >                        ld		a,((laserbasey -1) * 8) + 32 -1
 378+ E26E ED 92 36    >                        nextreg	SPRITE_PORT_ATTR1_REGISTER,a		; lower y coord on screen
 378+ E271 3E 08       >                        ld      a,%00001000
 378+ E273 ED 92 37    >                        nextreg	SPRITE_PORT_ATTR2_REGISTER,a		; attribute 2
 378+ E276 3E 0E       >                        ld      a, laser_pattern_3 | %00000000             ; hidden by default
 378+ E278 ED 92 38    >                        nextreg	SPRITE_PORT_ATTR3_REGISTER,a
 379+ E27B                                      RightLaser 6,1,laser_sprite12,laser_pattern_4
 379+ E27B 3E 1B       >                        ld      a, laser_sprite12
 379+ E27D ED 92 34    >                        nextreg SPRITE_PORT_INDEX_REGISTER,a        ; select left hand side
 379+ E280 3E AE       >                        ld      a,(((30-laserbasex) - 6) *8) + 32 -2
 379+ E282 ED 92 35    >                        nextreg	SPRITE_PORT_ATTR0_REGISTER,a		; Set up lower x pos as 136 (104 + 32 border)
 379+ E285 3E 87       >                        ld		a,((laserbasey -1) * 8) + 32 -1
 379+ E287 ED 92 36    >                        nextreg	SPRITE_PORT_ATTR1_REGISTER,a		; lower y coord on screen
 379+ E28A 3E 08       >                        ld      a,%00001000
 379+ E28C ED 92 37    >                        nextreg	SPRITE_PORT_ATTR2_REGISTER,a		; attribute 2
 379+ E28F 3E 0F       >                        ld      a, laser_pattern_4 | %00000000             ; hidden by default
 379+ E291 ED 92 38    >                        nextreg	SPRITE_PORT_ATTR3_REGISTER,a
 380+ E294                                      RightLaser 8,2,laser_sprite13,laser_pattern_5
 380+ E294 3E 1C       >                        ld      a, laser_sprite13
 380+ E296 ED 92 34    >                        nextreg SPRITE_PORT_INDEX_REGISTER,a        ; select left hand side
 380+ E299 3E 9E       >                        ld      a,(((30-laserbasex) - 8) *8) + 32 -2
 380+ E29B ED 92 35    >                        nextreg	SPRITE_PORT_ATTR0_REGISTER,a		; Set up lower x pos as 136 (104 + 32 border)
 380+ E29E 3E 7F       >                        ld		a,((laserbasey -2) * 8) + 32 -1
 380+ E2A0 ED 92 36    >                        nextreg	SPRITE_PORT_ATTR1_REGISTER,a		; lower y coord on screen
 380+ E2A3 3E 08       >                        ld      a,%00001000
 380+ E2A5 ED 92 37    >                        nextreg	SPRITE_PORT_ATTR2_REGISTER,a		; attribute 2
 380+ E2A8 3E 10       >                        ld      a, laser_pattern_5 | %00000000             ; hidden by default
 380+ E2AA ED 92 38    >                        nextreg	SPRITE_PORT_ATTR3_REGISTER,a
 381+ E2AD C9                                   ret
 382+ E2AE                                      ; Need simple show updates just to update the show attribute
 383+ E2AE
 384+ E2AE              sprite_laser_show:      ShowSprite laser_sprite1 ,laser_pattern_1
 384+ E2AE 3E 10       >                        ld      a, laser_sprite1
 384+ E2B0 ED 92 34    >                        nextreg SPRITE_PORT_INDEX_REGISTER,a
 384+ E2B3 3E 8C       >                        ld      a,laser_pattern_1 | %10000000
 384+ E2B5 ED 92 38    >                        nextreg	SPRITE_PORT_ATTR3_REGISTER,a
 385+ E2B8                                      ShowSprite laser_sprite2 ,laser_pattern_2
 385+ E2B8 3E 11       >                        ld      a, laser_sprite2
 385+ E2BA ED 92 34    >                        nextreg SPRITE_PORT_INDEX_REGISTER,a
 385+ E2BD 3E 8D       >                        ld      a,laser_pattern_2 | %10000000
 385+ E2BF ED 92 38    >                        nextreg	SPRITE_PORT_ATTR3_REGISTER,a
 386+ E2C2                                      ShowSprite laser_sprite3 ,laser_pattern_3
 386+ E2C2 3E 12       >                        ld      a, laser_sprite3
 386+ E2C4 ED 92 34    >                        nextreg SPRITE_PORT_INDEX_REGISTER,a
 386+ E2C7 3E 8E       >                        ld      a,laser_pattern_3 | %10000000
 386+ E2C9 ED 92 38    >                        nextreg	SPRITE_PORT_ATTR3_REGISTER,a
 387+ E2CC                                      ShowSprite laser_sprite4 ,laser_pattern_4
 387+ E2CC 3E 13       >                        ld      a, laser_sprite4
 387+ E2CE ED 92 34    >                        nextreg SPRITE_PORT_INDEX_REGISTER,a
 387+ E2D1 3E 8F       >                        ld      a,laser_pattern_4 | %10000000
 387+ E2D3 ED 92 38    >                        nextreg	SPRITE_PORT_ATTR3_REGISTER,a
 388+ E2D6                                      ShowSprite laser_sprite5 ,laser_pattern_5
 388+ E2D6 3E 14       >                        ld      a, laser_sprite5
 388+ E2D8 ED 92 34    >                        nextreg SPRITE_PORT_INDEX_REGISTER,a
 388+ E2DB 3E 90       >                        ld      a,laser_pattern_5 | %10000000
 388+ E2DD ED 92 38    >                        nextreg	SPRITE_PORT_ATTR3_REGISTER,a
 389+ E2E0                                      ShowSprite laser_sprite9 ,laser_pattern_1
 389+ E2E0 3E 18       >                        ld      a, laser_sprite9
 389+ E2E2 ED 92 34    >                        nextreg SPRITE_PORT_INDEX_REGISTER,a
 389+ E2E5 3E 8C       >                        ld      a,laser_pattern_1 | %10000000
 389+ E2E7 ED 92 38    >                        nextreg	SPRITE_PORT_ATTR3_REGISTER,a
 390+ E2EA                                      ShowSprite laser_sprite10,laser_pattern_2
 390+ E2EA 3E 19       >                        ld      a, laser_sprite10
 390+ E2EC ED 92 34    >                        nextreg SPRITE_PORT_INDEX_REGISTER,a
 390+ E2EF 3E 8D       >                        ld      a,laser_pattern_2 | %10000000
 390+ E2F1 ED 92 38    >                        nextreg	SPRITE_PORT_ATTR3_REGISTER,a
 391+ E2F4                                      ShowSprite laser_sprite11,laser_pattern_3
 391+ E2F4 3E 1A       >                        ld      a, laser_sprite11
 391+ E2F6 ED 92 34    >                        nextreg SPRITE_PORT_INDEX_REGISTER,a
 391+ E2F9 3E 8E       >                        ld      a,laser_pattern_3 | %10000000
 391+ E2FB ED 92 38    >                        nextreg	SPRITE_PORT_ATTR3_REGISTER,a
 392+ E2FE                                      ShowSprite laser_sprite12,laser_pattern_4
 392+ E2FE 3E 1B       >                        ld      a, laser_sprite12
 392+ E300 ED 92 34    >                        nextreg SPRITE_PORT_INDEX_REGISTER,a
 392+ E303 3E 8F       >                        ld      a,laser_pattern_4 | %10000000
 392+ E305 ED 92 38    >                        nextreg	SPRITE_PORT_ATTR3_REGISTER,a
 393+ E308                                      ShowSprite laser_sprite13,laser_pattern_5
 393+ E308 3E 1C       >                        ld      a, laser_sprite13
 393+ E30A ED 92 34    >                        nextreg SPRITE_PORT_INDEX_REGISTER,a
 393+ E30D 3E 90       >                        ld      a,laser_pattern_5 | %10000000
 393+ E30F ED 92 38    >                        nextreg	SPRITE_PORT_ATTR3_REGISTER,a
 394+ E312 C9                                   ret
 395+ E313
 396+ E313              sprite_galactic_hide:   HideSprite galactic_cursor_sprite
 396+ E313 ED 91 34 00 >                            nextreg		SPRITE_PORT_INDEX_REGISTER,galactic_cursor_sprite
 396+ E317 ED 91 38 00 >                            nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 397+ E31B                                      HideSprite galactic_cursor_sprite1
 397+ E31B ED 91 34 01 >                            nextreg		SPRITE_PORT_INDEX_REGISTER,galactic_cursor_sprite1
 397+ E31F ED 91 38 00 >                            nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 398+ E323                                      HideSprite galactic_cursor_sprite2
 398+ E323 ED 91 34 03 >                            nextreg		SPRITE_PORT_INDEX_REGISTER,galactic_cursor_sprite2
 398+ E327 ED 91 38 00 >                            nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 399+ E32B C9                                   ret
 400+ E32C
 401+ E32C              sprite_galactic_hyper_hide:
 402+ E32C                                      HideSprite galactic_hyper_sprite
 402+ E32C ED 91 34 04 >                            nextreg		SPRITE_PORT_INDEX_REGISTER,galactic_hyper_sprite
 402+ E330 ED 91 38 00 >                            nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 403+ E334                                       ;nextreg		SPRITE_PORT_INDEX_REGISTER,galactic_hyper_sprite1
 404+ E334              ;                        nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 405+ E334              ;                        nextreg		SPRITE_PORT_INDEX_REGISTER,galactic_hyper_sprite2
 406+ E334              ;                        nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 407+ E334 C9                                   ret
 408+ E335
 409+ E335              sprite_local_hide:      HideSprite local_cursor_sprite
 409+ E335 ED 91 34 05 >                            nextreg		SPRITE_PORT_INDEX_REGISTER,local_cursor_sprite
 409+ E339 ED 91 38 00 >                            nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 410+ E33D                                      HideSprite local_cursor_sprite1
 410+ E33D ED 91 34 06 >                            nextreg		SPRITE_PORT_INDEX_REGISTER,local_cursor_sprite1
 410+ E341 ED 91 38 00 >                            nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 411+ E345                                      HideSprite local_cursor_sprite2
 411+ E345 ED 91 34 07 >                            nextreg		SPRITE_PORT_INDEX_REGISTER,local_cursor_sprite2
 411+ E349 ED 91 38 00 >                            nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 412+ E34D C9                                   ret
 413+ E34E
 414+ E34E              sprite_local_hyper_hide:HideSprite local_hyper_sprite
 414+ E34E ED 91 34 08 >                            nextreg		SPRITE_PORT_INDEX_REGISTER,local_hyper_sprite
 414+ E352 ED 91 38 00 >                            nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 415+ E356                                      HideSprite local_hyper_sprite1
 415+ E356 ED 91 34 09 >                            nextreg		SPRITE_PORT_INDEX_REGISTER,local_hyper_sprite1
 415+ E35A ED 91 38 00 >                            nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 416+ E35E                                      HideSprite local_hyper_sprite2
 416+ E35E ED 91 34 0B >                            nextreg		SPRITE_PORT_INDEX_REGISTER,local_hyper_sprite2
 416+ E362 ED 91 38 00 >                            nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 417+ E366 C9                                   ret
 418+ E367
 419+ E367              sprite_reticule_hide:   HideSprite reticlule_sprite1
 419+ E367 ED 91 34 0C >                            nextreg		SPRITE_PORT_INDEX_REGISTER,reticlule_sprite1
 419+ E36B ED 91 38 00 >                            nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 420+ E36F                                      HideSprite reticlule_sprite2
 420+ E36F ED 91 34 0D >                            nextreg		SPRITE_PORT_INDEX_REGISTER,reticlule_sprite2
 420+ E373 ED 91 38 00 >                            nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 421+ E377                                      HideSprite reticlule_sprite3
 421+ E377 ED 91 34 0E >                            nextreg		SPRITE_PORT_INDEX_REGISTER,reticlule_sprite3
 421+ E37B ED 91 38 00 >                            nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 422+ E37F                                      HideSprite reticlule_sprite4
 422+ E37F ED 91 34 0F >                            nextreg		SPRITE_PORT_INDEX_REGISTER,reticlule_sprite4
 422+ E383 ED 91 38 00 >                            nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 423+ E387 C9                                   ret
 424+ E388
 425+ E388
 426+ E388 3E 22        sprite_targetting:      ld      a,targetting_sprite1                 ; LEFT ARM
 427+ E38A ED 92 34                             nextreg SPRITE_PORT_INDEX_REGISTER,a        ; select left hand side
 428+ E38D 3E 7F                                ld      a,TargetetingCentreX1
 429+ E38F ED 92 35                             nextreg	SPRITE_PORT_ATTR0_REGISTER,a		; Set up lower x pos as 136 (104 + 32 border)
 430+ E392 3E 78                                ld		a,TargetetingCentreY
 431+ E394 ED 92 36                             nextreg	SPRITE_PORT_ATTR1_REGISTER,a		; lower y coord on screen
 432+ E397 AF                                   xor     a
 433+ E398 ED 92 37                             nextreg	SPRITE_PORT_ATTR2_REGISTER,a		; attribute 2
 434+ E39B 3E 97                                ld      a,targetting_pattern | %10000000
 435+ E39D ED 92 38                             nextreg	SPRITE_PORT_ATTR3_REGISTER,a		; visible 5 bytes pattern left reticule
 436+ E3A0 3E 23        .right:                 ld      a,targetting_sprite2                ; RIGHT ARM
 437+ E3A2 ED 92 34                             nextreg SPRITE_PORT_INDEX_REGISTER,a        ; select left hand side
 438+ E3A5 3E AF                                ld      a,TargetetingCentreX2
 439+ E3A7 ED 92 35                             nextreg	SPRITE_PORT_ATTR0_REGISTER,a		; Set up lower x pos as 136 (104 + 32 border)
 440+ E3AA 3E 78                                ld		a,TargetetingCentreY
 441+ E3AC ED 92 36                             nextreg	SPRITE_PORT_ATTR1_REGISTER,a		; lower y coord on screen
 442+ E3AF 3E 08                                ld      a,%00001000
 443+ E3B1 ED 92 37                             nextreg	SPRITE_PORT_ATTR2_REGISTER,a		; attribute 2 including mirroring horizontal
 444+ E3B4 3E 97                                ld      a,targetting_pattern | %10000000
 445+ E3B6 ED 92 38                             nextreg	SPRITE_PORT_ATTR3_REGISTER,a		; visible 5 bytes pattern left reticule
 446+ E3B9 C9                                   ret
 447+ E3BA
 448+ E3BA 3E 22        sprite_lock:            ld      a,targetting_sprite1                 ; LEFT ARM
 449+ E3BC ED 92 34                             nextreg SPRITE_PORT_INDEX_REGISTER,a        ; select left hand side
 450+ E3BF 3E 7F                                ld      a,TargetetingCentreX1
 451+ E3C1 ED 92 35                             nextreg	SPRITE_PORT_ATTR0_REGISTER,a		; Set up lower x pos as 136 (104 + 32 border)
 452+ E3C4 3E 78                                ld		a,TargetetingCentreY
 453+ E3C6 ED 92 36                             nextreg	SPRITE_PORT_ATTR1_REGISTER,a		; lower y coord on screen
 454+ E3C9 AF                                   xor     a
 455+ E3CA ED 92 37                             nextreg	SPRITE_PORT_ATTR2_REGISTER,a		; attribute 2
 456+ E3CD 3E 98                                ld      a,lock_pattern | %10000000
 457+ E3CF ED 92 38                             nextreg	SPRITE_PORT_ATTR3_REGISTER,a		; visible 5 bytes pattern left reticule
 458+ E3D2 3E 23        .right:                 ld      a,targetting_sprite2                 ; RIGHT ARM
 459+ E3D4 ED 92 34                             nextreg SPRITE_PORT_INDEX_REGISTER,a        ; select left hand side
 460+ E3D7 3E AF                                ld      a,TargetetingCentreX2
 461+ E3D9 ED 92 35                             nextreg	SPRITE_PORT_ATTR0_REGISTER,a		; Set up lower x pos as 136 (104 + 32 border)
 462+ E3DC 3E 78                                ld		a,TargetetingCentreY
 463+ E3DE ED 92 36                             nextreg	SPRITE_PORT_ATTR1_REGISTER,a		; lower y coord on screen
 464+ E3E1 3E 08                                ld      a,%00001000
 465+ E3E3 ED 92 37                             nextreg	SPRITE_PORT_ATTR2_REGISTER,a		; attribute 2 including mirroring horizontal
 466+ E3E6 3E 98                                ld      a,lock_pattern | %10000000
 467+ E3E8 ED 92 38                             nextreg	SPRITE_PORT_ATTR3_REGISTER,a		; visible 5 bytes pattern left reticule
 468+ E3EB C9                                   ret
 469+ E3EC
 470+ E3EC              sprite_targetting_hide: HideSprite targetting_sprite1
 470+ E3EC ED 91 34 22 >                            nextreg		SPRITE_PORT_INDEX_REGISTER,targetting_sprite1
 470+ E3F0 ED 91 38 00 >                            nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 471+ E3F4                                      HideSprite targetting_sprite2
 471+ E3F4 ED 91 34 23 >                            nextreg		SPRITE_PORT_INDEX_REGISTER,targetting_sprite2
 471+ E3F8 ED 91 38 00 >                            nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 472+ E3FC C9                                   ret
 473+ E3FD
 474+ E3FD              sprite_targetting_show: ShowSprite targetting_sprite1, targetting_pattern
 474+ E3FD 3E 22       >                        ld      a, targetting_sprite1
 474+ E3FF ED 92 34    >                        nextreg SPRITE_PORT_INDEX_REGISTER,a
 474+ E402 3E 97       >                        ld      a,targetting_pattern | %10000000
 474+ E404 ED 92 38    >                        nextreg	SPRITE_PORT_ATTR3_REGISTER,a
 475+ E407                                      ShowSprite targetting_sprite2, targetting_pattern
 475+ E407 3E 23       >                        ld      a, targetting_sprite2
 475+ E409 ED 92 34    >                        nextreg SPRITE_PORT_INDEX_REGISTER,a
 475+ E40C 3E 97       >                        ld      a,targetting_pattern | %10000000
 475+ E40E ED 92 38    >                        nextreg	SPRITE_PORT_ATTR3_REGISTER,a
 476+ E411 C9                                   ret
 477+ E412
 478+ E412              sprite_laser_hide:      HideSprite laser_sprite1
 478+ E412 ED 91 34 10 >                            nextreg		SPRITE_PORT_INDEX_REGISTER,laser_sprite1
 478+ E416 ED 91 38 00 >                            nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 479+ E41A                                      HideSprite laser_sprite2
 479+ E41A ED 91 34 11 >                            nextreg		SPRITE_PORT_INDEX_REGISTER,laser_sprite2
 479+ E41E ED 91 38 00 >                            nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 480+ E422                                      HideSprite laser_sprite3
 480+ E422 ED 91 34 12 >                            nextreg		SPRITE_PORT_INDEX_REGISTER,laser_sprite3
 480+ E426 ED 91 38 00 >                            nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 481+ E42A                                      HideSprite laser_sprite4
 481+ E42A ED 91 34 13 >                            nextreg		SPRITE_PORT_INDEX_REGISTER,laser_sprite4
 481+ E42E ED 91 38 00 >                            nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 482+ E432                                      HideSprite laser_sprite5
 482+ E432 ED 91 34 14 >                            nextreg		SPRITE_PORT_INDEX_REGISTER,laser_sprite5
 482+ E436 ED 91 38 00 >                            nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 483+ E43A                                      HideSprite laser_sprite6
 483+ E43A ED 91 34 15 >                            nextreg		SPRITE_PORT_INDEX_REGISTER,laser_sprite6
 483+ E43E ED 91 38 00 >                            nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 484+ E442                                      HideSprite laser_sprite7
 484+ E442 ED 91 34 16 >                            nextreg		SPRITE_PORT_INDEX_REGISTER,laser_sprite7
 484+ E446 ED 91 38 00 >                            nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 485+ E44A                                      HideSprite laser_sprite8
 485+ E44A ED 91 34 17 >                            nextreg		SPRITE_PORT_INDEX_REGISTER,laser_sprite8
 485+ E44E ED 91 38 00 >                            nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 486+ E452                                      HideSprite laser_sprite9
 486+ E452 ED 91 34 18 >                            nextreg		SPRITE_PORT_INDEX_REGISTER,laser_sprite9
 486+ E456 ED 91 38 00 >                            nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 487+ E45A                                      HideSprite laser_sprite10
 487+ E45A ED 91 34 19 >                            nextreg		SPRITE_PORT_INDEX_REGISTER,laser_sprite10
 487+ E45E ED 91 38 00 >                            nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 488+ E462                                      HideSprite laser_sprite11
 488+ E462 ED 91 34 1A >                            nextreg		SPRITE_PORT_INDEX_REGISTER,laser_sprite11
 488+ E466 ED 91 38 00 >                            nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 489+ E46A                                      HideSprite laser_sprite12
 489+ E46A ED 91 34 1B >                            nextreg		SPRITE_PORT_INDEX_REGISTER,laser_sprite12
 489+ E46E ED 91 38 00 >                            nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 490+ E472                                      HideSprite laser_sprite13
 490+ E472 ED 91 34 1C >                            nextreg		SPRITE_PORT_INDEX_REGISTER,laser_sprite13
 490+ E476 ED 91 38 00 >                            nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 491+ E47A                                      HideSprite laser_sprite14
 491+ E47A ED 91 34 1D >                            nextreg		SPRITE_PORT_INDEX_REGISTER,laser_sprite14
 491+ E47E ED 91 38 00 >                            nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 492+ E482                                      HideSprite laser_sprite15
 492+ E482 ED 91 34 1E >                            nextreg		SPRITE_PORT_INDEX_REGISTER,laser_sprite15
 492+ E486 ED 91 38 00 >                            nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 493+ E48A                                      HideSprite laser_sprite16
 493+ E48A ED 91 34 1F >                            nextreg		SPRITE_PORT_INDEX_REGISTER,laser_sprite16
 493+ E48E ED 91 38 00 >                            nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 494+ E492 C9                                   ret
 495+ E493
 496+ E493              sprite_compass_hide:    HideSprite compass_sun
 496+ E493 ED 91 34 20 >                            nextreg		SPRITE_PORT_INDEX_REGISTER,compass_sun
 496+ E497 ED 91 38 00 >                            nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 497+ E49B                                      HideSprite compass_station
 497+ E49B ED 91 34 21 >                            nextreg		SPRITE_PORT_INDEX_REGISTER,compass_station
 497+ E49F ED 91 38 00 >                            nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 498+ E4A3 C9                                   ret
 499+ E4A4
 500+ E4A4 CD 13 E3     sprite_cls_cursors:     call	sprite_galactic_hide
 501+ E4A7 CD 2C E3                             call	sprite_galactic_hyper_hide
 502+ E4AA CD 35 E3                             call	sprite_local_hide
 503+ E4AD CD 4E E3                             call	sprite_local_hyper_hide
 504+ E4B0 CD 67 E3                             call    sprite_reticule_hide
 505+ E4B3 CD 12 E4                             call    sprite_laser_hide
 506+ E4B6 CD 93 E4                             call    sprite_compass_hide
 507+ E4B9 CD EC E3                             call    sprite_targetting_hide
 508+ E4BC C9                                   ret
 509+ E4BD
 510+ E4BD CD A4 E4     init_sprites:           call		sprite_cls_cursors
 511+ E4C0 ED 91 15 43                          nextreg 	SPRITE_LAYERS_SYSTEM_REGISTER,%01000011
 512+ E4C4 C9                                   ret
 513+ E4C5
# file closed: ./Layer3Sprites/sprite_routines.asm
 870  E4C5                  INCLUDE "./Layer3Sprites/sprite_load.asm"
# file opened: ./Layer3Sprites/sprite_load.asm
   1+ E4C5 01 3B 30     sprite_load_sprite_data:ld			bc, $303B; SPRITE_SLOT_PORT
   2+ E4C8 AF                                   xor			a
   3+ E4C9 ED 79                                out			(c),a							; Prime slot upload
   4+ E4CB 11 00 1A                             ld			de,26	* 256						; nbr of sprites to upload
   5+ E4CE 21 DC E4                             ld			hl,Sprite1						; sprites are stored contiguous
   6+ E4D1 01 5B 00     SpriteLoadLoop:	        ld			bc, $5b; SPRITE_PATTERN_UPLOAD_PORT
   7+ E4D4 ED 90                                outinb											; do final 256th sprite
   8+ E4D6 1B                                   dec			de
   9+ E4D7 7A                                   ld			a,d
  10+ E4D8 B3                                   or			e
  11+ E4D9 20 F6                                jr			nz,SpriteLoadLoop				; keep on rolling through sprites
  12+ E4DB C9                                   ret
  13+ E4DC
# file closed: ./Layer3Sprites/sprite_load.asm
 871  E4DC                  INCLUDE "./Layer3Sprites/SpriteSheet.asm"
# file opened: ./Layer3Sprites/SpriteSheet.asm
   1+ E4DC              Sprite1:
   2+ E4DC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
   2+ E4E0 E3 E3 E3 E3
   2+ E4E4 E3 E3 E3 E3
   2+ E4E8 E3 E3 E3 E3
   3+ E4EC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
   3+ E4F0 E3 E3 E3 E3
   3+ E4F4 E3 E3 E3 E3
   3+ E4F8 E3 E3 E3 E3
   4+ E4FC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
   4+ E500 E3 E3 E3 E3
   4+ E504 E3 E3 E3 E3
   4+ E508 E3 E3 E3 E3
   5+ E50C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
   5+ E510 E3 E3 E3 E3
   5+ E514 E3 E3 E3 E3
   5+ E518 E3 E3 E3 E3
   6+ E51C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
   6+ E520 E3 E3 E3 E3
   6+ E524 E3 E3 E3 E3
   6+ E528 E3 E3 E3 E3
   7+ E52C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
   7+ E530 E3 E3 E3 E3
   7+ E534 E3 E3 E3 E3
   7+ E538 E3 E3 E3 E3
   8+ E53C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
   8+ E540 E3 E3 E3 E3
   8+ E544 E3 E3 E3 E3
   8+ E548 E3 E3 E3 E3
   9+ E54C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
   9+ E550 E3 E3 E3 E3
   9+ E554 E3 E3 E3 E3
   9+ E558 E3 E3 E3 E3
  10+ E55C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $90;
  10+ E560 E3 E3 E3 E3
  10+ E564 E3 E3 E3 E3
  10+ E568 E3 E3 E3 90
  11+ E56C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $B4;
  11+ E570 E3 E3 E3 E3
  11+ E574 E3 E3 E3 E3
  11+ E578 E3 E3 E3 B4
  12+ E57C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $B4;
  12+ E580 E3 E3 E3 E3
  12+ E584 E3 E3 E3 E3
  12+ E588 E3 E3 E3 B4
  13+ E58C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $D8;
  13+ E590 E3 E3 E3 E3
  13+ E594 E3 E3 E3 E3
  13+ E598 E3 E3 E3 D8
  14+ E59C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $D8;
  14+ E5A0 E3 E3 E3 E3
  14+ E5A4 E3 E3 E3 E3
  14+ E5A8 E3 E3 E3 D8
  15+ E5AC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $FC;
  15+ E5B0 E3 E3 E3 E3
  15+ E5B4 E3 E3 E3 E3
  15+ E5B8 E3 E3 E3 FC
  16+ E5BC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $FC;
  16+ E5C0 E3 E3 E3 E3
  16+ E5C4 E3 E3 E3 E3
  16+ E5C8 E3 E3 E3 FC
  17+ E5CC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $90, $B4, $B4, $D8, $D8, $FC, $FC, $E3;
  17+ E5D0 E3 E3 E3 E3
  17+ E5D4 90 B4 B4 D8
  17+ E5D8 D8 FC FC E3
  18+ E5DC
  19+ E5DC
  20+ E5DC
  21+ E5DC              Sprite2:
  22+ E5DC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  22+ E5E0 E3 E3 E3 E3
  22+ E5E4 E3 E3 E3 E3
  22+ E5E8 E3 E3 E3 E3
  23+ E5EC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  23+ E5F0 E3 E3 E3 E3
  23+ E5F4 E3 E3 E3 E3
  23+ E5F8 E3 E3 E3 E3
  24+ E5FC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  24+ E600 E3 E3 E3 E3
  24+ E604 E3 E3 E3 E3
  24+ E608 E3 E3 E3 E3
  25+ E60C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  25+ E610 E3 E3 E3 E3
  25+ E614 E3 E3 E3 E3
  25+ E618 E3 E3 E3 E3
  26+ E61C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  26+ E620 E3 E3 E3 E3
  26+ E624 E3 E3 E3 E3
  26+ E628 E3 E3 E3 E3
  27+ E62C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  27+ E630 E3 E3 E3 E3
  27+ E634 E3 E3 E3 E3
  27+ E638 E3 E3 E3 E3
  28+ E63C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  28+ E640 E3 E3 E3 E3
  28+ E644 E3 E3 E3 E3
  28+ E648 E3 E3 E3 E3
  29+ E64C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  29+ E650 E3 E3 E3 E3
  29+ E654 E3 E3 E3 E3
  29+ E658 E3 E3 E3 E3
  30+ E65C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  30+ E660 E3 E3 E3 E3
  30+ E664 E3 E3 E3 E3
  30+ E668 E3 E3 E3 E3
  31+ E66C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  31+ E670 E3 E3 E3 E3
  31+ E674 E3 E3 E3 E3
  31+ E678 E3 E3 E3 E3
  32+ E67C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  32+ E680 E3 E3 E3 E3
  32+ E684 E3 E3 E3 E3
  32+ E688 E3 E3 E3 E3
  33+ E68C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  33+ E690 E3 E3 E3 E3
  33+ E694 E3 E3 E3 E3
  33+ E698 E3 E3 E3 E3
  34+ E69C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  34+ E6A0 E3 E3 E3 E3
  34+ E6A4 E3 E3 E3 E3
  34+ E6A8 E3 E3 E3 E3
  35+ E6AC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  35+ E6B0 E3 E3 E3 E3
  35+ E6B4 E3 E3 E3 E3
  35+ E6B8 E3 E3 E3 E3
  36+ E6BC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  36+ E6C0 E3 E3 E3 E3
  36+ E6C4 E3 E3 E3 E3
  36+ E6C8 E3 E3 E3 E3
  37+ E6CC FC FC D8 D8  	db  $FC, $FC, $D8, $D8, $B4, $B4, $90, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  37+ E6D0 B4 B4 90 E3
  37+ E6D4 E3 E3 E3 E3
  37+ E6D8 E3 E3 E3 E3
  38+ E6DC
  39+ E6DC
  40+ E6DC
  41+ E6DC              Sprite3:
  42+ E6DC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $FC;
  42+ E6E0 E3 E3 E3 E3
  42+ E6E4 E3 E3 E3 E3
  42+ E6E8 E3 E3 E3 FC
  43+ E6EC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $FC;
  43+ E6F0 E3 E3 E3 E3
  43+ E6F4 E3 E3 E3 E3
  43+ E6F8 E3 E3 E3 FC
  44+ E6FC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $D8;
  44+ E700 E3 E3 E3 E3
  44+ E704 E3 E3 E3 E3
  44+ E708 E3 E3 E3 D8
  45+ E70C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $D8;
  45+ E710 E3 E3 E3 E3
  45+ E714 E3 E3 E3 E3
  45+ E718 E3 E3 E3 D8
  46+ E71C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $B4;
  46+ E720 E3 E3 E3 E3
  46+ E724 E3 E3 E3 E3
  46+ E728 E3 E3 E3 B4
  47+ E72C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $B4;
  47+ E730 E3 E3 E3 E3
  47+ E734 E3 E3 E3 E3
  47+ E738 E3 E3 E3 B4
  48+ E73C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $90;
  48+ E740 E3 E3 E3 E3
  48+ E744 E3 E3 E3 E3
  48+ E748 E3 E3 E3 90
  49+ E74C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  49+ E750 E3 E3 E3 E3
  49+ E754 E3 E3 E3 E3
  49+ E758 E3 E3 E3 E3
  50+ E75C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  50+ E760 E3 E3 E3 E3
  50+ E764 E3 E3 E3 E3
  50+ E768 E3 E3 E3 E3
  51+ E76C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  51+ E770 E3 E3 E3 E3
  51+ E774 E3 E3 E3 E3
  51+ E778 E3 E3 E3 E3
  52+ E77C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  52+ E780 E3 E3 E3 E3
  52+ E784 E3 E3 E3 E3
  52+ E788 E3 E3 E3 E3
  53+ E78C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  53+ E790 E3 E3 E3 E3
  53+ E794 E3 E3 E3 E3
  53+ E798 E3 E3 E3 E3
  54+ E79C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  54+ E7A0 E3 E3 E3 E3
  54+ E7A4 E3 E3 E3 E3
  54+ E7A8 E3 E3 E3 E3
  55+ E7AC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  55+ E7B0 E3 E3 E3 E3
  55+ E7B4 E3 E3 E3 E3
  55+ E7B8 E3 E3 E3 E3
  56+ E7BC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  56+ E7C0 E3 E3 E3 E3
  56+ E7C4 E3 E3 E3 E3
  56+ E7C8 E3 E3 E3 E3
  57+ E7CC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  57+ E7D0 E3 E3 E3 E3
  57+ E7D4 E3 E3 E3 E3
  57+ E7D8 E3 E3 E3 E3
  58+ E7DC
  59+ E7DC
  60+ E7DC
  61+ E7DC              Sprite4:
  62+ E7DC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $12, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  62+ E7E0 12 E3 E3 E3
  62+ E7E4 E3 E3 E3 E3
  62+ E7E8 E3 E3 E3 E3
  63+ E7EC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $16, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  63+ E7F0 16 E3 E3 E3
  63+ E7F4 E3 E3 E3 E3
  63+ E7F8 E3 E3 E3 E3
  64+ E7FC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $1A, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  64+ E800 1A E3 E3 E3
  64+ E804 E3 E3 E3 E3
  64+ E808 E3 E3 E3 E3
  65+ E80C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $1F, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  65+ E810 1F E3 E3 E3
  65+ E814 E3 E3 E3 E3
  65+ E818 E3 E3 E3 E3
  66+ E81C 12 16 1A 1F  	db  $12, $16, $1A, $1F, $E3, $1F, $1A, $16, $12, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  66+ E820 E3 1F 1A 16
  66+ E824 12 E3 E3 E3
  66+ E828 E3 E3 E3 E3
  67+ E82C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $1F, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  67+ E830 1F E3 E3 E3
  67+ E834 E3 E3 E3 E3
  67+ E838 E3 E3 E3 E3
  68+ E83C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $1A, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  68+ E840 1A E3 E3 E3
  68+ E844 E3 E3 E3 E3
  68+ E848 E3 E3 E3 E3
  69+ E84C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $16, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  69+ E850 16 E3 E3 E3
  69+ E854 E3 E3 E3 E3
  69+ E858 E3 E3 E3 E3
  70+ E85C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $12, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  70+ E860 12 E3 E3 E3
  70+ E864 E3 E3 E3 E3
  70+ E868 E3 E3 E3 E3
  71+ E86C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  71+ E870 E3 E3 E3 E3
  71+ E874 E3 E3 E3 E3
  71+ E878 E3 E3 E3 E3
  72+ E87C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  72+ E880 E3 E3 E3 E3
  72+ E884 E3 E3 E3 E3
  72+ E888 E3 E3 E3 E3
  73+ E88C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  73+ E890 E3 E3 E3 E3
  73+ E894 E3 E3 E3 E3
  73+ E898 E3 E3 E3 E3
  74+ E89C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  74+ E8A0 E3 E3 E3 E3
  74+ E8A4 E3 E3 E3 E3
  74+ E8A8 E3 E3 E3 E3
  75+ E8AC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  75+ E8B0 E3 E3 E3 E3
  75+ E8B4 E3 E3 E3 E3
  75+ E8B8 E3 E3 E3 E3
  76+ E8BC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  76+ E8C0 E3 E3 E3 E3
  76+ E8C4 E3 E3 E3 E3
  76+ E8C8 E3 E3 E3 E3
  77+ E8CC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  77+ E8D0 E3 E3 E3 E3
  77+ E8D4 E3 E3 E3 E3
  77+ E8D8 E3 E3 E3 E3
  78+ E8DC
  79+ E8DC
  80+ E8DC
  81+ E8DC              Sprite5:
  82+ E8DC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  82+ E8E0 E3 E3 E3 E3
  82+ E8E4 E3 E3 E3 E3
  82+ E8E8 E3 E3 E3 E3
  83+ E8EC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $09;
  83+ E8F0 E3 E3 E3 E3
  83+ E8F4 E3 E3 E3 E3
  83+ E8F8 E3 E3 E3 09
  84+ E8FC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $09;
  84+ E900 E3 E3 E3 E3
  84+ E904 E3 E3 E3 E3
  84+ E908 E3 E3 E3 09
  85+ E90C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $2C;
  85+ E910 E3 E3 E3 E3
  85+ E914 E3 E3 E3 E3
  85+ E918 E3 E3 E3 2C
  86+ E91C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $2C;
  86+ E920 E3 E3 E3 E3
  86+ E924 E3 E3 E3 E3
  86+ E928 E3 E3 E3 2C
  87+ E92C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $50;
  87+ E930 E3 E3 E3 E3
  87+ E934 E3 E3 E3 E3
  87+ E938 E3 E3 E3 50
  88+ E93C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $50;
  88+ E940 E3 E3 E3 E3
  88+ E944 E3 E3 E3 E3
  88+ E948 E3 E3 E3 50
  89+ E94C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $50;
  89+ E950 E3 E3 E3 E3
  89+ E954 E3 E3 E3 E3
  89+ E958 E3 E3 E3 50
  90+ E95C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $15;
  90+ E960 E3 E3 E3 E3
  90+ E964 E3 E3 E3 E3
  90+ E968 E3 E3 E3 15
  91+ E96C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $15;
  91+ E970 E3 E3 E3 E3
  91+ E974 E3 E3 E3 E3
  91+ E978 E3 E3 E3 15
  92+ E97C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $15;
  92+ E980 E3 E3 E3 E3
  92+ E984 E3 E3 E3 E3
  92+ E988 E3 E3 E3 15
  93+ E98C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $7C;
  93+ E990 E3 E3 E3 E3
  93+ E994 E3 E3 E3 E3
  93+ E998 E3 E3 E3 7C
  94+ E99C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $7C;
  94+ E9A0 E3 E3 E3 E3
  94+ E9A4 E3 E3 E3 E3
  94+ E9A8 E3 E3 E3 7C
  95+ E9AC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $7C;
  95+ E9B0 E3 E3 E3 E3
  95+ E9B4 E3 E3 E3 E3
  95+ E9B8 E3 E3 E3 7C
  96+ E9BC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $7C;
  96+ E9C0 E3 E3 E3 E3
  96+ E9C4 E3 E3 E3 E3
  96+ E9C8 E3 E3 E3 7C
  97+ E9CC E3 09 09 2C  	db  $E3, $09, $09, $2C, $2C, $50, $50, $50, $15, $15, $15, $7C, $7C, $7C, $7C, $E3;
  97+ E9D0 2C 50 50 50
  97+ E9D4 15 15 15 7C
  97+ E9D8 7C 7C 7C E3
  98+ E9DC
  99+ E9DC
 100+ E9DC
 101+ E9DC              Sprite6:
 102+ E9DC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 102+ E9E0 E3 E3 E3 E3
 102+ E9E4 E3 E3 E3 E3
 102+ E9E8 E3 E3 E3 E3
 103+ E9EC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 103+ E9F0 E3 E3 E3 E3
 103+ E9F4 E3 E3 E3 E3
 103+ E9F8 E3 E3 E3 E3
 104+ E9FC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 104+ EA00 E3 E3 E3 E3
 104+ EA04 E3 E3 E3 E3
 104+ EA08 E3 E3 E3 E3
 105+ EA0C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 105+ EA10 E3 E3 E3 E3
 105+ EA14 E3 E3 E3 E3
 105+ EA18 E3 E3 E3 E3
 106+ EA1C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 106+ EA20 E3 E3 E3 E3
 106+ EA24 E3 E3 E3 E3
 106+ EA28 E3 E3 E3 E3
 107+ EA2C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 107+ EA30 E3 E3 E3 E3
 107+ EA34 E3 E3 E3 E3
 107+ EA38 E3 E3 E3 E3
 108+ EA3C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 108+ EA40 E3 E3 E3 E3
 108+ EA44 E3 E3 E3 E3
 108+ EA48 E3 E3 E3 E3
 109+ EA4C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 109+ EA50 E3 E3 E3 E3
 109+ EA54 E3 E3 E3 E3
 109+ EA58 E3 E3 E3 E3
 110+ EA5C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 110+ EA60 E3 E3 E3 E3
 110+ EA64 E3 E3 E3 E3
 110+ EA68 E3 E3 E3 E3
 111+ EA6C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 111+ EA70 E3 E3 E3 E3
 111+ EA74 E3 E3 E3 E3
 111+ EA78 E3 E3 E3 E3
 112+ EA7C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 112+ EA80 E3 E3 E3 E3
 112+ EA84 E3 E3 E3 E3
 112+ EA88 E3 E3 E3 E3
 113+ EA8C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 113+ EA90 E3 E3 E3 E3
 113+ EA94 E3 E3 E3 E3
 113+ EA98 E3 E3 E3 E3
 114+ EA9C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 114+ EAA0 E3 E3 E3 E3
 114+ EAA4 E3 E3 E3 E3
 114+ EAA8 E3 E3 E3 E3
 115+ EAAC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 115+ EAB0 E3 E3 E3 E3
 115+ EAB4 E3 E3 E3 E3
 115+ EAB8 E3 E3 E3 E3
 116+ EABC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 116+ EAC0 E3 E3 E3 E3
 116+ EAC4 E3 E3 E3 E3
 116+ EAC8 E3 E3 E3 E3
 117+ EACC 7C 7C 7C 7C  	db  $7C, $7C, $7C, $7C, $15, $15, $15, $50, $50, $50, $2C, $2C, $09, $09, $E3, $E3;
 117+ EAD0 15 15 15 50
 117+ EAD4 50 50 2C 2C
 117+ EAD8 09 09 E3 E3
 118+ EADC
 119+ EADC
 120+ EADC
 121+ EADC              Sprite7:
 122+ EADC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $7C;
 122+ EAE0 E3 E3 E3 E3
 122+ EAE4 E3 E3 E3 E3
 122+ EAE8 E3 E3 E3 7C
 123+ EAEC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $7C;
 123+ EAF0 E3 E3 E3 E3
 123+ EAF4 E3 E3 E3 E3
 123+ EAF8 E3 E3 E3 7C
 124+ EAFC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $7C;
 124+ EB00 E3 E3 E3 E3
 124+ EB04 E3 E3 E3 E3
 124+ EB08 E3 E3 E3 7C
 125+ EB0C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $7C;
 125+ EB10 E3 E3 E3 E3
 125+ EB14 E3 E3 E3 E3
 125+ EB18 E3 E3 E3 7C
 126+ EB1C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $15;
 126+ EB20 E3 E3 E3 E3
 126+ EB24 E3 E3 E3 E3
 126+ EB28 E3 E3 E3 15
 127+ EB2C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $15;
 127+ EB30 E3 E3 E3 E3
 127+ EB34 E3 E3 E3 E3
 127+ EB38 E3 E3 E3 15
 128+ EB3C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $15;
 128+ EB40 E3 E3 E3 E3
 128+ EB44 E3 E3 E3 E3
 128+ EB48 E3 E3 E3 15
 129+ EB4C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $50;
 129+ EB50 E3 E3 E3 E3
 129+ EB54 E3 E3 E3 E3
 129+ EB58 E3 E3 E3 50
 130+ EB5C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $50;
 130+ EB60 E3 E3 E3 E3
 130+ EB64 E3 E3 E3 E3
 130+ EB68 E3 E3 E3 50
 131+ EB6C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $50;
 131+ EB70 E3 E3 E3 E3
 131+ EB74 E3 E3 E3 E3
 131+ EB78 E3 E3 E3 50
 132+ EB7C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $2C;
 132+ EB80 E3 E3 E3 E3
 132+ EB84 E3 E3 E3 E3
 132+ EB88 E3 E3 E3 2C
 133+ EB8C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $2C;
 133+ EB90 E3 E3 E3 E3
 133+ EB94 E3 E3 E3 E3
 133+ EB98 E3 E3 E3 2C
 134+ EB9C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $09;
 134+ EBA0 E3 E3 E3 E3
 134+ EBA4 E3 E3 E3 E3
 134+ EBA8 E3 E3 E3 09
 135+ EBAC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $09;
 135+ EBB0 E3 E3 E3 E3
 135+ EBB4 E3 E3 E3 E3
 135+ EBB8 E3 E3 E3 09
 136+ EBBC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 136+ EBC0 E3 E3 E3 E3
 136+ EBC4 E3 E3 E3 E3
 136+ EBC8 E3 E3 E3 E3
 137+ EBCC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 137+ EBD0 E3 E3 E3 E3
 137+ EBD4 E3 E3 E3 E3
 137+ EBD8 E3 E3 E3 E3
 138+ EBDC
 139+ EBDC
 140+ EBDC
 141+ EBDC              Sprite8:
 142+ EBDC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 142+ EBE0 E3 E3 E3 E3
 142+ EBE4 E3 E3 E3 E3
 142+ EBE8 E3 E3 E3 E3
 143+ EBEC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $44;
 143+ EBF0 E3 E3 E3 E3
 143+ EBF4 E3 E3 E3 E3
 143+ EBF8 E3 E3 E3 44
 144+ EBFC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $64;
 144+ EC00 E3 E3 E3 E3
 144+ EC04 E3 E3 E3 E3
 144+ EC08 E3 E3 E3 64
 145+ EC0C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $64;
 145+ EC10 E3 E3 E3 E3
 145+ EC14 E3 E3 E3 E3
 145+ EC18 E3 E3 E3 64
 146+ EC1C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $64;
 146+ EC20 E3 E3 E3 E3
 146+ EC24 E3 E3 E3 E3
 146+ EC28 E3 E3 E3 64
 147+ EC2C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $A8;
 147+ EC30 E3 E3 E3 E3
 147+ EC34 E3 E3 E3 E3
 147+ EC38 E3 E3 E3 A8
 148+ EC3C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $A8;
 148+ EC40 E3 E3 E3 E3
 148+ EC44 E3 E3 E3 E3
 148+ EC48 E3 E3 E3 A8
 149+ EC4C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $A8;
 149+ EC50 E3 E3 E3 E3
 149+ EC54 E3 E3 E3 E3
 149+ EC58 E3 E3 E3 A8
 150+ EC5C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $CC;
 150+ EC60 E3 E3 E3 E3
 150+ EC64 E3 E3 E3 E3
 150+ EC68 E3 E3 E3 CC
 151+ EC6C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $CC;
 151+ EC70 E3 E3 E3 E3
 151+ EC74 E3 E3 E3 E3
 151+ EC78 E3 E3 E3 CC
 152+ EC7C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $CC;
 152+ EC80 E3 E3 E3 E3
 152+ EC84 E3 E3 E3 E3
 152+ EC88 E3 E3 E3 CC
 153+ EC8C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $EC;
 153+ EC90 E3 E3 E3 E3
 153+ EC94 E3 E3 E3 E3
 153+ EC98 E3 E3 E3 EC
 154+ EC9C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $EC;
 154+ ECA0 E3 E3 E3 E3
 154+ ECA4 E3 E3 E3 E3
 154+ ECA8 E3 E3 E3 EC
 155+ ECAC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $EC;
 155+ ECB0 E3 E3 E3 E3
 155+ ECB4 E3 E3 E3 E3
 155+ ECB8 E3 E3 E3 EC
 156+ ECBC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $EC;
 156+ ECC0 E3 E3 E3 E3
 156+ ECC4 E3 E3 E3 E3
 156+ ECC8 E3 E3 E3 EC
 157+ ECCC E3 44 64 64  	db  $E3, $44, $64, $64, $64, $A8, $A8, $A8, $CC, $CC, $CC, $EC, $EC, $EC, $EC, $E3;
 157+ ECD0 64 A8 A8 A8
 157+ ECD4 CC CC CC EC
 157+ ECD8 EC EC EC E3
 158+ ECDC
 159+ ECDC
 160+ ECDC
 161+ ECDC              Sprite9:
 162+ ECDC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 162+ ECE0 E3 E3 E3 E3
 162+ ECE4 E3 E3 E3 E3
 162+ ECE8 E3 E3 E3 E3
 163+ ECEC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 163+ ECF0 E3 E3 E3 E3
 163+ ECF4 E3 E3 E3 E3
 163+ ECF8 E3 E3 E3 E3
 164+ ECFC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 164+ ED00 E3 E3 E3 E3
 164+ ED04 E3 E3 E3 E3
 164+ ED08 E3 E3 E3 E3
 165+ ED0C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 165+ ED10 E3 E3 E3 E3
 165+ ED14 E3 E3 E3 E3
 165+ ED18 E3 E3 E3 E3
 166+ ED1C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 166+ ED20 E3 E3 E3 E3
 166+ ED24 E3 E3 E3 E3
 166+ ED28 E3 E3 E3 E3
 167+ ED2C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 167+ ED30 E3 E3 E3 E3
 167+ ED34 E3 E3 E3 E3
 167+ ED38 E3 E3 E3 E3
 168+ ED3C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 168+ ED40 E3 E3 E3 E3
 168+ ED44 E3 E3 E3 E3
 168+ ED48 E3 E3 E3 E3
 169+ ED4C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 169+ ED50 E3 E3 E3 E3
 169+ ED54 E3 E3 E3 E3
 169+ ED58 E3 E3 E3 E3
 170+ ED5C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 170+ ED60 E3 E3 E3 E3
 170+ ED64 E3 E3 E3 E3
 170+ ED68 E3 E3 E3 E3
 171+ ED6C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 171+ ED70 E3 E3 E3 E3
 171+ ED74 E3 E3 E3 E3
 171+ ED78 E3 E3 E3 E3
 172+ ED7C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 172+ ED80 E3 E3 E3 E3
 172+ ED84 E3 E3 E3 E3
 172+ ED88 E3 E3 E3 E3
 173+ ED8C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 173+ ED90 E3 E3 E3 E3
 173+ ED94 E3 E3 E3 E3
 173+ ED98 E3 E3 E3 E3
 174+ ED9C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 174+ EDA0 E3 E3 E3 E3
 174+ EDA4 E3 E3 E3 E3
 174+ EDA8 E3 E3 E3 E3
 175+ EDAC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 175+ EDB0 E3 E3 E3 E3
 175+ EDB4 E3 E3 E3 E3
 175+ EDB8 E3 E3 E3 E3
 176+ EDBC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 176+ EDC0 E3 E3 E3 E3
 176+ EDC4 E3 E3 E3 E3
 176+ EDC8 E3 E3 E3 E3
 177+ EDCC EC EC EC EC  	db  $EC, $EC, $EC, $EC, $CC, $CC, $CC, $A8, $A8, $A8, $64, $64, $64, $44, $E3, $E3;
 177+ EDD0 CC CC CC A8
 177+ EDD4 A8 A8 64 64
 177+ EDD8 64 44 E3 E3
 178+ EDDC
 179+ EDDC
 180+ EDDC
 181+ EDDC              Sprite10:
 182+ EDDC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $EC;
 182+ EDE0 E3 E3 E3 E3
 182+ EDE4 E3 E3 E3 E3
 182+ EDE8 E3 E3 E3 EC
 183+ EDEC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $EC;
 183+ EDF0 E3 E3 E3 E3
 183+ EDF4 E3 E3 E3 E3
 183+ EDF8 E3 E3 E3 EC
 184+ EDFC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $EC;
 184+ EE00 E3 E3 E3 E3
 184+ EE04 E3 E3 E3 E3
 184+ EE08 E3 E3 E3 EC
 185+ EE0C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $EC;
 185+ EE10 E3 E3 E3 E3
 185+ EE14 E3 E3 E3 E3
 185+ EE18 E3 E3 E3 EC
 186+ EE1C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $CC;
 186+ EE20 E3 E3 E3 E3
 186+ EE24 E3 E3 E3 E3
 186+ EE28 E3 E3 E3 CC
 187+ EE2C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $CC;
 187+ EE30 E3 E3 E3 E3
 187+ EE34 E3 E3 E3 E3
 187+ EE38 E3 E3 E3 CC
 188+ EE3C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $CC;
 188+ EE40 E3 E3 E3 E3
 188+ EE44 E3 E3 E3 E3
 188+ EE48 E3 E3 E3 CC
 189+ EE4C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $A8;
 189+ EE50 E3 E3 E3 E3
 189+ EE54 E3 E3 E3 E3
 189+ EE58 E3 E3 E3 A8
 190+ EE5C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $A8;
 190+ EE60 E3 E3 E3 E3
 190+ EE64 E3 E3 E3 E3
 190+ EE68 E3 E3 E3 A8
 191+ EE6C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $A8;
 191+ EE70 E3 E3 E3 E3
 191+ EE74 E3 E3 E3 E3
 191+ EE78 E3 E3 E3 A8
 192+ EE7C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $64;
 192+ EE80 E3 E3 E3 E3
 192+ EE84 E3 E3 E3 E3
 192+ EE88 E3 E3 E3 64
 193+ EE8C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $64;
 193+ EE90 E3 E3 E3 E3
 193+ EE94 E3 E3 E3 E3
 193+ EE98 E3 E3 E3 64
 194+ EE9C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $64;
 194+ EEA0 E3 E3 E3 E3
 194+ EEA4 E3 E3 E3 E3
 194+ EEA8 E3 E3 E3 64
 195+ EEAC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $44;
 195+ EEB0 E3 E3 E3 E3
 195+ EEB4 E3 E3 E3 E3
 195+ EEB8 E3 E3 E3 44
 196+ EEBC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 196+ EEC0 E3 E3 E3 E3
 196+ EEC4 E3 E3 E3 E3
 196+ EEC8 E3 E3 E3 E3
 197+ EECC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 197+ EED0 E3 E3 E3 E3
 197+ EED4 E3 E3 E3 E3
 197+ EED8 E3 E3 E3 E3
 198+ EEDC
 199+ EEDC
 200+ EEDC
 201+ EEDC              Sprite11:
 202+ EEDC 92 E3 E3 E3  	db  $92, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 202+ EEE0 E3 E3 E3 E3
 202+ EEE4 E3 E3 E3 E3
 202+ EEE8 E3 E3 E3 E3
 203+ EEEC 92 E3 E3 E3  	db  $92, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 203+ EEF0 E3 E3 E3 E3
 203+ EEF4 E3 E3 E3 E3
 203+ EEF8 E3 E3 E3 E3
 204+ EEFC FF E3 E3 E3  	db  $FF, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 204+ EF00 E3 E3 E3 E3
 204+ EF04 E3 E3 E3 E3
 204+ EF08 E3 E3 E3 E3
 205+ EF0C FF E3 E3 E3  	db  $FF, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 205+ EF10 E3 E3 E3 E3
 205+ EF14 E3 E3 E3 E3
 205+ EF18 E3 E3 E3 E3
 206+ EF1C FF E3 E3 E3  	db  $FF, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 206+ EF20 E3 E3 E3 E3
 206+ EF24 E3 E3 E3 E3
 206+ EF28 E3 E3 E3 E3
 207+ EF2C FF E3 E3 E3  	db  $FF, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 207+ EF30 E3 E3 E3 E3
 207+ EF34 E3 E3 E3 E3
 207+ EF38 E3 E3 E3 E3
 208+ EF3C FF E3 E3 E3  	db  $FF, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 208+ EF40 E3 E3 E3 E3
 208+ EF44 E3 E3 E3 E3
 208+ EF48 E3 E3 E3 E3
 209+ EF4C FF E3 E3 E3  	db  $FF, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 209+ EF50 E3 E3 E3 E3
 209+ EF54 E3 E3 E3 E3
 209+ EF58 E3 E3 E3 E3
 210+ EF5C FF E3 E3 E3  	db  $FF, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 210+ EF60 E3 E3 E3 E3
 210+ EF64 E3 E3 E3 E3
 210+ EF68 E3 E3 E3 E3
 211+ EF6C FF E3 E3 E3  	db  $FF, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 211+ EF70 E3 E3 E3 E3
 211+ EF74 E3 E3 E3 E3
 211+ EF78 E3 E3 E3 E3
 212+ EF7C FF E3 E3 E3  	db  $FF, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 212+ EF80 E3 E3 E3 E3
 212+ EF84 E3 E3 E3 E3
 212+ EF88 E3 E3 E3 E3
 213+ EF8C FF E3 E3 E3  	db  $FF, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 213+ EF90 E3 E3 E3 E3
 213+ EF94 E3 E3 E3 E3
 213+ EF98 E3 E3 E3 E3
 214+ EF9C FF E3 E3 E3  	db  $FF, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 214+ EFA0 E3 E3 E3 E3
 214+ EFA4 E3 E3 E3 E3
 214+ EFA8 E3 E3 E3 E3
 215+ EFAC FF E3 E3 E3  	db  $FF, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 215+ EFB0 E3 E3 E3 E3
 215+ EFB4 E3 E3 E3 E3
 215+ EFB8 E3 E3 E3 E3
 216+ EFBC FF E3 E3 E3  	db  $FF, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 216+ EFC0 E3 E3 E3 E3
 216+ EFC4 E3 E3 E3 E3
 216+ EFC8 E3 E3 E3 E3
 217+ EFCC FF E3 E3 E3  	db  $FF, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 217+ EFD0 E3 E3 E3 E3
 217+ EFD4 E3 E3 E3 E3
 217+ EFD8 E3 E3 E3 E3
 218+ EFDC
 219+ EFDC
 220+ EFDC
 221+ EFDC              Sprite12:
 222+ EFDC 92 92 FF FF  	db  $92, $92, $FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF;
 222+ EFE0 FF FF FF FF
 222+ EFE4 FF FF FF FF
 222+ EFE8 FF FF FF FF
 223+ EFEC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 223+ EFF0 E3 E3 E3 E3
 223+ EFF4 E3 E3 E3 E3
 223+ EFF8 E3 E3 E3 E3
 224+ EFFC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 224+ F000 E3 E3 E3 E3
 224+ F004 E3 E3 E3 E3
 224+ F008 E3 E3 E3 E3
 225+ F00C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 225+ F010 E3 E3 E3 E3
 225+ F014 E3 E3 E3 E3
 225+ F018 E3 E3 E3 E3
 226+ F01C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 226+ F020 E3 E3 E3 E3
 226+ F024 E3 E3 E3 E3
 226+ F028 E3 E3 E3 E3
 227+ F02C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 227+ F030 E3 E3 E3 E3
 227+ F034 E3 E3 E3 E3
 227+ F038 E3 E3 E3 E3
 228+ F03C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 228+ F040 E3 E3 E3 E3
 228+ F044 E3 E3 E3 E3
 228+ F048 E3 E3 E3 E3
 229+ F04C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 229+ F050 E3 E3 E3 E3
 229+ F054 E3 E3 E3 E3
 229+ F058 E3 E3 E3 E3
 230+ F05C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 230+ F060 E3 E3 E3 E3
 230+ F064 E3 E3 E3 E3
 230+ F068 E3 E3 E3 E3
 231+ F06C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 231+ F070 E3 E3 E3 E3
 231+ F074 E3 E3 E3 E3
 231+ F078 E3 E3 E3 E3
 232+ F07C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 232+ F080 E3 E3 E3 E3
 232+ F084 E3 E3 E3 E3
 232+ F088 E3 E3 E3 E3
 233+ F08C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 233+ F090 E3 E3 E3 E3
 233+ F094 E3 E3 E3 E3
 233+ F098 E3 E3 E3 E3
 234+ F09C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 234+ F0A0 E3 E3 E3 E3
 234+ F0A4 E3 E3 E3 E3
 234+ F0A8 E3 E3 E3 E3
 235+ F0AC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 235+ F0B0 E3 E3 E3 E3
 235+ F0B4 E3 E3 E3 E3
 235+ F0B8 E3 E3 E3 E3
 236+ F0BC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 236+ F0C0 E3 E3 E3 E3
 236+ F0C4 E3 E3 E3 E3
 236+ F0C8 E3 E3 E3 E3
 237+ F0CC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 237+ F0D0 E3 E3 E3 E3
 237+ F0D4 E3 E3 E3 E3
 237+ F0D8 E3 E3 E3 E3
 238+ F0DC
 239+ F0DC
 240+ F0DC
 241+ F0DC              Sprite13:
 242+ F0DC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 242+ F0E0 E3 E3 E3 E3
 242+ F0E4 E3 E3 E3 E3
 242+ F0E8 E3 E3 E3 E3
 243+ F0EC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 243+ F0F0 E3 E3 E3 E3
 243+ F0F4 E3 E3 E3 E3
 243+ F0F8 E3 E3 E3 E3
 244+ F0FC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 244+ F100 E3 E3 E3 E3
 244+ F104 E3 E3 E3 E3
 244+ F108 E3 E3 E3 E3
 245+ F10C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 245+ F110 E3 E3 E3 E3
 245+ F114 E3 E3 E3 E3
 245+ F118 E3 E3 E3 E3
 246+ F11C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 246+ F120 E3 E3 E3 E3
 246+ F124 E3 E3 E3 E3
 246+ F128 E3 E3 E3 E3
 247+ F12C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 247+ F130 E3 E3 E3 E3
 247+ F134 E3 E3 E3 E3
 247+ F138 E3 E3 E3 E3
 248+ F13C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 248+ F140 E3 E3 E3 E3
 248+ F144 E3 E3 E3 E3
 248+ F148 E3 E3 E3 E3
 249+ F14C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 249+ F150 E3 E3 E3 E3
 249+ F154 E3 E3 E3 E3
 249+ F158 E3 E3 E3 E3
 250+ F15C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 250+ F160 E3 E3 E3 E3
 250+ F164 E3 E3 E3 E3
 250+ F168 E3 E3 E3 E3
 251+ F16C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 251+ F170 E3 E3 E3 E3
 251+ F174 E3 E3 E3 E3
 251+ F178 E3 E3 E3 E3
 252+ F17C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 252+ F180 E3 E3 E3 E3
 252+ F184 E3 E3 E3 E3
 252+ F188 E3 E3 E3 E3
 253+ F18C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $18, $18;
 253+ F190 E3 E3 E3 E3
 253+ F194 E3 E3 E3 E3
 253+ F198 E3 E3 18 18
 254+ F19C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $18, $18, $1C, $1C, $1C;
 254+ F1A0 E3 E3 E3 E3
 254+ F1A4 E3 E3 E3 18
 254+ F1A8 18 1C 1C 1C
 255+ F1AC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $18, $18, $18, $1C, $1C, $1C, $1C, $1C;
 255+ F1B0 E3 E3 E3 E3
 255+ F1B4 18 18 18 1C
 255+ F1B8 1C 1C 1C 1C
 256+ F1BC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $18, $18, $18, $18, $18, $1C, $1C, $1C, $1C, $1C, $1C, $1C;
 256+ F1C0 18 18 18 18
 256+ F1C4 18 1C 1C 1C
 256+ F1C8 1C 1C 1C 1C
 257+ F1CC E3 E3 18 18  	db  $E3, $E3, $18, $18, $1C, $1C, $1C, $1C, $1C, $1C, $1C, $1C, $1C, $1C, $1C, $1C;
 257+ F1D0 1C 1C 1C 1C
 257+ F1D4 1C 1C 1C 1C
 257+ F1D8 1C 1C 1C 1C
 258+ F1DC
 259+ F1DC
 260+ F1DC
 261+ F1DC              Sprite14:
 262+ F1DC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 262+ F1E0 E3 E3 E3 E3
 262+ F1E4 E3 E3 E3 E3
 262+ F1E8 E3 E3 E3 E3
 263+ F1EC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 263+ F1F0 E3 E3 E3 E3
 263+ F1F4 E3 E3 E3 E3
 263+ F1F8 E3 E3 E3 E3
 264+ F1FC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 264+ F200 E3 E3 E3 E3
 264+ F204 E3 E3 E3 E3
 264+ F208 E3 E3 E3 E3
 265+ F20C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 265+ F210 E3 E3 E3 E3
 265+ F214 E3 E3 E3 E3
 265+ F218 E3 E3 E3 E3
 266+ F21C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 266+ F220 E3 E3 E3 E3
 266+ F224 E3 E3 E3 E3
 266+ F228 E3 E3 E3 E3
 267+ F22C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $18, $18;
 267+ F230 E3 E3 E3 E3
 267+ F234 E3 E3 E3 E3
 267+ F238 E3 E3 18 18
 268+ F23C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $18, $18, $18, $1C, $1C;
 268+ F240 E3 E3 E3 E3
 268+ F244 E3 E3 E3 18
 268+ F248 18 18 1C 1C
 269+ F24C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $18, $18, $1C, $1C, $1C, $1C, $1C;
 269+ F250 E3 E3 E3 E3
 269+ F254 E3 18 18 1C
 269+ F258 1C 1C 1C 1C
 270+ F25C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $18, $18, $1C, $1C, $1C, $1C, $1C, $1C, $18;
 270+ F260 E3 E3 E3 18
 270+ F264 18 1C 1C 1C
 270+ F268 1C 1C 1C 18
 271+ F26C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $18, $18, $18, $1C, $1C, $1C, $1C, $1C, $18, $18, $18, $E3;
 271+ F270 18 18 18 1C
 271+ F274 1C 1C 1C 1C
 271+ F278 18 18 18 E3
 272+ F27C E3 18 18 18  	db  $E3, $18, $18, $18, $1C, $1C, $1C, $1C, $1C, $1C, $18, $18, $E3, $E3, $E3, $E3;
 272+ F280 1C 1C 1C 1C
 272+ F284 1C 1C 18 18
 272+ F288 E3 E3 E3 E3
 273+ F28C 18 1C 1C 1C  	db  $18, $1C, $1C, $1C, $1C, $1C, $1C, $18, $18, $18, $E3, $E3, $E3, $E3, $E3, $E3;
 273+ F290 1C 1C 1C 18
 273+ F294 18 18 E3 E3
 273+ F298 E3 E3 E3 E3
 274+ F29C 1C 1C 1C 1C  	db  $1C, $1C, $1C, $1C, $1C, $1C, $18, $18, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 274+ F2A0 1C 1C 18 18
 274+ F2A4 E3 E3 E3 E3
 274+ F2A8 E3 E3 E3 E3
 275+ F2AC 1C 1C 1C 18  	db  $1C, $1C, $1C, $18, $18, $18, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 275+ F2B0 18 18 E3 E3
 275+ F2B4 E3 E3 E3 E3
 275+ F2B8 E3 E3 E3 E3
 276+ F2BC 1C 18 18 E3  	db  $1C, $18, $18, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 276+ F2C0 E3 E3 E3 E3
 276+ F2C4 E3 E3 E3 E3
 276+ F2C8 E3 E3 E3 E3
 277+ F2CC 18 E3 E3 E3  	db  $18, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 277+ F2D0 E3 E3 E3 E3
 277+ F2D4 E3 E3 E3 E3
 277+ F2D8 E3 E3 E3 E3
 278+ F2DC
 279+ F2DC
 280+ F2DC
 281+ F2DC              Sprite15:
 282+ F2DC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 282+ F2E0 E3 E3 E3 E3
 282+ F2E4 E3 E3 E3 E3
 282+ F2E8 E3 E3 E3 E3
 283+ F2EC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 283+ F2F0 E3 E3 E3 E3
 283+ F2F4 E3 E3 E3 E3
 283+ F2F8 E3 E3 E3 E3
 284+ F2FC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 284+ F300 E3 E3 E3 E3
 284+ F304 E3 E3 E3 E3
 284+ F308 E3 E3 E3 E3
 285+ F30C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 285+ F310 E3 E3 E3 E3
 285+ F314 E3 E3 E3 E3
 285+ F318 E3 E3 E3 E3
 286+ F31C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 286+ F320 E3 E3 E3 E3
 286+ F324 E3 E3 E3 E3
 286+ F328 E3 E3 E3 E3
 287+ F32C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 287+ F330 E3 E3 E3 E3
 287+ F334 E3 E3 E3 E3
 287+ F338 E3 E3 E3 E3
 288+ F33C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $18;
 288+ F340 E3 E3 E3 E3
 288+ F344 E3 E3 E3 E3
 288+ F348 E3 E3 E3 18
 289+ F34C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $18, $18, $1C;
 289+ F350 E3 E3 E3 E3
 289+ F354 E3 E3 E3 E3
 289+ F358 E3 18 18 1C
 290+ F35C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $18, $18, $1C, $1C, $18;
 290+ F360 E3 E3 E3 E3
 290+ F364 E3 E3 E3 18
 290+ F368 18 1C 1C 18
 291+ F36C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $18, $18, $18, $18, $1C, $1C, $18, $18;
 291+ F370 E3 E3 E3 E3
 291+ F374 18 18 18 18
 291+ F378 1C 1C 18 18
 292+ F37C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $18, $18, $18, $1C, $1C, $1C, $18, $18, $E3, $E3;
 292+ F380 E3 E3 18 18
 292+ F384 18 1C 1C 1C
 292+ F388 18 18 E3 E3
 293+ F38C E3 E3 E3 18  	db  $E3, $E3, $E3, $18, $18, $18, $1C, $1C, $1C, $1C, $18, $18, $E3, $E3, $E3, $E3;
 293+ F390 18 18 1C 1C
 293+ F394 1C 1C 18 18
 293+ F398 E3 E3 E3 E3
 294+ F39C E3 18 18 1C  	db  $E3, $18, $18, $1C, $1C, $1C, $1C, $18, $18, $18, $E3, $E3, $E3, $E3, $E3, $E3;
 294+ F3A0 1C 1C 1C 18
 294+ F3A4 18 18 E3 E3
 294+ F3A8 E3 E3 E3 E3
 295+ F3AC 18 1C 1C 1C  	db  $18, $1C, $1C, $1C, $1C, $18, $18, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 295+ F3B0 1C 18 18 E3
 295+ F3B4 E3 E3 E3 E3
 295+ F3B8 E3 E3 E3 E3
 296+ F3BC 1C 1C 1C 18  	db  $1C, $1C, $1C, $18, $18, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 296+ F3C0 18 E3 E3 E3
 296+ F3C4 E3 E3 E3 E3
 296+ F3C8 E3 E3 E3 E3
 297+ F3CC 1C 18 18 E3  	db  $1C, $18, $18, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 297+ F3D0 E3 E3 E3 E3
 297+ F3D4 E3 E3 E3 E3
 297+ F3D8 E3 E3 E3 E3
 298+ F3DC
 299+ F3DC
 300+ F3DC
 301+ F3DC              Sprite16:
 302+ F3DC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $18, $18;
 302+ F3E0 E3 E3 E3 E3
 302+ F3E4 E3 E3 E3 E3
 302+ F3E8 E3 E3 18 18
 303+ F3EC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $18, $1C, $1C, $1C;
 303+ F3F0 E3 E3 E3 E3
 303+ F3F4 E3 E3 E3 E3
 303+ F3F8 18 1C 1C 1C
 304+ F3FC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $18, $18, $1C, $1C, $18, $E3, $E3;
 304+ F400 E3 E3 E3 E3
 304+ F404 E3 18 18 1C
 304+ F408 1C 18 E3 E3
 305+ F40C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $18, $18, $18, $1C, $1C, $18, $E3, $E3, $E3, $E3;
 305+ F410 E3 E3 18 18
 305+ F414 18 1C 1C 18
 305+ F418 E3 E3 E3 E3
 306+ F41C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $18, $18, $1C, $1C, $18, $18, $E3, $E3, $E3, $E3, $E3, $E3;
 306+ F420 18 18 1C 1C
 306+ F424 18 18 E3 E3
 306+ F428 E3 E3 E3 E3
 307+ F42C E3 E3 18 18  	db  $E3, $E3, $18, $18, $1C, $1C, $18, $18, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 307+ F430 1C 1C 18 18
 307+ F434 E3 E3 E3 E3
 307+ F438 E3 E3 E3 E3
 308+ F43C 18 18 1C 1C  	db  $18, $18, $1C, $1C, $18, $18, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 308+ F440 18 18 E3 E3
 308+ F444 E3 E3 E3 E3
 308+ F448 E3 E3 E3 E3
 309+ F44C 1C 1C 18 18  	db  $1C, $1C, $18, $18, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 309+ F450 E3 E3 E3 E3
 309+ F454 E3 E3 E3 E3
 309+ F458 E3 E3 E3 E3
 310+ F45C 18 18 E3 E3  	db  $18, $18, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 310+ F460 E3 E3 E3 E3
 310+ F464 E3 E3 E3 E3
 310+ F468 E3 E3 E3 E3
 311+ F46C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 311+ F470 E3 E3 E3 E3
 311+ F474 E3 E3 E3 E3
 311+ F478 E3 E3 E3 E3
 312+ F47C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 312+ F480 E3 E3 E3 E3
 312+ F484 E3 E3 E3 E3
 312+ F488 E3 E3 E3 E3
 313+ F48C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 313+ F490 E3 E3 E3 E3
 313+ F494 E3 E3 E3 E3
 313+ F498 E3 E3 E3 E3
 314+ F49C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 314+ F4A0 E3 E3 E3 E3
 314+ F4A4 E3 E3 E3 E3
 314+ F4A8 E3 E3 E3 E3
 315+ F4AC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 315+ F4B0 E3 E3 E3 E3
 315+ F4B4 E3 E3 E3 E3
 315+ F4B8 E3 E3 E3 E3
 316+ F4BC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 316+ F4C0 E3 E3 E3 E3
 316+ F4C4 E3 E3 E3 E3
 316+ F4C8 E3 E3 E3 E3
 317+ F4CC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 317+ F4D0 E3 E3 E3 E3
 317+ F4D4 E3 E3 E3 E3
 317+ F4D8 E3 E3 E3 E3
 318+ F4DC
 319+ F4DC
 320+ F4DC
 321+ F4DC              Sprite17:
 322+ F4DC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 322+ F4E0 E3 E3 E3 E3
 322+ F4E4 E3 E3 E3 E3
 322+ F4E8 E3 E3 E3 E3
 323+ F4EC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $1C, $E3, $E3;
 323+ F4F0 E3 E3 E3 E3
 323+ F4F4 E3 E3 E3 E3
 323+ F4F8 E3 1C E3 E3
 324+ F4FC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $18, $1C, $1C, $E3, $E3, $E3;
 324+ F500 E3 E3 E3 E3
 324+ F504 E3 E3 18 1C
 324+ F508 1C E3 E3 E3
 325+ F50C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $18, $1C, $1C, $E3, $E3, $E3, $E3, $E3;
 325+ F510 E3 E3 E3 E3
 325+ F514 18 1C 1C E3
 325+ F518 E3 E3 E3 E3
 326+ F51C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $18, $1C, $1C, $18, $E3, $E3, $E3, $E3, $E3, $E3;
 326+ F520 E3 E3 18 1C
 326+ F524 1C 18 E3 E3
 326+ F528 E3 E3 E3 E3
 327+ F52C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $18, $1C, $1C, $18, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 327+ F530 18 1C 1C 18
 327+ F534 E3 E3 E3 E3
 327+ F538 E3 E3 E3 E3
 328+ F53C E3 E3 18 1C  	db  $E3, $E3, $18, $1C, $1C, $18, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 328+ F540 1C 18 E3 E3
 328+ F544 E3 E3 E3 E3
 328+ F548 E3 E3 E3 E3
 329+ F54C 18 1C 1C 18  	db  $18, $1C, $1C, $18, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 329+ F550 E3 E3 E3 E3
 329+ F554 E3 E3 E3 E3
 329+ F558 E3 E3 E3 E3
 330+ F55C 1C 18 E3 E3  	db  $1C, $18, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 330+ F560 E3 E3 E3 E3
 330+ F564 E3 E3 E3 E3
 330+ F568 E3 E3 E3 E3
 331+ F56C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 331+ F570 E3 E3 E3 E3
 331+ F574 E3 E3 E3 E3
 331+ F578 E3 E3 E3 E3
 332+ F57C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 332+ F580 E3 E3 E3 E3
 332+ F584 E3 E3 E3 E3
 332+ F588 E3 E3 E3 E3
 333+ F58C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 333+ F590 E3 E3 E3 E3
 333+ F594 E3 E3 E3 E3
 333+ F598 E3 E3 E3 E3
 334+ F59C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 334+ F5A0 E3 E3 E3 E3
 334+ F5A4 E3 E3 E3 E3
 334+ F5A8 E3 E3 E3 E3
 335+ F5AC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 335+ F5B0 E3 E3 E3 E3
 335+ F5B4 E3 E3 E3 E3
 335+ F5B8 E3 E3 E3 E3
 336+ F5BC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 336+ F5C0 E3 E3 E3 E3
 336+ F5C4 E3 E3 E3 E3
 336+ F5C8 E3 E3 E3 E3
 337+ F5CC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 337+ F5D0 E3 E3 E3 E3
 337+ F5D4 E3 E3 E3 E3
 337+ F5D8 E3 E3 E3 E3
 338+ F5DC
 339+ F5DC
 340+ F5DC
 341+ F5DC              Sprite18:
 342+ F5DC E3 D8 B4 E3  	db  $E3, $D8, $B4, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 342+ F5E0 E3 E3 E3 E3
 342+ F5E4 E3 E3 E3 E3
 342+ F5E8 E3 E3 E3 E3
 343+ F5EC B4 FF FC D8  	db  $B4, $FF, $FC, $D8, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 343+ F5F0 E3 E3 E3 E3
 343+ F5F4 E3 E3 E3 E3
 343+ F5F8 E3 E3 E3 E3
 344+ F5FC D8 FC B4 D8  	db  $D8, $FC, $B4, $D8, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 344+ F600 E3 E3 E3 E3
 344+ F604 E3 E3 E3 E3
 344+ F608 E3 E3 E3 E3
 345+ F60C E3 B4 D8 E3  	db  $E3, $B4, $D8, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 345+ F610 E3 E3 E3 E3
 345+ F614 E3 E3 E3 E3
 345+ F618 E3 E3 E3 E3
 346+ F61C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 346+ F620 E3 E3 E3 E3
 346+ F624 E3 E3 E3 E3
 346+ F628 E3 E3 E3 E3
 347+ F62C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 347+ F630 E3 E3 E3 E3
 347+ F634 E3 E3 E3 E3
 347+ F638 E3 E3 E3 E3
 348+ F63C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 348+ F640 E3 E3 E3 E3
 348+ F644 E3 E3 E3 E3
 348+ F648 E3 E3 E3 E3
 349+ F64C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 349+ F650 E3 E3 E3 E3
 349+ F654 E3 E3 E3 E3
 349+ F658 E3 E3 E3 E3
 350+ F65C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 350+ F660 E3 E3 E3 E3
 350+ F664 E3 E3 E3 E3
 350+ F668 E3 E3 E3 E3
 351+ F66C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 351+ F670 E3 E3 E3 E3
 351+ F674 E3 E3 E3 E3
 351+ F678 E3 E3 E3 E3
 352+ F67C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 352+ F680 E3 E3 E3 E3
 352+ F684 E3 E3 E3 E3
 352+ F688 E3 E3 E3 E3
 353+ F68C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 353+ F690 E3 E3 E3 E3
 353+ F694 E3 E3 E3 E3
 353+ F698 E3 E3 E3 E3
 354+ F69C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 354+ F6A0 E3 E3 E3 E3
 354+ F6A4 E3 E3 E3 E3
 354+ F6A8 E3 E3 E3 E3
 355+ F6AC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 355+ F6B0 E3 E3 E3 E3
 355+ F6B4 E3 E3 E3 E3
 355+ F6B8 E3 E3 E3 E3
 356+ F6BC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 356+ F6C0 E3 E3 E3 E3
 356+ F6C4 E3 E3 E3 E3
 356+ F6C8 E3 E3 E3 E3
 357+ F6CC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 357+ F6D0 E3 E3 E3 E3
 357+ F6D4 E3 E3 E3 E3
 357+ F6D8 E3 E3 E3 E3
 358+ F6DC
 359+ F6DC
 360+ F6DC
 361+ F6DC              Sprite19:
 362+ F6DC E3 D8 B4 E3  	db  $E3, $D8, $B4, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 362+ F6E0 E3 E3 E3 E3
 362+ F6E4 E3 E3 E3 E3
 362+ F6E8 E3 E3 E3 E3
 363+ F6EC B4 E3 E3 D8  	db  $B4, $E3, $E3, $D8, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 363+ F6F0 E3 E3 E3 E3
 363+ F6F4 E3 E3 E3 E3
 363+ F6F8 E3 E3 E3 E3
 364+ F6FC D8 E3 E3 D8  	db  $D8, $E3, $E3, $D8, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 364+ F700 E3 E3 E3 E3
 364+ F704 E3 E3 E3 E3
 364+ F708 E3 E3 E3 E3
 365+ F70C E3 B4 D8 E3  	db  $E3, $B4, $D8, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 365+ F710 E3 E3 E3 E3
 365+ F714 E3 E3 E3 E3
 365+ F718 E3 E3 E3 E3
 366+ F71C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 366+ F720 E3 E3 E3 E3
 366+ F724 E3 E3 E3 E3
 366+ F728 E3 E3 E3 E3
 367+ F72C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 367+ F730 E3 E3 E3 E3
 367+ F734 E3 E3 E3 E3
 367+ F738 E3 E3 E3 E3
 368+ F73C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 368+ F740 E3 E3 E3 E3
 368+ F744 E3 E3 E3 E3
 368+ F748 E3 E3 E3 E3
 369+ F74C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 369+ F750 E3 E3 E3 E3
 369+ F754 E3 E3 E3 E3
 369+ F758 E3 E3 E3 E3
 370+ F75C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 370+ F760 E3 E3 E3 E3
 370+ F764 E3 E3 E3 E3
 370+ F768 E3 E3 E3 E3
 371+ F76C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 371+ F770 E3 E3 E3 E3
 371+ F774 E3 E3 E3 E3
 371+ F778 E3 E3 E3 E3
 372+ F77C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 372+ F780 E3 E3 E3 E3
 372+ F784 E3 E3 E3 E3
 372+ F788 E3 E3 E3 E3
 373+ F78C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 373+ F790 E3 E3 E3 E3
 373+ F794 E3 E3 E3 E3
 373+ F798 E3 E3 E3 E3
 374+ F79C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 374+ F7A0 E3 E3 E3 E3
 374+ F7A4 E3 E3 E3 E3
 374+ F7A8 E3 E3 E3 E3
 375+ F7AC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 375+ F7B0 E3 E3 E3 E3
 375+ F7B4 E3 E3 E3 E3
 375+ F7B8 E3 E3 E3 E3
 376+ F7BC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 376+ F7C0 E3 E3 E3 E3
 376+ F7C4 E3 E3 E3 E3
 376+ F7C8 E3 E3 E3 E3
 377+ F7CC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 377+ F7D0 E3 E3 E3 E3
 377+ F7D4 E3 E3 E3 E3
 377+ F7D8 E3 E3 E3 E3
 378+ F7DC
 379+ F7DC
 380+ F7DC
 381+ F7DC
 382+ F7DC              Sprite20:
 383+ F7DC E3 16 12 E3  	db  $E3, $16, $12, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 383+ F7E0 E3 E3 E3 E3
 383+ F7E4 E3 E3 E3 E3
 383+ F7E8 E3 E3 E3 E3
 384+ F7EC 12 1A 1F 16  	db  $12, $1A, $1F, $16, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 384+ F7F0 E3 E3 E3 E3
 384+ F7F4 E3 E3 E3 E3
 384+ F7F8 E3 E3 E3 E3
 385+ F7FC 16 1F 1A 12  	db  $16, $1F, $1A, $12, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 385+ F800 E3 E3 E3 E3
 385+ F804 E3 E3 E3 E3
 385+ F808 E3 E3 E3 E3
 386+ F80C E3 12 16 E3  	db  $E3, $12, $16, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 386+ F810 E3 E3 E3 E3
 386+ F814 E3 E3 E3 E3
 386+ F818 E3 E3 E3 E3
 387+ F81C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 387+ F820 E3 E3 E3 E3
 387+ F824 E3 E3 E3 E3
 387+ F828 E3 E3 E3 E3
 388+ F82C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 388+ F830 E3 E3 E3 E3
 388+ F834 E3 E3 E3 E3
 388+ F838 E3 E3 E3 E3
 389+ F83C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 389+ F840 E3 E3 E3 E3
 389+ F844 E3 E3 E3 E3
 389+ F848 E3 E3 E3 E3
 390+ F84C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 390+ F850 E3 E3 E3 E3
 390+ F854 E3 E3 E3 E3
 390+ F858 E3 E3 E3 E3
 391+ F85C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 391+ F860 E3 E3 E3 E3
 391+ F864 E3 E3 E3 E3
 391+ F868 E3 E3 E3 E3
 392+ F86C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 392+ F870 E3 E3 E3 E3
 392+ F874 E3 E3 E3 E3
 392+ F878 E3 E3 E3 E3
 393+ F87C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 393+ F880 E3 E3 E3 E3
 393+ F884 E3 E3 E3 E3
 393+ F888 E3 E3 E3 E3
 394+ F88C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 394+ F890 E3 E3 E3 E3
 394+ F894 E3 E3 E3 E3
 394+ F898 E3 E3 E3 E3
 395+ F89C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 395+ F8A0 E3 E3 E3 E3
 395+ F8A4 E3 E3 E3 E3
 395+ F8A8 E3 E3 E3 E3
 396+ F8AC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 396+ F8B0 E3 E3 E3 E3
 396+ F8B4 E3 E3 E3 E3
 396+ F8B8 E3 E3 E3 E3
 397+ F8BC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 397+ F8C0 E3 E3 E3 E3
 397+ F8C4 E3 E3 E3 E3
 397+ F8C8 E3 E3 E3 E3
 398+ F8CC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 398+ F8D0 E3 E3 E3 E3
 398+ F8D4 E3 E3 E3 E3
 398+ F8D8 E3 E3 E3 E3
 399+ F8DC
 400+ F8DC
 401+ F8DC
 402+ F8DC              Sprite21:
 403+ F8DC E3 16 12 E3  	db  $E3, $16, $12, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 403+ F8E0 E3 E3 E3 E3
 403+ F8E4 E3 E3 E3 E3
 403+ F8E8 E3 E3 E3 E3
 404+ F8EC 12 E3 E3 16  	db  $12, $E3, $E3, $16, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 404+ F8F0 E3 E3 E3 E3
 404+ F8F4 E3 E3 E3 E3
 404+ F8F8 E3 E3 E3 E3
 405+ F8FC 16 E3 E3 12  	db  $16, $E3, $E3, $12, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 405+ F900 E3 E3 E3 E3
 405+ F904 E3 E3 E3 E3
 405+ F908 E3 E3 E3 E3
 406+ F90C E3 12 16 E3  	db  $E3, $12, $16, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 406+ F910 E3 E3 E3 E3
 406+ F914 E3 E3 E3 E3
 406+ F918 E3 E3 E3 E3
 407+ F91C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 407+ F920 E3 E3 E3 E3
 407+ F924 E3 E3 E3 E3
 407+ F928 E3 E3 E3 E3
 408+ F92C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 408+ F930 E3 E3 E3 E3
 408+ F934 E3 E3 E3 E3
 408+ F938 E3 E3 E3 E3
 409+ F93C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 409+ F940 E3 E3 E3 E3
 409+ F944 E3 E3 E3 E3
 409+ F948 E3 E3 E3 E3
 410+ F94C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 410+ F950 E3 E3 E3 E3
 410+ F954 E3 E3 E3 E3
 410+ F958 E3 E3 E3 E3
 411+ F95C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 411+ F960 E3 E3 E3 E3
 411+ F964 E3 E3 E3 E3
 411+ F968 E3 E3 E3 E3
 412+ F96C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 412+ F970 E3 E3 E3 E3
 412+ F974 E3 E3 E3 E3
 412+ F978 E3 E3 E3 E3
 413+ F97C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 413+ F980 E3 E3 E3 E3
 413+ F984 E3 E3 E3 E3
 413+ F988 E3 E3 E3 E3
 414+ F98C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 414+ F990 E3 E3 E3 E3
 414+ F994 E3 E3 E3 E3
 414+ F998 E3 E3 E3 E3
 415+ F99C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 415+ F9A0 E3 E3 E3 E3
 415+ F9A4 E3 E3 E3 E3
 415+ F9A8 E3 E3 E3 E3
 416+ F9AC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 416+ F9B0 E3 E3 E3 E3
 416+ F9B4 E3 E3 E3 E3
 416+ F9B8 E3 E3 E3 E3
 417+ F9BC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 417+ F9C0 E3 E3 E3 E3
 417+ F9C4 E3 E3 E3 E3
 417+ F9C8 E3 E3 E3 E3
 418+ F9CC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 418+ F9D0 E3 E3 E3 E3
 418+ F9D4 E3 E3 E3 E3
 418+ F9D8 E3 E3 E3 E3
 419+ F9DC
 420+ F9DC
 421+ F9DC
 422+ F9DC              Sprite22:
 423+ F9DC E3 92 92 E3  	db  $E3, $92, $92, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 423+ F9E0 E3 E3 E3 E3
 423+ F9E4 E3 E3 E3 E3
 423+ F9E8 E3 E3 E3 E3
 424+ F9EC 92 FF FF 92  	db  $92, $FF, $FF, $92, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 424+ F9F0 E3 E3 E3 E3
 424+ F9F4 E3 E3 E3 E3
 424+ F9F8 E3 E3 E3 E3
 425+ F9FC 92 FF FF 92  	db  $92, $FF, $FF, $92, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 425+ FA00 E3 E3 E3 E3
 425+ FA04 E3 E3 E3 E3
 425+ FA08 E3 E3 E3 E3
 426+ FA0C E3 92 92 E3  	db  $E3, $92, $92, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 426+ FA10 E3 E3 E3 E3
 426+ FA14 E3 E3 E3 E3
 426+ FA18 E3 E3 E3 E3
 427+ FA1C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 427+ FA20 E3 E3 E3 E3
 427+ FA24 E3 E3 E3 E3
 427+ FA28 E3 E3 E3 E3
 428+ FA2C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 428+ FA30 E3 E3 E3 E3
 428+ FA34 E3 E3 E3 E3
 428+ FA38 E3 E3 E3 E3
 429+ FA3C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 429+ FA40 E3 E3 E3 E3
 429+ FA44 E3 E3 E3 E3
 429+ FA48 E3 E3 E3 E3
 430+ FA4C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 430+ FA50 E3 E3 E3 E3
 430+ FA54 E3 E3 E3 E3
 430+ FA58 E3 E3 E3 E3
 431+ FA5C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 431+ FA60 E3 E3 E3 E3
 431+ FA64 E3 E3 E3 E3
 431+ FA68 E3 E3 E3 E3
 432+ FA6C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 432+ FA70 E3 E3 E3 E3
 432+ FA74 E3 E3 E3 E3
 432+ FA78 E3 E3 E3 E3
 433+ FA7C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 433+ FA80 E3 E3 E3 E3
 433+ FA84 E3 E3 E3 E3
 433+ FA88 E3 E3 E3 E3
 434+ FA8C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 434+ FA90 E3 E3 E3 E3
 434+ FA94 E3 E3 E3 E3
 434+ FA98 E3 E3 E3 E3
 435+ FA9C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 435+ FAA0 E3 E3 E3 E3
 435+ FAA4 E3 E3 E3 E3
 435+ FAA8 E3 E3 E3 E3
 436+ FAAC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 436+ FAB0 E3 E3 E3 E3
 436+ FAB4 E3 E3 E3 E3
 436+ FAB8 E3 E3 E3 E3
 437+ FABC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 437+ FAC0 E3 E3 E3 E3
 437+ FAC4 E3 E3 E3 E3
 437+ FAC8 E3 E3 E3 E3
 438+ FACC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 438+ FAD0 E3 E3 E3 E3
 438+ FAD4 E3 E3 E3 E3
 438+ FAD8 E3 E3 E3 E3
 439+ FADC
 440+ FADC
 441+ FADC
 442+ FADC              Sprite23:
 443+ FADC E3 92 92 E3  	db  $E3, $92, $92, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 443+ FAE0 E3 E3 E3 E3
 443+ FAE4 E3 E3 E3 E3
 443+ FAE8 E3 E3 E3 E3
 444+ FAEC 92 E3 E3 92  	db  $92, $E3, $E3, $92, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 444+ FAF0 E3 E3 E3 E3
 444+ FAF4 E3 E3 E3 E3
 444+ FAF8 E3 E3 E3 E3
 445+ FAFC 92 E3 E3 92  	db  $92, $E3, $E3, $92, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 445+ FB00 E3 E3 E3 E3
 445+ FB04 E3 E3 E3 E3
 445+ FB08 E3 E3 E3 E3
 446+ FB0C E3 92 92 E3  	db  $E3, $92, $92, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 446+ FB10 E3 E3 E3 E3
 446+ FB14 E3 E3 E3 E3
 446+ FB18 E3 E3 E3 E3
 447+ FB1C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 447+ FB20 E3 E3 E3 E3
 447+ FB24 E3 E3 E3 E3
 447+ FB28 E3 E3 E3 E3
 448+ FB2C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 448+ FB30 E3 E3 E3 E3
 448+ FB34 E3 E3 E3 E3
 448+ FB38 E3 E3 E3 E3
 449+ FB3C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 449+ FB40 E3 E3 E3 E3
 449+ FB44 E3 E3 E3 E3
 449+ FB48 E3 E3 E3 E3
 450+ FB4C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 450+ FB50 E3 E3 E3 E3
 450+ FB54 E3 E3 E3 E3
 450+ FB58 E3 E3 E3 E3
 451+ FB5C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 451+ FB60 E3 E3 E3 E3
 451+ FB64 E3 E3 E3 E3
 451+ FB68 E3 E3 E3 E3
 452+ FB6C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 452+ FB70 E3 E3 E3 E3
 452+ FB74 E3 E3 E3 E3
 452+ FB78 E3 E3 E3 E3
 453+ FB7C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 453+ FB80 E3 E3 E3 E3
 453+ FB84 E3 E3 E3 E3
 453+ FB88 E3 E3 E3 E3
 454+ FB8C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 454+ FB90 E3 E3 E3 E3
 454+ FB94 E3 E3 E3 E3
 454+ FB98 E3 E3 E3 E3
 455+ FB9C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 455+ FBA0 E3 E3 E3 E3
 455+ FBA4 E3 E3 E3 E3
 455+ FBA8 E3 E3 E3 E3
 456+ FBAC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 456+ FBB0 E3 E3 E3 E3
 456+ FBB4 E3 E3 E3 E3
 456+ FBB8 E3 E3 E3 E3
 457+ FBBC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 457+ FBC0 E3 E3 E3 E3
 457+ FBC4 E3 E3 E3 E3
 457+ FBC8 E3 E3 E3 E3
 458+ FBCC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 458+ FBD0 E3 E3 E3 E3
 458+ FBD4 E3 E3 E3 E3
 458+ FBD8 E3 E3 E3 E3
 459+ FBDC
 460+ FBDC
 461+ FBDC
 462+ FBDC              Sprite24:
 463+ FBDC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 463+ FBE0 E3 E3 E3 E3
 463+ FBE4 E3 E3 E3 E3
 463+ FBE8 E3 E3 E3 E3
 464+ FBEC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 464+ FBF0 E3 E3 E3 E3
 464+ FBF4 E3 E3 E3 E3
 464+ FBF8 E3 E3 E3 E3
 465+ FBFC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 465+ FC00 E3 E3 E3 E3
 465+ FC04 E3 E3 E3 E3
 465+ FC08 E3 E3 E3 E3
 466+ FC0C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 466+ FC10 E3 E3 E3 E3
 466+ FC14 E3 E3 E3 E3
 466+ FC18 E3 E3 E3 E3
 467+ FC1C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 467+ FC20 E3 E3 E3 E3
 467+ FC24 E3 E3 E3 E3
 467+ FC28 E3 E3 E3 E3
 468+ FC2C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $7C, $7C, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 468+ FC30 E3 7C 7C E3
 468+ FC34 E3 E3 E3 E3
 468+ FC38 E3 E3 E3 E3
 469+ FC3C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $10, $10, $7C, $7C, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 469+ FC40 E3 10 10 7C
 469+ FC44 7C E3 E3 E3
 469+ FC48 E3 E3 E3 E3
 470+ FC4C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $10, $10, $7C, $7C, $E3, $E3, $E3, $E3, $E3;
 470+ FC50 E3 E3 E3 10
 470+ FC54 10 7C 7C E3
 470+ FC58 E3 E3 E3 E3
 471+ FC5C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $10, $10, $7C, $7C, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 471+ FC60 E3 10 10 7C
 471+ FC64 7C E3 E3 E3
 471+ FC68 E3 E3 E3 E3
 472+ FC6C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $7C, $7C, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 472+ FC70 E3 7C 7C E3
 472+ FC74 E3 E3 E3 E3
 472+ FC78 E3 E3 E3 E3
 473+ FC7C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 473+ FC80 E3 E3 E3 E3
 473+ FC84 E3 E3 E3 E3
 473+ FC88 E3 E3 E3 E3
 474+ FC8C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 474+ FC90 E3 E3 E3 E3
 474+ FC94 E3 E3 E3 E3
 474+ FC98 E3 E3 E3 E3
 475+ FC9C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 475+ FCA0 E3 E3 E3 E3
 475+ FCA4 E3 E3 E3 E3
 475+ FCA8 E3 E3 E3 E3
 476+ FCAC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 476+ FCB0 E3 E3 E3 E3
 476+ FCB4 E3 E3 E3 E3
 476+ FCB8 E3 E3 E3 E3
 477+ FCBC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 477+ FCC0 E3 E3 E3 E3
 477+ FCC4 E3 E3 E3 E3
 477+ FCC8 E3 E3 E3 E3
 478+ FCCC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 478+ FCD0 E3 E3 E3 E3
 478+ FCD4 E3 E3 E3 E3
 478+ FCD8 E3 E3 E3 E3
 479+ FCDC
 480+ FCDC
 481+ FCDC
 482+ FCDC              Sprite25:
 483+ FCDC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 483+ FCE0 E3 E3 E3 E3
 483+ FCE4 E3 E3 E3 E3
 483+ FCE8 E3 E3 E3 E3
 484+ FCEC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 484+ FCF0 E3 E3 E3 E3
 484+ FCF4 E3 E3 E3 E3
 484+ FCF8 E3 E3 E3 E3
 485+ FCFC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 485+ FD00 E3 E3 E3 E3
 485+ FD04 E3 E3 E3 E3
 485+ FD08 E3 E3 E3 E3
 486+ FD0C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 486+ FD10 E3 E3 E3 E3
 486+ FD14 E3 E3 E3 E3
 486+ FD18 E3 E3 E3 E3
 487+ FD1C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 487+ FD20 E3 E3 E3 E3
 487+ FD24 E3 E3 E3 E3
 487+ FD28 E3 E3 E3 E3
 488+ FD2C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 488+ FD30 E3 E3 E3 E3
 488+ FD34 E3 E3 E3 E3
 488+ FD38 E3 E3 E3 E3
 489+ FD3C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E0, $E3, $EC, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 489+ FD40 E3 E3 E0 E3
 489+ FD44 EC E3 E3 E3
 489+ FD48 E3 E3 E3 E3
 490+ FD4C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $A0, $A0, $E0, $E0, $EC, $EC, $E3, $E3, $E3, $E3, $E3;
 490+ FD50 E3 A0 A0 E0
 490+ FD54 E0 EC EC E3
 490+ FD58 E3 E3 E3 E3
 491+ FD5C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E0, $E3, $EC, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 491+ FD60 E3 E3 E0 E3
 491+ FD64 EC E3 E3 E3
 491+ FD68 E3 E3 E3 E3
 492+ FD6C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 492+ FD70 E3 E3 E3 E3
 492+ FD74 E3 E3 E3 E3
 492+ FD78 E3 E3 E3 E3
 493+ FD7C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 493+ FD80 E3 E3 E3 E3
 493+ FD84 E3 E3 E3 E3
 493+ FD88 E3 E3 E3 E3
 494+ FD8C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 494+ FD90 E3 E3 E3 E3
 494+ FD94 E3 E3 E3 E3
 494+ FD98 E3 E3 E3 E3
 495+ FD9C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 495+ FDA0 E3 E3 E3 E3
 495+ FDA4 E3 E3 E3 E3
 495+ FDA8 E3 E3 E3 E3
 496+ FDAC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 496+ FDB0 E3 E3 E3 E3
 496+ FDB4 E3 E3 E3 E3
 496+ FDB8 E3 E3 E3 E3
 497+ FDBC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 497+ FDC0 E3 E3 E3 E3
 497+ FDC4 E3 E3 E3 E3
 497+ FDC8 E3 E3 E3 E3
 498+ FDCC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 498+ FDD0 E3 E3 E3 E3
 498+ FDD4 E3 E3 E3 E3
 498+ FDD8 E3 E3 E3 E3
 499+ FDDC
 500+ FDDC
 501+ FDDC
 502+ FDDC              Sprite26:
 503+ FDDC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 503+ FDE0 E3 E3 E3 E3
 503+ FDE4 E3 E3 E3 E3
 503+ FDE8 E3 E3 E3 E3
 504+ FDEC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 504+ FDF0 E3 E3 E3 E3
 504+ FDF4 E3 E3 E3 E3
 504+ FDF8 E3 E3 E3 E3
 505+ FDFC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 505+ FE00 E3 E3 E3 E3
 505+ FE04 E3 E3 E3 E3
 505+ FE08 E3 E3 E3 E3
 506+ FE0C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 506+ FE10 E3 E3 E3 E3
 506+ FE14 E3 E3 E3 E3
 506+ FE18 E3 E3 E3 E3
 507+ FE1C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 507+ FE20 E3 E3 E3 E3
 507+ FE24 E3 E3 E3 E3
 507+ FE28 E3 E3 E3 E3
 508+ FE2C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 508+ FE30 E3 E3 E3 E3
 508+ FE34 E3 E3 E3 E3
 508+ FE38 E3 E3 E3 E3
 509+ FE3C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 509+ FE40 E3 E3 E3 E3
 509+ FE44 E3 E3 E3 E3
 509+ FE48 E3 E3 E3 E3
 510+ FE4C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 510+ FE50 E3 E3 E3 E3
 510+ FE54 E3 E3 E3 E3
 510+ FE58 E3 E3 E3 E3
 511+ FE5C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 511+ FE60 E3 E3 E3 E3
 511+ FE64 E3 E3 E3 E3
 511+ FE68 E3 E3 E3 E3
 512+ FE6C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 512+ FE70 E3 E3 E3 E3
 512+ FE74 E3 E3 E3 E3
 512+ FE78 E3 E3 E3 E3
 513+ FE7C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 513+ FE80 E3 E3 E3 E3
 513+ FE84 E3 E3 E3 E3
 513+ FE88 E3 E3 E3 E3
 514+ FE8C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 514+ FE90 E3 E3 E3 E3
 514+ FE94 E3 E3 E3 E3
 514+ FE98 E3 E3 E3 E3
 515+ FE9C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 515+ FEA0 E3 E3 E3 E3
 515+ FEA4 E3 E3 E3 E3
 515+ FEA8 E3 E3 E3 E3
 516+ FEAC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 516+ FEB0 E3 E3 E3 E3
 516+ FEB4 E3 E3 E3 E3
 516+ FEB8 E3 E3 E3 E3
 517+ FEBC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 517+ FEC0 E3 E3 E3 E3
 517+ FEC4 E3 E3 E3 E3
 517+ FEC8 E3 E3 E3 E3
 518+ FECC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 518+ FED0 E3 E3 E3 E3
 518+ FED4 E3 E3 E3 E3
 518+ FED8 E3 E3 E3 E3
 519+ FEDC
 520+ FEDC
 521+ FEDC
 522+ FEDC              Sprite27:
 523+ FEDC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 523+ FEE0 E3 E3 E3 E3
 523+ FEE4 E3 E3 E3 E3
 523+ FEE8 E3 E3 E3 E3
 524+ FEEC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 524+ FEF0 E3 E3 E3 E3
 524+ FEF4 E3 E3 E3 E3
 524+ FEF8 E3 E3 E3 E3
 525+ FEFC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 525+ FF00 E3 E3 E3 E3
 525+ FF04 E3 E3 E3 E3
 525+ FF08 E3 E3 E3 E3
 526+ FF0C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 526+ FF10 E3 E3 E3 E3
 526+ FF14 E3 E3 E3 E3
 526+ FF18 E3 E3 E3 E3
 527+ FF1C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 527+ FF20 E3 E3 E3 E3
 527+ FF24 E3 E3 E3 E3
 527+ FF28 E3 E3 E3 E3
 528+ FF2C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 528+ FF30 E3 E3 E3 E3
 528+ FF34 E3 E3 E3 E3
 528+ FF38 E3 E3 E3 E3
 529+ FF3C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 529+ FF40 E3 E3 E3 E3
 529+ FF44 E3 E3 E3 E3
 529+ FF48 E3 E3 E3 E3
 530+ FF4C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 530+ FF50 E3 E3 E3 E3
 530+ FF54 E3 E3 E3 E3
 530+ FF58 E3 E3 E3 E3
 531+ FF5C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 531+ FF60 E3 E3 E3 E3
 531+ FF64 E3 E3 E3 E3
 531+ FF68 E3 E3 E3 E3
 532+ FF6C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 532+ FF70 E3 E3 E3 E3
 532+ FF74 E3 E3 E3 E3
 532+ FF78 E3 E3 E3 E3
 533+ FF7C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 533+ FF80 E3 E3 E3 E3
 533+ FF84 E3 E3 E3 E3
 533+ FF88 E3 E3 E3 E3
 534+ FF8C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 534+ FF90 E3 E3 E3 E3
 534+ FF94 E3 E3 E3 E3
 534+ FF98 E3 E3 E3 E3
 535+ FF9C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 535+ FFA0 E3 E3 E3 E3
 535+ FFA4 E3 E3 E3 E3
 535+ FFA8 E3 E3 E3 E3
 536+ FFAC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 536+ FFB0 E3 E3 E3 E3
 536+ FFB4 E3 E3 E3 E3
 536+ FFB8 E3 E3 E3 E3
 537+ FFBC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 537+ FFC0 E3 E3 E3 E3
 537+ FFC4 E3 E3 E3 E3
 537+ FFC8 E3 E3 E3 E3
 538+ FFCC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 538+ FFD0 E3 E3 E3 E3
 538+ FFD4 E3 E3 E3 E3
 538+ FFD8 E3 E3 E3 E3
 539+ FFDC
 540+ FFDC
# file closed: ./Layer3Sprites/SpriteSheet.asm
 872  FFDC              ; Bank 61  ------------------------------------------------------------------------------------------------------------------------
 873  FFDC                  SLOT    ConsoleImageAddr
 874  FFDC                  PAGE    BankConsole
 875  FFDC              	ORG     ConsoleImageAddr, BankConsole
 876  E000
 877  E000                  INCLUDE "./Images/ConsoleImageData.asm"
# file opened: ./Images/ConsoleImageData.asm
   1+ E000              ConsoleImageData:
   2+ E000 FF FF FF FF      DB $FF,$FF,$FF,$FF,$FF,$FF,$00,$7F,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$7F,$00,$FF,$FF,$FF,$FF,$FF,$FF ; row 1
   2+ E004 FF FF 00 7F
   2+ E008 00 00 00 00
   2+ E00C 00 00 00 00
   2+ E010 00 00 00 00
   2+ E014 00 00 00 00
   2+ E018 7F 00 FF FF
   2+ E01C FF FF FF FF
   3+ E020 9C C3 FF FF      DB $9C,$C3,$FF,$FF,$FF,$FF,$40,$08,$01,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$40,$08,$01,$80,$00,$00,$00,$00,$01
   3+ E024 FF FF 40 08
   3+ E028 01 00 00 00
   3+ E02C 00 00 00 00
   3+ E030 00 00 00 00
   3+ E034 00 00 00 40
   3+ E038 08 01 80 00
   3+ E03C 00 00 00 01
   4+ E040 80 00 00 00      DB $80,$00,$00,$00,$00,$01,$10,$08,$04,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$10,$08,$04,$80,$00,$00,$00,$00,$01
   4+ E044 00 01 10 08
   4+ E048 04 00 00 00
   4+ E04C 00 00 00 00
   4+ E050 00 00 00 00
   4+ E054 00 00 00 10
   4+ E058 08 04 80 00
   4+ E05C 00 00 00 01
   5+ E060 80 00 00 00      DB $80,$00,$00,$00,$00,$01,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$80,$00,$00,$00,$00,$01
   5+ E064 00 01 00 00
   5+ E068 00 00 00 00
   5+ E06C 00 00 00 00
   5+ E070 00 00 00 00
   5+ E074 00 00 00 00
   5+ E078 00 00 80 00
   5+ E07C 00 00 00 01
   6+ E080 80 00 00 00      DB $80,$00,$00,$00,$00,$01,$00,$00,$00,$07,$82,$00,$08,$06,$20,$01,$80,$04,$60,$10,$00,$41,$E0,$00,$00,$00,$FF,$FF,$FF,$FF,$FF,$FF
   6+ E084 00 01 00 00
   6+ E088 00 07 82 00
   6+ E08C 08 06 20 01
   6+ E090 80 04 60 10
   6+ E094 00 41 E0 00
   6+ E098 00 00 FF FF
   6+ E09C FF FF FF FF
   7+ E0A0 80 00 00 00      DB $80,$00,$00,$00,$00,$01,$00,$06,$00,$30,$00,$08,$00,$04,$00,$61,$86,$00,$20,$00,$10,$00,$0C,$00,$60,$00,$FF,$FF,$FF,$FF,$FF,$FF
   7+ E0A4 00 01 00 06
   7+ E0A8 00 30 00 08
   7+ E0AC 00 04 00 61
   7+ E0B0 86 00 20 00
   7+ E0B4 10 00 0C 00
   7+ E0B8 60 00 FF FF
   7+ E0BC FF FF FF FF
   8+ E0C0 80 00 00 00      DB $80,$00,$00,$00,$00,$01,$00,$0F,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$55,$55,$55,$55,$55,$55,$55,$55,$F0,$00,$FF,$FF,$FF,$FF,$FF,$FF
   8+ E0C4 00 01 00 0F
   8+ E0C8 AA AA AA AA
   8+ E0CC AA AA AA AA
   8+ E0D0 55 55 55 55
   8+ E0D4 55 55 55 55
   8+ E0D8 F0 00 FF FF
   8+ E0DC FF FF FF FF
   9+ E0E0 FF FF FF FF      DB $FF,$FF,$FF,$FF,$FF,$FF,$00,$00,$00,$1E,$00,$00,$08,$00,$00,$01,$80,$00,$00,$10,$00,$00,$78,$00,$00,$00,$FF,$FF,$FF,$FF,$FF,$FF
   9+ E0E4 FF FF 00 00
   9+ E0E8 00 1E 00 00
   9+ E0EC 08 00 00 01
   9+ E0F0 80 00 00 10
   9+ E0F4 00 00 78 00
   9+ E0F8 00 00 FF FF
   9+ E0FC FF FF FF FF
  10+ E100 80 00 00 00      DB $80,$00,$00,$00,$00,$01,$01,$C9,$C0,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$01,$C9,$C0,$80,$00,$00,$00,$00,$01 ; row 2
  10+ E104 00 01 01 C9
  10+ E108 C0 00 00 00
  10+ E10C 00 00 00 00
  10+ E110 00 00 00 00
  10+ E114 00 00 00 01
  10+ E118 C9 C0 80 00
  10+ E11C 00 00 00 01
  11+ E120 B2 C3 92 49      DB $B2,$C3,$92,$49,$24,$93,$40,$08,$01,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$40,$08,$01,$80,$00,$00,$00,$7C,$39
  11+ E124 24 93 40 08
  11+ E128 01 00 00 00
  11+ E12C 00 00 00 00
  11+ E130 00 00 00 00
  11+ E134 00 00 00 40
  11+ E138 08 01 80 00
  11+ E13C 00 00 7C 39
  12+ E140 BE 66 00 00      DB $BE,$66,$00,$00,$00,$01,$18,$00,$0C,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$18,$00,$0C,$80,$00,$00,$00,$7C,$61
  12+ E144 00 01 18 00
  12+ E148 0C 00 00 00
  12+ E14C 00 00 00 00
  12+ E150 00 00 00 00
  12+ E154 00 00 00 18
  12+ E158 00 0C 80 00
  12+ E15C 00 00 7C 61
  13+ E160 9C 7E 00 00      DB $9C,$7E,$00,$00,$00,$01,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$80,$00,$00,$00,$00,$01
  13+ E164 00 01 00 00
  13+ E168 00 00 00 00
  13+ E16C 00 00 00 00
  13+ E170 00 00 00 00
  13+ E174 00 00 00 00
  13+ E178 00 00 80 00
  13+ E17C 00 00 00 01
  14+ E180 B0 7E 00 00      DB $B0,$7E,$00,$00,$00,$01,$00,$00,$00,$38,$04,$00,$10,$01,$40,$01,$80,$06,$80,$08,$00,$20,$1C,$00,$00,$00,$80,$00,$00,$00,$00,$81
  14+ E184 00 01 00 00
  14+ E188 00 38 04 00
  14+ E18C 10 01 40 01
  14+ E190 80 06 80 08
  14+ E194 00 20 1C 00
  14+ E198 00 00 80 00
  14+ E19C 00 00 00 81
  15+ E1A0 9C 30 00 00      DB $9C,$30,$00,$00,$00,$01,$00,$0C,$00,$40,$00,$10,$00,$04,$00,$11,$88,$00,$20,$00,$08,$00,$02,$00,$30,$00,$80,$00,$00,$00,$00,$81
  15+ E1A4 00 01 00 0C
  15+ E1A8 00 40 00 10
  15+ E1AC 00 04 00 11
  15+ E1B0 88 00 20 00
  15+ E1B4 08 00 02 00
  15+ E1B8 30 00 80 00
  15+ E1BC 00 00 00 81
  16+ E1C0 80 00 00 00      DB $80,$00,$00,$00,$00,$01,$00,$06,$00,$00,$10,$00,$00,$80,$00,$01,$80,$00,$01,$00,$00,$08,$00,$00,$60,$00,$80,$00,$00,$00,$00,$81
  16+ E1C4 00 01 00 06
  16+ E1C8 00 00 10 00
  16+ E1CC 00 80 00 01
  16+ E1D0 80 00 01 00
  16+ E1D4 00 08 00 00
  16+ E1D8 60 00 80 00
  16+ E1DC 00 00 00 81
  17+ E1E0 B8 00 00 00      DB $B8,$00,$00,$00,$00,$01,$00,$00,$00,$01,$E0,$00,$10,$00,$00,$01,$80,$00,$00,$08,$00,$07,$80,$00,$00,$00,$80,$00,$00,$00,$00,$81
  17+ E1E4 00 01 00 00
  17+ E1E8 00 01 E0 00
  17+ E1EC 10 00 00 01
  17+ E1F0 80 00 00 08
  17+ E1F4 00 07 80 00
  17+ E1F8 00 00 80 00
  17+ E1FC 00 00 00 81
  18+ E200 BE 3C 00 00      DB $BE,$3C,$00,$00,$00,$01,$06,$08,$38,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$06,$08,$38,$80,$00,$00,$00,$3C,$79 ; row 3
  18+ E204 00 01 06 08
  18+ E208 38 00 00 00
  18+ E20C 00 00 00 00
  18+ E210 00 00 00 00
  18+ E214 00 00 00 06
  18+ E218 08 38 80 00
  18+ E21C 00 00 3C 79
  19+ E220 B2 C3 80 01      DB $B2,$C3,$80,$01,$00,$03,$55,$55,$55,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$55,$55,$55,$80,$00,$00,$00,$62,$65
  19+ E224 00 03 55 55
  19+ E228 55 00 00 00
  19+ E22C 00 00 00 00
  19+ E230 00 00 00 00
  19+ E234 00 00 00 55
  19+ E238 55 55 80 00
  19+ E23C 00 00 62 65
  20+ E240 B0 66 00 00      DB $B0,$66,$00,$00,$00,$01,$0C,$08,$18,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$0C,$08,$18,$80,$00,$00,$00,$66,$61
  20+ E244 00 01 0C 08
  20+ E248 18 00 00 00
  20+ E24C 00 00 00 00
  20+ E250 00 00 00 00
  20+ E254 00 00 00 0C
  20+ E258 08 18 80 00
  20+ E25C 00 00 66 61
  21+ E260 B2 18 00 00      DB $B2,$18,$00,$00,$00,$01,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$80,$00,$00,$00,$00,$01
  21+ E264 00 01 00 00
  21+ E268 00 00 00 00
  21+ E26C 00 00 00 00
  21+ E270 00 00 00 00
  21+ E274 00 00 00 00
  21+ E278 00 00 80 00
  21+ E27C 00 00 00 01
  22+ E280 B0 18 00 00      DB $B0,$18,$00,$00,$00,$01,$00,$00,$01,$CA,$BA,$AA,$AA,$AA,$EA,$AA,$55,$57,$55,$55,$55,$5D,$53,$80,$00,$00,$80,$00,$00,$00,$00,$99
  22+ E284 00 01 00 00
  22+ E288 01 CA BA AA
  22+ E28C AA AA EA AA
  22+ E290 55 57 55 55
  22+ E294 55 5D 53 80
  22+ E298 00 00 80 00
  22+ E29C 00 00 00 99
  23+ E2A0 B2 30 00 00      DB $B2,$30,$00,$00,$00,$01,$00,$08,$01,$80,$00,$20,$00,$08,$00,$05,$A0,$00,$10,$00,$04,$00,$01,$80,$10,$00,$80,$00,$00,$00,$00,$B9
  23+ E2A4 00 01 00 08
  23+ E2A8 01 80 00 20
  23+ E2AC 00 08 00 05
  23+ E2B0 A0 00 10 00
  23+ E2B4 04 00 01 80
  23+ E2B8 10 00 80 00
  23+ E2BC 00 00 00 B9
  24+ E2C0 80 00 00 00      DB $80,$00,$00,$00,$00,$01,$00,$01,$00,$00,$20,$00,$01,$00,$00,$01,$80,$00,$00,$80,$00,$04,$00,$00,$80,$00,$80,$00,$00,$00,$00,$B9
  24+ E2C4 00 01 00 01
  24+ E2C8 00 00 20 00
  24+ E2CC 01 00 00 01
  24+ E2D0 80 00 00 80
  24+ E2D4 00 04 00 00
  24+ E2D8 80 00 80 00
  24+ E2DC 00 00 00 B9
  25+ E2E0 BF F8 00 00      DB $BF,$F8,$00,$00,$00,$01,$00,$00,$00,$00,$1F,$AA,$AA,$AA,$AA,$AA,$55,$55,$55,$55,$55,$F8,$00,$00,$00,$00,$80,$00,$00,$00,$00,$A9
  25+ E2E4 00 01 00 00
  25+ E2E8 00 00 1F AA
  25+ E2EC AA AA AA AA
  25+ E2F0 55 55 55 55
  25+ E2F4 55 F8 00 00
  25+ E2F8 00 00 80 00
  25+ E2FC 00 00 00 A9
  26+ E300 B0 7E 00 00      DB $B0,$7E,$00,$00,$00,$01,$0E,$08,$18,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$0E,$08,$18,$80,$00,$00,$00,$60,$65 ; row 4
  26+ E304 00 01 0E 08
  26+ E308 18 00 00 00
  26+ E30C 00 00 00 00
  26+ E310 00 00 00 00
  26+ E314 00 00 00 0E
  26+ E318 08 18 80 00
  26+ E31C 00 00 60 65
  27+ E320 BE 66 00 00      DB $BE,$66,$00,$00,$00,$01,$40,$08,$01,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$40,$08,$01,$80,$00,$00,$00,$62,$61
  27+ E324 00 01 40 08
  27+ E328 01 00 00 00
  27+ E32C 00 00 00 00
  27+ E330 00 00 00 00
  27+ E334 00 00 00 40
  27+ E338 08 01 80 00
  27+ E33C 00 00 62 61
  28+ E340 BC 66 00 00      DB $BC,$66,$00,$00,$00,$01,$03,$00,$60,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$03,$00,$60,$80,$00,$00,$00,$66,$61
  28+ E344 00 01 03 00
  28+ E348 60 00 00 00
  28+ E34C 00 00 00 00
  28+ E350 00 00 00 00
  28+ E354 00 00 00 03
  28+ E358 00 60 80 00
  28+ E35C 00 00 66 61
  29+ E360 B0 18 00 00      DB $B0,$18,$00,$00,$00,$01,$00,$00,$00,$00,$00,$00,$00,$0F,$FF,$FF,$FF,$FF,$F0,$00,$00,$00,$00,$00,$00,$00,$80,$00,$00,$00,$00,$01
  29+ E364 00 01 00 00
  29+ E368 00 00 00 00
  29+ E36C 00 0F FF FF
  29+ E370 FF FF F0 00
  29+ E374 00 00 00 00
  29+ E378 00 00 80 00
  29+ E37C 00 00 00 01
  30+ E380 B0 18 00 00      DB $B0,$18,$00,$00,$00,$01,$00,$00,$06,$00,$20,$00,$40,$00,$A0,$01,$80,$05,$00,$02,$00,$04,$00,$60,$00,$00,$80,$00,$00,$00,$00,$B9
  30+ E384 00 01 00 00
  30+ E388 06 00 20 00
  30+ E38C 40 00 A0 01
  30+ E390 80 05 00 02
  30+ E394 00 04 00 60
  30+ E398 00 00 80 00
  30+ E39C 00 00 00 B9
  31+ E3A0 B2 30 00 00      DB $B2,$30,$00,$00,$00,$01,$00,$1A,$AA,$AA,$AA,$EA,$AA,$BA,$AA,$AB,$D5,$55,$5D,$55,$57,$55,$55,$55,$58,$00,$80,$00,$00,$00,$00,$85
  31+ E3A4 00 01 00 1A
  31+ E3A8 AA AA AA EA
  31+ E3AC AA BA AA AB
  31+ E3B0 D5 55 5D 55
  31+ E3B4 57 55 55 55
  31+ E3B8 58 00 80 00
  31+ E3BC 00 00 00 85
  32+ E3C0 80 00 00 00      DB $80,$00,$00,$00,$00,$01,$00,$00,$C0,$00,$40,$00,$01,$00,$00,$01,$80,$00,$00,$80,$00,$02,$00,$03,$00,$00,$80,$00,$00,$00,$00,$85
  32+ E3C4 00 01 00 00
  32+ E3C8 C0 00 40 00
  32+ E3CC 01 00 00 01
  32+ E3D0 80 00 00 80
  32+ E3D4 00 02 00 03
  32+ E3D8 00 00 80 00
  32+ E3DC 00 00 00 85
  33+ E3E0 9F FE 00 00      DB $9F,$FE,$00,$00,$00,$01,$00,$00,$00,$00,$00,$FC,$20,$00,$00,$01,$80,$00,$00,$04,$3F,$00,$00,$00,$00,$00,$80,$00,$00,$00,$00,$A9
  33+ E3E4 00 01 00 00
  33+ E3E8 00 00 00 FC
  33+ E3EC 20 00 00 01
  33+ E3F0 80 00 00 04
  33+ E3F4 3F 00 00 00
  33+ E3F8 00 00 80 00
  33+ E3FC 00 00 00 A9
  34+ E400 BE 66 00 00      DB $BE,$66,$00,$00,$00,$01,$18,$08,$0C,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$18,$08,$0C,$80,$00,$00,$00,$3C,$65 ; row 5
  34+ E404 00 01 18 08
  34+ E408 0C 00 00 00
  34+ E40C 00 00 00 00
  34+ E410 00 00 00 00
  34+ E414 00 00 00 18
  34+ E418 08 0C 80 00
  34+ E41C 00 00 3C 65
  35+ E420 B2 7E 00 00      DB $B2,$7E,$00,$00,$00,$01,$40,$08,$01,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$40,$08,$01,$80,$00,$00,$00,$7C,$61
  35+ E424 00 01 40 08
  35+ E428 01 00 00 00
  35+ E42C 00 00 00 00
  35+ E430 00 00 00 00
  35+ E434 00 00 00 40
  35+ E438 08 01 80 00
  35+ E43C 00 00 7C 61
  36+ E440 B0 66 00 00      DB $B0,$66,$00,$00,$00,$01,$00,$FF,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$FF,$80,$80,$00,$00,$00,$66,$61
  36+ E444 00 01 00 FF
  36+ E448 80 00 00 00
  36+ E44C 00 00 00 00
  36+ E450 00 00 00 00
  36+ E454 00 00 00 00
  36+ E458 FF 80 80 00
  36+ E45C 00 00 66 61
  37+ E460 B0 18 00 00      DB $B0,$18,$00,$00,$00,$01,$00,$00,$00,$00,$00,$00,$3F,$F0,$08,$01,$80,$10,$0F,$FC,$00,$00,$00,$00,$00,$00,$80,$00,$00,$00,$00,$01
  37+ E464 00 01 00 00
  37+ E468 00 00 00 00
  37+ E46C 3F F0 08 01
  37+ E470 80 10 0F FC
  37+ E474 00 00 00 00
  37+ E478 00 00 80 00
  37+ E47C 00 00 00 01
  38+ E480 B0 18 00 00      DB $B0,$18,$00,$00,$00,$01,$00,$00,$18,$00,$C0,$00,$80,$00,$18,$01,$80,$18,$00,$01,$00,$03,$00,$18,$00,$00,$80,$00,$00,$00,$00,$99
  38+ E484 00 01 00 00
  38+ E488 18 00 C0 00
  38+ E48C 80 00 18 01
  38+ E490 80 18 00 01
  38+ E494 00 03 00 18
  38+ E498 00 00 80 00
  38+ E49C 00 00 00 99
  39+ E4A0 BE 30 00 00      DB $BE,$30,$00,$00,$00,$01,$00,$10,$0C,$00,$00,$80,$00,$10,$00,$01,$80,$00,$08,$00,$01,$00,$00,$30,$08,$00,$80,$00,$00,$00,$00,$BD
  39+ E4A4 00 01 00 10
  39+ E4A8 0C 00 00 80
  39+ E4AC 00 10 00 01
  39+ E4B0 80 00 08 00
  39+ E4B4 01 00 00 30
  39+ E4B8 08 00 80 00
  39+ E4BC 00 00 00 BD
  40+ E4C0 80 00 00 00      DB $80,$00,$00,$00,$00,$01,$00,$00,$30,$00,$80,$00,$02,$00,$00,$01,$80,$00,$00,$40,$00,$01,$00,$0C,$00,$00,$80,$00,$00,$00,$00,$BD
  40+ E4C4 00 01 00 00
  40+ E4C8 30 00 80 00
  40+ E4CC 02 00 00 01
  40+ E4D0 80 00 00 40
  40+ E4D4 00 01 00 0C
  40+ E4D8 00 00 80 00
  40+ E4DC 00 00 00 BD
  41+ E4E0 9F FE 00 00      DB $9F,$FE,$00,$00,$00,$01,$00,$00,$00,$00,$00,$03,$FC,$00,$00,$01,$80,$00,$00,$3F,$C0,$00,$00,$00,$00,$00,$80,$00,$00,$00,$00,$BD
  41+ E4E4 00 01 00 00
  41+ E4E8 00 00 00 03
  41+ E4EC FC 00 00 01
  41+ E4F0 80 00 00 3F
  41+ E4F4 C0 00 00 00
  41+ E4F8 00 00 80 00
  41+ E4FC 00 00 00 BD
  42+ E500 B0 C3 80 01      DB $B0,$C3,$80,$01,$00,$03,$30,$08,$06,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$30,$08,$06,$C0,$00,$80,$01,$06,$7D ; row 6
  42+ E504 00 03 30 08
  42+ E508 06 00 00 00
  42+ E50C 00 00 00 00
  42+ E510 00 00 00 00
  42+ E514 00 00 00 30
  42+ E518 08 06 C0 00
  42+ E51C 80 01 06 7D
  43+ E520 B2 3C 00 00      DB $B2,$3C,$00,$00,$00,$01,$40,$00,$01,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$40,$00,$01,$C0,$00,$80,$01,$66,$65
  43+ E524 00 01 40 00
  43+ E528 01 00 00 00
  43+ E52C 00 00 00 00
  43+ E530 00 00 00 00
  43+ E534 00 00 00 40
  43+ E538 00 01 C0 00
  43+ E53C 80 01 66 65
  44+ E540 B0 66 80 01      DB $B0,$66,$80,$01,$00,$03,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$C0,$00,$80,$01,$66,$61
  44+ E544 00 03 00 00
  44+ E548 00 00 00 00
  44+ E54C 00 00 00 00
  44+ E550 00 00 00 00
  44+ E554 00 00 00 00
  44+ E558 00 00 C0 00
  44+ E55C 80 01 66 61
  45+ E560 B2 18 80 01      DB $B2,$18,$80,$01,$00,$03,$00,$00,$00,$00,$00,$1F,$C1,$AA,$AA,$AA,$55,$55,$57,$83,$F8,$00,$00,$00,$00,$00,$80,$00,$00,$00,$00,$01
  45+ E564 00 03 00 00
  45+ E568 00 00 00 1F
  45+ E56C C1 AA AA AA
  45+ E570 55 55 57 83
  45+ E574 F8 00 00 00
  45+ E578 00 00 80 00
  45+ E57C 00 00 00 01
  46+ E580 B0 18 80 01      DB $B0,$18,$80,$01,$00,$03,$00,$00,$60,$01,$00,$01,$00,$01,$04,$01,$80,$20,$80,$00,$80,$00,$80,$06,$00,$00,$80,$00,$00,$00,$00,$99
  46+ E584 00 03 00 00
  46+ E588 60 01 00 01
  46+ E58C 00 01 04 01
  46+ E590 80 20 80 00
  46+ E594 80 00 80 06
  46+ E598 00 00 80 00
  46+ E59C 00 00 00 99
  47+ E5A0 B2 30 80 01      DB $B2,$30,$80,$01,$00,$03,$00,$10,$18,$00,$01,$00,$00,$20,$00,$01,$80,$00,$04,$00,$00,$80,$00,$18,$08,$00,$80,$00,$00,$00,$00,$A1
  47+ E5A4 00 03 00 10
  47+ E5A8 18 00 01 00
  47+ E5AC 00 20 00 01
  47+ E5B0 80 00 04 00
  47+ E5B4 00 80 00 18
  47+ E5B8 08 00 80 00
  47+ E5BC 00 00 00 A1
  48+ E5C0 80 00 00 00      DB $80,$00,$00,$00,$00,$01,$00,$00,$0E,$AB,$AA,$AA,$AE,$AA,$AA,$AA,$55,$55,$55,$75,$55,$55,$D5,$70,$00,$00,$80,$00,$00,$00,$00,$85
  48+ E5C4 00 01 00 00
  48+ E5C8 0E AB AA AA
  48+ E5CC AE AA AA AA
  48+ E5D0 55 55 55 75
  48+ E5D4 55 55 D5 70
  48+ E5D8 00 00 80 00
  48+ E5DC 00 00 00 85
  49+ E5E0 BF F8 00 00      DB $BF,$F8,$00,$00,$00,$01,$00,$00,$00,$00,$00,$00,$03,$FF,$F0,$01,$80,$0F,$FF,$C0,$00,$00,$00,$00,$00,$00,$80,$00,$00,$00,$00,$89
  49+ E5E4 00 01 00 00
  49+ E5E8 00 00 00 00
  49+ E5EC 03 FF F0 01
  49+ E5F0 80 0F FF C0
  49+ E5F4 00 00 00 00
  49+ E5F8 00 00 80 00
  49+ E5FC 00 00 00 89
  50+ E600 B0 C3 92 49      DB $B0,$C3,$92,$49,$24,$93,$20,$08,$02,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$20,$08,$02,$C9,$24,$92,$49,$3C,$61 ; row 7
  50+ E604 24 93 20 08
  50+ E608 02 00 00 00
  50+ E60C 00 00 00 00
  50+ E610 00 00 00 00
  50+ E614 00 00 00 20
  50+ E618 08 02 C9 24
  50+ E61C 92 49 3C 61
  51+ E620 80 00 00 00      DB $80,$00,$00,$00,$00,$01,$60,$08,$02,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$60,$08,$02,$C9,$24,$92,$49,$66,$39
  51+ E624 00 01 60 08
  51+ E628 02 00 00 00
  51+ E62C 00 00 00 00
  51+ E630 00 00 00 00
  51+ E634 00 00 00 60
  51+ E638 08 02 C9 24
  51+ E63C 92 49 66 39
  52+ E640 B0 3C 92 49      DB $B0,$3C,$92,$49,$24,$93,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$C9,$24,$92,$49,$7C,$7D
  52+ E644 24 93 00 00
  52+ E648 00 00 00 00
  52+ E64C 00 00 00 00
  52+ E650 00 00 00 00
  52+ E654 00 00 00 00
  52+ E658 00 00 C9 24
  52+ E65C 92 49 7C 7D
  53+ E660 9C 18 92 49      DB $9C,$18,$92,$49,$24,$93,$00,$00,$00,$00,$03,$E0,$02,$60,$10,$01,$80,$08,$06,$40,$07,$E0,$00,$00,$00,$00,$80,$00,$00,$00,$00,$01
  53+ E664 24 93 00 00
  53+ E668 00 00 03 E0
  53+ E66C 02 60 10 01
  53+ E670 80 08 06 40
  53+ E674 07 E0 00 00
  53+ E678 00 00 80 00
  53+ E67C 00 00 00 01
  54+ E680 BE 18 92 49      DB $BE,$18,$92,$49,$24,$93,$00,$01,$AA,$AE,$AA,$AA,$AA,$AA,$AB,$AA,$55,$D5,$55,$55,$55,$55,$75,$55,$80,$00,$80,$00,$00,$00,$00,$99
  54+ E684 24 93 00 01
  54+ E688 AA AE AA AA
  54+ E68C AA AA AB AA
  54+ E690 55 D5 55 55
  54+ E694 55 55 75 55
  54+ E698 80 00 80 00
  54+ E69C 00 00 00 99
  55+ E6A0 B2 3E 92 49      DB $B2,$3E,$92,$49,$24,$93,$00,$10,$60,$00,$02,$00,$00,$20,$00,$01,$80,$00,$04,$00,$00,$40,$00,$06,$08,$00,$80,$00,$00,$00,$00,$BD
  55+ E6A4 24 93 00 10
  55+ E6A8 60 00 02 00
  55+ E6AC 00 20 00 01
  55+ E6B0 80 00 04 00
  55+ E6B4 00 40 00 06
  55+ E6B8 08 00 80 00
  55+ E6BC 00 00 00 BD
  56+ E6C0 80 00 00 00      DB $80,$00,$00,$00,$00,$01,$00,$00,$03,$02,$00,$00,$04,$00,$00,$01,$80,$00,$00,$20,$00,$00,$00,$C0,$00,$00,$80,$00,$00,$00,$00,$B9
  56+ E6C4 00 01 00 00
  56+ E6C8 03 02 00 00
  56+ E6CC 04 00 00 01
  56+ E6D0 80 00 00 20
  56+ E6D4 00 00 00 C0
  56+ E6D8 00 00 80 00
  56+ E6DC 00 00 00 B9
  57+ E6E0 B8 00 00 00      DB $B8,$00,$00,$00,$00,$01,$00,$00,$00,$00,$00,$00,$00,$00,$0F,$FF,$FF,$F0,$00,$00,$00,$00,$00,$00,$00,$00,$80,$00,$00,$00,$00,$89
  57+ E6E4 00 01 00 00
  57+ E6E8 00 00 00 00
  57+ E6EC 00 00 0F FF
  57+ E6F0 FF F0 00 00
  57+ E6F4 00 00 00 00
  57+ E6F8 00 00 80 00
  57+ E6FC 00 00 00 89
  58+ E700 80 C3 FF FF      DB $80,$C3,$FF,$FF,$FF,$FF,$60,$08,$03,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$60,$08,$03,$FF,$FF,$FF,$FF,$00,$61 ; row 8
  58+ E704 FF FF 60 08
  58+ E708 03 00 00 00
  58+ E70C 00 00 00 00
  58+ E710 00 00 00 00
  58+ E714 00 00 00 60
  58+ E718 08 03 FF FF
  58+ E71C FF FF 00 61
  59+ E720 FF FF FF FF      DB $FF,$FF,$FF,$FF,$FF,$FF,$20,$00,$02,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$20,$00,$02,$FF,$FF,$FF,$FF,$00,$01
  59+ E724 FF FF 20 00
  59+ E728 02 00 00 00
  59+ E72C 00 00 00 00
  59+ E730 00 00 00 00
  59+ E734 00 00 00 20
  59+ E738 00 02 FF FF
  59+ E73C FF FF 00 01
  60+ E740 80 00 FF FF      DB $80,$00,$FF,$FF,$FF,$FF,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$FF,$FF,$FF,$FF,$00,$01
  60+ E744 FF FF 00 00
  60+ E748 00 00 00 00
  60+ E74C 00 00 00 00
  60+ E750 00 00 00 00
  60+ E754 00 00 00 00
  60+ E758 00 00 FF FF
  60+ E75C FF FF 00 01
  61+ E760 80 00 FF FF      DB $80,$00,$FF,$FF,$FF,$FF,$00,$00,$00,$00,$7D,$8A,$AE,$BA,$AA,$AA,$55,$55,$5D,$75,$51,$BE,$00,$00,$00,$00,$80,$00,$00,$00,$00,$01
  61+ E764 FF FF 00 00
  61+ E768 00 00 7D 8A
  61+ E76C AE BA AA AA
  61+ E770 55 55 5D 75
  61+ E774 51 BE 00 00
  61+ E778 00 00 80 00
  61+ E77C 00 00 00 01
  62+ E780 80 00 FF FF      DB $80,$00,$FF,$FF,$FF,$FF,$00,$03,$00,$08,$00,$04,$00,$02,$00,$81,$81,$00,$40,$00,$20,$00,$10,$00,$C0,$00,$FF,$FF,$FF,$FF,$FF,$FF
  62+ E784 FF FF 00 03
  62+ E788 00 08 00 04
  62+ E78C 00 02 00 81
  62+ E790 81 00 40 00
  62+ E794 20 00 10 00
  62+ E798 C0 00 FF FF
  62+ E79C FF FF FF FF
  63+ E7A0 80 00 FF FF      DB $80,$00,$FF,$FF,$FF,$FF,$00,$08,$C0,$00,$04,$00,$00,$40,$00,$01,$80,$00,$02,$00,$00,$20,$00,$03,$10,$00,$FF,$FF,$FF,$FF,$FF,$FF
  63+ E7A4 FF FF 00 08
  63+ E7A8 C0 00 04 00
  63+ E7AC 00 40 00 01
  63+ E7B0 80 00 02 00
  63+ E7B4 00 20 00 03
  63+ E7B8 10 00 FF FF
  63+ E7BC FF FF FF FF
  64+ E7C0 80 00 00 00      DB $80,$00,$00,$00,$00,$01,$00,$00,$00,$E4,$00,$00,$08,$00,$00,$01,$80,$00,$00,$10,$00,$00,$27,$00,$00,$00,$FF,$FF,$FF,$FF,$FF,$FF
  64+ E7C4 00 01 00 00
  64+ E7C8 00 E4 00 00
  64+ E7CC 08 00 00 01
  64+ E7D0 80 00 00 10
  64+ E7D4 00 00 27 00
  64+ E7D8 00 00 FF FF
  64+ E7DC FF FF FF FF
  65+ E7E0 FF FF FF FF      DB $FF,$FF,$FF,$FF,$FF,$FF,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$FF,$FF,$FF,$FF,$FF,$FF
  65+ E7E4 FF FF 00 00
  65+ E7E8 00 00 00 00
  65+ E7EC 00 00 00 00
  65+ E7F0 00 00 00 00
  65+ E7F4 00 00 00 00
  65+ E7F8 00 00 FF FF
  65+ E7FC FF FF FF FF
  66+ E800              ConsoleAttributes:
  67+ E800 07 07 07 07      DB $07,$07,$07,$07,$07,$07,$45,$45,$45,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$41,$41,$41,$07,$07,$07,$07,$07,$07
  67+ E804 07 07 45 45
  67+ E808 45 00 00 00
  67+ E80C 00 00 00 00
  67+ E810 00 00 00 00
  67+ E814 00 00 00 41
  67+ E818 41 41 07 07
  67+ E81C 07 07 07 07
  68+ E820 07 07 07 07      DB $07,$07,$07,$07,$07,$07,$05,$45,$05,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$01,$41,$01,$07,$07,$07,$07,$07,$07
  68+ E824 07 07 05 45
  68+ E828 05 00 00 00
  68+ E82C 00 00 00 00
  68+ E830 00 00 00 00
  68+ E834 00 00 00 01
  68+ E838 41 01 07 07
  68+ E83C 07 07 07 07
  69+ E840 07 07 07 07      DB $07,$07,$07,$07,$07,$07,$45,$45,$45,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$41,$41,$41,$07,$07,$07,$07,$07,$07
  69+ E844 07 07 45 45
  69+ E848 45 00 00 00
  69+ E84C 00 00 00 00
  69+ E850 00 00 00 00
  69+ E854 00 00 00 41
  69+ E858 41 41 07 07
  69+ E85C 07 07 07 07
  70+ E860 07 07 07 07      DB $07,$07,$07,$07,$07,$07,$00,$00,$00,$00,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$00,$00,$00,$00,$07,$00,$00,$00,$00,$07
  70+ E864 07 07 00 00
  70+ E868 00 00 42 42
  70+ E86C 42 42 42 42
  70+ E870 42 42 42 42
  70+ E874 42 42 00 00
  70+ E878 00 00 07 00
  70+ E87C 00 00 00 07
  71+ E880 07 07 07 07      DB $07,$07,$07,$07,$07,$07,$00,$02,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$02,$00,$07,$07,$07,$07,$07,$07
  71+ E884 07 07 00 02
  71+ E888 42 42 42 42
  71+ E88C 42 42 42 42
  71+ E890 42 42 42 42
  71+ E894 42 42 42 42
  71+ E898 02 00 07 07
  71+ E89C 07 07 07 07
  72+ E8A0 07 07 07 07      DB $07,$07,$07,$07,$07,$07,$00,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$00,$07,$07,$07,$07,$07,$07
  72+ E8A4 07 07 00 02
  72+ E8A8 02 02 02 02
  72+ E8AC 02 02 02 02
  72+ E8B0 02 02 02 02
  72+ E8B4 02 02 02 02
  72+ E8B8 02 00 07 07
  72+ E8BC 07 07 07 07
  73+ E8C0 07 00 00 00      DB $07,$00,$00,$00,$00,$07,$00,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$00,$07,$07,$07,$07,$07,$07
  73+ E8C4 00 07 00 02
  73+ E8C8 02 02 02 02
  73+ E8CC 02 02 02 02
  73+ E8D0 02 02 02 02
  73+ E8D4 02 02 02 02
  73+ E8D8 02 00 07 07
  73+ E8DC 07 07 07 07
  74+ E8E0 07 07 07 07      DB $07,$07,$07,$07,$07,$07,$00,$00,$00,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$00,$00,$00,$07,$07,$07,$07,$07,$07
  74+ E8E4 07 07 00 00
  74+ E8E8 00 02 02 02
  74+ E8EC 02 02 02 02
  74+ E8F0 02 02 02 02
  74+ E8F4 02 02 02 00
  74+ E8F8 00 00 07 07
  74+ E8FC 07 07 07 07
  75+ E900
  76+ E900
# file closed: ./Images/ConsoleImageData.asm
 878  E900              ; Bank 62  ------------------------------------------------------------------------------------------------------------------------
 879  E900                  SLOT    ViewFrontAddr
 880  E900                  PAGE    BankFrontView
 881  E900                  ORG     ViewFrontAddr
 882  C000                  INCLUDE "./Views/Front_View.asm"
# file opened: ./Views/Front_View.asm
   1+ C000 46 72 6F 6E  front_page_page_marker  DB "FrontView   PG62"
   1+ C004 74 56 69 65
   1+ C008 77 20 20 20
   1+ C00C 50 47 36 32
   2+ C010
   3+ C010 47           draw_front_calc_alpha:  ld      b,a
   4+ C011 E6 80                                and     $80
   5+ C013 32 F7 9C                             ld      (ALP2),a                            ; set sign
   6+ C016 4F                                   ld      c,a                                 ; save sign
   7+ C017 EE 80                                xor     $80
   8+ C019 32 F8 9C                             ld      (ALP2FLIP),a                        ; and oppsite sign
   9+ C01C 3A F3 9C                             ld      a,(JSTX)
  10+ C01F ED 27 80                             test    $80
  11+ C022 28 02                                jr      z,  .PositiveRoll
  12+ C024 ED 44        .NegativeRoll:          neg
  13+ C026 CB 3F        .PositiveRoll           srl     a                                   ; divide sign by 4
  14+ C028 CB 3F                                srl     a
  15+ C02A FE 08                                cp      8
  16+ C02C 38 02                                jr      c,.NotIncreasedDamp                 ; if a < 8 divide by 2 again
  17+ C02E CB 3F        .IncreasedDamp          srl     a
  18+ C030 32 F6 9C     .NotIncreasedDamp:      ld      (ALP1),a
  19+ C033 B1                                   or      c
  20+ C034 32 F5 9C                             ld      (ALPHA),a                           ; a = signed bit alph1
  21+ C037 21 CD C2     .RestartDampenRoll:     ld      hl,dampenRcounter
  22+ C03A 36 04                                ld      (hl),dampenRate
  23+ C03C C9                                   ret
  24+ C03D
  25+ C03D              ; Do the same for pitch
  26+ C03D 47           draw_front_calc_beta:   ld      b,a
  27+ C03E E6 80                                and     $80
  28+ C040 32 EB 9C                             ld      (BET2),a                            ; set sign
  29+ C043 4F                                   ld      c,a                                 ; save sign
  30+ C044 EE 80                                xor     $80
  31+ C046 32 EC 9C                             ld      (BET2FLIP),a                        ; and oppsite sign
  32+ C049 3A E9 9C                             ld      a,(JSTY)
  33+ C04C ED 27 80                             test    $80
  34+ C04F 28 02                                jr      z,  .PositivePitch
  35+ C051 ED 44        .NegativePitch:         neg
  36+ C053 CB 3F        .PositivePitch:         srl     a                                   ; divide sign by 4
  37+ C055 CB 3F                                srl     a
  38+ C057 FE 08                                cp      8
  39+ C059 38 02                                jr      c,.NotIncreasedDamp                 ; if a < 8 divide by 2 again
  40+ C05B CB 3F        .IncreasedDamp          srl     a
  41+ C05D 32 EA 9C     .NotIncreasedDamp:      ld      (BET1),a
  42+ C060 B1                                   or      c
  43+ C061 32 E8 9C                             ld      (BETA),a                            ; a = signed bit bet1
  44+ C064 21 CE C2     .RestartDampenPitch:    ld      hl,dampenPcounter          ; TODO mach dampen rates ship properies by having teh $20 as a ship config
  45+ C067 36 04                                ld      (hl),dampenRate
  46+ C069 C9                                   ret
  47+ C06A
  48+ C06A              draw_front_view:        MMUSelectLayer1
  48+ C06A ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
  49+ C06E CD 80 E0                             call    l1_cls
  50+ C071 CD 9A E0                             call    l1_attr_cls
  51+ C074                                      MMUSelectLayer2
  51+ C074 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
  52+ C078 CD 03 E0                             call     asm_l2_double_buffer_on
  53+ C07B                                      MMUSelectSpriteBank
  53+ C07B ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
  54+ C07F CD A4 E4                             call    sprite_cls_cursors
  55+ C082 CD 29 E1                             call    sprite_reticule
  56+ C085 CD B8 E1                             call    sprite_laser
  57+ C088 CD 88 E3                             call    sprite_targetting
  58+ C08B CD BA E3                             call    sprite_lock
  59+ C08E CD EC E3                             call    sprite_targetting_hide      ; do not show targeting initially
  60+ C091                                     ; call    sprite_laser_show
  61+ C091                                      MMUSelectConsoleBank
  61+ C091 ED 91 57 3D >					 nextreg ConsoleImageDataMMU,  BankConsole
  62+ C095 21 00 50                             ld          hl,ScreenL1Bottom       ; now the pointers are in Ubnk its easy to read
  63+ C098 11 00 E0                             ld          de,ConsoleImageData
  64+ C09B 01 00 08                             ld          bc, ScreenL1BottomLen
  65+ C09E CD CB 99                             call        memcopy_dma
  66+ C0A1 21 00 5A                             ld          hl,ScreenL1AttrBtm       ; now the pointers are in Ubnk its easy to read
  67+ C0A4 11 00 E8                             ld          de,ConsoleAttributes
  68+ C0A7 01 00 01                             ld          bc, ScreenL1AttrBtmLen
  69+ C0AA CD CB 99                             call        memcopy_dma
  70+ C0AD CD 9A 97                             call        InitialiseStars
  71+ C0B0 AF                                   xor         a
  72+ C0B1 32 EE 9D                             ld          (DockedFlag),a              ; we can never be docked if we hit a view screen
  73+ C0B4 32 BB C0                             ld          (CurrentLock),a             ; we are on no targetting sprites
  74+ C0B7 32 BC C0                             ld          (ShowingLock),a
  75+ C0BA C9                                   ret
  76+ C0BB
  77+ C0BB 00           CurrentLock             DB      0
  78+ C0BC 00           ShowingLock             DB      0
  79+ C0BD 3A DF A0     update_front_view:      ld      a,(MissileTargettingFlag)
  80+ C0C0                                      JumpIfANEquNusng StageMissileNoTarget,  .NoTarget
  80+ C0C0 FE FF       >                        cp     StageMissileNoTarget
  80+ C0C2 CA D2 C0    >                        jp     z,.NoTarget
  81+ C0C5                                      JumpIfANEquNusng StageMissileTargeting, .Targetting
  81+ C0C5 FE FE       >                        cp     StageMissileTargeting
  81+ C0C7 CA DF C0    >                        jp     z,.Targetting
  82+ C0CA CB 7F                                bit     7,a
  83+ C0CC 20 26                                jr      nz, .Locked
  84+ C0CE CD EC E3                             call    sprite_targetting_hide
  85+ C0D1 C9                                   ret
  86+ C0D2 3A BC C0     .NoTarget:              ld      a,(ShowingLock)
  87+ C0D5                                      ReturnIfAIsZero
  87+ C0D5 A7          >                        and     a
  87+ C0D6 C8          >                        ret     z
  88+ C0D7                                      MMUSelectSpriteBank
  88+ C0D7 ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
  89+ C0DB CD EC E3                             call     sprite_targetting_hide
  90+ C0DE C9                                   ret
  91+ C0DF              .Targetting:            CallIfMemZero CurrentLock, sprite_targetting
  91+ C0DF 3A BB C0    >                        ld      a,(CurrentLock)
  91+ C0E2 A7          >                        and     a
  91+ C0E3 CC 88 E3    >                        call    z, sprite_targetting
  92+ C0E6                                      CallIfMemZero ShowingLock, sprite_targetting_show
  92+ C0E6 3A BC C0    >                        ld      a,(ShowingLock)
  92+ C0E9 A7          >                        and     a
  92+ C0EA CC FD E3    >                        call    z, sprite_targetting_show
  93+ C0ED 21 00 01                             ld      hl,$0100                        ; set both bytes in one go
  94+ C0F0 22 BB C0                             ld      (CurrentLock),hl
  95+ C0F3 C9                                   ret
  96+ C0F4              .Locked:                CallIfMemNotZero CurrentLock, sprite_lock
  96+ C0F4 3A BB C0    >                        ld      a,(CurrentLock)
  96+ C0F7 A7          >                        and     a
  96+ C0F8 C4 BA E3    >                        call    nz, sprite_lock
  97+ C0FB                                      CallIfMemZero ShowingLock, sprite_targetting_show
  97+ C0FB 3A BC C0    >                        ld      a,(ShowingLock)
  97+ C0FE A7          >                        and     a
  97+ C0FF CC FD E3    >                        call    z, sprite_targetting_show
  98+ C102 21 01 01                             ld      hl,$0101                        ; set both bytes in one go
  99+ C105 22 BB C0                             ld      (CurrentLock),hl
 100+ C108 C9                                   ret
 101+ C109
 102+ C109                                      ;  1......................  2......................  3......................  4......................  5......................  6...................... 7......................  8......................
 103+ C109                                      ;  1......................  2......................  3......................  4......................  5......................  6...................... 7......................  8......................
 104+ C109 80 40 60 28  LightningLines:         db 128, 064, 096, 040, 255, 097, 042, 076, 035, 031, 082, 039, 079, 020, 026, 079, 026, 058, 018, 022, 064, 021, 032, 026, 018, 038, 025, 030, 009, 026, 035, 020, 005, 016, 018, 037, 021, 000, 000, 018
 104+ C10D FF 61 2A 4C
 104+ C111 23 1F 52 27
 104+ C115 4F 14 1A 4F
 104+ C119 1A 3A 12 16
 104+ C11D 40 15 20 1A
 104+ C121 12 26 19 1E
 104+ C125 09 1A 23 14
 104+ C129 05 10 12 25
 104+ C12D 15 00 00 12
 105+ C131 80 40 8B 28                          db 128, 064, 139, 040, 255, 137, 045, 160, 035, 031, 150, 040, 157, 056, 026, 160, 036, 175, 010, 022, 156, 037, 196, 040, 018, 197, 041, 223, 033, 026, 223, 033, 245, 030, 018, 223, 032, 254, 047, 018
 105+ C135 FF 89 2D A0
 105+ C139 23 1F 96 28
 105+ C13D 9D 38 1A A0
 105+ C141 24 AF 0A 16
 105+ C145 9C 25 C4 28
 105+ C149 12 C5 29 DF
 105+ C14D 21 1A DF 21
 105+ C151 F5 1E 12 DF
 105+ C155 20 FE 2F 12
 106+ C159 80 40 5A 59                          db 128, 064, 090, 089, 255, 089, 089, 064, 098, 031, 079, 092, 064, 072, 025, 065, 075, 030, 070, 022, 035, 071, 038, 064, 018, 067, 095, 021, 099, 026, 031, 097, 000, 080, 018, 031, 097, 021, 110, 018
 106+ C15D FF 59 59 40
 106+ C161 62 1F 4F 5C
 106+ C165 40 48 19 41
 106+ C169 4B 1E 46 16
 106+ C16D 23 47 26 40
 106+ C171 12 43 5F 15
 106+ C175 63 1A 1F 61
 106+ C179 00 50 12 1F
 106+ C17D 61 15 6E 12
 107+ C181 80 40 61 71                          db 128, 064, 097, 113, 255, 098, 110, 064, 115, 031, 070, 115, 073, 127, 025, 071, 114, 060, 112, 022, 030, 120, 020, 126, 018, 070, 114, 050, 120, 026, 050, 120, 027, 119, 018, 020, 125, 010, 120, 018
 107+ C185 FF 62 6E 40
 107+ C189 73 1F 46 73
 107+ C18D 49 7F 19 47
 107+ C191 72 3C 70 16
 107+ C195 1E 78 14 7E
 107+ C199 12 46 72 32
 107+ C19D 78 1A 32 78
 107+ C1A1 1B 77 12 14
 107+ C1A5 7D 0A 78 12
 108+ C1A9 80 40 84 59                          db 128, 064, 132, 089, 255, 131, 081, 145, 098, 031, 145, 097, 133, 103, 025, 145, 098, 150, 110, 022, 150, 109, 154, 105, 018, 150, 110, 146, 120, 026, 145, 120, 140, 126, 018, 147, 120, 159, 126, 018
 108+ C1AD FF 83 51 91
 108+ C1B1 62 1F 91 61
 108+ C1B5 85 67 19 91
 108+ C1B9 62 96 6E 16
 108+ C1BD 96 6D 9A 69
 108+ C1C1 12 96 6E 92
 108+ C1C5 78 1A 91 78
 108+ C1C9 8C 7E 12 93
 108+ C1CD 78 9F 7E 12
 109+ C1D1 80 40 9F 67                          db 128, 064, 159, 103, 255, 161, 102, 171, 108, 031, 160, 102, 175, 127, 025, 175, 124, 200, 122, 022, 200, 121, 223, 120, 018, 224, 120, 225, 127, 026, 224, 119, 245, 116, 018, 246, 117, 254, 123, 018
 109+ C1D5 FF A1 66 AB
 109+ C1D9 6C 1F A0 66
 109+ C1DD AF 7F 19 AF
 109+ C1E1 7C C8 7A 16
 109+ C1E5 C8 79 DF 78
 109+ C1E9 12 E0 78 E1
 109+ C1ED 7F 1A E0 77
 109+ C1F1 F5 74 12 F6
 109+ C1F5 75 FE 7B 12
 110+ C1F9 80 40 91 4A                          db 128, 064, 145, 074, 255, 145, 073, 158, 072, 031, 159, 072, 179, 064, 025, 159, 073, 185, 085, 022, 182, 084, 197, 076, 018, 195, 075, 207, 079, 026, 206, 079, 245, 063, 018, 206, 080, 245, 105, 018
 110+ C1FD FF 91 49 9E
 110+ C201 48 1F 9F 48
 110+ C205 B3 40 19 9F
 110+ C209 49 B9 55 16
 110+ C20D B6 54 C5 4C
 110+ C211 12 C3 4B CF
 110+ C215 4F 1A CE 4F
 110+ C219 F5 3F 12 CE
 110+ C21D 50 F5 69 12
 111+ C221
 112+ C221              ; Draw line at hl for b lines
 113+ C221 E5 C5        DrawLighningLine:       push    hl,,bc
 114+ C223 4E                                   ld      c,(hl)
 115+ C224 23                                   inc     hl
 116+ C225 46                                   ld      b,(hl)
 117+ C226 23                                   inc     hl
 118+ C227 5E                                   ld      e,(hl)
 119+ C228 23                                   inc     hl
 120+ C229 56                                   ld      d,(hl)
 121+ C22A 23                                   inc     hl
 122+ C22B 7E                                   ld      a,(hl)          ; colour
 123+ C22C CD 5E E6                             call    l2_draw_diagonal
 124+ C22F C1 E1                                pop     hl,,bc
 125+ C231 3E 05                                ld      a,5
 126+ C233 ED 31                                add     hl,a
 127+ C235 10 EA                                djnz    DrawLighningLine
 128+ C237 C9                                   ret
 129+ C238
 130+ C238              ;Loop though all lines
 131+ C238              ;   60$% chance of drawing a line, call draw line
 132+ C238              ;   go to next line
 133+ C238              ;repeat
 134+ C238 06 07        hyperspace_Lightning:   ld      b, 7                    ; total number of lightning bolts
 135+ C23A 21 09 C1                             ld      hl,LightningLines
 136+ C23D                                      MMUSelectLayer2
 136+ C23D ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 137+ C241                                      ;break
 138+ C241              ; above here select which lines table we will use
 139+ C241 C5 E5        .LineLoop:              push    bc,,hl
 140+ C243 CD 7C A3                             call    doRandom
 141+ C246 FE 1E                                cp      30
 142+ C248 30 0C                                jr      nc,.NextLine
 143+ C24A CD 7C A3                             call    doRandom
 144+ C24D E6 07                                and     $07
 145+ C24F 3C                                   inc     a
 146+ C250 47                                   ld      b,a
 147+ C251 E1                                   pop     hl
 148+ C252 E5                                   push    hl
 149+ C253 CD 21 C2                             call    DrawLighningLine
 150+ C256 E1 C1        .NextLine:              pop     bc,,hl
 151+ C258 16 08                                ld      d,8
 152+ C25A 1E 05                                ld      e,5
 153+ C25C ED 30                                mul
 154+ C25E 19                                   add     hl,de
 155+ C25F 10 E0                                djnz    .LineLoop
 156+ C261 3A A8 9E                             ld      a,(HyperCircle)
 157+ C264 57                                   ld      d,a
 158+ C265 01 80 40                             ld      bc, $4080
 159+ C268                                      ;break
 160+ C268 1E 00                                ld      e,$00
 161+ C26A CD EF E9                             call    l2_draw_circle_fill; ; ">l2_draw_circle_fill BC = center row col, d = radius, e = colour"
 162+ C26D 01 80 40                             ld      bc, $4080
 163+ C270 3A A8 9E                             ld      a,(HyperCircle)
 164+ C273 3C                                   inc     a
 165+ C274 57                                   ld      d,a
 166+ C275 1E FF                                ld      e,$FF
 167+ C277 CD AB E7                             call    l2_draw_circle
 168+ C27A 3A A8 9E                             ld      a,(HyperCircle)
 169+ C27D 3C                                   inc     a
 170+ C27E 3C                                   inc     a
 171+ C27F FE 40                                cp      64
 172+ C281 D0                                   ret     nc
 173+ C282 32 A8 9E                             ld      (HyperCircle),a
 174+ C285                                      SetCarryFlag
 174+ C285 37          >                        scf
 175+ C286 C9                                   ret
 176+ C287
 177+ C287
 178+ C287              draw_hyperspace:        MMUSelectLayer1
 178+ C287 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 179+ C28B CD 80 E0                             call    l1_cls
 180+ C28E CD 9A E0                             call    l1_attr_cls
 181+ C291                                      MMUSelectLayer2
 181+ C291 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 182+ C295 CD 03 E0                             call     asm_l2_double_buffer_on
 183+ C298                                      MMUSelectSpriteBank
 183+ C298 ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
 184+ C29C CD A4 E4                             call    sprite_cls_cursors
 185+ C29F                                      MMUSelectConsoleBank
 185+ C29F ED 91 57 3D >					 nextreg ConsoleImageDataMMU,  BankConsole
 186+ C2A3 21 00 50                             ld          hl,ScreenL1Bottom       ; now the pointers are in Ubnk its easy to read
 187+ C2A6 11 00 E0                             ld          de,ConsoleImageData
 188+ C2A9 01 00 08                             ld          bc, ScreenL1BottomLen
 189+ C2AC CD CB 99                             call        memcopy_dma
 190+ C2AF 21 00 5A                             ld          hl,ScreenL1AttrBtm       ; now the pointers are in Ubnk its easy to read
 191+ C2B2 11 00 E8                             ld          de,ConsoleAttributes
 192+ C2B5 01 00 01                             ld          bc, ScreenL1AttrBtmLen
 193+ C2B8 CD CB 99                             call        memcopy_dma
 194+ C2BB CD A5 97                             call        InitialiseHyperStars
 195+ C2BE AF                                   xor         a
 196+ C2BF 32 EE 9D                             ld          (DockedFlag),a              ; we can never be docked if we hit a view screen
 197+ C2C2 3E 02                                ld          a,2
 198+ C2C4 32 A8 9E                             ld          (HyperCircle),a
 199+ C2C7 3E FC                                ld          a,$FC
 200+ C2C9 32 EE 9D                             ld          (DockedFlag),a
 201+ C2CC C9                                   ret
 202+ C2CD
 203+ C2CD
 204+ C2CD              loop_hyperspace
 205+ C2CD
 206+ C2CD              dampenRate:             equ     $04
 207+ C2CD 04           dampenRcounter:         DB      dampenRate
 208+ C2CE 04           dampenPcounter:         DB      dampenRate
 209+ C2CF AF           input_front_view:       xor         a
 210+ C2D0 2A 37 9A                             ld      hl,(addr_Pressed_Accellerate)
 211+ C2D3 7E                                   ld      a,(hl)
 212+ C2D4                                      JumpIfAIsZero     .TestDecellerate
 212+ C2D4 A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
 212+ C2D5 CA F1 C2    >                        jp	    z, .TestDecellerate
 213+ C2D8 3A DA 9D                             ld      a,(SHIPMAXSPEED)
 214+ C2DB 57                                   ld      d,a
 215+ C2DC 3A DB 9D                             ld      a,(DELTA)
 216+ C2DF                                      JumpIfAGTENusng d,.TestDecellerate
 216+ C2DF BA          >                        cp     d
 216+ C2E0 D2 F1 C2    >                        jp		nc,.TestDecellerate
 217+ C2E3 3C                                   inc     a
 218+ C2E4 32 DB 9D                             ld      (DELTA),a
 219+ C2E7 2A DC 9D                             ld      hl,(DELT4Lo)
 220+ C2EA ED 34 04 00                          add     hl,4
 221+ C2EE 22 DC 9D                             ld      (DELT4Lo),hl
 222+ C2F1 2A 39 9A     .TestDecellerate:       ld      hl,(addr_Pressed_Decellerate)
 223+ C2F4 7E                                   ld      a,(hl)
 224+ C2F5                                      JumpIfAIsZero   .TestLeftPressed
 224+ C2F5 A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
 224+ C2F6 CA 0E C3    >                        jp	    z, .TestLeftPressed
 225+ C2F9 3A DB 9D                             ld      a,(DELTA)
 226+ C2FC                                      JumpIfAIsZero   .TestLeftPressed
 226+ C2FC A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
 226+ C2FD CA 0E C3    >                        jp	    z, .TestLeftPressed
 227+ C300 3D                                   dec     a
 228+ C301 32 DB 9D                             ld      (DELTA),a
 229+ C304 2A DC 9D                             ld      hl,(DELT4Lo)
 230+ C307 2B                                   dec     hl
 231+ C308 2B                                   dec     hl
 232+ C309 2B                                   dec     hl
 233+ C30A 2B                                   dec     hl
 234+ C30B 22 DC 9D                             ld      (DELT4Lo),hl
 235+ C30E 2A 2F 9A     .TestLeftPressed:       ld      hl,(addr_Pressed_RollLeft)
 236+ C311 7E                                   ld      a,(hl)
 237+ C312                                      JumpIfAIsZero   .TestRightPressed
 237+ C312 A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
 237+ C313 CA 29 C3    >                        jp	    z, .TestRightPressed
 238+ C316 3A F3 9C                             ld      a,(JSTX)                            ; have we maxed out Joystick?
 239+ C319 21 FA 9C                             ld      hl,ALP1MAXL                         ; currnet ship max left roll
 240+ C31C BE                                   cp      (hl)
 241+ C31D 28 0A                                jr      z,.TestRightPressed
 242+ C31F                                      ;break
 243+ C31F 3D                                   dec     a                                   ; increase joystick roll
 244+ C320 32 F3 9C                             ld      (JSTX),a
 245+ C323 CD 10 C0                             call    draw_front_calc_alpha
 246+ C326 C3 5E C3                             jp      .TestDivePressed                    ; when pressing ignore damper
 247+ C329 2A 31 9A     .TestRightPressed:       ld      hl,(addr_Pressed_RollRight)
 248+ C32C 7E                                   ld      a,(hl)
 249+ C32D                                      JumpIfAIsZero   .DampenRoll
 249+ C32D A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
 249+ C32E CA 44 C3    >                        jp	    z, .DampenRoll
 250+ C331 3A F3 9C                             ld      a,(JSTX)                            ; have we maxed out Joystick?
 251+ C334 21 F9 9C                             ld      hl,ALP1MAXR                         ; currnet ship max left roll
 252+ C337 BE                                   cp      (hl)
 253+ C338 28 24                                jr      z,.TestDivePressed                   ; if its held then we don't dampen
 254+ C33A                                      ;break
 255+ C33A 3C                                   inc     a                                   ; increase joystick roll
 256+ C33B 32 F3 9C     .UpdateAlphRoll:        ld      (JSTX),a
 257+ C33E CD 10 C0                             call    draw_front_calc_alpha
 258+ C341 C3 5E C3                             jp      .TestDivePressed                    ; when pressing ignore damper
 259+ C344 21 CD C2     .DampenRoll:            ld      hl,dampenRcounter
 260+ C347 35                                   dec     (hl)
 261+ C348 20 14                                jr      nz,.TestDivePressed
 262+ C34A 3E 04                                ld      a,dampenRate
 263+ C34C 77                                   ld      (hl),a
 264+ C34D 3A F3 9C                             ld      a,(JSTX)
 265+ C350 FE 00                                cp      0
 266+ C352 28 0A                                jr      z, .TestDivePressed
 267+ C354 CB 7F                                bit     7,a
 268+ C356 28 03                                jr      z,.PosRollDampen
 269+ C358 3C           .NegRollDampen:         inc     a
 270+ C359 18 01                                jr      .ApplyRollDampen
 271+ C35B 3D           .PosRollDampen:         dec     a
 272+ C35C 18 DD        .ApplyRollDampen:       jr      .UpdateAlphRoll
 273+ C35E              ; Dive and Climb input
 274+ C35E 2A 33 9A     .TestDivePressed:       ld      hl,(addr_Pressed_Dive)
 275+ C361 7E                                   ld      a,(hl)
 276+ C362                                      JumpIfAIsZero   .TestClimbPressed
 276+ C362 A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
 276+ C363 CA 79 C3    >                        jp	    z, .TestClimbPressed
 277+ C366 3A E9 9C                             ld      a,(JSTY)                            ; have we maxed out Joystick?
 278+ C369 21 EE 9C                             ld      hl,BET1MAXD                         ; currnet ship max left roll
 279+ C36C BE                                   cp      (hl)
 280+ C36D 28 0A                                jr      z,.TestClimbPressed
 281+ C36F                                      ;break
 282+ C36F 3D                                   dec     a                                   ; increase joystick roll
 283+ C370 32 E9 9C                             ld      (JSTY),a
 284+ C373 CD 3D C0                             call    draw_front_calc_beta
 285+ C376 C3 AE C3                             jp      .ForwardCursorKeysDone
 286+ C379 2A 35 9A     .TestClimbPressed:      ld      hl,(addr_Pressed_Climb)
 287+ C37C 7E                                   ld      a,(hl)
 288+ C37D                                      JumpIfAIsZero   .DampenPitch
 288+ C37D A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
 288+ C37E CA 94 C3    >                        jp	    z, .DampenPitch
 289+ C381 3A E9 9C                             ld      a,(JSTY)                            ; have we maxed out Joystick?
 290+ C384 21 ED 9C                             ld      hl,BET1MAXC                         ; currnet ship max left roll
 291+ C387 BE                                   cp      (hl)
 292+ C388 28 24                                jr      z,.ForwardCursorKeysDone
 293+ C38A 3C                                   inc     a                                   ; increase joystick roll
 294+ C38B 32 E9 9C     .UpdateBetaPitch:       ld      (JSTY),a
 295+ C38E CD 3D C0                             call    draw_front_calc_beta
 296+ C391 C3 AE C3                             jp      .ForwardCursorKeysDone
 297+ C394 21 CE C2     .DampenPitch:           ld      hl,dampenPcounter          ; TODO mach dampen rates ship properies by having teh $20 as a ship config
 298+ C397 35                                   dec     (hl)
 299+ C398 20 14                                jr      nz,.ForwardCursorKeysDone
 300+ C39A 3E 04                                ld      a,dampenRate
 301+ C39C 77                                   ld      (hl),a
 302+ C39D 3A E9 9C                             ld      a,(JSTY)
 303+ C3A0 FE 00                                cp      0
 304+ C3A2 28 0A                                jr      z,.ForwardCursorKeysDone
 305+ C3A4 CB 7F                                bit     7,a
 306+ C3A6 28 03                                jr      z,.PosPitchDampen
 307+ C3A8 3C           .NegPitchDampen:        inc     a
 308+ C3A9 18 01                                jr      .ApplyPitchDampen
 309+ C3AB 3D           .PosPitchDampen:        dec     a
 310+ C3AC 18 DD        .ApplyPitchDampen:      jr      .UpdateBetaPitch
 311+ C3AE              ; Now test hyperpsace. We can't be docked as this is a view routine piece of logic but for say local charts we may
 312+ C3AE              ; be in flight and they have to force a forward view when hyperspace is pressed
 313+ C3AE              ; We won't do galatic here, but for other views force to forward view
 314+ C3AE 3E 24        .ForwardCursorKeysDone: ld      a,c_Pressed_Hyperspace              ; Check for hyperspace
 315+ C3B0 CD 0A 9B                             call    is_key_pressed
 316+ C3B3 20 48                                jr      nz,.NotHyperspace
 317+ C3B5              ; If we are in hyperspace countdown then test for hyperspace
 318+ C3B5 2A A5 9E                             ld      hl,(InnerHyperCount)                ; if hyperspace was enaged then cancel
 319+ C3B8 7C                                   ld      a,h                                 ; hyperspace
 320+ C3B9 B5                                   or      l                                   ; .
 321+ C3BA 20 41                                jr      nz,.CancelHyperspace                ; .
 322+ C3BC              ; check selected target if we find one then after gettting galaxy at bc a=0 if not found
 323+ C3BC ED 5B E7 9E                          ld      de,(PresentSystemX)
 324+ C3C0 2A E9 9E                             ld      hl,(TargetSystemX)
 325+ C3C3 CD 53 B3                             call    compare16HLDE
 326+ C3C6 28 35                                jr      z,.NoTargetSelected                 ; can't jump to current system
 327+ C3C8 3A D4 9E                             ld      a,(Galaxy)
 328+ C3CB                                      MMUSelectGalaxyA
 328+ C3CB ED 92 57    >                     nextreg GalaxyDataMMU,       a
 329+ C3CE ED 4B E9 9E                          ld      bc,(TargetSystemX)
 330+ C3D2 CD BB FA                             call    galaxy_name_at_bc
 331+ C3D5 FE 00                                cp      0
 332+ C3D7 28 24                                jr      z,.NotHyperspace
 333+ C3D9              ; check fuel is sufficient
 334+ C3D9 ED 4B E7 9E                          ld      bc,(PresentSystemX)
 335+ C3DD ED 43 57 E8                          ld      (GalaxyPresentSystem),bc
 336+ C3E1 ED 4B E9 9E                          ld      bc,(TargetSystemX)
 337+ C3E5 ED 43 59 E8                          ld      (GalaxyDestinationSystem),bc
 338+ C3E9 CD F7 FB                             call    galaxy_find_distance            ; get distance into HL
 339+ C3EC 7C                                   ld      a,h
 340+ C3ED A7                                   and     a
 341+ C3EE 20 0D                                jr      nz,.InsufficientFuel            ; max jump capacity is 25 ly for any ship
 342+ C3F0 3A 45 A3                             ld      a,(Fuel)
 343+ C3F3                                      JumpIfALTNusng    l, .InsufficientFuel
 343+ C3F3 BD          >                        cp      l
 343+ C3F4 DA FD C3    >                        jp		c, .InsufficientFuel
 344+ C3F7              ; set up timer countdown
 345+ C3F7 21 0B 0B                             ld      hl,HyperSpaceTimers                 ; set both timers to 15
 346+ C3FA 22 A5 9E                             ld      (InnerHyperCount),hl                ; .
 347+ C3FD              .CancelHyperspace
 348+ C3FD              .NoTargetSelected
 349+ C3FD              .InsufficientFuel
 350+ C3FD              .NotHyperspace:
 351+ C3FD CD 0A A2     .CheckForLaserPressed:  call    IsLaserUseable                      ; no laser or destroyed?
 352+ C400 28 44                                jr      z,.CheckTargetting
 353+ C402              .CanLaserStillFire:     SetMemFalse FireLaserPressed                ; default to no laser
 353+ C402 3E FF       >                        ld      a,$FF
 353+ C404 32 CC 9E    >                        ld      (FireLaserPressed),a
 354+ C407 3A F3 A0                             ld      a,(CurrLaserPulseRate)              ; if not beam type
 355+ C40A                                      JumpIfAIsZero .BeamType                     ; .
 355+ C40A A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
 355+ C40B CA 38 C4    >                        jp	    z, .BeamType
 356+ C40E 47                                   ld      b,a                                 ; and not run out of pulses
 357+ C40F 3A 01 A1                             ld      a,(CurrLaserPulseRateCount)         ;
 358+ C412 3A FE A0                             ld      a,(CurrLaserPulseOnCount)           ;    if not already on
 359+ C415                                      JumpIfAEqNusng  b, .PulseLimitReached       ;
 359+ C415 B8          >                        cp     b
 359+ C416 CA 46 C4    >                        jp      z,.PulseLimitReached
 360+ C419 21 FF A0                             ld      hl,CurrLaserPulseOffCount           ;       and not in off phase
 361+ C41C B6                                   or      (hl)                                ;
 362+ C41D 23                                   inc     hl  ; CurrLaserPulseRestCount       ;       and not in rest phase.
 363+ C41E B6                                   or      (hl)                                ;    .
 364+ C41F 20 25                                jr      nz, .CheckTargetting                ;    .
 365+ C421 3E 14        .IsFirePressed:         ld      a,c_Pressed_FireLaser               ;       if fire is pressed
 366+ C423 CD FD 9A                             call    is_key_up_state                     ;       .
 367+ C426 28 1E                                jr      z,.CheckTargetting                  ;       .
 368+ C428 3A 01 A1     .CanProcesFire:         ld      a,(CurrLaserPulseRateCount)         ;            pulse rate count ++
 369+ C42B 3C                                   inc     a                                   ;            .
 370+ C42C 32 01 A1     .StillHavePulsesLeft:   ld      (CurrLaserPulseRateCount),a         ;            .
 371+ C42F                                      ldCopyByte CurrLaserPulseOnTime, CurrLaserPulseOnCount  ; pulse on count = pulse on time
 371+ C42F 3A F4 A0    >                        ld       a,(CurrLaserPulseOnTime)
 371+ C432 32 FE A0    >                        ld       (CurrLaserPulseOnCount),a
 372+ C435                                   ;   ldCopyByte CurrLaserPulseOffTime, CurrLaserPulseOffCount; pulse off count = pulse off time
 373+ C435                                   ;   ldCopyByte CurrLaserPulseRest, CurrLaserPulseRestCount  ; pulse rest count = pulse rest time
 374+ C435 C3 46 C4                             jp      .CheckTargetting
 375+ C438 3E 14        .BeamType:              ld      a,c_Pressed_FireLaser               ; else (beam type) if fire is pressed
 376+ C43A CD FD 9A                             call    is_key_up_state                     ;                   .
 377+ C43D 28 07                                jr      z,.CheckTargetting                  ;                   .
 378+ C43F                                      SetMemTrue FireLaserPressed                 ;                   set pulse on to 1
 378+ C43F AF          >                        xor     a
 378+ C440 32 CC 9E    >                        ld      (FireLaserPressed),a
 379+ C443 C3 46 C4                             jp      .CheckTargetting
 380+ C446              .PulseLimitReached:     ;ZeroA                                       ;
 381+ C446                                      ;ld      (CurrLaserPulseRateCount),a         ;
 382+ C446                                      ;ldCopyByte CurrLaserPulseRest, CurrLaserPulseRestCount   ; start the rest phase
 383+ C446              ; . Here we check to see if the target lock has been pressed
 384+ C446 CD 05 9C     .CheckTargetting:       call    TargetMissileTest
 385+ C449 3E 18        .CheckForMissile:       ld      a,c_Pressed_FireMissile             ; launch pressed?
 386+ C44B CD 0A 9B                             call    is_key_pressed
 387+ C44E 20 13                                jr      nz,.NotMissileLaunch
 388+ C450                                      AnyMissilesLeft
 388+ C450 3A 4A 9E    >                        ld      a,(NbrMissiles)
 388+ C453 A7          >                        and     a
 389+ C454 28 0D                                jr      z,.NotMissileLaunch                 ; no missiles in rack
 390+ C456 CD 8A A2                             call    IsMissileLockedOn
 391+ C459 28 08                                jr      z,.MissileNotLocked
 392+ C45B              .MissileLaunch:         SetMissileLaunch
 392+ C45B 3A DF A0    >                        ld      a,(MissileTargettingFlag)
 392+ C45E E6 0F       >                        and     $0F
 392+ C460 32 DF A0    >                        ld      (MissileTargettingFlag),a
 393+ C463              .MissileNotLocked:                       ; later on we need a "bing bong" nose for trying to launch an unlocked missile
 394+ C463              .NotMissileLaunch:
 395+ C463 C9                                   ret
 396+ C464
 397+ C464
 398+ C464
 399+ C464
 400+ C464
 401+ C464
 402+ C464
# file closed: ./Views/Front_View.asm
 883  C464              ; Bank 63  ------------------------------------------------------------------------------------------------------------------------
 884  C464                  SLOT    MenuStatusAddr
 885  C464                  PAGE    BankMenuStatus
 886  C464                  ORG     MenuStatusAddr
 887  C000                  INCLUDE "./Menus/status_menu.asm"
# file opened: ./Menus/status_menu.asm
   1+ C000 53 74 61 74  status_page_marker  DB "Status      PG63"
   1+ C004 75 73 20 20
   1+ C008 20 20 20 20
   1+ C00C 50 47 36 33
   2+ C010
   3+ C010 40 02 56 BD  status_boiler_text		DW $0240,txt_commander
   4+ C014 90 02 E0 A0  						DW $0290,CommanderName
   5+ C018 08 0B 6A BD  						DW $0B08,txt_present_system
   6+ C01C 08 13 7D BD  						DW $1308,txt_hyperspace_system
   7+ C020 08 1B 90 BD  						DW $1B08,txt_condition
   8+ C024 08 23 9E BD  						DW $2308,txt_fuel
   9+ C028 08 2B AC BD  						DW $2B08,txt_cash
  10+ C02C 08 33 BA BD  						DW $3308,txt_legal_status
  11+ C030 08 3B C8 BD  						DW $3B08,txt_rating
  12+ C034 08 4B D6 BD  						DW $4B08,txt_equipment
  13+ C038
  14+ C038 00 00        equipment_cursor		DW  $0000
  15+ C03A              present_position		equ	$0B98
  16+ C03A              hyperspace_position		equ	$1398
  17+ C03A              condition_position		equ	$1B70
  18+ C03A              fuel_position			equ	$2370
  19+ C03A              cash_position			equ	$2B70
  20+ C03A              legal_status_position	equ $3370
  21+ C03A              rank_position			equ $3B70
  22+ C03A              equipment_position		equ $5340
  23+ C03A              equipment_position2		equ $5378
  24+ C03A              equipmax_row			equ $FF
  25+ C03A
  26+ C03A 00           STAT_selected_row       DB 0
  27+ C03B 00           STAT_current_topItem    DB 0
  28+ C03C 00           STAT_current_end        DB 0
  29+ C03D              STAT_buffer_rows         EQU     128
  30+ C03D              STAT_buffer_row_len      EQU     24
  31+ C03D              STAT_eqip_window_len    EQU 10
  32+ C03D              STAT_display_buff_len    EQU     STAT_buffer_rows *   STAT_buffer_row_len
  33+ C03D 00 00 00...  STAT_display_buffer:     DS      STAT_display_buff_len                     ; maxium of 128 items can be coded for
  34+ CC3D              STAT_position			equ $5840
  35+ CC3D 00 00 00...  STAT_cash_amount    	DS 10
  36+ CC47 20 43 72 00  STAT_cash_UoM           DB " Cr",0
  37+ CC4B
  38+ CC4B 00 00 00...  stat_present_name       DS  30
  39+ CC69 00                                   DB  0
  40+ CC6A 00 00 00...  stat_target_name        DS  30
  41+ CC88 00                                   DB  0
  42+ CC89
  43+ CC89 21 7F E8     stat_copy_to_name:      ld      hl,GalaxyExpandedName
  44+ CC8C 01 1E 00                             ld      bc,30
  45+ CC8F ED B0                                ldir
  46+ CC91 C9                                   ret
  47+ CC92
  48+ CC92              ;----------------------------------------------------------------------------------------------------------------------------------
  49+ CC92              STAT_print_boiler_text: INCLUDE "Menus/print_boiler_text_inlineInclude.asm"
# file opened: ./Menus/print_boiler_text_inlineInclude.asm
   1++CC92
   2++CC92              ;">print_boilder_text hl = text structure, b = message count"
   3++CC92              .BoilerTextLoop:
   4++CC92 C5           	push		bc			; Save Message Count loop value
   5++CC93 4E           	ld			c,(hl)		; Get Row into b
   6++CC94 23           	inc			hl
   7++CC95 46           	ld			b,(hl)		; Get Col into b
   8++CC96 23           	inc			hl
   9++CC97 5E           	ld			e,(hl)		; Get text address Lo into E
  10++CC98 23           	inc			hl
  11++CC99 56           	ld			d,(hl)		; Get text address Hi into E
  12++CC9A 23           	inc			hl
  13++CC9B E5           	push		hl			; Save present HL to stack as this is the address for the next message
  14++CC9C EB           	ex			de,hl		; now hl = address of text data
  15++CC9D 1E FF        	ld			e,txt_status_colour
  16++CC9F C5           	push		bc
  17++CCA0 D1           	pop			de
  18++CCA1                  MMUSelectLayer1
  18++CCA1 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
  19++CCA5 CD C8 E0     	call		l1_print_at
  20++CCA8 E1           	pop			hl
  21++CCA9 C1           	pop			bc
  22++CCAA 10 E6        	djnz		.BoilerTextLoop
  23++CCAC C9           	ret
  24++CCAD
# file closed: ./Menus/print_boiler_text_inlineInclude.asm
  50+ CCAD              ;----------------------------------------------------------------------------------------------------------------------------------
  51+ CCAD DD 22 51 CD  STAT_DispDEIXtoIY:      ld (.STATclcn32z),ix
  52+ CCB1 ED 53 53 CD                          ld (.STATclcn32zIX),de
  53+ CCB5 DD 21 4D CD                          ld ix,.STATclcn32t+36
  54+ CCB9 06 09                                ld b,9
  55+ CCBB 0E 00                                ld c,0
  56+ CCBD 3E 30        .STATclcn321:           ld a,'0'
  57+ CCBF B7                                   or a
  58+ CCC0 DD 5E 00     .STATclcn322:           ld e,(ix+0)
  59+ CCC3 DD 56 01                             ld d,(ix+1)
  60+ CCC6 2A 51 CD                             ld hl,(.STATclcn32z)
  61+ CCC9 ED 52                                sbc hl,de
  62+ CCCB 22 51 CD                             ld (.STATclcn32z),hl
  63+ CCCE DD 5E 02                             ld e,(ix+2)
  64+ CCD1 DD 56 03                             ld d,(ix+3)
  65+ CCD4 2A 53 CD                             ld hl,(.STATclcn32zIX)
  66+ CCD7 ED 52                                sbc hl,de
  67+ CCD9 22 53 CD                             ld (.STATclcn32zIX),hl
  68+ CCDC 38 04                                jr c,.STATclcn325
  69+ CCDE 0C                                   inc c
  70+ CCDF 3C                                   inc a
  71+ CCE0 18 DE                                jr .STATclcn322
  72+ CCE2 DD 5E 00     .STATclcn325:           ld e,(ix+0)
  73+ CCE5 DD 56 01                             ld d,(ix+1)
  74+ CCE8 2A 51 CD                             ld hl,(.STATclcn32z)
  75+ CCEB 19                                   add hl,de
  76+ CCEC 22 51 CD                             ld (.STATclcn32z),hl
  77+ CCEF DD 5E 02                             ld e,(ix+2)
  78+ CCF2 DD 56 03                             ld d,(ix+3)
  79+ CCF5 2A 53 CD                             ld hl,(.STATclcn32zIX)
  80+ CCF8 ED 5A                                adc hl,de
  81+ CCFA 22 53 CD                             ld (.STATclcn32zIX),hl
  82+ CCFD 11 FC FF                             ld de,-4
  83+ CD00 DD 19                                add ix,de
  84+ CD02 0C                                   inc c
  85+ CD03 0D                                   dec c
  86+ CD04 28 05                                jr z,.STATclcn323
  87+ CD06 FD 77 00                             ld (iy+0),a
  88+ CD09 FD 23                                inc iy
  89+ CD0B 10 B0        .STATclcn323:           djnz .STATclcn321
  90+ CD0D 3A 51 CD                             ld a,(.STATclcn32z)
  91+ CD10 C6 30                                add A,'0'
  92+ CD12 FD 77 00                             ld (iy+0),a
  93+ CD15 FD 36 02 00                          ld (iy+2),0
  94+ CD19 FD 7E 00                             ld      a,(IY+0)
  95+ CD1C FD 77 01                             ld      (IY+1),a
  96+ CD1F 3E 2E                                ld      a,"."
  97+ CD21 FD 77 00                             ld      (IY+0),a
  98+ CD24 FD 23                                inc     IY
  99+ CD26 FD 23                                inc     IY
 100+ CD28 C9                                   ret
 101+ CD29 01 00 00 00  .STATclcn32t            dw 1,0,     10,0,     100,0,     1000,0,       10000,0
 101+ CD2D 0A 00 00 00
 101+ CD31 64 00 00 00
 101+ CD35 E8 03 00 00
 101+ CD39 10 27 00 00
 102+ CD3D A0 86 01 00                          dw $86a0,1, $4240,$0f, $9680,$98, $e100,$05f5, $ca00,$3b9a
 102+ CD41 40 42 0F 00
 102+ CD45 80 96 98 00
 102+ CD49 00 E1 F5 05
 102+ CD4D 00 CA 9A 3B
 103+ CD51 00 00        .STATclcn32z            ds 2
 104+ CD53 00 00        .STATclcn32zIX          ds 2
 105+ CD55              ;----------------------------------------------------------------------------------------------------------------------------------
 106+ CD55 2A 43 A3     STAT_GetCash:           ld		hl,(Cash+2)
 107+ CD58 EB                                   ex      de,hl
 108+ CD59 DD 2A 41 A3                          ld      ix,(Cash)
 109+ CD5D FD 21 3D CC                          ld		iy,STAT_cash_amount
 110+ CD61 CD AD CC                             call 	STAT_DispDEIXtoIY
 111+ CD64 FD E5                                push    iy
 112+ CD66 D1                                   pop     de
 113+ CD67 21 47 CC                             ld      hl,STAT_cash_UoM
 114+ CD6A 01 04 00                             ld      bc,4
 115+ CD6D ED B0                                ldir
 116+ CD6F C9                                   ret
 117+ CD70              ;----------------------------------------------------------------------------------------------------------------------------------
 118+ CD70 7E           STAT_expand_word:       ld      a,(hl)
 119+ CD71 FE 00                                cp      0
 120+ CD73 C8                                   ret     z
 121+ CD74 12                                   ld      (de),a
 122+ CD75 23                                   inc     hl
 123+ CD76 13                                   inc     de
 124+ CD77 18 F7                                jr      STAT_expand_word
 125+ CD79
 126+ CD79              ; hl = list of words
 127+ CD79              ; de = adress to expand to
 128+ CD79 7E           STAT_expand_name:       ld      a,(hl)
 129+ CD7A 47                                   ld      b,a
 130+ CD7B 23                                   inc     hl
 131+ CD7C 7E                                   ld      a,(hl)              ; its a 16 bit
 132+ CD7D 2B                                   dec     hl                  ; move back one for now, need to optimise laters
 133+ CD7E B0                                   or      b
 134+ CD7F 20 01                                jr      nz,.MoreToDo
 135+ CD81              ;                        ld      (de),a we dont want the null marker now
 136+ CD81 C9                                   ret
 137+ CD82 E5 D5        .MoreToDo:              push    hl,,de
 138+ CD84 7E                                   ld      a,(hl)              ; bodge for now no optimise
 139+ CD85 5F                                   ld      e,a
 140+ CD86 23                                   inc     hl
 141+ CD87 7E                                   ld      a,(hl)
 142+ CD88 57                                   ld      d,a
 143+ CD89 EB                                   ex      hl,de               ; hl is now Word... address
 144+ CD8A D1                                   pop     de                  ; de back to pointer to buffer
 145+ CD8B CD 70 CD     .ProcessWord:           call    STAT_expand_word
 146+ CD8E 3E 20                                ld      a," "               ; speculative space
 147+ CD90 12                                   ld      (de),a
 148+ CD91 13                                   inc     de
 149+ CD92 E1                                   pop     hl                  ; get string pointer back
 150+ CD93 23                                   inc     hl
 151+ CD94 23                                   inc     hl                  ; on to next word
 152+ CD95 18 E2                                jr      STAT_expand_name
 153+ CD97
 154+ CD97              STAT_First_Item         EQU     EQ_CARGO_BAY
 155+ CD97 3A D4 9E     STAT_buffer_list:       ld      a,(Galaxy)       ; DEBUG as galaxy n is not working
 156+ CD9A                                      MMUSelectGalaxyA
 156+ CD9A ED 92 57    >                     nextreg GalaxyDataMMU,       a
 157+ CD9D 21 3D C0                             ld      hl,STAT_display_buffer                      ; hl - target buffer
 158+ CDA0 3E 01                                ld      a,1                                         ; so it will still skip them on printing
 159+ CDA2 11 00 0C                             ld      de, STAT_display_buff_len
 160+ CDA5 CD A5 99                             call    memfill_dma                                 ; full buffer with ASCII 1 (unprintable character)
 161+ CDA8 21 54 C0                             ld      hl,STAT_display_buffer+STAT_buffer_row_len-1
 162+ CDAB 11 18 00                             ld      de,STAT_buffer_row_len
 163+ CDAE 06 18                                ld      b,EQ_ITEM_COUNT - EQ_CARGO_BAY
 164+ CDB0 AF                                   xor     a
 165+ CDB1 77           .EoLLoop:               ld      (hl),a                                      ; fix all buffer lines with a null
 166+ CDB2 19                                   add     hl,de
 167+ CDB3 10 FC                                djnz    .EoLLoop
 168+ CDB5 06 18                                ld      b,EQ_ITEM_COUNT - EQ_CARGO_BAY              ; CurrentGameMaxEquipment but minus fuel and missiles
 169+ CDB7 DD 21 62 A3                          ld      ix,EquipmentFitted + STAT_First_Item        ; ix = equipment master table, ignore missiles
 170+ CDBB FD 21 3D C0                          ld      iy,STAT_display_buffer                      ; iy = target buffer
 171+ CDBF 0E 00                                ld      c,0                                         ; Current Row
 172+ CDC1 1E 02                                ld      e,STAT_First_Item
 173+ CDC3 DD 7E 00     .ProcessRow:            ld      a,(ix+0)                                    ; Do we own one?
 174+ CDC6 FE 00                                cp      0
 175+ CDC8 28 21                                jr      z,.DoneFittedCheck
 176+ CDCA D5 FD E5 DD  .OwnItem:               push    de,, iy,, ix,, bc
 176+ CDCE E5 C5
 177+ CDD0 21 06 F4                             ld      hl,ShipEquipNameTable                       ; look up equipment name
 178+ CDD3 16 08                                ld      d,EquipNameTableRowLen                       ; ship equip name row length, e = current equip row
 179+ CDD5 ED 30                                mul
 180+ CDD7 19                                   add     hl,de                                       ; hl = dword list of work pointers
 181+ CDD8 FD 54 FD 5D                          ld      de,iy                                       ; de = 0 column at current display buffer row
 182+ CDDC CD 79 CD                             call    STAT_expand_name                           ; expand name
 183+ CDDF C1 DD E1 FD                          pop     iy,,ix,,bc
 183+ CDE3 E1
 184+ CDE4 11 18 00                             ld      de,STAT_buffer_row_len
 185+ CDE7 FD 19                                add     iy,de                                       ; now iy = start of next column
 186+ CDE9 D1                                   pop     de
 187+ CDEA 0C                                   inc     c
 188+ CDEB DD 23        .DoneFittedCheck:       inc     ix
 189+ CDED 1C                                   inc     e
 190+ CDEE 10 D3                                djnz    .ProcessRow
 191+ CDF0 79           .DoneProcess:           ld      a,c
 192+ CDF1 32 3C C0                             ld      (STAT_current_end),a
 193+ CDF4 C9                                   ret
 194+ CDF5              ;----------------------------------------------------------------------------------------------------------------------------------
 195+ CDF5              draw_STAT_maintext:    	InitNoDoubleBuffer
 195+ CDF5             >                            MMUSelectLayer1
 195+ CDF5 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 195+ CDF9 CD 80 E0    >                            call	l1_cls
 195+ CDFC 3E 07       >                            ld		a,7
 195+ CDFE CD 9B E0    >                            call	l1_attr_cls_to_a
 195+ CE01             >                            MMUSelectLayer2
 195+ CE01 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 195+ CE05 CD 09 E0    >                            call    asm_l2_double_buffer_off
 195+ CE08 CD 01 E1    >                            call	l2_cls	; Get some space
 195+ CE0B             >                            MMUSelectSpriteBank
 195+ CE0B ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
 195+ CE0F CD A4 E4    >                            call    sprite_cls_cursors
 196+ CE12 01 01 01     .Drawbox:               ld		bc,$0101
 197+ CE15 11 FD BE                             ld		de,$BEFD
 198+ CE18 3E C0                                ld		a,$C0
 199+ CE1A                                      MMUSelectLayer2
 199+ CE1A ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 200+ CE1E CD 4B E2                             call	l2_draw_box
 201+ CE21 06 0A                                ld		b,10
 202+ CE23 21 10 C0                             ld		hl,status_boiler_text
 203+ CE26 CD 92 CC                             call	STAT_print_boiler_text
 204+ CE29 3A D4 9E     .PresentSystem:         ld      a,(Galaxy)       ; DEBUG as galaxy n is not working
 205+ CE2C                                      MMUSelectGalaxyA
 205+ CE2C ED 92 57    >                     nextreg GalaxyDataMMU,       a
 206+ CE2F ED 4B E7 9E                          ld      bc, (PresentSystemX)
 207+ CE33 CD BB FA                             call    galaxy_name_at_bc
 208+ CE36 11 4B CC                             ld      de,stat_present_name
 209+ CE39 CD 89 CC                             call    stat_copy_to_name
 209+ CE3C
 210+ CE3C 01 98 0B                             ld      bc,present_position
 211+ CE3F 21 4B CC                             ld      hl,stat_present_name
 212+ CE42                                      MMUSelectLayer2
 212+ CE42 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 213+ CE46 1E FF                                ld      e,txt_status_colour
 214+ CE48 CD C4 E1                             call    l2_print_at
 215+ CE4B 3A D4 9E     .HyperspaceSystem:      ld      a,(Galaxy)      ; DEBUG as galaxy n is not working
 216+ CE4E                                      MMUSelectGalaxyA
 216+ CE4E ED 92 57    >                     nextreg GalaxyDataMMU,       a
 217+ CE51 ED 4B E9 9E                          ld      bc, (TargetSystemX)
 218+ CE55 CD BB FA                             call    galaxy_name_at_bc
 219+ CE58 11 6A CC                             ld      de,stat_target_name
 220+ CE5B CD 89 CC                             call    stat_copy_to_name
 220+ CE5E
 221+ CE5E 01 98 13                             ld      bc,hyperspace_position
 222+ CE61 21 6A CC                             ld      hl,stat_target_name
 223+ CE64                                      MMUSelectLayer2
 223+ CE64 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 224+ CE68 1E FF                                ld      e,txt_status_colour
 225+ CE6A CD C4 E1                             call    l2_print_at
 226+ CE6D CD 26 CF     .StatusText:	        call	get_cmdr_condition
 227+ CE70 21 B1 A5                             ld		hl, ConditionNameIdx
 228+ CE73 CD B3 A6                             call	getTableText
 229+ CE76 01 70 1B                             ld		bc,condition_position
 230+ CE79                                      MMUSelectLayer2
 230+ CE79 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 231+ CE7D 1E FF                                ld      e,txt_status_colour
 232+ CE7F CD C4 E1                             call    l2_print_at
 233+ CE82 CD 33 BE     .DisplayFuel:           call	GetFuelLevel
 234+ CE85 21 E1 BD                             ld		hl, txt_fuel_level
 235+ CE88 7E                                   ld		a,(hl)
 236+ CE89 FE 30                                cp		'0'
 237+ CE8B 20 01                                jr		nz,.PrintFuel
 238+ CE8D 23           .SkipLeadingZero:	    inc		hl
 239+ CE8E 01 70 23     .PrintFuel:             ld		bc,fuel_position
 240+ CE91                                      MMUSelectLayer2
 240+ CE91 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 241+ CE95 1E FF                                ld      e,txt_status_colour
 242+ CE97 CD C4 E1                             call    l2_print_at
 243+ CE9A CD 55 CD     .DisplayCash:           call	STAT_GetCash
 244+ CE9D 01 70 2B                             ld		bc,cash_position
 245+ CEA0 21 3D CC                             ld		hl,STAT_cash_amount
 246+ CEA3                                      MMUSelectLayer2
 246+ CEA3 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 247+ CEA7 1E FF                                ld      e,txt_status_colour
 248+ CEA9 CD C4 E1                             call    l2_print_at
 249+ CEAC 3A 4B 9E     .PrintLegalStatus:      ld		a,(FugitiveInnocentStatus)
 250+ CEAF FE 00                                cp		0
 251+ CEB1 20 05                                jr		nz,.Naughty
 252+ CEB3 21 92 A7                             ld		hl,WordClean
 253+ CEB6 18 0C                                jr		.DisplayLegalStatus
 254+ CEB8 FE 32        .Naughty:               cp		50
 255+ CEBA 38 05                                jr		c,.JustOffender
 256+ CEBC 21 A1 A7     .VeryNaughty:           ld		hl,WordFugitive
 257+ CEBF 18 03                                jr		.DisplayLegalStatus
 258+ CEC1 21 98 A7     .JustOffender:          ld		hl,WordOffender
 259+ CEC4 01 70 33     .DisplayLegalStatus:    ld		bc,legal_status_position
 260+ CEC7                                      MMUSelectLayer2
 260+ CEC7 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 261+ CECB 1E FF                                ld      e,txt_status_colour
 262+ CECD CD C4 E1                             call    l2_print_at
 263+ CED0 ED 5B 5E 9E  .DisplayRating:         ld		de,(KillTally)
 264+ CED4 CD BE A6                             call	getRankIndex
 265+ CED7 21 9D A6                             ld		hl, RankingNameIdx
 266+ CEDA CD B3 A6                             call	getTableText
 267+ CEDD 01 70 3B                             ld		bc,rank_position
 268+ CEE0                                      MMUSelectLayer2
 268+ CEE0 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 269+ CEE4 1E FF                                ld      e,txt_status_colour
 270+ CEE6 CD C4 E1                             call    l2_print_at
 271+ CEE9 C9                                   ret
 272+ CEEA
 273+ CEEA
 274+ CEEA              draw_STAT_items:        MMUSelectLayer1
 274+ CEEA ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 275+ CEEE CD 80 E0                             call    l1_cls
 276+ CEF1                                      ; add in all the status stuff later
 277+ CEF1 3A 3B C0                             ld      a,(STAT_current_topItem)
 278+ CEF4 16 18                                ld      d,STAT_buffer_row_len
 279+ CEF6 5F                                   ld      e,a
 280+ CEF7 ED 30                                mul
 281+ CEF9 21 3D C0                             ld      hl,STAT_display_buffer
 282+ CEFC 19                                   add     hl,de
 283+ CEFD 3A 3B C0                             ld      a,(STAT_current_topItem)
 284+ CF00 47                                   ld      b,a
 285+ CF01 3A 3C C0                             ld      a,(STAT_current_end)
 286+ CF04 90                                   sub     b
 287+ CF05                                      JumpIfALTNusng  STAT_eqip_window_len, .FillScreen
 287+ CF05 FE 0A       >                        cp      STAT_eqip_window_len
 287+ CF07 DA 0E CF    >                        jp		c, .FillScreen
 288+ CF0A 06 0A        .JustWindowing:         ld      b,STAT_eqip_window_len
 289+ CF0C 18 01                                jr      .ReadyToPrint
 290+ CF0E 47           .FillScreen:            ld      b,a         ; the mumber of rows to display
 291+ CF0F 11 40 58     .ReadyToPrint:          ld      de,STAT_position
 292+ CF12 D5 E5 C5     .DrawARow:              push    de,, hl,, bc                  ; "l1 PrintAt, pixel row, whole char col, DE = yx, HL = message Addr"
 293+ CF15 CD C8 E0                             call    l1_print_at
 293+ CF18
 294+ CF18 C1 E1                                pop     hl,,bc                      ; get mesage addr back and move down one line
 295+ CF1A 11 18 00                             ld      de,STAT_buffer_row_len
 296+ CF1D 19                                   add     hl,de
 297+ CF1E D1                                   pop     de                          ; get output row back
 298+ CF1F 3E 08                                ld      a,8
 299+ CF21 82                                   add     a,d
 300+ CF22 57                                   ld      d,a
 301+ CF23 10 ED                                djnz    .DrawARow
 302+ CF25 C9                                   ret
 303+ CF26
 304+ CF26              ;----------------------------------------------------------------------------------------------------------------------------------
 305+ CF26
 306+ CF26 3A EE 9D     get_cmdr_condition:     ld			a,(DockedFlag)
 307+ CF29 FE FF                                cp			StatePlayerDocked
 308+ CF2B 28 17                                jr			z,.PlayerIsDocked
 309+ CF2D              .PlayerNotDocked:	    ReturnIfMemTrue    SpaceStationSafeZone
 309+ CF2D 3A CD 9E    >                        ld      a,(SpaceStationSafeZone)
 309+ CF30 A7          >                        and     a
 309+ CF31 C8          >                        ret     z
 310+ CF32 CD FE A2                             call        AreShipsPresent
 311+ CF35 38 03                                jr          c,.NoShipsAround
 312+ CF37 3E 01                                ld          a,1
 313+ CF39 C9                                   ret
 314+ CF3A 3A DC A0     .NoShipsAround:         ld			a,(PlayerEnergy)
 315+ CF3D FE 80                                cp			$80
 316+ CF3F 3E 01                                ld          a,1
 317+ CF41 CE 01                                adc         1                                       ; add 1 + carry, if a < 128 then carry set so goes red
 318+ CF43 C9                                   ret
 319+ CF44 AF           .PlayerIsDocked:        xor			a
 320+ CF45 C9                                   ret
 321+ CF46
 322+ CF46              ;;;PrintEquipment:         ld		a,(hl)
 323+ CF46              ;;;                        cp		0
 324+ CF46              ;;;                        ret		z
 325+ CF46              ;;;                        ld		a,b
 326+ CF46              ;;;PrintEquipmentDirect:	call	expandTokenToString
 327+ CF46              ;;;                        ld		hl,TextBuffer
 328+ CF46              ;;;                        ld		de,(equipment_cursor)
 329+ CF46              ;;;                        call	l1_print_at
 330+ CF46              ;;;                        ld		bc,(equipment_cursor)
 331+ CF46              ;;;                        ld		a,b
 332+ CF46              ;;;                        add		a,8
 333+ CF46              ;;;                        ld		b,a
 334+ CF46              ;;;                        ld		(equipment_cursor),bc
 335+ CF46              ;;;                        cp		equipmax_row
 336+ CF46              ;;;                        jr		c,.SkipColUpdate
 337+ CF46              ;;;.ColUpdate:             ld		hl,equipment_position2
 338+ CF46              ;;;                        ld		(equipment_cursor),hl
 339+ CF46              ;;;                        ret
 340+ CF46              ;;;.SkipColUpdate:	        ld		a,b
 341+ CF46              ;;;                        ld		(equipment_cursor+1), a
 342+ CF46              ;;;                        ret
 343+ CF46
 344+ CF46              draw_status_menu:       InitNoDoubleBuffer
 344+ CF46             >                            MMUSelectLayer1
 344+ CF46 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 344+ CF4A CD 80 E0    >                            call	l1_cls
 344+ CF4D 3E 07       >                            ld		a,7
 344+ CF4F CD 9B E0    >                            call	l1_attr_cls_to_a
 344+ CF52             >                            MMUSelectLayer2
 344+ CF52 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 344+ CF56 CD 09 E0    >                            call    asm_l2_double_buffer_off
 344+ CF59 CD 01 E1    >                            call	l2_cls	; Get some space
 344+ CF5C             >                            MMUSelectSpriteBank
 344+ CF5C ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
 344+ CF60 CD A4 E4    >                            call    sprite_cls_cursors
 345+ CF63 3E 08                                ld		a,8
 346+ CF65 32 EA 9D                             ld		(MenuIdMax),a
 347+ CF68 01 01 01     .Drawbox:               ld		bc,$0101
 348+ CF6B 11 FD BE                             ld		de,$BEFD
 349+ CF6E 3E C0                                ld		a,$C0
 350+ CF70                                      MMUSelectLayer2
 350+ CF70 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 351+ CF74 CD 4B E2                             call	l2_draw_box
 352+ CF77 01 01 0A                             ld		bc,$0A01
 353+ CF7A 11 C0 FE                             ld		de,$FEC0
 354+ CF7D CD B5 E2                             call	l2_draw_horz_line
 355+ CF80 CD 97 CD     .equipment              call    STAT_buffer_list
 356+ CF83 CD EA CE                             call    draw_STAT_items
 357+ CF86 CD F5 CD                             call    draw_STAT_maintext
 358+ CF89 C9                                   ret
 359+ CF8A
 360+ CF8A              ;----------------------------------------------------------------------------------------------------------------------------------
 361+ CF8A              ; Handles all the input whilst in the market menu
 362+ CF8A 3E 4A        loop_STAT_menu:         ld      a,c_Pressed_CursorUp
 363+ CF8C CD 0A 9B                             call    is_key_pressed
 364+ CF8F CC 9B CF                             call    z,STAT_UpPressed
 365+ CF92 3E 4C                                ld      a,c_Pressed_CursorDown
 366+ CF94 CD 0A 9B                             call    is_key_pressed
 367+ CF97 CC AD CF                             call    z,STAT_DownPressed
 368+ CF9A C9                                   ret
 369+ CF9B
 370+ CF9B              ;----------------------------------------------------------------------------------------------------------------------------------
 371+ CF9B AF           STAT_UpPressed:         xor     a
 372+ CF9C 32 3A C0                             ld      (STAT_selected_row),a
 373+ CF9F 3A 3B C0     .check_scroll_up:       ld      a,(STAT_current_topItem)
 374+ CFA2 FE 00                                cp      0
 375+ CFA4 C8                                   ret     z
 376+ CFA5 3D                                   dec     a           ; chjange later to buffering step back 1
 377+ CFA6 32 3B C0                             ld      (STAT_current_topItem),a
 378+ CFA9 CD EA CE                             call    draw_STAT_items
 379+ CFAC C9                                   ret
 380+ CFAD              ;----------------------------------------------------------------------------------------------------------------------------------
 381+ CFAD 3E 09        STAT_DownPressed:       ld      a,STAT_eqip_window_len-1
 382+ CFAF 32 3A C0                             ld      (STAT_selected_row),a
 383+ CFB2 3A 3C C0                             ld      a,(STAT_current_end)
 384+ CFB5 47                                   ld      b,a                             ; This check is if the current list is < one screen
 385+ CFB6 05                                   dec     b
 386+ CFB7 3A 3A C0                             ld      a,(STAT_selected_row)
 387+ CFBA B8                                   cp      b
 388+ CFBB C8                                   ret     z
 389+ CFBC FE 09                                cp      STAT_eqip_window_len-1
 390+ CFBE 28 05                                jr      z, .check_scroll_down
 391+ CFC0 21 3A C0                             ld      hl,STAT_selected_row
 392+ CFC3 34                                   inc     (hl)
 393+ CFC4 C9                                   ret
 394+ CFC5 47           .check_scroll_down:     ld      b,a
 395+ CFC6 3A 3B C0                             ld      a,(STAT_current_topItem)
 396+ CFC9 80                                   add     b
 397+ CFCA 3C                                   inc     a
 398+ CFCB 21 3C C0                             ld      hl,STAT_current_end
 399+ CFCE                                      ReturnIfAGTEusng      (hl)
 399+ CFCE BE          >                        cp    (hl)
 399+ CFCF D0          >                        ret	 nc
 400+ CFD0 21 3B C0     .can_scroll_down:       ld      hl,STAT_current_topItem
 401+ CFD3 34                                   inc     (hl)
 402+ CFD4 CD EA CE                             call    draw_STAT_items
 403+ CFD7 C9                                   ret
 404+ CFD8
# file closed: ./Menus/status_menu.asm
 888  CFD8
 889  CFD8              ; Bank 64  ------------------------------------------------------------------------------------------------------------------------
 890  CFD8
 891  CFD8                  SLOT    MenuEquipSAddr
 892  CFD8                  PAGE    BankMenuEquipS
 893  CFD8                  ORG     MenuEquipSAddr
 894  C000                  INCLUDE "./Menus/equip_ship_menu.asm"
# file opened: ./Menus/equip_ship_menu.asm
   1+ C000 45 71 75 69  eqshp_prices_page_marker  DB "EquipShipPG63"
   1+ C004 70 53 68 69
   1+ C008 70 50 47 36
   1+ C00C 33
   2+ C00D 50 02 19 C0  eqshp_boiler_text		DW $0250,eqship_title
   3+ C011 20 02 00 AC  						DW $0220,name_expanded
   4+ C015 08 B0 24 C0                          DW $B008,eqship_cash
   5+ C019
   6+ C019 45 71 75 69  eqship_title            DB "Equip Ship",0
   6+ C01D 70 20 53 68
   6+ C021 69 70 00
   7+ C024 43 61 73 68  eqship_cash				DB "Cash : ",0
   7+ C028 20 3A 20 00
   8+ C02C
   9+ C02C 30 30 2E 30  txt_eqshp_amount	    DB "00.0",0
   9+ C030 00
  10+ C031 39 39 39 00  txt_eqshp_quantity      DB "999",0
  11+ C035 39 39 39 00  txt_eqshp_cargo         DB "999",0
  12+ C039 00 00        eqshp_cursor			DW  $0000
  13+ C03B              eqshp_position			equ $1808
  14+ C03B              eqshp_uom				equ	$68
  15+ C03B              eqshp_price 			equ $88
  16+ C03B              eqshp_Quantity			equ	$B0
  17+ C03B              eqshp_Cargo             equ $E0
  18+ C03B              eqshp_UomOffset		    equ 46
  19+ C03B 20 20 20 20  eqshp_blank_line        DB "                                ",0
  19+ C03F 20 20 20 20
  19+ C043 20 20 20 20
  19+ C047 20 20 20 20
  19+ C04B 20 20 20 20
  19+ C04F 20 20 20 20
  19+ C053 20 20 20 20
  19+ C057 20 20 20 20
  19+ C05B 00
  20+ C05C
  21+ C05C 00 00 00...  eqshp_item_price        DS 20
  22+ C070
  23+ C070              eqshp_cash_position     equ $B048
  24+ C070 00 00 00...  eqshp_cash_amount		DS 20
  25+ C084 20 43 72 20  eqshp_cash_UoM          DB " Cr       ",0
  25+ C088 20 20 20 20
  25+ C08C 20 20 00
  26+ C08F
  27+ C08F 00           eqshp_selected_row      DB 0
  28+ C090 00           eqshp_current_topItem   DB 0
  29+ C091 00           eqshp_current_end       DB 0
  30+ C092              eqship_buffer_rows      EQU     128
  31+ C092              eqship_buffer_row_len   EQU      32
  32+ C092              eqship_display_buff_len EQU     eqship_buffer_rows *   eqship_buffer_row_len
  33+ C092 00 00 00...  eqship_display_buffer:  DS      eqship_display_buff_len                     ; maxium of 128 items can be coded for
  34+ D092 00 00 00...  eqship_buyable_buffer:  DS      128
  35+ D112              eqship_buffer_cash_col: EQU     21
  36+ D112              eqship_fitted_module:   EQU     29
  37+ D112              ;----------------------------------------------------------------------------------------------------------------------------------
  38+ D112 3A 8F C0     eqshp_highlight_row:    ld      a,(eqshp_selected_row)
  39+ D115 C6 03                                add     a,3
  40+ D117 57                                   ld      d,a
  41+ D118 1E 56                                ld      e,L1InvHighlight
  42+ D11A                                      MMUSelectLayer1
  42+ D11A ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
  43+ D11E CD 30 E0                             call    l1_hilight_row
  44+ D121 C9                                   ret
  45+ D122              ;----------------------------------------------------------------------------------------------------------------------------------
  46+ D122 3A 8F C0     eqshp_lowlight_row      ld      a,(eqshp_selected_row)
  47+ D125 C6 03                                add     a,3
  48+ D127 57                                   ld      d,a
  49+ D128 1E 07                                ld      e,L1InvLowlight
  50+ D12A                                      MMUSelectLayer1
  50+ D12A ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
  51+ D12E CD 30 E0                             call    l1_hilight_row
  52+ D131 C9                                   ret
  53+ D132              ;----------------------------------------------------------------------------------------------------------------------------------
  54+ D132 CD 49 D1     eqshp_DispDEIXtoIY1DP:  call    eqshp_DispDEIXtoIY
  55+ D135 FD 36 02 00                          ld      (iy+2),0
  56+ D139 FD 7E 00                             ld      a,(IY+0)
  57+ D13C FD 77 01                             ld      (IY+1),a
  58+ D13F 3E 2E                                ld      a,"."
  59+ D141 FD 77 00                             ld      (IY+0),a
  60+ D144 FD 23                                inc     IY
  61+ D146 FD 23                                inc     IY
  62+ D148 C9                                   ret
  63+ D149              ;----------------------------------------------------------------------------------------------------------------------------------
  64+ D149 DD 22 DA D1  eqshp_DispDEIXtoIY:     ld (.EQSHPclcn32z),ix
  65+ D14D ED 53 DC D1                          ld (.EQSHPclcn32zIX),de
  66+ D151 DD 21 D6 D1                          ld ix,.EQSHPclcn32t+36
  67+ D155 06 09                                ld b,9
  68+ D157 0E 00                                ld c,0
  69+ D159 3E 30        .EQSHPclcn321:            ld a,'0'
  70+ D15B B7                                   or a
  71+ D15C DD 5E 00     .EQSHPclcn322:            ld e,(ix+0)
  72+ D15F DD 56 01                             ld d,(ix+1)
  73+ D162 2A DA D1                             ld hl,(.EQSHPclcn32z)
  74+ D165 ED 52                                sbc hl,de
  75+ D167 22 DA D1                             ld (.EQSHPclcn32z),hl
  76+ D16A DD 5E 02                             ld e,(ix+2)
  77+ D16D DD 56 03                             ld d,(ix+3)
  78+ D170 2A DC D1                             ld hl,(.EQSHPclcn32zIX)
  79+ D173 ED 52                                sbc hl,de
  80+ D175 22 DC D1                             ld (.EQSHPclcn32zIX),hl
  81+ D178 38 04                                jr c,.EQSHPclcn325
  82+ D17A 0C                                   inc c
  83+ D17B 3C                                   inc a
  84+ D17C 18 DE                                jr .EQSHPclcn322
  85+ D17E DD 5E 00     .EQSHPclcn325:            ld e,(ix+0)
  86+ D181 DD 56 01                             ld d,(ix+1)
  87+ D184 2A DA D1                             ld hl,(.EQSHPclcn32z)
  88+ D187 19                                   add hl,de
  89+ D188 22 DA D1                             ld (.EQSHPclcn32z),hl
  90+ D18B DD 5E 02                             ld e,(ix+2)
  91+ D18E DD 56 03                             ld d,(ix+3)
  92+ D191 2A DC D1                             ld hl,(.EQSHPclcn32zIX)
  93+ D194 ED 5A                                adc hl,de
  94+ D196 22 DC D1                             ld (.EQSHPclcn32zIX),hl
  95+ D199 11 FC FF                             ld de,-4
  96+ D19C DD 19                                add ix,de
  97+ D19E 0C                                   inc c
  98+ D19F 0D                                   dec c
  99+ D1A0 28 05                                jr z,.EQSHPclcn323
 100+ D1A2 FD 77 00                             ld (iy+0),a
 101+ D1A5 FD 23                                inc iy
 102+ D1A7 10 B0        .EQSHPclcn323:            djnz .EQSHPclcn321
 103+ D1A9 3A DA D1                             ld a,(.EQSHPclcn32z)
 104+ D1AC C6 30                                add A,'0'
 105+ D1AE FD 77 00                             ld (iy+0),a
 106+ D1B1 C9                                   ret
 107+ D1B2 01 00 00 00  .EQSHPclcn32t             dw 1,0,     10,0,     100,0,     1000,0,       10000,0
 107+ D1B6 0A 00 00 00
 107+ D1BA 64 00 00 00
 107+ D1BE E8 03 00 00
 107+ D1C2 10 27 00 00
 108+ D1C6 A0 86 01 00                          dw $86a0,1, $4240,$0f, $9680,$98, $e100,$05f5, $ca00,$3b9a
 108+ D1CA 40 42 0F 00
 108+ D1CE 80 96 98 00
 108+ D1D2 00 E1 F5 05
 108+ D1D6 00 CA 9A 3B
 109+ D1DA 00 00        .EQSHPclcn32z             ds 2
 110+ D1DC 00 00        .EQSHPclcn32zIX           ds 2
 111+ D1DE              ;----------------------------------------------------------------------------------------------------------------------------------
 112+ D1DE              ; "DispHL, writes HL to DE address"
 113+ D1DE 01 F0 D8     EQSHP_DispHLtoDE:         ld	bc,-10000
 114+ D1E1 CD F7 D1                             call	EQSHP_Num1
 115+ D1E4 01 18 FC                             ld	bc,-1000
 116+ D1E7 CD F7 D1                             call	EQSHP_Num1
 117+ D1EA 01 9C FF                             ld	bc,-100
 118+ D1ED CD F7 D1                             call	EQSHP_Num1
 119+ D1F0 0E F6                                ld	c,-10
 120+ D1F2 CD F7 D1                             call	EQSHP_Num1
 121+ D1F5 0E FF                                ld	c,-1
 122+ D1F7 3E 2F        EQSHP_Num1:	            ld	a,'0'-1
 123+ D1F9 3C           .Num2:	                inc	a
 124+ D1FA 09                                   add	hl,bc
 125+ D1FB 38 FC                                jr	c,.Num2
 126+ D1FD ED 42                                sbc	hl,bc
 127+ D1FF 12                                   ld	(de),a
 128+ D200 13                                   inc	de
 129+ D201 C9                                   ret
 130+ D202              ;----------------------------------------------------------------------------------------------------------------------------------
 131+ D202 26 00        EQSHP_DispAtoDE:          ld h,0
 132+ D204 6F                                   ld l,a
 133+ D205 C3 DE D1                             jp EQSHP_DispHLtoDE
 134+ D208              ;----------------------------------------------------------------------------------------------------------------------------------
 135+ D208 26 00        EQSHP_DispPriceAtoDE:     ld h,0
 136+ D20A 6F                                   ld l,a
 137+ D20B 01 9C FF                             ld	bc,-100
 138+ D20E CD 1E D2                             call	.NumLeadBlank1
 139+ D211 0E F6                                ld	c,-10
 140+ D213 CD F7 D1                             call	EQSHP_Num1
 141+ D216 3E 2E                                ld		a,'.'					; we could assume preformat but
 142+ D218 12                                   ld		(de),a					; we can optimse that later TODO
 143+ D219 13                                   inc		de						; with just an inc De
 144+ D21A 0E FF                                ld	c,-1
 145+ D21C 18 D9                                jr		EQSHP_Num1
 146+ D21E 3E 2F        .NumLeadBlank1:	        ld	a,'0'-1
 147+ D220 3C           .NumLeadBlank2:	        inc	a
 148+ D221 09                                   add	hl,bc
 149+ D222 38 FC                                jr	c,.NumLeadBlank2
 150+ D224 FE 30                                cp	'0'
 151+ D226 20 02                                jr	nz,.DontBlank
 152+ D228 3E 20        .Blank:                 ld	a,' '
 153+ D22A ED 42        .DontBlank:	            sbc	hl,bc
 154+ D22C 12                                   ld	(de),a
 155+ D22D 13                                   inc	de
 156+ D22E C9                                   ret
 157+ D22F              ;----------------------------------------------------------------------------------------------------------------------------------
 158+ D22F FE 00        EQSHP_DispQtyAtoDE:      cp	0
 159+ D231 28 30                                jr	z,.NoStock
 160+ D233 26 00                                ld h,0
 161+ D235 6F                                   ld l,a
 162+ D236 01 9C FF                             ld	bc,-100
 163+ D239 CD 52 D2                             call	.NumLeadBlank1
 164+ D23C FE 20        .WasLead0:              cp      ' '
 165+ D23E 20 09                                jr      nz,.NotHundredsZero
 166+ D240 0E F6                                ld	c,-10
 167+ D242 CD 52 D2                             call	.NumLeadBlank1
 168+ D245 0E FF                                ld	c,-1
 169+ D247 18 AE                                jr		EQSHP_Num1
 170+ D249 0E F6        .NotHundredsZero:       ld	c,-10
 171+ D24B CD F7 D1                             call	EQSHP_Num1
 172+ D24E 0E FF                                ld	c,-1
 173+ D250 18 A5                                jr		EQSHP_Num1
 174+ D252 3E 2F        .NumLeadBlank1:	        ld	a,'0'-1
 175+ D254 3C           .NumLeadBlank2:	        inc	a
 176+ D255 09                                   add	hl,bc
 177+ D256 38 FC                                jr	c,.NumLeadBlank2
 178+ D258 FE 30                                cp	'0'
 179+ D25A 20 02                                jr	nz,.DontBlank
 180+ D25C 3E 20        .Blank:                 ld	a,' '
 181+ D25E ED 42        .DontBlank:	            sbc	hl,bc
 182+ D260 12                                   ld	(de),a
 183+ D261 13                                   inc	de
 184+ D262 C9                                   ret
 185+ D263 3E 20        .NoStock:               ld	a,' '
 186+ D265 12                                   ld	(de),a
 187+ D266 13                                   inc	de
 188+ D267 12                                   ld	(de),a
 189+ D268 13                                   inc	de
 190+ D269 3E 2D                                ld	a,'-'
 191+ D26B 12                                   ld	(de),a
 192+ D26C 13                                   inc de
 193+ D26D C9                                   ret
 194+ D26E              ;----------------------------------------------------------------------------------------------------------------------------------
 195+ D26E              EQSHP_print_boiler_text:  INCLUDE "Menus/print_boiler_text_inlineInclude.asm"
# file opened: ./Menus/print_boiler_text_inlineInclude.asm
   1++D26E
   2++D26E              ;">print_boilder_text hl = text structure, b = message count"
   3++D26E              .BoilerTextLoop:
   4++D26E C5           	push		bc			; Save Message Count loop value
   5++D26F 4E           	ld			c,(hl)		; Get Row into b
   6++D270 23           	inc			hl
   7++D271 46           	ld			b,(hl)		; Get Col into b
   8++D272 23           	inc			hl
   9++D273 5E           	ld			e,(hl)		; Get text address Lo into E
  10++D274 23           	inc			hl
  11++D275 56           	ld			d,(hl)		; Get text address Hi into E
  12++D276 23           	inc			hl
  13++D277 E5           	push		hl			; Save present HL to stack as this is the address for the next message
  14++D278 EB           	ex			de,hl		; now hl = address of text data
  15++D279 1E FF        	ld			e,txt_status_colour
  16++D27B C5           	push		bc
  17++D27C D1           	pop			de
  18++D27D                  MMUSelectLayer1
  18++D27D ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
  19++D281 CD C8 E0     	call		l1_print_at
  20++D284 E1           	pop			hl
  21++D285 C1           	pop			bc
  22++D286 10 E6        	djnz		.BoilerTextLoop
  23++D288 C9           	ret
  24++D289
# file closed: ./Menus/print_boiler_text_inlineInclude.asm
 196+ D289              ;----------------------------------------------------------------------------------------------------------------------------------
 197+ D289 2A 43 A3     eqshp_GetCash:          ld		hl,(Cash+2)
 198+ D28C EB                                   ex      de,hl
 199+ D28D DD 2A 41 A3                          ld      ix,(Cash)
 200+ D291 FD 21 70 C0                          ld		iy,eqshp_cash_amount
 201+ D295 CD 32 D1                             call 	eqshp_DispDEIXtoIY1DP
 202+ D298 FD E5                                push    IY
 203+ D29A D1                                   pop     de
 204+ D29B 21 84 C0                             ld      hl,eqshp_cash_UoM
 205+ D29E 01 0B 00                             ld      bc,11
 206+ D2A1 ED B0                                ldir
 207+ D2A3 C9                                   ret
 208+ D2A4              ;----------------------------------------------------------------------------------------------------------------------------------
 209+ D2A4 CD 89 D2     eqshp_DisplayCash:      call	eqshp_GetCash
 210+ D2A7 21 70 C0                             ld		hl,eqshp_cash_amount
 211+ D2AA 11 48 B0                             ld      de,eqshp_cash_position
 212+ D2AD                                      MMUSelectLayer1
 212+ D2AD ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 213+ D2B1 CD C8 E0                             call	l1_print_at
 214+ D2B4 C9                                   ret
 215+ D2B5              ;----------------------------------------------------------------------------------------------------------------------------------
 216+ D2B5 7E           eqshp_expand_word:      ld      a,(hl)
 217+ D2B6 FE 00                                cp      0
 218+ D2B8 C8                                   ret     z
 219+ D2B9 12                                   ld      (de),a
 220+ D2BA 23                                   inc     hl
 221+ D2BB 13                                   inc     de
 222+ D2BC 18 F7                                jr      eqshp_expand_word
 223+ D2BE
 224+ D2BE              ; hl = list of words
 225+ D2BE              ; de = adress to expand to
 226+ D2BE 7E           eqshp_expand_name:      ld      a,(hl)
 227+ D2BF 47                                   ld      b,a
 228+ D2C0 23                                   inc     hl
 229+ D2C1 7E                                   ld      a,(hl)              ; its a 16 bit
 230+ D2C2 2B                                   dec     hl                  ; move back one for now, need to optimise laters
 231+ D2C3 B0                                   or      b
 232+ D2C4 20 01                                jr      nz,.MoreToDo
 233+ D2C6              ;                        ld      (de),a we dont want the null marker now
 234+ D2C6 C9                                   ret
 235+ D2C7 E5 D5        .MoreToDo:              push    hl,,de
 236+ D2C9 7E                                   ld      a,(hl)              ; bodge for now no optimise
 237+ D2CA 5F                                   ld      e,a
 238+ D2CB 23                                   inc     hl
 239+ D2CC 7E                                   ld      a,(hl)
 240+ D2CD 57                                   ld      d,a
 241+ D2CE EB                                   ex      hl,de               ; hl is now Word... address
 242+ D2CF D1                                   pop     de                  ; de back to pointer to buffer
 243+ D2D0 CD B5 D2     .ProcessWord:           call    eqshp_expand_word
 244+ D2D3 3E 20                                ld      a," "               ; speculative space
 245+ D2D5 12                                   ld      (de),a
 246+ D2D6 13                                   inc     de
 247+ D2D7 E1                                   pop     hl                  ; get string pointer back
 248+ D2D8 23                                   inc     hl
 249+ D2D9 23                                   inc     hl                  ; on to next word
 250+ D2DA 18 E2                                jr      eqshp_expand_name
 251+ D2DC
 252+ D2DC 21 92 C0     eqshp_buffer_list:      ld      hl,eqship_display_buffer                    ; hl - target buffer
 253+ D2DF 3E 01                                ld      a,1                                         ; so it will still skip them on printing
 254+ D2E1 11 00 10                             ld      de, eqship_display_buff_len
 255+ D2E4 CD A5 99                             call    memfill_dma                                 ; full buffer with ASCII 1 (unprintable character)
 256+ D2E7 21 B1 C0                             ld      hl,eqship_display_buffer+eqship_buffer_row_len-1
 257+ D2EA 11 20 00                             ld      de,eqship_buffer_row_len
 258+ D2ED 06 1A                                ld      b,ShipEquipTableSize
 259+ D2EF AF                                   xor     a
 260+ D2F0 77           .EoLLoop:               ld      (hl),a                                      ; fix all buffer lines with a null
 261+ D2F1 19                                   add     hl,de
 262+ D2F2 10 FC                                djnz    .EoLLoop
 263+ D2F4 06 1A                                ld      b,ShipEquipTableSize                        ; CurrentGameMaxEquipment
 264+ D2F6 DD 21 D6 F4                          ld      ix,ShipEquipmentList                        ; ix = equipment master table
 265+ D2FA FD 21 92 C0                          ld      iy,eqship_display_buffer                    ; iy = target buffer
 266+ D2FE 0E 00                                ld      c,0                                         ; Current Row
 267+ D300 DD 7E 01     .ProcessRow:            ld      a,(ix+1)                                    ; get can buy
 268+ D303 FE FF                                cp      $FF                                         ; if its $FF then do not display
 269+ D305 C2 12 D3                             jp      nz,.BufferItem
 270+ D308 11 10 00     .DoNotDisplay:          ld      de,ShipEquipTableRowLen                     ; mov eto next equipment list, 7 =  row length
 271+ D30B DD 19                                add     ix,de
 272+ D30D 10 F1                                djnz    .ProcessRow
 273+ D30F C3 75 D3                             jp      .DoneProcess
 274+ D312 FD E5 DD E5  .BufferItem:            push    iy,,ix,,bc
 274+ D316 C5
 275+ D317 DD 7E 00                             ld      a,(ix+0)                                    ; get can buy
 276+ D31A 21 92 D0                             ld      hl,eqship_buyable_buffer                    ;
 277+ D31D 59                                   ld      e,c
 278+ D31E 16 00                                ld      d,0                                         ;
 279+ D320 19                                   add     hl,de                                       ;
 280+ D321 77                                   ld      (hl),a                                      ; set buyable to 0
 281+ D322 21 06 F4                             ld      hl,ShipEquipNameTable                       ; look up equipment name
 282+ D325 16 08                                ld      d,EquipNameTableRowLen                       ; ship equip name row length
 283+ D327 59                                   ld      e,c
 284+ D328 ED 30                                mul
 285+ D32A 19                                   add     hl,de                                       ; hl = dword list of work pointers
 286+ D32B FD 54 FD 5D                          ld      de,iy                                       ; de = 0 column at current display buffer row
 287+ D32F C5                                   push    bc
 288+ D330 CD BE D2                             call    eqshp_expand_name                           ; expand name
 289+ D333 C1                                   pop     bc
 290+ D334 11 15 00                             ld      de,eqship_buffer_cash_col                   ; move buffer column to 20
 291+ D337 FD 19                                add     iy,de
 292+ D339 FD E5                                push    iy
 293+ D33B DD 7E 04                             ld      a,(ix+4)
 294+ D33E 5F                                   ld      e,a
 295+ D33F DD 7E 05                             ld      a,(ix+5)
 296+ D342 57                                   ld      d,a                                         ; de = price
 297+ D343 DD 62 DD 6B                          ld      ix,de
 298+ D347                                      ;push    de
 299+ D347                                      ;pop     ix
 300+ D347 11 00 00                             ld      de,0                                        ; deix = price
 301+ D34A CD 49 D1                             call    eqshp_DispDEIXtoIY                          ; print it to pos IY
 302+ D34D 3E 20                                ld      a," "
 303+ D34F FD 77 00                             ld      (IY+0),a
 304+ D352 FD 77 01                             ld      (IY+1),a
 305+ D355 FD 77 02                             ld      (IY+2),a
 306+ D358 FD E1                                pop     iy
 307+ D35A CD 7A D3                             call    .RightJustify
 308+ D35D C1 DD E1 FD                          pop     iy,,ix,,bc
 308+ D361 E1
 309+ D362 DD 7E 07     .CheckFitted:           ld      a,(ix+7)
 310+ D365 FD 77 1D                             ld      (iy+eqship_fitted_module),a
 311+ D368 11 20 00                             ld      de,eqship_buffer_row_len
 312+ D36B FD 19                                add     iy,de                                       ; now iy = start of next column
 313+ D36D 11 10 00                             ld      de,ShipEquipTableRowLen
 314+ D370 DD 19                                add     ix,de
 315+ D372 0C                                   inc     c
 316+ D373 10 8B                                djnz    .ProcessRow
 317+ D375 79           .DoneProcess:           ld      a,c
 318+ D376 32 91 C0                             ld      (eqshp_current_end),a
 319+ D379 C9                                   ret
 320+ D37A CD 7D D3     .RightJustify:          call    .RightJustify2
 321+ D37D CD 80 D3     .RightJustify2:         call    .RightJustify3
 322+ D380 FD 7E 03     .RightJustify3:         ld      a,(iy+3)
 323+ D383 FE 20                                cp      " "
 324+ D385 CC 89 D3                             call    z,.ShuffleRight
 325+ D388 C9                                   ret
 326+ D389 FD E5        .ShuffleRight:          push    iy
 327+ D38B E1                                   pop     hl
 328+ D38C 3E 03                                ld      a,3
 329+ D38E ED 31                                add     hl,a
 330+ D390 FD 7E 02                             ld      a,(iy+2)
 331+ D393 77                                   ld      (hl),a
 332+ D394 2B                                   dec     hl
 333+ D395 FD 7E 01                             ld      a,(iy+1)
 334+ D398 77                                   ld      (hl),a
 335+ D399 2B                                   dec     hl
 336+ D39A FD 7E 00                             ld      a,(iy+0)
 337+ D39D 77                                   ld      (hl),a
 338+ D39E 2B                                   dec     hl
 339+ D39F 3E 20                                ld      a," "
 340+ D3A1 77                                   ld      (hl),a
 341+ D3A2 C9                                   ret
 342+ D3A3
 343+ D3A3
 344+ D3A3              draw_eqship_items:      MMUSelectLayer1
 344+ D3A3 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 345+ D3A7 CD 80 E0                             call    l1_cls
 346+ D3AA 06 03                                ld		b,3
 347+ D3AC 21 0D C0                             ld		hl,eqshp_boiler_text
 348+ D3AF CD 6E D2                             call	EQSHP_print_boiler_text
 349+ D3B2 CD A4 D2                             call    eqshp_DisplayCash
 350+ D3B5 3A 90 C0                             ld      a,(eqshp_current_topItem)
 351+ D3B8 16 20                                ld      d,eqship_buffer_row_len
 352+ D3BA 5F                                   ld      e,a
 353+ D3BB ED 30                                mul
 354+ D3BD 21 92 C0                             ld      hl,eqship_display_buffer
 355+ D3C0 19                                   add     hl,de
 356+ D3C1 3A 90 C0                             ld      a,(eqshp_current_topItem)
 357+ D3C4 47                                   ld      b,a
 358+ D3C5 3A 91 C0                             ld      a,(eqshp_current_end)
 359+ D3C8 90                                   sub     b
 360+ D3C9                                      JumpIfALTNusng  18, .FillScreen
 360+ D3C9 FE 12       >                        cp      18
 360+ D3CB DA D2 D3    >                        jp		c, .FillScreen
 361+ D3CE 06 12        .JustWindowing:         ld      b,18
 362+ D3D0 18 01                                jr      .ReadyToPrint
 363+ D3D2 47           .FillScreen:            ld      b,a         ; the mumber of rows to display
 364+ D3D3 11 08 18     .ReadyToPrint:          ld      de,eqshp_position
 365+ D3D6 D5 E5 C5     .DrawARow:              push    de,,hl,,bc                  ; "l1 PrintAt, pixel row, whole char col, DE = yx, HL = message Addr"
 366+ D3D9 CD C8 E0                             call    l1_print_at
 366+ D3DC
 367+ D3DC C1 E1                                pop     hl,,bc                      ; get mesage addr back and move down one line
 368+ D3DE 11 20 00                             ld      de,eqship_buffer_row_len
 369+ D3E1 19                                   add     hl,de
 370+ D3E2 D1                                   pop     de                          ; get output row back
 371+ D3E3 3E 08                                ld      a,8
 372+ D3E5 82                                   add     a,d
 373+ D3E6 57                                   ld      d,a
 374+ D3E7 10 ED                                djnz    .DrawARow
 375+ D3E9 C9                                   ret
 376+ D3EA
 377+ D3EA              draw_eqshp_menu:        InitNoDoubleBuffer
 377+ D3EA             >                            MMUSelectLayer1
 377+ D3EA ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 377+ D3EE CD 80 E0    >                            call	l1_cls
 377+ D3F1 3E 07       >                            ld		a,7
 377+ D3F3 CD 9B E0    >                            call	l1_attr_cls_to_a
 377+ D3F6             >                            MMUSelectLayer2
 377+ D3F6 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 377+ D3FA CD 09 E0    >                            call    asm_l2_double_buffer_off
 377+ D3FD CD 01 E1    >                            call	l2_cls	; Get some space
 377+ D400             >                            MMUSelectSpriteBank
 377+ D400 ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
 377+ D404 CD A4 E4    >                            call    sprite_cls_cursors
 378+ D407 3E 20                                ld      a,$20
 379+ D409 32 EA 9D                             ld      (MenuIdMax),a
 380+ D40C 3A D4 9E     .SetData:               ld      a,(Galaxy)
 381+ D40F                                      MMUSelectGalaxyA
 381+ D40F ED 92 57    >                     nextreg GalaxyDataMMU,       a
 382+ D412 CD 6D F9                             call    galaxy_planet_data
 383+ D415 CD F5 F8                             call    galaxy_equip_market
 384+ D418 ED 4B E7 9E                          ld      bc,(PresentSystemX)
 385+ D41C CD BB FA                             call    galaxy_name_at_bc
 386+ D41F CD 6D F9                             call    galaxy_planet_data
 387+ D422 AF                                   xor     a
 388+ D423 32 90 C0                             ld      (eqshp_current_topItem),a
 389+ D426 CD DC D2                             call    eqshp_buffer_list
 390+ D429 01 01 01     .Drawbox:               ld		bc,$0101
 391+ D42C 11 FD BE                             ld		de,$BEFD
 392+ D42F 3E C0                                ld		a,$C0
 393+ D431                                      MMUSelectLayer2
 393+ D431 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 394+ D435 CD 4B E2                             call	l2_draw_box
 395+ D438 01 01 0A                             ld		bc,$0A01
 396+ D43B 11 C0 FE                             ld		de,$FEC0
 397+ D43E CD B5 E2                             call	l2_draw_horz_line
 398+ D441 3A D4 9E     .StaticText:	        ld      a,(Galaxy)
 399+ D444                                      MMUSelectGalaxyA
 399+ D444 ED 92 57    >                     nextreg GalaxyDataMMU,       a
 400+ D447 3E 19                                ld		a,25
 401+ D449 CD 7B AB                             call	expandTokenToString
 402+ D44C CD 7A F6                             call	GetDigramGalaxySeed
 403+ D44F CD A3 D3                             call    draw_eqship_items
 404+ D452 AF           .InitialHighlight:      xor     a
 405+ D453 32 8F C0                             ld      (eqshp_selected_row),a        ; assume on row zero
 406+ D456 CD 12 D1                             call    eqshp_highlight_row
 407+ D459 CD A4 D2     .DisCash:               call    eqshp_DisplayCash
 408+ D45C C9                                   ret
 409+ D45D
 410+ D45D              ;----------------------------------------------------------------------------------------------------------------------------------
 411+ D45D CD DC D2     eqip_refesh_buffer:     call    eqshp_buffer_list
 412+ D460 3A 8F C0                             ld      a,(eqshp_selected_row)              ; get revised list length
 413+ D463 47                                   ld      b,a
 414+ D464 3A 90 C0                             ld      a,(eqshp_current_topItem)           ; get current top of screen
 415+ D467 4F                                   ld      c,a
 416+ D468 80                                   add     b                                   ; a = top + selected row
 417+ D469 21 91 C0                             ld      hl,eqshp_current_end
 418+ D46C                                      CallIfAGTENusng (hl), .NewListShorter       ; if a > new list len then rebuild
 418+ D46C BE          >                        cp      (hl)
 418+ D46D D4 73 D4    >                        call	nc,.NewListShorter
 419+ D470 C3 7F D4                             jp      .RedrawList
 420+ D473 C5           .NewListShorter:        push    bc
 421+ D474 CD 22 D1                             call    eqshp_lowlight_row
 422+ D477 C1                                   pop     bc
 423+ D478 3A 91 C0                             ld      a,(eqshp_current_end)               ; b = end of list
 424+ D47B 91                                   sub     c                                   ; minus current top
 425+ D47C 32 8F C0                             ld      (eqshp_selected_row),a
 426+ D47F CD 12 D1     .RedrawList:            call    eqshp_highlight_row
 427+ D482 CD A3 D3                             call    draw_eqship_items
 428+ D485 C9                                   ret
 429+ D486
 430+ D486              ;----------------------------------------------------------------------------------------------------------------------------------
 431+ D486              ; Handles all the input whilst in the market menu
 432+ D486 3E 4A        loop_eqshp_menu:        ld      a,c_Pressed_CursorUp
 433+ D488 CD 0A 9B                             call    is_key_pressed
 434+ D48B CC A7 D4                             call    z,eqshp_UpPressed
 435+ D48E 3E 4C                                ld      a,c_Pressed_CursorDown
 436+ D490 CD 0A 9B                             call    is_key_pressed
 437+ D493 CC C7 D4                             call    z,eqshp_DownPressed
 438+ D496 3E 08                                ld      a,c_Pressed_RollLeft
 439+ D498 CD 0A 9B                             call    is_key_pressed
 440+ D49B CC F3 D4                             call    z,eqshp_LeftPressed
 441+ D49E 3E 0A                                ld      a,c_Pressed_RollRight
 442+ D4A0 CD 0A 9B                             call    is_key_pressed
 443+ D4A3 CC 68 D5                             call    z,eqshp_RightPressed
 444+ D4A6 C9                                   ret
 445+ D4A7
 446+ D4A7              ;----------------------------------------------------------------------------------------------------------------------------------
 447+ D4A7 3A 8F C0     eqshp_UpPressed:        ld      a,(eqshp_selected_row)
 448+ D4AA FE 00                                cp      0
 449+ D4AC 28 0B                                jr      z,.check_scroll_up
 450+ D4AE CD 22 D1                             call    eqshp_lowlight_row
 451+ D4B1 21 8F C0                             ld      hl,eqshp_selected_row
 452+ D4B4 35                                   dec     (hl)
 453+ D4B5 CD 12 D1                             call    eqshp_highlight_row
 454+ D4B8 C9                                   ret
 455+ D4B9 3A 90 C0     .check_scroll_up:       ld      a,(eqshp_current_topItem)
 456+ D4BC FE 00                                cp      0
 457+ D4BE C8                                   ret     z
 458+ D4BF 3D                                   dec     a           ; chjange later to buffering step back 1
 459+ D4C0 32 90 C0                             ld      (eqshp_current_topItem),a
 460+ D4C3 CD A3 D3                             call    draw_eqship_items
 461+ D4C6 C9                                   ret
 462+ D4C7              ;----------------------------------------------------------------------------------------------------------------------------------
 463+ D4C7 3A 91 C0     eqshp_DownPressed:      ld      a,(eqshp_current_end)
 464+ D4CA 47                                   ld      b,a                             ; This check is if the current list is < one screen
 465+ D4CB 05                                   dec     b
 466+ D4CC 3A 8F C0                             ld      a,(eqshp_selected_row)
 467+ D4CF B8                                   cp      b
 468+ D4D0 C8                                   ret     z
 469+ D4D1 FE 11                                cp      17
 470+ D4D3 28 0B                                jr      z, .check_scroll_down
 471+ D4D5 CD 22 D1                             call    eqshp_lowlight_row
 472+ D4D8 21 8F C0                             ld      hl,eqshp_selected_row
 473+ D4DB 34                                   inc     (hl)
 474+ D4DC CD 12 D1                             call    eqshp_highlight_row
 475+ D4DF C9                                   ret
 476+ D4E0 47           .check_scroll_down:     ld      b,a
 477+ D4E1 3A 90 C0                             ld      a,(eqshp_current_topItem)
 478+ D4E4 80                                   add     b
 479+ D4E5 3C                                   inc     a
 480+ D4E6 21 91 C0                             ld      hl,eqshp_current_end
 481+ D4E9                                      ReturnIfAGTEusng      (hl)
 481+ D4E9 BE          >                        cp    (hl)
 481+ D4EA D0          >                        ret	 nc
 482+ D4EB 21 90 C0     .can_scroll_down:       ld      hl,eqshp_current_topItem
 483+ D4EE 34                                   inc     (hl)
 484+ D4EF CD A3 D3                             call    draw_eqship_items
 485+ D4F2 C9                                   ret
 486+ D4F3              ;----------------------------------------------------------------------------------------------------------------------------------
 487+ D4F3 3A D4 9E     eqshp_LeftPressed:      ld      a,(Galaxy)
 488+ D4F6                                      MMUSelectGalaxyA
 488+ D4F6 ED 92 57    >                     nextreg GalaxyDataMMU,       a
 489+ D4F9 DD 21 D6 F4                          ld      ix,ShipEquipmentList
 490+ D4FD 3A 90 C0     .IsItFuel:              ld      a,(eqshp_current_topItem)   ; Can't refund fuel
 491+ D500 47                                   ld      b,a
 492+ D501 3A 8F C0                             ld      a,(eqshp_selected_row)
 493+ D504 80                                   add     b
 494+ D505 FE 00                                cp      0
 495+ D507 C8                                   ret     z
 496+ D508 4F           .FuelNotSelected:       ld      c,a
 497+ D509 16 10        .FindInTable:           ld      d,ShipEquipTableRowLen
 498+ D50B 5F                                   ld      e,a
 499+ D50C ED 30                                mul
 500+ D50E DD 19                                add     ix,de
 501+ D510 DD 7E 07                             ld      a,(ix+7)
 502+ D513 FE 2D                                cp      "-"
 503+ D515 C8                                   ret     z
 504+ D516 79           .CheckIfMissle:         ld      a,c
 505+ D517 FE 01                                cp      EQ_MISSILE
 506+ D519 28 2F                                jr      z,.RefundMissle
 507+ D51B DD 5E 04     .RefundItemCash:        ld      e,(ix+4)
 508+ D51E DD 56 05                             ld      d,(ix+5)
 509+ D521 E5 C5                                push    hl,,bc
 510+ D523 CD D9 AD                             call    addDEtoCash         ; refund laser value
 511+ D526 C1 E1                                pop     hl,,bc
 512+ D528 3E 2D                                ld      a,"-"
 513+ D52A DD 77 07                             ld      (ix+7),a
 514+ D52D 21 60 A3                             ld      hl,EquipmentFitted
 515+ D530 79                                   ld      a,c                 ; get back current laser ref
 516+ D531 ED 31                                add     hl,a
 517+ D533 36 00                                ld      (hl),EquipmentItemNotFitted; remove laser from equipment
 518+ D535 CD 5D D4                             call    eqip_refesh_buffer
 519+ D538 DD 7E 08                             ld      a,(ix+8)
 520+ D53B FE FF                                cp      $FF
 521+ D53D C8                                   ret     z
 522+ D53E 21 58 A3     .ItsALaser              ld      hl,LaserType        ; clear out respective current laser
 523+ D541 47                                   ld      b,a
 524+ D542 DD 7E 09                             ld      a,(ix+9)
 525+ D545 ED 31                                add     hl,a
 526+ D547 36 FF                                ld      (hl),$FF            ; $FF = not fitted
 527+ D549 C9                                   ret
 528+ D54A DD 5E 04     .RefundMissle           ld      e,(ix+4)
 529+ D54D DD 56 05                             ld      d,(ix+5)
 530+ D550 E5 C5                                push    hl,,bc
 531+ D552 CD D9 AD                             call    addDEtoCash         ; refund laser value
 532+ D555 C1 E1                                pop     hl,,bc
 533+ D557 DD 7E 07                             ld      a,(ix+7)
 534+ D55A 3D                                   dec     a
 535+ D55B FE 30                                cp      "0"
 536+ D55D 20 02                                jr      nz,.NotAllSold
 537+ D55F 3E 2D        .AllSold:               ld      a,"-"
 538+ D561 DD 77 07     .NotAllSold:            ld      (ix+7),a
 539+ D564 CD 5D D4                             call    eqip_refesh_buffer
 540+ D567 C9                                   ret
 541+ D568              ;----------------------------------------------------------------------------------------------------------------------------------
 542+ D568 3A D4 9E     eqshp_RightPressed:     ld      a,(Galaxy)
 543+ D56B                                      MMUSelectGalaxyA
 543+ D56B ED 92 57    >                     nextreg GalaxyDataMMU,       a
 544+ D56E DD 21 D6 F4                          ld      ix,ShipEquipmentList
 545+ D572 3A 90 C0                             ld      a,(eqshp_current_topItem)
 546+ D575 47                                   ld      b,a
 547+ D576 3A 8F C0                             ld      a,(eqshp_selected_row)
 548+ D579 80                                   add     a,b
 549+ D57A FE 01                                cp      EQ_MISSILE
 550+ D57C 20 0A                                jr      nz,.NotAMissileBuy
 551+ D57E 08           .ItsAMissile:           ex      af,af'
 552+ D57F 3E 34                                ld      a,"4"
 553+ D581 32 9A D5                             ld      (.CompareCheck+1),a
 554+ D584 08                                   ex      af,af'
 555+ D585 C3 8F D5                             jp      .FindInTable
 556+ D588 08           .NotAMissileBuy:        ex      af,af'
 557+ D589 3E 2A                                ld      a,"*"
 558+ D58B 32 9A D5                             ld      (.CompareCheck+1),a
 559+ D58E 08                                   ex      af,af'
 560+ D58F 16 10        .FindInTable:           ld      d,ShipEquipTableRowLen
 561+ D591 5F                                   ld      e,a
 562+ D592 ED 30                                mul
 563+ D594 DD 19                                add     ix,de
 564+ D596 DD 7E 07                             ld      a,(ix+7)
 565+ D599 FE 2A        .CompareCheck:          cp      "*"; not true for missles astyou can buy 1 to 4
 566+ D59B C8                                   ret     z
 567+ D59C 47           .Purchasable:           ld      b,a
 568+ D59D DD 7E 06                             ld      a,(ix+6)
 569+ D5A0 FE 01                                cp      EQ_MISSILE
 570+ D5A2 20 06                                jr      nz,.NotMissleMax
 571+ D5A4 21 4A 9E     .MissleQuanity:         ld      hl,NbrMissiles
 572+ D5A7 78                                   ld      a,b
 573+ D5A8 BE                                   cp      (hl)
 574+ D5A9 C8                                   ret     z
 575+ D5AA 4F           .NotMissleMax:          ld      c,a
 576+ D5AB DD 7E 01                             ld      a,(ix+1)
 577+ D5AE FE FF                                cp      $FF
 578+ D5B0 C8                                   ret     z
 579+ D5B1 2A 43 A3     .CheckCash:             ld      hl,(Cash+2)
 580+ D5B4 7C                                   ld      a,h
 581+ D5B5 B5                                   or      l
 582+ D5B6 20 0F                                jr      nz,.MoreThanRequired
 583+ D5B8 2A 41 A3                             ld      hl,(Cash)
 584+ D5BB 7C                                   ld      a,h
 585+ D5BC FE 00                                cp      0
 586+ D5BE 20 07                                jr      nz,.MoreThanRequired
 587+ D5C0 DD 7E 02                             ld      a,(ix+2)
 588+ D5C3 BD                                   cp      l
 589+ D5C4 30 01                                jr      nc,.MoreThanRequired
 590+ D5C6 C9                                   ret                         ; Insufficient Funds
 591+ D5C7 DD 7E 06     .MoreThanRequired:      ld      a,(ix+6)
 592+ D5CA FE 00                                cp      0
 593+ D5CC 28 15                                jr      z,.MaxFuelOut
 594+ D5CE FE 01                                cp      1
 595+ D5D0 28 1B                                jr      z,.AddMissle
 596+ D5D2                                      JumpIfAGTENusng  EQ_FRONT_PULSE,.AddLaser
 596+ D5D2 FE 0A       >                        cp     EQ_FRONT_PULSE
 596+ D5D4 D2 F7 D5    >                        jp		nc,.AddLaser
 597+ D5D7 21 60 A3     .AddNormalItem:         ld      hl,EquipmentFitted
 598+ D5DA ED 31                                add     hl,a
 599+ D5DC 36 FF                                ld      (hl),EquipmentItemFitted
 600+ D5DE 3E 2A                                ld      a,"*"
 601+ D5E0 C3 3F D6                             jp      .AddedItem
 602+ D5E3              .MaxFuelOut:            MaxFuelMacro
 602+ D5E3 3E 46       >						ld		a,MaxFuelLevel
 602+ D5E5 32 45 A3    >						ld		(Fuel),a
 603+ D5E8 3E 2A                                ld      a,"*"
 604+ D5EA C3 3F D6                             jp      .AddedItem
 605+ D5ED 21 4A 9E     .AddMissle:             ld      hl,NbrMissiles
 606+ D5F0 34                                   inc     (hl)
 607+ D5F1 7E                                   ld      a,(hl)
 608+ D5F2 C6 30                                add     "0"
 609+ D5F4 C3 3F D6                             jp      .AddedItem
 610+ D5F7 DD 7E 08     .AddLaser:              ld      a,(ix+8)            ; Get if its a laser, $FF = no laser
 611+ D5FA FE FF                                cp      $FF
 612+ D5FC 20 29                                jr      nz,.BuyLaser
 613+ D5FE              .LargeCargoBay: ;TODO
 614+ D5FE 4F           .RefundExistingLaser:   ld      c,a                 ; retain current laser nbr
 615+ D5FF 21 D6 F4                             ld      hl,ShipEquipmentList
 616+ D602 16 10                                ld      d,ShipEquipTableRowLen
 617+ D604 5F                                   ld      e,a
 618+ D605 ED 30                                mul
 619+ D607 19                                   add     hl,de               ; now we have the row for the current laser
 620+ D608 3E 04                                ld      a,4
 621+ D60A ED 31                                add     hl,a
 622+ D60C 7E                                   ld      a,(hl)
 623+ D60D 5F                                   ld      e,a
 624+ D60E 23                                   inc     hl
 625+ D60F 7E                                   ld      a,(hl)
 626+ D610 57                                   ld      d,a
 627+ D611 E5 C5                                push    hl,,bc
 628+ D613 CD D9 AD                             call    addDEtoCash         ; refund laser value
 629+ D616 C1 E1                                pop     hl,,bc
 630+ D618 3E 02                                ld      a,2
 631+ D61A ED 31                                add     hl,a
 632+ D61C 3E 2D                                ld      a,"-"
 633+ D61E 77                                   ld      (hl),a              ; clear on ship equipment
 634+ D61F 21 60 A3                             ld      hl,EquipmentFitted
 635+ D622 79                                   ld      a,c                 ; get back current laser ref
 636+ D623 ED 31                                add     hl,a
 637+ D625 36 00                                ld      (hl),EquipmentItemNotFitted  ; remove laser from equipment
 638+ D627 21 60 A3     .BuyLaser:              ld      hl,EquipmentFitted
 639+ D62A DD 7E 06                             ld      a,(ix+6)
 640+ D62D ED 31                                add     hl,a
 641+ D62F 36 FF                                ld      (hl),EquipmentItemFitted
 642+ D631 DD 7E 09                             ld      a,(ix+9)            ; get laser position
 643+ D634 21 58 A3                             ld      hl,LaserType
 644+ D637 ED 31                                add     hl,a
 645+ D639 DD 7E 08                             ld      a,(ix+8)            ; get type
 646+ D63C 77                                   ld      (hl),a
 647+ D63D 3E 2A                                ld      a,"*"
 648+ D63F DD 77 07     .AddedItem              ld      (ix+7),a
 649+ D642 DD 5E 04                             ld      e,(ix+4)
 650+ D645 DD 56 05                             ld      d,(ix+5)
 651+ D648 CD EC AD                             call    subDEfromCash
 652+ D64B CD 5D D4                             call    eqip_refesh_buffer
 653+ D64E C9                                   ret
# file closed: ./Menus/equip_ship_menu.asm
 895  D64F
 896  D64F
 897  D64F                  SLOT    LaunchShipAddr
 898  D64F                  PAGE    BankLaunchShip
 899  D64F                  ORG     LaunchShipAddr
 900  C000                  INCLUDE "./Transitions/launch_ship.asm"
# file opened: ./Transitions/launch_ship.asm
   1+ C000 4C 61 75 6E  launchship_page_marker  DB "LaunchShipPG65"
   1+ C004 63 68 53 68
   1+ C008 69 70 50 47
   1+ C00C 36 35
   2+ C00E
   3+ C00E 7E 3F 04 02  launchdraw_table        DB $7E,$3F, $04,$02, $66            ; purple blue
   3+ C012 66
   4+ C013              launchdraw_rowsize      equ $-launchdraw_table
   5+ C013 7C 3E 08 04                          DB $7C,$3E, $08,$04, $66
   5+ C017 66
   6+ C018 7A 3D 0C 06                          DB $7A,$3D, $0C,$06, $66
   6+ C01C 66
   7+ C01D 78 3C 10 08                          DB $78,$3C, $10,$08, $66
   7+ C021 66
   8+ C022 76 3B 14 0A                          DB $76,$3B, $14,$0A, $66
   8+ C026 66
   9+ C027 74 3A 18 0C                          DB $74,$3A, $18,$0C, $66
   9+ C02B 66
  10+ C02C 70 38 20 10                          DB $70,$38, $20,$10, $66
  10+ C030 66
  11+ C031 6C 36 28 14                          DB $6C,$36, $28,$14, $05            ; Black Blue
  11+ C035 05
  12+ C036 68 34 30 18                          DB $68,$34, $30,$18, $05
  12+ C03A 05
  13+ C03B 64 32 38 1C                          DB $64,$32, $38,$1C, $05
  13+ C03F 05
  14+ C040 60 30 40 20                          DB $60,$30, $40,$20, $05
  14+ C044 05
  15+ C045 5C 2E 48 24                          DB $5C,$2E, $48,$24, $05            ; Dark Blue
  15+ C049 05
  16+ C04A 58 2C 50 28                          DB $58,$2C, $50,$28, $02
  16+ C04E 02
  17+ C04F 54 2A 58 2C                          DB $54,$2A, $58,$2C, $02
  17+ C053 02
  18+ C054 50 28 60 30                          DB $50,$28, $60,$30, $02
  18+ C058 02
  19+ C059 4C 26 68 34                          DB $4C,$26, $68,$34, $02
  19+ C05D 02
  20+ C05E 46 23 74 3A                          DB $46,$23, $74,$3A, $02
  20+ C062 02
  21+ C063 40 20 80 40                          DB $40,$20, $80,$40, $02
  21+ C067 02
  22+ C068 38 1C 90 48                          DB $38,$1C, $90,$48, $01            ;Very Dark Blue
  22+ C06C 01
  23+ C06D 30 18 A0 50                          DB $30,$18, $A0,$50, $01
  23+ C071 01
  24+ C072 26 13 B4 5A                          DB $26,$13, $B4,$5A, $01
  24+ C076 01
  25+ C077 1C 0E C8 64                          DB $1C,$0E, $C8,$64, $01
  25+ C07B 01
  26+ C07C 10 08 E0 70                          DB $10,$08, $E0,$70, $00            ;Black
  26+ C080 00
  27+ C081 02 01 FC 7E                          DB $02,$01, $FC,$7E, $00
  27+ C085 00
  28+ C086 FF                                   DB $FF
  29+ C087
  30+ C087              launchtablesize         EQU ($ - launchdraw_table)/launchdraw_rowsize
  31+ C087
  32+ C087 7E 3F 04 02  dockingdraw_table       DB $7E,$3F, $04,$02, $00            ; purple blue
  32+ C08B 00
  33+ C08C              dockingdraw_rowsize     equ $-dockingdraw_table
  34+ C08C 7C 3E 08 04                          DB $7C,$3E, $08,$04, $00
  34+ C090 00
  35+ C091 7A 3D 0C 06                          DB $7A,$3D, $0C,$06, $00
  35+ C095 00
  36+ C096 78 3C 10 08                          DB $78,$3C, $10,$08, $04
  36+ C09A 04
  37+ C09B 76 3B 14 0A                          DB $76,$3B, $14,$0A, $04
  37+ C09F 04
  38+ C0A0 74 3A 18 0C                          DB $74,$3A, $18,$0C, $04
  38+ C0A4 04
  39+ C0A5 70 38 20 10                          DB $70,$38, $20,$10, $21
  39+ C0A9 21
  40+ C0AA 6C 36 28 14                          DB $6C,$36, $28,$14, $21            ; Black Blue
  40+ C0AE 21
  41+ C0AF 68 34 30 18                          DB $68,$34, $30,$18, $21
  41+ C0B3 21
  42+ C0B4 64 32 38 1C                          DB $64,$32, $38,$1C, $25
  42+ C0B8 25
  43+ C0B9 60 30 40 20                          DB $60,$30, $40,$20, $25
  43+ C0BD 25
  44+ C0BE 5C 2E 48 24                          DB $5C,$2E, $48,$24, $25            ; Dark Blue
  44+ C0C2 25
  45+ C0C3 58 2C 50 28                          DB $58,$2C, $50,$28, $25
  45+ C0C7 25
  46+ C0C8 54 2A 58 2C                          DB $54,$2A, $58,$2C, $25
  46+ C0CC 25
  47+ C0CD 50 28 60 30                          DB $50,$28, $60,$30, $4C
  47+ C0D1 4C
  48+ C0D2 4C 26 68 34                          DB $4C,$26, $68,$34, $4C
  48+ C0D6 4C
  49+ C0D7 46 23 74 3A                          DB $46,$23, $74,$3A, $4C
  49+ C0DB 4C
  50+ C0DC 40 20 80 40                          DB $40,$20, $80,$40, $4C
  50+ C0E0 4C
  51+ C0E1 38 1C 90 48                          DB $38,$1C, $90,$48, $6D            ;Very Dark Blue
  51+ C0E5 6D
  52+ C0E6 30 18 A0 50                          DB $30,$18, $A0,$50, $6D
  52+ C0EA 6D
  53+ C0EB 26 13 B4 5A                          DB $26,$13, $B4,$5A, $6D
  53+ C0EF 6D
  54+ C0F0 1C 0E C8 64                          DB $1C,$0E, $C8,$64, $6D
  54+ C0F4 6D
  55+ C0F5 10 08 E0 70                          DB $10,$08, $E0,$70, $92            ;Black
  55+ C0F9 92
  56+ C0FA 02 01 FC 7E                          DB $02,$01, $FC,$7E, $92
  56+ C0FE 92
  57+ C0FF FF                                   DB $FF
  58+ C100
  59+ C100              dockingtablesize         EQU ($ - dockingdraw_table)/dockingdraw_rowsize
  60+ C100
  61+ C100              init_countdown          EQU $FF
  62+ C100 00           launch_countdown        DB  $0000
  63+ C101 0E C0        launch_table_idx        DW launchdraw_table
  64+ C103 87 C0        docking_table_idx       DW dockingdraw_table
  65+ C105 00           current_offsetX         db 0
  66+ C106 00           current_offsetY         db 0
  67+ C107
  68+ C107
  69+ C107              LaunchTubeEdges         MMUSelectLayer2
  69+ C107 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
  70+ C10B 01 00 00                             ld      bc,$0000
  71+ C10E 11 92 01                             ld      de,$0192
  72+ C111 78           .drawLoop1              ld      a,b
  73+ C112 FE 80                                cp      128
  74+ C114 28 25                                jr      z,.DoneEdge
  75+ C116 F5                                   push    af
  76+ C117 C5 D5 C5 D5                          push    bc,,de,,bc,,de
  77+ C11B CD A8 E2                             call    l2_draw_horz_dma_bank           ;"bc = left side row,col, d = length, e = color"
  78+ C11E D1 C1                                pop     bc,,de
  79+ C120 3E FF                                ld      a,$FF
  80+ C122 92                                   sub     d
  81+ C123 4F                                   ld      c,a
  82+ C124 0C                                   inc     c
  83+ C125 CD A8 E2                             call    l2_draw_horz_dma_bank
  84+ C128 D1 C1                                pop     bc,,de
  85+ C12A 78                                   ld      a,b
  86+ C12B FE 40                                cp      64
  87+ C12D 30 06                                jr      nc,.ReduceLoop
  88+ C12F 14                                   inc     d
  89+ C130 14                                   inc     d
  90+ C131 F1                                   pop     af
  91+ C132 04                                   inc     b
  92+ C133 18 DC                                jr      .drawLoop1
  93+ C135 15           .ReduceLoop:            dec     d
  94+ C136 15                                   dec     d
  95+ C137 F1                                   pop     af
  96+ C138 04                                   inc     b
  97+ C139 18 D6                                jr      .drawLoop1
  98+ C13B 3E 80        .DoneEdge:              ld      a,$80
  99+ C13D 01 00 00                             ld      bc,$0000                        ; Top Left
 100+ C140 11 FF 80                             ld      de,$80FF                        ; Bottom Right
 101+ C143 CD 5E E6                             call    l2_draw_diagonal
 102+ C146 3E 80                                ld      a,$80
 103+ C148 01 00 80                             ld      bc,$8000                        ; Botom Left
 104+ C14B 11 FF 00                             ld      de,$00FF                        ; Top Right
 105+ C14E CD 5E E6                             call    l2_draw_diagonal
 106+ C151
 107+ C151 01 00 00                             ld      bc,$0000
 108+ C154 11 80 00                             ld      DE,$0080
 109+ C157 26 60                                ld      h,$60
 110+ C159 2E 55                                ld      l,$55
 111+ C15B C9                                   ret
 112+ C15C
 113+ C15C              LaunchConsole:          MMUSelectConsoleBank                    ; Draw Console
 113+ C15C ED 91 57 3D >					 nextreg ConsoleImageDataMMU,  BankConsole
 114+ C160 21 00 50                             ld      hl,ScreenL1Bottom
 115+ C163 11 00 E0                             ld      de,ConsoleImageData
 116+ C166 01 00 08                             ld      bc, ScreenL1BottomLen
 117+ C169 CD CB 99                             call    memcopy_dma
 118+ C16C 21 00 5A                             ld      hl,ScreenL1AttrBtm       ; now the pointers are in Ubnk its easy to read
 119+ C16F 11 00 E8                             ld      de,ConsoleAttributes
 120+ C172 01 00 01                             ld      bc, ScreenL1AttrBtmLen
 121+ C175 CD CB 99                             call    memcopy_dma
 122+ C178 C9                                   ret
 123+ C179
 124+ C179              CoriloisStation         equ     13
 125+ C179
 126+ C179
 127+ C179              draw_launch_ship:       MMUSelectLayer1
 127+ C179 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 128+ C17D CD 80 E0                             call    l1_cls
 129+ C180 CD 9A E0                             call    l1_attr_cls
 130+ C183                                      MMUSelectSpriteBank
 130+ C183 ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
 131+ C187 CD A4 E4                             call    sprite_cls_cursors
 132+ C18A                                      MMUSelectLayer2
 132+ C18A ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 133+ C18E CD 03 E0                             call    asm_l2_double_buffer_on
 134+ C191 3E FF        .CurrentBuffer:         ld      a,$FF                           ; Clear upper 2 thirds to white
 135+ C193 32 AA E0                             ld      (l2_cls_byte),a
 136+ C196 CD CA E0                             call    l2_set_color_upper2
 137+ C199 3E E3                                ld      a,COLOUR_TRANSPARENT            ; Lower third transparent
 138+ C19B 32 AA E0                             ld      (l2_cls_byte),a
 139+ C19E CD F6 E0                             call    l2_cls_lower_third
 140+ C1A1 CD 07 C1                             call    LaunchTubeEdges
 141+ C1A4 CD 5C C1                             call    LaunchConsole
 142+ C1A7              .NextBuffer:            MMUSelectLayer2
 142+ C1A7 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 143+ C1AB CD 15 E1                             call    l2_flip_buffers
 144+ C1AE 3E FF                                ld      a,$FF                           ; Clear upper 2 thirds to white
 145+ C1B0 32 AA E0                             ld      (l2_cls_byte),a
 146+ C1B3 CD CA E0                             call    l2_set_color_upper2
 147+ C1B6 3E E3                                ld      a,COLOUR_TRANSPARENT            ; Lower third transparent
 148+ C1B8 32 AA E0                             ld      (l2_cls_byte),a
 149+ C1BB CD F6 E0                             call    l2_cls_lower_third
 150+ C1BE CD 07 C1                             call    LaunchTubeEdges
 151+ C1C1 CD 5C C1                             call    LaunchConsole
 152+ C1C4 3E FF        .SetUpTimers:           ld      a,init_countdown
 153+ C1C6 32 00 C1                             ld      (launch_countdown),a
 154+ C1C9 21 0E C0                             ld      hl,launchdraw_table
 155+ C1CC 22 01 C1                             ld      (launch_table_idx),hl
 156+ C1CF AF                                   xor     a
 157+ C1D0 32 05 C1                             ld      (current_offsetX),a
 158+ C1D3 32 06 C1                             ld      (current_offsetY),a
 159+ C1D6              .SetupGalaxy:           MaxThrottle
 159+ C1D6 3A DA 9D    >                        ld      a,(SHIPMAXSPEED)
 159+ C1D9 32 DB 9D    >                        ld      (DELTA),a
 159+ C1DC 57          >                        ld      d,a
 159+ C1DD 1E 04       >                        ld      e,4
 159+ C1DF ED 30       >                        mul
 159+ C1E1 ED 53 DC 9D >                        ld      (DELT4Lo),de
 160+ C1E5                                      ZeroThrottle; DEBUG
 160+ C1E5 AF          >                        xor     a
 160+ C1E6 32 DB 9D    >                        ld      (DELTA),a
 160+ C1E9 32 DC 9D    >                        ld      (DELT4Lo),a
 160+ C1EC 32 DD 9D    >                        ld      (DELT4Lo+1),a
 161+ C1EF              ; To launch we need to set docked flag to transition FE and at teh end of the transition set to FD to rebuild universe
 162+ C1EF 3E FE                                ld      a,$FE
 163+ C1F1 32 EE 9D                             ld      (DockedFlag),a
 164+ C1F4 C9                                   ret
 165+ C1F5
 166+ C1F5
 167+ C1F5              draw_docking_ship:      MMUSelectLayer1
 167+ C1F5 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 168+ C1F9 CD 80 E0                             call    l1_cls
 169+ C1FC CD 9A E0                             call    l1_attr_cls
 170+ C1FF                                      MMUSelectSpriteBank
 170+ C1FF ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
 171+ C203 CD A4 E4                             call    sprite_cls_cursors
 172+ C206                                      MMUSelectLayer2
 172+ C206 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 173+ C20A CD 03 E0                             call    asm_l2_double_buffer_on
 174+ C20D 3E FF        .CurrentBuffer:         ld      a,$FF                           ; Clear upper 2 thirds to white
 175+ C20F 32 AA E0                             ld      (l2_cls_byte),a
 176+ C212 CD CA E0                             call    l2_set_color_upper2
 177+ C215 3E E3                                ld      a,COLOUR_TRANSPARENT            ; Lower third transparent
 178+ C217 32 AA E0                             ld      (l2_cls_byte),a
 179+ C21A CD F6 E0                             call    l2_cls_lower_third
 180+ C21D CD 07 C1                             call    LaunchTubeEdges
 181+ C220 CD 5C C1                             call    LaunchConsole
 182+ C223              .NextBuffer:            MMUSelectLayer2
 182+ C223 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 183+ C227 CD 15 E1                             call    l2_flip_buffers
 184+ C22A 3E FF                                ld      a,$FF                           ; Clear upper 2 thirds to white
 185+ C22C 32 AA E0                             ld      (l2_cls_byte),a
 186+ C22F CD CA E0                             call    l2_set_color_upper2
 187+ C232 3E E3                                ld      a,COLOUR_TRANSPARENT            ; Lower third transparent
 188+ C234 32 AA E0                             ld      (l2_cls_byte),a
 189+ C237 CD F6 E0                             call    l2_cls_lower_third
 190+ C23A CD 07 C1                             call    LaunchTubeEdges
 191+ C23D CD 5C C1                             call    LaunchConsole
 192+ C240 3E FF        .SetUpTimers:           ld      a,init_countdown
 193+ C242 32 00 C1                             ld      (launch_countdown),a
 194+ C245 21 87 C0                             ld      hl,dockingdraw_table
 195+ C248 22 03 C1                             ld      (docking_table_idx),hl
 196+ C24B AF                                   xor     a
 197+ C24C 32 05 C1                             ld      (current_offsetX),a
 198+ C24F 32 06 C1                             ld      (current_offsetY),a
 199+ C252 AF           .SetupGalaxy:           xor     a ; palcehodler as it would cause next macro to fail re initialise all universe banks
 200+ C253                                      ZeroThrottle
 200+ C253 AF          >                        xor     a
 200+ C254 32 DB 9D    >                        ld      (DELTA),a
 200+ C257 32 DC 9D    >                        ld      (DELT4Lo),a
 200+ C25A 32 DD 9D    >                        ld      (DELT4Lo+1),a
 201+ C25D 3E FF                                ld      a,$FF
 202+ C25F 32 EE 9D                             ld      (DockedFlag),a ; we don't kill off shipts as we kill them on launch
 203+ C262 C9                                   ret
 204+ C263
 205+ C263 CD 07 C1     loop_launch_ship:       call    LaunchTubeEdges
 206+ C266 3E FF                                ld      a,init_countdown
 207+ C268 32 00 C1                             ld      (launch_countdown),a
 208+ C26B 2A 01 C1                             ld      hl,(launch_table_idx)
 209+ C26E 4E                                   ld      c,(hl)
 210+ C26F 79                                   ld      a,c
 211+ C270 FE FF                                cp      $FF
 212+ C272 28 1E                                jr      z,.FinishedLaunch
 213+ C274 23                                   inc     hl
 214+ C275 46                                   ld      b,(hl)                 ; bc = top left
 215+ C276 23                                   inc     hl
 216+ C277 5E                                   ld      e,(hl)
 217+ C278 23                                   inc     hl
 218+ C279 56                                   ld      d,(hl)                 ;de = width and height
 219+ C27A 23                                   inc     hl
 220+ C27B 7E                                   ld      a,(hl)                 ; a = colour
 221+ C27C 23                                   inc     hl
 222+ C27D 22 01 C1                             ld      (launch_table_idx),hl
 223+ C280 67                                   ld      h,a
 224+ C281 C5 D5                                push    bc,,de
 225+ C283                                      MMUSelectLayer2
 225+ C283 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 226+ C287 CD 3B E2                             call    l2_draw_fill_box        ; ; "l2_draw_fill_box bc=rowcol, de=heightwidth h=color"
 227+ C28A D1 C1                                pop     bc,,de
 228+ C28C 3E 80                                ld      a,$80
 229+ C28E CD 4B E2                             call    l2_draw_box             ; "l2_draw_box bc=rowcol, de=heightwidth a=color"
 230+ C291 C9                                   ret
 231+ C292 3E FD        .FinishedLaunch:        ld      a,$FD                   ; now seed that we need a universe rebuild post launch
 232+ C294 32 EE 9D                             ld      (DockedFlag),a
 233+ C297 C9                                   ret
 234+ C298
 235+ C298 CD 07 C1     loop_docking_ship:      call    LaunchTubeEdges
 236+ C29B 3E FF                                ld      a,init_countdown
 237+ C29D 32 00 C1                             ld      (launch_countdown),a
 238+ C2A0 2A 03 C1                             ld      hl,(docking_table_idx)
 239+ C2A3 4E                                   ld      c,(hl)
 240+ C2A4 79                                   ld      a,c
 241+ C2A5 FE FF                                cp      $FF
 242+ C2A7 28 1E                                jr      z,.FinishedDocking
 243+ C2A9 23                                   inc     hl
 244+ C2AA 46                                   ld      b,(hl)                 ; bc = top left
 245+ C2AB 23                                   inc     hl
 246+ C2AC 5E                                   ld      e,(hl)
 247+ C2AD 23                                   inc     hl
 248+ C2AE 56                                   ld      d,(hl)                 ;de = width and height
 249+ C2AF 23                                   inc     hl
 250+ C2B0 7E                                   ld      a,(hl)
 251+ C2B1 23                                   inc     hl
 252+ C2B2 22 03 C1                             ld      (docking_table_idx),hl
 253+ C2B5 67                                   ld      h,a
 254+ C2B6 C5 D5                                push    bc,,de
 255+ C2B8                                      MMUSelectLayer2
 255+ C2B8 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 256+ C2BC CD 3B E2                             call    l2_draw_fill_box
 257+ C2BF D1 C1                                pop     bc,,de
 258+ C2C1 3E 80                                ld      a,$80
 259+ C2C3 CD 4B E2                             call    l2_draw_box
 260+ C2C6 C9                                   ret
 261+ C2C7              .FinishedDocking        ForceTransition ScreenStatus              ; Force move to status screen
 261+ C2C7 3E 04       >                        ld      a,ScreenStatus
 261+ C2C9 32 84 88    >                        ld      (ScreenTransitionForced), a
 262+ C2CC C9                                   ret
 263+ C2CD
 264+ C2CD
 265+ C2CD
# file closed: ./Transitions/launch_ship.asm
 901  C2CD
 902  C2CD              ; Bank 70  ------------------------------------------------------------------------------------------------------------------------
 903  C2CD                  SLOT    UniverseBankAddr
 904  C2CD                  PAGE    BankUNIVDATA0
 905  C2CD              	ORG	    UniverseBankAddr,BankUNIVDATA0
 906  C000                  INCLUDE "./Universe/Ships/univ_ship_data.asm"
# file opened: ./Universe/Ships/univ_ship_data.asm
   1+ C000              ; In  flight ship data tables
   2+ C000              ; In  flight ship data tables
   3+ C000              ; There can be upto &12 objects in flight.
   4+ C000              ; To avoid hassle of memory heap managment, the free list
   5+ C000              ; will correspond to a memory bank offset so data will be held in
   6+ C000              ; 1 bank per universe object. Its a waste of a lot of memory but really
   7+ C000              ; 1 bank per universe object. Its a waste of a lot of memory but really
   8+ C000              ; simple that way. Each bank will be 8K and swapped on 8K slot 7 $E000 to $FFFF
   9+ C000              ; This means each gets its own line list, inwork etc
  10+ C000
  11+ C000              ; "Runtime Ship Data paged into in Bank 7"
  12+ C000 55 6E 69 76  StartOfUniv:        DB "Universe PG"
  12+ C004 65 72 73 65
  12+ C008 20 50 47
  13+ C00B 58           StartOfUnivN:       DB "X"
  14+ C00C              ; NOTE we can cheat and pre allocate segs just using a DS for now
  15+ C00C
  16+ C00C              ;   \ -> & 565D \ See ship data files chosen and loaded after flight code starts running.
  17+ C00C              ; Universe map substibute for INWK
  18+ C00C              ;-Camera Position of Ship----------------------------------------------------------------------------------------------------------
  19+ C00C                                     INCLUDE "./Universe/Ships/AIRuntimeData.asm"
# file opened: ././Universe/Ships/AIRuntimeData.asm
   1++C00C              ;-Camera Position of Ship----------------------------------------------------------------------------------------------------------
   2++C00C              StartOfShipRuntimeData      EQU $
   3++C00C 00           UBnKxlo                     DB  0                       ; INWK+0
   4++C00D 00           UBnKxhi                     DB  0                       ; there are hi medium low as some times these are 24 bit
   5++C00E 00           UBnKxsgn                    DB  0                       ; INWK+2
   6++C00F 00           UBnKylo                     DB  0                       ; INWK+3 \ ylo
   7++C010 00           UBnKyhi                     DB  0                       ; INWK+4 \ yHi
   8++C011 00           UBnKysgn                    DB  0                       ; INWK +5
   9++C012 00           UBnKzlo                     DB  0                       ; INWK +6
  10++C013 00           UBnKzhi                     DB  0                       ; INWK +7
  11++C014 00           UBnKzsgn                    DB  0                       ; INWK +8
  12++C015              ;-Zero page for when we page data temporarily into page zero to read a second ship, e.g. missile tracking
  13++C015              ZeroPageUBnKxlo             EQU UBnKxlo    - StartOfShipRuntimeData
  14++C015              ZeroPageUBnKxhi             EQU UBnKxhi    - StartOfShipRuntimeData
  15++C015              ZeroPageUBnKxsgn            EQU UBnKxsgn   - StartOfShipRuntimeData
  16++C015              ZeroPageUBnKylo             EQU UBnKylo    - StartOfShipRuntimeData
  17++C015              ZeroPageUBnKyhi             EQU UBnKyhi    - StartOfShipRuntimeData
  18++C015              ZeroPageUBnKysgn            EQU UBnKysgn   - StartOfShipRuntimeData
  19++C015              ZeroPageUBnKzlo             EQU UBnKzlo    - StartOfShipRuntimeData
  20++C015              ZeroPageUBnKzhi             EQU UBnKzhi    - StartOfShipRuntimeData
  21++C015              ZeroPageUBnKzsgn            EQU UBnKzsgn   - StartOfShipRuntimeData
  22++C015              ;-Rotation Matrix of Ship----------------------------------------------------------------------------------------------------------
  23++C015              ; Rotation data is stored as lohi, but only 15 bits with 16th bit being  a sign bit. Note this is NOT 2'c compliment
  24++C015              ; Note they seem to have to be after camera position not quite found why yet, can only assume it does an iy or ix indexed copy? Bu oddly does not affect space station.
  25++C015 00 00        UBnkrotmatSidevX            DW  0                       ; INWK +21
  26++C017              UBnkrotmatSidev             equ UBnkrotmatSidevX
  27++C017 00 00        UBnkrotmatSidevY            DW  0                       ; INWK +23
  28++C019 00 00        UBnkrotmatSidevZ            DW  0                       ; INWK +25
  29++C01B 00 00        UBnkrotmatRoofvX            DW  0                       ; INWK +15
  30++C01D              UBnkrotmatRoofv             equ UBnkrotmatRoofvX
  31++C01D 00 00        UBnkrotmatRoofvY            DW  0                       ; INWK +17
  32++C01F 00 00        UBnkrotmatRoofvZ            DW  0                       ; INWK +19
  33++C021 00 00        UBnkrotmatNosevX            DW  0                       ; INWK +9
  34++C023              UBnkrotmatNosev             EQU UBnkrotmatNosevX
  35++C023 00 00        UBnkrotmatNosevY            DW  0                       ; INWK +11
  36++C025 00 00        UBnkrotmatNosevZ            DW  0                       ; INWK +13
  37++C027              ; -- Note these must be here for initialise blast as it does a 12 byte ldir
  38++C027              ; . Note missile explosion will have to have logic to cause linger if a blast is to be enqued
  39++C027 00           UBnKMissileBlastRange:      DB  0                       ; copied in when setting up a missile
  40++C028 00           UBnKMissileBlastDamage:     DB  0                       ; copied in when setting up a missile
  41++C029 00           UBnKMissileDetonateRange:   DB  0                       ; copied in when setting up a missile, allows for proximity missiles
  42++C02A 00           UBnKMissileDetonateDamage:  DB  0                       ; copied in when setting up a missile
  43++C02B              ; -- Metadata for ship to help with bank managment
  44++C02B              UBnKStartOfRuntimeData:
  45++C02B 00           UBnKSlotNumber              DB  0
  46++C02C 00           UbnKShipUnivBankNbr         DB  0                       ; Present ship universe bank number
  47++C02D 00           UBnkShipModelBank           DB  0                       ; Bank nbr ship was from
  48++C02E 00           UBnKShipModelNbr            DB  0                       ; Ship Id with in the bank
  49++C02F 00           UBnKShipModeID              DB  0                       ; Absolute ship id
  50++C030              ; -- Ship AI data
  51++C030 00           UBnKMissleHitToProcess      DB  0                       ; This is used for enquing missle blasts as we can only do one missile at a time, could make it multi but neeed to smooth CPU usage
  52++C031 00           UBnKMissileTarget           DB  0                       ; This is the ship slot number for the target from 0 to n if the missile is not hostile to us, if the target is $FF then its us
  53++C032 00           UBnKspeed                   DB  0                       ; INWK +27
  54++C033 00           UBnKAccel                   DB  0                       ; INWK +28
  55++C034 00           UBnKRotXCounter             DB  0                       ; INWK +29
  56++C035 00           UBnKRotZCounter             DB  0                       ; INWK +30
  57++C036 00           UBnKRAT                     DB  0                       ; temporary for rotation magnitude or roll counter, for debugging state
  58++C037 00           UBnKRAT2                    DB  0                       ; temporary for rotation threshold
  59++C038 00           UBnKCNT                     DB  0                       ; temp for calculating roll and pitch
  60++C039 00           UBnKCNT2                    DB  0                       ; roll threshold, max angle boynd ship will slow down
  61++C03A 00           univRAT                     DB  0               ; 99
  62++C03B 00           univRAT2                    DB  0               ; 9A
  63++C03C 00           univRAT2Val                 DB  0               ; 9A
  64++C03D 00           UBnKexplDsp                 DB  0                       ; INWK +31 clear exploding/display state|missiles
  65++C03E 00           UBnkDrawAllFaces            DB  0
  66++C03F 00           UBnkaiatkecm                DB  0                       ; INWK +32 ai_attack_univ_ecm i.e. AI type
  67++C040 00           UBnKSpawnObject             DB  0
  68++C041 00           UBnkCam0yLo                 DB  0                       ; INWK +33 ????
  69++C042 00           UBnkCam0yHi                 DB  0                       ; INWK +34?????
  70++C043 00           UBnKEnergy                  DB  0                       ; INWK +35
  71++C044 00           UBnKECMCountDown            DB  0                       ; counts down ECM usage if activated reducing energy too in update loop
  72++C045 00           UBnKECMFitted               DB  0                       ; Does ship have ECM, true false
  73++C046              ZeroPageUBnKEnergy          EQU UBnKEnergy    - StartOfShipRuntimeData
  74++C046              ZeroPageUBnKECMCountDown    EQU ECMCountDown  - StartOfShipRuntimeData
  75++C046              ZeroPageUBnKECMFitted       EQU UBnKECMFitted - StartOfShipRuntimeData
  76++C046 00           UBnKMissilesLeft            DB  0
  77++C047 00           UBnKCloudCounter            DB  0                       ; cloud pixels
  78++C048 00           UBnKCloudRadius             DB  0                       ; cloud pixels
  79++C049              UBnKRuntimeSize             EQU $-UBnKStartOfRuntimeData
  80++C049              ; Flags work as follows:
  81++C049              ; UBnKSpawnObject - signals on death to spawn cargo items
  82++C049              ; 0 -                   Spawn Cargo 1
  83++C049              ; 1 -                   Spawn Cargo 2
  84++C049              ; 2 -                   Spawn Cargo 3
  85++C049              ; 3 -                   Spawn Cargo 4
  86++C049              ; 4 -                   Spawn Alloy 1
  87++C049              ; 5 -                   Spawn Alloy 2
  88++C049              ; 6 -                   Spawn Alloy 3
  89++C049              ; 7 -                   Spawn Alloy 4
  90++C049
  91++C049              ; UBnkaiatkecm
  92++C049              ; Bit	                Description
  93++C049              ; 7 -                   AI Enabled Flag
  94++C049              ; 6 -                   Ship Visible = ShipOnScreen/NotCloaked (cleared or set by check visible or cloaking override)
  95++C049              ; 5 -                   Ship is exploding if set, note if its a missile and one already equeued this will have to linger
  96++C049              ;                       linger can be done by not erasing ship unit missile equeue handled
  97++C049              ; 4 -                   Ship marked as exploded, cleared once aknowledged then bit 5 takes over and UBnKCloudCounter
  98++C049              ; 3 -                   Display state - Plot as a Dot
  99++C049              ; 2 -                   Nbr of Missiles bit 2
 100++C049              ; 1 -                   Nbr of Missiles bit 1
 101++C049              ; 0 -                   ECM present flag
 102++C049              ; ShipNewBitsAddr (in blueprint)
 103++C049              ;Bit	                Description
 104++C049              ;#0	Trader flag         * 0 = not a trader  * 1 = trader
 105++C049              ;                       80% of traders are peaceful and mind their own business plying their trade between the planet and space station, but 20% of them moonlight as bounty hunters (see bit #1)
 106++C049              ;                       Ships that are traders: Escape pod, Shuttle, Transporter, Anaconda, Rock hermit, Worm
 107++C049              ;#1 Bounty hunter flag  * 0 = not a bounty hunter* 1 = bounty hunter
 108++C049              ;                       If we are a fugitive or a serious offender and we bump into a bounty hunter, they will become hostile and attack us (see bit #2)
 109++C049              ;                       Ships that are bounty hunters: Viper, Fer-de-lance
 110++C049              ;#2	Hostile flag        * 0 = not hostile  * 1 = hostile
 111++C049              ;                       Hostile ships will attack us on sight; there are quite a few of them
 112++C049              ;                       Ships that are hostile: Sidewinder, Mamba, Krait, Adder, Gecko, Cobra Mk I, Worm, Cobra Mk III, Asp Mk II, Python (pirate), Moray, Thargoid, Thargon, Constrictor
 113++C049              ;#3	Pirate flag         * 0 = not a pirate * 1 = pirate
 114++C049              ;                       Hostile pirates will attack us on sight, but once we get inside the space station safe zone, they will stop
 115++C049              ;                       Ships that are pirates: Sidewinder, Mamba, Krait, Adder, Gecko, Cobra Mk I, Cobra Mk III, Asp Mk II, Python (pirate), Moray, Thargoid
 116++C049              ;#4	Docking flag        * 0 = not docking * 1 = docking
 117++C049              ;                       Traders with their docking flag set fly towards the space station to try to dock, otherwise they aim for the planet
 118++C049              ;                       This flag is randomly set for traders when they are spawned
 119++C049              ;                       Ships that can be docking: Escape pod, Shuttle, Transporter, Anaconda, Rock hermit, Worm
 120++C049              ;#5	Innocent bystander  * 0 = normal * 1 = innocent bystander
 121++C049              ;                       If we attack an innocent ship within the space station safe zone, then the station will get angry with us and start spawning cops
 122++C049              ;                       Ships that are innocent bystanders: Shuttle, Transporter, Cobra Mk III, Python, Boa, Anaconda, Rock hermit, Cougar
 123++C049              ;#6	Cop flag            * 0 = not a cop * 1 = cop
 124++C049              ;                       If we destroy a cop, then we instantly become a fugitive (the Transporter isn't actually a cop, but it's clearly under police protection)
 125++C049              ;                       Ships that are cops: Viper, Transporter
 126++C049              ;#7	Scooped, docked, escape pod flag
 127++C049              ;                       For spawned ships, this flag indicates that the ship been scooped or has docked (bit 7 is always clear on spawning)
 128++C049              ;                       For blueprints, this flag indicates whether the ship type has an escape pod fitted, so it can launch it when in dire straits
 129++C049              ;                       Ships that have escape pods: Cobra Mk III, Python, Boa, Anaconda, Rock hermit, Viper, Mamba, Krait, Adder, Cobra Mk I, Cobra Mk III (pirate), Asp Mk II, Python (pirate), Fer-de-lance
 130++C049
# file closed: ././Universe/Ships/AIRuntimeData.asm
  20+ C049              ; moved to runtime asm
  21+ C049              ;                        INCLUDE "./Universe/Ships/ShipPosVars.asm"
  22+ C049              ;                        INCLUDE "./Universe/Ships/RotationMatrixVars.asm"
  23+ C049
  24+ C049              ; Orientation Matrix [nosev x y z ] nose vector ( forward) 19 to 26
  25+ C049              ;                    [roofv x y z ] roof vector (up)
  26+ C049              ;                    [sidev x y z ] side vector (right)
  27+ C049              ;;rotXCounter                 equ UBnkrotXCounter         ; INWK +29
  28+ C049              ;;rotZCounter                 equ UBnkrotZCounter         ; INWK +30UBnkDrawCam0xLo   DB  0               ; XX18+0
  29+ C049
  30+ C049
  31+ C049                                      INCLUDE "./Universe/Ships/XX16Vars.asm"
# file opened: ././Universe/Ships/XX16Vars.asm
   1++C049              ;-- XX16 --------------------------------------------------------------------------------------------------------------------------
   2++C049 00 00        UBnkTransmatSidevX          DW  0               ; XX16+0
   3++C04B              UBnkTransmatSidev           EQU UBnkTransmatSidevX
   4++C04B 00 00        UBnkTransmatSidevY          DW 0                ; XX16+2
   5++C04D 00 00        UBnkTransmatSidevZ          DW 0                ; XX16+2
   6++C04F 00 00        UBnkTransmatRoofvX          DW 0
   7++C051              UBnkTransmatRoofv           EQU UBnkTransmatRoofvX
   8++C051 00 00        UBnkTransmatRoofvY          DW 0                ; XX16+2
   9++C053 00 00        UBnkTransmatRoofvZ          DW 0                ; XX16+2
  10++C055 00 00        UBnkTransmatNosevX          DW 0
  11++C057              UBnkTransmatNosev           EQU UBnkTransmatNosevX
  12++C057 00 00        UBnkTransmatNosevY          DW 0                ; XX16+2
  13++C059 00 00        UBnkTransmatNosevZ          DW 0                ; XX16+2
  14++C05B 00 00        UbnkTransmatTransX          DW 0
  15++C05D 00 00        UbnkTransmatTransY          DW 0
  16++C05F 00 00        UbnkTransmatTransZ          DW 0
  17++C061              XX16                        equ UBnkTransmatSidev
  18++C061              ;-- XX16Inv --------------------------------------------------------------------------------------------------------------------------
  19++C061 00 00        UbnkTransInvRow0x0          DW 0
  20++C063 00 00        UbnkTransInvRow0x1          DW 0
  21++C065 00 00        UbnkTransInvRow0x2          DW 0
  22++C067 00 00        UbnkTransInvRow0x3          DW 0
  23++C069 00 00        UbnkTransInvRow1y0          DW 0
  24++C06B 00 00        UbnkTransInvRow1y1          DW 0
  25++C06D 00 00        UbnkTransInvRow1y2          DW 0
  26++C06F 00 00        UbnkTransInvRow1y3          DW 0
  27++C071 00 00        UbnkTransInvRow2z0          DW 0
  28++C073 00 00        UbnkTransInvRow2z1          DW 0
  29++C075 00 00        UbnkTransInvRow2z2          DW 0
  30++C077 00 00        UbnkTransInvRow2z3          DW 0
  31++C079
  32++C079              XX16Inv             equ UbnkTransInvRow0x0
  33++C079
# file closed: ././Universe/Ships/XX16Vars.asm
  32+ C079                                      INCLUDE "./Universe/Ships/XX25Vars.asm"
# file opened: ././Universe/Ships/XX25Vars.asm
   1++C079              ;-- XX25 --------------------------------------------------------------------------------------------------------------------------
   2++C079 00           UbnkProjxLo                 DB  0
   3++C07A 00           UbnkProjxHi                 DB  0
   4++C07B 00           UbnkProjxSgn                DB  0
   5++C07C              UbnkProjx                   EQU UbnkProjxLo
   6++C07C 00           UbnkProjyLo                 DB  0
   7++C07D 00           UbnkProjyHi                 DB  0
   8++C07E 00           UbnkProjySgn                DB  0
   9++C07F              UbnkProjy                   EQU UbnkProjyLo
  10++C07F 00           UbnkProjzLo                 DB  0
  11++C080 00           UbnkProjzHi                 DB  0
  12++C081 00           UbnkProjzSgn                DB  0
  13++C082              UbnkProjz                   EQU UbnkProjzLo
  14++C082              XX25                        EQU UbnkProjxLo
  15++C082
# file closed: ././Universe/Ships/XX25Vars.asm
  33+ C082                                      INCLUDE "./Universe/Ships/XX18Vars.asm"
# file opened: ././Universe/Ships/XX18Vars.asm
   1++C082              ;-- XX18 --------------------------------------------------------------------------------------------------------------------------
   2++C082 00           UBnkDrawCam0xLo             DB  0               ; XX18+0
   3++C083 00           UBnkDrawCam0xHi             DB  0               ; XX18+1
   4++C084 00           UBnkDrawCam0xSgn            DB  0               ; XX18+2
   5++C085              UBnkDrawCam0x               equ UBnkDrawCam0xLo
   6++C085 00           UBnkDrawCam0yLo             DB  0               ; XX18+3
   7++C086 00           UBnkDrawCam0yHi             DB  0               ; XX18+4
   8++C087 00           UBnkDrawCam0ySgn            DB  0               ; XX18+5
   9++C088              UBnkDrawCam0y               equ UBnkDrawCam0yLo
  10++C088 00           UBnkDrawCam0zLo             DB  0               ; XX18+6
  11++C089 00           UBnkDrawCam0zHi             DB  0               ; XX18+7
  12++C08A 00           UBnkDrawCam0zSgn            DB  0               ; XX18+8
  13++C08B              UBnkDrawCam0z               equ UBnkDrawCam0zLo
  14++C08B              XX18                        equ UBnkDrawCam0xLo
  15++C08B
# file closed: ././Universe/Ships/XX18Vars.asm
  34+ C08B
  35+ C08B              ; Used to make 16 bit reads a little cleaner in source code
  36+ C08B 00 00 00     UbnkZPoint                  DS  3
  37+ C08E              UbnkZPointLo                equ UbnkZPoint
  38+ C08E              UbnkZPointHi                equ UbnkZPoint+1
  39+ C08E              UbnkZPointSign              equ UbnkZPoint+2
  40+ C08E                                      INCLUDE "./Universe/Ships/XX15Vars.asm"
# file opened: ././Universe/Ships/XX15Vars.asm
   1++C08E              ;-- XX15 --------------------------------------------------------------------------------------------------------------------------
   2++C08E 00           UBnkXScaled                 DB  0               ; XX15+0Xscaled
   3++C08F 00           UBnkXScaledSign             DB  0               ; XX15+1xsign
   4++C090 00           UBnkYScaled                 DB  0               ; XX15+2yscaled
   5++C091 00           UBnkYScaledSign             DB  0               ; XX15+3ysign
   6++C092 00           UBnkZScaled                 DB  0               ; XX15+4zscaled
   7++C093 00           UBnkZScaledSign             DB  0               ; XX15+5zsign
   8++C094
   9++C094              XX15                        equ UBnkXScaled
  10++C094              XX15VecX                    equ XX15
  11++C094              XX15VecY                    equ XX15+1
  12++C094              XX15VecZ                    equ XX15+2
  13++C094              UbnkXPoint                  equ XX15
  14++C094              UbnkXPointLo                equ XX15+0
  15++C094              UbnkXPointHi                equ XX15+1
  16++C094              UbnkXPointSign              equ XX15+2
  17++C094              UbnkYPoint                  equ XX15+3
  18++C094              UbnkYPointLo                equ XX15+3
  19++C094              UbnkYPointHi                equ XX15+4
  20++C094              UbnkYPointSign              equ XX15+5
  21++C094              ; Repurposed XX15 pre clip plines
  22++C094              UbnkPreClipX1               equ XX15+0
  23++C094              UbnkPreClipY1               equ XX15+2
  24++C094              UbnkPreClipX2               equ XX15+4
  25++C094              UbnkPreClipY2               equ XX15+6
  26++C094              ; Repurposed XX15 post clip lines
  27++C094              UBnkNewX1                   equ XX15+0
  28++C094              UBnkNewY1                   equ XX15+1
  29++C094              UBnkNewX2                   equ XX15+2
  30++C094              UBnkNewY2                   equ XX15+3
  31++C094              ; Repurposed XX15
  32++C094              regXX15fx                   equ UBnkXScaled
  33++C094              regXX15fxSgn                equ UBnkXScaledSign
  34++C094              regXX15fy                   equ UBnkYScaled
  35++C094              regXX15fySgn                equ UBnkYScaledSign
  36++C094              regXX15fz                   equ UBnkZScaled
  37++C094              regXX15fzSgn                equ UBnkZScaledSign
  38++C094              ; Repurposed XX15
  39++C094              varX1                       equ UBnkXScaled       ; Reused, verify correct position
  40++C094              varY1                       equ UBnkXScaledSign   ; Reused, verify correct position
  41++C094              varZ1                       equ UBnkYScaled       ; Reused, verify correct position
  42++C094              ; After clipping the coords are two 8 bit pairs
  43++C094              UBnkPoint1Clipped           equ UBnkXScaled
  44++C094              UBnkPoint2Clipped           equ UBnkYScaled
  45++C094              ; Repurposed XX15 when plotting lines
  46++C094              ; Repurposed XX15 before calling clip routine
  47++C094              UBnkX1                      equ XX15
  48++C094              UBnKx1Lo                    equ XX15
  49++C094              UBnKx1Hi                    equ XX15+1
  50++C094              UBnkY1                      equ XX15+2
  51++C094              UbnKy1Lo                    equ XX15+2
  52++C094              UBnkY1Hi                    equ XX15+3
  53++C094              UBnkX2                      equ XX15+4
  54++C094              UBnkX2Lo                    equ XX15+4
  55++C094              UBnkX2Hi                    equ XX15+5
  56++C094
# file closed: ././Universe/Ships/XX15Vars.asm
  41+ C094                                      INCLUDE "./Universe/Ships/XX12Vars.asm"
# file opened: ././Universe/Ships/XX12Vars.asm
   1++C094              ;-- transmat0 --------------------------------------------------------------------------------------------------------------------------
   2++C094              ; Note XX12 comes after as some logic in normal processing uses XX15 and XX12 combines
   3++C094 00           UBnkXX12xLo                 DB  0               ; XX12+0
   4++C095 00           UBnkXX12xSign               DB  0               ; XX12+1
   5++C096 00           UBnkXX12yLo                 DB  0               ; XX12+2
   6++C097 00           UBnkXX12ySign               DB  0               ; XX12+3
   7++C098 00           UBnkXX12zLo                 DB  0               ; XX12+4
   8++C099 00           UBnkXX12zSign               DB  0               ; XX12+5
   9++C09A 00 00 00...  XX12Save                    DS  6
  10++C0A0 00 00 00...  XX12Save2                   DS  6
  11++C0A6              XX12                        equ UBnkXX12xLo
  12++C0A6              varXX12                     equ UBnkXX12xLo
  13++C0A6              ; Repurposed XX12 when plotting lines
  14++C0A6              UBnkY2                      equ XX12+0
  15++C0A6              UbnKy2Lo                    equ XX12+0
  16++C0A6              UBnkY2Hi                    equ XX12+1
  17++C0A6              UBnkDeltaXLo                equ XX12+2
  18++C0A6              UBnkDeltaXHi                equ XX12+3
  19++C0A6              UBnkDeltaYLo                equ XX12+4
  20++C0A6              UBnkDeltaYHi                equ XX12+5
  21++C0A6              UbnkGradient                equ XX12+2
  22++C0A6              UBnkTemp1                   equ XX12+2
  23++C0A6              UBnkTemp1Lo                 equ XX12+2
  24++C0A6              UBnkTemp1Hi                 equ XX12+3
  25++C0A6              UBnkTemp2                   equ XX12+3
  26++C0A6              UBnkTemp2Lo                 equ XX12+3
  27++C0A6              UBnkTemp2Hi                 equ XX12+4
  28++C0A6
# file closed: ././Universe/Ships/XX12Vars.asm
  42+ C0A6
  43+ C0A6
  44+ C0A6              ; Post clipping the results are now 8 bit
  45+ C0A6 00           UBnkVisibility              DB  0               ; replaces general purpose xx4 in rendering
  46+ C0A7 00           UBnkProjectedY              DB  0
  47+ C0A8 00           UBnkProjectedX              DB  0
  48+ C0A9              UBnkProjected               equ UBnkProjectedY  ; resultant projected position
  49+ C0A9 00 00 00...  XX15Save                    DS  8
  50+ C0B1 00 00 00...  XX15Save2                   DS  8
  51+ C0B9 00           VarBackface                 DB 0
  52+ C0BA              ; Heap (or array) information for lines and normals
  53+ C0BA              ; Coords are stored XY,XY,XY,XY
  54+ C0BA              ; Normals
  55+ C0BA              ; This needs re-oprganising now.
  56+ C0BA              ; Runtime Calculation Store
  57+ C0BA
  58+ C0BA              FaceArraySize               equ 30
  59+ C0BA              EdgeHeapSize                equ 40
  60+ C0BA              NodeArraySize               equ 40
  61+ C0BA              LineArraySize               equ 50
  62+ C0BA              ; Storage arrays for data
  63+ C0BA              ; Structure of arrays
  64+ C0BA              ; Visibility array  - 1 Byte per face/normal on ship model Bit 7 (or FF) visible, 0 Invisible
  65+ C0BA              ; Node array corresponds to a processed vertex from the ship model transformed into world coordinates and tracks the node list from model
  66+ C0BA              ; NodeArray         -  4 bytes per element      0           1            2          3
  67+ C0BA              ;                                               X Coord Lo  Y Coord Lo   Z CoordLo  Sign Bits 7 6 5 for X Y Z Signs (set = negative)
  68+ C0BA              ; Line Array        -  4 bytes per eleement     0           1            2          3
  69+ C0BA              ;                                               X1          Y1           X2         Y2
  70+ C0BA 00 00 00...  UbnkFaceVisArray            DS FaceArraySize            ; XX2 Up to 16 faces this may be normal list, each entry is controlled by bit 7, 1 visible, 0 hidden
  71+ C0D8 00 00 00...  UBnkNodeArray               DS NodeArraySize * 4        ; XX3 Holds the points as an array, its an array not a heap
  72+ C178 00 00 00...  UBnkNodeArray2              DS NodeArraySize * 4        ; XX3 Holds the points as an array, its an array not a heap
  73+ C218 00 00 00...  UbnkLineArray               DS LineArraySize * 4        ; XX19 Holds the clipped line details
  74+ C2E0              UBnkLinesHeapMax            EQU $ - UbnkLineArray
  75+ C2E0 00 00 00...  UbnkEdgeProcessedList DS EdgeHeapSize
  76+ C308              ; Array current Lengths
  77+ C308 00           UbnkFaceVisArrayLen         DS 1
  78+ C309 00           UBnkNodeArrayLen            DS 1
  79+ C30A 00           UbnkLineArrayLen            DS 1                        ; total number of lines loaded to array
  80+ C30B 00           UbnkLineArrayBytes          DS 1                        ; total number of bytes loaded to array  = array len * 4
  81+ C30C              XX20                        equ UbnkLineArrayLen
  82+ C30C              varXX20                     equ UbnkLineArrayLen
  83+ C30C
  84+ C30C 00           UbnkEdgeHeapSize            DS 1
  85+ C30D 00           UbnkEdgeHeapBytes           DS 1
  86+ C30E 00           UBnkLinesHeapLen            DS 1
  87+ C30F 00           UbnKEdgeHeapCounter         DS 1
  88+ C310 00           UbnKEdgeRadius              DS 1
  89+ C311 00           UbnKEdgeShipType            DS 1
  90+ C312 00           UbnKEdgeExplosionType       DS 1
  91+ C313
  92+ C313              ; Node heap is used to write out transformed Vertexs
  93+ C313
  94+ C313              ; Lines
  95+ C313 00 00 00     UBnkXX19                    DS  3
  96+ C316
  97+ C316 00 00 00...  UBnkHullCopy                DS  ShipDataLength
  98+ C331              ScoopDebrisAddr             equ UBnkHullCopy + ScoopDebrisOffset
  99+ C331              MissileLockLoAddr           equ UBnkHullCopy + MissileLockLoOffset
 100+ C331              MissileLockHiAddr           equ UBnkHullCopy + MissileLockHiOffset
 101+ C331              EdgeAddyAddr                equ UBnkHullCopy + EdgeAddyOffset
 102+ C331              LineX4Addr                  equ UBnkHullCopy + LineX4Offset
 103+ C331              GunVertexAddr               equ UBnkHullCopy + GunVertexOffset
 104+ C331              ExplosionCtAddr             equ UBnkHullCopy + ExplosionCtOffset
 105+ C331              VertexCountAddr             equ UBnkHullCopy + VertexCountOffset
 106+ C331              VertexCtX6Addr              equ UBnkHullCopy + VertexCtX6Offset
 107+ C331              EdgeCountAddr               equ UBnkHullCopy + EdgeCountOffset
 108+ C331              BountyLoAddr                equ UBnkHullCopy + BountyLoOffset
 109+ C331              BountyHiAddr                equ UBnkHullCopy + BountyHiOffset
 110+ C331              FaceCtX4Addr                equ UBnkHullCopy + FaceCtX4Offset
 111+ C331              DotAddr                     equ UBnkHullCopy + DotOffset
 112+ C331              EnergyAddr                  equ UBnkHullCopy + EnergyOffset
 113+ C331              SpeedAddr                   equ UBnkHullCopy + SpeedOffset
 114+ C331              FaceAddyAddr                equ UBnkHullCopy + FaceAddyOffset
 115+ C331              QAddr                       equ UBnkHullCopy + QOffset
 116+ C331              LaserAddr                   equ UBnkHullCopy + LaserOffset
 117+ C331              VerticesAddyAddr            equ UBnkHullCopy + VerticiesAddyOffset
 118+ C331              ShipTypeAddr                equ UBnkHullCopy + ShipTypeOffset
 119+ C331              ShipNewBitsAddr             equ UBnkHullCopy + ShipNewBitsOffset
 120+ C331              ShipAIFlagsAddr             equ UBnkHullCopy + ShipAIFlagsOffset
 121+ C331              ShipECMFittedChanceAddr     equ UBnkHullCopy + ShipECMFittedChanceOffset
 122+ C331              ; Static Ship Data. This is copied in when creating the universe object
 123+ C331              XX0                         equ UBnkHullCopy        ; general hull index pointer TODO find biggest ship design
 124+ C331
 125+ C331 00 00 00...  UBnkHullVerticies           DS  40 * 6              ; largetst is trasnport type 10 at 37 vericies so alows for 40 * 6 Bytes  =
 126+ C421 00 00 00...  UBnkHullEdges               DS  50 * 4              ; ype 10 is 46 edges so allow 50
 127+ C4E9 00 00 00...  UBnkHullNormals             DS  20 * 4              ; type 10 is 14 edges so 20 to be safe
 128+ C539
 129+ C539
 130+ C539 0C           OrthagCountdown             DB  12
 131+ C53A
 132+ C53A              UBnkShipCopy                equ UBnkHullVerticies               ; Buffer for copy of ship data, for speed will copy to a local memory block, Cobra is around 400 bytes on creation of a new ship so should be plenty
 133+ C53A              UBnk_Data_len               EQU $ - StartOfUniv
 134+ C53A
 135+ C53A              ZeroUnivPitchAndRoll:   MACRO
 136+ C53A ~                                    xor     a
 137+ C53A ~                                    ld      (UBnKRotXCounter),a
 138+ C53A ~                                    ld      (UBnKRotZCounter),a
 139+ C53A                                      ENDM
 140+ C53A
 141+ C53A              MaxUnivPitchAndRoll:    MACRO
 142+ C53A ~                                    ld      a,127
 143+ C53A ~                                    ld      (UBnKRotXCounter),a
 144+ C53A ~                                    ld      (UBnKRotZCounter),a
 145+ C53A                                      ENDM
 146+ C53A
 147+ C53A              RandomUnivPitchAndRoll: MACRO
 148+ C53A ~                                    call    doRandom
 149+ C53A ~                                    or      %01101111
 150+ C53A ~                                    ld      (UBnKRotXCounter),a
 151+ C53A ~                                    call    doRandom
 152+ C53A ~                                    or      %01101111
 153+ C53A ~                                    ld      (UBnKRotZCounter),a
 154+ C53A                                      ENDM
 155+ C53A
 156+ C53A              RandomUnivSpeed:        MACRO
 157+ C53A ~                                    call    doRandom
 158+ C53A ~                                    and     31
 159+ C53A ~                                    ld      (UBnKspeed),a
 160+ C53A                                      ENDM
 161+ C53A
 162+ C53A              MaxUnivSpeed:           MACRO
 163+ C53A ~                                    ld      a,31
 164+ C53A ~                                    ld      (UBnKspeed),a
 165+ C53A                                      ENDM
 166+ C53A
 167+ C53A              ZeroUnivAccelleration:  MACRO
 168+ C53A ~                                    xor     a
 169+ C53A ~                                    ld      (UBnKAccel),a
 170+ C53A                                      ENDM
 171+ C53A
 172+ C53A 3A 2E C3     SetShipHostile:         ld      a,(ShipNewBitsAddr)
 173+ C53D F6 04                                or      ShipIsHostile
 174+ C53F 32 2E C3                             ld      (ShipNewBitsAddr),a
 175+ C542 C9                                   ret
 176+ C543
 177+ C543 3A 2E C3     ClearShipHostile:       ld      a,(ShipNewBitsAddr)
 178+ C546 E6 FB                                and     ShipNotHostile
 179+ C548 32 2E C3                             ld      (ShipNewBitsAddr),a
 180+ C54B C9                                   ret
 181+ C54C
 182+ C54C              AequN1xorN2:            MACRO  param1,param2
 183+ C54C ~                                    ld      a,(param1)
 184+ C54C ~                                    xor     param2
 185+ C54C                                      ENDM
 186+ C54C
 187+ C54C              N0equN1byN2div256:      MACRO param1,param2,param3
 188+ C54C ~                                    ld      a,param3                        ;
 189+ C54C ~                                    ld      e,a                         ; use e as var Q = value of XX15 [n] lo
 190+ C54C ~                                    ld      a,param2                        ; A = XX16 element
 191+ C54C ~                                    ld      d,a
 192+ C54C ~                                    mul
 193+ C54C ~                                    ld      a,d                         ; we get only the high byte which is like doing a /256 if we think of a as low
 194+ C54C ~                                    ld      (param1),a                      ; Q         ; result variable = XX16[n] * XX15[n]/256
 195+ C54C                                      ENDM
 196+ C54C
 197+ C54C              ; --------------------------------------------------------------
 198+ C54C 21 00 C0     ResetUBnkData:          ld      hl,StartOfUniv
 199+ C54F 11 3A 05                             ld      de,UBnk_Data_len
 200+ C552 AF                                   xor     a
 201+ C553 CD A5 99                             call    memfill_dma
 202+ C556 C9                                   ret
 203+ C557              ; --------------------------------------------------------------
 204+ C557 21 0C C0     ResetUbnkPosition:      ld      hl,UBnKxlo
 205+ C55A 06 09                                ld      b, 3*3
 206+ C55C AF                                   xor     a
 207+ C55D 77           .zeroLoop:              ld      (hl),a
 208+ C55E 23                                   inc     hl
 209+ C55F 10 FC                                djnz    .zeroLoop
 210+ C561 C9                                   ret
 211+ C562
 212+ C562 3E 80        FireECM:                ld      a,ECMCounterMax                 ; set ECM time
 213+ C564 32 44 C0                             ld      (UBnKECMCountDown),a            ;
 214+ C567 3A F1 9C                             ld      a,(ECMCountDown)
 215+ C56A                                      ReturnIfALTNusng ECMCounterMax
 215+ C56A FE 80       >                        cp    ECMCounterMax
 215+ C56C D8          >                        ret	 c
 216+ C56D 3E 80                                ld      a,ECMCounterMax
 217+ C56F 32 F1 9C                             ld      (ECMCountDown),a
 218+ C572 C9                                   ret
 219+ C573
 220+ C573              ; A ship normally needs enough energy to fire ECM but if its shot then
 221+ C573              ; it may be too low, in which case the ECM does a saftey shutdown and returns 1 energy
 222+ C573              ; plus a 50% chance it will blow the ECM up
 223+ C573 3A 44 C0     UpdateECM:              ld      a,(UBnKECMCountDown)
 224+ C576                                      ReturnIfAIsZero
 224+ C576 A7          >                        and     a
 224+ C577 C8          >                        ret     z
 225+ C578 3D                                   dec     a
 226+ C579 32 44 C0                             ld      (UBnKECMCountDown),a
 227+ C57C 21 43 C0                             ld      hl,UBnKEnergy
 228+ C57F 35                                   dec     (hl)
 229+ C580 F0                                   ret     p
 230+ C581 CD C6 C5     .ExhaustedEnergy:       call    UnivExplodeShip                 ; if it ran out of energy it was as it was also shot or collided as it checks in advance. Main ECM loop will continue as a compromise as multiple ships can fire ECM simultaneously
 231+ C584 C9                                   ret
 232+ C585
 233+ C585
 234+ C585              ; --------------------------------------------------------------
 235+ C585              ; This sets the position of the current ship if its a player launched missile
 236+ C585 CD 60 C8     UnivSetPlayerMissile:   call    InitialiseOrientation           ; Copy in Player  facing
 237+ C588 CD 57 C5                             call    ResetUbnkPosition               ; home position
 238+ C58B 3E 05                                ld      a,MissileDropHeight             ; the missile launches from underneath
 239+ C58D 32 0F C0                             ld      (UBnKylo),a                     ; so its -ve drop height
 240+ C590 3E 80                                ld      a,$80                           ;
 241+ C592 32 11 C0                             ld      (UBnKysgn),a                    ;
 242+ C595 3E 03                                ld      a,3                             ; set accelleration
 243+ C597 32 33 C0                             ld      (UBnKAccel),a                   ;
 244+ C59A                                      ZeroA
 244+ C59A AF          >                        xor a
 245+ C59B 32 34 C0                             ld      (UBnKRotXCounter),a
 246+ C59E 32 35 C0                             ld      (UBnKRotZCounter),a
 247+ C5A1 3E 03                                ld      a,3
 248+ C5A3 32 36 C0                             ld      (UBnKRAT),a
 249+ C5A6 3C                                   inc     a
 250+ C5A7 32 37 C0                             ld      (UBnKRAT2),a
 251+ C5AA 3E 16                                ld      a,22
 252+ C5AC 32 39 C0                             ld      (UBnKCNT2),a
 253+ C5AF                                      MaxUnivSpeed                            ; and immediatley full speed (for now at least) TODO
 253+ C5AF 3E 1F       >                        ld      a,31
 253+ C5B1 32 32 C0    >                        ld      (UBnKspeed),a
 254+ C5B4 C9                                   ret
 255+ C5B5              ; --------------------------------------------------------------
 256+ C5B5              ; this applies blast damage to ship
 257+ C5B5 3A 9E 9E     ShipMissileBlast:       ld      a,(CurrentMissileBlastDamage)
 258+ C5B8 47                                   ld      b,a
 259+ C5B9 3A 43 C0                             ld      a,(UBnKEnergy)                   ; Reduce Energy
 260+ C5BC 90                                   sub     b
 261+ C5BD C3 C6 C5                             jp      UnivExplodeShip
 262+ C5C0 18 04                                jr      UnivExplodeShip
 263+ C5C2 32 43 C0                             ld      (UBnKEnergy),a
 264+ C5C5 C9                                   ret
 265+ C5C6              ; --------------------------------------------------------------
 266+ C5C6              ; This sets the ship as a shower of explosiondwd
 267+ C5C6 DD 01        UnivExplodeShip:        break
 268+ C5C8 3A 3F C0                             ld      a,(UBnkaiatkecm)
 269+ C5CB F6 30                                or      ShipExploding | ShipKilled      ; Set Exlpoding flag and mark as just been killed
 270+ C5CD E6 7F                                and     Bit7Clear                       ; Remove AI
 271+ C5CF 32 3F C0                             ld      (UBnkaiatkecm),a
 272+ C5D2 AF                                   xor     a
 273+ C5D3 32 43 C0                             ld      (UBnKEnergy),a
 274+ C5D6                                      ;TODO
 275+ C5D6 C9                                   ret
 276+ C5D7
 277+ C5D7 CD 10 C6     UnivSetDemoPostion:     call    UnivSetSpawnPosition
 278+ C5DA 3E 81                                ld      a,%10000001                     ; AI Enabled has 1 missile
 279+ C5DC 32 3F C0                             ld      (UBnkaiatkecm),a                ; set hostinle, no AI, has ECM
 280+ C5DF 32 2E C3                             ld      (ShipNewBitsAddr),a             ; initialise new bits logic
 281+ C5E2 3E FF                                ld      a,$FF
 282+ C5E4 32 35 C0                             ld      (UBnKRotZCounter),a             ; no pitch
 283+ C5E7 32 34 C0                             ld      (UBnKRotXCounter),a             ; set roll to maxi on station
 284+ C5EA                                      ZeroA
 284+ C5EA AF          >                        xor a
 285+ C5EB 32 0E C0                             ld      (UBnKxsgn),a
 286+ C5EE 32 11 C0                             ld      (UBnKysgn),a
 287+ C5F1 32 14 C0                             ld      (UBnKzsgn),a
 288+ C5F4 21 00 00                             ld      hl,0
 289+ C5F7 22 0C C0                             ld      (UBnKxlo),hl
 290+ C5FA 22 0F C0                             ld      (UBnKylo),hl
 291+ C5FD 3A 2D C3                             ld      a,(ShipTypeAddr)
 292+ C600 21 B0 05                             ld      hl,$05B0                            ; so its a negative distance behind
 293+ C603                                      JumpIfANENusng ShipTypeStation, .SkipFurther
 293+ C603 FE 02       >                        cp     ShipTypeStation
 293+ C605 C2 0C C6    >                        jp      nz,.SkipFurther
 294+ C608 3E 05                                ld      a,5
 295+ C60A 84                                   add     h
 296+ C60B 67                                   ld      h,a
 297+ C60C 22 12 C0     .SkipFurther            ld      (UBnKzlo),hl
 298+ C60F C9                                   ret
 299+ C610              ; --------------------------------------------------------------
 300+ C610              ; This sets the position of the current ship randomly, called after spawing
 301+ C610 CD 60 C8     UnivSetSpawnPosition:   call    InitialiseOrientation
 302+ C613                                      RandomUnivPitchAndRoll
 302+ C613 CD 7C A3    >                        call    doRandom
 302+ C616 F6 6F       >                        or      %01101111
 302+ C618 32 34 C0    >                        ld      (UBnKRotXCounter),a
 302+ C61B CD 7C A3    >                        call    doRandom
 302+ C61E F6 6F       >                        or      %01101111
 302+ C620 32 35 C0    >                        ld      (UBnKRotZCounter),a
 303+ C623 CD 7C A3                             call    doRandom                        ; set x lo and y lo to random
 304+ C626 32 0C C0     .setXlo:                ld      (UBnKxlo),a
 305+ C629 32 0F C0     .setYlo:                ld      (UBnKylo),a
 306+ C62C 0F           .setXsign:              rrca                                    ; rotate by 1 bit right
 307+ C62D 47                                   ld      b,a
 308+ C62E E6 80                                and     SignOnly8Bit
 309+ C630 32 0E C0                             ld      (UBnKxsgn),a
 310+ C633 78           .setYSign:              ld      a,b                             ; get random back again
 311+ C634 0F                                   rrca                                    ; rotate by 1 bit right
 312+ C635 47                                   ld      b,a
 313+ C636 E6 80                                and     SignOnly8Bit                    ; and set y sign
 314+ C638 32 11 C0                             ld      (UBnKysgn),a
 315+ C63B CB 08        .setYHigh:              rrc     b                               ; as value is in b rotate again
 316+ C63D 78                                   ld      a,b                             ;
 317+ C63E E6 1F                                and     31                              ; set y hi to random 0 to 31
 318+ C640 32 10 C0                             ld      (UBnKyhi),a                     ;
 319+ C643 CB 08        .setXHigh:              rrc     b                               ; as value is in b rotate again
 320+ C645 78                                   ld      a,b
 321+ C646 E6 1F                                and     31                              ; set x hi to random 0 to 31
 322+ C648 4F                                   ld      c,a                             ; save shifted into c as well
 323+ C649 32 0D C0                             ld      (UBnKxhi),a
 324+ C64C 3E 50        .setZHigh:              ld      a,80                            ; set z hi to 80 - xhi - yhi - carry
 325+ C64E 98                                   sbc     b
 326+ C64F 99                                   sbc     c
 327+ C650 32 13 C0                             ld      (UBnKzhi),a
 328+ C653 3A 2D C3     .CheckIfBodyOrJunk:     ld      a,(ShipTypeAddr)
 329+ C656                                      ReturnIfAEqNusng ShipTypeJunk
 329+ C656 FE 03       >                        cp      ShipTypeJunk
 329+ C658 C8          >                        ret     z
 330+ C659                                      ReturnIfAEqNusng ShipTypeScoopable
 330+ C659 FE 04       >                        cp      ShipTypeScoopable
 330+ C65B C8          >                        ret     z
 331+ C65C 78                                   ld      a,b                             ; its not junk to set z sign
 332+ C65D 0F                                   rrca                                    ; as it can jump in
 333+ C65E E6 80                                and     SignOnly8Bit
 334+ C660 32 14 C0                             ld      (UBnKzsgn),a
 335+ C663 C9                                   ret
 336+ C664
 337+ C664              ; --------------------------------------------------------------
 338+ C664              ; This sets the cargo type or carryflag set for not cargo
 339+ C664              ; Later this will be done via a loadable lookup table
 340+ C664 3A 2D C3     ShipCargoType:          ld      a,(ShipTypeAddr)
 341+ C667                                      JumpIfAEqNusng ShipID_CargoType5, .CargoCanister
 341+ C667 FE 04       >                        cp     ShipID_CargoType5
 341+ C669 CA 80 C6    >                        jp      z,.CargoCanister
 342+ C66C              .IsItThargon:           JumpIfAEqNusng ShipID_Thargon,    .Thargon
 342+ C66C FE 27       >                        cp     ShipID_Thargon
 342+ C66E CA 86 C6    >                        jp      z,.Thargon
 343+ C671              .IsItAlloy:             JumpIfAEqNusng ShipID_Plate,      .Plate
 343+ C671 FE 1D       >                        cp     ShipID_Plate
 343+ C673 CA 89 C6    >                        jp      z,.Plate
 344+ C676              .IsItSplinter:          JumpIfAEqNusng ShipID_Splinter,   .Splinter
 344+ C676 FE 24       >                        cp     ShipID_Splinter
 344+ C678 CA 8C C6    >                        jp      z,.Splinter
 345+ C67B              .IsItEscapePod:         JumpIfAEqNusng ShipID_Escape_Pod, .EscapePod
 345+ C67B FE 11       >                        cp     ShipID_Escape_Pod
 345+ C67D CA 8F C6    >                        jp      z,.EscapePod
 346+ C680 CD 7C A3     .CargoCanister:         call    doRandom
 347+ C683 E6 0F                                and     15                      ; Limit stock from Food to Platinum
 348+ C685 C9                                   ret
 349+ C686 3E 11        .Thargon:               ld      a,AlienItemsIndex
 350+ C688 C9                                   ret
 351+ C689 3E 0A        .Plate:                 ld      a,AlloysIndex
 352+ C68B C9                                   ret
 353+ C68C 3E 0D        .Splinter:              ld      a,MineralsIndex
 354+ C68E C9                                   ret
 355+ C68F 3E 04        .EscapePod:             ld      a,SlavesIndex
 356+ C691 C9                                   ret
 357+ C692
 358+ C692              ; --------------------------------------------------------------
 359+ C692              ; This sets current univrse object to space station
 360+ C692 3E 81        ResetStationLaunch:     ld  a,%10000001                         ; Has AI and 1 Missile
 361+ C694 32 3F C0                             ld  (UBnkaiatkecm),a                    ; set hostinle, no AI, has ECM
 362+ C697 AF                                   xor a
 363+ C698 32 35 C0                             ld      (UBnKRotZCounter),a             ; no pitch
 364+ C69B 32 2E C3                             ld      (ShipNewBitsAddr),a             ; initialise new bits logic
 365+ C69E 3E FF                                ld      a,$FF
 366+ C6A0 32 34 C0                             ld      (UBnKRotXCounter),a             ; set roll to maxi on station
 367+ C6A3 21 00 00     .SetPosBehindUs:        ld      hl,$0000
 368+ C6A6 22 0C C0                             ld      (UBnKxlo),hl
 369+ C6A9 21 00 00                             ld      hl,$0000
 370+ C6AC 22 0F C0                             ld      (UBnKylo),hl
 371+ C6AF 21 B0 01                             ld      hl,$01B0                            ; so its a negative distance behind
 372+ C6B2 22 12 C0                             ld      (UBnKzlo),hl
 373+ C6B5 AF                                   xor     a
 374+ C6B6 32 0E C0                             ld      (UBnKxsgn),a
 375+ C6B9 32 11 C0                             ld      (UBnKysgn),a
 376+ C6BC 3E 80                                ld      a,$80
 377+ C6BE 32 14 C0                             ld      (UBnKzsgn),a
 378+ C6C1 CD 85 C8     .SetOrientation:        call    LaunchedOrientation             ; set initial facing
 379+ C6C4 C9                                   ret
 380+ C6C5                  ;Input: BC = Dividend, DE = Divisor, HL = 0
 381+ C6C5              ;Output: BC = Quotient, HL = Remainder
 382+ C6C5
 383+ C6C5              ; Initialiase data, iyh must equal slot number
 384+ C6C5              ;                   iyl must be ship type
 385+ C6C5              ;                   a  = current bank number
 386+ C6C5 32 2C C0     UnivInitRuntime:        ld      (UbnKShipUnivBankNbr),a     ; actual bank nmber related to the slot
 387+ C6C8 01 1E 00                             ld      bc,UBnKRuntimeSize
 388+ C6CB 21 2B C0                             ld      hl,UBnKStartOfRuntimeData
 389+ C6CE                                      ZeroA
 389+ C6CE AF          >                        xor a
 390+ C6CF 32 44 C0                             ld      (UBnKECMCountDown),a
 391+ C6D2 77           .InitLoop:              ld      (hl),a
 392+ C6D3 23                                   inc     hl
 393+ C6D4 10 FC                                djnz    .InitLoop
 394+ C6D6              .SetEnergy:             ldCopyByte EnergyAddr, UBnKEnergy
 394+ C6D6 3A 25 C3    >                        ld       a,(EnergyAddr)
 394+ C6D9 32 43 C0    >                        ld       (UBnKEnergy),a
 395+ C6DC FD 7C        .SetBankData:           ld      a,iyh
 396+ C6DE 32 2B C0                             ld      (UBnKSlotNumber),a
 397+ C6E1 FD 7D                                ld      a,iyl
 398+ C6E3 32 2F C0                             ld      (UBnKShipModeID),a
 399+ C6E6 CD 0F E0                             call    GetShipBankId                ; this will mostly be debugging info
 400+ C6E9 32 2D C0                             ld      (UBnkShipModelBank),a        ; this will mostly be debugging info
 401+ C6EC 78                                   ld      a,b                          ; this will mostly be debugging info
 402+ C6ED 32 2E C0                             ld      (UBnKShipModelNbr),a         ; this will mostly be debugging info
 403+ C6F0 3A 2F C3                             ld      a,(ShipAIFlagsAddr)          ; get laser and missile details
 404+ C6F3 E6 07                                and     %00000111                    ; mask for missiles
 405+ C6F5 32 46 C0                             ld      (UBnKMissilesLeft),a
univ_ship_data.asm(406): warning[rdlow]: Reading memory at low address: 26
 406+ C6F8 3A 1A 00                             ld      a,(ShipECMFittedChanceOffset)
 407+ C6FB 47                                   ld      b,a
 408+ C6FC 3A D5 9C     .FetchLatestRandom:     ld      a,(RandomSeed3)
 409+ C6FF                                      JumpIfALTNusng b, .ECMFitted
 409+ C6FF B8          >                        cp      b
 409+ C700 DA 0B C7    >                        jp		c, .ECMFitted
 410+ C703              .ECMNotFitted:          SetMemFalse UBnKECMFitted
 410+ C703 3E FF       >                        ld      a,$FF
 410+ C705 32 45 C0    >                        ld      (UBnKECMFitted),a
 411+ C708 C3 0F C7                             jp      .DoneECM
 412+ C70B              .ECMFitted:             SetMemTrue  UBnKECMFitted
 412+ C70B AF          >                        xor     a
 412+ C70C 32 45 C0    >                        ld      (UBnKECMFitted),a
 413+ C70F              .DoneECM:               ; TODO set up laser power
 414+ C70F C9                                   ret
 415+ C710
 416+ C710
 417+ C710 7C           ADDHLDESignedv3:        ld      a,h
 418+ C711 E6 80                                and     SignOnly8Bit
 419+ C713 47                                   ld      b,a                         ;save sign bit in b
 420+ C714 AA                                   xor     d                           ;if h sign and d sign were different then bit 7 of a will be 1 which means
 421+ C715                                      JumpIfNegative ADDHLDEOppSGN        ;Signs are opposite there fore we can subtract to get difference
 421+ C715 FA 2D C7    >                        jp		m, ADDHLDEOppSGN
 422+ C718 78           ADDHLDESameSigns:       ld      a,b
 423+ C719 B2                                   or      d
 424+ C71A                                      JumpIfNegative ADDHLDESameNeg       ; optimisation so we can just do simple add if both positive
 424+ C71A FA 1F C7    >                        jp		m, ADDHLDESameNeg
 425+ C71D 19                                   add     hl,de
 426+ C71E C9                                   ret
 427+ C71F 7C           ADDHLDESameNeg:         ld      a,h                         ; so if we enter here then signs are the same so we clear the 16th bit
 428+ C720 E6 7F                                and     SignMask8Bit                ; we could check the value of b for optimisation
 429+ C722 67                                   ld      h,a
 430+ C723 7A                                   ld      a,d
 431+ C724 E6 7F                                and     SignMask8Bit
 432+ C726 57                                   ld      d,a
 433+ C727 19                                   add     hl,de
 434+ C728 3E 80                                ld      a,SignOnly8Bit
 435+ C72A B4                                   or      h                           ; now set bit for negative value, we won't bother with overflow for now TODO
 436+ C72B 67                                   ld      h,a
 437+ C72C C9                                   ret
 438+ C72D 7C           ADDHLDEOppSGN:          ld      a,h                         ; so if we enter here then signs are the same so we clear the 16th bit                     ; here HL and DE are opposite
 439+ C72E E6 7F                                and     SignMask8Bit                ; we could check the value of b for optimisation
 440+ C730 67                                   ld      h,a
 441+ C731 7A                                   ld      a,d
 442+ C732 E6 7F                                and     SignMask8Bit
 443+ C734 57                                   ld      d,a
 444+ C735 B7                                   or      a
 445+ C736 ED 52                                sbc     hl,de
 446+ C738 38 04                                jr      c,ADDHLDEOppInvert
 447+ C73A 78           ADDHLDEOppSGNNoCarry:   ld      a,b                         ; we got here so hl > de therefore we can just take hl's previous sign bit
 448+ C73B B4                                   or      h
 449+ C73C 67                                   ld      h,a                         ; set the previou sign value
 450+ C73D C9                                   ret
 451+ C73E              ADDHLDEOppInvert:       NegHL                                                   ; we need to flip the sign and 2'c the Hl result
 451+ C73E AF          >                    xor a
 451+ C73F 95          >                    sub l
 451+ C740 6F          >                    ld l,a
 451+ C741 9F          >                    sbc a,a
 451+ C742 94          >                    sub h
 451+ C743 67          >                    ld h,a
 452+ C744 78                                   ld      a,b
 453+ C745 EE 80                                xor     SignOnly8Bit                ; flip sign bit
 454+ C747 B4                                   or      h
 455+ C748 67                                   ld      h,a                         ; recover sign
 456+ C749 C9                                   ret
 457+ C74A
 458+ C74A              ; we could cheat, flip the sign of DE and just add but its not very optimised
 459+ C74A 7C           SUBHLDESignedv3:        ld      a,h
 460+ C74B E6 80                                and     SignOnly8Bit
 461+ C74D 47                                   ld      b,a                         ;save sign bit in b
 462+ C74E AA                                   xor     d                           ;if h sign and d sign were different then bit 7 of a will be 1 which means
 463+ C74F                                      JumpIfNegative SUBHLDEOppSGN        ;Signs are opposite therefore we can add
 463+ C74F FA 7D C7    >                        jp		m, SUBHLDEOppSGN
 464+ C752 78           SUBHLDESameSigns:       ld      a,b
 465+ C753 B2                                   or      d
 466+ C754                                      JumpIfNegative SUBHLDESameNeg       ; optimisation so we can just do simple add if both positive
 466+ C754 FA 5E C7    >                        jp		m, SUBHLDESameNeg
 467+ C757 B7                                   or      a
 468+ C758 ED 52                                sbc     hl,de
 469+ C75A                                      JumpIfNegative SUBHLDESameOvrFlw
 469+ C75A FA 71 C7    >                        jp		m, SUBHLDESameOvrFlw
 470+ C75D C9                                   ret
 471+ C75E 7C           SUBHLDESameNeg:         ld      a,h                         ; so if we enter here then signs are the same so we clear the 16th bit
 472+ C75F E6 7F                                and     SignMask8Bit                ; we could check the value of b for optimisation
 473+ C761 67                                   ld      h,a
 474+ C762 7A                                   ld      a,d
 475+ C763 E6 7F                                and     SignMask8Bit
 476+ C765 57                                   ld      d,a
 477+ C766 B7                                   or      a
 478+ C767 ED 52                                sbc     hl,de
 479+ C769                                      JumpIfNegative SUBHLDESameOvrFlw
 479+ C769 FA 71 C7    >                        jp		m, SUBHLDESameOvrFlw
 480+ C76C 7C                                   ld      a,h                         ; now set bit for negative value, we won't bother with overflow for now TODO
 481+ C76D F6 80                                or      SignOnly8Bit
 482+ C76F 67                                   ld      h,a
 483+ C770 C9                                   ret
 484+ C771              SUBHLDESameOvrFlw:      NegHL                                                        ; we need to flip the sign and 2'c the Hl result
 484+ C771 AF          >                    xor a
 484+ C772 95          >                    sub l
 484+ C773 6F          >                    ld l,a
 484+ C774 9F          >                    sbc a,a
 484+ C775 94          >                    sub h
 484+ C776 67          >                    ld h,a
 485+ C777 78                                   ld      a,b
 486+ C778 EE 80                                xor     SignOnly8Bit                ; flip sign bit
 487+ C77A B4                                   or      h
 488+ C77B 67                                   ld      h,a                         ; recover sign
 489+ C77C C9                                   ret
 490+ C77D B7           SUBHLDEOppSGN:          or      a                                               ; here HL and DE are opposite so we can add the values
 491+ C77E 7C                                   ld      a,h                         ; so if we enter here then signs are the same so we clear the 16th bit
 492+ C77F E6 7F                                and     SignMask8Bit                ; we could check the value of b for optimisation
 493+ C781 67                                   ld      h,a
 494+ C782 7A                                   ld      a,d
 495+ C783 E6 7F                                and     SignMask8Bit
 496+ C785 57                                   ld      d,a
 497+ C786 19                                   add     hl,de
 498+ C787 78                                   ld      a,b                         ; we got here so hl > de therefore we can just take hl's previous sign bit
 499+ C788 B4                                   or      h
 500+ C789 67                                   ld      h,a                         ; set the previou sign value
 501+ C78A C9                                   ret
 502+ C78B
 503+ C78B
 504+ C78B              SBCHLDESigned:          JumpOnBitSet h,7,SBCHLDEhlNeg
 504+ C78B CB 7C       >                        bit 	7,h
 504+ C78D C2 9E C7    >                        jp      nz,SBCHLDEhlNeg
 505+ C790              SBCHLDEhlPos:           JumpOnBitSet h,7,SBCHLDEhlNeg
 505+ C790 CB 7C       >                        bit 	7,h
 505+ C792 C2 9E C7    >                        jp      nz,SBCHLDEhlNeg
 506+ C795 ED 52        SBCHLDEhlPosDePos:      sbc     hl,de                           ; ignore overflow for now will sort later TODO
 507+ C797 C9                                   ret
 508+ C798 CB BA        SBCHLDEhlPosDeNeg:      res     7,d
 509+ C79A 19                                   add     hl,de                           ; ignore overflow for now will sort later TODO
 510+ C79B CB FA                                set     7,d
 511+ C79D C9                                   ret
 512+ C79E CB BC        SBCHLDEhlNeg:           res     7,h
 513+ C7A0                                      JumpOnBitSet d,7,SBCHLDEhlNegdeNeg
 513+ C7A0 CB 7A       >                        bit 	7,d
 513+ C7A2 C2 AA C7    >                        jp      nz,SBCHLDEhlNegdeNeg
 514+ C7A5 ED 52        SBCHLDEhlNegdePos:      sbc     hl,de                       ; ignore overflow for now will sort later TODO
 515+ C7A7 CB FC                                set     7,h
 516+ C7A9 C9                                   ret
 517+ C7AA CB BA        SBCHLDEhlNegdeNeg:      res     7,d
 518+ C7AC 19                                   add     hl,de                   ; ignore overflow for now will sort later TODO
 519+ C7AD CB FA                                set     7,d
 520+ C7AF CB FC                                set     7,h
 521+ C7B1 C9                                   ret
 522+ C7B2
 523+ C7B2              ; Roate around axis
 524+ C7B2              ; varAxis1 and varAxis2 point to the address of the axis to rotate
 525+ C7B2              ; so the axis x1 points to roofv  x , y or z
 526+ C7B2              ;             x2           nosev or sidev  x, y or z
 527+ C7B2              ;   Axis1 = Axis1 * (1 - 1/512)  + Axis2 / 16
 528+ C7B2              ;   Axis2 = Axis2 * (1 - 1/512)  - Axis1 / 16
 529+ C7B2              ; var RAT2 gives direction
 530+ C7B2              ; for pitch x we come in with Axis1 = roofv_x and Axis2 = nosev_x
 531+ C7B2              ;-Set up S R -----------------------------------------
 532+ C7B2              ; optimised we don't deal with sign here just the value of roof axis / 512
 533+ C7B2 2A C2 9C     MVS5RotateAxis:         ld      hl,(varAxis1)   ; work on roofv axis to get (1- 1/152) * roofv axis
 534+ C7B5 5E                                   ld      e,(hl)
 535+ C7B6 23                                   inc     hl
 536+ C7B7 56                                   ld      d,(hl)          ; de = Axis1 (roofv x for pitch x)
 537+ C7B8 EB                                   ex      de,hl           ; hl = Axis1 (roofv x for pitch x)
 538+ C7B9 7C                                   ld      a,h
 539+ C7BA E6 80                                and     SignOnly8Bit
 540+ C7BC FD 67                                ld      iyh,a           ; iyh = sign Axis1
 541+ C7BE 7C                                   ld      a,h
 542+ C7BF E6 7F                                and     SignMask8Bit    ; a = Axis1 (roof hi axis  unsigned)
 543+ C7C1 CB 3F                                srl     a               ; a = Axis1/2
 544+ C7C3 5F                                   ld      e,a             ;
 545+ C7C4 FD 7C                                ld      a,iyh           ; A = Axis 1 sign
 546+ C7C6 57                                   ld      d,a             ; de = signed Axis1 / 512
 547+ C7C7 B7                                   or      a               ; clear carry
 548+ C7C8 CD 4A C7                             call    SUBHLDESignedv3 ; hl = roof axis - (roof axis /512) which in effect is roof * (1-1/512)
 549+ C7CB              ;-Push to stack roof axis - (roofaxis/152)  ----------------------------------------------------------------------------------
 550+ C7CB E5                                   push    hl              ; save hl on stack PUSH ID 1 (roof axis - roofv aixs /512)
 551+ C7CC 7D                                   ld      a,l
 552+ C7CD 32 E0 9D                             ld      (varR),a
 553+ C7D0 7C                                   ld      a,h
 554+ C7D1 32 E1 9D                             ld      (varS),a        ;  RS now equals (1- 1/152) * roofv axis or (roof axis - roofv aixs /512)
 555+ C7D4              ;-calculate roofv latter half of calc
 556+ C7D4 2A C4 9C                             ld      hl,(varAxis2)   ; now work on nosev axis to get nosev axis / 16
 557+ C7D7 5E                                   ld      e,(hl)
 558+ C7D8 23                                   inc     hl
 559+ C7D9 56                                   ld      d,(hl)          ; de = value of roof axis
 560+ C7DA 7A                                   ld      a,d
 561+ C7DB E6 80                                and     SignOnly8Bit
 562+ C7DD FD 67                                ld      iyh,a           ; save sign
 563+ C7DF 7A                                   ld      a,d
 564+ C7E0 E6 7F                                and     SignMask8Bit    ; a = nosev hi axis  unsigned
 565+ C7E2 57                                   ld      d,a             ; de = abs (nosev)
 566+ C7E3                                      ShiftDERight1
 566+ C7E3 CB 3A       >			   srl d
 566+ C7E5 CB 1B       >			   rr  e
 567+ C7E7                                      ShiftDERight1
 567+ C7E7 CB 3A       >			   srl d
 567+ C7E9 CB 1B       >			   rr  e
 568+ C7EB                                      ShiftDERight1
 568+ C7EB CB 3A       >			   srl d
 568+ C7ED CB 1B       >			   rr  e
 569+ C7EF                                      ShiftDERight1           ; de = nosev /16 unsigned
 569+ C7EF CB 3A       >			   srl d
 569+ C7F1 CB 1B       >			   rr  e
 570+ C7F3 3A 3B C0                             ld      a,(univRAT2)     ; need to consider direction, so by defautl we use rat2, but flip via sign bit
 571+ C7F6 FD AC                                xor     iyh             ; get the sign back we saveded from DE in so de = nosev axis / 16 signed
 572+ C7F8 E6 80                                and     SignOnly8Bit
 573+ C7FA B2                                   or      d
 574+ C7FB 57                                   ld      d,a             ; de = nosev /16 signed and ready as if we were doing a + or - based on RAT2
 575+ C7FC              ;;; ld      a,e
 576+ C7FC              ;;;     or      iyh
 577+ C7FC              ;;; ld      (varP),a        ; PA now equals nosev axis / 16 signed
 578+ C7FC              ;-now AP = nosev /16  --------------------------------------------------------------------------------------------------------
 579+ C7FC E1                                   pop     hl              ; get back RS POP ID 1
 580+ C7FD                  ;ex     de,hl           ; swapping around so hl = AP and de = SR , shoud not matter though as its an add
 581+ C7FD              ;-now DE = (roofaxis/512) hl - abs(nosevaxis) --------------------------------------------------------------------------------
 582+ C7FD CD 10 C7                             call    ADDHLDESignedv3 ; do add using hl and de
 583+ C800 E5                                   push    hl              ; we use stack to represent var K here now varK = Nosev axis /16 + (1 - 1/512) * roofv axis PUSH ID 2
 584+ C801              ;-push to stack nosev axis + roofvaxis /512  which is what roofv axis will be ------------------------------------------------
 585+ C801              ;-- Set up SR = 1 - 1/512 * nosev-----------------------
 586+ C801 2A C4 9C                         ld      hl,(varAxis2)   ; work on nosev again to get nosev - novesv / 512
 587+ C804 5E                               ld      e,(hl)
 588+ C805 23                               inc     hl
 589+ C806 56                               ld      d,(hl)
 590+ C807 EB                               ex      de,hl
 591+ C808 7C                               ld      a,h
 592+ C809 E6 80                            and     $80
 593+ C80B FD 67                            ld      iyh,a
 594+ C80D 7C                               ld      a,h
 595+ C80E E6 7F                            and     SignMask8Bit    ; a = roof hi axis  unsigned
 596+ C810 CB 3F                            srl     a               ; now A = unsigned 15 bit nosev axis hi / 2 (or in effect nosev / 512
 597+ C812 5F                               ld      e,a
 598+ C813 FD 7C                            ld      a,iyh
 599+ C815 57                               ld      d,a
 600+ C816 B7                               or      a               ; clear carry
 601+ C817 CD 4A C7                         call    SUBHLDESignedv3
 602+ C81A              ;   sbc     hl,de           ; hl = nosev - novesv / 512
 603+ C81A E5                               push    hl              ; save hl on stack  PUSH ID 3
 604+ C81B 7D                               ld      a,l
 605+ C81C 32 DD 9C                         ld      (varP),a        ; p = low of resuilt
 606+ C81F 7C                               ld      a,h
 607+ C820 E6 7F                            and     SignMask8Bit    ; a = roof hi axis  unsigned
 608+ C822 32 FB 9D                         ld      (varT),a        ; t = high of result
 609+ C825              ;-- Set up TQ
 610+ C825 2A C2 9C                         ld      hl,(varAxis1)   ; now work on roofv axis / 16
 611+ C828              ;   ld      hl,(varAxis2)   ; work on nosev again
 612+ C828 5E                               ld      e,(hl)
 613+ C829 23                               inc     hl
 614+ C82A 56                               ld      d,(hl)
 615+ C82B 7A                               ld      a,d
 616+ C82C E6 80                            and     $80
 617+ C82E FD 67                            ld      iyh,a           ; save sign
 618+ C830 7A                               ld      a,d
 619+ C831 E6 7F                            and     SignMask8Bit    ; a = nosev hi axis  unsigned
 620+ C833 57                               ld      d,a             ; de = abs (nosev)
 621+ C834                                  ShiftDERight1
 621+ C834 CB 3A       >			   srl d
 621+ C836 CB 1B       >			   rr  e
 622+ C838                                  ShiftDERight1
 622+ C838 CB 3A       >			   srl d
 622+ C83A CB 1B       >			   rr  e
 623+ C83C                                  ShiftDERight1
 623+ C83C CB 3A       >			   srl d
 623+ C83E CB 1B       >			   rr  e
 624+ C840                                  ShiftDERight1           ; de = nosev /16 unsigned
 624+ C840 CB 3A       >			   srl d
 624+ C842 CB 1B       >			   rr  e
 625+ C844 3A 3B C0                         ld      a,(univRAT2)
 626+ C847 FD AC                            xor     iyh             ; get the sign back in so de = nosev axis / 16 signed
 627+ C849 E6 80                            and     $80
 628+ C84B B2                               or      d
 629+ C84C 57                               ld      d,a
 630+ C84D              ;;; ld      a,e
 631+ C84D              ;;;     or      iyh
 632+ C84D              ;;; ld      (varP),a        ; PA now equals nosev axis / 16 signed
 633+ C84D E1                               pop     hl              ; get back RS   POP ID 3
 634+ C84E              ;   ex      de,hl           ; swapping around so hl = AP and de = SR , shoud not matter though as its an add
 635+ C84E CD 4A C7                         call    SUBHLDESignedv3 ; do add using hl and de
 636+ C851              ;-- Update nosev ---------------------------------------
 637+ C851 EB                               ex      de,hl           ; save hl to de
 638+ C852 2A C4 9C                         ld      hl,(varAxis2)
 639+ C855 73                               ld      (hl),e
 640+ C856 23                               inc     hl
 641+ C857 72                               ld      (hl),d          ; copy result into nosev
 642+ C858              ;-- Update roofv ---------------------------------------
 643+ C858 D1                               pop     de              ; get calc saved on stack POP ID 2
 644+ C859 2A C2 9C                         ld      hl,(varAxis1)
 645+ C85C 73                               ld      (hl),e
 646+ C85D 23                               inc     hl
 647+ C85E 72                               ld      (hl),d          ; copy result into nosev
 648+ C85F C9                               ret
 649+ C860
 650+ C860                                  include "Universe/Ships/InitialiseOrientation.asm"
# file opened: ./Universe/Ships/InitialiseOrientation.asm
   1++C860              InitialiseOrientation:
   2++C860              ZI1:
   3++C860              ;  sidev = (1,  0,  0)  sidev = (&6000, 0, 0)
   4++C860              ;  roofv = (0,  1,  0)  roofv = (0, &6000, 0)
   5++C860              ;  nosev = (0,  0, -1)  nosev = (0, 0, &E000)   E000 = SignBit[96]
   6++C860 21 00 00         ld      hl, 0
   7++C863 22 17 C0         ld      (UBnkrotmatSidevY),hl                ; set the zeroes
   8++C866 22 19 C0         ld      (UBnkrotmatSidevZ),hl                ; set the zeroes
   9++C869 22 1B C0         ld      (UBnkrotmatRoofvX),hl                ; set the zeroes
  10++C86C 22 1F C0         ld      (UBnkrotmatRoofvZ),hl                ; set the zeroes
  11++C86F 22 21 C0         ld      (UBnkrotmatNosevX),hl                ; set the zeroes
  12++C872 22 23 C0         ld      (UBnkrotmatNosevY),hl                ; set the zeroes
  13++C875 21 00 60         ld      hl, $6000					; 96 in hi byte
  14++C878                  ;ld      hl,1
  15++C878 22 15 C0         ld      (UBnkrotmatSidevX),hl
  16++C87B 22 1D C0         ld      (UBnkrotmatRoofvY),hl
  17++C87E 21 00 E0         ld      hl, $E000					; -96 in hi byte which is +96 with hl bit 7 set
  18++C881 22 25 C0         ld      (UBnkrotmatNosevZ),hl
  19++C884 C9               ret
  20++C885
  21++C885              ;  sidev = (1,  0,  0)  sidev = (&6000, 0, 0)
  22++C885              ;  roofv = (0,  1,  0)  roofv = (0, &6000, 0)
  23++C885              ;  nosev = (-0,  -0, 1) nosev = (0, 0, &6000)
  24++C885
  25++C885              LaunchedOrientation:
  26++C885 CD 60 C8         call    InitialiseOrientation
  27++C888                  FlipSignMem UBnkrotmatNosevX+1;  as its 0 flipping will make no difference
  27++C888 3A 22 C0    >                        ld  a,(UBnkrotmatNosevX+1)
  27++C88B EE 80       >                        xor SignOnly8Bit
  27++C88D 32 22 C0    >                        ld  (UBnkrotmatNosevX+1),a
  28++C890                  FlipSignMem UBnkrotmatNosevY+1;  as its 0 flipping will make no difference
  28++C890 3A 24 C0    >                        ld  a,(UBnkrotmatNosevY+1)
  28++C893 EE 80       >                        xor SignOnly8Bit
  28++C895 32 24 C0    >                        ld  (UBnkrotmatNosevY+1),a
  29++C898                  FlipSignMem UBnkrotmatNosevZ+1
  29++C898 3A 26 C0    >                        ld  a,(UBnkrotmatNosevZ+1)
  29++C89B EE 80       >                        xor SignOnly8Bit
  29++C89D 32 26 C0    >                        ld  (UBnkrotmatNosevZ+1),a
  30++C8A0 C9               ret
  31++C8A1
# file closed: ./Universe/Ships/InitialiseOrientation.asm
 651+ C8A1
 652+ C8A1              ;----------------------------------------------------------------------------------------------------------------------------------
 653+ C8A1              OrientateVertex:
 654+ C8A1
 655+ C8A1              ;                      [ sidev_x sidev_y sidev_z ]   [ x ]
 656+ C8A1              ;  projected [x y z] = [ roofv_x roofv_y roofv_z ] . [ y ]
 657+ C8A1              ;                      [ nosev_x nosev_y nosev_z ]   [ z ]
 658+ C8A1              ;
 659+ C8A1
 660+ C8A1              ;----------------------------------------------------------------------------------------------------------------------------------
 661+ C8A1              TransposeVertex:
 662+ C8A1              ;                      [ sidev_x roofv_x nosev_x ]   [ x ]
 663+ C8A1              ;  projected [x y z] = [ sidev_y roofv_y nosev_y ] . [ y ]
 664+ C8A1              ;                      [ sidev_z roofv_z nosev_z ]   [ z ]
 665+ C8A1              VectorToVertex:
 666+ C8A1              ;                     [ sidev_x roofv_x nosev_x ]   [ x ]   [ x ]
 667+ C8A1              ;  vector to vertex = [ sidev_y roofv_y nosev_y ] . [ y ] + [ y ]
 668+ C8A1              ;                     [ sidev_z roofv_z nosev_z ]   [ z ]   [ z ]
 669+ C8A1              ;INPUTS:    bhl = dividend  cde = divisor where b and c are sign bytes
 670+ C8A1              ;OUTPUTS:   cahl = quotient cde = divisor
 671+ C8A1 32 DF 9C     DVID3B2:                ld      (varPhi2),a                     ;DVID3B2 \ Divide 3 bytes by 2, K = [P(HiLo).A]/[INWK_z HiLo], for planet radius, Xreg protected. ; P+2    \ num sg
 672+ C8A4                                      ldCopy2Byte UBnKzlo, varQ               ; [QR} = Ubnk zlohi  (i.e. Inwk_z HiLo)
 672+ C8A4 2A 12 C0    >                        ld       hl,(UBnKzlo)
 672+ C8A7 22 DF 9D    >                        ld       (varQ),hl
 673+ C8AA 3A 14 C0                             ld      a,(UBnKzsgn)                    ;
 674+ C8AD 32 E1 9D                             ld      (varS),a                        ; S = inkw z sign
 675+ C8B0 ED 5B DD 9C  DVID3B:                 ld      de,(varP)                       ; K (3bytes)=P(Lo Hi Hi2)/S.R.Q approx  Acc equiv K(0).; get P and P+1 into de
 676+ C8B4 7B                                   ld      a,e                             ; num lo
 677+ C8B5 F6 01                                or      1                               ; must be at least 1
 678+ C8B7 32 DD 9C                             ld      (varP),a                        ; store
 679+ C8BA 5F                                   ld      e,a                             ; update DE too
 680+ C8BB 3A DF 9C                             ld      a,(varPhi2)                     ; varP Sign     E.D.A = P Lo Hi Hi2
 681+ C8BE 21 E1 9D                             ld      hl,varS                         ; hl = address of VarS
 682+ C8C1 AE                                   xor     (hl)                            ; A = PHi2 Xor S Signs
 683+ C8C2 E6 80                                and     $80                             ;
 684+ C8C4 32 FB 9D                             ld      (varT),a                        ; T = Sign bit of A
 685+ C8C7 FD 2E 00                             ld      iyl,0                           ; iyl = yReg = counter
 686+ C8CA 3A DF 9C                             ld      a,(varPhi2)                     ;
 687+ C8CD E6 7F                                and     $7F                             ; A = Ph2 again but minus sign bit
 688+ C8CF              DVL9:                   JumpIfAGTENusng $40,DV14                ; counter Y up; if object is over $40 away then scaled and exit Y count
 688+ C8CF FE 40       >                        cp     $40
 688+ C8D1 D2 DF C8    >                        jp		nc,DV14
 689+ C8D4                                      ShiftDELeft1                            ; de (or P,P1) > 1
 689+ C8D4 CB 23       >			   sla e
 689+ C8D6 CB 12       >			   rl  d
 690+ C8D8 CB 17                                rl      a                               ; and accumulator as 3rd byte
 691+ C8DA FD 2C                                inc     iyl
 692+ C8DC C2 CF C8                             jp      nz,DVL9                         ; loop again with a max of 256 iterations
 693+ C8DF 32 DF 9C     DV14:                   ld      (varPhi2),a                     ; scaled, exited Ycount
 694+ C8E2 ED 53 DD 9C                          ld      (varP),de                       ; store off the value so far
 695+ C8E6 3A E1 9D                             ld      a,(varS)                        ; zsign
 696+ C8E9 E6 7F                                and     $7F                             ; denom sg7
 697+ C8EB                                      ; jp mi,DV9                             ; this can never happen as bit 7 is and'ed out
 698+ C8EB 2A DF 9D                             ld      hl,(varQ)                       ; demon lo
 699+ C8EE FD 2D        DVL6:                   dec     iyl                             ; counter Y back down, roll S. ;  scale Y back
 700+ C8F0                                      ShiftHLLeft1
 700+ C8F0 CB 25       >			   sla l
 700+ C8F2 CB 14       >			   rl  h
 701+ C8F4 CB 17                                rl      a                               ; mulitply QRS by 2
 702+ C8F6 F2 EE C8                             jp      p,DVL6                          ; loop roll S until Abit7 set.
 703+ C8F9 22 DF 9D     DV9:                    ld      (varQ),hl                       ; bmi cant enter here from above ; save off so far
 704+ C8FC 32 DF 9D                             ld      (varQ),a                        ; Q \ mostly empty so now reuse as hi denom
 705+ C8FF 3E FE                                ld      a,$FE                           ;  Xreg protected so can't LL28+4
 706+ C901 32 E0 9D                             ld      (varR),a                        ;  R
 707+ C904 3A DF 9C                             ld      a,(varPhi2)                     ; P+2 \ big numerator
 708+ C907 CD 73 AE                             call    PROJ256mulAdivQ                 ; TODO LL31\ R now =A*256/Q
 709+ C90A 3E 00                                ld      a,0
 710+ C90C 32 F3 9D                             ld      (varKp1),a
 711+ C90F 32 F4 9D                             ld      (varKp2),a
 712+ C912 32 F5 9D                             ld      (varKp3),a                      ; clear out K+1 to K+3
 713+ C915 FD 7D                                ld      a,iyl                           ; Y counter for scale
 714+ C917                                      JumpOnBitClear a,7,DV12                 ; Ycount +ve
 714+ C917 CB 7F       >                        bit 	7,a
 714+ C919 CA 44 C9    >                        jp      z,DV12
 715+ C91C 3A E0 9D                             ld      a,(varR)                        ; R     \ else Y count is -ve, Acc = remainder.
 716+ C91F ED 5B F2 9D                          ld      de,(varK)                       ; d= k1
 717+ C923 2A F6 9D                             ld      hl,(varK2)                      ; h = k3, l = k2
 718+ C926 5F                                   ld      e,a                             ; use e to hold K0 pulled from a
 719+ C927 CB 27        DVL8:                   sla     a                               ; boost up a                     ;  counter Y up
 720+ C929 CB 12                                rl      d                               ; k1
 721+ C92B CB 15                                rl      l                               ; k2
 722+ C92D CB 14                                rl      h                               ; k3
 723+ C92F FD 2C                                inc     iyl
 724+ C931 20 F4                                jr      nz,DVL8                         ;
 725+ C933 ED 53 F2 9D  DVL8Save:               ld      (varK),de
 726+ C937 22 F6 9D                             ld      (varK2),hl                      ; save back K0 to k3
 727+ C93A 3A FB 9D                             ld      a,(varT)
 728+ C93D 4F                                   ld      c,a                             ; get varT into c reg
 729+ C93E 7C                                   ld      a,h                             ; a= k3 (sign)
 730+ C93F B1                                   or      c                               ; merge in varT (sign)that was saved much earlier up)
 731+ C940 32 05 9E                             ld      (varK3),a                       ; load sign bit back into K3
 732+ C943 C9                                   ret
 733+ C944              DV12:                   JumpIfAIsZero   DV13                    ; Y Count zerp, go to DV13
 733+ C944 A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
 733+ C945 CA 5C C9    >                        jp	    z, DV13
 734+ C948 3A E0 9D                             ld      a,(varR)                        ; Reduce Remainder
 735+ C94B CB 3F        DVL10:                  srl     a                               ; divide by 2                     ; counter Y reduce
 736+ C94D FD 2D                                dec     iyl
 737+ C94F C2 4B C9                             jp      nz,DVL10                        ; loop y reduce until y is zero
 738+ C952 32 F2 9D                             ld      (varK),a                        ; k Lo
 739+ C955                                      ldCopyByte  varT,varKp3                 ; Copy sign to K+3
 739+ C955 3A FB 9D    >                        ld       a,(varT)
 739+ C958 32 F5 9D    >                        ld       (varKp3),a
 740+ C95B C9                                   ret
 741+ C95C              DV13:                   ldCopyByte  varR,varK                   ; R \ already correct so copy to K lo;DV13   \ Ycount zero \ K(1to2) already = 0
 741+ C95C 3A E0 9D    >                        ld       a,(varR)
 741+ C95F 32 F2 9D    >                        ld       (varK),a
 742+ C962                                      ldCopyByte  varT,varKp3                 ; Copy sign to K+3
 742+ C962 3A FB 9D    >                        ld       a,(varT)
 742+ C965 32 F5 9D    >                        ld       (varKp3),a
 743+ C968 C9                                   ret
 744+ C969
 745+ C969 CD A1 C8     PLS6:                   call    DVID3B2                         ; Returns AHL K ( 2 1 0 )
 746+ C96C 3A F5 9D                             ld      a,(varKp3)
 747+ C96F E6 7F                                and     $7F
 748+ C971 21 F4 9D                             ld      hl,varKp2
 749+ C974 B6                                   or      (hl)
 750+ C975 C2 8A C9                             jp      nz,PL44TooBig
 751+ C978 3A F3 9D                             ld      a,(varKp1)
 752+ C97B FE 04                                cp      4                               ; if high byte > 4 then total > 1024 so too big
 753+ C97D 30 0B                                jr      nc,PL44TooBig
 754+ C97F                                      ClearCarryFlag                          ; we have a good result regardless
 754+ C97F B7          >                        or a
 755+ C980 2A F2 9D                             ld      hl,(varK)                       ; get K (0 1)
 756+ C983 3A F5 9D                             ld      a,(varKp3)                      ; if sign bit high?
 757+ C986 CB 7F                                bit     7,a
 758+ C988 C8                                   ret     z                               ; no so we can just return
 759+ C989 C9           PL44:                   ret
 760+ C98A 37           PL44TooBig:             scf
 761+ C98B C9                                   ret
 762+ C98C              Project:
 763+ C98C 2A 0C C0     PROJ:                   ld      hl,(UBnKxlo)                    ; Project K+INWK(x,y)/z to K3,K4 for center to screen
 764+ C98F 22 DD 9C                             ld      (varP),hl
 765+ C992 3A 0E C0                             ld      a,(UBnKxsgn)
 766+ C995 CD 69 C9                             call    PLS6                            ; returns result in K (0 1) (unsigned) and K (3) = sign note to no longer does 2's C
 767+ C998 D8                                   ret     c                               ; carry means don't print
 768+ C999 2A F2 9D                             ld      hl,(varK)                       ; hl = k (0 1)
 769+ C99C                                      ; Now the question is as hl is the fractional part, should this be multiplied by 127 to get the actual range
 770+ C99C 3E 80                                ld      a,ViewCenterX
 771+ C99E ED 31                                add     hl,a                            ; add unsigned a to the 2's C HL to get pixel position
 772+ C9A0 22 05 9E                             ld      (varK3),hl                      ; K3 = X position on screen
 773+ C9A3 2A 0F C0     ProjectY:               ld      hl,(UBnKylo)
 774+ C9A6 22 DD 9C                             ld      (varP),hl
 775+ C9A9 3A 11 C0                             ld      a,(UBnKysgn)
 776+ C9AC CD 69 C9                             call    PLS6
 777+ C9AF D8                                   ret     c
 778+ C9B0 2A F2 9D                             ld      hl,(varK)                       ; hl = k (0 1)
 779+ C9B3 3E 40                                ld      a,ViewCenterY
 780+ C9B5 ED 31                                add     hl,a                            ; add unsigned a to the 2's C HL to get pixel position
 781+ C9B7 22 0B 9E                             ld      (varK4),hl                      ; K3 = X position on screen
 782+ C9BA C9                                   ret
 783+ C9BB              ;--------------------------------------------------------------------------------------------------------
 784+ C9BB                                      include "./ModelRender/EraseOldLines-EE51.asm"
# file opened: ././ModelRender/EraseOldLines-EE51.asm
   1++C9BB              ;
   2++C9BB              ; EraseOldLines:
   3++C9BB              ;	Loop from 0 to UbnKEdgeHeapCounter (note this should be 4 * actual nbr of lines)
   4++C9BB              ;		draw line (black) UBnkLinesArray[0,1]+Loop to [2,3]+loop
   5++C9BB              ;	 	loop + 4
   6++C9BB              ; Return
   7++C9BB
   8++C9BB              EraseOldLines:
   9++C9BB              EE51:										; if bit3 set draw lines in XX19 heap
  10++C9BB              	ReturnOnMemBitClear UBnKexplDsp,3       ; bit 3 denotes that there is nothing to erase as its already done
  10++C9BB 3A 3D C0    >                        ld     a,(UBnKexplDsp)
  10++C9BE CB 5F       >                        bit 	3,a
  10++C9C0 C8          >                        ret		z
  11++C9C1 CB DF        	set		3,a
  12++C9C3 32 3D C0     	ld		(UBnKexplDsp),a  				; else toggle bit3 to allow lines (set will do as its 0 by now)
  13++C9C6 C3 B0 EA     	jp		clearLines						; LL115	clear LINEstr. Draw lines in XX19 heap.  - note its an & not direct
  14++C9C9              ; We use the ret from the clearLines so not needed here
  15++C9C9
# file closed: ././ModelRender/EraseOldLines-EE51.asm
 785+ C9C9                                      include "./ModelRender/TrimToScreenGrad-LL118.asm"
# file opened: ././ModelRender/TrimToScreenGrad-LL118.asm
   1++C9C9              ;TrimToScreenGrad:
   2++C9C9              ;LL118:										; Trim XX15,XX15+2 to screen grad=XX12+2 for CLIP
   3++C9C9              ;ret
   4++C9C9              ;TODO        ld      hl,(UBnKx1Lo)               ; XX15+0,1 \ x1 hi
   5++C9C9              ;TODO        bit     7,a
   6++C9C9              ;TODO        jr      nz,LL119		            ; x1 hi+ve skip down
   7++C9C9              ;TODO        ld      a,h
   8++C9C9              ;TODO        ld      (varS),a                    ; S	 \ else x1 hi -ve
   9++C9C9              ;TODO        call    XYeqyx1loSmulMdiv256                       ; LL120	 \ X1<0  their comment \ X.Y = x1_lo.S *  M/2566
  10++C9C9              ;TODO        ld      bc,(UbnKy1Lo)               ; step Y1 lo
  11++C9C9
  12++C9C9              ;18                      CLC
  13++C9C9              ;65 36                   ADC &36		\ XX15+2 \ Y1 lo
  14++C9C9              ;85 36                   STA &36			 \ XX15+2
  15++C9C9              ;98                      TYA 			 \ step Y1 hi
  16++C9C9              ;65 37                   ADC &37		\ XX15+3 \ Y1 hi
  17++C9C9              ;85 37                   STA &37			 \ XX15+3
  18++C9C9              ;A9 00                   LDA #0			 \ xleft min
  19++C9C9              ;85 34                   STA &34		\ XX15+0 \ X1 lo
  20++C9C9              ;85 35                   STA &35		\ XX15+1 \ X1 = 0
  21++C9C9              ;AA                      TAX 			 \ Xreg = 0, will skip to Ytrim
  22++C9C9              ;	.LL119	\ x1 hi +ve from LL118
  23++C9C9              ;F0 19                   BEQ LL134		 \ if x1 hi = 0 skip to Ytrim
  24++C9C9              ;85 83                   STA &83		\ S	 \ else x1 hi > 0
  25++C9C9              ;C6 83                   DEC &83		\ S	 \ x1 hi-1
  26++C9C9              ;20 19 50                JSR &5019	\ LL120  \ X1>255 their comment \ X.Y = x1lo.S *  M/256
  27++C9C9              ;8A                      TXA 			 \ step Y1 lo
  28++C9C9              ;18                      CLC
  29++C9C9              ;65 36                   ADC &36		\ XX15+2 \ Y1 lo
  30++C9C9              ;85 36                   STA &36			 \ XX15+2
  31++C9C9              ;98                      TYA 			 \ step Y1 hi
  32++C9C9              ;65 37                   ADC &37		\ XX15+3 \ Y1 hi
  33++C9C9              ;85 37                   STA &37			 \ XX15+3
  34++C9C9              ;A2 FF                   LDX #&FF		 \ xright max
  35++C9C9              ;86 34                   STX &34		\ XX15+0 \ X1 lo
  36++C9C9              ;E8                      INX 			 \ X = 0
  37++C9C9              ;86 35                   STX &35		\ XX15+1 \ X1 = 255
  38++C9C9              ;	.LL134	\ Ytrim
  39++C9C9              ;A5 37                   LDA &37		\ XX15+3 \ y1 hi
  40++C9C9              ;10 1A                   BPL LL135		 \ y1 hi +ve
  41++C9C9              ;85 83                   STA &83		\ S	 \ else y1 hi -ve
  42++C9C9              ;A5 36                   LDA &36		\ XX15+2 \ y1 lo
  43++C9C9              ;85 82                   STA &82		\ R	 \ Y1<0 their comment
  44++C9C9              ;20 48 50                JSR &5048	\ LL123	 \ X.Y=R.S*256/M (M=grad.)   \where 256/M is gradient
  45++C9C9              ;8A                      TXA 			 \ step X1 lo
  46++C9C9              ;18                      CLC
  47++C9C9              ;65 34                   ADC &34		\ XX15+0 \ X1 lo
  48++C9C9              ;85 34                   STA &34			 \ XX15+0
  49++C9C9              ;98                      TYA 			 \ step X1 hi
  50++C9C9              ;65 35                   ADC &35		\ XX15+1 \ X1 hi
  51++C9C9              ;85 35                   STA &35			 \ XX15+1
  52++C9C9              ;A9 00                   LDA #0			 \ Y bottom min
  53++C9C9              ;85 36                   STA &36		\ XX15+2 \ Y1 lo
  54++C9C9              ;85 37                   STA &37		\ XX15+3 \ Y1 = 0
  55++C9C9              ;	.LL135	\ y1 hi +ve from LL134
  56++C9C9              ;A5 36                   LDA &36		\ XX15+2 \ Y1 lo
  57++C9C9              ;38                      SEC
  58++C9C9              ;E9 C0                   SBC #&C0		 \ #Y*2  screen y height
  59++C9C9              ;85 82                   STA &82		\ R	 \ Y1>191 their comment
  60++C9C9              ;A5 37                   LDA &37		\ XX15+3 \ Y1 hi
  61++C9C9              ;E9 00                   SBC #0			 \ any hi
  62++C9C9              ;85 83                   STA &83			 \ S
  63++C9C9              ;90 16                   BCC LL136		 \ failed, rts
  64++C9C9              ;	.LL139
  65++C9C9              ;20 48 50                JSR &5048	\ LL123	 \ X.Y=R.S*256/M (M=grad.)   \where 256/M is gradient
  66++C9C9              ;8A                      TXA 			 \ step X1 lo
  67++C9C9              ;18                      CLC
  68++C9C9              ;65 34                   ADC &34		\ XX15+0 \ X1 lo
  69++C9C9              ;85 34                   STA &34			 \ XX15+0
  70++C9C9              ;98                      TYA 			 \ step X1 hi
  71++C9C9              ;65 35                   ADC &35		\ XX15+1 \ X1 hi
  72++C9C9              ;85 35                   STA &35			 \ XX15+1
  73++C9C9              ;A9 BF                   LDA #&BF		 \ #Y*2-1 = y top max
  74++C9C9              ;85 36                   STA &36		\ XX15+2 \ Y1 lo
  75++C9C9              ;A9 00                   LDA #0			 \ Y1 hi = 0
  76++C9C9              ;85 37                   STA &37		\ XX15+3 \ Y1 = 191
  77++C9C9              ;	.LL136	\ rts
  78++C9C9              ;60                      RTS 		 	 \ -- trim for CLIP done
  79++C9C9              ;
  80++C9C9
# file closed: ././ModelRender/TrimToScreenGrad-LL118.asm
 786+ C9C9                                      include "./ModelRender/CLIP-LL145.asm"
# file opened: ././ModelRender/CLIP-LL145.asm
   1++C9C9              ;--------------------------------------------------------------------------------------------------------------------
   2++C9C9
   3++C9C9 00           clipDx                  DB      0           ; also XX12+2
   4++C9CA 00           clipDxHigh              DB      0           ; also XX12+3
   5++C9CB 00           clipDxHighNonABS        DB      0           ; also XX12+3
   6++C9CC 00           clipDy                  DB      0           ; also XX12+4
   7++C9CD 00           clipDyHigh              DB      0           ; also XX12+5
   8++C9CE 00           clipGradient            DB      0
   9++C9CF 00           clipDxySign             DB      0
  10++C9D0              varX12p3                equ     clipDxySign
  11++C9D0 00           clipXGTY                DB      0
  12++C9D1 00           clipFlags               DB      0
  13++C9D2 00           SWAP                    DB      0
  14++C9D3 00 00        varYX                   DW      0
  15++C9D5              ;varRegX                 DB      0
  16++C9D5              ;varXX12p2               DB      0
  17++C9D5 00           clipXX13                 DB      0
  18++C9D6
  19++C9D6
  20++C9D6              ; bounds check and the start to avoid dxy calcs if off screen, eliminating off screens first saves a lot of uncessary mul/div
  21++C9D6              ;ClipXX15XX12Line:
  22++C9D6 ED 4B 90 C0  ClipLine:               ld      bc,(UbnkPreClipY1)          ; bc - XX15(2,3)
  23++C9DA DD 2A 94 C0                          ld      ix,(UbnkPreClipY2)          ; ix - XX12(0,1)
  24++C9DE 2A 8E C0                             ld      hl,(UbnkPreClipX1)          ; hl - XX15(0,1)
  25++C9E1 ED 5B 92 C0                          ld      de,(UbnkPreClipX2)          ; de - XX15(4,5)
  26++C9E5 AF                                   xor     a
  27++C9E6 32 D2 C9                             ld      (SWAP),a                    ; SWAP = 0
  28++C9E9 7A                                   ld      a,d                         ; A = X2Hi
  29++C9EA FD 26 BF     .LL147:                 ld      iyh,$BF                     ; we need to be 191 as its 128 + another bit set from 0 to 6, we are using iyh as regX
  30++C9ED                                      ;       push    af
  31++C9ED                                      ;       ld      a,iyh
  32++C9ED                                      ;       ld      (regX),a
  33++C9ED                                      ;       pop     af
  34++C9ED DD B4                                or      ixh                         ; if (X2Hi L-OR Y2 Hi <> 0) goto LL107             -- X2Y2 off screen
  35++C9EF 20 0A                                jr      nz, .LL107
  36++C9F1 DD 7D                                ld      a,ixl
  37++C9F3 ED 27 80                             test    $80                         ; if screen hight < y2 lo, i.e y2 lo >127 goto LL107,
  38++C9F6 20 03                                jr      nz,.LL107
  39++C9F8 FD 26 00                             ld      iyh, 0                      ; else iyh = regX = 0                                                                        -- X2Y2 on screen
  40++C9FB                                      ;        push    af
  41++C9FB                                      ;        ld      a,iyh
  42++C9FB                                      ;        ld      (regX),a
  43++C9FB                                      ;        pop     af
  44++C9FB              ; XX13 = regX (i.e. iyh)      ( if XX13 = XX13 is 191 if (x2, y2) is off-screen else 0) we bin XX13 as not needed
  45++C9FB              ; so XX13 = 0 if x2_hi = y2_hi = 0, y2_lo is on-screen,  XX13 = 191 if x2_hi or y2_hi are non-zero or y2_lo is off the bottom of the screen
  46++C9FB FD 7C        .LL107                  ld      a,iyh
  47++C9FD 32 D5 C9                             ld      (clipXX13),a                ; debug copy iyh to xx13
  48++CA00 7C                                   ld      a,h                         ; If (X1 hi L-OR Y1) hi  goto LL83                   -- X1Y1 off screen and maybe X2Y2
  49++CA01 B0                                   or      b                           ;
  50++CA02 20 27                                jr      nz,.LL83                    ;
  51++CA04 79                                   ld      a,c                         ; or (y1 lo > bottom of screen)
  52++CA05 ED 27 80                             test    $80                         ; i.e  screen height < y1)
  53++CA08 20 21                                jr      nz,.LL83
  54++CA0A              ; If we get here, (x1, y1) is on-screen
  55++CA0A FD 7C                                ld      a,iyh                       ; iyh = xx13 at this point if  XX13 <> 0 goto LL108                                                        -- X1Y1 on screen, if we flagged X2Y2 off screen goto LL108
  56++CA0C FE 00                                cp      0
  57++CA0E 20 15                                jr      nz, .LL108
  58++CA10              ; Finished clipping exit point ----------------------------------------------------------------------------------------
  59++CA10 79           .ClipDone:              ld      a,c                         ; LL146 (Clip Done)               Y1 = y1 lo, x2 = x2 lo, x1 = x1 lo y1 = y1 lo                                   -- Nothing off screen
  60++CA11 32 8F C0                             ld      (UBnkNewY1),a
  61++CA14 DD 7D                                ld      a,ixl
  62++CA16 32 91 C0                             ld      (UBnkNewY2),a
  63++CA19 7D                                   ld      a,l
  64++CA1A 32 8E C0                             ld      (UBnkNewX1),a
  65++CA1D 7B                                   ld      a,e
  66++CA1E 32 90 C0                             ld      (UBnkNewX2),a
  67++CA21                                      ClearCarryFlag                      ; carry is clear so valid to plot is in XX15(0to3)
  67++CA21 B7          >                        or a
  68++CA22 C9                                   ret                                 ; 2nd pro different, it swops based on swop flag around here.
  69++CA23              ; Finished out of bounds exit point -----------------------------------------------------------------------------------
  70++CA23 37           .PointsOutofBounds:     scf                                 ; LL109 (ClipFailed) carry flag set as not visible
  71++CA24 C9                                   ret
  72++CA25 FD 7C        .LL108:                 ld      a,iyh
  73++CA27 B7                                   or      a
  74++CA28 1F                                   rra
  75++CA29 FD 67                                ld      iyh,a                       ; (X2Y2 Off Screen)         XX13 = 95 (i.e. divide it by 2)                                                 -- X1Y1 on screen X2Y2 off screen
  76++CA2B                                      ;        push    af                  ;OPTIMISATION 6/11/21 commented out
  77++CA2B                                      ;        ld      a,iyh               ;OPTIMISATION 6/11/21 commented out
  78++CA2B                                      ;        ld      (regX),a            ;OPTIMISATION 6/11/21 commented out
  79++CA2B                                      ;        pop     af                  ;OPTIMISATION 6/11/21 commented out
  80++CA2B FD 7C        .LL83:                  ld      a,iyh                       ; (Line On screen Test)      if XX13 < 128 then only 1 point is on screen so goto LL115                      -- We only need to deal with X2Y2
  81++CA2D ED 27 80                             test    $80                         ;
  82++CA30 28 28                                jr      z, .LL115                   ;
  83++CA32 7C                                   ld      a,h                         ; If both x1_hi and x2_hi have bit 7 set, jump to LL109  to return from the subroutine with the C flag set, as the entire line is above the top of the screen
  84++CA33 A2                                   and     d
  85++CA34                                      JumpIfNegative  .PointsOutofBounds
  85++CA34 FA 23 CA    >                        jp		m, .PointsOutofBounds
  86++CA37 78                                   ld      a,b                         ; If both y1_hi and y2_hi have bit 7 set, jump to LL109  to return from the subroutine with the C flag set, as the entire line is above the top of the screen
  87++CA38 DD A4                                and     ixh
  88++CA3A                                      JumpIfNegative  .PointsOutofBounds
  88++CA3A FA 23 CA    >                        jp		m, .PointsOutofBounds
  89++CA3D 7C                                   ld      a,h                         ; If neither (x1_hi - 1) or (x2_hi - 1) have bit 7 set, jump to LL109 to return from the subroutine with the C  flag set, as the line doesn't fit on-screen
  90++CA3E 3D                                   dec     a
  91++CA3F FD 6F                                ld      iyl,a                       ; using iyl as XX12+2 var
  92++CA41                                      ;        push    af                 ;OPTIMISATION 6/11/21 commented out
  93++CA41                                      ;        ld      a,iyl              ;OPTIMISATION 6/11/21 commented out
  94++CA41                                      ;        ld      (varXX12p2),a      ;OPTIMISATION 6/11/21 commented out
  95++CA41                                      ;        pop     af                 ;OPTIMISATION 6/11/21 commented out
  96++CA41 7A                                   ld      a,d                         ; a = x2 hi
  97++CA42 3D                                   dec     a
  98++CA43 FD B5                                or      iyl                         ; (x2 hi -1 ) or (x1 hi -1)
  99++CA45                                      JumpIfPositive .PointsOutofBounds   ; if both x1 and x2hi were > 0 then subtracting 1 would result in 0..254 so either being negative means it was 0 before
  99++CA45 F2 23 CA    >                        jp		p, .PointsOutofBounds
 100++CA48              ;by here we have eliminated -ve Y1 bounds so can just test for positive high and bit 7 of lo
 101++CA48 DD 7C                                ld      a,ixh
 102++CA4A 3D                                   dec     a
 103++CA4B FD 6F                                ld      iyl,a
 104++CA4D 78                                   ld      a,b
 105++CA4E 3D                                   dec     a
 106++CA4F FD B5                                or      iyl
 107++CA51                                      JumpIfPositive .PointsOutofBounds   ; if both x1 and x2hi were > 0 then subtracting 1 would result in 0..254 so either being negative means it was 0 before
 107++CA51 F2 23 CA    >                        jp		p, .PointsOutofBounds
 108++CA54 79                                   ld      a,c
 109++CA55 DD A5                                and     ixl
 110++CA57                                      JumpIfNegative .PointsOutofBounds   ; really if both are > 127
 110++CA57 FA 23 CA    >                        jp		m, .PointsOutofBounds
 111++CA5A              ; Clip line: calulate the line's gradient
 112++CA5A              ; here as an optimisation we make sure X1 is always < X2  later on
 113++CA5A              .LL115:                 ClearCarryFlag
 113++CA5A B7          >                        or a
 114++CA5B E5 D5        .CalcDX:                push    hl,,de
 115++CA5D EB                                   ex      hl,de                       ; so hl is x2 and de = x1
 116++CA5E ED 52                                sbc     hl,de
 117++CA60                                     ; pop     de                          ; we need de back
 118++CA60 22 C9 C9                             ld      (clipDx),hl
 119++CA63 7C                                   ld      a,h
 120++CA64 32 CB C9                             ld      (clipDxHighNonABS),a
 121++CA67                                     ; ld      a,e                         ;a = x2 lo
 122++CA67                                     ; sbc     a,l                         ;a= a - x1
 123++CA67                                     ; ld      (clipDx),a
 124++CA67                                     ; ld      a,d
 125++CA67                                     ; sbc     a,h
 126++CA67                                     ; ld      (clipDxHigh),a                ; later we will just move to sub hl,de
 127++CA67                                     ; ld      (clipDxHighNonABS),a          ; it looks liek we need this later post scale loop
 128++CA67              .CalcDy:                ClearCarryFlag
 128++CA67 B7          >                        or a
 129++CA68 DD E5 E1                             ld      hl,ix
 130++CA6B ED 42                                sbc     hl,bc
 131++CA6D 54 5D                                ld      de,hl           ;;OPTIMISATION 6/11/21
 132++CA6F 22 CC C9                             ld      (clipDy),hl     ;OPTIMISATION 6/11/21 commented out
 133++CA72 7C           .CalcQuadrant:          ld      a,h
 134++CA73                                     ; ld      a,ixl
 135++CA73                                     ; sbc     c
 136++CA73                                     ; ld      (clipDy),a
 137++CA73                                     ; ld      a,ixh
 138++CA73                                     ; sbc     a,b
 139++CA73                                     ; ld      (clipDyHigh),a              ; so A = sign of deltay in effect
 140++CA73                                     ; pop     hl
 141++CA73
 142++CA73              ;So we now have delta_x in XX12(3 2), delta_y in XX12(5 4)  where the delta is (x1, y1) - (x2, y2))
 143++CA73                                    ;  push    hl                          ; Set S = the sign of delta_x * the sign of delta_y, so if bit 7 of S is set, the deltas have different signs
 144++CA73 21 CA C9                             ld      hl,clipDxHigh
 145++CA76 AE                                   xor     (hl)                        ; now a = sign dx xor sign dy
 146++CA77 32 E1 9D                             ld      (varS),a                    ; DEBGU putting it in var S too for now
 147++CA7A 32 CF C9                             ld      (clipDxySign),a
 148++CA7D 3A CD C9     .AbsDy:                 ld      a,(clipDyHigh)
 149++CA80 ED 27 80                             test    $80
 150++CA83 28 0C                                jr      z,.LL110                    ; If delta_y_hi is positive, jump down to LL110 to skip the following
 151++CA85 2A CC C9                             ld      hl,(clipDy)                 ;OPTIMISATION 6/11/21 commented out
 152++CA88                                      macronegate16de                     ; Otherwise flip the sign of delta_y to make it  positive, starting with the low bytes
 152++CA88 AF          >					xor 	a
 152++CA89 93          >                    sub 	e
 152++CA8A 5F          >                    ld 		e,a
 152++CA8B 9F          >                    sbc 	a,a
 152++CA8C 92          >                    sub 	d
 152++CA8D 57          >                    ld 		d,a
 153++CA8E 22 CC C9                             ld      (clipDy),hl                 ;OPTIMISATION 6/11/21 commented out
 154++CA91 2A C9 C9     .LL110:                 ld      hl,(clipDx)
 155++CA94 3A CA C9                             ld      a,(clipDxHigh)
 156++CA97 ED 27 80                             test    $80                         ; is it a negative X
 157++CA9A 28 06                                jr      z,.LL111                    ; If delta_x_hi is positive, jump down to LL110 to skip the following
 158++CA9C                                      ;ld      hl,(clipDx)                 ;OPTIMISATION 6/11/21 commented out
 159++CA9C                                      macronegate16hl                     ; Otherwise flip the sign of delta_y to make it  positive, starting with the low bytes
 159++CA9C AF          >					xor 	a
 159++CA9D 95          >					sub 	l
 159++CA9E 6F          >					ld 		l,a
 159++CA9F 9F          >					sbc 	a,a
 159++CAA0 94          >					sub 	h
 159++CAA1 67          >					ld 		h,a
 160++CAA2                                     ; ld      (clipDx),hl                 ;OPTIMISATION 6/11/21 commented out; we still retain the old sign in NonABS version
 161++CAA2              .LL111:               ;  push    de
 162++CAA2                                     ; ld      hl,(clipDx)                 ;OPTIMISATION 6/11/21 commented out
 163++CAA2                                     ; ld      de,(clipDy)                 ;OPTIMISATION 6/11/21 commented out
 164++CAA2 7C           .ScaleLoop:             ld      a,h                         ; At this point DX and DY are ABS values
 165++CAA3 B2                                   or      d
 166++CAA4 28 0A                                jr      z,.CalculateDelta
 166++CAA6
 167++CAA6                                      ShiftDERight1
 167++CAA6 CB 3A       >			   srl d
 167++CAA8 CB 1B       >			   rr  e
 168++CAAA                                      ShiftHLRight1
 168++CAAA CB 3C       >			   srl h
 168++CAAC CB 1D       >			   rr  l
 169++CAAE 18 F2                                jr      .ScaleLoop                  ; scaled down Dx and Dy to 8 bit, Dy may have been negative
 170++CAB0              .CalculateDelta:        ;ld      (clipDx),hl                ;OPTIMISATION 6/11/21 commented out
 171++CAB0                                      ;ld      (clipDy),de                ;OPTIMISATION 6/11/21 commented out
 172++CAB0              ; By now, the high bytes of both |delta_x| and |delta_y| are zero We know that h and d are both = 0 as that's what we tested with a BEQ
 173++CAB0 AF           .LL113:                 xor     a
 174++CAB1 32 FB 9D                             ld      (varT),a                    ; t = 0
 175++CAB4 7D                                   ld      a,l                         ; If delta_x_lo < delta_y_lo, so our line is more vertical than horizontal, jump to LL114
 176++CAB5                                      JumpIfALTNusng  e, .LL114           ;
 176++CAB5 BB          >                        cp      e
 176++CAB6 DA C6 CA    >                        jp		c, .LL114
 177++CAB9              ; Here Dx >= Dy sp calculate Delta Y / delta X
 178++CAB9 32 DF 9D     .DxGTEDy:               ld      (varQ),a                    ; Set Q = delta_x_lo
 179++CABC 57                                   ld      d,a                         ; d = also Q for calc
 180++CABD 7B                                   ld      a,e                         ; Set A = delta_y_lo
 181++CABE CD AB B0                             call    AEquAmul256DivD; LL28Amul256DivD             ; Call LL28 to calculate:  R (actually a reg) = 256 * A / Q   = 256 * delta_y_lo / delta_x_lo
 182++CAC1 32 E0 9D                             ld      (varR),a                    ;
 183++CAC4 18 10                                jr      .LL116                      ; Jump to LL116, as we now have the line's gradient in R
 184++CAC6              ; Here Delta Y > Delta X so calulate delta X / delta Y
 185++CAC6 7B           .LL114:                 ld      a,e                         ; Set Q = delta_y_lo
 186++CAC7 57                                   ld      d,a
 187++CAC8 32 DF 9D                             ld      (varQ),a
 188++CACB 7D                                   ld      a,l                         ; Set A = delta_x_lo
 189++CACC CD AB B0                             call    AEquAmul256DivD; LL28Amul256DivD             ; Call LL28 to calculate: R = 256 * A / Q  = 256 * delta_x_lo / delta_y_lo
 190++CACF 32 E0 9D                             ld      (varR),a                    ;
 191++CAD2 21 FB 9D                             ld      hl,varT                     ; T was set to 0 above, so this sets T = &FF
 192++CAD5 35                                   dec     (hl)
 193++CAD6 D1           .LL116:                 pop     de                          ; get back X2
 194++CAD7 E1                                   pop     hl                          ; get back X1 into hl,
 195++CAD8 3A E0 9D                             ld      a,(varR)                    ; Store the gradient in XX12+2 this can be optimised later
 196++CADB 32 CE C9                             ld      (clipGradient),a
 197++CADE FD 6F                                ld      iyl,a
 198++CAE0                                      ;       push    af                   ;OPTIMISATION 6/11/21 commented out
 199++CAE0                                      ;       ld      a,iyl                ;OPTIMISATION 6/11/21 commented out
 200++CAE0                                      ;       ld      (varXX12p2),a        ;OPTIMISATION 6/11/21 commented out
 201++CAE0                                      ;       pop     af                   ;OPTIMISATION 6/11/21 commented out
 202++CAE0 3A E1 9D                             ld      a,(varS)
 203++CAE3 32 CF C9                             ld      (clipDxySign),a             ;  Store the type of slope in XX12+3, bit 7 clear means ?Not needed as clipDxySign is used for varS earlier?
 204++CAE6                                                                          ; top left to bottom right, bit 7 set means top right to bottom left **CODE IS WRONG HERE A TEST IS BL to TR
 205++CAE6 FD 7C                                ld      a,iyh                       ; iyh was XX13 from earlier
 206++CAE8 FE 00                                cp      0                           ; If XX13 = 0, skip the following instruction
 207++CAEA 28 05                                jr      z,.LL138                    ;
 208++CAEC ED 27 80                             test    $80                         ; If XX13 is positive, it must be 95. This means (x1, y1) is on-screen but (x2, y2) isn't, so we jump to LLX117 to swap the (x1, y1) and (x2, y2)
 209++CAEF 28 13                                jr      z,.LLX117                   ; coordinates around before doing the actual clipping, because we need to clip (x2, y2) but the clipping routine at LL118 only clips (x1, y1)
 210++CAF1              ; If we get here, XX13 = 0 or 191, so (x1, y1) is off-screen and needs clipping
 211++CAF1 CD 18 CB     .LL138                  call    ClipPointHLBC               ; Call LL118 to move (x1, y1) along the line onto the screen, i.e. clip the line at the (x1, y1) end
 212++CAF4 FD 7C                                ld      a,iyh                       ; If XX13 = 0, i.e. (x2, y2) is on-screen, jump down to LL124 to return with a successfully clipped line
 213++CAF6 ED 27 80                             test    $80
 214++CAF9 28 1A                                jr      z,.LL124
 215++CAFB              ; If we get here, XX13 = 191 (both coordinates are off-screen)
 216++CAFB 7C           .LL117:                 ld      a,h                         ; If either of x1_hi or y1_hi are non-zero, jump to
 217++CAFC B0                                   or      b                           ; LL137 to return from the subroutine with the C flag
 218++CAFD C2 23 CA                             jp      nz, .PointsOutofBounds      ; set, as the line doesn't fit on-screen
 219++CB00 B1                                   or      c                           ; if x1 and y1 hi are both zero test bit 8 or Y1 to see if its > 128
 220++CB01 FA 23 CA                             jp      m, .PointsOutofBounds       ; set, as the line doesn't fit on-screen
 221++CB04              ; If we get here, XX13 = 95 or 191, and in both cases (x2, y2) is off-screen, so we now need to swap the (x1, y1) and (x2, y2) coordinates around before doing
 222++CB04              ; the actual clipping, because we need to clip (x2, y2) but the clipping routine at LL118 only clips (x1, y1)
 223++CB04 EB           .LLX117:                ex      de,hl                       ;  swap X1 and X2
 224++CB05 DD E5                                push    ix                          ;  swap Y1 and Y2
 225++CB07 C5                                   push    bc
 226++CB08 DD E1                                pop     ix
 227++CB0A C1                                   pop     bc
 228++CB0B CD 18 CB                             call    ClipPointHLBC               ;  Call LL118 to move (x1, y1) along the line onto the screen, i.e. clip the line at the (x1, y1) end
 229++CB0E 3A D2 C9                             ld      a,(SWAP)
 230++CB11 3D                                   dec     a
 231++CB12 32 D2 C9                             ld      (SWAP),a                    ; Set SWAP = &FF to indicate that we just clipped the line at the (x2, y2) end by swapping the coordinates (the DEC does this as we set SWAP to 0 at the start of this subroutine)
 232++CB15 C3 10 CA     .LL124:                 jp      .ClipDone                    ; now put points in place
 233++CB18
 234++CB18              ; Move a point along a line until it is on-screen point is held in HL(X) BC(Y) LL118
 235++CB18              ; iyh still holds XX13 iyl still holds gradient
 236++CB18 7C           ClipPointHLBC:          ld      a,h                         ; If x1_hi is positive, jump down to LL119 to skip the following
 237++CB19 ED 27 80                             test    $80
 238++CB1C 28 17                                jr      z,.LL119
 239++CB1E 32 E1 9D     .X1isNegative:          ld      (varS),a                    ;  Otherwise x1_hi is negative, i.e. off the left of the screen, so set S = x1_hi
 240++CB21 E5 D5 C5                             push    hl,,de,,bc
 241++CB24 CD 9A CB                             call    LL120                       ;  Call LL120 to calculate:   (Y X) = (S x1_lo) * XX12+2      if T = 0   = x1 * gradient
 242++CB27                                                                          ;                             (Y X) = (S x1_lo) / XX12+2      if T <> 0  = x1 / gradient
 243++CB27                                                                          ;  with the sign of (Y X) set to the opposite of the line's direction of slope
 244++CB27 C1 D1 E1                             pop    hl,,de,,bc                   ;  get coordinates back
 245++CB2A 2A D3 C9                             ld      hl,(varYX)
 246++CB2D              ;                        ex      hl,de
 247++CB2D                                  ;    ld      hl,bc
 248++CB2D 09                                   add     hl,bc                       ; y1 = y1 + varYX
 249++CB2E 44 4D                                ld      bc,hl
 250++CB30 21 00 00                             ld      hl,0                        ; Set x1 = 0
 251++CB33               ;                       pop     de
 252++CB33 18 1A                                jr      .LL134                      ; in BBC is set x to 0 to force jump, we will just jump
 253++CB35 FE 00        .LL119:                 cp      0
 254++CB37 28 16                                jr      z,.LL134                    ;  If x1_hi = 0 then jump down to LL134 to skip the following, as the x-coordinate is already on-screen (as 0 <= (x_hi x_lo) <= 255)
 255++CB39 3D                                   dec     a
 256++CB3A 32 E1 9D                             ld      (varS),a                    ;  Otherwise x1_hi is positive, i.e. x1 >= 256 and off the right side of the screen, so set S = x1_hi - 1
 257++CB3D E5 D5 C5                             push    hl,,de,,bc
 258++CB40 CD 9A CB                             call    LL120                      ;  Call LL120 to calculate: (Y X) = (S x1_lo) * XX12+2      if T = 0  = (x1 - 256) * gradient
 259++CB43                                                                          ;                           (Y X) = (S x1_lo) / XX12+2      if T <> 0 = (x1 - 256) / gradient
 260++CB43                                                                          ;  with the sign of (Y X) set to the opposite of theline's direction of slope
 261++CB43 C1 D1 E1                             pop     hl,,de,,bc
 262++CB46                                    ;  push    de                          ; Set y1 = y1 + (Y X)
 263++CB46 2A D3 C9                             ld      hl,(varYX)
 264++CB49                                    ; ex      de,hl                       ;OPTIMISATION 6/11/21 commented out
 265++CB49 09                                   add     hl,bc                        ;OPTIMISATION 6/11/21 simplfied post debug
 266++CB4A 44 4D                                ld      bc,hl                        ;OPTIMISATION 6/11/21 simplfied post debug
 267++CB4C                                    ; ex      hl,de                       ;OPTIMISATION 6/11/21 commented out
 268++CB4C                                    ; ld      hl,bc                       ;OPTIMISATION 6/11/21 commented out
 269++CB4C                                    ; add     hl,de                       ; y1 = y1 + varYX
 270++CB4C 21 FF 00                             ld      hl,255                      ; Set x1 = 255
 271++CB4F                                    ;  pop     de
 272++CB4F              ; We have moved the point so the x-coordinate is on screen (i.e. in the range 0-255), so now for they-coordinate
 273++CB4F 78           .LL134:                 ld      a,b                         ; If y1_hi is positive, jump down to LL135  to skip the following
 274++CB50 ED 27 80                             test    $80                         ;
 275++CB53 28 1A                                jr      z,.LL135                    ;
 276++CB55 32 E1 9D                             ld      (varS),a                    ; Otherwise y1_hi is negative, i.e. off the top of the screen, so set S = y1_hi
 277++CB58 79                                   ld      a,c                         ; Set R = y1_lo
 278++CB59 32 E0 9D                             ld      (varR),a                    ;
 279++CB5C E5 D5 C5                             push    hl,,de,,bc
 280++CB5F CD C1 CB                             call    LL123                       ;  Call LL123 to calculate: (Y X) = (S R) / XX12+2      if T = 0  = y1 / gradient
 281++CB62                                                                          ;                           (Y X) = (S R) * XX12+2      if T <> 0 = y1 * gradient
 282++CB62                                                                          ;  with the sign of (Y X) set to the opposite of the line's direction of slope
 283++CB62 C1 D1 E1                             pop     hl,,de,,bc
 284++CB65 D5                                   push    de
 285++CB66 EB                                   ex      hl,de                       ; de = x1
 286++CB67 2A D3 C9                             ld      hl,(varYX)                  ; hl = varYX
 287++CB6A 19                                   add     hl,de                       ; we don't need to swap back as its an add, Set x1 = x1 + (Y X)
 288++CB6B D1                                   pop     de                          ; de = x2 again
 289++CB6C 01 00 00                             ld      bc,0                        ; Set y1 = 0
 290++CB6F 79           .LL135:                 ld      a,c                         ; if bc < 128 then no work to do
 291++CB70 E6 80                                and     $80
 292++CB72 B0                                   or      b                           ; here we see if c bit 8 is set or anything in b as we know if its 0 this would mean there is no need to clip
 293++CB73 C8                                   ret     z
 294++CB74 E5                                   push    hl
 295++CB75 60 69                                ld      hl,bc
 296++CB77 01 80 00                             ld      bc,128
 297++CB7A B7                                   or      a
 298++CB7B ED 42                                sbc     hl,bc                       ; hl =  (S R) = (y1_hi y1_lo) - 128
 299++CB7D 22 E0 9D                             ld      (varRS), hl                 ; and now RS (or SR)
 300++CB80 7C                                   ld      a,h
 301++CB81 E1                                   pop     hl
 302++CB82 ED 27 80                             test    $80                         ; If the subtraction underflowed, i.e. if y1 < 192, then y1 is already on-screen, so jump to LL136 to return from the subroutine, as we are done
 303++CB85 C0                                   ret     nz
 304++CB86              ; If we get here then y1 >= 192, i.e. off the bottom of the screen
 305++CB86 E5 D5 C5     .LL139:                 push    hl,,de,,bc
 306++CB89 CD C1 CB                             call    LL123                       ;  Call LL123 to calculate: (Y X) = (S R) / XX12+2      if T = 0  = y1 / gradient
 307++CB8C                                                                          ;                           (Y X) = (S R) * XX12+2      if T <> 0 = y1 * gradient
 308++CB8C                                                                          ;  with the sign of (Y X) set to the opposite of the line's direction of slope
 309++CB8C C1 D1 E1                             pop     hl,,de,,bc
 310++CB8F D5                                   push    de
 311++CB90 EB                                   ex      hl,de
 312++CB91 2A D3 C9                             ld      hl,(varYX)
 313++CB94 19                                   add     hl,de                       ; we don't need to swap back as its an add, Set x1 = x1 + (Y X)
 314++CB95 01 7F 00                             ld      bc,127                      ; set bc to 127 bottom of screen
 315++CB98 D1                                   pop     de
 316++CB99 C9           .LL136:                 ret                                 ;  Return from the subroutine
 317++CB9A
 318++CB9A
 319++CB9A              ; Calculate the following:   * If T = 0  (more vertical than horizontal), (Y X) = (S x1_lo) * XX12+2
 320++CB9A              ;                            * If T <> 0 (more horizontal than vertical), (Y X) = (S x1_lo) / XX12+2
 321++CB9A              ;                              giving (Y X) the opposite sign to the slope direction in XX12+3.
 322++CB9A              ; Other entry points        LL122                Calculate (Y X) = (S R) * Q and set the sign to the opposite of the top byte on the stack
 323++CB9A 7D           LL120:                  ld      a,l                          ; Set R = x1_lo
 324++CB9B 32 E0 9D                             ld      (varR),a
 325++CB9E CD 09 CC                             call    LL129                        ;  Call LL129 to do the following:  Q = XX12+2   = line gradient  A = S EOR XX12+3 = S EOR slope direction (S R) = |S R| So A contains the sign of S * slope direction
 326++CBA1 F5                                   push    af                           ;  Store A on the stack so we can use it later
 327++CBA2 C5                                   push    bc
 328++CBA3 47                                   ld      b,a
 329++CBA4 3A FB 9D                             ld      a,(varT)                     ; instead : (Y X) = (S R ) / Q
 330++CBA7 FE 00                                cp      0
 331++CBA9 78                                   ld      a,b
 332++CBAA C1                                   pop     bc                           ; we can't use af as that would disrupt the flags
 333++CBAB 20 23                                jr      nz, LL121
 334++CBAD              ; The following calculates:  (Y X) = (S R) * Q using the same shift-and-add algorithm that's documented in MULT1
 335++CBAD 3A CE C9     LL122:                  ld      a,(clipGradient)
 336++CBB0 32 DF 9D                             ld      (varQ),a; optimise
 337++CBB3 CD 94 AE                             call    HLequSRmulQdiv256
 338++CBB6 22 D3 C9                             ld      (varYX),hl
 339++CBB9 F1                                   pop     af
 340++CBBA ED 27 80                             test    $80
 341++CBBD CA FC CB                             jp      z,LL133
 342++CBC0 C9                                   ret
 343++CBC1              ; Calculate the following: * If T = 0,  calculate (Y X) = (S R) / XX12+2 (actually SR & XX12+2 /256)
 344++CBC1              ;                          * If T <> 0, calculate (Y X) = (S R) * XX12+2
 345++CBC1              ;                          giving (Y X) the opposite sign to the slope direction in XX12+3.
 346++CBC1              ;
 347++CBC1              ; Other entry points:      LL121                Calculate (Y X) = (S R) / Q and set the sign to the opposite of the top byte on the stack
 348++CBC1              ;                          LL133                Negate (Y X) and return from the subroutine
 349++CBC1              ;                          LL128                Contains an RTS
 350++CBC1 CD 09 CC     LL123:                  call    LL129                       ; Call LL129 to do the following: Q = XX12+2   = line gradient  A = S EOR XX12+3 = S EOR slope direction (S R) = |S R| So A contains the sign of S * slope direction
 351++CBC4 F5                                   push    af                          ; Store A on the stack so we can use it later
 352++CBC5 C5                                   push    bc                          ; If T is non-zero, so it's more horizontal than vertical, jump down to LL121 to calculate this
 353++CBC6 47                                   ld      b,a
 354++CBC7 3A FB 9D                             ld      a,(varT)                    ; instead : (Y X) = (S R) * Q *** this looks to be the wrong way roudn for Y!!!!
 355++CBCA FE 00                                cp      0
 356++CBCC 78                                   ld      a,b
 357++CBCD C1                                   pop     bc
 358++CBCE 20 DD                                jr      nz, LL122
 359++CBD0              ; The following calculates: (Y X) = (S R) / Q using the same shift-and-subtract algorithm that's documented in TIS2, its actually X.Y=R.S*256/Q
 360++CBD0 11 FE FF     LL121:                  ld      de,$FFFE                    ; set XY to &FFFE at start, de holds XY
 361++CBD3 2A E0 9D                             ld      hl,(varRS)                  ; hl = RS
 362++CBD6 3A DF 9D                             ld      a,(varQ)
 363++CBD9 47                                   ld      b,a                         ; b = q
 364++CBDA              .LL130:                 ShiftHLLeft1                        ; RS *= 2
 364++CBDA CB 25       >			   sla l
 364++CBDC CB 14       >			   rl  h
 365++CBDE 7C                                   ld      a,h
 366++CBDF 38 04                                jr      c,.LL131                    ; if S overflowed skip Q test and do subtractions
 367++CBE1                                      JumpIfALTNusng b, .LL132            ; if S <  Q = 256/gradient skip subtractions
 367++CBE1 B8          >                        cp      b
 367++CBE2 DA ED CB    >                        jp		c, .LL132
 368++CBE5 3F           .LL131:                 ccf                                 ; compliment carry
 369++CBE6 98                                   sbc     a,b                         ; q
 370++CBE7 67                                   ld      h,a                         ; h (s)
 371++CBE8 7D                                   ld      a,l                         ; r
 372++CBE9 DE 00                                sbc     a,0                         ; 0 - so in effect SR - Q*256
 373++CBEB 37                                   scf                                 ; set carry for next rolls
 374++CBEC 3F                                   ccf
 375++CBED              .LL132:                 RollDELeft1                         ; Rotate de bits left
 375++CBED CB 13       >               rl  e
 375++CBEF CB 12       >               rl  d
 376++CBF1 38 E7                                jr      c,.LL130                    ;
 377++CBF3 ED 53 D3 C9                          ld      (varYX),de
 378++CBF7 F1                                   pop     af              ; get back sign
 379++CBF8 ED 27 80                             test    $80
 380++CBFB C8                                   ret     z               ; if negative then return with value as is reversed sign
 381++CBFC 2A D3 C9     LL133:                  ld      hl,(varYX)      ; may not actually need this?
 382++CBFF                                      NegHL
 382++CBFF AF          >                    xor a
 382++CC00 95          >                    sub l
 382++CC01 6F          >                    ld l,a
 382++CC02 9F          >                    sbc a,a
 382++CC03 94          >                    sub h
 382++CC04 67          >                    ld h,a
 383++CC05 22 D3 C9                             ld      (varYX),hl
 384++CC08 C9           LL128:                  ret
 385++CC09              ; Do the following, in this order:  Q = XX12+2
 386++CC09              ;                                   A = S EOR XX12+3
 387++CC09              ;                                   (S R) = |S R|
 388++CC09              ; This sets up the variables required above to calculate (S R) / XX12+2 and give the result the opposite sign to XX13+3.
 389++CC09 3A CE C9     LL129:                  ld      a,(clipGradient)
 390++CC0C 32 DF 9D                             ld      (varQ),a                    ;Set Q = XX12+2
 391++CC0F 3A E1 9D                             ld      a,(varS)                    ; If S is positive, jump to LL127
 392++CC12 E5 F5                                push    hl,,af
 393++CC14 ED 27 80                             test    $80
 394++CC17 28 0C                                jr      z,.LL127
 395++CC19 2A E0 9D                             ld      hl,(varRS)                  ; else SR = | SR|
 396++CC1C                                      NegHL
 396++CC1C AF          >                    xor a
 396++CC1D 95          >                    sub l
 396++CC1E 6F          >                    ld l,a
 396++CC1F 9F          >                    sbc a,a
 396++CC20 94          >                    sub h
 396++CC21 67          >                    ld h,a
 397++CC22 22 E0 9D                             ld      (varRS),hl
 398++CC25 21 CF C9     .LL127:                 ld      hl,clipDxySign
 399++CC28 F1                                   pop     af
 400++CC29 AE                                   xor     (hl)                        ; a = S XOR clipDxySign
 401++CC2A E1                                   pop     hl
 402++CC2B C9                                   ret
 403++CC2C
# file closed: ././ModelRender/CLIP-LL145.asm
 787+ CC2C              ;--------------------------------------------------------------------------------------------------------
 788+ CC2C                                      include "./Universe/Ships/CopyRotmatToTransMat.asm"
# file opened: ././Universe/Ships/CopyRotmatToTransMat.asm
   1++CC2C              ; Set TransMatTo
   2++CC2C              ; XX16(1 0)   (3 2)   (5 4)   = sidev_x sidev_y sidev_z XX16(13,12) (15 14) (17 16)
   3++CC2C              ; XX16(7 6)   (9 8)   (11 10) = roofv_x roofv_y roofv_z XX16(7 6)   (9 8)   (11 10)
   4++CC2C              ; XX16(13 12) (15 14) (17 16) = nosev_x nosev_y nosev_z XX16(1 0)   (3 2)   (5 4)
   5++CC2C              ; This moves Side XYZ to position 0, Roof XYZ to position 1 annd nose XYZ to position 2 as a copy of each batch of 6 bytes
   6++CC2C              CopyRotmatToTransMat:                       ; Tested
   7++CC2C 21 15 C0     LL15_CopyRotMat:        ld      hl,UBnkrotmatSidevX
   8++CC2F
   9++CC2F 11 49 C0                             ld      de,UBnkTransmatSidevX
  10++CC32                                      SixLDIInstrunctions
  10++CC32 ED A0       >                        ldi
  10++CC34 ED A0       >                        ldi
  10++CC36 ED A0       >                        ldi
  10++CC38 ED A0       >                        ldi
  10++CC3A ED A0       >                        ldi
  10++CC3C ED A0       >                        ldi
  11++CC3E 21 1B C0                             ld      hl,UBnkrotmatRoofvX
  12++CC41 11 4F C0                             ld      de, UBnkTransmatRoofvX
  13++CC44                                      SixLDIInstrunctions
  13++CC44 ED A0       >                        ldi
  13++CC46 ED A0       >                        ldi
  13++CC48 ED A0       >                        ldi
  13++CC4A ED A0       >                        ldi
  13++CC4C ED A0       >                        ldi
  13++CC4E ED A0       >                        ldi
  14++CC50 21 21 C0                             ld      hl,UBnkrotmatNosevX
  15++CC53 11 55 C0                             ld      de, UBnkTransmatNosevX
  16++CC56                                      SixLDIInstrunctions
  16++CC56 ED A0       >                        ldi
  16++CC58 ED A0       >                        ldi
  16++CC5A ED A0       >                        ldi
  16++CC5C ED A0       >                        ldi
  16++CC5E ED A0       >                        ldi
  16++CC60 ED A0       >                        ldi
  17++CC62 C9                                   ret
  18++CC63
  19++CC63              CopyRotToTransMacro:    MACRO
  20++CC63 ~                                    ld      hl,UBnkrotmatSidevX
  21++CC63 ~                                    ld      de,UBnkTransmatSidevX
  22++CC63 ~                                    SixLDIInstrunctions
  23++CC63 ~                                    SixLDIInstrunctions
  24++CC63 ~                                    SixLDIInstrunctions
  25++CC63                                      ENDM
  26++CC63
# file closed: ././Universe/Ships/CopyRotmatToTransMat.asm
 789+ CC63                                      include "./Universe/Ships/TransposeXX12ByShipToXX15.asm"
# file opened: ././Universe/Ships/TransposeXX12ByShipToXX15.asm
   1++CC63              TransposeXX12ByShipToXX15:
   2++CC63 2A 94 C0             ld		hl,(UBnkXX12xLo)					; get X into HL
   3++CC66 7C           		ld		a,h			                        ; get XX12 Sign
   4++CC67 E6 80        		and		$80									; check sign bit on high byte
   5++CC69 47           		ld		b,a									; and put it in of 12xlo in b
   6++CC6A                      ;110921 debugld      h,0
   7++CC6A 7C                   ld      a,h
   8++CC6B E6 7F                and     $7F
   9++CC6D 67                   ld      h,a
  10++CC6E                      ;110921 debugld      h,0
  11++CC6E ED 5B 0C C0  		ld		de,(UBnKxlo)						;
  12++CC72 3A 0E C0     		ld		a,(UBnKxsgn)						; get Ship Pos (low,high,sign)
  13++CC75 E6 80        		and		$80									; make sure we only have bit 7
  14++CC77 4F           		ld		c,a									; and put sign of unkxsgn c
  15++CC78 CD 7B AC     		call 	ADDHLDESignBC; XX12ProcessCalcHLPlusDESignBC		; this will result in HL = result and A = sign
  16++CC7B B4           		or		h									; combine sign in A with H to give 15 bit signed (*NOT* 2's c)
  17++CC7C 67           		ld		h,a
  18++CC7D 22 8E C0     		ld		(UBnkXScaled),hl					; now write it out to XX15 X pos
  19++CC80              ; ..................................
  20++CC80 2A 96 C0     		ld		hl,(UBnkXX12yLo)					; Repeat above for Y coordinate
  21++CC83 7C           		ld		a,h
  22++CC84 E6 80        		and		$80
  23++CC86 47           		ld		b,a
  24++CC87                      ;110921 debugld      h,0
  25++CC87 7C                   ld      a,h
  26++CC88 E6 7F                and     $7F
  27++CC8A 67                   ld      h,a
  28++CC8B                      ;110921 debugld      h,0
  29++CC8B ED 5B 0F C0  		ld		de,(UBnKylo)
  30++CC8F 3A 11 C0     		ld		a,(UBnKysgn)
  31++CC92 E6 80        		and		$80									; make sure we only have bit 7
  32++CC94 4F           		ld		c,a
  33++CC95 CD 7B AC     		call 	ADDHLDESignBC; XX12ProcessCalcHLPlusDESignBC
  34++CC98 B4           		or		h									; combine sign in A with H
  35++CC99 67           		ld		h,a
  36++CC9A 22 90 C0     		ld		(UBnkYScaled),hl
  37++CC9D              ; ..................................
  38++CC9D 2A 98 C0     		ld		hl,(UBnkXX12zLo)					; and now repeat for Z cooord
  39++CCA0 7C           		ld		a,h
  40++CCA1 E6 80        		and		$80
  41++CCA3 47           		ld		b,a
  42++CCA4                      ;110921 debugld      h,0
  43++CCA4 7C                   ld      a,h
  44++CCA5 E6 7F                and     $7F
  45++CCA7 67                   ld      h,a
  46++CCA8                      ;110921 debugld      h,0
  47++CCA8 ED 5B 12 C0  		ld		de,(UBnKzlo)
  48++CCAC 3A 14 C0     		ld		a,(UBnKzsgn)
  49++CCAF E6 80        		and		$80									; make sure we only have bit 7
  50++CCB1 4F           		ld		c,a
  51++CCB2 CD 7B AC     		call 	ADDHLDESignBC; XX12ProcessCalcHLPlusDESignBC
  52++CCB5 B4           		or		h									; combine sign in A with H
  53++CCB6 67           		ld		h,a
  54++CCB7 CB 7C        		bit		7,h                                 ; if sign if positive then we don't need to do the clamp so we ony jump
  55++CCB9 20 16        		jr		nz,ClampZto4                        ; result was negative so we need to clamp to 4
  56++CCBB E6 7F                and     $7F                                 ; a = value unsigned
  57++CCBD 20 06                jr      nz,NoClampZto4                      ; if high byte was 0 then we could need to clamp still by this stage its +v but and will set z flag if high byte is zero
  58++CCBF 7D                   ld      a,l                                 ; get low byte now
  59++CCC0              		JumpIfALTNusng 4,ClampZto4					; if its < 4 then fix at 4
  59++CCC0 FE 04       >                        cp      4
  59++CCC2 DA D1 CC    >                        jp		c, ClampZto4
  60++CCC5              NoClampZto4:
  61++CCC5 22 92 C0     		ld		(UBnkZScaled),hl					; hl = signed calculation and > 4
  62++CCC8 7D           		ld		a,l									; in addition write out the z cooord to UT for now for backwards compat (DEBUG TODO remove later)
  63++CCC9 32 FB 9D             ld      (varT),a
  64++CCCC 7C           		ld		a,h
  65++CCCD 32 DE 9D             ld      (varU),a
  66++CCD0 C9           		ret
  67++CCD1              ClampZto4:											; This is where we limit 4 to a minimum of 4
  68++CCD1 21 04 00     		ld		hl,4
  69++CCD4 22 92 C0     		ld		(UBnkZScaled),hl; BODGE FOR NOW
  70++CCD7 7D           		ld		a,l
  71++CCD8 32 FB 9D             ld      (varT),a                            ;                                                                           ;;;
  72++CCDB 7C           		ld		a,h
  73++CCDC 32 DE 9D             ld      (varU),a 						; compatibility for now
  74++CCDF C9           		ret
  75++CCE0
# file closed: ././Universe/Ships/TransposeXX12ByShipToXX15.asm
 790+ CCE0                                      include "./Maths/Utilities/ScaleNodeTo8Bit.asm"
# file opened: ././Maths/Utilities/ScaleNodeTo8Bit.asm
   1++CCE0              ScaleNodeTo8Bit:								; TODO make signed
   2++CCE0 ED 4B 92 C0  	ld			bc,(UBnkZScaled)
   3++CCE4 2A 8E C0     	ld			hl,(UBnkXScaled)
   4++CCE7 ED 5B 90 C0  	ld			de,(UBnkYScaled)
   5++CCEB              SetABSbc:
   6++CCEB 78           	ld			a,b
   7++CCEC DD 67        	ld			ixh,a
   8++CCEE E6 7F        	and			SignMask8Bit
   9++CCF0 47           	ld			b,a									; bc = ABS bc
  10++CCF1              SetABShl:
  11++CCF1 7C           	ld			a,h
  12++CCF2 DD 6F        	ld			ixl,a
  13++CCF4 E6 7F        	and			SignMask8Bit
  14++CCF6 67           	ld			h,a									; hl = ABS hl
  15++CCF7              SetABSde:
  16++CCF7 7A           	ld			a,d
  17++CCF8 FD 67        	ld			iyh,a
  18++CCFA E6 7F        	and			SignMask8Bit
  19++CCFC 57           	ld			d,a									; de = ABS de
  20++CCFD              ScaleNodeTo8BitLoop:
  21++CCFD 78               ld          a,b		                            ; U	\ z hi
  22++CCFE B4           	or			h                                   ; XX15+1	\ x hi
  23++CCFF B2           	or			d                                   ; XX15+4	\ y hi
  24++CD00 28 0F            jr          z,ScaleNodeDone                   ; if X, Y, Z = 0  exit loop down once hi U rolled to 0
  25++CD02                  ShiftHLRight1
  25++CD02 CB 3C       >			   srl h
  25++CD04 CB 1D       >			   rr  l
  26++CD06                  ShiftDERight1
  26++CD06 CB 3A       >			   srl d
  26++CD08 CB 1B       >			   rr  e
  27++CD0A              	ShiftBCRight1
  27++CD0A CB 38       >			   srl b
  27++CD0C CB 19       >			   rr  c
  28++CD0E C3 FD CC         jp          ScaleNodeTo8BitLoop
  29++CD11              ScaleNodeDone:										; now we have scaled values we have to deal with sign
  30++CD11 DD 7C        	ld			a,ixh								; get sign bit and or with b
  31++CD13 E6 80        	and			SignOnly8Bit
  32++CD15 B0           	or			b
  33++CD16 47           	ld			b,a
  34++CD17              SignforHL:
  35++CD17 DD 7D        	ld			a,ixl								; get sign bit and or with b
  36++CD19 E6 80        	and			SignOnly8Bit
  37++CD1B B4           	or			h
  38++CD1C 67           	ld			h,a
  39++CD1D              SignforDE:
  40++CD1D FD 7C        	ld			a,iyh								; get sign bit and or with b
  41++CD1F E6 80        	and			SignOnly8Bit
  42++CD21 B2           	or			d
  43++CD22 57           	ld			d,a
  44++CD23              SignsDoneSaveResult:
  45++CD23 ED 43 92 C0  	ld			(UBnkZScaled),bc
  46++CD27 22 8E C0     	ld			(UBnkXScaled),hl
  47++CD2A ED 53 90 C0  	ld			(UBnkYScaled),de
  48++CD2E 78           	ld			a,b
  49++CD2F 32 DE 9D     	ld			(varU),a
  50++CD32 79           	ld			a,c
  51++CD33 32 FB 9D     	ld			(varT),a
  52++CD36 C9           	ret
  53++CD37
# file closed: ././Maths/Utilities/ScaleNodeTo8Bit.asm
 791+ CD37
 792+ CD37              ;--------------------------------------------------------------------------------------------------------
 793+ CD37 21 BA C0     SetFaceAVisible:        ld      hl,UbnkFaceVisArray
 794+ CD3A ED 31                                add     hl,a
 795+ CD3C 3E FF                                ld      a,$FF
 796+ CD3E 77                                   ld      (hl),a
 797+ CD3F C9                                   ret
 798+ CD40              ;--------------------------------------------------------------------------------------------------------
 799+ CD40 21 BA C0     SetFaceAHidden:         ld      hl,UbnkFaceVisArray
 800+ CD43 ED 31                                add     hl,a
 801+ CD45 AF                                   xor     a
 802+ CD46 77                                   ld      (hl),a
 803+ CD47 C9                                   ret
 804+ CD48              ;--------------------------------------------------------------------------------------------------------
 805+ CD48 3A 23 C3     SetAllFacesVisible:     ld      a,(FaceCtX4Addr)            ; (XX0),Y which is XX0[0C] or UBnkHullCopy+FaceCtX4Addr                                 ;;; Faces count (previously loaded into b up front but no need to shave bytes for clarity
 806+ CD4B CB 3F                                srl     a                           ; else do explosion needs all vertices                                                  ;;;
 807+ CD4D CB 3F                                srl     a                           ;  /=4  TODO add this into blueprint data for speed                                                           ;;; For loop = 15 to 0
 808+ CD4F 47                                   ld      b,a                         ; b = Xreg = number of normals, faces
 809+ CD50 21 BA C0                             ld      hl,UbnkFaceVisArray
 810+ CD53 3E FF                                ld      a,$FF
 811+ CD55              SetAllFacesVisibleLoop:
 812+ CD55 77           EE30:                   ld      (hl),a
 813+ CD56 23                                   inc     hl
 814+ CD57 10 FC                                djnz    SetAllFacesVisibleLoop
 815+ CD59 C9                                   ret
 816+ CD5A              ;--------------------------------------------------------------------------------------------------------
 817+ CD5A 3A 23 C3     SetAllFacesHidden:      ld      a,(FaceCtX4Addr)            ; (XX0),Y which is XX0[0C] or UBnkHullCopy+ShipHullFacesCount                           ;;; Faces count (previously loaded into b up front but no need to shave bytes for clarity
 818+ CD5D CB 3F                                srl     a                           ; else do explosion needs all vertices                                                  ;;;
 819+ CD5F CB 3F                                srl     a                           ;  /=4                                                                                  ;;; For loop = 15 to 0
 820+ CD61 47                                   ld      b,a                         ; b = Xreg = number of normals, faces
 821+ CD62 06 10                                ld      b,16
 822+ CD64 21 BA C0                             ld      hl,UbnkFaceVisArray
 823+ CD67 3E 00                                ld      a,$00
 824+ CD69 77           SetAllFacesHiddenLoop:  ld      (hl),a
 825+ CD6A 23                                   inc     hl
 826+ CD6B 10 FC                                djnz    SetAllFacesHiddenLoop
 827+ CD6D C9                                   ret
 828+ CD6E
 829+ CD6E              ;;;;X = normal scale
 830+ CD6E              ;;;;ZtempHi = zhi
 831+ CD6E              ;;;;......................................................
 832+ CD6E              ;;;; if ztemp hi <> 0                                   ::Scale Object Distance
 833+ CD6E              ;;;;  Loop                                              ::LL90
 834+ CD6E              ;;;;     inc X
 835+ CD6E              ;;;;     divide X, Y & ZtempHiLo by 2
 836+ CD6E              ;;;;  Until ZtempHi = 0
 837+ CD6E              ;;;;......................................................
 838+ CD6E              ;-LL21---------------------------------------------------------------------------------------------------
 839+ CD6E                                      include "Universe/Ships/NormaliseTransMat.asm"
# file opened: ./Universe/Ships/NormaliseTransMat.asm
   1++CD6E              ;divdide by 16 using undocumented instrunctions
   2++CD6E              Norm256mulAdivQ:
   3++CD6E 47               ld      b,a
   4++CD6F 0E 00            ld      c,0
   5++CD71 16 00            ld      d,0
   6++CD73 3A DF 9D         ld      a,(varQ)
   7++CD76 5F               ld      e,a
   8++CD77              ;Input: BC = Dividend, DE = Divisor, HL = 0
   9++CD77              ;Output: BC = Quotient, HL = Remainder
  10++CD77              NormDIV16UNDOC:
  11++CD77 21 00 00         ld      hl,0
  12++CD7A 78               ld      a,b
  13++CD7B 06 10            ld      b,16
  14++CD7D              NormDIV16UNDOCLOOP:
  15++CD7D CB 31        	sll	    c		; unroll 16 times
  16++CD7F 17           	rla	    		; ...
  17++CD80 ED 6A        	adc	    hl,hl		; ...
  18++CD82 ED 52        	sbc	    hl,de		; ...
  19++CD84 30 02        	jr	    nc,NormDIV16UNDOCSKIP		; ...
  20++CD86 19           	add	    hl,de		; ...
  21++CD87 0D           	dec	    c		; ...
  22++CD88              NormDIV16UNDOCSKIP:
  23++CD88 10 F3            djnz    NormDIV16UNDOCLOOP
  24++CD8A 79               ld      a,c
  25++CD8B 32 E0 9D         ld      (varR),a
  26++CD8E C9               ret
  27++CD8F
  28++CD8F              ; Tested OK
  29++CD8F              ;LL21
  30++CD8F              NormaliseTransMat:
  31++CD8F                      IFDEF LOGMATHS
  32++CD8F 21 5A C0                     ld      hl,UBnkTransmatNosevZ+1     ; initialise loop
  33++CD92 06 09                        ld      b,9                         ; total of 9 elements to transform
  34++CD94                              MMUSelectMathsTables
  34++CD94 ED 91 50 63 >                     nextreg MathsTablesMMU,    BankMathsTables
  35++CD98 56           .LL21Loop:      ld      d,(hl)
  36++CD99 2B                           dec     hl
  37++CD9A 5E                           ld      e,(hl)                      ; de = hilo now   hl now = pointer to low byte
  38++CD9B                              ShiftDELeft1                        ; De = DE * 2
  38++CD9B CB 23       >			   sla e
  38++CD9D CB 12       >			   rl  d
  39++CD9F 7A                           ld      a,d                         ; a = hi byte after shifting
  40++CDA0 E5                           push	hl
  41++CDA1 C5                           push	bc
  42++CDA2 CD CB 00                     call    AEquAmul256Div197Log        ; R = (2(hi).0)/ConstNorm - LL28 Optimised BFRDIV R=A*256/Q = delta_y / delta_x Use Y/X grad. as not steep
  43++CDA5                              ;ld      a,c                         ; BFRDIV returns R also in l reg
  44++CDA5 C1                           pop		bc
  45++CDA6 E1                           pop		hl							; bc gets wrecked by BFRDIV
  46++CDA7 77                           ld      (hl),a                      ; write low result to low byte so zlo = (zhl *2)/197, we keep hi byte in tact as we need the sign bit
  47++CDA8 2B                           dec     hl                          ; now hl = hi byte of pre val e.g z->y->x
  48++CDA9 10 ED                        djnz    .LL21Loop                   ; loop from 2zLo through to 0xLo
  49++CDAB                              MMUSelectROM0
  49++CDAB ED 91 50 FF >                     nextreg EXSDOSMMU0,        BankROM
  50++CDAF C9                           ret
  51++CDB0                      ELSE
  52++CDB0 ~                            ld      hl,UBnkTransmatNosevZ+1         ; initialise loop
  53++CDB0 ~                            ld      c,ConstNorm                 ; c = Q = norm = 197
  54++CDB0 ~                            ld      a,c
  55++CDB0 ~                            ld      (varQ),a                    ; set up varQ
  56++CDB0 ~                            ld      b,9                         ; total of 9 elements to transform
  57++CDB0 ~            LL21Loop:       ld      d,(hl)
  58++CDB0 ~                            dec     hl
  59++CDB0 ~                            ld      e,(hl)                      ; de = hilo now   hl now = pointer to low byte
  60++CDB0 ~                            ShiftDELeft1                        ; De = DE * 2
  61++CDB0 ~                            ld      a,d                         ; a = hi byte after shifting
  62++CDB0 ~                            push	hl
  63++CDB0 ~                            push	bc
  64++CDB0 ~                            call    Norm256mulAdivQ
  65++CDB0 ~                            ;===call    RequAmul256divC				; R = (2(hi).0)/ConstNorm - LL28 Optimised BFRDIV R=A*256/Q = delta_y / delta_x Use Y/X grad. as not steep
  66++CDB0 ~                            ld      a,c                         ; BFRDIV returns R also in l reg
  67++CDB0 ~                            pop		bc
  68++CDB0 ~                            pop		hl							; bc gets wrecked by BFRDIV
  69++CDB0 ~                            ld      (hl),a                      ; write low result to low byte so zlo = (zhl *2)/197, we keep hi byte in tact as we need the sign bit
  70++CDB0 ~                            dec     hl                          ; now hl = hi byte of pre val e.g z->y->x
  71++CDB0 ~                            djnz    LL21Loop                    ; loop from 2zLo through to 0xLo
  72++CDB0 ~                            ret
  73++CDB0                      ENDIF
# file closed: ./Universe/Ships/NormaliseTransMat.asm
 840+ CDB0              ;-LL91---------------------------------------------------------------------------------------------------
 841+ CDB0
 842+ CDB0              ; Now we have
 843+ CDB0              ;   * XX18(2 1 0) = (x_sign x_hi x_lo)
 844+ CDB0              ;   * XX18(5 4 3) = (y_sign y_hi y_lo)
 845+ CDB0              ;   * XX18(8 7 6) = (z_sign z_hi z_lo)
 846+ CDB0              ;
 847+ CDB0              ;--------------------------------------------------------------------------------------------------------
 848+ CDB0                                      include "Universe/Ships/InverseXX16.asm"
# file opened: ./Universe/Ships/InverseXX16.asm
   1++CDB0              ; TESTEDOK
   2++CDB0
   3++CDB0              ;ScaleOrientationXX16:                       ; DEBUG TODO will combine with inverse later
   4++CDB0              ;        ld      a,(XX17)
   5++CDB0              ;        ld      ixl,a
   6++CDB0              ;        ld      ixh,9
   7++CDB0              ;        ld      hl,UBnkTransInv0x
   8++CDB0              ;        ld      a,(hl)
   9++CDB0              ;ScaleNode:
  10++CDB0              ;        ld      b,ixl
  11++CDB0              ;ScaleNodeLoop:
  12++CDB0              ;        sla      a
  13++CDB0              ;        djnz    ScaleNodeLoop
  14++CDB0              ;        ld      (hl),a
  15++CDB0              ;        inc     hl
  16++CDB0              ;        inc     hl
  17++CDB0              ;        dec     ixh
  18++CDB0              ;        jr      nz,ScaleNode
  19++CDB0              ;        ret
  20++CDB0
  21++CDB0
  22++CDB0              InverseXX16:								; lead routine into .LL42	\ ->  &4B04 \ DO nodeX-Ycoords their comment  \  TrnspMat
  23++CDB0              ; we coudl combine this with move to transmat later as an optimisation
  24++CDB0              ; INPUT - All Scaled
  25++CDB0              ;  They transmat has already been put into side, roof nose order
  26++CDB0              ;  XX16   = |sidev_x| |sidev_y| |sidev_z|  1  0  3  2  5  4 note each bytepair is Scaled value in low and high byte just for sign
  27++CDB0              ;  XX16   = |roofv_x| |roofv_y| |roofv_z|  7  6  8  9 11 10
  28++CDB0              ;  XX16   = |nosev_x| |nosev_y| |nosev_z| 13 12 15 14 17 16
  29++CDB0              ; OUTPUT
  30++CDB0              ;  XX16(1 0)   ( 3 2) ( 5 4 ) =  sidev_x roofv_x nosev_x
  31++CDB0              ;  XX16(7 6)   ( 8 9) (11 10) =  sidev_y roofv_y nosev_y
  32++CDB0              ;  XX16(13 12) (15 14)(17 16) =  sidev_z roofv_z nosev_z
  33++CDB0              ; First all side values become compoment 0 of each vector
  34++CDB0 2A 49 C0             ld      hl,(UBnkTransmatSidevX)     ;
  35++CDB3 ED 5B 4F C0          ld      de,(UBnkTransmatRoofvX)     ;
  36++CDB7 ED 4B 55 C0          ld      bc,(UBnkTransmatNosevX)     ;
  37++CDBB 22 61 C0             ld      (UbnkTransInvRow0x0),hl     ;
  38++CDBE ED 53 63 C0          ld      (UbnkTransInvRow0x1),de     ;
  39++CDC2 ED 43 65 C0          ld      (UbnkTransInvRow0x2),bc     ;
  40++CDC6 2A 4B C0             ld      hl,(UBnkTransmatSidevY)     ;
  41++CDC9 ED 5B 51 C0          ld      de,(UBnkTransmatRoofvY)     ;
  42++CDCD ED 4B 57 C0          ld      bc,(UBnkTransmatNosevY)     ;
  43++CDD1 22 69 C0             ld      (UbnkTransInvRow1y0),hl     ;
  44++CDD4 ED 53 6B C0          ld      (UbnkTransInvRow1y1),de     ;
  45++CDD8 ED 43 6D C0          ld      (UbnkTransInvRow1y2),bc     ;
  46++CDDC 2A 4D C0             ld      hl,(UBnkTransmatSidevZ)     ;
  47++CDDF ED 5B 53 C0          ld      de,(UBnkTransmatRoofvZ)     ;
  48++CDE3 ED 4B 59 C0          ld      bc,(UBnkTransmatNosevZ)     ;
  49++CDE7 22 71 C0             ld      (UbnkTransInvRow2z0),hl     ;
  50++CDEA ED 53 73 C0          ld      (UbnkTransInvRow2z1),de     ;
  51++CDEE ED 43 75 C0          ld      (UbnkTransInvRow2z2),bc     ;
  52++CDF2 C9                   ret
  53++CDF3
  54++CDF3
# file closed: ./Universe/Ships/InverseXX16.asm
 849+ CDF3              ;--------------------------------------------------------------------------------------------------------
 850+ CDF3              ;--------------------------------------------------------------------------------------------------------
 851+ CDF3              ;   XX12(1 0) = [x y z] . sidev  = (dot_sidev_sign dot_sidev_lo)  = dot_sidev
 852+ CDF3              ;   XX12(3 2) = [x y z] . roofv  = (dot_roofv_sign dot_roofv_lo)  = dot_roofv
 853+ CDF3              ;   XX12(5 4) = [x y z] . nosev  = (dot_nosev_sign dot_nosev_lo)  = dot_nosev
 854+ CDF3              ; Returns
 855+ CDF3              ;
 856+ CDF3              ;   XX12(1 0)            The dot product of [x y z] vector with the sidev (or _x)
 857+ CDF3              ;                        vector, with the sign in XX12+1 and magnitude in XX12
 858+ CDF3              ;
 859+ CDF3              ;   XX12(3 2)            The dot product of [x y z] vector with the roofv (or _y)
 860+ CDF3              ;                        vector, with the sign in XX12+3 and magnitude in XX12+2
 861+ CDF3              ;
 862+ CDF3              ;   XX12(5 4)            The dot product of [x y z] vector with the nosev (or _z)
 863+ CDF3              ;                        vector, with the sign in XX12+5 and magnitude in XX12+4
 864+ CDF3              XXCURRENTN0equN1byN2div256: MACRO param1, param2, param3
 865+ CDF3 ~                                    ld      c,0
 866+ CDF3 ~                                    ld      a,param3                      ;
 867+ CDF3 ~                                    bit     7,a
 868+ CDF3 ~                                    jr      z,.val2Pos
 869+ CDF3 ~            ;HandleSignebits
 870+ CDF3 ~                                    neg
 871+ CDF3 ~                                    ld      c,$80
 872+ CDF3 ~            .val2Pos:               ld      e,a                         ; use e as var Q = value of XX15 [n] lo
 873+ CDF3 ~                                    ld      a,param2                        ; A = XX16 element
 874+ CDF3 ~                                    bit     7,a
 875+ CDF3 ~                                    jr      z,.val1Pos
 876+ CDF3 ~            ;HandleSignebits
 877+ CDF3 ~                                    neg
 878+ CDF3 ~                                    ld      b,a
 879+ CDF3 ~                                    ld      a,c
 880+ CDF3 ~                                    xor     $80
 881+ CDF3 ~                                    ld      c,a
 882+ CDF3 ~                                    ld      a,b
 883+ CDF3 ~            .val1Pos:               ld      d,a
 884+ CDF3 ~            ;AequAmulQdiv256:
 885+ CDF3 ~                                    mul
 886+ CDF3 ~                                    ld      a,c
 887+ CDF3 ~                                    bit     7,a
 888+ CDF3 ~                                    ld      a,d                         ; we get only the high byte which is like doing a /256 if we think of a as low
 889+ CDF3 ~                                    jr      z,.resultPos
 890+ CDF3 ~                                    neg
 891+ CDF3 ~            .resultPos:             ld      (param1),a                      ; Q         ; result variable = XX16[n] * XX15[n]/256
 892+ CDF3                                      ENDM
 893+ CDF3
 894+ CDF3
 895+ CDF3               ; TESTEDOK
 896+ CDF3              XX12DotOneRow:
 897+ CDF3              XX12CalcX:              N0equN1byN2div256 varT, (hl), (UBnkXScaled)       ; T = (hl) * regXX15fx /256
 897+ CDF3 3A 8E C0    >                        ld      a,(UBnkXScaled)                        ;
 897+ CDF6 5F          >                        ld      e,a                         ; use e as var Q = value of XX15 [n] lo
 897+ CDF7 7E          >                        ld      a,(hl)                        ; A = XX16 element
 897+ CDF8 57          >                        ld      d,a
 897+ CDF9 ED 30       >                        mul
 897+ CDFB 7A          >                        ld      a,d                         ; we get only the high byte which is like doing a /256 if we think of a as low
 897+ CDFC 32 FB 9D    >                        ld      (varT),a                      ; Q         ; result variable = XX16[n] * XX15[n]/256
 898+ CDFF 23                                   inc     hl                                  ; move to sign byte
 899+ CE00              XX12CalcXSign:          AequN1xorN2 UBnkXScaledSign,(hl)             ;
 899+ CE00 3A 8F C0    >                        ld      a,(UBnkXScaledSign)
 899+ CE03 AE          >                        xor     (hl)
 900+ CE04 32 E1 9D                             ld      (varS),a                            ; Set S to the sign of x_sign * sidev_x
 901+ CE07 23                                   inc     hl
 902+ CE08              XX12CalcY:              N0equN1byN2div256 varQ, (hl),(UBnkYScaled)       ; Q = XX16 * XX15 /256 using varQ to hold regXX15fx
 902+ CE08 3A 90 C0    >                        ld      a,(UBnkYScaled)                        ;
 902+ CE0B 5F          >                        ld      e,a                         ; use e as var Q = value of XX15 [n] lo
 902+ CE0C 7E          >                        ld      a,(hl)                        ; A = XX16 element
 902+ CE0D 57          >                        ld      d,a
 902+ CE0E ED 30       >                        mul
 902+ CE10 7A          >                        ld      a,d                         ; we get only the high byte which is like doing a /256 if we think of a as low
 902+ CE11 32 DF 9D    >                        ld      (varQ),a                      ; Q         ; result variable = XX16[n] * XX15[n]/256
 903+ CE14                                      ldCopyByte varT,varR                        ; R = T =  |sidev_x| * x_lo / 256
 903+ CE14 3A FB 9D    >                        ld       a,(varT)
 903+ CE17 32 E0 9D    >                        ld       (varR),a
 904+ CE1A 23                                   inc     hl
 905+ CE1B                                      AequN1xorN2 UBnkYScaledSign,(hl)             ; Set A to the sign of y_sign * sidev_y
 905+ CE1B 3A 91 C0    >                        ld      a,(UBnkYScaledSign)
 905+ CE1E AE          >                        xor     (hl)
 906+ CE1F              ; (S)A = |sidev_x| * x_lo / 256  = |sidev_x| * x_lo + |sidev_y| * y_lo
 907+ CE1F E5           STequSRplusAQ           push    hl
 908+ CE20 CD 9C B6                             call    baddll38                            ; JSR &4812 \ LL38   \ BADD(S)A=R+Q(SA) \ 1byte add (subtract)
 909+ CE23 E1                                   pop     hl
 910+ CE24 32 FB 9D                             ld      (varT),a                            ; T = |sidev_x| * x_lo + |sidev_y| * y_lo
 911+ CE27 23                                   inc     hl
 912+ CE28              XX12CalcZ:              N0equN1byN2div256 varQ,(hl),(UBnkZScaled)       ; Q = |sidev_z| * z_lo / 256
 912+ CE28 3A 92 C0    >                        ld      a,(UBnkZScaled)                        ;
 912+ CE2B 5F          >                        ld      e,a                         ; use e as var Q = value of XX15 [n] lo
 912+ CE2C 7E          >                        ld      a,(hl)                        ; A = XX16 element
 912+ CE2D 57          >                        ld      d,a
 912+ CE2E ED 30       >                        mul
 912+ CE30 7A          >                        ld      a,d                         ; we get only the high byte which is like doing a /256 if we think of a as low
 912+ CE31 32 DF 9D    >                        ld      (varQ),a                      ; Q         ; result variable = XX16[n] * XX15[n]/256
 913+ CE34                                      ldCopyByte varT,varR                        ; R = |sidev_x| * x_lo + |sidev_y| * y_lo
 913+ CE34 3A FB 9D    >                        ld       a,(varT)
 913+ CE37 32 E0 9D    >                        ld       (varR),a
 914+ CE3A 23                                   inc     hl
 915+ CE3B                                      AequN1xorN2 UBnkZScaledSign,(hl)             ; A = sign of z_sign * sidev_z
 915+ CE3B 3A 93 C0    >                        ld      a,(UBnkZScaledSign)
 915+ CE3E AE          >                        xor     (hl)
 916+ CE3F              ; (S)A= |sidev_x| * x_lo + |sidev_y| * y_lo + |sidev_z| * z_lo
 917+ CE3F CD 9C B6                             call    baddll38                            ; JSR &4812 \ LL38   \ BADD(S)A=R+Q(SA)   \ 1byte add (subtract)
 918+ CE42              ; Now we exit with A = result S = Sign
 919+ CE42 C9                                   ret
 920+ CE43
 921+ CE43
 922+ CE43              ;-- LL51---------------------------------------------------------------------------------------------------------------------------
 923+ CE43              ;TESTED OK
 924+ CE43              XX12EquXX15DotProductXX16:
 925+ CE43              XX12EquScaleDotOrientation:                         ; .LL51 \ -> &4832 \ XX12=XX15.XX16  each vector is 16-bit x,y,z
 926+ CE43 01 00 00                             ld      bc,0                                ; LDX, LDY 0
 927+ CE46 21 49 C0                             ld      hl,UBnkTransmatSidevX
 928+ CE49 CD F3 CD                             call    XX12DotOneRow
 929+ CE4C 32 94 C0                             ld      (UBnkXX12xLo),a
 930+ CE4F 3A E1 9D                             ld      a,(varS)
 931+ CE52 32 95 C0                             ld      (UBnkXX12xSign),a
 932+ CE55 21 4F C0                             ld      hl,UBnkTransmatRoofvX
 933+ CE58 CD F3 CD                             call    XX12DotOneRow
 934+ CE5B 32 96 C0                             ld      (UBnkXX12yLo),a
 935+ CE5E 3A E1 9D                             ld      a,(varS)
 936+ CE61 32 97 C0                             ld      (UBnkXX12ySign),a
 937+ CE64 21 55 C0                             ld      hl,UBnkTransmatNosevX
 938+ CE67 CD F3 CD                             call    XX12DotOneRow
 939+ CE6A 32 98 C0                             ld      (UBnkXX12zLo),a
 940+ CE6D 3A E1 9D                             ld      a,(varS)
 941+ CE70 32 99 C0                             ld      (UBnkXX12zSign),a
 942+ CE73 C9                                   ret
 943+ CE74              ;--------------------------------------------------------------------------------------------------------
 944+ CE74                                      include "./Universe/Ships/CopyXX12ScaledToXX18.asm"
# file opened: ././Universe/Ships/CopyXX12ScaledToXX18.asm
   1++CE74              CopyXX12ScaledToXX18:
   2++CE74              CopyResultToDrawCam:
   3++CE74                      ldCopyByte XX12         ,XX18             ; XX12+0 => XX18+0  Set XX18(2 0) = dot_sidev
   3++CE74 3A 94 C0    >                        ld       a,(XX12)
   3++CE77 32 82 C0    >                        ld       (XX18),a
   4++CE7A                      ldCopyByte XX12+1       ,XX18+2           ; XX12+1 => XX18+2
   4++CE7A 3A 95 C0    >                        ld       a,(XX12+1)
   4++CE7D 32 84 C0    >                        ld       (XX18+2),a
   5++CE80                      ldCopyByte XX12+2       ,XX18+3           ; XX12+2 => XX18+3  Set XX12+1 => XX18+2
   5++CE80 3A 96 C0    >                        ld       a,(XX12+2)
   5++CE83 32 85 C0    >                        ld       (XX18+3),a
   6++CE86                      ldCopyByte XX12+3       ,XX18+5           ; XX12+3 => XX18+5
   6++CE86 3A 97 C0    >                        ld       a,(XX12+3)
   6++CE89 32 87 C0    >                        ld       (XX18+5),a
   7++CE8C                      ldCopyByte XX12+4       ,XX18+6           ; XX12+4 => XX18+6  Set XX18(8 6) = dot_nosev
   7++CE8C 3A 98 C0    >                        ld       a,(XX12+4)
   7++CE8F 32 88 C0    >                        ld       (XX18+6),a
   8++CE92                      ldCopyByte XX12+5       ,XX18+8           ; XX12+5 => XX18+8
   8++CE92 3A 99 C0    >                        ld       a,(XX12+5)
   8++CE95 32 8A C0    >                        ld       (XX18+8),a
   9++CE98 C9                   ret
  10++CE99
# file closed: ././Universe/Ships/CopyXX12ScaledToXX18.asm
 945+ CE99                                      include "./Universe/Ships/CopyXX12toXX15.asm"
# file opened: ././Universe/Ships/CopyXX12toXX15.asm
   1++CE99              CopyXX12toXX15:         ldCopyByte  UBnkXX12xLo     ,UBnkXScaled        ; xlo
   1++CE99 3A 94 C0    >                        ld       a,(UBnkXX12xLo)
   1++CE9C 32 8E C0    >                        ld       (UBnkXScaled),a
   2++CE9F                                      ldCopyByte  UBnkXX12xSign   ,UBnkXScaledSign    ; xsg
   2++CE9F 3A 95 C0    >                        ld       a,(UBnkXX12xSign)
   2++CEA2 32 8F C0    >                        ld       (UBnkXScaledSign),a
   3++CEA5                                      ldCopyByte  UBnkXX12yLo     ,UBnkYScaled        ; xlo
   3++CEA5 3A 96 C0    >                        ld       a,(UBnkXX12yLo)
   3++CEA8 32 90 C0    >                        ld       (UBnkYScaled),a
   4++CEAB                                      ldCopyByte  UBnkXX12ySign   ,UBnkYScaledSign    ; xsg
   4++CEAB 3A 97 C0    >                        ld       a,(UBnkXX12ySign)
   4++CEAE 32 91 C0    >                        ld       (UBnkYScaledSign),a
   5++CEB1                                      ldCopyByte  UBnkXX12zLo     ,UBnkZScaled        ; xlo
   5++CEB1 3A 98 C0    >                        ld       a,(UBnkXX12zLo)
   5++CEB4 32 92 C0    >                        ld       (UBnkZScaled),a
   6++CEB7                                      ldCopyByte  UBnkXX12zSign   ,UBnkZScaledSign    ; xsg
   6++CEB7 3A 99 C0    >                        ld       a,(UBnkXX12zSign)
   6++CEBA 32 93 C0    >                        ld       (UBnkZScaledSign),a
   7++CEBD C9                                   ret
   8++CEBE
# file closed: ././Universe/Ships/CopyXX12toXX15.asm
 946+ CEBE                                      include "./Universe/Ships/CopyXX18toXX15.asm"
# file opened: ././Universe/Ships/CopyXX18toXX15.asm
   1++CEBE              CopyXX18toXX15:
   2++CEBE              CopyDrawCamToScaled:
   3++CEBE                      ldCopyByte  UBnkDrawCam0xLo ,UBnkXScaled        ; xlo
   3++CEBE 3A 82 C0    >                        ld       a,(UBnkDrawCam0xLo)
   3++CEC1 32 8E C0    >                        ld       (UBnkXScaled),a
   4++CEC4                      ldCopyByte  UBnkDrawCam0xSgn,UBnkXScaledSign    ; xsg
   4++CEC4 3A 84 C0    >                        ld       a,(UBnkDrawCam0xSgn)
   4++CEC7 32 8F C0    >                        ld       (UBnkXScaledSign),a
   5++CECA                      ldCopyByte  UBnkDrawCam0yLo ,UBnkYScaled        ; xlo
   5++CECA 3A 85 C0    >                        ld       a,(UBnkDrawCam0yLo)
   5++CECD 32 90 C0    >                        ld       (UBnkYScaled),a
   6++CED0                      ldCopyByte  UBnkDrawCam0ySgn,UBnkYScaledSign    ; xsg
   6++CED0 3A 87 C0    >                        ld       a,(UBnkDrawCam0ySgn)
   6++CED3 32 91 C0    >                        ld       (UBnkYScaledSign),a
   7++CED6                      ldCopyByte  UBnkDrawCam0zLo ,UBnkZScaled        ; xlo
   7++CED6 3A 88 C0    >                        ld       a,(UBnkDrawCam0zLo)
   7++CED9 32 92 C0    >                        ld       (UBnkZScaled),a
   8++CEDC                      ldCopyByte  UBnkDrawCam0zSgn,UBnkZScaledSign    ; xsg
   8++CEDC 3A 8A C0    >                        ld       a,(UBnkDrawCam0zSgn)
   8++CEDF 32 93 C0    >                        ld       (UBnkZScaledSign),a
   9++CEE2 C9                   ret
  10++CEE3
# file closed: ././Universe/Ships/CopyXX18toXX15.asm
 947+ CEE3                                      include "./Universe/Ships/CopyXX18ScaledToXX15.asm"
# file opened: ././Universe/Ships/CopyXX18ScaledToXX15.asm
   1++CEE3 21 0C C0     LoadCraftToCamera:      ld      hl,UBnKxlo
   2++CEE6 11 82 C0                             ld      de,UBnkDrawCam0xLo
   3++CEE9                                      NineLDIInstrunctions                ; transfer 9 bytes
   3++CEE9 ED A0       >		                ldi
   3++CEEB ED A0       >		                ldi
   3++CEED ED A0       >		                ldi
   3++CEEF ED A0       >		                ldi
   3++CEF1 ED A0       >		                ldi
   3++CEF3 ED A0       >		                ldi
   3++CEF5 ED A0       >		                ldi
   3++CEF7 ED A0       >		                ldi
   3++CEF9 ED A0       >		                ldi
   4++CEFB C9                                   ret
   5++CEFC
   6++CEFC              CopyCameraToXX15Signed:
   7++CEFC 2A 82 C0             ld  hl,(UBnkDrawCam0xLo)
   8++CEFF 3A 84 C0             ld  a,(UBnkDrawCam0xSgn)
   9++CF02 B4                   or  h
  10++CF03 67                   ld  h,a
  11++CF04 22 8E C0             ld  (UBnkXScaled),hl
  12++CF07 2A 85 C0             ld  hl,(UBnkDrawCam0yLo)
  13++CF0A 3A 87 C0             ld  a,(UBnkDrawCam0ySgn)
  14++CF0D B4                   or  h
  15++CF0E 67                   ld  h,a
  16++CF0F 22 90 C0             ld  (UBnkYScaled),hl
  17++CF12 2A 88 C0             ld  hl,(UBnkDrawCam0zLo)
  18++CF15 3A 8A C0             ld  a,(UBnkDrawCam0zSgn)
  19++CF18 B4                   or  h
  20++CF19 67                   ld  h,a
  21++CF1A 22 92 C0             ld  (UBnkZScaled),hl
  22++CF1D C9                   ret
  23++CF1E
  24++CF1E              CopyXX18ScaledToXX15:
  25++CF1E              CopyDrawCamToScaledMatrix:
  26++CF1E                      ldCopyByte  UBnkDrawCam0zSgn, UBnkZScaledSign   ; XX18+8 => XX15+5
  26++CF1E 3A 8A C0    >                        ld       a,(UBnkDrawCam0zSgn)
  26++CF21 32 93 C0    >                        ld       (UBnkZScaledSign),a
  27++CF24                      ldCopyByte  UBnkDrawCam0xLo,  UBnkXScaled       ; XX18+0 => XX15+0
  27++CF24 3A 82 C0    >                        ld       a,(UBnkDrawCam0xLo)
  27++CF27 32 8E C0    >                        ld       (UBnkXScaled),a
  28++CF2A                      ldCopyByte  UBnkDrawCam0xSgn, UBnkXScaledSign   ; XX18+2 => XX15+1
  28++CF2A 3A 84 C0    >                        ld       a,(UBnkDrawCam0xSgn)
  28++CF2D 32 8F C0    >                        ld       (UBnkXScaledSign),a
  29++CF30                      ldCopyByte  UBnkDrawCam0yLo,  UBnkYScaled       ; XX18+3 => XX15+2
  29++CF30 3A 85 C0    >                        ld       a,(UBnkDrawCam0yLo)
  29++CF33 32 90 C0    >                        ld       (UBnkYScaled),a
  30++CF36                      ldCopyByte  UBnkDrawCam0ySgn, UBnkYScaledSign   ; XX18+5 => XX15+3
  30++CF36 3A 87 C0    >                        ld       a,(UBnkDrawCam0ySgn)
  30++CF39 32 91 C0    >                        ld       (UBnkYScaledSign),a
  31++CF3C                      ldCopyByte  UBnkDrawCam0zLo,  UBnkZScaled       ; XX18+6 => XX15+4
  31++CF3C 3A 88 C0    >                        ld       a,(UBnkDrawCam0zLo)
  31++CF3F 32 92 C0    >                        ld       (UBnkZScaled),a
  32++CF42 C9                   ret
  33++CF43
  34++CF43              CopyXX15ToXX18Scaled:
  35++CF43              CopyScaledMatrixToDrawCam:
  36++CF43                      ldCopyByte UBnkZScaledSign,   UBnkDrawCam0zSgn  ; XX15+5 => XX18+8
  36++CF43 3A 93 C0    >                        ld       a,(UBnkZScaledSign)
  36++CF46 32 8A C0    >                        ld       (UBnkDrawCam0zSgn),a
  37++CF49                      ldCopyByte UBnkXScaled,       UBnkDrawCam0xLo   ; XX15+0 => XX18+0
  37++CF49 3A 8E C0    >                        ld       a,(UBnkXScaled)
  37++CF4C 32 82 C0    >                        ld       (UBnkDrawCam0xLo),a
  38++CF4F                      ldCopyByte UBnkXScaledSign,   UBnkDrawCam0xSgn  ; XX15+1 => XX18+2
  38++CF4F 3A 8F C0    >                        ld       a,(UBnkXScaledSign)
  38++CF52 32 84 C0    >                        ld       (UBnkDrawCam0xSgn),a
  39++CF55                      ldCopyByte UBnkYScaled,       UBnkDrawCam0yLo   ; XX15+2 => XX18+3
  39++CF55 3A 90 C0    >                        ld       a,(UBnkYScaled)
  39++CF58 32 85 C0    >                        ld       (UBnkDrawCam0yLo),a
  40++CF5B                      ldCopyByte UBnkYScaledSign,   UBnkDrawCam0ySgn  ; XX15+3 => XX18+5
  40++CF5B 3A 91 C0    >                        ld       a,(UBnkYScaledSign)
  40++CF5E 32 87 C0    >                        ld       (UBnkDrawCam0ySgn),a
  41++CF61                      ldCopyByte UBnkZScaled,       UBnkDrawCam0zLo   ; XX15+4 => XX18+6
  41++CF61 3A 92 C0    >                        ld       a,(UBnkZScaled)
  41++CF64 32 88 C0    >                        ld       (UBnkDrawCam0zLo),a
  42++CF67 C9                   ret
  43++CF68
  44++CF68
  45++CF68              XX15EquXX15AddXX18:
  46++CF68              LL94Z:
  47++CF68 26 00                ld      h,0                                                     ;           AddZ = FaceData (XX12)z +  ShipPos (XX18)z
  48++CF6A 16 00                ld      d,0                                                     ;
  49++CF6C 3A 92 C0             ld      a,(UBnkZScaled)                                         ;
  50++CF6F 6F                   ld      l,a                                                     ;
  51++CF70 3A 93 C0             ld      a,(UBnkZScaledSign)                                     ;
  52++CF73 47                   ld      b,a                                                     ;
  53++CF74 3A 88 C0             ld      a,(UBnkDrawCam0zLo)                                     ;
  54++CF77 5F                   ld      e,a                                                     ;
  55++CF78 3A 8A C0             ld      a,(UBnkDrawCam0zSgn)                                    ;
  56++CF7B 4F                   ld      c,a                                                     ;
  57++CF7C CD 7B AC             call    ADDHLDESignBC                                           ;
  58++CF7F 47                   ld      b,a                                                     ;
  59++CF80 7C                   ld      a,h                                                     ;
  60++CF81 78                   ld      a,b                                                     ;           else  Scaled (XX15) Z = AddZ
  61++CF82 32 93 C0             ld      (UBnkZScaledSign),a                                     ;
  62++CF85 7D                   ld      a,l                                                     ;
  63++CF86 32 92 C0             ld      (UBnkZScaled),a                                         ;           endif
  64++CF89              LL94X:
  65++CF89 26 00                ld      h,0                                                     ;           AddZ = FaceData (XX12)z +  ShipPos (XX18)z
  66++CF8B 16 00                ld      d,0                                                     ;
  67++CF8D 3A 8E C0             ld      a,(UBnkXScaled)                                         ;
  68++CF90 6F                   ld      l,a                                                     ;
  69++CF91 3A 8F C0             ld      a,(UBnkXScaledSign)                                     ;
  70++CF94 47                   ld      b,a                                                     ;
  71++CF95 3A 82 C0             ld      a,(UBnkDrawCam0xLo)                                     ;
  72++CF98 5F                   ld      e,a                                                     ;
  73++CF99 3A 84 C0             ld      a,(UBnkDrawCam0xSgn)                                    ;
  74++CF9C 4F                   ld      c,a                                                     ;
  75++CF9D CD 7B AC             call    ADDHLDESignBC                                           ;
  76++CFA0 47                   ld      b,a                                                     ;
  77++CFA1 7C                   ld      a,h                                                     ;
  78++CFA2 78                   ld      a,b                                                     ;           else  Scaled (XX15) Z = AddZ
  79++CFA3 32 8F C0             ld      (UBnkXScaledSign),a                                     ;
  80++CFA6 7D                   ld      a,l                                                     ;
  81++CFA7 32 8E C0             ld      (UBnkXScaled),a                                         ;           endif
  82++CFAA              LL94Y:
  83++CFAA 26 00                ld      h,0                                                     ;           AddZ = FaceData (XX12)z +  ShipPos (XX18)z
  84++CFAC 16 00                ld      d,0                                                     ;
  85++CFAE 3A 90 C0             ld      a,(UBnkYScaled)                                         ;
  86++CFB1 6F                   ld      l,a                                                     ;
  87++CFB2 3A 91 C0             ld      a,(UBnkYScaledSign)                                     ;
  88++CFB5 47                   ld      b,a                                                     ;
  89++CFB6 3A 85 C0             ld      a,(UBnkDrawCam0yLo)                                     ;
  90++CFB9 5F                   ld      e,a                                                     ;
  91++CFBA 3A 87 C0             ld      a,(UBnkDrawCam0ySgn)                                    ;
  92++CFBD 4F                   ld      c,a                                                     ;
  93++CFBE CD 7B AC             call    ADDHLDESignBC                                           ;
  94++CFC1 47                   ld      b,a                                                     ;
  95++CFC2 7C                   ld      a,h                                                     ;
  96++CFC3 78                   ld      a,b                                                     ;           else  Scaled (XX15) Z = AddZ
  97++CFC4 32 91 C0             ld      (UBnkYScaledSign),a                                     ;
  98++CFC7 7D                   ld      a,l                                                     ;
  99++CFC8 32 90 C0             ld      (UBnkYScaled),a                                         ;
 100++CFCB C9                   ret
 101++CFCC
# file closed: ././Universe/Ships/CopyXX18ScaledToXX15.asm
 948+ CFCC                                      include "./Universe/Ships/CopyXX12ToScaled.asm"
# file opened: ././Universe/Ships/CopyXX12ToScaled.asm
   1++CFCC              CopyXX12ToScaled:
   2++CFCC              CopyResultToScaled:
   3++CFCC                      ldCopyByte  XX12+0,UBnkXScaled      ; xnormal lo
   3++CFCC 3A 94 C0    >                        ld       a,(XX12+0)
   3++CFCF 32 8E C0    >                        ld       (UBnkXScaled),a
   4++CFD2                      ldCopyByte  XX12+2,UBnkYScaled      ; ynormal lo
   4++CFD2 3A 96 C0    >                        ld       a,(XX12+2)
   4++CFD5 32 90 C0    >                        ld       (UBnkYScaled),a
   5++CFD8                      ldCopyByte  XX12+4,UBnkZScaled      ; znormal lo and leaves a holding zscaled normal
   5++CFD8 3A 98 C0    >                        ld       a,(XX12+4)
   5++CFDB 32 92 C0    >                        ld       (UBnkZScaled),a
   6++CFDE C9                   ret
   7++CFDF
# file closed: ././Universe/Ships/CopyXX12ToScaled.asm
 949+ CFDF              ;--------------------------------------------------------------------------------------------------------
 950+ CFDF                                      include "./Maths/Utilities/DotProductXX12XX15.asm"
# file opened: ././Maths/Utilities/DotProductXX12XX15.asm
   1++CFDF              ;;; Q = XX12 xLo ,A = XX15 xLo
   2++CFDF              ;;; T = A * Q/256 Usgined  (FMLTU)
   3++CFDF              ;;; S = XX12 XSign Xor XX15 XSign
   4++CFDF              ;;; Q = XX12 Ynormal Lo, A = XX15+2 (y lo)
   5++CFDF              ;;; Q = A * Q/256 Usigned (FMLTI)
   6++CFDF              ;;; R = T
   7++CFDF              ;;; A = XX12+3 (ySign) Xor XX15+3 (ySign)
   8++CFDF              ;;; T = BADD s(A) = R + Q(SA) (xdot + ydot)
   9++CFDF              ;;; Q = XX12+4 (znormal lo) A = XX15+4 z lo
  10++CFDF              ;;; Q = A * Q /256 usigned (zdot)
  11++CFDF              ;;; R = T
  12++CFDF              ;;; A - XX15+ 5 Zsign Xor XX12+5 Z Sign
  13++CFDF
  14++CFDF
  15++CFDF
  16++CFDF
  17++CFDF
  18++CFDF              MacroAequDxEdiv256usgn:	MACRO
  19++CFDF ~            						mul
  20++CFDF ~            						ld	a,d				; we get only the high byte which is like doing a /256 if we think of a as low
  21++CFDF              						ENDM
  22++CFDF              DotProductXX12XX15:
  23++CFDF 3A 94 C0             ld          a,(UBnkXX12xLo)         ; Use e as var Q for xnormal lo
  24++CFE2                      JumpIfAIsZero dotxskipzero
  24++CFE2 A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
  24++CFE3 CA 00 D0    >                        jp	    z, dotxskipzero
  25++CFE6 5F                   ld          e,a
  26++CFE7 3A 8E C0             ld          a,(UBnkXScaled)         ; use d as XX12 world xform x, e = norm x
  27++CFEA 57                   ld          d,a                     ; de = xx12 x signed
  28++CFEB                      JumpIfAIsZero dotxskipzero
  28++CFEB A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
  28++CFEC CA 00 D0    >                        jp	    z, dotxskipzero
  29++CFEF ED 30        		mul
  30++CFF1 42                   ld          b,d                     ; b = result
  31++CFF2 3A 95 C0             ld          a,(UBnkXX12xSign)
  32++CFF5 21 8F C0             ld          hl,UBnkXScaledSign
  33++CFF8 AE                   xor         (hl)
  34++CFF9 E6 80                and         $80                     ; so sign bit only
  35++CFFB FD 67                ld          iyh ,a                   ; we actually need to preserve sign in iyh here
  36++CFFD C3 04 D0             jp          dotmuly
  37++D000              dotxskipzero:
  38++D000 AF                   xor         a
  39++D001 47                   ld          b,a
  40++D002 FD 67                ld          iyh,a
  41++D004              dotmuly:
  42++D004              ; now we have b = XX12 x &d  norm x signed
  43++D004 3A 96 C0             ld          a,(UBnkXX12yLo)
  44++D007                      JumpIfAIsZero dotyskipzero
  44++D007 A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
  44++D008 CA 27 D0    >                        jp	    z, dotyskipzero
  45++D00B 5F                   ld          e,a
  46++D00C 3A 90 C0             ld          a,(UBnkYScaled)         ; XX15+2
  47++D00F                      JumpIfAIsZero dotyskipzero
  47++D00F A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
  47++D010 CA 27 D0    >                        jp	    z, dotyskipzero
  48++D013 57                   ld          d,a                     ; de = xx12 x signed
  49++D014 ED 30                mul
  50++D016 4A                   ld          c,d                     ; c = result
  51++D017 DD 69                ld          ixl,c
  52++D019 3A 97 C0             ld          a,(UBnkXX12ySign)       ; A = ysg
  53++D01C 21 91 C0             ld          hl, UBnkYScaledSign     ; a= y sign XOR Y scaled sign
  54++D01F AE                   xor         (hl)                    ; XX15+3
  55++D020 E6 80                and         $80                     ; do b = x mul c = y mul, iyh = sign for b and a = sign for c
  56++D022 DD 67                ld          ixh,a
  57++D024 C3 2B D0             jp          dotaddxy
  58++D027              dotyskipzero:
  59++D027 AF                   xor         a
  60++D028 4F                   ld          c,a
  61++D029 DD 67                ld          ixh,a
  62++D02B              dotaddxy:
  63++D02B              ; Optimise later as this is 16 bit
  64++D02B 26 00                ld          h,0                     ;
  65++D02D 68                   ld          l,b                     ; hl = xlo + x scaled
  66++D02E 16 00                ld          d,0                     ;
  67++D030 59                   ld          e,c                     ; de = ylo + yscaled
  68++D031 FD 44                ld          b,iyh                   ; b = sign of xlo + xscaled
  69++D033 4F                   ld          c,a                     ; c = sign of ylo + yscaled
  70++D034 CD 7B AC             call ADDHLDESignBC                  ; so now hl = result so will push sign to h
  71++D037 47                   ld          b,a                     ; b = resultant sign , hl = add so far
  72++D038 3A 98 C0             ld          a,(UBnkXX12zLo)         ;
  73++D03B                      JumpIfAIsZero dotzskipzero
  73++D03B A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
  73++D03C CA 61 D0    >                        jp	    z, dotzskipzero
  74++D03F 5F                   ld          e,a                     ;
  75++D040 3A 92 C0             ld          a,(UBnkZScaled)         ;
  76++D043                      JumpIfAIsZero dotzskipzero
  76++D043 A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
  76++D044 CA 61 D0    >                        jp	    z, dotzskipzero
  77++D047 57                   ld          d,a
  78++D048 ED 30                mul
  79++D04A E5                   push        hl                      ; save prev result
  80++D04B 3A 93 C0             ld          a,(UBnkZScaledSign)
  81++D04E 21 99 C0             ld          hl, UBnkXX12zSign       ; XX15+5
  82++D051 AE                   xor         (hl)                    ; hi sign
  83++D052 E6 80                and         $80                     ; a = sign of multiply
  84++D054 4F                   ld          c,a                     ; c = sign of z lo & z scaled
  85++D055 E1                   pop         hl
  86++D056 5A                   ld          e,d
  87++D057 16 00                ld          d,0
  88++D059 CD 7B AC             call ADDHLDESignBC
  89++D05C 32 E1 9D             ld          (varS),a
  90++D05F 7D                   ld          a,l
  91++D060 C9                   ret                                 ; returns with A = value, varS = sign
  92++D061              dotzskipzero:                               ; if we got here then z was zero so no component so just tidy up from last add
  93++D061 78                   ld          a,b
  94++D062 32 E1 9D             ld          (varS),a
  95++D065 7D                   ld          a,l
  96++D066 C9                   ret
  97++D067              ;;;;       DotProductXX12XX15:
  98++D067              ;;;;       ld          a,(UBnkXX12xLo)         ; Use e as var Q for xnormal lo
  99++D067              ;;;;       ld          e,a
 100++D067              ;;;;       ld          a,(UBnkXScaled)         ; use d as XX12 world xform x, e = norm x
 101++D067              ;;;;       ld          d,a                     ; de = xx12 x signed
 102++D067              ;;;;		; FMLTU	\ A=A*Q/256unsg using D as A and E as Q
 103++D067              ;;;;		mul
 104++D067              ;;;;       ld          b,d                     ; b as var T
 105++D067              ;;;;       ld          a,(UBnkXX12xSign)
 106++D067              ;;;;       ld          hl,UBnkXScaledSign
 107++D067              ;;;;       xor         (hl)
 108++D067              ;;;;       and         $80                     ; so sign bit only
 109++D067              ;;;;       ld          (varS),a                ; we did use c as S \ S	\ x-sign, but we actually need it in varS for BADD
 110++D067              ;;;; now we have b = XX12 x & norm x signed
 111++D067              ;;;; by here B = xlo & xscaled C = result sign
 112++D067              ;;;;       ld          a,(UBnkXX12yLo)
 113++D067              ;;;;       ld          e,a
 114++D067              ;;;;       ld          a,(UBnkYScaled)         ; XX15+2
 115++D067              ;;;;		ld          d,a						; MISSED THIS EARLIER BUG FIX
 116++D067              ;;;;       mul
 117++D067              ;;;;       ld          a,d
 118++D067              ;;;;       ld          (varQ),a                ; Q = Y y-dot
 119++D067              ;;;;       ld          a,b                     ; get back T from above held in b
 120++D067              ;;;;       ld          (varR),a                ; R= b \ T	\ x-dot
 121++D067              ;;;;       ld          a,(UBnkXX12ySign)       ; A = ysg
 122++D067              ;;;;       ld          hl, UBnkYScaledSign     ; a= y sign XOR Y scaled sign
 123++D067              ;;;;       xor         (hl)                    ; XX15+3
 124++D067              ;;;;       and         $80
 125++D067              ;;;;       call        baddll38                ; LL38	\ BADD(S)A=R+Q(SA)   \ 1byte add (subtract)
 126++D067              ;;;;       ld          (varT),a                ; var T	\ xdot+ydot
 127++D067              ;;;;       ld          a,(UBnkXX12zLo)         ; use d as  varQ        ; XX12+4	\ znormal lo to varQ
 128++D067              ;;;;       ld          e,a                     ; use e as var Q
 129++D067              ;;;;       ld          a,(UBnkZScaled)         ;
 130++D067              ;;;;       ld          d,a
 131++D067              ;;;;       mul
 132++D067              ;;;;       ld          a,d
 133++D067              ;;;;       ld          (varQ),a                ; Q	\ zdot
 134++D067              ;;;;       ldCopyByte  varT,varR               ; copy T to R so R = resutl of previous calc
 135++D067              ;;;;       ld          a,(UBnkZScaledSign)
 136++D067              ;;;;       ld          hl, UBnkXX12zSign       ; XX15+5
 137++D067              ;;;;       xor         (hl)                    ; hi sign
 138++D067              ;;;;       and         $80
 139++D067              ;;;;       call        baddll38                ; LL38	\ BADD(S)A=R+Q(SA)   \ 1byte add (subtract)
 140++D067              ;;;;       ret                                 ; returns with A = value, varS = sign
 141++D067
# file closed: ././Maths/Utilities/DotProductXX12XX15.asm
 951+ D067              ;--------------------------------------------------------------------------------------------------------
 952+ D067              ; scale Normal. IXL is xReg and A is loaded with XX17 holds the scale factor to apply
 953+ D067                                      include "Universe/Ships/ScaleNormal.asm"
# file opened: ./Universe/Ships/ScaleNormal.asm
   1++D067              ; scale Normal. IXL is xReg and A is loaded with XX17 holds the scale factor to apply
   2++D067              ; returns with XX15 scaled by Q but also z scaled in a register
   3++D067              ScaleNormal:
   4++D067              LL93:
   5++D067 3A E6 9D             ld      a,(XX17)                    ; scale--
   6++D06A DD 6F        		ld		ixl,a
   7++D06C 3A 92 C0     		ld		a,(UBnkZScaled)				; needs to be in a just in case we abort early
   8++D06F DD 2D        		dec		ixl
   9++D071 F8           		ret		m							; return if q was 0, i.e. no scaling
  10++D072              ScaleLoop:
  11++D072              LL933:
  12++D072 21 8E C0             ld      hl,XX15
  13++D075 CB 3E                srl     (hl)                        ; XX15	\ xnormal lo/2 \ LL93+3 \ counter X
  14++D077 23                   inc     hl							; looking at XX15 x sign now
  15++D078 23                   inc     hl							; looking at XX15 y Lo now
  16++D079 CB 3E                srl     (hl)                        ; XX15+2	\ ynormal lo/2
  17++D07B 23           		inc		hl							; looking at XX15 y sign now
  18++D07C 23           		inc		hl							; looking at XX15 z Lo now
  19++D07D CB 3E        		srl		(hl)
  20++D07F 7E           		ld		a,(hl)						; znormal lo/2 also into a it came in at the end of LL92
  21++D080 DD 2D                dec     ixl                         ; reduce scale
  22++D082 F2 72 D0             jp      p,ScaleLoop                 ; LL93-3 loop to lsr xx15
  23++D085 C9                   ret
  24++D086
# file closed: ./Universe/Ships/ScaleNormal.asm
 954+ D086              ;--------------------------------------------------------------------------------------------------------
 955+ D086                                      include "./Universe/Ships/ScaleObjectDistance.asm"
# file opened: ././Universe/Ships/ScaleObjectDistance.asm
   1++D086              ScaleObjectDistance:
   2++D086              ; ">ScaleObjectDistance, scales camera location and returns c = scaling factor (equiv of X reg)"
   3++D086 3A 29 C3             ld      a,(QAddr)                   ; Hull byte #18 normals scaled by 2^Q% DtProd^XX2  their comment   Dot product gives  normals' visibility in XX2
   4++D089 4F                   ld      c,a                         ; c = Q factor for scaling of normals
   5++D08A              LL90:                                       ; scaling object distance
   6++D08A 3A 89 C0             ld      a,(UBnkDrawCam0zHi)         ; z_hi
   7++D08D 47                   ld      b,a                         ; z_hi (yReg)
   8++D08E                      ReturnIfAIsZero                     ; if zHi 0 test ifis object close/small, i.e. zhi already zero then we are done
   8++D08E A7          >                        and     a
   8++D08F C8          >                        ret     z
   9++D090              LL90Loop:
  10++D090              ; Loop dividing camera by 2 until zhi is 0 and updating scale factor
  11++D090 0C                   inc     c                           ; LL90+3 \ repeat INWK z brought closer, take Qscale X up
  12++D091                      ShiftMem16Right1 UBnkDrawCam0yLo    ; cam Y /= 2
  12++D091 2A 85 C0    >                    ld    hl,(UBnkDrawCam0yLo)
  12++D094 CB 3C       >                    srl   h
  12++D096 CB 1D       >                    rr    l
  12++D098 22 85 C0    >                    ld    (UBnkDrawCam0yLo),hl
  13++D09B                      ShiftMem16Right1 UBnkDrawCam0xLo    ; cam X /= 2
  13++D09B 2A 82 C0    >                    ld    hl,(UBnkDrawCam0xLo)
  13++D09E CB 3C       >                    srl   h
  13++D0A0 CB 1D       >                    rr    l
  13++D0A2 22 82 C0    >                    ld    (UBnkDrawCam0xLo),hl
  14++D0A5                      ShiftMem16Right1 UBnkDrawCam0zLo    ; cam Z /= 2
  14++D0A5 2A 88 C0    >                    ld    hl,(UBnkDrawCam0zLo)
  14++D0A8 CB 3C       >                    srl   h
  14++D0AA CB 1D       >                    rr    l
  14++D0AC 22 88 C0    >                    ld    (UBnkDrawCam0zLo),hl
  15++D0AF 7C                   ld      a,h                         ; last shift will result in zhi adjusted into h reg.
  16++D0B0                      JumpIfAIsNotZero LL90Loop           ; loop until z hi = 0 this gives scalinging in c
  16++D0B0 A7          >                        and     a
  16++D0B1 C2 90 D0    >                        jp	    nz,LL90Loop
  17++D0B4 C9                   ret
  18++D0B5
# file closed: ././Universe/Ships/ScaleObjectDistance.asm
 956+ D0B5              ;--------------------------------------------------------------------------------------------------------
 957+ D0B5
 958+ D0B5              ; Backface cull
 959+ D0B5              ; is the angle between the ship -> camera vector and the normal of the face as long as both are unit vectors soo we can check that normal z > 0
 960+ D0B5              ; normal vector = cross product of ship ccordinates
 961+ D0B5              ;
 962+ D0B5
 963+ D0B5                                      include "./Universe/Ships/CopyFaceToXX15.asm"
# file opened: ././Universe/Ships/CopyFaceToXX15.asm
   1++D0B5 7E           CopyFaceToXX15:         ld      a,(hl)                      ; get Normal byte 0                                                                    ;;;     if visibility (bits 4 to 0 of byte 0) > XX4
   2++D0B6 47                                   ld      b,a                                                    ;;;
   3++D0B7 E6 80                                and     $80
   4++D0B9 32 8F C0                             ld      (UBnkXScaledSign),a           ; write Sign bits to x sign                                                            ;;;
   5++D0BC 78                                   ld      a,b
   6++D0BD CB 27                                sla     a                           ; move y sign to bit 7                                                                 ;;;   copy sign bits to XX12
   7++D0BF 47                                   ld      b,a
   8++D0C0 E6 80                                and     $80
   9++D0C2 32 91 C0                             ld      (UBnkYScaledSign),a           ;                                                                                      ;;;
  10++D0C5 78                                   ld      a,b
  11++D0C6 CB 27                                sla     a                           ; move y sign to bit 7                                                                 ;;;   copy sign bits to XX12
  12++D0C8 E6 80                                and     $80
  13++D0CA 32 93 C0                             ld      (UBnkZScaledSign),a           ;                                                                                      ;;;
  14++D0CD 23                                   inc     hl                          ; move to X ccord
  15++D0CE 7E                                   ld      a,(hl)                      ;                                                                                      ;;;   XX12 x,y,z lo = Normal[loop].x,y,z
  16++D0CF 32 8E C0                             ld      (UBnkXScaled),a                                                                                                    ;;;
  17++D0D2 23                                   inc     hl                                                                                                                 ;;;
  18++D0D3 7E                                   ld      a,(hl)                      ;                                                                                      ;;;
  19++D0D4 32 90 C0                             ld      (UBnkYScaled),a                                                                                                    ;;;
  20++D0D7 23                                   inc     hl                                                                                                                 ;;;
  21++D0D8 7E                                   ld      a,(hl)                      ;                                                                                      ;;;
  22++D0D9 32 92 C0                             ld      (UBnkZScaled),a
  23++D0DC C9                                   ret
  24++D0DD
# file closed: ././Universe/Ships/CopyFaceToXX15.asm
 964+ D0DD                                      include "./Universe/Ships/CopyFaceToXX12.asm"
# file opened: ././Universe/Ships/CopyFaceToXX12.asm
   1++D0DD 7E           CopyFaceToXX12:         ld      a,(hl)                      ; get Normal byte 0                                                                    ;;;     if visibility (bits 4 to 0 of byte 0) > XX4
   2++D0DE 47                                   ld      b,a                         ; save sign bits to b
   3++D0DF E6 80                                and     $80
   4++D0E1 32 95 C0                             ld      (UBnkXX12xSign),a           ; write Sign bits to x sign                                                            ;;;
   5++D0E4 78                                   ld      a,b
   6++D0E5 CB 27                                sla     a                           ; move y sign to bit 7                                                                 ;;;   copy sign bits to XX12
   7++D0E7 47                                   ld      b,a
   8++D0E8 E6 80                                and     $80
   9++D0EA 32 97 C0                             ld      (UBnkXX12ySign),a           ;                                                                                      ;;;
  10++D0ED 78                                   ld      a,b
  11++D0EE CB 27                                sla     a                           ; move y sign to bit 7                                                                 ;;;   copy sign bits to XX12
  12++D0F0 E6 80                                and     $80
  13++D0F2 32 99 C0                             ld      (UBnkXX12zSign),a           ;                                                                                      ;;;
  14++D0F5 23                                   inc     hl                          ; move to X ccord
  15++D0F6 7E                                   ld      a,(hl)                      ;                                                                                      ;;;   XX12 x,y,z lo = Normal[loop].x,y,z
  16++D0F7 32 94 C0                             ld      (UBnkXX12xLo),a                                                                                                    ;;;
  17++D0FA 23                                   inc     hl                                                                                                                 ;;;
  18++D0FB 7E                                   ld      a,(hl)                      ;                                                                                      ;;;
  19++D0FC 32 96 C0                             ld      (UBnkXX12yLo),a                                                                                                    ;;;
  20++D0FF 23                                   inc     hl                                                                                                                 ;;;
  21++D100 7E                                   ld      a,(hl)                      ;                                                                                      ;;;
  22++D101 32 98 C0                             ld      (UBnkXX12zLo),a
  23++D104 C9                                   ret
  24++D105
# file closed: ././Universe/Ships/CopyFaceToXX12.asm
 965+ D105              ;--------------------------------------------------------------
 966+ D105              ; Original loginc in EE29 (LL9 4 of 12)
 967+ D105              ; Enters with XX4 = z distnace scaled to 1 .. 31
 968+ D105              ; get number of faces * 4      FaceCntX4
 969+ D105              ; return if no faces
 970+ D105              ; get Face Normal scale factor FaceScale (XX17)
 971+ D105              ; get ship pos z hi     (XX18)
 972+ D105              ; While Z hi <> 0
 973+ D105              ;    FaceScale = FaceScale + 1           (XX17)
 974+ D105              ;    Ship pos y = ship pos y / 2         (XX18)
 975+ D105              ;    ship pos x = ship pos x / 2         (XX18)
 976+ D105              ;    ship pos z = ship pos z / 2         (XX18)
 977+ D105              ; Loop
 978+ D105              ; Copy Ship Pos (XX18) to Scaled         (XX15)
 979+ D105              ; Get Dot Product of Scaled (XX15) and XX16 (pre inverted) into XX12
 980+ D105              ; Copy XX12 into XX18
 981+ D105              ; For each face
 982+ D105              ;     Get Face sign and visibility distance byte
 983+ D105              ;     if normal visibility range  < XX4
 984+ D105              ;        Get Face data into XX12
 985+ D105              ;        if FaceScale (XX17) >= 4
 986+ D105              ;            Copy Ship Pos (XX18) to scaled (XX15)                                                                  ::LL143
 987+ D105              ;        else
 988+ D105              ;           Copy FaceScale scaled to X  (XX17)
 989+ D105              ;LabelOverflowLoop:
 990+ D105              ;           Copy FaceData (XX12) to Scaled (XX15)                                                                   ::LL92
 991+ D105              ;           While X >= 0
 992+ D105              ;              X--                                                                                                  ::LL93
 993+ D105              ;              if  x >= 0
 994+ D105              ;                  XX15x = XX15x / 2
 995+ D105              ;                  XX15y = XX15y / 2
 996+ D105              ;                  XX15y = XX15y / 2
 997+ D105              ;           loop
 998+ D105              ;           AddZ = FaceData (XX12)z +  ShipPos (XX18)z                                                              ::LL94
 999+ D105              ;           if A > 256 (i.e. was overflow)
1000+ D105              ;               ShipPos (XX18)x,y & z = ShipPos(XX18)x,y & z / 2 (Divide each component by 2)
1001+ D105              ;               X = 1
1002+ D105              ;               Goto LabelOverflowLoop
1003+ D105              ;           else
1004+ D105              ;              Scaled (XX15) Z = AddZ
1005+ D105              ;           endif
1006+ D105              ;           AddX = FaceData (XX12)x +  ShipPos (XX18)x
1007+ D105              ;           if A > 256 (i.e. was overflow)
1008+ D105              ;               ShipPos (XX18)x,y & z = ShipPos(XX18)x,y & z / 2 (Divide each component by 2)
1009+ D105              ;               X = 1
1010+ D105              ;               Goto LabelOverflowLoop
1011+ D105              ;           else
1012+ D105              ;              Scaled (XX15) X = AddX
1013+ D105              ;           endif
1014+ D105              ;           AddY = FaceData (XX12)y +  ShipPos (XX18)y
1015+ D105              ;           if A > 256 (i.e. was overflow)
1016+ D105              ;               ShipPos (XX18)x,y & z = ShipPos(XX18)x,y & z / 2 (Divide each component by 2)
1017+ D105              ;               X = 1
1018+ D105              ;               Goto LabelOverflowLoop
1019+ D105              ;           else
1020+ D105              ;              Scaled (XX15) Y = AddY
1021+ D105              ;           endif
1022+ D105              ;        endif
1023+ D105              ;        calculate dot product XX12.XX15  (XX15x * XX12x /256 + XX15y * XX12y /256 + XX15z * XX12z /256)        ::LL89
1024+ D105              ;        if dot product < 0
1025+ D105              ;           set face visible
1026+ D105              ;        else
1027+ D105              ;           set face invisible
1028+ D105              ;        end if
1029+ D105              ;     else
1030+ D105              ;       Set FaceVisibility to true
1031+ D105              ;     end if
1032+ D105              ; Next Face
1033+ D105
1034+ D105 DD 25        ScaleDownXX15byIXH:     dec     ixh
1035+ D107 F8                                   ret     m
1036+ D108 21 8E C0                             ld      hl,UBnkXScaled
1037+ D10B CB 3E                                srl     (hl)                        ; XX15  \ xnormal lo/2 \ LL93+3 \ counter X
1038+ D10D 23                                   inc     hl                          ; looking at XX15 x sign now
1039+ D10E 23                                   inc     hl                          ; looking at XX15 y Lo now
1040+ D10F CB 3E                                srl     (hl)                        ; XX15+2    \ ynormal lo/2
1041+ D111 23                                   inc     hl                          ; looking at XX15 y sign now
1042+ D112 23                                   inc     hl                          ; looking at XX15 z Lo now
1043+ D113 CB 3E                                srl     (hl)
1044+ D115 C3 05 D1                             jp      ScaleDownXX15byIXH
1045+ D118 C9                                   ret
1046+ D119
1047+ D119 21 82 C0     DivideXX18By2:          ld      hl,UBnkDrawCam0xLo
1048+ D11C CB 3E                                srl     (hl)                        ; XX18  \ xnormal lo/2 \ LL93+3 \ counter X
1049+ D11E 23                                   inc     hl                          ; looking at XX18 x sign now
1050+ D11F 23                                   inc     hl                          ; looking at XX18 y Lo now
1051+ D120 CB 3E                                srl     (hl)                        ; XX18+2    \ ynormal lo/2
1052+ D122 23                                   inc     hl                          ; looking at XX18 y sign now
1053+ D123 23                                   inc     hl                          ; looking at XX18 z Lo now
1054+ D124 CB 3E                                srl     (hl)
1055+ D126 C9                                   ret
1056+ D127
1057+ D127              ;line of sight vector = [x y z] + face normal vector
1058+ D127
1059+ D127              ;               [ [x y z] . sidev + normal_x ]   [ normal_x ]
1060+ D127              ;  visibility = [ [x y z] . roofv + normal_y ] . [ normal_y ]
1061+ D127              ;               [ [x y z] . nosev + normal_z ]   [ normal_z ]
1062+ D127              ;
1063+ D127              ;--------------------------------------------------------------
1064+ D127              ; line of sight (eye outwards dot face normal vector < 0
1065+ D127              ; So lin eof sight = vector from 0,0,0 to ship pos, now we need to consider teh ship's facing
1066+ D127              ; now if we add teh veector for teh normal(times magnitude)) to teh ship position we have the true center of the face
1067+ D127              ; now we can calcualt teh dot product of this caulated vector and teh normal which if < 0 is goot. this means we use rot mat not inverted rotmat.
1068+ D127
1069+ D127              RotateXX15ByTransMatXX16:
1070+ D127 21 49 C0                             ld      hl,UBnkTransmatSidevX               ; process orientation matrix row 0
1071+ D12A CD DB 94                             call    XX12ProcessOneRow
1072+ D12D 47                                   ld      b,a                                 ; get
1073+ D12E 7D                                   ld      a,l
1074+ D12F B0                                   or      b
1075+ D130 32 95 C0                             ld      (UBnkXX12xSign),a                   ; a = result with sign in bit 7
1076+ D133 7D                                   ld      a,l
1077+ D134 32 94 C0                             ld      (UBnkXX12xLo),a                     ; that is result done for
1078+ D137
1079+ D137 21 4F C0                             ld      hl,UBnkTransmatRoofvX               ; process orientation matrix row 0
1080+ D13A CD DB 94                             call    XX12ProcessOneRow
1081+ D13D 47                                   ld      b,a                                 ; get
1082+ D13E 7D                                   ld      a,l
1083+ D13F B0                                   or      b
1084+ D140 32 97 C0                             ld      (UBnkXX12ySign),a                   ; a = result with sign in bit 7
1085+ D143 7D                                   ld      a,l
1086+ D144 32 96 C0                             ld      (UBnkXX12yLo),a                     ; that is result done for
1087+ D147
1088+ D147 21 55 C0                             ld      hl,UBnkTransmatNosevX               ; process orientation matrix row 0
1089+ D14A CD DB 94                             call    XX12ProcessOneRow
1090+ D14D 47                                   ld      b,a                                 ; get
1091+ D14E 7D                                   ld      a,l
1092+ D14F B0                                   or      b
1093+ D150 32 99 C0                             ld      (UBnkXX12zSign),a                   ; a = result with sign in bit 7
1094+ D153 7D                                   ld      a,l
1095+ D154 32 98 C0                             ld      (UBnkXX12zLo),a                     ; that is result done for
1096+ D157 C9                                   ret
1097+ D158
1098+ D158                  include "./ModelRender/BackfaceCull.asm"
# file opened: ././ModelRender/BackfaceCull.asm
   1++D158 00           CurrentNormIdx  DB 0
   2++D159              ; SomeFacesVisible:
   3++D159              ; EE29:
   4++D159
   5++D159              ;   Backface cull logic  line of sight vector . face normal vector
   6++D159              ;       line of sight vector . face normal vector
   7++D159              ;       => line of sight vector = [x y z] + face normal vector
   8++D159              ;       Where [x y z] =
   9++D159              ;                                               [ [x y z] . sidev ]
  10++D159              ;                    projected [x y z] vector = [ [x y z] . roofv ]
  11++D159              ;                                               [ [x y z] . nosev ]
  12++D159              ;
  13++D159              ;   so project the [x y z] vector into the face's normal space
  14++D159              ;  line of sight vector = projected [x y z] vector + face normal vector
  15++D159              ;                         [ [x y z] . sidev ]   [ normal_x ]
  16++D159              ;                       = [ [x y z] . roofv ] + [ normal_y ]
  17++D159              ;                         [ [x y z] . nosev ]   [ normal_z ]
  18++D159              ;
  19++D159              ;                         [ [x y z] . sidev + normal_x ]
  20++D159              ;                       = [ [x y z] . roofv + normal_y ]
  21++D159              ;                         [ [x y z] . nosev + normal_z ]
  22++D159              ;
  23++D159              ; so
  24++D159              ;              visibility = [ [x y z] . sidev + normal_x ]   [ normal_x ]
  25++D159              ;                            [ [x y z] . roofv + normal_y ] . [ normal_y ]
  26++D159              ;                           [ [x y z] . nosev + normal_z ]   [ normal_z ]
  27++D159              ;
  28++D159              ; where face is visible if visibility < 0
  29++D159              ;
  30++D159              ;   so we set XX15 to [x y z] . sidev
  31++D159              ;                     [x y z] . roofv
  32++D159              ;                     [x y z] . nosev
  33++D159              ;
  34++D159
  35++D159
  36++D159
  37++D159 3A 89 C0     ScaleDrawcam:           ld      a,(UBnkDrawCam0zHi)         ; if z hi is 0 then we have scaled XX18
  38++D15C                                      JumpIfAIsZero .ScaleDone            ;
  38++D15C A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
  38++D15D CA 89 D1    >                        jp	    z, .ScaleDone
  39++D160 2A 82 C0                             ld      hl,(UBnkDrawCam0xLo)        ; pull postition into registers
  40++D163 ED 5B 85 C0                          ld      de,(UBnkDrawCam0yLo)        ; we only pull in if needed to save fetches
  41++D167 ED 4B 88 C0                          ld      bc,(UBnkDrawCam0zLo)        ;
  42++D16B FD 2C        .ScaleNormalLoop:       inc     iyl                         ; Q goes up by one
  43++D16D                                      ShiftHLRight1                       ; divide cam position by 2
  43++D16D CB 3C       >			   srl h
  43++D16F CB 1D       >			   rr  l
  44++D171                                      ShiftDERight1                       ;
  44++D171 CB 3A       >			   srl d
  44++D173 CB 1B       >			   rr  e
  45++D175                                      ShiftBCRight1                       ;
  45++D175 CB 38       >			   srl b
  45++D177 CB 19       >			   rr  c
  46++D179 78                                   ld      a,b                         ; loop if not scaled down
  47++D17A                                      JumpIfAIsNotZero .ScaleNormalLoop     ;
  47++D17A A7          >                        and     a
  47++D17B C2 6B D1    >                        jp	    nz,.ScaleNormalLoop
  48++D17E 22 82 C0                             ld      (UBnkDrawCam0xLo),hl        ; save position back to XX18
  49++D181 ED 53 85 C0                          ld      (UBnkDrawCam0yLo),de        ;
  50++D185 ED 43 88 C0                          ld      (UBnkDrawCam0zLo),bc        ;
  51++D189 FD 7D        .ScaleDone:             ld      a,iyl
  52++D18B 32 E6 9D                             ld      (varXX17),a                  ; XX17 = normal scale factor for current ship adjusted for camera
  53++D18E C9                                   ret
  54++D18F
  55++D18F              ;;--BackFaceCull:
  56++D18F              ;;--;debug:jp debug
  57++D18F              ;;--; DEBUG  force for now
  58++D18F              ;;--;                        ld     a,MaxVisibility                 ; max visibility                                               ;;;; default max visibility
  59++D18F              ;;--;                        ld     (LastNormalVisible),a           ; XX4                                                          ;;;;
  60++D18F              ;;--;
  61++D18F              ;;--; DEBUG
  62++D18F              ;;--                         ReturnIfMemisZero FaceCtX4Addr      ; get number of faces * 4      FaceCntX4 &  return if no faces
  63++D18F              ;;--                       ; break
  64++D18F              ;;--                        call    CopyRotmatToTransMat             ;#01; Load to Rotation Matrix to XX16, 16th bit is sign bit
  65++D18F              ;;--                        call    ScaleXX16Matrix197               ;#02; Normalise XX16
  66++D18F              ;;--                        call    LoadCraftToCamera                ;#04; Load Ship Coords to XX18
  67++D18F              ;;--                        call    InverseXX16                      ;#11; Invert rotation matrix
  68++D18F              ;;--
  69++D18F              ;;--.BackfaceLoop:          ld      a,(QAddr)                   ; a = ship normal scale factor
  70++D18F              ;;--                        ld      iyl,a                       ; iyl = scale factor
  71++D18F              ;;--; By this point XX18 = scaled draw cam and iyl = scale factor
  72++D18F              ;;--                        call    ScaleDrawcam
  73++D18F              ;;--                        call    CopyDrawCamToScaled
  74++D18F              ;;--.LL91:                  call    XX12EquNodeDotOrientation  ; xx12 = xx15 . XX16
  75++D18F              ;;--                        call    CopyXX12ScaledToXX18        ; now xx18 = xx15.xx16
  76++D18F              ;;--.PrepNormals:           ld      hl,UBnkHullNormals                                                                                                 ;;; V = address of Normal start
  77++D18F              ;;--                        ld      (varV),hl
  78++D18F              ;;--                        ld      a,(FaceCtX4Addr)                                        ; For each face
  79++D18F              ;;--                        srl     a                                                       ;
  80++D18F              ;;--                        srl     a                                                       ;
  81++D18F              ;;--                        ld      b,a                                                     ;
  82++D18F              ;;--                        xor     a
  83++D18F              ;;--                        ld      (CurrentNormIdx),a                                                   ; used to increment up face incdex as b decrements
  84++D18F              ;;--ProcessNormalsLoop:     push    hl
  85++D18F              ;;--                        push    bc
  86++D18F              ;;--                        ld      a,(hl)                                                  ;     Get Face sign and visibility distance byte
  87++D18F              ;;--                        and     $1F                                                     ;     if normal visibility range  < XX4
  88++D18F              ;;--                        ;JumpIfAGTENusng c,FaceVisible                                   ; commented out for debuggging the skip
  89++D18F              ;;--.LL86:                  jp  .LL87 ; force testing of normals
  90++D18F              ;;--                        jp      .FaceVisible
  91++D18F              ;;--; This bit needs to be added to force face visible
  92++D18F              ;;--.LL87:                  call    CopyFaceToXX12
  93++D18F              ;;--                        ld      a,(XX17)
  94++D18F              ;;--                        JumpIfALTNusng 4,.LL92
  95++D18F              ;;--.LL143:                 call    CopyXX18toXX15
  96++D18F              ;;--                        jp      .LL89
  97++D18F              ;;--.Ovflw:                 ld      a,(XX18)
  98++D18F              ;;--                        srl     a
  99++D18F              ;;--                        ld      (XX18),a
 100++D18F              ;;--                        ld      a,(XX18+6)
 101++D18F              ;;--                        srl     a
 102++D18F              ;;--                        ld      (XX18+6),a
 103++D18F              ;;--                        ld      a,(XX18+3)
 104++D18F              ;;--                        srl     a
 105++D18F              ;;--                        ld      (XX18+3),a
 106++D18F              ;;--                        ld      a,1                        ; set scale to 1 so when we fall through into LL92, we divide the normal vector by 2 as well
 107++D18F              ;;--.LL92:                   ld      b,a
 108++D18F              ;;--                        ldCopyByte  XX12,   UBnkXScaled
 109++D18F              ;;--                        ldCopyByte  XX12+2, UBnkYScaled
 110++D18F              ;;--                        ldCopyByte  XX12+4, UBnkZScaled
 111++D18F              ;;--.LL93                   dec     b
 112++D18F              ;;--                        jp      m, .LL94
 113++D18F              ;;--.LL93Loop:              ShiftMem8Right1 UBnkXScaled
 114++D18F              ;;--                        ShiftMem8Right1 UBnkYScaled
 115++D18F              ;;--                        ShiftMem8Right1 UBnkZScaled
 116++D18F              ;;--                        dec     b
 117++D18F              ;;--                        jp      p,.LL93Loop
 118++D18F              ;;--; Add normal to XX15
 119++D18F              ;;--.LL94:                  ldCopyByte  UBnkZScaled,     varR
 120++D18F              ;;--                        ldCopyByte  UBnkYScaled,     varS
 121++D18F              ;;--                        ldCopyByte  UBnkDrawCam0zLo, varQ
 122++D18F              ;;--                        ld      a,(XX18+8)
 123++D18F              ;;--                        call    SAEquSRPlusAQ
 124++D18F              ;;--                        jp      c,.Ovflw
 125++D18F              ;;--                        ld      (UBnkZScaled),a
 126++D18F              ;;--                        ldCopyByte  varS,            UBnkZScaledSign
 127++D18F              ;;--                        ldCopyByte  UBnkXScaled,     varR
 128++D18F              ;;--                        ldCopyByte  UBnkXScaledSign, varS
 129++D18F              ;;--                        ldCopyByte  UBnkDrawCam0xLo, varQ
 130++D18F              ;;--                        ld      a,(UBnkDrawCam0xSgn)
 131++D18F              ;;--                        call    SAEquSRPlusAQ
 132++D18F              ;;--                        jp      c,.Ovflw
 133++D18F              ;;--                        ld      (UBnkXScaled),a
 134++D18F              ;;--                        ldCopyByte  varS,            UBnkXScaledSign
 135++D18F              ;;--                        ldCopyByte  UBnkYScaled,     varR
 136++D18F              ;;--                        ldCopyByte  UBnkYScaledSign, varS
 137++D18F              ;;--                        ld      a,(UBnkDrawCam0ySgn)
 138++D18F              ;;--                        call    SAEquSRPlusAQ
 139++D18F              ;;--                        jp      c,.Ovflw
 140++D18F              ;;--                        ld      (UBnkYScaled),a
 141++D18F              ;;--                        ldCopyByte   varS, UBnkYScaledSign
 142++D18F              ;;--; calculate dot product:
 143++D18F              ;;--.LL89:                  ldCopyByte  UBnkXX12xLo, varQ
 144++D18F              ;;--                        ld      a,(UBnkXScaled)
 145++D18F              ;;--                        call    AequAmulQdiv256
 146++D18F              ;;--                        ld      (varT),a
 147++D18F              ;;--                        ld      a,(UBnkXX12xSign)
 148++D18F              ;;--                        ld      hl,UBnkXScaledSign
 149++D18F              ;;--                        xor     (hl)
 150++D18F              ;;--                        ld      (varS),a
 151++D18F              ;;--                        ldCopyByte  UBnkXX12yLo, varQ
 152++D18F              ;;--                        ld      a,(UBnkYScaled)
 153++D18F              ;;--                        call    AequAmulQdiv256
 154++D18F              ;;--                        ld      (varQ),a
 155++D18F              ;;--                        ldCopyByte  varT,varR
 156++D18F              ;;--                        ld      a,  (UBnkXX12ySign)
 157++D18F              ;;--                        ld      hl, UBnkYScaledSign
 158++D18F              ;;--                        xor     (hl)
 159++D18F              ;;--                        call    SAEquSRPlusAQ
 160++D18F              ;;--                        ld      (varT),a
 161++D18F              ;;--                        ldCopyByte  UBnkXX12zLo, varQ
 162++D18F              ;;--                        ld      a,  (UBnkZScaled)
 163++D18F              ;;--                        call    AequAmulQdiv256
 164++D18F              ;;--                        ld      (varQ),a
 165++D18F              ;;--                        ldCopyByte  varT, varR
 166++D18F              ;;--                        ld      a,  (UBnkZScaledSign)
 167++D18F              ;;--                        ld      hl, UBnkXX12zSign
 168++D18F              ;;--                        xor     (hl)
 169++D18F              ;;--                        call    SAEquSRPlusAQ           ; now A = dot product
 170++D18F              ;;--                        test    $80
 171++D18F              ;;--                        jr      nz,.FaceVisible                                      ;        if dot product < 0 set face visible
 172++D18F              ;;--.FaceNotVisible:         ld          a,(CurrentNormIdx)
 173++D18F              ;;--                        call        SetFaceAHidden                                      ;           set face invisible
 174++D18F              ;;--                        jp          ProcessNormalLoopEnd                                ;        end if
 175++D18F              ;;--.FaceVisible:            ld          a,(CurrentNormIdx)
 176++D18F              ;;--                        call        SetFaceAVisible
 177++D18F              ;;--ProcessNormalLoopEnd:   ld          hl, CurrentNormIdx
 178++D18F              ;;--                        inc         (hl)                    ; move index pointer up by one
 179++D18F              ;;--                        pop         bc
 180++D18F              ;;--                        pop         hl                      ; get normal data pointer back
 181++D18F              ;;--                        ld          a,4
 182++D18F              ;;--                        add         hl,a                    ; move to next normal entry
 183++D18F              ;;--                        ld          (varV),hl               ; save as we need it again
 184++D18F              ;;--                        dec         b
 185++D18F              ;;--                        jp          nz,ProcessNormalsLoop
 186++D18F              ;;--                        ret
 187++D18F
 188++D18F
 189++D18F
 190++D18F
 191++D18F              ;;;;;                        call    CopyFaceToXX15                                          ;        Get Face data into XX12
 192++D18F              ;;;;;                        ld      a,(UBnkXScaledSign)
 193++D18F              ;;;;;                        call    XX12EquNodeDotOrientation
 194++D18F              ;;;;;                        ld      a,(UBnkXX12zSign)
 195++D18F              ;;;;;                        test    $80
 196++D18F              ;;;;;                        jp      nz, FaceVisible
 197++D18F              ;;;;;.BackfaceLoop:          ld      a,(QAddr)                   ; a = ship normal scale factor
 198++D18F              ;;;;;                        ld      iyl,a                       ; iyl = scale factor
 199++D18F              ;;;;;.ScaleNormal:           ld      a,(UBnkDrawCam0zHi)         ; if z hi is 0 then we have scaled XX18
 200++D18F              ;;;;;                        JumpIfAIsZero .ScaleDone            ;
 201++D18F              ;;;;;                        ld      hl,(UBnkDrawCam0xLo)        ; pull postition into registers
 202++D18F              ;;;;;                        ld      de,(UBnkDrawCam0yLo)        ; we only pull in if needed to save fetches
 203++D18F              ;;;;;                        ld      bc,(UBnkDrawCam0zLo)        ;
 204++D18F              ;;;;;.ScaleNormalLoop:       inc     iyl                         ; Q goes up by one
 205++D18F              ;;;;;                        ShiftHLRight1                       ; divide cam position by 2
 206++D18F              ;;;;;                        ShiftDERight1                       ;
 207++D18F              ;;;;;                        ShiftBCRight1                       ;
 208++D18F              ;;;;;                        ld      a,b                         ; loop if not scaled down
 209++D18F              ;;;;;                        JumpIfAIsNotZero .ScaleNormalLoop     ;
 210++D18F              ;;;;;                        ld      (UBnkDrawCam0xLo),hl        ; save position back to XX18
 211++D18F              ;;;;;                        ld      (UBnkDrawCam0yLo),de        ;
 212++D18F              ;;;;;                        ld      (UBnkDrawCam0zLo),bc        ;
 213++D18F              ;;;;;; By this point XX18 = scaled draw cam and iyl = scale factor
 214++D18F              ;;;;;.ScaleDone:             ld      a,iyl
 215++D18F              ;;;;;                        ld      (varXX17),a                  ; XX17 = normal scale factor for current ship adjusted for camera
 216++D18F              ;;;;;    call    CopyRotmatToTransMat             ;#01; Load to Rotation Matrix to XX16, 16th bit is sign bit
 217++D18F              ;;;;;    call    ScaleXX16Matrix197               ;#02; Normalise XX16
 218++D18F              ;;;;;;    call    LoadCraftToCamera                ;#04; Load Ship Coords to XX18
 219++D18F              ;;;;;    call    InverseXX16                      ;#11; Invert rotation matrix
 220++D18F              ;;;;;
 221++D18F              ;;;;;
 222++D18F              ;;;;;
 223++D18F              ;;;;;                        call    CopyXX18toXX15              ; copy DrawCam to Xx15
 224++D18F              ;;;;;                        call    XX12EquNodeDotOrientation   ; Xx12 = XX15 (face normal) dot rotation matrix
 225++D18F              ;;;;;                        call    CopyXX12ScaledToXX18              ; now XX18 = dot product
 226++D18F              ;;;;;.ProcessNormals:        ld      hl,UBnkHullNormals                                                                                                 ;;; V = address of Normal start
 227++D18F              ;;;;;                        ld      (varV),hl
 228++D18F              ;;;;;                        ld      a,(FaceCtX4Addr)                                        ; For each face
 229++D18F              ;;;;;                        srl     a                                                       ;
 230++D18F              ;;;;;                        srl     a                                                       ;
 231++D18F              ;;;;;                        ld      b,a                                                     ;
 232++D18F              ;;;;;                        xor     a
 233++D18F              ;;;;;                        ld      (CurrentNormIdx),a                                                   ; used to increment up face incdex as b decrements
 234++D18F              ;;;;;.ProcessNormalsLoop:    push    hl
 235++D18F              ;;;;;                        push    bc
 236++D18F              ;;;;;                        ld      a,(hl)                                                  ;     Get Face sign and visibility distance byte
 237++D18F              ;;;;;                        and     $1F                                                     ;     if normal visibility range  < XX4
 238++D18F              ;;;;;                        ;JumpIfAGTENusng c,FaceVisible                                   ; commented out for debuggging the skip
 239++D18F              ;;;;;.CheckFaceVisibility:   call    CopyFaceToXX12              ; Get Face data into XX12
 240++D18F              ;;;;;                        ld      a,(varXX17)                  ; if scale factor < 4 then skip next bit
 241++D18F              ;;;;;                        JumpIfALTNusng 4,.LL92
 242++D18F              ;;;;;.LargeScaleFactor:      call    CopyXX18toXX15
 243++D18F              ;;;;;                        jp      .LL89
 244++D18F              ;;;;;.Ovflw:                 ld      a,(XX18)
 245++D18F              ;;;;;                        srl     a
 246++D18F              ;;;;;                        ld      (XX18),a
 247++D18F              ;;;;;                        ld      a,(XX18+6)
 248++D18F              ;;;;;                        srl     a
 249++D18F              ;;;;;                        ld      (XX18+6),a
 250++D18F              ;;;;;                        ld      a,(XX18+3)
 251++D18F              ;;;;;                        srl     a
 252++D18F              ;;;;;                        ld      (XX18+3),a
 253++D18F              ;;;;;                        ld      a,1                        ; set scale to 1 so when we fall through into LL92, we divide the normal vector by 2 as well
 254++D18F              ;;;;;.LL92:                  ld      b,a
 255++D18F              ;;;;;                        ldCopyByte  XX12,   UBnkXScaled
 256++D18F              ;;;;;                        ldCopyByte  XX12+2, UBnkYScaled
 257++D18F              ;;;;;                        ldCopyByte  XX12+4, UBnkZScaled
 258++D18F              ;;;;;.LL93                   dec     b
 259++D18F              ;;;;;                        jp      m, .LL94
 260++D18F              ;;;;;.LL93Loop:              ShiftMem8Right1 UBnkXScaled
 261++D18F              ;;;;;                        ShiftMem8Right1 UBnkYScaled
 262++D18F              ;;;;;                        ShiftMem8Right1 UBnkZScaled
 263++D18F              ;;;;;                        dec     b
 264++D18F              ;;;;;                        jp      p,.LL93Loop
 265++D18F              ;;;;;.LL94:                  ldCopyByte  UBnkZScaled,     varR
 266++D18F              ;;;;;                        ldCopyByte  UBnkYScaled,     varS
 267++D18F              ;;;;;                        ldCopyByte  UBnkDrawCam0zLo, varQ
 268++D18F              ;;;;;                        ld      a,(XX18+8)
 269++D18F              ;;;;;                        call    SAEquSRPlusAQ
 270++D18F              ;;;;;                        jp      c,.Ovflw
 271++D18F              ;;;;;                        ld      (UBnkZScaled),a
 272++D18F              ;;;;;                        ldCopyByte  varS,            UBnkZScaledSign
 273++D18F              ;;;;;                        ldCopyByte  UBnkXScaled,     varR
 274++D18F              ;;;;;                        ldCopyByte  UBnkXScaledSign, varS
 275++D18F              ;;;;;                        ldCopyByte  UBnkDrawCam0xLo, varQ
 276++D18F              ;;;;;                        ld      a,(UBnkDrawCam0xSgn)
 277++D18F              ;;;;;                        call    SAEquSRPlusAQ
 278++D18F              ;;;;;                        jp      c,.Ovflw
 279++D18F              ;;;;;                        ld      (UBnkXScaled),a
 280++D18F              ;;;;;                        ldCopyByte  varS,            UBnkXScaledSign
 281++D18F              ;;;;;                        ldCopyByte  UBnkYScaled,     varR
 282++D18F              ;;;;;                        ldCopyByte  UBnkYScaledSign, varS
 283++D18F              ;;;;;                        ld      a,(UBnkDrawCam0ySgn)
 284++D18F              ;;;;;                        call    SAEquSRPlusAQ
 285++D18F              ;;;;;                        jp      c,.Ovflw
 286++D18F              ;;;;;                        ld      (UBnkYScaled),a
 287++D18F              ;;;;;                        ldCopyByte   varS, UBnkYScaledSign
 288++D18F              ;;;;;.LL89:                  ldCopyByte  UBnkXX12xLo, varQ
 289++D18F              ;;;;;                        ld      a,(UBnkXScaled)
 290++D18F              ;;;;;                        call    AequAmulQdiv256
 291++D18F              ;;;;;                        ld      (varT),a
 292++D18F              ;;;;;                        ld      a,(UBnkXX12xSign)
 293++D18F              ;;;;;                        ld      hl,UBnkXScaledSign
 294++D18F              ;;;;;                        xor     (hl)
 295++D18F              ;;;;;                        ld      (varS),a
 296++D18F              ;;;;;                        ldCopyByte  UBnkXX12yLo, varQ
 297++D18F              ;;;;;                        ld      a,(UBnkYScaled)
 298++D18F              ;;;;;                        call    AequAmulQdiv256
 299++D18F              ;;;;;                        ld      (varQ),a
 300++D18F              ;;;;;                        ldCopyByte  varT,varR
 301++D18F              ;;;;;                        ld      a,  (UBnkXX12ySign)
 302++D18F              ;;;;;                        ld      hl, UBnkYScaledSign
 303++D18F              ;;;;;                        xor     (hl)
 304++D18F              ;;;;;                        call    SAEquSRPlusAQ
 305++D18F              ;;;;;                        ld      (varT),a
 306++D18F              ;;;;;                        ldCopyByte  UBnkXX12zLo, varQ
 307++D18F              ;;;;;                        ld      a,  (UBnkZScaled)
 308++D18F              ;;;;;                        call    AequAmulQdiv256
 309++D18F              ;;;;;                        ld      (varQ),a
 310++D18F              ;;;;;                        ldCopyByte  varT, varR
 311++D18F              ;;;;;                        ld      a,  (UBnkZScaledSign)
 312++D18F              ;;;;;                        ld      hl, UBnkXX12zSign
 313++D18F              ;;;;;                        xor     (hl)
 314++D18F              ;;;;;                        call    SAEquSRPlusAQ           ; now A = dot product
 315++D18F              ;;;;;                        test    $80
 316++D18F              ;;;;;                        jr      nz,.FaceVisible
 317++D18F              ;;;;;.FaceNotVisible:        ld      a,(CurrentNormIdx)
 318++D18F              ;;;;;                        call    SetFaceAHidden                                      ;           set face invisible
 319++D18F              ;;;;;                        jp      .ProcessNormalLoopEnd                                ;        end if
 320++D18F              ;;;;;.FaceVisible:           ld      a,(CurrentNormIdx)
 321++D18F              ;;;;;                        call    SetFaceAVisible
 322++D18F              ;;;;;.ProcessNormalLoopEnd:   ld      hl, CurrentNormIdx
 323++D18F              ;;;;;                        inc         (hl)                    ; move index pointer up by one
 324++D18F              ;;;;;                        pop         bc
 325++D18F              ;;;;;                        pop         hl                      ; get normal data pointer back
 326++D18F              ;;;;;                        ld          a,4
 327++D18F              ;;;;;                        add         hl,a                    ; move to next normal entry
 328++D18F              ;;;;;                        ld          (varV),hl               ; save as we need it again
 329++D18F              ;;;;;                        dec         b
 330++D18F              ;;;;;                        jp          nz,.ProcessNormalsLoop
 331++D18F              ;;;;;                        ret                                 ; If Y >= XX20 all normals' visibilities set, onto Transpose. return
 332++D18F              ;;;;;
 333++D18F
 334++D18F
 335++D18F
 336++D18F 3A 14 C0     CheckVisible:           ld      a,(UBnKzsgn)                 ; Is the ship behind us
 337++D192 E6 80        .CheckBehind:           and     SignOnly8Bit                 ; which means z sign is negative
 338++D194 20 44                                jr      nz,.ShipNoDraw               ; .
 339++D196 2A 12 C0     .CheckViewPort:         ld      hl,(UBnKzlo)                 ; now check to see if its within 90 degree arc
 340++D199 7C                                   ld      a,h
 341++D19A                                      JumpIfAGTENusng ShipMaxDistance, .ShipNoDraw
 341++D19A FE C0       >                        cp     ShipMaxDistance
 341++D19C D2 DA D1    >                        jp		nc,.ShipNoDraw
 342++D19F ED 5B 0C C0  .CheckXAxis:            ld      de,(UBnKxlo)                 ; if abs x > abx z then its out side of view port
 343++D1A3 CD 53 B3                             call    compare16HLDE
 344++D1A6 38 32                                jr      c,.ShipNoDraw               ; ship is too far out on the X Axis
 345++D1A8 ED 5B 0F C0  .CheckYAxis:            ld      de,(UBnKylo)                ; if abs y > abx z then its out side of view port
 346++D1AC CD 53 B3                             call    compare16HLDE
 347++D1AF 38 29                                jr      c,.ShipNoDraw               ; ship is too far out on the X Axis
 348++D1B1              .CalculateXX4:          ShiftHLRight1                       ; hl = z pos / 8
 348++D1B1 CB 3C       >			   srl h
 348++D1B3 CB 1D       >			   rr  l
 349++D1B5                                      ShiftHLRight1                       ; .
 349++D1B5 CB 3C       >			   srl h
 349++D1B7 CB 1D       >			   rr  l
 350++D1B9                                      ShiftHLRight1                       ; .
 350++D1B9 CB 3C       >			   srl h
 350++D1BB CB 1D       >			   rr  l
 351++D1BD 7C                                   ld      a,h
 352++D1BE CB 3F                                srl     a                           ; if a / 16 <> 0 then ship is a dot
 353++D1C0              .DrawAsDotCheck:        JumpIfNotZero   .ShipIsADot
 353++D1C0 C2 E0 D1    >                        jp	nz,.ShipIsADot
 354++D1C3                                      ; Check visbility distance
 355++D1C3              .SetXX4Dist:            ;break
 356++D1C3 7D                                   ld      a,l
 357++D1C4 1F                                   rra                                 ; l may have had bit 0 of h carried in
 358++D1C5 CB 3F                                srl     a                           ; so move it to bit 4 giving A as distance $000xxxxx
 359++D1C7 CB 3F                                srl     a
 360++D1C9 CB 3F                                srl     a
 361++D1CB 32 3E C0                             ld      (UBnkDrawAllFaces),a        ; XX4 = "all faces" distance
 362++D1CE 3A 3F C0                             ld      a,(UBnkaiatkecm)            ; its visible but a dot
 363++D1D1 F6 40                                or      ShipIsVisible               ; Visible and not a dot
 364++D1D3 E6 F7                                and     ShipIsNotDot                ;
 365++D1D5 32 3F C0                             ld      (UBnkaiatkecm),a            ;
 366++D1D8                                      ClearCarryFlag
 366++D1D8 B7          >                        or a
 367++D1D9 C9                                   ret
 368++D1DA              .ShipNoDraw:            ClearMemBitN  UBnkaiatkecm  , ShipIsVisibleBitNbr ; Assume its hidden
 368++D1DA 21 3F C0    >                        ld      hl,UBnkaiatkecm
 368++D1DD CB B6       >                        res     ShipIsVisibleBitNbr,(hl)
 369++D1DF C9                                   ret
 370++D1E0 3A 3F C0     .ShipIsADot:            ld      a,(UBnkaiatkecm)            ; its visible but a dot
 371++D1E3 F6 48                                or      ShipIsVisible | ShipIsDot   ;
 372++D1E5 32 3F C0                             ld      (UBnkaiatkecm),a            ;
 373++D1E8 C9                                   ret
 374++D1E9
 375++D1E9
 376++D1E9              ; TODO remove all teh processing of rotmat to load craft to camera as its already been done
 377++D1E9              CullV2:                 ReturnIfMemisZero FaceCtX4Addr      ;
 377++D1E9 3A 23 C3    >                        ld   a,(FaceCtX4Addr)
 377++D1EC A7          >                        and a
 377++D1ED C8          >                        ret    z
 378++D1EE                                     ; break
 379++D1EE CD 2C CC                             call    CopyRotmatToTransMat        ; XX16 = UBNKRotMat
 380++D1F1 CD 6F 96                             call    ScaleXX16Matrix197          ; scale rotation matrix in XX16
 381++D1F4 CD E3 CE                             call    LoadCraftToCamera           ; XX18 = camera
 382++D1F7                                      ;call    CopyCameraToXX15Signed      ; Copy the camera to XX15 as signed 15 bit
 383++D1F7 3A 29 C3     .BackfaceLoop:          ld      a,(QAddr)                   ;
 384++D1FA FD 6F                                ld      iyl,a                       ; iyl = scale factor
 385++D1FC              ; By this point XX18 = scaled draw cam and iyl = scale factor
 386++D1FC CD 59 D1                             call    ScaleDrawcam                ; XX18 = scaled camera XX17 = scale
 387++D1FF CD FC CE                             call    CopyCameraToXX15Signed      ; Xx18 -> xx15 sign + 15 bit
 388++D202 CD C6 95     .LL91:                  call    XX12EquNodeDotXX16          ; xx12 = Scaled Camera . Rotation matrix (Note Xx16 no Xx16 inv)
 389++D205 CD 74 CE                             call    CopyXX12ScaledToXX18        ; now xx18 = XX12 = xx15.xx16
 390++D208 21 E9 C4     .PrepNormals:           ld      hl,UBnkHullNormals                                                                                                 ;;; V = address of Normal start
 391++D20B 22 E2 9C                             ld      (varV),hl
 392++D20E 3A 23 C3                             ld      a,(FaceCtX4Addr)                                        ; For each face
 393++D211 CB 3F                                srl     a                                              ;
 394++D213 CB 3F                                srl     a                                              ;
 395++D215 47                                   ld      b,a                                            ;
 396++D216 AF                                   xor     a
 397++D217 32 58 D1                             ld      (CurrentNormIdx),a                                          ; used to increment up face incdex as b decrements
 398++D21A E5           .ProcessNormalsLoop:    push    hl
 399++D21B C5                                   push    bc
 400++D21C 7E           .LL86:                  ld      a,(hl)                                         ; Get Face sign and visibility distance byte
 401++D21D E6 1F                                and     $1F                                            ; if normal visibility range  < XX4
 402++D21F E5                                   push    hl
 403++D220 21 3E C0                             ld      hl,UBnkDrawAllFaces
 404++D223 BE                                   cp      (hl)
 405++D224 E1                                   pop     hl
 406++D225 DA 6A D3                             jp      c,.FaceVisible              ; then we always draw
 407++D228              ; This bit needs to be added to force face visible
 408++D228 CD DD D0     .LL87:                  call    CopyFaceToXX12              ; XX12 = normal (repolaced scale version) as a working copy
 409++D22B 3A E6 9D                             ld      a,(XX17)                    ; a = q scale XX17 cauclated by the call to ScaleDrawcam
 410++D22E 47                                   ld      b,a
 411++D22F                                      JumpIfALTNusng 4,.ScaleNormByXX17   ; if q >= 4 then is so big we don;t factor in + normal for dot product
 411++D22F FE 04       >                        cp      4
 411++D231 DA 6C D2    >                        jp		c, .ScaleNormByXX17
 412++D234 CD BE CE     .LL143:                 call    CopyXX18toXX15              ; and we just set XX15 = scaled Camera dot rotation matrix
 413++D237 C3 FB D2                             jp      .DoneScalingIntoXX15        ; Now Process XX12 normal
 414++D23A 3A 82 C0     .Ovflw:                 ld      a,(UBnkDrawCam0xLo)         ; divide camera by 2 if overflow
 415++D23D CB 3F                                srl     a                           ; which is held in XX18
 416++D23F 32 82 C0                             ld      (UBnkDrawCam0xLo),a         ; .
 417++D242 3A 88 C0                             ld      a,(UBnkDrawCam0zLo)         ; .
 418++D245 CB 3F                                srl     a                           ; .
 419++D247 32 88 C0                             ld      (UBnkDrawCam0zLo),a         ; .
 420++D24A 3A 85 C0                             ld      a,(UBnkDrawCam0yLo)         ; .
 421++D24D CB 3F                                srl     a                           ; .
 422++D24F 32 85 C0                             ld      (UBnkDrawCam0yLo),a        ; .
 423++D252 06 01        .ScaleXScaledAgain:     ld      b,1                         ; set scale to 1 so we divide original normal by 2 into face and try again and hope we didn't scaled down XX12 earlier so if we did then we must be in the do doo as the object was obscenely large and very close
 424++D254                                      ShiftMem8Right1 UBnkXScaled         ; Divide XX15 by 2^B
 424++D254 3A 8E C0    >                    ld      a,(UBnkXScaled)
 424++D257 CB 3F       >                    srl     a
 424++D259 32 8E C0    >                    ld      (UBnkXScaled),a
 425++D25C                                      ShiftMem8Right1 UBnkYScaled         ;
 425++D25C 3A 90 C0    >                    ld      a,(UBnkYScaled)
 425++D25F CB 3F       >                    srl     a
 425++D261 32 90 C0    >                    ld      (UBnkYScaled),a
 426++D264                                      ShiftMem8Right1 UBnkZScaled         ;
 426++D264 3A 92 C0    >                    ld      a,(UBnkZScaled)
 426++D267 CB 3F       >                    srl     a
 426++D269 32 92 C0    >                    ld      (UBnkZScaled),a
 427++D26C              ; if we jumped to here scale factor < 4 so we copy in normal to XX15 (scaled) LL92
 428++D26C              .ScaleNormByXX17:       ;ld      b,a
 429++D26C CD 99 CE                             call    CopyXX12toXX15
 430++D26F 05           .LL93                   dec     b
 431++D270 FA 8F D2                             jp      m, .ScaledNorm
 432++D273              .LL93Loop:              ShiftMem8Right1 UBnkXScaled        ; Divide XX15 by 2^B, I think this should be really XX12 and is a bug in the original code
 432++D273 3A 8E C0    >                    ld      a,(UBnkXScaled)
 432++D276 CB 3F       >                    srl     a
 432++D278 32 8E C0    >                    ld      (UBnkXScaled),a
 433++D27B                                      ShiftMem8Right1 UBnkYScaled        ;
 433++D27B 3A 90 C0    >                    ld      a,(UBnkYScaled)
 433++D27E CB 3F       >                    srl     a
 433++D280 32 90 C0    >                    ld      (UBnkYScaled),a
 434++D283                                      ShiftMem8Right1 UBnkZScaled        ;
 434++D283 3A 92 C0    >                    ld      a,(UBnkZScaled)
 434++D286 CB 3F       >                    srl     a
 434++D288 32 92 C0    >                    ld      (UBnkZScaled),a
 435++D28B 05                                   dec     b                          ;
 436++D28C F2 73 D2                             jp      p,.LL93Loop                ; Now we have XX15 as scaled Normal, XX15 as camera, don;t really knwo why as cals work on XX12 and XX18
 437++D28F              .ScaledNorm:            ;ORIG CODE DOES NOT HAVE THIS call    CopyXX15ToXX12 ; DEBUG as XX15 shoudl be a sacled nromal
 438++D28F              ; Add normal to XX15
 439++D28F              ; if we jumped here direct from LL143 then XX15 = drawcam scaled by Q, XX12 = face normal unscaled, XX18 = drawcam scaled also
 440++D28F              ; if we jumped here via scaling       then XX15 = normal scaled by Q,  XX12 = face normal unscaled, XX16 = drawcam scaled
 441++D28F              ; if we hit an overflow               then XX15 = drawcam scaled by Q  XX12 = face normal unscaled, XX18 = (drawcam scaled / 2 ) / 2^ nbr overflows (if we cam in vai scaling then its a mess?
 442++D28F              ; So LL94 is wrong as it shoud be operating on XX12 not XX15
 443++D28F              .LL94:                  ldCopyByte UBnkZScaled, varR        ; ldCopyByte  UBnkZScaled,     varR  ; if we jumped direct XX15 = drawcam scaled, Xx12 = normal xx18 = drawcam
 443++D28F 3A 92 C0    >                        ld       a,(UBnkZScaled)
 443++D292 32 E0 9D    >                        ld       (varR),a
 444++D295                                      ldCopyByte UBnkXX12zSign, varS      ; ldCopyByte  UBnkYScaled,     varS  ; if we did scaling then xx15 = norm scaled XX18 = drawcam
 444++D295 3A 99 C0    >                        ld       a,(UBnkXX12zSign)
 444++D298 32 E1 9D    >                        ld       (varS),a
 445++D29B                                      ldCopyByte  UBnkDrawCam0zLo, varQ   ; AQ = drawcam Z signed
 445++D29B 3A 88 C0    >                        ld       a,(UBnkDrawCam0zLo)
 445++D29E 32 DF 9D    >                        ld       (varQ),a
 446++D2A1 3A 8A C0                             ld      a,(UBnkDrawCam0zSgn)        ; .
 447++D2A4 CD 9C B6                             call    SAEquSRPlusAQ               ; SA = drawcam Z dot + z
 448++D2A7 DA 3A D2                             jp      c,.Ovflw
 449++D2AA 32 92 C0                             ld      (UBnkZScaled),a             ; XX15Z = SA
 450++D2AD                                      ldCopyByte  varS, UBnkZScaledSign   ;
 450++D2AD 3A E1 9D    >                        ld       a,(varS)
 450++D2B0 32 93 C0    >                        ld       (UBnkZScaledSign),a
 451++D2B3                                      ldCopyByte  UBnkXScaled,     varR   ; SR = normal X
 451++D2B3 3A 8E C0    >                        ld       a,(UBnkXScaled)
 451++D2B6 32 E0 9D    >                        ld       (varR),a
 452++D2B9                                      ldCopyByte  UBnkXX12xSign,   varS   ; .
 452++D2B9 3A 95 C0    >                        ld       a,(UBnkXX12xSign)
 452++D2BC 32 E1 9D    >                        ld       (varS),a
 453++D2BF                                      ldCopyByte  UBnkDrawCam0xLo, varQ   ; AQ = drawcam x dot
 453++D2BF 3A 82 C0    >                        ld       a,(UBnkDrawCam0xLo)
 453++D2C2 32 DF 9D    >                        ld       (varQ),a
 454++D2C5 3A 84 C0                             ld      a,(UBnkDrawCam0xSgn)        ; .
 455++D2C8 CD 9C B6                             call    SAEquSRPlusAQ               ; SA = normal x + drawcam x dot
 456++D2CB DA 3A D2                             jp      c,.Ovflw
 457++D2CE 32 8E C0                             ld      (UBnkXScaled),a             ; XX15Z = SA
 458++D2D1                                      ldCopyByte  varS, UBnkXScaledSign   ; .
 458++D2D1 3A E1 9D    >                        ld       a,(varS)
 458++D2D4 32 8F C0    >                        ld       (UBnkXScaledSign),a
 459++D2D7                                      ldCopyByte  UBnkYScaled, varR       ; SR = normal Y
 459++D2D7 3A 90 C0    >                        ld       a,(UBnkYScaled)
 459++D2DA 32 E0 9D    >                        ld       (varR),a
 460++D2DD                                      ldCopyByte  UBnkXX12ySign, varS     ; .
 460++D2DD 3A 97 C0    >                        ld       a,(UBnkXX12ySign)
 460++D2E0 32 E1 9D    >                        ld       (varS),a
 461++D2E3                                      ldCopyByte  UBnkDrawCam0yLo, varQ   ; AQ = drawcam y dot
 461++D2E3 3A 85 C0    >                        ld       a,(UBnkDrawCam0yLo)
 461++D2E6 32 DF 9D    >                        ld       (varQ),a
 462++D2E9 3A 87 C0                             ld      a,(UBnkDrawCam0ySgn)        ; .
 463++D2EC CD 9C B6                             call    SAEquSRPlusAQ               ; SA = normal y + drawcam y dot
 464++D2EF DA 3A D2                             jp      c,.Ovflw                    ; .
 465++D2F2 32 90 C0                             ld      (UBnkYScaled),a             ; XX15 Y = SA
 466++D2F5                                      ldCopyByte   varS, UBnkYScaledSign  ; .
 466++D2F5 3A E1 9D    >                        ld       a,(varS)
 466++D2F8 32 91 C0    >                        ld       (UBnkYScaledSign),a
 467++D2FB              ; calculate dot product LL89
 468++D2FB              .DoneScalingIntoXX15:   ldCopyByte  UBnkXX12xLo, varQ       ; Q = norm X XX12
 468++D2FB 3A 94 C0    >                        ld       a,(UBnkXX12xLo)
 468++D2FE 32 DF 9D    >                        ld       (varQ),a
 469++D301 3A 8E C0                             ld      a,(UBnkXScaled)             ; A = XX15 X
 470++D304 CD 03 B6                             call    AequAmulQdiv256             ; A = XX15 X * XX 12 X
 471++D307 32 FB 9D                             ld      (varT),a                    ; T = XX15 X * XX 12 X
 472++D30A 3A 95 C0                             ld      a,(UBnkXX12xSign)           ; S = sign of XX15 X * XX12 X
 473++D30D 21 8F C0                             ld      hl,UBnkXScaledSign          ; .
 474++D310 AE                                   xor     (hl)                        ; .
 475++D311 32 E1 9D                             ld      (varS),a                    ; .
 476++D314                                      ldCopyByte  UBnkXX12yLo, varQ       ; Q = norm Y XX12
 476++D314 3A 96 C0    >                        ld       a,(UBnkXX12yLo)
 476++D317 32 DF 9D    >                        ld       (varQ),a
 477++D31A 3A 90 C0                             ld      a,(UBnkYScaled)             ; A = XX15 Y
 478++D31D CD 03 B6                             call    AequAmulQdiv256             ; A = XX15 Y * XX 12 Y
 479++D320 32 DF 9D                             ld      (varQ),a                    ; Q = XX15 Y * XX 12 Y
 480++D323                                      ldCopyByte  varT,varR               ; R = XX15 X * XX 12 X
 480++D323 3A FB 9D    >                        ld       a,(varT)
 480++D326 32 E0 9D    >                        ld       (varR),a
 481++D329 3A 97 C0                             ld      a,  (UBnkXX12ySign)         ; A = sign of XX15 Y * XX 12 Y
 482++D32C 21 91 C0                             ld      hl, UBnkYScaledSign         ; .
 483++D32F AE                                   xor     (hl)                        ; .
 484++D330 CD 9C B6                             call    SAEquSRPlusAQ               ; SA = SR+AQ = (X calc) + (Y calc)
 485++D333 32 FB 9D                             ld      (varT),a                    ; T = usigned (X calc) + (Y calc)
 486++D336                                      ldCopyByte  UBnkXX12zLo, varQ       ; Q = XX12 Z
 486++D336 3A 98 C0    >                        ld       a,(UBnkXX12zLo)
 486++D339 32 DF 9D    >                        ld       (varQ),a
 487++D33C 3A 92 C0                             ld      a,  (UBnkZScaled)           ; A = XX15 Z
 488++D33F CD 03 B6                             call    AequAmulQdiv256             ; A = XX12 Z * XX15 Z
 489++D342 32 DF 9D                             ld      (varQ),a                    ; Q = XX12 Z * XX15 Z
 490++D345                                      ldCopyByte  varT, varR              ; R = usigned (X calc) + (Y calc)
 490++D345 3A FB 9D    >                        ld       a,(varT)
 490++D348 32 E0 9D    >                        ld       (varR),a
 491++D34B 3A 93 C0                             ld      a,  (UBnkZScaledSign)       ; A = sign of XX12 Z * XX15 Z
 492++D34E 21 99 C0                             ld      hl, UBnkXX12zSign           ; .
 493++D351 AE                                   xor     (hl)                        ; .
 494++D352 CD 9C B6                             call    SAEquSRPlusAQ               ; SA = ((X+Y signed)) (Z signed)
 495++D355 FE 00                                cp      0                           ; was the result 0, if so then there are scenarios where SAEquSRPlusAQ can return -ve 0
 496++D357 28 08                                jr      z,.FaceNotVisible           ; in which case face is not visible
 497++D359 3A E1 9D                             ld      a,(varS)                    ; if the cacl was a negative number then its visible
 498++D35C ED 27 80                             test    $80                         ; this should test S not A
 499++D35F 20 09                                jr      nz,.FaceVisible                                      ;        if dot product < 0 set face visible
 500++D361 3A 58 D1     .FaceNotVisible:         ld          a,(CurrentNormIdx)
 501++D364 CD 40 CD                             call        SetFaceAHidden                                      ;           set face invisible
 502++D367 C3 70 D3                             jp          .ProcessNormalLoopEnd                                ;        end if
 503++D36A 3A 58 D1     .FaceVisible:            ld          a,(CurrentNormIdx)
 504++D36D CD 37 CD                             call        SetFaceAVisible
 505++D370 21 58 D1     .ProcessNormalLoopEnd:  ld          hl, CurrentNormIdx
 506++D373 34                                   inc         (hl)                    ; move index pointer up by one
 507++D374 C1                                   pop         bc
 508++D375 E1                                   pop         hl                      ; get normal data pointer back
 509++D376 3E 04                                ld          a,4
 510++D378 ED 31                                add         hl,a                    ; move to next normal entry
 511++D37A 22 E2 9C                             ld          (varV),hl               ; save as we need it again
 512++D37D 05                                   dec         b
 513++D37E C2 1A D2                             jp          nz,.ProcessNormalsLoop
 514++D381 C9                                   ret
 515++D382
# file closed: ././ModelRender/BackfaceCull.asm
1099+ D382              ;--------------------------------------------------------------------------------------------------------
1100+ D382              ; Process edges
1101+ D382              ; .....................................................
1102+ D382              TransposeNodeVal:   MACRO arg0?
1103+ D382 ~                    ldCopyByte  UBnK\0sgn,Ubnk\1PointSign           ; UBnkXSgn => XX15+2 x sign
1104+ D382 ~                    ld          bc,(UBnkXX12\0Lo)                   ; c = lo, b = sign   XX12XLoSign
1105+ D382 ~                    xor         b                                   ; a = UBnkKxsgn (or XX15+2) here and b = XX12xsign,  XX12+1 \ rotated xnode h                                                                             ;;;           a = a XOR XX12+1                              XCALC
1106+ D382 ~                    jp          m,NodeNegative\1                                                                                                                                                            ;;;           if sign is +ve                        ::LL52   XCALC
1107+ D382 ~            ; XX15 [0,1] = INWK[0]+ XX12[0] + 256*INWK[1]                                                                                       ;;;          while any of x,y & z hi <> 0
1108+ D382 ~            NodeXPositive\1
1108+ D382 ~
1109+ D382 ~                    ld          a,c                                 ; We picked up XX12+0 above in bc Xlo
1110+ D382 ~                    ld          b,0                                 ; but only want to work on xlo                                                           ;;;              XX15xHiLo = XX12HiLo + xpos lo             XCALC
1111+ D382 ~                    ld          hl,(UBnK\0lo)                       ; hl = XX1 UBNKxLo
1112+ D382 ~                    ld          h,0                                 ; but we don;t want the sign
1113+ D382 ~                    add         hl,bc                               ; its a 16 bit add
1114+ D382 ~                    ld          (Ubnk\1Point),hl                    ; And written to XX15 0,1
1115+ D382 ~                    xor         a                                   ; we want to write 0 as sign bit (not in original code)
1116+ D382 ~                    ld          (UbnkXPointSign),a
1117+ D382 ~                    jp          FinishedThisNode\1
1118+ D382 ~            ; If we get here then _sign and vertv_ have different signs so do subtract
1119+ D382 ~            NodeNegative\1
1119+ D382 ~
1120+ D382 ~            LL52\1
1120+ D382 ~                                                              ;
1121+ D382 ~                    ld          hl,(UBnK\0lo)                       ; Coord
1122+ D382 ~                    ld          bc,(UBnkXX12\0Lo)                   ; XX12
1123+ D382 ~                    ld          b,0                                 ; XX12 lo byte only
1124+ D382 ~                    sbc         hl,bc                               ; hl = UBnKx - UBnkXX12xLo
1125+ D382 ~                    jp          p,SetAndMop\1                       ; if result is positive skip to write back
1126+ D382 ~            NodeXNegSignChange\1
1126+ D382 ~
1127+ D382 ~            ; If we get here the result is 2'c compliment so we reverse it and flip sign
1128+ D382 ~                    call        negate16hl                          ; Convert back to positive and flip sign
1129+ D382 ~                    ld          a,(Ubnk\1PointSign)                 ; XX15+2
1130+ D382 ~                    xor         $80                                 ; Flip bit 7
1131+ D382 ~                    ld          (Ubnk\1PointSign),a                 ; XX15+2
1132+ D382 ~            SetAndMop\1
1132+ D382 ~
1133+ D382 ~                    ld          (UBnK\0lo),hl                       ; XX15+0
1134+ D382 ~            FinishedThisNode\1
1135+ D382                                  ENDM
1136+ D382
1137+ D382              ;--LL52 to LL55-----------------------------------------------------------------------------------------------------------------
1138+ D382
1139+ D382              TransposeXX12NodeToXX15:
1140+ D382                      ldCopyByte  UBnKxsgn,UbnkXPointSign           ; UBnkXSgn => XX15+2 x sign
1140+ D382 3A 0E C0    >                        ld       a,(UBnKxsgn)
1140+ D385 32 90 C0    >                        ld       (UbnkXPointSign),a
1141+ D388 ED 4B 94 C0          ld          bc,(UBnkXX12xLo)                   ; c = lo, b = sign   XX12XLoSign
1142+ D38C A8                   xor         b                                   ; a = UBnkKxsgn (or XX15+2) here and b = XX12xsign,  XX12+1 \ rotated xnode h                                                                             ;;;           a = a XOR XX12+1                              XCALC
1143+ D38D FA A3 D3             jp          m,NodeNegativeX                                                                                                                                                            ;;;           if sign is +ve                        ::LL52   XCALC
1144+ D390              ; XX15 [0,1] = INWK[0]+ XX12[0] + 256*INWK[1]                                                                                       ;;;          while any of x,y & z hi <> 0
1145+ D390              NodeXPositiveX:
1146+ D390 79                   ld          a,c                                 ; We picked up XX12+0 above in bc Xlo
1147+ D391 06 00                ld          b,0                                 ; but only want to work on xlo                                                           ;;;              XX15xHiLo = XX12HiLo + xpos lo             XCALC
1148+ D393 2A 0C C0             ld          hl,(UBnKxlo)                       ; hl = XX1 UBNKxLo
1149+ D396 26 00                ld          h,0                                 ; but we don;t want the sign
1150+ D398 09                   add         hl,bc                               ; its a 16 bit add
1151+ D399 22 8E C0             ld          (UbnkXPoint),hl                    ; And written to XX15 0,1
1152+ D39C AF                   xor         a                                   ; we want to write 0 as sign bit (not in original code)
1153+ D39D 32 90 C0             ld          (UbnkXPointSign),a
1154+ D3A0 C3 BF D3             jp          FinishedThisNodeX
1155+ D3A3              ; If we get here then _sign and vertv_ have different signs so do subtract
1156+ D3A3              NodeNegativeX:
1157+ D3A3              LL52X:                                                 ;
1158+ D3A3 2A 0C C0             ld          hl,(UBnKxlo)                       ; Coord
1159+ D3A6 ED 4B 94 C0          ld          bc,(UBnkXX12xLo)                   ; XX12
1160+ D3AA 06 00                ld          b,0                                 ; XX12 lo byte only
1161+ D3AC ED 42                sbc         hl,bc                               ; hl = UBnKx - UBnkXX12xLo
1162+ D3AE F2 BC D3             jp          p,SetAndMopX                       ; if result is positive skip to write back
1163+ D3B1              NodeXNegSignChangeX:
1164+ D3B1              ; If we get here the result is 2'c compliment so we reverse it and flip sign
1165+ D3B1 CD 69 B3             call        negate16hl                          ; Convert back to positive and flip sign
1166+ D3B4 3A 90 C0             ld          a,(UbnkXPointSign)                 ; XX15+2
1167+ D3B7 EE 80                xor         $80                                 ; Flip bit 7
1168+ D3B9 32 90 C0             ld          (UbnkXPointSign),a                 ; XX15+2
1169+ D3BC              SetAndMopX:
1170+ D3BC 22 0C C0             ld          (UBnKxlo),hl                       ; XX15+0
1171+ D3BF              FinishedThisNodeX:
1172+ D3BF
1173+ D3BF              LL53:
1174+ D3BF
1175+ D3BF                      ldCopyByte  UBnKysgn,UbnkYPointSign           ; UBnkXSgn => XX15+2 x sign
1175+ D3BF 3A 11 C0    >                        ld       a,(UBnKysgn)
1175+ D3C2 32 93 C0    >                        ld       (UbnkYPointSign),a
1176+ D3C5 ED 4B 96 C0          ld          bc,(UBnkXX12yLo)                   ; c = lo, b = sign   XX12XLoSign
1177+ D3C9 A8                   xor         b                                   ; a = UBnkKxsgn (or XX15+2) here and b = XX12xsign,  XX12+1 \ rotated xnode h                                                                             ;;;           a = a XOR XX12+1                              XCALC
1178+ D3CA FA E0 D3             jp          m,NodeNegativeY                                                                                                                                                            ;;;           if sign is +ve                        ::LL52   XCALC
1179+ D3CD              ; XX15 [0,1] = INWK[0]+ XX12[0] + 256*INWK[1]                                                                                       ;;;          while any of x,y & z hi <> 0
1180+ D3CD              NodeXPositiveY:
1181+ D3CD 79                   ld          a,c                                 ; We picked up XX12+0 above in bc Xlo
1182+ D3CE 06 00                ld          b,0                                 ; but only want to work on xlo                                                           ;;;              XX15xHiLo = XX12HiLo + xpos lo             XCALC
1183+ D3D0 2A 0F C0             ld          hl,(UBnKylo)                       ; hl = XX1 UBNKxLo
1184+ D3D3 26 00                ld          h,0                                 ; but we don;t want the sign
1185+ D3D5 09                   add         hl,bc                               ; its a 16 bit add
1186+ D3D6 22 91 C0             ld          (UbnkYPoint),hl                    ; And written to XX15 0,1
1187+ D3D9 AF                   xor         a                                   ; we want to write 0 as sign bit (not in original code)
1188+ D3DA 32 90 C0             ld          (UbnkXPointSign),a
1189+ D3DD C3 FC D3             jp          FinishedThisNodeY
1190+ D3E0              ; If we get here then _sign and vertv_ have different signs so do subtract
1191+ D3E0              NodeNegativeY:
1192+ D3E0              LL52Y:                                                 ;
1193+ D3E0 2A 0F C0             ld          hl,(UBnKylo)                       ; Coord
1194+ D3E3 ED 4B 96 C0          ld          bc,(UBnkXX12yLo)                   ; XX12
1195+ D3E7 06 00                ld          b,0                                 ; XX12 lo byte only
1196+ D3E9 ED 42                sbc         hl,bc                               ; hl = UBnKx - UBnkXX12xLo
1197+ D3EB F2 F9 D3             jp          p,SetAndMopY                       ; if result is positive skip to write back
1198+ D3EE              NodeXNegSignChangeY:
1199+ D3EE              ; If we get here the result is 2'c compliment so we reverse it and flip sign
1200+ D3EE CD 69 B3             call        negate16hl                          ; Convert back to positive and flip sign
1201+ D3F1 3A 93 C0             ld          a,(UbnkYPointSign)                 ; XX15+2
1202+ D3F4 EE 80                xor         $80                                 ; Flip bit 7
1203+ D3F6 32 93 C0             ld          (UbnkYPointSign),a                 ; XX15+2
1204+ D3F9              SetAndMopY:
1205+ D3F9 22 0F C0             ld          (UBnKylo),hl                       ; XX15+0
1206+ D3FC              FinishedThisNodeY:
1207+ D3FC
1208+ D3FC
1209+ D3FC              TransposeZ:
1210+ D3FC              LL55:                                                   ; Both y signs arrive here, Onto z                                          ;;;
1211+ D3FC 3A 99 C0             ld          a,(UBnkXX12zSign)                   ; XX12+5    \ rotated znode hi                                              ;;;
1212+ D3FF                      JumpOnBitSet a,7,NegativeNodeZ                    ; LL56 -ve Z node                                                           ;;;
1212+ D3FF CB 7F       >                        bit 	7,a
1212+ D401 C2 15 D4    >                        jp      nz,NegativeNodeZ
1213+ D404 3A 98 C0             ld          a,(UBnkXX12zLo)                     ; XX12+4 \ rotated znode lo                                                 ;;;
1214+ D407 2A 12 C0             ld          hl,(UBnKzlo)                        ; INWK+6    \ zorg lo                                                       ;;;
1215+ D40A ED 31                add         hl,a                                ; hl = INWKZ + XX12z                                                        ;;;
1216+ D40C 7D                   ld          a,l
1217+ D40D 32 FB 9D             ld          (varT),a                            ;                                                                           ;;;
1218+ D410 7C                   ld          a,h
1219+ D411 32 DE 9D             ld          (varU),a                            ; now z = hl or U(hi).T(lo)                                                 ;;;
1220+ D414 C9                   ret                                             ; LL57  \ Node additions done, z = U.T                                      ;;;
1221+ D415              ; Doing additions and scalings for each visible node around here                                                                    ;;;
1222+ D415              NegativeNodeZ:
1223+ D415              LL56:                                                   ; Enter XX12+5 -ve Z node case  from above                                  ;;;
1224+ D415 2A 12 C0             ld          hl,(UBnKzlo)                        ; INWK+6 \ z org lo                                                         ;;;
1225+ D418 ED 4B 98 C0          ld          bc,(UBnkXX12zLo)                    ; XX12+4    \ rotated z node lo                                                 ......................................................
1226+ D41C 06 00                ld          b,0                                 ; upper byte will be garbage
1227+ D41E                      ClearCarryFlag
1227+ D41E B7          >                        or a
1228+ D41F ED 42                sbc         hl,bc                               ; 6502 used carry flag compliment
1229+ D421 7D                   ld          a,l
1230+ D422 32 FB 9D             ld          (varT),a                            ; t = result low
1231+ D425 7C                   ld          a,h
1232+ D426 32 DE 9D             ld          (varU),a                            ; u = result high
1233+ D429 E2 36 D4             jp          po,MakeNodeClose                    ; no overflow to parity would be clear
1234+ D42C              LL56Overflow:
1235+ D42C FE 00                cp          0                                   ; is varU 0?
1236+ D42E 20 16                jr          nz,NodeAdditionsDone                ; Enter Node additions done, UT=z
1237+ D430 3A FB 9D             ld          a,(varT)                            ; T \ restore z lo
1238+ D433                      ReturnIfAGTENusng 4                              ; >= 4 ? zlo big enough, Enter Node additions done.
1238+ D433 FE 04       >                        cp    4
1238+ D435 D0          >                        ret	 nc
1239+ D436              MakeNodeClose:
1240+ D436              LL140:                                                  ; else make node close
1241+ D436 AF                   xor         a                                   ; hi This needs tuning to use a 16 bit variable
1242+ D437 32 DE 9D             ld          (varU),a                            ; U
1243+ D43A 3E 04                ld          a,4                                 ; lo
1244+ D43C 32 FB 9D             ld          (varT),a                            ; T
1245+ D43F C9                   ret
1246+ D440              ;--LL49-------------------------------------------------------------------------------------------------------------------------
1247+ D440              ProcessVisibleNode:
1248+ D440              RotateNode:                                                                                                                         ;;;
1249+ D440 CD 43 CE             call        XX12EquXX15DotProductXX16                                                                                       ;;;           call      XX12=XX15.XX16
1250+ D443              LL52LL53LL54LL55
1251+ D443              TransposeNode:
1252+ D443 CD 82 D3             call        TransposeXX12NodeToXX15
1253+ D446
1254+ D446              ; ......................................................                                                         ;;;
1255+ D446              NodeAdditionsDone:
1256+ D446              Scale16BitTo8Bit:
1257+ D446              LL57:                                                   ; Enter Node additions done, z=T.U set up from LL55
1258+ D446 3A DE 9D             ld          a,(varU)                            ; U \ z hi
1259+ D449 21 8F C0             ld          hl,UbnkXPointHi
1260+ D44C B6                   or          (hl)                                ; XX15+1    \ x hi
1261+ D44D 21 92 C0             ld          hl,UbnkYPointHi
1262+ D450 B6                   or          (hl)                                ; XX15+4    \ y hi
1263+ D451              AreXYZHiAllZero:
1264+ D451 28 2B                jr          z,NodeScalingDone                   ; if X, Y, Z = 0  exit loop down once hi U rolled to 0
1265+ D453              DivideXYZBy2:
1266+ D453                      ShiftMem16Right1    UbnkXPoint                  ; XX15[0,1]
1266+ D453 2A 8E C0    >                    ld    hl,(UbnkXPoint)
1266+ D456 CB 3C       >                    srl   h
1266+ D458 CB 1D       >                    rr    l
1266+ D45A 22 8E C0    >                    ld    (UbnkXPoint),hl
1267+ D45D                      ShiftMem16Right1    UbnkYPoint                  ; XX15[3,4]
1267+ D45D 2A 91 C0    >                    ld    hl,(UbnkYPoint)
1267+ D460 CB 3C       >                    srl   h
1267+ D462 CB 1D       >                    rr    l
1267+ D464 22 91 C0    >                    ld    (UbnkYPoint),hl
1268+ D467 3A DE 9D             ld          a,(varU)                            ; U \ z hi
1269+ D46A 67                   ld          h,a
1270+ D46B 3A FB 9D             ld          a,(varT)                            ; T \ z lo
1271+ D46E 6F                   ld          l,a
1272+ D46F                      ShiftHLRight1
1272+ D46F CB 3C       >			   srl h
1272+ D471 CB 1D       >			   rr  l
1273+ D473 7C                   ld          a,h
1274+ D474 32 DE 9D             ld          (varU),a
1275+ D477 7D                   ld          a,l
1276+ D478 32 FB 9D             ld          (varT),a                            ; T \ z lo
1277+ D47B C3 46 D4             jp          Scale16BitTo8Bit                    ; loop U
1278+ D47E              NodeScalingDone:
1279+ D47E              LL60:                                                   ; hi U rolled to 0, exited loop above.
1280+ D47E              ProjectNodeToScreen:
1281+ D47E                      ldCopyByte  varT,varQ                           ; T =>  Q   \ zdist lo
1281+ D47E 3A FB 9D    >                        ld       a,(varT)
1281+ D481 32 DF 9D    >                        ld       (varQ),a
1282+ D484 3A 8E C0             ld          a,(UbnkXPointLo)                    ; XX15  \ rolled x lo
1283+ D487 21 DF 9D             ld          hl,varQ
1284+ D48A BE                   cp          (hl)                                ; Q
1285+ D48B                      JumpIfALTusng DoSmallAngle                      ; LL69 if xdist < zdist hop over jmp to small x angle
1285+ D48B DA 94 D4    >                        jp		c,DoSmallAngle
1286+ D48E CD A3 B7             call        RequAdivQ                           ; LL61  \ visit up  R = A/Q = x/z
1287+ D491 C3 9C D4             jp          SkipSmallAngle                      ; LL65  \ hop over small xangle
1288+ D494              DoSmallAngle:                                           ; small x angle
1289+ D494              LL69:
1290+ D494              ; TODO check if we need to retain BC as this trashes it
1291+ D494              ;Input: BC = Dividend, DE = Divisor, HL = 0
1292+ D494              ;Output: BC = Quotient, HL = Remainder
1293+ D494 47                   ld      b,a
1294+ D495 CD 74 B1             call    DIV16UNDOC
1295+ D498 79                   ld      a,c
1296+ D499 32 E0 9D             ld      (varR),a
1297+ D49C               ;;;       call        RequAmul256divQ                     ; LL28  \ BFRDIV R=A*256/Q byte for remainder of division
1298+ D49C              SkipSmallAngle:
1299+ D49C              ScaleX:
1300+ D49C              LL65:                                                   ; both continue for scaling based on z
1301+ D49C 3A 90 C0             ld          a,(UbnkXPointSign)                  ; XX15+2 \ sign of X dist
1302+ D49F                      JumpOnBitSet a,7,NegativeXPoint                 ; LL62 up, -ve Xdist, RU screen onto XX3 heap
1302+ D49F CB 7F       >                        bit 	7,a
1302+ D4A1 C2 B4 D4    >                        jp      nz,NegativeXPoint
1303+ D4A4              ; ......................................................
1304+ D4A4              PositiveXPoint:
1305+ D4A4 3A E0 9D             ld          a,(varR)
1306+ D4A7 6F                   ld          l,a
1307+ D4A8 3A DE 9D             ld          a,(varU)
1308+ D4AB 67                   ld          h,a
1309+ D4AC 3E 80                ld          a,ScreenCenterX
1310+ D4AE ED 31                add         hl,a
1311+ D4B0 EB                   ex          de,hl
1312+ D4B1 C3 C4 D4             jp          StoreXPoint
1313+ D4B4              NegativeXPoint:
1314+ D4B4              LL62:                                                   ; Arrive from LL65 just below, screen for -ve RU onto XX3 heap, index X=CNT ;;;
1315+ D4B4 3A E0 9D             ld          a,(varR)
1316+ D4B7 6F                   ld          l,a
1317+ D4B8 3A DE 9D             ld          a,(varU)
1318+ D4BB 67                   ld          h,a
1319+ D4BC 0E 80                ld          c,ScreenCenterX
1320+ D4BE 06 00                ld          b,0
1321+ D4C0                      ClearCarryFlag
1321+ D4C0 B7          >                        or a
1322+ D4C1 ED 42                sbc         hl,bc                               ; hl = RU-ScreenCenterX
1323+ D4C3 EB                   ex          de,hl
1324+ D4C4              StoreXPoint:                                            ; also from LL62, XX3 node heap has xscreen node so far.
1325+ D4C4 FD 73 00             ld          (iy+0),e                            ; Update X Point
1326+ D4C7 FD 72 01             ld          (iy+1),d                            ; Update X Point
1327+ D4CA FD 23                inc         iy
1328+ D4CC FD 23                inc         iy
1329+ D4CE              ; ......................................................
1330+ D4CE              LL66:
1331+ D4CE              ProcessYPoint:
1332+ D4CE AF                   xor         a                                   ; y hi = 0
1333+ D4CF 32 DE 9D             ld          (varU),a                            ; U
1334+ D4D2                      ldCopyByte  varT,varQ                           ; Q \ zdist lo
1334+ D4D2 3A FB 9D    >                        ld       a,(varT)
1334+ D4D5 32 DF 9D    >                        ld       (varQ),a
1335+ D4D8 3A 91 C0             ld          a,(UbnkYPointLo)                    ; XX15+3 \ rolled y low
1336+ D4DB 21 DF 9D             ld          hl,varQ
1337+ D4DE BE                   cp          (hl)                                ; Q
1338+ D4DF                      JumpIfALTusng SmallYHop                         ; if ydist < zdist hop to small yangle
1338+ D4DF DA E8 D4    >                        jp		c,SmallYHop
1339+ D4E2              SmallYPoint:
1340+ D4E2 CD A3 B7             call        RequAdivQ                           ; LL61  \ else visit up R = A/Q = y/z
1341+ D4E5 C3 EB D4             jp          SkipYScale                          ; LL68 hop over small y yangle
1342+ D4E8              SmallYHop:
1343+ D4E8              LL67:                                                   ; Arrive from LL66 above if XX15+3 < Q \ small yangle
1344+ D4E8 CD 80 B7             call        RequAmul256divQ                     ; LL28  \ BFRDIV R=A*256/Q byte for remainder of division
1345+ D4EB              SkipYScale:
1346+ D4EB              LL68:                                                   ; both carry on, also arrive from LL66, yscaled based on z
1347+ D4EB 3A 93 C0             ld          a,(UbnkYPointSign)                  ; XX15+5 \ sign of X dist
1348+ D4EE CB 7F                bit         7,a
1349+ D4F0 C2 03 D5             jp          nz,NegativeYPoint                   ; LL62 up, -ve Xdist, RU screen onto XX3 heap
1350+ D4F3              PositiveYPoint:
1351+ D4F3 3A E0 9D             ld          a,(varR)
1352+ D4F6 6F                   ld          l,a
1353+ D4F7 3A DE 9D             ld          a,(varU)
1354+ D4FA 67                   ld          h,a
1355+ D4FB 3E 60                ld          a,ScreenHeightHalf
1356+ D4FD ED 31                add         hl,a
1357+ D4FF EB                   ex          de,hl
1358+ D500 C3 13 D5             jp          LL50
1359+ D503              NegativeYPoint:
1360+ D503              LL70:                                                   ; Arrive from LL65 just below, screen for -ve RU onto XX3 heap, index X=CNT ;;;
1361+ D503 3A E0 9D             ld          a,(varR)
1362+ D506 6F                   ld          l,a
1363+ D507 3A DE 9D             ld          a,(varU)
1364+ D50A 67                   ld          h,a
1365+ D50B 0E 60                ld          c,ScreenHeightHalf
1366+ D50D 06 00                ld          b,0
1367+ D50F                      ClearCarryFlag
1367+ D50F B7          >                        or a
1368+ D510 ED 42                sbc         hl,bc                               ; hl = RU-ScreenCenterX
1369+ D512 EB                   ex          de,hl
1370+ D513              LL50:                                                   ; also from LL62, XX3 node heap has xscreen node so far.
1371+ D513 FD 73 00             ld          (iy+0),e                            ; Update X Point
1372+ D516 FD 72 01             ld          (iy+1),d                            ; Update X Point
1373+ D519 FD 23                inc         iy
1374+ D51B FD 23                inc         iy
1375+ D51D C9                   ret
1376+ D51E              ;--------------------------------------------------------------------------------------------------------
1377+ D51E              ;;;     Byte 0 = X magnitide with origin at middle of ship
1378+ D51E              ;;;     Byte 1 = Y magnitide with origin at middle of ship
1379+ D51E              ;;;     Byte 2 = Z magnitide with origin at middle of ship
1380+ D51E              ;;;     Byte 3 = Sign Bits of Vertex 7=X 6=Y 5 = Z 4 - 0 = visibility beyond which vertix is not shown
1381+ D51E              CopyNodeToXX15:
1382+ D51E                      ldCopyByte  hl, UBnkXScaled                     ; Load into XX15                                                                     Byte 0;;;     XX15 xlo   = byte 0
1382+ D51E 7E          >                        ld       a,(hl)
1382+ D51F 32 8E C0    >                        ld       (UBnkXScaled),a
1383+ D522 23                   inc         hl
1384+ D523                      ldCopyByte  hl, UBnkYScaled                     ; Load into XX15                                                                     Byte 0;;;     XX15 xlo   = byte 0
1384+ D523 7E          >                        ld       a,(hl)
1384+ D524 32 90 C0    >                        ld       (UBnkYScaled),a
1385+ D527 23                   inc         hl
1386+ D528                      ldCopyByte  hl, UBnkZScaled                     ; Load into XX15                                                                     Byte 0;;;     XX15 xlo   = byte 0
1386+ D528 7E          >                        ld       a,(hl)
1386+ D529 32 92 C0    >                        ld       (UBnkZScaled),a
1387+ D52C 23                   inc         hl
1388+ D52D              PopulateXX15SignBits:
1389+ D52D              ; Simplfied for debugging, needs optimising back to original DEBUG TODO
1390+ D52D 7E                   ld          a,(hl)
1391+ D52E 4F                   ld          c,a                                 ; copy sign and visibility to c
1392+ D52F 47                   ld          b,a
1393+ D530 E6 80                and         $80                                 ; keep high 3 bits
1394+ D532 32 8F C0             ld          (UBnkXScaledSign),a                 ; Copy Sign Bits                                                            ;;;
1395+ D535 78                   ld          a,b
1396+ D536 E6 40                and         $40
1397+ D538 CB 27                sla         a                                   ; Copy Sign Bits                                                            ;;;
1398+ D53A 32 91 C0             ld          (UBnkYScaledSign),a                 ; Copy Sign Bits                                                            ;;;
1399+ D53D 78                   ld          a,b
1400+ D53E E6 20                and         $20
1401+ D540 CB 27                sla         a                                   ; Copy Sign Bits                                                            ;;;
1402+ D542 CB 27                sla         a                                   ; Copy Sign Bits                                                            ;;;
1403+ D544 32 93 C0             ld          (UBnkZScaledSign),a                 ; Copy Sign Bits                                                            ;;;
1404+ D547 79                   ld          a,c                                 ; returns a with visibility sign byte
1405+ D548 E6 1F                and         $1F                                 ; visibility is held in bits 0 to 4                                                              ;;;     A = XX15 Signs AND &1F (to get lower 5 visibility)
1406+ D54A 32 FB 9D             ld          (varT),a                            ; and store in varT as its needed later
1407+ D54D C9                   ret
1408+ D54E
1409+ D54E              ;;;     Byte 4 = High 4 bits Face 2 Index Low 4 bits = Face 1 Index
1410+ D54E              ;;;     Byte 5 = High 4 bits Face 4 Index Low 4 bits = Face 3 Index
1411+ D54E              ;..............................................................................................................................
1412+ D54E              ProcessANode:                                           ; Start loop on Nodes for visibility, each node has 4 faces associated with ;;; For each node (point) in model                  ::LL48
1413+ D54E              LL48GetScale:
1414+ D54E 3A CE 9C             ld          a,(LastNormalVisible)               ; get Normal visible range into e before we copy node
1415+ D551 5F                   ld          e,a
1416+ D552 CD 1E D5             call        CopyNodeToXX15
1417+ D555              LL48GetVertices:
1418+ D555              LL48GetVertSignAndVisDist:
1419+ D555                      JumpIfALTNusng e,NodeIsNotVisible               ; if XX4 > Visibility distance then vertext too far away , next vertex.                                             ;;;        goto LL50 (end of loop)
1419+ D555 BB          >                        cp      e
1419+ D556 DA 93 D5    >                        jp		c, NodeIsNotVisible
1420+ D559              CheckFace1:                                                                                                                         ;;;     if all FaceVisile[point face any of idx1,2,3 or 4] = 0
1421+ D559                      CopyByteAtNextHL varP                           ; vertex byte#4, first 2 faces two 4-bit indices 0:15 into XX2 for 2 of the ;;;     get point face idx from byte 4 & 5 of normal
1421+ D559 23          >                    inc         hl                                  ; vertex byte#1
1421+ D55A 7E          >                    ld          a,(hl)                              ;
1421+ D55B 32 DD 9C    >                    ld          (varP),a                     ; SunXX15+2 = (V),Y
1422+ D55E 57                   ld          d,a                                 ; use d to hold a as a temp                                                 ;;;
1423+ D55F E6 0F                and         $0F                                 ; face 1                                                                    ;;;
1424+ D561 E5                   push        hl                                  ; we need to save HL                                                        ;;;
1425+ D562                      ldHLIdxAToA UbnkFaceVisArray                    ; visibility at face 1                                                Byte 4;;;
1425+ D562 21 BA C0    >                    ld          hl,UbnkFaceVisArray
1425+ D565 ED 31       >                    add         hl,a
1425+ D567 7E          >                    ld          a,(hl)
1426+ D568 E1                   pop         hl                                  ;                                                                           ;;;
1427+ D569                      JumpIfAIsNotZero NodeIsVisible                  ; is face 1 visible                                                         ;;;
1427+ D569 A7          >                        and     a
1427+ D56A C2 99 D5    >                        jp	    nz,NodeIsVisible
1428+ D56D              CheckFace2:                                                                                                                         ;;;
1429+ D56D 7A                   ld          a,d                                                                                                             ;;;
1430+ D56E ED 23                swapnib                                                                                                                     ;;;
1431+ D570 E6 0F                and         $0F                                 ; this is face 2                                                            ;;;
1432+ D572                      JumpIfAIsNotZero NodeIsVisible                  ; is face 1 visible                                                         ;;;
1432+ D572 A7          >                        and     a
1432+ D573 C2 99 D5    >                        jp	    nz,NodeIsVisible
1433+ D576              CheckFace3:                                                                                                                         ;;;
1434+ D576                      CopyByteAtNextHL varP                           ; vertex byte#4, first 2 faces two 4-bit indices 0:15 into XX2 for 2 of the ;;;
1434+ D576 23          >                    inc         hl                                  ; vertex byte#1
1434+ D577 7E          >                    ld          a,(hl)                              ;
1434+ D578 32 DD 9C    >                    ld          (varP),a                     ; SunXX15+2 = (V),Y
1435+ D57B 57                   ld          d,a                                 ; use d to hold a as a temp                                                 ;;;
1436+ D57C E6 0F                and         $0F                                 ; face 1                                                                    ;;;
1437+ D57E E5                   push        hl                                  ; we need to save HL                                                        ;;;
1438+ D57F                      ldHLIdxAToA UbnkFaceVisArray                  ; visibility at face 1                                                Byte 5;;;
1438+ D57F 21 BA C0    >                    ld          hl,UbnkFaceVisArray
1438+ D582 ED 31       >                    add         hl,a
1438+ D584 7E          >                    ld          a,(hl)
1439+ D585 E1                   pop         hl                                  ;                                                                           ;;;
1440+ D586                      JumpIfAIsNotZero NodeIsVisible                  ; is face 1 visible                                                         ;;;
1440+ D586 A7          >                        and     a
1440+ D587 C2 99 D5    >                        jp	    nz,NodeIsVisible
1441+ D58A              CheckFace4:                                                                                                                         ;;;
1442+ D58A 7A                   ld          a,d                                                                                                             ;;;
1443+ D58B ED 23                swapnib                                                                                                                     ;;;
1444+ D58D E6 0F                and         $0F                                 ; this is face 2                                                            ;;;
1445+ D58F                      JumpIfAIsNotZero NodeIsVisible                  ; is face 1 visible                                                         ;;;
1445+ D58F A7          >                        and     a
1445+ D590 C2 99 D5    >                        jp	    nz,NodeIsVisible
1446+ D593              NodeIsNotVisible:                                                                                                                   ;;;
1447+ D593 01 04 00             ld          bc,4
1448+ D596 FD 09                add         iy,bc                               ; if not visible then move to next element in array anyway                  ;;;
1449+ D598                      ;;; Should we be loading FFFFFFFF into 4 bytes or just ignore?
1450+ D598 C9                   ret                                                                                                      ;;;        goto LL50 (end of loop)
1451+ D599              NodeIsVisible:
1452+ D599              LL49:
1453+ D599 CD 40 D4             call        ProcessVisibleNode                  ; Process node to determine if it goes on heap
1454+ D59C C9                   ret
1455+ D59D
1456+ D59D
1457+ D59D              ProjectNodeToEye:
1458+ D59D ED 4B 92 C0  	ld			bc,(UBnkZScaled)					; BC = Z Cordinate. By here it MUST be positive as its clamped to 4 min
1459+ D5A1 79           	ld			a,c                                 ;  so no need for a negative check
1460+ D5A2 32 DF 9D     	ld			(varQ),a		                    ; VarQ = z
1461+ D5A5 3A 8E C0         ld          a,(UBnkXScaled)                     ; XX15	\ rolled x lo which is signed
1462+ D5A8 CD 5D B1     	call		DIV16Amul256dCUNDOC					; result in BC which is 16 bit TODO Move to 16 bit below not just C reg
1463+ D5AB 3A 8F C0         ld          a,(UBnkXScaledSign)                 ; XX15+2 \ sign of X dist
1464+ D5AE                  JumpOnBitSet a,7,EyeNegativeXPoint             ; LL62 up, -ve Xdist, RU screen onto XX3 heap
1464+ D5AE CB 7F       >                        bit 	7,a
1464+ D5B0 C2 BB D5    >                        jp      nz,EyeNegativeXPoint
1465+ D5B3              EyePositiveXPoint:									; x was positive result
1466+ D5B3 2E 80            ld          l,ScreenCenterX						;
1467+ D5B5 26 00            ld          h,0
1468+ D5B7 09               add         hl,bc								; hl = Screen Centre + X
1469+ D5B8 C3 C2 D5         jp          EyeStoreXPoint
1470+ D5BB              EyeNegativeXPoint:                                 ; x < 0 so need to subtract from the screen centre position
1471+ D5BB 2E 80            ld          l,ScreenCenterX
1472+ D5BD 26 00            ld          h,0
1473+ D5BF                  ClearCarryFlag
1473+ D5BF B7          >                        or a
1474+ D5C0 ED 42            sbc         hl,bc                               ; hl = Screen Centre - X
1475+ D5C2              EyeStoreXPoint:                                    ; also from LL62, XX3 node heap has xscreen node so far.
1476+ D5C2 EB               ex          de,hl
1477+ D5C3 FD 73 00         ld          (iy+0),e                            ; Update X Point TODO this bit is 16 bit aware just need to fix above bit
1478+ D5C6 FD 72 01         ld          (iy+1),d                            ; Update X Point
1479+ D5C9              EyeProcessYPoint:
1480+ D5C9 ED 4B 92 C0  	ld			bc,(UBnkZScaled)					; Now process Y co-ordinate
1481+ D5CD 79           	ld			a,c
1482+ D5CE 32 DF 9D     	ld			(varQ),a
1483+ D5D1 3A 90 C0         ld          a,(UBnkYScaled)                     ; XX15	\ rolled x lo
1484+ D5D4 CD 5D B1     	call		DIV16Amul256dCUNDOC	                ; a = Y scaled * 256 / zscaled
1485+ D5D7 3A 91 C0         ld          a,(UBnkYScaledSign)                 ; XX15+2 \ sign of X dist
1486+ D5DA                  JumpOnBitSet a,7,EyeNegativeYPoint             ; LL62 up, -ve Xdist, RU screen onto XX3 heap top of screen is Y = 0
1486+ D5DA CB 7F       >                        bit 	7,a
1486+ D5DC C2 E7 D5    >                        jp      nz,EyeNegativeYPoint
1487+ D5DF              EyePositiveYPoint:									; Y is positive so above the centre line
1488+ D5DF 2E 60            ld          l,ScreenCenterY
1489+ D5E1                  ClearCarryFlag
1489+ D5E1 B7          >                        or a
1490+ D5E2 ED 42            sbc         hl,bc  							 	; hl = ScreenCentreY - Y coord (as screen is 0 at top)
1491+ D5E4 C3 EC D5         jp          EyeStoreYPoint
1492+ D5E7              EyeNegativeYPoint:									; this bit is only 8 bit aware TODO FIX
1493+ D5E7 2E 60            ld          l,ScreenCenterY
1494+ D5E9 26 00            ld          h,0
1495+ D5EB 09               add         hl,bc								; hl = ScreenCenterY + Y as negative is below the center of screen
1496+ D5EC              EyeStoreYPoint:                                    ; also from LL62, XX3 node heap has xscreen node so far.
1497+ D5EC EB               ex          de,hl
1498+ D5ED FD 73 02         ld          (iy+2),e                            ; Update Y Point
1499+ D5F0 FD 72 03         ld          (iy+3),d                            ; Update Y Point
1500+ D5F3 C9               ret
1501+ D5F4
1502+ D5F4
1503+ D5F4
1504+ D5F4              ; Pitch and roll are 2 phases
1505+ D5F4              ; 1 - we apply our pitch and roll to the ship position
1506+ D5F4              ;       x -> x + alpha * (y - alpha * x)
1507+ D5F4              ;       y -> y - alpha * x - beta * z
1508+ D5F4              ;       z -> z + beta * (y - alpha * x - beta * z)
1509+ D5F4              ; which can be simplified as:
1510+ D5F4              ;       1. K2 = y - alpha * x
1511+ D5F4              ;       2. z = z + beta * K2
1512+ D5F4              ;       3. y = K2 - beta * z
1513+ D5F4              ;       4. x = x + alpha * y
1514+ D5F4              ; 2 - we apply our patch and roll to the ship orientation
1515+ D5F4              ;      Roll calculations:
1516+ D5F4              ;
1517+ D5F4              ;        nosev_y = nosev_y - alpha * nosev_x_hi
1518+ D5F4              ;        nosev_x = nosev_x + alpha * nosev_y_hi
1519+ D5F4              ;      Pitch calculations:
1520+ D5F4              ;
1521+ D5F4              ;        nosev_y = nosev_y - beta * nosev_z_hi
1522+ D5F4              ;        nosev_z = nosev_z + beta * nosev_y_hi
1523+ D5F4
1524+ D5F4
1525+ D5F4              ; ---------------------------------------------------------------------------------------------------------------------------------
1526+ D5F4                          INCLUDE "./Universe/Ships/ApplyMyRollAndPitch.asm"
# file opened: ././Universe/Ships/ApplyMyRollAndPitch.asm
   1++D5F4
   2++D5F4              ; Full version
   3++D5F4              ; 1. K2 = y - alpha * x
   4++D5F4              ; 2. z = z + beta * K2
   5++D5F4              ; 3. y = K2 - beta * z
   6++D5F4              ; 4. x = x + alpha * y
   7++D5F4
   8++D5F4
   9++D5F4              ApplyMyRollToNosev:     ApplyMyRollToVector ALPHA, UBnkrotmatNosevX, UBnkrotmatNosevY
   9++D5F4             >                        ldCopyByte ALPHA,varQ               ; Set Q = a = alpha (the roll angle to rotate through)
   9++D5F4 3A F5 9C    >                        ld       a,(ALPHA)
   9++D5F7 32 DF 9D    >                        ld       (varQ),a
   9++D5FA             >                        ldCopy2Byte UBnkrotmatNosevY, varR           ; RS =  nosev_y
   9++D5FA 2A 23 C0    >                        ld       hl,(UBnkrotmatNosevY)
   9++D5FD 22 E0 9D    >                        ld       (varR),hl
   9++D600             >                        ldCopyByte  UBnkrotmatNosevX, varP           ; set P to nosevX lo (may be redundant)
   9++D600 3A 21 C0    >                        ld       a,(UBnkrotmatNosevX)
   9++D603 32 DD 9C    >                        ld       (varP),a
   9++D606 3A 22 C0    >                        ld a,(UBnkrotmatNosevX+1)                    ; Set A = -nosev_x_hi
   9++D609 EE 80       >                        xor $80                             ;
   9++D60B CD B9 AE    >                        call  madXAequQmulAaddRS            ; Set (A X) = Q * A + (S R) = = alpha * -nosev_x_hi + nosev_y
   9++D60E ED 53 23 C0 >                        ld  (UBnkrotmatNosevY),de                    ; nosev_y = nosev_y - alpha * nosev_x_hi
   9++D612             >                        ldCopy2Byte UBnkrotmatNosevX, varR           ; Set (S R) = nosev_x
   9++D612 2A 21 C0    >                        ld       hl,(UBnkrotmatNosevX)
   9++D615 22 E0 9D    >                        ld       (varR),hl
   9++D618 3A 24 C0    >                        ld  a,(UBnkrotmatNosevY+1)                   ;  Set A = nosev_y_hi
   9++D61B CD B9 AE    >                        call madXAequQmulAaddRS             ; Set (A X) = Q * A + (S R)
   9++D61E ED 53 21 C0 >                        ld  (UBnkrotmatNosevX),de                    ; nosev_x = nosev_x + alpha * nosev_y_hi
  10++D622 C9                                   ret
  11++D623              ApplyMyRollToSidev:     ApplyMyRollToVector ALPHA, UBnkrotmatSidevX, UBnkrotmatSidevY
  11++D623             >                        ldCopyByte ALPHA,varQ               ; Set Q = a = alpha (the roll angle to rotate through)
  11++D623 3A F5 9C    >                        ld       a,(ALPHA)
  11++D626 32 DF 9D    >                        ld       (varQ),a
  11++D629             >                        ldCopy2Byte UBnkrotmatSidevY, varR           ; RS =  nosev_y
  11++D629 2A 17 C0    >                        ld       hl,(UBnkrotmatSidevY)
  11++D62C 22 E0 9D    >                        ld       (varR),hl
  11++D62F             >                        ldCopyByte  UBnkrotmatSidevX, varP           ; set P to nosevX lo (may be redundant)
  11++D62F 3A 15 C0    >                        ld       a,(UBnkrotmatSidevX)
  11++D632 32 DD 9C    >                        ld       (varP),a
  11++D635 3A 16 C0    >                        ld a,(UBnkrotmatSidevX+1)                    ; Set A = -nosev_x_hi
  11++D638 EE 80       >                        xor $80                             ;
  11++D63A CD B9 AE    >                        call  madXAequQmulAaddRS            ; Set (A X) = Q * A + (S R) = = alpha * -nosev_x_hi + nosev_y
  11++D63D ED 53 17 C0 >                        ld  (UBnkrotmatSidevY),de                    ; nosev_y = nosev_y - alpha * nosev_x_hi
  11++D641             >                        ldCopy2Byte UBnkrotmatSidevX, varR           ; Set (S R) = nosev_x
  11++D641 2A 15 C0    >                        ld       hl,(UBnkrotmatSidevX)
  11++D644 22 E0 9D    >                        ld       (varR),hl
  11++D647 3A 18 C0    >                        ld  a,(UBnkrotmatSidevY+1)                   ;  Set A = nosev_y_hi
  11++D64A CD B9 AE    >                        call madXAequQmulAaddRS             ; Set (A X) = Q * A + (S R)
  11++D64D ED 53 15 C0 >                        ld  (UBnkrotmatSidevX),de                    ; nosev_x = nosev_x + alpha * nosev_y_hi
  12++D651 C9                                   ret
  13++D652              ApplyMyRollToRoofv:     ApplyMyRollToVector ALPHA, UBnkrotmatRoofvX, UBnkrotmatRoofvY
  13++D652             >                        ldCopyByte ALPHA,varQ               ; Set Q = a = alpha (the roll angle to rotate through)
  13++D652 3A F5 9C    >                        ld       a,(ALPHA)
  13++D655 32 DF 9D    >                        ld       (varQ),a
  13++D658             >                        ldCopy2Byte UBnkrotmatRoofvY, varR           ; RS =  nosev_y
  13++D658 2A 1D C0    >                        ld       hl,(UBnkrotmatRoofvY)
  13++D65B 22 E0 9D    >                        ld       (varR),hl
  13++D65E             >                        ldCopyByte  UBnkrotmatRoofvX, varP           ; set P to nosevX lo (may be redundant)
  13++D65E 3A 1B C0    >                        ld       a,(UBnkrotmatRoofvX)
  13++D661 32 DD 9C    >                        ld       (varP),a
  13++D664 3A 1C C0    >                        ld a,(UBnkrotmatRoofvX+1)                    ; Set A = -nosev_x_hi
  13++D667 EE 80       >                        xor $80                             ;
  13++D669 CD B9 AE    >                        call  madXAequQmulAaddRS            ; Set (A X) = Q * A + (S R) = = alpha * -nosev_x_hi + nosev_y
  13++D66C ED 53 1D C0 >                        ld  (UBnkrotmatRoofvY),de                    ; nosev_y = nosev_y - alpha * nosev_x_hi
  13++D670             >                        ldCopy2Byte UBnkrotmatRoofvX, varR           ; Set (S R) = nosev_x
  13++D670 2A 1B C0    >                        ld       hl,(UBnkrotmatRoofvX)
  13++D673 22 E0 9D    >                        ld       (varR),hl
  13++D676 3A 1E C0    >                        ld  a,(UBnkrotmatRoofvY+1)                   ;  Set A = nosev_y_hi
  13++D679 CD B9 AE    >                        call madXAequQmulAaddRS             ; Set (A X) = Q * A + (S R)
  13++D67C ED 53 1B C0 >                        ld  (UBnkrotmatRoofvX),de                    ; nosev_x = nosev_x + alpha * nosev_y_hi
  14++D680 C9                                   ret
  15++D681
  16++D681              ApplyMyPitchToNosev:    ApplyMyRollToVector BETA, UBnkrotmatNosevZ, UBnkrotmatNosevY
  16++D681             >                        ldCopyByte BETA,varQ               ; Set Q = a = alpha (the roll angle to rotate through)
  16++D681 3A E8 9C    >                        ld       a,(BETA)
  16++D684 32 DF 9D    >                        ld       (varQ),a
  16++D687             >                        ldCopy2Byte UBnkrotmatNosevY, varR           ; RS =  nosev_y
  16++D687 2A 23 C0    >                        ld       hl,(UBnkrotmatNosevY)
  16++D68A 22 E0 9D    >                        ld       (varR),hl
  16++D68D             >                        ldCopyByte  UBnkrotmatNosevZ, varP           ; set P to nosevX lo (may be redundant)
  16++D68D 3A 25 C0    >                        ld       a,(UBnkrotmatNosevZ)
  16++D690 32 DD 9C    >                        ld       (varP),a
  16++D693 3A 26 C0    >                        ld a,(UBnkrotmatNosevZ+1)                    ; Set A = -nosev_x_hi
  16++D696 EE 80       >                        xor $80                             ;
  16++D698 CD B9 AE    >                        call  madXAequQmulAaddRS            ; Set (A X) = Q * A + (S R) = = alpha * -nosev_x_hi + nosev_y
  16++D69B ED 53 23 C0 >                        ld  (UBnkrotmatNosevY),de                    ; nosev_y = nosev_y - alpha * nosev_x_hi
  16++D69F             >                        ldCopy2Byte UBnkrotmatNosevZ, varR           ; Set (S R) = nosev_x
  16++D69F 2A 25 C0    >                        ld       hl,(UBnkrotmatNosevZ)
  16++D6A2 22 E0 9D    >                        ld       (varR),hl
  16++D6A5 3A 24 C0    >                        ld  a,(UBnkrotmatNosevY+1)                   ;  Set A = nosev_y_hi
  16++D6A8 CD B9 AE    >                        call madXAequQmulAaddRS             ; Set (A X) = Q * A + (S R)
  16++D6AB ED 53 25 C0 >                        ld  (UBnkrotmatNosevZ),de                    ; nosev_x = nosev_x + alpha * nosev_y_hi
  17++D6AF C9                                   ret
  18++D6B0              ApplyMyPitchToSidev:    ApplyMyRollToVector BETA, UBnkrotmatSidevZ, UBnkrotmatSidevY
  18++D6B0             >                        ldCopyByte BETA,varQ               ; Set Q = a = alpha (the roll angle to rotate through)
  18++D6B0 3A E8 9C    >                        ld       a,(BETA)
  18++D6B3 32 DF 9D    >                        ld       (varQ),a
  18++D6B6             >                        ldCopy2Byte UBnkrotmatSidevY, varR           ; RS =  nosev_y
  18++D6B6 2A 17 C0    >                        ld       hl,(UBnkrotmatSidevY)
  18++D6B9 22 E0 9D    >                        ld       (varR),hl
  18++D6BC             >                        ldCopyByte  UBnkrotmatSidevZ, varP           ; set P to nosevX lo (may be redundant)
  18++D6BC 3A 19 C0    >                        ld       a,(UBnkrotmatSidevZ)
  18++D6BF 32 DD 9C    >                        ld       (varP),a
  18++D6C2 3A 1A C0    >                        ld a,(UBnkrotmatSidevZ+1)                    ; Set A = -nosev_x_hi
  18++D6C5 EE 80       >                        xor $80                             ;
  18++D6C7 CD B9 AE    >                        call  madXAequQmulAaddRS            ; Set (A X) = Q * A + (S R) = = alpha * -nosev_x_hi + nosev_y
  18++D6CA ED 53 17 C0 >                        ld  (UBnkrotmatSidevY),de                    ; nosev_y = nosev_y - alpha * nosev_x_hi
  18++D6CE             >                        ldCopy2Byte UBnkrotmatSidevZ, varR           ; Set (S R) = nosev_x
  18++D6CE 2A 19 C0    >                        ld       hl,(UBnkrotmatSidevZ)
  18++D6D1 22 E0 9D    >                        ld       (varR),hl
  18++D6D4 3A 18 C0    >                        ld  a,(UBnkrotmatSidevY+1)                   ;  Set A = nosev_y_hi
  18++D6D7 CD B9 AE    >                        call madXAequQmulAaddRS             ; Set (A X) = Q * A + (S R)
  18++D6DA ED 53 19 C0 >                        ld  (UBnkrotmatSidevZ),de                    ; nosev_x = nosev_x + alpha * nosev_y_hi
  19++D6DE C9                                   ret
  20++D6DF              ApplyMyPitchToRoofv:    ApplyMyRollToVector BETA, UBnkrotmatRoofvZ, UBnkrotmatRoofvY
  20++D6DF             >                        ldCopyByte BETA,varQ               ; Set Q = a = alpha (the roll angle to rotate through)
  20++D6DF 3A E8 9C    >                        ld       a,(BETA)
  20++D6E2 32 DF 9D    >                        ld       (varQ),a
  20++D6E5             >                        ldCopy2Byte UBnkrotmatRoofvY, varR           ; RS =  nosev_y
  20++D6E5 2A 1D C0    >                        ld       hl,(UBnkrotmatRoofvY)
  20++D6E8 22 E0 9D    >                        ld       (varR),hl
  20++D6EB             >                        ldCopyByte  UBnkrotmatRoofvZ, varP           ; set P to nosevX lo (may be redundant)
  20++D6EB 3A 1F C0    >                        ld       a,(UBnkrotmatRoofvZ)
  20++D6EE 32 DD 9C    >                        ld       (varP),a
  20++D6F1 3A 20 C0    >                        ld a,(UBnkrotmatRoofvZ+1)                    ; Set A = -nosev_x_hi
  20++D6F4 EE 80       >                        xor $80                             ;
  20++D6F6 CD B9 AE    >                        call  madXAequQmulAaddRS            ; Set (A X) = Q * A + (S R) = = alpha * -nosev_x_hi + nosev_y
  20++D6F9 ED 53 1D C0 >                        ld  (UBnkrotmatRoofvY),de                    ; nosev_y = nosev_y - alpha * nosev_x_hi
  20++D6FD             >                        ldCopy2Byte UBnkrotmatRoofvZ, varR           ; Set (S R) = nosev_x
  20++D6FD 2A 1F C0    >                        ld       hl,(UBnkrotmatRoofvZ)
  20++D700 22 E0 9D    >                        ld       (varR),hl
  20++D703 3A 1E C0    >                        ld  a,(UBnkrotmatRoofvY+1)                   ;  Set A = nosev_y_hi
  20++D706 CD B9 AE    >                        call madXAequQmulAaddRS             ; Set (A X) = Q * A + (S R)
  20++D709 ED 53 1F C0 >                        ld  (UBnkrotmatRoofvZ),de                    ; nosev_x = nosev_x + alpha * nosev_y_hi
  21++D70D C9                                   ret
  22++D70E
  23++D70E
  24++D70E              APPequPosPlusAPP:       MACRO    Position, PositionSign
  25++D70E ~                                    push    bc
  26++D70E ~                                    ld      c,a                         ; save original value of a into c
  27++D70E ~                                    ld      a,(PositionSign)
  28++D70E ~                                    ld      b,a
  29++D70E ~                                    ld      a,c
  30++D70E ~                                    xor     b                           ; a = a xor x postition sign
  31++D70E ~                                    jp      m,.MV50                     ; if the sign is negative then A and X are both opposite signs
  32++D70E ~            ; Signs are the same to we just add and take which ever sign
  33++D70E ~                                    ld      de,(varPp1)                  ; Note we take p+2,p+1 we we did a previous 24 bit mulitple
  34++D70E ~                                    ld      hl,(Position)
  35++D70E ~                                    add     hl,de
  36++D70E ~                                    ld      (varPp1),hl                  ; now we have P1 and p2 with lo hi and
  37++D70E ~                                    ld      a,c                         ; and a = original sign as they were both the same
  38++D70E ~                                    pop     bc
  39++D70E ~                                    ret
  40++D70E ~            ; Signs are opposite so we subtract
  41++D70E ~            .MV50:                  ld      de,(varPp1)
  42++D70E ~                                    ld      hl,(Position)
  43++D70E ~                                    or      a
  44++D70E ~                                    sbc     hl,de
  45++D70E ~                                    jr      c,.MV51                     ; if the result was negative then negate result
  46++D70E ~                                    ld      a,c                         ; get back the original sign
  47++D70E ~                                    ld      (varPp1),hl                 ; and save result to P[2][1]
  48++D70E ~                                    xor     SignOnly8Bit                ; flip sign and exit A = flip of a
  49++D70E ~                                    pop     bc
  50++D70E ~                                    ret
  51++D70E ~            .MV51:                  NegHL
  52++D70E ~                                    ld      (varPp1),hl
  53++D70E ~                                    ld      a,c                         ; the original sign will still be good
  54++D70E ~                                    pop     bc
  55++D70E ~                                    ret
  56++D70E                                      ENDM
  57++D70E
  58++D70E
  59++D70E              APPequXPosPlusAPP:     APPequPosPlusAPP UBnKxlo, UBnKxsgn
  59++D70E C5          >                        push    bc
  59++D70F 4F          >                        ld      c,a                         ; save original value of a into c
  59++D710 3A 0E C0    >                        ld      a,(UBnKxsgn)
  59++D713 47          >                        ld      b,a
  59++D714 79          >                        ld      a,c
  59++D715 A8          >                        xor     b                           ; a = a xor x postition sign
  59++D716 FA 27 D7    >                        jp      m,.MV50                     ; if the sign is negative then A and X are both opposite signs
  59++D719             >; Signs are the same to we just add and take which ever sign
  59++D719 ED 5B DE 9C >                        ld      de,(varPp1)                  ; Note we take p+2,p+1 we we did a previous 24 bit mulitple
  59++D71D 2A 0C C0    >                        ld      hl,(UBnKxlo)
  59++D720 19          >                        add     hl,de
  59++D721 22 DE 9C    >                        ld      (varPp1),hl                  ; now we have P1 and p2 with lo hi and
  59++D724 79          >                        ld      a,c                         ; and a = original sign as they were both the same
  59++D725 C1          >                        pop     bc
  59++D726 C9          >                        ret
  59++D727             >; Signs are opposite so we subtract
  59++D727 ED 5B DE 9C >.MV50:                  ld      de,(varPp1)
  59++D72B 2A 0C C0    >                        ld      hl,(UBnKxlo)
  59++D72E B7          >                        or      a
  59++D72F ED 52       >                        sbc     hl,de
  59++D731 38 08       >                        jr      c,.MV51                     ; if the result was negative then negate result
  59++D733 79          >                        ld      a,c                         ; get back the original sign
  59++D734 22 DE 9C    >                        ld      (varPp1),hl                 ; and save result to P[2][1]
  59++D737 EE 80       >                        xor     SignOnly8Bit                ; flip sign and exit A = flip of a
  59++D739 C1          >                        pop     bc
  59++D73A C9          >                        ret
  59++D73B             >.MV51:                  NegHL
  59++D73B AF          >                    xor a
  59++D73C 95          >                    sub l
  59++D73D 6F          >                    ld l,a
  59++D73E 9F          >                    sbc a,a
  59++D73F 94          >                    sub h
  59++D740 67          >                    ld h,a
  59++D741 22 DE 9C    >                        ld      (varPp1),hl
  59++D744 79          >                        ld      a,c                         ; the original sign will still be good
  59++D745 C1          >                        pop     bc
  59++D746 C9          >                        ret
  60++D747
  61++D747              APPequYPosPlusAPP:     APPequPosPlusAPP UBnKylo, UBnKysgn
  61++D747 C5          >                        push    bc
  61++D748 4F          >                        ld      c,a                         ; save original value of a into c
  61++D749 3A 11 C0    >                        ld      a,(UBnKysgn)
  61++D74C 47          >                        ld      b,a
  61++D74D 79          >                        ld      a,c
  61++D74E A8          >                        xor     b                           ; a = a xor x postition sign
  61++D74F FA 60 D7    >                        jp      m,.MV50                     ; if the sign is negative then A and X are both opposite signs
  61++D752             >; Signs are the same to we just add and take which ever sign
  61++D752 ED 5B DE 9C >                        ld      de,(varPp1)                  ; Note we take p+2,p+1 we we did a previous 24 bit mulitple
  61++D756 2A 0F C0    >                        ld      hl,(UBnKylo)
  61++D759 19          >                        add     hl,de
  61++D75A 22 DE 9C    >                        ld      (varPp1),hl                  ; now we have P1 and p2 with lo hi and
  61++D75D 79          >                        ld      a,c                         ; and a = original sign as they were both the same
  61++D75E C1          >                        pop     bc
  61++D75F C9          >                        ret
  61++D760             >; Signs are opposite so we subtract
  61++D760 ED 5B DE 9C >.MV50:                  ld      de,(varPp1)
  61++D764 2A 0F C0    >                        ld      hl,(UBnKylo)
  61++D767 B7          >                        or      a
  61++D768 ED 52       >                        sbc     hl,de
  61++D76A 38 08       >                        jr      c,.MV51                     ; if the result was negative then negate result
  61++D76C 79          >                        ld      a,c                         ; get back the original sign
  61++D76D 22 DE 9C    >                        ld      (varPp1),hl                 ; and save result to P[2][1]
  61++D770 EE 80       >                        xor     SignOnly8Bit                ; flip sign and exit A = flip of a
  61++D772 C1          >                        pop     bc
  61++D773 C9          >                        ret
  61++D774             >.MV51:                  NegHL
  61++D774 AF          >                    xor a
  61++D775 95          >                    sub l
  61++D776 6F          >                    ld l,a
  61++D777 9F          >                    sbc a,a
  61++D778 94          >                    sub h
  61++D779 67          >                    ld h,a
  61++D77A 22 DE 9C    >                        ld      (varPp1),hl
  61++D77D 79          >                        ld      a,c                         ; the original sign will still be good
  61++D77E C1          >                        pop     bc
  61++D77F C9          >                        ret
  62++D780
  63++D780              APPequZPosPlusAPP:     APPequPosPlusAPP UBnKzlo, UBnKzsgn
  63++D780 C5          >                        push    bc
  63++D781 4F          >                        ld      c,a                         ; save original value of a into c
  63++D782 3A 14 C0    >                        ld      a,(UBnKzsgn)
  63++D785 47          >                        ld      b,a
  63++D786 79          >                        ld      a,c
  63++D787 A8          >                        xor     b                           ; a = a xor x postition sign
  63++D788 FA 99 D7    >                        jp      m,.MV50                     ; if the sign is negative then A and X are both opposite signs
  63++D78B             >; Signs are the same to we just add and take which ever sign
  63++D78B ED 5B DE 9C >                        ld      de,(varPp1)                  ; Note we take p+2,p+1 we we did a previous 24 bit mulitple
  63++D78F 2A 12 C0    >                        ld      hl,(UBnKzlo)
  63++D792 19          >                        add     hl,de
  63++D793 22 DE 9C    >                        ld      (varPp1),hl                  ; now we have P1 and p2 with lo hi and
  63++D796 79          >                        ld      a,c                         ; and a = original sign as they were both the same
  63++D797 C1          >                        pop     bc
  63++D798 C9          >                        ret
  63++D799             >; Signs are opposite so we subtract
  63++D799 ED 5B DE 9C >.MV50:                  ld      de,(varPp1)
  63++D79D 2A 12 C0    >                        ld      hl,(UBnKzlo)
  63++D7A0 B7          >                        or      a
  63++D7A1 ED 52       >                        sbc     hl,de
  63++D7A3 38 08       >                        jr      c,.MV51                     ; if the result was negative then negate result
  63++D7A5 79          >                        ld      a,c                         ; get back the original sign
  63++D7A6 22 DE 9C    >                        ld      (varPp1),hl                 ; and save result to P[2][1]
  63++D7A9 EE 80       >                        xor     SignOnly8Bit                ; flip sign and exit A = flip of a
  63++D7AB C1          >                        pop     bc
  63++D7AC C9          >                        ret
  63++D7AD             >.MV51:                  NegHL
  63++D7AD AF          >                    xor a
  63++D7AE 95          >                    sub l
  63++D7AF 6F          >                    ld l,a
  63++D7B0 9F          >                    sbc a,a
  63++D7B1 94          >                    sub h
  63++D7B2 67          >                    ld h,a
  63++D7B3 22 DE 9C    >                        ld      (varPp1),hl
  63++D7B6 79          >                        ld      a,c                         ; the original sign will still be good
  63++D7B7 C1          >                        pop     bc
  63++D7B8 C9          >                        ret
  64++D7B9
  65++D7B9              ; rollWork holds Alpha intermidate results
  66++D7B9 00 00 00     rollWork      DS 3
  67++D7BC              rollWorkp1    equ rollWork
  68++D7BC              rollWorkp2    equ rollWork+1
  69++D7BC              rollWorkp3    equ rollWork+2
  70++D7BC
  71++D7BC              ;----------------------------------------------------------------------------------------------------------------------------------
  72++D7BC              ; based on MVEIT part 4 of 9
  73++D7BC 3A F6 9C     ApplyMyRollAndPitch:    ld      a,(ALP1)                    ; get roll magnitude
  74++D7BF 21 EA 9C                             ld      hl,BET1                     ; and pitch
  75++D7C2 B6                                   or      (hl)
  76++D7C3 CA 7D D8                             jp      z,.NoRotation               ; if both zero then don't compute
  77++D7C6                                      ;break
  78++D7C6              ; P[210] = x * alph (we use P[2]P[1] later as result/256
  79++D7C6 5F                                   ld      e,a                         ; e = roll magnitude
  80++D7C7 2A 0C C0                             ld      hl,(UBnKxlo)                ; hl = ship x pos
  81++D7CA CD 15 AF                             call    AHLequHLmulE                ; MULTU2-2 AHL = UbnkXlo * Alp1 both unsigned
  82++D7CD 32 DF 9C                             ld      (varPhi2),a                 ; set P[2] to high byte to help with ./256
  83++D7D0 22 DD 9C                             ld      (varP),hl                   ; P (2 1 0) = UbnkXlo * Alph1
  84++D7D3              ; A = Flip sign
  85++D7D3 3A F8 9C                             ld      a,(ALP2FLIP)                ; flip the current roll angle alpha and xor with x sign
  86++D7D6 21 0E C0                             ld      hl,UBnKxsgn                 ; and xor with x pos sign
  87++D7D9 AE                                   xor     (hl)                        ; so now  (A P+2 P+1) = - (x_sign x_hi x_lo) * alpha / 256
  88++D7DA              ; AP[2]P[1] =Y + AP[2]P[1] (i.e. Previous APP/256)
  89++D7DA CD 47 D7                             call    APPequYPosPlusAPP           ; MVT6 calculate APP = y - (x * alpha / 256)
  90++D7DD              ; K2 = AP[2][1] K2(3 2 1) = (A P+2 P+1) = y - x * alpha / 256
  91++D7DD 32 BB D7                             ld      (rollWorkp3),a               ; k2+3 = sign of result
  92++D7E0 22 B9 D7                             ld      (rollWorkp1),hl             ; k2+1,2 = result
  93++D7E3              ; P[210] = K2[2 1] * Beta  = (A ~P) * X
  94++D7E3 3A EA 9C                             ld      a,(BET1)                    ; a = magnitude of pitch
  95++D7E6 5F                                   ld      e,a
  96++D7E7 CD 15 AF                             call    AHLequHLmulE                ; MLTU2-2 AHL = (P+2 P+1) * BET1 or by now ((UbnkXlo * Alph1)/256 * Bet1)
  97++D7EA 32 DF 9C                             ld      (varPp2),a                   ; save highest byte in P2
  98++D7ED 22 DD 9C                             ld      (varP),hl
  99++D7F0              ; Fetch sign of previosu cal and xor with BETA inverted
 100++D7F0 3A BB D7                             ld      a,(rollWorkp3)
 101++D7F3 5F                                   ld      e,a
 102++D7F4 3A EB 9C                             ld      a,(BET2)
 103++D7F7 AB                                   xor     e                           ; so we get the sign of K3 and xor with pitch sign
 104++D7F8              ; Z = P[210] =Z + APP
 105++D7F8 CD 80 D7                             call    APPequZPosPlusAPP           ; MVT6
 106++D7FB 32 14 C0                             ld      (UBnKzsgn),a                ; save result back into z
 107++D7FE 22 12 C0                             ld      (UBnKzlo),hl
 108++D801              ; A[P1]P[0] = z * Beta
 109++D801 3A EA 9C                             ld      a,(BET1)                    ; get pitch back again for mulitply in original it was kept in Q so no fetch needed
 110++D804 5F                                   ld      e,a
 111++D805 CD 15 AF                             call    AHLequHLmulE                ; MULTU2 P2 P1 was already in hl (A P+1 P) = (z_hi z_lo) * beta
 112++D808 32 DF 9C                             ld      (varPp2),a                  ; P2 = high byte of result
 113++D80B 22 DD 9C                             ld      (varP),hl                   ; P (2 1 0) = UbnkXlo & Alph1
 114++D80E              ; A xor BET2,Zsign
 115++D80E 3A BB D7                             ld      a,(rollWorkp3)               ; get K3 (sign of y) and store it in y pos
 116++D811 32 11 C0                             ld      (UBnKysgn),a                ; save result back into y
 117++D814 5F                                   ld      e,a                         ; a = y sign Xor pitch rate sign
 118++D815 3A EB 9C                             ld      a,(BET2)                    ;
 119++D818 AB                                   xor     e                           ;
 120++D819 5F                                   ld      e,a                         ; now xor it with z sign too
 121++D81A 3A 14 C0                             ld      a,(UBnKzsgn)                ;
 122++D81D AB                                   xor     e                           ; so now a = sign of y * beta * sign y * sign z
 123++D81E F2 2D D8                             jp      p,.MV43                     ; if result is pve beta * z and y have differetn signs
 124++D821 2A DE 9C                             ld      hl,(varPp1)
 125++D824 ED 5B B9 D7                          ld      de,(rollWorkp1)
 126++D828 B7                                   or      a
 127++D829 19                                   add     hl,de
 128++D82A C3 47 D8                             jp      .MV44
 129++D82D 2A B9 D7     .MV43:                  ld      hl,(rollWorkp1)
 130++D830 ED 5B DE 9C                          ld      de,(varPp1)
 131++D834 B7                                   or      a
 132++D835 ED 52                                sbc     hl,de                       ; (y_hi y_lo) = K2(2 1) - P(2 1)
 133++D837 30 0E                                jr      nc,.MV44                    ; if there was no over flow carry on
 134++D839                                      NegHL
 134++D839 AF          >                    xor a
 134++D83A 95          >                    sub l
 134++D83B 6F          >                    ld l,a
 134++D83C 9F          >                    sbc a,a
 134++D83D 94          >                    sub h
 134++D83E 67          >                    ld h,a
 135++D83F 3A 11 C0                             ld      a,(UBnKysgn)                ; flip sign bit TODO, we may have to remove xor as planets and suns are sign + 23 bit xpos
 136++D842 EE 80                                xor     SignOnly8Bit
 137++D844 32 11 C0                             ld      (UBnKysgn),a
 138++D847              ; by here we have (y_sign y_hi y_lo) = K2(2 1) - P(2 1) = K2 - beta * z
 139++D847 22 0F C0     .MV44:                  ld      (UBnKylo),hl                ; we do save here to avoid two writes if MV43 ended up with a 2s'c conversion
 140++D84A 3A F6 9C                             ld      a,(ALP1)                    ; get roll magnitude
 141++D84D 5F                                   ld      e,a
 142++D84E 2A 0F C0                             ld      hl,(UBnKylo)
 143++D851 CD 15 AF                             call    AHLequHLmulE                ; MLTU2-2 AHL = (y_hi y_lo) * alpha
 144++D854 32 DF 9C                             ld      (varPp2),a                  ; store high byte P(2 1 0) = (y_hi y_lo) * alpha
 145++D857 22 DD 9C                             ld      (varP),hl
 146++D85A 3A F7 9C                             ld      a,(ALP2)
 147++D85D 5F                                   ld      e,a
 148++D85E 3A 11 C0                             ld      a,(UBnKysgn)
 149++D861 AB                                   xor     e                           ; a = sign of roll xor y so now we have (A P+2 P+1) = (y_sign y_hi y_lo) * alpha / 256
 150++D862 CD 0E D7                             call    APPequXPosPlusAPP           ; MVT6 Set (A P+2 P+1) = (x_sign x_hi x_lo) + (A P+2 P+1) = x + y * alpha / 256
 151++D865 32 0E C0                             ld      (UBnKxsgn),a                ; save resutl stright into X pos
 152++D868 22 0C C0                             ld      (UBnKxlo),hl
 153++D86B                                      ;break
 154++D86B                                      ; if its not a sun then apply to local orientation
 155++D86B
 156++D86B CD F4 D5                             call    ApplyMyRollToNosev
 157++D86E CD 23 D6                             call    ApplyMyRollToSidev
 158++D871 CD 52 D6                             call    ApplyMyRollToRoofv
 159++D874 CD 81 D6                             call    ApplyMyPitchToNosev
 160++D877 CD B0 D6                             call    ApplyMyPitchToSidev
 161++D87A CD DF D6                             call    ApplyMyPitchToRoofv
 162++D87D 3A DB 9D     .NoRotation:            ld      a,(DELTA)                   ; get speed
 163++D880 16 00                                ld      d,0
 164++D882 5F                                   ld      e,a                         ; de = speed in low byte
 165++D883 2A 12 C0                             ld      hl,(UBnKzlo)                ; hl = z position
 166++D886 3A 14 C0                             ld      a,(UBnKzsgn)                ; b = z sign
 167++D889 47                                   ld      b,a                         ;
 168++D88A 0E 80                                ld      c,$80                       ; c = -ve as we are always moving forwards
 169++D88C CD 7B AC                             call    ADDHLDESignBC               ; update speed
 170++D88F 22 12 C0                             ld      (UBnKzlo),hl                ; write back to zpos
 171++D892 32 14 C0                             ld      (UBnKzsgn),a                ;
 172++D895 C9                                   ret
# file closed: ././Universe/Ships/ApplyMyRollAndPitch.asm
1527+ D896                          INCLUDE "./Universe/Ships/ApplyShipRollAndPitch.asm"
# file opened: ././Universe/Ships/ApplyShipRollAndPitch.asm
   1++D896              ;----------------------------------------------------------------------------------------------------------------------------------
   2++D896              ; based on MVEIT part 4 of 9
   3++D896 3A 35 C0     ApplyShipRollAndPitch:  ld      a,(UBnKRotZCounter)             ; get roll magnitudeShip Pitch counter
   4++D899 47                                   ld      b,a
   5++D89A E6 80                                and     SignOnly8Bit
   6++D89C 4F                                   ld      c,a
   7++D89D 32 3B C0                             ld      (univRAT2),a                ; get sign of pitch
   8++D8A0 78                                   ld      a,b
   9++D8A1 E6 7F                                and     SignMask8Bit                ; and magnitude
  10++D8A3 28 3A                                jr      z,.ProcessRoll
  11++D8A5 FE 7F        .CheckPitchDamping:     cp      SignMask8Bit
  12++D8A7 28 01                                jr      z,.NoPitchDamping
  13++D8A9 3D           .ApplyPitchDamping:     dec     a                           ; pitch = pitch-1
  14++D8AA 32 3C C0     .NoPitchDamping         ld      (univRAT2Val),a
  15++D8AD 47                                   ld      b,a
  16++D8AE B1                                   or      c                           ; bring sign back in
  17++D8AF 32 35 C0                             ld      (UBnKRotZCounter),a             ; rotZCounter = updated value
  18++D8B2 21 1B C0     .PitchSAxes:            ld	    hl,UBnkrotmatRoofvX; UBnkrotmatSidevY
  19++D8B5 22 C2 9C                             ld	    (varAxis1),hl
  20++D8B8 21 21 C0                             ld	    hl,UBnkrotmatNosevX; UBnkrotmatSidevZ
  21++D8BB 22 C4 9C                             ld	    (varAxis2),hl
  22++D8BE CD B2 C7                             call    MVS5RotateAxis
  23++D8C1 21 1D C0     .PitchRAxes:            ld	    hl,UBnkrotmatRoofvY
  24++D8C4 22 C2 9C                             ld	    (varAxis1),hl
  25++D8C7 21 23 C0                             ld	    hl,UBnkrotmatNosevY;UBnkrotmatRoofvZ
  26++D8CA 22 C4 9C                             ld	    (varAxis2),hl
  27++D8CD CD B2 C7                             call    MVS5RotateAxis
  28++D8D0 21 1F C0     .PitchNAxes:            ld	    hl,UBnkrotmatRoofvZ; UBnkrotmatNosevY
  29++D8D3 22 C2 9C                             ld	    (varAxis1),hl
  30++D8D6 21 25 C0                             ld	    hl,UBnkrotmatNosevZ
  31++D8D9 22 C4 9C                             ld	    (varAxis2),hl
  32++D8DC CD B2 C7                             call    MVS5RotateAxis
  33++D8DF 3A 34 C0     .ProcessRoll:           ld      a,(UBnKRotXCounter)
  34++D8E2 47                                   ld      b,a
  35++D8E3 E6 80                                and     SignOnly8Bit
  36++D8E5 4F                                   ld      c,a
  37++D8E6 32 3B C0                             ld      (univRAT2),a                ; get sign of pitch
  38++D8E9 78                                   ld      a,b
  39++D8EA E6 7F                                and     SignMask8Bit                ; and magnitude
  40++D8EC C8                                   ret     z                           ; if no work to do then exit
  41++D8ED FE 7F        .CheckRollDamping:      cp      SignMask8Bit
  42++D8EF 28 01                                jr      z,.NoRollDamping
  43++D8F1 3D           .ApplyRollDamping:      dec      a                     ; pitch = pitch-1
  44++D8F2 32 3C C0     .NoRollDamping          ld      (univRAT2Val),a
  45++D8F5 47                                   ld      b,a
  46++D8F6 B1                                   or      c                           ; bring sign back in
  47++D8F7 32 34 C0                             ld      (UBnKRotXCounter),a             ; rotZCounter = updated value
  48++D8FA 21 1B C0     .RollSAxis:           	ld	    hl,UBnkrotmatRoofvX; UBnkrotmatSidevX
  49++D8FD 22 C2 9C                             ld	    (varAxis1),hl
  50++D900 21 15 C0                             ld	    hl,UBnkrotmatSidevX; UBnkrotmatSidevY
  51++D903 22 C4 9C                             ld	    (varAxis2),hl
  52++D906 CD B2 C7                             call    MVS5RotateAxis
  53++D909 21 1D C0     .RollRAxis:             ld	    hl,UBnkrotmatRoofvY; UBnkrotmatRoofvX
  54++D90C 22 C2 9C                             ld	    (varAxis1),hl
  55++D90F 21 17 C0                             ld	    hl,UBnkrotmatSidevY; UBnkrotmatRoofvY
  56++D912 22 C4 9C                             ld	    (varAxis2),hl
  57++D915 CD B2 C7                             call    MVS5RotateAxis
  58++D918 21 1F C0     .RollNAxis:             ld	    hl,UBnkrotmatRoofvZ; UBnkrotmatNosevX
  59++D91B 22 C2 9C                             ld	    (varAxis1),hl
  60++D91E 21 19 C0                             ld	    hl,UBnkrotmatSidevZ; UBnkrotmatNosevY
  61++D921 22 C4 9C                             ld	    (varAxis2),hl
  62++D924 CD B2 C7                             call    MVS5RotateAxis
  63++D927 C9                                   ret
  64++D928
# file closed: ././Universe/Ships/ApplyShipRollAndPitch.asm
1528+ D928                          INCLUDE "./ModelRender/DrawLines.asm"
# file opened: ././ModelRender/DrawLines.asm
   1++D928
   2++D928              ; ---------------------------------------------------------------------------------------------------------------------------------
   3++D928 00           DrawLinesCounter		db	0
   4++D929              ; Initial tests look OK
   5++D929              LL155:;
   6++D929              ClearLine:                                  ; CLEAR LINEstr visited by EE31 when XX3 heap ready to draw/erase lines in XX19 heap.
   7++D929                    ;break                                                                             ; ObjectInFront:
   8++D929 3E 65        DrawLines:              ld	a,$65 ; DEBUG
   9++D92B FD 6F                                ld		iyl,a							; set ixl to colour (assuming we come in here with a = colour to draw)
  10++D92D 3A 0A C3                             ld		a,(UbnkLineArrayLen)			; get number of lines
  11++D930                                      ReturnIfAIsZero   						; No lines then bail out.
  11++D930 A7          >                        and     a
  11++D931 C8          >                        ret     z
  12++D932 FD 67                                ld		iyh,a			                ; number of lines still to draw
  13++D934 21 18 C2                             ld		hl,UbnkLineArray
  14++D937              ;LL27:                                       ; counter Y, Draw clipped lines in XX19 ship lines heap
  15++D937 4E           DrawXX19ClippedLines:   ld      c,(hl)                          ; (XX19),Y c = varX1
  16++D938 23                                   inc     hl
  17++D939 46                                   ld      b,(hl)                          ; bc = point1 Y,X
  18++D93A 23                                   inc     hl
  19++D93B 5E                                   ld      e,(hl)                          ; c = varX1
  20++D93C 23                                   inc     hl
  21++D93D 56                                   ld      d,(hl)                          ; de = point2 Y,X
  22++D93E 23                                   inc     hl
  23++D93F E5                                   push	hl
  24++D940 FD E5                                push    iy
  25++D942 60                                   ld      h,b
  26++D943 69                                   ld      l,c
  27++D944                ;  call    l2_draw_any_line                ; call version of LOIN that used BCDE
  28++D944 FD 7D                                ld		a,iyl							; get colour back before calling line draw
  29++D946                                      MMUSelectLayer2
  29++D946 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
  30++D94A CD D2 EA                             call    LineHLtoDE
  31++D94D FD E1                                pop     iy
  32++D94F E1                                   pop	    hl
  33++D950 FD 25                                dec     iyh
  34++D952 20 E3                                jr		nz,DrawXX19ClippedLines
  35++D954 C9                                   ret                                     ; --- Wireframe end  \ LL118-1
  36++D955
# file closed: ././ModelRender/DrawLines.asm
1529+ D955              ; ---------------------------------------------------------------------------------------------------------------------------------
1530+ D955
1531+ D955              ; DIot seem to lawyas have Y = 0???
1532+ D955              ProcessDot:            ; break
1533+ D955 CD 2C CC                             call    CopyRotmatToTransMat             ;#01; Load to Rotation Matrix to XX16, 16th bit is sign bit
1534+ D958 CD 6F 96                             call    ScaleXX16Matrix197               ;#02; Normalise XX16
1535+ D95B CD E3 CE                             call    LoadCraftToCamera                ;#04; Load Ship Coords to XX18
1536+ D95E CD B0 CD                             call    InverseXX16                      ;#11; Invert rotation matrix
1537+ D961 21 00 00                             ld      hl,0
1538+ D964 32 8E C0                             ld      (UBnkXScaled),a
1539+ D967 32 90 C0                             ld      (UBnkYScaled),a
1540+ D96A 32 92 C0                             ld      (UBnkZScaled),a
1541+ D96D AF                                   xor     a
1542+ D96E CD 95 95                             call    XX12EquNodeDotOrientation
1543+ D971 CD 63 CC                             call    TransposeXX12ByShipToXX15
1544+ D974 CD E0 CC                             call	ScaleNodeTo8Bit					    ; scale to 8 bit values, why don't we hold the magnitude here?x
1545+ D977 FD 21 D8 C0                          ld      iy,UBnkNodeArray
1546+ D97B CD 9D D5                             call    ProjectNodeToEye
1547+ D97E C9                                   ret
1548+ D97F
1549+ D97F              ; .....................................................
1550+ D97F              ; Process Nodes does the following:
1551+ D97F              ; for each node:
1552+ D97F              ;     see if node >
1553+ D97F 00           PNXX20DIV6          DB      0
1554+ D980 00 00        PNVERTEXPTR         DW      0   ; DEBUG WILL USE LATER
1555+ D982 00 00        PNNODEPRT           DW      0   ; DEBUG WILL USE LATER
1556+ D984 00           PNLASTNORM          DB      0
1557+ D985              ProcessNodes:           ZeroA
1557+ D985 AF          >                        xor a
1558+ D986 32 0A C3                             ld      (UbnkLineArrayLen),a
1559+ D989 CD 2C CC                             call    CopyRotmatToTransMat ; CopyRotToTransMacro                      ;#01; Load to Rotation Matrix to XX16, 16th bit is sign bit
1560+ D98C CD 6F 96                             call    ScaleXX16Matrix197               ;#02; Normalise XX16
1561+ D98F CD E3 CE                             call    LoadCraftToCamera                ;#04; Load Ship Coords to XX18
1562+ D992 CD B0 CD                             call    InverseXX16                      ;#11; Invert rotation matrix
1563+ D995 21 31 C3                             ld      hl,UBnkHullVerticies
1564+ D998 3A 1F C3                             ld      a,(VertexCtX6Addr)               ; get Hull byte#9 = number of vertices *6                                   ;;;
1565+ D99B 4F           GetActualVertexCount:   ld      c,a                              ; XX20 also c = number of vertices * 6 (or XX20)
1566+ D99C 4F                                   ld      c,a                              ; XX20 also c = number of vertices * 6 (or XX20)
1567+ D99D 16 06                                ld      d,6
1568+ D99F CD 8D B1                             call    asm_div8                         ; asm_div8 C_Div_D - C is the numerator, D is the denominator, A is the remainder, B is 0, C is the result of C/D,D,E,H,L are not changed"
1569+ D9A2 41                                   ld      b,c                              ; c = number of vertices
1570+ D9A3 FD 21 D8 C0                          ld      iy,UBnkNodeArray
1571+ D9A7              LL48:
1572+ D9A7 C5           PointLoop:	            push	bc                                  ; save counters
1573+ D9A8 E5                                   push	hl                                  ; save verticies list pointer
1574+ D9A9 FD E5                                push	iy                                  ; save Screen plot array pointer
1575+ D9AB 78                                   ld      a,b
1576+ D9AC                                      ;break
1577+ D9AC CD 1E D5                             call    CopyNodeToXX15                      ; copy verices at hl to xx15
1578+ D9AF 3A 8F C0                             ld		a,(UBnkXScaledSign)
1579+ D9B2 CD 95 95                             call    XX12EquNodeDotOrientation
1580+ D9B5 CD 63 CC                             call    TransposeXX12ByShipToXX15
1581+ D9B8 CD E0 CC                             call	ScaleNodeTo8Bit					    ; scale to 8 bit values, why don't we hold the magnitude here?x
1582+ D9BB FD E1                                pop		iy                                  ; get back screen plot array pointer
1583+ D9BD CD 9D D5                             call    ProjectNodeToEye                     ; set up screen plot list entry
1584+ D9C0                 ; ld      hl,UbnkLineArrayLen
1585+ D9C0                ;  inc     (hl)                                ; another node done
1586+ D9C0 FD E5        ReadyForNextPoint:      push	iy                                  ; copy screen plot pointer to hl
1587+ D9C2 E1                                   pop		hl
1588+ D9C3 3E 04                                ld		a,4
1589+ D9C5 ED 31                                add		hl,a
1590+ D9C7 E5                                   push	hl                                  ; write it back at iy + 4
1591+ D9C8 FD E1                                pop		iy								    ; and put it in iy again
1592+ D9CA E1                                   pop		hl                                  ; get hl back as vertex list
1593+ D9CB 3E 06                                ld		a,6
1594+ D9CD ED 31                                add 	hl,a                                ; and move to next vertex
1595+ D9CF C1                                   pop		bc                                  ; get counter back
1596+ D9D0 10 D5                                djnz	PointLoop
1597+ D9D2              ; ......................................................
1598+ D9D2                                      ClearCarryFlag
1598+ D9D2 B7          >                        or a
1599+ D9D3 C9                                   ret
1600+ D9D4
1601+ D9D4              ; ...........................................................
1602+ D9D4 CD 8F D1     ProcessShip:            call    CheckVisible                ; checks for z -ve and outside view frustrum, sets up flags for next bit
1603+ D9D7 3A 3F C0     .IsItADot:              ld      a,(UBnkaiatkecm)
1604+ D9DA E6 68                                and     ShipIsVisible | ShipIsDot | ShipExploding  ; first off set if we can draw or need to update explosion
1605+ D9DC C8                                   ret     z                           ; if none of these flags are set we can fast exit
1606+ D9DD                                      JumpOnABitSet ShipExplodingBitNbr, .ExplodingCloud; we always do the cloud processing even if invisible
1606+ D9DD CB 6F       >                        bit 	ShipExplodingBitNbr, a
1606+ D9DF C2 1B DA    >                        jp      nz,.ExplodingCloud
1607+ D9E2              ;............................................................
1608+ D9E2              .DetermineDrawType:     ReturnOnBitClear    a, ShipIsVisibleBitNbr          ; if its not visible exit early
1608+ D9E2 CB 77       >                        bit 	ShipIsVisibleBitNbr,a
1608+ D9E4 C8          >                        ret		z
1609+ D9E5                                      JumpOnABitClear ShipIsDotBitNbr, .CarryOnWithDraw   ; if not dot do normal draw
1609+ D9E5 CB 5F       >                        bit 	ShipIsDotBitNbr, a
1609+ D9E7 CA 0E DA    >                        jp      z,.CarryOnWithDraw
1610+ D9EA              ;............................................................
1611+ D9EA CD 55 D9     .itsJustADot:           call    ProcessDot
1612+ D9ED                                      SetMemBitN  UBnkaiatkecm , ShipIsDotBitNbr ; set is a dot flag
1612+ D9ED 21 3F C0    >                        ld      hl,UBnkaiatkecm
1612+ D9F0 CB DE       >                        set     ShipIsDotBitNbr,(hl)
1613+ D9F2 ED 4B D8 C0                          ld      bc,(UBnkNodeArray)          ; if its at dot range get X
1614+ D9F6 ED 5B DA C0                          ld      de,(UBnkNodeArray+2)        ; and Y
1615+ D9FA 78                                   ld      a,b                         ; if high byte components are not 0 then off screen
1616+ D9FB B2                                   or      d                           ;
1617+ D9FC C0                                   ret     nz                          ;
1618+ D9FD 7B                                   ld      a,e
1619+ D9FE E6 80                                and     %10000000                   ; check to see if Y > 128
1620+ DA00 C0                                   ret     nz
1621+ DA01 43                                   ld      b,e                         ; now b = y and c = x
1622+ DA02 3E FF                                ld      a,L2ColourWHITE_1           ; just draw a pixel
1623+ DA04 3E E0                                ld      a,224
1624+ DA06                                      MMUSelectLayer2                     ; then go to update radar
1624+ DA06 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
1625+ DA0A CD 5E E1                             call    ShipPixel                   ;
1626+ DA0D C9                                   ret
1627+ DA0E              ;............................................................
1628+ DA0E CD 85 D9     .CarryOnWithDraw:       call    ProcessNodes                ; process notes is the poor performer or check distnace is not culling
1629+ DA11 CD E9 D1                             call    CullV2
1630+ DA14 CD DE DB                             call    PrepLines
1631+ DA17 CD 29 D9                             call    DrawLines
1632+ DA1A C9                                   ret
1633+ DA1B              ;............................................................
1634+ DA1B CD 85 D9     .ExplodingCloud:        call    ProcessNodes
1635+ DA1E                                      ClearMemBitN  UBnkaiatkecm, ShipKilledBitNbr ; acknowledge ship exploding
1635+ DA1E 21 3F C0    >                        ld      hl,UBnkaiatkecm
1635+ DA21 CB A6       >                        res     ShipKilledBitNbr,(hl)
1636+ DA23 3A 47 C0     .UpdateCloudCounter:    ld      a,(UBnKCloudCounter)        ; counter += 4 until > 255
1637+ DA26 C6 04                                add     4                           ; we do this early as we now have logic for
1638+ DA28 DA F0 DA                             jp      c,.FinishedExplosion        ; display or not later
1639+ DA2B 32 47 C0                             ld      (UBnKCloudCounter),a        ; .
1640+ DA2E              .SkipHiddenShip:        ReturnOnMemBitClear  UBnkaiatkecm , ShipIsVisibleBitNbr
1640+ DA2E 3A 3F C0    >                        ld     a,(UBnkaiatkecm)
1640+ DA31 CB 77       >                        bit 	ShipIsVisibleBitNbr,a
1640+ DA33 C8          >                        ret		z
1641+ DA34              .IsShipADot:            JumpOnABitSet ShipIsDotBitNbr, .itsJustADot ; if its dot distance then explosion is a dot, TODO later we will do as a coloured dot
1641+ DA34 CB 5F       >                        bit 	ShipIsDotBitNbr, a
1641+ DA36 C2 EA D9    >                        jp      nz,.itsJustADot
1642+ DA39 2A 12 C0     .CalculateZ:            ld      hl,(UBnKzlo)                ; al = hl = z
1643+ DA3C 7C                                   ld      a,h                         ; .
1644+ DA3D                                      JumpIfALTNusng 32,.CalcFromZ        ; if its >= 32 then set a to FE and we are done
1644+ DA3D FE 20       >                        cp      32
1644+ DA3F DA 47 DA    >                        jp		c, .CalcFromZ
1645+ DA42 26 FE                                ld      h,$FE                       ; .
1646+ DA44 C3 52 DA                             jp      .DoneZDist                  ; .
1647+ DA47              .CalcFromZ:             ShiftHLLeft1                        ; else
1647+ DA47 CB 25       >			   sla l
1647+ DA49 CB 14       >			   rl  h
1648+ DA4B                                      ShiftHLLeft1                        ; hl = hl * 2
1648+ DA4B CB 25       >			   sla l
1648+ DA4D CB 14       >			   rl  h
1649+ DA4F                                      SetCarryFlag                        ; h = h * 3 rolling in lower bit
1649+ DA4F 37          >                        scf
1650+ DA50 CB 14                                rl  h                               ;
1651+ DA52 06 00        .DoneZDist:             ld      b,0                         ; bc = cloud z distance calculateed
1652+ DA54 4C                                   ld      c,h                         ; .
1653+ DA55 3A 47 C0     .CalcCloudRadius:       ld      a,(UBnKCloudCounter)        ; de = cloud counter * 256
1654+ DA58                      IFDEF LOGMATHS
1655+ DA58                                      MMUSelectMathsTables
1655+ DA58 ED 91 50 63 >                     nextreg MathsTablesMMU,    BankMathsTables
1656+ DA5C 44                                   ld      b,h
1657+ DA5D CD 6F 00                             call    AEquAmul256DivBLog
1658+ DA60 57                                   ld      d,a
1659+ DA61                                      MMUSelectROM0
1659+ DA61 ED 91 50 FF >                     nextreg EXSDOSMMU0,        BankROM
1660+ DA65                      ELSE
1661+ DA65 ~                                    ld      d,a                         ;
1662+ DA65 ~                                    ld      e,0                         ;
1663+ DA65 ~                                    call    DEequDEDivBC                ; de = cloud counter * 256 / z distance
1664+ DA65 ~                                    ld      a,d                         ; if radius >= 28
1665+ DA65                      ENDIF
1666+ DA65                                      JumpIfALTNusng  28,.SetCloudRadius  ; then set raidus in d to $FE
1666+ DA65 FE 1C       >                        cp      28
1666+ DA67 DA 6F DA    >                        jp		c, .SetCloudRadius
1667+ DA6A 16 FE        .MaxCloudRadius:        ld      d,$FE                       ;
1668+ DA6C C3 7B DA                             jp      .SizedUpCloud               ;
1669+ DA6F              .SetCloudRadius:        ShiftDELeft1                        ; de = 8 * de
1669+ DA6F CB 23       >			   sla e
1669+ DA71 CB 12       >			   rl  d
1670+ DA73                                      ShiftDELeft1                        ; .
1670+ DA73 CB 23       >			   sla e
1670+ DA75 CB 12       >			   rl  d
1671+ DA77                                      ShiftDELeft1                        ; .
1671+ DA77 CB 23       >			   sla e
1671+ DA79 CB 12       >			   rl  d
1672+ DA7B 7A           .SizedUpCloud:          ld      a,d                         ; cloudradius = a = d or (cloudcounter * 8 / 256)
1673+ DA7C 32 48 C0                             ld      (UBnKCloudRadius),a         ; .
1674+ DA7F DD 67                                ld      ixh,a                       ; ixh = a = calculated cloud radius
1675+ DA81 3A 47 C0     .CalcSubParticleColour: ld      a,(UBnKCloudCounter)        ; colur fades away
1676+ DA84 ED 23                                swapnib                             ; divive by 16
1677+ DA86 E6 0F                                and     $0F                         ; mask off upper bytes
1678+ DA88 CB 2F                                sra     a                           ; divide by 32
1679+ DA8A 21 FC DA                             ld      hl,DebrisColourTable
1680+ DA8D ED 31                                add     hl,a
1681+ DA8F 7E                                   ld      a,(hl)
1682+ DA90 FD 6F                                ld      iyl,a                       ; iyl = pixel colours
1683+ DA92 3A 47 C0     .CalcSubParticleCount:  ld      a,(UBnKCloudCounter)        ; cloud counter = abs (cloud counter) in effect if > 127 then shrinks it
1684+ DA95                                      ABSa2c                              ; a = abs a
1684+ DA95 CB 7F       >                        bit     7,a
1684+ DA97 CA 9C DA    >                        jp      z,.DoneABSa
1684+ DA9A ED 44       >                        neg
1684+ DA9C             >.DoneABSa:
1685+ DA9C CB 2F        .ParticlePositive:      sra a                               ; iyh = (a /8)
1686+ DA9E CB 2F                                sra a                               ; .
1687+ DAA0 CB 2F                                sra a                               ; .
1688+ DAA2 F6 01                                or  1                               ; bit 0 set so minimum 1
1689+ DAA4 DD 6F        .DoneSubParticleCount:  ld      ixl,a                       ; ixl = nbr particles per vertex
1690+ DAA6 3A 1E C3     .ForEachVertex:         ld      a,(VertexCountAddr)         ; load vertex count into b
1691+ DAA9 47                                   ld      b,a                         ; .
1692+ DAAA 21 D8 C0                             ld      hl,UBnkNodeArray            ; hl = list of vertices
1693+ DAAD C5 E5        .ExplosionVertLoop:     push    bc,,hl                      ; save vertex counter in b and pointer to verticles in hl
1694+ DAAF DD 68                                    ld      ixl,b                   ; save counter
1695+ DAB1 4E                                       ld      c,(hl)                  ; get vertex into bc and de
1696+ DAB2 23                                       inc     hl                      ; .
1697+ DAB3 46                                       ld      b,(hl)                  ; .
1698+ DAB4 23                                       inc     hl                      ; .
1699+ DAB5 5E                                       ld      e,(hl)                  ; .
1700+ DAB6 23                                       inc     hl                      ; .
1701+ DAB7 56                                       ld      d,(hl)                  ; now hl is done with and we can use it
1702+ DAB8 DD 7D        .LoopSubParticles:          ld      a,ixl                   ; iyh = loop iterator for nbr of particles per vertex
1703+ DABA FD 67                                    ld      iyh,a                   ;
1704+ DABC                                          ;break
1705+ DABC D5 C5        .ProcessAParticle:          push    de,,bc                  ; save y then x coordinates
1706+ DABE EB                                           ex      de,hl               ; hl = de (Y)
1707+ DABF DD 54                                        ld      d,ixh               ; d = cloud radius
1708+ DAC1 CD 04 DB                                     call    HLEquARandCloud     ; vertex = vertex +/- (random * projected cloud side /256)
1709+ DAC4 7C                                           ld      a,h                 ; if off screen skip
1710+ DAC5                                              JumpIfAIsNotZero  .NextIteration
1710+ DAC5 A7          >                        and     a
1710+ DAC6 C2 E1 DA    >                        jp	    nz,.NextIteration
1711+ DAC9 EB                                           ex      de,hl               ; de = result for y which was put into hl
1712+ DACA E1                                           pop     hl                  ; get x back from bc on stack
1713+ DACB E5                                           push    hl                  ; put bc (which is now in hl) back on the stack
1714+ DACC D5                                           push    de                  ; save de
1715+ DACD DD 54                                        ld      d,ixh               ; d = cloud radius
1716+ DACF CD 04 DB                                     call    HLEquARandCloud     ; vertex = vertex +/- (random * projected cloud side /256)
1717+ DAD2 D1                                           pop     de                  ; get de back doing pop here clears stack up
1718+ DAD3 7C                                           ld      a,h                 ; if high byte has a value then off screen
1719+ DAD4                                              JumpIfAIsNotZero .NextIteration ;
1719+ DAD4 A7          >                        and     a
1719+ DAD5 C2 E1 DA    >                        jp	    nz,.NextIteration
1720+ DAD8 43                                           ld      b,e                 ; bc = y x of pixel from e and c regs
1721+ DAD9 4D                                           ld      c,l                 ; iyl already has colour
1722+ DADA                                              MMUSelectLayer2             ; plot it with debris code as this can chop y > 128
1722+ DADA ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
1723+ DADE CD 66 E1                                     call    DebrisPixel         ; .
1724+ DAE1 C1 D1        .NextIteration:             pop    de,,bc                   ; ready for next iteration, get back y and x coordinates
1725+ DAE3 FD 25                                    dec    iyh                      ; one partcile done
1726+ DAE5 20 D5                                    jr      nz,.ProcessAParticle    ; until all done
1727+ DAE7 E1 C1        .NextVert:              pop     bc,,hl                      ; recover loop counter and source pointer
1728+ DAE9 3E 04                                ld      a,4                         ; move to next vertex group
1729+ DAEB ED 31                                add     hl,a                        ;
1730+ DAED 10 BE                                djnz    .ExplosionVertLoop          ;
1731+ DAEF C9                                   ret
1732+ DAF0              .FinishedExplosion:     ;break
1733+ DAF0 3A 2B C0                             ld      a,(UBnKSlotNumber)          ; get slot number
1734+ DAF3 CD F0 A2                             call    ClearSlotA                  ; gauranted to be in main memory as non bankables
1735+ DAF6                                      ClearMemBitN UBnkaiatkecm, ShipExplodingBitNbr
1735+ DAF6 21 3F C0    >                        ld      hl,UBnkaiatkecm
1735+ DAF9 CB AE       >                        res     ShipExplodingBitNbr,(hl)
1736+ DAFB C9                                   ret
1737+ DAFC
1738+ DAFC
1739+ DAFC FC D8 B4 90  DebrisColourTable:      DB L2ColourYELLOW_1, L2ColourYELLOW_2, L2ColourYELLOW_3, L2ColourYELLOW_4, L2ColourYELLOW_5, L2ColourYELLOW_6, L2ColourYELLOW_7,L2ColourGREY_4
1739+ DB00 6C 48 24 25
1740+ DB04                                      ; set flags and signal to remove from slot list
1741+ DB04
1742+ DB04              ; Hl = HlL +/- (Random * projected cloud size)
1743+ DB04              ; In - d = z distance, hl = vert hi lo
1744+ DB04              ; Out hl = adjusted distance
1745+ DB04              ; uses registers hl, de
1746+ DB04 E5           HLEquARandCloud:        push    hl                          ; random number geneator upsets hl register
1747+ DB05 CD 7C A3                             call    doRandom                    ; a= random * 2
1748+ DB08 E1                                   pop     hl
1749+ DB09 17                                   rla                                 ;
1750+ DB0A 38 0A                                jr      c,.Negative                 ; if buit 7 went into carry
1751+ DB0C 5F           .Positive:              ld  e,a
1752+ DB0D ED 30                                mul
1753+ DB0F 5A                                   ld  e,d
1754+ DB10 16 00                                ld  d,0
1755+ DB12                                      ClearCarryFlag
1755+ DB12 B7          >                        or a
1756+ DB13 ED 5A                                adc     hl,de                       ; hl = hl + a
1757+ DB15 C9                                   ret
1758+ DB16 5F           .Negative:              ld  e,a
1759+ DB17 ED 30                                mul
1760+ DB19 5A                                   ld  e,d
1761+ DB1A 16 00                                ld  d,0
1762+ DB1C                                      ClearCarryFlag
1762+ DB1C B7          >                        or a
1763+ DB1D ED 52                                sbc     hl,de                       ; hl = hl + a
1764+ DB1F C9                                   ret
1765+ DB20
1766+ DB20              GetExperiencePoints:    ; TODO calculate experience points
1767+ DB20                                      ; TODO mission updates check
1768+ DB20 C9                                   ret
1769+ DB21
1770+ DB21              ; ......................................................
1771+ DB21 3A 2D C3     KillShip:               ld      a,(ShipTypeAddr)            ; we can't destroy stations in a collision
1772+ DB24 FE 02                                cp      ShipTypeStation             ; for destructable one we will have a special type of ship
1773+ DB26 C8                                   ret     z
1774+ DB27 3A 3F C0                             ld      a,(UBnkaiatkecm)            ; remove AI, mark killed, mark exploding
1775+ DB2A F6 30                                or      ShipExploding | ShipKilled  ; .
1776+ DB2C E6 7F                                and     ShipAIDisabled              ; .
1777+ DB2E 32 3F C0                             ld      (UBnkaiatkecm),a            ; .
1778+ DB31                                      SetMemToN   UBnKexplDsp, ShipExplosionDuration ; set debris cloud timer, also usered in main to remove from slots
1778+ DB31 3E 4B       >                        ld      a,ShipExplosionDuration
1778+ DB33 32 3D C0    >                        ld      (UBnKexplDsp),a
1779+ DB36                                      ldWriteZero UBnKEnergy              ; Zero ship energy
1779+ DB36 AF          >                        xor      a
1779+ DB37 32 43 C0    >                        ld       (UBnKEnergy),a
1780+ DB3A 32 48 C0                             ld      (UBnKCloudRadius),a
1781+ DB3D 3E 12                                ld      a,18
1782+ DB3F 32 47 C0                             ld      (UBnKCloudCounter),a        ; Zero cloud
1783+ DB42                                      ; TODO logic to spawn cargo/plates goes here
1784+ DB42 C9                                   ret
1785+ DB43
1786+ DB43              ; in a = damage
1787+ DB43 47           DamageShip:             ld      b,a                         ; b = a = damage comming in
1788+ DB44 3A 2D C3                             ld      a,(ShipTypeAddr)            ; we can't destroy stations in a collision
1789+ DB47 FE 02                                cp      ShipTypeStation             ; for destructable one we will have a special type of ship
1790+ DB49 C8                                   ret     z
1791+ DB4A 3A 43 C0                             ld      a,(UBnKEnergy)              ; get current energy level
1792+ DB4D                                      ClearCarryFlag
1792+ DB4D B7          >                        or a
1793+ DB4E 98                                   sbc     a,b                         ; subtract damage
1794+ DB4F D2 56 DB     .Overkilled:            jp      nc,.DoneDamage              ; if no carry then its not gone negative
1795+ DB52 CD 21 DB                             call    KillShip                    ; else kill it
1796+ DB55 C9                                   ret
1797+ DB56 32 43 C0     .DoneDamage:            ld      (UBnKEnergy),a
1798+ DB59 C9                                   ret
1799+ DB5A              ; need recovery for energy too
1800+ DB5A              ; Shall we have a "jolt ship off course routine for when it gets hit by a blast or collision)
1801+ DB5A
1802+ DB5A              ;-LL49-----------------------------------------------------------------------------------------------------------------------------
1803+ DB5A              ;  Entering Here we have the following:
1804+ DB5A              ;  XX15(1 0) = vertex x-coordinate but sign not populated
1805+ DB5A              ;  XX15(3 2) = vertex y-coordinate but sign not populated
1806+ DB5A              ;  XX15(5 4) = vertex z-coordinate but sign not populated
1807+ DB5A              ;
1808+ DB5A              ;  XX16(  1 0)sidev_x   (3 2)roofv_x   (5 4)nosev_x
1809+ DB5A              ;  XX16(  7 6)sidev_y   (9 8)roofv_y (11 10)nosev_y
1810+ DB5A              ;  XX16(13 12)sidev_z (15 14)roofv_z (17 16)nosev_z
1811+ DB5A              ;--------------------------------------------------------------------------------------------------------
1812+ DB5A              AddLaserBeamLine:
1813+ DB5A              ; this code is a bag of shit and needs re-writing
1814+ DB5A              GetGunVertexNode:
1815+ DB5A 3A 1C C3             ld          a,(GunVertexAddr)                   ; Hull byte#6, gun vertex*4 (XX0),Y
1816+ DB5D 21 D8 C0             ld          hl,UBnkNodeArray                    ; list of lines to read
1817+ DB60 ED 31                add         hl,a                                ; HL = address of GunVertexOnNodeArray
1818+ DB62 FD 2E 00             ld          iyl,0
1819+ DB65              MoveX1PointToXX15:
1820+ DB65 4E                   ld          c,(hl)                              ;
1821+ DB66 23                   inc         hl
1822+ DB67 46                   ld          b,(hl)                              ; bc = x1 of gun vertex
1823+ DB68 23                   inc         hl
1824+ DB69 ED 43 8E C0          ld          (UBnkX1),bc
1825+ DB6D 0C                   inc         c
1826+ DB6E C8                   ret         z                                   ; was c 255?
1827+ DB6F 04                   inc         b
1828+ DB70 C8                   ret         z                                   ; was c 255?
1829+ DB71              MoveY1PointToXX15:
1830+ DB71 4E                   ld          c,(hl)                              ;
1831+ DB72 23                   inc         hl
1832+ DB73 46                   ld          b,(hl)                              ; bc = y1 of gun vertex
1833+ DB74 23                   inc         hl
1834+ DB75 ED 43 90 C0          ld          (UBnkY1),bc
1835+ DB79              SetX2PointToXX15:
1836+ DB79 01 00 00             ld          bc,0                                ; set X2 to 0
1837+ DB7C ED 43 92 C0          ld          (UBnkX2),bc
1838+ DB80 3A 12 C0             ld          a,(UBnKzlo)
1839+ DB83 4F                   ld          c,a
1840+ DB84              SetY2PointToXX15:
1841+ DB84 ED 43 94 C0          ld          (UBnkY2),bc                         ; set Y2to 0
1842+ DB88 3A 0E C0             ld          a,(UBnKxsgn)
1843+ DB8B                      JumpOnBitClear a,7,LL74SkipDec
1843+ DB8B CB 7F       >                        bit 	7,a
1843+ DB8D CA 95 DB    >                        jp      z,LL74SkipDec
1844+ DB90              LL74DecX2:
1845+ DB90 3E FF                ld          a,$FF
1846+ DB92 32 92 C0             ld          (UBnkX2Lo),a                        ; rather than dec (hl) just load with 255 as it will always be that at this code point
1847+ DB95              LL74SkipDec:
1848+ DB95 CD D6 C9             call        ClipLine                            ; LL145 \ clip test on XX15 XX12 vector, returns carry
1849+ DB98 38 71                jr          c,CalculateNewLines                 ; LL170 clip returned carry set so not visibile if carry set skip the rest (laser not firing)
1850+ DB9A              ; Here we are usign hl to replace VarU as index
1851+ DB9A 2A E2 9D             ld          hl,(varU16)
1852+ DB9D 3A 8E C0             ld          a,(UBnKx1Lo)
1853+ DBA0 77                   ld          (hl),a
1854+ DBA1 23                   inc         hl
1855+ DBA2 3A 90 C0             ld          a,(UbnKy1Lo)
1856+ DBA5 77                   ld          (hl),a
1857+ DBA6 23                   inc         hl
1858+ DBA7 3A 92 C0             ld          a,(UBnkX2Lo)
1859+ DBAA 77                   ld          (hl),a
1860+ DBAB 23                   inc         hl
1861+ DBAC 3A 94 C0             ld          a,(UbnKy2Lo)
1862+ DBAF 77                   ld          (hl),a
1863+ DBB0 FD 2C                inc         iyl                                 ; iyl holds as a counter to iterations
1864+ DBB2 23                   inc         hl
1865+ DBB3 FD 2C                inc         iyl                                 ; ready for next byte
1866+ DBB5 22 E2 9D             ld          (varU16),hl
1867+ DBB8 C9                   ret
1868+ DBB9
1869+ DBB9                  INCLUDE "Universe/Ships/PrepLines.asm"
# file opened: ./Universe/Ships/PrepLines.asm
   1++DBB9              ;--------------------------------------------------------------------------------------------------------
   2++DBB9                  INCLUDE "./ModelRender/getVertexNodeAtAToX1Y1.asm"
# file opened: ././ModelRender/getVertexNodeAtAToX1Y1.asm
   1++DBB9              ;--------------------------------------------------------------------------------------------------------
   2++DBB9              ; a = byteoffset to node array as its pre computed to x4 bytes
   3++DBB9 21 D8 C0     getVertexNodeAtAToX1Y1: ld          hl,UBnkNodeArray                    ; hl = edgelist  current pointer
   4++DBBC ED 31                                add         hl,a                                ; hl = address of Node
   5++DBBE 7E                                   ld          a,(hl)                              ; get edge list nbr 1 edge
   6++DBBF 11 8E C0                             ld          de,UBnkX1
   7++DBC2 ED A0                                ldi                                             ; x1 lo
   8++DBC4 ED A0                                ldi                                             ; x1 hi
   9++DBC6 ED A0                                ldi                                             ; y1 lo
  10++DBC8 ED A0                                ldi                                             ; y1 hi
  11++DBCA C9                                   ret
  12++DBCB
# file closed: ././ModelRender/getVertexNodeAtAToX1Y1.asm
   3++DBCB                  INCLUDE "./ModelRender/getVertexNodeAtAToX2Y2.asm"
# file opened: ././ModelRender/getVertexNodeAtAToX2Y2.asm
   1++DBCB              ;--------------------------------------------------------------------------------------------------------
   2++DBCB              ; a = byteoffset to node array as its pre computed to x4 bytes
   3++DBCB 21 D8 C0     getVertexNodeAtAToX2Y2: ld          hl,UBnkNodeArray                    ; hl = edgelist  current pointer
   4++DBCE ED 31                                add         hl,a                                ; hl = address of Node
   5++DBD0 7E                                   ld          a,(hl)                              ; get edge list nbr 1 edge
   6++DBD1 11 92 C0                             ld          de,UBnkX2
   7++DBD4 ED A0                                ldi                                             ; x1 lo
   8++DBD6 ED A0                                ldi                                             ; x1 hi
   9++DBD8 ED A0                                ldi                                             ; y1 lo
  10++DBDA ED A0                                ldi                                             ; y1 hi
  11++DBDC C9                                   ret
# file closed: ././ModelRender/getVertexNodeAtAToX2Y2.asm
   4++DBDD                  INCLUDE "./ModelRender/GetFaceAtA.asm"
# file opened: ././ModelRender/GetFaceAtA.asm
   1++DBDD              ;--------------------------------------------------------------------------------------------------------
   2++DBDD              GetFaceAtA:         MACRO
   3++DBDD ~                                ld          hl,UbnkFaceVisArray
   4++DBDD ~                                add         hl,a
   5++DBDD ~                                ld          a,(hl)                              ; get face visibility
   6++DBDD                                  ENDM
   7++DBDD
# file closed: ././ModelRender/GetFaceAtA.asm
   5++DBDD              ;--------------------------------------------------------------------------------------------------------
   6++DBDD              ; LL72 Goes through each edge in to determine if they are on a visible face, if so load start and end to line array as clipped lines
   7++DBDD               ;   DEFINE NOBACKFACECULL 1
   8++DBDD 00           PLEDGECTR           DB          0
   9++DBDE
  10++DBDE              PrepLines:
  11++DBDE              ; FOR NOW BRUTE FORCE IF OFF SCREEN
  12++DBDE
  13++DBDE              ; TODO add in onced DOEXP is finished
  14++DBDE              ;        ld          a,(UBnkexplDsp)                     ; INWK+31  \ display/exploding state|missiles
  15++DBDE              ;        JumpOnBitClear  a,5,EE31                        ; bit5 of mask, if zero no explosion
  16++DBDE              ;        or          8
  17++DBDE              ;        ld          (UBnkexplDsp),a                     ; else else set bit3 to erase old line
  18++DBDE              ;        jp          DOEXP                               ; erase using Do Explosion and use implicit return
  19++DBDE              ;EE31:                                                   ; no explosion
  20++DBDE              ;        JumpOnBitClear  a,3,LL74                        ; clear is hop to do New lines
  21++DBDE              ;        call        ClearLine                           ; LL155    \ else erase lines in XX19 heap at LINEstr down
  22++DBDE              ;        ld          a, $08                              ; set bit 3 of a and fall into LL74
  23++DBDE              ;
  24++DBDE              ;--------------------------------------------------------------------------------------------------------
  25++DBDE              InitialiseLineRead:
  26++DBDE                      ;break
  27++DBDE                      ldWriteZero UbnkLineArrayLen                    ; current line array index = 0
  27++DBDE AF          >                        xor      a
  27++DBDF 32 0A C3    >                        ld       (UbnkLineArrayLen),a
  28++DBE2                      ldWriteZero UbnkLineArrayBytes                  ; UbnkLineArrayBytes= nbr of bytes of lines laoded = array len * 4
  28++DBE2 AF          >                        xor      a
  28++DBE3 32 0B C3    >                        ld       (UbnkLineArrayBytes),a
  29++DBE6                      ldWriteZero PLEDGECTR
  29++DBE6 AF          >                        xor      a
  29++DBE7 32 DD DB    >                        ld       (PLEDGECTR),a
  30++DBEA 3A 20 C3             ld          a,(EdgeCountAddr)
  31++DBED DD 67                ld          ixh,a                               ; ixh = XX17 = Total number of edges to traverse
  32++DBEF FD 2E 00             ld          iyl,0                               ; ixl = current edge index
  33++DBF2 21 18 C2             ld          hl,UbnkLineArray                    ; head of array
  34++DBF5 22 E2 9D             ld          (varU16),hl                         ; store current line array pointer un varU16
  35++DBF8                      ldCopyByte  EdgeCountAddr, XX17                 ; XX17  = total number of edges to traverse edge counter
  35++DBF8 3A 20 C3    >                        ld       a,(EdgeCountAddr)
  35++DBFB 32 E6 9D    >                        ld       (XX17),a
  36++DBFE 3A 3D C0             ld          a,(UBnKexplDsp)                     ; get explosion status
  37++DC01                      JumpOnBitClear a,6,CalculateNewLines            ; LL170 bit6 of display state clear (laser not firing) \ Calculate new lines
  37++DC01 CB 77       >                        bit 	6,a
  37++DC03 CA 0B DC    >                        jp      z,CalculateNewLines
  38++DC06 E6 BF                and         $BF                                 ; else laser is firing, clear bit6.
  39++DC08 32 3D C0             ld          (UBnKexplDsp),a                     ; INWK+31
  40++DC0B              ;   TODO commentedout as teh subroutine is a mess   call        AddLaserBeamLine                    ; add laser beam line to draw list
  41++DC0B              ; NOw we can calculate hull after including laser line
  42++DC0B              CalculateNewLines:
  43++DC0B              LL170:                                                  ;(laser not firing) \ Calculate new lines   \ their comment
  44++DC0B              CheckEdgesForVisibility:
  45++DC0B 21 21 C4             ld          hl,UBnkHullEdges
  46++DC0E                      ; TODO change heap to 3 separate arrays and break them down during copy of ship hull data
  47++DC0E 22 E2 9C             ld          (varV),hl                           ; V \ is pointer to where edges data start
  48++DC11 3A 1B C3             ld          a,(LineX4Addr)
  49++DC14 47                   ld          b,a                                 ; nbr of bytes of edge data
  50++DC15              LL75Loop:                                               ; count Visible edges
  51++DC15              IsEdgeInVisibilityRange:
  52++DC15 2A E2 9C             ld          hl,(varV)
  53++DC18 E5                   push        hl
  54++DC19 FD E1                pop         iy
  55++DC1B                      IFDEF NOBACKFACECULL
  56++DC1B ~                        jp          VisibileEdge; DEBUGTODO
  57++DC1B                      ENDIF
  58++DC1B 3A CE 9C             ld          a,(LastNormalVisible)               ; XX4 is visibility range
  59++DC1E 57                   ld          d,a                                 ; d holds copy of XX4
  60++DC1F              ; Get Edge Byte 0
  61++DC1F FD 7E 00             ld          a,(IY+0)                            ; edge data byte#0 is visibility distance
  62++DC22                      JumpIfALTNusng d,LL78EdgeNotVisible             ; XX4   \ visibility LLx78 edge not visible
  62++DC22 BA          >                        cp      d
  62++DC23 DA 75 DC    >                        jp		c, LL78EdgeNotVisible
  63++DC26              EdgeMayBeVisibile:
  64++DC26              ; Get Edge Byte 1
  65++DC26              IsFace1Visibile:                                        ; edges have 2 faces to test
  66++DC26 FD 7E 01             ld          a,(IY+1)                            ; (V),Y \ edge data byte#1 bits 0 to 3 face 1 4 to 7 face 2
  67++DC29 4F                   ld          c,a                                 ;  c = a copy of byte 1
  68++DC2A E6 0F                and         $0F                                 ;
  69++DC2C                      GetFaceAtA
  69++DC2C 21 BA C0    >                    ld          hl,UbnkFaceVisArray
  69++DC2F ED 31       >                    add         hl,a
  69++DC31 7E          >                    ld          a,(hl)                              ; get face visibility
  70++DC32              ;       jp  VisibileEdge; DEBUG BODGE TEST TODO
  71++DC32                      JumpIfAIsNotZero VisibileEdge                     ; LL70 visible edge
  71++DC32 A7          >                        and     a
  71++DC33 C2 47 DC    >                        jp	    nz,VisibileEdge
  72++DC36              IsFace2Visibile:
  73++DC36 79                   ld          a,c                                 ; restore byte 1 from c register
  74++DC37 ED 23                swapnib                                         ;
  75++DC39 E6 0F                and         $0F                                 ; swap high byte into low byte
  76++DC3B E5                   push        hl
  77++DC3C                      GetFaceAtA
  77++DC3C 21 BA C0    >                    ld          hl,UbnkFaceVisArray
  77++DC3F ED 31       >                    add         hl,a
  77++DC41 7E          >                    ld          a,(hl)                              ; get face visibility
  78++DC42 E1                   pop         hl
  79++DC43                      JumpIfAIsZero LL78EdgeNotVisible                ; edge not visible
  79++DC43 A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
  79++DC44 CA 75 DC    >                        jp	    z, LL78EdgeNotVisible
  80++DC47              VisibileEdge:                                           ; Now we need to node id from bytes 2 - start and 3 - end
  81++DC47              ;LL79--Visible edge--------------------------------------
  82++DC47              ; Get Edge Byte 2
  83++DC47 FD 7E 02             ld          a,(IY+2)                            ; get Node id
  84++DC4A CD B9 DB             call        getVertexNodeAtAToX1Y1              ; get the points X1Y1 from node
  85++DC4D FD 7E 03             ld          a,(IY+3)
  86++DC50 CD CB DB             call        getVertexNodeAtAToX2Y2              ; get the points X2Y2 from node
  87++DC53 CD D6 C9             call        ClipLine
  88++DC56 38 1D                jr          c,LL78EdgeNotVisible                ; LL78 edge not visible
  89++DC58              LL80:                                                   ; ll80 \ Shove visible edge onto XX19 ship lines heap counter U
  90++DC58 ED 5B E2 9D          ld          de,(varU16)                         ; clipped edges heap address
  91++DC5C 21 8E C0             ld          hl,UBnkNewX1
  92++DC5F                      FourLDIInstrunctions
  92++DC5F ED A0       >                        ldi
  92++DC61 ED A0       >                        ldi
  92++DC63 ED A0       >                        ldi
  92++DC65 ED A0       >                        ldi
  93++DC67 ED 53 E2 9D          ld          (varU16),de                         ; update U16 with current address
  94++DC6B 21 0A C3             ld          hl,UbnkLineArrayLen                 ; we have loaded one line
  95++DC6E 34                   inc         (hl)
  96++DC6F 7E                   ld          a,(hl)
  97++DC70                      JumpIfAGTENusng LineArraySize,CompletedLineGeneration   ; have we hit max lines for a model hop over jmp to Exit edge data loop
  97++DC70 FE 32       >                        cp     LineArraySize
  97++DC72 D2 8B DC    >                        jp		nc,CompletedLineGeneration
  98++DC75              ; If we hit here we skip the write of line arryay u16
  99++DC75              LL78EdgeNotVisible:                                     ; also arrive here if Edge not visible, loop next data edge.
 100++DC75              LL78:
 101++DC75 2A E2 9C             ld          hl,(varV)                           ; varV is current edge address
 102++DC78 3E 04                ld          a,4
 103++DC7A ED 31                add         hl,a
 104++DC7C 22 E2 9C             ld          (varV),hl
 105++DC7F 21 DD DB             ld          hl,PLEDGECTR                        ;
 106++DC82 34                   inc         (hl)                                ;
 107++DC83 7E                   ld          a,(hl)                              ; current edge index ++
 108++DC84                      JumpIfANEMemusng XX17,LL75Loop                  ; compare with total number of edges
 108++DC84 21 E6 9D    >                        ld    hl,XX17
 108++DC87 BE          >                        cp    (hl)
 108++DC88 C2 15 DC    >                        jp      nz,LL75Loop
 109++DC8B              CompletedLineGeneration:
 110++DC8B              LL81:
 111++DC8B              LL81SHPPT:                                              ; SHPPT ship is a point arrives here with Acc=2, bottom entry in heap
 112++DC8B 3A 0A C3             ld          a,(UbnkLineArrayLen)                ; UbnkLineArrayLen = nbr of lines loaded
 113++DC8E CB 27                sla         a
 114++DC90 CB 27                sla         a                                   ; multiple by 4 to equal number of bytes
 115++DC92 32 0B C3             ld          (UbnkLineArrayBytes),a              ; UbnkLineArrayBytes= nbr of bytes of lines laoded = array len * 4
 116++DC95              ExitEdgeDataLoop:
 117++DC95 C9                   ret
 118++DC96
# file closed: ./Universe/Ships/PrepLines.asm
1870+ DC96
1871+ DC96              UnivBankSize  EQU $ - StartOfUniv
1872+ DC96
# file closed: ./Universe/Ships/univ_ship_data.asm
 907  DC96                  DISPLAY "Universe Data - Bytes free ",/D, $2000 - (UnivBankSize)
 908  DC96                  SLOT    UniverseBankAddr
 909  DC96                  PAGE    BankUNIVDATA1
 910  DC96              	ORG	UniverseBankAddr,BankUNIVDATA1
 911  C000 FF           UNIVDATABlock1      DB $FF
 912  C001 00 00 00...                      DS $1FFF                 ; just allocate 8000 bytes for now
 913  E000
 914  E000                  SLOT    UniverseBankAddr
 915  E000                  PAGE    BankUNIVDATA2
 916  E000              	ORG	UniverseBankAddr,BankUNIVDATA2
 917  C000 FF           UNIVDATABlock2      DB $FF
 918  C001 00 00 00...                      DS $1FFF                 ; just allocate 8000 bytes for now
 919  E000
 920  E000                  SLOT    UniverseBankAddr
 921  E000                  PAGE    BankUNIVDATA3
 922  E000              	ORG	UniverseBankAddr,BankUNIVDATA3
 923  C000 FF           UNIVDATABlock3      DB $FF
 924  C001 00 00 00...                      DS $1FFF                 ; just allocate 8000 bytes for now
 925  E000
 926  E000                  SLOT    UniverseBankAddr
 927  E000                  PAGE    BankUNIVDATA4
 928  E000              	ORG	UniverseBankAddr,BankUNIVDATA4
 929  C000 FF           UNIVDATABlock4      DB $FF
 930  C001 00 00 00...                      DS $1FFF                 ; just allocate 8000 bytes for now
 931  E000
 932  E000                  SLOT    UniverseBankAddr
 933  E000                  PAGE    BankUNIVDATA5
 934  E000              	ORG	UniverseBankAddr,BankUNIVDATA5
 935  C000 FF           UNIVDATABlock5      DB $FF
 936  C001 00 00 00...                      DS $1FFF                 ; just allocate 8000 bytes for now
 937  E000
 938  E000                  SLOT    UniverseBankAddr
 939  E000                  PAGE    BankUNIVDATA6
 940  E000              	ORG	UniverseBankAddr,BankUNIVDATA6
 941  C000 FF           UNIVDATABlock6      DB $FF
 942  C001 00 00 00...                      DS $1FFF                 ; just allocate 8000 bytes for now
 943  E000
 944  E000                  SLOT    UniverseBankAddr
 945  E000                  PAGE    BankUNIVDATA7
 946  E000              	ORG	UniverseBankAddr,BankUNIVDATA7
 947  C000 FF           UNIVDATABlock7      DB $FF
 948  C001 00 00 00...                      DS $1FFF                 ; just allocate 8000 bytes for now
 949  E000
 950  E000                  SLOT    UniverseBankAddr
 951  E000                  PAGE    BankUNIVDATA8
 952  E000              	ORG	UniverseBankAddr,BankUNIVDATA8
 953  C000 FF           UNIVDATABlock8      DB $FF
 954  C001 00 00 00...                      DS $1FFF                 ; just allocate 8000 bytes for now
 955  E000
 956  E000                  SLOT    UniverseBankAddr
 957  E000                  PAGE    BankUNIVDATA9
 958  E000              	ORG	UniverseBankAddr,BankUNIVDATA9
 959  C000 FF           UNIVDATABlock9      DB $FF
 960  C001 00 00 00...                      DS $1FFF                 ; just allocate 8000 bytes for now
 961  E000
 962  E000                  SLOT    UniverseBankAddr
 963  E000                  PAGE    BankUNIVDATA10
 964  E000              	ORG	UniverseBankAddr,BankUNIVDATA10
 965  C000 FF           UNIVDATABlock10     DB $FF
 966  C001 00 00 00...                      DS $1FFF                 ; just allocate 8000 bytes for now
 967  E000
 968  E000                  SLOT    UniverseBankAddr
 969  E000                  PAGE    BankUNIVDATA11
 970  E000              	ORG	UniverseBankAddr,BankUNIVDATA11
 971  C000 FF           UNIVDATABlock11     DB $FF
 972  C001 00 00 00...                      DS $1FFF                 ; just allocate 8000 bytes for now
 973  E000
 974  E000                  SLOT    UniverseBankAddr
 975  E000                  PAGE    BankUNIVDATA12
 976  E000              	ORG	UniverseBankAddr,BankUNIVDATA12
 977  C000 FF           UNIVDATABlock12     DB $FF
 978  C001 00 00 00...                      DS $1FFF                 ; just allocate 8000 bytes for now
 979  E000
 980  E000              ; Bank 83  ------------------------------------------------------------------------------------------------------------------------
 981  E000                  SLOT    SunBankAddr
 982  E000                  PAGE    BankSunData
 983  E000              	ORG	    SunBankAddr,BankSunData
 984  C000                  INCLUDE "./Universe/Sun/sun_data.asm"
# file opened: ./Universe/Sun/sun_data.asm
   1+ C000              ; In  flight ship data tables
   2+ C000              ; In  flight ship data tables
   3+ C000              ; In  flight ship data tables
   4+ C000              ; There can be upto &12 objects in flight.
   5+ C000              ; To avoid hassle of memory heap managment, the free list
   6+ C000              ; will correspond to a memory bank offset so data will be held in
   7+ C000              ; 1 bank per universe object. Its a waste of a lot of memory but really
   8+ C000              ; 1 bank per universe object. Its a waste of a lot of memory but really
   9+ C000              ; simple that way. Each bank will be 8K and swapped on 8K slot 7 $E000 to $FFFF
  10+ C000              ; This means each gets its own line list, inwork etc
  11+ C000
  12+ C000              ; "Runtime Ship Data paged into in Bank 7"
  13+ C000              ;                      0123456789ABCDEF
  14+ C000 53 75 6E 20  StartOfSun:        DB "Sun Data ......."
  14+ C004 44 61 74 61
  14+ C008 20 2E 2E 2E
  14+ C00C 2E 2E 2E 2E
  15+ C010              ; NOTE we can cheat and pre allocate segs just using a DS for now
  16+ C010              CheckRowHLOnScreen:     MACRO   failtarget
  17+ C010 ~                                    ld      a,h                             ; is h byte set, i.e > 256 or < 0
  18+ C010 ~                                    and     a                               ; .
  19+ C010 ~                                    jr      nz,failtarget                   ; h <> 0 so fails (covers <0 and > 255
  20+ C010 ~                                    ld      a,l                             ; l bit 7 0?
  21+ C010 ~                                    and     Bit7Only                        ; covers l > 127 (screen draw area is 0 to 192 / 3 * 2 (128)
  22+ C010 ~                                    jr      nz,failtarget                   ;
  23+ C010                                      ENDM
  24+ C010
  25+ C010              ; IY = SBnKLineArray + rowValue*2
  26+ C010              IYEquRowN:              MACRO   rowValue                        ; set up iy as target address
  27+ C010 ~                                    ld      a,rowValue
  28+ C010 ~                                    ld      hl,SBnKLineArray
  29+ C010 ~                                    add     hl,a
  30+ C010 ~                                    add     hl,a
  31+ C010 ~                                    push    hl
  32+ C010 ~                                    pop     iy
  33+ C010                                      ENDM
  34+ C010              ;   \ -> & 565D \ See ship data files chosen and loaded after flight code starts running.
  35+ C010              ; Universe map substibute for INWK
  36+ C010              ;-Camera Position of Ship----------------------------------------------------------------------------------------------------------
  37+ C010              SBnKDataBlock:
  38+ C010                                      INCLUDE "./Universe/Sun/SunPosVars.asm"
# file opened: ././Universe/Sun/SunPosVars.asm
   1++C010              ;-Camera Position of Ship----------------------------------------------------------------------------------------------------------
   2++C010 00           SBnKxlo                     DB  0                       ; INWK+0
   3++C011 00           SBnKxhi                     DB  0                       ; there are hi medium low as some times these are 24 bit
   4++C012 00           SBnKxsgn                    DB  0                       ; INWK+2
   5++C013 00           SBnKylo                     DB  0                       ; INWK+3 \ ylo
   6++C014 00           SBnKyhi                     DB  0                       ; INWK+4 \ yHi
   7++C015 00           SBnKysgn                    DB  0                       ; INWK +5
   8++C016 00           SBnKzlo                     DB  0                       ; INWK +6
   9++C017 00           SBnKzhi                     DB  0                       ; INWK +7
  10++C018 00           SBnKzsgn                    DB  0                       ; INWK +8
  11++C019 00 00        SunCompassX                 DW  0
  12++C01B 00 00        SunCompassY                 DW  0
  13++C01D
# file closed: ././Universe/Sun/SunPosVars.asm
  39+ C01D                                      INCLUDE "./Universe/Sun/SunRotationMatrixVars.asm"
# file opened: ././Universe/Sun/SunRotationMatrixVars.asm
   1++C01D              ;-Rotation Matrix of Ship----------------------------------------------------------------------------------------------------------
   2++C01D              ; Rotation data is stored as lohi, but only 15 bits with 16th bit being  a sign bit. Note this is NOT 2'c compliment
   3++C01D 00 00        SBnKrotmatSidevX            DW  0                       ; INWK +21
   4++C01F              SBnKrotmatSidev             equ SBnKrotmatSidevX
   5++C01F 00 00        SBnKrotmatSidevY            DW  0                       ; INWK +23
   6++C021 00 00        SBnKrotmatSidevZ            DW  0                       ; INWK +25
   7++C023 00 00        SBnKrotmatRoofvX            DW  0                       ; INWK +15
   8++C025              SBnKrotmatRoofv             equ SBnKrotmatRoofvX
   9++C025 00 00        SBnKrotmatRoofvY            DW  0                       ; INWK +17
  10++C027 00 00        SBnKrotmatRoofvZ            DW  0                       ; INWK +19
  11++C029 00 00        SBnKrotmatNosevX            DW  0                       ; INWK +9
  12++C02B              SBnKrotmatNosev             EQU SBnKrotmatNosevX
  13++C02B 00 00        SBnKrotmatNosevY            DW  0                       ; INWK +11
  14++C02D 00 00        SBnKrotmatNosevZ            DW  0                       ; INWK +13
  15++C02F
# file closed: ././Universe/Sun/SunRotationMatrixVars.asm
  40+ C02F                                      INCLUDE "./Universe/Sun/SunAIRuntimeData.asm"
# file opened: ././Universe/Sun/SunAIRuntimeData.asm
   1++C02F              ; -- Ship AI data
   2++C02F 00           SBnKRotXCounter             DB  0                       ; INWK +29
   3++C030 00           SBnKRotZCounter             DB  0                       ; INWK +30
   4++C031 00           SBnkCam0yLo                 DB  0                       ; INWK +33 ????
   5++C032 00           SBnkCam0yHi                 DB  0                       ; INWK +34?????
   6++C033
# file closed: ././Universe/Sun/SunAIRuntimeData.asm
  41+ C033
  42+ C033
  43+ C033                                      INCLUDE "./Universe/Sun/SunXX16Vars.asm"
# file opened: ././Universe/Sun/SunXX16Vars.asm
   1++C033              ;-- XX16 --------------------------------------------------------------------------------------------------------------------------
   2++C033 00 00        SBnkTransmatSidevX          DW  0               ; XX16+0
   3++C035              SBnkTransmatSidev           EQU SBnkTransmatSidevX
   4++C035 00 00        SBnkTransmatSidevY          DW 0                ; XX16+2
   5++C037 00 00        SBnkTransmatSidevZ          DW 0                ; XX16+2
   6++C039 00 00        SBnkTransmatRoofvX          DW 0
   7++C03B              SBnkTransmatRoofv           EQU SBnkTransmatRoofvX
   8++C03B 00 00        SBnkTransmatRoofvY          DW 0                ; XX16+2
   9++C03D 00 00        SBnkTransmatRoofvZ          DW 0                ; XX16+2
  10++C03F 00 00        SBnkTransmatNosevX          DW 0
  11++C041              SBnkTransmatNosev           EQU SBnkTransmatNosevX
  12++C041 00 00        SBnkTransmatNosevY          DW 0                ; XX16+2
  13++C043 00 00        SBnkTransmatNosevZ          DW 0                ; XX16+2
  14++C045 00 00        SBnkTransmatTransX          DW 0
  15++C047 00 00        SBnkTransmatTransY          DW 0
  16++C049 00 00        SBnkTransmatTransZ          DW 0
  17++C04B              SunXX16                      equ SBnkTransmatSidev
  18++C04B              ;-- XX16Inv --------------------------------------------------------------------------------------------------------------------------
  19++C04B 00 00        SBnkTransInvRow0x0          DW 0
  20++C04D 00 00        SBnkTransInvRow0x1          DW 0
  21++C04F 00 00        SBnkTransInvRow0x2          DW 0
  22++C051 00 00        SBnkTransInvRow0x3          DW 0
  23++C053 00 00        SBnkTransInvRow1y0          DW 0
  24++C055 00 00        SBnkTransInvRow1y1          DW 0
  25++C057 00 00        SBnkTransInvRow1y2          DW 0
  26++C059 00 00        SBnkTransInvRow1y3          DW 0
  27++C05B 00 00        SBnkTransInvRow2z0          DW 0
  28++C05D 00 00        SBnkTransInvRow2z1          DW 0
  29++C05F 00 00        SBnkTransInvRow2z2          DW 0
  30++C061 00 00        SBnkTransInvRow2z3          DW 0
  31++C063
  32++C063              SunXX16Inv             equ SBnkTransInvRow0x0
  33++C063
# file closed: ././Universe/Sun/SunXX16Vars.asm
  44+ C063                                      INCLUDE "./Universe/Sun/SunXX25Vars.asm"
# file opened: ././Universe/Sun/SunXX25Vars.asm
   1++C063              ;-- XX25 --------------------------------------------------------------------------------------------------------------------------
   2++C063 00           SBnKProjxLo                 DB  0
   3++C064 00           SBnKProjxHi                 DB  0
   4++C065 00           SBnKProjxSgn                DB  0
   5++C066              SBnKProjx                   EQU SBnKProjxLo
   6++C066 00           SBnKProjyLo                 DB  0
   7++C067 00           SBnKProjyHi                 DB  0
   8++C068 00           SBnKProjySgn                DB  0
   9++C069              SBnKProjy                   EQU SBnKProjyLo
  10++C069 00           SBnKProjzLo                 DB  0
  11++C06A 00           SBnKProjzHi                 DB  0
  12++C06B 00           SBnKProjzSgn                DB  0
  13++C06C              SBnKProjz                   EQU SBnKProjzLo
  14++C06C              SXX25                       EQU SBnKProjxLo
  15++C06C
# file closed: ././Universe/Sun/SunXX25Vars.asm
  45+ C06C                                      INCLUDE "./Universe/Sun/SunXX18Vars.asm"
# file opened: ././Universe/Sun/SunXX18Vars.asm
   1++C06C              ;-- XX18 --------------------------------------------------------------------------------------------------------------------------
   2++C06C 00           SBnKDrawCam0xLo             DB  0               ; XX18+0
   3++C06D 00           SBnKDrawCam0xHi             DB  0               ; XX18+1
   4++C06E 00           SBnKDrawCam0xSgn            DB  0               ; XX18+2
   5++C06F              SBnKDrawCam0x               equ SBnKDrawCam0xLo
   6++C06F 00           SBnKDrawCam0yLo             DB  0               ; XX18+3
   7++C070 00           SBnKDrawCam0yHi             DB  0               ; XX18+4
   8++C071 00           SBnKDrawCam0ySgn            DB  0               ; XX18+5
   9++C072              SBnKDrawCam0y               equ SBnKDrawCam0yLo
  10++C072 00           SBnKDrawCam0zLo             DB  0               ; XX18+6
  11++C073 00           SBnKDrawCam0zHi             DB  0               ; XX18+7
  12++C074 00           SBnKDrawCam0zSgn            DB  0               ; XX18+8
  13++C075              SBnKDrawCam0z               equ SBnKDrawCam0zLo
  14++C075              SXX18                       equ SBnKDrawCam0xLo
  15++C075
# file closed: ././Universe/Sun/SunXX18Vars.asm
  46+ C075
  47+ C075              ; Used to make 16 bit reads a little cleaner in source code
  48+ C075 00 00 00     SBnKzPoint                  DS  3
  49+ C078              SBnKzPointLo                equ SBnKzPoint
  50+ C078              SBnKzPointHi                equ SBnKzPoint+1
  51+ C078              SBnKzPointSign              equ SBnKzPoint+2
  52+ C078                                      INCLUDE "./Universe/Sun/SunXX15Vars.asm"
# file opened: ././Universe/Sun/SunXX15Vars.asm
   1++C078              ;-- XX15 --------------------------------------------------------------------------------------------------------------------------
   2++C078 00           SBnKXScaled                 DB  0               ; XX15+0Xscaled
   3++C079 00           SBnKXScaledSign             DB  0               ; XX15+1xsign
   4++C07A 00           SBnKYScaled                 DB  0               ; XX15+2yscaled
   5++C07B 00           SBnKYScaledSign             DB  0               ; XX15+3ysign
   6++C07C 00           SBnKZScaled                 DB  0               ; XX15+4zscaled
   7++C07D 00           SBnKZScaledSign             DB  0               ; XX15+5zsign
   8++C07E
   9++C07E              SXX15                       equ SBnKXScaled
  10++C07E              SXX15VecX                   equ SXX15
  11++C07E              SXX15VecY                   equ SXX15+1
  12++C07E              SXX15VecZ                   equ SXX15+2
  13++C07E              SBnKXPoint                  equ SXX15
  14++C07E              SBnKXPointLo                equ SXX15+0
  15++C07E              SBnKXPointHi                equ SXX15+1
  16++C07E              SBnKXPointSign              equ SXX15+2
  17++C07E              SBnKYPoint                  equ SXX15+3
  18++C07E              SBnKYPointLo                equ SXX15+3
  19++C07E              SBnKYPointHi                equ SXX15+4
  20++C07E              SBnKYPointSign              equ SXX15+5
  21++C07E
# file closed: ././Universe/Sun/SunXX15Vars.asm
  53+ C07E                                      INCLUDE "./Universe/Sun/SunXX12Vars.asm"
# file opened: ././Universe/Sun/SunXX12Vars.asm
   1++C07E              ;-- transmat0 --------------------------------------------------------------------------------------------------------------------------
   2++C07E              ; Note XX12 comes after as some logic in normal processing uses XX15 and XX12 combines
   3++C07E 00           SBnKXX12xLo                 DB  0               ; XX12+0
   4++C07F 00           SBnKXX12xSign               DB  0               ; XX12+1
   5++C080 00           SBnKXX12yLo                 DB  0               ; XX12+2
   6++C081 00           SBnKXX12ySign               DB  0               ; XX12+3
   7++C082 00           SBnKXX12zLo                 DB  0               ; XX12+4
   8++C083 00           SBnKXX12zSign               DB  0               ; XX12+5
   9++C084 00 00 00...  SXX12Save                   DS  6
  10++C08A 00 00 00...  SXX12Save2                  DS  6
  11++C090              SXX12                       equ SBnKXX12xLo
  12++C090              varSXX12                    equ SBnKXX12xLo
  13++C090              ; Repurposed XX12 when plotting lines
  14++C090              SBnkY2                      equ SXX12+0
  15++C090              SbnKy2Lo                    equ SXX12+0
  16++C090              SBnkY2Hi                    equ SXX12+1
  17++C090              SBnkDeltaXLo                equ SXX12+2
  18++C090              SBnkDeltaXHi                equ SXX12+3
  19++C090              SBnkDeltaYLo                equ SXX12+4
  20++C090              SBnkDeltaYHi                equ SXX12+5
  21++C090              SbnkGradient                equ SXX12+2
  22++C090              SBnkTemp1                   equ SXX12+2
  23++C090              SBnkTemp1Lo                 equ SXX12+2
  24++C090              SBnkTemp1Hi                 equ SXX12+3
  25++C090              SBnkTemp2                   equ SXX12+3
  26++C090              SBnkTemp2Lo                 equ SXX12+3
  27++C090              SBnkTemp2Hi                 equ SXX12+4
  28++C090
# file closed: ././Universe/Sun/SunXX12Vars.asm
  54+ C090
  55+ C090
  56+ C090              ; Post clipping the results are now 8 bit
  57+ C090 00           SBnKVisibility              DB  0               ; replaces general purpose xx4 in rendering
  58+ C091 00           SBnKProjectedY              DB  0
  59+ C092 00           SBnKProjectedX              DB  0
  60+ C093              SBnKProjected               equ SBnKProjectedY  ; resultant projected position
  61+ C093 00 00 00...  SunXX15Save                 DS  8
  62+ C09B 00 00 00...  SunXX15Save2                DS  8
  63+ C0A3              ; Heap (or array) information for lines and normals
  64+ C0A3              ; Coords are stored XY,XY,XY,XY
  65+ C0A3              ; Normals
  66+ C0A3              ; This needs re-oprganising now.
  67+ C0A3              ; Runtime Calculation Store
  68+ C0A3
  69+ C0A3              SunLineArraySize            equ 128 * 2
  70+ C0A3              ; Storage arrays for data
  71+ C0A3
  72+ C0A3 00 00 00...  SBnKLineArray               DS SunLineArraySize ; XX19 Holds the clipped line details
  73+ C1A3              SBnKLinesHeapMax            EQU $ - SBnKLineArray
  74+ C1A3
  75+ C1A3 00 00        LineArrayPtr                DW  0
  76+ C1A5
  77+ C1A5              SBnK_Data_len               EQU $ - SBnKDataBlock
  78+ C1A5
  79+ C1A5              ; --------------------------------------------------------------
  80+ C1A5 21 10 C0     ResetSBnKData:          ld      hl,SBnKDataBlock
  81+ C1A8 11 95 01                             ld      de,SBnK_Data_len
  82+ C1AB AF                                   xor     a
  83+ C1AC CD A5 99                             call    memfill_dma
  84+ C1AF C9                                   ret
  85+ C1B0              ; --------------------------------------------------------------
  86+ C1B0 21 10 C0     ResetSBnKPosition:      ld      hl,SBnKxlo
  87+ C1B3 06 09                                ld      b, 3*3
  88+ C1B5 AF                                   xor     a
  89+ C1B6 77           .zeroLoop:              ld      (hl),a
  90+ C1B7 23                                   inc     hl
  91+ C1B8 10 FC                                djnz    .zeroLoop
  92+ C1BA C9                                   ret
  93+ C1BB              ; This uses UBNKNodeArray as the list
  94+ C1BB              ; the array is 256 * 2 bytes
  95+ C1BB              ; counter is current row y pos
  96+ C1BB              ; byte 1 is start x pos
  97+ C1BB              ; byte 2 is end x pos
  98+ C1BB              ; if they are both 0 then skip
  99+ C1BB              ; its always horizontal, yellow
 100+ C1BB
 101+ C1BB              ; PLANET
 102+ C1BB
 103+ C1BB
 104+ C1BB              .SunNoDraw:             SetCarryFlag                    ; ship is behind so do not draw, so we don't care abour draw as dot
 104+ C1BB 37          >                        scf
 105+ C1BC C9                                   ret
 106+ C1BD
 107+ C1BD
 108+ C1BD
 109+ C1BD              SunBankDraw:            MACRO
 110+ C1BD ~            .drawLoop               ld      a,(hl)
 111+ C1BD ~                                    ld      c,a                     ; c = left column
 112+ C1BD ~                                    inc     hl
 113+ C1BD ~                                    ld      d,(hl)                  ; d = right col
 114+ C1BD ~                                    inc     hl                      ; now ready for next linel
 115+ C1BD ~                                    push    hl,,bc
 116+ C1BD ~                                    cp      d                       ; if both points are the same then no line (we will ignore single pixel as it can't happen at this stage other than tips of circles)
 117+ C1BD ~                                    IfResultZeroGoto .NoLineDraw
 118+ C1BD ~                                    ld      a,d                     ; get right col back
 119+ C1BD ~                                    sub     c                       ; subtract left so a = length
 120+ C1BD ~                                    inc     a                       ; so its at least 1 , TODO add cp jr c logic in dma routine so that it does non dma if line < x
 121+ C1BD ~                                    call    z, .FixWidth
 122+ C1BD ~                                    ld      d,a                     ; de = length (e - d)
 123+ C1BD ~                                    ld      e,216                   ; yellow
 124+ C1BD ~                                    call    l2_draw_horz_dma        ; draw without bank switch
 125+ C1BD ~            .NoLineDraw:            pop     hl,,bc
 126+ C1BD ~                                    inc     b
 127+ C1BD ~                                    dec     iyh
 128+ C1BD ~                                    IfResultNotZeroGoto  .drawLoop
 129+ C1BD                                      ENDM
 130+ C1BD
 131+ C1BD
 132+ C1BD
 133+ C1BD              SunDraw:                MMUSelectLayer2
 133+ C1BD ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 134+ C1C1 3A A1 C5     .OptimiseStartPos:      ld      a,(MinYOffset)
 135+ C1C4                                      JumpIfAIsZero .OffsetIsZero     ; if offset is 0 then just initate as normal
 135+ C1C4 A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
 135+ C1C5 CA D5 C1    >                        jp	    z, .OffsetIsZero
 136+ C1C8                                      JumpIfALTNusng 64, .OffsetLT64  ; if offset >=64 then we adjust and mve to bank 0
 136+ C1C8 FE 40       >                        cp      64
 136+ C1CA DA E2 C1    >                        jp		c, .OffsetLT64
 137+ C1CD D6 40        .OffsetGTE64:           sub     64
 138+ C1CF 32 A1 C5                             ld      (MinYOffset),a          ; adjust offset for bank 2
 139+ C1D2 C3 1A C2                             jp      .StartBank2
 140+ C1D5 06 00        .OffsetIsZero:          ld      b,0                     ; row
 141+ C1D7 FD 26 40                             ld      iyh,64                  ; counter
 142+ C1DA 21 A3 C0                             ld      hl,SBnKLineArray        ; set hl to start of array
 143+ C1DD C3 F4 C1                             jp      .StartBank1
 144+ C1E0              ;-- Snuck routine in here so that the macro will be happier
 145+ C1E0 3D           .FixWidth:              dec     a                       ; if carry resulted in a value of zero then correct
 146+ C1E1 C9                                   ret
 147+ C1E2 21 A3 C0     .OffsetLT64:            ld      hl,SBnKLineArray        ; adjust hl for line array offset
 148+ C1E5 ED 31                                add     hl,a                    ; .
 149+ C1E7 ED 31                                add     hl,a                    ; .
 150+ C1E9 47                                   ld      b,a                     ; set b row to the actual offset
 151+ C1EA 4F                                   ld      c,a                     ; iyh = 64 - Y offset
 152+ C1EB 3E 40                                ld      a,64                    ; .
 153+ C1ED 91                                   sub     c                       ; .
 154+ C1EE FD 67                                ld      iyh,a
 155+ C1F0 AF                                   xor     a                       ; Ready bank 2 with no offset
 156+ C1F1 32 A1 C5                             ld      (MinYOffset),a          ; .
 157+ C1F4 D9           .StartBank1:            exx
 158+ C1F5 3E 00                                ld      a,LAYER2_SHIFTED_SCREEN_TOP
 159+ C1F7 CD 37 E0                             call    asm_l2_bank_select      ; get in the first bank, we will only then bank select when needed
 160+ C1FA D9                                   exx
 161+ C1FB                                      SunBankDraw
 161+ C1FB 7E          >.drawLoop               ld      a,(hl)
 161+ C1FC 4F          >                        ld      c,a                     ; c = left column
 161+ C1FD 23          >                        inc     hl
 161+ C1FE 56          >                        ld      d,(hl)                  ; d = right col
 161+ C1FF 23          >                        inc     hl                      ; now ready for next linel
 161+ C200 E5 C5       >                        push    hl,,bc
 161+ C202 BA          >                        cp      d                       ; if both points are the same then no line (we will ignore single pixel as it can't happen at this stage other than tips of circles)
 161+ C203             >                        IfResultZeroGoto .NoLineDraw
 161+ C203 CA 12 C2    >                        jp	z,.NoLineDraw
 161+ C206 7A          >                        ld      a,d                     ; get right col back
 161+ C207 91          >                        sub     c                       ; subtract left so a = length
 161+ C208 3C          >                        inc     a                       ; so its at least 1 , TODO add cp jr c logic in dma routine so that it does non dma if line < x
 161+ C209 CC E0 C1    >                        call    z, .FixWidth
 161+ C20C 57          >                        ld      d,a                     ; de = length (e - d)
 161+ C20D 1E D8       >                        ld      e,216                   ; yellow
 161+ C20F CD 8F E2    >                        call    l2_draw_horz_dma        ; draw without bank switch
 161+ C212 C1 E1       >.NoLineDraw:            pop     hl,,bc
 161+ C214 04          >                        inc     b
 161+ C215 FD 25       >                        dec     iyh
 161+ C217             >                        IfResultNotZeroGoto  .drawLoop
 161+ C217 C2 FB C1    >                        jp	nz,.drawLoop
 162+ C21A 3A A1 C5     .StartBank2:            ld      a,(MinYOffset)
 163+ C21D                                      JumpIfAIsZero .OffsetBank2IsZero; if offset is 0 then we just continue, offset can never be >127 else there would be no draw
 163+ C21D A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
 163+ C21E CA 32 C2    >                        jp	    z, .OffsetBank2IsZero
 164+ C221 21 23 C1     .NotZeroOffset:         ld      hl,SBnKLineArray + (64 * 2); adjust to correct offset
 165+ C224 ED 31                                add     hl,a
 166+ C226 ED 31                                add     hl,a
 167+ C228 4F                                   ld      c,a                     ; iyh = 64 - offset
 168+ C229 3E 40                                ld      a,64                    ; .
 169+ C22B 91                                   sub     c                       ; .
 170+ C22C FD 67                                ld      iyh,a                   ; .
 171+ C22E 41                                   ld      b,c                     ; b = offset row
 172+ C22F C3 3A C2                             jp      .drawLineBank2
 173+ C232 21 23 C1     .OffsetBank2IsZero:     ld      hl,SBnKLineArray + (64 * 2); start with offset adjusted
 174+ C235 06 00                                ld      b,0
 175+ C237 FD 26 40                             ld      iyh,64
 176+ C23A D9           .drawLineBank2:         exx
 177+ C23B 3E 40                                ld      a,LAYER2_SHIFTED_SCREEN_MIDDLE
 178+ C23D CD 37 E0                             call    asm_l2_bank_select      ; now do the lower bank
 179+ C240 D9                                   exx
 180+ C241              ; Could make this a sub routine but unwrapping saves a call
 181+ C241                                      SunBankDraw
 181+ C241 7E          >.drawLoop               ld      a,(hl)
 181+ C242 4F          >                        ld      c,a                     ; c = left column
 181+ C243 23          >                        inc     hl
 181+ C244 56          >                        ld      d,(hl)                  ; d = right col
 181+ C245 23          >                        inc     hl                      ; now ready for next linel
 181+ C246 E5 C5       >                        push    hl,,bc
 181+ C248 BA          >                        cp      d                       ; if both points are the same then no line (we will ignore single pixel as it can't happen at this stage other than tips of circles)
 181+ C249             >                        IfResultZeroGoto .NoLineDraw
 181+ C249 CA 58 C2    >                        jp	z,.NoLineDraw
 181+ C24C 7A          >                        ld      a,d                     ; get right col back
 181+ C24D 91          >                        sub     c                       ; subtract left so a = length
 181+ C24E 3C          >                        inc     a                       ; so its at least 1 , TODO add cp jr c logic in dma routine so that it does non dma if line < x
 181+ C24F CC E0 C1    >                        call    z, .FixWidth
 181+ C252 57          >                        ld      d,a                     ; de = length (e - d)
 181+ C253 1E D8       >                        ld      e,216                   ; yellow
 181+ C255 CD 8F E2    >                        call    l2_draw_horz_dma        ; draw without bank switch
 181+ C258 C1 E1       >.NoLineDraw:            pop     hl,,bc
 181+ C25A 04          >                        inc     b
 181+ C25B FD 25       >                        dec     iyh
 181+ C25D             >                        IfResultNotZeroGoto  .drawLoop
 181+ C25D C2 41 C2    >                        jp	nz,.drawLoop
 182+ C260 C9                                   ret
 183+ C261
 184+ C261              ; --------------------------------------------------------------
 185+ C261              ; This sets current universe object to a star / sun, they use sign + 23 bit positions
 186+ C261 CD A5 C1     CreateSun:              call    ResetSBnKData
 187+ C264 3A D8 9E                             ld      a,(WorkingSeeds+3)
 188+ C267 E6 07                                and     %00000111
 189+ C269 F6 81                                or      %10000001
 190+ C26B 32 18 C0                             ld      (SBnKzsgn),a
 191+ C26E 3A DA 9E                             ld      a,(WorkingSeeds+5)
 192+ C271 E6 03                                and     %00000011
 193+ C273 32 12 C0                             ld      (SBnKxsgn),a
 194+ C276 32 15 C0                             ld      (SBnKysgn),a
 195+ C279 21 00 00                             ld      hl, $0000
 196+ C27C 22 17 C0                             ld      (SBnKzhi),hl
 197+ C27F 3E E3                                ld      a, $E3
 198+ C281 32 16 C0                             ld      (SBnKzlo),a
 199+ C284 C9                                   ret
 200+ C285              ; --------------------------------------------------------------
 201+ C285              ; This creates a sun relative to space station on launch
 202+ C285 CD A5 C1     CreateSunLaunched:      call    ResetSBnKData
 203+ C288 21 00 00                             ld      hl,0
 204+ C28B 3E 00                                ld      a,0
 205+ C28D 22 10 C0                             ld      (SBnKxlo),hl
 206+ C290 22 13 C0                             ld      (SBnKylo),hl
 207+ C293 21 00 E0                             ld      hl,$E000
 208+ C296 22 16 C0                             ld      (SBnKzlo),hl
 209+ C299 32 12 C0                             ld      (SBnKxsgn),a
 210+ C29C 32 18 C0                             ld      (SBnKzsgn),a
 211+ C29F 3E 06                                ld      a,$06
 212+ C2A1 32 15 C0                             ld      (SBnKysgn),a
 213+ C2A4 C9                                   ret
 214+ C2A5              ; --------------------------------------------------------------
 215+ C2A5              ; This sets current universe object to a planet,they use sign + 23 bit positions
 216+ C2A5              ;;TODOCreatePlanet:           call    ResetSBnKData
 217+ C2A5              ;;TODO                        ld      a,(DisplayTekLevel)
 218+ C2A5              ;;TODO                        and     $00000010               ; Set A = 128 or 130 depending on bit 1 of the system's tech level
 219+ C2A5              ;;TODO                        or      $10000000
 220+ C2A5              ;;TODO                        ld      (SBnKShipType),a
 221+ C2A5              ;;TODO                        xor     a
 222+ C2A5              ;;TODO                        ld      (SBnKaiatkecm),a
 223+ C2A5              ;;TODO                        MaxUnivPitchAndRoll
 224+ C2A5              ;;TODO                        ld      a,(WorkingSeeds+1)      ; a= bits 1 and 0 of working seed1 + 3 + carry
 225+ C2A5              ;;TODO                        and     %00000011               ; .
 226+ C2A5              ;;TODO                        adc     3                       ; .
 227+ C2A5              ;;TODO                        ld      (SBnKzsgn),a            ; set z sign to 3 + C + 0..3 bits
 228+ C2A5              ;;TODO                        rr      a
 229+ C2A5              ;;TODO                        ld      (PlanetXsgn),a
 230+ C2A5              ;;TODO                        ld      (PlanetYsgn),a
 231+ C2A5              ;;TODO                        ret
 232+ C2A5
 233+ C2A5
 234+ C2A5                                 ;     include "./Maths/ADDHLDESignBC.asm"
 235+ C2A5
 236+ C2A5 7C           SunADDHLDESignedv3:     ld      a,h
 237+ C2A6 E6 80                                and     SignOnly8Bit
 238+ C2A8 47                                   ld      b,a                         ;save sign bit in b
 239+ C2A9 AA                                   xor     d                           ;if h sign and d sign were different then bit 7 of a will be 1 which means
 240+ C2AA                                      JumpIfNegative .SunADDHLDEOppSGN    ;Signs are opposite there fore we can subtract to get difference
 240+ C2AA FA C5 C2    >                        jp		m, .SunADDHLDEOppSGN
 241+ C2AD 78           .SunADDHLDESameSigns:   ld      a,b
 242+ C2AE B2                                   or      d
 243+ C2AF                                      JumpIfNegative .SunADDHLDESameNeg   ; optimisation so we can just do simple add if both positive
 243+ C2AF FA B7 C2    >                        jp		m, .SunADDHLDESameNeg
 244+ C2B2                                      JumpIfNegative .SunADDHLDESameNeg   ; optimisation so we can just do simple add if both positive
 244+ C2B2 FA B7 C2    >                        jp		m, .SunADDHLDESameNeg
 245+ C2B5 19                                   add     hl,de
 246+ C2B6 C9                                   ret
 247+ C2B7 7C           .SunADDHLDESameNeg:     ld      a,h                         ; so if we enter here then signs are the same so we clear the 16th bit
 248+ C2B8 E6 7F                                and     SignMask8Bit                ; we could check the value of b for optimisation
 249+ C2BA 67                                   ld      h,a
 250+ C2BB 7A                                   ld      a,d
 251+ C2BC E6 7F                                and     SignMask8Bit
 252+ C2BE 57                                   ld      d,a
 253+ C2BF 19                                   add     hl,de
 254+ C2C0 3E 80                                ld      a,SignOnly8Bit
 255+ C2C2 B4                                   or      h                           ; now set bit for negative value, we won't bother with overflow for now TODO
 256+ C2C3 67                                   ld      h,a
 257+ C2C4 C9                                   ret
 258+ C2C5 7C           .SunADDHLDEOppSGN:      ld      a,h                         ; so if we enter here then signs are the same so we clear the 16th bit                     ; here HL and DE are opposite
 259+ C2C6 E6 7F                                and     SignMask8Bit                ; we could check the value of b for optimisation
 260+ C2C8 67                                   ld      h,a
 261+ C2C9 7A                                   ld      a,d
 262+ C2CA E6 7F                                and     SignMask8Bit
 263+ C2CC 57                                   ld      d,a
 264+ C2CD B7                                   or      a
 265+ C2CE ED 52                                sbc     hl,de
 266+ C2D0 38 04                                jr      c,.SunADDHLDEOppInvert
 267+ C2D2 78           .SunADDHLDEOppSGNNoCarry:   ld      a,b                         ; we got here so hl > de therefore we can just take hl's previous sign bit
 268+ C2D3 B4                                   or      h
 269+ C2D4 67                                   ld      h,a                         ; set the previou sign value
 270+ C2D5 C9                                   ret
 271+ C2D6              .SunADDHLDEOppInvert:       NegHL                                                   ; we need to flip the sign and 2'c the Hl result
 271+ C2D6 AF          >                    xor a
 271+ C2D7 95          >                    sub l
 271+ C2D8 6F          >                    ld l,a
 271+ C2D9 9F          >                    sbc a,a
 271+ C2DA 94          >                    sub h
 271+ C2DB 67          >                    ld h,a
 272+ C2DC 78                                   ld      a,b
 273+ C2DD EE 80                                xor     SignOnly8Bit                ; flip sign bit
 274+ C2DF B4                                   or      h
 275+ C2E0 67                                   ld      h,a                         ; recover sign
 276+ C2E1 C9                                   ret
 277+ C2E2
 278+ C2E2              ; we could cheat, flip the sign of DE and just add but its not very optimised
 279+ C2E2 7C           .SunSUBHLDESignedv3:        ld      a,h
 280+ C2E3 E6 80                                and     SignOnly8Bit
 281+ C2E5 47                                   ld      b,a                         ;save sign bit in b
 282+ C2E6 AA                                   xor     d                           ;if h sign and d sign were different then bit 7 of a will be 1 which means
 283+ C2E7                                      JumpIfNegative .SunSUBHLDEOppSGN        ;Signs are opposite therefore we can add
 283+ C2E7 FA 15 C3    >                        jp		m, .SunSUBHLDEOppSGN
 284+ C2EA 78           .SunSUBHLDESameSigns:       ld      a,b
 285+ C2EB B2                                   or      d
 286+ C2EC                                      JumpIfNegative .SunSUBHLDESameNeg       ; optimisation so we can just do simple add if both positive
 286+ C2EC FA F6 C2    >                        jp		m, .SunSUBHLDESameNeg
 287+ C2EF B7                                   or      a
 288+ C2F0 ED 52                                sbc     hl,de
 289+ C2F2                                      JumpIfNegative .SunSUBHLDESameOvrFlw
 289+ C2F2 FA 09 C3    >                        jp		m, .SunSUBHLDESameOvrFlw
 290+ C2F5 C9                                   ret
 291+ C2F6 7C           .SunSUBHLDESameNeg:         ld      a,h                         ; so if we enter here then signs are the same so we clear the 16th bit
 292+ C2F7 E6 7F                                and     SignMask8Bit                ; we could check the value of b for optimisation
 293+ C2F9 67                                   ld      h,a
 294+ C2FA 7A                                   ld      a,d
 295+ C2FB E6 7F                                and     SignMask8Bit
 296+ C2FD 57                                   ld      d,a
 297+ C2FE B7                                   or      a
 298+ C2FF ED 52                                sbc     hl,de
 299+ C301                                      JumpIfNegative .SunSUBHLDESameOvrFlw
 299+ C301 FA 09 C3    >                        jp		m, .SunSUBHLDESameOvrFlw
 300+ C304 7C                                   ld      a,h                         ; now set bit for negative value, we won't bother with overflow for now TODO
 301+ C305 F6 80                                or      SignOnly8Bit
 302+ C307 67                                   ld      h,a
 303+ C308 C9                                   ret
 304+ C309              .SunSUBHLDESameOvrFlw:      NegHL                                                        ; we need to flip the sign and 2'c the Hl result
 304+ C309 AF          >                    xor a
 304+ C30A 95          >                    sub l
 304+ C30B 6F          >                    ld l,a
 304+ C30C 9F          >                    sbc a,a
 304+ C30D 94          >                    sub h
 304+ C30E 67          >                    ld h,a
 305+ C30F 78                                   ld      a,b
 306+ C310 EE 80                                xor     SignOnly8Bit                ; flip sign bit
 307+ C312 B4                                   or      h
 308+ C313 67                                   ld      h,a                         ; recover sign
 309+ C314 C9                                   ret
 310+ C315 B7           .SunSUBHLDEOppSGN:          or      a                                               ; here HL and DE are opposite so we can add the values
 311+ C316 7C                                   ld      a,h                         ; so if we enter here then signs are the same so we clear the 16th bit
 312+ C317 E6 7F                                and     SignMask8Bit                ; we could check the value of b for optimisation
 313+ C319 67                                   ld      h,a
 314+ C31A 7A                                   ld      a,d
 315+ C31B E6 7F                                and     SignMask8Bit
 316+ C31D 57                                   ld      d,a
 317+ C31E 19                                   add     hl,de
 318+ C31F 78                                   ld      a,b                         ; we got here so hl > de therefore we can just take hl's previous sign bit
 319+ C320 B4                                   or      h
 320+ C321 67                                   ld      h,a                         ; set the previou sign value
 321+ C322 C9                                   ret
 322+ C323
 323+ C323
 324+ C323              .SunSBCHLDESigned:      JumpOnBitSet h,7,.SunSBCHLDEhlNeg
 324+ C323 CB 7C       >                        bit 	7,h
 324+ C325 C2 36 C3    >                        jp      nz,.SunSBCHLDEhlNeg
 325+ C328              .SunSBCHLDEhlPos:       JumpOnBitSet h,7,.SunSBCHLDEhlNeg
 325+ C328 CB 7C       >                        bit 	7,h
 325+ C32A C2 36 C3    >                        jp      nz,.SunSBCHLDEhlNeg
 326+ C32D ED 52        .SunSBCHLDEhlPosDePos:  sbc     hl,de                           ; ignore overflow for now will sort later TODO
 327+ C32F C9                                   ret
 328+ C330 CB BA        .SunSBCHLDEhlPosDeNeg:  res     7,d
 329+ C332 19                                   add     hl,de                           ; ignore overflow for now will sort later TODO
 330+ C333 CB FA                                set     7,d
 331+ C335 C9                                   ret
 332+ C336 CB BC        .SunSBCHLDEhlNeg:       res     7,h
 333+ C338                                      JumpOnBitSet d,7,.SunSBCHLDEhlNegdeNeg
 333+ C338 CB 7A       >                        bit 	7,d
 333+ C33A C2 42 C3    >                        jp      nz,.SunSBCHLDEhlNegdeNeg
 334+ C33D ED 52        .SunSBCHLDEhlNegdePos:  sbc     hl,de                       ; ignore overflow for now will sort later TODO
 335+ C33F CB FC                                set     7,h
 336+ C341 C9                                   ret
 337+ C342 CB BA        .SunSBCHLDEhlNegdeNeg:      res     7,d
 338+ C344 19                                   add     hl,de                   ; ignore overflow for now will sort later TODO
 339+ C345 CB FA                                set     7,d
 340+ C347 CB FC                                set     7,h
 341+ C349 C9                                   ret
 342+ C34A
 343+ C34A
 344+ C34A                                      include "./Universe/Sun/TransposeSunXX12BySunToSunXX15.asm"
# file opened: ././Universe/Sun/TransposeSunXX12BySunToSunXX15.asm
   1++C34A              TransposeSXX12BySunToSXX15:
   2++C34A 2A 7E C0                             ld		hl,(SBnKXX12xLo)					; get X into HL
   3++C34D 7C                                   ld		a,h			                        ; get XX12 Sign
   4++C34E E6 80                                and		$80									; check sign bit on high byte
   5++C350 47                                   ld		b,a									; and put it in of 12xlo in b
   6++C351                                      ;110921 debugld      h,0
   7++C351 7C                                   ld      a,h
   8++C352 E6 7F                                and     $7F
   9++C354 67                                   ld      h,a
  10++C355                                      ;110921 debugld      h,0
  11++C355 ED 5B 10 C0                          ld		de,(SBnKxlo)						;
  12++C359 3A 12 C0                             ld		a,(SBnKxsgn)						; get Ship Pos (low,high,sign)
  13++C35C E6 80                                and		$80									; make sure we only have bit 7
  14++C35E 4F                                   ld		c,a									; and put sign of unkxsgn c
  15++C35F CD 7B AC                             call 	ADDHLDESignBC; XX12ProcessCalcHLPlusDESignBC		; this will result in HL = result and A = sign
  16++C362 B4                                   or		h									; combine sign in A with H to give 15 bit signed (*NOT* 2's c)
  17++C363 67                                   ld		h,a
  18++C364 22 78 C0                             ld		(SBnKXScaled),hl					; now write it out to XX15 X pos
  19++C367              ; ..................................
  20++C367 2A 80 C0                             ld		hl,(SBnKXX12yLo)					; Repeat above for Y coordinate
  21++C36A 7C                                   ld		a,h
  22++C36B E6 80                                and		$80
  23++C36D 47                                   ld		b,a
  24++C36E                                      ;110921 debugld      h,0
  25++C36E 7C                                   ld      a,h
  26++C36F E6 7F                                and     $7F
  27++C371 67                                   ld      h,a
  28++C372                                      ;110921 debugld      h,0
  29++C372 ED 5B 13 C0                          ld		de,(SBnKylo)
  30++C376 3A 15 C0                             ld		a,(SBnKysgn)
  31++C379 E6 80                                and		$80									; make sure we only have bit 7
  32++C37B 4F                                   ld		c,a
  33++C37C CD 7B AC                             call 	ADDHLDESignBC; XX12ProcessCalcHLPlusDESignBC
  34++C37F B4                                   or		h									; combine sign in A with H
  35++C380 67                                   ld		h,a
  36++C381 22 7A C0                             ld		(SBnKYScaled),hl
  37++C384              ; ..................................
  38++C384 2A 82 C0                             ld		hl,(SBnKXX12zLo)					; and now repeat for Z cooord
  39++C387 7C                                   ld		a,h
  40++C388 E6 80                                and		$80
  41++C38A 47                                   ld		b,a
  42++C38B                                      ;110921 debugld      h,0
  43++C38B 7C                                   ld      a,h
  44++C38C E6 7F                                and     $7F
  45++C38E 67                                   ld      h,a
  46++C38F                                      ;110921 debugld      h,0
  47++C38F ED 5B 16 C0                          ld		de,(SBnKzlo)
  48++C393 3A 18 C0                             ld		a,(SBnKzsgn)
  49++C396 E6 80                                and		$80									; make sure we only have bit 7
  50++C398 4F                                   ld		c,a
  51++C399 CD 7B AC                             call 	ADDHLDESignBC; XX12ProcessCalcHLPlusDESignBC
  52++C39C B4                                   or		h									; combine sign in A with H
  53++C39D 67                                   ld		h,a
  54++C39E CB 7C                                bit		7,h                                 ; if sign if positive then we don't need to do the clamp so we ony jump
  55++C3A0 20 16                                jr		nz,.ClampZto4                        ; result was negative so we need to clamp to 4
  56++C3A2 E6 7F                                and     $7F                                 ; a = value unsigned
  57++C3A4 20 06                                jr      nz,.NoClampZto4                      ; if high byte was 0 then we could need to clamp still by this stage its +v but and will set z flag if high byte is zero
  58++C3A6 7D                                   ld      a,l                                 ; get low byte now
  59++C3A7                                      JumpIfALTNusng 4,.ClampZto4					; if its < 4 then fix at 4
  59++C3A7 FE 04       >                        cp      4
  59++C3A9 DA B8 C3    >                        jp		c, .ClampZto4
  60++C3AC 22 7C C0     .NoClampZto4:           ld		(SBnKZScaled),hl					; hl = signed calculation and > 4
  61++C3AF 7D                                   ld		a,l									; in addition write out the z cooord to UT for now for backwards compat (DEBUG TODO remove later)
  62++C3B0 32 FB 9D                             ld      (varT),a
  63++C3B3 7C                                   ld		a,h
  64++C3B4 32 DE 9D                             ld      (varU),a
  65++C3B7 C9                                   ret
  66++C3B8              ; This is where we limit 4 to a minimum of 4
  67++C3B8 21 04 00     .ClampZto4:             ld		hl,4
  68++C3BB 22 7C C0                             ld		(SBnKZScaled),hl; BODGE FOR NOW
  69++C3BE 7D                                   ld		a,l
  70++C3BF 32 FB 9D                             ld      (varT),a                            ;                                                                           ;;;
  71++C3C2 7C                                   ld		a,h
  72++C3C3 32 DE 9D                             ld      (varU),a 						; compatibility for now
  73++C3C6 C9                                   ret
  74++C3C7
# file closed: ././Universe/Sun/TransposeSunXX12BySunToSunXX15.asm
 345+ C3C7
 346+ C3C7
 347+ C3C7 ED 4B 7C C0  ScaleSunTo8Bit:			ld			bc,(SBnKZScaled)
 348+ C3CB 2A 78 C0                             ld			hl,(SBnKXScaled)
 349+ C3CE ED 5B 7A C0                          ld			de,(SBnKYScaled)
 350+ C3D2 78           .SetABSbc:              ld			a,b
 351+ C3D3 DD 67                                ld			ixh,a
 352+ C3D5 E6 7F                                and			SignMask8Bit
 353+ C3D7 47                                   ld			b,a									; bc = ABS bc
 354+ C3D8 7C           .SetABShl:              ld			a,h
 355+ C3D9 DD 6F                                ld			ixl,a
 356+ C3DB E6 7F                                and			SignMask8Bit
 357+ C3DD 67                                   ld			h,a									; hl = ABS hl
 358+ C3DE 7A           .SetABSde:              ld			a,d
 359+ C3DF FD 67                                ld			iyh,a
 360+ C3E1 E6 7F                                and			SignMask8Bit
 361+ C3E3 57                                   ld			d,a									; de = ABS de
 362+ C3E4 78           .ScaleNodeTo8BitLoop:   ld          a,b		                            ; U	\ z hi
 363+ C3E5 B4                                   or			h                                   ; XX15+1	\ x hi
 364+ C3E6 B2                                   or			d                                   ; XX15+4	\ y hi
 365+ C3E7 28 0F                                jr          z,.ScaleNodeDone                   ; if X, Y, Z = 0  exit loop down once hi U rolled to 0
 366+ C3E9                                      ShiftHLRight1
 366+ C3E9 CB 3C       >			   srl h
 366+ C3EB CB 1D       >			   rr  l
 367+ C3ED                                      ShiftDERight1
 367+ C3ED CB 3A       >			   srl d
 367+ C3EF CB 1B       >			   rr  e
 368+ C3F1                                      ShiftBCRight1
 368+ C3F1 CB 38       >			   srl b
 368+ C3F3 CB 19       >			   rr  c
 369+ C3F5 C3 E4 C3                             jp          .ScaleNodeTo8BitLoop
 370+ C3F8              ; now we have scaled values we have to deal with sign
 371+ C3F8 DD 7C        .ScaleNodeDone:          ld			a,ixh								; get sign bit and or with b
 372+ C3FA E6 80                                and			SignOnly8Bit
 373+ C3FC B0                                   or			b
 374+ C3FD 47                                   ld			b,a
 375+ C3FE DD 7D        .SignforHL:              ld			a,ixl								; get sign bit and or with b
 376+ C400 E6 80                                and			SignOnly8Bit
 377+ C402 B4                                   or			h
 378+ C403 67                                   ld			h,a
 379+ C404 FD 7C        .SignforDE:              ld			a,iyh								; get sign bit and or with b
 380+ C406 E6 80                                and			SignOnly8Bit
 381+ C408 B2                                   or			d
 382+ C409 57                                   ld			d,a
 383+ C40A ED 43 7C C0  .SignsDoneSaveResult:	ld			(SBnKZScaled),bc
 384+ C40E 22 78 C0                             ld			(SBnKXScaled),hl
 385+ C411 ED 53 7A C0                          ld			(SBnKYScaled),de
 386+ C415 78                                   ld			a,b
 387+ C416 32 DE 9D                             ld			(varU),a
 388+ C419 79                                   ld			a,c
 389+ C41A 32 FB 9D                             ld			(varT),a
 390+ C41D C9                                   ret
 391+ C41E
 392+ C41E              ;--------------------------------------------------------------------------------------------------------
 393+ C41E              ;;;;X = normal scale
 394+ C41E              ;;;;ZtempHi = zhi
 395+ C41E              ;;;;......................................................
 396+ C41E              ;;;; if ztemp hi <> 0                                   ::Scale Object Distance
 397+ C41E              ;;;;  Loop                                              ::LL90
 398+ C41E              ;;;;     inc X
 399+ C41E              ;;;;     divide X, Y & ZtempHiLo by 2
 400+ C41E              ;;;;  Until ZtempHi = 0
 401+ C41E              ;;;;......................................................
 402+ C41E              ;-LL21---------------------------------------------------------------------------------------------------
 403+ C41E              ;                        include "./Universe/NormaliseTransMat.asm"
 404+ C41E              ;-LL91---------------------------------------------------------------------------------------------------
 405+ C41E
 406+ C41E              ; Now we have
 407+ C41E              ;   * XX18(2 1 0) = (x_sign x_hi x_lo)
 408+ C41E              ;   * XX18(5 4 3) = (y_sign y_hi y_lo)
 409+ C41E              ;   * XX18(8 7 6) = (z_sign z_hi z_lo)
 410+ C41E              ;
 411+ C41E              ;--------------------------------------------------------------------------------------------------------
 412+ C41E              ;--------------------------------------------------------------------------------------------------------
 413+ C41E              ;   XX12(1 0) = [x y z] . sidev  = (dot_sidev_sign dot_sidev_lo)  = dot_sidev
 414+ C41E              ;   XX12(3 2) = [x y z] . roofv  = (dot_roofv_sign dot_roofv_lo)  = dot_roofv
 415+ C41E              ;   XX12(5 4) = [x y z] . nosev  = (dot_nosev_sign dot_nosev_lo)  = dot_nosev
 416+ C41E              ; Returns
 417+ C41E              ;
 418+ C41E              ;   XX12(1 0)            The dot product of [x y z] vector with the sidev (or _x)
 419+ C41E              ;                        vector, with the sign in XX12+1 and magnitude in XX12
 420+ C41E              ;
 421+ C41E              ;   XX12(3 2)            The dot product of [x y z] vector with the roofv (or _y)
 422+ C41E              ;                        vector, with the sign in XX12+3 and magnitude in XX12+2
 423+ C41E              ;
 424+ C41E              ;   XX12(5 4)            The dot product of [x y z] vector with the nosev (or _z)
 425+ C41E              ;                        vector, with the sign in XX12+5 and magnitude in XX12+4
 426+ C41E
 427+ C41E
 428+ C41E               ; TESTEDOK
 429+ C41E              SXX12DotOneRow:
 430+ C41E              SXX12CalcX:              N0equN1byN2div256 varT, (hl), (SBnKXScaled)       ; T = (hl) * regSunXX15fx /256
 430+ C41E 3A 78 C0    >                        ld      a,(SBnKXScaled)                        ;
 430+ C421 5F          >                        ld      e,a                         ; use e as var Q = value of XX15 [n] lo
 430+ C422 7E          >                        ld      a,(hl)                        ; A = XX16 element
 430+ C423 57          >                        ld      d,a
 430+ C424 ED 30       >                        mul
 430+ C426 7A          >                        ld      a,d                         ; we get only the high byte which is like doing a /256 if we think of a as low
 430+ C427 32 FB 9D    >                        ld      (varT),a                      ; Q         ; result variable = XX16[n] * XX15[n]/256
 431+ C42A 23                                   inc     hl                                  ; move to sign byte
 432+ C42B              SXX12CalcXSign:          AequN1xorN2 SBnKXScaledSign,(hl)             ;
 432+ C42B 3A 79 C0    >                        ld      a,(SBnKXScaledSign)
 432+ C42E AE          >                        xor     (hl)
 433+ C42F 32 E1 9D                             ld      (varS),a                            ; Set S to the sign of x_sign * sidev_x
 434+ C432 23                                   inc     hl
 435+ C433              SXX12CalcY:              N0equN1byN2div256 varQ, (hl),(SBnKYScaled)       ; Q = XX16 * SunXX15 /256 using varQ to hold regSunXX15fx
 435+ C433 3A 7A C0    >                        ld      a,(SBnKYScaled)                        ;
 435+ C436 5F          >                        ld      e,a                         ; use e as var Q = value of XX15 [n] lo
 435+ C437 7E          >                        ld      a,(hl)                        ; A = XX16 element
 435+ C438 57          >                        ld      d,a
 435+ C439 ED 30       >                        mul
 435+ C43B 7A          >                        ld      a,d                         ; we get only the high byte which is like doing a /256 if we think of a as low
 435+ C43C 32 DF 9D    >                        ld      (varQ),a                      ; Q         ; result variable = XX16[n] * XX15[n]/256
 436+ C43F                                      ldCopyByte varT,varR                        ; R = T =  |sidev_x| * x_lo / 256
 436+ C43F 3A FB 9D    >                        ld       a,(varT)
 436+ C442 32 E0 9D    >                        ld       (varR),a
 437+ C445 23                                   inc     hl
 438+ C446                                      AequN1xorN2 SBnKYScaledSign,(hl)             ; Set A to the sign of y_sign * sidev_y
 438+ C446 3A 7B C0    >                        ld      a,(SBnKYScaledSign)
 438+ C449 AE          >                        xor     (hl)
 439+ C44A              ; (S)A = |sidev_x| * x_lo / 256  = |sidev_x| * x_lo + |sidev_y| * y_lo
 440+ C44A E5           SSTequSRplusAQ           push    hl
 441+ C44B CD 9C B6                             call    baddll38                            ; JSR &4812 \ LL38   \ BADD(S)A=R+Q(SA) \ 1byte add (subtract)
 442+ C44E E1                                   pop     hl
 443+ C44F 32 FB 9D                             ld      (varT),a                            ; T = |sidev_x| * x_lo + |sidev_y| * y_lo
 444+ C452 23                                   inc     hl
 445+ C453              SXX12CalcZ:              N0equN1byN2div256 varQ,(hl),(SBnKZScaled)       ; Q = |sidev_z| * z_lo / 256
 445+ C453 3A 7C C0    >                        ld      a,(SBnKZScaled)                        ;
 445+ C456 5F          >                        ld      e,a                         ; use e as var Q = value of XX15 [n] lo
 445+ C457 7E          >                        ld      a,(hl)                        ; A = XX16 element
 445+ C458 57          >                        ld      d,a
 445+ C459 ED 30       >                        mul
 445+ C45B 7A          >                        ld      a,d                         ; we get only the high byte which is like doing a /256 if we think of a as low
 445+ C45C 32 DF 9D    >                        ld      (varQ),a                      ; Q         ; result variable = XX16[n] * XX15[n]/256
 446+ C45F                                      ldCopyByte varT,varR                        ; R = |sidev_x| * x_lo + |sidev_y| * y_lo
 446+ C45F 3A FB 9D    >                        ld       a,(varT)
 446+ C462 32 E0 9D    >                        ld       (varR),a
 447+ C465 23                                   inc     hl
 448+ C466                                      AequN1xorN2 SBnKZScaledSign,(hl)             ; A = sign of z_sign * sidev_z
 448+ C466 3A 7D C0    >                        ld      a,(SBnKZScaledSign)
 448+ C469 AE          >                        xor     (hl)
 449+ C46A              ; (S)A= |sidev_x| * x_lo + |sidev_y| * y_lo + |sidev_z| * z_lo
 450+ C46A CD 9C B6                             call    baddll38                            ; JSR &4812 \ LL38   \ BADD(S)A=R+Q(SA)   \ 1byte add (subtract)
 451+ C46D              ; Now we exit with A = result S = Sign
 452+ C46D C9                                   ret
 453+ C46E
 454+ C46E
 455+ C46E
 456+ C46E              ;--------------------------------------------------------------------------------------------------------
 457+ C46E                                      include "./Universe/Sun/CopySunXX12ScaledToSunXX18.asm"
# file opened: ././Universe/Sun/CopySunXX12ScaledToSunXX18.asm
   1++C46E              CopySXX12ScaledToSXX18:
   2++C46E              CopyResultToSDrawCam:
   3++C46E                      ldCopyByte SXX12         ,SXX18             ; XX12+0 => XX18+0  Set XX18(2 0) = dot_sidev
   3++C46E 3A 7E C0    >                        ld       a,(SXX12)
   3++C471 32 6C C0    >                        ld       (SXX18),a
   4++C474                      ldCopyByte SXX12+1       ,SXX18+2           ; XX12+1 => XX18+2
   4++C474 3A 7F C0    >                        ld       a,(SXX12+1)
   4++C477 32 6E C0    >                        ld       (SXX18+2),a
   5++C47A                      ldCopyByte SXX12+2       ,SXX18+3           ; XX12+2 => XX18+3  Set XX12+1 => XX18+2
   5++C47A 3A 80 C0    >                        ld       a,(SXX12+2)
   5++C47D 32 6F C0    >                        ld       (SXX18+3),a
   6++C480                      ldCopyByte SXX12+3       ,SXX18+5           ; XX12+3 => XX18+5
   6++C480 3A 81 C0    >                        ld       a,(SXX12+3)
   6++C483 32 71 C0    >                        ld       (SXX18+5),a
   7++C486                      ldCopyByte SXX12+4       ,SXX18+6           ; XX12+4 => XX18+6  Set XX18(8 6) = dot_nosev
   7++C486 3A 82 C0    >                        ld       a,(SXX12+4)
   7++C489 32 72 C0    >                        ld       (SXX18+6),a
   8++C48C                      ldCopyByte SXX12+5       ,SXX18+8           ; XX12+5 => XX18+8
   8++C48C 3A 83 C0    >                        ld       a,(SXX12+5)
   8++C48F 32 74 C0    >                        ld       (SXX18+8),a
   9++C492 C9                   ret
  10++C493
# file closed: ././Universe/Sun/CopySunXX12ScaledToSunXX18.asm
 458+ C493              ;                        include "./Variables/CopySunXX12toSunXX15.asm"
 459+ C493              ;                       include "./Variables/CopySunXX18toSunXX15.asm"
 460+ C493              ;                       include "./Variables/CopySunXX18ScaledToSunXX15.asm"
 461+ C493              ;                       include "./Variables/CopySunXX12ToScaled.asm"
 462+ C493              ;--------------------------------------------------------------------------------------------------------
 463+ C493              ;                        include "./Maths/Utilities/DotProductXX12SunXX15.asm"
 464+ C493              ;--------------------------------------------------------------------------------------------------------
 465+ C493
 466+ C493 DD 25        ScaleDownSXX15byIXH:    dec     ixh
 467+ C495 F8                                   ret     m
 468+ C496 21 78 C0                             ld      hl,SBnKXScaled
 469+ C499 CB 3E                                srl     (hl)                        ; SunXX15  \ xnormal lo/2 \ LL93+3 \ counter X
 470+ C49B 23                                   inc     hl                          ; looking at SunXX15 x sign now
 471+ C49C 23                                   inc     hl                          ; looking at SunXX15 y Lo now
 472+ C49D CB 3E                                srl     (hl)                        ; SunXX15+2    \ ynormal lo/2
 473+ C49F 23                                   inc     hl                          ; looking at SunXX15 y sign now
 474+ C4A0 23                                   inc     hl                          ; looking at SunXX15 z Lo now
 475+ C4A1 CB 3E                                srl     (hl)
 476+ C4A3 C3 93 C4                             jp      ScaleDownSXX15byIXH
 477+ C4A6 C9                                   ret
 478+ C4A7
 479+ C4A7 21 6C C0     DivideSXX18By2:         ld      hl,SBnKDrawCam0xLo
 480+ C4AA CB 3E                                srl     (hl)                        ; XX18  \ xnormal lo/2 \ LL93+3 \ counter X
 481+ C4AC 23                                   inc     hl                          ; looking at XX18 x sign now
 482+ C4AD 23                                   inc     hl                          ; looking at XX18 y Lo now
 483+ C4AE CB 3E                                srl     (hl)                        ; XX18+2    \ ynormal lo/2
 484+ C4B0 23                                   inc     hl                          ; looking at XX18 y sign now
 485+ C4B1 23                                   inc     hl                          ; looking at XX18 z Lo now
 486+ C4B2 CB 3E                                srl     (hl)
 487+ C4B4 C9                                   ret
 488+ C4B5
 489+ C4B5              ; ......................................................                                                         ;;;
 490+ C4B5
 491+ C4B5
 492+ C4B5
 493+ C4B5
 494+ C4B5              ; Pitch and roll are 2 phases
 495+ C4B5              ; 1 - we apply our pitch and roll to the ship position
 496+ C4B5              ;       x -> x + alpha * (y - alpha * x)
 497+ C4B5              ;       y -> y - alpha * x - beta * z
 498+ C4B5              ;       z -> z + beta * (y - alpha * x - beta * z)
 499+ C4B5              ; which can be simplified as:
 500+ C4B5              ;       1. K2 = y - alpha * x
 501+ C4B5              ;       2. z = z + beta * K2
 502+ C4B5              ;       3. y = K2 - beta * z
 503+ C4B5              ;       4. x = x + alpha * y
 504+ C4B5              ; 2 - we apply our patch and roll to the ship orientation
 505+ C4B5              ;      Roll calculations:
 506+ C4B5              ;
 507+ C4B5              ;        nosev_y = nosev_y - alpha * nosev_x_hi
 508+ C4B5              ;        nosev_x = nosev_x + alpha * nosev_y_hi
 509+ C4B5              ;      Pitch calculations:
 510+ C4B5              ;
 511+ C4B5              ;        nosev_y = nosev_y - beta * nosev_z_hi
 512+ C4B5              ;        nosev_z = nosev_z + beta * nosev_y_hi
 513+ C4B5
 514+ C4B5
 515+ C4B5                          INCLUDE "./Universe/Sun/SunApplyMyRollAndPitch.asm"
# file opened: ././Universe/Sun/SunApplyMyRollAndPitch.asm
   1++C4B5
   2++C4B5              ; Full version
   3++C4B5              ; 1. K2 = y - alpha * x
   4++C4B5              ; 2. z = z + beta * K2
   5++C4B5              ; 3. y = K2 - beta * z
   6++C4B5              ; 4. x = x + alpha * y
   7++C4B5
   8++C4B5
   9++C4B5
  10++C4B5              ; SunrollWork holds Alpha intermidate results
  11++C4B5              ;  1. K2 = y - alpha * x
  12++C4B5              ;  2. z = z + beta * K2
  13++C4B5              ;  3. y = K2 - beta * z
  14++C4B5              ;  4. x = x + alpha * y
  15++C4B5              ;.... or
  16++C4B5              ;  2. z = z + (beta * (y - alpha * x))
  17++C4B5              ;  3. y = (y - alpha * x) - (beta * z)
  18++C4B5              ;  4. x = x + (alpha * y)
  19++C4B5
  20++C4B5
  21++C4B5              ;----------------------------------------------------------------------------------------------------------------------------------
  22++C4B5              ; Sun version of pitch and roll is a 24 bit calculation 1 bit sign + 23 bit value
  23++C4B5              ; Need to write a test routine for roll and pitchs
  24++C4B5 00 00 00 00  SunAlphaMulX            DS 4
  25++C4B9 00 00 00 00  SunAlphaMulY            DS 4
  26++C4BD 00 00 00 00  SunBetaMulZ             DS 4
  27++C4C1 00 00 00     SunK2                   DS 3
  28++C4C4
  29++C4C4 3A F5 9C     SunApplyMyRollAndPitch: ld      a,(ALPHA)                   ; no roll or pitch, no calc needed
  30++C4C7 21 E8 9C                             ld      hl,BETA
  31++C4CA B6                                   or      (hl)
  32++C4CB E6 7F                                and     SignMask8Bit
  33++C4CD CA 7E C5                             jp      z,.NoRotation
  34++C4D0 3A F5 9C     .CalcAlphaMulX:         ld      a,(ALPHA)                   ; get roll magnitude
  35++C4D3 EE 80                                xor     SignOnly8Bit                ; d = -alpha (Q value)
  36++C4D5 57                                   ld      d,a                         ; .
  37++C4D6 3A 10 C0                             ld      a,(SBnKxlo)                 ; HLE = x sgn, hi, lo
  38++C4D9 5F                                   ld      e,a                         ; .
  39++C4DA 2A 11 C0                             ld      hl,(SBnKxhi)                ; .
  40++C4DD CD 83 AF                             call    mulHLEbyDSigned             ; DELC = x * -alpha, so DEL = X * -alpha / 256 where d = sign byte
  41++C4E0              .SaveAlphaMulX:         ;ld      a,c                         ; a = upper byte of results which will have the sign               ONLY NEEDED FOR DEBUGGING TEST
  42++C4E0                                      ;ld      (SunAlphaMulX),a            ; save sign from result, ELC holds actual result                   ONLY NEEDED FOR DEBUGGING TEST
  43++C4E0 7D                                   ld      a,l                         ; also save all of alpha *X as we will need it later
  44++C4E1 32 B6 C4                             ld      (SunAlphaMulX+1),a
  45++C4E4 7B                                   ld      a,e
  46++C4E5 32 B7 C4                             ld      (SunAlphaMulX+2),a
  47++C4E8 7A                                   ld      a,d
  48++C4E9 32 B8 C4                             ld      (SunAlphaMulX+3),a          ; we actually only want X1 X2 X3 later as its /256
  49++C4EC ED 5B 14 C0  .CalcK2:                ld      de,(SBnKyhi)                ; DEL = Y
  50++C4F0 3A 13 C0                             ld      a,(SBnKylo)                 ; .
  51++C4F3 6F                                   ld      l,a                         ; .
  52++C4F4 ED 4B B7 C4                          ld      bc,(SunAlphaMulX+2)         ; BCH = Y sgn, hi, lo, we loose the C from result
  53++C4F8 3A B6 C4                             ld      a,(SunAlphaMulX+1)          ; Deal with sign in byte 4
  54++C4FB 67                                   ld      h,a                         ; .
  55++C4FC CD 13 AD                             call    AddBCHtoDELsigned           ; DEL = y - (alpha * x)
  56++C4FF 7D                                   ld      a,l                         ; K2  = DEA = DEL = y - (alpha * x)
  57++C500 32 C1 C4                             ld      (SunK2),a                   ; we also need to save l for teh beta k2 calc
  58++C503 ED 53 C2 C4                          ld      (SunK2+1),de                ;
  59++C507 EB           .CalcBetaMulK2:         ex      de,hl                       ; HLE == DEA
  60++C508 5F                                   ld      e,a                         ; .
  61++C509 3A E8 9C                             ld      a,(BETA)                    ; D = BETA
  62++C50C 57                                   ld      d,a                         ; .
  63++C50D CD 83 AF                             call    mulHLEbyDSigned             ; DELC = Beta * K2, DEL = Beta/256 * K2
  64++C510 ED 4B 17 C0  .CalcZ:                 ld      bc,(SBnKzhi)                ; BCH = z
  65++C514 3A 16 C0                             ld      a,(SBnKzlo)                 ;
  66++C517 67                                   ld      h,a                         ;
  67++C518 CD 13 AD                             call    AddBCHtoDELsigned           ; DEL still = Beta * K2 so its z + Beta * K2
  68++C51B ED 53 17 C0                          ld      (SBnKzhi),de                ; z = resuklt
  69++C51F 7D                                   ld      a,l                         ; .
  70++C520 32 16 C0                             ld      (SBnKzlo),a                 ; .
  71++C523 3A E8 9C     .CalcBetaZ:             ld      a,(BETA)
  72++C526 EE 80                                xor     SignOnly8Bit                ; d = -beta (Q value)
  73++C528 57                                   ld      d,a                         ; .
  74++C529 3A 16 C0                             ld      a,(SBnKzlo)                 ; HLE = z
  75++C52C 5F                                   ld      e,a                         ; .
  76++C52D 2A 17 C0                             ld      hl,(SBnKzhi)                ; .
  77++C530 CD 83 AF                             call    mulHLEbyDSigned             ; DELC = z * -beta, so DEL = Z * -beta / 256 where d = sign byte
  78++C533              .SaveAlphaMulZ:         ;ld      a,c                         ; a = upper byte of results which will have the sign             ONLY NEEDED FOR DEBUGGING TEST
  79++C533                                      ;ld      (SunBetaMulZ),a             ; save sign from result, ELC holds actual result                 ONLY NEEDED FOR DEBUGGING TEST
  80++C533                                      ;ld      a,l                         ; also save all of alpha *X as we will need it later             ONLY NEEDED FOR DEBUGGING TEST
  81++C533                                      ;ld      (SunBetaMulZ+1),a           ; .                                                              ONLY NEEDED FOR DEBUGGING TEST
  82++C533                                      ;ld      a,e                         ; .                                                              ONLY NEEDED FOR DEBUGGING TEST
  83++C533                                      ;ld      (SunBetaMulZ+2),a           ; .                                                              ONLY NEEDED FOR DEBUGGING TEST
  84++C533                                      ;ld      a,d                         ; .                                                              ONLY NEEDED FOR DEBUGGING TEST
  85++C533                                      ;ld      (SunBetaMulZ+3),a           ; we actually only want X1 X2 X3 later as its /256               ONLY NEEDED FOR DEBUGGING TEST
  86++C533 42 4B        .CalcY:                 ld      bc,de                       ; bch = - Beta * z
  87++C535 65                                   ld      h,l
  88++C536 ED 5B C2 C4                          ld      de,(SunK2+1)                ; DEL = k2
  89++C53A 3A C1 C4                             ld      a,(SunK2)
  90++C53D 6F                                   ld      l,a
  91++C53E CD 13 AD                             call    AddBCHtoDELsigned           ; DEL = K2 - Beta * Z
  92++C541 ED 53 14 C0                          ld      (SBnKyhi),de                ; y = DEL = K2 - Beta * Z
  93++C545 7D                                   ld      a,l                         ; .
  94++C546 32 13 C0                             ld      (SBnKylo),a                 ; .
  95++C549 3A F5 9C     .CalcAlphaMulY:         ld      a,(ALPHA)
  96++C54C 57                                   ld      d,a                         ; d = alpha (Q value)
  97++C54D 3A 13 C0                             ld      a,(SBnKylo)                 ; HLE = x sgn, hi, lo
  98++C550 5F                                   ld      e,a                         ; .
  99++C551 2A 14 C0                             ld      hl,(SBnKyhi)                ; .
 100++C554 CD 83 AF                             call    mulHLEbyDSigned             ; DELC = y * alpha, so DEL = Y * alpha / 256 where d = sign byte
 101++C557 79           .SaveAlphaMulY:         ld      a,c                         ; a = upper byte of results which will have the sign
 102++C558 32 B9 C4                             ld      (SunAlphaMulY),a            ; save sign from result, ELC holds actual result
 103++C55B 7D                                   ld      a,l                         ; also save all of alpha *X as we will need it later
 104++C55C 32 BA C4                             ld      (SunAlphaMulY+1),a
 105++C55F 7B                                   ld      a,e
 106++C560 32 BB C4                             ld      (SunAlphaMulY+2),a
 107++C563 7A                                   ld      a,d
 108++C564 32 BC C4                             ld      (SunAlphaMulY+3),a
 109++C567 42 4B        .CalcxPLusAlphaY:       ld      bc,de                        ; BCH = Y sgn, hi, lo, we loose the C from result Deal with sign in byte 4
 110++C569 65                                   ld      h,l                         ; .
 111++C56A ED 5B 11 C0                          ld      de,(SBnKxhi)                ; DEL = Y
 112++C56E 3A 10 C0                             ld      a,(SBnKxlo)                 ; .
 113++C571 6F                                   ld      l,a                         ; .
 114++C572 CD 13 AD                             call    AddBCHtoDELsigned           ; DEL = x + alpha * Y
 115++C575 7A           .SaveResult1:           ld      a,d                         ; Result 1 (X) = AHL + DEL
 116++C576 63                                   ld      h,e                         ;
 117++C577 32 12 C0     .CopyResultTo2:         ld      (SBnKxlo+2),a               ; .
 118++C57A 22 10 C0                             ld      (SBnKxlo) ,hl               ; .
 119++C57D C9                                   ret
 120++C57E 3A DB 9D     .NoRotation:            ld      a,(DELTA)                   ; BCH = - Delta
 121++C581                                      ReturnIfAIsZero
 121++C581 A7          >                        and     a
 121++C582 C8          >                        ret     z
 122++C583 0E 00                                ld      c,0                         ;
 123++C585 67                                   ld      h,a                         ;
 124++C586 06 80                                ld      b,$80                       ;
 125++C588 ED 5B 17 C0                          ld      de,(SBnKzhi)                ; DEL = z position
 126++C58C 3A 16 C0                             ld      a,(SBnKzlo)                 ; .
 127++C58F 6F                                   ld      l,a                         ; .
 128++C590 CD 13 AD                             call    AddBCHtoDELsigned           ; update speed
 129++C593 ED 53 17 C0                          ld      (SBnKzhi),DE                ; write back to zpos
 130++C597 7D                                   ld      a,l
 131++C598 32 16 C0                             ld      (SBnKzlo),a                ;
 132++C59B C9                                   ret
 133++C59C              ;
 134++C59C              ;SunApplyMyRollAndPitch: ld      a,(ALPHA)                   ; no roll or pitch, no calc needed
 135++C59C              ;                        ld      hl,BETA
 136++C59C              ;                        or      (hl)
 137++C59C              ;                        and     SignMask8Bit
 138++C59C              ;                        ret     z
 139++C59C              ;.CalcZ:                 ;break
 140++C59C              ;                        ld      a,(ALPHA)                   ; get roll magnitude
 141++C59C              ;                        xor     SignOnly8Bit                ; get Q = -alpha
 142++C59C              ;                        ld      d,a                         ; d reg represents Q (abount to roll)
 143++C59C              ;                        ld      a,(SBnKxlo)                 ; HLE = x sgn, hi, lo
 144++C59C              ;                        ld      e,a                         ;
 145++C59C              ;                        ld      hl,(SBnKxhi)                ;
 146++C59C              ;                        call    mulHLEbyDSigned             ; DELC = x * -alpha, so DEL = X * -alpha / 256
 147++C59C              ;                        ld      a,d
 148++C59C              ;                        ld      (SunRollResultp4),a         ; save D (I guess we need the sign?)
 149++C59C              ;.CalcYPlusDEL:          ld      a,(SBnKylo)                 ; BCH = Y sgn, hi, lo
 150++C59C              ;                        ld      h,a
 151++C59C              ;                        ld      bc,(SBnKyhi)
 152++C59C              ;                        call    AddBCHtoDELsigned           ; DEL = Y - ( X *  alpha /256)
 153++C59C              ;.SaveResult1:           ld      a,l                         ; SunPitchWork = DEL
 154++C59C              ;                        ;ld      (SunRollResult), a          ; SunPitchWork + 0 = L
 155++C59C              ;                        ex      de,hl                       ; SunPitchWork + 1 = E
 156++C59C              ;.CopyResultTo2:         ld      (SunRollResult+1),a         ; SunPitchWork + 2 = D
 157++C59C              ;                        ld      (SunRollResult+1) ,hl       ; Copy K to K2 (y - alpha * x)
 158++C59C              ;                        ;ld      (SunRollResult2+1),hl       ; also HLA = result
 159++C59C              ;                        ld      a,(SunRollResult)           ; .
 160++C59C              ;                        ;ld      (SunRollResult2),a          ; .
 161++C59C              ;.CalcY:                 ld      e,a                         ; so now HLE = result
 162++C59C              ;                        ld      a,(BETA)                    ; get pitch
 163++C59C              ;                        ld      d,a                         ; now D = BETA
 164++C59C              ;                        call    mulHLEbyDSigned             ; DELC = (y - alpha * x /256 ) * Beta
 165++C59C              ;                        ld      bc,(SBnKzhi)                ; BCH = z
 166++C59C              ;                        ld      a,(SBnKzlo)                 ;
 167++C59C              ;                        ld      h,a                         ;
 168++C59C              ;                        call    AddBCHtoDELsigned           ; DEL = z + ((y - alpha * x /256 ) * Beta) /256
 169++C59C              ;.SaveZResult:           ld      (SunZResult+1),de           ; We now have a z result which we save
 170++C59C              ;                        ld      (SBnKzhi),de                ; .
 171++C59C              ;                        ld      a,l                         ; .
 172++C59C              ;                        ld      (SunZResult),a              ; .
 173++C59C              ;                        ld      (SBnKzlo),a                 ; .
 174++C59C              ;.CalcMinusBetaMulZ:     ex      de,hl                       ; HLE = DEL = z post calculation
 175++C59C              ;                        ld      e,l                         ;
 176++C59C              ;                        ld      a,(BETA)                    ; d = - BETA
 177++C59C              ;                        ld      d,a                         ;
 178++C59C              ;                        xor     SignOnly8Bit                ;
 179++C59C              ;                        call    mulHLEbyDSigned             ; DELC = z * - BETA
 180++C59C              ;                        ld      bc, (SunRollResult+1)       ; BCH = (y - alpha * x) (or K2)
 181++C59C              ;                        ld      a,(SunRollResult)           ;
 182++C59C              ;                        ld      h,a                         ;
 183++C59C              ;                        call    AddBCHtoDELsigned           ; DEL = (y - alpha * x) - (Z * BETA)
 184++C59C              ;                        ld      (SBnKyhi),de                ; y = (y - alpha * x) - (Z * BETA)
 185++C59C              ;                        ld      a,l                         ;
 186++C59C              ;                        ld      (SBnKylo),a                 ;
 187++C59C              ;.CalcX:                 ex      de,hl                       ; HLE = DEL = Y
 188++C59C              ;                        ld      e,l                         ;
 189++C59C              ;                        ld      a,(ALPHA)
 190++C59C              ;                        ld      d,a                         ; D = alpha
 191++C59C              ;                        call    mulHLEbyDSigned             ; DELC = Y * alpha
 192++C59C              ;                        ld      bc,(SBnKxhi)                ; BCH = x
 193++C59C              ;                        ld      a,(SBnKxlo)                 ;
 194++C59C              ;                        ld      h,a                         ;
 195++C59C              ;                        call    AddBCHtoDELsigned           ; DEL = x + (alpha * y /256 )
 196++C59C              ;                        ld      (SBnKxhi),de                ; x = x + (alpha * y /256 )
 197++C59C              ;                        ld      a,h                         ;
 198++C59C              ;                        ld      (SBnKxlo),a                 ;
 199++C59C              ;                        ret
 200++C59C              ;
# file closed: ././Universe/Sun/SunApplyMyRollAndPitch.asm
 516+ C59C              ;            INCLUDE "./Universe/SunApplyShipRollAndPitch.asm"
 517+ C59C
 518+ C59C 00           SunOnScreen             DB 0
 519+ C59D 00 00        cLineArrayPtr            DW 0
 520+ C59F 00           LineCount               DB 0
 521+ C5A0 00           RaggedSize              DB 0
 522+ C5A1 00           MinYOffset              DB 0
 523+ C5A2 00           MaxYOffSet              DB 0
 524+ C5A3 00 00        SunScrnX                DW  0       ; signed
 525+ C5A5 00 00        SunScrnY                DW  0       ; signed
 526+ C5A7 00           SunRadius               DB  0       ; unsigned
 527+ C5A8              ; draw circle
 528+ C5A8
 529+ C5A8              ;
 530+ C5A8              ;DIVD3B2 K(3 2 1 0) = (A P+1 P) / (z_sign z_hi z_lo)
 531+ C5A8
 532+ C5A8 00 00 00 00  SunVarK                 DS 4
 533+ C5AC 00 00 00     SunVarP                 DS 3
 534+ C5AF 00           SunVarQ                 DS 1
 535+ C5B0 00           SunVarR                 DS 1
 536+ C5B1 00           SunVarS                 DS 1
 537+ C5B2 00           SunVarT                 DS 1
 538+ C5B3
 539+ C5B3              ; Optimisation
 540+ C5B3              ; if a <> 0
 541+ C5B3              ;       divide AH by CD
 542+ C5B3              ; if h <> 0
 543+ C5B3              ;      if c <> 0 return 0
 544+ C5B3              ;      else
 545+ C5B3              ;        divide HL by DE
 546+ C5B3              ; if l <>0
 547+ C5B3              ;      if c or d <> 0 return 0
 548+ C5B3              ;      else
 549+ C5B3              ;        divide l by e
 550+ C5B3              ;
 551+ C5B3 47           SunAHLequAHLDivCDE:     ld      b,a                         ; save a reg
 552+ C5B4 79                                   ld      a,c                         ; check for divide by zero
 553+ C5B5 B2                                   or      d                           ; .
 554+ C5B6 B3                                   or      e                           ; .
 555+ C5B7                                      JumpIfZero      .divideByZero       ; .
 555+ C5B7 CA D0 C5    >                        jp	z,.divideByZero
 556+ C5BA 78                                   ld      a,b                         ; get a back
 557+ C5BB                                      JumpIfAIsNotZero    .divideAHLbyCDE
 557+ C5BB A7          >                        and     a
 557+ C5BC C2 D7 C5    >                        jp	    nz,.divideAHLbyCDE
 558+ C5BF 7C           .AIsZero:               ld      a,h
 559+ C5C0                                      JumpIfAIsNotZero    .divideHLbyDE
 559+ C5C0 A7          >                        and     a
 559+ C5C1 C2 DE C5    >                        jp	    nz,.divideHLbyDE
 560+ C5C4 7D           .HIsZero:               ld      a,l
 561+ C5C5                                      JumpIfAIsNotZero    .divideLbyE
 561+ C5C5 A7          >                        and     a
 561+ C5C6 C2 ED C5    >                        jp	    nz,.divideLbyE
 562+ C5C9              .resultIsZero:          ZeroA
 562+ C5C9 AF          >                        xor a
 563+ C5CA 67                                   ld      h,a                        ; result is zero so set hlde
 564+ C5CB 6F                                   ld      l,a                        ; result is zero so set hlde
 565+ C5CC 54 5D                                ld      de,hl
 566+ C5CE                                      ClearCarryFlag
 566+ C5CE B7          >                        or a
 567+ C5CF C9                                   ret
 568+ C5D0 3E FF        .divideByZero:          ld      a,$FF
 569+ C5D2 67                                   ld      h,a
 570+ C5D3 6F                                   ld      l,a
 571+ C5D4 54 5D                                ld      de,hl
 572+ C5D6                                      SetCarryFlag
 572+ C5D6 37          >                        scf
 573+ C5D7              ; AHL = ahl/cde, this could be a genuine 24 bit divide
 574+ C5D7              ; if AHL is large and cde small then the value will be big so will be off screen so we can risk 16 bit divide
 575+ C5D7 CD 1B AE     .divideAHLbyCDE:        call    Div24by24
 576+ C5DA EB                                   ex      hl,de                         ; ahl is result
 577+ C5DB 79                                   ld      a,c                           ; ahl is result
 578+ C5DC                                      ClearCarryFlag
 578+ C5DC B7          >                        or a
 579+ C5DD              ;.divideAHLbyCDE:        ld      b,a                         ; we need to set BC to AH
 580+ C5DD              ;                        ld      e,d                         ; and DE to CD
 581+ C5DD              ;                        ld      d,c                         ; but make sure we do it in the right
 582+ C5DD              ;                        ld      c,h                         ; order so we don't trash values
 583+ C5DD              ;                        call    BC_Div_DE                   ; bc = result
 584+ C5DD              ;                        ld      a,b
 585+ C5DD              ;                        ld      h,c
 586+ C5DD              ;                        ld      l,0
 587+ C5DD C9                                   ret
 588+ C5DE              ; AHL = 0hl/0de as A is zero
 589+ C5DE 79           .divideHLbyDE:          ld      a,c                         ;'if c = 0 then result must be zero
 590+ C5DF                                      JumpIfAIsNotZero   .resultIsZero
 590+ C5DF A7          >                        and     a
 590+ C5E0 C2 C9 C5    >                        jp	    nz,.resultIsZero
 591+ C5E3 44 4D                                ld      bc,hl
 592+ C5E5 CD 0F B2                             call    BC_Div_DE                   ; BC = HL/DE
 593+ C5E8 60 69                                ld      hl,bc
 594+ C5EA                                      ZeroA                               ; so we can set A to Zero
 594+ C5EA AF          >                        xor a
 595+ C5EB                                      ClearCarryFlag
 595+ C5EB B7          >                        or a
 596+ C5EC C9                                   ret
 597+ C5ED              ; AHL = 00l/00e as A and H are zero
 598+ C5ED 79           .divideLbyE:            ld      a,c                         ; if d = 0 then result must be zero
 599+ C5EE B2                                   or      d
 600+ C5EF                                      JumpIfAIsNotZero   .resultIsZero
 600+ C5EF A7          >                        and     a
 600+ C5F0 C2 C9 C5    >                        jp	    nz,.resultIsZero
 601+ C5F3 4B                                   ld      c,e
 602+ C5F4 5D                                   ld      e,l
 603+ C5F5 CD D1 B1                             call    E_Div_C
 604+ C5F8 6F                                   ld      l,a
 605+ C5F9                                      ZeroA
 605+ C5F9 AF          >                        xor a
 606+ C5FA 67                                   ld      h,a
 607+ C5FB                                      ClearCarryFlag
 607+ C5FB B7          >                        or a
 608+ C5FC C9                                   ret
 609+ C5FD
 610+ C5FD
 611+ C5FD              ; Needs tuning for registers vs memroy
 612+ C5FD 22 AC C5     SunKEquAHLDivCDE:       ld      (SunVarP),hl
 613+ C600 32 AE C5                             ld      (SunVarP+2),a
 614+ C603 ED 53 AF C5                          ld      (SunVarQ),de
 615+ C607 79                                   ld      a,c
 616+ C608 32 B1 C5                             ld      (SunVarS),a
 617+ C60B 3A AC C5     SunDivD3B:              ld      a,(SunVarP)                 ; Ensure P is at least 1
 618+ C60E F6 01                                or      1
 619+ C610 32 AC C5                             ld      (SunVarP),a
 620+ C613 3A AE C5                             ld      a,(SunVarP+2)               ; T = Sign xor Sign
 621+ C616 21 B1 C5                             ld      hl,SunVarS
 622+ C619 AE                                   xor     (hl)
 623+ C61A E6 80                                and     SignOnly8Bit
 624+ C61C 32 B2 C5                             ld      (SunVarT),a
 625+ C61F 06 00                                ld      b,0                         ; b = y counter
 626+ C621 3A AE C5                             ld      a,(SunVarP+2)               ; a = abs high byte of p
 627+ C624 E6 7F                                and     SignMask8Bit                ; .
 628+ C626 2A AC C5                             ld      hl,(SunVarP)                ; shift P left
 629+ C629              .SunDVL9:               JumpIfAGTENusng   64, .SunDV14      ; if high p > 64 then go to DV14
 629+ C629 FE 40       >                        cp     64
 629+ C62B D2 38 C6    >                        jp		nc,.SunDV14
 630+ C62E                                      ShiftHLLeft1                        ;
 630+ C62E CB 25       >			   sla l
 630+ C630 CB 14       >			   rl  h
 631+ C632 CB 17                                rl      a                           ;
 632+ C634 04                                   inc     b                           ; increase shift count
 633+ C635 C3 29 C6                             jp      .SunDVL9
 634+ C638 22 AC C5     .SunDV14:               ld      (SunVarP),hl                ; save off var P
 635+ C63B 32 AE C5                             ld      (SunVarP+2),a
 636+ C63E 3A B1 C5                             ld      a,(SunVarS)                 ; a= ABS varS
 637+ C641 E6 7F                                and     SignMask8Bit
 638+ C643 2A AF C5                             ld      hl,(SunVarQ)                ; HL = vars Q & R
 639+ C646 05           .SunDVL6:               dec     b                           ; reduce b counter by 1
 640+ C647                                      ShiftHLLeft1                        ; varQRA  shift left
 640+ C647 CB 25       >			   sla l
 640+ C649 CB 14       >			   rl  h
 641+ C64B CB 17                                rl      a                           ;
 642+ C64D F2 46 C6                             jp      p, .SunDVL6                 ; keep shifting until bit 7 of a is set
 643+ C650 22 AF C5                             ld      (SunVarQ),hl                ; save QR
 644+ C653 32 B1 C5     .SunDV9:                ld      (SunVarS),a                 ; save S
 645+ C656                                      ;ld      a,h
 646+ C656                                      ;ld      (varQ),a
 647+ C656 4F                                   ld      c,a
 648+ C657 3A AE C5                             ld      a,(SunVarP+2)
 649+ C65A C5                                   push    bc                          ; save shift counter in b
 650+ C65B CD 5D B1                             call    DIV16Amul256dCUNDOC
 651+ C65E                                      ;call    RequAmul256divQ
 652+ C65E 79                                   ld      a, c
 653+ C65F 32 E0 9D                             ld      (varR),a
 654+ C662 C1                                   pop     bc                          ; retrieve shift counter
 655+ C663 21 00 00                             ld      hl,0                        ; set K to 0
 656+ C666 22 A8 C5                             ld      (SunVarK),hl                ; .
 657+ C669 22 AA C5                             ld      (SunVarK+2),hl              ; .
 658+ C66C CB 78                                bit     7,b                         ; is counter positive
 659+ C66E 28 32                                jr      z,.SunDV12                  ; .
 660+ C670 3A E0 9D                             ld      a,(varR)                    ;
 661+ C673 CB 27        .SunDVL8:               sla     a                           ; Shift K by 1 left
 662+ C675 21 A9 C5                             ld      hl,SunVarK+1                ; .
 663+ C678 CB 16                                rl      (hl)                        ; .
 664+ C67A 23                                   inc     hl                          ; .
 665+ C67B CB 16                                rl      (hl)                        ; .
 666+ C67D 23                                   inc     hl                          ; .
 667+ C67E CB 16                                rl      (hl)                        ; .
 668+ C680 04                                   inc     b
 669+ C681 20 F0                                jr      nz,.SunDVL8                 ; loop until K is shifted
 670+ C683 32 A8 C5                             ld      (SunVarK),a
 671+ C686 3A AB C5                             ld      a,(SunVarK+3)
 672+ C689 21 B2 C5                             ld      hl,SunVarT
 673+ C68C B6                                   or      (hl)
 674+ C68D 32 AB C5                             ld      (SunVarK+3),a
 675+ C690 C9                                   ret
 676+ C691 3A E0 9D     .SunDV13:               ld      a,(varR)                    ; when we get here, shift is zero
 677+ C694 32 A8 C5                             ld      (SunVarK),a
 678+ C697 3A AB C5                             ld      a,(SunVarK+3)
 679+ C69A 21 B2 C5                             ld      hl,SunVarT
 680+ C69D B6                                   or      (hl)
 681+ C69E 32 AB C5                             ld      (SunVarK+3),a
 682+ C6A1 C9                                   ret
 683+ C6A2 78           .SunDV12:               ld      a,b
 684+ C6A3 A7                                   and     a
 685+ C6A4 28 EB                                jr      z,.SunDV13
 686+ C6A6 3A E0 9D                             ld      a,(varR)                    ; it probably is already R so need to test
 687+ C6A9 CB 2F        .SunDVL10:              sra     a                           ; Shift K by 1 left
 688+ C6AB 05                                   dec     b
 689+ C6AC 20 FB                                jr      nz,.SunDVL10
 690+ C6AE 32 A8 C5                             ld      (SunVarK),a                 ; as original divide was onyl 8 bits K 1,2,3 don;t matter
 691+ C6B1 3A B2 C5                             ld      a,(SunVarT)
 692+ C6B4 32 AB C5                             ld      (SunVarK+3),a
 693+ C6B7 C9                                   ret
 694+ C6B8
 695+ C6B8
 696+ C6B8
 697+ C6B8 47           SunProcessVertex:       ld      b,a                         ; save sign byte
 698+ C6B9 ED 5B 16 C0  .SunProjectToEye:       ld      de,(SBnKzlo)                ; X Pos = X / Z
 699+ C6BD 3A 18 C0                             ld      a,(SBnKzsgn)                ; CDE = z
 700+ C6C0 FD 67                                ld      iyh,a                       ; save sign
 701+ C6C2                                      ClearSignBitA
 701+ C6C2 E6 7F       >                        and     SignMask8Bit
 702+ C6C4                                      ; Addeed as it neds to be AHL/0CD to force * 256 and get correct screen position on scaling
 703+ C6C4              ;                        ld      c,a                         ;
 704+ C6C4 5A                                   ld      e,d
 705+ C6C5 57                                   ld      d,a
 706+ C6C6 0E 00                                ld      c,0
 707+ C6C8                                      ; added above to correct positioning as in reality its X/(Z/256)
 708+ C6C8 78                                   ld      a,b                         ; restore sign byte
 709+ C6C9 FD 6F                                ld      iyl,a                       ; save sign
 710+ C6CB                                      ClearSignBitA
 710+ C6CB E6 7F       >                        and     SignMask8Bit
 711+ C6CD CD B3 C5                             call SunAHLequAHLDivCDE             ; AHL = AHL/CDE unsigned
 712+ C6D0              .CheckPosOnScreenX:     JumpIfAIsNotZero .IsOffScreen         ; if A has a value then its way too large regardless of sign
 712+ C6D0 A7          >                        and     a
 712+ C6D1 C2 EE C6    >                        jp	    nz,.IsOffScreen
 713+ C6D4                                      JumpOnLeadSignSet h, .IsOffScreen      ; or bit 7 set of h
 713+ C6D4 7C          >                        ld      a,h
 713+ C6D5 E6 80       >                        and     SignOnly8Bit
 713+ C6D7 C2 EE C6    >                        jp      nz,.IsOffScreen
 714+ C6DA 7C                                   ld      a,h
 715+ C6DB                                      ReturnIfAGTEusng 4                  ; if a > 1024 then its way too large regardless of sign
 715+ C6DB FE 04       >                        cp    4
 715+ C6DD D0          >                        ret	 nc
 716+ C6DE FD 7C                                ld      a,iyh                       ; now deal with the sign
 717+ C6E0 FD AD                                xor     iyl
 718+ C6E2                                      SignBitOnlyA                        ; a= resultant sign
 718+ C6E2 E6 80       >                        and     SignOnly8Bit
 719+ C6E4 28 06                                jr      z,.calculatedVert           ; result is positive so we don't 2's compliment it
 720+ C6E6              .XIsNegative:           NegHL                               ; make 2's c as negative
 720+ C6E6 AF          >                    xor a
 720+ C6E7 95          >                    sub l
 720+ C6E8 6F          >                    ld l,a
 720+ C6E9 9F          >                    sbc a,a
 720+ C6EA 94          >                    sub h
 720+ C6EB 67          >                    ld h,a
 721+ C6EC              .calculatedVert:        ClearCarryFlag
 721+ C6EC B7          >                        or a
 722+ C6ED C9                                   ret
 723+ C6EE 21 FF 7F     .IsOffScreen:           ld      hl,$7FFF
 724+ C6F1 FD 7C                                ld      a,iyh
 725+ C6F3 FD AD                                xor     iyl
 726+ C6F5                                      SignBitOnlyA
 726+ C6F5 E6 80       >                        and     SignOnly8Bit
 727+ C6F7 28 02                                jr      z,.calculatedOffScreen
 728+ C6F9 23                                   inc     hl                          ; set hl to $8001 i.e. -32768
 729+ C6FA 23                                   inc     hl                          ; .
 730+ C6FB              .calculatedOffScreen:   SetCarryFlag
 730+ C6FB 37          >                        scf
 731+ C6FC C9                                   ret
 732+ C6FD
 733+ C6FD
 734+ C6FD              ; .........................................................................................................................
 735+ C6FD              ; we only hit this if z is positive so we can ignore signs
 736+ C6FD ED 4B 16 C0  SunCalculateRadius:     ld      bc,(SBnKzlo)                ; DBC = z position
 737+ C701 3A 18 C0                             ld      a,(SBnKzsgn)                ;
 738+ C704 57                                   ld      d,a                         ;
 739+ C705 21 00 60                             ld      hl,$6000  ; was hl          ; planet radius at Z = 1 006000
 740+ C708 CD 56 B0                             call    Div16by24usgn               ; radius = HL/DBC = 24576 / distance z
 741+ C70B B4                                   or      h                           ; if A or H are not 0 then max Radius
 742+ C70C                                      JumpIfAIsZero  .SaveRadius
 742+ C70C A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
 742+ C70D CA 12 C7    >                        jp	    z, .SaveRadius
 743+ C710 1E F8        .MaxRadius:             ld      e,248                       ;set radius to 248 as maxed out
 744+ C712 7D           .SaveRadius:            ld      a,l                         ; l = resultant radius
 745+ C713 F6 01                                or      1                           ; at least radius 1 (never even so need to test)
 746+ C715 32 A7 C5                             ld      (SunRadius),a               ; save a copy of radius now for later
 747+ C718 5F                                   ld      e,a                         ; as later code expects it to be in e
 748+ C719 C9                                   ret
 749+ C71A
 750+ C71A              ; Shorter version when sun does not need to be processed to screen
 751+ C71A 3A 12 C0     SunUpdateCompass:       ld      a,(SBnKxsgn)
 752+ C71D 2A 10 C0                             ld      hl,(SBnKxlo)
 753+ C720 CD B8 C6                             call    SunProcessVertex
 754+ C723 22 19 C0                             ld      (SunCompassX),hl
 755+ C726 3A 15 C0                             ld      a,(SBnKysgn)
 756+ C729 2A 13 C0                             ld      hl,(SBnKylo)
 757+ C72C CD B8 C6                             call    SunProcessVertex
 758+ C72F 22 1B C0                             ld      (SunCompassY),hl
 759+ C732 C9                                   ret
 760+ C733
 761+ C733                                 ; could probabyl set a variable say "varGood", default as 1 then set to 0 if we end up with a good calulation?? may not need it as we draw here
 762+ C733 CD C4 C4     SunUpdateAndRender:     call    SunApplyMyRollAndPitch
 763+ C736 3A 18 C0     .CheckDrawable:         ld      a,(SBnKzsgn)
 764+ C739                                      JumpIfAGTENusng 48,  SunUpdateCompass ; at a distance over 48 its too far away
 764+ C739 FE 30       >                        cp     48
 764+ C73B D2 1A C7    >                        jp		nc,SunUpdateCompass
 765+ C73E 21 17 C0                             ld      hl,SBnKzhi                  ; if the two high bytes are zero then its too close
 766+ C741 B6                                   or      (hl)
 767+ C742                                      JumpIfAIsZero       SunUpdateCompass
 767+ C742 A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
 767+ C743 CA 1A C7    >                        jp	    z, SunUpdateCompass
 768+ C746 3A 12 C0     .calculateX:            ld      a,(SBnKxsgn)
 769+ C749 2A 10 C0                             ld      hl,(SBnKxlo)
 770+ C74C CD B8 C6                             call    SunProcessVertex            ; now returns carry set for failure
 771+ C74F 22 19 C0                             ld      (SunCompassX),hl
 772+ C752 D8                                   ret     c
 773+ C753 1E 80        .calculatedX:           ld      e,ScreenCenterX
 774+ C755 16 00                                ld      d,0
 775+ C757                                      ClearCarryFlag
 775+ C757 B7          >                        or a
 776+ C758 ED 5A                                adc     hl,de
 777+ C75A                                      ;call    HL2cEquHLSgnPlusAusgn       ; correct to center of screen
 778+ C75A 22 A3 C5                             ld      (SunScrnX),hl               ; save projected X Position, 2's compliment
 779+ C75D 3A 15 C0     .calculateY:            ld      a,(SBnKysgn)
 780+ C760 2A 13 C0                             ld      hl,(SBnKylo)
 781+ C763 CD B8 C6                             call    SunProcessVertex            ; now returns carry set for failure
 782+ C766 22 1B C0                             ld      (SunCompassY),hl
 783+ C769 D8                                   ret     c
 784+ C76A 1E 60        .calculatedY:           ld      e,ScreenCenterY
 785+ C76C 16 00                                ld      d,0
 786+ C76E EB                                   ex      de,hl
 787+ C76F                                      ClearCarryFlag
 787+ C76F B7          >                        or a
 788+ C770 ED 52                                sbc     hl,de
 789+ C772                                      ;call    HL2cEquHLSgnPlusAusgn       ; correct to center of screen
 790+ C772 22 A5 C5                             ld      (SunScrnY),hl               ; save projected Y Position, 2's compliment
 791+ C775              ; .........................................................................................................................
 792+ C775 CD FD C6                             call    SunCalculateRadius
 793+ C778              ; .........................................................................................................................
 794+ C778 2A A3 C5     .CheckIfSunOnScreen:    ld      hl,(SunScrnX)               ; get x pixel position
 795+ C77B FD 26 00                             ld      iyh,0                       ; iyh holds draw status, 0= OK
 796+ C77E 16 00                                ld      d,0                         ; e still holds radius
 797+ C780 7C                                   ld      a,h
 798+ C781                                      JumpOnLeadSignSet   h,.CheckXNegative
 798+ C781 7C          >                        ld      a,h
 798+ C782 E6 80       >                        and     SignOnly8Bit
 798+ C784 C2 9A C7    >                        jp      nz,.CheckXNegative
 799+ C787 7C           .CheckXPositive:        ld      a,h
 800+ C788                                      JumpIfAIsZero   .XOnScreen          ; if high byte of h is not zero its definitly on screen
 800+ C788 A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
 800+ C789 CA A3 C7    >                        jp	    z, .XOnScreen
 801+ C78C 16 00                                ld      d,0                         ; de = radius
 802+ C78E                                      ClearCarryFlag
 802+ C78E B7          >                        or a
 803+ C78F ED 52                                sbc     hl,de
 804+ C791 FA A3 C7                             jp      m   ,.XOnScreen             ; if result was negative then it spans screen
 805+ C794 7C                                   ld      a,h
 806+ C795                                      JumpIfAIsZero   .XOnScreen          ; if high byte of h is not zero then its partially on screen at least
 806+ C795 A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
 806+ C796 CA A3 C7    >                        jp	    z, .XOnScreen
 807+ C799 C9                                   ret                                 ; None of the X coordinates are on screen
 808+ C79A 16 00        .CheckXNegative:        ld      d,0                         ; de = radius
 809+ C79C                                      ClearCarryFlag
 809+ C79C B7          >                        or a
 810+ C79D ED 5A                                adc     hl,de                       ; so we have hl - de
 811+ C79F F2 A3 C7                             jp      p,.XOnScreen                ; if result was positive then it spans screen so we are good
 812+ C7A2 C9                                   ret                                 ; else x is totally off the left side of the screen
 813+ C7A3              ; .........................................................................................................................
 814+ C7A3 2A A5 C5     .XOnScreen:             ld      hl,(SunScrnY)               ; now Check Y coordinate
 815+ C7A6                                      JumpOnLeadSignSet   h,.CheckYNegative
 815+ C7A6 7C          >                        ld      a,h
 815+ C7A7 E6 80       >                        and     SignOnly8Bit
 815+ C7A9 C2 CA C7    >                        jp      nz,.CheckYNegative
 816+ C7AC 7C           .CheckYPositive:        ld      a,h
 817+ C7AD                                      JumpIfAIsNotZero   .PosYCheck2
 817+ C7AD A7          >                        and     a
 817+ C7AE C2 B7 C7    >                        jp	    nz,.PosYCheck2
 818+ C7B1 7D                                   ld      a,l
 819+ C7B2 E6 80                                and     %10000000
 820+ C7B4 CA D3 C7                             jp      z,YOnScreen                ; at least 1 row is on screen as > 128
 821+ C7B7 16 00        .PosYCheck2:            ld      d,0                         ; de = radius
 822+ C7B9                                      ClearCarryFlag
 822+ C7B9 B7          >                        or a
 823+ C7BA ED 52                                sbc     hl,de
 824+ C7BC FA D3 C7                             jp      m,YOnScreen                ; so if its -ve then it spans screen
 825+ C7BF 7C                                   ld      a,h                         ; if h > 0 then off screen so did not span
 826+ C7C0                                      ReturnIfANotZero                    ; .
 826+ C7C0 A7          >                        and     a
 826+ C7C1 C0          >                        ret     nz
 827+ C7C2 7D                                   ld      a,l                         ; if l > 128 then off screen so did not span
 828+ C7C3 E6 80                                and     %10000000                   ; .
 829+ C7C5                                      ReturnIfANotZero                    ; .
 829+ C7C5 A7          >                        and     a
 829+ C7C6 C0          >                        ret     nz
 830+ C7C7 C3 D3 C7                             jp      YOnScreen                  ; so Y at least spans
 831+ C7CA 16 00        .CheckYNegative:        ld      d,0                         ; de = radius
 832+ C7CC                                      ClearCarryFlag
 832+ C7CC B7          >                        or a
 833+ C7CD ED 5A                                adc     hl,de                       ; so we have hl - de
 834+ C7CF F2 D3 C7                             jp      p,YOnScreen                ; if result was positive then it spans screen so we are good
 835+ C7D2 C9                                   ret                                 ; else never gets above 0 so return
 836+ C7D3              ; .........................................................................................................................
 837+ C7D3 21 A3 C0     YOnScreen:             ld      hl,SBnKLineArray            ; we load start and end as 0
 838+ C7D6 11 00 01                             ld		de, SunLineArraySize        ; just if we get a 0,0 genuine we will not plot it
 839+ C7D9 3E 00                                ld		a,0
 840+ C7DB CD A5 99                             call	memfill_dma
 841+ C7DE              ; .........................................................................................................................
 842+ C7DE 11 00 00     .SetRaggedEdgeMax:      ld      de,0
 843+ C7E1 3A A7 C5                             ld      a,(SunRadius)               ; get readius
 844+ C7E4 FE 60                                cp      96                          ; if > 96 then roll carry flag into e
 845+ C7E6                                      FlipCarryFlag
 845+ C7E6 3F          >                        ccf
 846+ C7E7 CB 13                                rl      e                           ; if > 40 then roll carry flag into e
 847+ C7E9 FE 28                                cp      40
 848+ C7EB                                      FlipCarryFlag
 848+ C7EB 3F          >                        ccf
 849+ C7EC CB 13                                rl      e
 850+ C7EE FE 10                                cp      16                          ; if > 16 then roll carry flag into e
 851+ C7F0                                      FlipCarryFlag
 851+ C7F0 3F          >                        ccf
 852+ C7F1 CB 13                                rl     e
 853+ C7F3 7B                                   ld      a,e                         ; a = ragged size from %00000111 to %00000000
 854+ C7F4 32 A0 C5                             ld      (RaggedSize),a
 855+ C7F7              ; .........................................................................................................................
 856+ C7F7 21 A3 C0     .SkipSetK:              ld      hl,SBnKLineArray            ; prep line array details ready for filling
 857+ C7FA 22 A3 C1                             ld      (LineArrayPtr),hl
 858+ C7FD AF                                   xor     a
 859+ C7FE 32 9F C5                             ld      (LineCount),a
 860+ C801              ; .........................................................................................................................
 861+ C801 2A A5 C5     .GetMinY:               ld      hl,(SunScrnY)               ; now calculate start Y position
 862+ C804 3A A7 C5                             ld      a,(SunRadius)
 863+ C807 5F                                   ld      e,a
 864+ C808 16 00                                ld      d,0
 865+ C80A                                      ClearCarryFlag
 865+ C80A B7          >                        or a
 866+ C80B ED 52                                sbc     hl,de
 867+ C80D F2 13 C8                             jp      p,.DoneMinY
 868+ C810 21 00 00                             ld      hl,0                        ; if its negative then we start with 0 as it can only go up screen after radius
 869+ C813              .DoneMinY:              ReturnIfRegNotZero h                ; if h > 0 then off the screen
 869+ C813 7C          >                        ld      a, h
 869+ C814 A7          >                        and     a
 869+ C815 C0          >                        ret     nz
 870+ C816 7D                                   ld      a,l                         ; check if l > 127
 871+ C817 E6 80                                and     SignOnly8Bit                ; .
 872+ C819 C0                                   ret     nz                          ; if bit is set then > 128
 873+ C81A 7D           .SetMinY:               ld      a,l
 874+ C81B 32 A1 C5                             ld      (MinYOffset),a              ; so now we have Y top of screen
 875+ C81E 2A A5 C5     .GetMaxY:               ld      hl,(SunScrnY)               ; get hl = Y + radius, note if we got here then this can never be a negative result but can go from -ve hl to +ve result
 876+ C821 3A A7 C5                             ld      a,(SunRadius)               ; hl = hl + radius
 877+ C824 16 00                                ld      d,0                         ; .
 878+ C826 5F                                   ld      e,a                         ; .
 879+ C827                                      ClearCarryFlag                      ; .
 879+ C827 B7          >                        or a
 880+ C828 ED 5A                                adc     hl,de                       ; .
 881+ C82A 7C                                   ld      a,h
 882+ C82B A7                                   and     a
 883+ C82C 28 06                                jr      z,.YHiOK
 884+ C82E 21 7F 00     .YHiGTE127:             ld      hl,127
 885+ C831 C3 3D C8                             jp      .SetMaxY
 886+ C834 7D           .YHiOK:                 ld      a,l                         ; clamp at 127
 887+ C835 E6 80                                and     SignOnly8Bit                ; .
 888+ C837 CA 3D C8                             jp      z,.SetMaxY
 889+ C83A 21 7F 00                             ld      hl,127
 890+ C83D 7D           .SetMaxY                ld      a,l
 891+ C83E 32 A2 C5                             ld      (MaxYOffSet),a              ; so now we have min and max Y coordinates and SunScrnX & Y holds center
 892+ C841 CD 48 C8                             call    SunDrawCircle
 893+ C844 CD BD C1                             call    SunDraw
 894+ C847 C9                                   ret
 895+ C848                                      ; b8 04 00 02 00 00 60 01 00 gives a 0.5 so we have the cal wrong as its +-1 so should be * result of divide by 128
 896+ C848              ;.. Now we caluclate the circle of the star
 897+ C848              ;.. its from MinY down the screen to MaxY center ProjX,ProjY.
 898+ C848              ;.. We can use the circle draw logic gtom Bressenham's algorithm
 899+ C848              ; so now there are the following conditions to consider
 900+ C848              ; y min = 0   y center is negative radius <= ABS (Y center)             => Don't draw
 901+ C848              ; y min = 0   y center is negative radius > ABS (Y center)+1            => Draw bottom half only
 902+ C848              ; y max = 127 y center is > 127    radius <= y center - 127             => Don't draw
 903+ C848              ; y max = 127 y center is > 127    radius > y center - 127              => Draw top half only
 904+ C848              ; y min >= 0  y center > y min     we don't need to worry about radius  => Draw both halves
 905+ C848              ; x center + radius < 0                                                 => Don't draw
 906+ C848              ; x center - radius > 255                                               => Don't draw
 907+ C848              ; we won't consider x more here as the driver is the y coordinate but we will check if x is vaiable
 908+ C848              ; x point = max (x point, 0)   on left
 909+ C848              ; x point = min (x point, 255) on right
 910+ C848
 911+ C848              SetIYPlusOffset:        MACRO   reg
 912+ C848 ~                                    push    hl,,iy                          ; save hl, then hl = iy
 913+ C848 ~                                    pop     hl                              ;
 914+ C848 ~                                    ld      a,reg
 915+ C848 ~                                    add     hl,a
 916+ C848 ~                                    add     hl,a
 917+ C848 ~                                    push    hl
 918+ C848 ~                                    pop     iy
 919+ C848 ~                                    pop     hl
 920+ C848                                      ENDM
 921+ C848
 922+ C848              SetIYMinusOffset:       MACRO   reg
 923+ C848 ~                                    push    de,,hl,,iy                      ; save hl, then hl = iy
 924+ C848 ~                                    pop     hl                              ;
 925+ C848 ~                                    ld      a,reg
 926+ C848 ~                                    add     a,a
 927+ C848 ~                                    ld      e,a
 928+ C848 ~                                    ld      d,0
 929+ C848 ~                                    ClearCarryFlag
 930+ C848 ~                                    sbc     hl,de
 931+ C848 ~                                    push    hl
 932+ C848 ~                                    pop     iy
 933+ C848 ~                                    pop     de,,hl
 934+ C848                                      ENDM
 935+ C848
 936+ C848
 937+ C848              ;;;-SunDrawCircle:          ld      a,(SunRadius)
 938+ C848              ;;;-.CheckRadius:           ReturnIfAIsZero                         ; elimiate zero or single pixel
 939+ C848              ;;;-                        JumpIfAEqNusng  1, SunCircleSinglePixel
 940+ C848              ;;;-                       ; JumpIfAGTENusng 127, SunFullScreen      ; if its covering whole then just make it yellow
 941+ C848              ;;;-; already done .MakeCentreX2C:         MemSignedTo2C SunScrnX                   ; convert 16 bit signed to 2's compliment
 942+ C848              ;;;-; already done .MakeCentreY2C:         MemSignedTo2C SunScrnY                   ; .
 943+ C848              ;;;-.BoundsCheck            ld      hl,(SunScrnY)
 944+ C848              ;;;-                        push    hl
 945+ C848              ;;;-                        ld      a,(SunRadius)
 946+ C848              ;;;-                        add     hl,a
 947+ C848              ;;;-                        bit     7,h
 948+ C848              ;;;-                        ret     nz                              ; if Y + radius is negative then off the screen
 949+ C848              ;;;-                        pop     hl
 950+ C848              ;;;-                        ld      d,0
 951+ C848              ;;;-                        ld      e,a
 952+ C848              ;;;-                        ClearCarryFlag
 953+ C848              ;;;-                        sbc     hl,de
 954+ C848              ;;;-                        ld      a,h
 955+ C848              ;;;-                        ReturnIfAGTENusng  1                     ; really shoudl be signed TODO
 956+ C848              ;;;-
 957+ C848              ;;;-                        ld      hl,(SunScrnX)
 958+ C848              ;;;-                        push    hl
 959+ C848              ;;;-                        ld      a,(SunRadius)
 960+ C848              ;;;-                        add     hl,a
 961+ C848              ;;;-                        bit     7,h
 962+ C848              ;;;-                        ret     nz                              ; if Y + radius is negative then off the screen
 963+ C848              ;;;-                        pop     hl
 964+ C848              ;;;-                        ld      d,0
 965+ C848              ;;;-                        ld      e,a
 966+ C848              ;;;-                        ClearCarryFlag
 967+ C848              ;;;-                        sbc     hl,de
 968+ C848              ;;;-                        ld      a,h
 969+ C848              ;;;-
 970+ C848              ;;;-                        ReturnIfAGTENusng 1                      ; really shoudl be signed TODO
 971+ C848              SunDrawCircle
 972+ C848                                      ; ** BNOTE Ptuichj abnd roll has a bug as piitch increases z axis value
 973+ C848              .PrepCircleData:       ; ld      ixl,0
 974+ C848                                     ; ld		(.Plot1+1),bc			        ; save origin into DE reg in code
 975+ C848 3A A7 C5                             ld      a,(SunRadius)
 976+ C84B DD 67                                ld		ixh,a							; ixh = radius
 977+ C84D DD 2E 00                             ld		ixl,0						    ; ixl = delta (y)
 978+ C850 26 00        .calcd:	                ld		h,0                             ; de = radius * 2
 979+ C852 6F                                   ld		l,a                             ; .
 980+ C853 29                                   add		hl,hl							; .
 981+ C854 EB                                   ex		de,hl							; .
 982+ C855 21 03 00                             ld		hl,3                            ; hl = 3 - (r * 2)
 983+ C858 A7                                   and		a                               ; .
 984+ C859 ED 52                                sbc		hl,de							; .
 985+ C85B 44                                   ld		b,h                             ; bc = 3 - (r * 2) : d = 3 - 2r
 986+ C85C 4D                                   ld		c,l								; .
 987+ C85D 21 01 00     .calcdelta:             ld		hl,1                            ; set hl to 1
 988+ C860 16 00                                ld		d,0                             ; de = ixl
 989+ C862 DD 5D                                ld		e,ixl                           ;
 990+ C864                                      ClearCarryFlag                          ;
 990+ C864 B7          >                        or a
 991+ C865 ED 52                                sbc		hl,de                           ; hl = 1 - ixl
 992+ C867 11 01 00     .Setde1:                ld		de,1                            ; del = 1
 993+ C86A DD 7C        .CircleLoop:            ld		a,ixh                           ; if x = y then exit
 994+ C86C DD BD                                cp		ixl                             ;
 995+ C86E D8                                   ret		c                               ;
 996+ C86F D9           .ProcessLoop:	        exx                                     ; save out registers
 997+ C870              ; Process CY+Y CX+X & CY+Y CX-X..................................
 998+ C870 2A A5 C5     .Plot1:                 ld      hl, (SunScrnY)
 999+ C873 DD 7C        .Get1YRow:              ld      a,ixh
1000+ C875 ED 31                                add     hl,a                            ; Check to see if CY+Y (note is add hl ,a usginedf only??)
1001+ C877              .Check1YRowOnScreen:    CheckRowHLOnScreen .NoTopPixelPair
1001+ C877 7C          >                        ld      a,h                             ; is h byte set, i.e > 256 or < 0
1001+ C878 A7          >                        and     a                               ; .
1001+ C879 20 26       >                        jr      nz,.NoTopPixelPair                   ; h <> 0 so fails (covers <0 and > 255
1001+ C87B 7D          >                        ld      a,l                             ; l bit 7 0?
1001+ C87C E6 80       >                        and     Bit7Only                        ; covers l > 127 (screen draw area is 0 to 192 / 3 * 2 (128)
1001+ C87E 20 21       >                        jr      nz,.NoTopPixelPair                   ;
1002+ C880              .Write1YCoord:          SetIYPlusOffset ixh                     ; IY = IY + ixh
1002+ C880 E5 FD E5    >                        push    hl,,iy                          ; save hl, then hl = iy
1002+ C883 E1          >                        pop     hl                              ;
1002+ C884 DD 7C       >                        ld      a,ixh
1002+ C886 ED 31       >                        add     hl,a
1002+ C888 ED 31       >                        add     hl,a
1002+ C88A E5          >                        push    hl
1002+ C88B FD E1       >                        pop     iy
1002+ C88D E1          >                        pop     hl
1003+ C88E                                      IYEquRowN l                             ; IY = SBnkLineArray + (2 * l) - set up iy as target address
1003+ C88E 7D          >                        ld      a,l
1003+ C88F 21 A3 C0    >                        ld      hl,SBnKLineArray
1003+ C892 ED 31       >                        add     hl,a
1003+ C894 ED 31       >                        add     hl,a
1003+ C896 E5          >                        push    hl
1003+ C897 FD E1       >                        pop     iy
1004+ C899 DD 7D                                ld      a,ixl
1005+ C89B CD 6E C9                             call    ProcessXRowA
1006+ C89E C3 A1 C8                             jp      .Plot2
1007+ C8A1              .NoTopPixelPair:        ;break
1008+ C8A1              ; Process CY-Y CX+X & CY-Y CX-X..................................
1009+ C8A1 2A A5 C5     .Plot2:                 ld      hl, (SunScrnY)
1010+ C8A4 16 00        .Get2YRow:              ld      d,0
1011+ C8A6 DD 5C                                ld      e,ixh
1012+ C8A8                                      ClearCarryFlag
1012+ C8A8 B7          >                        or a
1013+ C8A9 ED 52                                sbc     hl,de
1014+ C8AB              .Check2YRowOnScreen:    CheckRowHLOnScreen .NoBottomPixelPair
1014+ C8AB 7C          >                        ld      a,h                             ; is h byte set, i.e > 256 or < 0
1014+ C8AC A7          >                        and     a                               ; .
1014+ C8AD 20 2B       >                        jr      nz,.NoBottomPixelPair                   ; h <> 0 so fails (covers <0 and > 255
1014+ C8AF 7D          >                        ld      a,l                             ; l bit 7 0?
1014+ C8B0 E6 80       >                        and     Bit7Only                        ; covers l > 127 (screen draw area is 0 to 192 / 3 * 2 (128)
1014+ C8B2 20 26       >                        jr      nz,.NoBottomPixelPair                   ;
1015+ C8B4                                      SetIYMinusOffset ixh
1015+ C8B4 D5 E5 FD E5 >                        push    de,,hl,,iy                      ; save hl, then hl = iy
1015+ C8B8 E1          >                        pop     hl                              ;
1015+ C8B9 DD 7C       >                        ld      a,ixh
1015+ C8BB 87          >                        add     a,a
1015+ C8BC 5F          >                        ld      e,a
1015+ C8BD 16 00       >                        ld      d,0
1015+ C8BF             >                        ClearCarryFlag
1015+ C8BF B7          >                        or a
1015+ C8C0 ED 52       >                        sbc     hl,de
1015+ C8C2 E5          >                        push    hl
1015+ C8C3 FD E1       >                        pop     iy
1015+ C8C5 E1 D1       >                        pop     de,,hl
1016+ C8C7              .Write2YCoord:          IYEquRowN l                             ; set up iy as target address
1016+ C8C7 7D          >                        ld      a,l
1016+ C8C8 21 A3 C0    >                        ld      hl,SBnKLineArray
1016+ C8CB ED 31       >                        add     hl,a
1016+ C8CD ED 31       >                        add     hl,a
1016+ C8CF E5          >                        push    hl
1016+ C8D0 FD E1       >                        pop     iy
1017+ C8D2 DD 7D                                ld      a,ixl
1018+ C8D4 CD 6E C9                             call    ProcessXRowA
1019+ C8D7 C3 DA C8                             jp      .Plot3
1020+ C8DA              .NoBottomPixelPair:     ;break
1021+ C8DA              ; Process CY+X CX+Y & CY+X CX-Y..................................
1022+ C8DA 2A A5 C5     .Plot3:                 ld      hl, (SunScrnY)
1023+ C8DD DD 7D        .Get3YRow:              ld      a,ixl
1024+ C8DF ED 31                                add     hl,a                            ; Check to see if CY+Y
1025+ C8E1              .Check3YRowOnScreen:    CheckRowHLOnScreen .NoTop3PixelPair
1025+ C8E1 7C          >                        ld      a,h                             ; is h byte set, i.e > 256 or < 0
1025+ C8E2 A7          >                        and     a                               ; .
1025+ C8E3 20 26       >                        jr      nz,.NoTop3PixelPair                   ; h <> 0 so fails (covers <0 and > 255
1025+ C8E5 7D          >                        ld      a,l                             ; l bit 7 0?
1025+ C8E6 E6 80       >                        and     Bit7Only                        ; covers l > 127 (screen draw area is 0 to 192 / 3 * 2 (128)
1025+ C8E8 20 21       >                        jr      nz,.NoTop3PixelPair                   ;
1026+ C8EA                                      SetIYPlusOffset ixl
1026+ C8EA E5 FD E5    >                        push    hl,,iy                          ; save hl, then hl = iy
1026+ C8ED E1          >                        pop     hl                              ;
1026+ C8EE DD 7D       >                        ld      a,ixl
1026+ C8F0 ED 31       >                        add     hl,a
1026+ C8F2 ED 31       >                        add     hl,a
1026+ C8F4 E5          >                        push    hl
1026+ C8F5 FD E1       >                        pop     iy
1026+ C8F7 E1          >                        pop     hl
1027+ C8F8              .Write3YCoord:          IYEquRowN l                             ; set up iy as target address
1027+ C8F8 7D          >                        ld      a,l
1027+ C8F9 21 A3 C0    >                        ld      hl,SBnKLineArray
1027+ C8FC ED 31       >                        add     hl,a
1027+ C8FE ED 31       >                        add     hl,a
1027+ C900 E5          >                        push    hl
1027+ C901 FD E1       >                        pop     iy
1028+ C903 DD 7C                                ld      a,ixh
1029+ C905 CD 6E C9                             call    ProcessXRowA
1030+ C908 C3 0B C9                             jp      .Plot4
1031+ C90B              .NoTop3PixelPair:       ;break
1032+ C90B              ; Process CY-X CX+Y & CY-X CX-Y..................................
1033+ C90B 2A A5 C5     .Plot4:                 ld      hl, (SunScrnY)
1034+ C90E 16 00        .Get4YRow:              ld      d,0
1035+ C910 DD 5D                                ld      e,ixl
1036+ C912                                      ClearCarryFlag
1036+ C912 B7          >                        or a
1037+ C913 ED 52                                sbc     hl,de
1038+ C915              .Check4YRowOnScreen:    CheckRowHLOnScreen .NoBottom4PixelPair
1038+ C915 7C          >                        ld      a,h                             ; is h byte set, i.e > 256 or < 0
1038+ C916 A7          >                        and     a                               ; .
1038+ C917 20 28       >                        jr      nz,.NoBottom4PixelPair                   ; h <> 0 so fails (covers <0 and > 255
1038+ C919 7D          >                        ld      a,l                             ; l bit 7 0?
1038+ C91A E6 80       >                        and     Bit7Only                        ; covers l > 127 (screen draw area is 0 to 192 / 3 * 2 (128)
1038+ C91C 20 23       >                        jr      nz,.NoBottom4PixelPair                   ;
1039+ C91E                                      SetIYMinusOffset ixl
1039+ C91E D5 E5 FD E5 >                        push    de,,hl,,iy                      ; save hl, then hl = iy
1039+ C922 E1          >                        pop     hl                              ;
1039+ C923 DD 7D       >                        ld      a,ixl
1039+ C925 87          >                        add     a,a
1039+ C926 5F          >                        ld      e,a
1039+ C927 16 00       >                        ld      d,0
1039+ C929             >                        ClearCarryFlag
1039+ C929 B7          >                        or a
1039+ C92A ED 52       >                        sbc     hl,de
1039+ C92C E5          >                        push    hl
1039+ C92D FD E1       >                        pop     iy
1039+ C92F E1 D1       >                        pop     de,,hl
1040+ C931              .Write4YCoord:          IYEquRowN l                             ; set up iy as target address
1040+ C931 7D          >                        ld      a,l
1040+ C932 21 A3 C0    >                        ld      hl,SBnKLineArray
1040+ C935 ED 31       >                        add     hl,a
1040+ C937 ED 31       >                        add     hl,a
1040+ C939 E5          >                        push    hl
1040+ C93A FD E1       >                        pop     iy
1041+ C93C DD 7C                                ld      a,ixh
1042+ C93E CD 6E C9                             call    ProcessXRowA
1043+ C941              .NoBottom4PixelPair:
1044+ C941              ; Completed one iteration........................................
1045+ C941 D9                                   exx
1046+ C942 CB 7C        .IncrementCircle:	    bit     7,h				; Check for Hl<=0
1047+ C944 28 03                                jr z,   .draw_circle_1
1048+ C946 19                                   add hl,de			; Delta=Delta+D1
1049+ C947 18 05                                jr      .draw_circle_2		;
1050+ C949 09           .draw_circle_1:		    add     hl,bc			; Delta=Delta+D2
1051+ C94A 03                                   inc     bc
1052+ C94B 03                                   inc     bc				; D2=D2+2
1053+ C94C DD 25                                dec     ixh				; Y=Y-1
1054+ C94E 03           .draw_circle_2:		    inc bc				    ; D2=D2+2
1055+ C94F 03                                   inc bc
1056+ C950 13                                   inc de				    ; D1=D1+2
1057+ C951 13                                   inc de
1058+ C952 DD 2C                                inc ixl				    ; X=X+1
1059+ C954 C3 6A C8                             jp      .CircleLoop
1060+ C957 2A A3 C5     SunCircleSinglePixel:     ld      hl,(SunScrnX)
1061+ C95A 7C                                   ld      a,h
1062+ C95B A7                                   and     a
1063+ C95C C0                                   ret     nz                  ; if the high byte is set then no pixel
1064+ C95D 4D                                   ld      c,l
1065+ C95E 2A A5 C5                             ld      hl,(SunScrnY)
1066+ C961 7C                                   ld      a,h
1067+ C962 A7                                   and     a
1068+ C963 C0                                   ret     nz                  ; if the high byte is set then no pixel
1069+ C964 7D                                   ld      a,l
1070+ C965 CB 7F                                bit     7,a
1071+ C967 C0                                   ret     nz                  ; if l > 127 then no pixel
1072+ C968 47                                   ld      b,a
1073+ C969 7B                                   ld		a,e
1074+ C96A CD 6E E1                             call	l2_plot_pixel_y_test
1075+ C96D C9                                   ret
1076+ C96E
1077+ C96E              ProcessXRowA:           ;break
1078+ C96E 2A A3 C5                             ld      hl,(SunScrnX)                    ; get X Center
1079+ C971 F5                                   push    af                              ; save A (curent offset +/- value
1080+ C972 ED 31                                add     hl,a                            ; Hl = HL + offset
1081+ C974 7C                                   ld      a,h                             ; is HL negative?, if so then set C to 0
1082+ C975 CB 7F                                bit     7,a                             ;
1083+ C977 20 14                                jr      nz,.XCoordNegative              ; We can have this for non X + Radius i.e. the equater
1084+ C979 A7                                   and     a                               ; if H <> 0? (why by here must be +ve), set c to $FF
1085+ C97A 20 16                                jr      nz,.XCoordMaxed                 ; .
1086+ C97C 4D                                   ld      c,l                             ; else set c to l and do the -ve offset
1087+ C97D C5           .AddFuzz:               push    bc
1088+ C97E CD 7C A3                             call    doRandom                        ; c = c - random AND ragged Size
1089+ C981 C1                                   pop     bc
1090+ C982 21 A0 C5                             ld      hl,RaggedSize                   ;
1091+ C985 A6                                   and     (hl)                            ;
1092+ C986 81                                   add     c                               ;
1093+ C987 4F                                   ld      c,a                             ;
1094+ C988 38 08                                jr      c,.XCoordMaxed                  ; has fuzz caused a carry, if so > 255 to make 255
1095+ C98A C3 94 C9                             jp      .ProcessSubtract                ;
1096+ C98D 0E 00        .XCoordNegative:        ld      c,0                             ; if it was negative then 0
1097+ C98F C3 94 C9                             jp      .ProcessSubtract
1098+ C992 0E FF        .XCoordMaxed:           ld      c,255                           ; if it was +ve then 255
1099+ C994 F1           .ProcessSubtract:       pop     af                              ; get offset back
1100+ C995 5F                                   ld      e,a                             ; but goes into DE as its a subtract
1101+ C996 16 00                                ld      d,0
1102+ C998 2A A3 C5                             ld      hl,(SunScrnX)                    ; so do subtract
1103+ C99B                                      ClearCarryFlag                          ; .
1103+ C99B B7          >                        or a
1104+ C99C ED 52                                sbc     hl,de                           ; .
1105+ C99E FA BB C9                             jp      m,.XCoordLeftNegative           ; again test for min max
1106+ C9A1 E5 C5        .AddFuzzSubtract:       push    hl,,bc
1107+ C9A3 CD 7C A3                             call    doRandom                        ; c = c - random AND ragged Size
1108+ C9A6 C1                                   pop     bc
1109+ C9A7 21 A0 C5                             ld      hl,RaggedSize                   ;
1110+ C9AA A6                                   and     (hl)                            ;
1111+ C9AB 5F                                   ld      e,a
1112+ C9AC E1                                   pop     hl
1113+ C9AD ED 52                                sbc     hl,de
1114+ C9AF FA BB C9                             jp      m,.XCoordLeftNegative           ; again test for min max
1115+ C9B2 7C                                   ld      a,h
1116+ C9B3 A7                                   and     a
1117+ C9B4 C2 C0 C9                             jp      nz,.XCordLeftMaxed
1118+ C9B7 45                                   ld      b,l
1119+ C9B8 C3 C2 C9                             jp      .CompletedXCoords
1120+ C9BB 06 00        .XCoordLeftNegative:    ld      b,0
1121+ C9BD C3 C2 C9                             jp      .CompletedXCoords
1122+ C9C0 06 FF        .XCordLeftMaxed:        ld      b,255
1123+ C9C2 78           .CompletedXCoords:      ld      a,b
1124+ C9C3 FD 77 00     .RowSaveIY1             ld      (iy+0),a                        ; iy holds current line array index
1125+ C9C6 79                                   ld      a,c
1126+ C9C7 FD 77 01     .RowSaveIY3             ld      (iy+1),a
1127+ C9CA C9                                   ret
1128+ C9CB
1129+ C9CB              ; .....................................................
1130+ C9CB              ; if the universe object is a planet or sun then do that instead
1131+ C9CB              ;;TODOProcessPlanet:          cp      129
1132+ C9CB              ;;TODO                        jr      nz, .ItsAPlanet
1133+ C9CB              ;;TODO.ItsAStar:              ld      a,(SBnKzsgn)
1134+ C9CB              ;;TODO                        cp      48                               ; if z > 48 (it must be positive to enter this routine)
1135+ C9CB
1136+ C9CB
1137+ C9CB              ; Square Root using tables
1138+ C9CB              ; DE = number to find
1139+ C9CB 21 EB CB     SunLookupSqrtDE:        ld      hl,SunSquareRootTable
1140+ C9CE 7A           .LookupCorseJump:       ld      a,d
1141+ C9CF ED 31                                add     hl,a
1142+ C9D1 ED 31                                add     hl,a
1143+ C9D3 7E                                   ld      a,(hl)
1144+ C9D4 23                                   inc     hl
1145+ C9D5 66                                   ld      h,(hl)
1146+ C9D6 6F                                   ld      l,a
1147+ C9D7 7E           .FineSearchLoop:        ld      a,(hl)
1148+ C9D8                                      JumpIfAEqNusng  e, .FoundByte
1148+ C9D8 BB          >                        cp     e
1148+ C9D9 CA E5 C9    >                        jp      z,.FoundByte
1149+ C9DC                                      JumpIfAGTENusng e, .PreviousByte
1149+ C9DC BB          >                        cp     e
1149+ C9DD D2 E8 C9    >                        jp		nc,.PreviousByte
1150+ C9E0 23           .NotFound:              inc     hl
1151+ C9E1 23                                   inc     hl
1152+ C9E2 C3 D7 C9                             jp      .FineSearchLoop
1153+ C9E5 23           .FoundByte:             inc     hl
1154+ C9E6 7E                                   ld      a,(hl)
1155+ C9E7 C9                                   ret
1156+ C9E8 2B           .PreviousByte:          dec     hl
1157+ C9E9 7E                                   ld      a,(hl)
1158+ C9EA C9                                   ret
1159+ C9EB
1160+ C9EB EB CB FD CB  SunRootHighIndex:       DW SunSqr00,SunSqr01,SunSqr02,SunSqr03,SunSqr04,SunSqr05,SunSqr06,SunSqr07,SunSqr08,SunSqr09,SunSqr0A,SunSqr0B,SunSqr0C,SunSqr0D,SunSqr0E,SunSqr0F
1160+ C9EF 0B CC 17 CC
1160+ C9F3 21 CC 29 CC
1160+ C9F7 31 CC 39 CC
1160+ C9FB 41 CC 47 CC
1160+ C9FF 4F CC 55 CC
1160+ CA03 59 CC 5F CC
1160+ CA07 65 CC 6B CC
1161+ CA0B 71 CC 77 CC                          DW SunSqr10,SunSqr11,SunSqr12,SunSqr13,SunSqr14,SunSqr15,SunSqr16,SunSqr17,SunSqr18,SunSqr19,SunSqr1A,SunSqr1B,SunSqr1C,SunSqr1D,SunSqr1E,SunSqr1F
1161+ CA0F 7D CC 83 CC
1161+ CA13 89 CC 8D CC
1161+ CA17 91 CC 93 CC
1161+ CA1B 97 CC 9B CC
1161+ CA1F 9F CC A3 CC
1161+ CA23 A7 CC AB CC
1161+ CA27 AD CC B1 CC
1162+ CA2B B3 CC B7 CC                          DW SunSqr20,SunSqr21,SunSqr22,SunSqr23,SunSqr24,SunSqr25,SunSqr26,SunSqr27,SunSqr28,SunSqr29,SunSqr2A,SunSqr2B,SunSqr2C,SunSqr2D,SunSqr2E,SunSqr2F
1162+ CA2F BB CC BD CC
1162+ CA33 BF CC C3 CC
1162+ CA37 C5 CC C7 CC
1162+ CA3B CB CC CD CC
1162+ CA3F CF CC D1 CC
1162+ CA43 D5 CC D7 CC
1162+ CA47 D9 CC DD CC
1163+ CA4B E1 CC E5 CC                          DW SunSqr30,SunSqr31,SunSqr32,SunSqr33,SunSqr34,SunSqr35,SunSqr36,SunSqr37,SunSqr38,SunSqr39,SunSqr3A,SunSqr3B,SunSqr3C,SunSqr3D,SunSqr3E,SunSqr3F
1163+ CA4F E9 CC ED CC
1163+ CA53 EF CC F3 CC
1163+ CA57 F7 CC FB CC
1163+ CA5B FD CC 01 CD
1163+ CA5F 05 CD 09 CD
1163+ CA63 0D CD 11 CD
1163+ CA67 15 CD 19 CD
1164+ CA6B 1D CD 21 CD                          DW SunSqr40,SunSqr41,SunSqr42,SunSqr43,SunSqr44,SunSqr45,SunSqr46,SunSqr47,SunSqr48,SunSqr49,SunSqr4A,SunSqr4B,SunSqr4C,SunSqr4D,SunSqr4E,SunSqr4F
1164+ CA6F 25 CD 29 CD
1164+ CA73 2D CD 31 CD
1164+ CA77 35 CD 39 CD
1164+ CA7B 3D CD 41 CD
1164+ CA7F 45 CD 49 CD
1164+ CA83 4D CD 51 CD
1164+ CA87 55 CD 59 CD
1165+ CA8B 5D CD 5F CD                          DW SunSqr50,SunSqr51,SunSqr52,SunSqr53,SunSqr54,SunSqr55,SunSqr56,SunSqr57,SunSqr58,SunSqr59,SunSqr5A,SunSqr5B,SunSqr5C,SunSqr5D,SunSqr5E,SunSqr5F
1165+ CA8F 63 CD 67 CD
1165+ CA93 6B CD 6F CD
1165+ CA97 73 CD 77 CD
1165+ CA9B 7B CD 7D CD
1165+ CA9F 81 CD 85 CD
1165+ CAA3 89 CD 8D CD
1165+ CAA7 91 CD 93 CD
1166+ CAAB 97 CD 9B CD                          DW SunSqr60,SunSqr61,SunSqr62,SunSqr63,SunSqr64,SunSqr65,SunSqr66,SunSqr67,SunSqr68,SunSqr69,SunSqr6A,SunSqr6B,SunSqr6C,SunSqr6D,SunSqr6E,SunSqr6F
1166+ CAAF 9F CD A3 CD
1166+ CAB3 A5 CD A9 CD
1166+ CAB7 AD CD B1 CD
1166+ CABB B5 CD B7 CD
1166+ CABF BB CD BF CD
1166+ CAC3 C3 CD C5 CD
1166+ CAC7 C7 CD CB CD
1167+ CACB CF CD D3 CD                          DW SunSqr70,SunSqr71,SunSqr72,SunSqr73,SunSqr74,SunSqr75,SunSqr76,SunSqr77,SunSqr78,SunSqr79,SunSqr7A,SunSqr7B,SunSqr7C,SunSqr7D,SunSqr7E,SunSqr7F
1167+ CACF D7 CD DB CD
1167+ CAD3 DF CD E3 CD
1167+ CAD7 E5 CD E9 CD
1167+ CADB ED CD EF CD
1167+ CADF F3 CD F7 CD
1167+ CAE3 FB CD FD CD
1167+ CAE7 01 CE 05 CE
1168+ CAEB 09 CE 0B CE                          DW SunSqr80,SunSqr81,SunSqr82,SunSqr83,SunSqr84,SunSqr85,SunSqr86,SunSqr87,SunSqr88,SunSqr89,SunSqr8A,SunSqr8B,SunSqr8C,SunSqr8D,SunSqr8E,SunSqr8F
1168+ CAEF 0F CE 11 CE
1168+ CAF3 15 CE 19 CE
1168+ CAF7 1D CE 1F CE
1168+ CAFB 23 CE 27 CE
1168+ CAFF 29 CE 2D CE
1168+ CB03 31 CE 33 CE
1168+ CB07 37 CE 3B CE
1169+ CB0B 3D CE 41 CE                          DW SunSqr90,SunSqr91,SunSqr92,SunSqr93,SunSqr94,SunSqr95,SunSqr96,SunSqr97,SunSqr98,SunSqr99,SunSqr9A,SunSqr9B,SunSqr9C,SunSqr9D,SunSqr9E,SunSqr9F
1169+ CB0F 45 CE 47 CE
1169+ CB13 4B CE 4F CE
1169+ CB17 51 CE 55 CE
1169+ CB1B 59 CE 5B CE
1169+ CB1F 5F CE 63 CE
1169+ CB23 65 CE 69 CE
1169+ CB27 6D CE 6F CE
1170+ CB2B 73 CE 77 CE                          DW SunSqrA0,SunSqrA1,SunSqrA2,SunSqrA3,SunSqrA4,SunSqrA5,SunSqrA6,SunSqrA7,SunSqrA8,SunSqrA9,SunSqrAA,SunSqrAB,SunSqrAC,SunSqrAD,SunSqrAE,SunSqrAF
1170+ CB2F 79 CE 7D CE
1170+ CB33 7F CE 83 CE
1170+ CB37 87 CE 89 CE
1170+ CB3B 8D CE 8F CE
1170+ CB3F 93 CE 97 CE
1170+ CB43 99 CE 9D CE
1170+ CB47 A1 CE A3 CE
1171+ CB4B A5 CE A7 CE                          DW SunSqrB0,SunSqrB1,SunSqrB2,SunSqrB3,SunSqrB4,SunSqrB5,SunSqrB6,SunSqrB7,SunSqrB8,SunSqrB9,SunSqrBA,SunSqrBB,SunSqrBC,SunSqrBD,SunSqrBE,SunSqrBF
1171+ CB4F AB CE AF CE
1171+ CB53 B1 CE B5 CE
1171+ CB57 B7 CE BB CE
1171+ CB5B BF CE C3 CE
1171+ CB5F C5 CE C7 CE
1171+ CB63 CB CE CD CE
1171+ CB67 D1 CE D5 CE
1172+ CB6B D7 CE DB CE                          DW SunSqrC0,SunSqrC1,SunSqrC2,SunSqrC3,SunSqrC4,SunSqrC5,SunSqrC6,SunSqrC7,SunSqrC8,SunSqrC9,SunSqrCA,SunSqrCB,SunSqrCC,SunSqrCD,SunSqrCE,SunSqrCF
1172+ CB6F DD CE E1 CE
1172+ CB73 E3 CE E7 CE
1172+ CB77 EB CE ED CE
1172+ CB7B EF CE F1 CE
1172+ CB7F F5 CE F7 CE
1172+ CB83 FB CE FF CE
1172+ CB87 01 CF 05 CF
1173+ CB8B 07 CF 0B CF                          DW SunSqrD0,SunSqrD1,SunSqrD2,SunSqrD3,SunSqrD4,SunSqrD5,SunSqrD6,SunSqrD7,SunSqrD8,SunSqrD9,SunSqrDA,SunSqrDB,SunSqrDC,SunSqrDD,SunSqrDE,SunSqrDF
1173+ CB8F 0D CF 11 CF
1173+ CB93 13 CF 17 CF
1173+ CB97 1B CF 1D CF
1173+ CB9B 21 CF 23 CF
1173+ CB9F 27 CF 29 CF
1173+ CBA3 2D CF 2F CF
1173+ CBA7 31 CF 33 CF
1174+ CBAB 37 CF 3B CF                          DW SunSqrE0,SunSqrE1,SunSqrE2,SunSqrE3,SunSqrE4,SunSqrE5,SunSqrE6,SunSqrE7,SunSqrE8,SunSqrE9,SunSqrEA,SunSqrEB,SunSqrEC,SunSqrED,SunSqrEE,SunSqrEF
1174+ CBAF 3F CF 43 CF
1174+ CBB3 47 CF 4B CF
1174+ CBB7 4D CF 51 CF
1174+ CBBB 55 CF 59 CF
1174+ CBBF 5B CF 5F CF
1174+ CBC3 61 CF 63 CF
1174+ CBC7 65 CF 69 CF
1175+ CBCB 6B CF 6D CF                          DW SunSqrF0,SunSqrF1,SunSqrF2,SunSqrF3,SunSqrF4,SunSqrF5,SunSqrF6,SunSqrF7,SunSqrF8,SunSqrF9,SunSqrFA,SunSqrFB,SunSqrFC,SunSqrFD,SunSqrFE,SunSqrFF
1175+ CBCF 6F CF 73 CF
1175+ CBD3 75 CF 79 CF
1175+ CBD7 7B CF 7F CF
1175+ CBDB 81 CF 85 CF
1175+ CBDF 87 CF 8B CF
1175+ CBE3 8D CF 91 CF
1175+ CBE7 93 CF 95 CF
1176+ CBEB
1177+ CBEB              SunSquareRootTable:
1178+ CBEB 00 00        SunSqr00:               DB $00,   0
1179+ CBED 04 02                                DB $04,   2
1180+ CBEF 10 04                                DB $10,   4
1181+ CBF1 24 06                                DB $24,   6
1182+ CBF3 40 08                                DB $40,   8
1183+ CBF5 64 0A                                DB $64,  10
1184+ CBF7 90 0C                                DB $90,  12
1185+ CBF9 C4 0E                                DB $C4,  14
1186+ CBFB FF 0F                                DB $FF,  15
1187+ CBFD 00 10        SunSqr01:               DB $00,  16
1188+ CBFF 21 11                                DB $21,  17
1189+ CC01 44 12                                DB $44,  18
1190+ CC03 69 13                                DB $69,  19
1191+ CC05 90 14                                DB $90,  20
1192+ CC07 B9 15                                DB $B9,  21
1193+ CC09 FF 16                                DB $FF,  22
1194+ CC0B 11 17        SunSqr02:               DB $11,  23
1195+ CC0D 40 18                                DB $40,  24
1196+ CC0F 71 19                                DB $71,  25
1197+ CC11 A4 1A                                DB $A4,  26
1198+ CC13 D9 1B                                DB $D9,  27
1199+ CC15 FF 1B                                DB $FF,  27
1200+ CC17 10 1C        SunSqr03:               DB $10,  28
1201+ CC19 49 1D                                DB $49,  29
1202+ CC1B 84 1E                                DB $84,  30
1203+ CC1D C1 1F                                DB $C1,  31
1204+ CC1F FF 1F                                DB $FF,  31
1205+ CC21 00 20        SunSqr04:               DB $00,  32
1206+ CC23 41 21                                DB $41,  33
1207+ CC25 84 22                                DB $84,  34
1208+ CC27 FF 23                                DB $FF,  35
1209+ CC29 10 24        SunSqr05:               DB $10,  36
1210+ CC2B 59 25                                DB $59,  37
1211+ CC2D A4 26                                DB $A4,  38
1212+ CC2F FF 27                                DB $FF,  39
1213+ CC31 40 28        SunSqr06:               DB $40,  40
1214+ CC33 91 29                                DB $91,  41
1215+ CC35 E4 2A                                DB $E4,  42
1216+ CC37 FF 2A                                DB $FF,  42
1217+ CC39 39 2B        SunSqr07:               DB $39,  43
1218+ CC3B 90 2C                                DB $90,  44
1219+ CC3D E9 2D                                DB $E9,  45
1220+ CC3F FF 2D                                DB $FF,  45
1221+ CC41 44 2E        SunSqr08:               DB $44,  46
1222+ CC43 A1 2F                                DB $A1,  47
1223+ CC45 FF 2F                                DB $FF,  47
1224+ CC47 00 30        SunSqr09:               DB $00,  48
1225+ CC49 61 31                                DB $61,  49
1226+ CC4B C4 32                                DB $C4,  50
1227+ CC4D FF 32                                DB $FF,  50
1228+ CC4F 29 33        SunSqr0A:               DB $29,  51
1229+ CC51 90 34                                DB $90,  52
1230+ CC53 FF 35                                DB $FF,  53
1231+ CC55 64 36        SunSqr0B:               DB $64,  54
1232+ CC57 FF 37                                DB $FF,  55
1233+ CC59 40 38        SunSqr0C:               DB $40,  56
1234+ CC5B B1 39                                DB $B1,  57
1235+ CC5D FF 39                                DB $FF,  57
1236+ CC5F 24 3A        SunSqr0D:               DB $24,  58
1237+ CC61 99 3B                                DB $99,  59
1238+ CC63 FF 3B                                DB $FF,  59
1239+ CC65 10 3C        SunSqr0E:               DB $10,  60
1240+ CC67 89 3D                                DB $89,  61
1241+ CC69 FF 3D                                DB $FF,  61
1242+ CC6B 04 3E        SunSqr0F:               DB $04,  62
1243+ CC6D 81 3F                                DB $81,  63
1244+ CC6F FF 3F                                DB $FF,  63
1245+ CC71 00 40        SunSqr10:               DB $00,  64
1246+ CC73 81 41                                DB $81,  65
1247+ CC75 FF 41                                DB $FF,  65
1248+ CC77 04 42        SunSqr11:               DB $04,  66
1249+ CC79 89 43                                DB $89,  67
1250+ CC7B FF 43                                DB $FF,  67
1251+ CC7D 10 44        SunSqr12:               DB $10,  68
1252+ CC7F 99 45                                DB $99,  69
1253+ CC81 FF 45                                DB $FF,  69
1254+ CC83 24 46        SunSqr13:               DB $24,  70
1255+ CC85 B1 47                                DB $B1,  71
1256+ CC87 FF 47                                DB $FF,  71
1257+ CC89 40 48        SunSqr14:               DB $40,  72
1258+ CC8B FF 49                                DB $FF,  73
1259+ CC8D 64 4A        SunSqr15:               DB $64,  74
1260+ CC8F FF 4B                                DB $FF,  75
1261+ CC91 FF 4C        SunSqr16:               DB $FF,  76
1262+ CC93 C4 4D        SunSqr17:               DB $C4,  77
1263+ CC95 FF 4E                                DB $FF,  78
1264+ CC97 61 4F        SunSqr18:               DB $61,  79
1265+ CC99 FF 4F                                DB $FF,  79
1266+ CC9B 00 50        SunSqr19:               DB $00,  80
1267+ CC9D FF 51                                DB $FF,  81
1268+ CC9F 44 52        SunSqr1A:               DB $44,  82
1269+ CCA1 FF 53                                DB $FF,  83
1270+ CCA3 90 54        SunSqr1B:               DB $90,  84
1271+ CCA5 FF 54                                DB $FF,  84
1272+ CCA7 39 55        SunSqr1C:               DB $39,  85
1273+ CCA9 FF 56                                DB $FF,  86
1274+ CCAB FF 57        SunSqr1D:               DB $FF,  87
1275+ CCAD 40 58        SunSqr1E:               DB $40,  88
1276+ CCAF FF 59                                DB $FF,  89
1277+ CCB1 FF 5A        SunSqr1F:               DB $FF,  90
1278+ CCB3 59 5B        SunSqr20:               DB $59,  91
1279+ CCB5 FF 5B                                DB $FF,  91
1280+ CCB7 10 5C        SunSqr21:               DB $10,  92
1281+ CCB9 FF 5D                                DB $FF,  93
1282+ CCBB FF 5E        SunSqr22:               DB $FF,  94
1283+ CCBD FF 5F        SunSqr23:               DB $FF,  95
1284+ CCBF 00 60        SunSqr24:               DB $00,  96
1285+ CCC1 FF 61                                DB $FF,  97
1286+ CCC3 84 62        SunSqr25:               DB $84,  98
1287+ CCC5 49 63        SunSqr26:               DB $49,  99
1288+ CCC7 10 64        SunSqr27:               DB $10, 100
1289+ CCC9 FF 65                                DB $FF, 101
1290+ CCCB FF 66        SunSqr28:               DB $FF, 102
1291+ CCCD FF 67        SunSqr29:               DB $FF, 103
1292+ CCCF FF 68        SunSqr2A:               DB $FF, 104
1293+ CCD1 11 69        SunSqr2B:               DB $11, 105
1294+ CCD3 FF 6A                                DB $FF, 106
1295+ CCD5 FF 6B        SunSqr2C:               DB $FF, 107
1296+ CCD7 FF 6C        SunSqr2D:               DB $FF, 108
1297+ CCD9 69 6D        SunSqr2E:               DB $69, 109
1298+ CCDB FF 6E                                DB $FF, 110
1299+ CCDD 44 6E        SunSqr2F:               DB $44, 110
1300+ CCDF FF 6F                                DB $FF, 111
1301+ CCE1 21 6F        SunSqr30:               DB $21, 111
1302+ CCE3 FF 70                                DB $FF, 112
1303+ CCE5 00 70        SunSqr31:               DB $00, 112
1304+ CCE7 FF 71                                DB $FF, 113
1305+ CCE9 C4 72        SunSqr32:               DB $C4, 114
1306+ CCEB FF 72                                DB $FF, 114
1307+ CCED FF 73        SunSqr33:               DB $FF, 115
1308+ CCEF 90 74        SunSqr34:               DB $90, 116
1309+ CCF1 FF 75                                DB $FF, 117
1310+ CCF3 79 75        SunSqr35:               DB $79, 117
1311+ CCF5 FF 76                                DB $FF, 118
1312+ CCF7 64 76        SunSqr36:               DB $64, 118
1313+ CCF9 64 77                                DB $64, 119
1314+ CCFB 51 77        SunSqr37:               DB $51, 119
1315+ CCFD 40 78        SunSqr38:               DB $40, 120
1316+ CCFF FF 79                                DB $FF, 121
1317+ CD01 31 79        SunSqr39:               DB $31, 121
1318+ CD03 FF 7A                                DB $FF, 122
1319+ CD05 24 7A        SunSqr3A:               DB $24, 122
1320+ CD07 FF 7B                                DB $FF, 123
1321+ CD09 19 7B        SunSqr3B:               DB $19, 123
1322+ CD0B FF 7C                                DB $FF, 124
1323+ CD0D 10 7C        SunSqr3C:               DB $10, 124
1324+ CD0F FF 7D                                DB $FF, 125
1325+ CD11 09 7D        SunSqr3D:               DB $09, 125
1326+ CD13 FF 7D                                DB $FF, 125
1327+ CD15 04 7E        SunSqr3E:               DB $04, 126
1328+ CD17 FF 7E                                DB $FF, 126
1329+ CD19 01 7F        SunSqr3F:               DB $01, 127
1330+ CD1B FF 7F                                DB $FF, 127
1331+ CD1D 00 80        SunSqr40:               DB $00, 128
1332+ CD1F FF 80                                DB $FF, 128
1333+ CD21 01 81        SunSqr41:               DB $01, 129
1334+ CD23 FF 82                                DB $FF, 130
1335+ CD25 04 82        SunSqr42:               DB $04, 130
1336+ CD27 FF 83                                DB $FF, 131
1337+ CD29 09 83        SunSqr43:               DB $09, 131
1338+ CD2B FF 84                                DB $FF, 132
1339+ CD2D 10 84        SunSqr44:               DB $10, 132
1340+ CD2F FF 85                                DB $FF, 133
1341+ CD31 19 85        SunSqr45:               DB $19, 133
1342+ CD33 FF 86                                DB $FF, 134
1343+ CD35 24 86        SunSqr46:               DB $24, 134
1344+ CD37 FF 87                                DB $FF, 135
1345+ CD39 31 87        SunSqr47:               DB $31, 135
1346+ CD3B FF 88                                DB $FF, 136
1347+ CD3D 40 88        SunSqr48:               DB $40, 136
1348+ CD3F FF 89                                DB $FF, 137
1349+ CD41 51 89        SunSqr49:               DB $51, 137
1350+ CD43 FF 8A                                DB $FF, 138
1351+ CD45 64 8A        SunSqr4A:               DB $64, 138
1352+ CD47 FF 8A                                DB $FF, 138
1353+ CD49 79 8B        SunSqr4B:               DB $79, 139
1354+ CD4B FF 8B                                DB $FF, 139
1355+ CD4D 90 8C        SunSqr4C:               DB $90, 140
1356+ CD4F FF 8C                                DB $FF, 140
1357+ CD51 A9 8D        SunSqr4D:               DB $A9, 141
1358+ CD53 FF 8D                                DB $FF, 141
1359+ CD55 C4 8E        SunSqr4E:               DB $C4, 142
1360+ CD57 FF 8E                                DB $FF, 142
1361+ CD59 E1 8F        SunSqr4F:               DB $E1, 143
1362+ CD5B FF 8F                                DB $FF, 143
1363+ CD5D FF 8F        SunSqr50:               DB $FF, 143
1364+ CD5F 00 90        SunSqr51:               DB $00, 144
1365+ CD61 FF 90                                DB $FF, 144
1366+ CD63 21 91        SunSqr52:               DB $21, 145
1367+ CD65 FF 91                                DB $FF, 145
1368+ CD67 44 92        SunSqr53:               DB $44, 146
1369+ CD69 FF 92                                DB $FF, 146
1370+ CD6B 69 93        SunSqr54:               DB $69, 147
1371+ CD6D FF 93                                DB $FF, 147
1372+ CD6F 90 94        SunSqr55:               DB $90, 148
1373+ CD71 FF 94                                DB $FF, 148
1374+ CD73 B9 95        SunSqr56:               DB $B9, 149
1375+ CD75 FF 95                                DB $FF, 149
1376+ CD77 E4 96        SunSqr57:               DB $E4, 150
1377+ CD79 FF 96                                DB $FF, 150
1378+ CD7B FF 96        SunSqr58:               DB $FF, 150
1379+ CD7D 11 97        SunSqr59:               DB $11, 151
1380+ CD7F FF 97                                DB $FF, 151
1381+ CD81 40 98        SunSqr5A:               DB $40, 152
1382+ CD83 FF 98                                DB $FF, 152
1383+ CD85 71 99        SunSqr5B:               DB $71, 153
1384+ CD87 FF 99                                DB $FF, 153
1385+ CD89 A4 9A        SunSqr5C:               DB $A4, 154
1386+ CD8B FF 9A                                DB $FF, 154
1387+ CD8D D9 9B        SunSqr5D:               DB $D9, 155
1388+ CD8F FF 9B                                DB $FF, 155
1389+ CD91 FF 9B        SunSqr5E:               DB $FF, 155
1390+ CD93 10 9C        SunSqr5F:               DB $10, 156
1391+ CD95 FF 9C                                DB $FF, 156
1392+ CD97 49 9D        SunSqr60:               DB $49, 157
1393+ CD99 FF 9D                                DB $FF, 157
1394+ CD9B 84 9E        SunSqr61:               DB $84, 158
1395+ CD9D FF 9E                                DB $FF, 158
1396+ CD9F C1 9F        SunSqr62:               DB $C1, 159
1397+ CDA1 FF 9F                                DB $FF, 159
1398+ CDA3 FF 9F        SunSqr63:               DB $FF, 159
1399+ CDA5 00 A0        SunSqr64:               DB $00, 160
1400+ CDA7 FF A0                                DB $FF, 160
1401+ CDA9 41 A1        SunSqr65:               DB $41, 161
1402+ CDAB FF A1                                DB $FF, 161
1403+ CDAD 84 A2        SunSqr66:               DB $84, 162
1404+ CDAF FF A2                                DB $FF, 162
1405+ CDB1 C9 A3        SunSqr67:               DB $C9, 163
1406+ CDB3 FF A3                                DB $FF, 163
1407+ CDB5 FF A3        SunSqr68:               DB $FF, 163
1408+ CDB7 10 A4        SunSqr69:               DB $10, 164
1409+ CDB9 FF A4                                DB $FF, 164
1410+ CDBB 59 A5        SunSqr6A:               DB $59, 165
1411+ CDBD FF A5                                DB $FF, 165
1412+ CDBF A4 A6        SunSqr6B:               DB $A4, 166
1413+ CDC1 FF A6                                DB $FF, 166
1414+ CDC3 FF A7        SunSqr6C:               DB $FF, 167
1415+ CDC5 FF A7        SunSqr6D:               DB $FF, 167
1416+ CDC7 40 A8        SunSqr6E:               DB $40, 168
1417+ CDC9 FF A8                                DB $FF, 168
1418+ CDCB 91 A9        SunSqr6F:               DB $91, 169
1419+ CDCD FF A9                                DB $FF, 169
1420+ CDCF E4 AA        SunSqr70:               DB $E4, 170
1421+ CDD1 FF AA                                DB $FF, 170
1422+ CDD3 00 AA        SunSqr71:               DB $00, 170
1423+ CDD5 FF AA                                DB $FF, 170
1424+ CDD7 39 AB        SunSqr72:               DB $39, 171
1425+ CDD9 FF AB                                DB $FF, 171
1426+ CDDB 90 AC        SunSqr73:               DB $90, 172
1427+ CDDD FF AC                                DB $FF, 172
1428+ CDDF E9 AD        SunSqr74:               DB $E9, 173
1429+ CDE1 FF AD                                DB $FF, 173
1430+ CDE3 FF AD        SunSqr75:               DB $FF, 173
1431+ CDE5 44 AE        SunSqr76:               DB $44, 174
1432+ CDE7 FF AE                                DB $FF, 174
1433+ CDE9 A1 AF        SunSqr77:               DB $A1, 175
1434+ CDEB FF AF                                DB $FF, 175
1435+ CDED FF AF        SunSqr78:               DB $FF, 175
1436+ CDEF 00 B0        SunSqr79:               DB $00, 176
1437+ CDF1 FF B0                                DB $FF, 176
1438+ CDF3 61 B1        SunSqr7A:               DB $61, 177
1439+ CDF5 FF B1                                DB $FF, 177
1440+ CDF7 C4 B2        SunSqr7B:               DB $C4, 178
1441+ CDF9 FF B2                                DB $FF, 178
1442+ CDFB FF B2        SunSqr7C:               DB $FF, 178
1443+ CDFD 29 B3        SunSqr7D:               DB $29, 179
1444+ CDFF FF B3                                DB $FF, 179
1445+ CE01 90 B4        SunSqr7E:               DB $90, 180
1446+ CE03 FF B4                                DB $FF, 180
1447+ CE05 F9 B5        SunSqr7F:               DB $F9, 181
1448+ CE07 FF B5                                DB $FF, 181
1449+ CE09 FF B5        SunSqr80:               DB $FF, 181
1450+ CE0B 64 B6        SunSqr81:               DB $64, 182
1451+ CE0D FF B6                                DB $FF, 182
1452+ CE0F D1 B7        SunSqr82:               DB $D1, 183
1453+ CE11 FF B7        SunSqr83:               DB $FF, 183
1454+ CE13 FF B7                                DB $FF, 183
1455+ CE15 40 B8        SunSqr84:               DB $40, 184
1456+ CE17 FF B8                                DB $FF, 184
1457+ CE19 B1 B9        SunSqr85:               DB $B1, 185
1458+ CE1B FF B9                                DB $FF, 185
1459+ CE1D FF B9        SunSqr86:               DB $FF, 185
1460+ CE1F 24 BA        SunSqr87:               DB $24, 186
1461+ CE21 FF BA                                DB $FF, 186
1462+ CE23 99 BB        SunSqr88:               DB $99, 187
1463+ CE25 FF BB                                DB $FF, 187
1464+ CE27 FF BB        SunSqr89:               DB $FF, 187
1465+ CE29 10 BC        SunSqr8A:               DB $10, 188
1466+ CE2B FF BC                                DB $FF, 188
1467+ CE2D 89 BD        SunSqr8B:               DB $89, 189
1468+ CE2F FF BD                                DB $FF, 189
1469+ CE31 FF BD        SunSqr8C:               DB $FF, 189
1470+ CE33 04 BE        SunSqr8D:               DB $04, 190
1471+ CE35 FF BE                                DB $FF, 190
1472+ CE37 81 BF        SunSqr8E:               DB $81, 191
1473+ CE39 FF BF                                DB $FF, 191
1474+ CE3B FF BF        SunSqr8F:               DB $FF, 191
1475+ CE3D 00 C0        SunSqr90:               DB $00, 192
1476+ CE3F FF C0                                DB $FF, 192
1477+ CE41 81 C1        SunSqr91:               DB $81, 193
1478+ CE43 FF C1                                DB $FF, 193
1479+ CE45 FF C1        SunSqr92:               DB $FF, 193
1480+ CE47 04 C2        SunSqr93:               DB $04, 194
1481+ CE49 FF C2                                DB $FF, 194
1482+ CE4B 89 C3        SunSqr94:               DB $89, 195
1483+ CE4D FF C3                                DB $FF, 195
1484+ CE4F FF C3        SunSqr95:               DB $FF, 195
1485+ CE51 10 C4        SunSqr96:               DB $10, 196
1486+ CE53 FF C4                                DB $FF, 196
1487+ CE55 99 C5        SunSqr97:               DB $99, 197
1488+ CE57 FF C5                                DB $FF, 197
1489+ CE59 FF C5        SunSqr98:               DB $FF, 197
1490+ CE5B 24 C6        SunSqr99:               DB $24, 198
1491+ CE5D FF C6                                DB $FF, 198
1492+ CE5F B1 C7        SunSqr9A:               DB $B1, 199
1493+ CE61 FF C7                                DB $FF, 199
1494+ CE63 FF C7        SunSqr9B:               DB $FF, 199
1495+ CE65 40 C8        SunSqr9C:               DB $40, 200
1496+ CE67 FF C8                                DB $FF, 200
1497+ CE69 D1 C9        SunSqr9D:               DB $D1, 201
1498+ CE6B FF C9                                DB $FF, 201
1499+ CE6D FF C9        SunSqr9E:               DB $FF, 201
1500+ CE6F 64 CA        SunSqr9F:               DB $64, 202
1501+ CE71 FF CA                                DB $FF, 202
1502+ CE73 F9 CB        SunSqrA0:               DB $F9, 203
1503+ CE75 FF CB                                DB $FF, 203
1504+ CE77 FF CB        SunSqrA1:               DB $FF, 203
1505+ CE79 90 CC        SunSqrA2:               DB $90, 204
1506+ CE7B FF CC                                DB $FF, 204
1507+ CE7D FF CC        SunSqrA3:               DB $FF, 204
1508+ CE7F 29 CD        SunSqrA4:               DB $29, 205
1509+ CE81 FF CD                                DB $FF, 205
1510+ CE83 C4 CE        SunSqrA5:               DB $C4, 206
1511+ CE85 FF CE                                DB $FF, 206
1512+ CE87 FF CE        SunSqrA6:               DB $FF, 206
1513+ CE89 61 CF        SunSqrA7:               DB $61, 207
1514+ CE8B FF CF                                DB $FF, 207
1515+ CE8D FF CF        SunSqrA8:               DB $FF, 207
1516+ CE8F 00 D0        SunSqrA9:               DB $00, 208
1517+ CE91 FF D0                                DB $FF, 208
1518+ CE93 A1 D1        SunSqrAA:               DB $A1, 209
1519+ CE95 FF D1                                DB $FF, 209
1520+ CE97 FF D1        SunSqrAB:               DB $FF, 209
1521+ CE99 44 D2        SunSqrAC:               DB $44, 210
1522+ CE9B FF D2                                DB $FF, 210
1523+ CE9D E9 D3        SunSqrAD:               DB $E9, 211
1524+ CE9F FF D3                                DB $FF, 211
1525+ CEA1 FF D3        SunSqrAE:               DB $FF, 211
1526+ CEA3 90 D4        SunSqrAF:               DB $90, 212
1527+ CEA5 FF D4        SunSqrB0:               DB $FF, 212
1528+ CEA7 39 D5        SunSqrB1:               DB $39, 213
1529+ CEA9 FF D5                                DB $FF, 213
1530+ CEAB E4 D6        SunSqrB2:               DB $E4, 214
1531+ CEAD FF D6                                DB $FF, 214
1532+ CEAF FF D6        SunSqrB3:               DB $FF, 214
1533+ CEB1 91 D7        SunSqrB4:               DB $91, 215
1534+ CEB3 FF D7                                DB $FF, 215
1535+ CEB5 FF D7        SunSqrB5:               DB $FF, 215
1536+ CEB7 40 D8        SunSqrB6:               DB $40, 216
1537+ CEB9 FF D8                                DB $FF, 216
1538+ CEBB F1 D9        SunSqrB7:               DB $F1, 217
1539+ CEBD FF D9                                DB $FF, 217
1540+ CEBF FF D9        SunSqrB8:               DB $FF, 217
1541+ CEC1 FF D9                                DB $FF, 217
1542+ CEC3 A4 DA        SunSqrB9:               DB $A4, 218
1543+ CEC5 FF DA        SunSqrBA:               DB $FF, 218 ; we can reuse SunSeqrBA as  $FF for B9 terminator as well as they have the same target
1544+ CEC7 59 DB        SunSqrBB:               DB $59, 219
1545+ CEC9 FF DB                                DB $FF, 219
1546+ CECB FF DB        SunSqrBC:               DB $FF, 219
1547+ CECD 10 DC        SunSqrBD:               DB $10, 220
1548+ CECF FF DC                                DB $FF, 220
1549+ CED1 C9 DD        SunSqrBE:               DB $C9, 221
1550+ CED3 FF DD                                DB $FF, 221
1551+ CED5 FF DD        SunSqrBF:               DB $FF, 221
1552+ CED7 84 DE        SunSqrC0:               DB $84, 222
1553+ CED9 FF DE                                DB $FF, 222
1554+ CEDB FF DE        SunSqrC1:               DB $FF, 222
1555+ CEDD 41 DF        SunSqrC2:               DB $41, 223
1556+ CEDF FF DF                                DB $FF, 223
1557+ CEE1 FF DF        SunSqrC3:               DB $FF, 223
1558+ CEE3 00 E0        SunSqrC4:               DB $00, 224
1559+ CEE5 FF E0                                DB $FF, 224
1560+ CEE7 C1 E1        SunSqrC5:               DB $C1, 225
1561+ CEE9 FF E1                                DB $FF, 225
1562+ CEEB FF E1        SunSqrC6:               DB $FF, 225
1563+ CEED 84 E2        SunSqrC7:               DB $84, 226
1564+ CEEF FF E2        SunSqrC8:               DB $FF, 226
1565+ CEF1 49 E3        SunSqrC9:               DB $49, 227
1566+ CEF3 FF E3                                DB $FF, 227
1567+ CEF5 FF E4        SunSqrCA:               DB $FF, 228
1568+ CEF7 10 E4        SunSqrCB:               DB $10, 228
1569+ CEF9 FF E4                                DB $FF, 228
1570+ CEFB D9 E5        SunSqrCC:               DB $D9, 229
1571+ CEFD FF E5                                DB $FF, 229
1572+ CEFF FF E5        SunSqrCD:               DB $FF, 229
1573+ CF01 A4 E6        SunSqrCE:               DB $A4, 230
1574+ CF03 FF E6                                DB $FF, 230
1575+ CF05 FF E6        SunSqrCF:               DB $FF, 230
1576+ CF07 71 E7        SunSqrD0:               DB $71, 231
1577+ CF09 FF E7                                DB $FF, 231
1578+ CF0B FF E7        SunSqrD1:               DB $FF, 231
1579+ CF0D 40 E8        SunSqrD2:               DB $40, 232
1580+ CF0F FF E8                                DB $FF, 232
1581+ CF11 FF E8        SunSqrD3:               DB $FF, 232
1582+ CF13 11 E9        SunSqrD4:               DB $11, 233
1583+ CF15 FF E9                                DB $FF, 233
1584+ CF17 E4 EA        SunSqrD5:               DB $E4, 234
1585+ CF19 FF EA                                DB $FF, 234
1586+ CF1B FF EA        SunSqrD6:               DB $FF, 234
1587+ CF1D B9 EB        SunSqrD7:               DB $B9, 235
1588+ CF1F FF EB                                DB $FF, 235
1589+ CF21 FF EB        SunSqrD8:               DB $FF, 235
1590+ CF23 90 EC        SunSqrD9:               DB $90, 236
1591+ CF25 FF EC                                DB $FF, 236
1592+ CF27 FF EC        SunSqrDA:               DB $FF, 236
1593+ CF29 69 ED        SunSqrDB:               DB $69, 237
1594+ CF2B FF ED                                DB $FF, 237
1595+ CF2D FF ED        SunSqrDC:               DB $FF, 237
1596+ CF2F 44 EE        SunSqrDD:               DB $44, 238
1597+ CF31 FF EE        SunSqrDE:               DB $FF, 238
1598+ CF33 21 EF        SunSqrDF:               DB $21, 239
1599+ CF35 FF EF                                DB $FF, 239
1600+ CF37 00 F0        SunSqrE0:               DB $00, 240
1601+ CF39 FF F0                                DB $FF, 240
1602+ CF3B 00 F0        SunSqrE1:               DB $00, 240
1603+ CF3D FF F0                                DB $FF, 240
1604+ CF3F E1 F1        SunSqrE2:               DB $E1, 241
1605+ CF41 FF F1                                DB $FF, 241
1606+ CF43 E1 F1        SunSqrE3:               DB $E1, 241
1607+ CF45 FF F1                                DB $FF, 241
1608+ CF47 C4 F2        SunSqrE4:               DB $C4, 242
1609+ CF49 FF F2                                DB $FF, 242
1610+ CF4B FF F2        SunSqrE5:               DB $FF, 242
1611+ CF4D A9 F3        SunSqrE6:               DB $A9, 243
1612+ CF4F FF F3                                DB $FF, 243
1613+ CF51 FF F3        SunSqrE7:               DB $FF, 243
1614+ CF53 FF F3                                DB $FF, 243
1615+ CF55 90 F3        SunSqrE8:               DB $90, 243
1616+ CF57 FF F4                                DB $FF, 244
1617+ CF59 FF F4        SunSqrE9:               DB $FF, 244
1618+ CF5B 79 F5        SunSqrEA:               DB $79, 245
1619+ CF5D FF F5                                DB $FF, 245
1620+ CF5F FF F5        SunSqrEB:               DB $FF, 245
1621+ CF61 64 F6        SunSqrEC:               DB $64, 246
1622+ CF63 FF F6        SunSqrED:               DB $FF, 246
1623+ CF65 51 F7        SunSqrEE:               DB $51, 247
1624+ CF67 FF F7                                DB $FF, 247
1625+ CF69 FF F7        SunSqrEF:               DB $FF, 247
1626+ CF6B 40 F8        SunSqrF0:               DB $40, 248
1627+ CF6D FF F8        SunSqrF1:               DB $FF, 248
1628+ CF6F 31 F9        SunSqrF2:               DB $31, 249
1629+ CF71 FF F9                                DB $FF, 249
1630+ CF73 FF F9        SunSqrF3:               DB $FF, 249
1631+ CF75 24 FA        SunSqrF4:               DB $24, 250
1632+ CF77 FF FA                                DB $FF, 250
1633+ CF79 FF FA        SunSqrF5:               DB $FF, 250
1634+ CF7B 19 FB        SunSqrF6:               DB $19, 251
1635+ CF7D FF FB                                DB $FF, 251
1636+ CF7F FF FB        SunSqrF7:               DB $FF, 251
1637+ CF81 10 FC        SunSqrF8:               DB $10, 252
1638+ CF83 FF FC                                DB $FF, 252
1639+ CF85 FF FC        SunSqrF9:               DB $FF, 252
1640+ CF87 09 FD        SunSqrFA:               DB $09, 253
1641+ CF89 FF FD                                DB $FF, 253
1642+ CF8B FF FD        SunSqrFB:               DB $FF, 253
1643+ CF8D 04 FE        SunSqrFC:               DB $04, 254
1644+ CF8F FF FE                                DB $FF, 254
1645+ CF91 FF FE        SunSqrFD:               DB $FF, 254
1646+ CF93 01 FF        SunSqrFE:               DB $01, 255
1647+ CF95 FF FF        SunSqrFF:               DB $FF, 255
1648+ CF97
1649+ CF97
1650+ CF97
1651+ CF97              SunBankSize  EQU $ - StartOfSun
1652+ CF97
1653+ CF97
# file closed: ./Universe/Sun/sun_data.asm
 985  CF97
 986  CF97              ; Bank 84  ------------------------------------------------------------------------------------------------------------------------
 987  CF97                  SLOT    PlanetBankAddr
 988  CF97                  PAGE    BankPlanetData
 989  CF97              	ORG	    PlanetBankAddr,BankPlanetData
 990  C000                  INCLUDE "./Universe/Planet/planet_data.asm"
# file opened: ./Universe/Planet/planet_data.asm
   1+ C000              ; In  flight ship data tables
   2+ C000              ; In  flight ship data tables
   3+ C000              ; In  flight ship data tables
   4+ C000              ; There can be upto &12 objects in flight.
   5+ C000              ; To avoid hassle of memory heap managment, the free list
   6+ C000              ; will correspond to a memory bank offset so data will be held in
   7+ C000              ; 1 bank per universe object. Its a waste of a lot of memory but really
   8+ C000              ; 1 bank per universe object. Its a waste of a lot of memory but really
   9+ C000              ; simple that way. Each bank will be 8K and swapped on 8K slot 7 $E000 to $FFFF
  10+ C000              ; This means each gets its own line list, inwork etc
  11+ C000
  12+ C000              ; "Runtime Ship Data paged into in Bank 7"
  13+ C000              ;                      0123456789ABCDEF
  14+ C000 50 6C 61 6E  StartOfPlanet:     DB "Planet Data....."
  14+ C004 65 74 20 44
  14+ C008 61 74 61 2E
  14+ C00C 2E 2E 2E 2E
  15+ C010              ; NOTE we can cheat and pre allocate segs just using a DS for now
  16+ C010              ;   \ -> & 565D \ See ship data files chosen and loaded after flight code starts running.
  17+ C010              ; Universe map substibute for INWK
  18+ C010              ;-Camera Position of Ship----------------------------------------------------------------------------------------------------------
  19+ C010              PBnKDataBlock:
  20+ C010                                      INCLUDE "./Universe/Planet/PlanetPosVars.asm"
# file opened: ././Universe/Planet/PlanetPosVars.asm
   1++C010              ;-Camera Position of Ship----------------------------------------------------------------------------------------------------------
   2++C010 00           PBnKxlo                     DB  0                       ; INWK+0
   3++C011 00           PBnKxhi                     DB  0                       ; there are hi medium low as some times these are 24 bit
   4++C012 00           PBnKxsgn                    DB  0                       ; INWK+2
   5++C013 00           PBnKylo                     DB  0                       ; INWK+3 \ ylo
   6++C014 00           PBnKyhi                     DB  0                       ; INWK+4 \ yHi
   7++C015 00           PBnKysgn                    DB  0                       ; INWK +5
   8++C016 00           PBnKzlo                     DB  0                       ; INWK +6
   9++C017 00           PBnKzhi                     DB  0                       ; INWK +7
  10++C018 00           PBnKzsgn                    DB  0                       ; INWK +8
  11++C019 00 00        PlanetCompassX              DW  0
  12++C01B 00 00        PlanetCompassY              DW  0
  13++C01D
# file closed: ././Universe/Planet/PlanetPosVars.asm
  21+ C01D                                      INCLUDE "./Universe/Planet/PlanetRotationMatrixVars.asm"
# file opened: ././Universe/Planet/PlanetRotationMatrixVars.asm
   1++C01D              ;-Rotation Matrix of Ship----------------------------------------------------------------------------------------------------------
   2++C01D              ; Rotation data is stored as lohi, but only 15 bits with 16th bit being  a sign bit. Note this is NOT 2'c compliment
   3++C01D 00 00        PBnKrotmatSidevX            DW  0                       ; INWK +21
   4++C01F              PBnKrotmatSidev             equ PBnKrotmatSidevX
   5++C01F 00 00        PBnKrotmatSidevY            DW  0                       ; INWK +23
   6++C021 00 00        PBnKrotmatSidevZ            DW  0                       ; INWK +25
   7++C023 00 00        PBnKrotmatRoofvX            DW  0                       ; INWK +15
   8++C025              PBnKrotmatRoofv             equ PBnKrotmatRoofvX
   9++C025 00 00        PBnKrotmatRoofvY            DW  0                       ; INWK +17
  10++C027 00 00        PBnKrotmatRoofvZ            DW  0                       ; INWK +19
  11++C029 00 00        PBnKrotmatNosevX            DW  0                       ; INWK +9
  12++C02B              PBnKrotmatNosev             EQU PBnKrotmatNosevX
  13++C02B 00 00        PBnKrotmatNosevY            DW  0                       ; INWK +11
  14++C02D 00 00        PBnKrotmatNosevZ            DW  0                       ; INWK +13
  15++C02F
# file closed: ././Universe/Planet/PlanetRotationMatrixVars.asm
  22+ C02F                                      INCLUDE "./Universe/Planet/PlanetAIRuntimeData.asm"
# file opened: ././Universe/Planet/PlanetAIRuntimeData.asm
   1++C02F              ; -- Ship AI data
   2++C02F 00           PBnKRotXCounter             DB  0                       ; INWK +29
   3++C030 00           PBnKRotZCounter             DB  0                       ; INWK +30
   4++C031 00           PBnkCam0yLo                 DB  0                       ; INWK +33 ????
   5++C032 00           PBnkCam0yHi                 DB  0                       ; INWK +34?????
   6++C033 00           PBnKShipType                DB  0
# file closed: ././Universe/Planet/PlanetAIRuntimeData.asm
  23+ C034
  24+ C034
  25+ C034                                      INCLUDE "./Universe/Planet/PlanetXX16Vars.asm"
# file opened: ././Universe/Planet/PlanetXX16Vars.asm
   1++C034              ;-- XX16 --------------------------------------------------------------------------------------------------------------------------
   2++C034 00 00        PBnkTransmatSidevX          DW  0               ; XX16+0
   3++C036              PBnkTransmatSidev           EQU PBnkTransmatSidevX
   4++C036 00 00        PBnkTransmatSidevY          DW 0                ; XX16+2
   5++C038 00 00        PBnkTransmatSidevZ          DW 0                ; XX16+2
   6++C03A 00 00        PBnkTransmatRoofvX          DW 0
   7++C03C              PBnkTransmatRoofv           EQU PBnkTransmatRoofvX
   8++C03C 00 00        PBnkTransmatRoofvY          DW 0                ; XX16+2
   9++C03E 00 00        PBnkTransmatRoofvZ          DW 0                ; XX16+2
  10++C040 00 00        PBnkTransmatNosevX          DW 0
  11++C042              PBnkTransmatNosev           EQU PBnkTransmatNosevX
  12++C042 00 00        PBnkTransmatNosevY          DW 0                ; XX16+2
  13++C044 00 00        PBnkTransmatNosevZ          DW 0                ; XX16+2
  14++C046 00 00        PBnkTransmatTransX          DW 0
  15++C048 00 00        PBnkTransmatTransY          DW 0
  16++C04A 00 00        PBnkTransmatTransZ          DW 0
  17++C04C              PlanetXX16                      equ PBnkTransmatSidev
  18++C04C              ;-- XX16Inv --------------------------------------------------------------------------------------------------------------------------
  19++C04C 00 00        PBnkTransInvRow0x0          DW 0
  20++C04E 00 00        PBnkTransInvRow0x1          DW 0
  21++C050 00 00        PBnkTransInvRow0x2          DW 0
  22++C052 00 00        PBnkTransInvRow0x3          DW 0
  23++C054 00 00        PBnkTransInvRow1y0          DW 0
  24++C056 00 00        PBnkTransInvRow1y1          DW 0
  25++C058 00 00        PBnkTransInvRow1y2          DW 0
  26++C05A 00 00        PBnkTransInvRow1y3          DW 0
  27++C05C 00 00        PBnkTransInvRow2z0          DW 0
  28++C05E 00 00        PBnkTransInvRow2z1          DW 0
  29++C060 00 00        PBnkTransInvRow2z2          DW 0
  30++C062 00 00        PBnkTransInvRow2z3          DW 0
  31++C064
  32++C064              PlanetXX16Inv             equ PBnkTransInvRow0x0
  33++C064
# file closed: ././Universe/Planet/PlanetXX16Vars.asm
  26+ C064                                      INCLUDE "./Universe/Planet/PlanetXX25Vars.asm"
# file opened: ././Universe/Planet/PlanetXX25Vars.asm
   1++C064              ;-- XX25 --------------------------------------------------------------------------------------------------------------------------
   2++C064 00           PBnKProjxLo                 DB  0
   3++C065 00           PBnKProjxHi                 DB  0
   4++C066 00           PBnKProjxSgn                DB  0
   5++C067              PBnKProjx                   EQU PBnKProjxLo
   6++C067 00           PBnKProjyLo                 DB  0
   7++C068 00           PBnKProjyHi                 DB  0
   8++C069 00           PBnKProjySgn                DB  0
   9++C06A              PBnKProjy                   EQU PBnKProjyLo
  10++C06A 00           PBnKProjzLo                 DB  0
  11++C06B 00           PBnKProjzHi                 DB  0
  12++C06C 00           PBnKProjzSgn                DB  0
  13++C06D              PBnKProjz                   EQU PBnKProjzLo
  14++C06D              PXX25                       EQU PBnKProjxLo
  15++C06D
# file closed: ././Universe/Planet/PlanetXX25Vars.asm
  27+ C06D                                      INCLUDE "./Universe/Planet/PlanetXX18Vars.asm"
# file opened: ././Universe/Planet/PlanetXX18Vars.asm
   1++C06D              ;-- XX18 --------------------------------------------------------------------------------------------------------------------------
   2++C06D 00           PBnKDrawCam0xLo             DB  0               ; XX18+0
   3++C06E 00           PBnKDrawCam0xHi             DB  0               ; XX18+1
   4++C06F 00           PBnKDrawCam0xSgn            DB  0               ; XX18+2
   5++C070              PBnKDrawCam0x               equ PBnKDrawCam0xLo
   6++C070 00           PBnKDrawCam0yLo             DB  0               ; XX18+3
   7++C071 00           PBnKDrawCam0yHi             DB  0               ; XX18+4
   8++C072 00           PBnKDrawCam0ySgn            DB  0               ; XX18+5
   9++C073              PBnKDrawCam0y               equ PBnKDrawCam0yLo
  10++C073 00           PBnKDrawCam0zLo             DB  0               ; XX18+6
  11++C074 00           PBnKDrawCam0zHi             DB  0               ; XX18+7
  12++C075 00           PBnKDrawCam0zSgn            DB  0               ; XX18+8
  13++C076              PBnKDrawCam0z               equ PBnKDrawCam0zLo
  14++C076              PXX18                       equ PBnKDrawCam0xLo
  15++C076
# file closed: ././Universe/Planet/PlanetXX18Vars.asm
  28+ C076
  29+ C076              ; Used to make 16 bit reads a little cleaner in source code
  30+ C076 00 00 00     PBnKzPoint                  DS  3
  31+ C079              PBnKzPointLo                equ PBnKzPoint
  32+ C079              PBnKzPointHi                equ PBnKzPoint+1
  33+ C079              PBnKzPointSign              equ PBnKzPoint+2
  34+ C079                                      INCLUDE "./Universe/Planet/PlanetXX15Vars.asm"
# file opened: ././Universe/Planet/PlanetXX15Vars.asm
   1++C079              ;-- XX15 --------------------------------------------------------------------------------------------------------------------------
   2++C079 00           PBnKXScaled                 DB  0               ; XX15+0Xscaled
   3++C07A 00           PBnKXScaledSign             DB  0               ; XX15+1xsign
   4++C07B 00           PBnKYScaled                 DB  0               ; XX15+2yscaled
   5++C07C 00           PBnKYScaledSign             DB  0               ; XX15+3ysign
   6++C07D 00           PBnKZScaled                 DB  0               ; XX15+4zscaled
   7++C07E 00           PBnKZScaledSign             DB  0               ; XX15+5zsign
   8++C07F
   9++C07F              PXX15                       equ PBnKXScaled
  10++C07F              PXX15VecX                   equ PXX15
  11++C07F              PXX15VecY                   equ PXX15+1
  12++C07F              PXX15VecZ                   equ PXX15+2
  13++C07F              PBnKXPoint                  equ PXX15
  14++C07F              PBnKXPointLo                equ PXX15+0
  15++C07F              PBnKXPointHi                equ PXX15+1
  16++C07F              PBnKXPointSign              equ PXX15+2
  17++C07F              PBnKYPoint                  equ PXX15+3
  18++C07F              PBnKYPointLo                equ PXX15+3
  19++C07F              PBnKYPointHi                equ PXX15+4
  20++C07F              PBnKYPointSign              equ PXX15+5
  21++C07F
# file closed: ././Universe/Planet/PlanetXX15Vars.asm
  35+ C07F                                      INCLUDE "./Universe/Planet/PlanetXX12Vars.asm"
# file opened: ././Universe/Planet/PlanetXX12Vars.asm
   1++C07F              ;-- transmat0 --------------------------------------------------------------------------------------------------------------------------
   2++C07F              ; Note XX12 comes after as some logic in normal processing uses XX15 and XX12 combines
   3++C07F 00           PBnKXX12xLo                 DB  0               ; XX12+0
   4++C080 00           PBnKXX12xSign               DB  0               ; XX12+1
   5++C081 00           PBnKXX12yLo                 DB  0               ; XX12+2
   6++C082 00           PBnKXX12ySign               DB  0               ; XX12+3
   7++C083 00           PBnKXX12zLo                 DB  0               ; XX12+4
   8++C084 00           PBnKXX12zSign               DB  0               ; XX12+5
   9++C085 00 00 00...  PXX12Save                   DS  6
  10++C08B 00 00 00...  PXX12Save2                  DS  6
  11++C091              PXX12                       equ PBnKXX12xLo
  12++C091              varPXX12                    equ PBnKXX12xLo
  13++C091              ; Repurposed XX12 when plotting lines
  14++C091              PBnkY2                      equ PXX12+0
  15++C091              PbnKy2Lo                    equ PXX12+0
  16++C091              PBnkY2Hi                    equ PXX12+1
  17++C091              PBnkDeltaXLo                equ PXX12+2
  18++C091              PBnkDeltaXHi                equ PXX12+3
  19++C091              PBnkDeltaYLo                equ PXX12+4
  20++C091              PBnkDeltaYHi                equ PXX12+5
  21++C091              PbnkGradient                equ PXX12+2
  22++C091              PBnkTemp1                   equ PXX12+2
  23++C091              PBnkTemp1Lo                 equ PXX12+2
  24++C091              PBnkTemp1Hi                 equ PXX12+3
  25++C091              PBnkTemp2                   equ PXX12+3
  26++C091              PBnkTemp2Lo                 equ PXX12+3
  27++C091              PBnkTemp2Hi                 equ PXX12+4
  28++C091
# file closed: ././Universe/Planet/PlanetXX12Vars.asm
  36+ C091
  37+ C091
  38+ C091              ; Post clipping the results are now 8 bit
  39+ C091 00           PBnKVisibility              DB  0               ; replaces general purpose xx4 in rendering
  40+ C092 00           PBnKProjectedY              DB  0
  41+ C093 00           PBnKProjectedX              DB  0
  42+ C094              PBnKProjected               equ PBnKProjectedY  ; resultant projected position
  43+ C094 00 00 00...  PLanetXX15Save              DS  8
  44+ C09C 00 00 00...  PLanetXX15Save2             DS  8
  45+ C0A4
  46+ C0A4              PBnK_Data_len               EQU $ - PBnKDataBlock
  47+ C0A4
  48+ C0A4              ; --------------------------------------------------------------
  49+ C0A4 21 10 C0     ResetPBnKData:          ld      hl,PBnKDataBlock
  50+ C0A7 11 94 00                             ld      de,PBnK_Data_len
  51+ C0AA AF                                   xor     a
  52+ C0AB CD A5 99                             call    memfill_dma
  53+ C0AE C9                                   ret
  54+ C0AF              ; --------------------------------------------------------------
  55+ C0AF 21 10 C0     ResetPBnKPosition:      ld      hl,PBnKxlo
  56+ C0B2 06 09                                ld      b, 3*3
  57+ C0B4 AF                                   xor     a
  58+ C0B5 77           .zeroLoop:              ld      (hl),a
  59+ C0B6 23                                   inc     hl
  60+ C0B7 10 FC                                djnz    .zeroLoop
  61+ C0B9 C9                                   ret
  62+ C0BA              ; This uses UBNKNodeArray as the list
  63+ C0BA              ; the array is 256 * 2 bytes
  64+ C0BA              ; counter is current row y pos
  65+ C0BA              ; byte 1 is start x pos
  66+ C0BA              ; byte 2 is end x pos
  67+ C0BA              ; if they are both 0 then skip
  68+ C0BA              ; its always horizontal, yellow
  69+ C0BA
  70+ C0BA              ; PLANET
  71+ C0BA
  72+ C0BA              ; --------------------------------------------------------------
  73+ C0BA              ; This sets current universe object to a planet,they use sign + 23 bit positions
  74+ C0BA CD A4 C0     CreatePlanet:           call    ResetPBnKData
  75+ C0BD 3A 6B 9E                             ld      a,(DisplayTekLevel)
  76+ C0C0 E6 02                                and     %00000010               ; Set A = 128 or 130 depending on bit 1 of the system's tech level
  77+ C0C2 F6 80                                or      %10000000
  78+ C0C4 32 33 C0                             ld      (PBnKShipType),a
  79+ C0C7                                      MaxUnivPitchAndRoll
  79+ C0C7 3E 7F       >                        ld      a,127
  79+ C0C9 32 34 C0    >                        ld      (UBnKRotXCounter),a
  79+ C0CC 32 35 C0    >                        ld      (UBnKRotZCounter),a
  80+ C0CF 3A D6 9E                             ld      a,(WorkingSeeds+1)      ; a= bits 1 and 0 of working seed1 + 3 + carry
  81+ C0D2 E6 03                                and     %00000011               ; .
  82+ C0D4 CE 03                                adc     3                       ; .
  83+ C0D6 32 18 C0                             ld      (PBnKzsgn),a            ; set z sign to 3 + C + 0..3 bits
  84+ C0D9 CB 1F                                rr      a
  85+ C0DB 32 12 C0                             ld      (PBnKxsgn),a
  86+ C0DE 32 15 C0                             ld      (PBnKysgn),a
  87+ C0E1 C9                                   ret
  88+ C0E2
  89+ C0E2 CD A4 C0     CreatePlanetLaunched:   call    ResetPBnKData
  90+ C0E5 21 00 00                             ld      hl,0
  91+ C0E8                                      ZeroA
  91+ C0E8 AF          >                        xor a
  92+ C0E9 22 10 C0                             ld      (PBnKxlo),hl
  93+ C0EC 22 13 C0                             ld      (PBnKylo),hl
  94+ C0EF 21 FF FF                             ld      hl,$FFFF
  95+ C0F2 22 16 C0                             ld      (PBnKzlo),hl
  96+ C0F5 32 12 C0                             ld      (PBnKxsgn),a
  97+ C0F8 32 15 C0                             ld      (PBnKysgn),a
  98+ C0FB 32 18 C0                             ld      (PBnKzsgn),a
  99+ C0FE                                      MaxUnivPitchAndRoll
  99+ C0FE 3E 7F       >                        ld      a,127
  99+ C100 32 34 C0    >                        ld      (UBnKRotXCounter),a
  99+ C103 32 35 C0    >                        ld      (UBnKRotZCounter),a
 100+ C106 C9                                   ret
 101+ C107              ; NEED FINSIHGING
 102+ C107
 103+ C107
 104+ C107 ED 4B 7D C0  ScalePlanetTo8Bit:		ld			bc,(PBnKZScaled)
 105+ C10B 2A 79 C0                             ld			hl,(PBnKXScaled)
 106+ C10E ED 5B 7B C0                          ld			de,(PBnKYScaled)
 107+ C112 78           .SetABSbc:              ld			a,b
 108+ C113 DD 67                                ld			ixh,a
 109+ C115 E6 7F                                and			SignMask8Bit
 110+ C117 47                                   ld			b,a									; bc = ABS bc
 111+ C118 7C           .SetABShl:              ld			a,h
 112+ C119 DD 6F                                ld			ixl,a
 113+ C11B E6 7F                                and			SignMask8Bit
 114+ C11D 67                                   ld			h,a									; hl = ABS hl
 115+ C11E 7A           .SetABSde:              ld			a,d
 116+ C11F FD 67                                ld			iyh,a
 117+ C121 E6 7F                                and			SignMask8Bit
 118+ C123 57                                   ld			d,a									; de = ABS de
 119+ C124 78           .ScaleNodeTo8BitLoop:   ld          a,b		                            ; U	\ z hi
 120+ C125 B4                                   or			h                                   ; XX15+1	\ x hi
 121+ C126 B2                                   or			d                                   ; XX15+4	\ y hi
 122+ C127 28 0F                                jr          z,.ScaleNodeDone                   ; if X, Y, Z = 0  exit loop down once hi U rolled to 0
 123+ C129                                      ShiftHLRight1
 123+ C129 CB 3C       >			   srl h
 123+ C12B CB 1D       >			   rr  l
 124+ C12D                                      ShiftDERight1
 124+ C12D CB 3A       >			   srl d
 124+ C12F CB 1B       >			   rr  e
 125+ C131                                      ShiftBCRight1
 125+ C131 CB 38       >			   srl b
 125+ C133 CB 19       >			   rr  c
 126+ C135 C3 24 C1                             jp          .ScaleNodeTo8BitLoop
 127+ C138              ; now we have scaled values we have to deal with sign
 128+ C138 DD 7C        .ScaleNodeDone:          ld			a,ixh								; get sign bit and or with b
 129+ C13A E6 80                                and			SignOnly8Bit
 130+ C13C B0                                   or			b
 131+ C13D 47                                   ld			b,a
 132+ C13E DD 7D        .SignforHL:              ld			a,ixl								; get sign bit and or with b
 133+ C140 E6 80                                and			SignOnly8Bit
 134+ C142 B4                                   or			h
 135+ C143 67                                   ld			h,a
 136+ C144 FD 7C        .SignforDE:              ld			a,iyh								; get sign bit and or with b
 137+ C146 E6 80                                and			SignOnly8Bit
 138+ C148 B2                                   or			d
 139+ C149 57                                   ld			d,a
 140+ C14A ED 43 7D C0  .SignsDoneSaveResult:	ld			(PBnKZScaled),bc
 141+ C14E 22 79 C0                             ld			(PBnKXScaled),hl
 142+ C151 ED 53 7B C0                          ld			(PBnKYScaled),de
 143+ C155 78                                   ld			a,b
 144+ C156 32 DE 9D                             ld			(varU),a
 145+ C159 79                                   ld			a,c
 146+ C15A 32 FB 9D                             ld			(varT),a
 147+ C15D C9                                   ret
 148+ C15E
 149+ C15E              ;--------------------------------------------------------------------------------------------------------
 150+ C15E                                      include "./Universe/Planet/CopyPlanetXX12ScaledToPlanetXX18.asm"
# file opened: ././Universe/Planet/CopyPlanetXX12ScaledToPlanetXX18.asm
   1++C15E              CopyPSXX12ScaledToPXX18:
   2++C15E              CopyResultToPDrawCam:
   3++C15E                      ldCopyByte PXX12         ,PXX18             ; XX12+0 => XX18+0  Set XX18(2 0) = dot_sidev
   3++C15E 3A 7F C0    >                        ld       a,(PXX12)
   3++C161 32 6D C0    >                        ld       (PXX18),a
   4++C164                      ldCopyByte PXX12+1       ,PXX18+2           ; XX12+1 => XX18+2
   4++C164 3A 80 C0    >                        ld       a,(PXX12+1)
   4++C167 32 6F C0    >                        ld       (PXX18+2),a
   5++C16A                      ldCopyByte PXX12+2       ,PXX18+3           ; XX12+2 => XX18+3  Set XX12+1 => XX18+2
   5++C16A 3A 81 C0    >                        ld       a,(PXX12+2)
   5++C16D 32 70 C0    >                        ld       (PXX18+3),a
   6++C170                      ldCopyByte PXX12+3       ,PXX18+5           ; XX12+3 => XX18+5
   6++C170 3A 82 C0    >                        ld       a,(PXX12+3)
   6++C173 32 72 C0    >                        ld       (PXX18+5),a
   7++C176                      ldCopyByte PXX12+4       ,PXX18+6           ; XX12+4 => XX18+6  Set XX18(8 6) = dot_nosev
   7++C176 3A 83 C0    >                        ld       a,(PXX12+4)
   7++C179 32 73 C0    >                        ld       (PXX18+6),a
   8++C17C                      ldCopyByte PXX12+5       ,PXX18+8           ; XX12+5 => XX18+8
   8++C17C 3A 84 C0    >                        ld       a,(PXX12+5)
   8++C17F 32 75 C0    >                        ld       (PXX18+8),a
   9++C182 C9                   ret
  10++C183
# file closed: ././Universe/Planet/CopyPlanetXX12ScaledToPlanetXX18.asm
 151+ C183
 152+ C183              ; ......................................................                                                         ;;;
 153+ C183                          INCLUDE "./Universe/Planet/PlanetApplyMyRollAndPitch.asm"
# file opened: ././Universe/Planet/PlanetApplyMyRollAndPitch.asm
   1++C183
   2++C183              ;----------------------------------------------------------------------------------------------------------------------------------
   3++C183              ; Planet version of pitch and roll is a 24 bit calculation 1 bit sign + 23 bit value
   4++C183              ; Need to write a test routine for roll and pitchs
   5++C183 00 00 00 00  PlanetAlphaMulX            DS 4
   6++C187 00 00 00 00  PlanetAlphaMulY            DS 4
   7++C18B 00 00 00 00  PlanetBetaMulZ             DS 4
   8++C18F 00 00 00     PlanetK2                   DS 3
   9++C192
  10++C192 3A F5 9C     PlanetApplyMyRollAndPitch: ld      a,(ALPHA)                   ; no roll or pitch, no calc needed
  11++C195 21 E8 9C                             ld      hl,BETA
  12++C198 B6                                   or      (hl)
  13++C199 E6 7F                                and     SignMask8Bit
  14++C19B CA 4C C2                             jp      z,.NoRotation
  15++C19E 3A F5 9C     .CalcAlphaMulX:         ld      a,(ALPHA)                   ; get roll magnitude
  16++C1A1 EE 80                                xor     SignOnly8Bit                ; d = -alpha (Q value)
  17++C1A3 57                                   ld      d,a                         ; .
  18++C1A4 3A 10 C0                             ld      a,(SBnKxlo)                 ; HLE = x sgn, hi, lo
  19++C1A7 5F                                   ld      e,a                         ; .
  20++C1A8 2A 11 C0                             ld      hl,(SBnKxhi)                ; .
  21++C1AB CD 83 AF                             call    mulHLEbyDSigned             ; DELC = x * -alpha, so DEL = X * -alpha / 256 where d = sign byte
  22++C1AE              .SaveAlphaMulX:         ;ld      a,c                         ; a = upper byte of results which will have the sign               ONLY NEEDED FOR DEBUGGING TEST
  23++C1AE                                      ;ld      (PlanetAlphaMulX),a            ; save sign from result, ELC holds actual result                   ONLY NEEDED FOR DEBUGGING TEST
  24++C1AE 7D                                   ld      a,l                         ; also save all of alpha *X as we will need it later
  25++C1AF 32 84 C1                             ld      (PlanetAlphaMulX+1),a
  26++C1B2 7B                                   ld      a,e
  27++C1B3 32 85 C1                             ld      (PlanetAlphaMulX+2),a
  28++C1B6 7A                                   ld      a,d
  29++C1B7 32 86 C1                             ld      (PlanetAlphaMulX+3),a          ; we actually only want X1 X2 X3 later as its /256
  30++C1BA ED 5B 14 C0  .CalcK2:                ld      de,(SBnKyhi)                ; DEL = Y
  31++C1BE 3A 13 C0                             ld      a,(SBnKylo)                 ; .
  32++C1C1 6F                                   ld      l,a                         ; .
  33++C1C2 ED 4B 85 C1                          ld      bc,(PlanetAlphaMulX+2)         ; BCH = Y sgn, hi, lo, we loose the C from result
  34++C1C6 3A 84 C1                             ld      a,(PlanetAlphaMulX+1)          ; Deal with sign in byte 4
  35++C1C9 67                                   ld      h,a                         ; .
  36++C1CA CD 13 AD                             call    AddBCHtoDELsigned           ; DEL = y - (alpha * x)
  37++C1CD 7D                                   ld      a,l                         ; K2  = DEA = DEL = y - (alpha * x)
  38++C1CE 32 8F C1                             ld      (PlanetK2),a                   ; we also need to save l for teh beta k2 calc
  39++C1D1 ED 53 90 C1                          ld      (PlanetK2+1),de                ;
  40++C1D5 EB           .CalcBetaMulK2:         ex      de,hl                       ; HLE == DEA
  41++C1D6 5F                                   ld      e,a                         ; .
  42++C1D7 3A E8 9C                             ld      a,(BETA)                    ; D = BETA
  43++C1DA 57                                   ld      d,a                         ; .
  44++C1DB CD 83 AF                             call    mulHLEbyDSigned             ; DELC = Beta * K2, DEL = Beta/256 * K2
  45++C1DE ED 4B 17 C0  .CalcZ:                 ld      bc,(SBnKzhi)                ; BCH = z
  46++C1E2 3A 16 C0                             ld      a,(SBnKzlo)                 ;
  47++C1E5 67                                   ld      h,a                         ;
  48++C1E6 CD 13 AD                             call    AddBCHtoDELsigned           ; DEL still = Beta * K2 so its z + Beta * K2
  49++C1E9 ED 53 17 C0                          ld      (SBnKzhi),de                ; z = resuklt
  50++C1ED 7D                                   ld      a,l                         ; .
  51++C1EE 32 16 C0                             ld      (SBnKzlo),a                 ; .
  52++C1F1 3A E8 9C     .CalcBetaZ:             ld      a,(BETA)
  53++C1F4 EE 80                                xor     SignOnly8Bit                ; d = -beta (Q value)
  54++C1F6 57                                   ld      d,a                         ; .
  55++C1F7 3A 16 C0                             ld      a,(SBnKzlo)                 ; HLE = z
  56++C1FA 5F                                   ld      e,a                         ; .
  57++C1FB 2A 17 C0                             ld      hl,(SBnKzhi)                ; .
  58++C1FE CD 83 AF                             call    mulHLEbyDSigned             ; DELC = z * -beta, so DEL = Z * -beta / 256 where d = sign byte
  59++C201              .SaveAlphaMulZ:         ;ld      a,c                         ; a = upper byte of results which will have the sign             ONLY NEEDED FOR DEBUGGING TEST
  60++C201                                      ;ld      (PlanetBetaMulZ),a             ; save sign from result, ELC holds actual result                 ONLY NEEDED FOR DEBUGGING TEST
  61++C201                                      ;ld      a,l                         ; also save all of alpha *X as we will need it later             ONLY NEEDED FOR DEBUGGING TEST
  62++C201                                      ;ld      (PlanetBetaMulZ+1),a           ; .                                                              ONLY NEEDED FOR DEBUGGING TEST
  63++C201                                      ;ld      a,e                         ; .                                                              ONLY NEEDED FOR DEBUGGING TEST
  64++C201                                      ;ld      (PlanetBetaMulZ+2),a           ; .                                                              ONLY NEEDED FOR DEBUGGING TEST
  65++C201                                      ;ld      a,d                         ; .                                                              ONLY NEEDED FOR DEBUGGING TEST
  66++C201                                      ;ld      (PlanetBetaMulZ+3),a           ; we actually only want X1 X2 X3 later as its /256               ONLY NEEDED FOR DEBUGGING TEST
  67++C201 42 4B        .CalcY:                 ld      bc,de                       ; bch = - Beta * z
  68++C203 65                                   ld      h,l
  69++C204 ED 5B 90 C1                          ld      de,(PlanetK2+1)                ; DEL = k2
  70++C208 3A 8F C1                             ld      a,(PlanetK2)
  71++C20B 6F                                   ld      l,a
  72++C20C CD 13 AD                             call    AddBCHtoDELsigned           ; DEL = K2 - Beta * Z
  73++C20F ED 53 14 C0                          ld      (SBnKyhi),de                ; y = DEL = K2 - Beta * Z
  74++C213 7D                                   ld      a,l                         ; .
  75++C214 32 13 C0                             ld      (SBnKylo),a                 ; .
  76++C217 3A F5 9C     .CalcAlphaMulY:         ld      a,(ALPHA)
  77++C21A 57                                   ld      d,a                         ; d = alpha (Q value)
  78++C21B 3A 13 C0                             ld      a,(SBnKylo)                 ; HLE = x sgn, hi, lo
  79++C21E 5F                                   ld      e,a                         ; .
  80++C21F 2A 14 C0                             ld      hl,(SBnKyhi)                ; .
  81++C222 CD 83 AF                             call    mulHLEbyDSigned             ; DELC = y * alpha, so DEL = Y * alpha / 256 where d = sign byte
  82++C225 79           .SaveAlphaMulY:         ld      a,c                         ; a = upper byte of results which will have the sign
  83++C226 32 87 C1                             ld      (PlanetAlphaMulY),a            ; save sign from result, ELC holds actual result
  84++C229 7D                                   ld      a,l                         ; also save all of alpha *X as we will need it later
  85++C22A 32 88 C1                             ld      (PlanetAlphaMulY+1),a
  86++C22D 7B                                   ld      a,e
  87++C22E 32 89 C1                             ld      (PlanetAlphaMulY+2),a
  88++C231 7A                                   ld      a,d
  89++C232 32 8A C1                             ld      (PlanetAlphaMulY+3),a
  90++C235 42 4B        .CalcxPLusAlphaY:       ld      bc,de                        ; BCH = Y sgn, hi, lo, we loose the C from result Deal with sign in byte 4
  91++C237 65                                   ld      h,l                         ; .
  92++C238 ED 5B 11 C0                          ld      de,(SBnKxhi)                ; DEL = Y
  93++C23C 3A 10 C0                             ld      a,(SBnKxlo)                 ; .
  94++C23F 6F                                   ld      l,a                         ; .
  95++C240 CD 13 AD                             call    AddBCHtoDELsigned           ; DEL = x + alpha * Y
  96++C243 7A           .SaveResult1:           ld      a,d                         ; Result 1 (X) = AHL + DEL
  97++C244 63                                   ld      h,e                         ;
  98++C245 32 12 C0     .CopyResultTo2:         ld      (SBnKxlo+2),a               ; .
  99++C248 22 10 C0                             ld      (SBnKxlo) ,hl               ; .
 100++C24B C9                                   ret
 101++C24C 3A DB 9D     .NoRotation:            ld      a,(DELTA)                   ; BCH = - Delta
 102++C24F                                      ReturnIfAIsZero
 102++C24F A7          >                        and     a
 102++C250 C8          >                        ret     z
 103++C251 0E 00                                ld      c,0                         ;
 104++C253 67                                   ld      h,a                         ;
 105++C254 06 80                                ld      b,$80                       ;
 106++C256 ED 5B 17 C0                          ld      de,(SBnKzhi)                ; DEL = z position
 107++C25A 3A 16 C0                             ld      a,(SBnKzlo)                 ; .
 108++C25D 6F                                   ld      l,a                         ; .
 109++C25E CD 13 AD                             call    AddBCHtoDELsigned           ; update speed
 110++C261 ED 53 17 C0                          ld      (SBnKzhi),DE                ; write back to zpos
 111++C265 7D                                   ld      a,l
 112++C266 32 16 C0                             ld      (SBnKzlo),a                ;
 113++C269 C9                                   ret
 114++C26A
# file closed: ././Universe/Planet/PlanetApplyMyRollAndPitch.asm
 154+ C26A
 155+ C26A 00           PlanetOnScreen          DB 0
 156+ C26B 00 00        PlanetScrnX             DW  0       ; signed
 157+ C26D 00 00        PlanetScrnY             DW  0       ; signed
 158+ C26F 00           PlanetRadius            DB  0       ; unsigned
 159+ C270              ; draw circle
 160+ C270
 161+ C270              ;
 162+ C270              ;DIVD3B2 K(3 2 1 0) = (A P+1 P) / (z_sign z_hi z_lo)
 163+ C270
 164+ C270 00 00 00 00  PlanetVarK                 DS 4
 165+ C274 00 00 00     PlanetVarP                 DS 3
 166+ C277 00           PlanetVarQ                 DS 1
 167+ C278 00           PlanetVarR                 DS 1
 168+ C279 00           PlanetVarS                 DS 1
 169+ C27A 00           PlanetVarT                 DS 1
 170+ C27B
 171+ C27B              ; Optimisation
 172+ C27B              ; if a <> 0
 173+ C27B              ;       divide AH by CD
 174+ C27B              ; if h <> 0
 175+ C27B              ;      if c <> 0 return 0
 176+ C27B              ;      else
 177+ C27B              ;        divide HL by DE
 178+ C27B              ; if l <>0
 179+ C27B              ;      if c or d <> 0 return 0
 180+ C27B              ;      else
 181+ C27B              ;        divide l by e
 182+ C27B              ;
 183+ C27B 47           PLanetAHLequAHLDivCDE:  ld      b,a                         ; save a reg
 184+ C27C 79                                   ld      a,c                         ; check for divide by zero
 185+ C27D B2                                   or      d                           ; .
 186+ C27E B3                                   or      e                           ; .
 187+ C27F                                      JumpIfZero      .divideByZero       ; .
 187+ C27F CA 98 C2    >                        jp	z,.divideByZero
 188+ C282 78                                   ld      a,b                         ; get a back
 189+ C283                                      JumpIfAIsNotZero    .divideAHLbyCDE
 189+ C283 A7          >                        and     a
 189+ C284 C2 9F C2    >                        jp	    nz,.divideAHLbyCDE
 190+ C287 7C           .AIsZero:               ld      a,h
 191+ C288                                      JumpIfAIsNotZero    .divideHLbyDE
 191+ C288 A7          >                        and     a
 191+ C289 C2 A6 C2    >                        jp	    nz,.divideHLbyDE
 192+ C28C 7D           .HIsZero:               ld      a,l
 193+ C28D                                      JumpIfAIsNotZero    .divideLbyE
 193+ C28D A7          >                        and     a
 193+ C28E C2 B5 C2    >                        jp	    nz,.divideLbyE
 194+ C291              .resultIsZero:          ZeroA
 194+ C291 AF          >                        xor a
 195+ C292 67                                   ld      h,a                        ; result is zero so set hlde
 196+ C293 6F                                   ld      l,a                        ; result is zero so set hlde
 197+ C294 54 5D                                ld      de,hl
 198+ C296                                      ClearCarryFlag
 198+ C296 B7          >                        or a
 199+ C297 C9                                   ret
 200+ C298 3E FF        .divideByZero:          ld      a,$FF
 201+ C29A 67                                   ld      h,a
 202+ C29B 6F                                   ld      l,a
 203+ C29C 54 5D                                ld      de,hl
 204+ C29E                                      SetCarryFlag
 204+ C29E 37          >                        scf
 205+ C29F              ; AHL = ahl/cde, this could be a genuine 24 bit divide
 206+ C29F              ; if AHL is large and cde small then the value will be big so will be off screen so we can risk 16 bit divide
 207+ C29F CD 1B AE     .divideAHLbyCDE:        call    Div24by24
 208+ C2A2 EB                                   ex      hl,de                         ; ahl is result
 209+ C2A3 79                                   ld      a,c                           ; ahl is result
 210+ C2A4                                      ClearCarryFlag
 210+ C2A4 B7          >                        or a
 211+ C2A5              ;.divideAHLbyCDE:        ld      b,a                         ; we need to set BC to AH
 212+ C2A5              ;                        ld      e,d                         ; and DE to CD
 213+ C2A5              ;                        ld      d,c                         ; but make sure we do it in the right
 214+ C2A5              ;                        ld      c,h                         ; order so we don't trash values
 215+ C2A5              ;                        call    BC_Div_DE                   ; bc = result
 216+ C2A5              ;                        ld      a,b
 217+ C2A5              ;                        ld      h,c
 218+ C2A5              ;                        ld      l,0
 219+ C2A5 C9                                   ret
 220+ C2A6              ; AHL = 0hl/0de as A is zero
 221+ C2A6 79           .divideHLbyDE:          ld      a,c                         ;'if c = 0 then result must be zero
 222+ C2A7                                      JumpIfAIsNotZero   .resultIsZero
 222+ C2A7 A7          >                        and     a
 222+ C2A8 C2 91 C2    >                        jp	    nz,.resultIsZero
 223+ C2AB 44 4D                                ld      bc,hl
 224+ C2AD CD 0F B2                             call    BC_Div_DE                   ; BC = HL/DE
 225+ C2B0 60 69                                ld      hl,bc
 226+ C2B2                                      ZeroA                               ; so we can set A to Zero
 226+ C2B2 AF          >                        xor a
 227+ C2B3                                      ClearCarryFlag
 227+ C2B3 B7          >                        or a
 228+ C2B4 C9                                   ret
 229+ C2B5              ; AHL = 00l/00e as A and H are zero
 230+ C2B5 79           .divideLbyE:            ld      a,c                         ; if d = 0 then result must be zero
 231+ C2B6 B2                                   or      d
 232+ C2B7                                      JumpIfAIsNotZero   .resultIsZero
 232+ C2B7 A7          >                        and     a
 232+ C2B8 C2 91 C2    >                        jp	    nz,.resultIsZero
 233+ C2BB 4B                                   ld      c,e
 234+ C2BC 5D                                   ld      e,l
 235+ C2BD CD D1 B1                             call    E_Div_C
 236+ C2C0 6F                                   ld      l,a
 237+ C2C1                                      ZeroA
 237+ C2C1 AF          >                        xor a
 238+ C2C2 67                                   ld      h,a
 239+ C2C3                                      ClearCarryFlag
 239+ C2C3 B7          >                        or a
 240+ C2C4 C9                                   ret
 241+ C2C5
 242+ C2C5
 243+ C2C5 47           PlanetProcessVertex:    ld      b,a                         ; save sign byte
 244+ C2C6 ED 5B 16 C0  .PlanetProjectToEye:    ld      de,(PBnKzlo)                ; X Pos = X / Z
 245+ C2CA 3A 18 C0                             ld      a,(PBnKzsgn)                ; CDE = z
 246+ C2CD FD 67                                ld      iyh,a                       ; save sign
 247+ C2CF                                      ClearSignBitA
 247+ C2CF E6 7F       >                        and     SignMask8Bit
 248+ C2D1                                      ; Addeed as it neds to be AHL/0CD to force * 256 and get correct screen position on scaling
 249+ C2D1              ;                        ld      c,a                         ;
 250+ C2D1 5A                                   ld      e,d
 251+ C2D2 57                                   ld      d,a
 252+ C2D3 0E 00                                ld      c,0
 253+ C2D5                                      ; added above to correct positioning as in reality its X/(Z/256)
 254+ C2D5 78                                   ld      a,b                         ; restore sign byte
 255+ C2D6 FD 6F                                ld      iyl,a                       ; save sign
 256+ C2D8                                      ClearSignBitA
 256+ C2D8 E6 7F       >                        and     SignMask8Bit
 257+ C2DA CD 7B C2                             call PLanetAHLequAHLDivCDE             ; AHL = AHL/CDE unsigned
 258+ C2DD              .CheckPosOnScreenX:     JumpIfAIsNotZero .IsOffScreen         ; if A has a value then its way too large regardless of sign
 258+ C2DD A7          >                        and     a
 258+ C2DE C2 FB C2    >                        jp	    nz,.IsOffScreen
 259+ C2E1                                      JumpOnLeadSignSet h, .IsOffScreen      ; or bit 7 set of h
 259+ C2E1 7C          >                        ld      a,h
 259+ C2E2 E6 80       >                        and     SignOnly8Bit
 259+ C2E4 C2 FB C2    >                        jp      nz,.IsOffScreen
 260+ C2E7 7C                                   ld      a,h
 261+ C2E8                                      ReturnIfAGTEusng 4                  ; if a > 1024 then its way too large regardless of sign
 261+ C2E8 FE 04       >                        cp    4
 261+ C2EA D0          >                        ret	 nc
 262+ C2EB FD 7C                                ld      a,iyh                       ; now deal with the sign
 263+ C2ED FD AD                                xor     iyl
 264+ C2EF                                      SignBitOnlyA                        ; a= resultant sign
 264+ C2EF E6 80       >                        and     SignOnly8Bit
 265+ C2F1 28 06                                jr      z,.calculatedVert           ; result is positive so we don't 2's compliment it
 266+ C2F3              .XIsNegative:           NegHL                               ; make 2's c as negative
 266+ C2F3 AF          >                    xor a
 266+ C2F4 95          >                    sub l
 266+ C2F5 6F          >                    ld l,a
 266+ C2F6 9F          >                    sbc a,a
 266+ C2F7 94          >                    sub h
 266+ C2F8 67          >                    ld h,a
 267+ C2F9              .calculatedVert:        ClearCarryFlag
 267+ C2F9 B7          >                        or a
 268+ C2FA C9                                   ret
 269+ C2FB 21 FF 7F     .IsOffScreen:           ld      hl,$7FFF
 270+ C2FE FD 7C                                ld      a,iyh
 271+ C300 FD AD                                xor     iyl
 272+ C302                                      SignBitOnlyA
 272+ C302 E6 80       >                        and     SignOnly8Bit
 273+ C304 28 02                                jr      z,.calculatedOffScreen
 274+ C306 23                                   inc     hl                          ; set hl to $8001 i.e. -32768
 275+ C307 23                                   inc     hl                          ; .
 276+ C308              .calculatedOffScreen:   SetCarryFlag
 276+ C308 37          >                        scf
 277+ C309 C9                                   ret
 278+ C30A
 279+ C30A
 280+ C30A              ; .........................................................................................................................
 281+ C30A              ; we only hit this if z is positive so we can ignore signs
 282+ C30A ED 4B 16 C0  PlanetCalculateRadius:  ld      bc,(PBnKzlo)                ; DBC = z position
 283+ C30E 3A 18 C0                             ld      a,(PBnKzsgn)                ;
 284+ C311 57                                   ld      d,a                         ;
 285+ C312 21 00 60                             ld      hl,$6000  ; was hl          ; planet radius at Z = 1 006000
 286+ C315 CD 56 B0                             call    Div16by24usgn               ; radius = HL/DBC = 24576 / distance z
 287+ C318 B4                                   or      h                           ; if A or H are not 0 then max Radius
 288+ C319                                      JumpIfAIsZero  .SaveRadius
 288+ C319 A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
 288+ C31A CA 1F C3    >                        jp	    z, .SaveRadius
 289+ C31D 1E F8        .MaxRadius:             ld      e,248                       ;set radius to 248 as maxed out
 290+ C31F 7D           .SaveRadius:            ld      a,l                         ; l = resultant radius
 291+ C320 F6 01                                or      1                           ; at least radius 1 (never even so need to test)
 292+ C322 32 6F C2                             ld      (PlanetRadius),a               ; save a copy of radius now for later
 293+ C325 5F                                   ld      e,a                         ; as later code expects it to be in e
 294+ C326 C9                                   ret
 295+ C327
 296+ C327              ; Shorter version when sun does not need to be processed to screen
 297+ C327 3A 12 C0     PlanetUpdateCompass:    ld      a,(PBnKxsgn)
 298+ C32A 2A 10 C0                             ld      hl,(PBnKxlo)
 299+ C32D CD C5 C2                             call    PlanetProcessVertex
 300+ C330 22 19 C0                             ld      (PlanetCompassX),hl
 301+ C333 3A 15 C0                             ld      a,(PBnKysgn)
 302+ C336 2A 13 C0                             ld      hl,(PBnKylo)
 303+ C339 CD C5 C2                             call    PlanetProcessVertex
 304+ C33C 22 1B C0                             ld      (PlanetCompassY),hl
 305+ C33F C9                                   ret
 306+ C340
 307+ C340                                 ; could probabyl set a variable say "varGood", default as 1 then set to 0 if we end up with a good calulation?? may not need it as we draw here
 308+ C340 CD 92 C1     PlanetUpdateAndRender:     call    PlanetApplyMyRollAndPitch
 309+ C343 3A 18 C0     .CheckDrawable:         ld      a,(PBnKzsgn)
 310+ C346                                      JumpIfAGTENusng 48,  PlanetUpdateCompass ; at a distance over 48 its too far away
 310+ C346 FE 30       >                        cp     48
 310+ C348 D2 27 C3    >                        jp		nc,PlanetUpdateCompass
 311+ C34B 21 17 C0                             ld      hl,PBnKzhi                  ; if the two high bytes are zero then its too close
 312+ C34E B6                                   or      (hl)
 313+ C34F                                      JumpIfAIsZero       PlanetUpdateCompass
 313+ C34F A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
 313+ C350 CA 27 C3    >                        jp	    z, PlanetUpdateCompass
 314+ C353 3A 12 C0     .calculateX:            ld      a,(PBnKxsgn)
 315+ C356 2A 10 C0                             ld      hl,(PBnKxlo)
 316+ C359 CD C5 C2                             call    PlanetProcessVertex            ; now returns carry set for failure
 317+ C35C 22 19 C0                             ld      (PlanetCompassX),hl
 318+ C35F D8                                   ret     c
 319+ C360 1E 80        .calculatedX:           ld      e,ScreenCenterX
 320+ C362 16 00                                ld      d,0
 321+ C364                                      ClearCarryFlag
 321+ C364 B7          >                        or a
 322+ C365 ED 5A                                adc     hl,de
 323+ C367                                      ;call    HL2cEquHLSgnPlusAusgn       ; correct to center of screen
 324+ C367 22 6B C2                             ld      (PlanetScrnX),hl               ; save projected X Position, 2's compliment
 325+ C36A 3A 15 C0     .calculateY:            ld      a,(PBnKysgn)
 326+ C36D 2A 13 C0                             ld      hl,(PBnKylo)
 327+ C370 CD C5 C2                             call    PlanetProcessVertex            ; now returns carry set for failure
 328+ C373 22 1B C0                             ld      (PlanetCompassY),hl
 329+ C376 D8                                   ret     c
 330+ C377 1E 60        .calculatedY:           ld      e,ScreenCenterY
 331+ C379 16 00                                ld      d,0
 332+ C37B EB                                   ex      de,hl
 333+ C37C                                      ClearCarryFlag
 333+ C37C B7          >                        or a
 334+ C37D ED 52                                sbc     hl,de
 335+ C37F                                      ;call    HL2cEquHLSgnPlusAusgn       ; correct to center of screen
 336+ C37F 22 6D C2                             ld      (PlanetScrnY),hl               ; save projected Y Position, 2's compliment
 337+ C382              ; .........................................................................................................................
 338+ C382 CD 0A C3                             call    PlanetCalculateRadius
 339+ C385              ; .........................................................................................................................
 340+ C385 2A 6B C2     .CheckIfSunOnScreen:    ld      hl,(PlanetScrnX)               ; get x pixel position
 341+ C388 FD 26 00                             ld      iyh,0                       ; iyh holds draw status, 0= OK
 342+ C38B 16 00                                ld      d,0                         ; e still holds radius
 343+ C38D 7C                                   ld      a,h
 344+ C38E                                      JumpOnLeadSignSet   h,.CheckXNegative
 344+ C38E 7C          >                        ld      a,h
 344+ C38F E6 80       >                        and     SignOnly8Bit
 344+ C391 C2 A7 C3    >                        jp      nz,.CheckXNegative
 345+ C394 7C           .CheckXPositive:        ld      a,h
 346+ C395                                      JumpIfAIsZero   .XOnScreen          ; if high byte of h is not zero its definitly on screen
 346+ C395 A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
 346+ C396 CA B0 C3    >                        jp	    z, .XOnScreen
 347+ C399 16 00                                ld      d,0                         ; de = radius
 348+ C39B                                      ClearCarryFlag
 348+ C39B B7          >                        or a
 349+ C39C ED 52                                sbc     hl,de
 350+ C39E FA B0 C3                             jp      m   ,.XOnScreen             ; if result was negative then it spans screen
 351+ C3A1 7C                                   ld      a,h
 352+ C3A2                                      JumpIfAIsZero   .XOnScreen          ; if high byte of h is not zero then its partially on screen at least
 352+ C3A2 A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
 352+ C3A3 CA B0 C3    >                        jp	    z, .XOnScreen
 353+ C3A6 C9                                   ret                                 ; None of the X coordinates are on screen
 354+ C3A7 16 00        .CheckXNegative:        ld      d,0                         ; de = radius
 355+ C3A9                                      ClearCarryFlag
 355+ C3A9 B7          >                        or a
 356+ C3AA ED 5A                                adc     hl,de                       ; so we have hl - de
 357+ C3AC F2 B0 C3                             jp      p,.XOnScreen                ; if result was positive then it spans screen so we are good
 358+ C3AF C9                                   ret                                 ; else x is totally off the left side of the screen
 359+ C3B0              ; .........................................................................................................................
 360+ C3B0 2A 6D C2     .XOnScreen:             ld      hl,(PlanetScrnY)               ; now Check Y coordinate
 361+ C3B3                                      JumpOnLeadSignSet   h,.CheckYNegative
 361+ C3B3 7C          >                        ld      a,h
 361+ C3B4 E6 80       >                        and     SignOnly8Bit
 361+ C3B6 C2 D7 C3    >                        jp      nz,.CheckYNegative
 362+ C3B9 7C           .CheckYPositive:        ld      a,h
 363+ C3BA                                      JumpIfAIsNotZero   .PosYCheck2
 363+ C3BA A7          >                        and     a
 363+ C3BB C2 C4 C3    >                        jp	    nz,.PosYCheck2
 364+ C3BE 7D                                   ld      a,l
 365+ C3BF E6 80                                and     %10000000
 366+ C3C1 CA E0 C3                             jp      z,.YOnScreen                ; at least 1 row is on screen as > 128
 367+ C3C4 16 00        .PosYCheck2:            ld      d,0                         ; de = radius
 368+ C3C6                                      ClearCarryFlag
 368+ C3C6 B7          >                        or a
 369+ C3C7 ED 52                                sbc     hl,de
 370+ C3C9 FA E0 C3                             jp      m,.YOnScreen                ; so if its -ve then it spans screen
 371+ C3CC 7C                                   ld      a,h                         ; if h > 0 then off screen so did not span
 372+ C3CD                                      ReturnIfANotZero                    ; .
 372+ C3CD A7          >                        and     a
 372+ C3CE C0          >                        ret     nz
 373+ C3CF 7D                                   ld      a,l                         ; if l > 128 then off screen so did not span
 374+ C3D0 E6 80                                and     %10000000                   ; .
 375+ C3D2                                      ReturnIfANotZero                    ; .
 375+ C3D2 A7          >                        and     a
 375+ C3D3 C0          >                        ret     nz
 376+ C3D4 C3 D3 C7                             jp      YOnScreen                  ; so Y at least spans
 377+ C3D7 16 00        .CheckYNegative:        ld      d,0                         ; de = radius
 378+ C3D9                                      ClearCarryFlag
 378+ C3D9 B7          >                        or a
 379+ C3DA ED 5A                                adc     hl,de                       ; so we have hl - de
 380+ C3DC F2 E0 C3                             jp      p,.YOnScreen                ; if result was positive then it spans screen so we are good
 381+ C3DF C9                                   ret                                 ; else never gets above 0 so return
 382+ C3E0              ; .........................................................................................................................
 383+ C3E0 CD E4 C3     .YOnScreen:             call    PlanetDraw
 384+ C3E3 C9                                   ret
 385+ C3E4
 386+ C3E4              PlanetDraw:             MMUSelectLayer2
 386+ C3E4 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 387+ C3E8 2A 6B C2                             ld      hl,(PlanetScrnX)
 388+ C3EB ED 5B 6D C2                          ld      de,(PlanetScrnY)
 389+ C3EF 3A 6F C2                             ld      a,(PlanetRadius)
 390+ C3F2 4F                                   ld      c,a
 391+ C3F3 3E 0C                                ld      a,L2ColourGREEN_4
 392+ C3F5 CD 62 E8                             call    l2_draw_clipped_circle
 393+ C3F8 C9                                   ret
 394+ C3F9
 395+ C3F9
 396+ C3F9              PlanetBankSize  EQU $ - StartOfPlanet
 397+ C3F9
 398+ C3F9
# file closed: ./Universe/Planet/planet_data.asm
 991  C3F9
 992  C3F9              ; Bank 91  ------------------------------------------------------------------------------------------------------------------------
 993  C3F9                                      SLOT    GalaxyDataAddr
 994  C3F9                                      PAGE    BankGalaxyData0
 995  C3F9                                      ORG GalaxyDataAddr, BankGalaxyData0
 996  E000                                      INCLUDE "./Universe/Galaxy/galaxy_data.asm"
# file opened: ./Universe/Galaxy/galaxy_data.asm
   1+ E000 47 61 6C 61  galaxy_page_marker  DB "Galaxy      PG9"
   1+ E004 78 79 20 20
   1+ E008 20 20 20 20
   1+ E00C 50 47 39
   2+ E00F 30           galaxy_pg_cnt       DB "0"
   3+ E010 00 00 00...  galaxy_master_seed  DS 6
   4+ E016 00 00 00...  galaxy_data DS 8*256
   5+ E816 2D 2D 2D 2D  galaxy_code_end DB "-----------------------------------------------------------------"
   5+ E81A 2D 2D 2D 2D
   5+ E81E 2D 2D 2D 2D
   5+ E822 2D 2D 2D 2D
   5+ E826 2D 2D 2D 2D
   5+ E82A 2D 2D 2D 2D
   5+ E82E 2D 2D 2D 2D
   5+ E832 2D 2D 2D 2D
   5+ E836 2D 2D 2D 2D
   5+ E83A 2D 2D 2D 2D
   5+ E83E 2D 2D 2D 2D
   5+ E842 2D 2D 2D 2D
   5+ E846 2D 2D 2D 2D
   5+ E84A 2D 2D 2D 2D
   5+ E84E 2D 2D 2D 2D
   5+ E852 2D 2D 2D 2D
   5+ E856 2D
   6+ E857 00 00        GalaxyPresentSystem:     DW 0
   7+ E859 00 00        GalaxyDestinationSystem: DW 0
   8+ E85B 00 00        GalaxyTargetSystem:      DW 0
   9+ E85D              ; including a DB 0 as a catcher
  10+ E85D 00           GalaxySearchLength:      DB 0
  11+ E85E 00 00 00...  GalaxySearchString:      DS 32
  12+ E87E 00                                    DB 0
  13+ E87F 00 00 00...  GalaxyExpandedName:      DS 32
  14+ E89F 00                                    DB 0
  15+ E8A0 41 42 4F 55  GalaxyName_digrams	     DB "ABOUSEITILETSTONLONUTHNOALLEXEGEZACEBISOUSESARMAINDIREA?ERATENBERALAVETIEDORQUANTEISRION"
  15+ E8A4 53 45 49 54
  15+ E8A8 49 4C 45 54
  15+ E8AC 53 54 4F 4E
  15+ E8B0 4C 4F 4E 55
  15+ E8B4 54 48 4E 4F
  15+ E8B8 41 4C 4C 45
  15+ E8BC 58 45 47 45
  15+ E8C0 5A 41 43 45
  15+ E8C4 42 49 53 4F
  15+ E8C8 55 53 45 53
  15+ E8CC 41 52 4D 41
  15+ E8D0 49 4E 44 49
  15+ E8D4 52 45 41 3F
  15+ E8D8 45 52 41 54
  15+ E8DC 45 4E 42 45
  15+ E8E0 52 41 4C 41
  15+ E8E4 56 45 54 49
  15+ E8E8 45 44 4F 52
  15+ E8EC 51 55 41 4E
  15+ E8F0 54 45 49 53
  15+ E8F4 52 49 4F 4E
  16+ E8F8 00 00 00...  GalaxyWorkingSeed        DS 6
  17+ E8FE 00 00 00...  GalaxyNamingSeed         DS 6
  18+ E904 00 00 00...  GalaxySavedRandomSeed    DS 6
  19+ E90A
  20+ E90A 00           GalaxyDisplayGovernment         DB 0
  21+ E90B 00           GalaxyDisplayEconomy            DB 0
  22+ E90C 00           GalaxyDisplayTekLevel           DB 0
  23+ E90D 00           GalaxyDisplayPopulation         DB 0
  24+ E90E 00 00        GalaxyDisplayProductivity       DW 0
  25+ E910 00 00        GalaxyDisplayRadius             DW 0
  26+ E912
  27+ E912 66 61 62 6C  GalaxyDescList01A       DB "fabled",0
  27+ E916 65 64 00
  28+ E919 6E 6F 74 61  GalaxyDescList01B       DB "notable",0
  28+ E91D 62 6C 65 00
  29+ E921 77 65 6C 6C  GalaxyDescList01C       DB "well known",0
  29+ E925 20 6B 6E 6F
  29+ E929 77 6E 00
  30+ E92C 66 61 6D 6F  GalaxyDescList01D       DB "famous",0
  30+ E930 75 73 00
  31+ E933 6E 6F 74 65  GalaxyDescList01E       DB "noted",0
  31+ E937 64 00
  32+ E939 76 65 72 79  GalaxyDescList02A       DB "very",0
  32+ E93D 00
  33+ E93E 6D 69 6C 64  GalaxyDescList02B       DB "mildly",0
  33+ E942 6C 79 00
  34+ E945 6D 6F 73 74  GalaxyDescList02C       DB "most",0
  34+ E949 00
  35+ E94A 72 65 61 73  GalaxyDescList02D       DB "reasonably",0
  35+ E94E 6F 6E 61 62
  35+ E952 6C 79 00
  36+ E955 00           GalaxyDescList02E       DB 0
  37+ E956 61 6E 63 69  GalaxyDescList03A       DB "ancient",0
  37+ E95A 65 6E 74 00
  38+ E95E 3C 32 30 3E  GalaxyDescList03B       DB "<20>",0
  38+ E962 00
  39+ E963 67 72 65 61  GalaxyDescList03C       DB "great",0
  39+ E967 74 00
  40+ E969 76 61 73 74  GalaxyDescList03D       DB "vast",0
  40+ E96D 00
  41+ E96E 70 69 6E 6B  GalaxyDescList03E       DB "pink",0
  41+ E972 00
  42+ E973 3C 32 39 3E  GalaxyDescList04A       DB "<29> <28> plantations",0
  42+ E977 20 3C 32 38
  42+ E97B 3E 20 70 6C
  42+ E97F 61 6E 74 61
  42+ E983 74 69 6F 6E
  42+ E987 73 00
  43+ E989 6D 6F 75 6E  GalaxyDescList04B       DB "mountains",0
  43+ E98D 74 61 69 6E
  43+ E991 73 00
  44+ E993 3C 32 37 3E  GalaxyDescList04C       DB "<27>",0
  44+ E997 00
  45+ E998 3C 31 39 3E  GalaxyDescList04D       DB "<19> forests",0
  45+ E99C 20 66 6F 72
  45+ E9A0 65 73 74 73
  45+ E9A4 00
  46+ E9A5 6F 63 65 61  GalaxyDescList04E       DB "oceans",0
  46+ E9A9 6E 73 00
  47+ E9AC 73 68 79 6E  GalaxyDescList05A       DB "shyness",0
  47+ E9B0 65 73 73 00
  48+ E9B4 73 69 6C 6C  GalaxyDescList05B       DB "silliness",0
  48+ E9B8 69 6E 65 73
  48+ E9BC 73 00
  49+ E9BE 6D 61 74 69  GalaxyDescList05C       DB "mating traditions",0
  49+ E9C2 6E 67 20 74
  49+ E9C6 72 61 64 69
  49+ E9CA 74 69 6F 6E
  49+ E9CE 73 00
  50+ E9D0 6C 6F 61 74  GalaxyDescList05D       DB "loathing of <5>",0
  50+ E9D4 68 69 6E 67
  50+ E9D8 20 6F 66 20
  50+ E9DC 3C 35 3E 00
  51+ E9E0 6C 6F 76 65  GalaxyDescList05E       DB "love for <5>",0
  51+ E9E4 20 66 6F 72
  51+ E9E8 20 3C 35 3E
  51+ E9EC 00
  52+ E9ED 66 6F 6F 64  GalaxyDescList06A       DB "food blenders",0
  52+ E9F1 20 62 6C 65
  52+ E9F5 6E 64 65 72
  52+ E9F9 73 00
  53+ E9FB 74 6F 75 72  GalaxyDescList06B       DB "tourists",0
  53+ E9FF 69 73 74 73
  53+ EA03 00
  54+ EA04 70 6F 65 74  GalaxyDescList06C       DB "poetry",0
  54+ EA08 72 79 00
  55+ EA0B 64 69 73 63  GalaxyDescList06D       DB "discos",0
  55+ EA0F 6F 73 00
  56+ EA12 3C 31 33 3E  GalaxyDescList06E       DB "<13>",0
  56+ EA16 00
  57+ EA17 74 61 6C 6B  GalaxyDescList07A       DB "talking tree",0
  57+ EA1B 69 6E 67 20
  57+ EA1F 74 72 65 65
  57+ EA23 00
  58+ EA24 63 72 61 62  GalaxyDescList07B       DB "crab",0
  58+ EA28 00
  59+ EA29 62 61 74 00  GalaxyDescList07C       DB "bat",0
  60+ EA2D 6C 6F 62 73  GalaxyDescList07D       DB "lobst",0
  60+ EA31 74 00
  61+ EA33 25 52 00     GalaxyDescList07E       DB "%R",0
  62+ EA36 62 65 73 65  GalaxyDescList08A       DB "beset",0
  62+ EA3A 74 00
  63+ EA3C 70 6C 61 67  GalaxyDescList08B       DB "plagued",0
  63+ EA40 75 65 64 00
  64+ EA44 72 61 76 61  GalaxyDescList08C       DB "ravaged",0
  64+ EA48 67 65 64 00
  65+ EA4C 63 75 72 73  GalaxyDescList08D       DB "cursed",0
  65+ EA50 65 64 00
  66+ EA53 73 63 6F 75  GalaxyDescList08E       DB "scourged",0
  66+ EA57 72 67 65 64
  66+ EA5B 00
  67+ EA5C 3C 32 31 3E  GalaxyDescList09A       DB "<21> civil war",0
  67+ EA60 20 63 69 76
  67+ EA64 69 6C 20 77
  67+ EA68 61 72 00
  68+ EA6B 3C 32 36 3E  GalaxyDescList09B       DB "<26> <23> <24>s",0
  68+ EA6F 20 3C 32 33
  68+ EA73 3E 20 3C 32
  68+ EA77 34 3E 73 00
  69+ EA7B 61 20 3C 32  GalaxyDescList09C       DB "a <26> disease",0
  69+ EA7F 36 3E 20 64
  69+ EA83 69 73 65 61
  69+ EA87 73 65 00
  70+ EA8A 3C 32 31 3E  GalaxyDescList09D       DB "<21> earthquakes",0
  70+ EA8E 20 65 61 72
  70+ EA92 74 68 71 75
  70+ EA96 61 6B 65 73
  70+ EA9A 00
  71+ EA9B 3C 32 31 3E  GalaxyDescList09E       DB "<21> solar activity",0
  71+ EA9F 20 73 6F 6C
  71+ EAA3 61 72 20 61
  71+ EAA7 63 74 69 76
  71+ EAAB 69 74 79 00
  72+ EAAF 69 74 73 20  GalaxyDescList10A       DB "its <2> <3>",0
  72+ EAB3 3C 32 3E 20
  72+ EAB7 3C 33 3E 00
  73+ EABB 74 68 65 20  GalaxyDescList10B       DB "the %I <23> <24>",0
  73+ EABF 25 49 20 3C
  73+ EAC3 32 33 3E 20
  73+ EAC7 3C 32 34 3E
  73+ EACB 00
  74+ EACC 69 74 73 20  GalaxyDescList10C       DB "its inhabitants' <25> <4>",0
  74+ EAD0 69 6E 68 61
  74+ EAD4 62 69 74 61
  74+ EAD8 6E 74 73 27
  74+ EADC 20 3C 32 35
  74+ EAE0 3E 20 3C 34
  74+ EAE4 3E 00
  75+ EAE6 3C 33 32 3E  GalaxyDescList10D       DB "<32>",0
  75+ EAEA 00
  76+ EAEB 69 74 73 20  GalaxyDescList10E       DB "its <12> <13>",0
  76+ EAEF 3C 31 32 3E
  76+ EAF3 20 3C 31 33
  76+ EAF7 3E 00
  77+ EAF9 6A 75 69 63  GalaxyDescList11A       DB "juice",0
  77+ EAFD 65 00
  78+ EAFF 62 72 61 6E  GalaxyDescList11B       DB "brandy",0
  78+ EB03 64 79 00
  79+ EB06 77 61 74 65  GalaxyDescList11C       DB "water",0
  79+ EB0A 72 00
  80+ EB0C 62 72 65 77  GalaxyDescList11D       DB "brew",0
  80+ EB10 00
  81+ EB11 67 61 72 67  GalaxyDescList11E       DB "gargle blasters",0
  81+ EB15 6C 65 20 62
  81+ EB19 6C 61 73 74
  81+ EB1D 65 72 73 00
  82+ EB21 25 52 00     GalaxyDescList12A       DB "%R",0
  83+ EB24 25 49 20 3C  GalaxyDescList12B       DB "%I <24>",0
  83+ EB28 32 34 3E 00
  84+ EB2C 25 49 20 25  GalaxyDescList12C       DB "%I %R",0
  84+ EB30 52 00
  85+ EB32 25 49 20 3C  GalaxyDescList12D       DB "%I <26>",0
  85+ EB36 32 36 3E 00
  86+ EB3A 3C 32 36 3E  GalaxyDescList12E       DB "<26> %R",0
  86+ EB3E 20 25 52 00
  87+ EB42 66 61 62 75  GalaxyDescList13A       DB "fabulous",0
  87+ EB46 6C 6F 75 73
  87+ EB4A 00
  88+ EB4B 65 78 6F 74  GalaxyDescList13B       DB "exotic",0
  88+ EB4F 69 63 00
  89+ EB52 68 6F 6F 70  GalaxyDescList13C       DB "hoopy",0
  89+ EB56 79 00
  90+ EB58 75 6E 75 73  GalaxyDescList13D       DB "unusual",0
  90+ EB5C 75 61 6C 00
  91+ EB60 65 78 63 69  GalaxyDescList13E       DB "exciting",0
  91+ EB64 74 69 6E 67
  91+ EB68 00
  92+ EB69 63 75 69 73  GalaxyDescList14A       DB "cuisine",0
  92+ EB6D 69 6E 65 00
  93+ EB71 6E 69 67 68  GalaxyDescList14B       DB "night life",0
  93+ EB75 74 20 6C 69
  93+ EB79 66 65 00
  94+ EB7C 63 61 73 69  GalaxyDescList14C       DB "casinos",0
  94+ EB80 6E 6F 73 00
  95+ EB84 73 69 74 20  GalaxyDescList14D       DB "sit coms",0
  95+ EB88 63 6F 6D 73
  95+ EB8C 00
  96+ EB8D 20 3C 33 32  GalaxyDescList14E       DB " <32> ",0
  96+ EB91 3E 20 00
  97+ EB94 25 48 00     GalaxyDescList15A       DB "%H",0
  98+ EB97 54 68 65 20  GalaxyDescList15B       DB "The planet %H",0
  98+ EB9B 70 6C 61 6E
  98+ EB9F 65 74 20 25
  98+ EBA3 48 00
  99+ EBA5 54 68 65 20  GalaxyDescList15C       DB "The world %H",0
  99+ EBA9 77 6F 72 6C
  99+ EBAD 64 20 25 48
  99+ EBB1 00
 100+ EBB2 54 68 69 73  GalaxyDescList15D       DB "This planet",0
 100+ EBB6 20 70 6C 61
 100+ EBBA 6E 65 74 00
 101+ EBBE 54 68 69 73  GalaxyDescList15E       DB "This world",0
 101+ EBC2 20 77 6F 72
 101+ EBC6 6C 64 00
 102+ EBC9 6E 20 75 6E  GalaxyDescList16A       DB "n unremarkable",0
 102+ EBCD 72 65 6D 61
 102+ EBD1 72 6B 61 62
 102+ EBD5 6C 65 00
 103+ EBD8 20 62 6F 72  GalaxyDescList16B       DB " boring",0
 103+ EBDC 69 6E 67 00
 104+ EBE0 20 64 75 6C  GalaxyDescList16C       DB " dull",0
 104+ EBE4 6C 00
 105+ EBE6 20 74 65 64  GalaxyDescList16D       DB " tedious",0
 105+ EBEA 69 6F 75 73
 105+ EBEE 00
 106+ EBEF 20 72 65 76  GalaxyDescList16E       DB " revolting",0
 106+ EBF3 6F 6C 74 69
 106+ EBF7 6E 67 00
 107+ EBFA 70 6C 61 6E  GalaxyDescList17A       DB "planet",0
 107+ EBFE 65 74 00
 108+ EC01 77 6F 72 6C  GalaxyDescList17B       DB "world",0
 108+ EC05 64 00
 109+ EC07 70 6C 61 63  GalaxyDescList17C       DB "place",0
 109+ EC0B 65 00
 110+ EC0D 6C 69 74 74  GalaxyDescList17D       DB "little planet",0
 110+ EC11 6C 65 20 70
 110+ EC15 6C 61 6E 65
 110+ EC19 74 00
 111+ EC1B 64 75 6D 70  GalaxyDescList17E       DB "dump",0
 111+ EC1F 00
 112+ EC20 77 61 73 70  GalaxyDescList18A       DB "wasp",0
 112+ EC24 00
 113+ EC25 6D 6F 74 68  GalaxyDescList18B       DB "moth",0
 113+ EC29 00
 114+ EC2A 67 72 75 62  GalaxyDescList18C       DB "grub",0
 114+ EC2E 00
 115+ EC2F 61 6E 74 00  GalaxyDescList18D       DB "ant",0
 116+ EC33 25 52 00     GalaxyDescList18E       DB "%R",0
 117+ EC36 70 6F 65 74  GalaxyDescList19A       DB "poet",0
 117+ EC3A 00
 118+ EC3B 61 72 74 73  GalaxyDescList19B       DB "arts graduate",0
 118+ EC3F 20 67 72 61
 118+ EC43 64 75 61 74
 118+ EC47 65 00
 119+ EC49 79 61 6B 00  GalaxyDescList19C       DB "yak",0
 120+ EC4D 73 6E 61 69  GalaxyDescList19D       DB "snail",0
 120+ EC51 6C 00
 121+ EC53 73 6C 75 67  GalaxyDescList19E       DB "slug",0
 121+ EC57 00
 122+ EC58 74 72 6F 70  GalaxyDescList20A       DB "tropical",0
 122+ EC5C 69 63 61 6C
 122+ EC60 00
 123+ EC61 64 65 6E 73  GalaxyDescList20B       DB "dense",0
 123+ EC65 65 00
 124+ EC67 72 61 69 6E  GalaxyDescList20C       DB "rain",0
 124+ EC6B 00
 125+ EC6C 69 6D 70 65  GalaxyDescList20D       DB "impenetrable",0
 125+ EC70 6E 65 74 72
 125+ EC74 61 62 6C 65
 125+ EC78 00
 126+ EC79 65 78 75 62  GalaxyDescList20E       DB "exuberant",0
 126+ EC7D 65 72 61 6E
 126+ EC81 74 00
 127+ EC83 66 75 6E 6E  GalaxyDescList21A       DB "funny",0
 127+ EC87 79 00
 128+ EC89 77 69 65 72  GalaxyDescList21B       DB "wierd",0
 128+ EC8D 64 00
 129+ EC8F 75 6E 75 73  GalaxyDescList21C       DB "unusual",0
 129+ EC93 75 61 6C 00
 130+ EC97 73 74 72 61  GalaxyDescList21D       DB "strange",0
 130+ EC9B 6E 67 65 00
 131+ EC9F 70 65 63 75  GalaxyDescList21E       DB "peculiar",0
 131+ ECA3 6C 69 61 72
 131+ ECA7 00
 132+ ECA8 66 72 65 71  GalaxyDescList22A       DB "frequent",0
 132+ ECAC 75 65 6E 74
 132+ ECB0 00
 133+ ECB1 6F 63 63 61  GalaxyDescList22B       DB "occasional",0
 133+ ECB5 73 69 6F 6E
 133+ ECB9 61 6C 00
 134+ ECBC 75 6E 70 72  GalaxyDescList22C       DB "unpredictable",0
 134+ ECC0 65 64 69 63
 134+ ECC4 74 61 62 6C
 134+ ECC8 65 00
 135+ ECCA 64 72 65 61  GalaxyDescList22D       DB "dreadful",0
 135+ ECCE 64 66 75 6C
 135+ ECD2 00
 136+ ECD3 64 65 61 64  GalaxyDescList22E       DB "deadly",0
 136+ ECD7 6C 79 00
 137+ ECDA 3C 31 3E 20  GalaxyDescList23A       DB "<1> <0> for <9>",0
 137+ ECDE 3C 30 3E 20
 137+ ECE2 66 6F 72 20
 137+ ECE6 3C 39 3E 00
 138+ ECEA 3C 31 3E 20  GalaxyDescList23B       DB "<1> <0> for <9> and <9>",0
 138+ ECEE 3C 30 3E 20
 138+ ECF2 66 6F 72 20
 138+ ECF6 3C 39 3E 20
 138+ ECFA 61 6E 64 20
 138+ ECFE 3C 39 3E 00
 139+ ED02 3C 37 3E 20  GalaxyDescList23C       DB "<7> by <8>",0
 139+ ED06 62 79 20 3C
 139+ ED0A 38 3E 00
 140+ ED0D 3C 31 3E 20  GalaxyDescList23D       DB "<1> <0> for <9> but <7> by <8>",0
 140+ ED11 3C 30 3E 20
 140+ ED15 66 6F 72 20
 140+ ED19 3C 39 3E 20
 140+ ED1D 62 75 74 20
 140+ ED21 3C 37 3E 20
 140+ ED25 62 79 20 3C
 140+ ED29 38 3E 00
 141+ ED2C 61 3C 31 35  GalaxyDescList23E       DB "a<15> <16>",0
 141+ ED30 3E 20 3C 31
 141+ ED34 36 3E 00
 142+ ED37 3C 32 36 3E  GalaxyDescList24A       DB "<26>",0
 142+ ED3B 00
 143+ ED3C 6D 6F 75 6E  GalaxyDescList24B       DB "mountain",0
 143+ ED40 74 61 69 6E
 143+ ED44 00
 144+ ED45 65 64 69 62  GalaxyDescList24C       DB "edible",0
 144+ ED49 6C 65 00
 145+ ED4C 74 72 65 65  GalaxyDescList24D       DB "tree",0
 145+ ED50 00
 146+ ED51 73 70 6F 74  GalaxyDescList24E       DB "spotted",0
 146+ ED55 74 65 64 00
 147+ ED59 3C 33 30 3E  GalaxyDescList25A       DB "<30>",0
 147+ ED5D 00
 148+ ED5E 3C 33 31 3E  GalaxyDescList25B       DB "<31>",0
 148+ ED62 00
 149+ ED63 3C 36 3E 6F  GalaxyDescList25C       DB "<6>oid",0
 149+ ED67 69 64 00
 150+ ED6A 3C 31 38 3E  GalaxyDescList25D       DB "<18>",0
 150+ ED6E 00
 151+ ED6F 3C 31 37 3E  GalaxyDescList25E       DB "<17>",0
 151+ ED73 00
 152+ ED74 61 6E 63 69  GalaxyDescList26A       DB "ancient",0
 152+ ED78 65 6E 74 00
 153+ ED7C 65 78 63 65  GalaxyDescList26B       DB "exceptional",0
 153+ ED80 70 74 69 6F
 153+ ED84 6E 61 6C 00
 154+ ED88 65 63 63 65  GalaxyDescList26C       DB "eccentric",0
 154+ ED8C 6E 74 72 69
 154+ ED90 63 00
 155+ ED92 69 6E 67 72  GalaxyDescList26D       DB "ingrained",0
 155+ ED96 61 69 6E 65
 155+ ED9A 64 00
 156+ ED9C 3C 32 30 3E  GalaxyDescList26E       DB "<20>",0
 156+ EDA0 00
 157+ EDA1 6B 69 6C 6C  GalaxyDescList27A       DB "killer",0
 157+ EDA5 65 72 00
 158+ EDA8 64 65 61 64  GalaxyDescList27B       DB "deadly",0
 158+ EDAC 6C 79 00
 159+ EDAF 65 76 69 6C  GalaxyDescList27C       DB "evil",0
 159+ EDB3 00
 160+ EDB4 6C 65 74 68  GalaxyDescList27D       DB "lethal",0
 160+ EDB8 61 6C 00
 161+ EDBB 76 69 63 69  GalaxyDescList27E       DB "vicious",0
 161+ EDBF 6F 75 73 00
 162+ EDC3 70 61 72 6B  GalaxyDescList28A       DB "parking meters",0
 162+ EDC7 69 6E 67 20
 162+ EDCB 6D 65 74 65
 162+ EDCF 72 73 00
 163+ EDD2 64 75 73 74  GalaxyDescList28B       DB "dust clouds",0
 163+ EDD6 20 63 6C 6F
 163+ EDDA 75 64 73 00
 164+ EDDE 69 63 65 20  GalaxyDescList28C       DB "ice bergs",0
 164+ EDE2 62 65 72 67
 164+ EDE6 73 00
 165+ EDE8 72 6F 63 6B  GalaxyDescList28D       DB "rock formations",0
 165+ EDEC 20 66 6F 72
 165+ EDF0 6D 61 74 69
 165+ EDF4 6F 6E 73 00
 166+ EDF8 76 6F 6C 63  GalaxyDescList28E       DB "volcanoes",0
 166+ EDFC 61 6E 6F 65
 166+ EE00 73 00
 167+ EE02 70 6C 61 6E  GalaxyDescList29A       DB "plant",0
 167+ EE06 74 00
 168+ EE08 74 75 6C 69  GalaxyDescList29B       DB "tulip",0
 168+ EE0C 70 00
 169+ EE0E 62 61 6E 61  GalaxyDescList29C       DB "banana",0
 169+ EE12 6E 61 00
 170+ EE15 63 6F 72 6E  GalaxyDescList29D       DB "corn",0
 170+ EE19 00
 171+ EE1A 25 52 77 65  GalaxyDescList29E       DB "%Rweed",0
 171+ EE1E 65 64 00
 172+ EE21 25 52 00     GalaxyDescList30A       DB "%R",0
 173+ EE24 23 49 20 25  GalaxyDescList30B       DB "#I %R",0
 173+ EE28 52 00
 174+ EE2A 23 49 20 3C  GalaxyDescList30C       DB "#I <26>",0
 174+ EE2E 32 36 3E 00
 175+ EE32 69 6E 68 61  GalaxyDescList30D       DB "inhabitant",0
 175+ EE36 62 69 74 61
 175+ EE3A 6E 74 00
 176+ EE3D 25 49 20 25  GalaxyDescList30E       DB "%I %R",0
 176+ EE41 52 00
 177+ EE43 73 68 72 65  GalaxyDescList31A       DB "shrew",0
 177+ EE47 77 00
 178+ EE49 62 65 61 73  GalaxyDescList31B       DB "beast",0
 178+ EE4D 74 00
 179+ EE4F 62 69 73 6F  GalaxyDescList31C       DB "bison",0
 179+ EE53 6E 00
 180+ EE55 73 6E 61 6B  GalaxyDescList31D       DB "snake",0
 180+ EE59 65 00
 181+ EE5B 77 6F 6C 66  GalaxyDescList31E       DB "wolf",0
 181+ EE5F 00
 182+ EE60 6C 65 6F 70  GalaxyDescList32A       DB "leopard",0
 182+ EE64 61 72 64 00
 183+ EE68 63 61 74 00  GalaxyDescList32B       DB "cat",0
 184+ EE6C 6D 6F 6E 6B  GalaxyDescList32C       DB "monkey",0
 184+ EE70 65 79 00
 185+ EE73 67 6F 61 74  GalaxyDescList32D       DB "goat",0
 185+ EE77 00
 186+ EE78 66 69 73 68  GalaxyDescList32E       DB "fish",0
 186+ EE7C 00
 187+ EE7D 3C 31 31 3E  GalaxyDescList33A       DB "<11> <10>",0
 187+ EE81 20 3C 31 30
 187+ EE85 3E 00
 188+ EE87 23 49 20 3C  GalaxyDescList33B       DB "#I <30> <33>",0
 188+ EE8B 33 30 3E 20
 188+ EE8F 3C 33 33 3E
 188+ EE93 00
 189+ EE94 69 74 73 20  GalaxyDescList33C       DB "its <12> <31> <33>",0
 189+ EE98 3C 31 32 3E
 189+ EE9C 20 3C 33 31
 189+ EEA0 3E 20 3C 33
 189+ EEA4 33 3E 00
 190+ EEA7 3C 33 34 3E  GalaxyDescList33D       DB "<34> <35>",0
 190+ EEAB 20 3C 33 35
 190+ EEAF 3E 00
 191+ EEB1 3C 31 31 3E  GalaxyDescList33E       DB "<11> <10>",0
 191+ EEB5 20 3C 31 30
 191+ EEB9 3E 00
 192+ EEBB 6D 65 61 74  GalaxyDescList34A       DB "meat",0
 192+ EEBF 00
 193+ EEC0 63 75 74 6C  GalaxyDescList34B       DB "cutlet",0
 193+ EEC4 65 74 00
 194+ EEC7 73 74 65 61  GalaxyDescList34C       DB "steak",0
 194+ EECB 6B 00
 195+ EECD 62 75 72 67  GalaxyDescList34D       DB "burgers",0
 195+ EED1 65 72 73 00
 196+ EED5 73 6F 75 70  GalaxyDescList34E       DB "soup",0
 196+ EED9 00
 197+ EEDA 69 63 65 00  GalaxyDescList35A       DB "ice",0
 198+ EEDE 6D 75 64 00  GalaxyDescList35B       DB "mud",0
 199+ EEE2 5A 65 72 6F  GalaxyDescList35C       DB "Zero-G",0
 199+ EEE6 2D 47 00
 200+ EEE9 76 61 63 75  GalaxyDescList35D       DB "vacuum",0
 200+ EEED 75 6D 00
 201+ EEF0 25 49 20 75  GalaxyDescList35E       DB "%I ultra",0
 201+ EEF4 6C 74 72 61
 201+ EEF8 00
 202+ EEF9 68 6F 63 6B  GalaxyDescList36A       DB "hockey",0
 202+ EEFD 65 79 00
 203+ EF00 63 72 69 63  GalaxyDescList36B       DB "cricket",0
 203+ EF04 6B 65 74 00
 204+ EF08 6B 61 72 61  GalaxyDescList36C       DB "karate",0
 204+ EF0C 74 65 00
 205+ EF0F 70 6F 6C 6F  GalaxyDescList36D       DB "polo",0
 205+ EF13 00
 206+ EF14 74 65 6E 6E  GalaxyDescList36E       DB "tennis",0
 206+ EF18 69 73 00
 207+ EF1B
 208+ EF1B 12 E9 19 E9  GalaxyDescList          DW GalaxyDescList01A, GalaxyDescList01B, GalaxyDescList01C, GalaxyDescList01D, GalaxyDescList01E
 208+ EF1F 21 E9 2C E9
 208+ EF23 33 E9
 209+ EF25 39 E9 3E E9                          DW GalaxyDescList02A, GalaxyDescList02B, GalaxyDescList02C, GalaxyDescList02D, GalaxyDescList02E
 209+ EF29 45 E9 4A E9
 209+ EF2D 55 E9
 210+ EF2F 56 E9 5E E9                          DW GalaxyDescList03A, GalaxyDescList03B, GalaxyDescList03C, GalaxyDescList03D, GalaxyDescList03E
 210+ EF33 63 E9 69 E9
 210+ EF37 6E E9
 211+ EF39 73 E9 89 E9                          DW GalaxyDescList04A, GalaxyDescList04B, GalaxyDescList04C, GalaxyDescList04D, GalaxyDescList04E
 211+ EF3D 93 E9 98 E9
 211+ EF41 A5 E9
 212+ EF43 AC E9 B4 E9                          DW GalaxyDescList05A, GalaxyDescList05B, GalaxyDescList05C, GalaxyDescList05D, GalaxyDescList05E
 212+ EF47 BE E9 D0 E9
 212+ EF4B E0 E9
 213+ EF4D ED E9 FB E9                          DW GalaxyDescList06A, GalaxyDescList06B, GalaxyDescList06C, GalaxyDescList06D, GalaxyDescList06E
 213+ EF51 04 EA 0B EA
 213+ EF55 12 EA
 214+ EF57 17 EA 24 EA                          DW GalaxyDescList07A, GalaxyDescList07B, GalaxyDescList07C, GalaxyDescList07D, GalaxyDescList07E
 214+ EF5B 29 EA 2D EA
 214+ EF5F 33 EA
 215+ EF61 36 EA 3C EA                          DW GalaxyDescList08A, GalaxyDescList08B, GalaxyDescList08C, GalaxyDescList08D, GalaxyDescList08E
 215+ EF65 44 EA 4C EA
 215+ EF69 53 EA
 216+ EF6B 5C EA 6B EA                          DW GalaxyDescList09A, GalaxyDescList09B, GalaxyDescList09C, GalaxyDescList09D, GalaxyDescList09E
 216+ EF6F 7B EA 8A EA
 216+ EF73 9B EA
 217+ EF75 AF EA BB EA                          DW GalaxyDescList10A, GalaxyDescList10B, GalaxyDescList10C, GalaxyDescList10D, GalaxyDescList10E
 217+ EF79 CC EA E6 EA
 217+ EF7D EB EA
 218+ EF7F F9 EA FF EA                          DW GalaxyDescList11A, GalaxyDescList11B, GalaxyDescList11C, GalaxyDescList11D, GalaxyDescList11E
 218+ EF83 06 EB 0C EB
 218+ EF87 11 EB
 219+ EF89 21 EB 24 EB                          DW GalaxyDescList12A, GalaxyDescList12B, GalaxyDescList12C, GalaxyDescList12D, GalaxyDescList12E
 219+ EF8D 2C EB 32 EB
 219+ EF91 3A EB
 220+ EF93 42 EB 4B EB                          DW GalaxyDescList13A, GalaxyDescList13B, GalaxyDescList13C, GalaxyDescList13D, GalaxyDescList13E
 220+ EF97 52 EB 58 EB
 220+ EF9B 60 EB
 221+ EF9D 69 EB 71 EB                          DW GalaxyDescList14A, GalaxyDescList14B, GalaxyDescList14C, GalaxyDescList14D, GalaxyDescList14E
 221+ EFA1 7C EB 84 EB
 221+ EFA5 8D EB
 222+ EFA7 94 EB 97 EB                          DW GalaxyDescList15A, GalaxyDescList15B, GalaxyDescList15C, GalaxyDescList15D, GalaxyDescList15E
 222+ EFAB A5 EB B2 EB
 222+ EFAF BE EB
 223+ EFB1 C9 EB D8 EB                          DW GalaxyDescList16A, GalaxyDescList16B, GalaxyDescList16C, GalaxyDescList16D, GalaxyDescList16E
 223+ EFB5 E0 EB E6 EB
 223+ EFB9 EF EB
 224+ EFBB FA EB 01 EC                          DW GalaxyDescList17A, GalaxyDescList17B, GalaxyDescList17C, GalaxyDescList17D, GalaxyDescList17E
 224+ EFBF 07 EC 0D EC
 224+ EFC3 1B EC
 225+ EFC5 20 EC 25 EC                          DW GalaxyDescList18A, GalaxyDescList18B, GalaxyDescList18C, GalaxyDescList18D, GalaxyDescList18E
 225+ EFC9 2A EC 2F EC
 225+ EFCD 33 EC
 226+ EFCF 36 EC 3B EC                          DW GalaxyDescList19A, GalaxyDescList19B, GalaxyDescList19C, GalaxyDescList19D, GalaxyDescList19E
 226+ EFD3 49 EC 4D EC
 226+ EFD7 53 EC
 227+ EFD9 58 EC 61 EC                          DW GalaxyDescList20A, GalaxyDescList20B, GalaxyDescList20C, GalaxyDescList20D, GalaxyDescList20E
 227+ EFDD 67 EC 6C EC
 227+ EFE1 79 EC
 228+ EFE3 83 EC 89 EC                          DW GalaxyDescList21A, GalaxyDescList21B, GalaxyDescList21C, GalaxyDescList21D, GalaxyDescList21E
 228+ EFE7 8F EC 97 EC
 228+ EFEB 9F EC
 229+ EFED A8 EC B1 EC                          DW GalaxyDescList22A, GalaxyDescList22B, GalaxyDescList22C, GalaxyDescList22D, GalaxyDescList22E
 229+ EFF1 BC EC CA EC
 229+ EFF5 D3 EC
 230+ EFF7 DA EC EA EC                          DW GalaxyDescList23A, GalaxyDescList23B, GalaxyDescList23C, GalaxyDescList23D, GalaxyDescList23E
 230+ EFFB 02 ED 0D ED
 230+ EFFF 2C ED
 231+ F001 37 ED 3C ED                          DW GalaxyDescList24A, GalaxyDescList24B, GalaxyDescList24C, GalaxyDescList24D, GalaxyDescList24E
 231+ F005 45 ED 4C ED
 231+ F009 51 ED
 232+ F00B 59 ED 5E ED                          DW GalaxyDescList25A, GalaxyDescList25B, GalaxyDescList25C, GalaxyDescList25D, GalaxyDescList25E
 232+ F00F 63 ED 6A ED
 232+ F013 6F ED
 233+ F015 74 ED 7C ED                          DW GalaxyDescList26A, GalaxyDescList26B, GalaxyDescList26C, GalaxyDescList26D, GalaxyDescList26E
 233+ F019 88 ED 92 ED
 233+ F01D 9C ED
 234+ F01F A1 ED A8 ED                          DW GalaxyDescList27A, GalaxyDescList27B, GalaxyDescList27C, GalaxyDescList27D, GalaxyDescList27E
 234+ F023 AF ED B4 ED
 234+ F027 BB ED
 235+ F029 C3 ED D2 ED                          DW GalaxyDescList28A, GalaxyDescList28B, GalaxyDescList28C, GalaxyDescList28D, GalaxyDescList28E
 235+ F02D DE ED E8 ED
 235+ F031 F8 ED
 236+ F033 02 EE 08 EE                          DW GalaxyDescList29A, GalaxyDescList29B, GalaxyDescList29C, GalaxyDescList29D, GalaxyDescList29E
 236+ F037 0E EE 15 EE
 236+ F03B 1A EE
 237+ F03D 21 EE 24 EE                          DW GalaxyDescList30A, GalaxyDescList30B, GalaxyDescList30C, GalaxyDescList30D, GalaxyDescList30E
 237+ F041 2A EE 32 EE
 237+ F045 3D EE
 238+ F047 43 EE 49 EE                          DW GalaxyDescList31A, GalaxyDescList31B, GalaxyDescList31C, GalaxyDescList31D, GalaxyDescList31E
 238+ F04B 4F EE 55 EE
 238+ F04F 5B EE
 239+ F051 60 EE 68 EE                          DW GalaxyDescList32A, GalaxyDescList32B, GalaxyDescList32C, GalaxyDescList32D, GalaxyDescList32E
 239+ F055 6C EE 73 EE
 239+ F059 78 EE
 240+ F05B 7D EE 87 EE                          DW GalaxyDescList33A, GalaxyDescList33B, GalaxyDescList33C, GalaxyDescList33D, GalaxyDescList33E
 240+ F05F 94 EE A7 EE
 240+ F063 B1 EE
 241+ F065 BB EE C0 EE                          DW GalaxyDescList34A, GalaxyDescList34B, GalaxyDescList34C, GalaxyDescList34D, GalaxyDescList34E
 241+ F069 C7 EE CD EE
 241+ F06D D5 EE
 242+ F06F DA EE DE EE                          DW GalaxyDescList35A, GalaxyDescList35B, GalaxyDescList35C, GalaxyDescList35D, GalaxyDescList35E
 242+ F073 E2 EE E9 EE
 242+ F077 F0 EE
 243+ F079 F9 EE 00 EF                          DW GalaxyDescList36A, GalaxyDescList36B, GalaxyDescList36C, GalaxyDescList36D, GalaxyDescList36E
 243+ F07D 08 EF 0F EF
 243+ F081 14 EF
 244+ F083
 245+ F083 4C 61 72 67  GalaxyInhabitantDesc1   DB "Large ",0
 245+ F087 65 20 00
 246+ F08A 46 69 65 72  GalaxyInhabitantDesc1A  DB "Fierce ",0
 246+ F08E 63 65 20 00
 247+ F092 53 6D 61 6C  GalaxyInhabitantDesc1B  DB "Small ", 0
 247+ F096 6C 20 00
 248+ F099 47 72 65 65  GalaxyInhabitantDesc2   DB "Green ",0
 248+ F09D 6E 20 00
 249+ F0A0 52 65 64 20  GalaxyInhabitantDesc2A  DB "Red ",  0
 249+ F0A4 00
 250+ F0A5 59 65 6C 6C  GalaxyInhabitantDesc2B  DB "Yellow ",0
 250+ F0A9 6F 77 20 00
 251+ F0AD 42 6C 75 65  GalaxyInhabitantDesc2C  DB "Blue ",  0
 251+ F0B1 20 00
 252+ F0B3 42 6C 61 63  GalaxyInhabitantDesc2D  DB "Black ",0
 252+ F0B7 6B 20 00
 253+ F0BA 48 61 72 6D  GalaxyInhabitantDesc2E  DB "Harmless ",0
 253+ F0BE 6C 65 73 73
 253+ F0C2 20 00
 254+ F0C4 53 6C 69 6D  GalaxyInhabitantDesc3   DB "Slimy ",0
 254+ F0C8 79 20 00
 255+ F0CB 42 75 67 2D  GalaxyInhabitantDesc3A  DB "Bug-Eyed ", 0
 255+ F0CF 45 79 65 64
 255+ F0D3 20 00
 256+ F0D5 48 6F 72 6E  GalaxyInhabitantDesc3B  DB "Horned ",0
 256+ F0D9 65 64 20 00
 257+ F0DD 42 6F 6E 79  GalaxyInhabitantDesc3C  DB "Bony ",  0
 257+ F0E1 20 00
 258+ F0E3 46 61 74 20  GalaxyInhabitantDesc3D  DB "Fat ",  0
 258+ F0E7 00
 259+ F0E8 46 75 72 72  GalaxyInhabitantDesc3E  DB "Furry ",  0
 259+ F0EC 79 20 00
 260+ F0EF 52 6F 64 65  GalaxyInhabitantDesc4   DB "Rodent",0
 260+ F0F3 6E 74 00
 261+ F0F6 46 72 6F 67  GalaxyInhabitantDesc4A  DB "Frog",      0
 261+ F0FA 00
 262+ F0FB 4C 69 7A 61  GalaxyInhabitantDesc4B  DB "Lizard", 0
 262+ F0FF 72 64 00
 263+ F102 4C 6F 62 73  GalaxyInhabitantDesc4C  DB "Lobster",0
 263+ F106 74 65 72 00
 264+ F10A 42 69 72 64  GalaxyInhabitantDesc4D  DB "Bird",  0
 264+ F10E 00
 265+ F10F 48 75 6D 61  GalaxyInhabitantDesc4E  DB "Humanoid", 0
 265+ F113 6E 6F 69 64
 265+ F117 00
 266+ F118 46 65 6C 69  GalaxyInhabitantDesc4F  DB "Feline", 0
 266+ F11C 6E 65 00
 267+ F11F 49 6E 73 65  GalaxyInhabitantDesc4G  DB "Insect",0
 267+ F123 63 74 00
 268+ F126 48 75 6D 61  GalaxyInhabitantHuman   DB "Human Colonal",0
 268+ F12A 6E 20 43 6F
 268+ F12E 6C 6F 6E 61
 268+ F132 6C 00
 269+ F134
 270+ F134 83 F0 8A F0  GalaxyInhabitantDesc1Ix DW GalaxyInhabitantDesc1,GalaxyInhabitantDesc1A,GalaxyInhabitantDesc1B
 270+ F138 92 F0
 271+ F13A 99 F0 A0 F0  GalaxyInhabitantDesc2Ix DW GalaxyInhabitantDesc2,GalaxyInhabitantDesc2A,GalaxyInhabitantDesc2B,GalaxyInhabitantDesc2C,GalaxyInhabitantDesc2D,GalaxyInhabitantDesc2E
 271+ F13E A5 F0 AD F0
 271+ F142 B3 F0 BA F0
 272+ F146 C4 F0 CB F0  GalaxyInhabitantDesc3Ix DW GalaxyInhabitantDesc3,GalaxyInhabitantDesc3A,GalaxyInhabitantDesc3B,GalaxyInhabitantDesc3C,GalaxyInhabitantDesc3D,GalaxyInhabitantDesc3E
 272+ F14A D5 F0 DD F0
 272+ F14E E3 F0 E8 F0
 273+ F152 EF F0 F6 F0  GalaxyInhabitantDesc4Ix DW GalaxyInhabitantDesc4,GalaxyInhabitantDesc4A,GalaxyInhabitantDesc4B,GalaxyInhabitantDesc4C,GalaxyInhabitantDesc4D,GalaxyInhabitantDesc4E,GalaxyInhabitantDesc4F,GalaxyInhabitantDesc4G
 273+ F156 FB F0 02 F1
 273+ F15A 0A F1 0F F1
 273+ F15E 18 F1 1F F1
 274+ F162 26 F1        GalaxyInhabitantHumanIx DW GalaxyInhabitantHuman
 275+ F164 00 00 00...  GalaxySpecies           DS 32
 276+ F184 00                                   DB 0
 277+ F185 00 00 00...  GalaxyPlanetDescription DS 300
 278+ F2B1 00                                   DB 0
 279+ F2B2 00 00 00...  GalaxyPlanetSource      DS 300,0
 280+ F3DE 3C 31 34 3E  GalaxyPlanetDescStarter DB "<14> is <22>",0
 280+ F3E2 20 69 73 20
 280+ F3E6 3C 32 32 3E
 280+ F3EA 00
 281+ F3EB
 282+ F3EB
 283+ F3EB D3           GalaxyExtendedDescs:    DB 211                                                  ; System 211, Galaxy 0                Teorge = Token  1
 284+ F3EC 96                                   DB 150                                                  ; System 150, Galaxy 0, Mission 1       Xeer = Token  2
 285+ F3ED 24                                   DB 36                                                   ; System  36, Galaxy 0, Mission 1   Reesdice = Token  3
 286+ F3EE 1C                                   DB 28                                                   ; System  28, Galaxy 0, Mission 1      Arexe = Token  4
 287+ F3EF FD                                   DB 253                                                  ; System 253, Galaxy 1, Mission 1     Errius = Token  5
 288+ F3F0 4F                                   DB 79                                                   ; System  79, Galaxy 1, Mission 1     Inbibe = Token  6
 289+ F3F1 35                                   DB 53                                                   ; System  53, Galaxy 1, Mission 1      Ausar = Token  7
 290+ F3F2 76                                   DB 118                                                  ; System 118, Galaxy 1, Mission 1     Usleri = Token  8
 291+ F3F3 64                                   DB 100                                                  ; System 100, Galaxy 2                Arredi = Token  9
 292+ F3F4 20                                   DB 32                                                   ; System  32, Galaxy 1, Mission 1     Bebege = Token 10
 293+ F3F5 44                                   DB 68                                                   ; System  68, Galaxy 1, Mission 1     Cearso = Token 11
 294+ F3F6 A4                                   DB 164                                                  ; System 164, Galaxy 1, Mission 1     Dicela = Token 12
 295+ F3F7 DC                                   DB 220                                                  ; System 220, Galaxy 1, Mission 1     Eringe = Token 13
 296+ F3F8 6A                                   DB 106                                                  ; System 106, Galaxy 1, Mission 1     Gexein = Token 14
 297+ F3F9 10                                   DB 16                                                   ; System  16, Galaxy 1, Mission 1     Isarin = Token 15
 298+ F3FA A2                                   DB 162                                                  ; System 162, Galaxy 1, Mission 1   Letibema = Token 16
 299+ F3FB 03                                   DB 3                                                    ; System   3, Galaxy 1, Mission 1     Maisso = Token 17
 300+ F3FC 6B                                   DB 107                                                  ; System 107, Galaxy 1, Mission 1       Onen = Token 18
 301+ F3FD 1A                                   DB 26                                                   ; System  26, Galaxy 1, Mission 1     Ramaza = Token 19
 302+ F3FE C0                                   DB 192                                                  ; System 192, Galaxy 1, Mission 1     Sosole = Token 20
 303+ F3FF B8                                   DB 184                                                  ; System 184, Galaxy 1, Mission 1     Tivere = Token 21
 304+ F400 05                                   DB 5                                                    ; System   5, Galaxy 1, Mission 1     Veriar = Token 22
 305+ F401 65                                   DB 101                                                  ; System 101, Galaxy 2, Mission 1     Xeveon = Token 23
 306+ F402 C1                                   DB 193                                                  ; System 193, Galaxy 1, Mission 1     Orarra = Token 24
 307+ F403 29                                   DB 41                                                   ; System  41, Galaxy 2                Anreer = Token 25
 308+ F404 07                                   DB 7                                                    ; System   7, Galaxy 0                  Lave = Token 26
 309+ F405 2E                                   DB 46                                                   ; System  46, Galaxy 0              Riedquat = Token 27
 310+ F406
 311+ F406                  INCLUDE "./Data/EquipmentEquates.asm"
# file opened: ././Data/EquipmentEquates.asm
   1++F406
   2++F406              EQ_FUEL                 EQU 0
   3++F406              EQ_MISSILE              EQU 1
   4++F406              EQ_CARGO_BAY            EQU 2
   5++F406              EQ_ECM                  EQU 3
   6++F406              EQ_FUEL_SCOOPS          EQU 4
   7++F406              EQ_ESCAPE_POD           EQU 5
   8++F406              EQ_ENERGY_BOMB          EQU 6
   9++F406              EQ_ENERGY_UNIT          EQU 7
  10++F406              EQ_DOCK_COMP            EQU 8
  11++F406              EQ_GAL_DRIVE            EQU 9
  12++F406              EQ_FRONT_PULSE          EQU 10
  13++F406              EQ_REAR_PULSE           EQU 11
  14++F406              EQ_LEFT_PULSE           EQU 12
  15++F406              EQ_RIGHT_PULSE          EQU 13
  16++F406              EQ_FRONT_BEAM           EQU 14
  17++F406              EQ_REAR_BEAM            EQU 15
  18++F406              EQ_LEFT_BEAM            EQU 16
  19++F406              EQ_RIGHT_BEAM           EQU 17
  20++F406              EQ_FRONT_MINING         EQU 18
  21++F406              EQ_REAR_MINING          EQU 19
  22++F406              EQ_LEFT_MINING          EQU 20
  23++F406              EQ_RIGHT_MINING         EQU 21
  24++F406              EQ_FRONT_MILITARY       EQU 22
  25++F406              EQ_REAR_MILITARY        EQU 23
  26++F406              EQ_LEFT_MILITARY        EQU 24
  27++F406              EQ_RIGHT_MILITARY       EQU 25
  28++F406
  29++F406              EQ_ITEM_COUNT           EQU EQ_RIGHT_MILITARY+1
  30++F406
# file closed: ././Data/EquipmentEquates.asm
 312+ F406
 313+ F406              EquipNameTableRowLen    EQU 8
 314+ F406 0D A7 00 00  ShipEquipNameTable      DW  WordFuel,       0,              0,          0
 314+ F40A 00 00 00 00
 315+ F40E C2 A9 00 00                          DW  WordMissile,    0,              0,          0
 315+ F412 00 00 00 00
 316+ F416 F2 A6 03 A7                          DW  WordLarge,      WordCargo,      WordBay,    0
 316+ F41A 09 A7 00 00
 317+ F41E 19 A7 20 A7                          DW  WordECM,        WordSystem,     0,          0
 317+ F422 00 00 00 00
 318+ F426 0D A7 12 A7                          DW  WordFuel,       WordScoops,     0,          0
 318+ F42A 00 00 00 00
 319+ F42E F8 A6 FF A6                          DW  WordEscape,     WordPod,        0,          0
 319+ F432 00 00 00 00
 320+ F436 27 A7 2E A7                          DW  WordEnergy,     WordBomb,       0,          0
 320+ F43A 00 00 00 00
 321+ F43E 8C A7 27 A7                          DW  WordExtra,      WordEnergy,     WordUnit,   0
 321+ F442 5A A7 00 00
 322+ F446 66 A7 6E A7                          DW  WordDocking,    WordComputers,  0,          0
 322+ F44A 00 00 00 00
 323+ F44E 83 A7 CA A9                          DW  WordGalactic,   WordHyperdrive, 0,          0
 323+ F452 00 00 00 00
 324+ F456 DC A6 39 A7                          DW  WordFront,      WordPulse,      WordLaser,  0
 324+ F45A 33 A7 00 00
 325+ F45E ED A6 39 A7                          DW  WordRear,       WordPulse,      WordLaser,  0
 325+ F462 33 A7 00 00
 326+ F466 E8 A6 39 A7                          DW  WordLeft,       WordPulse,      WordLaser,  0
 326+ F46A 33 A7 00 00
 327+ F46E E2 A6 39 A7                          DW  WordRight,      WordPulse,      WordLaser,  0
 327+ F472 33 A7 00 00
 328+ F476 DC A6 3F A7                          DW  WordFront,      WordBeam,       WordLaser,  0
 328+ F47A 33 A7 00 00
 329+ F47E ED A6 3F A7                          DW  WordRear,       WordBeam,       WordLaser,  0
 329+ F482 33 A7 00 00
 330+ F486 E8 A6 3F A7                          DW  WordLeft,       WordBeam,       WordLaser,  0
 330+ F48A 33 A7 00 00
 331+ F48E E2 A6 3F A7                          DW  WordRight,      WordBeam,       WordLaser,  0
 331+ F492 33 A7 00 00
 332+ F496 DC A6 4C A7                          DW  WordFront,      WordMining,     WordLaser,  0
 332+ F49A 33 A7 00 00
 333+ F49E ED A6 4C A7                          DW  WordRear,       WordMining,     WordLaser,  0
 333+ F4A2 33 A7 00 00
 334+ F4A6 E8 A6 4C A7                          DW  WordLeft,       WordMining,     WordLaser,  0
 334+ F4AA 33 A7 00 00
 335+ F4AE E2 A6 4C A7                          DW  WordRight,      WordMining,     WordLaser,  0
 335+ F4B2 33 A7 00 00
 336+ F4B6 DC A6 D5 A9                          DW  WordFront,      WordMilitary,   WordLaser,  0
 336+ F4BA 33 A7 00 00
 337+ F4BE ED A6 D5 A9                          DW  WordRear,       WordMilitary,   WordLaser,  0
 337+ F4C2 33 A7 00 00
 338+ F4C6 E8 A6 D5 A9                          DW  WordLeft,       WordMilitary,   WordLaser,  0
 338+ F4CA 33 A7 00 00
 339+ F4CE E2 A6 D5 A9                          DW  WordRight,      WordMilitary,   WordLaser,  0
 339+ F4D2 33 A7 00 00
 340+ F4D6
 341+ F4D6              ;Each row is 7 bytes
 342+ F4D6              ;                                                               12345  6  789012345678901
 343+ F4D6              ;	canbuy;
 344+ F4D6              ;	y;
 345+ F4D6              ;	show;
 346+ F4D6              ;	level;
 347+ F4D6              ;	price 2 bytes;
 348+ F4D6              ;	type;
 349+ F4D6              ;ShipFrontWeapons        DB EQ_FRONT_PULSE,  EQ_FRONT_PULSE,     EQ_FRONT_MINING,    EQ_FRONT_MINING
 350+ F4D6              ;ShipRearWeapons         DB EQ_REAR_PULSE,   EQ_REAR_PULSE,      EQ_REAR_MINING,     EQ_REAR_MINING
 351+ F4D6              ;ShipLeftWeapons         DB EQ_LEFT_PULSE,   EQ_LEFT_PULSE,      EQ_LEFT_MINING,     EQ_LEFT_MINING
 352+ F4D6              ;ShipRightWeapons        DB EQ_RIGHT_PULSE,  EQ_RIGHT_PULSE,     EQ_RIGHT_MINING,    EQ_RIGHT_MINING
 353+ F4D6              ;                           c  y  s  t
 354+ F4D6              ;                           a  p  h  e                                            fi     P     Vi
 355+ F4D6              ;                           n  o  o  c                                            tt     o     ew
 356+ F4D6              ;                           B  s  w  h  price                  type               ed     s
 357+ F4D6 00 00 01 01  ShipEquipmentList       DB  0, 0, 1, 1, low     2, high     2, EQ_FUEL          , 0     ,$FF , 0  , 0  , 0  , 0  , 0  , 0 , 0
 357+ F4DA 02 00 00 00
 357+ F4DE FF 00 00 00
 357+ F4E2 00 00 00 00
 358+ F4E6 00 01 01 01                          DB  0, 1, 1, 1, low   300, high   300, EQ_MISSILE       , 0     ,$FF , 0  , 0  , 0  , 0  , 0  , 0 , 0
 358+ F4EA 2C 01 01 00
 358+ F4EE FF 00 00 00
 358+ F4F2 00 00 00 00
 359+ F4F6 00 02 01 01                          DB  0, 2, 1, 1, low  4000, high  4000, EQ_CARGO_BAY     , 0     ,$FF , 0  , 0  , 0  , 0  , 0  , 0 , 0
 359+ F4FA A0 0F 02 00
 359+ F4FE FF 00 00 00
 359+ F502 00 00 00 00
 360+ F506 00 03 01 02                          DB  0, 3, 1, 2, low  6000, high  6000, EQ_ECM           , 0     ,$FF , 0  , 0  , 0  , 0  , 0  , 0 , 0
 360+ F50A 70 17 03 00
 360+ F50E FF 00 00 00
 360+ F512 00 00 00 00
 361+ F516 00 04 01 05                          DB  0, 4, 1, 5, low  5250, high  5250, EQ_FUEL_SCOOPS   , 0     ,$FF , 0  , 0  , 0  , 0  , 0  , 0 , 0
 361+ F51A 82 14 04 00
 361+ F51E FF 00 00 00
 361+ F522 00 00 00 00
 362+ F526 00 05 01 06                          DB  0, 5, 1, 6, low 10000, high 10000, EQ_ESCAPE_POD    , 0     ,$FF , 0  , 0  , 0  , 0  , 0  , 0 , 0
 362+ F52A 10 27 05 00
 362+ F52E FF 00 00 00
 362+ F532 00 00 00 00
 363+ F536 00 06 01 07                          DB  0, 6, 1, 7, low  9000, high  9000, EQ_ENERGY_BOMB   , 0     ,$FF , 0  , 0  , 0  , 0  , 0  , 0 , 0
 363+ F53A 28 23 06 00
 363+ F53E FF 00 00 00
 363+ F542 00 00 00 00
 364+ F546 00 07 01 08                          DB  0, 7, 1, 8, low 15000, high 15000, EQ_ENERGY_UNIT   , 0     ,$FF , 0  , 0  , 0  , 0  , 0  , 0 , 0
 364+ F54A 98 3A 07 00
 364+ F54E FF 00 00 00
 364+ F552 00 00 00 00
 365+ F556 00 08 01 09                          DB  0, 8, 1, 9, low 15000, high 15000, EQ_DOCK_COMP     , 0     ,$FF , 0  , 0  , 0  , 0  , 0  , 0 , 0
 365+ F55A 98 3A 08 00
 365+ F55E FF 00 00 00
 365+ F562 00 00 00 00
 366+ F566 00 09 01 0A                          DB  0, 9, 1,10, low 50000, high 50000, EQ_GAL_DRIVE     , 0     ,$FF , 0  , 0  , 0  , 0  , 0  , 0 , 0
 366+ F56A 50 C3 09 00
 366+ F56E FF 00 00 00
 366+ F572 00 00 00 00
 367+ F576 00 0A 01 03                          DB  0,10, 1, 3, low  4000, high  4000, EQ_FRONT_PULSE   , 0     ,$00 , 0  , 0  , 0  , 0  , 0  , 0 , 0
 367+ F57A A0 0F 0A 00
 367+ F57E 00 00 00 00
 367+ F582 00 00 00 00
 368+ F586 00 0B 01 03                          DB  0,11, 1, 3, low  4000, high  4000, EQ_REAR_PULSE    , 0     ,$01 , 1  , 0  , 0  , 0  , 0  , 0 , 0
 368+ F58A A0 0F 0B 00
 368+ F58E 01 01 00 00
 368+ F592 00 00 00 00
 369+ F596 00 0C 01 03                          DB  0,12, 1, 3, low  4000, high  4000, EQ_LEFT_PULSE    , 0     ,$02 , 2  , 0  , 0  , 0  , 0  , 0 , 0
 369+ F59A A0 0F 0C 00
 369+ F59E 02 02 00 00
 369+ F5A2 00 00 00 00
 370+ F5A6 00 0D 01 03                          DB  0,13, 1, 3, low  4000, high  4000, EQ_RIGHT_PULSE   , 0     ,$03 , 3  , 0  , 0  , 0  , 0  , 0 , 0
 370+ F5AA A0 0F 0D 00
 370+ F5AE 03 03 00 00
 370+ F5B2 00 00 00 00
 371+ F5B6 00 0E 00 04                          DB  0,14, 0, 4, low 10000, high 10000, EQ_FRONT_BEAM    , 0     ,$00 , 0  , 0  , 0  , 0  , 0  , 0 , 0
 371+ F5BA 10 27 0E 00
 371+ F5BE 00 00 00 00
 371+ F5C2 00 00 00 00
 372+ F5C6 00 0F 00 04                          DB  0,15, 0, 4, low 10000, high 10000, EQ_REAR_BEAM     , 0     ,$01 , 1  , 0  , 0  , 0  , 0  , 0 , 0
 372+ F5CA 10 27 0F 00
 372+ F5CE 01 01 00 00
 372+ F5D2 00 00 00 00
 373+ F5D6 00 10 00 04                          DB  0,16, 0, 4, low 10000, high 10000, EQ_LEFT_BEAM     , 0     ,$02 , 2  , 0  , 0  , 0  , 0  , 0 , 0
 373+ F5DA 10 27 10 00
 373+ F5DE 02 02 00 00
 373+ F5E2 00 00 00 00
 374+ F5E6 00 11 00 04                          DB  0,17, 0, 4, low 10000, high 10000, EQ_RIGHT_BEAM    , 0     ,$03 , 3  , 0  , 0  , 0  , 0  , 0 , 0
 374+ F5EA 10 27 11 00
 374+ F5EE 03 03 00 00
 374+ F5F2 00 00 00 00
 375+ F5F6 00 12 00 0A                          DB  0,18, 0,10, low  8000, high  8000, EQ_FRONT_MINING  , 0     ,$00 , 0  , 0  , 0  , 0  , 0  , 0 , 0
 375+ F5FA 40 1F 12 00
 375+ F5FE 00 00 00 00
 375+ F602 00 00 00 00
 376+ F606 00 13 00 0A                          DB  0,19, 0,10, low  8000, high  8000, EQ_REAR_MINING   , 0     ,$01 , 1  , 0  , 0  , 0  , 0  , 0 , 0
 376+ F60A 40 1F 13 00
 376+ F60E 01 01 00 00
 376+ F612 00 00 00 00
 377+ F616 00 14 00 0A                          DB  0,20, 0,10, low  8000, high  8000, EQ_LEFT_MINING   , 0     ,$02 , 2  , 0  , 0  , 0  , 0  , 0 , 0
 377+ F61A 40 1F 14 00
 377+ F61E 02 02 00 00
 377+ F622 00 00 00 00
 378+ F626 00 15 00 0A                          DB  0,21, 0,10, low  8000, high  8000, EQ_RIGHT_MINING  , 0     ,$03 , 3  , 0  , 0  , 0  , 0  , 0 , 0
 378+ F62A 40 1F 15 00
 378+ F62E 03 03 00 00
 378+ F632 00 00 00 00
 379+ F636 00 16 00 0A                          DB  0,22, 0,10, low 60000, high 60000, EQ_FRONT_MILITARY, 0     ,$00 , 0  , 0  , 0  , 0  , 0  , 0 , 0
 379+ F63A 60 EA 16 00
 379+ F63E 00 00 00 00
 379+ F642 00 00 00 00
 380+ F646 00 17 00 0A                          DB  0,23, 0,10, low 60000, high 60000, EQ_REAR_MILITARY , 0     ,$01 , 1  , 0  , 0  , 0  , 0  , 0 , 0
 380+ F64A 60 EA 17 00
 380+ F64E 01 01 00 00
 380+ F652 00 00 00 00
 381+ F656 00 18 00 0A                          DB  0,24, 0,10, low 60000, high 60000, EQ_LEFT_MILITARY , 0     ,$02 , 2  , 0  , 0  , 0  , 0  , 0 , 0
 381+ F65A 60 EA 18 00
 381+ F65E 02 02 00 00
 381+ F662 00 00 00 00
 382+ F666 00 19 00 0A                          DB  0,25, 0,10, low 60000, high 60000, EQ_RIGHT_MILITARY, 0     ,$03 , 3  , 0  , 0  , 0  , 0  , 0 , 0
 382+ F66A 60 EA 19 00
 382+ F66E 03 03 00 00
 382+ F672 00 00 00 00
 383+ F676              ShipEquipTableRowLen    EQU 16
 384+ F676              ShipEquipTableSize      EQU ($-ShipEquipmentList)/ShipEquipTableRowLen
 385+ F676
 386+ F676              ;------------------------------------------------------------------------------------------------------------------------------------
 387+ F676 2B           GalaxyRandSeed			DB	43	            ; Just some start values
 388+ F677 20           GalaxyRandSeed1			DB	32	            ; Just some start values
 389+ F678 0C           GalaxyRandSeed2			DB	12	            ; Just some start values
 390+ F679 42           GalaxyRandSeed3			DB	66	            ; Just some start values
 391+ F67A              GalaxySeedRandom:
 392+ F67A              ;------------------------------------------------------------------------------------------------------------------------------------
 393+ F67A CD EA A3     GetDigramGalaxySeed:    call	copy_galaxy_to_working
 394+ F67D 18 03                                jr		GetDigramWorkingSeed
 395+ F67F CD 02 A4     GetDigramSystemSeed:    call	copy_system_to_working
 396+ F682 11 00 AC     GetDigramWorkingSeed:   ld		de,name_expanded    ; ">GetDigram a = digram seed"
 397+ F685 06 03                                ld		b,3
 398+ F687 3A D5 9E                             ld		a,(WorkingSeeds)
 399+ F68A E6 40                                and		$40
 400+ F68C 28 03                                jr		z,.SmallSizeName
 401+ F68E CD 21 AC     .LargeSizeName:         call	NamingLoop
 402+ F691 CD 21 AC     .SmallSizeName:         call	NamingLoop
 403+ F694 CD 21 AC                             call	NamingLoop
 404+ F697 CD 21 AC                             call	NamingLoop
 405+ F69A EB           .DoneName:              ex		de,hl
 406+ F69B 36 00                                ld		(hl),0
 407+ F69D EB                                   ex		de,hl
 408+ F69E C9                                   ret
 409+ F69F
 410+ F69F 11 76 F6     GalaxySetSeedFromHL:    ld      de,GalaxyRandSeed
 411+ F6A2              ; Uses registers a,b and hl
 412+ F6A2 B7           GalaxyDoRandom:         or      a                                               ; in 6502 this is called after a bcc instruction to will always be clear (see .detok2 and .dt6)
 413+ F6A3 3A 76 F6                             ld      a,(GalaxyRandSeed)
 414+ F6A6 CB 17        .Seed0Rolled:           rl      a                                               ; r0 << 1
 415+ F6A8 47                                   ld      b,a                                             ; b = reg x in 6502 so x = r0 << 1
 416+ F6A9 21 78 F6     .AddSeed2               ld      hl,GalaxyRandSeed2                              ;
 417+ F6AC 8E                                   adc     a,(hl)                                          ; a = r0 << 1 + r2
 418+ F6AD 32 76 F6     .SetRandSeed0:          ld		(GalaxyRandSeed),a					            ; set r0' = (r0 << 1) +  r2 + (r0 bit 7)
 419+ F6B0 78                                   ld      a,b
 420+ F6B1 32 78 F6     .SetRandSeed2:          ld      (GalaxyRandSeed2),a                             ; set r2' =  r0 << 1
 421+ F6B4 3A 77 F6     .GetRandSeed1:          ld      a,(GalaxyRandSeed1)
 422+ F6B7 47                                   ld      b,a                                             ; b = r1
 423+ F6B8 21 79 F6                             ld      hl,GalaxyRandSeed3
 424+ F6BB 8E                                   adc     a,(hl)                                          ; Adc from before may have set carry flag or may not, will be set if r0 << 1 + r2 + carry > 256
 425+ F6BC 32 77 F6                             ld      (GalaxyRandSeed1),a                             ; set r1' = r1 + r3 + carry
 426+ F6BF 4F                                   ld      c,a
 427+ F6C0 78                                   ld      a,b
 428+ F6C1 32 79 F6                             ld      (GalaxyRandSeed3),a                             ; set r3 = r1
 429+ F6C4 79                                   ld      a,c
 430+ F6C5 C9                                   ret
 431+ F6C6
 432+ F6C6              ;------------------------------------------------------------------------------------------------------------------------------------
 433+ F6C6 ED 31        galaxy_cpy_str_a_at_hl_to_de:add     hl,a
 434+ F6C8 ED 31                                add     hl,a
 435+ F6CA 7E                                   ld      a,(hl)              ;  Fetch low byte
 436+ F6CB 47                                   ld      b,a
 437+ F6CC 23                                   inc     hl
 438+ F6CD 7E                                   ld      a,(hl)              ;  Fetch high byte
 439+ F6CE 68                                   ld      l,b
 440+ F6CF 67                                   ld      h,a
 441+ F6D0 7E           GalaxyCopyLoop:         ld      a,(hl)
 442+ F6D1 FE 00                                cp      0
 443+ F6D3 28 05                                jr      z,.CopyDone
 444+ F6D5 12                                   ld      (de),a
 445+ F6D6 23                                   inc     hl
 446+ F6D7 13                                   inc     de
 447+ F6D8 18 F6                                jr      GalaxyCopyLoop
 448+ F6DA 12           .CopyDone:              ld      (de),a
 449+ F6DB C9                                   ret
 450+ F6DC              ;------------------------------------------------------------------------------------------------------------------------------------
 451+ F6DC 11 64 F1     galaxy_get_species:     ld      de,GalaxySpecies
 452+ F6DF 3E 28                                ld      a,"("
 453+ F6E1 12                                   ld      (de),a
 454+ F6E2 13                                   inc     de
 455+ F6E3 3A FC E8                             ld      a,(GalaxyWorkingSeed+4)
 456+ F6E6 CB 7F                                bit     7,a
 457+ F6E8 20 0A                                jr      nz,.NonHuman
 458+ F6EA 21 62 F1                             ld      hl,GalaxyInhabitantHumanIx
 459+ F6ED AF                                   xor     a
 460+ F6EE CD C6 F6                             call    galaxy_cpy_str_a_at_hl_to_de
 461+ F6F1 C3 4F F7                             jp      .galaxy_species_exit
 462+ F6F4 3A FD E8     .NonHuman:              ld      a,(GalaxyWorkingSeed+5)
 463+ F6F7 CB 3F                                srl     a
 464+ F6F9 CB 3F                                srl     a
 465+ F6FB E6 07                                and     $07
 466+ F6FD FE 03                                cp      3
 467+ F6FF 30 0A                                jr      nc,.NotDesc1
 468+ F701 21 34 F1                             ld      hl,GalaxyInhabitantDesc1Ix
 469+ F704 CD C6 F6                             call    galaxy_cpy_str_a_at_hl_to_de
 470+ F707 3E 20                                ld      a," "
 471+ F709 12                                   ld      (de),a
 472+ F70A 13                                   inc     de
 473+ F70B 3A FD E8     .NotDesc1:              ld      a,(GalaxyWorkingSeed+5)
 474+ F70E CB 3F                                srl     a
 475+ F710 CB 3F                                srl     a
 476+ F712 CB 3F                                srl     a
 477+ F714 CB 3F                                srl     a
 478+ F716 CB 3F                                srl     a
 479+ F718 FE 06                                cp      6
 480+ F71A 30 0A                                jr      nc,.NotDesc2
 481+ F71C 21 3A F1                             ld      hl,GalaxyInhabitantDesc2Ix
 482+ F71F CD C6 F6                             call    galaxy_cpy_str_a_at_hl_to_de
 483+ F722 3E 20                                ld      a," "
 484+ F724 12                                   ld      (de),a
 485+ F725 13                                   inc     de
 486+ F726 3A F9 E8     .NotDesc2:              ld      a,(GalaxyWorkingSeed+1)
 487+ F729 47                                   ld      b,a
 488+ F72A 3A FB E8                             ld      a,(GalaxyWorkingSeed+3)
 489+ F72D A8                                   xor     b
 490+ F72E E6 07                                and     $07
 491+ F730 F5                                   push    af
 492+ F731 FE 06                                cp      6
 493+ F733 30 0A                                jr      nc,.NotDesc3
 494+ F735 21 46 F1                             ld      hl,GalaxyInhabitantDesc3Ix
 495+ F738 CD C6 F6                             call    galaxy_cpy_str_a_at_hl_to_de
 496+ F73B 3E 20                                ld      a," "
 497+ F73D 12                                   ld      (de),a
 498+ F73E 13                                   inc     de
 499+ F73F F1           .NotDesc3:              pop     af
 500+ F740 47                                   ld      b,a
 501+ F741 3A FD E8                             ld      a,(GalaxyWorkingSeed+5)
 502+ F744 E6 03                                and     $03
 503+ F746 80                                   add     a,b
 504+ F747 E6 07                                and     $07
 505+ F749 21 52 F1                             ld      hl,GalaxyInhabitantDesc4Ix
 506+ F74C CD C6 F6                             call    galaxy_cpy_str_a_at_hl_to_de
 507+ F74F 3E 73        .galaxy_species_exit:   ld      a,"s"
 508+ F751 12                                   ld      (de),a
 509+ F752 13                                   inc     de
 510+ F753 3E 29                                ld      a,")"
 511+ F755 12                                   ld      (de),a
 512+ F756 13                                   inc     de
 513+ F757 AF                                   xor     a
 514+ F758 12                                   ld      (de),a
 515+ F759 C9                                   ret
 516+ F75A
 517+ F75A
 518+ F75A              ; To copy seed, loops from 3 to 0
 519+ F75A              ; copy seed X + 2 to target X
 520+ F75A              ; x = x -1
 521+ F75A
 522+ F75A              ; For lave we shoudl have "Lave is most famous for its vast rain forests and the Lavian tree grub"
 523+ F75A
 524+ F75A              GalaxyCapitaliseString: ; ">CapitaliseString hl = address"
 525+ F75A 23                                   inc		hl
 526+ F75B 7E                                   ld		a,(hl)
 527+ F75C FE 00                                cp		0
 528+ F75E C8                                   ret		z
 529+ F75F FE 5B                                cp		'Z'+1
 530+ F761 30 F7                                jr		nc,GalaxyCapitaliseString
 531+ F763 FE 41                                cp		'A'
 532+ F765 38 F3                                jr		c,GalaxyCapitaliseString
 533+ F767 C6 20        .LowerCase:             add		a,'a'-'A'
 534+ F769 77                                   ld		(hl),a
 535+ F76A 18 EE                                jr		GalaxyCapitaliseString
 536+ F76C
 537+ F76C
 538+ F76C              GalaxyGoatSoup:         ;ld      (GalaxyTargetSystem),bc                         ; Set the galaxy target variable
 539+ F76C                                      ;call    galaxy_system_under_cursor                      ; and set the galaxyworkingseed based on cursor
 540+ F76C                                      ;cp      $FF
 541+ F76C                                      ;jr      z,.NoSystemFound
 542+ F76C 3A D7 9E     .SeedGalaxy             ld      a,(WorkingSeeds+2)                              ;
 543+ F76F 32 76 F6                             ld      (GalaxyRandSeed),a                              ; r0 = Seed C
 544+ F772 3A D8 9E                             ld      a,(WorkingSeeds+3)                              ;
 545+ F775 32 77 F6                             ld      (GalaxyRandSeed1),a                             ; r1 = Seeed D
 546+ F778 3A D9 9E                             ld      a,(WorkingSeeds+4)                              ;
 547+ F77B 32 78 F6                             ld      (GalaxyRandSeed2),a                             ; r2 = Seed E
 548+ F77E 3A DA 9E                             ld      a,(WorkingSeeds+5)                              ;
 549+ F781 32 79 F6                             ld      (GalaxyRandSeed3),a                             ; r3 = Seed F
 550+ F784 C9                                   ret
 551+ F785              ; For later......
 552+ F785 3E 05        .MarkExtendedDesc:      ld      a,5                                             ;  ("{lower case}{justify}{single cap}[86-90] IS [140-144].{cr}{left align}"
 553+ F787 F5           .GalaxyExpandDesc:      push    af
 554+ F788 47                                   ld      b,a                                             ; b = 6502 X reg
 555+ F789 C5                                   push    bc                                              ; save Y reg
 556+ F78A
 557+ F78A              ;------------------------------------------------------------------------------------------------------------------------------------
 558+ F78A              ; We enter here with BC = the Y and X Coordinates of the system to select in this galaxy
 559+ F78A              ; This is based on the docked BBC PDesc Pink Volcanoes version ratehr tha goat soup
 560+ F78A ED 43 5B E8  GalaxyPinkVolcano:      ld      (GalaxyTargetSystem),bc                         ; Set the galaxy target variable
 561+ F78E CD 64 FC                             call    galaxy_system_under_cursor                      ; and set the galaxyworkingseed based on cursor
 562+ F791                                      ;cp      $FF
 563+ F791                                      ;jr      z,.NoSystemFound
 564+ F791              .SpecialDescs:          ; this is not implemented yet to read GalaxyExtendedDescs look at .PDL1
 565+ F791
 566+ F791
 567+ F791
 568+ F791              ;.NoSytemFound:          Print the "Unable to identify a system at present position"
 569+ F791
 570+ F791 00 00 00...  GalaxyNameCopy          DS      30
 571+ F7AF
 572+ F7AF 1E 00        ExpandAtHLToE:          ld      e,0
 573+ F7B1 7E           .ExpandTokenLoop:       ld      a,(hl)
 574+ F7B2 FE 3E                                cp      ">"
 575+ F7B4 C8                                   ret     z
 576+ F7B5 23                                   inc     hl
 577+ F7B6 16 0A                                ld      d,10
 578+ F7B8 ED 30                                mul
 579+ F7BA D6 30                                sub     "0"
 580+ F7BC 83                                   add     a,e
 581+ F7BD 5F                                   ld      e,a
 582+ F7BE 18 F1                                jr      .ExpandTokenLoop
 583+ F7C0
 584+ F7C0 E5           SelectTokenToHL:        push    hl                                          ;+1
 585+ F7C1 C5                                   push    bc                                          ;+2
 586+ F7C2 CD A2 F6                             call    GalaxyDoRandom
 587+ F7C5 C1                                   pop     bc                                          ;+1
 588+ F7C6 E1                                   pop     hl                                          ;+0
 589+ F7C7 16 00        .CalcOptionAToD:        ld      d,0
 590+ F7C9 FE 33                                cp      $33
 591+ F7CB DA CF F7                             jp      c,.Check66
 592+ F7CE 14           .IsGTE33:               inc     d
 593+ F7CF FE 66        .Check66:               cp      $66
 594+ F7D1 DA D5 F7                             jp      c,.Check99
 595+ F7D4 14           .IsGTE66:               inc     d
 596+ F7D5 FE 99        .Check99:               cp      $99
 597+ F7D7 DA DB F7     .IsGTE99:               jp      c,.CheckCC
 598+ F7DA 14                                   inc     d
 599+ F7DB FE CC        .CheckCC:               cp      $CC
 600+ F7DD 38 01                                jr      c,.TokenIdToAddress
 601+ F7DF 14           .ItGETCC:               inc     d
 602+ F7E0 21 1B EF     .TokenIdToAddress:      ld      hl,GalaxyDescList
 603+ F7E3 7B                                   ld      a,e
 604+ F7E4 CB 27                                sla     a                                               ; x 2
 605+ F7E6 ED 31                                add     hl,a                                            ; hl + a * 2
 606+ F7E8 ED 31                                add     hl,a                                            ; hl + a * 4
 607+ F7EA ED 31                                add     hl,a                                            ; hl + a * 6
 608+ F7EC ED 31                                add     hl,a                                            ; hl + a * 8
 609+ F7EE ED 31                                add     hl,a                                            ; hl + a * 10
 610+ F7F0 7A                                   ld      a,d
 611+ F7F1 ED 31                                add     hl,a
 612+ F7F3 ED 31                                add     hl,a                                            ; hl = desc array [e][d]
 613+ F7F5 7E           .LookUpDataFromTable:   ld      a,(hl)
 614+ F7F6 DD 6F                                ld      ixl,a
 615+ F7F8 23                                   inc     hl
 616+ F7F9 7E                                   ld      a,(hl)
 617+ F7FA DD 67                                ld      ixh,a                                           ; ix = address at (hl)
 618+ F7FC DD E5                                push    ix                                              ;+2
 619+ F7FE E1                                   pop     hl                                              ;+1
 620+ F7FF C9                                   ret
 621+ F800              ;------------------------------------------------------------------------------------------------------------------------------------
 622+ F800 E5           ProcessHSymbol:         push    hl                                              ;+1
 623+ F801 D5                                   push    de                                              ;+2
 624+ F802 C5                                   push    bc                                              ;+3
 625+ F803 21 91 F7     .CopyInNameH:           ld      hl, GalaxyNameCopy
 626+ F806 FD 54                                ld      d,iyh
 627+ F808 FD 5D                                ld      e,iyl
 628+ F80A CD D0 F6                             call    GalaxyCopyLoop
 629+ F80D FD 62                                ld      iyh,d
 630+ F80F FD 6B                                ld      iyl,e
 631+ F811 C1                                   pop     bc                                              ;+2
 632+ F812 D1                                   pop     de                                              ;+1
 633+ F813 E1                                   pop     hl
 634+ F814 C9                                   ret
 635+ F815              ;------------------------------------------------------------------------------------------------------------------------------------
 636+ F815 E5           ProcessISymbol:         push    hl                                              ;+1
 637+ F816 D5                                   push    de                                              ;+2
 638+ F817 C5                                   push    bc                                              ;+3
 639+ F818 21 91 F7     .CopyInNameI:           ld      hl, GalaxyNameCopy
 640+ F81B FD 54                                ld      d,iyh
 641+ F81D FD 5D                                ld      e,iyl
 642+ F81F CD D0 F6                             call    GalaxyCopyLoop
 643+ F822 FD 62                                ld      iyh,d
 644+ F824 FD 6B                                ld      iyl,e
 645+ F826 3E 69                                ld      a,"i"
 646+ F828 EB                                   ex      de,hl
 647+ F829 77                                   ld      (hl),a
 648+ F82A 23                                   inc     hl
 649+ F82B 3E 61                                ld      a,"a"
 650+ F82D 77                                   ld      (hl),a
 651+ F82E 23                                   inc     hl
 652+ F82F 3E 6E                                ld      a,"n"
 653+ F831 77                                   ld      (hl),a
 654+ F832 23                                   inc     hl
 655+ F833 E5                                   push    hl
 656+ F834 FD E1                                pop     iy
 657+ F836 C1                                   pop     bc                                              ;+2
 658+ F837 D1                                   pop     de                                              ;+1
 659+ F838 E1                                   pop     hl                                              ;+0
 660+ F839 C9                                   ret
 661+ F83A              ;------------------------------------------------------------------------------------------------------------------------------------
 662+ F83A E5           ProcessRSymbol:         push    hl                                              ;+1
 663+ F83B D5                                   push    de                                              ;+2
 664+ F83C CD A2 F6                             call    GalaxyDoRandom ;(Correct one or do we use teh clear carry version?)
 665+ F83F E6 03                                and     $03
 666+ F841 47                                   ld      b,a
 667+ F842 04                                   inc     b
 668+ F843 AF                                   xor     a
 669+ F844 4F                                   ld      c,a
 670+ F845 C5           .RLoop:                 push    bc                                              ;+3
 671+ F846 CD A2 F6                             call    GalaxyDoRandom
 672+ F849 C1                                   pop     bc                                              ;+2
 673+ F84A E6 3E                                and     $3E
 674+ F84C 21 A0 E8                             ld      hl,GalaxyName_digrams
 675+ F84F ED 31                                add     hl,a
 676+ F851 7E                                   ld      a,(hl)
 677+ F852 FE 41                                cp      "A"
 678+ F854 38 01                                jr      c,.NotLowercase
 679+ F856 81                                   add     a,c
 680+ F857 FD 77 00     .NotLowercase:          ld      (iy+0),a
 681+ F85A 23                                   inc     hl
 682+ F85B FD 23                                inc     iy
 683+ F85D 0E 20                                ld      c,$20               ; fixed force to lower case
 684+ F85F 7E                                   ld      a,(hl)
 685+ F860 FE 41                                cp      "A"
 686+ F862 38 01                                jr      c,.NotLowercase2
 687+ F864 81                                   add     a,c
 688+ F865 FD 77 00     .NotLowercase2:         ld      (iy+0),a
 689+ F868 FD 23                                inc     iy
 690+ F86A 10 D9                                djnz    .RLoop
 691+ F86C D1                                   pop     de                                              ;+1
 692+ F86D E1                                   pop     hl                                              ;+0
 693+ F86E C9                                   ret
 694+ F86F              ;------------------------------------------------------------------------------------------------------------------------------------
 695+ F86F ED 43 5B E8  GalaxyGenerateDesc:     ld      (GalaxyTargetSystem),bc                         ; Set the galaxy target variable
 696+ F873 CD 64 FC                             call    galaxy_system_under_cursor
 697+ F876 CD BF FA     .CopySystemName:        call    galaxy_digram_seed                              ; make a local copy of system name
 698+ F879 21 7F E8                             ld      hl,GalaxyExpandedName
 699+ F87C 11 91 F7                             ld      de,GalaxyNameCopy
 700+ F87F CD D0 F6                             call    GalaxyCopyLoop
 701+ F882 21 91 F7     .CapitaliseName:        ld      hl,GalaxyNameCopy
 702+ F885 CD 5A F7                             call    GalaxyCapitaliseString
 703+ F888                                      ; we will also capitalise the local copy here later
 704+ F888 21 DE F3     .InitDescription:       ld      hl,GalaxyPlanetDescStarter                      ; Initialise galaxy description to  <14> is <22>
 705+ F88B 11 B2 F2                             ld      de,GalaxyPlanetSource
 706+ F88E CD D0 F6                             call    GalaxyCopyLoop
 707+ F891 AF           .ClearOutDescription:   xor     a
 708+ F892 21 85 F1                             ld      hl,GalaxyPlanetDescription
 709+ F895 77                                   ld      (hl),a
 710+ F896 11 86 F1                             ld      de,GalaxyPlanetDescription+1
 711+ F899 01 2C 01                             ld      bc,300                                          ; copy previous byte to current for 300 bytes (as we have DS 300 + 1)
 712+ F89C ED B0                                ldir                                                    ; zero it out, don't need this at the end but simplifies debugging
 713+ F89E CD 6C F7     .CopySeedToRandom:      call    GalaxyGoatSoup
 714+ F8A1 21 B2 F2                             ld      hl,GalaxyPlanetSource
 715+ F8A4 FD 21 85 F1                          ld      iy,GalaxyPlanetDescription
 716+ F8A8              ; At this point we are now prepped ready to expand the string to a full description
 717+ F8A8              ;-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.
 718+ F8A8 7E           .ExpRecursive:          ld      a,(hl)
 719+ F8A9 FE 00                                cp      0
 720+ F8AB CA F0 F8                             jp      z,.ExpansionComplete
 721+ F8AE FE 3C                                cp      "<"
 722+ F8B0 C2 C3 F8                             jp      nz,.NotToken
 723+ F8B3 23           .ItIsAToken:            inc     hl
 724+ F8B4 CD AF F7     .ReadToken:             call    ExpandAtHLToE                                   ; here we have a <X> token
 725+ F8B7 23                                   inc     hl
 726+ F8B8 E5           .SaveCurrentPosition:   push    hl                                              ;+1 Save the current pointer to the text as we are now diverting off to another address
 727+ F8B9 CD C0 F7     .LookUpToken:           call    SelectTokenToHL                                 ; Get random token id by using d as list and e as offest against galaxydesc list and return address in hl
 728+ F8BC CD A8 F8                             call    .ExpRecursive
 729+ F8BF E1           .RestoreCurrentPosition:pop     hl                                              ;+0 get back our old HL we saved off
 730+ F8C0 C3 A8 F8     .TokenNextIteration:    jp      .ExpRecursive
 731+ F8C3              ;-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.
 732+ F8C3 FE 25        .NotToken:              cp      "%"
 733+ F8C5 C2 E7 F8                             jp      nz,.RegularCharacter
 734+ F8C8 23                                   inc     hl                                              ; issue was that it was stuck on "%" and not reading the next character for the token to expand
 735+ F8C9 7E                                   ld      a,(hl)
 736+ F8CA FE 48                                cp      "H"
 737+ F8CC 20 07                                jr      nz,.IsItI
 738+ F8CE 23           .ItIsAnH:               inc     hl
 739+ F8CF CD 00 F8                             call    ProcessHSymbol
 740+ F8D2 C3 A8 F8                             jp      .ExpRecursive
 741+ F8D5 FE 49        .IsItI:                 cp      "I"
 742+ F8D7 20 07                                jr      nz,.ItIsR
 743+ F8D9 23           .ItIsAnI:               inc     hl
 744+ F8DA CD 15 F8                             call    ProcessISymbol
 745+ F8DD C3 A8 F8                             jp      .ExpRecursive
 746+ F8E0 CD 3A F8     .ItIsR:                 call    ProcessRSymbol
 747+ F8E3 23                                   inc     hl
 748+ F8E4 C3 A8 F8     .SystemNextIteration:   jp      .ExpRecursive
 749+ F8E7 FD 77 00     .RegularCharacter:      ld      (iy+0),a
 750+ F8EA FD 23                                inc     iy
 751+ F8EC 23                                   inc     hl
 752+ F8ED C3 A8 F8     .RegularNextIteration:  jp      .ExpRecursive
 753+ F8F0 AF           .ExpansionComplete:     xor     a
 754+ F8F1 FD 77 01                             ld      (iy+1),a    ; will thsi work as a bodge
 755+ F8F4 C9                                   ret
 756+ F8F5              ;----------------------------------------------------------------------------------------------------------------------------------
 757+ F8F5 3A 0C E9     galaxy_equip_market:    ld      a,(GalaxyDisplayTekLevel)
 758+ F8F8 3C                                   inc     a
 759+ F8F9 67                                   ld      h,a
 760+ F8FA 0E 00                                ld      c,0
 761+ F8FC 06 1A                                ld      b,ShipEquipTableSize            ;NO_OF_EQUIP_ITEMS
 762+ F8FE 11 10 00                             ld      de,ShipEquipTableRowLen         ; Bytes per row
 763+ F901 DD 21 D6 F4                          ld      ix,ShipEquipmentList
 764+ F905 DD 7E 06     .ItemCheckLoop:         ld      a,(ix+6)                        ; is it type fuel
 765+ F908 FE 00                                cp      0
 766+ F90A                                      ; Check Cash TODO
 767+ F90A 28 00                                jr      z,.CheckTechLevel
 768+ F90C DD 7E 03     .CheckTechLevel:        ld      a,(ix+3)                        ; ItemTech Level
 769+ F90F BC                                   cp      h
 770+ F910                                      ;jr      nc,.DoNotShowItem
 771+ F910 DD 7E 02     .CheckShowItem:         ld      a,(ix+2)
 772+ F913 FE 00                                cp      0
 773+ F915                                    ;  jr      z,.DoNotShowItem
 774+ F915 79           .ShowItem:              ld      a,c
 775+ F916 DD 71 01                             ld      (ix+1),c                        ; Show Item Row Id
 776+ F919 DD 7E 06     .CheckFitted:           ld      a,(ix+6)
 777+ F91C FE 00                                cp      EQ_FUEL
 778+ F91E 28 18                                jr      z,.FuelLevel
 779+ F920 FE 01                                cp      EQ_MISSILE
 780+ F922 28 25                                jr      z,.CountMissiles
 781+ F924 21 60 A3     .IsFitted:              ld      hl,EquipmentFitted
 782+ F927 ED 31                                add     hl,a
 783+ F929 7E                                   ld      a,(hl)
 784+ F92A FE 00                                cp      0
 785+ F92C 28 05                                jr      z,.NotFittedItem
 786+ F92E 3E 2A        .FittedItem:            ld      a,"*"
 787+ F930 C3 5A F9                             jp      .MoreToDoCheck
 788+ F933 3E 2D        .NotFittedItem:         ld      a,"-"
 789+ F935 C3 5A F9                             jp      .MoreToDoCheck
 790+ F938 3A 45 A3     .FuelLevel:             ld      a,(Fuel)
 791+ F93B FE 46                                cp      MaxFuelLevel
 792+ F93D 28 05                                jr      z,.FullFuel
 793+ F93F 3E 2D        .NotFullFuel:           ld      a,"-"
 794+ F941 C3 5A F9                             jp      .MoreToDoCheck
 795+ F944 3E 2A        .FullFuel               ld      a,"*"                           ; later on do 3 starts low, med,full
 796+ F946 C3 5A F9                             jp      .MoreToDoCheck
 797+ F949 3A 4A 9E     .CountMissiles:         ld      a,(NbrMissiles)
 798+ F94C FE 00                                cp      0
 799+ F94E 28 05                                jr      z,.NoMissiles
 800+ F950 C6 30                                add     "0"
 801+ F952 C3 5A F9                             jp      .MoreToDoCheck
 802+ F955 3E 2D        .NoMissiles:            ld      a,"-"
 803+ F957 C3 5A F9                             jp      .MoreToDoCheck
 804+ F95A DD 77 07     .MoreToDoCheck:         ld      (ix+7),a                        ; update fitted status
 805+ F95D 0C                                   inc     c
 806+ F95E DD 19                                add     ix,de
 807+ F960 10 A3                                djnz    .ItemCheckLoop
 808+ F962 C9                                   ret
 809+ F963 3E FF        .DoNotShowItem          ld      a,$FF                           ; $FF = hide
 810+ F965 DD 77 01                             ld      (ix+1),a
 811+ F968 DD 19                                add     ix,de
 812+ F96A 10 99                                djnz    .ItemCheckLoop
 813+ F96C C9                                   ret
 814+ F96D              ;----------------------------------------------------------------------------------------------------------------------------------
 815+ F96D 3A FA E8     galaxy_planet_data:     ld      a,(GalaxyWorkingSeed+2)
 816+ F970 B7           .GenerateGovernment:    or      a
 817+ F971 CB 3F                                srl	    a                                               ; Government = seed2 / 8 & 7
 818+ F973 CB 3F                                srl	    a
 819+ F975 CB 3F                                srl	    a                                                   ;
 820+ F977 E6 07                                and     $07                                             ;
 821+ F979 32 0A E9                             ld      (GalaxyDisplayGovernment),a                     ;
 822+ F97C 3A F9 E8     .GenerateEconomy:       ld      a,(GalaxyWorkingSeed+1)
 823+ F97F E6 07                                and     $07
 824+ F981 47                                   ld      b,a
 825+ F982 3A 0A E9                             ld      a,(GalaxyDisplayGovernment)
 826+ F985                                      JumpIfAGTENusng 1, .GreaterThan1
 826+ F985 FE 01       >                        cp     1
 826+ F987 D2 93 F9    >                        jp		nc,.GreaterThan1
 827+ F98A 78           .OneOrZero:             ld      a,b
 828+ F98B F6 02                                or      2
 829+ F98D 32 0B E9                             ld      (GalaxyDisplayEconomy),a
 830+ F990 C3 97 F9                             jp      .GenerateTechLevel
 831+ F993 78           .GreaterThan1:          ld      a,b
 832+ F994 32 0B E9                             ld      (GalaxyDisplayEconomy),a
 833+ F997 EE 07        .GenerateTechLevel:     xor     $07                                             ; tech = economy xor 7 + seed3 & 3 + government /2 + fovernemnt & 1
 834+ F999 47                                   ld      b,a
 835+ F99A 3A FB E8                             ld      a,(GalaxyWorkingSeed+3)
 836+ F99D E6 03                                and     $03
 837+ F99F 80                                   add     b
 838+ F9A0 47                                   ld      b,a
 839+ F9A1 3A 0A E9                             ld      a,(GalaxyDisplayGovernment)
 840+ F9A4 4F                                   ld      c,a
 841+ F9A5 CB 2F                                sra     a
 842+ F9A7 80                                   add     b
 843+ F9A8 47                                   ld      b,a
 844+ F9A9 79                                   ld      a,c
 845+ F9AA E6 01                                and     $1
 846+ F9AC 80                                   add     b
 847+ F9AD 32 0C E9                             ld      (GalaxyDisplayTekLevel),a
 848+ F9B0 CB 27        .GeneratePopulation:    sla     a                                               ; population = tech level * 4 + government + economy + 1
 849+ F9B2 CB 27                                sla     a
 850+ F9B4 21 0A E9                             ld      hl,GalaxyDisplayGovernment
 851+ F9B7 86                                   add     a,(hl)
 852+ F9B8 47                                   ld      b,a
 853+ F9B9 3A 0B E9                             ld      a,(GalaxyDisplayEconomy)
 854+ F9BC 80                                   add     a,b
 855+ F9BD 3C                                   inc     a
 856+ F9BE 32 0D E9                             ld      (GalaxyDisplayPopulation),a
 857+ F9C1 3A 0B E9     .GenerateProductivity:  ld      a,(GalaxyDisplayEconomy)
 858+ F9C4 EE 07                                xor     7
 859+ F9C6 C6 03                                add     3
 860+ F9C8 57                                   ld      d,a
 861+ F9C9 3A 0A E9                             ld      a,(GalaxyDisplayGovernment)
 862+ F9CC C6 04                                add     4
 863+ F9CE 5F                                   ld      e,a
 864+ F9CF ED 30                                mul                                                     ; the next mulitply will be a 16 bit value
 865+ F9D1 3A 0D E9                             ld      a,(GalaxyDisplayPopulation)
 866+ F9D4 26 00                                ld      h,0
 867+ F9D6 6F                                   ld      l,a
 868+ F9D7 CD 44 AF                             call    mulDEbyHL
 869+ F9DA EB                                   ex      de,hl
 870+ F9DB                                      ShiftDELeft1
 870+ F9DB CB 23       >			   sla e
 870+ F9DD CB 12       >			   rl  d
 871+ F9DF                                      ShiftDELeft1
 871+ F9DF CB 23       >			   sla e
 871+ F9E1 CB 12       >			   rl  d
 872+ F9E3                                      ShiftDELeft1
 872+ F9E3 CB 23       >			   sla e
 872+ F9E5 CB 12       >			   rl  d
 873+ F9E7 ED 53 0E E9                          ld      (GalaxyDisplayProductivity),de
 874+ F9EB 3A FD E8     .GenerateRadius:        ld		a,(GalaxyWorkingSeed+5)                         ;radius min = 256*11 = 2816 km
 875+ F9EE E6 0F                                and		$0F
 876+ F9F0 C6 0B                                add     11
 877+ F9F2 47                                   ld      b,a
 878+ F9F3 3A FB E8                             ld      a,(GalaxyWorkingSeed+3)
 879+ F9F6 4F                                   ld      c,a
 880+ F9F7 ED 43 10 E9                          ld      (GalaxyDisplayRadius),bc
 881+ F9FB C9                                   ret
 882+ F9FC
 883+ F9FC              galaxy_master_seed_to_system:
 884+ F9FC 21 10 E0     		ld		hl,galaxy_master_seed
 885+ F9FF 11 CB 9D     		ld		de,SystemSeed
 886+ FA02              galaxy_copy_seed:
 887+ FA02 ED A0        		ldi
 888+ FA04 ED A0        		ldi
 889+ FA06 ED A0        		ldi
 890+ FA08 ED A0        		ldi
 891+ FA0A ED A0        		ldi
 892+ FA0C ED A0        		ldi
 893+ FA0E C9           		ret
 894+ FA0F
 895+ FA0F              galaxy_master_to_galaxy_working:
 896+ FA0F 21 10 E0     		ld		hl,galaxy_master_seed
 897+ FA12 11 F8 E8     		ld		de,GalaxyWorkingSeed
 898+ FA15 18 EB        		jr		galaxy_copy_seed
 899+ FA17
 900+ FA17              galaxy_master_to_galaxy_naming:
 901+ FA17 21 10 E0     		ld		hl,galaxy_master_seed
 902+ FA1A 11 FE E8     		ld		de,GalaxyNamingSeed
 903+ FA1D 18 E3        		jr		galaxy_copy_seed
 904+ FA1F
 905+ FA1F              working_seed_to_galaxy_working:
 906+ FA1F 21 D5 9E             ld      hl,WorkingSeeds
 907+ FA22 11 F8 E8     		ld		de,GalaxyWorkingSeed
 908+ FA25 18 DB        		jr		galaxy_copy_seed
 909+ FA27
 910+ FA27              working_seed_to_galaxy_naming:
 911+ FA27 21 D5 9E             ld      hl,WorkingSeeds
 912+ FA2A 11 FE E8     		ld		de,GalaxyNamingSeed
 913+ FA2D 18 D3        		jr		galaxy_copy_seed
 914+ FA2F
 915+ FA2F              galaxy_ix_seed_to_galaxy_naming:
 916+ FA2F DD E5                push    ix
 917+ FA31 E1                   pop     hl
 918+ FA32 11 FE E8     		ld		de,GalaxyNamingSeed
 919+ FA35 18 CB        		jr		galaxy_copy_seed
 920+ FA37
 921+ FA37
 922+ FA37              galaxy_working_seed_to_galaxy_naming:
 923+ FA37 21 F8 E8             ld      hl,GalaxyWorkingSeed
 924+ FA3A 11 FE E8     		ld		de,GalaxyNamingSeed
 925+ FA3D 18 C3        		jr		galaxy_copy_seed
 926+ FA3F
 927+ FA3F              galaxy_working_seed_to_system:
 928+ FA3F 21 F8 E8     		ld		hl,GalaxyWorkingSeed
 929+ FA42 11 CB 9D     		ld		de,SystemSeed
 930+ FA45 18 BB        		jr		galaxy_copy_seed
 931+ FA47
 932+ FA47              system_seed_to_galaxy_working:
 933+ FA47 21 CB 9D     		ld		hl,SystemSeed
 934+ FA4A 11 F8 E8     		ld		de,GalaxyWorkingSeed
 935+ FA4D 18 B3        		jr		galaxy_copy_seed
 936+ FA4F
 937+ FA4F
 938+ FA4F              system_seed_to_galaxy_naming:
 939+ FA4F 21 CB 9D     		ld		hl,SystemSeed
 940+ FA52 11 FE E8     		ld		de,GalaxyNamingSeed
 941+ FA55 18 AB        		jr		galaxy_copy_seed
 942+ FA57
 943+ FA57              ix_seed_to_galaxy_working:
 944+ FA57 DD E5                push    ix
 945+ FA59 E1                   pop     hl
 946+ FA5A 11 F8 E8     		ld		de,GalaxyWorkingSeed
 947+ FA5D 18 A3        		jr		galaxy_copy_seed
 948+ FA5F
 949+ FA5F              ; Here we twist just once rather than the usual4 for a system
 950+ FA5F 3A FE E8     NextGalaxyNamingSeed:   ld		a,(GalaxyNamingSeed)			; QQ15 ; x = a + c
 951+ FA62 B7                                   or		a							; clear carry flag
 952+ FA63 21 00 E9                             ld		hl,GalaxyNamingSeed+2			; hl -> qq+2 [c]
 953+ FA66 86                                   add		a,(hl)						; a= QQ15 [a]+ QQ15 [c]
 954+ FA67 47                                   ld		b,a							; partial sum lo [x]
 955+ FA68              ; y = b + d	+ carry
 956+ FA68 3A FF E8                             ld		a,(GalaxyNamingSeed+1)          ; [b]
 957+ FA6B 21 01 E9                             ld		hl,GalaxyNamingSeed+3			; HL -> QQ+3 [d] we don't inc as it affects carry)
 958+ FA6E 8E                                   adc		a,(hl)						; note add with carry
 959+ FA6F 4F                                   ld		c,a  						; c = QQ1+QQ3+carry bit parial sum hi
 960+ FA70 3A 00 E9                             ld		a,(GalaxyNamingSeed+2)
 961+ FA73 32 FE E8                             ld		(GalaxyNamingSeed+0),a			; copy qq152 to qq150 [a] = [c]
 962+ FA76 3A 01 E9                             ld		a,(GalaxyNamingSeed+3)
 963+ FA79 32 FF E8                             ld		(GalaxyNamingSeed+1),a			; copy qq153 to qq151 [b] = [d]
 964+ FA7C 3A 03 E9                             ld		a,(GalaxyNamingSeed+5)
 965+ FA7F 32 01 E9                             ld		(GalaxyNamingSeed+3),a			; copy qq155 to qq153 [d] = [f]
 966+ FA82 3A 02 E9                             ld		a,(GalaxyNamingSeed+4)
 967+ FA85 32 00 E9                             ld		(GalaxyNamingSeed+2),a			; copy qq154 to qq152 [c] = [e]
 968+ FA88 B7                                   or		a
 969+ FA89 78                                   ld		a,b
 970+ FA8A 21 00 E9                             ld		hl,GalaxyNamingSeed+2		    ; hl -> qq+2
 971+ FA8D 86                                   add	    a,(hl)
 972+ FA8E 32 02 E9                             ld		(GalaxyNamingSeed+4),a			; e = x + [c]
 973+ FA91 79                                   ld		a,c
 974+ FA92 21 01 E9                             ld		hl,GalaxyNamingSeed+3			; HL -> QQ+3 )we don't inc as it affects carry)
 975+ FA95 8E                                   adc		a,(hl)
 976+ FA96 32 03 E9                             ld		(GalaxyNamingSeed+5),a			; f = y + [d] + carry
 977+ FA99 C9                                   ret
 978+ FA9A
 979+ FA9A
 980+ FA9A 3A 03 E9     GalaxyNamingLoop:       ld		a,(GalaxyNamingSeed+5)	        ; a = first byte of name seed
 981+ FA9D E6 1F                                and 	$1F					            ; Keep bottom 5 bits only
 982+ FA9F FE 00                                cp		0					            ; 0 = skip 2 chars
 983+ FAA1 28 12                                jr		z,.SkipPhrase
 984+ FAA3 C6 0C                                add		a,12
 985+ FAA5 CB 27                                sla		a					            ; phrase = (a+12)*2
 986+ FAA7 21 A0 E8                             ld		hl,GalaxyName_digrams
 987+ FAAA ED 31                                add		hl,a
 988+ FAAC ED A0                                ldi
 989+ FAAE 7E                                   ld		a,(hl)
 990+ FAAF FE 3F                                cp		'?'
 991+ FAB1 28 02                                jr		z,.SkipPhrase
 992+ FAB3 ED A0        .AddExtra:              ldi
 993+ FAB5 D5           .SkipPhrase:            push	de
 994+ FAB6 CD 5F FA                             call	NextGalaxyNamingSeed
 995+ FAB9 D1                                   pop		de
 996+ FABA C9                                   ret
 997+ FABB
 998+ FABB              ; takes location in BC, finds seed and expands the name
 999+ FABB ED 43 5B E8  galaxy_name_at_bc:      ld      (GalaxyTargetSystem),bc
1000+ FABF CD 64 FC     galaxy_digram_seed:     call    galaxy_system_under_cursor
1001+ FAC2 FE 00                                cp      0
1002+ FAC4 C8                                   ret     z
1003+ FAC5
1004+ FAC5 CD 27 FA     GalaxyDigramWorkings:   call    working_seed_to_galaxy_naming
1005+ FAC8 C3 E0 FA                             jp      GalaxyDigramNamingSeed
1006+ FACB
1007+ FACB CD 17 FA     GalaxyDigramSeed:       call    galaxy_master_to_galaxy_naming
1008+ FACE C3 E0 FA                             jp      GalaxyDigramNamingSeed
1009+ FAD1
1010+ FAD1 CD 37 FA     GalaxyDigramWorkingSeed:call    galaxy_working_seed_to_galaxy_naming
1011+ FAD4 C3 E0 FA                             jp      GalaxyDigramNamingSeed
1012+ FAD7
1013+ FAD7 CD 2F FA     GalaxyDigramWIXSeed:    call    galaxy_ix_seed_to_galaxy_naming
1014+ FADA C3 E0 FA                             jp      GalaxyDigramNamingSeed
1015+ FADD
1016+ FADD CD 4F FA     SystemGetDigramSeed:    call    system_seed_to_galaxy_naming
1017+ FAE0
1018+ FAE0 11 7F E8     GalaxyDigramNamingSeed: ld		de,GalaxyExpandedName
1019+ FAE3 06 03        GalaxyDigramToDE:       ld		b,3
1020+ FAE5 3A FE E8                             ld		a,(GalaxyNamingSeed)
1021+ FAE8 E6 40                                and		$40
1022+ FAEA 28 03                                jr		z,.SmallSizeName
1023+ FAEC CD 9A FA     .LargeSizeName:         call	GalaxyNamingLoop
1024+ FAEF CD 9A FA     .SmallSizeName:         call	GalaxyNamingLoop
1025+ FAF2 CD 9A FA                             call	GalaxyNamingLoop
1026+ FAF5 CD 9A FA                             call	GalaxyNamingLoop
1027+ FAF8 EB           .DoneName:              ex		de,hl
1028+ FAF9 36 00                                ld		(hl),0
1029+ FAFB EB                                   ex		de,hl
1030+ FAFC AF                                   xor     a
1031+ FAFD 3D                                   dec     a
1032+ FAFE C9                                   ret
1033+ FAFF              ;reorte X 13 Y 97
1034+ FAFF
1035+ FAFF              ;----------------------------------------------------------------------------------------------------------------------------------
1036+ FAFF 3A 5D E8     is_system_found:        ld      a,(GalaxySearchLength)
1037+ FB02                                      ;dec     a                       ; as we won't check the /0 just first match
1038+ FB02 4F                                   ld      c,a                     ; will always be max of 32 as that is what length routine does
1039+ FB03 06 00                                ld      b,0                     ; so we can use cpir
1040+ FB05 11 5E E8     .readyToSearch:         ld      de,GalaxySearchString   ; hl = string we are serching
1041+ FB08 21 7F E8                             ld      hl,GalaxyExpandedName   ; de = the expanded galaxy name
1042+ FB0B 7E           .searchLoop:            ld      a,(hl)                  ; if the string is too short then maybe there is a longer one to find
1043+ FB0C                                      JumpIfAIsZero   .noMatch        ; but
1043+ FB0C A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
1043+ FB0D CA 1B FB    >                        jp	    z, .noMatch
1044+ FB10 1A                                   ld      a,(de)                  ; get the character to search for
1045+ FB11 ED A1                                cpi                             ; compare with value in A from HL
1046+ FB13 20 06                                jr      nz,.noMatch
1047+ FB15 13                                   inc     de                      ; move to next search character
1048+ FB16 E2 1E FB                             jp      po, .matched            ; if c = 0 then we have hit the bingpot
1049+ FB19 18 F0                                jr      .searchLoop             ; else keep looping
1050+ FB1B              .noMatch:               SetAFalse
1050+ FB1B 3E FF       >                        ld      a,$FF
1051+ FB1D C9                                   ret
1052+ FB1E              .matched:               SetATrue
1052+ FB1E AF          >                        xor     a
1053+ FB1F C9                                   ret
1054+ FB20
1055+ FB20 21 5E E8     set_galaxy_search_len:  ld      hl,GalaxySearchString
1056+ FB23 06 00                                ld      b,0
1057+ FB25 0E 20                                ld      c,32                    ; limiter for missing /0
1058+ FB27 7E           .SearchLoop:            ld      a,(hl)
1059+ FB28                                      JumpIfAIsZero .foundLength
1059+ FB28 A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
1059+ FB29 CA 34 FB    >                        jp	    z, .foundLength
1060+ FB2C 04                                   inc     b
1061+ FB2D 0D                                   dec     c
1062+ FB2E 28 04                                jr      z,.foundLength
1063+ FB30 23                                   inc     hl
1064+ FB31 C3 27 FB                             jp      .SearchLoop
1065+ FB34 78           .foundLength:           ld      a,b
1066+ FB35 32 5D E8                             ld      (GalaxySearchLength),a
1067+ FB38 C9                                   ret
1068+ FB39
1069+ FB39              ; find system by searching for GalaxySearchString
1070+ FB39 CD 20 FB     find_system_by_name:    call    set_galaxy_search_len
1071+ FB3C AF                                   xor     a
1072+ FB3D 32 E4 9D                             ld      (XSAV),a
1073+ FB40 DD 21 16 E0                          ld      ix,galaxy_data
1074+ FB44 CD 57 FA     .nextSystem:            call    ix_seed_to_galaxy_working
1075+ FB47 CD D1 FA                             call    GalaxyDigramWorkingSeed
1076+ FB4A CD FF FA                             call    is_system_found
1077+ FB4D                                      JumpIfATrue .FoundAtIX
1077+ FB4D A7          >                        and     a
1077+ FB4E CA 6A FB    >                        jp      z, .FoundAtIX
1078+ FB51 3A E4 9D     .notFoundYet:           ld      a,(XSAV)
1079+ FB54 3D                                   dec     a
1080+ FB55 28 10                                jr      z,.NoMoreSystems
1081+ FB57 32 E4 9D     .moreToSearch:          ld      (XSAV),a
1082+ FB5A DD E5                                push    ix
1083+ FB5C E1                                   pop     hl
1084+ FB5D ED 34 08 00                          add     hl,8
1085+ FB61 E5                                   push    hl
1086+ FB62 DD E1                                pop     ix
1087+ FB64 C3 44 FB                             jp      .nextSystem
1088+ FB67 3E FF        .NoMoreSystems:         ld      a,$FF
1089+ FB69 C9                                   ret
1090+ FB6A CD 57 FA     .FoundAtIX              call    ix_seed_to_galaxy_working
1091+ FB6D C9                                   ret
1092+ FB6E              ;----------------------------------------------------------------------------------------------------------------------------------
1093+ FB6E 00 00        nearestfound:           DW 0
1094+ FB70              ; In here de carries current nearest and loads into nearest found
1095+ FB70              ; does a basic distance check for x then y each under threshold, then does x+y under threshold  jsut in case we have an extreme like 0 x and high dist y
1096+ FB70 DD 21 16 E0  find_nearest_to_bc:     ld      ix,galaxy_data
1097+ FB74 FD 26 00                             ld      iyh,0
1098+ FB77 FD 2E 78                             ld      iyl,120
1099+ FB7A ED 43 6E FB                          ld      (nearestfound),bc
1100+ FB7E DD 7E 03     find_nearest_loop:      ld      a,(ix+3)                        ;
1101+ FB81 5F                                   ld      e,a                             ; e= current seed x
1102+ FB82                                      JumpIfALTNusng c, nearestXPosLT         ; not we need to know if its e - c or c - e we coudl do 2's compliement of course
1102+ FB82 B9          >                        cp      c
1102+ FB83 DA 94 FB    >                        jp		c, nearestXPosLT
1103+ FB86 D5           nearestXPosGTE:         push    de                              ;
1104+ FB87 26 00                                ld      h,0                             ;
1105+ FB89 6F                                   ld      l,a                             ; hl = seed x
1106+ FB8A 16 00                                ld      d,0                             ;
1107+ FB8C 59                                   ld      e,c                             ; de = nearest x
1108+ FB8D B7                                   or      a                               ;
1109+ FB8E ED 52                                sbc     hl,de                           ; hl = distance between the two
1110+ FB90 D1                                   pop     de
1111+ FB91 C3 9E FB                             jp      nearestDistXPos
1112+ FB94 D5           nearestXPosLT:          push    de                              ;
1113+ FB95 26 00                                ld      h,0                             ;
1114+ FB97 69                                   ld      l,c                             ; hl = nearest x
1115+ FB98 16 00                                ld      d,0                             ;
1116+ FB9A B7                                   or      a                               ; de = seed x
1117+ FB9B ED 52                                sbc     hl,de                           ;
1118+ FB9D D1                                   pop     de                              ; hl = distance between the two
1119+ FB9E 7D           nearestDistXPos:        ld      a,l                             ; so l = abs distance as does a
1120+ FB9F FD BD                                cp      iyl                             ; under initial threshold?
1121+ FBA1 30 3D                                jr      nc,find_nearest_miss            ; no so its a miss
1122+ FBA3               ;DEBUG                       ld      l,a                             ; l = distance (we can drop thsi as it was done above!)
1123+ FBA3 DD 7E 01                             ld      a,(ix+1)                        ;
1124+ FBA6 57                                   ld      d,a                             ; d = seed y
1125+ FBA7                                      JumpIfALTNusng b, nearestYPosLT         ; determine abs calc
1125+ FBA7 B8          >                        cp      b
1125+ FBA8 DA BC FB    >                        jp		c, nearestYPosLT
1126+ FBAB E5           nearestYPosGTE:         push    hl                              ; save current x distance
1127+ FBAC D5                                   push    de                              ;
1128+ FBAD 26 00                                ld      h,0                             ;
1129+ FBAF 6F                                   ld      l,a                             ; hl = seed y
1130+ FBB0 16 00                                ld      d,0                             ;
1131+ FBB2 58                                   ld      e,b                             ; de = nearest y
1132+ FBB3 B7                                   or      a                               ;
1133+ FBB4 ED 52                                sbc     hl,de                           ; hl = distance between the two
1134+ FBB6 7D                                   ld      a,l
1135+ FBB7 D1                                   pop     de
1136+ FBB8 E1                                   pop     hl
1137+ FBB9 C3 CA FB                             jp      nearestDistYPos
1138+ FBBC E5           nearestYPosLT:          push    hl                              ; save current x distance
1139+ FBBD D5                                   push    de                              ;
1140+ FBBE 26 00                                ld      h,0                             ;
1141+ FBC0 68                                   ld      l,b                             ; hl = nearest y
1142+ FBC1 5A                                   ld      e,d                             ;
1143+ FBC2 16 00                                ld      d,0                             ; de = seed y
1144+ FBC4 B7                                   or      a                               ;
1145+ FBC5 ED 52                                sbc     hl,de                           ; hl = distance between the two
1146+ FBC7 7D                                   ld      a,l
1147+ FBC8 D1                                   pop     de
1148+ FBC9 E1                                   pop     hl                              ; now we get distance in l back into hl, distance y is in a
1149+ FBCA FD BD        nearestDistYPos:        cp      iyl                             ; under initial threshold?
1150+ FBCC 30 12                                jr      nc, find_nearest_miss
1151+ FBCE 26 00                                ld      h,0                             ; hl = distance for x
1152+ FBD0 ED 31                                add     hl,a                            ; adding distance y
1153+ FBD2 7D                                   ld      a,l                             ; and copy it to l
1154+ FBD3 FD BD                                cp      iyl                             ; is the pair under distance
1155+ FBD5 30 09                                jr      nc, find_nearest_miss           ;
1156+ FBD7 FD 6F        nearest_found_a_hit:    ld      iyl,a                           ; so we have a hit
1157+ FBD9 ED 53 6E FB                          ld      (nearestfound),de               ;
1158+ FBDD                                      ReturnIfALTNusng 2                      ; exact match bail out, note 1 can be an exact match due to Y axis, as we are looking at seed pos then this is accurate enough and we won't hit dx 1 and dy 0 hopefully in any galaxy :)
1158+ FBDD FE 02       >                        cp    2
1158+ FBDF D8          >                        ret	 c
1159+ FBE0 DD E5        find_nearest_miss:      push     ix
1160+ FBE2 E1                                   pop      hl
1161+ FBE3 ED 34 08 00                          add      hl,8
1162+ FBE7 E5                                   push     hl
1163+ FBE8 DD E1                                pop      ix
1164+ FBEA FD 25                                dec     iyh
1165+ FBEC FD 7C                                ld      a,iyh
1166+ FBEE                                      JumpIfAIsNotZero find_nearest_loop
1166+ FBEE A7          >                        and     a
1166+ FBEF C2 7E FB    >                        jp	    nz,find_nearest_loop
1167+ FBF2 ED 4B 6E FB                          ld      bc ,(nearestfound)              ; if we hit here then after searching we have found a nearest
1168+ FBF6 C9                                   ret
1169+ FBF7              ;----------------------------------------------------------------------------------------------------------------------------------
1170+ FBF7              ; Does a sqare root distance
1171+ FBF7 16 00        galaxy_find_distance:   ld      d,0
1172+ FBF9 26 00                                ld      h,0
1173+ FBFB 3A 57 E8                             ld      a,(GalaxyPresentSystem)
1174+ FBFE 47                                   ld      b,a
1175+ FBFF 3A 59 E8                             ld      a,(GalaxyDestinationSystem)
1176+ FC02 B8                                   cp      b
1177+ FC03 20 0E                                jr      nz,.NotSame
1178+ FC05 C5           .XSame:                 push    bc
1179+ FC06 F5                                   push    af
1180+ FC07 3A 58 E8                             ld      a,(GalaxyPresentSystem+1)
1181+ FC0A 47                                   ld      b,a
1182+ FC0B 3A 5A E8                             ld      a,(GalaxyDestinationSystem+1)
1183+ FC0E B8                                   cp      b
1184+ FC0F C1                                   pop     bc
1185+ FC10 F1                                   pop     af
1186+ FC11 28 49                                jr      z,.ZeroDistance
1187+ FC13 30 08        .NotSame:               jr      nc,.DestinationGTEPresentX
1188+ FC15 68           .DestinationLTPresentX: ld      l,b
1189+ FC16 5F                                   ld      e,a
1190+ FC17 B7                                   or      a
1191+ FC18 ED 52                                sbc     hl,de
1192+ FC1A C3 22 FC                             jp      .SquareXDist
1193+ FC1D 6F           .DestinationGTEPresentX:ld      l,a
1194+ FC1E 58                                   ld      e,b
1195+ FC1F B7                                   or      a
1196+ FC20 ED 52                                sbc     hl,de
1197+ FC22 55           .SquareXDist:           ld      d,l
1198+ FC23 5D                                   ld      e,l
1199+ FC24 ED 30                                mul
1200+ FC26 3A 58 E8     .CalcYDistSq            ld      a,(GalaxyPresentSystem+1)
1201+ FC29 47                                   ld      b,a
1202+ FC2A 3A 5A E8                             ld      a,(GalaxyDestinationSystem+1)
1203+ FC2D B8                                   cp      b
1204+ FC2E 30 0B                                jr      nc,.DestinationGTEPresentY
1205+ FC30 4F           .DestinationLTPresentY: ld      c,a
1206+ FC31 68                                   ld      l,b
1207+ FC32 06 00                                ld      b,0
1208+ FC34 26 00                                ld      h,0
1209+ FC36 ED 42                                sbc     hl,bc
1210+ FC38 C3 43 FC                             jp      .DestinationYDone
1211+ FC3B 48           .DestinationGTEPresentY:ld      c,b
1212+ FC3C 6F                                   ld      l,a
1213+ FC3D 06 00                                ld      b,0
1214+ FC3F 26 00                                ld      h,0
1215+ FC41 ED 42                                sbc     hl,bc
1216+ FC43 CB 2D        .DestinationYDone:      sra     l                   ; divide L by 2 for galaxy size
1217+ FC45 7D                                   ld      a,l
1218+ FC46 EB                                   ex      de,hl
1219+ FC47 57                                   ld      d,a
1220+ FC48 5F                                   ld      e,a
1221+ FC49 ED 30        .SquareYDist:           mul
1222+ FC4B 19                                   add     hl,de
1223+ FC4C EB                                   ex      de,hl
1224+ FC4D CD 23 B0                             call    asm_sqrt            ; distance via pythagoras in hl
1225+ FC50                                      ShiftHLLeft1
1225+ FC50 CB 25       >			   sla l
1225+ FC52 CB 14       >			   rl  h
1226+ FC54                                      ShiftHLLeft1                ; Multiply by 4 to get distance
1226+ FC54 CB 25       >			   sla l
1226+ FC56 CB 14       >			   rl  h
1227+ FC58 22 70 9E                             ld      (Distance),hl       ; Distance is now caulated distance
1228+ FC5B C9                                   ret
1229+ FC5C AF           .ZeroDistance:          xor     a
1230+ FC5D 32 70 9E                             ld      (Distance),a
1231+ FC60 32 71 9E                             ld      (Distance+1),a
1232+ FC63 C9                                   ret
1233+ FC64              ;----------------------------------------------------------------------------------------------------------------------------------
1234+ FC64              ; Find the systems pointed to by GalaxyTargetSystem and loads it into WorkingSeeds
1235+ FC64              ; this needs to chagne to galaxyresultseed or galayxworkingseed
1236+ FC64 AF           galaxy_system_under_cursor:xor     a
1237+ FC65 32 E4 9D                             ld		(XSAV),a
1238+ FC68 DD 21 16 E0                          ld      ix,galaxy_data
1239+ FC6C 2A 5B E8     .GCCounterLoop:         ld      hl,(GalaxyTargetSystem)
1240+ FC6F DD E5                                push    ix
1241+ FC71 7D                                   ld      a,l
1242+ FC72 DD BE 03                             cp      (ix+3)                          ; seed x
1243+ FC75 20 14                                jr      nz,.ItsNotThisX
1244+ FC77 7C                                   ld      a,h
1245+ FC78 DD BE 01                             cp      (ix+1)                          ; seed x
1246+ FC7B 20 0E        .FoundSystem:           jr      nz,.ItsNotThisX
1247+ FC7D DD E5                                push    ix
1248+ FC7F E1                                   pop     hl
1249+ FC80 11 D5 9E                             ld      de,WorkingSeeds                 ;' copy to wkring Seeds
1250+ FC83 CD D5 A3                             call    copy_seed
1251+ FC86 3E FF                                ld      a,$FF
1252+ FC88 DD E1                                pop     ix
1253+ FC8A C9                                   ret
1254+ FC8B E1           .ItsNotThisX:           pop     hl
1255+ FC8C ED 34 08 00                          add     hl,8
1256+ FC90 E5                                   push    hl
1257+ FC91 DD E1                                pop     ix
1258+ FC93 3A E4 9D                             ld		a,(XSAV)
1259+ FC96 3D                                   dec		a
1260+ FC97 32 E4 9D                             ld      (XSAV),a
1261+ FC9A FE 00                                cp		0
1262+ FC9C C8                                   ret		z
1263+ FC9D 18 CD                                jr		.GCCounterLoop
1264+ FC9F              ;----------------------------------------------------------------------------------------------------------------------------------
1265+ FC9F 21 CB 9D     SeedGalaxy:             ld      hl,SystemSeed                   ; First copy system seed to galaxy master
1266+ FCA2 11 10 E0                             ld      de,galaxy_master_seed           ; .
1267+ FCA5 ED A0                                ldi                                     ; .
1268+ FCA7 ED A0                                ldi                                     ; .
1269+ FCA9 ED A0                                ldi                                     ; .
1270+ FCAB ED A0                                ldi                                     ; .
1271+ FCAD ED A0                                ldi                                     ; .
1272+ FCAF ED A0                                ldi                                     ; .
1273+ FCB1 DD 21 16 E0                          ld      ix,galaxy_data                  ; Generate system seed data for each planet
1274+ FCB5 AF                                   xor		a                               ; .
1275+ FCB6 32 E4 9D                             ld		(XSAV),a                        ; .
1276+ FCB9 DD E5        SeedGalaxyLoop:         push    ix                              ; .
1277+ FCBB D1                                   pop     de                              ; .
1278+ FCBC 21 CB 9D                             ld      hl,SystemSeed                   ; .
1279+ FCBF CD D5 A3                             call    copy_seed                       ; .
1280+ FCC2 DD E5                                push    ix                              ; .
1281+ FCC4 E1                                   pop     hl                              ; .
1282+ FCC5 ED 34 08 00                          add     hl,8                            ; .
1283+ FCC9 E5                                   push    hl                              ; .
1284+ FCCA DD E1                                pop     ix                              ; .
1285+ FCCC CD 0A A4                             call    next_system_seed                ; .
1286+ FCCF 3A E4 9D                             ld		a,(XSAV)                        ; .
1287+ FCD2 3D                                   dec		a                               ; .
1288+ FCD3 FE 00                                cp		0                               ; .
1289+ FCD5 C8                                   ret		z                               ; .
1290+ FCD6 32 E4 9D                             ld		(XSAV),a                        ; .
1291+ FCD9 18 DE                                jr      SeedGalaxyLoop                  ; .
1292+ FCDB C9                                   ret
1293+ FCDC
1294+ FCDC              GalaxyBankSize   EQU $ - galaxy_page_marker
1295+ FCDC
# file closed: ./Universe/Galaxy/galaxy_data.asm
 997  FCDC
 998  FCDC                                      DISPLAY "Galaxy Data - Bytes free ",/D, $2000 - ($- GalaxyDataAddr)
 999  FCDC
1000  FCDC              ; Bank 92  ------------------------------------------------------------------------------------------------------------------------
1001  FCDC                                      SLOT    GalaxyDataAddr
1002  FCDC                                      PAGE    BankGalaxyData1
1003  FCDC                                      ORG GalaxyDataAddr, BankGalaxyData1
1004  E000 FF           GALAXYDATABlock1         DB $FF
1005  E001 00 00 00...                           DS $1FFF                 ; just allocate 8000 bytes for now
1006  0000              ; Bank 93  ------------------------------------------------------------------------------------------------------------------------
1007  0000                                      SLOT    GalaxyDataAddr
1008  0000                                      PAGE    BankGalaxyData2
1009  0000                                      ORG GalaxyDataAddr, BankGalaxyData2
1010  E000 FF           GALAXYDATABlock2         DB $FF
1011  E001 00 00 00...                           DS $1FFF                 ; just allocate 8000 bytes for now
1012  0000              ; Bank 94  ------------------------------------------------------------------------------------------------------------------------
1013  0000                                      SLOT    GalaxyDataAddr
1014  0000                                      PAGE    BankGalaxyData3
1015  0000                                      ORG GalaxyDataAddr, BankGalaxyData3
1016  E000 FF           GALAXYDATABlock3         DB $FF
1017  E001 00 00 00...                           DS $1FFF                 ; just allocate 8000 bytes for now
1018  0000              ; Bank 95  ------------------------------------------------------------------------------------------------------------------------
1019  0000                                      SLOT    GalaxyDataAddr
1020  0000                                      PAGE    BankGalaxyData4
1021  0000                                      ORG GalaxyDataAddr, BankGalaxyData4
1022  E000 FF           GALAXYDATABlock4         DB $FF
1023  E001 00 00 00...                           DS $1FFF                 ; just allocate 8000 bytes for now
1024  0000              ; Bank 96  ------------------------------------------------------------------------------------------------------------------------
1025  0000                                      SLOT    GalaxyDataAddr
1026  0000                                      PAGE    BankGalaxyData5
1027  0000                                      ORG GalaxyDataAddr,BankGalaxyData5
1028  E000 FF           GALAXYDATABlock5         DB $FF
1029  E001 00 00 00...                           DS $1FFF                 ; just allocate 8000 bytes for now
1030  0000              ; Bank 97  ------------------------------------------------------------------------------------------------------------------------
1031  0000                                      SLOT    GalaxyDataAddr
1032  0000                                      PAGE    BankGalaxyData6
1033  0000                                      ORG GalaxyDataAddr,BankGalaxyData6
1034  E000 FF           GALAXYDATABlock6         DB $FF
1035  E001 00 00 00...                           DS $1FFF                 ; just allocate 8000 bytes for now
1036  0000              ; Bank 98  ------------------------------------------------------------------------------------------------------------------------
1037  0000                                      SLOT    GalaxyDataAddr
1038  0000                                      PAGE    BankGalaxyData7
1039  0000                                      ORG GalaxyDataAddr,BankGalaxyData7
1040  E000 FF           GALAXYDATABlock7         DB $FF
1041  E001 00 00 00...                           DS $1FFF                 ; just allocate 8000 bytes for now
1042  0000              ; Bank 99  ------------------------------------------------------------------------------------------------------------------------
1043  0000                                      SLOT    MathsTablesAddr
1044  0000                                      PAGE    BankMathsTables
1045  0000                                      ORG     MathsTablesAddr,BankMathsTables
1046  0000                                      INCLUDE "./Maths/logmaths.asm"
# file opened: ./Maths/logmaths.asm
   1+ 0000 4C 6F 67 4D  logmaths_page_marker    DB "LogMaths   PG99"
   1+ 0004 61 74 68 73
   1+ 0008 20 20 20 50
   1+ 000C 47 39 39
   2+ 000F
   3+ 000F EB           AntiLogHL:              ex      de,hl
   4+ 0010 21 F7 06                             ld      hl,LogReverseHighByte
   5+ 0013 01 14 02                             ld      bc,LogReverseTableLen
   6+ 0016 7A                                   ld      a,d
   7+ 0017 ED A1        .SearchLoop:            cpi                                     ; first pass index into high byte
   8+ 0019 28 03                                jr      z,.FoundHighByte
   9+ 001B 23                                   inc     hl
  10+ 001C 18 F9                                jr      .SearchLoop
  11+ 001E 23           .FoundHighByte:         inc     hl                              ; now we have high double it for table of words
  12+ 001F 7E                                   ld      a,(hl)                          ; .
  13+ 0020 21 F7 04                             ld      hl,LogTable                     ; .
  14+ 0023 ED 31                                add     hl,a                            ; .
  15+ 0025 ED 31                                add     hl,a                            ; .
  16+ 0027 7A           .LookForLowByteLoop:    ld      a,d                             ; search for low byte or change in high byte
  17+ 0028 BE                                   cp      (hl)
  18+ 0029 20 09                                jr      nz,.SkippedPastHigh
  19+ 002B 23                                   inc     hl
  20+ 002C 7B                                   ld      a,e
  21+ 002D                                      JumpIfAGTENusng (hl), .SkippedPastLow
  21+ 002D BE          >                        cp     (hl)
  21+ 002E D2 35 00    >                        jp		nc,.SkippedPastLow
  22+ 0031 C3 27 00                             jp      .LookForLowByteLoop
  23+ 0034
  24+ 0034 2B           .SkippedPastHigh:       dec     hl                              ; for high we are on next word
  25+ 0035 2B           .SkippedPastLow:        dec     hl                              ; for low we are no next byte
  26+ 0036 EB                                   ex      de,hl                           ; move address to de for subtract
  27+ 0037 21 F7 04                             ld      hl,LogTable                     ; subtract from log table address
  28+ 003A                                      ClearCarryFlag
  28+ 003A B7          >                        or a
  29+ 003B ED 52                                sbc     hl,de                           ; so nwo we have nbr of words, i.e anito log * 2
  30+ 003D                                      ShiftHLRight1                           ; now must be >= 255
  30+ 003D CB 3C       >			   srl h
  30+ 003F CB 1D       >			   rr  l
  31+ 0041 7D                                   ld      a,l
  32+ 0042 C9                                   ret
  33+ 0043
  34+ 0043              AEquAmul256DivBLogLT:   JumpIfAIsZero   .ResultIsZero
  34+ 0043 A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
  34+ 0044 CA 6C 00    >                        jp	    z, .ResultIsZero
  35+ 0047 21 F7 04                             ld      hl,LogTable                     ; de = log a
  36+ 004A ED 31                                add     hl,a                            ; .
  37+ 004C ED 31                                add     hl,a                            ; .
  38+ 004E 5E                                   ld      e,(hl)                          ; .
  39+ 004F 23                                   inc     hl                              ; .
  40+ 0050 56                                   ld      d,(hl)                          ; .
  41+ 0051 21 F7 04                             ld      hl,LogTable                     ; hl = log b
  42+ 0054 78                                   ld      a,b                             ; .
  43+ 0055 ED 31                                add     hl,a                            ; .
  44+ 0057 ED 31                                add     hl,a                            ; .
  45+ 0059 7E                                   ld      a,(hl)                          ; .
  46+ 005A 23                                   inc     hl                              ; .
  47+ 005B 66                                   ld      h,(hl)                          ; .
  48+ 005C 6F                                   ld      l,a                             ; .
  49+ 005D                                      ClearCarryFlag                          ;
  49+ 005D B7          >                        or a
  50+ 005E EB                                   ex      de,hl                           ; now hl = log a and de = log b
  51+ 005F ED 52                                sbc     hl,de                           ; hl = log a - log b
  52+ 0061 7C                                   ld      a,h                             ; .
  53+ 0062 21 F7 02                             ld      hl,AnitLogODDTable               ; hl = anti log (log a - log b)
  54+ 0065 ED 31                                add     hl,a                            ; which is also a / b
  55+ 0067 ED 31                                add     hl,a                            ; .
  56+ 0069 7E                                   ld      a,(hl)                          ; .
  57+ 006A                                      ClearCarryFlag                          ;
  57+ 006A B7          >                        or a
  58+ 006B C9                                   ret
  59+ 006C              .ResultIsZero:          ClearCarryFlag
  59+ 006C B7          >                        or a
  60+ 006D                                      ZeroA
  60+ 006D AF          >                        xor a
  61+ 006E C9                                   ret
  62+ 006F
  63+ 006F              AEquAmul256DivBLog:     JumpIfAIsZero   .ResultIsZero
  63+ 006F A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
  63+ 0070 CA A6 00    >                        jp	    z, .ResultIsZero
  64+ 0073                                      JumpIfAGTENusng d, AEquAmul256DivBLogLT
  64+ 0073 BA          >                        cp     d
  64+ 0074 D2 43 00    >                        jp		nc,AEquAmul256DivBLogLT
  65+ 0077 21 F7 04                             ld      hl,LogTable                     ; de = log a
  66+ 007A ED 31                                add     hl,a                            ; .
  67+ 007C ED 31                                add     hl,a                            ; .
  68+ 007E 5E                                   ld      e,(hl)                          ; .
  69+ 007F 23                                   inc     hl                              ; .
  70+ 0080 56                                   ld      d,(hl)                          ; .
  71+ 0081 21 F7 04                             ld      hl,LogTable                     ; hl = log b
  72+ 0084 78                                   ld      a,b                             ; .
  73+ 0085 ED 31                                add     hl,a                            ; .
  74+ 0087 ED 31                                add     hl,a                            ; .
  75+ 0089 7E                                   ld      a,(hl)                          ; .
  76+ 008A 23                                   inc     hl                              ; .
  77+ 008B 66                                   ld      h,(hl)                          ; .
  78+ 008C 6F                                   ld      l,a                             ; .
  79+ 008D                                      ClearCarryFlag                          ;
  79+ 008D B7          >                        or a
  80+ 008E EB                                   ex      de,hl                           ; now hl = log a and de = log b
  81+ 008F ED 52                                sbc     hl,de                           ; hl = log a - log b
  82+ 0091 38 0B                                jr      c,.ResultIsOne                  ; .
  83+ 0093 7C                                   ld      a,h                             ; .
  84+ 0094 21 F7 00                             ld      hl,AntiLogTable                 ; hl = anti log (log a - log b)
  85+ 0097 ED 31                                add     hl,a                            ; which is also a / b
  86+ 0099 ED 31                                add     hl,a                            ; .
  87+ 009B 7E                                   ld      a,(hl)                          ; .
  88+ 009C                                      ClearCarryFlag                          ;
  88+ 009C B7          >                        or a
  89+ 009D C9                                   ret
  90+ 009E              .ResultIsOne:           ClearCarryFlag
  90+ 009E B7          >                        or a
  91+ 009F 3E FF                                ld      a,$FF
  92+ 00A1 C9                                   ret
  93+ 00A2              .ResultIsInfinte:       SetCarryFlag
  93+ 00A2 37          >                        scf
  94+ 00A3 3E FF                                ld      a,$FF
  95+ 00A5 C9                                   ret
  96+ 00A6              .ResultIsZero:          ClearCarryFlag
  96+ 00A6 B7          >                        or a
  97+ 00A7 C9                                   ret
  98+ 00A8
  99+ 00A8              AEquAmul256Div197LogLT: JumpIfAIsZero   .ResultIsZero
  99+ 00A8 A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
  99+ 00A9 CA C8 00    >                        jp	    z, .ResultIsZero
 100+ 00AC 21 F7 04                             ld      hl,LogTable                     ; point to log a in LogTable
 101+ 00AF ED 31                                add     hl,a                            ; Note we can't sla in case a > 127
 102+ 00B1 ED 31                                add     hl,a
 103+ 00B3 5E                                   ld      e,(hl)                          ; de = log a
 104+ 00B4 23                                   inc     hl                              ; .
 105+ 00B5 56                                   ld      d,(hl)                          ; .
 106+ 00B6 21 A9 F3                             ld      hl,$F3A9                        ; hl = $F3A9 = log 197
 107+ 00B9                                      ClearCarryFlag
 107+ 00B9 B7          >                        or a
 108+ 00BA EB                                   ex      hl,de                           ; hl = log a, de = log 197
 109+ 00BB ED 52                                sbc     hl,de
 110+ 00BD 7C                                   ld      a,h
 111+ 00BE 21 F7 02                             ld      hl,AnitLogODDTable
 112+ 00C1 ED 31                                add     hl,a
 113+ 00C3 ED 31                                add     hl,a
 114+ 00C5 7E                                   ld      a,(hl)
 115+ 00C6                                      ClearCarryFlag
 115+ 00C6 B7          >                        or a
 116+ 00C7 C9                                   ret
 117+ 00C8              .ResultIsZero:          ClearCarryFlag
 117+ 00C8 B7          >                        or a
 118+ 00C9                                      ZeroA
 118+ 00C9 AF          >                        xor a
 119+ 00CA C9                                   ret
 120+ 00CB
 121+ 00CB
 122+ 00CB              AEquAmul256Div197Log:   JumpIfAIsZero   .ResultIsZero
 122+ 00CB A7          >                        and     a   ; cp 0 - changed to and a for optimisation but affects other flags
 122+ 00CC CA F5 00    >                        jp	    z, .ResultIsZero
 123+ 00CF                                      JumpIfAGTENusng d, AEquAmul256Div197LogLT
 123+ 00CF BA          >                        cp     d
 123+ 00D0 D2 A8 00    >                        jp		nc,AEquAmul256Div197LogLT
 124+ 00D3 21 F7 04                             ld      hl,LogTable                     ; point to log a in LogTable
 125+ 00D6 ED 31                                add     hl,a                            ; Note we can't sla in case a > 127
 126+ 00D8 ED 31                                add     hl,a
 127+ 00DA 5E                                   ld      e,(hl)                          ; de = log a
 128+ 00DB 23                                   inc     hl                              ; .
 129+ 00DC 56                                   ld      d,(hl)                          ; .
 130+ 00DD 21 A9 F3                             ld      hl,$F3A9                        ; hl = $F3A9 = log 197
 131+ 00E0                                      ClearCarryFlag
 131+ 00E0 B7          >                        or a
 132+ 00E1 EB                                   ex      hl,de                           ; hl = log a, de = log 197
 133+ 00E2 ED 52                                sbc     hl,de
 134+ 00E4 38 0B                                jr      c,.ResultIsOne
 135+ 00E6 7C                                   ld      a,h
 136+ 00E7 21 F7 00                             ld      hl,AntiLogTable
 137+ 00EA ED 31                                add     hl,a
 138+ 00EC ED 31                                add     hl,a
 139+ 00EE 7E                                   ld      a,(hl)
 140+ 00EF                                      ClearCarryFlag
 140+ 00EF B7          >                        or a
 141+ 00F0 C9                                   ret
 142+ 00F1              .ResultIsOne:           ClearCarryFlag
 142+ 00F1 B7          >                        or a
 143+ 00F2 3E FF                                ld      a,$FF
 144+ 00F4 C9                                   ret
 145+ 00F5              .ResultIsZero:          ClearCarryFlag
 145+ 00F5 B7          >                        or a
 146+ 00F6 C9                                   ret
# file closed: ./Maths/logmaths.asm
1047  00F7                                      INCLUDE "./Tables/antilogtable.asm"
# file opened: ./Tables/antilogtable.asm
   1+ 00F7 01 00 01 00  AntiLogTable:           DW $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01
   1+ 00FB 01 00 01 00
   1+ 00FF 01 00 01 00
   1+ 0103 01 00 01 00
   1+ 0107 01 00 01 00
   1+ 010B 01 00 01 00
   1+ 010F 01 00 01 00
   1+ 0113 01 00 01 00
   2+ 0117 01 00 01 00                          DW $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01
   2+ 011B 01 00 01 00
   2+ 011F 01 00 01 00
   2+ 0123 01 00 01 00
   2+ 0127 01 00 01 00
   2+ 012B 01 00 01 00
   2+ 012F 01 00 01 00
   2+ 0133 01 00 01 00
   3+ 0137 02 00 02 00                          DW $02, $02, $02, $02, $02, $02, $02, $02, $02, $02, $02, $02, $02, $02, $02, $02
   3+ 013B 02 00 02 00
   3+ 013F 02 00 02 00
   3+ 0143 02 00 02 00
   3+ 0147 02 00 02 00
   3+ 014B 02 00 02 00
   3+ 014F 02 00 02 00
   3+ 0153 02 00 02 00
   4+ 0157 02 00 02 00                          DW $02, $02, $02, $03, $03, $03, $03, $03, $03, $03, $03, $03, $03, $03, $03, $03
   4+ 015B 02 00 03 00
   4+ 015F 03 00 03 00
   4+ 0163 03 00 03 00
   4+ 0167 03 00 03 00
   4+ 016B 03 00 03 00
   4+ 016F 03 00 03 00
   4+ 0173 03 00 03 00
   5+ 0177 04 00 04 00                          DW $04, $04, $04, $04, $04, $04, $04, $04, $04, $04, $04, $05, $05, $05, $05, $05
   5+ 017B 04 00 04 00
   5+ 017F 04 00 04 00
   5+ 0183 04 00 04 00
   5+ 0187 04 00 04 00
   5+ 018B 04 00 05 00
   5+ 018F 05 00 05 00
   5+ 0193 05 00 05 00
   6+ 0197 05 00 05 00                          DW $05, $05, $05, $06, $06, $06, $06, $06, $06, $06, $07, $07, $07, $07, $07, $07
   6+ 019B 05 00 06 00
   6+ 019F 06 00 06 00
   6+ 01A3 06 00 06 00
   6+ 01A7 06 00 06 00
   6+ 01AB 07 00 07 00
   6+ 01AF 07 00 07 00
   6+ 01B3 07 00 07 00
   7+ 01B7 08 00 08 00                          DW $08, $08, $08, $08, $08, $08, $09, $09, $09, $09, $09, $0A, $0A, $0A, $0A, $0B
   7+ 01BB 08 00 08 00
   7+ 01BF 08 00 08 00
   7+ 01C3 09 00 09 00
   7+ 01C7 09 00 09 00
   7+ 01CB 09 00 0A 00
   7+ 01CF 0A 00 0A 00
   7+ 01D3 0A 00 0B 00
   8+ 01D7 0B 00 0B 00                          DW $0B, $0B, $0B, $0C, $0C, $0C, $0C, $0D, $0D, $0D, $0E, $0E, $0E, $0E, $0F, $0F
   8+ 01DB 0B 00 0C 00
   8+ 01DF 0C 00 0C 00
   8+ 01E3 0C 00 0D 00
   8+ 01E7 0D 00 0D 00
   8+ 01EB 0E 00 0E 00
   8+ 01EF 0E 00 0E 00
   8+ 01F3 0F 00 0F 00
   9+ 01F7 10 00 10 00                          DW $10, $10, $10, $11, $11, $11, $12, $12, $13, $13, $13, $14, $14, $15, $15, $16
   9+ 01FB 10 00 11 00
   9+ 01FF 11 00 11 00
   9+ 0203 12 00 12 00
   9+ 0207 13 00 13 00
   9+ 020B 13 00 14 00
   9+ 020F 14 00 15 00
   9+ 0213 15 00 16 00
  10+ 0217 16 00 17 00                          DW $16, $17, $17, $18, $18, $19, $19, $1A, $1A, $1B, $1C, $1C, $1D, $1D, $1E, $1F
  10+ 021B 17 00 18 00
  10+ 021F 18 00 19 00
  10+ 0223 19 00 1A 00
  10+ 0227 1A 00 1B 00
  10+ 022B 1C 00 1C 00
  10+ 022F 1D 00 1D 00
  10+ 0233 1E 00 1F 00
  11+ 0237 20 00 20 00                          DW $20, $20, $21, $22, $22, $23, $24, $25, $26, $26, $27, $28, $29, $2A, $2B, $2C
  11+ 023B 21 00 22 00
  11+ 023F 22 00 23 00
  11+ 0243 24 00 25 00
  11+ 0247 26 00 26 00
  11+ 024B 27 00 28 00
  11+ 024F 29 00 2A 00
  11+ 0253 2B 00 2C 00
  12+ 0257 2D 00 2E 00                          DW $2D, $2E, $2F, $30, $31, $32, $33, $34, $35, $36, $38, $39, $3A, $3B, $3D, $3E
  12+ 025B 2F 00 30 00
  12+ 025F 31 00 32 00
  12+ 0263 33 00 34 00
  12+ 0267 35 00 36 00
  12+ 026B 38 00 39 00
  12+ 026F 3A 00 3B 00
  12+ 0273 3D 00 3E 00
  13+ 0277 40 00 41 00                          DW $40, $41, $42, $44, $45, $47, $48, $4A, $4C, $4D, $4F, $51, $52, $54, $56, $58
  13+ 027B 42 00 44 00
  13+ 027F 45 00 47 00
  13+ 0283 48 00 4A 00
  13+ 0287 4C 00 4D 00
  13+ 028B 4F 00 51 00
  13+ 028F 52 00 54 00
  13+ 0293 56 00 58 00
  14+ 0297 5A 00 5C 00                          DW $5A, $5C, $5E, $60, $62, $64, $67, $69, $6B, $6D, $70, $72, $75, $77, $7A, $7D
  14+ 029B 5E 00 60 00
  14+ 029F 62 00 64 00
  14+ 02A3 67 00 69 00
  14+ 02A7 6B 00 6D 00
  14+ 02AB 70 00 72 00
  14+ 02AF 75 00 77 00
  14+ 02B3 7A 00 7D 00
  15+ 02B7 80 00 82 00                          DW $80, $82, $85, $88, $8B, $8E, $91, $94, $98, $9B, $9E, $A2, $A5, $A9, $AD, $B1
  15+ 02BB 85 00 88 00
  15+ 02BF 8B 00 8E 00
  15+ 02C3 91 00 94 00
  15+ 02C7 98 00 9B 00
  15+ 02CB 9E 00 A2 00
  15+ 02CF A5 00 A9 00
  15+ 02D3 AD 00 B1 00
  16+ 02D7 B5 00 B8 00                          DW $B5, $B8, $BD, $C1, $C5, $C9, $CE, $D2, $D7, $DB, $E0, $E5, $EA, $EF, $F5, $FA
  16+ 02DB BD 00 C1 00
  16+ 02DF C5 00 C9 00
  16+ 02E3 CE 00 D2 00
  16+ 02E7 D7 00 DB 00
  16+ 02EB E0 00 E5 00
  16+ 02EF EA 00 EF 00
  16+ 02F3 F5 00 FA 00
  17+ 02F7
  18+ 02F7 01 00 01 00  AnitLogODDTable:        DW $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01 ;  0 - 15
  18+ 02FB 01 00 01 00
  18+ 02FF 01 00 01 00
  18+ 0303 01 00 01 00
  18+ 0307 01 00 01 00
  18+ 030B 01 00 01 00
  18+ 030F 01 00 01 00
  18+ 0313 01 00 01 00
  19+ 0317 01 00 01 00                          DW $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01 ; 16 - 31
  19+ 031B 01 00 01 00
  19+ 031F 01 00 01 00
  19+ 0323 01 00 01 00
  19+ 0327 01 00 01 00
  19+ 032B 01 00 01 00
  19+ 032F 01 00 01 00
  19+ 0333 01 00 01 00
  20+ 0337 02 00 02 00                          DW $02, $02, $02, $02, $02, $02, $02, $02, $02, $02, $02, $02, $02, $02, $02, $02 ; 32 - 47
  20+ 033B 02 00 02 00
  20+ 033F 02 00 02 00
  20+ 0343 02 00 02 00
  20+ 0347 02 00 02 00
  20+ 034B 02 00 02 00
  20+ 034F 02 00 02 00
  20+ 0353 02 00 02 00
  21+ 0357 02 00 02 00                          DW $02, $02, $02, $03, $03, $03, $03, $03, $03, $03, $03, $03, $03, $03, $03, $03 ; 48 - 55
  21+ 035B 02 00 03 00
  21+ 035F 03 00 03 00
  21+ 0363 03 00 03 00
  21+ 0367 03 00 03 00
  21+ 036B 03 00 03 00
  21+ 036F 03 00 03 00
  21+ 0373 03 00 03 00
  22+ 0377 04 00 04 00                          DW $04, $04, $04, $04, $04, $04, $04, $04, $04, $04, $05, $05, $05, $05, $05, $05 ; 64 - 71
  22+ 037B 04 00 04 00
  22+ 037F 04 00 04 00
  22+ 0383 04 00 04 00
  22+ 0387 04 00 04 00
  22+ 038B 05 00 05 00
  22+ 038F 05 00 05 00
  22+ 0393 05 00 05 00
  23+ 0397 05 00 05 00                          DW $05, $05, $05, $06, $06, $06, $06, $06, $06, $06, $07, $07, $07, $07, $07, $07 ; 80 - 87
  23+ 039B 05 00 06 00
  23+ 039F 06 00 06 00
  23+ 03A3 06 00 06 00
  23+ 03A7 06 00 06 00
  23+ 03AB 07 00 07 00
  23+ 03AF 07 00 07 00
  23+ 03B3 07 00 07 00
  24+ 03B7 08 00 08 00                          DW $08, $08, $08, $08, $08, $09, $09, $09, $09, $09, $0A, $0A, $0A, $0A, $0A, $0B ; 96 -
  24+ 03BB 08 00 08 00
  24+ 03BF 08 00 09 00
  24+ 03C3 09 00 09 00
  24+ 03C7 09 00 09 00
  24+ 03CB 0A 00 0A 00
  24+ 03CF 0A 00 0A 00
  24+ 03D3 0A 00 0B 00
  25+ 03D7 0B 00 0B 00                          DW $0B, $0B, $0B, $0C, $0C, $0C, $0D, $0D, $0D, $0D, $0E, $0E, $0E, $0F, $0F, $0F ; 112
  25+ 03DB 0B 00 0C 00
  25+ 03DF 0C 00 0C 00
  25+ 03E3 0D 00 0D 00
  25+ 03E7 0D 00 0D 00
  25+ 03EB 0E 00 0E 00
  25+ 03EF 0E 00 0F 00
  25+ 03F3 0F 00 0F 00
  26+ 03F7 10 00 10 00                          DW $10, $10, $10, $11, $11, $12, $12, $12, $13, $13, $14, $14, $14, $15, $15, $16 ; 128
  26+ 03FB 10 00 11 00
  26+ 03FF 11 00 12 00
  26+ 0403 12 00 12 00
  26+ 0407 13 00 13 00
  26+ 040B 14 00 14 00
  26+ 040F 14 00 15 00
  26+ 0413 15 00 16 00
  27+ 0417 16 00 17 00                          DW $16, $17, $17, $18, $18, $19, $1A, $1A, $1B, $1B, $1C, $1D, $1D, $1E, $1E, $1F ; 144
  27+ 041B 17 00 18 00
  27+ 041F 18 00 19 00
  27+ 0423 1A 00 1A 00
  27+ 0427 1B 00 1B 00
  27+ 042B 1C 00 1D 00
  27+ 042F 1D 00 1E 00
  27+ 0433 1E 00 1F 00
  28+ 0437 20 00 21 00                          DW $20, $21, $21, $22, $23, $24, $24, $25, $26, $27, $28, $29, $29, $2A, $2B, $2C ; 160
  28+ 043B 21 00 22 00
  28+ 043F 23 00 24 00
  28+ 0443 24 00 25 00
  28+ 0447 26 00 27 00
  28+ 044B 28 00 29 00
  28+ 044F 29 00 2A 00
  28+ 0453 2B 00 2C 00
  29+ 0457 2D 00 2E 00                          DW $2D, $2E, $2F, $30, $31, $32, $34, $35, $36, $37, $38, $3A, $3B, $3C, $3D, $3F ; 176
  29+ 045B 2F 00 30 00
  29+ 045F 31 00 32 00
  29+ 0463 34 00 35 00
  29+ 0467 36 00 37 00
  29+ 046B 38 00 3A 00
  29+ 046F 3B 00 3C 00
  29+ 0473 3D 00 3F 00
  30+ 0477 40 00 42 00                          DW $40, $42, $43, $45, $46, $48, $49, $4B, $4C, $4E, $50, $52, $53, $55, $57, $59 ; 192
  30+ 047B 43 00 45 00
  30+ 047F 46 00 48 00
  30+ 0483 49 00 4B 00
  30+ 0487 4C 00 4E 00
  30+ 048B 50 00 52 00
  30+ 048F 53 00 55 00
  30+ 0493 57 00 59 00
  31+ 0497 5B 00 5D 00                          DW $5B, $5D, $5F, $61, $63, $65, $68, $6A, $6C, $6F, $71, $74, $76, $79, $7B, $7E ; 208
  31+ 049B 5F 00 61 00
  31+ 049F 63 00 65 00
  31+ 04A3 68 00 6A 00
  31+ 04A7 6C 00 6F 00
  31+ 04AB 71 00 74 00
  31+ 04AF 76 00 79 00
  31+ 04B3 7B 00 7E 00
  32+ 04B7 81 00 84 00                          DW $81, $84, $87, $8A, $8D, $90, $93, $96, $99, $9D, $A0, $A4, $A7, $AB, $AF, $B3 ; 224
  32+ 04BB 87 00 8A 00
  32+ 04BF 8D 00 90 00
  32+ 04C3 93 00 96 00
  32+ 04C7 99 00 9D 00
  32+ 04CB A0 00 A4 00
  32+ 04CF A7 00 AB 00
  32+ 04D3 AF 00 B3 00
  33+ 04D7 B6 00 BA 00                          DW $B6, $BA, $BF, $C3, $C7, $CB, $D0, $D4, $D9, $DE, $E3, $E8, $ED, $F2, $F7, $FD ; 240 - 255
  33+ 04DB BF 00 C3 00
  33+ 04DF C7 00 CB 00
  33+ 04E3 D0 00 D4 00
  33+ 04E7 D9 00 DE 00
  33+ 04EB E3 00 E8 00
  33+ 04EF ED 00 F2 00
  33+ 04F3 F7 00 FD 00
  34+ 04F7
# file closed: ./Tables/antilogtable.asm
1048  04F7                                      INCLUDE "./Tables/logtable.asm"
# file opened: ./Tables/logtable.asm
   1+ 04F7 00 00        LogTable:               DW $0000                                                            ; 0
   2+ 04F9 00 00 06 20                          DW $0000, $2006, $320F, $400D, $4AEC, $5216, $59C2, $6013           ; 8
   2+ 04FD 0F 32 0D 40
   2+ 0501 EC 4A 16 52
   2+ 0505 C2 59 13 60
   3+ 0509 1E 65 F2 6A                          DW $651E, $6AF2, $6E9A, $721C, $7680, $79C9, $7DFB, $801A           ; 16
   3+ 050D 9A 6E 1C 72
   3+ 0511 80 76 C9 79
   3+ 0515 FB 7D 1A 80
   4+ 0519 27 82 25 85                          DW $8227, $8525, $8715, $8AF9, $8CD2, $8EA0, $9066, $9223           ; 24
   4+ 051D 15 87 F9 8A
   4+ 0521 D2 8C A0 8E
   4+ 0525 66 90 23 92
   5+ 0529 D8 94 86 96                          DW $94D8, $9686, $982E, $99CF, $9B6B, $9D02, $9E93, $A020           ; 32
   5+ 052D 2E 98 CF 99
   5+ 0531 6B 9B 02 9D
   5+ 0535 93 9E 20 A0
   6+ 0539 A9 A1 2E A2                          DW $A1A9, $A22E, $A4AE, $A52C, $A6A5, $A71C, $A98F, $AA00           ; 40
   6+ 053D AE A4 2C A5
   6+ 0541 A5 A6 1C A7
   6+ 0545 8F A9 00 AA
   7+ 0549 6D AB D8 AC                          DW $AB6D, $ACD8, $AD41, $AEA7, $AF0B, $B06C, $B1CC, $B229           ; 48
   7+ 054D 41 AD A7 AE
   7+ 0551 0B AF 6C B0
   7+ 0555 CC B1 29 B2
   8+ 0559 85 B3 DF B4                          DW $B385, $B4DF, $B537, $B68D, $B7E1, $B834, $B986, $B9D6           ; 56
   8+ 055D 37 B5 8D B6
   8+ 0561 E1 B7 34 B8
   8+ 0565 86 B9 D6 B9
   9+ 0569 25 BA 72 BB                          DW $BA25, $BB72, $BCBE, $BD08, $BD52, $BE9A, $BFE1, $C027           ; 64
   9+ 056D BE BC 08 BD
   9+ 0571 52 BD 9A BE
   9+ 0575 E1 BF 27 C0
  10+ 0579 6C C0 B0 C1                          DW $C06C, $C1B0, $C2F2, $C234, $C375, $C4B5, $C4F4, $C532           ; 72
  10+ 057D F2 C2 34 C2
  10+ 0581 75 C3 B5 C4
  10+ 0585 F4 C4 32 C5
  11+ 0589 6F C6 AC C6                          DW $C66F, $C6AC, $C7E7, $C722, $C85C, $C996, $C9CE, $CA06           ; 80
  11+ 058D E7 C7 22 C7
  11+ 0591 5C C8 96 C9
  11+ 0595 CE C9 06 CA
  12+ 0599 3D CA 74 CB                          DW $CA3D, $CB74, $CCAA, $CCDF, $CD13, $CD47, $CE7B, $CEAD           ; 88
  12+ 059D AA CC DF CC
  12+ 05A1 13 CD 47 CD
  12+ 05A5 7B CE AD CE
  13+ 05A9 E0 CF 11 CF                          DW $CFE0, $CF11, $D042, $D073, $D1A3, $D1D2, $D201, $D230           ; 96
  13+ 05AD 42 D0 73 D0
  13+ 05B1 A3 D1 D2 D1
  13+ 05B5 01 D2 30 D2
  14+ 05B9 5E D3 8B D3                          DW $D35E, $D38B, $D4B9, $D4E5, $D511, $D53D, $D568, $D693           ; 104
  14+ 05BD B9 D4 E5 D4
  14+ 05C1 11 D5 3D D5
  14+ 05C5 68 D5 93 D6
  15+ 05C9 BE D6 E8 D7                          DW $D6BE, $D7E8, $D712, $D83B, $D864, $D98C, $D9B5, $D9DD           ; 112
  15+ 05CD 12 D7 3B D8
  15+ 05D1 64 D8 8C D9
  15+ 05D5 B5 D9 DD D9
  16+ 05D9 04 DA 2B DA                          DW $DA04, $DA2B, $DB52, $DB78, $DB9E, $DCC4, $DCEA, $DD0F           ; 120
  16+ 05DD 52 DB 78 DB
  16+ 05E1 9E DB C4 DC
  16+ 05E5 EA DC 0F DD
  17+ 05E9 34 DD 58 DD                          DW $DD34, $DD58, $DE7D, $DEA1, $DEC4, $DFE8, $DF0B, $E02E           ; 128
  17+ 05ED 7D DE A1 DE
  17+ 05F1 C4 DE E8 DF
  17+ 05F5 0B DF 2E E0
  18+ 05F9 50 E0 72 E0                          DW $E050, $E072, $E194, $E1B6, $E1D8, $E2F9, $E21A, $E23B           ; 136
  18+ 05FD 94 E1 B6 E1
  18+ 0601 D8 E1 F9 E2
  18+ 0605 1A E2 3B E2
  19+ 0609 5B E3 7C E3                          DW $E35B, $E37C, $E39C, $E4BC, $E4DB, $E4FB, $E51A, $E539           ; 144
  19+ 060D 9C E3 BC E4
  19+ 0611 DB E4 FB E4
  19+ 0615 1A E5 39 E5
  20+ 0619 57 E5 76 E6                          DW $E557, $E676, $E694, $E6B2, $E7D0, $E7EE, $E70C, $E729           ; 152
  20+ 061D 94 E6 B2 E6
  20+ 0621 D0 E7 EE E7
  20+ 0625 0C E7 29 E7
  21+ 0629 46 E8 63 E8                          DW $E846, $E863, $E880, $E99C, $E9B9, $E9D5, $EAF1, $EA0D           ; 160
  21+ 062D 80 E8 9C E9
  21+ 0631 B9 E9 D5 E9
  21+ 0635 F1 EA 0D EA
  22+ 0639 28 EA 44 EA                          DW $EA28, $EA44, $EB5F, $EB7A, $EB95, $ECB0, $ECCB, $ECE5           ; 168
  22+ 063D 5F EB 7A EB
  22+ 0641 95 EB B0 EC
  22+ 0645 CB EC E5 EC
  23+ 0649 00 EC 1A ED                          DW $EC00, $ED1A, $ED34, $ED4E, $ED68, $EE81, $EE9B, $EEB4           ; 176
  23+ 064D 34 ED 4E ED
  23+ 0651 68 ED 81 EE
  23+ 0655 9B EE B4 EE
  24+ 0659 CD EE E6 EF                          DW $EECD, $EFE6, $EFFF, $EF18, $EF30, $F049, $F061, $F079           ; 184
  24+ 065D FF EF 18 EF
  24+ 0661 30 EF 49 F0
  24+ 0665 61 F0 79 F0
  25+ 0669 91 F1 A9 F1                          DW $F191, $F1A9, $F1C1, $F1D9, $F1F0, $F208, $F21F, $F236           ; 192
  25+ 066D C1 F1 D9 F1
  25+ 0671 F0 F1 08 F2
  25+ 0675 1F F2 36 F2
  26+ 0679 4E F2 64 F3                          DW $F24E, $F364, $F37B, $F392, $F3A9, $F4BF, $F4D5, $F4EC           ; 200
  26+ 067D 7B F3 92 F3
  26+ 0681 A9 F3 BF F4
  26+ 0685 D5 F4 EC F4
  27+ 0689 02 F4 18 F5                          DW $F402, $F518, $F52E, $F544, $F559, $F56F, $F685, $F69A           ; 208
  27+ 068D 2E F5 44 F5
  27+ 0691 59 F5 6F F5
  27+ 0695 85 F6 9A F6
  28+ 0699 AF F6 C4 F6                          DW $F6AF, $F6C4, $F7DA, $F7EF, $F703, $F718, $F72D, $F842           ; 216
  28+ 069D DA F7 EF F7
  28+ 06A1 03 F7 18 F7
  28+ 06A5 2D F7 42 F8
  29+ 06A9 56 F8 6B F8                          DW $F856, $F86B, $F87F, $F993, $F9A7, $F9BB, $F9CF, $F9E3           ; 224
  29+ 06AD 7F F8 93 F9
  29+ 06B1 A7 F9 BB F9
  29+ 06B5 CF F9 E3 F9
  30+ 06B9 F7 FA 0B FA                          DW $FAF7, $FA0B, $FA1E, $FA32, $FA45, $FB58, $FB6C, $FB7F           ; 232
  30+ 06BD 1E FA 32 FA
  30+ 06C1 45 FA 58 FB
  30+ 06C5 6C FB 7F FB
  31+ 06C9 92 FB A5 FB                          DW $FB92, $FBA5, $FCB8, $FCCB, $FCDE, $FCF0, $FC03, $FD16           ; 240
  31+ 06CD B8 FC CB FC
  31+ 06D1 DE FC F0 FC
  31+ 06D5 03 FC 16 FD
  32+ 06D9 28 FD 3A FD                          DW $FD28, $FD3A, $FD4D, $FD5F, $FD71, $FE83, $FE95, $FEA7           ; 248
  32+ 06DD 4D FD 5F FD
  32+ 06E1 71 FD 83 FE
  32+ 06E5 95 FE A7 FE
  33+ 06E9 B9 FE CB FE                          DW $FEB9, $FECB, $FFDD, $FFEE, $FF00, $FF11, $FF23                  ; 255
  33+ 06ED DD FF EE FF
  33+ 06F1 00 FF 11 FF
  33+ 06F5 23 FF
  34+ 06F7
  35+ 06F7 00 00 00 00  LogReverseHighByte:     DW $00, 000, $20, 002, $32, 003, $40, 004, $4A, 005, $52, 006
  35+ 06FB 20 00 02 00
  35+ 06FF 32 00 03 00
  35+ 0703 40 00 04 00
  35+ 0707 4A 00 05 00
  35+ 070B 52 00 06 00
  36+ 070F 59 00 07 00                          DW $59, 007, $60, 008, $65, 009, $6A, 010, $6E, 011, $72, 012
  36+ 0713 60 00 08 00
  36+ 0717 65 00 09 00
  36+ 071B 6A 00 0A 00
  36+ 071F 6E 00 0B 00
  36+ 0723 72 00 0C 00
  37+ 0727 76 00 0D 00                          DW $76, 013, $79, 014, $7D, 015, $80, 016, $82, 017, $85, 018
  37+ 072B 79 00 0E 00
  37+ 072F 7D 00 0F 00
  37+ 0733 80 00 10 00
  37+ 0737 82 00 11 00
  37+ 073B 85 00 12 00
  38+ 073F 87 00 13 00                          DW $87, 019, $8A, 020, $8C, 021, $8E, 022, $90, 023, $92, 024
  38+ 0743 8A 00 14 00
  38+ 0747 8C 00 15 00
  38+ 074B 8E 00 16 00
  38+ 074F 90 00 17 00
  38+ 0753 92 00 18 00
  39+ 0757 94 00 19 00                          DW $94, 025, $96, 026, $98, 027, $99, 028, $9B, 029, $9D, 030
  39+ 075B 96 00 1A 00
  39+ 075F 98 00 1B 00
  39+ 0763 99 00 1C 00
  39+ 0767 9B 00 1D 00
  39+ 076B 9D 00 1E 00
  40+ 076F 9E 00 1F 00                          DW $9E, 031, $A0, 032, $A1, 033, $A2, 034, $A4, 035, $A5, 036
  40+ 0773 A0 00 20 00
  40+ 0777 A1 00 21 00
  40+ 077B A2 00 22 00
  40+ 077F A4 00 23 00
  40+ 0783 A5 00 24 00
  41+ 0787 A6 00 25 00                          DW $A6, 037, $A7, 038, $A9, 039, $AA, 040, $AB, 041, $AC, 042
  41+ 078B A7 00 26 00
  41+ 078F A9 00 27 00
  41+ 0793 AA 00 28 00
  41+ 0797 AB 00 29 00
  41+ 079B AC 00 2A 00
  42+ 079F AD 00 2B 00                          DW $AD, 043, $AE, 044, $AF, 045, $B0, 046, $B1, 047, $B2, 048
  42+ 07A3 AE 00 2C 00
  42+ 07A7 AF 00 2D 00
  42+ 07AB B0 00 2E 00
  42+ 07AF B1 00 2F 00
  42+ 07B3 B2 00 30 00
  43+ 07B7 B3 00 31 00                          DW $B3, 049, $B4, 050, $B5, 051, $B6, 052, $B7, 053, $B8, 054
  43+ 07BB B4 00 32 00
  43+ 07BF B5 00 33 00
  43+ 07C3 B6 00 34 00
  43+ 07C7 B7 00 35 00
  43+ 07CB B8 00 36 00
  44+ 07CF B9 00 38 00                          DW $B9, 056, $B9, 056, $BA, 057, $BB, 058, $BC, 059, $BD, 060
  44+ 07D3 B9 00 38 00
  44+ 07D7 BA 00 39 00
  44+ 07DB BB 00 3A 00
  44+ 07DF BC 00 3B 00
  44+ 07E3 BD 00 3C 00
  45+ 07E7 BE 00 3E 00                          DW $BE, 062, $BF, 063, $C0, 064, $C1, 066, $C2, 067, $C3, 069
  45+ 07EB BF 00 3F 00
  45+ 07EF C0 00 40 00
  45+ 07F3 C1 00 42 00
  45+ 07F7 C2 00 43 00
  45+ 07FB C3 00 45 00
  46+ 07FF C4 00 46 00                          DW $C4, 070, $C5, 072, $C6, 072, $C7, 074, $C8, 076, $C9, 077
  46+ 0803 C5 00 48 00
  46+ 0807 C6 00 48 00
  46+ 080B C7 00 4A 00
  46+ 080F C8 00 4C 00
  46+ 0813 C9 00 4D 00
  47+ 0817 CA 00 50 00                          DW $CA, 080, $CB, 082, $CC, 083, $CD, 085, $CE, 087, $CF, 088
  47+ 081B CB 00 52 00
  47+ 081F CC 00 53 00
  47+ 0823 CD 00 55 00
  47+ 0827 CE 00 57 00
  47+ 082B CF 00 58 00
  48+ 082F D0 00 5A 00                          DW $D0, 090, $D1, 092, $D2, 094, $D3, 097, $D4, 100, $D5, 102
  48+ 0833 D1 00 5C 00
  48+ 0837 D2 00 5E 00
  48+ 083B D3 00 61 00
  48+ 083F D4 00 64 00
  48+ 0843 D5 00 66 00
  49+ 0847 D6 00 68 00                          DW $D6, 104, $D6, 105, $D7, 106, $D7, 107, $D8, 108, $D8, 109
  49+ 084B D6 00 69 00
  49+ 084F D7 00 6A 00
  49+ 0853 D7 00 6B 00
  49+ 0857 D8 00 6C 00
  49+ 085B D8 00 6D 00
  50+ 085F D9 00 6E 00                          DW $D9, 110, $D9, 111, $D9, 112, $DA, 113, $DB, 114, $DC, 117
  50+ 0863 D9 00 6F 00
  50+ 0867 D9 00 70 00
  50+ 086B DA 00 71 00
  50+ 086F DB 00 72 00
  50+ 0873 DC 00 75 00
  51+ 0877 DD 00 78 00                          DW $DD, 120, $DE, 123, $DF, 126, $E0, 128, $E1, 131, $E2, 134
  51+ 087B DE 00 7B 00
  51+ 087F DF 00 7E 00
  51+ 0883 E0 00 80 00
  51+ 0887 E1 00 83 00
  51+ 088B E2 00 86 00
  52+ 088F E3 00 89 00                          DW $E3, 137, $E4, 140, $E5, 143, $E6, 146, $E7, 149, $E8, 153
  52+ 0893 E4 00 8C 00
  52+ 0897 E5 00 8F 00
  52+ 089B E6 00 92 00
  52+ 089F E7 00 95 00
  52+ 08A3 E8 00 99 00
  53+ 08A7 E9 00 9C 00                          DW $E9, 156, $EA, 159, $EB, 163, $EC, 166, $ED, 170, $EE, 174
  53+ 08AB EA 00 9F 00
  53+ 08AF EB 00 A3 00
  53+ 08B3 EC 00 A6 00
  53+ 08B7 ED 00 AA 00
  53+ 08BB EE 00 AE 00
  54+ 08BF EF 00 B2 00                          DW $EF, 178, $F0, 182, $F1, 185, $F2, 190, $F3, 194, $F4, 198
  54+ 08C3 F0 00 B6 00
  54+ 08C7 F1 00 B9 00
  54+ 08CB F2 00 BE 00
  54+ 08CF F3 00 C2 00
  54+ 08D3 F4 00 C6 00
  55+ 08D7 F5 00 CA 00                          DW $F5, 202, $F6, 207, $F7, 211, $F8, 216, $F8, 217, $F9, 220
  55+ 08DB F6 00 CF 00
  55+ 08DF F7 00 D3 00
  55+ 08E3 F8 00 D8 00
  55+ 08E7 F8 00 D9 00
  55+ 08EB F9 00 DC 00
  56+ 08EF FA 00 E1 00                          DW $FA, 225, $FB, 230, $FB, 233, $FC, 235, $FD, 240, $FE, 246
  56+ 08F3 FB 00 E6 00
  56+ 08F7 FB 00 E9 00
  56+ 08FB FC 00 EB 00
  56+ 08FF FD 00 F0 00
  56+ 0903 FE 00 F6 00
  57+ 0907 FF 00 FB 00                          DW $FF, 251
  58+ 090B              LogReverseTableLen:     EQU $ - LogReverseHighByte
# file closed: ./Tables/logtable.asm
1049  090B
1050  090B
1051  090B
1052  090B                  SAVENEX OPEN "EliteN.nex", $8000 , $7F00
1053  090B                  SAVENEX CFG  0,0,0,1
1054  090B                  SAVENEX AUTO
1055  090B                  SAVENEX CLOSE
1056  090B
# file closed: eliteNext.asm
