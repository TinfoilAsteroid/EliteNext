# file opened: eliteNext.asm
   1  0000               DEVICE ZXSPECTRUMNEXT
   2  0000               DEFINE  DOUBLEBUFFER 1
   3  0000               CSPECTMAP eliteN.map
   4  0000               OPT --zxnext=cspect --syntax=a --reversepop
   5  0000
   6  0000              DEBUGSEGSIZE   equ 1
   7  0000              DEBUGLOGSUMMARY equ 1
   8  0000              ;DEBUGLOGDETAIL equ 1
   9  0000
  10  0000              ;----------------------------------------------------------------------------------------------------------------------------------
  11  0000              ; Game Defines
  12  0000              ScreenLocal      EQU 0
  13  0000              ScreenGalactic   EQU ScreenLocal + 1
  14  0000              ScreenMarket     EQU ScreenGalactic + 1
  15  0000              ScreenMarketDsp  EQU ScreenMarket + 1
  16  0000              ScreenStatus     EQU ScreenMarketDsp + 1
  17  0000              ScreenInvent     EQU ScreenStatus + 1
  18  0000              ScreenPlanet     EQU ScreenInvent + 1
  19  0000              ScreenEquip      EQU ScreenPlanet + 1
  20  0000              ScreenLaunch     EQU ScreenEquip + 1
  21  0000              ScreenFront      EQU ScreenLaunch + 1
  22  0000              ScreenAft        EQU ScreenFront+1
  23  0000              ScreenLeft       EQU ScreenAft+1
  24  0000              ScreenRight      EQU ScreenLeft+1
  25  0000              ScreenDocking    EQU ScreenRight+1
  26  0000              ScreenHyperspace EQU ScreenDocking+1
  27  0000              ;----------------------------------------------------------------------------------------------------------------------------------
  28  0000              ; Colour Defines
  29  0000                  INCLUDE "./Hardware/L2ColourDefines.asm"
# file opened: ./Hardware/L2ColourDefines.asm
   1+ 0000              L2ColourBLACK           EQU   0
   2+ 0000              L2ColourRED_1           EQU 224                 ; RGB 255,  0,  0
   3+ 0000              L2ColourRED_2           EQU 192                 ; RGB 218,  0,  0
   4+ 0000              L2ColourRED_3           EQU 160                 ; RGB 182,  0,  0
   5+ 0000              L2ColourRED_4           EQU 128                 ; RGB 145,  0,  0
   6+ 0000              L2ColourRED_5           EQU  96                 ; RGB 109,  0,  0
   7+ 0000              L2ColourRED_6           EQU  64                 ; RGB  72,  0,  0
   8+ 0000              L2ColourRED_7           EQU  32                 ; RGB  36,  0,  0
   9+ 0000              L2ColourYELLOW_1        EQU 252                 ; RGB 255,255,  0
  10+ 0000              L2ColourYELLOW_2        EQU 216                 ; RGB 218,218,  0
  11+ 0000              L2ColourYELLOW_3        EQU 180                 ; RGB 182,182,  0
  12+ 0000              L2ColourYELLOW_4        EQU 144                 ; RGB 145,145,  0
  13+ 0000              L2ColourYELLOW_5        EQU 108                 ; RGB 109.109,  0
  14+ 0000              L2ColourYELLOW_6        EQU  72                 ; RGB  72, 72,  0
  15+ 0000              L2ColourYELLOW_7        EQU  36                 ; RGB  36, 36,  0
  16+ 0000              L2ColourGREEN_1		    EQU  28                 ; RGB   0,255,  0
  17+ 0000              L2ColourGREEN_2		    EQU  24                 ; RGB   0,218,  0
  18+ 0000              L2ColourGREEN_3		    EQU  16                 ; RGB   0,145,  0
  19+ 0000              L2ColourGREEN_4         EQU  12                 ; RGB   0,109,  0
  20+ 0000              L2ColourGREEN_5         EQU   8                 ; RGB   0, 72,  0
  21+ 0000              L2ColourGREEN_6         EQU   4                 ; RGB   0, 36,  0
  22+ 0000              L2ColourBLUE_1          EQU   3                 ; RGB 0,0,255
  23+ 0000              L2ColourBLUE_2          EQU   2                 ; RGB 0,0,170
  24+ 0000              L2ColourBLUE_3          EQU   1                 ; RGB 0,0,85
  25+ 0000
  26+ 0000
  27+ 0000              L2ColourWHITE_1         EQU 255                 ; RGB 255,255,255
  28+ 0000              L2ColourWHITE_2         EQU 146
  29+ 0000              L2ColourGREY_1		    EQU L2ColourWHITE_2
  30+ 0000              L2ColourGREY_2		    EQU 109
  31+ 0000              L2ColourGREY_3		    EQU  73
  32+ 0000              L2ColourGREY_4		    EQU  37
  33+ 0000
  34+ 0000              L2ColourGREEN_MB        EQU  29                 ;RGB 0,255,85
  35+ 0000              L2ColourGREEN_MR        EQU 124                 ;RGB 109.255,0
  36+ 0000              L2ColourCREAM_1         EQU 218                 ; RGB 218,218,170
  37+ 0000              L2ColourCREAM_2         EQU 182                 ; RGB 182,182,170
  38+ 0000              L2ColourCREAM_3         EQU 146                 ; RGB 145,145,170
  39+ 0000
  40+ 0000              L2ColourTRANSPARENT     EQU 227                 ; RGB 255,  0,255
  41+ 0000              L2ColourMAGENTA_1       EQU 162                 ; RGB 182,  0,170
  42+ 0000              L2ColourMAGENTA_2       EQU 130                 ; RGB 145,  0,170
  43+ 0000              L2ColourMAGENTA_3       EQU  97                 ; RGB 109,  0, 85
  44+ 0000              L2ColourMAGENTA_4       EQU  65                 ; RGB  72,  0, 85
  45+ 0000              L2ColourORANGE_1        EQU 236                 ; RGB
  46+ 0000              L2ColourORANGE_2        EQU 168                 ; RGB
  47+ 0000              L2ColourORANGE_3        EQU  68                 ; RGB
  48+ 0000              L2ColourCYAN_1          EQU  31                 ; RGB   0,255, 255
  49+ 0000              L2ColourCYAN_2          EQU  18                 ; RGB
  50+ 0000              L2ColourCYAN_3          EQU   9                 ; RGB
  51+ 0000              L2ColourPURPLE_1        EQU 109                 ; RGB
  52+ 0000              L2ColourPURPLE_2        EQU  66                 ; RGB
  53+ 0000              L2ColourPURPLE_3        EQU  33                 ; RGB
  54+ 0000              L2ColourPINK_1		    EQU 231                 ; RGB
  55+ 0000              L2ColourPINK_2		    EQU 226                 ; RGB
  56+ 0000              L2ColourPINK_3		    EQU 225                 ; RGB
  57+ 0000              L2ColourPINK_4		    EQU 224                 ; RGB
  58+ 0000
# file closed: ./Hardware/L2ColourDefines.asm
  30  0000                  INCLUDE "./Hardware/L1ColourDefines.asm"
# file opened: ./Hardware/L1ColourDefines.asm
   1+ 0000
   2+ 0000              L1ColourInkBlack        EQU %00000000
   3+ 0000              L1ColourInkBlue         EQU %00000001
   4+ 0000              L1ColourInkRed          EQU %00000010
   5+ 0000              L1ColourInkMagenta      EQU %00000011
   6+ 0000              L1ColourInkGreen        EQU %00000100
   7+ 0000              L1ColourInkCyan         EQU %00000101
   8+ 0000              L1ColourInkYellow       EQU %00000110
   9+ 0000              L1ColourInkWhite        EQU %00000111
  10+ 0000              L1ColourPaperBlack      EQU %00000000
  11+ 0000              L1ColourPaperBlue       EQU %00001000
  12+ 0000              L1ColourPaperRed        EQU %00010000
  13+ 0000              L1ColourPaperMagenta    EQU %00011000
  14+ 0000              L1ColourPaperGreen      EQU %00100000
  15+ 0000              L1ColourPaperCyan       EQU %00101000
  16+ 0000              L1ColourPaperYellow     EQU %00110000
  17+ 0000              L1ColourPaperWhite      EQU %00111000
  18+ 0000              L1ColourFlash           EQU %10000000
  19+ 0000              L1ColourBright          EQU %01000000
  20+ 0000              ;----------------------------------------------------------------------------------------------------------------------------------
  21+ 0000              ; Screen Specific Colour Defines
  22+ 0000              L1InvHighlight          EQU L1ColourBright | L1ColourPaperRed   | L1ColourInkYellow
  23+ 0000              L1InvLowlight           EQU                  L1ColourPaperBlack | L1ColourInkWhite
# file closed: ./Hardware/L1ColourDefines.asm
  31  0000              ;----------------------------------------------------------------------------------------------------------------------------------
  32  0000              ; Total screen list
  33  0000              ; Local Chart
  34  0000              ; Galactic Chart
  35  0000              ; Market Prices
  36  0000              ; Inventory
  37  0000              ; Comander status
  38  0000              ; System Data
  39  0000              ; Mission Briefing
  40  0000              ; missio completion
  41  0000              ; Docked  Menu (only place otehr than pause you can load and save)
  42  0000              ; Pause Menu (only place you can load from )
  43  0000              ; byint and selling equipment
  44  0000              ; bying and selling stock
  45  0000
  46  0000                                      INCLUDE "./Hardware/register_defines.asm"
# file opened: ./Hardware/register_defines.asm
   1+ 0000              IO_LAYER2_PORT                          EQU $123B
   2+ 0000              IO_EXT_BANK_PORT 			            EQU $DFFD ; 57341
   3+ 0000              IO_BANK_PORT                            EQU $7FFD ; 32765
   4+ 0000              REGISTER_NUMBER_PORT					EQU $243B
   5+ 0000              REGISTER_VALUE_PORT						EQU $253B
   6+ 0000              SPRITE_SLOT_PORT						EQU $303B
   7+ 0000              SPRITE_INFO_PORT                        EQU $0057
   8+ 0000              SPRITE_PATTERN_UPLOAD_PORT				EQU $005B
   9+ 0000
  10+ 0000              MACHINE_ID_REGISTER						EQU 0
  11+ 0000              VERSION_REGISTER						EQU 1
  12+ 0000              RESET_REGISTER		    				EQU 2
  13+ 0000              MACHINE_TYPE_REGISTER					EQU 3
  14+ 0000              PAGE_RAM_REGISTER						EQU 4
  15+ 0000              PERIPHERAL_1_REGISTER					EQU 5
  16+ 0000              PERIPHERAL_2_REGISTER					EQU 6
  17+ 0000              TURBO_MODE_REGISTER						EQU 7
  18+ 0000              PERIPHERAL_3_REGISTER					EQU 8
  19+ 0000              ANTI_BRICK_SYSTEM_REGISTER				EQU 10
  20+ 0000              LAYER2_RAM_PAGE_REGISTER				EQU 18
  21+ 0000              LAYER2_RAM_SHADOW_REGISTER      		EQU 19
  22+ 0000              TRANSPARENCY_COLOUR_REGISTER			EQU 20
  23+ 0000              SPRITE_LAYERS_SYSTEM_REGISTER			EQU 21
  24+ 0000              LAYER2_OFFSET_X_REGISTER				EQU 22
  25+ 0000              LAYER2_OFFSET_Y_REGISTER				EQU 23
  26+ 0000              CLIP_WINDOW_LAYER2_REGISTER				EQU 24
  27+ 0000              CLIP_WINDOW_SPRITES_REGISTER			EQU 25
  28+ 0000              CLIP_WINDOW_ULA_REGISTER				EQU 26
  29+ 0000              CLIP_WINDOW_CONTROL_REGISTER			EQU 28
  30+ 0000              ACTIVE_VIDEO_LINE_MSB_REGISTER			EQU 30
  31+ 0000              ACTIVE_VIDEO_LINE_LSB_REGISTER			EQU 31
  32+ 0000              LINE_INTERRUPT_CONTROL_REGISTER			EQU 34
  33+ 0000              LINE_INTERRUPT_VALUE_LSB_REGISTER		EQU 35
  34+ 0000              KEYMAP_HIGH_ADDRESS_REGISTER			EQU 40
  35+ 0000              KEYMAP_LOW_ADDRESS_REGISTER				EQU 41
  36+ 0000              KEYMAP_HIGH_DATA_REGISTER				EQU 42
  37+ 0000              KEYMAP_LOW_DATA_REGISTER				EQU 43
  38+ 0000              DAC_B_MIRROR_REGISTER                   EQU 44
  39+ 0000              DAC_AB_MIRROR_REGISTER                  EQU 45
  40+ 0000              DAC_C_MORROR_REGISTER                   EQU 46
  41+ 0000              TILEMAP_OFFSET_XMSB_REGISTER            EQU 47
  42+ 0000              TILEMAP_OFFSET_XLSB_REGISTER            EQU 48
  43+ 0000              TILEMAP_OFFSET_YMSB_REGISTER            EQU 49
  44+ 0000              LORES_OFFSET_X_REGISTER					EQU 50
  45+ 0000              LORES_OFFSET_Y_REGISTER					EQU 51
  46+ 0000              SPRITE_PORT_INDEX_REGISTER              EQU 52
  47+ 0000              SPRITE_PORT_ATTR0_REGISTER              EQU 53
  48+ 0000              SPRITE_PORT_ATTR1_REGISTER              EQU 54
  49+ 0000              SPRITE_PORT_ATTR2_REGISTER              EQU 55
  50+ 0000              SPRITE_PORT_ATTR3_REGISTER              EQU 56
  51+ 0000              SPRITE_PORT_ATTR4_REGISTER              EQU 57
  52+ 0000              PALETTE_INDEX_REGISTER					EQU 64
  53+ 0000              PALETTE_VALUE_8BIT_REGISTER				EQU 65
  54+ 0000              PALETTE_FORMAT_REGISTER					EQU 66
  55+ 0000              PALETTE_CONTROL_REGISTER				EQU 67
  56+ 0000              PALETTE_VALUE_9BIT_REGISTER				EQU 68
  57+ 0000              MMU_SLOT_0_REGISTER						EQU 80
  58+ 0000              MMU_SLOT_1_REGISTER						EQU 81
  59+ 0000              MMU_SLOT_2_REGISTER						EQU 82
  60+ 0000              MMU_SLOT_3_REGISTER						EQU 83
  61+ 0000              MMU_SLOT_4_REGISTER						EQU 84
  62+ 0000              MMU_SLOT_5_REGISTER						EQU 85
  63+ 0000              MMU_SLOT_6_REGISTER						EQU 86
  64+ 0000              MMU_SLOT_7_REGISTER						EQU 87
  65+ 0000              COPPER_DATA_REGISTER					EQU 96
  66+ 0000              COPPER_CONTROL_LOW_REGISTER				EQU 97
  67+ 0000              COPPER_CONTROL_HIGH_REGISTER			EQU 98
  68+ 0000              DISPLAY_CONTROL_1_REGISTER              EQU 105
  69+ 0000              LAYER_2_CONTROL_REGISTER                EQU 112
  70+ 0000              LAYER_2_X_OFFSET_MSB_REGISTER           EQU 113
  71+ 0000              DEBUG_LEDS_REGISTER						EQU 255
  72+ 0000
  73+ 0000
  74+ 0000              GetNextReg:	MACRO register
  75+ 0000 ~                        push bc
  76+ 0000 ~                            ld bc,$243B
  77+ 0000 ~                                ld a,register
  78+ 0000 ~                                out (c),a
  79+ 0000 ~                                inc b
  80+ 0000 ~                            in a,(c)
  81+ 0000 ~                        pop bc
  82+ 0000                          ENDM
  83+ 0000
# file closed: ./Hardware/register_defines.asm
  47  0000                                      INCLUDE "./Layer2Graphics/layer2_defines.asm"
# file opened: ./Layer2Graphics/layer2_defines.asm
   1+ 0000
   2+ 0000
   3+ 0000              LAYER2_SHIFTED_SCREEN_TOP  	 equ 0
   4+ 0000              LAYER2_SHIFTED_SCREEN_MIDDLE equ $40
   5+ 0000              LAYER2_SHIFTED_SCREEN_BOTTOM equ $80
   6+ 0000
   7+ 0000              ; note hi byte is not decoded on DMA port so can out OUTIR
   8+ 0000              IO_DATAGEAR_DMA_PORT 		 equ 107
   9+ 0000              IO_SPRITE_SLOT_PORT 		 equ 12347
  10+ 0000              IO_SPRITE_PATTERN_PORT       equ 91
  11+ 0000              IO_SPRITE_ATTRIBUTES_PORT    equ 87
  12+ 0000
  13+ 0000              LAYER2_VISIBLE_MASK 		equ $02
  14+ 0000              ; DEBUG 0 for always write to primary 08 for double buffering
  15+ 0000                  IFDEF DOUBLEBUFFER
  16+ 0000              LAYER2_SHADOW_SCREEN_MASK 	equ $08
  17+ 0000                  ELSE
  18+ 0000 ~            LAYER2_SHADOW_SCREEN_MASK 	equ $00
  19+ 0000                  ENDIF
  20+ 0000              LAYER2_WRITE_ENABLE_MASK 	equ $01
  21+ 0000              LAYER2_SCREEN_SECTION_MASK 	equ $03
  22+ 0000              LAYER2_SCREEN_SECTION_SHIFT equ 6
  23+ 0000
  24+ 0000              LAYER2_SCREEN_BANK1          equ 8
  25+ 0000              LAYER2_SCREEN_BANK2          equ 9
  26+ 0000              LAYER2_SCREEN_BANK3          equ 10
  27+ 0000              LAYER2_SHADOW_BANK1          equ 11
  28+ 0000              LAYER2_SHADOW_BANK2          equ 12
  29+ 0000              LAYER2_SHADOW_BANK3          equ 13
  30+ 0000
  31+ 0000              SCREEN_HEIGHT 				 equ 192
  32+ 0000              SCREEN_RAM_BASE				 equ $0000
  33+ 0000              SCREEN_HOZ_MIN_PIX		     equ 10
  34+ 0000
  35+ 0000              SPRITES_VISIBLE_MASK         equ $01
  36+ 0000              SPRITES_ON_BORDER_MASK       equ $02
  37+ 0000              LAYER_PRIORITIES_MASK        equ $07
  38+ 0000              LORES_MODE_MASK              equ $80
  39+ 0000              LAYER_PRIORITIES_SHIFT       equ 2
  40+ 0000
  41+ 0000              LAYER_PRIORITIES_S_L_U 		equ 0
  42+ 0000              LAYER_PRIORITIES_L_S_U 		equ 1
  43+ 0000              LAYER_PRIORITIES_S_U_L  	equ 2
  44+ 0000              LAYER_PRIORITIES_L_U_S 		equ 3
  45+ 0000              LAYER_PRIORITIES_U_S_L 		equ 4
  46+ 0000              LAYER_PRIORITIES_U_L_S 		equ 5
  47+ 0000
  48+ 0000              DMA_WRO_BLOCK_PORTA_A2B_XFR  equ $7D
  49+ 0000              DMA_WRO_BLOCK_PORTA_B2A_XFR  equ $79
  50+ 0000              DMA_WR1_P1FIXED_MEMORY       equ $24
  51+ 0000              DMA_WR1_P1DEC_MEMORY         equ $04
  52+ 0000              DMA_WR1_P1INC_MEMORY         equ $14
  53+ 0000              DMA_WR2_P2FIXED_MEMORY       equ $20
  54+ 0000              DMA_WR2_P2DEC_MEMORY         equ $00
  55+ 0000              DMA_WR2_P2INC_MEMORY         equ $10
  56+ 0000              DMA_WR4_CONT_MODE            equ $AD
  57+ 0000              DMA_RESET                    equ $c3
  58+ 0000              DMA_RESET_PORT_A_TIMING      equ $c7
  59+ 0000              DMA_RESET_PORT_B_TIMING      equ $cb
  60+ 0000              DMA_LOAD                     equ $cf
  61+ 0000              DMA_CONTINUE                 equ $d3
  62+ 0000              DMA_DISABLE_INTERUPTS        equ $af
  63+ 0000              DMA_ENABLE_INTERUPTS         equ $ab
  64+ 0000              DMA_RESET_DISABLE_INTERUPTS  equ $a3
  65+ 0000              DMA_ENABLE_AFTER_RETI        equ $b7
  66+ 0000              DMA_READ_STATUS_BYTE         equ $bf
  67+ 0000              DMA_REINIT_STATUS_BYTE       equ $8b
  68+ 0000              DMA_START_READ_SEQUENCE      equ $a7
  69+ 0000              DMA_FORCE_READY              equ $b3
  70+ 0000              DMA_STOP_AT_END			     equ $82
  71+ 0000              DMA_DISABLE                  equ $83
  72+ 0000              DMA_ENABLE                   equ $87
  73+ 0000              DMA_WRITE_REGISTER_COMMAND   equ $bb
  74+ 0000              DMA_BURST                    equ $cd
  75+ 0000              DMA_CONTINUOUS               equ $ad
  76+ 0000              ZXN_DMA_PORT                 equ $6b
  77+ 0000
  78+ 0000
  79+ 0000              COLOUR_TRANSPARENT			 equ $E3
  80+ 0000
  81+ 0000
  82+ 0000
  83+ 0000
# file closed: ./Layer2Graphics/layer2_defines.asm
  48  0000                                      INCLUDE	"./Hardware/memory_bank_defines.asm"
# file opened: ./Hardware/memory_bank_defines.asm
   1+ 0000
   2+ 0000              membanksize			    equ	$1FFF
   3+ 0000
   4+ 0000              StartOfBank     	    equ $0000
   5+ 0000
   6+ 0000              membank0 			    equ $0000
   7+ 0000              dmaCopySrcAddr		    equ	$0000
   8+ 0000              membank1 			    equ $2000
   9+ 0000              membank2 			    equ $4000
  10+ 0000              membank3 			    equ $6000
  11+ 0000              membank4 			    equ $8000
  12+ 0000              membank5 			    equ $a000
  13+ 0000              membank6 			    equ $c000
  14+ 0000              ScreenBank              equ $c000
  15+ 0000              MenuGalChtAddr          equ $c000
  16+ 0000              MenuEquipSAddr          equ $c000
  17+ 0000              MenuInventAddr          equ $c000
  18+ 0000              MenuMarketAddr          equ $c000
  19+ 0000              DispMarketAddr          equ $c000
  20+ 0000              MenuShrChtAddr          equ $c000
  21+ 0000              MenuStatusAddr          equ $c000
  22+ 0000              MenuSystemAddr          equ $c000
  23+ 0000              ViewFrontAddr           equ $c000
  24+ 0000              SunBankAddr             equ $c000
  25+ 0000              PlanetBankAddr          equ $c000
  26+ 0000              UniverseBankAddr	    equ $c000
  27+ 0000              LaunchShipAddr          equ $c000
  28+ 0000              membank7 			    equ $e000
  29+ 0000              L1membankAddr   	    equ $e000
  30+ 0000              L2membankAddr   	    equ $e000
  31+ 0000              ShipModelsAddr	        equ $e000
  32+ 0000              SpritemembankAddr       equ $e000
  33+ 0000              ResetUniverseAddr       equ $e000
  34+ 0000              StockTableAddr	        equ $e000
  35+ 0000              CommanderAddr           equ $e000
  36+ 0000              LAYER2Addr              equ $e000
  37+ 0000              LAYER1Addr              equ $e000
  38+ 0000              SPRITEAddr              equ $e000
  39+ 0000              ConsoleImageAddr        equ $e000
  40+ 0000              GalaxyDataAddr          equ $e000
  41+ 0000
  42+ 0000              DMACpySourceMMU		    equ	MMU_SLOT_0_REGISTER
  43+ 0000              SunMMU 		            equ MMU_SLOT_6_REGISTER
  44+ 0000              PlanetMMU 		        equ MMU_SLOT_6_REGISTER
  45+ 0000              UniverseMMU 		    equ MMU_SLOT_6_REGISTER
  46+ 0000              ScreenBankMMU           equ MMU_SLOT_6_REGISTER
  47+ 0000              MenuEquipSMMU           equ MMU_SLOT_6_REGISTER
  48+ 0000              MenuShrChtMMU           equ MMU_SLOT_6_REGISTER
  49+ 0000              MenuGalChtMMU           equ MMU_SLOT_6_REGISTER
  50+ 0000              MenuInventMMU           equ MMU_SLOT_6_REGISTER
  51+ 0000              MenuSystemMMU           equ MMU_SLOT_6_REGISTER
  52+ 0000              MenuMarketMMU           equ MMU_SLOT_6_REGISTER
  53+ 0000              DispMarketMMU           equ MMU_SLOT_6_REGISTER
  54+ 0000              MenuStatusMMU           equ MMU_SLOT_6_REGISTER
  55+ 0000              LaunchShipMMU           equ MMU_SLOT_6_REGISTER
  56+ 0000              L1memMMU       		    equ MMU_SLOT_7_REGISTER
  57+ 0000              L2memMMU       		    equ MMU_SLOT_7_REGISTER
  58+ 0000              SpritememMMU   		    equ MMU_SLOT_7_REGISTER
  59+ 0000              ShipModelMMU  		    equ MMU_SLOT_7_REGISTER
  60+ 0000              ResetUniverseMMU	    equ MMU_SLOT_7_REGISTER
  61+ 0000              CommanderMMU	        equ MMU_SLOT_7_REGISTER
  62+ 0000              StockTableMMU		    equ MMU_SLOT_7_REGISTER
  63+ 0000              ConsoleImageDataMMU	    equ MMU_SLOT_7_REGISTER
  64+ 0000              GalaxyDataMMU	        equ MMU_SLOT_7_REGISTER
  65+ 0000
  66+ 0000              BankResetUniv           equ 49
  67+ 0000              BankMenuShrCht          equ 50
  68+ 0000              BankMenuGalCht          equ 51
  69+ 0000              BankMenuInvent          equ 52
  70+ 0000              BankMenuSystem          equ 53
  71+ 0000              BankMenuMarket          equ 54
  72+ 0000              BankStockTable          equ 55
  73+ 0000              BankCommander           equ 56
  74+ 0000              BankLAYER2              equ 57
  75+ 0000              BankLAYER1              equ 58
  76+ 0000              BankShipModels1         equ 59
  77+ 0000              BankSPRITE              equ 60
  78+ 0000              BankConsole             equ 61
  79+ 0000              BankFrontView           equ 62
  80+ 0000              BankMenuStatus          equ 63
  81+ 0000              BankMenuEquipS          equ 64
  82+ 0000              BankLaunchShip          equ 65
  83+ 0000              BankDispMarket          equ 66
  84+ 0000              BankShipModels2         equ 67
  85+ 0000              BankShipModels3         equ 68
  86+ 0000              BankShipModels4         equ 69
  87+ 0000
  88+ 0000              BankUNIVDATA0           equ 70
  89+ 0000              BankUNIVDATA1           equ 71
  90+ 0000              BankUNIVDATA2           equ 72
  91+ 0000              BankUNIVDATA3           equ 73
  92+ 0000              BankUNIVDATA4           equ 74
  93+ 0000              BankUNIVDATA5           equ 75
  94+ 0000              BankUNIVDATA6           equ 76
  95+ 0000              BankUNIVDATA7           equ 77
  96+ 0000              BankUNIVDATA8           equ 78
  97+ 0000              BankUNIVDATA9           equ 79
  98+ 0000              BankUNIVDATA10          equ 80
  99+ 0000              BankUNIVDATA11          equ 81
 100+ 0000              BankUNIVDATA12          equ 82
 101+ 0000              BankSunData             equ 83
 102+ 0000              BankPlanetData          equ 84
 103+ 0000
 104+ 0000              BankGalaxyData0         equ 91
 105+ 0000              BankGalaxyData1         equ 92
 106+ 0000              BankGalaxyData2         equ 93
 107+ 0000              BankGalaxyData3         equ 94
 108+ 0000              BankGalaxyData4         equ 95
 109+ 0000              BankGalaxyData5         equ 96
 110+ 0000              BankGalaxyData6         equ 97
 111+ 0000              BankGalaxyData7         equ 98
 112+ 0000
# file closed: ./Hardware/memory_bank_defines.asm
  49  0000                                      INCLUDE "./Hardware/screen_equates.asm"
# file opened: ./Hardware/screen_equates.asm
   1+ 0000              ScreenHeight 		equ 192
   2+ 0000              ScreenLastRow       equ ScreenHeight -1
   3+ 0000              ScreenWidth  		equ 256
   4+ 0000              ScreenLastCol       equ ScreenWidth -1
   5+ 0000              ScreenHeightHalf	equ 96
   6+ 0000              ScreenWidthHalf  	equ 128
   7+ 0000              ScreenCenterY		equ 96
   8+ 0000              ScreenCenterX       equ 128
   9+ 0000              ViewHeight          equ 128
  10+ 0000              ViewHeightPlus1     equ 128+1
  11+ 0000              ViewLastRow       	equ ViewHeight -1
  12+ 0000              ViewWidth  			equ 256
  13+ 0000              ViewLastCol         equ ViewWidth -1
  14+ 0000              ViewHeightHalf      equ 63
  15+ 0000              ViewWidthHalf       equ 127
  16+ 0000              ViewCenterY         equ 64
  17+ 0000              ViewCenterX         equ 128
  18+ 0000              ShipColour			equ $FF		; place holder for debugging TODO
  19+ 0000              ScreenL1Bottom      equ $5000
  20+ 0000              ScreenL1BottomLen   equ 32 * 8 * 8
  21+ 0000              ScreenL1AttrBtm     equ $5A00
  22+ 0000              ScreenL1AttrBtmLen  equ 32 * 8
  23+ 0000
# file closed: ./Hardware/screen_equates.asm
  50  0000                                      INCLUDE "./Data/ShipModelEquates.asm"
# file opened: ./Data/ShipModelEquates.asm
   1+ 0000              ScoopDebrisOffset	    equ	0                               ; hull byte#0 high nibble is scoop info, lower nibble is debris spin info
   2+ 0000              MissileLockLoOffset	    equ 1
   3+ 0000              MissileLockHiOffset	    equ 2
   4+ 0000              EdgeAddyOffset		    equ 3
   5+ 0000              LineX4Offset		    equ 5
   6+ 0000              GunVertexOffset		    equ 6
   7+ 0000              ExplosionCtOffset	    equ 7
   8+ 0000              VertexCtX6Offset	    equ 8
   9+ 0000              EdgeCountOffset		    equ 9
  10+ 0000              BountyLoOffset		    equ 10
  11+ 0000              BountyHiOffset		    equ 11
  12+ 0000              FaceCtX4Offset		    equ 12
  13+ 0000              DotOffset			    equ 13
  14+ 0000              EnergyOffset		    equ 14
  15+ 0000              SpeedOffset			    equ 15
  16+ 0000              FaceAddyOffset		    equ 16
  17+ 0000              QOffset				    equ 18
  18+ 0000              LaserOffset			    equ 19
  19+ 0000              VerticiesAddyOffset     equ 20
  20+ 0000              ShipTypeOffset          equ 22
  21+ 0000              ShipNewBitsOffset       equ 23
  22+ 0000              ShipAIFlagsOffset       equ 24
  23+ 0000              ShipDataLength          equ ShipAIFlagsOffset+1
  24+ 0000
  25+ 0000              CobraTablePointer       equ 43
  26+ 0000              ;29 faulty
  27+ 0000              BankThreshold           equ 16
  28+ 0000
  29+ 0000              ShipTableALast          equ 23
  30+ 0000              ShipTableBLast          equ 39
  31+ 0000              ShipTableCLast          equ 55
  32+ 0000
# file closed: ./Data/ShipModelEquates.asm
  51  0000                                      INCLUDE "./Menus/clear_screen_inline_no_double_buffer.asm"
# file opened: ./Menus/clear_screen_inline_no_double_buffer.asm
   1+ 0000              InitNoDoubleBuffer:         MACRO
   2+ 0000 ~                                        MMUSelectLayer1
   3+ 0000 ~                                        call	l1_cls
   4+ 0000 ~                                        ld		a,7
   5+ 0000 ~                                        call	l1_attr_cls_to_a
   6+ 0000 ~                                        MMUSelectLayer2
   7+ 0000 ~                                        call    asm_l2_double_buffer_off
   8+ 0000 ~                                        call	l2_cls	; Get some space
   9+ 0000 ~                                        MMUSelectSpriteBank
  10+ 0000 ~                                        call    sprite_cls_cursors
  11+ 0000                                          ENDM
  12+ 0000
  13+ 0000
# file closed: ./Menus/clear_screen_inline_no_double_buffer.asm
  52  0000                                      INCLUDE "./Macros/graphicsMacros.asm"
# file opened: ./Macros/graphicsMacros.asm
   1+ 0000              ; General Graphics macros
   2+ 0000              DoubleBufferIfPossible: MACRO
   3+ 0000 ~                                    IFDEF DOUBLEBUFFER
   4+ 0000 ~                                        MMUSelectLayer2
   5+ 0000 ~                                        call  l2_cls
   6+ 0000 ~                                        call  l2_flip_buffers
   7+ 0000 ~                                    ENDIF
   8+ 0000                                      ENDM
# file closed: ./Macros/graphicsMacros.asm
  53  0000                                      INCLUDE "./Macros/callMacros.asm"
# file opened: ./Macros/callMacros.asm
   1+ 0000
   2+ 0000              CallIfAEqNusng:         MACRO   reg,target
   3+ 0000 ~                                    cp      reg
   4+ 0000 ~                                    call	z,target
   5+ 0000                                      ENDM
   6+ 0000
   7+ 0000              CallIfAGTENusng:        MACRO   reg,target
   8+ 0000 ~                                    cp      reg
   9+ 0000 ~                                    call	nc,target
  10+ 0000                                      ENDM
  11+ 0000
  12+ 0000              CallIfAGTEMemusng:      MACRO   reg,target
  13+ 0000 ~                                    ld      hl,reg
  14+ 0000 ~                                    cp      (hl)
  15+ 0000 ~                                    call	nc,target
  16+ 0000                                      ENDM
  17+ 0000
  18+ 0000              CallIfALTNusng:         MACRO   reg,target
  19+ 0000 ~                                    cp      reg
  20+ 0000 ~                                    call	c,target
  21+ 0000                                      ENDM
  22+ 0000
  23+ 0000              CallIfMemEqMemusng:     MACRO mem, address, target
  24+ 0000 ~                                    ld   a,(mem)
  25+ 0000 ~                                    ld   hl,address
  26+ 0000 ~                                    cp   (hl)
  27+ 0000 ~                                    call    z,target
  28+ 0000                                      ENDM
  29+ 0000
  30+ 0000              CallIfMemEqNusng:       MACRO mem, value, target
  31+ 0000 ~                                    ld   a,(mem)
  32+ 0000 ~                                    cp   value
  33+ 0000 ~                                    call    z,target
  34+ 0000                                      ENDM
  35+ 0000
  36+ 0000              CallIfMemTrue:          MACRO mem, target
  37+ 0000 ~                                    ld      a,(mem)
  38+ 0000 ~                                    and     a
  39+ 0000 ~                                    call    z, target
  40+ 0000                                      ENDM
  41+ 0000
  42+ 0000              CallIfMemFalse:         MACRO mem, target
  43+ 0000 ~                                    ld      a,(mem)
  44+ 0000 ~                                    and     a
  45+ 0000 ~                                    call    nz, target
  46+ 0000                                      ENDM
  47+ 0000
  48+ 0000              CallIfATrue:            MACRO target
  49+ 0000 ~                                    and     a
  50+ 0000 ~                                    call    z, target
  51+ 0000                                      ENDM
  52+ 0000
  53+ 0000              CallIfAFalse:           MACRO target
  54+ 0000 ~                                    and     a
  55+ 0000 ~                                    call    nz, target
  56+ 0000                                      ENDM
# file closed: ./Macros/callMacros.asm
  54  0000                                      INCLUDE "./Macros/carryFlagMacros.asm"
# file opened: ./Macros/carryFlagMacros.asm
   1+ 0000
   2+ 0000              SetCarryFlag:           MACRO
   3+ 0000 ~                                    scf
   4+ 0000                                      ENDM
   5+ 0000
   6+ 0000              ClearCarryFlag:	        MACRO
   7+ 0000 ~                                    or a
   8+ 0000                                      ENDM
   9+ 0000
  10+ 0000              FlipCarryFlag:          MACRO
  11+ 0000 ~                                    ccf
  12+ 0000                                      ENDM
  13+ 0000
# file closed: ./Macros/carryFlagMacros.asm
  55  0000                                      INCLUDE "./Macros/CopyByteMacros.asm"
# file opened: ./Macros/CopyByteMacros.asm
   1+ 0000              CopyByteAtHLixToA:		MACRO memloc
   2+ 0000 ~            						ex          de,hl                               ; save hl
   3+ 0000 ~            						ld          hl,memloc
   4+ 0000 ~            						add         hl,a
   5+ 0000 ~            						ld          a,(hl)                              ; get XX2[x]
   6+ 0000 ~            						ex          de,hl                               ; get hl back as we need it in loop
   7+ 0000              						ENDM
   8+ 0000
   9+ 0000              ; Increments IYL
  10+ 0000              ; Increments IHL
  11+ 0000              ; Gets value at hl and loads into Parameter 1 address
  12+ 0000
  13+ 0000              CopyByteAtNextHLiyl: 	MACRO memloc
  14+ 0000 ~            						inc         iyl                                 ;
  15+ 0000 ~            						inc         hl                                  ; vertex byte#1
  16+ 0000 ~            						ld          a,(hl)                              ;
  17+ 0000 ~            						ld          (memloc),a                     ; XX15+2 = (V),Y
  18+ 0000              						ENDM
  19+ 0000
  20+ 0000              ;------------------------------------------------------------------------------------------------------------------------------
  21+ 0000              CopyByteAtNextHL:   MACRO targetaddr
  22+ 0000 ~                                inc         hl                                  ; vertex byte#1
  23+ 0000 ~                                ld          a,(hl)                              ;
  24+ 0000 ~                                ld          (targetaddr),a                     ; SunXX15+2 = (V),Y
  25+ 0000                                  ENDM
# file closed: ./Macros/CopyByteMacros.asm
  56  0000                                      INCLUDE "./Macros/ldCopyMacros.asm"
# file opened: ./Macros/ldCopyMacros.asm
   1+ 0000              ZeroA:		            MACRO
   2+ 0000 ~                                    xor a
   3+ 0000                                      ENDM
   4+ 0000
   5+ 0000              SetATrue:               MACRO
   6+ 0000 ~                                    xor     a
   7+ 0000                                      ENDM
   8+ 0000
   9+ 0000              SetAFalse:              MACRO
  10+ 0000 ~                                    ld      a,$FF
  11+ 0000                                      ENDM
  12+ 0000
  13+ 0000              SetMemFalse             MACRO   mem
  14+ 0000 ~                                    ld      a,$FF
  15+ 0000 ~                                    ld      (mem),a
  16+ 0000                                      ENDM
  17+ 0000
  18+ 0000              SetMemTrue              MACRO   mem
  19+ 0000 ~                                    xor     a
  20+ 0000 ~                                    ld      (mem),a
  21+ 0000                                      ENDM
  22+ 0000
  23+ 0000              SetMemToN:              MACRO   mem,value
  24+ 0000 ~                                    ld      a,value
  25+ 0000 ~                                    ld      (mem),a
  26+ 0000                                      ENDM
  27+ 0000
  28+ 0000              ldCopyTextAtHLtoDE:     MACRO
  29+ 0000 ~            .CopyLoop:              ld      a,(hl)
  30+ 0000 ~                                    ld      (de),a
  31+ 0000 ~                                    cp      0
  32+ 0000 ~                                    jp      z,.DoneCopy
  33+ 0000 ~                                    inc     hl
  34+ 0000 ~                                    inc     de
  35+ 0000 ~                                    jr      .CopyLoop
  36+ 0000 ~            .DoneCopy:
  37+ 0000                                      ENDM
  38+ 0000
  39+ 0000              ldClearTextLoop:        MACRO   TextSize
  40+ 0000 ~                                    ld      b,a
  41+ 0000 ~                                    ld      a,TextSize
  42+ 0000 ~            .ClearLoop:             ld      (hl),a
  43+ 0000 ~                                    inc     hl
  44+ 0000 ~                                    djnz    .ClearLoop
  45+ 0000                                      ENDM
  46+ 0000
  47+ 0000              ldCopyByte:             MACRO memfrom, memto
  48+ 0000 ~                                    ld       a,(memfrom)
  49+ 0000 ~                                    ld       (memto),a
  50+ 0000                                      ENDM
  51+ 0000
  52+ 0000
  53+ 0000              ldCopyByteABS:          MACRO memfrom, memto
  54+ 0000 ~                                    ld       a,(memfrom)
  55+ 0000 ~                                    and		$7F
  56+ 0000 ~                                    ld       (memto),a
  57+ 0000                                      ENDM
  58+ 0000
  59+ 0000              ldCopy2Byte             MACRO  memfrom, memto
  60+ 0000 ~                                    ld       hl,(memfrom)
  61+ 0000 ~                                    ld       (memto),hl
  62+ 0000                                      ENDM
  63+ 0000
  64+ 0000              ldWriteConst            MACRO  memfrom, memto
  65+ 0000 ~                                    ld       a,memfrom
  66+ 0000 ~                                    ld       (memto),a
  67+ 0000                                      ENDM
  68+ 0000
  69+ 0000              ldWriteZero             MACRO  memto
  70+ 0000 ~                                    xor      a
  71+ 0000 ~                                    ld       (memto),a
  72+ 0000                                      ENDM
  73+ 0000
  74+ 0000              ldIXLaFromN:	        MACRO memfrom
  75+ 0000 ~                                    ld		a,(memfrom)
  76+ 0000 ~                                    ld		ixl,a
  77+ 0000                                      ENDM
  78+ 0000
  79+ 0000              ldIXHaFromN:	        MACRO memfrom
  80+ 0000 ~                                    ld		a,(memfrom)
  81+ 0000 ~                                    ld		ixh,a
  82+ 0000                                      ENDM
  83+ 0000
  84+ 0000              ldIYLaFromN:	        MACRO memfrom
  85+ 0000 ~                                    ld		a,(memfrom)
  86+ 0000 ~                                    ld		iyl,a
  87+ 0000                                      ENDM
  88+ 0000
  89+ 0000              ldIYHaFromN:	        MACRO memfrom
  90+ 0000 ~                                    ld		a,(memfrom)
  91+ 0000 ~                                    ld		iyh,a
  92+ 0000                                      ENDM
  93+ 0000
  94+ 0000              ldhlde:			        MACRO
  95+ 0000 ~                                    ld		h,d
  96+ 0000 ~                                    ld		l,e
  97+ 0000                                      ENDM
  98+ 0000
  99+ 0000              ldhlbc:			        MACRO
 100+ 0000 ~                                    ld		h,b
 101+ 0000 ~                                    ld		l,c
 102+ 0000                                      ENDM
 103+ 0000
 104+ 0000              ldbcde:			        MACRO
 105+ 0000 ~                                    ld		b,d
 106+ 0000 ~                                    ld		c,e
 107+ 0000                                      ENDM
 108+ 0000
 109+ 0000              lddebc:			        MACRO
 110+ 0000 ~                                    ld		d,b
 111+ 0000 ~                                    ld		e,c
 112+ 0000                                      ENDM
 113+ 0000
 114+ 0000              ldbchl:			        MACRO
 115+ 0000 ~                                    ld		b,h
 116+ 0000 ~                                    ld		c,l
 117+ 0000                                      ENDM
 118+ 0000
 119+ 0000              lddeiy:			        MACRO
 120+ 0000 ~                                    ld		d,iyh
 121+ 0000 ~                                    ld		e,iyl
 122+ 0000                                      ENDM
 123+ 0000
 124+ 0000              ldiyde:			        MACRO
 125+ 0000 ~                                    ld		iyh,d
 126+ 0000 ~                                    ld		iyl,e
 127+ 0000                                      ENDM
 128+ 0000
 129+ 0000
 130+ 0000              FourLDIInstrunctions:   MACRO
 131+ 0000 ~                                    ldi
 132+ 0000 ~                                    ldi
 133+ 0000 ~                                    ldi
 134+ 0000 ~                                    ldi
 135+ 0000                                      ENDM
 136+ 0000
 137+ 0000              FiveLDIInstrunctions:   MACRO
 138+ 0000 ~                                    ldi
 139+ 0000 ~                                    ldi
 140+ 0000 ~                                    ldi
 141+ 0000 ~                                    ldi
 142+ 0000 ~                                    ldi
 143+ 0000                                      ENDM
 144+ 0000
 145+ 0000              SixLDIInstrunctions:    MACRO
 146+ 0000 ~                                    ldi
 147+ 0000 ~                                    ldi
 148+ 0000 ~                                    ldi
 149+ 0000 ~                                    ldi
 150+ 0000 ~                                    ldi
 151+ 0000 ~                                    ldi
 152+ 0000                                      ENDM
 153+ 0000
 154+ 0000              EightLDIInstrunctions:  MACRO
 155+ 0000 ~            		                ldi
 156+ 0000 ~            		                ldi
 157+ 0000 ~            		                ldi
 158+ 0000 ~            		                ldi
 159+ 0000 ~            		                ldi
 160+ 0000 ~            		                ldi
 161+ 0000 ~            		                ldi
 162+ 0000 ~            		                ldi
 163+ 0000                                      ENDM
 164+ 0000
 165+ 0000              NineLDIInstrunctions:  MACRO
 166+ 0000 ~            		                ldi
 167+ 0000 ~            		                ldi
 168+ 0000 ~            		                ldi
 169+ 0000 ~            		                ldi
 170+ 0000 ~            		                ldi
 171+ 0000 ~            		                ldi
 172+ 0000 ~            		                ldi
 173+ 0000 ~            		                ldi
 174+ 0000 ~            		                ldi
 175+ 0000                                      ENDM
# file closed: ./Macros/ldCopyMacros.asm
  57  0000                                      INCLUDE "./Macros/ldIndexedMacros.asm"
# file opened: ./Macros/ldIndexedMacros.asm
   1+ 0000              GetByteAInTable:    MACRO table
   2+ 0000 ~                                ld          hl,table
   3+ 0000 ~                                add         hl,a
   4+ 0000 ~                                ld          a,(hl)
   5+ 0000                                  ENDM
   6+ 0000
   7+ 0000              HLWordAInTable:     MACRO table
   8+ 0000 ~                                ld          hl,table
   9+ 0000 ~                                sla         a
  10+ 0000 ~                                add         hl,a
  11+ 0000 ~                                ld          a,(hl)
  12+ 0000 ~                                inc         hl
  13+ 0000 ~                                ld          h,(hl)
  14+ 0000 ~                                ld          l,a
  15+ 0000                                  ENDM
  16+ 0000
  17+ 0000
  18+ 0000              ldAToHLixl:			MACRO value
  19+ 0000 ~            					ld          hl,value
  20+ 0000 ~            					ex          af,af'
  21+ 0000 ~            					ld          a,ixl
  22+ 0000 ~            					add         hl,a
  23+ 0000 ~            					ex          af,af'
  24+ 0000 ~            					ld          (hl),a
  25+ 0000              					ENDM
  26+ 0000
  27+ 0000              ldAToHLiyl:			MACRO value
  28+ 0000 ~            					ld          hl,value
  29+ 0000 ~            					ex          af,af'
  30+ 0000 ~            					ld          a,iyl
  31+ 0000 ~            					add         hl,a
  32+ 0000 ~            					ex          af,af'
  33+ 0000 ~            					ld          (hl),a
  34+ 0000              					ENDM
  35+ 0000
  36+ 0000
  37+ 0000              ldHLixlToA:         MACRO value
  38+ 0000 ~                                ld          hl,value
  39+ 0000 ~                                ex          af,af'
  40+ 0000 ~                                ld          a,ixl
  41+ 0000 ~                                add         hl,a
  42+ 0000 ~                                ld          a,(hl)
  43+ 0000                                  ENDM
  44+ 0000
  45+ 0000              ldHLiylToA:         MACRO value
  46+ 0000 ~                                ld          hl,value
  47+ 0000 ~                                ex          af,af'
  48+ 0000 ~                                ld          a,iyl
  49+ 0000 ~                                add         hl,a
  50+ 0000 ~                                ld          a,(hl)
  51+ 0000                                  ENDM
  52+ 0000
  53+ 0000              ldHLIdxAToA:        MACRO value
  54+ 0000 ~                                ld          hl,value
  55+ 0000 ~                                add         hl,a
  56+ 0000 ~                                ld          a,(hl)
  57+ 0000                                  ENDM
  58+ 0000
  59+ 0000              HLEquAddrAtHLPlusA: MACRO
  60+ 0000 ~                                sla         a
  61+ 0000 ~                                add         hl,a
  62+ 0000 ~                                ld          a,(hl)
  63+ 0000 ~                                inc         hl
  64+ 0000 ~                                ld          h,(hl)
  65+ 0000 ~                                ld          l,a
  66+ 0000                                  ENDM
# file closed: ./Macros/ldIndexedMacros.asm
  58  0000                                      INCLUDE "./Macros/jumpMacros.asm"
# file opened: ./Macros/jumpMacros.asm
   1+ 0000              JumpIfPositive:	        MACRO target
   2+ 0000 ~                                    jp		p, target
   3+ 0000                                      ENDM
   4+ 0000
   5+ 0000              JumpIfNegative:	        MACRO target
   6+ 0000 ~                                    jp		m, target
   7+ 0000                                      ENDM
   8+ 0000
   9+ 0000
  10+ 0000              JumpIfUnderflow:	    MACRO target
  11+ 0000 ~                                    jp		po, target
  12+ 0000                                      ENDM
  13+ 0000
  14+ 0000              JumpIfOverflow:	        MACRO target
  15+ 0000 ~                                    jp		po, target
  16+ 0000                                      ENDM
  17+ 0000
  18+ 0000
  19+ 0000              JumpIfNotZero:	        MACRO target
  20+ 0000 ~                                    jp	nz,target
  21+ 0000                                      ENDM
  22+ 0000
  23+ 0000              JumpIfZero:	            MACRO target
  24+ 0000 ~                                    jp	z,target
  25+ 0000                                      ENDM
  26+ 0000
  27+ 0000              ;.. Bit routines
  28+ 0000              JumpOnMemBitSet:        MACRO mem, bitnbr, target
  29+ 0000 ~                                    ld      a,(mem)
  30+ 0000 ~                                    bit 	bitnbr,a
  31+ 0000 ~                                    jp      nz,target
  32+ 0000                                      ENDM
  33+ 0000
  34+ 0000              JumpOnMemBitClear:      MACRO mem, bitnbr, target
  35+ 0000 ~                                    ld      a,(mem)
  36+ 0000 ~                                    bit 	bitnbr,a
  37+ 0000 ~                                    jp      z,target
  38+ 0000                                      ENDM
  39+ 0000
  40+ 0000              JumpOnABit5Set:         MACRO   target
  41+ 0000 ~                                    and     Bit5Only
  42+ 0000 ~                                    jp      nz,target
  43+ 0000                                      ENDM
  44+ 0000
  45+ 0000              JumpOnABit5Clear:       MACRO   target
  46+ 0000 ~                                    and     Bit5Only
  47+ 0000 ~                                    jp      z,target
  48+ 0000                                      ENDM
  49+ 0000
  50+ 0000              JumpOnBitMaskSet:       MACRO   bitmask, target
  51+ 0000 ~                                    and     bitmask
  52+ 0000 ~                                    jp      nz,target
  53+ 0000                                      ENDM
  54+ 0000
  55+ 0000              JumpOnBitMaskClear:     MACRO   bitmask, target
  56+ 0000 ~                                    and     bitmask
  57+ 0000 ~                                    jp      z,target
  58+ 0000                                      ENDM
  59+ 0000
  60+ 0000              JumpOnBitSet:           MACRO  reg, bitnbr, target
  61+ 0000 ~                                    bit 	bitnbr,reg
  62+ 0000 ~                                    jp      nz,target
  63+ 0000                                      ENDM
  64+ 0000
  65+ 0000              JumpOnBitClear:         MACRO  reg, bitnbr, target
  66+ 0000 ~                                    bit 	bitnbr,reg
  67+ 0000 ~                                    jp      z,target
  68+ 0000                                      ENDM
  69+ 0000
  70+ 0000              ; Comparison Routines
  71+ 0000              JumpIfAGTEusng:         MACRO
  72+ 0000 ~                                    jp		nc,target
  73+ 0000                                      ENDM
  74+ 0000
  75+ 0000              JumpIfAGTENusng:        MACRO reg,target
  76+ 0000 ~                                    cp     reg
  77+ 0000 ~                                    jp		nc,target
  78+ 0000                                      ENDM
  79+ 0000
  80+ 0000              JumpIfAGTEMemusng:      MACRO mem,target
  81+ 0000 ~                                    ld      hl,mem
  82+ 0000 ~                                    cp      (hl)
  83+ 0000 ~                                    jp		nc,target
  84+ 0000                                      ENDM
  85+ 0000
  86+ 0000              JumpIfALTMemusng:       MACRO mem,target
  87+ 0000 ~                                    ld      hl,mem
  88+ 0000 ~                                    cp      (hl)
  89+ 0000 ~                                    jp		c,target
  90+ 0000                                      ENDM
  91+ 0000
  92+ 0000              JumpIfMemGTENusng:      MACRO mem, value, target
  93+ 0000 ~                                    ld     a,(mem)
  94+ 0000 ~                                    cp     value
  95+ 0000 ~                                    jp	  nc,target
  96+ 0000                                      ENDM
  97+ 0000
  98+ 0000              JumpIfMemGTEMemusng:    MACRO mem, address, target
  99+ 0000 ~                                    ld   a,(mem)
 100+ 0000 ~                                    ld   hl,address
 101+ 0000 ~                                    cp   (hl)
 102+ 0000 ~                                    jp	  nc,target
 103+ 0000                                      ENDM
 104+ 0000
 105+ 0000              JumpIfMemEqMemusng:     MACRO mem, address, target
 106+ 0000 ~                                    ld   a,(mem)
 107+ 0000 ~                                    ld   hl,address
 108+ 0000 ~                                    cp   (hl)
 109+ 0000 ~                                    jp	  z,target
 110+ 0000                                      ENDM
 111+ 0000
 112+ 0000              JumpIfMemTrue:          MACRO mem, target
 113+ 0000 ~                                    ld      a,(mem)
 114+ 0000 ~                                    and     a
 115+ 0000 ~                                    jp      z, target
 116+ 0000                                      ENDM
 117+ 0000
 118+ 0000              JumpIfMemFalse:         MACRO mem, target
 119+ 0000 ~                                    ld      a,(mem)
 120+ 0000 ~                                    and     a
 121+ 0000 ~                                    jp      nz, target
 122+ 0000                                      ENDM
 123+ 0000
 124+ 0000              JumpIfATrue:            MACRO target
 125+ 0000 ~                                    and     a
 126+ 0000 ~                                    jp      z, target
 127+ 0000                                      ENDM
 128+ 0000
 129+ 0000              JumpIfAFalse:           MACRO target
 130+ 0000 ~                                    and     a
 131+ 0000 ~                                    jp      nz, target
 132+ 0000                                      ENDM
 133+ 0000
 134+ 0000              JumpIfALTusng:          MACRO target
 135+ 0000 ~                                    jp		c,target
 136+ 0000                                      ENDM
 137+ 0000
 138+ 0000              JumpIfALTNusng:         MACRO value, target
 139+ 0000 ~                                    cp      value
 140+ 0000 ~                                    jp		c, target
 141+ 0000                                      ENDM
 142+ 0000
 143+ 0000              JumpIfMemLTNusng:       MACRO mem, value, target
 144+ 0000 ~                                    ld      a,(mem)
 145+ 0000 ~                                    cp      value
 146+ 0000 ~                                    jp	  c,target
 147+ 0000                                      ENDM
 148+ 0000
 149+ 0000              JumpIfMemLTMemusng:     MACRO mem, value, target
 150+ 0000 ~                                    ld    a,(mem)
 151+ 0000 ~                                    ld    hl,value
 152+ 0000 ~                                    cp    (hl)
 153+ 0000 ~                                    jp	  c,target
 154+ 0000                                      ENDM
 155+ 0000
 156+ 0000              JumpIfMemEqNusng:       MACRO mem,value,target
 157+ 0000 ~                                    ld  a,(mem)
 158+ 0000 ~                                    cp  value
 159+ 0000 ~                                    jp  z,target
 160+ 0000                                      ENDM
 161+ 0000
 162+ 0000              JumpIfMemNeNusng:       MACRO mem,value,target
 163+ 0000 ~                                    ld  a,(mem)
 164+ 0000 ~                                    cp  value
 165+ 0000 ~                                    jp  nz,target
 166+ 0000                                      ENDM
 167+ 0000
 168+ 0000              JumpIfMemZero:          MACRO mem,target
 169+ 0000 ~                                    ld  a,(mem)
 170+ 0000 ~                                    and a
 171+ 0000 ~                                    jp  z,target
 172+ 0000                                      ENDM
 173+ 0000
 174+ 0000              JumpIfMemNotZero:       MACRO mem,target
 175+ 0000 ~                                    ld  a,(mem)
 176+ 0000 ~                                    and a
 177+ 0000 ~                                    jp  nz,target
 178+ 0000                                      ENDM
 179+ 0000
 180+ 0000              JumpIfALTMemHLusng:     MACRO target
 181+ 0000 ~                                    cp    (hl)
 182+ 0000 ~                                    jp	  c,target
 183+ 0000                                      ENDM
 184+ 0000
 185+ 0000              JumpIfANENusng:         MACRO value, target
 186+ 0000 ~                                    cp     value
 187+ 0000 ~                                    jp      nz,target
 188+ 0000                                      ENDM
 189+ 0000
 190+ 0000              JumpIfANEMemusng:       MACRO  value, target
 191+ 0000 ~                                    ld    hl,value
 192+ 0000 ~                                    cp    (hl)
 193+ 0000 ~                                    jp      nz,target
 194+ 0000                                      ENDM
 195+ 0000
 196+ 0000              JumpIfAEqNusng:         MACRO value, target
 197+ 0000 ~                                    cp     value
 198+ 0000 ~                                    jp      z,target
 199+ 0000                                      ENDM
 200+ 0000
 201+ 0000              JumpIfAIsZero:	        MACRO target
 202+ 0000 ~                                    and a   ; cp 0 - changed to and a for optimisation but affects other flags
 203+ 0000 ~                                    jp	z, target
 204+ 0000                                      ENDM
 205+ 0000
 206+ 0000              JumpIfAIsNotZero:       MACRO target
 207+ 0000 ~                                    cp	0
 208+ 0000 ~                                    jp	nz,target
 209+ 0000                                      ENDM
 210+ 0000
 211+ 0000              IfResultZeroGoto:	    MACRO target
 212+ 0000 ~                                    jp	z,target
 213+ 0000                                      ENDM
 214+ 0000
 215+ 0000              IfResultNotZeroGoto:    MACRO target
 216+ 0000 ~                                    jp	nz,target
 217+ 0000                                      ENDM
 218+ 0000
# file closed: ./Macros/jumpMacros.asm
  59  0000                                      INCLUDE "./Macros/MathsMacros.asm"
# file opened: ./Macros/MathsMacros.asm
   1+ 0000
   2+ 0000
   3+ 0000              ApplyMyRollToVector:    MACRO angle, vectorX, vectorY
   4+ 0000 ~                                    ldCopyByte angle,varQ               ; Set Q = a = alpha (the roll angle to rotate through)
   5+ 0000 ~                                    ldCopy2Byte vectorY, varR           ; RS =  nosev_y
   6+ 0000 ~                                    ldCopyByte  vectorX, varP           ; set P to nosevX lo (may be redundant)
   7+ 0000 ~                                    ld a,(vectorX+1)                    ; Set A = -nosev_x_hi
   8+ 0000 ~                                    xor $80                             ;
   9+ 0000 ~                                    call  madXAequQmulAaddRS            ; Set (A X) = Q * A + (S R) = = alpha * -nosev_x_hi + nosev_y
  10+ 0000 ~                                    ld  (vectorY),de                    ; nosev_y = nosev_y - alpha * nosev_x_hi
  11+ 0000 ~                                    ldCopy2Byte vectorX, varR           ; Set (S R) = nosev_x
  12+ 0000 ~                                    ld  a,(vectorY+1)                   ;  Set A = nosev_y_hi
  13+ 0000 ~                                    call madXAequQmulAaddRS             ; Set (A X) = Q * A + (S R)
  14+ 0000 ~                                    ld  (vectorX),de                    ; nosev_x = nosev_x + alpha * nosev_y_hi
  15+ 0000                                      ENDM
  16+ 0000
  17+ 0000              SignedHLTo2C:           MACRO
  18+ 0000 ~                                    bit     7,h
  19+ 0000 ~                                    jr      z,.Done2c
  20+ 0000 ~                                    ld      a,h
  21+ 0000 ~                                    and     SignMask8Bit
  22+ 0000 ~                                    ld      h,a
  23+ 0000 ~                                    NegHL
  24+ 0000 ~            .Done2c:
  25+ 0000                                      ENDM
  26+ 0000
  27+ 0000              MemSignedTo2C:          MACRO   memfrom
  28+ 0000 ~                                    ld      hl,(memfrom)
  29+ 0000 ~                                    bit     7,h
  30+ 0000 ~                                    jr      z,.Done2c
  31+ 0000 ~                                    ld      a,h
  32+ 0000 ~                                    and     SignMask8Bit
  33+ 0000 ~                                    ld      h,a
  34+ 0000 ~            .Done2c:                ld      (memfrom),hl
  35+ 0000                                      ENDM
  36+ 0000
  37+ 0000
  38+ 0000                  ;returns result in H
  39+ 0000              EDiv10Inline:           MACRO
  40+ 0000 ~                                    ld      d,0
  41+ 0000 ~                                    ld      hl,de
  42+ 0000 ~                                    add     hl,hl
  43+ 0000 ~                                    add     hl,de
  44+ 0000 ~                                    add     hl,hl
  45+ 0000 ~                                    add     hl,hl
  46+ 0000 ~                                    add     hl,de
  47+ 0000 ~                                    add     hl,hl
  48+ 0000                                      ENDM
  49+ 0000
# file closed: ./Macros/MathsMacros.asm
  60  0000                                      INCLUDE "./Macros/MMUMacros.asm"
# file opened: ./Macros/MMUMacros.asm
   1+ 0000              MMUSelectSpriteBank: MACRO
   2+ 0000 ~            					 nextreg SpritememMMU,	    BankSPRITE
   3+ 0000              					 ENDM
   4+ 0000
   5+ 0000              MMUSelectConsoleBank: MACRO
   6+ 0000 ~            					 nextreg ConsoleImageDataMMU,  BankConsole
   7+ 0000              					 ENDM
   8+ 0000
   9+ 0000              MMUSelectLayer1: 	 MACRO
  10+ 0000 ~            					 nextreg L1memMMU,		    BankLAYER1
  11+ 0000              					 ENDM
  12+ 0000
  13+ 0000              MMUSelectLayer2: 	 MACRO
  14+ 0000 ~            					 nextreg L2memMMU,		    BankLAYER2
  15+ 0000              					 ENDM
  16+ 0000
  17+ 0000              MMUSelectResetUniv:  MACRO
  18+ 0000 ~                                 nextreg  ResetUniverseMMU, BankResetUniv
  19+ 0000                                   ENDM
  20+ 0000
  21+ 0000              MMUSelectShipBank1:  MACRO
  22+ 0000 ~            					 nextreg ShipModelMMU,	    BankShipModels1
  23+ 0000              					 ENDM
  24+ 0000              MMUSelectShipBank2:  MACRO
  25+ 0000 ~            					 nextreg ShipModelMMU,	    BankShipModels2
  26+ 0000              					 ENDM
  27+ 0000              MMUSelectShipBank3:  MACRO
  28+ 0000 ~            					 nextreg ShipModelMMU,	    BankShipModels3
  29+ 0000              					 ENDM
  30+ 0000              MMUSelectShipBank4:  MACRO
  31+ 0000 ~            					 nextreg ShipModelMMU,	    BankShipModels4
  32+ 0000              					 ENDM
  33+ 0000
  34+ 0000              MMUSelectShipBankA   MACRO
  35+ 0000 ~            					 nextreg ShipModelMMU,	    a
  36+ 0000              					 ENDM
  37+ 0000
  38+ 0000              MMUSelectShipBankN:  MACRO value
  39+ 0000 ~            					 nextreg ShipModelMMU,	    value
  40+ 0000              					 ENDM
  41+ 0000
  42+ 0000              MMUSelectCommander:	 MACRO
  43+ 0000 ~                                 nextreg CommanderMMU,       BankCommander
  44+ 0000              					 ENDM
  45+ 0000
  46+ 0000              MMUSelectStockTable: MACRO
  47+ 0000 ~                                 nextreg StockTableMMU,     BankStockTable
  48+ 0000              					 ENDM
  49+ 0000
  50+ 0000              MMUSelectCpySrcA:    MACRO
  51+ 0000 ~                                 nextreg DMACpySourceMMU,	a
  52+ 0000              					 ENDM
  53+ 0000
  54+ 0000              MMUSelectCpySrcN:    MACRO value
  55+ 0000 ~                                 nextreg DMACpySourceMMU,	value
  56+ 0000              					 ENDM
  57+ 0000
  58+ 0000              MMUSelectSun:        MACRO
  59+ 0000 ~                                 nextreg SunMMU,            BankSunData
  60+ 0000                                   ENDM
  61+ 0000
  62+ 0000              MMUSelectPlanet:     MACRO
  63+ 0000 ~                                 nextreg PlanetMMU,         PlanetBankAddr
  64+ 0000                                   ENDM
  65+ 0000
  66+ 0000              MMUSelectUniverseA:  MACRO
  67+ 0000 ~                                 add    a,BankUNIVDATA0
  68+ 0000 ~                                 nextreg UniverseMMU,       a
  69+ 0000                                   ENDM
  70+ 0000
  71+ 0000              MMUSelectUniverseN:  MACRO value
  72+ 0000 ~                                 nextreg UniverseMMU,       BankUNIVDATA0+value
  73+ 0000                                   ENDM
  74+ 0000
  75+ 0000              MMUSelectGalaxyA:    MACRO
  76+ 0000 ~                                 nextreg GalaxyDataMMU,       a
  77+ 0000                                   ENDM
  78+ 0000
  79+ 0000              MMUSelectGalaxyN:    MACRO value
  80+ 0000 ~                                 nextreg GalaxyDataMMU,     BankGalaxyData0+value
  81+ 0000                                   ENDM
  82+ 0000              MMUSelectGalaxyACopy:MACRO
  83+ 0000 ~                                 nextreg UniverseMMU,       a
  84+ 0000                                   ENDM
  85+ 0000
  86+ 0000              MMUSelectUniverseAbs:MACRO value
  87+ 0000 ~                                 nextreg UniverseMMU,       value
  88+ 0000                                   ENDM
  89+ 0000
  90+ 0000              MMUSelectMenuGalCht: MACRO
  91+ 0000 ~                                 nextreg MenuGalChtMMU,		BankMenuGalCht
  92+ 0000              					 ENDM
  93+ 0000
  94+ 0000              MMUSelectMenuShrCht: MACRO
  95+ 0000 ~            					 nextreg MenuShrChtMMU,		BankMenuShrCht
  96+ 0000              					 ENDM
  97+ 0000
  98+ 0000              MMUSelectMenuInvent: MACRO
  99+ 0000 ~                                 nextreg MenuInventMMU,		BankMenuInvent
 100+ 0000              					 ENDM
 101+ 0000
 102+ 0000              MMUSelectMenuSystem: MACRO
 103+ 0000 ~                                 nextreg MenuSystemMMU,		BankMenuSystem
 104+ 0000              					 ENDM
 105+ 0000
 106+ 0000              MMUSelectMenuMarket: MACRO
 107+ 0000 ~                                 nextreg MenuMarketMMU,		BankMenuMarket
 108+ 0000              					 ENDM
 109+ 0000
 110+ 0000              MMUSelectMenuStatus: MACRO
 111+ 0000 ~                                 nextreg MenuStatusMMU,		BankMenuStatus
 112+ 0000              					 ENDM
 113+ 0000
 114+ 0000              MMUSelectViewFront:  MACRO
 115+ 0000 ~                                 nextreg ScreenBankMMU,		BankFrontView
 116+ 0000              					 ENDM
 117+ 0000
 118+ 0000              MMUSelectScreenA:    MACRO
 119+ 0000 ~                                 nextreg ScreenBankMMU,		a
 120+ 0000              					 ENDM
 121+ 0000
# file closed: ./Macros/MMUMacros.asm
  61  0000                                      INCLUDE "./Macros/NegateMacros.asm"
# file opened: ./Macros/NegateMacros.asm
   1+ 0000
   2+ 0000              NegIY:			    MACRO
   3+ 0000 ~                                xor a
   4+ 0000 ~                                sub iyl
   5+ 0000 ~                                ld iyl,a
   6+ 0000 ~                                sbc a,a
   7+ 0000 ~                                sub iyh
   8+ 0000 ~                                ld iyh,a
   9+ 0000                                  ENDM
  10+ 0000
  11+ 0000              NegHL:			    MACRO
  12+ 0000 ~                                xor a
  13+ 0000 ~                                sub l
  14+ 0000 ~                                ld l,a
  15+ 0000 ~                                sbc a,a
  16+ 0000 ~                                sub h
  17+ 0000 ~                                ld h,a
  18+ 0000                                  ENDM
  19+ 0000
  20+ 0000              NegDE:			    MACRO
  21+ 0000 ~                                xor a
  22+ 0000 ~                                sub e
  23+ 0000 ~                                ld e,a
  24+ 0000 ~                                sbc a,a
  25+ 0000 ~                                sub d
  26+ 0000 ~                                ld d,a
  27+ 0000                                  ENDM
  28+ 0000
  29+ 0000              NegBC:			    MACRO
  30+ 0000 ~                                xor a
  31+ 0000 ~                                sub c
  32+ 0000 ~                                ld c,a
  33+ 0000 ~                                sbc a,a
  34+ 0000 ~                                sub  b
  35+ 0000 ~                                ld b,a
  36+ 0000                                  ENDM
  37+ 0000
  38+ 0000              NegH                MACRO
  39+ 0000 ~                                ld      a,h
  40+ 0000 ~                                neg
  41+ 0000 ~                                ld      h,a
  42+ 0000                                  ENDM
  43+ 0000
  44+ 0000              NegD                MACRO
  45+ 0000 ~                                ld      a,d
  46+ 0000 ~                                neg
  47+ 0000 ~                                ld      d,a
  48+ 0000                                  ENDM
  49+ 0000
  50+ 0000              NegB                MACRO
  51+ 0000 ~                                ld      a,b
  52+ 0000 ~                                neg
  53+ 0000 ~                                ld      b,a
  54+ 0000                                  ENDM
  55+ 0000
# file closed: ./Macros/NegateMacros.asm
  62  0000                                      INCLUDE "./Macros/returnMacros.asm"
# file opened: ./Macros/returnMacros.asm
   1+ 0000              ReturnOnBitSet:         MACRO  reg, bitnbr,
   2+ 0000 ~                                    bit 	bitnbr,reg
   3+ 0000 ~                                    ret     nz
   4+ 0000                                      ENDM
   5+ 0000
   6+ 0000              ReturnOnMemBitSet:      MACRO mem, bitnbr
   7+ 0000 ~                                    ld   a,(mem)
   8+ 0000 ~                                    bit 	bitnbr,a
   9+ 0000 ~                                    ret     nz
  10+ 0000                                      ENDM
  11+ 0000
  12+ 0000              ReturnOnBitClear:       MACRO reg, bitnbr
  13+ 0000 ~                                    bit 	bitnbr,reg
  14+ 0000 ~                                    ret		z
  15+ 0000                                      ENDM
  16+ 0000
  17+ 0000              ReturnOnMemBitClear:    MACRO mem, bitnbr
  18+ 0000 ~                                    ld     a,(mem)
  19+ 0000 ~                                    bit 	bitnbr,a
  20+ 0000 ~                                    ret		z
  21+ 0000                                      ENDM
  22+ 0000
  23+ 0000              ReturnIfMemFalse:       MACRO   mem
  24+ 0000 ~                                    ld      a,(mem)
  25+ 0000 ~                                    and     a
  26+ 0000 ~                                    ret     nz
  27+ 0000                                      ENDM
  28+ 0000
  29+ 0000              ReturnIfMemTrue:        MACRO   mem
  30+ 0000 ~                                    ld      a,(mem)
  31+ 0000 ~                                    and     a
  32+ 0000 ~                                    ret     z
  33+ 0000                                      ENDM
  34+ 0000
  35+ 0000              ReturnIfAIsZero:        MACRO
  36+ 0000 ~                                    and     a
  37+ 0000 ~                                    ret     z
  38+ 0000                                      ENDM
  39+ 0000
  40+ 0000              ReturnIfMemisZero:      MACRO mem
  41+ 0000 ~                                    ld   a,(mem)
  42+ 0000 ~                                    and a
  43+ 0000 ~                                    ret    z
  44+ 0000                                      ENDM
  45+ 0000
  46+ 0000              ReturnIfBitMaskClear    MACRO   bitmask
  47+ 0000 ~                                    and     bitmask
  48+ 0000 ~                                    ret     z
  49+ 0000                                      ENDM
  50+ 0000
  51+ 0000              ReturnIfBitMaskSet      MACRO   bitmask
  52+ 0000 ~                                    and     bitmask
  53+ 0000 ~                                    ret     nz
  54+ 0000                                      ENDM
  55+ 0000
  56+ 0000              ReturnIfMemEquN:        MACRO mem, value
  57+ 0000 ~                                    ld     a,(mem)
  58+ 0000 ~                                    cp     value
  59+ 0000 ~                                    ret    nz
  60+ 0000                                      ENDM
  61+ 0000
  62+ 0000              ReturnIfMemNeNusng:     MACRO mem, value
  63+ 0000 ~                                    ld   a,(mem)
  64+ 0000 ~                                    cp     value
  65+ 0000 ~                                    ret    z
  66+ 0000                                      ENDM
  67+ 0000
  68+ 0000              ReturnIfANotZero:       MACRO
  69+ 0000 ~                                    and     a
  70+ 0000 ~                                    ret     nz
  71+ 0000                                      ENDM
  72+ 0000
  73+ 0000              ReturnIfNotZero:        MACRO
  74+ 0000 ~                                    ret     nz
  75+ 0000                                      ENDM
  76+ 0000
  77+ 0000
  78+ 0000              ReturnIfNegative:       MACRO
  79+ 0000 ~                                    ret     m
  80+ 0000                                      ENDM
  81+ 0000
  82+ 0000
  83+ 0000              ReturnIfMemNotZero:     MACRO mem
  84+ 0000 ~                                    ld     a,(mem)
  85+ 0000 ~                                    and     a
  86+ 0000 ~                                    ret    nz
  87+ 0000                                      ENDM
  88+ 0000
  89+ 0000              ReturnIfAGTEusng:       MACRO value
  90+ 0000 ~                                    cp    value
  91+ 0000 ~                                    ret	 nc
  92+ 0000                                      ENDM
  93+ 0000
  94+ 0000              ReturnIfALTNusng:       MACRO value
  95+ 0000 ~                                    cp    value
  96+ 0000 ~                                    ret	 c
  97+ 0000                                      ENDM
  98+ 0000
  99+ 0000              ReturnIfAGTENusng:      MACRO value
 100+ 0000 ~                                    cp    value
 101+ 0000 ~                                    ret	 nc
 102+ 0000                                      ENDM
 103+ 0000
 104+ 0000              ReturnIfAGTEMemusng:    MACRO value
 105+ 0000 ~                                    ld      hl,value
 106+ 0000 ~                                    cp      (hl)
 107+ 0000 ~                                    ret	    nc
 108+ 0000                                      ENDM
 109+ 0000
 110+ 0000              ReturnIfANENusng:       MACRO value
 111+ 0000 ~                                    cp      value
 112+ 0000 ~                                    ret     nz
 113+ 0000                                      ENDM
 114+ 0000
 115+ 0000              ReturnIfAEqNusng:       MACRO value
 116+ 0000 ~                                    cp      value
 117+ 0000 ~                                    ret     z
 118+ 0000                                      ENDM
 119+ 0000
# file closed: ./Macros/returnMacros.asm
  63  0000                                      INCLUDE "./Macros/ShiftMacros.asm"
# file opened: ./Macros/ShiftMacros.asm
   1+ 0000              ShiftIYRight1: MACRO
   2+ 0000 ~            			   ld 	a,iyh
   3+ 0000 ~            			   srl 	a
   4+ 0000 ~            			   ld	iyh,a
   5+ 0000 ~            			   ld 	a,iyl
   6+ 0000 ~            			   rra
   7+ 0000 ~            			   ld	iyl,a
   8+ 0000              			   ENDM
   9+ 0000
  10+ 0000              ShiftHLRight1: MACRO
  11+ 0000 ~            			   srl h
  12+ 0000 ~            			   rr  l
  13+ 0000              			   ENDM
  14+ 0000
  15+ 0000              ShiftDERight1: MACRO
  16+ 0000 ~            			   srl d
  17+ 0000 ~            			   rr  e
  18+ 0000              			   ENDM
  19+ 0000
  20+ 0000              ShiftBCRight1: MACRO
  21+ 0000 ~            			   srl b
  22+ 0000 ~            			   rr  c
  23+ 0000              			   ENDM
  24+ 0000
  25+ 0000
  26+ 0000
  27+ 0000              ShiftHLDiv8:   MACRO
  28+ 0000 ~            			   srl h
  29+ 0000 ~            			   rr  l
  30+ 0000 ~            			   srl h
  31+ 0000 ~            			   rr  l
  32+ 0000 ~            			   srl h
  33+ 0000 ~            			   rr  l
  34+ 0000              			   ENDM
  35+ 0000
  36+ 0000              ShiftHLLeft1:  MACRO
  37+ 0000 ~            			   sla l
  38+ 0000 ~            			   rl  h
  39+ 0000              			   ENDM
  40+ 0000
  41+ 0000              ShiftDELeft1:  MACRO
  42+ 0000 ~            			   sla e
  43+ 0000 ~            			   rl  d
  44+ 0000              			   ENDM
  45+ 0000
  46+ 0000
  47+ 0000              RollDELeft1:   MACRO
  48+ 0000 ~                           rl  e
  49+ 0000 ~                           rl  d
  50+ 0000                             ENDM
  51+ 0000
  52+ 0000              ShiftBCLeft1:  MACRO
  53+ 0000 ~            			   sla c
  54+ 0000 ~            			   rl  b
  55+ 0000              			   ENDM
  56+ 0000
  57+ 0000
  58+ 0000              ShiftMem16Right1:   MACRO memaddr
  59+ 0000 ~                                ld    hl,(memaddr)
  60+ 0000 ~                                srl   h
  61+ 0000 ~                                rr    l
  62+ 0000 ~                                ld    (memaddr),hl
  63+ 0000                                  ENDM
  64+ 0000
  65+ 0000              ShiftMem8Right1:    MACRO memaddr
  66+ 0000 ~                                ld      a,(memaddr)
  67+ 0000 ~                                srl     a
  68+ 0000 ~                                ld      (memaddr),a
  69+ 0000                                  ENDM
  70+ 0000
  71+ 0000
  72+ 0000              ShiftMem8Left1A:    MACRO memaddr
  73+ 0000 ~                                ld      a,(memaddr)
  74+ 0000 ~                                sla     a
  75+ 0000 ~                                ld      (memaddr),a
  76+ 0000                                  ENDM
  77+ 0000
# file closed: ./Macros/ShiftMacros.asm
  64  0000                                      INCLUDE "./Macros/signBitMacros.asm"
# file opened: ./Macros/signBitMacros.asm
   1+ 0000
   2+ 0000              FlipMemSign:            MACRO mem
   3+ 0000 ~                                    ld  a,(mem)
   4+ 0000 ~                                    xor SignOnly8Bit
   5+ 0000 ~                                    ld  (mem),a
   6+ 0000                                      ENDM
   7+ 0000
   8+ 0000              ClearSignBit:           MACRO reg
   9+ 0000 ~                                    ld      a,reg
  10+ 0000 ~                                    and     SignMask8Bit
  11+ 0000 ~                                    ld      reg,a
  12+ 0000                                      ENDM
  13+ 0000
# file closed: ./Macros/signBitMacros.asm
  65  0000                                      INCLUDE "./Tables/message_queue_macros.asm"
# file opened: ./Tables/message_queue_macros.asm
   1+ 0000
   2+ 0000              AnyMessagesMacro:       MACRO   NoMessageTarget
   3+ 0000 ~                                    ld      a, (MessageCount)
   4+ 0000 ~                                    and     a
   5+ 0000 ~                                    jr      z, NoMessageTarget
   6+ 0000                                      ENDM
   7+ 0000
   8+ 0000              AnyHyperSpaceMacro:     MACRO   NoMessageText
   9+ 0000 ~                                    ld      hl,(InnerHyperCount)
  10+ 0000 ~                                    ld      a,h
  11+ 0000 ~                                    or      l
  12+ 0000 ~                                    jr      z, NoMessageText
  13+ 0000                                      ENDM
  14+ 0000
# file closed: ./Tables/message_queue_macros.asm
  66  0000                                      INCLUDE "./Variables/general_variables_macros.asm"
# file opened: ./Variables/general_variables_macros.asm
   1+ 0000              ; limited to 255 character length
   2+ 0000              CountLengthHL:          MACRO   Limiter
   3+ 0000 ~                                    ld      de,hl
   4+ 0000 ~                                    ld      bc,Limiter
   5+ 0000 ~                                    xor     a
   6+ 0000 ~                                    cpir
   7+ 0000 ~                                    ClearCarryFlag
   8+ 0000 ~                                    sbc     hl,de
   9+ 0000 ~                                    ld      a,l
  10+ 0000 ~                                    ret
  11+ 0000                                      ENDM
  12+ 0000
  13+ 0000              HalfLengthHL:           MACRO
  14+ 0000 ~                                    ld      b,0
  15+ 0000 ~            .CountLenLoop:          ld      a,(hl)
  16+ 0000 ~                                    cp      0
  17+ 0000 ~                                    jr      z,.DoneCount
  18+ 0000 ~                                    inc     b
  19+ 0000 ~                                    inc     hl
  20+ 0000 ~                                    jr      .CountLenLoop
  21+ 0000 ~            .DoneCount:             ld      a,32
  22+ 0000 ~                                    sub     b
  23+ 0000 ~                                    sra     a
  24+ 0000                                      ENDM
  25+ 0000
  26+ 0000              MakeInnocentMacro:		MACRO
  27+ 0000 ~            						xor		a
  28+ 0000 ~            						ld		(FugitiveInnocentStatus),a
  29+ 0000              						ENDM
  30+ 0000
  31+ 0000              NoEscapePodMacro:		MACRO
  32+ 0000 ~            						xor		a
  33+ 0000 ~            						ld		(EscapePod),a
  34+ 0000              						ENDM
  35+ 0000
  36+ 0000              MaxFuelLevel            EQU     70              ; 7.0 light years max
  37+ 0000              MaxFuelMacro:			MACRO
  38+ 0000 ~            						ld		a,MaxFuelLevel
  39+ 0000 ~            						ld		(Fuel),a
  40+ 0000              						ENDM
  41+ 0000
  42+ 0000              MaxThrottle:            MACRO
  43+ 0000 ~                                    ld      a,(SHIPMAXSPEED)
  44+ 0000 ~                                    ld      (DELTA),a
  45+ 0000 ~                                    ld      d,a
  46+ 0000 ~                                    ld      e,4
  47+ 0000 ~                                    mul
  48+ 0000 ~                                    ld      (DELT4Lo),de
  49+ 0000                                      ENDM
  50+ 0000
  51+ 0000              ZeroThrottle:           MACRO
  52+ 0000 ~                                    xor     a
  53+ 0000 ~                                    ld      (DELTA),a
  54+ 0000 ~                                    ld      (DELT4Lo),a
  55+ 0000 ~                                    ld      (DELT4Lo+1),a
  56+ 0000                                      ENDM
  57+ 0000
  58+ 0000              ZeroPitch:              MACRO
  59+ 0000 ~                                    xor     a
  60+ 0000 ~                                    ld      (BET2),a
  61+ 0000 ~                                    ld      (BET2FLIP),a
  62+ 0000 ~                                    ld      (JSTY),a
  63+ 0000 ~                                    ld      (BETA),a
  64+ 0000                                      ENDM
  65+ 0000
  66+ 0000              ZeroRoll:               MACRO
  67+ 0000 ~                                    xor     a                              ; zero roll and climb
  68+ 0000 ~                                    ld      (ALP2),a
  69+ 0000 ~                                    ld      (ALP2FLIP),a
  70+ 0000 ~                                    ld      (JSTX),a
  71+ 0000 ~                                    ld      (ALPHA),a
  72+ 0000                                      ENDM
  73+ 0000
  74+ 0000              CorrectPostJumpFuel:    MACRO
  75+ 0000 ~                                    ld      a,(Fuel)
  76+ 0000 ~                                    ld      hl,Distance
  77+ 0000 ~                                    sub     a,(hl)
  78+ 0000 ~                                    ld      (Fuel),a
  79+ 0000                                      ENDM
  80+ 0000
  81+ 0000              AnyMissilesLeft:        MACRO
  82+ 0000 ~                                    ld      a,(NbrMissiles)
  83+ 0000 ~                                    and     a
  84+ 0000                                      ENDM
  85+ 0000
  86+ 0000              SetMissileTargetA:      MACRO
  87+ 0000 ~                                    ld      (MissileTarget),a
  88+ 0000                                      ENDM
  89+ 0000
  90+ 0000              IsMissileLockedOn:      MACRO
  91+ 0000 ~                                    ld      a,(MissileTarget)
  92+ 0000 ~                                    cp      $FF
  93+ 0000 ~                                    ret     z
  94+ 0000 ~                                    ReturnIfSlotAEmpty                  ; if target slot is empty
  95+ 0000 ~                                    ret                                 ; will return as nz now
  96+ 0000                                      ENDM
  97+ 0000
  98+ 0000              ClearMissileTarget:     MACRO
  99+ 0000 ~                                    xor     a                           ; Set missile target to FF
 100+ 0000 ~                                    dec     a
 101+ 0000 ~                                    ld      (MissileTarget),a
 102+ 0000 ~                                    SetMemFalse MissileLaunchFlag
 103+ 0000                                      ENDM
 104+ 0000
 105+ 0000              ClearECM:               MACRO
 106+ 0000 ~                                    xor     a
 107+ 0000 ~                                    ld      (ECMLoopA),a
 108+ 0000 ~                                    ld      (ECMLoopB),a
 109+ 0000                                      ENDM
 110+ 0000
 111+ 0000              ChargeEnergyAndShields: MACRO
 112+ 0000 ~                                    ld      a,$FF
 113+ 0000 ~                                    ld      (PlayerEnergy),a
 114+ 0000 ~                                    ld      (ForeShield),a
 115+ 0000 ~                                    ld      (AftShield),a
 116+ 0000                                      ENDM
 117+ 0000
 118+ 0000              CopyPresentSystemToTarget: MACRO
 119+ 0000 ~                                    ld      hl,(PresentSystemX)
 120+ 0000 ~                                    ld      (TargetSystemX),hl
 121+ 0000                                      ENDM
 122+ 0000
 123+ 0000              CopyTargetSystemToPresent: MACRO
 124+ 0000 ~                                    ld      hl,(TargetSystemX)
 125+ 0000 ~                                    ld      (PresentSystemX),hl
 126+ 0000                                      ENDM
 127+ 0000
 128+ 0000              HalveFugitiveStatus:    MACRO
 129+ 0000 ~                                    ld      hl,FugitiveInnocentStatus
 130+ 0000 ~                                    srl     (hl)
 131+ 0000                                      ENDM
 132+ 0000
 133+ 0000              ClearForceTransition    MACRO
 134+ 0000 ~                                    ld      a,$FF
 135+ 0000 ~                                    ld      (ScreenTransitionForced),a
 136+ 0000                                      ENDM
 137+ 0000
 138+ 0000              ForceTransition:        MACRO newScreen
 139+ 0000 ~                                    ld      a,newScreen
 140+ 0000 ~                                    ld      (ScreenTransitionForced), a
 141+ 0000                                      ENDM
 142+ 0000
 143+ 0000              IsSpaceStationPresent:  MACRO
 144+ 0000 ~                                    ld      a,(SpaceStationSafeZone)
 145+ 0000 ~                                    and     a
 146+ 0000                                      ENDM
 147+ 0000
 148+ 0000              SetSafeZone:            MACRO
 149+ 0000 ~                                    xor     a
 150+ 0000 ~                                    ld      (SpaceStationSafeZone),a
 151+ 0000                                      ENDM
 152+ 0000
 153+ 0000              ClearSafeZone:          MACRO
 154+ 0000 ~                                    ld      a,$FF
 155+ 0000 ~                                    ld      (SpaceStationSafeZone),a
 156+ 0000                                      ENDM
 157+ 0000
 158+ 0000              CoolLasers:             MACRO
 159+ 0000 ~                                    ld      a,(GunTemperature)
 160+ 0000 ~                                    and     a
 161+ 0000 ~                                    jr      z,.AlreadyCool
 162+ 0000 ~                                    dec     a
 163+ 0000 ~                                    ld      (GunTemperature),a
 164+ 0000 ~            .AlreadyCool:
 165+ 0000                                      ENDM
 166+ 0000
 167+ 0000
 168+ 0000              InitEventCounter:       MACRO
 169+ 0000 ~                                    xor     a
 170+ 0000 ~                                    ld      (EventCounter),a
 171+ 0000                                      ENDM
 172+ 0000
 173+ 0000              ClearMissJump:          MACRO
 174+ 0000 ~                                    ld      a,$FF
 175+ 0000 ~                                    ld      (MissJumpFlag),a
 176+ 0000                                      ENDM
 177+ 0000
# file closed: ./Variables/general_variables_macros.asm
  67  0000                                      INCLUDE "./Variables/UniverseSlot_macros.asm"
# file opened: ./Variables/UniverseSlot_macros.asm
   1+ 0000
   2+ 0000              AddJunkCount:           MACRO
   3+ 0000 ~                                    ld      hl,JunkCount
   4+ 0000 ~                                    inc     (hl)
   5+ 0000                                      ENDM
   6+ 0000
   7+ 0000              SubJunkCount:           MACRO
   8+ 0000 ~                                    ld      hl,JunkCount
   9+ 0000 ~                                    dec     (hl)
  10+ 0000                                      ENDM
  11+ 0000
  12+ 0000              AddCop:                 MACRO
  13+ 0000 ~                                    ld      hl,CopCount
  14+ 0000 ~                                    inc     (hl)
  15+ 0000                                      ENDM
  16+ 0000
  17+ 0000              SubCop:                 MACRO
  18+ 0000 ~                                    ld      hl,CopCount
  19+ 0000 ~                                    dec     (hl)
  20+ 0000                                      ENDM
  21+ 0000
  22+ 0000              AddPirateCount:         MACRO
  23+ 0000 ~                                    ld      hl,PirateCount
  24+ 0000 ~                                    inc     (hl)
  25+ 0000                                      ENDM
  26+ 0000
  27+ 0000              SubPirateCount:         MACRO
  28+ 0000 ~                                    ld      hl,PirateCount
  29+ 0000 ~                                    inc     (hl)
  30+ 0000                                      ENDM
  31+ 0000
  32+ 0000              AreCopsPresent:         MACRO
  33+ 0000 ~                                    ld      a,(CopCount)
  34+ 0000 ~                                    and     a
  35+ 0000                                      ENDM
  36+ 0000
  37+ 0000              TestRoomForJunk:        MACRO   Target
  38+ 0000 ~                                    ld      a,3
  39+ 0000 ~                                    JumpIfALTMemusng    JunkCount, Target
  40+ 0000                                      ENDM
  41+ 0000
  42+ 0000              JumpIfSpaceStation:     MACRO   Target
  43+ 0000 ~                                    ld      hl,UniverseSlotType
  44+ 0000 ~                                    ld      a,(hl)
  45+ 0000 ~                                    cp      ShipTypeStation
  46+ 0000                                      ENDM
  47+ 0000
  48+ 0000
  49+ 0000              ; Checks if slot is empty else A = ship type
  50+ 0000              ReturnIfSlotAEmpty:     MACRO
  51+ 0000 ~                                    ld      hl,UniverseSlotList
  52+ 0000 ~                                    add     hl,a
  53+ 0000 ~                                    ld      a,(hl)
  54+ 0000 ~                                    inc     a
  55+ 0000 ~                                    ret     z           ; if slot was ff inc would make it 0
  56+ 0000 ~                                    dec     a           ; get original value back for later
  57+ 0000                                      ENDM
  58+ 0000
  59+ 0000              JumpIfSlotAEmpty:       MACRO   Target
  60+ 0000 ~                                    ld      hl,UniverseSlotList
  61+ 0000 ~                                    add     hl,a
  62+ 0000 ~                                    ld      a,(hl)
  63+ 0000 ~                                    inc     a
  64+ 0000 ~                                    jp      z,Target    ; if slot was ff inc would make it 0
  65+ 0000 ~                                    dec     a           ; get original value back for later
  66+ 0000                                      ENDM
  67+ 0000
  68+ 0000              JumpIfSlotHLEmpty:      MACRO   Target
  69+ 0000 ~                                    ld      a,(hl)
  70+ 0000 ~                                    and     a
  71+ 0000 ~                                    jr      nz,Target
  72+ 0000                                      ENDM
# file closed: ./Variables/UniverseSlot_macros.asm
  68  0000
  69  0000                                      INCLUDE "./Data/ShipIdEquates.asm"
# file opened: ./Data/ShipIdEquates.asm
   1+ 0000              ShipID_Adder            EQU 00
   2+ 0000              ShipID_Anaconda         EQU 01
   3+ 0000              ShipID_Asp_Mk_2         EQU 02
   4+ 0000              ShipID_Boa              EQU 03
   5+ 0000              ShipID_CargoType5       EQU 04
   6+ 0000              ShipID_Boulder          EQU 05
   7+ 0000              ShipID_Asteroid         EQU 06
   8+ 0000              ShipID_Bushmaster       EQU 07
   9+ 0000              ShipID_Chameleon        EQU 08
  10+ 0000              ShipID_CobraMk3         EQU 09
  11+ 0000              ShipID_Cobra_Mk_1       EQU 10
  12+ 0000              ShipID_Cobra_Mk_3_P     EQU 11
  13+ 0000              ShipID_Constrictor      EQU 12
  14+ 0000              ShipID_Coriolis         EQU 13
  15+ 0000              ShipID_Cougar           EQU 14
  16+ 0000              ShipID_Dodo             EQU 15
  17+ 0000              ShipID_Dragon           EQU 16
  18+ 0000              ShipID_Escape_Pod       EQU 17
  19+ 0000              ShipID_Fer_De_Lance     EQU 18
  20+ 0000              ShipID_Gecko            EQU 19
  21+ 0000              ShipID_Ghavial          EQU 20
  22+ 0000              ShipID_Iguana           EQU 21
  23+ 0000              ShipID_Krait            EQU 22
  24+ 0000              ShipID_Logo             EQU 23
  25+ 0000              ShipID_Mamba            EQU 24
  26+ 0000              ShipID_Missile          EQU 25
  27+ 0000              ShipID_Monitor          EQU 26
  28+ 0000              ShipID_Moray            EQU 27
  29+ 0000              ShipID_Ophidian         EQU 28
  30+ 0000              ShipID_Plate            EQU 29
  31+ 0000              ShipID_Python           EQU 30
  32+ 0000              ShipID_Python_P         EQU 31
  33+ 0000              ShipID_Rock_Hermit      EQU 32
  34+ 0000              ShipID_ShuttleType9     EQU 33
  35+ 0000              ShipID_Shuttle_Mk_2     EQU 34
  36+ 0000              ShipID_Sidewinder       EQU 35
  37+ 0000              ShipID_Splinter         EQU 36
  38+ 0000              ShipID_TestVector       EQU 37
  39+ 0000              ShipID_Thargoid         EQU 38
  40+ 0000              ShipID_Thargon          EQU 39
  41+ 0000              ShipID_TransportType10  EQU 40
  42+ 0000              ShipID_Viper            EQU 41
  43+ 0000              ShipID_Worm             EQU 42
  44+ 0000              ShipID_Rattler          EQU 43
  45+ 0000
# file closed: ./Data/ShipIdEquates.asm
  70  0000
  71  0000
  72  0000
  73  0000              charactersetaddr		equ 15360
  74  0000              STEPDEBUG               equ 1
  75  0000
  76  0000              TopOfStack              equ $7F00
  77  0000
  78  0000              EliteNextStartup:       ORG         $8000
  79  8000 F3                                   di
  80  8001                                      ; "STARTUP"
  81  8001                                      MMUSelectLayer1
  81  8001 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
  81  8005 CD 80 E0       call		l1_cls
  82  8008 3E 07                                ld			a,7
  83  800A CD 9B E0                             call		l1_attr_cls_to_a
  84  800D 3E FF                                ld          a,$FF
  85  800F CD A5 E0                             call        l1_set_border
  86  8012                                      MMUSelectSpriteBank
  86  8012 ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
  86  8016 CD 45 E4       call		sprite_load_sprite_data
  87  8019              Initialise:             MMUSelectLayer2
  87  8019 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
  87  801D CD D0 E0        call 		l2_initialise
  88  8020 CD 22 96                             call        init_keyboard
  89  8023                                      ClearForceTransition
  89  8023 3E FF       >                        ld      a,$FF
  89  8025 32 93 87    >                        ld      (ScreenTransitionForced),a
  90  8028 3E 10        TidyDEBUG:              ld          a,16
  91  802A 32 61 86                             ld          (TidyCounter),a
  92  802D AF           TestText:               xor			a
  93  802E 32 3B 98                             ld      (JSTX),a
  94  8031                                      MMUSelectCommander
  94  8031 ED 91 57 38 >                     nextreg CommanderMMU,       BankCommander
  94  8035 CD 2F E0       call		defaultCommander
  95  8038              DEBUGCODE:              ClearSafeZone ; just set in open space so compas treacks su n
  95  8038 3E FF       >                        ld      a,$FF
  95  803A 32 15 9A    >                        ld      (SpaceStationSafeZone),a
  96  803D                                      MMUSelectSpriteBank
  96  803D ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
  96  8041 CD 3D E4       call		init_sprites
  97  8044              .ClearLayer2Buffers:    DoubleBufferIfPossible
  97  8044             >                        IFDEF DOUBLEBUFFER
  97  8044             >                            MMUSelectLayer2
  97  8044 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
  97  8048 CD C9 E0    >                            call  l2_cls
  97  804B CD DD E0    >                            call  l2_flip_buffers
  97  804E             >                        ENDIF
  98  804E                                      DoubleBufferIfPossible
  98  804E             >                        IFDEF DOUBLEBUFFER
  98  804E             >                            MMUSelectLayer2
  98  804E ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
  98  8052 CD C9 E0    >                            call  l2_cls
  98  8055 CD DD E0    >                            call  l2_flip_buffers
  98  8058             >                        ENDIF
  99  8058              ; Set up all 8 galaxies, 7later this will be pre built and loaded into memory from files
 100  8058 CD 94 87     InitialiseGalaxies:     call		ResetUniv                       ; Reset ship data
 101  805B CD BC 87                             call        ResetGalaxy                     ; Reset each galaxy copying in code
 102  805E CD E5 87                             call        SeedAllGalaxies
 103  8061              ;.Sa                        MMUSelectUniverseN 0
 104  8061
 105  8061              ;InitialiseDemoShip:     call    ClearFreeSlotList
 106  8061              ;                        call    FindNextFreeSlotInA
 107  8061              ;                        ld      b,a
 108  8061              ;                        ld      a,13 ;Coriolis station
 109  8061              ;                        call    InitialiseShipAUnivB
 110  8061              ;                        xor     a
 111  8061 AF           InitialiseMainLoop:     xor     a
 112  8062 32 E9 99                             ld      (CurrentUniverseAI),a
 113  8065 32 EB 99                             ld      (SetStationAngryFlag),a
 114  8068 3E 03                                ld      a,3
 115  806A 32 32 99                             ld      (MenuIdMax),a
 116  806D                                      SetMemFalse DockedFlag
 116  806D 3E FF       >                        ld      a,$FF
 116  806F 32 36 99    >                        ld      (DockedFlag),a
 117  8072              ;                        call    InitialiseFrontView
 118  8072 CD 2A 88                             call    InitialiseCommander
 119  8075                                      MMUSelectUniverseN 2
 119  8075 ED 91 56 48 >                     nextreg UniverseMMU,       BankUNIVDATA0+2
 120  8079 CD F6 88                             call    SetInitialShipPosition
 121  807C              ; Initialist screen refresh
 122  807C 3E 04                                ld      a, ConsoleRefreshInterval
 123  807E 32 10 9A                             ld      (ConsoleRefreshCounter),a
 124  8081                                      SetMemFalse    ConsoleRedrawFlag
 124  8081 3E FF       >                        ld      a,$FF
 124  8083 32 11 9A    >                        ld      (ConsoleRedrawFlag),a
 125  8086                                      MMUSelectStockTable
 125  8086 ED 91 57 37 >                     nextreg StockTableMMU,     BankStockTable
 126  808A CD AA E0                             call    generate_stock_market
 127  808D CD 4A 8E                             call    ResetMessageQueue
 128  8090                                      InitEventCounter
 128  8090 AF          >                        xor     a
 128  8091 32 EF 99    >                        ld      (EventCounter),a
 129  8094                                      ClearMissJump
 129  8094 3E FF       >                        ld      a,$FF
 129  8096 32 F1 99    >                        ld      (MissJumpFlag),a
 130  8099                                      SetMemFalse TextInputMode
 130  8099 3E FF       >                        ld      a,$FF
 130  809B 32 12 9A    >                        ld      (TextInputMode),a
 131  809E              ;..MAIN GAME LOOP..................................................................................................................
 132  809E              ; MACRO BLOCKS.....................................................................................................................
 133  809E              ;.. Check if keyboard scanning is allowed by screen. If this is set then skip all keyboard and AI..................................
 134  809E              InputMainMacro:         MACRO
 135  809E ~                                    call    ViewKeyTest
 136  809E ~                                    call    TestPauseMode
 137  809E ~                                    ld      a,(GamePaused)
 138  809E ~                                    cp      0
 139  809E ~                                    jr      nz,MainLoop
 140  809E ~                                    call    MovementKeyTest
 141  809E                                      ENDM
 142  809E
 143  809E              ; counter logic
 144  809E              ;    if beam on count > 0 then beam on count --
 145  809E              ;    if beam on = 0 then
 146  809E              ;       if beam off count >0 then beam off count --
 147  809E              ;       if beam off count = 0 them
 148  809E              ;          if pulse rest count > 0 then pulse rest count --
 149  809E              ;
 150  809E              ;    if fire pressed is OK
 151  809E              ;        pulse rate count ++
 152  809E              ;        pulse on count = pulse on time
 153  809E              ;        pulse off count = pulse off time
 154  809E              ;        pulse rest count = pulse rest time
 155  809E
 156  809E              UpdateLaserCounters:    MACRO
 157  809E ~                                    JumpIfMemZero CurrLaserPulseOnCount,   .SkipPulseOn
 158  809E ~                                    dec     a
 159  809E ~                                    ld      (CurrLaserPulseOnCount),a
 160  809E ~            .SkipPulseOn:           JumpIfAIsNotZero  .SkipOffCounters
 161  809E ~                                    ld      a,(CurrLaserPulseOffCount)
 162  809E ~                                    JumpIfMemZero CurrLaserPulseOffCount, .SkipPulseOff
 163  809E ~                                    dec     a
 164  809E ~                                    ld      (CurrLaserPulseRateCount),a
 165  809E ~            .SkipPulseOff:          JumpIfMemZero CurrLaserPulseRestCount, .SkipRestRate
 166  809E ~                                    dec     a
 167  809E ~                                    ld      (CurrLaserPulseRestCount),a
 168  809E ~            .SkipRestRate:          JumpIfMemZero CurrLaserPulseOnCount,   .SkipOffCounters
 169  809E ~                                    dec     a
 170  809E ~                                    ld      (CurrLaserPulseRestCount),a
 171  809E ~            .SkipOffCounters:
 172  809E                                      ENDM
 173  809E
 174  809E              ;..................................................................................................................................
 175  809E CD D0 9D     MainLoop:	            call    doRandom                            ; redo the seeds every frame
 176  80A1                                      UpdateLaserCounters
 176  80A1             >                        JumpIfMemZero CurrLaserPulseOnCount,   .SkipPulseOn
 176  80A1 3A 3F 9C    >                        ld  a,(CurrLaserPulseOnCount)
 176  80A4 A7          >                        and a
 176  80A5 CA AC 80    >                        jp  z,.SkipPulseOn
 176  80A8 3D          >                        dec     a
 176  80A9 32 3F 9C    >                        ld      (CurrLaserPulseOnCount),a
 176  80AC             >.SkipPulseOn:           JumpIfAIsNotZero  .SkipOffCounters
 176  80AC FE 00       >                        cp	0
 176  80AE C2 D5 80    >                        jp	nz,.SkipOffCounters
 176  80B1 3A 40 9C    >                        ld      a,(CurrLaserPulseOffCount)
 176  80B4             >                        JumpIfMemZero CurrLaserPulseOffCount, .SkipPulseOff
 176  80B4 3A 40 9C    >                        ld  a,(CurrLaserPulseOffCount)
 176  80B7 A7          >                        and a
 176  80B8 CA BF 80    >                        jp  z,.SkipPulseOff
 176  80BB 3D          >                        dec     a
 176  80BC 32 42 9C    >                        ld      (CurrLaserPulseRateCount),a
 176  80BF             >.SkipPulseOff:          JumpIfMemZero CurrLaserPulseRestCount, .SkipRestRate
 176  80BF 3A 41 9C    >                        ld  a,(CurrLaserPulseRestCount)
 176  80C2 A7          >                        and a
 176  80C3 CA CA 80    >                        jp  z,.SkipRestRate
 176  80C6 3D          >                        dec     a
 176  80C7 32 41 9C    >                        ld      (CurrLaserPulseRestCount),a
 176  80CA             >.SkipRestRate:          JumpIfMemZero CurrLaserPulseOnCount,   .SkipOffCounters
 176  80CA 3A 3F 9C    >                        ld  a,(CurrLaserPulseOnCount)
 176  80CD A7          >                        and a
 176  80CE CA D5 80    >                        jp  z,.SkipOffCounters
 176  80D1 3D          >                        dec     a
 176  80D2 32 41 9C    >                        ld      (CurrLaserPulseRestCount),a
 176  80D5             >.SkipOffCounters:
 177  80D5                                      CoolLasers
 177  80D5 3A 1D 9C    >                        ld      a,(GunTemperature)
 177  80D8 A7          >                        and     a
 177  80D9 28 04       >                        jr      z,.AlreadyCool
 177  80DB 3D          >                        dec     a
 177  80DC 32 1D 9C    >                        ld      (GunTemperature),a
 177  80DF             >.AlreadyCool:
 178  80DF CD 2E 96                             call    scan_keyboard                       ; perform the physical input scan
 179  80E2              ;.. This bit allows cycling of ships on universe 0 in demo.........................................................................
 180  80E2 CD 96 84     DemoOfShipsDEBUG:       call    TestForNextShip
 181  80E5              ;.. Check if keyboard scanning is allowed by screen. If this is set then skip all keyboard and AI..................................
 182  80E5 3E 00        InputBlockerCheck:      ld      a,$0
 183  80E7                                      JumpIfAEqNusng $01, SkipInputHandlers       ; as we are in a transition the whole update AI is skipped
 183  80E7 FE 01       >                        cp     $01
 183  80E9 CA 12 81    >                        jp      z,SkipInputHandlers
 184  80EC                                      JumpIfMemTrue TextInputMode, SkipInputHandlers  ; in input mode all keys are processed by input
 184  80EC 3A 12 9A    >                        ld      a,(TextInputMode)
 184  80EF A7          >                        and     a
 184  80F0 CA 12 81    >                        jp      z, SkipInputHandlers
 185  80F3                                      InputMainMacro
 185  80F3 CD 8E 88    >                        call    ViewKeyTest
 185  80F6 CD B2 85    >                        call    TestPauseMode
 185  80F9 3A 37 99    >                        ld      a,(GamePaused)
 185  80FC FE 00       >                        cp      0
 185  80FE 20 9E       >                        jr      nz,MainLoop
 185  8100 CD 77 97    >                        call    MovementKeyTest
 186  8103              ;.. Process cursor keys for respective screen if the address is 0 then we skill just skip movement.................................
 187  8103 3A 11 81     HandleMovement:         ld      a,(CallCursorRoutine+2)
 188  8106                                      JumpIfAIsZero     TestAreWeDocked
 188  8106 A7          >                        and a   ; cp 0 - changed to and a for optimisation but affects other flags
 188  8107 CA 12 81    >                        jp	z, TestAreWeDocked
 189  810A              ;.. Handle displaying correct screen ..............................................................................................
 190  810A 3E 00        HandleBankSelect:       ld      a,$00
 191  810C                                      MMUSelectScreenA
 191  810C ED 92 56    >                     nextreg ScreenBankMMU,		a
 192  810F CD 00 00     CallCursorRoutine:      call    $0000
 193  8112              ;.. Check to see if we are docked as if we are (or are docking.launching then no AI/Ship updates occur.............................
 194  8112              ;.. Also end up here if we have the screen input blocker set
 195  8112              SkipInputHandlers:
 196  8112              ;.. For Docked flag its - 0 = in free space, FF = Docked, FE transition, FD = Setup open space and transition to not docked
 197  8112 3A 36 99     TestAreWeDocked:        ld      a,(DockedFlag)                                ; if if we are in free space do universe update
 198  8115                                      JumpIfANENusng  0, SkipUniveseUpdate                  ; else we skip it. As we are also in dock/transition then no models should be updated so we dont; need to draw
 198  8115 FE 00       >                        cp     0
 198  8117 C2 C7 81    >                        jp      nz,SkipUniveseUpdate
 199  811A
 200  811A 21 EF 99     .UpdateEventCounter:    ld      hl,EventCounter                               ; evnery 256 cycles we do a trigger test
 201  811D 35                                   dec     (hl)
 202  811E CC 63 82                             call    z,LoopEventTriggered
 203  8121                                      CallIfMemTrue   MissileLaunchFlag, LaunchPlayerMissile
 203  8121 3A 28 9C    >                        ld      a,(MissileLaunchFlag)
 203  8124 A7          >                        and     a
 203  8125 CC 45 83    >                        call    z, LaunchPlayerMissile
 204  8128              ;.. If we get here then we are in game running mode regardless of which screen we are on, so update AI.............................
 205  8128              ;.. we do one universe slot each loop update ......................................................................................
 206  8128              ;.. First update Sun...............................................................................................................
 207  8128 CD BA 83     .UpdateShips:           call    UpdateUniverseObjects
 208  812B                                      JumpIfMemNeNusng ScreenTransitionForced, $FF, BruteForceChange                          ; if we docked then a transition would have been forced
 208  812B 3A 93 87    >                        ld  a,(ScreenTransitionForced)
 208  812E FE FF       >                        cp  $FF
 208  8130 C2 A9 83    >                        jp  nz,BruteForceChange
 209  8133 3E 00        CheckIfViewUpdate:      ld      a,$00                                         ; if this is set to a view number then we process a view
 210  8135                                      JumpIfAIsZero  MenusLoop                                  ; This will change as more screens are added TODO
 210  8135 A7          >                        and a   ; cp 0 - changed to and a for optimisation but affects other flags
 210  8136 CA BF 81    >                        jp	z, MenusLoop
 211  8139              ;..Processing a view...............................................................................................................
 212  8139              ;..Display any message ............................................................................................................
 213  8139              .CheckHyperspaceMessage:AnyHyperSpaceMacro .HandleMessages
 213  8139 2A ED 99    >                        ld      hl,(InnerHyperCount)
 213  813C 7C          >                        ld      a,h
 213  813D B5          >                        or      l
 213  813E 28 03       >                        jr      z, .HandleMessages
 214  8140 CD E8 8E                             call    HyperSpaceMessage
 215  8143              .HandleMessages:        AnyMessagesMacro  .NoMessages
 215  8143 3A 43 98    >                        ld      a, (MessageCount)
 215  8146 A7          >                        and     a
 215  8147 28 06       >                        jr      z, .NoMessages
 216  8149 CD CA 8E                             call    DisplayCurrentMessage
 217  814C CD A9 8E                             call    UpdateMessageTimer
 218  814F
 219  814F              .NoMessages:            MMUSelectLayer2
 219  814F ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 219  8153 CD A9 E0       call   l2_cls_upper_two_thirds
 220  8156                                      MMUSelectLayer1
 220  8156 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 221  815A              .UpdateSun:             MMUSelectSun
 221  815A ED 91 56 53 >                     nextreg SunMMU,            BankSunData
 222  815E              .DEBUGFORCE:            ;ld      hl,$0000
 223  815E                                      ;ld      (SBnKxlo),hl
 224  815E                                      ;ld      (SBnKylo),hl
 225  815E                                      ;xor     a
 226  815E                                      ;ld      (SBnKxsgn),a
 227  815E                                      ;ld      (SBnKysgn),a
 228  815E                                      ;ld      hl,$0200
 229  815E                                      ;ld      (SBnKzlo),hl
 230  815E                                      ;ld      a,$00
 231  815E                                      ;ld      (SBnKzsgn),a
 232  815E CD 5D C5                             call    SunUpdateAndRender
 233  8161              ;..Later this will be done via self modifying code to load correct stars routine for view..........................................
 234  8161 3E DF        DrawDustForwards:       ld     a,$DF
 235  8163 32 EF E8                             ld     (line_gfx_colour),a
 236  8166              DustUpdateBank:         MMUSelectViewFront                                    ; This needs to be self modifying
 236  8166 ED 91 56 3E >                     nextreg ScreenBankMMU,		BankFrontView
 237  816A CD 32 93     DustUpdateRoutine:      call   DustForward                                   ; This needs to be self modifying
 238  816D 21 10 9A     PrepLayer2:             ld      hl,ConsoleRefreshCounter
 239  8170 35                                   dec     (hl)
 240  8171 CA 7F 81                             jp      z,ConsoleDraw
 241  8174 FA 8D 81                             jp      m,ConsoleDrawReset
 242  8177              .ConsoleNotDraw:        SetMemFalse ConsoleRedrawFlag
 242  8177 3E FF       >                        ld      a,$FF
 242  8179 32 11 9A    >                        ld      (ConsoleRedrawFlag),a
 243  817C C3 B2 81                             jp      ProcessPlanet
 244  817F              ConsoleDraw:            SetMemTrue ConsoleRedrawFlag
 244  817F AF          >                        xor     a
 244  8180 32 11 9A    >                        ld      (ConsoleRedrawFlag),a
 245  8183                                      MMUSelectLayer2
 245  8183 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 245  8187 CD BE E0         call    l2_cls_lower_third                                  ; Clear layer 2 for graphics
 246  818A C3 B2 81                             jp      ProcessPlanet
 247  818D              ConsoleDrawReset:       SetMemTrue ConsoleRedrawFlag
 247  818D AF          >                        xor     a
 247  818E 32 11 9A    >                        ld      (ConsoleRedrawFlag),a
 248  8191 36 04                                ld      (hl),ConsoleRefreshInterval
 249  8193                                      MMUSelectLayer2
 249  8193 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 249  8197 CD BE E0         call    l2_cls_lower_third                                  ; Clear layer 2 for graphics
 250  819A              ;ProcessSun:             call    DrawForwardSun
 251  819A              ProcessLaser:           JumpIfMemZero CurrLaserPulseOnCount, NoLaser
 251  819A 3A 3F 9C    >                        ld  a,(CurrLaserPulseOnCount)
 251  819D A7          >                        and a
 251  819E CA AB 81    >                        jp  z,NoLaser
 252  81A1                                      MMUSelectSpriteBank
 252  81A1 ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
 253  81A5 CD BB E2                             call    sprite_laser_show
 254  81A8 C3 B2 81                             jp      ProcessPlanet
 255  81AB              NoLaser:                MMUSelectSpriteBank
 255  81AB ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
 256  81AF CD 95 E3                             call    sprite_laser_hide
 257  81B2              ProcessPlanet:
 258  81B2 CD 5D 84     ProcessShipModels:      call   DrawForwardShips                               ; Draw all ships (this may need to be self modifying)
 259  81B5                                      ; add in loop so we only update every 4 frames, need to change CLS logic too,
 260  81B5                                      ; every 4 frames needs to do 2 updates so updates both copies of buffer
 261  81B5                                      ; now will CLS bottom thrid
 262  81B5                                      CallIfMemTrue ConsoleRedrawFlag, UpdateConsole
 262  81B5 3A 11 9A    >                        ld      a,(ConsoleRedrawFlag)
 262  81B8 A7          >                        and     a
 262  81B9 CC 83 89    >                        call    z, UpdateConsole
 263  81BC C3 D6 81                             jp LoopRepeatPoint                                    ; And we are done with views, so check if there was a special command to do
 264  81BF              ;..If we were not in views then we were in display screens/menus...................................................................
 265  81BF 2A D4 81     MenusLoop:              ld      hl,(ScreenLoopJP+1)
 266  81C2 7C                                   ld      a,h
 267  81C3 B5                                   or      l
 268  81C4 CA D6 81                             jp      z,LoopRepeatPoint
 269  81C7              ;..This is the screen update routine for menus.....................................................................................
 270  81C7              ;.. Also used by transition routines
 271  81C7              SkipUniveseUpdate:      JumpIfMemZero ScreenLoopJP+1,LoopRepeatPoint
 271  81C7 3A D4 81    >                        ld  a,(ScreenLoopJP+1)
 271  81CA A7          >                        and a
 271  81CB CA D6 81    >                        jp  z,LoopRepeatPoint
 272  81CE 3E 00        ScreenLoopBank:         ld      a,$0
 273  81D0                                      MMUSelectScreenA
 273  81D0 ED 92 56    >                     nextreg ScreenBankMMU,		a
 274  81D3 CD 00 00     ScreenLoopJP:           call    $0000
 275  81D6 3A 36 99     LoopRepeatPoint:        ld      a,(DockedFlag)
 276  81D9              HandleLaunched:         JumpIfAEqNusng  $FD, WeHaveCompletedLaunch
 276  81D9 FE FD       >                        cp     $FD
 276  81DB CA F5 81    >                        jp      z,WeHaveCompletedLaunch
 277  81DE                                      JumpIfAEqNusng  $FE, WeAreInTransition
 277  81DE FE FE       >                        cp     $FE
 277  81E0 CA 8E 83    >                        jp      z,WeAreInTransition
 278  81E3                                      JumpIfAEqNusng  $FC, WeAreHJumping
 278  81E3 FE FC       >                        cp     $FC
 278  81E5 CA FB 81    >                        jp      z,WeAreHJumping
 279  81E8                                      JumpIfAEqNusng  $FB, WeAreHEntering
 279  81E8 FE FB       >                        cp     $FB
 279  81EA CA 09 82    >                        jp      z,WeAreHEntering
 280  81ED                                      JumpIfAEqNusng  $FA, WeHaveCompletedHJump
 280  81ED FE FA       >                        cp     $FA
 280  81EF CA 11 82    >                        jp      z,WeHaveCompletedHJump
 281  81F2 C3 8E 83                             jp  DoubleBufferCheck
 282  81F5 CD F6 87     WeHaveCompletedLaunch:  call    LaunchedFromStation
 283  81F8 C3 8E 83                             jp      DoubleBufferCheck
 284  81FB CD DB C1     WeAreHJumping:          call    hyperspace_Lightning
 285  81FE DA 8E 83                             jp      c,DoubleBufferCheck
 286  8201 3E FB                                ld      a,$FB
 287  8203 32 36 99                             ld      (DockedFlag),a
 288  8206 C3 8E 83                             jp      DoubleBufferCheck
 289  8209 3E FA        WeAreHEntering:         ld      a,$FA
 290  820B 32 36 99                             ld      (DockedFlag),a
 291  820E C3 8E 83                             jp  DoubleBufferCheck
 292  8211
 293  8211
 294  8211              ; to create planet position
 295  8211              ;       take seed 2 AND %00000011 + 3 + carry and store in z sign
 296  8211              ;       take result and divide by 2 then store in x and y sign
 297  8211              ;
 298  8211              ;       take seed 4 AND %00000111 OR %10000001 and store in z sign
 299  8211              ;       take seed 6 AND %00000011 and store in x sign and y sign
 300  8211              ;       set pitch and roll to 0
 301  8211              ;
 302  8211              ;
 303  8211              ;
 304  8211              ; --- At the end of a hyperspace jump we have to reset compass, market universe sun and planets etc
 305  8211 3A 1C 9A     WeHaveCompletedHJump:   ld      a,(Galaxy)      ; DEBUG as galaxy n is not working
 306  8214                                      MMUSelectGalaxyA
 306  8214 ED 92 57    >                     nextreg GalaxyDataMMU,       a
 307  8217 2A 31 9A                             ld      hl,(TargetSystemX)
 308  821A 22 2F 9A                             ld      (PresentSystemX),hl
 309  821D 44                                   ld      b,h
 310  821E 4D                                   ld      c,l
 311  821F                                      CorrectPostJumpFuel
 311  821F 3A 75 9D    >                        ld      a,(Fuel)
 311  8222 21 B8 99    >                        ld      hl,Distance
 311  8225 96          >                        sub     a,(hl)
 311  8226 32 75 9D    >                        ld      (Fuel),a
 312  8229                                      ForceTransition ScreenFront            ; This will also trigger stars
 312  8229 3E 09       >                        ld      a,ScreenFront
 312  822B 32 93 87    >                        ld      (ScreenTransitionForced), a
 313  822E 3E 00                                ld      a,$00
 314  8230 32 16 9A                             ld      (ExtraVesselsCounter),a
 315  8233 32 36 99                             ld      (DockedFlag),a
 316  8236 CD 6F F8                             call    GalaxyGenerateDesc             ; bc  holds new system to generate system
 317  8239 CD 37 9E                             call    copy_working_to_system         ; and propogate copies of seeds
 318  823C CD 2F 9E                             call    copy_working_to_galaxy         ; .
 319  823F CD 1D 9F                             call    get_planet_data_working_seed   ; sort out system data
 320  8242                                      ;call    GetDigramGalaxySeed           ; .
 321  8242                                      MMUSelectStockTable                    ; .
 321  8242 ED 91 57 37 >                     nextreg StockTableMMU,     BankStockTable
 322  8246 CD AA E0                             call    generate_stock_market          ; generate new prices
 323  8249 CD E7 9C                             call    ClearUnivSlotList              ; clear out any ships
 324  824C CD 9A 9C                             call    ResetPlayerShip
 325  824F                                      HalveFugitiveStatus                    ; halves status and brings bit into carry
 325  824F 21 93 99    >                        ld      hl,FugitiveInnocentStatus
 325  8252 CB 3E       >                        srl     (hl)
 326  8254                                      MMUSelectSun
 326  8254 ED 91 56 53 >                     nextreg SunMMU,            BankSunData
 327  8258 CD 5D C2                             call    CreateSun                      ; create the local sun and set position based on seed
 328  825B              ;TODO                        call    generateSunAndPlanetPos        ; uses current carry state too
 329  825B              ;TODO.CreateSun:             call    SetSunSlot
 330  825B              ; PROBABLY NOT NEEDED NOW                      MMUSelectShipBank1
 331  825B              ; PROBABLY NOT NEEDED NOW                      call    GetShipBankId
 332  825B              ;;SELECT CORRECT BANK                        MMUSelectUniverseN 0
 333  825B              ;;TODO                        call    CopyBodyToUniverse
 334  825B              ;;TODO                        call    CreateSun
 335  825B              ;;TODOCreatePlanet:          call    SetPlanetSlot
 336  825B              ;;TODO                       MMUSelectShipBank1
 337  825B              ;;TODO                       call    GetShipBankId
 338  825B              ;;TODO                       MMUSelectUniverseBankN 1
 339  825B              ;;TODO                       call    CopyBodyToUniverse
 340  825B                                      SetMemFalse DockedFlag
 340  825B 3E FF       >                        ld      a,$FF
 340  825D 32 36 99    >                        ld      (DockedFlag),a
 341  8260 C3 8E 83                             jp  DoubleBufferCheck
 342  8263
 343  8263 CD 53 9D     LoopEventTriggered:     call    FindNextFreeSlotInC                 ; c= slot number, if we cant find a slot
 344  8266 D8                                   ret     c                                   ; then may as well just skip routine
 345  8267 FD 61        .SpawnIsPossible:       ld      iyh,c                               ; save slot free in iyh
 346  8269              .AreWeInWhichSpace:     JumpIfMemFalse MissJumpFlag, .WitchSpaceEvent
 346  8269 3A F1 99    >                        ld      a,(MissJumpFlag)
 346  826C A7          >                        and     a
 346  826D C2 44 83    >                        jp      nz, .WitchSpaceEvent
 347  8270 CD D0 9D     .JunkOrNot:             call    doRandom                            ; if random > 35 then its not junk
 348  8273                                      JumpIfAGTENusng 35, .NotJunk                ; .
 348  8273 FE 23       >                        cp     35
 348  8275 D2 A6 82    >                        jp		nc,.NotJunk
 349  8278              .JunkLimitHitTest:      TestRoomForJunk .NotJunk                    ; can we fit in any junk
 349  8278 3E 03       >                        ld      a,3
 349  827A             >                        JumpIfALTMemusng    JunkCount, .NotJunk
 349  827A 21 17 9A    >                        ld      hl,JunkCount
 349  827D BE          >                        cp      (hl)
 349  827E DA A6 82    >                        jp		c,.NotJunk
 350  8281 CD D0 9D     .CouldBeTraderInstead:  call    doRandom                            ; so its now a 50/50 change of being a trader
 351  8284 E6 01                                and     1
 352  8286 CA F2 82                             jp      z,.SpawnTrader
 353  8289              ;... Handle spawning of junk if possible
 354  8289 CD D0 9D     .SpawnJunk:             call    doRandom
 355  828C FE 0A                                cp      10                                  ; will set carry if a < 10
 356  828E                                      FlipCarryFlag                               ; so now carry is set if a > 10
 356  828E 3F          >                        ccf
 357  828F E6 01                                and     1                                   ; so only have carry flag
 358  8291 CE 04                                adc     ShipID_CargoType5                   ; so now a = 4 + random + poss carry
 359  8293 47                                   ld      b,a                                 ; save ship type
 360  8294                                      ; if in space station zone then we can't do asteroids
 361  8294              .CanWeSpawnAsteroid:    JumpIfMemFalse  SpaceStationSafeZone, .NotInSafeZone
 361  8294 3A 15 9A    >                        ld      a,(SpaceStationSafeZone)
 361  8297 A7          >                        and     a
 361  8298 C2 9F 82    >                        jp      nz, .NotInSafeZone
 362  829B 78                                   ld      a,b
 363  829C              .FailIfAsteroidInSafe:  ReturnIfAEqNusng   ShipID_Asteroid          ; we can't spawn asteroids near a space station
 363  829C FE 06       >                        cp      ShipID_Asteroid
 363  829E C8          >                        ret     z
 364  829F              .NotInSafeZone:         AddJunkCount                                ; so its an increase in junk
 364  829F 21 17 9A    >                        ld      hl,JunkCount
 364  82A2 34          >                        inc     (hl)
 365  82A3 C3 60 83                             jp      SpawnShipTypeA
 366  82A6                                      ;.......implicit ret
 367  82A6              ;... Handle spawing of non junk type object
 368  82A6              .NotJunk:               JumpIfMemTrue SpaceStationSafeZone, .SpawnTrader ; changed so that it can spawn friendly ships around a space station
 368  82A6 3A 15 9A    >                        ld      a,(SpaceStationSafeZone)
 368  82A9 A7          >                        and     a
 368  82AA CA F2 82    >                        jp      z, .SpawnTrader
 369  82AD              .PossibleCop:           MMUSelectCommander                          ; get cargo rating
 369  82AD ED 91 57 38 >                     nextreg CommanderMMU,       BankCommander
 370  82B1 CD CF E0     .AreWeABadPerson:       call    calculateBadness                    ; a = badness
 371  82B4 CB 27                                sla     a                                   ; double badness for scans
 372  82B6                                      JumpIfMemZero CopCount,.NoCopsInSystem      ; are there any cops already
 372  82B6 3A 1A 9A    >                        ld  a,(CopCount)
 372  82B9 A7          >                        and a
 372  82BA CA C1 82    >                        jp  z,.NoCopsInSystem
 373  82BD 21 93 99     .CopsAlreadyPresent:    ld      hl,FugitiveInnocentStatus           ; or a with FIST status
 374  82C0 B6                                   or      (hl)
 375  82C1 32 39 9C     .NoCopsInSystem:        ld      (BadnessStatus),a                   ; if badness level triggers a cop
 376  82C4 CD D0 9D                             call    doRandom                            ; then its hostile
 377  82C7                                      CallIfAGTEMemusng BadnessStatus, .SpawnHostileCop  ;
 377  82C7 21 39 9C    >                        ld      hl,BadnessStatus
 377  82CA BE          >                        cp      (hl)
 377  82CB D4 F2 82    >                        call	nc,.SpawnHostileCop
 378  82CE                                      ReturnIfMemNotZero CopCount                 ; if here are police then we are done
 378  82CE 3A 1A 9A    >                        ld     a,(CopCount)
 378  82D1 A7          >                        and     a
 378  82D2 C0          >                        ret    nz
 379  82D3 21 16 9A                             ld      hl, ExtraVesselsCounter             ; count down extra vessels counter
 380  82D6 35                                   dec     (hl)                                ; to prevent mass spawing
 381  82D7 F0                                   ret     p                                   ;
 382  82D8 34           .ExtraVesselHit0:       inc     (hl)                                ; set counter to 0
 383  82D9                        ;TODO              JumpIfMemNotZero MissionData,.DoMissionPlans; call special mission spawn logic routine
 384  82D9                         ;TODO             ret     c                                   ; return if carry was set (i.e. it did something)
 385  82D9 3A 1C 9A                             ld      a,(Galaxy)      ; DEBUG as galaxy n is not working
 386  82DC                                      MMUSelectGalaxyA
 386  82DC ED 92 57    >                     nextreg GalaxyDataMMU,       a
 387  82DF 3A 0A E9                             ld      a,(GalaxyDisplayGovernment)
 388  82E2                                      JumpIfAIsNotZero .NotAnarchySystem
 388  82E2 FE 00       >                        cp	0
 388  82E4 C2 1A 83    >                        jp	nz,.NotAnarchySystem
 389  82E7 47                                   ld      b,a
 390  82E8 CD D0 9D                             call    doRandom                            ; if random > 120 then don't spawn
 391  82EB                                      ReturnIfAGTENusng 120                       ;
 391  82EB FE 78       >                        cp    120
 391  82ED D0          >                        ret	 nc
 392  82EE E6 07                                and     7                                   ; if random 0 ..7 < gov rating
 393  82F0                                      ReturnIfALTNusng b                          ; then return
 393  82F0 B8          >                        cp    b
 393  82F1 D8          >                        ret	 c
 394  82F2              .SpawnTrader:       ; TODO
 395  82F2              ; ... Spawn a cop at hostile status
 396  82F2 3E 29        .SpawnHostileCop:       ld      a,ShipID_Viper
 397  82F4 CD 60 83                             call    SpawnShipTypeA                      ; call rather than jump
 398  82F7 CD 2E CA                             call    SetShipHostile                      ; as we have correct universe banked in now
 399  82FA C9                                   ret
 400  82FB              ; ... Spawb a hostile ship or cluster
 401  82FB CD D0 9D     .SpawnHostile:          call    doRandom
 402  82FE                                      JumpIfAGTENusng 100,.SpawnPirates           ; 100 in 255 change of one or more pirates
 402  82FE FE 64       >                        cp     100
 402  8300 D2 1B 83    >                        jp		nc,.SpawnPirates
 403  8303 21 16 9A     .SpawnAHostileHunter:   ld      hl, ExtraVesselsCounter             ; prevent the next spawning
 404  8306 34                                   inc     (hl)                                ;
 405  8307 E6 03                                and     3                                   ; a = random 0..3
 406  8309                                      MMUSelectShipBank1
 406  8309 ED 91 57 3B >					 nextreg ShipModelMMU,	    BankShipModels1
 407  830D                                      GetByteAInTable ShipHunterTable             ; get hunter ship type
 407  830D 21 2C 90    >                    ld          hl,ShipHunterTable
 407  8310 ED 31       >                    add         hl,a
 407  8312 7E          >                    ld          a,(hl)
 408  8313 CD 60 83                             call    SpawnShipTypeA
 409  8316 CD 2E CA                             call    SetShipHostile
 410  8319 C9                                   ret
 411  831A C9           .NotAnarchySystem:      ret
 412  831B CD D0 9D     .SpawnPirates:          call    doRandom                           ; a = random 0..3
 413  831E E6 03                                and     3
 414  8320 32 16 9A                             ld      (ExtraVesselsCounter),a
 415  8323 CD D0 9D     .PirateLoop:            call    doRandom
 416  8326 4F                                   ld      c,a                                 ; random and random and 7
 417  8327 CD D0 9D                             call    doRandom
 418  832A A1                                   and     c
 419  832B E6 07                                and     7
 420  832D                                      GetByteAInTable ShipPackList
 420  832D 21 24 90    >                    ld          hl,ShipPackList
 420  8330 ED 31       >                    add         hl,a
 420  8332 7E          >                    ld          a,(hl)
 421  8333 CD 60 83                             call    SpawnShipTypeA
 422  8336 CD 2E CA                             call    SetShipHostile                      ; make sure its hostile
 423  8339                                      AddPirateCount                              ; another pirate has been spawned
 423  8339 21 1B 9A    >                        ld      hl,PirateCount
 423  833C 34          >                        inc     (hl)
 424  833D 21 16 9A                             ld      hl,ExtraVesselsCounter
 425  8340 35                                   dec     (hl)
 426  8341 20 E0                                jr      nz,.PirateLoop
 427  8343 C9                                   ret
 428  8344 C9           .WitchSpaceEvent:       ret; TODO for now
 429  8345
 430  8345
 431  8345 CD 53 9D     LaunchPlayerMissile:    call    FindNextFreeSlotInC                 ; Check if we have a slot free
 432  8348 38 15                                jr      c,.MissileMissFire                  ; give a miss fire indicator as we have no slots
 433  834A 3E 19        .LaunchGood:            ld      a,ShipID_Missile                    ; TODO For now only 1 missile type
 434  834C                                      GetByteAInTable ShipPackList                ; swap in missile data
 434  834C 21 24 90    >                    ld          hl,ShipPackList
 434  834F ED 31       >                    add         hl,a
 434  8351 7E          >                    ld          a,(hl)
 435  8352 CD 60 83                             call    SpawnShipTypeA                      ; spawn the ship
 436  8355 3A 27 9C                             ld      a,(MissileTarget)
 437  8358 32 30 C0                             ld      (UBnKMissileTarget),a               ; load target Data
 438  835B CD 56 CA                             call    UnivSetPlayerMissile
 439  835E C9                                   ret
 440  835F C9           .MissileMissFire:       ret ; TODO bing bong noise misfire message
 441  8360
 442  8360              ; a = ship type, iyh = universe slot to create in
 443  8360 FD 6F        SpawnShipTypeA:         ld      iyl,a                               ; save ship type
 444  8362                                      MMUSelectShipBank1                          ; select bank 1
 444  8362 ED 91 57 3B >					 nextreg ShipModelMMU,	    BankShipModels1
 445  8366 FD 7C                                ld      a,iyh                               ; select unverse free slot
 446  8368 FD 45                                ld      b,iyl
 447  836A CD FE 9C                             call    SetSlotAToTypeB
 448  836D                                      MMUSelectUniverseA                          ; .
 448  836D C6 46       >                     add    a,BankUNIVDATA0
 448  836F ED 92 56    >                     nextreg UniverseMMU,       a
 449  8372 FD 7D                                ld      a, iyl                              ; retrive ship type
 450  8374                                      ;call    SetSlotAToTypeB                    ; record in the lookup tables
 451  8374 CD 0F E0                             call    GetShipBankId                       ; find actual memory location of data
 452  8377                                      MMUSelectShipBankA
 452  8377 ED 92 57    >					 nextreg ShipModelMMU,	    a
 453  837A 78                                   ld      a,b                                 ; b = computed ship id for bank
 454  837B CD 6A E0                             call    CopyShipToUniverse
 455  837E CD 8C CA                             call    UnivSetSpawnPosition                ; set initial spawn position
 456  8381 CD 10 CB                             call    UnivInitRuntime                     ; Clear runtime data before startup
 457  8384 3A 22 C3                             ld      a,(ShipTypeAddr)
 458  8387 47                                   ld      b,a
 459  8388 FD 7D                                ld      a,iyl
 460  838A CD 05 9D                             call    SetSlotAToClassB
 461  838D C9                                   ret
 462  838E
 463  838E                                      ; reset main loop counters
 464  838E                                      ; from BBC TT18 jump code
 465  838E                                      ; need to set system corrodinates, flush out univere ships etc
 466  838E                                      ; set up new star system and landing location in system
 467  838E                                      ; reset ship speed etc (RES2)
 468  838E                                      ; update legal status, missle indicatrions, planet data block, sun data block (SOLAR)
 469  838E                                      ;   put planet into data blokc 1 of FRIN
 470  838E                                      ;   put sun inot data block (NWWSHIP)
 471  838E                                      ; need to look at in system warp code (WARP) - note we need to -reorg all to code for teh station as that will never be in slot 0
 472  838E
 473  838E
 474  838E              WeAreInTransition:
 475  838E 3E 00        DoubleBufferCheck:      ld      a,00
 476  8390                                      IFDEF DOUBLEBUFFER
 477  8390 FE 00                                    cp      0
 478  8392 CA A1 83                                 jp      z,TestTransition
 479  8395                                          MMUSelectLayer2
 479  8395 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 480  8399 3A 01 E0                                 ld     a,(varL2_BUFFER_MODE)
 481  839C FE 00                                    cp     0
 482  839E C4 DD E0                                 call   nz,l2_flip_buffers
 483  83A1                                      ENDIF
 484  83A1 3A 93 87     TestTransition:         ld      a,(ScreenTransitionForced)          ; was there a bruite force screen change in any update loop
 485  83A4 FE FF                                cp      $FF
 486  83A6 CA 9E 80                             jp      z,MainLoop
 487  83A9 57           BruteForceChange:       ld      d,a
 488  83AA 1E 10                                ld      e,ScreenMapRow
 489  83AC ED 30                                mul
 490  83AE DD 21 A6 86                          ld      ix,ScreenKeyMap
 491  83B2 DD 19                                add     ix,de                               ; Force screen transition
 492  83B4 CD 3E 88                             call    SetScreenAIX
 493  83B7 C3 9E 80                             jp MainLoop
 494  83BA
 495  83BA              ;..................................................................................................................................
 496  83BA              ;..Process A ship..................................................................................................................
 497  83BA
 498  83BA              ;..Update Universe Objects.........................................................................................................
 499  83BA AF           UpdateUniverseObjects:  xor     a
 500  83BB 32 EA 99                             ld      (SelectedUniverseSlot),a
 501  83BE 57           .UpdateUniverseLoop:    ld      d,a                                             ; d is unaffected by GetTypeInSlotA
 502  83BF              ;.. If the slot is empty (FF) then skip this slot..................................................................................
 503  83BF CD 47 9D                             call    GetTypeAtSlotA
 504  83C2 FE FF                                cp      $FF
 505  83C4 28 29                                jr      z,.ProcessedUniverseSlot
 506  83C6 7A           .UniverseObjectFound:   ld      a,d                                             ; Get back Universe slot as we want it
 507  83C7                                      MMUSelectUniverseA                                      ; and we apply roll and pitch
 507  83C7 C6 46       >                     add    a,BankUNIVDATA0
 507  83C9 ED 92 56    >                     nextreg UniverseMMU,       a
 508  83CC CD ED DA                             call    ApplyMyRollAndPitch
 509  83CF CD C7 DB                             call    ApplyShipRollAndPitch
 510  83D2              ;.. If its a space station then see if we are ready to dock........................................................................
 511  83D2 3A 22 C3     .CheckIfDockable:       ld      a,(ShipTypeAddr)                                ; Now we have the correct bank
 512  83D5                                      JumpIfANENusng  ShipTypeStation, .NotDockingCheck       ; if its not a station so we don't test docking
 512  83D5 FE 02       >                        cp     ShipTypeStation
 512  83D7 C2 E5 83    >                        jp      nz,.NotDockingCheck
 513  83DA              .IsDockableAngryCheck:  JumpOnMemBitSet ShipNewBitsAddr, 4, .NotDockingCheck    ; if it is angry then we dont test docking
 513  83DA 3A 23 C3    >                        ld      a,(ShipNewBitsAddr)
 513  83DD CB 67       >                        bit 	4,a
 513  83DF C2 E5 83    >                        jp      nz,.NotDockingCheck
 514  83E2 CD 22 84                             call    DockingCheck                                    ; So it is a candiate to test docking. Now we do the position and angle checks
 515  83E5                                     ; ReturnIfMemEquN ScreenTransitionForced, $FF             ; if we docked then a transition would have been forced
 516  83E5              .NotDockingCheck:       CallIfMemEqMemusng SelectedUniverseSlot, CurrentUniverseAI, UpdateShip
 516  83E5 3A EA 99    >                        ld   a,(SelectedUniverseSlot)
 516  83E8 21 E9 99    >                        ld   hl,CurrentUniverseAI
 516  83EB BE          >                        cp   (hl)
 516  83EC CC DD 85    >                        call    z,UpdateShip
 517  83EF 3A EA 99     .ProcessedUniverseSlot: ld      a,(SelectedUniverseSlot)                        ; Move to next ship cycling if need be to 0
 518  83F2 3C                                   inc     a                                               ; .
 519  83F3                                      JumpIfAGTENusng   UniverseSlotListSize, .UpdateAICounter    ; .
 519  83F3 FE 0C       >                        cp     UniverseSlotListSize
 519  83F5 D2 FE 83    >                        jp		nc,.UpdateAICounter
 520  83F8 32 EA 99                             ld      (SelectedUniverseSlot),a
 521  83FB C3 BE 83                             jp      .UpdateUniverseLoop
 522  83FE 3A E9 99     .UpdateAICounter:       ld      a,(CurrentUniverseAI)
 523  8401 3C                                   inc     a
 524  8402 FE 0C                                cp      12
 525  8404 38 01                                jr      c,.IterateAI
 526  8406 AF                                   xor     a
 527  8407 32 E9 99     .IterateAI:             ld      (CurrentUniverseAI),a
 528  840A              .CheckIfStationAngry:   ReturnIfMemFalse  SetStationAngryFlag
 528  840A 3A EB 99    >                        ld      a,(SetStationAngryFlag)
 528  840D A7          >                        and     a
 528  840E C0          >                        ret     nz
 529  840F              .SetStationAngryIfPoss: ReturnIfMemNeNusng UniverseSlotList, ShipTypeStation
 529  840F 3A F8 99    >                        ld   a,(UniverseSlotList)
 529  8412 FE 02       >                        cp     ShipTypeStation
 529  8414 C8          >                        ret    z
 530  8415                                      MMUSelectUniverseN 0
 530  8415 ED 91 56 46 >                     nextreg UniverseMMU,       BankUNIVDATA0+0
 531  8419 CD 2E CA                             call    SetShipHostile
 532  841C                                      SetMemFalse    SetStationAngryFlag
 532  841C 3E FF       >                        ld      a,$FF
 532  841E 32 EB 99    >                        ld      (SetStationAngryFlag),a
 533  8421 C9                                   ret
 534  8422              ;..................................................................................................................................
 535  8422              ;.. Quickly eliminate space stations too far away..................................................................................
 536  8422 ED 4B 0C C0  DockingCheck:           ld      bc,(UBnKxlo)
 537  8426 2A 0F C0                             ld      hl,(UBnKylo)
 538  8429 ED 5B 12 C0                          ld      de,(UBnKzlo)
 539  842D 78                                   ld      a,b
 540  842E B4                                   or      h
 541  842F B2                                   or      d
 542  8430 C0                                   ret     nz
 543  8431 79           .CheckIfInRangeLo:      ld      a,c
 544  8432 B5                                   or      l
 545  8433 B3                                   or      e
 546  8434 E6 C0                                and     %11000000                           ; Note we should make this 1 test for scoop or collision too
 547  8436 C0                                   ret     nz
 548  8437              ;.. Now check to see if we are comming in at a viable angle........................................................................
 549  8437 3A 26 C0     .CheckDockingAngle:     ld      a,(UBnkrotmatNosevZ+1)              ; get get high byte of rotmat
 550  843A                                      ReturnIfALTNusng 214                       ; this is the magic angle to be within 26 degrees +/-
 550  843A FE D6       >                        cp    214
 550  843C D8          >                        ret	 c
 551  843D CD FB 85                             call    GetStationVectorToWork              ; Normalise position into XX15 as in effect its a vector from out ship to it given we are always 0,0,0, returns with A holding vector z
 552  8440 CB 7F                                bit     7,a                                 ; if its negative
 553  8442 C0                                   ret     nz                                  ; we are flying away from it
 554  8443                                      ReturnIfALTNusng 89                         ; if the axis <89 the we are not in the 22 degree angle
 554  8443 FE 59       >                        cp    89
 554  8445 D8          >                        ret	 c
 555  8446 3A 1C C0                             ld      a,(UBnkrotmatRoofvX+1)              ; get roof vector high
 556  8449 E6 7F                                and     SignMask8Bit
 557  844B                                      ReturnIfALTNusng 80                         ; note 80 decimal for 36.6 degrees
 557  844B FE 50       >                        cp    80
 557  844D D8          >                        ret	 c
 558  844E              ;.. Its passed all validation and we are docking...................................................................................
 559  844E              .AreDocking:            MMUSelectLayer1
 559  844E ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 560  8452 3E 06                                ld        a,$6
 561  8454 CD A5 E0                             call      l1_set_border
 562  8457              .EnterDockingBay:       ForceTransition ScreenDocking
 562  8457 3E 0D       >                        ld      a,ScreenDocking
 562  8459 32 93 87    >                        ld      (ScreenTransitionForced), a
 563  845C C9                                   ret
 564  845D
 565  845D              ;..................................................................................................................................
 566  845D              ;; TODODrawForwardSun:         MMUSelectSun
 567  845D              ;; TODO                        ld      a,(SunKShipType)
 568  845D              ;; TODO.ProcessBody:           cp      129
 569  845D              ;; TODO                        jr      nz,.ProcessPlanet
 570  845D              ;; TODO.ProcessSun:            call    ProcessSun
 571  845D              ;; TODO
 572  845D              ;; TODOProcessSun:             call    CheckSunDistance
 573  845D              ;; TODO
 574  845D              ;; TODO                        ret
 575  845D              ;; TODO.ProcessPlanet:         call    ProcessPlanet
 576  845D              ;; TODO                        ret
 577  845D              ;..................................................................................................................................
 578  845D AF           DrawForwardShips:       xor     a
 579  845E 32 95 84     .DrawShipLoop:          ld      (CurrentShipUniv),a
 580  8461 CD 47 9D                             call    GetTypeAtSlotA
 581  8464 FE FF                                cp      $FF
 582  8466 28 12                                jr      z,.ProcessedDrawShip
 583  8468              ; Add in a fast check for ship behind to process nodes and if behind jump to processed Draw ship
 584  8468 3A 95 84     .SelectShipToDraw:       ld      a,(CurrentShipUniv)
 585  846B                                      MMUSelectUniverseA
 585  846B C6 46       >                     add    a,BankUNIVDATA0
 585  846D ED 92 56    >                     nextreg UniverseMMU,       a
 586  8470                                      ; Need check for exploding here
 587  8470 CD 05 DD     .ProcessUnivShip:       call    ProcessShip          ; TODFO TUNE THIS   ;; call    ProcessUnivShip
 588  8473              .UpdateRadar:
 589  8473              ;;;Does nothing                       ld      a,BankFrontView
 590  8473              ;;;Does nothing                       MMUSelectScreenA
 591  8473              ;;;Does nothing         ld      a,(CurrentShipUniv)
 592  8473              ;;;Does nothing         MMUSelectUniverseA
 593  8473
 594  8473                                      CallIfMemTrue ConsoleRedrawFlag,UpdateScannerShip ; Always update ship positions
 594  8473 3A 11 9A    >                        ld      a,(ConsoleRedrawFlag)
 594  8476 A7          >                        and     a
 594  8477 CC A4 8D    >                        call    z, UpdateScannerShip
 595  847A 3A 95 84     .ProcessedDrawShip:     ld      a,(CurrentShipUniv)
 596  847D 3C                                   inc     a
 597  847E                                      JumpIfALTNusng   UniverseSlotListSize, .DrawShipLoop
 597  847E FE 0C       >                        cp      UniverseSlotListSize
 597  8480 DA 5E 84    >                        jp		c, .DrawShipLoop
 598  8483              .DrawSunCompass:        MMUSelectSun
 598  8483 ED 91 56 53 >                     nextreg SunMMU,            BankSunData
 599  8487 CD 9F 8B                             call    UpdateCompassSun                ; Always update the sun position
 600  848A CD E3 8C                             call    UpdateScannerSun                ; Always attempt to put the sun on the scanner
 601  848D              .CheckPlanetCompass:    JumpIfMemFalse SpaceStationSafeZone, .DrawSpaceStationCompass
 601  848D 3A 15 9A    >                        ld      a,(SpaceStationSafeZone)
 601  8490 A7          >                        and     a
 601  8491 C2 94 84    >                        jp      nz, .DrawSpaceStationCompass
 602  8494              .DrawPlanetCompass:
 603  8494
 604  8494              .DrawSpaceStationCompass:
 605  8494
 606  8494 C9                                   ret
 607  8495              ;..................................................................................................................................
 608  8495 00           CurrentShipUniv:        DB      0
 609  8496
 610  8496              ;;;ProcessUnivShip:        call    CheckDistance               ; Will check for negative Z and skip (how do we deal with read and side views? perhaps minsky transformation handles that?)
 611  8496              ;;;                        ret     c
 612  8496              ;;;                        ld      a,(UbnkDrawAsDot)
 613  8496              ;;;                        and     a
 614  8496              ;;;                        jr      z,.CarryOnWithDraw
 615  8496              ;;;.itsJustADot:           ld      bc,(UBnkNodeArray)          ; if its at dot range
 616  8496              ;;;                        ld      a,$FF                       ; just draw a pixel
 617  8496              ;;;                        MMUSelectLayer2                     ; then go to update radar
 618  8496              ;;;                        call    l2_plot_pixel               ;
 619  8496              ;;;                        ClearCarryFlag
 620  8496              ;;;                        ret
 621  8496              ;;;.ProcessShipNodes:      call    ProcessShip
 622  8496              ;;;
 623  8496              ;;;call    ProcessNodes ; it hink here we need the star and planet special cases
 624  8496              ;;;.DrawShip:              call    CullV2				        ; culling but over aggressive backface assumes all 0 up front TOFIX
 625  8496              ;;;                        call    PrepLines                   ; LL72, process lines and clip, ciorrectly processing face visibility now
 626  8496              ;;;                        ld      a,(CurrentShipUniv)
 627  8496              ;;;                        MMUSelectUniverseA
 628  8496              ;;;                        call   DrawLines
 629  8496              ;;;                        ClearCarryFlag
 630  8496              ;;;                        ret
 631  8496
 632  8496
 633  8496 3E 46        TestForNextShip:        ld      a,c_Pressed_Quit
 634  8498 CD 7C 96                             call    is_key_pressed
 635  849B C0                                   ret     nz
 636  849C 3A DC 85                             ld      a,(currentDemoShip)
 637  849F 3C                                   inc     a
 638  84A0 FE 2C                                cp      44
 639  84A2 20 01                                jr      nz,.TestOK
 640  84A4 AF                                   xor     a
 641  84A5 32 DC 85     .TestOK:                ld      (currentDemoShip),a
 642  84A8 CD E7 9C                             call    ClearUnivSlotList
 643  84AB 3A DC 85                             ld      a,(currentDemoShip)
 644  84AE 47                                   ld      b,a
 645  84AF AF                                   xor     a
 646  84B0 CD FE 9C                             call    SetSlotAToTypeB
 647  84B3                                      MMUSelectUniverseN 2
 647  84B3 ED 91 56 48 >                     nextreg UniverseMMU,       BankUNIVDATA0+2
 648  84B7 CD 40 CA                             call    ResetUBnkData                         ; call the routine in the paged in bank, each universe bank will hold a code copy local to it
 649  84BA 3A DC 85                             ld      a,(currentDemoShip)
 650  84BD                                      MMUSelectShipBank1
 650  84BD ED 91 57 3B >					 nextreg ShipModelMMU,	    BankShipModels1
 651  84C1 CD 0F E0                             call    GetShipBankId
 652  84C4                                      MMUSelectShipBankA
 652  84C4 ED 92 57    >					 nextreg ShipModelMMU,	    a
 653  84C7 78                                   ld      a,b
 654  84C8 CD 6A E0                             call    CopyShipToUniverse
 655  84CB CD F6 88                             call    SetInitialShipPosition
 656  84CE CD 62 86                             call    DEBUGSETNODES
 657  84D1 C9                                   ret
 658  84D2
 659  84D2              ;----------------------------------------------------------------------------------------------------------------------------------
 660  84D2              NeedAMessageQueue:
 661  84D2
 662  84D2 3A EE 99     UpdateCountdownNumber:  ld		a,(OuterHyperCount)
 663  84D5 11 2C 85                             ld		de,Hyp_counter
 664  84D8 0E 9C                                ld	c, -100
 665  84DA CD E4 84                             call	.Num1
 666  84DD 0E F6                                ld	c,-10
 667  84DF CD E4 84                             call	.Num1
 668  84E2 0E FF                                ld	c,-1
 669  84E4 06 2F        .Num1:	                ld	b,'0'-1
 670  84E6 04           .Num2:	                inc		b
 671  84E7 81                                   add		a,c
 672  84E8 38 FC                                jr		c,.Num2
 673  84EA 91                                   sub 	c
 674  84EB C5                                   push	bc
 675  84EC F5                                   push	af
 676  84ED 79                                   ld		a,c
 677  84EE FE FF                                cp		-1
 678  84F0 78                                   ld		a,b
 679  84F1 12                                   ld		(de),a
 680  84F2 13                                   inc		de
 681  84F3 F1                                   pop		af
 682  84F4 C1                                   pop		bc
 683  84F5 C9                                   ret
 684  84F6
 685  84F6              ;----------------------------------------------------------------------------------------------------------------------------------
 686  84F6 54 6F 3A     Hyp_message             DB "To:"
 687  84F9 00 00 00...  Hyp_to                  DS 32
 688  8519 20           Hyp_space1              DB " "
 689  851A 30 2E 30     Hyp_dist_amount         DB "0.0"
 690  851D 2E           Hyp_decimal             DB "."
 691  851E 30           Hyp_fraction            DB "0"
 692  851F 20 4C 59 00  Hyp_dis_ly              DB " LY",0
 693  8523 43 68 61 72  Hyp_charging            DB "Charging:"
 693  8527 67 69 6E 67
 693  852B 3A
 694  852C 30 30 30 00  Hyp_counter             DB "000",0
 695  8530 00 00 00...  Hyp_centeredTarget      DS 32
 696  8550 00           Hyp_centeredEol         DB 0
 697  8551 00 00 00...  Hyp_bufferpadding       DS 32   ; just in case we get a buffer ovverun. shoudl never get beyond 32 chars
 698  8571 00 00 00...  Hyp_centeredCharging    DS 32
 699  8591 00           Hyp_centeredEol2        DB 0
 700  8592 00 00 00...  Hyp_bufferpadding2      DS 32   ; just in case we get a buffer ovverun. shoudl never get beyond 32 chars
 701  85B2
 702  85B2
 703  85B2              ;DisplayTargetAndRange
 704  85B2              ;DisplayCountDownNumber
 705  85B2              ;----------------------------------------------------------------------------------------------------------------------------------
 706  85B2 3A 37 99     TestPauseMode:          ld      a,(GamePaused)
 707  85B5 FE 00                                cp      0
 708  85B7 20 12                                jr      nz,.TestForResume
 709  85B9 3A 30 99     .CheckViewMode:         ld      a,(ScreenIndex)                     ; we can only pause if not on screen view
 710  85BC                                      ReturnIfAGTENusng       ScreenFront
 710  85BC FE 09       >                        cp    ScreenFront
 710  85BE D0          >                        ret	 nc
 711  85BF 3E 40        .CheckPauseKey:         ld      a,c_Pressed_Freeze
 712  85C1 CD 7C 96                             call    is_key_pressed
 713  85C4 C0                                   ret     nz
 714  85C5              .PausePressed:          SetAFalse                                  ; doesn't really matter if we were in pause already as resume is a different key
 714  85C5 3E FF       >                        ld      a,$FF
 715  85C7 32 37 99                             ld      (GamePaused),a
 716  85CA C9                                   ret
 717  85CB 3E 42        .TestForResume:         ld      a,c_Pressed_Resume                  ; In pause loop so we can check for resume key
 718  85CD CD 7C 96                             call    is_key_pressed
 719  85D0 C0                                   ret     nz
 720  85D1 AF           .ResumePressed:         xor     a
 721  85D2 32 37 99                             ld      (GamePaused),a                      ; Resume pressed to reset pause state
 722  85D5 C9                                   ret
 723  85D6
 724  85D6 3E 46        TestQuit:               ld      a,c_Pressed_Quit
 725  85D8 CD 7C 96                             call    is_key_pressed
 726  85DB C9                                   ret
 727  85DC 0D           currentDemoShip:        DB      13;$12 ; 13 - corirollis
 728  85DD
 729  85DD
 730  85DD              ;----------------------------------------------------------------------------------------------------------------------------------
 731  85DD              UpdateShip:             ;  call    DEBUGSETNODES ;       call    DEBUGSETPOS
 732  85DD 21 61 86                             ld      hl,TidyCounter
 733  85E0 35                                   dec     (hl)
 734  85E1 C0                                   ret     nz
 735  85E2 3E 10                                ld      a,16
 736  85E4 32 61 86                             ld      (TidyCounter),a
 737  85E7                                      ; call    TIDY TIDY IS BROKEN
 738  85E7                                     ; add AI in here too
 739  85E7 C9                                   ret
 740  85E8
 741  85E8 F5           InitialiseShipAUnivB:   push    af
 742  85E9 78                                   ld      a,b
 743  85EA                                      MMUSelectUniverseA                          ; load up register into universe bank
 743  85EA C6 46       >                     add    a,BankUNIVDATA0
 743  85EC ED 92 56    >                     nextreg UniverseMMU,       a
 744  85EF CD 40 CA                             call    ResetUBnkData                         ; call the routine in the paged in bank, each universe bank will hold a code copy local to it
 745  85F2                                      MMUSelectShipBank1
 745  85F2 ED 91 57 3B >					 nextreg ShipModelMMU,	    BankShipModels1
 746  85F6 F1                                   pop     af
 747  85F7 CD 6A E0                             call    CopyShipToUniverse
 748  85FA C9                                   ret
 749  85FB
 750  85FB 21 0C C0     GetStationVectorToWork: ld      hl,UBnKxlo
 751  85FE 11 44 99                             ld      de,varVector9ByteWork
 752  8601 ED A0                                ldi
 753  8603 ED A0                                ldi
 754  8605 ED A0                                ldi
 755  8607 ED A0                                ldi
 756  8609 ED A0                                ldi
 757  860B ED A0                                ldi
 758  860D ED A0                                ldi
 759  860F ED A0                                ldi
 760  8611 ED A0                                ldi
 761  8613 2A 44 99     .CalcNormalToXX15:      ld      hl, (varVector9ByteWork)  ; X
 762  8616 ED 5B 47 99                          ld      de, (varVector9ByteWork+3); Y
 763  861A ED 4B 4A 99                          ld      bc, (varVector9ByteWork+6); Z
 764  861E 7D                                   ld      a,l
 765  861F B3                                   or      e
 766  8620 B1                                   or      c
 767  8621 F6 01                                or      1
 768  8623 DD 6F                                ld      ixl,a                   ; or all bytes and with 1 so we have at least a 1
 769  8625 7C                                   ld      a,h
 770  8626 B2                                   or      d
 771  8627 B0                                   or      b                       ; or all high bytes but don't worry about 1 as its sorted on low bytes
 772  8628 C5           .MulBy2Loop:            push    bc
 773  8629 DD 45                                ld      b,ixl
 774  862B CB 20                                sla     b                       ; Shift ixl left
 775  862D DD 68                                ld      ixl,b
 776  862F C1                                   pop     bc
 777  8630 CB 17                                rl      a                       ; roll into a
 778  8632 38 0E                                jr      c,.TA2                  ; if bit rolled out of rl a then we can't shift any more to the left
 779  8634                                      ShiftHLLeft1                    ; Shift Left X
 779  8634 CB 25       >			   sla l
 779  8636 CB 14       >			   rl  h
 780  8638                                      ShiftDELeft1                    ; Shift Left Y
 780  8638 CB 23       >			   sla e
 780  863A CB 12       >			   rl  d
 781  863C                                      ShiftBCLeft1                    ; Shift Left Z
 781  863C CB 21       >			   sla c
 781  863E CB 10       >			   rl  b
 782  8640 18 E6                                jr      .MulBy2Loop              ; no need to do jr nc as the first check looks for high bits across all X Y and Z
 783  8642 3A 46 99     .TA2:                   ld      a,(varVector9ByteWork+2); x sign
 784  8645 CB 3C                                srl     h
 785  8647 B4                                   or      h
 786  8648 32 83 C0                             ld      (XX15VecX),a         ; note this is now a signed highbyte
 787  864B 3A 49 99                             ld      a,(varVector9ByteWork+5); y sign
 788  864E CB 3A                                srl     d
 789  8650 B2                                   or      d
 790  8651 32 84 C0                             ld      (XX15VecY),a         ; note this is now a signed highbyte
 791  8654 3A 4C 99                             ld      a,(varVector9ByteWork+8); y sign
 792  8657 CB 38                                srl     b
 793  8659 B0                                   or      b
 794  865A 32 85 C0                             ld      (XX15VecZ),a         ; note this is now a signed highbyte
 795  865D CD 7F AD                             call    normaliseXX1596fast
 796  8660 C9                                   ret                             ; will return with a holding Vector Z
 797  8661
 798  8661 00           TidyCounter             DB  0
 799  8662
 800  8662                          INCLUDE "./debugMatrices.asm"
# file opened: ./debugMatrices.asm
   1+ 8662
   2+ 8662
   3+ 8662 21 85 86     DEBUGSETNODES:          ld      hl,DEBUGUBNKDATA
   4+ 8665 11 0C C0                             ld      de,UBnKxlo
   5+ 8668 01 09 00                             ld      bc,9
   6+ 866B ED B0                                ldir
   7+ 866D 21 8E 86                             ld      hl,DEBUGROTMATDATA
   8+ 8670 11 15 C0                             ld      de,UBnkrotmatSidevX
   9+ 8673 01 12 00                             ld      bc,6*3
  10+ 8676 ED B0                                ldir
  11+ 8678 C9                                   ret
  12+ 8679
  13+ 8679 21 85 86     DEBUGSETPOS:            ld      hl,DEBUGUBNKDATA
  14+ 867C 11 0C C0                             ld      de,UBnKxlo
  15+ 867F 01 06 00                             ld      bc,9 - 3
  16+ 8682 ED B0                                ldir
  17+ 8684 C9                                   ret
  18+ 8685
  19+ 8685              ; culltest
  20+ 8685              ;DEBUGUBNKDATA:          db      $00,	$00,	$00,	$00,	$00,	$00,	$31,	$03,	$00
  21+ 8685 00 00 00 00  DEBUGUBNKDATA:          db      $00,	$00,	$00,	$00,	$00,	$00,	$5C,	$07,	$00
  21+ 8689 00 00 5C 07
  21+ 868D 00
  22+ 868E 00 60 00 00  DEBUGROTMATDATA:        db      $00,	$60,	$00,	$00,	$00,	$00
  22+ 8692 00 00
  23+ 8694 00 00 00 60                          db      $00,	$00,	$00,	$60,	$00,	$00
  23+ 8698 00 00
  24+ 869A 00 00 00 00                          db      $00,	$00,	$00,	$00,	$00,	$E0
  24+ 869E 00 E0
  25+ 86A0
  26+ 86A0              ; FAILS due to sharp angle, OK now
  27+ 86A0              ;DEBUGUBNKDATA:          db      $39,	$01,	$00,	$43,	$01,	$00,	$EF,	$03,	$00
  28+ 86A0              ;DEBUGROTMATDATA:        db      $01,	$2F,	$B2,	$CC,	$4C,	$27
  29+ 86A0              ;                        db      $17,	$46,	$87,	$3C,	$95,	$20
  30+ 86A0              ;                        db      $E2,	$32,	$31,	$8C,	$EF,	$D1
  31+ 86A0              ; TOP RIGHT CORNER Passes as python and cobra
  32+ 86A0              ;DEBUGUBNKDATA:          db      $39,	$01,	$00,	$43,	$01,	$00,	$5B,	$04,	$00
  33+ 86A0              ;DEBUGROTMATDATA:        db      $E2,	$03,	$3A,	$16,	$F5,	$60
  34+ 86A0              ;                        db      $D3,	$CE,	$F3,	$BA,	$4E,	$0F
  35+ 86A0              ;                        db      $03,	$BE,	$4A,	$4B,	$DB,	$8C
  36+ 86A0              ; Looks OK
  37+ 86A0              ;DEBUGUBNKDATA:          db      $39,    $01,    $00,    $43,    $01,    $00,    $EE,    $02,    $00
  38+ 86A0              ;DEBUGROTMATDATA:        db      $35,    $d8,    $98,    $9f,    $b0,    $1a
  39+ 86A0              ;                        db      $4B,    $26,    $CE,    $d6,    $60,    $16
  40+ 86A0              ;                        db      $89,    $90,    $c4,    $9f,    $dd,    $d9
  41+ 86A0              ;
  42+ 86A0              ; Massive horizontal line
  43+ 86A0              ; 15th line (or line 14 has corrodinates 05,00 to D8,00) which looks wrong
  44+ 86A0              ; node array looks OK, looks liek its sorted as it was both -ve Y off screen fix added
  45+ 86A0              ;DEBUGUBNKDATA:          db      $39,    $01,    $00,    $43,    $01,    $00,    $BD,    $03,    $00
  46+ 86A0              ;DEBUGROTMATDATA:        db      $59,    $CF,    $06,    $B6,    $61,    $8D
  47+ 86A0              ;                        db      $AD,    $B1,    $97,    $4F,    $C9,    $98
  48+ 86A0              ;                        db      $61,    $99,    $E0,    $0D,    $11,    $5C
  49+ 86A0              ; Line lost in clipping
  50+ 86A0              ;DEBUGUBNKDATA:          db      $39,    $01,    $00,    $43,    $01,    $00,    $8B,    $04,    $00
  51+ 86A0              ;DEBUGROTMATDATA:        db      $A3,    $4D,    $A9,    $28,    $F8,    $AF
  52+ 86A0              ;                        db      $FB,    $97,    $8C,    $B5,    $FB,    $D0
  53+ 86A0              ;                        db      $DB,    $3A,    $29,    $CA,    $29,    $1C
  54+ 86A0              ;DEBUGUBNKDATA:          db      $5E,    $02,    $00,    $FE,    $00,    $FE,    $E5,    $09,    $00
  55+ 86A0              ;DEBUGROTMATDATA:        db      $A6,    $88,    $89,    $BB,    $53,    $4D
  56+ 86A0              ;                        db      $6D,    $D9,    $F0,    $99,    $BA,    $9E
  57+ 86A0              ;                        db      $4A,    $A8,    $89,    $47,    $DF,    $33
  58+ 86A0              ;
  59+ 86A0              ;DEBUGUBNKDATA:          db      $ED,    $05,    $00,    $FE,    $00,    $FE,    $F1,    $0A,    $00
  60+ 86A0              ;DEBUGROTMATDATA:        db      $1B,    $33,    $DE,    $B4,    $ED,    $C5
  61+ 86A0              ;                        db      $73,    $C4,    $BC,    $1E,    $96,    $C4
  62+ 86A0              ;                        db      $55,    $B9,    $35,    $D1,    $80,    $0F
  63+ 86A0              ; top left off right issue
  64+ 86A0              ;DEBUGUBNKDATA:          db      $39,    $01,    $00,    $43,    $01,    $00,    $2F,    $03,    $00
  65+ 86A0              ;DEBUGROTMATDATA:        db      $FD,    $50,    $47,    $B0,    $53,    $9A
  66+ 86A0              ;                        db      $73,    $B7,    $98,    $C8,    $80,    $A3
  67+ 86A0              ;                        db      $E6,    $01,    $81,    $AD,    $B0,    $55
  68+ 86A0              ; test middle of screen
  69+ 86A0              ;DEBUGUBNKDATA:          db      $00,    $00,    $00,    $00,    $00,    $00,    $20,    $01,    $00
  70+ 86A0              ;
  71+ 86A0              ;DEBUGROTMATDATA:        db      $FD,    $50,    $47,    $B0,    $53,    $9A
  72+ 86A0              ;                        db      $73,    $B7,    $98,    $C8,    $80,    $A3
  73+ 86A0              ;                        db      $E6,    $01,    $81,    $AD,    $B0,    $55
  74+ 86A0              ; test middle of screen futher away
  75+ 86A0              ;DEBUGUBNKDATA:          db      $00,    $00,    $00,    $00,    $00,    $00,    $20,    $02,    $00
  76+ 86A0              ;
  77+ 86A0              ;DEBUGROTMATDATA:        db      $FD,    $50,    $47,    $B0,    $53,    $9A
  78+ 86A0              ;                        db      $73,    $B7,    $98,    $C8,    $80,    $A3
  79+ 86A0              ;                        db      $E6,    $01,    $81,    $AD,    $B0,    $55
  80+ 86A0
  81+ 86A0              ; Test left center clip still warping
  82+ 86A0              ;DEBUGUBNKDATA:          db      $80,    $00,    $80,    $00,    $00,    $00,    $20,    $01,    $00
  83+ 86A0              ;
  84+ 86A0              ;DEBUGROTMATDATA:        db      $FD,    $50,    $47,    $B0,    $53,    $9A
  85+ 86A0              ;                        db      $73,    $B7,    $98,    $C8,    $80,    $A3
  86+ 86A0              ;                        db      $E6,    $01,    $81,    $AD,    $B0,    $55
  87+ 86A0              ; Test right center clip - seems to be warping values towards bottom of screen on clip
  88+ 86A0              ;DEBUGUBNKDATA:          db      $80,    $00,    $00,    $00,    $00,    $00,    $20,    $01,    $00
  89+ 86A0              ;
  90+ 86A0              ;DEBUGROTMATDATA:        db      $FD,    $50,    $47,    $B0,    $53,    $9A
  91+ 86A0              ;                        db      $73,    $B7,    $98,    $C8,    $80,    $A3
  92+ 86A0              ;                        db      $E6,    $01,    $81,    $AD,    $B0,    $55
  93+ 86A0              ; Test top center clip test 1 - good test many ships fail
  94+ 86A0              ;DEBUGUBNKDATA:          db      $19,    $00,    $00,    $50,    $00,    $00,    $20,    $01,    $00
  95+ 86A0              ;
  96+ 86A0              ;DEBUGROTMATDATA:        db      $FD,    $50,    $47,    $B0,    $53,    $9A
  97+ 86A0              ;                        db      $73,    $B7,    $98,    $C8,    $80,    $A3
  98+ 86A0              ;                        db      $E6,    $01,    $81,    $AD,    $B0,    $55
  99+ 86A0              ; Test top center clip test 2 - Poss 2nd ship has an issue with a small line
 100+ 86A0              ;DEBUGUBNKDATA:          db      $19,    $00,    $00,    $60,    $00,    $00,    $2F,    $01,    $00
 101+ 86A0              ;
 102+ 86A0              ;DEBUGROTMATDATA:        db      $FD,    $50,    $47,    $B0,    $53,    $9A
 103+ 86A0              ;                        db      $73,    $B7,    $98,    $C8,    $80,    $A3
 104+ 86A0              ;                        db      $E6,    $01,    $81,    $AD,    $B0,    $55
 105+ 86A0              ; Test bottom center clip ; complet shambles as if its forcing cip to below 128
 106+ 86A0              ; looks better now may have some clipping issues maybe ship data
 107+ 86A0              ;DEBUGUBNKDATA:          db      $19,    $00,    $00,    $50,    $00,    $80,    $20,    $01,    $00
 108+ 86A0              ;
 109+ 86A0              ;DEBUGROTMATDATA:        db      $FD,    $50,    $47,    $B0,    $53,    $9A
 110+ 86A0              ;                        db      $73,    $B7,    $98,    $C8,    $80,    $A3
 111+ 86A0 E6 01 81 AD                          db      $E6,    $01,    $81,    $AD,    $B0,    $55
 111+ 86A4 B0 55
 112+ 86A6              ; Test left top center clip
 113+ 86A6
 114+ 86A6              ; Test right top center clip
 115+ 86A6              ; Test left bottom center clip
 116+ 86A6              ; Test right bottom center clip
 117+ 86A6
 118+ 86A6              ; Tests with no clip
 119+ 86A6              ;DEBUGUBNKDATA:          db      $39,    $00,    $00,    $43,    $00,    $00,    $2F,    $04,    $00
 120+ 86A6              ;
 121+ 86A6              ;DEBUGROTMATDATA:        db      $FD,    $50,    $47,    $B0,    $53,    $9A
 122+ 86A6              ;                        db      $73,    $B7,    $98,    $C8,    $80,    $A3
 123+ 86A6              ;                        db      $E6,    $01,    $81,    $AD,    $B0,    $55
 124+ 86A6              ;
 125+ 86A6              ;DEBUGUBNKDATA:          db      $00,    $00,    $00,    $00,    $00,    $00,    $1F,    $00,    $00
 126+ 86A6              ;
 127+ 86A6              ; UBNKPOs example 39,01,00,43,01,00,f4,03,00
 128+ 86A6              ; rotmat  example b1, 83,ae,5d,b0,1a,5e,de,82,8a,69,16,70,99,52,19,dd,d9
 129+ 86A6
# file closed: ./debugMatrices.asm
 801  86A6
 802  86A6
 803  86A6              ;TODO Optimisation
 804  86A6              ; Need this table to handle differnet events
 805  86A6              ; 1-main loop update - just general updates specfic to that screen that are not galaxy or stars, e.g. update heat, console
 806  86A6              ; cursor key, joystick press
 807  86A6              ; cursor key, joystick press
 808  86A6              ; non cursor keys presses
 809  86A6              ;
 810  86A6              ; First byte is now docked flag
 811  86A6              ;
 812  86A6              ; Padded to 8 bytes to allow a * 8 for addressing
 813  86A6              ; Byte 0   - Docked flag  : 0 = not applicable (always read), 1 = only whilst docked, 2 = only when not docked, 3 = No keypress allowed
 814  86A6              ; Byte 1   - Screen Id
 815  86A6              ; Byte 2,3 - address of keypress table
 816  86A6              ; Byte 4   - Bank with Display code
 817  86A6              ; Byte 5,6 - Function for display
 818  86A6              ; Byte 7,8 - Main loop update routine
 819  86A6              ; Byte 9   - Draw stars Y/N
 820  86A6              ; byte 10  - Input Blocker (set to 1 will not allow keyboard screen change until flagged, used by transition screens and pause menus)
 821  86A6              ; byte 11  - Double Buffering 0 = no, 1 = yes
 822  86A6              ; byte 12,13  - cursor key input routine
 823  86A6              ; byte 14  - HyperspaceBlock - can not select this screen if in hyperpace - 00 can , 01 can not
 824  86A6              ; byte 15    padding at the momnent (should add in an "AI enabled flag" for optimistation, hold previous value and on change create ships
 825  86A6              ;                          0    1                 2                              3                               4                    5                            6                              7                     8                       9   10  11  12                          13                          14  15
 826  86A6 00 00 DE 95  ScreenKeyMap:           DB 0,   ScreenLocal     , low addr_Pressed_LocalChart,   high addr_Pressed_LocalChart,   BankMenuShrCht,      low draw_local_chart_menu,   high draw_local_chart_menu,    $00,                  $00,                    $00,$00,$00,low local_chart_cursors,    high local_chart_cursors,   $01,$00;low loop_local_chart_menu,   high loop_local_chart_menu
 826  86AA 32 FC C3 00
 826  86AE 00 00 00 00
 826  86B2 5A C4 01 00
 827  86B6 00 01 DC 95  ScreenKeyGalactic:      DB 0,   ScreenGalactic  , low addr_Pressed_GalacticChrt, high addr_Pressed_GalacticChrt, BankMenuGalCht,      low draw_galactic_chart_menu,high draw_galactic_chart_menu, low loop_gc_menu,     high loop_gc_menu,      $00,$00,$00,low galctic_chart_cursors,  high galctic_chart_cursors, $01,$00
 827  86BA 33 48 C1 78
 827  86BE C2 00 00 00
 827  86C2 00 C3 01 00
 828  86C6 01 02 E0 95                          DB 1,   ScreenMarket    , low addr_Pressed_MarketPrices, high addr_Pressed_MarketPrices, BankMenuMarket,      low draw_market_prices_menu, high draw_market_prices_menu,  low loop_market_menu, high loop_market_menu,  $00,$00,$00,$00,                        $00,                        $01,$00
 828  86CA 36 43 C3 FA
 828  86CE C3 00 00 00
 828  86D2 00 00 01 00
 829  86D6 02 03 E0 95                          DB 2,   ScreenMarketDsp , low addr_Pressed_MarketPrices, high addr_Pressed_MarketPrices, BankMenuMarket,      low draw_market_prices_menu, high draw_market_prices_menu,  $00,                  $00,                    $00,$00,$00,$00,                        $00,                        $01,$00
 829  86DA 36 43 C3 00
 829  86DE 00 00 00 00
 829  86E2 00 00 01 00
 830  86E6 00 04 E2 95  ScreenCmdr:             DB 0,   ScreenStatus    , low addr_Pressed_Status,       high addr_Pressed_Status,       BankMenuStatus,      low draw_status_menu,        high draw_status_menu,         low loop_STAT_menu,  high loop_STAT_menu,     $00,$00,$00,$00,                        $00,                        $01,$00
 830  86EA 3F 46 CF 8A
 830  86EE CF 00 00 00
 830  86F2 00 00 01 00
 831  86F6 00 05 E4 95                          DB 0,   ScreenInvent    , low addr_Pressed_Inventory,    high addr_Pressed_Inventory,    BankMenuInvent,      low draw_inventory_menu,     high draw_inventory_menu,      $00,                  $00,                    $00,$00,$00,$00,                        $00,                        $01,$00
 831  86FA 34 F5 C1 00
 831  86FE 00 00 00 00
 831  8702 00 00 01 00
 832  8706 00 06 F2 95                          DB 0,   ScreenPlanet    , low addr_Pressed_PlanetData,   high addr_Pressed_PlanetData,   BankMenuSystem,      low draw_system_data_menu,   high draw_system_data_menu,    $00,                  $00,                    $00,$00,$00,$00,                        $00,                        $01,$00
 832  870A 35 F0 C2 00
 832  870E 00 00 00 00
 832  8712 00 00 01 00
 833  8716 01 07 DA 95                          DB 1,   ScreenEquip     , low addr_Pressed_Equip,        high addr_Pressed_Equip,        BankMenuEquipS,      low draw_eqshp_menu,         high draw_eqshp_menu,          low loop_eqshp_menu,  high loop_eqshp_menu,   $00,$00,$00,$00,                        $00,                        $01,$00
 833  871A 40 EA D3 86
 833  871E D4 00 00 00
 833  8722 00 00 01 00
 834  8726 01 08 D4 95                          DB 1,   ScreenLaunch    , low addr_Pressed_Launch,       high addr_Pressed_Launch,       BankLaunchShip,      low draw_launch_ship,        high draw_launch_ship,         low loop_launch_ship, high loop_launch_ship,  $00,$01,$01,$00,                        $00,                        $01,$00
 834  872A 41 79 C1 63
 834  872E C2 00 01 01
 834  8732 00 00 01 00
 835  8736 02 09 AA 95  ScreenKeyFront:         DB 2,   ScreenFront     , low addr_Pressed_Front,        high addr_Pressed_Front,        BankFrontView,       low draw_front_view,         high draw_front_view,          $00,                  $00,                    $01,$00,$01,low input_front_view,      high input_front_view,       $00,$00
 835  873A 3E 6A C0 00
 835  873E 00 01 00 01
 835  8742 72 C2 00 00
 836  8746 02 0A AA 95                          DB 2,   ScreenAft       , low addr_Pressed_Front,        high addr_Pressed_Front,        BankFrontView,       low draw_front_view,         high draw_front_view,          $00,                  $00,                    $01,$00,$01,low input_front_view,      high input_front_view,       $00,$00
 836  874A 3E 6A C0 00
 836  874E 00 01 00 01
 836  8752 72 C2 00 00
 837  8756 02 0B AA 95                          DB 2,   ScreenLeft      , low addr_Pressed_Front,        high addr_Pressed_Front,        BankFrontView,       low draw_front_view,         high draw_front_view,          $00,                  $00,                    $01,$00,$01,low input_front_view,      high input_front_view,       $00,$00
 837  875A 3E 6A C0 00
 837  875E 00 01 00 01
 837  8762 72 C2 00 00
 838  8766 02 0C AA 95                          DB 2,   ScreenRight     , low addr_Pressed_Front,        high addr_Pressed_Front,        BankFrontView,       low draw_front_view,         high draw_front_view,          $00,                  $00,                    $01,$00,$01,low input_front_view,      high input_front_view,       $00,$00
 838  876A 3E 6A C0 00
 838  876E 00 01 00 01
 838  8772 72 C2 00 00
 839  8776 03 0D FF FF                          DB 3,   ScreenDocking   , $FF,                           $FF,                            BankLaunchShip,      low draw_docking_ship,       high draw_docking_ship,        low loop_docking_ship,high loop_docking_ship, $00,$01,$01,$00,                        $00,                        $01,$00
 839  877A 41 F5 C1 98
 839  877E C2 00 01 01
 839  8782 00 00 01 00
 840  8786 01 0E FF FF                          DB 1,   ScreenHyperspace, $FF,                           $FF,                            BankFrontView,       low draw_hyperspace,         high draw_hyperspace,          low loop_hyperspace,  high loop_hyperspace,   $00,$01,$01,$00
 840  878A 3E 2A C2 70
 840  878E C2 00 01 01
 840  8792 00
 841  8793
 842  8793              ;               DB low addr_Pressed_Aft,          high addr_Pressed_Aft,          BankMenuGalCht,      low SelectFrontView,         high SelectFrontView,          $00,$00,$00,$00,$00,$00,$00,$00,$00,$00
 843  8793              ;               DB low addr_Pressed_Left,         high addr_Pressed_Left,         BankMenuGalCht,      low SelectFrontView,         high SelectFrontView,          $00,$00,$00,$00,$00,$00,$00,$00,$00,$00
 844  8793              ;               DB low addr_Pressed_Right,        high addr_Pressed_Right,        BankMenuGalCht,      low SelectFrontView,         high SelectFrontView,          $00,$00,$00,$00,$00,$00,$00,$00,$00,$00
 845  8793              ScreenMapRow        EQU ScreenKeyGalactic - ScreenKeyMap
 846  8793              ScreenMapLen        EQU ($ - ScreenKeyMap) / ScreenMapRow
 847  8793              ScreenViewsStart    EQU (ScreenKeyFront - ScreenKeyMap)/ScreenMapRow
 848  8793 FF           ScreenTransitionForced  DB $FF
 849  8794                  INCLUDE "./GameEngine/resetUniverse.asm"
# file opened: ./GameEngine/resetUniverse.asm
   1+ 8794              ; Use bank 0 as source and bank 7 as write target
   2+ 8794              ResetUniv:              MMUSelectCpySrcN BankUNIVDATA0	         ; master universe def in bank 0
   2+ 8794 ED 91 50 46 >                     nextreg DMACpySourceMMU,	BankUNIVDATA0
   3+ 8798 3E 01                                ld		a,1             				 ; we can read bank 0 as if it was rom
   4+ 879A 06 0C                                ld		b,12
   5+ 879C C5 F5        .ResetCopyLoop:         push	bc,,af
   6+ 879E                                      MMUSelectUniverseA			             ; copy from bank 0 to 71 to 12
   6+ 879E C6 46       >                     add    a,BankUNIVDATA0
   6+ 87A0 ED 92 56    >                     nextreg UniverseMMU,       a
   7+ 87A3 21 00 C0                             ld		hl,UniverseBankAddr
   8+ 87A6 11 00 00                             ld		de,dmaCopySrcAddr
   9+ 87A9 01 7E 1E                             ld		bc,UnivBankSize
  10+ 87AC CD 4E 95                             call	memcopy_dma
  11+ 87AF F1 C1                                pop		bc,,af
  12+ 87B1 57                                   ld      d,a
  13+ 87B2 C6 41                                add     "A"
  14+ 87B4 32 0B C0                             ld      (StartOfUnivN),a
  15+ 87B7 7A                                   ld      a,d
  16+ 87B8 3C                                   inc		a
  17+ 87B9 10 E1                                djnz	.ResetCopyLoop
  18+ 87BB C9                                   ret
  19+ 87BC
  20+ 87BC              ; Use bank 0 as source and bank 7 as write target
  21+ 87BC              ResetGalaxy:            MMUSelectCpySrcN BankGalaxyData0	     ; master universe def in bank 0 we can read bank 0 as if it was rom
  21+ 87BC ED 91 50 5B >                     nextreg DMACpySourceMMU,	BankGalaxyData0
  22+ 87C0 3E 5C                                ld		a,BankGalaxyData1 			   	 ; and write to real location for galaxy data
  23+ 87C2 06 07                                ld		b,7                              ; 8 galaxies but we start with galaxy 0
  24+ 87C4 0E 01                                ld      c,1                              ;
  25+ 87C6 F5           .ResetCopyLoop:         push	af                               ;
  26+ 87C7 C5                                   push	bc                               ;
  27+ 87C8                                      MMUSelectGalaxyA    	                 ; copy from bank 0 to galaxy 1 to 7
  27+ 87C8 ED 92 57    >                     nextreg GalaxyDataMMU,       a
  28+ 87CB 21 00 E0                             ld		hl,GalaxyDataAddr                ; using dma transfer
  29+ 87CE 11 00 00                             ld		de,dmaCopySrcAddr                ; .
  30+ 87D1 01 DD 1C                             ld		bc,GalaxyBankSize                ; .
  31+ 87D4 CD 4E 95                             call	memcopy_dma                      ; .
  32+ 87D7 C1                                   pop		bc                               ; .
  33+ 87D8 21 0F E0                             ld      hl, galaxy_pg_cnt                ; write out the galaxy page nbr to the page so we can diagnose page swapping
  34+ 87DB 79                                   ld      a,c                              ;
  35+ 87DC C6 30                                add     a, $30                           ; add $30 (48) to get ascii of galaxy nbr
  36+ 87DE 77                                   ld      (hl),a                           ; .
  37+ 87DF 0C                                   inc     c                                ; Do next bank
  38+ 87E0 F1                                   pop     af                               ; .
  39+ 87E1 3C                                   inc		a                                ; .
  40+ 87E2 10 E2                                djnz	.ResetCopyLoop                    ; .
  41+ 87E4 C9                                   ret
  42+ 87E5
  43+ 87E5 06 08        SeedAllGalaxies:        ld          b,8
  44+ 87E7 0E 5B                                ld          c,BankGalaxyData0
  45+ 87E9 C5           .SeedAllGalaxiesLoop:   push        bc
  46+ 87EA 79                                   ld          a,c
  47+ 87EB                                      MMUSelectGalaxyA
  47+ 87EB ED 92 57    >                     nextreg GalaxyDataMMU,       a
  48+ 87EE CD A0 FC                             call        SeedGalaxy
  49+ 87F1 C1                                   pop         bc
  50+ 87F2 0C                                   inc         c
  51+ 87F3 10 F4                                djnz        .SeedAllGalaxiesLoop
  52+ 87F5 C9                                   ret
# file closed: ./GameEngine/resetUniverse.asm
 850  87F6
 851  87F6
 852  87F6              ;----------------------------------------------------------------------------------------------------------------------------------
 853  87F6              LaunchedFromStation:    MMUSelectSun
 853  87F6 ED 91 56 53 >                     nextreg SunMMU,            BankSunData
 854  87FA CD 5D C2                             call    CreateSun                      ; create the local sun and set position based on seed
 855  87FD CD E7 9C                             call    ClearUnivSlotList
 856  8800 CD F3 9C                             call    SetSlot0ToSpaceStation              ; set slot 1 to space station
 857  8803                                      MMUSelectUniverseN 0                        ; Prep Target universe
 857  8803 ED 91 56 46 >                     nextreg UniverseMMU,       BankUNIVDATA0+0
 858  8807                                      MMUSelectShipBank1                          ; Bank in the ship model code
 858  8807 ED 91 57 3B >					 nextreg ShipModelMMU,	    BankShipModels1
 859  880B CD 10 CB                             call    UnivInitRuntime                     ; Zerp ship runtime data
 860  880E 3E 0D                                ld      a,CoriloisStation
 861  8810 CD 0F E0                             call    GetShipBankId
 862  8813                                      MMUSelectShipBankA                          ; Select the correct bank found
 862  8813 ED 92 57    >					 nextreg ShipModelMMU,	    a
 863  8816 78                                   ld      a,b                                 ; Select the correct ship
 864  8817 CD 6A E0                             call    CopyShipToUniverse
 865  881A CD DD CA     .BuiltStation:          call    ResetStationLaunch
 866  881D AF           .NowInFlight:           xor     a
 867  881E 32 36 99                             ld      (DockedFlag),a
 868  8821                                      ForceTransition ScreenFront
 868  8821 3E 09       >                        ld      a,ScreenFront
 868  8823 32 93 87    >                        ld      (ScreenTransitionForced), a
 869  8826 CD 9A 9C                             call    ResetPlayerShip
 870  8829 C9                                   ret
 871  882A
 872  882A 3A E7 86     InitialiseCommander:    ld      a,(ScreenCmdr+1)
 873  882D DD 21 E6 86                          ld      ix,ScreenCmdr
 874  8831 C3 3E 88                             jp      SetScreenAIX
 875  8834
 876  8834 3A 37 87     InitialiseFrontView:    ld      a,(ScreenKeyFront+1)
 877  8837 DD 21 36 87                          ld      ix,ScreenKeyFront
 878  883B C3 3E 88                             jp      SetScreenAIX
 879  883E              ; false ret here as we get it free from jp
 880  883E
 881  883E              ;----------------------------------------------------------------------------------------------------------------------------------
 882  883E 32 30 99     SetScreenAIX:           ld      (ScreenIndex),a                 ; Set screen index to a
 883  8841                                      ClearForceTransition                    ; In case it was called by a brute force change in an update loop
 883  8841 3E FF       >                        ld      a,$FF
 883  8843 32 93 87    >                        ld      (ScreenTransitionForced),a
 884  8846 32 2F 99                             ld      (ScreenChanged),a               ; Set screen changed to FF
 885  8849 DD 7E 04                             ld      a,(ix+4)                        ; Screen Map Byte 4   - Bank with Display code
 886  884C 32 CF 81                             ld      (ScreenLoopBank+1),a            ; setup loop
 887  884F 32 0B 81                             ld      (HandleBankSelect+1),a          ; setup cursor keys
 888  8852                                      MMUSelectScreenA
 888  8852 ED 92 56    >                     nextreg ScreenBankMMU,		a
 889  8855 DD 7E 05                             ld      a,(ix+5)                        ; Screen Map Byte 5 - Function for display
 890  8858 32 8C 88                             ld      (ScreenUpdateAddr+1),a
 891  885B DD 7E 06                             ld      a,(ix+6)                        ; Screen Map Byte 6 - Function for display
 892  885E 32 8D 88                             ld      (ScreenUpdateAddr+2),a
 893  8861 DD 7E 07                             ld      a,(ix+7)                        ; Screen Map Byte 7 - Main loop update routine
 894  8864 32 D4 81                             ld      (ScreenLoopJP+1),a
 895  8867 DD 7E 08                             ld      a,(ix+8)                        ; Screen Map Byte 8 - Main loop update routine
 896  886A 32 D5 81                             ld      (ScreenLoopJP+2),a
 897  886D DD 7E 09                             ld      a,(ix+9)                        ; Screen Map Byte 9  - Draw stars Y/N
 898  8870 32 34 81                             ld      (CheckIfViewUpdate+1),a         ; Set flag to determine if we are on an exterior view
 899  8873 DD 7E 0A                             ld      a,(ix+10)                       ; Screen Map Byte 10  - Input Blocker (set to 1 will not allow keyboard screen change until flagged, used by transition screens and pause menus)
 900  8876 32 E6 80                             ld      (InputBlockerCheck+1),a          ; Set flag to block transitions as needed e.g. launch screen
 901  8879 DD 7E 0B                             ld      a,(ix+11)                       ; Screen Map Byte 11  - Double Buffering 0 = no, 1 = yes
 902  887C 32 8F 83                             ld      (DoubleBufferCheck+1),a
 903  887F DD 7E 0C                             ld      a,(ix+12)
 904  8882 32 10 81                             ld      (CallCursorRoutine+1),a
 905  8885 DD 7E 0D                             ld      a,(ix+13)
 906  8888 32 11 81                             ld      (CallCursorRoutine+2),a
 907  888B
 908  888B C3 00 00     ScreenUpdateAddr:       jp      $0000                          ; We can just drop out now and also get a free ret from caller
 909  888E              ;----------------------------------------------------------------------------------------------------------------------------------
 910  888E 3A 30 99     ViewKeyTest:            ld      a,(ScreenIndex)
 911  8891 4F                                   ld      c,a
 912  8892 06 0E                                ld      b,ScreenMapLen                  ; For now until add screens are added
 913  8894 DD 21 A6 86                          ld      ix,ScreenKeyMap
 914  8898 2A ED 99                             ld      hl,(InnerHyperCount)
 915  889B 7C                                   ld      a,h
 916  889C B5                                   or      l
 917  889D FD 67                                ld      iyh,a
 918  889F FD 7C        ViewScanLoop:           ld      a,iyh
 919  88A1 A7           .HyperspaceCountdown:   and     a
 920  88A2 28 08                                jr      z,.DockedFlag
 921  88A4 DD 7E 0E                             ld      a,(ix+14)
 922  88A7 FE 01                                cp      1
 923  88A9 CA EE 88                             jp      z,NotReadNextKey
 924  88AC DD 7E 00     .DockedFlag:            ld      a,(ix+0)                        ; Screen Map Byte 0 Docked flag
 925  88AF              ; 0 = not applicable (always read), 1 = only whilst docked, 2 = only when not docked, 3 = No keypress allowed
 926  88AF FE 03                                cp      3                               ; if not selectable then don't scan this (becuase its a transition screen)
 927  88B1 28 3B                                jr      z,NotReadNextKey                ;
 928  88B3 FE 00                                cp      0                               ; if itr a always read skip docking check
 929  88B5 28 14                                jr      z,.NoDocCheck
 930  88B7 57           .DocCheck:              ld      d,a
 931  88B8 3A 36 99                             ld      a,(DockedFlag)
 932  88BB FE 00                                cp      0                               ; if we are docked
 933  88BD 28 07                                jr      z,.NotDockedCheck
 934  88BF 7A           .DockedCheck:           ld      a,d
 935  88C0 FE 01                                cp      1                               ; if we are docked and its a dock only then scan
 936  88C2 20 2A                                jr      nz,NotReadNextKey
 937  88C4 18 05                                jr      .NoDocCheck
 938  88C6 7A           .NotDockedCheck:        ld      a,d
 939  88C7 FE 02                                cp      2                               ; if we are not docked and its a flight only then scan
 940  88C9 20 23                                jr      nz,NotReadNextKey
 941  88CB DD 7E 01     .NoDocCheck:            ld      a,(ix+1)                        ; Screen Map Byte 1 Screen Id
 942  88CE B9                                   cp      c                               ; is the index the current screen, if so skip the scan
 943  88CF 5F                                   ld      e,a
 944  88D0 28 1C                                jr      z,NotReadNextKey
 945  88D2 DD 7E 02                             ld      a,(ix+2)                        ; Screen Map Byte 2 - address of keypress table
 946  88D5 FE FF                                cp      $FF                             ; if upper byte is FF then we do not respond
 947  88D7 28 15                                jr      z,NotReadNextKey
 948  88D9 32 E3 88                             ld      (ReadKeyAddr+1),a               ; Poke address into the ld hl,(....) below
 949  88DC DD 7E 03                             ld      a,(ix+3)                        ; Screen Map Byte 3 - address of keypress table
 950  88DF 32 E4 88                             ld      (ReadKeyAddr+2),a
 951  88E2 2A 00 00     ReadKeyAddr:            ld      hl,($0000)                      ; address is entry in the pointer table to the actual keypress
 952  88E5 7E                                   ld      a,(hl)                          ; now fetch the actual keypress
 953  88E6                                      JumpIfAIsZero NotReadNextKey
 953  88E6 A7          >                        and a   ; cp 0 - changed to and a for optimisation but affects other flags
 953  88E7 CA EE 88    >                        jp	z, NotReadNextKey
 954  88EA 7B           .ValidScreenChange:     ld      a,e
 955  88EB C3 3E 88                             jp      SetScreenAIX
 956  88EE              ;--- CODE WILL NOT FALL TO HERE ---
 957  88EE 11 10 00     NotReadNextKey:         ld      de,ScreenMapRow
 958  88F1 DD 19                                add     ix,de                           ; we have only processed 3 of 8 bytes at here
 959  88F3 10 AA                                djnz    ViewScanLoop
 960  88F5 C9                                   ret
 961  88F6
 962  88F6 21 00 00     SetInitialShipPosition: ld      hl,$0000
 963  88F9 22 0C C0                             ld      (UBnKxlo),hl
 964  88FC 21 00 00                             ld      hl,$0000
 965  88FF 22 0F C0                             ld      (UBnKylo),hl
 966  8902 21 B4 03                             ld      hl,$03B4
 967  8905 22 12 C0                             ld      (UBnKzlo),hl
 968  8908 AF                                   xor     a
 969  8909 32 0E C0                             ld      (UBnKxsgn),a
 970  890C 32 11 C0                             ld      (UBnKysgn),a
 971  890F 32 14 C0                             ld      (UBnKzsgn),a
 972  8912              ;    call    Reset TODO
 973  8912 CD 83 CC                             call	InitialiseOrientation            ;#00;
 974  8915 3E 01                                ld      a,1
 975  8917 32 23 99                             ld      (DELTA),a
 976  891A 21 04 00                             ld      hl,4
 977  891D 22 24 99                             ld      (DELTA4),hl
 978  8920 C9                                   ret
 979  8921
 980  8921
 981  8921                          INCLUDE "./Views/ConsoleDrawing.asm"
# file opened: ./Views/ConsoleDrawing.asm
   1+ 8921              ; bc = start position, d = length, e = colour
   2+ 8921 1E 10        Draw3LineBar:           ld      e,16
   3+ 8923 C5 D5                                push    bc,,de
   4+ 8925                                      MMUSelectLayer2
   4+ 8925 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
   5+ 8929 CD 60 E2                             call    l2_draw_horz_line
   6+ 892C D1 C1                                pop     bc,,de
   7+ 892E 05                                   dec     b
   8+ 892F C5 D5                                push    bc,,de
   9+ 8931 1E 14                                ld      e,20
  10+ 8933                                      MMUSelectLayer2
  10+ 8933 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
  11+ 8937 CD 60 E2                             call    l2_draw_horz_line
  12+ 893A D1 C1                                pop     bc,,de
  13+ 893C 05                                   dec     b
  14+ 893D                                      MMUSelectLayer2
  14+ 893D ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
  15+ 8941 CD 60 E2                             call    l2_draw_horz_line
  16+ 8944 C9                                   ret
  17+ 8945
  18+ 8945 1E 7C        DrawColourCodedBar:     ld      e,124
  19+ 8947 FE 28                                cp      40
  20+ 8949 30 18                                jr      nc,DrawColourEBar
  21+ 894B 1E 54                                ld      e,84
  22+ 894D FE 1E                                cp      30
  23+ 894F 30 12                                jr      nc,DrawColourEBar
  24+ 8951 1E D8                                ld      e,216
  25+ 8953 FE 14                                cp      20
  26+ 8955 1E EC                                ld      e,236
  27+ 8957 FE 0A                                cp      10
  28+ 8959 30 08                                jr      nc,DrawColourEBar
  29+ 895B 1E E1                                ld      e,225
  30+ 895D FE 05                                cp      5
  31+ 895F 30 02                                jr      nc,DrawColourEBar
  32+ 8961 1E E0                                ld      e,224
  33+ 8963 C5 D5        DrawColourEBar:         push    bc,,de
  34+ 8965                                      MMUSelectLayer2
  34+ 8965 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
  35+ 8969 CD 60 E2                             call    l2_draw_horz_line
  36+ 896C D1 C1                                pop     bc,,de
  37+ 896E 05                                   dec     b
  38+ 896F C5 D5                                push    bc,,de
  39+ 8971                                      MMUSelectLayer2
  39+ 8971 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
  40+ 8975 CD 60 E2                             call    l2_draw_horz_line
  41+ 8978 D1 C1                                pop     bc,,de
  42+ 897A 05                                   dec     b
  43+ 897B                                      MMUSelectLayer2
  43+ 897B ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
  44+ 897F CD 60 E2                             call    l2_draw_horz_line
  45+ 8982 C9                                   ret
  46+ 8983
  47+ 8983                                      ; no ret needed as jp handles it
  48+ 8983
  49+ 8983
  50+ 8983 3A 23 99     UpdateConsole:          ld      a,(DELTA)
  51+ 8986 FE 00                                cp      0                           ; don't draw if there is nothing to draw
  52+ 8988 28 0C                                jr      z,.UpdateRoll
  53+ 898A 01 D1 84                             ld      bc,SpeedoStart
  54+ 898D 21 71 9C                             ld      hl,SpeedoMapping
  55+ 8990 ED 31                                add     hl,a
  56+ 8992 56                                   ld      d,(hl)
  57+ 8993 CD 21 89                             call    Draw3LineBar
  58+ 8996 3A 3E 98     .UpdateRoll:            ld      a,(ALP1)
  59+ 8999 FE 00                                cp      0
  60+ 899B CA CF 89                             jp      z,.UpdatePitch
  61+ 899E 21 E0 8C                             ld      hl,RollMiddle
  62+ 89A1 3A 3F 98                             ld      a,(ALP2)
  63+ 89A4 FE 00                                cp      0
  64+ 89A6 CA C1 89                             jp     z,.PosRoll
  65+ 89A9 16 00        .NegRoll:               ld      d,0
  66+ 89AB 3A 3E 98                             ld      a,(ALP1)
  67+ 89AE CB 27                                sla     a
  68+ 89B0 5F                                   ld      e,a
  69+ 89B1 B7                                   or      a
  70+ 89B2 ED 52                                sbc     hl,de
  71+ 89B4 44 4D                                ld      bc,hl
  72+ 89B6 3E E1                                ld      a,DialMiddleXPos
  73+ 89B8 91                                   sub     c
  74+ 89B9 57                                   ld      d,a
  75+ 89BA 1E FF                                ld      e,$FF
  76+ 89BC CD 21 89                             call    Draw3LineBar
  77+ 89BF 18 0E                                jr      .UpdatePitch
  78+ 89C1 01 E0 8C     .PosRoll:               ld      bc,RollMiddle
  79+ 89C4 3A 3E 98                             ld      a,(ALP1)
  80+ 89C7 CB 27                                sla     a
  81+ 89C9 57                                   ld      d,a
  82+ 89CA 1E FF                                ld      e,$FF
  83+ 89CC CD 21 89                             call    Draw3LineBar
  84+ 89CF 3A 31 98     .UpdatePitch:           ld      a,(BET1)
  85+ 89D2 FE 00                                cp      0
  86+ 89D4 CA 09 8A                             jp      z,.Fuel
  87+ 89D7 21 E0 94                             ld      hl,PitchMiddle
  88+ 89DA 3A 32 98                             ld      a,(BET2)
  89+ 89DD FE 00                                cp      0
  90+ 89DF CA FB 89                             jp      z,.PosPitch
  91+ 89E2 16 00        .NegPitch:              ld      d,0
  92+ 89E4 3A 31 98                             ld      a,(BET1)
  93+ 89E7 CB 27                                sla     a
  94+ 89E9 5F                                   ld      e,a
  95+ 89EA B7                                   or      a
  96+ 89EB ED 52                                sbc     hl,de
  97+ 89ED 44 4D                                ld      bc,hl
  98+ 89EF 3E E1                                ld      a,DialMiddleXPos
  99+ 89F1 91                                   sub     c
 100+ 89F2 57                                   ld      d,a
 101+ 89F3 1E FF                                ld      e,$FF
 102+ 89F5 CD 21 89                             call    Draw3LineBar
 103+ 89F8 C3 09 8A                             jp      .Fuel
 104+ 89FB 01 E0 94     .PosPitch:              ld      bc,PitchMiddle
 105+ 89FE 3A 31 98                             ld      a,(BET1)
 106+ 8A01 CB 27                                sla     a
 107+ 8A03 57                                   ld      d,a
 108+ 8A04 1E FF                                ld      e,$FF
 109+ 8A06 CD 21 89                             call    Draw3LineBar
 110+ 8A09 3A 75 9D     .Fuel:                  ld      a,(Fuel)
 111+ 8A0C CB 3F                                srl     a               ; divide by 4 to get range on screen
 112+ 8A0E 21 4C 9C                             ld      hl,FuelMapping
 113+ 8A11 ED 31                                add     hl,a
 114+ 8A13 7E                                   ld      a,(hl)
 115+ 8A14 01 10 94                             ld      bc,FuelStart
 116+ 8A17 57                                   ld      d,a
 117+ 8A18 CD 45 89                             call    DrawColourCodedBar
 118+ 8A1B 3A 22 9C     .ForeShield:            ld      a,(ForeShield)
 119+ 8A1E CB 3F                                srl     a
 120+ 8A20 CB 3F                                srl     a
 121+ 8A22 CB 3F                                srl     a
 122+ 8A24 01 10 84                             ld      bc,FShieldStart
 123+ 8A27 CD 45 89                             call    DrawColourCodedBar
 124+ 8A2A 3A 23 9C     .AftShield:             ld      a,(AftShield)
 125+ 8A2D CB 3F                                srl     a
 126+ 8A2F CB 3F                                srl     a
 127+ 8A31 CB 3F                                srl     a
 128+ 8A33 01 10 8D                             ld      bc,AShieldStart
 129+ 8A36 57                                   ld      d,a
 130+ 8A37 CD 45 89                             call    DrawColourCodedBar  ;ld		(ForeShield),a
 131+ 8A3A 3A 24 9C     .EnergyBars:            ld      a,(PlayerEnergy)
 132+ 8A3D CB 3F                                srl     a                   ; energy = energy / 2 so 31 per bar
 133+ 8A3F                                      CallIfALTNusng  31 + 1,.Draw1EnergyBar
 133+ 8A3F FE 20       >                        cp      31 + 1
 133+ 8A41 DC 7A 8A    >                        call	c,.Draw1EnergyBar
 134+ 8A44                                      CallIfALTNusng  (31*2) + 1,.Draw2EnergyBars
 134+ 8A44 FE 3F       >                        cp      (31*2) + 1
 134+ 8A46 DC 86 8A    >                        call	c,.Draw2EnergyBars
 135+ 8A49                                      CallIfALTNusng  (31*3) + 1,.Draw3EnergyBars
 135+ 8A49 FE 5E       >                        cp      (31*3) + 1
 135+ 8A4B DC 9E 8A    >                        call	c,.Draw3EnergyBars
 136+ 8A4E 1E 18        .Draw4EnergyBars:       ld      e,24
 137+ 8A50 D6 60                                sub     (32*3)
 138+ 8A52 57                                   ld      d,a
 139+ 8A53 01 D5 A5                             ld      bc,EnergyBar4Start
 140+ 8A56 CD 63 89                             call    DrawColourEBar
 141+ 8A59 16 1F                                ld      d,31
 142+ 8A5B 1E 18                                ld      e,24
 143+ 8A5D 01 D5 AD                             ld      bc,EnergyBar3Start
 144+ 8A60 CD 63 89                             call    DrawColourEBar
 145+ 8A63 16 1F                                ld      d,31
 146+ 8A65 1E 18                                ld      e,24
 147+ 8A67 01 D5 B5                             ld      bc,EnergyBar2Start
 148+ 8A6A CD 63 89                             call    DrawColourEBar
 149+ 8A6D 16 1F                                ld      d,31
 150+ 8A6F 1E 18                                ld      e,24
 151+ 8A71 01 D5 BD                             ld      bc,EnergyBar1Start
 152+ 8A74 CD 63 89                             call    DrawColourEBar
 153+ 8A77 C3 BF 8A                             jp      .DoneEnergyBars
 154+ 8A7A 1E E0        .Draw1EnergyBar:        ld      e,224
 155+ 8A7C 57                                   ld      d,a
 156+ 8A7D 01 D5 BD                             ld      bc,EnergyBar1Start
 157+ 8A80 CD 63 89                             call    DrawColourEBar
 158+ 8A83 C3 BF 8A                             jp      .DoneEnergyBars
 159+ 8A86 1E D8        .Draw2EnergyBars:       ld      e,216
 160+ 8A88 D6 1F                                sub     31
 161+ 8A8A 57                                   ld      d,a
 162+ 8A8B 01 D5 B5                             ld      bc,EnergyBar2Start
 163+ 8A8E CD 63 89                             call    DrawColourEBar
 164+ 8A91 16 1F                                ld      d,31
 165+ 8A93 1E D8                                ld      e,216
 166+ 8A95 01 D5 BD                             ld      bc,EnergyBar1Start
 167+ 8A98 CD 63 89                             call    DrawColourEBar
 168+ 8A9B C3 BF 8A                             jp      .DoneEnergyBars
 169+ 8A9E 1E 14        .Draw3EnergyBars:       ld      e,20
 170+ 8AA0 D6 3E                                sub     31*2
 171+ 8AA2 57                                   ld      d,a
 172+ 8AA3 1E 14                                ld      e,20
 173+ 8AA5 01 D5 AD                             ld      bc,EnergyBar3Start
 174+ 8AA8 CD 63 89                             call    DrawColourEBar
 175+ 8AAB 16 1F                                ld      d,31
 176+ 8AAD 1E 14                                ld      e,20
 177+ 8AAF 01 D5 B5                             ld      bc,EnergyBar2Start
 178+ 8AB2 CD 63 89                             call    DrawColourEBar
 179+ 8AB5 16 1F                                ld      d,31
 180+ 8AB7 1E 14                                ld      e,20
 181+ 8AB9 01 D5 BD                             ld      bc,EnergyBar1Start
 182+ 8ABC CD 63 89                             call    DrawColourEBar
 183+ 8ABF              .DoneEnergyBars:
 184+ 8ABF
 185+ 8ABF
 186+ 8ABF
 187+ 8ABF              ; NEED ENERGY BAR
 188+ 8ABF              ;PlayerEnergy
 189+ 8ABF              ; BNEED LASER temp
 190+ 8ABF              ; NEED CABIN TEMP
 191+ 8ABF              ;NEED ALTITUDE
 192+ 8ABF              ; Draw compas - if in range draw station, else do planet
 193+ 8ABF C9           .DoneConsole:           ret
 194+ 8AC0
 195+ 8AC0
 196+ 8AC0
 197+ 8AC0              ScannerBottom           equ 190
 198+ 8AC0              ScannerTypeMissle       equ 2
 199+ 8AC0              ScannerXRangeOffset     equ $35
 200+ 8AC0              ScannerCenter           equ 127
 201+ 8AC0
 202+ 8AC0              ScannerDefault          equ 0
 203+ 8AC0              ScannerMissile          equ 2
 204+ 8AC0              ScannerStation          equ 4
 205+ 8AC0              ScannerEnemy            equ 6
 206+ 8AC0
 207+ 8AC0
 208+ 8AC0 00           SunXScaled              DB  0
 209+ 8AC1 00           SunYScaled              DB  0
 210+ 8AC2 00           SunZScaled              DB  0
 211+ 8AC3
 212+ 8AC3
 213+ 8AC3 18 1C 90 FC  ScannerColourTable:     DB  L2ColourGREEN_2, L2ColourGREEN_1, L2ColourYELLOW_4,L2ColourYELLOW_1,L2ColourCYAN_2,L2ColourCYAN_1,L2ColourRED_4,L2ColourPINK_4
 213+ 8AC7 12 1F 80 E0
 214+ 8ACB C0 E0        ScannerColourTableAngry:DB  L2ColourRED_2, L2ColourRED_1 ; just a place holder for now
 215+ 8ACD
 216+ 8ACD              GetShipColor:           MACRO
 217+ 8ACD ~                                    ld      a,(ShipTypeAddr)
 218+ 8ACD ~                                    sla     a                            ; as its byte pairs * 2
 219+ 8ACD ~                                    ld      hl,ScannerColourTable
 220+ 8ACD ~                                    add     hl,a
 221+ 8ACD ~                                    ld      a,(hl)
 222+ 8ACD                                      ENDM
 223+ 8ACD              GetShipColorBright:     MACRO
 224+ 8ACD ~                                    ld      a,(ShipTypeAddr)
 225+ 8ACD ~                                    sla     a                            ; as its byte pairs * 2
 226+ 8ACD ~                                    inc     a
 227+ 8ACD ~                                    ld      hl,ScannerColourTable
 228+ 8ACD ~                                    add     hl,a
 229+ 8ACD ~                                    ld      a,(hl)
 230+ 8ACD                                      ENDM
 231+ 8ACD
 232+ 8ACD              Shift24BitScan:         MACRO   regHi, reglo
 233+ 8ACD ~                                    ld      hl,(regHi)
 234+ 8ACD ~                                    ld      b,h
 235+ 8ACD ~                                    ld      a,h
 236+ 8ACD ~                                    and     SignMask8Bit
 237+ 8ACD ~                                    ld      h,a
 238+ 8ACD ~                                    ld      a,(reglo)
 239+ 8ACD ~                                    sla     a
 240+ 8ACD ~                                    rl      l
 241+ 8ACD ~                                    rl      h
 242+ 8ACD ~                                    sla     a
 243+ 8ACD ~                                    rl      l
 244+ 8ACD ~                                    rl      h
 245+ 8ACD ~                                    sla     a
 246+ 8ACD ~                                    rl      l
 247+ 8ACD ~                                    rl      h
 248+ 8ACD ~                                    sla     a
 249+ 8ACD ~                                    rl      l
 250+ 8ACD ~                                    rl      h
 251+ 8ACD ~                                    sla     a
 252+ 8ACD ~                                    rl      l
 253+ 8ACD ~                                    rl      h
 254+ 8ACD ~                                    sla     a
 255+ 8ACD ~                                    rl      l
 256+ 8ACD ~                                    rl      h
 257+ 8ACD                                      ENDM
 258+ 8ACD
 259+ 8ACD              SunShiftRight           MACRO   reglo, reghi, regsgn
 260+ 8ACD ~                                    ld      a,regsgn
 261+ 8ACD ~                                    srl     a
 262+ 8ACD ~                                    rr      reghi
 263+ 8ACD ~                                    rr      reglo
 264+ 8ACD ~                                    ld      regsgn,a
 265+ 8ACD                                      ENDM
 266+ 8ACD
 267+ 8ACD              ;SunShiftPosTo15Bit:     ld      de,(SBnKzlo)
 268+ 8ACD              ;                        ld      a,(SBnKzsgn)
 269+ 8ACD              ;                        push    af
 270+ 8ACD              ;                        and     SignMask8Bit
 271+ 8ACD              ;                        ld      iyl,a
 272+ 8ACD              ;                        ld      hl,(SBnKxlo)
 273+ 8ACD              ;                        ld      a,(SBnKxsgn)
 274+ 8ACD              ;                        push    af
 275+ 8ACD              ;                        and     SignMask8Bit
 276+ 8ACD              ;                        ld      ixl,a
 277+ 8ACD              ;                        ld      bc,(SBnKylo)
 278+ 8ACD              ;                        ld      a,(SBnKysgn)
 279+ 8ACD              ;                        and     SignMask8Bit
 280+ 8ACD              ;                        push    af
 281+ 8ACD              ;                        ld      iyh,a
 282+ 8ACD              ;.ShiftLoop:             ld      a,iyh
 283+ 8ACD              ;                        or      iyl
 284+ 8ACD              ;                        or      ixl
 285+ 8ACD              ;                        jr      z,.ShiftBit15
 286+ 8ACD              ;.ShiftZ:                SunShiftRight iyl, d, e
 287+ 8ACD              ;.ShiftX:                SunShiftRight ixl, h, l
 288+ 8ACD              ;.ShiftY:                SunShiftRight ixh, b, c
 289+ 8ACD              ;                        jr      .ShipLoop
 290+ 8ACD              ;.ShiftBit15:            ld      a,iyh
 291+ 8ACD              ;                        or      iyl
 292+ 8ACD              ;                        or      ixl
 293+ 8ACD              ;                        jr      z,.CompletedShift
 294+ 8ACD              ;.ShiftZ:                SunShiftRight iyl, d, e
 295+ 8ACD              ;.ShiftX:                SunShiftRight ixl, h, l
 296+ 8ACD              ;.ShiftY:                SunShiftRight ixh, b, c             ; finally shift to 15 bits so we can get the sign back
 297+ 8ACD              ;.CompletedShift:        pop     af                          ; get ysgn
 298+ 8ACD              ;                        and     SignOnly8Bit
 299+ 8ACD              ;                        or      b
 300+ 8ACD              ;                        ld      b,a
 301+ 8ACD              ;                        pop     af                          ; get xsgn
 302+ 8ACD              ;                        and     SignOnly8Bit
 303+ 8ACD              ;                        or      h
 304+ 8ACD              ;                        ld      h,a
 305+ 8ACD              ;                        pop     af                          ; get zsgn
 306+ 8ACD              ;                        and     SignOnly8Bit
 307+ 8ACD              ;                        or      d
 308+ 8ACD              ;                        ld      d,a
 309+ 8ACD              ;                        ret
 310+ 8ACD              ;
 311+ 8ACD ED 5B 17 C0  ScaleSunPos:            ld      de,(SBnKzhi)                ; de = abs z & save sign on stack
 312+ 8AD1 7A                                   ld      a,d                         ; .
 313+ 8AD2 F5                                   push    af                          ; .
 314+ 8AD3 E6 7F                                and     SignMask8Bit                ; .
 315+ 8AD5 57                                   ld      d,a                         ; .
 316+ 8AD6 2A 11 C0                             ld      hl,(SBnKxhi)                ; hl = abs x & save sign on stack
 317+ 8AD9 7C                                   ld      a,h                         ; .
 318+ 8ADA F5                                   push    af                          ; .
 319+ 8ADB E6 7F                                and     SignMask8Bit                ; .
 320+ 8ADD 67                                   ld      h,a                         ; .
 321+ 8ADE ED 4B 14 C0                          ld      bc,(SBnKyhi)                ; bc = abs y & save sign on stack
 322+ 8AE2 78                                   ld      a,b                         ; .
 323+ 8AE3 F5                                   push    af                          ; .
 324+ 8AE4 E6 7F                                and     SignMask8Bit                ; .
 325+ 8AE6 47                                   ld      b,a                         ; .
 326+ 8AE7 78           .ShiftLoop:             ld      a,b                         ; Scale down to an 8 bit value
 327+ 8AE8 B2                                   or      d                           ; .
 328+ 8AE9 B4                                   or      h                           ; .
 329+ 8AEA 28 0E                                jr      z,.Shifted                  ; .
 330+ 8AEC                                      ShiftBCRight1                       ; .
 330+ 8AEC CB 38       >			   srl b
 330+ 8AEE CB 19       >			   rr  c
 331+ 8AF0                                      ShiftHLRight1                       ; .
 331+ 8AF0 CB 3C       >			   srl h
 331+ 8AF2 CB 1D       >			   rr  l
 332+ 8AF4                                      ShiftDERight1                       ; .
 332+ 8AF4 CB 3A       >			   srl d
 332+ 8AF6 CB 1B       >			   rr  e
 333+ 8AF8 18 ED                                jr      .ShiftLoop
 334+ 8AFA 79           .Shifted:               ld      a,c                         ; See if we already have 7 bit
 335+ 8AFB B5                                   or      l                           ;
 336+ 8AFC B3                                   or      e                           ;
 337+ 8AFD E6 80                                and     $80                         ;
 338+ 8AFF 28 0C                                jr      z,.NoAdditionalShift        ;
 339+ 8B01                                      ShiftBCRight1                       ; we want 7 bit
 339+ 8B01 CB 38       >			   srl b
 339+ 8B03 CB 19       >			   rr  c
 340+ 8B05                                      ShiftHLRight1                       ; to acommodate the sign
 340+ 8B05 CB 3C       >			   srl h
 340+ 8B07 CB 1D       >			   rr  l
 341+ 8B09                                      ShiftDERight1                       ; .
 341+ 8B09 CB 3A       >			   srl d
 341+ 8B0B CB 1B       >			   rr  e
 342+ 8B0D F1           .NoAdditionalShift:     pop     af                          ; get ysgn
 343+ 8B0E E6 80                                and     SignOnly8Bit                ;
 344+ 8B10 47                                   ld      b,a                         ; bc = shifted signed Y
 345+ 8B11 F1                                   pop     af                          ; get xsgn
 346+ 8B12 E6 80                                and     SignOnly8Bit                ;
 347+ 8B14 67                                   ld      h,a                         ; hl = shifted signed X
 348+ 8B15 F1                                   pop     af                          ; get zsgn
 349+ 8B16 E6 80                                and     SignOnly8Bit                ;
 350+ 8B18 57                                   ld      d,a                         ; de = shifted signed Z
 351+ 8B19 C9                                   ret
 352+ 8B1A
 353+ 8B1A
 354+ 8B1A              ;compass sun
 355+ 8B1A              ;            if value is still 24 bit
 356+ 8B1A              ;                copy xhi/xsgn y and z to xxx15 ([2 1 0 ] [ 5 4 3] [ 8 7 6 ]
 357+ 8B1A              ;                normalise vector (note this assumes sun is just sign byte+ 2 bytes)
 358+ 8B1A              ;                tempk39 = OR 3 low bytes
 359+ 8B1A              ;                tempkA = OR 3 high bytes
 360+ 8B1A              ;                 TAL2:    repeat
 361+ 8B1A              ;                             asl tempka tempk39
 362+ 8B1A              ;                             exit if carry set
 363+ 8B1A              ;                             x coord << 1
 364+ 8B1A              ;                             y corrd << 1
 365+ 8B1A              ;                             z coord << 1
 366+ 8B1A              ;                          until carry clear
 367+ 8B1A              ;                 TA2:     shift x y and z right one and put sign bit in from sign bytes
 368+ 8B1A              ;                          now XX15 holds sign + 7 bit bytes maximused for coords
 369+ 8B1A              ;                          RQ = AP = X ^ 2
 370+ 8B1A              ;                          TP = AP = Y ^ 2
 371+ 8B1A              ;                          RQ = RQ + TP
 372+ 8B1A              ;                          TP = AP = Z ^ 2
 373+ 8B1A              ;                          RQ = RQ + TP
 374+ 8B1A              ;                          Q = SQRT (RQ)
 375+ 8B1A              ;                          for each coord - A = A/Q * 3/ 8
 376+ 8B1A              ;
 377+ 8B1A              ;
 378+ 8B1A
 379+ 8B1A ED 5B 17 C0  UpscaleSunPosition:     ld      de,(SBnKzhi)                ; de = abs z & save sign on stack
 380+ 8B1E 2A 11 C0                             ld      hl,(SBnKxhi)                ; hl = abs x & save sign on stack
 381+ 8B21 ED 4B 14 C0                          ld      bc,(SBnKyhi)                ; bc = abs y & save sign on stack
 382+ 8B25 7A                                   ld      a,d
 383+ 8B26 E6 80                                and     SignOnly8Bit
 384+ 8B28 CB 3F                                srl     a
 385+ 8B2A FD 6F                                ld      iyl,a
 386+ 8B2C 7C                                   ld      a,h
 387+ 8B2D E6 80                                and     SignOnly8Bit
 388+ 8B2F FD B5                                or      iyl
 389+ 8B31 CB 3F                                srl     a
 390+ 8B33 78                                   ld      a,b
 391+ 8B34 E6 80                                and     SignOnly8Bit
 392+ 8B36 FD B5                                or      iyl
 393+ 8B38 FD 6F                                ld      iyl,a                       ; IYL now equals YXH00000 where letters = sign bits
 394+ 8B3A                                      ClearSignBit d
 394+ 8B3A 7A          >                        ld      a,d
 394+ 8B3B E6 7F       >                        and     SignMask8Bit
 394+ 8B3D 57          >                        ld      d,a
 395+ 8B3E                                      ClearSignBit h
 395+ 8B3E 7C          >                        ld      a,h
 395+ 8B3F E6 7F       >                        and     SignMask8Bit
 395+ 8B41 67          >                        ld      h,a
 396+ 8B42                                      ClearSignBit b
 396+ 8B42 78          >                        ld      a,b
 396+ 8B43 E6 7F       >                        and     SignMask8Bit
 396+ 8B45 47          >                        ld      b,a
 397+ 8B46 78                                   ld      a,b
 398+ 8B47 B3                                   or      e
 399+ 8B48 B4                                   or      h
 400+ 8B49 B5                                   or      l
 401+ 8B4A B0                                   or      b
 402+ 8B4B B1                                   or      c
 403+ 8B4C 28 41                                jr      z, .Setto1                 ; to prevent and infinite loop in upscale if all zero
 404+ 8B4E 7A                                   ld      a,d
 405+ 8B4F B3                                   or      e
 406+ 8B50 B4                                   or      h
 407+ 8B51 CB 27                                sla     a
 408+ 8B53 38 15                                jr      c,.DoneCalc
 409+ 8B55 28 13                                jr      z,.DoneCalc
 410+ 8B57              .UpscaleLoop:           ShiftDELeft1
 410+ 8B57 CB 23       >			   sla e
 410+ 8B59 CB 12       >			   rl  d
 411+ 8B5B                                      ShiftHLLeft1
 411+ 8B5B CB 25       >			   sla l
 411+ 8B5D CB 14       >			   rl  h
 412+ 8B5F                                      ShiftBCLeft1
 412+ 8B5F CB 21       >			   sla c
 412+ 8B61 CB 10       >			   rl  b
 413+ 8B63 CB 27                                sla     a
 414+ 8B65 38 03                                jr      c,.DoneCalc
 415+ 8B67 C3 57 8B                             jp      .UpscaleLoop
 416+ 8B6A              .DoneCalc               ShiftDERight1
 416+ 8B6A CB 3A       >			   srl d
 416+ 8B6C CB 1B       >			   rr  e
 417+ 8B6E                                      ShiftHLRight1
 417+ 8B6E CB 3C       >			   srl h
 417+ 8B70 CB 1D       >			   rr  l
 418+ 8B72                                      ShiftBCRight1
 418+ 8B72 CB 38       >			   srl b
 418+ 8B74 CB 19       >			   rr  c
 419+ 8B76 5A           .NowSetResultInLowByte: ld      e,d
 420+ 8B77 6C                                   ld      l,h
 421+ 8B78 48                                   ld      c,b
 422+ 8B79 FD 7D                                ld      a,iyl
 423+ 8B7B E6 80                                and     SignOnly8Bit
 424+ 8B7D 47                                   ld      b,a
 425+ 8B7E FD 7D                                ld      a,iyl
 426+ 8B80 CB 27                                sla     a
 427+ 8B82 FD 6F                                ld      iyl,a
 428+ 8B84 E6 80                                and     SignOnly8Bit
 429+ 8B86 67                                   ld      h,a
 430+ 8B87 FD 7D                                ld      a,iyl
 431+ 8B89 CB 27                                sla     a
 432+ 8B8B E6 80                                and     SignOnly8Bit
 433+ 8B8D 57                                   ld      d,a
 434+ 8B8E C9                                   ret
 435+ 8B8F 3E 01        .Setto1:                ld      a,1
 436+ 8B91 4F                                   ld      c,a
 437+ 8B92 5F                                   ld      e,a
 438+ 8B93 6F                                   ld      l,a
 439+ 8B94 FD 7D                                ld      a,iyl
 440+ 8B96 CB 27                                sla     a
 441+ 8B98 CB 27                                sla     a
 442+ 8B9A E6 80                                and     SignOnly8Bit
 443+ 8B9C B3                                   or      e
 444+ 8B9D 5F                                   ld      e,a
 445+ 8B9E C9                                   ret
 446+ 8B9F
 447+ 8B9F
 448+ 8B9F
 449+ 8B9F
 450+ 8B9F              UpdateCompassSun:       MMUSelectSun
 450+ 8B9F ED 91 56 53 >                     nextreg SunMMU,            BankSunData
 451+ 8BA3 CD CD 8A                             call    ScaleSunPos                 ; get as 7 bit signed
 452+ 8BA6 C5 D5 E5 D5                          push    bc,,de,,hl,,de              ; save to stack Y, Z, X and copy of X scaled and signed hihg = sign, low = 7 bit value
 453+ 8BAA 51           .normaliseYSqr:         ld      d,c                         ; bc = y ^ 2
 454+ 8BAB 59                                   ld      e,c                         ; .
 455+ 8BAC ED 30                                mul                                 ; .
 456+ 8BAE 42 4B                                ld      bc,de                       ; .
 457+ 8BB0 55           .normaliseXSqr:         ld      d,l                         ; hl = x ^ 2
 458+ 8BB1 5D                                   ld      e,l                         ; .
 459+ 8BB2 ED 30                                mul                                 ; .
 460+ 8BB4 EB                                   ex      de,hl                       ; .
 461+ 8BB5 D1           .normaliseZSqr:         pop     de                          ; get saved from stack 2
 462+ 8BB6 53                                   ld      d,e                         ; de = z ^
 463+ 8BB7 ED 30                                mul                                 ; .
 464+ 8BB9 19           .normaliseSqrt:         add     hl,de                       ; hl = x^2 + y^2 + x^2
 465+ 8BBA 09                                   add     hl,bc
 466+ 8BBB EB                                   ex      de,hl
 467+ 8BBC CD 9C AA                             call    asm_sqrt                    ; (Q) = hl = sqrt (x^2 + y^2 + x^2)
 468+ 8BBF                                      ; if h <> 0 then more difficult
 469+ 8BBF 55                                   ld      d,l                         ; iyl = q
 470+ 8BC0 FD 6A                                ld      iyl,d                       ; .
 471+ 8BC2 E1           .NormaliseX:            pop     hl                          ; hl x scaled
 472+ 8BC3 7C                                   ld      a,h                         ; c = sign
 473+ 8BC4 E6 80                                and     SignOnly8Bit                ; .
 474+ 8BC6 4F                                   ld      c,a                         ; .
 475+ 8BC7 C5                                   push    bc                          ; save sign to stack
 476+ 8BC8 7D                                   ld      a,l                         ; a = 8 bit abs z
 477+ 8BC9 CD A1 AF                             call    AequAdivQmul96ABS              ; e = a /q * 96 (d was already loaded with q)
 478+ 8BCC 5F                                   ld      e,a                         ; .
 479+ 8BCD                                      EDiv10Inline                        ; a = e / 10
 479+ 8BCD 16 00       >                        ld      d,0
 479+ 8BCF 62 6B       >                        ld      hl,de
 479+ 8BD1 29          >                        add     hl,hl
 479+ 8BD2 19          >                        add     hl,de
 479+ 8BD3 29          >                        add     hl,hl
 479+ 8BD4 29          >                        add     hl,hl
 479+ 8BD5 19          >                        add     hl,de
 479+ 8BD6 29          >                        add     hl,hl
 480+ 8BD7 7C                                   ld      a,h                         ; .
 481+ 8BD8 C1                                   pop     bc                          ; retrieve sign
 482+ 8BD9 FE 00                                cp      0
 483+ 8BDB 28 06                                jr      z,.DoneNormX                ; in case we end up with - 0
 484+ 8BDD CB 79                                bit     7,c                         ; if sign is negative then 2'c value
 485+ 8BDF 28 02                                jr      z,.DoneNormX
 486+ 8BE1 ED 44                                neg
 487+ 8BE3 DD 67        .DoneNormX:             ld      ixh,a                       ; ixh = (signed 2's c x /q * 96) / 10
 488+ 8BE5 FD 55        .NormaliseZ:            ld      d,iyl                       ; d = q
 489+ 8BE7 E1                                   pop     hl                          ; hl z scaled
 490+ 8BE8 7C                                   ld      a,h                         ; c = sign
 491+ 8BE9 E6 80                                and     SignOnly8Bit                ; .
 492+ 8BEB 4F                                   ld      c,a                         ; .
 493+ 8BEC C5                                   push    bc                          ; save sign to stack
 494+ 8BED 7D                                   ld      a,l                         ; e = a /q * 96
 495+ 8BEE CD A1 AF                             call    AequAdivQmul96ABS              ; .
 496+ 8BF1 5F                                   ld      e,a                         ; a = e / 10
 497+ 8BF2                                      EDiv10Inline                        ; .
 497+ 8BF2 16 00       >                        ld      d,0
 497+ 8BF4 62 6B       >                        ld      hl,de
 497+ 8BF6 29          >                        add     hl,hl
 497+ 8BF7 19          >                        add     hl,de
 497+ 8BF8 29          >                        add     hl,hl
 497+ 8BF9 29          >                        add     hl,hl
 497+ 8BFA 19          >                        add     hl,de
 497+ 8BFB 29          >                        add     hl,hl
 498+ 8BFC 7C                                   ld      a,h                         ; retrieve sign
 499+ 8BFD C1                                   pop     bc                          ; retrieve sign
 500+ 8BFE CB 79                                bit     7,c                         ; if sign is negative then 2'c value
 501+ 8C00 28 02                                jr      z,.DoneNormZ
 502+ 8C02 ED 44                                neg
 503+ 8C04 DD 6F        .DoneNormZ:             ld      ixl,a                       ; .
 504+ 8C06 FD 55        .NormaliseY:            ld      d,iyl                       ; d = q
 505+ 8C08 E1                                   pop     hl                          ; hl y scaled
 506+ 8C09 7C                                   ld      a,h                         ; c = sign
 507+ 8C0A E6 80                                and     SignOnly8Bit                ; .
 508+ 8C0C 4F                                   ld      c,a                         ; .
 509+ 8C0D C5                                   push    bc                          ; save sign to stack
 510+ 8C0E 7D                                   ld      a,l                         ; a = 8 bit signed z
 511+ 8C0F CD A1 AF                             call    AequAdivQmul96ABS           ; .
 512+ 8C12 5F                                   ld      e,a                         ; a = e / 10
 513+ 8C13                                      EDiv10Inline                        ; .
 513+ 8C13 16 00       >                        ld      d,0
 513+ 8C15 62 6B       >                        ld      hl,de
 513+ 8C17 29          >                        add     hl,hl
 513+ 8C18 19          >                        add     hl,de
 513+ 8C19 29          >                        add     hl,hl
 513+ 8C1A 29          >                        add     hl,hl
 513+ 8C1B 19          >                        add     hl,de
 513+ 8C1C 29          >                        add     hl,hl
 514+ 8C1D 7C                                   ld      a,h                         ; retrieve sign
 515+ 8C1E C1                                   pop     bc                          ; retrieve sign
 516+ 8C1F FE 00                                cp      0
 517+ 8C21 28 06                                jr      z,.DoneNormY                 ; in case we end up with - 0
 518+ 8C23 CB 79                                bit     7,c                         ; if sign is negative then 2'c value
 519+ 8C25 28 02                                jr      z,.DoneNormY
 520+ 8C27 ED 44                                neg                                 ;
 521+ 8C29 47           .DoneNormY:             ld      b,a                         ; result from Y
 522+ 8C2A DD 4C                                ld      c,ixh                       ; x = saved X
 523+ 8C2C              .SetSprite:             MMUSelectSpriteBank
 523+ 8C2C ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
 524+ 8C30 CD 05 E1                             call    compass_sun_move
 525+ 8C33 DD 7D                                ld      a,ixl
 526+ 8C35 CB 7F                                bit     7,a
 527+ 8C37 20 04                                jr      nz,.SunBehind
 528+ 8C39 CD 99 E1     .SunInfront:            call    show_compass_sun_infront
 529+ 8C3C C9                                   ret
 530+ 8C3D CD A4 E1     .SunBehind:             call    show_compass_sun_behind
 531+ 8C40 C9                                   ret
 532+ 8C41
 533+ 8C41              UpdateCompassStation:   MMUSelectShipBankN 0
 533+ 8C41 ED 91 57 00 >					 nextreg ShipModelMMU,	    0
 534+ 8C45
 535+ 8C45 CD CD 8A                             call    ScaleSunPos                 ; get as 7 bit signed
 536+ 8C48 C5 D5 E5 D5                          push    bc,,de,,hl,,de              ; save to stack Y, Z, X and copy of X scaled and signed hihg = sign, low = 7 bit value
 537+ 8C4C 51           .normaliseYSqr:         ld      d,c                         ; bc = y ^ 2
 538+ 8C4D 59                                   ld      e,c                         ; .
 539+ 8C4E ED 30                                mul                                 ; .
 540+ 8C50 42 4B                                ld      bc,de                       ; .
 541+ 8C52 55           .normaliseXSqr:         ld      d,l                         ; hl = x ^ 2
 542+ 8C53 5D                                   ld      e,l                         ; .
 543+ 8C54 ED 30                                mul                                 ; .
 544+ 8C56 EB                                   ex      de,hl                       ; .
 545+ 8C57 D1           .normaliseZSqr:         pop     de                          ; get saved from stack 2
 546+ 8C58 53                                   ld      d,e                         ; de = z ^
 547+ 8C59 ED 30                                mul                                 ; .
 548+ 8C5B 19           .normaliseSqrt:         add     hl,de                       ; hl = x^2 + y^2 + x^2
 549+ 8C5C 09                                   add     hl,bc
 550+ 8C5D EB                                   ex      de,hl
 551+ 8C5E CD 9C AA                             call    asm_sqrt                    ; (Q) = hl = sqrt (x^2 + y^2 + x^2)
 552+ 8C61                                      ; if h <> 0 then more difficult
 553+ 8C61 55                                   ld      d,l                         ; iyl = q
 554+ 8C62 FD 6A                                ld      iyl,d                       ; .
 555+ 8C64 E1           .NormaliseX:            pop     hl                          ; hl x scaled
 556+ 8C65 7C                                   ld      a,h                         ; c = sign
 557+ 8C66 E6 80                                and     SignOnly8Bit                ; .
 558+ 8C68 4F                                   ld      c,a                         ; .
 559+ 8C69 C5                                   push    bc                          ; save sign to stack
 560+ 8C6A 7D                                   ld      a,l                         ; a = 8 bit abs z
 561+ 8C6B CD A1 AF                             call    AequAdivQmul96ABS              ; e = a /q * 96 (d was already loaded with q)
 562+ 8C6E 5F                                   ld      e,a                         ; .
 563+ 8C6F                                      EDiv10Inline                        ; a = e / 10
 563+ 8C6F 16 00       >                        ld      d,0
 563+ 8C71 62 6B       >                        ld      hl,de
 563+ 8C73 29          >                        add     hl,hl
 563+ 8C74 19          >                        add     hl,de
 563+ 8C75 29          >                        add     hl,hl
 563+ 8C76 29          >                        add     hl,hl
 563+ 8C77 19          >                        add     hl,de
 563+ 8C78 29          >                        add     hl,hl
 564+ 8C79 7C                                   ld      a,h                         ; .
 565+ 8C7A C1                                   pop     bc                          ; retrieve sign
 566+ 8C7B FE 00                                cp      0
 567+ 8C7D 28 06                                jr      z,.DoneNormX                 ; in case we end up with - 0
 568+ 8C7F CB 79                                bit     7,c                         ; if sign is negative then 2'c value
 569+ 8C81 28 02                                jr      z,.DoneNormX
 570+ 8C83 ED 44                                neg
 571+ 8C85 DD 67        .DoneNormX:             ld      ixh,a                       ; ixh = (signed 2's c x /q * 96) / 10
 572+ 8C87 FD 55        .NormaliseZ:            ld      d,iyl                       ; d = q
 573+ 8C89 E1                                   pop     hl                          ; hl z scaled
 574+ 8C8A 7C                                   ld      a,h                         ; c = sign
 575+ 8C8B E6 80                                and     SignOnly8Bit                ; .
 576+ 8C8D 4F                                   ld      c,a                         ; .
 577+ 8C8E C5                                   push    bc                          ; save sign to stack
 578+ 8C8F 7D                                   ld      a,l                         ; e = a /q * 96
 579+ 8C90 CD A1 AF                             call    AequAdivQmul96ABS              ; .
 580+ 8C93 5F                                   ld      e,a                         ; a = e / 10
 581+ 8C94                                      EDiv10Inline                        ; .
 581+ 8C94 16 00       >                        ld      d,0
 581+ 8C96 62 6B       >                        ld      hl,de
 581+ 8C98 29          >                        add     hl,hl
 581+ 8C99 19          >                        add     hl,de
 581+ 8C9A 29          >                        add     hl,hl
 581+ 8C9B 29          >                        add     hl,hl
 581+ 8C9C 19          >                        add     hl,de
 581+ 8C9D 29          >                        add     hl,hl
 582+ 8C9E 7C                                   ld      a,h                         ; retrieve sign
 583+ 8C9F C1                                   pop     bc                          ; retrieve sign
 584+ 8CA0 CB 79                                bit     7,c                         ; if sign is negative then 2'c value
 585+ 8CA2 28 02                                jr      z,.DoneNormZ
 586+ 8CA4 ED 44                                neg
 587+ 8CA6 DD 6F        .DoneNormZ:             ld      ixl,a                       ; .
 588+ 8CA8 FD 55        .NormaliseY:            ld      d,iyl                       ; d = q
 589+ 8CAA E1                                   pop     hl                          ; hl y scaled
 590+ 8CAB 7C                                   ld      a,h                         ; c = sign
 591+ 8CAC E6 80                                and     SignOnly8Bit                ; .
 592+ 8CAE 4F                                   ld      c,a                         ; .
 593+ 8CAF C5                                   push    bc                          ; save sign to stack
 594+ 8CB0 7D                                   ld      a,l                         ; a = 8 bit signed z
 595+ 8CB1 CD A1 AF                             call    AequAdivQmul96ABS              ; .
 596+ 8CB4 5F                                   ld      e,a                         ; a = e / 10
 597+ 8CB5                                      EDiv10Inline                        ; .
 597+ 8CB5 16 00       >                        ld      d,0
 597+ 8CB7 62 6B       >                        ld      hl,de
 597+ 8CB9 29          >                        add     hl,hl
 597+ 8CBA 19          >                        add     hl,de
 597+ 8CBB 29          >                        add     hl,hl
 597+ 8CBC 29          >                        add     hl,hl
 597+ 8CBD 19          >                        add     hl,de
 597+ 8CBE 29          >                        add     hl,hl
 598+ 8CBF 7C                                   ld      a,h                         ; retrieve sign
 599+ 8CC0 C1                                   pop     bc                          ; retrieve sign
 600+ 8CC1 FE 00                                cp      0
 601+ 8CC3 28 06                                jr      z,.DoneNormY                 ; in case we end up with - 0
 602+ 8CC5 CB 79                                bit     7,c                         ; if sign is negative then 2'c value
 603+ 8CC7 28 02                                jr      z,.DoneNormY
 604+ 8CC9 ED 44                                neg
 605+ 8CCB 47           .DoneNormY:             ld      b,a                       ; .
 606+ 8CCC DD 4C                                ld      c,ixh
 607+ 8CCE              .SetSprite:             MMUSelectSpriteBank
 607+ 8CCE ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
 608+ 8CD2 CD 05 E1                             call    compass_sun_move
 609+ 8CD5 DD 7D                                ld      a,ixl
 610+ 8CD7 CB 7F                                bit     7,a
 611+ 8CD9 20 04                                jr      nz,.SunBehind
 612+ 8CDB CD 99 E1     .SunInfront:            call    show_compass_sun_infront
 613+ 8CDE C9                                   ret
 614+ 8CDF CD A4 E1     .SunBehind:             call    show_compass_sun_behind
 615+ 8CE2 C9                                   ret
 616+ 8CE3
 617+ 8CE3
 618+ 8CE3              UpdateScannerSun:       MMUSelectSun
 618+ 8CE3 ED 91 56 53 >                     nextreg SunMMU,            BankSunData
 619+ 8CE7                                      Shift24BitScan  SBnKyhi, SBnKylo
 619+ 8CE7 2A 14 C0    >                        ld      hl,(SBnKyhi)
 619+ 8CEA 44          >                        ld      b,h
 619+ 8CEB 7C          >                        ld      a,h
 619+ 8CEC E6 7F       >                        and     SignMask8Bit
 619+ 8CEE 67          >                        ld      h,a
 619+ 8CEF 3A 13 C0    >                        ld      a,(SBnKylo)
 619+ 8CF2 CB 27       >                        sla     a
 619+ 8CF4 CB 15       >                        rl      l
 619+ 8CF6 CB 14       >                        rl      h
 619+ 8CF8 CB 27       >                        sla     a
 619+ 8CFA CB 15       >                        rl      l
 619+ 8CFC CB 14       >                        rl      h
 619+ 8CFE CB 27       >                        sla     a
 619+ 8D00 CB 15       >                        rl      l
 619+ 8D02 CB 14       >                        rl      h
 619+ 8D04 CB 27       >                        sla     a
 619+ 8D06 CB 15       >                        rl      l
 619+ 8D08 CB 14       >                        rl      h
 619+ 8D0A CB 27       >                        sla     a
 619+ 8D0C CB 15       >                        rl      l
 619+ 8D0E CB 14       >                        rl      h
 619+ 8D10 CB 27       >                        sla     a
 619+ 8D12 CB 15       >                        rl      l
 619+ 8D14 CB 14       >                        rl      h
 620+ 8D16 3A 12 C0     .IsItInRange:           ld      a,(SBnKxsgn)                ; if the high byte is not
 621+ 8D19 21 15 C0                             ld      hl,SBnKysgn                 ; a sign only
 622+ 8D1C B6                                   or      (hl)                        ; then its too far away
 623+ 8D1D 21 18 C0                             ld      hl,SBnKzsgn                 ; for the scanner to draw
 624+ 8D20 B6                                   or      (hl)                        ; so rely on the compass
 625+ 8D21 E6 7F                                and     SignMask8Bit                ;
 626+ 8D23 C0                                   ret     nz                          ;
 627+ 8D24 2A 16 C0     .ItsInRange:            ld      hl,(SBnKzlo)                ; we will get unsigned values
 628+ 8D27 ED 5B 10 C0                          ld      de,(SBnKxlo)
 629+ 8D2B ED 4B 13 C0                          ld      bc,(SBnKylo)
 630+ 8D2F 7C                                   ld      a,h
 631+ 8D30 B2                                   or      d
 632+ 8D31 B0                                   or      b
 633+ 8D32 E6 C0                                and     %11000000
 634+ 8D34 C0                                   ret     nz                          ; if distance Hi > 64 on any ccord- off screen
 635+ 8D35 3A 12 C0     .MakeX2Compliment:      ld      a,(SBnKxsgn)
 636+ 8D38 CB 7F                                bit     7,a
 637+ 8D3A 28 04                                jr      z,.absXHi
 638+ 8D3C                                      NegD
 638+ 8D3C 7A          >                    ld      a,d
 638+ 8D3D ED 44       >                    neg
 638+ 8D3F 57          >                    ld      d,a
 639+ 8D40 7A           .absXHi:                ld      a,d
 640+ 8D41 C6 80                                add     ScannerX
 641+ 8D43 DD 67                                ld      ixh,a                       ; store adjusted X in ixh
 642+ 8D45 CB 3C        .ProcessZCoord:         srl     h
 643+ 8D47 CB 3C                                srl     h
 644+ 8D49 3A 18 C0     .MakeZ2Compliment:      ld      a,(SBnKzsgn)
 645+ 8D4C CB 7F                                bit     7,a
 646+ 8D4E 28 04                                jr      z,.absZHi
 647+ 8D50                                      NegH
 647+ 8D50 7C          >                    ld      a,h
 647+ 8D51 ED 44       >                    neg
 647+ 8D53 67          >                    ld      h,a
 648+ 8D54 3E AB        .absZHi:                ld      a,ScannerY
 649+ 8D56 94                                   sub     h
 650+ 8D57 FD 67                                ld      iyh,a                       ; make iyh adjusted Z = row on screen
 651+ 8D59 CB 38        .ProcessStickLength:    srl     b                           ; divide b by 2
 652+ 8D5B 20 0B                                jr      nz,.StickHasLength
 653+ 8D5D FD 7C        .Stick0Length:          ld      a,iyh                       ; abs stick end is row - length
 654+ 8D5F FD 6F                                ld      iyl,a
 655+ 8D61                                      MMUSelectLayer2
 655+ 8D61 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 656+ 8D65 C3 90 8D                             jp      .NoStick
 657+ 8D68 3A 15 C0     .StickHasLength:        ld      a,(SBnKysgn)                ; if b  =  0 then no line
 658+ 8D6B CB 7F                                bit     7,a
 659+ 8D6D 28 04                                jr      z,.absYHi
 660+ 8D6F                                      NegB
 660+ 8D6F 78          >                    ld      a,b
 660+ 8D70 ED 44       >                    neg
 660+ 8D72 47          >                    ld      b,a
 661+ 8D73 FD 7C        .absYHi:                ld      a,iyh
 662+ 8D75 90           .SetStickPos:           sub     b
 663+ 8D76                                      JumpIfALTNusng ScannerBottom, .StickOnScreen
 663+ 8D76 FE BE       >                        cp      ScannerBottom
 663+ 8D78 DA 7D 8D    >                        jp		c, .StickOnScreen
 664+ 8D7B 3E BE                                ld      a,ScannerBottom
 665+ 8D7D FD 6F        .StickOnScreen:         ld      iyl,a                       ; iyh is again stick end point
 666+ 8D7F DD 6F                                ld      ixl,a
 667+ 8D81 FD 44                                ld      b,iyh                       ; from row
 668+ 8D83 DD 4C                                ld      c,ixh                       ; from col
 669+ 8D85 FD 55                                ld      d,iyl                       ; to row
 670+ 8D87 1E B4                                ld      e,L2SunScanner
 671+ 8D89                                      MMUSelectLayer2
 671+ 8D89 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 672+ 8D8D CD 0B E3                             call    l2_draw_vert_line_to
 673+ 8D90 FD 45        .NoStick:               ld      b,iyl                       ; row
 674+ 8D92 DD 4C                                ld      c,ixh                       ; col
 675+ 8D94 3E FC                                ld      a,L2SunScannerBright
 676+ 8D96 CD FF E0                             call    l2_plot_pixel
 677+ 8D99 FD 45                                ld      b,iyl
 678+ 8D9B DD 4C                                ld      c,ixh
 679+ 8D9D 0C                                   inc     c
 680+ 8D9E 3E FC                                ld      a,L2SunScannerBright
 681+ 8DA0 CD FF E0                             call    l2_plot_pixel
 682+ 8DA3 C9                                   ret
 683+ 8DA4
 684+ 8DA4              ; This will do a planet update if we are not in space station range
 685+ 8DA4              UpdateScannerPlanet:
 686+ 8DA4
 687+ 8DA4              ; As the space station is always ship 0 then we can just use the scanner
 688+ 8DA4
 689+ 8DA4              ; This will go though all the universe ship data banks and plot, for now we will just work on one bank
 690+ 8DA4 3A 35 C0     UpdateScannerShip:      ld      a,(UBnKexplDsp)             ; if bit 4 is clear then ship should not be drawn
 691+ 8DA7 CB 67                                bit     4,a                         ; .
 692+ 8DA9                                      ;DEBUG ret     z                           ; .
 693+ 8DA9 3A 22 C3                             ld      a,(ShipTypeAddr)            ; if its a planet or sun, do not display
 694+ 8DAC CB 7F                                bit     7,a
 695+ 8DAE C0                                   ret     nz
 696+ 8DAF              ; DEBUG Add in station types later
 697+ 8DAF 2A 12 C0     .NotMissile:            ld      hl,(UBnKzlo)
 698+ 8DB2 ED 5B 0C C0                          ld      de,(UBnKxlo)
 699+ 8DB6 ED 4B 0F C0                          ld      bc,(UBnKylo)
 700+ 8DBA 7C                                   ld      a,h
 701+ 8DBB B2                                   or      d
 702+ 8DBC B0                                   or      b
 703+ 8DBD E6 C0                                and     %11000000
 704+ 8DBF C0                                   ret     nz                          ; if distance Hi > 64 on any ccord- off screen
 705+ 8DC0 3A 0E C0     .MakeX2Compliment:      ld      a,(UBnKxsgn)
 706+ 8DC3 CB 7F                                bit     7,a
 707+ 8DC5 28 04                                jr      z,.absXHi
 708+ 8DC7                                      NegD
 708+ 8DC7 7A          >                    ld      a,d
 708+ 8DC8 ED 44       >                    neg
 708+ 8DCA 57          >                    ld      d,a
 709+ 8DCB 7A           .absXHi:                ld      a,d
 710+ 8DCC C6 80                                add     ScannerX
 711+ 8DCE DD 67                                ld      ixh,a                       ; store adjusted X in ixh
 712+ 8DD0 CB 3C        .ProcessZCoord:         srl     h
 713+ 8DD2 CB 3C                                srl     h
 714+ 8DD4 3A 14 C0     .MakeZ2Compliment:      ld      a,(UBnKzsgn)
 715+ 8DD7 CB 7F                                bit     7,a
 716+ 8DD9 28 04                                jr      z,.absZHi
 717+ 8DDB                                      NegH
 717+ 8DDB 7C          >                    ld      a,h
 717+ 8DDC ED 44       >                    neg
 717+ 8DDE 67          >                    ld      h,a
 718+ 8DDF 3E AB        .absZHi:                ld      a,ScannerY
 719+ 8DE1 94                                   sub     h
 720+ 8DE2 FD 67                                ld      iyh,a                       ; make iyh adjusted Z = row on screen
 721+ 8DE4 CB 38        .ProcessStickLength:    srl     b                           ; divide b by 2
 722+ 8DE6 20 19                                jr      nz,.StickHasLength
 723+ 8DE8 FD 7C        .Stick0Length:          ld      a,iyh                       ; abs stick end is row - length
 724+ 8DEA FD 6F                                ld      iyl,a
 725+ 8DEC DD 7D                                ld      a,ixl
 726+ 8DEE                                      GetShipColorBright
 726+ 8DEE 3A 22 C3    >                        ld      a,(ShipTypeAddr)
 726+ 8DF1 CB 27       >                        sla     a                            ; as its byte pairs * 2
 726+ 8DF3 3C          >                        inc     a
 726+ 8DF4 21 C3 8A    >                        ld      hl,ScannerColourTable
 726+ 8DF7 ED 31       >                        add     hl,a
 726+ 8DF9 7E          >                        ld      a,(hl)
 727+ 8DFA                                      MMUSelectLayer2
 727+ 8DFA ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 728+ 8DFE C3 38 8E                             jp      .NoStick
 729+ 8E01 3A 11 C0     .StickHasLength:        ld      a,(UBnKysgn)                ; if b  =  0 then no line
 730+ 8E04 CB 7F                                bit     7,a
 731+ 8E06 28 04                                jr      z,.absYHi
 732+ 8E08                                      NegB
 732+ 8E08 78          >                    ld      a,b
 732+ 8E09 ED 44       >                    neg
 732+ 8E0B 47          >                    ld      b,a
 733+ 8E0C FD 7C        .absYHi:                ld      a,iyh
 734+ 8E0E 90           .SetStickPos:           sub     b
 735+ 8E0F                                      JumpIfALTNusng ScannerBottom, .StickOnScreen
 735+ 8E0F FE BE       >                        cp      ScannerBottom
 735+ 8E11 DA 16 8E    >                        jp		c, .StickOnScreen
 736+ 8E14 3E BE                                ld      a,ScannerBottom
 737+ 8E16 FD 6F        .StickOnScreen:         ld      iyl,a                       ; iyh is again stick end point
 738+ 8E18                                      GetShipColor
 738+ 8E18 3A 22 C3    >                        ld      a,(ShipTypeAddr)
 738+ 8E1B CB 27       >                        sla     a                            ; as its byte pairs * 2
 738+ 8E1D 21 C3 8A    >                        ld      hl,ScannerColourTable
 738+ 8E20 ED 31       >                        add     hl,a
 738+ 8E22 7E          >                        ld      a,(hl)
 739+ 8E23 DD 6F                                ld      ixl,a
 740+ 8E25 FD 44                                ld      b,iyh                       ; from row
 741+ 8E27 DD 4C                                ld      c,ixh                       ; from col
 742+ 8E29 FD 55                                ld      d,iyl                       ; to row
 743+ 8E2B DD 5D                                ld      e,ixl                       ; colur will only be green or yellow for now
 744+ 8E2D E5                                   push    hl
 745+ 8E2E                                      MMUSelectLayer2
 745+ 8E2E ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 746+ 8E32 CD 0B E3                             call    l2_draw_vert_line_to
 747+ 8E35 E1                                   pop     hl
 748+ 8E36 23                                   inc     hl
 749+ 8E37 7E                                   ld      a,(hl)
 750+ 8E38 FD 45        .NoStick:               ld      b,iyl                       ; row
 751+ 8E3A DD 4C                                ld      c,ixh                       ; col
 752+ 8E3C F5                                   push    af
 753+ 8E3D CD FF E0                             call    l2_plot_pixel
 754+ 8E40 F1                                   pop     af
 755+ 8E41 FD 45                                ld      b,iyl
 756+ 8E43 DD 4C                                ld      c,ixh
 757+ 8E45 0C                                   inc     c
 758+ 8E46 CD FF E0                             call    l2_plot_pixel
 759+ 8E49 C9                                   ret
 760+ 8E4A
 761+ 8E4A
# file closed: ./Views/ConsoleDrawing.asm
 982  8E4A                          INCLUDE "./Tables/message_queue.asm"
# file opened: ./Tables/message_queue.asm
   1+ 8E4A
   2+ 8E4A
   3+ 8E4A              ResetMessageQueue:      ZeroA
   3+ 8E4A AF          >                        xor a
   4+ 8E4B 32 43 98                             ld      (MessageCount),a
   5+ 8E4E 32 44 98                             ld      (MessageCurrent),a
   6+ 8E51 21 47 98                             ld      hl,MessageQueue
   7+ 8E54 11 45 98                             ld      de,MessageIndex
   8+ 8E57 06 05                                ld      b,5
   9+ 8E59 7D           .ClearMessageIndexs:    ld      a,l                                 ; Wipe out the indexes to all the data
  10+ 8E5A 12                                   ld      (de),a                              ;
  11+ 8E5B 13                                   inc     de                                  ;
  12+ 8E5C 7C                                   ld      a,h                                 ;
  13+ 8E5D 12                                   ld      (de),a                              ;
  14+ 8E5E 13                                   inc     de                                  ;
  15+ 8E5F 3E 21                                ld      a,MESSAGESIZE                       ;
  16+ 8E61 ED 31                                add     hl,a                                ;
  17+ 8E63 10 F4                                djnz    .ClearMessageIndexs                 ;
  18+ 8E65 21 47 98     .ClearText:             ld      hl,MessageQueue
  19+ 8E68 11 AA 00                             ld      de,(MAXMESSAGES * MESSAGESIZE) + MAXMESSAGES    ; MessageQueue + MessageTimeout
  20+ 8E6B 3E 00                                ld      a,0
  21+ 8E6D CD 28 95                             call	memfill_dma
  22+ 8E70 C9                                   ret
  23+ 8E71
  24+ 8E71              ; Message to enqeue is a string held at DE that must be terminated in \0
  25+ 8E71              ;                                       IYH = timer for message
  26+ 8E71 3A 43 98     EnqueMessage:           ld      a,(MessageCount)                    ; Maximum message count check
  27+ 8E74                                      ReturnIfAGTENusng    MAXMESSAGES            ; we do not enque if queue is full
  27+ 8E74 FE 05       >                        cp    MAXMESSAGES
  27+ 8E76 D0          >                        ret	 nc
  28+ 8E77 3C                                   inc     a
  29+ 8E78 32 43 98                             ld      (MessageCount),a                    ; get ready for next message
  30+ 8E7B 4F           .AddMessage:            ld      c,a
  31+ 8E7C 3A 44 98                             ld      a,(MessageCurrent)                  ; a = current message id + count + 1
  32+ 8E7F 81                                   add     c                                   ;
  33+ 8E80                                      JumpIfALTNusng MAXMESSAGES, .ReadyToAdd     ; a = a modulus 5 (note we can only hit 5 messages
  33+ 8E80 FE 05       >                        cp      MAXMESSAGES
  33+ 8E82 DA 87 8E    >                        jp		c, .ReadyToAdd
  34+ 8E85 D6 05        .CircularQueue:         sub     MAXMESSAGES                         ; so only need 1 cycle of modulus
  35+ 8E87 21 EC 98     .ReadyToAdd:            ld      hl,MessageTimeout                   ; write out message display time
  36+ 8E8A ED 31                                add     hl,a                                ; as some may be brief messages
  37+ 8E8C 4F                                   ld      c,a                                 ;
  38+ 8E8D FD 7C                                ld      a,iyh                               ;
  39+ 8E8F 77                                   ld      (hl),a                              ;
  40+ 8E90 79                                   ld      a,c                                 ; get back index
  41+ 8E91 21 45 98                             ld      hl,MessageIndex
  42+ 8E94                                      HLEquAddrAtHLPlusA                          ; hl = target location for message
  42+ 8E94 CB 27       >                    sla         a
  42+ 8E96 ED 31       >                    add         hl,a
  42+ 8E98 7E          >                    ld          a,(hl)
  42+ 8E99 23          >                    inc         hl
  42+ 8E9A 66          >                    ld          h,(hl)
  42+ 8E9B 6F          >                    ld          l,a
  43+ 8E9C EB                                   ex      de,hl                               ; de = destination, hl = message
  44+ 8E9D                                      ldCopyTextAtHLtoDE                          ; copy over text as we have done the rest
  44+ 8E9D 7E          >.CopyLoop:              ld      a,(hl)
  44+ 8E9E 12          >                        ld      (de),a
  44+ 8E9F FE 00       >                        cp      0
  44+ 8EA1 CA A8 8E    >                        jp      z,.DoneCopy
  44+ 8EA4 23          >                        inc     hl
  44+ 8EA5 13          >                        inc     de
  44+ 8EA6 18 F5       >                        jr      .CopyLoop
  44+ 8EA8             >.DoneCopy:
  45+ 8EA8 C9                                   ret
  46+ 8EA9
  47+ 8EA9 3A 44 98     UpdateMessageTimer:     ld      a,(MessageCurrent)
  48+ 8EAC 21 EC 98                             ld      hl,MessageTimeout
  49+ 8EAF ED 31                                add     hl,a
  50+ 8EB1 7E                                   ld      a,(hl)
  51+ 8EB2 3D                                   dec     a
  52+ 8EB3 28 02                                jr      z,.UpdateQueue
  53+ 8EB5 77           .UpdateTimer            ld      (hl),a
  54+ 8EB6 C9                                   ret
  55+ 8EB7 77           .UpdateQueue:           ld      (hl),a
  56+ 8EB8 21 43 98                             ld      hl,MessageCount
  57+ 8EBB 35                                   dec     (hl)
  58+ 8EBC 3A 44 98                             ld      a,(MessageCurrent)
  59+ 8EBF 23                                   inc     hl
  60+ 8EC0                                      JumpIfALTNusng MAXMESSAGES, .ReadyToUpdate
  60+ 8EC0 FE 05       >                        cp      MAXMESSAGES
  60+ 8EC2 DA C6 8E    >                        jp		c, .ReadyToUpdate
  61+ 8EC5              .CircularQueue:         ZeroA
  61+ 8EC5 AF          >                        xor a
  62+ 8EC6 32 44 98     .ReadyToUpdate          ld      (MessageCurrent),a
  63+ 8EC9 C9                                   ret
  64+ 8ECA
  65+ 8ECA 3A 43 98     DisplayCurrentMessage:  ld      a,(MessageCount)
  66+ 8ECD                                      ReturnIfAIsZero
  66+ 8ECD A7          >                        and     a
  66+ 8ECE C8          >                        ret     z
  67+ 8ECF 3A 44 98                             ld      a,(MessageCurrent)
  68+ 8ED2 21 45 98                             ld      hl,MessageIndex
  69+ 8ED5                                      HLEquAddrAtHLPlusA
  69+ 8ED5 CB 27       >                    sla         a
  69+ 8ED7 ED 31       >                    add         hl,a
  69+ 8ED9 7E          >                    ld          a,(hl)
  69+ 8EDA 23          >                    inc         hl
  69+ 8EDB 66          >                    ld          h,(hl)
  69+ 8EDC 6F          >                    ld          l,a
  70+ 8EDD                                      MMUSelectLayer1
  70+ 8EDD ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
  71+ 8EE1 11 01 00                             ld      de,MESSAGELINE
  72+ 8EE4 CD 15 E1                             call    l1_print_at_wrap
  73+ 8EE7 C9                                   ret
  74+ 8EE8
  75+ 8EE8              HyperSpaceMessage:      MMUSelectLayer1
  75+ 8EE8 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
  76+ 8EEC 11 F9 84     .DisplayHyperCountDown: ld      de,Hyp_to
  77+ 8EEF 21 3D A6                             ld      hl,name_expanded
  78+ 8EF2                                      ldCopyTextAtHLtoDE
  78+ 8EF2 7E          >.CopyLoop:              ld      a,(hl)
  78+ 8EF3 12          >                        ld      (de),a
  78+ 8EF4 FE 00       >                        cp      0
  78+ 8EF6 CA FD 8E    >                        jp      z,.DoneCopy
  78+ 8EF9 23          >                        inc     hl
  78+ 8EFA 13          >                        inc     de
  78+ 8EFB 18 F5       >                        jr      .CopyLoop
  78+ 8EFD             >.DoneCopy:
  79+ 8EFD AF           .DoneName:              xor     a
  80+ 8EFE 12                                   ld      (de),a
  81+ 8EFF 32 15 85                             ld      (Hyp_message+31),a      ; max out at 32 characters
  82+ 8F02 21 F6 84     .CentreJustify:         ld      hl,Hyp_message
  83+ 8F05                                      HalfLengthHL
  83+ 8F05 06 00       >                        ld      b,0
  83+ 8F07 7E          >.CountLenLoop:          ld      a,(hl)
  83+ 8F08 FE 00       >                        cp      0
  83+ 8F0A 28 04       >                        jr      z,.DoneCount
  83+ 8F0C 04          >                        inc     b
  83+ 8F0D 23          >                        inc     hl
  83+ 8F0E 18 F7       >                        jr      .CountLenLoop
  83+ 8F10 3E 20       >.DoneCount:             ld      a,32
  83+ 8F12 90          >                        sub     b
  83+ 8F13 CB 2F       >                        sra     a
  84+ 8F15 21 30 85                             ld      hl,Hyp_centeredTarget
  85+ 8F18                                      ldClearTextLoop 32
  85+ 8F18 47          >                        ld      b,a
  85+ 8F19 3E 20       >                        ld      a,32
  85+ 8F1B 77          >.ClearLoop:             ld      (hl),a
  85+ 8F1C 23          >                        inc     hl
  85+ 8F1D 10 FC       >                        djnz    .ClearLoop
  86+ 8F1F EB                                   ex      de,hl
  87+ 8F20 21 F6 84                             ld      hl,Hyp_message
  88+ 8F23                                      ldCopyTextAtHLtoDE
  88+ 8F23 7E          >.CopyLoop:              ld      a,(hl)
  88+ 8F24 12          >                        ld      (de),a
  88+ 8F25 FE 00       >                        cp      0
  88+ 8F27 CA 2E 8F    >                        jp      z,.DoneCopy
  88+ 8F2A 23          >                        inc     hl
  88+ 8F2B 13          >                        inc     de
  88+ 8F2C 18 F5       >                        jr      .CopyLoop
  88+ 8F2E             >.DoneCopy:
  89+ 8F2E                                      ZeroA
  89+ 8F2E AF          >                        xor a
  90+ 8F2F 32 50 85                             ld      (Hyp_centeredEol),a
  91+ 8F32 21 2C 85                             ld      hl,Hyp_counter           ; clear counter digits
  92+ 8F35 3E 20                                ld      a,32                     ; clear counter digits
  93+ 8F37 77                                   ld      (hl),a                   ; clear counter digits
  94+ 8F38 23                                   inc     hl                       ; clear counter digits
  95+ 8F39 77                                   ld      (hl),a                   ; clear counter digits
  96+ 8F3A 23                                   inc     hl                       ; clear counter digits
  97+ 8F3B 77                                   ld      (hl),a                   ; clear counter digits
  98+ 8F3C CD D2 84                             call    UpdateCountdownNumber
  99+ 8F3F 21 23 85                             ld      hl,Hyp_charging
 100+ 8F42                                      HalfLengthHL
 100+ 8F42 06 00       >                        ld      b,0
 100+ 8F44 7E          >.CountLenLoop:          ld      a,(hl)
 100+ 8F45 FE 00       >                        cp      0
 100+ 8F47 28 04       >                        jr      z,.DoneCount
 100+ 8F49 04          >                        inc     b
 100+ 8F4A 23          >                        inc     hl
 100+ 8F4B 18 F7       >                        jr      .CountLenLoop
 100+ 8F4D 3E 20       >.DoneCount:             ld      a,32
 100+ 8F4F 90          >                        sub     b
 100+ 8F50 CB 2F       >                        sra     a
 101+ 8F52 21 71 85                             ld      hl,Hyp_centeredCharging
 102+ 8F55                                      ldClearTextLoop 32
 102+ 8F55 47          >                        ld      b,a
 102+ 8F56 3E 20       >                        ld      a,32
 102+ 8F58 77          >.ClearLoop:             ld      (hl),a
 102+ 8F59 23          >                        inc     hl
 102+ 8F5A 10 FC       >                        djnz    .ClearLoop
 103+ 8F5C EB                                   ex      de,hl
 104+ 8F5D 21 23 85                             ld      hl,Hyp_charging
 105+ 8F60                                      ldCopyTextAtHLtoDE
 105+ 8F60 7E          >.CopyLoop:              ld      a,(hl)
 105+ 8F61 12          >                        ld      (de),a
 105+ 8F62 FE 00       >                        cp      0
 105+ 8F64 CA 6B 8F    >                        jp      z,.DoneCopy
 105+ 8F67 23          >                        inc     hl
 105+ 8F68 13          >                        inc     de
 105+ 8F69 18 F5       >                        jr      .CopyLoop
 105+ 8F6B             >.DoneCopy:
 106+ 8F6B AF                                   xor     a
 107+ 8F6C 32 91 85                             ld      (Hyp_centeredEol2),a
 108+ 8F6F 2A ED 99     .UpdateHyperCountdown:  ld      hl,(InnerHyperCount)
 109+ 8F72 2D                                   dec     l
 110+ 8F73 20 26                                jr      nz,.decHyperInnerOnly
 111+ 8F75 25                                   dec     h
 112+ 8F76 FA 9F 8F                             jp      m,.HyperCountDone
 113+ 8F79 2E 0B        .resetHyperInner:       ld      l,$0B
 114+ 8F7B E5                                   push    hl
 115+ 8F7C 16 0C                                ld      d,12
 116+ 8F7E 3E 06                                ld      a,L1ColourPaperBlack | L1ColourInkYellow
 117+ 8F80 CD 8B E0                             call    l1_attr_cls_2DlinesA
 118+ 8F83 16 60                                ld      d,12 * 8
 119+ 8F85 CD 74 E0                             call    l1_cls_2_lines_d
 120+ 8F88 11 00 60                             ld      de,$6000
 121+ 8F8B 21 30 85                             ld      hl,Hyp_centeredTarget
 122+ 8F8E CD C8 E0                             call    l1_print_at
 123+ 8F91 11 00 68                             ld      de,$6800
 124+ 8F94 21 71 85                             ld      hl,Hyp_centeredCharging
 125+ 8F97 CD C8 E0                             call    l1_print_at
 126+ 8F9A E1                                   pop     hl
 127+ 8F9B 22 ED 99     .decHyperInnerOnly:     ld      (InnerHyperCount),hl
 128+ 8F9E C9                                   ret
 129+ 8F9F 21 00 00     .HyperCountDone:        ld      hl,0
 130+ 8FA2 22 ED 99                             ld      (InnerHyperCount),hl
 131+ 8FA5 16 0C                                ld      d,12
 132+ 8FA7 3E 00                                ld      a,L1ColourPaperBlack | L1ColourInkBlack
 133+ 8FA9 CD 8B E0                             call    l1_attr_cls_2DlinesA
 134+ 8FAC 16 60                                ld      d,12 * 8
 135+ 8FAE CD 74 E0                             call    l1_cls_2_lines_d
 136+ 8FB1                                      ForceTransition ScreenHyperspace                            ; transition to hyperspace
 136+ 8FB1 3E 0E       >                        ld      a,ScreenHyperspace
 136+ 8FB3 32 93 87    >                        ld      (ScreenTransitionForced), a
 137+ 8FB6 C9                                   ret
 138+ 8FB7
# file closed: ./Tables/message_queue.asm
 983  8FB7                          INCLUDE "./Tables/LaserStatsTable.asm"
# file opened: ./Tables/LaserStatsTable.asm
   1+ 8FB7              ; LaserTypeTable
   2+ 8FB7              ; laser type = id of laser
   3+ 8FB7              ; laser pulse pause = time before next pulse
   4+ 8FB7              ; laser pulse duration = time laser is on per shot
   5+ 8FB7              ; laser damage output
   6+ 8FB7              ;
   7+ 8FB7              ; LaserType
   8+ 8FB7              ; LaserPulseRate                          ; how many pulses can be fired before long pause
   9+ 8FB7              ; LaserPulsePause                         ; time before next pulse - 0 = beam
  10+ 8FB7              ; LaserPulseOnTime                        ; cycles laser is on for
  11+ 8FB7              ; LaserPulseOffTime                       ; cycles laser is off for
  12+ 8FB7              ; LaserPulseRest                          ; time before pulse count resets to 0 (i.e cooldown)
  13+ 8FB7              ; LaserDamageOutput                       ; amount of damage for a laser hit
  14+ 8FB7              ; LaserEnergyDrain                        ; amount of energy drained by cycle
  15+ 8FB7              ; LaserHeat                               ; amount of heat generated
  16+ 8FB7              ; LaserDurability                         ; probabability out of 255 that a hit on unshielded will add random amount of damage
  17+ 8FB7              ; LaserDurabilityAmount                   ; max amount of damagage can be sustained in one damage hit
  18+ 8FB7              ; LaserInMarkets                          ; can this laser be purchased 0 = yes 1 = no
  19+ 8FB7              ; LaserTechLevel                          ; minimum tech level system to buy from
  20+ 8FB7              ;
  21+ 8FB7              ;                          Typ  Rate On   Off  Rst  Dam  Drn  Het  Dur  DAt  Mrk  Tek
  22+ 8FB7 01 01 05 20  LaserStatsTable:        DB $01, $01, $05, $20, $10, $03, $10, $02, $20 ,$10 ,$00, $00; basic laser
  22+ 8FBB 10 03 10 02
  22+ 8FBF 20 10 00 00
  23+ 8FC3 02 01 03 05                          DB $02, $01, $03, $05, $0A, $03, $10, $08, $20 ,$10 ,$00, $01; pulse laser
  23+ 8FC7 0A 03 10 08
  23+ 8FCB 20 10 00 01
  24+ 8FCF 03 03 05 03                          DB $03, $03, $05, $03, $0A, $03, $10, $02, $20 ,$10 ,$00, $02; burst laser
  24+ 8FD3 0A 03 10 02
  24+ 8FD7 20 10 00 02
  25+ 8FDB 04 10 02 02                          DB $04, $10, $02, $02, $05, $02, $10, $05, $30 ,$10 ,$00, $03; Gatling laser
  25+ 8FDF 05 02 10 05
  25+ 8FE3 30 10 00 03
  26+ 8FE7 05 00 01 00                          DB $05, $00, $01, $00, $03, $03, $03, $10, $20 ,$10 ,$00, $04; beam
  26+ 8FEB 03 03 03 10
  26+ 8FEF 20 10 00 04
  27+ 8FF3 06 01 20 30                          DB $06, $01, $20, $30, $60, $03, $02, $02, $20 ,$10 ,$00, $05; mining
  27+ 8FF7 60 03 02 02
  27+ 8FFB 20 10 00 05
  28+ 8FFF 07 00 01 00                          DB $07, $00, $01, $00, $06, $05, $05, $05, $10 ,$10 ,$00, $08; military beam
  28+ 9003 06 05 05 05
  28+ 9007 10 10 00 08
  29+ 900B 08 01 01 02                          DB $08, $01, $01, $02, $20, $02, $01, $30, $30 ,$11 ,$01, $10; thargoid
  29+ 900F 20 02 01 30
  29+ 9013 30 11 01 10
  30+ 9017 09 01 30 80                          DB $09, $01, $30, $80, $80, $40, $02, $03, $60 ,$11 ,$01, $10; Starkiller
  30+ 901B 80 40 02 03
  30+ 901F 60 11 01 10
  31+ 9023
  32+ 9023
  33+ 9023
  34+ 9023
  35+ 9023
  36+ 9023
  37+ 9023
  38+ 9023
# file closed: ./Tables/LaserStatsTable.asm
 984  9023                          INCLUDE "./Tables/ShipClassTable.asm"
# file opened: ./Tables/ShipClassTable.asm
   1+ 9023 00           ShipBodiesTable:        DB  $ - ShipBodiesTable
   2+ 9024 23 18 16 00  ShipPackList:           DB  ShipID_Sidewinder, ShipID_Mamba, ShipID_Krait, ShipID_Adder, ShipID_Gecko, ShipID_Cobra_Mk_1, ShipID_Worm, ShipID_Cobra_Mk_3_P
   2+ 9028 13 0A 2A 0B
   3+ 902C              ShipPackTableSize       EQU $ - ShipPackList
   4+ 902C 0B 02 1F 12  ShipHunterTable         DB  ShipID_Cobra_Mk_3_P, ShipID_Asp_Mk_2, ShipID_Python_P, ShipID_Fer_De_Lance
   5+ 9030              ShipHunterTableSize     EQU $ - ShipHunterTable
   6+ 9030
# file closed: ./Tables/ShipClassTable.asm
 985  9030
 986  9030
 987  9030
 988  9030              ;.absXhi:
 989  9030              ;                        ld      a,ScannerX
 990  9030              ;                        JumpOnBitSet d,7,ScannerNegX
 991  9030              ;                        add     a,e
 992  9030              ;                        jp      ScannerZCoord
 993  9030              ;ScannerNegX:            sub     e
 994  9030              ;ScannerZCoord:          ld      e,a
 995  9030              ;                        srl     c
 996  9030              ;                        srl     c
 997  9030              ;                        ld      a,ScannerY
 998  9030              ;                        JumpOnBitSet b,7,ScannerNegZ
 999  9030              ;                        sub     c
1000  9030              ;                        jp      ScannerYCoord
1001  9030              ;ScannerNegZ:            add     a,c
1002  9030              ;ScannerYCoord:          ld      d,a                     ; now de = pixel pos d = y e = x  for base of stick X & Z , so need Y Stick height
1003  9030              ;                        JumpOnBitSet h,7,ScannerStickDown
1004  9030              ;                        sub     l                       ; a already holds actual Y
1005  9030              ;                        JumpIfAGTENusng 128,ScannerHeightDone
1006  9030              ;                        ld      a,128
1007  9030              ;                        jp      ScannerHeightDone
1008  9030              ;ScannerStickDown:       add     a,l
1009  9030              ;                        JumpIfAGTENusng 191,ScannerHeightDone
1010  9030              ;                        ld      a,191
1011  9030              ;ScannerHeightDone:      ld      c,e            ; Now sort out line from point DE horzontal by a
1012  9030              ;                        ld      b,d
1013  9030              ;                        ld      d,a
1014  9030              ;                        cp      b
1015  9030              ;                        jp      z,Scanner0Height
1016  9030              ;                        ld      e,194 ; Should be coloured based on status but this will do for now
1017  9030              ;                        push    bc
1018  9030              ;                        push    de
1019  9030              ;                        MMUSelectLayer2
1020  9030              ;                        call    l2_draw_vert_line_to
1021  9030              ;                        pop     de
1022  9030              ;                        pop     bc
1023  9030              ;Scanner0Height:         ld      b,d
1024  9030              ;                       push    bc
1025  9030              ;                       ld      a,255
1026  9030              ;                       MMUSelectLayer2
1027  9030              ;                       call    l2_plot_pixel
1028  9030              ;                       pop     bc
1029  9030              ;                       inc     c
1030  9030              ;                       ld      a,255
1031  9030              ;                       MMUSelectLayer2
1032  9030              ;                       call    l2_plot_pixel
1033  9030 C9                                   ret
1034  9031
1035  9031
1036  9031 AF           SeedGalaxy0:            xor     a
1037  9032                                      MMUSelectGalaxyA
1037  9032 ED 92 57    >                     nextreg GalaxyDataMMU,       a
1038  9035 DD 21 16 E0                          ld      ix,galaxy_data
1039  9039 AF                                   xor		a
1040  903A 32 2C 99                             ld		(XSAV),a
1041  903D CD 0C 9E                             call    copy_galaxy_to_system
1042  9040 DD E5        SeedGalaxy0Loop:        push    ix
1043  9042 D1                                   pop     de
1044  9043 21 13 99                             ld      hl,SystemSeed
1045  9046 CD 12 9E                             call    copy_seed
1046  9049 DD E5                                push    ix
1047  904B E1                                   pop     hl
1048  904C ED 34 08 00                          add     hl,8
1049  9050 E5                                   push    hl
1050  9051 DD E1                                pop     ix
1051  9053 CD 47 9E                             call    next_system_seed
1052  9056 3A 2C 99                             ld		a,(XSAV)
1053  9059 3D                                   dec		a
1054  905A FE 00                                cp		0
1055  905C C8                                   ret		z
1056  905D 32 2C 99                             ld		(XSAV),a
1057  9060 20 DE                                jr      nz,SeedGalaxy0Loop
1058  9062 C9                                   ret
1059  9063
1060  9063
1061  9063
1062  9063
1063  9063                  ;include "./ModelRender/testdrawing.asm"
1064  9063
1065  9063
1066  9063                  include "./Maths/Utilities/XX12EquNodeDotOrientation.asm"
# file opened: ./Maths/Utilities/XX12EquNodeDotOrientation.asm
   1+ 9063              ; We enter here with hl pointing at XX16 and bc = XX15 value
   2+ 9063              ; so xx12 = XX15 * XX16 row
   3+ 9063              XX12ProcessOneRow:
   4+ 9063              XX12CalcXCell:
   5+ 9063 ED 4B 83 C0          ld		bc,(UBnkXScaled)
   6+ 9067 5E           		ld		e,(hl)								    ; get orientation ZX
   7+ 9068 23           		inc		hl
   8+ 9069 56           		ld		d,(hl)                                  ; so now e = xx16 value d = xx16 sign
   9+ 906A 7A           		ld		a,d
  10+ 906B A8                   xor     b
  11+ 906C E6 80        		and		SignOnly8Bit                            ; a = XX 16 sign
  12+ 906E DD 67        		ld		ixh,a								    ; orientation sign to ixh
  13+ 9070 78           		ld		a,b                                     ; now make bc abs bc
  14+ 9071 E6 7F        		and		SignMask8Bit
  15+ 9073 47           		ld		b,a                                     ; bc = abs(bc) now
  16+ 9074 E5           		push	hl
  17+ 9075 16 00                ld      d,0                                     ; d = value
  18+ 9077 60           		ld		h,b
  19+ 9078 69           		ld		l,c
  20+ 9079 CD D2 A9     		call	mulDEbyHL							    ; hl = |orientation| * |x pos)
  21+ 907C 22 69 95     		ld		(XX12PVarResult1),hl				    ; T = 16 bit result, we only want to use high byte later
  22+ 907F DD 7C        		ld		a,ixh
  23+ 9081 32 70 95     		ld		(XX12PVarSign1),a					    ; S = sign  not sign 1 and 2 are reversed in memory so that fetchign back will put 1 in high byte 2 in low byte
  24+ 9084 E1           		pop		hl
  25+ 9085              XX12CalcYCell:
  26+ 9085 ED 4B 85 C0          ld		bc,(UBnkYScaled)
  27+ 9089 23           		inc		hl
  28+ 908A 5E           		ld		e,(hl)							    	; get orientation ZX
  29+ 908B 23           		inc		hl
  30+ 908C 56           		ld		d,(hl)
  31+ 908D 7A           		ld		a,d
  32+ 908E A8                   xor     b
  33+ 908F E6 80        		and		SignOnly8Bit
  34+ 9091 DD 67        		ld		ixh,a								    ; XX16 orientation sign to ixh
  35+ 9093 78           		ld		a,b                                     ; now make bc abs bc
  36+ 9094 E6 7F        		and		SignMask8Bit
  37+ 9096 47           		ld		b,a                                     ; bc = abs(bc) now
  38+ 9097 E5           		push	hl
  39+ 9098 16 00                ld      d,0                                     ; d = value
  40+ 909A 60           		ld		h,b
  41+ 909B 69           		ld		l,c
  42+ 909C CD D2 A9     		call	mulDEbyHL							    ; hl = |orientation| * |x pos)
  43+ 909F 22 6B 95     		ld		(XX12PVarResult2),hl				    ; T = 16 bit result
  44+ 90A2 DD 7C        		ld		a,ixh
  45+ 90A4 32 6F 95     		ld		(XX12PVarSign2),a					    ; S = sign
  46+ 90A7 E1           		pop		hl
  47+ 90A8              XX12CalcZCell:
  48+ 90A8 ED 4B 87 C0          ld		bc,(UBnkZScaled)
  49+ 90AC 23           		inc		hl
  50+ 90AD 5E           		ld		e,(hl)								    ; get orientation ZX
  51+ 90AE 23           		inc		hl
  52+ 90AF 56           		ld		d,(hl)
  53+ 90B0 7A           		ld		a,d
  54+ 90B1 A8                   xor     b
  55+ 90B2 E6 80        		and		SignOnly8Bit
  56+ 90B4 DD 67        		ld		ixh,a								    ; orientation sign to ixh
  57+ 90B6 78           		ld		a,b                                     ; now make bc abs bc
  58+ 90B7 E6 7F        		and		SignMask8Bit
  59+ 90B9 47           		ld		b,a                                     ; bc = abs(bc) now
  60+ 90BA 16 00                ld      d,0                                     ; d = value
  61+ 90BC 60           		ld		h,b
  62+ 90BD 69           		ld		l,c
  63+ 90BE CD D2 A9     		call	mulDEbyHL							    ; hl = |orientation| * |x pos)
  64+ 90C1 22 6D 95     		ld		(XX12PVarResult3),hl				    ; T = 16 bit result
  65+ 90C4 DD 7C        		ld		a,ixh
  66+ 90C6 32 71 95     		ld		(XX12PVarSign3),a					    ; S = sign
  67+ 90C9              XX12CalcCellResult:
  68+ 90C9 2A 69 95     		ld		hl,(XX12PVarResult1)				    ; X Cell Result
  69+ 90CC ED 5B 6B 95  		ld		de,(XX12PVarResult2)				    ; Y Cell Result
  70+ 90D0 ED 4B 6F 95  		ld		bc,(XX12PVarSign2)					    ; b = var 1 result sign c = var 2 result signs
  71+ 90D4              XX12MSBOnly:
  72+ 90D4 6C           		ld		l,h									    ; now move results into lower byte so / 256
  73+ 90D5 5A           		ld		e,d									    ; for both results
  74+ 90D6 AF           		xor		a									    ;
  75+ 90D7 67           		ld		h,a									    ;
  76+ 90D8 57           		ld		d,a									    ; so set high byte to 0
  77+ 90D9 CD 7E AF     		call	ADDHLDESignBC                           ;  XX12ProcessCalcHLPlusDESignBC		; returns with HL = result1 + result 2 signed in a
  78+ 90DC 47           		ld		b,a									    ; move sign into b ready for next calc
  79+ 90DD 3A 71 95     		ld		a,(XX12PVarSign3)					    ; result of the calcZ cell
  80+ 90E0 4F           		ld		c,a									    ; goes into c to align with DE
  81+ 90E1 ED 5B 6D 95  		ld		de,(XX12PVarResult3)				    ; now add result to Result 3
  82+ 90E5 5A           		ld		e,d                                     ; d = result /256
  83+ 90E6 16 00        		ld		d,0									    ; and only us high byte
  84+ 90E8 CD 7E AF     		call	ADDHLDESignBC; XX12ProcessCalcHLPlusDESignBC		; returns with HL = result and a = sign
  85+ 90EB C9           		ret											    ; hl = result, a = sign
  86+ 90EC              								    ; hl = result, a = sign
  87+ 90EC
  88+ 90EC              XX12EquNodeDotTransMat:							    ; .LL51	\ -> &4832 \ XX12=XX15.XX16  each vector is 16-bit x,y,z **** ACTUALLY XX16 is value in low sign bit in high
  89+ 90EC              ;...X cell
  90+ 90EC 21 56 C0     		ld		hl,UbnkTransInvRow0x0     			; process orientation matrix row 0
  91+ 90EF CD 63 90             call    XX12ProcessOneRow                   ; hl = result, a = sign
  92+ 90F2 47           		ld		b,a                                 ; b = sign
  93+ 90F3 7C           		ld		a,h                                 ; a = high byte
  94+ 90F4 B0           		or		b
  95+ 90F5 32 8A C0     		ld		(UBnkXX12xSign),a					; a = result with sign in bit 7
  96+ 90F8 7D           		ld		a,l                                 ; the result will be in the lower byte now
  97+ 90F9 32 89 C0             ld      (UBnkXX12xLo),a						; that is result done for
  98+ 90FC              ;...Y cell
  99+ 90FC 21 5E C0     		ld		hl,UbnkTransInvRow1y0     			; process orientation matrix row 1
 100+ 90FF CD 63 90             call    XX12ProcessOneRow
 101+ 9102 47           		ld		b,a
 102+ 9103 7C           		ld		a,h
 103+ 9104              ;		ld		a,l
 104+ 9104 B0           		or		b
 105+ 9105 32 8C C0     		ld		(UBnkXX12ySign),a					; a = result with sign in bit 7
 106+ 9108 7D           		ld		a,l                                 ; the result will be in the lower byte now
 107+ 9109 32 8B C0             ld      (UBnkXX12yLo),a						; that is result done for
 108+ 910C              ;...Z cell
 109+ 910C 21 66 C0     		ld		hl,UbnkTransInvRow2z0     			; process orientation matrix row 1
 110+ 910F CD 63 90             call    XX12ProcessOneRow
 111+ 9112 47           		ld		b,a
 112+ 9113 7C                   ld		a,h
 113+ 9114              ;		ld		a,l
 114+ 9114 B0           		or		b
 115+ 9115 32 8E C0     		ld		(UBnkXX12zSign),a					; a = result with sign in bit 7
 116+ 9118 7D           		ld		a,l                                 ; the result will be in the lower byte now
 117+ 9119 32 8D C0             ld      (UBnkXX12zLo),a						; that is result done for
 118+ 911C C9                   ret
 119+ 911D
 120+ 911D              XX12EquNodeDotOrientation:							; .LL51	\ -> &4832 \ XX12=XX15.XX16  each vector is 16-bit x,y,z **** ACTUALLY XX16 is value in low sign bit in high
 121+ 911D              ;...X cell
 122+ 911D 21 56 C0     		ld		hl,UbnkTransInvRow0x0     			; process orientation matrix row 0
 123+ 9120 CD 63 90             call    XX12ProcessOneRow                   ; hl = result, a = sign
 124+ 9123 47           		ld		b,a                                 ; b = sign
 125+ 9124 7C           		ld		a,h                                 ; a = high byte
 126+ 9125 B0           		or		b
 127+ 9126 32 8A C0     		ld		(UBnkXX12xSign),a					; a = result with sign in bit 7
 128+ 9129 7D           		ld		a,l                                 ; the result will be in the lower byte now
 129+ 912A 32 89 C0             ld      (UBnkXX12xLo),a						; that is result done for
 130+ 912D              ;...Y cell
 131+ 912D 21 5E C0     		ld		hl,UbnkTransInvRow1y0     			; process orientation matrix row 1
 132+ 9130 CD 63 90             call    XX12ProcessOneRow
 133+ 9133 47           		ld		b,a
 134+ 9134 7C           		ld		a,h
 135+ 9135              ;		ld		a,l
 136+ 9135 B0           		or		b
 137+ 9136 32 8C C0     		ld		(UBnkXX12ySign),a					; a = result with sign in bit 7
 138+ 9139 7D           		ld		a,l                                 ; the result will be in the lower byte now
 139+ 913A 32 8B C0             ld      (UBnkXX12yLo),a						; that is result done for
 140+ 913D              ;...Z cell
 141+ 913D 21 66 C0     		ld		hl,UbnkTransInvRow2z0     			; process orientation matrix row 1
 142+ 9140 CD 63 90             call    XX12ProcessOneRow
 143+ 9143 47           		ld		b,a
 144+ 9144 7C                   ld		a,h
 145+ 9145              ;		ld		a,l
 146+ 9145 B0           		or		b
 147+ 9146 32 8E C0     		ld		(UBnkXX12zSign),a					; a = result with sign in bit 7
 148+ 9149 7D           		ld		a,l                                 ; the result will be in the lower byte now
 149+ 914A 32 8D C0             ld      (UBnkXX12zLo),a						; that is result done for
 150+ 914D C9                   ret
 151+ 914E
 152+ 914E              XX12EquNodeDotXX16:					         		; .LL51	\ -> &4832 \ XX12=XX15.XX16  each vector is 16-bit x,y,z **** ACTUALLY XX16 is value in low sign bit in high
 153+ 914E              ;...X cell
 154+ 914E 21 3E C0     		ld		hl,UBnkTransmatSidevX     			; process orientation matrix row 0
 155+ 9151 CD 63 90             call    XX12ProcessOneRow                   ; hl = result, a = sign
 156+ 9154 47           		ld		b,a                                 ; b = sign
 157+ 9155 7C           		ld		a,h                                 ; a = high byte
 158+ 9156 B0           		or		b
 159+ 9157 32 8A C0     		ld		(UBnkXX12xSign),a					; a = result with sign in bit 7
 160+ 915A 7D           		ld		a,l                                 ; the result will be in the lower byte now
 161+ 915B 32 89 C0             ld      (UBnkXX12xLo),a						; that is result done for
 162+ 915E              ;...Y cell
 163+ 915E 21 44 C0     		ld		hl,UBnkTransmatRoofvX     			; process orientation matrix row 1
 164+ 9161 CD 63 90             call    XX12ProcessOneRow
 165+ 9164 47           		ld		b,a
 166+ 9165 7C           		ld		a,h
 167+ 9166              ;		ld		a,l
 168+ 9166 B0           		or		b
 169+ 9167 32 8C C0     		ld		(UBnkXX12ySign),a					; a = result with sign in bit 7
 170+ 916A 7D           		ld		a,l                                 ; the result will be in the lower byte now
 171+ 916B 32 8B C0             ld      (UBnkXX12yLo),a						; that is result done for
 172+ 916E              ;...Z cell
 173+ 916E 21 4A C0     		ld		hl,UBnkTransmatNosevX     			; process orientation matrix row 1
 174+ 9171 CD 63 90             call    XX12ProcessOneRow
 175+ 9174 47           		ld		b,a
 176+ 9175 7C                   ld		a,h
 177+ 9176              ;		ld		a,l
 178+ 9176 B0           		or		b
 179+ 9177 32 8E C0     		ld		(UBnkXX12zSign),a					; a = result with sign in bit 7
 180+ 917A 7D           		ld		a,l                                 ; the result will be in the lower byte now
 181+ 917B 32 8D C0             ld      (UBnkXX12zLo),a						; that is result done for
 182+ 917E C9                   ret
# file closed: ./Maths/Utilities/XX12EquNodeDotOrientation.asm
1067  917F                  include "./ModelRender/CopyXX12ToXX15.asm"
# file opened: ./ModelRender/CopyXX12ToXX15.asm
   1+ 917F 21 89 C0     CopyXX12ToXX15:         ld      hl,XX12
   2+ 9182 11 83 C0                             ld      de,XX15
   3+ 9185 01 06 00                             ld      bc,6
   4+ 9188 ED B0                                ldir
   5+ 918A C9                                   ret
   6+ 918B
   7+ 918B 21 89 C0     CopyXX12ToXX12Save:     ld      hl,XX12
   8+ 918E 11 8F C0                             ld      de,XX12Save
   9+ 9191 01 06 00                             ld      bc,6
  10+ 9194 ED B0                                ldir
  11+ 9196 C9                                   ret
  12+ 9197
  13+ 9197 21 8F C0     CopyXX12SaveToXX12:     ld      hl,XX12Save
  14+ 919A 11 89 C0                             ld      de,XX12
  15+ 919D 01 06 00                             ld      bc,6
  16+ 91A0 ED B0                                ldir
  17+ 91A2 C9                                   ret
  18+ 91A3
  19+ 91A3 21 89 C0     CopyXX12ToXX12Save2:    ld      hl,XX12
  20+ 91A6 11 95 C0                             ld      de,XX12Save2
  21+ 91A9 01 06 00                             ld      bc,6
  22+ 91AC ED B0                                ldir
  23+ 91AE C9                                   ret
  24+ 91AF
  25+ 91AF 21 95 C0     CopyXX12Save2ToXX12:    ld      hl,XX12Save2
  26+ 91B2 11 89 C0                             ld      de,XX12
  27+ 91B5 01 06 00                             ld      bc,6
  28+ 91B8 ED B0                                ldir
  29+ 91BA C9                                   ret
  30+ 91BB
# file closed: ./ModelRender/CopyXX12ToXX15.asm
1068  91BB                  include "./ModelRender/CopyXX15ToXX12.asm"
# file opened: ./ModelRender/CopyXX15ToXX12.asm
   1+ 91BB 21 83 C0     CopyXX15ToXX12:         ld		hl,XX15
   2+ 91BE 11 89 C0                             ld      de,XX12
   3+ 91C1 01 06 00                             ld      bc,6
   4+ 91C4 ED B0                                ldir
   5+ 91C6 C9                                   ret
   6+ 91C7
   7+ 91C7
   8+ 91C7
   9+ 91C7 21 83 C0     CopyXX15ToXX15Save:     ld		hl,XX15
  10+ 91CA 11 9F C0                             ld      de,XX15Save
  11+ 91CD 01 06 00                             ld      bc,6
  12+ 91D0 ED B0                                ldir
  13+ 91D2 C9                                   ret
  14+ 91D3
  15+ 91D3 21 9F C0     CopyXX15SaveToXX15:     ld		hl,XX15Save
  16+ 91D6 11 83 C0                             ld      de,XX15
  17+ 91D9 01 06 00                             ld      bc,6
  18+ 91DC ED B0                                ldir
  19+ 91DE C9                                   ret
  20+ 91DF
  21+ 91DF 21 83 C0     CopyXX15ToXX15Save2:    ld		hl,XX15
  22+ 91E2 11 A7 C0                             ld      de,XX15Save2
  23+ 91E5 01 06 00                             ld      bc,6
  24+ 91E8 ED B0                                ldir
  25+ 91EA C9                                   ret
  26+ 91EB
  27+ 91EB 21 A7 C0     CopyXX15Save2ToXX15:    ld		hl,XX15Save2
  28+ 91EE 11 83 C0                             ld      de,XX15
  29+ 91F1 01 06 00                             ld      bc,6
  30+ 91F4 ED B0                                ldir
  31+ 91F6 C9                                   ret
  32+ 91F7
# file closed: ./ModelRender/CopyXX15ToXX12.asm
1069  91F7                  include "./Maths/Utilities/ScaleXX16Matrix197.asm"
# file opened: ./Maths/Utilities/ScaleXX16Matrix197.asm
   1+ 91F7 06 09        ScaleXX16Matrix197:     ld		b,9                 ; Interate though all 9 matrix elements
   2+ 91F9 0E C5                                ld		c,ConstNorm         ; c = 197
   3+ 91FB 21 3E C0                             ld		hl,UBnkTransmatSidev ; within XX16 (transmat)
   4+ 91FE 7E           .ScaleXX16Loop:         ld		a,(hl)              ; set DE = matrix value
   5+ 91FF 5F                                   ld		e,a                 ;
   6+ 9200 23                                   inc		hl                  ;
   7+ 9201 7E                                   ld		a,(hl)              ;
   8+ 9202 57                                   ld		d,a                 ;
   9+ 9203 E6 80                                and     SignOnly8Bit        ; A holds high still to we can strip out sign bit
  10+ 9205 DD 6F                                ld		ixl,a				; retain for sign bit
  11+ 9207                                      ShiftDELeft1				; carry now holds sign bit and DE = De * 2, this will in effect strip off the sign bit automatically
  11+ 9207 CB 23       >			   sla e
  11+ 9209 CB 12       >			   rl  d
  12+ 920B 7A                                   ld      a,d                 ; a = high byte after x 2
  13+ 920C C5                                   push	bc                  ; save BC  counter and constant 197
  14+ 920D E5                                   push	hl                  ; save HL
  15+ 920E CD 7D AB                             call	DIV16Amul256dCUNDOC; AEquAmul256DivD; DIV16Amul256dCUNDOC	; result in BC = A*256 / 197 or D *512 / 197 = 2.6 * vector element, effectivley the result will always be in c
  16+ 9211 E1                                   pop		hl
  17+ 9212 2B                                   dec     hl                  ; move back to low byte
  18+ 9213 71                                   ld      (hl),c              ; save result in low byte as we want to preserve high byte sign
  19+ 9214 23                                   inc     hl                  ; move back to high byte
  20+ 9215                                  ;    ld      a,(hl)
  21+ 9215                                  ;    and     $80
  22+ 9215 DD 7D                                ld      a,ixl
  23+ 9217 77                                   ld      (hl),a              ; write back just sign bit
  24+ 9218 C1                                   pop		bc                  ; retrieve both counter and constant 197
  25+ 9219 23                                   inc     hl                  ; no to next vertex value
  26+ 921A 10 E2                                djnz	.ScaleXX16Loop
  27+ 921C C9                                   ret
  28+ 921D
# file closed: ./Maths/Utilities/ScaleXX16Matrix197.asm
1070  921D
1071  921D                  include "./Universe/StarDust/StarRoutines.asm"
# file opened: ./Universe/StarDust/StarRoutines.asm
   1+ 921D              ;note: DIV16Amul256dCUNDOC as per
   2+ 921D              ;                                   BC = A0
   3+ 921D              ;                                   DE = 0C
   4+ 921D              ;                                   so BC = a * 256 / C
   5+ 921D
   6+ 921D              ; We can cheat here, Speed is always 0 or positive
   7+ 921D              ; z postion will always be positive if we can see it
   8+ 921D
   9+ 921D EB           InitStarAtHL:           ex      de,hl               ; preserving hl
  10+ 921E CD D0 9D                             call    doRND               ; a = random OR bit 5
  11+ 9221 EB                                   ex      de,hl               ; .
  12+ 9222 F6 08                                or      8                   ; .
  13+ 9224 77                                   ld      (hl),a              ; save to x pos
  14+ 9225 E6 7F                                and     $7F                 ; a = abs a
  15+ 9227 23                                   inc     hl                  ;
  16+ 9228 77                                   ld      (hl),a              ;
  17+ 9229 EB                                   ex      de,hl               ; preserving hl
  18+ 922A CD D0 9D                             call    doRND               ; a = -ve (random / 2)
  19+ 922D EB                                   ex      de,hl               ; .
  20+ 922E 0F                                   rrca                        ; .
  21+ 922F E6 80                                and     $80                 ; .
  22+ 9231 B6                                   or      (hl)                ; or with
  23+ 9232 77                                   ld      (hl),a
  24+ 9233 23                                   inc     hl
  25+ 9234 EB                                   ex      de,hl
  26+ 9235 CD D0 9D                             call    doRND
  27+ 9238 EB                                   ex      de,hl
  28+ 9239 F6 04                                or      4
  29+ 923B 77                                   ld      (hl),a
  30+ 923C 23                                   inc     hl
  31+ 923D E6 7F                                and     $7F
  32+ 923F 77                                   ld      (hl),a
  33+ 9240 EB                                   ex      de,hl
  34+ 9241 CD D0 9D                             call    doRND
  35+ 9244 EB                                   ex      de,hl
  36+ 9245 0F                                   rrca
  37+ 9246 E6 80                                and     $80
  38+ 9248 B6                                   or      (hl)
  39+ 9249 77                                   ld      (hl),a
  40+ 924A 23                                   inc     hl
  41+ 924B EB                                   ex      de,hl
  42+ 924C CD D0 9D                             call    doRND
  43+ 924F EB                                   ex      de,hl
  44+ 9250 F6 90                                or      144
  45+ 9252 77                                   ld      (hl),a
  46+ 9253 23                                   inc     hl
  47+ 9254 F6 70                                or      %01110000
  48+ 9256 E6 7F                                and     $7f     ; bodge
  49+ 9258 77                                   ld      (hl),a
  50+ 9259 23                                   inc     hl
  51+ 925A C9                                   ret
  52+ 925B
  53+ 925B EB           InitHyperStarAtHL:      ex      de,hl
  54+ 925C CD D0 9D                             call    doRND
  55+ 925F CB 27                                sla     a
  56+ 9261 CB 27                                sla     a                ; so its * 4 as we have a blank spot
  57+ 9263 EB                                   ex      de,hl
  58+ 9264 E6 F8                                and     %11111000
  59+ 9266 77                                   ld      (hl),a
  60+ 9267 E6 7F                                and     $7F
  61+ 9269 23                                   inc     hl
  62+ 926A 77                                   ld      (hl),a
  63+ 926B EB                                   ex      de,hl
  64+ 926C CD D0 9D                             call    doRND
  65+ 926F EB                                   ex      de,hl
  66+ 9270 0F                                   rrca
  67+ 9271 E6 80                                and     $80
  68+ 9273 B6                                   or      (hl)
  69+ 9274 77                                   ld      (hl),a
  70+ 9275 23                                   inc     hl
  71+ 9276 EB                                   ex      de,hl
  72+ 9277 CD D0 9D                             call    doRND
  73+ 927A CB 27                                sla     a
  74+ 927C CB 27                                sla     a               ; so its * 4 as we have a blank spot
  75+ 927E EB                                   ex      de,hl
  76+ 927F E6 F8                                and     %11111000
  77+ 9281 77                                   ld      (hl),a
  78+ 9282 23                                   inc     hl
  79+ 9283 E6 7F                                and     $7F
  80+ 9285 77                                   ld      (hl),a
  81+ 9286 EB                                   ex      de,hl
  82+ 9287 CD D0 9D                             call    doRND
  83+ 928A EB                                   ex      de,hl
  84+ 928B 0F                                   rrca
  85+ 928C E6 80                                and     $80
  86+ 928E B6                                   or      (hl)
  87+ 928F 77                                   ld      (hl),a
  88+ 9290 23                                   inc     hl
  89+ 9291 EB                                   ex      de,hl
  90+ 9292 CD D0 9D                             call    doRND
  91+ 9295 EB                                   ex      de,hl
  92+ 9296 F6 5F                                or      95
  93+ 9298 77                                   ld      (hl),a
  94+ 9299 23                                   inc     hl
  95+ 929A F6 70                                or      %01110000
  96+ 929C E6 7F                                and     $7f     ; bodge
  97+ 929E 77                                   ld      (hl),a
  98+ 929F 23                                   inc     hl
  99+ 92A0 C9                                   ret
 100+ 92A1
 101+ 92A1              ; we could cheat, flip the sign of DE and just add but its not very optimised
 102+ 92A1 7C           StarsSUBHLDESigned:     ld      a,h
 103+ 92A2 E6 80                                and     SignOnly8Bit
 104+ 92A4 47                                   ld      b,a                         ;save sign bit in b
 105+ 92A5 AA                                   xor     d                           ;if h sign and d sign were different then bit 7 of a will be 1 which means
 106+ 92A6                                      JumpIfNegative .SUBHLDEOppSGN        ;Signs are opposite therefore we can add
 106+ 92A6 FA D4 92    >                        jp		m, .SUBHLDEOppSGN
 107+ 92A9 78           .SUBHLDESameSigns:      ld      a,b
 108+ 92AA B2                                   or      d
 109+ 92AB                                      JumpIfNegative .SUBHLDESameNeg       ; optimisation so we can just do simple add if both positive
 109+ 92AB FA B5 92    >                        jp		m, .SUBHLDESameNeg
 110+ 92AE B7                                   or      a
 111+ 92AF ED 52                                sbc     hl,de
 112+ 92B1                                      JumpIfNegative .SUBHLDESameOvrFlw
 112+ 92B1 FA C8 92    >                        jp		m, .SUBHLDESameOvrFlw
 113+ 92B4 C9                                   ret
 114+ 92B5 7C           .SUBHLDESameNeg:        ld      a,h                         ; so if we enter here then signs are the same so we clear the 16th bit
 115+ 92B6 E6 7F                                and     SignMask8Bit                ; we could check the value of b for optimisation
 116+ 92B8 67                                   ld      h,a
 117+ 92B9 7A                                   ld      a,d
 118+ 92BA E6 7F                                and     SignMask8Bit
 119+ 92BC 57                                   ld      d,a
 120+ 92BD B7                                   or      a
 121+ 92BE ED 52                                sbc     hl,de
 122+ 92C0                                      JumpIfNegative .SUBHLDESameOvrFlw
 122+ 92C0 FA C8 92    >                        jp		m, .SUBHLDESameOvrFlw
 123+ 92C3 7C                                   ld      a,h                         ; now set bit for negative value, we won't bother with overflow for now TODO
 124+ 92C4 F6 80                                or      SignOnly8Bit
 125+ 92C6 67                                   ld      h,a
 126+ 92C7 C9                                   ret
 127+ 92C8              .SUBHLDESameOvrFlw:     NegHL
 127+ 92C8 AF          >                    xor a
 127+ 92C9 95          >                    sub l
 127+ 92CA 6F          >                    ld l,a
 127+ 92CB 9F          >                    sbc a,a
 127+ 92CC 94          >                    sub h
 127+ 92CD 67          >                    ld h,a
 128+ 92CE 78                                   ld      a,b
 129+ 92CF EE 80                                xor     SignOnly8Bit                ; flip sign bit
 130+ 92D1 B4                                   or      h
 131+ 92D2 67                                   ld      h,a                         ; recover sign
 132+ 92D3 C9                                   ret
 133+ 92D4 B7           .SUBHLDEOppSGN:         or      a
 134+ 92D5 7C                                   ld      a,h                         ; so if we enter here then signs are the same so we clear the 16th bit
 135+ 92D6 E6 7F                                and     SignMask8Bit                ; we could check the value of b for optimisation
 136+ 92D8 67                                   ld      h,a
 137+ 92D9 7A                                   ld      a,d
 138+ 92DA E6 7F                                and     SignMask8Bit
 139+ 92DC 57                                   ld      d,a
 140+ 92DD 19                                   add     hl,de
 141+ 92DE 78                                   ld      a,b                         ; we got here so hl > de therefore we can just take hl's previous sign bit
 142+ 92DF B4                                   or      h
 143+ 92E0 67                                   ld      h,a                         ; set the previou sign value
 144+ 92E1 C9                                   ret
 145+ 92E2
 146+ 92E2 7C           StarsADDHLDESigned:     ld      a,h
 147+ 92E3 E6 80                                and     SignOnly8Bit
 148+ 92E5 47                                   ld      b,a                         ;save sign bit in b
 149+ 92E6 AA                                   xor     d                           ;if h sign and d sign were different then bit 7 of a will be 1 which means
 150+ 92E7                                      JumpIfNegative .ADDHLDEOppSGN        ;Signs are opposite there fore we can subtract to get difference
 150+ 92E7 FA FF 92    >                        jp		m, .ADDHLDEOppSGN
 151+ 92EA 78           .ADDHLDESameSigns:      ld      a,b
 152+ 92EB B2                                   or      d
 153+ 92EC                                      JumpIfNegative .ADDHLDESameNeg       ; optimisation so we can just do simple add if both positive
 153+ 92EC FA F1 92    >                        jp		m, .ADDHLDESameNeg
 154+ 92EF 19                                   add     hl,de
 155+ 92F0 C9                                   ret
 156+ 92F1 7C           .ADDHLDESameNeg:        ld      a,h                         ; so if we enter here then signs are the same so we clear the 16th bit
 157+ 92F2 E6 7F                                and     SignMask8Bit                ; we could check the value of b for optimisation
 158+ 92F4 67                                   ld      h,a
 159+ 92F5 7A                                   ld      a,d
 160+ 92F6 E6 7F                                and     SignMask8Bit
 161+ 92F8 57                                   ld      d,a
 162+ 92F9 19                                   add     hl,de
 163+ 92FA 3E 80                                ld      a,SignOnly8Bit
 164+ 92FC B4                                   or      h                           ; now set bit for negative value, we won't bother with overflow for now TODO
 165+ 92FD 67                                   ld      h,a
 166+ 92FE C9                                   ret
 167+ 92FF 7C           .ADDHLDEOppSGN:         ld      a,h                         ; here HL and DE are opposite  so if we enter here then signs are the same so we clear the 16th bit
 168+ 9300 E6 7F                                and     SignMask8Bit                ; we could check the value of b for optimisation
 169+ 9302 67                                   ld      h,a
 170+ 9303 7A                                   ld      a,d
 171+ 9304 E6 7F                                and     SignMask8Bit
 172+ 9306 57                                   ld      d,a
 173+ 9307 B7                                   or      a
 174+ 9308 ED 52                                sbc     hl,de
 175+ 930A 38 04                                jr      c,.ADDHLDEOppInvert
 176+ 930C 78           .ADDHLDEOppSGNNoCarry:  ld      a,b                         ; we got here so hl > de therefore we can just take hl's previous sign bit
 177+ 930D B4                                   or      h
 178+ 930E 67                                   ld      h,a                         ; set the previou sign value
 179+ 930F C9                                   ret
 180+ 9310              .ADDHLDEOppInvert:      NegHL
 180+ 9310 AF          >                    xor a
 180+ 9311 95          >                    sub l
 180+ 9312 6F          >                    ld l,a
 180+ 9313 9F          >                    sbc a,a
 180+ 9314 94          >                    sub h
 180+ 9315 67          >                    ld h,a
 181+ 9316 78                                   ld      a,b
 182+ 9317 EE 80                                xor     SignOnly8Bit                ; flip sign bit
 183+ 9319 B4                                   or      h
 184+ 931A 67                                   ld      h,a                         ; recover sign
 185+ 931B C9                                   ret
 186+ 931C              ;----------------------------------------------------------------------------------------------------------------------------------
 187+ 931C 06 0B        InitialiseStars:        ld      b,MaxNumberOfStars
 188+ 931E 21 81 9B                             ld      hl,varDust
 189+ 9321 CD 1D 92     .InitStarsLoop:         call    InitStarAtHL
 190+ 9324 10 FB                                djnz    .InitStarsLoop
 191+ 9326 C9                                   ret
 192+ 9327              ;----------------------------------------------------------------------------------------------------------------------------------
 193+ 9327 06 0B        InitialiseHyperStars:   ld      b,MaxNumberOfStars
 194+ 9329 21 81 9B                             ld      hl,varDust
 195+ 932C CD 5B 92     .InitStarsLoop:         call    InitHyperStarAtHL
 196+ 932F 10 FB                                djnz    .InitStarsLoop
 197+ 9331 C9                                   ret
 198+ 9332              ;----------------------------------------------------------------------------------------------------------------------------------
 199+ 9332 06 0B        DustForward:            ld      b,MaxNumberOfStars                  ; get the number of stars to process
 200+ 9334 FD 21 81 9B                          ld      iy,varDust                          ; hl is now a pointer to the dust array
 201+ 9338 C5           StarProcessLoop:        push    bc                                  ; save counter +1
 202+ 9339 FD 7E 05     .Qequ64XSpeedDivZHi:    ld      a,(iy+5)                            ; e  = z high
 203+ 933C 5F                                   ld      e,a                                 ; d = 0
 204+ 933D 16 00                                ld      d,0                                 ; de = zhi/256
 205+ 933F 3A 23 99                             ld      a,(DELTA)                           ; a = speed
 206+ 9342                                      JumpIfAIsNotZero .NormalSpeed               ; if we are stationary set speed
 206+ 9342 FE 00       >                        cp	0
 206+ 9344 C2 48 93    >                        jp	nz,.NormalSpeed
 207+ 9347 3C                                   inc     a                                   ; so it is at least some dust movement
 208+ 9348 47           .NormalSpeed:           ld      b,a                                 ;
 209+ 9349 0E 00                                ld      c,0                                 ; bc = delta * 256
 210+ 934B CD F1 AB                             call    BC_Div_DE                           ; BC = Speed/Z , HL = remainder
 211+ 934E                                      ShiftHLRight1
 211+ 934E CB 3C       >			   srl h
 211+ 9350 CB 1D       >			   rr  l
 212+ 9352                                      ShiftHLRight1                               ; hl = remainder/2 so now 64 * speed / zhi
 212+ 9352 CB 3C       >			   srl h
 212+ 9354 CB 1D       >			   rr  l
 213+ 9356 7D                                   ld      a,l                                 ;
 214+ 9357 F6 01                                or      1                                   ; so ensure A is at least 1 for ambient movement
 215+ 9359 DD 6F                                ld      ixl,a                               ; preserve A which is also VarQ = 64 * speed / zhi
 216+ 935B FD 6E 04 FD  .ZequZMinusSpeedX64:    ld      hl,(iy+4)                           ; hl = z
 216+ 935F 66 05
 217+ 9361 ED 5B 24 99                          ld      de, (DELTA4)                         ; de = delta4 i.e. speed * 64 pre computed
 218+ 9365 CD A1 92                             call    StarsSUBHLDESigned
 219+ 9368                                      JumpOnBitSet h,7,ResetStar                  ; if z ended up negative then reset the star
 219+ 9368 CB 7C       >                        bit 	7,h
 219+ 936A C2 BF 94    >                        jp      nz,ResetStar
 220+ 936D FD 75 04 FD                          ld      (iy+4),hl                           ; save new z pos
 220+ 9371 74 05
 221+ 9373 FD 6E 00 FD  .XEquXPlusXhiMulQ       ld      hl,(iy+0)                           ; hl  = x
 221+ 9377 66 01
 222+ 9379 7C                                   ld      a,h                                 ;
 223+ 937A E6 7F                                and     $7F                                 ;
 224+ 937C 57                                   ld      d,a                                 ; d = abs(x hi)
 225+ 937D DD 5D                                ld      e,ixl                               ; e = Q = 64 * speed / zhi
 226+ 937F ED 30                                mul                                         ; de =  abs(x hi) * Q
 227+ 9381 7C                                   ld      a,h                                 ;
 228+ 9382 E6 80                                and     $80                                 ;
 229+ 9384 B2                                   or      d                                   ; set sign bit in d
 230+ 9385 57                                   ld      d,a                                 ;
 231+ 9386 CD E2 92                             call    StarsADDHLDESigned                  ; x = x + (x hi/256 * Q)
 232+ 9389 7C                                   ld      a,h
 233+ 938A E6 7F                                and     $7F
 234+ 938C                                      JumpIfAGTENusng $70, ResetStar
 234+ 938C FE 70       >                        cp     $70
 234+ 938E D2 BF 94    >                        jp		nc,ResetStar
 235+ 9391 FD 75 00 FD                          ld      (iy+0),hl                           ;
 235+ 9395 74 01
 236+ 9397 FD 6E 02 FD  .YEquYPlusYhiMulQ       ld      hl,(iy+2)                           ; hl  = y
 236+ 939B 66 03
 237+ 939D 7C                                   ld      a,h                                 ;
 238+ 939E E6 7F                                and     $7F                                 ;
 239+ 93A0 57                                   ld      d,a                                 ; d = abs(y hi)
 240+ 93A1 DD 5D                                ld      e,ixl                               ; e = Q = 64 * speed / zhi
 241+ 93A3 ED 30                                mul                                         ; de =  abs(y hi) * Q
 242+ 93A5 7C                                   ld      a,h                                 ;
 243+ 93A6 E6 80                                and     $80                                 ;
 244+ 93A8 B2                                   or      d                                   ; set sign bit in d
 245+ 93A9 57                                   ld      d,a                                 ;
 246+ 93AA CD E2 92                             call    StarsADDHLDESigned                  ; y = y + (x hi/256 * Q)
 247+ 93AD 7C                                   ld      a,h
 248+ 93AE E6 7F                                and     $7F
 249+ 93B0                                      JumpIfAGTENusng $60, ResetStar
 249+ 93B0 FE 60       >                        cp     $60
 249+ 93B2 D2 BF 94    >                        jp		nc,ResetStar
 250+ 93B5 7C                                   ld      a,h
 251+ 93B6 E6 80                                and     $80
 252+ 93B8 20 06                                jr      nz,.NoSecondCheck
 253+ 93BA 7C                                   ld      a,h
 254+ 93BB                                      JumpIfAGTENusng $20, ResetStar
 254+ 93BB FE 20       >                        cp     $20
 254+ 93BD D2 BF 94    >                        jp		nc,ResetStar
 255+ 93C0 FD 75 02 FD  .NoSecondCheck:         ld      (iy+2),hl                           ;
 255+ 93C4 74 03
 256+ 93C6              ; Now roll
 257+ 93C6              ;  6. x = x - alpha * y / 256
 258+ 93C6 2A 3E 98     .XRoll:                 ld      hl,(ALP1)                           ; h = sign, l = magnitude
 259+ 93C9 7D                                   ld      a,l
 260+ 93CA FE 00                                cp      0
 261+ 93CC 28 4C                                jr      z,.NoRoll                           ; don;t roll if magnitude is 0
 262+ 93CE                                      ;break
 263+ 93CE                                      ;ld      a,$80
 264+ 93CE                                      ;xor     l                                   ; l = flipped sign as we are rotating stars not us
 265+ 93CE E5                                   push    hl
 266+ 93CF 7C                                   ld      a,h
 267+ 93D0 E6 80                                and     $80
 268+ 93D2 4F           .rxSaveAlphaSign:       ld      c,a                                 ; save alpha sign in c
 269+ 93D3 55           .rxDEquABSAlpha:        ld      d,l                                 ; d= abs (alpha)
 270+ 93D4 FD 7E 03                             ld      a,(iy+3)                            ; get high byte from x coord
 271+ 93D7 5F                                   ld      e,a
 272+ 93D8 E6 80                                and     $80
 273+ 93DA 47           .rxBEquSignXHi:         ld      b,a                                 ; save sign of x in b
 274+ 93DB 7B           .rxEEquABSignX:         ld      a,e
 275+ 93DC E6 7F                                and     $7F
 276+ 93DE 5F                                   ld      e,a                                 ; save abs x hi in e
 277+ 93DF ED 30                                mul                                         ; abs(alpha) * abs(y high) (so /256)
 278+ 93E1 79                                   ld      a,c
 279+ 93E2 A8                                   xor     b                                   ; handle muliple sign bits
 280+ 93E3 B2                                   or      d
 281+ 93E4 57                                   ld      d,a                                 ; de = signed alpha & y high / 256
 282+ 93E5 FD 6E 00 FD                          ld      hl,(iy+0)                           ; h = iy+1, l = iy+0
 282+ 93E9 66 01
 283+ 93EB CD A1 92                             call    StarsSUBHLDESigned                  ; we are usign add, so may need to fip sign?
 284+ 93EE FD 75 00 FD                          ld      (iy+0),hl
 284+ 93F2 74 01
 285+ 93F4              ;  5. y = y + alpha * x / 256
 286+ 93F4              .YRoll:                 ;break
 287+ 93F4 E1                                   pop     hl                                  ; h = sign, l = magnitude
 288+ 93F5 7C                                   ld      a,h
 289+ 93F6 E6 80                                and     $80
 290+ 93F8 4F           .rySaveAlphaSign:       ld      c,a                                 ; save alpha sign in c
 291+ 93F9 55           .ryDEquABSAlpha:        ld      d,l                                 ; d= abs (alpha)
 292+ 93FA FD 7E 01                             ld      a,(iy+1)                            ; get high byte from x coord
 293+ 93FD 5F                                   ld      e,a
 294+ 93FE E6 80                                and     $80
 295+ 9400 47           .ryBEquSignXHi:         ld      b,a                                 ; save sign of x in b
 296+ 9401 7B           .ryEEquABSignX:         ld      a,e
 297+ 9402 E6 7F                                and     $7F
 298+ 9404 5F                                   ld      e,a                                 ; save abs x hi in e
 299+ 9405 ED 30                                mul                                         ; abs(alpha) * abs(y high) (so /256)
 300+ 9407 79                                   ld      a,c
 301+ 9408 A8                                   xor     b                                   ; handle muliple sign bits
 302+ 9409 B2                                   or      d
 303+ 940A 57                                   ld      d,a                                 ; de = signed alpha & y high / 256
 304+ 940B FD 6E 02 FD                          ld      hl,(iy+2)                           ; h = iy+1, l = iy+0
 304+ 940F 66 03
 305+ 9411 CD E2 92                             call    StarsADDHLDESigned                  ; we are usign add, so may need to fip sign?
 306+ 9414 FD 75 02 FD                          ld      (iy+2),hl
 306+ 9418 74 03
 307+ 941A 3A 31 98     .NoRoll:                ld      a,(BET1)
 308+ 941D FE 00                                cp      0
 309+ 941F 28 22                                jr      z,.NoPitch
 310+ 9421              ;  8. y = y - beta * 256
 311+ 9421 57           .YPitch:                ld      d,a                                 ; d = BET1
 312+ 9422 FD 7E 02                             ld      a,(iy+2)
 313+ 9425 5F                                   ld      e,a                                 ; e = Y HI
 314+ 9426 ED 30                                mul                                         ; de = BET1 * YHi so now D = BETA & YHI / 256
 315+ 9428 5F                                   ld      e,a
 316+ 9429 ED 30                                mul                                         ; so now de = (BETA & Yhi) ^ 2
 317+ 942B                                      ShiftDELeft1                                ; de = 2 * ((BETA & Yhi) ^ 2)
 317+ 942B CB 23       >			   sla e
 317+ 942D CB 12       >			   rl  d
 318+ 942F 3A 33 98                             ld      a,(BET2FLIP)                        ; get inverted Sign
 319+ 9432 B2                                   or      d
 320+ 9433 57                                   ld      d,a                                 ; de = - (2 * ((BETA & Yhi) ^ 2))
 321+ 9434 FD 6E 02 FD                          ld      hl,(iy+2)
 321+ 9438 66 03
 322+ 943A CD E2 92                             call    StarsADDHLDESigned
 323+ 943D FD 75 02 FD                          ld      (iy+2),hl
 323+ 9441 74 03
 324+ 9443              ; now work out screen pos
 325+ 9443              ; Note two optimistations, write to layer 2 - we get a free removal via double buffer cls
 326+ 9443              ; read z dept than determine hw many pixesl to plot, e.g. 1,2,3,4
 327+ 9443              ;        pop     de
 328+ 9443               ;       call    ProjectStarXToScreen
 329+ 9443                                      ;pop     de
 330+ 9443              .NoPitch:
 331+ 9443 FD 7E 01     .ProjectStar:           ld      a,(iy+1)
 332+ 9446 6F                                   ld      l,a
 333+ 9447 E6 7F                                and     $7F
 334+ 9449                                      JumpOnBitSet l,7,StarNegXPt
 334+ 9449 CB 7D       >                        bit 	7,l
 334+ 944B C2 54 94    >                        jp      nz,StarNegXPt
 335+ 944E C6 80                                add     a,$80
 336+ 9450 4F                                   ld      c,a
 337+ 9451 C3 59 94                             jp      StarDoneX
 338+ 9454 47           StarNegXPt:             ld      b,a
 339+ 9455 3E 80                                ld      a,$80
 340+ 9457 90                                   sub     b
 341+ 9458 4F                                   ld      c,a
 342+ 9459 FD 7E 03     StarDoneX:              ld      a,(iy+3)
 343+ 945C 6F                                   ld      l,a
 344+ 945D E6 7F                                and     $7F
 345+ 945F                                      JumpOnBitSet l,7,StarNegYPt
 345+ 945F CB 7D       >                        bit 	7,l
 345+ 9461 C2 6A 94    >                        jp      nz,StarNegYPt
 346+ 9464 C6 60                                add     a,$60
 347+ 9466 47                                   ld      b,a
 348+ 9467 C3 6F 94                             jp      StarDoneY
 349+ 946A 47           StarNegYPt:             ld      b,a
 350+ 946B 3E 60                                ld      a,$60
 351+ 946D 90                                   sub     b
 352+ 946E 47                                   ld      b,a
 353+ 946F 3E 92        StarDoneY:              ld      a,L2DustColour
 354+ 9471 C5                                   push    bc
 355+ 9472              .DrawStar:              MMUSelectLayer2
 355+ 9472 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 355+ 9476 CD FF E0       call    l2_plot_pixel
 356+ 9479 FD 7E 05                             ld      a,(iy+5)
 357+ 947C C1                                   pop    bc
 358+ 947D                                      JumpIfAGTENusng $60,EndofStarsLoop
 358+ 947D FE 60       >                        cp     $60
 358+ 947F D2 AF 94    >                        jp		nc,EndofStarsLoop
 359+ 9482 3E 92                                ld      a,L2DustColour
 360+ 9484 0C                                   inc     c
 361+ 9485 C5                                   push    bc
 362+ 9486                                      MMUSelectLayer2
 362+ 9486 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 363+ 948A CD FF E0                             call    l2_plot_pixel
 364+ 948D FD 7E 05                             ld      a,(iy+5)
 365+ 9490 C1                                   pop    bc
 366+ 9491                                      JumpIfAGTENusng $37,EndofStarsLoop
 366+ 9491 FE 37       >                        cp     $37
 366+ 9493 D2 AF 94    >                        jp		nc,EndofStarsLoop
 367+ 9496 3E 92                                ld      a,L2DustColour
 368+ 9498 04                                   inc     b
 369+ 9499 C5                                   push    bc
 370+ 949A                                      MMUSelectLayer2
 370+ 949A ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 370+ 949E CD FF E0         call    l2_plot_pixel
 371+ 94A1 FD 7E 05                             ld      a,(iy+5)
 372+ 94A4 C1                                   pop    bc
 373+ 94A5 3E 92                                ld      a,L2DustColour
 374+ 94A7 0D                                   dec     c
 375+ 94A8                                      MMUSelectLayer2
 375+ 94A8 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 375+ 94AC CD FF E0         call    l2_plot_pixel
 376+ 94AF C1           EndofStarsLoop:         pop     bc                                      ;  0
 377+ 94B0 FD E5        NextStarLoop3:          push    iy                                      ; +1
 378+ 94B2 E1                                   pop     hl                                      ;  0
 379+ 94B3 ED 34 06 00                          add     hl,6
 380+ 94B7 E5           NextStarLoop2:          push    hl                                      ; +1
 381+ 94B8 FD E1                                pop     iy                                      ;  0
 382+ 94BA 05                                   dec     b
 383+ 94BB C2 38 93                             jp      nz,StarProcessLoop
 384+ 94BE C9                                   ret
 385+ 94BF C1           ResetStar:              pop     bc                                      ; 0
 386+ 94C0 FD E5                                push    iy                                      ; +1 (current star)
 387+ 94C2 E1                                   pop     hl                                      ; 0
 388+ 94C3 CD 1D 92                             call    InitStarAtHL
 389+ 94C6 C3 B0 94                             jp      NextStarLoop3
 390+ 94C9              ;----------------------------------------------------------------------------------------------------------------------------------
 391+ 94C9 FD 4E 00     ProjectStarXToScreen:   ld      c,(iy+0)
 392+ 94CC FD 7E 01                             ld      a,(iy+1)
 393+ 94CF 6F                                   ld      l,a
 394+ 94D0 E6 7F                                and     $7F
 395+ 94D2 47                                   ld      b,a
 396+ 94D3 CD 94 AB                             call    DIV16BCDivDEUNDOC
 397+ 94D6 7D                                   ld      a,l
 398+ 94D7                                      JumpOnBitSet a,7,StarXNegativePoint             ; LL62 up, -ve Xdist, RU screen onto XX3 heap
 398+ 94D7 CB 7F       >                        bit 	7,a
 398+ 94D9 C2 E4 94    >                        jp      nz,StarXNegativePoint
 399+ 94DC              ;StarXPositivePoint:									; x was positive result
 400+ 94DC 2E 80                                ld          l,ScreenCenterX						;
 401+ 94DE 26 00                                ld          h,0
 402+ 94E0 09                                   add         hl,bc								; hl = Screen Centre + X
 403+ 94E1 C3 EB 94                             jp          StarStoreXPoint
 404+ 94E4              StarXNegativePoint:                                 ; x < 0 so need to subtract from the screen centre position
 405+ 94E4 2E 80                                ld          l,ScreenCenterX
 406+ 94E6 26 00                                ld          h,0
 407+ 94E8                                      ClearCarryFlag
 407+ 94E8 B7          >                        or a
 408+ 94E9 ED 42                                sbc         hl,bc                               ; hl = Screen Centre - X
 409+ 94EB              StarStoreXPoint:                                    ; also from LL62, XX3 node heap has xscreen node so far.
 410+ 94EB 7D                                   ld          a,l
 411+ 94EC 32 D9 9B                             ld          (varStarX),a
 412+ 94EF C9                                   ret
 413+ 94F0
 414+ 94F0 FD 46 02     ProjectStarYToScreen:   ld          b,(iy+2)
 415+ 94F3 FD 7E 03                             ld          a,(iy+3)
 416+ 94F6 6F                                   ld          l,a
 417+ 94F7 E6 7F                                and         $7F
 418+ 94F9 47                                   ld          b,a
 419+ 94FA CD 94 AB                             call        DIV16BCDivDEUNDOC
 420+ 94FD 7D                                   ld          a,l                                 ; XX15+2 \ sign of X dist
 421+ 94FE                                      JumpOnBitSet a,7,StarNegativeYPoint             ; LL62 up, -ve Xdist, RU screen onto XX3 heap top of screen is Y = 0
 421+ 94FE CB 7F       >                        bit 	7,a
 421+ 9500 C2 0B 95    >                        jp      nz,StarNegativeYPoint
 422+ 9503                                  ;StarPositiveYPoint:									; Y is positive so above the centre line
 423+ 9503 2E 60                               ld          l,ScreenCenterY
 424+ 9505                                      ClearCarryFlag
 424+ 9505 B7          >                        or a
 425+ 9506 ED 42                                sbc         hl,bc  							 	; hl = ScreenCentreY - Y coord (as screen is 0 at top)
 426+ 9508 C3 10 95                             jp          StarStoreYPoint
 427+ 950B              StarNegativeYPoint:									; this bit is only 8 bit aware TODO FIX
 428+ 950B 2E 60                                ld          l,ScreenCenterY
 429+ 950D 26 00                                ld          h,0
 430+ 950F 09                                   add         hl,bc								; hl = ScreenCenterY + Y as negative is below the center of screen
 431+ 9510              StarStoreYPoint:                                    ; also from LL62, XX3 node heap has xscreen node so far.
 432+ 9510 7D                                   ld          a,l
 433+ 9511 32 DA 9B                             ld          (varStarY),a
 434+ 9514 C9                                   ret
 435+ 9515
 436+ 9515
# file closed: ./Universe/StarDust/StarRoutines.asm
1072  9515              ;    include "Universe/move_object-MVEIT.asm"
1073  9515              ;    include "./ModelRender/draw_object.asm"
1074  9515              ;    include "./ModelRender/draw_ship_point.asm"
1075  9515              ;    include "./ModelRender/drawforwards-LL17.asm"
1076  9515
1077  9515                  INCLUDE	"./Hardware/memfill_dma.asm"
# file opened: ./Hardware/memfill_dma.asm
   1+ 9515
   2+ 9515 00           memfillvalue		DB 0
   3+ 9516 83 C3 C7 CB  memfill        		DB DMA_DISABLE,  DMA_RESET, DMA_RESET_PORT_A_TIMING, DMA_RESET_PORT_B_TIMING ,DMA_WRO_BLOCK_PORTA_A2B_XFR
   3+ 951A 7D
   4+ 951B 15 95        memfill_astrt  		DW memfillvalue
   5+ 951D 00 40        memfill_length 		DB $00,$40
   6+ 951F 24 10 AD     					DB DMA_WR1_P1FIXED_MEMORY ,DMA_WR2_P2INC_MEMORY ,DMA_WR4_CONT_MODE
   7+ 9522 00 00        memfill_bstrt  		DB $00,$00
   8+ 9524 82 CF B3 87  					DB DMA_STOP_AT_END, DMA_LOAD, DMA_FORCE_READY, DMA_ENABLE
   9+ 9528              memfill_cmd_len	  	EQU $ - memfill
  10+ 9528
  11+ 9528              memfill_dma:
  12+ 9528              ; "memfill_dma, hl = address to fill, a = value, de = length"
  13+ 9528              .set_fill_value:
  14+ 9528 32 15 95     	ld 		(memfillvalue),a
  15+ 952B              .set_target:
  16+ 952B 22 22 95     	ld		(memfill_bstrt),hl
  17+ 952E              .set_length:
  18+ 952E ED 53 1D 95  	ld		(memfill_length),de
  19+ 9532              .write_dma:
  20+ 9532 21 16 95     	ld 		hl, memfill
  21+ 9535 06 12        	ld 		b, memfill_cmd_len
  22+ 9537 0E 6B        	ld		c,IO_DATAGEAR_DMA_PORT
  23+ 9539 ED B3        	otir
  24+ 953B C9           	ret
  25+ 953C
# file closed: ./Hardware/memfill_dma.asm
1078  953C                  INCLUDE	"./Hardware/memcopy_dma.asm"
# file opened: ./Hardware/memcopy_dma.asm
   1+ 953C
   2+ 953C 83 C3 C7 CB  memcopy        		DB DMA_DISABLE,  DMA_RESET, DMA_RESET_PORT_A_TIMING, DMA_RESET_PORT_B_TIMING ,DMA_WRO_BLOCK_PORTA_A2B_XFR
   2+ 9540 7D
   3+ 9541 00 00        memcopy_astrt  		DB $00,$00
   4+ 9543 00 40        memcopy_length 		DB $00,$40
   5+ 9545 14 10 AD     					DB DMA_WR1_P1INC_MEMORY ,DMA_WR2_P2INC_MEMORY ,DMA_WR4_CONT_MODE
   6+ 9548 00 00        memcopy_bstrt  		DB $00,$00
   7+ 954A 82 CF B3 87  					DB DMA_STOP_AT_END, DMA_LOAD, DMA_FORCE_READY, DMA_ENABLE
   8+ 954E              memcopy_cmd_len	  	equ $ - memcopy
   9+ 954E
  10+ 954E              memcopy_dma:
  11+ 954E              ; "memcopy_dma, hl = target address de = source address to copy, bc = length"
  12+ 954E              .set_target:
  13+ 954E 22 48 95     	ld		(memcopy_bstrt),hl
  14+ 9551              .set_source:
  15+ 9551 ED 53 41 95  	ld		(memcopy_astrt),de
  16+ 9555              .set_length:
  17+ 9555 ED 43 43 95  	ld		(memcopy_length),bc
  18+ 9559              .write_dma:
  19+ 9559 21 3C 95     	ld 		hl, memcopy
  20+ 955C 06 12        	ld 		b, memcopy_cmd_len
  21+ 955E 0E 6B        	ld		c,IO_DATAGEAR_DMA_PORT
  22+ 9560 ED B3        	otir
  23+ 9562 C9           	ret
  24+ 9563
# file closed: ./Hardware/memcopy_dma.asm
1079  9563 00 00        XX12PVarQ			DW 0
1080  9565 00 00        XX12PVarR			DW 0
1081  9567 00 00        XX12PVarS			DW 0
1082  9569 00 00        XX12PVarResult1		DW 0
1083  956B 00 00        XX12PVarResult2		DW 0
1084  956D 00 00        XX12PVarResult3		DW 0
1085  956F 00           XX12PVarSign2		DB 0
1086  9570 00           XX12PVarSign1		DB 0								; Note reversed so BC can do a little endian fetch
1087  9571 00           XX12PVarSign3		DB 0
1088  9572                  INCLUDE "./Hardware/keyboard.asm"
# file opened: ./Hardware/keyboard.asm
   1+ 9572              ;
   2+ 9572              ; $FEFE;65278 V, C, X, Z, Caps Shifts       4  3  2  1  0
   3+ 9572              ; $FDFE;65022 G, F, D, S, A                 9  8  7  6  5
   4+ 9572              ; $FBFE;64510 T, R, E, W, Q                14 13 12 11 10
   5+ 9572              ; $F7FE;63486 5, 4, 3, 2, 1                19 18 17 16 15
   6+ 9572              ; $EFFE;61438 6, 7, 8, 9, 0                24 23 22 23 20
   7+ 9572              ; $DFFE;57342 Y, U, I, O, P                29 28 27 26 25
   8+ 9572              ; $BFFE;49150 H, J, K, L, Enter            34 33 32 31 30
   9+ 9572              ; $7FFE;32766 B, N, M, Symbol Shift, Space 39 38 37 36 35
  10+ 9572              ;
  11+ 9572              ; Keyboard
  12+ 9572              ;
  13+ 9572              ;   0      1       2       3       4       5        6       7       8       9
  14+ 9572              ;  VK_CAPS, VK_Z,  VK_X,   VK_C,   VK_V,   VK_A,    VK_S,   VK_D,   VK_F,   VK_G
  15+ 9572              ;   10     11      12      13      14      15       16      17      18      19
  16+ 9572              ;  VK_Q,   VK_W,   VK_E,   VK_R,   VK_T,   VK_1,    VK_2,   VK_3,   VK_4,   VK_5
  17+ 9572              ;   20     21      22      23      24      25       26      27      28      29
  18+ 9572              ;  VK_0    VK_9,   VK_8,   VK_7,   VK_6,   VK_P ,    VK_O,  VK_I,   VK_U,   VK_Y
  19+ 9572              ;   30     31      32      33      34      35       36      37      38      39
  20+ 9572              ; VK_ENTER VK_L,   VK_K,   VK_J,   VK_H,   VK_SPACE VK_SYM, VK_M,   VK_N,   VK_B
  21+ 9572              ;
  22+ 9572              ; Default map
  23+ 9572              ;-----------------------------------------------------------------------------------------------------------------------------------
  24+ 9572              ;   0          1           2             3              4           5           6           7           8           9
  25+ 9572              ;   VK_CAPS    VK_Z        VK_X,         VK_C,          VK_V,       VK_A        VK_S,       VK_D,       VK_F,       VK_G
  26+ 9572              ;              GameSkip                  Equip          SelLCargo   Climb       Decelerate  Recentre    FireM       HomeCursor
  27+ 9572              ;                                                                                                       Find System
  28+ 9572              ;-----------------------------------------------------------------------------------------------------------------------------------
  29+ 9572              ;   10         11          12            13             14          15          16          17          18          19
  30+ 9572              ;   VK_Q       VK_W,       VK_E,         VK_R,          VK_T,       VK_1        VK_2        VK_3        VK_4        VK_5
  31+ 9572              ;   Dive       Accelerate  ECM           UnarmMissile   TargetM     FrontV      AftV        LeftV       RightV      GalacticChart
  32+ 9572              ;-----------------------------------------------------------------------------------------------------------------------------------
  33+ 9572              ;   20         Accel       22            23             24          25          26          27          28          29
  34+ 9572              ;   VK_0       VK_9,       VK_8,         VK_7,          VK_6,       VK_P ,      VK_O,       VK_I,       VK_U,       VK_Y
  35+ 9572              ;   EscapePod  Inventory   Status        MarketPrices   LocalChart  RollRight   RolLLeft                EnergyBomb  Quit
  36+ 9572              ;   PlanetData                                                      PauseGame   SaveGame
  37+ 9572              ;-----------------------------------------------------------------------------------------------------------------------------------
  38+ 9572              ;   30         31          32            33             34          Right       36          37          EnergyBomb  39
  39+ 9572              ;   VK_ENTER   VK_L,       VK_K,         VK_J,          VK_H,       VK_SPACE    VK_SYM,     VK_M,       VK_N,       VK_B
  40+ 9572              ;              Launch                    Distance       Hyperspace  Laser                               DockComp    BuyCargo
  41+ 9572              ;              ResumeGame
  42+ 9572
  43+ 9572              ; You can read address to check keystate by address KeyboardMap + c_Pressed corresponding key. There is also an addr_ helper too
  44+ 9572
  45+ 9572              c_Pressed_Front         equ 0  * 2
  46+ 9572              c_Pressed_Aft           equ 1  * 2
  47+ 9572              c_Pressed_Left          equ 2  * 2
  48+ 9572              c_Pressed_Right         equ 3  * 2
  49+ 9572              c_Pressed_RollLeft      equ 4  * 2
  50+ 9572              c_Pressed_RollRight     equ 5  * 2
  51+ 9572              c_Pressed_Dive          equ 6  * 2
  52+ 9572              c_Pressed_Climb         equ 7  * 2
  53+ 9572              c_Pressed_Accellerate   equ 8  * 2
  54+ 9572              c_Pressed_Decellerate   equ 9  * 2
  55+ 9572              c_Pressed_FireLaser     equ 10 * 2
  56+ 9572              c_Pressed_TargetMissle  equ 11 * 2
  57+ 9572              c_Pressed_FireMissile   equ 12 * 2
  58+ 9572              c_Pressed_UnarmMissile  equ 13 * 2
  59+ 9572              c_Pressed_ECM           equ 14 * 2
  60+ 9572              c_Pressed_EnergyBomb    equ 15 * 2
  61+ 9572              c_Pressed_EscapePod     equ 16 * 2
  62+ 9572              c_Pressed_DockingComp   equ 17 * 2
  63+ 9572              c_Pressed_Hyperspace    equ 18 * 2
  64+ 9572              c_Pressed_Distance      equ 19 * 2
  65+ 9572              c_Pressed_HomeCursor    equ 20 * 2
  66+ 9572              c_Pressed_Launch        equ 21 * 2
  67+ 9572              c_Pressed_BuyCargo      equ 22 * 2
  68+ 9572              c_Pressed_SellCargo     equ 23 * 2
  69+ 9572              c_Pressed_Equip         equ 24 * 2
  70+ 9572              c_Pressed_GalacticChrt  equ 25 * 2
  71+ 9572              c_Pressed_LocalChart    equ 26 * 2
  72+ 9572              c_Pressed_MarketPrices  equ 27 * 2
  73+ 9572              c_Pressed_Status        equ 28 * 2
  74+ 9572              c_Pressed_Inventory     equ 29 * 2
  75+ 9572              c_Pressed_GameSkip      equ 30 * 2
  76+ 9572              c_Pressed_Save          equ 31 * 2
  77+ 9572              c_Pressed_Freeze        equ 32 * 2
  78+ 9572              c_Pressed_Resume        equ 33 * 2
  79+ 9572              c_Pressed_Recentre      equ 34 * 2
  80+ 9572              c_Pressed_Quit          equ 35 * 2
  81+ 9572              c_Pressed_PlanetData    equ 36 * 2
  82+ 9572              c_Pressed_CursorUp      equ 37 * 2
  83+ 9572              c_Pressed_CursorDown    equ 38 * 2
  84+ 9572              c_Pressed_Find          equ 39 * 2
  85+ 9572
  86+ 9572              ; half row 1
  87+ 9572              VK_CAPS  				equ 0
  88+ 9572              VK_Z  					equ 1
  89+ 9572              VK_X  					equ 2
  90+ 9572              VK_C  					equ 3
  91+ 9572              VK_V  					equ 4
  92+ 9572              ; half row 2
  93+ 9572              VK_A  					equ 5
  94+ 9572              VK_S  					equ 6
  95+ 9572              VK_D  					equ 7
  96+ 9572              VK_F  					equ 8
  97+ 9572              VK_G  					equ 9
  98+ 9572              ; half row 3
  99+ 9572              VK_Q  					equ 10
 100+ 9572              VK_W  					equ 11
 101+ 9572              VK_E  					equ 12
 102+ 9572              VK_R  					equ 13
 103+ 9572              VK_T  					equ 14
 104+ 9572              ; half row 4
 105+ 9572              VK_1  					equ 15
 106+ 9572              VK_2  					equ 16
 107+ 9572              VK_3  					equ 17
 108+ 9572              VK_4  					equ 18
 109+ 9572              VK_5  					equ 19
 110+ 9572              ; half row 5
 111+ 9572              VK_0 					equ 20
 112+ 9572              VK_9 					equ 21
 113+ 9572              VK_8 					equ 22
 114+ 9572              VK_7 					equ 23
 115+ 9572              VK_6 					equ 24
 116+ 9572              ; half row 6
 117+ 9572              VK_P  					equ 25
 118+ 9572              VK_O  					equ 26
 119+ 9572              VK_I  					equ 27
 120+ 9572              VK_U  					equ 28
 121+ 9572              VK_Y  					equ 29
 122+ 9572              ; half row 7
 123+ 9572              VK_ENTER 				equ 30
 124+ 9572              VK_L  					equ 31
 125+ 9572              VK_K  					equ 32
 126+ 9572              VK_J  					equ 33
 127+ 9572              VK_H  					equ 34
 128+ 9572              ; half row 8
 129+ 9572              VK_SPACE 				equ 35
 130+ 9572              VK_SYM  				equ 36
 131+ 9572              VK_M  					equ 37
 132+ 9572              VK_N  					equ 38
 133+ 9572              VK_B  					equ 39
 134+ 9572
 135+ 9572              ;KeyboardMapping
 136+ 9572              KeyCode_Front        	equ VK_1
 137+ 9572              KeyCode_Aft          	equ VK_2
 138+ 9572              KeyCode_Left         	equ VK_3
 139+ 9572              KeyCode_Right        	equ VK_4
 140+ 9572              KeyCode_RollLeft     	equ VK_O
 141+ 9572              KeyCode_RollRight    	equ VK_P
 142+ 9572              KeyCode_Dive         	equ VK_Q
 143+ 9572              KeyCode_Climb        	equ VK_A
 144+ 9572              KeyCode_Accellerate  	equ VK_W
 145+ 9572              KeyCode_Decellerate  	equ VK_S
 146+ 9572              KeyCode_FireLaser    	equ VK_SPACE
 147+ 9572              KeyCode_TargetMissle 	equ VK_T
 148+ 9572              KeyCode_FireMissile  	equ VK_F
 149+ 9572              KeyCode_Find        	equ VK_F
 150+ 9572              KeyCode_UnarmMissile 	equ VK_R
 151+ 9572              KeyCode_ECM          	equ VK_E
 152+ 9572              KeyCode_EnergyBomb   	equ VK_U
 153+ 9572              KeyCode_EscapePod    	equ VK_CAPS
 154+ 9572              KeyCode_DockingComp  	equ VK_N
 155+ 9572              KeyCode_Hyperspace   	equ VK_H
 156+ 9572              KeyCode_Distance     	equ VK_J
 157+ 9572              KeyCode_HomeCursor   	equ VK_G
 158+ 9572              KeyCode_Launch       	equ VK_L
 159+ 9572              KeyCode_BuyCargo     	equ VK_B
 160+ 9572              KeyCode_SellCargo    	equ VK_V
 161+ 9572              KeyCode_Equip        	equ VK_C
 162+ 9572              KeyCode_GalacticChrt 	equ VK_5
 163+ 9572              KeyCode_LocalChart   	equ VK_6
 164+ 9572              KeyCode_MarketPrices 	equ VK_7
 165+ 9572              KeyCode_Status       	equ VK_8
 166+ 9572              KeyCode_Inventory    	equ VK_9
 167+ 9572              KeyCode_GameSkip     	equ VK_Z
 168+ 9572              KeyCode_Save         	equ VK_O
 169+ 9572              KeyCode_Freeze       	equ VK_B
 170+ 9572              KeyCode_Resume       	equ VK_L
 171+ 9572              KeyCode_Recentre     	equ VK_D
 172+ 9572              KeyCode_Quit         	equ VK_Y
 173+ 9572              KeyCode_PlanetData   	equ VK_0
 174+ 9572              KeyCode_CursorUp        equ VK_Q
 175+ 9572              KeyCode_CursorDown      equ VK_A
 176+ 9572
 177+ 9572 00 00 00...  Keys					DS	40          ; This is the list of key states for all the VK keys presssed i.e. VK_CAPS through to VK_B
 178+ 959A              c_KeyBoardLen 			equ $ - Keys
 179+ 959A 00 00 00...  RawKeys					DS	8
 180+ 95A2 FE FD FB F7  KeyAddrTab				DB	$FE, $FD, $FB, $F7, $EF, $DF, $BF, $7F
 180+ 95A6 EF DF BF 7F
 181+ 95AA              ; Now keyboard map lists each game key and the corresponding address in the Keys table to get the value. This way redefining keys is just a case
 182+ 95AA              ; of updating this table with the respective location to look up
 183+ 95AA              ; key list sequence is in table above
 184+ 95AA 81 95 82 95  KeyboardMap             DW  Keys+KeyCode_Front        ,Keys+KeyCode_Aft          ,Keys+KeyCode_Left         ,Keys+KeyCode_Right        ,Keys+KeyCode_RollLeft
 184+ 95AE 83 95 84 95
 184+ 95B2 8C 95
 185+ 95B4 8B 95 7C 95                          DW  Keys+KeyCode_RollRight    ,Keys+KeyCode_Dive         ,Keys+KeyCode_Climb        ,Keys+KeyCode_Accellerate  ,Keys+KeyCode_Decellerate
 185+ 95B8 77 95 7D 95
 185+ 95BC 78 95
 186+ 95BE 95 95 80 95                          DW  Keys+KeyCode_FireLaser    ,Keys+KeyCode_TargetMissle ,Keys+KeyCode_FireMissile  ,Keys+KeyCode_UnarmMissile ,Keys+KeyCode_ECM
 186+ 95C2 7A 95 7F 95
 186+ 95C6 7E 95
 187+ 95C8 8E 95 72 95                          DW  Keys+KeyCode_EnergyBomb   ,Keys+KeyCode_EscapePod    ,Keys+KeyCode_DockingComp  ,Keys+KeyCode_Hyperspace   ,Keys+KeyCode_Distance
 187+ 95CC 98 95 94 95
 187+ 95D0 93 95
 188+ 95D2 7B 95 91 95                          DW  Keys+KeyCode_HomeCursor   ,Keys+KeyCode_Launch       ,Keys+KeyCode_BuyCargo     ,Keys+KeyCode_SellCargo    ,Keys+KeyCode_Equip
 188+ 95D6 99 95 76 95
 188+ 95DA 75 95
 189+ 95DC 85 95 8A 95                          DW  Keys+KeyCode_GalacticChrt ,Keys+KeyCode_LocalChart   ,Keys+KeyCode_MarketPrices ,Keys+KeyCode_Status       ,Keys+KeyCode_Inventory
 189+ 95E0 89 95 88 95
 189+ 95E4 87 95
 190+ 95E6 73 95 8C 95                          DW  Keys+KeyCode_GameSkip     ,Keys+KeyCode_Save         ,Keys+KeyCode_Freeze       ,Keys+KeyCode_Resume       ,Keys+KeyCode_Recentre
 190+ 95EA 99 95 91 95
 190+ 95EE 79 95
 191+ 95F0 8F 95 86 95                          DW  Keys+KeyCode_Quit         ,Keys+KeyCode_PlanetData   ,Keys+KeyCode_CursorUp     ,Keys+KeyCode_CursorDown   ,Keys+KeyCode_Find
 191+ 95F4 7C 95 77 95
 191+ 95F8 7A 95
 192+ 95FA
 193+ 95FA 23 5A 58 43  ASCII_Map:              DB "#","Z","X","C","V"
 193+ 95FE 56
 194+ 95FF 41 53 44 46                          DB "A","S","D","F","G"
 194+ 9603 47
 195+ 9604 51 57 45 52                          DB "Q","W","E","R","T"
 195+ 9608 54
 196+ 9609 31 32 33 34                          DB "1","2","3","4","5"
 196+ 960D 35
 197+ 960E 30 39 38 37                          DB "0","9","8","7","6"
 197+ 9612 36
 198+ 9613 50 4F 49 55                          DB "P","O","I","U","Y"
 198+ 9617 59
 199+ 9618 3E 4C 4B 4A                          DB ">","L","K","J","H"
 199+ 961C 48
 200+ 961D 20 5E 4D 4E                          DB " ","^","M","N","B"
 200+ 9621 42
 201+ 9622
 202+ 9622              ; mapping of a code to the lookup table Keyboard map. So if you are using an addr_Pressed you can then fetch from KeyboardMap the address in Keys
 203+ 9622              ; for the raw key press status
 204+ 9622              addr_Pressed_Front         equ KeyboardMap+c_Pressed_Front
 205+ 9622              addr_Pressed_Aft           equ KeyboardMap+c_Pressed_Aft
 206+ 9622              addr_Pressed_Left          equ KeyboardMap+c_Pressed_Left
 207+ 9622              addr_Pressed_Right         equ KeyboardMap+c_Pressed_Right
 208+ 9622              addr_Pressed_RollLeft      equ KeyboardMap+c_Pressed_RollLeft
 209+ 9622              addr_Pressed_RollRight     equ KeyboardMap+c_Pressed_RollRight
 210+ 9622              addr_Pressed_Dive          equ KeyboardMap+c_Pressed_Dive
 211+ 9622              addr_Pressed_Climb         equ KeyboardMap+c_Pressed_Climb
 212+ 9622              addr_Pressed_Accellerate   equ KeyboardMap+c_Pressed_Accellerate
 213+ 9622              addr_Pressed_Decellerate   equ KeyboardMap+c_Pressed_Decellerate
 214+ 9622              addr_Pressed_FireLaser     equ KeyboardMap+c_Pressed_FireLaser
 215+ 9622              addr_Pressed_TargetMissle  equ KeyboardMap+c_Pressed_TargetMissle
 216+ 9622              addr_Pressed_FireMissile   equ KeyboardMap+c_Pressed_FireMissile
 217+ 9622              addr_Pressed_UnarmMissile  equ KeyboardMap+c_Pressed_UnarmMissile
 218+ 9622              addr_Pressed_ECM           equ KeyboardMap+c_Pressed_ECM
 219+ 9622              addr_Pressed_EnergyBomb    equ KeyboardMap+c_Pressed_EnergyBomb
 220+ 9622              addr_Pressed_EscapePod     equ KeyboardMap+c_Pressed_EscapePod
 221+ 9622              addr_Pressed_DockingComp   equ KeyboardMap+c_Pressed_DockingComp
 222+ 9622              addr_Pressed_Hyperspace    equ KeyboardMap+c_Pressed_Hyperspace
 223+ 9622              addr_Pressed_Distance      equ KeyboardMap+c_Pressed_Distance
 224+ 9622              addr_Pressed_HomeCursor    equ KeyboardMap+c_Pressed_HomeCursor
 225+ 9622              addr_Pressed_Launch        equ KeyboardMap+c_Pressed_Launch
 226+ 9622              addr_Pressed_BuyCargo      equ KeyboardMap+c_Pressed_BuyCargo
 227+ 9622              addr_Pressed_SellCargo     equ KeyboardMap+c_Pressed_SellCargo
 228+ 9622              addr_Pressed_Equip         equ KeyboardMap+c_Pressed_Equip
 229+ 9622              addr_Pressed_GalacticChrt  equ KeyboardMap+c_Pressed_GalacticChrt
 230+ 9622              addr_Pressed_LocalChart    equ KeyboardMap+c_Pressed_LocalChart
 231+ 9622              addr_Pressed_MarketPrices  equ KeyboardMap+c_Pressed_MarketPrices
 232+ 9622              addr_Pressed_Status        equ KeyboardMap+c_Pressed_Status
 233+ 9622              addr_Pressed_Inventory     equ KeyboardMap+c_Pressed_Inventory
 234+ 9622              addr_Pressed_GameSkip      equ KeyboardMap+c_Pressed_GameSkip
 235+ 9622              addr_Pressed_Save          equ KeyboardMap+c_Pressed_Save
 236+ 9622              addr_Pressed_Freeze        equ KeyboardMap+c_Pressed_Freeze
 237+ 9622              addr_Pressed_Resume        equ KeyboardMap+c_Pressed_Resume
 238+ 9622              addr_Pressed_Recentre      equ KeyboardMap+c_Pressed_Recentre
 239+ 9622              addr_Pressed_Quit          equ KeyboardMap+c_Pressed_Quit
 240+ 9622              addr_Pressed_PlanetData    equ KeyboardMap+c_Pressed_PlanetData
 241+ 9622              addr_Pressed_CursorUp      equ KeyboardMap+c_Pressed_CursorUp
 242+ 9622              addr_Pressed_CursorDown    equ KeyboardMap+c_Pressed_CursorDown
 243+ 9622              addr_Pressed_Find          equ KeyboardMap+c_Pressed_Find
 244+ 9622
 245+ 9622
 246+ 9622              MIsKeyPressed:          MACRO   keyaddress, misstarget
 247+ 9622 ~                                    ld      hl,(keyaddress)
 248+ 9622 ~                                    ld      a,(hl)
 249+ 9622 ~                                    JumpIfAIsZero   misstarget
 250+ 9622                                      ENDM
 251+ 9622
 252+ 9622 21 72 95     init_keyboard:          ld		hl,Keys                         ; no key s are pressed by default
 253+ 9625 11 28 00                             ld		de, c_KeyBoardLen               ;
 254+ 9628 3E 00                                ld		a,0                             ;
 255+ 962A CD 28 95                             call	memfill_dma                     ;
 256+ 962D C9                                   ret                                     ;
 257+ 962E
 258+ 962E
 259+ 962E
 260+ 962E DD 21 9A 95  scan_keyboard:          ld		ix,RawKeys                      ; hl = table of raw IO port readings
 261+ 9632 21 A2 95                             ld		hl,KeyAddrTab                   ; de = table of IO ports to read
 262+ 9635 0E 08                                ld		c,8                             ; 8 ports to ready
 263+ 9637 11 72 95                             ld      de,Keys                         ; ix = table of key states from raw read
 264+ 963A 7E           .PortReadLoop:          ld		a,(hl)							; Set up port to read as (hl)$FE
 265+ 963B DB FE                                in		a,($FE)							; read port to a
 266+ 963D DD 77 00                             ld      (ix+0),a                        ; save raw scan
 267+ 9640 DD 23                                inc     ix
 268+ 9642 23                                   inc		hl                              ; and ready for next read
 269+ 9643 06 05        .ProcessInputBits:      ld		b,5								; loop all bits (there are only 5 keys to a group)
 270+ 9645 1F           .ProcessBitsLoop:       rra                                     ; shit bit 0 into carry
 271+ 9646 CB 47                                bit		0,a								; is bit set
 272+ 9648 30 08                                jr      nc,.SetKeyPressed               ; low bit means it was pressed
 273+ 964A FD 6F                                ld      iyl,a
 274+ 964C                                      ZeroA
 274+ 964C AF          >                        xor a
 275+ 964D C3 5A 96                             jp      .SetKey
 276+ 9650 20 0B                                jr		nz,.SkipKeySet
 277+ 9652 FD 6F        .SetKeyPressed:	        ld      iyl,a                           ; save current input byte
 278+ 9654 1A                                   ld      a,(de)                          ; get current keystate
 279+ 9655 FE 02                                cp      2
 280+ 9657 28 02                                jr      z,.AlreadyHeld
 281+ 9659 3C                                   inc     a                               ; and increment by 1 as its moved from previous state
 282+ 965A 12           .SetKey:                ld		(de),a				  	        ; save key Pressed state
 283+ 965B FD 7D        .AlreadyHeld:           ld      a,iyl                           ; and retrieve the current input byte
 284+ 965D 13           .SkipKeySet:	        inc		de								; move to next key
 285+ 965E 10 E5                                djnz	.ProcessBitsLoop				; Process all key group bits
 286+ 9660 0D                                   dec     c                               ; thats one row of bits all processed
 287+ 9661 20 D7                                jr      nz,.PortReadLoop				; Read next input port
 288+ 9663 C9                                   ret
 289+ 9664
 290+ 9664
 291+ 9664
 292+ 9664              GetKeyStateAddressDE:   MACRO
 293+ 9664 ~                                    ld      hl,KeyboardMap                  ; work our address to read from
 294+ 9664 ~                                    add     hl,a
 295+ 9664 ~                                    ld      e,(hl)
 296+ 9664 ~                                    inc     hl
 297+ 9664 ~                                    ld      d,(hl)                          ; now de = address in keypress list
 298+ 9664                                      ENDM
 299+ 9664
 300+ 9664              GetKeyStateAddressHL:   MACRO
 301+ 9664 ~                                    ld      hl,KeyboardMap                  ; work our address to read from
 302+ 9664 ~                                    add     hl,a
 303+ 9664 ~                                    ld      a,(hl)
 304+ 9664 ~                                    inc     hl
 305+ 9664 ~                                    ld      h,(hl)                          ; now hl = address in keypress list
 306+ 9664 ~                                    ld      l,a
 307+ 9664                                      ENDM
 308+ 9664
 309+ 9664
 310+ 9664              ;;old debug codeCurrentX            DB 0
 311+ 9664              ;;old debug codeCurrentY            DB 0
 312+ 9664              ;;old debug code
 313+ 9664              ;;old debug codedisplayKeyStatus:       xor         a
 314+ 9664              ;;old debug code                        ld          (CurrentX),a
 315+ 9664              ;;old debug code                        ld          hl,RawKeys
 316+ 9664              ;;old debug code                        ld          a,(hl)
 317+ 9664              ;;old debug code                        and         %00011111
 318+ 9664              ;;old debug code                        ld          b,5
 319+ 9664              ;;old debug code.displayLoop:           push        bc,,hl
 320+ 9664              ;;old debug code                        rra
 321+ 9664              ;;old debug code                        jr          c,.displayNoPress
 322+ 9664              ;;old debug code.displayPress:          push        af
 323+ 9664              ;;old debug code                        ld          a,(CurrentX)
 324+ 9664              ;;old debug code                        ld          e,a
 325+ 9664              ;;old debug code                        ld          a,(CurrentY)
 326+ 9664              ;;old debug code                        ld          d,a
 327+ 9664              ;;old debug code                        ld          a,'*'
 328+ 9664              ;;old debug code                        MMUSelectLayer1
 329+ 9664              ;;old debug code                        call        l1_print_char
 330+ 9664              ;;old debug code                        ld          a,(CurrentX)
 331+ 9664              ;;old debug code                        add         a,8
 332+ 9664              ;;old debug code                        ld          (CurrentX),a
 333+ 9664              ;;old debug code                        pop         af
 334+ 9664              ;;old debug code                        pop         bc,,hl
 335+ 9664              ;;old debug code                        djnz        .displayLoop
 336+ 9664              ;;old debug code                        ret
 337+ 9664              ;;old debug code.displayNoPress:        push        af
 338+ 9664              ;;old debug code                        ld          a,(CurrentX)
 339+ 9664              ;;old debug code                        ld          e,a
 340+ 9664              ;;old debug code                        ld          a,(CurrentY)
 341+ 9664              ;;old debug code                        ld          d,a
 342+ 9664              ;;old debug code                        ld          a,'O'
 343+ 9664              ;;old debug code                        MMUSelectLayer1
 344+ 9664              ;;old debug code                        call        l1_print_char
 345+ 9664              ;;old debug code                        ld          a,(CurrentX)
 346+ 9664              ;;old debug code                        add         a,8
 347+ 9664              ;;old debug code                        ld          (CurrentX),a
 348+ 9664              ;;old debug code                        pop         af
 349+ 9664              ;;old debug code                        pop         bc,,hl
 350+ 9664              ;;old debug code                        djnz        .displayLoop
 351+ 9664              ;;old debug code                        ret
 352+ 9664              ;;old debug code
 353+ 9664              ;;old debug codedisplayDownStatus:      ld  a,(Keys+      KeyCode_CursorUp)
 354+ 9664              ;;old debug code                        cp  0
 355+ 9664              ;;old debug code                        jr      z,.displayNoUp
 356+ 9664              ;;old debug code                        cp  1
 357+ 9664              ;;old debug code                        jr      z,.displayUp
 358+ 9664              ;;old debug code.displayHeld:           ld      de,8*15
 359+ 9664              ;;old debug code                        ld      a,"*"
 360+ 9664              ;;old debug code                        MMUSelectLayer1
 361+ 9664              ;;old debug code                        call        l1_print_char
 362+ 9664              ;;old debug code                        ret
 363+ 9664              ;;old debug code.displayUp:             ld      de,8*15
 364+ 9664              ;;old debug code                        ld      a,"+"
 365+ 9664              ;;old debug code                        MMUSelectLayer1
 366+ 9664              ;;old debug code                        call        l1_print_char
 367+ 9664              ;;old debug code                        ret
 368+ 9664              ;;old debug code.displayNoUp:             ld      de,8*15
 369+ 9664              ;;old debug code                        ld      a,"O"
 370+ 9664              ;;old debug code                        MMUSelectLayer1
 371+ 9664              ;;old debug code                        call        l1_print_char
 372+ 9664              ;;old debug code                        ret
 373+ 9664              ;;old debug code
 374+ 9664
 375+ 9664
 376+ 9664              ; call with a = c_Pressed key, will then read mapping does this with keyboard scan, waits until key gets to state 1, if it was already held then#
 377+ 9664              ; it will have to be let go to reset of 0 and scan again
 378+ 9664              ; Deprecated as not used as yet
 379+ 9664              ;;;;;;wait_for_key_a_press:   GetKeyStateAddressHL
 380+ 9664              ;;;;;;                        push    hl
 381+ 9664              ;;;;;;.wait_loop:             call    scan_keyboard
 382+ 9664              ;;;;;;                        pop     hl                              ; get key address into hl
 383+ 9664              ;;;;;;                        push    hl
 384+ 9664              ;;;;;;                        ld      a,(hl)
 385+ 9664              ;;;;;;                        JumpIfANENusng  1,.wait_loop             ; will also loop if held down when entering this routine
 386+ 9664              ;;;;;;                        pop     hl                              ; tidy up rogue push, less t states than detecting if we want to push or not
 387+ 9664              ;;;;;;                        ret
 388+ 9664              ;;;;;;; call with a = c_Pressed key, will then read mapping does this with keyboard scan waits until key gets to state 2
 389+ 9664              ;;;;;;wait_for_key_a_held:    GetKeyStateAddressDE
 390+ 9664              ;;;;;;                        push    hl
 391+ 9664              ;;;;;;.wait_loop:             call    scan_keyboard
 392+ 9664              ;;;;;;                        pop     hl
 393+ 9664              ;;;;;;                        push    hl
 394+ 9664              ;;;;;;                        ld      a,(hl)
 395+ 9664              ;;;;;;                        JumpIfALTNusng  2, .wait_loop
 396+ 9664              ;;;;;;                        pop     hl
 397+ 9664              ;;;;;;                        ret
 398+ 9664
 399+ 9664              ; Gets the current keystate of the c_Pressed Key in a register
 400+ 9664              get_key_a_state:        GetKeyStateAddressHL                    ; reads a mapped key and sets a to key staus, e.g. 0 1 or >=2 DOES NOT SCAN KEYBOARD
 400+ 9664 21 AA 95    >                        ld      hl,KeyboardMap                  ; work our address to read from
 400+ 9667 ED 31       >                        add     hl,a
 400+ 9669 7E          >                        ld      a,(hl)
 400+ 966A 23          >                        inc     hl
 400+ 966B 66          >                        ld      h,(hl)                          ; now hl = address in keypress list
 400+ 966C 6F          >                        ld      l,a
 401+ 966D 7E                                   ld      a,(hl)                          ; a = keystate
 402+ 966E C9                                   ret
 403+ 966F
 404+ 966F              ; sets they keystate of c pressed key in a register to 1 (pressed)
 405+ 966F              force_key_press:        GetKeyStateAddressHL                    ; read key locations
 405+ 966F 21 AA 95    >                        ld      hl,KeyboardMap                  ; work our address to read from
 405+ 9672 ED 31       >                        add     hl,a
 405+ 9674 7E          >                        ld      a,(hl)
 405+ 9675 23          >                        inc     hl
 405+ 9676 66          >                        ld      h,(hl)                          ; now hl = address in keypress list
 405+ 9677 6F          >                        ld      l,a
 406+ 9678 3E 01                                ld      a,1
 407+ 967A 77                                   ld      (hl),a
 408+ 967B C9                                   ret
 409+ 967C
 410+ 967C              ; returns z is set if c_ key is pressed
 411+ 967C              is_key_pressed:         GetKeyStateAddressHL
 411+ 967C 21 AA 95    >                        ld      hl,KeyboardMap                  ; work our address to read from
 411+ 967F ED 31       >                        add     hl,a
 411+ 9681 7E          >                        ld      a,(hl)
 411+ 9682 23          >                        inc     hl
 411+ 9683 66          >                        ld      h,(hl)                          ; now hl = address in keypress list
 411+ 9684 6F          >                        ld      l,a
 412+ 9685 7E                                   ld      a,(hl)                          ; a = keystate
 413+ 9686 FE 01                                cp      1                               ; we cant just test bit 0 as this may have been held long
 414+ 9688 C9                                   ret
 415+ 9689
 416+ 9689              ; returns nz is set if c_ key is held, if key was held then keystate would be 2 or 3, i.e. bit 1 set
 417+ 9689              is_key_held:            GetKeyStateAddressHL
 417+ 9689 21 AA 95    >                        ld      hl,KeyboardMap                  ; work our address to read from
 417+ 968C ED 31       >                        add     hl,a
 417+ 968E 7E          >                        ld      a,(hl)
 417+ 968F 23          >                        inc     hl
 417+ 9690 66          >                        ld      h,(hl)                          ; now hl = address in keypress list
 417+ 9691 6F          >                        ld      l,a
 418+ 9692 7E                                   ld      a,(hl)                          ; a = keystate
 419+ 9693 E6 02                                and     Bit1Only                        ; clear out bit 1 which elimiates state 3, so it can now be 2 (held) or 0 (not pressed or one off)
 420+ 9695 C9                                   ret
 421+ 9696
 422+ 9696              ; checks to see if any key is pressed in the key table
 423+ 9696 21 72 95     is_any_key_pressed:     ld      hl,Keys
 424+ 9699 01 28 00                             ld      bc,40
 425+ 969C 3E 01                                ld      a,1
 426+ 969E ED B1                                cpir                                    ; search for the value 1
 427+ 96A0 28 03                                jr      z,.KeyPressed                   ; if a key was pressed then handle press
 428+ 96A2                                      SetAFalse
 428+ 96A2 3E FF       >                        ld      a,$FF
 429+ 96A4 C9                                   ret
 430+ 96A5 3E 27        .KeyPressed:            ld      a,39                            ; so c will be how many keys still to scan
 431+ 96A7 91                                   sub     c                               ; so a = 40 - c to get to result
 432+ 96A8 C9                                   ret
 433+ 96A9
 434+ 96A9 21 72 95     is_any_key_held:        ld      hl,Keys
 435+ 96AC 06 28                                ld      b,40
 436+ 96AE 0E 00                                ld      c,0
 437+ 96B0 7E           .KeyReadLoop:           ld      a,(hl)
 438+ 96B1 E6 02                                and     Bit1Only                        ; clear out bit 1 which elimiates state 3, so it can now be 2 (held) or 0 (not pressed or one off)
 439+ 96B3 C2 BD 96                             jp      nz,.KeyPressed
 440+ 96B6 23                                   inc     hl
 441+ 96B7 0C                                   inc     c
 442+ 96B8 10 F6                                djnz    .KeyReadLoop
 443+ 96BA                                      SetAFalse
 443+ 96BA 3E FF       >                        ld      a,$FF
 444+ 96BC C9                                   ret
 445+ 96BD 79           .KeyPressed:            ld      a,c
 446+ 96BE C9                                   ret
 447+ 96BF
 448+ 96BF
 449+ 96BF 00 00 00...  InputString             DS  30              ; used for a 30 character input buffer
 450+ 96DD 00                                   DB  0               ; end of string marker as a safety
 451+ 96DE 00           InputCursor             DB  0
 452+ 96DF 00           EnterPressed            DB  0               ; zero notpressed FF pressed
 453+ 96E0 00           InputChanged            DB  0
 454+ 96E1              InputLimit              EQU 20
 455+ 96E1
 456+ 96E1 21 BF 96     keyboard_copy_input_to_de:  ld      hl,InputString
 457+ 96E4 3A DE 96                                 ld      a,(InputCursor)
 458+ 96E7 FE 00                                    cp      0
 459+ 96E9 28 05                                    jr      z,.NoString
 460+ 96EB 4F                                       ld      c,a
 461+ 96EC 06 00                                    ld      b,0
 462+ 96EE ED B0                                    ldir
 463+ 96F0 3E 00        .NoString                   ld      a,0
 464+ 96F2 12                                       ld      (de),a
 465+ 96F3 C9                                       ret
 466+ 96F4
 467+ 96F4 AF           initInputText:          xor     a
 468+ 96F5 32 DE 96                             ld      (InputCursor),a
 469+ 96F8                                      SetMemFalse EnterPressed
 469+ 96F8 3E FF       >                        ld      a,$FF
 469+ 96FA 32 DF 96    >                        ld      (EnterPressed),a
 470+ 96FD                                      SetMemFalse InputChanged
 470+ 96FD 3E FF       >                        ld      a,$FF
 470+ 96FF 32 E0 96    >                        ld      (InputChanged),a
 471+ 9702 21 BF 96                             ld      hl,InputString
 472+ 9705 06 1E                                ld      b,30
 473+ 9707 77           .wipeloop:              ld      (hl),a
 474+ 9708 23                                   inc     hl
 475+ 9709 10 FC                                djnz    .wipeloop
 476+ 970B C9                                   ret
 477+ 970C
 478+ 970C              InputName:              SetMemFalse InputChanged
 478+ 970C 3E FF       >                        ld      a,$FF
 478+ 970E 32 E0 96    >                        ld      (InputChanged),a
 479+ 9711 CD 96 96                             call    is_any_key_pressed
 480+ 9714 FE FF                                cp      $FF
 481+ 9716 C8                                   ret     z
 482+ 9717 4F           .KeyPressed:            ld      c,a
 483+ 9718 3A DE 96                             ld      a,(InputCursor)                 ; No key so we can now look at if we are at the end of the buffer
 484+ 971B FE 14                                cp      InputLimit                      ; move to variable later and then cp (hl)
 485+ 971D 28 0B                                jr      z,.DeleteOrEnterOnly            ;
 486+ 971F 21 FA 95                             ld      hl,ASCII_Map
 487+ 9722 79                                   ld      a,c
 488+ 9723 ED 31                                add     hl,a
 489+ 9725 7E                                   ld      a,(hl)
 490+ 9726 FE 41                                cp      "A"
 491+ 9728 30 0B                                jr      nc,.AlphaPressed
 492+ 972A              ; CAPS and Symbol act as delete for now
 493+ 972A FE 20        .DeleteOrEnterOnly      cp      " "                             ; if space was  pressed (mapped to Hash in ASCII table))
 494+ 972C 28 33                                jr      z,.SpacePressed               ; for now we will ignore the shift and just assume delete
 495+ 972E FE 3E                                cp      ">"         ; ENTER
 496+ 9730 28 19                                jr      z,.EnterPressed
 497+ 9732 FE 23                                cp      "#"         ; CAPS
 498+ 9734 C9                                   ret
 499+ 9735 47           .AlphaPressed:          ld      b,a
 500+ 9736 3A DE 96                             ld      a,(InputCursor)
 501+ 9739 4F                                   ld      c,a
 502+ 973A 21 BF 96                             ld      hl,InputString
 503+ 973D ED 31                                add     hl,a
 504+ 973F 78                                   ld      a,b
 505+ 9740 70                                   ld      (hl),b
 506+ 9741 79                                   ld      a,c
 507+ 9742 21 DE 96                             ld      hl,InputCursor
 508+ 9745 34                                   inc     (hl)
 509+ 9746                                      SetMemTrue InputChanged
 509+ 9746 AF          >                        xor     a
 509+ 9747 32 E0 96    >                        ld      (InputChanged),a
 510+ 974A C9                                   ret
 511+ 974B 3A DE 96     .EnterPressed:          ld      a,(InputCursor)
 512+ 974E 21 BF 96                             ld      hl,InputString
 513+ 9751 ED 31                                add     hl,a
 514+ 9753                                      ZeroA
 514+ 9753 AF          >                        xor a
 515+ 9754 77                                   ld      (hl),a
 516+ 9755                                      SetMemTrue EnterPressed
 516+ 9755 AF          >                        xor     a
 516+ 9756 32 DF 96    >                        ld      (EnterPressed),a
 517+ 9759                                      SetMemTrue InputChanged
 517+ 9759 AF          >                        xor     a
 517+ 975A 32 E0 96    >                        ld      (InputChanged),a
 518+ 975D CD 22 96                             call    init_keyboard           ; Flush keyboard status so futher inputs don't auto read the enter key as a second press
 519+ 9760 C9                                   ret
 520+ 9761 3A DE 96     .SpacePressed:          ld      a,(InputCursor)         ; Space = delete
 521+ 9764 FE 00                                cp      0                       ; if input is zero length then can not delete
 522+ 9766 C8                                   ret     z
 523+ 9767 3D                                   dec     a                       ; move back one and update cursor pos
 524+ 9768 32 DE 96                             ld      (InputCursor),a         ;
 525+ 976B 21 BF 96                             ld      hl,InputString          ; now update end of line to null
 526+ 976E ED 31                                add     hl,a                    ; .
 527+ 9770                                      ZeroA                           ; .
 527+ 9770 AF          >                        xor a
 528+ 9771 77                                   ld      (hl),a                  ; .
 529+ 9772                                      SetMemTrue InputChanged
 529+ 9772 AF          >                        xor     a
 529+ 9773 32 E0 96    >                        ld      (InputChanged),a
 530+ 9776 C9                                   ret
 531+ 9777
 532+ 9777 AF           MovementKeyTest:        xor     a
 533+ 9778 32 13 9A                             ld      (CursorKeysPressed),a
 534+ 977B 3A 32 99                             ld      a,(MenuIdMax)
 535+ 977E E6 FC                                and     $FC
 536+ 9780 20 26                                jr      nz,CursorKeys
 537+ 9782 2A B8 95     ClimbDiveKeys:          ld      hl,(addr_Pressed_Climb)
 538+ 9785 7E                                   ld      a,(hl)
 539+ 9786                                      JumpIfAIsZero ScanDiveKey
 539+ 9786 A7          >                        and a   ; cp 0 - changed to and a for optimisation but affects other flags
 539+ 9787 CA 95 97    >                        jp	z, ScanDiveKey
 540+ 978A 3A 13 9A                             ld      a,(CursorKeysPressed)
 541+ 978D F6 80                                or      $80
 542+ 978F 32 13 9A                             ld      (CursorKeysPressed),a
 543+ 9792 C3 CB 97                             jp      ScanLeftKey
 544+ 9795 2A B6 95     ScanDiveKey:            ld      hl,(addr_Pressed_Dive)
 545+ 9798 7E                                   ld      a,(hl)
 546+ 9799                                      JumpIfAIsZero ScanLeftKey
 546+ 9799 A7          >                        and a   ; cp 0 - changed to and a for optimisation but affects other flags
 546+ 979A CA CB 97    >                        jp	z, ScanLeftKey
 547+ 979D 3A 13 9A                             ld      a,(CursorKeysPressed)
 548+ 97A0 F6 40                                or      $40
 549+ 97A2 32 13 9A                             ld      (CursorKeysPressed),a
 550+ 97A5 C3 CB 97                             jp      ScanLeftKey
 551+ 97A8 2A F4 95     CursorKeys:             ld      hl,(addr_Pressed_CursorUp)
 552+ 97AB 7E                                   ld      a,(hl)
 553+ 97AC                                      JumpIfAIsZero ScanCursorDownKey
 553+ 97AC A7          >                        and a   ; cp 0 - changed to and a for optimisation but affects other flags
 553+ 97AD CA BB 97    >                        jp	z, ScanCursorDownKey
 554+ 97B0 3A 13 9A                             ld      a,(CursorKeysPressed)
 555+ 97B3 F6 80                                or      $80
 556+ 97B5 32 13 9A                             ld      (CursorKeysPressed),a
 557+ 97B8 C3 CB 97                             jp      ScanLeftKey
 558+ 97BB 2A F6 95     ScanCursorDownKey:      ld      hl,(addr_Pressed_CursorDown)
 559+ 97BE 7E                                   ld      a,(hl)
 560+ 97BF                                      JumpIfAIsZero ScanLeftKey
 560+ 97BF A7          >                        and a   ; cp 0 - changed to and a for optimisation but affects other flags
 560+ 97C0 CA CB 97    >                        jp	z, ScanLeftKey
 561+ 97C3 3A 13 9A                             ld      a,(CursorKeysPressed)
 562+ 97C6 F6 40                                or      $40
 563+ 97C8 32 13 9A                             ld      (CursorKeysPressed),a
 564+ 97CB 2A B2 95     ScanLeftKey:            ld      hl,(addr_Pressed_RollLeft)
 565+ 97CE 7E                                   ld      a,(hl)
 566+ 97CF                                      JumpIfAIsZero ScanRightKey
 566+ 97CF A7          >                        and a   ; cp 0 - changed to and a for optimisation but affects other flags
 566+ 97D0 CA DC 97    >                        jp	z, ScanRightKey
 567+ 97D3 3A 13 9A                             ld      a,(CursorKeysPressed)
 568+ 97D6 F6 20                                or      $20
 569+ 97D8 32 13 9A                             ld      (CursorKeysPressed),a
 570+ 97DB C9                                   ret
 571+ 97DC 2A B4 95     ScanRightKey:           ld      hl,(addr_Pressed_RollRight)
 572+ 97DF 7E                                   ld      a,(hl)
 573+ 97E0                                      JumpIfAIsZero ScanHomeKey
 573+ 97E0 A7          >                        and a   ; cp 0 - changed to and a for optimisation but affects other flags
 573+ 97E1 CA ED 97    >                        jp	z, ScanHomeKey
 574+ 97E4 3A 13 9A                             ld      a,(CursorKeysPressed)
 575+ 97E7 F6 10                                or      $10
 576+ 97E9 32 13 9A                             ld      (CursorKeysPressed),a
 577+ 97EC C9                                   ret
 578+ 97ED 2A D2 95     ScanHomeKey:            ld      hl,(addr_Pressed_HomeCursor)
 579+ 97F0 7E                                   ld      a,(hl)
 580+ 97F1                                      JumpIfAIsZero ScanRecentreKey
 580+ 97F1 A7          >                        and a   ; cp 0 - changed to and a for optimisation but affects other flags
 580+ 97F2 CA FE 97    >                        jp	z, ScanRecentreKey
 581+ 97F5 3A 13 9A                             ld      a,(CursorKeysPressed)
 582+ 97F8 F6 08                                or      $08
 583+ 97FA 32 13 9A                             ld      (CursorKeysPressed),a
 584+ 97FD C9                                   ret
 585+ 97FE 2A EE 95     ScanRecentreKey:        ld      hl,(addr_Pressed_Recentre)
 586+ 9801 7E                                   ld      a,(hl)
 587+ 9802                                      ReturnIfAIsZero
 587+ 9802 A7          >                        and     a
 587+ 9803 C8          >                        ret     z
 588+ 9804 3A 13 9A                             ld      a,(CursorKeysPressed)
 589+ 9807 F6 04                                or      $04
 590+ 9809 32 13 9A                             ld      (CursorKeysPressed),a
 591+ 980C C9                                   ret
 592+ 980D
 593+ 980D
# file closed: ./Hardware/keyboard.asm
1089  980D
1090  980D                  INCLUDE "./Variables/constant_equates.asm"
# file opened: ./Variables/constant_equates.asm
   1+ 980D              ;Contants
   2+ 980D
   3+ 980D              SignMask8Bit		equ %01111111
   4+ 980D              SignMask16Bit		equ %0111111111111111
   5+ 980D              SignOnly8Bit		equ $80
   6+ 980D              SignOnly16Bit		equ $8000
   7+ 980D
   8+ 980D              Bit7Only            equ %10000000
   9+ 980D              Bit6Only            equ %01000000
  10+ 980D              Bit5Only            equ %00100000
  11+ 980D              Bit4Only            equ %00010000
  12+ 980D              Bit3Only            equ %00001000
  13+ 980D              Bit2Only            equ %00000100
  14+ 980D              Bit1Only            equ %00000010
  15+ 980D              Bit0Only            equ %00000001
  16+ 980D              Bit7Clear           equ %01111111
  17+ 980D              Bit6Clear           equ %10111111
  18+ 980D              Bit5Clear           equ %11011111
  19+ 980D              Bit4Clear           equ %11101111
  20+ 980D              Bit3Clear           equ %11110111
  21+ 980D              Bit2Clear           equ %11111011
  22+ 980D              Bit1Clear           equ %11111101
  23+ 980D              Bit0Clear           equ %11111110
  24+ 980D              ConstPi				equ $80
  25+ 980D              ConstNorm           equ 197
  26+ 980D
  27+ 980D              ;Text Tokens
  28+ 980D              EliteToken			equ $1E			; Token ID for text messsage ---- E L I T E ----
  29+ 980D              BrabenBellToken 	equ $0D
  30+ 980D              AcorToken			equ $0C
  31+ 980D
  32+ 980D              ; Intro Screen
  33+ 980D              TitleShip			equ	$8C
  34+ 980D              RotationUnity		equ $60
  35+ 980D              DBCheckCode			equ $DB
  36+ 980D              MaxVisibility		equ $1F
  37+ 980D              FarInFront			equ $C0
  38+ 980D
  39+ 980D              ; Universe Managment
  40+ 980D              ShipTypeJunk        equ 3
  41+ 980D              ShipTypeStation     equ 2
  42+ 980D              ShipTypeMissile     equ 1
  43+ 980D              ShipTypeNormal      equ 0
  44+ 980D              ShipTypeEmpty       equ 255
  45+ 980D              ; TacticsControl
  46+ 980D              ShipIsTrader        equ Bit0Only   ; Trader flag  80% are peaceful 20% also have Bounty Hunter flag
  47+ 980D              ShipIsBountyHunter  equ Bit1Only   ;
  48+ 980D              ShipIsHostile       equ Bit2Only   ;
  49+ 980D              ShipNotHostile      equ Bit2Clear   ;
  50+ 980D              ShipIsPirate        equ Bit3Only   ;
  51+ 980D              ShipIsDocking       equ Bit4Only   ;
  52+ 980D              ShipIsBystander     equ Bit5Only   ;
  53+ 980D              ShipIsCop           equ Bit6Only   ;
  54+ 980D              ShipIsScoopDockEsc  equ Bit7Only   ;
  55+ 980D              ShipAIEnabled       equ Bit7Only   ;
  56+ 980D              ShipExploding       equ Bit5Only
  57+ 980D              ShipKilled          equ Bit7Clear
  58+ 980D
  59+ 980D              ; UniverseAIControl
  60+ 980D              ShipCanAnger        equ %00000001
  61+ 980D
  62+ 980D
  63+ 980D              ShipMaxDistance     equ 192
  64+ 980D              HyperSpaceTimers    equ $0B0B
  65+ 980D
  66+ 980D
  67+ 980D              MaxNumberOfStars	equ 11
  68+ 980D              ConsoleRefreshInterval  equ 4
  69+ 980D
  70+ 980D              ShipTypeSize		equ	32 			;??????? just a guess for now
  71+ 980D              ShipSST				equ 4			; its a space station
  72+ 980D              UniverseBasePage 	equ 70			; Base memory bank for universe Item #0
  73+ 980D              ShipDataBasePage	equ	90			; Needs 2mb upgrade but what the heck
  74+ 980D              ShipCountMax		equ	2			; For now just 2 ships to debug
  75+ 980D              LineLimitPerShip	equ 70			; Max lines per ship
  76+ 980D              FaceLimitPerShip	equ	70			; Same as line limit to simplify some logic
  77+ 980D              ; "NEED TO DEFINE SHIPTYPESIZE TODO"
  78+ 980D              PlayerDocked		equ	$FF
  79+ 980D
  80+ 980D              ; Memory page managment	(Refers to a memory slot as a place to access data)
  81+ 980D              ShipDataSlot		equ	6			; this may move into rom swap out space later
  82+ 980D              UniverseObjectSlot	equ	7
  83+ 980D
  84+ 980D              KeyForwardsView		equ	$20
  85+ 980D              ; Game specific equates
  86+ 980D              MissileDropHeight   equ 5           ; how far the missile is ejected on launch in y axis
  87+ 980D
  88+ 980D              ;...Game Colour Mapping
  89+ 980D              L2DustColour        equ L2ColourGREY_1
  90+ 980D              L2SunScannerBright  equ 252
  91+ 980D              L2SunScanner        equ 180
  92+ 980D
  93+ 980D
  94+ 980D              ; Ship Data
  95+ 980D              ;;;;	.XX21	\ -> &5600 \ Table of pointers to ships' data given to XX0
  96+ 980D              ;;;;00 7F			 EQUW &7F00 \ type  1 is #MSL  Missile data on page off bottom of screen
  97+ 980D              ;;;;00 00			 EQUW 0     \ type  2 is #SST  Space Station, Coriolis or Dodo.
  98+ 980D              ;;;;00 00			 EQUW 0     \ type  3 is #ESC  Escape capsule
  99+ 980D              ;;;;00 00			 EQUW 0     \ type  4 is #PLT  Plate, alloys
 100+ 980D              ;;;;00 00			 EQUW 0     \ type  5 is #OIL  Cargo cannister
 101+ 980D              ;;;;00 00			 EQUW 0     \ type  6 is       Boulder
 102+ 980D              ;;;;00 00			 EQUW 0     \ type  7 is #AST  Asteroid
 103+ 980D              ;;;;00 00			 EQUW 0     \ type  8 is #SPL  Splinter, rock.
 104+ 980D              ;;;;00 00			 EQUW 0     \ type  9 is #SHU  Shuttle
 105+ 980D              ;;;;00 00			 EQUW 0     \ type 10 is       Transporter
 106+ 980D              ;;;;00 00			 EQUW 0     \ type 11 is #CYL  Cobra Mk III,  Boa
 107+ 980D              ;;;;00 00			 EQUW 0     \ type 12 is       Python
 108+ 980D              ;;;;00 00			 EQUW 0     \ type 13 is       Last of three traders
 109+ 980D              ;;;;00 00			 EQUW 0     \ type 14 is #ANA  Anaconda
 110+ 980D              ;;;;00 00			 EQUW 0     \ type 15 is #WRM  Worm with Anaconda
 111+ 980D              ;;;;00 00			 EQUW 0     \ type 16 is #COP  Viper
 112+ 980D              ;;;;00 00			 EQUW 0     \ type 17 is       First pirate
 113+ 980D              ;;;;00 00			 EQUW 0     \ type 18 is
 114+ 980D              ;;;;00 00			 EQUW 0     \ type 19 is #KRA  Krait small pirate
 115+ 980D              ;;;;00 00			 EQUW 0     \ type 20 is #ADA  Adder
 116+ 980D              ;;;;00 00			 EQUW 0     \ type 21 is
 117+ 980D              ;;;;00 00			 EQUW 0     \ type 22 is
 118+ 980D              ;;;;00 00			 EQUW 0     \ type 23 is
 119+ 980D              ;;;;00 00			 EQUW 0     \ type 24 is #CYL2 Last strong pirate
 120+ 980D              ;;;;00 00			 EQUW 0     \ type 25 is #ASP  Asp Mk II
 121+ 980D              ;;;;00 00			 EQUW 0     \ type 26 is #FER  Fer de Lance
 122+ 980D              ;;;;00 00			 EQUW 0     \ type 27 is
 123+ 980D              ;;;;00 00			 EQUW 0     \ type 28 is	Last of three bounty hunters
 124+ 980D              ;;;;00 00			 EQUW 0     \ type 29 is #THG  Thargoid
 125+ 980D              ;;;;00 00			 EQUW 0     \ type 30 is #TGL  Thargon
 126+ 980D              ;;;;00 00			 EQUW 0     \ type 31 is #CON  Constrictor
 127+ 980D              ;;;;	.E%	\ -> &563E \ Hull NEWB bits are escpod, cop, inno, ?, pirate, angry, hunter, trader.
 128+ 980D              ;;;;			\ NEWB examples
 129+ 980D              ;;;;\ 21			EQUB &21    \ 0010 0001    9 Shuttle has no escape pod, inno, trader.
 130+ 980D              ;;;;\ 61			EQUB &61    \ 0110 0001   10 Tansporter no escape pod, Cop, inno, trader.
 131+ 980D              ;;;;\ A0			EQUB &A0    \ 1010 0000   11 Cobra has Escape pod, inno, not a trader.
 132+ 980D              ;;;;\ C2			EQUB &C2    \ 1100 0010   16 Viper has Escape pod, Cop, hunter.
 133+ 980D              ;;;;\ 8C			EQUB &8C    \ 1000 1100   19 Krait pirate has escape pod, is pirate and angry.
 134+ 980D
# file closed: ./Variables/constant_equates.asm
1091  980D                  INCLUDE "./Variables/general_variables.asm"
# file opened: ./Variables/general_variables.asm
   1+ 980D
   2+ 980D
   3+ 980D 00 00        varAxis1	DW 	0				; address of first axis in a rotation action
   4+ 980F 00 00        varAxis2	DW	0				; address of 2nd axis in a roation action
   5+ 9811              ; Variables to simulate 6502 registers until code fixed
   6+ 9811              ; These must be here in this order as reading Y and X can then be a 16 bit read
   7+ 9811 00           regX		DB	0               ; using 16 bit read into BC this would go into C
   8+ 9812 00           regY		DB	0               ; using 16 bit read into BC this would go into B
   9+ 9813 00           regA		DB	0
  10+ 9814
  11+ 9814
  12+ 9814 00           varGPLoopA	DB	0				; General Purpose innermost loop variable
  13+ 9815 00 00        INF			DW	0				; page 0 &20 Used to get address from UNIV array
  14+ 9817 00 00        INF28		DW	0				; page 0 &20 Used to get address from UNIV array
  15+ 9819
  16+ 9819
  17+ 9819
  18+ 9819              ;XX16		DS	16				; 16 byte Matrix
  19+ 9819
  20+ 9819              P0INWK							; page 0 & 46
  21+ 9819              p0INWK31						; page 0 & 65
  22+ 9819              P0INWK36						; PAGE 0 &6A
  23+ 9819
  24+ 9819 00           XX4			DB	0				; XX4 page 0 &96 last Normal Found to be visible
  25+ 981A              LastNormalVisible	equ	XX4
  26+ 981A              varXX4              equ XX4
  27+ 981A
  28+ 981A
  29+ 981A
  30+ 981A 00           PATG		DB	0				; 6502 &03C9
  31+ 981B 00 00        SLSP 		DW	0				; &03B0 \ SLSP \ ship lines pointer
  32+ 981D
  33+ 981D
  34+ 981D              ;UNIV		DS FreeListSize*2	; Array of Universe Pointers
  35+ 981D              ;HULLINDEX	DS ShipTypeSize*2	; hull index for table at XX21= &5600 XX21-1,Y
  36+ 981D
  37+ 981D              ; Present System Variables
  38+ 981D
  39+ 981D 2B           RandomSeed				DB	43			; 00 DEBUG JUST SOME START VALUES
  40+ 981E 20           RandomSeed1				DB	32	; 01
  41+ 981F 0C           RandomSeed2				DB	12			; 02
  42+ 9820 42           RandomSeed3				DB	66			; 03
  43+ 9821
  44+ 9821 00           varT1					DB	0				; 06
  45+ 9822 00           SClo					DB 0				; 07
  46+ 9823 00           SChi					DB 0				; 08
  47+ 9824 00           varP					DB 0 				; 10	XX16+7
  48+ 9825 00           varPhi					DB 0 				; 11	XX16+8
  49+ 9826 00           varPhi2					DB 0 				; 12	XX16+9
  50+ 9827              varPp1                  equ varPhi
  51+ 9827              varPp2                  equ varPhi2
  52+ 9827 00           UnivPointerLo			DB	0				; 20		INF                 XX0+2
  53+ 9828 00           UnivPointerHi			DB	0				; 21      INF+1               XX0+3
  54+ 9829              UnivPointer				equ	UnivPointerLo
  55+ 9829 00           varV					DB 0				; 22                          XX0+4
  56+ 982A 00           varVHi					DB 0				; 23                          XX0+5
  57+ 982B 00           varXXlo                 DB 0                ; 24
  58+ 982C 00           varXXHi                 DB 0                ; 25
  59+ 982D              varXX					equ	varXXlo
  60+ 982D 00           YYlo                    DB 0                ; 26
  61+ 982E 00           YYHi                    DB 0                ; 27
  62+ 982F              varYY					equ	YYlo
  63+ 982F              											;	28
  64+ 982F              											;	29
  65+ 982F              ;PlayerShipPositionData - Must be contiguous for setup
  66+ 982F 00           BETA 					DB	0               ; 2A        (pitch done)
  67+ 9830 00           JSTY                    DB  0               ; Joystick analog
  68+ 9831 00           BET1 					DB	0               ; 2B        lower7 magnitude
  69+ 9832 00           BET2                    DB  0               ;            climb sign
  70+ 9833 00           BET2FLIP				DB	0				; 7C		BET 2 pitch Sign negated
  71+ 9834 1F           BET1MAXC                DB  31              ; max climb
  72+ 9835 E1           BET1MAXD                DB  -31             ; max dive
  73+ 9836 00           XC						DB	0               ; 2C
  74+ 9837 00           YC						DB 	0               ; 2D
  75+ 9838              ;... ECM logic. If another ship adds ECM then we just set the loop A and B to starting values so they overlap
  76+ 9838 00           ECMActive				DB 	0				; 30		ECM Active flag
  77+ 9839 00           ECMLoopA                DB  0
  78+ 983A 00           ECMLoopB                DB  0
  79+ 983B 00 00        JSTX                    DW  0               ;           Joystick analog value
  80+ 983D 00           ALPHA					DB	0				; 8D        Alpha with bit 7 sign
  81+ 983E 00           ALP1					DB 	0				; 31		ALP1	Roll magnitude Also Apha
  82+ 983F 00           ALP2					DB  0				; 32		ALP2	Roll Sign
  83+ 9840 00           ALP2FLIP				DB  0				; 33		ALP2	negated roll sign
  84+ 9841 1F           ALP1MAXR                DB  31               ;   Maximum roll, added becuase we may allow different ship types
  85+ 9842 E1           ALP1MAXL                DB  -31             ;   Maximum roll, added becuase we may allow different ship types
  86+ 9843
  87+ 9843
  88+ 9843
  89+ 9843              MAXMESSAGES             EQU 5
  90+ 9843              MESSAGETIMELIMIT        EQU 20
  91+ 9843              MESSAGESIZE             EQU 33
  92+ 9843              MESSAGELINE             EQU $0001
  93+ 9843
  94+ 9843 00           MessageCount            DB  0                ; used for enquing messages later
  95+ 9844 00           MessageCurrent          DB  0
  96+ 9845 05 00        MessageIndex            DW  MAXMESSAGES
  97+ 9847 00 00 00...  MessageQueue            DS  MAXMESSAGES * MESSAGESIZE
  98+ 98EC 05           MessageTimeout          DB  MAXMESSAGES
  99+ 98ED 00 00 00...  IndexedWork				DS	37				; General purpose work space when doing temp arrays
 100+ 9912
 101+ 9912              ; MOVED TO Universe XX19					DB	0				; page 0 &67
 102+ 9912              ; MOVED TO Universe XX20					DB	0				; page 0 &67 also used as XX19+1 for XX19 being a word
 103+ 9912              ;DEFUNCT EQUATE NormalCountCopyBy4		equ	XX20			; Also used for normal * 4 holding variable
 104+ 9912 00           XX21					DB  0				; this may be part of XX20/xx21 accordign to spawn new shipXX21		DW	0				; Ah XX21 is hull pointer  hull pointer lo as it can;t hold HULLINDX as 16bit array
 105+ 9913              ;XX21 is the pointer table to the pages for ship types. this will be repalaced by paging so just need an equate for first page
 106+ 9913
 107+ 9913
 108+ 9913 00 00 00...  SystemSeed				DS  5				;	6C		QQ15	Current Galaxy Seed
 109+ 9918              											;	6D		QQ15+1
 110+ 9918              											;	6E		QQ15+2
 111+ 9918              											;	6F		QQ15+3
 112+ 9918              											;	70		QQ15+4
 113+ 9918              											;	71		QQ15+5
 114+ 9918 00           QQ17					DB	0				;   72
 115+ 9919 00           XX18xlo                 DB  0               ;	72		XX18   xlo
 116+ 991A 00           XX18xhi                 DB  0               ;	73		XX18+1 xhi
 117+ 991B 00           XX18xsg                 DB  0               ;	74		XX18+2 xsgn
 118+ 991C 00           XX18ylo                 DB  0               ;	75		XX18   ylo
 119+ 991D 00           XX18yhi                 DB  0               ;	76		XX18+1 yhi
 120+ 991E 00           XX18ysg                 DB  0               ;	77		XX18+2 ysgn
 121+ 991F 00           XX18zlo                 DB  0               ;	78		XX18   zlo
 122+ 9920 00           XX18zhi                 DB  0               ;	79		XX18+1 zhi
 123+ 9921 00           XX18zsg                 DB  0               ;	7A		XX18+2 zsgn
 124+ 9922
 125+ 9922 28           SHIPMAXSPEED            DB  40              ; variable to facilitate ship editing later
 126+ 9923 00           DELTA					DB 	0				; 7D 		DELTA  \ bpl -2 inserted here to stall from title code if byte check fails
 127+ 9924 00           DELT4Lo					DB 	0				; 7E
 128+ 9925 00           DELT4Hi					DB 	0				; 7F
 129+ 9926              DELTA4                  equ                 DELT4Lo
 130+ 9926
 131+ 9926
 132+ 9926              ; Not thise must be in this order else 16 bit fetches will fail
 133+ 9926 00           varU                    DB  0               ;   80
 134+ 9927 00           varQ					DB  0 				;	81
 135+ 9928 00           varR					DB  0 				;	82
 136+ 9929 00           varS					DB  0 				;	83
 137+ 992A              varRS                   equ varR
 138+ 992A
 139+ 992A 00 00        varU16                  DW  0               ; 16 bit variant on varU as I can't use above for this
 140+ 992C
 141+ 992C 00           XSAV					DB	0				; 84	   XSAV usef for nearby ship count outer
 142+ 992D 00           YSAV                    DB  0               ; 85
 143+ 992E 00           XX17					DB	0				; 86
 144+ 992F              RequiredScale			equ  XX17			; use to hold calculated scale in drawing ship
 145+ 992F              varXX17                 equ  XX17
 146+ 992F 00           ScreenChanged           DB  0
 147+ 9930 00           ScreenIndex             DB  0
 148+ 9931 00           InvertedYAxis           DB  0
 149+ 9932 00           MenuIdMax				DB	0				;	87		MenuIdMax		QQ11
 150+ 9933              											; Bit 7 Set  ShortRangeChart    $80
 151+ 9933              											; Bit 6 Set  Galactic Chart     $40
 152+ 9933              											; Bit 5 Set  Market Place       $20
 153+ 9933              											; Bit 4 Set  Status Screen      $10
 154+ 9933              											; Bit 3 Set  Display Inventory  $08
 155+ 9933                                                          ; Bit 2 Set  Planet Data        $04
 156+ 9933                                                          ; View bit combinations if the ones above not matched
 157+ 9933                                                          ; bits 1 0
 158+ 9933                                                          ;      1 1  Front view , i.e. $03
 159+ 9933                                                          ;      1 0  Aft View          $02
 160+ 9933                                                          ;      0 1  Left View         $01
 161+ 9933                                                          ;      0 0  Right view        $00
 162+ 9933              											; Bit 0 Set  Data On System
 163+ 9933              											; 0  Space View (Not a menu)
 164+ 9933 00           ZZDust					DB	0				;	88		ZZDust (Poss 16 bit need to check)
 165+ 9934 00           XX13                    DB  0               ;   89
 166+ 9935 00           TYPE					DB	0				; 8C used for ship type in drawing
 167+ 9936              ;Docked flag = 00 = in free space
 168+ 9936              ;              FF = Docked
 169+ 9936              ;              FE = transition
 170+ 9936              ;              FD = Setup open space and transition to not docked
 171+ 9936              ;              FC = Hyperspace manimation
 172+ 9936              ;              FB = Hyperspace complete
 173+ 9936 00           DockedFlag				DB	0				; 8E -
 174+ 9937 00           GamePaused              DB  0
 175+ 9938 00           varSWAP                 DB  0               ; 90 , general purpose swap variable
 176+ 9939 00           varCNT                  DB  0               ; 93
 177+ 993A
 178+ 993A 00           varK					DB	0				; 40
 179+ 993B 00           varKp1					DB	0				; 41
 180+ 993C 00           varKp2					DB	0				; 42
 181+ 993D 00           varKp3					DB	0				; 43
 182+ 993E
 183+ 993E 00           varK2                   DB  0               ; 9B
 184+ 993F 00           varK2p1                 DB  0               ; 9C K2 plus 1
 185+ 9940 00           varK2p2                 DB  0               ; 9D K2 plus 2
 186+ 9941 00           varK2p3                 DB  0               ; 9E K2 plus 3
 187+ 9942
 188+ 9942 00           Point                   DB  0               ; 9F      POINT
 189+ 9943
 190+ 9943 00           varT					DB	0				; D1
 191+ 9944
 192+ 9944 00 00 00...  varVector9ByteWork      DS  9
 193+ 994D
 194+ 994D 00 00 00 00  varK3					DS	4				; D2
 195+ 9951 00           varK3p2					DB	0				; 42
 196+ 9952 00           varK3p3					DB	0				; 43
 197+ 9953              varK3p1					equ varK3+1			; D3
 198+ 9953 00 00 00 00  varK4					DS	4				; E0
 199+ 9957              varK4p1					equ varK4+1			; D3
 200+ 9957
 201+ 9957
 202+ 9957              ;Heap
 203+ 9957
 204+ 9957 00 00        HeapStart				DS	2				; &0100 XX3 50 bytes for now
 205+ 9959 00 00 00...  HeapData				DS	50
 206+ 998B              ; Contains 				X 16 bit, Y ;MissileArmedStatus		DB	0				; 0344 MSAR   using MissileTarget, if missile is not armed tehn target is FF
 207+ 998B              ; TODO will need an read for a list of missiles, who they are targeting an the target current vector for AI persuit
 208+ 998B              ; i.e. a list of programmed missiles in universe slot list code
 209+ 998B 00 00 00...  DampingKeys				DS  7				; 0387 - 038D
 210+ 9992              ;  #&6 Does K toggle keyboard/joystick control -  03CD certainly makes keyboard not work anymore.
 211+ 9992              ;  #&5 Does J reverse both joystick channels
 212+ 9992              ;  #&4 Does Y reverse joystick Y channel			03CB
 213+ 9992              ;  #&2 Does X toggle startup message display ? PATG?	03C9
 214+ 9992              ;  #&3 Does F toggle flashing information			03CA
 215+ 9992              ;  #&1 Does A toggle keyboard auto-recentering ?
 216+ 9992              ;  #&0 Caps-lock toggles keyboard flight damping
 217+ 9992 00           NbrMissiles				DB	0				; 038B	Does this clash with Dampingkeys?
 218+ 9993 00           FugitiveInnocentStatus	DB	0				; 038C	FIST
 219+ 9994 00 00 00...  StockAvaliabiliy		DS 	16				; 038D - 039C Stock inventory in station
 220+ 99A4 00           AlienItemsAvaliability  DB	0				; 039D
 221+ 99A5 00           RandomMarketSeed		DB	0				; 039E   \ QQ26	\ random byte for each system vist (for market)
 222+ 99A6 00 00        KillTally  				DW	0				; 039F - 03A0 \ TALLY   \ kills lo hi
 223+ 99A8 00           COMP     				DB	0				; 03A1 2nd competion byte used for save integrity checks?
 224+ 99A9              											;
 225+ 99A9 00           MCH						DB	0				; 03A4  \ MCH  \ old message to erase
 226+ 99AA 00           MarketPrice				DB	0				; 03AA QQ24
 227+ 99AB 00           MaxStockAvaliable		DB  0				; 03AB   \ QQ25     \ max available
 228+ 99AC 00           SystemEconomy			DB  0				; 03AC \ QQ28   \ the economy byte of present system (0 is Rich Ind.)
 229+ 99AD 00           CargoItem				DB	0				; 03AD (I think its item type just scooped) QQ29
 230+ 99AE 00 00        ShipLineStackPointer	DW	0				; 03B0 & 03B1 ship Lines pointer reset to top LS% = &0CFF (make DW for z80 and direct hl pointer)
 231+ 99B0              											; this is ship lines stack pointer so may be redundant with paging
 232+ 99B0              											; LS = line stack so we will have one for now to remove later
 233+ 99B0 00           COK						DB	0				; 0366 Competition Byte what ? Does some file check and accelleration check
 234+ 99B1 00           DisplayEcononmy			DB	0				; 03B8
 235+ 99B2 00           DisplayGovernment		DB  0				; 03B9 Is it target? 03B9 \ QQ4	 \ Government, 0 is Anarchy.
 236+ 99B3 00           DisplayTekLevel			DB	0				; 03BA   \ QQ5	\ Tech
 237+ 99B4 00 00        DisplayPopulation		DW	0				; 03BB \ QQ6  \ population*10
 238+ 99B6 00 00        DisplayProductivity		DW	0				; 03BD \ QQ7   \ productivity*10
 239+ 99B8 00 00        Distance          		DW	0				; 03BE \ QQ8 distince in 0.1LY units
 240+ 99BA 00 00        DisplayRadius			DW	0
 241+ 99BC              ; --- Used in creation of sun and planet----;
 242+ 99BC 00           PlanetXPos              DS  1
 243+ 99BD 00           PlanetYPos              DS  1
 244+ 99BE 00           PlanetZPos              DS  1
 245+ 99BF 00           PlanetType              DS  1
 246+ 99C0 00           SunXPos                 DS  1
 247+ 99C1 00           SunYPos                 DS  1
 248+ 99C2 00           SunZPos                 DS  1
 249+ 99C3              ; -- Current Missile Runbtime data
 250+ 99C3 00           CurrentMissileBank:     DB      0                                   ; used by missile logic as local copy of missile bank number
 251+ 99C4 00 00        MissileXPos             DW      0
 252+ 99C6 00           MissileXSgn             DB      0
 253+ 99C7 00 00        MissileYPos             DW      0
 254+ 99C9 00           MissileYSgn             DB      0
 255+ 99CA 00 00        MissileZPos             DW      0
 256+ 99CC 00           MissileZSgn             DB      0
 257+ 99CD 00 00        CurrentTargetXpos       DS      2
 258+ 99CF 00 00        CurrentTargetXsgn       DS      2
 259+ 99D1 00 00        CurrentTargetYpos       DS      2
 260+ 99D3 00 00        CurrentTargetYsgn       DS      2
 261+ 99D5 00 00        CurrentTargetZpos       DS      2
 262+ 99D7 00 00        CurrentTargetZsgn       DS      2
 263+ 99D9 00 00        TargetVectorXpos        DS      2
 264+ 99DB 00 00        TargetVectorXsgn        DS      2
 265+ 99DD 00 00        TargetVectorYpos        DS      2
 266+ 99DF 00 00        TargetVectorYsgn        DS      2
 267+ 99E1 00 00        TargetVectorZpos        DS      2
 268+ 99E3 00 00        TargetVectorZsgn        DS      2
 269+ 99E5 00           CurrentMissileBlastRange:      DB  0                       ; TODO Initi for runtime copied in when setting up a missile
 270+ 99E6 00           CurrentMissileBlastDamage:     DB  0                       ; TODO Initi for runtime copied in when setting up a missile
 271+ 99E7 00           CurrentMissileDetonateRange:   DB  0                       ; TODO Initi for runtime copied in when setting up a missile, allows for proximity missiles
 272+ 99E8 00           CurrentMissileDetonateDamage:  DB  0                       ; TODO Initi for runtime copied in when setting up a missile
 273+ 99E9
 274+ 99E9              ; --- Main Loop Data -----------------------;
 275+ 99E9 00           CurrentUniverseAI       DB  0               ; current ship unviverse slot due an AI update
 276+ 99EA 00           SelectedUniverseSlot    DB  0
 277+ 99EB 00           SetStationAngryFlag     DB  0               ; used to semaphore angry space station
 278+ 99EC 00           ShipBlastCheckCounter   DB  0
 279+ 99ED 00           InnerHyperCount			DB 	0				; 2F QQ22+1
 280+ 99EE 00           OuterHyperCount			DB 	0				; 2E QQ22
 281+ 99EF 00           EventCounter            DB  0
 282+ 99F0 00           HyperCircle             DB  0
 283+ 99F1 00           MissJumpFlag            DB  0
 284+ 99F2 00           PlayerMisJump			DB	0				; $0341 witchspace misjump
 285+ 99F3 00           HyperSpaceFX			DB	0				; 0348 HFX (probabyl BBC specific
 286+ 99F4 00           ExtraVessels			DB	0				; 0349 EV Use d by cops, extra vessels still to spawn?
 287+ 99F5 00           Delay					DB	0				; 034A Delay general purpose eg. spawing EV or when printign messages
 288+ 99F6 00           CurrentMissileCheck:    DB  0               ; if > Universe Slot list then free for next missile
 289+ 99F7 00           MessageForDestroyed		DB	0				; 034B Message flag for item + destroyed
 290+ 99F8              UniverseSlotListSize    equ	12
 291+ 99F8 00 00 00...  UniverseSlotList        DS  UniverseSlotListSize
 292+ 9A04 00 00 00...  UniverseSlotType        DS  UniverseSlotListSize ; base type, e.g. missile, cargo etc,
 293+ 9A10              ; Probably not needed UniverseTypeCount       DS  UniverseSlotListSize
 294+ 9A10 04           ConsoleRefreshCounter   DB  ConsoleRefreshInterval ; Every 4 interations the console will update twice (once for primary and once for seconday buffer)
 295+ 9A11 00           ConsoleRedrawFlag       DB  0
 296+ 9A12 00           TextInputMode           DB  0
 297+ 9A13 00           CursorKeysPressed       DB  0               ; mapping of the current key presses
 298+ 9A14                                                          ; 7    6    5    4     3    2        1    0
 299+ 9A14                                                          ; Up   Down Left Right Home Recentre
 300+ 9A14 00           FireLaserPressed        DB  0
 301+ 9A15              ; --- Current System Data ------------------;
 302+ 9A15 00           SpaceStationSafeZone    DB  0               ; Flag to determine if we are in safe zone
 303+ 9A16 00           ExtraVesselsCounter     DB  0
 304+ 9A17 00           JunkCount				DB  0				; $033E
 305+ 9A18 00           AsteroidCount           DB  0               ; Not used as yet
 306+ 9A19 00           TransporterCount        DB  0
 307+ 9A1A 00           CopCount                DB  0
 308+ 9A1B 00           PirateCount             DB  0
 309+ 9A1C              ; --- Galaxy Data --------------------------;
 310+ 9A1C 00           Galaxy      			DB	0				; 0367 Galaxy (incremented with galactiv drive
 311+ 9A1D 00 00 00...  WorkingSeeds			DS	6
 312+ 9A23 00 00 00...  PresentSystemSeeds		DS	6				; 03B2 - 03B7
 313+ 9A29 00 00 00...  GalaxySeeds				DS	6				; 035B - 0360 QQ21
 314+ 9A2F 00           PresentSystemX			DB	0				; System we are currently in
 315+ 9A30 00           PresentSystemY			DB  0				; System we are currently in
 316+ 9A31 00           TargetSystemX			DB	0				; System we are targeting for jump
 317+ 9A32 00           TargetSystemY			DB	0				; System we are targeting for jump
 318+ 9A33 00           GovPresentSystem		DB	0				; 03AE Govenment
 319+ 9A34 00           TekPresentSystem		DB	0				; 03AF Technology
 320+ 9A35
 321+ 9A35 00           CompassColor			DB	0				; 03C5
 322+ 9A36 00           SoundToggle				DB	0				; 03C6
 323+ 9A37 00           KeyboardRecenterToggle	DB	0				; 03C8
 324+ 9A38 00           PATGMask				DB	0				; &03C9    \ PATG	\ Mask to scan keyboard X-key, for misjump
 325+ 9A39 00           FlashToggle				DB  0				; 03CA \ FLH \ flash toggle
 326+ 9A3A 00           ReverseJoystick			DB	0				; 03CB \ JSTGY \ Y reverse joystick Y channel
 327+ 9A3B 00           JoystickToggle			DB	0				; 03CD  \ JSTK    \ K toggle keyboard/joystick
 328+ 9A3C 00           DigitalJoystick			DB	0				; 03CE \ JDB   \ . = toggle between keyboard and bitpaddle
 329+ 9A3D 00           DiskReadFailFlag		DB	0				; 03CF \ CATF \ Disk catalog fail flag
 330+ 9A3E
 331+ 9A3E              ; Working Data
 332+ 9A3E
 333+ 9A3E              ;UniverseTable			DS	26				; 1741  \ address pointers for 13 ships INF on pages &9. 37 bytes each.
 334+ 9A3E              ; $0900 =	EQUW page9+37* 0 \ copied to inner worskpace INWK on zero-page when needed
 335+ 9A3E              ; $0925 =	EQUW page9+37* 1
 336+ 9A3E              ; $094A =	EQUW page9+37* 2
 337+ 9A3E              ; $096F =	EQUW page9+37* 3
 338+ 9A3E              ; $0994 =	EQUW page9+37* 4
 339+ 9A3E              ; $09B9 =	EQUW page9+37* 5
 340+ 9A3E              ; $09DE =	EQUW page9+37* 6
 341+ 9A3E              ; $0A03 =	EQUW page9+37* 7
 342+ 9A3E              ; $0A28 =	EQUW page9+37* 8
 343+ 9A3E              ; $0A4D =	EQUW page9+37* 9
 344+ 9A3E              ; $0A72 =	EQUW page9+37*10
 345+ 9A3E              ; $0A97 =	EQUW page9+37*11
 346+ 9A3E              ; $0ABC =	EQUW page9+37*12 \ allwk up to &0ABC while heap for edges working down from &CFF.
 347+ 9A3E
 348+ 9A3E
 349+ 9A3E
 350+ 9A3E              ; 0b00 is start address of data to save
 351+ 9A3E              ; Now MissionData VarTP					DB	0				; 0358 TP? The Plan  \ mission uses lower 4 bits
 352+ 9A3E              											; Bit mask XXXX10XX - Thargoid plan mission
 353+ 9A3E
 354+ 9A3E 00           MissionData				DB	0				; &0B00	  \ look at data, first byte is TP mission bits
 355+ 9A3F
 356+ 9A3F 00 00        FileNameStringPointer	DW	0				;0C00	   \ pointer to filename string
 357+ 9A41 00 00        CommanderLoadAddress	DW	0				;0C03
 358+ 9A43 00 00        LengthOfFile			DW	0				;0C0B
 359+ 9A45 00 00        SaveDataEndAddress		DW	0				;&0C0F	      \ &0C00 is end address of data to save
 360+ 9A47
 361+ 9A47 00 00 00...  EdgesBuffer				DS 50
 362+ 9A79              EdgesBufferSP			equ	$				; Was $0CFF			; Heap pointer for edges buffer
 363+ 9A79              ShipLinesBufferSP		equ EdgesBufferSP	; was $0CFF
 364+ 9A79
 365+ 9A79 00 00 00...  ShipLineStack			DS  70			; For now but will be in the page later
 366+ 9ABF              ShipLineStackTop		equ $ - ShipLineStack
 367+ 9ABF
 368+ 9ABF 00 00 00...  LSO						DS 	$C0				;0E00 Line Buffer Solar of 192 lines (may be 191 in reality)
 369+ 9B7F              ; LSX vector overlaps with LSO
 370+ 9B7F 00           LSX2					DB	0				; &0EC0	    \ LSX2 bline buffer size?
 371+ 9B80 00           LSY2					DB	0           	; &0F0E	    \ LSY2
 372+ 9B81
 373+ 9B81              ; Star Positions are 16 bit 3d coordinates
 374+ 9B81 00 00 00...  varDust                 DS  MaxNumberOfStars * 6
 375+ 9BC3 00 00 00...  varDustSceen            DS  MaxNumberOfStars * 2 ; To optimise star list to wipe from screen
 376+ 9BD9 00           varStarX                DB  0
 377+ 9BDA 00           varStarY                DB  0
 378+ 9BDB 00 00 00...  varDustX                DS MaxNumberOfStars *2
 379+ 9BF1 00 00 00...  varDustY                DS MaxNumberOfStars *2
 380+ 9C07 00 00 00...  varDustZ                DS MaxNumberOfStars *2
 381+ 9C1D              ; -- Player Runtime Data
 382+ 9C1D 00           GunTemperature          DB  0
 383+ 9C1E 00           CabinTemperature        DB  0
 384+ 9C1F 00           PlayerForwardSheild0	DB	0 ; ?????
 385+ 9C20 00           PlayerForwardSheild1    DB	0
 386+ 9C21 00           PlayerForwardSheild2    DB	0
 387+ 9C22 00           ForeShield				DB	0				; 03A5
 388+ 9C23 00           AftShield				DB	0				; 03A6
 389+ 9C24 00           PlayerEnergy			DB	0				; 03A7
 390+ 9C25 00           CompassX				DB	0				; 03A8
 391+ 9C26 00           CompassY				DB	0				; 03A9
 392+ 9C27 00           MissileTarget			DB  0				; 45
 393+ 9C28 00           MissileLaunchFlag       DB  0
 394+ 9C29 00 00 00...  CommanderName           DS  15
 395+ 9C38 00           CommanderName0			DB	0				; Sneaky little 0 to allow use of print name directly
 396+ 9C39 00           BadnessStatus           DB  0
 397+ 9C3A              ; need to add copy table routines
 398+ 9C3A 00           CurrLaserType           DB  0               ; current view laser type, determines sprite routine etc
 399+ 9C3B 00           CurrLaserPulseRate      DB  0               ; current view laser amount of pulses
 400+ 9C3C 00           CurrLaserPulseOnTime    DB  0               ; how many cycles the laser is on
 401+ 9C3D 00           CurrLaserPulseOffTime   DB  0               ; how many cycles the laser is on
 402+ 9C3E 00           CurrLaserPulseRest      DB  0               ; current view laser delay setup between pulses
 403+ 9C3F              ; Count down timers must be aligned like this to work
 404+ 9C3F 00           CurrLaserPulseOnCount   DB  0               ; how many cycles the laser is on timer
 405+ 9C40 00           CurrLaserPulseOffCount  DB  0               ; how many cycles the laser is on timer
 406+ 9C41 00           CurrLaserPulseRestCount DB  0               ; countdown after shooting for next shot
 407+ 9C42 00           CurrLaserPulseRateCount DB  0               ; current view laser current pulses fired
 408+ 9C43              ;note rapidly changing views could reset these so need to consider it in an array
 409+ 9C43
 410+ 9C43              ; LaserType
 411+ 9C43              ; LaserPulseRate                          ; how many pulses can be fired before long pause
 412+ 9C43              ; LaserPulsePause                         ; time before next pulse - 0 = beam
 413+ 9C43              ; LaserPulseRest                          ; time before pulse count resets to 0
 414+ 9C43              ; LaserDamageOutput                       ; amount of damage for a laser hit
 415+ 9C43              ; LaserEnergyDrain                        ; amount of energy drained by cycle
 416+ 9C43              ; LaserHeat                               ; amount of heat generated
 417+ 9C43              ; LaserDurability                         ; probabability out of 255 that a hit on unshielded will add random amount of damage
 418+ 9C43              ; LaserDurabilityAmount                   ; max amount of damagage can be sustained in one damage hit
 419+ 9C43              ; LaserInMarkets                          ; can this laser be purchased 0 = yes 1 = no
 420+ 9C43              ; LaserTechLevel                          ; minimum tech level system to buy from
 421+ 9C43
 422+ 9C43
 423+ 9C43
 424+ 9C43 00           CurrLaserBurstRate      DB  0
 425+ 9C44 00           CurrLaserBurstCount     DB  0
 426+ 9C45 00           CurrLaserDamageOutput   DB  0
 427+ 9C46 00           CurrLaserEnergyDrain    DB  0
 428+ 9C47 00           CurrLaserHeat           DB  0
 429+ 9C48              ; -- Input variables
 430+ 9C48 00           JoystickX				DB	0				; 034C JSTX
 431+ 9C49 00           JoystickY				DB	0				; 034D JSTY
 432+ 9C4A 00           XSAV2 					DB	0				; 034E used to temporary save 6502 X reg
 433+ 9C4B 00           YSAV2 					DB	0				; 034F used to temporary save 6502 Y reg
 434+ 9C4C
 435+ 9C4C              ; -- Console drawing data
 436+ 9C4C              FShieldStart            equ $8410
 437+ 9C4C              AShieldStart            equ $8D10
 438+ 9C4C              FuelStart               equ $9410
 439+ 9C4C
 440+ 9C4C              EnergyBar4Start         equ $A5D5
 441+ 9C4C              EnergyBar3Start         equ $ADD5
 442+ 9C4C              EnergyBar2Start         equ $B5D5
 443+ 9C4C              EnergyBar1Start         equ $BDD5
 444+ 9C4C              ; 70 /2 = 35 values
 445+ 9C4C              ;                            0                             1                             2                             3
 446+ 9C4C              ;                            0  1  2  3  4  5  6  7  8  9  0  1  2  3  4  5  6  7  8  9  0  1  2  3  4  5  6  7  8  9  0  1  2  3  4  5  6
 447+ 9C4C 01 02 02 03  FuelMapping             DB  01,02,02,03,04,04,05,06,06,07,08,09,10,10,11,12,13,14,14,15,16,16,17,19,20,21,21,22,23,24,25,26,27,28,30,31,31
 447+ 9C50 04 04 05 06
 447+ 9C54 06 07 08 09
 447+ 9C58 0A 0A 0B 0C
 447+ 9C5C 0D 0E 0E 0F
 447+ 9C60 10 10 11 13
 447+ 9C64 14 15 15 16
 447+ 9C68 17 18 19 1A
 447+ 9C6C 1B 1C 1E 1F
 447+ 9C70 1F
 448+ 9C71              SpeedoStart             equ $84D1
 449+ 9C71              ;                            0                             1                             2                             3                             4
 450+ 9C71              ;                            0  1  2  3  4  5  6  7  8  9  0  1  2  3  4  5  6  7  8  9  0  1  2  3  4  5  6  7  8  9  0  1  2  3  4  5  6  7  8  9  0
 451+ 9C71 01 02 02 03  SpeedoMapping           DB  01,02,02,03,04,04,05,06,06,07,08,09,10,10,11,12,13,14,14,15,16,16,17,18,19,20,20,21,22,23,24,24,25,26,26,27,28,28,29,30,31
 451+ 9C75 04 04 05 06
 451+ 9C79 06 07 08 09
 451+ 9C7D 0A 0A 0B 0C
 451+ 9C81 0D 0E 0E 0F
 451+ 9C85 10 10 11 12
 451+ 9C89 13 14 14 15
 451+ 9C8D 16 17 18 18
 451+ 9C91 19 1A 1A 1B
 451+ 9C95 1C 1C 1D 1E
 451+ 9C99 1F
 452+ 9C9A
 453+ 9C9A              DialMiddleXPos          equ $E1
 454+ 9C9A              RollMiddle              equ $8CE0
 455+ 9C9A              PitchMiddle             equ $94E0
 456+ 9C9A
 457+ 9C9A
 458+ 9C9A              ResetPlayerShip:        ZeroThrottle
 458+ 9C9A AF          >                        xor     a
 458+ 9C9B 32 23 99    >                        ld      (DELTA),a
 458+ 9C9E 32 24 99    >                        ld      (DELT4Lo),a
 458+ 9CA1 32 25 99    >                        ld      (DELT4Lo+1),a
 459+ 9CA4                                      ZeroPitch
 459+ 9CA4 AF          >                        xor     a
 459+ 9CA5 32 32 98    >                        ld      (BET2),a
 459+ 9CA8 32 33 98    >                        ld      (BET2FLIP),a
 459+ 9CAB 32 30 98    >                        ld      (JSTY),a
 459+ 9CAE 32 2F 98    >                        ld      (BETA),a
 460+ 9CB1                                      ZeroRoll
 460+ 9CB1 AF          >                        xor     a                              ; zero roll and climb
 460+ 9CB2 32 3F 98    >                        ld      (ALP2),a
 460+ 9CB5 32 40 98    >                        ld      (ALP2FLIP),a
 460+ 9CB8 32 3B 98    >                        ld      (JSTX),a
 460+ 9CBB 32 3D 98    >                        ld      (ALPHA),a
 461+ 9CBE                                      ClearMissileTarget
 461+ 9CBE AF          >                        xor     a                           ; Set missile target to FF
 461+ 9CBF 3D          >                        dec     a
 461+ 9CC0 32 27 9C    >                        ld      (MissileTarget),a
 461+ 9CC3             >                        SetMemFalse MissileLaunchFlag
 461+ 9CC3 3E FF       >                        ld      a,$FF
 461+ 9CC5 32 28 9C    >                        ld      (MissileLaunchFlag),a
 462+ 9CC8                                      ClearECM
 462+ 9CC8 AF          >                        xor     a
 462+ 9CC9 32 39 98    >                        ld      (ECMLoopA),a
 462+ 9CCC 32 3A 98    >                        ld      (ECMLoopB),a
 463+ 9CCF                                      ChargeEnergyAndShields
 463+ 9CCF 3E FF       >                        ld      a,$FF
 463+ 9CD1 32 24 9C    >                        ld      (PlayerEnergy),a
 463+ 9CD4 32 22 9C    >                        ld      (ForeShield),a
 463+ 9CD7 32 23 9C    >                        ld      (AftShield),a
 464+ 9CDA C9                                   ret
 465+ 9CDB
# file closed: ./Variables/general_variables.asm
1092  9CDB
1093  9CDB                  INCLUDE "./Variables/UniverseSlotRoutines.asm"
# file opened: ./Variables/UniverseSlotRoutines.asm
   1+ 9CDB AF           ClearSlotCount:         xor     a
   2+ 9CDC 21 F8 99                             ld      hl,UniverseSlotList
   3+ 9CDF 06 0C                                ld      b, UniverseSlotListSize ; prbably not needed + UniverseSlotTypeSize
   4+ 9CE1 77           .fillLoop:              ld      (hl),a
   5+ 9CE2 23                                   inc     hl
   6+ 9CE3 10 FC                                djnz    .fillLoop
   7+ 9CE5 C9                                   ret
   8+ 9CE6
   9+ 9CE6              ; Initialises all types to a count of 1 where there is an occupied universe slot
  10+ 9CE6              ; this needs expanding to cater for a missing type, find type and increment count (use cpir?)
  11+ 9CE6              ; DOE NOT WORK CorrectSlotCount:       call    ClearSlotCount
  12+ 9CE6              ; DOE NOT WORK                         ld      hl,UniverseSlotCount
  13+ 9CE6              ; DOE NOT WORK                         ld      de,UniverseSlotList
  14+ 9CE6              ; DOE NOT WORK                         ld      b,UniverseSlotListSize
  15+ 9CE6              ; DOE NOT WORK .fillLoop:              ld      a,(de)
  16+ 9CE6              ; DOE NOT WORK                         cp      $FF
  17+ 9CE6              ; DOE NOT WORK                         jr      z,.SkipSlot
  18+ 9CE6              ; DOE NOT WORK .CorrectSlot:           ld      (hl),a
  19+ 9CE6              ; DOE NOT WORK                         inc     hl
  20+ 9CE6              ; DOE NOT WORK                         ld      (hl),1
  21+ 9CE6              ; DOE NOT WORK                         inc     hl
  22+ 9CE6              ; DOE NOT WORK                         inc     hl
  23+ 9CE6              ; DOE NOT WORK .SkipSlot               inc     de
  24+ 9CE6              ; DOE NOT WORK                         djnz    .fillLoop
  25+ 9CE6 C9                                   ret
  26+ 9CE7              ; Wipe all items
  27+ 9CE7 3E FF        ClearUnivSlotList:      ld      a,$FF
  28+ 9CE9 21 F8 99                             ld      hl,UniverseSlotList
  29+ 9CEC 06 18                                ld      b, UniverseSlotListSize * 2
  30+ 9CEE 77           .fillLoop:              ld      (hl),a
  31+ 9CEF 23                                   inc     hl
  32+ 9CF0 10 FC                                djnz    .fillLoop
  33+ 9CF2 C9                                   ret
  34+ 9CF3
  35+ 9CF3 21 F8 99     SetSlot0ToSpaceStation: ld      hl,UniverseSlotList
  36+ 9CF6 36 02                                ld      (hl),ShipTypeStation
  37+ 9CF8 21 04 9A                             ld      hl,UniverseSlotType
  38+ 9CFB 36 02                                ld      (hl),ShipTypeStation
  39+ 9CFD C9                                   ret
  40+ 9CFE
  41+ 9CFE 21 F8 99     SetSlotAToTypeB:        ld      hl,UniverseSlotList
  42+ 9D01 ED 31                                add     hl,a
  43+ 9D03 70                                   ld      (hl),b
  44+ 9D04 C9                                   ret
  45+ 9D05
  46+ 9D05 21 04 9A     SetSlotAToClassB:       ld      hl,UniverseSlotType
  47+ 9D08 ED 31                                add     hl,a
  48+ 9D0A 70                                   ld      (hl),b
  49+ 9D0B C9                                   ret
  50+ 9D0C
  51+ 9D0C              ; Clears all except slot A, used when say restarting a space station post launch
  52+ 9D0C 57           ClearFreeSlotListSaveA: ld      d,a
  53+ 9D0D 0E 00                                ld      c,0
  54+ 9D0F 21 F8 99                             ld      hl,UniverseSlotList
  55+ 9D12 06 18                                ld      b, UniverseSlotListSize * 2
  56+ 9D14 79           .fillLoop:              ld      a,c
  57+ 9D15 BA                                   cp      d
  58+ 9D16 28 03                                jr      z,.SkipSlot
  59+ 9D18 3E FF                                ld      a,$FF
  60+ 9D1A 77                                   ld      (hl),a
  61+ 9D1B 23           .SkipSlot:              inc     hl
  62+ 9D1C 23                                   inc     hl
  63+ 9D1D 10 F5                                djnz    .fillLoop
  64+ 9D1F C9                                   ret
  65+ 9D20
  66+ 9D20 21 F8 99     ClearSlotA:             ld      hl,UniverseSlotList
  67+ 9D23 ED 31                                add     hl,a
  68+ 9D25 36 FF                                ld      (hl),$FF
  69+ 9D27 3E 0C                                ld      a,UniverseSlotListSize  ; move to types
  70+ 9D29 ED 31                                add     hl,a
  71+ 9D2B 36 FF                                ld      (hl),$FF
  72+ 9D2D C9                                   ret
  73+ 9D2E              ; Space Station will always be slot 0
  74+ 9D2E
  75+ 9D2E 21 05 9A     AreShipsPresent:        ld      hl,UniverseSlotType+1
  76+ 9D31 06 0B                                ld      b,UniverseSlotListSize -1      ; ignore space station
  77+ 9D33 7E           .NextShip:              ld      a,(hl)
  78+ 9D34 FE 00                                cp      ShipTypeNormal
  79+ 9D36                                      ClearCarryFlag
  79+ 9D36 B7          >                        or a
  80+ 9D37 C8                                   ret     z
  81+ 9D38 23                                   inc     hl
  82+ 9D39 10 F8                                djnz    .NextShip
  83+ 9D3B                                      SetCarryFlag
  83+ 9D3B 37          >                        scf
  84+ 9D3C C9                                   ret
  85+ 9D3D
  86+ 9D3D 21 F8 99     IsSpaceStationPresent:  ld      hl,UniverseSlotList
  87+ 9D40                                      ClearCarryFlag
  87+ 9D40 B7          >                        or a
  88+ 9D41 7E           .SearchLoop:            ld      a,(hl)
  89+ 9D42                                      ReturnIfAEqNusng ShipTypeStation
  89+ 9D42 FE 02       >                        cp      ShipTypeStation
  89+ 9D44 C8          >                        ret     z
  90+ 9D45                                      SetCarryFlag
  90+ 9D45 37          >                        scf
  91+ 9D46 C9                                   ret
  92+ 9D47
  93+ 9D47 21 F8 99     GetTypeAtSlotA:         ld      hl,UniverseSlotList
  94+ 9D4A ED 31                                add     hl,a
  95+ 9D4C 7E                                   ld      a,(hl)
  96+ 9D4D C9                                   ret
  97+ 9D4E
  98+ 9D4E 21 F9 99     IsPlanetOrSpaceStation: ld      hl,UniverseSlotList+1
  99+ 9D51 7E                                   ld      a,(hl)
 100+ 9D52 C9                                   ret
 101+ 9D53
 102+ 9D53 21 F8 99     FindNextFreeSlotInC:    ld      hl,UniverseSlotList
 103+ 9D56 06 0C                                ld      b, UniverseSlotListSize
 104+ 9D58 0E 00                                ld      c, 0
 105+ 9D5A 7E           .SearchLoop:            ld      a,(hl)
 106+ 9D5B                                      JumpIfAEqNusng $FF, .FoundSlot
 106+ 9D5B FE FF       >                        cp     $FF
 106+ 9D5D CA 66 9D    >                        jp      z,.FoundSlot
 107+ 9D60 0C                                   inc     c
 108+ 9D61 23                                   inc     hl
 109+ 9D62 10 F6                                djnz    .SearchLoop
 110+ 9D64                                      SetCarryFlag
 110+ 9D64 37          >                        scf
 111+ 9D65 C9                                   ret
 112+ 9D66              .FoundSlot:             ClearCarryFlag
 112+ 9D66 B7          >                        or a
 113+ 9D67 C9                                   ret
 114+ 9D68
 115+ 9D68 CD 53 9D     FindNextFreeSlotInA:    call    FindNextFreeSlotInC
 116+ 9D6B 79                                   ld      a,c
 117+ 9D6C C9                                   ret
 118+ 9D6D
# file closed: ./Variables/UniverseSlotRoutines.asm
1094  9D6D
1095  9D6D                  INCLUDE "./Variables/EquipmentVariables.asm"
# file opened: ./Variables/EquipmentVariables.asm
   1+ 9D6D 00           AutoDocking				DB	0				; $033F
   2+ 9D6E 00           PlayerECM				DB	0				; $0340
   3+ 9D6F 00           Laser2					DB	0				; 0343 laser Power? Not sure
   4+ 9D70 00           LaserCount				DB	0				; 0346  LASCT  \ laser count =9 for pulse, cooled off?
   5+ 9D71 00 00 00 00  Cash					DB  0,0,0,0			; 0361 - 0364 Cash now litte endian
   6+ 9D75 19           Fuel					DB	25				; 0365  QQ14
   7+ 9D76 05 02 03 01  LaserList				DB	5,2,3,1			; View Lasers $0368 to $036B
   8+ 9D7A 46           CargoBaySize			DB	70				; 036E
   9+ 9D7B 00           CargoRunningLoad        DB  0
  10+ 9D7C 00 00 00 00  CargoTonnes             DB  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
  10+ 9D80 00 00 00 00
  10+ 9D84 00 00 00 00
  10+ 9D88 00 00 00 00
  11+ 9D8C              ;CargoTonnes		    DB	16,1,2,3,4,5,6,7,6,9,10,11,12,13,14,15			; 036F - 037F	QQ20
  12+ 9D8C              SlaveCargoTonnes		equ CargoTonnes+3
  13+ 9D8C              NarcoticsCargoTonnes	equ CargoTonnes+6
  14+ 9D8C              FirearmsCargoTonnes		equ CargoTonnes+10
  15+ 9D8C              ; For each view laser a localised copy of the stats
  16+ 9D8C              ; TODO - need to add code to maintain on load/save/equipment transactions
  17+ 9D8C 00 00 00 00  LaserType               DS  4               ; quick reference to laser type
  18+ 9D90 00 00 00 00  LaserDamagedFlag        DS  4               ; probabiliy out of 255 that it will no fire, 0 = good, 255 = will not fire
  19+ 9D94 00 00 00 00  LaserPulseCount         DS  4               ; how many pulses can be fired before long pause
  20+ 9D98 00 00 00 00  LaserPulsePause         DS  4               ; time before next pulse - 0 = beam
  21+ 9D9C 00 00 00 00  LaserPulseRest          DS  4               ; time before pulse count resets to 0
  22+ 9DA0 00 00 00 00  LaserDamageOutput       DS  4               ; amount of damage for a laser hit
  23+ 9DA4 00 00 00 00  LaserEnergyDrain        DS  4               ; amount of energy drained by cycle
  24+ 9DA8 00 00 00 00  LaserHeat               DS  4               ; amount of heat generated
  25+ 9DAC 00 00 00 00  LaserDurability         DS  4               ; probabability out of 255 that a hit on unshielded will add random amount of damage
  26+ 9DB0 00 00 00 00  LaserDurabilityAmount   DS  4               ; max amount of damagage can be sustained in one damage hit
  27+ 9DB4
  28+ 9DB4
  29+ 9DB4              QQ20                    equ CargoTonnes
  30+ 9DB4 00 00 00...  EquipmentFitted         DS  EQ_ITEM_COUNT    ; Series of flags for if each item is fitted
  31+ 9DCE              ECMPresent				EQU EquipmentFitted + EQ_ECM				; 0380
  32+ 9DCE              EnergyBomb				EQU EquipmentFitted + EQ_ENERGY_BOMB		; 0382	Also random hyperspeace in Elite A
  33+ 9DCE              ExtraEnergyUnit			EQU EquipmentFitted + EQ_ENERGY_UNIT        ; 0383
  34+ 9DCE              DockingComputer 		EQU EquipmentFitted + EQ_DOCK_COMP    		; 0384
  35+ 9DCE              GalacticHyperDrive		EQU EquipmentFitted + EQ_GAL_DRIVE   		; 0385
  36+ 9DCE              EscapePod				EQU EquipmentFitted + EQ_ESCAPE_POD  		; 0386
  37+ 9DCE 01           FuelScoopsBarrelStatus	DB	1				; 0381
  38+ 9DCF
# file closed: ./Variables/EquipmentVariables.asm
1096  9DCF
1097  9DCF                  INCLUDE "./Variables/random_number.asm"
# file opened: ./Variables/random_number.asm
   1+ 9DCF              doRandom2:									; .DORND2	\ -> &3F85 \ Restricted for explosion dust.
   2+ 9DCF              doRND2:
   3+ 9DCF A7           	and		a								; fast clear carry  leave bit0 of RAND+2 at 0.
   4+ 9DD0              doRandom:									;.DORND	\ -> &3F86 \ do random, new A, X.
   5+ 9DD0              ; "doRandom, Random Seed update, new value in A & B)"
   6+ 9DD0 3A 1D 98     doRND:                  ld		a,(RandomSeed)					; Get Seed 0
   7+ 9DD3 CB 17                                rl		a								; Rotate L including carry
   8+ 9DD5 4F                                   ld		c,a								; c =  double lo
   9+ 9DD6 21 1F 98     .AddSeed2:              ld		hl,RandomSeed2
  10+ 9DD9 8E                                   adc		a,(hl)							; RAND+2
  11+ 9DDA 32 1D 98     .SaveAtoSeed:           ld		(RandomSeed),a					; and save RAND
  12+ 9DDD 08           .SaveBtoSeed2:          ex		af,af'
  13+ 9DDE 79                                   ld		a,c
  14+ 9DDF 32 1F 98                             ld		(RandomSeed2),a
  15+ 9DE2 08                                   ex		af,af'
  16+ 9DE3 3A 1E 98                             ld		a,(RandomSeed1)
  17+ 9DE6 4F                                   ld		c,a								; C = Seed1
  18+ 9DE7 21 20 98     .AddSeed3:              ld		hl,RandomSeed3
  19+ 9DEA 8E                                   adc		a,(hl)
  20+ 9DEB 32 1E 98                             ld		(RandomSeed1),a
  21+ 9DEE 08                                   ex		af,af'
  22+ 9DEF 79                                   ld		a,c
  23+ 9DF0 32 20 98                             ld		(RandomSeed3),a
  24+ 9DF3 08                                   ex		af,af'
  25+ 9DF4 C9                                   ret
  26+ 9DF5
  27+ 9DF5              fillHeapRandom4Points:                      ; counter Y, 4 rnd bytes to edge heap
  28+ 9DF5 06 04        	ld		b,4
  29+ 9DF7 21 0E C2     	ld		hl,UbnkLineArray				; line data
  30+ 9DFA              FillRandom:                                 ; Writes random bytes hl = start address, b = nbr bytes to fill
  31+ 9DFA              EE55:
  32+ 9DFA CD D0 9D     	call	doRND							; get random
  33+ 9DFD 77           	ld		(hl),a							; (XX19),Y
  34+ 9DFE 23           	inc		hl
  35+ 9DFF 10 F9        	djnz	FillRandom						; 3to6 = random bytes for seed
  36+ 9E01 C9               ret
  37+ 9E02
# file closed: ./Variables/random_number.asm
1098  9E02                  INCLUDE "./Variables/galaxy_seed.asm"
# file opened: ./Variables/galaxy_seed.asm
   1+ 9E02 47 41 4C 41  GALAXYSEED DB "GALAXYSEED"
   1+ 9E06 58 59 53 45
   1+ 9E0A 45 44
   2+ 9E0C 21 29 9A     copy_galaxy_to_system:  ld		hl,GalaxySeeds
   3+ 9E0F 11 13 99                             ld		de,SystemSeed
   4+ 9E12 ED A0        copy_seed:		        ldi
   5+ 9E14 ED A0                                ldi
   6+ 9E16 ED A0                                ldi
   7+ 9E18 ED A0                                ldi
   8+ 9E1A ED A0                                ldi
   9+ 9E1C ED A0                                ldi
  10+ 9E1E C9                                   ret
  11+ 9E1F
  12+ 9E1F 21 13 99     copy_system_to_galaxy:  ld		hl,SystemSeed
  13+ 9E22 11 29 9A                             ld		de,GalaxySeeds
  14+ 9E25 18 EB                                jr		copy_seed
  15+ 9E27
  16+ 9E27 21 29 9A     copy_galaxy_to_working: ld		hl,GalaxySeeds
  17+ 9E2A 11 1D 9A                             ld		de,WorkingSeeds
  18+ 9E2D 18 E3                                jr		copy_seed
  19+ 9E2F
  20+ 9E2F 21 1D 9A     copy_working_to_galaxy: ld		hl,WorkingSeeds
  21+ 9E32 11 29 9A                             ld		de,GalaxySeeds
  22+ 9E35 18 DB                                jr		copy_seed
  23+ 9E37
  24+ 9E37 21 1D 9A     copy_working_to_system: ld		hl,WorkingSeeds
  25+ 9E3A 11 13 99                             ld		de,SystemSeed
  26+ 9E3D 18 D3                                jr		copy_seed
  27+ 9E3F
  28+ 9E3F 21 13 99     copy_system_to_working: ld		hl,SystemSeed
  29+ 9E42 11 1D 9A                             ld		de,WorkingSeeds
  30+ 9E45 18 CB                                jr		copy_seed
  31+ 9E47
  32+ 9E47              next_system_seed:							;.TT20	\ -> &2B0E  \ TWIST on QQ15 to next system
  33+ 9E47 CD 4A 9E     		call	.NextStep					; This logic means we hard code x4
  34+ 9E4A              .NextStep:
  35+ 9E4A CD 4D 9E     		call	process_seed				; This logic means we hard code x2
  36+ 9E4D              process_seed:								; TT54	\ -> &2637 \ Twist seed for next digram in QQ15
  37+ 9E4D 3A 13 99     		ld		a,(SystemSeed)				; QQ15
  38+ 9E50 B7           		or		a							; clear carry flag
  39+ 9E51 21 15 99     		ld		hl,SystemSeed+2				; hl -> qq+2
  40+ 9E54 86           		add		a,(hl)						; a= QQ15 + QQ152
  41+ 9E55 47           		ld		b,a							; partial sum lo
  42+ 9E56 3A 14 99     		ld		a,(SystemSeed+1)
  43+ 9E59 21 16 99     		ld		hl,SystemSeed+3				; HL -> QQ+3 )we don't inc as it affects carry)
  44+ 9E5C 8E           		adc		a,(hl)						; note add with carry
  45+ 9E5D 4F           		ld		c,a  						; c = QQ1+QQ3+carry bit parial sum hi
  46+ 9E5E 3A 15 99     		ld		a,(SystemSeed+2)
  47+ 9E61 32 13 99     		ld		(SystemSeed+0),a			; copy qq152 to qq150
  48+ 9E64 3A 16 99     		ld		a,(SystemSeed+3)
  49+ 9E67 32 14 99     		ld		(SystemSeed+1),a			; copy qq153 to qq151
  50+ 9E6A 3A 18 99     		ld		a,(SystemSeed+5)
  51+ 9E6D 32 16 99     		ld		(SystemSeed+3),a			; copy qq155 to qq153
  52+ 9E70 3A 17 99     		ld		a,(SystemSeed+4)
  53+ 9E73 32 15 99     		ld		(SystemSeed+2),a			; copy qq154 to qq152
  54+ 9E76 B7           		or		a
  55+ 9E77 78           		ld		a,b
  56+ 9E78 21 15 99     		ld		hl,SystemSeed+2				; hl -> qq+2
  57+ 9E7B 86           		add	    a,(hl)
  58+ 9E7C 32 17 99     		ld		(SystemSeed+4),a
  59+ 9E7F 79           		ld		a,c
  60+ 9E80 21 16 99     		ld		hl,SystemSeed+3				; HL -> QQ+3 )we don't inc as it affects carry)
  61+ 9E83 8E           		adc		a,(hl)
  62+ 9E84 32 18 99     		ld		(SystemSeed+5),a
  63+ 9E87 C9           		ret
  64+ 9E88
  65+ 9E88              next_working_seed:							;.TT20	\ -> &2B0E  \ TWIST on QQ15 to next system
  66+ 9E88 CD 8B 9E     		call	.NextStep					; This logic means we hard code x4
  67+ 9E8B              .NextStep:
  68+ 9E8B CD 8E 9E     		call	working_seed				; This logic means we hard code x2
  69+ 9E8E              working_seed:								; TT54	\ -> &2637 \ Twist seed for next digram in QQ15
  70+ 9E8E              ; x = a + c
  71+ 9E8E 3A 1D 9A     		ld		a,(WorkingSeeds)			; QQ15
  72+ 9E91 B7           		or		a							; clear carry flag
  73+ 9E92 21 1F 9A     		ld		hl,WorkingSeeds+2			; hl -> qq+2 [c]
  74+ 9E95 86           		add		a,(hl)						; a= QQ15 [a]+ QQ15 [c]
  75+ 9E96 47           		ld		b,a							; partial sum lo [x]
  76+ 9E97              ; y = b + d	+ carry
  77+ 9E97 3A 1E 9A     		ld		a,(WorkingSeeds+1)          ; [b]
  78+ 9E9A 21 20 9A     		ld		hl,WorkingSeeds+3			; HL -> QQ+3 [d] we don't inc as it affects carry)
  79+ 9E9D 8E           		adc		a,(hl)						; note add with carry
  80+ 9E9E 4F           		ld		c,a  						; c = QQ1+QQ3+carry bit parial sum hi
  81+ 9E9F 3A 1F 9A     		ld		a,(WorkingSeeds+2)
  82+ 9EA2 32 1D 9A     		ld		(WorkingSeeds+0),a			; copy qq152 to qq150 [a] = [c]
  83+ 9EA5 3A 20 9A     		ld		a,(WorkingSeeds+3)
  84+ 9EA8 32 1E 9A     		ld		(WorkingSeeds+1),a			; copy qq153 to qq151 [b] = [d]
  85+ 9EAB 3A 22 9A     		ld		a,(WorkingSeeds+5)
  86+ 9EAE 32 20 9A     		ld		(WorkingSeeds+3),a			; copy qq155 to qq153 [d] = [f]
  87+ 9EB1 3A 21 9A     		ld		a,(WorkingSeeds+4)
  88+ 9EB4 32 1F 9A     		ld		(WorkingSeeds+2),a			; copy qq154 to qq152 [c] = [e]
  89+ 9EB7 B7           		or		a
  90+ 9EB8 78           		ld		a,b
  91+ 9EB9 21 1F 9A     		ld		hl,WorkingSeeds+2		    ; hl -> qq+2
  92+ 9EBC 86           		add	    a,(hl)
  93+ 9EBD 32 21 9A     		ld		(WorkingSeeds+4),a			; e = x + [c]
  94+ 9EC0 79           		ld		a,c
  95+ 9EC1 21 20 9A     		ld		hl,WorkingSeeds+3			; HL -> QQ+3 )we don't inc as it affects carry)
  96+ 9EC4 8E           		adc		a,(hl)
  97+ 9EC5 32 22 9A     		ld		(WorkingSeeds+5),a			; f = y + [d] + carry
  98+ 9EC8 C9           		ret
  99+ 9EC9
 100+ 9EC9 32           working_distX	DB 50
 101+ 9ECA 32           working_distY	DB 50
 102+ 9ECB 00           current_distY	DB 0
 103+ 9ECC
 104+ 9ECC AF           find_present_system:    xor		a
 105+ 9ECD 32 2C 99                             ld		(XSAV),a
 106+ 9ED0 3A 14 99     .CounterLoop:           ld		a,(SystemSeed+1)				; QQ15+1 \ seed Ycoord of star
 107+ 9ED3 4F                                   ld		c,a
 108+ 9ED4 3A 30 9A     .calcLocaldy:           ld		a,(PresentSystemY)
 109+ 9ED7 47                                   ld		b,a								; so b holds Y ccord
 110+ 9ED8 79                                   ld		a,c
 111+ 9ED9 90                                   sub		b
 112+ 9EDA CB 7F                                bit		7,a
 113+ 9EDC 28 02                                jr		z,.positivedy
 114+ 9EDE ED 44        .negativedy:            neg
 115+ 9EE0 32 CB 9E     .positivedy:            ld		(current_distY),a				; save cuirrent_dist Y as we need it maybe
 116+ 9EE3 ED 5B C9 9E                          ld		de,(working_distX)
 117+ 9EE7 BA                                   cp		d
 118+ 9EE8 30 24                                jr		nc,.toofar
 119+ 9EEA 3A 16 99     .calcLocaldx:           ld		a,(SystemSeed+3)				; QQ15+3 \ seed Xcoord of star
 120+ 9EED 4F                                   ld		c,a
 121+ 9EEE 3A 2F 9A                             ld		a,(PresentSystemX)
 122+ 9EF1 47                                   ld		b,a								; so b holds Y ccord
 123+ 9EF2 79                                   ld		a,c
 124+ 9EF3 90                                   sub		b
 125+ 9EF4 CB 7F                                bit		7,a
 126+ 9EF6 28 02                                jr		z,.positivedx
 127+ 9EF8 ED 44        .negativedx:            neg
 128+ 9EFA 4F           .positivedx:            ld		c,a
 129+ 9EFB BB                                   cp		e
 130+ 9EFC 30 10                                jr		nc,.toofar
 131+ 9EFE 3A CB 9E     .Nearer:			    ld		a,(current_distY) 				; we have a closer system
 132+ 9F01 47                                   ld		b,a								; we have c to recall Y into b
 133+ 9F02 ED 43 C9 9E                          ld		(working_distX),bc
 134+ 9F06 C5                                   push	bc
 135+ 9F07 CD 3F 9E                             call 	copy_system_to_working
 136+ 9F0A C1                                   pop		bc
 137+ 9F0B 78                                   ld		a,b								;
 138+ 9F0C B1                                   or		c								;
 139+ 9F0D C8                                   ret		z								; if we have distance 0 then bang on
 140+ 9F0E CD 47 9E     .toofar:                call	next_system_seed
 141+ 9F11 3A 2C 99                             ld		a,(XSAV)
 142+ 9F14 3D                                   dec		a
 143+ 9F15 FE 00                                cp		0
 144+ 9F17 C8                                   ret		z
 145+ 9F18 32 2C 99                             ld		(XSAV),a
 146+ 9F1B 18 B3                                jr		.CounterLoop
 147+ 9F1D
 148+ 9F1D              get_planet_data_working_seed:
 149+ 9F1D 3A 1E 9A     		ld		a, (WorkingSeeds+1)
 150+ 9F20 E6 07        		and		7
 151+ 9F22 32 B1 99     		ld		(DisplayEcononmy),a
 152+ 9F25 3A 1F 9A     		ld		a, (WorkingSeeds+2)
 153+ 9F28 CB 3F        		srl	a
 154+ 9F2A CB 3F        		srl	a
 155+ 9F2C CB 3F        		srl	a
 156+ 9F2E CB 3F        		srl	a								; c/8
 157+ 9F30 E6 07        		and		7
 158+ 9F32 32 B2 99     		ld		(DisplayGovernment),a
 159+ 9F35 CB 3F        		srl	a
 160+ 9F37 FE 00        		cp		0
 161+ 9F39 20 08        		jr		nz,.CanBeRich
 162+ 9F3B              .Fedual:
 163+ 9F3B 3A B1 99     		ld		a,(DisplayEcononmy)
 164+ 9F3E F6 02        		or		2							; Adjust Eco for Anarchy and Feudal, set bit 1.
 165+ 9F40 32 B1 99     		ld		(DisplayEcononmy),a
 166+ 9F43              .CanBeRich:
 167+ 9F43 3A B1 99     		ld		a,(DisplayEcononmy)
 168+ 9F46 EE 07        		xor		7							; flip economy so Rich is now 7
 169+ 9F48 32 B3 99     		ld		(DisplayTekLevel),a			; Flipped Eco, EcoEOR7, Rich Ind = 7
 170+ 9F4B 47           		ld		b,a
 171+ 9F4C 3A 20 9A     		ld		a,(WorkingSeeds+3)
 172+ 9F4F E6 03        		and		3
 173+ 9F51 80           		add		a,b
 174+ 9F52 32 B3 99     		ld		(DisplayTekLevel),a			; Tek Level += seed d & 3
 175+ 9F55 3A B2 99     		ld		a,(DisplayGovernment)		; Government, 0 is Anarchy
 176+ 9F58 CB 3F        		srl		a 							; gov/2
 177+ 9F5A 47           		ld		b,a
 178+ 9F5B 3A B3 99     		ld		a,(DisplayTekLevel)
 179+ 9F5E 80           		add		a,b
 180+ 9F5F 32 B3 99     		ld		(DisplayTekLevel),a			; Tek += gov /2
 181+ 9F62 CB 27        		sla		a
 182+ 9F64 CB 27        		sla		a							; Onto Population (TL-1)*= 4
 183+ 9F66 47           		ld		b,a
 184+ 9F67 3A B1 99     		ld		a,(DisplayEcononmy)
 185+ 9F6A 80           		add		a,b                  		; TechLevel*4 + Eco   7-56
 186+ 9F6B 47           		ld		b,a
 187+ 9F6C 3A B2 99     		ld		a,(DisplayGovernment)
 188+ 9F6F 3C           		inc		a  							; +Government, 0 is Anarchy + 1
 189+ 9F70 32 B4 99     		ld		(DisplayPopulation),a
 190+ 9F73 3A B1 99     		ld		a,(DisplayEcononmy)
 191+ 9F76 EE 07        		xor		7							; Onto productivity
 192+ 9F78 C6 03        		add		3							;  (Flipped eco +3)
 193+ 9F7A 57           		ld		d,a
 194+ 9F7B 3A B2 99     		ld		a,(DisplayGovernment)		; Government, 0 is Anarchy
 195+ 9F7E C6 04        		add		4
 196+ 9F80 5F           		ld		e,a
 197+ 9F81 ED 30        		mul									; ; DE = d*e, Productivity part 1. has hsb in A, lsb in P.
 198+ 9F83 3A B4 99     		ld		a,(DisplayPopulation)		; then we use d for radius
 199+ 9F86 57           		ld		d,a
 200+ 9F87 ED 30        		mul
 201+ 9F89 CB 23        		sla		e
 202+ 9F8B CB 1A        		rr		d
 203+ 9F8D CB 23        		sla		e
 204+ 9F8F CB 1A        		rr		d
 205+ 9F91 CB 23        		sla		e
 206+ 9F93 CB 1A        		rr		d							; de * 8
 207+ 9F95 ED 53 B6 99  		ld		(DisplayProductivity),de
 208+ 9F99              .DoRadius:
 209+ 9F99 3A 20 9A     		ld		a,(WorkingSeeds+3)
 210+ 9F9C 4F           		ld		c,a
 211+ 9F9D 3A 22 9A     		ld		a,(WorkingSeeds+5)
 212+ 9FA0 E6 0F        		and		$0F							;  lower 4 bits of w2_h determine planet radius
 213+ 9FA2 C6 0B        		add		11							;  radius min = 256*11 = 2816 km
 214+ 9FA4 47           		ld		b,a							;
 215+ 9FA5 ED 43 BA 99  		ld		(DisplayRadius),bc
 216+ 9FA9 C9           		ret
 217+ 9FAA
# file closed: ./Variables/galaxy_seed.asm
1099  9FAA                  INCLUDE "./Tables/text_tables.asm"
# file opened: ./Tables/text_tables.asm
   1+ 9FAA 50 75 6C 73  StatusLaserName1	DB	"Pulse",0
   1+ 9FAE 65 00
   2+ 9FB0 42 65 61 6D  StatusLaserName2	DB	"Beam",0
   2+ 9FB4 00
   3+ 9FB5 4D 69 6C 69  StatusLaserName3    DB  "Military",0
   3+ 9FB9 74 61 72 79
   3+ 9FBD 00
   4+ 9FBE 4D 69 6E 69  StatusLaserName4    DB  "Mining",0
   4+ 9FC2 6E 67 00
   5+ 9FC5 43 75 73 74  StatusLaserName5    DB  "Custom",0
   5+ 9FC9 6F 6D 00
   6+ 9FCC
   7+ 9FCC AA 9F B0 9F  StatusLaserNameIdx	DW	StatusLaserName1,StatusLaserName2,StatusLaserName3,StatusLaserName4,StatusLaserName5
   7+ 9FD0 B5 9F BE 9F
   7+ 9FD4 C5 9F
   8+ 9FD6              StatusLaserNameIdxLen EQU $ - StatusLaserNameIdx
   9+ 9FD6
  10+ 9FD6 44 6F 63 6B  ConditionName1		DB "Docked",0
  10+ 9FDA 65 64 00
  11+ 9FDD 47 72 65 65  ConditionName2		DB "Green",0
  11+ 9FE1 6E 00
  12+ 9FE3 59 65 6C 6C  ConditionName3		DB "Yellow",0
  12+ 9FE7 6F 77 00
  13+ 9FEA 52 65 64 00  ConditionName4		DB "Red",0
  14+ 9FEE
  15+ 9FEE D6 9F DD 9F  ConditionNameIdx	DW ConditionName1,ConditionName2,ConditionName3,ConditionName4
  15+ 9FF2 E3 9F EA 9F
  16+ 9FF6              ConditionNameIdxLen EQU $ - ConditionNameIdx
  17+ 9FF6
  18+ 9FF6 41 42 4F 55  StatusDiagrams		DB "ABOUSEITILETSTONLONUTHNOALLEXEGEZACEBISOUSESARMAINDIREA?ERATENBERALAVETIEDORQUANTEISRION",0
  18+ 9FFA 53 45 49 54
  18+ 9FFE 49 4C 45 54
  18+ A002 53 54 4F 4E
  18+ A006 4C 4F 4E 55
  18+ A00A 54 48 4E 4F
  18+ A00E 41 4C 4C 45
  18+ A012 58 45 47 45
  18+ A016 5A 41 43 45
  18+ A01A 42 49 53 4F
  18+ A01E 55 53 45 53
  18+ A022 41 52 4D 41
  18+ A026 49 4E 44 49
  18+ A02A 52 45 41 3F
  18+ A02E 45 52 41 54
  18+ A032 45 4E 42 45
  18+ A036 52 41 4C 41
  18+ A03A 56 45 54 49
  18+ A03E 45 44 4F 52
  18+ A042 51 55 41 4E
  18+ A046 54 45 49 53
  18+ A04A 52 49 4F 4E
  18+ A04E 00
  19+ A04F
  20+ A04F 00 00 08 00  RankingTable		DW	$0000,$0008,$0010,$0020,$0040,$0080,$0200,$0A00,$1900,$4900,$FFFF
  20+ A053 10 00 20 00
  20+ A057 40 00 80 00
  20+ A05B 00 02 00 0A
  20+ A05F 00 19 00 49
  20+ A063 FF FF
  21+ A065
  22+ A065 48 61 72 6D  RankingName1		DB 	"Harmless",0
  22+ A069 6C 65 73 73
  22+ A06D 00
  23+ A06E 4D 6F 73 74  RankingName2		DB 	"Mostly Harmless",0
  23+ A072 6C 79 20 48
  23+ A076 61 72 6D 6C
  23+ A07A 65 73 73 00
  24+ A07E 50 6F 6F 72  RankingName3		DB 	"Poor",0
  24+ A082 00
  25+ A083 41 76 65 72  RankingName4		DB 	"Average",0
  25+ A087 61 67 65 00
  26+ A08B 41 62 6F 76  RankingName5		DB 	"Above Average",0
  26+ A08F 65 20 41 76
  26+ A093 65 72 61 67
  26+ A097 65 00
  27+ A099 43 6F 6D 70  RankingName6		DB 	"Competent",0
  27+ A09D 65 74 65 6E
  27+ A0A1 74 00
  28+ A0A3 44 61 6E 67  RankingName7		DB 	"Dangerous",0
  28+ A0A7 65 72 6F 75
  28+ A0AB 73 00
  29+ A0AD 44 65 61 64  RankingName8		DB 	"Deadly",0
  29+ A0B1 6C 79 00
  30+ A0B4 2D 2D 2D 2D  RankingName9		DB 	"---- E L I T E ---",0
  30+ A0B8 20 45 20 4C
  30+ A0BC 20 49 20 54
  30+ A0C0 20 45 20 2D
  30+ A0C4 2D 2D 00
  31+ A0C7 53 6B 6F 6C  RankingName10		DB 	"Skollobsgod",0
  31+ A0CB 6C 6F 62 73
  31+ A0CF 67 6F 64 00
  32+ A0D3 4E 75 74 74  RankingName11		DB 	"Nutter",0
  32+ A0D7 65 72 00
  33+ A0DA
  34+ A0DA 65 A0 6E A0  RankingNameIdx		dw RankingName1,RankingName2,RankingName3,RankingName4,RankingName5,RankingName6,RankingName7,RankingName8,RankingName9,RankingName10,RankingName11
  34+ A0DE 7E A0 83 A0
  34+ A0E2 8B A0 99 A0
  34+ A0E6 A3 A0 AD A0
  34+ A0EA B4 A0 C7 A0
  34+ A0EE D3 A0
  35+ A0F0              RankingNameIdxLen EQU $ - RankingNameIdx
  36+ A0F0
  37+ A0F0
  38+ A0F0              getTableText:
  39+ A0F0              ; ">getTableText, hl = indexlist, a = textnbr, returns with hl = porinter to head of text"
  40+ A0F0              ; ">Note for ranking first 2 bytes are target rank"
  41+ A0F0 D5           	push	de								; save DE as we will likley need it in caller
  42+ A0F1 ED 31        	add		hl,a							; 0 based ref, and its 2 bytes
  43+ A0F3 ED 31        	add		hl,a
  44+ A0F5 5E           	ld		e,(hl)
  45+ A0F6 23           	inc		hl
  46+ A0F7 56           	ld		d,(hl)							; de = indexed address
  47+ A0F8 EB           	ex		de,hl							; flip it to hl
  48+ A0F9 D1           	pop		de								; retrieve de
  49+ A0FA C9           	ret										; return with hl as start entry
  50+ A0FB
  51+ A0FB
  52+ A0FB              ;               CF      ZF      Result
  53+ A0FB              ;               -----------------------------------
  54+ A0FB              ;               0       0       HL > DE
  55+ A0FB              ;               0       1       HL == DE
  56+ A0FB              ;               1       0       HL < DE
  57+ A0FB              ;               1       1       Impossible
  58+ A0FB              getRankIndex:
  59+ A0FB              ; ">getRank, de = kill count, returns a = index,hl destroyed"
  60+ A0FB              ; ">Note for ranking first 2 bytes are target rank"
  61+ A0FB 7A           	ld		a,d
  62+ A0FC B3           	or		e
  63+ A0FD FE 00        	cp		0
  64+ A0FF C8           	ret		z								; quicks skip for 0 kills
  65+ A100 AF           	xor 	a
  66+ A101 21 4F A0     	ld		hl,RankingTable
  67+ A104              .testLoop:
  68+ A104 4E           	ld		c,(hl)
  69+ A105 23           	inc		hl
  70+ A106 46           	ld		b,(hl)							; bc = ranking
  71+ A107 E5           	push	hl
  72+ A108 60           	ld		h,b
  73+ A109 69           	ld		l,c
  74+ A10A CD 35 AD     	call	compare16HLDE
  75+ A10D 38 06        	jr		c,.HLLTDE
  76+ A10F              .HLGTEDE									; Found the correct rank
  77+ A10F E1           	pop		hl
  78+ A110 23           	inc		hl								; move to next value
  79+ A111 23           	inc		hl
  80+ A112 3C           	inc		a								; we canloop forever as if kills was $FFFF then hits nutter rank but also +1 = 0000 as its 16 bit
  81+ A113 18 EF        	jr		.testLoop
  82+ A115              .HLLTDE:									; HL < Kills so found correct rank
  83+ A115 E1           	pop		hl
  84+ A116 C9           	ret
  85+ A117
# file closed: ./Tables/text_tables.asm
1100  A117                  INCLUDE "./Tables/dictionary.asm"
# file opened: ./Tables/dictionary.asm
   1+ A117 58 00        WordDummy					DB  "X",0
   2+ A119 46 72 6F 6E  WordFront					DB	"Front",0              ;1
   2+ A11D 74 00
   3+ A11F 52 69 67 68  WordRight					DB	"Right",0              ;2
   3+ A123 74 00
   4+ A125 4C 65 66 74  WordLeft 					DB	"Left",0               ;3
   4+ A129 00
   5+ A12A 52 65 61 72  WordRear   	 				DB	"Rear",0               ;4
   5+ A12E 00
   6+ A12F 4C 61 72 67  WordLarge           		DB  "Large",0              ;5
   6+ A133 65 00
   7+ A135 45 73 63 61  WordEscape          		DB  "Escape",0             ;6
   7+ A139 70 65 00
   8+ A13C 50 6F 64 00  WordPod             		DB  "Pod",0                ;7
   9+ A140 43 61 72 67  WordCargo           		DB  "Cargo",0              ;8
   9+ A144 6F 00
  10+ A146 42 61 79 00  WordBay             		DB  "Bay",0                ;9
  11+ A14A 46 75 65 6C  WordFuel            		DB  "Fuel",0               ;10
  11+ A14E 00
  12+ A14F 53 63 6F 6F  WordScoops          		DB  "Scoops",0             ;11
  12+ A153 70 73 00
  13+ A156 45 2E 43 2E  WordECM             		DB  "E.C.M.",0             ;12
  13+ A15A 4D 2E 00
  14+ A15D 53 79 73 74  WordSystem          		DB  "System",0             ;13
  14+ A161 65 6D 00
  15+ A164 45 6E 65 72  WordEnergy					DB  "Energy",0             ;14
  15+ A168 67 79 00
  16+ A16B 42 6F 6D 62  WordBomb					DB  "Bomb",0               ;15
  16+ A16F 00
  17+ A170 4C 61 73 65  WordLaser					DB  "Laser",0              ;16
  17+ A174 72 00
  18+ A176 50 75 6C 73  WordPulse           		DB  "Pulse",0              ;17
  18+ A17A 65 00
  19+ A17C 42 65 61 6D  WordBeam            		DB  "Beam",0               ;18
  19+ A180 00
  20+ A181 4D 69 6C 69  WordMiliary         		DB  "Miliary",0            ;19
  20+ A185 61 72 79 00
  21+ A189 4D 69 6E 69  WordMining          		DB  "Mining",0             ;20
  21+ A18D 6E 67 00
  22+ A190 43 75 73 74  WordCustom          		DB  "Custom",0             ;21
  22+ A194 6F 6D 00
  23+ A197 55 6E 69 74  WordUnit            		DB  "Unit",0               ;22
  23+ A19B 00
  24+ A19C 53 68 69 65  WordShield          		DB  "Shield",0             ;23
  24+ A1A0 6C 64 00
  25+ A1A3 44 6F 63 6B  WordDocking         		DB  "Docking",0            ;24
  25+ A1A7 69 6E 67 00
  26+ A1AB 43 6F 6D 70  WordComputers       		DB  "Computers",0          ;25
  26+ A1AF 75 74 65 72
  26+ A1B3 73 00
  27+ A1B5 48 79 70 65  WordHyperspace      		DB  "Hyperspace",0         ;26
  27+ A1B9 72 73 70 61
  27+ A1BD 63 65 00
  28+ A1C0 47 61 6C 61  WordGalactic        		DB  "Galactic",0           ;27
  28+ A1C4 63 74 69 63
  28+ A1C8 00
  29+ A1C9 45 78 74 72  WordExtra           		DB  "Extra",0              ;28
  29+ A1CD 61 00
  30+ A1CF 43 6C 65 61  WordClean           		DB  "Clean",0              ;29
  30+ A1D3 6E 00
  31+ A1D5 4F 66 66 65  WordOffender        		DB  "Offender",0           ;30
  31+ A1D9 6E 64 65 72
  31+ A1DD 00
  32+ A1DE 46 75 67 69  WordFugitive        		DB  "Fugitive",0           ;31
  32+ A1E2 74 69 76 65
  32+ A1E6 00
  33+ A1E7 46 6F 6F 64  WordFood					DB	"Food",0               ;32
  33+ A1EB 00
  34+ A1EC 54 65 78 74  WordTextiles				DB 	"Textiles",0           ;33
  34+ A1F0 69 6C 65 73
  34+ A1F4 00
  35+ A1F5 52 61 64 69  WordRadioactives			DB  "Radioactives",0       ;34
  35+ A1F9 6F 61 63 74
  35+ A1FD 69 76 65 73
  35+ A201 00
  36+ A202 53 6C 61 76  WordSlaves					DB  "Slaves",0             ;35
  36+ A206 65 73 00
  37+ A209 4C 69 71 75  WordLiquorWines     		DB  "Liquor/Wines",0       ;36
  37+ A20D 6F 72 2F 57
  37+ A211 69 6E 65 73
  37+ A215 00
  38+ A216 4C 75 78 75  WordLuxuries  	    		DB  "Luxuries",0	       ;37
  38+ A21A 72 69 65 73
  38+ A21E 00
  39+ A21F 4E 61 72 63  WordNarcotics  	    		DB  "Narcotics",0	       ;38
  39+ A223 6F 74 69 63
  39+ A227 73 00
  40+ A229 4D 61 63 68  WordMachinery  	    		DB  "Machinery",0	       ;39
  40+ A22D 69 6E 65 72
  40+ A231 79 00
  41+ A233 41 6C 6C 6F  WordAlloys  				DB  "Alloys",0		       ;40
  41+ A237 79 73 00
  42+ A23A 46 69 72 65  WordFirearms  	    		DB  "Firearms",0	       ;41
  42+ A23E 61 72 6D 73
  42+ A242 00
  43+ A243 46 75 72 73  WordFurs  		    		DB  "Furs",0	           ;42
  43+ A247 00
  44+ A248 4D 69 6E 65  WordMinerals  	    		DB  "Minerals",0           ;43
  44+ A24C 72 61 6C 73
  44+ A250 00
  45+ A251 47 6F 6C 64  WordGold  		    		DB  "Gold",0	           ;44
  45+ A255 00
  46+ A256 50 6C 61 74  WordPlatinum  	    		DB  "Platinum",0           ;45
  46+ A25A 69 6E 75 6D
  46+ A25E 00
  47+ A25F 47 65 6D 2D  WordGemStones  				DB  "Gem-Stones",0         ;46
  47+ A263 53 74 6F 6E
  47+ A267 65 73 00
  48+ A26A 41 6C 69 65  WordAlienItems      		DB  "Alien Items",0        ;47
  48+ A26E 6E 20 49 74
  48+ A272 65 6D 73 00
  49+ A276 54 6F 6E 6E  WordTonnes          		DB  "Tonnes",0             ;48
  49+ A27A 65 73 00
  50+ A27D 4B 69 6C 6F  WordKilograms       		DB  "Kilograms",0          ;49
  50+ A281 67 72 61 6D
  50+ A285 73 00
  51+ A287 47 72 61 6D  WordGrams           		DB  "Grams",0			   ;50
  51+ A28B 73 00
  52+ A28D 53 68 6F 72  WordShort           		DB  "Short",0			   ;51
  52+ A291 74 00
  53+ A293 52 61 6E 67  WordRange           		DB  "Range",0			   ;52
  53+ A297 65 00
  54+ A299 43 68 61 72  WordChart	        		DB  "Chart",0			   ;53
  54+ A29D 74 00
  55+ A29F 44 61 74 61  WordData					DB	"Data",0			   ;54
  55+ A2A3 00
  56+ A2A4 4F 6E 00     WordOn						DB  "On",0                 ;55
  57+ A2A7 44 69 73 74  WordDistance        		DB  "Distance",0           ;56
  57+ A2AB 61 6E 63 65
  57+ A2AF 00
  58+ A2B0 45 63 6F 6E  WordEconomy         		DB  "Economy",0            ;57
  58+ A2B4 6F 6D 79 00
  59+ A2B8 47 6F 76 65  WordGovernment      		DB  "Government",0         ;58
  59+ A2BC 72 6E 6D 65
  59+ A2C0 6E 74 00
  60+ A2C3 54 65 63 68  WordTechLevel       		DB  "TechLevel",0          ;59
  60+ A2C7 4C 65 76 65
  60+ A2CB 6C 00
  61+ A2CD 50 6F 70 75  WordPopulation      		DB  "Population",0         ;60
  61+ A2D1 6C 61 74 69
  61+ A2D5 6F 6E 00
  62+ A2D8 4D 69 6C 6C  WordMillion         		DB  "Million",0            ;61
  62+ A2DC 69 6F 6E 00
  63+ A2E0 42 69 6C 6C  WordBillion         		DB  "Billion",0            ;62
  63+ A2E4 69 6F 6E 00
  64+ A2E8 47 72 6F 73  WordGross           		DB  "Gross",0              ;63
  64+ A2EC 73 00
  65+ A2EE 50 72 6F 64  WordProductivity    		DB  "Productivity",0       ;64
  65+ A2F2 75 63 74 69
  65+ A2F6 76 69 74 79
  65+ A2FA 00
  66+ A2FB 41 76 65 72  WordAverage         		DB  "Average",0            ;65
  66+ A2FF 61 67 65 00
  67+ A303 52 61 64 69  WordRadius          		DB  "Radius",0             ;66
  67+ A307 75 73 00
  68+ A30A 4B 4D 00     WordKM              		DB  "KM",0                 ;67
  69+ A30D 4D 20 43 52  WordMCR             		DB  "M CR",0               ;68
  69+ A311 00
  70+ A312 52 69 63 68  WordRich					DB  "Rich",0               ;69
  70+ A316 00
  71+ A317 41 76 67 00  WordAvg         			DB  "Avg",0            	   ;70
  72+ A31B 4D 61 69 6E  WordMainly          		DB  "Mainly",0             ;71
  72+ A31F 6C 79 00
  73+ A322 50 6F 6F 72  WordPoor            		DB  "Poor",0               ;72
  73+ A326 00
  74+ A327 49 6E 64 75  WordIndustrial      		DB  "Industrial",0         ;73
  74+ A32B 73 74 72 69
  74+ A32F 61 6C 00
  75+ A332 41 67 72 69  WordAgricultural    		DB  "Agricultural",0       ;74
  75+ A336 63 75 6C 74
  75+ A33A 75 72 61 6C
  75+ A33E 00
  76+ A33F 41 6E 61 72  WordAnarchy                 DB  "Anarchy",0            ;75
  76+ A343 63 68 79 00
  77+ A347 46 65 75 64  WordFeudal                  DB  "Feudal",0             ;76
  77+ A34B 61 6C 00
  78+ A34E 4D 75 6C 74  WordMultiGovernment         DB  "Multi-Government",0   ;77
  78+ A352 69 2D 47 6F
  78+ A356 76 65 72 6E
  78+ A35A 6D 65 6E 74
  78+ A35E 00
  79+ A35F 44 69 63 74  WordDictatorship            DB  "Dictatorship",0       ;78
  79+ A363 61 74 6F 72
  79+ A367 73 68 69 70
  79+ A36B 00
  80+ A36C 43 6F 6D 6D  WordCommunist               DB  "Communist",0          ;79
  80+ A370 75 6E 69 73
  80+ A374 74 00
  81+ A376 43 6F 6E 66  WordConfederacy             DB  "Confederacy",0        ;80
  81+ A37A 65 64 65 72
  81+ A37E 61 63 79 00
  82+ A382 44 65 6D 6F  WordDemocracy               DB  "Democracy",0          ;81
  82+ A386 63 72 61 63
  82+ A38A 79 00
  83+ A38C 43 6F 72 70  WordCorporate               DB  "Corporate State",0    ;82
  83+ A390 6F 72 61 74
  83+ A394 65 20 53 74
  83+ A398 61 74 65 00
  84+ A39C 53 74 61 74  WordState 					DB  "State",0              ;83
  84+ A3A0 65 00
  85+ A3A2 4C 69 67 68  WordLight 					DB  "Light",0              ;84
  85+ A3A6 74 00
  86+ A3A8 59 65 61 72  WordYears 					DB  "Years",0              ;85
  86+ A3AC 73 00
  87+ A3AE 30 00        Word0						DB  "0",0				   ;86
  88+ A3B0 4D 61 72 6B  WordMarket					DB  "Market",0			   ;87
  88+ A3B4 65 74 00
  89+ A3B7 50 72 69 63  WordPrices					DB  "Prices",0			   ;88
  89+ A3BB 65 73 00
  90+ A3BE 50 72 6F 64  WordProduct    				DB  "Product",0  		   ;89
  90+ A3C2 75 63 74 00
  91+ A3C6 55 6F 4D 00  WordUoM						DB  "UoM",0                ;90
  92+ A3CA 50 72 69 63  WordPrice					DB  "Price",0              ;91
  92+ A3CE 65 00
  93+ A3D0 46 6F 72 00  WordFor                     DB  "For",0                ;92
  94+ A3D4 53 61 6C 65  WordSale                    DB  "Sale",0               ;93
  94+ A3D8 00
  95+ A3D9 74 00        Wordt						DB  "t",0                  ;94
  96+ A3DB 6B 67 00     Wordkg						DB  "kg",0                 ;95
  97+ A3DE 67 00        Wordg						DB  "g",0                  ;96
  98+ A3E0 51 75 61 6E  WordQuantity				DB  "Quanitity",0		   ;97
  98+ A3E4 69 74 69 74
  98+ A3E8 79 00
  99+ A3EA 49 6E 76 00  WordInv                     DB  "Inv",0                ;98
 100+ A3EE 53 74 6F 63  WordStock                   DB  "Stock",0              ;99
 100+ A3F2 6B 00
 101+ A3F4 45 71 75 69  WordEquip                   DB  "Equip",0              ;100
 101+ A3F8 70 00
 102+ A3FA 53 68 69 70  WordShip                    DB  "Ship",0               ;101
 102+ A3FE 00
 103+ A3FF 4D 69 73 73  WordMissile                 DB  "Missile",0            ;102
 103+ A403 69 6C 65 00
 104+ A407 48 79 70 65  WordHyperdrive              DB  "Hyperdrive",0
 104+ A40B 72 64 72 69
 104+ A40F 76 65 00
 105+ A412 4D 69 6C 69  WordMilitary                DB  "Military",0
 105+ A416 74 61 72 79
 105+ A41A 00
 106+ A41B
 107+ A41B 17 A1 19 A1  WordIdx				DW  WordDummy,          WordFront,        WordRight,        WordLeft		;0-3
 107+ A41F 1F A1 25 A1
 108+ A423 2A A1 2F A1  					DW  WordRear,           WordLarge,        WordEscape,       WordPod      	;4-7
 108+ A427 35 A1 3C A1
 109+ A42B 40 A1 46 A1  					DW  WordCargo,          WordBay,          WordFuel,         WordScoops   	;8
 109+ A42F 4A A1 4F A1
 110+ A433 56 A1 5D A1  					DW  WordECM,            WordSystem,       WordEnergy,       WordBomb     	;12
 110+ A437 64 A1 6B A1
 111+ A43B 70 A1 76 A1  					DW  WordLaser,          WordPulse,        WordBeam,         WordMiliary  	;16
 111+ A43F 7C A1 81 A1
 112+ A443 89 A1 90 A1  					DW  WordMining,         WordCustom,       WordUnit,         WordShield   	;20
 112+ A447 97 A1 9C A1
 113+ A44B A3 A1 AB A1  					DW  WordDocking,        WordComputers,    WordHyperspace,   WordGalactic 	;24
 113+ A44F B5 A1 C0 A1
 114+ A453 C9 A1 CF A1  					DW  WordExtra,          WordClean,        WordOffender,     WordFugitive	;28
 114+ A457 D5 A1 DE A1
 115+ A45B E7 A1 EC A1  					DW  WordFood,           WordTextiles,     WordRadioactives, WordSlaves		;32
 115+ A45F F5 A1 02 A2
 116+ A463 09 A2 16 A2  					DW  WordLiquorWines,    WordLuxuries,     WordNarcotics,    WordMachinery   ;36
 116+ A467 1F A2 29 A2
 117+ A46B 33 A2 3A A2  					DW  WordAlloys,         WordFirearms,     WordFurs,         WordMinerals    ;40
 117+ A46F 43 A2 48 A2
 118+ A473 51 A2 56 A2  					DW  WordGold,           WordPlatinum,     WordGemStones,    WordAlienItems  ;44               ;
 118+ A477 5F A2 6A A2
 119+ A47B 76 A2 7D A2  WordIdxUoMFull		DW  WordTonnes,         WordKilograms,    WordGrams,		WordShort		;48
 119+ A47F 87 A2 8D A2
 120+ A483 93 A2 99 A2  					DW	WordRange,		    WordChart,        WordData,         WordOn          ;52
 120+ A487 9F A2 A4 A2
 121+ A48B A7 A2 B0 A2  					DW  WordDistance,       WordEconomy,      WordGovernment,   WordTechLevel   ;56
 121+ A48F B8 A2 C3 A2
 122+ A493 CD A2 D8 A2  					DW  WordPopulation,     WordMillion,      WordBillion,      WordGross       ;60
 122+ A497 E0 A2 E8 A2
 123+ A49B EE A2 FB A2  					DW  WordProductivity,   WordAverage,      WordRadius,       WordKM          ;64
 123+ A49F 03 A3 0A A3
 124+ A4A3 0D A3        					DW  WordMCR																	;68
 125+ A4A5 12 A3 17 A3  WordIdxEconomy		DW  WordRich,           WordAvg,      	  WordMainly,       WordPoor        ;69
 125+ A4A9 1B A3 22 A3
 126+ A4AD 27 A3 32 A3                      DW  WordIndustrial,     WordAgricultural									;73
 127+ A4B1 3F A3 47 A3  WordIdxGovernment	DW  WordAnarchy,        WordFeudal,       WordMultiGovernment, WordDictatorship ;75
 127+ A4B5 4E A3 5F A3
 128+ A4B9 6C A3 76 A3                      DW  WordCommunist,      WordConfederacy,  WordDemocracy,       WordCorporate ;79
 128+ A4BD 82 A3 8C A3
 129+ A4C1 9C A3 A2 A3  					DW  WordState,          WordLight,        WordYears,           Word0         ; 83
 129+ A4C5 A8 A3 AE A3
 130+ A4C9 B0 A3 B7 A3  WordIdxMarketmenu	DW  WordMarket,         WordPrices,       WordProduct,         WordUoM	    ;87
 130+ A4CD BE A3 C6 A3
 131+ A4D1 CA A3 D0 A3                      DW  WordPrice,          WordFor,          WordSale                          ;91
 131+ A4D5 D4 A3
 132+ A4D7 D9 A3 DB A3  WordIdxUomAbbrev	DW	Wordt,				Wordkg,           Wordg                 		    ;94
 132+ A4DB DE A3
 133+ A4DD E0 A3 EA A3  					DW  WordQuantity,       WordInv,          WordStock,           WordEquip	;97
 133+ A4E1 EE A3 F4 A3
 134+ A4E5 FA A3 FF A3                      DW  WordShip,           WordMissile       ; 101
 135+ A4E9
 136+ A4E9              ; Phrases
 137+ A4E9 05 08 09 00  TextLargeCargoBay			DB 	5,8,9,0          ;0
 138+ A4ED 06 07 00     TextEscapePod				DB	6,7,0            ;1
 139+ A4F0 0A 0B 00     TextFuelScoops				DB	10,11,0          ;2
 140+ A4F3 0C 0D 00     TextECMSystem				DB	12,13,0          ;3
 141+ A4F6 0E 0F 00     TextEnergyBomb				DB	14,15,0          ;4
 142+ A4F9 0E 16 00     TextEnergyUnit				DB	14,22,0          ;5
 143+ A4FC 18 19 00     TextDockingComp     		DB  24,25,0          ;6
 144+ A4FF 1B 1A 00     TextGalacticHyper			DB	27,26,0          ;7
 145+ A502 01 12 10 00  TextFrontLaser      		DB  01,18,16,0       ;8
 146+ A506 03 12 10 00  TextLeftLaser       		DB  03,18,16,0       ;9
 147+ A50A 02 12 10 00  TextRightLaser      		DB  02,18,16,0       ;10
 148+ A50E 04 12 10 00  TextRearLaser       		DB  04,18,16,0       ;11
 149+ A512 33 34 35 00  TextShortRangeChart 		DB	51,52,53,0       ;12
 150+ A516 1B 35 00     TextGalacticChart   		DB	27,53,0          ;13
 151+ A519 36 37 00     TextDataOn					DB	54,55,0          ;14
 152+ A51C 45 49 00     TextRichIndustrial          DB  69,73,0          ;15
 153+ A51F 46 49 00     TextAvgIndustrial           DB  70,73,0			 ;16
 154+ A522 47 49 00     TextMainIndustrial          DB  71,73,0          ;17
 155+ A525 48 49 00     TextPoorIndustrial          DB  72,73,0          ;18
 156+ A528 45 4A 00     TextRichAgricultural        DB  69,74,0          ;19
 157+ A52B 46 4A 00     TextAvgAgricultural         DB  70,74,0          ;20
 158+ A52E 47 4A 00     TextMainAgricultural        DB  71,74,0          ;21
 159+ A531 48 4A 00     TextPoorAgricultural        DB  72,74,0          ;22
 160+ A534 54 55 00     TextLightYears				DB  84,85,0			 ;23
 161+ A537 56 54 55 00  Text0LightYears				DB  86,84,85,0		 ;24
 162+ A53B 57 58 00     TextMarketPrices			DB  87,88,0			 ;25
 163+ A53E 64 65        TextEquipShip               DB  100,101          ;26
 164+ A540
 165+ A540 00           TextDummy					DB  0
 166+ A541
 167+ A541 E9 A4 ED A4  TextTokens			DW  TextLargeCargoBay, TextEscapePod, TextFuelScoops				; 0 2
 167+ A545 F0 A4
 168+ A547 F3 A4 F6 A4  					DW  TextECMSystem, TextEnergyBomb, TextEnergyUnit					; 3 5
 168+ A54B F9 A4
 169+ A54D FC A4 FF A4  					DW  TextDockingComp, TextGalacticHyper  							; 6 7
 170+ A551 02 A5 06 A5  					DW	TextFrontLaser, TextLeftLaser, TextRightLaser, TextRearLaser	; 8 11
 170+ A555 0A A5 0E A5
 171+ A559 12 A5 16 A5  					DW  TextShortRangeChart, TextGalacticChart, TextDataOn				; 12 14
 171+ A55D 19 A5
 172+ A55F 1C A5 1F A5  TextTokenEconomy	DW  TextRichIndustrial, TextAvgIndustrial, TextPoorIndustrial, TextMainIndustrial, TextMainAgricultural, TextRichAgricultural, TextAvgAgricultural,  TextPoorAgricultural
 172+ A563 25 A5 22 A5
 172+ A567 2E A5 28 A5
 172+ A56B 2B A5 31 A5
 173+ A56F 34 A5        					DW  TextLightYears		                                            ; 21 23
 174+ A571 37 A5 3B A5  					DW  Text0LightYears, TextMarketPrices
 175+ A575 40 A5        					DW  TextDummy;  25
 176+ A577 00 00 00...  TextBuffer			DS	33
 177+ A598
 178+ A598              TextEconomyOffset   EQU (TextTokenEconomy - TextTokens)/2
 179+ A598              TextGovOffset       EQU (WordIdxGovernment - WordIdx)/2
 180+ A598
 181+ A598              CapitaliseString:
 182+ A598              ; ">CapitaliseString hl = address"
 183+ A598              .CapLoop:
 184+ A598 23           	inc		hl
 185+ A599 7E           	ld		a,(hl)
 186+ A59A FE 00        	cp		0
 187+ A59C C8           	ret		z
 188+ A59D FE 5B        	cp		'Z'+1
 189+ A59F 30 F7        	jr		nc,.CapLoop
 190+ A5A1 FE 41        	cp		'A'
 191+ A5A3 38 F3        	jr		c,.CapLoop
 192+ A5A5              .LowerCase:
 193+ A5A5 C6 20        	add		a,'a'-'A'
 194+ A5A7 77           	ld		(hl),a
 195+ A5A8 18 EE        	jr		.CapLoop
 196+ A5AA
 197+ A5AA              WordIndexToAddress:
 198+ A5AA 21 1B A4     	ld		hl,WordIdx
 199+ A5AD ED 31        	add		hl,a
 200+ A5AF ED 31        	add		hl,a
 201+ A5B1 D5           	push	de
 202+ A5B2 5E           	ld		e,(hl)
 203+ A5B3 23           	inc		hl
 204+ A5B4 56           	ld		d,(hl)
 205+ A5B5 EB           	ex		de,hl
 206+ A5B6 D1           	pop		de
 207+ A5B7 C9           	ret
 208+ A5B8
 209+ A5B8
 210+ A5B8              expandTokenToString:
 211+ A5B8              ; ">expandTokenToString a = texttoken"
 212+ A5B8 21 41 A5     	ld		hl,TextTokens
 213+ A5BB CD F0 A0     	call	getTableText
 214+ A5BE 11 77 A5     	ld		de,TextBuffer
 215+ A5C1              .ReadLoop:
 216+ A5C1 7E           	ld		a,(hl)
 217+ A5C2 FE 00        	cp		0
 218+ A5C4 28 1B        	jr		z,.ReadDone
 219+ A5C6 E5           	push	hl
 220+ A5C7 D5           	push	de
 221+ A5C8 21 1B A4     	ld		hl,WordIdx
 222+ A5CB CD F0 A0     	call	getTableText
 223+ A5CE D1           	pop		de
 224+ A5CF              .WordExpandLoop:
 225+ A5CF 7E           	ld		a,(hl)
 226+ A5D0 FE 00        	cp		0
 227+ A5D2 28 05        	jr		z,.AddSpace
 228+ A5D4              ;.GetChar:
 229+ A5D4 12           	ld		(de),a
 230+ A5D5 13           	inc		de
 231+ A5D6 23           	inc		hl
 232+ A5D7 18 F6        	jr		.WordExpandLoop
 233+ A5D9              .AddSpace:
 234+ A5D9 3E 20        	ld		a,' '
 235+ A5DB 12           	ld		(de),a
 236+ A5DC 13           	inc		de
 237+ A5DD E1           	pop		hl
 238+ A5DE 23           	inc		hl
 239+ A5DF 18 E0        	jr		.ReadLoop
 240+ A5E1              .ReadDone:
 241+ A5E1 1B           	dec		de
 242+ A5E2 AF           	xor		a
 243+ A5E3 12           	ld		(de),a
 244+ A5E4 C9           	ret
 245+ A5E5
# file closed: ./Tables/dictionary.asm
1101  A5E5                  INCLUDE "./Tables/name_digrams.asm"
# file opened: ./Tables/name_digrams.asm
   1+ A5E5 41 42 4F 55  name_digrams	DB "ABOUSEITILETSTONLONUTHNO"
   1+ A5E9 53 45 49 54
   1+ A5ED 49 4C 45 54
   1+ A5F1 53 54 4F 4E
   1+ A5F5 4C 4F 4E 55
   1+ A5F9 54 48 4E 4F
   2+ A5FD 41 4C 4C     name_digrams2   DB "ALL"
   3+ A600 45 58 45 47  				DB "EXEGEZACEBISOUSESARMAINDIREA"
   3+ A604 45 5A 41 43
   3+ A608 45 42 49 53
   3+ A60C 4F 55 53 45
   3+ A610 53 41 52 4D
   3+ A614 41 49 4E 44
   3+ A618 49 52 45 41
   4+ A61C 3F 45 52 41  				DB "?ERATENBERALAVETIEDORQUANTEISRION"
   4+ A620 54 45 4E 42
   4+ A624 45 52 41 4C
   4+ A628 41 56 45 54
   4+ A62C 49 45 44 4F
   4+ A630 52 51 55 41
   4+ A634 4E 54 45 49
   4+ A638 53 52 49 4F
   4+ A63C 4E
   5+ A63D
   6+ A63D              ; TODO Moveinto galaxy data module
   7+ A63D 00 00 00...  name_expanded	DS 32
   8+ A65D 00           				DB 0
   9+ A65E
  10+ A65E
  11+ A65E
  12+ A65E              NamingLoop:
  13+ A65E 3A 22 9A     	ld		a,(WorkingSeeds+5)	; a = first byte of name seed
  14+ A661 E6 1F        	and 	$1F					; Keep bottom 5 bits only
  15+ A663 FE 00        	cp		0					; 0 = skip 2 chars
  16+ A665 28 12        	jr		z,.SkipPhrase
  17+ A667 C6 0C        	add		a,12
  18+ A669 CB 27        	sla		a					; phrase = (a+12)*2
  19+ A66B 21 E5 A5     	ld		hl,name_digrams
  20+ A66E ED 31        	add		hl,a
  21+ A670 ED A0        	ldi
  22+ A672 7E           	ld		a,(hl)
  23+ A673 FE 3F        	cp		'?'
  24+ A675 28 02        	jr		z,.SkipPhrase
  25+ A677              .AddExtra:
  26+ A677 ED A0        	ldi
  27+ A679              .SkipPhrase:
  28+ A679 D5           	push	de
  29+ A67A CD 8E 9E     	call	working_seed
  30+ A67D D1           	pop		de
  31+ A67E C9           	ret
  32+ A67F
  33+ A67F              ;GetDigramGalaxySeed:
  34+ A67F              ;	call	copy_galaxy_to_working
  35+ A67F              ;	jr		GetDigramWorkingSeed
  36+ A67F              ;GetDigramSystemSeed:
  37+ A67F              ;	call	copy_system_to_working
  38+ A67F              ;GetDigramWorkingSeed:
  39+ A67F              ;; ">GetDigram a = digram seed"
  40+ A67F              ;	ld		de,name_expanded
  41+ A67F              ;	ld		b,3
  42+ A67F              ;	ld		a,(WorkingSeeds)
  43+ A67F              ;	and		$40
  44+ A67F              ;	jr		z,.SmallSizeName
  45+ A67F              ;.LargeSizeName:
  46+ A67F              ;	call	NamingLoop
  47+ A67F              ;.SmallSizeName:
  48+ A67F              ;	call	NamingLoop
  49+ A67F              ;	call	NamingLoop
  50+ A67F              ;	call	NamingLoop
  51+ A67F              ;.DoneName:
  52+ A67F              ;	ex		de,hl
  53+ A67F              ;	ld		(hl),0
  54+ A67F              ;	ex		de,hl
  55+ A67F              ;	ret
  56+ A67F
  57+ A67F
  58+ A67F
  59+ A67F              ;GetDigramWorkingSeed:
  60+ A67F              ;	MESSAGE ">GetDigram a = digram seed b = length"
  61+ A67F              ;	ld		b,5					; working seed
  62+ A67F              ;	ld		de,name_expanded
  63+ A67F              ;.ExpansionLoop:
  64+ A67F              ;	push	bc
  65+ A67F              ;	ld		hl,WorkingSeeds
  66+ A67F              ;	ld		a,b
  67+ A67F              ;	add		hl,a
  68+ A67F              ;	ld		a,(hl)	; a = first byte of name seed
  69+ A67F              ;	and 	$1F					; Keep bottom 5 bits only
  70+ A67F              ;	cp		0					; 0 = skip 2 chars
  71+ A67F              ;	jr		z,.SkipPhrase
  72+ A67F              ;	or		&80					; set buit 7 high (probabtyl capitalisation)
  73+ A67F              ;	call	TT27
  74+ A67F              ;.SkipPhrase:
  75+ A67F              ;	push	de
  76+ A67F              ;	call	next_working_seed
  77+ A67F              ;	pop		de
  78+ A67F              ;	pop		bc
  79+ A67F              ;	djnz	GetDigramWorkingSeed
  80+ A67F              ;.DoneName:
  81+ A67F              ;	ex		de,hl
  82+ A67F              ;	ld		(hl),0
  83+ A67F              ;	ex		de,hl
  84+ A67F              ;	ret
  85+ A67F              ;
  86+ A67F              ;ExpandToken:
  87+ A67F              ;	DE = target
  88+ A67F              ;	a = token
  89+ A67F              ;
  90+ A67F              ;PlanetDigram:
  91+ A67F              ;	cp		&A0							; >- 160
  92+ A67F              ;	jr		c,MorePage4
  93+ A67F              ;	and		$7F							; 128 to 159 now 0 to 31
  94+ A67F              ;	asl		2							; Multiply by 2
  95+ A67F              ;	ld		hl, name_digrams2
  96+ A67F              ;	add		hl,a
  97+ A67F              ;	ld		a,(hl)
  98+ A67F              ;	call	ProcessTextToken
  99+ A67F              ;	inc		hl
 100+ A67F              ;	ld		a,(hl)
 101+ A67F              ;	cp		'?'
 102+ A67F              ;	ret		z
 103+ A67F              ;	call	ProcessTextToken
 104+ A67F              ;	ret
 105+ A67F              ;MorePage4:
 106+ A67F              ;	sub		$A0
 107+ A67F              ;ExtraTokenCheck:
 108+ A67F              ;	push	de							; save target address
 109+ A67F              ;	push	bc
 110+ A67F              ;	ld		b,a
 111+ A67F              ;	ld		hl,varV
 112+ A67F              ;	ld		(VarV),0400
 113+ A67F              ;	ld		(varV),a
 114+ A67F              ;	ld
 115+ A67F              ;
 116+ A67F              ;		.TT43	\ Token > 127 page4 token or planet digram.
 117+ A67F              ;C9 A0                   CMP #&A0	      \ >= #160 ?
 118+ A67F              ;B0 14                   BCS TT47	      \ more page4, subtract #160
 119+ A67F              ;29 7F                   AND #&7F	      \ else token 128to159  -> 0 to 31
 120+ A67F              ;0A                      ASL A		      \ *= 2
 121+ A67F              ;A8                      TAY 		      \ digram index = 0to62
 122+ A67F              ;B9 80 08                LDA &0880,Y \ QQ16,Y  \ ALLEXEGEZACEBISOUSESARMAINDIREA?ER  etc.
 123+ A67F              ;20 9A 33                JSR &339A   \ TT27    \ process text token
 124+ A67F              ;B9 81 08                LDA &0881,Y \ QQ16+1,Y \ 2nd character of diagram. Flight copied down from docked code.
 125+ A67F              ;C9 3F                   CMP #&3F	      \ is second letter '?'
 126+ A67F              ;F0 40                   BEQ TT48    	      \ rts, name has odd-number of letters.
 127+ A67F              ;4C 9A 33                JMP &339A   \ TT27    \ process text token
 128+ A67F              ;
 129+ A67F              ;	.TT47	\ more page4, subtract #160
 130+ A67F              ;E9 A0                   SBC #&A0	\ -= 160
 131+ A67F              ;	.ex	\ -> &342D \ extra, token >= 96 or Acc = 128to145 or -=160
 132+ A67F              ;AA                      TAX 		\ copy of word index
 133+ A67F              ;A9 00                   LDA #0		\ page 4 words lo  #QQ18 MOD 256
 134+ A67F              ;85 22                   STA &22		\ V
 135+ A67F              ;A9 04                   LDA #4		\ page 4 words hi  #QQ18 DIV 256
 136+ A67F              ;85 23                   STA &23		\ V+1
 137+ A67F              ;A0 00                   LDY #0
 138+ A67F              ;8A                      TXA 		\ token = word index
 139+ A67F              ;F0 13                   BEQ TT50	\ if X=0 then Y offset to word correct
 140+ A67F              ;	.TT51	\ counters Y letter, X token
 141+ A67F              ;B1 22                   LDA (&22),Y	\ (V),Y
 142+ A67F              ;F0 07                   BEQ TT49	\ exit as word ended
 143+ A67F              ;C8                      INY 		\ letter count
 144+ A67F              ;D0 F9                   BNE TT51	\ loop Y
 145+ A67F              ;E6 23                   INC &23	  \ V+1 \ next page as Y reached 256
 146+ A67F              ;D0 F5                   BNE TT51    	\ guaranteed, loop Y letter
 147+ A67F              ;	.TT49	\ word ended
 148+ A67F              ;C8                      INY
 149+ A67F              ;D0 02                   BNE TT59    	\ next word
 150+ A67F              ;E6 23                   INC &23	  \ V+1	\ next page as Y reached 256
 151+ A67F              ;	.TT59	\ next word
 152+ A67F              ;CA                      DEX 		\ token count
 153+ A67F              ;D0 ED                   BNE TT51	\ loop X token
 154+ A67F              ;	.TT50	\ token X = 0, counter Y offset to word correct
 155+ A67F              ;98                      TYA
 156+ A67F              ;48                      PHA 		\ store Yindex
 157+ A67F              ;A5 23                   LDA &23		\ V+1
 158+ A67F              ;48                      PHA 		\ correct pointer hi
 159+ A67F              ;B1 22                   LDA (&22),Y 	\ (V),Y
 160+ A67F              ;49 23                   EOR #&23	\ decode '#'
 161+ A67F              ;20 9A 33                JSR &339A \ TT27 \ process text token to next depth
 162+ A67F              ;68                      PLA 		\ restore this depth's Vhi
 163+ A67F              ;85 23                   STA &23		\ V+1
 164+ A67F              ;68                      PLA
 165+ A67F              ;A8                      TAY 		\ restore this depth's Yindex
 166+ A67F              ;C8                      INY 		\ next letter
 167+ A67F              ;D0 02                   BNE P%+4	\ not zero so skip next page
 168+ A67F              ;E6 23                   INC &23		\ V+1
 169+ A67F              ;B1 22                   LDA (&22),Y	\ (V),Y
 170+ A67F              ;D0 E6                   BNE TT50    	\ loop Y for next letter of page4 token
 171+ A67F              ;	.TT48 	\ rts
 172+ A67F              ;60                      RTS 		\ end of flight token printing TT27
 173+ A67F              ;
 174+ A67F              ;
 175+ A67F              ;
 176+ A67F              ;
 177+ A67F              ;
 178+ A67F              ;
 179+ A67F              ;		.TT27	\ -> &36E0 \ process flight text Token in Acc
 180+ A67F              ;;AA                      TAX		\ copy token to count down
 181+ A67F              ;;F0 DE                   BEQ csh		\ Acc = 0, up to Cash
 182+ A67F              ;30 74                   BMI TT43	\ if token is >  127 down, page4 token or digram
 183+ A67F              ;CA                      DEX
 184+ A67F              ;F0 BC                   BEQ tal		\ Acc == 1, up, print Galaxy number.
 185+ A67F              ;CA                      DEX
 186+ A67F              ;F0 A3                   BEQ ypl		\ Acc == 2, up, present planet in QQ2.
 187+ A67F              ;CA                      DEX
 188+ A67F              ;D0 03                   BNE P%+5	\ hop over, else X == 0
 189+ A67F              ;4C 0A 33                JMP &330A \ cpl \ Acc = 3 print Planet name for seed QQ15
 190+ A67F              ;CA                      DEX
 191+ A67F              ;F0 8A                   BEQ cmn		\ Acc == 4, up, commander name.
 192+ A67F              ;CA                      DEX
 193+ A67F              ;F0 B5                   BEQ fwl		\ Acc == 5, up, fuel followed by cash.
 194+ A67F              ;CA                      DEX
 195+ A67F              ;D0 05                   BNE  P%+7	\ hop over, else X == 0
 196+ A67F              ;A9 80                   LDA #&80	\ Acc == 6, set bit 7 TT27m
 197+ A67F              ;85 72                   STA &72	 	\ QQ17
 198+ A67F              ;60                      RTS
 199+ A67F              ;CA                      DEX 		\ skip Acc ==7
 200+ A67F              ;CA                      DEX
 201+ A67F              ;D0 03                   BNE P%+5	\ hop over to continue Acc 9to127
 202+ A67F              ;86 72                   STX &72	 \ QQ17	\ else Acc ==8, QQ17 set to X = 0
 203+ A67F              ;60                      RTS
 204+ A67F              ;CA                      DEX 		\ continue 9to127 tokens
 205+ A67F              ;F0 38                   BEQ crlf	\ Acc == 9, down, colon on right.
 206+ A67F              ;C9 60                   CMP #&60	\ discard X, look at Acc = token >= 96
 207+ A67F              ;B0 66                   BCS ex   	\ extra >= #&60, far down
 208+ A67F              ;C9 0E                   CMP #14		\ < 14 ?
 209+ A67F              ;90 04                   BCC P%+6	\ goes to Token < 14 or > 31
 210+ A67F              ;C9 20                   CMP #32		\ < 32 ?
 211+ A67F              ;90 28                   BCC qw   	\ 14 <= token A < 32 becomes 128to145 page4 digram
 212+ A67F              ;		\ Token  < 14 or > 31
 213+ A67F              ;A6 72                   LDX &72	 	\ QQ17
 214+ A67F              ;F0 3D                   BEQ TT74 	\ if QQ17 = 0 Upper case, jmp TT26, print character.
 215+ A67F              ;30 11                   BMI TT41 	\ if bit7 set
 216+ A67F              ;24 72                   BIT &72		\ QQ17 has bit6 set too
 217+ A67F              ;70 30                   BVS TT46 	\ If only bit6 set, clear bit6 and print as Upper
 218+ A67F              ;	.TT42	\ Uppercase to lowercase
 219+ A67F              ;C9 41                   CMP #&41	\ < ascii 'A'
 220+ A67F              ;90 06                   BCC TT44 	\ jmp TT26, print character
 221+ A67F              ;C9 5B                   CMP #&5B	\ >= ascii 'Z'+1
 222+ A67F              ;B0 02                   BCS TT44 	\ jmp TT26, print character
 223+ A67F              ;69 20                   ADC #&20	\ else Upper to lowercase
 224+ A67F              ;	.TT44	\ print character as is with TT26
 225+ A67F              ;4C FC 1E                JMP &1EFC \ TT26 \ print character
 226+ A67F              ;
 227+ A67F              ;	.TT41	\ QQ17 bit7 set
 228+ A67F              ;24 72                   BIT &72		\ QQ17
 229+ A67F              ;70 17                   BVS TT45	\ bit6 set too, Nothing or lower.
 230+ A67F              ;C9 41                   CMP #&41	\ < ascii 'A'
 231+ A67F              ;90 22                   BCC TT74 	\ print as is using TT26
 232+ A67F              ;48                      PHA 		\ else store token Acc
 233+ A67F              ;8A                      TXA 		\ QQ17 copy
 234+ A67F              ;09 40                   ORA #&40	\ set bit6 in QQ17 so subsequent ones lower
 235+ A67F              ;85 72                   STA &72	 	\ QQ17
 236+ A67F              ;68                      PLA 		\ restore token
 237+ A67F              ;D0 EC                   BNE TT44	\ guaranteed up, print as Uppercase with TT26.
 238+ A67F              ;
 239+ A67F              ;	.qw	\ Acc = 14to31 becomes 128to145 page4 digram
 240+ A67F              ;69 72                   ADC #&72	\ A+=114 becomes 128to145 page4 digram
 241+ A67F              ;D0 32                   BNE ex		\ guaranteed down, extra.
 242+ A67F              ;
 243+ A67F              ;	.crlf	\ Acc == 9,  colon on right
 244+ A67F              ;A9 15                   LDA #21		\ on right
 245+ A67F              ;85 2C                   STA &2C		\ XC
 246+ A67F              ;D0 97                   BNE TT73	\ guaranteed up, print colon.
 247+ A67F              ;
 248+ A67F              ;	.TT45	\ QQ17 bits 7,6 set. Nothing or lower.
 249+ A67F              ;E0 FF                   CPX #&FF	\ if QQ17 = #&FF
 250+ A67F              ;F0 63                   BEQ TT48	\ rts
 251+ A67F              ;C9 41                   CMP #&41	\ >= ascii 'A' ?
 252+ A67F              ;B0 D0                   BCS TT42	\ Uppercase to lowercase, up.
 253+ A67F              ;	.TT46	\ clear bit6 QQ17 and print as is using TT26
 254+ A67F              ;48                      PHA 		\ push token
 255+ A67F              ;8A                      TXA 		\ QQ17 copy
 256+ A67F              ;29 BF                   AND #&BF	\ clear bit6
 257+ A67F              ;85 72                   STA &72	 	\ QQ17
 258+ A67F              ;68                      PLA 		\ pull token
 259+ A67F              ;	.TT74	\ TT26, print character.
 260+ A67F              ;4C FC 1E                JMP &1EFC	\ TT26
 261+ A67F              ;
 262+ A67F              ;	.TT43	\ Token > 127 page4 token or planet digram.
 263+ A67F              ;C9 A0                   CMP #&A0	      \ >= #160 ?
 264+ A67F              ;B0 14                   BCS TT47	      \ more page4, subtract #160
 265+ A67F              ;29 7F                   AND #&7F	      \ else token 128to159  -> 0 to 31
 266+ A67F              ;0A                      ASL A		      \ *= 2
 267+ A67F              ;A8                      TAY 		      \ digram index = 0to62
 268+ A67F              ;B9 80 08                LDA &0880,Y \ QQ16,Y  \ ALLEXEGEZACEBISOUSESARMAINDIREA?ER  etc.
 269+ A67F              ;20 9A 33                JSR &339A   \ TT27    \ process text token
 270+ A67F              ;B9 81 08                LDA &0881,Y \ QQ16+1,Y \ 2nd character of diagram. Flight copied down from docked code.
 271+ A67F              ;C9 3F                   CMP #&3F	      \ is second letter '?'
 272+ A67F              ;F0 40                   BEQ TT48    	      \ rts, name has odd-number of letters.
 273+ A67F              ;4C 9A 33                JMP &339A   \ TT27    \ process text token
 274+ A67F              ;
 275+ A67F              ;	.TT47	\ more page4, subtract #160
 276+ A67F              ;E9 A0                   SBC #&A0	\ -= 160
 277+ A67F              ;	.ex	\ -> &342D \ extra, token >= 96 or Acc = 128to145 or -=160
 278+ A67F              ;AA                      TAX 		\ copy of word index
 279+ A67F              ;A9 00                   LDA #0		\ page 4 words lo  #QQ18 MOD 256
 280+ A67F              ;85 22                   STA &22		\ V
 281+ A67F              ;A9 04                   LDA #4		\ page 4 words hi  #QQ18 DIV 256
 282+ A67F              ;85 23                   STA &23		\ V+1
 283+ A67F              ;A0 00                   LDY #0
 284+ A67F              ;8A                      TXA 		\ token = word index
 285+ A67F              ;F0 13                   BEQ TT50	\ if X=0 then Y offset to word correct
 286+ A67F              ;	.TT51	\ counters Y letter, X token
 287+ A67F              ;B1 22                   LDA (&22),Y	\ (V),Y
 288+ A67F              ;F0 07                   BEQ TT49	\ exit as word ended
 289+ A67F              ;C8                      INY 		\ letter count
 290+ A67F              ;D0 F9                   BNE TT51	\ loop Y
 291+ A67F              ;E6 23                   INC &23	  \ V+1 \ next page as Y reached 256
 292+ A67F              ;D0 F5                   BNE TT51    	\ guaranteed, loop Y letter
 293+ A67F              ;	.TT49	\ word ended
 294+ A67F              ;C8                      INY
 295+ A67F              ;D0 02                   BNE TT59    	\ next word
 296+ A67F              ;E6 23                   INC &23	  \ V+1	\ next page as Y reached 256
 297+ A67F              ;	.TT59	\ next word
 298+ A67F              ;CA                      DEX 		\ token count
 299+ A67F              ;D0 ED                   BNE TT51	\ loop X token
 300+ A67F              ;	.TT50	\ token X = 0, counter Y offset to word correct
 301+ A67F              ;98                      TYA
 302+ A67F              ;48                      PHA 		\ store Yindex
 303+ A67F              ;A5 23                   LDA &23		\ V+1
 304+ A67F              ;48                      PHA 		\ correct pointer hi
 305+ A67F              ;B1 22                   LDA (&22),Y 	\ (V),Y
 306+ A67F              ;49 23                   EOR #&23	\ decode '#'
 307+ A67F              ;20 9A 33                JSR &339A \ TT27 \ process text token to next depth
 308+ A67F              ;68                      PLA 		\ restore this depth's Vhi
 309+ A67F              ;85 23                   STA &23		\ V+1
 310+ A67F              ;68                      PLA
 311+ A67F              ;A8                      TAY 		\ restore this depth's Yindex
 312+ A67F              ;C8                      INY 		\ next letter
 313+ A67F              ;D0 02                   BNE P%+4	\ not zero so skip next page
 314+ A67F              ;E6 23                   INC &23		\ V+1
 315+ A67F              ;B1 22                   LDA (&22),Y	\ (V),Y
 316+ A67F              ;D0 E6                   BNE TT50    	\ loop Y for next letter of page4 token
 317+ A67F              ;	.TT48 	\ rts
 318+ A67F              ;60                      RTS 		\ end of flight token printing TT27
 319+ A67F              ;
 320+ A67F              ;
 321+ A67F              ;
# file closed: ./Tables/name_digrams.asm
1102  A67F              ;INCLUDE "Tables/inwk_table.asm" This is no longer needed as we will write to univer object bank
1103  A67F
1104  A67F              ; Include all maths libraries to test assembly
1105  A67F
1106  A67F                  INCLUDE "./Maths/addhldesigned.asm"
# file opened: ./Maths/addhldesigned.asm
   1+ A67F CB 7C        addhldesigned:          bit     7,h
   2+ A681 20 03                                jr      nz,.noneghl
   3+ A683 CD 4B AD                             call    negate16hl
   4+ A686 CB 7A        .noneghl:               bit     7,d
   5+ A688 20 03                                jr      nz,.nonegde
   6+ A68A CD 52 AD                             call    negate16de
   7+ A68D 19           .nonegde:               add     hl,de                       ; do 2'd c add
   8+ A68E AF                                   xor     a                           ; assume positive
   9+ A68F CB 7C                                bit     7,h
  10+ A691 C8                                   ret     z                           ; if not set then can exit early
  11+ A692 CD 4B AD                             call    negate16hl
  12+ A695 3E FF                                ld      a,$FF
  13+ A697 C9                                   ret
  14+ A698
# file closed: ./Maths/addhldesigned.asm
1107  A698                  INCLUDE "./Maths/addhlasigned.asm"
# file opened: ./Maths/addhlasigned.asm
   1+ A698              ; HL = HL (signed) + A (unsigned), uses HL, DE, A
   2+ A698 57           AddAusngToHLsng:        ld      d,a
   3+ A699 5C                                   ld      e,h
   4+ A69A 7C                                   ld      a,h
   5+ A69B E6 7F                                and     SignMask8Bit
   6+ A69D 67                                   ld      h,a
   7+ A69E 7A                                   ld      a,d
   8+ A69F ED 31                                add     hl,a
   9+ A6A1 7B                                   ld      a,e
  10+ A6A2 E6 80                                and     SignOnly8Bit
  11+ A6A4 B4                                   or      h
  12+ A6A5 C9                                   ret
  13+ A6A6              ; HL = A (unsigned) - HL (signed), uses HL, DE, BC, A
  14+ A6A6 44           HLEequAusngMinusHLsng:  ld      b,h
  15+ A6A7 4F                                   ld      c,a
  16+ A6A8 78                                   ld      a,b
  17+ A6A9 E6 80                                and     SignOnly8Bit
  18+ A6AB 20 08                                jr      nz,.DoAdd
  19+ A6AD EB           .DoSubtract:            ex      de,hl               ; move hl into de
  20+ A6AE 26 00                                ld      h,0                 ; hl = a
  21+ A6B0 69                                   ld      l,c
  22+ A6B1                                      ClearCarryFlag
  22+ A6B1 B7          >                        or a
  23+ A6B2 ED 52                                sbc     hl,de               ; hl = a - hl
  24+ A6B4 C9                                   ret
  25+ A6B5 79           .DoAdd:                 ld      a,c
  26+ A6B6 ED 31                                add hl,a
  27+ A6B8 C9                                   ret
  28+ A6B9              ;tested mathstestsun2
  29+ A6B9              ; DEL = DEL + BCH signed, uses BC, DE, HL, IY, A
  30+ A6B9 78           AddBCHtoDELsigned:      ld      a,b                 ; Are the values both the same sign?
  31+ A6BA AA                                   xor     d                   ; .
  32+ A6BB E6 80                                and     SignOnly8Bit        ; .
  33+ A6BD 20 19                                jr      nz,.SignDifferent   ; .
  34+ A6BF 78           .SignSame:              ld      a,b                 ; if they are then we only need 1 signe
  35+ A6C0 E6 80                                and     SignOnly8Bit        ; so store it in iyh
  36+ A6C2 FD 67                                ld      iyh,a               ;
  37+ A6C4 78                                   ld      a,b                 ; bch = abs bch
  38+ A6C5 E6 7F                                and     SignMask8Bit        ; .
  39+ A6C7 47                                   ld      b,a                 ; .
  40+ A6C8 7A                                   ld      a,d                 ; del = abs del
  41+ A6C9 E6 7F                                and     SignMask8Bit        ; .
  42+ A6CB 57                                   ld      d,a                 ; .
  43+ A6CC 7C                                   ld      a,h                 ; l = h + l
  44+ A6CD 85                                   add     l                   ; .
  45+ A6CE 6F                                   ld      l,a                 ; .
  46+ A6CF 79                                   ld      a,c                 ; e = e + c + carry
  47+ A6D0 8B                                   adc     e                   ; .
  48+ A6D1 5F                                   ld      e,a                 ; .
  49+ A6D2 78                                   ld      a,b                 ; d = b + d + carry (signed)
  50+ A6D3 8A                                   adc     d                   ;
  51+ A6D4 FD B4                                or      iyh                 ; d = or back in sign bit
  52+ A6D6 57                                   ld      d,a                 ;
  53+ A6D7 C9                                   ret                         ; done
  54+ A6D8 78           .SignDifferent:         ld      a,b                 ; bch = abs bch
  55+ A6D9 FD 67                                ld      iyh,a               ; iyh = b sign
  56+ A6DB E6 7F                                and     SignMask8Bit        ; .
  57+ A6DD 47                                   ld      b,a                 ; .
  58+ A6DE 7A                                   ld      a,d                 ; del = abs del
  59+ A6DF FD 6F                                ld      iyl,a               ; iyl = d sign
  60+ A6E1 E6 7F                                and     SignMask8Bit        ; .
  61+ A6E3 57                                   ld      d,a                 ; .
  62+ A6E4 E5                                   push    hl                  ; hl = bc - de
  63+ A6E5 60 69                                ld      hl,bc               ; if bc < de then there is a carry
  64+ A6E7 ED 52                                sbc     hl,de               ;
  65+ A6E9 E1                                   pop     hl                  ;
  66+ A6EA 38 0E                                jr      c,.BCHltDEL
  67+ A6EC 20 1C                                jr      nz,.DELltBCH        ; if the result was not zero then DEL > BCH
  68+ A6EE 7C           .BCeqDE:                ld      a,h                 ; if the result was zero then check lowest bits
  69+ A6EF                                      JumpIfALTNusng l,.BCHltDEL
  69+ A6EF BD          >                        cp      l
  69+ A6F0 DA FA A6    >                        jp		c, .BCHltDEL
  70+ A6F3 20 15                                jr      nz,.DELltBCH
  71+ A6F5              ; The same so its just zero
  72+ A6F5 AF           .BCHeqDEL:              xor     a                  ; its just zero
  73+ A6F6 57                                   ld      d,a                ; .
  74+ A6F7 5F                                   ld      e,a                ; .
  75+ A6F8 6F                                   ld      l,a                ; .
  76+ A6F9 C9                                   ret                        ; .
  77+ A6FA              ;BCH is less than DEL so its DEL - BCH the sort out sign
  78+ A6FA 7D           .BCHltDEL:              ld      a,l                ; l = l - h                      ; ex
  79+ A6FB 94                                   sub     h                  ; .                              ;   01D70F DEL
  80+ A6FC 6F                                   ld      l,a                ; .                              ;  -000028 BCH
  81+ A6FD 7B                                   ld      a,e                ; e = e - c - carry              ;1.
  82+ A6FE 99                                   sbc     c                  ; .                              ;
  83+ A6FF 5F                                   ld      e,a                ; .                              ;
  84+ A700 7A                                   ld      a,d                ; d = d - b - carry              ;
  85+ A701 98                                   sbc     b                  ; .                              ;
  86+ A702 57                                   ld      d,a                ; .                              ;
  87+ A703 FD 7D                                ld      a,iyl              ; as d was larger, take d sign
  88+ A705 E6 80                                and     SignOnly8Bit       ;
  89+ A707 B2                                   or      d                  ;
  90+ A708 57                                   ld      d,a                ;
  91+ A709 C9                                   ret
  92+ A70A 7C           .DELltBCH:              ld      a,h                ; l = h - l
  93+ A70B 95                                   sub     l                  ;
  94+ A70C 6F                                   ld      l,a                ;
  95+ A70D 79                                   ld      a,c                ; e = c - e - carry
  96+ A70E 9B                                   sbc     e                  ;
  97+ A70F 5F                                   ld      e,a                ;
  98+ A710 78                                   ld      a,b                ; d = b - d - carry
  99+ A711 9A                                   sbc     d                  ;
 100+ A712 57                                   ld      d,a                ;
 101+ A713 FD 7C                                ld      a,iyh              ; as b was larger, take b sign into d
 102+ A715 E6 80                                and     SignOnly8Bit       ;
 103+ A717 B2                                   or      d                  ;
 104+ A718 57                                   ld      d,a                ;
 105+ A719 C9                                   ret
 106+ A71A
 107+ A71A
 108+ A71A              ;BHL = AHL + DE where AHL = 16 bit + A sign and DE = 15 bit signed
 109+ A71A 47           AddAHLtoDEsigned:       ld      b,a                     ; B = A , C = D (save sign bytes)
 110+ A71B 4A                                   ld      c,d                     ; .
 111+ A71C A9                                   xor     c                       ; A = A xor C
 112+ A71D CB BA                                res     7,d                     ; clear sign bit of D
 113+ A71F 20 02                                jr nz,  .OppositeSigns          ; if A xor C is opposite signs job to A0A1
 114+ A721 19                                   add     hl,de                   ; HL = HL + DE
 115+ A722 C9                                   ret                             ; return
 116+ A723 ED 52        .OppositeSigns:         sbc     hl,de                   ; HL = HL -DE
 117+ A725 D0                                   ret     nc                      ; if no carry return
 118+ A726 19                                   add     hl,de                   ; else HL = HL + DE
 119+ A727 EB                                   ex      de,hl                   ;      swap HL and DE
 120+ A728 A7                                   and     a                       ;      reset carry
 121+ A729 ED 52                                sbc     hl,de                   ;      HL = DE - HL (as they were swapped)
 122+ A72B 41                                   ld      b,c                     ;      B = sign of C
 123+ A72C C9                                   ret                             ;      ret
 124+ A72D
 125+ A72D
 126+ A72D
 127+ A72D              ; a = value to add
 128+ A72D              ; b = offset (equivalent to regX)
 129+ A72D              ; returns INWK [x] set to new value
 130+ A72D              addINWKbasigned:
 131+ A72D 21 0C C0     		ld 		hl,UBnKxlo                  ; hl = INWK 0
 132+ A730 4F           		ld      c,a                         ; preserve a
 133+ A731 78           		ld		a,b
 134+ A732 ED 31        		add		hl,a                        ; hl = INWK[x]
 135+ A734 79                   ld      a,c                         ; get back a value
 136+ A735 E6 80                and     $80                         ; get sign bit from a
 137+ A737 47                   ld      b,a                         ; now b = sign bit of a
 138+ A738 79                   ld      a,c                         ; a = original value
 139+ A739 E6 7F                and     SignMask8Bit                ; a = unsigned version of original value
 140+ A73B              ; hl = unsigned version of INWK0[b]
 141+ A73B              ; a = value to add, also in c which will optimise later code
 142+ A73B              ; b = sign bit of a ( in old code was varT)
 143+ A73B              addhlcsigned:
 144+ A73B 5E                   ld      e,(hl)                      ; de = INKK value
 145+ A73C 23                   inc     hl
 146+ A73D 56                   ld      d,(hl)
 147+ A73E 23                   inc     hl                          ; now pointing a sign
 148+ A73F 7E                   ld      a,(hl)                      ; a = sign bit
 149+ A740 EB                   ex      de,hl                       ; hl = value now and de = pointer to sign
 150+ A741 A8                   xor     b                           ; a = resultant sign
 151+ A742 CB 7F                bit     7,a                         ; is it negative?
 152+ A744 28 28                jr      z,.postivecalc
 153+ A746              .negativecalc:
 154+ A746 7C                   ld      a,h
 155+ A747 E6 7F                and     SignMask8Bit
 156+ A749 67                   ld      h,a                         ; strip high bit
 157+ A74A DD 68                ld      ixl,b                       ; save sign bit from b into d
 158+ A74C 06 00                ld      b,0                         ; c = value to subtract so now bc = value to subtract
 159+ A74E ED 42                sbc     hl,bc
 160+ A750 DD 45                ld      b,ixl                       ; get sign back
 161+ A752 EB                   ex      de,hl                       ; de = value hl = pointer to sign
 162+ A753 7E                   ld      a,(hl)                      ;
 163+ A754 E6 7F                and     SignMask8Bit
 164+ A756 DE 00                sbc     a,0                         ; subtract carry which could flip sign bit
 165+ A758 F6 80                or      $80                         ; set bit 0
 166+ A75A A8                   xor     b                           ; flip bit on sign (var T)
 167+ A75B 77                   ld      (hl),a
 168+ A75C 2B                   dec     hl
 169+ A75D 72                   ld      (hl),d
 170+ A75E 2B                   dec     hl
 171+ A75F 73                   ld      (hl),e                      ; write out DE to INKW[x]0,1
 172+ A760 EB                   ex      de,hl                       ; hl = value de = pointer to start if INKW[x]
 173+ A761 D8                   ret     c                           ; if carry was set then we can exit now
 174+ A762              .nocarry:
 175+ A762 CD 4B AD             call    negate16hl                  ; get hl back to positive, a is still inkw+2
 176+ A765 B0                   or      b                           ; b is still varT
 177+ A766 EB                   ex      de,hl                       ; de = value hl = pointer to start if INKW[x]
 178+ A767 73                   ld      (hl),e
 179+ A768 23                   inc     hl
 180+ A769 72                   ld      (hl),d
 181+ A76A 23                   inc     hl
 182+ A76B 77                   ld      (hl),a                      ; set sign bit in INKK[x]+2
 183+ A76C EB                   ex      de,hl                       ; hl = value de = pointer to sign
 184+ A76D C9                   ret
 185+ A76E              .postivecalc:
 186+ A76E DD 68                ld      ixl,b
 187+ A770 06 00                ld      b,0
 188+ A772 19                   add     hl,de
 189+ A773 EB                   ex      de,hl
 190+ A774 DD B5                or      ixl                         ; we don;t need to recover b here
 191+ A776 77                   ld      (hl),a                      ; push sign into INWK[x]
 192+ A777 2B                   dec     hl
 193+ A778 72                   ld      (hl),d
 194+ A779 2B                   dec     hl
 195+ A77A 73                   ld      (hl),e
 196+ A77B C9                   ret
 197+ A77C
 198+ A77C              ;a = a AND 80 (i.e. bit 7) =>carry       so value is -
 199+ A77C              ;MVT1
 200+ A77C              ;    S = bits 6 to 0 of A
 201+ A77C              ;    A = sign bit => T
 202+ A77C              ;    xor sign bit with ink[x] Sign
 203+ A77C              ;    if negative thn its not an add
 204+ A77C              ;
 205+ A77C              ;        and h, 7F
 206+ A77C              ;        b = 0
 207+ A77C              ;        c = varS
 208+ A77C              ;        subtract INW[X]hilo, bc
 209+ A77C              ;        retain carry
 210+ A77C              ;        get INKW[x]Sign
 211+ A77C              ;        and 7F
 212+ A77C              ;        subtract carry (so will go negtive if negative)
 213+ A77C              ;        xor bit 7 of h with T to flip bit
 214+ A77C              ;        write to INKW[x]Sign
 215+ A77C              ;
 216+ A77C              ;    else
 217+ A77C              ;MV10.
 218+ A77C              ;        add INWK[x]hi,lo, varS
 219+ A77C              ;        or      sign bit
 220+ A77C
 221+ A77C
# file closed: ./Maths/addhlasigned.asm
1108  A77C                  INCLUDE "./Maths/Utilities/AddDEToCash.asm"
# file opened: ./Maths/Utilities/AddDEToCash.asm
   1+ A77C              ; Note its big endian
   2+ A77C 2A 71 9D     addDEtoCash:            ld      hl,(Cash)
   3+ A77F 19                                   add     hl,de
   4+ A780 22 71 9D                             ld      (Cash),hl
   5+ A783 11 00 00                             ld      de,0
   6+ A786 2A 73 9D                             ld      hl,(Cash+2)
   7+ A789 ED 5A                                adc     hl,de
   8+ A78B 22 73 9D                             ld      (Cash+2),hl
   9+ A78E C9                                   ret
  10+ A78F
  11+ A78F 2A 71 9D     subDEfromCash:          ld      hl,(Cash)
  12+ A792 7C                                   ld      a,h
  13+ A793 B5                                   or      l
  14+ A794 2A 73 9D                             ld      hl,(Cash+2)
  15+ A797 B4                                   or      h
  16+ A798 B5                                   or      l
  17+ A799 C8                                   ret     z               ; No cash return
  18+ A79A B7                                   or      a
  19+ A79B 2A 71 9D                             ld      hl,(Cash)
  20+ A79E ED 52                                sbc     hl,de
  21+ A7A0 22 71 9D                             ld      (Cash),hl
  22+ A7A3 11 00 00                             ld      de,0
  23+ A7A6 2A 73 9D                             ld      hl,(Cash+2)
  24+ A7A9 ED 52                                sbc     hl,de
  25+ A7AB 22 73 9D                             ld      (Cash+2),hl
  26+ A7AE                                      JumpOnBitSet h,7,.ZeroCash
  26+ A7AE CB 7C       >                        bit 	7,h
  26+ A7B0 C2 B4 A7    >                        jp      nz,.ZeroCash
  27+ A7B3 C9                                   ret
  28+ A7B4 21 00 00     .ZeroCash:              ld      hl,0
  29+ A7B7 22 71 9D                             ld      (Cash),hl
  30+ A7BA 22 73 9D                             ld      (Cash+2),hl
  31+ A7BD C9                                   ret
  32+ A7BE
# file closed: ./Maths/Utilities/AddDEToCash.asm
1109  A7BE                  INCLUDE "./Maths/DIVD3B2.asm"
# file opened: ./Maths/DIVD3B2.asm
   1+ A7BE              ;INPUTS: ahl = dividend cde = divisor
   2+ A7BE              ;OUTPUTS: cde = quotient ahl = remainder
   3+ A7BE 47           Div24by24:              ld b,a
   4+ A7BF E5                                   push hl
   5+ A7C0 DD E1                                pop ix
   6+ A7C2 2E 18                                ld l,24
   7+ A7C4 E5                                   push hl
   8+ A7C5 AF                                   xor a
   9+ A7C6 67                                   ld h,a
  10+ A7C7 6F                                   ld l,a
  11+ A7C8 DD 29        .Div24by24loop:         add ix,ix
  12+ A7CA CB 10                                rl b
  13+ A7CC ED 6A                                adc hl,hl
  14+ A7CE 17                                   rla
  15+ A7CF B9                                   cp c
  16+ A7D0 38 0C                                jr c,.Div24by24skip
  17+ A7D2 20 05                                jr nz,.Div24by24setbit
  18+ A7D4 ED 52                                sbc hl,de
  19+ A7D6 19                                   add hl,de
  20+ A7D7 38 05                                jr c,.Div24by24skip
  21+ A7D9 ED 52        .Div24by24setbit:       sbc hl,de
  22+ A7DB 99                                   sbc a,c
  23+ A7DC DD 23                                inc ix
  24+ A7DE E3           .Div24by24skip:         ex (sp),hl
  25+ A7DF 2D                                   dec l
  26+ A7E0 E3                                   ex (sp),hl
  27+ A7E1 20 E5                                jr nz,.Div24by24loop
  28+ A7E3 D1                                   pop de
  29+ A7E4 48                                   ld c,b
  30+ A7E5 DD E5                                push ix
  31+ A7E7 D1                                   pop de
  32+ A7E8 C9                                   ret
  33+ A7E9
  34+ A7E9 FD 67        Div24by24ASigned:       ld      iyh,a
  35+ A7EB E6 7F                                and     SignMask8Bit
  36+ A7ED CD BE A7                             call    Div24by24
  37+ A7F0 F5                                   push    af
  38+ A7F1 FD 7C                                ld      a,iyh
  39+ A7F3 E6 80                                and     SignOnly8Bit
  40+ A7F5 B1                                   or      c
  41+ A7F6 4F                                   ld      c,a
  42+ A7F7 F1                                   pop     af
  43+ A7F8 C9                                   ret
  44+ A7F9
  45+ A7F9
  46+ A7F9 FD 67        Div24by24LeadSign:      ld      iyh,a           ; Preserve signed in IYL
  47+ A7FB A9                                   xor     c               ; flip sign if negative
  48+ A7FC E6 80                                and     SignOnly8Bit    ; .
  49+ A7FE FD 6F                                ld      iyl,a           ; .
  50+ A800 79                                   ld      a,c             ; make both values ABS
  51+ A801 E6 7F                                and     SignMask8Bit    ; .
  52+ A803 4F                                   ld      c,a             ; .
  53+ A804 FD 7C                                ld      a,iyh           ; .
  54+ A806 E6 7F                                and     SignMask8Bit    ; .
  55+ A808 CD BE A7                             call    Div24by24       ; do abs divide
  56+ A80B FD B5                                or      iyl             ; bring in sign bit
  57+ A80D FD 67                                ld      iyh,a           ; save a
  58+ A80F 79                                   ld      a,c             ; sort sign for c
  59+ A810 FD B5                                or      iyl             ;
  60+ A812 4F                                   ld      c,a             ;
  61+ A813 FD 7C                                ld      a,iyh           ; sort sign of a
  62+ A815 C9                                   ret
  63+ A816
  64+ A816              ; --------------------------------------------------------------
  65+ A816              ;divdide by 16 using undocumented instrunctions
  66+ A816              ;Input: BC = Dividend, DE = Divisor, HL = 0
  67+ A816              ;Output: BC = Quotient, HL = Remainder
  68+ A816 47           PROJ256mulAdivQ:        ld      b,a
  69+ A817 0E 00                                ld      c,0
  70+ A819 16 00                                ld      d,0
  71+ A81B 3A 27 99                             ld      a,(varQ)
  72+ A81E 5F                                   ld      e,a
  73+ A81F 21 00 00     PROJDIV16UNDOC:         ld      hl,0
  74+ A822 78                                   ld      a,b
  75+ A823 06 10                                ld      b,16
  76+ A825 CB 31        PROJDIV16UNDOCLOOP:     sll     c       ; unroll 16 times
  77+ A827 17                                   rla             ; ...
  78+ A828 ED 6A                                adc     hl,hl       ; ...
  79+ A82A ED 52                                sbc     hl,de       ; ...
  80+ A82C 30 02                                jr      nc,PROJDIV16UNDOCSKIP       ; ...
  81+ A82E 19                                   add     hl,de       ; ...
  82+ A82F 0D                                   dec     c       ; ...
  83+ A830 10 F3        PROJDIV16UNDOCSKIP:     djnz    PROJDIV16UNDOCLOOP
  84+ A832 79                                   ld      a,c
  85+ A833 32 28 99                             ld      (varR),a
  86+ A836 C9                                   ret
  87+ A837
  88+ A837              ;INPUTS:    bhl = dividend  cde = divisor where b and c are sign bytes
  89+ A837              ;OUTPUTS:   cahl = quotient cde = divisor
  90+ A837 32 26 98     DVID3B2:                ld      (varPhi2),a                     ;DVID3B2 \ Divide 3 bytes by 2, K = [P(HiLo).A]/[INWK_z HiLo], for planet radius, Xreg protected. ; P+2    \ num sg
  91+ A83A                                      ldCopy2Byte UBnKzlo, varQ               ; [QR} = Ubnk zlohi  (i.e. Inwk_z HiLo)
  91+ A83A 2A 12 C0    >                        ld       hl,(UBnKzlo)
  91+ A83D 22 27 99    >                        ld       (varQ),hl
  92+ A840 3A 14 C0                             ld      a,(UBnKzsgn)                    ;
  93+ A843 32 29 99                             ld      (varS),a                        ; S = inkw z sign
  94+ A846 ED 5B 24 98  DVID3B:                 ld      de,(varP)                       ; K (3bytes)=P(Lo Hi Hi2)/S.R.Q approx  Acc equiv K(0).; get P and P+1 into de
  95+ A84A 7B                                   ld      a,e                             ; num lo
  96+ A84B F6 01                                or      1                               ; must be at least 1
  97+ A84D 32 24 98                             ld      (varP),a                        ; store
  98+ A850 5F                                   ld      e,a                             ; update DE too
  99+ A851 3A 26 98                             ld      a,(varPhi2)                     ; varP Sign     E.D.A = P Lo Hi Hi2
 100+ A854 21 29 99                             ld      hl,varS                         ; hl = address of VarS
 101+ A857 AE                                   xor     (hl)                            ; A = PHi2 Xor S Signs
 102+ A858 E6 80                                and     $80                             ;
 103+ A85A 32 43 99                             ld      (varT),a                        ; T = Sign bit of A
 104+ A85D FD 2E 00                             ld      iyl,0                           ; iyl = yReg = counter
 105+ A860 3A 26 98                             ld      a,(varPhi2)                     ;
 106+ A863 E6 7F                                and     $7F                             ; A = Ph2 again but minus sign bit
 107+ A865              DVL9:                   JumpIfAGTENusng $40,DV14                ; counter Y up; if object is over $40 away then scaled and exit Y count
 107+ A865 FE 40       >                        cp     $40
 107+ A867 D2 75 A8    >                        jp		nc,DV14
 108+ A86A                                      ShiftDELeft1                            ; de (or P,P1) > 1
 108+ A86A CB 23       >			   sla e
 108+ A86C CB 12       >			   rl  d
 109+ A86E CB 17                                rl      a                               ; and accumulator as 3rd byte
 110+ A870 FD 2C                                inc     iyl
 111+ A872 C2 65 A8                             jp      nz,DVL9                         ; loop again with a max of 256 iterations
 112+ A875 32 26 98     DV14:                   ld      (varPhi2),a                     ; scaled, exited Ycount
 113+ A878 ED 53 24 98                          ld      (varP),de                       ; store off the value so far
 114+ A87C 3A 29 99                             ld      a,(varS)                        ; zsign
 115+ A87F E6 7F                                and     $7F                             ; denom sg7
 116+ A881                                      ; jp mi,DV9                             ; this can never happen as bit 7 is and'ed out
 117+ A881 2A 27 99                             ld      hl,(varQ)                       ; demon lo
 118+ A884 FD 2D        DVL6:                   dec     iyl                             ; counter Y back down, roll S. ;  scale Y back
 119+ A886                                      ShiftHLLeft1
 119+ A886 CB 25       >			   sla l
 119+ A888 CB 14       >			   rl  h
 120+ A88A CB 17                                rl      a                               ; mulitply QRS by 2
 121+ A88C F2 84 A8                             jp      p,DVL6                          ; loop roll S until Abit7 set.
 122+ A88F 22 27 99     DV9:                    ld      (varQ),hl                       ; bmi cant enter here from above ; save off so far
 123+ A892 32 27 99                             ld      (varQ),a                        ; Q \ mostly empty so now reuse as hi denom
 124+ A895 3E FE                                ld      a,$FE                           ;  Xreg protected so can't LL28+4
 125+ A897 32 28 99                             ld      (varR),a                        ;  R
 126+ A89A 3A 26 98                             ld      a,(varPhi2)                     ; P+2 \ big numerator
 127+ A89D CD 16 A8                             call    PROJ256mulAdivQ                 ; TODO LL31\ R now =A*256/Q
 128+ A8A0 3E 00                                ld      a,0
 129+ A8A2 32 3B 99                             ld      (varKp1),a
 130+ A8A5 32 3C 99                             ld      (varKp2),a
 131+ A8A8 32 3D 99                             ld      (varKp3),a                      ; clear out K+1 to K+3
 132+ A8AB FD 7D                                ld      a,iyl                           ; Y counter for scale
 133+ A8AD                                      JumpOnBitClear a,7,DV12                 ; Ycount +ve
 133+ A8AD CB 7F       >                        bit 	7,a
 133+ A8AF CA DA A8    >                        jp      z,DV12
 134+ A8B2 3A 28 99                             ld      a,(varR)                        ; R     \ else Y count is -ve, Acc = remainder.
 135+ A8B5 ED 5B 3A 99                          ld      de,(varK)                       ; d= k1
 136+ A8B9 2A 3E 99                             ld      hl,(varK2)                      ; h = k3, l = k2
 137+ A8BC 5F                                   ld      e,a                             ; use e to hold K0 pulled from a
 138+ A8BD CB 27        DVL8:                   sla     a                               ; boost up a                     ;  counter Y up
 139+ A8BF CB 12                                rl      d                               ; k1
 140+ A8C1 CB 15                                rl      l                               ; k2
 141+ A8C3 CB 14                                rl      h                               ; k3
 142+ A8C5 FD 2C                                inc     iyl
 143+ A8C7 20 F4                                jr      nz,DVL8                         ;
 144+ A8C9 ED 53 3A 99  DVL8Save:               ld      (varK),de
 145+ A8CD 22 3E 99                             ld      (varK2),hl                      ; save back K0 to k3
 146+ A8D0 3A 43 99                             ld      a,(varT)
 147+ A8D3 4F                                   ld      c,a                             ; get varT into c reg
 148+ A8D4 7C                                   ld      a,h                             ; a= k3 (sign)
 149+ A8D5 B1                                   or      c                               ; merge in varT (sign)that was saved much earlier up)
 150+ A8D6 32 4D 99                             ld      (varK3),a                       ; load sign bit back into K3
 151+ A8D9 C9                                   ret
 152+ A8DA              DV12:                   JumpIfAIsZero   DV13                    ; Y Count zerp, go to DV13
 152+ A8DA A7          >                        and a   ; cp 0 - changed to and a for optimisation but affects other flags
 152+ A8DB CA F2 A8    >                        jp	z, DV13
 153+ A8DE 3A 28 99                             ld      a,(varR)                        ; Reduce Remainder
 154+ A8E1 CB 3F        DVL10:                  srl     a                               ; divide by 2                     ; counter Y reduce
 155+ A8E3 FD 2D                                dec     iyl
 156+ A8E5 C2 E1 A8                             jp      nz,DVL10                        ; loop y reduce until y is zero
 157+ A8E8 32 3A 99                             ld      (varK),a                        ; k Lo
 158+ A8EB                                      ldCopyByte  varT,varKp3                 ; Copy sign to K+3
 158+ A8EB 3A 43 99    >                        ld       a,(varT)
 158+ A8EE 32 3D 99    >                        ld       (varKp3),a
 159+ A8F1 C9                                   ret
 160+ A8F2              DV13:                   ldCopyByte  varR,varK                   ; R \ already correct so copy to K lo;DV13   \ Ycount zero \ K(1to2) already = 0
 160+ A8F2 3A 28 99    >                        ld       a,(varR)
 160+ A8F5 32 3A 99    >                        ld       (varK),a
 161+ A8F8                                      ldCopyByte  varT,varKp3                 ; Copy sign to K+3
 161+ A8F8 3A 43 99    >                        ld       a,(varT)
 161+ A8FB 32 3D 99    >                        ld       (varKp3),a
 162+ A8FE C9                                   ret
 163+ A8FF
 164+ A8FF
 165+ A8FF CD 37 A8     PLS6:                   call    DVID3B2                         ; Returns AHL K ( 2 1 0 )
 166+ A902 3A 3D 99                             ld      a,(varKp3)
 167+ A905 E6 7F                                and     $7F
 168+ A907 21 3C 99                             ld      hl,varKp2
 169+ A90A B6                                   or      (hl)
 170+ A90B C2 20 A9                             jp      nz,PL44TooBig
 171+ A90E 3A 3B 99                             ld      a,(varKp1)
 172+ A911 FE 04                                cp      4                               ; if high byte > 4 then total > 1024 so too big
 173+ A913 30 0B                                jr      nc,PL44TooBig
 174+ A915                                      ClearCarryFlag                          ; we have a good result regardless
 174+ A915 B7          >                        or a
 175+ A916 2A 3A 99                             ld      hl,(varK)                       ; get K (0 1)
 176+ A919 3A 3D 99                             ld      a,(varKp3)                      ; if sign bit high?
 177+ A91C CB 7F                                bit     7,a
 178+ A91E C8                                   ret     z                               ; no so we can just return
 179+ A91F C9           PL44:                   ret
 180+ A920 37           PL44TooBig:             scf
 181+ A921 C9                                   ret
 182+ A922
# file closed: ./Maths/DIVD3B2.asm
1110  A922                  INCLUDE "./Maths/multiply.asm"
# file opened: ./Maths/multiply.asm
   1+ A922              HLequSRmulQdiv256:      ;X.Y=x1lo.S*M/256  	\ where M/256 is gradient
   2+ A922 2A 28 99                             ld  hl,(varRS)
   3+ A925 3A 27 99                             ld  a,(varQ)
   4+ A928 C5 D5        HLeqyHLmulAdiv256:      push    bc,,de
   5+ A92A 11 00 00                             ld  de,0        ; de = XY
   6+ A92D 47                                   ld  b,a         ; b = Q
   7+ A92E                                      ShiftHLRight1
   7+ A92E CB 3C       >			   srl h
   7+ A930 CB 1D       >			   rr  l
   8+ A932 CB 20                                sla b
   9+ A934 30 03                                jr  nc,.LL126
  10+ A936 EB           .LL125:                 ex de,hl
  11+ A937 19                                   add hl,de
  12+ A938 EB                                   ex  de,hl       ; de = de + rs
  13+ A939              .LL126:                 ShiftHLRight1
  13+ A939 CB 3C       >			   srl h
  13+ A93B CB 1D       >			   rr  l
  14+ A93D CB 20                                sla b
  15+ A93F 38 F5                                jr      c,.LL125
  16+ A941 20 F6                                jr      nz,.LL126
  17+ A943 EB                                   ex      de,hl   ; hl = result
  18+ A944 D1 C1                                pop     bc,,de
  19+ A946 C9                                   ret
  20+ A947
  21+ A947
  22+ A947              MacroDEEquQmulASigned:  MACRO
  23+ A947 ~                                    ld      d,a                         ; save a into d
  24+ A947 ~                                    ld      a,(varQ)
  25+ A947 ~                                    ld      e,a
  26+ A947 ~                                    xor     d                           ; a = a xor var Q
  27+ A947 ~                                    and     SignOnly8Bit
  28+ A947 ~                                    ld      b,a                         ; b = sign of a xor q
  29+ A947 ~                                    ld      a,d                         ; d = abs d (or a reg)
  30+ A947 ~                                    and     SignMask8Bit
  31+ A947 ~                                    ld      d,a
  32+ A947 ~                                    ld      a,e                         ; e = abs e (or varQ)
  33+ A947 ~                                    and     SignMask8Bit
  34+ A947 ~                                    ld      e,a
  35+ A947 ~                                    mul                                 ; de = a * Q
  36+ A947 ~                                    ld      a,d
  37+ A947 ~                                    or      b                           ; de = a * Q leading sign bit
  38+ A947 ~                                    ld      d,a
  39+ A947                                      ENDM
  40+ A947
  41+ A947
  42+ A947
  43+ A947                                 ; .MAD	\ -> &22AD  \ Multiply and Add  (DE also) X.A(Lo.Hi) = Q*A + R.S (Lo.Hi)
  44+ A947              madXAequQmulAaddRS:     MacroDEEquQmulASigned
  44+ A947 57          >                        ld      d,a                         ; save a into d
  44+ A948 3A 27 99    >                        ld      a,(varQ)
  44+ A94B 5F          >                        ld      e,a
  44+ A94C AA          >                        xor     d                           ; a = a xor var Q
  44+ A94D E6 80       >                        and     SignOnly8Bit
  44+ A94F 47          >                        ld      b,a                         ; b = sign of a xor q
  44+ A950 7A          >                        ld      a,d                         ; d = abs d (or a reg)
  44+ A951 E6 7F       >                        and     SignMask8Bit
  44+ A953 57          >                        ld      d,a
  44+ A954 7B          >                        ld      a,e                         ; e = abs e (or varQ)
  44+ A955 E6 7F       >                        and     SignMask8Bit
  44+ A957 5F          >                        ld      e,a
  44+ A958 ED 30       >                        mul                                 ; de = a * Q
  44+ A95A 7A          >                        ld      a,d
  44+ A95B B0          >                        or      b                           ; de = a * Q leading sign bit
  44+ A95C 57          >                        ld      d,a
  45+ A95D 2A 28 99     madDEaddRS:             ld		hl,(varR)
  46+ A960 CD 69 A9                             call	madXAAddHLDESigned
  47+ A963 EB                                   ex      de,hl                       ; de = R.S + DE
  48+ A964                                      ClearCarryFlag
  48+ A964 B7          >                        or a
  49+ A965 DD 6B                                ld      ixl,e
  50+ A967 7A                                   ld      a,d
  51+ A968 C9                                   ret
  52+ A969
  53+ A969
  54+ A969 7C           madXAAddHLDESigned:     ld      a,h
  55+ A96A E6 80                                and     SignOnly8Bit
  56+ A96C 47                                   ld      b,a                         ;save sign bit in b
  57+ A96D AA                                   xor     d                           ;if h sign and d sign were different then bit 7 of a will be 1 which means
  58+ A96E                                      JumpIfNegative .ADDHLDEOppSGN        ;Signs are opposite there fore we can subtract to get difference
  58+ A96E FA 86 A9    >                        jp		m, .ADDHLDEOppSGN
  59+ A971 78           .ADDHLDESameSigns:       ld      a,b
  60+ A972 B2                                   or      d
  61+ A973                                      JumpIfNegative .ADDHLDESameNeg       ; optimisation so we can just do simple add if both positive
  61+ A973 FA 78 A9    >                        jp		m, .ADDHLDESameNeg
  62+ A976 19                                   add     hl,de
  63+ A977 C9                                   ret
  64+ A978 7C           .ADDHLDESameNeg:         ld      a,h                         ; so if we enter here then signs are the same so we clear the 16th bit
  65+ A979 E6 7F                                and     SignMask8Bit                ; we could check the value of b for optimisation
  66+ A97B 67                                   ld      h,a
  67+ A97C 7A                                   ld      a,d
  68+ A97D E6 7F                                and     SignMask8Bit
  69+ A97F 57                                   ld      d,a
  70+ A980 19                                   add     hl,de
  71+ A981 3E 80                                ld      a,SignOnly8Bit
  72+ A983 B4                                   or      h                           ; now set bit for negative value, we won't bother with overflow for now TODO
  73+ A984 67                                   ld      h,a
  74+ A985 C9                                   ret
  75+ A986 7C           .ADDHLDEOppSGN:          ld      a,h                         ; so if we enter here then signs are the same so we clear the 16th bit                     ; here HL and DE are opposite
  76+ A987 E6 7F                                and     SignMask8Bit                ; we could check the value of b for optimisation
  77+ A989 67                                   ld      h,a
  78+ A98A 7A                                   ld      a,d
  79+ A98B E6 7F                                and     SignMask8Bit
  80+ A98D 57                                   ld      d,a
  81+ A98E B7                                   or      a
  82+ A98F ED 52                                sbc     hl,de
  83+ A991 38 04                                jr      c,.ADDHLDEOppInvert
  84+ A993 78           .ADDHLDEOppSGNNoCarry:   ld      a,b                         ; we got here so hl > de therefore we can just take hl's previous sign bit
  85+ A994 B4                                   or      h
  86+ A995 67                                   ld      h,a                         ; set the previou sign value
  87+ A996 C9                                   ret
  88+ A997              .ADDHLDEOppInvert:       NegHL                                                   ; we need to flip the sign and 2'c the Hl result
  88+ A997 AF          >                    xor a
  88+ A998 95          >                    sub l
  88+ A999 6F          >                    ld l,a
  88+ A99A 9F          >                    sbc a,a
  88+ A99B 94          >                    sub h
  88+ A99C 67          >                    ld h,a
  89+ A99D 78                                   ld      a,b
  90+ A99E EE 80                                xor     SignOnly8Bit                ; flip sign bit
  91+ A9A0 B4                                   or      h
  92+ A9A1 67                                   ld      h,a                         ; recover sign
  93+ A9A2 C9                                   ret
  94+ A9A3
  95+ A9A3
  96+ A9A3                  ; multiplication of 16-bit number and 8-bit number into a 24-bit product
  97+ A9A3                  ;
  98+ A9A3                  ; enter : hl = 16-bit multiplier   = x
  99+ A9A3                  ;          e =  8-bit multiplicand = y
 100+ A9A3                  ;
 101+ A9A3                  ; exit  : ahl = 24-bit product
 102+ A9A3                  ;         carry reset
 103+ A9A3                  ;
 104+ A9A3                  ; uses  : af, de, hl
 105+ A9A3 54           AHLequHLmulE:           ld d,h                      ; xh
 106+ A9A4 63                                   ld h,e                      ; yl
 107+ A9A5 ED 30                                mul de                      ; xh*yl
 108+ A9A7 EB                                   ex de,hl
 109+ A9A8 ED 30                                mul de                      ; yl*xl, hl = xh*yl
 110+ A9AA
 111+ A9AA 7A                                   ld  a,d                     ; sum products
 112+ A9AB 85                                   add a,l
 113+ A9AC 57                                   ld  d,a
 114+ A9AD EB                                   ex de,hl
 115+ A9AE
 116+ A9AE 7A                                   ld  a,d
 117+ A9AF CE 00                                adc a,0
 118+ A9B1 C9                                   ret
 119+ A9B2
 120+ A9B2
 121+ A9B2
 122+ A9B2                 ; multiplication of two 16-bit numbers into a 32-bit product
 123+ A9B2                 ;
 124+ A9B2                 ; enter : de = 16-bit multiplicand = y
 125+ A9B2                 ;         hl = 16-bit multiplicand = x
 126+ A9B2                 ;
 127+ A9B2                 ; exit  : dehl = 32-bit product
 128+ A9B2                 ;         carry reset
 129+ A9B2                 ;
 130+ A9B2                 ; uses  : af, bc, de, hl
 131+ A9B2
 132+ A9B2
 133+ A9B2
 134+ A9B2 45           DEHLequDEmulHL:         ld b,l                      ; x0
 135+ A9B3 4B                                   ld c,e                      ; y0
 136+ A9B4 5D                                   ld e,l                      ; x0
 137+ A9B5 6A                                   ld l,d
 138+ A9B6 E5                                   push hl                     ; x1 y1
 139+ A9B7 69                                   ld l,c                      ; y0
 140+ A9B8              ; bc = x0 y0, de = y1 x0,  hl = x1 y0,  stack = x1 y1
 141+ A9B8 ED 30                                mul de                      ; y1*x0
 142+ A9BA EB                                   ex de,hl
 143+ A9BB ED 30                                mul de                      ; x1*y0
 144+ A9BD
 145+ A9BD AF                                   xor a                       ; zero A
 146+ A9BE 19                                   add hl,de                   ; sum cross products p2 p1
 147+ A9BF 8F                                   adc a,a                     ; capture carry p3
 148+ A9C0
 149+ A9C0 59                                   ld e,c                      ; x0
 150+ A9C1 50                                   ld d,b                      ; y0
 151+ A9C2 ED 30                                mul de                      ; y0*x0
 152+ A9C4
 153+ A9C4 47                                   ld b,a                      ; carry from cross products
 154+ A9C5 4C                                   ld c,h                      ; LSB of MSW from cross products
 155+ A9C6
 156+ A9C6 7A                                   ld a,d
 157+ A9C7 85                                   add a,l
 158+ A9C8 67                                   ld h,a
 159+ A9C9 6B                                   ld l,e                      ; LSW in HL p1 p0
 160+ A9CA
 161+ A9CA D1                                   pop de
 162+ A9CB ED 30                                mul de                      ; x1*y1
 163+ A9CD
 164+ A9CD EB                                   ex de,hl
 165+ A9CE ED 4A                                adc hl,bc
 166+ A9D0 EB                                   ex de,hl                    ; de = final MSW
 167+ A9D1
 168+ A9D1 C9                                   ret
 169+ A9D2
 170+ A9D2              ; multiplication of two 16-bit numbers into a 16-bit product
 171+ A9D2              ; enter : de = 16-bit multiplicand
 172+ A9D2              ;         hl = 16-bit multiplicand
 173+ A9D2              ; exit  : hl = 16-bit product
 174+ A9D2              ;         carry reset
 175+ A9D2              ; maths is
 176+ A9D2              ;        hl = y , de= x
 177+ A9D2              ;        hl = xhi,ylo + (yhigh * xlow)
 178+ A9D2              ;        hl = yhih & xlo + x
 179+ A9D2              ;
 180+ A9D2              ;
 181+ A9D2              ; uses  : af, bc, de, hl
 182+ A9D2 C5           mulDEbyHL:              push    bc
 183+ A9D3 7A                                   ld a,d                      ; a = xh
 184+ A9D4 54                                   ld d,h                      ; d = yh
 185+ A9D5 67                                   ld h,a                      ; h = xh
 186+ A9D6 4B                                   ld c,e                      ; c = xl
 187+ A9D7 45                                   ld b,l                      ; b = yl
 188+ A9D8 ED 30                                mul                         ; yh * yl
 189+ A9DA EB                                   ex de,hl
 190+ A9DB ED 30                                mul                         ; xh * yl
 191+ A9DD 19                                   add hl,de                   ; add cross products
 192+ A9DE 59                                   ld e,c
 193+ A9DF 50                                   ld d,b
 194+ A9E0 ED 30                                mul                         ; yl * xl
 195+ A9E2 7D                                   ld a,l                      ; cross products lsb
 196+ A9E3 82                                   add a,d                     ; add to msb final
 197+ A9E4 67                                   ld h,a
 198+ A9E5 6B                                   ld l,e                      ; hl = final
 199+ A9E6                                      ; 83 cycles, 19 bytes
 200+ A9E6 AF                                   xor a                       ; reset carry
 201+ A9E7 C1                                   pop     bc
 202+ A9E8 C9                                   ret
 203+ A9E9
 204+ A9E9
 205+ A9E9              ; CHL = multiplicand D = multiplier
 206+ A9E9              ; DCHL = CHL * D
 207+ A9E9 7A           mulCHLbyDSigned:        ld      a,d                 ; get sign from d
 208+ A9EA AC                                   xor     h                   ; xor with h to get resultant sign
 209+ A9EB E6 80                                and     SignOnly8Bit        ; .
 210+ A9ED FD 67                                ld      iyh,a               ; iyh = copy of sign
 211+ A9EF 79                                   ld      a,c                 ; now CHL = ABS (CHL)
 212+ A9F0 E6 7F                                and     SignMask8Bit        ; .
 213+ A9F2 4F                                   ld      c,a                 ; .
 214+ A9F3 7A                                   ld      a,d                 ; d = ABS D
 215+ A9F4 E6 7F                                and     SignMask8Bit        ; .
 216+ A9F6              ; At this point CHL = ABS (HLE), A = ABS(D)
 217+ A9F6 57           .mul1:                  ld      d,a                 ; first do D * L
 218+ A9F7 5D                                   ld      e,l                 ; .
 219+ A9F8 ED 30                                mul     de                  ; DE = L * D
 220+ A9FA 08                                   ex      af,af'              ; save multiplier
 221+ A9FB 6B                                   ld      l,e                 ; L = p0
 222+ A9FC 7A                                   ld      a,d                 ; carry byte
 223+ A9FD 08                                   ex      af,af'              ; retrieve muliplier and save carry byte along with flags
 224+ A9FE 5C           .mul2:                  ld      e,h                 ; byte 2 of multiplicand
 225+ A9FF 57                                   ld      d,a                 ; and multiplier
 226+ AA00 ED 30                                mul     de                  ; now its D & L
 227+ AA02 08                                   ex      af,af'              ; get back carry byte with flags
 228+ AA03 83           .carrybyte1:            add     a,e                 ; add low byte carry to result and retain carry too through next instructions
 229+ AA04 67                                   ld      h,a                 ; h = P1
 230+ AA05 7A                                   ld      a,d                 ; a = carry byte
 231+ AA06 08                                   ex      af,af'              ; save carry byte and get back multiplier with flags
 232+ AA07 59           .mul3:                  ld      e,c                 ; byte 3 of multiplicand
 233+ AA08 57                                   ld      d,a                 ;
 234+ AA09 ED 30                                mul     de                  ;
 235+ AA0B 08                                   ex      af,af'              ; get back carry byte and carry prior to first add
 236+ AA0C 8B                                   adc     a,e                 ;
 237+ AA0D FD B4                                or      iyh                 ; recover saved resultant sign
 238+ AA0F 4F                                   ld      c,a                 ; c byte 3. Note the value range allowed can never cause a byte 3 carry
 239+ AA10 C9                                   ret
 240+ AA11
 241+ AA11              ;  CHL = 53456 D = 1E
 242+ AA11              ;  56 * 1E = A14 L = 14 carry = 0A
 243+ AA11              ;  34 * 1E = 618 H = 18 +A = 22 carry = 6
 244+ AA11              ;  5  * 1E = 096 C = 96 + 6 = 9C
 245+ AA11              ;  CHL = 9C2214
 246+ AA11
 247+ AA11              ; DELC = HLE * D, uses HL, DE, C , A , IYH
 248+ AA11              ; HLE = multiplicand D = multiplier
 249+ AA11              ; tested by mathstestsun.asm all passed
 250+ AA11 7A           mulHLEbyDSigned:        ld      a,d                 ; get sign from d
 251+ AA12 AC                                   xor     h                   ; xor with h to get resultant sign
 252+ AA13 E6 80                                and     SignOnly8Bit        ; .
 253+ AA15 FD 67                                ld      iyh,a               ; iyh = copy of sign
 254+ AA17 7C                                   ld      a,h                 ; now HLE = ABS (HLE)
 255+ AA18 E6 7F                                and     SignMask8Bit        ; .
 256+ AA1A 67                                   ld      h,a                 ; .
 257+ AA1B 7A                                   ld      a,d                 ; d = ABS D
 258+ AA1C E6 7F                                and     SignMask8Bit        ; .
 259+ AA1E 57                                   ld      d,a                 ; .
 260+ AA1F              ; At this point HLE = ABS (HLE), A = ABS(D)
 261+ AA1F ED 30        .mul1:                  mul     de                  ; C = E * D
 262+ AA21 08                                   ex      af,af'              ; save mulitplier
 263+ AA22 4B                                   ld      c,e                 ; C = p0
 264+ AA23 7A                                   ld      a,d                 ; save carry and get back multiplier
 265+ AA24 08                                   ex      af,af'
 266+ AA25 5D           .mul2:                  ld      e,l                 ; L = L * D
 267+ AA26 57                                   ld      d,a                 ; .
 268+ AA27 ED 30                                mul     de                  ; .
 269+ AA29 08                                   ex      af,af'              ; .
 270+ AA2A 83           .carrybyte1:            add     a,e                 ; L = L + carry byte
 271+ AA2B 6F                                   ld      l,a                 ; .
 272+ AA2C 7A                                   ld      a,d
 273+ AA2D 08                                   ex      af,af'              ; save new carry byte
 274+ AA2E 5C           .mul3:                  ld      e,h                 ; e = H * D
 275+ AA2F 57                                   ld      d,a
 276+ AA30 ED 30                                mul     de
 277+ AA32 08                                   ex      af,af'
 278+ AA33 8B                                   adc     a,e                 ;
 279+ AA34 5F                                   ld      e,a
 280+ AA35 FD 54                                ld      d,iyh
 281+ AA37 C9                                   ret
 282+ AA38
 283+ AA38
 284+ AA38              ; multiplication of two S156-bit numbers into a 16-bit 2'd compliment product
 285+ AA38              ; enter : de = 16-bit multiplicand
 286+ AA38              ;         hl = 16-bit multiplicand
 287+ AA38              ; exit  : hl = 16-bit product
 288+ AA38              ;         carry reset
 289+ AA38              ;
 290+ AA38              ; uses  : af, bc, de, hl
 291+ AA38 00           mulDEbyHLSignByte       DB      0
 292+ AA39 AF           mulDEbyHLSgnTo2c:       xor     a
 293+ AA3A 32 38 AA                             ld      (mulDEbyHLSignByte),a
 294+ AA3D 7A           .SignDE:                ld      a,d
 295+ AA3E ED 27 80                             test    $80
 296+ AA41 28 08                                jr      z,.SignHL
 297+ AA43 E6 7F        .NegativeDE:            and     $7F
 298+ AA45 57                                   ld      d,a
 299+ AA46 3E 80                                ld      a,$80
 300+ AA48 32 38 AA                             ld      (mulDEbyHLSignByte),a
 301+ AA4B 7C           .SignHL:                ld      a,h
 302+ AA4C ED 27 80                             test    $80
 303+ AA4F 28 0B                                jr      z,.AbsoluteMultiply
 304+ AA51 E6 7F        .NegativeHL:            and     $7F
 305+ AA53 67                                   ld      h,a
 306+ AA54 3A 38 AA                             ld      a,(mulDEbyHLSignByte)
 307+ AA57 EE 80                                xor     $80
 308+ AA59 32 38 AA                             ld      (mulDEbyHLSignByte),a
 309+ AA5C CD D2 A9     .AbsoluteMultiply:      call    mulDEbyHL
 310+ AA5F 3A 38 AA     .RecoverSign:           ld      a,(mulDEbyHLSignByte)
 311+ AA62 ED 27 80                             test    $80
 312+ AA65 C8                                   ret     z
 313+ AA66 AF           .Negateghl: 			xor 	a
 314+ AA67 95                                   sub 	l
 315+ AA68 6F                                   ld 		l,a
 316+ AA69 9F                                   sbc 	a,a
 317+ AA6A 94                                   sub 	h
 318+ AA6B 67                                   ld 		h,a
 319+ AA6C C9                                   ret
 320+ AA6D
 321+ AA6D AF           mulDESgnbyHLUnsgnTo2c:  xor     a
 322+ AA6E 32 38 AA                             ld      (mulDEbyHLSignByte),a
 323+ AA71 7A           .SignDE:                ld      a,d
 324+ AA72 ED 27 80                             test    $80
 325+ AA75 28 08                                jr      z,.AbsoluteMultiply
 326+ AA77 E6 7F        .NegativeDE:            and     $7F
 327+ AA79 57                                   ld      d,a
 328+ AA7A 3E 80                                ld      a,$80
 329+ AA7C 32 38 AA                             ld      (mulDEbyHLSignByte),a
 330+ AA7F CD D2 A9     .AbsoluteMultiply:      call    mulDEbyHL
 331+ AA82 3A 38 AA     .RecoverSign:           ld      a,(mulDEbyHLSignByte)
 332+ AA85 ED 27 80                             test    $80
 333+ AA88 C8                                   ret     z
 334+ AA89 AF           .Negateghl:             xor 	a
 335+ AA8A 95                                   sub 	l
 336+ AA8B 6F                                   ld 		l,a
 337+ AA8C 9F                                   sbc 	a,a
 338+ AA8D 94                                   sub 	h
 339+ AA8E 67                                   ld 		h,a
 340+ AA8F C9                                   ret
 341+ AA90
 342+ AA90
# file closed: ./Maths/multiply.asm
1111  AA90                  INCLUDE "./Maths/asm_square.asm"
# file opened: ./Maths/asm_square.asm
   1+ AA90              ; "ASM_SQUA : TESTGOOD"
   2+ AA90              ; "AP = A^2 A = low,P = hi"
   3+ AA90
   4+ AA90              inline_squde: MACRO
   5+ AA90 ~            			ld	e,a
   6+ AA90 ~            			ld  d,a
   7+ AA90 ~            			mul
   8+ AA90              			ENDM
   9+ AA90
  10+ AA90              inline_squa: MACRO
  11+ AA90 ~            			ld	e,a
  12+ AA90 ~            			ld  d,a
  13+ AA90 ~            			mul
  14+ AA90 ~            			ld	a,e
  15+ AA90              			ENDM
  16+ AA90
  17+ AA90
  18+ AA90              asm_squa:
  19+ AA90 E6 7F        	and SignMask8Bit
  20+ AA92              ; "ASM SQUA2 : TESTGOOD"
  21+ AA92              ; "AP = A^2 A = low,P = hi singed"
  22+ AA92              asm_squa2:
  23+ AA92 5F           	ld e, a
  24+ AA93 57           	ld d,a
  25+ AA94 ED 30        	mul
  26+ AA96 ED 53 24 98  	ld (varP),de
  27+ AA9A 7B           	ld a,e
  28+ AA9B C9           	ret
# file closed: ./Maths/asm_square.asm
1112  AA9C                  INCLUDE "./Maths/asm_sqrt.asm"
# file opened: ./Maths/asm_sqrt.asm
   1+ AA9C              ; "ASM SQRT : TESTGOOD"
   2+ AA9C              ; "16-bit integer square root"
   3+ AA9C              ; "call with de = number to square root"
   4+ AA9C              ; "returns   hl = square root"
   5+ AA9C              ; "corrupts  bc, de"
   6+ AA9C              asm_sqrt:
   7+ AA9C 01 00 80     	ld bc,$8000
   8+ AA9F 61           	ld h,c
   9+ AAA0 69           	ld l,c
  10+ AAA1              .sqrloop:
  11+ AAA1 CB 38        	srl b
  12+ AAA3 CB 19        	rr c
  13+ AAA5 09           	add hl,bc
  14+ AAA6 EB           	ex de,hl
  15+ AAA7 ED 52        	sbc hl,de
  16+ AAA9 38 04        	jr c,.sqrbit
  17+ AAAB EB           	ex de,hl
  18+ AAAC 09           	add hl,bc
  19+ AAAD 18 05        	jr .sqrfi
  20+ AAAF              .sqrbit:
  21+ AAAF 19           	add hl,de
  22+ AAB0 EB           	ex de,hl
  23+ AAB1 B7           	or a
  24+ AAB2 ED 42        	sbc hl,bc
  25+ AAB4              .sqrfi:
  26+ AAB4 CB 3C        	srl h
  27+ AAB6 CB 1D        	rr l
  28+ AAB8 CB 38        	srl b
  29+ AABA CB 19        	rr c
  30+ AABC 30 E3        	jr nc,.sqrloop
  31+ AABE C9           	ret
  32+ AABF
  33+ AABF
  34+ AABF              sqrtQR:					; Q = SQR(Qlo.Rhi) Q <~127
  35+ AABF 3A 27 99     	ld		a,(varQ)
  36+ AAC2 5F           	ld		e,a
  37+ AAC3 3A 28 99     	ld		a,(varR)
  38+ AAC6 57           	ld		d,a
  39+ AAC7 CD 9C AA     	call	asm_sqrt
  40+ AACA 7D               ld      a,l
  41+ AACB 32 27 99     	ld		(varQ),a
  42+ AACE C9           	ret
  43+ AACF
# file closed: ./Maths/asm_sqrt.asm
1113  AACF                  INCLUDE "./Maths/asm_divide.asm"
# file opened: ./Maths/asm_divide.asm
   1+ AACF              ;
   2+ AACF              ;   Set flags E to 11111110
   3+ AACF              ;   Loop:   A << 2
   4+ AACF              ;           if carry was 0
   5+ AACF              ;               if a >= D
   6+ AACF              ;                   A = A - D
   7+ AACF              ;                   clear carry (probably irrelevant really)
   8+ AACF              ;           else
   9+ AACF
  10+ AACF              ;               sla flags << bringing in carry of 1
  11+ AACF              ;               if bit 7 of flag was set then loop
  12+ AACF              ;                                        elase a = e and exit
  13+ AACF              ;
  14+ AACF              ;
  15+ AACF              ;
  16+ AACF
  17+ AACF              AEquAmul256DivD:        JumpIfAGTENusng  d, .Ll28Exit255
  17+ AACF BA          >                        cp     d
  17+ AAD0 D2 EE AA    >                        jp		nc,.Ll28Exit255
  18+ AAD3 1E FE                                ld      e,%11111110                 ; Set R to have bits 1-7 set, so we can rotate through 7
  19+ AAD5 CB 27        .DivideLoop:            sla     a
  20+ AAD7 38 0D                                jr      c,.LL29
  21+ AAD9                                      JumpIfALTNusng  d, .SkipSub         ; will jump if carry set, so we need to reset on the rol
  21+ AAD9 BA          >                        cp      d
  21+ AADA DA DF AA    >                        jp		c, .SkipSub
  22+ AADD 92                                   sub     d
  23+ AADE                                      ClearCarryFlag                      ; reset clarry as it will be complimented for rotate as 6502 does carry flags inverted
  23+ AADE B7          >                        or a
  24+ AADF              .SkipSub:               FlipCarryFlag                       ; if we did the subtract the carry will be clear so we need to invert to roll in.
  24+ AADF 3F          >                        ccf
  25+ AAE0 CB 13                                rl      e
  26+ AAE2 38 F1                                jr      c,.DivideLoop
  27+ AAE4 7B                                   ld      a,e
  28+ AAE5 C9                                   ret
  29+ AAE6 92           .LL29:                  sub     d                           ; A >= Q, so set A = A - Q
  30+ AAE7                                      SetCarryFlag                        ; Set the C flag to rotate into the result in R
  30+ AAE7 37          >                        scf
  31+ AAE8 CB 13                                rl      e                           ; rotate counter e left
  32+ AAEA 38 E9                                jr      c,.DivideLoop               ; if a bit was spat off teh end then loop
  33+ AAEC 7B                                   ld      a,e                         ; stick result in a
  34+ AAED C9                                   ret
  35+ AAEE 3E FF        .Ll28Exit255:           ld  a,255                           ; Fail with FF as result
  36+ AAF0 C9                                   ret
  37+ AAF1
  38+ AAF1
  39+ AAF1              ; Divide 8-bit values
  40+ AAF1              ; In: Divide E by divider C
  41+ AAF1              ; Out: A = result, B = rest
  42+ AAF1              ;
  43+ AAF1              ;;;Div8:
  44+ AAF1              ;;;    xor a
  45+ AAF1              ;;;    ld b,8
  46+ AAF1              ;;;Div8_Loop:
  47+ AAF1              ;;;    rl e
  48+ AAF1              ;;;    rla
  49+ AAF1              ;;;    sub c
  50+ AAF1              ;;;    jr nc,Div8_NoAdd
  51+ AAF1              ;;;    add a,c
  52+ AAF1              ;;;Div8_NoAdd:
  53+ AAF1              ;;;    djnz Div8_Loop
  54+ AAF1              ;;;    ld b,a0
  55+ AAF1              ;;;    ld a,e
  56+ AAF1              ;;;    rla
  57+ AAF1              ;;;    cpl
  58+ AAF1              ;;;    ret
  59+ AAF1
  60+ AAF1              ;;Inputs: DE is the numerator, BC is the divisor
  61+ AAF1              ;;Outputs: DE is the result
  62+ AAF1              ;;         A is a copy of E
  63+ AAF1              ;;         HL is the remainder
  64+ AAF1              ;;         BC is not changed
  65+ AAF1              ;; so DE = DE /BC
  66+ AAF1              ;140 bytes
  67+ AAF1              ;145cc
  68+ AAF1
  69+ AAF1              MacroDEDivBC:       MACRO
  70+ AAF1 ~                                rla
  71+ AAF1 ~                                adc     hl,hl
  72+ AAF1 ~                                sbc     hl,bc
  73+ AAF1 ~                                jr      nc,$+3
  74+ AAF1 ~                                add     hl,bc
  75+ AAF1                                  ENDM
  76+ AAF1
  77+ AAF1              DEequDEDivBC:
  78+ AAF1 AF               xor a
  79+ AAF2 ED 62            sbc hl,hl
  80+ AAF4 7A               ld a,d
  81+ AAF5                  MacroDEDivBC
  81+ AAF5 17          >                    rla
  81+ AAF6 ED 6A       >                    adc     hl,hl
  81+ AAF8 ED 42       >                    sbc     hl,bc
  81+ AAFA 30 01       >                    jr      nc,$+3
  81+ AAFC 09          >                    add     hl,bc
  82+ AAFD                  MacroDEDivBC
  82+ AAFD 17          >                    rla
  82+ AAFE ED 6A       >                    adc     hl,hl
  82+ AB00 ED 42       >                    sbc     hl,bc
  82+ AB02 30 01       >                    jr      nc,$+3
  82+ AB04 09          >                    add     hl,bc
  83+ AB05                  MacroDEDivBC
  83+ AB05 17          >                    rla
  83+ AB06 ED 6A       >                    adc     hl,hl
  83+ AB08 ED 42       >                    sbc     hl,bc
  83+ AB0A 30 01       >                    jr      nc,$+3
  83+ AB0C 09          >                    add     hl,bc
  84+ AB0D                  MacroDEDivBC
  84+ AB0D 17          >                    rla
  84+ AB0E ED 6A       >                    adc     hl,hl
  84+ AB10 ED 42       >                    sbc     hl,bc
  84+ AB12 30 01       >                    jr      nc,$+3
  84+ AB14 09          >                    add     hl,bc
  85+ AB15                  MacroDEDivBC
  85+ AB15 17          >                    rla
  85+ AB16 ED 6A       >                    adc     hl,hl
  85+ AB18 ED 42       >                    sbc     hl,bc
  85+ AB1A 30 01       >                    jr      nc,$+3
  85+ AB1C 09          >                    add     hl,bc
  86+ AB1D                  MacroDEDivBC
  86+ AB1D 17          >                    rla
  86+ AB1E ED 6A       >                    adc     hl,hl
  86+ AB20 ED 42       >                    sbc     hl,bc
  86+ AB22 30 01       >                    jr      nc,$+3
  86+ AB24 09          >                    add     hl,bc
  87+ AB25                  MacroDEDivBC
  87+ AB25 17          >                    rla
  87+ AB26 ED 6A       >                    adc     hl,hl
  87+ AB28 ED 42       >                    sbc     hl,bc
  87+ AB2A 30 01       >                    jr      nc,$+3
  87+ AB2C 09          >                    add     hl,bc
  88+ AB2D                  MacroDEDivBC
  88+ AB2D 17          >                    rla
  88+ AB2E ED 6A       >                    adc     hl,hl
  88+ AB30 ED 42       >                    sbc     hl,bc
  88+ AB32 30 01       >                    jr      nc,$+3
  88+ AB34 09          >                    add     hl,bc
  89+ AB35 17               rla
  90+ AB36 2F               cpl
  91+ AB37 57               ld d,a
  92+ AB38
  93+ AB38 7B               ld a,e
  94+ AB39                  MacroDEDivBC
  94+ AB39 17          >                    rla
  94+ AB3A ED 6A       >                    adc     hl,hl
  94+ AB3C ED 42       >                    sbc     hl,bc
  94+ AB3E 30 01       >                    jr      nc,$+3
  94+ AB40 09          >                    add     hl,bc
  95+ AB41                  MacroDEDivBC
  95+ AB41 17          >                    rla
  95+ AB42 ED 6A       >                    adc     hl,hl
  95+ AB44 ED 42       >                    sbc     hl,bc
  95+ AB46 30 01       >                    jr      nc,$+3
  95+ AB48 09          >                    add     hl,bc
  96+ AB49                  MacroDEDivBC
  96+ AB49 17          >                    rla
  96+ AB4A ED 6A       >                    adc     hl,hl
  96+ AB4C ED 42       >                    sbc     hl,bc
  96+ AB4E 30 01       >                    jr      nc,$+3
  96+ AB50 09          >                    add     hl,bc
  97+ AB51                  MacroDEDivBC
  97+ AB51 17          >                    rla
  97+ AB52 ED 6A       >                    adc     hl,hl
  97+ AB54 ED 42       >                    sbc     hl,bc
  97+ AB56 30 01       >                    jr      nc,$+3
  97+ AB58 09          >                    add     hl,bc
  98+ AB59                  MacroDEDivBC
  98+ AB59 17          >                    rla
  98+ AB5A ED 6A       >                    adc     hl,hl
  98+ AB5C ED 42       >                    sbc     hl,bc
  98+ AB5E 30 01       >                    jr      nc,$+3
  98+ AB60 09          >                    add     hl,bc
  99+ AB61                  MacroDEDivBC
  99+ AB61 17          >                    rla
  99+ AB62 ED 6A       >                    adc     hl,hl
  99+ AB64 ED 42       >                    sbc     hl,bc
  99+ AB66 30 01       >                    jr      nc,$+3
  99+ AB68 09          >                    add     hl,bc
 100+ AB69                  MacroDEDivBC
 100+ AB69 17          >                    rla
 100+ AB6A ED 6A       >                    adc     hl,hl
 100+ AB6C ED 42       >                    sbc     hl,bc
 100+ AB6E 30 01       >                    jr      nc,$+3
 100+ AB70 09          >                    add     hl,bc
 101+ AB71                  MacroDEDivBC
 101+ AB71 17          >                    rla
 101+ AB72 ED 6A       >                    adc     hl,hl
 101+ AB74 ED 42       >                    sbc     hl,bc
 101+ AB76 30 01       >                    jr      nc,$+3
 101+ AB78 09          >                    add     hl,bc
 102+ AB79 17               rla
 103+ AB7A 2F               cpl
 104+ AB7B 5F               ld e,a
 105+ AB7C C9               ret
 106+ AB7D
 107+ AB7D
 108+ AB7D
 109+ AB7D              ;divdide by 16 using undocumented instrunctions
 110+ AB7D              ;Input: BC = Dividend, DE = Divisor, HL = 0
 111+ AB7D              ;Output: BC = Quotient, HL = Remainder
 112+ AB7D              ; Our use
 113+ AB7D              ; BC = A0
 114+ AB7D              ; DE = 0C
 115+ AB7D              ; so BC = a * 256 / C
 116+ AB7D              DIV16Amul256dCUNDOC:    JumpIfAGTENusng	  c,DEV16ATooLarge                                          ; first off if a > c ten return 255
 116+ AB7D B9          >                        cp     c
 116+ AB7E D2 A9 AB    >                        jp		nc,DEV16ATooLarge
 117+ AB81 47                                   ld      b,a
 118+ AB82 59                                   ld      e,c
 119+ AB83 0E 00                                ld      c,0
 120+ AB85 16 00                                ld      d,0
 121+ AB87 C3 94 AB                             jp      DIV16UNDOC
 122+ AB8A 47           DIV16Amul256dQUNDOC:    ld      b,a
 123+ AB8B 0E 00                                ld      c,0
 124+ AB8D 21 27 99                             ld      hl,varQ
 125+ AB90 7E                                   ld      a,(hl)
 126+ AB91 16 00                                ld      d,0
 127+ AB93 5F                                   ld      e,a
 128+ AB94              DIV16BCDivDEUNDOC:
 129+ AB94 21 00 00     DIV16UNDOC:             ld      hl,0
 130+ AB97 78                                   ld      a,b
 131+ AB98 06 10                                ld      b,16
 132+ AB9A CB 31        DIV16UNDOCLOOP:         sll	c		; unroll 16 times
 133+ AB9C 17                                   rla			; ...
 134+ AB9D ED 6A                                adc	hl,hl		; ...
 135+ AB9F ED 52                                sbc	hl,de		; ...
 136+ ABA1 30 02                                jr	nc,DIV16UNDOCSKIP		; ...
 137+ ABA3 19                                   add	hl,de		; ...
 138+ ABA4 0D                                   dec	c		; ...
 139+ ABA5 10 F3        DIV16UNDOCSKIP:         djnz DIV16UNDOCLOOP
 140+ ABA7 47                                   ld   b,a
 141+ ABA8 C9                                   ret
 142+ ABA9 01 FF 00     DEV16ATooLarge:         ld     bc,$00FF
 143+ ABAC C9                                   ret
 144+ ABAD
 145+ ABAD              ; "> asm_div8 C_Div_D - C is the numerator, D is the denominator, A is the remainder, B is 0, C is the result of C/D,D,E,H,L are not changed"
 146+ ABAD 06 08        asm_div8:               ld b,8
 147+ ABAF AF                                   xor a
 148+ ABB0 CB 21        .div8_loop:	            sla c
 149+ ABB2 17                                   rla
 150+ ABB3 BA                                   cp d
 151+ ABB4 38 02                                jr c,.div8_skip
 151+ ABB6
 152+ ABB6 0C                                   inc c
 153+ ABB7 92                                   sub d
 154+ ABB8 10 F6        .div8_skip:	            djnz .div8_loop
 155+ ABBA C9                                   ret
 156+ ABBB              ; ">asm_div16: HL_Div_C: HL is the numerator,  C is the denominator, output A is the remainder, B is 0, C,DE is not changedHL is the quotient"
 157+ ABBB 06 10        asm_div16:              ld b,16
 158+ ABBD AF                                   xor a
 159+ ABBE CB 25        div16_loop:	            sla l
 160+ ABC0 CB 14                                rl	h
 161+ ABC2              ;    add hl,hl
 162+ ABC2 17                                   rla
 163+ ABC3 B9                                   cp c
 164+ ABC4 38 02                                jr c,div16_skip
 165+ ABC6 2C                                   inc l
 166+ ABC7 91                                   sub c
 167+ ABC8 10 F4        div16_skip:		        djnz div16_loop
 168+ ABCA C9                                   ret
 169+ ABCB              ;
 170+ ABCB              ; Divide 16-bit values (with 16-bit result)
 171+ ABCB              ; In: Divide BC by divider DE
 172+ ABCB              ; Out: BC = result, HL = rest
 173+ ABCB              ;
 174+ ABCB              HLDivC_Iteration: 	MACRO
 175+ ABCB ~            					add	hl,hl		; unroll 16 times
 176+ ABCB ~            					rla				; ...
 177+ ABCB ~            					cp	c			; ...
 178+ ABCB ~            					jr	1F
 179+ ABCB ~            					sub	c			; ...
 180+ ABCB ~            1:
 181+ ABCB ~            					inc	l			; ...
 182+ ABCB              					ENDM
 183+ ABCB
 184+ ABCB
 185+ ABCB
 186+ ABCB              ; ">div1616: BC = BC / DE. HL = remainder"
 187+ ABCB 21 00 00     Div1616:            ld hl,0
 188+ ABCE 78                               ld a,b
 189+ ABCF 06 08                            ld b,8
 190+ ABD1 17           .Div16_Loop1:       rla
 191+ ABD2 ED 6A                            adc hl,hl
 192+ ABD4 ED 52                            sbc hl,de
 193+ ABD6 30 01                            jr nc,.Div16_NoAdd1
 194+ ABD8 19                               add hl,de
 195+ ABD9 10 F6        .Div16_NoAdd1:      djnz .Div16_Loop1
 196+ ABDB 17                               rla
 197+ ABDC 2F                               cpl
 198+ ABDD 47                               ld b,a
 199+ ABDE 79                               ld a,c
 200+ ABDF 48                               ld c,b
 201+ ABE0 06 08                            ld b,8
 202+ ABE2 17           .Div16_Loop2:       rla
 203+ ABE3 ED 6A                            adc hl,hl
 204+ ABE5 ED 52                            sbc hl,de
 205+ ABE7 30 01                            jr nc,.Div16_NoAdd2
 206+ ABE9 19                               add hl,de
 207+ ABEA 10 F6        .Div16_NoAdd2:      djnz .Div16_Loop2
 208+ ABEC 17                               rla
 209+ ABED 2F                               cpl
 210+ ABEE 41                               ld b,c
 211+ ABEF 4F                               ld c,a
 212+ ABF0 C9                               ret
 213+ ABF1
 214+ ABF1
 215+ ABF1
 216+ ABF1              BCDIVDE_Iteration: MACRO
 217+ ABF1 ~            				   rla
 218+ ABF1 ~            				   adc	hl,hl
 219+ ABF1 ~            				   add	hl,de
 220+ ABF1 ~            				   jr	c,1F
 221+ ABF1 ~            				   sbc	hl,de
 222+ ABF1 ~            1:
 223+ ABF1              				   ENDM
 224+ ABF1
 225+ ABF1
 226+ ABF1              ; ">BC_Div_DE: BC = BC / DE. HL = remainder fast divide with unrolled loop"
 227+ ABF1              ;BC/DE ==> BC, remainder in HL
 228+ ABF1              ;NOTE: BC/0 returns 0 as the quotient.
 229+ ABF1              ;min: 738cc
 230+ ABF1              ;max: 898cc
 231+ ABF1              ;avg: 818cc
 232+ ABF1              ;144 bytes
 233+ ABF1 AF           BC_Div_DE:              xor a
 234+ ABF2 67                                   ld h,a
 235+ ABF3 6F                                   ld l,a
 236+ ABF4 93                                   sub e
 237+ ABF5 5F                                   ld e,a
 238+ ABF6 9F                                   sbc a,a
 239+ ABF7 92                                   sub d
 240+ ABF8 57                                   ld d,a
 241+ ABF9 78                                   ld a,b
 242+ ABFA                                      BCDIVDE_Iteration
 242+ ABFA 17          >				   rla
 242+ ABFB ED 6A       >				   adc	hl,hl
 242+ ABFD 19          >				   add	hl,de
 242+ ABFE 38 02       >				   jr	c,1F
 242+ AC00 ED 52       >				   sbc	hl,de
 242+ AC02             >1:
 243+ AC02                                      BCDIVDE_Iteration
 243+ AC02 17          >				   rla
 243+ AC03 ED 6A       >				   adc	hl,hl
 243+ AC05 19          >				   add	hl,de
 243+ AC06 38 02       >				   jr	c,1F
 243+ AC08 ED 52       >				   sbc	hl,de
 243+ AC0A             >1:
 244+ AC0A                                      BCDIVDE_Iteration
 244+ AC0A 17          >				   rla
 244+ AC0B ED 6A       >				   adc	hl,hl
 244+ AC0D 19          >				   add	hl,de
 244+ AC0E 38 02       >				   jr	c,1F
 244+ AC10 ED 52       >				   sbc	hl,de
 244+ AC12             >1:
 245+ AC12                                      BCDIVDE_Iteration
 245+ AC12 17          >				   rla
 245+ AC13 ED 6A       >				   adc	hl,hl
 245+ AC15 19          >				   add	hl,de
 245+ AC16 38 02       >				   jr	c,1F
 245+ AC18 ED 52       >				   sbc	hl,de
 245+ AC1A             >1:
 246+ AC1A                                      BCDIVDE_Iteration
 246+ AC1A 17          >				   rla
 246+ AC1B ED 6A       >				   adc	hl,hl
 246+ AC1D 19          >				   add	hl,de
 246+ AC1E 38 02       >				   jr	c,1F
 246+ AC20 ED 52       >				   sbc	hl,de
 246+ AC22             >1:
 247+ AC22                                      BCDIVDE_Iteration
 247+ AC22 17          >				   rla
 247+ AC23 ED 6A       >				   adc	hl,hl
 247+ AC25 19          >				   add	hl,de
 247+ AC26 38 02       >				   jr	c,1F
 247+ AC28 ED 52       >				   sbc	hl,de
 247+ AC2A             >1:
 248+ AC2A                                      BCDIVDE_Iteration
 248+ AC2A 17          >				   rla
 248+ AC2B ED 6A       >				   adc	hl,hl
 248+ AC2D 19          >				   add	hl,de
 248+ AC2E 38 02       >				   jr	c,1F
 248+ AC30 ED 52       >				   sbc	hl,de
 248+ AC32             >1:
 249+ AC32                                      BCDIVDE_Iteration
 249+ AC32 17          >				   rla
 249+ AC33 ED 6A       >				   adc	hl,hl
 249+ AC35 19          >				   add	hl,de
 249+ AC36 38 02       >				   jr	c,1F
 249+ AC38 ED 52       >				   sbc	hl,de
 249+ AC3A             >1:
 250+ AC3A 17                                   rla
 251+ AC3B 47                                   ld b,a
 252+ AC3C
 253+ AC3C 79                                   ld a,c
 254+ AC3D                                      BCDIVDE_Iteration
 254+ AC3D 17          >				   rla
 254+ AC3E ED 6A       >				   adc	hl,hl
 254+ AC40 19          >				   add	hl,de
 254+ AC41 38 02       >				   jr	c,1F
 254+ AC43 ED 52       >				   sbc	hl,de
 254+ AC45             >1:
 255+ AC45                                      BCDIVDE_Iteration
 255+ AC45 17          >				   rla
 255+ AC46 ED 6A       >				   adc	hl,hl
 255+ AC48 19          >				   add	hl,de
 255+ AC49 38 02       >				   jr	c,1F
 255+ AC4B ED 52       >				   sbc	hl,de
 255+ AC4D             >1:
 256+ AC4D                                      BCDIVDE_Iteration
 256+ AC4D 17          >				   rla
 256+ AC4E ED 6A       >				   adc	hl,hl
 256+ AC50 19          >				   add	hl,de
 256+ AC51 38 02       >				   jr	c,1F
 256+ AC53 ED 52       >				   sbc	hl,de
 256+ AC55             >1:
 257+ AC55                                      BCDIVDE_Iteration
 257+ AC55 17          >				   rla
 257+ AC56 ED 6A       >				   adc	hl,hl
 257+ AC58 19          >				   add	hl,de
 257+ AC59 38 02       >				   jr	c,1F
 257+ AC5B ED 52       >				   sbc	hl,de
 257+ AC5D             >1:
 258+ AC5D                                      BCDIVDE_Iteration
 258+ AC5D 17          >				   rla
 258+ AC5E ED 6A       >				   adc	hl,hl
 258+ AC60 19          >				   add	hl,de
 258+ AC61 38 02       >				   jr	c,1F
 258+ AC63 ED 52       >				   sbc	hl,de
 258+ AC65             >1:
 259+ AC65                                      BCDIVDE_Iteration
 259+ AC65 17          >				   rla
 259+ AC66 ED 6A       >				   adc	hl,hl
 259+ AC68 19          >				   add	hl,de
 259+ AC69 38 02       >				   jr	c,1F
 259+ AC6B ED 52       >				   sbc	hl,de
 259+ AC6D             >1:
 260+ AC6D                                      BCDIVDE_Iteration
 260+ AC6D 17          >				   rla
 260+ AC6E ED 6A       >				   adc	hl,hl
 260+ AC70 19          >				   add	hl,de
 260+ AC71 38 02       >				   jr	c,1F
 260+ AC73 ED 52       >				   sbc	hl,de
 260+ AC75             >1:
 261+ AC75                                      BCDIVDE_Iteration
 261+ AC75 17          >				   rla
 261+ AC76 ED 6A       >				   adc	hl,hl
 261+ AC78 19          >				   add	hl,de
 261+ AC79 38 02       >				   jr	c,1F
 261+ AC7B ED 52       >				   sbc	hl,de
 261+ AC7D             >1:
 262+ AC7D 17                                   rla
 263+ AC7E 4F                                   ld c,a
 264+ AC7F C9                                   ret
 265+ AC80
 266+ AC80              ;Inputs:
 267+ AC80              ;     DE,BC are 8.8 Fixed Point numbers
 268+ AC80              ;Outputs:
 269+ AC80              ;     DE is the 8.8 Fixed Point result (rounded to the least significant bit)
 270+ AC80              ;if DE is 0 : 122cc or 136cc if BC is negative
 271+ AC80              ;if |BC|>=128*|DE| : 152cc or 166cc if BC is negative
 272+ AC80              ;Otherwise:
 273+ AC80              ;min: 1107cc
 274+ AC80              ;max: 1319cc
 275+ AC80              ;avg: 1201cc
 276+ AC80 78           BC_Div_DE_88:           ld a,b  ; First, find out if the output is positive or negative
 277+ AC81 AA                                   xor d
 278+ AC82 F5                                   push af   ;sign bit is the result sign bit
 279+ AC83              ; Now make sure the inputs are positive
 280+ AC83 A8                                   xor b     ;A now has the value of B, since I XORed it with D twice (cancelling)
 281+ AC84 F2 8D AC                             jp p,BC_Div_DE_88_lbl1   ;if Positive, don't negate
 282+ AC87 AF                                   xor a
 283+ AC88 91                                   sub c
 284+ AC89 4F                                   ld c,a
 285+ AC8A 9F                                   sbc a,a
 286+ AC8B 90                                   sub b
 287+ AC8C 47                                   ld b,a
 288+ AC8D 7A           BC_Div_DE_88_lbl1:      ld a,d  ;now make DE negative to optimize the remainder comparison
 289+ AC8E B2                                   or d
 290+ AC8F FA 98 AC                             jp m,BC_Div_DE_88_lbl2
 291+ AC92 AF                                   xor a
 292+ AC93 93                                   sub e
 293+ AC94 5F                                   ld e,a
 294+ AC95 9F                                   sbc a,a
 295+ AC96 92                                   sub d
 296+ AC97 57                                   ld d,a
 297+ AC98 B3           BC_Div_DE_88_lbl2:      or e      ;if DE is 0, we can call it an overflow ;A is the current value of D
 298+ AC99 28 1D                                jr z,div_fixed88_overflow
 299+ AC9B 26 00                                ld h,0          ;The accumulator gets set to B if no overflow.;We can use H=0 to save a few cc in the meantime
 300+ AC9D 78                                   ld a,b;if B+DE>=0, then we'll have overflow
 301+ AC9E 83                                   add a,e
 302+ AC9F 7A                                   ld a,d
 303+ ACA0 8C                                   adc a,h
 304+ ACA1 38 15                                jr c,div_fixed88_overflow
 305+ ACA3 68                                   ld l,b  ;Now we can load the accumulator/remainder with B;H is already 0
 306+ ACA4 79                                   ld a,c
 307+ ACA5 CD C0 AC                             call div_fixed88_sub
 308+ ACA8 4F                                   ld c,a
 309+ ACA9 78                                   ld a,b      ;A is now 0
 310+ ACAA CD C0 AC                             call div_fixed88_sub
 311+ ACAD 51                                   ld d,c
 312+ ACAE 5F                                   ld e,a
 313+ ACAF F1                                   pop af
 314+ ACB0 F0                                   ret p
 315+ ACB1 AF                                   xor a
 316+ ACB2 93                                   sub e
 317+ ACB3 5F                                   ld e,a
 318+ ACB4 9F                                   sbc a,a
 319+ ACB5 92                                   sub d
 320+ ACB6 57                                   ld d,a
 321+ ACB7 C9                                   ret
 322+ ACB8
 323+ ACB8 11 FF 7F     div_fixed88_overflow:   ld de,$7FFF
 324+ ACBB F1                                   pop af
 325+ ACBC F0                                   ret p
 326+ ACBD 13                                   inc de
 327+ ACBE 1C                                   inc e
 328+ ACBF C9                                   ret
 329+ ACC0
 330+ ACC0              ;min: 456cc
 331+ ACC0              ;max: 536cc
 332+ ACC0              ;avg: 496cc
 333+ ACC0 06 08        div_fixed88_sub:        ld b,8
 334+ ACC2 17           BC_Div_DE_88_lbl3:      rla
 335+ ACC3 ED 6A                                adc hl,hl
 336+ ACC5 19                                   add hl,de
 337+ ACC6 38 02                                jr c,$+4
 338+ ACC8 ED 52                                sbc hl,de
 339+ ACCA 10 F6                                djnz BC_Div_DE_88_lbl3
 340+ ACCC 8F                                   adc a,a
 341+ ACCD C9                                   ret
 342+ ACCE
# file closed: ./Maths/asm_divide.asm
1114  ACCE                  INCLUDE "./Maths/asm_unitvector.asm"
# file opened: ./Maths/asm_unitvector.asm
   1+ ACCE              asm_tis2:
   2+ ACCE              ; ">TIS2 A = (A / Q * 96) so A = -96 ---- 96  range "
   3+ ACCE              ; ">DOES NOT DO SIGNED YET"
   4+ ACCE F5           	push af
   5+ ACCF E6 7F            and SignMask8Bit
   6+ ACD1 57           	ld d,a				;; d = A
   7+ ACD2 3A 27 99     	ld a,(varQ)
   8+ ACD5 5F           	ld e,a
   9+ ACD6 7A           	ld a,d
  10+ ACD7 BB           	cp e
  11+ ACD8 30 11        	jr nc, .tis2_set96	;; jump if a >= Q
  12+ ACDA 1E 60        	ld e, 96
  13+ ACDC ED 30        	mul				; de = d * 96 (also a * 96 )
  14+ ACDE EB           	ex de,hl
  15+ ACDF 3A 27 99     	ld a,(varQ)
  16+ ACE2 4F           	ld c,a
  17+ ACE3 CD BB AB     	call asm_div16
  18+ ACE6 F1           	pop af
  19+ ACE7 E6 80        	and $80
  20+ ACE9 B5           	or l
  21+ ACEA C9           	ret
  22+ ACEB              .tis2_set96:
  23+ ACEB F1           	pop af
  24+ ACEC E6 80        	and $80
  25+ ACEE F6 96        	or $96
  26+ ACF0 C9           	ret
  27+ ACF1
  28+ ACF1
  29+ ACF1              asm_unit_vector:
  30+ ACF1              squareregfx:
  31+ ACF1 3A 83 C0     	ld a,(UBnkXScaled)
  32+ ACF4 57           	ld d,a
  33+ ACF5 5F           	ld e,a
  34+ ACF6 ED 30        	mul
  35+ ACF8 EB           	ex de,hl
  36+ ACF9              squareregfy:
  37+ ACF9 3A 85 C0     	ld a, (UBnkYScaled)
  38+ ACFC 57           	ld d,a
  39+ ACFD 5F           	ld e,a
  40+ ACFE ED 30        	mul
  41+ AD00 19           	add hl,de
  42+ AD01              squareregfz:
  43+ AD01 3A 87 C0     	ld a, (UBnkZScaled)
  44+ AD04 57           	ld d,a
  45+ AD05 5F           	ld e,a
  46+ AD06 ED 30        	mul
  47+ AD08 19           	add hl,de
  48+ AD09 EB           	ex de,hl			; de de to number to root
  49+ AD0A              hlequsquareroot:
  50+ AD0A CD 9C AA     	call asm_sqrt		; hl = sqrt (fx^2 + fy^2 + fx^2)
  51+ AD0D E5           	push hl				; save it for work 3 copies
  52+ AD0E E5           	push hl				; save it for work
  53+ AD0F E5           	push hl				; save it for work
  54+ AD10              normfx:
  55+ AD10 3A 83 C0     	ld a,(UBnkXScaled)
  56+ AD13 E1           	pop hl				; get copy #1
  57+ AD14 7D           	ld a,l				; we assume only l had worthwhile data but could spill into h
  58+ AD15 4F           	ld c,a
  59+ AD16 CD CE AC     	call asm_tis2
  60+ AD19 32 83 C0     	ld (UBnkXScaled),a
  61+ AD1C              normfy:
  62+ AD1C 3A 85 C0     	ld a,(UBnkYScaled)
  63+ AD1F E1           	pop hl				; get copy #2
  64+ AD20 7D           	ld a,l
  65+ AD21 4F           	ld c,a
  66+ AD22 CD CE AC     	call asm_tis2
  67+ AD25 32 85 C0     	ld (UBnkYScaled),a
  68+ AD28              normfz:
  69+ AD28 3A 87 C0     	ld a,(UBnkZScaled)
  70+ AD2B E1           	pop hl				; get copy #2
  71+ AD2C 7D           	ld a,l
  72+ AD2D 4F           	ld c,a
  73+ AD2E CD CE AC     	call asm_tis2
  74+ AD31 32 87 C0     	ld (UBnkZScaled),a
  75+ AD34              asm_unit_vector_end:
  76+ AD34 C9           	ret
  77+ AD35
# file closed: ./Maths/asm_unitvector.asm
1115  AD35                  INCLUDE "./Maths/compare16.asm"
# file opened: ./Maths/compare16.asm
   1+ AD35              ; Input:
   2+ AD35              ;       HL = 1st value
   3+ AD35              ;       DE = 2nd value
   4+ AD35              ; Output:
   5+ AD35              ;       CF, ZF = results of comparison:
   6+ AD35              ;
   7+ AD35              ;               CF      ZF      Result
   8+ AD35              ;               -----------------------------------
   9+ AD35              ;               0       0       HL > DE
  10+ AD35              ;               0       1       HL == DE
  11+ AD35              ;               1       0       HL < DE
  12+ AD35              ;               1       1       Impossible
  13+ AD35              ;
  14+ AD35
  15+ AD35 E5           compare16HLDE:      push    hl
  16+ AD36 A7                               and     a
  17+ AD37 ED 52                            sbc     hl,de
  18+ AD39 E1                               pop     hl
  19+ AD3A C9                               ret
  20+ AD3B
  21+ AD3B              ; With compare signed we do ABS comparison
  22+ AD3B              ; this is used for view ports as we just want to know if its +/- out side of 90 degrees
  23+ AD3B
  24+ AD3B E5 D5        compare16HLDEABS:   push    hl,,de
  25+ AD3D 7C                               ld      a,h                                     ; Quick pass see of both the same sign
  26+ AD3E E6 7F                            and     SignMask8Bit
  27+ AD40 67                               ld      h,a
  28+ AD41 7A                               ld      a,d                                     ; Quick pass see of both the same sign
  29+ AD42 E6 7F                            and     SignMask8Bit
  30+ AD44 57                               ld      d,a
  31+ AD45 A7                               and     a
  32+ AD46 ED 52                            sbc     hl,de
  33+ AD48 D1 E1                            pop     hl,,de
  34+ AD4A C9                               ret
  35+ AD4B
  36+ AD4B
# file closed: ./Maths/compare16.asm
1116  AD4B                  INCLUDE "./Maths/negate16.asm"
# file opened: ./Maths/negate16.asm
   1+ AD4B              ;;----------------------------------------------------------------------------------------------------------------------
   2+ AD4B              ;; 16-bit negate
   3+ AD4B              negate16:
   4+ AD4B              negate16hl:
   5+ AD4B                      ; Input:
   6+ AD4B                      ;       HL = value
   7+ AD4B                      ; Output:
   8+ AD4B                      ;       HL = -value
   9+ AD4B                      ; Destroys:
  10+ AD4B                      ;       AF
  11+ AD4B                      ;
  12+ AD4B AF           	xor 	a
  13+ AD4C 95           	sub 	l
  14+ AD4D 6F           	ld 		l,a
  15+ AD4E 9F           	sbc 	a,a
  16+ AD4F 94           	sub 	h
  17+ AD50 67           	ld 		h,a
  18+ AD51 C9           	ret
  19+ AD52
  20+ AD52              negate16de:
  21+ AD52 AF           	xor 	a
  22+ AD53 93           	sub 	e
  23+ AD54 5F           	ld 		e,a
  24+ AD55 9F           	sbc 	a,a
  25+ AD56 92           	sub 	d
  26+ AD57 57           	ld 		d,a
  27+ AD58 C9           	ret
  28+ AD59
  29+ AD59              negate16bc:
  30+ AD59 AF           	xor 	a
  31+ AD5A 91           	sub 	c
  32+ AD5B 4F           	ld 		c,a
  33+ AD5C 9F           	sbc 	a,a
  34+ AD5D 90           	sub 	b
  35+ AD5E 47           	ld 		b,a
  36+ AD5F C9           	ret
  37+ AD60
  38+ AD60
  39+ AD60              macronegate16hl:	MACRO
  40+ AD60 ~            					xor 	a
  41+ AD60 ~            					sub 	l
  42+ AD60 ~            					ld 		l,a
  43+ AD60 ~            					sbc 	a,a
  44+ AD60 ~            					sub 	h
  45+ AD60 ~            					ld 		h,a
  46+ AD60              					ENDM
  47+ AD60
  48+ AD60              macronegate16de:	MACRO
  49+ AD60 ~            					xor 	a
  50+ AD60 ~                                sub 	e
  51+ AD60 ~                                ld 		e,a
  52+ AD60 ~                                sbc 	a,a
  53+ AD60 ~                                sub 	d
  54+ AD60 ~                                ld 		d,a
  55+ AD60              					ENDM
  56+ AD60              macronegate16bc:	MACRO
  57+ AD60 ~            					xor 	a
  58+ AD60 ~                                sub 	c
  59+ AD60 ~                                ld 		c,a
  60+ AD60 ~                                sbc 	a,a
  61+ AD60 ~                                sub 	b
  62+ AD60 ~                                ld 		b,a
  63+ AD60              					ENDM
  64+ AD60
  65+ AD60              macronegate16ix:	MACRO
  66+ AD60 ~            					xor 	a
  67+ AD60 ~                                sub 	ixl
  68+ AD60 ~                                ld 		ixl,a
  69+ AD60 ~                                sbc 	a,a
  70+ AD60 ~                                sub 	ixh
  71+ AD60 ~                                ld 		ixh,a
  72+ AD60              					ENDM
# file closed: ./Maths/negate16.asm
1117  AD60                  INCLUDE "./Maths/normalise96.asm"
# file opened: ./Maths/normalise96.asm
   1+ AD60 DD 68        AequAdivDmul96Unsg:     ld			ixl,b						; Get sign bit passed in as bit 7 in b
   2+ AD62                                      JumpIfAGTENusng d, TISXAccGTEQ			; if A >= Q then return with a 1 (unity i.e. 96) with the correct sign
   2+ AD62 BA          >                        cp     d
   2+ AD63 D2 78 AD    >                        jp		nc,TISXAccGTEQ
   3+ AD66 4F                                   ld			c,a
   4+ AD67 CD AD AB                             call		asm_div8
   5+ AD6A 79                                   ld			a,c							; a = result
   6+ AD6B CB 3F                                srl			a							; result / 4
   7+ AD6D 47                                   ld			b,a							; t = t /4
   8+ AD6E CB 3F                                srl			a							; result / 8
   9+ AD70 80                                   add			a,b							; result /8 + result /4
  10+ AD71 47                                   ld			b,a							; b = 3/8*Acc (max = 96)
  11+ AD72 DD 7D                                ld			a,ixl						; copy of Acc to look at sign bit
  12+ AD74 E6 80                                and			$80							; recover sign only
  13+ AD76 B0                                   or			b							; now put b back in so we have a leading sign bit (note not 2's compliment)
  14+ AD77 C9                                   ret
  15+ AD78              TISXAccGTEQ:
  16+ AD78              ;TI4:										;\ clean to +/- unity
  17+ AD78 DD 7D                                ld			a,ixl     					; get saved sign from b
  18+ AD7A E6 80                                and			$80							; copy of Acc
  19+ AD7C F6 60                                or			$60							; unity
  20+ AD7E C9                                   ret
  21+ AD7F
  22+ AD7F
  23+ AD7F
  24+ AD7F
  25+ AD7F              normaliseXX1596fast:
  26+ AD7F                  ; .NORM	\ -> &3BD6 \ Normalize 3-vector length of XX15
  27+ AD7F 3A 83 C0     	ld		a,(XX15)		    ; XX15+0
  28+ AD82 DD 67        	ld		ixh,a               ; ixh = signed x component
  29+ AD84 E6 7F        	and		SignMask8Bit                 ; a = unsigned version
  30+ AD86              N96SQX:
  31+ AD86              	inline_squde				; Use inline square for speed	objective is SQUA \ P.A =A7*A7 x^2
  31+ AD86 5F          >			ld	e,a
  31+ AD87 57          >			ld  d,a
  31+ AD88 ED 30       >			mul
  32+ AD8A 62           	ld		h,d					; h == varR d = varO e= varA
  33+ AD8B 6B           	ld		l,e					; l == varQ  															:: so HL = XX15[x]^2
  34+ AD8C              N96SQY:
  35+ AD8C 3A 84 C0     	ld		a,(XX15+1)
  36+ AD8F DD 6F        	ld		ixl,a               ; ixl = signed y componet
  37+ AD91 E6 7F        	and		SignMask8Bit                 ; = abs
  38+ AD93              	inline_squde				; Use inline square for speed	objective is SQUA \ P.A =A7*A7 x^2		:: so DE = XX15[y]^2
  38+ AD93 5F          >			ld	e,a
  38+ AD94 57          >			ld  d,a
  38+ AD95 ED 30       >			mul
  39+ AD97 19           	add		hl,de				; hl = XX15[x]^2 + XX15[y]^2
  40+ AD98              N96SQZ:
  41+ AD98 3A 85 C0     	ld		a,(XX15+2)			; Note comments say \ ZZ15+2  should be \ XX15+2 as per code
  42+ AD9B FD 67        	ld		iyh,a               ; iyh = signed
  43+ AD9D E6 7F        	and		SignMask8Bit                 ; unsigned
  44+ AD9F              	inline_squde				; Use inline square for speed	objective is SQUA \ P.A =A7*A7 x^2		:: so DE = XX15[z]^2
  44+ AD9F 5F          >			ld	e,a
  44+ ADA0 57          >			ld  d,a
  44+ ADA1 ED 30       >			mul
  45+ ADA3              N96SQADD:
  46+ ADA3 19           	add		hl,de				; hl = XX15[x]^2 + XX15[y]^2 + XX15[z]^2
  47+ ADA4 EB           	ex		de,hl				; hl => de ready for square root
  48+ ADA5              N96SQRT:
  49+ ADA5 CD 9C AA     	call	asm_sqrt			; hl = sqrt(XX15[x]^2 + XX15[y]^2 + XX15[z]^2), we just are interested in l which is the new Q
  50+ ADA8              N96NORMX:
  51+ ADA8 3A 83 C0     	ld		a,(XX15+0)
  52+ ADAB E6 7F        	and		SignMask8Bit
  53+ ADAD 4F           	ld		c,a
  54+ ADAE 55           	ld		d,l					; Q(i.e. l) => D, later we can just pop into de
  55+ ADAF CD D6 AF     	call	AequAdivDmul96	; does not use HL so we can retain it
  56+ ADB2 47           	ld		b,a				;++SGN
  57+ ADB3 DD 7C        	ld		a,ixh			;++SGN
  58+ ADB5 E6 80        	and		$80				;++SGN
  59+ ADB7 B0           	or		b				;++SGN
  60+ ADB8 32 83 C0     	ld		(XX15+0),a
  61+ ADBB              N96NORMY:
  62+ ADBB 3A 84 C0     	ld		a,(XX15+1)
  63+ ADBE E6 7F        	and		SignMask8Bit
  64+ ADC0 4F           	ld		c,a
  65+ ADC1 55           	ld		d,l					; Q(i.e. l) => D, later we can just pop into de
  66+ ADC2 CD D6 AF     	call	AequAdivDmul96     	; does not use HL so we can retain it
  67+ ADC5 47           	ld		b,a				;++SGN
  68+ ADC6 DD 7D        	ld		a,ixl			;++SGN
  69+ ADC8 E6 80        	and		$80				;++SGN
  70+ ADCA B0           	or		b				;++SGN
  71+ ADCB 32 84 C0     	ld		(XX15+1),a
  72+ ADCE              N96NORMZ:
  73+ ADCE 3A 85 C0     	ld		a,(XX15+2)
  74+ ADD1 E6 7F        	and		SignMask8Bit
  75+ ADD3 4F           	ld		c,a
  76+ ADD4 55           	ld		d,l					; Q(i.e. l) => D, later we can just pop into de
  77+ ADD5 CD D6 AF     	call	AequAdivDmul96	; does not use HL so we can retain it
  78+ ADD8 47           	ld		b,a				;++SGN
  79+ ADD9 FD 7C        	ld		a,iyh			;++SGN
  80+ ADDB E6 80        	and		$80				;++SGN
  81+ ADDD B0           	or		b				;++SGN
  82+ ADDE 32 85 C0     	ld		(XX15+2),a
  83+ ADE1 C9           	ret
  84+ ADE2
  85+ ADE2              ; Normalise vector
  86+ ADE2              ; scale Q = Sqrt (X^2 + Y^2 + Z^2)
  87+ ADE2              ; X = X / Q with 96 = 1 , i.e X = X / Q * 3/8
  88+ ADE2              ; Y = Y / Q with 96 = 1 , i.e Y = Y / Q * 3/8
  89+ ADE2              ; Z = Z / Q with 96 = 1 , i.e Z = Z / Q * 3/8
  90+ ADE2              ;
  91+ ADE2              ;
  92+ ADE2              ;
  93+ ADE2
  94+ ADE2              ; .NORM	\ -> &3BD6 \ Normalize 3-vector length of XX15
  95+ ADE2 3A 83 C0     normaliseXX1596:        ld		a,(XX15)		    ; XX15+0
  96+ ADE5                                      inline_squde				; Use inline square for speed	objective is SQUA \ P.A =A7*A7 x^2
  96+ ADE5 5F          >			ld	e,a
  96+ ADE6 57          >			ld  d,a
  96+ ADE7 ED 30       >			mul
  97+ ADE9 7A                                   ld		a,d
  98+ ADEA 32 28 99                             ld		(varR),a			; R	 \ hi sum later use b
  99+ ADED 7B                                   ld		a,e
 100+ ADEE 32 27 99                             ld		(varQ),a			; Q	 \ lo sum later use c
 101+ ADF1 32 24 98                             ld		(varP),a			; P	 \ lo sum later just drop
 102+ ADF4 3A 84 C0                             ld		a,(XX15+1)
 103+ ADF7                                      inline_squde				; Use inline square for speed	objective is SQUA \ P.A =A7*A7 x^2
 103+ ADF7 5F          >			ld	e,a
 103+ ADF8 57          >			ld  d,a
 103+ ADF9 ED 30       >			mul
 104+ ADFB 7A                                   ld		a,d
 105+ ADFC 32 43 99                             ld		(varT),a			; T	 \ hi sum
 106+ ADFF 7B                                   ld		a,e
 107+ AE00 32 24 98                             ld		(varP),a			; P	 \ lo sum
 108+ AE03 21 27 99                             ld		hl,varQ
 109+ AE06 8E                                   adc		a,(hl)				; +Q
 110+ AE07 32 27 99                             ld		(varQ),a			; =>Q
 111+ AE0A 3A 43 99                             ld		a,(varT)			;
 112+ AE0D 21 28 99                             ld		hl,varR
 113+ AE10 8E                                   adc		a,(hl)				;  R
 114+ AE11 32 28 99                             ld		(varR),a			; R
 115+ AE14 3A 85 C0                             ld		a,(XX15+2)			; Note comments say \ ZZ15+2  should be \ XX15+2 as per code
 116+ AE17                                      inline_squde				; Use inline square for speed	objective is SQUA \ P.A =A7*A7 x^2
 116+ AE17 5F          >			ld	e,a
 116+ AE18 57          >			ld  d,a
 116+ AE19 ED 30       >			mul
 117+ AE1B 7A                                   ld		a,d
 118+ AE1C 32 43 99                             ld		(varT),a			; T	 \ hi sum
 119+ AE1F 7B                                   ld		a,e
 120+ AE20 32 24 98                             ld		(varP),a			; P	 \ lo sum
 121+ AE23 21 27 99                             ld		hl,varQ
 122+ AE26 8E                                   adc		a,(hl)				; +Q
 123+ AE27 32 27 99                             ld		(varQ),a			; =>Q  xlo2 + ylo2 + zlo2
 124+ AE2A 3A 43 99                             ld		a,(varT)			; T temp Hi
 125+ AE2D 21 28 99                             ld		hl,varR
 126+ AE30 8E                                   adc		a,(hl)				; +R
 127+ AE31 32 28 99                             ld		(varR),a			; R
 128+ AE34 CD BF AA                             call	sqrtQR				; Q = SQR(Qlo.Rhi) Q <~127
 129+ AE37 3A 83 C0                             ld		a,(XX15+0)
 130+ AE3A CD D0 AF                             call	AequAdivQmul96		;  TIS2 \ *96/Q
 131+ AE3D 32 83 C0                             ld		(XX15+0),a
 132+ AE40 3A 84 C0                             ld		a,(XX15+1)
 133+ AE43 CD D0 AF                             call	AequAdivQmul96		;  TIS2 \ *96/Q
 134+ AE46 32 84 C0                             ld		(XX15+1),a
 135+ AE49 3A 84 C0                             ld		a,(XX15+1)
 136+ AE4C CD D0 AF                             call	AequAdivQmul96		;  TIS2 \ *96/Q
 137+ AE4F 32 84 C0                             ld		(XX15+1),a
 138+ AE52 C9                                   ret
 139+ AE53
 140+ AE53
# file closed: ./Maths/normalise96.asm
1118  AE53                  INCLUDE "./Maths/binary_to_decimal.asm"
# file opened: ./Maths/binary_to_decimal.asm
   1+ AE53              ;Number in hl to decimal ASCII
   2+ AE53              ;Thanks to z80 Bits
   3+ AE53              ;inputs:	hl = number to ASCII
   4+ AE53              ;example: hl=300 outputs '00300'
   5+ AE53              ;destroys: af, bc, hl, de used
   6+ AE53              DispHLtoDE:
   7+ AE53              ; "DispHL, writes HL to DE address"
   8+ AE53 01 F0 D8     	ld	bc,-10000
   9+ AE56 CD 6C AE     	call	Num1
  10+ AE59 01 18 FC     	ld	bc,-1000
  11+ AE5C CD 6C AE     	call	Num1
  12+ AE5F 01 9C FF     	ld	bc,-100
  13+ AE62 CD 6C AE     	call	Num1
  14+ AE65 0E F6        	ld	c,-10
  15+ AE67 CD 6C AE     	call	Num1
  16+ AE6A 0E FF        	ld	c,-1
  17+ AE6C              Num1:
  18+ AE6C 3E 2F        	ld	a,'0'-1
  19+ AE6E              .Num2:
  20+ AE6E 3C           	inc	a
  21+ AE6F 09           	add	hl,bc
  22+ AE70 38 FC        	jr	c,.Num2
  23+ AE72 ED 42        	sbc	hl,bc
  24+ AE74 12           	ld	(de),a
  25+ AE75 13           	inc	de
  26+ AE76 C9           	ret
  27+ AE77
  28+ AE77              DispAtoDE:
  29+ AE77 26 00        	ld h,0
  30+ AE79 6F           	ld l,a
  31+ AE7A C3 53 AE     	jp DispHLtoDE
  32+ AE7D
  33+ AE7D              DispPriceAtoDE:
  34+ AE7D 26 00        	ld h,0
  35+ AE7F 6F           	ld l,a
  36+ AE80 01 9C FF     	ld	bc,-100
  37+ AE83 CD 93 AE     	call	.NumLeadBlank1
  38+ AE86 0E F6        	ld	c,-10
  39+ AE88 CD 6C AE     	call	Num1
  40+ AE8B 3E 2E        	ld		a,'.'					; we could assume preformat but
  41+ AE8D 12           	ld		(de),a					; we can optimse that later TODO
  42+ AE8E 13           	inc		de						; with just an inc De
  43+ AE8F 0E FF        	ld	c,-1
  44+ AE91 18 D9        	jr		Num1
  45+ AE93              .NumLeadBlank1:
  46+ AE93 3E 2F        	ld	a,'0'-1
  47+ AE95              .NumLeadBlank2:
  48+ AE95 3C           	inc	a
  49+ AE96 09           	add	hl,bc
  50+ AE97 38 FC        	jr	c,.NumLeadBlank2
  51+ AE99 FE 30        	cp	'0'
  52+ AE9B 20 02        	jr	nz,.DontBlank
  53+ AE9D              .Blank:
  54+ AE9D 3E 20        	ld	a,' '
  55+ AE9F              .DontBlank:
  56+ AE9F ED 42        	sbc	hl,bc
  57+ AEA1 12           	ld	(de),a
  58+ AEA2 13           	inc	de
  59+ AEA3 C9           	ret
  60+ AEA4
  61+ AEA4              DispQtyAtoDE:
  62+ AEA4 FE 00        	cp	0
  63+ AEA6 28 23        	jr	z,.NoStock
  64+ AEA8 26 00        	ld h,0
  65+ AEAA 6F           	ld l,a
  66+ AEAB 01 9C FF     	ld	bc,-100
  67+ AEAE CD BA AE     	call	.NumLeadBlank1
  68+ AEB1 0E F6        	ld	c,-10
  69+ AEB3 CD BA AE     	call	.NumLeadBlank1
  70+ AEB6 0E FF        	ld	c,-1
  71+ AEB8 18 B2        	jr		Num1
  72+ AEBA              .NumLeadBlank1:
  73+ AEBA 3E 2F        	ld	a,'0'-1
  74+ AEBC              .NumLeadBlank2:
  75+ AEBC 3C           	inc	a
  76+ AEBD 09           	add	hl,bc
  77+ AEBE 38 FC        	jr	c,.NumLeadBlank2
  78+ AEC0 FE 30        	cp	'0'
  79+ AEC2 20 02        	jr	nz,.DontBlank
  80+ AEC4              .Blank:
  81+ AEC4 3E 20        	ld	a,' '
  82+ AEC6              .DontBlank:
  83+ AEC6 ED 42        	sbc	hl,bc
  84+ AEC8 12           	ld	(de),a
  85+ AEC9 13           	inc	de
  86+ AECA C9           	ret
  87+ AECB              .NoStock:
  88+ AECB 3E 20        	ld	a,' '
  89+ AECD 12           	ld	(de),a
  90+ AECE 13           	inc	de
  91+ AECF 12           	ld	(de),a
  92+ AED0 13           	inc	de
  93+ AED1 3E 2D        	ld	a,'-'
  94+ AED3 12           	ld	(de),a
  95+ AED4 13           	inc de
  96+ AED5 C9           	ret
  97+ AED6
  98+ AED6
  99+ AED6              ;### CLCN32 -> Converts 32Bit-Value in ASCII-String (terminated by 0)
 100+ AED6              ;### Input      DE,IX=32bit value, IY=destination address
 101+ AED6              ;### Output     IY=last char in destination string
 102+ AED6              ;### Destroyed AF,BC,DE,HL,IX
 103+ AED6 01 00 00 00  clcn32t dw 1,0,     10,0,     100,0,     1000,0,       10000,0
 103+ AEDA 0A 00 00 00
 103+ AEDE 64 00 00 00
 103+ AEE2 E8 03 00 00
 103+ AEE6 10 27 00 00
 104+ AEEA A0 86 01 00          dw $86a0,1, $4240,$0f, $9680,$98, $e100,$05f5, $ca00,$3b9a
 104+ AEEE 40 42 0F 00
 104+ AEF2 80 96 98 00
 104+ AEF6 00 E1 F5 05
 104+ AEFA 00 CA 9A 3B
 105+ AEFE 00 00 00 00  clcn32z ds 4
 106+ AF02
 107+ AF02              ; As per display but shifts final digit by 1 and puts in "." for 1 decimal place
 108+ AF02 CD 11 AF     DispDEIXtoIY1DP:        call    DispDEIXtoIY
 109+ AF05 FD 7E 00                             ld      a,(IY+0)
 110+ AF08 FD 77 01                             ld      (IY+1),a
 111+ AF0B 3E 2E                                ld      a,"."
 112+ AF0D FD 77 00                             ld      (IY+0),a
 113+ AF10 C9                                   ret
 114+ AF11
 115+ AF11 DD 22 FE AE  DispDEIXtoIY:           ld (clcn32z),ix
 116+ AF15 ED 53 00 AF                          ld (clcn32z+2),de
 117+ AF19 DD 21 FA AE                          ld ix,clcn32t+36
 118+ AF1D 06 09                                ld b,9
 119+ AF1F 0E 00                                ld c,0
 120+ AF21 3E 30        .clcn321:               ld a,'0'
 121+ AF23 B7                                   or a
 122+ AF24 DD 5E 00     .clcn322:               ld e,(ix+0)
 123+ AF27 DD 56 01                             ld d,(ix+1)
 124+ AF2A 2A FE AE                             ld hl,(clcn32z)
 125+ AF2D ED 52                                sbc hl,de
 126+ AF2F 22 FE AE                             ld (clcn32z),hl
 127+ AF32 DD 5E 02                             ld e,(ix+2)
 128+ AF35 DD 56 03                             ld d,(ix+3)
 129+ AF38 2A 00 AF                             ld hl,(clcn32z+2)
 130+ AF3B ED 52                                sbc hl,de
 131+ AF3D 22 00 AF                             ld (clcn32z+2),hl
 132+ AF40 38 04                                jr c,.clcn325
 133+ AF42 0C                                   inc c
 134+ AF43 3C                                   inc a
 135+ AF44 18 DE                                jr .clcn322
 136+ AF46 DD 5E 00     .clcn325:               ld e,(ix+0)
 137+ AF49 DD 56 01                             ld d,(ix+1)
 138+ AF4C 2A FE AE                             ld hl,(clcn32z)
 139+ AF4F 19                                   add hl,de
 140+ AF50 22 FE AE                             ld (clcn32z),hl
 141+ AF53 DD 5E 02                             ld e,(ix+2)
 142+ AF56 DD 56 03                             ld d,(ix+3)
 143+ AF59 2A 00 AF                             ld hl,(clcn32z+2)
 144+ AF5C ED 5A                                adc hl,de
 145+ AF5E 22 00 AF                             ld (clcn32z+2),hl
 146+ AF61 11 FC FF                             ld de,-4
 147+ AF64 DD 19                                add ix,de
 148+ AF66 0C                                   inc c
 149+ AF67 0D                                   dec c
 150+ AF68 28 05                                jr z,.clcn323
 151+ AF6A FD 77 00                             ld (iy+0),a
 152+ AF6D FD 23                                inc iy
 153+ AF6F 10 B0        .clcn323:               djnz .clcn321
 154+ AF71 3A FE AE                             ld a,(clcn32z)
 155+ AF74 C6 30                                add A,'0'
 156+ AF76 FD 77 00                             ld (iy+0),a
 157+ AF79 FD 36 01 00                          ld (iy+1),0
 158+ AF7D C9                                   ret
 159+ AF7E
# file closed: ./Maths/binary_to_decimal.asm
1119  AF7E                  include "./Maths/ADDHLDESignBC.asm"
# file opened: ./Maths/ADDHLDESignBC.asm
   1+ AF7E              ;; calcs HLB + DEC where B and C are signs
   2+ AF7E              ;; result HL with A as sign
   3+ AF7E              ;; special handling if result is zero forcign sign bit to be zero
   4+ AF7E 78           ADDHLDESignBC:          ld      a,b
   5+ AF7F E6 80                                and     SignOnly8Bit
   6+ AF81 A9                                   xor     c                           ;if b sign and c sign were different then bit 7 of a will be 1 which means
   7+ AF82                                      JumpIfNegative ADDHLDEsBCOppSGN     ;Signs are opposite there fore we can subtract to get difference
   7+ AF82 FA 90 AF    >                        jp		m, ADDHLDEsBCOppSGN
   8+ AF85 78           ADDHLDEsBCSameSigns:    ld      a,b
   9+ AF86 B1                                   or      c
  10+ AF87                                      JumpIfNegative ADDHLDEsBCSameNeg        ; optimisation so we can just do simple add if both positive
  10+ AF87 FA 8C AF    >                        jp		m, ADDHLDEsBCSameNeg
  11+ AF8A 19                                   add     hl,de                       ; both positive so a will already be zero
  12+ AF8B C9                                   ret
  13+ AF8C 19           ADDHLDEsBCSameNeg:      add     hl,de
  14+ AF8D 78                                   ld      a,b
  15+ AF8E B1                                   or      c                           ; now set bit for negative value, we won't bother with overflow for now TODO
  16+ AF8F C9                                   ret
  17+ AF90 B7           ADDHLDEsBCOppSGN:       or      a
  18+ AF91 ED 52                                sbc     hl,de
  19+ AF93 38 02                                jr      c,ADDHLDEsBCOppInvert
  20+ AF95 78           ADDHLDEsBCOppSGNNoCarry: ld      a,b                                               ; we got here so hl > de therefore we can just take hl's previous sign bit
  21+ AF96 C9                                   ret
  22+ AF97              ADDHLDEsBCOppInvert:    NegHL                         ; if result was zero then set sign to zero (which doing h or l will give us for free)
  22+ AF97 AF          >                    xor a
  22+ AF98 95          >                    sub l
  22+ AF99 6F          >                    ld l,a
  22+ AF9A 9F          >                    sbc a,a
  22+ AF9B 94          >                    sub h
  22+ AF9C 67          >                    ld h,a
  23+ AF9D 78                                   ld      a,b
  24+ AF9E EE 80                                xor     SignOnly8Bit                ; flip sign bit
  25+ AFA0 C9                                   ret
  26+ AFA1
# file closed: ./Maths/ADDHLDESignBC.asm
1120  AFA1              ;INCLUDE "badd_ll38.asm"
1121  AFA1              ;;INCLUDE "XX12equXX15byXX16.asm"
1122  AFA1                  INCLUDE "./Maths/Utilities/AequAdivQmul96-TIS2.asm"
# file opened: ./Maths/Utilities/AequAdivQmul96-TIS2.asm
   1+ AFA1              AequAdivQmul96ABS:      JumpIfAGTENusng d, .TIS2AccGTEQ			; if A >= Q then return with a 1 (unity i.e. 96) with the correct sign
   1+ AFA1 BA          >                        cp     d
   1+ AFA2 D2 BD AF    >                        jp		nc,.TIS2AccGTEQ
   2+ AFA5 06 FE                                ld			b,$FE						; division roll (replaced varT)
   3+ AFA7 CB 27        .TIS2RollTLoop:			sla			a
   4+ AFA9                                      JumpIfALTNusng d,.TIS2SkipSub           ; a < d so don;t subtract
   4+ AFA9 BA          >                        cp      d
   4+ AFAA DA C0 AF    >                        jp		c, .TIS2SkipSub
   5+ AFAD 9A                                   sbc			a,d							; do subtraction with carry
   6+ AFAE 37                                   scf
   7+ AFAF CB 10                                rl			b							; T rolled left to push bit out the end
   8+ AFB1 38 F4                                jr			c,.TIS2RollTLoop				; if we still have not hit the empty marker continue
   9+ AFB3 78           .TIS2SKIPCont:	        ld			a,b							; T
  10+ AFB4 CB 3F                                srl			a							; result / 2
  11+ AFB6 CB 3F                                srl			a							; result / 4
  12+ AFB8 47                                   ld			b,a							; t = t /4
  13+ AFB9 CB 3F                                srl			a							; result / 8
  14+ AFBB 80                                   add			a,b							; result /8 + result /4
  15+ AFBC C9                                   ret
  16+ AFBD 3E 60        .TIS2AccGTEQ:           ld			a,$60							; unity
  17+ AFBF C9                                   ret
  18+ AFC0 B7           .TIS2SkipSub:           or			a
  19+ AFC1 CB 10                                rl			b							; T rolled left to push bit out the end
  20+ AFC3 38 E2                                jr			c,.TIS2RollTLoop				; if we still have not hit the empty marker continue
  21+ AFC5 C3 B3 AF                             jp			.TIS2SKIPCont
  22+ AFC8
  23+ AFC8
  24+ AFC8              ; USES 			A DE BC
  25+ AFC8              ; DOES NOT USE 	HL
  26+ AFC8              TIS2962C:		; two's compliment entry point, exits not 2's compliment
  27+ AFC8 CB 7F        	bit			7,a
  28+ AFCA 28 04        	jr			z,AequAdivQmul96
  29+ AFCC ED 44        	neg										; revers 2s'c and just set neg bit
  30+ AFCE CB FF        	set			7,a
  31+ AFD0              ; Note negative numbers are bit 7 set not 2's compliment
  32+ AFD0              AequAdivQmul96:								; TIS296:			; .tis2 A = A /Q *96 (or A = A * 3/8 * Q) Reduce Acc in NORM routine i.e. *96/Q clamps at +- 96
  33+ AFD0              TIS2:
  34+ AFD0 4F           	ld			c,a							; copy of Acc
  35+ AFD1 3A 27 99     	ld			a,(varQ)
  36+ AFD4 57           	ld			d,a							; d = varQ
  37+ AFD5 79           	ld			a,c							; recover a
  38+ AFD6              AequAdivDmul96:
  39+ AFD6 4F           	ld			c,a							; copy of Acc as we need the sign, alternate entry point assuming D preloaded, wastes an "ld c,a" but simplifies code
  40+ AFD7 E6 7F        	and			SignMask8Bit				; ignore sign
  41+ AFD9              	JumpIfAGTENusng d, .TIS2AccGTEQ			; if A >= Q then return with a 1 (unity i.e. 96) with the correct sign
  41+ AFD9 BA          >                        cp     d
  41+ AFDA D2 FA AF    >                        jp		nc,.TIS2AccGTEQ
  42+ AFDD 06 FE        	ld			b,$FE						; division roll (replaced varT)
  43+ AFDF              .TIS2RollTLoop:									; .TIL2	; roll T
  44+ AFDF CB 27        	sla			a
  45+ AFE1              	JumpIfALTNusng d,.TIS2SkipSub            ; a < d so don;t subtract
  45+ AFE1 BA          >                        cp      d
  45+ AFE2 DA 00 B0    >                        jp		c, .TIS2SkipSub
  46+ AFE5 9A           	sbc			a,d							; do subtraction with carry
  47+ AFE6 37           	scf
  48+ AFE7 CB 10        	rl			b							; T rolled left to push bit out the end
  49+ AFE9 38 F4        	jr			c,.TIS2RollTLoop				; if we still have not hit the empty marker continue
  50+ AFEB              .TIS2SKIPCont:
  51+ AFEB 78           	ld			a,b							; T
  52+ AFEC CB 3F        	srl			a							; result / 2
  53+ AFEE CB 3F        	srl			a							; result / 4
  54+ AFF0 47           	ld			b,a							; t = t /4
  55+ AFF1 CB 3F        	srl			a							; result / 8
  56+ AFF3 80           	add			a,b							; result /8 + result /4
  57+ AFF4 47           	ld			b,a							; b = 3/8*Acc (max = 96)
  58+ AFF5 79           	ld			a,c							; copy of Acc to look at sign bit
  59+ AFF6 E6 80        	and			$80							; recover sign only
  60+ AFF8 B0           	or			b							; now put b back in so we have a leading sign bit (note not 2's compliment)
  61+ AFF9 C9           	ret
  62+ AFFA              .TIS2AccGTEQ:
  63+ AFFA              ;TI4:										;\ clean to +/- unity
  64+ AFFA 79           	ld			a,c
  65+ AFFB E6 80        	and			$80							; copy of Acc
  66+ AFFD F6 60        	or			$60							; unity
  67+ AFFF C9           	ret
  68+ B000              .TIS2SkipSub:
  69+ B000 B7           	or			a
  70+ B001 CB 10        	rl			b							; T rolled left to push bit out the end
  71+ B003 38 DA        	jr			c,.TIS2RollTLoop				; if we still have not hit the empty marker continue
  72+ B005 C3 EB AF     	jp			.TIS2SKIPCont
  73+ B008
# file closed: ./Maths/Utilities/AequAdivQmul96-TIS2.asm
1123  B008                  INCLUDE "./Maths/Utilities/AequAmulQdiv256-FMLTU.asm"
# file opened: ./Maths/Utilities/AequAmulQdiv256-FMLTU.asm
   1+ B008              fmltu:
   2+ B008              AequAmulQdiv256:
   3+ B008              ; "ASM_FMUTKL .FMLTU	\ -> &2847  \ A=A*Q/256unsg  Fast multiply"
   4+ B008 57           	ld	d,a
   5+ B009 3A 27 99     	ld	a,(varQ)
   6+ B00C 5F           	ld	e,a
   7+ B00D ED 30        	mul
   8+ B00F 7A           	ld	a,d				; we get only the high byte which is like doing a /256 if we think of a as low
   9+ B010 C9           	ret
  10+ B011
# file closed: ./Maths/Utilities/AequAmulQdiv256-FMLTU.asm
1124  B011                  INCLUDE "./Maths/Utilities/PRequSpeedDivZZdiv8-DV42-DV42IYH.asm"
# file opened: ./Maths/Utilities/PRequSpeedDivZZdiv8-DV42-DV42IYH.asm
   1+ B011              ; "DV42,DV42IYH DE = P.R, c = R"
   2+ B011              DV42IYH:									; as per DV42 but using iyl for Y reg
   3+ B011 21 07 9C     		ld		hl,varDustZ
   4+ B014 FD 7D        		ld		a,iyl
   5+ B016 ED 31        		add		hl,a
   6+ B018 7E           		ld		a,(hl)
   7+ B019 C3 25 B0     		jp		DV41
   8+ B01C              DV42:										; travel step of dust particle front/rear
   9+ B01C 21 07 9C     		ld		hl,varDustZ
  10+ B01F 3A 12 98     		ld		a,(regY)
  11+ B022 ED 31        		add		hl,a
  12+ B024 7E           		ld		a,(hl)						; a = SZ[y]
  13+ B025              DV41:										; P.R = speed/ (ZZ/8) dust left/right
  14+ B025 5F           		ld		e,a							; using E as Q var replacement
  15+ B026 3A 23 99     		ld		a,(DELTA)					; DELTA \ speed, how far has dust moved based on its z-coord.
  16+ B029              DVID4:										; P-R=A/Qunsg  \P.R = A/Q unsigned called by Hall
  17+ B029 06 08        		ld		b,8							; counter
  18+ B02B CB 27        		sla		a							;
  19+ B02D 57           		ld		d,a							; use d for - p = delta * 2
  20+ B02E AF           		xor		a
  21+ B02F              DVL4:										; counter x loop (b reg)
  22+ B02F CB 17        		rl		a							; a = a * 2
  23+ B031 38 03        		jr		c,DV8						; jump on carry
  24+ B033 BB           		cp		e							; var Q
  25+ B034 38 02        		jr		c,DV5						; skip subtraction
  26+ B036              DV8:
  27+ B036 9B           		sbc		a,e							; a = a - q (with carry)
  28+ B037 37           		scf									;  carry gets set
  29+ B038              DV5:										; skipped subtraction
  30+ B038 CB 12        		rl		d							; d (P hi)
  31+ B03A 10 F3        		djnz	DVL4						; dec b and loop loop X, hi left in P.
  32+ B03C              .CalcRemainder:								; BFRDIV R=A*256/Q
  33+ B03C              ; Note we are not going to call LL28+4 but inline code here:
  34+ B03C 06 FE        		ld		b,$FE						; remainder R for AofQ *256/Q
  35+ B03E 4F           		ld		c,a							; use c as R var
  36+ B03F              .RollRemainder:
  37+ B03F CB 27        		sla		a
  38+ B041 38 11        		jr		c,.Reduce					; if a >> generates carry reduce
  39+ B043 B8           		cp		b							; a < q?
  40+ B044 30 01        		jr		nc,.DontSBC
  41+ B046              .DoSBC:										; a is < q
  42+ B046 98           		sbc		a,b							; 	a -= q
  43+ B047              .DontSBC:
  44+ B047 CB 11        		rl		c							; r << 1
  45+ B049 38 F4        		jr		c, .RollRemainder			; if rol generated a carry, continue
  46+ B04B 79           		ld		a,c
  47+ B04C 32 28 99     		ld		(varR),a					; for backwards compat
  48+ B04F 7A           		ld		a,d
  49+ B050 32 24 98     		ld		(varP),a
  50+ B053 C9           		ret									; R (c) left with remainder
  51+ B054              .Reduce:									; a geneated a carry
  52+ B054 98           		sbc		a,b							; a = a - (q +1)
  53+ B055 37           		scf									; set carry flag for rl
  54+ B056 CB 11        		rl		c							; r << 1 briging in carry
  55+ B058 38 E5        		jr		c,	.RollRemainder			; if a carry fell off bit 7 then repeat
  56+ B05A 79           		ld		a,c
  57+ B05B 32 28 99     		ld		(varR),a					; for backwards compat
  58+ B05E 7A           		ld		a,d
  59+ B05F 32 24 98     		ld		(varP),a
  60+ B062 C9           		ret
  61+ B063              .AnswerTooBig:
  62+ B063 0E FF        		ld		c,$FF						; arse its too big
  63+ B065 79           		ld		a,c
  64+ B066 32 28 99     		ld		(varR),a					; for backwards compat
  65+ B069 7A           		ld		a,d
  66+ B06A 32 24 98     		ld		(varP),a
  67+ B06D C9           		ret
  68+ B06E
# file closed: ./Maths/Utilities/PRequSpeedDivZZdiv8-DV42-DV42IYH.asm
1125  B06E                  INCLUDE "./Maths/Utilities/AequDmulEdiv256usgn-DEFMUTL.asm"
# file opened: ./Maths/Utilities/AequDmulEdiv256usgn-DEFMUTL.asm
   1+ B06E
   2+ B06E              asm_defmutl:
   3+ B06E              AequDmulEdiv256usgn:
   4+ B06E              ; "ASM_FMUTKL .FMLTU	\ -> &2847  \ A=D*E/256unsg  Fast multiply"
   5+ B06E ED 30        	mul
   6+ B070 7A           	ld	a,d				; we get only the high byte which is like doing a /256 if we think of a as low
   7+ B071 C9           	ret
   8+ B072
   9+ B072
# file closed: ./Maths/Utilities/AequDmulEdiv256usgn-DEFMUTL.asm
1126  B072              ;INCLUDE "AP2equAPmulQunsgEorP-MLTU2.asm"
1127  B072              ;INCLUDE "APequPmulQUnsg-MULTU.asm"
1128  B072              ;INCLUDE "APequPmulX-MU11.asm"
1129  B072                  INCLUDE "./Maths/Utilities/APequQmulA-MULT1.asm"
# file opened: ./Maths/Utilities/APequQmulA-MULT1.asm
   1+ B072              APequQmulA:
   2+ B072              asm_mult1:
   3+ B072              ; "ASM_MULT1 (DE) A(hi).P(lo) = Q * A first part of MAD, multiply and add. Visited Quite often. A=hi P = lo also returns result in DE"
   4+ B072 FE 00        	cp	0
   5+ B074 28 1F        	jr	z,.mul0			; quick exit if its Q * 0
   6+ B076 5F           	ld	e,a
   7+ B077 3A 27 99     	ld	a,(varQ)
   8+ B07A 57           	ld	d,a
   9+ B07B FE 00        	cp	0				; compare a
  10+ B07D 28 16        	jr	z,.mul0			; quick exit if its 0 * a
  11+ B07F AB           	xor	e				; -- = + +- = - -+ = - ++ = +
  12+ B080 E6 80        	and $80				; get the resultant sign and save into b
  13+ B082 47           	ld	b,a
  14+ B083 7A           	ld	a,d
  15+ B084 E6 7F        	and	SignMask8Bit	; now strip off sign bits
  16+ B086 57           	ld	d,a
  17+ B087 7B           	ld	a,e
  18+ B088 E6 7F        	and SignMask8Bit
  19+ B08A 5F           	ld	e,a
  20+ B08B ED 30        	mul					; zxn de = d * e
  21+ B08D 7B           	ld	a,e
  22+ B08E 32 24 98     	ld	(varP),a		; p = lo
  23+ B091 7A           	ld	a,d				; a = hi
  24+ B092 B0           	or	b				; de goes to a and varP also re-do sign bit
  25+ B093 57           	ld	d,a				; we will work with de having result as we may bin vars later
  26+ B094 C9           	ret
  27+ B095              .mul0:
  28+ B095 AF           	xor	a
  29+ B096 32 24 98     	ld	(varP),a
  30+ B099 57           	ld	d,a
  31+ B09A 5F           	ld  e,a
  32+ B09B C9           	ret
  33+ B09C
# file closed: ./Maths/Utilities/APequQmulA-MULT1.asm
1130  B09C                  INCLUDE "./Maths/Utilities/badd_ll38.asm"
# file opened: ./Maths/Utilities/badd_ll38.asm
   1+ B09C              baddll38:				;.LL38	\ -> &4812 \ BADD(S)A=R+Q(SA) \ byte add (subtract)   (Sign S)A = R + Q*(Sign from A^S)
   2+ B09C              SAEquSRPlusAQ:
   3+ B09C              ; Calculate the following between sign-magnitude numbers:
   4+ B09C              ;   (S A) = (S R) + (A Q)
   5+ B09C              ; where the sign bytes only contain the sign bits, not magnitudes.
   6+ B09C              ; note goes wrong at <-127 >128 so need 16 bit version
   7+ B09C              ; so need to fix the issue with carry flag not returning a fault correctly
   8+ B09C              LL38:
   9+ B09C              ;	ld		d,a
  10+ B09C              ;	ld		a,(varQ)
  11+ B09C              ;	ld		e,a
  12+ B09C              ;	ld		a,(varS)
  13+ B09C              ;	ld		h,a
  14+ B09C              ;	ld		a,(varR)
  15+ B09C              ;	ld		l,a
  16+ B09C              ;	call	ADDHLDESignedv3
  17+ B09C              ;	ld		a,h
  18+ B09C              ;	ld		(varS),a
  19+ B09C              ;	ld		a,l
  20+ B09C              ;	ret
  21+ B09C              ; calculation table
  22+ B09C              ;   R     Q    Op            Sign calc
  23+ B09C              ;	10    5    Add           +    sign same add R sign
  24+ B09C              ;   -10   5    ABS Sub       -    sign diff ABS R > S sub R sign
  25+ B09C              ;   10   -5    ABS sub       +    sign diff ABS R > S sub R sign
  26+ B09C              ;	-10  -5    ABS Add       -    sign same add R sign
  27+ B09C              ;   5    10    Add           +    sign same add R sign
  28+ B09C              ;   -5   10    Swap ABS SUB  +    sign diff ABS Q > R swap SUB Q sign
  29+ B09C              ;   5    -10   swap ABS Sub  -    sign diff ABS Q > R swap SUB R sign
  30+ B09C              ;   -5   -10   ABS  add      -    sign same add R sign
  31+ B09C
  32+ B09C              ;   -10   5    ABS Sub       -    sign diff ABS R > S sub R sign
  33+ B09C              ;   10   -5    ABS sub       +    sign diff ABS R > S sub R sign
  34+ B09C              ;   -5   10    Swap ABS SUB  +    sign diff ABS Q > R swap SUB Q sign
  35+ B09C              ;   5    -10   swap ABS Sub  -    sign diff ABS Q > R swap SUB R sign
  36+ B09C
  37+ B09C
  38+ B09C              ; Calculate sign for Q from A and varS
  39+ B09C 21 29 99     	ld		hl,varS							;
  40+ B09F AE           	xor		(hl)							;  EOR &83		\ S	\ sign of operator is A xor S
  41+ B0A0 FA AB B0     	jp		m,.LL39Subtraction  			; if signs are different then we have subtraction
  42+ B0A3 3A 27 99     	ld		a,(varQ)						; Q	\ else addition, S already correct
  43+ B0A6 21 28 99     	ld		hl,varR
  44+ B0A9 86           	add		a,(hl)							; a = Q + R
  45+ B0AA C9           	ret										; Done carry set if overflow
  46+ B0AB              .LL39Subtraction:							; 1 byte subtraction (S)A = R-Q
  47+ B0AB 3A 28 99     	ld		a,(varR)						; a = R
  48+ B0AE 21 27 99     	ld		hl,varQ                         ; Q
  49+ B0B1              ;--	JumpIfALTMemHLusng LL39SwapSubtraction	; if a < (hl) then do LL39SwapSubtraction
  50+ B0B1              	ClearCarryFlag                          ; we need to not use carry (6502 is different that it uses the compliement)
  50+ B0B1 B7          >                        or a
  51+ B0B2 9E           	sbc		a,(hl)							; A = R - Q which as R >= Q will always be a positive result
  52+ B0B3 38 01            jr      c,.LL39SignCorrection
  53+ B0B5              ;--    jr      a,.LL39ResultZero
  54+ B0B5              ;--   JumpIfNegative LL39SignCorrection		; if there was underflow we have to correct sign
  55+ B0B5              ;--	or		a								; Clear carry flag to say result is correct
  56+ B0B5 C9           	ret
  57+ B0B6              .LL39SignCorrection:
  58+ B0B6 FE 00            cp      0                               ; if its 0 then neg will affect flag so we just zero result to save compute
  59+ B0B8 28 0E            jr      z,.LL39ResultZero
  60+ B0BA ED 44            neg                                     ; flip A 2'c value to positive
  61+ B0BC 08           	ex		af,af'							; save A temporarily
  62+ B0BD 3A 29 99     	ld		a,(varS)						; Flip Sign bit in varS
  63+ B0C0 EE 80        	xor		$80							    ;
  64+ B0C2 32 29 99     	ld		(varS),a                        ; flip sign bit of a
  65+ B0C5 08           	ex		af,af'                          ; get back a which is the result
  66+ B0C6                  ClearCarryFlag                          ; clear carry as NEG instrunction sets it for non zero
  66+ B0C6 B7          >                        or a
  67+ B0C7 C9           	ret
  68+ B0C8              .LL39ResultZero:
  69+ B0C8 32 29 99         ld      (varS),a                        ; a is zero at this stage so set sign as well
  70+ B0CB                  ClearCarryFlag                          ; clear carry
  70+ B0CB B7          >                        or a
  71+ B0CC C9               ret
  72+ B0CD              ;--LL39SwapSubtraction:
  73+ B0CD              ;--	push	bc
  74+ B0CD              ;--	ld		b,a
  75+ B0CD              ;--	ld		a,(hl)
  76+ B0CD              ;--	sub		b
  77+ B0CD              ;--	pop		bc
  78+ B0CD              ;--	ex		af,af'							; do we flip here or negate. i think its flip as its overflowed unsigned
  79+ B0CD              ;--	ld		a,(varS)
  80+ B0CD              ;--	xor		$80
  81+ B0CD              ;--	ld		(varS),a
  82+ B0CD              ;--	ex		af,af'
  83+ B0CD              ;--	ret
  84+ B0CD
  85+ B0CD              ;;;;	baddll38:				;.LL38	\ -> &4812 \ BADD(S)A=R+Q(SA) \ byte add (subtract)   (Sign S)A = R + Q*(Sign from A^S)
  86+ B0CD              ;;;;; Calculate the following between sign-magnitude numbers:
  87+ B0CD              ;;;;;   (S A) = (S R) + (A Q)
  88+ B0CD              ;;;;; where the sign bytes only contain the sign bits, not magnitudes.
  89+ B0CD              ;;;;; note goes wrong at <-127 >128 so need 16 bit version
  90+ B0CD              ;;;;LL38:
  91+ B0CD              ;;;;; Calculate sign for Q from A and varS
  92+ B0CD              ;;;;	ld		hl,varS							;
  93+ B0CD              ;;;;	xor		(hl)							;  EOR &83		\ S	\ sign of operator is A xor S
  94+ B0CD              ;;;;	jp		m,.LL39Subtraction  			; if signs are different then we have subtraction
  95+ B0CD              ;;;;	ld		a,(varQ)						; Q	\ else addition, S already correct
  96+ B0CD              ;;;;	ld		hl,varR
  97+ B0CD              ;;;;	add		a,(hl)							; a = Q + R
  98+ B0CD              ;;;;	ret										; Done
  99+ B0CD              ;;;;.LL39Subtraction:							; 1 byte subtraction (S)A = R-Q
 100+ B0CD              ;;;;	ld		hl,varQ                         ;
 101+ B0CD              ;;;;	ld		a,(hl)
 102+ B0CD              ;;;;	JumpIfAGTENusng 128,LL39Sub16bit		; does this need to be 16 bit
 103+ B0CD              ;;;;	ld		a,(varR)						;
 104+ B0CD              ;;;;	ClearCarryFlag                          ; we need to not use carry (6502 is different that it uses the compliement)
 105+ B0CD              ;;;;	sbc		a,(hl)							; A = R - Q
 106+ B0CD              ;;;;	jr		c,.SignCorrection				; if there was underflow we have to correct sign
 107+ B0CD              ;;;;	or		a								; Clear carry flag to say result is correct
 108+ B0CD              ;;;;	ret
 109+ B0CD              ;;;;.SignCorrection:
 110+ B0CD              ;;;;    neg                                     ; flip A 2'c value to positive
 111+ B0CD              ;;;;	ex		af,af'							; save A temporarily
 112+ B0CD              ;;;;	ld		a,(varS)						; Flip Sign bit in varS
 113+ B0CD              ;;;;	xor		$80							    ;
 114+ B0CD              ;;;;	ld		(varS),a                        ; flip sign bit of a
 115+ B0CD              ;;;;	ex		af,af'                          ; get back a which is the result
 116+ B0CD              ;;;;	ret
 117+ B0CD              ;;;;LL39Sub16Bit:
 118+ B0CD              ;;;;	ld		e,a
 119+ B0CD              ;;;;	ld		d,0
 120+ B0CD              ;;;;	ld		a,(varR)
 121+ B0CD              ;;;;	ld		l,a
 122+ B0CD              ;;;;	ld		h,0
 123+ B0CD              ;;;;	ClearCarryFlag
 124+ B0CD              ;;;;	sbc		hl,de
 125+ B0CD              ;;;;	jr		c,.SignCorrection16bit
 126+ B0CD              ;;;;	bit		7,h
 127+ B0CD              ;;;;	jr		z,.GoodToReturn
 128+ B0CD              ;;;;.Needtonegate:
 129+ B0CD              ;;;;	macronegate16hl
 130+ B0CD              ;;;;.GoodToReturn
 131+ B0CD              ;;;;	ld		a,l
 132+ B0CD              ;;;;	or		a
 133+ B0CD              ;;;;	ret
 134+ B0CD              ;;;;.SignCorrection16bit:
 135+ B0CD              ;;;;	macronegate16hl
 136+ B0CD              ;;;;	ld		a,(varS)						; Flip Sign bit in varS
 137+ B0CD              ;;;;	xor		$80							    ;
 138+ B0CD              ;;;;	ld		(varS),a                        ; flip sign bit of a
 139+ B0CD              ;;;;	ld		a,l
 140+ B0CD              ;;;;	ret
 141+ B0CD
 142+ B0CD
# file closed: ./Maths/Utilities/badd_ll38.asm
1131  B0CD                  INCLUDE "./Maths/Utilities/moveship4-MVS4.asm"
# file opened: ./Maths/Utilities/moveship4-MVS4.asm
   1+ B0CD              ; Note comparing hl vs iY, you need at least 3 incs or decs for hl to be slower
   2+ B0CD              ; it may be faster though if we can use hl to avoid memory actions if needed
   3+ B0CD              ; need to optimise mad as push hl pop hl and use de doesn't really improve speed
   4+ B0CD
   5+ B0CD
   6+ B0CD              moveship4Yreg:
   7+ B0CD 3A 12 98     		ld		a,(regY)
   8+ B0D0 47           		ld		b,a
   9+ B0D1              moveship4breg:
  10+ B0D1              		; b = Y index, 9 = nosev, 15 = roofv 21 = sidev
  11+ B0D1              MVS4PitchAlphaRollBeta:
  12+ B0D1              MVS4:										;.MVS4	\ -> &52A1 \ Moveship4, Y is matrix row, pitch&roll update to coordinates
  13+ B0D1 3A 3D 98     		ld		a,(ALPHA)					;  ALPHA
  14+ B0D4 32 27 99     		ld		(varQ),a					; player ship's roll Q = Alpha
  15+ B0D7 21 0E C0     		ld		hl,UBnKxsgn
  16+ B0DA 78           		ld		a,b							; from
  17+ B0DB ED 31        		add		hl,a
  18+ B0DD 7E           		ld		a,(hl)						; INWK+2,Y
  19+ B0DE 32 28 99     		ld		(varR),a					; R  \ lo
  20+ B0E1 23           		inc		hl
  21+ B0E2 7E           		ld		a,(hl)						; INWK+3,Y
  22+ B0E3 32 29 99     		ld		(varS),a					; S  \ hi		SR = nosev_y (or axis y)
  23+ B0E6 2B           		dec		hl
  24+ B0E7 2B           		dec		hl
  25+ B0E8 2B           		dec		hl							;
  26+ B0E9 7E           		ld		a,(hl)						; INWK+0,Y
  27+ B0EA 32 24 98     		ld		(varP),a					; P  \ over-written	 P = nosevx lo
  28+ B0ED 23           		inc		hl
  29+ B0EE 7E           		ld		a,(hl)						; INWK+1,Y
  30+ B0EF EE 80        		xor		$80							; flip sign  AP = nosevx * - 1
  31+ B0F1 CD 47 A9     		call	madXAequQmulAaddRS			; MAD	\ DE = X.A = alpha*INWK+1,Y + INWK+2to3,Y
  32+ B0F4 23                   inc     hl
  33+ B0F5 23                   inc     hl
  34+ B0F6 77                   ld      (hl),a                      ; INWK+3,Y \ hi
  35+ B0F7 2B                   dec     hl
  36+ B0F8 3A 11 98             ld      a,(regX)
  37+ B0FB 77                   ld      (hl),a                      ; INWK+2,Y \ Y=Y-aX   \ their comment
  38+ B0FC 32 24 98             ld      (varP),a                    ;  P
  39+ B0FF 2B                   dec     hl
  40+ B100 2B                   dec     hl
  41+ B101 7E                   ld      a,(hl)                      ; INWK+0,Y
  42+ B102 32 28 99             ld      (varR),a                    ;  R	\ lo
  43+ B105 23                   inc     hl
  44+ B106 7E                   ld      a,(hl)                      ;  INWK+1,Y
  45+ B107 32 29 99             ld      (varS),a                    ; S	\ hi
  46+ B10A 23                   inc     hl
  47+ B10B 23                   inc     hl
  48+ B10C 7E                   ld      a,(hl)                      ; INWK+3,Y
  49+ B10D CD 47 A9             call    madXAequQmulAaddRS          ; MAD	\ X.A = alpha*INWK+3,Y + INWK+0to1,Y
  50+ B110 2B                   dec     hl
  51+ B111 2B                   dec     hl
  52+ B112 77                   ld      (hl),a                      ; INWK+1,Y  \ hi
  53+ B113 3A 11 98             ld      a,(regX)
  54+ B116 2B                   dec     hl
  55+ B117 77                   ld      (hl),a                      ; INWK+0,Y  \ X=X+aY   \ their comment
  56+ B118 32 24 98             ld      (varP),a                    ; P
  57+ B11B 3A 2F 98             ld      a,(BETA)                    ; BETA
  58+ B11E 32 27 99             ld      (varQ),a                    ; Q	\ player ship's pitch
  59+ B121 23                   inc     hl
  60+ B122 23                   inc     hl
  61+ B123 7E                   ld      a,(hl)                      ; INWK+2,Y
  62+ B124 32 28 99             ld      (varR),a                    ; R	\ lo
  63+ B127 23                   inc     hl
  64+ B128 7E                   ld      a,(hl)                      ; INWK+3,Y
  65+ B129 32 29 99             ld      (varS),a                    ; S	\ hi
  66+ B12C 23                   inc     hl
  67+ B12D 7E                   ld      a,(hl)                      ; INWK+4,Y
  68+ B12E 32 24 98             ld      (varP),a                    ; P	\ lo
  69+ B131 23                   inc     hl
  70+ B132 7E                   ld      a,(hl)                      ; INWK+5,Y
  71+ B133 EE 80                xor     $80                         ; flip sign hi
  72+ B135 CD 47 A9             call    madXAequQmulAaddRS          ; MAD	\ X.A =-beta*INWK+5,Y + INWK+2to3,Y
  73+ B138 2B                   dec     hl
  74+ B139 2B                   dec     hl
  75+ B13A 77                   ld      (hl),a                      ; INWK+3,Y \ hi
  76+ B13B 3A 11 98             ld      a,(regX)
  77+ B13E 2B                   dec     hl
  78+ B13F 77                   ld      (hl),a                      ; INWK+2,Y \ Y=Y-bZ  \ their comment
  79+ B140 32 24 98             ld      (varP),a                    ; P
  80+ B143 23                   inc     hl
  81+ B144 23                   inc     hl
  82+ B145 7E                   ld      a,(hl)                      ; INWK+4,Y
  83+ B146 32 28 99             ld      (varR),a                    ; R	\ lo
  84+ B149 23                   inc     hl
  85+ B14A 7E                   ld      a,(hl)                      ; INWK+5,Y
  86+ B14B 32 29 99             ld      (varS),a                    ; S	\ hi
  87+ B14E 2B                   dec     hl
  88+ B14F 2B                   dec     hl
  89+ B150 7E                   ld      a,(hl)                      ; INWK+3,Y
  90+ B151 CD 47 A9             call    madXAequQmulAaddRS          ; MAD	\ X.A = beta*INWK+3,Y + INWK+4,5,Y
  91+ B154 23                   inc     hl
  92+ B155 23                   inc     hl
  93+ B156 77                   ld      (hl),a                      ; INWK+5,Y \ hi
  94+ B157 3A 11 98             ld      a,(regX)
  95+ B15A 2B                   dec     hl
  96+ B15B 77                   ld      (hl),a                      ; INWK+4,Y \ Z=Z+bY   \ their comment
  97+ B15C C9                   ret
  98+ B15D
  99+ B15D
# file closed: ./Maths/Utilities/moveship4-MVS4.asm
1132  B15D              ;INCLUDE "MoveShip5-MVS5.asm"
1133  B15D              ;INCLUDE "PAequAmulQusgn-MLU2.asm"
1134  B15D              ;INCLUDE "PAequDustYIdxYmulQ-MLU1.asm"
1135  B15D              ;INCLUDE "PlanetP12addInwkX-MVT6.asm"
1136  B15D                  INCLUDE "./Maths/Utilities/RequAmul256divQ-BFRDIV.asm"
# file opened: ./Maths/Utilities/RequAmul256divQ-BFRDIV.asm
   1+ B15D              ;;;LL28:
   2+ B15D              ;;;    ld      c,a                         ;
   3+ B15D              ;;;    ld      a,(varQ)                    ;
   4+ B15D              ;;;    ld      b,a                         ;
   5+ B15D              ;;;    ld      a,c                         ; Get varQ into b and retain c
   6+ B15D              ;;;RequAmul256divB:                        ;
   7+ B15D              ;;;LL28Breg:
   8+ B15D              ;;;; "BFRDIV R = (A * 256 / Q)  byte from remainder of division, not signed a = a, b = q, c = r"
   9+ B15D              ;;;	cp		b							; Check A >= Q
  10+ B15D              ;;;	jr		nc, .AnswerTooBig			; A >= Q? yes too big
  11+ B15D              ;;;.CalcRemainder:
  12+ B15D              ;;;	ld		c, 	$FE						; set R to $FE
  13+ B15D              ;;;.RollRemainder:
  14+ B15D              ;;;	sla		a
  15+ B15D              ;;;	jr		c,.Reduce					; if a >> generates carry reduce
  16+ B15D              ;;;	cp		b							; a < q?
  17+ B15D              ;;;	jr		nc,.DontSBC
  18+ B15D              ;;;.DoSBC:									; a is < q
  19+ B15D              ;;;	sbc		a,b							; 	a -= q
  20+ B15D              ;;;.DontSBC:
  21+ B15D              ;;;	rl		c							; r << 1
  22+ B15D              ;;;	jr		c, .RollRemainder			; if rol generated a carry, continue
  23+ B15D              ;;;    ld      a,c
  24+ B15D              ;;;    ld      (varR),a
  25+ B15D              ;;;	ret									; R (c) left with remainder
  26+ B15D              ;;;.Reduce:								; a geneated a carry
  27+ B15D              ;;;	sbc		a,b							; a = a - (q +1)
  28+ B15D              ;;;	scf									; set carry flag for rl
  29+ B15D              ;;;	rl		c							; r << 1 briging in carry
  30+ B15D              ;;;	jr		c,	.RollRemainder			; if a carry fell off bit 7 then repeat
  31+ B15D              ;;;    ld      a,c
  32+ B15D              ;;;    ld      (varR),a
  33+ B15D              ;;;	ret
  34+ B15D              ;;;.AnswerTooBig:
  35+ B15D              ;;;	ld	    c,$FF							; arse its too big
  36+ B15D              ;;;    ld      a,c
  37+ B15D              ;;;    ld      (varR),a
  38+ B15D              ;;;	ret
  39+ B15D
  40+ B15D              BCequAmul256DivC:
  41+ B15D 59             ld    e,c
  42+ B15E 67             ld    h,a
  43+ B15F 2E 00          ld    l,0
  44+ B161              AdivEDivide:                             ; this routine performs the operation BC=HL/E
  45+ B161 7B             ld a,e                                 ; checking the divisor; returning if it is zero
  46+ B162 B7             or a                                   ; from this time on the carry is cleared
  47+ B163 C8             ret z
  48+ B164 01 FF FF       ld bc,-1                               ; BC is used to accumulate the result
  49+ B167 16 00          ld d,0                                 ; clearing D, so DE holds the divisor
  50+ B169              AdivEDivLoop:                            ; subtracting DE from HL until the first overflow
  51+ B169 ED 52          sbc hl,de                              ; since the carry is zero, SBC works as if it was a SUB
  52+ B16B 03             inc bc                                 ;  note that this instruction does not alter the flags
  53+ B16C 30 FB          jr nc,AdivEDivLoop                     ; no carry means that there was no overflow
  54+ B16E C9             ret
  55+ B16F
  56+ B16F              HL_Div_C:
  57+ B16F              ; Integer divides HL by C
  58+ B16F              ; Result in HL, remainder in A
  59+ B16F              ; Clobbers F, B
  60+ B16F 06 10                ld b,16
  61+ B171 AF                   xor a
  62+ B172              HL_Div_C_Loop:
  63+ B172 29                   add hl,hl
  64+ B173 17                   rla
  65+ B174 B9                   cp c
  66+ B175 38 02                jr c,HL_DivC_Skip
  67+ B177 91                   sub c
  68+ B178 2C                   inc l
  69+ B179              HL_DivC_Skip:
  70+ B179 10 F7                djnz HL_Div_C_Loop
  71+ B17B 7D                   ld   a,l
  72+ B17C 32 28 99             ld  (varR),a
  73+ B17F C9                   ret
  74+ B180
  75+ B180
  76+ B180
  77+ B180              ; Entry point if varQ is populated with demoninator
  78+ B180              RequAmul256divQ:
  79+ B180              BFRDIV:
  80+ B180 F5           		push	af
  81+ B181 3A 27 99     		ld		a,(varQ)
  82+ B184 4F           		ld		c,a
  83+ B185 F1           		pop		af
  84+ B186 FE 00        		cp		0
  85+ B188 CA 9F B1     		jp		z, HLDIVC_0_BY	; fast exit if numerator is 0
  86+ B18B              RequAmul256divC:
  87+ B18B 2E 00        		ld		l,0
  88+ B18D 67           		ld		h,a
  89+ B18E              HL_Div_Cold:						; fast entry point if C and HL are already set
  90+ B18E 06 10        		ld b,16
  91+ B190 AF           		xor a
  92+ B191              LOOPPOINT:
  93+ B191 29           		add hl,hl
  94+ B192 17           		rla
  95+ B193 B9           		cp c
  96+ B194 38 02        		jr c,SKIPINCSUB
  97+ B196 2C           		inc l
  98+ B197 91           		sub c
  99+ B198              SKIPINCSUB:
 100+ B198 10 F7        		djnz LOOPPOINT
 101+ B19A 7D           		ld		a,l
 102+ B19B 32 28 99     		ld 		(varR),a
 103+ B19E C9           		ret
 104+ B19F              HLDIVC_0_BY:
 105+ B19F 32 28 99     		ld		(varR),a
 106+ B1A2 C9           		ret
 107+ B1A3              ;	push	af
 108+ B1A3              ;	ld		a,b
 109+ B1A3              ;	ld		(varQ),a
 110+ B1A3              ;	pop		af
 111+ B1A3              ;RequAmul256divQ:
 112+ B1A3              ;BFRDIV:									;BFRDIV R=A*256/Q   byte from remainder of division
 113+ B1A3              ;	ld		hl,varQ
 114+ B1A3              ;	JumpIfAGTENusng	(hl),LL2			;  is A >=  Q ?, if yes, answer too big for 1 byte, R=#&FF
 115+ B1A3              ;	ld		b,$FE						; b = X
 116+ B1A3              ;	ld		c,a							; c = R	div roll counter
 117+ B1A3              ;LL31:									; roll R
 118+ B1A3              ;	sla		a
 119+ B1A3              ;	jr		c,LL29						; hop to Reduce
 120+ B1A3              ;	JumpIfALTNusng (hl)					; Q skip sbc if a < Q
 121+ B1A3              ;	sbc		a,(hl)						; a = a - Q
 122+ B1A3              ;	rl		c							; rotate R left
 123+ B1A3              ;	jr		c,LL31						; loop if R poped out a carry bit
 124+ B1A3              ;	jr		LL2Good
 125+ B1A3              ;LL29:									; Reduce
 126+ B1A3              ;	sbc		a,(hl)
 127+ B1A3              ;	scf
 128+ B1A3              ;	rl		c							; roll a carry flag into R
 129+ B1A3              ;	jr		c,LL31						;  loop R
 130+ B1A3              ;	jr		LL2Good
 131+ B1A3              ;LL2:
 132+ B1A3              ;	ld		c,$FF
 133+ B1A3              ;LL2Good:
 134+ B1A3              ;	ld		a,c
 135+ B1A3              ;	ld		(varR),a
 136+ B1A3              ;	ret
 137+ B1A3
# file closed: ./Maths/Utilities/RequAmul256divQ-BFRDIV.asm
1137  B1A3                  INCLUDE "./Maths/Utilities/RequAdivQ-LL61.asm"
# file opened: ./Maths/Utilities/RequAdivQ-LL61.asm
   1+ B1A3              RequAdivQ:
   2+ B1A3              	; R = A/Q, U = remainder, code looked a little odd as if R is reminader and U = result
   3+ B1A3              LL61:										; Handling division R=A/Q for case further down
   4+ B1A3 4F           	ld		c,a								; c = A
   5+ B1A4 3A 27 99     	ld		a,(varQ)						; test for divide by 0
   6+ B1A7 FE 00        	cp		0
   7+ B1A9 28 16        	jr		z,LL84							; divide by zero error
   8+ B1AB 57           	ld		d,a								; now we can do C/D
   9+ B1AC 06 08            ld b,8
  10+ B1AE AF               xor a
  11+ B1AF              LL63:										; roll divide loop
  12+ B1AF CB 21            sla c
  13+ B1B1 17               rla
  14+ B1B2 BA               cp d
  15+ B1B3 38 02            jr c,LL64
  16+ B1B5 0C               inc c
  17+ B1B6 92               sub d
  18+ B1B7              LL64:
  19+ B1B7 10 F6            djnz LL63
  20+ B1B9 32 26 99     	ld	(varU),a							; store remainder in U
  21+ B1BC 79           	ld	a,c
  22+ B1BD 32 28 99     	ld	(varR),a							; store remainder in R
  23+ B1C0 C9               ret
  24+ B1C1              LL84:										; div error  R=U=#5
  25+ B1C1 3E 32        	ld		a,50
  26+ B1C3 32 28 99     	ld		(varR),a
  27+ B1C6 32 26 99     	ld		(varU),a
  28+ B1C9 C9           	ret
  29+ B1CA
# file closed: ./Maths/Utilities/RequAdivQ-LL61.asm
1138  B1CA              ;    INCLUDE "./Maths/Utilities/RSequABSrs-LL129.asm"
1139  B1CA                  INCLUDE "./Maths/Utilities/RSequQmulA-MULT12.asm"
# file opened: ./Maths/Utilities/RSequQmulA-MULT12.asm
   1+ B1CA              asm_mult12:
   2+ B1CA              RSequQmulA:
   3+ B1CA              ; "asm_ult12  R.S = Q * A \ visited quite often S = hi, R = lo, odd that its opposite to mult1"
   4+ B1CA CD 72 B0     	call APequQmulA
   5+ B1CD 08           	ex 	af,af'
   6+ B1CE 7A           	ld	a,d
   7+ B1CF 32 29 99     	ld	(varS),a
   8+ B1D2 7B           	ld	a,e
   9+ B1D3 32 28 99     	ld	(varR),a
  10+ B1D6 08           	ex 	af,af'
  11+ B1D7 C9           	ret
  12+ B1D8
# file closed: ./Maths/Utilities/RSequQmulA-MULT12.asm
1140  B1D8              ;INCLUDE "SwapRotmapXY-PUS1.asm"
1141  B1D8                  INCLUDE "./Maths/Utilities/tidy.asm"
# file opened: ./Maths/Utilities/tidy.asm
   1+ B1D8              ;rotmap0xLo: DB	0				; INWK +9
   2+ B1D8              ;rotmap0xHi: DB	0				; INWK +10
   3+ B1D8              ;rotmat0yLo: DB	0				; INWK +11
   4+ B1D8              ;rotmat0yHi: DB	0				; INWK +12
   5+ B1D8              ;rotmat0zLo:	DB 	0				; INWK +13
   6+ B1D8              ;rotmat0zHi:	DB 	0				; INWK +14
   7+ B1D8              ;rotmap1xLo: DB	0				; INWK +15
   8+ B1D8              ;rotmap1xHi:	DB	0				; INWK +16
   9+ B1D8              ;rotmat1yLo:	DB	0				; INWK +17
  10+ B1D8              ;rotmat1yHi:	DB	0				; INWK +18
  11+ B1D8              ;rotmat1zLo:	DB	0				; INWK +19
  12+ B1D8              ;rotmat1zHi:	DB	0				; INWK +20
  13+ B1D8              ;rotmat2xLo: DB	0				; INWK +21
  14+ B1D8              ;rotmat2xHi:	DB	0				; INWK +22
  15+ B1D8              ;rotmat2yLo:	DB	0				; INWK +23
  16+ B1D8              ;rotmat2yHi:	DB	0				; INWK +24
  17+ B1D8              ;rotmat2zLo:	DB	0				; INWK +25
  18+ B1D8              ;rotmat2zHi:	DB	0				; INWK +26
  19+ B1D8              ;
  20+ B1D8              ;rotmatFx	equ	rotmat0xHi
  21+ B1D8              ;rotmatFy	equ	rotmat0yHi
  22+ B1D8              ;rotmatFz	equ	rotmat0zHi
  23+ B1D8              ;rotmatUx	equ	rotmat1xHi
  24+ B1D8              ;rotmatUy	equ	rotmat1yHi
  25+ B1D8              ;rotmatUz	equ	rotmat1zHi
  26+ B1D8              ;
  27+ B1D8              ;inwkarray			equ		INWK+10
  28+ B1D8
  29+ B1D8                  include "./Universe/Ships/CopyRotMattoXX15.asm"
# file opened: ././Universe/Ships/CopyRotMattoXX15.asm
   1++B1D8              CopyRotMatNoseVtoXX15:
   2++B1D8                      ldCopyByte  UBnkrotmatNosevX+1 ,XX15VecX
   2++B1D8 3A 22 C0    >                        ld       a,(UBnkrotmatNosevX+1)
   2++B1DB 32 83 C0    >                        ld       (XX15VecX),a
   3++B1DE                      ldCopyByte  UBnkrotmatNosevY+1, XX15VecY
   3++B1DE 3A 24 C0    >                        ld       a,(UBnkrotmatNosevY+1)
   3++B1E1 32 84 C0    >                        ld       (XX15VecY),a
   4++B1E4                      ldCopyByte  UBnkrotmatNosevZ+1 ,XX15VecZ
   4++B1E4 3A 26 C0    >                        ld       a,(UBnkrotmatNosevZ+1)
   4++B1E7 32 85 C0    >                        ld       (XX15VecZ),a
   5++B1EA C9                   ret
   6++B1EB
   7++B1EB              CopyRotMatRoofVtoXX15:
   8++B1EB                      ldCopyByte  UBnkrotmatRoofvX+1 ,XX15VecX
   8++B1EB 3A 1C C0    >                        ld       a,(UBnkrotmatRoofvX+1)
   8++B1EE 32 83 C0    >                        ld       (XX15VecX),a
   9++B1F1                      ldCopyByte  UBnkrotmatRoofvY+1, XX15VecY
   9++B1F1 3A 1E C0    >                        ld       a,(UBnkrotmatRoofvY+1)
   9++B1F4 32 84 C0    >                        ld       (XX15VecY),a
  10++B1F7                      ldCopyByte  UBnkrotmatRoofvZ+1 ,XX15VecZ
  10++B1F7 3A 20 C0    >                        ld       a,(UBnkrotmatRoofvZ+1)
  10++B1FA 32 85 C0    >                        ld       (XX15VecZ),a
  11++B1FD C9                   ret
  12++B1FE
  13++B1FE              CopyRotMatSideVtoXX15:
  14++B1FE                      ldCopyByte  UBnkrotmatSidevX+1 ,XX15VecX
  14++B1FE 3A 16 C0    >                        ld       a,(UBnkrotmatSidevX+1)
  14++B201 32 83 C0    >                        ld       (XX15VecX),a
  15++B204                      ldCopyByte  UBnkrotmatSidevY+1, XX15VecY
  15++B204 3A 18 C0    >                        ld       a,(UBnkrotmatSidevY+1)
  15++B207 32 84 C0    >                        ld       (XX15VecY),a
  16++B20A                      ldCopyByte  UBnkrotmatSidevZ+1 ,XX15VecZ
  16++B20A 3A 1A C0    >                        ld       a,(UBnkrotmatSidevZ+1)
  16++B20D 32 85 C0    >                        ld       (XX15VecZ),a
  17++B210 C9                   ret
  18++B211
# file closed: ././Universe/Ships/CopyRotMattoXX15.asm
  30+ B211
  31+ B211                  include "./Universe/Ships/CopyXX15toRotMat.asm"
# file opened: ././Universe/Ships/CopyXX15toRotMat.asm
   1++B211              CopyXX15toRotMatNoseV:
   2++B211                      ldCopyByte  XX15VecX, UBnkrotmatNosevX+1
   2++B211 3A 83 C0    >                        ld       a,(XX15VecX)
   2++B214 32 22 C0    >                        ld       (UBnkrotmatNosevX+1),a
   3++B217                      ldCopyByte  XX15VecY, UBnkrotmatNosevY+1
   3++B217 3A 84 C0    >                        ld       a,(XX15VecY)
   3++B21A 32 24 C0    >                        ld       (UBnkrotmatNosevY+1),a
   4++B21D                      ldCopyByte  XX15VecZ, UBnkrotmatNosevZ+1
   4++B21D 3A 85 C0    >                        ld       a,(XX15VecZ)
   4++B220 32 26 C0    >                        ld       (UBnkrotmatNosevZ+1),a
   5++B223 C9                   ret
   6++B224
   7++B224              CopyXX15toRotMatRoofV:
   8++B224                      ldCopyByte  XX15VecX, UBnkrotmatRoofvX+1
   8++B224 3A 83 C0    >                        ld       a,(XX15VecX)
   8++B227 32 1C C0    >                        ld       (UBnkrotmatRoofvX+1),a
   9++B22A                      ldCopyByte  XX15VecY, UBnkrotmatRoofvY+1
   9++B22A 3A 84 C0    >                        ld       a,(XX15VecY)
   9++B22D 32 1E C0    >                        ld       (UBnkrotmatRoofvY+1),a
  10++B230                      ldCopyByte  XX15VecZ, UBnkrotmatRoofvZ+1
  10++B230 3A 85 C0    >                        ld       a,(XX15VecZ)
  10++B233 32 20 C0    >                        ld       (UBnkrotmatRoofvZ+1),a
  11++B236 C9                   ret
  12++B237
  13++B237              CopyXX15toRotMatSideV:
  14++B237                      ldCopyByte  XX15VecX, UBnkrotmatSidevX+1
  14++B237 3A 83 C0    >                        ld       a,(XX15VecX)
  14++B23A 32 16 C0    >                        ld       (UBnkrotmatSidevX+1),a
  15++B23D                      ldCopyByte  XX15VecY, UBnkrotmatSidevY+1
  15++B23D 3A 84 C0    >                        ld       a,(XX15VecY)
  15++B240 32 18 C0    >                        ld       (UBnkrotmatSidevY+1),a
  16++B243                      ldCopyByte  XX15VecZ, UBnkrotmatSidevZ+1
  16++B243 3A 85 C0    >                        ld       a,(XX15VecZ)
  16++B246 32 1A C0    >                        ld       (UBnkrotmatSidevZ+1),a
  17++B249 C9                   ret
  18++B24A
# file closed: ././Universe/Ships/CopyXX15toRotMat.asm
  32+ B24A
  33+ B24A              TidySub1:									;.TIS1	\ -> &293B  \ Tidy subroutine 1  X.A =  (-X*A  + (R.S))/96
  34+ B24A              		; b = regX on entry
  35+ B24A              TIS1Prep:									;.TIS1	\ -> &293B  \ Tidy subroutine 1 using B register = X
  36+ B24A 08           		ex		af,af'
  37+ B24B 78           		ld		a,b
  38+ B24C 32 27 99     		ld		(varQ),a
  39+ B24F 08           		ex		af,af'
  40+ B250 EE 80        		xor		$80							;	 flip sign of Acc
  41+ B252 CD 47 A9     		call	madXAequQmulAaddRS			; \ MAD \ multiply and add (X,A) =  -X*A  + (R,S)
  42+ B255              ; USES 				A BC E
  43+ B255              ; DOES NOT USE		D HL
  44+ B255              Tis1Div96:							   		; .DVID96	\ Their comment A=A/96: answer is A*255/96
  45+ B255 4F           		ld		c,a							; Store sign bit in  ct (we use e reg for that)
  46+ B256 E6 80        		and		SignOnly8Bit						; ..
  47+ B258 5F           		ld		e,a							; ..
  48+ B259 79           		ld		a,c							; a = high byte again with sign bit cleared
  49+ B25A E6 7F        		and		SignMask8Bit							; ..
  50+ B25C 06 FE        		ld		b,$FE						; slide counter T1
  51+ B25E              TIS1RollTLoop								; roll T1  clamp Acc to #96 for rotation matrix unity
  52+ B25E CB 27        		sla		a
  53+ B260              		JumpIfALTNusng $60, TIS1SkipSub
  53+ B260 FE 60       >                        cp      $60
  53+ B262 DA 6F B2    >                        jp		c, TIS1SkipSub
  54+ B265 DE 60        		sbc		a,$60							; subtract 96
  55+ B267 37           		scf
  56+ B268 CB 10        		rl		b							;  T1
  57+ B26A 38 F2        		jr		c,TIS1RollTLoop
  58+ B26C              TIS1KIPCont:
  59+ B26C 78           		ld		a,b							;   T1
  60+ B26D B3           		or		e							;   restore T sign
  61+ B26E C9           		ret
  62+ B26F              TIS1SkipSub:
  63+ B26F B7           	or			a
  64+ B270 CB 10        	rl			b							; T rolled left to push bit out the end
  65+ B272 38 EA        	jr			c,TIS1RollTLoop				; if we still have not hit the empty marker continue
  66+ B274 C3 6C B2     	jp			TIS1KIPCont
  67+ B277
  68+ B277              ;.TIDY	\ -> &4679 \ Orthogonalize rotation matrix that uses 0x60 as unity returns INWK(16,18,20) = INWK(12*18+14*20, 10*16+14*20, 10*16+12*18) / INWK(10,12,14)
  69+ B277              ; Ux,Uy,Uz = -(FyUy+FzUz, FxUx+FzUz, FxUx+FyUy)/ Fx,Fy,Fz
  70+ B277
  71+ B277
  72+ B277
  73+ B277
  74+ B277              TidyRotYSmall:
  75+ B277 CD A2 B3     		call	CalcRoofvZ
  76+ B27A 32 20 C0     		ld		(UBnkrotmatRoofvZ+1),a			; set roofvy hi?? Says roofz TODO
  77+ B27D C3 B3 B2     		jp		NormaliseRoofV
  78+ B280
  79+ B280              TidyRotXSmall:
  80+ B280 AF           		xor		a
  81+ B281 47           		ld		b,a
  82+ B282 3A 24 C0     		ld		a,(UBnkrotmatNosevY+1)			; nosev_y
  83+ B285 E6 60        		and		%01100000
  84+ B287 CA 77 B2     		jp		z,TidyRotYSmall
  85+ B28A 3A 26 C0     		ld		a,(UBnkrotmatNosevZ+1)			; nosev z
  86+ B28D 47           		ld		b,a							; b = regX for now
  87+ B28E 3A 1E C0     		ld		a,(UBnkrotmatRoofvY+1)			; roofv y
  88+ B291 CD 68 B3     		call	CalcRoofvY					; Set (roofvy= (nosev_x * roofv_x + nosev_z * roofv_z) / nosev_y, Q -= nosev_z
  89+ B294 32 1E C0     		ld		(UBnkrotmatRoofvY+1),a			; set roofvy hi
  90+ B297 C3 B3 B2     		jp		NormaliseRoofV
  91+ B29A              ; TIDY is broken
  92+ B29A              TIDY:
  93+ B29A DD 01                break
  94+ B29C              ORTHOGALISE:
  95+ B29C              ;-- NormaliseNosev
  96+ B29C CD D8 B1     		call	CopyRotMatNoseVtoXX15
  97+ B29F CD 7F AD     		call	normaliseXX1596fast			; normalise z hi, its really TIS3
  98+ B2A2 CD 11 B2     		call	CopyXX15toRotMatNoseV
  99+ B2A5              .CheckNXSmall:
 100+ B2A5 3A 22 C0     		ld		a,(UBnkrotmatNosevX+1)
 101+ B2A8 E6 60        		and		%01100000					; check top two magnitude bits
 102+ B2AA CA 80 B2     		jp		z,TidyRotXSmall
 103+ B2AD              .RotXIsBig:
 104+ B2AD CD 2E B3             call	CalcRoofvX
 105+ B2B0 32 1C C0     		ld		(UBnkrotmatRoofvX+1),a    	; set roofvx hi
 106+ B2B3              NormaliseRoofV:
 107+ B2B3 CD EB B1     		call	CopyRotMatRoofVtoXX15		; xx15 = roofv
 108+ B2B6 CD 7F AD     		call	normaliseXX1596fast			; normalise roof
 109+ B2B9              ;calc sidev x
 110+ B2B9 CD 24 B2     		call	CopyXX15toRotMatRoofV		; get back normalised version
 111+ B2BC 3A 22 C0     		ld		a,(UBnkrotmatNosevX+1)
 112+ B2BF 32 27 99     		ld		(varQ),a					; q = nosev_y
 113+ B2C2 3A 20 C0     		ld		a,(UBnkrotmatRoofvZ+1)	     ;roov z
 114+ B2C5 CD CA B1     		call	RSequQmulA
 115+ B2C8 3A 26 C0     		ld		a,(UBnkrotmatNosevZ+1)		; nosev z
 116+ B2CB 47           		ld		b,a							; b = regX for now
 117+ B2CC 3A 1E C0     		ld		a,(UBnkrotmatRoofvY+1)	    ; roofv y
 118+ B2CF CD 4A B2     		call	TidySub1					; Set (A ?)= (-nosev_z * roofv_y + nosev_y * roofv_z) / 96, Q -= nosev_z
 119+ B2D2                      JumpIfAIsZero NormSideXNoNeg
 119+ B2D2 A7          >                        and a   ; cp 0 - changed to and a for optimisation but affects other flags
 119+ B2D3 CA D8 B2    >                        jp	z, NormSideXNoNeg
 120+ B2D6 EE 80        		xor		$80							; flip a to get -sidev_x
 121+ B2D8              NormSideXNoNeg:
 122+ B2D8 32 16 C0     		ld		(UBnkrotmatSidevX+1),a
 123+ B2DB              ;calc sidev y
 124+ B2DB 3A 26 C0     		ld		a,(UBnkrotmatNosevZ+1)			; nosev z
 125+ B2DE 32 27 99     		ld		(varQ),a
 126+ B2E1 3A 1C C0     		ld		a,(UBnkrotmatRoofvX+1)			; roofv x
 127+ B2E4 CD CA B1     		call	RSequQmulA
 128+ B2E7 3A 22 C0     		ld		a,(UBnkrotmatNosevX+1)			        ; nosev x
 129+ B2EA 47           		ld		b,a							; b = regX for now
 130+ B2EB 3A 20 C0     		ld		a,(UBnkrotmatRoofvZ+1)			; roofv z
 131+ B2EE CD 4A B2     		call	TidySub1					; Set (A ?)= (-nosev_z * roofv_y + nosev_y * roofv_z) / 96, Q -= nosev_z
 132+ B2F1                      JumpIfAIsZero NormSideYNoNeg
 132+ B2F1 A7          >                        and a   ; cp 0 - changed to and a for optimisation but affects other flags
 132+ B2F2 CA F7 B2    >                        jp	z, NormSideYNoNeg
 133+ B2F5 EE 80        		xor		$80							; flip a to get -sidev_y
 134+ B2F7              NormSideYNoNeg:
 135+ B2F7 32 24 C0     		ld		(UBnkrotmatNosevY+1),a
 136+ B2FA              ;calc sidev z
 137+ B2FA 3A 22 C0     		ld		a,(UBnkrotmatNosevX+1)			; nosev x
 138+ B2FD 32 27 99     		ld		(varQ),a
 139+ B300 3A 1E C0     		ld		a,(UBnkrotmatRoofvY+1)			; roofv y
 140+ B303 CD CA B1     		call	RSequQmulA
 141+ B306 3A 24 C0     		ld		a,(UBnkrotmatNosevY+1)			; nosev y
 142+ B309 47           		ld		b,a							; b = regX for now
 143+ B30A 3A 1C C0     		ld		a,(UBnkrotmatRoofvX+1)			; roofv x
 144+ B30D CD 4A B2     		call	TidySub1					; Set (A ?)= (-nosev_z * roofv_y + nosev_y * roofv_z) / 96, Q -= nosev_z
 145+ B310                      JumpIfAIsZero NormSideZNoNeg
 145+ B310 A7          >                        and a   ; cp 0 - changed to and a for optimisation but affects other flags
 145+ B311 CA 16 B3    >                        jp	z, NormSideZNoNeg
 146+ B314 EE 80        		xor		$80							; flip a to get -sidev_y
 147+ B316              NormSideZNoNeg:
 148+ B316 32 18 C0     		ld		(UBnkrotmatSidevY+1),a ;TODO SHoudl this be Y??
 149+ B319              .ClearLoBytes:
 150+ B319 21 21 C0     		ld		hl,UBnkrotmatNosevX
 151+ B31C 06 09        		ld		b,9
 152+ B31E AF                   xor     a
 153+ B31F              .ClearLoLoop:
 154+ B31F 77           		ld		(hl),a						; zero out lo bytes
 155+ B320 23           		inc		hl
 156+ B321 23           		inc		hl
 157+ B322 10 FB        		djnz	.ClearLoLoop
 158+ B324 CD FE B1     		call	CopyRotMatSideVtoXX15		; xx15 = roofv
 159+ B327 CD 7F AD     		call	normaliseXX1596fast			; normalise roof
 160+ B32A              ;calc sidev x
 161+ B32A CD 37 B2     		call	CopyXX15toRotMatSideV		; get back normalised version
 162+ B32D
 163+ B32D C9           		ret
 164+ B32E
 165+ B32E
 166+ B32E
 167+ B32E              ;;;;;;;;.CheckNYSmall:
 168+ B32E              ;;;;;;;;		ld		a,(XX15+2)					; first check z zero, if so we have to do Y
 169+ B32E              ;;;;;;;;		and		$7F
 170+ B32E              ;;;;;;;;		cp		0
 171+ B32E              ;;;;;;;;		jp		z,Tidy1RZ
 172+ B32E              ;;;;;;;;		ld		a,(XX15+1)					; now we can do a realistic check of RY
 173+ B32E              ;;;;;;;;		cp 		0							; we can't end up with divide by 0 for RY
 174+ B32E              ;;;;;;;;		jp		z,Tidy1RZ					; We can't have all values of vector 0 so we must do RZ
 175+ B32E              ;;;;;;;;		and		%01100000					; check top two magnitude bits
 176+ B32E              ;;;;;;;;		jp		z,Tidy1RY					; and tidy based on roofy
 177+ B32E              ;;;;;;;;.DoNZ:
 178+ B32E              ;;;;;;;;		jp		Tidy1RZ						; else we tidy based on roofz
 179+ B32E              ;;;;;;;;;---RE ENTRY POINT -------------------------------------
 180+ B32E              ;;;;;;;;NormaliseRoofv:
 181+ B32E              ;;;;;;;;		call	CopyRotMatRoofVtoXX15		; xx15 = roofv
 182+ B32E              ;;;;;;;;		push	bc
 183+ B32E              ;;;;;;;;		call	normaliseXX1596fast			; normalise
 184+ B32E              ;;;;;;;;		pop		bc
 185+ B32E              ;;;;;;;;		call	CopyXX15toRotMatRoofV		; get back normalised version
 186+ B32E              ;;;;;;;;ProcessSidev:
 187+ B32E              ;;;;;;;;; -- SIDEV X
 188+ B32E              ;;;;;;;;		ldCopyByte	nosev_z+1, varQ         ; use ixh as Q later
 189+ B32E              ;;;;;;;;		ld		a,(UBnkrotmatRoofvY+1)				; a = roofv_hi
 190+ B32E              ;;;;;;;;		push	bc
 191+ B32E              ;;;;;;;;		call	RSequQmulA					; RS = Q * A MULT12
 192+ B32E              ;;;;;;;;		pop		bc
 193+ B32E              ;;;;;;;;		ld		a,(UBnkrotmatNosevY+1)
 194+ B32E              ;;;;;;;;		ld		b,a							; set x (b) to value of nosev_z
 195+ B32E              ;;;;;;;;		ld		a,(UBnkrotmatRoofvZ+1)				; a = roofv_y hi
 196+ B32E              ;;;;;;;;		push	bc
 197+ B32E              ;;;;;;;;		call	TidySub1					; set A (-nosev_z * roofv_y + nosev_y * roofv_z) / 96, This also sets Q = nosev_z TIS1
 198+ B32E              ;;;;;;;;		pop		bc
 199+ B32E              ;;;;;;;;		ld		(UBnkrotmatSidevX+1),a				; sidev_x = = (nosev_z * roofv_y - nosev_y * roofv_z) / 96
 200+ B32E              ;;;;;;;;; -- SIDEV Y
 201+ B32E              ;;;;;;;;		ldCopyByte	UBnkrotmatNosevX+1, varQ         ; use ixh as Q later
 202+ B32E              ;;;;;;;;		ld		a,(UBnkrotmatRoofvZ+1)				;
 203+ B32E              ;;;;;;;;		push	bc
 204+ B32E              ;;;;;;;;		call	RSequQmulA					; RS = Q * A MULT12 MULT12
 205+ B32E              ;;;;;;;;		pop		bc
 206+ B32E              ;;;;;;;;		ld		a,(UBnkrotmatNosevZ+1)
 207+ B32E              ;;;;;;;;		ld		b,a
 208+ B32E              ;;;;;;;;		ld		a,(UBnkrotmatRoofvX+1)
 209+ B32E              ;;;;;;;;		push	bc
 210+ B32E              ;;;;;;;;		call	TidySub1						; set A (-nosev_z * roofv_y + nosev_y * roofv_z) / 96, This also sets Q = nosev_z
 211+ B32E              ;;;;;;;;		pop		bc
 212+ B32E              ;;;;;;;;		ld		(sidev_y+1),a				; sidev_y  = (nosev_x * roofv_z - nosev_z * roofv_x) / 96
 213+ B32E              ;;;;;;;;		ld		a,(UBnkrotmatRoofvY+1)
 214+ B32E              ;;;;;;;;		push	bc
 215+ B32E              ;;;;;;;;; -- SIDEV Z
 216+ B32E              ;;;;;;;;		ldCopyByte	UBnkrotmatNosevY+1, varQ         ; use ixh as Q later
 217+ B32E              ;;;;;;;;		ld		a,(UBnkrotmatRoofvX+1)				;
 218+ B32E              ;;;;;;;;		call	RSequQmulA					; RS = Q * A MULT12
 219+ B32E              ;;;;;;;;		pop		bc
 220+ B32E              ;;;;;;;;		ld		a,(UBnkrotmatNosevX+1)
 221+ B32E              ;;;;;;;;		ld		b,a
 222+ B32E              ;;;;;;;;		ld		a,(UBnkrotmatRoofvY+1)
 223+ B32E              ;;;;;;;;		push	bc
 224+ B32E              ;;;;;;;;		call	TidySub1						; set A (-nosev_z * roofv_y + nosev_y * roofv_z) / 96, This also sets Q = nosev_z
 225+ B32E              ;;;;;;;;		pop		bc
 226+ B32E              ;;;;;;;;		ld		(sidev_z+1),a
 227+ B32E              ;;;;;;;;		xor		a							; set a = 0 so we can clear orientation low bytes
 228+ B32E              ;;;;;;;;		ld		hl,sidev_z
 229+ B32E              ;;;;;;;;		ld		b,9							; only on 6 cells (3 x row 0 and row 1)
 230+ B32E              ;;;;;;;;		ld		hl,UBnkrotmatNosevX
 231+ B32E              ;;;;;;;;NormaliseSideV:
 232+ B32E              ;;;;;;;;		call	CopyRotMatSideVtoXX15		; xx15 = roofv
 233+ B32E              ;;;;;;;;		push	bc
 234+ B32E              ;;;;;;;;		call	normaliseXX1596fast			; normalise
 235+ B32E              ;;;;;;;;		pop		bc
 236+ B32E              ;;;;;;;;		call	CopyXX15toRotMatSideV		; get back normalised version
 237+ B32E              ;;;;;;;;
 238+ B32E
 239+ B32E
 240+ B32E              CalcRoofvX:
 241+ B32E              Tidy1RX:										; roofv_x´ = -(nosev_y´ * roofv_y + nosev_z´ * roofv_z) / nosev_x´
 242+ B32E              		ldCopyByte UBnkrotmatNosevZ+1,varQ
 242+ B32E 3A 26 C0    >                        ld       a,(UBnkrotmatNosevZ+1)
 242+ B331 32 27 99    >                        ld       (varQ),a
 243+ B334 3A 20 C0     		ld		a,(UBnkrotmatRoofvZ+1)
 244+ B337 CD CA B1     		call	RSequQmulA						; rs = nosez hi * roofz hi
 245+ B33A              		ldCopyByte UBnkrotmatNosevY+1,varQ
 245+ B33A 3A 24 C0    >                        ld       a,(UBnkrotmatNosevY+1)
 245+ B33D 32 27 99    >                        ld       (varQ),a
 246+ B340 3A 1E C0     		ld		a,(UBnkrotmatRoofvY+1)
 247+ B343 CD 47 A9     		call	madXAequQmulAaddRS				; DE = nosey hi * roofy hi + rs
 248+ B346 7A           		ld		a,d
 249+ B347 E6 80        		and 	$80
 250+ B349 FD 67        		ld		iyh,a
 251+ B34B              ;DEBUG		ld		c,a
 252+ B34B 3A 22 C0     		ld		a,(UBnkrotmatNosevX+1)					; get nosev x sign
 253+ B34E 4F           		ld		c,a								; temp save
 254+ B34F E6 80        		and		$80
 255+ B351 FD AC        		xor		iyh								; flip from saved multiply sign result
 256+ B353 FD 67        		ld		iyh,a							; save nosesev sign to iyh
 257+ B355 79           		ld		a,c								; recover a
 258+ B356 E6 7F        		and		$7F								; a is unsigned nosev x
 259+ B358 42           		ld		b,d
 260+ B359 4B           		ld		c,e								; bc = nosev_y´ * roofv_y + nosev_z´ * roofv_z
 261+ B35A 57           		ld		d,a								; de = nosev x hi
 262+ B35B 1E 00        		ld		e,0
 263+ B35D CD F1 AB     		call	BC_Div_DE
 264+ B360 FD 7C        		ld		a,iyh							; get back sign from nosevx
 265+ B362 EE 80        		xor		$80								; flip sign
 266+ B364 E6 80        		and		$80								; keep sign bit only
 267+ B366 B0           		or		b
 268+ B367 C9           		ret
 269+ B368
 270+ B368
 271+ B368              CalcRoofvY:
 272+ B368              Tidy1RY:										; roofv_y´ = -(nosev_x´ * roofv_x + nosev_z´ * roofv_z) / nosev_y´
 273+ B368              		ldCopyByte UBnkrotmatNosevZ+1,varQ				;                  A        Q              RS
 273+ B368 3A 26 C0    >                        ld       a,(UBnkrotmatNosevZ+1)
 273+ B36B 32 27 99    >                        ld       (varQ),a
 274+ B36E 3A 20 C0     		ld		a,(UBnkrotmatRoofvZ+1)
 275+ B371 CD CA B1     		call	RSequQmulA
 276+ B374              		ldCopyByte UBnkrotmatNosevX+1,varQ
 276+ B374 3A 22 C0    >                        ld       a,(UBnkrotmatNosevX+1)
 276+ B377 32 27 99    >                        ld       (varQ),a
 277+ B37A 3A 1C C0     		ld		a,(UBnkrotmatRoofvX+1)
 278+ B37D CD 47 A9     		call	madXAequQmulAaddRS
 279+ B380 7A           		ld		a,d
 280+ B381 E6 80        		and 	$80
 281+ B383 FD 67        		ld		iyh,a
 282+ B385 3A 24 C0     		ld		a,(UBnkrotmatNosevY+1)					; get nosev x sign
 283+ B388 4F           		ld		c,a								; temp save
 284+ B389 E6 80        		and		$80
 285+ B38B FD AC        		xor		iyh								; flip from saved multiply sign result
 286+ B38D FD 67        		ld		iyh,a							; save nosesev sign to iyh
 287+ B38F 79           		ld		a,c								; recover a
 288+ B390 E6 7F        		and		$7F								; a is unsigned nosev x
 289+ B392 42           		ld		b,d
 290+ B393 4B           		ld		c,e								; bc = nosev_y´ * roofv_y + nosev_z´ * roofv_z
 291+ B394 57           		ld		d,a								; de = nosev x hi
 292+ B395 1E 00        		ld		e,0
 293+ B397 CD F1 AB     		call	BC_Div_DE
 294+ B39A FD 7C        		ld		a,iyh
 295+ B39C EE 80        		xor		$80
 296+ B39E E6 80        		and		$80
 297+ B3A0 B0           		or		b
 298+ B3A1 C9           		ret
 299+ B3A2
 300+ B3A2              CalcRoofvZ:
 301+ B3A2              Tidy1RZ:										; roofv_z´ = -(nosev_x´ * roofv_x + nosev_y´ * roofv_y) / nosev_z´
 302+ B3A2              		ldCopyByte UBnkrotmatNosevY+1,varQ
 302+ B3A2 3A 24 C0    >                        ld       a,(UBnkrotmatNosevY+1)
 302+ B3A5 32 27 99    >                        ld       (varQ),a
 303+ B3A8 3A 1E C0     		ld		a,(UBnkrotmatRoofvY+1)
 304+ B3AB CD CA B1     		call	RSequQmulA						; rs = NOSEy * ROOFy
 305+ B3AE              		ldCopyByte UBnkrotmatNosevX+1,varQ
 305+ B3AE 3A 22 C0    >                        ld       a,(UBnkrotmatNosevX+1)
 305+ B3B1 32 27 99    >                        ld       (varQ),a
 306+ B3B4 3A 1C C0     		ld		a,(UBnkrotmatRoofvX+1)
 307+ B3B7 CD 47 A9     		call	madXAequQmulAaddRS				; de (A,ixl) = NOSEx * ROOFx + RS
 308+ B3BA 7A           		ld		a,d
 309+ B3BB E6 80        		and 	$80
 310+ B3BD FD 67        		ld		iyh,a
 311+ B3BF 3A 26 C0     		ld		a,(UBnkrotmatNosevZ+1)					; get nosev x sign
 312+ B3C2 4F           		ld		c,a								; temp save
 313+ B3C3 E6 80        		and		$80
 314+ B3C5 FD AC        		xor		iyh								; flip from saved multiply sign result
 315+ B3C7 FD 67        		ld		iyh,a							; save nosesev sign to iyh
 316+ B3C9 79           		ld		a,c								; recover a
 317+ B3CA E6 7F        		and		$7F								; a is unsigned nosev x
 318+ B3CC 42           		ld		b,d
 319+ B3CD 4B           		ld		c,e								; bc = nosev_y´ * roofv_y + nosev_z´ * roofv_z
 320+ B3CE 57           		ld		d,a								; de = nosev x hi
 321+ B3CF 1E 00        		ld		e,0
 322+ B3D1 CD F1 AB     		call	BC_Div_DE
 323+ B3D4 FD 7C        		ld		a,iyh
 324+ B3D6 EE 80        		xor		$80
 325+ B3D8 E6 80        		and		$80
 326+ B3DA B0           		or		b
 327+ B3DB C9           		ret
 328+ B3DC
 329+ B3DC
 330+ B3DC
 331+ B3DC              ;;ProcessSidev:
 332+ B3DC              ;;		ldCopyByte	UBnkrotmatNosevZ+1, varQ         ; use ixh as Q later
 333+ B3DC              ;;		ld		a,(UBnkrotmatRoofvY+1)				; a = roofv_hi
 334+ B3DC              ;;		push	bc
 335+ B3DC              ;;		call	RSequQmulA					; RS = Q * A MULT12
 336+ B3DC              ;;		pop		bc
 337+ B3DC              ;;		ld		a,(UBnkrotmatNosevY+1)
 338+ B3DC              ;;		ld		b,a							; set x (b) to value of nosev_z
 339+ B3DC              ;;		ld		a,(UBnkrotmatRoofvZ+1)				; a = roofv_y hi
 340+ B3DC              ;;		push	bc
 341+ B3DC              ;;		call	TidySub1					; set A (-nosev_z * roofv_y + nosev_y * roofv_z) / 96, This also sets Q = nosev_z TIS1
 342+ B3DC              ;;		pop		bc
 343+ B3DC              ;;		xor		$80							; sidev_x = -a by flipping sign bit
 344+ B3DC              ;;		ld		(UBnkrotmatSidevX+1),a				; sidev_x = = (nosev_z * roofv_y - nosev_y * roofv_z) / 96
 345+ B3DC              ;;		ldCopyByte	UBnkrotmatNosevX+1, varQ         ; use ixh as Q later
 346+ B3DC              ;;		ld		a,(UBnkrotmatRoofvZ+1)				;
 347+ B3DC              ;;		push	bc
 348+ B3DC              ;;		call	RSequQmulA					; RS = Q * A MULT12 MULT12
 349+ B3DC              ;;		pop		bc
 350+ B3DC              ;;		ld		a,(UBnkrotmatNosevZ+1)
 351+ B3DC              ;;		ld		b,a
 352+ B3DC              ;;		ld		a,(UBnkrotmatNosevY+1)
 353+ B3DC              ;;		push	bc
 354+ B3DC              ;;		call	TidySub1						; set A (-nosev_z * roofv_y + nosev_y * roofv_z) / 96, This also sets Q = nosev_z
 355+ B3DC              ;;		pop		bc
 356+ B3DC              ;;		xor		$80							; a *= -1
 357+ B3DC              ;;		ld		(UBnkrotmatSidevY+1),a				; sidev_y  = (nosev_x * roofv_z - nosev_z * roofv_x) / 96
 358+ B3DC              ;;		ld		a,(UBnkrotmatRoofvY+1)
 359+ B3DC              ;;		push	bc
 360+ B3DC              ;;		ldCopyByte	UBnkrotmatNosevY+1, varQ         ; use ixh as Q later
 361+ B3DC              ;;		ld		a,(UBnkrotmatRoofvX+1)				;
 362+ B3DC              ;;		call	RSequQmulA					; RS = Q * A MULT12
 363+ B3DC              ;;		pop		bc
 364+ B3DC              ;;		ld		a,(UBnkrotmatNosevX+1)
 365+ B3DC              ;;		ld		b,a
 366+ B3DC              ;;		ld		a,(UBnkrotmatRoofvY+1)
 367+ B3DC              ;;		push	bc
 368+ B3DC              ;;		call	TidySub1						; set A (-nosev_z * roofv_y + nosev_y * roofv_z) / 96, This also sets Q = nosev_z
 369+ B3DC              ;;		pop		bc
 370+ B3DC              ;;		xor		$80
 371+ B3DC              ;;		ld		(UBnkrotmatSidevZ+1),a
 372+ B3DC              ;;		xor		a							; set a = 0 so we can clear orientation low bytes
 373+ B3DC              ;;		ld		hl,UBnkrotmatSidevZ
 374+ B3DC              ;;		ld		b,9							; only on 6 cells (3 x row 0 and row 1)
 375+ B3DC              ;;		ld		hl,UBnkrotmatNosevX
 376+ B3DC
 377+ B3DC
 378+ B3DC
 379+ B3DC
 380+ B3DC
 381+ B3DC
 382+ B3DC              ;;;;;;;;;-- Check to see if the top two magnitude bits are clear in nosev_x, if so jump to TI1
 383+ B3DC              ;;;;;;;;.ProcessRoofv:
 384+ B3DC              ;;;;;;;;		call	CopyRotMatRoofVtoXX15		; xx15 = roofv
 385+ B3DC              ;;;;;;;;		push	bc
 386+ B3DC              ;;;;;;;;		call	normaliseXX1596fast			; normalise roof
 387+ B3DC              ;;;;;;;;		pop		bc
 388+ B3DC              ;;;;;;;;		call	CopyXX15toRotMatRoofV		; get back normalised version
 389+ B3DC              ;;;;;;;;.ProcessSidev:
 390+ B3DC              ;;;;;;;;		call	CopyRotMatSideVtoXX15		; xx15 = roofv
 391+ B3DC              ;;;;;;;;		push	bc
 392+ B3DC              ;;;;;;;;		call	normaliseXX1596fast			; normalise roof
 393+ B3DC              ;;;;;;;;		pop		bc
 394+ B3DC              ;;;;;;;;		call	CopyXX15toRotMatSideV		; get back normalised version
 395+ B3DC
# file closed: ./Maths/Utilities/tidy.asm
1142  B3DC                  INCLUDE "./Maths/Utilities/LL28AequAmul256DivD.asm"
# file opened: ./Maths/Utilities/LL28AequAmul256DivD.asm
   1+ B3DC
   2+ B3DC              LL28Amul256DivD:        JumpIfAGTENusng  d, .Ll28Exit255
   2+ B3DC BA          >                        cp     d
   2+ B3DD D2 FB B3    >                        jp		nc,.Ll28Exit255
   3+ B3E0 1E FE                                ld      e,%11111110                 ; Set R to have bits 1-7 set, so we can rotate through 7
   4+ B3E2 CB 27        .LL31:                  sla     a
   5+ B3E4 38 0D                                jr      c,.LL29
   6+ B3E6                                      JumpIfALTNusng  d, .SkipSub         ; will jump if carry set, so we need to reset on the rol
   6+ B3E6 BA          >                        cp      d
   6+ B3E7 DA EC B3    >                        jp		c, .SkipSub
   7+ B3EA 92                                   sub     d
   8+ B3EB                                      ClearCarryFlag                      ; reset clarry as it will be complimented for rotate as 6502 does carry flags inverted
   8+ B3EB B7          >                        or a
   9+ B3EC 3F           .SkipSub:               ccf                                 ; if we did the subtract the carry will be clear so we need to invert to roll in.
  10+ B3ED CB 13                                rl      e
  11+ B3EF 38 F1                                jr      c,.LL31
  12+ B3F1 7B                                   ld      a,e
  13+ B3F2 C9                                   ret
  14+ B3F3 92           .LL29:                  sub     d                           ; A >= Q, so set A = A - Q
  15+ B3F4 37                                   scf                                 ; Set the C flag to rotate into the result in R
  16+ B3F5 CB 13                                rl      e                           ; rotate counter e left
  17+ B3F7 38 E9                                jr      c,.LL31                     ; if a bit was spat off teh end then loop
  18+ B3F9 7B                                   ld      a,e                         ; stick result in a
  19+ B3FA C9                                   ret
  20+ B3FB 3E FF        .Ll28Exit255:           ld  a,255                           ; Fail with FF as result
  21+ B3FD C9                                   ret
  22+ B3FE
# file closed: ./Maths/Utilities/LL28AequAmul256DivD.asm
1143  B3FE                  INCLUDE "./Maths/Utilities/XAequMinusXAPplusRSdiv96-TIS1.asm"
# file opened: ./Maths/Utilities/XAequMinusXAPplusRSdiv96-TIS1.asm
   1+ B3FE              XAequMinusXAplusRSdiv96:					;.TIS1	\ -> &293B  \ Tidy subroutine 1  X.A =  (-X*A  + (R.S))/96
   2+ B3FE              TIS1:
   3+ B3FE 08           		ex		af,af'
   4+ B3FF 3A 11 98     		ld		a,(regX)
   5+ B402 47           		ld		b,a
   6+ B403 08           		ex		af,af'
   7+ B404              BAequMinusBAplusRSdiv96:					;.TIS1	\ -> &293B  \ Tidy subroutine 1 using B register = X
   8+ B404 08           		ex		af,af'
   9+ B405 78           		ld		a,b
  10+ B406 32 27 99     		ld		(varQ),a
  11+ B409 08           		ex		af,af'
  12+ B40A EE 80        		xor		$80							;	 flip sign of Acc
  13+ B40C CD 47 A9     		call	madXAequQmulAaddRS			; \ MAD \ multiply and add (X,A) =  -X*A  + (R,S)
  14+ B40F              ; USES 				A BC E
  15+ B40F              ; DOES NOT USE		D HL
  16+ B40F              Div96:										; .DVID96	\ Their comment A=A/96: answer is A*255/96
  17+ B40F 47           		ld		b,a
  18+ B410 E6 80        		and		$80							;	hi sign
  19+ B412 5F           		ld		e,a							;   e = varT
  20+ B413 78           		ld		a,b
  21+ B414 E6 7F        		and		$7F							;	hi A7
  22+ B416 06 FE        		ld		b,$FE						;   slide counter
  23+ B418 48           		ld		c,b							;   c == T1 ::  T1
  24+ B419              .DVL3:										;   roll T1  clamp Acc to #96 for rotation matrix unity
  25+ B419 CB 27        		sla		a
  26+ B41B FE 60        		cp		$60							; max 96
  27+ B41D 30 02        		jr		nc,.DV4
  28+ B41F DE 60        		sbc		a,$60							;  SBC #&60
  29+ B421              .DV4:										; skip subtraction
  30+ B421 CB 11        		rl		c							;  T1
  31+ B423 38 F4        		jr		c,.DVL3
  32+ B425 79           		ld		a,c							;   T1
  33+ B426 B3           		or		e							;   restore T sign
  34+ B427 C9           		ret
  35+ B428
# file closed: ./Maths/Utilities/XAequMinusXAPplusRSdiv96-TIS1.asm
1144  B428              ;INCLUDE "XAequQmuilAaddRS-MAD-ADD.asm"
1145  B428              ;INCLUDE "XHiYLoequPA-gc3.asm"
1146  B428              ;INCLUDE "XHiYLoequPmulAmul4-gc2.asm"
1147  B428              ;INCLUDE "XLoYHiequPmulQmul4-gcash.asm"
1148  B428              ;INCLUDE "XX12equXX15byXX16-LL51.asm"
1149  B428                ;  INCLUDE "./Maths/Utilities/XYeqyx1loSmulMdiv256-Ll120-LL123.asm"
1150  B428
1151  B428                  INCLUDE "./Tactics.asm"
# file opened: ./Tactics.asm
   1+ B428              ;Ship Tactics
   2+ B428              ; used  when no pre-checks are requrired, e.g. if forcing a space station from main loop
   3+ B428
   4+ B428
   5+ B428              ; set angry if possible, if its an innocent then flag the space station to get angry
   6+ B428 3A 23 C3     MakeAngry:              ld      a,(ShipNewBitsAddr)                     ; Check bit 5 of newb flags
   7+ B42B                                      JumpIfMemEqNusng ShipTypeAddr, ShipTypeStation, .SetNewbAngry
   7+ B42B 3A 22 C3    >                        ld  a,(ShipTypeAddr)
   7+ B42E FE 02       >                        cp  ShipTypeStation
   7+ B430 CA 53 B4    >                        jp  z,.SetNewbAngry
   8+ B433 E6 20        .ItsNotAStation:        and     ShipIsBystander                         ; check if space station present if its a bystander
   9+ B435 C4 59 B4                             call    nz, SetStationAngry                     ; Set Space Station if present, Angry
  10+ B438 3A 37 C0                             ld      a,(UBnkaiatkecm)                        ; get AI data
  11+ B43B                                      ReturnIfAIsZero                                 ; if 0 then no AI attached
  11+ B43B A7          >                        and     a
  11+ B43C C8          >                        ret     z
  12+ B43D F6 80                                or      ShipAIEnabled                           ; set AI Enabled set to ensure its set
  13+ B43F 32 37 C0                             ld      (UBnkaiatkecm),a                        ; .
  14+ B442 4F                                   ld      c,a                                     ; Copy to c in case we need it later
  15+ B443                                      SetMemToN UBnKAccel, 2                          ; set accelleration to 2 to speed up
  15+ B443 3E 02       >                        ld      a,2
  15+ B445 32 32 C0    >                        ld      (UBnKAccel),a
  16+ B448 CB 27                                sla     a                                       ; set pitch to 4
  17+ B44A 32 34 C0                             ld      (UBnKRotZCounter),a                     ; .
  18+ B44D 3A 24 C3                             ld      a,(ShipAIFlagsAddr)
  19+ B450                                      ReturnIfBitMaskClear ShipCanAnger
  19+ B450 E6 01       >                        and     ShipCanAnger
  19+ B452 C8          >                        ret     z
  20+ B453 CD 2E CA     .SetNewbAngry:          call    SetShipHostile
  21+ B456 C9                                   ret
  22+ B457
  23+ B457 C9           MissileDidHitUs:        ret ; TODO
  24+ B458
  25+ B458 C9           PlayerHitByMissile:     ret; TODO , do hit set up blast radius etc
  26+ B459
  27+ B459 CD 3D 9D     SetStationAngry:        call    IsSpaceStationPresent                   ; only if present
  28+ B45C D8                                   ret     c
  29+ B45D 3A 2C C0                             ld      a,(UbnKShipBankNbr)                     ; save current bank
  30+ B460 FD 67                                ld      iyh,a
  31+ B462                                      MMUSelectUniverseN 0                            ; space station is always 0
  31+ B462 ED 91 56 46 >                     nextreg UniverseMMU,       BankUNIVDATA0+0
  32+ B466 CD 2E CA                             call    SetShipHostile
  33+ B469 FD 7C                                ld      a,iyh                                   ; get prev bank back
  34+ B46B                                      MMUSelectUniverseA                              ;
  34+ B46B C6 46       >                     add    a,BankUNIVDATA0
  34+ B46D ED 92 56    >                     nextreg UniverseMMU,       a
  35+ B470 C9                                   ret
  36+ B471
  37+ B471              CheckMissileBlastInit:  ZeroA
  37+ B471 AF          >                        xor a
  38+ B472 32 F6 99                             ld      (CurrentMissileCheck),a
  39+ B475 21 0C C0                             ld      hl,UBnKxlo                      ; Copy Blast Coordinates
  40+ B478 01 0C 00                             ld      bc,12                           ; and Damage stats
  41+ B47B 11 C4 99                             ld      de,MissileXPos
  42+ B47E ED B0                                ldir
  43+ B480                                      ZeroA                                   ; we have processd enque request
  43+ B480 AF          >                        xor a
  44+ B481 32 2F C0                             ld      (UBnKMissleHitToProcess),a      ;
  45+ B484 CD 41 B5                             call    CheckIfBlastHitUs               ; If we are in Range
  46+ B487 DC 57 B4                             call    c, MissileDidHitUs              ; Then we get hit
  47+ B48A C9                                   ret
  48+ B48B
  49+ B48B              CheckPointRange:        MACRO   ShipPos, ShipSign, MissilePos, MissileSign
  50+ B48B ~                                    ld      a,(MissilePos)                      ; check X Coord
  51+ B48B ~                                    ld      hl,(ShipSign)
  52+ B48B ~                                    xor     (hl)
  53+ B48B ~                                    and     SignOnly8Bit
  54+ B48B ~                                    ld      hl,(ShipPos)
  55+ B48B ~                                    ld      de,(MissilePos)
  56+ B48B ~                                    jr      z,.SignsDiffernt
  57+ B48B ~            .XSame:                 and     a
  58+ B48B ~                                    sbc     hl,de                               ; distance = Ship X - Missile X
  59+ B48B ~                                    JumpIfPositive      .CheckDiff              ; if result was -ve
  60+ B48B ~                                    NegHL
  61+ B48B ~                                    jp      .CheckDiff
  62+ B48B ~            .SignsDiffernt:         add     hl,de
  63+ B48B ~                                    ReturnIfNegative                            ; if we overflowed then return
  64+ B48B ~            .CheckDiff:             ld      a,h                                 ; if we have an h outside blast raidus
  65+ B48B ~                                    ReturnIfANotZero
  66+ B48B ~                                    ld      a,l
  67+ B48B ~                                    and     a
  68+ B48B ~                                    ReturnIfAGTEMemusng   CurrentMissileBlastRange
  69+ B48B                                      ENDM
  70+ B48B              ;...................................................................
  71+ B48B              ; We only do one test per loop for spreading the load of work
  72+ B48B 3A F6 99     CheckMissileBlastLoop:  ld      a,(CurrentMissileCheck)
  73+ B48E                                      ReturnIfAGTENusng   UniverseSlotListSize
  73+ B48E FE 0C       >                        cp    UniverseSlotListSize
  73+ B490 D0          >                        ret	 nc
  74+ B491 FD 6F                                ld      iyl,a
  75+ B493 3C                                   inc     a                                   ; update for next slot so re can fast return on distance checks
  76+ B494 32 F6 99                             ld      (CurrentMissileCheck),a
  77+ B497                                      ReturnIfSlotAEmpty
  77+ B497 21 F8 99    >                        ld      hl,UniverseSlotList
  77+ B49A ED 31       >                        add     hl,a
  77+ B49C 7E          >                        ld      a,(hl)
  77+ B49D 3C          >                        inc     a
  77+ B49E C8          >                        ret     z           ; if slot was ff inc would make it 0
  77+ B49F 3D          >                        dec     a           ; get original value back for later
  78+ B4A0 CD 3D 9D                             call    IsSpaceStationPresent               ; If its a station its imune to missiles
  79+ B4A3 D8                                   ret     c                                   ; if we have a special mission to kill a staion then its type won't be space station for game logic
  80+ B4A4 3A 35 C0                             ld      a,(UBnKexplDsp)                     ; Don't explode a ship twice
  81+ B4A7 E6 20                                and     ShipExploding                       ;
  82+ B4A9                                      ReturnIfNotZero                             ;
  82+ B4A9 C0          >                        ret     nz
  83+ B4AA 3A E5 99                             ld      a,(CurrentMissileBlastRange)
  84+ B4AD FD 67                                ld      iyh,a                               ; iyh = missile blast depending on type
  85+ B4AF FD 7D        .CheckRange:            ld      a,iyl                               ; now page in universe data
  86+ B4B1                                      MMUSelectUniverseA
  86+ B4B1 C6 46       >                     add    a,BankUNIVDATA0
  86+ B4B3 ED 92 56    >                     nextreg UniverseMMU,       a
  87+ B4B6                                      CheckPointRange UBnKxlo, UBnKxsgn, MissileXPos, MissileXSgn  ; its a square but its good enough
  87+ B4B6 3A C4 99    >                        ld      a,(MissileXPos)                      ; check X Coord
  87+ B4B9 2A 0E C0    >                        ld      hl,(UBnKxsgn)
  87+ B4BC AE          >                        xor     (hl)
  87+ B4BD E6 80       >                        and     SignOnly8Bit
  87+ B4BF 2A 0C C0    >                        ld      hl,(UBnKxlo)
  87+ B4C2 ED 5B C4 99 >                        ld      de,(MissileXPos)
  87+ B4C6 28 0F       >                        jr      z,.SignsDiffernt
  87+ B4C8 A7          >.XSame:                 and     a
  87+ B4C9 ED 52       >                        sbc     hl,de                               ; distance = Ship X - Missile X
  87+ B4CB             >                        JumpIfPositive      .CheckDiff              ; if result was -ve
  87+ B4CB F2 D9 B4    >                        jp		p, .CheckDiff
  87+ B4CE             >                        NegHL
  87+ B4CE AF          >                    xor a
  87+ B4CF 95          >                    sub l
  87+ B4D0 6F          >                    ld l,a
  87+ B4D1 9F          >                    sbc a,a
  87+ B4D2 94          >                    sub h
  87+ B4D3 67          >                    ld h,a
  87+ B4D4 C3 D9 B4    >                        jp      .CheckDiff
  87+ B4D7 19          >.SignsDiffernt:         add     hl,de
  87+ B4D8             >                        ReturnIfNegative                            ; if we overflowed then return
  87+ B4D8 F8          >                        ret     m
  87+ B4D9 7C          >.CheckDiff:             ld      a,h                                 ; if we have an h outside blast raidus
  87+ B4DA             >                        ReturnIfANotZero
  87+ B4DA A7          >                        and     a
  87+ B4DB C0          >                        ret     nz
  87+ B4DC 7D          >                        ld      a,l
  87+ B4DD A7          >                        and     a
  87+ B4DE             >                        ReturnIfAGTEMemusng   CurrentMissileBlastRange
  87+ B4DE 21 E5 99    >                        ld      hl,CurrentMissileBlastRange
  87+ B4E1 BE          >                        cp      (hl)
  87+ B4E2 D0          >                        ret	    nc
  88+ B4E3                                      CheckPointRange UBnKylo, UBnKysgn, MissileYPos, MissileYSgn
  88+ B4E3 3A C7 99    >                        ld      a,(MissileYPos)                      ; check X Coord
  88+ B4E6 2A 11 C0    >                        ld      hl,(UBnKysgn)
  88+ B4E9 AE          >                        xor     (hl)
  88+ B4EA E6 80       >                        and     SignOnly8Bit
  88+ B4EC 2A 0F C0    >                        ld      hl,(UBnKylo)
  88+ B4EF ED 5B C7 99 >                        ld      de,(MissileYPos)
  88+ B4F3 28 0F       >                        jr      z,.SignsDiffernt
  88+ B4F5 A7          >.XSame:                 and     a
  88+ B4F6 ED 52       >                        sbc     hl,de                               ; distance = Ship X - Missile X
  88+ B4F8             >                        JumpIfPositive      .CheckDiff              ; if result was -ve
  88+ B4F8 F2 06 B5    >                        jp		p, .CheckDiff
  88+ B4FB             >                        NegHL
  88+ B4FB AF          >                    xor a
  88+ B4FC 95          >                    sub l
  88+ B4FD 6F          >                    ld l,a
  88+ B4FE 9F          >                    sbc a,a
  88+ B4FF 94          >                    sub h
  88+ B500 67          >                    ld h,a
  88+ B501 C3 06 B5    >                        jp      .CheckDiff
  88+ B504 19          >.SignsDiffernt:         add     hl,de
  88+ B505             >                        ReturnIfNegative                            ; if we overflowed then return
  88+ B505 F8          >                        ret     m
  88+ B506 7C          >.CheckDiff:             ld      a,h                                 ; if we have an h outside blast raidus
  88+ B507             >                        ReturnIfANotZero
  88+ B507 A7          >                        and     a
  88+ B508 C0          >                        ret     nz
  88+ B509 7D          >                        ld      a,l
  88+ B50A A7          >                        and     a
  88+ B50B             >                        ReturnIfAGTEMemusng   CurrentMissileBlastRange
  88+ B50B 21 E5 99    >                        ld      hl,CurrentMissileBlastRange
  88+ B50E BE          >                        cp      (hl)
  88+ B50F D0          >                        ret	    nc
  89+ B510                                      CheckPointRange UBnKzlo, UBnKzsgn, MissileZPos, MissileZSgn
  89+ B510 3A CA 99    >                        ld      a,(MissileZPos)                      ; check X Coord
  89+ B513 2A 14 C0    >                        ld      hl,(UBnKzsgn)
  89+ B516 AE          >                        xor     (hl)
  89+ B517 E6 80       >                        and     SignOnly8Bit
  89+ B519 2A 12 C0    >                        ld      hl,(UBnKzlo)
  89+ B51C ED 5B CA 99 >                        ld      de,(MissileZPos)
  89+ B520 28 0F       >                        jr      z,.SignsDiffernt
  89+ B522 A7          >.XSame:                 and     a
  89+ B523 ED 52       >                        sbc     hl,de                               ; distance = Ship X - Missile X
  89+ B525             >                        JumpIfPositive      .CheckDiff              ; if result was -ve
  89+ B525 F2 33 B5    >                        jp		p, .CheckDiff
  89+ B528             >                        NegHL
  89+ B528 AF          >                    xor a
  89+ B529 95          >                    sub l
  89+ B52A 6F          >                    ld l,a
  89+ B52B 9F          >                    sbc a,a
  89+ B52C 94          >                    sub h
  89+ B52D 67          >                    ld h,a
  89+ B52E C3 33 B5    >                        jp      .CheckDiff
  89+ B531 19          >.SignsDiffernt:         add     hl,de
  89+ B532             >                        ReturnIfNegative                            ; if we overflowed then return
  89+ B532 F8          >                        ret     m
  89+ B533 7C          >.CheckDiff:             ld      a,h                                 ; if we have an h outside blast raidus
  89+ B534             >                        ReturnIfANotZero
  89+ B534 A7          >                        and     a
  89+ B535 C0          >                        ret     nz
  89+ B536 7D          >                        ld      a,l
  89+ B537 A7          >                        and     a
  89+ B538             >                        ReturnIfAGTEMemusng   CurrentMissileBlastRange
  89+ B538 21 E5 99    >                        ld      hl,CurrentMissileBlastRange
  89+ B53B BE          >                        cp      (hl)
  89+ B53C D0          >                        ret	    nc
  90+ B53D CD 6C CA                             call    ShipMissileBlast                    ; Ship hit by missile blast
  91+ B540 C9                                   ret                                         ; we are done
  92+ B541              ;...................................................................
  93+ B541 3A 27 C0     CheckIfBlastHitUs:      ld      a,(UBnKMissileBlastRange)
  94+ B544 4F                                   ld      c,a
  95+ B545 C3 4C B5                             jp      MissileHitUsCheckPos
  96+ B548              ;...................................................................
  97+ B548 3A 29 C0     CheckIfMissileHitUs:    ld      a,(UBnKMissileDetonateRange)
  98+ B54B 4F                                   ld      c,a
  99+ B54C              ;...................................................................
 100+ B54C 2A 0C C0     MissileHitUsCheckPos:   ld      hl, (UBnKxlo)
 101+ B54F                                      ZeroA
 101+ B54F AF          >                        xor a
 102+ B550 B4                                   or      h
 103+ B551                                      ClearCarryFlag
 103+ B551 B7          >                        or a
 104+ B552                                      ReturnIfNotZero                             ; will return with carry clear if way far away
 104+ B552 C0          >                        ret     nz
 105+ B553 7D                                   ld      a,l
 106+ B554                                      ReturnIfAGTENusng    c                      ; return no carry if x far
 106+ B554 B9          >                        cp    c
 106+ B555 D0          >                        ret	 nc
 107+ B556 2A 0F C0     .CheckY:                ld      hl,(UBnKylo)
 108+ B559                                      ZeroA
 108+ B559 AF          >                        xor a
 109+ B55A B5                                   or      l
 110+ B55B                                      ClearCarryFlag
 110+ B55B B7          >                        or a
 111+ B55C                                      ReturnIfNotZero                             ; will return with carry clear if way far away
 111+ B55C C0          >                        ret     nz
 112+ B55D 7D                                   ld      a,l
 113+ B55E                                      ReturnIfAGTENusng    c                      ; return no carry if y far
 113+ B55E B9          >                        cp    c
 113+ B55F D0          >                        ret	 nc
 114+ B560 2A 12 C0     .CheckZ:                ld      hl,(UBnKzlo)
 115+ B563                                      ZeroA
 115+ B563 AF          >                        xor a
 116+ B564 B5                                   or      l
 117+ B565                                      ClearCarryFlag
 117+ B565 B7          >                        or a
 118+ B566                                      ReturnIfNotZero                             ; will return with carry clear if way far away
 118+ B566 C0          >                        ret     nz
 119+ B567 7D                                   ld      a,l
 120+ B568                                      ReturnIfAGTENusng    c                      ; return no carry if z far
 120+ B568 B9          >                        cp    c
 120+ B569 D0          >                        ret	 nc
 121+ B56A              .ItsAHit:               SetCarryFlag
 121+ B56A 37          >                        scf
 121+ B56B                                              ; So must have hit
 122+ B56B C9                                   ret
 123+ B56C
 124+ B56C              ;...................................................................
 125+ B56C              ;... Now the tactics if current ship is the missile
 126+ B56C              MissileLogic:           JumpIfMemTrue UBnKMissleHitToProcess, .ProcessMissileHit
 126+ B56C 3A 2F C0    >                        ld      a,(UBnKMissleHitToProcess)
 126+ B56F A7          >                        and     a
 126+ B570 CA C9 B5    >                        jp      z, .ProcessMissileHit
 127+ B573              .CheckForECM:           JumpIfMemTrue ECMActive,.ECMIsActive
 127+ B573 3A 38 98    >                        ld      a,(ECMActive)
 127+ B576 A7          >                        and     a
 127+ B577 CA D2 B5    >                        jp      z, .ECMIsActive
 128+ B57A 3A 23 C3     .IsMissileHostile:      ld      a,(ShipNewBitsAddr)                 ; is missle attacking us?
 129+ B57D E6 04                                and     ShipIsHostile
 130+ B57F                                      JumpIfNotZero .MissileTargetingShip
 130+ B57F C2 96 B5    >                        jp	nz,.MissileTargetingShip
 131+ B582 2A 0C C0     .MissileTargetingPlayer:ld      hl, (UBnKxlo)                       ; check if missile in range of us
 132+ B585 3A 29 C0                             ld      a,(UBnKMissileDetonateRange)
 133+ B588 4F                                   ld      c,a                                 ; c holds detonation range
 134+ B589 CD 4C B5                             call    MissileHitUsCheckPos
 135+ B58C D2 95 B5     .MissileNotHitUsYet:    jp      nc, .UpdateTargetingUsPos
 136+ B58F CD 58 B4     .MissleHitUs:           call    PlayerHitByMissile
 137+ B592 C3 D2 B5                             jp      .ECMIsActive                        ; we use ECM logic to destroy missile which eqneues is
 138+ B595 C9           .UpdateTargetingUsPos:  ret                         //TODO
 139+ B596 3A 30 C0     .MissileTargetingShip:  ld      a,(UBnKMissileTarget)
 140+ B599              .IsMissleTargetGone:    JumpIfSlotAEmpty    .ECMIsActive            ; if the target was blown up then detonate
 140+ B599 21 F8 99    >                        ld      hl,UniverseSlotList
 140+ B59C ED 31       >                        add     hl,a
 140+ B59E 7E          >                        ld      a,(hl)
 140+ B59F 3C          >                        inc     a
 140+ B5A0 CA D2 B5    >                        jp      z,.ECMIsActive    ; if slot was ff inc would make it 0
 140+ B5A3 3D          >                        dec     a           ; get original value back for later
 141+ B5A4              ;... Note we don't have to check for impact as we already have a loop doing that
 142+ B5A4 FD 6F        .SelectTargetShip:      ld      iyl,a
 143+ B5A6                                      MMUSelectUniverseA
 143+ B5A6 C6 46       >                     add    a,BankUNIVDATA0
 143+ B5A8 ED 92 56    >                     nextreg UniverseMMU,       a
 144+ B5AB 3A 37 C0     .IsShipExploding:       ld      a,(UBnkaiatkecm)
 145+ B5AE E6 20                                and     ShipExploding
 146+ B5B0 20 0A                                jr      nz,.UpdateTargetingShipPos
 147+ B5B2 FD 7D        .ShipIsExploding:       ld      a,iyl                               ; get missile back into memory
 148+ B5B4                                      MMUSelectUniverseA
 148+ B5B4 C6 46       >                     add    a,BankUNIVDATA0
 148+ B5B6 ED 92 56    >                     nextreg UniverseMMU,       a
 149+ B5B9 C3 D2 B5                             jp      .ECMIsActive
 150+ B5BC 21 0C C0     .UpdateTargetingShipPos:ld      hl,UBnKxlo                          ; get missile target pos top temp while
 151+ B5BF 11 CD 99                             ld      de,CurrentTargetXpos
 152+ B5C2 01 09 00                             ld      bc,3*3
 153+ B5C5 ED B0                                ldir
 154+ B5C7 FD 7D                                ld a,iyl
 155+ B5C9              .CalculateMissileVector:;TODOcall    TacticsPosMinusTarget              ; calculate vector to target
 156+ B5C9              ;;TODO                        check range
 157+ B5C9              ;;TODO                        if target has ecm then 7% chance it will active, reduce target energy (i.e. damage)
 158+ B5C9              ;;TODO                        else
 159+ B5C9              ;;TODO                            normalise teh vector for direction
 160+ B5C9              ;;TODO                            dot product = missile nosev . normalised vector
 161+ B5C9              ;;TODO                            cnt = high byte of dot product, cnf is +ve if facing similar direction
 162+ B5C9              ;;TODO                            negate normalised vector so its opposite product
 163+ B5C9              ;;TODO                            invert sign of cnt
 164+ B5C9              ;;TODO                            AK = roovf . XX15
 165+ B5C9              ;;TODO                            Ships pitch = call nroll to caulate teh valu eof ships pitch counter
 166+ B5C9              ;;TODO                            if pitch * 2 < 32 then
 167+ B5C9              ;;TODO                                ax = sidev . xx15
 168+ B5C9              ;;TODO                                    a = x xort current pitch direction
 169+ B5C9              ;;TODO                                    shipts roll = nroll
 170+ B5C9              ;;TODO                            do accelleration at TA6 (    https://www.bbcelite.com/disc/flight/subroutine/tactics_part_7_of_7.html#ta20
 171+ B5C9
 172+ B5C9              ;;TODO
 173+ B5C9              ;;TODO
 174+ B5C9              ;;TODO
 175+ B5C9              ;;TODOget the targetted ship inbto bank
 176+ B5C9              ;;TODO                        check range as per player
 177+ B5C9              ;;TODO                        handle explosion enc
 178+ B5C9
 179+ B5C9              ;                    else see how close it is to target
 180+ B5C9              ;                         if close to target
 181+ B5C9              ;                            then explodes destroy missile
 182+ B5C9              ;                                 if ship is not station
 183+ B5C9              ;                                    then set up signal target ship hit my missile flag
 184+ B5C9              ;                                         set blastcheckcounter to slotlist length  (12)
 185+ B5C9              ;                                 end if
 186+ B5C9              ;                                 if we are in range of missle blast
 187+ B5C9              ;                                    cause blast damage to our ship (this will signal death is needed)
 188+ B5C9              ;                                 end if
 189+ B5C9              ;                                 return
 190+ B5C9              ;                         end if
 191+ B5C9              ;                 end if
 192+ B5C9              ;         end if
 193+ B5C9 3A F6 99     .ProcessMissileHit:     ld      a,(CurrentMissileCheck)
 194+ B5CC                                      ReturnIfAGTENusng UniverseSlotListSize  ; need to wait another loop
 194+ B5CC FE 0C       >                        cp    UniverseSlotListSize
 194+ B5CE D0          >                        ret	 nc
 195+ B5CF C3 71 B4     .ActivateNewExplosion:  jp  CheckMissileBlastInit               ; initialise
 196+ B5D2                                      ; DUMMY RET get a free return by using jp
 197+ B5D2 CD 7D CA     .ECMIsActive:           call    UnivExplodeShip                 ; ECM detonates missile
 198+ B5D5                                      SetMemTrue  UBnKMissleHitToProcess      ; Enque an explosion
 198+ B5D5 AF          >                        xor     a
 198+ B5D6 32 2F C0    >                        ld      (UBnKMissleHitToProcess),a
 199+ B5D9 C3 C9 B5                             jp      .ProcessMissileHit              ; lets see if we can enqueue now
 200+ B5DC                                      ; DUMMY RET get a free return as activenewexplosion does jp to init with a free ret
 201+ B5DC
 202+ B5DC
 203+ B5DC
 204+ B5DC                          ;            else if ship is angry at us
 205+ B5DC              ;
 206+ B5DC
 207+ B5DC              ; Part 1 - if type is missile and enquing a missile blast and slot free
 208+ B5DC              ;             then enqueue missile blast details
 209+ B5DC              ;                  mark as exploded
 210+ B5DC              ;                  remove missile from universe slot list
 211+ B5DC
 212+ B5DC              ; TODO, how to we deal with scared ships, e.g. if angry and no guns or missiles then should be considered scared or if hull mass < say 25% of our ship
 213+ B5DC              ; also for future ship vs ship combat
 214+ B5DC              ;... Tactics........................................................................
 215+ B5DC              ;.PART 1
 216+ B5DC              ; if shiphitbymissleflag <> false
 217+ B5DC              ;    then dec blast check counter
 218+ B5DC              ;         if blast check counter = 0
 219+ B5DC              ;            then set shiphitbymissileflag to FF
 220+ B5DC              ;    else if SetShipHitByMissileFlag = current ship number
 221+ B5DC              ;            then cause damage to ship
 222+ B5DC              ;         else if ship is in range and ship is not a station
 223+ B5DC              ;                  then cause blast damage to ship
 224+ B5DC              ;         if destroyed
 225+ B5DC              ;            then explode ship
 226+ B5DC              ;                 return
 227+ B5DC              ; end if
 228+ B5DC              ; if ship is a missle (I think we allow missile on missle action)
 229+ B5DC              ;    then if ecm is active
 230+ B5DC              ;            then destroy missile and return
 231+ B5DC              ;            else if ship is angry at us
 232+ B5DC              ;                    then if ship is close to us
 233+ B5DC              ;                            then explodes causing damage to our ship
 234+ B5DC              ;                                 enque missile blast
 235+ B5DC              ;                                 destroy missile
 236+ B5DC              ;                                 set blastcheckcounter to slotlist length
 237+ B5DC              ;                                 set shiphitbymissileflag to FE (general blast)
 238+ B5DC              ;                                 return
 239+ B5DC              ;                            else jump to part 3 to do updates
 240+ B5DC              ;                         end if
 241+ B5DC              ;                    else see how close it is to target
 242+ B5DC              ;                         if close to target
 243+ B5DC              ;                            then
 244+ B5DC              ;                                 enque missile blast
 245+ B5DC              ;                                 destroy missile
 246+ B5DC              ;                                 if ship is not station
 247+ B5DC              ;                                    then set up signal target ship hit my missile flag
 248+ B5DC              ;                                         set blastcheckcounter to slotlist length  (12)
 249+ B5DC              ;                                 end if
 250+ B5DC              ;                                 if we are in range of missle blast
 251+ B5DC              ;                                    cause blast damage to our ship (this will signal death is needed)
 252+ B5DC              ;                                 end if
 253+ B5DC              ;                                 return
 254+ B5DC              ;                         end if
 255+ B5DC              ;                 end if
 256+ B5DC              ;         end if
 257+ B5DC              ;.PART 2A ** adding in a collision logic
 258+ B5DC              ;    else if ship is close to another ship
 259+ B5DC              ;            then if docking flag set and other ship is space station or we are space station and other ship has docking flag
 260+ B5DC              ;                    then if aligned correctly
 261+ B5DC              ;                         then remove ship as docked
 262+ B5DC              ;                              return
 263+ B5DC              ;         else
 264+ B5DC              ;            call collision route and determine daamage based on sizes and bounce vectors
 265+ B5DC              ;            return
 266+ B5DC              ;.PART 2 ** Need to check if ship has AI flag
 267+ B5DC              ;    else if not hostile
 268+ B5DC              ;            then if not docking or station not present
 269+ B5DC              ;                    then calculate vector to planet
 270+ B5DC              ;                         jump to part 7
 271+ B5DC              ;                    else calculate verctor to docking slot
 272+ B5DC              ;                         call caluclate vector to docking slot (DOCKIT)
 273+ B5DC              ;                         jump to part 7
 274+ B5DC              ;                 end if
 275+ B5DC              ;            else case ship type
 276+ B5DC              ;                      >>escape pod>> point at planet and jump to step 7
 277+ B5DC              ;                      >>space station>> if hostile
 278+ B5DC              ;                                           then if cop counter < 7 and 6.2% chance
 279+ B5DC              ;                                                   then spawm hostile cop
 280+ B5DC              ;                                                end if
 281+ B5DC              ;                                           else
 282+ B5DC              ;                                                if 0.8% change and transporter count = 0
 283+ B5DC              ;                                                   then if 50% chance
 284+ B5DC              ;                                                           then spawn transporter
 285+ B5DC              ;                                                           else spawn shuttle
 286+ B5DC              ;                                                        end if
 287+ B5DC              ;                                                end if
 288+ B5DC              ;                                        end if
 289+ B5DC              ;                                        return
 290+ B5DC              ;                      >>targoid and no mother ship in slot list>> set random drift
 291+ B5DC              ;                                                                  return
 292+ B5DC              ;                      >>if bounty hunter flag>> if ship not hostile
 293+ B5DC              ;                                                   then if trader flag clear or 20% chance
 294+ B5DC              ;                                                        then if fugitive or offender
 295+ B5DC              ;                                                                then set hosile
 296+ B5DC              ;                                                end if
 297+ B5DC              ;                      >>Carrier and hanger slots > 0 >> if 22% chance (code to be added later)
 298+ B5DC              ;                                         then spawn agressive hosting one of types carried
 299+ B5DC              ;                                              reduce ships in hanger by 1
 300+ B5DC              ;                                              return
 301+ B5DC              ;                      >>rock hermit>> if 22% chance
 302+ B5DC              ;                                         then spawn agressive hosting one of Sidewinder, Mamba, Krait, Adder or Gecko
 303+ B5DC              ;                                              return
 304+ B5DC              ;                      >>pirate and in safe zone>> stop pirate being hostile by removing agressive and hostileflags
 305+ B5DC              ;                 end case
 306+ B5DC              ;         end if
 307+ B5DC              ;         recharge ship energy by recharge factor (TODO as a config item on ship type but by default 1)
 308+ B5DC              ; .PART 3
 309+ B5DC              ;         calulcate dot product of ship nose to us
 310+ B5DC              ; .PART 4
 311+ B5DC              ;         2.5% change ship rill roll a noticable amount
 312+ B5DC              ;         if ship has > 50% energy jump to part 6
 313+ B5DC              ;         if ship > 1/8th energy jump to part 5
 314+ B5DC              ;         if random 10% chance (i.e. ship < 1/8 energy and bails out)
 315+ B5DC              ;            then launch escape pod
 316+ B5DC              ;                 set AI to null
 317+ B5DC              ;                 set random pitch and roll
 318+ B5DC              ;                 set accelleation to 0
 319+ B5DC              ;         end if
 320+ B5DC              ; .PART 5
 321+ B5DC              ;         if ship does not have any missilesor ECM is firing to part 6
 322+ B5DC              ;            then if random > threshold for ship type (TODO as a config item on ship type)
 323+ B5DC              ;                    then if tharoid ; note this means thargoids are sensitve to ECM
 324+ B5DC              ;                            then launch thargon
 325+ B5DC              ;                            else spawn angry missle under ship
 326+ B5DC              ;                         end if
 327+ B5DC              ;                 end if
 328+ B5DC              ;            else return
 329+ B5DC              ;         end if
 330+ B5DC              ; .PART 6
 331+ B5DC              ;         if ship is not pointing at us from dot product ( < 160 , also > -32)
 332+ B5DC              ;            then jump to part 7
 333+ B5DC              ;            else if ship is pointing directly at us ( < 163 i.e. > -35)
 334+ B5DC              ;                    then fire laser at us (which reduces energy)
 335+ B5DC              ;                         cause laser damage to our ship (this will signal death is needed)
 336+ B5DC              ;                         decellerate by half as ship has lock on
 337+ B5DC              ;                         return
 338+ B5DC              ;                    else fire laser into space (which reduces energy)
 339+ B5DC              ;                 end if
 340+ B5DC              ;         end if
 341+ B5DC              ; .PART 7#
 342+ B5DC              ;        if ship is a msile targetting us
 343+ B5DC              ;           then ship turns towards us some more
 344+ B5DC              ;           else if z hi > =  3 or ( x hi or y hi > 1) , i.e. ship is far away
 345+ B5DC              ;                    then do random wiht bit 7 set
 346+ B5DC              ;                         if random < AI flag
 347+ B5DC              ;                            then   ship turned towards us
 348+ B5DC              ;                            else   ship turns away from us
 349+ B5DC              ;                         end if
 350+ B5DC              ;                end if
 351+ B5DC              ;           end if
 352+ B5DC              ;           calculate new roll, pitch and accelleration based on new targe vector
 353+ B5DC
 354+ B5DC
 355+ B5DC              ;        determine ship direction based on agression and type
 356+ B5DC              ;        set pitch and roll coutners
 357+ B5DC              ;        adjust speed depleding on relationship to us
 358+ B5DC              ; .PART 8 - new
 359+ B5DC              ;        if ship has ECM, another ECM is not active and missile targeted at it
 360+ B5DC              ;           if ship has enery of ECM energey cost + 1/8th total
 361+ B5DC              ;              if chance 25%
 362+ B5DC              ;                 then fire ECM
 363+ B5DC              ;
# file closed: ./Tactics.asm
1152  B5DC                  INCLUDE "./Drive/drive_access.asm"
# file opened: ./Drive/drive_access.asm
   1+ B5DC              M_GETSETDRV             equ $89
   2+ B5DC              F_OPEN                  equ $9a
   3+ B5DC              F_CLOSE                 equ $9b
   4+ B5DC              F_READ                  equ $9d
   5+ B5DC              F_WRITE                 equ $9e
   6+ B5DC              F_SEEK                  equ $9f
   7+ B5DC
   8+ B5DC              FA_READ                 equ $01
   9+ B5DC              FA_APPEND               equ $06
  10+ B5DC              FA_OVERWRITE            equ $0C
  11+ B5DC
  12+ B5DC F5 C5 D5 E5  GetDefaultDrive:        push	af,,bc,,de,,hl,,ix
  12+ B5E0 DD E5
  13+ B5E2 AF                                   xor	    a	; set drive. 0 is default
  14+ B5E3 CF                                   rst	    $08
  15+ B5E4 89                                   db	    $89
  16+ B5E5 32 EF B5                             ld	    (DefaultDrive),a
  17+ B5E8 DD E1 E1 D1                          pop		af,,bc,,de,,hl,,ix
  17+ B5EC C1 F1
  18+ B5EE C9                                   ret
  19+ B5EF 00           DefaultDrive:	        db	0
  20+ B5F0
  21+ B5F0              ; *******************************************************************************************************
  22+ B5F0              ;	Function:	Open a file read for reading/writing
  23+ B5F0              ;	In:		ix = filename
  24+ B5F0              ;			b  = Open filemode
  25+ B5F0              ;	ret		a  = handle, 0 on error
  26+ B5F0              ; *******************************************************************************************************
  27+ B5F0 E5 DD E5     fOpen:	                push	hl,,ix
  28+ B5F3 DD E5                                push	ix
  29+ B5F5 3A EF B5                             ld	    a,(DefaultDrive)
  30+ B5F8 CF                                   rst	    $08
  31+ B5F9 9A                                   db	    F_OPEN
  32+ B5FA DD E1 E1                             pop	    hl,,ix
  33+ B5FD C9                                   ret
  34+ B5FE
  35+ B5FE              ; *******************************************************************************************************
  36+ B5FE              ;	Function	Read bytes from the open file
  37+ B5FE              ;	In:		ix  = address to read into
  38+ B5FE              ;			bc  = amount to read
  39+ B5FE              ;	ret:		carry set = error
  40+ B5FE              ; *******************************************************************************************************
  41+ B5FE B7           fRead:                  or   	a             ; is it zero?
  42+ B5FF C8                                   ret  	z             ; if so return
  43+ B600 E5 DD E5                             push	hl,,ix   	 ; load ix into hl and save hl for later
  44+ B603 E1                                   pop		hl
  45+ B604 CF                                   rst	    $08
  46+ B605 9D                                   db	    F_READ
  47+ B606 E1                                   pop	    hl
  48+ B607 C9                                   ret
  49+ B608
  50+ B608              ; *******************************************************************************************************
  51+ B608              ;	Function	Read bytes from the open file
  52+ B608              ;	In:		ix  = address to read into
  53+ B608              ;			bc  = amount to read
  54+ B608              ;	ret:		carry set = error
  55+ B608              ; *******************************************************************************************************
  56+ B608 B7           fWrite:                 or   	a             ; is it zero?
  57+ B609 C8                                   ret  	z             ; if so return
  58+ B60A E5 DD E5                             push	hl,,ix
  59+ B60D E1                                   pop	    hl
  60+ B60E CF                                   rst	    $08
  61+ B60F 9E                                   db	    F_WRITE
  62+ B610 E1                                   pop	    hl
  63+ B611 C9                                   ret
  64+ B612
  65+ B612              ; *******************************************************************************************************
  66+ B612              ;	Function:	Close open file
  67+ B612              ;	In:		a  = handle
  68+ B612              ;	ret		a  = handle, 0 on error
  69+ B612              ; *******************************************************************************************************
  70+ B612 B7           fClose:		            or   	a             ; is it zero?
  71+ B613 C8                                   ret  	z             ; if so return
  72+ B614 CF                                   rst	    $08
  73+ B615 9B                                   db	    F_CLOSE
  74+ B616 C9                                   ret
  75+ B617
  76+ B617              ; *******************************************************************************************************
  77+ B617              ;	Function	Read bytes from the open file
  78+ B617              ;	In:		a   = file handle
  79+ B617              ;			L   = Seek mode (0=start, 1=rel, 2=-rel)
  80+ B617              ;			BCDE = bytes to seek
  81+ B617              ;	ret:		BCDE = file pos from start
  82+ B617              ; *******************************************************************************************************
  83+ B617 DD E5 E5     fSeek:                  push	ix,,hl
  84+ B61A CF                                   rst	    $08
  85+ B61B 9F                                   db	    F_SEEK
  86+ B61C E1 DD E1                             pop	    ix,,hl
  87+ B61F C9                                   ret
  88+ B620
  89+ B620              ; *******************************************************************************************************
  90+ B620              ; Init the file system
  91+ B620              ; *******************************************************************************************************
  92+ B620 CD DC B5     InitFileSystem:         call    GetDefaultDrive
  93+ B623 C9                                   ret
  94+ B624
  95+ B624              ; *******************************************************************************************************
  96+ B624              ; Function:	Load a whole file into memory	(confirmed working on real machine)
  97+ B624              ; In:		hl = file data pointer
  98+ B624              ;		ix = address to load to
  99+ B624              ; *******************************************************************************************************
 100+ B624 CD DC B5     FileLoad:	            call    GetDefaultDrive		; need to do this each time?!?!?
 101+ B627 C5 D5 F5                             push	bc,,de,,af
 102+ B62A                                      ; get file size
 103+ B62A 4E                                   ld	    c,(hl)
 104+ B62B 2C                                   inc	    l
 105+ B62C 46                                   ld	    b,(hl)
 106+ B62D 2C                                   inc	    l
 107+ B62E C5 DD E5                             push	bc,,ix			; store size, load address,
 108+ B631 E5                                   push	hl				; get name into ix
 109+ B632 DD E1                                pop	    ix
 110+ B634 06 01                                ld      b,FA_READ		; mode open for reading
 111+ B636 CD F0 B5                             call    fOpen
 112+ B639 38 17                                jr	    c,.error_opening; carry set? so there was an error opening and A=error code
 113+ B63B FE 00                                cp	    0				; was file handle 0?
 114+ B63D 28 13                                jr	    z,.error_opening; of so there was an error opening.
 115+ B63F DD E1 C1                             pop     bc,,ix          ; get load address back and size back
 116+ B642 F5                                   push	af				; remember handle
 117+ B643 CD FE B5                             call	fRead			; read data from A to address IX of length BC
 118+ B646 38 0C                                jr	    c,.error_reading
 119+ B648 F1                                   pop	    af			    ; get handle back
 120+ B649 CD 12 B6                             call	fClose			; close file
 121+ B64C 38 07                                jr	    c,.error_closing
 122+ B64E F1 D1 C1                             pop     bc,,de,,af      ; normal exit
 123+ B651 C9                                   ret
 124+ B652              ;
 125+ B652              ; On error, display error code an lock up so we can see it
 126+ B652              ;
 127+ B652 DD E1        .error_opening:         pop	ix
 128+ B654 C1           .error_reading:		    pop	bc	; don't pop a, need error code
 129+ B655
 130+ B655              .error_closing:
 131+ B655 C1           .NormalError:  	        pop	bc	; don't pop into A, return with error code
 132+ B656 D1                                   pop	de
 133+ B657 C1                                   pop	bc
 134+ B658 C9                                   ret
 135+ B659
 136+ B659              ; *******************************************************************************************************
 137+ B659              ; Function:	Save a whole file into memory	(confirmed working on real machine)
 138+ B659              ; In:		hl = file data pointer
 139+ B659              ;		ix = address to save from
 140+ B659              ;		bc = size
 141+ B659              ; *******************************************************************************************************
 142+ B659 CD DC B5     FileSave:	            call    GetDefaultDrive		; need to do this each time?!?!?
 143+ B65C C5 E5                                push	bc,,hl   			; store size& save address
 144+ B65E E5                                   push	hl		        	; get name into ix
 145+ B65F DD E1                                pop	    ix
 146+ B661 06 0C                                ld      b,FA_OVERWRITE		; mode open for writing
 147+ B663 CD F0 B5                             call    fOpen
 148+ B666 38 12                                jr	    c,.error_opening	; carry set? so there was an error opening and A=error code
 149+ B668 FE 00                                cp	    0			        ; was file handle 0?
 150+ B66A 28 0E                                jr	    z,.error_opening	; of so there was an error opening.
 151+ B66C DD E1                                pop	    ix			        ; get save address back
 152+ B66E C1                                   pop	    bc			        ; get size back
 153+ B66F F5                                   push	af			        ; remember handle
 154+ B670 CD 08 B6                             call	fWrite			    ; read data from A to address IX of length BC
 155+ B673 38 04                                jr	c,.error
 156+ B675 F1                                   pop	af			            ; get handle back
 157+ B676 CD 12 B6                             call	fClose			    ; close file
 158+ B679 C9           .error:                 ret
 159+ B67A              ;
 160+ B67A              ; On error, display error code an lock up so we can see it
 161+ B67A              ;
 162+ B67A DD E1        .error_opening:         pop	ix
 163+ B67C C1                                   pop	bc	; don't pop a, need error code
 164+ B67D C9                                   ret
 165+ B67E
# file closed: ./Drive/drive_access.asm
1153  B67E
1154  B67E                  INCLUDE "./Menus/common_menu.asm"
# file opened: ./Menus/common_menu.asm
   1+ B67E 43 4F 4D 4D  txt_commander 			DB "COMMANDER",0
   1+ B682 41 4E 44 45
   1+ B686 52 00
   2+ B688 49 4E 56 45  txt_inventory 			DB "INVENTORY",0
   2+ B68C 4E 54 4F 52
   2+ B690 59 00
   3+ B692 50 72 65 73  txt_present_system		DB "Present System   :",0
   3+ B696 65 6E 74 20
   3+ B69A 53 79 73 74
   3+ B69E 65 6D 20 20
   3+ B6A2 20 3A 00
   4+ B6A5 48 79 70 65  txt_hyperspace_system	DB "Hyperspace System:",0
   4+ B6A9 72 73 70 61
   4+ B6AD 63 65 20 53
   4+ B6B1 79 73 74 65
   4+ B6B5 6D 3A 00
   5+ B6B8 43 6F 6E 64  txt_condition			DB "Condition   :",0
   5+ B6BC 69 74 69 6F
   5+ B6C0 6E 20 20 20
   5+ B6C4 3A 00
   6+ B6C6 46 75 65 6C  txt_fuel				DB "Fuel        :",0
   6+ B6CA 20 20 20 20
   6+ B6CE 20 20 20 20
   6+ B6D2 3A 00
   7+ B6D4 43 61 73 68  txt_cash				DB "Cash        :",0
   7+ B6D8 20 20 20 20
   7+ B6DC 20 20 20 20
   7+ B6E0 3A 00
   8+ B6E2 4C 65 67 61  txt_legal_status		DB "Legal Status:",0
   8+ B6E6 6C 20 53 74
   8+ B6EA 61 74 75 73
   8+ B6EE 3A 00
   9+ B6F0 52 61 74 69  txt_rating				DB "Rating      :",0
   9+ B6F4 6E 67 20 20
   9+ B6F8 20 20 20 20
   9+ B6FC 3A 00
  10+ B6FE 45 51 55 49  txt_equipment			DB "EQUIPMENT:",0
  10+ B702 50 4D 45 4E
  10+ B706 54 3A 00
  11+ B709
  12+ B709 30 30 2E 30  txt_fuel_level			DB "00.0 Light Years",0
  12+ B70D 20 4C 69 67
  12+ B711 68 74 20 59
  12+ B715 65 61 72 73
  12+ B719 00
  13+ B71A 58 58 58 58  txt_cash_amount			DB "XXXXXXXXXX",0
  13+ B71E 58 58 58 58
  13+ B722 58 58 00
  14+ B725 2E           txt_cash_decimal        DB "."
  15+ B726 58 20 43 72  txt_cash_fraction       DB "X Cr",0
  15+ B72A 00
  16+ B72B
  17+ B72B              txt_status_colour		equ $FF
  18+ B72B
  19+ B72B              print_boiler_text_l2:
  20+ B72B              ; ">print_boilder_text hl = text structure, b = message count"
  21+ B72B              BoilerTextLoop:
  22+ B72B C5           	push		bc			; Save Message Count loop value
  23+ B72C 4E           	ld			c,(hl)		; Get Row into b
  24+ B72D 23           	inc			hl
  25+ B72E 46           	ld			b,(hl)		; Get Col into b
  26+ B72F 23           	inc			hl
  27+ B730 5E           	ld			e,(hl)		; Get text address Lo into E
  28+ B731 23           	inc			hl
  29+ B732 56           	ld			d,(hl)		; Get text address Hi into E
  30+ B733 23           	inc			hl
  31+ B734 E5           	push		hl			; Save present HL to stack as this is the address for the next message
  32+ B735 EB           	ex			de,hl		; now hl = address of text data
  33+ B736 1E FF        	ld			e,txt_status_colour
  34+ B738                  MMUSelectLayer2
  34+ B738 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
  35+ B73C CD C8 E0     	call		l1_print_at
  36+ B73F E1           	pop			hl
  37+ B740 C1           	pop			bc
  38+ B741 10 E8        	djnz		BoilerTextLoop
  39+ B743 C9           	ret
  40+ B744
  41+ B744
  42+ B744              print_boiler_text:
  43+ B744              ; ">print_boilder_text hl = text structure, b = message count"
  44+ B744              .BoilerTextLoop:
  45+ B744 C5           	push		bc			; Save Message Count loop value
  46+ B745 4E           	ld			c,(hl)		; Get Row into b
  47+ B746 23           	inc			hl
  48+ B747 46           	ld			b,(hl)		; Get Col into b
  49+ B748 23           	inc			hl
  50+ B749 5E           	ld			e,(hl)		; Get text address Lo into E
  51+ B74A 23           	inc			hl
  52+ B74B 56           	ld			d,(hl)		; Get text address Hi into E
  53+ B74C 23           	inc			hl
  54+ B74D E5           	push		hl			; Save present HL to stack as this is the address for the next message
  55+ B74E EB           	ex			de,hl		; now hl = address of text data
  56+ B74F 1E FF        	ld			e,txt_status_colour
  57+ B751 C5           	push		bc
  58+ B752 D1           	pop			de
  59+ B753 CD C8 E0     	call		l1_print_at
  60+ B756 E1           	pop			hl
  61+ B757 C1           	pop			bc
  62+ B758 10 EA        	djnz		.BoilerTextLoop
  63+ B75A C9           	ret
  64+ B75B
  65+ B75B              GetFuelLevel:           INCLUDE "Menus/get_fuel_level_inlineinclude.asm"
# file opened: ./Menus/get_fuel_level_inlineinclude.asm
   1++B75B
   2++B75B
   3++B75B 3A 75 9D     	ld		a,(Fuel)
   4++B75E 11 09 B7     	ld		de,txt_fuel_level
   5++B761 0E 9C        	ld	c, -100
   6++B763 CD 6D B7     	call	.Num1
   7++B766 0E F6        	ld	c,-10
   8++B768 CD 6D B7     	call	.Num1
   9++B76B 0E FF        	ld	c,-1
  10++B76D              .Num1:
  11++B76D 06 2F        	ld	b,'0'-1
  12++B76F              .Num2:
  13++B76F 04           	inc		b
  14++B770 81           	add		a,c
  15++B771 38 FC        	jr		c,.Num2
  16++B773 91           	sub 	c
  17++B774 C5           	push	bc
  18++B775 F5           	push	af
  19++B776 79           	ld		a,c
  20++B777 FE FF        	cp		-1
  21++B779 CC 82 B7     	call	z,.InsertDot
  22++B77C 78           	ld		a,b
  23++B77D 12           	ld		(de),a
  24++B77E 13           	inc		de
  25++B77F F1           	pop		af
  26++B780 C1           	pop		bc
  27++B781 C9           	ret
  28++B782              .InsertDot:
  29++B782 3E 2E        	ld		a,'.'
  30++B784 12           	ld		(de),a
  31++B785 13           	inc		de
  32++B786 C9           	ret
  33++B787
# file closed: ./Menus/get_fuel_level_inlineinclude.asm
  66+ B787
  67+ B787 2A 71 9D     GetCash:                ld      hl,(Cash)
  68+ B78A EB                                   ex      de,hl
  69+ B78B DD 2A 73 9D                          ld      ix,(Cash+2)
  70+ B78F FD 21 1A B7                          ld		iy,txt_cash_amount
  71+ B793 CD 11 AF                             call 	DispDEIXtoIY	; This will write out with 0 termination after last digit
  72+ B796 FD 7E 00     .ShiftDecimalDigit:     ld		a,(IY+0)				;Push last digit to post decimal
  73+ B799 32 26 B7                             ld		(txt_cash_fraction),a
  74+ B79C 21 1B B7     .UpdateInteger:         ld		hl,txt_cash_amount+1	; Now was there only 1 digit
  75+ B79F 7E                                   ld		a,(hl)					; if so we leave it alone so its "0.0"
  76+ B7A0 FE 00                                cp		0
  77+ B7A2 C8                                   ret		z
  78+ B7A3 FD 36 00 00                          ld		(IY),0					; Else we erase last digit as it went to fraction
  79+ B7A7 C9                                   ret
  80+ B7A8
# file closed: ./Menus/common_menu.asm
1155  B7A8              ; ARCHIVED INCLUDE "Menus/draw_fuel_and_crosshair.asm"
1156  B7A8              ;INCLUDE "./title_page.asm"
1157  B7A8
1158  B7A8              ; Blocks dependent on variables in Universe Banks
1159  B7A8              ; Bank 49
1160  B7A8              ;    SEG RESETUNIVSEG
1161  B7A8              ;seg     CODE_SEG,       4:              $0000,       $8000                 ; flat address
1162  B7A8              ;seg     RESETUNIVSEG,   BankResetUniv:  StartOfBank, ResetUniverseAddr
1163  B7A8
1164  B7A8              ;	ORG ResetUniverseAddr
1165  B7A8              ;INCLUDE "./GameEngine/resetUniverse.asm"
1166  B7A8              ; Bank 50
1167  B7A8
1168  B7A8
1169  B7A8
1170  B7A8                  SLOT    MenuShrChtAddr
1171  B7A8                  PAGE    BankMenuShrCht
1172  B7A8              	ORG     MenuShrChtAddr,BankMenuShrCht
1173  C000                  INCLUDE "./Menus/short_range_chart_menu.asm"
# file opened: ./Menus/short_range_chart_menu.asm
   1+ C000
   2+ C000 53 68 6F 72  short_range_page_marker  DB "ShortRange  PG50"
   2+ C004 74 52 61 6E
   2+ C008 67 65 20 20
   2+ C00C 50 47 35 30
   3+ C010
   4+ C010 30 02 77 A5  short_range_boiler_text	DW $0230,TextBuffer
   5+ C014              short_range_header		equ 12
   6+ C014              src_xy_centre			equ $6080
   7+ C014              src_x_centre			equ $80
   8+ C014              src_y_centre			equ $60
   9+ C014              local_chart_star_colour	equ 216
  10+ C014 00 00        local_dx				dw 0
  11+ C016 00 00        local_dy				dw 0
  12+ C018              local_max_range_x		equ 20
  13+ C018              local_max_range_y		equ $26
  14+ C018 00           local_name_row			db	0
  15+ C019 00           local_name_col			db	0
  16+ C01A              local_label_shift_x		equ	3
  17+ C01A              local_label_shift_y		equ	5
  18+ C01A
  19+ C01A 44 69 73 74  src_distance            DB "Distance: "
  19+ C01E 61 6E 63 65
  19+ C022 3A 20
  20+ C024 30 30 30     src_dist_amount         DB "000"
  21+ C027 2E           src_decimal             DB "."
  22+ C028 30           src_fraction            DB "0"
  23+ C029 20 4C 69 67  src_dis_ly              DB " Light Years",0
  23+ C02D 68 74 20 59
  23+ C031 65 61 72 73
  23+ C035 00
  24+ C036 20 20 30 2E  src_default_dist        DB "  0.0"
  24+ C03A 30
  25+ C03B
  26+ C03B 00 00 00...  src_distance_val        DS  6
  27+ C041              src_fill_buffer_len     EQU 32
  28+ C041              src_fill_buffer_size    EQU 4 * src_fill_buffer_len                          ; up to 32 labels topx topy lengthx spare
  29+ C041 00 00 00...  src_printed_text        DS  src_fill_buffer_size                             ; space for occupied cells may move to bit flags later TODO
  30+ C0C1 00           src_buffer_size         DB  0
  31+ C0C2              ;----------------------------------------------------------------------------------------------------------------------------------
  32+ C0C2              SRM_print_boiler_text:  INCLUDE "Menus/print_boiler_text_inlineInclude.asm"
# file opened: ./Menus/print_boiler_text_inlineInclude.asm
   1++C0C2
   2++C0C2              ;">print_boilder_text hl = text structure, b = message count"
   3++C0C2              .BoilerTextLoop:
   4++C0C2 C5           	push		bc			; Save Message Count loop value
   5++C0C3 4E           	ld			c,(hl)		; Get Row into b
   6++C0C4 23           	inc			hl
   7++C0C5 46           	ld			b,(hl)		; Get Col into b
   8++C0C6 23           	inc			hl
   9++C0C7 5E           	ld			e,(hl)		; Get text address Lo into E
  10++C0C8 23           	inc			hl
  11++C0C9 56           	ld			d,(hl)		; Get text address Hi into E
  12++C0CA 23           	inc			hl
  13++C0CB E5           	push		hl			; Save present HL to stack as this is the address for the next message
  14++C0CC EB           	ex			de,hl		; now hl = address of text data
  15++C0CD 1E FF        	ld			e,txt_status_colour
  16++C0CF C5           	push		bc
  17++C0D0 D1           	pop			de
  18++C0D1                  MMUSelectLayer1
  18++C0D1 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
  19++C0D5 CD C8 E0     	call		l1_print_at
  20++C0D8 E1           	pop			hl
  21++C0D9 C1           	pop			bc
  22++C0DA 10 E6        	djnz		.BoilerTextLoop
  23++C0DC C9           	ret
  24++C0DD
# file closed: ./Menus/print_boiler_text_inlineInclude.asm
  33+ C0DD              ;----------------------------------------------------------------------------------------------------------------------------------
  34+ C0DD              SRM_draw_chart_circle_and_crosshair:
  35+ C0DD ED 4B 2F 9A                          ld		bc,(PresentSystemX)				; bc = present system
  36+ C0E1 01 80 60                             ld		bc,src_xy_centre					; must be ordered x y in data
  37+ C0E4                                      MMUSelectSpriteBank
  37+ C0E4 ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
  38+ C0E8 CD F5 E0                             call	sprite_local_cursor
  39+ C0EB 3A 75 9D                             ld		a,(Fuel)
  40+ C0EE 57                                   ld		d,a
  41+ C0EF 1E FF                                ld		e,$FF
  42+ C0F1                                      MMUSelectLayer2
  42+ C0F1 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
  43+ C0F5 CD 56 E7                             call	l2_draw_circle
  44+ C0F8 C9                                   ret
  45+ C0F9              ; TODO MOVE CURSOR CODE
  46+ C0F9              ;----------------------------------------------------------------------------------------------------------------------------------
  47+ C0F9              SRM_draw_hyperspace_cross_hair:
  48+ C0F9 ED 4B 31 9A                          ld		bc,(TargetSystemX)              ; bc = selected jump
  49+ C0FD ED 5B 2F 9A                          ld		de,(PresentSystemX)
  50+ C101 0E 80                                ld		c,src_x_centre
  51+ C103 06 60                                ld		b,src_y_centre
  52+ C105                                      MMUSelectSpriteBank
  52+ C105 ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
  53+ C109 CD FD E0                             call	sprite_local_hyper_cursor
  54+ C10C C9                                   ret
  55+ C10D              ;----------------------------------------------------------------------------------------------------------------------------------
  56+ C10D 3A 1C 9A     src_get_name:           ld      a,(Galaxy)
  57+ C110                                      MMUSelectGalaxyA
  57+ C110 ED 92 57    >                     nextreg GalaxyDataMMU,       a
  58+ C113 ED 4B 31 9A                          ld      bc,(TargetSystemX)
  59+ C117 ED 43 5B E8                          ld      (GalaxyTargetSystem),bc
  60+ C11B CD 65 FC                             call    galaxy_system_under_cursor
  61+ C11E FE 00                                cp      0
  62+ C120 C8                                   ret     z
  63+ C121 CD 82 F6                             call	GetDigramWorkingSeed
  64+ C124 21 3D A6                             ld		hl,name_expanded
  65+ C127 CD 98 A5                             call	CapitaliseString
  66+ C12A 21 3D A6                             ld		hl, name_expanded
  67+ C12D 3E FF                                ld      a,$FF
  68+ C12F C9                                   ret
  69+ C130              ;----------------------------------------------------------------------------------------------------------------------------------
  70+ C130              SRM_update_hyperspace_cross_hair:
  71+ C130 ED 4B 31 9A                          ld		bc,(TargetSystemX)              ; bc = selected jump
  72+ C134 ED 5B 2F 9A                          ld		de,(PresentSystemX)
  73+ C138 79                                   ld		a,c                             ; a = target x pos
  74+ C139 93                                   sub		e                               ; a = target x - present x
  75+ C13A F2 4B C1                             jp      p,.NoFlipX                      ; if > 0 skip next bit
  76+ C13D ED 44                                neg                                     ; c = a = abs a * 4
  77+ C13F CB 27                                sla		a                               ; .
  78+ C141 CB 27                                sla		a                               ; .
  79+ C143 4F                                   ld      c,a                             ;  .
  80+ C144 3E 80                                ld      a,src_x_centre                  ; c = a = centre screen - c
  81+ C146 91                                   sub     c                               ; .
  82+ C147 4F                                   ld      c,a                             ; .
  83+ C148 C3 52 C1                             jp      .fixY                           ;. now do Y
  84+ C14B CB 27        .NoFlipX:               sla		a
  85+ C14D CB 27                                sla		a
  86+ C14F C6 80                                add		a,src_x_centre
  87+ C151 4F                                   ld      c,a
  88+ C152 78           .fixY:                  ld		a,b                             ; for Y its * 2
  89+ C153 92                                   sub		d
  90+ C154 F2 63 C1                             jp      p,.NoFlipY
  91+ C157 ED 44                                neg
  92+ C159 CB 27                                sla     a
  93+ C15B 47                                   ld      b,a
  94+ C15C 3E 60                                ld      a,src_y_centre
  95+ C15E 90                                   sub     b
  96+ C15F 47                                   ld      b,a
  97+ C160 C3 68 C1                             jp      .RedrawSprite
  98+ C163 CB 27        .NoFlipY                sla		a
  99+ C165 C6 60                                add		a,src_y_centre
 100+ C167 47                                   ld		b,a
 101+ C168              .RedrawSprite:          MMUSelectSpriteBank
 101+ C168 ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
 102+ C16C CD D0 E0                             call	sprite_lhc_move
 103+ C16F CD A1 C1                             call    src_name_current
 104+ C172 C9                                   ret
 105+ C173
 106+ C173 26 08        src_clear_name_area:    ld      h,8
 107+ C175 11 E3 A0                             ld      de,$A000 | COLOUR_TRANSPARENT
 108+ C178 01 0A A8                             ld      bc,$A80A
 109+ C17B E5           .ClearLoop:             push    hl
 110+ C17C D5                                   push    de
 111+ C17D C5                                   push    bc
 112+ C17E                                      MMUSelectLayer2
 112+ C17E ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 113+ C182 CD 60 E2                             call	l2_draw_horz_line
 114+ C185 C1                                   pop     bc
 115+ C186 D1                                   pop     de
 116+ C187 E1                                   pop     hl
 117+ C188 04                                   inc     b
 118+ C189 25                                   dec     h
 119+ C18A 20 EF                                jr      nz,.ClearLoop
 120+ C18C C9                                   ret
 121+ C18D              ;----------------------------------------------------------------------------------------------------------------------------------
 122+ C18D 3A 1C 9A     src_system_undercursor: ld      a,(Galaxy)
 123+ C190                                      MMUSelectGalaxyA
 123+ C190 ED 92 57    >                     nextreg GalaxyDataMMU,       a
 124+ C193 ED 4B 31 9A                          ld      bc,(TargetSystemX)
 125+ C197 ED 43 5B E8                          ld      (GalaxyTargetSystem),bc
 126+ C19B CD 65 FC                             call    galaxy_system_under_cursor
 127+ C19E FE 00                                cp      0
 128+ C1A0 C8                                   ret     z
 129+ C1A1 CD 0D C1     src_name_current:       call    src_get_name
 130+ C1A4 FE 00                                cp      0
 131+ C1A6 C8                                   ret     z
 132+ C1A7 E5                                   push    hl
 133+ C1A8 F5                                   push    af
 134+ C1A9 CD 73 C1                             call    src_clear_name_area
 135+ C1AC F1                                   pop     af
 136+ C1AD E1                                   pop     hl
 137+ C1AE 01 0A A8                             ld      bc,$A80A
 138+ C1B1 1E FF                                ld		e,$FF
 139+ C1B3                                      MMUSelectLayer2
 139+ C1B3 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 140+ C1B7 CD CF E1                             call	l2_print_7at
 141+ C1BA CD CD C1                             call    src_calc_distance
 142+ C1BD 21 1A C0                             ld      hl,src_distance
 143+ C1C0 01 0A B0                             ld      bc,$B00A
 144+ C1C3 1E FF                                ld		e,$FF
 145+ C1C5                                      MMUSelectLayer2
 145+ C1C5 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 146+ C1C9 CD CF E1                             call	l2_print_7at
 147+ C1CC C9                                   ret
 148+ C1CD              ;----------------------------------------------------------------------------------------------------------------------------------
 149+ C1CD 3A 1C 9A     src_calc_distance:      ld      a,(Galaxy)                                      ; Default in 0 distance
 150+ C1D0                                      MMUSelectGalaxyA
 150+ C1D0 ED 92 57    >                     nextreg GalaxyDataMMU,       a
 151+ C1D3 11 24 C0                             ld      de,src_dist_amount
 152+ C1D6 21 36 C0                             ld      hl,src_default_dist
 153+ C1D9 ED A0                                ldi
 154+ C1DB ED A0                                ldi
 155+ C1DD ED A0                                ldi
 156+ C1DF ED A0                                ldi
 157+ C1E1 ED A0                                ldi
 158+ C1E3 ED 4B 2F 9A                          ld      bc,(PresentSystemX)
 159+ C1E7 ED 43 57 E8                          ld      (GalaxyPresentSystem),bc
 160+ C1EB ED 4B 31 9A                          ld      bc,(TargetSystemX)
 161+ C1EF ED 43 59 E8                          ld      (GalaxyDestinationSystem),bc
 162+ C1F3 CD F8 FB                             call    galaxy_find_distance                            ; get distance into HL
 163+ C1F6 DD 2A B8 99                          ld      ix,(Distance)
 164+ C1FA 11 00 00                             ld      de,0
 165+ C1FD FD 21 3B C0                          ld      iy,src_distance_val
 166+ C201 CD 11 AF                             call    DispDEIXtoIY                                    ; use DEIX as distance and write to string at location IY
 167+ C204 FD E5                                push    iy
 168+ C206 E1                                   pop     hl                                              ; hl = iy
 169+ C207 11 3B C0                             ld      de,src_distance_val
 170+ C20A 7E                                   ld		a,(hl)				                            ;Push last digit to post decimal
 171+ C20B 32 28 C0                             ld		(src_fraction),a
 172+ C20E 2B                                   dec     hl
 173+ C20F CD 35 AD                             call    compare16HLDE
 174+ C212 38 18                                jr      c,.done_number
 175+ C214 7E                                   ld      a,(hl)
 176+ C215 32 26 C0                             ld      (src_dist_amount+2),a
 177+ C218 2B                                   dec     hl
 178+ C219 CD 35 AD                             call    compare16HLDE
 179+ C21C 38 0E                                jr      c,.done_number
 180+ C21E 7E                                   ld      a,(hl)
 181+ C21F 32 25 C0                             ld      (src_dist_amount+1),a
 182+ C222 2B                                   dec     hl
 183+ C223 CD 35 AD                             call    compare16HLDE
 184+ C226 38 04                                jr      c,.done_number
 185+ C228 7E                                   ld      a,(hl)
 186+ C229 32 24 C0                             ld      (src_dist_amount),a
 187+ C22C C9           .done_number:           ret
 188+ C22D
 189+ C22D 00 00        PosScan1                DW      0
 190+ C22F 00 00        PosScan2                DW      0
 191+ C231              ; bc = row col, d = xlength e = y length
 192+ C231              ; Check logic simplies to , if 1 = bc and 2 = de:
 193+ C231              ; 12   X1            X2    OK         2 LT X1
 194+ C231              ; 1    X1  2         X2    FAIL       1 LT X1 && 2 GT X1 && 2 LT X2
 195+ C231              ;      X1  12        X2    FAIL       1 GT X1 && 1 LT X2 && 2 GT X1 && 2 LT X2
 196+ C231              ;      X1  1         X2 2  FAIL       1 GT X1 && 1 LT X2 && 2 GT X2
 197+ C231              ;      X1            X2 12 OK         1 GT X2
 198+ C231 16 07        FreeSlotCheck:          ld      d,7
 199+ C233 ED 30                                mul
 200+ C235 79                                   ld      a,c
 201+ C236 83                                   add     e
 202+ C237 30 02                                jr      nc,.NoOverflow
 203+ C239 3E FF        .Overflow:              ld      a,$FF
 204+ C23B 5F           .NoOverflow:            ld      e,a                     ; e now equals max length in pixels
 205+ C23C 78                                   ld      a,b
 206+ C23D C6 08                                add     8
 207+ C23F 57                                   ld      d,a                     ; e = max height
 208+ C240 ED 43 2D C2                          ld      (PosScan1),bc
 209+ C244 ED 53 2F C2                          ld      (PosScan2),de
 210+ C248 DD 21 41 C0  .CheckBoxes:            ld      ix,src_printed_text
 211+ C24C 3A C1 C0                             ld      a,(src_buffer_size)
 212+ C24F FE 00                                cp      0
 213+ C251 28 3C                                jr      z,.SafeToPrint
 214+ C253 60                                   ld      h,b                     ; h will substite for row b as b is used in dnjz
 215+ C254 47                                   ld      b,a
 216+ C255 DD 7E 02     .CheckBoxLoop:          ld      a,(ix+2)
 217+ C258 FE 00                                cp      0                       ; zerolength, not applicable
 218+ C25A 28 29                                jr      z,.NoBox
 219+ C25C 3A 2D C2     .CheckRow:              ld      a,(PosScan1)
 220+ C25F 3C                                   inc     a
 221+ C260                                      JumpIfAGTENusng (ix+2), .NoBox  ; X1 >= BottomLeftX
 221+ C260 DD BE 02    >                        cp     (ix+2)
 221+ C263 D2 85 C2    >                        jp		nc,.NoBox
 222+ C266 3A 2F C2                             ld      a,(PosScan2)
 223+ C269                                      JumpIfALTNusng (ix+0),  .NoBox   ; X2 <= TopRightX
 223+ C269 DD BE 00    >                        cp      (ix+0)
 223+ C26C DA 85 C2    >                        jp		c, .NoBox
 224+ C26F 3A 2E C2     .SafeToPrintX:          ld      a,(PosScan1+1)
 225+ C272 3C                                   inc     a
 226+ C273                                      JumpIfAGTENusng (ix+3), .NoBox  ; Y1 >= BottomLeftY
 226+ C273 DD BE 03    >                        cp     (ix+3)
 226+ C276 D2 85 C2    >                        jp		nc,.NoBox
 227+ C279 3A 30 C2                             ld      a,(PosScan2+1)
 228+ C27C                                      JumpIfALTNusng (ix+1),  .NoBox  ; Y2 <= TopRightY
 228+ C27C DD BE 01    >                        cp      (ix+1)
 228+ C27F DA 85 C2    >                        jp		c, .NoBox
 229+ C282 3E FF        .MatchedBox:            ld      a,$FF
 230+ C284 C9                                   ret
 231+ C285 DD 23        .NoBox:                 inc     ix
 232+ C287 DD 23                                inc     ix
 233+ C289 DD 23                                inc     ix
 234+ C28B DD 23                                inc     ix
 235+ C28D 10 C6                                djnz    .CheckBoxLoop
 236+ C28F 21 41 C0     .SafeToPrint:           ld      hl,src_printed_text
 237+ C292 3A C1 C0                             ld      a,(src_buffer_size)
 238+ C295 57                                   ld      d,a
 239+ C296 1E 04                                ld      e,4
 240+ C298 ED 30                                mul
 241+ C29A 19                                   add     hl,de
 242+ C29B ED 5B 2D C2                          ld      de,(PosScan1)
 243+ C29F 73 23 72 2B                          ld      (hl),de
 244+ C2A3 23                                   inc     hl
 245+ C2A4 23                                   inc     hl
 246+ C2A5 ED 5B 2F C2                          ld      de,(PosScan2)
 247+ C2A9 73 23 72 2B                          ld      (hl),de
 248+ C2AD 21 C1 C0                             ld      hl,src_buffer_size
 249+ C2B0 34                                   inc     (hl)
 250+ C2B1 AF                                   xor     a
 251+ C2B2 C9                                   ret
 252+ C2B3
 253+ C2B3 CD 3F 9E     src_label_ssytem:       call	copy_system_to_working
 254+ C2B6 3A 1C 9A                             ld      a,(Galaxy)
 255+ C2B9                                      MMUSelectGalaxyA
 255+ C2B9 ED 92 57    >                     nextreg GalaxyDataMMU,       a
 256+ C2BC CD 82 F6                             call	GetDigramWorkingSeed
 257+ C2BF 21 3D A6                             ld		hl,name_expanded
 258+ C2C2 CD 98 A5                             call	CapitaliseString
 259+ C2C5 3A 18 C0                             ld		a,(local_name_row)
 260+ C2C8 D6 05                                sub		local_label_shift_y
 261+ C2CA 47                                   ld		b,a					    ; b = effective pixel row
 262+ C2CB 3A 19 C0                             ld		a,(local_name_col)
 263+ C2CE C6 03                                add		a,local_label_shift_x
 264+ C2D0 4F                                   ld		c,a                     ; c = effective pixel col
 265+ C2D1 1E 00        .GetStringName:         ld      e,0
 266+ C2D3 21 3D A6                             ld      hl,name_expanded
 267+ C2D6 7E           .getStringLoop:         ld      a,(hl)
 268+ C2D7 23                                   inc     hl
 269+ C2D8 1C                                   inc     e
 270+ C2D9 FE 00                                cp      0                       ; String must have a terminator to work
 271+ C2DB 20 F9                                jr      nz,.getStringLoop
 272+ C2DD 16 08                                ld      d,8
 273+ C2DF C5                                   push    bc
 274+ C2E0 CD 31 C2                             call    FreeSlotCheck           ; first attemps
 275+ C2E3 C1                                   pop     bc
 276+ C2E4 FE 00                                cp      0
 277+ C2E6 28 19                                jr      z,.OKToPrint
 278+ C2E8 78                                   ld      a,b
 279+ C2E9 C6 08                                add     8
 280+ C2EB 47                                   ld      b,a
 281+ C2EC C5                                   push    bc
 282+ C2ED CD 31 C2                             call    FreeSlotCheck           ; attempt down 8 pixels attemps
 283+ C2F0 C1                                   pop     bc
 284+ C2F1 FE 00                                cp      0
 285+ C2F3 28 0C                                jr      z,.OKToPrint
 286+ C2F5 78                                   ld      a,b
 287+ C2F6 D6 10                                sub     16
 288+ C2F8 47                                   ld      b,a
 289+ C2F9 C5                                   push    bc
 290+ C2FA CD 31 C2                             call    FreeSlotCheck           ; attempt down 8 pixels attemps
 291+ C2FD C1                                   pop     bc
 292+ C2FE FE 00                                cp      0
 293+ C300 C0                                   ret     nz
 294+ C301 1E FF        .OKToPrint:             ld		e,$FF
 295+ C303 21 3D A6                             ld		hl,name_expanded
 296+ C306                                      MMUSelectLayer2
 296+ C306 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 297+ C30A CD CF E1                             call	l2_print_7at
 298+ C30D C9                                   ret
 299+ C30E
 300+ C30E              name_if_possible:
 301+ C30E 3A 18 C0     SRCpixelRowToRefRow:    ld		a,(local_name_row)
 302+ C311 D6 05                                sub		local_label_shift_y
 303+ C313 47                                   ld		b,a					; b = effective pixel row
 304+ C314 CB 3F                                srl		a
 305+ C316 CB 3F                                srl		a
 306+ C318 CB 3F                                srl		a					; divide by 8 to get character row
 307+ C31A                                  ;	sub		2					; don;t write over header TODO tweaks
 308+ C31A 21 ED 98                             ld		hl,IndexedWork
 309+ C31D ED 31                                add		hl,a
 310+ C31F 7E                                   ld		a,(hl)
 311+ C320 FE 00                                cp		0
 312+ C322 20 04                                jr		nz, SRCtryAbove		; if its not empty don't print *(need to test +-1 row TODO)
 313+ C324 36 01                                ld		(hl),1				; flag as in use
 314+ C326 18 12                                jr		SRCFoundRow
 315+ C328 2B           SRCtryAbove:            dec		hl
 316+ C329 7E                                   ld		a,(hl)
 317+ C32A FE 00                                cp		0
 318+ C32C 20 04                                jr		nz, SRCtryBelow		; if its not empty don't print *(need to test +-1 row TODO)
 319+ C32E 36 01                                ld		(hl),1				; flag as in use
 320+ C330 18 08                                jr		SRCFoundRow
 321+ C332 23           SRCtryBelow:            inc		hl
 322+ C333 23                                   inc		hl
 323+ C334 7E                                   ld		a,(hl)
 324+ C335 FE 00                                cp		0
 325+ C337 C8                                   ret		z
 326+ C338 36 01                                ld		(hl),1				; flag as in use
 327+ C33A CD 3F 9E     SRCFoundRow:            call	copy_system_to_working
 328+ C33D 3A 1C 9A     SRCSmallSizeName:       ld      a,(Galaxy)
 329+ C340                                      MMUSelectGalaxyA
 329+ C340 ED 92 57    >                     nextreg GalaxyDataMMU,       a
 330+ C343 CD 82 F6                             call	GetDigramWorkingSeed
 331+ C346 21 3D A6     SRCCapitaliseName:      ld		hl,name_expanded
 332+ C349 CD 98 A5                             call	CapitaliseString
 333+ C34C 21 3D A6     SRCPrintName:           ld		hl, name_expanded
 334+ C34F 3A 18 C0                             ld		a,(local_name_row)
 335+ C352 D6 05                                sub		local_label_shift_y
 336+ C354 47                                   ld		b,a					; b = effective pixel row
 337+ C355 3A 19 C0                             ld		a,(local_name_col)
 338+ C358 C6 03                                add		a,local_label_shift_x
 339+ C35A 4F                                   ld		c,a
 340+ C35B 1E FF                                ld		e,$FF
 341+ C35D                                      MMUSelectLayer2
 341+ C35D ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 342+ C361 CD CF E1                             call	l2_print_7at
 343+ C364 C9                                   ret
 344+ C365
 345+ C365 AF           plot_local_stars:       xor		a
 346+ C366 32 2C 99                             ld		(XSAV),a
 347+ C369 DD 21 16 E0                          ld      ix,galaxy_data
 348+ C36D 32 C1 C0                             ld      (src_buffer_size),a
 349+ C370 21 41 C0     SRCClearNameList:       ld		hl,src_printed_text
 350+ C373 11 80 00                             ld		de,src_fill_buffer_size
 351+ C376 CD 28 95                             call	memfill_dma
 351+ C379
 352+ C379 AF           SRCCounterLoop:         xor		a
 353+ C37A 3A 1C 9A                             ld      a,(Galaxy)
 354+ C37D                                      MMUSelectGalaxyA
 354+ C37D ED 92 57    >                     nextreg GalaxyDataMMU,       a
 355+ C380 DD E5                                push    ix
 356+ C382 DD E5                                push    ix
 357+ C384 E1                                   pop     hl
 358+ C385 11 13 99                             ld      de,SystemSeed
 359+ C388 CD 12 9E                             call    copy_seed
 360+ C38B 3A 14 99                             ld		a,(SystemSeed+1)				; QQ15+1 \ seed Ycoord of star
 361+ C38E 4F                                   ld		c,a
 362+ C38F 3A 30 9A     SRCcalcLocaldy:         ld		a,(PresentSystemY)
 363+ C392 47                                   ld		b,a								; so b holds Y ccord
 364+ C393 79                                   ld		a,c
 365+ C394 90                                   sub		b
 366+ C395 CB 7F                                bit		7,a
 367+ C397 28 02                                jr		z,SRCpositivedy
 368+ C399 ED 44        SRCnegativedy:          neg
 369+ C39B FE 26        SRCpositivedy:          cp		local_max_range_y
 370+ C39D 30 48                                jr		nc,SRCtoofar
 371+ C39F 3A 16 99     SRCcalcLocaldx:         ld		a,(SystemSeed+3)				; QQ15+3 \ seed Xcoord of star
 372+ C3A2 4F                                   ld		c,a
 373+ C3A3 3A 2F 9A                             ld		a,(PresentSystemX)
 374+ C3A6 47                                   ld		b,a								; so b holds Y ccord
 375+ C3A7 79                                   ld		a,c
 376+ C3A8 90                                   sub		b
 377+ C3A9 CB 7F                                bit		7,a
 378+ C3AB 28 02                                jr		z,SRCpositivedx
 379+ C3AD ED 44        SRCnegativedx:          neg
 380+ C3AF FE 14        SRCpositivedx:          cp		local_max_range_x
 381+ C3B1 30 34                                jr		nc,SRCtoofar
 382+ C3B3 3A 14 99     SRCOKToPlot             ld		a,(SystemSeed+1)
 383+ C3B6 21 30 9A                             ld		hl,PresentSystemY
 384+ C3B9 96                                   sub		(hl)
 385+ C3BA CB 27                                sla		a								; * 2
 386+ C3BC C6 60                                add		src_y_centre
 387+ C3BE 32 18 C0                             ld		(local_name_row),a
 388+ C3C1 47                                   ld		b,a
 389+ C3C2 3A 16 99                             ld		a,(SystemSeed+3)
 390+ C3C5 21 2F 9A                             ld		hl,PresentSystemX
 391+ C3C8 96                                   sub		(hl)
 392+ C3C9 CB 27                                sla		a
 393+ C3CB CB 27                                sla		a								; * 4
 394+ C3CD C6 80                                add		src_x_centre
 395+ C3CF 32 19 C0                             ld		(local_name_col),a
 396+ C3D2 4F                                   ld		c,a
 397+ C3D3 3A 18 99                             ld		a,(SystemSeed+5)
 398+ C3D6 E6 01                                and		$01
 399+ C3D8 C6 02                                add		a,2
 400+ C3DA 57                                   ld		d,a
 401+ C3DB 1E D8                                ld		e,local_chart_star_colour
 402+ C3DD                                      MMUSelectLayer2
 402+ C3DD ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 403+ C3E1 CD 0F E8                             call	l2_draw_circle_fill
 404+ C3E4                                     ; call    src_get_name
 405+ C3E4 CD B3 C2                             call	src_label_ssytem
 406+ C3E7 E1           SRCtoofar:              pop     hl
 407+ C3E8 ED 34 08 00                          add     hl,8
 408+ C3EC E5                                   push    hl
 409+ C3ED DD E1                                pop     ix
 410+ C3EF 3A 2C 99                             ld		a,(XSAV)
 411+ C3F2 3D                                   dec		a
 412+ C3F3 FE 00                                cp		0
 413+ C3F5 C8                                   ret		z
 414+ C3F6 32 2C 99                             ld		(XSAV),a
 415+ C3F9 C3 79 C3                             jp		SRCCounterLoop
 416+ C3FC              ;----------------------------------------------------------------------------------------------------------------------------------
 417+ C3FC              draw_local_chart_menu:  InitNoDoubleBuffer
 417+ C3FC             >                            MMUSelectLayer1
 417+ C3FC ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 417+ C400 CD 80 E0    >                            call	l1_cls
 417+ C403 3E 07       >                            ld		a,7
 417+ C405 CD 9B E0    >                            call	l1_attr_cls_to_a
 417+ C408             >                            MMUSelectLayer2
 417+ C408 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 417+ C40C CD 08 E0    >                            call    asm_l2_double_buffer_off
 417+ C40F CD C9 E0    >                            call	l2_cls	; Get some space
 417+ C412             >                            MMUSelectSpriteBank
 417+ C412 ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
 417+ C416 CD 27 E4    >                            call    sprite_cls_cursors
 418+ C419 3E 80                                ld      a,$80
 419+ C41B 32 32 99                             ld      (MenuIdMax),a
 420+ C41E                                      CopyPresentSystemToTarget               ; for short range we always start at present and cusor on present
 420+ C41E 2A 2F 9A    >                        ld      hl,(PresentSystemX)
 420+ C421 22 31 9A    >                        ld      (TargetSystemX),hl
 421+ C424 01 01 01     SRCDrawbox:             ld		bc,$0101
 422+ C427 11 FD BE                             ld		de,$BEFD
 423+ C42A 3E C0                                ld		a,$C0
 424+ C42C                                      MMUSelectLayer2
 424+ C42C ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 425+ C430 CD F6 E1                             call	l2_draw_box
 426+ C433 01 01 0A                             ld		bc,$0A01
 427+ C436 11 C0 FE                             ld		de,$FEC0
 428+ C439                                      MMUSelectLayer2
 428+ C439 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 429+ C43D CD 60 E2                             call	l2_draw_horz_line
 430+ C440 3E 0C        SRCStaticText:          ld		a,short_range_header
 431+ C442 CD B8 A5                             call	expandTokenToString
 432+ C445 06 01                                ld		b,1
 433+ C447 21 10 C0                             ld		hl,short_range_boiler_text
 434+ C44A CD C2 C0                             call	SRM_print_boiler_text
 435+ C44D CD 0C 9E     SRCSetUpChart:          call	copy_galaxy_to_system
 436+ C450 CD 65 C3                             call	plot_local_stars
 437+ C453 CD DD C0     .CircleandCrosshair:    call	SRM_draw_chart_circle_and_crosshair
 438+ C456 CD F9 C0                             call	SRM_draw_hyperspace_cross_hair
 439+ C459 C9                                   ret
 440+ C45A              ;----------------------------------------------------------------------------------------------------------------------------------
 441+ C45A 3A 13 9A     local_chart_cursors:    ld     a,(CursorKeysPressed)
 442+ C45D FE 00                                cp      0
 443+ C45F C8                                   ret     z
 444+ C460 17                                   rla
 445+ C461 DC 79 C4                             call   c,src_UpPressed
 446+ C464 17                                   rla
 447+ C465 DC 96 C4                             call   c,src_DownPressed
 448+ C468 17                                   rla
 449+ C469 DC B5 C4                             call   c,src_LeftPressed
 450+ C46C 17                                   rla
 451+ C46D DC D2 C4                             call   c,src_RightPressed
 452+ C470 17                                   rla
 453+ C471 DC F1 C4                             call   c,src_HomePressed
 454+ C474 17                                   rla
 455+ C475 DC FB C4                             call   c,src_RecenterPressed
 456+ C478 C9                                   ret
 457+ C479              ;----------------------------------------------------------------------------------------------------------------------------------
 458+ C479 3A 32 9A     src_UpPressed:          ld     a,(TargetSystemY)
 459+ C47C                                      JumpIfAIsZero   src_BoundsLimit
 459+ C47C A7          >                        and a   ; cp 0 - changed to and a for optimisation but affects other flags
 459+ C47D CA 10 C5    >                        jp	z, src_BoundsLimit
 460+ C480 47                                   ld      b,a                         ; save target as we will need it
 461+ C481 3A 30 9A                             ld      a,(PresentSystemY)
 462+ C484 90                                   sub     b                           ; get the difference between present and target
 463+ C485 FA 8D C4                             jp      m,.SkipBoundsTest           ; if target is right of present, we can go left
 464+ C488                                      JumpIfAGTENusng 40,src_BoundsLimit  ; if no more than 20 then OK
 464+ C488 FE 28       >                        cp     40
 464+ C48A D2 10 C5    >                        jp		nc,src_BoundsLimit
 465+ C48D 78           .SkipBoundsTest:        ld      a,b
 466+ C48E 3D                                   dec     a
 467+ C48F 32 32 9A                             ld      (TargetSystemY),a
 468+ C492 CD 30 C1                             call    SRM_update_hyperspace_cross_hair
 469+ C495 C9                                   ret
 470+ C496              ;----------------------------------------------------------------------------------------------------------------------------------
 471+ C496 3A 30 9A     src_DownPressed:        ld     a,(PresentSystemY)
 472+ C499 47                                   ld      b,a
 473+ C49A 3A 32 9A                             ld      a,(TargetSystemY)
 474+ C49D 4F                                   ld      c,a
 475+ C49E                                      JumpIfAEqNusng 128,src_BoundsLimit
 475+ C49E FE 80       >                        cp     128
 475+ C4A0 CA 10 C5    >                        jp      z,src_BoundsLimit
 476+ C4A3 90                                   sub     b
 477+ C4A4 FA AC C4                             jp      m,.SkipBoundsTest
 478+ C4A7                                      JumpIfAGTENusng 40,src_BoundsLimit
 478+ C4A7 FE 28       >                        cp     40
 478+ C4A9 D2 10 C5    >                        jp		nc,src_BoundsLimit
 479+ C4AC 79           .SkipBoundsTest:        ld      a,c
 480+ C4AD 3C                                   inc    a
 481+ C4AE 32 32 9A                             ld      (TargetSystemY),a
 482+ C4B1 CD 30 C1                             call    SRM_update_hyperspace_cross_hair
 483+ C4B4 C9                                   ret
 484+ C4B5              ;----------------------------------------------------------------------------------------------------------------------------------
 485+ C4B5 3A 31 9A     src_LeftPressed:        ld      a,(TargetSystemX)           ; we can't move left if target is zero
 486+ C4B8                                      JumpIfAIsZero   src_BoundsLimit
 486+ C4B8 A7          >                        and a   ; cp 0 - changed to and a for optimisation but affects other flags
 486+ C4B9 CA 10 C5    >                        jp	z, src_BoundsLimit
 487+ C4BC 47                                   ld      b,a                         ; save target as we will need it
 488+ C4BD 3A 2F 9A                             ld      a,(PresentSystemX)
 489+ C4C0 90                                   sub     b                           ; get the difference between present and target
 490+ C4C1 FA C9 C4                             jp      m,.SkipBoundsTest           ; if target is right of present, we can go left
 491+ C4C4                                      JumpIfAGTENusng 20,src_BoundsLimit  ; if no more than 20 then OK
 491+ C4C4 FE 14       >                        cp     20
 491+ C4C6 D2 10 C5    >                        jp		nc,src_BoundsLimit
 492+ C4C9 78           .SkipBoundsTest:        ld      a,b
 493+ C4CA 3D                                   dec     a
 494+ C4CB 32 31 9A                             ld      (TargetSystemX),a
 495+ C4CE CD 30 C1                             call    SRM_update_hyperspace_cross_hair
 496+ C4D1 C9                                   ret
 497+ C4D2              ;----------------------------------------------------------------------------------------------------------------------------------
 498+ C4D2 3A 2F 9A     src_RightPressed:       ld      a,(PresentSystemX)
 499+ C4D5 47                                   ld      b,a
 500+ C4D6 3A 31 9A                             ld      a,(TargetSystemX)
 501+ C4D9 4F                                   ld      c,a
 502+ C4DA                                      JumpIfAEqNusng 255,src_BoundsLimit
 502+ C4DA FE FF       >                        cp     255
 502+ C4DC CA 10 C5    >                        jp      z,src_BoundsLimit
 503+ C4DF 90                                   sub     b
 504+ C4E0 FA E8 C4                             jp      m,.SkipBoundsTest
 505+ C4E3                                      JumpIfAGTENusng 20,src_BoundsLimit
 505+ C4E3 FE 14       >                        cp     20
 505+ C4E5 D2 10 C5    >                        jp		nc,src_BoundsLimit
 506+ C4E8 79           .SkipBoundsTest:        ld      a,c
 507+ C4E9 3C                                   inc    a
 508+ C4EA 32 31 9A                             ld      (TargetSystemX),a
 509+ C4ED CD 30 C1                             call    SRM_update_hyperspace_cross_hair
 510+ C4F0 C9                                   ret
 511+ C4F1              ;----------------------------------------------------------------------------------------------------------------------------------
 512+ C4F1 2A 2F 9A     src_HomePressed:        ld      hl,(PresentSystemX)
 513+ C4F4 22 31 9A                             ld      (TargetSystemX),hl
 514+ C4F7 CD 30 C1                             call    SRM_update_hyperspace_cross_hair
 515+ C4FA C9                                   ret
 516+ C4FB              ;----------------------------------------------------------------------------------------------------------------------------------
 517+ C4FB 3A 1C 9A     src_RecenterPressed:    ld      a,(Galaxy)      ; DEBUG as galaxy n is not working
 518+ C4FE                                      MMUSelectGalaxyA
 518+ C4FE ED 92 57    >                     nextreg GalaxyDataMMU,       a
 519+ C501 ED 4B 31 9A                          ld      bc,(TargetSystemX)
 520+ C505 CD 70 FB                             call    find_nearest_to_bc
 521+ C508 ED 43 31 9A                          ld      (TargetSystemX),bc
 522+ C50C CD 30 C1                             call    SRM_update_hyperspace_cross_hair
 523+ C50F C9                                   ret
 524+ C510              ;----------------------------------------------------------------------------------------------------------------------------------
 525+ C510 AF           src_BoundsLimit:        xor     a
 526+ C511 C9                                   ret
 527+ C512
# file closed: ./Menus/short_range_chart_menu.asm
1174  C512              ; Bank 51
1175  C512
1176  C512                  SLOT    MenuGalChtAddr
1177  C512                  PAGE    BankMenuGalCht
1178  C512              	ORG     MenuGalChtAddr
1179  C000                  INCLUDE "./Menus//galactic_chart_menu.asm"
# file opened: ./Menus//galactic_chart_menu.asm
   1+ C000
   2+ C000 47 61 6C 61  galactic_chart_page_marker  DB "GalacticChrtPG51"
   2+ C004 63 74 69 63
   2+ C008 43 68 72 74
   2+ C00C 50 47 35 31
   3+ C010 40 02 77 A5  galactic_chart_boiler_text	DW $0240,TextBuffer
   4+ C014              galactic_chart_header		equ 13
   5+ C014              galactic_star_colour		equ 216
   6+ C014              galactic_star_colour2		equ 108
   7+ C014              galactic_chart_y_offset		equ $18
   8+ C014              galactic_chart_hyper_offset equ 4
   9+ C014              galactic_chart_hyper_x_offset equ 32 - 4
  10+ C014              galactic_chart_hyper_y_offset equ 32 - 4 + 24
  11+ C014 44 69 73 74  galactic_chart_distance     DB "Distance: "
  11+ C018 61 6E 63 65
  11+ C01C 3A 20
  12+ C01E 30 30 30     galactic_chart_dist_amount  DB "000"
  13+ C021 2E           galactic_chart_decimal      DB "."
  14+ C022 30           galactic_chart_fraction     DB "0"
  15+ C023 20 4C 69 67  galactic_chart_dis_ly       DB " Light Years",0
  15+ C027 68 74 20 59
  15+ C02B 65 61 72 73
  15+ C02F 00
  16+ C030 20 20 30 2E  galactic_default_dist       DB "  0.0",0
  16+ C034 30 00
  17+ C036
  18+ C036 00 00 00...  galactic_distance           DS  6
  19+ C03C
  20+ C03C              galactic_find_position      equ $B008
  21+ C03C 46 69 6E 64  galactic_find_message       DB "Find: ",0
  21+ C040 3A 20 00
  22+ C043              galactic_find_text          equ $B038
  23+ C043 20 20 20 20  galactic_blank_message      DB  "                    ",0
  23+ C047 20 20 20 20
  23+ C04B 20 20 20 20
  23+ C04F 20 20 20 20
  23+ C053 20 20 20 20
  23+ C057 00
  24+ C058 2A 2A 2D 2D  galactic_find_no_match      DB "**-- System Not Found --**",0
  24+ C05C 20 53 79 73
  24+ C060 74 65 6D 20
  24+ C064 4E 6F 74 20
  24+ C068 46 6F 75 6E
  24+ C06C 64 20 2D 2D
  24+ C070 2A 2A 00
  25+ C073 20 20 2A 2A  galactic_find_match         DB "  **-- System Found --**  ",0
  25+ C077 2D 2D 20 53
  25+ C07B 79 73 74 65
  25+ C07F 6D 20 46 6F
  25+ C083 75 6E 64 20
  25+ C087 2D 2D 2A 2A
  25+ C08B 20 20 00
  26+ C08E
  27+ C08E              GCM_print_boiler_text:
  28+ C08E                  INCLUDE "Menus/print_boiler_text_inlineInclude.asm"
# file opened: ./Menus/print_boiler_text_inlineInclude.asm
   1++C08E
   2++C08E              ;">print_boilder_text hl = text structure, b = message count"
   3++C08E              .BoilerTextLoop:
   4++C08E C5           	push		bc			; Save Message Count loop value
   5++C08F 4E           	ld			c,(hl)		; Get Row into b
   6++C090 23           	inc			hl
   7++C091 46           	ld			b,(hl)		; Get Col into b
   8++C092 23           	inc			hl
   9++C093 5E           	ld			e,(hl)		; Get text address Lo into E
  10++C094 23           	inc			hl
  11++C095 56           	ld			d,(hl)		; Get text address Hi into E
  12++C096 23           	inc			hl
  13++C097 E5           	push		hl			; Save present HL to stack as this is the address for the next message
  14++C098 EB           	ex			de,hl		; now hl = address of text data
  15++C099 1E FF        	ld			e,txt_status_colour
  16++C09B C5           	push		bc
  17++C09C D1           	pop			de
  18++C09D                  MMUSelectLayer1
  18++C09D ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
  19++C0A1 CD C8 E0     	call		l1_print_at
  20++C0A4 E1           	pop			hl
  21++C0A5 C1           	pop			bc
  22++C0A6 10 E6        	djnz		.BoilerTextLoop
  23++C0A8 C9           	ret
  24++C0A9
# file closed: ./Menus/print_boiler_text_inlineInclude.asm
  29+ C0A9              GCM_draw_chart_circle_and_crosshair:
  30+ C0A9 ED 4B 2F 9A  	ld		bc,(PresentSystemX)				; bc = present system
  31+ C0AD              .OnGalacticChart:
  32+ C0AD CB 38        	srl		b								; but row is row / 2
  33+ C0AF C5           	push  	bc
  34+ C0B0              	MMUSelectSpriteBank
  34+ C0B0 ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
  35+ C0B4 CD 91 E0     	call	sprite_galactic_cursor
  36+ C0B7 C1           	pop		bc
  37+ C0B8 78           	ld		a,b
  38+ C0B9 C6 18        	add		a,galactic_chart_y_offset
  39+ C0BB 47           	ld		b,a
  40+ C0BC 3A 75 9D     	ld		a,(Fuel)
  41+ C0BF CB 3F        	srl		a
  42+ C0C1 CB 3F        	srl		a								; divide range of fuel by 4 for galactic chart
  43+ C0C3 57           	ld		d,a
  44+ C0C4 1E FF        	ld		e,$FF
  45+ C0C6              	MMUSelectLayer2
  45+ C0C6 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
  46+ C0CA CD 56 E7     	call	l2_draw_circle
  47+ C0CD C9           	ret
  48+ C0CE              ; TODO MOVE CURSOR CODE
  49+ C0CE
  50+ C0CE ED 4B 31 9A  GCM_draw_hyperspace_cross_hair: ld		bc,(TargetSystemX)              ; bc = selected jump
  51+ C0D2 C5                                           push    bc
  52+ C0D3 CB 38                                        srl		b								; but row is row / 2
  53+ C0D5                                              MMUSelectSpriteBank
  53+ C0D5 ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
  54+ C0D9 CD 9D E0                                     call	sprite_galactic_hyper_cursor
  55+ C0DC C1                                           pop     bc
  56+ C0DD CD A9 E0                                     call	sprite_ghc_move
  57+ C0E0 C9                                           ret
  58+ C0E1
  59+ C0E1
  60+ C0E1 AF           plot_gc_stars:          xor		a
  61+ C0E2 32 2C 99                             ld		(XSAV),a
  62+ C0E5 DD 21 16 E0                          ld      ix,galaxy_data
  63+ C0E9 3A 1C 9A     .CounterLoop:           ld      a,(Galaxy)
  64+ C0EC                                      MMUSelectGalaxyA
  64+ C0EC ED 92 57    >                     nextreg GalaxyDataMMU,       a
  65+ C0EF DD E5                                push    ix
  66+ C0F1 E1                                   pop     hl
  67+ C0F2 11 13 99                             ld      de,SystemSeed
  68+ C0F5 CD 12 9E                             call    copy_seed
  69+ C0F8 3A 16 99                             ld		a,(SystemSeed+3)				; QQ15+3 \ seed w1_h is Xcoord of star
  70+ C0FB 4F                                   ld		c,a								; c = X Coord
  71+ C0FC 3A 14 99                             ld		a,(SystemSeed+1)
  72+ C0FF CB 3F                                srl		a								; Ycoord /2
  73+ C101 C6 18                                add		a,galactic_chart_y_offset		; add offset to Y coord of star
  74+ C103 47                                   ld		b,a								; b = row
  75+ C104 C5                                   push	bc
  76+ C105 3E D8                                ld		a,galactic_star_colour
  77+ C107                                      MMUSelectLayer2
  77+ C107 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
  78+ C10B CD FF E0                             call	l2_plot_pixel
  79+ C10E C1                                   pop		bc
  80+ C10F 3A 17 99                             ld		a,(SystemSeed+4)
  81+ C112 F6 50                                or		$50								; minimum distance away
  82+ C114 FE 90                                cp		$90
  83+ C116 30 0A                                jr		nc,.NoSecondPixel
  84+ C118 0C           .SecondPixel:           inc		c
  85+ C119 3E 6C                                ld		a,galactic_star_colour2
  86+ C11B                                      MMUSelectLayer2
  86+ C11B ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
  87+ C11F CD FF E0                             call	l2_plot_pixel
  88+ C122 DD E5        .NoSecondPixel:         push    ix
  89+ C124 E1                                   pop     hl
  90+ C125 ED 34 08 00                          add     hl,8
  91+ C129 E5                                   push    hl
  92+ C12A DD E1                                pop     ix
  93+ C12C 3A 2C 99                             ld		a,(XSAV)
  94+ C12F 3D                                   dec		a
  95+ C130 FE 00                                cp		0
  96+ C132 C8                                   ret		z
  97+ C133 32 2C 99                             ld		(XSAV),a
  98+ C136 18 B1                                jr		.CounterLoop
  99+ C138
 100+ C138 2A 2A 2A 2A  GALDP       DB "********++++++++"
 100+ C13C 2A 2A 2A 2A
 100+ C140 2B 2B 2B 2B
 100+ C144 2B 2B 2B 2B
 101+ C148              draw_galactic_chart_menu:   InitNoDoubleBuffer
 101+ C148             >                            MMUSelectLayer1
 101+ C148 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 101+ C14C CD 80 E0    >                            call	l1_cls
 101+ C14F 3E 07       >                            ld		a,7
 101+ C151 CD 9B E0    >                            call	l1_attr_cls_to_a
 101+ C154             >                            MMUSelectLayer2
 101+ C154 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 101+ C158 CD 08 E0    >                            call    asm_l2_double_buffer_off
 101+ C15B CD C9 E0    >                            call	l2_cls	; Get some space
 101+ C15E             >                            MMUSelectSpriteBank
 101+ C15E ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
 101+ C162 CD 27 E4    >                            call    sprite_cls_cursors
 102+ C165 DD 2E DC                                 ld      ixl,$DC
 103+ C168 3E 40                                    ld      a,$40
 104+ C16A 32 32 99                                 ld      (MenuIdMax),a
 105+ C16D 2A 2F 9A                                 ld      hl,(PresentSystemX)
 106+ C170              ;                            ld      (TargetSystemX),hl
 107+ C170 CD 4C C4                                 call    gc_present_system               ; Set up the seed for present system
 108+ C173 01 01 01     .Drawbox:                   ld		bc,$0101
 109+ C176 11 FD BE                                 ld		de,$BEFD
 110+ C179 3E C0                                    ld		a,$C0
 111+ C17B                                          MMUSelectLayer2
 111+ C17B ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 112+ C17F CD F6 E1                                 call	l2_draw_box
 113+ C182 01 01 0A                                 ld		bc,$0A01
 114+ C185 11 C0 FE                                 ld		de,$FEC0
 115+ C188 CD 60 E2                                 call	l2_draw_horz_line
 116+ C18B 3E 0D        .StaticText:                ld		a,galactic_chart_header
 117+ C18D CD B8 A5                                 call	expandTokenToString
 118+ C190 06 01                                    ld		b,1
 119+ C192 21 10 C0                                 ld		hl,galactic_chart_boiler_text
 120+ C195 CD 8E C0                                 call	GCM_print_boiler_text
 121+ C198 CD A9 C0     .CircleandCrosshair:        call	GCM_draw_chart_circle_and_crosshair
 122+ C19B CD CE C0                                 call	GCM_draw_hyperspace_cross_hair
 123+ C19E CD E1 C0                                 call	plot_gc_stars
 124+ C1A1 3A 1C 9A                                 ld      a,(Galaxy)
 125+ C1A4                                          MMUSelectGalaxyA
 125+ C1A4 ED 92 57    >                     nextreg GalaxyDataMMU,       a
 126+ C1A7 ED 4B 31 9A                              ld      bc,(TargetSystemX)
 127+ C1AB CD 65 FC                                 call    galaxy_system_under_cursor          ; TODO for some reason this bit
 128+ C1AE FE 00                                    cp      0                                   ; does not reset cursor on a miss
 129+ C1B0 20 11                                    jr      nz,.CurrentTargetIsValid
 130+ C1B2              .CurrentTargetIsInvalid:    CopyPresentSystemToTarget
 130+ C1B2 2A 2F 9A    >                        ld      hl,(PresentSystemX)
 130+ C1B5 22 31 9A    >                        ld      (TargetSystemX),hl
 131+ C1B8 ED 4B 31 9A                              ld      bc,(TargetSystemX)
 132+ C1BC                                          MMUSelectSpriteBank
 132+ C1BC ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
 133+ C1C0 CD A9 E0                                 call	sprite_ghc_move
 134+ C1C3 3A 1C 9A     .CurrentTargetIsValid:      ld      a,(Galaxy)
 135+ C1C6                                          MMUSelectGalaxyA
 135+ C1C6 ED 92 57    >                     nextreg GalaxyDataMMU,       a
 136+ C1C9 ED 43 5B E8                              ld      (GalaxyTargetSystem),bc
 137+ C1CD CD 65 FC                                 call    galaxy_system_under_cursor
 138+ C1D0 CD A4 C3                                 call    gc_name_if_possible
 139+ C1D3                                          SetMemFalse TextInputMode
 139+ C1D3 3E FF       >                        ld      a,$FF
 139+ C1D5 32 12 9A    >                        ld      (TextInputMode),a
 140+ C1D8              ;IFDEF DOUBLEBUFFER
 141+ C1D8              ;    MMUSelectLayer2
 142+ C1D8              ;    call  l2_flip_buffers
 143+ C1D8              ;ENDIF
 144+ C1D8 C9                                       ret
 145+ C1D9
 146+ C1D9              gcDelayVal                  equ $0A
 147+ C1D9              gcBlinkVal                  equ $10
 148+ C1D9
 149+ C1D9
 150+ C1D9 10           gcCursorBlink               DB  gcBlinkVal
 151+ C1DA 20           gcCursorChar                DB  " "
 152+ C1DB 00           gcEndOfString               DB  0
 153+ C1DC 00 00 00...  gcInputText                 DS  31
 154+ C1FB 00 00 00 00                              DB  0,0,0,0,0
 154+ C1FF 00
 155+ C200 00 00 00...  gcBlank                     DS  32
 156+ C220
 157+ C220              ;----------------------------------------------------------------------------------------------------------------------------------
 158+ C220 11 08 B0     gc_display_find_text:   ld		de,galactic_find_position   ; Wipe input area on screen
 159+ C223 21 3C C0                             ld      hl,galactic_find_message
 160+ C226                                      MMUSelectLayer1
 160+ C226 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 161+ C22A CD C8 E0                             call	l1_print_at
 162+ C22D C9                                   ret
 163+ C22E              ;----------------------------------------------------------------------------------------------------------------------------------
 164+ C22E 11 DC C1     gc_display_find_string: ld      de,gcInputText
 165+ C231 CD E1 96                             call    keyboard_copy_input_to_de
 166+ C234 21 DA C1                             ld      hl,gcCursorChar         ; Now just copy cursor char too
 167+ C237 ED A0                                ldi                             ; Copy cursor to local
 168+ C239 3A DE 96                             ld      a,(InputCursor)
 169+ C23C 3C                                   inc     a
 170+ C23D 47                                   ld      b,a
 171+ C23E 3E 14                                ld      a,20
 172+ C240 90                                   sub     b
 173+ C241 47                                   ld      b,a
 174+ C242 3E 20                                ld      a," "
 175+ C244 12           .SpacePad:              ld      (de),a
 176+ C245 13                                   inc     de
 177+ C246 10 FC                                djnz    .SpacePad
 178+ C248 AF                                   xor     a
 179+ C249 12                                   ld      (de),a
 180+ C24A 11 38 B0                             ld		de,galactic_find_text    ; Display text
 181+ C24D 21 DC C1                             ld      hl,gcInputText
 182+ C250                                      MMUSelectLayer1
 182+ C250 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 183+ C254 CD C8 E0                             call	l1_print_at
 184+ C257 C9                                   ret
 185+ C258
 186+ C258 3A D9 C1     blink_cursor:           ld      a,(gcCursorBlink)
 187+ C25B 3D                                   dec     a
 188+ C25C 32 D9 C1                             ld      (gcCursorBlink),a
 189+ C25F C0                                   ret     nz
 190+ C260 3E 10        .FlashCursor:           ld      a,gcBlinkVal
 191+ C262 32 D9 C1                             ld      (gcCursorBlink),a
 192+ C265 3A DA C1                             ld      a,(gcCursorChar)
 193+ C268 FE 20                                cp      " "
 194+ C26A 28 06                                jr      z,.ChangeToStar
 195+ C26C 3E 20                                ld      a," "
 196+ C26E 32 DA C1                             ld      (gcCursorChar),a
 197+ C271 C9                                   ret
 198+ C272 3E 2A        .ChangeToStar:          ld      a,"*"
 199+ C274 32 DA C1                             ld      (gcCursorChar),a
 200+ C277 C9                                   ret
 201+ C278              ;----------------------------------------------------------------------------------------------------------------------------------
 202+ C278              ; The main loop handles the find key
 203+ C278              loop_gc_menu:           JumpIfMemTrue TextInputMode,AlreadyInInputMode  ;if we are in input mode then go directly there
 203+ C278 3A 12 9A    >                        ld      a,(TextInputMode)
 203+ C27B A7          >                        and     a
 203+ C27C CA 95 C2    >                        jp      z, AlreadyInInputMode
 204+ C27F 3E 4E        .StartFindCheck:        ld      a,c_Pressed_Find                        ;Is F pressed
 205+ C281 CD 7C 96                             call    is_key_pressed
 206+ C284 C0                                   ret     nz                                      ;the main loop handles find key
 207+ C285 CD F4 96                             call    initInputText                           ;Initialise find input
 208+ C288                                      SetMemTrue TextInputMode                        ;Set input mode to true
 208+ C288 AF          >                        xor     a
 208+ C289 32 12 9A    >                        ld      (TextInputMode),a
 209+ C28C                                      SetMemToN gcCursorBlink, gcBlinkVal             ; set up blink
 209+ C28C 3E 10       >                        ld      a,gcBlinkVal
 209+ C28E 32 D9 C1    >                        ld      (gcCursorBlink),a
 210+ C291 CD 20 C2     .DisplayInputbar:       call    gc_display_find_text                    ; now prep the boiler plate input text
 211+ C294 C9                                   ret                                             ; and exit so next interation handles new input as we have to rescan keyboard
 212+ C295              ;Already in input mode post pressing find
 213+ C295 CD 0C 97     AlreadyInInputMode:     call    InputName                               ; Call input routine to parse a key
 214+ C298                                      JumpIfMemFalse InputChanged, .blinkNoDelay      ; no key they bypass rest of input
 214+ C298 3A E0 96    >                        ld      a,(InputChanged)
 214+ C29B A7          >                        and     a
 214+ C29C C2 A9 C2    >                        jp      nz, .blinkNoDelay
 215+ C29F              .WasItEnter:            JumpIfMemTrue EnterPressed, .FindEnterPressed   ; if enter was pressed then find
 215+ C29F 3A DF 96    >                        ld      a,(EnterPressed)
 215+ C2A2 A7          >                        and     a
 215+ C2A3 CA B5 C2    >                        jp      z, .FindEnterPressed
 216+ C2A6 CD 2E C2                             call    gc_display_find_string                  ; update string
 217+ C2A9 CD 58 C2     .blinkNoDelay:          call    blink_cursor
 218+ C2AC                                      CallIfMemEqNusng    gcCursorBlink, gcBlinkVal, gc_display_find_string ; on blink we get a double update but we can live with that
 218+ C2AC 3A D9 C1    >                        ld   a,(gcCursorBlink)
 218+ C2AF FE 10       >                        cp   gcBlinkVal
 218+ C2B1 CC 2E C2    >                        call    z,gc_display_find_string
 219+ C2B4 C9                                   ret
 220+ C2B5              .FindEnterPressed:      SetMemFalse EnterPressed                        ; reset enter
 220+ C2B5 3E FF       >                        ld      a,$FF
 220+ C2B7 32 DF 96    >                        ld      (EnterPressed),a
 221+ C2BA                                      SetMemFalse TextInputMode                       ; leave input mode
 221+ C2BA 3E FF       >                        ld      a,$FF
 221+ C2BC 32 12 9A    >                        ld      (TextInputMode),a
 222+ C2BF 3A 1C 9A                             ld      a,(Galaxy)                              ; Fetch correct galaxy seed bank into memory
 223+ C2C2                                      MMUSelectGalaxyA
 223+ C2C2 ED 92 57    >                     nextreg GalaxyDataMMU,       a
 224+ C2C5 21 BF 96                             ld      hl,InputString
 225+ C2C8 11 5E E8                             ld      de,GalaxySearchString
 226+ C2CB CD D0 F6                             call    GalaxyCopyLoop
 227+ C2CE CD 39 FB                             call    find_system_by_name
 228+ C2D1 FE FF                                cp      $FF                                     ; 0 denotes found FF, failure
 229+ C2D3 28 1D                                jr      z,.FindNoMatch
 230+ C2D5 3A FB E8                             ld      a,(GalaxyWorkingSeed+3)
 231+ C2D8 4F                                   ld      c,a
 232+ C2D9 3A F9 E8                             ld      a,(GalaxyWorkingSeed+1)
 233+ C2DC 47                                   ld      b,a
 234+ C2DD ED 43 31 9A                          ld      (TargetSystemX),bc
 235+ C2E1 CD 85 C3                             call    UpdateGalacticCursor
 236+ C2E4 11 08 B0                             ld		de,galactic_find_position               ; Wipe input area on screen
 237+ C2E7 21 73 C0                             ld      hl,galactic_find_match
 238+ C2EA                                      MMUSelectLayer1
 238+ C2EA ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 239+ C2EE CD C8 E0                             call	l1_print_at
 240+ C2F1 C9                                   ret
 241+ C2F2              .FindNoMatch:           ; if not found display "Not found"
 242+ C2F2                                      ; move curor if found
 243+ C2F2 11 08 B0                             ld		de,galactic_find_position   ; Wipe input area on screen
 244+ C2F5 21 58 C0                             ld      hl,galactic_find_no_match
 245+ C2F8                                      MMUSelectLayer1
 245+ C2F8 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 246+ C2FC CD C8 E0                             call	l1_print_at
 247+ C2FF C9                                   ret; DOSTUFFHERE
 248+ C300              ;----------------------------------------------------------------------------------------------------------------------------------
 249+ C300              galctic_chart_cursors:  ReturnIfMemTrue TextInputMode
 249+ C300 3A 12 9A    >                        ld      a,(TextInputMode)
 249+ C303 A7          >                        and     a
 249+ C304 C8          >                        ret     z
 250+ C305 3A 13 9A                             ld      a,(CursorKeysPressed)
 251+ C308 FE 00                                cp      0
 252+ C30A C8                                   ret     z
 253+ C30B 17                                   rla
 254+ C30C DC 24 C3                             call   c,gc_UpPressed
 255+ C30F 17                                   rla
 256+ C310 DC 34 C3                             call   c,gc_DownPressed
 257+ C313 17                                   rla
 258+ C314 DC 44 C3                             call   c,gc_LeftPressed
 259+ C317 17                                   rla
 260+ C318 DC 54 C3                             call   c,gc_RightPressed
 261+ C31B 17                                   rla
 262+ C31C DC 64 C3                             call   c,gc_HomePressed
 263+ C31F 17                                   rla
 264+ C320 DC 6E C3                             call   c,gc_RecenterPressed
 265+ C323 C9                                   ret
 266+ C324              ;----------------------------------------------------------------------------------------------------------------------------------
 267+ C324 3A 32 9A     gc_UpPressed:           ld     a,(TargetSystemX+1)
 268+ C327                                      JumpIfAEqNusng 1,gc_BoundsLimit
 268+ C327 FE 01       >                        cp     1
 268+ C329 CA 83 C3    >                        jp      z,gc_BoundsLimit
 269+ C32C 3D                                   dec     a
 270+ C32D 32 32 9A                             ld      (TargetSystemX+1),a
 271+ C330 CD 85 C3                             call    UpdateGalacticCursor
 272+ C333 C9                                   ret
 273+ C334              ;----------------------------------------------------------------------------------------------------------------------------------
 274+ C334 3A 32 9A     gc_DownPressed:         ld     a,(TargetSystemX+1)
 275+ C337                                      JumpIfAEqNusng 255,gc_BoundsLimit
 275+ C337 FE FF       >                        cp     255
 275+ C339 CA 83 C3    >                        jp      z,gc_BoundsLimit
 276+ C33C 3C                                   inc    a
 277+ C33D 32 32 9A                             ld      (TargetSystemX+1),a
 278+ C340 CD 85 C3                             call    UpdateGalacticCursor
 279+ C343 C9                                   ret
 280+ C344              ;----------------------------------------------------------------------------------------------------------------------------------
 281+ C344 3A 31 9A     gc_LeftPressed:         ld     a,(TargetSystemX)
 282+ C347                                      JumpIfAEqNusng 2,gc_BoundsLimit
 282+ C347 FE 02       >                        cp     2
 282+ C349 CA 83 C3    >                        jp      z,gc_BoundsLimit
 283+ C34C 3D                                   dec    a
 284+ C34D 32 31 9A                             ld      (TargetSystemX),a
 285+ C350 CD 85 C3                             call    UpdateGalacticCursor
 286+ C353 C9                                   ret
 287+ C354              ;----------------------------------------------------------------------------------------------------------------------------------
 288+ C354 3A 31 9A     gc_RightPressed:        ld     a,(TargetSystemX)
 289+ C357                                      JumpIfAEqNusng 253,gc_BoundsLimit
 289+ C357 FE FD       >                        cp     253
 289+ C359 CA 83 C3    >                        jp      z,gc_BoundsLimit
 290+ C35C 3C                                   inc    a
 291+ C35D 32 31 9A                             ld      (TargetSystemX),a
 292+ C360 CD 85 C3                             call    UpdateGalacticCursor
 293+ C363 C9                                   ret
 294+ C364              ;----------------------------------------------------------------------------------------------------------------------------------
 295+ C364 2A 2F 9A     gc_HomePressed:         ld      hl,(PresentSystemX)
 296+ C367 22 31 9A                             ld      (TargetSystemX),hl
 297+ C36A CD 85 C3                             call    UpdateGalacticCursor
 298+ C36D C9                                   ret
 299+ C36E              ;----------------------------------------------------------------------------------------------------------------------------------
 300+ C36E 3A 1C 9A     gc_RecenterPressed:     ld      a,(Galaxy)       ; DEBUG as galaxy n is not working
 301+ C371                                      MMUSelectGalaxyA
 301+ C371 ED 92 57    >                     nextreg GalaxyDataMMU,       a
 302+ C374 ED 4B 31 9A                          ld      bc,(TargetSystemX)
 303+ C378 CD 70 FB                             call    find_nearest_to_bc
 304+ C37B ED 43 31 9A                          ld      (TargetSystemX),bc
 305+ C37F CD 85 C3                             call    UpdateGalacticCursor
 306+ C382 C9                                   ret
 307+ C383              ;----------------------------------------------------------------------------------------------------------------------------------
 308+ C383 AF           gc_BoundsLimit          xor     a
 309+ C384 C9                                   ret
 310+ C385
 311+ C385              ;----------------------------------------------------------------------------------------------------------------------------------
 312+ C385 ED 4B 31 9A  UpdateGalacticCursor:   ld		bc,(TargetSystemX)              ; bc = selected jump
 313+ C389              OnGalacticChart:        MMUSelectSpriteBank
 313+ C389 ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
 314+ C38D CD A9 E0                             call	sprite_ghc_move
 315+ C390 3A 1C 9A                             ld      a,(Galaxy)
 316+ C393                                      MMUSelectGalaxyA
 316+ C393 ED 92 57    >                     nextreg GalaxyDataMMU,       a
 317+ C396 ED 4B 31 9A                          ld      bc,(TargetSystemX)
 318+ C39A ED 43 5B E8                          ld      (GalaxyTargetSystem),bc
 319+ C39E CD 65 FC                             call    galaxy_system_under_cursor
 320+ C3A1 FE 00                                cp      0
 321+ C3A3 C8                                   ret     z
 322+ C3A4              ; just fall into gc_name_if_possible
 323+ C3A4 CD 82 F6     gc_name_if_possible:    call	GetDigramWorkingSeed
 324+ C3A7 CD D2 C3                             call    gc_clear_name_area
 325+ C3AA 21 3D A6                             ld		hl,name_expanded
 326+ C3AD CD 98 A5                             call	CapitaliseString
 327+ C3B0 21 3D A6                             ld		hl, name_expanded
 328+ C3B3 01 0A A0                             ld      bc,$A00A
 329+ C3B6 1E FF                                ld		e,$FF
 330+ C3B8                                      MMUSelectLayer2
 330+ C3B8 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 331+ C3BC CD CF E1                             call	l2_print_7at
 332+ C3BF CD EC C3                             call    gc_calc_distance
 333+ C3C2 21 14 C0                             ld      hl,galactic_chart_distance
 334+ C3C5 01 0A A8                             ld      bc,$A80A
 335+ C3C8 1E FF                                ld		e,$FF
 336+ C3CA                                      MMUSelectLayer2
 336+ C3CA ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 337+ C3CE CD CF E1                             call	l2_print_7at
 338+ C3D1 C9                                   ret
 339+ C3D2              ;----------------------------------------------------------------------------------------------------------------------------------
 340+ C3D2 26 08        gc_clear_name_area:     ld      h,8
 341+ C3D4 11 E3 A0                             ld      de,$A000 | COLOUR_TRANSPARENT
 342+ C3D7 01 0A A0                             ld      bc,$A00A
 343+ C3DA E5           .ClearLoop:             push    hl
 344+ C3DB D5                                   push    de
 345+ C3DC C5                                   push    bc
 346+ C3DD                                      MMUSelectLayer2
 346+ C3DD ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 347+ C3E1 CD 60 E2                             call	l2_draw_horz_line
 348+ C3E4 C1                                   pop     bc
 349+ C3E5 D1                                   pop     de
 350+ C3E6 E1                                   pop     hl
 351+ C3E7 04                                   inc     b
 352+ C3E8 25                                   dec     h
 353+ C3E9 20 EF                                jr      nz,.ClearLoop
 354+ C3EB C9                                   ret
 355+ C3EC              ;----------------------------------------------------------------------------------------------------------------------------------
 356+ C3EC 3A 1C 9A     gc_calc_distance:       ld      a,(Galaxy)
 357+ C3EF                                      MMUSelectGalaxyA
 357+ C3EF ED 92 57    >                     nextreg GalaxyDataMMU,       a
 358+ C3F2 11 1E C0                             ld      de,galactic_chart_dist_amount
 359+ C3F5 21 30 C0                             ld      hl,galactic_default_dist
 360+ C3F8 ED A0                                ldi
 361+ C3FA ED A0                                ldi
 362+ C3FC ED A0                                ldi
 363+ C3FE ED A0                                ldi
 364+ C400 ED A0                                ldi
 365+ C402 ED 4B 2F 9A                          ld      bc,(PresentSystemX)
 366+ C406 ED 43 57 E8                          ld      (GalaxyPresentSystem),bc
 367+ C40A ED 4B 31 9A                          ld      bc,(TargetSystemX)
 368+ C40E ED 43 59 E8                          ld      (GalaxyDestinationSystem),bc
 369+ C412 CD F8 FB                             call    galaxy_find_distance            ; get distance into HL
 370+ C415 DD 2A B8 99                          ld      ix,(Distance)
 371+ C419 11 00 00                             ld      de,0
 372+ C41C FD 21 36 C0                          ld      iy,galactic_distance
 373+ C420 CD 11 AF                             call    DispDEIXtoIY
 374+ C423 FD E5                                push    iy
 375+ C425 E1                                   pop     hl
 376+ C426 11 36 C0                             ld      de,galactic_distance
 377+ C429 7E                                   ld		a,(hl)				;Push last digit to post decimal
 378+ C42A 32 22 C0                             ld		(galactic_chart_fraction),a
 379+ C42D 2B                                   dec     hl
 380+ C42E CD 35 AD                             call    compare16HLDE
 381+ C431 38 18                                jr      c,.done_number
 382+ C433 7E                                   ld      a,(hl)
 383+ C434 32 20 C0                             ld      (galactic_chart_dist_amount+2),a
 384+ C437 2B                                   dec     hl
 385+ C438 CD 35 AD                             call    compare16HLDE
 386+ C43B 38 0E                                jr      c,.done_number
 387+ C43D 7E                                   ld      a,(hl)
 388+ C43E 32 1F C0                             ld      (galactic_chart_dist_amount+1),a
 389+ C441 2B                                   dec     hl
 390+ C442 CD 35 AD                             call    compare16HLDE
 391+ C445 38 04                                jr      c,.done_number
 392+ C447 7E                                   ld      a,(hl)
 393+ C448 32 1E C0                             ld      (galactic_chart_dist_amount),a
 394+ C44B C9           .done_number:           ret
 395+ C44C              ;----------------------------------------------------------------------------------------------------------------------------------
 396+ C44C AF           gc_present_system:      xor     a
 397+ C44D 32 2C 99                             ld		(XSAV),a
 398+ C450 DD 21 16 E0                          ld      ix,galaxy_data
 399+ C454 3A 1C 9A     GCCounterLoop:          ld      a,(Galaxy)
 400+ C457                                      MMUSelectGalaxyA
 400+ C457 ED 92 57    >                     nextreg GalaxyDataMMU,       a
 401+ C45A 2A 2F 9A                             ld      hl,(PresentSystemX)
 402+ C45D DD E5                                push    ix
 403+ C45F 7D                                   ld      a,l
 404+ C460 DD BE 03                             cp      (ix+3)                          ; seed x
 405+ C463 20 14                                jr      nz,.ItsNotThisX
 406+ C465 7C                                   ld      a,h
 407+ C466 DD BE 01                             cp      (ix+1)                          ; seed x
 408+ C469 20 0E        .FoundSystem:           jr      nz,.ItsNotThisX
 409+ C46B DD E5                                push    ix
 410+ C46D E1                                   pop     hl
 411+ C46E 11 23 9A                             ld      de,PresentSystemSeeds
 412+ C471 CD 12 9E                             call    copy_seed
 413+ C474 3E FF                                ld      a,$FF
 414+ C476 DD E1                                pop     ix
 415+ C478 C9                                   ret
 416+ C479 E1           .ItsNotThisX:           pop     hl
 417+ C47A ED 34 08 00                          add     hl,8
 418+ C47E E5                                   push    hl
 419+ C47F DD E1                                pop     ix
 420+ C481 3A 2C 99                             ld		a,(XSAV)
 421+ C484 3D                                   dec		a
 422+ C485 32 2C 99                             ld      (XSAV),a
 423+ C488 FE 00                                cp		0
 424+ C48A C8                                   ret		z
 425+ C48B 18 C7                                jr		GCCounterLoop
 426+ C48D
# file closed: ./Menus//galactic_chart_menu.asm
1180  C48D              ; Bank 52
1181  C48D
1182  C48D                  SLOT    MenuInventAddr
1183  C48D                  PAGE    BankMenuInvent
1184  C48D              	ORG     MenuInventAddr
1185  C000                  INCLUDE "./Menus/inventory_menu.asm"
# file opened: ./Menus/inventory_menu.asm
   1+ C000 49 6E 76 65  ivnentory_page_marker   DB "Inventory   PG52"
   1+ C004 6E 74 6F 72
   1+ C008 79 20 20 20
   1+ C00C 50 47 35 32
   2+ C010 48 02 1C C0  inventory_boiler_text	DW $0248,INM_inventory
   3+ C014 08 0B 26 C0  						DW $0B08,INM_fuel
   4+ C018 08 13 2C C0  						DW $1308,INM_cash
   5+ C01C
   6+ C01C 49 4E 56 45  INM_inventory 			DB "INVENTORY",0
   6+ C020 4E 54 4F 52
   6+ C024 59 00
   7+ C026 46 75 65 6C  INM_fuel				DB "Fuel:",0
   7+ C02A 3A 00
   8+ C02C 43 61 73 68  INM_cash				DB "Cash:",0
   8+ C030 3A 00
   9+ C032
  10+ C032 30 30 30 30  txt_inventory_amount	DB "00000",0
  10+ C036 30 00
  11+ C038 00 00        inventory_cursor		DW $0000
  12+ C03A              inv_fuel_position		equ	$0B30
  13+ C03A              inv_cash_position		equ	$1330
  14+ C03A
  15+ C03A              inventory_position		equ $2008
  16+ C03A              inventory_amount		equ $80
  17+ C03A              inventory_uom			equ	$B0
  18+ C03A 00           inv_selected_row        DB 0
  19+ C03B
  20+ C03B 00 00 00...  INM_cash_amount			DS 10
  21+ C045 20 43 72 00  INM_cash_UoM            DB " Cr",0
  22+ C049
  23+ C049 26 00        INM_DispAtoDE:          ld h,0
  24+ C04B 6F                                   ld l,a
  25+ C04C 01 F0 D8                             ld	bc,-10000
  26+ C04F CD 65 C0                             call	.Num1
  27+ C052 01 18 FC                             ld	bc,-1000
  28+ C055 CD 65 C0                             call	.Num1
  29+ C058 01 9C FF                             ld	bc,-100
  30+ C05B CD 65 C0                             call	.Num1
  31+ C05E 0E F6                                ld	c,-10
  32+ C060 CD 65 C0                             call	.Num1
  33+ C063 0E FF                                ld	c,-1
  34+ C065 3E 2F        .Num1:	                ld	a,'0'-1
  35+ C067 3C           .Num2:	                inc	a
  36+ C068 09                                   add	hl,bc
  37+ C069 38 FC                                jr	c,.Num2
  38+ C06B ED 42                                sbc	hl,bc
  39+ C06D 12                                   ld	(de),a
  40+ C06E 13                                   inc	de
  41+ C06F C9                                   ret
  42+ C070
  43+ C070              INM_print_boiler_text:  INCLUDE "Menus/print_boiler_text_inlineInclude.asm"
# file opened: ./Menus/print_boiler_text_inlineInclude.asm
   1++C070
   2++C070              ;">print_boilder_text hl = text structure, b = message count"
   3++C070              .BoilerTextLoop:
   4++C070 C5           	push		bc			; Save Message Count loop value
   5++C071 4E           	ld			c,(hl)		; Get Row into b
   6++C072 23           	inc			hl
   7++C073 46           	ld			b,(hl)		; Get Col into b
   8++C074 23           	inc			hl
   9++C075 5E           	ld			e,(hl)		; Get text address Lo into E
  10++C076 23           	inc			hl
  11++C077 56           	ld			d,(hl)		; Get text address Hi into E
  12++C078 23           	inc			hl
  13++C079 E5           	push		hl			; Save present HL to stack as this is the address for the next message
  14++C07A EB           	ex			de,hl		; now hl = address of text data
  15++C07B 1E FF        	ld			e,txt_status_colour
  16++C07D C5           	push		bc
  17++C07E D1           	pop			de
  18++C07F                  MMUSelectLayer1
  18++C07F ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
  19++C083 CD C8 E0     	call		l1_print_at
  20++C086 E1           	pop			hl
  21++C087 C1           	pop			bc
  22++C088 10 E6        	djnz		.BoilerTextLoop
  23++C08A C9           	ret
  24++C08B
# file closed: ./Menus/print_boiler_text_inlineInclude.asm
  44+ C08B
  45+ C08B DD 22 2F C1  INM_DispDEIXtoIY:       ld (.inmclcn32z),ix
  46+ C08F ED 53 31 C1                          ld (.inmclcn32zIX),de
  47+ C093 DD 21 2B C1                          ld ix,.inmclcn32t+36
  48+ C097 06 09                                ld b,9
  49+ C099 0E 00                                ld c,0
  50+ C09B 3E 30        .inmclcn321:            ld a,'0'
  51+ C09D B7                                   or a
  52+ C09E DD 5E 00     .inmclcn322:            ld e,(ix+0)
  53+ C0A1 DD 56 01                             ld d,(ix+1)
  54+ C0A4 2A 2F C1                             ld hl,(.inmclcn32z)
  55+ C0A7 ED 52                                sbc hl,de
  56+ C0A9 22 2F C1                             ld (.inmclcn32z),hl
  57+ C0AC DD 5E 02                             ld e,(ix+2)
  58+ C0AF DD 56 03                             ld d,(ix+3)
  59+ C0B2 2A 31 C1                             ld hl,(.inmclcn32zIX)
  60+ C0B5 ED 52                                sbc hl,de
  61+ C0B7 22 31 C1                             ld (.inmclcn32zIX),hl
  62+ C0BA 38 04                                jr c,.inmclcn325
  63+ C0BC 0C                                   inc c
  64+ C0BD 3C                                   inc a
  65+ C0BE 18 DE                                jr .inmclcn322
  66+ C0C0 DD 5E 00     .inmclcn325:            ld e,(ix+0)
  67+ C0C3 DD 56 01                             ld d,(ix+1)
  68+ C0C6 2A 2F C1                             ld hl,(.inmclcn32z)
  69+ C0C9 19                                   add hl,de
  70+ C0CA 22 2F C1                             ld (.inmclcn32z),hl
  71+ C0CD DD 5E 02                             ld e,(ix+2)
  72+ C0D0 DD 56 03                             ld d,(ix+3)
  73+ C0D3 2A 31 C1                             ld hl,(.inmclcn32zIX)
  74+ C0D6 ED 5A                                adc hl,de
  75+ C0D8 22 31 C1                             ld (.inmclcn32zIX),hl
  76+ C0DB 11 FC FF                             ld de,-4
  77+ C0DE DD 19                                add ix,de
  78+ C0E0 0C                                   inc c
  79+ C0E1 0D                                   dec c
  80+ C0E2 28 05                                jr z,.inmclcn323
  81+ C0E4 FD 77 00                             ld (iy+0),a
  82+ C0E7 FD 23                                inc iy
  83+ C0E9 10 B0        .inmclcn323:            djnz .inmclcn321
  84+ C0EB 3A 2F C1                             ld a,(.inmclcn32z)
  85+ C0EE C6 30                                add A,'0'
  86+ C0F0 FD 77 00                             ld (iy+0),a
  87+ C0F3 FD 36 02 00                          ld (iy+2),0
  88+ C0F7 FD 7E 00                             ld      a,(IY+0)
  89+ C0FA FD 77 01                             ld      (IY+1),a
  90+ C0FD 3E 2E                                ld      a,"."
  91+ C0FF FD 77 00                             ld      (IY+0),a
  92+ C102 FD 23                                inc     IY
  93+ C104 FD 23                                inc     IY
  94+ C106 C9                                   ret
  95+ C107 01 00 00 00  .inmclcn32t             dw 1,0,     10,0,     100,0,     1000,0,       10000,0
  95+ C10B 0A 00 00 00
  95+ C10F 64 00 00 00
  95+ C113 E8 03 00 00
  95+ C117 10 27 00 00
  96+ C11B A0 86 01 00                          dw $86a0,1, $4240,$0f, $9680,$98, $e100,$05f5, $ca00,$3b9a
  96+ C11F 40 42 0F 00
  96+ C123 80 96 98 00
  96+ C127 00 E1 F5 05
  96+ C12B 00 CA 9A 3B
  97+ C12F 00 00        .inmclcn32z             ds 2
  98+ C131 00 00        .inmclcn32zIX           ds 2
  99+ C133
 100+ C133              INM_GetFuelLevel:       INCLUDE "Menus/get_fuel_level_inlineinclude.asm"
# file opened: ./Menus/get_fuel_level_inlineinclude.asm
   1++C133
   2++C133
   3++C133 3A 75 9D     	ld		a,(Fuel)
   4++C136 11 09 B7     	ld		de,txt_fuel_level
   5++C139 0E 9C        	ld	c, -100
   6++C13B CD 45 C1     	call	.Num1
   7++C13E 0E F6        	ld	c,-10
   8++C140 CD 45 C1     	call	.Num1
   9++C143 0E FF        	ld	c,-1
  10++C145              .Num1:
  11++C145 06 2F        	ld	b,'0'-1
  12++C147              .Num2:
  13++C147 04           	inc		b
  14++C148 81           	add		a,c
  15++C149 38 FC        	jr		c,.Num2
  16++C14B 91           	sub 	c
  17++C14C C5           	push	bc
  18++C14D F5           	push	af
  19++C14E 79           	ld		a,c
  20++C14F FE FF        	cp		-1
  21++C151 CC 5A C1     	call	z,.InsertDot
  22++C154 78           	ld		a,b
  23++C155 12           	ld		(de),a
  24++C156 13           	inc		de
  25++C157 F1           	pop		af
  26++C158 C1           	pop		bc
  27++C159 C9           	ret
  28++C15A              .InsertDot:
  29++C15A 3E 2E        	ld		a,'.'
  30++C15C 12           	ld		(de),a
  31++C15D 13           	inc		de
  32++C15E C9           	ret
  33++C15F
# file closed: ./Menus/get_fuel_level_inlineinclude.asm
 101+ C15F
 102+ C15F              ; "A = stock item number"
 103+ C15F              ;----------------------------------------------------------------------------------------------------------------------------------
 104+ C15F 47           PrintInvItem:           ld		b,a
 105+ C160 21 7C 9D                             ld		hl,CargoTonnes
 106+ C163 ED 31                                add		hl,a
 107+ C165 7E                                   ld		a,(hl)
 108+ C166 4F                                   ld		c,a
 109+ C167 FE 00                                cp		0
 110+ C169 C8                                   ret		z
 111+ C16A 78                                   ld		a,b
 112+ C16B C5                                   push	bc						; push item nbr + quantity
 113+ C16C                                      MMUSelectStockTable
 113+ C16C ED 91 57 37 >                     nextreg StockTableMMU,     BankStockTable
 114+ C170 21 88 E0                             ld		hl, StockItemTable
 115+ C173 CD F0 A0                             call	getTableText
 116+ C176 7E           .ItemItemName           ld		a,(hl)
 117+ C177 21 1B A4                             ld		hl, WordIdx
 118+ C17A CD F0 A0                             call	getTableText
 119+ C17D ED 5B 38 C0                          ld		de,(inventory_cursor)
 120+ C181                                      MMUSelectLayer1
 120+ C181 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 121+ C185 CD C8 E0                             call	l1_print_at
 122+ C188 C1           .ItemAmount:            pop		bc						; b = item number, c = quantity
 123+ C189 C5                                   push	bc
 124+ C18A 79                                   ld		a,c
 125+ C18B 11 32 C0                             ld		de,txt_inventory_amount
 126+ C18E CD 49 C0                             call	INM_DispAtoDE
 127+ C191 21 32 C0                             ld		hl,txt_inventory_amount
 128+ C194 E5                                   push	hl
 129+ C195 7E           .ZeroLoop:              ld		a,(hl)
 130+ C196 FE 30                                cp		'0'
 131+ C198 20 05                                jr		nz,.NotZero
 132+ C19A 36 20        .ZeroDigit:             ld		(hl),' '
 133+ C19C 23                                   inc		hl
 134+ C19D 18 F6                                jr		.ZeroLoop
 135+ C19F ED 5B 38 C0  .NotZero:               ld		de,(inventory_cursor)
 136+ C1A3 E1                                   pop		hl
 137+ C1A4 1E 80                                ld		e,inventory_amount
 138+ C1A6                                      MMUSelectLayer1
 138+ C1A6 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 139+ C1AA CD C8 E0                             call	l1_print_at
 140+ C1AD              .ItemMeasure:	        MMUSelectStockTable
 140+ C1AD ED 91 57 37 >                     nextreg StockTableMMU,     BankStockTable
 141+ C1B1 21 88 E0                             ld		hl, StockItemTable
 142+ C1B4 C1                                   pop		bc
 143+ C1B5 78                                   ld		a,b
 144+ C1B6 CD F0 A0                             call	getTableText
 145+ C1B9 ED 34 07 00                          add		hl,7
 146+ C1BD 7E                                   ld		a,(hl)
 147+ C1BE 21 1B A4                             ld		hl,WordIdx
 148+ C1C1 CD F0 A0                             call	getTableText
 149+ C1C4 ED 5B 38 C0                          ld		de,(inventory_cursor)
 150+ C1C8 1E B0                                ld		e,inventory_uom
 151+ C1CA                                      MMUSelectLayer1
 151+ C1CA ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 152+ C1CE CD C8 E0                             call	l1_print_at
 153+ C1D1 3A 39 C0                             ld 		a,(inventory_cursor+1)
 154+ C1D4 C6 08                                add		a,8
 155+ C1D6 32 39 C0                             ld 		(inventory_cursor+1),a
 156+ C1D9 C9                                   ret
 157+ C1DA              ;----------------------------------------------------------------------------------------------------------------------------------
 158+ C1DA 2A 73 9D     INM_GetCash:            ld		hl,(Cash+2)
 159+ C1DD EB                                   ex      de,hl
 160+ C1DE DD 2A 71 9D                          ld      ix,(Cash)
 161+ C1E2 FD 21 3B C0                          ld		iy,INM_cash_amount
 162+ C1E6 CD 8B C0                             call 	INM_DispDEIXtoIY
 163+ C1E9 FD E5                                push    IY
 164+ C1EB D1                                   pop     de
 165+ C1EC 21 45 C0                             ld      hl,INM_cash_UoM
 166+ C1EF 01 04 00                             ld      bc,4
 167+ C1F2 ED B0                                ldir
 168+ C1F4 C9                                   ret
 169+ C1F5              ;----------------------------------------------------------------------------------------------------------------------------------
 170+ C1F5              draw_inventory_menu:    InitNoDoubleBuffer
 170+ C1F5             >                            MMUSelectLayer1
 170+ C1F5 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 170+ C1F9 CD 80 E0    >                            call	l1_cls
 170+ C1FC 3E 07       >                            ld		a,7
 170+ C1FE CD 9B E0    >                            call	l1_attr_cls_to_a
 170+ C201             >                            MMUSelectLayer2
 170+ C201 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 170+ C205 CD 08 E0    >                            call    asm_l2_double_buffer_off
 170+ C208 CD C9 E0    >                            call	l2_cls	; Get some space
 170+ C20B             >                            MMUSelectSpriteBank
 170+ C20B ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
 170+ C20F CD 27 E4    >                            call    sprite_cls_cursors
 171+ C212 3E 08                                ld      a,$08
 172+ C214 32 32 99                             ld      (MenuIdMax),a
 173+ C217                                      MMUSelectSpriteBank
 173+ C217 ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
 174+ C21B CD 27 E4                             call        sprite_cls_cursors
 175+ C21E 01 01 01     .Drawbox:               ld		bc,$0101
 176+ C221 11 FD BE                             ld		de,$BEFD
 177+ C224 3E C0                                ld		a,$C0
 178+ C226                                      MMUSelectLayer2
 178+ C226 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 179+ C22A CD F6 E1                             call	l2_draw_box
 180+ C22D 01 01 0A                             ld		bc,$0A01
 181+ C230 11 C0 FE                             ld		de,$FEC0
 182+ C233 CD 60 E2                             call	l2_draw_horz_line
 183+ C236 06 03        .StaticText:	        ld		b,3
 184+ C238 21 10 C0                             ld		hl,inventory_boiler_text
 185+ C23B CD 70 C0                             call	INM_print_boiler_text
 186+ C23E CD 33 C1     .DisplayFuel:           call	INM_GetFuelLevel
 187+ C241 21 09 B7                             ld		hl, txt_fuel_level
 188+ C244 7E                                   ld		a,(hl)
 189+ C245 FE 30                                cp		'0'
 190+ C247 20 01                                jr		nz,.PrintFuel
 191+ C249 23           .SkipLeadingZero:	    inc		hl
 192+ C24A 1E FF        .PrintFuel:             ld		e,txt_status_colour
 193+ C24C 01 30 0B                             ld		bc,inv_fuel_position
 194+ C24F                                      MMUSelectLayer2
 194+ C24F ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 195+ C253 CD 6F E1                             call	l2_print_at
 196+ C256 CD DA C1     .DisplayCash:           call	INM_GetCash
 197+ C259 21 3B C0                             ld		hl,INM_cash_amount
 198+ C25C 1E FF                                ld		e,txt_status_colour
 199+ C25E 01 30 13                             ld		bc,inv_cash_position
 200+ C261                                      MMUSelectLayer2
 200+ C261 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 201+ C265 CD 6F E1                             call	l2_print_at						; now we have the correct integer
 202+ C268 01 30 13                             ld		bc,inv_cash_position
 203+ C26B 21 3B C0                             ld		hl,INM_cash_amount
 204+ C26E 3E 00        .DisplayInventory:      ld		a,0
 205+ C270 21 08 20                             ld		hl,inventory_position
 206+ C273 22 38 C0                             ld		(inventory_cursor),hl
 207+ C276 F5           .InvLoop:	            push	af
 208+ C277 CD 5F C1                             call	PrintInvItem
 209+ C27A F1                                   pop		af
 210+ C27B 3C                                   inc		a
 211+ C27C FE 11                                cp		17
 212+ C27E 38 F6                                jr		c,.InvLoop
 213+ C280 C9                                   ret
 214+ C281
# file closed: ./Menus/inventory_menu.asm
1186  C281
1187  C281              ; Bank 53
1188  C281
1189  C281                  SLOT    MenuSystemAddr
1190  C281                  PAGE    BankMenuSystem
1191  C281              	ORG     MenuSystemAddr
1192  C000                  INCLUDE "./Menus/system_data_menu.asm"
# file opened: ./Menus/system_data_menu.asm
   1+ C000 53 79 73 74  system_data_page_marker DB "System      PG53"
   1+ C004 65 6D 20 20
   1+ C008 20 20 20 20
   1+ C00C 50 47 35 33
   2+ C010
   3+ C010 40 02 77 A5  plant_boiler_text		DW $0240,TextBuffer
   4+ C014 80 02 3D A6  						DW $0280,name_expanded
   5+ C018 08 0B A7 A2  						DW $0B08,WordDistance
   6+ C01C 08 13 B0 A2  						DW $1308,WordEconomy
   7+ C020 08 1B B8 A2  						DW $1B08,WordGovernment
   8+ C024 08 23 C3 A2  						DW $2308,WordTechLevel
   9+ C028 08 2B CD A2  						DW $2B08,WordPopulation
  10+ C02C 08 3B E8 A2  						DW $3B08,WordGross
  11+ C030 38 3B EE A2  						DW $3B38,WordProductivity
  12+ C034 08 43 FB A2  						DW $4308,WordAverage
  13+ C038 48 43 03 A3  						DW $4348,WordRadius
  14+ C03C 60 0B 77 A5  planet_zero_dist		DW $0B60,TextBuffer
  15+ C040 60 13 77 A5  planet_economy_disp		DW $1360,TextBuffer
  16+ C044 0A 00        techlevel_value			DB 10,0
  17+ C046 00 00 00...  distance_value          DS 20,0
  18+ C05A 20 4C 69 67  distance_uom            DB " Light Years",0
  18+ C05E 68 74 20 59
  18+ C062 65 61 72 73
  18+ C066 00
  19+ C067 00 00 00...  radius_value            DS 20
  20+ C07B 00                                   DB 0
  21+ C07C 20 6B 6D 00  radius_uom              DB " km",0
  22+ C080 00 00 00...  population_value        DS 20
  23+ C094 00                                   DB 0
  24+ C095 20 42 69 6C  population_uom          DB " Billion",0
  24+ C099 6C 69 6F 6E
  24+ C09D 00
  25+ C09E 00 00 00...  productivity_value      DS 20
  26+ C0B2 00                                   DB 0
  27+ C0B3 20 4D 20 43  productivity_uom        DB " M CR",0
  27+ C0B7 52 00
  28+ C0B9
  29+ C0B9              GovernmentIndexOffset	EQU 75
  30+ C0B9              DistanceScreenPos       EQU $0B60
  31+ C0B9              GovernmentScreenPos		EQU $1B60
  32+ C0B9              TechLevelScreenPos		EQU $2360
  33+ C0B9              SpeciesScreenPos        EQU $3308
  34+ C0B9
  35+ C0B9 00           system_present_or_target DB 0
  36+ C0BA 00 00        saved_present			 DW 0
  37+ C0BC
  38+ C0BC
  39+ C0BC 00 00 00...  SD_present_name         DS  30
  40+ C0DA 00                                   DB  0
  41+ C0DB 00 00 00...  SD_target_name          DS  30
  42+ C0F9 00                                   DB  0
  43+ C0FA 00 00 00...  SD_species              DS 30
  44+ C118 00                                   DB 0
  45+ C119 00 00 00...  SD_planet_description   DS 300,0
  46+ C245
  47+ C245 00           SDDisplayGovernment     DB 0
  48+ C246 00           SDDisplayEconomy        DB 0
  49+ C247 00           SDDisplayTekLevel       DB 0
  50+ C248 00           SDDisplayPopulation     DB 0
  51+ C249 00 00        SDDisplayProductivity   DW 0
  52+ C24B 00 00        SDDisplayRadius         DW 0
  53+ C24D              SDDataLength            EQU $ - SDDisplayEconomy
  54+ C24D
  55+ C24D 21 0A E9     SD_copy_system_data:    ld      hl,GalaxyDisplayGovernment
  56+ C250 11 45 C2                             ld      de,SDDisplayGovernment
  57+ C253 01 07 00                             ld      bc,SDDataLength
  58+ C256 ED B0                                ldir
  59+ C258 21 47 C2     .DisplayTechPlus1:      ld     hl,SDDisplayTekLevel
  60+ C25B 34                                   inc    (hl)
  61+ C25C C9                                   ret
  62+ C25D
  63+ C25D 21 7F E8     SD_copy_to_name:        ld      hl,GalaxyExpandedName
  64+ C260 01 1E 00                             ld      bc,30
  65+ C263 ED B0                                ldir
  66+ C265 C9                                   ret
  67+ C266
  68+ C266 21 64 F1     SD_copy_species:        ld      hl,GalaxySpecies
  69+ C269 11 FA C0                             ld      de,SD_species
  70+ C26C 01 1E 00                             ld      bc,30
  71+ C26F ED B0                                ldir
  72+ C271 C9                                   ret
  73+ C272
  74+ C272 21 85 F1     SD_copy_description:    ld      hl,GalaxyPlanetDescription
  75+ C275 11 19 C1                             ld      de,SD_planet_description
  76+ C278 7E           SDCopyLoop:             ld      a,(hl)
  77+ C279 FE 00                                cp      0
  78+ C27B 28 05                                jr      z,.SD_Copy_Done
  79+ C27D ED A0                                ldi
  80+ C27F C3 78 C2                             jp      SDCopyLoop
  81+ C282 12           .SD_Copy_Done:          ld      (de),a
  82+ C283 C9                                   ret
  83+ C284
  84+ C284 26 00        SDM_DispAtoDE:          ld h,0
  85+ C286 6F                                   ld l,a
  86+ C287 01 F0 D8                             ld	bc,-10000
  87+ C28A CD A0 C2                             call	.Num1
  88+ C28D 01 18 FC                             ld	bc,-1000
  89+ C290 CD A0 C2                             call	.Num1
  90+ C293 01 9C FF                             ld	bc,-100
  91+ C296 CD A0 C2                             call	.Num1
  92+ C299 0E F6                                ld	c,-10
  93+ C29B CD A0 C2                             call	.Num1
  94+ C29E 0E FF                                ld	c,-1
  95+ C2A0 3E 2F        .Num1:	                ld	a,'0'-1
  96+ C2A2 3C           .Num2:	                inc	a
  97+ C2A3 09                                   add	hl,bc
  98+ C2A4 38 FC                                jr	c,.Num2
  99+ C2A6 ED 42                                sbc	hl,bc
 100+ C2A8 12                                   ld	(de),a
 101+ C2A9 13                                   inc	de
 102+ C2AA C9                                   ret
 103+ C2AB
 104+ C2AB
 105+ C2AB 3A 1C 9A     sdm_calc_distance:      ld      a,(Galaxy)
 106+ C2AE                                      MMUSelectGalaxyA
 106+ C2AE ED 92 57    >                     nextreg GalaxyDataMMU,       a
 107+ C2B1 ED 4B 2F 9A                          ld      bc,(PresentSystemX)
 108+ C2B5 ED 43 57 E8                          ld      (GalaxyPresentSystem),bc
 109+ C2B9 ED 4B E8 C2                          ld      bc,(SD_working_cursor)
 110+ C2BD ED 43 59 E8                          ld      (GalaxyDestinationSystem),bc
 111+ C2C1 CD F8 FB                             call    galaxy_find_distance            ; get distance into HL
 112+ C2C4 C9           .done_number:           ret
 113+ C2C5
 114+ C2C5
 115+ C2C5              SDM_print_boiler_text:
 116+ C2C5                  INCLUDE "Menus/print_boiler_text_inlineInclude.asm"
# file opened: ./Menus/print_boiler_text_inlineInclude.asm
   1++C2C5
   2++C2C5              ;">print_boilder_text hl = text structure, b = message count"
   3++C2C5              .BoilerTextLoop:
   4++C2C5 C5           	push		bc			; Save Message Count loop value
   5++C2C6 4E           	ld			c,(hl)		; Get Row into b
   6++C2C7 23           	inc			hl
   7++C2C8 46           	ld			b,(hl)		; Get Col into b
   8++C2C9 23           	inc			hl
   9++C2CA 5E           	ld			e,(hl)		; Get text address Lo into E
  10++C2CB 23           	inc			hl
  11++C2CC 56           	ld			d,(hl)		; Get text address Hi into E
  12++C2CD 23           	inc			hl
  13++C2CE E5           	push		hl			; Save present HL to stack as this is the address for the next message
  14++C2CF EB           	ex			de,hl		; now hl = address of text data
  15++C2D0 1E FF        	ld			e,txt_status_colour
  16++C2D2 C5           	push		bc
  17++C2D3 D1           	pop			de
  18++C2D4                  MMUSelectLayer1
  18++C2D4 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
  19++C2D8 CD C8 E0     	call		l1_print_at
  20++C2DB E1           	pop			hl
  21++C2DC C1           	pop			bc
  22++C2DD 10 E6        	djnz		.BoilerTextLoop
  23++C2DF C9           	ret
  24++C2E0
# file closed: ./Menus/print_boiler_text_inlineInclude.asm
 117+ C2E0
 118+ C2E0 7E           PlanetLeftJustifyLoop:  ld      a,(hl)
 119+ C2E1 FE 30                                cp      "0"
 120+ C2E3 C0                                   ret      nz
 121+ C2E4 23                                   inc     hl
 122+ C2E5 10 F9                                djnz    PlanetLeftJustifyLoop
 123+ C2E7 C9                                   ret
 124+ C2E8
 125+ C2E8 00 00        SD_working_cursor       DW   0
 126+ C2EA
 127+ C2EA 00 00 00...  sd_copy_of_seed         DS 6
 128+ C2F0
 129+ C2F0              draw_system_data_menu:  InitNoDoubleBuffer
 129+ C2F0             >                            MMUSelectLayer1
 129+ C2F0 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 129+ C2F4 CD 80 E0    >                            call	l1_cls
 129+ C2F7 3E 07       >                            ld		a,7
 129+ C2F9 CD 9B E0    >                            call	l1_attr_cls_to_a
 129+ C2FC             >                            MMUSelectLayer2
 129+ C2FC ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 129+ C300 CD 08 E0    >                            call    asm_l2_double_buffer_off
 129+ C303 CD C9 E0    >                            call	l2_cls	; Get some space
 129+ C306             >                            MMUSelectSpriteBank
 129+ C306 ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
 129+ C30A CD 27 E4    >                            call    sprite_cls_cursors
 130+ C30D                                      ZeroA
 130+ C30D AF          >                        xor a
 131+ C30E 32 B9 C0                             ld      (system_present_or_target),a
 132+ C311 3E 08                                ld		a,8
 133+ C313 32 32 99                             ld		(MenuIdMax),a
 134+ C316 3A 1C 9A     .SelectGalaxy:          ld      a,(Galaxy)
 135+ C319                                      MMUSelectGalaxyA
 135+ C319 ED 92 57    >                     nextreg GalaxyDataMMU,       a
 136+ C31C ED 4B 31 9A  .CheckCursorOrHome:     ld      bc,(TargetSystemX)              ; Find out if we have to work on hyperspace or normal cursor
 137+ C320 ED 43 E8 C2                          ld      (SD_working_cursor),bc
 138+ C324 ED 43 5B E8                          ld      (GalaxyTargetSystem),bc
 139+ C328 CD 65 FC                             call    galaxy_system_under_cursor
 140+ C32B FE FF        .IsCursorOnSystem:      cp      $FF                               ; if a = 0 then failed
 141+ C32D 28 0F                                jr      z,.FoundASystem
 142+ C32F ED 4B 2F 9A  .UsePresentSystem:      ld      bc,(PresentSystemX)
 143+ C333 ED 43 E8 C2                          ld      (SD_working_cursor),bc
 144+ C337 ED 43 5B E8                          ld      (GalaxyTargetSystem),bc
 145+ C33B CD 65 FC                             call    galaxy_system_under_cursor
 146+ C33E ED 4B 31 9A  .FoundASystem:          ld      bc,(TargetSystemX)
 147+ C342 2A 2F 9A                             ld      hl,(PresentSystemX)
 148+ C345 78                                   ld      a,b
 149+ C346 BC                                   cp      h
 150+ C347 20 04                                jr      nz,.DiffCoord
 151+ C349 79                                   ld      a,c
 152+ C34A BD                                   cp      l
 153+ C34B 28 05                                jr      z,.SameCoord
 154+ C34D 3E FF        .DiffCoord:             ld      a,$FF
 155+ C34F 32 B9 C0                             ld      (system_present_or_target),a
 156+ C352 21 1D 9A     .SameCoord:             ld      hl,WorkingSeeds            ; found a system so save it
 157+ C355 11 EA C2                             ld      de,sd_copy_of_seed
 158+ C358 CD 02 FA                             call    galaxy_copy_seed
 159+ C35B CD C5 FA     .GetSystemName:         call    GalaxyDigramWorkings       ; we have galaxy working seed populated now
 160+ C35E 01 01 01     .Drawbox:               ld		bc,$0101
 161+ C361 11 FD BE                             ld		de,$BEFD
 162+ C364 3E C0                                ld		a,$C0
 163+ C366                                      MMUSelectLayer2
 163+ C366 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 164+ C36A CD F6 E1                             call	l2_draw_box
 165+ C36D 01 01 0A                             ld		bc,$0A01
 166+ C370 11 C0 FE                             ld		de,$FEC0
 167+ C373 CD 60 E2                             call	l2_draw_horz_line
 168+ C376 3E 0E        .ExpandStatic:          ld		a,14
 169+ C378 CD B8 A5                             call	expandTokenToString
 170+ C37B 3A 1C 9A     .TargetSystem:          ld      a,(Galaxy)      ; DEBUG as galaxy n is not working
 171+ C37E                                      MMUSelectGalaxyA
 171+ C37E ED 92 57    >                     nextreg GalaxyDataMMU,       a
 172+ C381 ED 4B E8 C2                          ld      bc, (SD_working_cursor)
 173+ C385               ;   call    galaxy_name_at_bc
 174+ C385                ;  cp      $FF               ; if we didn't get a
 175+ C385 21 EA C2                             ld      hl,sd_copy_of_seed
 176+ C388 11 F8 E8                             ld      de,GalaxyWorkingSeed
 177+ C38B CD 02 FA                             call    galaxy_copy_seed
 178+ C38E CD 6D F9                             call    galaxy_planet_data                              ; Geneate galaxy data from working seed
 179+ C391 CD 4D C2                             call    SD_copy_system_data
 180+ C394 11 3D A6                             ld      de,name_expanded
 181+ C397 CD 5D C2                             call    SD_copy_to_name
 181+ C39A
 182+ C39A 11 98 13                             ld      de,hyperspace_position
 183+ C39D 21 3D A6                             ld      hl,name_expanded
 184+ C3A0 06 0B        .StaticText:	        ld		b,11
 185+ C3A2 21 10 C0                             ld		hl,plant_boiler_text
 186+ C3A5 CD C5 C2                             call	SDM_print_boiler_text
 187+ C3A8 3A B9 C0     .CalcDistance:          ld		a,(system_present_or_target)
 188+ C3AB FE 00                                cp		0
 189+ C3AD 28 2B                                jr		z,.ZeroDistance
 190+ C3AF CD AB C2     .NotZero:               call    sdm_calc_distance
 191+ C3B2 DD 2A B8 99  .DisplayDistance:       ld      ix,(Distance)
 192+ C3B6 11 00 00                             ld      de,0
 193+ C3B9 FD 21 46 C0                          ld      iy,distance_value
 194+ C3BD CD 02 AF                             call    DispDEIXtoIY1DP
 195+ C3C0 FD E5        .AddDistUo              push    iy
 196+ C3C2 E1                                   pop     hl
 197+ C3C3 23                                   inc     hl
 198+ C3C4 11 5A C0                             ld      de,distance_uom
 199+ C3C7 CD F0 C4                             call    SDTackOnUOMtoHL
 200+ C3CA 11 60 0B                             ld      de,DistanceScreenPos
 201+ C3CD 21 46 C0                             ld      hl,distance_value
 202+ C3D0                                      MMUSelectLayer1
 202+ C3D0 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 203+ C3D4 CD C8 E0                             call	l1_print_at
 204+ C3D7 C3 E7 C3                             jp      .DisplayEconomy
 205+ C3DA 3E 18        .ZeroDistance:          ld		a,24						; print literal zero dist
 206+ C3DC CD B8 A5                             call	expandTokenToString
 207+ C3DF 06 01                                ld		b,1
 208+ C3E1 21 3C C0                             ld		hl,planet_zero_dist
 209+ C3E4 CD C5 C2                             call	SDM_print_boiler_text
 210+ C3E7 3A 46 C2     .DisplayEconomy:        ld		a,(SDDisplayEconomy)
 211+ C3EA C6 0F                                add     a,TextEconomyOffset
 212+ C3EC CD B8 A5                             call	expandTokenToString
 213+ C3EF 06 01                                ld		b,1
 214+ C3F1 21 40 C0                             ld		hl,planet_economy_disp
 215+ C3F4 CD C5 C2                             call	SDM_print_boiler_text
 216+ C3F7 3A 45 C2     .DisplayGovernment:     ld		a,(SDDisplayGovernment)
 217+ C3FA C6 4B                                add		a,TextGovOffset
 218+ C3FC CD AA A5                             call	WordIndexToAddress
 219+ C3FF 11 60 1B                             ld		de,GovernmentScreenPos
 220+ C402                                      MMUSelectLayer1
 220+ C402 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 221+ C406 CD C8 E0                             call	l1_print_at
 222+ C409 3A 47 C2     .DisplayTechLevel:      ld		a,(SDDisplayTekLevel)
 223+ C40C 11 44 C0                             ld		de,techlevel_value
 224+ C40F CD 84 C2                             call    SDM_DispAtoDE
 225+ C412 AF                                   xor     a
 226+ C413 12                                   ld      (de),a
 227+ C414 21 44 C0                             ld      hl,techlevel_value
 228+ C417 06 05                                ld      b,5
 229+ C419 CD E0 C2                             call    PlanetLeftJustifyLoop
 230+ C41C 11 60 23                             ld		de,TechLevelScreenPos
 231+ C41F                                      MMUSelectLayer1
 231+ C41F ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 232+ C423 CD C8 E0                             call	l1_print_at
 233+ C426 3A 48 C2     .DisplayPopulation:     ld      a,(SDDisplayPopulation)
 234+ C429 DD 26 00                             ld      ixh,0
 235+ C42C DD 6F                                ld      ixl,a
 236+ C42E 11 00 00                             ld      de,0
 237+ C431 FD 21 80 C0                          ld      iy,population_value
 238+ C435 CD 02 AF                             call    DispDEIXtoIY1DP
 239+ C438 FD E5        .AddUoM:                push    iy
 240+ C43A E1                                   pop     hl
 241+ C43B 23                                   inc     hl
 242+ C43C 11 95 C0                             ld      de,population_uom
 243+ C43F CD F0 C4                             call    SDTackOnUOMtoHL
 244+ C442 11 60 2B                             ld      de,$2B60
 245+ C445 21 80 C0                             ld      hl,population_value
 246+ C448                                      MMUSelectLayer1
 246+ C448 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 247+ C44C CD C8 E0                             call	l1_print_at
 248+ C44F              ;SDDisplayPopulation     DB 0
 249+ C44F 3A 1C 9A     .DisplayPopulationType: ld      a,(Galaxy)      ; DEBUG as galaxy n is not working
 250+ C452                                      MMUSelectGalaxyA
 250+ C452 ED 92 57    >                     nextreg GalaxyDataMMU,       a
 251+ C455 CD DC F6                             call    galaxy_get_species
 252+ C458 CD 66 C2                             call    SD_copy_species
 253+ C45B 21 FA C0                             ld		hl,SD_species
 254+ C45E 11 08 33                             ld		de,SpeciesScreenPos
 255+ C461                                      MMUSelectLayer1
 255+ C461 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 256+ C465 CD C8 E0                             call	l1_print_at
 257+ C468 2A 49 C2     .DisplayProductivity:   ld      hl,(SDDisplayProductivity)
 258+ C46B E5                                   push    hl
 259+ C46C DD E1                                pop     ix
 260+ C46E 11 00 00                             ld      de,0
 261+ C471 FD 21 9E C0                          ld      iy,productivity_value
 262+ C475 CD 11 AF                             call    DispDEIXtoIY
 263+ C478 FD E5        .AddProdUoM:            push    iy
 264+ C47A E1                                   pop     hl
 265+ C47B 23                                   inc     hl
 266+ C47C 11 B3 C0                             ld      de,productivity_uom
 267+ C47F CD F0 C4                             call    SDTackOnUOMtoHL
 268+ C482 11 A0 3B                             ld      de,$3BA0
 269+ C485 21 9E C0                             ld      hl,productivity_value
 270+ C488                                      MMUSelectLayer1
 270+ C488 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 271+ C48C CD C8 E0                             call	l1_print_at
 272+ C48F 3A 1C 9A     .DisplayRadius:         ld      a,(Galaxy)      ; DEBUG as galaxy n is not working
 273+ C492                                      MMUSelectGalaxyA
 273+ C492 ED 92 57    >                     nextreg GalaxyDataMMU,       a
 274+ C495 2A 10 E9                             ld      hl,(GalaxyDisplayRadius)
 275+ C498 E5                                   push    hl
 276+ C499 DD E1                                pop     ix
 277+ C49B 11 00 00                             ld      de,0
 278+ C49E FD 21 67 C0                          ld      iy,radius_value
 279+ C4A2 CD 11 AF                             call    DispDEIXtoIY
 280+ C4A5 FD E5        .AddRadiusUoM:          push    iy
 281+ C4A7 E1                                   pop     hl
 282+ C4A8 23                                   inc     hl
 283+ C4A9 11 7C C0                             ld      de,radius_uom
 284+ C4AC CD F0 C4                             call    SDTackOnUOMtoHL
 285+ C4AF 21 67 C0                             ld      hl,radius_value
 286+ C4B2 11 A0 43                             ld      de,$43A0
 287+ C4B5                                      MMUSelectLayer1
 287+ C4B5 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 288+ C4B9 CD C8 E0                             call	l1_print_at
 289+ C4BC 3A 1C 9A     .DisplayDescription:    ld      a,(Galaxy)      ; DEBUG as galaxy n is not working
 290+ C4BF                                      MMUSelectGalaxyA
 290+ C4BF ED 92 57    >                     nextreg GalaxyDataMMU,       a
 291+ C4C2 11 F8 E8     .CopySaveToGal:         ld      de,GalaxyWorkingSeed
 292+ C4C5 21 EA C2                             ld      hl,sd_copy_of_seed
 293+ C4C8 CD 02 FA                             call    galaxy_copy_seed
 294+ C4CB ED 4B E8 C2                          ld      bc,(SD_working_cursor)
 295+ C4CF CD 6F F8                             call     GalaxyGenerateDesc
 296+ C4D2 CD 72 C2                             call    SD_copy_description
 297+ C4D5 11 08 57                             ld      de,$5708
 298+ C4D8 21 19 C1                             ld      hl,SD_planet_description
 299+ C4DB                                      MMUSelectLayer1
 299+ C4DB ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 300+ C4DF CD 15 E1                             call	l1_print_at_wrap
 301+ C4E2 C9                                   ret
 302+ C4E3
 303+ C4E3              ; HL = value to add on
 304+ C4E3              ; de = Unit of Measure
 305+ C4E3 7E           SDAddUoMtoHL:           ld      a,(hl)
 306+ C4E4 FE 00                                cp      0
 307+ C4E6 28 03                                jr      z,.FoundEnd
 308+ C4E8 23                                   inc     hl
 309+ C4E9 18 F8                                jr      SDAddUoMtoHL
 310+ C4EB EB           .FoundEnd:              ex      de,hl
 311+ C4EC CD 78 C2                             call    SDCopyLoop
 312+ C4EF C9                                   ret
 313+ C4F0
 314+ C4F0              ; works on HL already being at end
 315+ C4F0              ; de = Unit of Measure
 316+ C4F0 23           SDTackOnUOMtoHL:        inc     hl
 317+ C4F1 EB                                   ex      hl,de
 318+ C4F2 CD 78 C2                             call    SDCopyLoop
 319+ C4F5 C9                                   ret
 320+ C4F6              ;
 321+ C4F6              ;
 322+ C4F6              ;    SDDisplayEconomy        DB 0
 323+ C4F6              ;SDDisplayGovernment     DB 0
 324+ C4F6              ;SDDisplayEcononmy       DB 0
 325+ C4F6              ;SDDisplayTekLevel       DB 0
 326+ C4F6              ;
 327+ C4F6              ;SDDisplayProductivity   DW 0
 328+ C4F6              ;SDDisplayRadius         DW 0
 329+ C4F6              ;SDDataLength            EQU $ - SDDisplayEconomy
 330+ C4F6              ;
 331+ C4F6
 332+ C4F6
 333+ C4F6
 334+ C4F6
 335+ C4F6
 336+ C4F6              ;; PREsent ssytem
 337+ C4F6              ;; hyperspace systrem
 338+ C4F6              ;.StatusText:
 339+ C4F6              ;	; get closet ssytem to cursor
 340+ C4F6              ;	call	get_cmdr_condition
 341+ C4F6              ;	ld		hl, ConditionNameIdx
 342+ C4F6              ;	call	getTableText
 343+ C4F6              ;	ld		de,condition_position
 344+ C4F6              ;	call	l1_print_at
 345+ C4F6              ;.DisplayFuel:
 346+ C4F6              ;	call	GetFuelLevel
 347+ C4F6              ;	ld		hl, txt_fuel_level
 348+ C4F6              ;	ld		a,(hl)
 349+ C4F6              ;	cp		'0'
 350+ C4F6              ;	jr		nz,.PrintFuel
 351+ C4F6              ;.SkipLeadingZero:
 352+ C4F6              ;	inc		hl
 353+ C4F6              ;.PrintFuel:
 354+ C4F6              ;	ld		de,fuel_position
 355+ C4F6              ;	call	l1_print_at
 356+ C4F6              ;.DisplayCash:
 357+ C4F6              ;	call	GetCash
 358+ C4F6              ;	ld		hl,txt_cash_amount
 359+ C4F6              ;	ld		de,cash_position
 360+ C4F6              ;	call	l1_print_at						; now we have the correct integer
 361+ C4F6              ;	ld		bc,cash_position
 362+ C4F6              ;	ld		hl,txt_cash_amount
 363+ C4F6              ;.CorrectPosition:
 364+ C4F6              ;	ld		a,(hl)
 365+ C4F6              ;	cp		0
 366+ C4F6              ;	jr		z,.DoneCorrection
 367+ C4F6              ;.StillDigits:
 368+ C4F6              ;	ld		a,c
 369+ C4F6              ;	add		a,8								; its 1 character forwards
 370+ C4F6              ;	ld		c,a
 371+ C4F6              ;	inc		hl
 372+ C4F6              ;	jr		.CorrectPosition
 373+ C4F6              ;.DoneCorrection:
 374+ C4F6              ;	ld		hl,txt_cash_decimal
 375+ C4F6              ;	ld		d,b
 376+ C4F6              ;	ld		e,c
 377+ C4F6              ;	call	l1_print_at
 378+ C4F6              ;.PrintLegalStatus:
 379+ C4F6              ;	ld		a,(FugitiveInnocentStatus)
 380+ C4F6              ;	cp		0
 381+ C4F6              ;	jr		nz,.Naughty
 382+ C4F6              ;	ld		hl,WordClean
 383+ C4F6              ;	jr		.DisplayLegalStatus
 384+ C4F6              ;.Naughty:
 385+ C4F6              ;	cp		50
 386+ C4F6              ;	jr		c,.JustOffender
 387+ C4F6              ;.VeryNaughty:
 388+ C4F6              ;	ld		hl,WordFugitive
 389+ C4F6              ;	jr		.DisplayLegalStatus
 390+ C4F6              ;.JustOffender:
 391+ C4F6              ;	ld		hl,WordOffender
 392+ C4F6              ;.DisplayLegalStatus:
 393+ C4F6              ;	ld		de,legal_status_position
 394+ C4F6              ;	call	l1_print_at						; now we have the correct integer
 395+ C4F6              ;
 396+ C4F6 C9           	ret
 397+ C4F7
# file closed: ./Menus/system_data_menu.asm
1193  C4F7
1194  C4F7              ; Bank 54
1195  C4F7
1196  C4F7                  SLOT    MenuMarketAddr
1197  C4F7                  PAGE    BankMenuMarket
1198  C4F7                  ORG     MenuMarketAddr
1199  C000                  INCLUDE "./Menus/market_prices_menu.asm"
# file opened: ./Menus/market_prices_menu.asm
   1+ C000 4D 61 72 6B  market_prices_page_marker  DB "MarketPricesPG54"
   1+ C004 65 74 50 72
   1+ C008 69 63 65 73
   1+ C00C 50 47 35 34
   2+ C010 50 02 77 A5  market_boiler_text		DW $0250,TextBuffer
   3+ C014 20 02 3D A6  						DW $0220,name_expanded
   4+ C018 80 0B 97 A1  						DW $0B80,WordUnit
   5+ C01C B0 0B E0 A3  						DW $0BB0,WordQuantity
   6+ C020 08 13 BE A3  						DW $1308,WordProduct
   7+ C024 60 13 C6 A3  						DW $1360,WordUoM
   8+ C028 80 13 CA A3  						DW $1380,WordPrice
   9+ C02C B0 13 EE A3  						DW $13B0,WordStock
  10+ C030 E0 13 EA A3  						DW $13E0,WordInv
  11+ C034
  12+ C034              ;char name[16];
  13+ C034              ;current_quantity;
  14+ C034              ;current_price;
  15+ C034              ;base_price;
  16+ C034              ;eco_adjust;
  17+ C034              ;base_quantity;
  18+ C034              ;mask;
  19+ C034              ;units;
  20+ C034
  21+ C034
  22+ C034 30 30 2E 30  txt_market_amount	    DB "00.0",0
  22+ C038 00
  23+ C039 39 39 39 00  txt_market_quantity     DB "999",0
  24+ C03D 39 39 39 00  txt_market_cargo        DB "999",0
  25+ C041 00 00        market_cursor			DW  $0000
  26+ C043              market_position			equ $2008
  27+ C043              market_uom				equ	$68
  28+ C043              market_price 			equ $88
  29+ C043              market_Quantity			equ	$B0
  30+ C043              market_Cargo            equ $E0
  31+ C043              market_UomOffset		equ 46
  32+ C043 20 20 20 20  market_blank_line       DB "                                ",0
  32+ C047 20 20 20 20
  32+ C04B 20 20 20 20
  32+ C04F 20 20 20 20
  32+ C053 20 20 20 20
  32+ C057 20 20 20 20
  32+ C05B 20 20 20 20
  32+ C05F 20 20 20 20
  32+ C063 00
  33+ C064 43 61 72 67  mkt_hold_level          DB "Cargo: ",0
  33+ C068 6F 3A 20 00
  34+ C06C 43 61 73 68  mkt_cash				DB "Cash : ",0
  34+ C070 20 3A 20 00
  35+ C074 00           mkt_selected_row        db  0
  36+ C075
  37+ C075              mkt_cash_position       equ $B048
  38+ C075 00 00 00...  mkt_cash_amount			DS 20
  39+ C089 20 43 72 20  mkt_cash_UoM            DB " Cr       ",0
  39+ C08D 20 20 20 20
  39+ C091 20 20 00
  40+ C094              mkt_cargo_position      equ $A848
  41+ C094 00 00 00...  mkt_cargo_amount		DS 20
  42+ C0A8 20 54 6F 6E  mkt_cargo_UoM           DB " Tonnes   ",0
  42+ C0AC 6E 65 73 20
  42+ C0B0 20 20 00
  43+ C0B3              ;                           12345678901
  44+ C0B3
  45+ C0B3              ;----------------------------------------------------------------------------------------------------------------------------------
  46+ C0B3 3A 74 C0     mkt_highlight_row:      ld      a,(mkt_selected_row)
  47+ C0B6 C6 04                                add     a,4
  48+ C0B8 57                                   ld      d,a
  49+ C0B9 1E 56                                ld      e,L1InvHighlight
  50+ C0BB                                      MMUSelectLayer1
  50+ C0BB ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
  51+ C0BF CD 30 E0                             call    l1_hilight_row
  52+ C0C2 C9                                   ret
  53+ C0C3              ;----------------------------------------------------------------------------------------------------------------------------------
  54+ C0C3 3A 74 C0     mkt_lowlight_row        ld      a,(mkt_selected_row)
  55+ C0C6 C6 04                                add     a,4
  56+ C0C8 57                                   ld      d,a
  57+ C0C9 1E 07                                ld      e,L1InvLowlight
  58+ C0CB                                      MMUSelectLayer1
  58+ C0CB ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
  59+ C0CF CD 30 E0                             call    l1_hilight_row
  60+ C0D2 C9                                   ret
  61+ C0D3              ;----------------------------------------------------------------------------------------------------------------------------------
  62+ C0D3 CD EA C0     MKT_DispDEIXtoIY1DP:    call    MKT_DispDEIXtoIY
  63+ C0D6 FD 36 02 00                          ld (iy+2),0
  64+ C0DA FD 7E 00                             ld      a,(IY+0)
  65+ C0DD FD 77 01                             ld      (IY+1),a
  66+ C0E0 3E 2E                                ld      a,"."
  67+ C0E2 FD 77 00                             ld      (IY+0),a
  68+ C0E5 FD 23                                inc     IY
  69+ C0E7 FD 23                                inc     IY
  70+ C0E9 C9                                   ret
  71+ C0EA              ;----------------------------------------------------------------------------------------------------------------------------------
  72+ C0EA DD 22 7F C1  MKT_DispDEIXtoIY:       ld (.MKTclcn32z),ix
  73+ C0EE ED 53 81 C1                          ld (.MKTclcn32zIX),de
  74+ C0F2 DD 21 7B C1                          ld ix,.MKTclcn32t+36
  75+ C0F6 06 09                                ld b,9
  76+ C0F8 0E 00                                ld c,0
  77+ C0FA 3E 30        .MKTclcn321:            ld a,'0'
  78+ C0FC B7                                   or a
  79+ C0FD DD 5E 00     .MKTclcn322:            ld e,(ix+0)
  80+ C100 DD 56 01                             ld d,(ix+1)
  81+ C103 2A 7F C1                             ld hl,(.MKTclcn32z)
  82+ C106 ED 52                                sbc hl,de
  83+ C108 22 7F C1                             ld (.MKTclcn32z),hl
  84+ C10B DD 5E 02                             ld e,(ix+2)
  85+ C10E DD 56 03                             ld d,(ix+3)
  86+ C111 2A 81 C1                             ld hl,(.MKTclcn32zIX)
  87+ C114 ED 52                                sbc hl,de
  88+ C116 22 81 C1                             ld (.MKTclcn32zIX),hl
  89+ C119 38 04                                jr c,.MKTclcn325
  90+ C11B 0C                                   inc c
  91+ C11C 3C                                   inc a
  92+ C11D 18 DE                                jr .MKTclcn322
  93+ C11F DD 5E 00     .MKTclcn325:            ld e,(ix+0)
  94+ C122 DD 56 01                             ld d,(ix+1)
  95+ C125 2A 7F C1                             ld hl,(.MKTclcn32z)
  96+ C128 19                                   add hl,de
  97+ C129 22 7F C1                             ld (.MKTclcn32z),hl
  98+ C12C DD 5E 02                             ld e,(ix+2)
  99+ C12F DD 56 03                             ld d,(ix+3)
 100+ C132 2A 81 C1                             ld hl,(.MKTclcn32zIX)
 101+ C135 ED 5A                                adc hl,de
 102+ C137 22 81 C1                             ld (.MKTclcn32zIX),hl
 103+ C13A 11 FC FF                             ld de,-4
 104+ C13D DD 19                                add ix,de
 105+ C13F 0C                                   inc c
 106+ C140 0D                                   dec c
 107+ C141 28 05                                jr z,.MKTclcn323
 108+ C143 FD 77 00                             ld (iy+0),a
 109+ C146 FD 23                                inc iy
 110+ C148 10 B0        .MKTclcn323:            djnz .MKTclcn321
 111+ C14A 3A 7F C1                             ld a,(.MKTclcn32z)
 112+ C14D C6 30                                add A,'0'
 113+ C14F FD 77 00                             ld (iy+0),a
 114+ C152 FD 36 01 00                          ld (iy+1),0
 115+ C156 C9                                   ret
 116+ C157 01 00 00 00  .MKTclcn32t             dw 1,0,     10,0,     100,0,     1000,0,       10000,0
 116+ C15B 0A 00 00 00
 116+ C15F 64 00 00 00
 116+ C163 E8 03 00 00
 116+ C167 10 27 00 00
 117+ C16B A0 86 01 00                          dw $86a0,1, $4240,$0f, $9680,$98, $e100,$05f5, $ca00,$3b9a
 117+ C16F 40 42 0F 00
 117+ C173 80 96 98 00
 117+ C177 00 E1 F5 05
 117+ C17B 00 CA 9A 3B
 118+ C17F 00 00        .MKTclcn32z             ds 2
 119+ C181 00 00        .MKTclcn32zIX           ds 2
 120+ C183              ;----------------------------------------------------------------------------------------------------------------------------------
 121+ C183              ; "DispHL, writes HL to DE address"
 122+ C183 01 F0 D8     MPM_DispHLtoDE:         ld	bc,-10000
 123+ C186 CD 9C C1                             call	MPM_Num1
 124+ C189 01 18 FC                             ld	bc,-1000
 125+ C18C CD 9C C1                             call	MPM_Num1
 126+ C18F 01 9C FF                             ld	bc,-100
 127+ C192 CD 9C C1                             call	MPM_Num1
 128+ C195 0E F6                                ld	c,-10
 129+ C197 CD 9C C1                             call	MPM_Num1
 130+ C19A 0E FF                                ld	c,-1
 131+ C19C 3E 2F        MPM_Num1:	            ld	a,'0'-1
 132+ C19E 3C           .Num2:	                inc	a
 133+ C19F 09                                   add	hl,bc
 134+ C1A0 38 FC                                jr	c,.Num2
 135+ C1A2 ED 42                                sbc	hl,bc
 136+ C1A4 12                                   ld	(de),a
 137+ C1A5 13                                   inc	de
 138+ C1A6 C9                                   ret
 139+ C1A7              ;----------------------------------------------------------------------------------------------------------------------------------
 140+ C1A7 26 00        MPM_DispAtoDE:          ld h,0
 141+ C1A9 6F                                   ld l,a
 142+ C1AA C3 83 C1                             jp MPM_DispHLtoDE
 143+ C1AD              ;----------------------------------------------------------------------------------------------------------------------------------
 144+ C1AD 26 00        MPM_DispPriceAtoDE:     ld h,0
 145+ C1AF 6F                                   ld l,a
 146+ C1B0 01 9C FF                             ld	bc,-100
 147+ C1B3 CD C3 C1                             call	.NumLeadBlank1
 148+ C1B6 0E F6                                ld	c,-10
 149+ C1B8 CD 9C C1                             call	MPM_Num1
 150+ C1BB 3E 2E                                ld		a,'.'					; we could assume preformat but
 151+ C1BD 12                                   ld		(de),a					; we can optimse that later TODO
 152+ C1BE 13                                   inc		de						; with just an inc De
 153+ C1BF 0E FF                                ld	c,-1
 154+ C1C1 18 D9                                jr		MPM_Num1
 155+ C1C3 3E 2F        .NumLeadBlank1:	        ld	a,'0'-1
 156+ C1C5 3C           .NumLeadBlank2:	        inc	a
 157+ C1C6 09                                   add	hl,bc
 158+ C1C7 38 FC                                jr	c,.NumLeadBlank2
 159+ C1C9 FE 30                                cp	'0'
 160+ C1CB 20 02                                jr	nz,.DontBlank
 161+ C1CD 3E 20        .Blank:                 ld	a,' '
 162+ C1CF ED 42        .DontBlank:	            sbc	hl,bc
 163+ C1D1 12                                   ld	(de),a
 164+ C1D2 13                                   inc	de
 165+ C1D3 C9                                   ret
 166+ C1D4              ;----------------------------------------------------------------------------------------------------------------------------------
 167+ C1D4 FE 00        MPM_DispQtyAtoDE:       cp	0
 168+ C1D6 28 30                                jr	z,.NoStock
 169+ C1D8 26 00                                ld h,0
 170+ C1DA 6F                                   ld l,a
 171+ C1DB 01 9C FF                             ld	bc,-100
 172+ C1DE CD F7 C1                             call	.NumLeadBlank1
 173+ C1E1 FE 20        .WasLead0:              cp      ' '
 174+ C1E3 20 09                                jr      nz,.NotHundredsZero
 175+ C1E5 0E F6                                ld	c,-10
 176+ C1E7 CD F7 C1                             call	.NumLeadBlank1
 177+ C1EA 0E FF                                ld	c,-1
 178+ C1EC 18 AE                                jr		MPM_Num1
 179+ C1EE 0E F6        .NotHundredsZero:       ld	c,-10
 180+ C1F0 CD 9C C1                             call	MPM_Num1
 181+ C1F3 0E FF                                ld	c,-1
 182+ C1F5 18 A5                                jr		MPM_Num1
 183+ C1F7 3E 2F        .NumLeadBlank1:	        ld	a,'0'-1
 184+ C1F9 3C           .NumLeadBlank2:	        inc	a
 185+ C1FA 09                                   add	hl,bc
 186+ C1FB 38 FC                                jr	c,.NumLeadBlank2
 187+ C1FD FE 30                                cp	'0'
 188+ C1FF 20 02                                jr	nz,.DontBlank
 189+ C201 3E 20        .Blank:                 ld	a,' '
 190+ C203 ED 42        .DontBlank:	            sbc	hl,bc
 191+ C205 12                                   ld	(de),a
 192+ C206 13                                   inc	de
 193+ C207 C9                                   ret
 194+ C208 3E 20        .NoStock:               ld	a,' '
 195+ C20A 12                                   ld	(de),a
 196+ C20B 13                                   inc	de
 197+ C20C 12                                   ld	(de),a
 198+ C20D 13                                   inc	de
 199+ C20E 3E 2D                                ld	a,'-'
 200+ C210 12                                   ld	(de),a
 201+ C211 13                                   inc de
 202+ C212 C9                                   ret
 203+ C213              ;----------------------------------------------------------------------------------------------------------------------------------
 204+ C213              MPM_print_boiler_text:  INCLUDE "Menus/print_boiler_text_inlineInclude.asm"
# file opened: ./Menus/print_boiler_text_inlineInclude.asm
   1++C213
   2++C213              ;">print_boilder_text hl = text structure, b = message count"
   3++C213              .BoilerTextLoop:
   4++C213 C5           	push		bc			; Save Message Count loop value
   5++C214 4E           	ld			c,(hl)		; Get Row into b
   6++C215 23           	inc			hl
   7++C216 46           	ld			b,(hl)		; Get Col into b
   8++C217 23           	inc			hl
   9++C218 5E           	ld			e,(hl)		; Get text address Lo into E
  10++C219 23           	inc			hl
  11++C21A 56           	ld			d,(hl)		; Get text address Hi into E
  12++C21B 23           	inc			hl
  13++C21C E5           	push		hl			; Save present HL to stack as this is the address for the next message
  14++C21D EB           	ex			de,hl		; now hl = address of text data
  15++C21E 1E FF        	ld			e,txt_status_colour
  16++C220 C5           	push		bc
  17++C221 D1           	pop			de
  18++C222                  MMUSelectLayer1
  18++C222 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
  19++C226 CD C8 E0     	call		l1_print_at
  20++C229 E1           	pop			hl
  21++C22A C1           	pop			bc
  22++C22B 10 E6        	djnz		.BoilerTextLoop
  23++C22D C9           	ret
  24++C22E
# file closed: ./Menus/print_boiler_text_inlineInclude.asm
 205+ C22E              ;----------------------------------------------------------------------------------------------------------------------------------
 206+ C22E 2A 73 9D     MKT_GetCash:            ld		hl,(Cash+2)
 207+ C231 EB                                   ex      de,hl
 208+ C232 DD 2A 71 9D                          ld      ix,(Cash)
 209+ C236 FD 21 75 C0                          ld		iy,mkt_cash_amount
 210+ C23A CD D3 C0                             call 	MKT_DispDEIXtoIY1DP
 211+ C23D FD E5                                push    IY
 212+ C23F D1                                   pop     de
 213+ C240 21 89 C0                             ld      hl,mkt_cash_UoM
 214+ C243 01 0B 00                             ld      bc,11
 215+ C246 ED B0                                ldir
 216+ C248 C9                                   ret
 217+ C249              ;----------------------------------------------------------------------------------------------------------------------------------
 218+ C249 11 00 00     MKT_GetCargo:   	    ld      de,0
 219+ C24C DD 21 00 00                          ld      ix,0
 220+ C250 3A 7B 9D                             ld      a,(CargoRunningLoad)
 221+ C253 DD 6F                                ld      ixl,a
 222+ C255 FD 21 94 C0                          ld		iy,mkt_cargo_amount
 223+ C259 CD EA C0                             call 	MKT_DispDEIXtoIY
 224+ C25C FD E5                                push    IY
 225+ C25E D1                                   pop     de
 226+ C25F 13                                   inc     de
 227+ C260 21 A8 C0                             ld      hl,mkt_cargo_UoM
 228+ C263 01 0B 00                             ld      bc,11
 229+ C266 ED B0                                ldir
 230+ C268 C9                                   ret
 231+ C269              ;----------------------------------------------------------------------------------------------------------------------------------
 232+ C269 CD 49 C2     MKT_DisplayCargo:       call	MKT_GetCargo
 233+ C26C 21 94 C0                             ld		hl,mkt_cargo_amount
 234+ C26F 11 48 A8                             ld      de,mkt_cargo_position
 235+ C272                                      MMUSelectLayer1
 235+ C272 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 236+ C276 CD C8 E0                             call	l1_print_at
 237+ C279 C9                                   ret
 238+ C27A              ;----------------------------------------------------------------------------------------------------------------------------------
 239+ C27A CD 2E C2     MKT_DisplayCash:        call	MKT_GetCash
 240+ C27D 21 75 C0                             ld		hl,mkt_cash_amount
 241+ C280 11 48 B0                             ld      de,mkt_cash_position
 242+ C283                                      MMUSelectLayer1
 242+ C283 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 243+ C287 CD C8 E0                             call	l1_print_at
 244+ C28A C9                                   ret
 245+ C28B              ;----------------------------------------------------------------------------------------------------------------------------------
 246+ C28B              ; "A = stock item number"
 247+ C28B F5           PrintMarketItem:        push     af
 248+ C28C 21 08 20                             ld      hl,market_position  ; hl = base cursor position + row number * 8
 249+ C28F 57                                   ld      d,a                 ; .
 250+ C290 1E 08                                ld      e,8                 ; .
 251+ C292 ED 30                                mul                         ; .
 252+ C294 53                                   ld      d,e                 ; .
 253+ C295 1E 00                                ld      e,0                 ; .
 254+ C297 19                                   add     hl,de               ; .
 255+ C298 22 41 C0                             ld      (market_cursor),hl  ; save in market cursor and copy to de
 256+ C29B EB                                   ex      hl,de               ; .
 257+ C29C 21 43 C0                             ld      hl,market_blank_line; hl = blank line text
 258+ C29F                                      MMUSelectLayer1             ; print blank line (hl) and position DE
 258+ C29F ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 259+ C2A3 CD C8 E0                             call	l1_print_at         ; .
 260+ C2A6 F1                                   pop     af
 261+ C2A7 DD 21 00 E0                          ld		ix,StockFood		; start 8 bytes before index as first add will shift
 262+ C2AB FD 21 7C 9D                          ld      iy,CargoTonnes
 263+ C2AF 1E 08                                ld		e,8
 264+ C2B1 57                                   ld		d,a
 265+ C2B2 ED 30                                mul
 266+ C2B4 DD 19                                add		ix,de				; Move down a row ix += a * 8
 267+ C2B6 16 00                                ld      d,0
 268+ C2B8 5F                                   ld      e,a
 269+ C2B9 FD 19                                add     iy,de                ; cargo table is just 1 byte per item
 270+ C2BB              .GetName:               MMUSelectStockTable
 270+ C2BB ED 91 57 37 >                     nextreg StockTableMMU,     BankStockTable
 271+ C2BF DD 7E 00                             ld		a,(ix+0)
 272+ C2C2 21 1B A4                             ld		hl,WordIdx
 273+ C2C5 CD F0 A0                             call	getTableText
 274+ C2C8 ED 5B 41 C0                          ld		de,(market_cursor)
 275+ C2CC                                      MMUSelectLayer1
 275+ C2CC ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 276+ C2D0 CD C8 E0                             call	l1_print_at
 277+ C2D3              .GetUom                 MMUSelectStockTable
 277+ C2D3 ED 91 57 37 >                     nextreg StockTableMMU,     BankStockTable
 278+ C2D7 DD 7E 07                             ld		a,(ix+7)
 279+ C2DA C6 2E                                add		a,market_UomOffset
 280+ C2DC 21 1B A4                             ld		hl,WordIdx
 281+ C2DF CD F0 A0                             call	getTableText
 282+ C2E2 ED 5B 41 C0                          ld		de,(market_cursor)
 283+ C2E6 1E 68                                ld		e,market_uom
 284+ C2E8                                      MMUSelectLayer1
 284+ C2E8 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 285+ C2EC CD C8 E0                             call	l1_print_at
 286+ C2EF              .GetPrice:              MMUSelectStockTable
 286+ C2EF ED 91 57 37 >                     nextreg StockTableMMU,     BankStockTable
 287+ C2F3 DD 7E 02                             ld		a,(ix+2)
 288+ C2F6 11 34 C0                             ld		de,txt_market_amount
 289+ C2F9 CD AD C1                             call	MPM_DispPriceAtoDE
 290+ C2FC 21 34 C0                             ld		hl,txt_market_amount
 291+ C2FF ED 5B 41 C0                          ld		de,(market_cursor)
 292+ C303 1E 88                                ld		e,market_price
 293+ C305                                      MMUSelectLayer1
 293+ C305 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 294+ C309 CD C8 E0                             call	l1_print_at
 295+ C30C              .GetQty:                MMUSelectStockTable
 295+ C30C ED 91 57 37 >                     nextreg StockTableMMU,     BankStockTable
 296+ C310 DD 7E 01                             ld		a,(ix+1)
 297+ C313 11 39 C0                             ld		de,txt_market_quantity
 298+ C316 CD D4 C1                             call	MPM_DispQtyAtoDE
 299+ C319 21 39 C0                             ld		hl,txt_market_quantity
 300+ C31C ED 5B 41 C0                          ld		de,(market_cursor)
 301+ C320 1E B0                                ld		e,market_Quantity
 302+ C322                                      MMUSelectLayer1
 302+ C322 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 303+ C326 CD C8 E0                             call	l1_print_at
 304+ C329 FD 7E 00     .GetCargoQty:           ld      a,(iy+0)
 305+ C32C 11 3D C0                             ld      de,txt_market_cargo
 306+ C32F CD D4 C1                             call	MPM_DispQtyAtoDE
 307+ C332 21 3D C0                             ld      hl,txt_market_cargo
 308+ C335 ED 5B 41 C0                          ld      de,(market_cursor)
 309+ C339 1E E0                                ld      e,market_Cargo
 310+ C33B                                      MMUSelectLayer1
 310+ C33B ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 311+ C33F CD C8 E0                             call	l1_print_at
 312+ C342 C9                                   ret
 313+ C343
 314+ C343              draw_market_prices_menu:InitNoDoubleBuffer
 314+ C343             >                            MMUSelectLayer1
 314+ C343 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 314+ C347 CD 80 E0    >                            call	l1_cls
 314+ C34A 3E 07       >                            ld		a,7
 314+ C34C CD 9B E0    >                            call	l1_attr_cls_to_a
 314+ C34F             >                            MMUSelectLayer2
 314+ C34F ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 314+ C353 CD 08 E0    >                            call    asm_l2_double_buffer_off
 314+ C356 CD C9 E0    >                            call	l2_cls	; Get some space
 314+ C359             >                            MMUSelectSpriteBank
 314+ C359 ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
 314+ C35D CD 27 E4    >                            call    sprite_cls_cursors
 315+ C360 3E 20                                ld      a,$20
 316+ C362 32 32 99                             ld      (MenuIdMax),a
 317+ C365 01 01 01     .Drawbox:               ld		bc,$0101
 318+ C368 11 FD BE                             ld		de,$BEFD
 319+ C36B 3E C0                                ld		a,$C0
 320+ C36D                                      MMUSelectLayer2
 320+ C36D ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 321+ C371 CD F6 E1                             call	l2_draw_box
 322+ C374 01 01 0A                             ld		bc,$0A01
 323+ C377 11 C0 FE                             ld		de,$FEC0
 324+ C37A CD 60 E2                             call	l2_draw_horz_line
 325+ C37D 01 08 1A     .DrawProductLine        ld		bc,$1A08
 326+ C380 11 C0 50                             ld		de,$50C0
 327+ C383 CD 60 E2                             call	l2_draw_horz_line
 328+ C386 01 60 1A     .DrawUoMLine:           ld		bc,$1A60
 329+ C389 11 C0 18                             ld		de,$18C0
 330+ C38C CD 60 E2                             call	l2_draw_horz_line
 331+ C38F 01 80 1A     .DrawPriceLine:         ld		bc,$1A80
 332+ C392 11 C0 28                             ld		de,$28C0
 333+ C395 CD 60 E2                             call	l2_draw_horz_line
 334+ C398 01 B0 1A     .DrawStockLine:         ld		bc,$1AB0
 335+ C39B 11 C0 28                             ld		de,$28C0
 336+ C39E CD 60 E2                             call	l2_draw_horz_line
 337+ C3A1 01 E0 1A     .DrawInvLine:           ld		bc,$1AE0
 338+ C3A4 11 C0 18                             ld		de,$18C0
 339+ C3A7 CD 60 E2                             call	l2_draw_horz_line
 340+ C3AA 3A 1C 9A     .StaticText:	        ld      a,(Galaxy)
 341+ C3AD                                      MMUSelectGalaxyA
 341+ C3AD ED 92 57    >                     nextreg GalaxyDataMMU,       a
 342+ C3B0 3E 19                                ld		a,25
 343+ C3B2 CD B8 A5                             call	expandTokenToString
 344+ C3B5 CD 7A F6                             call	GetDigramGalaxySeed
 345+ C3B8 06 09                                ld		b,9
 346+ C3BA 21 10 C0                             ld		hl,market_boiler_text
 347+ C3BD CD 13 C2                             call	MPM_print_boiler_text
 348+ C3C0              ; Generate the market list on screen
 349+ C3C0 3E 00        .DisplayPrices:         ld		a,0
 350+ C3C2 21 08 20                             ld		hl,market_position          ; set current cursor position on screen
 351+ C3C5 22 41 C0                             ld		(market_cursor),hl          ; .
 352+ C3C8 F5           MarketLoop:	            push	af
 353+ C3C9 CD 8B C2                             call	PrintMarketItem             ; display a single market item
 354+ C3CC F1                                   pop		af
 355+ C3CD 3C                                   inc		a
 356+ C3CE FE 11                                cp		17
 357+ C3D0 20 F6                                jr		nz,MarketLoop
 358+ C3D2 AF           .InitialHighlight:      xor     a
 359+ C3D3 32 74 C0                             ld      (mkt_selected_row),a        ; assume on row zero
 360+ C3D6 CD B3 C0                             call    mkt_highlight_row
 361+ C3D9 21 64 C0     .DisCargo:              ld      hl,mkt_hold_level
 362+ C3DC 11 10 A8                             ld      de,$A810
 363+ C3DF                                      MMUSelectLayer1
 363+ C3DF ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 364+ C3E3 CD C8 E0                             call	l1_print_at
 365+ C3E6 CD 69 C2                             call    MKT_DisplayCargo
 366+ C3E9 21 6C C0     .DisCash:               ld      hl,mkt_cash
 367+ C3EC 11 10 B0                             ld      de,$B010
 368+ C3EF                                      MMUSelectLayer1
 368+ C3EF ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 369+ C3F3 CD C8 E0                             call	l1_print_at
 370+ C3F6 CD 7A C2                             call    MKT_DisplayCash
 371+ C3F9 C9                                   ret
 372+ C3FA
 373+ C3FA
 374+ C3FA              ;----------------------------------------------------------------------------------------------------------------------------------
 375+ C3FA              ; Handles all the input whilst in the market menu
 376+ C3FA 3E 4A        loop_market_menu:       ld      a,c_Pressed_CursorUp
 377+ C3FC CD 7C 96                             call    is_key_pressed
 378+ C3FF CC 1B C4                             call    z,mkt_UpPressed
 379+ C402 3E 4C                                ld      a,c_Pressed_CursorDown
 380+ C404 CD 7C 96                             call    is_key_pressed
 381+ C407 CC 2C C4                             call    z,mkt_DownPressed
 382+ C40A 3E 08                                ld      a,c_Pressed_RollLeft
 383+ C40C CD 7C 96                             call    is_key_pressed
 384+ C40F CC 48 C4                             call    z,mkt_LeftPressed
 385+ C412 3E 0A                                ld      a,c_Pressed_RollRight
 386+ C414 CD 7C 96                             call    is_key_pressed
 387+ C417 CC 8B C4                             call    z,mkt_RightPressed
 388+ C41A C9                                   ret
 389+ C41B
 390+ C41B              ;----------------------------------------------------------------------------------------------------------------------------------
 391+ C41B 3A 74 C0     mkt_UpPressed:          ld      a,(mkt_selected_row)
 392+ C41E FE 00                                cp      0
 393+ C420 C8                                   ret     z
 394+ C421 CD C3 C0                             call    mkt_lowlight_row
 395+ C424 21 74 C0                             ld      hl,mkt_selected_row
 396+ C427 35                                   dec     (hl)
 397+ C428 CD B3 C0                             call    mkt_highlight_row
 398+ C42B C9                                   ret
 399+ C42C              ;----------------------------------------------------------------------------------------------------------------------------------
 400+ C42C 3E 4C        mkt_DownPressed:        ld      a,c_Pressed_CursorDown
 401+ C42E CD 64 96                             call    get_key_a_state
 402+ C431 FE 01                                cp      1
 403+ C433 28 02                                jr      z,.ItsOK
 404+ C435 DD 01                                break
 405+ C437 3A 74 C0     .ItsOK:                        ld      a,(mkt_selected_row)
 406+ C43A FE 10                                cp      16
 407+ C43C C8                                   ret     z
 408+ C43D CD C3 C0                             call    mkt_lowlight_row
 409+ C440 21 74 C0                             ld      hl,mkt_selected_row
 410+ C443 34                                   inc     (hl)
 411+ C444 CD B3 C0                             call    mkt_highlight_row
 412+ C447 C9                                   ret
 413+ C448              ;----------------------------------------------------------------------------------------------------------------------------------
 414+ C448 3A 74 C0     mkt_LeftPressed:        ld      a,(mkt_selected_row)
 415+ C44B 21 7C 9D                             ld      hl,CargoTonnes
 416+ C44E ED 31                                add     hl,a
 417+ C450 7E                                   ld      a,(hl)
 418+ C451 FE 00                                cp      0
 419+ C453 C8                                   ret     z
 420+ C454 35                                   dec     (hl)
 421+ C455 DD 21 00 E0                          ld      ix,StockFood
 422+ C459 3A 74 C0                             ld      a,(mkt_selected_row)
 423+ C45C 16 08                                ld      d,8
 424+ C45E 5F                                   ld      e,a
 425+ C45F ED 30                                mul
 426+ C461 DD 19                                add     ix,de
 427+ C463                                      MMUSelectStockTable
 427+ C463 ED 91 57 37 >                     nextreg StockTableMMU,     BankStockTable
 428+ C467 DD 34 01                             inc     (ix+1)
 429+ C46A DD 7E 07                             ld      a,(ix+7)
 430+ C46D FE 30                                cp      48
 431+ C46F 20 04                                jr      nz,.UnderATonne
 432+ C471 21 7B 9D                             ld      hl,CargoRunningLoad
 433+ C474 35                                   dec     (hl)            ; We need to cosider UoM
 434+ C475 DD 7E 02     .UnderATonne:           ld      a,(ix+2)
 435+ C478 16 00                                ld      d,0
 436+ C47A 5F                                   ld      e,a
 437+ C47B CD 7C A7                             call    addDEtoCash
 438+ C47E                                      ; DO ADD CASH
 439+ C47E 3A 74 C0                             ld      a,(mkt_selected_row)
 440+ C481 CD 8B C2                             call    PrintMarketItem
 441+ C484 CD 69 C2                             call    MKT_DisplayCargo
 442+ C487 CD 7A C2                             call    MKT_DisplayCash
 443+ C48A C9                                   ret
 444+ C48B              ;----------------------------------------------------------------------------------------------------------------------------------
 445+ C48B              mkt_RightPressed:       MMUSelectStockTable
 445+ C48B ED 91 57 37 >                     nextreg StockTableMMU,     BankStockTable
 446+ C48F DD 21 00 E0                          ld      ix,StockFood
 447+ C493 3A 74 C0                             ld      a,(mkt_selected_row)
 448+ C496 16 08                                ld      d,8
 449+ C498 5F                                   ld      e,a
 450+ C499 ED 30                                mul
 451+ C49B DD 19                                add     ix,de
 452+ C49D 4F                                   ld      c,a
 453+ C49E DD 7E 01                             ld      a,(ix+1)
 454+ C4A1 FE 00                                cp      0
 455+ C4A3 C8                                   ret     z
 456+ C4A4 DD 7E 07     .CheckUoM:              ld      a,(ix+7)
 457+ C4A7 FE 30                                cp      48
 458+ C4A9 28 0F                                jr      z,.CheckCargo                       ; cargo is in tonnes
 459+ C4AB 3A 74 C0     .NotTonnage:            ld      a,(mkt_selected_row)
 460+ C4AE 21 7C 9D                             ld      hl,CargoTonnes
 461+ C4B1 ED 31                                add     hl,a
 462+ C4B3 7E                                   ld      a,(hl)
 463+ C4B4 FE C8                                cp      200
 464+ C4B6 C8                                   ret     z                                   ; else its a 200 UoM limit
 465+ C4B7 C3 C0 C4                             jp      .CheckCash
 466+ C4BA 2A 7A 9D     .CheckCargo:            ld      hl,(CargoBaySize)                   ; = h = runningload l = cargo bay size
 467+ C4BD 7C                                   ld      a,h
 468+ C4BE BD                                   cp      l
 469+ C4BF C8                                   ret     z                                   ; return if we have already maxed out
 470+ C4C0 2A 73 9D     .CheckCash:             ld      hl,(Cash+2)
 471+ C4C3 7C                                   ld      a,h
 472+ C4C4 B5                                   or      l
 473+ C4C5 20 0F                                jr      nz,.MoreThanRequired
 474+ C4C7 2A 71 9D                             ld      hl,(Cash)
 475+ C4CA 7C                                   ld      a,h
 476+ C4CB FE 00                                cp      0
 477+ C4CD 20 07                                jr      nz,.MoreThanRequired
 478+ C4CF DD 7E 02                             ld      a,(ix+2)
 479+ C4D2 BD                                   cp      l
 480+ C4D3 30 01                                jr      nc,.MoreThanRequired
 481+ C4D5 C9                                   ret                         ; Insufficient Funds
 482+ C4D6 19           .MoreThanRequired:      add     hl,de
 483+ C4D7 7C                                   ld      a,h
 484+ C4D8 B3                                   or      e
 485+ C4D9                                      ; check cash can we buy, and cargo capacity
 486+ C4D9 DD 35 01                             dec     (ix+1)
 487+ C4DC 3A 74 C0                             ld      a,(mkt_selected_row)
 488+ C4DF 21 7C 9D                             ld      hl,CargoTonnes
 489+ C4E2 ED 31                                add     hl,a
 490+ C4E4 34                                   inc     (hl)
 491+ C4E5 DD 7E 07                             ld      a,(ix+7)
 492+ C4E8 47                                   ld      b,a
 493+ C4E9 FE 30                                cp      48
 494+ C4EB 20 05                                jr      nz,.UnderOneTonne
 495+ C4ED 78                                   ld      a,b
 496+ C4EE 21 7B 9D                             ld      hl,CargoRunningLoad
 497+ C4F1 34                                   inc     (hl)
 498+ C4F2 DD 7E 02     .UnderOneTonne:         ld      a,(ix+2)
 499+ C4F5 16 00                                ld      d,0
 500+ C4F7 5F                                   ld      e,a
 501+ C4F8 CD 8F A7                             call    subDEfromCash
 502+ C4FB 3A 74 C0                             ld      a,(mkt_selected_row)
 503+ C4FE CD 8B C2                             call    PrintMarketItem
 504+ C501 CD 69 C2                             call    MKT_DisplayCargo
 505+ C504 CD 7A C2                             call    MKT_DisplayCash
 506+ C507 C9                                   ret
# file closed: ./Menus/market_prices_menu.asm
1200  C508
1201  C508              ; Bank 66
1202  C508
1203  C508                  SLOT    DispMarketAddr
1204  C508                  PAGE    BankDispMarket
1205  C508                  ORG     DispMarketAddr
1206  C000                  INCLUDE "./Menus/market_prices_disp.asm"
# file opened: ./Menus/market_prices_disp.asm
   1+ C000 4D 61 72 6B  mktdisp_prices_page_marker  DB "MarketPricesPG54"
   1+ C004 65 74 50 72
   1+ C008 69 63 65 73
   1+ C00C 50 47 35 34
   2+ C010 50 02 77 A5  mktdisp_boiler_text		DW $0250,TextBuffer
   3+ C014 20 02 3D A6  						DW $0220,name_expanded
   4+ C018 80 0B 97 A1  						DW $0B80,WordUnit
   5+ C01C B0 0B E0 A3  						DW $0BB0,WordQuantity
   6+ C020 08 13 BE A3  						DW $1308,WordProduct
   7+ C024 60 13 C6 A3  						DW $1360,WordUoM
   8+ C028 80 13 CA A3  						DW $1380,WordPrice
   9+ C02C B0 13 EE A3  						DW $13B0,WordStock
  10+ C030 E0 13 EA A3  						DW $13E0,WordInv
  11+ C034
  12+ C034              ;char name[16];
  13+ C034              ;current_quantity;
  14+ C034              ;current_price;
  15+ C034              ;base_price;
  16+ C034              ;eco_adjust;
  17+ C034              ;base_quantity;
  18+ C034              ;mask;
  19+ C034              ;units;
  20+ C034
  21+ C034
  22+ C034 30 30 2E 30  txt_mktdisp_amount	    DB "00.0",0
  22+ C038 00
  23+ C039 39 39 39 00  txt_mktdisp_quantity    DB "999",0
  24+ C03D 39 39 39 00  txt_mktdisp_cargo       DB "999",0
  25+ C041 00 00        mktdisp_cursor			DW  $0000
  26+ C043              mktdisp_position		equ $2008
  27+ C043              mktdisp_uom				equ	$68
  28+ C043              mktdisp_price 			equ $88
  29+ C043              mktdisp_Quantity		equ	$B0
  30+ C043              mktdisp_Cargo           equ $E0
  31+ C043              mktdisp_UomOffset		equ 46
  32+ C043 20 20 20 20  mktdisp_blank_line      DB "                                ",0
  32+ C047 20 20 20 20
  32+ C04B 20 20 20 20
  32+ C04F 20 20 20 20
  32+ C053 20 20 20 20
  32+ C057 20 20 20 20
  32+ C05B 20 20 20 20
  32+ C05F 20 20 20 20
  32+ C063 00
  33+ C064 43 61 72 67  mktdisp_hold_level      DB "Cargo: ",0
  33+ C068 6F 3A 20 00
  34+ C06C 43 61 73 68  mktdisp_cash			DB "Cash : ",0
  34+ C070 20 3A 20 00
  35+ C074 00           mktdisp_selected_row    db  0
  36+ C075
  37+ C075              mktdisp_cash_position   equ $B048
  38+ C075 00 00 00...  mktdisp_cash_amount		DS 20
  39+ C089 20 43 72 20  mktdisp_cash_UoM        DB " Cr       ",0
  39+ C08D 20 20 20 20
  39+ C091 20 20 00
  40+ C094              mktdisp_cargo_position  equ $A848
  41+ C094 00 00 00...  mktdisp_cargo_amount	DS 20
  42+ C0A8 20 54 6F 6E  mktdisp_cargo_UoM       DB " Tonnes   ",0
  42+ C0AC 6E 65 73 20
  42+ C0B0 20 20 00
  43+ C0B3              ;                           12345678901
  44+ C0B3
  45+ C0B3 CD CA C0     mktdisp_DispDEIXtoIY1DP:    call    mktdisp_DispDEIXtoIY
  46+ C0B6 FD 36 02 00                          ld (iy+2),0
  47+ C0BA FD 7E 00                             ld      a,(IY+0)
  48+ C0BD FD 77 01                             ld      (IY+1),a
  49+ C0C0 3E 2E                                ld      a,"."
  50+ C0C2 FD 77 00                             ld      (IY+0),a
  51+ C0C5 FD 23                                inc     IY
  52+ C0C7 FD 23                                inc     IY
  53+ C0C9 C9                                   ret
  54+ C0CA              ;----------------------------------------------------------------------------------------------------------------------------------
  55+ C0CA DD 22 5F C1  mktdisp_DispDEIXtoIY:       ld (.MKTclcn32z),ix
  56+ C0CE ED 53 61 C1                          ld (.MKTclcn32zIX),de
  57+ C0D2 DD 21 5B C1                          ld ix,.MKTclcn32t+36
  58+ C0D6 06 09                                ld b,9
  59+ C0D8 0E 00                                ld c,0
  60+ C0DA 3E 30        .MKTclcn321:            ld a,'0'
  61+ C0DC B7                                   or a
  62+ C0DD DD 5E 00     .MKTclcn322:            ld e,(ix+0)
  63+ C0E0 DD 56 01                             ld d,(ix+1)
  64+ C0E3 2A 5F C1                             ld hl,(.MKTclcn32z)
  65+ C0E6 ED 52                                sbc hl,de
  66+ C0E8 22 5F C1                             ld (.MKTclcn32z),hl
  67+ C0EB DD 5E 02                             ld e,(ix+2)
  68+ C0EE DD 56 03                             ld d,(ix+3)
  69+ C0F1 2A 61 C1                             ld hl,(.MKTclcn32zIX)
  70+ C0F4 ED 52                                sbc hl,de
  71+ C0F6 22 61 C1                             ld (.MKTclcn32zIX),hl
  72+ C0F9 38 04                                jr c,.MKTclcn325
  73+ C0FB 0C                                   inc c
  74+ C0FC 3C                                   inc a
  75+ C0FD 18 DE                                jr .MKTclcn322
  76+ C0FF DD 5E 00     .MKTclcn325:            ld e,(ix+0)
  77+ C102 DD 56 01                             ld d,(ix+1)
  78+ C105 2A 5F C1                             ld hl,(.MKTclcn32z)
  79+ C108 19                                   add hl,de
  80+ C109 22 5F C1                             ld (.MKTclcn32z),hl
  81+ C10C DD 5E 02                             ld e,(ix+2)
  82+ C10F DD 56 03                             ld d,(ix+3)
  83+ C112 2A 61 C1                             ld hl,(.MKTclcn32zIX)
  84+ C115 ED 5A                                adc hl,de
  85+ C117 22 61 C1                             ld (.MKTclcn32zIX),hl
  86+ C11A 11 FC FF                             ld de,-4
  87+ C11D DD 19                                add ix,de
  88+ C11F 0C                                   inc c
  89+ C120 0D                                   dec c
  90+ C121 28 05                                jr z,.MKTclcn323
  91+ C123 FD 77 00                             ld (iy+0),a
  92+ C126 FD 23                                inc iy
  93+ C128 10 B0        .MKTclcn323:            djnz .MKTclcn321
  94+ C12A 3A 5F C1                             ld a,(.MKTclcn32z)
  95+ C12D C6 30                                add A,'0'
  96+ C12F FD 77 00                             ld (iy+0),a
  97+ C132 FD 36 01 00                          ld (iy+1),0
  98+ C136 C9                                   ret
  99+ C137 01 00 00 00  .MKTclcn32t             dw 1,0,     10,0,     100,0,     1000,0,       10000,0
  99+ C13B 0A 00 00 00
  99+ C13F 64 00 00 00
  99+ C143 E8 03 00 00
  99+ C147 10 27 00 00
 100+ C14B A0 86 01 00                          dw $86a0,1, $4240,$0f, $9680,$98, $e100,$05f5, $ca00,$3b9a
 100+ C14F 40 42 0F 00
 100+ C153 80 96 98 00
 100+ C157 00 E1 F5 05
 100+ C15B 00 CA 9A 3B
 101+ C15F 00 00        .MKTclcn32z             ds 2
 102+ C161 00 00        .MKTclcn32zIX           ds 2
 103+ C163              ;----------------------------------------------------------------------------------------------------------------------------------
 104+ C163              ; "DispHL, writes HL to DE address"
 105+ C163 01 F0 D8     MPD_DispHLtoDE:         ld	bc,-10000
 106+ C166 CD 7C C1                             call	MPD_Num1
 107+ C169 01 18 FC                             ld	bc,-1000
 108+ C16C CD 7C C1                             call	MPD_Num1
 109+ C16F 01 9C FF                             ld	bc,-100
 110+ C172 CD 7C C1                             call	MPD_Num1
 111+ C175 0E F6                                ld	c,-10
 112+ C177 CD 7C C1                             call	MPD_Num1
 113+ C17A 0E FF                                ld	c,-1
 114+ C17C 3E 2F        MPD_Num1:	            ld	a,'0'-1
 115+ C17E 3C           .Num2:	                inc	a
 116+ C17F 09                                   add	hl,bc
 117+ C180 38 FC                                jr	c,.Num2
 118+ C182 ED 42                                sbc	hl,bc
 119+ C184 12                                   ld	(de),a
 120+ C185 13                                   inc	de
 121+ C186 C9                                   ret
 122+ C187              ;----------------------------------------------------------------------------------------------------------------------------------
 123+ C187 26 00        MPD_DispAtoDE:          ld h,0
 124+ C189 6F                                   ld l,a
 125+ C18A C3 63 C1                             jp MPD_DispHLtoDE
 126+ C18D              ;----------------------------------------------------------------------------------------------------------------------------------
 127+ C18D 26 00        MPD_DispPriceAtoDE:     ld h,0
 128+ C18F 6F                                   ld l,a
 129+ C190 01 9C FF                             ld	bc,-100
 130+ C193 CD A3 C1                             call	.NumLeadBlank1
 131+ C196 0E F6                                ld	c,-10
 132+ C198 CD 7C C1                             call	MPD_Num1
 133+ C19B 3E 2E                                ld		a,'.'					; we could assume preformat but
 134+ C19D 12                                   ld		(de),a					; we can optimse that later TODO
 135+ C19E 13                                   inc		de						; with just an inc De
 136+ C19F 0E FF                                ld	c,-1
 137+ C1A1 18 D9                                jr		MPD_Num1
 138+ C1A3 3E 2F        .NumLeadBlank1:	        ld	a,'0'-1
 139+ C1A5 3C           .NumLeadBlank2:	        inc	a
 140+ C1A6 09                                   add	hl,bc
 141+ C1A7 38 FC                                jr	c,.NumLeadBlank2
 142+ C1A9 FE 30                                cp	'0'
 143+ C1AB 20 02                                jr	nz,.DontBlank
 144+ C1AD 3E 20        .Blank:                 ld	a,' '
 145+ C1AF ED 42        .DontBlank:	            sbc	hl,bc
 146+ C1B1 12                                   ld	(de),a
 147+ C1B2 13                                   inc	de
 148+ C1B3 C9                                   ret
 149+ C1B4              ;----------------------------------------------------------------------------------------------------------------------------------
 150+ C1B4 FE 00        MPD_DispQtyAtoDE:       cp	0
 151+ C1B6 28 30                                jr	z,.NoStock
 152+ C1B8 26 00                                ld h,0
 153+ C1BA 6F                                   ld l,a
 154+ C1BB 01 9C FF                             ld	bc,-100
 155+ C1BE CD D7 C1                             call	.NumLeadBlank1
 156+ C1C1 FE 20        .WasLead0:              cp      ' '
 157+ C1C3 20 09                                jr      nz,.NotHundredsZero
 158+ C1C5 0E F6                                ld	c,-10
 159+ C1C7 CD D7 C1                             call	.NumLeadBlank1
 160+ C1CA 0E FF                                ld	c,-1
 161+ C1CC 18 AE                                jr		MPD_Num1
 162+ C1CE 0E F6        .NotHundredsZero:       ld	c,-10
 163+ C1D0 CD 7C C1                             call	MPD_Num1
 164+ C1D3 0E FF                                ld	c,-1
 165+ C1D5 18 A5                                jr		MPD_Num1
 166+ C1D7 3E 2F        .NumLeadBlank1:	        ld	a,'0'-1
 167+ C1D9 3C           .NumLeadBlank2:	        inc	a
 168+ C1DA 09                                   add	hl,bc
 169+ C1DB 38 FC                                jr	c,.NumLeadBlank2
 170+ C1DD FE 30                                cp	'0'
 171+ C1DF 20 02                                jr	nz,.DontBlank
 172+ C1E1 3E 20        .Blank:                 ld	a,' '
 173+ C1E3 ED 42        .DontBlank:	            sbc	hl,bc
 174+ C1E5 12                                   ld	(de),a
 175+ C1E6 13                                   inc	de
 176+ C1E7 C9                                   ret
 177+ C1E8 3E 20        .NoStock:               ld	a,' '
 178+ C1EA 12                                   ld	(de),a
 179+ C1EB 13                                   inc	de
 180+ C1EC 12                                   ld	(de),a
 181+ C1ED 13                                   inc	de
 182+ C1EE 3E 2D                                ld	a,'-'
 183+ C1F0 12                                   ld	(de),a
 184+ C1F1 13                                   inc de
 185+ C1F2 C9                                   ret
 186+ C1F3              ;----------------------------------------------------------------------------------------------------------------------------------
 187+ C1F3              MPD_print_boiler_text:  INCLUDE "Menus/print_boiler_text_inlineInclude.asm"
# file opened: ./Menus/print_boiler_text_inlineInclude.asm
   1++C1F3
   2++C1F3              ;">print_boilder_text hl = text structure, b = message count"
   3++C1F3              .BoilerTextLoop:
   4++C1F3 C5           	push		bc			; Save Message Count loop value
   5++C1F4 4E           	ld			c,(hl)		; Get Row into b
   6++C1F5 23           	inc			hl
   7++C1F6 46           	ld			b,(hl)		; Get Col into b
   8++C1F7 23           	inc			hl
   9++C1F8 5E           	ld			e,(hl)		; Get text address Lo into E
  10++C1F9 23           	inc			hl
  11++C1FA 56           	ld			d,(hl)		; Get text address Hi into E
  12++C1FB 23           	inc			hl
  13++C1FC E5           	push		hl			; Save present HL to stack as this is the address for the next message
  14++C1FD EB           	ex			de,hl		; now hl = address of text data
  15++C1FE 1E FF        	ld			e,txt_status_colour
  16++C200 C5           	push		bc
  17++C201 D1           	pop			de
  18++C202                  MMUSelectLayer1
  18++C202 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
  19++C206 CD C8 E0     	call		l1_print_at
  20++C209 E1           	pop			hl
  21++C20A C1           	pop			bc
  22++C20B 10 E6        	djnz		.BoilerTextLoop
  23++C20D C9           	ret
  24++C20E
# file closed: ./Menus/print_boiler_text_inlineInclude.asm
 188+ C20E              ;----------------------------------------------------------------------------------------------------------------------------------
 189+ C20E 2A 73 9D     mktdisp_GetCash:            ld		hl,(Cash+2)
 190+ C211 EB                                   ex      de,hl
 191+ C212 DD 2A 71 9D                          ld      ix,(Cash)
 192+ C216 FD 21 75 C0                          ld		iy,mktdisp_cash_amount
 193+ C21A CD B3 C0                             call 	mktdisp_DispDEIXtoIY1DP
 194+ C21D FD E5                                push    IY
 195+ C21F D1                                   pop     de
 196+ C220 21 89 C0                             ld      hl,mktdisp_cash_UoM
 197+ C223 01 0B 00                             ld      bc,11
 198+ C226 ED B0                                ldir
 199+ C228 C9                                   ret
 200+ C229              ;----------------------------------------------------------------------------------------------------------------------------------
 201+ C229 11 00 00     mktdisp_GetCargo:   	ld      de,0
 202+ C22C DD 21 00 00                          ld      ix,0
 203+ C230 3A 7B 9D                             ld      a,(CargoRunningLoad)
 204+ C233 DD 6F                                ld      ixl,a
 205+ C235 FD 21 94 C0                          ld		iy,mktdisp_cargo_amount
 206+ C239 CD CA C0                             call 	mktdisp_DispDEIXtoIY
 207+ C23C FD E5                                push    IY
 208+ C23E D1                                   pop     de
 209+ C23F 13                                   inc     de
 210+ C240 21 A8 C0                             ld      hl,mktdisp_cargo_UoM
 211+ C243 01 0B 00                             ld      bc,11
 212+ C246 ED B0                                ldir
 213+ C248 C9                                   ret
 214+ C249              ;----------------------------------------------------------------------------------------------------------------------------------
 215+ C249 CD 29 C2     mktdisp_DisplayCargo:   call	mktdisp_GetCargo
 216+ C24C 21 94 C0                             ld		hl,mktdisp_cargo_amount
 217+ C24F 11 48 A8                             ld      de,mktdisp_cargo_position
 218+ C252                                      MMUSelectLayer1
 218+ C252 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 219+ C256 CD C8 E0                             call	l1_print_at
 220+ C259 C9                                   ret
 221+ C25A              ;----------------------------------------------------------------------------------------------------------------------------------
 222+ C25A CD 0E C2     mktdisp_DisplayCash:        call	mktdisp_GetCash
 223+ C25D 21 75 C0                             ld		hl,mktdisp_cash_amount
 224+ C260 11 48 B0                             ld      de,mktdisp_cash_position
 225+ C263                                      MMUSelectLayer1
 225+ C263 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 226+ C267 CD C8 E0                             call	l1_print_at
 227+ C26A C9                                   ret
 228+ C26B              ;----------------------------------------------------------------------------------------------------------------------------------
 229+ C26B              ; "A = stock item number"
 230+ C26B F5           PrintMktDispItem:       push     af
 231+ C26C 21 08 20                             ld      hl,mktdisp_position
 232+ C26F 57                                   ld      d,a
 233+ C270 1E 08                                ld      e,8
 234+ C272 ED 30                                mul
 235+ C274 53                                   ld      d,e
 236+ C275 1E 00                                ld      e,0
 237+ C277 19                                   add     hl,de
 238+ C278 22 41 C0                             ld      (mktdisp_cursor),hl
 239+ C27B EB                                   ex      hl,de
 240+ C27C 21 43 C0                             ld      hl,mktdisp_blank_line
 241+ C27F                                      MMUSelectLayer1
 241+ C27F ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 242+ C283 CD C8 E0                             call	l1_print_at
 243+ C286 F1                                   pop     af
 244+ C287 DD 21 00 E0                          ld		ix,StockFood		; start 8 bytes before index as first add will shift
 245+ C28B FD 21 7C 9D                          ld      iy,CargoTonnes
 246+ C28F 1E 08                                ld		e,8
 247+ C291 57                                   ld		d,a
 248+ C292 ED 30                                mul
 249+ C294 DD 19                                add		ix,de				; Move down a row ix += a * 8
 250+ C296 16 00                                ld      d,0
 251+ C298 5F                                   ld      e,a
 252+ C299 FD 19                                add     iy,de                ; cargo table is just 1 byte per item
 253+ C29B              .GetName:               MMUSelectStockTable
 253+ C29B ED 91 57 37 >                     nextreg StockTableMMU,     BankStockTable
 254+ C29F DD 7E 00                             ld		a,(ix+0)
 255+ C2A2 21 1B A4                             ld		hl,WordIdx
 256+ C2A5 CD F0 A0                             call	getTableText
 257+ C2A8 ED 5B 41 C0                          ld		de,(mktdisp_cursor)
 258+ C2AC                                      MMUSelectLayer1
 258+ C2AC ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 259+ C2B0 CD C8 E0                             call	l1_print_at
 260+ C2B3              .GetUom                 MMUSelectStockTable
 260+ C2B3 ED 91 57 37 >                     nextreg StockTableMMU,     BankStockTable
 261+ C2B7 DD 7E 07                             ld		a,(ix+7)
 262+ C2BA C6 2E                                add		a,mktdisp_UomOffset
 263+ C2BC 21 1B A4                             ld		hl,WordIdx
 264+ C2BF CD F0 A0                             call	getTableText
 265+ C2C2 ED 5B 41 C0                          ld		de,(mktdisp_cursor)
 266+ C2C6 1E 68                                ld		e,mktdisp_uom
 267+ C2C8                                      MMUSelectLayer1
 267+ C2C8 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 268+ C2CC CD C8 E0                             call	l1_print_at
 269+ C2CF              .GetPrice:              MMUSelectStockTable
 269+ C2CF ED 91 57 37 >                     nextreg StockTableMMU,     BankStockTable
 270+ C2D3 DD 7E 02                             ld		a,(ix+2)
 271+ C2D6 11 34 C0                             ld		de,txt_mktdisp_amount
 272+ C2D9 CD 8D C1                             call	MPD_DispPriceAtoDE
 273+ C2DC 21 34 C0                             ld		hl,txt_mktdisp_amount
 274+ C2DF ED 5B 41 C0                          ld		de,(mktdisp_cursor)
 275+ C2E3 1E 88                                ld		e,mktdisp_price
 276+ C2E5                                      MMUSelectLayer1
 276+ C2E5 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 277+ C2E9 CD C8 E0                             call	l1_print_at
 278+ C2EC              .GetQty:                MMUSelectStockTable
 278+ C2EC ED 91 57 37 >                     nextreg StockTableMMU,     BankStockTable
 279+ C2F0 DD 7E 01                             ld		a,(ix+1)
 280+ C2F3 11 39 C0                             ld		de,txt_mktdisp_quantity
 281+ C2F6 CD B4 C1                             call	MPD_DispQtyAtoDE
 282+ C2F9 21 39 C0                             ld		hl,txt_mktdisp_quantity
 283+ C2FC ED 5B 41 C0                          ld		de,(mktdisp_cursor)
 284+ C300 1E B0                                ld		e,mktdisp_Quantity
 285+ C302                                      MMUSelectLayer1
 285+ C302 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 286+ C306 CD C8 E0                             call	l1_print_at
 287+ C309 FD 7E 00     .GetCargoQty:           ld      a,(iy+0)
 288+ C30C 11 3D C0                             ld      de,txt_mktdisp_cargo
 289+ C30F CD B4 C1                             call	MPD_DispQtyAtoDE
 290+ C312 21 3D C0                             ld      hl,txt_mktdisp_cargo
 291+ C315 ED 5B 41 C0                          ld      de,(mktdisp_cursor)
 292+ C319 1E E0                                ld      e,mktdisp_Cargo
 293+ C31B                                      MMUSelectLayer1
 293+ C31B ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 294+ C31F CD C8 E0                             call	l1_print_at
 295+ C322 C9                                   ret
 296+ C323
 297+ C323              draw_mktdisp_prices_menu:InitNoDoubleBuffer
 297+ C323             >                            MMUSelectLayer1
 297+ C323 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 297+ C327 CD 80 E0    >                            call	l1_cls
 297+ C32A 3E 07       >                            ld		a,7
 297+ C32C CD 9B E0    >                            call	l1_attr_cls_to_a
 297+ C32F             >                            MMUSelectLayer2
 297+ C32F ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 297+ C333 CD 08 E0    >                            call    asm_l2_double_buffer_off
 297+ C336 CD C9 E0    >                            call	l2_cls	; Get some space
 297+ C339             >                            MMUSelectSpriteBank
 297+ C339 ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
 297+ C33D CD 27 E4    >                            call    sprite_cls_cursors
 298+ C340 3E 20                                ld      a,$20
 299+ C342 32 32 99                             ld      (MenuIdMax),a
 300+ C345 01 01 01     .Drawbox:               ld		bc,$0101
 301+ C348 11 FD BE                             ld		de,$BEFD
 302+ C34B 3E C0                                ld		a,$C0
 303+ C34D                                      MMUSelectLayer2
 303+ C34D ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 304+ C351 CD F6 E1                             call	l2_draw_box
 305+ C354 01 01 0A                             ld		bc,$0A01
 306+ C357 11 C0 FE                             ld		de,$FEC0
 307+ C35A CD 60 E2                             call	l2_draw_horz_line
 308+ C35D 01 08 1A     .DrawProductLine        ld		bc,$1A08
 309+ C360 11 C0 50                             ld		de,$50C0
 310+ C363 CD 60 E2                             call	l2_draw_horz_line
 311+ C366 01 60 1A     .DrawUoMLine:           ld		bc,$1A60
 312+ C369 11 C0 18                             ld		de,$18C0
 313+ C36C CD 60 E2                             call	l2_draw_horz_line
 314+ C36F 01 80 1A     .DrawPriceLine:         ld		bc,$1A80
 315+ C372 11 C0 28                             ld		de,$28C0
 316+ C375 CD 60 E2                             call	l2_draw_horz_line
 317+ C378 01 B0 1A     .DrawStockLine:         ld		bc,$1AB0
 318+ C37B 11 C0 28                             ld		de,$28C0
 319+ C37E CD 60 E2                             call	l2_draw_horz_line
 320+ C381 01 E0 1A     .DrawInvLine:           ld		bc,$1AE0
 321+ C384 11 C0 18                             ld		de,$18C0
 322+ C387 CD 60 E2                             call	l2_draw_horz_line
 323+ C38A 3A 1C 9A     .StaticText:	        ld      a,(Galaxy)
 324+ C38D                                      MMUSelectGalaxyA
 324+ C38D ED 92 57    >                     nextreg GalaxyDataMMU,       a
 325+ C390 3E 19                                ld		a,25
 326+ C392 CD B8 A5                             call	expandTokenToString
 327+ C395 CD 7A F6                             call	GetDigramGalaxySeed
 328+ C398 06 09                                ld		b,9
 329+ C39A 21 10 C0                             ld		hl,mktdisp_boiler_text
 330+ C39D CD F3 C1                             call	MPD_print_boiler_text
 331+ C3A0 3E 00        .DisplayPrices:         ld		a,0
 332+ C3A2 21 08 20                             ld		hl,mktdisp_position
 333+ C3A5 22 41 C0                             ld		(mktdisp_cursor),hl
 334+ C3A8 F5           .MarketLoop:	        push	af
 335+ C3A9 CD 6B C2                             call	PrintMktDispItem
 336+ C3AC F1                                   pop		af
 337+ C3AD 3C                                   inc		a
 338+ C3AE FE 11                                cp		17
 339+ C3B0 20 F6                                jr		nz,.MarketLoop
 340+ C3B2 21 64 C0     .DisCargo:              ld      hl,mktdisp_hold_level
 341+ C3B5 11 10 A8                             ld      de,$A810
 342+ C3B8                                      MMUSelectLayer1
 342+ C3B8 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 343+ C3BC CD C8 E0                             call	l1_print_at
 344+ C3BF CD 49 C2                             call    mktdisp_DisplayCargo
 345+ C3C2 21 6C C0     .DisCash:               ld      hl,mktdisp_cash
 346+ C3C5 11 10 B0                             ld      de,$B010
 347+ C3C8                                      MMUSelectLayer1
 347+ C3C8 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 348+ C3CC CD C8 E0                             call	l1_print_at
 349+ C3CF CD 5A C2                             call    mktdisp_DisplayCash
 350+ C3D2 C9                                   ret
 351+ C3D3
 352+ C3D3
# file closed: ./Menus/market_prices_disp.asm
1207  C3D3
1208  C3D3              ; Bank 55
1209  C3D3
1210  C3D3                  SLOT    StockTableAddr
1211  C3D3                  PAGE    BankStockTable
1212  C3D3                  ORG     StockTableAddr
1213  E000                  INCLUDE "./Tables/stock_table.asm"
# file opened: ./Tables/stock_table.asm
   1+ E000
   2+ E000
   3+ E000              ;                       Can Buy
   4+ E000              ;                       computed row on screen considering what stock is visible
   5+ E000              ;                       Show
   6+ E000              ;                       Tech Level
   7+ E000              ;                       Price
   8+ E000              ;                       Name
   9+ E000              ;                       TypeId
  10+ E000
  11+ E000
  12+ E000              ;char name[16];
  13+ E000              ;current_quantity;
  14+ E000              ;current_price;
  15+ E000              ;base_price;
  16+ E000              ;eco_adjust;
  17+ E000              ;base_quantity;
  18+ E000              ;mask;
  19+ E000              ;units;
  20+ E000
  21+ E000              ;						nam	currr   CR  Ecadj  Qty  Msk  UoM
  22+ E000 20 00 00 13  StockFood			DB  32,  0, 0,  19, -2,      6, $01, 48
  22+ E004 FE 06 01 30
  23+ E008 21 00 00 14  StockTextiles		DB	33,  0, 0,  20, -1,     10, $03, 48
  23+ E00C FF 0A 03 30
  24+ E010 22 00 00 41  StockRadioactives	DB  34,  0, 0,  65, -3,      2, $07, 48
  24+ E014 FD 02 07 30
  25+ E018 23 00 00 28  StockSlaves			DB  35,  0, 0,  40, -5,    226, $1F, 48
  25+ E01C FB E2 1F 30
  26+ E020 24 00 00 53  StockLiquorWines	DB  36,  0, 0,  83, -5,    251, $0F, 48
  26+ E024 FB FB 0F 30
  27+ E028 25 00 00 C4  StockLuxuries		DB  37,  0, 0, 196,  8,     54, $03, 48
  27+ E02C 08 36 03 30
  28+ E030 26 00 00 EB  StockNarcotics		DB  38,  0, 0, 235, 29,      8, $78, 48
  28+ E034 1D 08 78 30
  29+ E038 19 00 00 9A  StockComputers		DB  25,  0, 0, 154, 14,     56, $03, 48
  29+ E03C 0E 38 03 30
  30+ E040 27 00 00 75  StockMachinery		DB  39,  0, 0, 117,  6,     40, $07, 48
  30+ E044 06 28 07 30
  31+ E048 28 00 00 4E  StockAlloys			DB  40,  0, 0,  78,  1,     17, $1F, 48
  31+ E04C 01 11 1F 30
  32+ E050 29 00 00 7C  StockFirearms   	DB  41,  0, 0, 124, 13,     29, $07, 48
  32+ E054 0D 1D 07 30
  33+ E058 2A 00 00 B0  StockFurs       	DB  42,  0, 0, 176, -9,    220, $3F, 48
  33+ E05C F7 DC 3F 30
  34+ E060 2B 00 00 20  StockMinerals   	DB  43,  0, 0,  32, -1,     53, $03, 48
  34+ E064 FF 35 03 30
  35+ E068 2C 00 00 61  StockGold       	DB  44,  0, 0,  97, -1,     66, $07, 49
  35+ E06C FF 42 07 31
  36+ E070 2D 00 00 AB  StockPlatinum   	DB  45,  0, 0, 171, -2,     55, $1F, 49
  36+ E074 FE 37 1F 31
  37+ E078 2E 00 00 2D  StockGemStones 		DB  46,  0, 0,  45, -1,    250, $0F, 50
  37+ E07C FF FA 0F 32
  38+ E080 2F 00 00 35  StockAlienItems		DB  47,  0, 0,  53, 15,    192, $07, 48
  38+ E084 0F C0 07 30
  39+ E088
  40+ E088
  41+ E088              ;.QQ23	\Prxs -> &3DA6 \  Market prices info
  42+ E088              ;\ base_price, gradient sign+5bits, base_quantity, mask, units 2bits
  43+ E088              ;13 82 06 01			EQUD &01068213 \ Food
  44+ E088              ;14 81 0A 03 		EQUD &030A8114 \ Textiles
  45+ E088              ;41 83 02 07 		EQUD &07028341 \ Radioactives
  46+ E088              ;28 85 E2 1F 		EQUD &1FE28528 \ Slaves
  47+ E088              ;53 85 FB 0F 		EQUD &0FFB8553 \ Liquor/Wines
  48+ E088              ;C4 08 36 03 		EQUD &033608C4 \ Luxuries
  49+ E088              ;EB 1D 08 78 		EQUD &78081DEB \ Narcotics
  50+ E088              ;9A 0E 38 03 		EQUD &03380E9A \ Computers
  51+ E088              ;75 06 28 07 		EQUD &07280675 \ Machinery
  52+ E088              ;4E 01 11 1F 		EQUD &1F11014E \ Alloys
  53+ E088              ;7C 0D 1D 07 		EQUD &071D0D7C \ Firearms
  54+ E088              ;B0 89 DC 3F 		EQUD &3FDC89B0 \ Furs
  55+ E088              ;20 81 35 03 		EQUD &03358120 \ Minerals
  56+ E088              ;61 A1 42 07 		EQUD &0742A161 \ Gold
  57+ E088              ;AB A2 37 1F 		EQUD &1F37A2AB \ Platinum
  58+ E088              ;2D C1 FA 0F 		EQUD &0FFAC12D \ Gem-Stones
  59+ E088              ;35 0F C0 07 		EQUD &07C00F35 \ Alien Items
  60+ E088
  61+ E088
  62+ E088
  63+ E088
  64+ E088
  65+ E088              AlienItemsIndex		    equ 16
  66+ E088              StockListLen		    equ	17
  67+ E088
  68+ E088 00 E0 08 E0  StockItemTable		    DW 	StockFood,  StockTextiles,	   StockRadioactives
  68+ E08C 10 E0
  69+ E08E 18 E0 20 E0                          DW 	StockSlaves, StockLiquorWines, StockLuxuries
  69+ E092 28 E0
  70+ E094 30 E0 38 E0                          DW 	StockNarcotics, StockComputers, StockMachinery
  70+ E098 40 E0
  71+ E09A 48 E0 50 E0                          DW	StockAlloys, StockFirearms, StockFurs
  71+ E09E 58 E0
  72+ E0A0 60 E0 68 E0                          DW  StockMinerals, StockGold, StockPlatinum
  72+ E0A4 70 E0
  73+ E0A6 78 E0 80 E0                          DW  StockGemStones, StockAlienItems
  74+ E0AA
  75+ E0AA 06 FF        generate_stock_market:  ld		b,$FF				; so the first iteration puts it at 0
  76+ E0AC CD 0C 9E                             call	copy_galaxy_to_system
  77+ E0AF DD 21 F8 DF                          ld		ix,StockFood-8		; start 8 bytes before index as first add will shift
  78+ E0B3 11 08 00     .generate_stock_loop:   ld		de,8
  79+ E0B6 DD 19                                add		ix,de				; Move down a row
  80+ E0B8 04                                   inc		b
  81+ E0B9 DD 4E 03     .CalcPrice:	            ld		c,(ix+3);			; c = base price
  82+ E0BC 3A A5 99                             ld		a,(RandomMarketSeed)
  83+ E0BF DD A6 06                             and		(ix+6)				; and with market mask
  84+ E0C2 81                                   add		a,c
  85+ E0C3 4F                                   ld		c,a					; c = base + rand & market mask
  86+ E0C4 3A B1 99                             ld		a,(DisplayEcononmy)	; d= economy
  87+ E0C7 57                                   ld		d,a
  88+ E0C8 DD 7E 04                             ld		a,(ix+4)
  89+ E0CB 5F                                   ld		e,a					; e  = economy adjust
  90+ E0CC CB 7B                                bit		7,e
  91+ E0CE 20 04                                jr		nz,.PosMul			; it could be negative and we onnly want
  92+ E0D0              ;.NegMul:						; e reg from mulitply not a 2'c 16 bit word
  93+ E0D0 7B                                   ld		a,e
  94+ E0D1 ED 44                                neg
  95+ E0D3 5F                                   ld		e,a
  96+ E0D4              .PosMul:
  97+ E0D4 7B                                   ld		a,e
  98+ E0D5 ED 44                                neg
  99+ E0D7 5F                                   ld		e,a
 100+ E0D8 ED 30                                mul
 101+ E0DA 79                                   ld		a,c
 102+ E0DB 83                                   add		a,e
 103+ E0DC CB 27                                sla		a
 104+ E0DE CB 27                                sla		a					; Multply price by 4
 105+ E0E0 DD 77 02                             ld		(ix+2),a			; Now have set price
 106+ E0E3 DD 4E 05     .CalcQty:	            ld		c,(ix+5);			; c = base price
 107+ E0E6 3A A5 99                             ld		a,(RandomMarketSeed)
 108+ E0E9 DD A6 06                             and		(ix+6)				; and with market mask
 109+ E0EC 81                                   add		a,c
 110+ E0ED 4F                                   ld		c,a					; c = base + rand & market mask
 111+ E0EE 3A B1 99                             ld		a,(DisplayEcononmy)	; d= economy
 112+ E0F1 57                                   ld		d,a
 113+ E0F2 DD 7E 04                             ld		a,(ix+4)
 114+ E0F5 5F                                   ld		e,a					; e  = economy adjust
 115+ E0F6 CB 7B                                bit		7,e
 116+ E0F8 20 04                                jr		nz,.PosQtyMul			; it could be negative and we onnly want
 117+ E0FA 7B           .NegQtyMul:				ld		a,e		; e reg from mulitply not a 2'c 16 bit word
 118+ E0FB ED 44                                neg
 119+ E0FD 5F                                   ld		e,a
 120+ E0FE 7B           .PosQtyMul:             ld		a,e
 121+ E0FF ED 44                                neg
 122+ E101 5F                                   ld		e,a
 123+ E102 ED 30                                mul
 124+ E104 79                                   ld		a,c
 125+ E105 93                                   sub		e
 126+ E106 DD 77 01                             ld		(ix+1),a			; Now have set quanity
 127+ E109 78                                   ld		a,b
 128+ E10A FE 10                                cp		AlienItemsIndex
 129+ E10C 20 A5                                jr		nz,.generate_stock_loop
 130+ E10E AF                                   xor		a
 131+ E10F DD 77 01                             ld		(ix+1),a			; Now have set quanity of alient items to always 0 in stock
 132+ E112 C9                                   ret
 133+ E113
# file closed: ./Tables/stock_table.asm
1214  E113
1215  E113              ; Bank 57
1216  E113
1217  E113                  SLOT    LAYER2Addr
1218  E113                  PAGE    BankLAYER2
1219  E113                  ORG     LAYER2Addr
1220  E000
1221  E000                  INCLUDE "./Layer2Graphics/layer2_bank_select.asm"
# file opened: ./Layer2Graphics/layer2_bank_select.asm
   1+ E000
   2+ E000 00           varL2_BANK_SELECTED			 DB	0
   3+ E001 00           varL2_BUFFER_MODE            DB 0
   4+ E002
   5+ E002 3E 08        asm_l2_double_buffer_on:    ld      a,8
   6+ E004 32 01 E0                                 ld      (varL2_BUFFER_MODE),a
   7+ E007 C9                                       ret
   8+ E008
   9+ E008 AF           asm_l2_double_buffer_off:   xor     a
  10+ E009 32 01 E0                                 ld      (varL2_BUFFER_MODE),a
  11+ E00C C9                                       ret
  12+ E00D
  13+ E00D
  14+ E00D              ; "asm_l2_bank_select"
  15+ E00D              ; " a = sepecific bank mask value to select, does not set varL2_BANK_SELECTED"
  16+ E00D 57           asm_l2_bank_select:         ld      d,a
  17+ E00E 3A 01 E0                                 ld      a,(varL2_BUFFER_MODE)
  18+ E011 F6 03                                    or		LAYER2_VISIBLE_MASK  |  LAYER2_WRITE_ENABLE_MASK
  19+ E013 B2                                       or      d; | LAYER2_SHADOW_SCREEN_MASK
  20+ E014 01 3B 12                                 ld 		bc, IO_LAYER2_PORT
  21+ E017 ED 79                                    out 	(c),a
  22+ E019 C9                                       ret
  23+ E01A              ;  "asm_l2_bank_select a = sepecific bank number to select, dsets varL2_BANK_SELECTED"
  24+ E01A 32 00 E0     asm_l2_bank_n_select:       ld		(varL2_BANK_SELECTED),a
  25+ E01D FE 00                                    cp		0
  26+ E01F 20 04                                    jr 		nz,.nottopbank
  27+ E021 3E 00        .topbank:                   ld		a,LAYER2_SHIFTED_SCREEN_TOP
  28+ E023 18 E8                                    jr		asm_l2_bank_select
  29+ E025 FE 01        .nottopbank:                cp		1
  30+ E027 20 04                                    jr 		nz,.notmiddlebank
  31+ E029 3E 40        .middlebank:                ld		a,LAYER2_SHIFTED_SCREEN_MIDDLE
  32+ E02B 18 E0                                    jr		asm_l2_bank_select
  33+ E02D 3E 80        .notmiddlebank:             ld		a,LAYER2_SHIFTED_SCREEN_BOTTOM ; default to bottom
  34+ E02F 18 DC                                    jr		asm_l2_bank_select
  35+ E031              		; Note no ret as its handled by above routines
  36+ E031
  37+ E031              ; "asm_l2_row_bank_select"
  38+ E031              ; "A (unsinged) = y row of pixel line from top, sets the bank to top middle or bottom and adjusts a reg to row memory address"
  39+ E031              ; "Could optimise by holding the previous bank but given its only an out statement it may not save T states at all"
  40+ E031              ; "destroys BC call de is safe a = adjusted poke pixel row"
  41+ E031 FE 40        asm_l2_row_bank_select:     cp 		64			; row < 64?
  42+ E033 30 11                                    jr 		nc, .l2rowGTE64
  43+ E035 08           .l2rowLT64:                 ex		af,af'
  44+ E036                                          ;ld		a, LAYER2_VISIBLE_MASK  |  LAYER2_WRITE_ENABLE_MASK | LAYER2_SHIFTED_SCREEN_TOP | LAYER2_SHADOW_SCREEN_MASK
  45+ E036 3A 01 E0                                 ld      a,(varL2_BUFFER_MODE)
  46+ E039 F6 03                                    or		LAYER2_VISIBLE_MASK  |  LAYER2_WRITE_ENABLE_MASK | LAYER2_SHIFTED_SCREEN_TOP
  47+ E03B 01 3B 12                                 ld 		bc, IO_LAYER2_PORT
  48+ E03E ED 79                                    out 	(c),a
  49+ E040 AF                                       xor		a						; set a to 0
  50+ E041 32 00 E0                                 ld		(varL2_BANK_SELECTED),a	; save selected bank number 0
  51+ E044 08                                       ex		af,af'					; return pixel poke unharmed
  52+ E045 C9                                       ret
  53+ E046 FE 80        .l2rowGTE64:                cp 		128
  54+ E048 30 14                                    jr 		nc, .l2rowGTE128
  55+ E04A 08           .l2row64to127:              ex		af,af'
  56+ E04B                                  ;		ld		a, LAYER2_VISIBLE_MASK  |  LAYER2_WRITE_ENABLE_MASK | LAYER2_SHIFTED_SCREEN_MIDDLE | LAYER2_SHADOW_SCREEN_MASK
  57+ E04B 3A 01 E0                                 ld      a,(varL2_BUFFER_MODE)
  58+ E04E F6 43                                    or		LAYER2_VISIBLE_MASK  |  LAYER2_WRITE_ENABLE_MASK | LAYER2_SHIFTED_SCREEN_MIDDLE
  59+ E050 01 3B 12                                 ld 		bc, IO_LAYER2_PORT
  60+ E053 ED 79                                    out 	(c),a
  61+ E055 3E 01                                    ld		a,1						; set a to 1
  62+ E057 32 00 E0                                 ld		(varL2_BANK_SELECTED),a	; save selected bank
  63+ E05A 08                                       ex		af,af'
  64+ E05B D6 40                                    sub		64
  65+ E05D C9                                       ret
  66+ E05E 08           .l2rowGTE128:               ex		af,af'
  67+ E05F                                  ;		ld		a, LAYER2_VISIBLE_MASK  |  LAYER2_WRITE_ENABLE_MASK | LAYER2_SHIFTED_SCREEN_BOTTOM | LAYER2_SHADOW_SCREEN_MASK
  68+ E05F 3A 01 E0                                 ld      a,(varL2_BUFFER_MODE)
  69+ E062 F6 83                                    or		LAYER2_VISIBLE_MASK  |  LAYER2_WRITE_ENABLE_MASK | LAYER2_SHIFTED_SCREEN_BOTTOM
  70+ E064
  71+ E064 01 3B 12                                 ld 		bc, IO_LAYER2_PORT
  72+ E067 ED 79                                    out 	(c),a
  73+ E069 3E 01                                    ld		a,1						; set a to 2
  74+ E06B 32 00 E0                                 ld		(varL2_BANK_SELECTED),a	; save selected bank
  75+ E06E 08                                       ex		af,af'
  76+ E06F D6 80                                    sub		128
  77+ E071 C9                                       ret
  78+ E072
# file closed: ./Layer2Graphics/layer2_bank_select.asm
1222  E072                  INCLUDE "./Layer2Graphics/layer2_cls.asm"
# file opened: ./Layer2Graphics/layer2_cls.asm
   1+ E072
   2+ E072 00           l2_cls_byte	            DB 0
   3+ E073              ; ">DMA Command BLOCK"
   4+ E073
   5+ E073 83 C3 C7 CB  l2_fill                 DB DMA_DISABLE,  DMA_RESET, DMA_RESET_PORT_A_TIMING, DMA_RESET_PORT_B_TIMING ,DMA_WRO_BLOCK_PORTA_A2B_XFR
   5+ E077 7D
   6+ E078 72 E0        l2_fill_astrt           DW l2_cls_byte
   7+ E07A 00 40        l2_fill_length          DB $00,$40
   8+ E07C 24 10 AD                             DB DMA_WR1_P1FIXED_MEMORY ,DMA_WR2_P2INC_MEMORY ,DMA_WR4_CONT_MODE
   9+ E07F 00 00        l2_fill_bstrt           DB $00,$00
  10+ E081 82 CF B3 87                          DB DMA_STOP_AT_END, DMA_LOAD, DMA_FORCE_READY, DMA_ENABLE
  11+ E085              l2_fill_cmd_len	        EQU $ - l2_fill
  12+ E085
  13+ E085              l2_cls_dma_bank:
  14+ E085              ; ">l2_cls_dma_bank"
  15+ E085              ; ">sets a bank to"
  16+ E085 32 72 E0     .set_colour:            ld (l2_cls_byte),a
  17+ E088 21 73 E0     .write_dma:             ld hl, l2_fill
  18+ E08B 06 12                                ld b, l2_fill_cmd_len
  19+ E08D 0E 6B                                ld	c,IO_DATAGEAR_DMA_PORT
  20+ E08F ED B3                                otir
  21+ E091 C9                                   ret
  22+ E092
  23+ E092 3E 00        l2_set_color_upper2:    ld      a,0
  24+ E094 CD 31 E0                             call asm_l2_row_bank_select
  25+ E097 3A 72 E0                             ld      a,(l2_cls_byte)
  26+ E09A CD 85 E0                             call l2_cls_dma_bank
  27+ E09D 3E 40                                ld a,64								; pretend we are plotting pixel on row 64 to force mid selection
  28+ E09F CD 31 E0                             call asm_l2_row_bank_select
  29+ E0A2 3A 72 E0                             ld      a,(l2_cls_byte)
  30+ E0A5 CD 85 E0                             call l2_cls_dma_bank
  31+ E0A8 C9                                   ret
  32+ E0A9
  33+ E0A9
  34+ E0A9 3E 00        l2_cls_upper_two_thirds:ld a,0								; pretend we are plotting pixel on row 0 to force top selection
  35+ E0AB CD 31 E0                             call asm_l2_row_bank_select
  36+ E0AE 3E E3                                ld 	a,COLOUR_TRANSPARENT
  37+ E0B0 CD 85 E0                             call l2_cls_dma_bank
  38+ E0B3 3E 40                                ld a,64								; pretend we are plotting pixel on row 64 to force mid selection
  39+ E0B5 CD 31 E0                             call asm_l2_row_bank_select
  40+ E0B8 3E E3                                ld 	a,COLOUR_TRANSPARENT
  41+ E0BA CD 85 E0                             call l2_cls_dma_bank
  42+ E0BD C9                                   ret
  43+ E0BE
  44+ E0BE 3E 80        l2_cls_lower_third:     ld a,128							; pretend we are plotting pixel on row 64 to force mid selection
  45+ E0C0 CD 31 E0                             call asm_l2_row_bank_select
  46+ E0C3 3E E3                                ld 	a,COLOUR_TRANSPARENT
  47+ E0C5 CD 85 E0                             call l2_cls_dma_bank
  48+ E0C8 C9                                   ret
  49+ E0C9
  50+ E0C9 CD A9 E0     l2_cls:                 call l2_cls_upper_two_thirds
  51+ E0CC CD BE E0                             call l2_cls_lower_third
  52+ E0CF C9                                   ret
  53+ E0D0
# file closed: ./Layer2Graphics/layer2_cls.asm
1223  E0D0                  INCLUDE "./Layer2Graphics/layer2_initialise.asm"
# file opened: ./Layer2Graphics/layer2_initialise.asm
   1+ E0D0
   2+ E0D0 ED 91 12 08  l2_initialise:          nextreg		LAYER2_RAM_PAGE_REGISTER,          	LAYER2_SCREEN_BANK1
   3+ E0D4 ED 91 13 0B                          nextreg		LAYER2_RAM_SHADOW_REGISTER,     	LAYER2_SHADOW_BANK1
   4+ E0D8 ED 91 14 E3                          nextreg		TRANSPARENCY_COLOUR_REGISTER, 		COLOUR_TRANSPARENT
   5+ E0DC C9                                   ret
   6+ E0DD
# file closed: ./Layer2Graphics/layer2_initialise.asm
1224  E0DD                  INCLUDE "./Layer2Graphics/l2_flip_buffers.asm"
# file opened: ./Layer2Graphics/l2_flip_buffers.asm
   1+ E0DD              l2_flip_buffers:        GetNextReg LAYER2_RAM_PAGE_REGISTER
   1+ E0DD C5          >            push bc
   1+ E0DE 01 3B 24    >                ld bc,$243B
   1+ E0E1 3E 12       >                    ld a,LAYER2_RAM_PAGE_REGISTER
   1+ E0E3 ED 79       >                    out (c),a
   1+ E0E5 04          >                    inc b
   1+ E0E6 ED 78       >                in a,(c)
   1+ E0E8 C1          >            pop bc
   2+ E0E9 57                                   ld      d,a
   3+ E0EA                                      GetNextReg LAYER2_RAM_SHADOW_REGISTER
   3+ E0EA C5          >            push bc
   3+ E0EB 01 3B 24    >                ld bc,$243B
   3+ E0EE 3E 13       >                    ld a,LAYER2_RAM_SHADOW_REGISTER
   3+ E0F0 ED 79       >                    out (c),a
   3+ E0F2 04          >                    inc b
   3+ E0F3 ED 78       >                in a,(c)
   3+ E0F5 C1          >            pop bc
   4+ E0F6 5F                                   ld      e,a
   5+ E0F7 ED 92 12                             nextreg LAYER2_RAM_PAGE_REGISTER, a
   6+ E0FA 7A                                   ld      a,d
   7+ E0FB ED 92 13                             nextreg LAYER2_RAM_SHADOW_REGISTER, a
   8+ E0FE C9                                   ret
   9+ E0FF
# file closed: ./Layer2Graphics/l2_flip_buffers.asm
1225  E0FF                  INCLUDE "./Layer2Graphics/layer2_plot_pixel.asm"
# file opened: ./Layer2Graphics/layer2_plot_pixel.asm
   1+ E0FF              l2_plot_pixel:
   2+ E0FF              ; ">l2_plot_pixel b= row number, c = column number, a = pixel col"
   3+ E0FF F5           	push    af
   4+ E100 78               ld      a,b
   5+ E101              l2_pp_row_valid:
   6+ E101                  JumpIfAGTENusng ScreenHeight,l2_pp_dont_plot
   6+ E101 FE C0       >                        cp     ScreenHeight
   6+ E103 D2 11 E1    >                        jp		nc,l2_pp_dont_plot
   7+ E106 C5           	push    bc								; bank select destroys bc so need to save it
   8+ E107              ;	ld      a,b
   9+ E107 CD 31 E0     	call    asm_l2_row_bank_select
  10+ E10A C1           	pop     bc
  11+ E10B 47           	ld      b,a
  12+ E10C 60           	ld      h,b								; hl now holds ram address after bank select
  13+ E10D 69           	ld      l,c
  14+ E10E F1           	pop     af								; a = colour to plott
  15+ E10F 77           	ld      (hl),a
  16+ E110 C9           	ret
  17+ E111              l2_pp_dont_plot:
  18+ E111 F1               pop     af
  19+ E112 C9               ret
  20+ E113
  21+ E113              l2_plot_pixel_no_bank:
  22+ E113              ; ">l2_plot_pixel_no_bank b= row number, c = column number, a = pixel col"
  23+ E113              ; This version assues pixel is in the same bank as previously plotted ones. optimised for horizontal lines
  24+ E113 E5           	push 	hl
  25+ E114 60           	ld 		h,b								; hl now holds ram address after bank select
  26+ E115 69           	ld 		l,c
  27+ E116 77           	ld 		(hl),a
  28+ E117 E1           	pop		hl
  29+ E118 C9           	ret
  30+ E119
  31+ E119              l2_plot_pixel_y_test:
  32+ E119 F5           	push	af
  33+ E11A 78           	ld		a,b
  34+ E11B FE C0        	cp		192
  35+ E11D 30 03        	jr		nc,.clearup
  36+ E11F F1           	pop		af
  37+ E120 18 DD        	jr		l2_plot_pixel
  38+ E122              .clearup:
  39+ E122 F1           	pop		af
  40+ E123 C9           	ret
  41+ E124
  42+ E124              l2_point_pixel_y_safe:	MACRO
  43+ E124 ~            						push	hl
  44+ E124 ~            						push	bc
  45+ E124 ~            						call	l2_plot_pixel
  46+ E124 ~            						pop		bc
  47+ E124 ~            						pop		hl
  48+ E124              						ENDM
  49+ E124
# file closed: ./Layer2Graphics/layer2_plot_pixel.asm
1226  E124                  INCLUDE "./Layer2Graphics/layer2_print_character.asm"
# file opened: ./Layer2Graphics/layer2_print_character.asm
   1+ E124
   2+ E124              l2_print_chr_at:
   3+ E124              ; "l2_print_chr_at, bc = col,row, d= character, e = colour"
   4+ E124              ; "Need a version that also prints absence of character"
   5+ E124 7A           	ld		a,d
   6+ E125 FE 20        	cp		32
   7+ E127 38 3F        	jr		c,.InvalidCharacter		; Must be between 32 and 127
   8+ E129 FE 7F        	cp		127
   9+ E12B 30 3B        	jr		nc,.InvalidCharacter
  10+ E12D              .ValidCharater:
  11+ E12D 26 00        	ld		h,0
  12+ E12F 6A           	ld		l,d
  13+ E130 29           	add		hl,hl						; * 2
  14+ E131 29           	add		hl,hl						; * 4
  15+ E132 29           	add		hl,hl						; * 8 to get byte address
  16+ E133 ED 34 00 3C  	add		hl,charactersetaddr			; hl = address of rom char
  17+ E137 04           	inc		b							; start + 1 pixel x and y as we only print 7x7
  18+ E138 23           	inc		hl							; skip first byte
  19+ E139 16 07        	ld		d,7
  20+ E13B              .PrintCharLoop:
  21+ E13B D5           	push	de
  22+ E13C 7E           	ld		a,(hl)
  23+ E13D FE 00        	cp		0
  24+ E13F 28 21        	jr		z,.NextRowNoBCPop
  25+ E141              .PrintARow:
  26+ E141 C5           	push	bc							; save row col
  27+ E142 16 07        	ld		d,7							; d is loop row number now
  28+ E144              .PrintPixelLoop:
  29+ E144 0C           	inc		c							; we start at col 1 not 0 so can move inc here
  30+ E145              .PrintTheRow:
  31+ E145 CB 27        	sla		a							; scroll char 1 pixel as we read from bit 7
  32+ E147 F5           	push	af							; save character byte
  33+ E148 CB 7F        	bit		7,a							; If left most pixel set then plot
  34+ E14A 20 04        	jr		nz,.PixelToPrint
  35+ E14C              .NoPixelToPrint:
  36+ E14C 3E E3        	ld		a,$E3
  37+ E14E 18 01        	jr		.HaveSetPixelColour
  38+ E150              .PixelToPrint:
  39+ E150 7B           	ld		a,e							; Get Colour
  40+ E151              .HaveSetPixelColour
  41+ E151 E5           	push	hl
  42+ E152              ;	push	bc							; at the moment we don't do paging on first plot so need to preserve BC
  43+ E152              .BankOnFirstOnly:
  44+ E152 F5           	push	af
  45+ E153 7A           	ld		a,d
  46+ E154 FE 07        	cp		7
  47+ E156 28 11        	jr		z,.PlotWithBank
  48+ E158              .PlotNoBank:
  49+ E158 F1           	pop		af
  50+ E159 60           	ld 		h,b								; hl now holds ram address after bank select
  51+ E15A 69           	ld 		l,c
  52+ E15B 77           	ld 		(hl),a
  53+ E15C              .IterateLoop:
  54+ E15C              ;	pop		bc
  55+ E15C E1           	pop		hl
  56+ E15D F1           	pop		af							; a= current byte shifted
  57+ E15E 15           	dec		d						 	; do dec after inc as we amy
  58+ E15F 20 E3        	jr		nz,.PrintPixelLoop
  59+ E161              .NextRow:
  60+ E161 C1           	pop		bc							; Current Col Row
  61+ E162              .NextRowNoBCPop:
  62+ E162 D1           	pop		de							; d= row loop
  63+ E163 04           	inc		b							; Down 1 row
  64+ E164 23           	inc		hl							; Next character byte
  65+ E165 15           	dec		d							; 1 done now
  66+ E166 20 D3        	jr		nz,.PrintCharLoop
  67+ E168              .InvalidCharacter:
  68+ E168 C9           	ret
  69+ E169              .PlotWithBank:
  70+ E169 F1           	pop		af
  71+ E16A CD FF E0     	call	l2_plot_pixel				; This will shift bc to poke row
  72+ E16D 18 ED        	jr		.IterateLoop
  73+ E16F
  74+ E16F              l2_print_at:
  75+ E16F              ; "l2_print_at bc= colrow, hl = addr of message, e = colour"
  76+ E16F              ; "No error trapping, if there is no null is will just cycle on the line"
  77+ E16F 7E           	ld	a,(hl)							; Return if empty string
  78+ E170 FE 00        	cp	0
  79+ E172 C8           	ret	z
  80+ E173 E5           	push	hl
  81+ E174 D5           	push	de
  82+ E175 C5           	push	bc
  83+ E176 57           	ld		d,a							; bc = pos, de = char and colour
  84+ E177 CD 24 E1     	call 	l2_print_chr_at
  85+ E17A C1           	pop		bc
  86+ E17B D1           	pop		de
  87+ E17C E1           	pop		hl
  88+ E17D              .Move8Pixlestoright:
  89+ E17D 08           	ex		af,af'
  90+ E17E 79           	ld		a,c
  91+ E17F C6 08        	add		8
  92+ E181 4F           	ld		c,a
  93+ E182 08           	ex		af,af'
  94+ E183 23           	inc		hl
  95+ E184 18 E9        	jr		l2_print_at					; Just loop until 0 found
  96+ E186
  97+ E186
  98+ E186              ; "l2_print_chr_at, bc = col,row, d= character, e = colour"
  99+ E186              ; "Need a version that also prints absence of character"
 100+ E186              ; removed blank line optimisation as we need spaces printed
 101+ E186 7A           l2_print_7chr_at:       ld		a,d
 102+ E187 FE 1F                                cp		31
 103+ E189 38 3D                                jr		c,.InvalidCharacter		; Must be between 32 and 127
 104+ E18B FE 7F                                cp		127
 105+ E18D 30 39                                jr		nc,.InvalidCharacter
 106+ E18F 26 00        .ValidCharater:         ld		h,0
 107+ E191 6A                                   ld		l,d
 108+ E192 29                                   add		hl,hl						; * 2
 109+ E193 29                                   add		hl,hl						; * 4
 110+ E194 29                                   add		hl,hl						; * 8 to get byte address
 111+ E195 ED 34 00 3C                          add		hl,charactersetaddr			; hl = address of rom char
 112+ E199 04                                   inc		b							; start + 1 pixel x and y as we only print 7x7
 113+ E19A 23                                   inc		hl							; skip first byte
 114+ E19B 16 07                                ld		d,7
 115+ E19D D5           .PrintCharLoop:         push	de
 116+ E19E 7E                                   ld		a,(hl)
 117+ E19F                                      ;cp		0
 118+ E19F                                      ;jr		z,.NextRowNoBCPop
 119+ E19F C5           .PrintARow:             push	bc							; save row col
 120+ E1A0 16 06                                ld		d,6							; d is loop row number now
 121+ E1A2 0C           .PrintPixelLoop:        inc		c							; we start at col 1 not 0 so can move inc here
 122+ E1A3 28 1C                                jr		z,.NextRow
 123+ E1A5 CB 27                                sla		a							; scroll char 1 pixel as we read from bit 7
 124+ E1A7 F5                                   push	af							; save character byte
 125+ E1A8 CB 7F                                bit		7,a							; If left most pixel set then plot
 126+ E1AA 20 04                                jr		nz,.PixelToPrint
 127+ E1AC 3E E3        .NoPixelToPrint:        ld		a,$E3
 128+ E1AE 18 01                                jr		.HaveSetPixelColour
 129+ E1B0 7B           .PixelToPrint:          ld		a,e							; Get Colour
 130+ E1B1 E5           .HaveSetPixelColour		push	hl
 131+ E1B2                                      ;	push	bc							; at the moment we don't do paging on first plot so need to preserve BC
 132+ E1B2 F5           .BankOnFirstOnly:       push	af
 133+ E1B3 7A                                   ld		a,d
 134+ E1B4 FE 06                                cp		6
 135+ E1B6 28 11                                jr		z,.PlotWithBank
 136+ E1B8 F1           .PlotNoBank:            pop		af
 137+ E1B9 60                                   ld 		h,b								; hl now holds ram address after bank select
 138+ E1BA 69                                   ld 		l,c
 139+ E1BB 77                                   ld 		(hl),a
 140+ E1BC              .IterateLoop:	        ;	pop		bc
 141+ E1BC E1                                   pop		hl
 142+ E1BD F1                                   pop		af							; a= current byte shifted
 143+ E1BE 15                                   dec		d						 	; do dec after inc as we amy
 144+ E1BF 20 E1                                jr		nz,.PrintPixelLoop
 145+ E1C1 C1           .NextRow:               pop		bc							; Current Col Row
 146+ E1C2 D1           .NextRowNoBCPop:	    pop		de							; d= row loop
 147+ E1C3 04                                   inc		b							; Down 1 row
 148+ E1C4 23                                   inc		hl							; Next character byte
 149+ E1C5 15                                   dec		d							; 1 done now
 150+ E1C6 20 D5                                jr		nz,.PrintCharLoop
 151+ E1C8 C9           .InvalidCharacter:      ret
 152+ E1C9 F1           .PlotWithBank:          pop		af
 153+ E1CA CD FF E0                             call	l2_plot_pixel				; This will shift bc to poke row
 154+ E1CD 18 ED                                jr		.IterateLoop
 155+ E1CF
 156+ E1CF              ; "l2_print_7at bc= colrow, hl = addr of message, e = colour"
 157+ E1CF              ; "No error trapping, if there is no null is will just cycle on the line"
 158+ E1CF 7E           l2_print_7at:           ld	a,(hl)							; Return if empty string
 159+ E1D0 FE 00                                cp	0
 160+ E1D2 C8                                   ret	z
 161+ E1D3 E5                                   push	hl
 162+ E1D4 D5                                   push	de
 163+ E1D5 C5                                   push	bc
 164+ E1D6 57                                   ld		d,a							; bc = pos, de = char and colour
 165+ E1D7 CD 86 E1                             call 	l2_print_7chr_at
 166+ E1DA C1                                   pop		bc
 167+ E1DB D1                                   pop		de
 168+ E1DC E1                                   pop		hl
 169+ E1DD 08           .Move7Pixlestoright:	ex		af,af'
 170+ E1DE 79                                   ld		a,c
 171+ E1DF C6 07                                add		7
 172+ E1E1 4F                                   ld		c,a
 173+ E1E2 08                                   ex		af,af'
 174+ E1E3 23                                   inc		hl
 175+ E1E4 18 E9                                jr		l2_print_7at					; Just loop until 0 found
 176+ E1E6
 177+ E1E6
# file closed: ./Layer2Graphics/layer2_print_character.asm
1227  E1E6                  INCLUDE "./Layer2Graphics/layer2_draw_box.asm"
# file opened: ./Layer2Graphics/layer2_draw_box.asm
   1+ E1E6              ; "l2_draw_thick_box bc=rowcol, de=heightwidth h=color"
   2+ E1E6              ; TODO DMA Optimise
   3+ E1E6 C5 D5 E5     l2_draw_fill_box:       push    bc,,de,,hl
   4+ E1E9 53                                   ld      d,e
   5+ E1EA 5C                                   ld      e,h
   6+ E1EB CD 60 E2                             call    l2_draw_horz_line           ; "bc = left side row,col, d = length, e = color"
   7+ E1EE E1 D1 C1                             pop     bc,,de,,hl
   8+ E1F1 04                                   inc     b
   9+ E1F2 15                                   dec     d
  10+ E1F3 C8                                   ret     z
  11+ E1F4 18 F0                                jr      l2_draw_fill_box
  12+ E1F6
  13+ E1F6              ; "l2_draw_box bc=rowcol, de=heightwidth a=color"
  14+ E1F6 C5 D5 F5     l2_draw_box:            push	bc,,de,,af
  15+ E1F9 53                                   ld		d,e
  16+ E1FA 5F                                   ld		e,a
  17+ E1FB 14                                   inc		d
  18+ E1FC CD 60 E2                             call	l2_draw_horz_line
  19+ E1FF F1 D1 C1                             pop		bc,,de,,af
  20+ E202 C5 D5 F5     .bottomhorzline:	    push	bc,,de,,af
  21+ E205 67                                   ld		h,a							;save color whilst b = row + height
  22+ E206 78                                   ld		a,b
  23+ E207 82                                   add		a,d
  24+ E208 47                                   ld		b,a
  25+ E209 53                                   ld		d,e							; d = width
  26+ E20A 14                                   inc		d							; Extra pixel for width
  27+ E20B 5C                                   ld		e,h							; e = colour
  28+ E20C CD 60 E2                             call	l2_draw_horz_line
  29+ E20F F1 D1 C1                             pop		bc,,de,,af
  30+ E212 C5 D5 F5     .leftvertline:          push	bc,,de,,af
  31+ E215 04                                   inc		b							; save 2 pixles
  32+ E216 15                                   dec		d
  33+ E217 5F                                   ld		e,a							; e = color
  34+ E218 CD B1 E2                             call	l2_draw_vert_line
  35+ E21B F1 D1 C1                             pop		bc,,de,,af
  36+ E21E 04           .rightvertline:         inc		b							; save 2 pixles
  37+ E21F 15                                   dec		d
  38+ E220 67                                   ld		h,a							;save color whilst c = col + width
  39+ E221 79                                   ld		a,c
  40+ E222 83                                   add		a,e
  41+ E223 4F                                   ld		c,a
  42+ E224 5C                                   ld		e,h							; e = color
  43+ E225 CD B1 E2                             call	l2_draw_vert_line
  44+ E228 C9                                   ret
  45+ E229
# file closed: ./Layer2Graphics/layer2_draw_box.asm
1228  E229                  INCLUDE "./Layer2Graphics/asm_l2_plot_horizontal.asm"
# file opened: ./Layer2Graphics/asm_l2_plot_horizontal.asm
   1+ E229
   2+ E229              ;; NOTE DMA is little endian
   3+ E229 00           l2_horz_pixel           DB 0
   4+ E22A
   5+ E22A 83 C3 C7 CB  l2_horz_line            DB DMA_DISABLE,  DMA_RESET, DMA_RESET_PORT_A_TIMING, DMA_RESET_PORT_B_TIMING ,DMA_WRO_BLOCK_PORTA_A2B_XFR
   5+ E22E 7D
   6+ E22F 29 E2        l2_horz_colr            DW l2_horz_pixel
   7+ E231 00           l2_horz_lenlo           DB 0
   8+ E232 00           l2_horz_lenhi           DB 0
   9+ E233 24 10 AD                             DB DMA_WR1_P1FIXED_MEMORY, DMA_WR2_P2INC_MEMORY, DMA_WR4_CONT_MODE
  10+ E236 00 00        l2_horz_target          DB $00, $00
  11+ E238 CF 87                                DB DMA_LOAD, DMA_ENABLE
  12+ E23A              l2_horz_cmd_len	        EQU $ - l2_horz_line
  13+ E23A
  14+ E23A
  15+ E23A              ; "l2_draw_horz_dma"
  16+ E23A              ; "plot at bc for length d colour e using dma, assumes bank already selected"
  17+ E23A 7B           l2_draw_horz_dma:       ld		a,e                                               ; T=4      ;
  18+ E23B 32 29 E2                             ld		(l2_horz_pixel),a                                 ; T=13     ;
  19+ E23E 5A                                   ld      e,d ; saved 3 t states ld		a,d                                               ; T=4      ; e=d   4
  20+ E23F 16 00                                ld      d,0; saved 3 t states ld 		(l2_horz_lenlo),a                                 ; T=13     ; d = 0  7
  21+ E241 ED 53 31 E2                          ld      (l2_horz_lenlo),de; saved 3 t states xor 	a                                                 ; T=4      ; t 20  31
  22+ E245                                      ; saved 3 t states ld ld 		(l2_horz_lenhi),a                                 ; T=13     ;
  23+ E245                                    ; saved 4 t states  ld		h,b                           ;          ;
  24+ E245                                    ; saved 4 t states  ld		l,c                           ;          ;
  25+ E245 ED 43 36 E2                          ld      (l2_horz_target),bc ; saved 4 t states  was , hl  ; T=20     ;
  26+ E249 21 2A E2     .write_dma:             ld 		hl, l2_horz_line                                  ;          ;
  27+ E24C 06 10                                ld 		b, l2_horz_cmd_len                                ;
  28+ E24E 0E 6B                                ld		c,IO_DATAGEAR_DMA_PORT                            ;
  29+ E250 ED B3                                otir                                                      ;
  30+ E252 C9                                   ret
  31+ E253
  32+ E253              ; "bc = left side row,col, d = length, e = color"
  33+ E253 D5           l2_draw_horz_dma_bank:  push 	de							; save length and colour
  34+ E254 C5                                   push 	bc							; save row col
  35+ E255 78                                   ld   	a,b
  36+ E256 CD 31 E0                             call 	asm_l2_row_bank_select		; now we have the correct bank, its a horizontal line so bank will not shift
  37+ E259 C1                                   pop  	bc
  38+ E25A 47                                   ld	 	b,a	       					; fixed row by the call we can go straight into HL with row col
  39+ E25B D1                                   pop  	de							; get length back
  40+ E25C CD 3A E2                             call    l2_draw_horz_dma
  41+ E25F C9                                   ret
  42+ E260
  43+ E260              ; "l2_draw_horz_line"
  44+ E260              ; "bc = left side row,col, d = length, e = color"
  45+ E260              ; "optimisation if above min pix is will use dma call SCREEN_HOZ_MIN_PIX not implemented yet"
  46+ E260 7A           l2_draw_horz_line:      ld		a,d
  47+ E261 FE 00                                cp 		0							; if its zero length then just return
  48+ E263 C8           .zerolengthexit:        ret		z
  49+ E264 FE 01        .isitlen1:              cp 		1
  50+ E266 CA 88 E2                             jp 		z,.l2_draw_horz_line_1
  51+ E269 FE 0A        .longenoughtfordma:     cp  10
  52+ E26B C3 53 E2                             jp  l2_draw_horz_dma_bank
  53+ E26E D5 C5        .plottableline:         push 	de,,bc  					; save length and colour an d row col
  54+ E270 78                                   ld   	a,b
  55+ E271 CD 31 E0                             call 	asm_l2_row_bank_select		; now we have the correct bank, its a horizontal line so bank will not shift
  56+ E274 C1                                   pop  	bc
  57+ E275 67                                   ld	 	h,a	       					; fixed row by the call we can go straight into HL with row col
  58+ E276 69                                   ld   	l,c
  59+ E277 D1                                   pop  	de							; get length back
  60+ E278 79           .cliptest:              ld	 	a,c							; get column + length
  61+ E279 42                                   ld  	b,d  						; speculate that we don't clip by pre-loading b with length
  62+ E27A 82                                   add  	a,d
  63+ E27B 30 06                                jr   	nc, .l2_draw_horz_plot_loop	; if carry is set c+d > 255
  64+ E27D 3E FF        .clipat255:             ld   	a,$FF
  65+ E27F 91                                   sub  	c							; a holds clipped length
  66+ E280 47                                   ld 		b, a 						; so now hl holds poke address  b = clipped length e = colour
  67+ E281 18 00                                jr		.l2_draw_horz_plot_loop
  68+ E283 73           .l2_draw_horz_plot_loop:ld (hl),e							; loop poking hl with e for b pixels
  69+ E284 23                                   inc hl
  70+ E285 10 FC                                djnz .l2_draw_horz_plot_loop
  71+ E287 C9                                   ret
  72+ E288 7B           .l2_draw_horz_line_1:   ld		a,e
  73+ E289 C3 FF E0                             jp		l2_plot_pixel				; hijack return
  74+ E28C
  75+ E28C              ; "l2_draw_horz_line_to"
  76+ E28C              ; "bc = left side row,col, d right pixel, e = color"
  77+ E28C 7A           l2_draw_horz_line_to:   ld 		a,d
  78+ E28D B9                                   cp 		c
  79+ E28E 30 04                                jr		nc, .noswap
  80+ E290 28 07                                jr      z, .singlepixel
  81+ E292 51           .swap:                  ld		d,c
  82+ E293 4F                                   ld		c,a
  83+ E294 7A           .noswap:                ld		a,d
  84+ E295 91                                   sub		c
  85+ E296              ;                        dec		a							; so now its length not offset
  86+ E296 57                                   ld		d,a
  87+ E297 18 C7                                jr 		l2_draw_horz_line			; hijack routine and return statements
  88+ E299 7B           .singlepixel:           ld		a,e
  89+ E29A C3 FF E0                             jp		l2_plot_pixel				; hijack return
  90+ E29D
# file closed: ./Layer2Graphics/asm_l2_plot_horizontal.asm
1229  E29D                  INCLUDE "./Layer2Graphics/asm_l2_plot_vertical.asm"
# file opened: ./Layer2Graphics/asm_l2_plot_vertical.asm
   1+ E29D              ; ">l2_draw_vert_segment"
   2+ E29D              ; ">hl = bank adjusted pixel poke address d = length, e = color"
   3+ E29D              ; ">will always clip once h = 64 even if length > 64 destroys a and hl, d = resudual length not plotted"
   4+ E29D 7A           l2_draw_vert_segment:   ld		a,d
   5+ E29E FE 00        .emptylinecheck:	    cp 		0
   6+ E2A0 C8                                   ret		z
   7+ E2A1 FE 01        .justonepixel	        cp		1
   8+ E2A3 20 02                                jr		nz, .multiplepixelsLoop
   9+ E2A5 73                                   ld		(hl),e
  10+ E2A6 C9                                   ret
  11+ E2A7              .multiplepixelsLoop:
  12+ E2A7 7C           .endofbankcheck:        ld   	a,h
  13+ E2A8 FE 40                                cp   	64
  14+ E2AA D0                                   ret		nc							; check before we poke data if we have hit a boundary
  15+ E2AB 73           .canplotapixel:         ld   	(hl),e						; set colour
  16+ E2AC 24                                   inc 	h							; we don't check here else we would need a dec d on ret could do for optimisation of loop though
  17+ E2AD 15                                   dec		d
  18+ E2AE C8                                   ret		z
  19+ E2AF 18 F6                                jr		.multiplepixelsLoop
  20+ E2B1
  21+ E2B1              ; ">l2_draw_vert_line"
  22+ E2B1              ; ">bc = row col d = length, e = color"
  23+ E2B1 78           l2_draw_vert_line:      ld 		a,b
  24+ E2B2 FE C0        .offscreencheck:        cp 		SCREEN_HEIGHT
  25+ E2B4 D0                                   ret 	nc							; can't start off the screen
  26+ E2B5 7A           .emptylinecheck:        ld		a,d
  27+ E2B6 FE 00                                cp		0
  28+ E2B8 C8                                   ret		z
  29+ E2B9 FE 01                                cp		1
  30+ E2BB 20 04                                jr		nz,.multiplepixels
  31+ E2BD CD FF E0     .itsonepixel:           call	l2_plot_pixel
  32+ E2C0 C9                                   ret
  33+ E2C1              .multiplepixels:						; so now we have at least 2 pixels to plot
  34+ E2C1 7A           .clipto192:             ld		a,d							; get length
  35+ E2C2 80                                   add		a,b							; a= row + length
  36+ E2C3 38 04                                jr		c,.needtoclip				; if it was > 255 then there is a definite need
  37+ E2C5 FE C0                                cp		SCREEN_HEIGHT
  38+ E2C7 38 08                                jr		c, .noclipneeded
  39+ E2C9 78           .needtoclip             ld		a,b
  40+ E2CA 82                                   add		a,d
  41+ E2CB D6 C0                                sub		SCREEN_HEIGHT
  42+ E2CD 67                                   ld		h,a							; use h as a temp holding for (row + length) - 192
  43+ E2CE 7A                                   ld		a,d
  44+ E2CF 94                                   sub		h
  45+ E2D0 57                                   ld		d,a							; d = length - ((row + length) - 192)
  46+ E2D1              ; so now BC = row col, d = length clipped, e = color
  47+ E2D1 78           .noclipneeded:          ld		a,b
  48+ E2D2 C5 D5                                push	bc,,de
  49+ E2D4 CD 31 E0                             call 	asm_l2_row_bank_select
  49+ E2D7               	 	; we now have poke address and a variable holding current bank number
  50+ E2D7 D1 C1                                pop		bc,,de
  51+ E2D9 67                                   ld		h,a							; b now tolds target pixel for first plot
  52+ E2DA 69                                   ld		l,c  						; and c holds pixel column for plotting
  53+ E2DB CD 9D E2                             call 	l2_draw_vert_segment		; draw seg, d = pixels remaining
  54+ E2DE 7A                                   ld		a,d							; a and d = nbr pixels remaining
  55+ E2DF FE 00                                cp		0
  56+ E2E1 28 27                                jr		z, .doneplotting
  57+ E2E3 3A 00 E0     .anotherbank:           ld		a, (varL2_BANK_SELECTED)
  58+ E2E6 3C                                   inc		a
  59+ E2E7 06 00                                ld		b,0
  60+ E2E9 C5 D5                                push	bc,,de
  61+ E2EB CD 1A E0                             call 	asm_l2_bank_n_select
  62+ E2EE D1 C1                                pop     bc,,de
  63+ E2F0 60                                   ld		h,b							; b now tolds target pixel for first plot
  64+ E2F1 69                                   ld		l,c  						; and c holds pixel column for plotting
  65+ E2F2 CD 9D E2                             call	l2_draw_vert_segment
  66+ E2F5 7A                                   ld		a,d
  67+ E2F6 FE 00                                cp		0
  68+ E2F8 28 10                                jr		z,.doneplotting
  69+ E2FA 3A 00 E0     .yetanotherbank:        ld		a, (varL2_BANK_SELECTED)
  70+ E2FD 3C                                   inc		a
  71+ E2FE 06 00                                ld		b,0
  72+ E300 C5 D5                                push	bc,,de
  73+ E302 CD 1A E0                             call 	asm_l2_bank_n_select
  74+ E305 D1                                   pop		de
  75+ E306 E1                                   pop		hl							; hl = bc
  76+ E307 CD 9D E2                             call	l2_draw_vert_segment		; we have now hit 192 pixels so done
  77+ E30A C9           .doneplotting:	        ret
  78+ E30B
  79+ E30B              ; ">l2_draw_vert_line_to"
  80+ E30B              ; ">bc = row col d = to position, e = color"
  81+ E30B 78           l2_draw_vert_line_to:   ld		a,b
  82+ E30C BA                                   cp		d
  83+ E30D 38 02                                jr		c, .noyswap
  84+ E30F 42           .yswap:                 ld		b,d			; Swap round row numbers so we are always incrementing
  85+ E310 57                                   ld		d,a			; now we have a top to bottom to we we can calc length from bc
  86+ E311 7A           .noyswap:               ld		a,d 		; we still may have d in a but only if it was bottom to top
  87+ E312 90                                   sub		b
  88+ E313 3C                                   inc		a			; so now its length not offset
  89+ E314 57                                   ld		d,a
  90+ E315 18 9A                                jr		l2_draw_vert_line	; we can hijack its clipping, 0 check and return logic
  91+ E317                                      ; no return needed
  92+ E317
# file closed: ./Layer2Graphics/asm_l2_plot_vertical.asm
1230  E317                  INCLUDE "./Layer2Graphics/layer2_plot_diagonal.asm"
# file opened: ./Layer2Graphics/layer2_plot_diagonal.asm
   1+ E317
   2+ E317              l2_draw_box_to:
   3+ E317              ; ">l2_draw_box_to bc=rowcol, de=torowcol a=color"
   4+ E317              ; ">NOT IMPLEMENTED YET"
   5+ E317 C9           	ret
   6+ E318
   7+ E318              ;; Note l2stepx is done via self modifying code rather than an if for speed
   8+ E318              ;; l2stepx1 and l2stepx2 are the addresses to stick the inc or dec in
   9+ E318              l2decbstep	EQU $05
  10+ E318              l2incbstep	EQU	$04
  11+ E318              l2deccstep	EQU $0D
  12+ E318              l2inccstep	EQU	$0C
  13+ E318              		; l2 deltas are signed
  14+ E318 00 00        l2deltaY	DW	0
  15+ E31A 00 00        l2deltaX	DW	0
  16+ E31C 00           l2deltaYsq	db	0
  17+ E31D 00           l2deltaXsq	db	0
  18+ E31E 00           l2deltaYn	db	0
  19+ E31F 00           l2deltaXn	db	0
  20+ E320 00           l2deltaYsqn	db	0
  21+ E321 00           l2deltaXsqn	db	0
  22+ E322 00           l2linecolor	db	0
  23+ E323 00 00        l2fraction	dw	0
  24+ E325 00 00        l2e2		dw	0
  25+ E327 00           l2way		db	0
  26+ E328 00 00        l2targetPtr	dw	0
  27+ E32A              ;; These arrays should be 192 but if we use 256 then getting array2 value is just inc h rather than indexing again.
  28+ E32A 00 00 00...  l2targetArray1 ds	256
  29+ E42A 00 00 00...  l2targetArray2 ds	256
  30+ E52A              ;; Using Bresenham Algorithm draw a diagonal line top to bottom. First we must sort of course
  31+ E52A              ;;plotLine(int x0, int y0, int x1, int y1)
  32+ E52A              ;;    dx =  abs(x1-x0);
  33+ E52A              ;;    sx = x0<x1 ? 1 : -1;
  34+ E52A              ;;    dy = -abs(y1-y0);
  35+ E52A              ;;    sy = y0<y1 ? 1 : -1;
  36+ E52A              ;;    err = dx+dy;  /* error value e_xy */
  37+ E52A              ;;    while (true)   /* loop */
  38+ E52A              ;;        plot(x0, y0);
  39+ E52A              ;;        if (x0==x1 && y0==y1) break;
  40+ E52A              ;;        e2 = 2*err;
  41+ E52A              ;;        if (e2 >= dy) /* e_xy+e_x > 0 */
  42+ E52A              ;;            err += dy;
  43+ E52A              ;;            x0 += sx;
  44+ E52A              ;;        end if
  45+ E52A              ;;        if (e2 <= dx) /* e_xy+e_y < 0 */
  46+ E52A              ;;            err += dx;
  47+ E52A              ;;            y0 += sy;
  48+ E52A              ;;        end if
  49+ E52A              ;;    end while
  50+ E52A              ; ">l2_draw_diagonal_save, bc = y0,x0 de=y1,x1,a=array nbr ESOURCE LL30 or LION"
  51+ E52A              ; ">hl will be either l2targetArray1 or 2"
  52+ E52A              ; NOTE IF WE INTERLEAVE THESE TWO TABLES WE COUDL READ BOTH X POS as a 16 bit read
  53+ E52A FE 01        l2_draw_diagonal_save:  cp		1
  54+ E52C 28 06                                jr		z,l2S_ItsArray1
  55+ E52E 21 2A E4                             ld		hl,l2targetArray2
  56+ E531 C3 37 E5                             jp		l2S_setTarget
  57+ E534 21 2A E3     l2S_ItsArray1:	        ld		hl,l2targetArray1
  58+ E537 22 28 E3     l2S_setTarget:	        ld		(l2targetPtr),hl
  59+ E53A              ; ">l2_draw_diagonal, bc = y0,x0 de=y1,x1,a=color) Thsi version performs a pre sort based on y axis"
  60+ E53A 32 22 E3                             ld		(l2linecolor),a					;save colour for later
  61+ E53D 21 00 00                             ld		hl,0                            ;
  62+ E540 22 1A E3                             ld		(l2deltaX),hl                   ;
  63+ E543 22 18 E3                             ld		(l2deltaY),hl                   ; initlaise deltas as we will only be loading 8 bit in there but workign in 16 bit later
  64+ E546 78           l2S_preSort:            ld		a,b								;
  65+ E547                                      JumpIfALTNusng	d,l2S_noYSort			; we must have Y1 < Y2 (if eqyal then verical line picked up earlier
  65+ E547 BA          >                        cp      d
  65+ E548 DA 50 E5    >                        jp		c, l2S_noYSort
  66+ E54B              l2S_SortBasedOnY:	    ldhlbc									;
  66+ E54B 60          >                        ld		h,b
  66+ E54C 69          >                        ld		l,c
  67+ E54D EB                                   ex		de,hl                           ;
  68+ E54E                                      ldbchl									; swap over bc and de using hl as an intermediate
  68+ E54E 44          >                        ld		b,h
  68+ E54F 4D          >                        ld		c,l
  69+ E550 DD 62        l2S_noYSort:		    ld		ixh,d							; ixh now holds target Y coord post sorting
  70+ E552 DD 6B                                ld		ixl,e							; ixl now holds target X coord post sorting
  71+ E554 79           l2S_setXLen:            ld		a,c                             ;
  72+ E555                                      JumpIfALTNusng e,l2S_PosXLen			; if x1 < x2 then we have a positive increment
  72+ E555 BB          >                        cp      e
  72+ E556 DA 62 E5    >                        jp		c, l2S_PosXLen
  73+ E559 79           l2S_NegXLen:            ld		a,c                             ;
  74+ E55A 93                                   sub     e                               ;
  75+ E55B 32 1A E3                             ld		(l2deltaX),a					; As x1 > x2 we do deltaX = X1 - X2
  76+ E55E 3E 0D                                ld		a,l2deccstep					; and set the value for inc dec self modifying to Dec
  77+ E560 18 07                                jr		l2S_XINCDEC
  78+ E562 7B           l2S_PosXLen:	        ld		a,e                             ;
  79+ E563 91                                   sub		c                               ;
  80+ E564 32 1A E3                             ld 		(l2deltaX),a                    ; As x1 < x2 we do deltaX = X2 - X1
  81+ E567 3E 0C                                ld		a,l2inccstep                    ; and set the value for inc dec self modifying to Inc
  82+ E569              l2S_XINCDEC:
  83+ E569 32 D5 E5     	ld		(l2S_adjustCol),a				;
  84+ E56C 32 05 E6     	ld		(l2S_adjustCol2),a				; update self modifying code for X update with inc or dec from above
  85+ E56F              l2S_setYLen
  86+ E56F 7A           	ld		a,d							 	; presorted on Y so it is now always positive
  87+ E570 90           	sub		b
  88+ E571 32 18 E3     	ld 		(l2deltaY),a					; DeltaY = Y2 - Y1
  89+ E574              l2S_setErr:									;  LD H  := (D'-E')/2    round up if +ve or down if -ve
  90+ E574              ldS_FracDYltDX:								;
  91+ E574 2A 18 E3     	ld		hl,(l2deltaY)					; Fraction = dY - dX
  92+ E577 ED 5B 1A E3  	ld		de,(l2deltaX)
  93+ E57B              	ClearCarryFlag
  93+ E57B B7          >                        or a
  94+ E57C ED 52        	sbc		hl,de							; sbc does not have an SBC IY so need to do this in HL
  95+ E57E EB           	ex		de,hl
  96+ E57F FD 62        	ld		iyh,d							; we will use IY reg for fractions
  97+ E581 FD 6B        	ld		iyl,e
  98+ E583 F2 A8 E5     	jp		p,l2S_fracIsPositive
  99+ E586              l2S_fracIsNegative:
 100+ E586              	NegIY
 100+ E586 AF          >                    xor a
 100+ E587 FD 95       >                    sub iyl
 100+ E589 FD 6F       >                    ld iyl,a
 100+ E58B 9F          >                    sbc a,a
 100+ E58C FD 94       >                    sub iyh
 100+ E58E FD 67       >                    ld iyh,a
 101+ E590              	ShiftIYRight1
 101+ E590 FD 7C       >			   ld 	a,iyh
 101+ E592 CB 3F       >			   srl 	a
 101+ E594 FD 67       >			   ld	iyh,a
 101+ E596 FD 7D       >			   ld 	a,iyl
 101+ E598 1F          >			   rra
 101+ E599 FD 6F       >			   ld	iyl,a
 102+ E59B              	NegIY
 102+ E59B AF          >                    xor a
 102+ E59C FD 95       >                    sub iyl
 102+ E59E FD 6F       >                    ld iyl,a
 102+ E5A0 9F          >                    sbc a,a
 102+ E5A1 FD 94       >                    sub iyh
 102+ E5A3 FD 67       >                    ld iyh,a
 103+ E5A5 C3 B3 E5     	jp		l2S_SkipCalcInc					; so we have a negative frac
 104+ E5A8              l2S_fracIsPositive:
 105+ E5A8              	ShiftIYRight1
 105+ E5A8 FD 7C       >			   ld 	a,iyh
 105+ E5AA CB 3F       >			   srl 	a
 105+ E5AC FD 67       >			   ld	iyh,a
 105+ E5AE FD 7D       >			   ld 	a,iyl
 105+ E5B0 1F          >			   rra
 105+ E5B1 FD 6F       >			   ld	iyl,a
 106+ E5B3              l2S_SkipCalcInc:
 107+ E5B3              l2S_Loop:									; As we loop, bc = to plot current XY
 108+ E5B3 2A 28 E3     	ld		hl,(l2targetPtr)				; Insert into respective array
 109+ E5B6 78           	ld		a,b
 110+ E5B7 ED 31        	add		hl,a
 111+ E5B9 71           	ld		(hl),c
 112+ E5BA              l2S_CheckIfEnd:
 113+ E5BA DD 7C        	ld		a,ixh
 114+ E5BC              	JumpIfAGTENusng	  b,l2S_CheckXPos		; if Y1 < Y2 then continue regardless, when it hits Y2 then we must check X1 and X2
 114+ E5BC B8          >                        cp     b
 114+ E5BD D2 C3 E5    >                        jp		nc,l2S_CheckXPos
 115+ E5C0 C3 C7 E5     	jp		l2S_Continue
 116+ E5C3              l2S_CheckXPos:
 117+ E5C3 79           	ld		a,c
 118+ E5C4              	ReturnIfAGTENusng ixl					; if X1 has reached or exceeded X2 then we are done
 118+ E5C4 DD BD       >                        cp    ixl
 118+ E5C6 D0          >                        ret	 nc
 119+ E5C7              l2S_Continue:
 120+ E5C7              l2S_HNegative:
 121+ E5C7 FD 7C        	ld		a,iyh
 122+ E5C9 CB 7F        	bit		7,a								; if its negative then we need to deal with delta Y, there is no bit n,iyh instrunction
 123+ E5CB 28 0B        	jr		z,l2S_ErrNotNegative			;
 124+ E5CD              l2S_ErrNegative:								; if its a negative error update X
 125+ E5CD 3A 18 E3     	ld		a,(l2deltaY)
 126+ E5D0 16 00        	ld		d,0
 127+ E5D2 5F           	ld		e,a
 128+ E5D3 FD 19        	add		iy,de							; add deltaY(unsinged) to l2fraction
 129+ E5D5              l2S_adjustCol:
 130+ E5D5 00           	nop										; this is our inc/dec of X
 131+ E5D6 18 DB        	jr		l2S_Loop							; repeat loop
 132+ E5D8              l2S_ErrNotNegative:
 133+ E5D8 FD 7C        	ld		a,iyh
 134+ E5DA FD B5        	or		iyl
 135+ E5DC              	JumpIfAIsZero l2S_ErrZero					; if there is no error then goto zeroerror
 135+ E5DC A7          >                        and a   ; cp 0 - changed to and a for optimisation but affects other flags
 135+ E5DD CA F6 E5    >                        jp	z, l2S_ErrZero
 136+ E5E0              l2S_ErrPositive:								; if its a positive error then we update Y
 137+ E5E0              	lddeiy
 137+ E5E0 FD 54       >                        ld		d,iyh
 137+ E5E2 FD 5D       >                        ld		e,iyl
 138+ E5E4 EB           	ex		de,hl
 139+ E5E5 16 00        	ld		d,0
 140+ E5E7 3A 1A E3     	ld		a,(l2deltaX)
 141+ E5EA 5F           	ld		e,a
 142+ E5EB              	ClearCarryFlag
 142+ E5EB B7          >                        or a
 143+ E5EC ED 52        	sbc		hl,de
 144+ E5EE EB           	ex		de,hl
 145+ E5EF              	ldiyde
 145+ E5EF FD 62       >                        ld		iyh,d
 145+ E5F1 FD 6B       >                        ld		iyl,e
 146+ E5F3              l2S_adjustRow:									; move Y down by one
 147+ E5F3 04           	inc		b
 148+ E5F4 18 BD        	jr		l2S_Loop
 149+ E5F6              l2S_ErrZero:
 150+ E5F6 2A 1A E3     	ld		hl,(l2deltaX)
 151+ E5F9 EB           	ex		de,hl
 152+ E5FA 2A 18 E3     	ld		hl,(l2deltaY)
 153+ E5FD              	ClearCarryFlag
 153+ E5FD B7          >                        or a
 154+ E5FE ED 52        	sbc		hl,de
 155+ E600 EB           	ex		de,hl
 156+ E601              	ldiyde
 156+ E601 FD 62       >                        ld		iyh,d
 156+ E603 FD 6B       >                        ld		iyl,e
 157+ E605              l2S_adjustCol2:
 158+ E605 00           	nop										; update X and Y
 159+ E606 04           	inc		b
 160+ E607 18 AA        	jr		l2S_Loop
 161+ E609
 162+ E609              ; ">l2_draw_diagonal, bc = y0,x0 de=y1,x1,a=color) Thsi version performs a pre sort based on y axis"
 163+ E609 32 22 E3     l2_draw_diagonal:       ld		(l2linecolor),a					;save colour for later
 164+ E60C 21 00 00                             ld		hl,0                            ;
 165+ E60F 22 1A E3                             ld		(l2deltaX),hl                   ;
 166+ E612 22 18 E3                             ld		(l2deltaY),hl                   ; initlaise deltas as we will only be loading 8 bit in there but workign in 16 bit later
 167+ E615 78           l2D_preSort:            ld		a,b								;
 168+ E616                                      JumpIfALTNusng	d,l2D_noYSort			; we must have Y1 < Y2 (if equal then verical line picked up earlier
 168+ E616 BA          >                        cp      d
 168+ E617 DA 1F E6    >                        jp		c, l2D_noYSort
 169+ E61A              l2D_SortBasedOnY:	    ldhlbc									;
 169+ E61A 60          >                        ld		h,b
 169+ E61B 69          >                        ld		l,c
 170+ E61C EB                                   ex		de,hl                           ;
 171+ E61D                                      ldbchl									; swap over bc and de using hl as an intermediate
 171+ E61D 44          >                        ld		b,h
 171+ E61E 4D          >                        ld		c,l
 172+ E61F DD 62        l2D_noYSort:		    ld		ixh,d							; ixh now holds target Y coord post sorting
 173+ E621 DD 6B                                ld		ixl,e							; ixl now holds target X coord post sorting
 174+ E623 79           l2D_setXLen:            ld		a,c                             ;
 175+ E624                                      JumpIfALTNusng e,l2D_PosXLen			; if x1 < x2 then we have a positive increment
 175+ E624 BB          >                        cp      e
 175+ E625 DA 31 E6    >                        jp		c, l2D_PosXLen
 176+ E628 79           l2D_NegXLen:            ld		a,c                             ;
 177+ E629 93                                   sub     e                               ;
 178+ E62A 32 1A E3                             ld		(l2deltaX),a					; As x1 > x2 we do deltaX = X1 - X2
 179+ E62D 3E 0D                                ld		a,l2deccstep					; and set the value for inc dec self modifying to Dec
 180+ E62F 18 07                                jr		l2D_XINCDEC
 181+ E631 7B           l2D_PosXLen:	        ld		a,e                             ;
 182+ E632 91                                   sub		c                               ;
 183+ E633 32 1A E3                             ld 		(l2deltaX),a                    ; As x1 < x2 we do deltaX = X2 - X1
 184+ E636 3E 0C                                ld		a,l2inccstep                    ; and set the value for inc dec self modifying to Inc
 185+ E638 32 A7 E6     l2D_XINCDEC:	        ld		(l2D_adjustCol),a				;
 186+ E63B 32 D7 E6                             ld		(l2D_adjustCol2),a				; update self modifying code for X update with inc or dec from above
 187+ E63E 7A           l2D_setYLen				ld		a,d							 	; presorted on Y so it is now always positive
 188+ E63F 90                                   sub		b
 189+ E640 32 18 E3                             ld 		(l2deltaY),a					; DeltaY = Y2 - Y1
 190+ E643              l2D_setErr:									;  LD H  := (D'-E')/2    round up if +ve or down if -ve
 191+ E643 2A 18 E3     ldD_FracDYltDX:			ld		hl,(l2deltaY)					; Fraction = dY - dX
 192+ E646 ED 5B 1A E3                          ld		de,(l2deltaX)
 193+ E64A                                      ClearCarryFlag
 193+ E64A B7          >                        or a
 194+ E64B ED 52                                sbc		hl,de							; sbc does not have an SBC IY so need to do this in HL
 195+ E64D EB                                   ex		de,hl
 196+ E64E FD 62                                ld		iyh,d							; we will use IY reg for fractions
 197+ E650 FD 6B                                ld		iyl,e
 198+ E652 F2 77 E6                             jp		p,l2D_fracIsPositive
 199+ E655              l2D_fracIsNegative:     NegIY
 199+ E655 AF          >                    xor a
 199+ E656 FD 95       >                    sub iyl
 199+ E658 FD 6F       >                    ld iyl,a
 199+ E65A 9F          >                    sbc a,a
 199+ E65B FD 94       >                    sub iyh
 199+ E65D FD 67       >                    ld iyh,a
 200+ E65F                                      ShiftIYRight1
 200+ E65F FD 7C       >			   ld 	a,iyh
 200+ E661 CB 3F       >			   srl 	a
 200+ E663 FD 67       >			   ld	iyh,a
 200+ E665 FD 7D       >			   ld 	a,iyl
 200+ E667 1F          >			   rra
 200+ E668 FD 6F       >			   ld	iyl,a
 201+ E66A                                      NegIY
 201+ E66A AF          >                    xor a
 201+ E66B FD 95       >                    sub iyl
 201+ E66D FD 6F       >                    ld iyl,a
 201+ E66F 9F          >                    sbc a,a
 201+ E670 FD 94       >                    sub iyh
 201+ E672 FD 67       >                    ld iyh,a
 202+ E674 C3 82 E6                             jp		l2D_SkipCalcInc					; so we have a negative frac
 203+ E677              l2D_fracIsPositive:     ShiftIYRight1
 203+ E677 FD 7C       >			   ld 	a,iyh
 203+ E679 CB 3F       >			   srl 	a
 203+ E67B FD 67       >			   ld	iyh,a
 203+ E67D FD 7D       >			   ld 	a,iyl
 203+ E67F 1F          >			   rra
 203+ E680 FD 6F       >			   ld	iyl,a
 204+ E682              l2D_SkipCalcInc:
 205+ E682 C5 D5        l2D_Loop:				push	bc,,de                 			; l2DeltaY and l2DeltaX are set
 206+ E684 3A 22 E3                             ld		a,(l2linecolor)     			;
 207+ E687 CD FF E0                             call	l2_plot_pixel       			; Plot Pixel
 208+ E68A D1 C1                                pop     bc,,de
 209+ E68C DD 7C        l2D_CheckIfEnd:	        ld		a,ixh
 210+ E68E                                      JumpIfAGTENusng	  b,l2D_CheckXPos		; if Y1 < Y2 then continue regardless, when it hits Y2 then we must check X1 and X2
 210+ E68E B8          >                        cp     b
 210+ E68F D2 95 E6    >                        jp		nc,l2D_CheckXPos
 211+ E692 C3 99 E6                             jp		l2D_Continue
 212+ E695 79           l2D_CheckXPos:          ld		a,c
 213+ E696                                      ReturnIfAEqNusng ixl					; if X1 has reached or exceeded X2 then we are done
 213+ E696 DD BD       >                        cp      ixl
 213+ E698 C8          >                        ret     z
 214+ E699              l2D_Continue:
 215+ E699 FD 7C        l2D_HNegative:			ld		a,iyh
 216+ E69B CB 7F                                bit		7,a								; if its negative then we need to deal with delta Y, there is no bit n,iyh instrunction
 217+ E69D 28 0B                                jr		z,l2D_ErrNotNegative			;
 218+ E69F 3A 18 E3     l2D_ErrNegative:		ld		a,(l2deltaY)
 219+ E6A2 16 00                                ld		d,0
 220+ E6A4 5F                                   ld		e,a
 221+ E6A5 FD 19                                add		iy,de							; add deltaY(unsinged) to l2fraction
 222+ E6A7 00           l2D_adjustCol:          nop										; this is our inc/dec of X
 223+ E6A8 18 D8                                jr		l2D_Loop							; repeat loop
 224+ E6AA FD 7C        l2D_ErrNotNegative:     ld		a,iyh
 225+ E6AC FD B5                                or		iyl
 226+ E6AE                                      JumpIfAIsZero l2D_ErrZero					; if there is no error then goto zeroerror
 226+ E6AE A7          >                        and a   ; cp 0 - changed to and a for optimisation but affects other flags
 226+ E6AF CA C8 E6    >                        jp	z, l2D_ErrZero
 227+ E6B2              l2D_ErrPositive:		lddeiy
 227+ E6B2 FD 54       >                        ld		d,iyh
 227+ E6B4 FD 5D       >                        ld		e,iyl
 228+ E6B6 EB                                   ex		de,hl
 229+ E6B7 16 00                                ld		d,0
 230+ E6B9 3A 1A E3                             ld		a,(l2deltaX)
 231+ E6BC 5F                                   ld		e,a
 232+ E6BD                                      ClearCarryFlag
 232+ E6BD B7          >                        or a
 233+ E6BE ED 52                                sbc		hl,de
 234+ E6C0 EB                                   ex		de,hl
 235+ E6C1                                      ldiyde
 235+ E6C1 FD 62       >                        ld		iyh,d
 235+ E6C3 FD 6B       >                        ld		iyl,e
 236+ E6C5 04           l2D_adjustRow:			inc		b
 237+ E6C6 18 BA                                jr		l2D_Loop
 238+ E6C8 2A 1A E3     l2D_ErrZero:            ld		hl,(l2deltaX)
 239+ E6CB EB                                   ex		de,hl
 240+ E6CC 2A 18 E3                             ld		hl,(l2deltaY)
 241+ E6CF                                      ClearCarryFlag
 241+ E6CF B7          >                        or a
 242+ E6D0 ED 52                                sbc		hl,de
 243+ E6D2 EB                                   ex		de,hl
 244+ E6D3                                      ldiyde
 244+ E6D3 FD 62       >                        ld		iyh,d
 244+ E6D5 FD 6B       >                        ld		iyl,e
 245+ E6D7 00           l2D_adjustCol2:         nop										; update X and Y
 246+ E6D8 04                                   inc		b
 247+ E6D9 18 A7                                jr		l2D_Loop
 248+ E6DB              ;----------------------------------------------------------------------------------------------------------------------------------
 249+ E6DB
 250+ E6DB
 251+ E6DB
 252+ E6DB
 253+ E6DB              ;Loin:				; BBC version of line draw
 254+ E6DB              ;; ">l2_draw_diagonal, bc = y0,x0 de=y1,x1,a=color)"
 255+ E6DB              ;	ld		(l2linecolor),a					; save colour as a reg gets used alot, coudl move this into interrupt flag and disable interrups
 256+ E6DB              ;	ld		ixh,0							; ixh = s
 257+ E6DB              ;	ld		iyh,0							; iyh = swap
 258+ E6DB              ;	ld		l,0								; l will hold delta sign flags
 259+ E6DB              ;LoinCalcDeltaX:
 260+ E6DB              ;	ld		a,e
 261+ E6DB              ;	sub		c								; a = deltaX
 262+ E6DB              ;	JumpIfPositive LoinPosDx
 263+ E6DB              ;LoinNegDx:
 264+ E6DB              ;	neg										; carry flag will indicate deltaX was negative
 265+ E6DB              ;	ld		l,$80							; set bit 7 of l for negative
 266+ E6DB              ;LoinPosDx:
 267+ E6DB              ;	ld		ixl,a							; ixl = varP = deltaX
 268+ E6DB              ;LoinCalcDeltaY:
 269+ E6DB              ;	ld		a,d
 270+ E6DB              ;	sub		b								; a= deltaY
 271+ E6DB              ;	JumpIfPositive LoinPosDy
 272+ E6DB              ;LoinNegDy:
 273+ E6DB              ;	neg
 274+ E6DB              ;	set		6,l								; set bit 6 of l for negative deltaY
 275+ E6DB              ;LoinPosDy:
 276+ E6DB              ;	ld		iyl,a							; iyl = varQ = deltaY
 277+ E6DB              ;	JumpIfAGTENusng ixl, LoinSTPy			; if deltaY >= DeltaX then step along Y
 278+ E6DB              ;LoinSTPx:									; step along X
 279+ E6DB              ;	JumpOnBitClear l,7						; if l flags were clear then X2 < X2
 280+ E6DB              ;LoinSTPxSwapCoords:
 281+ E6DB              ;	dec		iyh								; swap flag now becomes FF
 282+ E6DB              ;	ld		a,l								; save l flags
 283+ E6DB              ;	ex		de,hl							; save de to hl
 284+ E6DB              ;	lddebc									; Point2 = point1
 285+ E6DB              ;	ldbchl									; Point1 = point2 that was saved
 286+ E6DB              ;	ld		l,a								; get back l flags
 287+ E6DB              ;LoinSTPxCorrectOrder:
 288+ E6DB              ;	l2_point_pixel_y_safe					; call plot pixel preseving bc hl
 289+ E6DB              ;	ld		a,iyl							; get delta Y back
 290+ E6DB              ;	ld		iy1,$FE							; roll counter
 291+ E6DB              ;LionSTPxRollQ:
 292+ E6DB              ;	sla		a								; highest bit of delta-Y
 293+ E6DB              ;	jp		c,LoinSTPxSteep
 294+ E6DB              ;	cp		ixl								; compare with DeltaX
 295+ E6DB              ;	jp		cs,LoinSTPxShallow
 296+ E6DB              ;LoinSTPxSteep:								;; LI4
 297+ E6DB              ;	sbc		a,ixl							; deltaYwork -= (deltaX+1)
 298+ E6DB              ;	scf										; force carry flag set
 299+ E6DB              ;LoinSTPxShallow:							;; LI5
 300+ E6DB              ;	rl		iyl								; rotate iyl which started as FE
 301+ E6DB              ;	jp		c,LionSTPxRollQ					; so we are doing a 6 bit loop
 302+ E6DB              ;	inc		ihl								; DeltaX += 1
 303+ E6DB              ;LoinSTPxYDirection:							; change this to self modifying code
 304+ E6DB              ;	ld		a,d
 305+ E6DB              ;	JumpIfAGTEn	b,LionDOWN:
 306+ E6DB              ;	ld		a,iyh							; swap flag
 307+ E6DB              ;	JumpIfANotZero	X1Inc  					; if swap flag was not set then no need to update R
 308+ E6DB              ;LoinSTPxX1Dec:
 309+ E6DB              ;	dec		c								; move left 1 pixel as we sawped
 310+ E6DB              ;LoinSTPxXCounter:							;; LIL2
 311+ E6DB              ;	sub		b
 312+ E6DB              ;	if
 313+ E6DB              ;
 314+ E6DB              ;85 82                   STA &82	   \ R	\ mask byte
 315+ E6DB              ;A5 81                   LDA &81	   \ Q	\ delta-Y
 316+ E6DB              ;A2 FE                   LDX #&FE	\ roll counter
 317+ E6DB              ;86 81                   STX &81		\ Q
 318+ E6DB              ;.LIL1	\ roll Q
 319+ E6DB              ;0A                      ASL A		\ highest bit of delta-Y
 320+ E6DB              ;B0 04                   BCS LI4		\ steep
 321+ E6DB              ;C5 1B                   CMP &1B	   \ P	\ delta-X
 322+ E6DB              ;90 03                   BCC LI5		\ shallow
 323+ E6DB              ;.LI4	\ steep
 324+ E6DB              ;E5 1B                   SBC &1B		\ P
 325+ E6DB              ;38                      SEC
 326+ E6DB              ;.LI5	\ shallow
 327+ E6DB              ;26 81                   ROL &81	   \ Q	\ #&FE
 328+ E6DB              ;B0 F2                   BCS LIL1 	\ loop Q, end with some low bits in Q
 329+ E6DB              ;A6 1B                   LDX &1B		\ P
 330+ E6DB              ;E8                      INX 		\ Xreg is width
 331+ E6DB              ;A5 37                   LDA &37		\ Y2
 332+ E6DB              ;E5 35                   SBC &35		\ Y1
 333+ E6DB              ;B0 2C                   BCS DOWN	\ draw line to the right and down
 334+ E6DB              ;A5 90                   LDA &90		\ SWAP
 335+ E6DB              ;D0 07                   BNE LI6		\ else Xreg was correct after all, no need to update R
 336+ E6DB              ;CA                      DEX
 337+ E6DB              ;.LIL2	\ counter X width
 338+ E6DB              ;A5 82                   LDA &82	   \ R	\ mask byte
 339+ E6DB              ;51 07                   EOR (&07),Y	\ (SC),Y
 340+ E6DB              ;91 07                   STA (&07),Y	\ (SC),Y
 341+ E6DB              ;.LI6	\ Xreg correct
 342+ E6DB              ;46 82                   LSR &82	   \ R	\ mask byte
 343+ E6DB              ;90 08                   BCC LI7   	\ else moving to next column to right. Bring carry in back
 344+ E6DB              ;66 82                   ROR &82		\ R
 345+ E6DB              ;A5 07                   LDA &07		\ SC
 346+ E6DB              ;69 08                   ADC #8		\ next column
 347+ E6DB              ;85 07                   STA &07		\ SC
 348+ E6DB              ;.LI7	\ S += Q. this is like an overflow monitor to update Y
 349+ E6DB              ;A5 83                   LDA &83		\ S
 350+ E6DB              ;65 81                   ADC &81	   \ Q	\ some low bits
 351+ E6DB              ;85 83                   STA &83		\ S
 352+ E6DB              ;90 07                   BCC LIC2	\ skip Y adjustment
 353+ E6DB              ;88                      DEY
 354+ E6DB              ;10 04                   BPL LIC2	\ skip Y adjustment
 355+ E6DB              ;C6 08                   DEC &08		\ SC+1
 356+ E6DB              ;A0 07                   LDY #7
 357+ E6DB              ;.LIC2	\ skip Y adjustment
 358+ E6DB              ;CA                      DEX
 359+ E6DB              ;D0 DC                   BNE LIL2	\ loop X width
 360+ E6DB              ;A4 85                   LDY &85	 \ YSAV \ restore Yreg
 361+ E6DB              ;60                      RTS
 362+ E6DB              ;
 363+ E6DB              ;.DOWN	\ Line is going to the right and down
 364+ E6DB              ;A5 90                   LDA &90		\ SWAP
 365+ E6DB              ;F0 07                   BEQ LI9		\ no swap
 366+ E6DB              ;CA                      DEX
 367+ E6DB              ;.LIL3	\ counter X width
 368+ E6DB              ;A5 82                   LDA &82	    \ R \ mask byte
 369+ E6DB              ;51 07                   EOR (&07),Y	\ (SC),Y
 370+ E6DB              ;91 07                   STA (&07),Y	\ (SC),Y
 371+ E6DB              ;.LI9	\ no swap
 372+ E6DB              ;46 82                   LSR &82		\ R
 373+ E6DB              ;90 08                   BCC LI10	\ still in correct column, hop
 374+ E6DB              ;66 82                   ROR &82		\ R
 375+ E6DB              ;A5 07                   LDA &07		\ SC
 376+ E6DB              ;69 08                   ADC #8		\ next column
 377+ E6DB              ;85 07                   STA &07		\ SC
 378+ E6DB              ;.LI10	\ this is like an overflow monitor to update Y
 379+ E6DB              ;A5 83                   LDA &83		\ S
 380+ E6DB              ;65 81                   ADC &81		\ Q
 381+ E6DB              ;85 83                   STA &83		\ S
 382+ E6DB              ;90 09                   BCC LIC3	\ skip Y adjustment
 383+ E6DB              ;C8                      INY
 384+ E6DB              ;C0 08                   CPY #8
 385+ E6DB              ;D0 04                   BNE LIC3	\ have not reached bottom byte of char, hop
 386+ E6DB              ;E6 08                   INC &08		\ SC+1
 387+ E6DB              ;A0 00                   LDY #0
 388+ E6DB              ;.LIC3	\ skipped Y adjustment
 389+ E6DB              ;CA                      DEX
 390+ E6DB              ;D0 DA                   BNE LIL3	\ loop X width
 391+ E6DB              ;A4 85                   LDY &85	 \ YSAV \ restore Yreg
 392+ E6DB              ;60                      RTS
 393+ E6DB              ;
 394+ E6DB              ;.STPY	\ -> &1797 \ Step along y for line, goes down and to right
 395+ E6DB              ;A4 35                   LDY &35		\ Y1
 396+ E6DB              ;98                      TYA
 397+ E6DB              ;A6 34                   LDX &34		\ X1
 398+ E6DB              ;C4 37                   CPY &37		\ Y2
 399+ E6DB              ;B0 10                   BCS LI15	\ skip swap if Y1 >= Y2
 400+ E6DB              ;C6 90                   DEC &90		\ SWAP
 401+ E6DB              ;A5 36                   LDA &36		\ X2
 402+ E6DB              ;85 34                   STA &34		\ X1
 403+ E6DB              ;86 36                   STX &36		\ X2
 404+ E6DB              ;AA                      TAX
 405+ E6DB              ;A5 37                   LDA &37		\ Y2
 406+ E6DB              ;85 35                   STA &35		\ Y1
 407+ E6DB              ;84 37                   STY &37		\ Y2
 408+ E6DB              ;A8                      TAY
 409+ E6DB              ;.LI15	\ Y1 Y2 order is now correct
 410+ E6DB              ;4A                      LSR A
 411+ E6DB              ;4A                      LSR A
 412+ E6DB              ;4A                      LSR A
 413+ E6DB              ;09 60                   ORA #&60
 414+ E6DB              ;85 08                   STA &08	 \ SC+1	\ screen hi
 415+ E6DB              ;8A                      TXA 		\ X1
 416+ E6DB              ;29 F8                   AND #&F8
 417+ E6DB              ;85 07                   STA &07	  \ SC	\ screen lo
 418+ E6DB              ;8A                      TXA
 419+ E6DB              ;29 07                   AND #7		\ mask index
 420+ E6DB              ;AA                      TAX
 421+ E6DB              ;BD AF 16                LDA &16AF,X \ TWOS,X \ Mode4 single pixel
 422+ E6DB              ;85 82                   STA &82	    \ R	\ mask
 423+ E6DB              ;A5 35                   LDA &35		\ Y1
 424+ E6DB              ;29 07                   AND #7
 425+ E6DB              ;A8                      TAY
 426+ E6DB              ;A5 1B                   LDA &1B	    \ P	\ delta-X
 427+ E6DB              ;A2 01                   LDX #1		\ roll counter
 428+ E6DB              ;86 1B                   STX &1B	    	\ P
 429+ E6DB              ;.LIL4	\ roll P
 430+ E6DB              ;0A                      ASL A
 431+ E6DB              ;B0 04                   BCS LI13	\ do subtraction
 432+ E6DB              ;C5 81                   CMP &81	    \ Q	\ delta-Y
 433+ E6DB              ;90 03                   BCC LI14	\ less than Q
 434+ E6DB              ;.LI13	\ do subtraction
 435+ E6DB              ;E5 81                   SBC &81		\ Q
 436+ E6DB              ;38                      SEC
 437+ E6DB              ;.LI14	\ less than Q
 438+ E6DB              ;26 1B                   ROL &1B		\ P
 439+ E6DB              ;90 F2                   BCC LIL4	\ loop P, end with some low bits in P
 440+ E6DB              ;A6 81                   LDX &81		\ Q
 441+ E6DB              ;E8                      INX 		\ adjust height
 442+ E6DB              ;A5 36                   LDA &36		\ X2
 443+ E6DB              ;E5 34                   SBC &34		\ X1
 444+ E6DB              ;90 2D                   BCC LFT		\ if C cleared then line moving to the left - hop down
 445+ E6DB              ;18                      CLC
 446+ E6DB              ;A5 90                   LDA &90		\ SWAP
 447+ E6DB              ;F0 07                   BEQ LI17 	\ skip first point
 448+ E6DB              ;CA                      DEX
 449+ E6DB              ;.LIL5	\ skipped first point, counter X
 450+ E6DB              ;A5 82                   LDA &82	    \ R \ mask byte
 451+ E6DB              ;51 07                   EOR (&07),Y	\ (SC),Y
 452+ E6DB              ;91 07                   STA (&07),Y	\ (SC),Y
 453+ E6DB              ;.LI17	\ skipped first point
 454+ E6DB              ;88                      DEY
 455+ E6DB              ;10 04                   BPL LI16	\ skip hi adjust
 456+ E6DB              ;C6 08                   DEC &08		\ SC+1
 457+ E6DB              ;A0 07                   LDY #7		\ new char
 458+ E6DB              ;	.LI16	\ skipped hi adjust
 459+ E6DB              ;A5 83                   LDA &83		\ S
 460+ E6DB              ;65 1B                   ADC &1B		\ P
 461+ E6DB              ;85 83                   STA &83		\ S
 462+ E6DB              ;90 0C                   BCC LIC5	\ skip, still in same column
 463+ E6DB              ;46 82                   LSR &82	  \ R	\ mask
 464+ E6DB              ;90 08                   BCC LIC5  	\ no mask bit hop
 465+ E6DB              ;66 82                   ROR &82   \ R	\ else moved over to next column, reset mask
 466+ E6DB              ;A5 07                   LDA &07	  \ SC  \ screen lo
 467+ E6DB              ;69 08                   ADC #8		\ next char below
 468+ E6DB              ;85 07                   STA &07		\ SC
 469+ E6DB              ;.LIC5	\ same column
 470+ E6DB              ;CA                      DEX
 471+ E6DB              ;D0 DC                   BNE LIL5	\ loop X height
 472+ E6DB              ;A4 85                   LDY &85	 \ YSAV	\ restore Yreg
 473+ E6DB              ;60                      RTS
 474+ E6DB              ;
 475+ E6DB              ;.LFT	\ going left
 476+ E6DB              ;A5 90                   LDA &90		\ SWAP
 477+ E6DB              ;F0 07                   BEQ LI18	\ skip first point
 478+ E6DB              ;CA                      DEX 		\ reduce height
 479+ E6DB              ;.LIL6	\ counter X height
 480+ E6DB              ;A5 82                   LDA &82	   \ R	\ mask byte
 481+ E6DB              ;51 07                   EOR (&07),Y	\ (SC),Y
 482+ E6DB              ;91 07                   STA (&07),Y	\ (SC),Y
 483+ E6DB              ;.LI18
 484+ E6DB              ;88                      DEY
 485+ E6DB              ;10 04                   BPL LI19	\ skip hi adjust
 486+ E6DB              ;C6 08                   DEC &08		\ SC+1
 487+ E6DB              ;A0 07                   LDY #7		\ rest char row
 488+ E6DB              ;.LI19	\ skipped hi adjust
 489+ E6DB              ;A5 83                   LDA &83		\ S
 490+ E6DB              ;65 1B                   ADC &1B	    \ P \ some low bits
 491+ E6DB              ;85 83                   STA &83		\ S
 492+ E6DB              ;90 0D                   BCC LIC6	\ no overflow
 493+ E6DB              ;06 82                   ASL &82	    \ R \ else move byte mask to the left
 494+ E6DB              ;90 09                   BCC LIC6	\ no overflow
 495+ E6DB              ;26 82                   ROL &82		\ R
 496+ E6DB              ;A5 07                   LDA &07		\ SC
 497+ E6DB              ;E9 07                   SBC #7		\ down 1 char
 498+ E6DB              ;85 07                   STA &07		\ SC
 499+ E6DB              ;18                      CLC
 500+ E6DB              ;.LIC6	\ no overflow
 501+ E6DB              ;CA                      DEX 		\ height
 502+ E6DB              ;D0 DB                   BNE LIL6	\ loop X
 503+ E6DB              ;A4 85                   LDY &85	 \ YSAV	\ restore Yreg
 504+ E6DB              ;.HL6
 505+ E6DB              ;60                      RTS 		\ end Line drawing
 506+ E6DB
 507+ E6DB
 508+ E6DB              ;;l2_draw_diagonalopt:
 509+ E6DB              	; ">TODO l2_draw_diagonalopt fast horz vert optmisation"
 510+ E6DB              ;;	push	af
 511+ E6DB              ;;	ld		a,b
 512+ E6DB              ;;	cp		d
 513+ E6DB              ;;	jr		z,.RegularDiagnonal
 514+ E6DB              ;;.CheckHorz:
 515+ E6DB              ;;	ld		a,c
 516+ E6DB              ;;	cp		e
 517+ E6DB              ;;	jr		z,.horizontalLine
 518+ E6DB              ;;.RegularDiagnonal:
 519+ E6DB              ;;	pop		af
 520+ E6DB              ;;	call diag
 521+ E6DB
 522+ E6DB
 523+ E6DB              ;;l2_signed_mul2a:
 524+ E6DB              ;;; ">l2_signed_mul2a - Signed a = a * 2 using shift)"
 525+ E6DB              ;;	TEST	$80
 526+ E6DB              ;;	jr		nz, .negativecalc
 527+ E6DB              ;;.positivecalc:
 528+ E6DB              ;;	ccf
 529+ E6DB              ;;	rla
 530+ E6DB              ;;	ret
 531+ E6DB              ;;.negativecalc:
 532+ E6DB              ;;	neg
 533+ E6DB              ;;	ccf
 534+ E6DB              ;;	rla
 535+ E6DB              ;;	neg
 536+ E6DB              ;;	ret
 537+ E6DB              ;;
 538+ E6DB              ;;l2_signed_mul2atohl:
 539+ E6DB              ;;; ">l2_signed_mul2ahl - Signed hl = a * 2 using shift)"
 540+ E6DB              ;;	TEST	$80
 541+ E6DB              ;;	jr		nz, .negativecalc
 542+ E6DB              ;;.positivecalc:
 543+ E6DB              ;;	ld		hl,0
 544+ E6DB              ;;	ld		l,a
 545+ E6DB              ;;	add		hl,a
 546+ E6DB              ;;	ret
 547+ E6DB              ;;.negativecalc:
 548+ E6DB              ;;	neg
 549+ E6DB              ;;	ld		hl,0
 550+ E6DB              ;;	ld		l,a
 551+ E6DB              ;;	neghl
 552+ E6DB              ;;	ret
 553+ E6DB              ;;
 554+ E6DB              ;;l2_e2fractionby2:
 555+ E6DB              ;;	ld 		hl,(l2fraction)
 556+ E6DB              ;;	push	de
 557+ E6DB              ;;	ld		d,h
 558+ E6DB              ;;	ld		e,l
 559+ E6DB              ;;	add		hl,de
 560+ E6DB              ;;	pop		de
 561+ E6DB              ;;	ld		(l2e2),hl
 562+ E6DB              ;;	ret
 563+ E6DB
 564+ E6DB
 565+ E6DB
 566+ E6DB
 567+ E6DB
 568+ E6DB              ;;//	ld		(l2linecolor),a   			; could do an ex but it will be needed multiple times between many uses of a reg
 569+ E6DB              ;;//.catchLoop:
 570+ E6DB              ;;//	jp .catchLoop
 571+ E6DB              ;;//.continue:
 572+ E6DB              ;;//    ld      A,D
 573+ E6DB              ;;//    sub     H
 574+ E6DB              ;;//    jr      NC,.DXpositive    ;delta_x > 0
 575+ E6DB              ;;//.DXNegative:
 576+ E6DB              ;;//    neg
 577+ E6DB              ;;//.DXPositive:
 578+ E6DB              ;;//    ld      B,A              ;B <- |delta_x|
 579+ E6DB              ;;//    ld      A,E
 580+ E6DB              ;;//    sub     L
 581+ E6DB              ;;//    jr      NC,.DYpositive    ;delta_y > 0
 582+ E6DB              ;;//.DYNegative:
 583+ E6DB              ;;//    neg
 584+ E6DB              ;;//.DYPositive:
 585+ E6DB              ;;//    sub     B               ;|delta_y|
 586+ E6DB              ;;//	push	af
 587+ E6DB              ;;//	jr		c,.DeltaX
 588+ E6DB              ;;//.DeltaY
 589+ E6DB              ;;//	ld      A,H             			;if |delta_x| < |delta_y| then
 590+ E6DB              ;;//    ld      H,L             			;then values x and y are swapped
 591+ E6DB              ;;//    ld      L,A             			;so the loop will always be performed on the
 592+ E6DB              ;;//    ld      A,D             			;x value. A flag must be set to
 593+ E6DB              ;;//    ld      D,E             			;remind that data must be drawn (y,x)
 594+ E6DB              ;;//    ld      E,A             			;instead of (x,y)
 595+ E6DB              ;;//.DeltaX:
 596+ E6DB              ;;//	ld		a,d
 597+ E6DB              ;;//	sub		h
 598+ E6DB              ;;//	jr		nc,.TestDY					; x1 < x2
 599+ E6DB              ;;//.TestDX:
 600+ E6DB              ;;//	ex		de,hl
 601+ E6DB              ;;//.TestDY:
 602+ E6DB              ;;//	ld		a,e
 603+ E6DB              ;;//	sub		l
 604+ E6DB              ;;//    ld      A,$01
 605+ E6DB              ;;//    jr      NC,.StoreA
 606+ E6DB              ;;//    neg                     ;y1 > y2 : in case2 the 'y' variable
 607+ E6DB              ;;//.StoreA:
 608+ E6DB              ;;//        ld      (l2way),A
 609+ E6DB              ;;//.InitLine:
 610+ E6DB              ;;//        ld      B,H
 611+ E6DB              ;;//        ld      C,L
 612+ E6DB              ;;//        ld      A,E
 613+ E6DB              ;;//        sub     L
 614+ E6DB              ;;//        jr      NC,.EndInit
 615+ E6DB              ;;//        ld      A,L
 616+ E6DB              ;;//        ld      L,E
 617+ E6DB              ;;//        ld      E,A
 618+ E6DB              ;;//.EndInit:
 619+ E6DB              ;;//        ld      A,E
 620+ E6DB              ;;//        sub     L
 621+ E6DB              ;;//        rla
 622+ E6DB              ;;//        ld      L,A             ;value to add in case1 (d < 0)
 623+ E6DB              ;;//        add     A,H
 624+ E6DB              ;;//        sub     D
 625+ E6DB              ;;//        ld      E,A             ;'d' variable is initialised
 626+ E6DB              ;;//        add     A,H
 627+ E6DB              ;;//        sub     D
 628+ E6DB              ;;//        ld      H,A             ;value to add in case2 (d >= 0)
 629+ E6DB              ;;//.Loop:
 630+ E6DB              ;;//        ld      A,B
 631+ E6DB              ;;//        sub     D
 632+ E6DB              ;;//        jr      NC,.EndLine       ;the line is completely drawn.
 633+ E6DB              ;;//        pop     AF
 634+ E6DB              ;;//        bit     7,A
 635+ E6DB              ;;//        push    AF
 636+ E6DB              ;;//        push    AF
 637+ E6DB              ;;//        push    BC
 638+ E6DB              ;;//        jr      Z,.DrawPoint
 639+ E6DB              ;;//        ld      A,B
 640+ E6DB              ;;//        ld      B,C
 641+ E6DB              ;;//        ld      C,A
 642+ E6DB              ;;//.DrawPoint:
 643+ E6DB              ;;//		push	hl
 644+ E6DB              ;;//		pushbcdeaf
 645+ E6DB              ;;//		ld		b,e
 646+ E6DB              ;;//		ld		c,d
 647+ E6DB              ;;//	ld 		a,(l2linecolor)
 648+ E6DB              ;;//	call	l2_plot_pixel
 649+ E6DB              ;;//		popafdebc
 650+ E6DB              ;;//		pop		hl
 651+ E6DB              ;;//        pop     BC
 652+ E6DB              ;;//        pop     AF
 653+ E6DB              ;;//.TestD:
 654+ E6DB              ;;//        bit     7,E
 655+ E6DB              ;;//        jr      NZ,.Case1
 656+ E6DB              ;;//.Case2:                          ;d >= 0
 657+ E6DB              ;;//        ld      A,E
 658+ E6DB              ;;//        add     A,H
 659+ E6DB              ;;//        ld      E,A
 660+ E6DB              ;;//        ld      A,(l2way)
 661+ E6DB              ;;//        add     A,C
 662+ E6DB              ;;//        ld      C,A
 663+ E6DB              ;;//        jr      .EndLoop
 664+ E6DB              ;;//.Case1:                          ;d < 0
 665+ E6DB              ;;//        ld      A,E
 666+ E6DB              ;;//        add     A,L
 667+ E6DB              ;;//        ld      E,A
 668+ E6DB              ;;//.EndLoop:
 669+ E6DB              ;;//        inc     B
 670+ E6DB              ;;//        jr      .Loop
 671+ E6DB              ;;//.EndLine:
 672+ E6DB              ;;//        pop     AF              ;MUST NOT BE REMOVED
 673+ E6DB              ;;//        pop     HL              ;can be removed
 674+ E6DB              ;;//        pop     DE              ;can be removed
 675+ E6DB              ;;//        ret
 676+ E6DB
 677+ E6DB              ;;	ld		(.l2yadjust),a
 678+ E6DB              ;;	call	calcdeltax:
 679+ E6DB              ;;	ld		(.l2xadjust),a
 680+ E6DB              ;;.calcfraction:							; err(or fraction) = dx+dy;
 681+ E6DB              ;;	push	hl
 682+ E6DB              ;;	push	de
 683+ E6DB              ;;	ld		hl,(l2deltaX)
 684+ E6DB              ;;	ld		de,(l2deltaY)
 685+ E6DB              ;;	add		hl,de
 686+ E6DB              ;;	ld		(l2fraction),hl
 687+ E6DB              ;;	pop		de
 688+ E6DB              ;;	pop		hl
 689+ E6DB              ;;.mainloop:
 690+ E6DB              ;;	push	bc
 691+ E6DB              ;;	push	de
 692+ E6DB              ;;	ld 		a,(l2linecolor)
 693+ E6DB              ;;	call	l2_plot_pixel
 694+ E6DB              ;;	pop		de
 695+ E6DB              ;;	pop		bc
 696+ E6DB              ;;.arewefinishedtest
 697+ E6DB              ;;	ld		a,b
 698+ E6DB              ;;	cp		d
 699+ E6DB              ;;	jr		nz,.notthereyet
 700+ E6DB              ;;	ld		a,c
 701+ E6DB              ;;	cp		e
 702+ E6DB              ;;	ret		z
 703+ E6DB              ;;.notthereyet:
 704+ E6DB              ;;	push	de
 705+ E6DB              ;;	call	l2_e2fractionby2			; e2 = 2*err;
 706+ E6DB              ;;	pop		de
 707+ E6DB              ;;.e2dytest:								; if (e2 >= dy) /* e_xy+e_x > 0 */  then S and P/V are the same
 708+ E6DB              ;;	push	de							; so if m & pe  or p & po calc (m = sign set p = 0)
 709+ E6DB              ;;	ld		de,(l2deltaY)				;    if m & po  or p & pe skip  (pe = pv set po = pv 0)
 710+ E6DB              ;;	or		a							;
 711+ E6DB              ;;	sbc		hl,de						;
 712+ E6DB              ;;	pop		de
 713+ E6DB              ;;	jr		z,  .dodycalc				; if equal then calc
 714+ E6DB              ;;	jp		p,	.dodycalc				; sign clear to H>D even with negtives
 715+ E6DB              ;;	jr		.skipdycalc         		; sign = 0     so  skip as pe
 716+ E6DB              ;;.dodycalc:
 717+ E6DB              ;;	ld		hl,(l2fraction)
 718+ E6DB              ;;	push	de
 719+ E6DB              ;;	ld		de,(l2deltaY)
 720+ E6DB              ;;	add		hl,de
 721+ E6DB              ;;	ld		(l2fraction),de
 722+ E6DB              ;;	pop		de
 723+ E6DB              ;;.l2yadjust:
 724+ E6DB              ;;	nop
 725+ E6DB              ;;.skipdycalc:
 726+ E6DB              ;;.e2dxtest:								;  if (e2 <= dx) /* e_xy+e_y < 0 */ then S and P/V are different.
 727+ E6DB              ;;	ld		hl,(l2e2)
 728+ E6DB              ;;	push	de							;
 729+ E6DB              ;;	ld		de,(l2deltaX)				;
 730+ E6DB              ;;	or		a							; clear carry flag
 731+ E6DB              ;;	sbc		hl,de						; hl = hl - de is if de > hl will get pv and signed different?
 732+ E6DB              ;;	pop		de
 733+ E6DB              ;;	jr		z,.dodxcalc					; e2 == dx so do calc
 734+ E6DB              ;;	jp		m,.dodxcalc					; was sign bit set
 735+ E6DB              ;;	jr		.skipdxcalc         	    ; diff so skip ; pvclear = po        pvset = pe
 736+ E6DB              ;;.dodxcalc:
 737+ E6DB              ;;	ld		hl,(l2fraction)
 738+ E6DB              ;;	push	de
 739+ E6DB              ;;	ld		de,(l2deltaX)
 740+ E6DB              ;;	add		hl,de
 741+ E6DB              ;;	ld		(l2fraction),de
 742+ E6DB              ;;	pop		de
 743+ E6DB              ;;.l2xadjust:
 744+ E6DB              ;;	nop
 745+ E6DB              ;;.skipdxcalc:
 746+ E6DB              ;;	jr 		.mainloop
 747+ E6DB
 748+ E6DB
 749+ E6DB              ;;/l2_draw_diagonalold:
 750+ E6DB              ;;/MESSAGE ">l2_draw_diagonal, bc = y0,x0 de=y1,x1,a=color)"
 751+ E6DB              ;;/	ld		(l2linecolor),a   			; could do an ex but it will be needed multiple times between many uses of a reg
 752+ E6DB              ;;/.sortycoords:
 753+ E6DB              ;;/	ld		a,b							; Sort to Y0 is always > y1 so we don't have to deal with step y and only step x
 754+ E6DB              ;;/	cp		d
 755+ E6DB              ;;/	jr		nc, .nocoordswap
 756+ E6DB              ;;/.swapcoords:
 757+ E6DB              ;;/	ex		de,hl						; save de to hl ! effective code line 98 after macros
 758+ E6DB              ;;/	lddebc
 759+ E6DB              ;;/	ldbchl
 760+ E6DB              ;;/.nocoordswap:
 761+ E6DB              ;;/	ld		a,d							; l2_dy = -ABS(l2_vy1 - l2_vy0)
 762+ E6DB              ;;/	sub		b							; we have already sorted  so y1 > y0
 763+ E6DB              ;;/	ld		(l2deltaY),a
 764+ E6DB              ;;/	neg									; DEBUG
 765+ E6DB              ;;/	ld		(l2deltaYn),a				; DEBUG
 766+ E6DB              ;;/	neg									; DEBUG
 767+ E6DB              ;;/.deltaxequABSx0Minusx1:						; we need to set l2dx to abs x1-x0 and set
 768+ E6DB              ;;/    ld		a,c
 769+ E6DB              ;;/	cp		e
 770+ E6DB              ;;/	jr		c, .x1GTx0
 771+ E6DB              ;;/.x1LTx0
 772+ E6DB              ;;/	ld		a,c
 773+ E6DB              ;;/	sub		e
 774+ E6DB              ;;/	ld		(l2deltaX),a				; just 8 bit for now should it be 16?
 775+ E6DB              ;;/	neg									; DEBUG
 776+ E6DB              ;;/	ld		(l2deltaXn),a				; DEBUG
 777+ E6DB              ;;/	neg									; DEBUG
 778+ E6DB              ;;/	ld		a,l2incbstep
 779+ E6DB              ;;/	jr		.setlayershift0
 780+ E6DB              ;;/.x1GTx0:
 781+ E6DB              ;;/	ld		a,e
 782+ E6DB              ;;/	sub		c
 783+ E6DB              ;;/	ld		(l2deltaX),a					; just 8 bit for now should it be 16?
 784+ E6DB              ;;/	neg									; DEBUG
 785+ E6DB              ;;/	ld		(l2deltaXn),a				; DEBUG
 786+ E6DB              ;;/	neg									; DEBUG
 787+ E6DB              ;;/	ld		a,l2decbstep
 788+ E6DB              ;;/.setlayershift0:
 789+ E6DB              ;;/	ld		a,0
 790+ E6DB              ;;/	pushbcde
 791+ E6DB              ;;/	call	asm_l2_bank_n_select		; l2_layer_shift = 0 and bank 0 selected
 792+ E6DB              ;;/	popdebc
 793+ E6DB              ;;/; so now we have set inc or dec instruction, l2dy, l2dx and on bank 0,
 794+ E6DB              ;;/.dymuliplyby2:
 795+ E6DB              ;;/	ld		a, (l2deltaY)				; dy *= 2
 796+ E6DB              ;;/	call	l2_signed_mul2a
 797+ E6DB              ;;/	ld		(l2deltaYsq),a
 798+ E6DB              ;;/	neg									; DEBUG
 799+ E6DB              ;;/	ld		(l2deltaYsqn),a				; DEBUG
 800+ E6DB              ;;/	neg									; DEBUG
 801+ E6DB              ;;/.dxmuliplyby2:
 802+ E6DB              ;;/	ld		a, (l2deltaX)				; dx *= 2
 803+ E6DB              ;;/	call	l2_signed_mul2a
 804+ E6DB              ;;/	ld		(l2deltaXsq),a
 805+ E6DB              ;;/	neg									; DEBUG
 806+ E6DB              ;;/	ld		(l2deltaXsqn),a				; DEBUG
 807+ E6DB              ;;/	neg									; DEBUG
 808+ E6DB              ;;/.plotfirstpixel:
 809+ E6DB              ;;/	pushbcde
 810+ E6DB              ;;/	ld a,(l2linecolor)
 811+ E6DB              ;;/	call	l2_plot_pixel
 812+ E6DB              ;;/	popdebc
 813+ E6DB              ;;/.mainloop:								; if (l2_dx > l2_dy) signed
 814+ E6DB              ;;/	ld		a,(l2deltaX)				;If A < N, then S and P/V are different.
 815+ E6DB              ;;/	ld		hl,l2deltaY					;A >= N, then S and P/V are the same
 816+ E6DB              ;;/	cp		(hl)
 817+ E6DB              ;;/	jp		m,	.signset
 818+ E6DB              ;;/.signclear:
 819+ E6DB              ;;/	jp		pe,	.dxLTEdybranch
 820+ E6DB              ;;/	jr		.dxGTdybranch
 821+ E6DB              ;;/.signset:
 822+ E6DB              ;;/	jp		po,	.dxLTEdybranch
 823+ E6DB              ;;/.dxGTdybranch:
 824+ E6DB              ;;/	ld		a,(l2deltaYsq)
 825+ E6DB              ;;/	ld		hl,l2deltaX
 826+ E6DB              ;;/	sub		(hl)
 827+ E6DB              ;;/	ld		(l2fraction),a				; faction = dy - 1/2 dx
 828+ E6DB              ;;/.BranchAwhile							; while (l2_vx0 != l2_vx1)
 829+ E6DB              ;;/	ld		a,c
 830+ E6DB              ;;/	cp		e
 831+ E6DB              ;;/	ret		z							; if x0 = x1 then done
 832+ E6DB              ;;/.BranchAtestfraction:					; if (l2_fraction >= 0)
 833+ E6DB              ;;/	ld		a,(l2fraction)
 834+ E6DB              ;;/	TEST	$80
 835+ E6DB              ;;/	jr		nz,.BranchAskipYstep
 836+ E6DB              ;;/	inc		b							; 		++l2_vy0;
 837+ E6DB              ;;/	ld		hl,l2deltaXsq
 838+ E6DB              ;;/	sub		(hl)						; 		l2_fraction -= l2_dx;
 839+ E6DB              ;;/	ld		(l2fraction),a
 840+ E6DB              ;;/.BranchAskipYstep:
 841+ E6DB              ;;/.l2stepx1:
 842+ E6DB              ;;/	inc		b							; this is self modifying code point 1 l2_vx0 += l2_stepx
 843+ E6DB              ;;/	ld		a,(l2fraction)				; l2_fraction += l2_dy can optimise later as a already has this?
 844+ E6DB              ;;/	ld		hl,l2deltaYsq
 845+ E6DB              ;;/	add		a,(hl)
 846+ E6DB              ;;/	ld		(l2fraction),a
 847+ E6DB              ;;/.BranchAplotBCColA:						; l2_plot_pixel(l2_vx0,l2_vy0,color);
 848+ E6DB              ;;/	pushbcde
 849+ E6DB              ;;/	ld a,(l2linecolor)
 850+ E6DB              ;;/	call	l2_plot_pixel
 851+ E6DB              ;;/	popdebc
 852+ E6DB              ;;/.BranchAloop:
 853+ E6DB              ;;/	jr		.BranchAwhile
 854+ E6DB              ;;/.dxLTEdybranch:
 855+ E6DB              ;;/	ld		a,(l2deltaXsq)				; l2_fraction = l2_dx - (l2_dy >> 1);
 856+ E6DB              ;;/	ld		hl, l2deltaY
 857+ E6DB              ;;/	sub		(hl)
 858+ E6DB              ;;/	ld		(l2fraction),a				; faction = dy - 1/2 d
 859+ E6DB              ;;/.BranchBwhile:							; while (l2_vy0 != l2_vy1)
 860+ E6DB              ;;/	ld		a,b
 861+ E6DB              ;;/	cp		d
 862+ E6DB              ;;/	ret		z							; if x0 = x1 then done
 863+ E6DB              ;;/.BranchBtestfraction:					; if (l2_fraction >= 0)
 864+ E6DB              ;;/	ld		a,(l2fraction)
 865+ E6DB              ;;/	TEST	$80
 866+ E6DB              ;;/	jr		nz,.BranchBskipYstep
 867+ E6DB              ;;/.l2stepx2
 868+ E6DB              ;;/	inc		b							; l2_vx0 += l2_stepx; this is self modifying code point 2
 869+ E6DB              ;;/	ld		a,(l2fraction)				; l2_fraction -= l2_dy
 870+ E6DB              ;;/	ld		hl,l2deltaYsq
 871+ E6DB              ;;/	sub		(hl)
 872+ E6DB              ;;/	ld		(l2fraction),a
 873+ E6DB              ;;/.BranchBskipYstep:
 874+ E6DB              ;;/	ld		hl, l2deltaYsq
 875+ E6DB              ;;/	add		a,(hl)
 876+ E6DB              ;;/	ld		(l2fraction),a
 877+ E6DB              ;;/	inc		b							; ++l2_vy0;
 878+ E6DB              ;;/.BranchBplotBCColA:
 879+ E6DB              ;;/	pushbcde
 880+ E6DB              ;;/	ld a,(l2linecolor)
 881+ E6DB              ;;/	call	l2_plot_pixel
 882+ E6DB              ;;/	popdebc
 883+ E6DB              ;;/.BranchBloop:
 884+ E6DB              ;;/	jr		.BranchBwhile
 885+ E6DB
# file closed: ./Layer2Graphics/layer2_plot_diagonal.asm
1231  E6DB                  INCLUDE "./Layer2Graphics/asm_l2_plot_triangle.asm"
# file opened: ./Layer2Graphics/asm_l2_plot_triangle.asm
   1+ E6DB
   2+ E6DB
   3+ E6DB
   4+ E6DB 00 00        l2trianglebc	        DW 0
   5+ E6DD 00 00        l2trianglede	        DW 0
   6+ E6DF 00 00        l2trianglehl	        DW 0
   7+ E6E1
   8+ E6E1              ; "l2_draw_triangle, BC = y1x1, DE=y2x2, HL=y3x3 a = Color"
   9+ E6E1 C5 D5 E5 F5  l2_draw_triangle:       push	bc,,de,,hl,,af
  10+ E6E5 CD 09 E6                             call	l2_draw_diagonal		; BC to DE
  11+ E6E8 F1                                   pop		af
  12+ E6E9 D1                                   pop		de						; swap DE and HL
  13+ E6EA E1                                   pop		hl						; so BC to DE is really to HL
  14+ E6EB C1                                   pop		bc
  15+ E6EC D5 E5                                push    de,,hl                    ; which is pushing original hl then original de
  16+ E6EE F5                                   push	af
  17+ E6EF CD 09 E6                             call	l2_draw_diagonal		; BC to HL (leaving DE and HL swapped)
  18+ E6F2 F1                                   pop		af
  19+ E6F3 C1                                   pop		bc						; Now bc = original de
  20+ E6F4 D1                                   pop		de						; de = original hl
  21+ E6F5 CD 09 E6                             call	l2_draw_diagonal		; BC to HL (leaving DE and HL swapped)
  22+ E6F8 C9                                   ret
  23+ E6F9
  24+ E6F9
  25+ E6F9
  26+ E6F9
  27+ E6F9
# file closed: ./Layer2Graphics/asm_l2_plot_triangle.asm
1232  E6F9                  INCLUDE "./Layer2Graphics/asm_l2_fill_triangle.asm"
# file opened: ./Layer2Graphics/asm_l2_fill_triangle.asm
   1+ E6F9              ; ">l2_fillBottomFlatTriangle BC y0x0 DE x1x2, H YCommon, L Colour"
   2+ E6F9              ; "note >l2_draw_diagonal_save, bc = y0,x0 de=y1,x1,a=array nbr ESOURCE LL30 or LION"
   3+ E6F9              ; "note line to   bc = left side row,col, d right pixel, e = color"
   4+ E6F9 DD 01        l2_fillBottomFlatTriangle:break
   5+ E6FB 7D                                   ld		a,l
   6+ E6FC 32 22 E3                             ld		(l2linecolor),a
   7+ E6FF 79                                   ld		a,c
   8+ E700 BB                                   cp		e
   9+ E701 30 08                                jr		nc, .x2gtex1
  10+ E703 DD 26 01     .x1ltx2:                ld		ixh,1                           ; list 1 holds x0 down to x1
  11+ E706 DD 2E 02                             ld		ixl,2                           ; list 2 hols  x0 down to x2
  12+ E709 18 06                                jr		.storepoints
  13+ E70B DD 26 02     .x2gtex1:               ld		ixh,2
  14+ E70E DD 2E 01                             ld		ixl,1
  15+ E711 C5 D5 E5     .storepoints:           push	bc,,de,,hl
  16+ E714 DD 7C                                ld		a,ixh
  17+ E716 5A                                   ld		e,d                             ; we alreay have bc so its now bc -> hd
  18+ E717 54                                   ld		d,h
  19+ E718 CD 2A E5                             call	l2_draw_diagonal_save			;l2_store_diagonal(x0,y0,x1,ycommon,l2_LineMinX);
  20+ E71B E1 D1 C1                             pop		bc,,de,,hl
  21+ E71E C5 E5                                push	bc,,hl
  22+ E720 54                                   ld		d,h                             ; now its bc -> he
  23+ E721 DD 7D                                ld		a,ixl
  24+ E723 CD 2A E5                             call	l2_draw_diagonal_save			;l2_store_diagonal(x0,y0,x2,ycommon,l2_LineMaxX);
  25+ E726 E1 C1                                pop		bc,,hl
  26+ E728 50           .SaveForLoop:           ld		d,b
  27+ E729 5C                                   ld		e,h								; save loop counters
  28+ E72A D5                                   push	de								; de = y0ycommon
  29+ E72B 21 2A E3     .GetFirstHorizontalRow:	ld		hl,l2targetArray1               ; get first row for loop
  30+ E72E 78                                   ld		a,b
  31+ E72F ED 31                                add		hl,a							; hl = l2targetArray1 row b
  32+ E731 7E                                   ld		a,(hl)							;
  33+ E732 4F                                   ld		c,a								; c = col1 i.e. l2targetarray1[b]
  34+ E733 21 2A E4                             ld      hl,l2targetArray2
  35+ E736 78                                   ld      a,b
  36+ E737 ED 31                                add     hl,a
  37+ E739              ;                        inc		h								; hl = l2targetArray2 row b if we interleave
  38+ E739 7E                                   ld		a,(hl)
  39+ E73A 57                                   ld		d,a								; d = col2 i.e. l2targetarray2[b]
  40+ E73B 3A 22 E3     .SetColour:             ld		a,(l2linecolor)
  41+ E73E 5F                                   ld		e,a								; de = to colour
  42+ E73F C5           .SavePoints:            push	bc								; bc = rowcol
  43+ E740 25                                   dec		h
  44+ E741 E5                                   push	hl								; hl = l2targetArray1[b]
  45+ E742 CD 8C E2     .DoLine:	            call	l2_draw_horz_line_to
  46+ E745 E1                                   pop		hl
  47+ E746 C1                                   pop		bc
  48+ E747 04                                   inc		b								; down a rowc
  49+ E748 D1                                   pop		de								; de = from to (and b also = current)
  50+ E749 14                                   inc		d
  51+ E74A 7B                                   ld		a,e								; while e >= d
  52+ E74B BA                                   cp		d
  53+ E74C 30 DA                                jr 		nc,.SaveForLoop					; Is this the right point??
  54+ E74E C9                                   ret
  55+ E74F
# file closed: ./Layer2Graphics/asm_l2_fill_triangle.asm
1233  E74F                  INCLUDE "./Layer2Graphics/layer2_plot_circle.asm"
# file opened: ./Layer2Graphics/layer2_plot_circle.asm
   1+ E74F
   2+ E74F 00 00        l2_circle_pos		DW 0
   3+ E751 00           l2_circle_colour	DB 0
   4+ E752 00           l2_circle_radius	DB 0
   5+ E753 00           l2_circle_x			DB 0
   6+ E754 00           l2_circle_y			DB 0
   7+ E755 00           l2_circle_d			DB 0
   8+ E756
   9+ E756              ; ">l2_draw_circle BC = center row col, d = radius, e = colour"
  10+ E756 7B           l2_draw_circle:     ld		a,e
  11+ E757 32 FD E7                         ld		(.PlotPixel+1),a
  12+ E75A 7A                               ld		a,d								; get radius
  13+ E75B A7                               and		a
  14+ E75C C8                               ret		z
  15+ E75D FE 01                            cp		1
  16+ E75F CA 08 E8                         jp		z,CircleSinglepixel
  17+ E762 ED 43 8C E7                      ld		(.Plot1+1),bc					; save origin into DE reg in code
  18+ E766 DD 67                            ld		ixh,a							; ixh = raidus
  19+ E768 DD 2E 00                         ld		ixl,0
  20+ E76B 26 00        .calcd:	            ld		h,0
  21+ E76D 6F                               ld		l,a
  22+ E76E 29                               add		hl,hl							; hl = r * 2
  23+ E76F EB                               ex		de,hl							; de = r * 2
  24+ E770 21 03 00                         ld		hl,3
  25+ E773 A7                               and		a
  26+ E774 ED 52                            sbc		hl,de							; hl = 3 - (r * 2)
  27+ E776 44                               ld		b,h
  28+ E777 4D                               ld		c,l								; bc = 3 - (r * 2)
  29+ E778 21 01 00     .calcdelta:         ld		hl,1
  30+ E77B 16 00                            ld		d,0
  31+ E77D DD 5D                            ld		e,ixl
  32+ E77F A7                               and		a
  33+ E780 ED 52                            sbc		hl,de
  34+ E782 11 01 00     .Setde1:            ld		de,1
  35+ E785 DD 7C        .CircleLoop:        ld		a,ixh
  36+ E787 DD BD                            cp		ixl
  37+ E789 D8                               ret		c
  38+ E78A D9           .ProcessLoop:	    exx
  39+ E78B 11 00 00     .Plot1:             ld		de,0
  40+ E78E 7B                               ld		a,e
  41+ E78F DD 85                            add		a,ixl
  42+ E791 4F                               ld		c,a
  43+ E792 7A                               ld		a,d
  44+ E793 DD 84                            add		a,ixh
  45+ E795 47                               ld		b,a
  46+ E796 CD FC E7                         call	.PlotPixel			;CX+X,CY+Y
  47+ E799 7B           .Plot2:             ld 		a,e
  48+ E79A DD 95                            sub 	ixl
  49+ E79C 4F                               ld 		c,a
  50+ E79D 7A                               ld 		a,d
  51+ E79E DD 84                            add 	a,ixh
  52+ E7A0 47                               ld		b,a
  53+ E7A1 CD FC E7                         call	.PlotPixel			;CX-X,CY+Y
  54+ E7A4 7B           .Plot3:             ld 		a,e
  55+ E7A5 DD 85                            add		a,ixl
  56+ E7A7 4F                               ld 		c,a
  57+ E7A8 7A                               ld 		a,d
  58+ E7A9 DD 94                            sub 	ixh
  59+ E7AB 47                               ld 		b,a
  60+ E7AC CD FC E7                         call	.PlotPixel			;CX+X,CY-Y
  61+ E7AF 7B           .Plot4:             ld 		a,e
  62+ E7B0 DD 95                            sub 	ixl
  63+ E7B2 4F                               ld 		c,a
  64+ E7B3 7A                               ld 		a,d
  65+ E7B4 DD 94                            sub 	ixh
  66+ E7B6 47                               ld 		b,a
  67+ E7B7 CD FC E7                         call	.PlotPixel			;CY+X,CX-Y
  68+ E7BA 7A           .Plot5:	            ld 		a,d
  69+ E7BB DD 85                            add 	a,ixl
  70+ E7BD 47                               ld 		b,a
  71+ E7BE 7B                               ld 		a,e
  72+ E7BF DD 84                            add 	a,ixh
  73+ E7C1 4F                               ld 		c,a
  74+ E7C2 CD FC E7                         call	.PlotPixel			;CY+X,CX+Y
  75+ E7C5 7A           .Plot6:	            ld 		a,d
  76+ E7C6 DD 95                            sub 	ixl
  77+ E7C8 47                               ld 		b,a
  78+ E7C9 7B                               ld 		a,e
  79+ E7CA DD 84                            add 	a,ixh
  80+ E7CC 4F                               ld 		c,a
  81+ E7CD CD FC E7                         call	.PlotPixel			;CY-X,CX+Y
  82+ E7D0 7A           .Plot7:	            ld 		a,d
  83+ E7D1 DD 85                            add 	a,ixl
  84+ E7D3 47                               ld 		b,a
  85+ E7D4 7B                               ld 		a,e
  86+ E7D5 DD 94                            sub 	ixh
  87+ E7D7 4F                               ld 		c,a
  88+ E7D8 CD FC E7                         call	.PlotPixel			;CY+X,CX-Y
  89+ E7DB 7A           .Plot8:	            ld 		a,d
  90+ E7DC DD 95                            sub 	ixl
  91+ E7DE 47                               ld		b,a
  92+ E7DF 7B                               ld 		a,e
  93+ E7E0 DD 94                            sub 	ixh
  94+ E7E2 4F                               ld 		c,a
  95+ E7E3 CD FC E7                         call	.PlotPixel			;CX+X,CY-Y
  96+ E7E6 D9                               exx
  97+ E7E7 CB 7C        .IncrementCircle:	bit     7,h				; Check for Hl<=0
  98+ E7E9 28 03                            jr z,   .draw_circle_1
  99+ E7EB 19                               add hl,de			; Delta=Delta+D1
 100+ E7EC 18 05                            jr      .draw_circle_2		;
 101+ E7EE 09           .draw_circle_1:		add     hl,bc			; Delta=Delta+D2
 102+ E7EF 03                               inc     bc
 103+ E7F0 03                               inc     bc				; D2=D2+2
 104+ E7F1 DD 25                            dec     ixh				; Y=Y-1
 105+ E7F3 03           .draw_circle_2:		inc bc				; D2=D2+2
 106+ E7F4 03                               inc bc
 107+ E7F5 13                               inc de				; D1=D1+2
 108+ E7F6 13                               inc de
 109+ E7F7 DD 2C                            inc ixl				; X=X+1
 110+ E7F9 C3 85 E7                         jp      .CircleLoop
 111+ E7FC 3E 00        .PlotPixel:         ld		a,0                  ; This was originally indirect, where as it neeed to be value
 112+ E7FE D5 C5 E5                         push	de,,bc,,hl
 113+ E801 CD 19 E1                         call 	l2_plot_pixel_y_test
 114+ E804 E1 C1 D1                         pop		de,,bc,,hl
 115+ E807 C9                               ret
 116+ E808 7B           CircleSinglepixel:  ld		a,e
 117+ E809 CD 19 E1                         call	l2_plot_pixel_y_test
 118+ E80C C9                               ret
 119+ E80D
# file closed: ./Layer2Graphics/layer2_plot_circle.asm
1234  E80D                  INCLUDE "./Layer2Graphics/layer2_plot_circle_fill.asm"
# file opened: ./Layer2Graphics/layer2_plot_circle_fill.asm
   1+ E80D
   2+ E80D 00           l2_circle_dblx		DB 0
   3+ E80E 00           l2_circle_dbly		DB 0
   4+ E80F
   5+ E80F              ; ">l2_draw_circle_fill BC = center row col, d = radius, e = colour"
   6+ E80F              ; Note this code currently does not process BC
   7+ E80F 7B           l2_draw_circle_fill:    ld		a,e
   8+ E810 32 A6 E8                             ld		(.LineColour+1),a
   9+ E813 7A                                   ld		a,d								; get radius
  10+ E814 A7                                   and		a
  11+ E815 C8                                   ret		z
  12+ E816 FE 01                                cp		1
  13+ E818 CA 08 E8                             jp		z,CircleSinglepixel
  14+ E81B ED 43 45 E8                          ld		(.Line1+1),bc					; save origin into DE reg in code
  15+ E81F DD 67                                ld		ixh,a							; ixh = raidus (x)
  16+ E821 DD 2E 00                             ld		ixl,0							; ihy = y
  17+ E824 26 00        .calcd:	                ld		h,0
  18+ E826 6F                                   ld		l,a
  19+ E827 29                                   add		hl,hl							; hl = r * 2
  20+ E828 EB                                   ex		de,hl							; de = r * 2
  21+ E829 21 03 00                             ld		hl,3
  22+ E82C A7                                   and		a
  23+ E82D ED 52                                sbc		hl,de							; hl = 3 - (r * 2)
  24+ E82F 44                                   ld		b,h
  25+ E830 4D                                   ld		c,l								; bc = 3 - (r * 2)
  26+ E831 21 01 00     .calcdelta              ld		hl,1
  27+ E834 16 00                                ld		d,0
  28+ E836 DD 5D                                ld		e,ixl
  29+ E838 A7                                   and		a
  30+ E839 ED 52                                sbc		hl,de
  31+ E83B 11 01 00     .Setde1	                ld		de,1
  32+ E83E DD 7C        .CircleLoop:            ld		a,ixh
  33+ E840 DD BD                                cp		ixl
  34+ E842 D8                                   ret		c
  35+ E843 D9           .ProcessLoop:	        exx
  36+ E844 11 00 00     .Line1:                 ld		de,0
  37+ E847 7B                                   ld 		a,e
  38+ E848 DD 95                                sub 	ixl
  39+ E84A 4F                                   ld 		c,a
  40+ E84B 7A                                   ld 		a,d
  41+ E84C DD 84                                add 	a,ixh
  42+ E84E 47                                   ld		b,a
  43+ E84F                                      ;; TODO ADD DOUBLE X CALC
  44+ E84F D5                                   push	de
  45+ E850 DD 55                                ld		d,ixl
  46+ E852 CB 22                                sla		d
  47+ E854 CD A1 E8                             call	.PlotLine			;CX-X,CY+Y
  48+ E857 D1                                   pop		de
  49+ E858 7B           .Line2:                 ld 		a,e
  50+ E859 DD 95                                sub		ixl
  51+ E85B 4F                                   ld 		c,a
  52+ E85C 7A                                   ld 		a,d
  53+ E85D DD 94                                sub 	ixh
  54+ E85F 47                                   ld 		b,a
  55+ E860                                      ;; TODO ADD DOUBLE X CALC
  56+ E860 D5                                   push	de
  57+ E861 DD 55                                ld		d,ixl
  58+ E863 CB 22                                sla		d
  59+ E865 CD A1 E8                             call	.PlotLine			;CX-X,CY-Y
  60+ E868 D1                                   pop		de
  61+ E869 7B           .Line3:	                ld 		a,e
  62+ E86A DD 94                                sub		ixh
  63+ E86C 4F                                   ld 		c,a
  64+ E86D 7A                                   ld 		a,d
  65+ E86E DD 85                                add 	a,ixl
  66+ E870 47                                   ld 		b,a
  67+ E871                                      ;; TODO ADD DOUBLE Y CALC
  68+ E871 D5                                   push	de
  69+ E872 DD 54                                ld		d,ixh
  70+ E874 CB 22                                sla		d
  71+ E876 CD A1 E8                             call	.PlotLine			;CX-Y,CY+x
  72+ E879 D1                                   pop		de
  73+ E87A 7B           .Line4:	                ld 		a,e
  74+ E87B DD 94                                sub		ixh
  75+ E87D 4F                                   ld 		c,a
  76+ E87E 7A                                   ld 		a,d
  77+ E87F DD 95                                sub 	ixl
  78+ E881 47                                   ld 		b,a
  79+ E882                                      ;; TODO ADD DOUBLE Y CALC
  80+ E882 D5                                   push	de
  81+ E883 DD 54                                ld		d,ixh
  82+ E885 CB 22                                sla		d
  83+ E887 CD A1 E8                             call	.PlotLine			;CX-Y,CY+x
  84+ E88A D1                                   pop		de
  85+ E88B D9                                   exx
  86+ E88C CB 7C        .IncrementCircle:	    bit 7,h				; Check for Hl<=0
  87+ E88E 28 03                                jr z,.draw_circle_1
  88+ E890 19                                   add hl,de			; Delta=Delta+D1
  89+ E891 18 05                                jr .draw_circle_2		;
  90+ E893 09           .draw_circle_1:		    add hl,bc			; Delta=Delta+D2
  91+ E894 03                                   inc bc
  92+ E895 03                                   inc bc				; D2=D2+2
  93+ E896 DD 25                                dec ixh				; Y=Y-1
  94+ E898 03           .draw_circle_2:		    inc bc				; D2=D2+2
  95+ E899 03                                   inc bc
  96+ E89A 13                                   inc de				; D1=D1+2
  97+ E89B 13                                   inc de
  98+ E89C DD 2C                                inc ixl				; X=X+1
  99+ E89E C3 3E E8                             jp .CircleLoop
 100+ E8A1 D5 C5 E5 F5  .PlotLine:              push	de,,bc,,hl,,af
 101+ E8A5 3E 00        .LineColour:	        ld		a,0         ; circle colur
 102+ E8A7 5F                                   ld      e,a
 103+ E8A8 CD 60 E2                             call 	l2_draw_horz_line
 104+ E8AB F1 E1 C1 D1                          pop     de,,bc,,hl,,af
 105+ E8AF C9                                   ret
 106+ E8B0
# file closed: ./Layer2Graphics/layer2_plot_circle_fill.asm
1235  E8B0                  INCLUDE "./Layer2Graphics/l2_draw_any_line.asm"
# file opened: ./Layer2Graphics/l2_draw_any_line.asm
   1+ E8B0              ; ">l2_draw_any_line, bc = y0,x0 de=y1,x1,a=color: determines if its horizontal, vertical or diagonal then hands off the work"
   2+ E8B0 08           l2_draw_any_line:       ex		af,af'              ; save colour into a'
   3+ E8B1 79                                   ld		a,c                 ; if x and e are the same its horizontal
   4+ E8B2 BB                                   cp		e
   5+ E8B3 28 08                                jr		z,.HorizontalLineCheck
   6+ E8B5 78                                   ld		a,b                 ; if b and d are the same its vertica;
   7+ E8B6 BA                                   cp		d
   8+ E8B7 28 0E                                jr		z,.VerticalLine
   9+ E8B9              ; use jp and get a free ret instruction optimisation
  10+ E8B9 08           .DiagonalLine:		    ex		af,af'			     ; get colour back into a
  11+ E8BA C3 09 E6                             jp		l2_draw_diagonal
  12+ E8BD
  13+ E8BD 78           .HorizontalLineCheck:   ld      a,b
  14+ E8BE BA                                   cp      d
  15+ E8BF 28 0B                                jr      z, .SinglePixel
  16+ E8C1 08           .HorizontalLine:        ex		af,af'              ; get colour back into a
  17+ E8C2 53                                   ld		d,e				    ; set d as target right pixel
  18+ E8C3 5F                                   ld		e,a				    ; e holds colour on this call
  19+ E8C4 C3 8C E2                             jp		l2_draw_horz_line_to
  20+ E8C7 08           .VerticalLine:          ex		af,af'
  21+ E8C8 5F                                   ld		e,a				    ; e holds colour on this call
  22+ E8C9 C3 0B E3                             jp		l2_draw_vert_line_to
  23+ E8CC 08           .SinglePixel:           ex		af,af'              ; get colour back into a
  24+ E8CD C3 FF E0                             jp      l2_plot_pixel
  25+ E8D0              ;......................................................
  26+ E8D0
# file closed: ./Layer2Graphics/l2_draw_any_line.asm
1236  E8D0                  INCLUDE "./Layer2Graphics/clearLines-LL155.asm"
# file opened: ./Layer2Graphics/clearLines-LL155.asm
   1+ E8D0              ; ClearLines (LL155)
   2+ E8D0              ;   y = 0
   3+ E8D0              ; 	XX20 = UbnkEdgeHeapSize
   4+ E8D0              ;   exit if XX20 < 4
   5+ E8D0              ;   ++y
   6+ E8D0              ;   do
   7+ E8D0              ;		X1 = XX19(Y) ;	Y1 = XX19(++Y) ;	X2 = XX19(++Y);	Y2 = XX19(++Y)
   8+ E8D0              ;   	call DrawLine (x1,y1 to x2,y2) two's compliment (we will do 0)
   9+ E8D0              ;		++y
  10+ E8D0              ;	until Y > XX20
  11+ E8D0
  12+ E8D0              clearLines:
  13+ E8D0              layer2_clearLines:
  14+ E8D0 3A 00 C3     LL155cl:                ld		a,(UbnkLineArrayLen)
  15+ E8D3 47                                   ld		b,a
  16+ E8D4 21 0E C2                             ld		hl,UbnkLineArray
  17+ E8D7 C5           clearLinesLoop:         push	bc
  18+ E8D8 7E                                   ld		a,(hl)
  19+ E8D9 23                                   inc		hl
  20+ E8DA 4F                                   ld		c,a
  21+ E8DB 7E                                   ld		a,(hl)
  22+ E8DC 23                                   inc		hl
  23+ E8DD 47                                   ld		b,a
  24+ E8DE 7E                                   ld		a,(hl)
  25+ E8DF 23                                   inc		hl
  26+ E8E0 5F                                   ld		e,a
  27+ E8E1 7E                                   ld		a,(hl)
  28+ E8E2 23                                   inc		hl
  29+ E8E3 57                                   ld		d,a
  30+ E8E4 3E E3                                ld		a,COLOUR_TRANSPARENT		; we erase here
  31+ E8E6 E5                                   push	hl
  32+ E8E7 CD B0 E8                             call    l2_draw_any_line
  33+ E8EA E1                                   pop		hl
  34+ E8EB C1                                   pop		bc
  35+ E8EC 10 E9                                djnz	clearLinesLoop
  36+ E8EE C9                                   ret
  37+ E8EF
# file closed: ./Layer2Graphics/clearLines-LL155.asm
1237  E8EF                  INCLUDE "./Layer2Graphics/l2_draw_line_v2.asm"
# file opened: ./Layer2Graphics/l2_draw_line_v2.asm
   1+ E8EF              ; ******************************************************************************
   2+ E8EF              ;
   3+ E8EF              ;	Draw a pixel line from (x0,y0) defined in (COORDS) - the current plot
   4+ E8EF              ;	coordinate, to the relative distance points (x0+x,y0+y).
   5+ E8EF              ;
   6+ E8EF              ;	Design & programming by Gunther Strube,	Copyright (C) InterLogic 1995
   7+ E8EF              ;
   8+ E8EF              ;	The (COORDS+0)	pointer contains the current y coordinate, (COORDS+1) the
   9+ E8EF              ;	current x coordinate. The main program should reset the (COORDS) variables
  10+ E8EF              ;	before using line drawing.
  11+ E8EF              ;
  12+ E8EF              ;	The routine checks the range of specified coordinates which is the
  13+ E8EF              ;	boundaries of the graphics area (256x64	pixels).
  14+ E8EF              ;	If a boundary error occurs the routine exits automatically.	This may be
  15+ E8EF              ;	useful if you are trying to draw a line longer than allowed. Only the
  16+ E8EF              ;	visible part will be drawn.
  17+ E8EF              ;
  18+ E8EF              ;	The hardware graphics memory is organized as (0,0) in the top left corner.
  19+ E8EF              ;
  20+ E8EF              ;	The plot routine is	defined by an address pointer	in IX.
  21+ E8EF              ;
  22+ E8EF              ;	IN:	HL =	move	relative x horisontal points (maximum +/- 255).
  23+ E8EF              ;		DE =	move	relative y vertical	points (maximum +/-	255).
  24+ E8EF              ;		IX =	pointer to plot routine that uses HL = (x,y)	of plot coordinate.
  25+ E8EF              ;
  26+ E8EF              ;	OUT:	None.
  27+ E8EF              ;
  28+ E8EF              ;	Registers	used	by routine:
  29+ E8EF              ;		   N	:	B, loop counter
  30+ E8EF              ;		   i	:	line	balance variable
  31+ E8EF              ;		   x	:	H/L,	horisontal, vertical distance	variables
  32+ E8EF              ;		   y	:	H/L,	horisontal, vertical distance	variables
  33+ E8EF              ;	  (x0,y0)	:	(h,l)
  34+ E8EF              ;	  direc_x	:	d, horisontal step increment
  35+ E8EF              ;	  direc_y	:	e, vertical step increment
  36+ E8EF              ;		 ddx	:	b, horisontal step increment
  37+ E8EF              ;		 ddy	:	c, vertical step increment
  38+ E8EF              ;
  39+ E8EF              ;		DE, A work registers.
  40+ E8EF              ;
  41+ E8EF              ; The algorithm in pseudo-code:
  42+ E8EF              ;
  43+ E8EF              ;	direc_x =	SGN x: direc_y	= SGN y
  44+ E8EF              ;	x = ABS x: y =	ABS y
  45+ E8EF              ;
  46+ E8EF              ;	if x	>= y
  47+ E8EF              ;		if x+y=0 then return
  48+ E8EF              ;		H = x
  49+ E8EF              ;		L = y
  50+ E8EF              ;		ddx = direc_x
  51+ E8EF              ;		ddy = 0
  52+ E8EF              ;	else
  53+ E8EF              ;		H = y
  54+ E8EF              ;		L = x
  55+ E8EF              ;		ddx = 0
  56+ E8EF              ;		ddy = direc_y
  57+ E8EF              ;	endif
  58+ E8EF              ;
  59+ E8EF              ;	B = H
  60+ E8EF              ;	i = INT(B/2)
  61+ E8EF              ;	FOR N=B TO 1 STEP -1
  62+ E8EF              ;		i = i + L
  63+ E8EF              ;		if i	< H
  64+ E8EF              ;			ix =	ddx
  65+ E8EF              ;			iy =	ddy
  66+ E8EF              ;		else
  67+ E8EF              ;			i = i - H
  68+ E8EF              ;			ix =	direc_x
  69+ E8EF              ;			iy =	direc_y
  70+ E8EF              ;		endif
  71+ E8EF              ;		x0 =	x0 +	ix
  72+ E8EF              ;		y0 =	y0 +	iy
  73+ E8EF              ;		plot	(x0,y0)
  74+ E8EF              ;	NEXT	N
  75+ E8EF              ;
  76+ E8EF              ;
  77+ E8EF              ;	Registers	changed after return:
  78+ E8EF              ;		..BCDEHL/IXIY/af......	same
  79+ E8EF              ;		AF....../..../..bcdehl	different
  80+ E8EF              ;
  81+ E8EF DF           line_gfx_colour db $DF
  82+ E8F0 00 00        line_gfx_coords	dw 0
  83+ E8F2              LineHLtoDE:
  84+ E8F2 7C           TestMaxY:               ld	a,h ; were h = y or l = y?
  85+ E8F3 FE C0                                cp	192
  86+ E8F5 30 26                                jr	nc, exit_line		; y0	coordinate out	of range
  87+ E8F7 7A                                   ld	a,d
  88+ E8F8 FE C0                                cp	192
  89+ E8FA 30 21                                jr	nc, exit_line		; y1	coordinate out	of range
  90+ E8FC 22 F0 E8                             ld	(line_gfx_coords),hl		; the starting	point is now default
  91+ E8FF E5                                   push	hl
  92+ E900 D5                                   push	de
  93+ E901 6C                                   ld	l,h				; L = x0
  94+ E902 62                                   ld	h,d				; H = x1
  95+ E903 7C           distanceX:		        ld	a,h
  96+ E904 95                                   sub	l
  97+ E905 6F                                   ld	l,a
  98+ E906 26 00                                ld	h,0
  99+ E908 30 02                                jr	nc, distanceXDone
 100+ E90A 26 FF                                ld	h,-1
 101+ E90C D1           distanceXDone:          pop	de
 102+ E90D E3                                   ex	(sp),hl			; L = y0
 103+ E90E 63                                   ld	h,e				; H = y1
 104+ E90F 7C           distanceY:		        ld	a,h
 105+ E910 95                                   sub	l
 106+ E911 6F                                   ld	l,a
 107+ E912 26 00                                ld	h,0
 108+ E914 30 02                                jr	nc, distanceYDone
 109+ E916 26 FF                                ld	h,-1
 110+ E918 D1           distanceYDone:          pop	de
 111+ E919 EB                                   ex	de,hl			; h.dist.	= HL, v.dist. = DE
 112+ E91A CD 1E E9                             call	DrawLineRelative			; draw line...
 113+ E91D C9           exit_line:              ret
 114+ E91E
 115+ E91E              ; ***************************************************************************
 116+ E91E              ;
 117+ E91E              ;	IN:	HL =	move	relative x horisontal points (maximum +/- 255).
 118+ E91E              ;		DE =	move	relative y vertical	points (maximum +/-	255).
 119+ E91E              ;
 120+ E91E              ; OUT: h - l distance in	HL
 121+ E91E              ;
 122+ E91E
 123+ E91E D5           DrawLineRelative:       push	de
 124+ E91F E5                                   push	hl
 125+ E920 D9                                   exx
 126+ E921 E1                                   pop	hl					; get relative	horisontal movement
 127+ E922 CD 8D E9                             call	sgn
 128+ E925 57                                   ld	d,a					; direc_x	= SGN(x) installed d = +/-1 for horizontal update
 129+ E926 CD 9A E9                             call	absValue
 130+ E929 45                                   ld	b,l					; x = ABS(x)
 131+ E92A E1           DrawLineGetVertRelative:pop	hl					; get relative	vertical movement
 132+ E92B CD 8D E9                             call	sgn
 133+ E92E 5F                                   ld	e,a					; direc_y	= SGN(y) installed  = +/-1 for vertical update
 134+ E92F CD 9A E9                             call	absValue
 135+ E932 4D                                   ld	c,l					; y = ABS(y) so now bc = dxdy
 136+ E933              ; so by here BC = dx dy HL in increment/decrement x y
 137+ E933 C5                                   push	bc
 138+ E934 D9                                   exx
 139+ E935 E1                                   pop	hl					; H = absolute	x dist., L = absolute y distance
 140+ E936 7C                                   ld	a,h
 141+ E937 BD                                   cp	l
 142+ E938 38 0A                                jr	c, x_smaller_y		; if	x >=	y
 143+ E93A B4           areXandYZero:           or	h					;	if x+y = 0
 144+ E93B 28 4F                                jr	z, exit_draw		;		return
 145+ E93D D9           y_lessorequal_x:        exx						;	else
 146+ E93E 42                                   ld	b,d					;		ddx = direc_x
 147+ E93F 0E 00                                ld	c,0					;		ddy = 0
 148+ E941 D9                                   exx
 149+ E942 18 08                                jr	init_drawloop		; else
 150+ E944 7C           x_smaller_y:	        ld	a,h
 151+ E945 65                                   ld	h,l					;	H = y
 152+ E946 6F                                   ld	l,a					;	L = x
 153+ E947 D9                                   exx
 154+ E948 06 00                                ld	b,0					;	ddx = 0
 155+ E94A 4B                                   ld	c,e					;	ddy = direc_y
 156+ E94B D9                                   exx
 157+ E94C 44           init_drawloop:	        ld	b,h
 158+ E94D 4C                                   ld	c,h					; B = H
 159+ E94E CB 39                                srl	c					; i = INT(B/2)
 160+ E950              										; FOR N=B	TO 1	STEP	-1
 161+ E950 79           drawloop:		        ld	a,c
 162+ E951 85                                   add	a,l
 163+ E952 38 09                                jr	c, i_greater		;	i + L > 255  (i > H)
 164+ E954 BC                                   cp	h
 165+ E955 30 06                                jr	nc, i_greater		;	if i	< H
 166+ E957 4F                                   ld	c,a					;		i = i + L
 167+ E958 D9                                   exx
 168+ E959 C5                                   push	bc				;		ix =	ddx:	iy =	ddy
 169+ E95A D9                                   exx
 170+ E95B 18 05                                jr	check_plot			;	else
 171+ E95D 94           i_greater:		        sub	h					;		i = i - H
 172+ E95E 4F                                   ld	c,a
 173+ E95F D9                                   exx
 174+ E960 D5                                   push	de				;		ix =	direc_x: iy = direc_y
 175+ E961 D9                                   exx						;	endif
 176+ E962 E3           check_plot:		        ex	(sp),hl				;	preserve H,L distances on stack
 177+ E963 EB                                   ex	de,hl				;	D,E = ix,	iy
 178+ E964 2A F0 E8                             ld	hl,(line_gfx_coords)
 179+ E967 7D                                   ld	a,l
 180+ E968 83                                   add	a,e					;
 181+ E969 6F                                   ld	l,a					;	y0 =	y0 +	iy (y0 is	checked by plot)
 182+ E96A 7A                                   ld	a,d
 183+ E96B 3C                                   inc	a
 184+ E96C 84                                   add	a,h
 185+ E96D 38 04                                jr	c, check_range		;	check out	of range
 186+ E96F 28 1A                                jr	z, range_error		;	Fz=1	& Fc=0 denotes	x0 <	0
 187+ E971 18 02                                jr	plot_point
 188+ E973 20 16        check_range:            jr	nz, range_error	;	Fz=0	& Fc=1 denotes	x0 >	255
 189+ E975
 190+ E975 3D           plot_point:             dec	a
 191+ E976 C5                                   push	bc
 192+ E977 F5                                   push	af
 193+ E978 47                                   ld	    b,a					;	x0 =	x0 +	ix
 194+ E979 4D                                   ld		c,l
 195+ E97A 3A EF E8                             ld		a,(line_gfx_colour)
 196+ E97D ED 43 F0 E8                          ld      (line_gfx_coords),bc
 197+ E981 CD FF E0                             call	l2_plot_pixel
 197+ E984
 198+ E984 F1                                   pop		af
 199+ E985 C1                                   pop		bc
 200+ E986 E1           plot_RET:		        pop	hl					;	restore H,L distances...
 201+ E987 10 C7                                djnz	drawloop		; NEXT N
 202+ E989 18 01                                jr	exit_draw
 203+ E98B
 204+ E98B E1           range_error:	        pop	hl					; remove H,L distances...
 205+ E98C C9           exit_draw:		        ret
 206+ E98D
 207+ E98D
 208+ E98D              ; ******************************************************************************
 209+ E98D              ;
 210+ E98D              ;	SGN (Signum value) of 16	bit signed integer.
 211+ E98D              ;
 212+ E98D              ;	IN:		HL =	integer
 213+ E98D              ;	OUT:		A = result: 0,1,-1 (if zero, positive, negative)
 214+ E98D              ;
 215+ E98D              ;	Registers	changed after return:
 216+ E98D              ;	..BCDEHL/IXIY	same
 217+ E98D              ;	AF....../....	different
 218+ E98D              ;
 219+ E98D 7C           sgn:				    ld	a,h
 220+ E98E B5                                   or	l
 221+ E98F C8                                   ret	z				; integer	is zero, return 0...
 222+ E990 CB 7C                                bit	7,h
 223+ E992 20 03                                jr	nz, negative_int
 224+ E994 3E 01                                ld	a,1
 225+ E996 C9                                   ret
 226+ E997 3E FF        negative_int:		    ld	a,-1
 227+ E999 C9                                   ret
 228+ E99A
 229+ E99A
 230+ E99A              ; ******************************************************************************
 231+ E99A              ;
 232+ E99A              ;	ABS (Absolute value) of 16 bit signed integer.
 233+ E99A              ;
 234+ E99A              ;	IN:		HL =	integer
 235+ E99A              ;	OUT:		HL =	converted	integer
 236+ E99A              ;
 237+ E99A              ;	Registers	changed after return:
 238+ E99A              ;	A.BCDE../IXIY	same
 239+ E99A              ;	.F....HL/....	different
 240+ E99A              ;
 241+ E99A CB 7C        absValue:			    bit	7,h
 242+ E99C C8                                   ret	z				; integer	is positive...
 243+ E99D D5                                   push	de
 244+ E99E EB                                   ex	de,hl
 245+ E99F 21 00 00                             ld	hl,0
 246+ E9A2 BF                                   cp	a				; Fc	= 0,	may not be used...
 247+ E9A3 ED 52                                sbc	hl,de			; convert	negative integer
 248+ E9A5 D1                                   pop	de
 249+ E9A6 C9                                   ret
 250+ E9A7
# file closed: ./Layer2Graphics/l2_draw_line_v2.asm
1238  E9A7              ; Bank 56  ------------------------------------------------------------------------------------------------------------------------
1239  E9A7                  SLOT    CommanderAddr
1240  E9A7                  PAGE    BankCommander
1241  E9A7                  ORG     CommanderAddr, BankCommander
1242  E000                  INCLUDE "./Commander/commanderData.asm"
# file opened: ./Commander/commanderData.asm
   1+ E000 43 4F 4D 4D  commanderPage           DB  "COMMANDERPAGE 56"
   1+ E004 41 4E 44 45
   1+ E008 52 50 41 47
   1+ E00C 45 20 35 36
   2+ E010 4A 41 4D 45  defaultName		        DB	"JAMESON",0
   2+ E014 53 4F 4E 00
   3+ E018 10 0F 11 00  defaultStock	        DB $10, $0F, $11, $00, $03, $1C,$0E, $00, $00, $0A, $00, $11,$3A, $07, $09, $08, $00;
   3+ E01C 03 1C 0E 00
   3+ E020 00 0A 00 11
   3+ E024 3A 07 09 08
   3+ E028 00
   4+ E029 4A 5A 48 02  defaultSeeds	        DB $4a, $5a, $48, $02, $53, $b7
   4+ E02D 53 B7
   5+ E02F              defaultHomeX	        equ $14
   6+ E02F              defaultHomeY	        equ $AD
   7+ E02F
   8+ E02F               ; For now hard laod, later correctlt sequence gneeral vars and dma fill with 0 for a start
   9+ E02F 11 29 9C     defaultCommander:       ld		de,CommanderName				;set commander name
  10+ E032 21 10 E0                             ld		hl,defaultName
  11+ E035 01 08 00                             ld		bc,8
  12+ E038 ED B0                                ldir
  13+ E03A 11 29 9A                             ld		de,GalaxySeeds
  14+ E03D 21 29 E0                             ld		hl,defaultSeeds
  15+ E040 01 08 00                             ld		bc,8
  16+ E043 ED B0                                ldir
  17+ E045 3E 14                                ld		a,defaultHomeX
  18+ E047 32 2F 9A                             ld		(PresentSystemX),a
  19+ E04A 32 31 9A                             ld		(TargetSystemX),a
  20+ E04D 3E AD                                ld		a,defaultHomeY
  21+ E04F 32 30 9A                             ld		(PresentSystemY),a
  22+ E052 32 32 9A                             ld		(TargetSystemY),a
  23+ E055              	; testing
  24+ E055 21 ED 98                             ld		hl,IndexedWork
  25+ E058 CD 0C 9E                             call	copy_galaxy_to_system
  26+ E05B CD CC 9E                             call	find_present_system
  27+ E05E CD 2F 9E                             call	copy_working_to_galaxy
  28+ E061 01 60 EA                             ld      bc,60000
  29+ E064 ED 43 71 9D                          ld      (Cash),bc
  30+ E068 01 00 00                             ld		bc,0
  31+ E06B ED 43 73 9D                          ld		(Cash+2), bc                    ; cash no longer big endian
  32+ E06F 3E 46                                ld		a,MaxFuelLevel
  33+ E071 32 75 9D                             ld		(Fuel),a
  34+ E074 3E 5B                                ld      a,BankGalaxyData0
  35+ E076 32 1C 9A                             ld		(Galaxy),a
  36+ E079 AF                                   xor		a
  37+ E07A 21 B4 9D                             ld      hl,EquipmentFitted
  38+ E07D 06 1A                                ld      b, EQ_ITEM_COUNT
  39+ E07F 77           .ClearFittedLooop:      ld      (hl),a
  40+ E080 23                                   inc     hl
  41+ E081 10 FC                                djnz    .ClearFittedLooop
  42+ E083                                      SetAFalse
  42+ E083 3E FF       >                        ld      a,$FF
  43+ E085 32 BE 9D                             ld      (EquipmentFitted+EQ_FRONT_PULSE),a
  44+ E088 32 3E 9A                             ld		(MissionData),a						;The Plan/Mission
  45+ E08B AF                                   xor     a
  46+ E08C 32 77 9D                             ld		(LaserList+1),a
  47+ E08F 32 78 9D                             ld		(LaserList+2),a
  48+ E092 32 79 9D                             ld		(LaserList+3),a
  49+ E095 3E 0A                                ld      a,EQ_FRONT_PULSE
  50+ E097 32 76 9D                             ld		(LaserList),a
  51+ E09A AF                                   xor     a
  52+ E09B 32 B7 9D                             ld		(ECMPresent),a
  53+ E09E 32 CE 9D                             ld		(FuelScoopsBarrelStatus),a
  54+ E0A1 32 BA 9D                             ld		(EnergyBomb),a
  55+ E0A4 32 BB 9D                             ld		(ExtraEnergyUnit),a
  56+ E0A7 32 BC 9D                             ld		(DockingComputer),a
  57+ E0AA 32 BD 9D                             ld		(GalacticHyperDrive),a
  58+ E0AD 32 B9 9D                             ld		(EscapePod),a
  59+ E0B0 32 93 99                             ld      (FugitiveInnocentStatus),a
  60+ E0B3 32 A6 99                             ld		(KillTally),a
  61+ E0B6 32 EE 99                             ld      (OuterHyperCount),a
  62+ E0B9 32 ED 99                             ld      (InnerHyperCount),a
  63+ E0BC 3D                                   dec		a								; now a = 255
  64+ E0BD 32 22 9C                             ld		(ForeShield),a
  65+ E0C0 32 23 9C                             ld		(AftShield),a
  66+ E0C3 32 24 9C                             ld		(PlayerEnergy),a
  67+ E0C6 3E 14                                ld		a,20
  68+ E0C8 32 7A 9D                             ld		(CargoBaySize),a
  69+ E0CB CD DF E0                             call	ZeroCargo						; Clear out cargo
  70+ E0CE                                      ; more to DO
  71+ E0CE C9                                   ret
  72+ E0CF
  73+ E0CF              ; Set a = 2 * (slaves + narcotics) + firearms
  74+ E0CF 3A 7F 9D     calculateBadness:       ld      a,(SlaveCargoTonnes)            ; Badness = 2(slaves + narcotics)
  75+ E0D2 47                                   ld      b,a                             ; .
  76+ E0D3 3A 82 9D                             ld      a,(NarcoticsCargoTonnes)        ; .
  77+ E0D6 80                                   add     b                               ; .
  78+ E0D7 CB 27                                sla     a                               ; .
  79+ E0D9 47                                   ld      b,a                             ;
  80+ E0DA 3A 86 9D                             ld      a,(FirearmsCargoTonnes)         ; Badness += firearms tonns
  81+ E0DD 80                                   add     b
  82+ E0DE C9                                   ret
  83+ E0DF
# file closed: ./Commander/commanderData.asm
1243  E0DF                  INCLUDE "./Commander/zero_player_cargo.asm"
# file opened: ./Commander/zero_player_cargo.asm
   1+ E0DF              ZeroCargo:
   2+ E0DF AF           		xor		a							;zero-out cargo, including gems.
   3+ E0E0 06 10        		ld		b,16						;all the way up to alien items
   4+ E0E2 21 7C 9D     		ld		hl,CargoTonnes   			; cargo levels
   5+ E0E5              .ZeroLoop:
   6+ E0E5 77                   ld      (hl),a
   7+ E0E6 23           		inc		hl
   8+ E0E7 10 FC        		djnz	.ZeroLoop
   9+ E0E9 C9           		ret
  10+ E0EA
# file closed: ./Commander/zero_player_cargo.asm
1244  E0EA              ; Bank 58  ------------------------------------------------------------------------------------------------------------------------
1245  E0EA                  SLOT    LAYER1Addr
1246  E0EA                  PAGE    BankLAYER1
1247  E0EA                  ORG     LAYER1Addr, BankLAYER1
1248  E000
1249  E000                  INCLUDE "./Layer1Graphics/layer1_attr_utils.asm"
# file opened: ./Layer1Graphics/layer1_attr_utils.asm
   1+ E000
   2+ E000 00 58        L1AttrRow00:            DW $5800                    ;Row 1    */
   3+ E002 20 58        L1AttrRow01:            DW $5820                    ;Row 2    */
   4+ E004 40 58        L1AttrRow02:            DW $5840                    ;Row 3    */
   5+ E006 60 58        L1AttrRow03:            DW $5860                    ;Row 4    */
   6+ E008 80 58        L1AttrRow04:            DW $5880                    ;Row 5    */
   7+ E00A A0 58        L1AttrRow05:            DW $58A0                    ;Row 6    */
   8+ E00C C0 58        L1AttrRow06:            DW $58C0                    ;Row 7    */
   9+ E00E E0 58        L1AttrRow07:            DW $58E0                    ;Row 8    */
  10+ E010 00 59        L1AttrRow08:            DW $5900                    ;Row 9    */
  11+ E012 20 59        L1AttrRow09:            DW $5920                    ;Row 10   */
  12+ E014 40 59        L1AttrRow10:            DW $5940                    ;Row 11   */
  13+ E016 60 59        L1AttrRow11:            DW $5960                    ;Row 12   */
  14+ E018 80 59        L1AttrRow12:            DW $5980                    ;Row 13   */
  15+ E01A A0 59        L1AttrRow13:            DW $59A0                    ;Row 14   */
  16+ E01C C0 59        L1AttrRow14:            DW $59C0                    ;Row 15   */
  17+ E01E E0 59        L1AttrRow15:            DW $59E0                    ;Row 16   */
  18+ E020 00 5A        L1AttrRow16:            DW $5A00                    ;Row 17   */
  19+ E022 20 5A        L1AttrRow17:            DW $5A20                    ;Row 18   */
  20+ E024 40 5A        L1AttrRow18:            DW $5A40                    ;Row 19   */
  21+ E026 60 5A        L1AttrRow19:            DW $5A60                    ;Row 20   */
  22+ E028 80 5A        L1AttrRow20:            DW $5A80                    ;Row 21   */
  23+ E02A A0 5A        L1AttrRow21:            DW $5AA0                    ;Row 22   */
  24+ E02C C0 5A        L1AttrRow22:            DW $5AC0                    ;Row 23   */
  25+ E02E E0 5A        L1AttrRow23:            DW $5AE0                    ;Row 23   */
  26+ E030
  27+ E030              ; "l2_hilight_row, d = row, e = colour"
  28+ E030 21 00 E0     l1_hilight_row:         ld      hl, L1AttrRow00
  29+ E033 4B                                   ld      c,e
  30+ E034 7A                                   ld      a,d
  31+ E035 CB 27                                sla     a
  32+ E037 ED 31                                add     hl,a
  33+ E039 7E                                   ld      a,(hl)
  34+ E03A 5F                                   ld      e,a
  35+ E03B 23                                   inc     hl
  36+ E03C 7E                                   ld      a,(hl)
  37+ E03D 57                                   ld      d,a
  38+ E03E EB                                   ex      hl,de
  39+ E03F 79                                   ld		a,c
  40+ E040 11 20 00                             ld		de, 32
  41+ E043 CD 28 95                             call	memfill_dma
  42+ E046 C9                                   ret
  43+ E047
# file closed: ./Layer1Graphics/layer1_attr_utils.asm
1250  E047                  INCLUDE "./Layer1Graphics/layer1_cls.asm"
# file opened: ./Layer1Graphics/layer1_cls.asm
   1+ E047 AF           l1_cls_top:             xor     a
   2+ E048 21 00 40                             ld      hl, $4000
   3+ E04B 11 00 08                             ld      de, $0800
   4+ E04E CD 28 95                             call    memfill_dma
   5+ E051 C9                                   ret
   6+ E052
   7+ E052 AF           l1_cls_mid:             xor     a
   8+ E053 21 00 48                             ld      hl, $4800
   9+ E056 11 00 08                             ld      de, $0800
  10+ E059 CD 28 95                             call    memfill_dma
  11+ E05C C9                                   ret
  12+ E05D
  13+ E05D AF           l1_cls_bottom:          xor     a
  14+ E05E 21 00 50                             ld      hl, $5000
  15+ E061 11 00 08                             ld      de, $0800
  16+ E064 CD 28 95                             call    memfill_dma
  17+ E067 C9                                   ret
  18+ E068
  19+ E068              ; Designed specifically to clear a whole character aligned line
  20+ E068 1E 00        l1_cls_line_d:          ld      e,0
  21+ E06A ED 94                                pixelad
  22+ E06C 11 00 01                             ld      de,32 * 8
  23+ E06F AF                                   xor     a
  24+ E070 CD 28 95                             call    memfill_dma
  25+ E073 C9                                   ret
  26+ E074
  27+ E074              ; Designed specifically to clear a whole character aligned 2 lines line, used for say clearing hyperspace message
  28+ E074 1E 00        l1_cls_2_lines_d:       ld      e,0
  29+ E076 ED 94                                pixelad
  30+ E078 11 00 02                             ld      de,32 * 16
  31+ E07B AF                                   xor     a
  32+ E07C CD 28 95                             call    memfill_dma
  33+ E07F C9                                   ret
  34+ E080
  35+ E080 AF           l1_cls:                 xor		a
  36+ E081 21 00 40     l1_cls_to_a:            ld		hl,	$4000
  37+ E084 11 00 18                             ld		de, $1800
  38+ E087 CD 28 95                             call	memfill_dma
  39+ E08A C9                                   ret
  40+ E08B
  41+ E08B 21 00 58     l1_attr_cls_2DlinesA:   ld		hl,	$5800
  42+ E08E 1E 20                                ld      e,32
  43+ E090 ED 30                                mul
  44+ E092 19                                   add     hl,de
  45+ E093 11 40 00                             ld		de, 32 * 2
  46+ E096 CD 28 95                             call	memfill_dma
  47+ E099 C9                                   ret
  48+ E09A
  49+ E09A
  50+ E09A AF           l1_attr_cls:            xor		a
  51+ E09B 21 00 58     l1_attr_cls_to_a:       ld		hl,	$5800
  52+ E09E 11 00 03                             ld		de, $0300
  53+ E0A1 CD 28 95                             call	memfill_dma
  54+ E0A4 C9                                   ret
  55+ E0A5
  56+ E0A5 01 FE FE     l1_set_border:          ld	    bc, 0xFEFE
  57+ E0A8 ED 79                                out		(c),a
  58+ E0AA C9                                   ret
# file closed: ./Layer1Graphics/layer1_cls.asm
1251  E0AB                  INCLUDE "./Layer1Graphics/layer1_print_at.asm"
# file opened: ./Layer1Graphics/layer1_print_at.asm
   1+ E0AB              ; "l1 print char a = character, de = Ypixel Xchar of print"
   2+ E0AB D5 E5        l1_print_char:          push	de,,hl
   3+ E0AD ED 94                                pixelad								; hl = address of de
   4+ E0AF E5                                   push	hl							; save hl for loop
   5+ E0B0 26 00                                ld		h,0
   6+ E0B2 6F                                   ld		l,a
   7+ E0B3 29                                   add		hl,hl						; * 2
   8+ E0B4 29                                   add		hl,hl						; * 4
   9+ E0B5 29                                   add		hl,hl						; * 8 to get byte address
  10+ E0B6 ED 34 00 3C                          add		hl,charactersetaddr			; hl = address of rom char
  11+ E0BA EB                                   ex		de,hl						; save address into de
  12+ E0BB E1                                   pop		hl							; get back hl for loop
  13+ E0BC 06 08                                ld		b,8							; do 8 rows
  14+ E0BE 1A           .PrintCharLoop:         ld		a,(de)						; row byte
  15+ E0BF 13                                   inc		de							; next byte
  16+ E0C0 77                                   ld		(hl),a						; poke to screen
  17+ E0C1 ED 93                                pixeldn								; Down 1 row
  18+ E0C3 10 F9                                djnz	.PrintCharLoop				; loop for 8 bytes
  19+ E0C5 E1 D1                                pop		de,,hl					    ; restore hl
  20+ E0C7 C9                                   ret
  21+ E0C8
  22+ E0C8              ; "l1 PrintAt, pixel row, whole char col, DE = yx, HL = message Addr"
  23+ E0C8              ; now skips ascii code < 32 but moves on cursor by 1 char
  24+ E0C8              l1_print_at:
  25+ E0C8 7E           .PrintLoop:             ld		a,(hl)
  26+ E0C9 FE 00                                cp		0
  27+ E0CB C8                                   ret		z
  28+ E0CC                                      CallIfAGTENusng " ", l1_print_char
  28+ E0CC FE 20       >                        cp      " "
  28+ E0CE D4 AB E0    >                        call	nc,l1_print_char
  29+ E0D1 23                                   inc		hl							; move 1 message character right
  30+ E0D2 7B                                   ld		a,e
  31+ E0D3 C6 08                                add		a,8
  32+ E0D5 5F                                   ld		e,a							; move 1 screen character right
  33+ E0D6 18 F0                                jr		.PrintLoop
  34+ E0D8              .Clearstackandfinish:   ;pop		de                      ; TODO LOOOKS TO BE A ROGUE POPDE
  35+ E0D8 C9                                   ret
  36+ E0D9
  37+ E0D9              ;l1_print_at_wrap:
  38+ E0D9              ;; "l1 PrintAt, pixel row, whole char col, DE = yx, HL = message Addr"
  39+ E0D9              ;	ld      iyh,e
  40+ E0D9              ;.PrintLoop:
  41+ E0D9              ;	ld		a,(hl)
  42+ E0D9              ;	cp		0
  43+ E0D9              ;	ret		z
  44+ E0D9              ;.CountWordCharLen
  45+ E0D9              ;; Need to change to word wrap, so it will loop through string as before
  46+ E0D9              ;; but read up until a null or space, take the character count * 8 for pixels
  47+ E0D9              ;; if that is > 238 then force a premature line wrap
  48+ E0D9              ;
  49+ E0D9              ;
  50+ E0D9              ;    push    iy
  51+ E0D9              ;    call	l1_print_char
  52+ E0D9              ;    pop     iy
  53+ E0D9              ;	inc		hl							; move 1 message character right
  54+ E0D9              ;	ld		a,e
  55+ E0D9              ;    cp      238
  56+ E0D9              ;    jr      nc,.NextLine
  57+ E0D9              ;	add		a,8
  58+ E0D9              ;	ld		e,a							; move 1 screen character right
  59+ E0D9              ;	jr		.PrintLoop
  60+ E0D9              ;.Clearstackandfinish:
  61+ E0D9              ;	pop		de
  62+ E0D9              ;	ret
  63+ E0D9              ;.NextLine:
  64+ E0D9              ;    ld      a,(hl)
  65+ E0D9              ;    cp      " "
  66+ E0D9              ;    ld      e,iyh
  67+ E0D9              ;    ld      a,d
  68+ E0D9              ;    add     a,8
  69+ E0D9              ;    ld      d,a
  70+ E0D9              ;    jr		.PrintLoop
  71+ E0D9
  72+ E0D9              ; Counts next word at hl, uses e and forces a wrap if it would over flow puts value in c
  73+ E0D9 E5           L1LenWordAtHL:          push    hl
  74+ E0DA D5                                   push    de
  75+ E0DB 7E           .CountLoop:             ld      a,(hl)
  76+ E0DC FE 00                                cp      0
  77+ E0DE 28 0F                                jr      z,.CountDone
  78+ E0E0 FE 20                                cp      32
  79+ E0E2 28 0B                                jr      z,.CountDone
  80+ E0E4 7B                                   ld      a,e
  81+ E0E5 C6 08                                add     a,8
  82+ E0E7 5F                                   ld      e,a
  83+ E0E8 FE EE                                cp      238
  84+ E0EA 30 07                                jr      nc,.TooLong
  85+ E0EC 23                                   inc     hl
  86+ E0ED 18 EC                                jr      .CountLoop
  87+ E0EF D1           .CountDone:             pop     de
  88+ E0F0 E1                                   pop     hl
  89+ E0F1 AF                                   xor     a
  90+ E0F2 C9                                   ret
  91+ E0F3 D1           .TooLong                pop     de
  92+ E0F4 E1                                   pop     hl
  93+ E0F5 3E FF                                ld      a,$FF
  94+ E0F7 C9                                   ret
  95+ E0F8
  96+ E0F8 7E           L1PrintWordAtHL:        ld      a,(hl)
  97+ E0F9 FE 00                                cp      0
  98+ E0FB C8                                   ret     z
  99+ E0FC FE 20                                cp      32
 100+ E0FE 28 0F                                jr      z,.ItsASpace
 101+ E100 FD E5                                push    iy
 102+ E102 CD AB E0                             call	l1_print_char
 103+ E105 FD E1                                pop     iy
 104+ E107 7B                                   ld      a,e
 105+ E108 C6 08                                add     a,8
 106+ E10A 5F                                   ld      e,a
 107+ E10B 23                                   inc     hl
 108+ E10C C3 F8 E0                             jp      L1PrintWordAtHL
 109+ E10F 23           .ItsASpace:             inc     hl      ;  Just a bodge for now
 110+ E110 7B                                   ld      a,e
 111+ E111 C6 08                                add     a,8
 112+ E113 5F                                   ld      e,a
 113+ E114 C9                                   ret
 114+ E115
 115+ E115
 116+ E115              ; "l1 PrintAt, pixel row, whole char col, DE = yx, HL = message Addr"
 117+ E115              ; Now has full word level wrapping
 118+ E115 FD 63        l1_print_at_wrap:       ld      iyh,e
 119+ E117 7E           .PrintLoop:             ld		a,(hl)
 120+ E118 FE 00                                cp		0
 121+ E11A C8                                   ret		z
 122+ E11B CD D9 E0     .CountWordCharLen:      call    L1LenWordAtHL
 123+ E11E FE FF                                cp      $FF
 124+ E120 28 06                                jr      z,.WrapNextLine
 125+ E122 CD F8 E0     .NotTooLong:            call    L1PrintWordAtHL
 126+ E125              ; Need to change to word wrap, so it will loop through string as before
 127+ E125              ; but read up until a null or space, take the character count * 8 for pixels
 128+ E125              ; if that is > 238 then force a premature line wrap
 129+ E125 18 F0                                jr		.PrintLoop
 130+ E127              .Clearstackandfinish:   ;op		de
 131+ E127 C9                                   ret
 132+ E128              .WrapNextLine:
 133+ E128 FD 5C        .NextLine:              ld      e,iyh
 134+ E12A 7A                                   ld      a,d
 135+ E12B C6 08                                add     a,8
 136+ E12D 57                                   ld      d,a
 137+ E12E 18 E7                                jr		.PrintLoop
 138+ E130
 139+ E130
# file closed: ./Layer1Graphics/layer1_print_at.asm
1252  E130              ; Bank 59  ------------------------------------------------------------------------------------------------------------------------
1253  E130              ; In the first copy of the banks the "Non number" labels exist. They will map directly in other banks
1254  E130              ; as the is aligned and data tables are after that
1255  E130              ; need to make the ship index tables same size in each to simplify further
1256  E130                  SLOT    ShipModelsAddr
1257  E130                  PAGE    BankShipModels1
1258  E130              	ORG     ShipModelsAddr, BankShipModels1
1259  E000                  INCLUDE "./Data/ShipModelMacros.asm"
# file opened: ./Data/ShipModelMacros.asm
   1+ E000              MShipBankTable          MACRO
   2+ E000 ~                                    DW      BankShipModels1
   3+ E000 ~                                    DW      BankShipModels2
   4+ E000 ~                                    DW      BankShipModels3
   5+ E000 ~                                    DW      BankShipModels4
   6+ E000                                      ENDM
   7+ E000              ; For ship number A fetch
   8+ E000              ;           the adjusted ship number in B , C = original number
   9+ E000              ;           bank number in A for the respective ship based on the ship table
  10+ E000              MGetShipBankId:         MACRO   banktable
  11+ E000 ~                                    ld      b,0
  12+ E000 ~                                    ld      c,a                                 ; c= original ship id
  13+ E000 ~            .ShiftLoop:             srl     a
  14+ E000 ~                                    srl     a
  15+ E000 ~                                    srl     a
  16+ E000 ~                                    srl     a                                   ; divide by 16
  17+ E000 ~                                    ld      b,a                                 ; b = bank nbr
  18+ E000 ~                                    ld      a,c
  19+ E000 ~                                    ld      d,b
  20+ E000 ~                                    ld      e,16
  21+ E000 ~                                    mul                                         ; de = 16 * bank number (max is about 15 banks)
  22+ E000 ~                                    sub     e                                   ; a= actual model id now
  23+ E000 ~            .SelectedBank:          ld      d,b                                 ; save current bank number
  24+ E000 ~                                    ld      b,a                                 ; b = adjusted ship nbr
  25+ E000 ~                                    ld      a,d                                 ; a = bank number
  26+ E000 ~            ;.. Now b = bank and a = adjusted ship nbr
  27+ E000 ~                                    ld      hl,banktable                        ; a= bank index
  28+ E000 ~                                    add     hl,a
  29+ E000 ~                                    add     hl,a
  30+ E000 ~                                    ld      a,(hl)                              ; a = actual bank now
  31+ E000 ~                                    ClearCarryFlag
  32+ E000 ~                                    ret
  33+ E000                                      ENDM
  34+ E000
  35+ E000              McopyVertsToUniverse:   MACRO
  36+ E000 ~                                    ld          hl,(VerticesAddyAddr)       ; now the pointers are in Ubnk its easy to read
  37+ E000 ~                                    ld          de,UBnkHullVerticies
  38+ E000 ~                                    ld          b,0
  39+ E000 ~                                    ld			a,(VertexCtX6Addr)
  40+ E000 ~                                    ld          c,a
  41+ E000 ~                                    ex          de,hl                       ; dma transfer goes de -> hl i.e. opposite of ldir
  42+ E000 ~                                    call        memcopy_dma
  43+ E000 ~                                    ret
  44+ E000                                      ENDM
  45+ E000
  46+ E000              McopyEdgesToUniverse:   MACRO
  47+ E000 ~                                    ld          hl,(EdgeAddyAddr)          ; now the pointers are in Ubnk its easy to read
  48+ E000 ~                                    ld          de,UBnkHullEdges
  49+ E000 ~                                    ld          b,0
  50+ E000 ~                                    ld			a,(LineX4Addr)
  51+ E000 ~                                    ld          c,a
  52+ E000 ~                                    ex          de,hl                       ; dma transfer goes de -> hl i.e. opposite of ldir
  53+ E000 ~                                    call        memcopy_dma
  54+ E000 ~                                    ret
  55+ E000                                      ENDM
  56+ E000
  57+ E000              McopyNormsToUniverse:   MACRO
  58+ E000 ~                                    ld          hl,(FaceAddyAddr)          ; now the pointers are in Ubnk its easy to read
  59+ E000 ~                                    ld          de,UBnkHullNormals
  60+ E000 ~                                    ld          b,0
  61+ E000 ~                                    ld          a,(FaceCtX4Addr)
  62+ E000 ~                                    ld          c,a
  63+ E000 ~                                    ex          de,hl                       ; dma transfer goes de -> hl i.e. opposite of ldir
  64+ E000 ~                                    call        memcopy_dma
  65+ E000 ~                                    ret
  66+ E000                                      ENDM
  67+ E000
  68+ E000              ; Passes in ship nbr in A and bank is part of MACRO
  69+ E000              MCopyShipToUniverse:    MACRO       banklabel
  70+ E000 ~                                    ld          hl,UBnkShipModelBank
  71+ E000 ~                                    ld          (hl),banklabel
  72+ E000 ~                                    ld          (UBnkShipModelNbr),a
  73+ E000 ~            .GetHullDataLength:     ld          hl,ShipModelSizeTable
  74+ E000 ~                                    add         hl,a
  75+ E000 ~                                    add         hl,a                        ; we won't multiply by 2 as GetInfo is a general purpose routines so would end up x 4
  76+ E000 ~                                    ld          c,(hl)
  77+ E000 ~                                    inc         hl
  78+ E000 ~                                    ld          b,(hl)                      ; bc now equals length of data set
  79+ E000 ~            .GetHullDataAddress:    ld          hl,ShipModelTable
  80+ E000 ~                                    add         hl,a
  81+ E000 ~                                    add         hl,a                        ; now hl = address of ship data value
  82+ E000 ~                                    ld          a,(hl)
  83+ E000 ~                                    inc         hl
  84+ E000 ~                                    ld          h,(hl)
  85+ E000 ~                                    ld          l,a                         ; now hl = address of ship hull data
  86+ E000 ~                                    ld          de,UBnkHullCopy             ; Universe bank
  87+ E000 ~                                    ld          bc,ShipDataLength
  88+ E000 ~                                    ldir
  89+ E000 ~                                    call        CopyVertsToUniv
  90+ E000 ~                                    call        CopyEdgesToUniv
  91+ E000 ~                                    call        CopyNormsToUniv
  92+ E000 ~                                    ret
  93+ E000                                      ENDM
  94+ E000
  95+ E000              MCopyBodyToUniverse:    MACRO       copyRoutine
  96+ E000 ~                                    ld          a,13
  97+ E000 ~                                    call        copyRoutine
  98+ E000 ~                                    ret
  99+ E000                                      ENDM
 100+ E000
 101+ E000
 102+ E000              MCopyShipIdToUniverse:  MACRO
 103+ E000 ~                                    call        GetShipModelId
 104+ E000 ~                                    MMUSelectShipBankA
 105+ E000 ~                                    ld          a,b
 106+ E000 ~                                    jp          CopyShipToUniverse
 107+ E000                                      ENDM
# file closed: ./Data/ShipModelMacros.asm
1260  E000                  INCLUDE "./Data/ShipBank1Label.asm"
# file opened: ./Data/ShipBank1Label.asm
   1+ E000 53 68 69 70  ShipBank1Label:         DB  "ShipBank1      "
   1+ E004 42 61 6E 6B
   1+ E008 31 20 20 20
   1+ E00C 20 20 20
   2+ E00F
# file closed: ./Data/ShipBank1Label.asm
1261  E00F              GetShipBankId:
1262  E00F              GetShipBank1Id:        MGetShipBankId ShipBankTable
1262  E00F 06 00       >                        ld      b,0
1262  E011 4F          >                        ld      c,a                                 ; c= original ship id
1262  E012 CB 3F       >.ShiftLoop:             srl     a
1262  E014 CB 3F       >                        srl     a
1262  E016 CB 3F       >                        srl     a
1262  E018 CB 3F       >                        srl     a                                   ; divide by 16
1262  E01A 47          >                        ld      b,a                                 ; b = bank nbr
1262  E01B 79          >                        ld      a,c
1262  E01C 50          >                        ld      d,b
1262  E01D 1E 10       >                        ld      e,16
1262  E01F ED 30       >                        mul                                         ; de = 16 * bank number (max is about 15 banks)
1262  E021 93          >                        sub     e                                   ; a= actual model id now
1262  E022 50          >.SelectedBank:          ld      d,b                                 ; save current bank number
1262  E023 47          >                        ld      b,a                                 ; b = adjusted ship nbr
1262  E024 7A          >                        ld      a,d                                 ; a = bank number
1262  E025             >;.. Now b = bank and a = adjusted ship nbr
1262  E025 21 62 E0    >                        ld      hl,ShipBankTable                        ; a= bank index
1262  E028 ED 31       >                        add     hl,a
1262  E02A ED 31       >                        add     hl,a
1262  E02C 7E          >                        ld      a,(hl)                              ; a = actual bank now
1262  E02D             >                        ClearCarryFlag
1262  E02D B7          >                        or a
1262  E02E C9          >                        ret
1263  E02F              CopyVertsToUniv:
1264  E02F              CopyVertsToUniv1:       McopyVertsToUniverse
1264  E02F 2A 20 C3    >                        ld          hl,(VerticesAddyAddr)       ; now the pointers are in Ubnk its easy to read
1264  E032 11 25 C3    >                        ld          de,UBnkHullVerticies
1264  E035 06 00       >                        ld          b,0
1264  E037 3A 14 C3    >                        ld			a,(VertexCtX6Addr)
1264  E03A 4F          >                        ld          c,a
1264  E03B EB          >                        ex          de,hl                       ; dma transfer goes de -> hl i.e. opposite of ldir
1264  E03C CD 4E 95    >                        call        memcopy_dma
1264  E03F C9          >                        ret
1265  E040              CopyEdgesToUniv:
1266  E040              CopyEdgesToUniv1:       McopyEdgesToUniverse
1266  E040 2A 0F C3    >                        ld          hl,(EdgeAddyAddr)          ; now the pointers are in Ubnk its easy to read
1266  E043 11 51 C4    >                        ld          de,UBnkHullEdges
1266  E046 06 00       >                        ld          b,0
1266  E048 3A 11 C3    >                        ld			a,(LineX4Addr)
1266  E04B 4F          >                        ld          c,a
1266  E04C EB          >                        ex          de,hl                       ; dma transfer goes de -> hl i.e. opposite of ldir
1266  E04D CD 4E 95    >                        call        memcopy_dma
1266  E050 C9          >                        ret
1267  E051              CopyNormsToUniv:
1268  E051              CopyNormsToUniv1:       McopyNormsToUniverse
1268  E051 2A 1C C3    >                        ld          hl,(FaceAddyAddr)          ; now the pointers are in Ubnk its easy to read
1268  E054 11 01 C9    >                        ld          de,UBnkHullNormals
1268  E057 06 00       >                        ld          b,0
1268  E059 3A 18 C3    >                        ld          a,(FaceCtX4Addr)
1268  E05C 4F          >                        ld          c,a
1268  E05D EB          >                        ex          de,hl                       ; dma transfer goes de -> hl i.e. opposite of ldir
1268  E05E CD 4E 95    >                        call        memcopy_dma
1268  E061 C9          >                        ret
1269  E062              ShipBankTable:
1270  E062              ShipBankTable1:         MShipBankTable
1270  E062 3B 00       >                        DW      BankShipModels1
1270  E064 43 00       >                        DW      BankShipModels2
1270  E066 44 00       >                        DW      BankShipModels3
1270  E068 45 00       >                        DW      BankShipModels4
1271  E06A              CopyShipToUniverse:
1272  E06A              CopyShipToUniverse1     MCopyShipToUniverse     BankShipModels1
1272  E06A 21 2D C0    >                        ld          hl,UBnkShipModelBank
1272  E06D 36 3B       >                        ld          (hl),BankShipModels1
1272  E06F 32 2E C0    >                        ld          (UBnkShipModelNbr),a
1272  E072 21 1F E1    >.GetHullDataLength:     ld          hl,ShipModelSizeTable
1272  E075 ED 31       >                        add         hl,a
1272  E077 ED 31       >                        add         hl,a                        ; we won't multiply by 2 as GetInfo is a general purpose routines so would end up x 4
1272  E079 4E          >                        ld          c,(hl)
1272  E07A 23          >                        inc         hl
1272  E07B 46          >                        ld          b,(hl)                      ; bc now equals length of data set
1272  E07C 21 9F E0    >.GetHullDataAddress:    ld          hl,ShipModelTable
1272  E07F ED 31       >                        add         hl,a
1272  E081 ED 31       >                        add         hl,a                        ; now hl = address of ship data value
1272  E083 7E          >                        ld          a,(hl)
1272  E084 23          >                        inc         hl
1272  E085 66          >                        ld          h,(hl)
1272  E086 6F          >                        ld          l,a                         ; now hl = address of ship hull data
1272  E087 11 0C C3    >                        ld          de,UBnkHullCopy             ; Universe bank
1272  E08A 01 19 00    >                        ld          bc,ShipDataLength
1272  E08D ED B0       >                        ldir
1272  E08F CD 2F E0    >                        call        CopyVertsToUniv
1272  E092 CD 40 E0    >                        call        CopyEdgesToUniv
1272  E095 CD 51 E0    >                        call        CopyNormsToUniv
1272  E098 C9          >                        ret
1273  E099              CopyBodyToUniverse:
1274  E099              CopyBodyToUniverse1:    MCopyBodyToUniverse     CopyShipToUniverse1
1274  E099 3E 0D       >                        ld          a,13
1274  E09B CD 6A E0    >                        call        CopyShipToUniverse1
1274  E09E C9          >                        ret
1275  E09F                  INCLUDE "./Data/ShipModelMetaData1.asm"
# file opened: ./Data/ShipModelMetaData1.asm
   1+ E09F              ShipModelTable:
   2+ E09F 3F E1        ShipModelTable1:         DW Adder                                   ;00
   3+ E0A1 74 E2                                 DW Anaconda                                ;01
   4+ E0A3 7B E3                                 DW Asp_Mk_2                                ;02
   5+ E0A5 A6 E4                                 DW Boa                                     ;03
   6+ E0A7
   7+ E0A7 9D E5                                 DW CargoType5                              ;04
   8+ E0A9 4A E6                                 DW Boulder                                 ;05
   9+ E0AB F1 E6                                 DW Asteroid                                ;06
  10+ E0AD
  11+ E0AD CC E7                                 DW Bushmaster                              ;07
  12+ E0AF 9D E8                                 DW Chameleon                               ;08
  13+ E0B1 CA E9                                 DW CobraMk3                                ;09
  14+ E0B3 57 EB                                 DW Cobra_Mk_1                              ;10
  15+ E0B5 22 EC                                 DW Cobra_Mk_3_P                            ;11
  16+ E0B7 AF ED                                 DW Constrictor                             ;12
  17+ E0B9 B6 EE                                 DW Coriolis                                ;13
  18+ E0BB D7 EF                                 DW Cougar                                  ;14
  19+ E0BD DE F0                                 DW Dodo                                    ;15
  20+ E0BF              ShipVertexTable:
  21+ E0BF 58 E1        ShipVertexTable1:        DW AdderVertices
  22+ E0C1 8D E2                                 DW AnacondaVertices
  23+ E0C3 94 E3                                 DW Asp_Mk_2Vertices
  24+ E0C5 BF E4                                 DW BoaVertices
  25+ E0C7
  26+ E0C7 B6 E5                                 DW CargoType5Vertices
  27+ E0C9 63 E6                                 DW BoulderVertices
  28+ E0CB 0A E7                                 DW AsteroidVertices
  29+ E0CD
  30+ E0CD E5 E7                                 DW BushmasterVertices
  31+ E0CF B6 E8                                 DW ChameleonVertices
  32+ E0D1 E3 E9                                 DW CobraMk3Vertices
  33+ E0D3 70 EB                                 DW Cobra_Mk_1Vertices
  34+ E0D5 3B EC                                 DW Cobra_Mk_3_PVertices
  35+ E0D7 C8 ED                                 DW ConstrictorVertices
  36+ E0D9 CF EE                                 DW CoriolisVertices
  37+ E0DB F0 EF                                 DW CougarVertices
  38+ E0DD F7 F0                                 DW DodoVertices
  39+ E0DF              ShipEdgeTable:
  40+ E0DF C4 E1        ShipEdgeTable1:          DW AdderEdges
  41+ E0E1 E7 E2                                 DW AnacondaEdges
  42+ E0E3 06 E4                                 DW Asp_Mk_2Edges
  43+ E0E5 0D E5                                 DW BoaEdges
  44+ E0E7
  45+ E0E7 F2 E5                                 DW CargoType5Edges
  46+ E0E9 8D E6                                 DW BoulderEdges
  47+ E0EB 40 E7                                 DW AsteroidEdges
  48+ E0ED
  49+ E0ED 2D E8                                 DW BushmasterEdges
  50+ E0EF 22 E9                                 DW ChameleonEdges
  51+ E0F1 8B EA                                 DW CobraMk3Edges
  52+ E0F3 B2 EB                                 DW Cobra_Mk_1Edges
  53+ E0F5 E3 EC                                 DW Cobra_Mk_3_PEdges
  54+ E0F7 2E EE                                 DW ConstrictorEdges
  55+ E0F9 2F EF                                 DW CoriolisEdges
  56+ E0FB 62 F0                                 DW CougarEdges
  57+ E0FD 87 F1                                 DW DodoEdges
  58+ E0FF              ShipNormalTable:
  59+ E0FF 38 E2        ShipNormalTable1:        DW AdderNormals
  60+ E101 4B E3                                 DW AnacondaNormals
  61+ E103 76 E4                                 DW Asp_Mk_2Normals
  62+ E105 6D E5                                 DW BoaNormals
  63+ E107
  64+ E107 2E E6                                 DW CargoType5Normals
  65+ E109 C9 E6                                 DW BoulderNormals
  66+ E10B 94 E7                                 DW AsteroidNormals
  67+ E10D
  68+ E10D 79 E8                                 DW BushmasterNormals
  69+ E10F 96 E9                                 DW ChameleonNormals
  70+ E111 23 EB                                 DW CobraMk3Normals
  71+ E113 FA EB                                 DW Cobra_Mk_1Normals
  72+ E115 7B ED                                 DW Cobra_Mk_3_PNormals
  73+ E117 8E EE                                 DW ConstrictorNormals
  74+ E119 9F EF                                 DW CoriolisNormals
  75+ E11B C6 F0                                 DW CougarNormals
  76+ E11D 0F F2                                 DW DodoNormals
  77+ E11F              ShipModelSizeTable:
  78+ E11F 35 01        ShipModelSizeTable1:     DW AdderLen
  79+ E121 07 01                                 DW AnacondaLen
  80+ E123 2B 01                                 DW Asp_Mk_2Len
  81+ E125 F7 00                                 DW BoaLen
  82+ E127
  83+ E127 AD 00                                 DW CargoType5Len
  84+ E129 A7 00                                 DW BoulderLen
  85+ E12B DB 00                                 DW AsteroidLen
  86+ E12D
  87+ E12D D1 00                                 DW BushmasterLen
  88+ E12F 2D 01                                 DW ChameleonLen
  89+ E131 8D 01                                 DW CobraMk3Len
  90+ E133 CB 00                                 DW Cobra_Mk_1Len
  91+ E135 8D 01                                 DW Cobra_Mk_3_PLen
  92+ E137 07 01                                 DW ConstrictorLen
  93+ E139 21 01                                 DW CoriolisLen
  94+ E13B 07 01                                 DW CougarLen
  95+ E13D 61 01                                 DW DodoLen
  96+ E13F
  97+ E13F                                      include "Data/ships/Adder.asm"
# file opened: ./Data/ships/Adder.asm
   1++E13F 00 09 C4     Adder:	                DB $00, $09, $C4
   2++E142 C4 E1                                DW AdderEdges
   3++E144 74                                   DB AdderEdgesSize
   4++E145 00 16                                DB $00, $16
   5++E147 6C                                   DB AdderVertSize
   6++E148 1D                                   DB AdderEdgesCnt
   7++E149 00 28                                DB $00, $28
   8++E14B 3C                                   DB AdderNormalsSize
   9++E14C 17 48 18                             DB $17, $48, $18
  10++E14F 38 E2                                DW AdderNormals
  11++E151 02 21                                DB $02, $21
  12++E153 58 E1                                DW AdderVertices
  13++E155 00 00                                DB 0,0                      ; Type and Tactics
  14++E157 01                                   DB ShipCanAnger
  15++E158 12 00 28 9F  AdderVertices:	        DB $12, $00, $28, $9F, $01, $BC     ;01
  15++E15C 01 BC
  16++E15E 12 00 28 1F                          DB $12, $00, $28, $1F, $01, $23     ;02
  16++E162 01 23
  17++E164 1E 00 18 3F                          DB $1E, $00, $18, $3F, $23, $45     ;03
  17++E168 23 45
  18++E16A 1E 00 28 3F                          DB $1E, $00, $28, $3F, $45, $66     ;04
  18++E16E 45 66
  19++E170 12 07 28 7F                          DB $12, $07, $28, $7F, $56, $7E     ;05
  19++E174 56 7E
  20++E176 12 07 28 FF                          DB $12, $07, $28, $FF, $78, $AE     ;06
  20++E17A 78 AE
  21++E17C 1E 00 28 BF                          DB $1E, $00, $28, $BF, $89, $AA     ;07
  21++E180 89 AA
  22++E182 1E 00 18 BF                          DB $1E, $00, $18, $BF, $9A, $BC     ;08
  22++E186 9A BC
  23++E188 12 07 28 BF                          DB $12, $07, $28, $BF, $78, $9D     ;09
  23++E18C 78 9D
  24++E18E 12 07 28 3F                          DB $12, $07, $28, $3F, $46, $7D     ;10
  24++E192 46 7D
  25++E194 12 07 0D 9F                          DB $12, $07, $0D, $9F, $09, $BD     ;11
  25++E198 09 BD
  26++E19A 12 07 0D 1F                          DB $12, $07, $0D, $1F, $02, $4D     ;12
  26++E19E 02 4D
  27++E1A0 12 07 0D DF                          DB $12, $07, $0D, $DF, $1A, $CE     ;13
  27++E1A4 1A CE
  28++E1A6 12 07 0D 5F                          DB $12, $07, $0D, $5F, $13, $5E     ;14
  28++E1AA 13 5E
  29++E1AC 0B 03 1D 85                          DB $0B, $03, $1D, $85, $00, $00     ;15
  29++E1B0 00 00
  30++E1B2 0B 03 1D 05                          DB $0B, $03, $1D, $05, $00, $00     ;16
  30++E1B6 00 00
  31++E1B8 0B 04 18 04                          DB $0B, $04, $18, $04, $00, $00     ;17
  31++E1BC 00 00
  32++E1BE 0B 04 18 84                          DB $0B, $04, $18, $84, $00, $00     ;18
  32++E1C2 00 00
  33++E1C4              AdderVertSize:          equ $ - AdderVertices
  34++E1C4 1F 01 00 04  AdderEdges:	            DB $1F, $01, $00, $04               ;01
  35++E1C8 07 23 04 08                          DB $07, $23, $04, $08               ;02
  36++E1CC 1F 45 08 0C                          DB $1F, $45, $08, $0C               ;03
  37++E1D0 1F 56 0C 10                          DB $1F, $56, $0C, $10               ;04
  38++E1D4 1F 7E 10 14                          DB $1F, $7E, $10, $14               ;05
  39++E1D8 1F 8A 14 18                          DB $1F, $8A, $14, $18               ;06
  40++E1DC 1F 9A 18 1C                          DB $1F, $9A, $18, $1C               ;07
  41++E1E0 07 BC 1C 00                          DB $07, $BC, $1C, $00               ;08
  42++E1E4 1F 46 0C 24                          DB $1F, $46, $0C, $24               ;09
  43++E1E8 1F 7D 24 20                          DB $1F, $7D, $24, $20               ;10
  44++E1EC 1F 89 20 18                          DB $1F, $89, $20, $18               ;11
  45++E1F0 1F 0B 00 28                          DB $1F, $0B, $00, $28               ;12
  46++E1F4 1F 9B 1C 28                          DB $1F, $9B, $1C, $28               ;13
  47++E1F8 1F 02 04 2C                          DB $1F, $02, $04, $2C               ;14
  48++E1FC 1F 24 08 2C                          DB $1F, $24, $08, $2C               ;15
  49++E200 1F 1C 00 30                          DB $1F, $1C, $00, $30               ;16
  50++E204 1F AC 1C 30                          DB $1F, $AC, $1C, $30               ;17
  51++E208 1F 13 04 34                          DB $1F, $13, $04, $34               ;18
  52++E20C 1F 35 08 34                          DB $1F, $35, $08, $34               ;19
  53++E210 1F 0D 28 2C                          DB $1F, $0D, $28, $2C               ;20
  54++E214 1F 1E 30 34                          DB $1F, $1E, $30, $34               ;21
  55++E218 1F 9D 20 28                          DB $1F, $9D, $20, $28               ;22
  56++E21C 1F 4D 24 2C                          DB $1F, $4D, $24, $2C               ;23
  57++E220 1F AE 14 30                          DB $1F, $AE, $14, $30               ;24
  58++E224 1F 5E 10 34                          DB $1F, $5E, $10, $34               ;25
  59++E228 05 00 38 3C                          DB $05, $00, $38, $3C               ;26
  60++E22C 03 00 3C 40                          DB $03, $00, $3C, $40               ;27
  61++E230 04 00 40 44                          DB $04, $00, $40, $44               ;28
  62++E234 03 00 44 38                          DB $03, $00, $44, $38               ;29
  63++E238              AdderEdgesSize:         equ $ - AdderEdges
  64++E238              AdderEdgesCnt:          equ AdderEdgesSize/4
  65++E238 1F 00 27 0A  AdderNormals:	        DB $1F, $00, $27, $0A               ;01
  66++E23C 5F 00 27 0A                          DB $5F, $00, $27, $0A               ;02
  67++E240 1F 45 32 0D                          DB $1F, $45, $32, $0D               ;03
  68++E244 5F 45 32 0D                          DB $5F, $45, $32, $0D               ;04
  69++E248 1F 1E 34 00                          DB $1F, $1E, $34, $00               ;05
  70++E24C 5F 1E 34 00                          DB $5F, $1E, $34, $00               ;06
  71++E250 3F 00 00 A0                          DB $3F, $00, $00, $A0               ;07
  72++E254 3F 00 00 A0                          DB $3F, $00, $00, $A0               ;08
  73++E258 3F 00 00 A0                          DB $3F, $00, $00, $A0               ;09
  74++E25C 9F 1E 34 00                          DB $9F, $1E, $34, $00               ;10
  75++E260 DF 1E 34 00                          DB $DF, $1E, $34, $00               ;11
  76++E264 9F 45 32 0D                          DB $9F, $45, $32, $0D               ;12
  77++E268 DF 45 32 0D                          DB $DF, $45, $32, $0D               ;13
  78++E26C 1F 00 1C 00                          DB $1F, $00, $1C, $00               ;14
  79++E270 5F 00 1C 00                          DB $5F, $00, $1C, $00               ;15
  80++E274
  81++E274              AdderNormalsSize:       equ $ - AdderNormals
  82++E274              AdderLen:                equ $ - Adder
  83++E274
  84++E274
  85++E274
  86++E274
  87++E274
  88++E274
  89++E274
  90++E274
  91++E274
  92++E274
  93++E274
# file closed: ./Data/ships/Adder.asm
  98+ E274                                      include "Data/ships/Anaconda.asm"
# file opened: ./Data/ships/Anaconda.asm
   1++E274 07 27 10     Anaconda:	            DB $07, $27, $10
   2++E277 E7 E2                                DW AnacondaEdges
   3++E279 64                                   DB AnacondaEdgesSize
   4++E27A 30 2E                                DB $30, $2E
   5++E27C 5A                                   DB AnacondaVertSize
   6++E27D 19                                   DB AnacondaEdgesCnt
   7++E27E 00 00                                DB $00, $00
   8++E280 30                                   DB AnacondaNormalsSize
   9++E281 24 FC 0E                             DB $24, $FC, $0E
  10++E284 4B E3                                DW AnacondaNormals
  11++E286 01 3F                                DB $01, $3F
  12++E288 8D E2                                DW AnacondaVertices
  13++E28A 00 00                                DB 0,0                      ; Type and Tactics
  14++E28C 01                                   DB ShipCanAnger
  15++E28D 00 07 3A 3E  AnacondaVertices:	    DB $00, $07, $3A, $3E, $01, $55 ;01
  15++E291 01 55
  16++E293 2B 0D 25 FE                          DB $2B, $0D, $25, $FE, $01, $22 ;02
  16++E297 01 22
  17++E299 1A 2F 03 FE                          DB $1A, $2F, $03, $FE, $02, $33 ;03
  17++E29D 02 33
  18++E29F 1A 2F 03 7E                          DB $1A, $2F, $03, $7E, $03, $44 ;04
  18++E2A3 03 44
  19++E2A5 2B 0D 25 7E                          DB $2B, $0D, $25, $7E, $04, $55 ;05
  19++E2A9 04 55
  20++E2AB 00 30 31 3E                          DB $00, $30, $31, $3E, $15, $66 ;06
  20++E2AF 15 66
  21++E2B1 45 0F 0F BE                          DB $45, $0F, $0F, $BE, $12, $77 ;07
  21++E2B5 12 77
  22++E2B7 2B 27 28 DF                          DB $2B, $27, $28, $DF, $23, $88 ;08
  22++E2BB 23 88
  23++E2BD 2B 27 28 5F                          DB $2B, $27, $28, $5F, $34, $99 ;09
  23++E2C1 34 99
  24++E2C3 45 0F 0F 3E                          DB $45, $0F, $0F, $3E, $45, $AA ;10
  24++E2C7 45 AA
  25++E2C9 2B 35 17 BF                          DB $2B, $35, $17, $BF, $FF, $FF ;11
  25++E2CD FF FF
  26++E2CF 45 01 20 DF                          DB $45, $01, $20, $DF, $27, $88 ;12
  26++E2D3 27 88
  27++E2D5 00 00 FE 1F                          DB $00, $00, $FE, $1F, $FF, $FF ;13
  27++E2D9 FF FF
  28++E2DB 45 01 20 5F                          DB $45, $01, $20, $5F, $49, $AA ;14
  28++E2DF 49 AA
  29++E2E1 2B 35 17 3F                          DB $2B, $35, $17, $3F, $FF, $FF ;15
  29++E2E5 FF FF
  30++E2E7              AnacondaVertSize:       equ $ - AnacondaVertices
  31++E2E7 1E 01 00 04  AnacondaEdges:	        DB $1E, $01, $00, $04           ;01
  32++E2EB 1E 02 04 08                          DB $1E, $02, $04, $08           ;02
  33++E2EF 1E 03 08 0C                          DB $1E, $03, $08, $0C           ;03
  34++E2F3 1E 04 0C 10                          DB $1E, $04, $0C, $10           ;04
  35++E2F7 1E 05 00 10                          DB $1E, $05, $00, $10           ;05
  36++E2FB 1D 15 00 14                          DB $1D, $15, $00, $14           ;06
  37++E2FF 1D 12 04 18                          DB $1D, $12, $04, $18           ;07
  38++E303 1D 23 08 1C                          DB $1D, $23, $08, $1C           ;08
  39++E307 1D 34 0C 20                          DB $1D, $34, $0C, $20           ;09
  40++E30B 1D 45 10 24                          DB $1D, $45, $10, $24           ;10
  41++E30F 1E 16 14 28                          DB $1E, $16, $14, $28           ;11
  42++E313 1E 17 18 28                          DB $1E, $17, $18, $28           ;12
  43++E317 1E 27 18 2C                          DB $1E, $27, $18, $2C           ;13
  44++E31B 1E 28 1C 2C                          DB $1E, $28, $1C, $2C           ;14
  45++E31F 1F 38 1C 30                          DB $1F, $38, $1C, $30           ;15
  46++E323 1F 39 20 30                          DB $1F, $39, $20, $30           ;16
  47++E327 1E 49 20 34                          DB $1E, $49, $20, $34           ;17
  48++E32B 1E 4A 24 34                          DB $1E, $4A, $24, $34           ;18
  49++E32F 1E 5A 24 38                          DB $1E, $5A, $24, $38
  50++E333 1E 56 14 38                          DB $1E, $56, $14, $38
  51++E337 1E 6B 28 38                          DB $1E, $6B, $28, $38
  52++E33B 1F 7B 28 30                          DB $1F, $7B, $28, $30
  53++E33F 1F 78 2C 30                          DB $1F, $78, $2C, $30
  54++E343 1F 9A 30 34                          DB $1F, $9A, $30, $34
  55++E347 1F AB 30 38                          DB $1F, $AB, $30, $38
  56++E34B              AnacondaEdgesSize:      equ $ - AnacondaEdges
  57++E34B              AnacondaEdgesCnt:       equ AnacondaEdgesSize/4
  58++E34B 7E 00 33 31  AnacondaNormals:	    DB $7E, $00, $33, $31           ;01
  59++E34F BE 33 12 57                          DB $BE, $33, $12, $57           ;02
  60++E353 FE 4D 39 13                          DB $FE, $4D, $39, $13           ;03
  61++E357 5F 00 5A 10                          DB $5F, $00, $5A, $10           ;04
  62++E35B 7E 4D 39 13                          DB $7E, $4D, $39, $13           ;05
  63++E35F 3E 33 12 57                          DB $3E, $33, $12, $57           ;06
  64++E363 3E 00 6F 14                          DB $3E, $00, $6F, $14           ;07
  65++E367 9F 61 48 18                          DB $9F, $61, $48, $18           ;08
  66++E36B DF 6C 44 22                          DB $DF, $6C, $44, $22           ;09
  67++E36F 5F 6C 44 22                          DB $5F, $6C, $44, $22           ;10
  68++E373 1F 61 48 18                          DB $1F, $61, $48, $18           ;11
  69++E377 1F 00 5E 12                          DB $1F, $00, $5E, $12           ;12
  70++E37B              AnacondaNormalsSize:    equ $ - AnacondaNormals
  71++E37B              AnacondaLen:            equ $ - Anaconda
  72++E37B
  73++E37B
  74++E37B
  75++E37B
# file closed: ./Data/ships/Anaconda.asm
  99+ E37B                                      include "Data/ships/Asp_Mk_2.asm"
# file opened: ./Data/ships/Asp_Mk_2.asm
   1++E37B 00 0E 10     Asp_Mk_2:	           DB $00, $0E, $10
   2++E37E 06 E4                                DW Asp_Mk_2Edges
   3++E380 70                                   DB Asp_Mk_2EdgesSize
   4++E381 20 1A                                DB $20, $1A
   5++E383 72                                   DB Asp_Mk_2VertSize
   6++E384 1C                                   DB Asp_Mk_2EdgesCnt
   7++E385 00 C8                                DB $00, $C8
   8++E387 30                                   DB Asp_Mk_2NormalsSize
   9++E388 28 96 28                             DB $28, $96, $28
  10++E38B 76 E4                                DW Asp_Mk_2Normals
  11++E38D 01 29                                DB $01, $29
  12++E38F 94 E3                                DW Asp_Mk_2Vertices
  13++E391 00 00                                DB 0,0                      ; Type and Tactics
  14++E393 01                                   DB ShipCanAnger
  15++E394 00 12 00 56  Asp_Mk_2Vertices:	    DB $00, $12, $00, $56, $01, $22 ;01
  15++E398 01 22
  16++E39A 00 09 2D 7F                          DB $00, $09, $2D, $7F, $12, $BB ;02
  16++E39E 12 BB
  17++E3A0 2B 00 2D 3F                          DB $2B, $00, $2D, $3F, $16, $BB ;03
  17++E3A4 16 BB
  18++E3A6 45 03 00 5F                          DB $45, $03, $00, $5F, $16, $79 ;04
  18++E3AA 16 79
  19++E3AC 2B 0E 1C 5F                          DB $2B, $0E, $1C, $5F, $01, $77 ;05
  19++E3B0 01 77
  20++E3B2 2B 00 2D BF                          DB $2B, $00, $2D, $BF, $25, $BB ;06
  20++E3B6 25 BB
  21++E3B8 45 03 00 DF                          DB $45, $03, $00, $DF, $25, $8A ;07
  21++E3BC 25 8A
  22++E3BE 2B 0E 1C DF                          DB $2B, $0E, $1C, $DF, $02, $88 ;08
  22++E3C2 02 88
  23++E3C4 1A 07 49 5F                          DB $1A, $07, $49, $5F, $04, $79 ;09
  23++E3C8 04 79
  24++E3CA 1A 07 49 DF                          DB $1A, $07, $49, $DF, $04, $8A ;10
  24++E3CE 04 8A
  25++E3D0 2B 0E 1C 1F                          DB $2B, $0E, $1C, $1F, $34, $69 ;11
  25++E3D4 34 69
  26++E3D6 2B 0E 1C 9F                          DB $2B, $0E, $1C, $9F, $34, $5A ;12
  26++E3DA 34 5A
  27++E3DC 00 09 2D 3F                          DB $00, $09, $2D, $3F, $35, $6B ;13
  27++E3E0 35 6B
  28++E3E2 11 00 2D AA                          DB $11, $00, $2D, $AA, $BB, $BB ;14
  28++E3E6 BB BB
  29++E3E8 11 00 2D 29                          DB $11, $00, $2D, $29, $BB, $BB ;15
  29++E3EC BB BB
  30++E3EE 00 04 2D 6A                          DB $00, $04, $2D, $6A, $BB, $BB ;16
  30++E3F2 BB BB
  31++E3F4 00 04 2D 28                          DB $00, $04, $2D, $28, $BB, $BB ;17
  31++E3F8 BB BB
  32++E3FA 00 07 49 4A                          DB $00, $07, $49, $4A, $04, $04 ;18
  32++E3FE 04 04
  33++E400 00 07 53 4A                          DB $00, $07, $53, $4A, $04, $04
  33++E404 04 04
  34++E406              Asp_Mk_2VertSize:       equ $ - Asp_Mk_2Vertices
  35++E406 16 12 00 04  Asp_Mk_2Edges:	        DB $16, $12, $00, $04           ;01
  36++E40A 16 01 00 10                          DB $16, $01, $00, $10           ;02
  37++E40E 16 02 00 1C                          DB $16, $02, $00, $1C           ;03
  38++E412 1F 1B 04 08                          DB $1F, $1B, $04, $08           ;04
  39++E416 1F 16 08 0C                          DB $1F, $16, $08, $0C           ;05
  40++E41A 10 79 0C 20                          DB $10, $79, $0C, $20           ;06
  41++E41E 1F 04 20 24                          DB $1F, $04, $20, $24           ;07
  42++E422 10 8A 18 24                          DB $10, $8A, $18, $24           ;08
  43++E426 1F 25 14 18                          DB $1F, $25, $14, $18           ;09
  44++E42A 1F 2B 04 14                          DB $1F, $2B, $04, $14           ;10
  45++E42E 1F 17 0C 10                          DB $1F, $17, $0C, $10           ;11
  46++E432 1F 07 10 20                          DB $1F, $07, $10, $20           ;12
  47++E436 1F 28 18 1C                          DB $1F, $28, $18, $1C           ;13
  48++E43A 1F 08 1C 24                          DB $1F, $08, $1C, $24           ;14
  49++E43E 1F 6B 08 30                          DB $1F, $6B, $08, $30           ;15
  50++E442 1F 5B 14 30                          DB $1F, $5B, $14, $30           ;16
  51++E446 16 36 28 30                          DB $16, $36, $28, $30           ;17
  52++E44A 16 35 2C 30                          DB $16, $35, $2C, $30           ;18
  53++E44E 16 34 28 2C                          DB $16, $34, $28, $2C
  54++E452 1F 5A 18 2C                          DB $1F, $5A, $18, $2C
  55++E456 1F 4A 24 2C                          DB $1F, $4A, $24, $2C
  56++E45A 1F 69 0C 28                          DB $1F, $69, $0C, $28
  57++E45E 1F 49 20 28                          DB $1F, $49, $20, $28
  58++E462 0A BB 34 3C                          DB $0A, $BB, $34, $3C
  59++E466 09 BB 3C 38                          DB $09, $BB, $3C, $38
  60++E46A 08 BB 38 40                          DB $08, $BB, $38, $40
  61++E46E 08 BB 40 34                          DB $08, $BB, $40, $34
  62++E472 0A 04 48 44                          DB $0A, $04, $48, $44
  63++E476              Asp_Mk_2EdgesSize:      equ $ - Asp_Mk_2Edges
  64++E476              Asp_Mk_2EdgesCnt:       equ Asp_Mk_2EdgesSize/4
  65++E476 5F 00 23 05  Asp_Mk_2Normals:	    DB $5F, $00, $23, $05           ;01
  66++E47A 7F 08 26 07                          DB $7F, $08, $26, $07           ;02
  67++E47E FF 08 26 07                          DB $FF, $08, $26, $07           ;03
  68++E482 36 00 18 01                          DB $36, $00, $18, $01           ;04
  69++E486 1F 00 2B 13                          DB $1F, $00, $2B, $13           ;05
  70++E48A BF 06 1C 02                          DB $BF, $06, $1C, $02           ;06
  71++E48E 3F 06 1C 02                          DB $3F, $06, $1C, $02           ;07
  72++E492 5F 3B 40 1F                          DB $5F, $3B, $40, $1F           ;08
  73++E496 DF 3B 40 1F                          DB $DF, $3B, $40, $1F           ;09
  74++E49A 1F 50 2E 32                          DB $1F, $50, $2E, $32           ;10
  75++E49E 9F 50 2E 32                          DB $9F, $50, $2E, $32           ;11
  76++E4A2 3F 00 00 5A                          DB $3F, $00, $00, $5A           ;12
  77++E4A6              Asp_Mk_2NormalsSize:    equ $ - Asp_Mk_2Normals
  78++E4A6              Asp_Mk_2Len:            equ $ - Asp_Mk_2
  79++E4A6
  80++E4A6
  81++E4A6
  82++E4A6
# file closed: ./Data/ships/Asp_Mk_2.asm
 100+ E4A6                                      include "Data/ships/Boa.asm"
# file opened: ./Data/ships/Boa.asm
   1++E4A6 05 13 24     Boa:	                DB $05, $13, $24
   2++E4A9 0D E5                                DW BoaEdges
   3++E4AB 60                                   DB BoaEdgesSize
   4++E4AC 00 26                                DB $00, $26
   5++E4AE 4E                                   DB BoaVertSize
   6++E4AF 18                                   DB BoaEdgesCnt
   7++E4B0 00 00                                DB $00, $00
   8++E4B2 30                                   DB BoaNormalsSize
   9++E4B3 28 FA 18                             DB $28, $FA, $18
  10++E4B6 6D E5                                DW BoaNormals
  11++E4B8 00 1C                                DB $00, $1C
  12++E4BA BF E4                                DW BoaVertices
  13++E4BC 00 00                                DB 0,0                      ; Type and Tactics
  14++E4BE 01                                   DB ShipCanAnger
  15++E4BF 00 00 5D 1F  BoaVertices:	        DB $00, $00, $5D, $1F, $FF, $FF
  15++E4C3 FF FF
  16++E4C5 00 28 57 38                          DB $00, $28, $57, $38, $02, $33
  16++E4C9 02 33
  17++E4CB 26 19 63 78                          DB $26, $19, $63, $78, $01, $44
  17++E4CF 01 44
  18++E4D1 26 19 63 F8                          DB $26, $19, $63, $F8, $12, $55
  18++E4D5 12 55
  19++E4D7 26 28 3B BF                          DB $26, $28, $3B, $BF, $23, $69
  19++E4DB 23 69
  20++E4DD 26 28 3B 3F                          DB $26, $28, $3B, $3F, $03, $6B
  20++E4E1 03 6B
  21++E4E3 3E 00 43 3F                          DB $3E, $00, $43, $3F, $04, $8B
  21++E4E7 04 8B
  22++E4E9 18 41 4F 7F                          DB $18, $41, $4F, $7F, $14, $8A
  22++E4ED 14 8A
  23++E4EF 18 41 4F FF                          DB $18, $41, $4F, $FF, $15, $7A
  23++E4F3 15 7A
  24++E4F5 3E 00 43 BF                          DB $3E, $00, $43, $BF, $25, $79
  24++E4F9 25 79
  25++E4FB 00 07 6B 36                          DB $00, $07, $6B, $36, $02, $AA
  25++E4FF 02 AA
  26++E501 0D 09 6B 76                          DB $0D, $09, $6B, $76, $01, $AA
  26++E505 01 AA
  27++E507 0D 09 6B F6                          DB $0D, $09, $6B, $F6, $12, $CC
  27++E50B 12 CC
  28++E50D              BoaVertSize:            equ $ - BoaVertices
  29++E50D 1F 6B 00 14  BoaEdges:	            DB $1F, $6B, $00, $14
  30++E511 1F 8A 00 1C                          DB $1F, $8A, $00, $1C
  31++E515 1F 79 00 24                          DB $1F, $79, $00, $24
  32++E519 1D 69 00 10                          DB $1D, $69, $00, $10
  33++E51D 1D 8B 00 18                          DB $1D, $8B, $00, $18
  34++E521 1D 7A 00 20                          DB $1D, $7A, $00, $20
  35++E525 1F 36 10 14                          DB $1F, $36, $10, $14
  36++E529 1F 0B 14 18                          DB $1F, $0B, $14, $18
  37++E52D 1F 48 18 1C                          DB $1F, $48, $18, $1C
  38++E531 1F 1A 1C 20                          DB $1F, $1A, $1C, $20
  39++E535 1F 57 20 24                          DB $1F, $57, $20, $24
  40++E539 1F 29 10 24                          DB $1F, $29, $10, $24
  41++E53D 18 23 04 10                          DB $18, $23, $04, $10
  42++E541 18 03 04 14                          DB $18, $03, $04, $14
  43++E545 18 25 0C 24                          DB $18, $25, $0C, $24
  44++E549 18 15 0C 20                          DB $18, $15, $0C, $20
  45++E54D 18 04 08 18                          DB $18, $04, $08, $18
  46++E551 18 14 08 1C                          DB $18, $14, $08, $1C
  47++E555 16 02 04 28                          DB $16, $02, $04, $28
  48++E559 16 01 08 2C                          DB $16, $01, $08, $2C
  49++E55D 16 12 0C 30                          DB $16, $12, $0C, $30
  50++E561 0E 0C 28 2C                          DB $0E, $0C, $28, $2C
  51++E565 0E 1C 2C 30                          DB $0E, $1C, $2C, $30
  52++E569 0E 2C 30 28                          DB $0E, $2C, $30, $28
  53++E56D              BoaEdgesSize:           equ $ - BoaEdges
  54++E56D              BoaEdgesCnt:            equ BoaEdgesSize/4
  55++E56D 3F 2B 25 3C  BoaNormals:	            DB $3F, $2B, $25, $3C
  56++E571 7F 00 2D 59                          DB $7F, $00, $2D, $59
  57++E575 BF 2B 25 3C                          DB $BF, $2B, $25, $3C
  58++E579 1F 00 28 00                          DB $1F, $00, $28, $00
  59++E57D 7F 3E 20 14                          DB $7F, $3E, $20, $14
  60++E581 FF 3E 20 14                          DB $FF, $3E, $20, $14
  61++E585 1F 00 17 06                          DB $1F, $00, $17, $06
  62++E589 DF 17 0F 09                          DB $DF, $17, $0F, $09
  63++E58D 5F 17 0F 09                          DB $5F, $17, $0F, $09
  64++E591 9F 1A 0D 0A                          DB $9F, $1A, $0D, $0A
  65++E595 5F 00 1F 0C                          DB $5F, $00, $1F, $0C
  66++E599 1F 1A 0D 0A                          DB $1F, $1A, $0D, $0A
  67++E59D              BoaNormalsSize:         equ $ - BoaNormals
  68++E59D              BoaLen:                 equ $ - Boa
  69++E59D
# file closed: ./Data/ships/Boa.asm
 101+ E59D
 102+ E59D                                      include "Data/ships/CargoType5.asm"
# file opened: ./Data/ships/CargoType5.asm
   1++E59D              ;	\ Transporter hull data header info 37 vertices  6*37  = &DE
   2++E59D              ; Corrected pointers
   3++E59D              ;                      0    1    2  3  4  5   6   7   8   9   10  11  12   13  14  15   16 17 18 19    20    21
   4++E59D              ;					   Scp  Missile Edge  Lin Gun Exp Vtx Edg Bounty  Face              Face           Vertices
   5++E59D              ;                      Deb  Lock    Lo Hi x4  Vtx Cnt x6  X1  lo  hi  x4   Dot Erg Spd  Lo Hi Q  Laser Lo    hi
   6++E59D              ;;;				 Example of cargo
   7++E59D              ;;;
   8++E59D              ;;;		Points (nodes, vetices)		6 bytes per vertex
   9++E59D              ;;;     Byte 0 = X magnitide with origin at middle of ship
  10++E59D              ;;;		Byte 1 = Y magnitide with origin at middle of ship
  11++E59D              ;;;		Byte 2 = Z magnitide with origin at middle of ship
  12++E59D              ;;;		Byte 3 = Sign Bits of Vertex 7=X 6=Y 5 = Z 4 - 0 = visibility beyond which vertix is not shown
  13++E59D              ;;;		Byte 4 = High 4 bits Face 2 Index Low 4 bits = Face 1 Index
  14++E59D              ;;;		Byte 5 = High 4 bits Face 4 Index Low 4 bits = Face 3 Index
  15++E59D              ;;;		Edges
  16++E59D              ;;;		Byte 0 = Edge visbility Distance if > XX4 distance then won't show
  17++E59D              ;;;		Byte 1 = High 4 bits Face 2 Index Low 4 bits = Face 1 Index
  18++E59D              ;;;		Byte 2 = Byte offset to Point 1 (divide by 4 for index)
  19++E59D              ;;;		Byte 3 = Byte offset to Point 2 (divide by 4 for index)
  20++E59D              ;;;	  	Normals (Faces)
  21++E59D              ;;;		Byte 0 = Sign Bits of Vertex 7=X 6=Y 5 = Z, bits 4 to 0 are distance for always visible
  22++E59D              ;;;		Byte 1 = X Lo
  23++E59D              ;;;		Byte 2 = Y Lo
  24++E59D              ;;;		Byte 3 = Z Lo
  25++E59D
  26++E59D 00 90 01     CargoType5              DB $00, $90, $01
  27++E5A0 F2 E5                                DW CargoType5Edges
  28++E5A2 3C                                   DB CargoType5EdgesSize
  29++E5A3 00 12                                DB $00,$12
  30++E5A5 3C                                   DB CargoType5VertSize
  31++E5A6 0F                                   DB CargoType5EdgesCnt
  32++E5A7 00 00                                DB $00,$00
  33++E5A9 1C                                   DB CargoType5NormalsSize
  34++E5AA 0C 11 0F                             DB $0C,$11,$0F
  35++E5AD 2E E6                                DW CargoType5Normals
  36++E5AF 02 00                                DB $02,$00
  37++E5B1 B6 E5                                DW CargoType5Vertices
  38++E5B3 03                                   DB ShipTypeJunk             ; Type
  39++E5B4 00                                   DB 0                        ; Tactics
  40++E5B5 00                                   DB 0
  41++E5B6              ; So cargo is               Edge offset $0050  Face Offset $008C, Verices will alwys be +20, LineMax 31 -> 4  EdgeCnt 15  VertexCnt 60 -> 10     FaceCn 28 -> 7
  42++E5B6 18 10 00 1F  CargoType5Vertices		DB $18,$10,$00,$1F,$10,$55 	; 60 bytes in total for data
  42++E5BA 10 55
  43++E5BC 18 05 0F 1F                          DB $18,$05,$0F,$1F,$10,$22
  43++E5C0 10 22
  44++E5C2 18 0D 09 5F                          DB $18,$0D,$09,$5F,$20,$33
  44++E5C6 20 33
  45++E5C8 18 0D 09 7F                          DB $18,$0D,$09,$7F,$30,$44
  45++E5CC 30 44
  46++E5CE 18 05 0F 3F                          DB $18,$05,$0F,$3F,$40,$55   ; end of left pentagon
  46++E5D2 40 55
  47++E5D4 18 10 00 9F                          DB $18,$10,$00,$9F,$51,$66   ; start of right pentagon
  47++E5D8 51 66
  48++E5DA 18 05 0F 9F                          DB $18,$05,$0F,$9F,$21,$66
  48++E5DE 21 66
  49++E5E0 18 0D 09 DF                          DB $18,$0D,$09,$DF,$32,$66
  49++E5E4 32 66
  50++E5E6 18 0D 09 FF                          DB $18,$0D,$09,$FF,$43,$66
  50++E5EA 43 66
  51++E5EC 18 05 0F BF                          DB $18,$05,$0F,$BF,$54,$66
  51++E5F0 54 66
  52++E5F2              CargoType5VertSize      equ $  - CargoType5Vertices
  53++E5F2 1F 10 00 04  CargoType5Edges			DB $1F,$10,$00,$04,$1F,$20,$04,$08 	; 8 x 7 = 60 bytes
  53++E5F6 1F 20 04 08
  54++E5FA 1F 30 08 0C                          DB $1F,$30,$08,$0C,$1F,$40,$0C,$10
  54++E5FE 1F 40 0C 10
  55++E602 1F 50 00 10                          DB $1F,$50,$00,$10,$1F,$51,$00,$14
  55++E606 1F 51 00 14
  56++E60A 1F 21 04 18                          DB $1F,$21,$04,$18,$1F,$32,$08,$1C
  56++E60E 1F 32 08 1C
  57++E612 1F 43 0C 20                          DB $1F,$43,$0C,$20,$1F,$54,$10,$24
  57++E616 1F 54 10 24
  58++E61A 1F 61 14 18                          DB $1F,$61,$14,$18,$1F,$62,$18,$1C
  58++E61E 1F 62 18 1C
  59++E622 1F 63 1C 20                          DB $1F,$63,$1C,$20,$1F,$64,$20,$24
  59++E626 1F 64 20 24
  60++E62A 1F 65 24 14                          DB $1F,$65,$24,$14
  61++E62E              CargoType5EdgesSize     equ $  - CargoType5Edges
  62++E62E              CargoType5EdgesCnt      equ CargoType5EdgesSize / 4
  63++E62E 1F 60 00 00  CargoType5Normals    	DB $1F,$60,$00,$00
  64++E632 1F 00 29 1E                          DB $1F,$00,$29,$1E,$5F,$00,$12,$30
  64++E636 5F 00 12 30
  65++E63A 5F 00 33 00                          DB $5F,$00,$33,$00,$7F,$00,$12,$30
  65++E63E 7F 00 12 30
  66++E642 3F 00 29 1E                          DB $3F,$00,$29,$1E,$9F,$60,$00,$00   ; end Cargo cannister
  66++E646 9F 60 00 00
  67++E64A              CargoType5NormalsSize   equ $  - CargoType5Normals
  68++E64A              CargoType5Len           equ $  - CargoType5
# file closed: ./Data/ships/CargoType5.asm
 103+ E64A                                      include "Data/ships/Boulder.asm"
# file opened: ./Data/ships/Boulder.asm
   1++E64A 00 03 84     Boulder:	            DB $00, $03, $84
   2++E64D 8D E6                                DW BoulderEdges
   3++E64F 3C                                   DB BoulderEdgesSize
   4++E650 00 0E                                DB $00, $0E
   5++E652 2A                                   DB BoulderVertSize
   6++E653 0F                                   DB BoulderEdgesCnt
   7++E654 00 01                                DB $00, $01
   8++E656 28                                   DB BoulderNormalsSize
   9++E657 14 14 1E                             DB $14, $14, $1E
  10++E65A C9 E6                                DW BoulderNormals
  11++E65C 02 00                                DB $02, $00
  12++E65E 63 E6                                DW BoulderVertices
  13++E660 03 00                                DB ShipTypeJunk,0                      ; Type and Tactics  its only junk for spawing logic
  14++E662 00                                   DB 0
  15++E663 12 25 0B BF  BoulderVertices:	    DB $12, $25, $0B, $BF, $01, $59
  15++E667 01 59
  16++E669 1E 07 0C 1F                          DB $1E, $07, $0C, $1F, $12, $56
  16++E66D 12 56
  17++E66F 1C 07 0C 7F                          DB $1C, $07, $0C, $7F, $23, $67
  17++E673 23 67
  18++E675 02 00 27 3F                          DB $02, $00, $27, $3F, $34, $78
  18++E679 34 78
  19++E67B 1C 22 1E BF                          DB $1C, $22, $1E, $BF, $04, $89
  19++E67F 04 89
  20++E681 05 0A 0D 5F                          DB $05, $0A, $0D, $5F, $FF, $FF
  20++E685 FF FF
  21++E687 14 11 1E 3F                          DB $14, $11, $1E, $3F, $FF, $FF
  21++E68B FF FF
  22++E68D              BoulderVertSize:        equ $ - BoulderVertices
  23++E68D 1F 15 00 04  BoulderEdges:	        DB $1F, $15, $00, $04
  24++E691 1F 26 04 08                          DB $1F, $26, $04, $08
  25++E695 1F 37 08 0C                          DB $1F, $37, $08, $0C
  26++E699 1F 48 0C 10                          DB $1F, $48, $0C, $10
  27++E69D 1F 09 10 00                          DB $1F, $09, $10, $00
  28++E6A1 1F 01 00 14                          DB $1F, $01, $00, $14
  29++E6A5 1F 12 04 14                          DB $1F, $12, $04, $14
  30++E6A9 1F 23 08 14                          DB $1F, $23, $08, $14
  31++E6AD 1F 34 0C 14                          DB $1F, $34, $0C, $14
  32++E6B1 1F 04 10 14                          DB $1F, $04, $10, $14
  33++E6B5 1F 59 00 18                          DB $1F, $59, $00, $18
  34++E6B9 1F 56 04 18                          DB $1F, $56, $04, $18
  35++E6BD 1F 67 08 18                          DB $1F, $67, $08, $18
  36++E6C1 1F 78 0C 18                          DB $1F, $78, $0C, $18
  37++E6C5 1F 89 10 18                          DB $1F, $89, $10, $18
  38++E6C9              BoulderEdgesSize:       equ $ - BoulderEdges
  39++E6C9              BoulderEdgesCnt:        equ BoulderEdgesSize/4
  40++E6C9 DF 0F 03 08  BoulderNormals:	        DB $DF, $0F, $03, $08
  41++E6CD 9F 07 0C 1E                          DB $9F, $07, $0C, $1E
  42++E6D1 5F 20 2F 18                          DB $5F, $20, $2F, $18
  43++E6D5 FF 03 27 07                          DB $FF, $03, $27, $07
  44++E6D9 FF 05 04 01                          DB $FF, $05, $04, $01
  45++E6DD 1F 31 54 08                          DB $1F, $31, $54, $08
  46++E6E1 3F 70 15 15                          DB $3F, $70, $15, $15
  47++E6E5 7F 4C 23 52                          DB $7F, $4C, $23, $52
  48++E6E9 3F 16 38 89                          DB $3F, $16, $38, $89
  49++E6ED 3F 28 6E 26                          DB $3F, $28, $6E, $26
  50++E6F1              BoulderNormalsSize:     equ $ - BoulderNormals
  51++E6F1              BoulderLen:             equ $ - Boulder
  52++E6F1
# file closed: ./Data/ships/Boulder.asm
 104+ E6F1                                      include "Data/ships/Asteroid.asm"
# file opened: ./Data/ships/Asteroid.asm
   1++E6F1 00 19 00     Asteroid:	            DB $00, $19, $00
   2++E6F4 40 E7                                DW AsteroidEdges
   3++E6F6 54                                   DB AsteroidEdgesSize
   4++E6F7 00 22                                DB $00, $22
   5++E6F9 36                                   DB AsteroidVertSize
   6++E6FA 15                                   DB AsteroidEdgesCnt
   7++E6FB 00 05                                DB $00, $05
   8++E6FD 38                                   DB AsteroidNormalsSize
   9++E6FE 32 3C 1E                             DB $32, $3C, $1E
  10++E701 94 E7                                DW AsteroidNormals
  11++E703 01 00                                DB $01, $00
  12++E705 0A E7                                DW AsteroidVertices
  13++E707 03 00                                DB ShipTypeJunk,0                      ; Type and Tactics
  14++E709 00                                   DB 0
  15++E70A 00 50 00 1F  AsteroidVertices:	    DB $00, $50, $00, $1F, $FF, $FF ;01
  15++E70E FF FF
  16++E710 50 0A 00 DF                          DB $50, $0A, $00, $DF, $FF, $FF ;02
  16++E714 FF FF
  17++E716 00 50 00 5F                          DB $00, $50, $00, $5F, $FF, $FF ;03
  17++E71A FF FF
  18++E71C 46 28 00 5F                          DB $46, $28, $00, $5F, $FF, $FF ;04
  18++E720 FF FF
  19++E722 3C 32 00 1F                          DB $3C, $32, $00, $1F, $65, $DC ;05
  19++E726 65 DC
  20++E728 32 00 3C 1F                          DB $32, $00, $3C, $1F, $FF, $FF ;06
  20++E72C FF FF
  21++E72E 28 00 46 9F                          DB $28, $00, $46, $9F, $10, $32 ;07
  21++E732 10 32
  22++E734 00 1E 4B 3F                          DB $00, $1E, $4B, $3F, $FF, $FF ;08
  22++E738 FF FF
  23++E73A 00 32 3C 7F                          DB $00, $32, $3C, $7F, $98, $BA ;09
  23++E73E 98 BA
  24++E740              AsteroidVertSize:       equ $ - AsteroidVertices
  25++E740 1F 72 00 04  AsteroidEdges:	        DB $1F, $72, $00, $04           ;01
  26++E744 1F D6 00 10                          DB $1F, $D6, $00, $10           ;02
  27++E748 1F C5 0C 10                          DB $1F, $C5, $0C, $10           ;03
  28++E74C 1F B4 08 0C                          DB $1F, $B4, $08, $0C           ;04
  29++E750 1F A3 04 08                          DB $1F, $A3, $04, $08           ;05
  30++E754 1F 32 04 18                          DB $1F, $32, $04, $18           ;06
  31++E758 1F 31 08 18                          DB $1F, $31, $08, $18           ;07
  32++E75C 1F 41 08 14                          DB $1F, $41, $08, $14           ;08
  33++E760 1F 10 14 18                          DB $1F, $10, $14, $18           ;09
  34++E764 1F 60 00 14                          DB $1F, $60, $00, $14           ;10
  35++E768 1F 54 0C 14                          DB $1F, $54, $0C, $14           ;11
  36++E76C 1F 20 00 18                          DB $1F, $20, $00, $18           ;12
  37++E770 1F 65 10 14                          DB $1F, $65, $10, $14           ;13
  38++E774 1F A8 04 20                          DB $1F, $A8, $04, $20           ;14
  39++E778 1F 87 04 1C                          DB $1F, $87, $04, $1C           ;15
  40++E77C 1F D7 00 1C                          DB $1F, $D7, $00, $1C           ;16
  41++E780 1F DC 10 1C                          DB $1F, $DC, $10, $1C           ;17
  42++E784 1F C9 0C 1C                          DB $1F, $C9, $0C, $1C           ;18
  43++E788 1F B9 0C 20                          DB $1F, $B9, $0C, $20
  44++E78C 1F BA 08 20                          DB $1F, $BA, $08, $20
  45++E790 1F 98 1C 20                          DB $1F, $98, $1C, $20
  46++E794
  47++E794              AsteroidEdgesSize:      equ $ - AsteroidEdges
  48++E794              AsteroidEdgesCnt:       equ AsteroidEdgesSize/4
  49++E794 1F 09 42 51  AsteroidNormals:	    DB $1F, $09, $42, $51           ;01
  50++E798 5F 09 42 51                          DB $5F, $09, $42, $51           ;02
  51++E79C 9F 48 40 1F                          DB $9F, $48, $40, $1F           ;03
  52++E7A0 DF 40 49 2F                          DB $DF, $40, $49, $2F           ;04
  53++E7A4 5F 2D 4F 41                          DB $5F, $2D, $4F, $41           ;05
  54++E7A8 1F 87 0F 23                          DB $1F, $87, $0F, $23           ;06
  55++E7AC 1F 26 4C 46                          DB $1F, $26, $4C, $46           ;07
  56++E7B0 BF 42 3B 27                          DB $BF, $42, $3B, $27           ;08
  57++E7B4 FF 43 0F 50                          DB $FF, $43, $0F, $50           ;09
  58++E7B8 7F 42 0E 4B                          DB $7F, $42, $0E, $4B           ;10
  59++E7BC FF 46 50 28                          DB $FF, $46, $50, $28           ;11
  60++E7C0 7F 3A 66 33                          DB $7F, $3A, $66, $33           ;12
  61++E7C4 3F 51 09 43                          DB $3F, $51, $09, $43           ;13
  62++E7C8 3F 2F 5E 3F                          DB $3F, $2F, $5E, $3F           ;14
  63++E7CC              AsteroidNormalsSize:    equ $ - AsteroidNormals
  64++E7CC              AsteroidLen:            equ $ - Asteroid
  65++E7CC
  66++E7CC
# file closed: ./Data/ships/Asteroid.asm
 105+ E7CC
 106+ E7CC                                      include "Data/ships/Bushmaster.asm"
# file opened: ./Data/ships/Bushmaster.asm
   1++E7CC 00 10 9A     Bushmaster:	            DB $00, $10, $9A
   2++E7CF 2D E8                                DW BushmasterEdges
   3++E7D1 4C                                   DB BushmasterEdgesSize
   4++E7D2 00 1E                                DB $00, $1E
   5++E7D4 48                                   DB BushmasterVertSize
   6++E7D5 13                                   DB BushmasterEdgesCnt
   7++E7D6 00 96                                DB $00, $96
   8++E7D8 24                                   DB BushmasterNormalsSize
   9++E7D9 14 4A 23                             DB $14, $4A, $23
  10++E7DC 79 E8                                DW BushmasterNormals
  11++E7DE 02 21                                DB $02, $21
  12++E7E0 E5 E7                                DW BushmasterVertices
  13++E7E2 00 00                                DB 0,0                      ; Type and Tactics
  14++E7E4 01                                   DB ShipCanAnger
  15++E7E5 00 00 3C 1F  BushmasterVertices:	    DB $00, $00, $3C, $1F, $23, $01
  15++E7E9 23 01
  16++E7EB 32 00 14 1F                          DB $32, $00, $14, $1F, $57, $13
  16++E7EF 57 13
  17++E7F1 32 00 14 9F                          DB $32, $00, $14, $9F, $46, $02
  17++E7F5 46 02
  18++E7F7 00 14 00 1F                          DB $00, $14, $00, $1F, $45, $01
  18++E7FB 45 01
  19++E7FD 00 14 28 7F                          DB $00, $14, $28, $7F, $FF, $FF
  19++E801 FF FF
  20++E803 00 0E 28 3F                          DB $00, $0E, $28, $3F, $88, $45
  20++E807 88 45
  21++E809 28 00 28 3F                          DB $28, $00, $28, $3F, $88, $57
  21++E80D 88 57
  22++E80F 28 00 28 BF                          DB $28, $00, $28, $BF, $88, $46
  22++E813 88 46
  23++E815 00 04 28 2A                          DB $00, $04, $28, $2A, $88, $88
  23++E819 88 88
  24++E81B 0A 00 28 2A                          DB $0A, $00, $28, $2A, $88, $88
  24++E81F 88 88
  25++E821 00 04 28 6A                          DB $00, $04, $28, $6A, $88, $88
  25++E825 88 88
  26++E827 0A 00 28 AA                          DB $0A, $00, $28, $AA, $88, $88
  26++E82B 88 88
  27++E82D              BushmasterVertSize:     equ $ - BushmasterVertices
  28++E82D 1F 13 00 04  BushmasterEdges:	    DB $1F, $13, $00, $04
  29++E831 1F 02 00 08                          DB $1F, $02, $00, $08
  30++E835 1F 01 00 0C                          DB $1F, $01, $00, $0C
  31++E839 1F 23 00 10                          DB $1F, $23, $00, $10
  32++E83D 1F 45 0C 14                          DB $1F, $45, $0C, $14
  33++E841 1F 04 08 0C                          DB $1F, $04, $08, $0C
  34++E845 1F 15 04 0C                          DB $1F, $15, $04, $0C
  35++E849 1F 46 08 1C                          DB $1F, $46, $08, $1C
  36++E84D 1F 57 04 18                          DB $1F, $57, $04, $18
  37++E851 1F 26 08 10                          DB $1F, $26, $08, $10
  38++E855 1F 37 04 10                          DB $1F, $37, $04, $10
  39++E859 1F 48 14 1C                          DB $1F, $48, $14, $1C
  40++E85D 1F 58 14 18                          DB $1F, $58, $14, $18
  41++E861 1F 68 10 1C                          DB $1F, $68, $10, $1C
  42++E865 1F 78 10 18                          DB $1F, $78, $10, $18
  43++E869 0A 88 20 24                          DB $0A, $88, $20, $24
  44++E86D 0A 88 24 28                          DB $0A, $88, $24, $28
  45++E871 0A 88 28 2C                          DB $0A, $88, $28, $2C
  46++E875 0A 88 2C 20                          DB $0A, $88, $2C, $20
  47++E879              BushmasterEdgesSize:    equ $ - BushmasterEdges
  48++E879              BushmasterEdgesCnt:     equ BushmasterEdgesSize/4
  49++E879 9F 17 58 1D  BushmasterNormals:	    DB $9F, $17, $58, $1D
  50++E87D 1F 17 58 1D                          DB $1F, $17, $58, $1D
  51++E881 DF 0E 5D 12                          DB $DF, $0E, $5D, $12
  52++E885 5F 0E 5D 12                          DB $5F, $0E, $5D, $12
  53++E889 BF 1F 59 0D                          DB $BF, $1F, $59, $0D
  54++E88D 3F 1F 59 0D                          DB $3F, $1F, $59, $0D
  55++E891 FF 2A 55 07                          DB $FF, $2A, $55, $07
  56++E895 7F 2A 55 07                          DB $7F, $2A, $55, $07
  57++E899 3F 00 00 60                          DB $3F, $00, $00, $60
  58++E89D              BushmasterNormalsSize:  equ $ - BushmasterNormals
  59++E89D              BushmasterLen:          equ $ - Bushmaster
  60++E89D
# file closed: ./Data/ships/Bushmaster.asm
 107+ E89D                                      include "Data/ships/Chameleon.asm"
# file opened: ./Data/ships/Chameleon.asm
   1++E89D 03 0F A0     Chameleon:	            DB $03, $0F, $A0
   2++E8A0 22 E9                                DW ChameleonEdges
   3++E8A2 74                                   DB ChameleonEdgesSize
   4++E8A3 00 1A                                DB $00, $1A
   5++E8A5 6C                                   DB ChameleonVertSize
   6++E8A6 1D                                   DB ChameleonEdgesCnt
   7++E8A7 00 C8                                DB $00, $C8
   8++E8A9 34                                   DB ChameleonNormalsSize
   9++E8AA 0A 64 1D                             DB $0A, $64, $1D
  10++E8AD 96 E9                                DW ChameleonNormals
  11++E8AF 01 23                                DB $01, $23
  12++E8B1 B6 E8                                DW ChameleonVertices
  13++E8B3 00 00                                DB 0,0                      ; Type and Tactics
  14++E8B5 01                                   DB ShipCanAnger
  15++E8B6 12 00 6E 9F  ChameleonVertices:	    DB $12, $00, $6E, $9F, $25, $01
  15++E8BA 25 01
  16++E8BC 12 00 6E 1F                          DB $12, $00, $6E, $1F, $34, $01
  16++E8C0 34 01
  17++E8C2 28 00 00 9F                          DB $28, $00, $00, $9F, $8B, $25
  17++E8C6 8B 25
  18++E8C8 08 18 00 9F                          DB $08, $18, $00, $9F, $68, $22
  18++E8CC 68 22
  19++E8CE 08 18 00 1F                          DB $08, $18, $00, $1F, $69, $33
  19++E8D2 69 33
  20++E8D4 28 00 00 1F                          DB $28, $00, $00, $1F, $9A, $34
  20++E8D8 9A 34
  21++E8DA 08 18 00 5F                          DB $08, $18, $00, $5F, $7A, $44
  21++E8DE 7A 44
  22++E8E0 08 18 00 DF                          DB $08, $18, $00, $DF, $7B, $55
  22++E8E4 7B 55
  23++E8E6 00 18 28 1F                          DB $00, $18, $28, $1F, $36, $02
  23++E8EA 36 02
  24++E8EC 00 18 28 5F                          DB $00, $18, $28, $5F, $57, $14
  24++E8F0 57 14
  25++E8F2 20 00 28 BF                          DB $20, $00, $28, $BF, $BC, $88
  25++E8F6 BC 88
  26++E8F8 00 18 28 3F                          DB $00, $18, $28, $3F, $9C, $68
  26++E8FC 9C 68
  27++E8FE 20 00 28 3F                          DB $20, $00, $28, $3F, $AC, $99
  27++E902 AC 99
  28++E904 00 18 28 7F                          DB $00, $18, $28, $7F, $BC, $7A
  28++E908 BC 7A
  29++E90A 08 00 28 AA                          DB $08, $00, $28, $AA, $CC, $CC
  29++E90E CC CC
  30++E910 00 08 28 2A                          DB $00, $08, $28, $2A, $CC, $CC
  30++E914 CC CC
  31++E916 08 00 28 2A                          DB $08, $00, $28, $2A, $CC, $CC
  31++E91A CC CC
  32++E91C 00 08 28 6A                          DB $00, $08, $28, $6A, $CC, $CC
  32++E920 CC CC
  33++E922              ChameleonVertSize:      equ $ - ChameleonVertices
  34++E922 1F 01 00 04  ChameleonEdges:	        DB $1F, $01, $00, $04
  35++E926 1F 02 00 20                          DB $1F, $02, $00, $20
  36++E92A 1F 15 00 24                          DB $1F, $15, $00, $24
  37++E92E 1F 03 04 20                          DB $1F, $03, $04, $20
  38++E932 1F 14 04 24                          DB $1F, $14, $04, $24
  39++E936 1F 34 04 14                          DB $1F, $34, $04, $14
  40++E93A 1F 25 00 08                          DB $1F, $25, $00, $08
  41++E93E 1F 26 0C 20                          DB $1F, $26, $0C, $20
  42++E942 1F 36 10 20                          DB $1F, $36, $10, $20
  43++E946 1F 75 1C 24                          DB $1F, $75, $1C, $24
  44++E94A 1F 74 18 24                          DB $1F, $74, $18, $24
  45++E94E 1F 39 10 14                          DB $1F, $39, $10, $14
  46++E952 1F 4A 14 18                          DB $1F, $4A, $14, $18
  47++E956 1F 28 08 0C                          DB $1F, $28, $08, $0C
  48++E95A 1F 5B 08 1C                          DB $1F, $5B, $08, $1C
  49++E95E 1F 8B 08 28                          DB $1F, $8B, $08, $28
  50++E962 1F 9A 14 30                          DB $1F, $9A, $14, $30
  51++E966 1F 68 0C 2C                          DB $1F, $68, $0C, $2C
  52++E96A 1F 7B 1C 34                          DB $1F, $7B, $1C, $34
  53++E96E 1F 69 10 2C                          DB $1F, $69, $10, $2C
  54++E972 1F 7A 18 34                          DB $1F, $7A, $18, $34
  55++E976 1F 8C 28 2C                          DB $1F, $8C, $28, $2C
  56++E97A 1F BC 28 34                          DB $1F, $BC, $28, $34
  57++E97E 1F 9C 2C 30                          DB $1F, $9C, $2C, $30
  58++E982 1F AC 30 34                          DB $1F, $AC, $30, $34
  59++E986 0A CC 38 3C                          DB $0A, $CC, $38, $3C
  60++E98A 0A CC 3C 40                          DB $0A, $CC, $3C, $40
  61++E98E 0A CC 40 44                          DB $0A, $CC, $40, $44
  62++E992 0A CC 44 38                          DB $0A, $CC, $44, $38
  63++E996              ChameleonEdgesSize:     equ $ - ChameleonEdges
  64++E996              ChameleonEdgesCnt:      equ ChameleonEdgesSize/4
  65++E996 1F 00 5A 1F  ChameleonNormals:	    DB $1F, $00, $5A, $1F
  66++E99A 5F 00 5A 1F                          DB $5F, $00, $5A, $1F
  67++E99E 9F 39 4C 0B                          DB $9F, $39, $4C, $0B
  68++E9A2 1F 39 4C 0B                          DB $1F, $39, $4C, $0B
  69++E9A6 5F 39 4C 0B                          DB $5F, $39, $4C, $0B
  70++E9AA DF 39 4C 0B                          DB $DF, $39, $4C, $0B
  71++E9AE 1F 00 60 00                          DB $1F, $00, $60, $00
  72++E9B2 5F 00 60 00                          DB $5F, $00, $60, $00
  73++E9B6 BF 39 4C 0B                          DB $BF, $39, $4C, $0B
  74++E9BA 3F 39 4C 0B                          DB $3F, $39, $4C, $0B
  75++E9BE 7F 39 4C 0B                          DB $7F, $39, $4C, $0B
  76++E9C2 FF 39 4C 0B                          DB $FF, $39, $4C, $0B
  77++E9C6 3F 00 00 60                          DB $3F, $00, $00, $60
  78++E9CA              ChameleonNormalsSize:   equ $ - ChameleonNormals
  79++E9CA              ChameleonLen:           equ $ - Chameleon
  80++E9CA
# file closed: ./Data/ships/Chameleon.asm
 108+ E9CA                                      include "Data/ships/CobraMk3.asm"
# file opened: ./Data/ships/CobraMk3.asm
   1++E9CA              ; Corrected pointers
   2++E9CA              ;                      0    1    2  3  4  5   6   7   8   9   10  11  12   13  14  15   16 17 18 19    20    21
   3++E9CA              ;					   Scp  Missile Edge  Lin Gun Exp Vtx Edg Bounty  Face              Face           Vertices
   4++E9CA              ;                      Deb  Lock    Lo Hi x4  Vtx Cnt x6  X1  lo  hi  x4   Dot Erg Spd  Lo Hi Q  Laser Lo    hi
   5++E9CA 03 41 23     CobraMk3    		    DB $03, $41, $23
   6++E9CD 8B EA                                DW CobraMk3Edges
   7++E9CF 98                                   DB CobraMkEdgesSize
   8++E9D0 54 2A                                DB $54,$2A
   9++E9D2 A8                                   DB CobraMkVertSize
  10++E9D3 26                                   DB CobraMkEdgesCnt
  11++E9D4 00 00                                DB $00,$00
  12++E9D6 34                                   DB CobraMk3NormalsSize
  13++E9D7 32 96 1C                             DB $32,$96,$1C
  14++E9DA 23 EB                                DW CobraMk3Normals
  15++E9DC 01 13                                DB $01,$13
  16++E9DE E3 E9                                DW CobraMk3Vertices
  17++E9E0 00 00                                DB 0,0                      ; Type and Tactics
  18++E9E2 01                                   DB ShipCanAnger
  19++E9E3                                  ; missiles = 3
  20++E9E3 20 00 4C 1F  CobraMk3Vertices	    DB $20,$00,$4C,$1F,$FF,$FF
  20++E9E7 FF FF
  21++E9E9 20 00 4C 9F                          DB $20,$00,$4C,$9F,$FF,$FF
  21++E9ED FF FF
  22++E9EF 00 1A 18 1F                          DB $00,$1A,$18,$1F,$FF,$FF
  22++E9F3 FF FF
  23++E9F5 78 03 08 FF                          DB $78,$03,$08,$FF,$73,$AA
  23++E9F9 73 AA
  24++E9FB 78 03 08 7F                          DB $78,$03,$08,$7F,$84,$CC
  24++E9FF 84 CC
  25++EA01 58 10 28 BF                          DB $58,$10,$28,$BF,$FF,$FF
  25++EA05 FF FF
  26++EA07 58 10 28 3F                          DB $58,$10,$28,$3F,$FF,$FF
  26++EA0B FF FF
  27++EA0D 80 08 28 7F                          DB $80,$08,$28,$7F,$98,$CC
  27++EA11 98 CC
  28++EA13 80 08 28 FF                          DB $80,$08,$28,$FF,$97,$AA
  28++EA17 97 AA
  29++EA19 00 1A 28 3F                          DB $00,$1A,$28,$3F,$65,$99
  29++EA1D 65 99
  30++EA1F 20 18 28 FF                          DB $20,$18,$28,$FF,$A9,$BB
  30++EA23 A9 BB
  31++EA25 20 18 28 7F                          DB $20,$18,$28,$7F,$B9,$CC
  31++EA29 B9 CC
  32++EA2B 24 08 28 B4                          DB $24,$08,$28,$B4,$99,$99
  32++EA2F 99 99
  33++EA31 08 0C 28 B4                          DB $08,$0C,$28,$B4,$99,$99
  33++EA35 99 99
  34++EA37 08 0C 28 34                          DB $08,$0C,$28,$34,$99,$99
  34++EA3B 99 99
  35++EA3D 24 08 28 34                          DB $24,$08,$28,$34,$99,$99
  35++EA41 99 99
  36++EA43 24 0C 28 74                          DB $24,$0C,$28,$74,$99,$99
  36++EA47 99 99
  37++EA49 08 10 28 74                          DB $08,$10,$28,$74,$99,$99
  37++EA4D 99 99
  38++EA4F 08 10 28 F4                          DB $08,$10,$28,$F4,$99,$99
  38++EA53 99 99
  39++EA55 24 0C 28 F4                          DB $24,$0C,$28,$F4,$99,$99
  39++EA59 99 99
  40++EA5B 00 00 4C 06                          DB $00,$00,$4C,$06,$B0,$BB
  40++EA5F B0 BB
  41++EA61 00 00 5A 1F                          DB $00,$00,$5A,$1F,$B0,$BB
  41++EA65 B0 BB
  42++EA67 50 06 28 E8                          DB $50,$06,$28,$E8,$99,$99
  42++EA6B 99 99
  43++EA6D 50 06 28 A8                          DB $50,$06,$28,$A8,$99,$99
  43++EA71 99 99
  44++EA73 58 00 28 A6                          DB $58,$00,$28,$A6,$99,$99
  44++EA77 99 99
  45++EA79 50 06 28 28                          DB $50,$06,$28,$28,$99,$99
  45++EA7D 99 99
  46++EA7F 58 00 28 26                          DB $58,$00,$28,$26,$99,$99
  46++EA83 99 99
  47++EA85 50 06 28 68                          DB $50,$06,$28,$68,$99,$99
  47++EA89 99 99
  48++EA8B              CobraMkVertSize         equ $  - CobraMk3Vertices
  49++EA8B 1F B0 00 04  CobraMk3Edges		    DB $1F,$B0,$00,$04,$1F,$C4,$00,$10
  49++EA8F 1F C4 00 10
  50++EA93 1F A3 04 0C                          DB $1F,$A3,$04,$0C,$1F,$A7,$0C,$20
  50++EA97 1F A7 0C 20
  51++EA9B 1F C8 10 1C                          DB $1F,$C8,$10,$1C,$1F,$98,$18,$1C
  51++EA9F 1F 98 18 1C
  52++EAA3 1F 96 18 24                          DB $1F,$96,$18,$24,$1F,$95,$14,$24
  52++EAA7 1F 95 14 24
  53++EAAB 1F 97 14 20                          DB $1F,$97,$14,$20,$1F,$51,$08,$14
  53++EAAF 1F 51 08 14
  54++EAB3 1F 62 08 18                          DB $1F,$62,$08,$18,$1F,$73,$0C,$14
  54++EAB7 1F 73 0C 14
  55++EABB 1F 84 10 18                          DB $1F,$84,$10,$18,$1F,$10,$04,$08
  55++EABF 1F 10 04 08
  56++EAC3 1F 20 00 08                          DB $1F,$20,$00,$08,$1F,$A9,$20,$28
  56++EAC7 1F A9 20 28
  57++EACB 1F B9 28 2C                          DB $1F,$B9,$28,$2C,$1F,$C9,$1C,$2C
  57++EACF 1F C9 1C 2C
  58++EAD3 1F BA 04 28                          DB $1F,$BA,$04,$28,$1F,$CB,$00,$2C
  58++EAD7 1F CB 00 2C
  59++EADB 1D 31 04 14                          DB $1D,$31,$04,$14,$1D,$42,$00,$18
  59++EADF 1D 42 00 18
  60++EAE3 06 B0 50 54                          DB $06,$B0,$50,$54,$14,$99,$30,$34
  60++EAE7 14 99 30 34
  61++EAEB 14 99 48 4C                          DB $14,$99,$48,$4C,$14,$99,$38,$3C
  61++EAEF 14 99 38 3C
  62++EAF3 14 99 40 44                          DB $14,$99,$40,$44,$13,$99,$3C,$40
  62++EAF7 13 99 3C 40
  63++EAFB 11 99 38 44                          DB $11,$99,$38,$44,$13,$99,$34,$48
  63++EAFF 13 99 34 48
  64++EB03 13 99 30 4C                          DB $13,$99,$30,$4C,$1E,$65,$08,$24
  64++EB07 1E 65 08 24
  65++EB0B 06 99 58 60                          DB $06,$99,$58,$60,$06,$99,$5C,$60
  65++EB0F 06 99 5C 60
  66++EB13 08 99 58 5C                          DB $08,$99,$58,$5C,$06,$99,$64,$68
  66++EB17 06 99 64 68
  67++EB1B 06 99 68 6C                          DB $06,$99,$68,$6C,$08,$99,$64,$6C
  67++EB1F 08 99 64 6C
  68++EB23              CobraMkEdgesSize        equ $  - CobraMk3Edges
  69++EB23              CobraMkEdgesCnt         equ CobraMkEdgesSize/4
  70++EB23              ; start normals #0 = top f,$on,$ p,$at,$ o,$ C,$br,$ Mk III
  71++EB23 1F 00 3E 1F  CobraMk3Normals		    DB $1F,$00,$3E,$1F
  72++EB27 9F 12 37 10                          DB $9F,$12,$37,$10
  73++EB2B 1F 12 37 10                          DB $1F,$12,$37,$10
  74++EB2F 9F 10 34 0E                          DB $9F,$10,$34,$0E
  75++EB33 1F 10 34 0E                          DB $1F,$10,$34,$0E
  76++EB37 9F 0E 2F 00                          DB $9F,$0E,$2F,$00
  77++EB3B 1F 0E 2F 00                          DB $1F,$0E,$2F,$00
  78++EB3F 9F 3D 66 00                          DB $9F,$3D,$66,$00
  79++EB43 1F 3D 66 00                          DB $1F,$3D,$66,$00
  80++EB47 3F 00 00 50                          DB $3F,$00,$00,$50
  81++EB4B DF 07 2A 09                          DB $DF,$07,$2A,$09
  82++EB4F 5F 00 1E 06                          DB $5F,$00,$1E,$06
  83++EB53 5F 07 2A 09                          DB $5F,$07,$2A,$09 		;end of Cobra Mk III
  84++EB57              CobraMk3NormalsSize     equ $  - CobraMk3Normals
  85++EB57              CobraMk3Len             equ $  - CobraMk3
  86++EB57
# file closed: ./Data/ships/CobraMk3.asm
 109+ EB57                                      include "Data/ships/Cobra_Mk_1.asm"
# file opened: ./Data/ships/Cobra_Mk_1.asm
   1++EB57 03 26 49     Cobra_Mk_1:	            DB $03, $26, $49
   2++EB5A B2 EB                                DW Cobra_Mk_1Edges
   3++EB5C 48                                   DB Cobra_Mk_1EdgesSize
   4++EB5D 28 1A                                DB $28, $1A
   5++EB5F 42                                   DB Cobra_Mk_1VertSize
   6++EB60 12                                   DB Cobra_Mk_1EdgesCnt
   7++EB61 00 4B                                DB $00, $4B
   8++EB63 28                                   DB Cobra_Mk_1NormalsSize
   9++EB64 13 51 1A                             DB $13, $51, $1A
  10++EB67 FA EB                                DW Cobra_Mk_1Normals
  11++EB69 02 22                                DB $02, $22
  12++EB6B 70 EB                                DW Cobra_Mk_1Vertices
  13++EB6D 00 00                                DB 0,0                      ; Type and Tactics
  14++EB6F 01                                   DB ShipCanAnger
  15++EB70 12 01 32 DF  Cobra_Mk_1Vertices:	    DB $12, $01, $32, $DF, $01, $23
  15++EB74 01 23
  16++EB76 12 01 32 5F                          DB $12, $01, $32, $5F, $01, $45
  16++EB7A 01 45
  17++EB7C 42 00 07 9F                          DB $42, $00, $07, $9F, $23, $88
  17++EB80 23 88
  18++EB82 42 00 07 1F                          DB $42, $00, $07, $1F, $45, $99
  18++EB86 45 99
  19++EB88 20 0C 26 BF                          DB $20, $0C, $26, $BF, $26, $78
  19++EB8C 26 78
  20++EB8E 20 0C 26 3F                          DB $20, $0C, $26, $3F, $46, $79
  20++EB92 46 79
  21++EB94 36 0C 26 FF                          DB $36, $0C, $26, $FF, $13, $78
  21++EB98 13 78
  22++EB9A 36 0C 26 7F                          DB $36, $0C, $26, $7F, $15, $79
  22++EB9E 15 79
  23++EBA0 00 0C 06 34                          DB $00, $0C, $06, $34, $02, $46
  23++EBA4 02 46
  24++EBA6 00 01 32 42                          DB $00, $01, $32, $42, $01, $11
  24++EBAA 01 11
  25++EBAC 00 01 3C 5F                          DB $00, $01, $3C, $5F, $01, $11
  25++EBB0 01 11
  26++EBB2              Cobra_Mk_1VertSize:     equ $ - Cobra_Mk_1Vertices
  27++EBB2 1F 01 04 00  Cobra_Mk_1Edges:	    DB $1F, $01, $04, $00
  28++EBB6 1F 23 00 08                          DB $1F, $23, $00, $08
  29++EBBA 1F 38 08 18                          DB $1F, $38, $08, $18
  30++EBBE 1F 17 18 1C                          DB $1F, $17, $18, $1C
  31++EBC2 1F 59 1C 0C                          DB $1F, $59, $1C, $0C
  32++EBC6 1F 45 0C 04                          DB $1F, $45, $0C, $04
  33++EBCA 1F 28 08 10                          DB $1F, $28, $08, $10
  34++EBCE 1F 67 10 14                          DB $1F, $67, $10, $14
  35++EBD2 1F 49 14 0C                          DB $1F, $49, $14, $0C
  36++EBD6 14 02 00 20                          DB $14, $02, $00, $20
  37++EBDA 14 04 20 04                          DB $14, $04, $20, $04
  38++EBDE 10 26 10 20                          DB $10, $26, $10, $20
  39++EBE2 10 46 20 14                          DB $10, $46, $20, $14
  40++EBE6 1F 78 10 18                          DB $1F, $78, $10, $18
  41++EBEA 1F 79 14 1C                          DB $1F, $79, $14, $1C
  42++EBEE 14 13 00 18                          DB $14, $13, $00, $18
  43++EBF2 14 15 04 1C                          DB $14, $15, $04, $1C
  44++EBF6 02 01 28 24                          DB $02, $01, $28, $24
  45++EBFA              Cobra_Mk_1EdgesSize:    equ $ - Cobra_Mk_1Edges
  46++EBFA              Cobra_Mk_1EdgesCnt:     equ Cobra_Mk_1EdgesSize/4
  47++EBFA 1F 00 29 0A  Cobra_Mk_1Normals:	    DB $1F, $00, $29, $0A
  48++EBFE 5F 00 1B 03                          DB $5F, $00, $1B, $03
  49++EC02 9F 08 2E 08                          DB $9F, $08, $2E, $08
  50++EC06 DF 0C 39 0C                          DB $DF, $0C, $39, $0C
  51++EC0A 1F 08 2E 08                          DB $1F, $08, $2E, $08
  52++EC0E 5F 0C 39 0C                          DB $5F, $0C, $39, $0C
  53++EC12 1F 00 31 00                          DB $1F, $00, $31, $00
  54++EC16 3F 00 00 9A                          DB $3F, $00, $00, $9A
  55++EC1A BF 79 6F 3E                          DB $BF, $79, $6F, $3E
  56++EC1E 3F 79 6F 3E                          DB $3F, $79, $6F, $3E
  57++EC22              Cobra_Mk_1NormalsSize:  equ $ - Cobra_Mk_1Normals
  58++EC22              Cobra_Mk_1Len:          equ $ - Cobra_Mk_1
  59++EC22
# file closed: ./Data/ships/Cobra_Mk_1.asm
 110+ EC22                                      include "Data/ships/Cobra_Mk_3_P.asm"
# file opened: ./Data/ships/Cobra_Mk_3_P.asm
   1++EC22 01 23 41     Cobra_Mk_3_P:	        DB $01, $23, $41
   2++EC25 E3 EC                                DW Cobra_Mk_3_PEdges
   3++EC27 98                                   DB Cobra_Mk_3_PEdgesSize
   4++EC28 54 2A                                DB $54, $2A
   5++EC2A A8                                   DB Cobra_Mk_3_PVertSize
   6++EC2B 26                                   DB Cobra_Mk_3_PEdgesCnt
   7++EC2C 00 AF                                DB $00, $AF
   8++EC2E 34                                   DB Cobra_Mk_3_PNormalsSize
   9++EC2F 32 96 1C                             DB $32, $96, $1C
  10++EC32 7B ED                                DW Cobra_Mk_3_PNormals
  11++EC34 01 12                                DB $01, $12
  12++EC36 3B EC                                DW Cobra_Mk_3_PVertices
  13++EC38 00 00                                DB 0,0                      ; Type and Tactics
  14++EC3A 01                                   DB ShipCanAnger
  15++EC3B 20 00 4C 1F  Cobra_Mk_3_PVertices:	DB $20, $00, $4C, $1F, $FF, $FF
  15++EC3F FF FF
  16++EC41 20 00 4C 9F                          DB $20, $00, $4C, $9F, $FF, $FF
  16++EC45 FF FF
  17++EC47 00 1A 18 1F                          DB $00, $1A, $18, $1F, $FF, $FF
  17++EC4B FF FF
  18++EC4D 78 03 08 FF                          DB $78, $03, $08, $FF, $73, $AA
  18++EC51 73 AA
  19++EC53 78 03 08 7F                          DB $78, $03, $08, $7F, $84, $CC
  19++EC57 84 CC
  20++EC59 58 10 28 BF                          DB $58, $10, $28, $BF, $FF, $FF
  20++EC5D FF FF
  21++EC5F 58 10 28 3F                          DB $58, $10, $28, $3F, $FF, $FF
  21++EC63 FF FF
  22++EC65 80 08 28 7F                          DB $80, $08, $28, $7F, $98, $CC
  22++EC69 98 CC
  23++EC6B 80 08 28 FF                          DB $80, $08, $28, $FF, $97, $AA
  23++EC6F 97 AA
  24++EC71 00 1A 28 3F                          DB $00, $1A, $28, $3F, $65, $99
  24++EC75 65 99
  25++EC77 20 18 28 FF                          DB $20, $18, $28, $FF, $A9, $BB
  25++EC7B A9 BB
  26++EC7D 20 18 28 7F                          DB $20, $18, $28, $7F, $B9, $CC
  26++EC81 B9 CC
  27++EC83 24 08 28 B4                          DB $24, $08, $28, $B4, $99, $99
  27++EC87 99 99
  28++EC89 08 0C 28 B4                          DB $08, $0C, $28, $B4, $99, $99
  28++EC8D 99 99
  29++EC8F 08 0C 28 34                          DB $08, $0C, $28, $34, $99, $99
  29++EC93 99 99
  30++EC95 24 08 28 34                          DB $24, $08, $28, $34, $99, $99
  30++EC99 99 99
  31++EC9B 24 0C 28 74                          DB $24, $0C, $28, $74, $99, $99
  31++EC9F 99 99
  32++ECA1 08 10 28 74                          DB $08, $10, $28, $74, $99, $99
  32++ECA5 99 99
  33++ECA7 08 10 28 F4                          DB $08, $10, $28, $F4, $99, $99
  33++ECAB 99 99
  34++ECAD 24 0C 28 F4                          DB $24, $0C, $28, $F4, $99, $99
  34++ECB1 99 99
  35++ECB3 00 00 4C 06                          DB $00, $00, $4C, $06, $B0, $BB
  35++ECB7 B0 BB
  36++ECB9 00 00 5A 1F                          DB $00, $00, $5A, $1F, $B0, $BB
  36++ECBD B0 BB
  37++ECBF 50 06 28 E8                          DB $50, $06, $28, $E8, $99, $99
  37++ECC3 99 99
  38++ECC5 50 06 28 A8                          DB $50, $06, $28, $A8, $99, $99
  38++ECC9 99 99
  39++ECCB 58 00 28 A6                          DB $58, $00, $28, $A6, $99, $99
  39++ECCF 99 99
  40++ECD1 50 06 28 28                          DB $50, $06, $28, $28, $99, $99
  40++ECD5 99 99
  41++ECD7 58 00 28 26                          DB $58, $00, $28, $26, $99, $99
  41++ECDB 99 99
  42++ECDD 50 06 28 68                          DB $50, $06, $28, $68, $99, $99
  42++ECE1 99 99
  43++ECE3              Cobra_Mk_3_PVertSize:   equ $ - Cobra_Mk_3_PVertices
  44++ECE3 1F B0 00 04  Cobra_Mk_3_PEdges:	    DB $1F, $B0, $00, $04
  45++ECE7 1F C4 00 10                          DB $1F, $C4, $00, $10
  46++ECEB 1F A3 04 0C                          DB $1F, $A3, $04, $0C
  47++ECEF 1F A7 0C 20                          DB $1F, $A7, $0C, $20
  48++ECF3 1F C8 10 1C                          DB $1F, $C8, $10, $1C
  49++ECF7 1F 98 18 1C                          DB $1F, $98, $18, $1C
  50++ECFB 1F 96 18 24                          DB $1F, $96, $18, $24
  51++ECFF 1F 95 14 24                          DB $1F, $95, $14, $24
  52++ED03 1F 97 14 20                          DB $1F, $97, $14, $20
  53++ED07 1F 51 08 14                          DB $1F, $51, $08, $14
  54++ED0B 1F 62 08 18                          DB $1F, $62, $08, $18
  55++ED0F 1F 73 0C 14                          DB $1F, $73, $0C, $14
  56++ED13 1F 84 10 18                          DB $1F, $84, $10, $18
  57++ED17 1F 10 04 08                          DB $1F, $10, $04, $08
  58++ED1B 1F 20 00 08                          DB $1F, $20, $00, $08
  59++ED1F 1F A9 20 28                          DB $1F, $A9, $20, $28
  60++ED23 1F B9 28 2C                          DB $1F, $B9, $28, $2C
  61++ED27 1F C9 1C 2C                          DB $1F, $C9, $1C, $2C
  62++ED2B 1F BA 04 28                          DB $1F, $BA, $04, $28
  63++ED2F 1F CB 00 2C                          DB $1F, $CB, $00, $2C
  64++ED33 1D 31 04 14                          DB $1D, $31, $04, $14
  65++ED37 1D 42 00 18                          DB $1D, $42, $00, $18
  66++ED3B 06 B0 50 54                          DB $06, $B0, $50, $54
  67++ED3F 14 99 30 34                          DB $14, $99, $30, $34
  68++ED43 14 99 48 4C                          DB $14, $99, $48, $4C
  69++ED47 14 99 38 3C                          DB $14, $99, $38, $3C
  70++ED4B 14 99 40 44                          DB $14, $99, $40, $44
  71++ED4F 13 99 3C 40                          DB $13, $99, $3C, $40
  72++ED53 11 99 38 44                          DB $11, $99, $38, $44
  73++ED57 13 99 34 48                          DB $13, $99, $34, $48
  74++ED5B 13 99 30 4C                          DB $13, $99, $30, $4C
  75++ED5F 1E 65 08 24                          DB $1E, $65, $08, $24
  76++ED63 06 99 58 60                          DB $06, $99, $58, $60
  77++ED67 06 99 5C 60                          DB $06, $99, $5C, $60
  78++ED6B 08 99 58 5C                          DB $08, $99, $58, $5C
  79++ED6F 06 99 64 68                          DB $06, $99, $64, $68
  80++ED73 06 99 68 6C                          DB $06, $99, $68, $6C
  81++ED77 08 99 64 6C                          DB $08, $99, $64, $6C
  82++ED7B              Cobra_Mk_3_PEdgesSize:  equ $ - Cobra_Mk_3_PEdges
  83++ED7B              Cobra_Mk_3_PEdgesCnt:   equ Cobra_Mk_3_PEdgesSize/4
  84++ED7B 1F 00 3E 1F  Cobra_Mk_3_PNormals:	DB $1F, $00, $3E, $1F
  85++ED7F 9F 12 37 10                          DB $9F, $12, $37, $10
  86++ED83 1F 12 37 10                          DB $1F, $12, $37, $10
  87++ED87 9F 10 34 0E                          DB $9F, $10, $34, $0E
  88++ED8B 1F 10 34 0E                          DB $1F, $10, $34, $0E
  89++ED8F 9F 0E 2F 00                          DB $9F, $0E, $2F, $00
  90++ED93 1F 0E 2F 00                          DB $1F, $0E, $2F, $00
  91++ED97 9F 3D 66 00                          DB $9F, $3D, $66, $00
  92++ED9B 1F 3D 66 00                          DB $1F, $3D, $66, $00
  93++ED9F 3F 00 00 50                          DB $3F, $00, $00, $50
  94++EDA3 DF 07 2A 09                          DB $DF, $07, $2A, $09
  95++EDA7 5F 00 1E 06                          DB $5F, $00, $1E, $06
  96++EDAB 5F 07 2A 09                          DB $5F, $07, $2A, $09
  97++EDAF              Cobra_Mk_3_PNormalsSize:equ $ - Cobra_Mk_3_PNormals
  98++EDAF              Cobra_Mk_3_PLen:        equ $ - Cobra_Mk_3_P
  99++EDAF
# file closed: ./Data/ships/Cobra_Mk_3_P.asm
 111+ EDAF                                      include "Data/ships/Constrictor.asm"
# file opened: ./Data/ships/Constrictor.asm
   1++EDAF              ;                      0    1    2    3   4   5   6   7   8   9   10  11  12  13  14  15   16                    17                  18  19     20                     21
   2++EDAF              ;					   Scp  Missile   Edg Edg Lin Gun Exp Vtx Edg Bounty  Face             Edg                   Face                           Vertices
   3++EDAF              ;                      Deb  Lock      Lo  Hi  x4  Vtx Cnt x6  X1  lo  hi  x4  Dot Erg Spd  hi                    Hi                  Q   Laser  Lo                     hi
   4++EDAF F3 49 26     Constrictor:    	    DB $F3, $49, $26
   5++EDB2 2E EE                                DW ConstrictorEdges
   6++EDB4 60                                   DB ConstrictorEdgesSize
   7++EDB5 00 2E                                DB $00,$2E
   8++EDB7 66                                   DB ConstrictorVertSize
   9++EDB8 18                                   DB ConstrictorEdgesCnt
  10++EDB9 18 00                                DB $18,$00
  11++EDBB 28                                   DB ConstrictorNormalsSize
  12++EDBC 2D C8 37                             DB $2D,$C8,$37
  13++EDBF 8E EE                                DW ConstrictorNormals
  14++EDC1 02 2F                                DB $02,$2F
  15++EDC3 C8 ED                                DW ConstrictorVertices
  16++EDC5 00 00                                DB 0,0                      ; Type and Tactics
  17++EDC7                                  ; missiles = 3
  18++EDC7 01                                   DB ShipCanAnger
  19++EDC8 14 07 50 5F  ConstrictorVertices     DB $14, $07, $50, $5F, $02, $99
  19++EDCC 02 99
  20++EDCE 14 07 50 DF                          DB $14, $07, $50, $DF, $01, $99
  20++EDD2 01 99
  21++EDD4 36 07 28 DF                          DB $36, $07, $28, $DF, $14, $99
  21++EDD8 14 99
  22++EDDA 36 07 28 FF                          DB $36, $07, $28, $FF, $45, $89
  22++EDDE 45 89
  23++EDE0 14 0D 28 BF                          DB $14, $0D, $28, $BF, $56, $88
  23++EDE4 56 88
  24++EDE6 14 0D 28 3F                          DB $14, $0D, $28, $3F, $67, $88
  24++EDEA 67 88
  25++EDEC 36 07 28 7F                          DB $36, $07, $28, $7F, $37, $89
  25++EDF0 37 89
  26++EDF2 36 07 28 5F                          DB $36, $07, $28, $5F, $23, $99
  26++EDF6 23 99
  27++EDF8 14 0D 05 1F                          DB $14, $0D, $05, $1F, $FF, $FF
  27++EDFC FF FF
  28++EDFE 14 0D 05 9F                          DB $14, $0D, $05, $9F, $FF, $FF
  28++EE02 FF FF
  29++EE04 14 07 3E 52                          DB $14, $07, $3E, $52, $99, $99
  29++EE08 99 99
  30++EE0A 14 07 3E D2                          DB $14, $07, $3E, $D2, $99, $99
  30++EE0E 99 99
  31++EE10 19 07 19 72                          DB $19, $07, $19, $72, $99, $99
  31++EE14 99 99
  32++EE16 19 07 19 F2                          DB $19, $07, $19, $F2, $99, $99
  32++EE1A 99 99
  33++EE1C 0F 07 0F 6A                          DB $0F, $07, $0F, $6A, $99, $99
  33++EE20 99 99
  34++EE22 0F 07 0F EA                          DB $0F, $07, $0F, $EA, $99, $99
  34++EE26 99 99
  35++EE28 00 07 00 40                          DB $00, $07, $00, $40, $9F, $01
  35++EE2C 9F 01
  36++EE2E              ConstrictorVertSize     equ $  - ConstrictorVertices
  37++EE2E 1F 09 00 04  ConstrictorEdges        DB $1F, $09, $00, $04, $1F, $19, $04, $08
  37++EE32 1F 19 04 08
  38++EE36 1F 01 04 24                          DB $1F, $01, $04, $24, $1F, $02, $00, $20
  38++EE3A 1F 02 00 20
  39++EE3E 1F 29 00 1C                          DB $1F, $29, $00, $1C, $1F, $23, $1C, $20
  39++EE42 1F 23 1C 20
  40++EE46 1F 14 08 24                          DB $1F, $14, $08, $24, $1F, $49, $08, $0C
  40++EE4A 1F 49 08 0C
  41++EE4E 1F 39 18 1C                          DB $1F, $39, $18, $1C, $1F, $37, $18, $20
  41++EE52 1F 37 18 20
  42++EE56 1F 67 14 20                          DB $1F, $67, $14, $20, $1F, $56, $10, $24
  42++EE5A 1F 56 10 24
  43++EE5E 1F 45 0C 24                          DB $1F, $45, $0C, $24, $1F, $58, $0C, $10
  43++EE62 1F 58 0C 10
  44++EE66 1F 68 10 14                          DB $1F, $68, $10, $14, $1F, $78, $14, $18
  44++EE6A 1F 78 14 18
  45++EE6E 1F 89 0C 18                          DB $1F, $89, $0C, $18, $1F, $06, $20, $24
  45++EE72 1F 06 20 24
  46++EE76 12 99 28 30                          DB $12, $99, $28, $30, $05, $99, $30, $38
  46++EE7A 05 99 30 38
  47++EE7E 0A 99 38 28                          DB $0A, $99, $38, $28, $0A, $99, $2C, $3C
  47++EE82 0A 99 2C 3C
  48++EE86 05 99 34 3C                          DB $05, $99, $34, $3C, $12, $99, $2C, $34
  48++EE8A 12 99 2C 34
  49++EE8E              ConstrictorEdgesSize    equ $  - ConstrictorEdges
  50++EE8E              ConstrictorEdgesCnt     equ ConstrictorEdgesSize/4
  51++EE8E 1F 00 37 0F  ConstrictorNormals      DB $1F, $00, $37, $0F, $9F, $18, $4B, $14
  51++EE92 9F 18 4B 14
  52++EE96 1F 18 4B 14                          DB $1F, $18, $4B, $14, $1F, $2C, $4B, $00
  52++EE9A 1F 2C 4B 00
  53++EE9E 9F 2C 4B 00                          DB $9F, $2C, $4B, $00, $9F, $2C, $4B, $00
  53++EEA2 9F 2C 4B 00
  54++EEA6 1F 00 35 00                          DB $1F, $00, $35, $00, $1F, $2C, $4B, $00
  54++EEAA 1F 2C 4B 00
  55++EEAE 3F 00 00 A0                          DB $3F, $00, $00, $A0, $5F, $00, $1B, $00
  55++EEB2 5F 00 1B 00
  56++EEB6              ConstrictorNormalsSize  equ $  - ConstrictorNormals
  57++EEB6              ConstrictorLen          equ $  - Constrictor
  58++EEB6
# file closed: ./Data/ships/Constrictor.asm
 112+ EEB6                                      include "Data/ships/Coriolis.asm"
# file opened: ./Data/ships/Coriolis.asm
   1++EEB6 00 64 00     Coriolis:	            DB $00, $64, $00
   2++EEB9 2F EF                                DW CoriolisEdges
   3++EEBB 70                                   DB CoriolisEdgesSize
   4++EEBC 00 36                                DB $00, $36
   5++EEBE 60                                   DB CoriolisVertSize
   6++EEBF 1C                                   DB CoriolisEdgesCnt
   7++EEC0 00 00                                DB $00, $00
   8++EEC2 38                                   DB CoriolisNormalsSize
   9++EEC3 78 F0 00                             DB $78, $F0, $00
  10++EEC6 9F EF                                DW CoriolisNormals
  11++EEC8 00 06                                DB $00, $06
  12++EECA CF EE                                DW CoriolisVertices
  13++EECC 02 00                                DB ShipTypeStation,0                        ; Type and Tactics
  14++EECE 00                                   DB 0                                        ; can't anger arbitrarily needs to see innocent bystander shot
  15++EECF A0 00 A0 1F  CoriolisVertices:	    DB $A0, $00, $A0, $1F, $10, $62
  15++EED3 10 62
  16++EED5 00 A0 A0 1F                          DB $00, $A0, $A0, $1F, $20, $83
  16++EED9 20 83
  17++EEDB A0 00 A0 9F                          DB $A0, $00, $A0, $9F, $30, $74
  17++EEDF 30 74
  18++EEE1 00 A0 A0 5F                          DB $00, $A0, $A0, $5F, $10, $54
  18++EEE5 10 54
  19++EEE7 A0 A0 00 5F                          DB $A0, $A0, $00, $5F, $51, $A6
  19++EEEB 51 A6
  20++EEED A0 A0 00 1F                          DB $A0, $A0, $00, $1F, $62, $B8
  20++EEF1 62 B8
  21++EEF3 A0 A0 00 9F                          DB $A0, $A0, $00, $9F, $73, $C8
  21++EEF7 73 C8
  22++EEF9 A0 A0 00 DF                          DB $A0, $A0, $00, $DF, $54, $97
  22++EEFD 54 97
  23++EEFF A0 00 A0 3F                          DB $A0, $00, $A0, $3F, $A6, $DB
  23++EF03 A6 DB
  24++EF05 00 A0 A0 3F                          DB $00, $A0, $A0, $3F, $B8, $DC
  24++EF09 B8 DC
  25++EF0B A0 00 A0 BF                          DB $A0, $00, $A0, $BF, $97, $DC
  25++EF0F 97 DC
  26++EF11 00 A0 A0 7F                          DB $00, $A0, $A0, $7F, $95, $DA
  26++EF15 95 DA
  27++EF17 0A 1E A0 5E                          DB $0A, $1E, $A0, $5E, $00, $00
  27++EF1B 00 00
  28++EF1D 0A 1E A0 1E                          DB $0A, $1E, $A0, $1E, $00, $00
  28++EF21 00 00
  29++EF23 0A 1E A0 9E                          DB $0A, $1E, $A0, $9E, $00, $00
  29++EF27 00 00
  30++EF29 0A 1E A0 DE                          DB $0A, $1E, $A0, $DE, $00, $00
  30++EF2D 00 00
  31++EF2F              CoriolisVertSize:       equ $ - CoriolisVertices
  32++EF2F 1F 10 00 0C  CoriolisEdges:	        DB $1F, $10, $00, $0C
  33++EF33 1F 20 00 04                          DB $1F, $20, $00, $04
  34++EF37 1F 30 04 08                          DB $1F, $30, $04, $08
  35++EF3B 1F 40 08 0C                          DB $1F, $40, $08, $0C
  36++EF3F 1F 51 0C 10                          DB $1F, $51, $0C, $10
  37++EF43 1F 61 00 10                          DB $1F, $61, $00, $10
  38++EF47 1F 62 00 14                          DB $1F, $62, $00, $14
  39++EF4B 1F 82 14 04                          DB $1F, $82, $14, $04
  40++EF4F 1F 83 04 18                          DB $1F, $83, $04, $18
  41++EF53 1F 73 08 18                          DB $1F, $73, $08, $18
  42++EF57 1F 74 08 1C                          DB $1F, $74, $08, $1C
  43++EF5B 1F 54 0C 1C                          DB $1F, $54, $0C, $1C
  44++EF5F 1F DA 20 2C                          DB $1F, $DA, $20, $2C
  45++EF63 1F DB 20 24                          DB $1F, $DB, $20, $24
  46++EF67 1F DC 24 28                          DB $1F, $DC, $24, $28
  47++EF6B 1F D9 28 2C                          DB $1F, $D9, $28, $2C
  48++EF6F 1F A5 10 2C                          DB $1F, $A5, $10, $2C
  49++EF73 1F A6 10 20                          DB $1F, $A6, $10, $20
  50++EF77 1F B6 14 20                          DB $1F, $B6, $14, $20
  51++EF7B 1F B8 14 24                          DB $1F, $B8, $14, $24
  52++EF7F 1F C8 18 24                          DB $1F, $C8, $18, $24
  53++EF83 1F C7 18 28                          DB $1F, $C7, $18, $28
  54++EF87 1F 97 1C 28                          DB $1F, $97, $1C, $28
  55++EF8B 1F 95 1C 2C                          DB $1F, $95, $1C, $2C
  56++EF8F 1E 00 30 34                          DB $1E, $00, $30, $34
  57++EF93 1E 00 34 38                          DB $1E, $00, $34, $38
  58++EF97 1E 00 38 3C                          DB $1E, $00, $38, $3C
  59++EF9B 1E 00 3C 30                          DB $1E, $00, $3C, $30
  60++EF9F              CoriolisEdgesSize:      equ $ - CoriolisEdges
  61++EF9F              CoriolisEdgesCnt:       equ CoriolisEdgesSize/4
  62++EF9F 1F 00 00 A0  CoriolisNormals:	    DB $1F, $00, $00, $A0
  63++EFA3 5F 6B 6B 6B                          DB $5F, $6B, $6B, $6B
  64++EFA7 1F 6B 6B 6B                          DB $1F, $6B, $6B, $6B
  65++EFAB 9F 6B 6B 6B                          DB $9F, $6B, $6B, $6B
  66++EFAF DF 6B 6B 6B                          DB $DF, $6B, $6B, $6B
  67++EFB3 5F 00 A0 00                          DB $5F, $00, $A0, $00
  68++EFB7 1F A0 00 00                          DB $1F, $A0, $00, $00
  69++EFBB 9F A0 00 00                          DB $9F, $A0, $00, $00
  70++EFBF 1F 00 A0 00                          DB $1F, $00, $A0, $00
  71++EFC3 FF 6B 6B 6B                          DB $FF, $6B, $6B, $6B
  72++EFC7 7F 6B 6B 6B                          DB $7F, $6B, $6B, $6B
  73++EFCB 3F 6B 6B 6B                          DB $3F, $6B, $6B, $6B
  74++EFCF BF 6B 6B 6B                          DB $BF, $6B, $6B, $6B
  75++EFD3 3F 00 00 A0                          DB $3F, $00, $00, $A0
  76++EFD7              CoriolisNormalsSize:    equ $ - CoriolisNormals
  77++EFD7              CoriolisLen:            equ $ - Coriolis
  78++EFD7
# file closed: ./Data/ships/Coriolis.asm
 113+ EFD7                                      include "Data/ships/Cougar.asm"
# file opened: ./Data/ships/Cougar.asm
   1++EFD7 03 13 24     Cougar:	                DB $03, $13, $24
   2++EFDA 62 F0                                DW CougarEdges
   3++EFDC 64                                   DB CougarEdgesSize
   4++EFDD 00 2A                                DB $00, $2A
   5++EFDF 72                                   DB CougarVertSize
   6++EFE0 19                                   DB CougarEdgesCnt
   7++EFE1 00 00                                DB $00, $00
   8++EFE3 18                                   DB CougarNormalsSize
   9++EFE4 22 FC 28                             DB $22, $FC, $28
  10++EFE7 C6 F0                                DW CougarNormals
  11++EFE9 02 34                                DB $02, $34
  12++EFEB F0 EF                                DW CougarVertices
  13++EFED 00 00                                DB 0,0                      ; Type and Tactics
  14++EFEF 01                                   DB ShipCanAnger
  15++EFF0 00 05 43 1F  CougarVertices:	        DB $00, $05, $43, $1F, $02, $44
  15++EFF4 02 44
  16++EFF6 14 00 28 9F                          DB $14, $00, $28, $9F, $01, $22
  16++EFFA 01 22
  17++EFFC 28 00 28 BF                          DB $28, $00, $28, $BF, $01, $55
  17++F000 01 55
  18++F002 00 0E 28 3E                          DB $00, $0E, $28, $3E, $04, $55
  18++F006 04 55
  19++F008 00 0E 28 7E                          DB $00, $0E, $28, $7E, $12, $35
  19++F00C 12 35
  20++F00E 14 00 28 1F                          DB $14, $00, $28, $1F, $23, $44
  20++F012 23 44
  21++F014 28 00 28 3F                          DB $28, $00, $28, $3F, $34, $55
  21++F018 34 55
  22++F01A 24 00 38 9F                          DB $24, $00, $38, $9F, $01, $11
  22++F01E 01 11
  23++F020 3C 00 14 BF                          DB $3C, $00, $14, $BF, $01, $11
  23++F024 01 11
  24++F026 24 00 38 1F                          DB $24, $00, $38, $1F, $34, $44
  24++F02A 34 44
  25++F02C 3C 00 14 3F                          DB $3C, $00, $14, $3F, $34, $44
  25++F030 34 44
  26++F032 00 07 23 12                          DB $00, $07, $23, $12, $00, $44
  26++F036 00 44
  27++F038 00 08 19 14                          DB $00, $08, $19, $14, $00, $44
  27++F03C 00 44
  28++F03E 0C 02 2D 94                          DB $0C, $02, $2D, $94, $00, $00
  28++F042 00 00
  29++F044 0C 02 2D 14                          DB $0C, $02, $2D, $14, $44, $44
  29++F048 44 44
  30++F04A 0A 06 28 B4                          DB $0A, $06, $28, $B4, $55, $55
  30++F04E 55 55
  31++F050 0A 06 28 F4                          DB $0A, $06, $28, $F4, $55, $55
  31++F054 55 55
  32++F056 0A 06 28 74                          DB $0A, $06, $28, $74, $55, $55
  32++F05A 55 55
  33++F05C 0A 06 28 34                          DB $0A, $06, $28, $34, $55, $55
  33++F060 55 55
  34++F062              CougarVertSize:         equ $ - CougarVertices
  35++F062 1F 02 00 04  CougarEdges:	        DB $1F, $02, $00, $04
  36++F066 1F 01 04 1C                          DB $1F, $01, $04, $1C
  37++F06A 1F 01 1C 20                          DB $1F, $01, $1C, $20
  38++F06E 1F 01 20 08                          DB $1F, $01, $20, $08
  39++F072 1E 05 08 0C                          DB $1E, $05, $08, $0C
  40++F076 1E 45 0C 18                          DB $1E, $45, $0C, $18
  41++F07A 1E 15 08 10                          DB $1E, $15, $08, $10
  42++F07E 1E 35 10 18                          DB $1E, $35, $10, $18
  43++F082 1F 34 18 28                          DB $1F, $34, $18, $28
  44++F086 1F 34 28 24                          DB $1F, $34, $28, $24
  45++F08A 1F 34 24 14                          DB $1F, $34, $24, $14
  46++F08E 1F 24 14 00                          DB $1F, $24, $14, $00
  47++F092 1B 04 00 0C                          DB $1B, $04, $00, $0C
  48++F096 1B 12 04 10                          DB $1B, $12, $04, $10
  49++F09A 1B 23 14 10                          DB $1B, $23, $14, $10
  50++F09E 1A 01 04 08                          DB $1A, $01, $04, $08
  51++F0A2 1A 34 14 18                          DB $1A, $34, $14, $18
  52++F0A6 14 00 30 34                          DB $14, $00, $30, $34
  53++F0AA 12 00 34 2C                          DB $12, $00, $34, $2C
  54++F0AE 12 44 2C 38                          DB $12, $44, $2C, $38
  55++F0B2 14 44 38 30                          DB $14, $44, $38, $30
  56++F0B6 12 55 3C 40                          DB $12, $55, $3C, $40
  57++F0BA 14 55 40 48                          DB $14, $55, $40, $48
  58++F0BE 12 55 48 44                          DB $12, $55, $48, $44
  59++F0C2 14 55 44 3C                          DB $14, $55, $44, $3C
  60++F0C6              CougarEdgesSize:        equ $ - CougarEdges
  61++F0C6              CougarEdgesCnt:         equ CougarEdgesSize/4
  62++F0C6 9F 10 2E 04  CougarNormals:	        DB $9F, $10, $2E, $04
  63++F0CA DF 10 2E 04                          DB $DF, $10, $2E, $04
  64++F0CE 5F 00 1B 05                          DB $5F, $00, $1B, $05
  65++F0D2 5F 10 2E 04                          DB $5F, $10, $2E, $04
  66++F0D6 1F 10 2E 04                          DB $1F, $10, $2E, $04
  67++F0DA 3E 00 00 A0                          DB $3E, $00, $00, $A0
  68++F0DE              CougarNormalsSize:      equ $ - CougarNormals
  69++F0DE              CougarLen:              equ $ - Cougar
  70++F0DE
# file closed: ./Data/ships/Cougar.asm
 114+ F0DE                                      include "Data/ships/Dodo.asm"
# file opened: ./Data/ships/Dodo.asm
   1++F0DE 00 7E 90     Dodo:	                DB $00, $7E, $90
   2++F0E1 87 F1                                DW DodoEdges
   3++F0E3 88                                   DB DodoEdgesSize
   4++F0E4 00 36                                DB $00, $36
   5++F0E6 90                                   DB DodoVertSize
   6++F0E7 22                                   DB DodoEdgesCnt
   7++F0E8 00 00                                DB $00, $00
   8++F0EA 30                                   DB DodoNormalsSize
   9++F0EB 7D F0 00                             DB $7D, $F0, $00
  10++F0EE 0F F2                                DW DodoNormals
  11++F0F0 00 00                                DB $00, $00
  12++F0F2 F7 F0                                DW DodoVertices
  13++F0F4 02 00                                DB ShipTypeStation,0                      ; Type and Tactics
  14++F0F6 00                                   DB 0
  15++F0F7 00 96 C4 1F  DodoVertices:	        DB $00, $96, $C4, $1F, $01, $55
  15++F0FB 01 55
  16++F0FD 8F 2E C4 1F                          DB $8F, $2E, $C4, $1F, $01, $22
  16++F101 01 22
  17++F103 58 79 C4 5F                          DB $58, $79, $C4, $5F, $02, $33
  17++F107 02 33
  18++F109 58 79 C4 DF                          DB $58, $79, $C4, $DF, $03, $44
  18++F10D 03 44
  19++F10F 8F 2E C4 9F                          DB $8F, $2E, $C4, $9F, $04, $55
  19++F113 04 55
  20++F115 00 F3 2E 1F                          DB $00, $F3, $2E, $1F, $15, $66
  20++F119 15 66
  21++F11B E7 4B 2E 1F                          DB $E7, $4B, $2E, $1F, $12, $77
  21++F11F 12 77
  22++F121 8F C4 2E 5F                          DB $8F, $C4, $2E, $5F, $23, $88
  22++F125 23 88
  23++F127 8F C4 2E DF                          DB $8F, $C4, $2E, $DF, $34, $99
  23++F12B 34 99
  24++F12D E7 4B 2E 9F                          DB $E7, $4B, $2E, $9F, $45, $AA
  24++F131 45 AA
  25++F133 8F C4 2E 3F                          DB $8F, $C4, $2E, $3F, $16, $77
  25++F137 16 77
  26++F139 E7 4B 2E 7F                          DB $E7, $4B, $2E, $7F, $27, $88
  26++F13D 27 88
  27++F13F 00 F3 2E 7F                          DB $00, $F3, $2E, $7F, $38, $99
  27++F143 38 99
  28++F145 E7 4B 2E FF                          DB $E7, $4B, $2E, $FF, $49, $AA
  28++F149 49 AA
  29++F14B 8F C4 2E BF                          DB $8F, $C4, $2E, $BF, $56, $AA
  29++F14F 56 AA
  30++F151 58 79 C4 3F                          DB $58, $79, $C4, $3F, $67, $BB
  30++F155 67 BB
  31++F157 8F 2E C4 7F                          DB $8F, $2E, $C4, $7F, $78, $BB
  31++F15B 78 BB
  32++F15D 00 96 C4 7F                          DB $00, $96, $C4, $7F, $89, $BB
  32++F161 89 BB
  33++F163 8F 2E C4 FF                          DB $8F, $2E, $C4, $FF, $9A, $BB
  33++F167 9A BB
  34++F169 58 79 C4 BF                          DB $58, $79, $C4, $BF, $6A, $BB
  34++F16D 6A BB
  35++F16F 10 20 C4 9E                          DB $10, $20, $C4, $9E, $00, $00
  35++F173 00 00
  36++F175 10 20 C4 DE                          DB $10, $20, $C4, $DE, $00, $00
  36++F179 00 00
  37++F17B 10 20 C4 17                          DB $10, $20, $C4, $17, $00, $00
  37++F17F 00 00
  38++F181 10 20 C4 57                          DB $10, $20, $C4, $57, $00, $00
  38++F185 00 00
  39++F187              DodoVertSize:           equ $ - DodoVertices
  40++F187 1F 01 00 04  DodoEdges:	            DB $1F, $01, $00, $04
  41++F18B 1F 02 04 08                          DB $1F, $02, $04, $08
  42++F18F 1F 03 08 0C                          DB $1F, $03, $08, $0C
  43++F193 1F 04 0C 10                          DB $1F, $04, $0C, $10
  44++F197 1F 05 10 00                          DB $1F, $05, $10, $00
  45++F19B 1F 16 14 28                          DB $1F, $16, $14, $28
  46++F19F 1F 17 28 18                          DB $1F, $17, $28, $18
  47++F1A3 1F 27 18 2C                          DB $1F, $27, $18, $2C
  48++F1A7 1F 28 2C 1C                          DB $1F, $28, $2C, $1C
  49++F1AB 1F 38 1C 30                          DB $1F, $38, $1C, $30
  50++F1AF 1F 39 30 20                          DB $1F, $39, $30, $20
  51++F1B3 1F 49 20 34                          DB $1F, $49, $20, $34
  52++F1B7 1F 4A 34 24                          DB $1F, $4A, $34, $24
  53++F1BB 1F 5A 24 38                          DB $1F, $5A, $24, $38
  54++F1BF 1F 56 38 14                          DB $1F, $56, $38, $14
  55++F1C3 1F 7B 3C 40                          DB $1F, $7B, $3C, $40
  56++F1C7 1F 8B 40 44                          DB $1F, $8B, $40, $44
  57++F1CB 1F 9B 44 48                          DB $1F, $9B, $44, $48
  58++F1CF 1F AB 48 4C                          DB $1F, $AB, $48, $4C
  59++F1D3 1F 6B 4C 3C                          DB $1F, $6B, $4C, $3C
  60++F1D7 1F 15 00 14                          DB $1F, $15, $00, $14
  61++F1DB 1F 12 04 18                          DB $1F, $12, $04, $18
  62++F1DF 1F 23 08 1C                          DB $1F, $23, $08, $1C
  63++F1E3 1F 34 0C 20                          DB $1F, $34, $0C, $20
  64++F1E7 1F 45 10 24                          DB $1F, $45, $10, $24
  65++F1EB 1F 67 28 3C                          DB $1F, $67, $28, $3C
  66++F1EF 1F 78 2C 40                          DB $1F, $78, $2C, $40
  67++F1F3 1F 89 30 44                          DB $1F, $89, $30, $44
  68++F1F7 1F 9A 34 48                          DB $1F, $9A, $34, $48
  69++F1FB 1F 6A 38 4C                          DB $1F, $6A, $38, $4C
  70++F1FF 1E 00 50 54                          DB $1E, $00, $50, $54
  71++F203 14 00 54 5C                          DB $14, $00, $54, $5C
  72++F207 17 00 5C 58                          DB $17, $00, $5C, $58
  73++F20B 14 00 58 50                          DB $14, $00, $58, $50
  74++F20F              DodoEdgesSize:          equ $ - DodoEdges
  75++F20F              DodoEdgesCnt:           equ DodoEdgesSize/4
  76++F20F 1F 00 00 C4  DodoNormals:	        DB $1F, $00, $00, $C4
  77++F213 1F 67 8E 58                          DB $1F, $67, $8E, $58
  78++F217 5F A9 37 59                          DB $5F, $A9, $37, $59
  79++F21B 5F 00 B0 58                          DB $5F, $00, $B0, $58
  80++F21F DF A9 37 59                          DB $DF, $A9, $37, $59
  81++F223 9F 67 8E 58                          DB $9F, $67, $8E, $58
  82++F227 3F 00 B0 58                          DB $3F, $00, $B0, $58
  83++F22B 3F A9 37 59                          DB $3F, $A9, $37, $59
  84++F22F 7F 67 8E 58                          DB $7F, $67, $8E, $58
  85++F233 FF 67 8E 58                          DB $FF, $67, $8E, $58
  86++F237 BF A9 37 59                          DB $BF, $A9, $37, $59
  87++F23B 3F 00 00 C4                          DB $3F, $00, $00, $C4
  88++F23F              DodoNormalsSize:        equ $ - DodoNormals
  89++F23F              DodoLen:                equ $ - Dodo
  90++F23F
# file closed: ./Data/ships/Dodo.asm
# file closed: ./Data/ShipModelMetaData1.asm
1276  F23F              ; Bank 67  ------------------------------------------------------------------------------------------------------------------------
1277  F23F                  SLOT    ShipModelsAddr
1278  F23F                  PAGE    BankShipModels2
1279  F23F              	ORG     ShipModelsAddr, BankShipModels2
1280  E000
1281  E000                  INCLUDE "./Data/ShipBank2Label.asm"
# file opened: ./Data/ShipBank2Label.asm
   1+ E000 53 68 69 70  ShipBank2Label:         DB  "ShipBank2      "
   1+ E004 42 61 6E 6B
   1+ E008 32 20 20 20
   1+ E00C 20 20 20
   2+ E00F
# file closed: ./Data/ShipBank2Label.asm
1282  E00F              GetShipBank2Id:         MGetShipBankId ShipBankTable2
1282  E00F 06 00       >                        ld      b,0
1282  E011 4F          >                        ld      c,a                                 ; c= original ship id
1282  E012 CB 3F       >.ShiftLoop:             srl     a
1282  E014 CB 3F       >                        srl     a
1282  E016 CB 3F       >                        srl     a
1282  E018 CB 3F       >                        srl     a                                   ; divide by 16
1282  E01A 47          >                        ld      b,a                                 ; b = bank nbr
1282  E01B 79          >                        ld      a,c
1282  E01C 50          >                        ld      d,b
1282  E01D 1E 10       >                        ld      e,16
1282  E01F ED 30       >                        mul                                         ; de = 16 * bank number (max is about 15 banks)
1282  E021 93          >                        sub     e                                   ; a= actual model id now
1282  E022 50          >.SelectedBank:          ld      d,b                                 ; save current bank number
1282  E023 47          >                        ld      b,a                                 ; b = adjusted ship nbr
1282  E024 7A          >                        ld      a,d                                 ; a = bank number
1282  E025             >;.. Now b = bank and a = adjusted ship nbr
1282  E025 21 62 E0    >                        ld      hl,ShipBankTable2                        ; a= bank index
1282  E028 ED 31       >                        add     hl,a
1282  E02A ED 31       >                        add     hl,a
1282  E02C 7E          >                        ld      a,(hl)                              ; a = actual bank now
1282  E02D             >                        ClearCarryFlag
1282  E02D B7          >                        or a
1282  E02E C9          >                        ret
1283  E02F              CopyVertsToUniv2:       McopyVertsToUniverse
1283  E02F 2A 20 C3    >                        ld          hl,(VerticesAddyAddr)       ; now the pointers are in Ubnk its easy to read
1283  E032 11 25 C3    >                        ld          de,UBnkHullVerticies
1283  E035 06 00       >                        ld          b,0
1283  E037 3A 14 C3    >                        ld			a,(VertexCtX6Addr)
1283  E03A 4F          >                        ld          c,a
1283  E03B EB          >                        ex          de,hl                       ; dma transfer goes de -> hl i.e. opposite of ldir
1283  E03C CD 4E 95    >                        call        memcopy_dma
1283  E03F C9          >                        ret
1284  E040              CopyEdgesToUniv2:       McopyEdgesToUniverse
1284  E040 2A 0F C3    >                        ld          hl,(EdgeAddyAddr)          ; now the pointers are in Ubnk its easy to read
1284  E043 11 51 C4    >                        ld          de,UBnkHullEdges
1284  E046 06 00       >                        ld          b,0
1284  E048 3A 11 C3    >                        ld			a,(LineX4Addr)
1284  E04B 4F          >                        ld          c,a
1284  E04C EB          >                        ex          de,hl                       ; dma transfer goes de -> hl i.e. opposite of ldir
1284  E04D CD 4E 95    >                        call        memcopy_dma
1284  E050 C9          >                        ret
1285  E051              CopyNormsToUniv2:       McopyNormsToUniverse
1285  E051 2A 1C C3    >                        ld          hl,(FaceAddyAddr)          ; now the pointers are in Ubnk its easy to read
1285  E054 11 01 C9    >                        ld          de,UBnkHullNormals
1285  E057 06 00       >                        ld          b,0
1285  E059 3A 18 C3    >                        ld          a,(FaceCtX4Addr)
1285  E05C 4F          >                        ld          c,a
1285  E05D EB          >                        ex          de,hl                       ; dma transfer goes de -> hl i.e. opposite of ldir
1285  E05E CD 4E 95    >                        call        memcopy_dma
1285  E061 C9          >                        ret
1286  E062              ShipBankTable2:         MShipBankTable
1286  E062 3B 00       >                        DW      BankShipModels1
1286  E064 43 00       >                        DW      BankShipModels2
1286  E066 44 00       >                        DW      BankShipModels3
1286  E068 45 00       >                        DW      BankShipModels4
1287  E06A              CopyShipToUniverse2     MCopyShipToUniverse     BankShipModels2
1287  E06A 21 2D C0    >                        ld          hl,UBnkShipModelBank
1287  E06D 36 43       >                        ld          (hl),BankShipModels2
1287  E06F 32 2E C0    >                        ld          (UBnkShipModelNbr),a
1287  E072 21 1F E1    >.GetHullDataLength:     ld          hl,ShipModelSizeTable
1287  E075 ED 31       >                        add         hl,a
1287  E077 ED 31       >                        add         hl,a                        ; we won't multiply by 2 as GetInfo is a general purpose routines so would end up x 4
1287  E079 4E          >                        ld          c,(hl)
1287  E07A 23          >                        inc         hl
1287  E07B 46          >                        ld          b,(hl)                      ; bc now equals length of data set
1287  E07C 21 9F E0    >.GetHullDataAddress:    ld          hl,ShipModelTable
1287  E07F ED 31       >                        add         hl,a
1287  E081 ED 31       >                        add         hl,a                        ; now hl = address of ship data value
1287  E083 7E          >                        ld          a,(hl)
1287  E084 23          >                        inc         hl
1287  E085 66          >                        ld          h,(hl)
1287  E086 6F          >                        ld          l,a                         ; now hl = address of ship hull data
1287  E087 11 0C C3    >                        ld          de,UBnkHullCopy             ; Universe bank
1287  E08A 01 19 00    >                        ld          bc,ShipDataLength
1287  E08D ED B0       >                        ldir
1287  E08F CD 2F E0    >                        call        CopyVertsToUniv
1287  E092 CD 40 E0    >                        call        CopyEdgesToUniv
1287  E095 CD 51 E0    >                        call        CopyNormsToUniv
1287  E098 C9          >                        ret
1288  E099              CopyBodyToUniverse2:    MCopyBodyToUniverse     CopyShipToUniverse2
1288  E099 3E 0D       >                        ld          a,13
1288  E09B CD 6A E0    >                        call        CopyShipToUniverse2
1288  E09E C9          >                        ret
1289  E09F
1290  E09F                  INCLUDE "./Data/ShipModelMetaData2.asm"
# file opened: ./Data/ShipModelMetaData2.asm
   1+ E09F 3F E1        ShipModelTable2:         DW Dragon                                  ;16
   2+ E0A1 1A E2                                 DW Escape_Pod                              ;17
   3+ E0A3 73 E2                                 DW Fer_De_Lance                            ;18
   4+ E0A5 92 E3                                 DW Gecko                                   ;19
   5+ E0A7 5B E4                                 DW Ghavial                                 ;20
   6+ E0A9 44 E5                                 DW Iguana                                  ;21
   7+ E0AB 3B E6                                 DW Krait                                   ;22
   8+ E0AD 26 E7                                 DW Logo                                    ;23
   9+ E0AF E3 E8                                 DW Mamba                                   ;24
  10+ E0B1 16 EA                                 DW Missile                                 ;25
  11+ E0B3 19 EB                                 DW Monitor                                 ;26
  12+ E0B5 20 EC                                 DW Moray                                   ;27
  13+ E0B7 FD EC                                 DW Ophidian                                ;28
  14+ E0B9 36 EE                                 DW Plate                                   ;29
  15+ E0BB 75 EE                                 DW Python                                  ;30
  16+ E0BD 6C EF                                 DW Python_P                                ;31
  17+ E0BF 58 E1        ShipVertexTable2:        DW DragonVertices
  18+ E0C1 33 E2                                 DW Escape_PodVertices
  19+ E0C3 8C E2                                 DW Fer_De_LanceVertices
  20+ E0C5 AB E3                                 DW GeckoVertices
  21+ E0C7 74 E4                                 DW GhavialVertices
  22+ E0C9 5D E5                                 DW IguanaVertices
  23+ E0CB 54 E6                                 DW KraitVertices
  24+ E0CD 3F E7                                 DW LogoVertices
  25+ E0CF FC E8                                 DW MambaVertices
  26+ E0D1 2F EA                                 DW MissileVertices
  27+ E0D3 32 EB                                 DW MonitorVertices
  28+ E0D5 39 EC                                 DW MorayVertices
  29+ E0D7 16 ED                                 DW OphidianVertices
  30+ E0D9 4F EE                                 DW PlateVertices
  31+ E0DB 8E EE                                 DW PythonVertices
  32+ E0DD 85 EF                                 DW Python_PVertices
  33+ E0DF 8E E1        ShipEdgeTable2:          DW DragonEdges
  34+ E0E1 4B E2                                 DW Escape_PodEdges
  35+ E0E3 FE E2                                 DW Fer_De_LanceEdges
  36+ E0E5 F3 E3                                 DW GeckoEdges
  37+ E0E7 BC E4                                 DW GhavialEdges
  38+ E0E9 B7 E5                                 DW IguanaEdges
  39+ E0EB BA E6                                 DW KraitEdges
  40+ E0ED 3B E8                                 DW LogoEdges
  41+ E0EF 92 E9                                 DW MambaEdges
  42+ E0F1 95 EA                                 DW MissileEdges
  43+ E0F3 98 EB                                 DW MonitorEdges
  44+ E0F5 8D EC                                 DW MorayEdges
  45+ E0F7 8E ED                                 DW OphidianEdges
  46+ E0F9 61 EE                                 DW PlateEdges
  47+ E0FB D0 EE                                 DW PythonEdges
  48+ E0FD C7 EF                                 DW Python_PEdges
  49+ E0FF E2 E1        ShipNormalTable2:        DW DragonNormals
  50+ E101 63 E2                                 DW Escape_PodNormals
  51+ E103 6A E3                                 DW Fer_De_LanceNormals
  52+ E105 37 E4                                 DW GeckoNormals
  53+ E107 14 E5                                 DW GhavialNormals
  54+ E109 13 E6                                 DW IguanaNormals
  55+ E10B 0E E7                                 DW KraitNormals
  56+ E10D CF E8                                 DW LogoNormals
  57+ E10F 02 EA                                 DW MambaNormals
  58+ E111 F5 EA                                 DW MissileNormals
  59+ E113 F4 EB                                 DW MonitorNormals
  60+ E115 D9 EC                                 DW MorayNormals
  61+ E117 06 EE                                 DW OphidianNormals
  62+ E119 71 EE                                 DW PlateNormals
  63+ E11B 38 EF                                 DW PythonNormals
  64+ E11D 2F F0                                 DW Python_PNormals
  65+ E11F DB 00        ShipModelSizeTable2:     DW DragonLen
  66+ E121 59 00                                 DW Escape_PodLen
  67+ E123 1F 01                                 DW Fer_De_LanceLen
  68+ E125 C9 00                                 DW GeckoLen
  69+ E127 E9 00                                 DW GhavialLen
  70+ E129 F7 00                                 DW IguanaLen
  71+ E12B EB 00                                 DW KraitLen
  72+ E12D BD 01                                 DW LogoLen
  73+ E12F 33 01                                 DW MambaLen
  74+ E131 03 01                                 DW MissileLen
  75+ E133 07 01                                 DW MonitorLen
  76+ E135 DD 00                                 DW MorayLen
  77+ E137 39 01                                 DW OphidianLen
  78+ E139 3F 00                                 DW PlateLen
  79+ E13B F7 00                                 DW PythonLen
  80+ E13D F7 00                                 DW Python_PLen
  81+ E13F
  82+ E13F                                      include "Data/ships/Dragon.asm"
# file opened: ./Data/ships/Dragon.asm
   1++E13F 00 66 50     Dragon:	                DB $00, $66, $50
   2++E142 8E E1                                DW DragonEdges
   3++E144 54                                   DB DragonEdgesSize
   4++E145 00 3C                                DB $00, $3C
   5++E147 36                                   DB DragonVertSize
   6++E148 15                                   DB DragonEdgesCnt
   7++E149 00 00                                DB $00, $00
   8++E14B 38                                   DB DragonNormalsSize
   9++E14C 20 F7 14                             DB $20, $F7, $14
  10++E14F E2 E1                                DW DragonNormals
  11++E151 00 47                                DB $00, $47
  12++E153 58 E1                                DW DragonVertices
  13++E155 00 00                                DB 0,0                      ; Type and Tactics
  14++E157 01                                   DB ShipCanAnger
  15++E158 00 00 FA 1F  DragonVertices:	        DB $00, $00, $FA, $1F, $6B, $05
  15++E15C 6B 05
  16++E15E D8 00 7C 1F                          DB $D8, $00, $7C, $1F, $67, $01
  16++E162 67 01
  17++E164 D8 00 7C 3F                          DB $D8, $00, $7C, $3F, $78, $12
  17++E168 78 12
  18++E16A 00 28 FA 3F                          DB $00, $28, $FA, $3F, $CD, $23
  18++E16E CD 23
  19++E170 00 28 FA 7F                          DB $00, $28, $FA, $7F, $CD, $89
  19++E174 CD 89
  20++E176 D8 00 7C BF                          DB $D8, $00, $7C, $BF, $9A, $34
  20++E17A 9A 34
  21++E17C D8 00 7C 9F                          DB $D8, $00, $7C, $9F, $AB, $45
  21++E180 AB 45
  22++E182 00 50 00 1F                          DB $00, $50, $00, $1F, $FF, $FF
  22++E186 FF FF
  23++E188 00 50 00 5F                          DB $00, $50, $00, $5F, $FF, $FF
  23++E18C FF FF
  24++E18E              DragonVertSize:         equ $ - DragonVertices
  25++E18E 1F 01 04 1C  DragonEdges:	        DB $1F, $01, $04, $1C
  26++E192 1F 12 08 1C                          DB $1F, $12, $08, $1C
  27++E196 1F 23 0C 1C                          DB $1F, $23, $0C, $1C
  28++E19A 1F 34 14 1C                          DB $1F, $34, $14, $1C
  29++E19E 1F 45 18 1C                          DB $1F, $45, $18, $1C
  30++E1A2 1F 50 00 1C                          DB $1F, $50, $00, $1C
  31++E1A6 1F 67 04 20                          DB $1F, $67, $04, $20
  32++E1AA 1F 78 08 20                          DB $1F, $78, $08, $20
  33++E1AE 1F 89 10 20                          DB $1F, $89, $10, $20
  34++E1B2 1F 9A 14 20                          DB $1F, $9A, $14, $20
  35++E1B6 1F AB 18 20                          DB $1F, $AB, $18, $20
  36++E1BA 1F B6 00 20                          DB $1F, $B6, $00, $20
  37++E1BE 1F 06 00 04                          DB $1F, $06, $00, $04
  38++E1C2 1F 17 04 08                          DB $1F, $17, $04, $08
  39++E1C6 1F 4A 14 18                          DB $1F, $4A, $14, $18
  40++E1CA 1F 5B 00 18                          DB $1F, $5B, $00, $18
  41++E1CE 1F 2C 08 0C                          DB $1F, $2C, $08, $0C
  42++E1D2 1F 8C 08 10                          DB $1F, $8C, $08, $10
  43++E1D6 1F 3D 0C 14                          DB $1F, $3D, $0C, $14
  44++E1DA 1F 9D 10 14                          DB $1F, $9D, $10, $14
  45++E1DE 1F CD 0C 10                          DB $1F, $CD, $0C, $10
  46++E1E2              DragonEdgesSize:        equ $ - DragonEdges
  47++E1E2              DragonEdgesCnt:         equ DragonEdgesSize/4
  48++E1E2 1F 10 5A 1C  DragonNormals:	        DB $1F, $10, $5A, $1C
  49++E1E6 1F 21 5A 00                          DB $1F, $21, $5A, $00
  50++E1EA 3F 19 5B 0E                          DB $3F, $19, $5B, $0E
  51++E1EE BF 19 5B 0E                          DB $BF, $19, $5B, $0E
  52++E1F2 9F 21 5A 00                          DB $9F, $21, $5A, $00
  53++E1F6 9F 10 5A 1C                          DB $9F, $10, $5A, $1C
  54++E1FA 5F 10 5A 1C                          DB $5F, $10, $5A, $1C
  55++E1FE 5F 21 5A 00                          DB $5F, $21, $5A, $00
  56++E202 7F 19 5B 0E                          DB $7F, $19, $5B, $0E
  57++E206 FF 19 5B 0E                          DB $FF, $19, $5B, $0E
  58++E20A DF 21 5A 00                          DB $DF, $21, $5A, $00
  59++E20E DF 10 5A 1C                          DB $DF, $10, $5A, $1C
  60++E212 3F 30 00 52                          DB $3F, $30, $00, $52
  61++E216 BF 30 00 52                          DB $BF, $30, $00, $52
  62++E21A              DragonNormalsSize:      equ $ - DragonNormals
  63++E21A              DragonLen:              equ $ - Dragon
  64++E21A
# file closed: ./Data/ships/Dragon.asm
  83+ E21A                                      include "Data/ships/Escape_Pod.asm"
# file opened: ./Data/ships/Escape_Pod.asm
   1++E21A 20 01 00     Escape_Pod:             DB $20, $01, $00
   2++E21D 4B E2                                DW Escape_PodEdges
   3++E21F 18                                   DB Escape_PodEdgesSize
   4++E220 00 16                                DB $00, $16
   5++E222 18                                   DB Escape_PodVertSize
   6++E223 06                                   DB Escape_PodEdgesCnt
   7++E224 00 00                                DB $00, $00
   8++E226 10                                   DB Escape_PodNormalsSize
   9++E227 08 11 08                             DB $08, $11, $08
  10++E22A 63 E2                                DW Escape_PodNormals
  11++E22C 04 00                                DB $04, $00
  12++E22E 33 E2                                DW Escape_PodVertices
  13++E230 00 00                                DB 0,0                      ; Type and Tactics
  14++E232 00                                   DB 0
  15++E233 07 00 24 9F  Escape_PodVertices:	    DB $07, $00, $24, $9F, $12, $33
  15++E237 12 33
  16++E239 07 0E 0C FF                          DB $07, $0E, $0C, $FF, $02, $33
  16++E23D 02 33
  17++E23F 07 0E 0C BF                          DB $07, $0E, $0C, $BF, $01, $33
  17++E243 01 33
  18++E245 15 00 00 1F                          DB $15, $00, $00, $1F, $01, $22
  18++E249 01 22
  19++E24B              Escape_PodVertSize:     equ $ - Escape_PodVertices
  20++E24B 1F 23 00 04  Escape_PodEdges:	    DB $1F, $23, $00, $04
  21++E24F 1F 03 04 08                          DB $1F, $03, $04, $08
  22++E253 1F 01 08 0C                          DB $1F, $01, $08, $0C
  23++E257 1F 12 0C 00                          DB $1F, $12, $0C, $00
  24++E25B 1F 13 00 08                          DB $1F, $13, $00, $08
  25++E25F 1F 02 0C 04                          DB $1F, $02, $0C, $04
  26++E263              Escape_PodEdgesSize:    equ $ - Escape_PodEdges
  27++E263              Escape_PodEdgesCnt:     equ Escape_PodEdgesSize/4
  28++E263 3F 34 00 7A  Escape_PodNormals:	    DB $3F, $34, $00, $7A
  29++E267 1F 27 67 1E                          DB $1F, $27, $67, $1E
  30++E26B 5F 27 67 1E                          DB $5F, $27, $67, $1E
  31++E26F 9F 70 00 00                          DB $9F, $70, $00, $00
  32++E273              Escape_PodNormalsSize:  equ $ - Escape_PodNormals
  33++E273              Escape_PodLen:          equ $ - Escape_Pod
  34++E273
# file closed: ./Data/ships/Escape_Pod.asm
  84+ E273                                      include "Data/ships/Fer_De_Lance.asm"
# file opened: ./Data/ships/Fer_De_Lance.asm
   1++E273 00 06 40     Fer_De_Lance:	        DB $00, $06, $40
   2++E276 FE E2                                DW Fer_De_LanceEdges
   3++E278 6C                                   DB Fer_De_LanceEdgesSize
   4++E279 00 1A                                DB $00, $1A
   5++E27B 72                                   DB Fer_De_LanceVertSize
   6++E27C 1B                                   DB Fer_De_LanceEdgesCnt
   7++E27D 00 00                                DB $00, $00
   8++E27F 28                                   DB Fer_De_LanceNormalsSize
   9++E280 28 A0 1E                             DB $28, $A0, $1E
  10++E283 6A E3                                DW Fer_De_LanceNormals
  11++E285 01 12                                DB $01, $12
  12++E287 8C E2                                DW Fer_De_LanceVertices
  13++E289 00 00                                DB 0,0                      ; Type and Tactics
  14++E28B 01                                   DB ShipCanAnger
  15++E28C 00 0E 6C 5F  Fer_De_LanceVertices:	DB $00, $0E, $6C, $5F, $01, $59
  15++E290 01 59
  16++E292 28 0E 04 FF                          DB $28, $0E, $04, $FF, $12, $99
  16++E296 12 99
  17++E298 0C 0E 34 FF                          DB $0C, $0E, $34, $FF, $23, $99
  17++E29C 23 99
  18++E29E 0C 0E 34 7F                          DB $0C, $0E, $34, $7F, $34, $99
  18++E2A2 34 99
  19++E2A4 28 0E 04 7F                          DB $28, $0E, $04, $7F, $45, $99
  19++E2A8 45 99
  20++E2AA 28 0E 04 BC                          DB $28, $0E, $04, $BC, $01, $26
  20++E2AE 01 26
  21++E2B0 0C 02 34 BC                          DB $0C, $02, $34, $BC, $23, $67
  21++E2B4 23 67
  22++E2B6 0C 02 34 3C                          DB $0C, $02, $34, $3C, $34, $78
  22++E2BA 34 78
  23++E2BC 28 0E 04 3C                          DB $28, $0E, $04, $3C, $04, $58
  23++E2C0 04 58
  24++E2C2 00 12 14 2F                          DB $00, $12, $14, $2F, $06, $78
  24++E2C6 06 78
  25++E2C8 03 0B 61 CB                          DB $03, $0B, $61, $CB, $00, $00
  25++E2CC 00 00
  26++E2CE 1A 08 12 89                          DB $1A, $08, $12, $89, $00, $00
  26++E2D2 00 00
  27++E2D4 10 0E 04 AB                          DB $10, $0E, $04, $AB, $00, $00
  27++E2D8 00 00
  28++E2DA 03 0B 61 4B                          DB $03, $0B, $61, $4B, $00, $00
  28++E2DE 00 00
  29++E2E0 1A 08 12 09                          DB $1A, $08, $12, $09, $00, $00
  29++E2E4 00 00
  30++E2E6 10 0E 04 2B                          DB $10, $0E, $04, $2B, $00, $00
  30++E2EA 00 00
  31++E2EC 00 0E 14 6C                          DB $00, $0E, $14, $6C, $99, $99
  31++E2F0 99 99
  32++E2F2 0E 0E 2C CC                          DB $0E, $0E, $2C, $CC, $99, $99
  32++E2F6 99 99
  33++E2F8 0E 0E 2C 4C                          DB $0E, $0E, $2C, $4C, $99, $99
  33++E2FC 99 99
  34++E2FE              Fer_De_LanceVertSize:   equ $ - Fer_De_LanceVertices
  35++E2FE 1F 19 00 04  Fer_De_LanceEdges:	    DB $1F, $19, $00, $04
  36++E302 1F 29 04 08                          DB $1F, $29, $04, $08
  37++E306 1F 39 08 0C                          DB $1F, $39, $08, $0C
  38++E30A 1F 49 0C 10                          DB $1F, $49, $0C, $10
  39++E30E 1F 59 00 10                          DB $1F, $59, $00, $10
  40++E312 1C 01 00 14                          DB $1C, $01, $00, $14
  41++E316 1C 26 14 18                          DB $1C, $26, $14, $18
  42++E31A 1C 37 18 1C                          DB $1C, $37, $18, $1C
  43++E31E 1C 48 1C 20                          DB $1C, $48, $1C, $20
  44++E322 1C 05 00 20                          DB $1C, $05, $00, $20
  45++E326 0F 06 14 24                          DB $0F, $06, $14, $24
  46++E32A 0B 67 18 24                          DB $0B, $67, $18, $24
  47++E32E 0B 78 1C 24                          DB $0B, $78, $1C, $24
  48++E332 0F 08 20 24                          DB $0F, $08, $20, $24
  49++E336 0E 12 04 14                          DB $0E, $12, $04, $14
  50++E33A 0E 23 08 18                          DB $0E, $23, $08, $18
  51++E33E 0E 34 0C 1C                          DB $0E, $34, $0C, $1C
  52++E342 0E 45 10 20                          DB $0E, $45, $10, $20
  53++E346 08 00 28 2C                          DB $08, $00, $28, $2C
  54++E34A 09 00 2C 30                          DB $09, $00, $2C, $30
  55++E34E 0B 00 28 30                          DB $0B, $00, $28, $30
  56++E352 08 00 34 38                          DB $08, $00, $34, $38
  57++E356 09 00 38 3C                          DB $09, $00, $38, $3C
  58++E35A 0B 00 34 3C                          DB $0B, $00, $34, $3C
  59++E35E 0C 99 40 44                          DB $0C, $99, $40, $44
  60++E362 0C 99 40 48                          DB $0C, $99, $40, $48
  61++E366 08 99 44 48                          DB $08, $99, $44, $48
  62++E36A              Fer_De_LanceEdgesSize:  equ $ - Fer_De_LanceEdges
  63++E36A              Fer_De_LanceEdgesCnt:   equ Fer_De_LanceEdgesSize/4
  64++E36A 1C 00 18 06  Fer_De_LanceNormals:	DB $1C, $00, $18, $06
  65++E36E 9F 44 00 18                          DB $9F, $44, $00, $18
  66++E372 BF 3F 00 25                          DB $BF, $3F, $00, $25
  67++E376 3F 00 00 68                          DB $3F, $00, $00, $68
  68++E37A 3F 3F 00 25                          DB $3F, $3F, $00, $25
  69++E37E 1F 44 00 18                          DB $1F, $44, $00, $18
  70++E382 BC 0C 2E 13                          DB $BC, $0C, $2E, $13
  71++E386 3C 00 2D 16                          DB $3C, $00, $2D, $16
  72++E38A 3C 0C 2E 13                          DB $3C, $0C, $2E, $13
  73++E38E 5F 00 1C 00                          DB $5F, $00, $1C, $00
  74++E392              Fer_De_LanceNormalsSize:equ $ - Fer_De_LanceNormals
  75++E392              Fer_De_LanceLen:        equ $ - Fer_De_Lance
  76++E392
# file closed: ./Data/ships/Fer_De_Lance.asm
  85+ E392                                      include "Data/ships/Gecko.asm"
# file opened: ./Data/ships/Gecko.asm
   1++E392 00 26 49     Gecko:	                DB $00, $26, $49
   2++E395 F3 E3                                DW GeckoEdges
   3++E397 44                                   DB GeckoEdgesSize
   4++E398 00 1A                                DB $00, $1A
   5++E39A 48                                   DB GeckoVertSize
   6++E39B 11                                   DB GeckoEdgesCnt
   7++E39C 00 37                                DB $00, $37
   8++E39E 24                                   DB GeckoNormalsSize
   9++E39F 12 46 1E                             DB $12, $46, $1E
  10++E3A2 37 E4                                DW GeckoNormals
  11++E3A4 03 10                                DB $03, $10
  12++E3A6 AB E3                                DW GeckoVertices
  13++E3A8 00 00                                DB 0,0                      ; Type and Tactics
  14++E3AA 01                                   DB ShipCanAnger
  15++E3AB 0A 04 2F DF  GeckoVertices:	        DB $0A, $04, $2F, $DF, $03, $45
  15++E3AF 03 45
  16++E3B1 0A 04 2F 5F                          DB $0A, $04, $2F, $5F, $01, $23
  16++E3B5 01 23
  17++E3B7 10 08 17 BF                          DB $10, $08, $17, $BF, $05, $67
  17++E3BB 05 67
  18++E3BD 10 08 17 3F                          DB $10, $08, $17, $3F, $01, $78
  18++E3C1 01 78
  19++E3C3 42 00 03 BF                          DB $42, $00, $03, $BF, $45, $66
  19++E3C7 45 66
  20++E3C9 42 00 03 3F                          DB $42, $00, $03, $3F, $12, $88
  20++E3CD 12 88
  21++E3CF 14 0E 17 FF                          DB $14, $0E, $17, $FF, $34, $67
  21++E3D3 34 67
  22++E3D5 14 0E 17 7F                          DB $14, $0E, $17, $7F, $23, $78
  22++E3D9 23 78
  23++E3DB 08 06 21 D0                          DB $08, $06, $21, $D0, $33, $33
  23++E3DF 33 33
  24++E3E1 08 06 21 51                          DB $08, $06, $21, $51, $33, $33
  24++E3E5 33 33
  25++E3E7 08 0D 10 F0                          DB $08, $0D, $10, $F0, $33, $33
  25++E3EB 33 33
  26++E3ED 08 0D 10 71                          DB $08, $0D, $10, $71, $33, $33
  26++E3F1 33 33
  27++E3F3              GeckoVertSize:          equ $ - GeckoVertices
  28++E3F3 1F 03 00 04  GeckoEdges:	            DB $1F, $03, $00, $04
  29++E3F7 1F 12 04 14                          DB $1F, $12, $04, $14
  30++E3FB 1F 18 14 0C                          DB $1F, $18, $14, $0C
  31++E3FF 1F 07 0C 08                          DB $1F, $07, $0C, $08
  32++E403 1F 56 08 10                          DB $1F, $56, $08, $10
  33++E407 1F 45 10 00                          DB $1F, $45, $10, $00
  34++E40B 1F 28 14 1C                          DB $1F, $28, $14, $1C
  35++E40F 1F 37 1C 18                          DB $1F, $37, $1C, $18
  36++E413 1F 46 18 10                          DB $1F, $46, $18, $10
  37++E417 1D 05 00 08                          DB $1D, $05, $00, $08
  38++E41B 1E 01 04 0C                          DB $1E, $01, $04, $0C
  39++E41F 1D 34 00 18                          DB $1D, $34, $00, $18
  40++E423 1E 23 04 1C                          DB $1E, $23, $04, $1C
  41++E427 14 67 08 18                          DB $14, $67, $08, $18
  42++E42B 14 78 0C 1C                          DB $14, $78, $0C, $1C
  43++E42F 10 33 20 28                          DB $10, $33, $20, $28
  44++E433 11 33 24 2C                          DB $11, $33, $24, $2C
  45++E437              GeckoEdgesSize:             equ $ - GeckoEdges
  46++E437              GeckoEdgesCnt:          equ GeckoEdgesSize/4
  47++E437 1F 00 1F 05  GeckoNormals:	        DB $1F, $00, $1F, $05
  48++E43B 1F 04 2D 08                          DB $1F, $04, $2D, $08
  49++E43F 5F 19 6C 13                          DB $5F, $19, $6C, $13
  50++E443 5F 00 54 0C                          DB $5F, $00, $54, $0C
  51++E447 DF 19 6C 13                          DB $DF, $19, $6C, $13
  52++E44B 9F 04 2D 08                          DB $9F, $04, $2D, $08
  53++E44F BF 58 10 D6                          DB $BF, $58, $10, $D6
  54++E453 3F 00 00 BB                          DB $3F, $00, $00, $BB
  55++E457 3F 58 10 D6                          DB $3F, $58, $10, $D6
  56++E45B              GeckoNormalsSize:       equ $ - GeckoNormals
  57++E45B              GeckoLen:               equ $ - Gecko
  58++E45B
# file closed: ./Data/ships/Gecko.asm
  86+ E45B                                      include "Data/ships/Ghavial.asm"
# file opened: ./Data/ships/Ghavial.asm
   1++E45B 03 26 00     Ghavial:	            DB $03, $26, $00
   2++E45E BC E4                                DW GhavialEdges
   3++E460 58                                   DB GhavialEdgesSize
   4++E461 00 22                                DB $00, $22
   5++E463 48                                   DB GhavialVertSize
   6++E464 16                                   DB GhavialEdgesCnt
   7++E465 00 64                                DB $00, $64
   8++E467 30                                   DB GhavialNormalsSize
   9++E468 0A 72 10                             DB $0A, $72, $10
  10++E46B 14 E5                                DW GhavialNormals
  11++E46D 00 27                                DB $00, $27
  12++E46F 74 E4                                DW GhavialVertices
  13++E471 00 00                                DB 0,0                      ; Type and Tactics
  14++E473 01                                   DB ShipCanAnger
  15++E474
  16++E474 1E 00 64 1F  GhavialVertices:	DB $1E, $00, $64, $1F, $67, $01
  16++E478 67 01
  17++E47A 1E 00 64 9F  	DB $1E, $00, $64, $9F, $6B, $05
  17++E47E 6B 05
  18++E480 28 1E 1A 3F  	DB $28, $1E, $1A, $3F, $23, $01
  18++E484 23 01
  19++E486 28 1E 1A BF  	DB $28, $1E, $1A, $BF, $45, $03
  19++E48A 45 03
  20++E48C 3C 00 14 3F  	DB $3C, $00, $14, $3F, $78, $12
  20++E490 78 12
  21++E492 28 00 3C 3F  	DB $28, $00, $3C, $3F, $89, $23
  21++E496 89 23
  22++E498 3C 00 14 BF  	DB $3C, $00, $14, $BF, $AB, $45
  22++E49C AB 45
  23++E49E 28 00 3C BF  	DB $28, $00, $3C, $BF, $9A, $34
  23++E4A2 9A 34
  24++E4A4 00 1E 14 7F  	DB $00, $1E, $14, $7F, $FF, $FF
  24++E4A8 FF FF
  25++E4AA 0A 18 00 09  	DB $0A, $18, $00, $09, $00, $00
  25++E4AE 00 00
  26++E4B0 0A 18 00 89  	DB $0A, $18, $00, $89, $00, $00
  26++E4B4 00 00
  27++E4B6 00 16 0A 09  	DB $00, $16, $0A, $09, $00, $00
  27++E4BA 00 00
  28++E4BC
  29++E4BC              GhavialVertSize: equ $ - GhavialVertices
  30++E4BC
  31++E4BC
  32++E4BC 1F 01 00 08  GhavialEdges:	DB $1F, $01, $00, $08
  33++E4C0 1F 12 10 08  	DB $1F, $12, $10, $08
  34++E4C4 1F 23 14 08  	DB $1F, $23, $14, $08
  35++E4C8 1F 30 0C 08  	DB $1F, $30, $0C, $08
  36++E4CC 1F 34 1C 0C  	DB $1F, $34, $1C, $0C
  37++E4D0 1F 45 18 0C  	DB $1F, $45, $18, $0C
  38++E4D4 1F 50 0C 04  	DB $1F, $50, $0C, $04
  39++E4D8 1F 67 00 20  	DB $1F, $67, $00, $20
  40++E4DC 1F 78 10 20  	DB $1F, $78, $10, $20
  41++E4E0 1F 89 14 20  	DB $1F, $89, $14, $20
  42++E4E4 1F 9A 1C 20  	DB $1F, $9A, $1C, $20
  43++E4E8 1F AB 18 20  	DB $1F, $AB, $18, $20
  44++E4EC 1F B6 04 20  	DB $1F, $B6, $04, $20
  45++E4F0 1F 06 04 00  	DB $1F, $06, $04, $00
  46++E4F4 1F 17 00 10  	DB $1F, $17, $00, $10
  47++E4F8 1F 28 10 14  	DB $1F, $28, $10, $14
  48++E4FC 1F 39 14 1C  	DB $1F, $39, $14, $1C
  49++E500 1F 4A 1C 18  	DB $1F, $4A, $1C, $18
  50++E504 1F 5B 18 04  	DB $1F, $5B, $18, $04
  51++E508 09 00 24 28  	DB $09, $00, $24, $28
  52++E50C 09 00 28 2C  	DB $09, $00, $28, $2C
  53++E510 09 00 2C 24  	DB $09, $00, $2C, $24
  54++E514
  55++E514              GhavialEdgesSize: equ $ - GhavialEdges
  56++E514
  57++E514
  58++E514              GhavialEdgesCnt: equ GhavialEdgesSize/4
  59++E514
  60++E514
  61++E514 1F 00 3E 0E  GhavialNormals:	DB $1F, $00, $3E, $0E
  62++E518 1F 33 24 0C  	DB $1F, $33, $24, $0C
  63++E51C 3F 33 1C 19  	DB $3F, $33, $1C, $19
  64++E520 3F 00 30 2A  	DB $3F, $00, $30, $2A
  65++E524 BF 33 1C 19  	DB $BF, $33, $1C, $19
  66++E528 9F 33 24 0C  	DB $9F, $33, $24, $0C
  67++E52C 5F 00 3E 0F  	DB $5F, $00, $3E, $0F
  68++E530 5F 1C 38 07  	DB $5F, $1C, $38, $07
  69++E534 7F 1B 37 0D  	DB $7F, $1B, $37, $0D
  70++E538 7F 00 33 26  	DB $7F, $00, $33, $26
  71++E53C FF 1B 37 0D  	DB $FF, $1B, $37, $0D
  72++E540 DF 1C 38 07  	DB $DF, $1C, $38, $07
  73++E544
  74++E544              GhavialNormalsSize: equ $ - GhavialNormals
  75++E544              GhavialLen: equ $ - Ghavial
  76++E544
# file closed: ./Data/ships/Ghavial.asm
  87+ E544                                      include "Data/ships/Iguana.asm"
# file opened: ./Data/ships/Iguana.asm
   1++E544 01 0D AC     Iguana:	                DB $01, $0D, $AC
   2++E547 B7 E5                                DW IguanaEdges
   3++E549 5C                                   DB IguanaEdgesSize
   4++E54A 00 1A                                DB $00, $1A
   5++E54C 5A                                   DB IguanaVertSize
   6++E54D 17                                   DB IguanaEdgesCnt
   7++E54E 00 96                                DB $00, $96
   8++E550 28                                   DB IguanaNormalsSize
   9++E551 0A 5A 21                             DB $0A, $5A, $21
  10++E554 13 E6                                DW IguanaNormals
  11++E556 01 23                                DB $01, $23
  12++E558 5D E5                                DW IguanaVertices
  13++E55A 00 00                                DB 0,0                      ; Type and Tactics
  14++E55C 01                                   DB ShipCanAnger
  15++E55D
  16++E55D
  17++E55D 00 00 5A 1F  IguanaVertices:	DB $00, $00, $5A, $1F, $23, $01
  17++E561 23 01
  18++E563 00 14 1E 1F  	DB $00, $14, $1E, $1F, $46, $02
  18++E567 46 02
  19++E569 28 00 0A 9F  	DB $28, $00, $0A, $9F, $45, $01
  19++E56D 45 01
  20++E56F 00 14 1E 5F  	DB $00, $14, $1E, $5F, $57, $13
  20++E573 57 13
  21++E575 28 00 0A 1F  	DB $28, $00, $0A, $1F, $67, $23
  21++E579 67 23
  22++E57B 00 14 28 3F  	DB $00, $14, $28, $3F, $89, $46
  22++E57F 89 46
  23++E581 28 00 1E BF  	DB $28, $00, $1E, $BF, $88, $45
  23++E585 88 45
  24++E587 00 14 28 7F  	DB $00, $14, $28, $7F, $89, $57
  24++E58B 89 57
  25++E58D 28 00 1E 3F  	DB $28, $00, $1E, $3F, $99, $67
  25++E591 99 67
  26++E593 28 00 28 9E  	DB $28, $00, $28, $9E, $11, $00
  26++E597 11 00
  27++E599 28 00 28 1E  	DB $28, $00, $28, $1E, $33, $22
  27++E59D 33 22
  28++E59F 00 08 28 2A  	DB $00, $08, $28, $2A, $99, $88
  28++E5A3 99 88
  29++E5A5 10 00 24 AA  	DB $10, $00, $24, $AA, $88, $88
  29++E5A9 88 88
  30++E5AB 00 08 28 6A  	DB $00, $08, $28, $6A, $99, $88
  30++E5AF 99 88
  31++E5B1 10 00 24 2A  	DB $10, $00, $24, $2A, $99, $99
  31++E5B5 99 99
  32++E5B7
  33++E5B7              IguanaVertSize: equ $ - IguanaVertices
  34++E5B7
  35++E5B7
  36++E5B7
  37++E5B7 1F 02 00 04  IguanaEdges:	DB $1F, $02, $00, $04
  38++E5BB 1F 01 00 08  	DB $1F, $01, $00, $08
  39++E5BF 1F 13 00 0C  	DB $1F, $13, $00, $0C
  40++E5C3 1F 23 00 10  	DB $1F, $23, $00, $10
  41++E5C7 1F 46 04 14  	DB $1F, $46, $04, $14
  42++E5CB 1F 45 08 18  	DB $1F, $45, $08, $18
  43++E5CF 1F 57 0C 1C  	DB $1F, $57, $0C, $1C
  44++E5D3 1F 67 10 20  	DB $1F, $67, $10, $20
  45++E5D7 1F 48 14 18  	DB $1F, $48, $14, $18
  46++E5DB 1F 58 18 1C  	DB $1F, $58, $18, $1C
  47++E5DF 1F 69 14 20  	DB $1F, $69, $14, $20
  48++E5E3 1F 79 1C 20  	DB $1F, $79, $1C, $20
  49++E5E7 1F 04 04 08  	DB $1F, $04, $04, $08
  50++E5EB 1F 15 08 0C  	DB $1F, $15, $08, $0C
  51++E5EF 1F 26 04 10  	DB $1F, $26, $04, $10
  52++E5F3 1F 37 0C 10  	DB $1F, $37, $0C, $10
  53++E5F7 1F 89 14 1C  	DB $1F, $89, $14, $1C
  54++E5FB 1E 01 08 24  	DB $1E, $01, $08, $24
  55++E5FF 1E 23 10 28  	DB $1E, $23, $10, $28
  56++E603 0A 88 2C 30  	DB $0A, $88, $2C, $30
  57++E607 0A 88 34 30  	DB $0A, $88, $34, $30
  58++E60B 0A 99 2C 38  	DB $0A, $99, $2C, $38
  59++E60F 0A 99 34 38  	DB $0A, $99, $34, $38
  60++E613
  61++E613              IguanaEdgesSize: equ $ - IguanaEdges
  62++E613
  63++E613
  64++E613              IguanaEdgesCnt: equ IguanaEdgesSize/4
  65++E613
  66++E613
  67++E613 9F 33 4D 19  IguanaNormals:	DB $9F, $33, $4D, $19
  68++E617 DF 33 4D 19  	DB $DF, $33, $4D, $19
  69++E61B 1F 33 4D 19  	DB $1F, $33, $4D, $19
  70++E61F 5F 33 4D 19  	DB $5F, $33, $4D, $19
  71++E623 9F 2A 55 00  	DB $9F, $2A, $55, $00
  72++E627 DF 2A 55 00  	DB $DF, $2A, $55, $00
  73++E62B 1F 2A 55 00  	DB $1F, $2A, $55, $00
  74++E62F 5F 2A 55 00  	DB $5F, $2A, $55, $00
  75++E633 BF 17 00 5D  	DB $BF, $17, $00, $5D
  76++E637 3F 17 00 5D  	DB $3F, $17, $00, $5D
  77++E63B
  78++E63B
  79++E63B              IguanaNormalsSize: equ $ - IguanaNormals
  80++E63B              IguanaLen: equ $ - Iguana
  81++E63B
# file closed: ./Data/ships/Iguana.asm
  88+ E63B                                      include "Data/ships/Krait.asm"
# file opened: ./Data/ships/Krait.asm
   1++E63B
   2++E63B 01 10 0E     Krait:                  DB $01, $10, $0E
   3++E63E BA E6                                DW KraitEdges
   4++E640 54                                   DB KraitEdgesSize
   5++E641 00 12                                DB $00, $12
   6++E643 66                                   DB KraitVertSize
   7++E644 15                                   DB KraitEdgesCnt
   8++E645 64 00                                DB $64,$00
   9++E647 18                                   DB KraitNormalsSize
  10++E648 14 50 1E                             DB $14, $50, $1E
  11++E64B 0E E7                                DW KraitNormals
  12++E64D 02 10                                DB $02, $10
  13++E64F 54 E6                                DW KraitVertices
  14++E651 00 00                                DB 0,0                      ; Type and Tactics
  15++E653 01                                   DB ShipCanAnger
  16++E654 00 00 60 1F  KraitVertices:          DB $00, $00, $60, $1F, $01, $23
  16++E658 01 23
  17++E65A 00 12 30 3F                          DB $00, $12, $30, $3F, $03, $45
  17++E65E 03 45
  18++E660 00 12 30 7F                          DB $00, $12, $30, $7F, $12, $45
  18++E664 12 45
  19++E666 5A 00 03 3F                          DB $5A, $00, $03, $3F, $01, $44
  19++E66A 01 44
  20++E66C 5A 00 03 BF                          DB $5A, $00, $03, $BF, $23, $55
  20++E670 23 55
  21++E672 5A 00 57 1C                          DB $5A, $00, $57, $1C, $01, $11
  21++E676 01 11
  22++E678 5A 00 57 9C                          DB $5A, $00, $57, $9C, $23, $33
  22++E67C 23 33
  23++E67E 00 05 35 09                          DB $00, $05, $35, $09, $00, $33
  23++E682 00 33
  24++E684 00 07 26 06                          DB $00, $07, $26, $06, $00, $33
  24++E688 00 33
  25++E68A 12 07 13 89                          DB $12, $07, $13, $89, $33, $33
  25++E68E 33 33
  26++E690 12 07 13 09                          DB $12, $07, $13, $09, $00, $00
  26++E694 00 00
  27++E696 12 0B 27 28                          DB $12, $0B, $27, $28, $44, $44
  27++E69A 44 44
  28++E69C 12 0B 27 68                          DB $12, $0B, $27, $68, $44, $44
  28++E6A0 44 44
  29++E6A2 24 00 1E 28                          DB $24, $00, $1E, $28, $44, $44
  29++E6A6 44 44
  30++E6A8 12 0B 27 A8                          DB $12, $0B, $27, $A8, $55, $55
  30++E6AC 55 55
  31++E6AE 12 0B 27 E8                          DB $12, $0B, $27, $E8, $55, $55
  31++E6B2 55 55
  32++E6B4 24 00 1E A8                          DB $24, $00, $1E, $A8, $55, $55
  32++E6B8 55 55
  33++E6BA              KraitVertSize           equ $  - KraitVertices
  34++E6BA 1F 03 00 04  KraitEdges:             DB $1F, $03, $00, $04, $1F, $12, $00, $08
  34++E6BE 1F 12 00 08
  35++E6C2 1F 01 00 0C                          DB $1F, $01, $00, $0C, $1F, $23, $00, $10
  35++E6C6 1F 23 00 10
  36++E6CA 1F 35 04 10                          DB $1F, $35, $04, $10, $1F, $25, $10, $08
  36++E6CE 1F 25 10 08
  37++E6D2 1F 14 08 0C                          DB $1F, $14, $08, $0C, $1F, $04, $0C, $04
  37++E6D6 1F 04 0C 04
  38++E6DA 1C 01 0C 14                          DB $1C, $01, $0C, $14, $1C, $23, $10, $18
  38++E6DE 1C 23 10 18
  39++E6E2 05 45 04 08                          DB $05, $45, $04, $08, $09, $00, $1C, $28
  39++E6E6 09 00 1C 28
  40++E6EA 06 00 20 28                          DB $06, $00, $20, $28, $09, $33, $1C, $24
  40++E6EE 09 33 1C 24
  41++E6F2 06 33 20 24                          DB $06, $33, $20, $24, $08, $44, $2C, $34
  41++E6F6 08 44 2C 34
  42++E6FA 08 44 34 30                          DB $08, $44, $34, $30, $07, $44, $30, $2C
  42++E6FE 07 44 30 2C
  43++E702 07 55 38 3C                          DB $07, $55, $38, $3C, $08, $55, $3C, $40
  43++E706 08 55 3C 40
  44++E70A 08 55 40 38                          DB $08, $55, $40, $38
  45++E70E              KraitEdgesSize          equ $  - KraitEdges
  46++E70E              KraitEdgesCnt           equ KraitEdgesSize/4
  47++E70E 1F 07 30 06  KraitNormals            DB $1F, $07, $30, $06
  48++E712 5F 07 30 06                          DB $5F, $07, $30, $06, $DF, $07, $30, $06
  48++E716 DF 07 30 06
  49++E71A 9F 07 30 06                          DB $9F, $07, $30, $06, $3F, $4D, $00, $9A
  49++E71E 3F 4D 00 9A
  50++E722 BF 4D 00 9A                          DB $BF, $4D, $00, $9A
  51++E726              KraitNormalsSize        equ $  - KraitNormals
  52++E726              KraitLen                equ $  - Krait
  53++E726
# file closed: ./Data/ships/Krait.asm
  89+ E726                                      include "Data/ships/Logo.asm"
# file opened: ./Data/ships/Logo.asm
   1++E726 00 26 49     Logo:	                DB $00, $26, $49
   2++E729 3B E8                                DW LogoEdges
   3++E72B 94                                   DB LogoEdgesSize
   4++E72C 00 36                                DB $00, $36
   5++E72E FC                                   DB LogoVertSize
   6++E72F 25                                   DB LogoEdgesCnt
   7++E730 00 00                                DB $00, $00
   8++E732 14                                   DB LogoNormalsSize
   9++E733 63 FC 24                             DB $63, $FC, $24
  10++E736 CF E8                                DW LogoNormals
  11++E738 01 00                                DB $01, $00
  12++E73A 3F E7                                DW LogoVertices
  13++E73C 00 00                                DB 0,0                      ; Type and Tactics
  14++E73E 00                                   DB 0
  15++E73F
  16++E73F 00 09 37 5F  LogoVertices:	DB $00, $09, $37, $5F, $00, $00
  16++E743 00 00
  17++E745 0A 09 1E DF  	DB $0A, $09, $1E, $DF, $00, $00
  17++E749 00 00
  18++E74B 19 09 5D DF  	DB $19, $09, $5D, $DF, $00, $00
  18++E74F 00 00
  19++E751 96 09 B4 DF  	DB $96, $09, $B4, $DF, $00, $00
  19++E755 00 00
  20++E757 5A 09 0A DF  	DB $5A, $09, $0A, $DF, $00, $00
  20++E75B 00 00
  21++E75D 8C 09 0A DF  	DB $8C, $09, $0A, $DF, $00, $00
  21++E761 00 00
  22++E763 00 09 5F 7F  	DB $00, $09, $5F, $7F, $00, $00
  22++E767 00 00
  23++E769 8C 09 0A 5F  	DB $8C, $09, $0A, $5F, $00, $00
  23++E76D 00 00
  24++E76F 5A 09 0A 5F  	DB $5A, $09, $0A, $5F, $00, $00
  24++E773 00 00
  25++E775 96 09 B4 5F  	DB $96, $09, $B4, $5F, $00, $00
  25++E779 00 00
  26++E77B 19 09 5D 5F  	DB $19, $09, $5D, $5F, $00, $00
  26++E77F 00 00
  27++E781 0A 09 1E 5F  	DB $0A, $09, $1E, $5F, $00, $00
  27++E785 00 00
  28++E787 55 09 1E FF  	DB $55, $09, $1E, $FF, $02, $33
  28++E78B 02 33
  29++E78D 55 09 1E 7F  	DB $55, $09, $1E, $7F, $02, $44
  29++E791 02 44
  30++E793 46 0B 05 9F  	DB $46, $0B, $05, $9F, $01, $33
  30++E797 01 33
  31++E799 46 0B 19 BF  	DB $46, $0B, $19, $BF, $02, $33
  31++E79D 02 33
  32++E79F 46 0B 19 3F  	DB $46, $0B, $19, $3F, $02, $44
  32++E7A3 02 44
  33++E7A5 46 0B 05 1F  	DB $46, $0B, $05, $1F, $01, $44
  33++E7A9 01 44
  34++E7AB 00 09 05 5F  	DB $00, $09, $05, $5F, $00, $00
  34++E7AF 00 00
  35++E7B1 00 09 05 5F  	DB $00, $09, $05, $5F, $00, $00
  35++E7B5 00 00
  36++E7B7 00 09 05 5F  	DB $00, $09, $05, $5F, $00, $00
  36++E7BB 00 00
  37++E7BD 1C 0B 02 BF  	DB $1C, $0B, $02, $BF, $00, $00
  37++E7C1 00 00
  38++E7C3 31 0B 02 BF  	DB $31, $0B, $02, $BF, $00, $00
  38++E7C7 00 00
  39++E7C9 31 0B 0A BF  	DB $31, $0B, $0A, $BF, $00, $00
  39++E7CD 00 00
  40++E7CF 31 0B 11 BF  	DB $31, $0B, $11, $BF, $00, $00
  40++E7D3 00 00
  41++E7D5 1C 0B 11 BF  	DB $1C, $0B, $11, $BF, $00, $00
  41++E7D9 00 00
  42++E7DB 1C 0B 0A BF  	DB $1C, $0B, $0A, $BF, $00, $00
  42++E7DF 00 00
  43++E7E1 18 0B 02 BF  	DB $18, $0B, $02, $BF, $00, $00
  43++E7E5 00 00
  44++E7E7 18 0B 11 BF  	DB $18, $0B, $11, $BF, $00, $00
  44++E7EB 00 00
  45++E7ED 03 0B 11 BF  	DB $03, $0B, $11, $BF, $00, $00
  45++E7F1 00 00
  46++E7F3 00 0B 02 3F  	DB $00, $0B, $02, $3F, $00, $00
  46++E7F7 00 00
  47++E7F9 00 0B 11 3F  	DB $00, $0B, $11, $3F, $00, $00
  47++E7FD 00 00
  48++E7FF 04 0B 02 3F  	DB $04, $0B, $02, $3F, $00, $00
  48++E803 00 00
  49++E805 19 0B 02 3F  	DB $19, $0B, $02, $3F, $00, $00
  49++E809 00 00
  50++E80B 0E 0B 02 3F  	DB $0E, $0B, $02, $3F, $00, $00
  50++E80F 00 00
  51++E811 0E 0B 11 3F  	DB $0E, $0B, $11, $3F, $00, $00
  51++E815 00 00
  52++E817 31 0B 02 3F  	DB $31, $0B, $02, $3F, $00, $00
  52++E81B 00 00
  53++E81D 1C 0B 02 3F  	DB $1C, $0B, $02, $3F, $00, $00
  53++E821 00 00
  54++E823 1C 0B 0A 3F  	DB $1C, $0B, $0A, $3F, $00, $00
  54++E827 00 00
  55++E829 1C 0B 11 3F  	DB $1C, $0B, $11, $3F, $00, $00
  55++E82D 00 00
  56++E82F 31 0B 11 3F  	DB $31, $0B, $11, $3F, $00, $00
  56++E833 00 00
  57++E835 31 0B 0A 3F  	DB $31, $0B, $0A, $3F, $00, $00
  57++E839 00 00
  58++E83B
  59++E83B              LogoVertSize: equ $ - LogoVertices
  60++E83B
  61++E83B
  62++E83B
  63++E83B 1F 00 00 04  LogoEdges:	DB $1F, $00, $00, $04
  64++E83F 1F 00 04 08  	DB $1F, $00, $04, $08
  65++E843 1F 00 08 0C  	DB $1F, $00, $08, $0C
  66++E847 1F 00 0C 10  	DB $1F, $00, $0C, $10
  67++E84B 1F 00 10 14  	DB $1F, $00, $10, $14
  68++E84F 1F 00 14 18  	DB $1F, $00, $14, $18
  69++E853 1F 00 18 1C  	DB $1F, $00, $18, $1C
  70++E857 1F 00 1C 20  	DB $1F, $00, $1C, $20
  71++E85B 1F 00 20 24  	DB $1F, $00, $20, $24
  72++E85F 1F 00 24 28  	DB $1F, $00, $24, $28
  73++E863 1F 00 28 2C  	DB $1F, $00, $28, $2C
  74++E867 1F 00 2C 00  	DB $1F, $00, $2C, $00
  75++E86B 1E 03 38 3C  	DB $1E, $03, $38, $3C
  76++E86F 1E 01 3C 40  	DB $1E, $01, $3C, $40
  77++E873 1E 04 40 44  	DB $1E, $04, $40, $44
  78++E877 1E 01 44 38  	DB $1E, $01, $44, $38
  79++E87B 1E 03 10 30  	DB $1E, $03, $10, $30
  80++E87F 1E 22 30 34  	DB $1E, $22, $30, $34
  81++E883 1E 04 34 20  	DB $1E, $04, $34, $20
  82++E887 1E 11 20 10  	DB $1E, $11, $20, $10
  83++E88B 1E 13 10 38  	DB $1E, $13, $10, $38
  84++E88F 1E 13 30 3C  	DB $1E, $13, $30, $3C
  85++E893 1E 24 34 40  	DB $1E, $24, $34, $40
  86++E897 1E 14 20 44  	DB $1E, $14, $20, $44
  87++E89B 1E 00 54 58  	DB $1E, $00, $54, $58
  88++E89F 1E 00 58 60  	DB $1E, $00, $58, $60
  89++E8A3 1E 00 60 64  	DB $1E, $00, $60, $64
  90++E8A7 1E 00 5C 68  	DB $1E, $00, $5C, $68
  91++E8AB 1E 00 6C 70  	DB $1E, $00, $6C, $70
  92++E8AF 1E 00 70 74  	DB $1E, $00, $70, $74
  93++E8B3 1E 00 78 7C  	DB $1E, $00, $78, $7C
  94++E8B7 1E 00 80 84  	DB $1E, $00, $80, $84
  95++E8BB 1E 00 88 8C  	DB $1E, $00, $88, $8C
  96++E8BF 1E 00 90 94  	DB $1E, $00, $90, $94
  97++E8C3 1E 00 94 9C  	DB $1E, $00, $94, $9C
  98++E8C7 1E 00 9C A0  	DB $1E, $00, $9C, $A0
  99++E8CB 1E 00 A4 98  	DB $1E, $00, $A4, $98
 100++E8CF
 101++E8CF              LogoEdgesSize: equ $ - LogoEdges
 102++E8CF
 103++E8CF
 104++E8CF              LogoEdgesCnt: equ LogoEdgesSize/4
 105++E8CF
 106++E8CF
 107++E8CF 1F 00 17 00  LogoNormals:	DB $1F, $00, $17, $00
 108++E8D3 1F 00 04 0F  	DB $1F, $00, $04, $0F
 109++E8D7 3F 00 0D 34  	DB $3F, $00, $0D, $34
 110++E8DB 9F 51 51 00  	DB $9F, $51, $51, $00
 111++E8DF 1F 51 51 00  	DB $1F, $51, $51, $00
 112++E8E3
 113++E8E3
 114++E8E3              LogoNormalsSize: equ $ - LogoNormals
 115++E8E3              LogoLen: equ $ - Logo
 116++E8E3
# file closed: ./Data/ships/Logo.asm
  90+ E8E3                                      include "Data/ships/Mamba.asm"
# file opened: ./Data/ships/Mamba.asm
   1++E8E3 01 13 24     Mamba:	                DB $01, $13, $24
   2++E8E6 92 E9                                DW MambaEdges
   3++E8E8 70                                   DB MambaEdgesSize
   4++E8E9 00 22                                DB $00, $22
   5++E8EB 96                                   DB MambaVertSize
   6++E8EC 1C                                   DB MambaEdgesCnt
   7++E8ED 00 96                                DB $00, $96
   8++E8EF 14                                   DB MambaNormalsSize
   9++E8F0 19 5A 1E                             DB $19, $5A, $1E
  10++E8F3 02 EA                                DW MambaNormals
  11++E8F5 02 12                                DB $02, $12
  12++E8F7 FC E8                                DW MambaVertices
  13++E8F9 00 00                                DB 0,0                      ; Type and Tactics
  14++E8FB 01                                   DB ShipCanAnger
  15++E8FC
  16++E8FC 00 00 40 1F  MambaVertices:	DB $00, $00, $40, $1F, $10, $32
  16++E900 10 32
  17++E902 40 08 20 FF  	DB $40, $08, $20, $FF, $20, $44
  17++E906 20 44
  18++E908 20 08 20 BE  	DB $20, $08, $20, $BE, $21, $44
  18++E90C 21 44
  19++E90E 20 08 20 3E  	DB $20, $08, $20, $3E, $31, $44
  19++E912 31 44
  20++E914 40 08 20 7F  	DB $40, $08, $20, $7F, $30, $44
  20++E918 30 44
  21++E91A 04 04 10 8E  	DB $04, $04, $10, $8E, $11, $11
  21++E91E 11 11
  22++E920 04 04 10 0E  	DB $04, $04, $10, $0E, $11, $11
  22++E924 11 11
  23++E926 08 03 1C 0D  	DB $08, $03, $1C, $0D, $11, $11
  23++E92A 11 11
  24++E92C 08 03 1C 8D  	DB $08, $03, $1C, $8D, $11, $11
  24++E930 11 11
  25++E932 14 04 10 D4  	DB $14, $04, $10, $D4, $00, $00
  25++E936 00 00
  26++E938 14 04 10 54  	DB $14, $04, $10, $54, $00, $00
  26++E93C 00 00
  27++E93E 18 07 14 F4  	DB $18, $07, $14, $F4, $00, $00
  27++E942 00 00
  28++E944 10 07 14 F0  	DB $10, $07, $14, $F0, $00, $00
  28++E948 00 00
  29++E94A 10 07 14 70  	DB $10, $07, $14, $70, $00, $00
  29++E94E 00 00
  30++E950 18 07 14 74  	DB $18, $07, $14, $74, $00, $00
  30++E954 00 00
  31++E956 08 04 20 AD  	DB $08, $04, $20, $AD, $44, $44
  31++E95A 44 44
  32++E95C 08 04 20 2D  	DB $08, $04, $20, $2D, $44, $44
  32++E960 44 44
  33++E962 08 04 20 6E  	DB $08, $04, $20, $6E, $44, $44
  33++E966 44 44
  34++E968 08 04 20 EE  	DB $08, $04, $20, $EE, $44, $44
  34++E96C 44 44
  35++E96E 20 04 20 A7  	DB $20, $04, $20, $A7, $44, $44
  35++E972 44 44
  36++E974 20 04 20 27  	DB $20, $04, $20, $27, $44, $44
  36++E978 44 44
  37++E97A 24 04 20 67  	DB $24, $04, $20, $67, $44, $44
  37++E97E 44 44
  38++E980 24 04 20 E7  	DB $24, $04, $20, $E7, $44, $44
  38++E984 44 44
  39++E986 26 00 20 A5  	DB $26, $00, $20, $A5, $44, $44
  39++E98A 44 44
  40++E98C 26 00 20 25  	DB $26, $00, $20, $25, $44, $44
  40++E990 44 44
  41++E992
  42++E992              MambaVertSize: equ $ - MambaVertices
  43++E992
  44++E992
  45++E992
  46++E992 1F 20 00 04  MambaEdges:	DB $1F, $20, $00, $04
  47++E996 1F 30 00 10  	DB $1F, $30, $00, $10
  48++E99A 1F 40 04 10  	DB $1F, $40, $04, $10
  49++E99E 1E 42 04 08  	DB $1E, $42, $04, $08
  50++E9A2 1E 41 08 0C  	DB $1E, $41, $08, $0C
  51++E9A6 1E 43 0C 10  	DB $1E, $43, $0C, $10
  52++E9AA 0E 11 14 18  	DB $0E, $11, $14, $18
  53++E9AE 0C 11 18 1C  	DB $0C, $11, $18, $1C
  54++E9B2 0D 11 1C 20  	DB $0D, $11, $1C, $20
  55++E9B6 0C 11 14 20  	DB $0C, $11, $14, $20
  56++E9BA 14 00 24 2C  	DB $14, $00, $24, $2C
  57++E9BE 10 00 24 30  	DB $10, $00, $24, $30
  58++E9C2 10 00 28 34  	DB $10, $00, $28, $34
  59++E9C6 14 00 28 38  	DB $14, $00, $28, $38
  60++E9CA 0E 00 34 38  	DB $0E, $00, $34, $38
  61++E9CE 0E 00 2C 30  	DB $0E, $00, $2C, $30
  62++E9D2 0D 44 3C 40  	DB $0D, $44, $3C, $40
  63++E9D6 0E 44 44 48  	DB $0E, $44, $44, $48
  64++E9DA 0C 44 3C 48  	DB $0C, $44, $3C, $48
  65++E9DE 0C 44 40 44  	DB $0C, $44, $40, $44
  66++E9E2 07 44 50 54  	DB $07, $44, $50, $54
  67++E9E6 05 44 50 60  	DB $05, $44, $50, $60
  68++E9EA 05 44 54 60  	DB $05, $44, $54, $60
  69++E9EE 07 44 4C 58  	DB $07, $44, $4C, $58
  70++E9F2 05 44 4C 5C  	DB $05, $44, $4C, $5C
  71++E9F6 05 44 58 5C  	DB $05, $44, $58, $5C
  72++E9FA 1E 21 00 08  	DB $1E, $21, $00, $08
  73++E9FE 1E 31 00 0C  	DB $1E, $31, $00, $0C
  74++EA02
  75++EA02              MambaEdgesSize: equ $ - MambaEdges
  76++EA02
  77++EA02
  78++EA02              MambaEdgesCnt: equ MambaEdgesSize/4
  79++EA02
  80++EA02
  81++EA02 5E 00 18 02  MambaNormals:	DB $5E, $00, $18, $02
  82++EA06 1E 00 18 02  	DB $1E, $00, $18, $02
  83++EA0A 9E 20 40 10  	DB $9E, $20, $40, $10
  84++EA0E 1E 20 40 10  	DB $1E, $20, $40, $10
  85++EA12 3E 00 00 7F  	DB $3E, $00, $00, $7F
  86++EA16
  87++EA16              MambaNormalsSize: equ $ - MambaNormals
  88++EA16              MambaLen: equ $ - Mamba
  89++EA16
# file closed: ./Data/ships/Mamba.asm
  91+ EA16                                      include "Data/ships/Missile.asm"
# file opened: ./Data/ships/Missile.asm
   1++EA16 00 06 40     Missile:	            DB $00, $06, $40
   2++EA19 95 EA                                DW MissileEdges
   3++EA1B 60                                   DB MissileEdgesSize
   4++EA1C 00 0A                                DB $00, $0A
   5++EA1E 66                                   DB MissileVertSize
   6++EA1F 18                                   DB MissileEdgesCnt
   7++EA20 00 00                                DB $00, $00
   8++EA22 24                                   DB MissileNormalsSize
   9++EA23 0E 02 2C                             DB $0E, $02, $2C
  10++EA26 F5 EA                                DW MissileNormals
  11++EA28 02 00                                DB $02, $00
  12++EA2A 2F EA                                DW MissileVertices
  13++EA2C 01 00                                DB ShipTypeMissile,0                      ; Type and Tactics
  14++EA2E 00                                   DB 0
  15++EA2F
  16++EA2F 00 00 44 1F  MissileVertices:	DB $00, $00, $44, $1F, $10, $32
  16++EA33 10 32
  17++EA35 08 08 24 5F  	DB $08, $08, $24, $5F, $21, $54
  17++EA39 21 54
  18++EA3B 08 08 24 1F  	DB $08, $08, $24, $1F, $32, $74
  18++EA3F 32 74
  19++EA41 08 08 24 9F  	DB $08, $08, $24, $9F, $30, $76
  19++EA45 30 76
  20++EA47 08 08 24 DF  	DB $08, $08, $24, $DF, $10, $65
  20++EA4B 10 65
  21++EA4D 08 08 2C 3F  	DB $08, $08, $2C, $3F, $74, $88
  21++EA51 74 88
  22++EA53 08 08 2C 7F  	DB $08, $08, $2C, $7F, $54, $88
  22++EA57 54 88
  23++EA59 08 08 2C FF  	DB $08, $08, $2C, $FF, $65, $88
  23++EA5D 65 88
  24++EA5F 08 08 2C BF  	DB $08, $08, $2C, $BF, $76, $88
  24++EA63 76 88
  25++EA65 0C 0C 2C 28  	DB $0C, $0C, $2C, $28, $74, $88
  25++EA69 74 88
  26++EA6B 0C 0C 2C 68  	DB $0C, $0C, $2C, $68, $54, $88
  26++EA6F 54 88
  27++EA71 0C 0C 2C E8  	DB $0C, $0C, $2C, $E8, $65, $88
  27++EA75 65 88
  28++EA77 0C 0C 2C A8  	DB $0C, $0C, $2C, $A8, $76, $88
  28++EA7B 76 88
  29++EA7D 08 08 0C A8  	DB $08, $08, $0C, $A8, $76, $77
  29++EA81 76 77
  30++EA83 08 08 0C E8  	DB $08, $08, $0C, $E8, $65, $66
  30++EA87 65 66
  31++EA89 08 08 0C 28  	DB $08, $08, $0C, $28, $74, $77
  31++EA8D 74 77
  32++EA8F 08 08 0C 68  	DB $08, $08, $0C, $68, $54, $55
  32++EA93 54 55
  33++EA95
  34++EA95              MissileVertSize: equ $ - MissileVertices
  35++EA95
  36++EA95
  37++EA95
  38++EA95 1F 21 00 04  MissileEdges:	DB $1F, $21, $00, $04
  39++EA99 1F 32 00 08  	DB $1F, $32, $00, $08
  40++EA9D 1F 30 00 0C  	DB $1F, $30, $00, $0C
  41++EAA1 1F 10 00 10  	DB $1F, $10, $00, $10
  42++EAA5 1F 24 04 08  	DB $1F, $24, $04, $08
  43++EAA9 1F 51 04 10  	DB $1F, $51, $04, $10
  44++EAAD 1F 60 0C 10  	DB $1F, $60, $0C, $10
  45++EAB1 1F 73 08 0C  	DB $1F, $73, $08, $0C
  46++EAB5 1F 74 08 14  	DB $1F, $74, $08, $14
  47++EAB9 1F 54 04 18  	DB $1F, $54, $04, $18
  48++EABD 1F 65 10 1C  	DB $1F, $65, $10, $1C
  49++EAC1 1F 76 0C 20  	DB $1F, $76, $0C, $20
  50++EAC5 1F 86 1C 20  	DB $1F, $86, $1C, $20
  51++EAC9 1F 87 14 20  	DB $1F, $87, $14, $20
  52++EACD 1F 84 14 18  	DB $1F, $84, $14, $18
  53++EAD1 1F 85 18 1C  	DB $1F, $85, $18, $1C
  54++EAD5 08 85 18 28  	DB $08, $85, $18, $28
  55++EAD9 08 87 14 24  	DB $08, $87, $14, $24
  56++EADD 08 87 20 30  	DB $08, $87, $20, $30
  57++EAE1 08 85 1C 2C  	DB $08, $85, $1C, $2C
  58++EAE5 08 74 24 3C  	DB $08, $74, $24, $3C
  59++EAE9 08 54 28 40  	DB $08, $54, $28, $40
  60++EAED 08 76 30 34  	DB $08, $76, $30, $34
  61++EAF1 08 65 2C 38  	DB $08, $65, $2C, $38
  62++EAF5
  63++EAF5              MissileEdgesSize: equ $ - MissileEdges
  64++EAF5
  65++EAF5
  66++EAF5              MissileEdgesCnt: equ MissileEdgesSize/4
  67++EAF5
  68++EAF5
  69++EAF5 9F 40 00 10  MissileNormals:	DB $9F, $40, $00, $10
  70++EAF9 5F 00 40 10  	DB $5F, $00, $40, $10
  71++EAFD 1F 40 00 10  	DB $1F, $40, $00, $10
  72++EB01 1F 00 40 10  	DB $1F, $00, $40, $10
  73++EB05 1F 20 00 00  	DB $1F, $20, $00, $00
  74++EB09 5F 00 20 00  	DB $5F, $00, $20, $00
  75++EB0D 9F 20 00 00  	DB $9F, $20, $00, $00
  76++EB11 1F 00 20 00  	DB $1F, $00, $20, $00
  77++EB15 3F 00 00 B0  	DB $3F, $00, $00, $B0
  78++EB19
  79++EB19
  80++EB19              MissileNormalsSize: equ $ - MissileNormals
  81++EB19              MissileLen: equ $ - Missile
  82++EB19
# file closed: ./Data/ships/Missile.asm
  92+ EB19                                      include "Data/ships/Monitor.asm"
# file opened: ./Data/ships/Monitor.asm
   1++EB19 04 36 00     Monitor:	            DB $04, $36, $00
   2++EB1C 98 EB                                DW MonitorEdges
   3++EB1E 5C                                   DB MonitorEdgesSize
   4++EB1F 00 2A                                DB $00, $2A
   5++EB21 66                                   DB MonitorVertSize
   6++EB22 17                                   DB MonitorEdgesCnt
   7++EB23 01 90                                DB $01, $90
   8++EB25 2C                                   DB MonitorNormalsSize
   9++EB26 28 84 10                             DB $28, $84, $10
  10++EB29 F4 EB                                DW MonitorNormals
  11++EB2B 00 37                                DB $00, $37
  12++EB2D 32 EB                                DW MonitorVertices
  13++EB2F 00 00                                DB 0,0                      ; Type and Tactics
  14++EB31 01                                   DB ShipCanAnger
  15++EB32
  16++EB32 00 0A 8C 1F  MonitorVertices:	    DB $00, $0A, $8C, $1F, $FF, $FF
  16++EB36 FF FF
  17++EB38 14 28 14 3F                          DB $14, $28, $14, $3F, $23, $01
  17++EB3C 23 01
  18++EB3E 14 28 14 BF                          DB $14, $28, $14, $BF, $50, $34
  18++EB42 50 34
  19++EB44 32 00 0A 1F                          DB $32, $00, $0A, $1F, $78, $12
  19++EB48 78 12
  20++EB4A 32 00 0A 9F                          DB $32, $00, $0A, $9F, $96, $45
  20++EB4E 96 45
  21++EB50 1E 04 3C 3F                          DB $1E, $04, $3C, $3F, $AA, $28
  21++EB54 AA 28
  22++EB56 1E 04 3C BF                          DB $1E, $04, $3C, $BF, $AA, $49
  22++EB5A AA 49
  23++EB5C 12 14 3C 3F                          DB $12, $14, $3C, $3F, $AA, $23
  23++EB60 AA 23
  24++EB62 12 14 3C BF                          DB $12, $14, $3C, $BF, $AA, $34
  24++EB66 AA 34
  25++EB68 00 14 3C 7F                          DB $00, $14, $3C, $7F, $AA, $89
  25++EB6C AA 89
  26++EB6E 00 28 0A 5F                          DB $00, $28, $0A, $5F, $89, $67
  26++EB72 89 67
  27++EB74 00 22 0A 0A                          DB $00, $22, $0A, $0A, $00, $00
  27++EB78 00 00
  28++EB7A 00 1A 32 0A                          DB $00, $1A, $32, $0A, $00, $00
  28++EB7E 00 00
  29++EB80 14 0A 3C 4A                          DB $14, $0A, $3C, $4A, $77, $77
  29++EB84 77 77
  30++EB86 0A 00 64 0A                          DB $0A, $00, $64, $0A, $77, $77
  30++EB8A 77 77
  31++EB8C 14 0A 3C CA                          DB $14, $0A, $3C, $CA, $66, $66
  31++EB90 66 66
  32++EB92 0A 00 64 8A                          DB $0A, $00, $64, $8A, $66, $66
  32++EB96 66 66
  33++EB98              MonitorVertSize:        equ $ - MonitorVertices
  34++EB98 1F 01 00 04  MonitorEdges:	        DB $1F, $01, $00, $04
  35++EB9C 1F 12 04 0C  	                    DB $1F, $12, $04, $0C
  36++EBA0 1F 23 04 1C                          DB $1F, $23, $04, $1C
  37++EBA4 1F 34 08 20                          DB $1F, $34, $08, $20
  38++EBA8 1F 45 08 10                          DB $1F, $45, $08, $10
  39++EBAC 1F 50 00 08                          DB $1F, $50, $00, $08
  40++EBB0 1F 03 04 08                          DB $1F, $03, $04, $08
  41++EBB4 1F 67 00 28                          DB $1F, $67, $00, $28
  42++EBB8 1F 78 0C 28                          DB $1F, $78, $0C, $28
  43++EBBC 1F 89 24 28                          DB $1F, $89, $24, $28
  44++EBC0 1F 96 10 28                          DB $1F, $96, $10, $28
  45++EBC4 1F 17 00 0C                          DB $1F, $17, $00, $0C
  46++EBC8 1F 28 0C 14                          DB $1F, $28, $0C, $14
  47++EBCC 1F 49 18 10                          DB $1F, $49, $18, $10
  48++EBD0 1F 56 10 00                          DB $1F, $56, $10, $00
  49++EBD4 1F 2A 1C 14                          DB $1F, $2A, $1C, $14
  50++EBD8 1F 3A 20 1C                          DB $1F, $3A, $20, $1C
  51++EBDC 1F 4A 20 18                          DB $1F, $4A, $20, $18
  52++EBE0 1F 8A 14 24                          DB $1F, $8A, $14, $24
  53++EBE4 1F 9A 18 24                          DB $1F, $9A, $18, $24
  54++EBE8 0A 00 2C 30                          DB $0A, $00, $2C, $30
  55++EBEC 0A 77 34 38                          DB $0A, $77, $34, $38
  56++EBF0 0A 66 3C 40                          DB $0A, $66, $3C, $40
  57++EBF4              MonitorEdgesSize:       equ $ - MonitorEdges
  58++EBF4              MonitorEdgesCnt:        equ MonitorEdgesSize/4
  59++EBF4 1F 00 3E 0B  MonitorNormals:	        DB $1F, $00, $3E, $0B
  60++EBF8 1F 2C 2B 0D                          DB $1F, $2C, $2B, $0D
  61++EBFC 3F 36 1C 10                          DB $3F, $36, $1C, $10
  62++EC00 3F 00 39 1C                          DB $3F, $00, $39, $1C
  63++EC04 BF 36 1C 10                          DB $BF, $36, $1C, $10
  64++EC08 9F 2C 2B 0D                          DB $9F, $2C, $2B, $0D
  65++EC0C DF 26 2F 12                          DB $DF, $26, $2F, $12
  66++EC10 5F 26 2F 12                          DB $5F, $26, $2F, $12
  67++EC14 7F 27 30 0D                          DB $7F, $27, $30, $0D
  68++EC18 FF 27 30 0D                          DB $FF, $27, $30, $0D
  69++EC1C 3F 00 00 40                          DB $3F, $00, $00, $40
  70++EC20              MonitorNormalsSize:     equ $ - MonitorNormals
  71++EC20              MonitorLen:             equ $ - Monitor
  72++EC20
# file closed: ./Data/ships/Monitor.asm
  93+ EC20                                      include "Data/ships/Moray.asm"
# file opened: ./Data/ships/Moray.asm
   1++EC20 01 03 84     Moray:	                DB $01, $03, $84
   2++EC23 8D EC                                DW MorayEdges
   3++EC25 4C                                   DB MorayEdgesSize
   4++EC26 00 1A                                DB $00, $1A
   5++EC28 54                                   DB MorayVertSize
   6++EC29 13                                   DB MorayEdgesCnt
   7++EC2A 00 32                                DB $00, $32
   8++EC2C 24                                   DB MorayNormalsSize
   9++EC2D 28 59 19                             DB $28, $59, $19
  10++EC30 D9 EC                                DW MorayNormals
  11++EC32 02 2A                                DB $02, $2A
  12++EC34 39 EC                                DW MorayVertices
  13++EC36 00 00                                DB 0,0                      ; Type and Tactics
  14++EC38 01                                   DB ShipCanAnger
  15++EC39
  16++EC39 0F 00 41 1F  MorayVertices:	        DB $0F, $00, $41, $1F, $02, $78
  16++EC3D 02 78
  17++EC3F 0F 00 41 9F                          DB $0F, $00, $41, $9F, $01, $67
  17++EC43 01 67
  18++EC45 00 12 28 31                          DB $00, $12, $28, $31, $FF, $FF
  18++EC49 FF FF
  19++EC4B 3C 00 00 9F                          DB $3C, $00, $00, $9F, $13, $66
  19++EC4F 13 66
  20++EC51 3C 00 00 1F                          DB $3C, $00, $00, $1F, $25, $88
  20++EC55 25 88
  21++EC57 1E 1B 0A 78                          DB $1E, $1B, $0A, $78, $45, $78
  21++EC5B 45 78
  22++EC5D 1E 1B 0A F8                          DB $1E, $1B, $0A, $F8, $34, $67
  22++EC61 34 67
  23++EC63 09 04 19 E7                          DB $09, $04, $19, $E7, $44, $44
  23++EC67 44 44
  24++EC69 09 04 19 67                          DB $09, $04, $19, $67, $44, $44
  24++EC6D 44 44
  25++EC6F 00 12 10 67                          DB $00, $12, $10, $67, $44, $44
  25++EC73 44 44
  26++EC75 0D 03 31 05                          DB $0D, $03, $31, $05, $00, $00
  26++EC79 00 00
  27++EC7B 06 00 41 05                          DB $06, $00, $41, $05, $00, $00
  27++EC7F 00 00
  28++EC81 0D 03 31 85                          DB $0D, $03, $31, $85, $00, $00
  28++EC85 00 00
  29++EC87 06 00 41 85                          DB $06, $00, $41, $85, $00, $00
  29++EC8B 00 00
  30++EC8D              MorayVertSize:          equ $ - MorayVertices
  31++EC8D 1F 07 00 04  MorayEdges:	            DB $1F, $07, $00, $04
  32++EC91 1F 16 04 0C                          DB $1F, $16, $04, $0C
  33++EC95 18 36 0C 18                          DB $18, $36, $0C, $18
  34++EC99 18 47 14 18                          DB $18, $47, $14, $18
  35++EC9D 18 58 10 14                          DB $18, $58, $10, $14
  36++ECA1 1F 28 00 10                          DB $1F, $28, $00, $10
  37++ECA5 0F 67 04 18                          DB $0F, $67, $04, $18
  38++ECA9 0F 78 00 14                          DB $0F, $78, $00, $14
  39++ECAD 0F 02 00 08                          DB $0F, $02, $00, $08
  40++ECB1 0F 01 04 08                          DB $0F, $01, $04, $08
  41++ECB5 11 13 08 0C                          DB $11, $13, $08, $0C
  42++ECB9 11 25 08 10                          DB $11, $25, $08, $10
  43++ECBD 0D 45 08 14                          DB $0D, $45, $08, $14
  44++ECC1 0D 34 08 18                          DB $0D, $34, $08, $18
  45++ECC5 05 44 1C 20                          DB $05, $44, $1C, $20
  46++ECC9 07 44 1C 24                          DB $07, $44, $1C, $24
  47++ECCD 07 44 20 24                          DB $07, $44, $20, $24
  48++ECD1 05 00 28 2C                          DB $05, $00, $28, $2C
  49++ECD5 05 00 30 34                          DB $05, $00, $30, $34
  50++ECD9              MorayEdgesSize:         equ $ - MorayEdges
  51++ECD9              MorayEdgesCnt:          equ MorayEdgesSize/4
  52++ECD9 1F 00 2B 07  MorayNormals:	        DB $1F, $00, $2B, $07
  53++ECDD 9F 0A 31 07                          DB $9F, $0A, $31, $07
  54++ECE1 1F 0A 31 07                          DB $1F, $0A, $31, $07
  55++ECE5 F8 3B 1C 65                          DB $F8, $3B, $1C, $65
  56++ECE9 78 00 34 4E                          DB $78, $00, $34, $4E
  57++ECED 78 3B 1C 65                          DB $78, $3B, $1C, $65
  58++ECF1 DF 48 63 32                          DB $DF, $48, $63, $32
  59++ECF5 5F 00 53 1E                          DB $5F, $00, $53, $1E
  60++ECF9 5F 48 63 32                          DB $5F, $48, $63, $32
  61++ECFD
  62++ECFD              MorayNormalsSize:       equ $ - MorayNormals
  63++ECFD              MorayLen:               equ $ - Moray
  64++ECFD
# file closed: ./Data/ships/Moray.asm
  94+ ECFD                                      include "Data/ships/Ophidian.asm"
# file opened: ./Data/ships/Ophidian.asm
   1++ECFD 02 0E 88     Ophidian:	            DB $02, $0E, $88
   2++ED00 8E ED                                DW OphidianEdges
   3++ED02 78                                   DB OphidianEdgesSize
   4++ED03 00 3C                                DB $00, $3C
   5++ED05 78                                   DB OphidianVertSize
   6++ED06 1E                                   DB OphidianEdgesCnt
   7++ED07 00 32                                DB $00, $32
   8++ED09 30                                   DB OphidianNormalsSize
   9++ED0A 14 40 22                             DB $14, $40, $22
  10++ED0D 06 EE                                DW OphidianNormals
  11++ED0F 01 1A                                DB $01, $1A
  12++ED11 16 ED                                DW OphidianVertices
  13++ED13 00 00                                DB 0,0                      ; Type and Tactics
  14++ED15 01                                   DB ShipCanAnger
  15++ED16
  16++ED16 14 00 46 9F  OphidianVertices:	    DB $14, $00, $46, $9F, $68, $02
  16++ED1A 68 02
  17++ED1C 14 00 46 1F                          DB $14, $00, $46, $1F, $67, $01
  17++ED20 67 01
  18++ED22 00 0A 28 1F                          DB $00, $0A, $28, $1F, $22, $01
  18++ED26 22 01
  19++ED28 1E 00 1E 9F                          DB $1E, $00, $1E, $9F, $8A, $24
  19++ED2C 8A 24
  20++ED2E 1E 00 1E 1F                          DB $1E, $00, $1E, $1F, $79, $13
  20++ED32 79 13
  21++ED34 00 10 0A 1F                          DB $00, $10, $0A, $1F, $FF, $FF
  21++ED38 FF FF
  22++ED3A 14 0A 32 3F                          DB $14, $0A, $32, $3F, $9B, $35
  22++ED3E 9B 35
  23++ED40 14 0A 32 BF                          DB $14, $0A, $32, $BF, $AB, $45
  23++ED44 AB 45
  24++ED46 1E 00 32 BF                          DB $1E, $00, $32, $BF, $BB, $4A
  24++ED4A BB 4A
  25++ED4C 28 00 32 B0                          DB $28, $00, $32, $B0, $FF, $FF
  25++ED50 FF FF
  26++ED52 1E 00 1E B0                          DB $1E, $00, $1E, $B0, $FF, $FF
  26++ED56 FF FF
  27++ED58 1E 00 32 3F                          DB $1E, $00, $32, $3F, $BB, $39
  27++ED5C BB 39
  28++ED5E 28 00 32 30                          DB $28, $00, $32, $30, $FF, $FF
  28++ED62 FF FF
  29++ED64 1E 00 1E 30                          DB $1E, $00, $1E, $30, $FF, $FF
  29++ED68 FF FF
  30++ED6A 00 0A 32 7F                          DB $00, $0A, $32, $7F, $BB, $9A
  30++ED6E BB 9A
  31++ED70 00 10 14 5F                          DB $00, $10, $14, $5F, $FF, $FF
  31++ED74 FF FF
  32++ED76 0A 04 32 30                          DB $0A, $04, $32, $30, $BB, $BB
  32++ED7A BB BB
  33++ED7C 0A 02 32 70                          DB $0A, $02, $32, $70, $BB, $BB
  33++ED80 BB BB
  34++ED82 0A 02 32 F0                          DB $0A, $02, $32, $F0, $BB, $BB
  34++ED86 BB BB
  35++ED88 0A 04 32 B0                          DB $0A, $04, $32, $B0, $BB, $BB
  35++ED8C BB BB
  36++ED8E
  37++ED8E              OphidianVertSize:       equ $ - OphidianVertices
  38++ED8E 1F 06 00 04  OphidianEdges:	        DB $1F, $06, $00, $04
  39++ED92 1F 01 04 08                          DB $1F, $01, $04, $08
  40++ED96 1F 02 00 08                          DB $1F, $02, $00, $08
  41++ED9A 1F 12 08 14                          DB $1F, $12, $08, $14
  42++ED9E 1F 13 10 14                          DB $1F, $13, $10, $14
  43++EDA2 1F 24 0C 14                          DB $1F, $24, $0C, $14
  44++EDA6 1F 35 14 18                          DB $1F, $35, $14, $18
  45++EDAA 1F 45 14 1C                          DB $1F, $45, $14, $1C
  46++EDAE 1F 28 00 0C                          DB $1F, $28, $00, $0C
  47++EDB2 1F 17 04 10                          DB $1F, $17, $04, $10
  48++EDB6 1F 39 10 2C                          DB $1F, $39, $10, $2C
  49++EDBA 1F 4A 0C 20                          DB $1F, $4A, $0C, $20
  50++EDBE 1F 67 04 3C                          DB $1F, $67, $04, $3C
  51++EDC2 1F 68 00 3C                          DB $1F, $68, $00, $3C
  52++EDC6 1F 79 10 3C                          DB $1F, $79, $10, $3C
  53++EDCA 1F 8A 0C 3C                          DB $1F, $8A, $0C, $3C
  54++EDCE 1F 9A 38 3C                          DB $1F, $9A, $38, $3C
  55++EDD2 1F 5B 18 1C                          DB $1F, $5B, $18, $1C
  56++EDD6 1F 3B 18 2C                          DB $1F, $3B, $18, $2C
  57++EDDA 1F 4B 1C 20                          DB $1F, $4B, $1C, $20
  58++EDDE 1F 9B 2C 38                          DB $1F, $9B, $2C, $38
  59++EDE2 1F AB 20 38                          DB $1F, $AB, $20, $38
  60++EDE6 10 BB 40 44                          DB $10, $BB, $40, $44
  61++EDEA 10 BB 44 48                          DB $10, $BB, $44, $48
  62++EDEE 10 BB 48 4C                          DB $10, $BB, $48, $4C
  63++EDF2 10 BB 4C 40                          DB $10, $BB, $4C, $40
  64++EDF6 10 39 30 34                          DB $10, $39, $30, $34
  65++EDFA 10 39 2C 30                          DB $10, $39, $2C, $30
  66++EDFE 10 4A 28 24                          DB $10, $4A, $28, $24
  67++EE02 10 4A 24 20                          DB $10, $4A, $24, $20
  68++EE06              OphidianEdgesSize:      equ $ - OphidianEdges
  69++EE06              OphidianEdgesCnt:       equ OphidianEdgesSize/4
  70++EE06
  71++EE06 1F 00 25 0C  OphidianNormals:	    DB $1F, $00, $25, $0C
  72++EE0A 1F 0B 1C 05                          DB $1F, $0B, $1C, $05
  73++EE0E 9F 0B 1C 05                          DB $9F, $0B, $1C, $05
  74++EE12 1F 10 22 02                          DB $1F, $10, $22, $02
  75++EE16 9F 10 22 02                          DB $9F, $10, $22, $02
  76++EE1A 3F 00 25 03                          DB $3F, $00, $25, $03
  77++EE1E 5F 00 1F 0A                          DB $5F, $00, $1F, $0A
  78++EE22 5F 0A 14 02                          DB $5F, $0A, $14, $02
  79++EE26 DF 0A 14 02                          DB $DF, $0A, $14, $02
  80++EE2A 7F 12 20 02                          DB $7F, $12, $20, $02
  81++EE2E FF 12 20 02                          DB $FF, $12, $20, $02
  82++EE32 3F 00 00 25                          DB $3F, $00, $00, $25
  83++EE36
  84++EE36              OphidianNormalsSize:    equ $ - OphidianNormals
  85++EE36              OphidianLen:            equ $ - Ophidian
  86++EE36
# file closed: ./Data/ships/Ophidian.asm
  95+ EE36                                      include "Data/ships/Plate.asm"
# file opened: ./Data/ships/Plate.asm
   1++EE36 80 00 64     Plate:	                DB $80, $00, $64
   2++EE39 61 EE                                DW PlateEdges
   3++EE3B 10                                   DB PlateEdgesSize
   4++EE3C 00 0A                                DB $00, $0A
   5++EE3E 12                                   DB PlateVertSize
   6++EE3F 04                                   DB PlateEdgesCnt
   7++EE40 00 00                                DB $00, $00
   8++EE42 04                                   DB PlateNormalsSize
   9++EE43 05 10 10                             DB $05, $10, $10
  10++EE46 71 EE                                DW PlateNormals
  11++EE48 03 00                                DB $03, $00
  12++EE4A 4F EE                                DW PlateVertices
  13++EE4C 00 00                                DB 0,0                      ; Type and Tactics
  14++EE4E 01                                   DB ShipCanAnger
  15++EE4F
  16++EE4F
  17++EE4F 0F 16 09 FF  PlateVertices:	DB $0F, $16, $09, $FF, $FF, $FF
  17++EE53 FF FF
  18++EE55 0F 26 09 BF  	DB $0F, $26, $09, $BF, $FF, $FF
  18++EE59 FF FF
  19++EE5B 13 20 0B 14  	DB $13, $20, $0B, $14, $FF, $FF
  19++EE5F FF FF
  20++EE61
  21++EE61              PlateVertSize: equ $ - PlateVertices
  22++EE61
  23++EE61
  24++EE61
  25++EE61 1F FF 00 04  PlateEdges:	DB $1F, $FF, $00, $04
  26++EE65 10 FF 04 08  	DB $10, $FF, $04, $08
  27++EE69 14 FF 08 0C  	DB $14, $FF, $08, $0C
  28++EE6D 10 FF 0C 00  	DB $10, $FF, $0C, $00
  29++EE71
  30++EE71              PlateEdgesSize: equ $ - PlateEdges
  31++EE71
  32++EE71
  33++EE71              PlateEdgesCnt: equ PlateEdgesSize/4
  34++EE71
  35++EE71
  36++EE71 00 00 00 00  PlateNormals:	DB $00, $00, $00, $00
  37++EE75
  38++EE75
  39++EE75              PlateNormalsSize: equ $ - PlateNormals
  40++EE75              PlateLen: equ $ - Plate
  41++EE75
# file closed: ./Data/ships/Plate.asm
  96+ EE75                                      include "Data/ships/Python.asm"
# file opened: ./Data/ships/Python.asm
   1++EE75              ;\ -> &5BA1 \ Python = Type 12
   2++EE75 05 00 19     Python:                 DB $05, $00, $19
   3++EE78 D0 EE                                DW PythonEdges
   4++EE7A 68                                   DB PythonEdgesSize
   5++EE7B 00 2A                                DB $00,$2A
   6++EE7D 42                                   DB PythonVertSize
   7++EE7E 1A                                   DB PythonEdgesCnt
   8++EE7F 00 00                                DB $00,$00
   9++EE81 34                                   DB PythonNormalsSize
  10++EE82 28 FA 14                             DB $28,$FA,$14
  11++EE85 38 EF                                DW PythonNormals
  12++EE87 00 1B                                DB $00, $1B
  13++EE89 8E EE                                DW PythonVertices
  14++EE8B 00 00                                DB 0,0                      ; Type and Tactics
  15++EE8D 01                                   DB ShipCanAnger
  16++EE8E
  17++EE8E 00 00 E0 1F  PythonVertices:         DB $00, $00, $E0, $1F, $10, $32
  17++EE92 10 32
  18++EE94 00 30 30 1E                          DB $00, $30, $30, $1E, $10, $54
  18++EE98 10 54
  19++EE9A 60 00 10 3F                          DB $60, $00, $10, $3F, $FF, $FF
  19++EE9E FF FF
  20++EEA0 60 00 10 BF                          DB $60, $00, $10, $BF, $FF, $FF
  20++EEA4 FF FF
  21++EEA6 00 30 20 3E                          DB $00, $30, $20, $3E, $54, $98
  21++EEAA 54 98
  22++EEAC 00 18 70 3F                          DB $00, $18, $70, $3F, $89, $CC
  22++EEB0 89 CC
  23++EEB2 30 00 70 BF                          DB $30, $00, $70, $BF, $B8, $CC
  23++EEB6 B8 CC
  24++EEB8 30 00 70 3F                          DB $30, $00, $70, $3F, $A9, $CC
  24++EEBC A9 CC
  25++EEBE 00 30 30 5E                          DB $00, $30, $30, $5E, $32, $76
  25++EEC2 32 76
  26++EEC4 00 30 20 7E                          DB $00, $30, $20, $7E, $76, $BA
  26++EEC8 76 BA
  27++EECA 00 18 70 7E                          DB $00, $18, $70, $7E, $BA, $CC
  27++EECE BA CC
  28++EED0              PythonVertSize          equ $  - PythonVertices
  29++EED0 1E 32 00 20  PythonEdges:            DB $1E, $32, $00, $20, $1F, $20, $00, $0C
  29++EED4 1F 20 00 0C
  30++EED8 1F 31 00 08                          DB $1F, $31, $00, $08, $1E, $10, $00, $04
  30++EEDC 1E 10 00 04
  31++EEE0 1D 59 08 10                          DB $1D, $59, $08, $10, $1D, $51, $04, $08
  31++EEE4 1D 51 04 08
  32++EEE8 1D 37 08 20                          DB $1D, $37, $08, $20, $1D, $40, $04, $0C
  32++EEEC 1D 40 04 0C
  33++EEF0 1D 62 0C 20                          DB $1D, $62, $0C, $20, $1D, $A7, $08, $24
  33++EEF4 1D A7 08 24
  34++EEF8 1D 84 0C 10                          DB $1D, $84, $0C, $10, $1D, $B6, $0C, $24
  34++EEFC 1D B6 0C 24
  35++EF00 05 88 0C 14                          DB $05, $88, $0C, $14, $05, $BB, $0C, $28
  35++EF04 05 BB 0C 28
  36++EF08 05 99 08 14                          DB $05, $99, $08, $14, $05, $AA, $08, $28
  36++EF0C 05 AA 08 28
  37++EF10 1F A9 08 1C                          DB $1F, $A9, $08, $1C, $1F, $B8, $0C, $18
  37++EF14 1F B8 0C 18
  38++EF18 1F C8 14 18                          DB $1F, $C8, $14, $18, $1F, $C9, $14, $1C
  38++EF1C 1F C9 14 1C
  39++EF20 1D AC 1C 28                          DB $1D, $AC, $1C, $28, $1D, $CB, $18, $28
  39++EF24 1D CB 18 28
  40++EF28 1D 98 10 14                          DB $1D, $98, $10, $14, $1D, $BA, $24, $28
  40++EF2C 1D BA 24 28
  41++EF30 1D 54 04 10                          DB $1D, $54, $04, $10, $1D, $76, $20, $24
  41++EF34 1D 76 20 24
  42++EF38              PythonEdgesSize         equ $  - PythonEdges
  43++EF38              PythonEdgesCnt          equ PythonEdgesSize/4
  44++EF38 9E 1B 28 0B  PythonNormals           DB $9E, $1B, $28, $0B, $1E, $1B, $28, $0B
  44++EF3C 1E 1B 28 0B
  45++EF40 DE 1B 28 0B                          DB $DE, $1B, $28, $0B, $5E, $1B, $28, $0B
  45++EF44 5E 1B 28 0B
  46++EF48 9E 13 26 00                          DB $9E, $13, $26, $00, $1E, $13, $26, $00
  46++EF4C 1E 13 26 00
  47++EF50 DE 13 26 00                          DB $DE, $13, $26, $00, $5E, $13, $26, $00
  47++EF54 5E 13 26 00
  48++EF58 BE 19 25 0B                          DB $BE, $19, $25, $0B, $3E, $19, $25, $0B
  48++EF5C 3E 19 25 0B
  49++EF60 7E 19 25 0B                          DB $7E, $19, $25, $0B, $FE, $19, $25, $0B
  49++EF64 FE 19 25 0B
  50++EF68 3E 00 00 70                          DB $3E, $00, $00, $70
  51++EF6C              PythonNormalsSize       equ $  - PythonNormals
  52++EF6C              PythonLen               equ $  - Python
  53++EF6C
# file closed: ./Data/ships/Python.asm
  97+ EF6C                                      include "Data/ships/Python_P.asm"
# file opened: ./Data/ships/Python_P.asm
   1++EF6C 02 19 00     Python_P:	            DB $02, $19, $00
   2++EF6F C7 EF                                DW Python_PEdges
   3++EF71 68                                   DB Python_PEdgesSize
   4++EF72 00 2A                                DB $00, $2A
   5++EF74 42                                   DB Python_PVertSize
   6++EF75 1A                                   DB Python_PEdgesCnt
   7++EF76 00 C8                                DB $00, $C8
   8++EF78 34                                   DB Python_PNormalsSize
   9++EF79 28 FA 14                             DB $28, $FA, $14
  10++EF7C 2F F0                                DW Python_PNormals
  11++EF7E 00 1B                                DB $00, $1B
  12++EF80 85 EF                                DW Python_PVertices
  13++EF82 00 00                                DB 0,0                      ; Type and Tactics
  14++EF84 01                                   DB ShipCanAnger
  15++EF85
  16++EF85 00 00 E0 1F  Python_PVertices:	DB $00, $00, $E0, $1F, $10, $32
  16++EF89 10 32
  17++EF8B 00 30 30 1F  	DB $00, $30, $30, $1F, $10, $54
  17++EF8F 10 54
  18++EF91 60 00 10 3F  	DB $60, $00, $10, $3F, $FF, $FF
  18++EF95 FF FF
  19++EF97 60 00 10 BF  	DB $60, $00, $10, $BF, $FF, $FF
  19++EF9B FF FF
  20++EF9D 00 30 20 3F  	DB $00, $30, $20, $3F, $54, $98
  20++EFA1 54 98
  21++EFA3 00 18 70 3F  	DB $00, $18, $70, $3F, $89, $CC
  21++EFA7 89 CC
  22++EFA9 30 00 70 BF  	DB $30, $00, $70, $BF, $B8, $CC
  22++EFAD B8 CC
  23++EFAF 30 00 70 3F  	DB $30, $00, $70, $3F, $A9, $CC
  23++EFB3 A9 CC
  24++EFB5 00 30 30 5F  	DB $00, $30, $30, $5F, $32, $76
  24++EFB9 32 76
  25++EFBB 00 30 20 7F  	DB $00, $30, $20, $7F, $76, $BA
  25++EFBF 76 BA
  26++EFC1 00 18 70 7F  	DB $00, $18, $70, $7F, $BA, $CC
  26++EFC5 BA CC
  27++EFC7
  28++EFC7              Python_PVertSize: equ $ - Python_PVertices
  29++EFC7
  30++EFC7
  31++EFC7
  32++EFC7 1F 32 00 20  Python_PEdges:	DB $1F, $32, $00, $20
  33++EFCB 1F 20 00 0C  	DB $1F, $20, $00, $0C
  34++EFCF 1F 31 00 08  	DB $1F, $31, $00, $08
  35++EFD3 1F 10 00 04  	DB $1F, $10, $00, $04
  36++EFD7 1F 59 08 10  	DB $1F, $59, $08, $10
  37++EFDB 1F 51 04 08  	DB $1F, $51, $04, $08
  38++EFDF 1F 37 08 20  	DB $1F, $37, $08, $20
  39++EFE3 1F 40 04 0C  	DB $1F, $40, $04, $0C
  40++EFE7 1F 62 0C 20  	DB $1F, $62, $0C, $20
  41++EFEB 1F A7 08 24  	DB $1F, $A7, $08, $24
  42++EFEF 1F 84 0C 10  	DB $1F, $84, $0C, $10
  43++EFF3 1F B6 0C 24  	DB $1F, $B6, $0C, $24
  44++EFF7 07 88 0C 14  	DB $07, $88, $0C, $14
  45++EFFB 07 BB 0C 28  	DB $07, $BB, $0C, $28
  46++EFFF 07 99 08 14  	DB $07, $99, $08, $14
  47++F003 07 AA 08 28  	DB $07, $AA, $08, $28
  48++F007 1F A9 08 1C  	DB $1F, $A9, $08, $1C
  49++F00B 1F B8 0C 18  	DB $1F, $B8, $0C, $18
  50++F00F 1F C8 14 18  	DB $1F, $C8, $14, $18
  51++F013 1F C9 14 1C  	DB $1F, $C9, $14, $1C
  52++F017 1F AC 1C 28  	DB $1F, $AC, $1C, $28
  53++F01B 1F CB 18 28  	DB $1F, $CB, $18, $28
  54++F01F 1F 98 10 14  	DB $1F, $98, $10, $14
  55++F023 1F BA 24 28  	DB $1F, $BA, $24, $28
  56++F027 1F 54 04 10  	DB $1F, $54, $04, $10
  57++F02B 1F 76 20 24  	DB $1F, $76, $20, $24
  58++F02F
  59++F02F              Python_PEdgesSize: equ $ - Python_PEdges
  60++F02F
  61++F02F
  62++F02F              Python_PEdgesCnt: equ Python_PEdgesSize/4
  63++F02F
  64++F02F
  65++F02F 9F 1B 28 0B  Python_PNormals:	DB $9F, $1B, $28, $0B
  66++F033 1F 1B 28 0B  	DB $1F, $1B, $28, $0B
  67++F037 DF 1B 28 0B  	DB $DF, $1B, $28, $0B
  68++F03B 5F 1B 28 0B  	DB $5F, $1B, $28, $0B
  69++F03F 9F 13 26 00  	DB $9F, $13, $26, $00
  70++F043 1F 13 26 00  	DB $1F, $13, $26, $00
  71++F047 DF 13 26 00  	DB $DF, $13, $26, $00
  72++F04B 5F 13 26 00  	DB $5F, $13, $26, $00
  73++F04F BF 19 25 0B  	DB $BF, $19, $25, $0B
  74++F053 3F 19 25 0B  	DB $3F, $19, $25, $0B
  75++F057 7F 19 25 0B  	DB $7F, $19, $25, $0B
  76++F05B FF 19 25 0B  	DB $FF, $19, $25, $0B
  77++F05F 3F 00 00 70  	DB $3F, $00, $00, $70
  78++F063
  79++F063
  80++F063              Python_PNormalsSize: equ $ - Python_PNormals
  81++F063              Python_PLen: equ $ - Python_P
  82++F063
# file closed: ./Data/ships/Python_P.asm
  98+ F063
# file closed: ./Data/ShipModelMetaData2.asm
1291  F063              ; Bank 68  ------------------------------------------------------------------------------------------------------------------------
1292  F063                  SLOT    ShipModelsAddr
1293  F063                  PAGE    BankShipModels3
1294  F063              	ORG     ShipModelsAddr, BankShipModels3
1295  E000
1296  E000                  INCLUDE "./Data/ShipBank3Label.asm"
# file opened: ./Data/ShipBank3Label.asm
   1+ E000 53 68 69 70  ShipBank3Label:         DB  "ShipBank3      "
   1+ E004 42 61 6E 6B
   1+ E008 33 20 20 20
   1+ E00C 20 20 20
   2+ E00F
# file closed: ./Data/ShipBank3Label.asm
1297  E00F              GetShipBank3Id:         MGetShipBankId ShipBankTable3
1297  E00F 06 00       >                        ld      b,0
1297  E011 4F          >                        ld      c,a                                 ; c= original ship id
1297  E012 CB 3F       >.ShiftLoop:             srl     a
1297  E014 CB 3F       >                        srl     a
1297  E016 CB 3F       >                        srl     a
1297  E018 CB 3F       >                        srl     a                                   ; divide by 16
1297  E01A 47          >                        ld      b,a                                 ; b = bank nbr
1297  E01B 79          >                        ld      a,c
1297  E01C 50          >                        ld      d,b
1297  E01D 1E 10       >                        ld      e,16
1297  E01F ED 30       >                        mul                                         ; de = 16 * bank number (max is about 15 banks)
1297  E021 93          >                        sub     e                                   ; a= actual model id now
1297  E022 50          >.SelectedBank:          ld      d,b                                 ; save current bank number
1297  E023 47          >                        ld      b,a                                 ; b = adjusted ship nbr
1297  E024 7A          >                        ld      a,d                                 ; a = bank number
1297  E025             >;.. Now b = bank and a = adjusted ship nbr
1297  E025 21 62 E0    >                        ld      hl,ShipBankTable3                        ; a= bank index
1297  E028 ED 31       >                        add     hl,a
1297  E02A ED 31       >                        add     hl,a
1297  E02C 7E          >                        ld      a,(hl)                              ; a = actual bank now
1297  E02D             >                        ClearCarryFlag
1297  E02D B7          >                        or a
1297  E02E C9          >                        ret
1298  E02F              CopyVertsToUniv3:       McopyVertsToUniverse
1298  E02F 2A 20 C3    >                        ld          hl,(VerticesAddyAddr)       ; now the pointers are in Ubnk its easy to read
1298  E032 11 25 C3    >                        ld          de,UBnkHullVerticies
1298  E035 06 00       >                        ld          b,0
1298  E037 3A 14 C3    >                        ld			a,(VertexCtX6Addr)
1298  E03A 4F          >                        ld          c,a
1298  E03B EB          >                        ex          de,hl                       ; dma transfer goes de -> hl i.e. opposite of ldir
1298  E03C CD 4E 95    >                        call        memcopy_dma
1298  E03F C9          >                        ret
1299  E040              CopyEdgesToUniv3:       McopyEdgesToUniverse
1299  E040 2A 0F C3    >                        ld          hl,(EdgeAddyAddr)          ; now the pointers are in Ubnk its easy to read
1299  E043 11 51 C4    >                        ld          de,UBnkHullEdges
1299  E046 06 00       >                        ld          b,0
1299  E048 3A 11 C3    >                        ld			a,(LineX4Addr)
1299  E04B 4F          >                        ld          c,a
1299  E04C EB          >                        ex          de,hl                       ; dma transfer goes de -> hl i.e. opposite of ldir
1299  E04D CD 4E 95    >                        call        memcopy_dma
1299  E050 C9          >                        ret
1300  E051              CopyNormsToUniv3:       McopyNormsToUniverse
1300  E051 2A 1C C3    >                        ld          hl,(FaceAddyAddr)          ; now the pointers are in Ubnk its easy to read
1300  E054 11 01 C9    >                        ld          de,UBnkHullNormals
1300  E057 06 00       >                        ld          b,0
1300  E059 3A 18 C3    >                        ld          a,(FaceCtX4Addr)
1300  E05C 4F          >                        ld          c,a
1300  E05D EB          >                        ex          de,hl                       ; dma transfer goes de -> hl i.e. opposite of ldir
1300  E05E CD 4E 95    >                        call        memcopy_dma
1300  E061 C9          >                        ret
1301  E062              ShipBankTable3:         MShipBankTable
1301  E062 3B 00       >                        DW      BankShipModels1
1301  E064 43 00       >                        DW      BankShipModels2
1301  E066 44 00       >                        DW      BankShipModels3
1301  E068 45 00       >                        DW      BankShipModels4
1302  E06A              CopyShipToUniverse3     MCopyShipToUniverse     BankShipModels3
1302  E06A 21 2D C0    >                        ld          hl,UBnkShipModelBank
1302  E06D 36 44       >                        ld          (hl),BankShipModels3
1302  E06F 32 2E C0    >                        ld          (UBnkShipModelNbr),a
1302  E072 21 1F E1    >.GetHullDataLength:     ld          hl,ShipModelSizeTable
1302  E075 ED 31       >                        add         hl,a
1302  E077 ED 31       >                        add         hl,a                        ; we won't multiply by 2 as GetInfo is a general purpose routines so would end up x 4
1302  E079 4E          >                        ld          c,(hl)
1302  E07A 23          >                        inc         hl
1302  E07B 46          >                        ld          b,(hl)                      ; bc now equals length of data set
1302  E07C 21 9F E0    >.GetHullDataAddress:    ld          hl,ShipModelTable
1302  E07F ED 31       >                        add         hl,a
1302  E081 ED 31       >                        add         hl,a                        ; now hl = address of ship data value
1302  E083 7E          >                        ld          a,(hl)
1302  E084 23          >                        inc         hl
1302  E085 66          >                        ld          h,(hl)
1302  E086 6F          >                        ld          l,a                         ; now hl = address of ship hull data
1302  E087 11 0C C3    >                        ld          de,UBnkHullCopy             ; Universe bank
1302  E08A 01 19 00    >                        ld          bc,ShipDataLength
1302  E08D ED B0       >                        ldir
1302  E08F CD 2F E0    >                        call        CopyVertsToUniv
1302  E092 CD 40 E0    >                        call        CopyEdgesToUniv
1302  E095 CD 51 E0    >                        call        CopyNormsToUniv
1302  E098 C9          >                        ret
1303  E099              CopyBodyToUniverse3:    MCopyBodyToUniverse     CopyShipToUniverse3
1303  E099 3E 0D       >                        ld          a,13
1303  E09B CD 6A E0    >                        call        CopyShipToUniverse3
1303  E09E C9          >                        ret
1304  E09F                  INCLUDE "./Data/ShipModelMetaData3.asm"
# file opened: ./Data/ShipModelMetaData3.asm
   1+ E09F 1F E1        ShipModelTable3:         DW Rock_Hermit                             ;32
   2+ E0A1 FA E1                                 DW ShuttleType9                            ;33
   3+ E0A3 31 E3                                 DW Shuttle_Mk_2                            ;34
   4+ E0A5 54 E4                                 DW Sidewinder                              ;35
   5+ E0A7 01 E5                                 DW Splinter                                ;36
   6+ E0A9 5A E5                                 DW TestVector                              ;37
   7+ E0AB BD E5                                 DW Thargoid                                ;38
   8+ E0AD DE E6                                 DW Thargon                                 ;39
   9+ E0AF 8B E7                                 DW TransportType10                         ;40
  10+ E0B1 72 E9                                 DW Viper                                   ;41
  11+ E0B3 51 EA                                 DW Worm                                    ;42
  12+ E0B5 06 EB                                 DW Rattler                                 ;43
  13+ E0B7 00 00                                 DW 0                                       ;44
  14+ E0B9 00 00                                 DW 0                                       ;45
  15+ E0BB 00 00                                 DW 0                                       ;46
  16+ E0BD 00 00                                 DW 0                                       ;47
  17+ E0BF 38 E1        ShipVertexTable3:        DW Rock_HermitVertices
  18+ E0C1 13 E2                                 DW ShuttleType9Vertices
  19+ E0C3 4A E3                                 DW Shuttle_Mk_2Vertices
  20+ E0C5 6D E4                                 DW SidewinderVertices
  21+ E0C7 1A E5                                 DW SplinterVertices
  22+ E0C9 73 E5                                 DW TestVectorVertices
  23+ E0CB D6 E5                                 DW ThargoidVertices
  24+ E0CD F7 E6                                 DW ThargonVertices
  25+ E0CF A4 E7                                 DW TransportType10Vertices
  26+ E0D1 8B E9                                 DW ViperVertices
  27+ E0D3 6A EA                                 DW WormVertices
  28+ E0D5 1F EB                                 DW RattlerVertices
  29+ E0D7 6E E1        ShipEdgeTable3:          DW Rock_HermitEdges
  30+ E0D9 85 E2                                 DW ShuttleType9Edges
  31+ E0DB B0 E3                                 DW Shuttle_Mk_2Edges
  32+ E0DD A9 E4                                 DW SidewinderEdges
  33+ E0DF 32 E5                                 DW SplinterEdges
  34+ E0E1 9D E5                                 DW TestVectorEdges
  35+ E0E3 4E E6                                 DW ThargoidEdges
  36+ E0E5 33 E7                                 DW ThargonEdges
  37+ E0E7 82 E8                                 DW TransportType10Edges
  38+ E0E9 E5 E9                                 DW ViperEdges
  39+ E0EB A6 EA                                 DW WormEdges
  40+ E0ED 79 EB                                 DW RattlerEdges
  41+ E0EF C2 E1        ShipNormalTable3:        DW Rock_HermitNormals
  42+ E0F1 FD E2                                 DW ShuttleType9Normals
  43+ E0F3 20 E4                                 DW Shuttle_Mk_2Normals
  44+ E0F5 E5 E4                                 DW SidewinderNormals
  45+ E0F7 4A E5                                 DW SplinterNormals
  46+ E0F9 AD E5                                 DW TestVectorNormals
  47+ E0FB B6 E6                                 DW ThargoidNormals
  48+ E0FD 6F E7                                 DW ThargonNormals
  49+ E0FF 3A E9                                 DW TransportType10Normals
  50+ E101 35 EA                                 DW ViperNormals
  51+ E103 E6 EA                                 DW WormNormals
  52+ E105 79 EB                                 DW RattlerEdges
  53+ E107 DB 00        ShipModelSizeTable3:     DW Rock_HermitLen
  54+ E109 37 01                                 DW ShuttleType9Len
  55+ E10B 23 01                                 DW Shuttle_Mk_2Len
  56+ E10D AD 00                                 DW SidewinderLen
  57+ E10F 59 00                                 DW SplinterLen
  58+ E111 63 00                                 DW TestVectorLen
  59+ E113 21 01                                 DW ThargoidLen
  60+ E115 AD 00                                 DW ThargonLen
  61+ E117 E7 01                                 DW TransportType10Len
  62+ E119 DF 00                                 DW ViperLen
  63+ E11B B5 00                                 DW WormLen
  64+ E11D 0F 01                                 DW RattlerLen
  65+ E11F
  66+ E11F                                      include "Data/ships/Rock_Hermit.asm"
# file opened: ./Data/ships/Rock_Hermit.asm
   1++E11F 07 19 00     Rock_Hermit:	        DB $07, $19, $00
   2++E122 6E E1                                DW Rock_HermitEdges
   3++E124 54                                   DB Rock_HermitEdgesSize
   4++E125 00 32                                DB $00, $32
   5++E127 36                                   DB Rock_HermitVertSize
   6++E128 15                                   DB Rock_HermitEdgesCnt
   7++E129 00 00                                DB $00, $00
   8++E12B 38                                   DB Rock_HermitNormalsSize
   9++E12C 32 B4 1E                             DB $32, $B4, $1E
  10++E12F C2 E1                                DW Rock_HermitNormals
  11++E131 01 02                                DB $01, $02
  12++E133 38 E1                                DW Rock_HermitVertices
  13++E135 00 00                                DB 0,0                      ; Type and Tactics
  14++E137 01                                   DB ShipCanAnger
  15++E138
  16++E138
  17++E138 00 50 00 1F  Rock_HermitVertices:	DB $00, $50, $00, $1F, $FF, $FF
  17++E13C FF FF
  18++E13E 50 0A 00 DF  	DB $50, $0A, $00, $DF, $FF, $FF
  18++E142 FF FF
  19++E144 00 50 00 5F  	DB $00, $50, $00, $5F, $FF, $FF
  19++E148 FF FF
  20++E14A 46 28 00 5F  	DB $46, $28, $00, $5F, $FF, $FF
  20++E14E FF FF
  21++E150 3C 32 00 1F  	DB $3C, $32, $00, $1F, $65, $DC
  21++E154 65 DC
  22++E156 32 00 3C 1F  	DB $32, $00, $3C, $1F, $FF, $FF
  22++E15A FF FF
  23++E15C 28 00 46 9F  	DB $28, $00, $46, $9F, $10, $32
  23++E160 10 32
  24++E162 00 1E 4B 3F  	DB $00, $1E, $4B, $3F, $FF, $FF
  24++E166 FF FF
  25++E168 00 32 3C 7F  	DB $00, $32, $3C, $7F, $98, $BA
  25++E16C 98 BA
  26++E16E
  27++E16E
  28++E16E              Rock_HermitVertSize: equ $ - Rock_HermitVertices
  29++E16E
  30++E16E
  31++E16E
  32++E16E 1F 72 00 04  Rock_HermitEdges:	DB $1F, $72, $00, $04
  33++E172 1F D6 00 10  	DB $1F, $D6, $00, $10
  34++E176 1F C5 0C 10  	DB $1F, $C5, $0C, $10
  35++E17A 1F B4 08 0C  	DB $1F, $B4, $08, $0C
  36++E17E 1F A3 04 08  	DB $1F, $A3, $04, $08
  37++E182 1F 32 04 18  	DB $1F, $32, $04, $18
  38++E186 1F 31 08 18  	DB $1F, $31, $08, $18
  39++E18A 1F 41 08 14  	DB $1F, $41, $08, $14
  40++E18E 1F 10 14 18  	DB $1F, $10, $14, $18
  41++E192 1F 60 00 14  	DB $1F, $60, $00, $14
  42++E196 1F 54 0C 14  	DB $1F, $54, $0C, $14
  43++E19A 1F 20 00 18  	DB $1F, $20, $00, $18
  44++E19E 1F 65 10 14  	DB $1F, $65, $10, $14
  45++E1A2 1F A8 04 20  	DB $1F, $A8, $04, $20
  46++E1A6 1F 87 04 1C  	DB $1F, $87, $04, $1C
  47++E1AA 1F D7 00 1C  	DB $1F, $D7, $00, $1C
  48++E1AE 1F DC 10 1C  	DB $1F, $DC, $10, $1C
  49++E1B2 1F C9 0C 1C  	DB $1F, $C9, $0C, $1C
  50++E1B6 1F B9 0C 20  	DB $1F, $B9, $0C, $20
  51++E1BA 1F BA 08 20  	DB $1F, $BA, $08, $20
  52++E1BE 1F 98 1C 20  	DB $1F, $98, $1C, $20
  53++E1C2
  54++E1C2              Rock_HermitEdgesSize: equ $ - Rock_HermitEdges
  55++E1C2
  56++E1C2
  57++E1C2              Rock_HermitEdgesCnt: equ Rock_HermitEdgesSize/4
  58++E1C2
  59++E1C2
  60++E1C2 1F 09 42 51  Rock_HermitNormals:	DB $1F, $09, $42, $51
  61++E1C6 5F 09 42 51  	DB $5F, $09, $42, $51
  62++E1CA 9F 48 40 1F  	DB $9F, $48, $40, $1F
  63++E1CE DF 40 49 2F  	DB $DF, $40, $49, $2F
  64++E1D2 5F 2D 4F 41  	DB $5F, $2D, $4F, $41
  65++E1D6 1F 87 0F 23  	DB $1F, $87, $0F, $23
  66++E1DA 1F 26 4C 46  	DB $1F, $26, $4C, $46
  67++E1DE BF 42 3B 27  	DB $BF, $42, $3B, $27
  68++E1E2 FF 43 0F 50  	DB $FF, $43, $0F, $50
  69++E1E6 7F 42 0E 4B  	DB $7F, $42, $0E, $4B
  70++E1EA FF 46 50 28  	DB $FF, $46, $50, $28
  71++E1EE 7F 3A 66 33  	DB $7F, $3A, $66, $33
  72++E1F2 3F 51 09 43  	DB $3F, $51, $09, $43
  73++E1F6 3F 2F 5E 3F  	DB $3F, $2F, $5E, $3F
  74++E1FA
  75++E1FA
  76++E1FA              Rock_HermitNormalsSize: equ $ - Rock_HermitNormals
  77++E1FA              Rock_HermitLen: equ $ - Rock_Hermit
  78++E1FA
# file closed: ./Data/ships/Rock_Hermit.asm
  67+ E1FA                                      include "Data/ships/ShuttleType9.asm"
# file opened: ./Data/ships/ShuttleType9.asm
   1++E1FA 0F 09 C4     ShuttleType9:	            DB $0F, $09, $C4
   2++E1FD 85 E2                                    DW ShuttleType9Edges
   3++E1FF 78                                       DB ShuttleType9EdgesSize
   4++E200 00 26                                    DB $00, $26
   5++E202 72                                       DB ShuttleType9VertSize
   6++E203 1E                                       DB ShuttleType9EdgesCnt
   7++E204 00 00                                    DB $00, $00
   8++E206 34                                       DB ShuttleType9NormalsSize
   9++E207 16 20 08                                 DB $16, $20, $08
  10++E20A FD E2                                    DW ShuttleType9Normals
  11++E20C 02 00                                    DB $02, $00
  12++E20E 13 E2                                    DW ShuttleType9Vertices
  13++E210 00 00        	                        DB 0,0                      ; Type and Tactics
  14++E212 00                                       DB 0
  15++E213
  16++E213
  17++E213 00 11 17 5F  ShuttleType9Vertices:	DB $00, $11, $17, $5F, $FF, $FF
  17++E217 FF FF
  18++E219 11 00 17 9F  	DB $11, $00, $17, $9F, $FF, $FF
  18++E21D FF FF
  19++E21F 00 12 17 1F  	DB $00, $12, $17, $1F, $FF, $FF
  19++E223 FF FF
  20++E225 12 00 17 1F  	DB $12, $00, $17, $1F, $FF, $FF
  20++E229 FF FF
  21++E22B 14 14 1B FF  	DB $14, $14, $1B, $FF, $12, $39
  21++E22F 12 39
  22++E231 14 14 1B BF  	DB $14, $14, $1B, $BF, $34, $59
  22++E235 34 59
  23++E237 14 14 1B 3F  	DB $14, $14, $1B, $3F, $56, $79
  23++E23B 56 79
  24++E23D 14 14 1B 7F  	DB $14, $14, $1B, $7F, $17, $89
  24++E241 17 89
  25++E243 05 00 1B 30  	DB $05, $00, $1B, $30, $99, $99
  25++E247 99 99
  26++E249 00 02 1B 70  	DB $00, $02, $1B, $70, $99, $99
  26++E24D 99 99
  27++E24F 05 00 1B A9  	DB $05, $00, $1B, $A9, $99, $99
  27++E253 99 99
  28++E255 00 03 1B 29  	DB $00, $03, $1B, $29, $99, $99
  28++E259 99 99
  29++E25B 00 09 23 50  	DB $00, $09, $23, $50, $0A, $BC
  29++E25F 0A BC
  30++E261 03 01 1F 47  	DB $03, $01, $1F, $47, $FF, $02
  30++E265 FF 02
  31++E267 04 0B 19 08  	DB $04, $0B, $19, $08, $01, $F4
  31++E26B 01 F4
  32++E26D 0B 04 19 08  	DB $0B, $04, $19, $08, $A1, $3F
  32++E271 A1 3F
  33++E273 03 01 1F C7  	DB $03, $01, $1F, $C7, $6B, $23
  33++E277 6B 23
  34++E279 03 0B 19 88  	DB $03, $0B, $19, $88, $F8, $C0
  34++E27D F8 C0
  35++E27F 0A 04 19 88  	DB $0A, $04, $19, $88, $4F, $18
  35++E283 4F 18
  36++E285
  37++E285              ShuttleType9VertSize: equ $ - ShuttleType9Vertices
  38++E285
  39++E285
  40++E285
  41++E285 1F 02 00 04  ShuttleType9Edges:	DB $1F, $02, $00, $04
  42++E289 1F 4A 04 08  	DB $1F, $4A, $04, $08
  43++E28D 1F 6B 08 0C  	DB $1F, $6B, $08, $0C
  44++E291 1F 8C 00 0C  	DB $1F, $8C, $00, $0C
  45++E295 1F 18 00 1C  	DB $1F, $18, $00, $1C
  46++E299 18 12 00 10  	DB $18, $12, $00, $10
  47++E29D 1F 23 04 10  	DB $1F, $23, $04, $10
  48++E2A1 18 34 04 14  	DB $18, $34, $04, $14
  49++E2A5 1F 45 08 14  	DB $1F, $45, $08, $14
  50++E2A9 0C 56 08 18  	DB $0C, $56, $08, $18
  51++E2AD 1F 67 0C 18  	DB $1F, $67, $0C, $18
  52++E2B1 18 78 0C 1C  	DB $18, $78, $0C, $1C
  53++E2B5 1F 39 10 14  	DB $1F, $39, $10, $14
  54++E2B9 1F 59 14 18  	DB $1F, $59, $14, $18
  55++E2BD 1F 79 18 1C  	DB $1F, $79, $18, $1C
  56++E2C1 1F 19 10 1C  	DB $1F, $19, $10, $1C
  57++E2C5 10 0C 00 30  	DB $10, $0C, $00, $30
  58++E2C9 10 0A 04 30  	DB $10, $0A, $04, $30
  59++E2CD 10 AB 08 30  	DB $10, $AB, $08, $30
  60++E2D1 10 BC 0C 30  	DB $10, $BC, $0C, $30
  61++E2D5 10 99 20 24  	DB $10, $99, $20, $24
  62++E2D9 07 99 24 28  	DB $07, $99, $24, $28
  63++E2DD 09 99 28 2C  	DB $09, $99, $28, $2C
  64++E2E1 07 99 20 2C  	DB $07, $99, $20, $2C
  65++E2E5 05 BB 34 38  	DB $05, $BB, $34, $38
  66++E2E9 08 BB 38 3C  	DB $08, $BB, $38, $3C
  67++E2ED 07 BB 34 3C  	DB $07, $BB, $34, $3C
  68++E2F1 05 AA 40 44  	DB $05, $AA, $40, $44
  69++E2F5 08 AA 44 48  	DB $08, $AA, $44, $48
  70++E2F9 07 AA 40 48  	DB $07, $AA, $40, $48
  71++E2FD              ShuttleType9EdgesSize: equ $ - ShuttleType9Edges
  72++E2FD              ShuttleType9EdgesCnt: equ ShuttleType9EdgesSize/4
  73++E2FD
  74++E2FD DF 37 37 28  ShuttleType9Normals:	DB $DF, $37, $37, $28
  75++E301 5F 00 4A 04  	DB $5F, $00, $4A, $04
  76++E305 DF 33 33 17  	DB $DF, $33, $33, $17
  77++E309 9F 4A 00 04  	DB $9F, $4A, $00, $04
  78++E30D 9F 33 33 17  	DB $9F, $33, $33, $17
  79++E311 1F 00 4A 04  	DB $1F, $00, $4A, $04
  80++E315 1F 33 33 17  	DB $1F, $33, $33, $17
  81++E319 1F 4A 00 04  	DB $1F, $4A, $00, $04
  82++E31D 5F 33 33 17  	DB $5F, $33, $33, $17
  83++E321 3F 00 00 6B  	DB $3F, $00, $00, $6B
  84++E325 9F 29 29 5A  	DB $9F, $29, $29, $5A
  85++E329 1F 29 29 5A  	DB $1F, $29, $29, $5A
  86++E32D 5F 37 37 28  	DB $5F, $37, $37, $28
  87++E331
  88++E331
  89++E331              ShuttleType9NormalsSize: equ $ - ShuttleType9Normals
  90++E331              ShuttleType9Len: equ $ - ShuttleType9
  91++E331
# file closed: ./Data/ships/ShuttleType9.asm
  68+ E331                                      include "Data/ships/Shuttle_Mk_2.asm"
# file opened: ./Data/ships/Shuttle_Mk_2.asm
   1++E331 0F 09 C4     Shuttle_Mk_2:	        DB $0F, $09, $C4
   2++E334 B0 E3                                DW Shuttle_Mk_2Edges
   3++E336 70                                   DB Shuttle_Mk_2EdgesSize
   4++E337 00 26                                DB $00, $26
   5++E339 66                                   DB Shuttle_Mk_2VertSize
   6++E33A 1C                                   DB Shuttle_Mk_2EdgesCnt
   7++E33B 00 00                                DB $00, $00
   8++E33D 34                                   DB Shuttle_Mk_2NormalsSize
   9++E33E 0A 20 09                             DB $0A, $20, $09
  10++E341 20 E4                                DW Shuttle_Mk_2Normals
  11++E343 02 00                                DB $02, $00
  12++E345 4A E3                                DW Shuttle_Mk_2Vertices
  13++E347 00 00                                DB 0,0                      ; Type and Tactics
  14++E349 00                                   DB 0
  15++E34A
  16++E34A
  17++E34A 00 00 28 1F  Shuttle_Mk_2Vertices:	DB $00, $00, $28, $1F, $23, $01
  17++E34E 23 01
  18++E350 00 14 1E 1F  	DB $00, $14, $1E, $1F, $34, $00
  18++E354 34 00
  19++E356 14 00 1E 9F  	DB $14, $00, $1E, $9F, $15, $00
  19++E35A 15 00
  20++E35C 00 14 1E 5F  	DB $00, $14, $1E, $5F, $26, $11
  20++E360 26 11
  21++E362 14 00 1E 1F  	DB $14, $00, $1E, $1F, $37, $22
  21++E366 37 22
  22++E368 14 14 14 9F  	DB $14, $14, $14, $9F, $58, $04
  22++E36C 58 04
  23++E36E 14 14 14 DF  	DB $14, $14, $14, $DF, $69, $15
  23++E372 69 15
  24++E374 14 14 14 5F  	DB $14, $14, $14, $5F, $7A, $26
  24++E378 7A 26
  25++E37A 14 14 14 1F  	DB $14, $14, $14, $1F, $7B, $34
  25++E37E 7B 34
  26++E380 00 14 28 3F  	DB $00, $14, $28, $3F, $BC, $48
  26++E384 BC 48
  27++E386 14 00 28 BF  	DB $14, $00, $28, $BF, $9C, $58
  27++E38A 9C 58
  28++E38C 00 14 28 7F  	DB $00, $14, $28, $7F, $AC, $69
  28++E390 AC 69
  29++E392 14 00 28 3F  	DB $14, $00, $28, $3F, $BC, $7A
  29++E396 BC 7A
  30++E398 04 04 28 AA  	DB $04, $04, $28, $AA, $CC, $CC
  30++E39C CC CC
  31++E39E 04 04 28 EA  	DB $04, $04, $28, $EA, $CC, $CC
  31++E3A2 CC CC
  32++E3A4 04 04 28 6A  	DB $04, $04, $28, $6A, $CC, $CC
  32++E3A8 CC CC
  33++E3AA 04 04 28 2A  	DB $04, $04, $28, $2A, $CC, $CC
  33++E3AE CC CC
  34++E3B0
  35++E3B0              Shuttle_Mk_2VertSize: equ $ - Shuttle_Mk_2Vertices
  36++E3B0
  37++E3B0
  38++E3B0
  39++E3B0 1F 01 00 08  Shuttle_Mk_2Edges:	DB $1F, $01, $00, $08
  40++E3B4 1F 12 00 0C  	DB $1F, $12, $00, $0C
  41++E3B8 1F 23 00 10  	DB $1F, $23, $00, $10
  42++E3BC 1F 30 00 04  	DB $1F, $30, $00, $04
  43++E3C0 1F 04 04 14  	DB $1F, $04, $04, $14
  44++E3C4 1F 05 08 14  	DB $1F, $05, $08, $14
  45++E3C8 1F 15 08 18  	DB $1F, $15, $08, $18
  46++E3CC 1F 16 0C 18  	DB $1F, $16, $0C, $18
  47++E3D0 1F 26 0C 1C  	DB $1F, $26, $0C, $1C
  48++E3D4 1F 27 10 1C  	DB $1F, $27, $10, $1C
  49++E3D8 1F 37 10 20  	DB $1F, $37, $10, $20
  50++E3DC 1F 34 04 20  	DB $1F, $34, $04, $20
  51++E3E0 1F 48 14 24  	DB $1F, $48, $14, $24
  52++E3E4 1F 58 14 28  	DB $1F, $58, $14, $28
  53++E3E8 1F 59 18 28  	DB $1F, $59, $18, $28
  54++E3EC 1F 69 18 2C  	DB $1F, $69, $18, $2C
  55++E3F0 1F 6A 1C 2C  	DB $1F, $6A, $1C, $2C
  56++E3F4 1F 7A 1C 30  	DB $1F, $7A, $1C, $30
  57++E3F8 1F 7B 20 30  	DB $1F, $7B, $20, $30
  58++E3FC 1F 4B 20 24  	DB $1F, $4B, $20, $24
  59++E400 1F 8C 24 28  	DB $1F, $8C, $24, $28
  60++E404 1F 9C 28 2C  	DB $1F, $9C, $28, $2C
  61++E408 1F AC 2C 30  	DB $1F, $AC, $2C, $30
  62++E40C 1F BC 30 24  	DB $1F, $BC, $30, $24
  63++E410 0A CC 34 38  	DB $0A, $CC, $34, $38
  64++E414 0A CC 38 3C  	DB $0A, $CC, $38, $3C
  65++E418 0A CC 3C 40  	DB $0A, $CC, $3C, $40
  66++E41C 0A CC 40 34  	DB $0A, $CC, $40, $34
  67++E420
  68++E420              Shuttle_Mk_2EdgesSize: equ $ - Shuttle_Mk_2Edges
  69++E420
  70++E420
  71++E420              Shuttle_Mk_2EdgesCnt: equ Shuttle_Mk_2EdgesSize/4
  72++E420
  73++E420
  74++E420 9F 27 27 4E  Shuttle_Mk_2Normals:	DB $9F, $27, $27, $4E
  75++E424 DF 27 27 4E  	DB $DF, $27, $27, $4E
  76++E428 5F 27 27 4E  	DB $5F, $27, $27, $4E
  77++E42C 1F 27 27 4E  	DB $1F, $27, $27, $4E
  78++E430 1F 00 60 00  	DB $1F, $00, $60, $00
  79++E434 9F 60 00 00  	DB $9F, $60, $00, $00
  80++E438 5F 00 60 00  	DB $5F, $00, $60, $00
  81++E43C 1F 60 00 00  	DB $1F, $60, $00, $00
  82++E440 BF 42 42 16  	DB $BF, $42, $42, $16
  83++E444 FF 42 42 16  	DB $FF, $42, $42, $16
  84++E448 7F 42 42 16  	DB $7F, $42, $42, $16
  85++E44C 3F 42 42 16  	DB $3F, $42, $42, $16
  86++E450 3F 00 00 60  	DB $3F, $00, $00, $60
  87++E454
  88++E454
  89++E454              Shuttle_Mk_2NormalsSize: equ $ - Shuttle_Mk_2Normals
  90++E454              Shuttle_Mk_2Len: equ $ - Shuttle_Mk_2
  91++E454
# file closed: ./Data/ships/Shuttle_Mk_2.asm
  69+ E454                                      include "Data/ships/Sidewinder.asm"
# file opened: ./Data/ships/Sidewinder.asm
   1++E454 00 10 81     Sidewinder:	            DB $00, $10, $81
   2++E457 A9 E4                                DW SidewinderEdges
   3++E459 3C                                   DB SidewinderEdgesSize
   4++E45A 00 1E                                DB $00, $1E
   5++E45C 3C                                   DB SidewinderVertSize
   6++E45D 0F                                   DB SidewinderEdgesCnt
   7++E45E 00 32                                DB $00, $32
   8++E460 1C                                   DB SidewinderNormalsSize
   9++E461 14 46 25                             DB $14, $46, $25
  10++E464 E5 E4                                DW SidewinderNormals
  11++E466 02 10                                DB $02, $10
  12++E468 6D E4                                DW SidewinderVertices
  13++E46A 00 00                                DB 0,0                      ; Type and Tactics
  14++E46C 01                                   DB ShipCanAnger
  15++E46D
  16++E46D 20 00 24 9F  SidewinderVertices:	DB $20, $00, $24, $9F, $10, $54
  16++E471 10 54
  17++E473 20 00 24 1F  	DB $20, $00, $24, $1F, $20, $65
  17++E477 20 65
  18++E479 40 00 1C 3F  	DB $40, $00, $1C, $3F, $32, $66
  18++E47D 32 66
  19++E47F 40 00 1C BF  	DB $40, $00, $1C, $BF, $31, $44
  19++E483 31 44
  20++E485 00 10 1C 3F  	DB $00, $10, $1C, $3F, $10, $32
  20++E489 10 32
  21++E48B 00 10 1C 7F  	DB $00, $10, $1C, $7F, $43, $65
  21++E48F 43 65
  22++E491 0C 06 1C AF  	DB $0C, $06, $1C, $AF, $33, $33
  22++E495 33 33
  23++E497 0C 06 1C 2F  	DB $0C, $06, $1C, $2F, $33, $33
  23++E49B 33 33
  24++E49D 0C 06 1C 6C  	DB $0C, $06, $1C, $6C, $33, $33
  24++E4A1 33 33
  25++E4A3 0C 06 1C EC  	DB $0C, $06, $1C, $EC, $33, $33
  25++E4A7 33 33
  26++E4A9
  27++E4A9
  28++E4A9              SidewinderVertSize: equ $ - SidewinderVertices
  29++E4A9
  30++E4A9
  31++E4A9
  32++E4A9 1F 50 00 04  SidewinderEdges:	DB $1F, $50, $00, $04
  33++E4AD 1F 62 04 08  	DB $1F, $62, $04, $08
  34++E4B1 1F 20 04 10  	DB $1F, $20, $04, $10
  35++E4B5 1F 10 00 10  	DB $1F, $10, $00, $10
  36++E4B9 1F 41 00 0C  	DB $1F, $41, $00, $0C
  37++E4BD 1F 31 0C 10  	DB $1F, $31, $0C, $10
  38++E4C1 1F 32 08 10  	DB $1F, $32, $08, $10
  39++E4C5 1F 43 0C 14  	DB $1F, $43, $0C, $14
  40++E4C9 1F 63 08 14  	DB $1F, $63, $08, $14
  41++E4CD 1F 65 04 14  	DB $1F, $65, $04, $14
  42++E4D1 1F 54 00 14  	DB $1F, $54, $00, $14
  43++E4D5 0F 33 18 1C  	DB $0F, $33, $18, $1C
  44++E4D9 0C 33 1C 20  	DB $0C, $33, $1C, $20
  45++E4DD 0C 33 18 24  	DB $0C, $33, $18, $24
  46++E4E1 0C 33 20 24  	DB $0C, $33, $20, $24
  47++E4E5
  48++E4E5              SidewinderEdgesSize: equ $ - SidewinderEdges
  49++E4E5
  50++E4E5
  51++E4E5              SidewinderEdgesCnt: equ SidewinderEdgesSize/4
  52++E4E5
  53++E4E5
  54++E4E5 1F 00 20 08  SidewinderNormals:	DB $1F, $00, $20, $08
  55++E4E9 9F 0C 2F 06  	DB $9F, $0C, $2F, $06
  56++E4ED 1F 0C 2F 06  	DB $1F, $0C, $2F, $06
  57++E4F1 3F 00 00 70  	DB $3F, $00, $00, $70
  58++E4F5 DF 0C 2F 06  	DB $DF, $0C, $2F, $06
  59++E4F9 5F 00 20 08  	DB $5F, $00, $20, $08
  60++E4FD 5F 0C 2F 06  	DB $5F, $0C, $2F, $06
  61++E501
  62++E501
  63++E501              SidewinderNormalsSize: equ $ - SidewinderNormals
  64++E501              SidewinderLen: equ $ - Sidewinder
  65++E501
# file closed: ./Data/ships/Sidewinder.asm
  70+ E501                                      include "Data/ships/Splinter.asm"
# file opened: ./Data/ships/Splinter.asm
   1++E501 B0 01 00     Splinter:	            DB $B0, $01, $00
   2++E504 32 E5                                DW SplinterEdges
   3++E506 18                                   DB SplinterEdgesSize
   4++E507 00 16                                DB $00, $16
   5++E509 18                                   DB SplinterVertSize
   6++E50A 06                                   DB SplinterEdgesCnt
   7++E50B 00 00                                DB $00, $00
   8++E50D 10                                   DB SplinterNormalsSize
   9++E50E 08 14 0A                             DB $08, $14, $0A
  10++E511 4A E5                                DW SplinterNormals
  11++E513 05 00                                DB $05, $00
  12++E515 1A E5                                DW SplinterVertices
  13++E517 00 00                                DB 0,0                      ; Type and Tactics
  14++E519 00                                   DB 0
  15++E51A
  16++E51A 18 19 10 DF  SplinterVertices:	    DB $18, $19, $10, $DF, $12, $33
  16++E51E 12 33
  17++E520 00 0C 0A 3F                          DB $00, $0C, $0A, $3F, $02, $33
  17++E524 02 33
  18++E526 0B 06 02 5F                          DB $0B, $06, $02, $5F, $01, $33
  18++E52A 01 33
  19++E52C 0C 2A 07 1F                          DB $0C, $2A, $07, $1F, $01, $22
  19++E530 01 22
  20++E532              SplinterVertSize:       equ $ - SplinterVertices
  21++E532 1F 23 00 04  SplinterEdges:	        DB $1F, $23, $00, $04
  22++E536 1F 03 04 08                          DB $1F, $03, $04, $08
  23++E53A 1F 01 08 0C                          DB $1F, $01, $08, $0C
  24++E53E 1F 12 0C 00                          DB $1F, $12, $0C, $00
  25++E542 1F 13 00 08                          DB $1F, $13, $00, $08
  26++E546 1F 02 0C 04                          DB $1F, $02, $0C, $04
  27++E54A              SplinterEdgesSize:      equ $ - SplinterEdges
  28++E54A              SplinterEdgesCnt:       equ SplinterEdgesSize/4
  29++E54A 1F 23 00 04  SplinterNormals:	    DB $1F, $23, $00, $04
  30++E54E 1F 03 04 08                          DB $1F, $03, $04, $08
  31++E552 1F 01 08 0C                          DB $1F, $01, $08, $0C
  32++E556 1F 12 0C 00                          DB $1F, $12, $0C, $00
  33++E55A              SplinterNormalsSize:    equ $ - SplinterNormals
  34++E55A              SplinterLen:            equ $ - Splinter
  35++E55A
# file closed: ./Data/ships/Splinter.asm
  71+ E55A                                      include "Data/ships/TestVector.asm"
# file opened: ./Data/ships/TestVector.asm
   1++E55A 03 41 23     TestVector:             DB $03, $41, $23
   2++E55D 9D E5                                DW TestVectorEdges
   3++E55F 10                                   DB TestVectorEdgesSize
   4++E560 54 2A                                DB $54,$2A
   5++E562 2A                                   DB TestVectorVertSize
   6++E563 04                                   DB TestVectorEdgesCnt
   7++E564 00 00                                DB $00,$00
   8++E566 10                                   DB TestVectorNormalsSize
   9++E567 32 96 1C                             DB $32,$96,$1C
  10++E56A AD E5                                DW TestVectorNormals
  11++E56C 04 01                                DB $04,$01
  12++E56E 73 E5                                DW TestVectorVertices
  13++E570 00 00                                DB 0,0                      ; Type and Tactics
  14++E572 00                                   DB 0
  15++E573
  16++E573 00 40 00 1F  TestVectorVertices	    DB $00,$40,$00,$1F,$00,$00
  16++E577 00 00
  17++E579 00 20 00 1F                          DB $00,$20,$00,$1F,$00,$00
  17++E57D 00 00
  18++E57F 40 00 00 1F                          DB $40,$00,$00,$1F,$01,$01
  18++E583 01 01
  19++E585 20 00 00 1F                          DB $20,$00,$00,$1F,$01,$01
  19++E589 01 01
  20++E58B 00 00 40 1F                          DB $00,$00,$40,$1F,$02,$02
  20++E58F 02 02
  21++E591 00 00 20 1F                          DB $00,$00,$20,$1F,$02,$02
  21++E595 02 02
  22++E597 00 00 00 1F                          DB $00,$00,$00,$1F,$03,$03
  22++E59B 03 03
  23++E59D              TestVectorVertSize      equ $  - TestVectorVertices
  24++E59D 1F 00 00 04  TestVectorEdges		    DB $1F,$00,$00,$04
  25++E5A1 1F 00 08 0C                          DB $1F,$00,$08,$0C
  26++E5A5 1F 00 10 14                          DB $1F,$00,$10,$14
  27++E5A9 1F 00 18 18                          DB $1F,$00,$18,$18
  28++E5AD              TestVectorEdgesSize     equ $  - TestVectorEdges
  29++E5AD              TestVectorEdgesCnt      equ TestVectorEdgesSize/4
  30++E5AD              ; start normals #0 = top f,$on,$ p,$at,$ o,$ C,$br,$ Mk III
  31++E5AD 1F 00 10 00  TestVectorNormals	    DB $1F,$00,$10,$00
  32++E5B1 1F 10 00 00                          DB $1F,$10,$00,$00
  33++E5B5 1F 00 00 10                          DB $1F,$00,$00,$10
  34++E5B9 1F 00 00 10                          DB $1F,$00,$00,$10
  35++E5BD              TestVectorNormalsSize   equ $  - TestVectorNormals
  36++E5BD              TestVectorLen           equ $  - TestVector
  37++E5BD
# file closed: ./Data/ships/TestVector.asm
  72+ E5BD                                      include "Data/ships/Thargoid.asm"
# file opened: ./Data/ships/Thargoid.asm
   1++E5BD 00 26 49     Thargoid:	            DB $00, $26, $49
   2++E5C0 4E E6                                DW ThargoidEdges
   3++E5C2 68                                   DB ThargoidEdgesSize
   4++E5C3 3C 26                                DB $3C, $26
   5++E5C5 78                                   DB ThargoidVertSize
   6++E5C6 1A                                   DB ThargoidEdgesCnt
   7++E5C7 01 F4                                DB $01, $F4
   8++E5C9 28                                   DB ThargoidNormalsSize
   9++E5CA 37 F0 27                             DB $37, $F0, $27
  10++E5CD B6 E6                                DW ThargoidNormals
  11++E5CF 02 16                                DB $02, $16
  12++E5D1 D6 E5                                DW ThargoidVertices
  13++E5D3 00 00                                DB 0,0                      ; Type and Tactics
  14++E5D5 01                                   DB ShipCanAnger
  15++E5D6
  16++E5D6 20 30 30 5F  ThargoidVertices:	    DB $20, $30, $30, $5F, $40, $88
  16++E5DA 40 88
  17++E5DC 20 44 00 5F                          DB $20, $44, $00, $5F, $10, $44
  17++E5E0 10 44
  18++E5E2 20 30 30 7F                          DB $20, $30, $30, $7F, $21, $44
  18++E5E6 21 44
  19++E5E8 20 00 44 3F                          DB $20, $00, $44, $3F, $32, $44
  19++E5EC 32 44
  20++E5EE 20 30 30 3F                          DB $20, $30, $30, $3F, $43, $55
  20++E5F2 43 55
  21++E5F4 20 44 00 1F                          DB $20, $44, $00, $1F, $54, $66
  21++E5F8 54 66
  22++E5FA 20 30 30 1F                          DB $20, $30, $30, $1F, $64, $77
  22++E5FE 64 77
  23++E600 20 00 44 1F                          DB $20, $00, $44, $1F, $74, $88
  23++E604 74 88
  24++E606 18 74 74 DF                          DB $18, $74, $74, $DF, $80, $99
  24++E60A 80 99
  25++E60C 18 A4 00 DF                          DB $18, $A4, $00, $DF, $10, $99
  25++E610 10 99
  26++E612 18 74 74 FF                          DB $18, $74, $74, $FF, $21, $99
  26++E616 21 99
  27++E618 18 00 A4 BF                          DB $18, $00, $A4, $BF, $32, $99
  27++E61C 32 99
  28++E61E 18 74 74 BF                          DB $18, $74, $74, $BF, $53, $99
  28++E622 53 99
  29++E624 18 A4 00 9F                          DB $18, $A4, $00, $9F, $65, $99
  29++E628 65 99
  30++E62A 18 74 74 9F                          DB $18, $74, $74, $9F, $76, $99
  30++E62E 76 99
  31++E630 18 00 A4 9F                          DB $18, $00, $A4, $9F, $87, $99
  31++E634 87 99
  32++E636 18 40 50 9E                          DB $18, $40, $50, $9E, $99, $99
  32++E63A 99 99
  33++E63C 18 40 50 BE                          DB $18, $40, $50, $BE, $99, $99
  33++E640 99 99
  34++E642 18 40 50 FE                          DB $18, $40, $50, $FE, $99, $99
  34++E646 99 99
  35++E648 18 40 50 DE                          DB $18, $40, $50, $DE, $99, $99
  35++E64C 99 99
  36++E64E
  37++E64E              ThargoidVertSize: equ $ - ThargoidVertices
  38++E64E
  39++E64E
  40++E64E
  41++E64E 1F 84 00 1C  ThargoidEdges:	DB $1F, $84, $00, $1C           ;01
  42++E652 1F 40 00 04                  DB $1F, $40, $00, $04           ;02
  43++E656 1F 41 04 08                  DB $1F, $41, $04, $08           ;03
  44++E65A 1F 42 08 0C                  DB $1F, $42, $08, $0C           ;04
  45++E65E 1F 43 0C 10                  DB $1F, $43, $0C, $10           ;05
  46++E662 1F 54 10 14                  DB $1F, $54, $10, $14           ;06
  47++E666 1F 64 14 18                  DB $1F, $64, $14, $18           ;07
  48++E66A 1F 74 18 1C                  DB $1F, $74, $18, $1C           ;08
  49++E66E 1F 80 00 20                  DB $1F, $80, $00, $20           ;09
  50++E672 1F 10 04 24                  DB $1F, $10, $04, $24           ;10
  51++E676 1F 21 08 28                  DB $1F, $21, $08, $28           ;11
  52++E67A 1F 32 0C 2C                  DB $1F, $32, $0C, $2C           ;12
  53++E67E 1F 53 10 30                  DB $1F, $53, $10, $30           ;13
  54++E682 1F 65 14 34                  DB $1F, $65, $14, $34           ;14
  55++E686 1F 76 18 38                  DB $1F, $76, $18, $38           ;15
  56++E68A 1F 87 1C 3C                  DB $1F, $87, $1C, $3C           ;16
  57++E68E 1F 98 20 3C                  DB $1F, $98, $20, $3C           ;17
  58++E692 1F 90 20 24                  DB $1F, $90, $20, $24           ;18
  59++E696 1F 91 24 28                  DB $1F, $91, $24, $28
  60++E69A 1F 92 28 2C                  DB $1F, $92, $28, $2C
  61++E69E 1F 93 2C 30                  DB $1F, $93, $2C, $30
  62++E6A2 1F 95 30 34                  DB $1F, $95, $30, $34
  63++E6A6 1F 96 34 38                  DB $1F, $96, $34, $38
  64++E6AA 1F 97 38 3C                  DB $1F, $97, $38, $3C
  65++E6AE 1E 99 40 44                  DB $1E, $99, $40, $44
  66++E6B2 1E 99 48 4C                  DB $1E, $99, $48, $4C
  67++E6B6
  68++E6B6              ThargoidEdgesSize: equ $ - ThargoidEdges
  69++E6B6
  70++E6B6              ThargoidEdgesCnt: equ ThargoidEdgesSize/4
  71++E6B6
  72++E6B6 5F 67 3C 19  ThargoidNormals:	DB $5F, $67, $3C, $19
  73++E6BA 7F 67 3C 19  	DB $7F, $67, $3C, $19
  74++E6BE 7F 67 19 3C  	DB $7F, $67, $19, $3C
  75++E6C2 3F 67 19 3C  	DB $3F, $67, $19, $3C
  76++E6C6 1F 40 00 00  	DB $1F, $40, $00, $00
  77++E6CA 3F 67 3C 19  	DB $3F, $67, $3C, $19
  78++E6CE 1F 67 3C 19  	DB $1F, $67, $3C, $19
  79++E6D2 1F 67 19 3C  	DB $1F, $67, $19, $3C
  80++E6D6 5F 67 19 3C  	DB $5F, $67, $19, $3C
  81++E6DA 9F 30 00 00  	DB $9F, $30, $00, $00
  82++E6DE
  83++E6DE
  84++E6DE              ThargoidNormalsSize: equ $ - ThargoidNormals
  85++E6DE              ThargoidLen: equ $ - Thargoid
  86++E6DE
# file closed: ./Data/ships/Thargoid.asm
  73+ E6DE                                      include "Data/ships/Thargon.asm"
# file opened: ./Data/ships/Thargon.asm
   1++E6DE F0 06 40     Thargon:	            DB $F0, $06, $40
   2++E6E1 33 E7                                DW ThargonEdges
   3++E6E3 3C                                   DB ThargonEdgesSize
   4++E6E4 00 12                                DB $00, $12
   5++E6E6 3C                                   DB ThargonVertSize
   6++E6E7 0F                                   DB ThargonEdgesCnt
   7++E6E8 00 32                                DB $00, $32
   8++E6EA 1C                                   DB ThargonNormalsSize
   9++E6EB 14 14 1E                             DB $14, $14, $1E
  10++E6EE 6F E7                                DW ThargonNormals
  11++E6F0 02 10                                DB $02, $10
  12++E6F2 F7 E6                                DW ThargonVertices
  13++E6F4 00 00                                DB 0,0                      ; Type and Tactics
  14++E6F6 01                                   DB ShipCanAnger
  15++E6F7
  16++E6F7
  17++E6F7 09 00 28 9F  ThargonVertices:	    DB $09, $00, $28, $9F, $01, $55
  17++E6FB 01 55
  18++E6FD 09 26 0C DF                          DB $09, $26, $0C, $DF, $01, $22
  18++E701 01 22
  19++E703 09 18 20 FF                          DB $09, $18, $20, $FF, $02, $33
  19++E707 02 33
  20++E709 09 18 20 BF                          DB $09, $18, $20, $BF, $03, $44
  20++E70D 03 44
  21++E70F 09 26 0C 9F                          DB $09, $26, $0C, $9F, $04, $55
  21++E713 04 55
  22++E715 09 00 08 3F                          DB $09, $00, $08, $3F, $15, $66
  22++E719 15 66
  23++E71B 09 0A 0F 7F                          DB $09, $0A, $0F, $7F, $12, $66
  23++E71F 12 66
  24++E721 09 06 1A 7F                          DB $09, $06, $1A, $7F, $23, $66
  24++E725 23 66
  25++E727 09 06 1A 3F                          DB $09, $06, $1A, $3F, $34, $66
  25++E72B 34 66
  26++E72D 09 0A 0F 3F                          DB $09, $0A, $0F, $3F, $45, $66
  26++E731 45 66
  27++E733
  28++E733              ThargonVertSize:        equ $ - ThargonVertices
  29++E733
  30++E733
  31++E733 1F 10 00 04  ThargonEdges:	        DB $1F, $10, $00, $04
  32++E737 1F 20 04 08                          DB $1F, $20, $04, $08
  33++E73B 1F 30 08 0C                          DB $1F, $30, $08, $0C
  34++E73F 1F 40 0C 10                          DB $1F, $40, $0C, $10
  35++E743 1F 50 00 10                          DB $1F, $50, $00, $10
  36++E747 1F 51 00 14                          DB $1F, $51, $00, $14
  37++E74B 1F 21 04 18                          DB $1F, $21, $04, $18
  38++E74F 1F 32 08 1C                          DB $1F, $32, $08, $1C
  39++E753 1F 43 0C 20                          DB $1F, $43, $0C, $20
  40++E757 1F 54 10 24                          DB $1F, $54, $10, $24
  41++E75B 1F 61 14 18                          DB $1F, $61, $14, $18
  42++E75F 1F 62 18 1C                          DB $1F, $62, $18, $1C
  43++E763 1F 63 1C 20                          DB $1F, $63, $1C, $20
  44++E767 1F 64 20 24                          DB $1F, $64, $20, $24
  45++E76B 1F 65 24 14                          DB $1F, $65, $24, $14
  46++E76F
  47++E76F              ThargonEdgesSize:       equ $ - ThargonEdges
  48++E76F
  49++E76F
  50++E76F              ThargonEdgesCnt:        equ ThargonEdgesSize/4
  51++E76F
  52++E76F
  53++E76F 9F 24 00 00  ThargonNormals:	        DB $9F, $24, $00, $00
  54++E773 5F 14 05 07                          DB $5F, $14, $05, $07
  55++E777 7F 2E 2A 0E                          DB $7F, $2E, $2A, $0E
  56++E77B 3F 24 00 68                          DB $3F, $24, $00, $68
  57++E77F 3F 2E 2A 0E                          DB $3F, $2E, $2A, $0E
  58++E783 1F 14 05 07                          DB $1F, $14, $05, $07
  59++E787 1F 24 00 00                          DB $1F, $24, $00, $00
  60++E78B
  61++E78B
  62++E78B              ThargonNormalsSize:     equ $ - ThargonNormals
  63++E78B              ThargonLen:             equ $ - Thargon
  64++E78B
# file closed: ./Data/ships/Thargon.asm
  74+ E78B                                      include "Data/ships/TransportType10.asm"
# file opened: ./Data/ships/TransportType10.asm
   1++E78B 00 09 C4     TransportType10:	    DB $00, $09, $C4
   2++E78E 82 E8                                DW TransportType10Edges
   3++E790 B8                                   DB TransportType10EdgesSize
   4++E791 30 1A                                DB $30, $1A
   5++E793 DE                                   DB TransportType10VertSize
   6++E794 2E                                   DB TransportType10EdgesCnt
   7++E795 00 00                                DB $00, $00
   8++E797 38                                   DB TransportType10NormalsSize
   9++E798 10 20 0A                             DB $10, $20, $0A
  10++E79B 3A E9                                DW TransportType10Normals
  11++E79D 02 00                                DB $02, $00
  12++E79F A4 E7                                DW TransportType10Vertices
  13++E7A1 00 00                                DB 0,0                      ; Type and Tactics
  14++E7A3 00                                   DB 0
  15++E7A4
  16++E7A4 00 0A 1A 3F  TransportType10Vertices:DB $00, $0A, $1A, $3F, $06, $77     ;01
  16++E7A8 06 77
  17++E7AA 19 04 1A BF                          DB $19, $04, $1A, $BF, $01, $77     ;02
  17++E7AE 01 77
  18++E7B0 1C 03 1A FF                          DB $1C, $03, $1A, $FF, $01, $22     ;03
  18++E7B4 01 22
  19++E7B6 19 08 1A FF                          DB $19, $08, $1A, $FF, $02, $33     ;04
  19++E7BA 02 33
  20++E7BC 1A 08 1A 7F                          DB $1A, $08, $1A, $7F, $03, $44     ;05
  20++E7C0 03 44
  21++E7C2 1D 03 1A 7F                          DB $1D, $03, $1A, $7F, $04, $55     ;06
  21++E7C6 04 55
  22++E7C8 1A 04 1A 3F                          DB $1A, $04, $1A, $3F, $05, $66     ;07
  22++E7CC 05 66
  23++E7CE 00 06 0C 13                          DB $00, $06, $0C, $13, $FF, $FF     ;08
  23++E7D2 FF FF
  24++E7D4 1E 01 0C DF                          DB $1E, $01, $0C, $DF, $17, $89     ;09
  24++E7D8 17 89
  25++E7DA 21 08 0C DF                          DB $21, $08, $0C, $DF, $12, $39     ;10
  25++E7DE 12 39
  26++E7E0 21 08 0C 5F                          DB $21, $08, $0C, $5F, $34, $5A     ;11
  26++E7E4 34 5A
  27++E7E6 1E 01 0C 5F                          DB $1E, $01, $0C, $5F, $56, $AB     ;12
  27++E7EA 56 AB
  28++E7EC 0B 02 1E DF                          DB $0B, $02, $1E, $DF, $89, $CD     ;13
  28++E7F0 89 CD
  29++E7F2 0D 08 1E DF                          DB $0D, $08, $1E, $DF, $39, $DD     ;14
  29++E7F6 39 DD
  30++E7F8 0E 08 1E 5F                          DB $0E, $08, $1E, $5F, $3A, $DD     ;15
  30++E7FC 3A DD
  31++E7FE 0B 02 1E 5F                          DB $0B, $02, $1E, $5F, $AB, $CD     ;16
  31++E802 AB CD
  32++E804 05 06 02 87                          DB $05, $06, $02, $87, $77, $77     ;17
  32++E808 77 77
  33++E80A 12 03 02 87                          DB $12, $03, $02, $87, $77, $77     ;18
  33++E80E 77 77
  34++E810 05 07 07 A7                          DB $05, $07, $07, $A7, $77, $77     ;19
  34++E814 77 77
  35++E816 12 04 07 A7                          DB $12, $04, $07, $A7, $77, $77     ;20
  35++E81A 77 77
  36++E81C 0B 06 0E A7                          DB $0B, $06, $0E, $A7, $77, $77     ;21
  36++E820 77 77
  37++E822 0B 05 07 A7                          DB $0B, $05, $07, $A7, $77, $77     ;22
  37++E826 77 77
  38++E828 05 07 0E 27                          DB $05, $07, $0E, $27, $66, $66     ;23
  38++E82C 66 66
  39++E82E 12 04 0E 27                          DB $12, $04, $0E, $27, $66, $66     ;24
  39++E832 66 66
  40++E834 0B 05 07 27                          DB $0B, $05, $07, $27, $66, $66     ;25
  40++E838 66 66
  41++E83A 05 06 03 27                          DB $05, $06, $03, $27, $66, $66     ;26
  41++E83E 66 66
  42++E840 12 03 03 27                          DB $12, $03, $03, $27, $66, $66     ;27
  42++E844 66 66
  43++E846 0B 04 08 07                          DB $0B, $04, $08, $07, $66, $66     ;28
  43++E84A 66 66
  44++E84C 0B 05 03 27                          DB $0B, $05, $03, $27, $66, $66     ;29
  44++E850 66 66
  45++E852 10 08 0D E6                          DB $10, $08, $0D, $E6, $33, $33     ;30
  45++E856 33 33
  46++E858 10 08 10 C6                          DB $10, $08, $10, $C6, $33, $33     ;31
  46++E85C 33 33
  47++E85E 11 08 0D 66                          DB $11, $08, $0D, $66, $33, $33     ;32
  47++E862 33 33
  48++E864 11 08 10 46                          DB $11, $08, $10, $46, $33, $33     ;33
  48++E868 33 33
  49++E86A 0D 03 1A E8                          DB $0D, $03, $1A, $E8, $00, $00     ;34
  49++E86E 00 00
  50++E870 0D 03 1A 68                          DB $0D, $03, $1A, $68, $00, $00     ;35
  50++E874 00 00
  51++E876 09 03 1A 25                          DB $09, $03, $1A, $25, $00, $00     ;36
  51++E87A 00 00
  52++E87C 08 03 1A A5                          DB $08, $03, $1A, $A5, $00, $00     ;37
  52++E880 00 00
  53++E882
  54++E882              TransportType10VertSize: equ $ - TransportType10Vertices
  55++E882
  56++E882
  57++E882
  58++E882 1F 07 00 04  TransportType10Edges:	DB $1F, $07, $00, $04               ;01
  59++E886 1F 01 04 08                          DB $1F, $01, $04, $08               ;02
  60++E88A 1F 02 08 0C                          DB $1F, $02, $08, $0C               ;03
  61++E88E 1F 03 0C 10                          DB $1F, $03, $0C, $10               ;04
  62++E892 1F 04 10 14                          DB $1F, $04, $10, $14               ;05
  63++E896 1F 05 14 18                          DB $1F, $05, $14, $18               ;06
  64++E89A 1F 06 00 18                          DB $1F, $06, $00, $18               ;07
  65++E89E 10 67 00 1C                          DB $10, $67, $00, $1C               ;08
  66++E8A2 1F 17 04 20                          DB $1F, $17, $04, $20               ;09
  67++E8A6 0B 12 08 24                          DB $0B, $12, $08, $24               ;10
  68++E8AA 1F 23 0C 24                          DB $1F, $23, $0C, $24               ;11
  69++E8AE 1F 34 10 28                          DB $1F, $34, $10, $28               ;12
  70++E8B2 0B 45 14 28                          DB $0B, $45, $14, $28               ;13
  71++E8B6 1F 56 18 2C                          DB $1F, $56, $18, $2C               ;14
  72++E8BA 11 78 1C 20                          DB $11, $78, $1C, $20               ;15
  73++E8BE 11 19 20 24                          DB $11, $19, $20, $24               ;16
  74++E8C2 11 5A 28 2C                          DB $11, $5A, $28, $2C               ;17
  75++E8C6 11 6B 1C 2C                          DB $11, $6B, $1C, $2C               ;18
  76++E8CA 13 BC 1C 3C                          DB $13, $BC, $1C, $3C               ;19
  77++E8CE 13 8C 1C 30                          DB $13, $8C, $1C, $30               ;20
  78++E8D2 10 89 20 30                          DB $10, $89, $20, $30               ;21
  79++E8D6 1F 39 24 34                          DB $1F, $39, $24, $34               ;22
  80++E8DA 1F 3A 28 38                          DB $1F, $3A, $28, $38               ;23
  81++E8DE 10 AB 2C 3C                          DB $10, $AB, $2C, $3C               ;24
  82++E8E2 1F 9D 30 34                          DB $1F, $9D, $30, $34               ;25
  83++E8E6 1F 3D 34 38                          DB $1F, $3D, $34, $38               ;26
  84++E8EA 1F AD 38 3C                          DB $1F, $AD, $38, $3C               ;27
  85++E8EE 1F CD 30 3C                          DB $1F, $CD, $30, $3C               ;28
  86++E8F2 07 77 40 44                          DB $07, $77, $40, $44               ;29
  87++E8F6 07 77 48 4C                          DB $07, $77, $48, $4C               ;30
  88++E8FA 07 77 4C 50                          DB $07, $77, $4C, $50               ;31
  89++E8FE 07 77 48 50                          DB $07, $77, $48, $50               ;32
  90++E902 07 77 50 54                          DB $07, $77, $50, $54               ;33
  91++E906 07 66 58 5C                          DB $07, $66, $58, $5C               ;34
  92++E90A 07 66 5C 60                          DB $07, $66, $5C, $60               ;35
  93++E90E 07 66 60 58                          DB $07, $66, $60, $58               ;36
  94++E912 07 66 64 68                          DB $07, $66, $64, $68               ;37
  95++E916 07 66 68 6C                          DB $07, $66, $68, $6C               ;38
  96++E91A 07 66 64 6C                          DB $07, $66, $64, $6C               ;39
  97++E91E 07 66 6C 70                          DB $07, $66, $6C, $70               ;40
  98++E922 06 33 74 78                          DB $06, $33, $74, $78               ;41
  99++E926 06 33 7C 80                          DB $06, $33, $7C, $80               ;42
 100++E92A 08 00 84 88                          DB $08, $00, $84, $88               ;43
 101++E92E 05 00 88 8C                          DB $05, $00, $88, $8C               ;44
 102++E932 05 00 8C 90                          DB $05, $00, $8C, $90               ;45
 103++E936 05 00 90 84                          DB $05, $00, $90, $84               ;46
 104++E93A
 105++E93A              TransportType10EdgesSize: equ $ - TransportType10Edges
 106++E93A
 107++E93A
 108++E93A              TransportType10EdgesCnt: equ TransportType10EdgesSize/4
 109++E93A
 110++E93A
 111++E93A 3F 00 00 67  TransportType10Normals:	DB $3F, $00, $00, $67               ;01
 112++E93E BF 6F 30 07                          DB $BF, $6F, $30, $07               ;02
 113++E942 FF 69 3F 15                          DB $FF, $69, $3F, $15               ;03
 114++E946 5F 00 22 00                          DB $5F, $00, $22, $00               ;04
 115++E94A 7F 69 3F 15                          DB $7F, $69, $3F, $15               ;05
 116++E94E 3F 6F 30 07                          DB $3F, $6F, $30, $07               ;06
 117++E952 1F 08 20 03                          DB $1F, $08, $20, $03               ;07
 118++E956 9F 08 20 03                          DB $9F, $08, $20, $03               ;08
 119++E95A 93 08 22 0B                          DB $93, $08, $22, $0B               ;09
 120++E95E 9F 4B 20 4F                          DB $9F, $4B, $20, $4F               ;10
 121++E962 1F 4B 20 4F                          DB $1F, $4B, $20, $4F               ;11
 122++E966 13 08 22 0B                          DB $13, $08, $22, $0B               ;12
 123++E96A 1F 00 26 11                          DB $1F, $00, $26, $11               ;13
 124++E96E 1F 00 00 79                          DB $1F, $00, $00, $79               ;14
 125++E972
 126++E972
 127++E972              TransportType10NormalsSize: equ $ - TransportType10Normals
 128++E972              TransportType10Len: equ $ - TransportType10
 129++E972
# file closed: ./Data/ships/TransportType10.asm
  75+ E972                                      include "Data/ships/Viper.asm"
# file opened: ./Data/ships/Viper.asm
   1++E972              ; Mapping Orginal to new
   2++E972              ; 0    => 0
   3++E972              ; 1-2  => 1-2
   4++E972              ; 3    => EQU Edges
   5++E972              ; 4    => EQU Normals
   6++E972              ; 5    => EQU EdgesCnt
   7++E972              ; 6    => 6
   8++E972              ; 7    => 7
   9++E972              ; 8    => EQU VertSize
  10++E972              ; 9    => EQU EdgesCnt
  11++E972              ; 10-11=> 10-11
  12++E972              ; 12   => EQU  NormalsSize
  13++E972              ; 13   => 13
  14++E972              ; 14   => 14
  15++E972              ; 15   => 15
  16++E972              ; 16   => EQU Edges
  17++E972              ; 17   => EQU Normals
  18++E972              ; 18   => 18
  19++E972              ; 19   => 19
  20++E972              ;\ -> &5C93  \ Viper = Type 16
  21++E972 00 F9 15     Viper:                  DB $00, $F9, $15
  22++E975 E5 E9                                DW ViperEdges
  23++E977 50                                   DB ViperEdgesSize
  24++E978 00 2A                                DB $00,$2A
  25++E97A 5A                                   DB ViperVertSize
  26++E97B 14                                   DB ViperEdgesCnt
  27++E97C 00 00                                DB $00,$00
  28++E97E 1C                                   DB ViperNormalsSize
  29++E97F 17 64 20                             DB $17, $64, $20
  30++E982 35 EA                                DW ViperNormals
  31++E984 01 11                                DB $01, $11
  32++E986 8B E9                                DW ViperVertices
  33++E988 00 00                                DB 0,0                      ; Type and Tactics
  34++E98A 01                                   DB ShipCanAnger
  35++E98B
  36++E98B 00 00 48 1F  ViperVertices:          DB $00, $00, $48, $1F, $21, $43
  36++E98F 21 43
  37++E991 00 10 18 1E                          DB $00, $10, $18, $1E, $10, $22
  37++E995 10 22
  38++E997 00 10 18 5E                          DB $00, $10, $18, $5E, $43, $55
  38++E99B 43 55
  39++E99D 30 00 18 3F                          DB $30, $00, $18, $3F, $42, $66
  39++E9A1 42 66
  40++E9A3 30 00 18 BF                          DB $30, $00, $18, $BF, $31, $66
  40++E9A7 31 66
  41++E9A9 18 10 18 7E                          DB $18, $10, $18, $7E, $54, $66
  41++E9AD 54 66
  42++E9AF 18 10 18 FE                          DB $18, $10, $18, $FE, $35, $66
  42++E9B3 35 66
  43++E9B5 18 10 18 3F                          DB $18, $10, $18, $3F, $20, $66
  43++E9B9 20 66
  44++E9BB 18 10 18 BF                          DB $18, $10, $18, $BF, $10, $66
  44++E9BF 10 66
  45++E9C1 20 00 18 B3                          DB $20, $00, $18, $B3, $66, $66
  45++E9C5 66 66
  46++E9C7 20 00 18 33                          DB $20, $00, $18, $33, $66, $66
  46++E9CB 66 66
  47++E9CD 08 08 18 33                          DB $08, $08, $18, $33, $66, $66
  47++E9D1 66 66
  48++E9D3 08 08 18 B3                          DB $08, $08, $18, $B3, $66, $66
  48++E9D7 66 66
  49++E9D9 08 08 18 F2                          DB $08, $08, $18, $F2, $66, $66
  49++E9DD 66 66
  50++E9DF 08 08 18 72                          DB $08, $08, $18, $72, $66, $66
  50++E9E3 66 66
  51++E9E5              ViperVertSize           equ $  - ViperVertices
  52++E9E5 1F 42 00 0C  ViperEdges:             DB $1F, $42, $00, $0C, $1E, $21, $00, $04
  52++E9E9 1E 21 00 04
  53++E9ED 1E 43 00 08                          DB $1E, $43, $00, $08, $1F, $31, $00, $10
  53++E9F1 1F 31 00 10
  54++E9F5 1E 20 04 1C                          DB $1E, $20, $04, $1C, $1E, $10, $04, $20
  54++E9F9 1E 10 04 20
  55++E9FD 1E 54 08 14                          DB $1E, $54, $08, $14, $1E, $53, $08, $18
  55++EA01 1E 53 08 18
  56++EA05 1F 60 1C 20                          DB $1F, $60, $1C, $20, $1E, $65, $14, $18
  56++EA09 1E 65 14 18
  57++EA0D 1F 61 10 20                          DB $1F, $61, $10, $20, $1E, $63, $10, $18
  57++EA11 1E 63 10 18
  58++EA15 1F 62 0C 1C                          DB $1F, $62, $0C, $1C, $1E, $46, $0C, $14
  58++EA19 1E 46 0C 14
  59++EA1D 13 66 24 30                          DB $13, $66, $24, $30, $12, $66, $24, $34
  59++EA21 12 66 24 34
  60++EA25 13 66 28 2C                          DB $13, $66, $28, $2C, $12, $66, $28, $38
  60++EA29 12 66 28 38
  61++EA2D 10 66 2C 38                          DB $10, $66, $2C, $38, $10, $66, $30, $34
  61++EA31 10 66 30 34
  62++EA35              ViperEdgesSize          equ $  - ViperEdges
  63++EA35              ViperEdgesCnt           equ ViperEdgesSize/4
  64++EA35 1F 00 20 00  ViperNormals            DB $1F, $00, $20, $00, $9F, $16, $21, $0B
  64++EA39 9F 16 21 0B
  65++EA3D 1F 16 21 0B                          DB $1F, $16, $21, $0B, $DF, $16, $21, $0B
  65++EA41 DF 16 21 0B
  66++EA45 5F 16 21 0B                          DB $5F, $16, $21, $0B, $5F, $00, $20, $00
  66++EA49 5F 00 20 00
  67++EA4D 3F 00 00 30                          DB $3F, $00, $00, $30
  68++EA51              ViperNormalsSize        equ $  - ViperNormals
  69++EA51              ViperLen                equ $  - Viper
  70++EA51
# file closed: ./Data/ships/Viper.asm
  76+ EA51                                      include "Data/ships/Worm.asm"
# file opened: ./Data/ships/Worm.asm
   1++EA51 00 26 49     Worm:	                DB $00, $26, $49
   2++EA54 A6 EA                                DW WormEdges
   3++EA56 40                                   DB WormEdgesSize
   4++EA57 00 12                                DB $00, $12
   5++EA59 3C                                   DB WormVertSize
   6++EA5A 10                                   DB WormEdgesCnt
   7++EA5B 00 00                                DB $00, $00
   8++EA5D 20                                   DB WormNormalsSize
   9++EA5E 13 1E 17                             DB $13, $1E, $17
  10++EA61 E6 EA                                DW WormNormals
  11++EA63 03 08                                DB $03, $08
  12++EA65 6A EA                                DW WormVertices
  13++EA67 00 00                                DB 0,0                      ; Type and Tactics
  14++EA69 01                                   DB ShipCanAnger
  15++EA6A 0A 0A 23 5F  WormVertices:	        DB $0A, $0A, $23, $5F, $02, $77
  15++EA6E 02 77
  16++EA70 0A 0A 23 DF                          DB $0A, $0A, $23, $DF, $03, $77
  16++EA74 03 77
  17++EA76 05 06 0F 1F                          DB $05, $06, $0F, $1F, $01, $24
  17++EA7A 01 24
  18++EA7C 05 06 0F 9F                          DB $05, $06, $0F, $9F, $01, $35
  18++EA80 01 35
  19++EA82 0F 0A 19 5F                          DB $0F, $0A, $19, $5F, $24, $77
  19++EA86 24 77
  20++EA88 0F 0A 19 DF                          DB $0F, $0A, $19, $DF, $35, $77
  20++EA8C 35 77
  21++EA8E 1A 0A 19 7F                          DB $1A, $0A, $19, $7F, $46, $77
  21++EA92 46 77
  22++EA94 1A 0A 19 FF                          DB $1A, $0A, $19, $FF, $56, $77
  22++EA98 56 77
  23++EA9A 08 0E 19 3F                          DB $08, $0E, $19, $3F, $14, $66
  23++EA9E 14 66
  24++EAA0 08 0E 19 BF                          DB $08, $0E, $19, $BF, $15, $66
  24++EAA4 15 66
  25++EAA6
  26++EAA6              WormVertSize: equ $ - WormVertices
  27++EAA6
  28++EAA6
  29++EAA6 1F 07 00 04  WormEdges:	            DB $1F, $07, $00, $04
  30++EAAA 1F 37 04 14                          DB $1F, $37, $04, $14
  31++EAAE 1F 57 14 1C                          DB $1F, $57, $14, $1C
  32++EAB2 1F 67 1C 18                          DB $1F, $67, $1C, $18
  33++EAB6 1F 47 18 10                          DB $1F, $47, $18, $10
  34++EABA 1F 27 10 00                          DB $1F, $27, $10, $00
  35++EABE 1F 02 00 08                          DB $1F, $02, $00, $08
  36++EAC2 1F 03 04 0C                          DB $1F, $03, $04, $0C
  37++EAC6 1F 24 10 08                          DB $1F, $24, $10, $08
  38++EACA 1F 35 14 0C                          DB $1F, $35, $14, $0C
  39++EACE 1F 14 08 20                          DB $1F, $14, $08, $20
  40++EAD2 1F 46 20 18                          DB $1F, $46, $20, $18
  41++EAD6 1F 15 0C 24                          DB $1F, $15, $0C, $24
  42++EADA 1F 56 24 1C                          DB $1F, $56, $24, $1C
  43++EADE 1F 01 08 0C                          DB $1F, $01, $08, $0C
  44++EAE2 1F 16 20 24                          DB $1F, $16, $20, $24
  45++EAE6
  46++EAE6              WormEdgesSize: equ $ - WormEdges
  47++EAE6
  48++EAE6
  49++EAE6              WormEdgesCnt: equ WormEdgesSize/4
  50++EAE6
  51++EAE6
  52++EAE6 1F 00 58 46  WormNormals:	        DB $1F, $00, $58, $46
  53++EAEA 1F 00 45 0E                          DB $1F, $00, $45, $0E
  54++EAEE 1F 46 42 23                          DB $1F, $46, $42, $23
  55++EAF2 9F 46 42 23                          DB $9F, $46, $42, $23
  56++EAF6 1F 40 31 0E                          DB $1F, $40, $31, $0E
  57++EAFA 9F 40 31 0E                          DB $9F, $40, $31, $0E
  58++EAFE 3F 00 00 C8                          DB $3F, $00, $00, $C8
  59++EB02 5F 00 50 00                          DB $5F, $00, $50, $00
  60++EB06
  61++EB06
  62++EB06              WormNormalsSize: equ $ - WormNormals
  63++EB06              WormLen: equ $ - Worm
  64++EB06
# file closed: ./Data/ships/Worm.asm
  77+ EB06                                      include "Data/ships/Rattler.asm"
# file opened: ./Data/ships/Rattler.asm
   1++EB06 02 17 70     Rattler:	            DB $02, $17, $70
   2++EB09 79 EB                                DW RattlerEdges
   3++EB0B 68                                   DB RattlerEdgesSize
   4++EB0C 00 2A                                DB $00, $2A
   5++EB0E 5A                                   DB RattlerVertSize
   6++EB0F 1A                                   DB RattlerEdgesCnt
   7++EB10 00 96                                DB $00, $96
   8++EB12 34                                   DB RattlerNormalsSize
   9++EB13 0A 71 1F                             DB $0A, $71, $1F
  10++EB16 E1 EB                                DW RattlerNormals
  11++EB18 01 22                                DB $01, $22
  12++EB1A 1F EB                                DW RattlerVertices
  13++EB1C 00 00                                DB 0,0                      ; Type and Tactics
  14++EB1E 01                                   DB ShipCanAnger
  15++EB1F
  16++EB1F
  17++EB1F 00 00 3C 1F  RattlerVertices:	DB $00, $00, $3C, $1F, $89, $23
  17++EB23 89 23
  18++EB25 28 00 28 1F  	DB $28, $00, $28, $1F, $9A, $34
  18++EB29 9A 34
  19++EB2B 28 00 28 9F  	DB $28, $00, $28, $9F, $78, $12
  19++EB2F 78 12
  20++EB31 3C 00 00 1F  	DB $3C, $00, $00, $1F, $AB, $45
  20++EB35 AB 45
  21++EB37 3C 00 00 9F  	DB $3C, $00, $00, $9F, $67, $01
  21++EB3B 67 01
  22++EB3D 46 00 28 3F  	DB $46, $00, $28, $3F, $CC, $5B
  22++EB41 CC 5B
  23++EB43 46 00 28 BF  	DB $46, $00, $28, $BF, $CC, $06
  23++EB47 CC 06
  24++EB49 00 14 28 3F  	DB $00, $14, $28, $3F, $FF, $FF
  24++EB4D FF FF
  25++EB4F 00 14 28 7F  	DB $00, $14, $28, $7F, $FF, $FF
  25++EB53 FF FF
  26++EB55 0A 06 28 AA  	DB $0A, $06, $28, $AA, $CC, $CC
  26++EB59 CC CC
  27++EB5B 0A 06 28 EA  	DB $0A, $06, $28, $EA, $CC, $CC
  27++EB5F CC CC
  28++EB61 14 00 28 AA  	DB $14, $00, $28, $AA, $CC, $CC
  28++EB65 CC CC
  29++EB67 0A 06 28 2A  	DB $0A, $06, $28, $2A, $CC, $CC
  29++EB6B CC CC
  30++EB6D 0A 06 28 6A  	DB $0A, $06, $28, $6A, $CC, $CC
  30++EB71 CC CC
  31++EB73 14 00 28 2A  	DB $14, $00, $28, $2A, $CC, $CC
  31++EB77 CC CC
  32++EB79
  33++EB79              RattlerVertSize: equ $ - RattlerVertices
  34++EB79
  35++EB79
  36++EB79 1F 06 10 18  RattlerEdges:	DB $1F, $06, $10, $18
  37++EB7D 1F 17 08 10  	DB $1F, $17, $08, $10
  38++EB81 1F 28 00 08  	DB $1F, $28, $00, $08
  39++EB85 1F 39 00 04  	DB $1F, $39, $00, $04
  40++EB89 1F 4A 04 0C  	DB $1F, $4A, $04, $0C
  41++EB8D 1F 5B 0C 14  	DB $1F, $5B, $0C, $14
  42++EB91 1F 0C 18 1C  	DB $1F, $0C, $18, $1C
  43++EB95 1F 6C 18 20  	DB $1F, $6C, $18, $20
  44++EB99 1F 01 10 1C  	DB $1F, $01, $10, $1C
  45++EB9D 1F 67 10 20  	DB $1F, $67, $10, $20
  46++EBA1 1F 12 08 1C  	DB $1F, $12, $08, $1C
  47++EBA5 1F 78 08 20  	DB $1F, $78, $08, $20
  48++EBA9 1F 23 00 1C  	DB $1F, $23, $00, $1C
  49++EBAD 1F 89 00 20  	DB $1F, $89, $00, $20
  50++EBB1 1F 34 04 1C  	DB $1F, $34, $04, $1C
  51++EBB5 1F 9A 04 20  	DB $1F, $9A, $04, $20
  52++EBB9 1F 45 0C 1C  	DB $1F, $45, $0C, $1C
  53++EBBD 1F AB 0C 20  	DB $1F, $AB, $0C, $20
  54++EBC1 1F 5C 14 1C  	DB $1F, $5C, $14, $1C
  55++EBC5 1F BC 14 20  	DB $1F, $BC, $14, $20
  56++EBC9 0A CC 24 28  	DB $0A, $CC, $24, $28
  57++EBCD 0A CC 28 2C  	DB $0A, $CC, $28, $2C
  58++EBD1 0A CC 2C 24  	DB $0A, $CC, $2C, $24
  59++EBD5 0A CC 30 34  	DB $0A, $CC, $30, $34
  60++EBD9 0A CC 34 38  	DB $0A, $CC, $34, $38
  61++EBDD 0A CC 38 30  	DB $0A, $CC, $38, $30
  62++EBE1
  63++EBE1              RattlerEdgesSize: equ $ - RattlerEdges
  64++EBE1
  65++EBE1
  66++EBE1              RattlerEdgesCnt: equ RattlerEdgesSize/4
  67++EBE1
  68++EBE1
  69++EBE1 9F 1A 5C 06  RattlerNormals:	DB $9F, $1A, $5C, $06
  70++EBE5 9F 17 5C 0B  	DB $9F, $17, $5C, $0B
  71++EBE9 9F 09 5D 12  	DB $9F, $09, $5D, $12
  72++EBED 1F 09 5D 12  	DB $1F, $09, $5D, $12
  73++EBF1 1F 17 5C 0B  	DB $1F, $17, $5C, $0B
  74++EBF5 1F 1A 5C 06  	DB $1F, $1A, $5C, $06
  75++EBF9 DF 1A 5C 06  	DB $DF, $1A, $5C, $06
  76++EBFD DF 17 5C 0B  	DB $DF, $17, $5C, $0B
  77++EC01 DF 09 5D 12  	DB $DF, $09, $5D, $12
  78++EC05 5F 09 5D 12  	DB $5F, $09, $5D, $12
  79++EC09 5F 17 5C 0B  	DB $5F, $17, $5C, $0B
  80++EC0D 5F 1A 5C 06  	DB $5F, $1A, $5C, $06
  81++EC11 3F 00 00 60  	DB $3F, $00, $00, $60
  82++EC15
  83++EC15              RattlerNormalsSize: equ $ - RattlerNormals
  84++EC15              RattlerLen: equ $ - Rattler
  85++EC15
# file closed: ./Data/ships/Rattler.asm
  78+ EC15
# file closed: ./Data/ShipModelMetaData3.asm
1305  EC15              ;;Privisioned for more models ; Bank 69  ------------------------------------------------------------------------------------------------------------------------
1306  EC15              ;;Privisioned for more models     SLOT    ShipModelsAddr
1307  EC15              ;;Privisioned for more models     PAGE    BankShipModels4
1308  EC15              ;;Privisioned for more models 	ORG     ShipModelsAddr, BankShipModels4
1309  EC15
1310  EC15              ; Bank 60  ------------------------------------------------------------------------------------------------------------------------
1311  EC15                  SLOT    SpritemembankAddr
1312  EC15                  PAGE    BankSPRITE
1313  EC15              	ORG     SpritemembankAddr, BankSPRITE
1314  E000                  INCLUDE "./Layer3Sprites/sprite_routines.asm"
# file opened: ./Layer3Sprites/sprite_routines.asm
   1+ E000
   2+ E000              galactic_cursor_sprite				equ	0
   3+ E000              galactic_cursor_sprite1				equ	galactic_cursor_sprite+1
   4+ E000              galactic_cursor_sprite2				equ	galactic_cursor_sprite1+2
   5+ E000
   6+ E000              galactic_hyper_sprite				equ	galactic_cursor_sprite2+1
   7+ E000              ;galactic_hyper_sprite1				equ galactic_hyper_sprite+1
   8+ E000              ;galactic_hyper_sprite2				equ	galactic_hyper_sprite1+1
   9+ E000
  10+ E000              local_cursor_sprite					equ	galactic_hyper_sprite+1
  11+ E000              local_cursor_sprite1				equ	local_cursor_sprite+1
  12+ E000              local_cursor_sprite2				equ	local_cursor_sprite1+1
  13+ E000
  14+ E000              local_hyper_sprite					equ	local_cursor_sprite2+1
  15+ E000              local_hyper_sprite1					equ	local_hyper_sprite+1
  16+ E000              local_hyper_sprite2					equ	local_hyper_sprite1+2
  17+ E000
  18+ E000              reticlule_sprite1                   equ	local_hyper_sprite2+1
  19+ E000              reticlule_sprite2                   equ	reticlule_sprite1+1
  20+ E000              reticlule_sprite3                   equ	reticlule_sprite2+1
  21+ E000              reticlule_sprite4                   equ reticlule_sprite3+1
  22+ E000
  23+ E000              laser_sprite1                       equ	reticlule_sprite4+1
  24+ E000              laser_sprite2                       equ	laser_sprite1    +1
  25+ E000              laser_sprite3                       equ	laser_sprite2    +1
  26+ E000              laser_sprite4                       equ laser_sprite3    +1
  27+ E000              laser_sprite5                       equ	laser_sprite4    +1
  28+ E000              laser_sprite6                       equ	laser_sprite5    +1
  29+ E000              laser_sprite7                       equ	laser_sprite6    +1
  30+ E000              laser_sprite8                       equ laser_sprite7    +1
  31+ E000              laser_sprite9                       equ	laser_sprite8    +1
  32+ E000              laser_sprite10                      equ	laser_sprite9    +1
  33+ E000              laser_sprite11                      equ	laser_sprite10   +1
  34+ E000              laser_sprite12                      equ laser_sprite11   +1
  35+ E000              laser_sprite13                      equ	laser_sprite12   +1
  36+ E000              laser_sprite14                      equ	laser_sprite13   +1
  37+ E000              laser_sprite15                      equ	laser_sprite14   +1
  38+ E000              laser_sprite16                      equ laser_sprite15   +1
  39+ E000
  40+ E000              compass_sun                         equ laser_sprite16   +1
  41+ E000              compass_station                     equ compass_sun      +1
  42+ E000
  43+ E000              glactic_pattern_1					equ 0
  44+ E000              glactic_hyper_pattern_1             equ 2
  45+ E000              local_present_cursor                equ 4
  46+ E000              local_hyper_pattern                 equ 7
  47+ E000              reticule_pattern_1                  equ 10
  48+ E000              reticule_pattern_2                  equ 11
  49+ E000              laser_pattern_1                     equ 12
  50+ E000              laser_pattern_2                     equ 13
  51+ E000              laser_pattern_3                     equ 14
  52+ E000              laser_pattern_4                     equ 15
  53+ E000              laser_pattern_5                     equ 16
  54+ E000
  55+ E000              compass_sun_infront                 equ 17
  56+ E000              compass_sun_behind                  equ 18
  57+ E000              compass_station_infront             equ 19
  58+ E000              compass_station_behind              equ 20
  59+ E000              spritecursoroffset					equ 17
  60+ E000              spriteborderoffset                  equ 32
  61+ E000
  62+ E000              HideSprite:                 MACRO   spritenbr
  63+ E000 ~                                        nextreg		SPRITE_PORT_INDEX_REGISTER,spritenbr
  64+ E000 ~                                        nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
  65+ E000                                          ENDM
  66+ E000
  67+ E000              ; " sprite_big BC = rowcol, D = sprite nbr , E= , pattern"
  68+ E000              sprite_big:
  69+ E000 7A           .SetAnchor:	                ld		a,d                                 ; a = sprite nbr, bug fix?
  70+ E001 F5                                       push	af									; save id for next few
  71+ E002 D5                                       push	de
  72+ E003 ED 92 34                                 nextreg	SPRITE_PORT_INDEX_REGISTER,a		; set up sprite id
  73+ E006              ; write out X position bits 1 to 8
  74+ E006 79                                       ld		a,c
  75+ E007 21 11 00                                 ld      hl,spritecursoroffset
  76+ E00A ED 31                                    add		hl,a                                ; hl = full x position
  77+ E00C 7D                                       ld		a,l
  78+ E00D ED 92 35                                 nextreg	SPRITE_PORT_ATTR0_REGISTER,a		; Set up lower x cc
  79+ E010              ; write out Y position bits 1 to 8
  80+ E010 EB                                       ex		de,hl								; de = full x position
  81+ E011 78                                       ld		a,b
  82+ E012 21 11 00                                 ld      hl,spritecursoroffset
  83+ E015 ED 31                                    add		hl,a
  84+ E017 7D                                       ld		a,l                                 ; hl = full y position
  85+ E018 ED 92 36                                 nextreg	SPRITE_PORT_ATTR1_REGISTER,a		; lower y coord on screen
  86+ E01B              ; write out MSB of X as its an anchor
  87+ E01B 7A                                       ld		a,d									; de = MSB of X (hl bit 0)
  88+ E01C ED 92 37                                 nextreg	SPRITE_PORT_ATTR2_REGISTER,a		; lower y
  89+ E01F              ; write out sprite pattern
  90+ E01F D1                                       pop		de                                  ; de = pattern and sprite nbr
  91+ E020 7B                                       ld		a,e
  92+ E021 F6 C0                                    or		%11000000							;
  93+ E023 ED 92 38                                 nextreg	SPRITE_PORT_ATTR3_REGISTER,a		; visible 5 bytes pattern e
  94+ E026              ; write out msb of y in h must be bit 0 only
  95+ E026 3E 00                                    ld		a,%00000000							; big unified composite
  96+ E028 B4                                       or		h									; MSB Y
  97+ E029 ED 92 39                                 nextreg	SPRITE_PORT_ATTR4_REGISTER,a		; visible 5 bytes pattern e
  98+ E02C F1           .BigSprite1:                pop		af
  99+ E02D 3C                                       inc		a
 100+ E02E F5                                       push	af
 101+ E02F ED 92 34                                 nextreg		SPRITE_PORT_INDEX_REGISTER,a
 102+ E032 3E 10                                    ld		a,16
 103+ E034 ED 92 35                                 nextreg		SPRITE_PORT_ATTR0_REGISTER,a	; lower x
 104+ E037 AF                                       xor 	a
 105+ E038 ED 92 36                                 nextreg		SPRITE_PORT_ATTR1_REGISTER,a	; lower y
 106+ E03B ED 92 37                                 nextreg		SPRITE_PORT_ATTR2_REGISTER,a	; relative setup
 107+ E03E 3E C1                                    ld		a,%11000001							; relative and 4 bytes of data, pattern 1
 108+ E040 ED 92 38                                 nextreg		SPRITE_PORT_ATTR3_REGISTER,a
 109+ E043 3E 41                                    ld		a,%01000001							; big unified composite
 110+ E045 ED 92 39                                 nextreg	SPRITE_PORT_ATTR4_REGISTER,a		; visible 5 bytes pattern e
 111+ E048 F1           .BigSprite2:                pop		af
 112+ E049 3C                                       inc		a
 113+ E04A ED 92 34                                 nextreg		SPRITE_PORT_INDEX_REGISTER,a
 114+ E04D AF                                       xor		a
 115+ E04E ED 92 35                                 nextreg		SPRITE_PORT_ATTR0_REGISTER,a	; lower x
 116+ E051 3E 10                                    ld		a,16
 117+ E053 ED 92 36                                 nextreg		SPRITE_PORT_ATTR1_REGISTER,a	; lower y
 118+ E056 AF                                       xor		a
 119+ E057 ED 92 37                                 nextreg		SPRITE_PORT_ATTR2_REGISTER,a	; relative setup
 120+ E05A 3E C2                                    ld		a,%11000010							; relative and 4 bytes of data, pattern 2
 121+ E05C ED 92 38                                 nextreg		SPRITE_PORT_ATTR3_REGISTER,a
 122+ E05F 3E 41                                    ld		a,%01000001							; big unified composite
 123+ E061 ED 92 39                                 nextreg	SPRITE_PORT_ATTR4_REGISTER,a		; visible 5 bytes pattern e
 124+ E064 C9                                       ret
 125+ E065
 126+ E065              ; for a sinle sprite within 256x192 area
 127+ E065 7A           sprite_single:          ld		a,d                                 ; a = sprite nbr, bug fix?
 128+ E066 D5                                   push    de
 129+ E067 ED 92 34                             nextreg	SPRITE_PORT_INDEX_REGISTER,a		; set up sprite id
 130+ E06A              ; write out X position bits 1 to 8
 131+ E06A 79                                   ld		a,c                                 ; a = column (c)
 132+ E06B 21 20 00                             ld      hl,spriteborderoffset
 133+ E06E ED 31                                add		hl,a                                ; hl = full x position
 134+ E070 EB                                   ex		de,hl								; de = full x position
 135+ E071 7B                                   ld		a,e
 136+ E072 ED 92 35                             nextreg	SPRITE_PORT_ATTR0_REGISTER,a		; Set up lower x cc
 137+ E075              ; write out Y position bits 1 to 8
 138+ E075 78                                   ld		a,b                                 ; a = row
 139+ E076 21 20 00                             ld      hl,spriteborderoffset
 140+ E079 ED 31                                add		hl,a
 141+ E07B 7D                                   ld		a,l                                 ; hl = full y position
 142+ E07C ED 92 36                             nextreg	SPRITE_PORT_ATTR1_REGISTER,a		; lower y coord on screen
 143+ E07F              ; write out MSB of X as its an anchor
 144+ E07F 7A                                   ld		a,d									; de = MSB of X (hl bit 0)
 145+ E080 ED 92 37                             nextreg	SPRITE_PORT_ATTR2_REGISTER,a		; lower y
 146+ E083              ; write out sprite pattern
 147+ E083 D1                                   pop     de
 148+ E084 7B                                   ld		a,e
 149+ E085 F6 80                                or		%10000000							;
 150+ E087 ED 92 38                             nextreg	SPRITE_PORT_ATTR3_REGISTER,a		; visible 5 bytes pattern e
 151+ E08A              ; write out extended attribute
 152+ E08A 3E 00                                ld      a,%00000000                         ; its a single sprite
 153+ E08C B4                                   or      h
 154+ E08D ED 92 39                             nextreg	SPRITE_PORT_ATTR4_REGISTER,a
 155+ E090 C9                                   ret
 156+ E091              ; ">sprite_galactic_cursor BC = rowcol"
 157+ E091 16 00        sprite_galactic_cursor:     ld		d,galactic_cursor_sprite
 158+ E093 1E 00                                    ld		e,0
 159+ E095 78                                       ld		a,b
 160+ E096 C6 18                                    add		a,galactic_chart_y_offset
 161+ E098 47                                       ld		b,a
 162+ E099 CD 00 E0                                 call	sprite_big
 163+ E09C C9                                       ret
 164+ E09D
 165+ E09D              ; "> sprite_galactic_hyper_cursorBC = rowcol"
 166+ E09D 78           sprite_galactic_hyper_cursor:ld		a,b
 167+ E09E C6 04                                    add		a,galactic_chart_hyper_offset
 168+ E0A0 47                                       ld		b,a
 169+ E0A1 16 04                                    ld		d,galactic_hyper_sprite
 170+ E0A3 1E 03                                    ld		e,3
 171+ E0A5 CD 65 E0                                 call	sprite_single ; sprite_big:
 172+ E0A8 C9                                       ret
 173+ E0A9              ; moves hyperspace cursor to target system x position
 174+ E0A9 3E 04        sprite_ghc_move:            ld		a,galactic_hyper_sprite
 175+ E0AB ED 92 34                                 nextreg	SPRITE_PORT_INDEX_REGISTER,a		; set up sprite id
 176+ E0AE              ; write out X position bits 1 to 8
 177+ E0AE 79                                       ld		a,c
 178+ E0AF 21 1C 00                                 ld      hl,galactic_chart_hyper_x_offset
 179+ E0B2 ED 31                                    add		hl,a                                ; hl = full x position
 180+ E0B4 7D                                       ld		a,l
 181+ E0B5 ED 92 35                                 nextreg	SPRITE_PORT_ATTR0_REGISTER,a		; Set up lower x cc
 182+ E0B8              ; write out Y position bits 1 to 8
 183+ E0B8 EB                                       ex		de,hl								; de = full x position
 184+ E0B9 CB 38                                    srl		b			    					; row is row / 2
 185+ E0BB 78                                       ld      a,b
 186+ E0BC 21 34 00                                 ld      hl,galactic_chart_hyper_y_offset
 187+ E0BF ED 31                                    add		hl,a
 188+ E0C1 7D                                       ld		a,l                                 ; hl = full y position
 189+ E0C2 ED 92 36                                 nextreg	SPRITE_PORT_ATTR1_REGISTER,a		; lower y coord on screen
 190+ E0C5              ; write out MSB of X as its an anchor
 191+ E0C5 7A                                       ld		a,d									; de = MSB of X (hl bit 0)
 192+ E0C6 ED 92 37                                 nextreg	SPRITE_PORT_ATTR2_REGISTER,a		; lower y
 193+ E0C9              ; write out msb of y in h must be bit 0 only
 194+ E0C9 3E 00                                    ld		a,%00000000							; big unified composite
 195+ E0CB B2                                       or		d									; MSB Y
 196+ E0CC ED 92 39                                 nextreg	SPRITE_PORT_ATTR4_REGISTER,a		; visible 5 bytes pattern e
 197+ E0CF C9                                       ret
 198+ E0D0
 199+ E0D0
 200+ E0D0 3E 08        sprite_lhc_move:            ld		a,local_hyper_sprite
 201+ E0D2 ED 92 34                                 nextreg	SPRITE_PORT_INDEX_REGISTER,a		; set up sprite id
 202+ E0D5              ; write out X position bits 1 to 8
 203+ E0D5 79                                       ld		a,c
 204+ E0D6 21 11 00                                 ld      hl,spritecursoroffset
 205+ E0D9 ED 31                                    add		hl,a                                ; hl = full x position
 206+ E0DB 7D                                       ld		a,l
 207+ E0DC ED 92 35                                 nextreg	SPRITE_PORT_ATTR0_REGISTER,a		; Set up lower x cc
 208+ E0DF              ; write out Y position bits 1 to 8
 209+ E0DF EB                                       ex		de,hl								; de = full x position
 210+ E0E0 78                                       ld		a,b
 211+ E0E1 21 11 00                                 ld      hl,spritecursoroffset
 212+ E0E4 ED 31                                    add		hl,a
 213+ E0E6 7D                                       ld		a,l                                 ; hl = full y position
 214+ E0E7 ED 92 36                                 nextreg	SPRITE_PORT_ATTR1_REGISTER,a		; lower y coord on screen
 215+ E0EA              ; write out MSB of X as its an anchor
 216+ E0EA 7A                                       ld		a,d									; de = MSB of X (hl bit 0)
 217+ E0EB ED 92 37                                 nextreg	SPRITE_PORT_ATTR2_REGISTER,a		; lower y
 218+ E0EE              ; write out msb of y in h must be bit 0 only
 219+ E0EE 3E 00                                    ld		a,%00000000							; big unified composite
 220+ E0F0 B2                                       or		d									; MSB Y
 221+ E0F1 ED 92 39                                 nextreg	SPRITE_PORT_ATTR4_REGISTER,a		; visible 5 bytes pattern e
 222+ E0F4 C9                                       ret
 223+ E0F5
 224+ E0F5              ; "sprite_local_cursor BC = rowcol"
 225+ E0F5 16 05        sprite_local_cursor:        ld		d,local_cursor_sprite
 226+ E0F7 1E 04                                    ld		e,local_present_cursor
 227+ E0F9 CD 00 E0                                 call	sprite_big
 228+ E0FC C9                                       ret
 229+ E0FD
 230+ E0FD              ; "sprite_local_hyper_cursor BC = rowcol"
 231+ E0FD 16 08        sprite_local_hyper_cursor:  ld		d,local_hyper_sprite
 232+ E0FF 1E 07                                    ld		e,local_hyper_pattern
 233+ E101 CD 00 E0                                 call	sprite_big
 234+ E104 C9                                       ret
 235+ E105
 236+ E105              compass_offset              equ 2
 237+ E105              ScannerX                    equ 128
 238+ E105              ScannerY                    equ 171
 239+ E105              SunScanCenterX              equ 92
 240+ E105              SunScanCenterY              equ 171
 241+ E105
 242+ E105 3E 20        compass_sun_move:       ld		a,compass_sun
 243+ E107 ED 92 34                             nextreg	SPRITE_PORT_INDEX_REGISTER,a		; set up sprite id
 244+ E10A              ; write out X position bits 1 to 8
 245+ E10A 3E 5A                                ld      a, SunScanCenterX-compass_offset
 246+ E10C 81                                   add     a,c
 247+ E10D ED 92 35                             nextreg	SPRITE_PORT_ATTR0_REGISTER,a		; Set up lower x cc
 248+ E110              ; write out Y position bits 1 to 8
 249+ E110 3E A9                                ld      a, SunScanCenterY-compass_offset
 250+ E112 90                                   sub     b
 251+ E113 ED 92 36                             nextreg	SPRITE_PORT_ATTR1_REGISTER,a		; lower y coord on screen
 252+ E116 C9                                   ret
 253+ E117
 254+ E117 3E 21        compass_station_move:   ld		a,compass_station
 255+ E119 ED 92 34                             nextreg	SPRITE_PORT_INDEX_REGISTER,a		; set up sprite id
 256+ E11C              ; write out X position bits 1 to 8
 257+ E11C 79                                   ld		a,c
 258+ E11D 21 02 00                             ld      hl,compass_offset
 259+ E120 ED 31                                add		hl,a                                ; hl = full x position
 260+ E122 7D                                   ld		a,l
 261+ E123 ED 92 35                             nextreg	SPRITE_PORT_ATTR0_REGISTER,a		; Set up lower x cc
 262+ E126              ; write out Y position bits 1 to 8
 263+ E126 EB                                   ex		de,hl								; de = full x position
 264+ E127 78                                   ld		a,b
 265+ E128 21 02 00                             ld      hl,compass_offset           ;TODO Needs to be subtract
 266+ E12B ED 31                                add		hl,a
 267+ E12D 7D                                   ld		a,l                                 ; hl = full y position
 268+ E12E ED 92 36                             nextreg	SPRITE_PORT_ATTR1_REGISTER,a		; lower y coord on screen
 269+ E131              ; write out MSB of X as its an anchor
 270+ E131 7A                                   ld		a,d									; de = MSB of X (hl bit 0)
 271+ E132 ED 92 37                             nextreg	SPRITE_PORT_ATTR2_REGISTER,a		; lower y
 272+ E135 C9                                   ret
 273+ E136
 274+ E136              ReticuleCentreX      EQU (256/2)+32 -1
 275+ E136              ReticuleCentreY      EQU (192/2)+32 -1
 276+ E136              ReticuleOffset       EQU 8
 277+ E136
 278+ E136 3E 0C        sprite_reticule:        ld      a,reticlule_sprite1                 ; LEFT ARM
 279+ E138 ED 92 34                             nextreg SPRITE_PORT_INDEX_REGISTER,a        ; select left hand side
 280+ E13B 3E 87                                ld      a,ReticuleCentreX -16 - ReticuleOffset
 281+ E13D ED 92 35                             nextreg	SPRITE_PORT_ATTR0_REGISTER,a		; Set up lower x pos as 136 (104 + 32 border)
 282+ E140 3E 7F                                ld		a,ReticuleCentreY
 283+ E142 ED 92 36                             nextreg	SPRITE_PORT_ATTR1_REGISTER,a		; lower y coord on screen
 284+ E145 AF                                   xor     a
 285+ E146 ED 92 37                             nextreg	SPRITE_PORT_ATTR2_REGISTER,a		; attribute 2
 286+ E149 3E 8B                                ld      a,reticule_pattern_2 | %10000000
 287+ E14B ED 92 38                             nextreg	SPRITE_PORT_ATTR3_REGISTER,a		; visible 5 bytes pattern left reticule
 288+ E14E 3E 0D        .rightReticule          ld      a,reticlule_sprite2                 ; RIGHT ARM
 289+ E150 ED 92 34                             nextreg SPRITE_PORT_INDEX_REGISTER,a        ; select left hand side
 290+ E153 3E A7                                ld      a,ReticuleCentreX + ReticuleOffset
 291+ E155 ED 92 35                             nextreg	SPRITE_PORT_ATTR0_REGISTER,a		; Set up lower x pos as 136 (104 + 32 border)
 292+ E158 3E 7F                                ld		a,ReticuleCentreY
 293+ E15A ED 92 36                             nextreg	SPRITE_PORT_ATTR1_REGISTER,a		; lower y coord on screen
 294+ E15D 3E 08                                ld      a,%00001000
 295+ E15F ED 92 37                             nextreg	SPRITE_PORT_ATTR2_REGISTER,a		; attribute 2 including mirroring horizontal
 296+ E162 3E 8B                                ld      a,reticule_pattern_2 | %10000000
 297+ E164 ED 92 38                             nextreg	SPRITE_PORT_ATTR3_REGISTER,a		; visible 5 bytes pattern left reticule
 298+ E167 3E 0E        .topReticule            ld      a,reticlule_sprite3
 299+ E169 ED 92 34                             nextreg SPRITE_PORT_INDEX_REGISTER,a        ; select left hand side
 300+ E16C 3E 9F                                ld      a,ReticuleCentreX
 301+ E16E ED 92 35                             nextreg	SPRITE_PORT_ATTR0_REGISTER,a		; Set up lower x pos as 136 (104 + 32 border)
 302+ E171 3E 67                                ld		a,ReticuleCentreY-16 - ReticuleOffset
 303+ E173 ED 92 36                             nextreg	SPRITE_PORT_ATTR1_REGISTER,a		; lower y coord on screen
 304+ E176 AF                                   xor     a
 305+ E177 ED 92 37                             nextreg	SPRITE_PORT_ATTR2_REGISTER,a		; attribute 2
 306+ E17A 3E 8A                                ld      a,reticule_pattern_1 | %10000000
 307+ E17C ED 92 38                             nextreg	SPRITE_PORT_ATTR3_REGISTER,a		; visible 5 bytes pattern left reticule
 308+ E17F 3E 0F        .bottomReticule         ld      a,reticlule_sprite4
 309+ E181 ED 92 34                             nextreg SPRITE_PORT_INDEX_REGISTER,a        ; select left hand side
 310+ E184 3E 9F                                ld      a,ReticuleCentreX
 311+ E186 ED 92 35                             nextreg	SPRITE_PORT_ATTR0_REGISTER,a		; Set up lower x pos as 136 (104 + 32 border)
 312+ E189 3E 87                                ld		a,ReticuleCentreY + ReticuleOffset
 313+ E18B ED 92 36                             nextreg	SPRITE_PORT_ATTR1_REGISTER,a		; lower y coord on screen
 314+ E18E 3E 04                                ld      a,%00000100
 315+ E190 ED 92 37                             nextreg	SPRITE_PORT_ATTR2_REGISTER,a		; attribute 2 including mirroring vertical
 316+ E193 3E 8A                                ld      a,reticule_pattern_1 | %10000000
 317+ E195 ED 92 38                             nextreg	SPRITE_PORT_ATTR3_REGISTER,a		; visible 5 bytes pattern left reticule
 318+ E198 C9                                   ret
 319+ E199
 320+ E199              laserbasex              equ 6
 321+ E199              laserbasey              equ 14
 322+ E199
 323+ E199              ShowSprite              MACRO   spritenbr, patternnbr
 324+ E199 ~                                    ld      a, spritenbr
 325+ E199 ~                                    nextreg SPRITE_PORT_INDEX_REGISTER,a
 326+ E199 ~                                    ld      a,patternnbr | %10000000
 327+ E199 ~                                    nextreg	SPRITE_PORT_ATTR3_REGISTER,a
 328+ E199                                      ENDM
 329+ E199
 330+ E199              LeftLaser:              MACRO   xoffset, yoffset, spriteL, patternL
 331+ E199 ~                                    ld      a, spriteL
 332+ E199 ~                                    nextreg SPRITE_PORT_INDEX_REGISTER,a        ; select left hand side
 333+ E199 ~                                    ld      a,((laserbasex + xoffset) *8) + 32
 334+ E199 ~                                    nextreg	SPRITE_PORT_ATTR0_REGISTER,a		; Set up lower x pos as 136 (104 + 32 border)
 335+ E199 ~                                    ld		a,((laserbasey -yoffset) * 8) + 32 -1
 336+ E199 ~                                    nextreg	SPRITE_PORT_ATTR1_REGISTER,a		; lower y coord on screen
 337+ E199 ~                                    xor     a
 338+ E199 ~                                    nextreg	SPRITE_PORT_ATTR2_REGISTER,a		; attribute 2
 339+ E199 ~                                    ld      a, patternL | %00000000             ; hidden by default
 340+ E199 ~                                    nextreg	SPRITE_PORT_ATTR3_REGISTER,a
 341+ E199                                      ENDM
 342+ E199
 343+ E199              RightLaser:             MACRO   xoffset, yoffset, spriteL, patternL
 344+ E199 ~                                    ld      a, spriteL
 345+ E199 ~                                    nextreg SPRITE_PORT_INDEX_REGISTER,a        ; select left hand side
 346+ E199 ~                                    ld      a,(((30-laserbasex) - xoffset) *8) + 32 -2
 347+ E199 ~                                    nextreg	SPRITE_PORT_ATTR0_REGISTER,a		; Set up lower x pos as 136 (104 + 32 border)
 348+ E199 ~                                    ld		a,((laserbasey -yoffset) * 8) + 32 -1
 349+ E199 ~                                    nextreg	SPRITE_PORT_ATTR1_REGISTER,a		; lower y coord on screen
 350+ E199 ~                                    ld      a,%00001000
 351+ E199 ~                                    nextreg	SPRITE_PORT_ATTR2_REGISTER,a		; attribute 2
 352+ E199 ~                                    ld      a, patternL | %00000000             ; hidden by default
 353+ E199 ~                                    nextreg	SPRITE_PORT_ATTR3_REGISTER,a
 354+ E199                                      ENDM
 355+ E199
 356+ E199
 357+ E199              show_compass_sun_infront:ShowSprite  compass_sun, compass_sun_infront
 357+ E199 3E 20       >                        ld      a, compass_sun
 357+ E19B ED 92 34    >                        nextreg SPRITE_PORT_INDEX_REGISTER,a
 357+ E19E 3E 91       >                        ld      a,compass_sun_infront | %10000000
 357+ E1A0 ED 92 38    >                        nextreg	SPRITE_PORT_ATTR3_REGISTER,a
 358+ E1A3 C9                                    ret
 359+ E1A4
 360+ E1A4              show_compass_sun_behind: ShowSprite  compass_sun, compass_sun_behind
 360+ E1A4 3E 20       >                        ld      a, compass_sun
 360+ E1A6 ED 92 34    >                        nextreg SPRITE_PORT_INDEX_REGISTER,a
 360+ E1A9 3E 92       >                        ld      a,compass_sun_behind | %10000000
 360+ E1AB ED 92 38    >                        nextreg	SPRITE_PORT_ATTR3_REGISTER,a
 361+ E1AE C9                                    ret
 362+ E1AF
 363+ E1AF              show_compass_station_infront: ShowSprite  compass_station, compass_station_infront
 363+ E1AF 3E 21       >                        ld      a, compass_station
 363+ E1B1 ED 92 34    >                        nextreg SPRITE_PORT_INDEX_REGISTER,a
 363+ E1B4 3E 93       >                        ld      a,compass_station_infront | %10000000
 363+ E1B6 ED 92 38    >                        nextreg	SPRITE_PORT_ATTR3_REGISTER,a
 364+ E1B9 C9                                    ret
 365+ E1BA
 366+ E1BA              show_compass_statin_behind:   ShowSprite  compass_station, compass_station_behind
 366+ E1BA 3E 21       >                        ld      a, compass_station
 366+ E1BC ED 92 34    >                        nextreg SPRITE_PORT_INDEX_REGISTER,a
 366+ E1BF 3E 94       >                        ld      a,compass_station_behind | %10000000
 366+ E1C1 ED 92 38    >                        nextreg	SPRITE_PORT_ATTR3_REGISTER,a
 367+ E1C4 C9                                    ret
 368+ E1C5
 369+ E1C5
 370+ E1C5              sprite_laser:           LeftLaser  0,0,laser_sprite1 ,laser_pattern_1
 370+ E1C5 3E 10       >                        ld      a, laser_sprite1
 370+ E1C7 ED 92 34    >                        nextreg SPRITE_PORT_INDEX_REGISTER,a        ; select left hand side
 370+ E1CA 3E 50       >                        ld      a,((laserbasex + 0) *8) + 32
 370+ E1CC ED 92 35    >                        nextreg	SPRITE_PORT_ATTR0_REGISTER,a		; Set up lower x pos as 136 (104 + 32 border)
 370+ E1CF 3E 8F       >                        ld		a,((laserbasey -0) * 8) + 32 -1
 370+ E1D1 ED 92 36    >                        nextreg	SPRITE_PORT_ATTR1_REGISTER,a		; lower y coord on screen
 370+ E1D4 AF          >                        xor     a
 370+ E1D5 ED 92 37    >                        nextreg	SPRITE_PORT_ATTR2_REGISTER,a		; attribute 2
 370+ E1D8 3E 0C       >                        ld      a, laser_pattern_1 | %00000000             ; hidden by default
 370+ E1DA ED 92 38    >                        nextreg	SPRITE_PORT_ATTR3_REGISTER,a
 371+ E1DD                                      LeftLaser  2,0,laser_sprite2 ,laser_pattern_2
 371+ E1DD 3E 11       >                        ld      a, laser_sprite2
 371+ E1DF ED 92 34    >                        nextreg SPRITE_PORT_INDEX_REGISTER,a        ; select left hand side
 371+ E1E2 3E 60       >                        ld      a,((laserbasex + 2) *8) + 32
 371+ E1E4 ED 92 35    >                        nextreg	SPRITE_PORT_ATTR0_REGISTER,a		; Set up lower x pos as 136 (104 + 32 border)
 371+ E1E7 3E 8F       >                        ld		a,((laserbasey -0) * 8) + 32 -1
 371+ E1E9 ED 92 36    >                        nextreg	SPRITE_PORT_ATTR1_REGISTER,a		; lower y coord on screen
 371+ E1EC AF          >                        xor     a
 371+ E1ED ED 92 37    >                        nextreg	SPRITE_PORT_ATTR2_REGISTER,a		; attribute 2
 371+ E1F0 3E 0D       >                        ld      a, laser_pattern_2 | %00000000             ; hidden by default
 371+ E1F2 ED 92 38    >                        nextreg	SPRITE_PORT_ATTR3_REGISTER,a
 372+ E1F5                                      LeftLaser  4,1,laser_sprite3 ,laser_pattern_3
 372+ E1F5 3E 12       >                        ld      a, laser_sprite3
 372+ E1F7 ED 92 34    >                        nextreg SPRITE_PORT_INDEX_REGISTER,a        ; select left hand side
 372+ E1FA 3E 70       >                        ld      a,((laserbasex + 4) *8) + 32
 372+ E1FC ED 92 35    >                        nextreg	SPRITE_PORT_ATTR0_REGISTER,a		; Set up lower x pos as 136 (104 + 32 border)
 372+ E1FF 3E 87       >                        ld		a,((laserbasey -1) * 8) + 32 -1
 372+ E201 ED 92 36    >                        nextreg	SPRITE_PORT_ATTR1_REGISTER,a		; lower y coord on screen
 372+ E204 AF          >                        xor     a
 372+ E205 ED 92 37    >                        nextreg	SPRITE_PORT_ATTR2_REGISTER,a		; attribute 2
 372+ E208 3E 0E       >                        ld      a, laser_pattern_3 | %00000000             ; hidden by default
 372+ E20A ED 92 38    >                        nextreg	SPRITE_PORT_ATTR3_REGISTER,a
 373+ E20D                                      LeftLaser  6,1,laser_sprite4 ,laser_pattern_4
 373+ E20D 3E 13       >                        ld      a, laser_sprite4
 373+ E20F ED 92 34    >                        nextreg SPRITE_PORT_INDEX_REGISTER,a        ; select left hand side
 373+ E212 3E 80       >                        ld      a,((laserbasex + 6) *8) + 32
 373+ E214 ED 92 35    >                        nextreg	SPRITE_PORT_ATTR0_REGISTER,a		; Set up lower x pos as 136 (104 + 32 border)
 373+ E217 3E 87       >                        ld		a,((laserbasey -1) * 8) + 32 -1
 373+ E219 ED 92 36    >                        nextreg	SPRITE_PORT_ATTR1_REGISTER,a		; lower y coord on screen
 373+ E21C AF          >                        xor     a
 373+ E21D ED 92 37    >                        nextreg	SPRITE_PORT_ATTR2_REGISTER,a		; attribute 2
 373+ E220 3E 0F       >                        ld      a, laser_pattern_4 | %00000000             ; hidden by default
 373+ E222 ED 92 38    >                        nextreg	SPRITE_PORT_ATTR3_REGISTER,a
 374+ E225                                      LeftLaser  8,2,laser_sprite5 ,laser_pattern_5
 374+ E225 3E 14       >                        ld      a, laser_sprite5
 374+ E227 ED 92 34    >                        nextreg SPRITE_PORT_INDEX_REGISTER,a        ; select left hand side
 374+ E22A 3E 90       >                        ld      a,((laserbasex + 8) *8) + 32
 374+ E22C ED 92 35    >                        nextreg	SPRITE_PORT_ATTR0_REGISTER,a		; Set up lower x pos as 136 (104 + 32 border)
 374+ E22F 3E 7F       >                        ld		a,((laserbasey -2) * 8) + 32 -1
 374+ E231 ED 92 36    >                        nextreg	SPRITE_PORT_ATTR1_REGISTER,a		; lower y coord on screen
 374+ E234 AF          >                        xor     a
 374+ E235 ED 92 37    >                        nextreg	SPRITE_PORT_ATTR2_REGISTER,a		; attribute 2
 374+ E238 3E 10       >                        ld      a, laser_pattern_5 | %00000000             ; hidden by default
 374+ E23A ED 92 38    >                        nextreg	SPRITE_PORT_ATTR3_REGISTER,a
 375+ E23D                                      RightLaser 0,0,laser_sprite9 ,laser_pattern_1
 375+ E23D 3E 18       >                        ld      a, laser_sprite9
 375+ E23F ED 92 34    >                        nextreg SPRITE_PORT_INDEX_REGISTER,a        ; select left hand side
 375+ E242 3E DE       >                        ld      a,(((30-laserbasex) - 0) *8) + 32 -2
 375+ E244 ED 92 35    >                        nextreg	SPRITE_PORT_ATTR0_REGISTER,a		; Set up lower x pos as 136 (104 + 32 border)
 375+ E247 3E 8F       >                        ld		a,((laserbasey -0) * 8) + 32 -1
 375+ E249 ED 92 36    >                        nextreg	SPRITE_PORT_ATTR1_REGISTER,a		; lower y coord on screen
 375+ E24C 3E 08       >                        ld      a,%00001000
 375+ E24E ED 92 37    >                        nextreg	SPRITE_PORT_ATTR2_REGISTER,a		; attribute 2
 375+ E251 3E 0C       >                        ld      a, laser_pattern_1 | %00000000             ; hidden by default
 375+ E253 ED 92 38    >                        nextreg	SPRITE_PORT_ATTR3_REGISTER,a
 376+ E256                                      RightLaser 2,0,laser_sprite10,laser_pattern_2
 376+ E256 3E 19       >                        ld      a, laser_sprite10
 376+ E258 ED 92 34    >                        nextreg SPRITE_PORT_INDEX_REGISTER,a        ; select left hand side
 376+ E25B 3E CE       >                        ld      a,(((30-laserbasex) - 2) *8) + 32 -2
 376+ E25D ED 92 35    >                        nextreg	SPRITE_PORT_ATTR0_REGISTER,a		; Set up lower x pos as 136 (104 + 32 border)
 376+ E260 3E 8F       >                        ld		a,((laserbasey -0) * 8) + 32 -1
 376+ E262 ED 92 36    >                        nextreg	SPRITE_PORT_ATTR1_REGISTER,a		; lower y coord on screen
 376+ E265 3E 08       >                        ld      a,%00001000
 376+ E267 ED 92 37    >                        nextreg	SPRITE_PORT_ATTR2_REGISTER,a		; attribute 2
 376+ E26A 3E 0D       >                        ld      a, laser_pattern_2 | %00000000             ; hidden by default
 376+ E26C ED 92 38    >                        nextreg	SPRITE_PORT_ATTR3_REGISTER,a
 377+ E26F                                      RightLaser 4,1,laser_sprite11,laser_pattern_3
 377+ E26F 3E 1A       >                        ld      a, laser_sprite11
 377+ E271 ED 92 34    >                        nextreg SPRITE_PORT_INDEX_REGISTER,a        ; select left hand side
 377+ E274 3E BE       >                        ld      a,(((30-laserbasex) - 4) *8) + 32 -2
 377+ E276 ED 92 35    >                        nextreg	SPRITE_PORT_ATTR0_REGISTER,a		; Set up lower x pos as 136 (104 + 32 border)
 377+ E279 3E 87       >                        ld		a,((laserbasey -1) * 8) + 32 -1
 377+ E27B ED 92 36    >                        nextreg	SPRITE_PORT_ATTR1_REGISTER,a		; lower y coord on screen
 377+ E27E 3E 08       >                        ld      a,%00001000
 377+ E280 ED 92 37    >                        nextreg	SPRITE_PORT_ATTR2_REGISTER,a		; attribute 2
 377+ E283 3E 0E       >                        ld      a, laser_pattern_3 | %00000000             ; hidden by default
 377+ E285 ED 92 38    >                        nextreg	SPRITE_PORT_ATTR3_REGISTER,a
 378+ E288                                      RightLaser 6,1,laser_sprite12,laser_pattern_4
 378+ E288 3E 1B       >                        ld      a, laser_sprite12
 378+ E28A ED 92 34    >                        nextreg SPRITE_PORT_INDEX_REGISTER,a        ; select left hand side
 378+ E28D 3E AE       >                        ld      a,(((30-laserbasex) - 6) *8) + 32 -2
 378+ E28F ED 92 35    >                        nextreg	SPRITE_PORT_ATTR0_REGISTER,a		; Set up lower x pos as 136 (104 + 32 border)
 378+ E292 3E 87       >                        ld		a,((laserbasey -1) * 8) + 32 -1
 378+ E294 ED 92 36    >                        nextreg	SPRITE_PORT_ATTR1_REGISTER,a		; lower y coord on screen
 378+ E297 3E 08       >                        ld      a,%00001000
 378+ E299 ED 92 37    >                        nextreg	SPRITE_PORT_ATTR2_REGISTER,a		; attribute 2
 378+ E29C 3E 0F       >                        ld      a, laser_pattern_4 | %00000000             ; hidden by default
 378+ E29E ED 92 38    >                        nextreg	SPRITE_PORT_ATTR3_REGISTER,a
 379+ E2A1                                      RightLaser 8,2,laser_sprite13,laser_pattern_5
 379+ E2A1 3E 1C       >                        ld      a, laser_sprite13
 379+ E2A3 ED 92 34    >                        nextreg SPRITE_PORT_INDEX_REGISTER,a        ; select left hand side
 379+ E2A6 3E 9E       >                        ld      a,(((30-laserbasex) - 8) *8) + 32 -2
 379+ E2A8 ED 92 35    >                        nextreg	SPRITE_PORT_ATTR0_REGISTER,a		; Set up lower x pos as 136 (104 + 32 border)
 379+ E2AB 3E 7F       >                        ld		a,((laserbasey -2) * 8) + 32 -1
 379+ E2AD ED 92 36    >                        nextreg	SPRITE_PORT_ATTR1_REGISTER,a		; lower y coord on screen
 379+ E2B0 3E 08       >                        ld      a,%00001000
 379+ E2B2 ED 92 37    >                        nextreg	SPRITE_PORT_ATTR2_REGISTER,a		; attribute 2
 379+ E2B5 3E 10       >                        ld      a, laser_pattern_5 | %00000000             ; hidden by default
 379+ E2B7 ED 92 38    >                        nextreg	SPRITE_PORT_ATTR3_REGISTER,a
 380+ E2BA C9                                   ret
 381+ E2BB                                      ; Need simple show updates just to update the show attribute
 382+ E2BB
 383+ E2BB              sprite_laser_show:      ShowSprite laser_sprite1 ,laser_pattern_1
 383+ E2BB 3E 10       >                        ld      a, laser_sprite1
 383+ E2BD ED 92 34    >                        nextreg SPRITE_PORT_INDEX_REGISTER,a
 383+ E2C0 3E 8C       >                        ld      a,laser_pattern_1 | %10000000
 383+ E2C2 ED 92 38    >                        nextreg	SPRITE_PORT_ATTR3_REGISTER,a
 384+ E2C5                                      ShowSprite laser_sprite2 ,laser_pattern_2
 384+ E2C5 3E 11       >                        ld      a, laser_sprite2
 384+ E2C7 ED 92 34    >                        nextreg SPRITE_PORT_INDEX_REGISTER,a
 384+ E2CA 3E 8D       >                        ld      a,laser_pattern_2 | %10000000
 384+ E2CC ED 92 38    >                        nextreg	SPRITE_PORT_ATTR3_REGISTER,a
 385+ E2CF                                      ShowSprite laser_sprite3 ,laser_pattern_3
 385+ E2CF 3E 12       >                        ld      a, laser_sprite3
 385+ E2D1 ED 92 34    >                        nextreg SPRITE_PORT_INDEX_REGISTER,a
 385+ E2D4 3E 8E       >                        ld      a,laser_pattern_3 | %10000000
 385+ E2D6 ED 92 38    >                        nextreg	SPRITE_PORT_ATTR3_REGISTER,a
 386+ E2D9                                      ShowSprite laser_sprite4 ,laser_pattern_4
 386+ E2D9 3E 13       >                        ld      a, laser_sprite4
 386+ E2DB ED 92 34    >                        nextreg SPRITE_PORT_INDEX_REGISTER,a
 386+ E2DE 3E 8F       >                        ld      a,laser_pattern_4 | %10000000
 386+ E2E0 ED 92 38    >                        nextreg	SPRITE_PORT_ATTR3_REGISTER,a
 387+ E2E3                                      ShowSprite laser_sprite5 ,laser_pattern_5
 387+ E2E3 3E 14       >                        ld      a, laser_sprite5
 387+ E2E5 ED 92 34    >                        nextreg SPRITE_PORT_INDEX_REGISTER,a
 387+ E2E8 3E 90       >                        ld      a,laser_pattern_5 | %10000000
 387+ E2EA ED 92 38    >                        nextreg	SPRITE_PORT_ATTR3_REGISTER,a
 388+ E2ED                                      ShowSprite laser_sprite9 ,laser_pattern_1
 388+ E2ED 3E 18       >                        ld      a, laser_sprite9
 388+ E2EF ED 92 34    >                        nextreg SPRITE_PORT_INDEX_REGISTER,a
 388+ E2F2 3E 8C       >                        ld      a,laser_pattern_1 | %10000000
 388+ E2F4 ED 92 38    >                        nextreg	SPRITE_PORT_ATTR3_REGISTER,a
 389+ E2F7                                      ShowSprite laser_sprite10,laser_pattern_2
 389+ E2F7 3E 19       >                        ld      a, laser_sprite10
 389+ E2F9 ED 92 34    >                        nextreg SPRITE_PORT_INDEX_REGISTER,a
 389+ E2FC 3E 8D       >                        ld      a,laser_pattern_2 | %10000000
 389+ E2FE ED 92 38    >                        nextreg	SPRITE_PORT_ATTR3_REGISTER,a
 390+ E301                                      ShowSprite laser_sprite11,laser_pattern_3
 390+ E301 3E 1A       >                        ld      a, laser_sprite11
 390+ E303 ED 92 34    >                        nextreg SPRITE_PORT_INDEX_REGISTER,a
 390+ E306 3E 8E       >                        ld      a,laser_pattern_3 | %10000000
 390+ E308 ED 92 38    >                        nextreg	SPRITE_PORT_ATTR3_REGISTER,a
 391+ E30B                                      ShowSprite laser_sprite12,laser_pattern_4
 391+ E30B 3E 1B       >                        ld      a, laser_sprite12
 391+ E30D ED 92 34    >                        nextreg SPRITE_PORT_INDEX_REGISTER,a
 391+ E310 3E 8F       >                        ld      a,laser_pattern_4 | %10000000
 391+ E312 ED 92 38    >                        nextreg	SPRITE_PORT_ATTR3_REGISTER,a
 392+ E315                                      ShowSprite laser_sprite13,laser_pattern_5
 392+ E315 3E 1C       >                        ld      a, laser_sprite13
 392+ E317 ED 92 34    >                        nextreg SPRITE_PORT_INDEX_REGISTER,a
 392+ E31A 3E 90       >                        ld      a,laser_pattern_5 | %10000000
 392+ E31C ED 92 38    >                        nextreg	SPRITE_PORT_ATTR3_REGISTER,a
 393+ E31F C9                                   ret
 394+ E320
 395+ E320              sprite_galactic_hide:   HideSprite galactic_cursor_sprite
 395+ E320 ED 91 34 00 >                            nextreg		SPRITE_PORT_INDEX_REGISTER,galactic_cursor_sprite
 395+ E324 ED 91 38 00 >                            nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 396+ E328                                      HideSprite galactic_cursor_sprite1
 396+ E328 ED 91 34 01 >                            nextreg		SPRITE_PORT_INDEX_REGISTER,galactic_cursor_sprite1
 396+ E32C ED 91 38 00 >                            nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 397+ E330                                      HideSprite galactic_cursor_sprite2
 397+ E330 ED 91 34 03 >                            nextreg		SPRITE_PORT_INDEX_REGISTER,galactic_cursor_sprite2
 397+ E334 ED 91 38 00 >                            nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 398+ E338 C9                                   ret
 399+ E339
 400+ E339              sprite_galactic_hyper_hide:
 401+ E339                                      HideSprite galactic_hyper_sprite
 401+ E339 ED 91 34 04 >                            nextreg		SPRITE_PORT_INDEX_REGISTER,galactic_hyper_sprite
 401+ E33D ED 91 38 00 >                            nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 402+ E341                                       ;nextreg		SPRITE_PORT_INDEX_REGISTER,galactic_hyper_sprite1
 403+ E341              ;                        nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 404+ E341              ;                        nextreg		SPRITE_PORT_INDEX_REGISTER,galactic_hyper_sprite2
 405+ E341              ;                        nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 406+ E341 C9                                   ret
 407+ E342
 408+ E342              sprite_local_hide:      HideSprite local_cursor_sprite
 408+ E342 ED 91 34 05 >                            nextreg		SPRITE_PORT_INDEX_REGISTER,local_cursor_sprite
 408+ E346 ED 91 38 00 >                            nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 409+ E34A                                      HideSprite local_cursor_sprite1
 409+ E34A ED 91 34 06 >                            nextreg		SPRITE_PORT_INDEX_REGISTER,local_cursor_sprite1
 409+ E34E ED 91 38 00 >                            nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 410+ E352                                      HideSprite local_cursor_sprite2
 410+ E352 ED 91 34 07 >                            nextreg		SPRITE_PORT_INDEX_REGISTER,local_cursor_sprite2
 410+ E356 ED 91 38 00 >                            nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 411+ E35A C9                                   ret
 412+ E35B
 413+ E35B              sprite_local_hyper_hide:HideSprite local_hyper_sprite
 413+ E35B ED 91 34 08 >                            nextreg		SPRITE_PORT_INDEX_REGISTER,local_hyper_sprite
 413+ E35F ED 91 38 00 >                            nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 414+ E363                                      HideSprite local_hyper_sprite1
 414+ E363 ED 91 34 09 >                            nextreg		SPRITE_PORT_INDEX_REGISTER,local_hyper_sprite1
 414+ E367 ED 91 38 00 >                            nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 415+ E36B                                      HideSprite local_hyper_sprite2
 415+ E36B ED 91 34 0B >                            nextreg		SPRITE_PORT_INDEX_REGISTER,local_hyper_sprite2
 415+ E36F ED 91 38 00 >                            nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 416+ E373 C9                                   ret
 417+ E374
 418+ E374              sprite_reticule_hide:   HideSprite reticlule_sprite1
 418+ E374 ED 91 34 0C >                            nextreg		SPRITE_PORT_INDEX_REGISTER,reticlule_sprite1
 418+ E378 ED 91 38 00 >                            nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 419+ E37C                                      HideSprite reticlule_sprite2
 419+ E37C ED 91 34 0D >                            nextreg		SPRITE_PORT_INDEX_REGISTER,reticlule_sprite2
 419+ E380 ED 91 38 00 >                            nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 420+ E384                                      HideSprite reticlule_sprite3
 420+ E384 ED 91 34 0E >                            nextreg		SPRITE_PORT_INDEX_REGISTER,reticlule_sprite3
 420+ E388 ED 91 38 00 >                            nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 421+ E38C                                      HideSprite reticlule_sprite4
 421+ E38C ED 91 34 0F >                            nextreg		SPRITE_PORT_INDEX_REGISTER,reticlule_sprite4
 421+ E390 ED 91 38 00 >                            nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 422+ E394 C9                                   ret
 423+ E395
 424+ E395              sprite_laser_hide:      HideSprite laser_sprite1
 424+ E395 ED 91 34 10 >                            nextreg		SPRITE_PORT_INDEX_REGISTER,laser_sprite1
 424+ E399 ED 91 38 00 >                            nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 425+ E39D                                      HideSprite laser_sprite2
 425+ E39D ED 91 34 11 >                            nextreg		SPRITE_PORT_INDEX_REGISTER,laser_sprite2
 425+ E3A1 ED 91 38 00 >                            nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 426+ E3A5                                      HideSprite laser_sprite3
 426+ E3A5 ED 91 34 12 >                            nextreg		SPRITE_PORT_INDEX_REGISTER,laser_sprite3
 426+ E3A9 ED 91 38 00 >                            nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 427+ E3AD                                      HideSprite laser_sprite4
 427+ E3AD ED 91 34 13 >                            nextreg		SPRITE_PORT_INDEX_REGISTER,laser_sprite4
 427+ E3B1 ED 91 38 00 >                            nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 428+ E3B5                                      HideSprite laser_sprite5
 428+ E3B5 ED 91 34 14 >                            nextreg		SPRITE_PORT_INDEX_REGISTER,laser_sprite5
 428+ E3B9 ED 91 38 00 >                            nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 429+ E3BD                                      HideSprite laser_sprite6
 429+ E3BD ED 91 34 15 >                            nextreg		SPRITE_PORT_INDEX_REGISTER,laser_sprite6
 429+ E3C1 ED 91 38 00 >                            nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 430+ E3C5                                      HideSprite laser_sprite7
 430+ E3C5 ED 91 34 16 >                            nextreg		SPRITE_PORT_INDEX_REGISTER,laser_sprite7
 430+ E3C9 ED 91 38 00 >                            nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 431+ E3CD                                      HideSprite laser_sprite8
 431+ E3CD ED 91 34 17 >                            nextreg		SPRITE_PORT_INDEX_REGISTER,laser_sprite8
 431+ E3D1 ED 91 38 00 >                            nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 432+ E3D5                                      HideSprite laser_sprite9
 432+ E3D5 ED 91 34 18 >                            nextreg		SPRITE_PORT_INDEX_REGISTER,laser_sprite9
 432+ E3D9 ED 91 38 00 >                            nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 433+ E3DD                                      HideSprite laser_sprite10
 433+ E3DD ED 91 34 19 >                            nextreg		SPRITE_PORT_INDEX_REGISTER,laser_sprite10
 433+ E3E1 ED 91 38 00 >                            nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 434+ E3E5                                      HideSprite laser_sprite11
 434+ E3E5 ED 91 34 1A >                            nextreg		SPRITE_PORT_INDEX_REGISTER,laser_sprite11
 434+ E3E9 ED 91 38 00 >                            nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 435+ E3ED                                      HideSprite laser_sprite12
 435+ E3ED ED 91 34 1B >                            nextreg		SPRITE_PORT_INDEX_REGISTER,laser_sprite12
 435+ E3F1 ED 91 38 00 >                            nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 436+ E3F5                                      HideSprite laser_sprite13
 436+ E3F5 ED 91 34 1C >                            nextreg		SPRITE_PORT_INDEX_REGISTER,laser_sprite13
 436+ E3F9 ED 91 38 00 >                            nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 437+ E3FD                                      HideSprite laser_sprite14
 437+ E3FD ED 91 34 1D >                            nextreg		SPRITE_PORT_INDEX_REGISTER,laser_sprite14
 437+ E401 ED 91 38 00 >                            nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 438+ E405                                      HideSprite laser_sprite15
 438+ E405 ED 91 34 1E >                            nextreg		SPRITE_PORT_INDEX_REGISTER,laser_sprite15
 438+ E409 ED 91 38 00 >                            nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 439+ E40D                                      HideSprite laser_sprite16
 439+ E40D ED 91 34 1F >                            nextreg		SPRITE_PORT_INDEX_REGISTER,laser_sprite16
 439+ E411 ED 91 38 00 >                            nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 440+ E415 C9                                   ret
 441+ E416
 442+ E416              sprite_compass_hide:    HideSprite compass_sun
 442+ E416 ED 91 34 20 >                            nextreg		SPRITE_PORT_INDEX_REGISTER,compass_sun
 442+ E41A ED 91 38 00 >                            nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 443+ E41E                                      HideSprite compass_station
 443+ E41E ED 91 34 21 >                            nextreg		SPRITE_PORT_INDEX_REGISTER,compass_station
 443+ E422 ED 91 38 00 >                            nextreg		SPRITE_PORT_ATTR3_REGISTER,$00
 444+ E426 C9                                   ret
 445+ E427
 446+ E427 CD 20 E3     sprite_cls_cursors:     call	sprite_galactic_hide
 447+ E42A CD 39 E3                             call	sprite_galactic_hyper_hide
 448+ E42D CD 42 E3                             call	sprite_local_hide
 449+ E430 CD 5B E3                             call	sprite_local_hyper_hide
 450+ E433 CD 74 E3                             call    sprite_reticule_hide
 451+ E436 CD 95 E3                             call    sprite_laser_hide
 452+ E439 CD 16 E4                             call    sprite_compass_hide
 453+ E43C C9                                   ret
 454+ E43D
 455+ E43D CD 27 E4     init_sprites:           call		sprite_cls_cursors
 456+ E440 ED 91 15 43                          nextreg 	SPRITE_LAYERS_SYSTEM_REGISTER,%01000011
 457+ E444 C9                                   ret
 458+ E445
# file closed: ./Layer3Sprites/sprite_routines.asm
1315  E445                  INCLUDE "./Layer3Sprites/sprite_load.asm"
# file opened: ./Layer3Sprites/sprite_load.asm
   1+ E445 01 3B 30     sprite_load_sprite_data:ld			bc, $303B; SPRITE_SLOT_PORT
   2+ E448 AF                                   xor			a
   3+ E449 ED 79                                out			(c),a							; Prime slot upload
   4+ E44B 11 00 1A                             ld			de,26	* 256						; nbr of sprites to upload
   5+ E44E 21 5C E4                             ld			hl,Sprite1						; sprites are stored contiguous
   6+ E451 01 5B 00     SpriteLoadLoop:	        ld			bc, $5b; SPRITE_PATTERN_UPLOAD_PORT
   7+ E454 ED 90                                outinb											; do final 256th sprite
   8+ E456 1B                                   dec			de
   9+ E457 7A                                   ld			a,d
  10+ E458 B3                                   or			e
  11+ E459 20 F6                                jr			nz,SpriteLoadLoop				; keep on rolling through sprites
  12+ E45B C9                                   ret
  13+ E45C
# file closed: ./Layer3Sprites/sprite_load.asm
1316  E45C                  INCLUDE "./Layer3Sprites/SpriteSheet.asm"
# file opened: ./Layer3Sprites/SpriteSheet.asm
   1+ E45C              Sprite1:
   2+ E45C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
   2+ E460 E3 E3 E3 E3
   2+ E464 E3 E3 E3 E3
   2+ E468 E3 E3 E3 E3
   3+ E46C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
   3+ E470 E3 E3 E3 E3
   3+ E474 E3 E3 E3 E3
   3+ E478 E3 E3 E3 E3
   4+ E47C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
   4+ E480 E3 E3 E3 E3
   4+ E484 E3 E3 E3 E3
   4+ E488 E3 E3 E3 E3
   5+ E48C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
   5+ E490 E3 E3 E3 E3
   5+ E494 E3 E3 E3 E3
   5+ E498 E3 E3 E3 E3
   6+ E49C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
   6+ E4A0 E3 E3 E3 E3
   6+ E4A4 E3 E3 E3 E3
   6+ E4A8 E3 E3 E3 E3
   7+ E4AC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
   7+ E4B0 E3 E3 E3 E3
   7+ E4B4 E3 E3 E3 E3
   7+ E4B8 E3 E3 E3 E3
   8+ E4BC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
   8+ E4C0 E3 E3 E3 E3
   8+ E4C4 E3 E3 E3 E3
   8+ E4C8 E3 E3 E3 E3
   9+ E4CC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
   9+ E4D0 E3 E3 E3 E3
   9+ E4D4 E3 E3 E3 E3
   9+ E4D8 E3 E3 E3 E3
  10+ E4DC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $90;
  10+ E4E0 E3 E3 E3 E3
  10+ E4E4 E3 E3 E3 E3
  10+ E4E8 E3 E3 E3 90
  11+ E4EC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $B4;
  11+ E4F0 E3 E3 E3 E3
  11+ E4F4 E3 E3 E3 E3
  11+ E4F8 E3 E3 E3 B4
  12+ E4FC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $B4;
  12+ E500 E3 E3 E3 E3
  12+ E504 E3 E3 E3 E3
  12+ E508 E3 E3 E3 B4
  13+ E50C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $D8;
  13+ E510 E3 E3 E3 E3
  13+ E514 E3 E3 E3 E3
  13+ E518 E3 E3 E3 D8
  14+ E51C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $D8;
  14+ E520 E3 E3 E3 E3
  14+ E524 E3 E3 E3 E3
  14+ E528 E3 E3 E3 D8
  15+ E52C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $FC;
  15+ E530 E3 E3 E3 E3
  15+ E534 E3 E3 E3 E3
  15+ E538 E3 E3 E3 FC
  16+ E53C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $FC;
  16+ E540 E3 E3 E3 E3
  16+ E544 E3 E3 E3 E3
  16+ E548 E3 E3 E3 FC
  17+ E54C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $90, $B4, $B4, $D8, $D8, $FC, $FC, $E3;
  17+ E550 E3 E3 E3 E3
  17+ E554 90 B4 B4 D8
  17+ E558 D8 FC FC E3
  18+ E55C
  19+ E55C
  20+ E55C
  21+ E55C              Sprite2:
  22+ E55C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  22+ E560 E3 E3 E3 E3
  22+ E564 E3 E3 E3 E3
  22+ E568 E3 E3 E3 E3
  23+ E56C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  23+ E570 E3 E3 E3 E3
  23+ E574 E3 E3 E3 E3
  23+ E578 E3 E3 E3 E3
  24+ E57C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  24+ E580 E3 E3 E3 E3
  24+ E584 E3 E3 E3 E3
  24+ E588 E3 E3 E3 E3
  25+ E58C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  25+ E590 E3 E3 E3 E3
  25+ E594 E3 E3 E3 E3
  25+ E598 E3 E3 E3 E3
  26+ E59C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  26+ E5A0 E3 E3 E3 E3
  26+ E5A4 E3 E3 E3 E3
  26+ E5A8 E3 E3 E3 E3
  27+ E5AC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  27+ E5B0 E3 E3 E3 E3
  27+ E5B4 E3 E3 E3 E3
  27+ E5B8 E3 E3 E3 E3
  28+ E5BC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  28+ E5C0 E3 E3 E3 E3
  28+ E5C4 E3 E3 E3 E3
  28+ E5C8 E3 E3 E3 E3
  29+ E5CC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  29+ E5D0 E3 E3 E3 E3
  29+ E5D4 E3 E3 E3 E3
  29+ E5D8 E3 E3 E3 E3
  30+ E5DC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  30+ E5E0 E3 E3 E3 E3
  30+ E5E4 E3 E3 E3 E3
  30+ E5E8 E3 E3 E3 E3
  31+ E5EC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  31+ E5F0 E3 E3 E3 E3
  31+ E5F4 E3 E3 E3 E3
  31+ E5F8 E3 E3 E3 E3
  32+ E5FC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  32+ E600 E3 E3 E3 E3
  32+ E604 E3 E3 E3 E3
  32+ E608 E3 E3 E3 E3
  33+ E60C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  33+ E610 E3 E3 E3 E3
  33+ E614 E3 E3 E3 E3
  33+ E618 E3 E3 E3 E3
  34+ E61C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  34+ E620 E3 E3 E3 E3
  34+ E624 E3 E3 E3 E3
  34+ E628 E3 E3 E3 E3
  35+ E62C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  35+ E630 E3 E3 E3 E3
  35+ E634 E3 E3 E3 E3
  35+ E638 E3 E3 E3 E3
  36+ E63C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  36+ E640 E3 E3 E3 E3
  36+ E644 E3 E3 E3 E3
  36+ E648 E3 E3 E3 E3
  37+ E64C FC FC D8 D8  	db  $FC, $FC, $D8, $D8, $B4, $B4, $90, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  37+ E650 B4 B4 90 E3
  37+ E654 E3 E3 E3 E3
  37+ E658 E3 E3 E3 E3
  38+ E65C
  39+ E65C
  40+ E65C
  41+ E65C              Sprite3:
  42+ E65C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $FC;
  42+ E660 E3 E3 E3 E3
  42+ E664 E3 E3 E3 E3
  42+ E668 E3 E3 E3 FC
  43+ E66C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $FC;
  43+ E670 E3 E3 E3 E3
  43+ E674 E3 E3 E3 E3
  43+ E678 E3 E3 E3 FC
  44+ E67C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $D8;
  44+ E680 E3 E3 E3 E3
  44+ E684 E3 E3 E3 E3
  44+ E688 E3 E3 E3 D8
  45+ E68C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $D8;
  45+ E690 E3 E3 E3 E3
  45+ E694 E3 E3 E3 E3
  45+ E698 E3 E3 E3 D8
  46+ E69C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $B4;
  46+ E6A0 E3 E3 E3 E3
  46+ E6A4 E3 E3 E3 E3
  46+ E6A8 E3 E3 E3 B4
  47+ E6AC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $B4;
  47+ E6B0 E3 E3 E3 E3
  47+ E6B4 E3 E3 E3 E3
  47+ E6B8 E3 E3 E3 B4
  48+ E6BC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $90;
  48+ E6C0 E3 E3 E3 E3
  48+ E6C4 E3 E3 E3 E3
  48+ E6C8 E3 E3 E3 90
  49+ E6CC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  49+ E6D0 E3 E3 E3 E3
  49+ E6D4 E3 E3 E3 E3
  49+ E6D8 E3 E3 E3 E3
  50+ E6DC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  50+ E6E0 E3 E3 E3 E3
  50+ E6E4 E3 E3 E3 E3
  50+ E6E8 E3 E3 E3 E3
  51+ E6EC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  51+ E6F0 E3 E3 E3 E3
  51+ E6F4 E3 E3 E3 E3
  51+ E6F8 E3 E3 E3 E3
  52+ E6FC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  52+ E700 E3 E3 E3 E3
  52+ E704 E3 E3 E3 E3
  52+ E708 E3 E3 E3 E3
  53+ E70C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  53+ E710 E3 E3 E3 E3
  53+ E714 E3 E3 E3 E3
  53+ E718 E3 E3 E3 E3
  54+ E71C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  54+ E720 E3 E3 E3 E3
  54+ E724 E3 E3 E3 E3
  54+ E728 E3 E3 E3 E3
  55+ E72C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  55+ E730 E3 E3 E3 E3
  55+ E734 E3 E3 E3 E3
  55+ E738 E3 E3 E3 E3
  56+ E73C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  56+ E740 E3 E3 E3 E3
  56+ E744 E3 E3 E3 E3
  56+ E748 E3 E3 E3 E3
  57+ E74C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  57+ E750 E3 E3 E3 E3
  57+ E754 E3 E3 E3 E3
  57+ E758 E3 E3 E3 E3
  58+ E75C
  59+ E75C
  60+ E75C
  61+ E75C              Sprite4:
  62+ E75C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $12, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  62+ E760 12 E3 E3 E3
  62+ E764 E3 E3 E3 E3
  62+ E768 E3 E3 E3 E3
  63+ E76C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $16, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  63+ E770 16 E3 E3 E3
  63+ E774 E3 E3 E3 E3
  63+ E778 E3 E3 E3 E3
  64+ E77C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $1A, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  64+ E780 1A E3 E3 E3
  64+ E784 E3 E3 E3 E3
  64+ E788 E3 E3 E3 E3
  65+ E78C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $1F, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  65+ E790 1F E3 E3 E3
  65+ E794 E3 E3 E3 E3
  65+ E798 E3 E3 E3 E3
  66+ E79C 12 16 1A 1F  	db  $12, $16, $1A, $1F, $E3, $1F, $1A, $16, $12, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  66+ E7A0 E3 1F 1A 16
  66+ E7A4 12 E3 E3 E3
  66+ E7A8 E3 E3 E3 E3
  67+ E7AC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $1F, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  67+ E7B0 1F E3 E3 E3
  67+ E7B4 E3 E3 E3 E3
  67+ E7B8 E3 E3 E3 E3
  68+ E7BC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $1A, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  68+ E7C0 1A E3 E3 E3
  68+ E7C4 E3 E3 E3 E3
  68+ E7C8 E3 E3 E3 E3
  69+ E7CC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $16, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  69+ E7D0 16 E3 E3 E3
  69+ E7D4 E3 E3 E3 E3
  69+ E7D8 E3 E3 E3 E3
  70+ E7DC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $12, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  70+ E7E0 12 E3 E3 E3
  70+ E7E4 E3 E3 E3 E3
  70+ E7E8 E3 E3 E3 E3
  71+ E7EC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  71+ E7F0 E3 E3 E3 E3
  71+ E7F4 E3 E3 E3 E3
  71+ E7F8 E3 E3 E3 E3
  72+ E7FC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  72+ E800 E3 E3 E3 E3
  72+ E804 E3 E3 E3 E3
  72+ E808 E3 E3 E3 E3
  73+ E80C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  73+ E810 E3 E3 E3 E3
  73+ E814 E3 E3 E3 E3
  73+ E818 E3 E3 E3 E3
  74+ E81C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  74+ E820 E3 E3 E3 E3
  74+ E824 E3 E3 E3 E3
  74+ E828 E3 E3 E3 E3
  75+ E82C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  75+ E830 E3 E3 E3 E3
  75+ E834 E3 E3 E3 E3
  75+ E838 E3 E3 E3 E3
  76+ E83C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  76+ E840 E3 E3 E3 E3
  76+ E844 E3 E3 E3 E3
  76+ E848 E3 E3 E3 E3
  77+ E84C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  77+ E850 E3 E3 E3 E3
  77+ E854 E3 E3 E3 E3
  77+ E858 E3 E3 E3 E3
  78+ E85C
  79+ E85C
  80+ E85C
  81+ E85C              Sprite5:
  82+ E85C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
  82+ E860 E3 E3 E3 E3
  82+ E864 E3 E3 E3 E3
  82+ E868 E3 E3 E3 E3
  83+ E86C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $09;
  83+ E870 E3 E3 E3 E3
  83+ E874 E3 E3 E3 E3
  83+ E878 E3 E3 E3 09
  84+ E87C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $09;
  84+ E880 E3 E3 E3 E3
  84+ E884 E3 E3 E3 E3
  84+ E888 E3 E3 E3 09
  85+ E88C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $2C;
  85+ E890 E3 E3 E3 E3
  85+ E894 E3 E3 E3 E3
  85+ E898 E3 E3 E3 2C
  86+ E89C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $2C;
  86+ E8A0 E3 E3 E3 E3
  86+ E8A4 E3 E3 E3 E3
  86+ E8A8 E3 E3 E3 2C
  87+ E8AC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $50;
  87+ E8B0 E3 E3 E3 E3
  87+ E8B4 E3 E3 E3 E3
  87+ E8B8 E3 E3 E3 50
  88+ E8BC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $50;
  88+ E8C0 E3 E3 E3 E3
  88+ E8C4 E3 E3 E3 E3
  88+ E8C8 E3 E3 E3 50
  89+ E8CC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $50;
  89+ E8D0 E3 E3 E3 E3
  89+ E8D4 E3 E3 E3 E3
  89+ E8D8 E3 E3 E3 50
  90+ E8DC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $15;
  90+ E8E0 E3 E3 E3 E3
  90+ E8E4 E3 E3 E3 E3
  90+ E8E8 E3 E3 E3 15
  91+ E8EC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $15;
  91+ E8F0 E3 E3 E3 E3
  91+ E8F4 E3 E3 E3 E3
  91+ E8F8 E3 E3 E3 15
  92+ E8FC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $15;
  92+ E900 E3 E3 E3 E3
  92+ E904 E3 E3 E3 E3
  92+ E908 E3 E3 E3 15
  93+ E90C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $7C;
  93+ E910 E3 E3 E3 E3
  93+ E914 E3 E3 E3 E3
  93+ E918 E3 E3 E3 7C
  94+ E91C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $7C;
  94+ E920 E3 E3 E3 E3
  94+ E924 E3 E3 E3 E3
  94+ E928 E3 E3 E3 7C
  95+ E92C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $7C;
  95+ E930 E3 E3 E3 E3
  95+ E934 E3 E3 E3 E3
  95+ E938 E3 E3 E3 7C
  96+ E93C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $7C;
  96+ E940 E3 E3 E3 E3
  96+ E944 E3 E3 E3 E3
  96+ E948 E3 E3 E3 7C
  97+ E94C E3 09 09 2C  	db  $E3, $09, $09, $2C, $2C, $50, $50, $50, $15, $15, $15, $7C, $7C, $7C, $7C, $E3;
  97+ E950 2C 50 50 50
  97+ E954 15 15 15 7C
  97+ E958 7C 7C 7C E3
  98+ E95C
  99+ E95C
 100+ E95C
 101+ E95C              Sprite6:
 102+ E95C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 102+ E960 E3 E3 E3 E3
 102+ E964 E3 E3 E3 E3
 102+ E968 E3 E3 E3 E3
 103+ E96C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 103+ E970 E3 E3 E3 E3
 103+ E974 E3 E3 E3 E3
 103+ E978 E3 E3 E3 E3
 104+ E97C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 104+ E980 E3 E3 E3 E3
 104+ E984 E3 E3 E3 E3
 104+ E988 E3 E3 E3 E3
 105+ E98C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 105+ E990 E3 E3 E3 E3
 105+ E994 E3 E3 E3 E3
 105+ E998 E3 E3 E3 E3
 106+ E99C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 106+ E9A0 E3 E3 E3 E3
 106+ E9A4 E3 E3 E3 E3
 106+ E9A8 E3 E3 E3 E3
 107+ E9AC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 107+ E9B0 E3 E3 E3 E3
 107+ E9B4 E3 E3 E3 E3
 107+ E9B8 E3 E3 E3 E3
 108+ E9BC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 108+ E9C0 E3 E3 E3 E3
 108+ E9C4 E3 E3 E3 E3
 108+ E9C8 E3 E3 E3 E3
 109+ E9CC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 109+ E9D0 E3 E3 E3 E3
 109+ E9D4 E3 E3 E3 E3
 109+ E9D8 E3 E3 E3 E3
 110+ E9DC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 110+ E9E0 E3 E3 E3 E3
 110+ E9E4 E3 E3 E3 E3
 110+ E9E8 E3 E3 E3 E3
 111+ E9EC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 111+ E9F0 E3 E3 E3 E3
 111+ E9F4 E3 E3 E3 E3
 111+ E9F8 E3 E3 E3 E3
 112+ E9FC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 112+ EA00 E3 E3 E3 E3
 112+ EA04 E3 E3 E3 E3
 112+ EA08 E3 E3 E3 E3
 113+ EA0C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 113+ EA10 E3 E3 E3 E3
 113+ EA14 E3 E3 E3 E3
 113+ EA18 E3 E3 E3 E3
 114+ EA1C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 114+ EA20 E3 E3 E3 E3
 114+ EA24 E3 E3 E3 E3
 114+ EA28 E3 E3 E3 E3
 115+ EA2C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 115+ EA30 E3 E3 E3 E3
 115+ EA34 E3 E3 E3 E3
 115+ EA38 E3 E3 E3 E3
 116+ EA3C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 116+ EA40 E3 E3 E3 E3
 116+ EA44 E3 E3 E3 E3
 116+ EA48 E3 E3 E3 E3
 117+ EA4C 7C 7C 7C 7C  	db  $7C, $7C, $7C, $7C, $15, $15, $15, $50, $50, $50, $2C, $2C, $09, $09, $E3, $E3;
 117+ EA50 15 15 15 50
 117+ EA54 50 50 2C 2C
 117+ EA58 09 09 E3 E3
 118+ EA5C
 119+ EA5C
 120+ EA5C
 121+ EA5C              Sprite7:
 122+ EA5C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $7C;
 122+ EA60 E3 E3 E3 E3
 122+ EA64 E3 E3 E3 E3
 122+ EA68 E3 E3 E3 7C
 123+ EA6C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $7C;
 123+ EA70 E3 E3 E3 E3
 123+ EA74 E3 E3 E3 E3
 123+ EA78 E3 E3 E3 7C
 124+ EA7C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $7C;
 124+ EA80 E3 E3 E3 E3
 124+ EA84 E3 E3 E3 E3
 124+ EA88 E3 E3 E3 7C
 125+ EA8C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $7C;
 125+ EA90 E3 E3 E3 E3
 125+ EA94 E3 E3 E3 E3
 125+ EA98 E3 E3 E3 7C
 126+ EA9C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $15;
 126+ EAA0 E3 E3 E3 E3
 126+ EAA4 E3 E3 E3 E3
 126+ EAA8 E3 E3 E3 15
 127+ EAAC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $15;
 127+ EAB0 E3 E3 E3 E3
 127+ EAB4 E3 E3 E3 E3
 127+ EAB8 E3 E3 E3 15
 128+ EABC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $15;
 128+ EAC0 E3 E3 E3 E3
 128+ EAC4 E3 E3 E3 E3
 128+ EAC8 E3 E3 E3 15
 129+ EACC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $50;
 129+ EAD0 E3 E3 E3 E3
 129+ EAD4 E3 E3 E3 E3
 129+ EAD8 E3 E3 E3 50
 130+ EADC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $50;
 130+ EAE0 E3 E3 E3 E3
 130+ EAE4 E3 E3 E3 E3
 130+ EAE8 E3 E3 E3 50
 131+ EAEC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $50;
 131+ EAF0 E3 E3 E3 E3
 131+ EAF4 E3 E3 E3 E3
 131+ EAF8 E3 E3 E3 50
 132+ EAFC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $2C;
 132+ EB00 E3 E3 E3 E3
 132+ EB04 E3 E3 E3 E3
 132+ EB08 E3 E3 E3 2C
 133+ EB0C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $2C;
 133+ EB10 E3 E3 E3 E3
 133+ EB14 E3 E3 E3 E3
 133+ EB18 E3 E3 E3 2C
 134+ EB1C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $09;
 134+ EB20 E3 E3 E3 E3
 134+ EB24 E3 E3 E3 E3
 134+ EB28 E3 E3 E3 09
 135+ EB2C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $09;
 135+ EB30 E3 E3 E3 E3
 135+ EB34 E3 E3 E3 E3
 135+ EB38 E3 E3 E3 09
 136+ EB3C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 136+ EB40 E3 E3 E3 E3
 136+ EB44 E3 E3 E3 E3
 136+ EB48 E3 E3 E3 E3
 137+ EB4C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 137+ EB50 E3 E3 E3 E3
 137+ EB54 E3 E3 E3 E3
 137+ EB58 E3 E3 E3 E3
 138+ EB5C
 139+ EB5C
 140+ EB5C
 141+ EB5C              Sprite8:
 142+ EB5C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 142+ EB60 E3 E3 E3 E3
 142+ EB64 E3 E3 E3 E3
 142+ EB68 E3 E3 E3 E3
 143+ EB6C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $44;
 143+ EB70 E3 E3 E3 E3
 143+ EB74 E3 E3 E3 E3
 143+ EB78 E3 E3 E3 44
 144+ EB7C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $64;
 144+ EB80 E3 E3 E3 E3
 144+ EB84 E3 E3 E3 E3
 144+ EB88 E3 E3 E3 64
 145+ EB8C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $64;
 145+ EB90 E3 E3 E3 E3
 145+ EB94 E3 E3 E3 E3
 145+ EB98 E3 E3 E3 64
 146+ EB9C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $64;
 146+ EBA0 E3 E3 E3 E3
 146+ EBA4 E3 E3 E3 E3
 146+ EBA8 E3 E3 E3 64
 147+ EBAC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $A8;
 147+ EBB0 E3 E3 E3 E3
 147+ EBB4 E3 E3 E3 E3
 147+ EBB8 E3 E3 E3 A8
 148+ EBBC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $A8;
 148+ EBC0 E3 E3 E3 E3
 148+ EBC4 E3 E3 E3 E3
 148+ EBC8 E3 E3 E3 A8
 149+ EBCC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $A8;
 149+ EBD0 E3 E3 E3 E3
 149+ EBD4 E3 E3 E3 E3
 149+ EBD8 E3 E3 E3 A8
 150+ EBDC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $CC;
 150+ EBE0 E3 E3 E3 E3
 150+ EBE4 E3 E3 E3 E3
 150+ EBE8 E3 E3 E3 CC
 151+ EBEC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $CC;
 151+ EBF0 E3 E3 E3 E3
 151+ EBF4 E3 E3 E3 E3
 151+ EBF8 E3 E3 E3 CC
 152+ EBFC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $CC;
 152+ EC00 E3 E3 E3 E3
 152+ EC04 E3 E3 E3 E3
 152+ EC08 E3 E3 E3 CC
 153+ EC0C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $EC;
 153+ EC10 E3 E3 E3 E3
 153+ EC14 E3 E3 E3 E3
 153+ EC18 E3 E3 E3 EC
 154+ EC1C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $EC;
 154+ EC20 E3 E3 E3 E3
 154+ EC24 E3 E3 E3 E3
 154+ EC28 E3 E3 E3 EC
 155+ EC2C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $EC;
 155+ EC30 E3 E3 E3 E3
 155+ EC34 E3 E3 E3 E3
 155+ EC38 E3 E3 E3 EC
 156+ EC3C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $EC;
 156+ EC40 E3 E3 E3 E3
 156+ EC44 E3 E3 E3 E3
 156+ EC48 E3 E3 E3 EC
 157+ EC4C E3 44 64 64  	db  $E3, $44, $64, $64, $64, $A8, $A8, $A8, $CC, $CC, $CC, $EC, $EC, $EC, $EC, $E3;
 157+ EC50 64 A8 A8 A8
 157+ EC54 CC CC CC EC
 157+ EC58 EC EC EC E3
 158+ EC5C
 159+ EC5C
 160+ EC5C
 161+ EC5C              Sprite9:
 162+ EC5C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 162+ EC60 E3 E3 E3 E3
 162+ EC64 E3 E3 E3 E3
 162+ EC68 E3 E3 E3 E3
 163+ EC6C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 163+ EC70 E3 E3 E3 E3
 163+ EC74 E3 E3 E3 E3
 163+ EC78 E3 E3 E3 E3
 164+ EC7C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 164+ EC80 E3 E3 E3 E3
 164+ EC84 E3 E3 E3 E3
 164+ EC88 E3 E3 E3 E3
 165+ EC8C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 165+ EC90 E3 E3 E3 E3
 165+ EC94 E3 E3 E3 E3
 165+ EC98 E3 E3 E3 E3
 166+ EC9C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 166+ ECA0 E3 E3 E3 E3
 166+ ECA4 E3 E3 E3 E3
 166+ ECA8 E3 E3 E3 E3
 167+ ECAC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 167+ ECB0 E3 E3 E3 E3
 167+ ECB4 E3 E3 E3 E3
 167+ ECB8 E3 E3 E3 E3
 168+ ECBC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 168+ ECC0 E3 E3 E3 E3
 168+ ECC4 E3 E3 E3 E3
 168+ ECC8 E3 E3 E3 E3
 169+ ECCC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 169+ ECD0 E3 E3 E3 E3
 169+ ECD4 E3 E3 E3 E3
 169+ ECD8 E3 E3 E3 E3
 170+ ECDC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 170+ ECE0 E3 E3 E3 E3
 170+ ECE4 E3 E3 E3 E3
 170+ ECE8 E3 E3 E3 E3
 171+ ECEC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 171+ ECF0 E3 E3 E3 E3
 171+ ECF4 E3 E3 E3 E3
 171+ ECF8 E3 E3 E3 E3
 172+ ECFC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 172+ ED00 E3 E3 E3 E3
 172+ ED04 E3 E3 E3 E3
 172+ ED08 E3 E3 E3 E3
 173+ ED0C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 173+ ED10 E3 E3 E3 E3
 173+ ED14 E3 E3 E3 E3
 173+ ED18 E3 E3 E3 E3
 174+ ED1C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 174+ ED20 E3 E3 E3 E3
 174+ ED24 E3 E3 E3 E3
 174+ ED28 E3 E3 E3 E3
 175+ ED2C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 175+ ED30 E3 E3 E3 E3
 175+ ED34 E3 E3 E3 E3
 175+ ED38 E3 E3 E3 E3
 176+ ED3C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 176+ ED40 E3 E3 E3 E3
 176+ ED44 E3 E3 E3 E3
 176+ ED48 E3 E3 E3 E3
 177+ ED4C EC EC EC EC  	db  $EC, $EC, $EC, $EC, $CC, $CC, $CC, $A8, $A8, $A8, $64, $64, $64, $44, $E3, $E3;
 177+ ED50 CC CC CC A8
 177+ ED54 A8 A8 64 64
 177+ ED58 64 44 E3 E3
 178+ ED5C
 179+ ED5C
 180+ ED5C
 181+ ED5C              Sprite10:
 182+ ED5C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $EC;
 182+ ED60 E3 E3 E3 E3
 182+ ED64 E3 E3 E3 E3
 182+ ED68 E3 E3 E3 EC
 183+ ED6C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $EC;
 183+ ED70 E3 E3 E3 E3
 183+ ED74 E3 E3 E3 E3
 183+ ED78 E3 E3 E3 EC
 184+ ED7C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $EC;
 184+ ED80 E3 E3 E3 E3
 184+ ED84 E3 E3 E3 E3
 184+ ED88 E3 E3 E3 EC
 185+ ED8C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $EC;
 185+ ED90 E3 E3 E3 E3
 185+ ED94 E3 E3 E3 E3
 185+ ED98 E3 E3 E3 EC
 186+ ED9C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $CC;
 186+ EDA0 E3 E3 E3 E3
 186+ EDA4 E3 E3 E3 E3
 186+ EDA8 E3 E3 E3 CC
 187+ EDAC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $CC;
 187+ EDB0 E3 E3 E3 E3
 187+ EDB4 E3 E3 E3 E3
 187+ EDB8 E3 E3 E3 CC
 188+ EDBC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $CC;
 188+ EDC0 E3 E3 E3 E3
 188+ EDC4 E3 E3 E3 E3
 188+ EDC8 E3 E3 E3 CC
 189+ EDCC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $A8;
 189+ EDD0 E3 E3 E3 E3
 189+ EDD4 E3 E3 E3 E3
 189+ EDD8 E3 E3 E3 A8
 190+ EDDC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $A8;
 190+ EDE0 E3 E3 E3 E3
 190+ EDE4 E3 E3 E3 E3
 190+ EDE8 E3 E3 E3 A8
 191+ EDEC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $A8;
 191+ EDF0 E3 E3 E3 E3
 191+ EDF4 E3 E3 E3 E3
 191+ EDF8 E3 E3 E3 A8
 192+ EDFC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $64;
 192+ EE00 E3 E3 E3 E3
 192+ EE04 E3 E3 E3 E3
 192+ EE08 E3 E3 E3 64
 193+ EE0C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $64;
 193+ EE10 E3 E3 E3 E3
 193+ EE14 E3 E3 E3 E3
 193+ EE18 E3 E3 E3 64
 194+ EE1C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $64;
 194+ EE20 E3 E3 E3 E3
 194+ EE24 E3 E3 E3 E3
 194+ EE28 E3 E3 E3 64
 195+ EE2C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $44;
 195+ EE30 E3 E3 E3 E3
 195+ EE34 E3 E3 E3 E3
 195+ EE38 E3 E3 E3 44
 196+ EE3C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 196+ EE40 E3 E3 E3 E3
 196+ EE44 E3 E3 E3 E3
 196+ EE48 E3 E3 E3 E3
 197+ EE4C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 197+ EE50 E3 E3 E3 E3
 197+ EE54 E3 E3 E3 E3
 197+ EE58 E3 E3 E3 E3
 198+ EE5C
 199+ EE5C
 200+ EE5C
 201+ EE5C              Sprite11:
 202+ EE5C 92 E3 E3 E3  	db  $92, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 202+ EE60 E3 E3 E3 E3
 202+ EE64 E3 E3 E3 E3
 202+ EE68 E3 E3 E3 E3
 203+ EE6C 92 E3 E3 E3  	db  $92, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 203+ EE70 E3 E3 E3 E3
 203+ EE74 E3 E3 E3 E3
 203+ EE78 E3 E3 E3 E3
 204+ EE7C FF E3 E3 E3  	db  $FF, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 204+ EE80 E3 E3 E3 E3
 204+ EE84 E3 E3 E3 E3
 204+ EE88 E3 E3 E3 E3
 205+ EE8C FF E3 E3 E3  	db  $FF, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 205+ EE90 E3 E3 E3 E3
 205+ EE94 E3 E3 E3 E3
 205+ EE98 E3 E3 E3 E3
 206+ EE9C FF E3 E3 E3  	db  $FF, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 206+ EEA0 E3 E3 E3 E3
 206+ EEA4 E3 E3 E3 E3
 206+ EEA8 E3 E3 E3 E3
 207+ EEAC FF E3 E3 E3  	db  $FF, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 207+ EEB0 E3 E3 E3 E3
 207+ EEB4 E3 E3 E3 E3
 207+ EEB8 E3 E3 E3 E3
 208+ EEBC FF E3 E3 E3  	db  $FF, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 208+ EEC0 E3 E3 E3 E3
 208+ EEC4 E3 E3 E3 E3
 208+ EEC8 E3 E3 E3 E3
 209+ EECC FF E3 E3 E3  	db  $FF, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 209+ EED0 E3 E3 E3 E3
 209+ EED4 E3 E3 E3 E3
 209+ EED8 E3 E3 E3 E3
 210+ EEDC FF E3 E3 E3  	db  $FF, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 210+ EEE0 E3 E3 E3 E3
 210+ EEE4 E3 E3 E3 E3
 210+ EEE8 E3 E3 E3 E3
 211+ EEEC FF E3 E3 E3  	db  $FF, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 211+ EEF0 E3 E3 E3 E3
 211+ EEF4 E3 E3 E3 E3
 211+ EEF8 E3 E3 E3 E3
 212+ EEFC FF E3 E3 E3  	db  $FF, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 212+ EF00 E3 E3 E3 E3
 212+ EF04 E3 E3 E3 E3
 212+ EF08 E3 E3 E3 E3
 213+ EF0C FF E3 E3 E3  	db  $FF, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 213+ EF10 E3 E3 E3 E3
 213+ EF14 E3 E3 E3 E3
 213+ EF18 E3 E3 E3 E3
 214+ EF1C FF E3 E3 E3  	db  $FF, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 214+ EF20 E3 E3 E3 E3
 214+ EF24 E3 E3 E3 E3
 214+ EF28 E3 E3 E3 E3
 215+ EF2C FF E3 E3 E3  	db  $FF, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 215+ EF30 E3 E3 E3 E3
 215+ EF34 E3 E3 E3 E3
 215+ EF38 E3 E3 E3 E3
 216+ EF3C FF E3 E3 E3  	db  $FF, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 216+ EF40 E3 E3 E3 E3
 216+ EF44 E3 E3 E3 E3
 216+ EF48 E3 E3 E3 E3
 217+ EF4C FF E3 E3 E3  	db  $FF, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 217+ EF50 E3 E3 E3 E3
 217+ EF54 E3 E3 E3 E3
 217+ EF58 E3 E3 E3 E3
 218+ EF5C
 219+ EF5C
 220+ EF5C
 221+ EF5C              Sprite12:
 222+ EF5C 92 92 FF FF  	db  $92, $92, $FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF;
 222+ EF60 FF FF FF FF
 222+ EF64 FF FF FF FF
 222+ EF68 FF FF FF FF
 223+ EF6C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 223+ EF70 E3 E3 E3 E3
 223+ EF74 E3 E3 E3 E3
 223+ EF78 E3 E3 E3 E3
 224+ EF7C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 224+ EF80 E3 E3 E3 E3
 224+ EF84 E3 E3 E3 E3
 224+ EF88 E3 E3 E3 E3
 225+ EF8C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 225+ EF90 E3 E3 E3 E3
 225+ EF94 E3 E3 E3 E3
 225+ EF98 E3 E3 E3 E3
 226+ EF9C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 226+ EFA0 E3 E3 E3 E3
 226+ EFA4 E3 E3 E3 E3
 226+ EFA8 E3 E3 E3 E3
 227+ EFAC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 227+ EFB0 E3 E3 E3 E3
 227+ EFB4 E3 E3 E3 E3
 227+ EFB8 E3 E3 E3 E3
 228+ EFBC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 228+ EFC0 E3 E3 E3 E3
 228+ EFC4 E3 E3 E3 E3
 228+ EFC8 E3 E3 E3 E3
 229+ EFCC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 229+ EFD0 E3 E3 E3 E3
 229+ EFD4 E3 E3 E3 E3
 229+ EFD8 E3 E3 E3 E3
 230+ EFDC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 230+ EFE0 E3 E3 E3 E3
 230+ EFE4 E3 E3 E3 E3
 230+ EFE8 E3 E3 E3 E3
 231+ EFEC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 231+ EFF0 E3 E3 E3 E3
 231+ EFF4 E3 E3 E3 E3
 231+ EFF8 E3 E3 E3 E3
 232+ EFFC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 232+ F000 E3 E3 E3 E3
 232+ F004 E3 E3 E3 E3
 232+ F008 E3 E3 E3 E3
 233+ F00C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 233+ F010 E3 E3 E3 E3
 233+ F014 E3 E3 E3 E3
 233+ F018 E3 E3 E3 E3
 234+ F01C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 234+ F020 E3 E3 E3 E3
 234+ F024 E3 E3 E3 E3
 234+ F028 E3 E3 E3 E3
 235+ F02C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 235+ F030 E3 E3 E3 E3
 235+ F034 E3 E3 E3 E3
 235+ F038 E3 E3 E3 E3
 236+ F03C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 236+ F040 E3 E3 E3 E3
 236+ F044 E3 E3 E3 E3
 236+ F048 E3 E3 E3 E3
 237+ F04C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 237+ F050 E3 E3 E3 E3
 237+ F054 E3 E3 E3 E3
 237+ F058 E3 E3 E3 E3
 238+ F05C
 239+ F05C
 240+ F05C
 241+ F05C              Sprite13:
 242+ F05C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 242+ F060 E3 E3 E3 E3
 242+ F064 E3 E3 E3 E3
 242+ F068 E3 E3 E3 E3
 243+ F06C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 243+ F070 E3 E3 E3 E3
 243+ F074 E3 E3 E3 E3
 243+ F078 E3 E3 E3 E3
 244+ F07C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 244+ F080 E3 E3 E3 E3
 244+ F084 E3 E3 E3 E3
 244+ F088 E3 E3 E3 E3
 245+ F08C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 245+ F090 E3 E3 E3 E3
 245+ F094 E3 E3 E3 E3
 245+ F098 E3 E3 E3 E3
 246+ F09C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 246+ F0A0 E3 E3 E3 E3
 246+ F0A4 E3 E3 E3 E3
 246+ F0A8 E3 E3 E3 E3
 247+ F0AC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 247+ F0B0 E3 E3 E3 E3
 247+ F0B4 E3 E3 E3 E3
 247+ F0B8 E3 E3 E3 E3
 248+ F0BC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 248+ F0C0 E3 E3 E3 E3
 248+ F0C4 E3 E3 E3 E3
 248+ F0C8 E3 E3 E3 E3
 249+ F0CC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 249+ F0D0 E3 E3 E3 E3
 249+ F0D4 E3 E3 E3 E3
 249+ F0D8 E3 E3 E3 E3
 250+ F0DC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 250+ F0E0 E3 E3 E3 E3
 250+ F0E4 E3 E3 E3 E3
 250+ F0E8 E3 E3 E3 E3
 251+ F0EC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 251+ F0F0 E3 E3 E3 E3
 251+ F0F4 E3 E3 E3 E3
 251+ F0F8 E3 E3 E3 E3
 252+ F0FC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 252+ F100 E3 E3 E3 E3
 252+ F104 E3 E3 E3 E3
 252+ F108 E3 E3 E3 E3
 253+ F10C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $18, $18;
 253+ F110 E3 E3 E3 E3
 253+ F114 E3 E3 E3 E3
 253+ F118 E3 E3 18 18
 254+ F11C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $18, $18, $1C, $1C, $1C;
 254+ F120 E3 E3 E3 E3
 254+ F124 E3 E3 E3 18
 254+ F128 18 1C 1C 1C
 255+ F12C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $18, $18, $18, $1C, $1C, $1C, $1C, $1C;
 255+ F130 E3 E3 E3 E3
 255+ F134 18 18 18 1C
 255+ F138 1C 1C 1C 1C
 256+ F13C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $18, $18, $18, $18, $18, $1C, $1C, $1C, $1C, $1C, $1C, $1C;
 256+ F140 18 18 18 18
 256+ F144 18 1C 1C 1C
 256+ F148 1C 1C 1C 1C
 257+ F14C E3 E3 18 18  	db  $E3, $E3, $18, $18, $1C, $1C, $1C, $1C, $1C, $1C, $1C, $1C, $1C, $1C, $1C, $1C;
 257+ F150 1C 1C 1C 1C
 257+ F154 1C 1C 1C 1C
 257+ F158 1C 1C 1C 1C
 258+ F15C
 259+ F15C
 260+ F15C
 261+ F15C              Sprite14:
 262+ F15C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 262+ F160 E3 E3 E3 E3
 262+ F164 E3 E3 E3 E3
 262+ F168 E3 E3 E3 E3
 263+ F16C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 263+ F170 E3 E3 E3 E3
 263+ F174 E3 E3 E3 E3
 263+ F178 E3 E3 E3 E3
 264+ F17C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 264+ F180 E3 E3 E3 E3
 264+ F184 E3 E3 E3 E3
 264+ F188 E3 E3 E3 E3
 265+ F18C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 265+ F190 E3 E3 E3 E3
 265+ F194 E3 E3 E3 E3
 265+ F198 E3 E3 E3 E3
 266+ F19C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 266+ F1A0 E3 E3 E3 E3
 266+ F1A4 E3 E3 E3 E3
 266+ F1A8 E3 E3 E3 E3
 267+ F1AC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $18, $18;
 267+ F1B0 E3 E3 E3 E3
 267+ F1B4 E3 E3 E3 E3
 267+ F1B8 E3 E3 18 18
 268+ F1BC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $18, $18, $18, $1C, $1C;
 268+ F1C0 E3 E3 E3 E3
 268+ F1C4 E3 E3 E3 18
 268+ F1C8 18 18 1C 1C
 269+ F1CC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $18, $18, $1C, $1C, $1C, $1C, $1C;
 269+ F1D0 E3 E3 E3 E3
 269+ F1D4 E3 18 18 1C
 269+ F1D8 1C 1C 1C 1C
 270+ F1DC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $18, $18, $1C, $1C, $1C, $1C, $1C, $1C, $18;
 270+ F1E0 E3 E3 E3 18
 270+ F1E4 18 1C 1C 1C
 270+ F1E8 1C 1C 1C 18
 271+ F1EC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $18, $18, $18, $1C, $1C, $1C, $1C, $1C, $18, $18, $18, $E3;
 271+ F1F0 18 18 18 1C
 271+ F1F4 1C 1C 1C 1C
 271+ F1F8 18 18 18 E3
 272+ F1FC E3 18 18 18  	db  $E3, $18, $18, $18, $1C, $1C, $1C, $1C, $1C, $1C, $18, $18, $E3, $E3, $E3, $E3;
 272+ F200 1C 1C 1C 1C
 272+ F204 1C 1C 18 18
 272+ F208 E3 E3 E3 E3
 273+ F20C 18 1C 1C 1C  	db  $18, $1C, $1C, $1C, $1C, $1C, $1C, $18, $18, $18, $E3, $E3, $E3, $E3, $E3, $E3;
 273+ F210 1C 1C 1C 18
 273+ F214 18 18 E3 E3
 273+ F218 E3 E3 E3 E3
 274+ F21C 1C 1C 1C 1C  	db  $1C, $1C, $1C, $1C, $1C, $1C, $18, $18, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 274+ F220 1C 1C 18 18
 274+ F224 E3 E3 E3 E3
 274+ F228 E3 E3 E3 E3
 275+ F22C 1C 1C 1C 18  	db  $1C, $1C, $1C, $18, $18, $18, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 275+ F230 18 18 E3 E3
 275+ F234 E3 E3 E3 E3
 275+ F238 E3 E3 E3 E3
 276+ F23C 1C 18 18 E3  	db  $1C, $18, $18, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 276+ F240 E3 E3 E3 E3
 276+ F244 E3 E3 E3 E3
 276+ F248 E3 E3 E3 E3
 277+ F24C 18 E3 E3 E3  	db  $18, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 277+ F250 E3 E3 E3 E3
 277+ F254 E3 E3 E3 E3
 277+ F258 E3 E3 E3 E3
 278+ F25C
 279+ F25C
 280+ F25C
 281+ F25C              Sprite15:
 282+ F25C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 282+ F260 E3 E3 E3 E3
 282+ F264 E3 E3 E3 E3
 282+ F268 E3 E3 E3 E3
 283+ F26C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 283+ F270 E3 E3 E3 E3
 283+ F274 E3 E3 E3 E3
 283+ F278 E3 E3 E3 E3
 284+ F27C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 284+ F280 E3 E3 E3 E3
 284+ F284 E3 E3 E3 E3
 284+ F288 E3 E3 E3 E3
 285+ F28C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 285+ F290 E3 E3 E3 E3
 285+ F294 E3 E3 E3 E3
 285+ F298 E3 E3 E3 E3
 286+ F29C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 286+ F2A0 E3 E3 E3 E3
 286+ F2A4 E3 E3 E3 E3
 286+ F2A8 E3 E3 E3 E3
 287+ F2AC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 287+ F2B0 E3 E3 E3 E3
 287+ F2B4 E3 E3 E3 E3
 287+ F2B8 E3 E3 E3 E3
 288+ F2BC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $18;
 288+ F2C0 E3 E3 E3 E3
 288+ F2C4 E3 E3 E3 E3
 288+ F2C8 E3 E3 E3 18
 289+ F2CC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $18, $18, $1C;
 289+ F2D0 E3 E3 E3 E3
 289+ F2D4 E3 E3 E3 E3
 289+ F2D8 E3 18 18 1C
 290+ F2DC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $18, $18, $1C, $1C, $18;
 290+ F2E0 E3 E3 E3 E3
 290+ F2E4 E3 E3 E3 18
 290+ F2E8 18 1C 1C 18
 291+ F2EC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $18, $18, $18, $18, $1C, $1C, $18, $18;
 291+ F2F0 E3 E3 E3 E3
 291+ F2F4 18 18 18 18
 291+ F2F8 1C 1C 18 18
 292+ F2FC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $18, $18, $18, $1C, $1C, $1C, $18, $18, $E3, $E3;
 292+ F300 E3 E3 18 18
 292+ F304 18 1C 1C 1C
 292+ F308 18 18 E3 E3
 293+ F30C E3 E3 E3 18  	db  $E3, $E3, $E3, $18, $18, $18, $1C, $1C, $1C, $1C, $18, $18, $E3, $E3, $E3, $E3;
 293+ F310 18 18 1C 1C
 293+ F314 1C 1C 18 18
 293+ F318 E3 E3 E3 E3
 294+ F31C E3 18 18 1C  	db  $E3, $18, $18, $1C, $1C, $1C, $1C, $18, $18, $18, $E3, $E3, $E3, $E3, $E3, $E3;
 294+ F320 1C 1C 1C 18
 294+ F324 18 18 E3 E3
 294+ F328 E3 E3 E3 E3
 295+ F32C 18 1C 1C 1C  	db  $18, $1C, $1C, $1C, $1C, $18, $18, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 295+ F330 1C 18 18 E3
 295+ F334 E3 E3 E3 E3
 295+ F338 E3 E3 E3 E3
 296+ F33C 1C 1C 1C 18  	db  $1C, $1C, $1C, $18, $18, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 296+ F340 18 E3 E3 E3
 296+ F344 E3 E3 E3 E3
 296+ F348 E3 E3 E3 E3
 297+ F34C 1C 18 18 E3  	db  $1C, $18, $18, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 297+ F350 E3 E3 E3 E3
 297+ F354 E3 E3 E3 E3
 297+ F358 E3 E3 E3 E3
 298+ F35C
 299+ F35C
 300+ F35C
 301+ F35C              Sprite16:
 302+ F35C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $18, $18;
 302+ F360 E3 E3 E3 E3
 302+ F364 E3 E3 E3 E3
 302+ F368 E3 E3 18 18
 303+ F36C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $18, $1C, $1C, $1C;
 303+ F370 E3 E3 E3 E3
 303+ F374 E3 E3 E3 E3
 303+ F378 18 1C 1C 1C
 304+ F37C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $18, $18, $1C, $1C, $18, $E3, $E3;
 304+ F380 E3 E3 E3 E3
 304+ F384 E3 18 18 1C
 304+ F388 1C 18 E3 E3
 305+ F38C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $18, $18, $18, $1C, $1C, $18, $E3, $E3, $E3, $E3;
 305+ F390 E3 E3 18 18
 305+ F394 18 1C 1C 18
 305+ F398 E3 E3 E3 E3
 306+ F39C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $18, $18, $1C, $1C, $18, $18, $E3, $E3, $E3, $E3, $E3, $E3;
 306+ F3A0 18 18 1C 1C
 306+ F3A4 18 18 E3 E3
 306+ F3A8 E3 E3 E3 E3
 307+ F3AC E3 E3 18 18  	db  $E3, $E3, $18, $18, $1C, $1C, $18, $18, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 307+ F3B0 1C 1C 18 18
 307+ F3B4 E3 E3 E3 E3
 307+ F3B8 E3 E3 E3 E3
 308+ F3BC 18 18 1C 1C  	db  $18, $18, $1C, $1C, $18, $18, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 308+ F3C0 18 18 E3 E3
 308+ F3C4 E3 E3 E3 E3
 308+ F3C8 E3 E3 E3 E3
 309+ F3CC 1C 1C 18 18  	db  $1C, $1C, $18, $18, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 309+ F3D0 E3 E3 E3 E3
 309+ F3D4 E3 E3 E3 E3
 309+ F3D8 E3 E3 E3 E3
 310+ F3DC 18 18 E3 E3  	db  $18, $18, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 310+ F3E0 E3 E3 E3 E3
 310+ F3E4 E3 E3 E3 E3
 310+ F3E8 E3 E3 E3 E3
 311+ F3EC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 311+ F3F0 E3 E3 E3 E3
 311+ F3F4 E3 E3 E3 E3
 311+ F3F8 E3 E3 E3 E3
 312+ F3FC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 312+ F400 E3 E3 E3 E3
 312+ F404 E3 E3 E3 E3
 312+ F408 E3 E3 E3 E3
 313+ F40C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 313+ F410 E3 E3 E3 E3
 313+ F414 E3 E3 E3 E3
 313+ F418 E3 E3 E3 E3
 314+ F41C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 314+ F420 E3 E3 E3 E3
 314+ F424 E3 E3 E3 E3
 314+ F428 E3 E3 E3 E3
 315+ F42C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 315+ F430 E3 E3 E3 E3
 315+ F434 E3 E3 E3 E3
 315+ F438 E3 E3 E3 E3
 316+ F43C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 316+ F440 E3 E3 E3 E3
 316+ F444 E3 E3 E3 E3
 316+ F448 E3 E3 E3 E3
 317+ F44C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 317+ F450 E3 E3 E3 E3
 317+ F454 E3 E3 E3 E3
 317+ F458 E3 E3 E3 E3
 318+ F45C
 319+ F45C
 320+ F45C
 321+ F45C              Sprite17:
 322+ F45C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 322+ F460 E3 E3 E3 E3
 322+ F464 E3 E3 E3 E3
 322+ F468 E3 E3 E3 E3
 323+ F46C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $1C, $E3, $E3;
 323+ F470 E3 E3 E3 E3
 323+ F474 E3 E3 E3 E3
 323+ F478 E3 1C E3 E3
 324+ F47C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $18, $1C, $1C, $E3, $E3, $E3;
 324+ F480 E3 E3 E3 E3
 324+ F484 E3 E3 18 1C
 324+ F488 1C E3 E3 E3
 325+ F48C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $18, $1C, $1C, $E3, $E3, $E3, $E3, $E3;
 325+ F490 E3 E3 E3 E3
 325+ F494 18 1C 1C E3
 325+ F498 E3 E3 E3 E3
 326+ F49C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $18, $1C, $1C, $18, $E3, $E3, $E3, $E3, $E3, $E3;
 326+ F4A0 E3 E3 18 1C
 326+ F4A4 1C 18 E3 E3
 326+ F4A8 E3 E3 E3 E3
 327+ F4AC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $18, $1C, $1C, $18, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 327+ F4B0 18 1C 1C 18
 327+ F4B4 E3 E3 E3 E3
 327+ F4B8 E3 E3 E3 E3
 328+ F4BC E3 E3 18 1C  	db  $E3, $E3, $18, $1C, $1C, $18, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 328+ F4C0 1C 18 E3 E3
 328+ F4C4 E3 E3 E3 E3
 328+ F4C8 E3 E3 E3 E3
 329+ F4CC 18 1C 1C 18  	db  $18, $1C, $1C, $18, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 329+ F4D0 E3 E3 E3 E3
 329+ F4D4 E3 E3 E3 E3
 329+ F4D8 E3 E3 E3 E3
 330+ F4DC 1C 18 E3 E3  	db  $1C, $18, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 330+ F4E0 E3 E3 E3 E3
 330+ F4E4 E3 E3 E3 E3
 330+ F4E8 E3 E3 E3 E3
 331+ F4EC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 331+ F4F0 E3 E3 E3 E3
 331+ F4F4 E3 E3 E3 E3
 331+ F4F8 E3 E3 E3 E3
 332+ F4FC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 332+ F500 E3 E3 E3 E3
 332+ F504 E3 E3 E3 E3
 332+ F508 E3 E3 E3 E3
 333+ F50C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 333+ F510 E3 E3 E3 E3
 333+ F514 E3 E3 E3 E3
 333+ F518 E3 E3 E3 E3
 334+ F51C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 334+ F520 E3 E3 E3 E3
 334+ F524 E3 E3 E3 E3
 334+ F528 E3 E3 E3 E3
 335+ F52C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 335+ F530 E3 E3 E3 E3
 335+ F534 E3 E3 E3 E3
 335+ F538 E3 E3 E3 E3
 336+ F53C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 336+ F540 E3 E3 E3 E3
 336+ F544 E3 E3 E3 E3
 336+ F548 E3 E3 E3 E3
 337+ F54C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 337+ F550 E3 E3 E3 E3
 337+ F554 E3 E3 E3 E3
 337+ F558 E3 E3 E3 E3
 338+ F55C
 339+ F55C
 340+ F55C
 341+ F55C              Sprite18:
 342+ F55C E3 D8 B4 E3  	db  $E3, $D8, $B4, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 342+ F560 E3 E3 E3 E3
 342+ F564 E3 E3 E3 E3
 342+ F568 E3 E3 E3 E3
 343+ F56C B4 FF FC D8  	db  $B4, $FF, $FC, $D8, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 343+ F570 E3 E3 E3 E3
 343+ F574 E3 E3 E3 E3
 343+ F578 E3 E3 E3 E3
 344+ F57C D8 FC B4 D8  	db  $D8, $FC, $B4, $D8, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 344+ F580 E3 E3 E3 E3
 344+ F584 E3 E3 E3 E3
 344+ F588 E3 E3 E3 E3
 345+ F58C E3 B4 D8 E3  	db  $E3, $B4, $D8, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 345+ F590 E3 E3 E3 E3
 345+ F594 E3 E3 E3 E3
 345+ F598 E3 E3 E3 E3
 346+ F59C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 346+ F5A0 E3 E3 E3 E3
 346+ F5A4 E3 E3 E3 E3
 346+ F5A8 E3 E3 E3 E3
 347+ F5AC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 347+ F5B0 E3 E3 E3 E3
 347+ F5B4 E3 E3 E3 E3
 347+ F5B8 E3 E3 E3 E3
 348+ F5BC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 348+ F5C0 E3 E3 E3 E3
 348+ F5C4 E3 E3 E3 E3
 348+ F5C8 E3 E3 E3 E3
 349+ F5CC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 349+ F5D0 E3 E3 E3 E3
 349+ F5D4 E3 E3 E3 E3
 349+ F5D8 E3 E3 E3 E3
 350+ F5DC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 350+ F5E0 E3 E3 E3 E3
 350+ F5E4 E3 E3 E3 E3
 350+ F5E8 E3 E3 E3 E3
 351+ F5EC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 351+ F5F0 E3 E3 E3 E3
 351+ F5F4 E3 E3 E3 E3
 351+ F5F8 E3 E3 E3 E3
 352+ F5FC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 352+ F600 E3 E3 E3 E3
 352+ F604 E3 E3 E3 E3
 352+ F608 E3 E3 E3 E3
 353+ F60C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 353+ F610 E3 E3 E3 E3
 353+ F614 E3 E3 E3 E3
 353+ F618 E3 E3 E3 E3
 354+ F61C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 354+ F620 E3 E3 E3 E3
 354+ F624 E3 E3 E3 E3
 354+ F628 E3 E3 E3 E3
 355+ F62C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 355+ F630 E3 E3 E3 E3
 355+ F634 E3 E3 E3 E3
 355+ F638 E3 E3 E3 E3
 356+ F63C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 356+ F640 E3 E3 E3 E3
 356+ F644 E3 E3 E3 E3
 356+ F648 E3 E3 E3 E3
 357+ F64C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 357+ F650 E3 E3 E3 E3
 357+ F654 E3 E3 E3 E3
 357+ F658 E3 E3 E3 E3
 358+ F65C
 359+ F65C
 360+ F65C
 361+ F65C              Sprite19:
 362+ F65C E3 D8 B4 E3  	db  $E3, $D8, $B4, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 362+ F660 E3 E3 E3 E3
 362+ F664 E3 E3 E3 E3
 362+ F668 E3 E3 E3 E3
 363+ F66C B4 E3 E3 D8  	db  $B4, $E3, $E3, $D8, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 363+ F670 E3 E3 E3 E3
 363+ F674 E3 E3 E3 E3
 363+ F678 E3 E3 E3 E3
 364+ F67C D8 E3 E3 D8  	db  $D8, $E3, $E3, $D8, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 364+ F680 E3 E3 E3 E3
 364+ F684 E3 E3 E3 E3
 364+ F688 E3 E3 E3 E3
 365+ F68C E3 B4 D8 E3  	db  $E3, $B4, $D8, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 365+ F690 E3 E3 E3 E3
 365+ F694 E3 E3 E3 E3
 365+ F698 E3 E3 E3 E3
 366+ F69C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 366+ F6A0 E3 E3 E3 E3
 366+ F6A4 E3 E3 E3 E3
 366+ F6A8 E3 E3 E3 E3
 367+ F6AC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 367+ F6B0 E3 E3 E3 E3
 367+ F6B4 E3 E3 E3 E3
 367+ F6B8 E3 E3 E3 E3
 368+ F6BC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 368+ F6C0 E3 E3 E3 E3
 368+ F6C4 E3 E3 E3 E3
 368+ F6C8 E3 E3 E3 E3
 369+ F6CC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 369+ F6D0 E3 E3 E3 E3
 369+ F6D4 E3 E3 E3 E3
 369+ F6D8 E3 E3 E3 E3
 370+ F6DC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 370+ F6E0 E3 E3 E3 E3
 370+ F6E4 E3 E3 E3 E3
 370+ F6E8 E3 E3 E3 E3
 371+ F6EC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 371+ F6F0 E3 E3 E3 E3
 371+ F6F4 E3 E3 E3 E3
 371+ F6F8 E3 E3 E3 E3
 372+ F6FC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 372+ F700 E3 E3 E3 E3
 372+ F704 E3 E3 E3 E3
 372+ F708 E3 E3 E3 E3
 373+ F70C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 373+ F710 E3 E3 E3 E3
 373+ F714 E3 E3 E3 E3
 373+ F718 E3 E3 E3 E3
 374+ F71C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 374+ F720 E3 E3 E3 E3
 374+ F724 E3 E3 E3 E3
 374+ F728 E3 E3 E3 E3
 375+ F72C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 375+ F730 E3 E3 E3 E3
 375+ F734 E3 E3 E3 E3
 375+ F738 E3 E3 E3 E3
 376+ F73C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 376+ F740 E3 E3 E3 E3
 376+ F744 E3 E3 E3 E3
 376+ F748 E3 E3 E3 E3
 377+ F74C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 377+ F750 E3 E3 E3 E3
 377+ F754 E3 E3 E3 E3
 377+ F758 E3 E3 E3 E3
 378+ F75C
 379+ F75C
 380+ F75C
 381+ F75C              Sprite20:
 382+ F75C E3 16 12 E3  	db  $E3, $16, $12, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 382+ F760 E3 E3 E3 E3
 382+ F764 E3 E3 E3 E3
 382+ F768 E3 E3 E3 E3
 383+ F76C 12 1A 1F 16  	db  $12, $1A, $1F, $16, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 383+ F770 E3 E3 E3 E3
 383+ F774 E3 E3 E3 E3
 383+ F778 E3 E3 E3 E3
 384+ F77C 16 1F 1A 12  	db  $16, $1F, $1A, $12, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 384+ F780 E3 E3 E3 E3
 384+ F784 E3 E3 E3 E3
 384+ F788 E3 E3 E3 E3
 385+ F78C E3 12 16 E3  	db  $E3, $12, $16, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 385+ F790 E3 E3 E3 E3
 385+ F794 E3 E3 E3 E3
 385+ F798 E3 E3 E3 E3
 386+ F79C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 386+ F7A0 E3 E3 E3 E3
 386+ F7A4 E3 E3 E3 E3
 386+ F7A8 E3 E3 E3 E3
 387+ F7AC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 387+ F7B0 E3 E3 E3 E3
 387+ F7B4 E3 E3 E3 E3
 387+ F7B8 E3 E3 E3 E3
 388+ F7BC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 388+ F7C0 E3 E3 E3 E3
 388+ F7C4 E3 E3 E3 E3
 388+ F7C8 E3 E3 E3 E3
 389+ F7CC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 389+ F7D0 E3 E3 E3 E3
 389+ F7D4 E3 E3 E3 E3
 389+ F7D8 E3 E3 E3 E3
 390+ F7DC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 390+ F7E0 E3 E3 E3 E3
 390+ F7E4 E3 E3 E3 E3
 390+ F7E8 E3 E3 E3 E3
 391+ F7EC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 391+ F7F0 E3 E3 E3 E3
 391+ F7F4 E3 E3 E3 E3
 391+ F7F8 E3 E3 E3 E3
 392+ F7FC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 392+ F800 E3 E3 E3 E3
 392+ F804 E3 E3 E3 E3
 392+ F808 E3 E3 E3 E3
 393+ F80C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 393+ F810 E3 E3 E3 E3
 393+ F814 E3 E3 E3 E3
 393+ F818 E3 E3 E3 E3
 394+ F81C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 394+ F820 E3 E3 E3 E3
 394+ F824 E3 E3 E3 E3
 394+ F828 E3 E3 E3 E3
 395+ F82C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 395+ F830 E3 E3 E3 E3
 395+ F834 E3 E3 E3 E3
 395+ F838 E3 E3 E3 E3
 396+ F83C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 396+ F840 E3 E3 E3 E3
 396+ F844 E3 E3 E3 E3
 396+ F848 E3 E3 E3 E3
 397+ F84C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 397+ F850 E3 E3 E3 E3
 397+ F854 E3 E3 E3 E3
 397+ F858 E3 E3 E3 E3
 398+ F85C
 399+ F85C
 400+ F85C
 401+ F85C              Sprite21:
 402+ F85C E3 16 12 E3  	db  $E3, $16, $12, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 402+ F860 E3 E3 E3 E3
 402+ F864 E3 E3 E3 E3
 402+ F868 E3 E3 E3 E3
 403+ F86C 12 E3 E3 16  	db  $12, $E3, $E3, $16, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 403+ F870 E3 E3 E3 E3
 403+ F874 E3 E3 E3 E3
 403+ F878 E3 E3 E3 E3
 404+ F87C 16 E3 E3 12  	db  $16, $E3, $E3, $12, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 404+ F880 E3 E3 E3 E3
 404+ F884 E3 E3 E3 E3
 404+ F888 E3 E3 E3 E3
 405+ F88C E3 12 16 E3  	db  $E3, $12, $16, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 405+ F890 E3 E3 E3 E3
 405+ F894 E3 E3 E3 E3
 405+ F898 E3 E3 E3 E3
 406+ F89C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 406+ F8A0 E3 E3 E3 E3
 406+ F8A4 E3 E3 E3 E3
 406+ F8A8 E3 E3 E3 E3
 407+ F8AC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 407+ F8B0 E3 E3 E3 E3
 407+ F8B4 E3 E3 E3 E3
 407+ F8B8 E3 E3 E3 E3
 408+ F8BC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 408+ F8C0 E3 E3 E3 E3
 408+ F8C4 E3 E3 E3 E3
 408+ F8C8 E3 E3 E3 E3
 409+ F8CC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 409+ F8D0 E3 E3 E3 E3
 409+ F8D4 E3 E3 E3 E3
 409+ F8D8 E3 E3 E3 E3
 410+ F8DC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 410+ F8E0 E3 E3 E3 E3
 410+ F8E4 E3 E3 E3 E3
 410+ F8E8 E3 E3 E3 E3
 411+ F8EC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 411+ F8F0 E3 E3 E3 E3
 411+ F8F4 E3 E3 E3 E3
 411+ F8F8 E3 E3 E3 E3
 412+ F8FC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 412+ F900 E3 E3 E3 E3
 412+ F904 E3 E3 E3 E3
 412+ F908 E3 E3 E3 E3
 413+ F90C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 413+ F910 E3 E3 E3 E3
 413+ F914 E3 E3 E3 E3
 413+ F918 E3 E3 E3 E3
 414+ F91C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 414+ F920 E3 E3 E3 E3
 414+ F924 E3 E3 E3 E3
 414+ F928 E3 E3 E3 E3
 415+ F92C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 415+ F930 E3 E3 E3 E3
 415+ F934 E3 E3 E3 E3
 415+ F938 E3 E3 E3 E3
 416+ F93C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 416+ F940 E3 E3 E3 E3
 416+ F944 E3 E3 E3 E3
 416+ F948 E3 E3 E3 E3
 417+ F94C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 417+ F950 E3 E3 E3 E3
 417+ F954 E3 E3 E3 E3
 417+ F958 E3 E3 E3 E3
 418+ F95C
 419+ F95C
 420+ F95C
 421+ F95C              Sprite22:
 422+ F95C E3 03 03 E3  	db  $E3, $03, $03, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 422+ F960 E3 E3 E3 E3
 422+ F964 E3 E3 E3 E3
 422+ F968 E3 E3 E3 E3
 423+ F96C 03 1F 1F 03  	db  $03, $1F, $1F, $03, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 423+ F970 E3 E3 E3 E3
 423+ F974 E3 E3 E3 E3
 423+ F978 E3 E3 E3 E3
 424+ F97C 03 1F 1F 03  	db  $03, $1F, $1F, $03, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 424+ F980 E3 E3 E3 E3
 424+ F984 E3 E3 E3 E3
 424+ F988 E3 E3 E3 E3
 425+ F98C E3 03 03 E3  	db  $E3, $03, $03, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 425+ F990 E3 E3 E3 E3
 425+ F994 E3 E3 E3 E3
 425+ F998 E3 E3 E3 E3
 426+ F99C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 426+ F9A0 E3 E3 E3 E3
 426+ F9A4 E3 E3 E3 E3
 426+ F9A8 E3 E3 E3 E3
 427+ F9AC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 427+ F9B0 E3 E3 E3 E3
 427+ F9B4 E3 E3 E3 E3
 427+ F9B8 E3 E3 E3 E3
 428+ F9BC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 428+ F9C0 E3 E3 E3 E3
 428+ F9C4 E3 E3 E3 E3
 428+ F9C8 E3 E3 E3 E3
 429+ F9CC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 429+ F9D0 E3 E3 E3 E3
 429+ F9D4 E3 E3 E3 E3
 429+ F9D8 E3 E3 E3 E3
 430+ F9DC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 430+ F9E0 E3 E3 E3 E3
 430+ F9E4 E3 E3 E3 E3
 430+ F9E8 E3 E3 E3 E3
 431+ F9EC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 431+ F9F0 E3 E3 E3 E3
 431+ F9F4 E3 E3 E3 E3
 431+ F9F8 E3 E3 E3 E3
 432+ F9FC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 432+ FA00 E3 E3 E3 E3
 432+ FA04 E3 E3 E3 E3
 432+ FA08 E3 E3 E3 E3
 433+ FA0C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 433+ FA10 E3 E3 E3 E3
 433+ FA14 E3 E3 E3 E3
 433+ FA18 E3 E3 E3 E3
 434+ FA1C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 434+ FA20 E3 E3 E3 E3
 434+ FA24 E3 E3 E3 E3
 434+ FA28 E3 E3 E3 E3
 435+ FA2C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 435+ FA30 E3 E3 E3 E3
 435+ FA34 E3 E3 E3 E3
 435+ FA38 E3 E3 E3 E3
 436+ FA3C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 436+ FA40 E3 E3 E3 E3
 436+ FA44 E3 E3 E3 E3
 436+ FA48 E3 E3 E3 E3
 437+ FA4C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 437+ FA50 E3 E3 E3 E3
 437+ FA54 E3 E3 E3 E3
 437+ FA58 E3 E3 E3 E3
 438+ FA5C
 439+ FA5C
 440+ FA5C
 441+ FA5C              Sprite23:
 442+ FA5C E3 03 03 E3  	db  $E3, $03, $03, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 442+ FA60 E3 E3 E3 E3
 442+ FA64 E3 E3 E3 E3
 442+ FA68 E3 E3 E3 E3
 443+ FA6C 03 E3 E3 03  	db  $03, $E3, $E3, $03, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 443+ FA70 E3 E3 E3 E3
 443+ FA74 E3 E3 E3 E3
 443+ FA78 E3 E3 E3 E3
 444+ FA7C 03 E3 E3 03  	db  $03, $E3, $E3, $03, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 444+ FA80 E3 E3 E3 E3
 444+ FA84 E3 E3 E3 E3
 444+ FA88 E3 E3 E3 E3
 445+ FA8C E3 03 03 E3  	db  $E3, $03, $03, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 445+ FA90 E3 E3 E3 E3
 445+ FA94 E3 E3 E3 E3
 445+ FA98 E3 E3 E3 E3
 446+ FA9C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 446+ FAA0 E3 E3 E3 E3
 446+ FAA4 E3 E3 E3 E3
 446+ FAA8 E3 E3 E3 E3
 447+ FAAC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 447+ FAB0 E3 E3 E3 E3
 447+ FAB4 E3 E3 E3 E3
 447+ FAB8 E3 E3 E3 E3
 448+ FABC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 448+ FAC0 E3 E3 E3 E3
 448+ FAC4 E3 E3 E3 E3
 448+ FAC8 E3 E3 E3 E3
 449+ FACC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 449+ FAD0 E3 E3 E3 E3
 449+ FAD4 E3 E3 E3 E3
 449+ FAD8 E3 E3 E3 E3
 450+ FADC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 450+ FAE0 E3 E3 E3 E3
 450+ FAE4 E3 E3 E3 E3
 450+ FAE8 E3 E3 E3 E3
 451+ FAEC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 451+ FAF0 E3 E3 E3 E3
 451+ FAF4 E3 E3 E3 E3
 451+ FAF8 E3 E3 E3 E3
 452+ FAFC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 452+ FB00 E3 E3 E3 E3
 452+ FB04 E3 E3 E3 E3
 452+ FB08 E3 E3 E3 E3
 453+ FB0C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 453+ FB10 E3 E3 E3 E3
 453+ FB14 E3 E3 E3 E3
 453+ FB18 E3 E3 E3 E3
 454+ FB1C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 454+ FB20 E3 E3 E3 E3
 454+ FB24 E3 E3 E3 E3
 454+ FB28 E3 E3 E3 E3
 455+ FB2C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 455+ FB30 E3 E3 E3 E3
 455+ FB34 E3 E3 E3 E3
 455+ FB38 E3 E3 E3 E3
 456+ FB3C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 456+ FB40 E3 E3 E3 E3
 456+ FB44 E3 E3 E3 E3
 456+ FB48 E3 E3 E3 E3
 457+ FB4C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 457+ FB50 E3 E3 E3 E3
 457+ FB54 E3 E3 E3 E3
 457+ FB58 E3 E3 E3 E3
 458+ FB5C
 459+ FB5C
 460+ FB5C
 461+ FB5C              Sprite24:
 462+ FB5C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 462+ FB60 E3 E3 E3 E3
 462+ FB64 E3 E3 E3 E3
 462+ FB68 E3 E3 E3 E3
 463+ FB6C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 463+ FB70 E3 E3 E3 E3
 463+ FB74 E3 E3 E3 E3
 463+ FB78 E3 E3 E3 E3
 464+ FB7C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 464+ FB80 E3 E3 E3 E3
 464+ FB84 E3 E3 E3 E3
 464+ FB88 E3 E3 E3 E3
 465+ FB8C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 465+ FB90 E3 E3 E3 E3
 465+ FB94 E3 E3 E3 E3
 465+ FB98 E3 E3 E3 E3
 466+ FB9C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 466+ FBA0 E3 E3 E3 E3
 466+ FBA4 E3 E3 E3 E3
 466+ FBA8 E3 E3 E3 E3
 467+ FBAC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 467+ FBB0 E3 E3 E3 E3
 467+ FBB4 E3 E3 E3 E3
 467+ FBB8 E3 E3 E3 E3
 468+ FBBC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 468+ FBC0 E3 E3 E3 E3
 468+ FBC4 E3 E3 E3 E3
 468+ FBC8 E3 E3 E3 E3
 469+ FBCC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 469+ FBD0 E3 E3 E3 E3
 469+ FBD4 E3 E3 E3 E3
 469+ FBD8 E3 E3 E3 E3
 470+ FBDC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 470+ FBE0 E3 E3 E3 E3
 470+ FBE4 E3 E3 E3 E3
 470+ FBE8 E3 E3 E3 E3
 471+ FBEC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 471+ FBF0 E3 E3 E3 E3
 471+ FBF4 E3 E3 E3 E3
 471+ FBF8 E3 E3 E3 E3
 472+ FBFC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 472+ FC00 E3 E3 E3 E3
 472+ FC04 E3 E3 E3 E3
 472+ FC08 E3 E3 E3 E3
 473+ FC0C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 473+ FC10 E3 E3 E3 E3
 473+ FC14 E3 E3 E3 E3
 473+ FC18 E3 E3 E3 E3
 474+ FC1C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 474+ FC20 E3 E3 E3 E3
 474+ FC24 E3 E3 E3 E3
 474+ FC28 E3 E3 E3 E3
 475+ FC2C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 475+ FC30 E3 E3 E3 E3
 475+ FC34 E3 E3 E3 E3
 475+ FC38 E3 E3 E3 E3
 476+ FC3C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 476+ FC40 E3 E3 E3 E3
 476+ FC44 E3 E3 E3 E3
 476+ FC48 E3 E3 E3 E3
 477+ FC4C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 477+ FC50 E3 E3 E3 E3
 477+ FC54 E3 E3 E3 E3
 477+ FC58 E3 E3 E3 E3
 478+ FC5C
 479+ FC5C
 480+ FC5C
 481+ FC5C              Sprite25:
 482+ FC5C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 482+ FC60 E3 E3 E3 E3
 482+ FC64 E3 E3 E3 E3
 482+ FC68 E3 E3 E3 E3
 483+ FC6C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 483+ FC70 E3 E3 E3 E3
 483+ FC74 E3 E3 E3 E3
 483+ FC78 E3 E3 E3 E3
 484+ FC7C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 484+ FC80 E3 E3 E3 E3
 484+ FC84 E3 E3 E3 E3
 484+ FC88 E3 E3 E3 E3
 485+ FC8C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 485+ FC90 E3 E3 E3 E3
 485+ FC94 E3 E3 E3 E3
 485+ FC98 E3 E3 E3 E3
 486+ FC9C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 486+ FCA0 E3 E3 E3 E3
 486+ FCA4 E3 E3 E3 E3
 486+ FCA8 E3 E3 E3 E3
 487+ FCAC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 487+ FCB0 E3 E3 E3 E3
 487+ FCB4 E3 E3 E3 E3
 487+ FCB8 E3 E3 E3 E3
 488+ FCBC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 488+ FCC0 E3 E3 E3 E3
 488+ FCC4 E3 E3 E3 E3
 488+ FCC8 E3 E3 E3 E3
 489+ FCCC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 489+ FCD0 E3 E3 E3 E3
 489+ FCD4 E3 E3 E3 E3
 489+ FCD8 E3 E3 E3 E3
 490+ FCDC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 490+ FCE0 E3 E3 E3 E3
 490+ FCE4 E3 E3 E3 E3
 490+ FCE8 E3 E3 E3 E3
 491+ FCEC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 491+ FCF0 E3 E3 E3 E3
 491+ FCF4 E3 E3 E3 E3
 491+ FCF8 E3 E3 E3 E3
 492+ FCFC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 492+ FD00 E3 E3 E3 E3
 492+ FD04 E3 E3 E3 E3
 492+ FD08 E3 E3 E3 E3
 493+ FD0C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 493+ FD10 E3 E3 E3 E3
 493+ FD14 E3 E3 E3 E3
 493+ FD18 E3 E3 E3 E3
 494+ FD1C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 494+ FD20 E3 E3 E3 E3
 494+ FD24 E3 E3 E3 E3
 494+ FD28 E3 E3 E3 E3
 495+ FD2C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 495+ FD30 E3 E3 E3 E3
 495+ FD34 E3 E3 E3 E3
 495+ FD38 E3 E3 E3 E3
 496+ FD3C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 496+ FD40 E3 E3 E3 E3
 496+ FD44 E3 E3 E3 E3
 496+ FD48 E3 E3 E3 E3
 497+ FD4C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 497+ FD50 E3 E3 E3 E3
 497+ FD54 E3 E3 E3 E3
 497+ FD58 E3 E3 E3 E3
 498+ FD5C
 499+ FD5C
 500+ FD5C
 501+ FD5C              Sprite26:
 502+ FD5C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 502+ FD60 E3 E3 E3 E3
 502+ FD64 E3 E3 E3 E3
 502+ FD68 E3 E3 E3 E3
 503+ FD6C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 503+ FD70 E3 E3 E3 E3
 503+ FD74 E3 E3 E3 E3
 503+ FD78 E3 E3 E3 E3
 504+ FD7C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 504+ FD80 E3 E3 E3 E3
 504+ FD84 E3 E3 E3 E3
 504+ FD88 E3 E3 E3 E3
 505+ FD8C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 505+ FD90 E3 E3 E3 E3
 505+ FD94 E3 E3 E3 E3
 505+ FD98 E3 E3 E3 E3
 506+ FD9C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 506+ FDA0 E3 E3 E3 E3
 506+ FDA4 E3 E3 E3 E3
 506+ FDA8 E3 E3 E3 E3
 507+ FDAC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 507+ FDB0 E3 E3 E3 E3
 507+ FDB4 E3 E3 E3 E3
 507+ FDB8 E3 E3 E3 E3
 508+ FDBC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 508+ FDC0 E3 E3 E3 E3
 508+ FDC4 E3 E3 E3 E3
 508+ FDC8 E3 E3 E3 E3
 509+ FDCC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 509+ FDD0 E3 E3 E3 E3
 509+ FDD4 E3 E3 E3 E3
 509+ FDD8 E3 E3 E3 E3
 510+ FDDC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 510+ FDE0 E3 E3 E3 E3
 510+ FDE4 E3 E3 E3 E3
 510+ FDE8 E3 E3 E3 E3
 511+ FDEC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 511+ FDF0 E3 E3 E3 E3
 511+ FDF4 E3 E3 E3 E3
 511+ FDF8 E3 E3 E3 E3
 512+ FDFC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 512+ FE00 E3 E3 E3 E3
 512+ FE04 E3 E3 E3 E3
 512+ FE08 E3 E3 E3 E3
 513+ FE0C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 513+ FE10 E3 E3 E3 E3
 513+ FE14 E3 E3 E3 E3
 513+ FE18 E3 E3 E3 E3
 514+ FE1C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 514+ FE20 E3 E3 E3 E3
 514+ FE24 E3 E3 E3 E3
 514+ FE28 E3 E3 E3 E3
 515+ FE2C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 515+ FE30 E3 E3 E3 E3
 515+ FE34 E3 E3 E3 E3
 515+ FE38 E3 E3 E3 E3
 516+ FE3C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 516+ FE40 E3 E3 E3 E3
 516+ FE44 E3 E3 E3 E3
 516+ FE48 E3 E3 E3 E3
 517+ FE4C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 517+ FE50 E3 E3 E3 E3
 517+ FE54 E3 E3 E3 E3
 517+ FE58 E3 E3 E3 E3
 518+ FE5C
 519+ FE5C
 520+ FE5C
 521+ FE5C              Sprite27:
 522+ FE5C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 522+ FE60 E3 E3 E3 E3
 522+ FE64 E3 E3 E3 E3
 522+ FE68 E3 E3 E3 E3
 523+ FE6C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 523+ FE70 E3 E3 E3 E3
 523+ FE74 E3 E3 E3 E3
 523+ FE78 E3 E3 E3 E3
 524+ FE7C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 524+ FE80 E3 E3 E3 E3
 524+ FE84 E3 E3 E3 E3
 524+ FE88 E3 E3 E3 E3
 525+ FE8C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 525+ FE90 E3 E3 E3 E3
 525+ FE94 E3 E3 E3 E3
 525+ FE98 E3 E3 E3 E3
 526+ FE9C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 526+ FEA0 E3 E3 E3 E3
 526+ FEA4 E3 E3 E3 E3
 526+ FEA8 E3 E3 E3 E3
 527+ FEAC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 527+ FEB0 E3 E3 E3 E3
 527+ FEB4 E3 E3 E3 E3
 527+ FEB8 E3 E3 E3 E3
 528+ FEBC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 528+ FEC0 E3 E3 E3 E3
 528+ FEC4 E3 E3 E3 E3
 528+ FEC8 E3 E3 E3 E3
 529+ FECC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 529+ FED0 E3 E3 E3 E3
 529+ FED4 E3 E3 E3 E3
 529+ FED8 E3 E3 E3 E3
 530+ FEDC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 530+ FEE0 E3 E3 E3 E3
 530+ FEE4 E3 E3 E3 E3
 530+ FEE8 E3 E3 E3 E3
 531+ FEEC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 531+ FEF0 E3 E3 E3 E3
 531+ FEF4 E3 E3 E3 E3
 531+ FEF8 E3 E3 E3 E3
 532+ FEFC E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 532+ FF00 E3 E3 E3 E3
 532+ FF04 E3 E3 E3 E3
 532+ FF08 E3 E3 E3 E3
 533+ FF0C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 533+ FF10 E3 E3 E3 E3
 533+ FF14 E3 E3 E3 E3
 533+ FF18 E3 E3 E3 E3
 534+ FF1C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 534+ FF20 E3 E3 E3 E3
 534+ FF24 E3 E3 E3 E3
 534+ FF28 E3 E3 E3 E3
 535+ FF2C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 535+ FF30 E3 E3 E3 E3
 535+ FF34 E3 E3 E3 E3
 535+ FF38 E3 E3 E3 E3
 536+ FF3C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 536+ FF40 E3 E3 E3 E3
 536+ FF44 E3 E3 E3 E3
 536+ FF48 E3 E3 E3 E3
 537+ FF4C E3 E3 E3 E3  	db  $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3, $E3;
 537+ FF50 E3 E3 E3 E3
 537+ FF54 E3 E3 E3 E3
 537+ FF58 E3 E3 E3 E3
 538+ FF5C
 539+ FF5C
 540+ FF5C
 541+ FF5C
 542+ FF5C
 543+ FF5C
# file closed: ./Layer3Sprites/SpriteSheet.asm
1317  FF5C              ; Bank 61  ------------------------------------------------------------------------------------------------------------------------
1318  FF5C                  SLOT    ConsoleImageAddr
1319  FF5C                  PAGE    BankConsole
1320  FF5C              	ORG     ConsoleImageAddr, BankConsole
1321  E000
1322  E000                  INCLUDE "./Images/ConsoleImageData.asm"
# file opened: ./Images/ConsoleImageData.asm
   1+ E000              ConsoleImageData:
   2+ E000 FF FF FF FF      DB $FF,$FF,$FF,$FF,$FF,$FF,$00,$7F,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$7F,$00,$FF,$FF,$FF,$FF,$FF,$FF ; row 1
   2+ E004 FF FF 00 7F
   2+ E008 00 00 00 00
   2+ E00C 00 00 00 00
   2+ E010 00 00 00 00
   2+ E014 00 00 00 00
   2+ E018 7F 00 FF FF
   2+ E01C FF FF FF FF
   3+ E020 9C C3 FF FF      DB $9C,$C3,$FF,$FF,$FF,$FF,$40,$08,$01,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$40,$08,$01,$80,$00,$00,$00,$00,$01
   3+ E024 FF FF 40 08
   3+ E028 01 00 00 00
   3+ E02C 00 00 00 00
   3+ E030 00 00 00 00
   3+ E034 00 00 00 40
   3+ E038 08 01 80 00
   3+ E03C 00 00 00 01
   4+ E040 80 00 00 00      DB $80,$00,$00,$00,$00,$01,$10,$08,$04,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$10,$08,$04,$80,$00,$00,$00,$00,$01
   4+ E044 00 01 10 08
   4+ E048 04 00 00 00
   4+ E04C 00 00 00 00
   4+ E050 00 00 00 00
   4+ E054 00 00 00 10
   4+ E058 08 04 80 00
   4+ E05C 00 00 00 01
   5+ E060 80 00 00 00      DB $80,$00,$00,$00,$00,$01,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$80,$00,$00,$00,$00,$01
   5+ E064 00 01 00 00
   5+ E068 00 00 00 00
   5+ E06C 00 00 00 00
   5+ E070 00 00 00 00
   5+ E074 00 00 00 00
   5+ E078 00 00 80 00
   5+ E07C 00 00 00 01
   6+ E080 80 00 00 00      DB $80,$00,$00,$00,$00,$01,$00,$00,$00,$07,$82,$00,$08,$06,$20,$01,$80,$04,$60,$10,$00,$41,$E0,$00,$00,$00,$FF,$FF,$FF,$FF,$FF,$FF
   6+ E084 00 01 00 00
   6+ E088 00 07 82 00
   6+ E08C 08 06 20 01
   6+ E090 80 04 60 10
   6+ E094 00 41 E0 00
   6+ E098 00 00 FF FF
   6+ E09C FF FF FF FF
   7+ E0A0 80 00 00 00      DB $80,$00,$00,$00,$00,$01,$00,$06,$00,$30,$00,$08,$00,$04,$00,$61,$86,$00,$20,$00,$10,$00,$0C,$00,$60,$00,$FF,$FF,$FF,$FF,$FF,$FF
   7+ E0A4 00 01 00 06
   7+ E0A8 00 30 00 08
   7+ E0AC 00 04 00 61
   7+ E0B0 86 00 20 00
   7+ E0B4 10 00 0C 00
   7+ E0B8 60 00 FF FF
   7+ E0BC FF FF FF FF
   8+ E0C0 80 00 00 00      DB $80,$00,$00,$00,$00,$01,$00,$0F,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$AA,$55,$55,$55,$55,$55,$55,$55,$55,$F0,$00,$FF,$FF,$FF,$FF,$FF,$FF
   8+ E0C4 00 01 00 0F
   8+ E0C8 AA AA AA AA
   8+ E0CC AA AA AA AA
   8+ E0D0 55 55 55 55
   8+ E0D4 55 55 55 55
   8+ E0D8 F0 00 FF FF
   8+ E0DC FF FF FF FF
   9+ E0E0 FF FF FF FF      DB $FF,$FF,$FF,$FF,$FF,$FF,$00,$00,$00,$1E,$00,$00,$08,$00,$00,$01,$80,$00,$00,$10,$00,$00,$78,$00,$00,$00,$FF,$FF,$FF,$FF,$FF,$FF
   9+ E0E4 FF FF 00 00
   9+ E0E8 00 1E 00 00
   9+ E0EC 08 00 00 01
   9+ E0F0 80 00 00 10
   9+ E0F4 00 00 78 00
   9+ E0F8 00 00 FF FF
   9+ E0FC FF FF FF FF
  10+ E100 80 00 00 00      DB $80,$00,$00,$00,$00,$01,$01,$C9,$C0,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$01,$C9,$C0,$80,$00,$00,$00,$00,$01 ; row 2
  10+ E104 00 01 01 C9
  10+ E108 C0 00 00 00
  10+ E10C 00 00 00 00
  10+ E110 00 00 00 00
  10+ E114 00 00 00 01
  10+ E118 C9 C0 80 00
  10+ E11C 00 00 00 01
  11+ E120 B2 C3 92 49      DB $B2,$C3,$92,$49,$24,$93,$40,$08,$01,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$40,$08,$01,$80,$00,$00,$00,$7C,$39
  11+ E124 24 93 40 08
  11+ E128 01 00 00 00
  11+ E12C 00 00 00 00
  11+ E130 00 00 00 00
  11+ E134 00 00 00 40
  11+ E138 08 01 80 00
  11+ E13C 00 00 7C 39
  12+ E140 BE 66 00 00      DB $BE,$66,$00,$00,$00,$01,$18,$00,$0C,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$18,$00,$0C,$80,$00,$00,$00,$7C,$61
  12+ E144 00 01 18 00
  12+ E148 0C 00 00 00
  12+ E14C 00 00 00 00
  12+ E150 00 00 00 00
  12+ E154 00 00 00 18
  12+ E158 00 0C 80 00
  12+ E15C 00 00 7C 61
  13+ E160 9C 7E 00 00      DB $9C,$7E,$00,$00,$00,$01,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$80,$00,$00,$00,$00,$01
  13+ E164 00 01 00 00
  13+ E168 00 00 00 00
  13+ E16C 00 00 00 00
  13+ E170 00 00 00 00
  13+ E174 00 00 00 00
  13+ E178 00 00 80 00
  13+ E17C 00 00 00 01
  14+ E180 B0 7E 00 00      DB $B0,$7E,$00,$00,$00,$01,$00,$00,$00,$38,$04,$00,$10,$01,$40,$01,$80,$06,$80,$08,$00,$20,$1C,$00,$00,$00,$80,$00,$00,$00,$00,$81
  14+ E184 00 01 00 00
  14+ E188 00 38 04 00
  14+ E18C 10 01 40 01
  14+ E190 80 06 80 08
  14+ E194 00 20 1C 00
  14+ E198 00 00 80 00
  14+ E19C 00 00 00 81
  15+ E1A0 9C 30 00 00      DB $9C,$30,$00,$00,$00,$01,$00,$0C,$00,$40,$00,$10,$00,$04,$00,$11,$88,$00,$20,$00,$08,$00,$02,$00,$30,$00,$80,$00,$00,$00,$00,$81
  15+ E1A4 00 01 00 0C
  15+ E1A8 00 40 00 10
  15+ E1AC 00 04 00 11
  15+ E1B0 88 00 20 00
  15+ E1B4 08 00 02 00
  15+ E1B8 30 00 80 00
  15+ E1BC 00 00 00 81
  16+ E1C0 80 00 00 00      DB $80,$00,$00,$00,$00,$01,$00,$06,$00,$00,$10,$00,$00,$80,$00,$01,$80,$00,$01,$00,$00,$08,$00,$00,$60,$00,$80,$00,$00,$00,$00,$81
  16+ E1C4 00 01 00 06
  16+ E1C8 00 00 10 00
  16+ E1CC 00 80 00 01
  16+ E1D0 80 00 01 00
  16+ E1D4 00 08 00 00
  16+ E1D8 60 00 80 00
  16+ E1DC 00 00 00 81
  17+ E1E0 B8 00 00 00      DB $B8,$00,$00,$00,$00,$01,$00,$00,$00,$01,$E0,$00,$10,$00,$00,$01,$80,$00,$00,$08,$00,$07,$80,$00,$00,$00,$80,$00,$00,$00,$00,$81
  17+ E1E4 00 01 00 00
  17+ E1E8 00 01 E0 00
  17+ E1EC 10 00 00 01
  17+ E1F0 80 00 00 08
  17+ E1F4 00 07 80 00
  17+ E1F8 00 00 80 00
  17+ E1FC 00 00 00 81
  18+ E200 BE 3C 00 00      DB $BE,$3C,$00,$00,$00,$01,$06,$08,$38,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$06,$08,$38,$80,$00,$00,$00,$3C,$79 ; row 3
  18+ E204 00 01 06 08
  18+ E208 38 00 00 00
  18+ E20C 00 00 00 00
  18+ E210 00 00 00 00
  18+ E214 00 00 00 06
  18+ E218 08 38 80 00
  18+ E21C 00 00 3C 79
  19+ E220 B2 C3 80 01      DB $B2,$C3,$80,$01,$00,$03,$55,$55,$55,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$55,$55,$55,$80,$00,$00,$00,$62,$65
  19+ E224 00 03 55 55
  19+ E228 55 00 00 00
  19+ E22C 00 00 00 00
  19+ E230 00 00 00 00
  19+ E234 00 00 00 55
  19+ E238 55 55 80 00
  19+ E23C 00 00 62 65
  20+ E240 B0 66 00 00      DB $B0,$66,$00,$00,$00,$01,$0C,$08,$18,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$0C,$08,$18,$80,$00,$00,$00,$66,$61
  20+ E244 00 01 0C 08
  20+ E248 18 00 00 00
  20+ E24C 00 00 00 00
  20+ E250 00 00 00 00
  20+ E254 00 00 00 0C
  20+ E258 08 18 80 00
  20+ E25C 00 00 66 61
  21+ E260 B2 18 00 00      DB $B2,$18,$00,$00,$00,$01,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$80,$00,$00,$00,$00,$01
  21+ E264 00 01 00 00
  21+ E268 00 00 00 00
  21+ E26C 00 00 00 00
  21+ E270 00 00 00 00
  21+ E274 00 00 00 00
  21+ E278 00 00 80 00
  21+ E27C 00 00 00 01
  22+ E280 B0 18 00 00      DB $B0,$18,$00,$00,$00,$01,$00,$00,$01,$CA,$BA,$AA,$AA,$AA,$EA,$AA,$55,$57,$55,$55,$55,$5D,$53,$80,$00,$00,$80,$00,$00,$00,$00,$99
  22+ E284 00 01 00 00
  22+ E288 01 CA BA AA
  22+ E28C AA AA EA AA
  22+ E290 55 57 55 55
  22+ E294 55 5D 53 80
  22+ E298 00 00 80 00
  22+ E29C 00 00 00 99
  23+ E2A0 B2 30 00 00      DB $B2,$30,$00,$00,$00,$01,$00,$08,$01,$80,$00,$20,$00,$08,$00,$05,$A0,$00,$10,$00,$04,$00,$01,$80,$10,$00,$80,$00,$00,$00,$00,$B9
  23+ E2A4 00 01 00 08
  23+ E2A8 01 80 00 20
  23+ E2AC 00 08 00 05
  23+ E2B0 A0 00 10 00
  23+ E2B4 04 00 01 80
  23+ E2B8 10 00 80 00
  23+ E2BC 00 00 00 B9
  24+ E2C0 80 00 00 00      DB $80,$00,$00,$00,$00,$01,$00,$01,$00,$00,$20,$00,$01,$00,$00,$01,$80,$00,$00,$80,$00,$04,$00,$00,$80,$00,$80,$00,$00,$00,$00,$B9
  24+ E2C4 00 01 00 01
  24+ E2C8 00 00 20 00
  24+ E2CC 01 00 00 01
  24+ E2D0 80 00 00 80
  24+ E2D4 00 04 00 00
  24+ E2D8 80 00 80 00
  24+ E2DC 00 00 00 B9
  25+ E2E0 BF F8 00 00      DB $BF,$F8,$00,$00,$00,$01,$00,$00,$00,$00,$1F,$AA,$AA,$AA,$AA,$AA,$55,$55,$55,$55,$55,$F8,$00,$00,$00,$00,$80,$00,$00,$00,$00,$A9
  25+ E2E4 00 01 00 00
  25+ E2E8 00 00 1F AA
  25+ E2EC AA AA AA AA
  25+ E2F0 55 55 55 55
  25+ E2F4 55 F8 00 00
  25+ E2F8 00 00 80 00
  25+ E2FC 00 00 00 A9
  26+ E300 B0 7E 00 00      DB $B0,$7E,$00,$00,$00,$01,$0E,$08,$18,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$0E,$08,$18,$80,$00,$00,$00,$60,$65 ; row 4
  26+ E304 00 01 0E 08
  26+ E308 18 00 00 00
  26+ E30C 00 00 00 00
  26+ E310 00 00 00 00
  26+ E314 00 00 00 0E
  26+ E318 08 18 80 00
  26+ E31C 00 00 60 65
  27+ E320 BE 66 00 00      DB $BE,$66,$00,$00,$00,$01,$40,$08,$01,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$40,$08,$01,$80,$00,$00,$00,$62,$61
  27+ E324 00 01 40 08
  27+ E328 01 00 00 00
  27+ E32C 00 00 00 00
  27+ E330 00 00 00 00
  27+ E334 00 00 00 40
  27+ E338 08 01 80 00
  27+ E33C 00 00 62 61
  28+ E340 BC 66 00 00      DB $BC,$66,$00,$00,$00,$01,$03,$00,$60,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$03,$00,$60,$80,$00,$00,$00,$66,$61
  28+ E344 00 01 03 00
  28+ E348 60 00 00 00
  28+ E34C 00 00 00 00
  28+ E350 00 00 00 00
  28+ E354 00 00 00 03
  28+ E358 00 60 80 00
  28+ E35C 00 00 66 61
  29+ E360 B0 18 00 00      DB $B0,$18,$00,$00,$00,$01,$00,$00,$00,$00,$00,$00,$00,$0F,$FF,$FF,$FF,$FF,$F0,$00,$00,$00,$00,$00,$00,$00,$80,$00,$00,$00,$00,$01
  29+ E364 00 01 00 00
  29+ E368 00 00 00 00
  29+ E36C 00 0F FF FF
  29+ E370 FF FF F0 00
  29+ E374 00 00 00 00
  29+ E378 00 00 80 00
  29+ E37C 00 00 00 01
  30+ E380 B0 18 00 00      DB $B0,$18,$00,$00,$00,$01,$00,$00,$06,$00,$20,$00,$40,$00,$A0,$01,$80,$05,$00,$02,$00,$04,$00,$60,$00,$00,$80,$00,$00,$00,$00,$B9
  30+ E384 00 01 00 00
  30+ E388 06 00 20 00
  30+ E38C 40 00 A0 01
  30+ E390 80 05 00 02
  30+ E394 00 04 00 60
  30+ E398 00 00 80 00
  30+ E39C 00 00 00 B9
  31+ E3A0 B2 30 00 00      DB $B2,$30,$00,$00,$00,$01,$00,$1A,$AA,$AA,$AA,$EA,$AA,$BA,$AA,$AB,$D5,$55,$5D,$55,$57,$55,$55,$55,$58,$00,$80,$00,$00,$00,$00,$85
  31+ E3A4 00 01 00 1A
  31+ E3A8 AA AA AA EA
  31+ E3AC AA BA AA AB
  31+ E3B0 D5 55 5D 55
  31+ E3B4 57 55 55 55
  31+ E3B8 58 00 80 00
  31+ E3BC 00 00 00 85
  32+ E3C0 80 00 00 00      DB $80,$00,$00,$00,$00,$01,$00,$00,$C0,$00,$40,$00,$01,$00,$00,$01,$80,$00,$00,$80,$00,$02,$00,$03,$00,$00,$80,$00,$00,$00,$00,$85
  32+ E3C4 00 01 00 00
  32+ E3C8 C0 00 40 00
  32+ E3CC 01 00 00 01
  32+ E3D0 80 00 00 80
  32+ E3D4 00 02 00 03
  32+ E3D8 00 00 80 00
  32+ E3DC 00 00 00 85
  33+ E3E0 9F FE 00 00      DB $9F,$FE,$00,$00,$00,$01,$00,$00,$00,$00,$00,$FC,$20,$00,$00,$01,$80,$00,$00,$04,$3F,$00,$00,$00,$00,$00,$80,$00,$00,$00,$00,$A9
  33+ E3E4 00 01 00 00
  33+ E3E8 00 00 00 FC
  33+ E3EC 20 00 00 01
  33+ E3F0 80 00 00 04
  33+ E3F4 3F 00 00 00
  33+ E3F8 00 00 80 00
  33+ E3FC 00 00 00 A9
  34+ E400 BE 66 00 00      DB $BE,$66,$00,$00,$00,$01,$18,$08,$0C,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$18,$08,$0C,$80,$00,$00,$00,$3C,$65 ; row 5
  34+ E404 00 01 18 08
  34+ E408 0C 00 00 00
  34+ E40C 00 00 00 00
  34+ E410 00 00 00 00
  34+ E414 00 00 00 18
  34+ E418 08 0C 80 00
  34+ E41C 00 00 3C 65
  35+ E420 B2 7E 00 00      DB $B2,$7E,$00,$00,$00,$01,$40,$08,$01,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$40,$08,$01,$80,$00,$00,$00,$7C,$61
  35+ E424 00 01 40 08
  35+ E428 01 00 00 00
  35+ E42C 00 00 00 00
  35+ E430 00 00 00 00
  35+ E434 00 00 00 40
  35+ E438 08 01 80 00
  35+ E43C 00 00 7C 61
  36+ E440 B0 66 00 00      DB $B0,$66,$00,$00,$00,$01,$00,$FF,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$FF,$80,$80,$00,$00,$00,$66,$61
  36+ E444 00 01 00 FF
  36+ E448 80 00 00 00
  36+ E44C 00 00 00 00
  36+ E450 00 00 00 00
  36+ E454 00 00 00 00
  36+ E458 FF 80 80 00
  36+ E45C 00 00 66 61
  37+ E460 B0 18 00 00      DB $B0,$18,$00,$00,$00,$01,$00,$00,$00,$00,$00,$00,$3F,$F0,$08,$01,$80,$10,$0F,$FC,$00,$00,$00,$00,$00,$00,$80,$00,$00,$00,$00,$01
  37+ E464 00 01 00 00
  37+ E468 00 00 00 00
  37+ E46C 3F F0 08 01
  37+ E470 80 10 0F FC
  37+ E474 00 00 00 00
  37+ E478 00 00 80 00
  37+ E47C 00 00 00 01
  38+ E480 B0 18 00 00      DB $B0,$18,$00,$00,$00,$01,$00,$00,$18,$00,$C0,$00,$80,$00,$18,$01,$80,$18,$00,$01,$00,$03,$00,$18,$00,$00,$80,$00,$00,$00,$00,$99
  38+ E484 00 01 00 00
  38+ E488 18 00 C0 00
  38+ E48C 80 00 18 01
  38+ E490 80 18 00 01
  38+ E494 00 03 00 18
  38+ E498 00 00 80 00
  38+ E49C 00 00 00 99
  39+ E4A0 BE 30 00 00      DB $BE,$30,$00,$00,$00,$01,$00,$10,$0C,$00,$00,$80,$00,$10,$00,$01,$80,$00,$08,$00,$01,$00,$00,$30,$08,$00,$80,$00,$00,$00,$00,$BD
  39+ E4A4 00 01 00 10
  39+ E4A8 0C 00 00 80
  39+ E4AC 00 10 00 01
  39+ E4B0 80 00 08 00
  39+ E4B4 01 00 00 30
  39+ E4B8 08 00 80 00
  39+ E4BC 00 00 00 BD
  40+ E4C0 80 00 00 00      DB $80,$00,$00,$00,$00,$01,$00,$00,$30,$00,$80,$00,$02,$00,$00,$01,$80,$00,$00,$40,$00,$01,$00,$0C,$00,$00,$80,$00,$00,$00,$00,$BD
  40+ E4C4 00 01 00 00
  40+ E4C8 30 00 80 00
  40+ E4CC 02 00 00 01
  40+ E4D0 80 00 00 40
  40+ E4D4 00 01 00 0C
  40+ E4D8 00 00 80 00
  40+ E4DC 00 00 00 BD
  41+ E4E0 9F FE 00 00      DB $9F,$FE,$00,$00,$00,$01,$00,$00,$00,$00,$00,$03,$FC,$00,$00,$01,$80,$00,$00,$3F,$C0,$00,$00,$00,$00,$00,$80,$00,$00,$00,$00,$BD
  41+ E4E4 00 01 00 00
  41+ E4E8 00 00 00 03
  41+ E4EC FC 00 00 01
  41+ E4F0 80 00 00 3F
  41+ E4F4 C0 00 00 00
  41+ E4F8 00 00 80 00
  41+ E4FC 00 00 00 BD
  42+ E500 B0 C3 80 01      DB $B0,$C3,$80,$01,$00,$03,$30,$08,$06,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$30,$08,$06,$C0,$00,$80,$01,$06,$7D ; row 6
  42+ E504 00 03 30 08
  42+ E508 06 00 00 00
  42+ E50C 00 00 00 00
  42+ E510 00 00 00 00
  42+ E514 00 00 00 30
  42+ E518 08 06 C0 00
  42+ E51C 80 01 06 7D
  43+ E520 B2 3C 00 00      DB $B2,$3C,$00,$00,$00,$01,$40,$00,$01,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$40,$00,$01,$C0,$00,$80,$01,$66,$65
  43+ E524 00 01 40 00
  43+ E528 01 00 00 00
  43+ E52C 00 00 00 00
  43+ E530 00 00 00 00
  43+ E534 00 00 00 40
  43+ E538 00 01 C0 00
  43+ E53C 80 01 66 65
  44+ E540 B0 66 80 01      DB $B0,$66,$80,$01,$00,$03,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$C0,$00,$80,$01,$66,$61
  44+ E544 00 03 00 00
  44+ E548 00 00 00 00
  44+ E54C 00 00 00 00
  44+ E550 00 00 00 00
  44+ E554 00 00 00 00
  44+ E558 00 00 C0 00
  44+ E55C 80 01 66 61
  45+ E560 B2 18 80 01      DB $B2,$18,$80,$01,$00,$03,$00,$00,$00,$00,$00,$1F,$C1,$AA,$AA,$AA,$55,$55,$57,$83,$F8,$00,$00,$00,$00,$00,$80,$00,$00,$00,$00,$01
  45+ E564 00 03 00 00
  45+ E568 00 00 00 1F
  45+ E56C C1 AA AA AA
  45+ E570 55 55 57 83
  45+ E574 F8 00 00 00
  45+ E578 00 00 80 00
  45+ E57C 00 00 00 01
  46+ E580 B0 18 80 01      DB $B0,$18,$80,$01,$00,$03,$00,$00,$60,$01,$00,$01,$00,$01,$04,$01,$80,$20,$80,$00,$80,$00,$80,$06,$00,$00,$80,$00,$00,$00,$00,$99
  46+ E584 00 03 00 00
  46+ E588 60 01 00 01
  46+ E58C 00 01 04 01
  46+ E590 80 20 80 00
  46+ E594 80 00 80 06
  46+ E598 00 00 80 00
  46+ E59C 00 00 00 99
  47+ E5A0 B2 30 80 01      DB $B2,$30,$80,$01,$00,$03,$00,$10,$18,$00,$01,$00,$00,$20,$00,$01,$80,$00,$04,$00,$00,$80,$00,$18,$08,$00,$80,$00,$00,$00,$00,$A1
  47+ E5A4 00 03 00 10
  47+ E5A8 18 00 01 00
  47+ E5AC 00 20 00 01
  47+ E5B0 80 00 04 00
  47+ E5B4 00 80 00 18
  47+ E5B8 08 00 80 00
  47+ E5BC 00 00 00 A1
  48+ E5C0 80 00 00 00      DB $80,$00,$00,$00,$00,$01,$00,$00,$0E,$AB,$AA,$AA,$AE,$AA,$AA,$AA,$55,$55,$55,$75,$55,$55,$D5,$70,$00,$00,$80,$00,$00,$00,$00,$85
  48+ E5C4 00 01 00 00
  48+ E5C8 0E AB AA AA
  48+ E5CC AE AA AA AA
  48+ E5D0 55 55 55 75
  48+ E5D4 55 55 D5 70
  48+ E5D8 00 00 80 00
  48+ E5DC 00 00 00 85
  49+ E5E0 BF F8 00 00      DB $BF,$F8,$00,$00,$00,$01,$00,$00,$00,$00,$00,$00,$03,$FF,$F0,$01,$80,$0F,$FF,$C0,$00,$00,$00,$00,$00,$00,$80,$00,$00,$00,$00,$89
  49+ E5E4 00 01 00 00
  49+ E5E8 00 00 00 00
  49+ E5EC 03 FF F0 01
  49+ E5F0 80 0F FF C0
  49+ E5F4 00 00 00 00
  49+ E5F8 00 00 80 00
  49+ E5FC 00 00 00 89
  50+ E600 B0 C3 92 49      DB $B0,$C3,$92,$49,$24,$93,$20,$08,$02,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$20,$08,$02,$C9,$24,$92,$49,$3C,$61 ; row 7
  50+ E604 24 93 20 08
  50+ E608 02 00 00 00
  50+ E60C 00 00 00 00
  50+ E610 00 00 00 00
  50+ E614 00 00 00 20
  50+ E618 08 02 C9 24
  50+ E61C 92 49 3C 61
  51+ E620 80 00 00 00      DB $80,$00,$00,$00,$00,$01,$60,$08,$02,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$60,$08,$02,$C9,$24,$92,$49,$66,$39
  51+ E624 00 01 60 08
  51+ E628 02 00 00 00
  51+ E62C 00 00 00 00
  51+ E630 00 00 00 00
  51+ E634 00 00 00 60
  51+ E638 08 02 C9 24
  51+ E63C 92 49 66 39
  52+ E640 B0 3C 92 49      DB $B0,$3C,$92,$49,$24,$93,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$C9,$24,$92,$49,$7C,$7D
  52+ E644 24 93 00 00
  52+ E648 00 00 00 00
  52+ E64C 00 00 00 00
  52+ E650 00 00 00 00
  52+ E654 00 00 00 00
  52+ E658 00 00 C9 24
  52+ E65C 92 49 7C 7D
  53+ E660 9C 18 92 49      DB $9C,$18,$92,$49,$24,$93,$00,$00,$00,$00,$03,$E0,$02,$60,$10,$01,$80,$08,$06,$40,$07,$E0,$00,$00,$00,$00,$80,$00,$00,$00,$00,$01
  53+ E664 24 93 00 00
  53+ E668 00 00 03 E0
  53+ E66C 02 60 10 01
  53+ E670 80 08 06 40
  53+ E674 07 E0 00 00
  53+ E678 00 00 80 00
  53+ E67C 00 00 00 01
  54+ E680 BE 18 92 49      DB $BE,$18,$92,$49,$24,$93,$00,$01,$AA,$AE,$AA,$AA,$AA,$AA,$AB,$AA,$55,$D5,$55,$55,$55,$55,$75,$55,$80,$00,$80,$00,$00,$00,$00,$99
  54+ E684 24 93 00 01
  54+ E688 AA AE AA AA
  54+ E68C AA AA AB AA
  54+ E690 55 D5 55 55
  54+ E694 55 55 75 55
  54+ E698 80 00 80 00
  54+ E69C 00 00 00 99
  55+ E6A0 B2 3E 92 49      DB $B2,$3E,$92,$49,$24,$93,$00,$10,$60,$00,$02,$00,$00,$20,$00,$01,$80,$00,$04,$00,$00,$40,$00,$06,$08,$00,$80,$00,$00,$00,$00,$BD
  55+ E6A4 24 93 00 10
  55+ E6A8 60 00 02 00
  55+ E6AC 00 20 00 01
  55+ E6B0 80 00 04 00
  55+ E6B4 00 40 00 06
  55+ E6B8 08 00 80 00
  55+ E6BC 00 00 00 BD
  56+ E6C0 80 00 00 00      DB $80,$00,$00,$00,$00,$01,$00,$00,$03,$02,$00,$00,$04,$00,$00,$01,$80,$00,$00,$20,$00,$00,$00,$C0,$00,$00,$80,$00,$00,$00,$00,$B9
  56+ E6C4 00 01 00 00
  56+ E6C8 03 02 00 00
  56+ E6CC 04 00 00 01
  56+ E6D0 80 00 00 20
  56+ E6D4 00 00 00 C0
  56+ E6D8 00 00 80 00
  56+ E6DC 00 00 00 B9
  57+ E6E0 B8 00 00 00      DB $B8,$00,$00,$00,$00,$01,$00,$00,$00,$00,$00,$00,$00,$00,$0F,$FF,$FF,$F0,$00,$00,$00,$00,$00,$00,$00,$00,$80,$00,$00,$00,$00,$89
  57+ E6E4 00 01 00 00
  57+ E6E8 00 00 00 00
  57+ E6EC 00 00 0F FF
  57+ E6F0 FF F0 00 00
  57+ E6F4 00 00 00 00
  57+ E6F8 00 00 80 00
  57+ E6FC 00 00 00 89
  58+ E700 80 C3 FF FF      DB $80,$C3,$FF,$FF,$FF,$FF,$60,$08,$03,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$60,$08,$03,$FF,$FF,$FF,$FF,$00,$61 ; row 8
  58+ E704 FF FF 60 08
  58+ E708 03 00 00 00
  58+ E70C 00 00 00 00
  58+ E710 00 00 00 00
  58+ E714 00 00 00 60
  58+ E718 08 03 FF FF
  58+ E71C FF FF 00 61
  59+ E720 FF FF FF FF      DB $FF,$FF,$FF,$FF,$FF,$FF,$20,$00,$02,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$20,$00,$02,$FF,$FF,$FF,$FF,$00,$01
  59+ E724 FF FF 20 00
  59+ E728 02 00 00 00
  59+ E72C 00 00 00 00
  59+ E730 00 00 00 00
  59+ E734 00 00 00 20
  59+ E738 00 02 FF FF
  59+ E73C FF FF 00 01
  60+ E740 80 00 FF FF      DB $80,$00,$FF,$FF,$FF,$FF,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$FF,$FF,$FF,$FF,$00,$01
  60+ E744 FF FF 00 00
  60+ E748 00 00 00 00
  60+ E74C 00 00 00 00
  60+ E750 00 00 00 00
  60+ E754 00 00 00 00
  60+ E758 00 00 FF FF
  60+ E75C FF FF 00 01
  61+ E760 80 00 FF FF      DB $80,$00,$FF,$FF,$FF,$FF,$00,$00,$00,$00,$7D,$8A,$AE,$BA,$AA,$AA,$55,$55,$5D,$75,$51,$BE,$00,$00,$00,$00,$80,$00,$00,$00,$00,$01
  61+ E764 FF FF 00 00
  61+ E768 00 00 7D 8A
  61+ E76C AE BA AA AA
  61+ E770 55 55 5D 75
  61+ E774 51 BE 00 00
  61+ E778 00 00 80 00
  61+ E77C 00 00 00 01
  62+ E780 80 00 FF FF      DB $80,$00,$FF,$FF,$FF,$FF,$00,$03,$00,$08,$00,$04,$00,$02,$00,$81,$81,$00,$40,$00,$20,$00,$10,$00,$C0,$00,$FF,$FF,$FF,$FF,$FF,$FF
  62+ E784 FF FF 00 03
  62+ E788 00 08 00 04
  62+ E78C 00 02 00 81
  62+ E790 81 00 40 00
  62+ E794 20 00 10 00
  62+ E798 C0 00 FF FF
  62+ E79C FF FF FF FF
  63+ E7A0 80 00 FF FF      DB $80,$00,$FF,$FF,$FF,$FF,$00,$08,$C0,$00,$04,$00,$00,$40,$00,$01,$80,$00,$02,$00,$00,$20,$00,$03,$10,$00,$FF,$FF,$FF,$FF,$FF,$FF
  63+ E7A4 FF FF 00 08
  63+ E7A8 C0 00 04 00
  63+ E7AC 00 40 00 01
  63+ E7B0 80 00 02 00
  63+ E7B4 00 20 00 03
  63+ E7B8 10 00 FF FF
  63+ E7BC FF FF FF FF
  64+ E7C0 80 00 00 00      DB $80,$00,$00,$00,$00,$01,$00,$00,$00,$E4,$00,$00,$08,$00,$00,$01,$80,$00,$00,$10,$00,$00,$27,$00,$00,$00,$FF,$FF,$FF,$FF,$FF,$FF
  64+ E7C4 00 01 00 00
  64+ E7C8 00 E4 00 00
  64+ E7CC 08 00 00 01
  64+ E7D0 80 00 00 10
  64+ E7D4 00 00 27 00
  64+ E7D8 00 00 FF FF
  64+ E7DC FF FF FF FF
  65+ E7E0 FF FF FF FF      DB $FF,$FF,$FF,$FF,$FF,$FF,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$FF,$FF,$FF,$FF,$FF,$FF
  65+ E7E4 FF FF 00 00
  65+ E7E8 00 00 00 00
  65+ E7EC 00 00 00 00
  65+ E7F0 00 00 00 00
  65+ E7F4 00 00 00 00
  65+ E7F8 00 00 FF FF
  65+ E7FC FF FF FF FF
  66+ E800              ConsoleAttributes:
  67+ E800 07 07 07 07      DB $07,$07,$07,$07,$07,$07,$45,$45,$45,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$41,$41,$41,$07,$07,$07,$07,$07,$07
  67+ E804 07 07 45 45
  67+ E808 45 00 00 00
  67+ E80C 00 00 00 00
  67+ E810 00 00 00 00
  67+ E814 00 00 00 41
  67+ E818 41 41 07 07
  67+ E81C 07 07 07 07
  68+ E820 07 07 07 07      DB $07,$07,$07,$07,$07,$07,$05,$45,$05,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$01,$41,$01,$07,$07,$07,$07,$07,$07
  68+ E824 07 07 05 45
  68+ E828 05 00 00 00
  68+ E82C 00 00 00 00
  68+ E830 00 00 00 00
  68+ E834 00 00 00 01
  68+ E838 41 01 07 07
  68+ E83C 07 07 07 07
  69+ E840 07 07 07 07      DB $07,$07,$07,$07,$07,$07,$45,$45,$45,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$41,$41,$41,$07,$07,$07,$07,$07,$07
  69+ E844 07 07 45 45
  69+ E848 45 00 00 00
  69+ E84C 00 00 00 00
  69+ E850 00 00 00 00
  69+ E854 00 00 00 41
  69+ E858 41 41 07 07
  69+ E85C 07 07 07 07
  70+ E860 07 07 07 07      DB $07,$07,$07,$07,$07,$07,$00,$00,$00,$00,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$00,$00,$00,$00,$07,$00,$00,$00,$00,$07
  70+ E864 07 07 00 00
  70+ E868 00 00 42 42
  70+ E86C 42 42 42 42
  70+ E870 42 42 42 42
  70+ E874 42 42 00 00
  70+ E878 00 00 07 00
  70+ E87C 00 00 00 07
  71+ E880 07 07 07 07      DB $07,$07,$07,$07,$07,$07,$00,$02,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$02,$00,$07,$07,$07,$07,$07,$07
  71+ E884 07 07 00 02
  71+ E888 42 42 42 42
  71+ E88C 42 42 42 42
  71+ E890 42 42 42 42
  71+ E894 42 42 42 42
  71+ E898 02 00 07 07
  71+ E89C 07 07 07 07
  72+ E8A0 07 07 07 07      DB $07,$07,$07,$07,$07,$07,$00,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$00,$07,$07,$07,$07,$07,$07
  72+ E8A4 07 07 00 02
  72+ E8A8 02 02 02 02
  72+ E8AC 02 02 02 02
  72+ E8B0 02 02 02 02
  72+ E8B4 02 02 02 02
  72+ E8B8 02 00 07 07
  72+ E8BC 07 07 07 07
  73+ E8C0 07 00 00 00      DB $07,$00,$00,$00,$00,$07,$00,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$00,$07,$07,$07,$07,$07,$07
  73+ E8C4 00 07 00 02
  73+ E8C8 02 02 02 02
  73+ E8CC 02 02 02 02
  73+ E8D0 02 02 02 02
  73+ E8D4 02 02 02 02
  73+ E8D8 02 00 07 07
  73+ E8DC 07 07 07 07
  74+ E8E0 07 07 07 07      DB $07,$07,$07,$07,$07,$07,$00,$00,$00,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$00,$00,$00,$07,$07,$07,$07,$07,$07
  74+ E8E4 07 07 00 00
  74+ E8E8 00 02 02 02
  74+ E8EC 02 02 02 02
  74+ E8F0 02 02 02 02
  74+ E8F4 02 02 02 00
  74+ E8F8 00 00 07 07
  74+ E8FC 07 07 07 07
  75+ E900
  76+ E900
# file closed: ./Images/ConsoleImageData.asm
1323  E900              ; Bank 62  ------------------------------------------------------------------------------------------------------------------------
1324  E900                  SLOT    ViewFrontAddr
1325  E900                  PAGE    BankFrontView
1326  E900                  ORG     ViewFrontAddr
1327  C000                  INCLUDE "./Views/Front_View.asm"
# file opened: ./Views/Front_View.asm
   1+ C000 46 72 6F 6E  front_page_page_marker  DB "FrontView   PG62"
   1+ C004 74 56 69 65
   1+ C008 77 20 20 20
   1+ C00C 50 47 36 32
   2+ C010
   3+ C010 47           draw_front_calc_alpha:  ld      b,a
   4+ C011 E6 80                                and     $80
   5+ C013 32 3F 98                             ld      (ALP2),a                            ; set sign
   6+ C016 4F                                   ld      c,a                                 ; save sign
   7+ C017 EE 80                                xor     $80
   8+ C019 32 40 98                             ld      (ALP2FLIP),a                        ; and oppsite sign
   9+ C01C 3A 3B 98                             ld      a,(JSTX)
  10+ C01F ED 27 80                             test    $80
  11+ C022 28 02                                jr      z,  .PositiveRoll
  12+ C024 ED 44        .NegativeRoll:          neg
  13+ C026 CB 3F        .PositiveRoll           srl     a                                   ; divide sign by 4
  14+ C028 CB 3F                                srl     a
  15+ C02A FE 08                                cp      8
  16+ C02C 38 02                                jr      c,.NotIncreasedDamp                 ; if a < 8 divide by 2 again
  17+ C02E CB 3F        .IncreasedDamp          srl     a
  18+ C030 32 3E 98     .NotIncreasedDamp:      ld      (ALP1),a
  19+ C033 B1                                   or      c
  20+ C034 32 3D 98                             ld      (ALPHA),a                           ; a = signed bit alph1
  21+ C037 21 70 C2     .RestartDampenRoll:     ld      hl,dampenRcounter
  22+ C03A 36 04                                ld      (hl),dampenRate
  23+ C03C C9                                   ret
  24+ C03D
  25+ C03D              ; Do the same for pitch
  26+ C03D 47           draw_front_calc_beta:   ld      b,a
  27+ C03E E6 80                                and     $80
  28+ C040 32 32 98                             ld      (BET2),a                            ; set sign
  29+ C043 4F                                   ld      c,a                                 ; save sign
  30+ C044 EE 80                                xor     $80
  31+ C046 32 33 98                             ld      (BET2FLIP),a                        ; and oppsite sign
  32+ C049 3A 30 98                             ld      a,(JSTY)
  33+ C04C ED 27 80                             test    $80
  34+ C04F 28 02                                jr      z,  .PositivePitch
  35+ C051 ED 44        .NegativePitch:         neg
  36+ C053 CB 3F        .PositivePitch:         srl     a                                   ; divide sign by 4
  37+ C055 CB 3F                                srl     a
  38+ C057 FE 08                                cp      8
  39+ C059 38 02                                jr      c,.NotIncreasedDamp                 ; if a < 8 divide by 2 again
  40+ C05B CB 3F        .IncreasedDamp          srl     a
  41+ C05D 32 31 98     .NotIncreasedDamp:      ld      (BET1),a
  42+ C060 B1                                   or      c
  43+ C061 32 2F 98                             ld      (BETA),a                            ; a = signed bit bet1
  44+ C064 21 71 C2     .RestartDampenPitch:    ld      hl,dampenPcounter          ; TODO mach dampen rates ship properies by having teh $20 as a ship config
  45+ C067 36 04                                ld      (hl),dampenRate
  46+ C069 C9                                   ret
  47+ C06A
  48+ C06A              draw_front_view:        MMUSelectLayer1
  48+ C06A ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
  49+ C06E CD 80 E0                             call    l1_cls
  50+ C071 CD 9A E0                             call    l1_attr_cls
  51+ C074                                      MMUSelectLayer2
  51+ C074 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
  52+ C078 CD 02 E0                             call     asm_l2_double_buffer_on
  53+ C07B                                      MMUSelectSpriteBank
  53+ C07B ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
  54+ C07F CD 27 E4                             call    sprite_cls_cursors
  55+ C082 CD 36 E1                             call    sprite_reticule
  56+ C085 CD C5 E1                             call    sprite_laser
  57+ C088                                     ; call    sprite_laser_show
  58+ C088                                      MMUSelectConsoleBank
  58+ C088 ED 91 57 3D >					 nextreg ConsoleImageDataMMU,  BankConsole
  59+ C08C 21 00 50                             ld          hl,ScreenL1Bottom       ; now the pointers are in Ubnk its easy to read
  60+ C08F 11 00 E0                             ld          de,ConsoleImageData
  61+ C092 01 00 08                             ld          bc, ScreenL1BottomLen
  62+ C095 CD 4E 95                             call        memcopy_dma
  63+ C098 21 00 5A                             ld          hl,ScreenL1AttrBtm       ; now the pointers are in Ubnk its easy to read
  64+ C09B 11 00 E8                             ld          de,ConsoleAttributes
  65+ C09E 01 00 01                             ld          bc, ScreenL1AttrBtmLen
  66+ C0A1 CD 4E 95                             call        memcopy_dma
  67+ C0A4 CD 1C 93                             call        InitialiseStars
  68+ C0A7 AF                                   xor         a
  69+ C0A8 32 36 99                             ld          (DockedFlag),a              ; we can never be docked if we hit a view screen
  70+ C0AB C9                                   ret
  71+ C0AC
  72+ C0AC
  73+ C0AC
  74+ C0AC
  75+ C0AC                                      ;  1......................  2......................  3......................  4......................  5......................  6...................... 7......................  8......................
  76+ C0AC                                      ;  1......................  2......................  3......................  4......................  5......................  6...................... 7......................  8......................
  77+ C0AC 80 40 60 28  LightningLines:         db 128, 064, 096, 040, 255, 097, 042, 076, 035, 031, 082, 039, 079, 020, 026, 079, 026, 058, 018, 022, 064, 021, 032, 026, 018, 038, 025, 030, 009, 026, 035, 020, 005, 016, 018, 037, 021, 000, 000, 018
  77+ C0B0 FF 61 2A 4C
  77+ C0B4 23 1F 52 27
  77+ C0B8 4F 14 1A 4F
  77+ C0BC 1A 3A 12 16
  77+ C0C0 40 15 20 1A
  77+ C0C4 12 26 19 1E
  77+ C0C8 09 1A 23 14
  77+ C0CC 05 10 12 25
  77+ C0D0 15 00 00 12
  78+ C0D4 80 40 8B 28                          db 128, 064, 139, 040, 255, 137, 045, 160, 035, 031, 150, 040, 157, 056, 026, 160, 036, 175, 010, 022, 156, 037, 196, 040, 018, 197, 041, 223, 033, 026, 223, 033, 245, 030, 018, 223, 032, 254, 047, 018
  78+ C0D8 FF 89 2D A0
  78+ C0DC 23 1F 96 28
  78+ C0E0 9D 38 1A A0
  78+ C0E4 24 AF 0A 16
  78+ C0E8 9C 25 C4 28
  78+ C0EC 12 C5 29 DF
  78+ C0F0 21 1A DF 21
  78+ C0F4 F5 1E 12 DF
  78+ C0F8 20 FE 2F 12
  79+ C0FC 80 40 5A 59                          db 128, 064, 090, 089, 255, 089, 089, 064, 098, 031, 079, 092, 064, 072, 025, 065, 075, 030, 070, 022, 035, 071, 038, 064, 018, 067, 095, 021, 099, 026, 031, 097, 000, 080, 018, 031, 097, 021, 110, 018
  79+ C100 FF 59 59 40
  79+ C104 62 1F 4F 5C
  79+ C108 40 48 19 41
  79+ C10C 4B 1E 46 16
  79+ C110 23 47 26 40
  79+ C114 12 43 5F 15
  79+ C118 63 1A 1F 61
  79+ C11C 00 50 12 1F
  79+ C120 61 15 6E 12
  80+ C124 80 40 61 71                          db 128, 064, 097, 113, 255, 098, 110, 064, 115, 031, 070, 115, 073, 127, 025, 071, 114, 060, 112, 022, 030, 120, 020, 126, 018, 070, 114, 050, 120, 026, 050, 120, 027, 119, 018, 020, 125, 010, 120, 018
  80+ C128 FF 62 6E 40
  80+ C12C 73 1F 46 73
  80+ C130 49 7F 19 47
  80+ C134 72 3C 70 16
  80+ C138 1E 78 14 7E
  80+ C13C 12 46 72 32
  80+ C140 78 1A 32 78
  80+ C144 1B 77 12 14
  80+ C148 7D 0A 78 12
  81+ C14C 80 40 84 59                          db 128, 064, 132, 089, 255, 131, 081, 145, 098, 031, 145, 097, 133, 103, 025, 145, 098, 150, 110, 022, 150, 109, 154, 105, 018, 150, 110, 146, 120, 026, 145, 120, 140, 126, 018, 147, 120, 159, 126, 018
  81+ C150 FF 83 51 91
  81+ C154 62 1F 91 61
  81+ C158 85 67 19 91
  81+ C15C 62 96 6E 16
  81+ C160 96 6D 9A 69
  81+ C164 12 96 6E 92
  81+ C168 78 1A 91 78
  81+ C16C 8C 7E 12 93
  81+ C170 78 9F 7E 12
  82+ C174 80 40 9F 67                          db 128, 064, 159, 103, 255, 161, 102, 171, 108, 031, 160, 102, 175, 127, 025, 175, 124, 200, 122, 022, 200, 121, 223, 120, 018, 224, 120, 225, 127, 026, 224, 119, 245, 116, 018, 246, 117, 254, 123, 018
  82+ C178 FF A1 66 AB
  82+ C17C 6C 1F A0 66
  82+ C180 AF 7F 19 AF
  82+ C184 7C C8 7A 16
  82+ C188 C8 79 DF 78
  82+ C18C 12 E0 78 E1
  82+ C190 7F 1A E0 77
  82+ C194 F5 74 12 F6
  82+ C198 75 FE 7B 12
  83+ C19C 80 40 91 4A                          db 128, 064, 145, 074, 255, 145, 073, 158, 072, 031, 159, 072, 179, 064, 025, 159, 073, 185, 085, 022, 182, 084, 197, 076, 018, 195, 075, 207, 079, 026, 206, 079, 245, 063, 018, 206, 080, 245, 105, 018
  83+ C1A0 FF 91 49 9E
  83+ C1A4 48 1F 9F 48
  83+ C1A8 B3 40 19 9F
  83+ C1AC 49 B9 55 16
  83+ C1B0 B6 54 C5 4C
  83+ C1B4 12 C3 4B CF
  83+ C1B8 4F 1A CE 4F
  83+ C1BC F5 3F 12 CE
  83+ C1C0 50 F5 69 12
  84+ C1C4
  85+ C1C4              ; Draw line at hl for b lines
  86+ C1C4 E5 C5        DrawLighningLine:       push    hl,,bc
  87+ C1C6 4E                                   ld      c,(hl)
  88+ C1C7 23                                   inc     hl
  89+ C1C8 46                                   ld      b,(hl)
  90+ C1C9 23                                   inc     hl
  91+ C1CA 5E                                   ld      e,(hl)
  92+ C1CB 23                                   inc     hl
  93+ C1CC 56                                   ld      d,(hl)
  94+ C1CD 23                                   inc     hl
  95+ C1CE 7E                                   ld      a,(hl)          ; colour
  96+ C1CF CD 09 E6                             call    l2_draw_diagonal
  97+ C1D2 C1 E1                                pop     hl,,bc
  98+ C1D4 3E 05                                ld      a,5
  99+ C1D6 ED 31                                add     hl,a
 100+ C1D8 10 EA                                djnz    DrawLighningLine
 101+ C1DA C9                                   ret
 102+ C1DB
 103+ C1DB              ;Loop though all lines
 104+ C1DB              ;   60$% chance of drawing a line, call draw line
 105+ C1DB              ;   go to next line
 106+ C1DB              ;repeat
 107+ C1DB 06 07        hyperspace_Lightning:   ld      b, 7                    ; total number of lightning bolts
 108+ C1DD 21 AC C0                             ld      hl,LightningLines
 109+ C1E0                                      MMUSelectLayer2
 109+ C1E0 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 110+ C1E4                                      ;break
 111+ C1E4              ; above here select which lines table we will use
 112+ C1E4 C5 E5        .LineLoop:              push    bc,,hl
 113+ C1E6 CD D0 9D                             call    doRandom
 114+ C1E9 FE 1E                                cp      30
 115+ C1EB 30 0C                                jr      nc,.NextLine
 116+ C1ED CD D0 9D                             call    doRandom
 117+ C1F0 E6 07                                and     $07
 118+ C1F2 3C                                   inc     a
 119+ C1F3 47                                   ld      b,a
 120+ C1F4 E1                                   pop     hl
 121+ C1F5 E5                                   push    hl
 122+ C1F6 CD C4 C1                             call    DrawLighningLine
 123+ C1F9 E1 C1        .NextLine:              pop     bc,,hl
 124+ C1FB 16 08                                ld      d,8
 125+ C1FD 1E 05                                ld      e,5
 126+ C1FF ED 30                                mul
 127+ C201 19                                   add     hl,de
 128+ C202 10 E0                                djnz    .LineLoop
 129+ C204 3A F0 99                             ld      a,(HyperCircle)
 130+ C207 57                                   ld      d,a
 131+ C208 01 80 40                             ld      bc, $4080
 132+ C20B                                      ;break
 133+ C20B 1E 00                                ld      e,$00
 134+ C20D CD 0F E8                             call    l2_draw_circle_fill; ; ">l2_draw_circle_fill BC = center row col, d = radius, e = colour"
 135+ C210 01 80 40                             ld      bc, $4080
 136+ C213 3A F0 99                             ld      a,(HyperCircle)
 137+ C216 3C                                   inc     a
 138+ C217 57                                   ld      d,a
 139+ C218 1E FF                                ld      e,$FF
 140+ C21A CD 56 E7                             call    l2_draw_circle
 141+ C21D 3A F0 99                             ld      a,(HyperCircle)
 142+ C220 3C                                   inc     a
 143+ C221 3C                                   inc     a
 144+ C222 FE 40                                cp      64
 145+ C224 D0                                   ret     nc
 146+ C225 32 F0 99                             ld      (HyperCircle),a
 147+ C228                                      SetCarryFlag
 147+ C228 37          >                        scf
 148+ C229 C9                                   ret
 149+ C22A
 150+ C22A
 151+ C22A              draw_hyperspace:        MMUSelectLayer1
 151+ C22A ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 152+ C22E CD 80 E0                             call    l1_cls
 153+ C231 CD 9A E0                             call    l1_attr_cls
 154+ C234                                      MMUSelectLayer2
 154+ C234 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 155+ C238 CD 02 E0                             call     asm_l2_double_buffer_on
 156+ C23B                                      MMUSelectSpriteBank
 156+ C23B ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
 157+ C23F CD 27 E4                             call    sprite_cls_cursors
 158+ C242                                      MMUSelectConsoleBank
 158+ C242 ED 91 57 3D >					 nextreg ConsoleImageDataMMU,  BankConsole
 159+ C246 21 00 50                             ld          hl,ScreenL1Bottom       ; now the pointers are in Ubnk its easy to read
 160+ C249 11 00 E0                             ld          de,ConsoleImageData
 161+ C24C 01 00 08                             ld          bc, ScreenL1BottomLen
 162+ C24F CD 4E 95                             call        memcopy_dma
 163+ C252 21 00 5A                             ld          hl,ScreenL1AttrBtm       ; now the pointers are in Ubnk its easy to read
 164+ C255 11 00 E8                             ld          de,ConsoleAttributes
 165+ C258 01 00 01                             ld          bc, ScreenL1AttrBtmLen
 166+ C25B CD 4E 95                             call        memcopy_dma
 167+ C25E CD 27 93                             call        InitialiseHyperStars
 168+ C261 AF                                   xor         a
 169+ C262 32 36 99                             ld          (DockedFlag),a              ; we can never be docked if we hit a view screen
 170+ C265 3E 02                                ld          a,2
 171+ C267 32 F0 99                             ld          (HyperCircle),a
 172+ C26A 3E FC                                ld          a,$FC
 173+ C26C 32 36 99                             ld          (DockedFlag),a
 174+ C26F C9                                   ret
 175+ C270
 176+ C270
 177+ C270              loop_hyperspace
 178+ C270
 179+ C270              dampenRate:             equ     $04
 180+ C270 04           dampenRcounter:         DB      dampenRate
 181+ C271 04           dampenPcounter:         DB      dampenRate
 182+ C272 AF           input_front_view:       xor         a
 183+ C273 2A BA 95                             ld      hl,(addr_Pressed_Accellerate)
 184+ C276 7E                                   ld      a,(hl)
 185+ C277                                      JumpIfAIsZero     TestDecellerate
 185+ C277 A7          >                        and a   ; cp 0 - changed to and a for optimisation but affects other flags
 185+ C278 CA 94 C2    >                        jp	z, TestDecellerate
 186+ C27B 3A 22 99                             ld      a,(SHIPMAXSPEED)
 187+ C27E 57                                   ld      d,a
 188+ C27F 3A 23 99                             ld      a,(DELTA)
 189+ C282                                      JumpIfAGTENusng d,TestDecellerate
 189+ C282 BA          >                        cp     d
 189+ C283 D2 94 C2    >                        jp		nc,TestDecellerate
 190+ C286 3C                                   inc     a
 191+ C287 32 23 99                             ld      (DELTA),a
 192+ C28A 2A 24 99                             ld      hl,(DELT4Lo)
 193+ C28D ED 34 04 00                          add     hl,4
 194+ C291 22 24 99                             ld      (DELT4Lo),hl
 195+ C294 2A BC 95     TestDecellerate:        ld      hl,(addr_Pressed_Decellerate)
 196+ C297 7E                                   ld      a,(hl)
 197+ C298                                      JumpIfAIsZero   TestLeftPressed
 197+ C298 A7          >                        and a   ; cp 0 - changed to and a for optimisation but affects other flags
 197+ C299 CA B1 C2    >                        jp	z, TestLeftPressed
 198+ C29C 3A 23 99                             ld      a,(DELTA)
 199+ C29F                                      JumpIfAIsZero   TestLeftPressed
 199+ C29F A7          >                        and a   ; cp 0 - changed to and a for optimisation but affects other flags
 199+ C2A0 CA B1 C2    >                        jp	z, TestLeftPressed
 200+ C2A3 3D                                   dec     a
 201+ C2A4 32 23 99                             ld      (DELTA),a
 202+ C2A7 2A 24 99                             ld      hl,(DELT4Lo)
 203+ C2AA 2B                                   dec     hl
 204+ C2AB 2B                                   dec     hl
 205+ C2AC 2B                                   dec     hl
 206+ C2AD 2B                                   dec     hl
 207+ C2AE 22 24 99                             ld      (DELT4Lo),hl
 208+ C2B1 2A B2 95     TestLeftPressed:        ld      hl,(addr_Pressed_RollLeft)
 209+ C2B4 7E                                   ld      a,(hl)
 210+ C2B5                                      JumpIfAIsZero   TestRightPressed
 210+ C2B5 A7          >                        and a   ; cp 0 - changed to and a for optimisation but affects other flags
 210+ C2B6 CA CC C2    >                        jp	z, TestRightPressed
 211+ C2B9 3A 3B 98                             ld      a,(JSTX)                            ; have we maxed out Joystick?
 212+ C2BC 21 42 98                             ld      hl,ALP1MAXL                         ; currnet ship max left roll
 213+ C2BF BE                                   cp      (hl)
 214+ C2C0 28 0A                                jr      z,TestRightPressed
 215+ C2C2                                      ;break
 216+ C2C2 3D                                   dec     a                                   ; increase joystick roll
 217+ C2C3 32 3B 98                             ld      (JSTX),a
 218+ C2C6 CD 10 C0                             call    draw_front_calc_alpha
 219+ C2C9 C3 01 C3                             jp      TestDivePressed                    ; when pressing ignore damper
 220+ C2CC 2A B4 95     TestRightPressed:       ld      hl,(addr_Pressed_RollRight)
 221+ C2CF 7E                                   ld      a,(hl)
 222+ C2D0                                      JumpIfAIsZero   .DampenRoll
 222+ C2D0 A7          >                        and a   ; cp 0 - changed to and a for optimisation but affects other flags
 222+ C2D1 CA E7 C2    >                        jp	z, .DampenRoll
 223+ C2D4 3A 3B 98                             ld      a,(JSTX)                            ; have we maxed out Joystick?
 224+ C2D7 21 41 98                             ld      hl,ALP1MAXR                         ; currnet ship max left roll
 225+ C2DA BE                                   cp      (hl)
 226+ C2DB 28 24                                jr      z,TestDivePressed                   ; if its held then we don't dampen
 227+ C2DD                                      ;break
 228+ C2DD 3C                                   inc     a                                   ; increase joystick roll
 229+ C2DE 32 3B 98     .UpdateAlphRoll:        ld      (JSTX),a
 230+ C2E1 CD 10 C0                             call    draw_front_calc_alpha
 231+ C2E4 C3 01 C3                             jp      TestDivePressed                    ; when pressing ignore damper
 232+ C2E7 21 70 C2     .DampenRoll:            ld      hl,dampenRcounter
 233+ C2EA 35                                   dec     (hl)
 234+ C2EB 20 14                                jr      nz,TestDivePressed
 235+ C2ED 3E 04                                ld      a,dampenRate
 236+ C2EF 77                                   ld      (hl),a
 237+ C2F0 3A 3B 98                             ld      a,(JSTX)
 238+ C2F3 FE 00                                cp      0
 239+ C2F5 28 0A                                jr      z, TestDivePressed
 240+ C2F7 CB 7F                                bit     7,a
 241+ C2F9 28 03                                jr      z,.PosRollDampen
 242+ C2FB 3C           .NegRollDampen:         inc     a
 243+ C2FC 18 01                                jr      .ApplyRollDampen
 244+ C2FE 3D           .PosRollDampen:         dec     a
 245+ C2FF 18 DD        .ApplyRollDampen:       jr      .UpdateAlphRoll
 246+ C301              ; Dive and Climb input
 247+ C301 2A B6 95     TestDivePressed:        ld      hl,(addr_Pressed_Dive)
 248+ C304 7E                                   ld      a,(hl)
 249+ C305                                      JumpIfAIsZero   TestClimbPressed
 249+ C305 A7          >                        and a   ; cp 0 - changed to and a for optimisation but affects other flags
 249+ C306 CA 1C C3    >                        jp	z, TestClimbPressed
 250+ C309 3A 30 98                             ld      a,(JSTY)                            ; have we maxed out Joystick?
 251+ C30C 21 35 98                             ld      hl,BET1MAXD                         ; currnet ship max left roll
 252+ C30F BE                                   cp      (hl)
 253+ C310 28 0A                                jr      z,TestClimbPressed
 254+ C312                                      ;break
 255+ C312 3D                                   dec     a                                   ; increase joystick roll
 256+ C313 32 30 98                             ld      (JSTY),a
 257+ C316 CD 3D C0                             call    draw_front_calc_beta
 258+ C319 C3 51 C3                             jp      ForwardCursorKeysDone
 259+ C31C 2A B8 95     TestClimbPressed:       ld      hl,(addr_Pressed_Climb)
 260+ C31F 7E                                   ld      a,(hl)
 261+ C320                                      JumpIfAIsZero   .DampenPitch
 261+ C320 A7          >                        and a   ; cp 0 - changed to and a for optimisation but affects other flags
 261+ C321 CA 37 C3    >                        jp	z, .DampenPitch
 262+ C324 3A 30 98                             ld      a,(JSTY)                            ; have we maxed out Joystick?
 263+ C327 21 34 98                             ld      hl,BET1MAXC                         ; currnet ship max left roll
 264+ C32A BE                                   cp      (hl)
 265+ C32B 28 24                                jr      z,ForwardCursorKeysDone
 266+ C32D 3C                                   inc     a                                   ; increase joystick roll
 267+ C32E 32 30 98     .UpdateBetaPitch:       ld      (JSTY),a
 268+ C331 CD 3D C0                             call    draw_front_calc_beta
 269+ C334 C3 51 C3                             jp      ForwardCursorKeysDone
 270+ C337 21 71 C2     .DampenPitch:           ld      hl,dampenPcounter          ; TODO mach dampen rates ship properies by having teh $20 as a ship config
 271+ C33A 35                                   dec     (hl)
 272+ C33B 20 14                                jr      nz,ForwardCursorKeysDone
 273+ C33D 3E 04                                ld      a,dampenRate
 274+ C33F 77                                   ld      (hl),a
 275+ C340 3A 30 98                             ld      a,(JSTY)
 276+ C343 FE 00                                cp      0
 277+ C345 28 0A                                jr      z,ForwardCursorKeysDone
 278+ C347 CB 7F                                bit     7,a
 279+ C349 28 03                                jr      z,.PosPitchDampen
 280+ C34B 3C           .NegPitchDampen:        inc     a
 281+ C34C 18 01                                jr      .ApplyPitchDampen
 282+ C34E 3D           .PosPitchDampen:        dec     a
 283+ C34F 18 DD        .ApplyPitchDampen:      jr      .UpdateBetaPitch
 284+ C351              ; Now test hyperpsace. We can't be docked as this is a view routine piece of logic but for say local charts we may
 285+ C351              ; be in flight and they have to force a forward view when hyperspace is pressed
 286+ C351              ; We won't do galatic here, but for other views force to forward view
 287+ C351 3E 24        ForwardCursorKeysDone:  ld      a,c_Pressed_Hyperspace              ; Check for hyperspace
 288+ C353 CD 7C 96                             call    is_key_pressed
 289+ C356 20 48                                jr      nz,.NotHyperspace
 290+ C358              ; If we are in hyperspace countdown then test for hyperspace
 291+ C358 2A ED 99                             ld      hl,(InnerHyperCount)                ; if hyperspace was enaged then cancel
 292+ C35B 7C                                   ld      a,h                                 ; hyperspace
 293+ C35C B5                                   or      l                                   ; .
 294+ C35D 20 41                                jr      nz,.CancelHyperspace                ; .
 295+ C35F              ; check selected target if we find one then after gettting galaxy at bc a=0 if not found
 296+ C35F ED 5B 2F 9A                          ld      de,(PresentSystemX)
 297+ C363 2A 31 9A                             ld      hl,(TargetSystemX)
 298+ C366 CD 35 AD                             call    compare16HLDE
 299+ C369 28 35                                jr      z,.NoTargetSelected                 ; can't jump to current system
 300+ C36B 3A 1C 9A                             ld      a,(Galaxy)
 301+ C36E                                      MMUSelectGalaxyA
 301+ C36E ED 92 57    >                     nextreg GalaxyDataMMU,       a
 302+ C371 ED 4B 31 9A                          ld      bc,(TargetSystemX)
 303+ C375 CD BB FA                             call    galaxy_name_at_bc
 304+ C378 FE 00                                cp      0
 305+ C37A 28 24                                jr      z,.NotHyperspace
 306+ C37C              ; check fuel is sufficient
 307+ C37C ED 4B 2F 9A                          ld      bc,(PresentSystemX)
 308+ C380 ED 43 57 E8                          ld      (GalaxyPresentSystem),bc
 309+ C384 ED 4B 31 9A                          ld      bc,(TargetSystemX)
 310+ C388 ED 43 59 E8                          ld      (GalaxyDestinationSystem),bc
 311+ C38C CD F8 FB                             call    galaxy_find_distance            ; get distance into HL
 312+ C38F 7C                                   ld      a,h
 313+ C390 A7                                   and     a
 314+ C391 20 0D                                jr      nz,.InsufficientFuel            ; max jump capacity is 25 ly for any ship
 315+ C393 3A 75 9D                             ld      a,(Fuel)
 316+ C396                                      JumpIfALTNusng    l, .InsufficientFuel
 316+ C396 BD          >                        cp      l
 316+ C397 DA A0 C3    >                        jp		c, .InsufficientFuel
 317+ C39A              ; set up timer countdown
 318+ C39A 21 0B 0B                             ld      hl,HyperSpaceTimers                 ; set both timers to 15
 319+ C39D 22 ED 99                             ld      (InnerHyperCount),hl                ; .
 320+ C3A0              .CancelHyperspace
 321+ C3A0              .NoTargetSelected
 322+ C3A0              .InsufficientFuel
 323+ C3A0              .NotHyperspace:
 324+ C3A0              .CheckForLaserPressed:  SetMemFalse FireLaserPressed
 324+ C3A0 3E FF       >                        ld      a,$FF
 324+ C3A2 32 14 9A    >                        ld      (FireLaserPressed),a
 325+ C3A5 3A 3F 9C                             ld      a,(CurrLaserPulseOnCount)
 326+ C3A8 21 40 9C                             ld      hl,CurrLaserPulseOffCount
 327+ C3AB B6                                   or      (hl)
 328+ C3AC 23                                   inc     hl  ; CurrLaserPulseOffCount
 329+ C3AD B6                                   or      (hl)                                ;
 330+ C3AE 23                                   inc     hl  ; CurrLaserPulseRestCount
 331+ C3AF B6                                   or      (hl)
 332+ C3B0 20 34                                jr      nz, .CheckForMissile                ; fire key locked as counters are running
 333+ C3B2 3E 14                                ld      a,c_Pressed_FireLaser               ; so no need to scan
 334+ C3B4 CD 7C 96                             call    is_key_pressed
 335+ C3B7 20 2D                                jr      nz,.CheckForMissile                 ; no key press then skip
 336+ C3B9 3A 42 9C     .CanProcesFire:         ld      a,(CurrLaserPulseRateCount)         ; one more pulse
 337+ C3BC 3C                                   inc     a
 338+ C3BD 21 3B 9C                             ld      hl,CurrLaserPulseRate               ; if we have hit limit then go into rest
 339+ C3C0 BE                                   cp      (hl)
 340+ C3C1 28 19                                jr      z,.PulseLimitReached
 341+ C3C3 32 42 9C     .StillHavePulsesLeft:   ld      (CurrLaserPulseRateCount),a         ; we have used a pulse
 342+ C3C6                                      SetMemTrue FireLaserPressed
 342+ C3C6 AF          >                        xor     a
 342+ C3C7 32 14 9A    >                        ld      (FireLaserPressed),a
 343+ C3CA                                      ldCopyByte CurrLaserPulseOnTime, CurrLaserPulseOnCount      ; set on time
 343+ C3CA 3A 3C 9C    >                        ld       a,(CurrLaserPulseOnTime)
 343+ C3CD 32 3F 9C    >                        ld       (CurrLaserPulseOnCount),a
 344+ C3D0                                      ldCopyByte CurrLaserPulseOffTime, CurrLaserPulseOffCount    ; set off time for later as these only count down when pulse is off
 344+ C3D0 3A 3D 9C    >                        ld       a,(CurrLaserPulseOffTime)
 344+ C3D3 32 40 9C    >                        ld       (CurrLaserPulseOffCount),a
 345+ C3D6                                      ldCopyByte CurrLaserPulseRest, CurrLaserPulseRateCount     ; set rest time for later
 345+ C3D6 3A 3E 9C    >                        ld       a,(CurrLaserPulseRest)
 345+ C3D9 32 42 9C    >                        ld       (CurrLaserPulseRateCount),a
 346+ C3DC              .PulseLimitReached:     ZeroA
 346+ C3DC AF          >                        xor a
 347+ C3DD 32 42 9C                             ld      (CurrLaserPulseRateCount),a
 348+ C3E0                                      ldCopyByte CurrLaserPulseRest, CurrLaserPulseRateCount   ; start the rest phase
 348+ C3E0 3A 3E 9C    >                        ld       a,(CurrLaserPulseRest)
 348+ C3E3 32 42 9C    >                        ld       (CurrLaserPulseRateCount),a
 349+ C3E6
 350+ C3E6 3E 18        .CheckForMissile:       ld      a,c_Pressed_FireMissile             ; launch pressed?
 351+ C3E8 CD 7C 96                             call    is_key_pressed
 352+ C3EB 20 1C                                jr      nz,.NotMissileLaunch
 353+ C3ED                                      AnyMissilesLeft
 353+ C3ED 3A 92 99    >                        ld      a,(NbrMissiles)
 353+ C3F0 A7          >                        and     a
 354+ C3F1 28 16                                jr      z,.NotMissileLaunch                 ; no missiles in rack
 355+ C3F3                                      IsMissileLockedOn
 355+ C3F3 3A 27 9C    >                        ld      a,(MissileTarget)
 355+ C3F6 FE FF       >                        cp      $FF
 355+ C3F8 C8          >                        ret     z
 355+ C3F9             >                        ReturnIfSlotAEmpty                  ; if target slot is empty
 355+ C3F9 21 F8 99    >                        ld      hl,UniverseSlotList
 355+ C3FC ED 31       >                        add     hl,a
 355+ C3FE 7E          >                        ld      a,(hl)
 355+ C3FF 3C          >                        inc     a
 355+ C400 C8          >                        ret     z           ; if slot was ff inc would make it 0
 355+ C401 3D          >                        dec     a           ; get original value back for later
 355+ C402 C9          >                        ret                                 ; will return as nz now
 356+ C403 28 04                                jr      z,.MissileNotLocked
 357+ C405              .MissileLaunch:         SetMemTrue  MissileLaunchFlag
 357+ C405 AF          >                        xor     a
 357+ C406 32 28 9C    >                        ld      (MissileLaunchFlag),a
 358+ C409              .MissileNotLocked:                       ; later on we need a "bing bong" nose for trying to launch an unlocked missile
 359+ C409              .NotMissileLaunch:
 360+ C409 C9                                   ret
 361+ C40A
 362+ C40A
 363+ C40A
 364+ C40A
 365+ C40A
 366+ C40A
 367+ C40A
# file closed: ./Views/Front_View.asm
1328  C40A              ; Bank 63  ------------------------------------------------------------------------------------------------------------------------
1329  C40A                  SLOT    MenuStatusAddr
1330  C40A                  PAGE    BankMenuStatus
1331  C40A                  ORG     MenuStatusAddr
1332  C000                  INCLUDE "./Menus/status_menu.asm"
# file opened: ./Menus/status_menu.asm
   1+ C000 53 74 61 74  status_page_marker  DB "Status      PG63"
   1+ C004 75 73 20 20
   1+ C008 20 20 20 20
   1+ C00C 50 47 36 33
   2+ C010
   3+ C010 40 02 7E B6  status_boiler_text		DW $0240,txt_commander
   4+ C014 90 02 29 9C  						DW $0290,CommanderName
   5+ C018 08 0B 92 B6  						DW $0B08,txt_present_system
   6+ C01C 08 13 A5 B6  						DW $1308,txt_hyperspace_system
   7+ C020 08 1B B8 B6  						DW $1B08,txt_condition
   8+ C024 08 23 C6 B6  						DW $2308,txt_fuel
   9+ C028 08 2B D4 B6  						DW $2B08,txt_cash
  10+ C02C 08 33 E2 B6  						DW $3308,txt_legal_status
  11+ C030 08 3B F0 B6  						DW $3B08,txt_rating
  12+ C034 08 4B FE B6  						DW $4B08,txt_equipment
  13+ C038
  14+ C038 00 00        equipment_cursor		DW  $0000
  15+ C03A              present_position		equ	$0B98
  16+ C03A              hyperspace_position		equ	$1398
  17+ C03A              condition_position		equ	$1B70
  18+ C03A              fuel_position			equ	$2370
  19+ C03A              cash_position			equ	$2B70
  20+ C03A              legal_status_position	equ $3370
  21+ C03A              rank_position			equ $3B70
  22+ C03A              equipment_position		equ $5340
  23+ C03A              equipment_position2		equ $5378
  24+ C03A              equipmax_row			equ $FF
  25+ C03A
  26+ C03A 00           STAT_selected_row       DB 0
  27+ C03B 00           STAT_current_topItem    DB 0
  28+ C03C 00           STAT_current_end        DB 0
  29+ C03D              STAT_buffer_rows         EQU     128
  30+ C03D              STAT_buffer_row_len      EQU     24
  31+ C03D              STAT_eqip_window_len    EQU 10
  32+ C03D              STAT_display_buff_len    EQU     STAT_buffer_rows *   STAT_buffer_row_len
  33+ C03D 00 00 00...  STAT_display_buffer:     DS      STAT_display_buff_len                     ; maxium of 128 items can be coded for
  34+ CC3D              STAT_position			equ $5840
  35+ CC3D 00 00 00...  STAT_cash_amount    	DS 10
  36+ CC47 20 43 72 00  STAT_cash_UoM           DB " Cr",0
  37+ CC4B
  38+ CC4B 00 00 00...  stat_present_name       DS  30
  39+ CC69 00                                   DB  0
  40+ CC6A 00 00 00...  stat_target_name        DS  30
  41+ CC88 00                                   DB  0
  42+ CC89
  43+ CC89 21 7F E8     stat_copy_to_name:      ld      hl,GalaxyExpandedName
  44+ CC8C 01 1E 00                             ld      bc,30
  45+ CC8F ED B0                                ldir
  46+ CC91 C9                                   ret
  47+ CC92
  48+ CC92              ;----------------------------------------------------------------------------------------------------------------------------------
  49+ CC92              STAT_print_boiler_text: INCLUDE "Menus/print_boiler_text_inlineInclude.asm"
# file opened: ./Menus/print_boiler_text_inlineInclude.asm
   1++CC92
   2++CC92              ;">print_boilder_text hl = text structure, b = message count"
   3++CC92              .BoilerTextLoop:
   4++CC92 C5           	push		bc			; Save Message Count loop value
   5++CC93 4E           	ld			c,(hl)		; Get Row into b
   6++CC94 23           	inc			hl
   7++CC95 46           	ld			b,(hl)		; Get Col into b
   8++CC96 23           	inc			hl
   9++CC97 5E           	ld			e,(hl)		; Get text address Lo into E
  10++CC98 23           	inc			hl
  11++CC99 56           	ld			d,(hl)		; Get text address Hi into E
  12++CC9A 23           	inc			hl
  13++CC9B E5           	push		hl			; Save present HL to stack as this is the address for the next message
  14++CC9C EB           	ex			de,hl		; now hl = address of text data
  15++CC9D 1E FF        	ld			e,txt_status_colour
  16++CC9F C5           	push		bc
  17++CCA0 D1           	pop			de
  18++CCA1                  MMUSelectLayer1
  18++CCA1 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
  19++CCA5 CD C8 E0     	call		l1_print_at
  20++CCA8 E1           	pop			hl
  21++CCA9 C1           	pop			bc
  22++CCAA 10 E6        	djnz		.BoilerTextLoop
  23++CCAC C9           	ret
  24++CCAD
# file closed: ./Menus/print_boiler_text_inlineInclude.asm
  50+ CCAD              ;----------------------------------------------------------------------------------------------------------------------------------
  51+ CCAD DD 22 51 CD  STAT_DispDEIXtoIY:      ld (.STATclcn32z),ix
  52+ CCB1 ED 53 53 CD                          ld (.STATclcn32zIX),de
  53+ CCB5 DD 21 4D CD                          ld ix,.STATclcn32t+36
  54+ CCB9 06 09                                ld b,9
  55+ CCBB 0E 00                                ld c,0
  56+ CCBD 3E 30        .STATclcn321:           ld a,'0'
  57+ CCBF B7                                   or a
  58+ CCC0 DD 5E 00     .STATclcn322:           ld e,(ix+0)
  59+ CCC3 DD 56 01                             ld d,(ix+1)
  60+ CCC6 2A 51 CD                             ld hl,(.STATclcn32z)
  61+ CCC9 ED 52                                sbc hl,de
  62+ CCCB 22 51 CD                             ld (.STATclcn32z),hl
  63+ CCCE DD 5E 02                             ld e,(ix+2)
  64+ CCD1 DD 56 03                             ld d,(ix+3)
  65+ CCD4 2A 53 CD                             ld hl,(.STATclcn32zIX)
  66+ CCD7 ED 52                                sbc hl,de
  67+ CCD9 22 53 CD                             ld (.STATclcn32zIX),hl
  68+ CCDC 38 04                                jr c,.STATclcn325
  69+ CCDE 0C                                   inc c
  70+ CCDF 3C                                   inc a
  71+ CCE0 18 DE                                jr .STATclcn322
  72+ CCE2 DD 5E 00     .STATclcn325:           ld e,(ix+0)
  73+ CCE5 DD 56 01                             ld d,(ix+1)
  74+ CCE8 2A 51 CD                             ld hl,(.STATclcn32z)
  75+ CCEB 19                                   add hl,de
  76+ CCEC 22 51 CD                             ld (.STATclcn32z),hl
  77+ CCEF DD 5E 02                             ld e,(ix+2)
  78+ CCF2 DD 56 03                             ld d,(ix+3)
  79+ CCF5 2A 53 CD                             ld hl,(.STATclcn32zIX)
  80+ CCF8 ED 5A                                adc hl,de
  81+ CCFA 22 53 CD                             ld (.STATclcn32zIX),hl
  82+ CCFD 11 FC FF                             ld de,-4
  83+ CD00 DD 19                                add ix,de
  84+ CD02 0C                                   inc c
  85+ CD03 0D                                   dec c
  86+ CD04 28 05                                jr z,.STATclcn323
  87+ CD06 FD 77 00                             ld (iy+0),a
  88+ CD09 FD 23                                inc iy
  89+ CD0B 10 B0        .STATclcn323:           djnz .STATclcn321
  90+ CD0D 3A 51 CD                             ld a,(.STATclcn32z)
  91+ CD10 C6 30                                add A,'0'
  92+ CD12 FD 77 00                             ld (iy+0),a
  93+ CD15 FD 36 02 00                          ld (iy+2),0
  94+ CD19 FD 7E 00                             ld      a,(IY+0)
  95+ CD1C FD 77 01                             ld      (IY+1),a
  96+ CD1F 3E 2E                                ld      a,"."
  97+ CD21 FD 77 00                             ld      (IY+0),a
  98+ CD24 FD 23                                inc     IY
  99+ CD26 FD 23                                inc     IY
 100+ CD28 C9                                   ret
 101+ CD29 01 00 00 00  .STATclcn32t            dw 1,0,     10,0,     100,0,     1000,0,       10000,0
 101+ CD2D 0A 00 00 00
 101+ CD31 64 00 00 00
 101+ CD35 E8 03 00 00
 101+ CD39 10 27 00 00
 102+ CD3D A0 86 01 00                          dw $86a0,1, $4240,$0f, $9680,$98, $e100,$05f5, $ca00,$3b9a
 102+ CD41 40 42 0F 00
 102+ CD45 80 96 98 00
 102+ CD49 00 E1 F5 05
 102+ CD4D 00 CA 9A 3B
 103+ CD51 00 00        .STATclcn32z            ds 2
 104+ CD53 00 00        .STATclcn32zIX          ds 2
 105+ CD55              ;----------------------------------------------------------------------------------------------------------------------------------
 106+ CD55 2A 73 9D     STAT_GetCash:           ld		hl,(Cash+2)
 107+ CD58 EB                                   ex      de,hl
 108+ CD59 DD 2A 71 9D                          ld      ix,(Cash)
 109+ CD5D FD 21 3D CC                          ld		iy,STAT_cash_amount
 110+ CD61 CD AD CC                             call 	STAT_DispDEIXtoIY
 111+ CD64 FD E5                                push    iy
 112+ CD66 D1                                   pop     de
 113+ CD67 21 47 CC                             ld      hl,STAT_cash_UoM
 114+ CD6A 01 04 00                             ld      bc,4
 115+ CD6D ED B0                                ldir
 116+ CD6F C9                                   ret
 117+ CD70              ;----------------------------------------------------------------------------------------------------------------------------------
 118+ CD70 7E           STAT_expand_word:       ld      a,(hl)
 119+ CD71 FE 00                                cp      0
 120+ CD73 C8                                   ret     z
 121+ CD74 12                                   ld      (de),a
 122+ CD75 23                                   inc     hl
 123+ CD76 13                                   inc     de
 124+ CD77 18 F7                                jr      STAT_expand_word
 125+ CD79
 126+ CD79              ; hl = list of words
 127+ CD79              ; de = adress to expand to
 128+ CD79 7E           STAT_expand_name:       ld      a,(hl)
 129+ CD7A 47                                   ld      b,a
 130+ CD7B 23                                   inc     hl
 131+ CD7C 7E                                   ld      a,(hl)              ; its a 16 bit
 132+ CD7D 2B                                   dec     hl                  ; move back one for now, need to optimise laters
 133+ CD7E B0                                   or      b
 134+ CD7F 20 01                                jr      nz,.MoreToDo
 135+ CD81              ;                        ld      (de),a we dont want the null marker now
 136+ CD81 C9                                   ret
 137+ CD82 E5 D5        .MoreToDo:              push    hl,,de
 138+ CD84 7E                                   ld      a,(hl)              ; bodge for now no optimise
 139+ CD85 5F                                   ld      e,a
 140+ CD86 23                                   inc     hl
 141+ CD87 7E                                   ld      a,(hl)
 142+ CD88 57                                   ld      d,a
 143+ CD89 EB                                   ex      hl,de               ; hl is now Word... address
 144+ CD8A D1                                   pop     de                  ; de back to pointer to buffer
 145+ CD8B CD 70 CD     .ProcessWord:           call    STAT_expand_word
 146+ CD8E 3E 20                                ld      a," "               ; speculative space
 147+ CD90 12                                   ld      (de),a
 148+ CD91 13                                   inc     de
 149+ CD92 E1                                   pop     hl                  ; get string pointer back
 150+ CD93 23                                   inc     hl
 151+ CD94 23                                   inc     hl                  ; on to next word
 152+ CD95 18 E2                                jr      STAT_expand_name
 153+ CD97
 154+ CD97              STAT_First_Item         EQU     EQ_CARGO_BAY
 155+ CD97 3A 1C 9A     STAT_buffer_list:       ld      a,(Galaxy)       ; DEBUG as galaxy n is not working
 156+ CD9A                                      MMUSelectGalaxyA
 156+ CD9A ED 92 57    >                     nextreg GalaxyDataMMU,       a
 157+ CD9D 21 3D C0                             ld      hl,STAT_display_buffer                      ; hl - target buffer
 158+ CDA0 3E 01                                ld      a,1                                         ; so it will still skip them on printing
 159+ CDA2 11 00 0C                             ld      de, STAT_display_buff_len
 160+ CDA5 CD 28 95                             call    memfill_dma                                 ; full buffer with ASCII 1 (unprintable character)
 161+ CDA8 21 54 C0                             ld      hl,STAT_display_buffer+STAT_buffer_row_len-1
 162+ CDAB 11 18 00                             ld      de,STAT_buffer_row_len
 163+ CDAE 06 18                                ld      b,EQ_ITEM_COUNT - EQ_CARGO_BAY
 164+ CDB0 AF                                   xor     a
 165+ CDB1 77           .EoLLoop:               ld      (hl),a                                      ; fix all buffer lines with a null
 166+ CDB2 19                                   add     hl,de
 167+ CDB3 10 FC                                djnz    .EoLLoop
 168+ CDB5 06 18                                ld      b,EQ_ITEM_COUNT - EQ_CARGO_BAY              ; CurrentGameMaxEquipment but minus fuel and missiles
 169+ CDB7 DD 21 B6 9D                          ld      ix,EquipmentFitted + STAT_First_Item        ; ix = equipment master table, ignore missiles
 170+ CDBB FD 21 3D C0                          ld      iy,STAT_display_buffer                      ; iy = target buffer
 171+ CDBF 0E 00                                ld      c,0                                         ; Current Row
 172+ CDC1 1E 02                                ld      e,STAT_First_Item
 173+ CDC3 DD 7E 00     .ProcessRow:            ld      a,(ix+0)                                    ; Do we own one?
 174+ CDC6 FE 00                                cp      0
 175+ CDC8 28 21                                jr      z,.DoneFittedCheck
 176+ CDCA D5 FD E5 DD  .OwnItem:               push    de,, iy,, ix,, bc
 176+ CDCE E5 C5
 177+ CDD0 21 06 F4                             ld      hl,ShipEquipNameTable                       ; look up equipment name
 178+ CDD3 16 08                                ld      d,EquipNameTableRowLen                       ; ship equip name row length, e = current equip row
 179+ CDD5 ED 30                                mul
 180+ CDD7 19                                   add     hl,de                                       ; hl = dword list of work pointers
 181+ CDD8 FD 54 FD 5D                          ld      de,iy                                       ; de = 0 column at current display buffer row
 182+ CDDC CD 79 CD                             call    STAT_expand_name                           ; expand name
 183+ CDDF C1 DD E1 FD                          pop     iy,,ix,,bc
 183+ CDE3 E1
 184+ CDE4 11 18 00                             ld      de,STAT_buffer_row_len
 185+ CDE7 FD 19                                add     iy,de                                       ; now iy = start of next column
 186+ CDE9 D1                                   pop     de
 187+ CDEA 0C                                   inc     c
 188+ CDEB DD 23        .DoneFittedCheck:       inc     ix
 189+ CDED 1C                                   inc     e
 190+ CDEE 10 D3                                djnz    .ProcessRow
 191+ CDF0 79           .DoneProcess:           ld      a,c
 192+ CDF1 32 3C C0                             ld      (STAT_current_end),a
 193+ CDF4 C9                                   ret
 194+ CDF5              ;----------------------------------------------------------------------------------------------------------------------------------
 195+ CDF5              draw_STAT_maintext:    	InitNoDoubleBuffer
 195+ CDF5             >                            MMUSelectLayer1
 195+ CDF5 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 195+ CDF9 CD 80 E0    >                            call	l1_cls
 195+ CDFC 3E 07       >                            ld		a,7
 195+ CDFE CD 9B E0    >                            call	l1_attr_cls_to_a
 195+ CE01             >                            MMUSelectLayer2
 195+ CE01 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 195+ CE05 CD 08 E0    >                            call    asm_l2_double_buffer_off
 195+ CE08 CD C9 E0    >                            call	l2_cls	; Get some space
 195+ CE0B             >                            MMUSelectSpriteBank
 195+ CE0B ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
 195+ CE0F CD 27 E4    >                            call    sprite_cls_cursors
 196+ CE12 01 01 01     .Drawbox:               ld		bc,$0101
 197+ CE15 11 FD BE                             ld		de,$BEFD
 198+ CE18 3E C0                                ld		a,$C0
 199+ CE1A                                      MMUSelectLayer2
 199+ CE1A ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 200+ CE1E CD F6 E1                             call	l2_draw_box
 201+ CE21 06 0A                                ld		b,10
 202+ CE23 21 10 C0                             ld		hl,status_boiler_text
 203+ CE26 CD 92 CC                             call	STAT_print_boiler_text
 204+ CE29 3A 1C 9A     .PresentSystem:         ld      a,(Galaxy)       ; DEBUG as galaxy n is not working
 205+ CE2C                                      MMUSelectGalaxyA
 205+ CE2C ED 92 57    >                     nextreg GalaxyDataMMU,       a
 206+ CE2F ED 4B 2F 9A                          ld      bc, (PresentSystemX)
 207+ CE33 CD BB FA                             call    galaxy_name_at_bc
 208+ CE36 11 4B CC                             ld      de,stat_present_name
 209+ CE39 CD 89 CC                             call    stat_copy_to_name
 209+ CE3C
 210+ CE3C 01 98 0B                             ld      bc,present_position
 211+ CE3F 21 4B CC                             ld      hl,stat_present_name
 212+ CE42                                      MMUSelectLayer2
 212+ CE42 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 213+ CE46 1E FF                                ld      e,txt_status_colour
 214+ CE48 CD 6F E1                             call    l2_print_at
 215+ CE4B 3A 1C 9A     .HyperspaceSystem:      ld      a,(Galaxy)      ; DEBUG as galaxy n is not working
 216+ CE4E                                      MMUSelectGalaxyA
 216+ CE4E ED 92 57    >                     nextreg GalaxyDataMMU,       a
 217+ CE51 ED 4B 31 9A                          ld      bc, (TargetSystemX)
 218+ CE55 CD BB FA                             call    galaxy_name_at_bc
 219+ CE58 11 6A CC                             ld      de,stat_target_name
 220+ CE5B CD 89 CC                             call    stat_copy_to_name
 220+ CE5E
 221+ CE5E 01 98 13                             ld      bc,hyperspace_position
 222+ CE61 21 6A CC                             ld      hl,stat_target_name
 223+ CE64                                      MMUSelectLayer2
 223+ CE64 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 224+ CE68 1E FF                                ld      e,txt_status_colour
 225+ CE6A CD 6F E1                             call    l2_print_at
 226+ CE6D CD 26 CF     .StatusText:	        call	get_cmdr_condition
 227+ CE70 21 EE 9F                             ld		hl, ConditionNameIdx
 228+ CE73 CD F0 A0                             call	getTableText
 229+ CE76 01 70 1B                             ld		bc,condition_position
 230+ CE79                                      MMUSelectLayer2
 230+ CE79 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 231+ CE7D 1E FF                                ld      e,txt_status_colour
 232+ CE7F CD 6F E1                             call    l2_print_at
 233+ CE82 CD 5B B7     .DisplayFuel:           call	GetFuelLevel
 234+ CE85 21 09 B7                             ld		hl, txt_fuel_level
 235+ CE88 7E                                   ld		a,(hl)
 236+ CE89 FE 30                                cp		'0'
 237+ CE8B 20 01                                jr		nz,.PrintFuel
 238+ CE8D 23           .SkipLeadingZero:	    inc		hl
 239+ CE8E 01 70 23     .PrintFuel:             ld		bc,fuel_position
 240+ CE91                                      MMUSelectLayer2
 240+ CE91 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 241+ CE95 1E FF                                ld      e,txt_status_colour
 242+ CE97 CD 6F E1                             call    l2_print_at
 243+ CE9A CD 55 CD     .DisplayCash:           call	STAT_GetCash
 244+ CE9D 01 70 2B                             ld		bc,cash_position
 245+ CEA0 21 3D CC                             ld		hl,STAT_cash_amount
 246+ CEA3                                      MMUSelectLayer2
 246+ CEA3 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 247+ CEA7 1E FF                                ld      e,txt_status_colour
 248+ CEA9 CD 6F E1                             call    l2_print_at
 249+ CEAC 3A 93 99     .PrintLegalStatus:      ld		a,(FugitiveInnocentStatus)
 250+ CEAF FE 00                                cp		0
 251+ CEB1 20 05                                jr		nz,.Naughty
 252+ CEB3 21 CF A1                             ld		hl,WordClean
 253+ CEB6 18 0C                                jr		.DisplayLegalStatus
 254+ CEB8 FE 32        .Naughty:               cp		50
 255+ CEBA 38 05                                jr		c,.JustOffender
 256+ CEBC 21 DE A1     .VeryNaughty:           ld		hl,WordFugitive
 257+ CEBF 18 03                                jr		.DisplayLegalStatus
 258+ CEC1 21 D5 A1     .JustOffender:          ld		hl,WordOffender
 259+ CEC4 01 70 33     .DisplayLegalStatus:    ld		bc,legal_status_position
 260+ CEC7                                      MMUSelectLayer2
 260+ CEC7 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 261+ CECB 1E FF                                ld      e,txt_status_colour
 262+ CECD CD 6F E1                             call    l2_print_at
 263+ CED0 ED 5B A6 99  .DisplayRating:         ld		de,(KillTally)
 264+ CED4 CD FB A0                             call	getRankIndex
 265+ CED7 21 DA A0                             ld		hl, RankingNameIdx
 266+ CEDA CD F0 A0                             call	getTableText
 267+ CEDD 01 70 3B                             ld		bc,rank_position
 268+ CEE0                                      MMUSelectLayer2
 268+ CEE0 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 269+ CEE4 1E FF                                ld      e,txt_status_colour
 270+ CEE6 CD 6F E1                             call    l2_print_at
 271+ CEE9 C9                                   ret
 272+ CEEA
 273+ CEEA
 274+ CEEA              draw_STAT_items:        MMUSelectLayer1
 274+ CEEA ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 275+ CEEE CD 80 E0                             call    l1_cls
 276+ CEF1                                      ; add in all the status stuff later
 277+ CEF1 3A 3B C0                             ld      a,(STAT_current_topItem)
 278+ CEF4 16 18                                ld      d,STAT_buffer_row_len
 279+ CEF6 5F                                   ld      e,a
 280+ CEF7 ED 30                                mul
 281+ CEF9 21 3D C0                             ld      hl,STAT_display_buffer
 282+ CEFC 19                                   add     hl,de
 283+ CEFD 3A 3B C0                             ld      a,(STAT_current_topItem)
 284+ CF00 47                                   ld      b,a
 285+ CF01 3A 3C C0                             ld      a,(STAT_current_end)
 286+ CF04 90                                   sub     b
 287+ CF05                                      JumpIfALTNusng  STAT_eqip_window_len, .FillScreen
 287+ CF05 FE 0A       >                        cp      STAT_eqip_window_len
 287+ CF07 DA 0E CF    >                        jp		c, .FillScreen
 288+ CF0A 06 0A        .JustWindowing:         ld      b,STAT_eqip_window_len
 289+ CF0C 18 01                                jr      .ReadyToPrint
 290+ CF0E 47           .FillScreen:            ld      b,a         ; the mumber of rows to display
 291+ CF0F 11 40 58     .ReadyToPrint:          ld      de,STAT_position
 292+ CF12 D5 E5 C5     .DrawARow:              push    de,, hl,, bc                  ; "l1 PrintAt, pixel row, whole char col, DE = yx, HL = message Addr"
 293+ CF15 CD C8 E0                             call    l1_print_at
 293+ CF18
 294+ CF18 C1 E1                                pop     hl,,bc                      ; get mesage addr back and move down one line
 295+ CF1A 11 18 00                             ld      de,STAT_buffer_row_len
 296+ CF1D 19                                   add     hl,de
 297+ CF1E D1                                   pop     de                          ; get output row back
 298+ CF1F 3E 08                                ld      a,8
 299+ CF21 82                                   add     a,d
 300+ CF22 57                                   ld      d,a
 301+ CF23 10 ED                                djnz    .DrawARow
 302+ CF25 C9                                   ret
 303+ CF26
 304+ CF26              ;----------------------------------------------------------------------------------------------------------------------------------
 305+ CF26
 306+ CF26 3A 36 99     get_cmdr_condition:     ld			a,(DockedFlag)
 307+ CF29 FE FF                                cp			PlayerDocked
 308+ CF2B 28 17                                jr			z,.PlayerIsDocked
 309+ CF2D              .PlayerNotDocked:	    ReturnIfMemTrue    SpaceStationSafeZone
 309+ CF2D 3A 15 9A    >                        ld      a,(SpaceStationSafeZone)
 309+ CF30 A7          >                        and     a
 309+ CF31 C8          >                        ret     z
 310+ CF32 CD 2E 9D                             call        AreShipsPresent
 311+ CF35 38 03                                jr          c,.NoShipsAround
 312+ CF37 3E 01                                ld          a,1
 313+ CF39 C9                                   ret
 314+ CF3A 3A 24 9C     .NoShipsAround:         ld			a,(PlayerEnergy)
 315+ CF3D FE 80                                cp			$80
 316+ CF3F 3E 01                                ld          a,1
 317+ CF41 CE 01                                adc         1                                       ; add 1 + carry, if a < 128 then carry set so goes red
 318+ CF43 C9                                   ret
 319+ CF44 AF           .PlayerIsDocked:        xor			a
 320+ CF45 C9                                   ret
 321+ CF46
 322+ CF46              ;;;PrintEquipment:         ld		a,(hl)
 323+ CF46              ;;;                        cp		0
 324+ CF46              ;;;                        ret		z
 325+ CF46              ;;;                        ld		a,b
 326+ CF46              ;;;PrintEquipmentDirect:	call	expandTokenToString
 327+ CF46              ;;;                        ld		hl,TextBuffer
 328+ CF46              ;;;                        ld		de,(equipment_cursor)
 329+ CF46              ;;;                        call	l1_print_at
 330+ CF46              ;;;                        ld		bc,(equipment_cursor)
 331+ CF46              ;;;                        ld		a,b
 332+ CF46              ;;;                        add		a,8
 333+ CF46              ;;;                        ld		b,a
 334+ CF46              ;;;                        ld		(equipment_cursor),bc
 335+ CF46              ;;;                        cp		equipmax_row
 336+ CF46              ;;;                        jr		c,.SkipColUpdate
 337+ CF46              ;;;.ColUpdate:             ld		hl,equipment_position2
 338+ CF46              ;;;                        ld		(equipment_cursor),hl
 339+ CF46              ;;;                        ret
 340+ CF46              ;;;.SkipColUpdate:	        ld		a,b
 341+ CF46              ;;;                        ld		(equipment_cursor+1), a
 342+ CF46              ;;;                        ret
 343+ CF46
 344+ CF46              draw_status_menu:       InitNoDoubleBuffer
 344+ CF46             >                            MMUSelectLayer1
 344+ CF46 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 344+ CF4A CD 80 E0    >                            call	l1_cls
 344+ CF4D 3E 07       >                            ld		a,7
 344+ CF4F CD 9B E0    >                            call	l1_attr_cls_to_a
 344+ CF52             >                            MMUSelectLayer2
 344+ CF52 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 344+ CF56 CD 08 E0    >                            call    asm_l2_double_buffer_off
 344+ CF59 CD C9 E0    >                            call	l2_cls	; Get some space
 344+ CF5C             >                            MMUSelectSpriteBank
 344+ CF5C ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
 344+ CF60 CD 27 E4    >                            call    sprite_cls_cursors
 345+ CF63 3E 08                                ld		a,8
 346+ CF65 32 32 99                             ld		(MenuIdMax),a
 347+ CF68 01 01 01     .Drawbox:               ld		bc,$0101
 348+ CF6B 11 FD BE                             ld		de,$BEFD
 349+ CF6E 3E C0                                ld		a,$C0
 350+ CF70                                      MMUSelectLayer2
 350+ CF70 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 351+ CF74 CD F6 E1                             call	l2_draw_box
 352+ CF77 01 01 0A                             ld		bc,$0A01
 353+ CF7A 11 C0 FE                             ld		de,$FEC0
 354+ CF7D CD 60 E2                             call	l2_draw_horz_line
 355+ CF80 CD 97 CD     .equipment              call    STAT_buffer_list
 356+ CF83 CD EA CE                             call    draw_STAT_items
 357+ CF86 CD F5 CD                             call    draw_STAT_maintext
 358+ CF89 C9                                   ret
 359+ CF8A
 360+ CF8A              ;----------------------------------------------------------------------------------------------------------------------------------
 361+ CF8A              ; Handles all the input whilst in the market menu
 362+ CF8A 3E 4A        loop_STAT_menu:         ld      a,c_Pressed_CursorUp
 363+ CF8C CD 7C 96                             call    is_key_pressed
 364+ CF8F CC 9B CF                             call    z,STAT_UpPressed
 365+ CF92 3E 4C                                ld      a,c_Pressed_CursorDown
 366+ CF94 CD 7C 96                             call    is_key_pressed
 367+ CF97 CC AD CF                             call    z,STAT_DownPressed
 368+ CF9A C9                                   ret
 369+ CF9B
 370+ CF9B              ;----------------------------------------------------------------------------------------------------------------------------------
 371+ CF9B AF           STAT_UpPressed:         xor     a
 372+ CF9C 32 3A C0                             ld      (STAT_selected_row),a
 373+ CF9F 3A 3B C0     .check_scroll_up:       ld      a,(STAT_current_topItem)
 374+ CFA2 FE 00                                cp      0
 375+ CFA4 C8                                   ret     z
 376+ CFA5 3D                                   dec     a           ; chjange later to buffering step back 1
 377+ CFA6 32 3B C0                             ld      (STAT_current_topItem),a
 378+ CFA9 CD EA CE                             call    draw_STAT_items
 379+ CFAC C9                                   ret
 380+ CFAD              ;----------------------------------------------------------------------------------------------------------------------------------
 381+ CFAD 3E 09        STAT_DownPressed:       ld      a,STAT_eqip_window_len-1
 382+ CFAF 32 3A C0                             ld      (STAT_selected_row),a
 383+ CFB2 3A 3C C0                             ld      a,(STAT_current_end)
 384+ CFB5 47                                   ld      b,a                             ; This check is if the current list is < one screen
 385+ CFB6 05                                   dec     b
 386+ CFB7 3A 3A C0                             ld      a,(STAT_selected_row)
 387+ CFBA B8                                   cp      b
 388+ CFBB C8                                   ret     z
 389+ CFBC FE 09                                cp      STAT_eqip_window_len-1
 390+ CFBE 28 05                                jr      z, .check_scroll_down
 391+ CFC0 21 3A C0                             ld      hl,STAT_selected_row
 392+ CFC3 34                                   inc     (hl)
 393+ CFC4 C9                                   ret
 394+ CFC5 47           .check_scroll_down:     ld      b,a
 395+ CFC6 3A 3B C0                             ld      a,(STAT_current_topItem)
 396+ CFC9 80                                   add     b
 397+ CFCA 3C                                   inc     a
 398+ CFCB 21 3C C0                             ld      hl,STAT_current_end
 399+ CFCE                                      ReturnIfAGTEusng      (hl)
 399+ CFCE BE          >                        cp    (hl)
 399+ CFCF D0          >                        ret	 nc
 400+ CFD0 21 3B C0     .can_scroll_down:       ld      hl,STAT_current_topItem
 401+ CFD3 34                                   inc     (hl)
 402+ CFD4 CD EA CE                             call    draw_STAT_items
 403+ CFD7 C9                                   ret
 404+ CFD8
# file closed: ./Menus/status_menu.asm
1333  CFD8
1334  CFD8              ; Bank 64  ------------------------------------------------------------------------------------------------------------------------
1335  CFD8
1336  CFD8                  SLOT    MenuEquipSAddr
1337  CFD8                  PAGE    BankMenuEquipS
1338  CFD8                  ORG     MenuEquipSAddr
1339  C000                  INCLUDE "./Menus/equip_ship_menu.asm"
# file opened: ./Menus/equip_ship_menu.asm
   1+ C000 45 71 75 69  eqshp_prices_page_marker  DB "EquipShipPG63"
   1+ C004 70 53 68 69
   1+ C008 70 50 47 36
   1+ C00C 33
   2+ C00D 50 02 19 C0  eqshp_boiler_text		DW $0250,eqship_title
   3+ C011 20 02 3D A6  						DW $0220,name_expanded
   4+ C015 08 B0 24 C0                          DW $B008,eqship_cash
   5+ C019
   6+ C019 45 71 75 69  eqship_title            DB "Equip Ship",0
   6+ C01D 70 20 53 68
   6+ C021 69 70 00
   7+ C024 43 61 73 68  eqship_cash				DB "Cash : ",0
   7+ C028 20 3A 20 00
   8+ C02C
   9+ C02C 30 30 2E 30  txt_eqshp_amount	    DB "00.0",0
   9+ C030 00
  10+ C031 39 39 39 00  txt_eqshp_quantity      DB "999",0
  11+ C035 39 39 39 00  txt_eqshp_cargo         DB "999",0
  12+ C039 00 00        eqshp_cursor			DW  $0000
  13+ C03B              eqshp_position			equ $1808
  14+ C03B              eqshp_uom				equ	$68
  15+ C03B              eqshp_price 			equ $88
  16+ C03B              eqshp_Quantity			equ	$B0
  17+ C03B              eqshp_Cargo             equ $E0
  18+ C03B              eqshp_UomOffset		    equ 46
  19+ C03B 20 20 20 20  eqshp_blank_line        DB "                                ",0
  19+ C03F 20 20 20 20
  19+ C043 20 20 20 20
  19+ C047 20 20 20 20
  19+ C04B 20 20 20 20
  19+ C04F 20 20 20 20
  19+ C053 20 20 20 20
  19+ C057 20 20 20 20
  19+ C05B 00
  20+ C05C
  21+ C05C 00 00 00...  eqshp_item_price        DS 20
  22+ C070
  23+ C070              eqshp_cash_position     equ $B048
  24+ C070 00 00 00...  eqshp_cash_amount		DS 20
  25+ C084 20 43 72 20  eqshp_cash_UoM          DB " Cr       ",0
  25+ C088 20 20 20 20
  25+ C08C 20 20 00
  26+ C08F
  27+ C08F 00           eqshp_selected_row      DB 0
  28+ C090 00           eqshp_current_topItem   DB 0
  29+ C091 00           eqshp_current_end       DB 0
  30+ C092              eqship_buffer_rows      EQU     128
  31+ C092              eqship_buffer_row_len   EQU      32
  32+ C092              eqship_display_buff_len EQU     eqship_buffer_rows *   eqship_buffer_row_len
  33+ C092 00 00 00...  eqship_display_buffer:  DS      eqship_display_buff_len                     ; maxium of 128 items can be coded for
  34+ D092 00 00 00...  eqship_buyable_buffer:  DS      128
  35+ D112              eqship_buffer_cash_col: EQU     21
  36+ D112              eqship_fitted_module:   EQU     29
  37+ D112              ;----------------------------------------------------------------------------------------------------------------------------------
  38+ D112 3A 8F C0     eqshp_highlight_row:    ld      a,(eqshp_selected_row)
  39+ D115 C6 03                                add     a,3
  40+ D117 57                                   ld      d,a
  41+ D118 1E 56                                ld      e,L1InvHighlight
  42+ D11A                                      MMUSelectLayer1
  42+ D11A ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
  43+ D11E CD 30 E0                             call    l1_hilight_row
  44+ D121 C9                                   ret
  45+ D122              ;----------------------------------------------------------------------------------------------------------------------------------
  46+ D122 3A 8F C0     eqshp_lowlight_row      ld      a,(eqshp_selected_row)
  47+ D125 C6 03                                add     a,3
  48+ D127 57                                   ld      d,a
  49+ D128 1E 07                                ld      e,L1InvLowlight
  50+ D12A                                      MMUSelectLayer1
  50+ D12A ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
  51+ D12E CD 30 E0                             call    l1_hilight_row
  52+ D131 C9                                   ret
  53+ D132              ;----------------------------------------------------------------------------------------------------------------------------------
  54+ D132 CD 49 D1     eqshp_DispDEIXtoIY1DP:  call    eqshp_DispDEIXtoIY
  55+ D135 FD 36 02 00                          ld      (iy+2),0
  56+ D139 FD 7E 00                             ld      a,(IY+0)
  57+ D13C FD 77 01                             ld      (IY+1),a
  58+ D13F 3E 2E                                ld      a,"."
  59+ D141 FD 77 00                             ld      (IY+0),a
  60+ D144 FD 23                                inc     IY
  61+ D146 FD 23                                inc     IY
  62+ D148 C9                                   ret
  63+ D149              ;----------------------------------------------------------------------------------------------------------------------------------
  64+ D149 DD 22 DA D1  eqshp_DispDEIXtoIY:     ld (.EQSHPclcn32z),ix
  65+ D14D ED 53 DC D1                          ld (.EQSHPclcn32zIX),de
  66+ D151 DD 21 D6 D1                          ld ix,.EQSHPclcn32t+36
  67+ D155 06 09                                ld b,9
  68+ D157 0E 00                                ld c,0
  69+ D159 3E 30        .EQSHPclcn321:            ld a,'0'
  70+ D15B B7                                   or a
  71+ D15C DD 5E 00     .EQSHPclcn322:            ld e,(ix+0)
  72+ D15F DD 56 01                             ld d,(ix+1)
  73+ D162 2A DA D1                             ld hl,(.EQSHPclcn32z)
  74+ D165 ED 52                                sbc hl,de
  75+ D167 22 DA D1                             ld (.EQSHPclcn32z),hl
  76+ D16A DD 5E 02                             ld e,(ix+2)
  77+ D16D DD 56 03                             ld d,(ix+3)
  78+ D170 2A DC D1                             ld hl,(.EQSHPclcn32zIX)
  79+ D173 ED 52                                sbc hl,de
  80+ D175 22 DC D1                             ld (.EQSHPclcn32zIX),hl
  81+ D178 38 04                                jr c,.EQSHPclcn325
  82+ D17A 0C                                   inc c
  83+ D17B 3C                                   inc a
  84+ D17C 18 DE                                jr .EQSHPclcn322
  85+ D17E DD 5E 00     .EQSHPclcn325:            ld e,(ix+0)
  86+ D181 DD 56 01                             ld d,(ix+1)
  87+ D184 2A DA D1                             ld hl,(.EQSHPclcn32z)
  88+ D187 19                                   add hl,de
  89+ D188 22 DA D1                             ld (.EQSHPclcn32z),hl
  90+ D18B DD 5E 02                             ld e,(ix+2)
  91+ D18E DD 56 03                             ld d,(ix+3)
  92+ D191 2A DC D1                             ld hl,(.EQSHPclcn32zIX)
  93+ D194 ED 5A                                adc hl,de
  94+ D196 22 DC D1                             ld (.EQSHPclcn32zIX),hl
  95+ D199 11 FC FF                             ld de,-4
  96+ D19C DD 19                                add ix,de
  97+ D19E 0C                                   inc c
  98+ D19F 0D                                   dec c
  99+ D1A0 28 05                                jr z,.EQSHPclcn323
 100+ D1A2 FD 77 00                             ld (iy+0),a
 101+ D1A5 FD 23                                inc iy
 102+ D1A7 10 B0        .EQSHPclcn323:            djnz .EQSHPclcn321
 103+ D1A9 3A DA D1                             ld a,(.EQSHPclcn32z)
 104+ D1AC C6 30                                add A,'0'
 105+ D1AE FD 77 00                             ld (iy+0),a
 106+ D1B1 C9                                   ret
 107+ D1B2 01 00 00 00  .EQSHPclcn32t             dw 1,0,     10,0,     100,0,     1000,0,       10000,0
 107+ D1B6 0A 00 00 00
 107+ D1BA 64 00 00 00
 107+ D1BE E8 03 00 00
 107+ D1C2 10 27 00 00
 108+ D1C6 A0 86 01 00                          dw $86a0,1, $4240,$0f, $9680,$98, $e100,$05f5, $ca00,$3b9a
 108+ D1CA 40 42 0F 00
 108+ D1CE 80 96 98 00
 108+ D1D2 00 E1 F5 05
 108+ D1D6 00 CA 9A 3B
 109+ D1DA 00 00        .EQSHPclcn32z             ds 2
 110+ D1DC 00 00        .EQSHPclcn32zIX           ds 2
 111+ D1DE              ;----------------------------------------------------------------------------------------------------------------------------------
 112+ D1DE              ; "DispHL, writes HL to DE address"
 113+ D1DE 01 F0 D8     EQSHP_DispHLtoDE:         ld	bc,-10000
 114+ D1E1 CD F7 D1                             call	EQSHP_Num1
 115+ D1E4 01 18 FC                             ld	bc,-1000
 116+ D1E7 CD F7 D1                             call	EQSHP_Num1
 117+ D1EA 01 9C FF                             ld	bc,-100
 118+ D1ED CD F7 D1                             call	EQSHP_Num1
 119+ D1F0 0E F6                                ld	c,-10
 120+ D1F2 CD F7 D1                             call	EQSHP_Num1
 121+ D1F5 0E FF                                ld	c,-1
 122+ D1F7 3E 2F        EQSHP_Num1:	            ld	a,'0'-1
 123+ D1F9 3C           .Num2:	                inc	a
 124+ D1FA 09                                   add	hl,bc
 125+ D1FB 38 FC                                jr	c,.Num2
 126+ D1FD ED 42                                sbc	hl,bc
 127+ D1FF 12                                   ld	(de),a
 128+ D200 13                                   inc	de
 129+ D201 C9                                   ret
 130+ D202              ;----------------------------------------------------------------------------------------------------------------------------------
 131+ D202 26 00        EQSHP_DispAtoDE:          ld h,0
 132+ D204 6F                                   ld l,a
 133+ D205 C3 DE D1                             jp EQSHP_DispHLtoDE
 134+ D208              ;----------------------------------------------------------------------------------------------------------------------------------
 135+ D208 26 00        EQSHP_DispPriceAtoDE:     ld h,0
 136+ D20A 6F                                   ld l,a
 137+ D20B 01 9C FF                             ld	bc,-100
 138+ D20E CD 1E D2                             call	.NumLeadBlank1
 139+ D211 0E F6                                ld	c,-10
 140+ D213 CD F7 D1                             call	EQSHP_Num1
 141+ D216 3E 2E                                ld		a,'.'					; we could assume preformat but
 142+ D218 12                                   ld		(de),a					; we can optimse that later TODO
 143+ D219 13                                   inc		de						; with just an inc De
 144+ D21A 0E FF                                ld	c,-1
 145+ D21C 18 D9                                jr		EQSHP_Num1
 146+ D21E 3E 2F        .NumLeadBlank1:	        ld	a,'0'-1
 147+ D220 3C           .NumLeadBlank2:	        inc	a
 148+ D221 09                                   add	hl,bc
 149+ D222 38 FC                                jr	c,.NumLeadBlank2
 150+ D224 FE 30                                cp	'0'
 151+ D226 20 02                                jr	nz,.DontBlank
 152+ D228 3E 20        .Blank:                 ld	a,' '
 153+ D22A ED 42        .DontBlank:	            sbc	hl,bc
 154+ D22C 12                                   ld	(de),a
 155+ D22D 13                                   inc	de
 156+ D22E C9                                   ret
 157+ D22F              ;----------------------------------------------------------------------------------------------------------------------------------
 158+ D22F FE 00        EQSHP_DispQtyAtoDE:      cp	0
 159+ D231 28 30                                jr	z,.NoStock
 160+ D233 26 00                                ld h,0
 161+ D235 6F                                   ld l,a
 162+ D236 01 9C FF                             ld	bc,-100
 163+ D239 CD 52 D2                             call	.NumLeadBlank1
 164+ D23C FE 20        .WasLead0:              cp      ' '
 165+ D23E 20 09                                jr      nz,.NotHundredsZero
 166+ D240 0E F6                                ld	c,-10
 167+ D242 CD 52 D2                             call	.NumLeadBlank1
 168+ D245 0E FF                                ld	c,-1
 169+ D247 18 AE                                jr		EQSHP_Num1
 170+ D249 0E F6        .NotHundredsZero:       ld	c,-10
 171+ D24B CD F7 D1                             call	EQSHP_Num1
 172+ D24E 0E FF                                ld	c,-1
 173+ D250 18 A5                                jr		EQSHP_Num1
 174+ D252 3E 2F        .NumLeadBlank1:	        ld	a,'0'-1
 175+ D254 3C           .NumLeadBlank2:	        inc	a
 176+ D255 09                                   add	hl,bc
 177+ D256 38 FC                                jr	c,.NumLeadBlank2
 178+ D258 FE 30                                cp	'0'
 179+ D25A 20 02                                jr	nz,.DontBlank
 180+ D25C 3E 20        .Blank:                 ld	a,' '
 181+ D25E ED 42        .DontBlank:	            sbc	hl,bc
 182+ D260 12                                   ld	(de),a
 183+ D261 13                                   inc	de
 184+ D262 C9                                   ret
 185+ D263 3E 20        .NoStock:               ld	a,' '
 186+ D265 12                                   ld	(de),a
 187+ D266 13                                   inc	de
 188+ D267 12                                   ld	(de),a
 189+ D268 13                                   inc	de
 190+ D269 3E 2D                                ld	a,'-'
 191+ D26B 12                                   ld	(de),a
 192+ D26C 13                                   inc de
 193+ D26D C9                                   ret
 194+ D26E              ;----------------------------------------------------------------------------------------------------------------------------------
 195+ D26E              EQSHP_print_boiler_text:  INCLUDE "Menus/print_boiler_text_inlineInclude.asm"
# file opened: ./Menus/print_boiler_text_inlineInclude.asm
   1++D26E
   2++D26E              ;">print_boilder_text hl = text structure, b = message count"
   3++D26E              .BoilerTextLoop:
   4++D26E C5           	push		bc			; Save Message Count loop value
   5++D26F 4E           	ld			c,(hl)		; Get Row into b
   6++D270 23           	inc			hl
   7++D271 46           	ld			b,(hl)		; Get Col into b
   8++D272 23           	inc			hl
   9++D273 5E           	ld			e,(hl)		; Get text address Lo into E
  10++D274 23           	inc			hl
  11++D275 56           	ld			d,(hl)		; Get text address Hi into E
  12++D276 23           	inc			hl
  13++D277 E5           	push		hl			; Save present HL to stack as this is the address for the next message
  14++D278 EB           	ex			de,hl		; now hl = address of text data
  15++D279 1E FF        	ld			e,txt_status_colour
  16++D27B C5           	push		bc
  17++D27C D1           	pop			de
  18++D27D                  MMUSelectLayer1
  18++D27D ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
  19++D281 CD C8 E0     	call		l1_print_at
  20++D284 E1           	pop			hl
  21++D285 C1           	pop			bc
  22++D286 10 E6        	djnz		.BoilerTextLoop
  23++D288 C9           	ret
  24++D289
# file closed: ./Menus/print_boiler_text_inlineInclude.asm
 196+ D289              ;----------------------------------------------------------------------------------------------------------------------------------
 197+ D289 2A 73 9D     eqshp_GetCash:          ld		hl,(Cash+2)
 198+ D28C EB                                   ex      de,hl
 199+ D28D DD 2A 71 9D                          ld      ix,(Cash)
 200+ D291 FD 21 70 C0                          ld		iy,eqshp_cash_amount
 201+ D295 CD 32 D1                             call 	eqshp_DispDEIXtoIY1DP
 202+ D298 FD E5                                push    IY
 203+ D29A D1                                   pop     de
 204+ D29B 21 84 C0                             ld      hl,eqshp_cash_UoM
 205+ D29E 01 0B 00                             ld      bc,11
 206+ D2A1 ED B0                                ldir
 207+ D2A3 C9                                   ret
 208+ D2A4              ;----------------------------------------------------------------------------------------------------------------------------------
 209+ D2A4 CD 89 D2     eqshp_DisplayCash:      call	eqshp_GetCash
 210+ D2A7 21 70 C0                             ld		hl,eqshp_cash_amount
 211+ D2AA 11 48 B0                             ld      de,eqshp_cash_position
 212+ D2AD                                      MMUSelectLayer1
 212+ D2AD ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 213+ D2B1 CD C8 E0                             call	l1_print_at
 214+ D2B4 C9                                   ret
 215+ D2B5              ;----------------------------------------------------------------------------------------------------------------------------------
 216+ D2B5 7E           eqshp_expand_word:      ld      a,(hl)
 217+ D2B6 FE 00                                cp      0
 218+ D2B8 C8                                   ret     z
 219+ D2B9 12                                   ld      (de),a
 220+ D2BA 23                                   inc     hl
 221+ D2BB 13                                   inc     de
 222+ D2BC 18 F7                                jr      eqshp_expand_word
 223+ D2BE
 224+ D2BE              ; hl = list of words
 225+ D2BE              ; de = adress to expand to
 226+ D2BE 7E           eqshp_expand_name:      ld      a,(hl)
 227+ D2BF 47                                   ld      b,a
 228+ D2C0 23                                   inc     hl
 229+ D2C1 7E                                   ld      a,(hl)              ; its a 16 bit
 230+ D2C2 2B                                   dec     hl                  ; move back one for now, need to optimise laters
 231+ D2C3 B0                                   or      b
 232+ D2C4 20 01                                jr      nz,.MoreToDo
 233+ D2C6              ;                        ld      (de),a we dont want the null marker now
 234+ D2C6 C9                                   ret
 235+ D2C7 E5 D5        .MoreToDo:              push    hl,,de
 236+ D2C9 7E                                   ld      a,(hl)              ; bodge for now no optimise
 237+ D2CA 5F                                   ld      e,a
 238+ D2CB 23                                   inc     hl
 239+ D2CC 7E                                   ld      a,(hl)
 240+ D2CD 57                                   ld      d,a
 241+ D2CE EB                                   ex      hl,de               ; hl is now Word... address
 242+ D2CF D1                                   pop     de                  ; de back to pointer to buffer
 243+ D2D0 CD B5 D2     .ProcessWord:           call    eqshp_expand_word
 244+ D2D3 3E 20                                ld      a," "               ; speculative space
 245+ D2D5 12                                   ld      (de),a
 246+ D2D6 13                                   inc     de
 247+ D2D7 E1                                   pop     hl                  ; get string pointer back
 248+ D2D8 23                                   inc     hl
 249+ D2D9 23                                   inc     hl                  ; on to next word
 250+ D2DA 18 E2                                jr      eqshp_expand_name
 251+ D2DC
 252+ D2DC 21 92 C0     eqshp_buffer_list:      ld      hl,eqship_display_buffer                    ; hl - target buffer
 253+ D2DF 3E 01                                ld      a,1                                         ; so it will still skip them on printing
 254+ D2E1 11 00 10                             ld      de, eqship_display_buff_len
 255+ D2E4 CD 28 95                             call    memfill_dma                                 ; full buffer with ASCII 1 (unprintable character)
 256+ D2E7 21 B1 C0                             ld      hl,eqship_display_buffer+eqship_buffer_row_len-1
 257+ D2EA 11 20 00                             ld      de,eqship_buffer_row_len
 258+ D2ED 06 1A                                ld      b,ShipEquipTableSize
 259+ D2EF AF                                   xor     a
 260+ D2F0 77           .EoLLoop:               ld      (hl),a                                      ; fix all buffer lines with a null
 261+ D2F1 19                                   add     hl,de
 262+ D2F2 10 FC                                djnz    .EoLLoop
 263+ D2F4 06 1A                                ld      b,ShipEquipTableSize                        ; CurrentGameMaxEquipment
 264+ D2F6 DD 21 D6 F4                          ld      ix,ShipEquipmentList                        ; ix = equipment master table
 265+ D2FA FD 21 92 C0                          ld      iy,eqship_display_buffer                    ; iy = target buffer
 266+ D2FE 0E 00                                ld      c,0                                         ; Current Row
 267+ D300 DD 7E 01     .ProcessRow:            ld      a,(ix+1)                                    ; get can buy
 268+ D303 FE FF                                cp      $FF                                         ; if its $FF then do not display
 269+ D305 C2 12 D3                             jp      nz,.BufferItem
 270+ D308 11 10 00     .DoNotDisplay:          ld      de,ShipEquipTableRowLen                     ; mov eto next equipment list, 7 =  row length
 271+ D30B DD 19                                add     ix,de
 272+ D30D 10 F1                                djnz    .ProcessRow
 273+ D30F C3 75 D3                             jp      .DoneProcess
 274+ D312 FD E5 DD E5  .BufferItem:            push    iy,,ix,,bc
 274+ D316 C5
 275+ D317 DD 7E 00                             ld      a,(ix+0)                                    ; get can buy
 276+ D31A 21 92 D0                             ld      hl,eqship_buyable_buffer                    ;
 277+ D31D 59                                   ld      e,c
 278+ D31E 16 00                                ld      d,0                                         ;
 279+ D320 19                                   add     hl,de                                       ;
 280+ D321 77                                   ld      (hl),a                                      ; set buyable to 0
 281+ D322 21 06 F4                             ld      hl,ShipEquipNameTable                       ; look up equipment name
 282+ D325 16 08                                ld      d,EquipNameTableRowLen                       ; ship equip name row length
 283+ D327 59                                   ld      e,c
 284+ D328 ED 30                                mul
 285+ D32A 19                                   add     hl,de                                       ; hl = dword list of work pointers
 286+ D32B FD 54 FD 5D                          ld      de,iy                                       ; de = 0 column at current display buffer row
 287+ D32F C5                                   push    bc
 288+ D330 CD BE D2                             call    eqshp_expand_name                           ; expand name
 289+ D333 C1                                   pop     bc
 290+ D334 11 15 00                             ld      de,eqship_buffer_cash_col                   ; move buffer column to 20
 291+ D337 FD 19                                add     iy,de
 292+ D339 FD E5                                push    iy
 293+ D33B DD 7E 04                             ld      a,(ix+4)
 294+ D33E 5F                                   ld      e,a
 295+ D33F DD 7E 05                             ld      a,(ix+5)
 296+ D342 57                                   ld      d,a                                         ; de = price
 297+ D343 DD 62 DD 6B                          ld      ix,de
 298+ D347                                      ;push    de
 299+ D347                                      ;pop     ix
 300+ D347 11 00 00                             ld      de,0                                        ; deix = price
 301+ D34A CD 49 D1                             call    eqshp_DispDEIXtoIY                          ; print it to pos IY
 302+ D34D 3E 20                                ld      a," "
 303+ D34F FD 77 00                             ld      (IY+0),a
 304+ D352 FD 77 01                             ld      (IY+1),a
 305+ D355 FD 77 02                             ld      (IY+2),a
 306+ D358 FD E1                                pop     iy
 307+ D35A CD 7A D3                             call    .RightJustify
 308+ D35D C1 DD E1 FD                          pop     iy,,ix,,bc
 308+ D361 E1
 309+ D362 DD 7E 07     .CheckFitted:           ld      a,(ix+7)
 310+ D365 FD 77 1D                             ld      (iy+eqship_fitted_module),a
 311+ D368 11 20 00                             ld      de,eqship_buffer_row_len
 312+ D36B FD 19                                add     iy,de                                       ; now iy = start of next column
 313+ D36D 11 10 00                             ld      de,ShipEquipTableRowLen
 314+ D370 DD 19                                add     ix,de
 315+ D372 0C                                   inc     c
 316+ D373 10 8B                                djnz    .ProcessRow
 317+ D375 79           .DoneProcess:           ld      a,c
 318+ D376 32 91 C0                             ld      (eqshp_current_end),a
 319+ D379 C9                                   ret
 320+ D37A CD 7D D3     .RightJustify:          call    .RightJustify2
 321+ D37D CD 80 D3     .RightJustify2:         call    .RightJustify3
 322+ D380 FD 7E 03     .RightJustify3:         ld      a,(iy+3)
 323+ D383 FE 20                                cp      " "
 324+ D385 CC 89 D3                             call    z,.ShuffleRight
 325+ D388 C9                                   ret
 326+ D389 FD E5        .ShuffleRight:          push    iy
 327+ D38B E1                                   pop     hl
 328+ D38C 3E 03                                ld      a,3
 329+ D38E ED 31                                add     hl,a
 330+ D390 FD 7E 02                             ld      a,(iy+2)
 331+ D393 77                                   ld      (hl),a
 332+ D394 2B                                   dec     hl
 333+ D395 FD 7E 01                             ld      a,(iy+1)
 334+ D398 77                                   ld      (hl),a
 335+ D399 2B                                   dec     hl
 336+ D39A FD 7E 00                             ld      a,(iy+0)
 337+ D39D 77                                   ld      (hl),a
 338+ D39E 2B                                   dec     hl
 339+ D39F 3E 20                                ld      a," "
 340+ D3A1 77                                   ld      (hl),a
 341+ D3A2 C9                                   ret
 342+ D3A3
 343+ D3A3
 344+ D3A3              draw_eqship_items:      MMUSelectLayer1
 344+ D3A3 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 345+ D3A7 CD 80 E0                             call    l1_cls
 346+ D3AA 06 03                                ld		b,3
 347+ D3AC 21 0D C0                             ld		hl,eqshp_boiler_text
 348+ D3AF CD 6E D2                             call	EQSHP_print_boiler_text
 349+ D3B2 CD A4 D2                             call    eqshp_DisplayCash
 350+ D3B5 3A 90 C0                             ld      a,(eqshp_current_topItem)
 351+ D3B8 16 20                                ld      d,eqship_buffer_row_len
 352+ D3BA 5F                                   ld      e,a
 353+ D3BB ED 30                                mul
 354+ D3BD 21 92 C0                             ld      hl,eqship_display_buffer
 355+ D3C0 19                                   add     hl,de
 356+ D3C1 3A 90 C0                             ld      a,(eqshp_current_topItem)
 357+ D3C4 47                                   ld      b,a
 358+ D3C5 3A 91 C0                             ld      a,(eqshp_current_end)
 359+ D3C8 90                                   sub     b
 360+ D3C9                                      JumpIfALTNusng  18, .FillScreen
 360+ D3C9 FE 12       >                        cp      18
 360+ D3CB DA D2 D3    >                        jp		c, .FillScreen
 361+ D3CE 06 12        .JustWindowing:         ld      b,18
 362+ D3D0 18 01                                jr      .ReadyToPrint
 363+ D3D2 47           .FillScreen:            ld      b,a         ; the mumber of rows to display
 364+ D3D3 11 08 18     .ReadyToPrint:          ld      de,eqshp_position
 365+ D3D6 D5 E5 C5     .DrawARow:              push    de,,hl,,bc                  ; "l1 PrintAt, pixel row, whole char col, DE = yx, HL = message Addr"
 366+ D3D9 CD C8 E0                             call    l1_print_at
 366+ D3DC
 367+ D3DC C1 E1                                pop     hl,,bc                      ; get mesage addr back and move down one line
 368+ D3DE 11 20 00                             ld      de,eqship_buffer_row_len
 369+ D3E1 19                                   add     hl,de
 370+ D3E2 D1                                   pop     de                          ; get output row back
 371+ D3E3 3E 08                                ld      a,8
 372+ D3E5 82                                   add     a,d
 373+ D3E6 57                                   ld      d,a
 374+ D3E7 10 ED                                djnz    .DrawARow
 375+ D3E9 C9                                   ret
 376+ D3EA
 377+ D3EA              draw_eqshp_menu:        InitNoDoubleBuffer
 377+ D3EA             >                            MMUSelectLayer1
 377+ D3EA ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 377+ D3EE CD 80 E0    >                            call	l1_cls
 377+ D3F1 3E 07       >                            ld		a,7
 377+ D3F3 CD 9B E0    >                            call	l1_attr_cls_to_a
 377+ D3F6             >                            MMUSelectLayer2
 377+ D3F6 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 377+ D3FA CD 08 E0    >                            call    asm_l2_double_buffer_off
 377+ D3FD CD C9 E0    >                            call	l2_cls	; Get some space
 377+ D400             >                            MMUSelectSpriteBank
 377+ D400 ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
 377+ D404 CD 27 E4    >                            call    sprite_cls_cursors
 378+ D407 3E 20                                ld      a,$20
 379+ D409 32 32 99                             ld      (MenuIdMax),a
 380+ D40C 3A 1C 9A     .SetData:               ld      a,(Galaxy)
 381+ D40F                                      MMUSelectGalaxyA
 381+ D40F ED 92 57    >                     nextreg GalaxyDataMMU,       a
 382+ D412 CD 6D F9                             call    galaxy_planet_data
 383+ D415 CD F5 F8                             call    galaxy_equip_market
 384+ D418 ED 4B 2F 9A                          ld      bc,(PresentSystemX)
 385+ D41C CD BB FA                             call    galaxy_name_at_bc
 386+ D41F CD 6D F9                             call    galaxy_planet_data
 387+ D422 AF                                   xor     a
 388+ D423 32 90 C0                             ld      (eqshp_current_topItem),a
 389+ D426 CD DC D2                             call    eqshp_buffer_list
 390+ D429 01 01 01     .Drawbox:               ld		bc,$0101
 391+ D42C 11 FD BE                             ld		de,$BEFD
 392+ D42F 3E C0                                ld		a,$C0
 393+ D431                                      MMUSelectLayer2
 393+ D431 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 394+ D435 CD F6 E1                             call	l2_draw_box
 395+ D438 01 01 0A                             ld		bc,$0A01
 396+ D43B 11 C0 FE                             ld		de,$FEC0
 397+ D43E CD 60 E2                             call	l2_draw_horz_line
 398+ D441 3A 1C 9A     .StaticText:	        ld      a,(Galaxy)
 399+ D444                                      MMUSelectGalaxyA
 399+ D444 ED 92 57    >                     nextreg GalaxyDataMMU,       a
 400+ D447 3E 19                                ld		a,25
 401+ D449 CD B8 A5                             call	expandTokenToString
 402+ D44C CD 7A F6                             call	GetDigramGalaxySeed
 403+ D44F CD A3 D3                             call    draw_eqship_items
 404+ D452 AF           .InitialHighlight:      xor     a
 405+ D453 32 8F C0                             ld      (eqshp_selected_row),a        ; assume on row zero
 406+ D456 CD 12 D1                             call    eqshp_highlight_row
 407+ D459 CD A4 D2     .DisCash:               call    eqshp_DisplayCash
 408+ D45C C9                                   ret
 409+ D45D
 410+ D45D              ;----------------------------------------------------------------------------------------------------------------------------------
 411+ D45D CD DC D2     eqip_refesh_buffer:     call    eqshp_buffer_list
 412+ D460 3A 8F C0                             ld      a,(eqshp_selected_row)              ; get revised list length
 413+ D463 47                                   ld      b,a
 414+ D464 3A 90 C0                             ld      a,(eqshp_current_topItem)           ; get current top of screen
 415+ D467 4F                                   ld      c,a
 416+ D468 80                                   add     b                                   ; a = top + selected row
 417+ D469 21 91 C0                             ld      hl,eqshp_current_end
 418+ D46C                                      CallIfAGTENusng (hl), .NewListShorter       ; if a > new list len then rebuild
 418+ D46C BE          >                        cp      (hl)
 418+ D46D D4 73 D4    >                        call	nc,.NewListShorter
 419+ D470 C3 7F D4                             jp      .RedrawList
 420+ D473 C5           .NewListShorter:        push    bc
 421+ D474 CD 22 D1                             call    eqshp_lowlight_row
 422+ D477 C1                                   pop     bc
 423+ D478 3A 91 C0                             ld      a,(eqshp_current_end)               ; b = end of list
 424+ D47B 91                                   sub     c                                   ; minus current top
 425+ D47C 32 8F C0                             ld      (eqshp_selected_row),a
 426+ D47F CD 12 D1     .RedrawList:            call    eqshp_highlight_row
 427+ D482 CD A3 D3                             call    draw_eqship_items
 428+ D485 C9                                   ret
 429+ D486
 430+ D486              ;----------------------------------------------------------------------------------------------------------------------------------
 431+ D486              ; Handles all the input whilst in the market menu
 432+ D486 3E 4A        loop_eqshp_menu:        ld      a,c_Pressed_CursorUp
 433+ D488 CD 7C 96                             call    is_key_pressed
 434+ D48B CC A7 D4                             call    z,eqshp_UpPressed
 435+ D48E 3E 4C                                ld      a,c_Pressed_CursorDown
 436+ D490 CD 7C 96                             call    is_key_pressed
 437+ D493 CC C7 D4                             call    z,eqshp_DownPressed
 438+ D496 3E 08                                ld      a,c_Pressed_RollLeft
 439+ D498 CD 7C 96                             call    is_key_pressed
 440+ D49B CC F3 D4                             call    z,eqshp_LeftPressed
 441+ D49E 3E 0A                                ld      a,c_Pressed_RollRight
 442+ D4A0 CD 7C 96                             call    is_key_pressed
 443+ D4A3 CC 64 D5                             call    z,eqshp_RightPressed
 444+ D4A6 C9                                   ret
 445+ D4A7
 446+ D4A7              ;----------------------------------------------------------------------------------------------------------------------------------
 447+ D4A7 3A 8F C0     eqshp_UpPressed:        ld      a,(eqshp_selected_row)
 448+ D4AA FE 00                                cp      0
 449+ D4AC 28 0B                                jr      z,.check_scroll_up
 450+ D4AE CD 22 D1                             call    eqshp_lowlight_row
 451+ D4B1 21 8F C0                             ld      hl,eqshp_selected_row
 452+ D4B4 35                                   dec     (hl)
 453+ D4B5 CD 12 D1                             call    eqshp_highlight_row
 454+ D4B8 C9                                   ret
 455+ D4B9 3A 90 C0     .check_scroll_up:       ld      a,(eqshp_current_topItem)
 456+ D4BC FE 00                                cp      0
 457+ D4BE C8                                   ret     z
 458+ D4BF 3D                                   dec     a           ; chjange later to buffering step back 1
 459+ D4C0 32 90 C0                             ld      (eqshp_current_topItem),a
 460+ D4C3 CD A3 D3                             call    draw_eqship_items
 461+ D4C6 C9                                   ret
 462+ D4C7              ;----------------------------------------------------------------------------------------------------------------------------------
 463+ D4C7 3A 91 C0     eqshp_DownPressed:      ld      a,(eqshp_current_end)
 464+ D4CA 47                                   ld      b,a                             ; This check is if the current list is < one screen
 465+ D4CB 05                                   dec     b
 466+ D4CC 3A 8F C0                             ld      a,(eqshp_selected_row)
 467+ D4CF B8                                   cp      b
 468+ D4D0 C8                                   ret     z
 469+ D4D1 FE 11                                cp      17
 470+ D4D3 28 0B                                jr      z, .check_scroll_down
 471+ D4D5 CD 22 D1                             call    eqshp_lowlight_row
 472+ D4D8 21 8F C0                             ld      hl,eqshp_selected_row
 473+ D4DB 34                                   inc     (hl)
 474+ D4DC CD 12 D1                             call    eqshp_highlight_row
 475+ D4DF C9                                   ret
 476+ D4E0 47           .check_scroll_down:     ld      b,a
 477+ D4E1 3A 90 C0                             ld      a,(eqshp_current_topItem)
 478+ D4E4 80                                   add     b
 479+ D4E5 3C                                   inc     a
 480+ D4E6 21 91 C0                             ld      hl,eqshp_current_end
 481+ D4E9                                      ReturnIfAGTEusng      (hl)
 481+ D4E9 BE          >                        cp    (hl)
 481+ D4EA D0          >                        ret	 nc
 482+ D4EB 21 90 C0     .can_scroll_down:       ld      hl,eqshp_current_topItem
 483+ D4EE 34                                   inc     (hl)
 484+ D4EF CD A3 D3                             call    draw_eqship_items
 485+ D4F2 C9                                   ret
 486+ D4F3              ;----------------------------------------------------------------------------------------------------------------------------------
 487+ D4F3 3A 1C 9A     eqshp_LeftPressed:      ld      a,(Galaxy)
 488+ D4F6                                      MMUSelectGalaxyA
 488+ D4F6 ED 92 57    >                     nextreg GalaxyDataMMU,       a
 489+ D4F9 DD 21 D6 F4                          ld      ix,ShipEquipmentList
 490+ D4FD 3A 90 C0     .IsItFuel:              ld      a,(eqshp_current_topItem)   ; Can't refund fuel
 491+ D500 47                                   ld      b,a
 492+ D501 3A 8F C0                             ld      a,(eqshp_selected_row)
 493+ D504 80                                   add     b
 494+ D505 FE 00                                cp      0
 495+ D507 C8                                   ret     z
 496+ D508 4F           .FuelNotSelected:       ld      c,a
 497+ D509 16 10        .FindInTable:           ld      d,ShipEquipTableRowLen
 498+ D50B 5F                                   ld      e,a
 499+ D50C ED 30                                mul
 500+ D50E DD 19                                add     ix,de
 501+ D510 DD 7E 07                             ld      a,(ix+7)
 502+ D513 FE 2D                                cp      "-"
 503+ D515 C8                                   ret     z
 504+ D516 79           .CheckIfMissle:         ld      a,c
 505+ D517 FE 01                                cp      EQ_MISSILE
 506+ D519 28 2B                                jr      z,.RefundMissle
 507+ D51B DD 5E 04     .RefundItemCash:        ld      e,(ix+4)
 508+ D51E DD 56 05                             ld      d,(ix+5)
 509+ D521 E5 C5                                push    hl,,bc
 510+ D523 CD 7C A7                             call    addDEtoCash         ; refund laser value
 511+ D526 C1 E1                                pop     hl,,bc
 512+ D528 3E 2D                                ld      a,"-"
 513+ D52A DD 77 07                             ld      (ix+7),a
 514+ D52D 21 B4 9D                             ld      hl,EquipmentFitted
 515+ D530 79                                   ld      a,c                 ; get back current laser ref
 516+ D531 ED 31                                add     hl,a
 517+ D533 36 00                                ld      (hl),0              ; remove laser from equipment
 518+ D535 CD 5D D4                             call    eqip_refesh_buffer
 519+ D538 DD 7E 09                             ld      a,(ix+9)
 520+ D53B FE FF                                cp      $FF
 521+ D53D C8                                   ret     z
 522+ D53E 21 76 9D     .ItsALaser              ld      hl,LaserList
 523+ D541 ED 31                                add     hl,a
 524+ D543 36 00                                ld      (hl),$00
 525+ D545 C9                                   ret
 526+ D546 DD 5E 04     .RefundMissle           ld      e,(ix+4)
 527+ D549 DD 56 05                             ld      d,(ix+5)
 528+ D54C E5 C5                                push    hl,,bc
 529+ D54E CD 7C A7                             call    addDEtoCash         ; refund laser value
 530+ D551 C1 E1                                pop     hl,,bc
 531+ D553 DD 7E 07                             ld      a,(ix+7)
 532+ D556 3D                                   dec     a
 533+ D557 FE 30                                cp      "0"
 534+ D559 20 02                                jr      nz,.NotAllSold
 535+ D55B 3E 2D        .AllSold:               ld      a,"-"
 536+ D55D DD 77 07     .NotAllSold:            ld      (ix+7),a
 537+ D560 CD 5D D4                             call    eqip_refesh_buffer
 538+ D563 C9                                   ret
 539+ D564              ;----------------------------------------------------------------------------------------------------------------------------------
 540+ D564 3A 1C 9A     eqshp_RightPressed:     ld      a,(Galaxy)
 541+ D567                                      MMUSelectGalaxyA
 541+ D567 ED 92 57    >                     nextreg GalaxyDataMMU,       a
 542+ D56A DD 21 D6 F4                          ld      ix,ShipEquipmentList
 543+ D56E 3A 90 C0                             ld      a,(eqshp_current_topItem)
 544+ D571 47                                   ld      b,a
 545+ D572 3A 8F C0                             ld      a,(eqshp_selected_row)
 546+ D575 80                                   add     a,b
 547+ D576 FE 01                                cp      EQ_MISSILE
 548+ D578 20 0A                                jr      nz,.NotAMissileBuy
 549+ D57A 08           .ItsAMissile:           ex      af,af'
 550+ D57B 3E 34                                ld      a,"4"
 551+ D57D 32 96 D5                             ld      (.CompareCheck+1),a
 552+ D580 08                                   ex      af,af'
 553+ D581 C3 8B D5                             jp      .FindInTable
 554+ D584 08           .NotAMissileBuy:        ex      af,af'
 555+ D585 3E 2A                                ld      a,"*"
 556+ D587 32 96 D5                             ld      (.CompareCheck+1),a
 557+ D58A 08                                   ex      af,af'
 558+ D58B 16 10        .FindInTable:           ld      d,ShipEquipTableRowLen
 559+ D58D 5F                                   ld      e,a
 560+ D58E ED 30                                mul
 561+ D590 DD 19                                add     ix,de
 562+ D592 DD 7E 07                             ld      a,(ix+7)
 563+ D595 FE 2A        .CompareCheck:          cp      "*"; not true for missles astyou can buy 1 to 4
 564+ D597 C8                                   ret     z
 565+ D598 47           .Purchasable:           ld      b,a
 566+ D599 DD 7E 06                             ld      a,(ix+6)
 567+ D59C FE 01                                cp      EQ_MISSILE
 568+ D59E 20 06                                jr      nz,.NotMissleMax
 569+ D5A0 21 92 99     .MissleQuanity:         ld      hl,NbrMissiles
 570+ D5A3 78                                   ld      a,b
 571+ D5A4 BE                                   cp      (hl)
 572+ D5A5 C8                                   ret     z
 573+ D5A6 4F           .NotMissleMax:          ld      c,a
 574+ D5A7 DD 7E 01                             ld      a,(ix+1)
 575+ D5AA FE FF                                cp      $FF
 576+ D5AC C8                                   ret     z
 577+ D5AD 2A 73 9D     .CheckCash:             ld      hl,(Cash+2)
 578+ D5B0 7C                                   ld      a,h
 579+ D5B1 B5                                   or      l
 580+ D5B2 20 0F                                jr      nz,.MoreThanRequired
 581+ D5B4 2A 71 9D                             ld      hl,(Cash)
 582+ D5B7 7C                                   ld      a,h
 583+ D5B8 FE 00                                cp      0
 584+ D5BA 20 07                                jr      nz,.MoreThanRequired
 585+ D5BC DD 7E 02                             ld      a,(ix+2)
 586+ D5BF BD                                   cp      l
 587+ D5C0 30 01                                jr      nc,.MoreThanRequired
 588+ D5C2 C9                                   ret                         ; Insufficient Funds
 589+ D5C3 DD 7E 06     .MoreThanRequired:      ld      a,(ix+6)
 590+ D5C6 FE 00                                cp      0
 591+ D5C8 28 15                                jr      z,.MaxFuelOut
 592+ D5CA FE 01                                cp      1
 593+ D5CC 28 1B                                jr      z,.AddMissle
 594+ D5CE                                      JumpIfAGTENusng  EQ_FRONT_PULSE,.AddLaser
 594+ D5CE FE 0A       >                        cp     EQ_FRONT_PULSE
 594+ D5D0 D2 F3 D5    >                        jp		nc,.AddLaser
 595+ D5D3 21 B4 9D     .AddNormalItem:         ld      hl,EquipmentFitted
 596+ D5D6 ED 31                                add     hl,a
 597+ D5D8 36 FF                                ld      (hl),$FF
 598+ D5DA 3E 2A                                ld      a,"*"
 599+ D5DC C3 41 D6                             jp      .AddedItem
 600+ D5DF              .MaxFuelOut:            MaxFuelMacro
 600+ D5DF 3E 46       >						ld		a,MaxFuelLevel
 600+ D5E1 32 75 9D    >						ld		(Fuel),a
 601+ D5E4 3E 2A                                ld      a,"*"
 602+ D5E6 C3 41 D6                             jp      .AddedItem
 603+ D5E9 21 92 99     .AddMissle:             ld      hl,NbrMissiles
 604+ D5EC 34                                   inc     (hl)
 605+ D5ED 7E                                   ld      a,(hl)
 606+ D5EE C6 30                                add     "0"
 607+ D5F0 C3 41 D6                             jp      .AddedItem
 608+ D5F3 DD 7E 08     .AddLaser:              ld      a,(ix+8)            ; Get facing
 609+ D5F6 21 76 9D                             ld      hl,LaserList
 610+ D5F9 ED 31                                add     hl,a
 611+ D5FB 7E                                   ld      a,(hl)              ; get laser list quick ref value
 612+ D5FC FE 00                                cp      0
 613+ D5FE 28 29                                jr      z,.BuyLaser
 614+ D600              .LargeCargoBay: ;TODO
 615+ D600 4F           .RefundExistingLaser:   ld      c,a                 ; retain current laser nbr
 616+ D601 21 D6 F4                             ld      hl,ShipEquipmentList
 617+ D604 16 10                                ld      d,ShipEquipTableRowLen
 618+ D606 5F                                   ld      e,a
 619+ D607 ED 30                                mul
 620+ D609 19                                   add     hl,de               ; now we have the row for the current laser
 621+ D60A 3E 04                                ld      a,4
 622+ D60C ED 31                                add     hl,a
 623+ D60E 7E                                   ld      a,(hl)
 624+ D60F 5F                                   ld      e,a
 625+ D610 23                                   inc     hl
 626+ D611 7E                                   ld      a,(hl)
 627+ D612 57                                   ld      d,a
 628+ D613 E5 C5                                push    hl,,bc
 629+ D615 CD 7C A7                             call    addDEtoCash         ; refund laser value
 630+ D618 C1 E1                                pop     hl,,bc
 631+ D61A 3E 02                                ld      a,2
 632+ D61C ED 31                                add     hl,a
 633+ D61E 3E 2D                                ld      a,"-"
 634+ D620 77                                   ld      (hl),a              ; clear on ship equipment
 635+ D621 21 B4 9D                             ld      hl,EquipmentFitted
 636+ D624 79                                   ld      a,c                 ; get back current laser ref
 637+ D625 ED 31                                add     hl,a
 638+ D627 36 00                                ld      (hl),0              ; remove laser from equipment
 639+ D629 21 B4 9D     .BuyLaser:              ld      hl,EquipmentFitted
 640+ D62C DD 7E 06                             ld      a,(ix+6)
 641+ D62F ED 31                                add     hl,a
 642+ D631 36 FF                                ld      (hl),$FF
 643+ D633 DD 7E 08                             ld      a,(ix+8)
 644+ D636 21 76 9D                             ld      hl,LaserList
 645+ D639 ED 31                                add     hl,a
 646+ D63B DD 7E 06                             ld      a,(ix+6)
 647+ D63E 77                                   ld      (hl),a              ; mark laser list with type
 648+ D63F 3E 2A                                ld      a,"*"
 649+ D641 DD 77 07     .AddedItem              ld      (ix+7),a
 650+ D644 DD 5E 04                             ld      e,(ix+4)
 651+ D647 DD 56 05                             ld      d,(ix+5)
 652+ D64A CD 8F A7                             call    subDEfromCash
 653+ D64D CD 5D D4                             call    eqip_refesh_buffer
 654+ D650 C9                                   ret
# file closed: ./Menus/equip_ship_menu.asm
1340  D651
1341  D651
1342  D651                  SLOT    LaunchShipAddr
1343  D651                  PAGE    BankLaunchShip
1344  D651                  ORG     LaunchShipAddr
1345  C000                  INCLUDE "./Transitions/launch_ship.asm"
# file opened: ./Transitions/launch_ship.asm
   1+ C000 4C 61 75 6E  launchship_page_marker  DB "LaunchShipPG65"
   1+ C004 63 68 53 68
   1+ C008 69 70 50 47
   1+ C00C 36 35
   2+ C00E
   3+ C00E 7E 3F 04 02  launchdraw_table        DB $7E,$3F, $04,$02, $66            ; purple blue
   3+ C012 66
   4+ C013              launchdraw_rowsize      equ $-launchdraw_table
   5+ C013 7C 3E 08 04                          DB $7C,$3E, $08,$04, $66
   5+ C017 66
   6+ C018 7A 3D 0C 06                          DB $7A,$3D, $0C,$06, $66
   6+ C01C 66
   7+ C01D 78 3C 10 08                          DB $78,$3C, $10,$08, $66
   7+ C021 66
   8+ C022 76 3B 14 0A                          DB $76,$3B, $14,$0A, $66
   8+ C026 66
   9+ C027 74 3A 18 0C                          DB $74,$3A, $18,$0C, $66
   9+ C02B 66
  10+ C02C 70 38 20 10                          DB $70,$38, $20,$10, $66
  10+ C030 66
  11+ C031 6C 36 28 14                          DB $6C,$36, $28,$14, $05            ; Black Blue
  11+ C035 05
  12+ C036 68 34 30 18                          DB $68,$34, $30,$18, $05
  12+ C03A 05
  13+ C03B 64 32 38 1C                          DB $64,$32, $38,$1C, $05
  13+ C03F 05
  14+ C040 60 30 40 20                          DB $60,$30, $40,$20, $05
  14+ C044 05
  15+ C045 5C 2E 48 24                          DB $5C,$2E, $48,$24, $05            ; Dark Blue
  15+ C049 05
  16+ C04A 58 2C 50 28                          DB $58,$2C, $50,$28, $02
  16+ C04E 02
  17+ C04F 54 2A 58 2C                          DB $54,$2A, $58,$2C, $02
  17+ C053 02
  18+ C054 50 28 60 30                          DB $50,$28, $60,$30, $02
  18+ C058 02
  19+ C059 4C 26 68 34                          DB $4C,$26, $68,$34, $02
  19+ C05D 02
  20+ C05E 46 23 74 3A                          DB $46,$23, $74,$3A, $02
  20+ C062 02
  21+ C063 40 20 80 40                          DB $40,$20, $80,$40, $02
  21+ C067 02
  22+ C068 38 1C 90 48                          DB $38,$1C, $90,$48, $01            ;Very Dark Blue
  22+ C06C 01
  23+ C06D 30 18 A0 50                          DB $30,$18, $A0,$50, $01
  23+ C071 01
  24+ C072 26 13 B4 5A                          DB $26,$13, $B4,$5A, $01
  24+ C076 01
  25+ C077 1C 0E C8 64                          DB $1C,$0E, $C8,$64, $01
  25+ C07B 01
  26+ C07C 10 08 E0 70                          DB $10,$08, $E0,$70, $00            ;Black
  26+ C080 00
  27+ C081 02 01 FC 7E                          DB $02,$01, $FC,$7E, $00
  27+ C085 00
  28+ C086 FF                                   DB $FF
  29+ C087
  30+ C087              launchtablesize         EQU ($ - launchdraw_table)/launchdraw_rowsize
  31+ C087
  32+ C087 7E 3F 04 02  dockingdraw_table       DB $7E,$3F, $04,$02, $00            ; purple blue
  32+ C08B 00
  33+ C08C              dockingdraw_rowsize     equ $-dockingdraw_table
  34+ C08C 7C 3E 08 04                          DB $7C,$3E, $08,$04, $00
  34+ C090 00
  35+ C091 7A 3D 0C 06                          DB $7A,$3D, $0C,$06, $00
  35+ C095 00
  36+ C096 78 3C 10 08                          DB $78,$3C, $10,$08, $04
  36+ C09A 04
  37+ C09B 76 3B 14 0A                          DB $76,$3B, $14,$0A, $04
  37+ C09F 04
  38+ C0A0 74 3A 18 0C                          DB $74,$3A, $18,$0C, $04
  38+ C0A4 04
  39+ C0A5 70 38 20 10                          DB $70,$38, $20,$10, $21
  39+ C0A9 21
  40+ C0AA 6C 36 28 14                          DB $6C,$36, $28,$14, $21            ; Black Blue
  40+ C0AE 21
  41+ C0AF 68 34 30 18                          DB $68,$34, $30,$18, $21
  41+ C0B3 21
  42+ C0B4 64 32 38 1C                          DB $64,$32, $38,$1C, $25
  42+ C0B8 25
  43+ C0B9 60 30 40 20                          DB $60,$30, $40,$20, $25
  43+ C0BD 25
  44+ C0BE 5C 2E 48 24                          DB $5C,$2E, $48,$24, $25            ; Dark Blue
  44+ C0C2 25
  45+ C0C3 58 2C 50 28                          DB $58,$2C, $50,$28, $25
  45+ C0C7 25
  46+ C0C8 54 2A 58 2C                          DB $54,$2A, $58,$2C, $25
  46+ C0CC 25
  47+ C0CD 50 28 60 30                          DB $50,$28, $60,$30, $4C
  47+ C0D1 4C
  48+ C0D2 4C 26 68 34                          DB $4C,$26, $68,$34, $4C
  48+ C0D6 4C
  49+ C0D7 46 23 74 3A                          DB $46,$23, $74,$3A, $4C
  49+ C0DB 4C
  50+ C0DC 40 20 80 40                          DB $40,$20, $80,$40, $4C
  50+ C0E0 4C
  51+ C0E1 38 1C 90 48                          DB $38,$1C, $90,$48, $6D            ;Very Dark Blue
  51+ C0E5 6D
  52+ C0E6 30 18 A0 50                          DB $30,$18, $A0,$50, $6D
  52+ C0EA 6D
  53+ C0EB 26 13 B4 5A                          DB $26,$13, $B4,$5A, $6D
  53+ C0EF 6D
  54+ C0F0 1C 0E C8 64                          DB $1C,$0E, $C8,$64, $6D
  54+ C0F4 6D
  55+ C0F5 10 08 E0 70                          DB $10,$08, $E0,$70, $92            ;Black
  55+ C0F9 92
  56+ C0FA 02 01 FC 7E                          DB $02,$01, $FC,$7E, $92
  56+ C0FE 92
  57+ C0FF FF                                   DB $FF
  58+ C100
  59+ C100              dockingtablesize         EQU ($ - dockingdraw_table)/dockingdraw_rowsize
  60+ C100
  61+ C100              init_countdown          EQU $FF
  62+ C100 00           launch_countdown        DB  $0000
  63+ C101 0E C0        launch_table_idx        DW launchdraw_table
  64+ C103 87 C0        docking_table_idx       DW dockingdraw_table
  65+ C105 00           current_offsetX         db 0
  66+ C106 00           current_offsetY         db 0
  67+ C107
  68+ C107
  69+ C107              LaunchTubeEdges         MMUSelectLayer2
  69+ C107 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
  70+ C10B 01 00 00                             ld      bc,$0000
  71+ C10E 11 92 01                             ld      de,$0192
  72+ C111 78           .drawLoop1              ld      a,b
  73+ C112 FE 80                                cp      128
  74+ C114 28 25                                jr      z,.DoneEdge
  75+ C116 F5                                   push    af
  76+ C117 C5 D5 C5 D5                          push    bc,,de,,bc,,de
  77+ C11B CD 53 E2                             call    l2_draw_horz_dma_bank           ;"bc = left side row,col, d = length, e = color"
  78+ C11E D1 C1                                pop     bc,,de
  79+ C120 3E FF                                ld      a,$FF
  80+ C122 92                                   sub     d
  81+ C123 4F                                   ld      c,a
  82+ C124 0C                                   inc     c
  83+ C125 CD 53 E2                             call    l2_draw_horz_dma_bank
  84+ C128 D1 C1                                pop     bc,,de
  85+ C12A 78                                   ld      a,b
  86+ C12B FE 40                                cp      64
  87+ C12D 30 06                                jr      nc,.ReduceLoop
  88+ C12F 14                                   inc     d
  89+ C130 14                                   inc     d
  90+ C131 F1                                   pop     af
  91+ C132 04                                   inc     b
  92+ C133 18 DC                                jr      .drawLoop1
  93+ C135 15           .ReduceLoop:            dec     d
  94+ C136 15                                   dec     d
  95+ C137 F1                                   pop     af
  96+ C138 04                                   inc     b
  97+ C139 18 D6                                jr      .drawLoop1
  98+ C13B 3E 80        .DoneEdge:              ld      a,$80
  99+ C13D 01 00 00                             ld      bc,$0000                        ; Top Left
 100+ C140 11 FF 80                             ld      de,$80FF                        ; Bottom Right
 101+ C143 CD 09 E6                             call    l2_draw_diagonal
 102+ C146 3E 80                                ld      a,$80
 103+ C148 01 00 80                             ld      bc,$8000                        ; Botom Left
 104+ C14B 11 FF 00                             ld      de,$00FF                        ; Top Right
 105+ C14E CD 09 E6                             call    l2_draw_diagonal
 106+ C151
 107+ C151 01 00 00                             ld      bc,$0000
 108+ C154 11 80 00                             ld      DE,$0080
 109+ C157 26 60                                ld      h,$60
 110+ C159 2E 55                                ld      l,$55
 111+ C15B C9                                   ret
 112+ C15C
 113+ C15C              LaunchConsole:          MMUSelectConsoleBank                    ; Draw Console
 113+ C15C ED 91 57 3D >					 nextreg ConsoleImageDataMMU,  BankConsole
 114+ C160 21 00 50                             ld      hl,ScreenL1Bottom
 115+ C163 11 00 E0                             ld      de,ConsoleImageData
 116+ C166 01 00 08                             ld      bc, ScreenL1BottomLen
 117+ C169 CD 4E 95                             call    memcopy_dma
 118+ C16C 21 00 5A                             ld      hl,ScreenL1AttrBtm       ; now the pointers are in Ubnk its easy to read
 119+ C16F 11 00 E8                             ld      de,ConsoleAttributes
 120+ C172 01 00 01                             ld      bc, ScreenL1AttrBtmLen
 121+ C175 CD 4E 95                             call    memcopy_dma
 122+ C178 C9                                   ret
 123+ C179
 124+ C179              CoriloisStation         equ     13
 125+ C179
 126+ C179
 127+ C179              draw_launch_ship:       MMUSelectLayer1
 127+ C179 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 128+ C17D CD 80 E0                             call    l1_cls
 129+ C180 CD 9A E0                             call    l1_attr_cls
 130+ C183                                      MMUSelectSpriteBank
 130+ C183 ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
 131+ C187 CD 27 E4                             call    sprite_cls_cursors
 132+ C18A                                      MMUSelectLayer2
 132+ C18A ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 133+ C18E CD 02 E0                             call    asm_l2_double_buffer_on
 134+ C191 3E FF        .CurrentBuffer:         ld      a,$FF                           ; Clear upper 2 thirds to white
 135+ C193 32 72 E0                             ld      (l2_cls_byte),a
 136+ C196 CD 92 E0                             call    l2_set_color_upper2
 137+ C199 3E E3                                ld      a,COLOUR_TRANSPARENT            ; Lower third transparent
 138+ C19B 32 72 E0                             ld      (l2_cls_byte),a
 139+ C19E CD BE E0                             call    l2_cls_lower_third
 140+ C1A1 CD 07 C1                             call    LaunchTubeEdges
 141+ C1A4 CD 5C C1                             call    LaunchConsole
 142+ C1A7              .NextBuffer:            MMUSelectLayer2
 142+ C1A7 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 143+ C1AB CD DD E0                             call    l2_flip_buffers
 144+ C1AE 3E FF                                ld      a,$FF                           ; Clear upper 2 thirds to white
 145+ C1B0 32 72 E0                             ld      (l2_cls_byte),a
 146+ C1B3 CD 92 E0                             call    l2_set_color_upper2
 147+ C1B6 3E E3                                ld      a,COLOUR_TRANSPARENT            ; Lower third transparent
 148+ C1B8 32 72 E0                             ld      (l2_cls_byte),a
 149+ C1BB CD BE E0                             call    l2_cls_lower_third
 150+ C1BE CD 07 C1                             call    LaunchTubeEdges
 151+ C1C1 CD 5C C1                             call    LaunchConsole
 152+ C1C4 3E FF        .SetUpTimers:           ld      a,init_countdown
 153+ C1C6 32 00 C1                             ld      (launch_countdown),a
 154+ C1C9 21 0E C0                             ld      hl,launchdraw_table
 155+ C1CC 22 01 C1                             ld      (launch_table_idx),hl
 156+ C1CF AF                                   xor     a
 157+ C1D0 32 05 C1                             ld      (current_offsetX),a
 158+ C1D3 32 06 C1                             ld      (current_offsetY),a
 159+ C1D6              .SetupGalaxy:           MaxThrottle
 159+ C1D6 3A 22 99    >                        ld      a,(SHIPMAXSPEED)
 159+ C1D9 32 23 99    >                        ld      (DELTA),a
 159+ C1DC 57          >                        ld      d,a
 159+ C1DD 1E 04       >                        ld      e,4
 159+ C1DF ED 30       >                        mul
 159+ C1E1 ED 53 24 99 >                        ld      (DELT4Lo),de
 160+ C1E5                                      ZeroThrottle; DEBUG
 160+ C1E5 AF          >                        xor     a
 160+ C1E6 32 23 99    >                        ld      (DELTA),a
 160+ C1E9 32 24 99    >                        ld      (DELT4Lo),a
 160+ C1EC 32 25 99    >                        ld      (DELT4Lo+1),a
 161+ C1EF              ; To launch we need to set docked flag to transition FE and at teh end of the transition set to FD to rebuild universe
 162+ C1EF 3E FE                                ld      a,$FE
 163+ C1F1 32 36 99                             ld      (DockedFlag),a
 164+ C1F4 C9                                   ret
 165+ C1F5
 166+ C1F5
 167+ C1F5              draw_docking_ship:      MMUSelectLayer1
 167+ C1F5 ED 91 57 3A >					 nextreg L1memMMU,		    BankLAYER1
 168+ C1F9 CD 80 E0                             call    l1_cls
 169+ C1FC CD 9A E0                             call    l1_attr_cls
 170+ C1FF                                      MMUSelectSpriteBank
 170+ C1FF ED 91 57 3C >					 nextreg SpritememMMU,	    BankSPRITE
 171+ C203 CD 27 E4                             call    sprite_cls_cursors
 172+ C206                                      MMUSelectLayer2
 172+ C206 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 173+ C20A CD 02 E0                             call    asm_l2_double_buffer_on
 174+ C20D 3E FF        .CurrentBuffer:         ld      a,$FF                           ; Clear upper 2 thirds to white
 175+ C20F 32 72 E0                             ld      (l2_cls_byte),a
 176+ C212 CD 92 E0                             call    l2_set_color_upper2
 177+ C215 3E E3                                ld      a,COLOUR_TRANSPARENT            ; Lower third transparent
 178+ C217 32 72 E0                             ld      (l2_cls_byte),a
 179+ C21A CD BE E0                             call    l2_cls_lower_third
 180+ C21D CD 07 C1                             call    LaunchTubeEdges
 181+ C220 CD 5C C1                             call    LaunchConsole
 182+ C223              .NextBuffer:            MMUSelectLayer2
 182+ C223 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 183+ C227 CD DD E0                             call    l2_flip_buffers
 184+ C22A 3E FF                                ld      a,$FF                           ; Clear upper 2 thirds to white
 185+ C22C 32 72 E0                             ld      (l2_cls_byte),a
 186+ C22F CD 92 E0                             call    l2_set_color_upper2
 187+ C232 3E E3                                ld      a,COLOUR_TRANSPARENT            ; Lower third transparent
 188+ C234 32 72 E0                             ld      (l2_cls_byte),a
 189+ C237 CD BE E0                             call    l2_cls_lower_third
 190+ C23A CD 07 C1                             call    LaunchTubeEdges
 191+ C23D CD 5C C1                             call    LaunchConsole
 192+ C240 3E FF        .SetUpTimers:           ld      a,init_countdown
 193+ C242 32 00 C1                             ld      (launch_countdown),a
 194+ C245 21 87 C0                             ld      hl,dockingdraw_table
 195+ C248 22 03 C1                             ld      (docking_table_idx),hl
 196+ C24B AF                                   xor     a
 197+ C24C 32 05 C1                             ld      (current_offsetX),a
 198+ C24F 32 06 C1                             ld      (current_offsetY),a
 199+ C252 AF           .SetupGalaxy:           xor     a ; palcehodler as it would cause next macro to fail re initialise all universe banks
 200+ C253                                      ZeroThrottle
 200+ C253 AF          >                        xor     a
 200+ C254 32 23 99    >                        ld      (DELTA),a
 200+ C257 32 24 99    >                        ld      (DELT4Lo),a
 200+ C25A 32 25 99    >                        ld      (DELT4Lo+1),a
 201+ C25D 3E FF                                ld      a,$FF
 202+ C25F 32 36 99                             ld      (DockedFlag),a ; we don't kill off shipts as we kill them on launch
 203+ C262 C9                                   ret
 204+ C263
 205+ C263 CD 07 C1     loop_launch_ship:       call    LaunchTubeEdges
 206+ C266 3E FF                                ld      a,init_countdown
 207+ C268 32 00 C1                             ld      (launch_countdown),a
 208+ C26B 2A 01 C1                             ld      hl,(launch_table_idx)
 209+ C26E 4E                                   ld      c,(hl)
 210+ C26F 79                                   ld      a,c
 211+ C270 FE FF                                cp      $FF
 212+ C272 28 1E                                jr      z,.FinishedLaunch
 213+ C274 23                                   inc     hl
 214+ C275 46                                   ld      b,(hl)                 ; bc = top left
 215+ C276 23                                   inc     hl
 216+ C277 5E                                   ld      e,(hl)
 217+ C278 23                                   inc     hl
 218+ C279 56                                   ld      d,(hl)                 ;de = width and height
 219+ C27A 23                                   inc     hl
 220+ C27B 7E                                   ld      a,(hl)                 ; a = colour
 221+ C27C 23                                   inc     hl
 222+ C27D 22 01 C1                             ld      (launch_table_idx),hl
 223+ C280 67                                   ld      h,a
 224+ C281 C5 D5                                push    bc,,de
 225+ C283                                      MMUSelectLayer2
 225+ C283 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 226+ C287 CD E6 E1                             call    l2_draw_fill_box        ; ; "l2_draw_fill_box bc=rowcol, de=heightwidth h=color"
 227+ C28A D1 C1                                pop     bc,,de
 228+ C28C 3E 80                                ld      a,$80
 229+ C28E CD F6 E1                             call    l2_draw_box             ; "l2_draw_box bc=rowcol, de=heightwidth a=color"
 230+ C291 C9                                   ret
 231+ C292 3E FD        .FinishedLaunch:        ld      a,$FD                   ; now seed that we need a universe rebuild post launch
 232+ C294 32 36 99                             ld      (DockedFlag),a
 233+ C297 C9                                   ret
 234+ C298
 235+ C298 CD 07 C1     loop_docking_ship:      call    LaunchTubeEdges
 236+ C29B 3E FF                                ld      a,init_countdown
 237+ C29D 32 00 C1                             ld      (launch_countdown),a
 238+ C2A0 2A 03 C1                             ld      hl,(docking_table_idx)
 239+ C2A3 4E                                   ld      c,(hl)
 240+ C2A4 79                                   ld      a,c
 241+ C2A5 FE FF                                cp      $FF
 242+ C2A7 28 1E                                jr      z,.FinishedDocking
 243+ C2A9 23                                   inc     hl
 244+ C2AA 46                                   ld      b,(hl)                 ; bc = top left
 245+ C2AB 23                                   inc     hl
 246+ C2AC 5E                                   ld      e,(hl)
 247+ C2AD 23                                   inc     hl
 248+ C2AE 56                                   ld      d,(hl)                 ;de = width and height
 249+ C2AF 23                                   inc     hl
 250+ C2B0 7E                                   ld      a,(hl)
 251+ C2B1 23                                   inc     hl
 252+ C2B2 22 03 C1                             ld      (docking_table_idx),hl
 253+ C2B5 67                                   ld      h,a
 254+ C2B6 C5 D5                                push    bc,,de
 255+ C2B8                                      MMUSelectLayer2
 255+ C2B8 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 256+ C2BC CD E6 E1                             call    l2_draw_fill_box
 257+ C2BF D1 C1                                pop     bc,,de
 258+ C2C1 3E 80                                ld      a,$80
 259+ C2C3 CD F6 E1                             call    l2_draw_box
 260+ C2C6 C9                                   ret
 261+ C2C7              .FinishedDocking        ForceTransition ScreenStatus              ; Force move to status screen
 261+ C2C7 3E 04       >                        ld      a,ScreenStatus
 261+ C2C9 32 93 87    >                        ld      (ScreenTransitionForced), a
 262+ C2CC C9                                   ret
 263+ C2CD
 264+ C2CD
 265+ C2CD
# file closed: ./Transitions/launch_ship.asm
1346  C2CD
1347  C2CD              ; Bank 70  ------------------------------------------------------------------------------------------------------------------------
1348  C2CD                  SLOT    UniverseBankAddr
1349  C2CD                  PAGE    BankUNIVDATA0
1350  C2CD              	ORG	    UniverseBankAddr,BankUNIVDATA0
1351  C000                  INCLUDE "./Universe/Ships/univ_ship_data.asm"
# file opened: ./Universe/Ships/univ_ship_data.asm
   1+ C000              ; In  flight ship data tables
   2+ C000              ; In  flight ship data tables
   3+ C000              ; There can be upto &12 objects in flight.
   4+ C000              ; To avoid hassle of memory heap managment, the free list
   5+ C000              ; will correspond to a memory bank offset so data will be held in
   6+ C000              ; 1 bank per universe object. Its a waste of a lot of memory but really
   7+ C000              ; 1 bank per universe object. Its a waste of a lot of memory but really
   8+ C000              ; simple that way. Each bank will be 8K and swapped on 8K slot 7 $E000 to $FFFF
   9+ C000              ; This means each gets its own line list, inwork etc
  10+ C000
  11+ C000              ; "Runtime Ship Data paged into in Bank 7"
  12+ C000 55 6E 69 76  StartOfUniv:        DB "Universe PG"
  12+ C004 65 72 73 65
  12+ C008 20 50 47
  13+ C00B 58           StartOfUnivN:       DB "X"
  14+ C00C              ; NOTE we can cheat and pre allocate segs just using a DS for now
  15+ C00C
  16+ C00C              ;   \ -> & 565D \ See ship data files chosen and loaded after flight code starts running.
  17+ C00C              ; Universe map substibute for INWK
  18+ C00C              ;-Camera Position of Ship----------------------------------------------------------------------------------------------------------
  19+ C00C                                     INCLUDE "./Universe/Ships/AIRuntimeData.asm"
# file opened: ././Universe/Ships/AIRuntimeData.asm
   1++C00C              ;-Camera Position of Ship----------------------------------------------------------------------------------------------------------
   2++C00C 00           UBnKxlo                     DB  0                       ; INWK+0
   3++C00D 00           UBnKxhi                     DB  0                       ; there are hi medium low as some times these are 24 bit
   4++C00E 00           UBnKxsgn                    DB  0                       ; INWK+2
   5++C00F 00           UBnKylo                     DB  0                       ; INWK+3 \ ylo
   6++C010 00           UBnKyhi                     DB  0                       ; INWK+4 \ yHi
   7++C011 00           UBnKysgn                    DB  0                       ; INWK +5
   8++C012 00           UBnKzlo                     DB  0                       ; INWK +6
   9++C013 00           UBnKzhi                     DB  0                       ; INWK +7
  10++C014 00           UBnKzsgn                    DB  0                       ; INWK +8
  11++C015              ;-Rotation Matrix of Ship----------------------------------------------------------------------------------------------------------
  12++C015              ; Rotation data is stored as lohi, but only 15 bits with 16th bit being  a sign bit. Note this is NOT 2'c compliment
  13++C015              ; Note they seem to have to be after camera position not quite found why yet, can only assume it does an iy or ix indexed copy? Bu oddly does not affect space station.
  14++C015 00 00        UBnkrotmatSidevX            DW  0                       ; INWK +21
  15++C017              UBnkrotmatSidev             equ UBnkrotmatSidevX
  16++C017 00 00        UBnkrotmatSidevY            DW  0                       ; INWK +23
  17++C019 00 00        UBnkrotmatSidevZ            DW  0                       ; INWK +25
  18++C01B 00 00        UBnkrotmatRoofvX            DW  0                       ; INWK +15
  19++C01D              UBnkrotmatRoofv             equ UBnkrotmatRoofvX
  20++C01D 00 00        UBnkrotmatRoofvY            DW  0                       ; INWK +17
  21++C01F 00 00        UBnkrotmatRoofvZ            DW  0                       ; INWK +19
  22++C021 00 00        UBnkrotmatNosevX            DW  0                       ; INWK +9
  23++C023              UBnkrotmatNosev             EQU UBnkrotmatNosevX
  24++C023 00 00        UBnkrotmatNosevY            DW  0                       ; INWK +11
  25++C025 00 00        UBnkrotmatNosevZ            DW  0                       ; INWK +13
  26++C027              ; -- Note these must be here for initialise blast as it does a 12 byte ldir
  27++C027              ; . Note missile explosion will have to have logic to cause linger if a blast is to be enqued
  28++C027 00           UBnKMissileBlastRange:      DB  0                       ; copied in when setting up a missile
  29++C028 00           UBnKMissileBlastDamage:     DB  0                       ; copied in when setting up a missile
  30++C029 00           UBnKMissileDetonateRange:   DB  0                       ; copied in when setting up a missile, allows for proximity missiles
  31++C02A 00           UBnKMissileDetonateDamage:  DB  0                       ; copied in when setting up a missile
  32++C02B              ; -- Metadata for ship to help with bank managment
  33++C02B 00           UBnKShipType                DB  0
  34++C02C 00           UbnKShipBankNbr             DB  0
  35++C02D 00           UBnkShipModelBank           DB  0
  36++C02E 00           UBnkShipModelNbr            DB  0
  37++C02F              ; -- Ship AI data
  38++C02F 00           UBnKMissleHitToProcess      DB  0                       ; This is used for enquing missle blasts as we can only do one missile at a time, could make it multi but neeed to smooth CPU usage
  39++C030 00           UBnKMissileTarget           DB  0                       ; This is the bank number for the target from 0 to n if the missile is not hostile to us
  40++C031 00           UBnKspeed                   DB  0                       ; INWK +27
  41++C032 00           UBnKAccel                   DB  0                       ; INWK +28
  42++C033 00           UBnKRotXCounter             DB  0                       ; INWK +29
  43++C034 00           UBnKRotZCounter             DB  0                       ; INWK +30
  44++C035 00           UBnKexplDsp                 DB  0                       ; INWK +31 clear exploding/display state|missiles
  45++C036              ; Flags work as follows:
  46++C036              ; 7 - Flag ship to be killed with debris
  47++C036              ; 6 - Invisible/Erase (also mentions Laser Firing?)
  48++C036              ; 5 - Ship is exploding if set, note if its a missile and one already equeued this will have to linger
  49++C036              ;     linger can be done by not erasing ship unit missile equeue handled
  50++C036              ; 4 -
  51++C036              ; 3 - Display state - Plot as a Dot
  52++C036              ; 2 - Nbr of Missiles bit 2
  53++C036              ; 1 - Nbr of Missiles bit 1
  54++C036              ; 0 - Nbr of Missiles bit 0
  55++C036 00           UBnkDrawAllFaces            DB  0
  56++C037 00           UBnkaiatkecm                DB  0                       ; INWK +32 ai_attack_univ_ecm i.e. AI type
  57++C038 00           UBnkCam0yLo                 DB  0                       ; INWK +33 ????
  58++C039 00           UBnkCam0yHi                 DB  0                       ; INWK +34?????
  59++C03A 00           UbnKEnergy                  DB  0                       ; INWK +35
  60++C03B              UBnKRuntimeSize             EQU $-UBnKShipType
  61++C03B              ; Flags work as follows:
  62++C03B              ;Bit	Description
  63++C03B              ;#0	Trader flag         * 0 = not a trader  * 1 = trader
  64++C03B              ;                       80% of traders are peaceful and mind their own business plying their trade between the planet and space station, but 20% of them moonlight as bounty hunters (see bit #1)
  65++C03B              ;                       Ships that are traders: Escape pod, Shuttle, Transporter, Anaconda, Rock hermit, Worm
  66++C03B              ;#1 Bounty hunter flag  * 0 = not a bounty hunter* 1 = bounty hunter
  67++C03B              ;                       If we are a fugitive or a serious offender and we bump into a bounty hunter, they will become hostile and attack us (see bit #2)
  68++C03B              ;                       Ships that are bounty hunters: Viper, Fer-de-lance
  69++C03B              ;#2	Hostile flag        * 0 = not hostile  * 1 = hostile
  70++C03B              ;                       Hostile ships will attack us on sight; there are quite a few of them
  71++C03B              ;                       Ships that are hostile: Sidewinder, Mamba, Krait, Adder, Gecko, Cobra Mk I, Worm, Cobra Mk III, Asp Mk II, Python (pirate), Moray, Thargoid, Thargon, Constrictor
  72++C03B              ;#3	Pirate flag         * 0 = not a pirate * 1 = pirate
  73++C03B              ;                       Hostile pirates will attack us on sight, but once we get inside the space station safe zone, they will stop
  74++C03B              ;                       Ships that are pirates: Sidewinder, Mamba, Krait, Adder, Gecko, Cobra Mk I, Cobra Mk III, Asp Mk II, Python (pirate), Moray, Thargoid
  75++C03B              ;#4	Docking flag        * 0 = not docking * 1 = docking
  76++C03B              ;                       Traders with their docking flag set fly towards the space station to try to dock, otherwise they aim for the planet
  77++C03B              ;                       This flag is randomly set for traders when they are spawned
  78++C03B              ;                       Ships that can be docking: Escape pod, Shuttle, Transporter, Anaconda, Rock hermit, Worm
  79++C03B              ;#5	Innocent bystander  * 0 = normal * 1 = innocent bystander
  80++C03B              ;                       If we attack an innocent ship within the space station safe zone, then the station will get angry with us and start spawning cops
  81++C03B              ;                       Ships that are innocent bystanders: Shuttle, Transporter, Cobra Mk III, Python, Boa, Anaconda, Rock hermit, Cougar
  82++C03B              ;#6	Cop flag            * 0 = not a cop * 1 = cop
  83++C03B              ;                       If we destroy a cop, then we instantly become a fugitive (the Transporter isn't actually a cop, but it's clearly under police protection)
  84++C03B              ;                       Ships that are cops: Viper, Transporter
  85++C03B              ;#7	Scooped, docked, escape pod flag
  86++C03B              ;                       For spawned ships, this flag indicates that the ship been scooped or has docked (bit 7 is always clear on spawning)
  87++C03B              ;                       For blueprints, this flag indicates whether the ship type has an escape pod fitted, so it can launch it when in dire straits
  88++C03B              ;                       Ships that have escape pods: Cobra Mk III, Python, Boa, Anaconda, Rock hermit, Viper, Mamba, Krait, Adder, Cobra Mk I, Cobra Mk III (pirate), Asp Mk II, Python (pirate), Fer-de-lance
  89++C03B
# file closed: ././Universe/Ships/AIRuntimeData.asm
  20+ C03B              ; moved to runtime asm
  21+ C03B              ;                        INCLUDE "./Universe/Ships/ShipPosVars.asm"
  22+ C03B              ;                        INCLUDE "./Universe/Ships/RotationMatrixVars.asm"
  23+ C03B
  24+ C03B              ; Orientation Matrix [nosev x y z ] nose vector ( forward) 19 to 26
  25+ C03B              ;                    [roofv x y z ] roof vector (up)
  26+ C03B              ;                    [sidev x y z ] side vector (right)
  27+ C03B              ;;rotXCounter                 equ UBnkrotXCounter         ; INWK +29
  28+ C03B              ;;rotZCounter                 equ UBnkrotZCounter         ; INWK +30UBnkDrawCam0xLo   DB  0               ; XX18+0
  29+ C03B 00           univRAT      DB  0               ; 99
  30+ C03C 00           univRAT2     DB  0               ; 9A
  31+ C03D 00           univRAT2Val  DB  0               ; 9A
  32+ C03E
  33+ C03E                                      INCLUDE "./Universe/Ships/XX16Vars.asm"
# file opened: ././Universe/Ships/XX16Vars.asm
   1++C03E              ;-- XX16 --------------------------------------------------------------------------------------------------------------------------
   2++C03E 00 00        UBnkTransmatSidevX          DW  0               ; XX16+0
   3++C040              UBnkTransmatSidev           EQU UBnkTransmatSidevX
   4++C040 00 00        UBnkTransmatSidevY          DW 0                ; XX16+2
   5++C042 00 00        UBnkTransmatSidevZ          DW 0                ; XX16+2
   6++C044 00 00        UBnkTransmatRoofvX          DW 0
   7++C046              UBnkTransmatRoofv           EQU UBnkTransmatRoofvX
   8++C046 00 00        UBnkTransmatRoofvY          DW 0                ; XX16+2
   9++C048 00 00        UBnkTransmatRoofvZ          DW 0                ; XX16+2
  10++C04A 00 00        UBnkTransmatNosevX          DW 0
  11++C04C              UBnkTransmatNosev           EQU UBnkTransmatNosevX
  12++C04C 00 00        UBnkTransmatNosevY          DW 0                ; XX16+2
  13++C04E 00 00        UBnkTransmatNosevZ          DW 0                ; XX16+2
  14++C050 00 00        UbnkTransmatTransX          DW 0
  15++C052 00 00        UbnkTransmatTransY          DW 0
  16++C054 00 00        UbnkTransmatTransZ          DW 0
  17++C056              XX16                        equ UBnkTransmatSidev
  18++C056              ;-- XX16Inv --------------------------------------------------------------------------------------------------------------------------
  19++C056 00 00        UbnkTransInvRow0x0          DW 0
  20++C058 00 00        UbnkTransInvRow0x1          DW 0
  21++C05A 00 00        UbnkTransInvRow0x2          DW 0
  22++C05C 00 00        UbnkTransInvRow0x3          DW 0
  23++C05E 00 00        UbnkTransInvRow1y0          DW 0
  24++C060 00 00        UbnkTransInvRow1y1          DW 0
  25++C062 00 00        UbnkTransInvRow1y2          DW 0
  26++C064 00 00        UbnkTransInvRow1y3          DW 0
  27++C066 00 00        UbnkTransInvRow2z0          DW 0
  28++C068 00 00        UbnkTransInvRow2z1          DW 0
  29++C06A 00 00        UbnkTransInvRow2z2          DW 0
  30++C06C 00 00        UbnkTransInvRow2z3          DW 0
  31++C06E
  32++C06E              XX16Inv             equ UbnkTransInvRow0x0
  33++C06E
# file closed: ././Universe/Ships/XX16Vars.asm
  34+ C06E                                      INCLUDE "./Universe/Ships/XX25Vars.asm"
# file opened: ././Universe/Ships/XX25Vars.asm
   1++C06E              ;-- XX25 --------------------------------------------------------------------------------------------------------------------------
   2++C06E 00           UbnkProjxLo                 DB  0
   3++C06F 00           UbnkProjxHi                 DB  0
   4++C070 00           UbnkProjxSgn                DB  0
   5++C071              UbnkProjx                   EQU UbnkProjxLo
   6++C071 00           UbnkProjyLo                 DB  0
   7++C072 00           UbnkProjyHi                 DB  0
   8++C073 00           UbnkProjySgn                DB  0
   9++C074              UbnkProjy                   EQU UbnkProjyLo
  10++C074 00           UbnkProjzLo                 DB  0
  11++C075 00           UbnkProjzHi                 DB  0
  12++C076 00           UbnkProjzSgn                DB  0
  13++C077              UbnkProjz                   EQU UbnkProjzLo
  14++C077              XX25                        EQU UbnkProjxLo
  15++C077
# file closed: ././Universe/Ships/XX25Vars.asm
  35+ C077                                      INCLUDE "./Universe/Ships/XX18Vars.asm"
# file opened: ././Universe/Ships/XX18Vars.asm
   1++C077              ;-- XX18 --------------------------------------------------------------------------------------------------------------------------
   2++C077 00           UBnkDrawCam0xLo             DB  0               ; XX18+0
   3++C078 00           UBnkDrawCam0xHi             DB  0               ; XX18+1
   4++C079 00           UBnkDrawCam0xSgn            DB  0               ; XX18+2
   5++C07A              UBnkDrawCam0x               equ UBnkDrawCam0xLo
   6++C07A 00           UBnkDrawCam0yLo             DB  0               ; XX18+3
   7++C07B 00           UBnkDrawCam0yHi             DB  0               ; XX18+4
   8++C07C 00           UBnkDrawCam0ySgn            DB  0               ; XX18+5
   9++C07D              UBnkDrawCam0y               equ UBnkDrawCam0yLo
  10++C07D 00           UBnkDrawCam0zLo             DB  0               ; XX18+6
  11++C07E 00           UBnkDrawCam0zHi             DB  0               ; XX18+7
  12++C07F 00           UBnkDrawCam0zSgn            DB  0               ; XX18+8
  13++C080              UBnkDrawCam0z               equ UBnkDrawCam0zLo
  14++C080              XX18                        equ UBnkDrawCam0xLo
  15++C080
# file closed: ././Universe/Ships/XX18Vars.asm
  36+ C080
  37+ C080              ; Used to make 16 bit reads a little cleaner in source code
  38+ C080 00 00 00     UbnkZPoint                  DS  3
  39+ C083              UbnkZPointLo                equ UbnkZPoint
  40+ C083              UbnkZPointHi                equ UbnkZPoint+1
  41+ C083              UbnkZPointSign              equ UbnkZPoint+2
  42+ C083                                      INCLUDE "./Universe/Ships/XX15Vars.asm"
# file opened: ././Universe/Ships/XX15Vars.asm
   1++C083              ;-- XX15 --------------------------------------------------------------------------------------------------------------------------
   2++C083 00           UBnkXScaled                 DB  0               ; XX15+0Xscaled
   3++C084 00           UBnkXScaledSign             DB  0               ; XX15+1xsign
   4++C085 00           UBnkYScaled                 DB  0               ; XX15+2yscaled
   5++C086 00           UBnkYScaledSign             DB  0               ; XX15+3ysign
   6++C087 00           UBnkZScaled                 DB  0               ; XX15+4zscaled
   7++C088 00           UBnkZScaledSign             DB  0               ; XX15+5zsign
   8++C089
   9++C089              XX15                        equ UBnkXScaled
  10++C089              XX15VecX                    equ XX15
  11++C089              XX15VecY                    equ XX15+1
  12++C089              XX15VecZ                    equ XX15+2
  13++C089              UbnkXPoint                  equ XX15
  14++C089              UbnkXPointLo                equ XX15+0
  15++C089              UbnkXPointHi                equ XX15+1
  16++C089              UbnkXPointSign              equ XX15+2
  17++C089              UbnkYPoint                  equ XX15+3
  18++C089              UbnkYPointLo                equ XX15+3
  19++C089              UbnkYPointHi                equ XX15+4
  20++C089              UbnkYPointSign              equ XX15+5
  21++C089              ; Repurposed XX15 pre clip plines
  22++C089              UbnkPreClipX1               equ XX15+0
  23++C089              UbnkPreClipY1               equ XX15+2
  24++C089              UbnkPreClipX2               equ XX15+4
  25++C089              UbnkPreClipY2               equ XX15+6
  26++C089              ; Repurposed XX15 post clip lines
  27++C089              UBnkNewX1                   equ XX15+0
  28++C089              UBnkNewY1                   equ XX15+1
  29++C089              UBnkNewX2                   equ XX15+2
  30++C089              UBnkNewY2                   equ XX15+3
  31++C089              ; Repurposed XX15
  32++C089              regXX15fx                   equ UBnkXScaled
  33++C089              regXX15fxSgn                equ UBnkXScaledSign
  34++C089              regXX15fy                   equ UBnkYScaled
  35++C089              regXX15fySgn                equ UBnkYScaledSign
  36++C089              regXX15fz                   equ UBnkZScaled
  37++C089              regXX15fzSgn                equ UBnkZScaledSign
  38++C089              ; Repurposed XX15
  39++C089              varX1                       equ UBnkXScaled       ; Reused, verify correct position
  40++C089              varY1                       equ UBnkXScaledSign   ; Reused, verify correct position
  41++C089              varZ1                       equ UBnkYScaled       ; Reused, verify correct position
  42++C089              ; After clipping the coords are two 8 bit pairs
  43++C089              UBnkPoint1Clipped           equ UBnkXScaled
  44++C089              UBnkPoint2Clipped           equ UBnkYScaled
  45++C089              ; Repurposed XX15 when plotting lines
  46++C089              ; Repurposed XX15 before calling clip routine
  47++C089              UBnkX1                      equ XX15
  48++C089              UBnKx1Lo                    equ XX15
  49++C089              UBnKx1Hi                    equ XX15+1
  50++C089              UBnkY1                      equ XX15+2
  51++C089              UbnKy1Lo                    equ XX15+2
  52++C089              UBnkY1Hi                    equ XX15+3
  53++C089              UBnkX2                      equ XX15+4
  54++C089              UBnkX2Lo                    equ XX15+4
  55++C089              UBnkX2Hi                    equ XX15+5
  56++C089
# file closed: ././Universe/Ships/XX15Vars.asm
  43+ C089                                      INCLUDE "./Universe/Ships/XX12Vars.asm"
# file opened: ././Universe/Ships/XX12Vars.asm
   1++C089              ;-- transmat0 --------------------------------------------------------------------------------------------------------------------------
   2++C089              ; Note XX12 comes after as some logic in normal processing uses XX15 and XX12 combines
   3++C089 00           UBnkXX12xLo                 DB  0               ; XX12+0
   4++C08A 00           UBnkXX12xSign               DB  0               ; XX12+1
   5++C08B 00           UBnkXX12yLo                 DB  0               ; XX12+2
   6++C08C 00           UBnkXX12ySign               DB  0               ; XX12+3
   7++C08D 00           UBnkXX12zLo                 DB  0               ; XX12+4
   8++C08E 00           UBnkXX12zSign               DB  0               ; XX12+5
   9++C08F 00 00 00...  XX12Save                    DS  6
  10++C095 00 00 00...  XX12Save2                   DS  6
  11++C09B              XX12                        equ UBnkXX12xLo
  12++C09B              varXX12                     equ UBnkXX12xLo
  13++C09B              ; Repurposed XX12 when plotting lines
  14++C09B              UBnkY2                      equ XX12+0
  15++C09B              UbnKy2Lo                    equ XX12+0
  16++C09B              UBnkY2Hi                    equ XX12+1
  17++C09B              UBnkDeltaXLo                equ XX12+2
  18++C09B              UBnkDeltaXHi                equ XX12+3
  19++C09B              UBnkDeltaYLo                equ XX12+4
  20++C09B              UBnkDeltaYHi                equ XX12+5
  21++C09B              UbnkGradient                equ XX12+2
  22++C09B              UBnkTemp1                   equ XX12+2
  23++C09B              UBnkTemp1Lo                 equ XX12+2
  24++C09B              UBnkTemp1Hi                 equ XX12+3
  25++C09B              UBnkTemp2                   equ XX12+3
  26++C09B              UBnkTemp2Lo                 equ XX12+3
  27++C09B              UBnkTemp2Hi                 equ XX12+4
  28++C09B
# file closed: ././Universe/Ships/XX12Vars.asm
  44+ C09B
  45+ C09B
  46+ C09B              ; Post clipping the results are now 8 bit
  47+ C09B 00           UBnkVisibility              DB  0               ; replaces general purpose xx4 in rendering
  48+ C09C 00           UBnKDrawAsDot               DB  0               ; if 0 then OK, if 1 then just draw dot of line heap
  49+ C09D 00           UBnkProjectedY              DB  0
  50+ C09E 00           UBnkProjectedX              DB  0
  51+ C09F              UBnkProjected               equ UBnkProjectedY  ; resultant projected position
  52+ C09F 00 00 00...  XX15Save                    DS  8
  53+ C0A7 00 00 00...  XX15Save2                   DS  8
  54+ C0AF 00           VarBackface                 DB 0
  55+ C0B0              ; Heap (or array) information for lines and normals
  56+ C0B0              ; Coords are stored XY,XY,XY,XY
  57+ C0B0              ; Normals
  58+ C0B0              ; This needs re-oprganising now.
  59+ C0B0              ; Runtime Calculation Store
  60+ C0B0
  61+ C0B0              FaceArraySize               equ 30
  62+ C0B0              EdgeHeapSize                equ 40
  63+ C0B0              NodeArraySize               equ 40
  64+ C0B0              LineArraySize               equ 50
  65+ C0B0              ; Storage arrays for data
  66+ C0B0              ; Structure of arrays
  67+ C0B0              ; Visibility array  - 1 Byte per face/normal on ship model Bit 7 (or FF) visible, 0 Invisible
  68+ C0B0              ; Node array corresponds to a processed vertex from the ship model transformed into world coordinates and tracks the node list from model
  69+ C0B0              ; NodeArray         -  4 bytes per element      0           1            2          3
  70+ C0B0              ;                                               X Coord Lo  Y Coord Lo   Z CoordLo  Sign Bits 7 6 5 for X Y Z Signs (set = negative)
  71+ C0B0              ; Line Array        -  4 bytes per eleement     0           1            2          3
  72+ C0B0              ;                                               X1          Y1           X2         Y2
  73+ C0B0 00 00 00...  UbnkFaceVisArray            DS FaceArraySize            ; XX2 Up to 16 faces this may be normal list, each entry is controlled by bit 7, 1 visible, 0 hidden
  74+ C0CE 00 00 00...  UBnkNodeArray               DS NodeArraySize * 4        ; XX3 Holds the points as an array, its an array not a heap
  75+ C16E 00 00 00...  UBnkNodeArray2              DS NodeArraySize * 4        ; XX3 Holds the points as an array, its an array not a heap
  76+ C20E 00 00 00...  UbnkLineArray               DS LineArraySize * 4        ; XX19 Holds the clipped line details
  77+ C2D6              UBnkLinesHeapMax            EQU $ - UbnkLineArray
  78+ C2D6 00 00 00...  UbnkEdgeProcessedList DS EdgeHeapSize
  79+ C2FE              ; Array current Lengths
  80+ C2FE 00           UbnkFaceVisArrayLen         DS 1
  81+ C2FF 00           UBnkNodeArrayLen            DS 1
  82+ C300 00           UbnkLineArrayLen            DS 1                        ; total number of lines loaded to array
  83+ C301 00           UbnkLineArrayBytes          DS 1                        ; total number of bytes loaded to array  = array len * 4
  84+ C302              XX20                        equ UbnkLineArrayLen
  85+ C302              varXX20                     equ UbnkLineArrayLen
  86+ C302
  87+ C302 00           UbnkEdgeHeapSize            DS 1
  88+ C303 00           UbnkEdgeHeapBytes           DS 1
  89+ C304 00           UBnkLinesHeapLen            DS 1
  90+ C305 00           UbnKEdgeHeapCounter         DS 1
  91+ C306 00           UbnKEdgeRadius              DS 1
  92+ C307 00           UbnKEdgeShipType            DS 1
  93+ C308 00           UbnKEdgeExplosionType       DS 1
  94+ C309
  95+ C309              ; Node heap is used to write out transformed Vertexs
  96+ C309
  97+ C309              ; Lines
  98+ C309 00 00 00     UBnkXX19                    DS  3
  99+ C30C
 100+ C30C 00 00 00...  UBnkHullCopy                DS  ShipDataLength
 101+ C325              ScoopDebrisAddr             equ UBnkHullCopy + ScoopDebrisOffset
 102+ C325              MissileLockLoAddr           equ UBnkHullCopy + MissileLockLoOffset
 103+ C325              MissileLockHiAddr           equ UBnkHullCopy + MissileLockHiOffset
 104+ C325              EdgeAddyAddr                equ UBnkHullCopy + EdgeAddyOffset
 105+ C325              LineX4Addr                  equ UBnkHullCopy + LineX4Offset
 106+ C325              GunVertexAddr               equ UBnkHullCopy + GunVertexOffset
 107+ C325              ExplosionCtAddr             equ UBnkHullCopy + ExplosionCtOffset
 108+ C325              VertexCtX6Addr              equ UBnkHullCopy + VertexCtX6Offset
 109+ C325              EdgeCountAddr               equ UBnkHullCopy + EdgeCountOffset
 110+ C325              BountyLoAddr                equ UBnkHullCopy + BountyLoOffset
 111+ C325              BountyHiAddr                equ UBnkHullCopy + BountyHiOffset
 112+ C325              FaceCtX4Addr                equ UBnkHullCopy + FaceCtX4Offset
 113+ C325              DotAddr                     equ UBnkHullCopy + DotOffset
 114+ C325              EnergyAddr                  equ UBnkHullCopy + EnergyOffset
 115+ C325              SpeedAddr                   equ UBnkHullCopy + SpeedOffset
 116+ C325              FaceAddyAddr                equ UBnkHullCopy + FaceAddyOffset
 117+ C325              QAddr                       equ UBnkHullCopy + QOffset
 118+ C325              LaserAddr                   equ UBnkHullCopy + LaserOffset
 119+ C325              VerticesAddyAddr            equ UBnkHullCopy + VerticiesAddyOffset
 120+ C325              ShipTypeAddr                equ UBnkHullCopy + ShipTypeOffset
 121+ C325              ShipNewBitsAddr             equ UBnkHullCopy + ShipNewBitsOffset
 122+ C325              ShipAIFlagsAddr             equ UBnkHullCopy + ShipAIFlagsOffset
 123+ C325              ; Static Ship Data. This is copied in when creating the universe object
 124+ C325              XX0                         equ UBnkHullCopy        ; general hull index pointer TODO find biggest ship design
 125+ C325              ;UBnkHullVerticies           DS  40 * 6              ; Type 10 is 37 verts so 40 to be safe
 126+ C325              ;UBnkHullEdges               DS  50 * 4              ; Type 10 is 46 edges sp 200 to be safe
 127+ C325              ;UBnkHullNormals             DS  20 * 4              ; type 10 is 14 edges so 20 to be safe
 128+ C325
 129+ C325 00 00 00...  UBnkHullVerticies           DS  300                 ; can only be 255
 130+ C451 00 00 00...  UBnkHullEdges               DS  1200                ; can be 255 * 4
 131+ C901 00 00 00...  UBnkHullNormals             DS  300                 ; can only be 255
 132+ CA2D
 133+ CA2D
 134+ CA2D 0C           OrthagCountdown             DB  12
 135+ CA2E
 136+ CA2E              UBnkShipCopy                equ UBnkHullVerticies               ; Buffer for copy of ship data, for speed will copy to a local memory block, Cobra is around 400 bytes on creation of a new ship so should be plenty
 137+ CA2E              UBnk_Data_len               EQU $ - StartOfUniv
 138+ CA2E
 139+ CA2E              ZeroUnivPitchAndRoll:   MACRO
 140+ CA2E ~                                    xor     a
 141+ CA2E ~                                    ld      (UBnKRotXCounter),a
 142+ CA2E ~                                    ld      (UBnKRotZCounter),a
 143+ CA2E                                      ENDM
 144+ CA2E
 145+ CA2E              MaxUnivPitchAndRoll:    MACRO
 146+ CA2E ~                                    ld      a,127
 147+ CA2E ~                                    ld      (UBnKRotXCounter),a
 148+ CA2E ~                                    ld      (UBnKRotZCounter),a
 149+ CA2E                                      ENDM
 150+ CA2E
 151+ CA2E              RandomUnivPitchAndRoll: MACRO
 152+ CA2E ~                                    call    doRandom
 153+ CA2E ~                                    or      %01101111
 154+ CA2E ~                                    ld      (UBnKRotXCounter),a
 155+ CA2E ~                                    call    doRandom
 156+ CA2E ~                                    or      %01101111
 157+ CA2E ~                                    ld      (UBnKRotZCounter),a
 158+ CA2E                                      ENDM
 159+ CA2E
 160+ CA2E              RandomUnivSpeed:        MACRO
 161+ CA2E ~                                    call    doRandom
 162+ CA2E ~                                    and     31
 163+ CA2E ~                                    ld      (UBnKspeed),a
 164+ CA2E                                      ENDM
 165+ CA2E
 166+ CA2E              MaxUnivSpeed:           MACRO
 167+ CA2E ~                                    ld      a,31
 168+ CA2E ~                                    ld      (UBnKspeed),a
 169+ CA2E                                      ENDM
 170+ CA2E
 171+ CA2E              ZeroUnivAccelleration:  MACRO
 172+ CA2E ~                                    xor     a
 173+ CA2E ~                                    ld      (UBnKAccel),a
 174+ CA2E                                      ENDM
 175+ CA2E
 176+ CA2E 3A 23 C3     SetShipHostile:         ld      a,(ShipNewBitsAddr)
 177+ CA31 F6 04                                or      ShipIsHostile
 178+ CA33 32 23 C3                             ld      (ShipNewBitsAddr),a
 179+ CA36 C9                                   ret
 180+ CA37
 181+ CA37 3A 23 C3     ClearShipHostile:       ld      a,(ShipNewBitsAddr)
 182+ CA3A E6 FB                                and     ShipNotHostile
 183+ CA3C 32 23 C3                             ld      (ShipNewBitsAddr),a
 184+ CA3F C9                                   ret
 185+ CA40
 186+ CA40              AequN1xorN2:            MACRO  param1,param2
 187+ CA40 ~                                    ld      a,(param1)
 188+ CA40 ~                                    xor     param2
 189+ CA40                                      ENDM
 190+ CA40
 191+ CA40              N0equN1byN2div256:      MACRO param1,param2,param3
 192+ CA40 ~                                    ld      a,param3                        ;
 193+ CA40 ~                                    ld      e,a                         ; use e as var Q = value of XX15 [n] lo
 194+ CA40 ~                                    ld      a,param2                        ; A = XX16 element
 195+ CA40 ~                                    ld      d,a
 196+ CA40 ~                                    mul
 197+ CA40 ~                                    ld      a,d                         ; we get only the high byte which is like doing a /256 if we think of a as low
 198+ CA40 ~                                    ld      (param1),a                      ; Q         ; result variable = XX16[n] * XX15[n]/256
 199+ CA40                                      ENDM
 200+ CA40
 201+ CA40              ; --------------------------------------------------------------
 202+ CA40 21 00 C0     ResetUBnkData:          ld      hl,StartOfUniv
 203+ CA43 11 2E 0A                             ld      de,UBnk_Data_len
 204+ CA46 AF                                   xor     a
 205+ CA47 CD 28 95                             call    memfill_dma
 206+ CA4A C9                                   ret
 207+ CA4B              ; --------------------------------------------------------------
 208+ CA4B 21 0C C0     ResetUbnkPosition:      ld      hl,UBnKxlo
 209+ CA4E 06 09                                ld      b, 3*3
 210+ CA50 AF                                   xor     a
 211+ CA51 77           .zeroLoop:              ld      (hl),a
 212+ CA52 23                                   inc     hl
 213+ CA53 10 FC                                djnz    .zeroLoop
 214+ CA55 C9                                   ret
 215+ CA56
 216+ CA56              ; --------------------------------------------------------------
 217+ CA56              ; This sets the position of the current ship if its a player launched missile
 218+ CA56 CD 83 CC     UnivSetPlayerMissile:   call    InitialiseOrientation           ; Player  facing
 219+ CA59 CD 4B CA                             call    ResetUbnkPosition               ; home position
 220+ CA5C 3E 05                                ld      a,MissileDropHeight
 221+ CA5E 32 0F C0                             ld      (UBnKylo),a
 222+ CA61 3E 80                                ld      a,$80
 223+ CA63 32 11 C0                             ld      (UBnKysgn),a
 224+ CA66                                      MaxUnivSpeed
 224+ CA66 3E 1F       >                        ld      a,31
 224+ CA68 32 31 C0    >                        ld      (UBnKspeed),a
 225+ CA6B C9                                   ret
 226+ CA6C              ; --------------------------------------------------------------
 227+ CA6C              ; this applies blast damage to ship
 228+ CA6C 3A E6 99     ShipMissileBlast:       ld      a,(CurrentMissileBlastDamage)
 229+ CA6F 47                                   ld      b,a
 230+ CA70 3A 3A C0                             ld      a,(UbnKEnergy)                   ; Reduce Energy
 231+ CA73 90                                   sub     b
 232+ CA74 C3 7D CA                             jp      UnivExplodeShip
 233+ CA77 18 04                                jr      UnivExplodeShip
 234+ CA79 32 3A C0                             ld      (UbnKEnergy),a
 235+ CA7C C9                                   ret
 236+ CA7D              ; --------------------------------------------------------------
 237+ CA7D              ; This sets the ship as a shower of explosiondwd
 238+ CA7D 3A 37 C0     UnivExplodeShip:        ld      a,(UBnkaiatkecm)
 239+ CA80 F6 20                                or      ShipExploding
 240+ CA82 E6 7F                                and     Bit7Clear
 241+ CA84 32 37 C0                             ld      (UBnkaiatkecm),a
 242+ CA87 AF                                   xor     a
 243+ CA88 32 3A C0                             ld      (UbnKEnergy),a
 244+ CA8B                                      ;TODO
 245+ CA8B C9                                   ret
 246+ CA8C
 247+ CA8C              ; --------------------------------------------------------------
 248+ CA8C              ; This sets the position of the current ship randomly, called after spawing
 249+ CA8C CD 83 CC     UnivSetSpawnPosition:   call    InitialiseOrientation
 250+ CA8F                                      RandomUnivPitchAndRoll
 250+ CA8F CD D0 9D    >                        call    doRandom
 250+ CA92 F6 6F       >                        or      %01101111
 250+ CA94 32 33 C0    >                        ld      (UBnKRotXCounter),a
 250+ CA97 CD D0 9D    >                        call    doRandom
 250+ CA9A F6 6F       >                        or      %01101111
 250+ CA9C 32 34 C0    >                        ld      (UBnKRotZCounter),a
 251+ CA9F CD D0 9D                             call    doRandom                        ; set x lo and y lo to random
 252+ CAA2 32 0C C0     .setXlo:                ld      (UBnKxlo),a
 253+ CAA5 32 0F C0     .setYlo:                ld      (UBnKylo),a
 254+ CAA8 0F           .setXsign:              rrca                                    ; rotate by 1 bit right
 255+ CAA9 47                                   ld      b,a
 256+ CAAA E6 80                                and     SignOnly8Bit
 257+ CAAC 32 0E C0                             ld      (UBnKxsgn),a
 258+ CAAF 78           .setYSign:              ld      a,b                             ; get random back again
 259+ CAB0 0F                                   rrca                                    ; rotate by 1 bit right
 260+ CAB1 47                                   ld      b,a
 261+ CAB2 E6 80                                and     SignOnly8Bit                    ; and set y sign
 262+ CAB4 32 11 C0                             ld      (UBnKysgn),a
 263+ CAB7 CB 08        .setYHigh:              rrc     b                               ; as value is in b rotate again
 264+ CAB9 78                                   ld      a,b                             ;
 265+ CABA E6 1F                                and     31                              ; set y hi to random 0 to 31
 266+ CABC 32 10 C0                             ld      (UBnKyhi),a                     ;
 267+ CABF CB 08        .setXHigh:              rrc     b                               ; as value is in b rotate again
 268+ CAC1 78                                   ld      a,b
 269+ CAC2 E6 1F                                and     31                              ; set x hi to random 0 to 31
 270+ CAC4 4F                                   ld      c,a                             ; save shifted into c as well
 271+ CAC5 32 0D C0                             ld      (UBnKxhi),a
 272+ CAC8 3E 50        .setZHigh:              ld      a,80                            ; set z hi to 80 - xhi - yhi - carry
 273+ CACA 98                                   sbc     b
 274+ CACB 99                                   sbc     c
 275+ CACC 32 13 C0                             ld      (UBnKzhi),a
 276+ CACF              .CheckIfBodyOrJunk:     ReturnIfMemEquN ShipTypeAddr, ShipTypeJunk
 276+ CACF 3A 22 C3    >                        ld     a,(ShipTypeAddr)
 276+ CAD2 FE 03       >                        cp     ShipTypeJunk
 276+ CAD4 C0          >                        ret    nz
 277+ CAD5 78                                   ld      a,b                             ; its not junk to set z sign
 278+ CAD6 0F                                   rrca                                    ; as it can jump in
 279+ CAD7 E6 80                                and     SignOnly8Bit
 280+ CAD9 32 14 C0                             ld      (UBnKzsgn),a
 281+ CADC C9                                   ret
 282+ CADD
 283+ CADD              ; --------------------------------------------------------------
 284+ CADD              ; This sets current univrse object to space station
 285+ CADD 3E 81        ResetStationLaunch:     ld  a,%10000001
 286+ CADF 32 37 C0                             ld  (UBnkaiatkecm),a                    ; set hostinle, no AI, has ECM
 287+ CAE2 AF                                   xor a
 288+ CAE3 32 34 C0                             ld      (UBnKRotZCounter),a             ; no pitch
 289+ CAE6 32 23 C3                             ld      (ShipNewBitsAddr),a             ; initialise new bits logic
 290+ CAE9 3E FF                                ld      a,$FF
 291+ CAEB 32 33 C0                             ld      (UBnKRotXCounter),a             ; set roll to maxi on station
 292+ CAEE 21 00 00     .SetPosBehindUs:        ld      hl,$0000
 293+ CAF1 22 0C C0                             ld      (UBnKxlo),hl
 294+ CAF4 21 00 00                             ld      hl,$0000
 295+ CAF7 22 0F C0                             ld      (UBnKylo),hl
 296+ CAFA 21 B0 01                             ld      hl,$01B0                            ; so its a negative distance behind
 297+ CAFD 22 12 C0                             ld      (UBnKzlo),hl
 298+ CB00 AF                                   xor     a
 299+ CB01 32 0E C0                             ld      (UBnKxsgn),a
 300+ CB04 32 11 C0                             ld      (UBnKysgn),a
 301+ CB07 3E 80                                ld      a,$80
 302+ CB09 32 14 C0                             ld      (UBnKzsgn),a
 303+ CB0C CD A8 CC     .SetOrientation:        call    LaunchedOrientation             ; set initial facing
 304+ CB0F C9                                   ret
 305+ CB10                  ;Input: BC = Dividend, DE = Divisor, HL = 0
 306+ CB10              ;Output: BC = Quotient, HL = Remainder
 307+ CB10
 308+ CB10              ; Initialiase data, iyh must equal slot number
 309+ CB10              ;                   iyl must be ship type
 310+ CB10 32 2C C0     UnivInitRuntime:        ld      (UbnKShipBankNbr),a
 311+ CB13 01 10 00                             ld      bc,UBnKRuntimeSize
 312+ CB16 21 2B C0                             ld      hl,UBnKShipType
 313+ CB19                                      ZeroA
 313+ CB19 AF          >                        xor a
 314+ CB1A 77           .InitLoop:              ld      (hl),a
 315+ CB1B 23                                   inc     hl
 316+ CB1C 10 FC                                djnz    .InitLoop
 317+ CB1E FD 7C        .SetBankData:           ld      a,iyh
 318+ CB20 32 2C C0                             ld      (UbnKShipBankNbr),a
 319+ CB23 FD 7D                                ld      a,iyl
 320+ CB25 32 2B C0                             ld      (UBnKShipType),a
 321+ CB28 CD 0F E0                             call    GetShipBankId                ; this will mostly be debugging info
 322+ CB2B 32 2D C0                             ld      (UBnkShipModelBank),a        ; this will mostly be debugging info
 323+ CB2E 78                                   ld      a,b                          ; this will mostly be debugging info
 324+ CB2F 32 2E C0                             ld      (UBnkShipModelNbr),a         ; this will mostly be debugging info
 325+ CB32 C9                                   ret
 326+ CB33
 327+ CB33
 328+ CB33 7C           ADDHLDESignedv3:        ld      a,h
 329+ CB34 E6 80                                and     SignOnly8Bit
 330+ CB36 47                                   ld      b,a                         ;save sign bit in b
 331+ CB37 AA                                   xor     d                           ;if h sign and d sign were different then bit 7 of a will be 1 which means
 332+ CB38                                      JumpIfNegative ADDHLDEOppSGN        ;Signs are opposite there fore we can subtract to get difference
 332+ CB38 FA 50 CB    >                        jp		m, ADDHLDEOppSGN
 333+ CB3B 78           ADDHLDESameSigns:       ld      a,b
 334+ CB3C B2                                   or      d
 335+ CB3D                                      JumpIfNegative ADDHLDESameNeg       ; optimisation so we can just do simple add if both positive
 335+ CB3D FA 42 CB    >                        jp		m, ADDHLDESameNeg
 336+ CB40 19                                   add     hl,de
 337+ CB41 C9                                   ret
 338+ CB42 7C           ADDHLDESameNeg:         ld      a,h                         ; so if we enter here then signs are the same so we clear the 16th bit
 339+ CB43 E6 7F                                and     SignMask8Bit                ; we could check the value of b for optimisation
 340+ CB45 67                                   ld      h,a
 341+ CB46 7A                                   ld      a,d
 342+ CB47 E6 7F                                and     SignMask8Bit
 343+ CB49 57                                   ld      d,a
 344+ CB4A 19                                   add     hl,de
 345+ CB4B 3E 80                                ld      a,SignOnly8Bit
 346+ CB4D B4                                   or      h                           ; now set bit for negative value, we won't bother with overflow for now TODO
 347+ CB4E 67                                   ld      h,a
 348+ CB4F C9                                   ret
 349+ CB50 7C           ADDHLDEOppSGN:          ld      a,h                         ; so if we enter here then signs are the same so we clear the 16th bit                     ; here HL and DE are opposite
 350+ CB51 E6 7F                                and     SignMask8Bit                ; we could check the value of b for optimisation
 351+ CB53 67                                   ld      h,a
 352+ CB54 7A                                   ld      a,d
 353+ CB55 E6 7F                                and     SignMask8Bit
 354+ CB57 57                                   ld      d,a
 355+ CB58 B7                                   or      a
 356+ CB59 ED 52                                sbc     hl,de
 357+ CB5B 38 04                                jr      c,ADDHLDEOppInvert
 358+ CB5D 78           ADDHLDEOppSGNNoCarry:   ld      a,b                         ; we got here so hl > de therefore we can just take hl's previous sign bit
 359+ CB5E B4                                   or      h
 360+ CB5F 67                                   ld      h,a                         ; set the previou sign value
 361+ CB60 C9                                   ret
 362+ CB61              ADDHLDEOppInvert:       NegHL                                                   ; we need to flip the sign and 2'c the Hl result
 362+ CB61 AF          >                    xor a
 362+ CB62 95          >                    sub l
 362+ CB63 6F          >                    ld l,a
 362+ CB64 9F          >                    sbc a,a
 362+ CB65 94          >                    sub h
 362+ CB66 67          >                    ld h,a
 363+ CB67 78                                   ld      a,b
 364+ CB68 EE 80                                xor     SignOnly8Bit                ; flip sign bit
 365+ CB6A B4                                   or      h
 366+ CB6B 67                                   ld      h,a                         ; recover sign
 367+ CB6C C9                                   ret
 368+ CB6D
 369+ CB6D              ; we could cheat, flip the sign of DE and just add but its not very optimised
 370+ CB6D 7C           SUBHLDESignedv3:        ld      a,h
 371+ CB6E E6 80                                and     SignOnly8Bit
 372+ CB70 47                                   ld      b,a                         ;save sign bit in b
 373+ CB71 AA                                   xor     d                           ;if h sign and d sign were different then bit 7 of a will be 1 which means
 374+ CB72                                      JumpIfNegative SUBHLDEOppSGN        ;Signs are opposite therefore we can add
 374+ CB72 FA A0 CB    >                        jp		m, SUBHLDEOppSGN
 375+ CB75 78           SUBHLDESameSigns:       ld      a,b
 376+ CB76 B2                                   or      d
 377+ CB77                                      JumpIfNegative SUBHLDESameNeg       ; optimisation so we can just do simple add if both positive
 377+ CB77 FA 81 CB    >                        jp		m, SUBHLDESameNeg
 378+ CB7A B7                                   or      a
 379+ CB7B ED 52                                sbc     hl,de
 380+ CB7D                                      JumpIfNegative SUBHLDESameOvrFlw
 380+ CB7D FA 94 CB    >                        jp		m, SUBHLDESameOvrFlw
 381+ CB80 C9                                   ret
 382+ CB81 7C           SUBHLDESameNeg:         ld      a,h                         ; so if we enter here then signs are the same so we clear the 16th bit
 383+ CB82 E6 7F                                and     SignMask8Bit                ; we could check the value of b for optimisation
 384+ CB84 67                                   ld      h,a
 385+ CB85 7A                                   ld      a,d
 386+ CB86 E6 7F                                and     SignMask8Bit
 387+ CB88 57                                   ld      d,a
 388+ CB89 B7                                   or      a
 389+ CB8A ED 52                                sbc     hl,de
 390+ CB8C                                      JumpIfNegative SUBHLDESameOvrFlw
 390+ CB8C FA 94 CB    >                        jp		m, SUBHLDESameOvrFlw
 391+ CB8F 7C                                   ld      a,h                         ; now set bit for negative value, we won't bother with overflow for now TODO
 392+ CB90 F6 80                                or      SignOnly8Bit
 393+ CB92 67                                   ld      h,a
 394+ CB93 C9                                   ret
 395+ CB94              SUBHLDESameOvrFlw:      NegHL                                                        ; we need to flip the sign and 2'c the Hl result
 395+ CB94 AF          >                    xor a
 395+ CB95 95          >                    sub l
 395+ CB96 6F          >                    ld l,a
 395+ CB97 9F          >                    sbc a,a
 395+ CB98 94          >                    sub h
 395+ CB99 67          >                    ld h,a
 396+ CB9A 78                                   ld      a,b
 397+ CB9B EE 80                                xor     SignOnly8Bit                ; flip sign bit
 398+ CB9D B4                                   or      h
 399+ CB9E 67                                   ld      h,a                         ; recover sign
 400+ CB9F C9                                   ret
 401+ CBA0 B7           SUBHLDEOppSGN:          or      a                                               ; here HL and DE are opposite so we can add the values
 402+ CBA1 7C                                   ld      a,h                         ; so if we enter here then signs are the same so we clear the 16th bit
 403+ CBA2 E6 7F                                and     SignMask8Bit                ; we could check the value of b for optimisation
 404+ CBA4 67                                   ld      h,a
 405+ CBA5 7A                                   ld      a,d
 406+ CBA6 E6 7F                                and     SignMask8Bit
 407+ CBA8 57                                   ld      d,a
 408+ CBA9 19                                   add     hl,de
 409+ CBAA 78                                   ld      a,b                         ; we got here so hl > de therefore we can just take hl's previous sign bit
 410+ CBAB B4                                   or      h
 411+ CBAC 67                                   ld      h,a                         ; set the previou sign value
 412+ CBAD C9                                   ret
 413+ CBAE
 414+ CBAE
 415+ CBAE              SBCHLDESigned:          JumpOnBitSet h,7,SBCHLDEhlNeg
 415+ CBAE CB 7C       >                        bit 	7,h
 415+ CBB0 C2 C1 CB    >                        jp      nz,SBCHLDEhlNeg
 416+ CBB3              SBCHLDEhlPos:           JumpOnBitSet h,7,SBCHLDEhlNeg
 416+ CBB3 CB 7C       >                        bit 	7,h
 416+ CBB5 C2 C1 CB    >                        jp      nz,SBCHLDEhlNeg
 417+ CBB8 ED 52        SBCHLDEhlPosDePos:      sbc     hl,de                           ; ignore overflow for now will sort later TODO
 418+ CBBA C9                                   ret
 419+ CBBB CB BA        SBCHLDEhlPosDeNeg:      res     7,d
 420+ CBBD 19                                   add     hl,de                           ; ignore overflow for now will sort later TODO
 421+ CBBE CB FA                                set     7,d
 422+ CBC0 C9                                   ret
 423+ CBC1 CB BC        SBCHLDEhlNeg:           res     7,h
 424+ CBC3                                      JumpOnBitSet d,7,SBCHLDEhlNegdeNeg
 424+ CBC3 CB 7A       >                        bit 	7,d
 424+ CBC5 C2 CD CB    >                        jp      nz,SBCHLDEhlNegdeNeg
 425+ CBC8 ED 52        SBCHLDEhlNegdePos:      sbc     hl,de                       ; ignore overflow for now will sort later TODO
 426+ CBCA CB FC                                set     7,h
 427+ CBCC C9                                   ret
 428+ CBCD CB BA        SBCHLDEhlNegdeNeg:      res     7,d
 429+ CBCF 19                                   add     hl,de                   ; ignore overflow for now will sort later TODO
 430+ CBD0 CB FA                                set     7,d
 431+ CBD2 CB FC                                set     7,h
 432+ CBD4 C9                                   ret
 433+ CBD5
 434+ CBD5              ; Roate around axis
 435+ CBD5              ; varAxis1 and varAxis2 point to the address of the axis to rotate
 436+ CBD5              ; so the axis x1 points to roofv  x , y or z
 437+ CBD5              ;             x2           nosev or sidev  x, y or z
 438+ CBD5              ;   Axis1 = Axis1 * (1 - 1/512)  + Axis2 / 16
 439+ CBD5              ;   Axis2 = Axis2 * (1 - 1/512)  - Axis1 / 16
 440+ CBD5              ; var RAT2 gives direction
 441+ CBD5              ; for pitch x we come in with Axis1 = roofv_x and Axis2 = nosev_x
 442+ CBD5              ;-Set up S R -----------------------------------------
 443+ CBD5              ; optimised we don't deal with sign here just the value of roof axis / 512
 444+ CBD5 2A 0D 98     MVS5RotateAxis:         ld      hl,(varAxis1)   ; work on roofv axis to get (1- 1/152) * roofv axis
 445+ CBD8 5E                                   ld      e,(hl)
 446+ CBD9 23                                   inc     hl
 447+ CBDA 56                                   ld      d,(hl)          ; de = Axis1 (roofv x for pitch x)
 448+ CBDB EB                                   ex      de,hl           ; hl = Axis1 (roofv x for pitch x)
 449+ CBDC 7C                                   ld      a,h
 450+ CBDD E6 80                                and     SignOnly8Bit
 451+ CBDF FD 67                                ld      iyh,a           ; iyh = sign Axis1
 452+ CBE1 7C                                   ld      a,h
 453+ CBE2 E6 7F                                and     SignMask8Bit    ; a = Axis1 (roof hi axis  unsigned)
 454+ CBE4 CB 3F                                srl     a               ; a = Axis1/2
 455+ CBE6 5F                                   ld      e,a             ;
 456+ CBE7 FD 7C                                ld      a,iyh           ; A = Axis 1 sign
 457+ CBE9 57                                   ld      d,a             ; de = signed Axis1 / 512
 458+ CBEA B7                                   or      a               ; clear carry
 459+ CBEB CD 6D CB                             call    SUBHLDESignedv3 ; hl = roof axis - (roof axis /512) which in effect is roof * (1-1/512)
 460+ CBEE              ;-Push to stack roof axis - (roofaxis/152)  ----------------------------------------------------------------------------------
 461+ CBEE E5                                   push    hl              ; save hl on stack PUSH ID 1 (roof axis - roofv aixs /512)
 462+ CBEF 7D                                   ld      a,l
 463+ CBF0 32 28 99                             ld      (varR),a
 464+ CBF3 7C                                   ld      a,h
 465+ CBF4 32 29 99                             ld      (varS),a        ;  RS now equals (1- 1/152) * roofv axis or (roof axis - roofv aixs /512)
 466+ CBF7              ;-calculate roofv latter half of calc
 467+ CBF7 2A 0F 98                             ld      hl,(varAxis2)   ; now work on nosev axis to get nosev axis / 16
 468+ CBFA 5E                                   ld      e,(hl)
 469+ CBFB 23                                   inc     hl
 470+ CBFC 56                                   ld      d,(hl)          ; de = value of roof axis
 471+ CBFD 7A                                   ld      a,d
 472+ CBFE E6 80                                and     SignOnly8Bit
 473+ CC00 FD 67                                ld      iyh,a           ; save sign
 474+ CC02 7A                                   ld      a,d
 475+ CC03 E6 7F                                and     SignMask8Bit    ; a = nosev hi axis  unsigned
 476+ CC05 57                                   ld      d,a             ; de = abs (nosev)
 477+ CC06                                      ShiftDERight1
 477+ CC06 CB 3A       >			   srl d
 477+ CC08 CB 1B       >			   rr  e
 478+ CC0A                                      ShiftDERight1
 478+ CC0A CB 3A       >			   srl d
 478+ CC0C CB 1B       >			   rr  e
 479+ CC0E                                      ShiftDERight1
 479+ CC0E CB 3A       >			   srl d
 479+ CC10 CB 1B       >			   rr  e
 480+ CC12                                      ShiftDERight1           ; de = nosev /16 unsigned
 480+ CC12 CB 3A       >			   srl d
 480+ CC14 CB 1B       >			   rr  e
 481+ CC16 3A 3C C0                             ld      a,(univRAT2)     ; need to consider direction, so by defautl we use rat2, but flip via sign bit
 482+ CC19 FD AC                                xor     iyh             ; get the sign back we saveded from DE in so de = nosev axis / 16 signed
 483+ CC1B E6 80                                and     SignOnly8Bit
 484+ CC1D B2                                   or      d
 485+ CC1E 57                                   ld      d,a             ; de = nosev /16 signed and ready as if we were doing a + or - based on RAT2
 486+ CC1F              ;;; ld      a,e
 487+ CC1F              ;;;     or      iyh
 488+ CC1F              ;;; ld      (varP),a        ; PA now equals nosev axis / 16 signed
 489+ CC1F              ;-now AP = nosev /16  --------------------------------------------------------------------------------------------------------
 490+ CC1F E1                                   pop     hl              ; get back RS POP ID 1
 491+ CC20                  ;ex     de,hl           ; swapping around so hl = AP and de = SR , shoud not matter though as its an add
 492+ CC20              ;-now DE = (roofaxis/512) hl - abs(nosevaxis) --------------------------------------------------------------------------------
 493+ CC20 CD 33 CB                             call    ADDHLDESignedv3 ; do add using hl and de
 494+ CC23 E5                                   push    hl              ; we use stack to represent var K here now varK = Nosev axis /16 + (1 - 1/512) * roofv axis PUSH ID 2
 495+ CC24              ;-push to stack nosev axis + roofvaxis /512  which is what roofv axis will be ------------------------------------------------
 496+ CC24              ;-- Set up SR = 1 - 1/512 * nosev-----------------------
 497+ CC24 2A 0F 98                         ld      hl,(varAxis2)   ; work on nosev again to get nosev - novesv / 512
 498+ CC27 5E                               ld      e,(hl)
 499+ CC28 23                               inc     hl
 500+ CC29 56                               ld      d,(hl)
 501+ CC2A EB                               ex      de,hl
 502+ CC2B 7C                               ld      a,h
 503+ CC2C E6 80                            and     $80
 504+ CC2E FD 67                            ld      iyh,a
 505+ CC30 7C                               ld      a,h
 506+ CC31 E6 7F                            and     SignMask8Bit    ; a = roof hi axis  unsigned
 507+ CC33 CB 3F                            srl     a               ; now A = unsigned 15 bit nosev axis hi / 2 (or in effect nosev / 512
 508+ CC35 5F                               ld      e,a
 509+ CC36 FD 7C                            ld      a,iyh
 510+ CC38 57                               ld      d,a
 511+ CC39 B7                               or      a               ; clear carry
 512+ CC3A CD 6D CB                         call    SUBHLDESignedv3
 513+ CC3D              ;   sbc     hl,de           ; hl = nosev - novesv / 512
 514+ CC3D E5                               push    hl              ; save hl on stack  PUSH ID 3
 515+ CC3E 7D                               ld      a,l
 516+ CC3F 32 24 98                         ld      (varP),a        ; p = low of resuilt
 517+ CC42 7C                               ld      a,h
 518+ CC43 E6 7F                            and     SignMask8Bit    ; a = roof hi axis  unsigned
 519+ CC45 32 43 99                         ld      (varT),a        ; t = high of result
 520+ CC48              ;-- Set up TQ
 521+ CC48 2A 0D 98                         ld      hl,(varAxis1)   ; now work on roofv axis / 16
 522+ CC4B              ;   ld      hl,(varAxis2)   ; work on nosev again
 523+ CC4B 5E                               ld      e,(hl)
 524+ CC4C 23                               inc     hl
 525+ CC4D 56                               ld      d,(hl)
 526+ CC4E 7A                               ld      a,d
 527+ CC4F E6 80                            and     $80
 528+ CC51 FD 67                            ld      iyh,a           ; save sign
 529+ CC53 7A                               ld      a,d
 530+ CC54 E6 7F                            and     SignMask8Bit    ; a = nosev hi axis  unsigned
 531+ CC56 57                               ld      d,a             ; de = abs (nosev)
 532+ CC57                                  ShiftDERight1
 532+ CC57 CB 3A       >			   srl d
 532+ CC59 CB 1B       >			   rr  e
 533+ CC5B                                  ShiftDERight1
 533+ CC5B CB 3A       >			   srl d
 533+ CC5D CB 1B       >			   rr  e
 534+ CC5F                                  ShiftDERight1
 534+ CC5F CB 3A       >			   srl d
 534+ CC61 CB 1B       >			   rr  e
 535+ CC63                                  ShiftDERight1           ; de = nosev /16 unsigned
 535+ CC63 CB 3A       >			   srl d
 535+ CC65 CB 1B       >			   rr  e
 536+ CC67 3A 3C C0                         ld      a,(univRAT2)
 537+ CC6A FD AC                            xor     iyh             ; get the sign back in so de = nosev axis / 16 signed
 538+ CC6C E6 80                            and     $80
 539+ CC6E B2                               or      d
 540+ CC6F 57                               ld      d,a
 541+ CC70              ;;; ld      a,e
 542+ CC70              ;;;     or      iyh
 543+ CC70              ;;; ld      (varP),a        ; PA now equals nosev axis / 16 signed
 544+ CC70 E1                               pop     hl              ; get back RS   POP ID 3
 545+ CC71              ;   ex      de,hl           ; swapping around so hl = AP and de = SR , shoud not matter though as its an add
 546+ CC71 CD 6D CB                         call    SUBHLDESignedv3 ; do add using hl and de
 547+ CC74              ;-- Update nosev ---------------------------------------
 548+ CC74 EB                               ex      de,hl           ; save hl to de
 549+ CC75 2A 0F 98                         ld      hl,(varAxis2)
 550+ CC78 73                               ld      (hl),e
 551+ CC79 23                               inc     hl
 552+ CC7A 72                               ld      (hl),d          ; copy result into nosev
 553+ CC7B              ;-- Update roofv ---------------------------------------
 554+ CC7B D1                               pop     de              ; get calc saved on stack POP ID 2
 555+ CC7C 2A 0D 98                         ld      hl,(varAxis1)
 556+ CC7F 73                               ld      (hl),e
 557+ CC80 23                               inc     hl
 558+ CC81 72                               ld      (hl),d          ; copy result into nosev
 559+ CC82 C9                               ret
 560+ CC83
 561+ CC83                                  include "Universe/Ships/InitialiseOrientation.asm"
# file opened: ./Universe/Ships/InitialiseOrientation.asm
   1++CC83              InitialiseOrientation:
   2++CC83              ZI1:
   3++CC83              ;  sidev = (1,  0,  0)  sidev = (&6000, 0, 0)
   4++CC83              ;  roofv = (0,  1,  0)  roofv = (0, &6000, 0)
   5++CC83              ;  nosev = (0,  0, -1)  nosev = (0, 0, &E000)   E000 = SignBit[96]
   6++CC83 21 00 00         ld      hl, 0
   7++CC86 22 17 C0         ld      (UBnkrotmatSidevY),hl                ; set the zeroes
   8++CC89 22 19 C0         ld      (UBnkrotmatSidevZ),hl                ; set the zeroes
   9++CC8C 22 1B C0         ld      (UBnkrotmatRoofvX),hl                ; set the zeroes
  10++CC8F 22 1F C0         ld      (UBnkrotmatRoofvZ),hl                ; set the zeroes
  11++CC92 22 21 C0         ld      (UBnkrotmatNosevX),hl                ; set the zeroes
  12++CC95 22 23 C0         ld      (UBnkrotmatNosevY),hl                ; set the zeroes
  13++CC98 21 00 60         ld      hl, $6000					; 96 in hi byte
  14++CC9B                  ;ld      hl,1
  15++CC9B 22 15 C0         ld      (UBnkrotmatSidevX),hl
  16++CC9E 22 1D C0         ld      (UBnkrotmatRoofvY),hl
  17++CCA1 21 00 E0         ld      hl, $E000					; -96 in hi byte which is +96 with hl bit 7 set
  18++CCA4 22 25 C0         ld      (UBnkrotmatNosevZ),hl
  19++CCA7 C9               ret
  20++CCA8
  21++CCA8              ;  sidev = (1,  0,  0)  sidev = (&6000, 0, 0)
  22++CCA8              ;  roofv = (0,  1,  0)  roofv = (0, &6000, 0)
  23++CCA8              ;  nosev = (-0,  -0, 1) nosev = (0, 0, &6000)
  24++CCA8
  25++CCA8              LaunchedOrientation:
  26++CCA8 CD 83 CC         call    InitialiseOrientation
  27++CCAB                  FlipMemSign UBnkrotmatNosevX+1;  as its 0 flipping will make no difference
  27++CCAB 3A 22 C0    >                        ld  a,(UBnkrotmatNosevX+1)
  27++CCAE EE 80       >                        xor SignOnly8Bit
  27++CCB0 32 22 C0    >                        ld  (UBnkrotmatNosevX+1),a
  28++CCB3                  FlipMemSign UBnkrotmatNosevY+1;  as its 0 flipping will make no difference
  28++CCB3 3A 24 C0    >                        ld  a,(UBnkrotmatNosevY+1)
  28++CCB6 EE 80       >                        xor SignOnly8Bit
  28++CCB8 32 24 C0    >                        ld  (UBnkrotmatNosevY+1),a
  29++CCBB                  FlipMemSign UBnkrotmatNosevZ+1
  29++CCBB 3A 26 C0    >                        ld  a,(UBnkrotmatNosevZ+1)
  29++CCBE EE 80       >                        xor SignOnly8Bit
  29++CCC0 32 26 C0    >                        ld  (UBnkrotmatNosevZ+1),a
  30++CCC3 C9               ret
  31++CCC4
# file closed: ./Universe/Ships/InitialiseOrientation.asm
 562+ CCC4
 563+ CCC4              ;----------------------------------------------------------------------------------------------------------------------------------
 564+ CCC4              OrientateVertex:
 565+ CCC4
 566+ CCC4              ;                      [ sidev_x sidev_y sidev_z ]   [ x ]
 567+ CCC4              ;  projected [x y z] = [ roofv_x roofv_y roofv_z ] . [ y ]
 568+ CCC4              ;                      [ nosev_x nosev_y nosev_z ]   [ z ]
 569+ CCC4              ;
 570+ CCC4
 571+ CCC4              ;----------------------------------------------------------------------------------------------------------------------------------
 572+ CCC4              TransposeVertex:
 573+ CCC4              ;                      [ sidev_x roofv_x nosev_x ]   [ x ]
 574+ CCC4              ;  projected [x y z] = [ sidev_y roofv_y nosev_y ] . [ y ]
 575+ CCC4              ;                      [ sidev_z roofv_z nosev_z ]   [ z ]
 576+ CCC4              VectorToVertex:
 577+ CCC4              ;                     [ sidev_x roofv_x nosev_x ]   [ x ]   [ x ]
 578+ CCC4              ;  vector to vertex = [ sidev_y roofv_y nosev_y ] . [ y ] + [ y ]
 579+ CCC4              ;                     [ sidev_z roofv_z nosev_z ]   [ z ]   [ z ]
 580+ CCC4
 581+ CCC4              Project:
 582+ CCC4 2A 0C C0     PROJ:                   ld      hl,(UBnKxlo)                    ; Project K+INWK(x,y)/z to K3,K4 for center to screen
 583+ CCC7 22 24 98                             ld      (varP),hl
 584+ CCCA 3A 0E C0                             ld      a,(UBnKxsgn)
 585+ CCCD CD FF A8                             call    PLS6                            ; returns result in K (0 1) (unsigned) and K (3) = sign note to no longer does 2's C
 586+ CCD0 D8                                   ret     c                               ; carry means don't print
 587+ CCD1 2A 3A 99                             ld      hl,(varK)                       ; hl = k (0 1)
 588+ CCD4                                      ; Now the question is as hl is the fractional part, should this be multiplied by 127 to get the actual range
 589+ CCD4 3E 80                                ld      a,ViewCenterX
 590+ CCD6 ED 31                                add     hl,a                            ; add unsigned a to the 2's C HL to get pixel position
 591+ CCD8 22 4D 99                             ld      (varK3),hl                      ; K3 = X position on screen
 592+ CCDB 2A 0F C0     ProjectY:               ld      hl,(UBnKylo)
 593+ CCDE 22 24 98                             ld      (varP),hl
 594+ CCE1 3A 11 C0                             ld      a,(UBnKysgn)
 595+ CCE4 CD FF A8                             call    PLS6
 596+ CCE7 D8                                   ret     c
 597+ CCE8 2A 3A 99                             ld      hl,(varK)                       ; hl = k (0 1)
 598+ CCEB 3E 40                                ld      a,ViewCenterY
 599+ CCED ED 31                                add     hl,a                            ; add unsigned a to the 2's C HL to get pixel position
 600+ CCEF 22 53 99                             ld      (varK4),hl                      ; K3 = X position on screen
 601+ CCF2 C9                                   ret
 602+ CCF3              ;--------------------------------------------------------------------------------------------------------
 603+ CCF3                                      include "./ModelRender/EraseOldLines-EE51.asm"
# file opened: ././ModelRender/EraseOldLines-EE51.asm
   1++CCF3              ;
   2++CCF3              ; EraseOldLines:
   3++CCF3              ;	Loop from 0 to UbnKEdgeHeapCounter (note this should be 4 * actual nbr of lines)
   4++CCF3              ;		draw line (black) UBnkLinesArray[0,1]+Loop to [2,3]+loop
   5++CCF3              ;	 	loop + 4
   6++CCF3              ; Return
   7++CCF3
   8++CCF3              EraseOldLines:
   9++CCF3              EE51:										; if bit3 set draw lines in XX19 heap
  10++CCF3              	ReturnOnMemBitClear UBnKexplDsp,3       ; bit 3 denotes that there is nothing to erase as its already done
  10++CCF3 3A 35 C0    >                        ld     a,(UBnKexplDsp)
  10++CCF6 CB 5F       >                        bit 	3,a
  10++CCF8 C8          >                        ret		z
  11++CCF9 CB DF        	set		3,a
  12++CCFB 32 35 C0     	ld		(UBnKexplDsp),a  				; else toggle bit3 to allow lines (set will do as its 0 by now)
  13++CCFE C3 D0 E8     	jp		clearLines						; LL115	clear LINEstr. Draw lines in XX19 heap.  - note its an & not direct
  14++CD01              ; We use the ret from the clearLines so not needed here
  15++CD01
# file closed: ././ModelRender/EraseOldLines-EE51.asm
 604+ CD01                                      include "./ModelRender/TrimToScreenGrad-LL118.asm"
# file opened: ././ModelRender/TrimToScreenGrad-LL118.asm
   1++CD01              ;TrimToScreenGrad:
   2++CD01              ;LL118:										; Trim XX15,XX15+2 to screen grad=XX12+2 for CLIP
   3++CD01              ;ret
   4++CD01              ;TODO        ld      hl,(UBnKx1Lo)               ; XX15+0,1 \ x1 hi
   5++CD01              ;TODO        bit     7,a
   6++CD01              ;TODO        jr      nz,LL119		            ; x1 hi+ve skip down
   7++CD01              ;TODO        ld      a,h
   8++CD01              ;TODO        ld      (varS),a                    ; S	 \ else x1 hi -ve
   9++CD01              ;TODO        call    XYeqyx1loSmulMdiv256                       ; LL120	 \ X1<0  their comment \ X.Y = x1_lo.S *  M/2566
  10++CD01              ;TODO        ld      bc,(UbnKy1Lo)               ; step Y1 lo
  11++CD01
  12++CD01              ;18                      CLC
  13++CD01              ;65 36                   ADC &36		\ XX15+2 \ Y1 lo
  14++CD01              ;85 36                   STA &36			 \ XX15+2
  15++CD01              ;98                      TYA 			 \ step Y1 hi
  16++CD01              ;65 37                   ADC &37		\ XX15+3 \ Y1 hi
  17++CD01              ;85 37                   STA &37			 \ XX15+3
  18++CD01              ;A9 00                   LDA #0			 \ xleft min
  19++CD01              ;85 34                   STA &34		\ XX15+0 \ X1 lo
  20++CD01              ;85 35                   STA &35		\ XX15+1 \ X1 = 0
  21++CD01              ;AA                      TAX 			 \ Xreg = 0, will skip to Ytrim
  22++CD01              ;	.LL119	\ x1 hi +ve from LL118
  23++CD01              ;F0 19                   BEQ LL134		 \ if x1 hi = 0 skip to Ytrim
  24++CD01              ;85 83                   STA &83		\ S	 \ else x1 hi > 0
  25++CD01              ;C6 83                   DEC &83		\ S	 \ x1 hi-1
  26++CD01              ;20 19 50                JSR &5019	\ LL120  \ X1>255 their comment \ X.Y = x1lo.S *  M/256
  27++CD01              ;8A                      TXA 			 \ step Y1 lo
  28++CD01              ;18                      CLC
  29++CD01              ;65 36                   ADC &36		\ XX15+2 \ Y1 lo
  30++CD01              ;85 36                   STA &36			 \ XX15+2
  31++CD01              ;98                      TYA 			 \ step Y1 hi
  32++CD01              ;65 37                   ADC &37		\ XX15+3 \ Y1 hi
  33++CD01              ;85 37                   STA &37			 \ XX15+3
  34++CD01              ;A2 FF                   LDX #&FF		 \ xright max
  35++CD01              ;86 34                   STX &34		\ XX15+0 \ X1 lo
  36++CD01              ;E8                      INX 			 \ X = 0
  37++CD01              ;86 35                   STX &35		\ XX15+1 \ X1 = 255
  38++CD01              ;	.LL134	\ Ytrim
  39++CD01              ;A5 37                   LDA &37		\ XX15+3 \ y1 hi
  40++CD01              ;10 1A                   BPL LL135		 \ y1 hi +ve
  41++CD01              ;85 83                   STA &83		\ S	 \ else y1 hi -ve
  42++CD01              ;A5 36                   LDA &36		\ XX15+2 \ y1 lo
  43++CD01              ;85 82                   STA &82		\ R	 \ Y1<0 their comment
  44++CD01              ;20 48 50                JSR &5048	\ LL123	 \ X.Y=R.S*256/M (M=grad.)   \where 256/M is gradient
  45++CD01              ;8A                      TXA 			 \ step X1 lo
  46++CD01              ;18                      CLC
  47++CD01              ;65 34                   ADC &34		\ XX15+0 \ X1 lo
  48++CD01              ;85 34                   STA &34			 \ XX15+0
  49++CD01              ;98                      TYA 			 \ step X1 hi
  50++CD01              ;65 35                   ADC &35		\ XX15+1 \ X1 hi
  51++CD01              ;85 35                   STA &35			 \ XX15+1
  52++CD01              ;A9 00                   LDA #0			 \ Y bottom min
  53++CD01              ;85 36                   STA &36		\ XX15+2 \ Y1 lo
  54++CD01              ;85 37                   STA &37		\ XX15+3 \ Y1 = 0
  55++CD01              ;	.LL135	\ y1 hi +ve from LL134
  56++CD01              ;A5 36                   LDA &36		\ XX15+2 \ Y1 lo
  57++CD01              ;38                      SEC
  58++CD01              ;E9 C0                   SBC #&C0		 \ #Y*2  screen y height
  59++CD01              ;85 82                   STA &82		\ R	 \ Y1>191 their comment
  60++CD01              ;A5 37                   LDA &37		\ XX15+3 \ Y1 hi
  61++CD01              ;E9 00                   SBC #0			 \ any hi
  62++CD01              ;85 83                   STA &83			 \ S
  63++CD01              ;90 16                   BCC LL136		 \ failed, rts
  64++CD01              ;	.LL139
  65++CD01              ;20 48 50                JSR &5048	\ LL123	 \ X.Y=R.S*256/M (M=grad.)   \where 256/M is gradient
  66++CD01              ;8A                      TXA 			 \ step X1 lo
  67++CD01              ;18                      CLC
  68++CD01              ;65 34                   ADC &34		\ XX15+0 \ X1 lo
  69++CD01              ;85 34                   STA &34			 \ XX15+0
  70++CD01              ;98                      TYA 			 \ step X1 hi
  71++CD01              ;65 35                   ADC &35		\ XX15+1 \ X1 hi
  72++CD01              ;85 35                   STA &35			 \ XX15+1
  73++CD01              ;A9 BF                   LDA #&BF		 \ #Y*2-1 = y top max
  74++CD01              ;85 36                   STA &36		\ XX15+2 \ Y1 lo
  75++CD01              ;A9 00                   LDA #0			 \ Y1 hi = 0
  76++CD01              ;85 37                   STA &37		\ XX15+3 \ Y1 = 191
  77++CD01              ;	.LL136	\ rts
  78++CD01              ;60                      RTS 		 	 \ -- trim for CLIP done
  79++CD01              ;
  80++CD01
# file closed: ././ModelRender/TrimToScreenGrad-LL118.asm
 605+ CD01                                      include "./ModelRender/CLIP-LL145.asm"
# file opened: ././ModelRender/CLIP-LL145.asm
   1++CD01              ;--------------------------------------------------------------------------------------------------------------------
   2++CD01
   3++CD01 00           clipDx                  DB      0           ; also XX12+2
   4++CD02 00           clipDxHigh              DB      0           ; also XX12+3
   5++CD03 00           clipDxHighNonABS        DB      0           ; also XX12+3
   6++CD04 00           clipDy                  DB      0           ; also XX12+4
   7++CD05 00           clipDyHigh              DB      0           ; also XX12+5
   8++CD06 00           clipGradient            DB      0
   9++CD07 00           clipDxySign             DB      0
  10++CD08              varX12p3                equ     clipDxySign
  11++CD08 00           clipXGTY                DB      0
  12++CD09 00           clipFlags               DB      0
  13++CD0A 00           SWAP                    DB      0
  14++CD0B 00 00        varYX                   DW      0
  15++CD0D              ;varRegX                 DB      0
  16++CD0D              ;varXX12p2               DB      0
  17++CD0D 00           clipXX13                 DB      0
  18++CD0E
  19++CD0E
  20++CD0E              ; bounds check and the start to avoid dxy calcs if off screen, eliminating off screens first saves a lot of uncessary mul/div
  21++CD0E              ;ClipXX15XX12Line:
  22++CD0E ED 4B 85 C0  ClipLine:               ld      bc,(UbnkPreClipY1)          ; bc - XX15(2,3)
  23++CD12 DD 2A 89 C0                          ld      ix,(UbnkPreClipY2)          ; ix - XX12(0,1)
  24++CD16 2A 83 C0                             ld      hl,(UbnkPreClipX1)          ; hl - XX15(0,1)
  25++CD19 ED 5B 87 C0                          ld      de,(UbnkPreClipX2)          ; de - XX15(4,5)
  26++CD1D AF                                   xor     a
  27++CD1E 32 0A CD                             ld      (SWAP),a                    ; SWAP = 0
  28++CD21 7A                                   ld      a,d                         ; A = X2Hi
  29++CD22 FD 26 BF     .LL147:                 ld      iyh,$BF                     ; we need to be 191 as its 128 + another bit set from 0 to 6, we are using iyh as regX
  30++CD25                                      ;       push    af
  31++CD25                                      ;       ld      a,iyh
  32++CD25                                      ;       ld      (regX),a
  33++CD25                                      ;       pop     af
  34++CD25 DD B4                                or      ixh                         ; if (X2Hi L-OR Y2 Hi <> 0) goto LL107             -- X2Y2 off screen
  35++CD27 20 0A                                jr      nz, .LL107
  36++CD29 DD 7D                                ld      a,ixl
  37++CD2B ED 27 80                             test    $80                         ; if screen hight < y2 lo, i.e y2 lo >127 goto LL107,
  38++CD2E 20 03                                jr      nz,.LL107
  39++CD30 FD 26 00                             ld      iyh, 0                      ; else iyh = regX = 0                                                                        -- X2Y2 on screen
  40++CD33                                      ;        push    af
  41++CD33                                      ;        ld      a,iyh
  42++CD33                                      ;        ld      (regX),a
  43++CD33                                      ;        pop     af
  44++CD33              ; XX13 = regX (i.e. iyh)      ( if XX13 = XX13 is 191 if (x2, y2) is off-screen else 0) we bin XX13 as not needed
  45++CD33              ; so XX13 = 0 if x2_hi = y2_hi = 0, y2_lo is on-screen,  XX13 = 191 if x2_hi or y2_hi are non-zero or y2_lo is off the bottom of the screen
  46++CD33 FD 7C        .LL107                  ld      a,iyh
  47++CD35 32 0D CD                             ld      (clipXX13),a                ; debug copy iyh to xx13
  48++CD38 7C                                   ld      a,h                         ; If (X1 hi L-OR Y1) hi  goto LL83                   -- X1Y1 off screen and maybe X2Y2
  49++CD39 B0                                   or      b                           ;
  50++CD3A 20 27                                jr      nz,.LL83                    ;
  51++CD3C 79                                   ld      a,c                         ; or (y1 lo > bottom of screen)
  52++CD3D ED 27 80                             test    $80                         ; i.e  screen height < y1)
  53++CD40 20 21                                jr      nz,.LL83
  54++CD42              ; If we get here, (x1, y1) is on-screen
  55++CD42 FD 7C                                ld      a,iyh                       ; iyh = xx13 at this point if  XX13 <> 0 goto LL108                                                        -- X1Y1 on screen, if we flagged X2Y2 off screen goto LL108
  56++CD44 FE 00                                cp      0
  57++CD46 20 15                                jr      nz, .LL108
  58++CD48              ; Finished clipping exit point ----------------------------------------------------------------------------------------
  59++CD48 79           .ClipDone:              ld      a,c                         ; LL146 (Clip Done)               Y1 = y1 lo, x2 = x2 lo, x1 = x1 lo y1 = y1 lo                                   -- Nothing off screen
  60++CD49 32 84 C0                             ld      (UBnkNewY1),a
  61++CD4C DD 7D                                ld      a,ixl
  62++CD4E 32 86 C0                             ld      (UBnkNewY2),a
  63++CD51 7D                                   ld      a,l
  64++CD52 32 83 C0                             ld      (UBnkNewX1),a
  65++CD55 7B                                   ld      a,e
  66++CD56 32 85 C0                             ld      (UBnkNewX2),a
  67++CD59                                      ClearCarryFlag                      ; carry is clear so valid to plot is in XX15(0to3)
  67++CD59 B7          >                        or a
  68++CD5A C9                                   ret                                 ; 2nd pro different, it swops based on swop flag around here.
  69++CD5B              ; Finished out of bounds exit point -----------------------------------------------------------------------------------
  70++CD5B 37           .PointsOutofBounds:     scf                                 ; LL109 (ClipFailed) carry flag set as not visible
  71++CD5C C9                                   ret
  72++CD5D FD 7C        .LL108:                 ld      a,iyh
  73++CD5F B7                                   or      a
  74++CD60 1F                                   rra
  75++CD61 FD 67                                ld      iyh,a                       ; (X2Y2 Off Screen)         XX13 = 95 (i.e. divide it by 2)                                                 -- X1Y1 on screen X2Y2 off screen
  76++CD63                                      ;        push    af                  ;OPTIMISATION 6/11/21 commented out
  77++CD63                                      ;        ld      a,iyh               ;OPTIMISATION 6/11/21 commented out
  78++CD63                                      ;        ld      (regX),a            ;OPTIMISATION 6/11/21 commented out
  79++CD63                                      ;        pop     af                  ;OPTIMISATION 6/11/21 commented out
  80++CD63 FD 7C        .LL83:                  ld      a,iyh                       ; (Line On screen Test)      if XX13 < 128 then only 1 point is on screen so goto LL115                      -- We only need to deal with X2Y2
  81++CD65 ED 27 80                             test    $80                         ;
  82++CD68 28 28                                jr      z, .LL115                   ;
  83++CD6A 7C                                   ld      a,h                         ; If both x1_hi and x2_hi have bit 7 set, jump to LL109  to return from the subroutine with the C flag set, as the entire line is above the top of the screen
  84++CD6B A2                                   and     d
  85++CD6C                                      JumpIfNegative  .PointsOutofBounds
  85++CD6C FA 5B CD    >                        jp		m, .PointsOutofBounds
  86++CD6F 78                                   ld      a,b                         ; If both y1_hi and y2_hi have bit 7 set, jump to LL109  to return from the subroutine with the C flag set, as the entire line is above the top of the screen
  87++CD70 DD A4                                and     ixh
  88++CD72                                      JumpIfNegative  .PointsOutofBounds
  88++CD72 FA 5B CD    >                        jp		m, .PointsOutofBounds
  89++CD75 7C                                   ld      a,h                         ; If neither (x1_hi - 1) or (x2_hi - 1) have bit 7 set, jump to LL109 to return from the subroutine with the C  flag set, as the line doesn't fit on-screen
  90++CD76 3D                                   dec     a
  91++CD77 FD 6F                                ld      iyl,a                       ; using iyl as XX12+2 var
  92++CD79                                      ;        push    af                 ;OPTIMISATION 6/11/21 commented out
  93++CD79                                      ;        ld      a,iyl              ;OPTIMISATION 6/11/21 commented out
  94++CD79                                      ;        ld      (varXX12p2),a      ;OPTIMISATION 6/11/21 commented out
  95++CD79                                      ;        pop     af                 ;OPTIMISATION 6/11/21 commented out
  96++CD79 7A                                   ld      a,d                         ; a = x2 hi
  97++CD7A 3D                                   dec     a
  98++CD7B FD B5                                or      iyl                         ; (x2 hi -1 ) or (x1 hi -1)
  99++CD7D                                      JumpIfPositive .PointsOutofBounds   ; if both x1 and x2hi were > 0 then subtracting 1 would result in 0..254 so either being negative means it was 0 before
  99++CD7D F2 5B CD    >                        jp		p, .PointsOutofBounds
 100++CD80              ;by here we have eliminated -ve Y1 bounds so can just test for positive high and bit 7 of lo
 101++CD80 DD 7C                                ld      a,ixh
 102++CD82 3D                                   dec     a
 103++CD83 FD 6F                                ld      iyl,a
 104++CD85 78                                   ld      a,b
 105++CD86 3D                                   dec     a
 106++CD87 FD B5                                or      iyl
 107++CD89                                      JumpIfPositive .PointsOutofBounds   ; if both x1 and x2hi were > 0 then subtracting 1 would result in 0..254 so either being negative means it was 0 before
 107++CD89 F2 5B CD    >                        jp		p, .PointsOutofBounds
 108++CD8C 79                                   ld      a,c
 109++CD8D DD A5                                and     ixl
 110++CD8F                                      JumpIfNegative .PointsOutofBounds   ; really if both are > 127
 110++CD8F FA 5B CD    >                        jp		m, .PointsOutofBounds
 111++CD92              ; Clip line: calulate the line's gradient
 112++CD92              ; here as an optimisation we make sure X1 is always < X2  later on
 113++CD92              .LL115:                 ClearCarryFlag
 113++CD92 B7          >                        or a
 114++CD93 E5 D5        .CalcDX:                push    hl,,de
 115++CD95 EB                                   ex      hl,de                       ; so hl is x2 and de = x1
 116++CD96 ED 52                                sbc     hl,de
 117++CD98                                     ; pop     de                          ; we need de back
 118++CD98 22 01 CD                             ld      (clipDx),hl
 119++CD9B 7C                                   ld      a,h
 120++CD9C 32 03 CD                             ld      (clipDxHighNonABS),a
 121++CD9F                                     ; ld      a,e                         ;a = x2 lo
 122++CD9F                                     ; sbc     a,l                         ;a= a - x1
 123++CD9F                                     ; ld      (clipDx),a
 124++CD9F                                     ; ld      a,d
 125++CD9F                                     ; sbc     a,h
 126++CD9F                                     ; ld      (clipDxHigh),a                ; later we will just move to sub hl,de
 127++CD9F                                     ; ld      (clipDxHighNonABS),a          ; it looks liek we need this later post scale loop
 128++CD9F              .CalcDy:                ClearCarryFlag
 128++CD9F B7          >                        or a
 129++CDA0 DD E5 E1                             ld      hl,ix
 130++CDA3 ED 42                                sbc     hl,bc
 131++CDA5 54 5D                                ld      de,hl           ;;OPTIMISATION 6/11/21
 132++CDA7 22 04 CD                             ld      (clipDy),hl     ;OPTIMISATION 6/11/21 commented out
 133++CDAA 7C           .CalcQuadrant:          ld      a,h
 134++CDAB                                     ; ld      a,ixl
 135++CDAB                                     ; sbc     c
 136++CDAB                                     ; ld      (clipDy),a
 137++CDAB                                     ; ld      a,ixh
 138++CDAB                                     ; sbc     a,b
 139++CDAB                                     ; ld      (clipDyHigh),a              ; so A = sign of deltay in effect
 140++CDAB                                     ; pop     hl
 141++CDAB
 142++CDAB              ;So we now have delta_x in XX12(3 2), delta_y in XX12(5 4)  where the delta is (x1, y1) - (x2, y2))
 143++CDAB                                    ;  push    hl                          ; Set S = the sign of delta_x * the sign of delta_y, so if bit 7 of S is set, the deltas have different signs
 144++CDAB 21 02 CD                             ld      hl,clipDxHigh
 145++CDAE AE                                   xor     (hl)                        ; now a = sign dx xor sign dy
 146++CDAF 32 29 99                             ld      (varS),a                    ; DEBGU putting it in var S too for now
 147++CDB2 32 07 CD                             ld      (clipDxySign),a
 148++CDB5 3A 05 CD     .AbsDy:                 ld      a,(clipDyHigh)
 149++CDB8 ED 27 80                             test    $80
 150++CDBB 28 0C                                jr      z,.LL110                    ; If delta_y_hi is positive, jump down to LL110 to skip the following
 151++CDBD 2A 04 CD                             ld      hl,(clipDy)                 ;OPTIMISATION 6/11/21 commented out
 152++CDC0                                      macronegate16de                     ; Otherwise flip the sign of delta_y to make it  positive, starting with the low bytes
 152++CDC0 AF          >					xor 	a
 152++CDC1 93          >                    sub 	e
 152++CDC2 5F          >                    ld 		e,a
 152++CDC3 9F          >                    sbc 	a,a
 152++CDC4 92          >                    sub 	d
 152++CDC5 57          >                    ld 		d,a
 153++CDC6 22 04 CD                             ld      (clipDy),hl                 ;OPTIMISATION 6/11/21 commented out
 154++CDC9 2A 01 CD     .LL110:                 ld      hl,(clipDx)
 155++CDCC 3A 02 CD                             ld      a,(clipDxHigh)
 156++CDCF ED 27 80                             test    $80                         ; is it a negative X
 157++CDD2 28 06                                jr      z,.LL111                    ; If delta_x_hi is positive, jump down to LL110 to skip the following
 158++CDD4                                      ;ld      hl,(clipDx)                 ;OPTIMISATION 6/11/21 commented out
 159++CDD4                                      macronegate16hl                     ; Otherwise flip the sign of delta_y to make it  positive, starting with the low bytes
 159++CDD4 AF          >					xor 	a
 159++CDD5 95          >					sub 	l
 159++CDD6 6F          >					ld 		l,a
 159++CDD7 9F          >					sbc 	a,a
 159++CDD8 94          >					sub 	h
 159++CDD9 67          >					ld 		h,a
 160++CDDA                                     ; ld      (clipDx),hl                 ;OPTIMISATION 6/11/21 commented out; we still retain the old sign in NonABS version
 161++CDDA              .LL111:               ;  push    de
 162++CDDA                                     ; ld      hl,(clipDx)                 ;OPTIMISATION 6/11/21 commented out
 163++CDDA                                     ; ld      de,(clipDy)                 ;OPTIMISATION 6/11/21 commented out
 164++CDDA 7C           .ScaleLoop:             ld      a,h                         ; At this point DX and DY are ABS values
 165++CDDB B2                                   or      d
 166++CDDC 28 0A                                jr      z,.CalculateDelta
 166++CDDE
 167++CDDE                                      ShiftDERight1
 167++CDDE CB 3A       >			   srl d
 167++CDE0 CB 1B       >			   rr  e
 168++CDE2                                      ShiftHLRight1
 168++CDE2 CB 3C       >			   srl h
 168++CDE4 CB 1D       >			   rr  l
 169++CDE6 18 F2                                jr      .ScaleLoop                  ; scaled down Dx and Dy to 8 bit, Dy may have been negative
 170++CDE8              .CalculateDelta:        ;ld      (clipDx),hl                ;OPTIMISATION 6/11/21 commented out
 171++CDE8                                      ;ld      (clipDy),de                ;OPTIMISATION 6/11/21 commented out
 172++CDE8              ; By now, the high bytes of both |delta_x| and |delta_y| are zero We know that h and d are both = 0 as that's what we tested with a BEQ
 173++CDE8 AF           .LL113:                 xor     a
 174++CDE9 32 43 99                             ld      (varT),a                    ; t = 0
 175++CDEC 7D                                   ld      a,l                         ; If delta_x_lo < delta_y_lo, so our line is more vertical than horizontal, jump to LL114
 176++CDED                                      JumpIfALTNusng  e, .LL114           ;
 176++CDED BB          >                        cp      e
 176++CDEE DA FE CD    >                        jp		c, .LL114
 177++CDF1              ; Here Dx >= Dy sp calculate Delta Y / delta X
 178++CDF1 32 27 99     .DxGTEDy:               ld      (varQ),a                    ; Set Q = delta_x_lo
 179++CDF4 57                                   ld      d,a                         ; d = also Q for calc
 180++CDF5 7B                                   ld      a,e                         ; Set A = delta_y_lo
 181++CDF6 CD CF AA                             call    AEquAmul256DivD; LL28Amul256DivD             ; Call LL28 to calculate:  R (actually a reg) = 256 * A / Q   = 256 * delta_y_lo / delta_x_lo
 182++CDF9 32 28 99                             ld      (varR),a                    ;
 183++CDFC 18 10                                jr      .LL116                      ; Jump to LL116, as we now have the line's gradient in R
 184++CDFE              ; Here Delta Y > Delta X so calulate delta X / delta Y
 185++CDFE 7B           .LL114:                 ld      a,e                         ; Set Q = delta_y_lo
 186++CDFF 57                                   ld      d,a
 187++CE00 32 27 99                             ld      (varQ),a
 188++CE03 7D                                   ld      a,l                         ; Set A = delta_x_lo
 189++CE04 CD CF AA                             call    AEquAmul256DivD; LL28Amul256DivD             ; Call LL28 to calculate: R = 256 * A / Q  = 256 * delta_x_lo / delta_y_lo
 190++CE07 32 28 99                             ld      (varR),a                    ;
 191++CE0A 21 43 99                             ld      hl,varT                     ; T was set to 0 above, so this sets T = &FF
 192++CE0D 35                                   dec     (hl)
 193++CE0E D1           .LL116:                 pop     de                          ; get back X2
 194++CE0F E1                                   pop     hl                          ; get back X1 into hl,
 195++CE10 3A 28 99                             ld      a,(varR)                    ; Store the gradient in XX12+2 this can be optimised later
 196++CE13 32 06 CD                             ld      (clipGradient),a
 197++CE16 FD 6F                                ld      iyl,a
 198++CE18                                      ;       push    af                   ;OPTIMISATION 6/11/21 commented out
 199++CE18                                      ;       ld      a,iyl                ;OPTIMISATION 6/11/21 commented out
 200++CE18                                      ;       ld      (varXX12p2),a        ;OPTIMISATION 6/11/21 commented out
 201++CE18                                      ;       pop     af                   ;OPTIMISATION 6/11/21 commented out
 202++CE18 3A 29 99                             ld      a,(varS)
 203++CE1B 32 07 CD                             ld      (clipDxySign),a             ;  Store the type of slope in XX12+3, bit 7 clear means ?Not needed as clipDxySign is used for varS earlier?
 204++CE1E                                                                          ; top left to bottom right, bit 7 set means top right to bottom left **CODE IS WRONG HERE A TEST IS BL to TR
 205++CE1E FD 7C                                ld      a,iyh                       ; iyh was XX13 from earlier
 206++CE20 FE 00                                cp      0                           ; If XX13 = 0, skip the following instruction
 207++CE22 28 05                                jr      z,.LL138                    ;
 208++CE24 ED 27 80                             test    $80                         ; If XX13 is positive, it must be 95. This means (x1, y1) is on-screen but (x2, y2) isn't, so we jump to LLX117 to swap the (x1, y1) and (x2, y2)
 209++CE27 28 13                                jr      z,.LLX117                   ; coordinates around before doing the actual clipping, because we need to clip (x2, y2) but the clipping routine at LL118 only clips (x1, y1)
 210++CE29              ; If we get here, XX13 = 0 or 191, so (x1, y1) is off-screen and needs clipping
 211++CE29 CD 50 CE     .LL138                  call    ClipPointHLBC               ; Call LL118 to move (x1, y1) along the line onto the screen, i.e. clip the line at the (x1, y1) end
 212++CE2C FD 7C                                ld      a,iyh                       ; If XX13 = 0, i.e. (x2, y2) is on-screen, jump down to LL124 to return with a successfully clipped line
 213++CE2E ED 27 80                             test    $80
 214++CE31 28 1A                                jr      z,.LL124
 215++CE33              ; If we get here, XX13 = 191 (both coordinates are off-screen)
 216++CE33 7C           .LL117:                 ld      a,h                         ; If either of x1_hi or y1_hi are non-zero, jump to
 217++CE34 B0                                   or      b                           ; LL137 to return from the subroutine with the C flag
 218++CE35 C2 5B CD                             jp      nz, .PointsOutofBounds      ; set, as the line doesn't fit on-screen
 219++CE38 B1                                   or      c                           ; if x1 and y1 hi are both zero test bit 8 or Y1 to see if its > 128
 220++CE39 FA 5B CD                             jp      m, .PointsOutofBounds       ; set, as the line doesn't fit on-screen
 221++CE3C              ; If we get here, XX13 = 95 or 191, and in both cases (x2, y2) is off-screen, so we now need to swap the (x1, y1) and (x2, y2) coordinates around before doing
 222++CE3C              ; the actual clipping, because we need to clip (x2, y2) but the clipping routine at LL118 only clips (x1, y1)
 223++CE3C EB           .LLX117:                ex      de,hl                       ;  swap X1 and X2
 224++CE3D DD E5                                push    ix                          ;  swap Y1 and Y2
 225++CE3F C5                                   push    bc
 226++CE40 DD E1                                pop     ix
 227++CE42 C1                                   pop     bc
 228++CE43 CD 50 CE                             call    ClipPointHLBC               ;  Call LL118 to move (x1, y1) along the line onto the screen, i.e. clip the line at the (x1, y1) end
 229++CE46 3A 0A CD                             ld      a,(SWAP)
 230++CE49 3D                                   dec     a
 231++CE4A 32 0A CD                             ld      (SWAP),a                    ; Set SWAP = &FF to indicate that we just clipped the line at the (x2, y2) end by swapping the coordinates (the DEC does this as we set SWAP to 0 at the start of this subroutine)
 232++CE4D C3 48 CD     .LL124:                 jp      .ClipDone                    ; now put points in place
 233++CE50
 234++CE50              ; Move a point along a line until it is on-screen point is held in HL(X) BC(Y) LL118
 235++CE50              ; iyh still holds XX13 iyl still holds gradient
 236++CE50 7C           ClipPointHLBC:          ld      a,h                         ; If x1_hi is positive, jump down to LL119 to skip the following
 237++CE51 ED 27 80                             test    $80
 238++CE54 28 17                                jr      z,.LL119
 239++CE56 32 29 99     .X1isNegative:          ld      (varS),a                    ;  Otherwise x1_hi is negative, i.e. off the left of the screen, so set S = x1_hi
 240++CE59 E5 D5 C5                             push    hl,,de,,bc
 241++CE5C CD D2 CE                             call    LL120                       ;  Call LL120 to calculate:   (Y X) = (S x1_lo) * XX12+2      if T = 0   = x1 * gradient
 242++CE5F                                                                          ;                             (Y X) = (S x1_lo) / XX12+2      if T <> 0  = x1 / gradient
 243++CE5F                                                                          ;  with the sign of (Y X) set to the opposite of the line's direction of slope
 244++CE5F C1 D1 E1                             pop    hl,,de,,bc                   ;  get coordinates back
 245++CE62 2A 0B CD                             ld      hl,(varYX)
 246++CE65              ;                        ex      hl,de
 247++CE65                                  ;    ld      hl,bc
 248++CE65 09                                   add     hl,bc                       ; y1 = y1 + varYX
 249++CE66 44 4D                                ld      bc,hl
 250++CE68 21 00 00                             ld      hl,0                        ; Set x1 = 0
 251++CE6B               ;                       pop     de
 252++CE6B 18 1A                                jr      .LL134                      ; in BBC is set x to 0 to force jump, we will just jump
 253++CE6D FE 00        .LL119:                 cp      0
 254++CE6F 28 16                                jr      z,.LL134                    ;  If x1_hi = 0 then jump down to LL134 to skip the following, as the x-coordinate is already on-screen (as 0 <= (x_hi x_lo) <= 255)
 255++CE71 3D                                   dec     a
 256++CE72 32 29 99                             ld      (varS),a                    ;  Otherwise x1_hi is positive, i.e. x1 >= 256 and off the right side of the screen, so set S = x1_hi - 1
 257++CE75 E5 D5 C5                             push    hl,,de,,bc
 258++CE78 CD D2 CE                             call    LL120                      ;  Call LL120 to calculate: (Y X) = (S x1_lo) * XX12+2      if T = 0  = (x1 - 256) * gradient
 259++CE7B                                                                          ;                           (Y X) = (S x1_lo) / XX12+2      if T <> 0 = (x1 - 256) / gradient
 260++CE7B                                                                          ;  with the sign of (Y X) set to the opposite of theline's direction of slope
 261++CE7B C1 D1 E1                             pop     hl,,de,,bc
 262++CE7E                                    ;  push    de                          ; Set y1 = y1 + (Y X)
 263++CE7E 2A 0B CD                             ld      hl,(varYX)
 264++CE81                                    ; ex      de,hl                       ;OPTIMISATION 6/11/21 commented out
 265++CE81 09                                   add     hl,bc                        ;OPTIMISATION 6/11/21 simplfied post debug
 266++CE82 44 4D                                ld      bc,hl                        ;OPTIMISATION 6/11/21 simplfied post debug
 267++CE84                                    ; ex      hl,de                       ;OPTIMISATION 6/11/21 commented out
 268++CE84                                    ; ld      hl,bc                       ;OPTIMISATION 6/11/21 commented out
 269++CE84                                    ; add     hl,de                       ; y1 = y1 + varYX
 270++CE84 21 FF 00                             ld      hl,255                      ; Set x1 = 255
 271++CE87                                    ;  pop     de
 272++CE87              ; We have moved the point so the x-coordinate is on screen (i.e. in the range 0-255), so now for they-coordinate
 273++CE87 78           .LL134:                 ld      a,b                         ; If y1_hi is positive, jump down to LL135  to skip the following
 274++CE88 ED 27 80                             test    $80                         ;
 275++CE8B 28 1A                                jr      z,.LL135                    ;
 276++CE8D 32 29 99                             ld      (varS),a                    ; Otherwise y1_hi is negative, i.e. off the top of the screen, so set S = y1_hi
 277++CE90 79                                   ld      a,c                         ; Set R = y1_lo
 278++CE91 32 28 99                             ld      (varR),a                    ;
 279++CE94 E5 D5 C5                             push    hl,,de,,bc
 280++CE97 CD F9 CE                             call    LL123                       ;  Call LL123 to calculate: (Y X) = (S R) / XX12+2      if T = 0  = y1 / gradient
 281++CE9A                                                                          ;                           (Y X) = (S R) * XX12+2      if T <> 0 = y1 * gradient
 282++CE9A                                                                          ;  with the sign of (Y X) set to the opposite of the line's direction of slope
 283++CE9A C1 D1 E1                             pop     hl,,de,,bc
 284++CE9D D5                                   push    de
 285++CE9E EB                                   ex      hl,de                       ; de = x1
 286++CE9F 2A 0B CD                             ld      hl,(varYX)                  ; hl = varYX
 287++CEA2 19                                   add     hl,de                       ; we don't need to swap back as its an add, Set x1 = x1 + (Y X)
 288++CEA3 D1                                   pop     de                          ; de = x2 again
 289++CEA4 01 00 00                             ld      bc,0                        ; Set y1 = 0
 290++CEA7 79           .LL135:                 ld      a,c                         ; if bc < 128 then no work to do
 291++CEA8 E6 80                                and     $80
 292++CEAA B0                                   or      b                           ; here we see if c bit 8 is set or anything in b as we know if its 0 this would mean there is no need to clip
 293++CEAB C8                                   ret     z
 294++CEAC E5                                   push    hl
 295++CEAD 60 69                                ld      hl,bc
 296++CEAF 01 80 00                             ld      bc,128
 297++CEB2 B7                                   or      a
 298++CEB3 ED 42                                sbc     hl,bc                       ; hl =  (S R) = (y1_hi y1_lo) - 128
 299++CEB5 22 28 99                             ld      (varRS), hl                 ; and now RS (or SR)
 300++CEB8 7C                                   ld      a,h
 301++CEB9 E1                                   pop     hl
 302++CEBA ED 27 80                             test    $80                         ; If the subtraction underflowed, i.e. if y1 < 192, then y1 is already on-screen, so jump to LL136 to return from the subroutine, as we are done
 303++CEBD C0                                   ret     nz
 304++CEBE              ; If we get here then y1 >= 192, i.e. off the bottom of the screen
 305++CEBE E5 D5 C5     .LL139:                 push    hl,,de,,bc
 306++CEC1 CD F9 CE                             call    LL123                       ;  Call LL123 to calculate: (Y X) = (S R) / XX12+2      if T = 0  = y1 / gradient
 307++CEC4                                                                          ;                           (Y X) = (S R) * XX12+2      if T <> 0 = y1 * gradient
 308++CEC4                                                                          ;  with the sign of (Y X) set to the opposite of the line's direction of slope
 309++CEC4 C1 D1 E1                             pop     hl,,de,,bc
 310++CEC7 D5                                   push    de
 311++CEC8 EB                                   ex      hl,de
 312++CEC9 2A 0B CD                             ld      hl,(varYX)
 313++CECC 19                                   add     hl,de                       ; we don't need to swap back as its an add, Set x1 = x1 + (Y X)
 314++CECD 01 7F 00                             ld      bc,127                      ; set bc to 127 bottom of screen
 315++CED0 D1                                   pop     de
 316++CED1 C9           .LL136:                 ret                                 ;  Return from the subroutine
 317++CED2
 318++CED2
 319++CED2              ; Calculate the following:   * If T = 0  (more vertical than horizontal), (Y X) = (S x1_lo) * XX12+2
 320++CED2              ;                            * If T <> 0 (more horizontal than vertical), (Y X) = (S x1_lo) / XX12+2
 321++CED2              ;                              giving (Y X) the opposite sign to the slope direction in XX12+3.
 322++CED2              ; Other entry points        LL122                Calculate (Y X) = (S R) * Q and set the sign to the opposite of the top byte on the stack
 323++CED2 7D           LL120:                  ld      a,l                          ; Set R = x1_lo
 324++CED3 32 28 99                             ld      (varR),a
 325++CED6 CD 41 CF                             call    LL129                        ;  Call LL129 to do the following:  Q = XX12+2   = line gradient  A = S EOR XX12+3 = S EOR slope direction (S R) = |S R| So A contains the sign of S * slope direction
 326++CED9 F5                                   push    af                           ;  Store A on the stack so we can use it later
 327++CEDA C5                                   push    bc
 328++CEDB 47                                   ld      b,a
 329++CEDC 3A 43 99                             ld      a,(varT)                     ; instead : (Y X) = (S R ) / Q
 330++CEDF FE 00                                cp      0
 331++CEE1 78                                   ld      a,b
 332++CEE2 C1                                   pop     bc                           ; we can't use af as that would disrupt the flags
 333++CEE3 20 23                                jr      nz, LL121
 334++CEE5              ; The following calculates:  (Y X) = (S R) * Q using the same shift-and-add algorithm that's documented in MULT1
 335++CEE5 3A 06 CD     LL122:                  ld      a,(clipGradient)
 336++CEE8 32 27 99                             ld      (varQ),a; optimise
 337++CEEB CD 22 A9                             call    HLequSRmulQdiv256
 338++CEEE 22 0B CD                             ld      (varYX),hl
 339++CEF1 F1                                   pop     af
 340++CEF2 ED 27 80                             test    $80
 341++CEF5 CA 34 CF                             jp      z,LL133
 342++CEF8 C9                                   ret
 343++CEF9              ; Calculate the following: * If T = 0,  calculate (Y X) = (S R) / XX12+2 (actually SR & XX12+2 /256)
 344++CEF9              ;                          * If T <> 0, calculate (Y X) = (S R) * XX12+2
 345++CEF9              ;                          giving (Y X) the opposite sign to the slope direction in XX12+3.
 346++CEF9              ;
 347++CEF9              ; Other entry points:      LL121                Calculate (Y X) = (S R) / Q and set the sign to the opposite of the top byte on the stack
 348++CEF9              ;                          LL133                Negate (Y X) and return from the subroutine
 349++CEF9              ;                          LL128                Contains an RTS
 350++CEF9 CD 41 CF     LL123:                  call    LL129                       ; Call LL129 to do the following: Q = XX12+2   = line gradient  A = S EOR XX12+3 = S EOR slope direction (S R) = |S R| So A contains the sign of S * slope direction
 351++CEFC F5                                   push    af                          ; Store A on the stack so we can use it later
 352++CEFD C5                                   push    bc                          ; If T is non-zero, so it's more horizontal than vertical, jump down to LL121 to calculate this
 353++CEFE 47                                   ld      b,a
 354++CEFF 3A 43 99                             ld      a,(varT)                    ; instead : (Y X) = (S R) * Q *** this looks to be the wrong way roudn for Y!!!!
 355++CF02 FE 00                                cp      0
 356++CF04 78                                   ld      a,b
 357++CF05 C1                                   pop     bc
 358++CF06 20 DD                                jr      nz, LL122
 359++CF08              ; The following calculates: (Y X) = (S R) / Q using the same shift-and-subtract algorithm that's documented in TIS2, its actually X.Y=R.S*256/Q
 360++CF08 11 FE FF     LL121:                  ld      de,$FFFE                    ; set XY to &FFFE at start, de holds XY
 361++CF0B 2A 28 99                             ld      hl,(varRS)                  ; hl = RS
 362++CF0E 3A 27 99                             ld      a,(varQ)
 363++CF11 47                                   ld      b,a                         ; b = q
 364++CF12              .LL130:                 ShiftHLLeft1                        ; RS *= 2
 364++CF12 CB 25       >			   sla l
 364++CF14 CB 14       >			   rl  h
 365++CF16 7C                                   ld      a,h
 366++CF17 38 04                                jr      c,.LL131                    ; if S overflowed skip Q test and do subtractions
 367++CF19                                      JumpIfALTNusng b, .LL132            ; if S <  Q = 256/gradient skip subtractions
 367++CF19 B8          >                        cp      b
 367++CF1A DA 25 CF    >                        jp		c, .LL132
 368++CF1D 3F           .LL131:                 ccf                                 ; compliment carry
 369++CF1E 98                                   sbc     a,b                         ; q
 370++CF1F 67                                   ld      h,a                         ; h (s)
 371++CF20 7D                                   ld      a,l                         ; r
 372++CF21 DE 00                                sbc     a,0                         ; 0 - so in effect SR - Q*256
 373++CF23 37                                   scf                                 ; set carry for next rolls
 374++CF24 3F                                   ccf
 375++CF25              .LL132:                 RollDELeft1                         ; Rotate de bits left
 375++CF25 CB 13       >               rl  e
 375++CF27 CB 12       >               rl  d
 376++CF29 38 E7                                jr      c,.LL130                    ;
 377++CF2B ED 53 0B CD                          ld      (varYX),de
 378++CF2F F1                                   pop     af              ; get back sign
 379++CF30 ED 27 80                             test    $80
 380++CF33 C8                                   ret     z               ; if negative then return with value as is reversed sign
 381++CF34 2A 0B CD     LL133:                  ld      hl,(varYX)      ; may not actually need this?
 382++CF37                                      NegHL
 382++CF37 AF          >                    xor a
 382++CF38 95          >                    sub l
 382++CF39 6F          >                    ld l,a
 382++CF3A 9F          >                    sbc a,a
 382++CF3B 94          >                    sub h
 382++CF3C 67          >                    ld h,a
 383++CF3D 22 0B CD                             ld      (varYX),hl
 384++CF40 C9           LL128:                  ret
 385++CF41              ; Do the following, in this order:  Q = XX12+2
 386++CF41              ;                                   A = S EOR XX12+3
 387++CF41              ;                                   (S R) = |S R|
 388++CF41              ; This sets up the variables required above to calculate (S R) / XX12+2 and give the result the opposite sign to XX13+3.
 389++CF41 3A 06 CD     LL129:                  ld      a,(clipGradient)
 390++CF44 32 27 99                             ld      (varQ),a                    ;Set Q = XX12+2
 391++CF47 3A 29 99                             ld      a,(varS)                    ; If S is positive, jump to LL127
 392++CF4A E5 F5                                push    hl,,af
 393++CF4C ED 27 80                             test    $80
 394++CF4F 28 0C                                jr      z,.LL127
 395++CF51 2A 28 99                             ld      hl,(varRS)                  ; else SR = | SR|
 396++CF54                                      NegHL
 396++CF54 AF          >                    xor a
 396++CF55 95          >                    sub l
 396++CF56 6F          >                    ld l,a
 396++CF57 9F          >                    sbc a,a
 396++CF58 94          >                    sub h
 396++CF59 67          >                    ld h,a
 397++CF5A 22 28 99                             ld      (varRS),hl
 398++CF5D 21 07 CD     .LL127:                 ld      hl,clipDxySign
 399++CF60 F1                                   pop     af
 400++CF61 AE                                   xor     (hl)                        ; a = S XOR clipDxySign
 401++CF62 E1                                   pop     hl
 402++CF63 C9                                   ret
 403++CF64
# file closed: ././ModelRender/CLIP-LL145.asm
 606+ CF64              ;--------------------------------------------------------------------------------------------------------
 607+ CF64                                      include "./Universe/Ships/CopyRotmatToTransMat.asm"
# file opened: ././Universe/Ships/CopyRotmatToTransMat.asm
   1++CF64              ; Set TransMatTo
   2++CF64              ; XX16(1 0)   (3 2)   (5 4)   = sidev_x sidev_y sidev_z XX16(13,12) (15 14) (17 16)
   3++CF64              ; XX16(7 6)   (9 8)   (11 10) = roofv_x roofv_y roofv_z XX16(7 6)   (9 8)   (11 10)
   4++CF64              ; XX16(13 12) (15 14) (17 16) = nosev_x nosev_y nosev_z XX16(1 0)   (3 2)   (5 4)
   5++CF64              ; This moves Side XYZ to position 0, Roof XYZ to position 1 annd nose XYZ to position 2 as a copy of each batch of 6 bytes
   6++CF64              CopyRotmatToTransMat:                       ; Tested
   7++CF64 21 15 C0     LL15_CopyRotMat:        ld      hl,UBnkrotmatSidevX
   8++CF67
   9++CF67 11 3E C0                             ld      de,UBnkTransmatSidevX
  10++CF6A                                      SixLDIInstrunctions
  10++CF6A ED A0       >                        ldi
  10++CF6C ED A0       >                        ldi
  10++CF6E ED A0       >                        ldi
  10++CF70 ED A0       >                        ldi
  10++CF72 ED A0       >                        ldi
  10++CF74 ED A0       >                        ldi
  11++CF76 21 1B C0                             ld      hl,UBnkrotmatRoofvX
  12++CF79 11 44 C0                             ld      de, UBnkTransmatRoofvX
  13++CF7C                                      SixLDIInstrunctions
  13++CF7C ED A0       >                        ldi
  13++CF7E ED A0       >                        ldi
  13++CF80 ED A0       >                        ldi
  13++CF82 ED A0       >                        ldi
  13++CF84 ED A0       >                        ldi
  13++CF86 ED A0       >                        ldi
  14++CF88 21 21 C0                             ld      hl,UBnkrotmatNosevX
  15++CF8B 11 4A C0                             ld      de, UBnkTransmatNosevX
  16++CF8E                                      SixLDIInstrunctions
  16++CF8E ED A0       >                        ldi
  16++CF90 ED A0       >                        ldi
  16++CF92 ED A0       >                        ldi
  16++CF94 ED A0       >                        ldi
  16++CF96 ED A0       >                        ldi
  16++CF98 ED A0       >                        ldi
  17++CF9A C9                                   ret
  18++CF9B
  19++CF9B              CopyRotToTransMacro:    MACRO
  20++CF9B ~                                    ld      hl,UBnkrotmatSidevX
  21++CF9B ~                                    ld      de,UBnkTransmatSidevX
  22++CF9B ~                                    SixLDIInstrunctions
  23++CF9B ~                                    SixLDIInstrunctions
  24++CF9B ~                                    SixLDIInstrunctions
  25++CF9B                                      ENDM
  26++CF9B
# file closed: ././Universe/Ships/CopyRotmatToTransMat.asm
 608+ CF9B                                      include "./Universe/Ships/TransposeXX12ByShipToXX15.asm"
# file opened: ././Universe/Ships/TransposeXX12ByShipToXX15.asm
   1++CF9B              TransposeXX12ByShipToXX15:
   2++CF9B 2A 89 C0             ld		hl,(UBnkXX12xLo)					; get X into HL
   3++CF9E 7C           		ld		a,h			                        ; get XX12 Sign
   4++CF9F E6 80        		and		$80									; check sign bit on high byte
   5++CFA1 47           		ld		b,a									; and put it in of 12xlo in b
   6++CFA2                      ;110921 debugld      h,0
   7++CFA2 7C                   ld      a,h
   8++CFA3 E6 7F                and     $7F
   9++CFA5 67                   ld      h,a
  10++CFA6                      ;110921 debugld      h,0
  11++CFA6 ED 5B 0C C0  		ld		de,(UBnKxlo)						;
  12++CFAA 3A 0E C0     		ld		a,(UBnKxsgn)						; get Ship Pos (low,high,sign)
  13++CFAD E6 80        		and		$80									; make sure we only have bit 7
  14++CFAF 4F           		ld		c,a									; and put sign of unkxsgn c
  15++CFB0 CD 7E AF     		call 	ADDHLDESignBC; XX12ProcessCalcHLPlusDESignBC		; this will result in HL = result and A = sign
  16++CFB3 B4           		or		h									; combine sign in A with H to give 15 bit signed (*NOT* 2's c)
  17++CFB4 67           		ld		h,a
  18++CFB5 22 83 C0     		ld		(UBnkXScaled),hl					; now write it out to XX15 X pos
  19++CFB8              ; ..................................
  20++CFB8 2A 8B C0     		ld		hl,(UBnkXX12yLo)					; Repeat above for Y coordinate
  21++CFBB 7C           		ld		a,h
  22++CFBC E6 80        		and		$80
  23++CFBE 47           		ld		b,a
  24++CFBF                      ;110921 debugld      h,0
  25++CFBF 7C                   ld      a,h
  26++CFC0 E6 7F                and     $7F
  27++CFC2 67                   ld      h,a
  28++CFC3                      ;110921 debugld      h,0
  29++CFC3 ED 5B 0F C0  		ld		de,(UBnKylo)
  30++CFC7 3A 11 C0     		ld		a,(UBnKysgn)
  31++CFCA E6 80        		and		$80									; make sure we only have bit 7
  32++CFCC 4F           		ld		c,a
  33++CFCD CD 7E AF     		call 	ADDHLDESignBC; XX12ProcessCalcHLPlusDESignBC
  34++CFD0 B4           		or		h									; combine sign in A with H
  35++CFD1 67           		ld		h,a
  36++CFD2 22 85 C0     		ld		(UBnkYScaled),hl
  37++CFD5              ; ..................................
  38++CFD5 2A 8D C0     		ld		hl,(UBnkXX12zLo)					; and now repeat for Z cooord
  39++CFD8 7C           		ld		a,h
  40++CFD9 E6 80        		and		$80
  41++CFDB 47           		ld		b,a
  42++CFDC                      ;110921 debugld      h,0
  43++CFDC 7C                   ld      a,h
  44++CFDD E6 7F                and     $7F
  45++CFDF 67                   ld      h,a
  46++CFE0                      ;110921 debugld      h,0
  47++CFE0 ED 5B 12 C0  		ld		de,(UBnKzlo)
  48++CFE4 3A 14 C0     		ld		a,(UBnKzsgn)
  49++CFE7 E6 80        		and		$80									; make sure we only have bit 7
  50++CFE9 4F           		ld		c,a
  51++CFEA CD 7E AF     		call 	ADDHLDESignBC; XX12ProcessCalcHLPlusDESignBC
  52++CFED B4           		or		h									; combine sign in A with H
  53++CFEE 67           		ld		h,a
  54++CFEF CB 7C        		bit		7,h                                 ; if sign if positive then we don't need to do the clamp so we ony jump
  55++CFF1 20 16        		jr		nz,ClampZto4                        ; result was negative so we need to clamp to 4
  56++CFF3 E6 7F                and     $7F                                 ; a = value unsigned
  57++CFF5 20 06                jr      nz,NoClampZto4                      ; if high byte was 0 then we could need to clamp still by this stage its +v but and will set z flag if high byte is zero
  58++CFF7 7D                   ld      a,l                                 ; get low byte now
  59++CFF8              		JumpIfALTNusng 4,ClampZto4					; if its < 4 then fix at 4
  59++CFF8 FE 04       >                        cp      4
  59++CFFA DA 09 D0    >                        jp		c, ClampZto4
  60++CFFD              NoClampZto4:
  61++CFFD 22 87 C0     		ld		(UBnkZScaled),hl					; hl = signed calculation and > 4
  62++D000 7D           		ld		a,l									; in addition write out the z cooord to UT for now for backwards compat (DEBUG TODO remove later)
  63++D001 32 43 99             ld      (varT),a
  64++D004 7C           		ld		a,h
  65++D005 32 26 99             ld      (varU),a
  66++D008 C9           		ret
  67++D009              ClampZto4:											; This is where we limit 4 to a minimum of 4
  68++D009 21 04 00     		ld		hl,4
  69++D00C 22 87 C0     		ld		(UBnkZScaled),hl; BODGE FOR NOW
  70++D00F 7D           		ld		a,l
  71++D010 32 43 99             ld      (varT),a                            ;                                                                           ;;;
  72++D013 7C           		ld		a,h
  73++D014 32 26 99             ld      (varU),a 						; compatibility for now
  74++D017 C9           		ret
  75++D018
# file closed: ././Universe/Ships/TransposeXX12ByShipToXX15.asm
 609+ D018                                      include "./Maths/Utilities/ScaleNodeTo8Bit.asm"
# file opened: ././Maths/Utilities/ScaleNodeTo8Bit.asm
   1++D018              ScaleNodeTo8Bit:								; TODO make signed
   2++D018 ED 4B 87 C0  	ld			bc,(UBnkZScaled)
   3++D01C 2A 83 C0     	ld			hl,(UBnkXScaled)
   4++D01F ED 5B 85 C0  	ld			de,(UBnkYScaled)
   5++D023              SetABSbc:
   6++D023 78           	ld			a,b
   7++D024 DD 67        	ld			ixh,a
   8++D026 E6 7F        	and			SignMask8Bit
   9++D028 47           	ld			b,a									; bc = ABS bc
  10++D029              SetABShl:
  11++D029 7C           	ld			a,h
  12++D02A DD 6F        	ld			ixl,a
  13++D02C E6 7F        	and			SignMask8Bit
  14++D02E 67           	ld			h,a									; hl = ABS hl
  15++D02F              SetABSde:
  16++D02F 7A           	ld			a,d
  17++D030 FD 67        	ld			iyh,a
  18++D032 E6 7F        	and			SignMask8Bit
  19++D034 57           	ld			d,a									; de = ABS de
  20++D035              ScaleNodeTo8BitLoop:
  21++D035 78               ld          a,b		                            ; U	\ z hi
  22++D036 B4           	or			h                                   ; XX15+1	\ x hi
  23++D037 B2           	or			d                                   ; XX15+4	\ y hi
  24++D038 28 0F            jr          z,ScaleNodeDone                   ; if X, Y, Z = 0  exit loop down once hi U rolled to 0
  25++D03A                  ShiftHLRight1
  25++D03A CB 3C       >			   srl h
  25++D03C CB 1D       >			   rr  l
  26++D03E                  ShiftDERight1
  26++D03E CB 3A       >			   srl d
  26++D040 CB 1B       >			   rr  e
  27++D042              	ShiftBCRight1
  27++D042 CB 38       >			   srl b
  27++D044 CB 19       >			   rr  c
  28++D046 C3 35 D0         jp          ScaleNodeTo8BitLoop
  29++D049              ScaleNodeDone:										; now we have scaled values we have to deal with sign
  30++D049 DD 7C        	ld			a,ixh								; get sign bit and or with b
  31++D04B E6 80        	and			SignOnly8Bit
  32++D04D B0           	or			b
  33++D04E 47           	ld			b,a
  34++D04F              SignforHL:
  35++D04F DD 7D        	ld			a,ixl								; get sign bit and or with b
  36++D051 E6 80        	and			SignOnly8Bit
  37++D053 B4           	or			h
  38++D054 67           	ld			h,a
  39++D055              SignforDE:
  40++D055 FD 7C        	ld			a,iyh								; get sign bit and or with b
  41++D057 E6 80        	and			SignOnly8Bit
  42++D059 B2           	or			d
  43++D05A 57           	ld			d,a
  44++D05B              SignsDoneSaveResult:
  45++D05B ED 43 87 C0  	ld			(UBnkZScaled),bc
  46++D05F 22 83 C0     	ld			(UBnkXScaled),hl
  47++D062 ED 53 85 C0  	ld			(UBnkYScaled),de
  48++D066 78           	ld			a,b
  49++D067 32 26 99     	ld			(varU),a
  50++D06A 79           	ld			a,c
  51++D06B 32 43 99     	ld			(varT),a
  52++D06E C9           	ret
  53++D06F
# file closed: ././Maths/Utilities/ScaleNodeTo8Bit.asm
 610+ D06F
 611+ D06F              ;--------------------------------------------------------------------------------------------------------
 612+ D06F 21 B0 C0     SetFaceAVisible:        ld      hl,UbnkFaceVisArray
 613+ D072 ED 31                                add     hl,a
 614+ D074 3E FF                                ld      a,$FF
 615+ D076 77                                   ld      (hl),a
 616+ D077 C9                                   ret
 617+ D078              ;--------------------------------------------------------------------------------------------------------
 618+ D078 21 B0 C0     SetFaceAHidden:         ld      hl,UbnkFaceVisArray
 619+ D07B ED 31                                add     hl,a
 620+ D07D AF                                   xor     a
 621+ D07E 77                                   ld      (hl),a
 622+ D07F C9                                   ret
 623+ D080              ;--------------------------------------------------------------------------------------------------------
 624+ D080 3A 18 C3     SetAllFacesVisible:     ld      a,(FaceCtX4Addr)            ; (XX0),Y which is XX0[0C] or UBnkHullCopy+FaceCtX4Addr                                 ;;; Faces count (previously loaded into b up front but no need to shave bytes for clarity
 625+ D083 CB 3F                                srl     a                           ; else do explosion needs all vertices                                                  ;;;
 626+ D085 CB 3F                                srl     a                           ;  /=4  TODO add this into blueprint data for speed                                                           ;;; For loop = 15 to 0
 627+ D087 47                                   ld      b,a                         ; b = Xreg = number of normals, faces
 628+ D088 21 B0 C0                             ld      hl,UbnkFaceVisArray
 629+ D08B 3E FF                                ld      a,$FF
 630+ D08D              SetAllFacesVisibleLoop:
 631+ D08D 77           EE30:                   ld      (hl),a
 632+ D08E 23                                   inc     hl
 633+ D08F 10 FC                                djnz    SetAllFacesVisibleLoop
 634+ D091 C9                                   ret
 635+ D092              ;--------------------------------------------------------------------------------------------------------
 636+ D092 3A 18 C3     SetAllFacesHidden:      ld      a,(FaceCtX4Addr)            ; (XX0),Y which is XX0[0C] or UBnkHullCopy+ShipHullFacesCount                           ;;; Faces count (previously loaded into b up front but no need to shave bytes for clarity
 637+ D095 CB 3F                                srl     a                           ; else do explosion needs all vertices                                                  ;;;
 638+ D097 CB 3F                                srl     a                           ;  /=4                                                                                  ;;; For loop = 15 to 0
 639+ D099 47                                   ld      b,a                         ; b = Xreg = number of normals, faces
 640+ D09A 06 10                                ld      b,16
 641+ D09C 21 B0 C0                             ld      hl,UbnkFaceVisArray
 642+ D09F 3E 00                                ld      a,$00
 643+ D0A1 77           SetAllFacesHiddenLoop:  ld      (hl),a
 644+ D0A2 23                                   inc     hl
 645+ D0A3 10 FC                                djnz    SetAllFacesHiddenLoop
 646+ D0A5 C9                                   ret
 647+ D0A6
 648+ D0A6              ;;;;X = normal scale
 649+ D0A6              ;;;;ZtempHi = zhi
 650+ D0A6              ;;;;......................................................
 651+ D0A6              ;;;; if ztemp hi <> 0                                   ::Scale Object Distance
 652+ D0A6              ;;;;  Loop                                              ::LL90
 653+ D0A6              ;;;;     inc X
 654+ D0A6              ;;;;     divide X, Y & ZtempHiLo by 2
 655+ D0A6              ;;;;  Until ZtempHi = 0
 656+ D0A6              ;;;;......................................................
 657+ D0A6              ;-LL21---------------------------------------------------------------------------------------------------
 658+ D0A6                                      include "Universe/Ships/NormaliseTransMat.asm"
# file opened: ./Universe/Ships/NormaliseTransMat.asm
   1++D0A6              ;divdide by 16 using undocumented instrunctions
   2++D0A6              Norm256mulAdivQ:
   3++D0A6 47               ld      b,a
   4++D0A7 0E 00            ld      c,0
   5++D0A9 16 00            ld      d,0
   6++D0AB 3A 27 99         ld      a,(varQ)
   7++D0AE 5F               ld      e,a
   8++D0AF              ;Input: BC = Dividend, DE = Divisor, HL = 0
   9++D0AF              ;Output: BC = Quotient, HL = Remainder
  10++D0AF              NormDIV16UNDOC:
  11++D0AF 21 00 00         ld      hl,0
  12++D0B2 78               ld      a,b
  13++D0B3 06 10            ld      b,16
  14++D0B5              NormDIV16UNDOCLOOP:
  15++D0B5 CB 31        	sll	    c		; unroll 16 times
  16++D0B7 17           	rla	    		; ...
  17++D0B8 ED 6A        	adc	    hl,hl		; ...
  18++D0BA ED 52        	sbc	    hl,de		; ...
  19++D0BC 30 02        	jr	    nc,NormDIV16UNDOCSKIP		; ...
  20++D0BE 19           	add	    hl,de		; ...
  21++D0BF 0D           	dec	    c		; ...
  22++D0C0              NormDIV16UNDOCSKIP:
  23++D0C0 10 F3            djnz    NormDIV16UNDOCLOOP
  24++D0C2 79               ld      a,c
  25++D0C3 32 28 99         ld      (varR),a
  26++D0C6 C9               ret
  27++D0C7
  28++D0C7              ; Tested OK
  29++D0C7              NormaliseTransMat:
  30++D0C7              ;LL21
  31++D0C7 21 4F C0             ld      hl,UBnkTransmatNosevZ+1         ; initialise loop
  32++D0CA 0E C5                ld      c,ConstNorm                 ; c = Q = norm = 197
  33++D0CC 79                   ld      a,c
  34++D0CD 32 27 99             ld      (varQ),a                    ; set up varQ
  35++D0D0 06 09                ld      b,9                         ; total of 9 elements to transform
  36++D0D2              LL21Loop:
  37++D0D2 56                   ld      d,(hl)
  38++D0D3 2B                   dec     hl
  39++D0D4 5E                   ld      e,(hl)                      ; de = hilo now   hl now = pointer to low byte
  40++D0D5                      ShiftDELeft1                        ; De = DE * 2
  40++D0D5 CB 23       >			   sla e
  40++D0D7 CB 12       >			   rl  d
  41++D0D9 7A                   ld      a,d                         ; a = hi byte after shifting
  42++D0DA E5           		push	hl
  43++D0DB C5           		push	bc
  44++D0DC CD A6 D0             call    Norm256mulAdivQ
  45++D0DF              		;===call    RequAmul256divC				; R = (2(hi).0)/ConstNorm - LL28 Optimised BFRDIV R=A*256/Q = delta_y / delta_x Use Y/X grad. as not steep
  46++D0DF 79                   ld      a,c                         ; BFRDIV returns R also in l reg
  47++D0E0 C1           		pop		bc
  48++D0E1 E1           		pop		hl							; bc gets wrecked by BFRDIV
  49++D0E2 77                   ld      (hl),a                      ; write low result to low byte so zlo = (zhl *2)/197, we keep hi byte in tact as we need the sign bit
  50++D0E3 2B                   dec     hl                          ; now hl = hi byte of pre val e.g z->y->x
  51++D0E4 10 EC                djnz    LL21Loop                    ; loop from 2zLo through to 0xLo
  52++D0E6 C9                   ret
  53++D0E7
# file closed: ./Universe/Ships/NormaliseTransMat.asm
 659+ D0E7              ;-LL91---------------------------------------------------------------------------------------------------
 660+ D0E7
 661+ D0E7              ; Now we have
 662+ D0E7              ;   * XX18(2 1 0) = (x_sign x_hi x_lo)
 663+ D0E7              ;   * XX18(5 4 3) = (y_sign y_hi y_lo)
 664+ D0E7              ;   * XX18(8 7 6) = (z_sign z_hi z_lo)
 665+ D0E7              ;
 666+ D0E7              ;--------------------------------------------------------------------------------------------------------
 667+ D0E7                                      include "Universe/Ships/InverseXX16.asm"
# file opened: ./Universe/Ships/InverseXX16.asm
   1++D0E7              ; TESTEDOK
   2++D0E7
   3++D0E7              ;ScaleOrientationXX16:                       ; DEBUG TODO will combine with inverse later
   4++D0E7              ;        ld      a,(XX17)
   5++D0E7              ;        ld      ixl,a
   6++D0E7              ;        ld      ixh,9
   7++D0E7              ;        ld      hl,UBnkTransInv0x
   8++D0E7              ;        ld      a,(hl)
   9++D0E7              ;ScaleNode:
  10++D0E7              ;        ld      b,ixl
  11++D0E7              ;ScaleNodeLoop:
  12++D0E7              ;        sla      a
  13++D0E7              ;        djnz    ScaleNodeLoop
  14++D0E7              ;        ld      (hl),a
  15++D0E7              ;        inc     hl
  16++D0E7              ;        inc     hl
  17++D0E7              ;        dec     ixh
  18++D0E7              ;        jr      nz,ScaleNode
  19++D0E7              ;        ret
  20++D0E7
  21++D0E7
  22++D0E7              InverseXX16:								; lead routine into .LL42	\ ->  &4B04 \ DO nodeX-Ycoords their comment  \  TrnspMat
  23++D0E7              ; we coudl combine this with move to transmat later as an optimisation
  24++D0E7              ; INPUT - All Scaled
  25++D0E7              ;  They transmat has already been put into side, roof nose order
  26++D0E7              ;  XX16   = |sidev_x| |sidev_y| |sidev_z|  1  0  3  2  5  4 note each bytepair is Scaled value in low and high byte just for sign
  27++D0E7              ;  XX16   = |roofv_x| |roofv_y| |roofv_z|  7  6  8  9 11 10
  28++D0E7              ;  XX16   = |nosev_x| |nosev_y| |nosev_z| 13 12 15 14 17 16
  29++D0E7              ; OUTPUT
  30++D0E7              ;  XX16(1 0)   ( 3 2) ( 5 4 ) =  sidev_x roofv_x nosev_x
  31++D0E7              ;  XX16(7 6)   ( 8 9) (11 10) =  sidev_y roofv_y nosev_y
  32++D0E7              ;  XX16(13 12) (15 14)(17 16) =  sidev_z roofv_z nosev_z
  33++D0E7              ; First all side values become compoment 0 of each vector
  34++D0E7 2A 3E C0             ld      hl,(UBnkTransmatSidevX)     ;
  35++D0EA ED 5B 44 C0          ld      de,(UBnkTransmatRoofvX)     ;
  36++D0EE ED 4B 4A C0          ld      bc,(UBnkTransmatNosevX)     ;
  37++D0F2 22 56 C0             ld      (UbnkTransInvRow0x0),hl     ;
  38++D0F5 ED 53 58 C0          ld      (UbnkTransInvRow0x1),de     ;
  39++D0F9 ED 43 5A C0          ld      (UbnkTransInvRow0x2),bc     ;
  40++D0FD 2A 40 C0             ld      hl,(UBnkTransmatSidevY)     ;
  41++D100 ED 5B 46 C0          ld      de,(UBnkTransmatRoofvY)     ;
  42++D104 ED 4B 4C C0          ld      bc,(UBnkTransmatNosevY)     ;
  43++D108 22 5E C0             ld      (UbnkTransInvRow1y0),hl     ;
  44++D10B ED 53 60 C0          ld      (UbnkTransInvRow1y1),de     ;
  45++D10F ED 43 62 C0          ld      (UbnkTransInvRow1y2),bc     ;
  46++D113 2A 42 C0             ld      hl,(UBnkTransmatSidevZ)     ;
  47++D116 ED 5B 48 C0          ld      de,(UBnkTransmatRoofvZ)     ;
  48++D11A ED 4B 4E C0          ld      bc,(UBnkTransmatNosevZ)     ;
  49++D11E 22 66 C0             ld      (UbnkTransInvRow2z0),hl     ;
  50++D121 ED 53 68 C0          ld      (UbnkTransInvRow2z1),de     ;
  51++D125 ED 43 6A C0          ld      (UbnkTransInvRow2z2),bc     ;
  52++D129 C9                   ret
  53++D12A
  54++D12A
# file closed: ./Universe/Ships/InverseXX16.asm
 668+ D12A              ;--------------------------------------------------------------------------------------------------------
 669+ D12A              ;--------------------------------------------------------------------------------------------------------
 670+ D12A              ;   XX12(1 0) = [x y z] . sidev  = (dot_sidev_sign dot_sidev_lo)  = dot_sidev
 671+ D12A              ;   XX12(3 2) = [x y z] . roofv  = (dot_roofv_sign dot_roofv_lo)  = dot_roofv
 672+ D12A              ;   XX12(5 4) = [x y z] . nosev  = (dot_nosev_sign dot_nosev_lo)  = dot_nosev
 673+ D12A              ; Returns
 674+ D12A              ;
 675+ D12A              ;   XX12(1 0)            The dot product of [x y z] vector with the sidev (or _x)
 676+ D12A              ;                        vector, with the sign in XX12+1 and magnitude in XX12
 677+ D12A              ;
 678+ D12A              ;   XX12(3 2)            The dot product of [x y z] vector with the roofv (or _y)
 679+ D12A              ;                        vector, with the sign in XX12+3 and magnitude in XX12+2
 680+ D12A              ;
 681+ D12A              ;   XX12(5 4)            The dot product of [x y z] vector with the nosev (or _z)
 682+ D12A              ;                        vector, with the sign in XX12+5 and magnitude in XX12+4
 683+ D12A              XXCURRENTN0equN1byN2div256: MACRO param1, param2, param3
 684+ D12A ~                                    ld      c,0
 685+ D12A ~                                    ld      a,param3                      ;
 686+ D12A ~                                    bit     7,a
 687+ D12A ~                                    jr      z,.val2Pos
 688+ D12A ~            ;HandleSignebits
 689+ D12A ~                                    neg
 690+ D12A ~                                    ld      c,$80
 691+ D12A ~            .val2Pos:               ld      e,a                         ; use e as var Q = value of XX15 [n] lo
 692+ D12A ~                                    ld      a,param2                        ; A = XX16 element
 693+ D12A ~                                    bit     7,a
 694+ D12A ~                                    jr      z,.val1Pos
 695+ D12A ~            ;HandleSignebits
 696+ D12A ~                                    neg
 697+ D12A ~                                    ld      b,a
 698+ D12A ~                                    ld      a,c
 699+ D12A ~                                    xor     $80
 700+ D12A ~                                    ld      c,a
 701+ D12A ~                                    ld      a,b
 702+ D12A ~            .val1Pos:               ld      d,a
 703+ D12A ~            ;AequAmulQdiv256:
 704+ D12A ~                                    mul
 705+ D12A ~                                    ld      a,c
 706+ D12A ~                                    bit     7,a
 707+ D12A ~                                    ld      a,d                         ; we get only the high byte which is like doing a /256 if we think of a as low
 708+ D12A ~                                    jr      z,.resultPos
 709+ D12A ~                                    neg
 710+ D12A ~            .resultPos:             ld      (param1),a                      ; Q         ; result variable = XX16[n] * XX15[n]/256
 711+ D12A                                      ENDM
 712+ D12A
 713+ D12A
 714+ D12A               ; TESTEDOK
 715+ D12A              XX12DotOneRow:
 716+ D12A              XX12CalcX:              N0equN1byN2div256 varT, (hl), (UBnkXScaled)       ; T = (hl) * regXX15fx /256
 716+ D12A 3A 83 C0    >                        ld      a,(UBnkXScaled)                        ;
 716+ D12D 5F          >                        ld      e,a                         ; use e as var Q = value of XX15 [n] lo
 716+ D12E 7E          >                        ld      a,(hl)                        ; A = XX16 element
 716+ D12F 57          >                        ld      d,a
 716+ D130 ED 30       >                        mul
 716+ D132 7A          >                        ld      a,d                         ; we get only the high byte which is like doing a /256 if we think of a as low
 716+ D133 32 43 99    >                        ld      (varT),a                      ; Q         ; result variable = XX16[n] * XX15[n]/256
 717+ D136 23                                   inc     hl                                  ; move to sign byte
 718+ D137              XX12CalcXSign:          AequN1xorN2 UBnkXScaledSign,(hl)             ;
 718+ D137 3A 84 C0    >                        ld      a,(UBnkXScaledSign)
 718+ D13A AE          >                        xor     (hl)
 719+ D13B 32 29 99                             ld      (varS),a                            ; Set S to the sign of x_sign * sidev_x
 720+ D13E 23                                   inc     hl
 721+ D13F              XX12CalcY:              N0equN1byN2div256 varQ, (hl),(UBnkYScaled)       ; Q = XX16 * XX15 /256 using varQ to hold regXX15fx
 721+ D13F 3A 85 C0    >                        ld      a,(UBnkYScaled)                        ;
 721+ D142 5F          >                        ld      e,a                         ; use e as var Q = value of XX15 [n] lo
 721+ D143 7E          >                        ld      a,(hl)                        ; A = XX16 element
 721+ D144 57          >                        ld      d,a
 721+ D145 ED 30       >                        mul
 721+ D147 7A          >                        ld      a,d                         ; we get only the high byte which is like doing a /256 if we think of a as low
 721+ D148 32 27 99    >                        ld      (varQ),a                      ; Q         ; result variable = XX16[n] * XX15[n]/256
 722+ D14B                                      ldCopyByte varT,varR                        ; R = T =  |sidev_x| * x_lo / 256
 722+ D14B 3A 43 99    >                        ld       a,(varT)
 722+ D14E 32 28 99    >                        ld       (varR),a
 723+ D151 23                                   inc     hl
 724+ D152                                      AequN1xorN2 UBnkYScaledSign,(hl)             ; Set A to the sign of y_sign * sidev_y
 724+ D152 3A 86 C0    >                        ld      a,(UBnkYScaledSign)
 724+ D155 AE          >                        xor     (hl)
 725+ D156              ; (S)A = |sidev_x| * x_lo / 256  = |sidev_x| * x_lo + |sidev_y| * y_lo
 726+ D156 E5           STequSRplusAQ           push    hl
 727+ D157 CD 9C B0                             call    baddll38                            ; JSR &4812 \ LL38   \ BADD(S)A=R+Q(SA) \ 1byte add (subtract)
 728+ D15A E1                                   pop     hl
 729+ D15B 32 43 99                             ld      (varT),a                            ; T = |sidev_x| * x_lo + |sidev_y| * y_lo
 730+ D15E 23                                   inc     hl
 731+ D15F              XX12CalcZ:              N0equN1byN2div256 varQ,(hl),(UBnkZScaled)       ; Q = |sidev_z| * z_lo / 256
 731+ D15F 3A 87 C0    >                        ld      a,(UBnkZScaled)                        ;
 731+ D162 5F          >                        ld      e,a                         ; use e as var Q = value of XX15 [n] lo
 731+ D163 7E          >                        ld      a,(hl)                        ; A = XX16 element
 731+ D164 57          >                        ld      d,a
 731+ D165 ED 30       >                        mul
 731+ D167 7A          >                        ld      a,d                         ; we get only the high byte which is like doing a /256 if we think of a as low
 731+ D168 32 27 99    >                        ld      (varQ),a                      ; Q         ; result variable = XX16[n] * XX15[n]/256
 732+ D16B                                      ldCopyByte varT,varR                        ; R = |sidev_x| * x_lo + |sidev_y| * y_lo
 732+ D16B 3A 43 99    >                        ld       a,(varT)
 732+ D16E 32 28 99    >                        ld       (varR),a
 733+ D171 23                                   inc     hl
 734+ D172                                      AequN1xorN2 UBnkZScaledSign,(hl)             ; A = sign of z_sign * sidev_z
 734+ D172 3A 88 C0    >                        ld      a,(UBnkZScaledSign)
 734+ D175 AE          >                        xor     (hl)
 735+ D176              ; (S)A= |sidev_x| * x_lo + |sidev_y| * y_lo + |sidev_z| * z_lo
 736+ D176 CD 9C B0                             call    baddll38                            ; JSR &4812 \ LL38   \ BADD(S)A=R+Q(SA)   \ 1byte add (subtract)
 737+ D179              ; Now we exit with A = result S = Sign
 738+ D179 C9                                   ret
 739+ D17A
 740+ D17A
 741+ D17A              ;-- LL51---------------------------------------------------------------------------------------------------------------------------
 742+ D17A              ;TESTED OK
 743+ D17A              XX12EquXX15DotProductXX16:
 744+ D17A              XX12EquScaleDotOrientation:                         ; .LL51 \ -> &4832 \ XX12=XX15.XX16  each vector is 16-bit x,y,z
 745+ D17A 01 00 00                             ld      bc,0                                ; LDX, LDY 0
 746+ D17D 21 3E C0                             ld      hl,UBnkTransmatSidevX
 747+ D180 CD 2A D1                             call    XX12DotOneRow
 748+ D183 32 89 C0                             ld      (UBnkXX12xLo),a
 749+ D186 3A 29 99                             ld      a,(varS)
 750+ D189 32 8A C0                             ld      (UBnkXX12xSign),a
 751+ D18C 21 44 C0                             ld      hl,UBnkTransmatRoofvX
 752+ D18F CD 2A D1                             call    XX12DotOneRow
 753+ D192 32 8B C0                             ld      (UBnkXX12yLo),a
 754+ D195 3A 29 99                             ld      a,(varS)
 755+ D198 32 8C C0                             ld      (UBnkXX12ySign),a
 756+ D19B 21 4A C0                             ld      hl,UBnkTransmatNosevX
 757+ D19E CD 2A D1                             call    XX12DotOneRow
 758+ D1A1 32 8D C0                             ld      (UBnkXX12zLo),a
 759+ D1A4 3A 29 99                             ld      a,(varS)
 760+ D1A7 32 8E C0                             ld      (UBnkXX12zSign),a
 761+ D1AA C9                                   ret
 762+ D1AB              ;--------------------------------------------------------------------------------------------------------
 763+ D1AB                                      include "./Universe/Ships/CopyXX12ScaledToXX18.asm"
# file opened: ././Universe/Ships/CopyXX12ScaledToXX18.asm
   1++D1AB              CopyXX12ScaledToXX18:
   2++D1AB              CopyResultToDrawCam:
   3++D1AB                      ldCopyByte XX12         ,XX18             ; XX12+0 => XX18+0  Set XX18(2 0) = dot_sidev
   3++D1AB 3A 89 C0    >                        ld       a,(XX12)
   3++D1AE 32 77 C0    >                        ld       (XX18),a
   4++D1B1                      ldCopyByte XX12+1       ,XX18+2           ; XX12+1 => XX18+2
   4++D1B1 3A 8A C0    >                        ld       a,(XX12+1)
   4++D1B4 32 79 C0    >                        ld       (XX18+2),a
   5++D1B7                      ldCopyByte XX12+2       ,XX18+3           ; XX12+2 => XX18+3  Set XX12+1 => XX18+2
   5++D1B7 3A 8B C0    >                        ld       a,(XX12+2)
   5++D1BA 32 7A C0    >                        ld       (XX18+3),a
   6++D1BD                      ldCopyByte XX12+3       ,XX18+5           ; XX12+3 => XX18+5
   6++D1BD 3A 8C C0    >                        ld       a,(XX12+3)
   6++D1C0 32 7C C0    >                        ld       (XX18+5),a
   7++D1C3                      ldCopyByte XX12+4       ,XX18+6           ; XX12+4 => XX18+6  Set XX18(8 6) = dot_nosev
   7++D1C3 3A 8D C0    >                        ld       a,(XX12+4)
   7++D1C6 32 7D C0    >                        ld       (XX18+6),a
   8++D1C9                      ldCopyByte XX12+5       ,XX18+8           ; XX12+5 => XX18+8
   8++D1C9 3A 8E C0    >                        ld       a,(XX12+5)
   8++D1CC 32 7F C0    >                        ld       (XX18+8),a
   9++D1CF C9                   ret
  10++D1D0
# file closed: ././Universe/Ships/CopyXX12ScaledToXX18.asm
 764+ D1D0                                      include "./Universe/Ships/CopyXX12toXX15.asm"
# file opened: ././Universe/Ships/CopyXX12toXX15.asm
   1++D1D0              CopyXX12toXX15:         ldCopyByte  UBnkXX12xLo     ,UBnkXScaled        ; xlo
   1++D1D0 3A 89 C0    >                        ld       a,(UBnkXX12xLo)
   1++D1D3 32 83 C0    >                        ld       (UBnkXScaled),a
   2++D1D6                                      ldCopyByte  UBnkXX12xSign   ,UBnkXScaledSign    ; xsg
   2++D1D6 3A 8A C0    >                        ld       a,(UBnkXX12xSign)
   2++D1D9 32 84 C0    >                        ld       (UBnkXScaledSign),a
   3++D1DC                                      ldCopyByte  UBnkXX12yLo     ,UBnkYScaled        ; xlo
   3++D1DC 3A 8B C0    >                        ld       a,(UBnkXX12yLo)
   3++D1DF 32 85 C0    >                        ld       (UBnkYScaled),a
   4++D1E2                                      ldCopyByte  UBnkXX12ySign   ,UBnkYScaledSign    ; xsg
   4++D1E2 3A 8C C0    >                        ld       a,(UBnkXX12ySign)
   4++D1E5 32 86 C0    >                        ld       (UBnkYScaledSign),a
   5++D1E8                                      ldCopyByte  UBnkXX12zLo     ,UBnkZScaled        ; xlo
   5++D1E8 3A 8D C0    >                        ld       a,(UBnkXX12zLo)
   5++D1EB 32 87 C0    >                        ld       (UBnkZScaled),a
   6++D1EE                                      ldCopyByte  UBnkXX12zSign   ,UBnkZScaledSign    ; xsg
   6++D1EE 3A 8E C0    >                        ld       a,(UBnkXX12zSign)
   6++D1F1 32 88 C0    >                        ld       (UBnkZScaledSign),a
   7++D1F4 C9                                   ret
   8++D1F5
# file closed: ././Universe/Ships/CopyXX12toXX15.asm
 765+ D1F5                                      include "./Universe/Ships/CopyXX18toXX15.asm"
# file opened: ././Universe/Ships/CopyXX18toXX15.asm
   1++D1F5              CopyXX18toXX15:
   2++D1F5              CopyDrawCamToScaled:
   3++D1F5                      ldCopyByte  UBnkDrawCam0xLo ,UBnkXScaled        ; xlo
   3++D1F5 3A 77 C0    >                        ld       a,(UBnkDrawCam0xLo)
   3++D1F8 32 83 C0    >                        ld       (UBnkXScaled),a
   4++D1FB                      ldCopyByte  UBnkDrawCam0xSgn,UBnkXScaledSign    ; xsg
   4++D1FB 3A 79 C0    >                        ld       a,(UBnkDrawCam0xSgn)
   4++D1FE 32 84 C0    >                        ld       (UBnkXScaledSign),a
   5++D201                      ldCopyByte  UBnkDrawCam0yLo ,UBnkYScaled        ; xlo
   5++D201 3A 7A C0    >                        ld       a,(UBnkDrawCam0yLo)
   5++D204 32 85 C0    >                        ld       (UBnkYScaled),a
   6++D207                      ldCopyByte  UBnkDrawCam0ySgn,UBnkYScaledSign    ; xsg
   6++D207 3A 7C C0    >                        ld       a,(UBnkDrawCam0ySgn)
   6++D20A 32 86 C0    >                        ld       (UBnkYScaledSign),a
   7++D20D                      ldCopyByte  UBnkDrawCam0zLo ,UBnkZScaled        ; xlo
   7++D20D 3A 7D C0    >                        ld       a,(UBnkDrawCam0zLo)
   7++D210 32 87 C0    >                        ld       (UBnkZScaled),a
   8++D213                      ldCopyByte  UBnkDrawCam0zSgn,UBnkZScaledSign    ; xsg
   8++D213 3A 7F C0    >                        ld       a,(UBnkDrawCam0zSgn)
   8++D216 32 88 C0    >                        ld       (UBnkZScaledSign),a
   9++D219 C9                   ret
  10++D21A
# file closed: ././Universe/Ships/CopyXX18toXX15.asm
 766+ D21A                                      include "./Universe/Ships/CopyXX18ScaledToXX15.asm"
# file opened: ././Universe/Ships/CopyXX18ScaledToXX15.asm
   1++D21A 21 0C C0     LoadCraftToCamera:      ld      hl,UBnKxlo
   2++D21D 11 77 C0                             ld      de,UBnkDrawCam0xLo
   3++D220                                      NineLDIInstrunctions                ; transfer 9 bytes
   3++D220 ED A0       >		                ldi
   3++D222 ED A0       >		                ldi
   3++D224 ED A0       >		                ldi
   3++D226 ED A0       >		                ldi
   3++D228 ED A0       >		                ldi
   3++D22A ED A0       >		                ldi
   3++D22C ED A0       >		                ldi
   3++D22E ED A0       >		                ldi
   3++D230 ED A0       >		                ldi
   4++D232 C9                                   ret
   5++D233
   6++D233              CopyCameraToXX15Signed:
   7++D233 2A 77 C0             ld  hl,(UBnkDrawCam0xLo)
   8++D236 3A 79 C0             ld  a,(UBnkDrawCam0xSgn)
   9++D239 B4                   or  h
  10++D23A 67                   ld  h,a
  11++D23B 22 83 C0             ld  (UBnkXScaled),hl
  12++D23E 2A 7A C0             ld  hl,(UBnkDrawCam0yLo)
  13++D241 3A 7C C0             ld  a,(UBnkDrawCam0ySgn)
  14++D244 B4                   or  h
  15++D245 67                   ld  h,a
  16++D246 22 85 C0             ld  (UBnkYScaled),hl
  17++D249 2A 7D C0             ld  hl,(UBnkDrawCam0zLo)
  18++D24C 3A 7F C0             ld  a,(UBnkDrawCam0zSgn)
  19++D24F B4                   or  h
  20++D250 67                   ld  h,a
  21++D251 22 87 C0             ld  (UBnkZScaled),hl
  22++D254 C9                   ret
  23++D255
  24++D255              CopyXX18ScaledToXX15:
  25++D255              CopyDrawCamToScaledMatrix:
  26++D255                      ldCopyByte  UBnkDrawCam0zSgn, UBnkZScaledSign   ; XX18+8 => XX15+5
  26++D255 3A 7F C0    >                        ld       a,(UBnkDrawCam0zSgn)
  26++D258 32 88 C0    >                        ld       (UBnkZScaledSign),a
  27++D25B                      ldCopyByte  UBnkDrawCam0xLo,  UBnkXScaled       ; XX18+0 => XX15+0
  27++D25B 3A 77 C0    >                        ld       a,(UBnkDrawCam0xLo)
  27++D25E 32 83 C0    >                        ld       (UBnkXScaled),a
  28++D261                      ldCopyByte  UBnkDrawCam0xSgn, UBnkXScaledSign   ; XX18+2 => XX15+1
  28++D261 3A 79 C0    >                        ld       a,(UBnkDrawCam0xSgn)
  28++D264 32 84 C0    >                        ld       (UBnkXScaledSign),a
  29++D267                      ldCopyByte  UBnkDrawCam0yLo,  UBnkYScaled       ; XX18+3 => XX15+2
  29++D267 3A 7A C0    >                        ld       a,(UBnkDrawCam0yLo)
  29++D26A 32 85 C0    >                        ld       (UBnkYScaled),a
  30++D26D                      ldCopyByte  UBnkDrawCam0ySgn, UBnkYScaledSign   ; XX18+5 => XX15+3
  30++D26D 3A 7C C0    >                        ld       a,(UBnkDrawCam0ySgn)
  30++D270 32 86 C0    >                        ld       (UBnkYScaledSign),a
  31++D273                      ldCopyByte  UBnkDrawCam0zLo,  UBnkZScaled       ; XX18+6 => XX15+4
  31++D273 3A 7D C0    >                        ld       a,(UBnkDrawCam0zLo)
  31++D276 32 87 C0    >                        ld       (UBnkZScaled),a
  32++D279 C9                   ret
  33++D27A
  34++D27A              CopyXX15ToXX18Scaled:
  35++D27A              CopyScaledMatrixToDrawCam:
  36++D27A                      ldCopyByte UBnkZScaledSign,   UBnkDrawCam0zSgn  ; XX15+5 => XX18+8
  36++D27A 3A 88 C0    >                        ld       a,(UBnkZScaledSign)
  36++D27D 32 7F C0    >                        ld       (UBnkDrawCam0zSgn),a
  37++D280                      ldCopyByte UBnkXScaled,       UBnkDrawCam0xLo   ; XX15+0 => XX18+0
  37++D280 3A 83 C0    >                        ld       a,(UBnkXScaled)
  37++D283 32 77 C0    >                        ld       (UBnkDrawCam0xLo),a
  38++D286                      ldCopyByte UBnkXScaledSign,   UBnkDrawCam0xSgn  ; XX15+1 => XX18+2
  38++D286 3A 84 C0    >                        ld       a,(UBnkXScaledSign)
  38++D289 32 79 C0    >                        ld       (UBnkDrawCam0xSgn),a
  39++D28C                      ldCopyByte UBnkYScaled,       UBnkDrawCam0yLo   ; XX15+2 => XX18+3
  39++D28C 3A 85 C0    >                        ld       a,(UBnkYScaled)
  39++D28F 32 7A C0    >                        ld       (UBnkDrawCam0yLo),a
  40++D292                      ldCopyByte UBnkYScaledSign,   UBnkDrawCam0ySgn  ; XX15+3 => XX18+5
  40++D292 3A 86 C0    >                        ld       a,(UBnkYScaledSign)
  40++D295 32 7C C0    >                        ld       (UBnkDrawCam0ySgn),a
  41++D298                      ldCopyByte UBnkZScaled,       UBnkDrawCam0zLo   ; XX15+4 => XX18+6
  41++D298 3A 87 C0    >                        ld       a,(UBnkZScaled)
  41++D29B 32 7D C0    >                        ld       (UBnkDrawCam0zLo),a
  42++D29E C9                   ret
  43++D29F
  44++D29F
  45++D29F              XX15EquXX15AddXX18:
  46++D29F              LL94Z:
  47++D29F 26 00                ld      h,0                                                     ;           AddZ = FaceData (XX12)z +  ShipPos (XX18)z
  48++D2A1 16 00                ld      d,0                                                     ;
  49++D2A3 3A 87 C0             ld      a,(UBnkZScaled)                                         ;
  50++D2A6 6F                   ld      l,a                                                     ;
  51++D2A7 3A 88 C0             ld      a,(UBnkZScaledSign)                                     ;
  52++D2AA 47                   ld      b,a                                                     ;
  53++D2AB 3A 7D C0             ld      a,(UBnkDrawCam0zLo)                                     ;
  54++D2AE 5F                   ld      e,a                                                     ;
  55++D2AF 3A 7F C0             ld      a,(UBnkDrawCam0zSgn)                                    ;
  56++D2B2 4F                   ld      c,a                                                     ;
  57++D2B3 CD 7E AF             call    ADDHLDESignBC                                           ;
  58++D2B6 47                   ld      b,a                                                     ;
  59++D2B7 7C                   ld      a,h                                                     ;
  60++D2B8 78                   ld      a,b                                                     ;           else  Scaled (XX15) Z = AddZ
  61++D2B9 32 88 C0             ld      (UBnkZScaledSign),a                                     ;
  62++D2BC 7D                   ld      a,l                                                     ;
  63++D2BD 32 87 C0             ld      (UBnkZScaled),a                                         ;           endif
  64++D2C0              LL94X:
  65++D2C0 26 00                ld      h,0                                                     ;           AddZ = FaceData (XX12)z +  ShipPos (XX18)z
  66++D2C2 16 00                ld      d,0                                                     ;
  67++D2C4 3A 83 C0             ld      a,(UBnkXScaled)                                         ;
  68++D2C7 6F                   ld      l,a                                                     ;
  69++D2C8 3A 84 C0             ld      a,(UBnkXScaledSign)                                     ;
  70++D2CB 47                   ld      b,a                                                     ;
  71++D2CC 3A 77 C0             ld      a,(UBnkDrawCam0xLo)                                     ;
  72++D2CF 5F                   ld      e,a                                                     ;
  73++D2D0 3A 79 C0             ld      a,(UBnkDrawCam0xSgn)                                    ;
  74++D2D3 4F                   ld      c,a                                                     ;
  75++D2D4 CD 7E AF             call    ADDHLDESignBC                                           ;
  76++D2D7 47                   ld      b,a                                                     ;
  77++D2D8 7C                   ld      a,h                                                     ;
  78++D2D9 78                   ld      a,b                                                     ;           else  Scaled (XX15) Z = AddZ
  79++D2DA 32 84 C0             ld      (UBnkXScaledSign),a                                     ;
  80++D2DD 7D                   ld      a,l                                                     ;
  81++D2DE 32 83 C0             ld      (UBnkXScaled),a                                         ;           endif
  82++D2E1              LL94Y:
  83++D2E1 26 00                ld      h,0                                                     ;           AddZ = FaceData (XX12)z +  ShipPos (XX18)z
  84++D2E3 16 00                ld      d,0                                                     ;
  85++D2E5 3A 85 C0             ld      a,(UBnkYScaled)                                         ;
  86++D2E8 6F                   ld      l,a                                                     ;
  87++D2E9 3A 86 C0             ld      a,(UBnkYScaledSign)                                     ;
  88++D2EC 47                   ld      b,a                                                     ;
  89++D2ED 3A 7A C0             ld      a,(UBnkDrawCam0yLo)                                     ;
  90++D2F0 5F                   ld      e,a                                                     ;
  91++D2F1 3A 7C C0             ld      a,(UBnkDrawCam0ySgn)                                    ;
  92++D2F4 4F                   ld      c,a                                                     ;
  93++D2F5 CD 7E AF             call    ADDHLDESignBC                                           ;
  94++D2F8 47                   ld      b,a                                                     ;
  95++D2F9 7C                   ld      a,h                                                     ;
  96++D2FA 78                   ld      a,b                                                     ;           else  Scaled (XX15) Z = AddZ
  97++D2FB 32 86 C0             ld      (UBnkYScaledSign),a                                     ;
  98++D2FE 7D                   ld      a,l                                                     ;
  99++D2FF 32 85 C0             ld      (UBnkYScaled),a                                         ;
 100++D302 C9                   ret
 101++D303
# file closed: ././Universe/Ships/CopyXX18ScaledToXX15.asm
 767+ D303                                      include "./Universe/Ships/CopyXX12ToScaled.asm"
# file opened: ././Universe/Ships/CopyXX12ToScaled.asm
   1++D303              CopyXX12ToScaled:
   2++D303              CopyResultToScaled:
   3++D303                      ldCopyByte  XX12+0,UBnkXScaled      ; xnormal lo
   3++D303 3A 89 C0    >                        ld       a,(XX12+0)
   3++D306 32 83 C0    >                        ld       (UBnkXScaled),a
   4++D309                      ldCopyByte  XX12+2,UBnkYScaled      ; ynormal lo
   4++D309 3A 8B C0    >                        ld       a,(XX12+2)
   4++D30C 32 85 C0    >                        ld       (UBnkYScaled),a
   5++D30F                      ldCopyByte  XX12+4,UBnkZScaled      ; znormal lo and leaves a holding zscaled normal
   5++D30F 3A 8D C0    >                        ld       a,(XX12+4)
   5++D312 32 87 C0    >                        ld       (UBnkZScaled),a
   6++D315 C9                   ret
   7++D316
# file closed: ././Universe/Ships/CopyXX12ToScaled.asm
 768+ D316              ;--------------------------------------------------------------------------------------------------------
 769+ D316                                      include "./Maths/Utilities/DotProductXX12XX15.asm"
# file opened: ././Maths/Utilities/DotProductXX12XX15.asm
   1++D316              ;;; Q = XX12 xLo ,A = XX15 xLo
   2++D316              ;;; T = A * Q/256 Usgined  (FMLTU)
   3++D316              ;;; S = XX12 XSign Xor XX15 XSign
   4++D316              ;;; Q = XX12 Ynormal Lo, A = XX15+2 (y lo)
   5++D316              ;;; Q = A * Q/256 Usigned (FMLTI)
   6++D316              ;;; R = T
   7++D316              ;;; A = XX12+3 (ySign) Xor XX15+3 (ySign)
   8++D316              ;;; T = BADD s(A) = R + Q(SA) (xdot + ydot)
   9++D316              ;;; Q = XX12+4 (znormal lo) A = XX15+4 z lo
  10++D316              ;;; Q = A * Q /256 usigned (zdot)
  11++D316              ;;; R = T
  12++D316              ;;; A - XX15+ 5 Zsign Xor XX12+5 Z Sign
  13++D316
  14++D316
  15++D316
  16++D316
  17++D316
  18++D316              MacroAequDxEdiv256usgn:	MACRO
  19++D316 ~            						mul
  20++D316 ~            						ld	a,d				; we get only the high byte which is like doing a /256 if we think of a as low
  21++D316              						ENDM
  22++D316              DotProductXX12XX15:
  23++D316 3A 89 C0             ld          a,(UBnkXX12xLo)         ; Use e as var Q for xnormal lo
  24++D319                      JumpIfAIsZero dotxskipzero
  24++D319 A7          >                        and a   ; cp 0 - changed to and a for optimisation but affects other flags
  24++D31A CA 37 D3    >                        jp	z, dotxskipzero
  25++D31D 5F                   ld          e,a
  26++D31E 3A 83 C0             ld          a,(UBnkXScaled)         ; use d as XX12 world xform x, e = norm x
  27++D321 57                   ld          d,a                     ; de = xx12 x signed
  28++D322                      JumpIfAIsZero dotxskipzero
  28++D322 A7          >                        and a   ; cp 0 - changed to and a for optimisation but affects other flags
  28++D323 CA 37 D3    >                        jp	z, dotxskipzero
  29++D326 ED 30        		mul
  30++D328 42                   ld          b,d                     ; b = result
  31++D329 3A 8A C0             ld          a,(UBnkXX12xSign)
  32++D32C 21 84 C0             ld          hl,UBnkXScaledSign
  33++D32F AE                   xor         (hl)
  34++D330 E6 80                and         $80                     ; so sign bit only
  35++D332 FD 67                ld          iyh ,a                   ; we actually need to preserve sign in iyh here
  36++D334 C3 3B D3             jp          dotmuly
  37++D337              dotxskipzero:
  38++D337 AF                   xor         a
  39++D338 47                   ld          b,a
  40++D339 FD 67                ld          iyh,a
  41++D33B              dotmuly:
  42++D33B              ; now we have b = XX12 x &d  norm x signed
  43++D33B 3A 8B C0             ld          a,(UBnkXX12yLo)
  44++D33E                      JumpIfAIsZero dotyskipzero
  44++D33E A7          >                        and a   ; cp 0 - changed to and a for optimisation but affects other flags
  44++D33F CA 5E D3    >                        jp	z, dotyskipzero
  45++D342 5F                   ld          e,a
  46++D343 3A 85 C0             ld          a,(UBnkYScaled)         ; XX15+2
  47++D346                      JumpIfAIsZero dotyskipzero
  47++D346 A7          >                        and a   ; cp 0 - changed to and a for optimisation but affects other flags
  47++D347 CA 5E D3    >                        jp	z, dotyskipzero
  48++D34A 57                   ld          d,a                     ; de = xx12 x signed
  49++D34B ED 30                mul
  50++D34D 4A                   ld          c,d                     ; c = result
  51++D34E DD 69                ld          ixl,c
  52++D350 3A 8C C0             ld          a,(UBnkXX12ySign)       ; A = ysg
  53++D353 21 86 C0             ld          hl, UBnkYScaledSign     ; a= y sign XOR Y scaled sign
  54++D356 AE                   xor         (hl)                    ; XX15+3
  55++D357 E6 80                and         $80                     ; do b = x mul c = y mul, iyh = sign for b and a = sign for c
  56++D359 DD 67                ld          ixh,a
  57++D35B C3 62 D3             jp          dotaddxy
  58++D35E              dotyskipzero:
  59++D35E AF                   xor         a
  60++D35F 4F                   ld          c,a
  61++D360 DD 67                ld          ixh,a
  62++D362              dotaddxy:
  63++D362              ; Optimise later as this is 16 bit
  64++D362 26 00                ld          h,0                     ;
  65++D364 68                   ld          l,b                     ; hl = xlo + x scaled
  66++D365 16 00                ld          d,0                     ;
  67++D367 59                   ld          e,c                     ; de = ylo + yscaled
  68++D368 FD 44                ld          b,iyh                   ; b = sign of xlo + xscaled
  69++D36A 4F                   ld          c,a                     ; c = sign of ylo + yscaled
  70++D36B CD 7E AF             call ADDHLDESignBC                  ; so now hl = result so will push sign to h
  71++D36E 47                   ld          b,a                     ; b = resultant sign , hl = add so far
  72++D36F 3A 8D C0             ld          a,(UBnkXX12zLo)         ;
  73++D372                      JumpIfAIsZero dotzskipzero
  73++D372 A7          >                        and a   ; cp 0 - changed to and a for optimisation but affects other flags
  73++D373 CA 98 D3    >                        jp	z, dotzskipzero
  74++D376 5F                   ld          e,a                     ;
  75++D377 3A 87 C0             ld          a,(UBnkZScaled)         ;
  76++D37A                      JumpIfAIsZero dotzskipzero
  76++D37A A7          >                        and a   ; cp 0 - changed to and a for optimisation but affects other flags
  76++D37B CA 98 D3    >                        jp	z, dotzskipzero
  77++D37E 57                   ld          d,a
  78++D37F ED 30                mul
  79++D381 E5                   push        hl                      ; save prev result
  80++D382 3A 88 C0             ld          a,(UBnkZScaledSign)
  81++D385 21 8E C0             ld          hl, UBnkXX12zSign       ; XX15+5
  82++D388 AE                   xor         (hl)                    ; hi sign
  83++D389 E6 80                and         $80                     ; a = sign of multiply
  84++D38B 4F                   ld          c,a                     ; c = sign of z lo & z scaled
  85++D38C E1                   pop         hl
  86++D38D 5A                   ld          e,d
  87++D38E 16 00                ld          d,0
  88++D390 CD 7E AF             call ADDHLDESignBC
  89++D393 32 29 99             ld          (varS),a
  90++D396 7D                   ld          a,l
  91++D397 C9                   ret                                 ; returns with A = value, varS = sign
  92++D398              dotzskipzero:                               ; if we got here then z was zero so no component so just tidy up from last add
  93++D398 78                   ld          a,b
  94++D399 32 29 99             ld          (varS),a
  95++D39C 7D                   ld          a,l
  96++D39D C9                   ret
  97++D39E              ;;;;       DotProductXX12XX15:
  98++D39E              ;;;;       ld          a,(UBnkXX12xLo)         ; Use e as var Q for xnormal lo
  99++D39E              ;;;;       ld          e,a
 100++D39E              ;;;;       ld          a,(UBnkXScaled)         ; use d as XX12 world xform x, e = norm x
 101++D39E              ;;;;       ld          d,a                     ; de = xx12 x signed
 102++D39E              ;;;;		; FMLTU	\ A=A*Q/256unsg using D as A and E as Q
 103++D39E              ;;;;		mul
 104++D39E              ;;;;       ld          b,d                     ; b as var T
 105++D39E              ;;;;       ld          a,(UBnkXX12xSign)
 106++D39E              ;;;;       ld          hl,UBnkXScaledSign
 107++D39E              ;;;;       xor         (hl)
 108++D39E              ;;;;       and         $80                     ; so sign bit only
 109++D39E              ;;;;       ld          (varS),a                ; we did use c as S \ S	\ x-sign, but we actually need it in varS for BADD
 110++D39E              ;;;; now we have b = XX12 x & norm x signed
 111++D39E              ;;;; by here B = xlo & xscaled C = result sign
 112++D39E              ;;;;       ld          a,(UBnkXX12yLo)
 113++D39E              ;;;;       ld          e,a
 114++D39E              ;;;;       ld          a,(UBnkYScaled)         ; XX15+2
 115++D39E              ;;;;		ld          d,a						; MISSED THIS EARLIER BUG FIX
 116++D39E              ;;;;       mul
 117++D39E              ;;;;       ld          a,d
 118++D39E              ;;;;       ld          (varQ),a                ; Q = Y y-dot
 119++D39E              ;;;;       ld          a,b                     ; get back T from above held in b
 120++D39E              ;;;;       ld          (varR),a                ; R= b \ T	\ x-dot
 121++D39E              ;;;;       ld          a,(UBnkXX12ySign)       ; A = ysg
 122++D39E              ;;;;       ld          hl, UBnkYScaledSign     ; a= y sign XOR Y scaled sign
 123++D39E              ;;;;       xor         (hl)                    ; XX15+3
 124++D39E              ;;;;       and         $80
 125++D39E              ;;;;       call        baddll38                ; LL38	\ BADD(S)A=R+Q(SA)   \ 1byte add (subtract)
 126++D39E              ;;;;       ld          (varT),a                ; var T	\ xdot+ydot
 127++D39E              ;;;;       ld          a,(UBnkXX12zLo)         ; use d as  varQ        ; XX12+4	\ znormal lo to varQ
 128++D39E              ;;;;       ld          e,a                     ; use e as var Q
 129++D39E              ;;;;       ld          a,(UBnkZScaled)         ;
 130++D39E              ;;;;       ld          d,a
 131++D39E              ;;;;       mul
 132++D39E              ;;;;       ld          a,d
 133++D39E              ;;;;       ld          (varQ),a                ; Q	\ zdot
 134++D39E              ;;;;       ldCopyByte  varT,varR               ; copy T to R so R = resutl of previous calc
 135++D39E              ;;;;       ld          a,(UBnkZScaledSign)
 136++D39E              ;;;;       ld          hl, UBnkXX12zSign       ; XX15+5
 137++D39E              ;;;;       xor         (hl)                    ; hi sign
 138++D39E              ;;;;       and         $80
 139++D39E              ;;;;       call        baddll38                ; LL38	\ BADD(S)A=R+Q(SA)   \ 1byte add (subtract)
 140++D39E              ;;;;       ret                                 ; returns with A = value, varS = sign
 141++D39E
# file closed: ././Maths/Utilities/DotProductXX12XX15.asm
 770+ D39E              ;--------------------------------------------------------------------------------------------------------
 771+ D39E              ; scale Normal. IXL is xReg and A is loaded with XX17 holds the scale factor to apply
 772+ D39E                                      include "Universe/Ships/ScaleNormal.asm"
# file opened: ./Universe/Ships/ScaleNormal.asm
   1++D39E              ; scale Normal. IXL is xReg and A is loaded with XX17 holds the scale factor to apply
   2++D39E              ; returns with XX15 scaled by Q but also z scaled in a register
   3++D39E              ScaleNormal:
   4++D39E              LL93:
   5++D39E 3A 2E 99             ld      a,(XX17)                    ; scale--
   6++D3A1 DD 6F        		ld		ixl,a
   7++D3A3 3A 87 C0     		ld		a,(UBnkZScaled)				; needs to be in a just in case we abort early
   8++D3A6 DD 2D        		dec		ixl
   9++D3A8 F8           		ret		m							; return if q was 0, i.e. no scaling
  10++D3A9              ScaleLoop:
  11++D3A9              LL933:
  12++D3A9 21 83 C0             ld      hl,XX15
  13++D3AC CB 3E                srl     (hl)                        ; XX15	\ xnormal lo/2 \ LL93+3 \ counter X
  14++D3AE 23                   inc     hl							; looking at XX15 x sign now
  15++D3AF 23                   inc     hl							; looking at XX15 y Lo now
  16++D3B0 CB 3E                srl     (hl)                        ; XX15+2	\ ynormal lo/2
  17++D3B2 23           		inc		hl							; looking at XX15 y sign now
  18++D3B3 23           		inc		hl							; looking at XX15 z Lo now
  19++D3B4 CB 3E        		srl		(hl)
  20++D3B6 7E           		ld		a,(hl)						; znormal lo/2 also into a it came in at the end of LL92
  21++D3B7 DD 2D                dec     ixl                         ; reduce scale
  22++D3B9 F2 A9 D3             jp      p,ScaleLoop                 ; LL93-3 loop to lsr xx15
  23++D3BC C9                   ret
  24++D3BD
# file closed: ./Universe/Ships/ScaleNormal.asm
 773+ D3BD              ;--------------------------------------------------------------------------------------------------------
 774+ D3BD                                      include "./Universe/Ships/ScaleObjectDistance.asm"
# file opened: ././Universe/Ships/ScaleObjectDistance.asm
   1++D3BD              ScaleObjectDistance:
   2++D3BD              ; ">ScaleObjectDistance, scales camera location and returns c = scaling factor (equiv of X reg)"
   3++D3BD 3A 1E C3             ld      a,(QAddr)                   ; Hull byte #18 normals scaled by 2^Q% DtProd^XX2  their comment   Dot product gives  normals' visibility in XX2
   4++D3C0 4F                   ld      c,a                         ; c = Q factor for scaling of normals
   5++D3C1              LL90:                                       ; scaling object distance
   6++D3C1 3A 7E C0             ld      a,(UBnkDrawCam0zHi)         ; z_hi
   7++D3C4 47                   ld      b,a                         ; z_hi (yReg)
   8++D3C5                      ReturnIfAIsZero                     ; if zHi 0 test ifis object close/small, i.e. zhi already zero then we are done
   8++D3C5 A7          >                        and     a
   8++D3C6 C8          >                        ret     z
   9++D3C7              LL90Loop:
  10++D3C7              ; Loop dividing camera by 2 until zhi is 0 and updating scale factor
  11++D3C7 0C                   inc     c                           ; LL90+3 \ repeat INWK z brought closer, take Qscale X up
  12++D3C8                      ShiftMem16Right1 UBnkDrawCam0yLo    ; cam Y /= 2
  12++D3C8 2A 7A C0    >                    ld    hl,(UBnkDrawCam0yLo)
  12++D3CB CB 3C       >                    srl   h
  12++D3CD CB 1D       >                    rr    l
  12++D3CF 22 7A C0    >                    ld    (UBnkDrawCam0yLo),hl
  13++D3D2                      ShiftMem16Right1 UBnkDrawCam0xLo    ; cam X /= 2
  13++D3D2 2A 77 C0    >                    ld    hl,(UBnkDrawCam0xLo)
  13++D3D5 CB 3C       >                    srl   h
  13++D3D7 CB 1D       >                    rr    l
  13++D3D9 22 77 C0    >                    ld    (UBnkDrawCam0xLo),hl
  14++D3DC                      ShiftMem16Right1 UBnkDrawCam0zLo    ; cam Z /= 2
  14++D3DC 2A 7D C0    >                    ld    hl,(UBnkDrawCam0zLo)
  14++D3DF CB 3C       >                    srl   h
  14++D3E1 CB 1D       >                    rr    l
  14++D3E3 22 7D C0    >                    ld    (UBnkDrawCam0zLo),hl
  15++D3E6 7C                   ld      a,h                         ; last shift will result in zhi adjusted into h reg.
  16++D3E7                      JumpIfAIsNotZero LL90Loop           ; loop until z hi = 0 this gives scalinging in c
  16++D3E7 FE 00       >                        cp	0
  16++D3E9 C2 C7 D3    >                        jp	nz,LL90Loop
  17++D3EC C9                   ret
  18++D3ED
# file closed: ././Universe/Ships/ScaleObjectDistance.asm
 775+ D3ED              ;--------------------------------------------------------------------------------------------------------
 776+ D3ED
 777+ D3ED              ; Backface cull
 778+ D3ED              ; is the angle between the ship -> camera vector and the normal of the face as long as both are unit vectors soo we can check that normal z > 0
 779+ D3ED              ; normal vector = cross product of ship ccordinates
 780+ D3ED              ;
 781+ D3ED
 782+ D3ED                                      include "./Universe/Ships/CopyFaceToXX15.asm"
# file opened: ././Universe/Ships/CopyFaceToXX15.asm
   1++D3ED 7E           CopyFaceToXX15:         ld      a,(hl)                      ; get Normal byte 0                                                                    ;;;     if visibility (bits 4 to 0 of byte 0) > XX4
   2++D3EE 47                                   ld      b,a                                                    ;;;
   3++D3EF E6 80                                and     $80
   4++D3F1 32 84 C0                             ld      (UBnkXScaledSign),a           ; write Sign bits to x sign                                                            ;;;
   5++D3F4 78                                   ld      a,b
   6++D3F5 CB 27                                sla     a                           ; move y sign to bit 7                                                                 ;;;   copy sign bits to XX12
   7++D3F7 47                                   ld      b,a
   8++D3F8 E6 80                                and     $80
   9++D3FA 32 86 C0                             ld      (UBnkYScaledSign),a           ;                                                                                      ;;;
  10++D3FD 78                                   ld      a,b
  11++D3FE CB 27                                sla     a                           ; move y sign to bit 7                                                                 ;;;   copy sign bits to XX12
  12++D400 E6 80                                and     $80
  13++D402 32 88 C0                             ld      (UBnkZScaledSign),a           ;                                                                                      ;;;
  14++D405 23                                   inc     hl                          ; move to X ccord
  15++D406 7E                                   ld      a,(hl)                      ;                                                                                      ;;;   XX12 x,y,z lo = Normal[loop].x,y,z
  16++D407 32 83 C0                             ld      (UBnkXScaled),a                                                                                                    ;;;
  17++D40A 23                                   inc     hl                                                                                                                 ;;;
  18++D40B 7E                                   ld      a,(hl)                      ;                                                                                      ;;;
  19++D40C 32 85 C0                             ld      (UBnkYScaled),a                                                                                                    ;;;
  20++D40F 23                                   inc     hl                                                                                                                 ;;;
  21++D410 7E                                   ld      a,(hl)                      ;                                                                                      ;;;
  22++D411 32 87 C0                             ld      (UBnkZScaled),a
  23++D414 C9                                   ret
  24++D415
# file closed: ././Universe/Ships/CopyFaceToXX15.asm
 783+ D415                                      include "./Universe/Ships/CopyFaceToXX12.asm"
# file opened: ././Universe/Ships/CopyFaceToXX12.asm
   1++D415 7E           CopyFaceToXX12:         ld      a,(hl)                      ; get Normal byte 0                                                                    ;;;     if visibility (bits 4 to 0 of byte 0) > XX4
   2++D416 47                                   ld      b,a                         ; save sign bits to b
   3++D417 E6 80                                and     $80
   4++D419 32 8A C0                             ld      (UBnkXX12xSign),a           ; write Sign bits to x sign                                                            ;;;
   5++D41C 78                                   ld      a,b
   6++D41D CB 27                                sla     a                           ; move y sign to bit 7                                                                 ;;;   copy sign bits to XX12
   7++D41F 47                                   ld      b,a
   8++D420 E6 80                                and     $80
   9++D422 32 8C C0                             ld      (UBnkXX12ySign),a           ;                                                                                      ;;;
  10++D425 78                                   ld      a,b
  11++D426 CB 27                                sla     a                           ; move y sign to bit 7                                                                 ;;;   copy sign bits to XX12
  12++D428 E6 80                                and     $80
  13++D42A 32 8E C0                             ld      (UBnkXX12zSign),a           ;                                                                                      ;;;
  14++D42D 23                                   inc     hl                          ; move to X ccord
  15++D42E 7E                                   ld      a,(hl)                      ;                                                                                      ;;;   XX12 x,y,z lo = Normal[loop].x,y,z
  16++D42F 32 89 C0                             ld      (UBnkXX12xLo),a                                                                                                    ;;;
  17++D432 23                                   inc     hl                                                                                                                 ;;;
  18++D433 7E                                   ld      a,(hl)                      ;                                                                                      ;;;
  19++D434 32 8B C0                             ld      (UBnkXX12yLo),a                                                                                                    ;;;
  20++D437 23                                   inc     hl                                                                                                                 ;;;
  21++D438 7E                                   ld      a,(hl)                      ;                                                                                      ;;;
  22++D439 32 8D C0                             ld      (UBnkXX12zLo),a
  23++D43C C9                                   ret
  24++D43D
# file closed: ././Universe/Ships/CopyFaceToXX12.asm
 784+ D43D              ;--------------------------------------------------------------
 785+ D43D              ; Original loginc in EE29 (LL9 4 of 12)
 786+ D43D              ; Enters with XX4 = z distnace scaled to 1 .. 31
 787+ D43D              ; get number of faces * 4      FaceCntX4
 788+ D43D              ; return if no faces
 789+ D43D              ; get Face Normal scale factor FaceScale (XX17)
 790+ D43D              ; get ship pos z hi     (XX18)
 791+ D43D              ; While Z hi <> 0
 792+ D43D              ;    FaceScale = FaceScale + 1           (XX17)
 793+ D43D              ;    Ship pos y = ship pos y / 2         (XX18)
 794+ D43D              ;    ship pos x = ship pos x / 2         (XX18)
 795+ D43D              ;    ship pos z = ship pos z / 2         (XX18)
 796+ D43D              ; Loop
 797+ D43D              ; Copy Ship Pos (XX18) to Scaled         (XX15)
 798+ D43D              ; Get Dot Product of Scaled (XX15) and XX16 (pre inverted) into XX12
 799+ D43D              ; Copy XX12 into XX18
 800+ D43D              ; For each face
 801+ D43D              ;     Get Face sign and visibility distance byte
 802+ D43D              ;     if normal visibility range  < XX4
 803+ D43D              ;        Get Face data into XX12
 804+ D43D              ;        if FaceScale (XX17) >= 4
 805+ D43D              ;            Copy Ship Pos (XX18) to scaled (XX15)                                                                  ::LL143
 806+ D43D              ;        else
 807+ D43D              ;           Copy FaceScale scaled to X  (XX17)
 808+ D43D              ;LabelOverflowLoop:
 809+ D43D              ;           Copy FaceData (XX12) to Scaled (XX15)                                                                   ::LL92
 810+ D43D              ;           While X >= 0
 811+ D43D              ;              X--                                                                                                  ::LL93
 812+ D43D              ;              if  x >= 0
 813+ D43D              ;                  XX15x = XX15x / 2
 814+ D43D              ;                  XX15y = XX15y / 2
 815+ D43D              ;                  XX15y = XX15y / 2
 816+ D43D              ;           loop
 817+ D43D              ;           AddZ = FaceData (XX12)z +  ShipPos (XX18)z                                                              ::LL94
 818+ D43D              ;           if A > 256 (i.e. was overflow)
 819+ D43D              ;               ShipPos (XX18)x,y & z = ShipPos(XX18)x,y & z / 2 (Divide each component by 2)
 820+ D43D              ;               X = 1
 821+ D43D              ;               Goto LabelOverflowLoop
 822+ D43D              ;           else
 823+ D43D              ;              Scaled (XX15) Z = AddZ
 824+ D43D              ;           endif
 825+ D43D              ;           AddX = FaceData (XX12)x +  ShipPos (XX18)x
 826+ D43D              ;           if A > 256 (i.e. was overflow)
 827+ D43D              ;               ShipPos (XX18)x,y & z = ShipPos(XX18)x,y & z / 2 (Divide each component by 2)
 828+ D43D              ;               X = 1
 829+ D43D              ;               Goto LabelOverflowLoop
 830+ D43D              ;           else
 831+ D43D              ;              Scaled (XX15) X = AddX
 832+ D43D              ;           endif
 833+ D43D              ;           AddY = FaceData (XX12)y +  ShipPos (XX18)y
 834+ D43D              ;           if A > 256 (i.e. was overflow)
 835+ D43D              ;               ShipPos (XX18)x,y & z = ShipPos(XX18)x,y & z / 2 (Divide each component by 2)
 836+ D43D              ;               X = 1
 837+ D43D              ;               Goto LabelOverflowLoop
 838+ D43D              ;           else
 839+ D43D              ;              Scaled (XX15) Y = AddY
 840+ D43D              ;           endif
 841+ D43D              ;        endif
 842+ D43D              ;        calculate dot product XX12.XX15  (XX15x * XX12x /256 + XX15y * XX12y /256 + XX15z * XX12z /256)        ::LL89
 843+ D43D              ;        if dot product < 0
 844+ D43D              ;           set face visible
 845+ D43D              ;        else
 846+ D43D              ;           set face invisible
 847+ D43D              ;        end if
 848+ D43D              ;     else
 849+ D43D              ;       Set FaceVisibility to true
 850+ D43D              ;     end if
 851+ D43D              ; Next Face
 852+ D43D
 853+ D43D DD 25        ScaleDownXX15byIXH:     dec     ixh
 854+ D43F F8                                   ret     m
 855+ D440 21 83 C0                             ld      hl,UBnkXScaled
 856+ D443 CB 3E                                srl     (hl)                        ; XX15  \ xnormal lo/2 \ LL93+3 \ counter X
 857+ D445 23                                   inc     hl                          ; looking at XX15 x sign now
 858+ D446 23                                   inc     hl                          ; looking at XX15 y Lo now
 859+ D447 CB 3E                                srl     (hl)                        ; XX15+2    \ ynormal lo/2
 860+ D449 23                                   inc     hl                          ; looking at XX15 y sign now
 861+ D44A 23                                   inc     hl                          ; looking at XX15 z Lo now
 862+ D44B CB 3E                                srl     (hl)
 863+ D44D C3 3D D4                             jp      ScaleDownXX15byIXH
 864+ D450 C9                                   ret
 865+ D451
 866+ D451 21 77 C0     DivideXX18By2:          ld      hl,UBnkDrawCam0xLo
 867+ D454 CB 3E                                srl     (hl)                        ; XX18  \ xnormal lo/2 \ LL93+3 \ counter X
 868+ D456 23                                   inc     hl                          ; looking at XX18 x sign now
 869+ D457 23                                   inc     hl                          ; looking at XX18 y Lo now
 870+ D458 CB 3E                                srl     (hl)                        ; XX18+2    \ ynormal lo/2
 871+ D45A 23                                   inc     hl                          ; looking at XX18 y sign now
 872+ D45B 23                                   inc     hl                          ; looking at XX18 z Lo now
 873+ D45C CB 3E                                srl     (hl)
 874+ D45E C9                                   ret
 875+ D45F
 876+ D45F              ;line of sight vector = [x y z] + face normal vector
 877+ D45F
 878+ D45F              ;               [ [x y z] . sidev + normal_x ]   [ normal_x ]
 879+ D45F              ;  visibility = [ [x y z] . roofv + normal_y ] . [ normal_y ]
 880+ D45F              ;               [ [x y z] . nosev + normal_z ]   [ normal_z ]
 881+ D45F              ;
 882+ D45F              ;--------------------------------------------------------------
 883+ D45F              ; line of sight (eye outwards dot face normal vector < 0
 884+ D45F              ; So lin eof sight = vector from 0,0,0 to ship pos, now we need to consider teh ship's facing
 885+ D45F              ; now if we add teh veector for teh normal(times magnitude)) to teh ship position we have the true center of the face
 886+ D45F              ; now we can calcualt teh dot product of this caulated vector and teh normal which if < 0 is goot. this means we use rot mat not inverted rotmat.
 887+ D45F
 888+ D45F              RotateXX15ByTransMatXX16:
 889+ D45F 21 3E C0                             ld      hl,UBnkTransmatSidevX               ; process orientation matrix row 0
 890+ D462 CD 63 90                             call    XX12ProcessOneRow
 891+ D465 47                                   ld      b,a                                 ; get
 892+ D466 7D                                   ld      a,l
 893+ D467 B0                                   or      b
 894+ D468 32 8A C0                             ld      (UBnkXX12xSign),a                   ; a = result with sign in bit 7
 895+ D46B 7D                                   ld      a,l
 896+ D46C 32 89 C0                             ld      (UBnkXX12xLo),a                     ; that is result done for
 897+ D46F
 898+ D46F 21 44 C0                             ld      hl,UBnkTransmatRoofvX               ; process orientation matrix row 0
 899+ D472 CD 63 90                             call    XX12ProcessOneRow
 900+ D475 47                                   ld      b,a                                 ; get
 901+ D476 7D                                   ld      a,l
 902+ D477 B0                                   or      b
 903+ D478 32 8C C0                             ld      (UBnkXX12ySign),a                   ; a = result with sign in bit 7
 904+ D47B 7D                                   ld      a,l
 905+ D47C 32 8B C0                             ld      (UBnkXX12yLo),a                     ; that is result done for
 906+ D47F
 907+ D47F 21 4A C0                             ld      hl,UBnkTransmatNosevX               ; process orientation matrix row 0
 908+ D482 CD 63 90                             call    XX12ProcessOneRow
 909+ D485 47                                   ld      b,a                                 ; get
 910+ D486 7D                                   ld      a,l
 911+ D487 B0                                   or      b
 912+ D488 32 8E C0                             ld      (UBnkXX12zSign),a                   ; a = result with sign in bit 7
 913+ D48B 7D                                   ld      a,l
 914+ D48C 32 8D C0                             ld      (UBnkXX12zLo),a                     ; that is result done for
 915+ D48F C9                                   ret
 916+ D490
 917+ D490                  include "./ModelRender/BackfaceCull.asm"
# file opened: ././ModelRender/BackfaceCull.asm
   1++D490 00           CurrentNormIdx  DB 0
   2++D491              ; SomeFacesVisible:
   3++D491              ; EE29:
   4++D491
   5++D491              ;   Backface cull logic  line of sight vector . face normal vector
   6++D491              ;       line of sight vector . face normal vector
   7++D491              ;       => line of sight vector = [x y z] + face normal vector
   8++D491              ;       Where [x y z] =
   9++D491              ;                                               [ [x y z] . sidev ]
  10++D491              ;                    projected [x y z] vector = [ [x y z] . roofv ]
  11++D491              ;                                               [ [x y z] . nosev ]
  12++D491              ;
  13++D491              ;   so project the [x y z] vector into the face's normal space
  14++D491              ;  line of sight vector = projected [x y z] vector + face normal vector
  15++D491              ;                         [ [x y z] . sidev ]   [ normal_x ]
  16++D491              ;                       = [ [x y z] . roofv ] + [ normal_y ]
  17++D491              ;                         [ [x y z] . nosev ]   [ normal_z ]
  18++D491              ;
  19++D491              ;                         [ [x y z] . sidev + normal_x ]
  20++D491              ;                       = [ [x y z] . roofv + normal_y ]
  21++D491              ;                         [ [x y z] . nosev + normal_z ]
  22++D491              ;
  23++D491              ; so
  24++D491              ;              visibility = [ [x y z] . sidev + normal_x ]   [ normal_x ]
  25++D491              ;                            [ [x y z] . roofv + normal_y ] . [ normal_y ]
  26++D491              ;                           [ [x y z] . nosev + normal_z ]   [ normal_z ]
  27++D491              ;
  28++D491              ; where face is visible if visibility < 0
  29++D491              ;
  30++D491              ;   so we set XX15 to [x y z] . sidev
  31++D491              ;                     [x y z] . roofv
  32++D491              ;                     [x y z] . nosev
  33++D491              ;
  34++D491
  35++D491
  36++D491
  37++D491 3A 7E C0     ScaleDrawcam:           ld      a,(UBnkDrawCam0zHi)         ; if z hi is 0 then we have scaled XX18
  38++D494                                      JumpIfAIsZero .ScaleDone            ;
  38++D494 A7          >                        and a   ; cp 0 - changed to and a for optimisation but affects other flags
  38++D495 CA C2 D4    >                        jp	z, .ScaleDone
  39++D498 2A 77 C0                             ld      hl,(UBnkDrawCam0xLo)        ; pull postition into registers
  40++D49B ED 5B 7A C0                          ld      de,(UBnkDrawCam0yLo)        ; we only pull in if needed to save fetches
  41++D49F ED 4B 7D C0                          ld      bc,(UBnkDrawCam0zLo)        ;
  42++D4A3 FD 2C        .ScaleNormalLoop:       inc     iyl                         ; Q goes up by one
  43++D4A5                                      ShiftHLRight1                       ; divide cam position by 2
  43++D4A5 CB 3C       >			   srl h
  43++D4A7 CB 1D       >			   rr  l
  44++D4A9                                      ShiftDERight1                       ;
  44++D4A9 CB 3A       >			   srl d
  44++D4AB CB 1B       >			   rr  e
  45++D4AD                                      ShiftBCRight1                       ;
  45++D4AD CB 38       >			   srl b
  45++D4AF CB 19       >			   rr  c
  46++D4B1 78                                   ld      a,b                         ; loop if not scaled down
  47++D4B2                                      JumpIfAIsNotZero .ScaleNormalLoop     ;
  47++D4B2 FE 00       >                        cp	0
  47++D4B4 C2 A3 D4    >                        jp	nz,.ScaleNormalLoop
  48++D4B7 22 77 C0                             ld      (UBnkDrawCam0xLo),hl        ; save position back to XX18
  49++D4BA ED 53 7A C0                          ld      (UBnkDrawCam0yLo),de        ;
  50++D4BE ED 43 7D C0                          ld      (UBnkDrawCam0zLo),bc        ;
  51++D4C2 FD 7D        .ScaleDone:             ld      a,iyl
  52++D4C4 32 2E 99                             ld      (varXX17),a                  ; XX17 = normal scale factor for current ship adjusted for camera
  53++D4C7 C9                                   ret
  54++D4C8
  55++D4C8              ;;--BackFaceCull:
  56++D4C8              ;;--;debug:jp debug
  57++D4C8              ;;--; DEBUG  force for now
  58++D4C8              ;;--;                        ld     a,MaxVisibility                 ; max visibility                                               ;;;; default max visibility
  59++D4C8              ;;--;                        ld     (LastNormalVisible),a           ; XX4                                                          ;;;;
  60++D4C8              ;;--;
  61++D4C8              ;;--; DEBUG
  62++D4C8              ;;--                         ReturnIfMemisZero FaceCtX4Addr      ; get number of faces * 4      FaceCntX4 &  return if no faces
  63++D4C8              ;;--                       ; break
  64++D4C8              ;;--                        call    CopyRotmatToTransMat             ;#01; Load to Rotation Matrix to XX16, 16th bit is sign bit
  65++D4C8              ;;--                        call    ScaleXX16Matrix197               ;#02; Normalise XX16
  66++D4C8              ;;--                        call    LoadCraftToCamera                ;#04; Load Ship Coords to XX18
  67++D4C8              ;;--                        call    InverseXX16                      ;#11; Invert rotation matrix
  68++D4C8              ;;--
  69++D4C8              ;;--.BackfaceLoop:          ld      a,(QAddr)                   ; a = ship normal scale factor
  70++D4C8              ;;--                        ld      iyl,a                       ; iyl = scale factor
  71++D4C8              ;;--; By this point XX18 = scaled draw cam and iyl = scale factor
  72++D4C8              ;;--                        call    ScaleDrawcam
  73++D4C8              ;;--                        call    CopyDrawCamToScaled
  74++D4C8              ;;--.LL91:                  call    XX12EquNodeDotOrientation  ; xx12 = xx15 . XX16
  75++D4C8              ;;--                        call    CopyXX12ScaledToXX18        ; now xx18 = xx15.xx16
  76++D4C8              ;;--.PrepNormals:           ld      hl,UBnkHullNormals                                                                                                 ;;; V = address of Normal start
  77++D4C8              ;;--                        ld      (varV),hl
  78++D4C8              ;;--                        ld      a,(FaceCtX4Addr)                                        ; For each face
  79++D4C8              ;;--                        srl     a                                                       ;
  80++D4C8              ;;--                        srl     a                                                       ;
  81++D4C8              ;;--                        ld      b,a                                                     ;
  82++D4C8              ;;--                        xor     a
  83++D4C8              ;;--                        ld      (CurrentNormIdx),a                                                   ; used to increment up face incdex as b decrements
  84++D4C8              ;;--ProcessNormalsLoop:     push    hl
  85++D4C8              ;;--                        push    bc
  86++D4C8              ;;--                        ld      a,(hl)                                                  ;     Get Face sign and visibility distance byte
  87++D4C8              ;;--                        and     $1F                                                     ;     if normal visibility range  < XX4
  88++D4C8              ;;--                        ;JumpIfAGTENusng c,FaceVisible                                   ; commented out for debuggging the skip
  89++D4C8              ;;--.LL86:                  jp  .LL87 ; force testing of normals
  90++D4C8              ;;--                        jp      .FaceVisible
  91++D4C8              ;;--; This bit needs to be added to force face visible
  92++D4C8              ;;--.LL87:                  call    CopyFaceToXX12
  93++D4C8              ;;--                        ld      a,(XX17)
  94++D4C8              ;;--                        JumpIfALTNusng 4,.LL92
  95++D4C8              ;;--.LL143:                 call    CopyXX18toXX15
  96++D4C8              ;;--                        jp      .LL89
  97++D4C8              ;;--.Ovflw:                 ld      a,(XX18)
  98++D4C8              ;;--                        srl     a
  99++D4C8              ;;--                        ld      (XX18),a
 100++D4C8              ;;--                        ld      a,(XX18+6)
 101++D4C8              ;;--                        srl     a
 102++D4C8              ;;--                        ld      (XX18+6),a
 103++D4C8              ;;--                        ld      a,(XX18+3)
 104++D4C8              ;;--                        srl     a
 105++D4C8              ;;--                        ld      (XX18+3),a
 106++D4C8              ;;--                        ld      a,1                        ; set scale to 1 so when we fall through into LL92, we divide the normal vector by 2 as well
 107++D4C8              ;;--.LL92:                   ld      b,a
 108++D4C8              ;;--                        ldCopyByte  XX12,   UBnkXScaled
 109++D4C8              ;;--                        ldCopyByte  XX12+2, UBnkYScaled
 110++D4C8              ;;--                        ldCopyByte  XX12+4, UBnkZScaled
 111++D4C8              ;;--.LL93                   dec     b
 112++D4C8              ;;--                        jp      m, .LL94
 113++D4C8              ;;--.LL93Loop:              ShiftMem8Right1 UBnkXScaled
 114++D4C8              ;;--                        ShiftMem8Right1 UBnkYScaled
 115++D4C8              ;;--                        ShiftMem8Right1 UBnkZScaled
 116++D4C8              ;;--                        dec     b
 117++D4C8              ;;--                        jp      p,.LL93Loop
 118++D4C8              ;;--; Add normal to XX15
 119++D4C8              ;;--.LL94:                  ldCopyByte  UBnkZScaled,     varR
 120++D4C8              ;;--                        ldCopyByte  UBnkYScaled,     varS
 121++D4C8              ;;--                        ldCopyByte  UBnkDrawCam0zLo, varQ
 122++D4C8              ;;--                        ld      a,(XX18+8)
 123++D4C8              ;;--                        call    SAEquSRPlusAQ
 124++D4C8              ;;--                        jp      c,.Ovflw
 125++D4C8              ;;--                        ld      (UBnkZScaled),a
 126++D4C8              ;;--                        ldCopyByte  varS,            UBnkZScaledSign
 127++D4C8              ;;--                        ldCopyByte  UBnkXScaled,     varR
 128++D4C8              ;;--                        ldCopyByte  UBnkXScaledSign, varS
 129++D4C8              ;;--                        ldCopyByte  UBnkDrawCam0xLo, varQ
 130++D4C8              ;;--                        ld      a,(UBnkDrawCam0xSgn)
 131++D4C8              ;;--                        call    SAEquSRPlusAQ
 132++D4C8              ;;--                        jp      c,.Ovflw
 133++D4C8              ;;--                        ld      (UBnkXScaled),a
 134++D4C8              ;;--                        ldCopyByte  varS,            UBnkXScaledSign
 135++D4C8              ;;--                        ldCopyByte  UBnkYScaled,     varR
 136++D4C8              ;;--                        ldCopyByte  UBnkYScaledSign, varS
 137++D4C8              ;;--                        ld      a,(UBnkDrawCam0ySgn)
 138++D4C8              ;;--                        call    SAEquSRPlusAQ
 139++D4C8              ;;--                        jp      c,.Ovflw
 140++D4C8              ;;--                        ld      (UBnkYScaled),a
 141++D4C8              ;;--                        ldCopyByte   varS, UBnkYScaledSign
 142++D4C8              ;;--; calculate dot product:
 143++D4C8              ;;--.LL89:                  ldCopyByte  UBnkXX12xLo, varQ
 144++D4C8              ;;--                        ld      a,(UBnkXScaled)
 145++D4C8              ;;--                        call    AequAmulQdiv256
 146++D4C8              ;;--                        ld      (varT),a
 147++D4C8              ;;--                        ld      a,(UBnkXX12xSign)
 148++D4C8              ;;--                        ld      hl,UBnkXScaledSign
 149++D4C8              ;;--                        xor     (hl)
 150++D4C8              ;;--                        ld      (varS),a
 151++D4C8              ;;--                        ldCopyByte  UBnkXX12yLo, varQ
 152++D4C8              ;;--                        ld      a,(UBnkYScaled)
 153++D4C8              ;;--                        call    AequAmulQdiv256
 154++D4C8              ;;--                        ld      (varQ),a
 155++D4C8              ;;--                        ldCopyByte  varT,varR
 156++D4C8              ;;--                        ld      a,  (UBnkXX12ySign)
 157++D4C8              ;;--                        ld      hl, UBnkYScaledSign
 158++D4C8              ;;--                        xor     (hl)
 159++D4C8              ;;--                        call    SAEquSRPlusAQ
 160++D4C8              ;;--                        ld      (varT),a
 161++D4C8              ;;--                        ldCopyByte  UBnkXX12zLo, varQ
 162++D4C8              ;;--                        ld      a,  (UBnkZScaled)
 163++D4C8              ;;--                        call    AequAmulQdiv256
 164++D4C8              ;;--                        ld      (varQ),a
 165++D4C8              ;;--                        ldCopyByte  varT, varR
 166++D4C8              ;;--                        ld      a,  (UBnkZScaledSign)
 167++D4C8              ;;--                        ld      hl, UBnkXX12zSign
 168++D4C8              ;;--                        xor     (hl)
 169++D4C8              ;;--                        call    SAEquSRPlusAQ           ; now A = dot product
 170++D4C8              ;;--                        test    $80
 171++D4C8              ;;--                        jr      nz,.FaceVisible                                      ;        if dot product < 0 set face visible
 172++D4C8              ;;--.FaceNotVisible:         ld          a,(CurrentNormIdx)
 173++D4C8              ;;--                        call        SetFaceAHidden                                      ;           set face invisible
 174++D4C8              ;;--                        jp          ProcessNormalLoopEnd                                ;        end if
 175++D4C8              ;;--.FaceVisible:            ld          a,(CurrentNormIdx)
 176++D4C8              ;;--                        call        SetFaceAVisible
 177++D4C8              ;;--ProcessNormalLoopEnd:   ld          hl, CurrentNormIdx
 178++D4C8              ;;--                        inc         (hl)                    ; move index pointer up by one
 179++D4C8              ;;--                        pop         bc
 180++D4C8              ;;--                        pop         hl                      ; get normal data pointer back
 181++D4C8              ;;--                        ld          a,4
 182++D4C8              ;;--                        add         hl,a                    ; move to next normal entry
 183++D4C8              ;;--                        ld          (varV),hl               ; save as we need it again
 184++D4C8              ;;--                        dec         b
 185++D4C8              ;;--                        jp          nz,ProcessNormalsLoop
 186++D4C8              ;;--                        ret
 187++D4C8
 188++D4C8
 189++D4C8
 190++D4C8
 191++D4C8              ;;;;;                        call    CopyFaceToXX15                                          ;        Get Face data into XX12
 192++D4C8              ;;;;;                        ld      a,(UBnkXScaledSign)
 193++D4C8              ;;;;;                        call    XX12EquNodeDotOrientation
 194++D4C8              ;;;;;                        ld      a,(UBnkXX12zSign)
 195++D4C8              ;;;;;                        test    $80
 196++D4C8              ;;;;;                        jp      nz, FaceVisible
 197++D4C8              ;;;;;.BackfaceLoop:          ld      a,(QAddr)                   ; a = ship normal scale factor
 198++D4C8              ;;;;;                        ld      iyl,a                       ; iyl = scale factor
 199++D4C8              ;;;;;.ScaleNormal:           ld      a,(UBnkDrawCam0zHi)         ; if z hi is 0 then we have scaled XX18
 200++D4C8              ;;;;;                        JumpIfAIsZero .ScaleDone            ;
 201++D4C8              ;;;;;                        ld      hl,(UBnkDrawCam0xLo)        ; pull postition into registers
 202++D4C8              ;;;;;                        ld      de,(UBnkDrawCam0yLo)        ; we only pull in if needed to save fetches
 203++D4C8              ;;;;;                        ld      bc,(UBnkDrawCam0zLo)        ;
 204++D4C8              ;;;;;.ScaleNormalLoop:       inc     iyl                         ; Q goes up by one
 205++D4C8              ;;;;;                        ShiftHLRight1                       ; divide cam position by 2
 206++D4C8              ;;;;;                        ShiftDERight1                       ;
 207++D4C8              ;;;;;                        ShiftBCRight1                       ;
 208++D4C8              ;;;;;                        ld      a,b                         ; loop if not scaled down
 209++D4C8              ;;;;;                        JumpIfAIsNotZero .ScaleNormalLoop     ;
 210++D4C8              ;;;;;                        ld      (UBnkDrawCam0xLo),hl        ; save position back to XX18
 211++D4C8              ;;;;;                        ld      (UBnkDrawCam0yLo),de        ;
 212++D4C8              ;;;;;                        ld      (UBnkDrawCam0zLo),bc        ;
 213++D4C8              ;;;;;; By this point XX18 = scaled draw cam and iyl = scale factor
 214++D4C8              ;;;;;.ScaleDone:             ld      a,iyl
 215++D4C8              ;;;;;                        ld      (varXX17),a                  ; XX17 = normal scale factor for current ship adjusted for camera
 216++D4C8              ;;;;;    call    CopyRotmatToTransMat             ;#01; Load to Rotation Matrix to XX16, 16th bit is sign bit
 217++D4C8              ;;;;;    call    ScaleXX16Matrix197               ;#02; Normalise XX16
 218++D4C8              ;;;;;;    call    LoadCraftToCamera                ;#04; Load Ship Coords to XX18
 219++D4C8              ;;;;;    call    InverseXX16                      ;#11; Invert rotation matrix
 220++D4C8              ;;;;;
 221++D4C8              ;;;;;
 222++D4C8              ;;;;;
 223++D4C8              ;;;;;                        call    CopyXX18toXX15              ; copy DrawCam to Xx15
 224++D4C8              ;;;;;                        call    XX12EquNodeDotOrientation   ; Xx12 = XX15 (face normal) dot rotation matrix
 225++D4C8              ;;;;;                        call    CopyXX12ScaledToXX18              ; now XX18 = dot product
 226++D4C8              ;;;;;.ProcessNormals:        ld      hl,UBnkHullNormals                                                                                                 ;;; V = address of Normal start
 227++D4C8              ;;;;;                        ld      (varV),hl
 228++D4C8              ;;;;;                        ld      a,(FaceCtX4Addr)                                        ; For each face
 229++D4C8              ;;;;;                        srl     a                                                       ;
 230++D4C8              ;;;;;                        srl     a                                                       ;
 231++D4C8              ;;;;;                        ld      b,a                                                     ;
 232++D4C8              ;;;;;                        xor     a
 233++D4C8              ;;;;;                        ld      (CurrentNormIdx),a                                                   ; used to increment up face incdex as b decrements
 234++D4C8              ;;;;;.ProcessNormalsLoop:    push    hl
 235++D4C8              ;;;;;                        push    bc
 236++D4C8              ;;;;;                        ld      a,(hl)                                                  ;     Get Face sign and visibility distance byte
 237++D4C8              ;;;;;                        and     $1F                                                     ;     if normal visibility range  < XX4
 238++D4C8              ;;;;;                        ;JumpIfAGTENusng c,FaceVisible                                   ; commented out for debuggging the skip
 239++D4C8              ;;;;;.CheckFaceVisibility:   call    CopyFaceToXX12              ; Get Face data into XX12
 240++D4C8              ;;;;;                        ld      a,(varXX17)                  ; if scale factor < 4 then skip next bit
 241++D4C8              ;;;;;                        JumpIfALTNusng 4,.LL92
 242++D4C8              ;;;;;.LargeScaleFactor:      call    CopyXX18toXX15
 243++D4C8              ;;;;;                        jp      .LL89
 244++D4C8              ;;;;;.Ovflw:                 ld      a,(XX18)
 245++D4C8              ;;;;;                        srl     a
 246++D4C8              ;;;;;                        ld      (XX18),a
 247++D4C8              ;;;;;                        ld      a,(XX18+6)
 248++D4C8              ;;;;;                        srl     a
 249++D4C8              ;;;;;                        ld      (XX18+6),a
 250++D4C8              ;;;;;                        ld      a,(XX18+3)
 251++D4C8              ;;;;;                        srl     a
 252++D4C8              ;;;;;                        ld      (XX18+3),a
 253++D4C8              ;;;;;                        ld      a,1                        ; set scale to 1 so when we fall through into LL92, we divide the normal vector by 2 as well
 254++D4C8              ;;;;;.LL92:                  ld      b,a
 255++D4C8              ;;;;;                        ldCopyByte  XX12,   UBnkXScaled
 256++D4C8              ;;;;;                        ldCopyByte  XX12+2, UBnkYScaled
 257++D4C8              ;;;;;                        ldCopyByte  XX12+4, UBnkZScaled
 258++D4C8              ;;;;;.LL93                   dec     b
 259++D4C8              ;;;;;                        jp      m, .LL94
 260++D4C8              ;;;;;.LL93Loop:              ShiftMem8Right1 UBnkXScaled
 261++D4C8              ;;;;;                        ShiftMem8Right1 UBnkYScaled
 262++D4C8              ;;;;;                        ShiftMem8Right1 UBnkZScaled
 263++D4C8              ;;;;;                        dec     b
 264++D4C8              ;;;;;                        jp      p,.LL93Loop
 265++D4C8              ;;;;;.LL94:                  ldCopyByte  UBnkZScaled,     varR
 266++D4C8              ;;;;;                        ldCopyByte  UBnkYScaled,     varS
 267++D4C8              ;;;;;                        ldCopyByte  UBnkDrawCam0zLo, varQ
 268++D4C8              ;;;;;                        ld      a,(XX18+8)
 269++D4C8              ;;;;;                        call    SAEquSRPlusAQ
 270++D4C8              ;;;;;                        jp      c,.Ovflw
 271++D4C8              ;;;;;                        ld      (UBnkZScaled),a
 272++D4C8              ;;;;;                        ldCopyByte  varS,            UBnkZScaledSign
 273++D4C8              ;;;;;                        ldCopyByte  UBnkXScaled,     varR
 274++D4C8              ;;;;;                        ldCopyByte  UBnkXScaledSign, varS
 275++D4C8              ;;;;;                        ldCopyByte  UBnkDrawCam0xLo, varQ
 276++D4C8              ;;;;;                        ld      a,(UBnkDrawCam0xSgn)
 277++D4C8              ;;;;;                        call    SAEquSRPlusAQ
 278++D4C8              ;;;;;                        jp      c,.Ovflw
 279++D4C8              ;;;;;                        ld      (UBnkXScaled),a
 280++D4C8              ;;;;;                        ldCopyByte  varS,            UBnkXScaledSign
 281++D4C8              ;;;;;                        ldCopyByte  UBnkYScaled,     varR
 282++D4C8              ;;;;;                        ldCopyByte  UBnkYScaledSign, varS
 283++D4C8              ;;;;;                        ld      a,(UBnkDrawCam0ySgn)
 284++D4C8              ;;;;;                        call    SAEquSRPlusAQ
 285++D4C8              ;;;;;                        jp      c,.Ovflw
 286++D4C8              ;;;;;                        ld      (UBnkYScaled),a
 287++D4C8              ;;;;;                        ldCopyByte   varS, UBnkYScaledSign
 288++D4C8              ;;;;;.LL89:                  ldCopyByte  UBnkXX12xLo, varQ
 289++D4C8              ;;;;;                        ld      a,(UBnkXScaled)
 290++D4C8              ;;;;;                        call    AequAmulQdiv256
 291++D4C8              ;;;;;                        ld      (varT),a
 292++D4C8              ;;;;;                        ld      a,(UBnkXX12xSign)
 293++D4C8              ;;;;;                        ld      hl,UBnkXScaledSign
 294++D4C8              ;;;;;                        xor     (hl)
 295++D4C8              ;;;;;                        ld      (varS),a
 296++D4C8              ;;;;;                        ldCopyByte  UBnkXX12yLo, varQ
 297++D4C8              ;;;;;                        ld      a,(UBnkYScaled)
 298++D4C8              ;;;;;                        call    AequAmulQdiv256
 299++D4C8              ;;;;;                        ld      (varQ),a
 300++D4C8              ;;;;;                        ldCopyByte  varT,varR
 301++D4C8              ;;;;;                        ld      a,  (UBnkXX12ySign)
 302++D4C8              ;;;;;                        ld      hl, UBnkYScaledSign
 303++D4C8              ;;;;;                        xor     (hl)
 304++D4C8              ;;;;;                        call    SAEquSRPlusAQ
 305++D4C8              ;;;;;                        ld      (varT),a
 306++D4C8              ;;;;;                        ldCopyByte  UBnkXX12zLo, varQ
 307++D4C8              ;;;;;                        ld      a,  (UBnkZScaled)
 308++D4C8              ;;;;;                        call    AequAmulQdiv256
 309++D4C8              ;;;;;                        ld      (varQ),a
 310++D4C8              ;;;;;                        ldCopyByte  varT, varR
 311++D4C8              ;;;;;                        ld      a,  (UBnkZScaledSign)
 312++D4C8              ;;;;;                        ld      hl, UBnkXX12zSign
 313++D4C8              ;;;;;                        xor     (hl)
 314++D4C8              ;;;;;                        call    SAEquSRPlusAQ           ; now A = dot product
 315++D4C8              ;;;;;                        test    $80
 316++D4C8              ;;;;;                        jr      nz,.FaceVisible
 317++D4C8              ;;;;;.FaceNotVisible:        ld      a,(CurrentNormIdx)
 318++D4C8              ;;;;;                        call    SetFaceAHidden                                      ;           set face invisible
 319++D4C8              ;;;;;                        jp      .ProcessNormalLoopEnd                                ;        end if
 320++D4C8              ;;;;;.FaceVisible:           ld      a,(CurrentNormIdx)
 321++D4C8              ;;;;;                        call    SetFaceAVisible
 322++D4C8              ;;;;;.ProcessNormalLoopEnd:   ld      hl, CurrentNormIdx
 323++D4C8              ;;;;;                        inc         (hl)                    ; move index pointer up by one
 324++D4C8              ;;;;;                        pop         bc
 325++D4C8              ;;;;;                        pop         hl                      ; get normal data pointer back
 326++D4C8              ;;;;;                        ld          a,4
 327++D4C8              ;;;;;                        add         hl,a                    ; move to next normal entry
 328++D4C8              ;;;;;                        ld          (varV),hl               ; save as we need it again
 329++D4C8              ;;;;;                        dec         b
 330++D4C8              ;;;;;                        jp          nz,.ProcessNormalsLoop
 331++D4C8              ;;;;;                        ret                                 ; If Y >= XX20 all normals' visibilities set, onto Transpose. return
 332++D4C8              ;;;;;
 333++D4C8
 334++D4C8
 335++D4C8
 336++D4C8 3A 14 C0     CheckDistance:          ld      a,(UBnKzsgn)                 ; Is the ship behind us
 337++D4CB E6 80        .CheckBehind:           and     SignOnly8Bit                 ; which means z sign is negative
 338++D4CD 20 3E                                jr      nz,.ShipNoDraw               ; .
 339++D4CF 2A 12 C0     .CheckViewPort:         ld      hl,(UBnKzlo)                 ; now check to see if its within 90 degree arc
 340++D4D2 7C                                   ld      a,h
 341++D4D3                                      JumpIfAGTENusng ShipMaxDistance, .ShipNoDraw
 341++D4D3 FE C0       >                        cp     ShipMaxDistance
 341++D4D5 D2 0D D5    >                        jp		nc,.ShipNoDraw
 342++D4D8 ED 5B 0C C0  .CheckXAxis:            ld      de,(UBnKxlo)                 ; if abs x > abx z then its out side of view port
 343++D4DC CD 35 AD                             call    compare16HLDE
 344++D4DF 38 2C                                jr      c,.ShipNoDraw               ; ship is too far out on the X Axis
 345++D4E1 ED 5B 0F C0  .CheckYAxis:            ld      de,(UBnKylo)                ; if abs y > abx z then its out side of view port
 346++D4E5 CD 35 AD                             call    compare16HLDE
 347++D4E8 38 23                                jr      c,.ShipNoDraw               ; ship is too far out on the X Axis
 348++D4EA              .CalculateXX4:          ShiftHLRight1                       ; hl = z pos / 8
 348++D4EA CB 3C       >			   srl h
 348++D4EC CB 1D       >			   rr  l
 349++D4EE                                      ShiftHLRight1                       ; .
 349++D4EE CB 3C       >			   srl h
 349++D4F0 CB 1D       >			   rr  l
 350++D4F2                                      ShiftHLRight1                       ; .
 350++D4F2 CB 3C       >			   srl h
 350++D4F4 CB 1D       >			   rr  l
 351++D4F6 7C                                   ld      a,h
 352++D4F7 CB 3F                                srl     a                           ; if a / 16 <> 0 then ship is a dot
 353++D4F9              .DrawAsDotCheck:        JumpIfNotZero   .ShipIsADot
 353++D4F9 C2 0F D5    >                        jp	nz,.ShipIsADot
 354++D4FC                                      ; Check visbility distance
 355++D4FC              .SetXX4Dist:            ;break
 356++D4FC 7D                                   ld      a,l
 357++D4FD 1F                                   rra                                 ; l may have had bit 0 of h carried in
 358++D4FE CB 3F                                srl     a                           ; so move it to bit 4 giving A as distance $000xxxxx
 359++D500 CB 3F                                srl     a
 360++D502 CB 3F                                srl     a
 361++D504 32 36 C0                             ld      (UBnkDrawAllFaces),a        ; XX4 = "all faces" distance
 362++D507                                      SetATrue
 362++D507 AF          >                        xor     a
 363++D508 32 9C C0                             ld      (UBnKDrawAsDot),a           ; set draw as dot to 0, i.e. false
 364++D50B                                      ClearCarryFlag
 364++D50B B7          >                        or a
 365++D50C C9                                   ret
 366++D50D              .ShipNoDraw:            SetCarryFlag                        ; ship is behind so do not draw, so we don't care abour draw as dot
 366++D50D 37          >                        scf
 367++D50E C9                                   ret
 368++D50F              .ShipIsADot:            SetMemFalse UBnKDrawAsDot           ; use the same logic as process nodes to do 1 point
 368++D50F 3E FF       >                        ld      a,$FF
 368++D511 32 9C C0    >                        ld      (UBnKDrawAsDot),a
 369++D514                                      ClearCarryFlag
 369++D514 B7          >                        or a
 370++D515 C9                                   ret
 371++D516
 372++D516
 373++D516              ; TODO remove all teh processing of rotmat to load craft to camera as its already been done
 374++D516              CullV2:                 ReturnIfMemisZero FaceCtX4Addr      ;
 374++D516 3A 18 C3    >                        ld   a,(FaceCtX4Addr)
 374++D519 A7          >                        and a
 374++D51A C8          >                        ret    z
 375++D51B                                     ; break
 376++D51B CD 64 CF                             call    CopyRotmatToTransMat        ; XX16 = UBNKRotMat
 377++D51E CD F7 91                             call    ScaleXX16Matrix197          ; scale rotation matrix in XX16
 378++D521 CD 1A D2                             call    LoadCraftToCamera           ; XX18 = camera
 379++D524                                      ;call    CopyCameraToXX15Signed      ; Copy the camera to XX15 as signed 15 bit
 380++D524 3A 1E C3     .BackfaceLoop:          ld      a,(QAddr)                   ;
 381++D527 FD 6F                                ld      iyl,a                       ; iyl = scale factor
 382++D529              ; By this point XX18 = scaled draw cam and iyl = scale factor
 383++D529 CD 91 D4                             call    ScaleDrawcam                ; XX18 = scaled camera XX17 = scale
 384++D52C CD 33 D2                             call    CopyCameraToXX15Signed      ; Xx18 -> xx15 sign + 15 bit
 385++D52F CD 4E 91     .LL91:                  call    XX12EquNodeDotXX16          ; xx12 = Scaled Camera . Rotation matrix (Note Xx16 no Xx16 inv)
 386++D532 CD AB D1                             call    CopyXX12ScaledToXX18        ; now xx18 = XX12 = xx15.xx16
 387++D535 21 01 C9     .PrepNormals:           ld      hl,UBnkHullNormals                                                                                                 ;;; V = address of Normal start
 388++D538 22 29 98                             ld      (varV),hl
 389++D53B 3A 18 C3                             ld      a,(FaceCtX4Addr)                                        ; For each face
 390++D53E CB 3F                                srl     a                                              ;
 391++D540 CB 3F                                srl     a                                              ;
 392++D542 47                                   ld      b,a                                            ;
 393++D543 AF                                   xor     a
 394++D544 32 90 D4                             ld      (CurrentNormIdx),a                                          ; used to increment up face incdex as b decrements
 395++D547 E5           .ProcessNormalsLoop:    push    hl
 396++D548 C5                                   push    bc
 397++D549 7E           .LL86:                  ld      a,(hl)                                         ; Get Face sign and visibility distance byte
 398++D54A E6 1F                                and     $1F                                            ; if normal visibility range  < XX4
 399++D54C E5                                   push    hl
 400++D54D 21 36 C0                             ld      hl,UBnkDrawAllFaces
 401++D550 BE                                   cp      (hl)
 402++D551 E1                                   pop     hl
 403++D552 DA 97 D6                             jp      c,.FaceVisible              ; then we always draw
 404++D555              ; This bit needs to be added to force face visible
 405++D555 CD 15 D4     .LL87:                  call    CopyFaceToXX12              ; XX12 = normal (repolaced scale version) as a working copy
 406++D558 3A 2E 99                             ld      a,(XX17)                    ; a = q scale XX17 cauclated by the call to ScaleDrawcam
 407++D55B 47                                   ld      b,a
 408++D55C                                      JumpIfALTNusng 4,.ScaleNormByXX17   ; if q >= 4 then is so big we don;t factor in + normal for dot product
 408++D55C FE 04       >                        cp      4
 408++D55E DA 99 D5    >                        jp		c, .ScaleNormByXX17
 409++D561 CD F5 D1     .LL143:                 call    CopyXX18toXX15              ; and we just set XX15 = scaled Camera dot rotation matrix
 410++D564 C3 28 D6                             jp      .DoneScalingIntoXX15        ; Now Process XX12 normal
 411++D567 3A 77 C0     .Ovflw:                 ld      a,(UBnkDrawCam0xLo)         ; divide camera by 2 if overflow
 412++D56A CB 3F                                srl     a                           ; which is held in XX18
 413++D56C 32 77 C0                             ld      (UBnkDrawCam0xLo),a         ; .
 414++D56F 3A 7D C0                             ld      a,(UBnkDrawCam0zLo)         ; .
 415++D572 CB 3F                                srl     a                           ; .
 416++D574 32 7D C0                             ld      (UBnkDrawCam0zLo),a         ; .
 417++D577 3A 7A C0                             ld      a,(UBnkDrawCam0yLo)         ; .
 418++D57A CB 3F                                srl     a                           ; .
 419++D57C 32 7A C0                             ld      (UBnkDrawCam0yLo),a        ; .
 420++D57F 06 01        .ScaleXScaledAgain:     ld      b,1                         ; set scale to 1 so we divide original normal by 2 into face and try again and hope we didn't scaled down XX12 earlier so if we did then we must be in the do doo as the object was obscenely large and very close
 421++D581                                      ShiftMem8Right1 UBnkXScaled         ; Divide XX15 by 2^B
 421++D581 3A 83 C0    >                    ld      a,(UBnkXScaled)
 421++D584 CB 3F       >                    srl     a
 421++D586 32 83 C0    >                    ld      (UBnkXScaled),a
 422++D589                                      ShiftMem8Right1 UBnkYScaled         ;
 422++D589 3A 85 C0    >                    ld      a,(UBnkYScaled)
 422++D58C CB 3F       >                    srl     a
 422++D58E 32 85 C0    >                    ld      (UBnkYScaled),a
 423++D591                                      ShiftMem8Right1 UBnkZScaled         ;
 423++D591 3A 87 C0    >                    ld      a,(UBnkZScaled)
 423++D594 CB 3F       >                    srl     a
 423++D596 32 87 C0    >                    ld      (UBnkZScaled),a
 424++D599              ; if we jumped to here scale factor < 4 so we copy in normal to XX15 (scaled) LL92
 425++D599              .ScaleNormByXX17:       ;ld      b,a
 426++D599 CD D0 D1                             call    CopyXX12toXX15
 427++D59C 05           .LL93                   dec     b
 428++D59D FA BC D5                             jp      m, .ScaledNorm
 429++D5A0              .LL93Loop:              ShiftMem8Right1 UBnkXScaled        ; Divide XX15 by 2^B, I think this should be really XX12 and is a bug in the original code
 429++D5A0 3A 83 C0    >                    ld      a,(UBnkXScaled)
 429++D5A3 CB 3F       >                    srl     a
 429++D5A5 32 83 C0    >                    ld      (UBnkXScaled),a
 430++D5A8                                      ShiftMem8Right1 UBnkYScaled        ;
 430++D5A8 3A 85 C0    >                    ld      a,(UBnkYScaled)
 430++D5AB CB 3F       >                    srl     a
 430++D5AD 32 85 C0    >                    ld      (UBnkYScaled),a
 431++D5B0                                      ShiftMem8Right1 UBnkZScaled        ;
 431++D5B0 3A 87 C0    >                    ld      a,(UBnkZScaled)
 431++D5B3 CB 3F       >                    srl     a
 431++D5B5 32 87 C0    >                    ld      (UBnkZScaled),a
 432++D5B8 05                                   dec     b                          ;
 433++D5B9 F2 A0 D5                             jp      p,.LL93Loop                ; Now we have XX15 as scaled Normal, XX15 as camera, don;t really knwo why as cals work on XX12 and XX18
 434++D5BC              .ScaledNorm:            ;ORIG CODE DOES NOT HAVE THIS call    CopyXX15ToXX12 ; DEBUG as XX15 shoudl be a sacled nromal
 435++D5BC              ; Add normal to XX15
 436++D5BC              ; if we jumped here direct from LL143 then XX15 = drawcam scaled by Q, XX12 = face normal unscaled, XX18 = drawcam scaled also
 437++D5BC              ; if we jumped here via scaling       then XX15 = normal scaled by Q,  XX12 = face normal unscaled, XX16 = drawcam scaled
 438++D5BC              ; if we hit an overflow               then XX15 = drawcam scaled by Q  XX12 = face normal unscaled, XX18 = (drawcam scaled / 2 ) / 2^ nbr overflows (if we cam in vai scaling then its a mess?
 439++D5BC              ; So LL94 is wrong as it shoud be operating on XX12 not XX15
 440++D5BC              .LL94:                  ldCopyByte UBnkZScaled, varR        ; ldCopyByte  UBnkZScaled,     varR  ; if we jumped direct XX15 = drawcam scaled, Xx12 = normal xx18 = drawcam
 440++D5BC 3A 87 C0    >                        ld       a,(UBnkZScaled)
 440++D5BF 32 28 99    >                        ld       (varR),a
 441++D5C2                                      ldCopyByte UBnkXX12zSign, varS      ; ldCopyByte  UBnkYScaled,     varS  ; if we did scaling then xx15 = norm scaled XX18 = drawcam
 441++D5C2 3A 8E C0    >                        ld       a,(UBnkXX12zSign)
 441++D5C5 32 29 99    >                        ld       (varS),a
 442++D5C8                                      ldCopyByte  UBnkDrawCam0zLo, varQ   ; AQ = drawcam Z signed
 442++D5C8 3A 7D C0    >                        ld       a,(UBnkDrawCam0zLo)
 442++D5CB 32 27 99    >                        ld       (varQ),a
 443++D5CE 3A 7F C0                             ld      a,(UBnkDrawCam0zSgn)        ; .
 444++D5D1 CD 9C B0                             call    SAEquSRPlusAQ               ; SA = drawcam Z dot + z
 445++D5D4 DA 67 D5                             jp      c,.Ovflw
 446++D5D7 32 87 C0                             ld      (UBnkZScaled),a             ; XX15Z = SA
 447++D5DA                                      ldCopyByte  varS, UBnkZScaledSign   ;
 447++D5DA 3A 29 99    >                        ld       a,(varS)
 447++D5DD 32 88 C0    >                        ld       (UBnkZScaledSign),a
 448++D5E0                                      ldCopyByte  UBnkXScaled,     varR   ; SR = normal X
 448++D5E0 3A 83 C0    >                        ld       a,(UBnkXScaled)
 448++D5E3 32 28 99    >                        ld       (varR),a
 449++D5E6                                      ldCopyByte  UBnkXX12xSign,   varS   ; .
 449++D5E6 3A 8A C0    >                        ld       a,(UBnkXX12xSign)
 449++D5E9 32 29 99    >                        ld       (varS),a
 450++D5EC                                      ldCopyByte  UBnkDrawCam0xLo, varQ   ; AQ = drawcam x dot
 450++D5EC 3A 77 C0    >                        ld       a,(UBnkDrawCam0xLo)
 450++D5EF 32 27 99    >                        ld       (varQ),a
 451++D5F2 3A 79 C0                             ld      a,(UBnkDrawCam0xSgn)        ; .
 452++D5F5 CD 9C B0                             call    SAEquSRPlusAQ               ; SA = normal x + drawcam x dot
 453++D5F8 DA 67 D5                             jp      c,.Ovflw
 454++D5FB 32 83 C0                             ld      (UBnkXScaled),a             ; XX15Z = SA
 455++D5FE                                      ldCopyByte  varS, UBnkXScaledSign   ; .
 455++D5FE 3A 29 99    >                        ld       a,(varS)
 455++D601 32 84 C0    >                        ld       (UBnkXScaledSign),a
 456++D604                                      ldCopyByte  UBnkYScaled, varR       ; SR = normal Y
 456++D604 3A 85 C0    >                        ld       a,(UBnkYScaled)
 456++D607 32 28 99    >                        ld       (varR),a
 457++D60A                                      ldCopyByte  UBnkXX12ySign, varS     ; .
 457++D60A 3A 8C C0    >                        ld       a,(UBnkXX12ySign)
 457++D60D 32 29 99    >                        ld       (varS),a
 458++D610                                      ldCopyByte  UBnkDrawCam0yLo, varQ   ; AQ = drawcam y dot
 458++D610 3A 7A C0    >                        ld       a,(UBnkDrawCam0yLo)
 458++D613 32 27 99    >                        ld       (varQ),a
 459++D616 3A 7C C0                             ld      a,(UBnkDrawCam0ySgn)        ; .
 460++D619 CD 9C B0                             call    SAEquSRPlusAQ               ; SA = normal y + drawcam y dot
 461++D61C DA 67 D5                             jp      c,.Ovflw                    ; .
 462++D61F 32 85 C0                             ld      (UBnkYScaled),a             ; XX15 Y = SA
 463++D622                                      ldCopyByte   varS, UBnkYScaledSign  ; .
 463++D622 3A 29 99    >                        ld       a,(varS)
 463++D625 32 86 C0    >                        ld       (UBnkYScaledSign),a
 464++D628              ; calculate dot product LL89
 465++D628              .DoneScalingIntoXX15:   ldCopyByte  UBnkXX12xLo, varQ       ; Q = norm X XX12
 465++D628 3A 89 C0    >                        ld       a,(UBnkXX12xLo)
 465++D62B 32 27 99    >                        ld       (varQ),a
 466++D62E 3A 83 C0                             ld      a,(UBnkXScaled)             ; A = XX15 X
 467++D631 CD 08 B0                             call    AequAmulQdiv256             ; A = XX15 X * XX 12 X
 468++D634 32 43 99                             ld      (varT),a                    ; T = XX15 X * XX 12 X
 469++D637 3A 8A C0                             ld      a,(UBnkXX12xSign)           ; S = sign of XX15 X * XX12 X
 470++D63A 21 84 C0                             ld      hl,UBnkXScaledSign          ; .
 471++D63D AE                                   xor     (hl)                        ; .
 472++D63E 32 29 99                             ld      (varS),a                    ; .
 473++D641                                      ldCopyByte  UBnkXX12yLo, varQ       ; Q = norm Y XX12
 473++D641 3A 8B C0    >                        ld       a,(UBnkXX12yLo)
 473++D644 32 27 99    >                        ld       (varQ),a
 474++D647 3A 85 C0                             ld      a,(UBnkYScaled)             ; A = XX15 Y
 475++D64A CD 08 B0                             call    AequAmulQdiv256             ; A = XX15 Y * XX 12 Y
 476++D64D 32 27 99                             ld      (varQ),a                    ; Q = XX15 Y * XX 12 Y
 477++D650                                      ldCopyByte  varT,varR               ; R = XX15 X * XX 12 X
 477++D650 3A 43 99    >                        ld       a,(varT)
 477++D653 32 28 99    >                        ld       (varR),a
 478++D656 3A 8C C0                             ld      a,  (UBnkXX12ySign)         ; A = sign of XX15 Y * XX 12 Y
 479++D659 21 86 C0                             ld      hl, UBnkYScaledSign         ; .
 480++D65C AE                                   xor     (hl)                        ; .
 481++D65D CD 9C B0                             call    SAEquSRPlusAQ               ; SA = SR+AQ = (X calc) + (Y calc)
 482++D660 32 43 99                             ld      (varT),a                    ; T = usigned (X calc) + (Y calc)
 483++D663                                      ldCopyByte  UBnkXX12zLo, varQ       ; Q = XX12 Z
 483++D663 3A 8D C0    >                        ld       a,(UBnkXX12zLo)
 483++D666 32 27 99    >                        ld       (varQ),a
 484++D669 3A 87 C0                             ld      a,  (UBnkZScaled)           ; A = XX15 Z
 485++D66C CD 08 B0                             call    AequAmulQdiv256             ; A = XX12 Z * XX15 Z
 486++D66F 32 27 99                             ld      (varQ),a                    ; Q = XX12 Z * XX15 Z
 487++D672                                      ldCopyByte  varT, varR              ; R = usigned (X calc) + (Y calc)
 487++D672 3A 43 99    >                        ld       a,(varT)
 487++D675 32 28 99    >                        ld       (varR),a
 488++D678 3A 88 C0                             ld      a,  (UBnkZScaledSign)       ; A = sign of XX12 Z * XX15 Z
 489++D67B 21 8E C0                             ld      hl, UBnkXX12zSign           ; .
 490++D67E AE                                   xor     (hl)                        ; .
 491++D67F CD 9C B0                             call    SAEquSRPlusAQ               ; SA = ((X+Y signed)) (Z signed)
 492++D682 FE 00                                cp      0                           ; was the result 0, if so then there are scenarios where SAEquSRPlusAQ can return -ve 0
 493++D684 28 08                                jr      z,.FaceNotVisible           ; in which case face is not visible
 494++D686 3A 29 99                             ld      a,(varS)                    ; if the cacl was a negative number then its visible
 495++D689 ED 27 80                             test    $80                         ; this should test S not A
 496++D68C 20 09                                jr      nz,.FaceVisible                                      ;        if dot product < 0 set face visible
 497++D68E 3A 90 D4     .FaceNotVisible:         ld          a,(CurrentNormIdx)
 498++D691 CD 78 D0                             call        SetFaceAHidden                                      ;           set face invisible
 499++D694 C3 9D D6                             jp          .ProcessNormalLoopEnd                                ;        end if
 500++D697 3A 90 D4     .FaceVisible:            ld          a,(CurrentNormIdx)
 501++D69A CD 6F D0                             call        SetFaceAVisible
 502++D69D 21 90 D4     .ProcessNormalLoopEnd:  ld          hl, CurrentNormIdx
 503++D6A0 34                                   inc         (hl)                    ; move index pointer up by one
 504++D6A1 C1                                   pop         bc
 505++D6A2 E1                                   pop         hl                      ; get normal data pointer back
 506++D6A3 3E 04                                ld          a,4
 507++D6A5 ED 31                                add         hl,a                    ; move to next normal entry
 508++D6A7 22 29 98                             ld          (varV),hl               ; save as we need it again
 509++D6AA 05                                   dec         b
 510++D6AB C2 47 D5                             jp          nz,.ProcessNormalsLoop
 511++D6AE C9                                   ret
 512++D6AF
# file closed: ././ModelRender/BackfaceCull.asm
 918+ D6AF              ;--------------------------------------------------------------------------------------------------------
 919+ D6AF              ; Process edges
 920+ D6AF              ; .....................................................
 921+ D6AF              TransposeNodeVal:   MACRO arg0?
 922+ D6AF ~                    ldCopyByte  UBnK\0sgn,Ubnk\1PointSign           ; UBnkXSgn => XX15+2 x sign
 923+ D6AF ~                    ld          bc,(UBnkXX12\0Lo)                   ; c = lo, b = sign   XX12XLoSign
 924+ D6AF ~                    xor         b                                   ; a = UBnkKxsgn (or XX15+2) here and b = XX12xsign,  XX12+1 \ rotated xnode h                                                                             ;;;           a = a XOR XX12+1                              XCALC
 925+ D6AF ~                    jp          m,NodeNegative\1                                                                                                                                                            ;;;           if sign is +ve                        ::LL52   XCALC
 926+ D6AF ~            ; XX15 [0,1] = INWK[0]+ XX12[0] + 256*INWK[1]                                                                                       ;;;          while any of x,y & z hi <> 0
 927+ D6AF ~            NodeXPositive\1
 927+ D6AF ~
 928+ D6AF ~                    ld          a,c                                 ; We picked up XX12+0 above in bc Xlo
 929+ D6AF ~                    ld          b,0                                 ; but only want to work on xlo                                                           ;;;              XX15xHiLo = XX12HiLo + xpos lo             XCALC
 930+ D6AF ~                    ld          hl,(UBnK\0lo)                       ; hl = XX1 UBNKxLo
 931+ D6AF ~                    ld          h,0                                 ; but we don;t want the sign
 932+ D6AF ~                    add         hl,bc                               ; its a 16 bit add
 933+ D6AF ~                    ld          (Ubnk\1Point),hl                    ; And written to XX15 0,1
 934+ D6AF ~                    xor         a                                   ; we want to write 0 as sign bit (not in original code)
 935+ D6AF ~                    ld          (UbnkXPointSign),a
 936+ D6AF ~                    jp          FinishedThisNode\1
 937+ D6AF ~            ; If we get here then _sign and vertv_ have different signs so do subtract
 938+ D6AF ~            NodeNegative\1
 938+ D6AF ~
 939+ D6AF ~            LL52\1
 939+ D6AF ~                                                              ;
 940+ D6AF ~                    ld          hl,(UBnK\0lo)                       ; Coord
 941+ D6AF ~                    ld          bc,(UBnkXX12\0Lo)                   ; XX12
 942+ D6AF ~                    ld          b,0                                 ; XX12 lo byte only
 943+ D6AF ~                    sbc         hl,bc                               ; hl = UBnKx - UBnkXX12xLo
 944+ D6AF ~                    jp          p,SetAndMop\1                       ; if result is positive skip to write back
 945+ D6AF ~            NodeXNegSignChange\1
 945+ D6AF ~
 946+ D6AF ~            ; If we get here the result is 2'c compliment so we reverse it and flip sign
 947+ D6AF ~                    call        negate16hl                          ; Convert back to positive and flip sign
 948+ D6AF ~                    ld          a,(Ubnk\1PointSign)                 ; XX15+2
 949+ D6AF ~                    xor         $80                                 ; Flip bit 7
 950+ D6AF ~                    ld          (Ubnk\1PointSign),a                 ; XX15+2
 951+ D6AF ~            SetAndMop\1
 951+ D6AF ~
 952+ D6AF ~                    ld          (UBnK\0lo),hl                       ; XX15+0
 953+ D6AF ~            FinishedThisNode\1
 954+ D6AF                                  ENDM
 955+ D6AF
 956+ D6AF              ;--LL52 to LL55-----------------------------------------------------------------------------------------------------------------
 957+ D6AF
 958+ D6AF              TransposeXX12NodeToXX15:
 959+ D6AF                      ldCopyByte  UBnKxsgn,UbnkXPointSign           ; UBnkXSgn => XX15+2 x sign
 959+ D6AF 3A 0E C0    >                        ld       a,(UBnKxsgn)
 959+ D6B2 32 85 C0    >                        ld       (UbnkXPointSign),a
 960+ D6B5 ED 4B 89 C0          ld          bc,(UBnkXX12xLo)                   ; c = lo, b = sign   XX12XLoSign
 961+ D6B9 A8                   xor         b                                   ; a = UBnkKxsgn (or XX15+2) here and b = XX12xsign,  XX12+1 \ rotated xnode h                                                                             ;;;           a = a XOR XX12+1                              XCALC
 962+ D6BA FA D0 D6             jp          m,NodeNegativeX                                                                                                                                                            ;;;           if sign is +ve                        ::LL52   XCALC
 963+ D6BD              ; XX15 [0,1] = INWK[0]+ XX12[0] + 256*INWK[1]                                                                                       ;;;          while any of x,y & z hi <> 0
 964+ D6BD              NodeXPositiveX:
 965+ D6BD 79                   ld          a,c                                 ; We picked up XX12+0 above in bc Xlo
 966+ D6BE 06 00                ld          b,0                                 ; but only want to work on xlo                                                           ;;;              XX15xHiLo = XX12HiLo + xpos lo             XCALC
 967+ D6C0 2A 0C C0             ld          hl,(UBnKxlo)                       ; hl = XX1 UBNKxLo
 968+ D6C3 26 00                ld          h,0                                 ; but we don;t want the sign
 969+ D6C5 09                   add         hl,bc                               ; its a 16 bit add
 970+ D6C6 22 83 C0             ld          (UbnkXPoint),hl                    ; And written to XX15 0,1
 971+ D6C9 AF                   xor         a                                   ; we want to write 0 as sign bit (not in original code)
 972+ D6CA 32 85 C0             ld          (UbnkXPointSign),a
 973+ D6CD C3 EC D6             jp          FinishedThisNodeX
 974+ D6D0              ; If we get here then _sign and vertv_ have different signs so do subtract
 975+ D6D0              NodeNegativeX:
 976+ D6D0              LL52X:                                                 ;
 977+ D6D0 2A 0C C0             ld          hl,(UBnKxlo)                       ; Coord
 978+ D6D3 ED 4B 89 C0          ld          bc,(UBnkXX12xLo)                   ; XX12
 979+ D6D7 06 00                ld          b,0                                 ; XX12 lo byte only
 980+ D6D9 ED 42                sbc         hl,bc                               ; hl = UBnKx - UBnkXX12xLo
 981+ D6DB F2 E9 D6             jp          p,SetAndMopX                       ; if result is positive skip to write back
 982+ D6DE              NodeXNegSignChangeX:
 983+ D6DE              ; If we get here the result is 2'c compliment so we reverse it and flip sign
 984+ D6DE CD 4B AD             call        negate16hl                          ; Convert back to positive and flip sign
 985+ D6E1 3A 85 C0             ld          a,(UbnkXPointSign)                 ; XX15+2
 986+ D6E4 EE 80                xor         $80                                 ; Flip bit 7
 987+ D6E6 32 85 C0             ld          (UbnkXPointSign),a                 ; XX15+2
 988+ D6E9              SetAndMopX:
 989+ D6E9 22 0C C0             ld          (UBnKxlo),hl                       ; XX15+0
 990+ D6EC              FinishedThisNodeX:
 991+ D6EC
 992+ D6EC              LL53:
 993+ D6EC
 994+ D6EC                      ldCopyByte  UBnKysgn,UbnkYPointSign           ; UBnkXSgn => XX15+2 x sign
 994+ D6EC 3A 11 C0    >                        ld       a,(UBnKysgn)
 994+ D6EF 32 88 C0    >                        ld       (UbnkYPointSign),a
 995+ D6F2 ED 4B 8B C0          ld          bc,(UBnkXX12yLo)                   ; c = lo, b = sign   XX12XLoSign
 996+ D6F6 A8                   xor         b                                   ; a = UBnkKxsgn (or XX15+2) here and b = XX12xsign,  XX12+1 \ rotated xnode h                                                                             ;;;           a = a XOR XX12+1                              XCALC
 997+ D6F7 FA 0D D7             jp          m,NodeNegativeY                                                                                                                                                            ;;;           if sign is +ve                        ::LL52   XCALC
 998+ D6FA              ; XX15 [0,1] = INWK[0]+ XX12[0] + 256*INWK[1]                                                                                       ;;;          while any of x,y & z hi <> 0
 999+ D6FA              NodeXPositiveY:
1000+ D6FA 79                   ld          a,c                                 ; We picked up XX12+0 above in bc Xlo
1001+ D6FB 06 00                ld          b,0                                 ; but only want to work on xlo                                                           ;;;              XX15xHiLo = XX12HiLo + xpos lo             XCALC
1002+ D6FD 2A 0F C0             ld          hl,(UBnKylo)                       ; hl = XX1 UBNKxLo
1003+ D700 26 00                ld          h,0                                 ; but we don;t want the sign
1004+ D702 09                   add         hl,bc                               ; its a 16 bit add
1005+ D703 22 86 C0             ld          (UbnkYPoint),hl                    ; And written to XX15 0,1
1006+ D706 AF                   xor         a                                   ; we want to write 0 as sign bit (not in original code)
1007+ D707 32 85 C0             ld          (UbnkXPointSign),a
1008+ D70A C3 29 D7             jp          FinishedThisNodeY
1009+ D70D              ; If we get here then _sign and vertv_ have different signs so do subtract
1010+ D70D              NodeNegativeY:
1011+ D70D              LL52Y:                                                 ;
1012+ D70D 2A 0F C0             ld          hl,(UBnKylo)                       ; Coord
1013+ D710 ED 4B 8B C0          ld          bc,(UBnkXX12yLo)                   ; XX12
1014+ D714 06 00                ld          b,0                                 ; XX12 lo byte only
1015+ D716 ED 42                sbc         hl,bc                               ; hl = UBnKx - UBnkXX12xLo
1016+ D718 F2 26 D7             jp          p,SetAndMopY                       ; if result is positive skip to write back
1017+ D71B              NodeXNegSignChangeY:
1018+ D71B              ; If we get here the result is 2'c compliment so we reverse it and flip sign
1019+ D71B CD 4B AD             call        negate16hl                          ; Convert back to positive and flip sign
1020+ D71E 3A 88 C0             ld          a,(UbnkYPointSign)                 ; XX15+2
1021+ D721 EE 80                xor         $80                                 ; Flip bit 7
1022+ D723 32 88 C0             ld          (UbnkYPointSign),a                 ; XX15+2
1023+ D726              SetAndMopY:
1024+ D726 22 0F C0             ld          (UBnKylo),hl                       ; XX15+0
1025+ D729              FinishedThisNodeY:
1026+ D729
1027+ D729
1028+ D729              TransposeZ:
1029+ D729              LL55:                                                   ; Both y signs arrive here, Onto z                                          ;;;
1030+ D729 3A 8E C0             ld          a,(UBnkXX12zSign)                   ; XX12+5    \ rotated znode hi                                              ;;;
1031+ D72C                      JumpOnBitSet a,7,NegativeNodeZ                    ; LL56 -ve Z node                                                           ;;;
1031+ D72C CB 7F       >                        bit 	7,a
1031+ D72E C2 42 D7    >                        jp      nz,NegativeNodeZ
1032+ D731 3A 8D C0             ld          a,(UBnkXX12zLo)                     ; XX12+4 \ rotated znode lo                                                 ;;;
1033+ D734 2A 12 C0             ld          hl,(UBnKzlo)                        ; INWK+6    \ zorg lo                                                       ;;;
1034+ D737 ED 31                add         hl,a                                ; hl = INWKZ + XX12z                                                        ;;;
1035+ D739 7D                   ld          a,l
1036+ D73A 32 43 99             ld          (varT),a                            ;                                                                           ;;;
1037+ D73D 7C                   ld          a,h
1038+ D73E 32 26 99             ld          (varU),a                            ; now z = hl or U(hi).T(lo)                                                 ;;;
1039+ D741 C9                   ret                                             ; LL57  \ Node additions done, z = U.T                                      ;;;
1040+ D742              ; Doing additions and scalings for each visible node around here                                                                    ;;;
1041+ D742              NegativeNodeZ:
1042+ D742              LL56:                                                   ; Enter XX12+5 -ve Z node case  from above                                  ;;;
1043+ D742 2A 12 C0             ld          hl,(UBnKzlo)                        ; INWK+6 \ z org lo                                                         ;;;
1044+ D745 ED 4B 8D C0          ld          bc,(UBnkXX12zLo)                    ; XX12+4    \ rotated z node lo                                                 ......................................................
1045+ D749 06 00                ld          b,0                                 ; upper byte will be garbage
1046+ D74B                      ClearCarryFlag
1046+ D74B B7          >                        or a
1047+ D74C ED 42                sbc         hl,bc                               ; 6502 used carry flag compliment
1048+ D74E 7D                   ld          a,l
1049+ D74F 32 43 99             ld          (varT),a                            ; t = result low
1050+ D752 7C                   ld          a,h
1051+ D753 32 26 99             ld          (varU),a                            ; u = result high
1052+ D756 E2 63 D7             jp          po,MakeNodeClose                    ; no overflow to parity would be clear
1053+ D759              LL56Overflow:
1054+ D759 FE 00                cp          0                                   ; is varU 0?
1055+ D75B 20 16                jr          nz,NodeAdditionsDone                ; Enter Node additions done, UT=z
1056+ D75D 3A 43 99             ld          a,(varT)                            ; T \ restore z lo
1057+ D760                      ReturnIfAGTENusng 4                              ; >= 4 ? zlo big enough, Enter Node additions done.
1057+ D760 FE 04       >                        cp    4
1057+ D762 D0          >                        ret	 nc
1058+ D763              MakeNodeClose:
1059+ D763              LL140:                                                  ; else make node close
1060+ D763 AF                   xor         a                                   ; hi This needs tuning to use a 16 bit variable
1061+ D764 32 26 99             ld          (varU),a                            ; U
1062+ D767 3E 04                ld          a,4                                 ; lo
1063+ D769 32 43 99             ld          (varT),a                            ; T
1064+ D76C C9                   ret
1065+ D76D              ;--LL49-------------------------------------------------------------------------------------------------------------------------
1066+ D76D              ProcessVisibleNode:
1067+ D76D              RotateNode:                                                                                                                         ;;;
1068+ D76D CD 7A D1             call        XX12EquXX15DotProductXX16                                                                                       ;;;           call      XX12=XX15.XX16
1069+ D770              LL52LL53LL54LL55
1070+ D770              TransposeNode:
1071+ D770 CD AF D6             call        TransposeXX12NodeToXX15
1072+ D773
1073+ D773              ; ......................................................                                                         ;;;
1074+ D773              NodeAdditionsDone:
1075+ D773              Scale16BitTo8Bit:
1076+ D773              LL57:                                                   ; Enter Node additions done, z=T.U set up from LL55
1077+ D773 3A 26 99             ld          a,(varU)                            ; U \ z hi
1078+ D776 21 84 C0             ld          hl,UbnkXPointHi
1079+ D779 B6                   or          (hl)                                ; XX15+1    \ x hi
1080+ D77A 21 87 C0             ld          hl,UbnkYPointHi
1081+ D77D B6                   or          (hl)                                ; XX15+4    \ y hi
1082+ D77E              AreXYZHiAllZero:
1083+ D77E 28 2B                jr          z,NodeScalingDone                   ; if X, Y, Z = 0  exit loop down once hi U rolled to 0
1084+ D780              DivideXYZBy2:
1085+ D780                      ShiftMem16Right1    UbnkXPoint                  ; XX15[0,1]
1085+ D780 2A 83 C0    >                    ld    hl,(UbnkXPoint)
1085+ D783 CB 3C       >                    srl   h
1085+ D785 CB 1D       >                    rr    l
1085+ D787 22 83 C0    >                    ld    (UbnkXPoint),hl
1086+ D78A                      ShiftMem16Right1    UbnkYPoint                  ; XX15[3,4]
1086+ D78A 2A 86 C0    >                    ld    hl,(UbnkYPoint)
1086+ D78D CB 3C       >                    srl   h
1086+ D78F CB 1D       >                    rr    l
1086+ D791 22 86 C0    >                    ld    (UbnkYPoint),hl
1087+ D794 3A 26 99             ld          a,(varU)                            ; U \ z hi
1088+ D797 67                   ld          h,a
1089+ D798 3A 43 99             ld          a,(varT)                            ; T \ z lo
1090+ D79B 6F                   ld          l,a
1091+ D79C                      ShiftHLRight1
1091+ D79C CB 3C       >			   srl h
1091+ D79E CB 1D       >			   rr  l
1092+ D7A0 7C                   ld          a,h
1093+ D7A1 32 26 99             ld          (varU),a
1094+ D7A4 7D                   ld          a,l
1095+ D7A5 32 43 99             ld          (varT),a                            ; T \ z lo
1096+ D7A8 C3 73 D7             jp          Scale16BitTo8Bit                    ; loop U
1097+ D7AB              NodeScalingDone:
1098+ D7AB              LL60:                                                   ; hi U rolled to 0, exited loop above.
1099+ D7AB              ProjectNodeToScreen:
1100+ D7AB                      ldCopyByte  varT,varQ                           ; T =>  Q   \ zdist lo
1100+ D7AB 3A 43 99    >                        ld       a,(varT)
1100+ D7AE 32 27 99    >                        ld       (varQ),a
1101+ D7B1 3A 83 C0             ld          a,(UbnkXPointLo)                    ; XX15  \ rolled x lo
1102+ D7B4 21 27 99             ld          hl,varQ
1103+ D7B7 BE                   cp          (hl)                                ; Q
1104+ D7B8                      JumpIfALTusng DoSmallAngle                      ; LL69 if xdist < zdist hop over jmp to small x angle
1104+ D7B8 DA C1 D7    >                        jp		c,DoSmallAngle
1105+ D7BB CD A3 B1             call        RequAdivQ                           ; LL61  \ visit up  R = A/Q = x/z
1106+ D7BE C3 C9 D7             jp          SkipSmallAngle                      ; LL65  \ hop over small xangle
1107+ D7C1              DoSmallAngle:                                           ; small x angle
1108+ D7C1              LL69:
1109+ D7C1              ; TODO check if we need to retain BC as this trashes it
1110+ D7C1              ;Input: BC = Dividend, DE = Divisor, HL = 0
1111+ D7C1              ;Output: BC = Quotient, HL = Remainder
1112+ D7C1 47                   ld      b,a
1113+ D7C2 CD 94 AB             call    DIV16UNDOC
1114+ D7C5 79                   ld      a,c
1115+ D7C6 32 28 99             ld      (varR),a
1116+ D7C9               ;;;       call        RequAmul256divQ                     ; LL28  \ BFRDIV R=A*256/Q byte for remainder of division
1117+ D7C9              SkipSmallAngle:
1118+ D7C9              ScaleX:
1119+ D7C9              LL65:                                                   ; both continue for scaling based on z
1120+ D7C9 3A 85 C0             ld          a,(UbnkXPointSign)                  ; XX15+2 \ sign of X dist
1121+ D7CC                      JumpOnBitSet a,7,NegativeXPoint                 ; LL62 up, -ve Xdist, RU screen onto XX3 heap
1121+ D7CC CB 7F       >                        bit 	7,a
1121+ D7CE C2 E1 D7    >                        jp      nz,NegativeXPoint
1122+ D7D1              ; ......................................................
1123+ D7D1              PositiveXPoint:
1124+ D7D1 3A 28 99             ld          a,(varR)
1125+ D7D4 6F                   ld          l,a
1126+ D7D5 3A 26 99             ld          a,(varU)
1127+ D7D8 67                   ld          h,a
1128+ D7D9 3E 80                ld          a,ScreenCenterX
1129+ D7DB ED 31                add         hl,a
1130+ D7DD EB                   ex          de,hl
1131+ D7DE C3 F1 D7             jp          StoreXPoint
1132+ D7E1              NegativeXPoint:
1133+ D7E1              LL62:                                                   ; Arrive from LL65 just below, screen for -ve RU onto XX3 heap, index X=CNT ;;;
1134+ D7E1 3A 28 99             ld          a,(varR)
1135+ D7E4 6F                   ld          l,a
1136+ D7E5 3A 26 99             ld          a,(varU)
1137+ D7E8 67                   ld          h,a
1138+ D7E9 0E 80                ld          c,ScreenCenterX
1139+ D7EB 06 00                ld          b,0
1140+ D7ED                      ClearCarryFlag
1140+ D7ED B7          >                        or a
1141+ D7EE ED 42                sbc         hl,bc                               ; hl = RU-ScreenCenterX
1142+ D7F0 EB                   ex          de,hl
1143+ D7F1              StoreXPoint:                                            ; also from LL62, XX3 node heap has xscreen node so far.
1144+ D7F1 FD 73 00             ld          (iy+0),e                            ; Update X Point
1145+ D7F4 FD 72 01             ld          (iy+1),d                            ; Update X Point
1146+ D7F7 FD 23                inc         iy
1147+ D7F9 FD 23                inc         iy
1148+ D7FB              ; ......................................................
1149+ D7FB              LL66:
1150+ D7FB              ProcessYPoint:
1151+ D7FB AF                   xor         a                                   ; y hi = 0
1152+ D7FC 32 26 99             ld          (varU),a                            ; U
1153+ D7FF                      ldCopyByte  varT,varQ                           ; Q \ zdist lo
1153+ D7FF 3A 43 99    >                        ld       a,(varT)
1153+ D802 32 27 99    >                        ld       (varQ),a
1154+ D805 3A 86 C0             ld          a,(UbnkYPointLo)                    ; XX15+3 \ rolled y low
1155+ D808 21 27 99             ld          hl,varQ
1156+ D80B BE                   cp          (hl)                                ; Q
1157+ D80C                      JumpIfALTusng SmallYHop                         ; if ydist < zdist hop to small yangle
1157+ D80C DA 15 D8    >                        jp		c,SmallYHop
1158+ D80F              SmallYPoint:
1159+ D80F CD A3 B1             call        RequAdivQ                           ; LL61  \ else visit up R = A/Q = y/z
1160+ D812 C3 18 D8             jp          SkipYScale                          ; LL68 hop over small y yangle
1161+ D815              SmallYHop:
1162+ D815              LL67:                                                   ; Arrive from LL66 above if XX15+3 < Q \ small yangle
1163+ D815 CD 80 B1             call        RequAmul256divQ                     ; LL28  \ BFRDIV R=A*256/Q byte for remainder of division
1164+ D818              SkipYScale:
1165+ D818              LL68:                                                   ; both carry on, also arrive from LL66, yscaled based on z
1166+ D818 3A 88 C0             ld          a,(UbnkYPointSign)                  ; XX15+5 \ sign of X dist
1167+ D81B CB 7F                bit         7,a
1168+ D81D C2 30 D8             jp          nz,NegativeYPoint                   ; LL62 up, -ve Xdist, RU screen onto XX3 heap
1169+ D820              PositiveYPoint:
1170+ D820 3A 28 99             ld          a,(varR)
1171+ D823 6F                   ld          l,a
1172+ D824 3A 26 99             ld          a,(varU)
1173+ D827 67                   ld          h,a
1174+ D828 3E 60                ld          a,ScreenHeightHalf
1175+ D82A ED 31                add         hl,a
1176+ D82C EB                   ex          de,hl
1177+ D82D C3 40 D8             jp          LL50
1178+ D830              NegativeYPoint:
1179+ D830              LL70:                                                   ; Arrive from LL65 just below, screen for -ve RU onto XX3 heap, index X=CNT ;;;
1180+ D830 3A 28 99             ld          a,(varR)
1181+ D833 6F                   ld          l,a
1182+ D834 3A 26 99             ld          a,(varU)
1183+ D837 67                   ld          h,a
1184+ D838 0E 60                ld          c,ScreenHeightHalf
1185+ D83A 06 00                ld          b,0
1186+ D83C                      ClearCarryFlag
1186+ D83C B7          >                        or a
1187+ D83D ED 42                sbc         hl,bc                               ; hl = RU-ScreenCenterX
1188+ D83F EB                   ex          de,hl
1189+ D840              LL50:                                                   ; also from LL62, XX3 node heap has xscreen node so far.
1190+ D840 FD 73 00             ld          (iy+0),e                            ; Update X Point
1191+ D843 FD 72 01             ld          (iy+1),d                            ; Update X Point
1192+ D846 FD 23                inc         iy
1193+ D848 FD 23                inc         iy
1194+ D84A C9                   ret
1195+ D84B              ;--------------------------------------------------------------------------------------------------------
1196+ D84B              ;;;     Byte 0 = X magnitide with origin at middle of ship
1197+ D84B              ;;;     Byte 1 = Y magnitide with origin at middle of ship
1198+ D84B              ;;;     Byte 2 = Z magnitide with origin at middle of ship
1199+ D84B              ;;;     Byte 3 = Sign Bits of Vertex 7=X 6=Y 5 = Z 4 - 0 = visibility beyond which vertix is not shown
1200+ D84B              CopyNodeToXX15:
1201+ D84B                      ldCopyByte  hl, UBnkXScaled                     ; Load into XX15                                                                     Byte 0;;;     XX15 xlo   = byte 0
1201+ D84B 7E          >                        ld       a,(hl)
1201+ D84C 32 83 C0    >                        ld       (UBnkXScaled),a
1202+ D84F 23                   inc         hl
1203+ D850                      ldCopyByte  hl, UBnkYScaled                     ; Load into XX15                                                                     Byte 0;;;     XX15 xlo   = byte 0
1203+ D850 7E          >                        ld       a,(hl)
1203+ D851 32 85 C0    >                        ld       (UBnkYScaled),a
1204+ D854 23                   inc         hl
1205+ D855                      ldCopyByte  hl, UBnkZScaled                     ; Load into XX15                                                                     Byte 0;;;     XX15 xlo   = byte 0
1205+ D855 7E          >                        ld       a,(hl)
1205+ D856 32 87 C0    >                        ld       (UBnkZScaled),a
1206+ D859 23                   inc         hl
1207+ D85A              PopulateXX15SignBits:
1208+ D85A              ; Simplfied for debugging, needs optimising back to original DEBUG TODO
1209+ D85A 7E                   ld          a,(hl)
1210+ D85B 4F                   ld          c,a                                 ; copy sign and visibility to c
1211+ D85C 47                   ld          b,a
1212+ D85D E6 80                and         $80                                 ; keep high 3 bits
1213+ D85F 32 84 C0             ld          (UBnkXScaledSign),a                 ; Copy Sign Bits                                                            ;;;
1214+ D862 78                   ld          a,b
1215+ D863 E6 40                and         $40
1216+ D865 CB 27                sla         a                                   ; Copy Sign Bits                                                            ;;;
1217+ D867 32 86 C0             ld          (UBnkYScaledSign),a                 ; Copy Sign Bits                                                            ;;;
1218+ D86A 78                   ld          a,b
1219+ D86B E6 20                and         $20
1220+ D86D CB 27                sla         a                                   ; Copy Sign Bits                                                            ;;;
1221+ D86F CB 27                sla         a                                   ; Copy Sign Bits                                                            ;;;
1222+ D871 32 88 C0             ld          (UBnkZScaledSign),a                 ; Copy Sign Bits                                                            ;;;
1223+ D874 79                   ld          a,c                                 ; returns a with visibility sign byte
1224+ D875 E6 1F                and         $1F                                 ; visibility is held in bits 0 to 4                                                              ;;;     A = XX15 Signs AND &1F (to get lower 5 visibility)
1225+ D877 32 43 99             ld          (varT),a                            ; and store in varT as its needed later
1226+ D87A C9                   ret
1227+ D87B
1228+ D87B              ;;;     Byte 4 = High 4 bits Face 2 Index Low 4 bits = Face 1 Index
1229+ D87B              ;;;     Byte 5 = High 4 bits Face 4 Index Low 4 bits = Face 3 Index
1230+ D87B              ;..............................................................................................................................
1231+ D87B              ProcessANode:                                           ; Start loop on Nodes for visibility, each node has 4 faces associated with ;;; For each node (point) in model                  ::LL48
1232+ D87B              LL48GetScale:
1233+ D87B 3A 19 98             ld          a,(LastNormalVisible)               ; get Normal visible range into e before we copy node
1234+ D87E 5F                   ld          e,a
1235+ D87F CD 4B D8             call        CopyNodeToXX15
1236+ D882              LL48GetVertices:
1237+ D882              LL48GetVertSignAndVisDist:
1238+ D882                      JumpIfALTNusng e,NodeIsNotVisible               ; if XX4 > Visibility distance then vertext too far away , next vertex.                                             ;;;        goto LL50 (end of loop)
1238+ D882 BB          >                        cp      e
1238+ D883 DA C4 D8    >                        jp		c, NodeIsNotVisible
1239+ D886              CheckFace1:                                                                                                                         ;;;     if all FaceVisile[point face any of idx1,2,3 or 4] = 0
1240+ D886                      CopyByteAtNextHL varP                           ; vertex byte#4, first 2 faces two 4-bit indices 0:15 into XX2 for 2 of the ;;;     get point face idx from byte 4 & 5 of normal
1240+ D886 23          >                    inc         hl                                  ; vertex byte#1
1240+ D887 7E          >                    ld          a,(hl)                              ;
1240+ D888 32 24 98    >                    ld          (varP),a                     ; SunXX15+2 = (V),Y
1241+ D88B 57                   ld          d,a                                 ; use d to hold a as a temp                                                 ;;;
1242+ D88C E6 0F                and         $0F                                 ; face 1                                                                    ;;;
1243+ D88E E5                   push        hl                                  ; we need to save HL                                                        ;;;
1244+ D88F                      ldHLIdxAToA UbnkFaceVisArray                    ; visibility at face 1                                                Byte 4;;;
1244+ D88F 21 B0 C0    >                    ld          hl,UbnkFaceVisArray
1244+ D892 ED 31       >                    add         hl,a
1244+ D894 7E          >                    ld          a,(hl)
1245+ D895 E1                   pop         hl                                  ;                                                                           ;;;
1246+ D896                      JumpIfAIsNotZero NodeIsVisible                  ; is face 1 visible                                                         ;;;
1246+ D896 FE 00       >                        cp	0
1246+ D898 C2 CA D8    >                        jp	nz,NodeIsVisible
1247+ D89B              CheckFace2:                                                                                                                         ;;;
1248+ D89B 7A                   ld          a,d                                                                                                             ;;;
1249+ D89C ED 23                swapnib                                                                                                                     ;;;
1250+ D89E E6 0F                and         $0F                                 ; this is face 2                                                            ;;;
1251+ D8A0                      JumpIfAIsNotZero NodeIsVisible                  ; is face 1 visible                                                         ;;;
1251+ D8A0 FE 00       >                        cp	0
1251+ D8A2 C2 CA D8    >                        jp	nz,NodeIsVisible
1252+ D8A5              CheckFace3:                                                                                                                         ;;;
1253+ D8A5                      CopyByteAtNextHL varP                           ; vertex byte#4, first 2 faces two 4-bit indices 0:15 into XX2 for 2 of the ;;;
1253+ D8A5 23          >                    inc         hl                                  ; vertex byte#1
1253+ D8A6 7E          >                    ld          a,(hl)                              ;
1253+ D8A7 32 24 98    >                    ld          (varP),a                     ; SunXX15+2 = (V),Y
1254+ D8AA 57                   ld          d,a                                 ; use d to hold a as a temp                                                 ;;;
1255+ D8AB E6 0F                and         $0F                                 ; face 1                                                                    ;;;
1256+ D8AD E5                   push        hl                                  ; we need to save HL                                                        ;;;
1257+ D8AE                      ldHLIdxAToA UbnkFaceVisArray                  ; visibility at face 1                                                Byte 5;;;
1257+ D8AE 21 B0 C0    >                    ld          hl,UbnkFaceVisArray
1257+ D8B1 ED 31       >                    add         hl,a
1257+ D8B3 7E          >                    ld          a,(hl)
1258+ D8B4 E1                   pop         hl                                  ;                                                                           ;;;
1259+ D8B5                      JumpIfAIsNotZero NodeIsVisible                  ; is face 1 visible                                                         ;;;
1259+ D8B5 FE 00       >                        cp	0
1259+ D8B7 C2 CA D8    >                        jp	nz,NodeIsVisible
1260+ D8BA              CheckFace4:                                                                                                                         ;;;
1261+ D8BA 7A                   ld          a,d                                                                                                             ;;;
1262+ D8BB ED 23                swapnib                                                                                                                     ;;;
1263+ D8BD E6 0F                and         $0F                                 ; this is face 2                                                            ;;;
1264+ D8BF                      JumpIfAIsNotZero NodeIsVisible                  ; is face 1 visible                                                         ;;;
1264+ D8BF FE 00       >                        cp	0
1264+ D8C1 C2 CA D8    >                        jp	nz,NodeIsVisible
1265+ D8C4              NodeIsNotVisible:                                                                                                                   ;;;
1266+ D8C4 01 04 00             ld          bc,4
1267+ D8C7 FD 09                add         iy,bc                               ; if not visible then move to next element in array anyway                  ;;;
1268+ D8C9                      ;;; Should we be loading FFFFFFFF into 4 bytes or just ignore?
1269+ D8C9 C9                   ret                                                                                                      ;;;        goto LL50 (end of loop)
1270+ D8CA              NodeIsVisible:
1271+ D8CA              LL49:
1272+ D8CA CD 6D D7             call        ProcessVisibleNode                  ; Process node to determine if it goes on heap
1273+ D8CD C9                   ret
1274+ D8CE
1275+ D8CE
1276+ D8CE              ProjectNodeToEye:
1277+ D8CE ED 4B 87 C0  	ld			bc,(UBnkZScaled)					; BC = Z Cordinate. By here it MUST be positive as its clamped to 4 min
1278+ D8D2 79           	ld			a,c                                 ;  so no need for a negative check
1279+ D8D3 32 27 99     	ld			(varQ),a		                    ; VarQ = z
1280+ D8D6 3A 83 C0         ld          a,(UBnkXScaled)                     ; XX15	\ rolled x lo which is signed
1281+ D8D9 CD 7D AB     	call		DIV16Amul256dCUNDOC					; result in BC which is 16 bit TODO Move to 16 bit below not just C reg
1282+ D8DC 3A 84 C0         ld          a,(UBnkXScaledSign)                 ; XX15+2 \ sign of X dist
1283+ D8DF                  JumpOnBitSet a,7,EyeNegativeXPoint             ; LL62 up, -ve Xdist, RU screen onto XX3 heap
1283+ D8DF CB 7F       >                        bit 	7,a
1283+ D8E1 C2 EC D8    >                        jp      nz,EyeNegativeXPoint
1284+ D8E4              EyePositiveXPoint:									; x was positive result
1285+ D8E4 2E 80            ld          l,ScreenCenterX						;
1286+ D8E6 26 00            ld          h,0
1287+ D8E8 09               add         hl,bc								; hl = Screen Centre + X
1288+ D8E9 C3 F3 D8         jp          EyeStoreXPoint
1289+ D8EC              EyeNegativeXPoint:                                 ; x < 0 so need to subtract from the screen centre position
1290+ D8EC 2E 80            ld          l,ScreenCenterX
1291+ D8EE 26 00            ld          h,0
1292+ D8F0                  ClearCarryFlag
1292+ D8F0 B7          >                        or a
1293+ D8F1 ED 42            sbc         hl,bc                               ; hl = Screen Centre - X
1294+ D8F3              EyeStoreXPoint:                                    ; also from LL62, XX3 node heap has xscreen node so far.
1295+ D8F3 EB               ex          de,hl
1296+ D8F4 FD 73 00         ld          (iy+0),e                            ; Update X Point TODO this bit is 16 bit aware just need to fix above bit
1297+ D8F7 FD 72 01         ld          (iy+1),d                            ; Update X Point
1298+ D8FA              EyeProcessYPoint:
1299+ D8FA ED 4B 87 C0  	ld			bc,(UBnkZScaled)					; Now process Y co-ordinate
1300+ D8FE 79           	ld			a,c
1301+ D8FF 32 27 99     	ld			(varQ),a
1302+ D902 3A 85 C0         ld          a,(UBnkYScaled)                     ; XX15	\ rolled x lo
1303+ D905 CD 7D AB     	call		DIV16Amul256dCUNDOC	                ; a = Y scaled * 256 / zscaled
1304+ D908 3A 86 C0         ld          a,(UBnkYScaledSign)                 ; XX15+2 \ sign of X dist
1305+ D90B                  JumpOnBitSet a,7,EyeNegativeYPoint             ; LL62 up, -ve Xdist, RU screen onto XX3 heap top of screen is Y = 0
1305+ D90B CB 7F       >                        bit 	7,a
1305+ D90D C2 18 D9    >                        jp      nz,EyeNegativeYPoint
1306+ D910              EyePositiveYPoint:									; Y is positive so above the centre line
1307+ D910 2E 60            ld          l,ScreenCenterY
1308+ D912                  ClearCarryFlag
1308+ D912 B7          >                        or a
1309+ D913 ED 42            sbc         hl,bc  							 	; hl = ScreenCentreY - Y coord (as screen is 0 at top)
1310+ D915 C3 1D D9         jp          EyeStoreYPoint
1311+ D918              EyeNegativeYPoint:									; this bit is only 8 bit aware TODO FIX
1312+ D918 2E 60            ld          l,ScreenCenterY
1313+ D91A 26 00            ld          h,0
1314+ D91C 09               add         hl,bc								; hl = ScreenCenterY + Y as negative is below the center of screen
1315+ D91D              EyeStoreYPoint:                                    ; also from LL62, XX3 node heap has xscreen node so far.
1316+ D91D EB               ex          de,hl
1317+ D91E FD 73 02         ld          (iy+2),e                            ; Update Y Point
1318+ D921 FD 72 03         ld          (iy+3),d                            ; Update Y Point
1319+ D924 C9               ret
1320+ D925
1321+ D925
1322+ D925
1323+ D925              ; Pitch and roll are 2 phases
1324+ D925              ; 1 - we apply our pitch and roll to the ship position
1325+ D925              ;       x -> x + alpha * (y - alpha * x)
1326+ D925              ;       y -> y - alpha * x - beta * z
1327+ D925              ;       z -> z + beta * (y - alpha * x - beta * z)
1328+ D925              ; which can be simplified as:
1329+ D925              ;       1. K2 = y - alpha * x
1330+ D925              ;       2. z = z + beta * K2
1331+ D925              ;       3. y = K2 - beta * z
1332+ D925              ;       4. x = x + alpha * y
1333+ D925              ; 2 - we apply our patch and roll to the ship orientation
1334+ D925              ;      Roll calculations:
1335+ D925              ;
1336+ D925              ;        nosev_y = nosev_y - alpha * nosev_x_hi
1337+ D925              ;        nosev_x = nosev_x + alpha * nosev_y_hi
1338+ D925              ;      Pitch calculations:
1339+ D925              ;
1340+ D925              ;        nosev_y = nosev_y - beta * nosev_z_hi
1341+ D925              ;        nosev_z = nosev_z + beta * nosev_y_hi
1342+ D925
1343+ D925
1344+ D925              ; ---------------------------------------------------------------------------------------------------------------------------------
1345+ D925                          INCLUDE "./Universe/Ships/ApplyMyRollAndPitch.asm"
# file opened: ././Universe/Ships/ApplyMyRollAndPitch.asm
   1++D925
   2++D925              ; Full version
   3++D925              ; 1. K2 = y - alpha * x
   4++D925              ; 2. z = z + beta * K2
   5++D925              ; 3. y = K2 - beta * z
   6++D925              ; 4. x = x + alpha * y
   7++D925
   8++D925
   9++D925              ApplyMyRollToNosev:     ApplyMyRollToVector ALPHA, UBnkrotmatNosevX, UBnkrotmatNosevY
   9++D925             >                        ldCopyByte ALPHA,varQ               ; Set Q = a = alpha (the roll angle to rotate through)
   9++D925 3A 3D 98    >                        ld       a,(ALPHA)
   9++D928 32 27 99    >                        ld       (varQ),a
   9++D92B             >                        ldCopy2Byte UBnkrotmatNosevY, varR           ; RS =  nosev_y
   9++D92B 2A 23 C0    >                        ld       hl,(UBnkrotmatNosevY)
   9++D92E 22 28 99    >                        ld       (varR),hl
   9++D931             >                        ldCopyByte  UBnkrotmatNosevX, varP           ; set P to nosevX lo (may be redundant)
   9++D931 3A 21 C0    >                        ld       a,(UBnkrotmatNosevX)
   9++D934 32 24 98    >                        ld       (varP),a
   9++D937 3A 22 C0    >                        ld a,(UBnkrotmatNosevX+1)                    ; Set A = -nosev_x_hi
   9++D93A EE 80       >                        xor $80                             ;
   9++D93C CD 47 A9    >                        call  madXAequQmulAaddRS            ; Set (A X) = Q * A + (S R) = = alpha * -nosev_x_hi + nosev_y
   9++D93F ED 53 23 C0 >                        ld  (UBnkrotmatNosevY),de                    ; nosev_y = nosev_y - alpha * nosev_x_hi
   9++D943             >                        ldCopy2Byte UBnkrotmatNosevX, varR           ; Set (S R) = nosev_x
   9++D943 2A 21 C0    >                        ld       hl,(UBnkrotmatNosevX)
   9++D946 22 28 99    >                        ld       (varR),hl
   9++D949 3A 24 C0    >                        ld  a,(UBnkrotmatNosevY+1)                   ;  Set A = nosev_y_hi
   9++D94C CD 47 A9    >                        call madXAequQmulAaddRS             ; Set (A X) = Q * A + (S R)
   9++D94F ED 53 21 C0 >                        ld  (UBnkrotmatNosevX),de                    ; nosev_x = nosev_x + alpha * nosev_y_hi
  10++D953 C9                                   ret
  11++D954              ApplyMyRollToSidev:     ApplyMyRollToVector ALPHA, UBnkrotmatSidevX, UBnkrotmatSidevY
  11++D954             >                        ldCopyByte ALPHA,varQ               ; Set Q = a = alpha (the roll angle to rotate through)
  11++D954 3A 3D 98    >                        ld       a,(ALPHA)
  11++D957 32 27 99    >                        ld       (varQ),a
  11++D95A             >                        ldCopy2Byte UBnkrotmatSidevY, varR           ; RS =  nosev_y
  11++D95A 2A 17 C0    >                        ld       hl,(UBnkrotmatSidevY)
  11++D95D 22 28 99    >                        ld       (varR),hl
  11++D960             >                        ldCopyByte  UBnkrotmatSidevX, varP           ; set P to nosevX lo (may be redundant)
  11++D960 3A 15 C0    >                        ld       a,(UBnkrotmatSidevX)
  11++D963 32 24 98    >                        ld       (varP),a
  11++D966 3A 16 C0    >                        ld a,(UBnkrotmatSidevX+1)                    ; Set A = -nosev_x_hi
  11++D969 EE 80       >                        xor $80                             ;
  11++D96B CD 47 A9    >                        call  madXAequQmulAaddRS            ; Set (A X) = Q * A + (S R) = = alpha * -nosev_x_hi + nosev_y
  11++D96E ED 53 17 C0 >                        ld  (UBnkrotmatSidevY),de                    ; nosev_y = nosev_y - alpha * nosev_x_hi
  11++D972             >                        ldCopy2Byte UBnkrotmatSidevX, varR           ; Set (S R) = nosev_x
  11++D972 2A 15 C0    >                        ld       hl,(UBnkrotmatSidevX)
  11++D975 22 28 99    >                        ld       (varR),hl
  11++D978 3A 18 C0    >                        ld  a,(UBnkrotmatSidevY+1)                   ;  Set A = nosev_y_hi
  11++D97B CD 47 A9    >                        call madXAequQmulAaddRS             ; Set (A X) = Q * A + (S R)
  11++D97E ED 53 15 C0 >                        ld  (UBnkrotmatSidevX),de                    ; nosev_x = nosev_x + alpha * nosev_y_hi
  12++D982 C9                                   ret
  13++D983              ApplyMyRollToRoofv:     ApplyMyRollToVector ALPHA, UBnkrotmatRoofvX, UBnkrotmatRoofvY
  13++D983             >                        ldCopyByte ALPHA,varQ               ; Set Q = a = alpha (the roll angle to rotate through)
  13++D983 3A 3D 98    >                        ld       a,(ALPHA)
  13++D986 32 27 99    >                        ld       (varQ),a
  13++D989             >                        ldCopy2Byte UBnkrotmatRoofvY, varR           ; RS =  nosev_y
  13++D989 2A 1D C0    >                        ld       hl,(UBnkrotmatRoofvY)
  13++D98C 22 28 99    >                        ld       (varR),hl
  13++D98F             >                        ldCopyByte  UBnkrotmatRoofvX, varP           ; set P to nosevX lo (may be redundant)
  13++D98F 3A 1B C0    >                        ld       a,(UBnkrotmatRoofvX)
  13++D992 32 24 98    >                        ld       (varP),a
  13++D995 3A 1C C0    >                        ld a,(UBnkrotmatRoofvX+1)                    ; Set A = -nosev_x_hi
  13++D998 EE 80       >                        xor $80                             ;
  13++D99A CD 47 A9    >                        call  madXAequQmulAaddRS            ; Set (A X) = Q * A + (S R) = = alpha * -nosev_x_hi + nosev_y
  13++D99D ED 53 1D C0 >                        ld  (UBnkrotmatRoofvY),de                    ; nosev_y = nosev_y - alpha * nosev_x_hi
  13++D9A1             >                        ldCopy2Byte UBnkrotmatRoofvX, varR           ; Set (S R) = nosev_x
  13++D9A1 2A 1B C0    >                        ld       hl,(UBnkrotmatRoofvX)
  13++D9A4 22 28 99    >                        ld       (varR),hl
  13++D9A7 3A 1E C0    >                        ld  a,(UBnkrotmatRoofvY+1)                   ;  Set A = nosev_y_hi
  13++D9AA CD 47 A9    >                        call madXAequQmulAaddRS             ; Set (A X) = Q * A + (S R)
  13++D9AD ED 53 1B C0 >                        ld  (UBnkrotmatRoofvX),de                    ; nosev_x = nosev_x + alpha * nosev_y_hi
  14++D9B1 C9                                   ret
  15++D9B2
  16++D9B2              ApplyMyPitchToNosev:    ApplyMyRollToVector BETA, UBnkrotmatNosevZ, UBnkrotmatNosevY
  16++D9B2             >                        ldCopyByte BETA,varQ               ; Set Q = a = alpha (the roll angle to rotate through)
  16++D9B2 3A 2F 98    >                        ld       a,(BETA)
  16++D9B5 32 27 99    >                        ld       (varQ),a
  16++D9B8             >                        ldCopy2Byte UBnkrotmatNosevY, varR           ; RS =  nosev_y
  16++D9B8 2A 23 C0    >                        ld       hl,(UBnkrotmatNosevY)
  16++D9BB 22 28 99    >                        ld       (varR),hl
  16++D9BE             >                        ldCopyByte  UBnkrotmatNosevZ, varP           ; set P to nosevX lo (may be redundant)
  16++D9BE 3A 25 C0    >                        ld       a,(UBnkrotmatNosevZ)
  16++D9C1 32 24 98    >                        ld       (varP),a
  16++D9C4 3A 26 C0    >                        ld a,(UBnkrotmatNosevZ+1)                    ; Set A = -nosev_x_hi
  16++D9C7 EE 80       >                        xor $80                             ;
  16++D9C9 CD 47 A9    >                        call  madXAequQmulAaddRS            ; Set (A X) = Q * A + (S R) = = alpha * -nosev_x_hi + nosev_y
  16++D9CC ED 53 23 C0 >                        ld  (UBnkrotmatNosevY),de                    ; nosev_y = nosev_y - alpha * nosev_x_hi
  16++D9D0             >                        ldCopy2Byte UBnkrotmatNosevZ, varR           ; Set (S R) = nosev_x
  16++D9D0 2A 25 C0    >                        ld       hl,(UBnkrotmatNosevZ)
  16++D9D3 22 28 99    >                        ld       (varR),hl
  16++D9D6 3A 24 C0    >                        ld  a,(UBnkrotmatNosevY+1)                   ;  Set A = nosev_y_hi
  16++D9D9 CD 47 A9    >                        call madXAequQmulAaddRS             ; Set (A X) = Q * A + (S R)
  16++D9DC ED 53 25 C0 >                        ld  (UBnkrotmatNosevZ),de                    ; nosev_x = nosev_x + alpha * nosev_y_hi
  17++D9E0 C9                                   ret
  18++D9E1              ApplyMyPitchToSidev:    ApplyMyRollToVector BETA, UBnkrotmatSidevZ, UBnkrotmatSidevY
  18++D9E1             >                        ldCopyByte BETA,varQ               ; Set Q = a = alpha (the roll angle to rotate through)
  18++D9E1 3A 2F 98    >                        ld       a,(BETA)
  18++D9E4 32 27 99    >                        ld       (varQ),a
  18++D9E7             >                        ldCopy2Byte UBnkrotmatSidevY, varR           ; RS =  nosev_y
  18++D9E7 2A 17 C0    >                        ld       hl,(UBnkrotmatSidevY)
  18++D9EA 22 28 99    >                        ld       (varR),hl
  18++D9ED             >                        ldCopyByte  UBnkrotmatSidevZ, varP           ; set P to nosevX lo (may be redundant)
  18++D9ED 3A 19 C0    >                        ld       a,(UBnkrotmatSidevZ)
  18++D9F0 32 24 98    >                        ld       (varP),a
  18++D9F3 3A 1A C0    >                        ld a,(UBnkrotmatSidevZ+1)                    ; Set A = -nosev_x_hi
  18++D9F6 EE 80       >                        xor $80                             ;
  18++D9F8 CD 47 A9    >                        call  madXAequQmulAaddRS            ; Set (A X) = Q * A + (S R) = = alpha * -nosev_x_hi + nosev_y
  18++D9FB ED 53 17 C0 >                        ld  (UBnkrotmatSidevY),de                    ; nosev_y = nosev_y - alpha * nosev_x_hi
  18++D9FF             >                        ldCopy2Byte UBnkrotmatSidevZ, varR           ; Set (S R) = nosev_x
  18++D9FF 2A 19 C0    >                        ld       hl,(UBnkrotmatSidevZ)
  18++DA02 22 28 99    >                        ld       (varR),hl
  18++DA05 3A 18 C0    >                        ld  a,(UBnkrotmatSidevY+1)                   ;  Set A = nosev_y_hi
  18++DA08 CD 47 A9    >                        call madXAequQmulAaddRS             ; Set (A X) = Q * A + (S R)
  18++DA0B ED 53 19 C0 >                        ld  (UBnkrotmatSidevZ),de                    ; nosev_x = nosev_x + alpha * nosev_y_hi
  19++DA0F C9                                   ret
  20++DA10              ApplyMyPitchToRoofv:    ApplyMyRollToVector BETA, UBnkrotmatRoofvZ, UBnkrotmatRoofvY
  20++DA10             >                        ldCopyByte BETA,varQ               ; Set Q = a = alpha (the roll angle to rotate through)
  20++DA10 3A 2F 98    >                        ld       a,(BETA)
  20++DA13 32 27 99    >                        ld       (varQ),a
  20++DA16             >                        ldCopy2Byte UBnkrotmatRoofvY, varR           ; RS =  nosev_y
  20++DA16 2A 1D C0    >                        ld       hl,(UBnkrotmatRoofvY)
  20++DA19 22 28 99    >                        ld       (varR),hl
  20++DA1C             >                        ldCopyByte  UBnkrotmatRoofvZ, varP           ; set P to nosevX lo (may be redundant)
  20++DA1C 3A 1F C0    >                        ld       a,(UBnkrotmatRoofvZ)
  20++DA1F 32 24 98    >                        ld       (varP),a
  20++DA22 3A 20 C0    >                        ld a,(UBnkrotmatRoofvZ+1)                    ; Set A = -nosev_x_hi
  20++DA25 EE 80       >                        xor $80                             ;
  20++DA27 CD 47 A9    >                        call  madXAequQmulAaddRS            ; Set (A X) = Q * A + (S R) = = alpha * -nosev_x_hi + nosev_y
  20++DA2A ED 53 1D C0 >                        ld  (UBnkrotmatRoofvY),de                    ; nosev_y = nosev_y - alpha * nosev_x_hi
  20++DA2E             >                        ldCopy2Byte UBnkrotmatRoofvZ, varR           ; Set (S R) = nosev_x
  20++DA2E 2A 1F C0    >                        ld       hl,(UBnkrotmatRoofvZ)
  20++DA31 22 28 99    >                        ld       (varR),hl
  20++DA34 3A 1E C0    >                        ld  a,(UBnkrotmatRoofvY+1)                   ;  Set A = nosev_y_hi
  20++DA37 CD 47 A9    >                        call madXAequQmulAaddRS             ; Set (A X) = Q * A + (S R)
  20++DA3A ED 53 1F C0 >                        ld  (UBnkrotmatRoofvZ),de                    ; nosev_x = nosev_x + alpha * nosev_y_hi
  21++DA3E C9                                   ret
  22++DA3F
  23++DA3F
  24++DA3F              APPequPosPlusAPP:       MACRO    Position, PositionSign
  25++DA3F ~                                    push    bc
  26++DA3F ~                                    ld      c,a                         ; save original value of a into c
  27++DA3F ~                                    ld      a,(PositionSign)
  28++DA3F ~                                    ld      b,a
  29++DA3F ~                                    ld      a,c
  30++DA3F ~                                    xor     b                           ; a = a xor x postition sign
  31++DA3F ~                                    jp      m,.MV50                     ; if the sign is negative then A and X are both opposite signs
  32++DA3F ~            ; Signs are the same to we just add and take which ever sign
  33++DA3F ~                                    ld      de,(varPp1)                  ; Note we take p+2,p+1 we we did a previous 24 bit mulitple
  34++DA3F ~                                    ld      hl,(Position)
  35++DA3F ~                                    add     hl,de
  36++DA3F ~                                    ld      (varPp1),hl                  ; now we have P1 and p2 with lo hi and
  37++DA3F ~                                    ld      a,c                         ; and a = original sign as they were both the same
  38++DA3F ~                                    pop     bc
  39++DA3F ~                                    ret
  40++DA3F ~            ; Signs are opposite so we subtract
  41++DA3F ~            .MV50:                  ld      de,(varPp1)
  42++DA3F ~                                    ld      hl,(Position)
  43++DA3F ~                                    or      a
  44++DA3F ~                                    sbc     hl,de
  45++DA3F ~                                    jr      c,.MV51                     ; if the result was negative then negate result
  46++DA3F ~                                    ld      a,c                         ; get back the original sign
  47++DA3F ~                                    ld      (varPp1),hl                 ; and save result to P[2][1]
  48++DA3F ~                                    xor     SignOnly8Bit                ; flip sign and exit A = flip of a
  49++DA3F ~                                    pop     bc
  50++DA3F ~                                    ret
  51++DA3F ~            .MV51:                  NegHL
  52++DA3F ~                                    ld      (varPp1),hl
  53++DA3F ~                                    ld      a,c                         ; the original sign will still be good
  54++DA3F ~                                    pop     bc
  55++DA3F ~                                    ret
  56++DA3F                                      ENDM
  57++DA3F
  58++DA3F
  59++DA3F              APPequXPosPlusAPP:     APPequPosPlusAPP UBnKxlo, UBnKxsgn
  59++DA3F C5          >                        push    bc
  59++DA40 4F          >                        ld      c,a                         ; save original value of a into c
  59++DA41 3A 0E C0    >                        ld      a,(UBnKxsgn)
  59++DA44 47          >                        ld      b,a
  59++DA45 79          >                        ld      a,c
  59++DA46 A8          >                        xor     b                           ; a = a xor x postition sign
  59++DA47 FA 58 DA    >                        jp      m,.MV50                     ; if the sign is negative then A and X are both opposite signs
  59++DA4A             >; Signs are the same to we just add and take which ever sign
  59++DA4A ED 5B 25 98 >                        ld      de,(varPp1)                  ; Note we take p+2,p+1 we we did a previous 24 bit mulitple
  59++DA4E 2A 0C C0    >                        ld      hl,(UBnKxlo)
  59++DA51 19          >                        add     hl,de
  59++DA52 22 25 98    >                        ld      (varPp1),hl                  ; now we have P1 and p2 with lo hi and
  59++DA55 79          >                        ld      a,c                         ; and a = original sign as they were both the same
  59++DA56 C1          >                        pop     bc
  59++DA57 C9          >                        ret
  59++DA58             >; Signs are opposite so we subtract
  59++DA58 ED 5B 25 98 >.MV50:                  ld      de,(varPp1)
  59++DA5C 2A 0C C0    >                        ld      hl,(UBnKxlo)
  59++DA5F B7          >                        or      a
  59++DA60 ED 52       >                        sbc     hl,de
  59++DA62 38 08       >                        jr      c,.MV51                     ; if the result was negative then negate result
  59++DA64 79          >                        ld      a,c                         ; get back the original sign
  59++DA65 22 25 98    >                        ld      (varPp1),hl                 ; and save result to P[2][1]
  59++DA68 EE 80       >                        xor     SignOnly8Bit                ; flip sign and exit A = flip of a
  59++DA6A C1          >                        pop     bc
  59++DA6B C9          >                        ret
  59++DA6C             >.MV51:                  NegHL
  59++DA6C AF          >                    xor a
  59++DA6D 95          >                    sub l
  59++DA6E 6F          >                    ld l,a
  59++DA6F 9F          >                    sbc a,a
  59++DA70 94          >                    sub h
  59++DA71 67          >                    ld h,a
  59++DA72 22 25 98    >                        ld      (varPp1),hl
  59++DA75 79          >                        ld      a,c                         ; the original sign will still be good
  59++DA76 C1          >                        pop     bc
  59++DA77 C9          >                        ret
  60++DA78
  61++DA78              APPequYPosPlusAPP:     APPequPosPlusAPP UBnKylo, UBnKysgn
  61++DA78 C5          >                        push    bc
  61++DA79 4F          >                        ld      c,a                         ; save original value of a into c
  61++DA7A 3A 11 C0    >                        ld      a,(UBnKysgn)
  61++DA7D 47          >                        ld      b,a
  61++DA7E 79          >                        ld      a,c
  61++DA7F A8          >                        xor     b                           ; a = a xor x postition sign
  61++DA80 FA 91 DA    >                        jp      m,.MV50                     ; if the sign is negative then A and X are both opposite signs
  61++DA83             >; Signs are the same to we just add and take which ever sign
  61++DA83 ED 5B 25 98 >                        ld      de,(varPp1)                  ; Note we take p+2,p+1 we we did a previous 24 bit mulitple
  61++DA87 2A 0F C0    >                        ld      hl,(UBnKylo)
  61++DA8A 19          >                        add     hl,de
  61++DA8B 22 25 98    >                        ld      (varPp1),hl                  ; now we have P1 and p2 with lo hi and
  61++DA8E 79          >                        ld      a,c                         ; and a = original sign as they were both the same
  61++DA8F C1          >                        pop     bc
  61++DA90 C9          >                        ret
  61++DA91             >; Signs are opposite so we subtract
  61++DA91 ED 5B 25 98 >.MV50:                  ld      de,(varPp1)
  61++DA95 2A 0F C0    >                        ld      hl,(UBnKylo)
  61++DA98 B7          >                        or      a
  61++DA99 ED 52       >                        sbc     hl,de
  61++DA9B 38 08       >                        jr      c,.MV51                     ; if the result was negative then negate result
  61++DA9D 79          >                        ld      a,c                         ; get back the original sign
  61++DA9E 22 25 98    >                        ld      (varPp1),hl                 ; and save result to P[2][1]
  61++DAA1 EE 80       >                        xor     SignOnly8Bit                ; flip sign and exit A = flip of a
  61++DAA3 C1          >                        pop     bc
  61++DAA4 C9          >                        ret
  61++DAA5             >.MV51:                  NegHL
  61++DAA5 AF          >                    xor a
  61++DAA6 95          >                    sub l
  61++DAA7 6F          >                    ld l,a
  61++DAA8 9F          >                    sbc a,a
  61++DAA9 94          >                    sub h
  61++DAAA 67          >                    ld h,a
  61++DAAB 22 25 98    >                        ld      (varPp1),hl
  61++DAAE 79          >                        ld      a,c                         ; the original sign will still be good
  61++DAAF C1          >                        pop     bc
  61++DAB0 C9          >                        ret
  62++DAB1
  63++DAB1              APPequZPosPlusAPP:     APPequPosPlusAPP UBnKzlo, UBnKzsgn
  63++DAB1 C5          >                        push    bc
  63++DAB2 4F          >                        ld      c,a                         ; save original value of a into c
  63++DAB3 3A 14 C0    >                        ld      a,(UBnKzsgn)
  63++DAB6 47          >                        ld      b,a
  63++DAB7 79          >                        ld      a,c
  63++DAB8 A8          >                        xor     b                           ; a = a xor x postition sign
  63++DAB9 FA CA DA    >                        jp      m,.MV50                     ; if the sign is negative then A and X are both opposite signs
  63++DABC             >; Signs are the same to we just add and take which ever sign
  63++DABC ED 5B 25 98 >                        ld      de,(varPp1)                  ; Note we take p+2,p+1 we we did a previous 24 bit mulitple
  63++DAC0 2A 12 C0    >                        ld      hl,(UBnKzlo)
  63++DAC3 19          >                        add     hl,de
  63++DAC4 22 25 98    >                        ld      (varPp1),hl                  ; now we have P1 and p2 with lo hi and
  63++DAC7 79          >                        ld      a,c                         ; and a = original sign as they were both the same
  63++DAC8 C1          >                        pop     bc
  63++DAC9 C9          >                        ret
  63++DACA             >; Signs are opposite so we subtract
  63++DACA ED 5B 25 98 >.MV50:                  ld      de,(varPp1)
  63++DACE 2A 12 C0    >                        ld      hl,(UBnKzlo)
  63++DAD1 B7          >                        or      a
  63++DAD2 ED 52       >                        sbc     hl,de
  63++DAD4 38 08       >                        jr      c,.MV51                     ; if the result was negative then negate result
  63++DAD6 79          >                        ld      a,c                         ; get back the original sign
  63++DAD7 22 25 98    >                        ld      (varPp1),hl                 ; and save result to P[2][1]
  63++DADA EE 80       >                        xor     SignOnly8Bit                ; flip sign and exit A = flip of a
  63++DADC C1          >                        pop     bc
  63++DADD C9          >                        ret
  63++DADE             >.MV51:                  NegHL
  63++DADE AF          >                    xor a
  63++DADF 95          >                    sub l
  63++DAE0 6F          >                    ld l,a
  63++DAE1 9F          >                    sbc a,a
  63++DAE2 94          >                    sub h
  63++DAE3 67          >                    ld h,a
  63++DAE4 22 25 98    >                        ld      (varPp1),hl
  63++DAE7 79          >                        ld      a,c                         ; the original sign will still be good
  63++DAE8 C1          >                        pop     bc
  63++DAE9 C9          >                        ret
  64++DAEA
  65++DAEA              ; rollWork holds Alpha intermidate results
  66++DAEA 00 00 00     rollWork      DS 3
  67++DAED              rollWorkp1    equ rollWork
  68++DAED              rollWorkp2    equ rollWork+1
  69++DAED              rollWorkp3    equ rollWork+2
  70++DAED
  71++DAED              ;----------------------------------------------------------------------------------------------------------------------------------
  72++DAED              ; based on MVEIT part 4 of 9
  73++DAED 3A 3E 98     ApplyMyRollAndPitch:    ld      a,(ALP1)                    ; get roll magnitude
  74++DAF0 21 31 98                             ld      hl,BET1                     ; and pitch
  75++DAF3 B6                                   or      (hl)
  76++DAF4 CA AE DB                             jp      z,.NoRotation               ; if both zero then don't compute
  77++DAF7                                      ;break
  78++DAF7              ; P[210] = x * alph (we use P[2]P[1] later as result/256
  79++DAF7 5F                                   ld      e,a                         ; e = roll magnitude
  80++DAF8 2A 0C C0                             ld      hl,(UBnKxlo)                ; hl = ship x pos
  81++DAFB CD A3 A9                             call    AHLequHLmulE                ; MULTU2-2 AHL = UbnkXlo * Alp1 both unsigned
  82++DAFE 32 26 98                             ld      (varPhi2),a                 ; set P[2] to high byte to help with ./256
  83++DB01 22 24 98                             ld      (varP),hl                   ; P (2 1 0) = UbnkXlo * Alph1
  84++DB04              ; A = Flip sign
  85++DB04 3A 40 98                             ld      a,(ALP2FLIP)                ; flip the current roll angle alpha and xor with x sign
  86++DB07 21 0E C0                             ld      hl,UBnKxsgn                 ; and xor with x pos sign
  87++DB0A AE                                   xor     (hl)                        ; so now  (A P+2 P+1) = - (x_sign x_hi x_lo) * alpha / 256
  88++DB0B              ; AP[2]P[1] =Y + AP[2]P[1] (i.e. Previous APP/256)
  89++DB0B CD 78 DA                             call    APPequYPosPlusAPP           ; MVT6 calculate APP = y - (x * alpha / 256)
  90++DB0E              ; K2 = AP[2][1] K2(3 2 1) = (A P+2 P+1) = y - x * alpha / 256
  91++DB0E 32 EC DA                             ld      (rollWorkp3),a               ; k2+3 = sign of result
  92++DB11 22 EA DA                             ld      (rollWorkp1),hl             ; k2+1,2 = result
  93++DB14              ; P[210] = K2[2 1] * Beta  = (A ~P) * X
  94++DB14 3A 31 98                             ld      a,(BET1)                    ; a = magnitude of pitch
  95++DB17 5F                                   ld      e,a
  96++DB18 CD A3 A9                             call    AHLequHLmulE                ; MLTU2-2 AHL = (P+2 P+1) * BET1 or by now ((UbnkXlo * Alph1)/256 * Bet1)
  97++DB1B 32 26 98                             ld      (varPp2),a                   ; save highest byte in P2
  98++DB1E 22 24 98                             ld      (varP),hl
  99++DB21              ; Fetch sign of previosu cal and xor with BETA inverted
 100++DB21 3A EC DA                             ld      a,(rollWorkp3)
 101++DB24 5F                                   ld      e,a
 102++DB25 3A 32 98                             ld      a,(BET2)
 103++DB28 AB                                   xor     e                           ; so we get the sign of K3 and xor with pitch sign
 104++DB29              ; Z = P[210] =Z + APP
 105++DB29 CD B1 DA                             call    APPequZPosPlusAPP           ; MVT6
 106++DB2C 32 14 C0                             ld      (UBnKzsgn),a                ; save result back into z
 107++DB2F 22 12 C0                             ld      (UBnKzlo),hl
 108++DB32              ; A[P1]P[0] = z * Beta
 109++DB32 3A 31 98                             ld      a,(BET1)                    ; get pitch back again for mulitply in original it was kept in Q so no fetch needed
 110++DB35 5F                                   ld      e,a
 111++DB36 CD A3 A9                             call    AHLequHLmulE                ; MULTU2 P2 P1 was already in hl (A P+1 P) = (z_hi z_lo) * beta
 112++DB39 32 26 98                             ld      (varPp2),a                  ; P2 = high byte of result
 113++DB3C 22 24 98                             ld      (varP),hl                   ; P (2 1 0) = UbnkXlo & Alph1
 114++DB3F              ; A xor BET2,Zsign
 115++DB3F 3A EC DA                             ld      a,(rollWorkp3)               ; get K3 (sign of y) and store it in y pos
 116++DB42 32 11 C0                             ld      (UBnKysgn),a                ; save result back into y
 117++DB45 5F                                   ld      e,a                         ; a = y sign Xor pitch rate sign
 118++DB46 3A 32 98                             ld      a,(BET2)                    ;
 119++DB49 AB                                   xor     e                           ;
 120++DB4A 5F                                   ld      e,a                         ; now xor it with z sign too
 121++DB4B 3A 14 C0                             ld      a,(UBnKzsgn)                ;
 122++DB4E AB                                   xor     e                           ; so now a = sign of y * beta * sign y * sign z
 123++DB4F F2 5E DB                             jp      p,.MV43                     ; if result is pve beta * z and y have differetn signs
 124++DB52 2A 25 98                             ld      hl,(varPp1)
 125++DB55 ED 5B EA DA                          ld      de,(rollWorkp1)
 126++DB59 B7                                   or      a
 127++DB5A 19                                   add     hl,de
 128++DB5B C3 78 DB                             jp      .MV44
 129++DB5E 2A EA DA     .MV43:                  ld      hl,(rollWorkp1)
 130++DB61 ED 5B 25 98                          ld      de,(varPp1)
 131++DB65 B7                                   or      a
 132++DB66 ED 52                                sbc     hl,de                       ; (y_hi y_lo) = K2(2 1) - P(2 1)
 133++DB68 30 0E                                jr      nc,.MV44                    ; if there was no over flow carry on
 134++DB6A                                      NegHL
 134++DB6A AF          >                    xor a
 134++DB6B 95          >                    sub l
 134++DB6C 6F          >                    ld l,a
 134++DB6D 9F          >                    sbc a,a
 134++DB6E 94          >                    sub h
 134++DB6F 67          >                    ld h,a
 135++DB70 3A 11 C0                             ld      a,(UBnKysgn)                ; flip sign bit TODO, we may have to remove xor as planets and suns are sign + 23 bit xpos
 136++DB73 EE 80                                xor     SignOnly8Bit
 137++DB75 32 11 C0                             ld      (UBnKysgn),a
 138++DB78              ; by here we have (y_sign y_hi y_lo) = K2(2 1) - P(2 1) = K2 - beta * z
 139++DB78 22 0F C0     .MV44:                  ld      (UBnKylo),hl                ; we do save here to avoid two writes if MV43 ended up with a 2s'c conversion
 140++DB7B 3A 3E 98                             ld      a,(ALP1)                    ; get roll magnitude
 141++DB7E 5F                                   ld      e,a
 142++DB7F 2A 0F C0                             ld      hl,(UBnKylo)
 143++DB82 CD A3 A9                             call    AHLequHLmulE                ; MLTU2-2 AHL = (y_hi y_lo) * alpha
 144++DB85 32 26 98                             ld      (varPp2),a                  ; store high byte P(2 1 0) = (y_hi y_lo) * alpha
 145++DB88 22 24 98                             ld      (varP),hl
 146++DB8B 3A 3F 98                             ld      a,(ALP2)
 147++DB8E 5F                                   ld      e,a
 148++DB8F 3A 11 C0                             ld      a,(UBnKysgn)
 149++DB92 AB                                   xor     e                           ; a = sign of roll xor y so now we have (A P+2 P+1) = (y_sign y_hi y_lo) * alpha / 256
 150++DB93 CD 3F DA                             call    APPequXPosPlusAPP           ; MVT6 Set (A P+2 P+1) = (x_sign x_hi x_lo) + (A P+2 P+1) = x + y * alpha / 256
 151++DB96 32 0E C0                             ld      (UBnKxsgn),a                ; save resutl stright into X pos
 152++DB99 22 0C C0                             ld      (UBnKxlo),hl
 153++DB9C                                      ;break
 154++DB9C                                      ; if its not a sun then apply to local orientation
 155++DB9C
 156++DB9C CD 25 D9                             call    ApplyMyRollToNosev
 157++DB9F CD 54 D9                             call    ApplyMyRollToSidev
 158++DBA2 CD 83 D9                             call    ApplyMyRollToRoofv
 159++DBA5 CD B2 D9                             call    ApplyMyPitchToNosev
 160++DBA8 CD E1 D9                             call    ApplyMyPitchToSidev
 161++DBAB CD 10 DA                             call    ApplyMyPitchToRoofv
 162++DBAE 3A 23 99     .NoRotation:            ld      a,(DELTA)                   ; get speed
 163++DBB1 16 00                                ld      d,0
 164++DBB3 5F                                   ld      e,a                         ; de = speed in low byte
 165++DBB4 2A 12 C0                             ld      hl,(UBnKzlo)                ; hl = z position
 166++DBB7 3A 14 C0                             ld      a,(UBnKzsgn)                ; b = z sign
 167++DBBA 47                                   ld      b,a                         ;
 168++DBBB 0E 80                                ld      c,$80                       ; c = -ve as we are always moving forwards
 169++DBBD CD 7E AF                             call    ADDHLDESignBC               ; update speed
 170++DBC0 22 12 C0                             ld      (UBnKzlo),hl                ; write back to zpos
 171++DBC3 32 14 C0                             ld      (UBnKzsgn),a                ;
 172++DBC6 C9                                   ret
# file closed: ././Universe/Ships/ApplyMyRollAndPitch.asm
1346+ DBC7                          INCLUDE "./Universe/Ships/ApplyShipRollAndPitch.asm"
# file opened: ././Universe/Ships/ApplyShipRollAndPitch.asm
   1++DBC7              ;----------------------------------------------------------------------------------------------------------------------------------
   2++DBC7              ; based on MVEIT part 4 of 9
   3++DBC7 3A 34 C0     ApplyShipRollAndPitch:  ld      a,(UBnKRotZCounter)             ; get roll magnitudeShip Pitch counter
   4++DBCA 47                                   ld      b,a
   5++DBCB E6 80                                and     SignOnly8Bit
   6++DBCD 4F                                   ld      c,a
   7++DBCE 32 3C C0                             ld      (univRAT2),a                ; get sign of pitch
   8++DBD1 78                                   ld      a,b
   9++DBD2 E6 7F                                and     SignMask8Bit                ; and magnitude
  10++DBD4 28 3A                                jr      z,.ProcessRoll
  11++DBD6 FE 7F        .CheckPitchDamping:     cp      SignMask8Bit
  12++DBD8 28 01                                jr      z,.NoPitchDamping
  13++DBDA 3D           .ApplyPitchDamping:     dec     a                           ; pitch = pitch-1
  14++DBDB 32 3D C0     .NoPitchDamping         ld      (univRAT2Val),a
  15++DBDE 47                                   ld      b,a
  16++DBDF B1                                   or      c                           ; bring sign back in
  17++DBE0 32 34 C0                             ld      (UBnKRotZCounter),a             ; rotZCounter = updated value
  18++DBE3 21 1B C0     .PitchSAxes:            ld	    hl,UBnkrotmatRoofvX; UBnkrotmatSidevY
  19++DBE6 22 0D 98                             ld	    (varAxis1),hl
  20++DBE9 21 21 C0                             ld	    hl,UBnkrotmatNosevX; UBnkrotmatSidevZ
  21++DBEC 22 0F 98                             ld	    (varAxis2),hl
  22++DBEF CD D5 CB                             call    MVS5RotateAxis
  23++DBF2 21 1D C0     .PitchRAxes:            ld	    hl,UBnkrotmatRoofvY
  24++DBF5 22 0D 98                             ld	    (varAxis1),hl
  25++DBF8 21 23 C0                             ld	    hl,UBnkrotmatNosevY;UBnkrotmatRoofvZ
  26++DBFB 22 0F 98                             ld	    (varAxis2),hl
  27++DBFE CD D5 CB                             call    MVS5RotateAxis
  28++DC01 21 1F C0     .PitchNAxes:            ld	    hl,UBnkrotmatRoofvZ; UBnkrotmatNosevY
  29++DC04 22 0D 98                             ld	    (varAxis1),hl
  30++DC07 21 25 C0                             ld	    hl,UBnkrotmatNosevZ
  31++DC0A 22 0F 98                             ld	    (varAxis2),hl
  32++DC0D CD D5 CB                             call    MVS5RotateAxis
  33++DC10 3A 33 C0     .ProcessRoll:           ld      a,(UBnKRotXCounter)
  34++DC13 47                                   ld      b,a
  35++DC14 E6 80                                and     SignOnly8Bit
  36++DC16 4F                                   ld      c,a
  37++DC17 32 3C C0                             ld      (univRAT2),a                ; get sign of pitch
  38++DC1A 78                                   ld      a,b
  39++DC1B E6 7F                                and     SignMask8Bit                ; and magnitude
  40++DC1D C8                                   ret     z                           ; if no work to do then exit
  41++DC1E FE 7F        .CheckRollDamping:      cp      SignMask8Bit
  42++DC20 28 01                                jr      z,.NoRollDamping
  43++DC22 3D           .ApplyRollDamping:      dec      a                     ; pitch = pitch-1
  44++DC23 32 3D C0     .NoRollDamping          ld      (univRAT2Val),a
  45++DC26 47                                   ld      b,a
  46++DC27 B1                                   or      c                           ; bring sign back in
  47++DC28 32 33 C0                             ld      (UBnKRotXCounter),a             ; rotZCounter = updated value
  48++DC2B 21 1B C0     .RollSAxis:           	ld	    hl,UBnkrotmatRoofvX; UBnkrotmatSidevX
  49++DC2E 22 0D 98                             ld	    (varAxis1),hl
  50++DC31 21 15 C0                             ld	    hl,UBnkrotmatSidevX; UBnkrotmatSidevY
  51++DC34 22 0F 98                             ld	    (varAxis2),hl
  52++DC37 CD D5 CB                             call    MVS5RotateAxis
  53++DC3A 21 1D C0     .RollRAxis:             ld	    hl,UBnkrotmatRoofvY; UBnkrotmatRoofvX
  54++DC3D 22 0D 98                             ld	    (varAxis1),hl
  55++DC40 21 17 C0                             ld	    hl,UBnkrotmatSidevY; UBnkrotmatRoofvY
  56++DC43 22 0F 98                             ld	    (varAxis2),hl
  57++DC46 CD D5 CB                             call    MVS5RotateAxis
  58++DC49 21 1F C0     .RollNAxis:             ld	    hl,UBnkrotmatRoofvZ; UBnkrotmatNosevX
  59++DC4C 22 0D 98                             ld	    (varAxis1),hl
  60++DC4F 21 19 C0                             ld	    hl,UBnkrotmatSidevZ; UBnkrotmatNosevY
  61++DC52 22 0F 98                             ld	    (varAxis2),hl
  62++DC55 CD D5 CB                             call    MVS5RotateAxis
  63++DC58 C9                                   ret
  64++DC59
# file closed: ././Universe/Ships/ApplyShipRollAndPitch.asm
1347+ DC59                          INCLUDE "./ModelRender/DrawLines.asm"
# file opened: ././ModelRender/DrawLines.asm
   1++DC59
   2++DC59              ; ---------------------------------------------------------------------------------------------------------------------------------
   3++DC59 00           DrawLinesCounter		db	0
   4++DC5A              ; Initial tests look OK
   5++DC5A              LL155:;
   6++DC5A              ClearLine:                                  ; CLEAR LINEstr visited by EE31 when XX3 heap ready to draw/erase lines in XX19 heap.
   7++DC5A                    ;break                                                                             ; ObjectInFront:
   8++DC5A 3E 65        DrawLines:              ld	a,$65 ; DEBUG
   9++DC5C FD 6F                                ld		iyl,a							; set ixl to colour (assuming we come in here with a = colour to draw)
  10++DC5E 3A 00 C3                             ld		a,(UbnkLineArrayLen)			; get number of lines
  11++DC61                                      ReturnIfAIsZero   						; No lines then bail out.
  11++DC61 A7          >                        and     a
  11++DC62 C8          >                        ret     z
  12++DC63 FD 67                                ld		iyh,a			                ; number of lines still to draw
  13++DC65 21 0E C2                             ld		hl,UbnkLineArray
  14++DC68              ;LL27:                                       ; counter Y, Draw clipped lines in XX19 ship lines heap
  15++DC68 4E           DrawXX19ClippedLines:   ld      c,(hl)                          ; (XX19),Y c = varX1
  16++DC69 23                                   inc     hl
  17++DC6A 46                                   ld      b,(hl)                          ; bc = point1 Y,X
  18++DC6B 23                                   inc     hl
  19++DC6C              ;;DEBUGTEST        push bc
  20++DC6C              ;;DEBUGTEST        push hl
  21++DC6C              ;;DEBUGTEST        push de
  22++DC6C              ;;DEBUGTEST        ld  a,$3F
  23++DC6C              ;;DEBUGTEST        MMUSelectLayer2
  24++DC6C              ;;DEBUGTEST        call    l2_plot_pixel
  25++DC6C              ;;DEBUGTEST        pop de
  26++DC6C              ;;DEBUGTEST        pop hl
  27++DC6C              ;;DEBUGTEST        pop bc
  28++DC6C 5E                                   ld      e,(hl)                          ; c = varX1
  29++DC6D 23                                   inc     hl
  30++DC6E 56                                   ld      d,(hl)                          ; de = point2 Y,X
  31++DC6F              ;;DEBUGTEST       push bc
  32++DC6F              ;;DEBUGTEST       push hl
  33++DC6F              ;;DEBUGTEST       push de
  34++DC6F              ;;DEBUGTEST       push de
  35++DC6F              ;;DEBUGTEST       pop  bc
  36++DC6F              ;;DEBUGTEST       ld  a,$3F
  37++DC6F              ;;DEBUGTEST       MMUSelectLayer2
  38++DC6F              ;;DEBUGTEST       call    l2_plot_pixel
  39++DC6F              ;;DEBUGTEST       pop de
  40++DC6F              ;;DEBUGTEST       pop hl
  41++DC6F              ;;DEBUGTEST       pop bc
  42++DC6F 23                                   inc     hl
  43++DC70 E5                                   push	hl
  44++DC71 FD E5                                push    iy
  45++DC73 60                                   ld      h,b
  46++DC74 69                                   ld      l,c
  47++DC75                ;  call    l2_draw_any_line                ; call version of LOIN that used BCDE
  48++DC75 FD 7D                                ld		a,iyl							; get colour back before calling line draw
  49++DC77                                      MMUSelectLayer2
  49++DC77 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
  50++DC7B CD F2 E8                             call    LineHLtoDE
  51++DC7E FD E1                                pop     iy
  52++DC80 E1                                   pop	    hl
  53++DC81 FD 25                                dec     iyh
  54++DC83 20 E3                                jr		nz,DrawXX19ClippedLines
  55++DC85 C9                                   ret                                     ; --- Wireframe end  \ LL118-1
  56++DC86
# file closed: ././ModelRender/DrawLines.asm
1348+ DC86              ; ---------------------------------------------------------------------------------------------------------------------------------
1349+ DC86
1350+ DC86              ; DIot seem to lawyas have Y = 0???
1351+ DC86              ProcessDot:            ; break
1352+ DC86 CD 64 CF                             call    CopyRotmatToTransMat             ;#01; Load to Rotation Matrix to XX16, 16th bit is sign bit
1353+ DC89 CD F7 91                             call    ScaleXX16Matrix197               ;#02; Normalise XX16
1354+ DC8C CD 1A D2                             call    LoadCraftToCamera                ;#04; Load Ship Coords to XX18
1355+ DC8F CD E7 D0                             call    InverseXX16                      ;#11; Invert rotation matrix
1356+ DC92 21 00 00                             ld      hl,0
1357+ DC95 32 83 C0                             ld      (UBnkXScaled),a
1358+ DC98 32 85 C0                             ld      (UBnkYScaled),a
1359+ DC9B 32 87 C0                             ld      (UBnkZScaled),a
1360+ DC9E AF                                   xor     a
1361+ DC9F CD 1D 91                             call    XX12EquNodeDotOrientation
1362+ DCA2 CD 9B CF                             call    TransposeXX12ByShipToXX15
1363+ DCA5 CD 18 D0                             call	ScaleNodeTo8Bit					    ; scale to 8 bit values, why don't we hold the magnitude here?x
1364+ DCA8 FD 21 CE C0                          ld      iy,UBnkNodeArray
1365+ DCAC CD CE D8                             call    ProjectNodeToEye
1366+ DCAF C9                                   ret
1367+ DCB0
1368+ DCB0              ; .....................................................
1369+ DCB0              ; Process Nodes does the following:
1370+ DCB0              ; for each node:
1371+ DCB0              ;     see if node >
1372+ DCB0 00           PNXX20DIV6          DB      0
1373+ DCB1 00 00        PNVERTEXPTR         DW      0   ; DEBUG WILL USE LATER
1374+ DCB3 00 00        PNNODEPRT           DW      0   ; DEBUG WILL USE LATER
1375+ DCB5 00           PNLASTNORM          DB      0
1376+ DCB6              ProcessNodes:           ZeroA
1376+ DCB6 AF          >                        xor a
1377+ DCB7 32 00 C3                             ld      (UbnkLineArrayLen),a
1378+ DCBA CD 64 CF                             call CopyRotmatToTransMat ; CopyRotToTransMacro                      ;#01; Load to Rotation Matrix to XX16, 16th bit is sign bit
1379+ DCBD CD F7 91                             call    ScaleXX16Matrix197               ;#02; Normalise XX16
1380+ DCC0 CD 1A D2                             call    LoadCraftToCamera                ;#04; Load Ship Coords to XX18
1381+ DCC3 CD E7 D0                             call    InverseXX16                      ;#11; Invert rotation matrix
1382+ DCC6 21 25 C3                             ld      hl,UBnkHullVerticies
1383+ DCC9 3A 14 C3                             ld      a,(VertexCtX6Addr)               ; get Hull byte#8 = number of vertices *6                                   ;;;
1384+ DCCC 4F           GetActualVertexCount:   ld      c,a                              ; XX20 also c = number of vertices * 6 (or XX20)
1385+ DCCD 4F                                   ld      c,a                              ; XX20 also c = number of vertices * 6 (or XX20)
1386+ DCCE 16 06                                ld      d,6
1387+ DCD0 CD AD AB                             call    asm_div8                         ; asm_div8 C_Div_D - C is the numerator, D is the denominator, A is the remainder, B is 0, C is the result of C/D,D,E,H,L are not changed"
1388+ DCD3 41                                   ld      b,c                              ; c = number of vertices
1389+ DCD4 FD 21 CE C0                          ld      iy,UBnkNodeArray
1390+ DCD8              LL48:
1391+ DCD8 C5           PointLoop:	            push	bc                                  ; save counters
1392+ DCD9 E5                                   push	hl                                  ; save verticies list pointer
1393+ DCDA FD E5                                push	iy                                  ; save Screen plot array pointer
1394+ DCDC 78                                   ld      a,b
1395+ DCDD                                      ;break
1396+ DCDD CD 4B D8                             call    CopyNodeToXX15                      ; copy verices at hl to xx15
1397+ DCE0 3A 84 C0                             ld		a,(UBnkXScaledSign)
1398+ DCE3 CD 1D 91                             call    XX12EquNodeDotOrientation
1399+ DCE6 CD 9B CF                             call    TransposeXX12ByShipToXX15
1400+ DCE9 CD 18 D0                             call	ScaleNodeTo8Bit					    ; scale to 8 bit values, why don't we hold the magnitude here?x
1401+ DCEC FD E1                                pop		iy                                  ; get back screen plot array pointer
1402+ DCEE CD CE D8                             call    ProjectNodeToEye                     ; set up screen plot list entry
1403+ DCF1                 ; ld      hl,UbnkLineArrayLen
1404+ DCF1                ;  inc     (hl)                                ; another node done
1405+ DCF1 FD E5        ReadyForNextPoint:      push	iy                                  ; copy screen plot pointer to hl
1406+ DCF3 E1                                   pop		hl
1407+ DCF4 3E 04                                ld		a,4
1408+ DCF6 ED 31                                add		hl,a
1409+ DCF8 E5                                   push	hl                                  ; write it back at iy + 4
1410+ DCF9 FD E1                                pop		iy								    ; and put it in iy again
1411+ DCFB E1                                   pop		hl                                  ; get hl back as vertex list
1412+ DCFC 3E 06                                ld		a,6
1413+ DCFE ED 31                                add 	hl,a                                ; and move to next vertex
1414+ DD00 C1                                   pop		bc                                  ; get counter back
1415+ DD01 10 D5                                djnz	PointLoop
1416+ DD03              ; ......................................................
1417+ DD03                                      ClearCarryFlag
1417+ DD03 B7          >                        or a
1418+ DD04 C9                                   ret
1419+ DD05
1420+ DD05              ; ......................................................
1421+ DD05 CD C8 D4     ProcessShip:            call    CheckDistance               ; checks for z -ve and outside view frustrum
1422+ DD08 D8                                   ret     c                           ; carry flag means drop out
1423+ DD09 3A 9C C0     .IsItADot:              ld      a,(UBnKDrawAsDot)           ; if its just a dot then don't draw
1424+ DD0C                                      JumpIfATrue .CarryOnWithDraw
1424+ DD0C A7          >                        and     a
1424+ DD0D CA 30 DD    >                        jp      z, .CarryOnWithDraw
1425+ DD10 CD 86 DC     .itsJustADot:           call    ProcessDot
1426+ DD13 ED 4B CE C0                          ld      bc,(UBnkNodeArray)          ; if its at dot range get X
1427+ DD17 ED 5B D0 C0                          ld      de,(UBnkNodeArray+2)        ; and Y
1428+ DD1B 78                                   ld      a,b                         ; if high byte components are not 0 then off screen
1429+ DD1C B2                                   or      d                           ;
1430+ DD1D C0                                   ret     nz                          ;
1431+ DD1E 7B                                   ld      a,e
1432+ DD1F E6 80                                and     %10000000                   ; check to see if Y > 128
1433+ DD21 C0                                   ret     nz
1434+ DD22 43                                   ld      b,e                         ; now b = y and c = x
1435+ DD23 3E FF                                ld      a,L2ColourWHITE_1           ; just draw a pixel
1436+ DD25 3E E0                                ld      a,224
1437+ DD27                                      MMUSelectLayer2                     ; then go to update radar
1437+ DD27 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
1438+ DD2B CD FF E0                             call    l2_plot_pixel               ;
1439+ DD2E                                      ClearCarryFlag
1439+ DD2E B7          >                        or a
1440+ DD2F C9                                   ret
1441+ DD30              .CarryOnWithDraw:       ;break
1442+ DD30              ;DEBUG                        ld      a,(UBnkaiatkecm)            ; if its exploding then we just draw
1443+ DD30              ;DEBUG                        and     ShipExploding               ; clouds of pixels
1444+ DD30              ;DEBUG                        jr      nz,.ExplodingCloud          ; .
1445+ DD30 CD B6 DC                             call    ProcessNodes                ; process notes is the poor performer or check distnace is not culling
1446+ DD33 CD 16 D5                             call    CullV2
1447+ DD36 CD C5 DD                             call    PrepLines
1448+ DD39 CD 5A DC                             call    DrawLines
1449+ DD3C                                      ClearCarryFlag
1449+ DD3C B7          >                        or a
1450+ DD3D C9                                   ret
1451+ DD3E DD 01        .ExplodingCloud:        break
1452+ DD40 C9                                   ret
1453+ DD41              ; ......................................................
1454+ DD41
1455+ DD41              ;-LL49-----------------------------------------------------------------------------------------------------------------------------
1456+ DD41              ;  Entering Here we have the following:
1457+ DD41              ;  XX15(1 0) = vertex x-coordinate but sign not populated
1458+ DD41              ;  XX15(3 2) = vertex y-coordinate but sign not populated
1459+ DD41              ;  XX15(5 4) = vertex z-coordinate but sign not populated
1460+ DD41              ;
1461+ DD41              ;  XX16(  1 0)sidev_x   (3 2)roofv_x   (5 4)nosev_x
1462+ DD41              ;  XX16(  7 6)sidev_y   (9 8)roofv_y (11 10)nosev_y
1463+ DD41              ;  XX16(13 12)sidev_z (15 14)roofv_z (17 16)nosev_z
1464+ DD41              ;--------------------------------------------------------------------------------------------------------
1465+ DD41              AddLaserBeamLine:
1466+ DD41              ; this code is a bag of shit and needs re-writing
1467+ DD41              GetGunVertexNode:
1468+ DD41 3A 12 C3             ld          a,(GunVertexAddr)                   ; Hull byte#6, gun vertex*4 (XX0),Y
1469+ DD44 21 CE C0             ld          hl,UBnkNodeArray                    ; list of lines to read
1470+ DD47 ED 31                add         hl,a                                ; HL = address of GunVertexOnNodeArray
1471+ DD49 FD 2E 00             ld          iyl,0
1472+ DD4C              MoveX1PointToXX15:
1473+ DD4C 4E                   ld          c,(hl)                              ;
1474+ DD4D 23                   inc         hl
1475+ DD4E 46                   ld          b,(hl)                              ; bc = x1 of gun vertex
1476+ DD4F 23                   inc         hl
1477+ DD50 ED 43 83 C0          ld          (UBnkX1),bc
1478+ DD54 0C                   inc         c
1479+ DD55 C8                   ret         z                                   ; was c 255?
1480+ DD56 04                   inc         b
1481+ DD57 C8                   ret         z                                   ; was c 255?
1482+ DD58              MoveY1PointToXX15:
1483+ DD58 4E                   ld          c,(hl)                              ;
1484+ DD59 23                   inc         hl
1485+ DD5A 46                   ld          b,(hl)                              ; bc = y1 of gun vertex
1486+ DD5B 23                   inc         hl
1487+ DD5C ED 43 85 C0          ld          (UBnkY1),bc
1488+ DD60              SetX2PointToXX15:
1489+ DD60 01 00 00             ld          bc,0                                ; set X2 to 0
1490+ DD63 ED 43 87 C0          ld          (UBnkX2),bc
1491+ DD67 3A 12 C0             ld          a,(UBnKzlo)
1492+ DD6A 4F                   ld          c,a
1493+ DD6B              SetY2PointToXX15:
1494+ DD6B ED 43 89 C0          ld          (UBnkY2),bc                         ; set Y2to 0
1495+ DD6F 3A 0E C0             ld          a,(UBnKxsgn)
1496+ DD72                      JumpOnBitClear a,7,LL74SkipDec
1496+ DD72 CB 7F       >                        bit 	7,a
1496+ DD74 CA 7C DD    >                        jp      z,LL74SkipDec
1497+ DD77              LL74DecX2:
1498+ DD77 3E FF                ld          a,$FF
1499+ DD79 32 87 C0             ld          (UBnkX2Lo),a                        ; rather than dec (hl) just load with 255 as it will always be that at this code point
1500+ DD7C              LL74SkipDec:
1501+ DD7C CD 0E CD             call        ClipLine                            ; LL145 \ clip test on XX15 XX12 vector, returns carry
1502+ DD7F 38 71                jr          c,CalculateNewLines                 ; LL170 clip returned carry set so not visibile if carry set skip the rest (laser not firing)
1503+ DD81              ; Here we are usign hl to replace VarU as index
1504+ DD81 2A 2A 99             ld          hl,(varU16)
1505+ DD84 3A 83 C0             ld          a,(UBnKx1Lo)
1506+ DD87 77                   ld          (hl),a
1507+ DD88 23                   inc         hl
1508+ DD89 3A 85 C0             ld          a,(UbnKy1Lo)
1509+ DD8C 77                   ld          (hl),a
1510+ DD8D 23                   inc         hl
1511+ DD8E 3A 87 C0             ld          a,(UBnkX2Lo)
1512+ DD91 77                   ld          (hl),a
1513+ DD92 23                   inc         hl
1514+ DD93 3A 89 C0             ld          a,(UbnKy2Lo)
1515+ DD96 77                   ld          (hl),a
1516+ DD97 FD 2C                inc         iyl                                 ; iyl holds as a counter to iterations
1517+ DD99 23                   inc         hl
1518+ DD9A FD 2C                inc         iyl                                 ; ready for next byte
1519+ DD9C 22 2A 99             ld          (varU16),hl
1520+ DD9F C9                   ret
1521+ DDA0
1522+ DDA0                  INCLUDE "Universe/Ships/PrepLines.asm"
# file opened: ./Universe/Ships/PrepLines.asm
   1++DDA0              ;--------------------------------------------------------------------------------------------------------
   2++DDA0                  INCLUDE "./ModelRender/getVertexNodeAtAToX1Y1.asm"
# file opened: ././ModelRender/getVertexNodeAtAToX1Y1.asm
   1++DDA0              ;--------------------------------------------------------------------------------------------------------
   2++DDA0              ; a = byteoffset to node array as its pre computed to x4 bytes
   3++DDA0 21 CE C0     getVertexNodeAtAToX1Y1: ld          hl,UBnkNodeArray                    ; hl = edgelist  current pointer
   4++DDA3 ED 31                                add         hl,a                                ; hl = address of Node
   5++DDA5 7E                                   ld          a,(hl)                              ; get edge list nbr 1 edge
   6++DDA6 11 83 C0                             ld          de,UBnkX1
   7++DDA9 ED A0                                ldi                                             ; x1 lo
   8++DDAB ED A0                                ldi                                             ; x1 hi
   9++DDAD ED A0                                ldi                                             ; y1 lo
  10++DDAF ED A0                                ldi                                             ; y1 hi
  11++DDB1 C9                                   ret
  12++DDB2
# file closed: ././ModelRender/getVertexNodeAtAToX1Y1.asm
   3++DDB2                  INCLUDE "./ModelRender/getVertexNodeAtAToX2Y2.asm"
# file opened: ././ModelRender/getVertexNodeAtAToX2Y2.asm
   1++DDB2              ;--------------------------------------------------------------------------------------------------------
   2++DDB2              ; a = byteoffset to node array as its pre computed to x4 bytes
   3++DDB2 21 CE C0     getVertexNodeAtAToX2Y2: ld          hl,UBnkNodeArray                    ; hl = edgelist  current pointer
   4++DDB5 ED 31                                add         hl,a                                ; hl = address of Node
   5++DDB7 7E                                   ld          a,(hl)                              ; get edge list nbr 1 edge
   6++DDB8 11 87 C0                             ld          de,UBnkX2
   7++DDBB ED A0                                ldi                                             ; x1 lo
   8++DDBD ED A0                                ldi                                             ; x1 hi
   9++DDBF ED A0                                ldi                                             ; y1 lo
  10++DDC1 ED A0                                ldi                                             ; y1 hi
  11++DDC3 C9                                   ret
# file closed: ././ModelRender/getVertexNodeAtAToX2Y2.asm
   4++DDC4                  INCLUDE "./ModelRender/GetFaceAtA.asm"
# file opened: ././ModelRender/GetFaceAtA.asm
   1++DDC4              ;--------------------------------------------------------------------------------------------------------
   2++DDC4              GetFaceAtA:         MACRO
   3++DDC4 ~                                ld          hl,UbnkFaceVisArray
   4++DDC4 ~                                add         hl,a
   5++DDC4 ~                                ld          a,(hl)                              ; get face visibility
   6++DDC4                                  ENDM
   7++DDC4
# file closed: ././ModelRender/GetFaceAtA.asm
   5++DDC4              ;--------------------------------------------------------------------------------------------------------
   6++DDC4              ; LL72 Goes through each edge in to determine if they are on a visible face, if so load start and end to line array as clipped lines
   7++DDC4               ;   DEFINE NOBACKFACECULL 1
   8++DDC4 00           PLEDGECTR           DB          0
   9++DDC5
  10++DDC5              PrepLines:
  11++DDC5              ; FOR NOW BRUTE FORCE IF OFF SCREEN
  12++DDC5
  13++DDC5              ; TODO add in onced DOEXP is finished
  14++DDC5              ;        ld          a,(UBnkexplDsp)                     ; INWK+31  \ display/exploding state|missiles
  15++DDC5              ;        JumpOnBitClear  a,5,EE31                        ; bit5 of mask, if zero no explosion
  16++DDC5              ;        or          8
  17++DDC5              ;        ld          (UBnkexplDsp),a                     ; else else set bit3 to erase old line
  18++DDC5              ;        jp          DOEXP                               ; erase using Do Explosion and use implicit return
  19++DDC5              ;EE31:                                                   ; no explosion
  20++DDC5              ;        JumpOnBitClear  a,3,LL74                        ; clear is hop to do New lines
  21++DDC5              ;        call        ClearLine                           ; LL155    \ else erase lines in XX19 heap at LINEstr down
  22++DDC5              ;        ld          a, $08                              ; set bit 3 of a and fall into LL74
  23++DDC5              ;
  24++DDC5              ;--------------------------------------------------------------------------------------------------------
  25++DDC5              InitialiseLineRead:
  26++DDC5                      ;break
  27++DDC5                      ldWriteZero UbnkLineArrayLen                    ; current line array index = 0
  27++DDC5 AF          >                        xor      a
  27++DDC6 32 00 C3    >                        ld       (UbnkLineArrayLen),a
  28++DDC9                      ldWriteZero UbnkLineArrayBytes                  ; UbnkLineArrayBytes= nbr of bytes of lines laoded = array len * 4
  28++DDC9 AF          >                        xor      a
  28++DDCA 32 01 C3    >                        ld       (UbnkLineArrayBytes),a
  29++DDCD                      ldWriteZero PLEDGECTR
  29++DDCD AF          >                        xor      a
  29++DDCE 32 C4 DD    >                        ld       (PLEDGECTR),a
  30++DDD1 3A 15 C3             ld          a,(EdgeCountAddr)
  31++DDD4 DD 67                ld          ixh,a                               ; ixh = XX17 = Total number of edges to traverse
  32++DDD6 FD 2E 00             ld          iyl,0                               ; ixl = current edge index
  33++DDD9 21 0E C2             ld          hl,UbnkLineArray                    ; head of array
  34++DDDC 22 2A 99             ld          (varU16),hl                         ; store current line array pointer un varU16
  35++DDDF                      ldCopyByte  EdgeCountAddr, XX17                 ; XX17  = total number of edges to traverse edge counter
  35++DDDF 3A 15 C3    >                        ld       a,(EdgeCountAddr)
  35++DDE2 32 2E 99    >                        ld       (XX17),a
  36++DDE5 3A 35 C0             ld          a,(UBnKexplDsp)                     ; get explosion status
  37++DDE8                      JumpOnBitClear a,6,CalculateNewLines            ; LL170 bit6 of display state clear (laser not firing) \ Calculate new lines
  37++DDE8 CB 77       >                        bit 	6,a
  37++DDEA CA F2 DD    >                        jp      z,CalculateNewLines
  38++DDED E6 BF                and         $BF                                 ; else laser is firing, clear bit6.
  39++DDEF 32 35 C0             ld          (UBnKexplDsp),a                     ; INWK+31
  40++DDF2              ;   TODO commentedout as teh subroutine is a mess   call        AddLaserBeamLine                    ; add laser beam line to draw list
  41++DDF2              ; NOw we can calculate hull after including laser line
  42++DDF2              CalculateNewLines:
  43++DDF2              LL170:                                                  ;(laser not firing) \ Calculate new lines   \ their comment
  44++DDF2              CheckEdgesForVisibility:
  45++DDF2 21 51 C4             ld          hl,UBnkHullEdges
  46++DDF5                      ; TODO change heap to 3 separate arrays and break them down during copy of ship hull data
  47++DDF5 22 29 98             ld          (varV),hl                           ; V \ is pointer to where edges data start
  48++DDF8 3A 11 C3             ld          a,(LineX4Addr)
  49++DDFB 47                   ld          b,a                                 ; nbr of bytes of edge data
  50++DDFC              LL75Loop:                                               ; count Visible edges
  51++DDFC              IsEdgeInVisibilityRange:
  52++DDFC 2A 29 98             ld          hl,(varV)
  53++DDFF E5                   push        hl
  54++DE00 FD E1                pop         iy
  55++DE02                      IFDEF NOBACKFACECULL
  56++DE02 ~                        jp          VisibileEdge; DEBUGTODO
  57++DE02                      ENDIF
  58++DE02 3A 19 98             ld          a,(LastNormalVisible)               ; XX4 is visibility range
  59++DE05 57                   ld          d,a                                 ; d holds copy of XX4
  60++DE06              ; Get Edge Byte 0
  61++DE06 FD 7E 00             ld          a,(IY+0)                            ; edge data byte#0 is visibility distance
  62++DE09                      JumpIfALTNusng d,LL78EdgeNotVisible             ; XX4   \ visibility LLx78 edge not visible
  62++DE09 BA          >                        cp      d
  62++DE0A DA 5D DE    >                        jp		c, LL78EdgeNotVisible
  63++DE0D              EdgeMayBeVisibile:
  64++DE0D              ; Get Edge Byte 1
  65++DE0D              IsFace1Visibile:                                        ; edges have 2 faces to test
  66++DE0D FD 7E 01             ld          a,(IY+1)                            ; (V),Y \ edge data byte#1 bits 0 to 3 face 1 4 to 7 face 2
  67++DE10 4F                   ld          c,a                                 ;  c = a copy of byte 1
  68++DE11 E6 0F                and         $0F                                 ;
  69++DE13                      GetFaceAtA
  69++DE13 21 B0 C0    >                    ld          hl,UbnkFaceVisArray
  69++DE16 ED 31       >                    add         hl,a
  69++DE18 7E          >                    ld          a,(hl)                              ; get face visibility
  70++DE19              ;       jp  VisibileEdge; DEBUG BODGE TEST TODO
  71++DE19                      JumpIfAIsNotZero VisibileEdge                     ; LL70 visible edge
  71++DE19 FE 00       >                        cp	0
  71++DE1B C2 2F DE    >                        jp	nz,VisibileEdge
  72++DE1E              IsFace2Visibile:
  73++DE1E 79                   ld          a,c                                 ; restore byte 1 from c register
  74++DE1F ED 23                swapnib                                         ;
  75++DE21 E6 0F                and         $0F                                 ; swap high byte into low byte
  76++DE23 E5                   push        hl
  77++DE24                      GetFaceAtA
  77++DE24 21 B0 C0    >                    ld          hl,UbnkFaceVisArray
  77++DE27 ED 31       >                    add         hl,a
  77++DE29 7E          >                    ld          a,(hl)                              ; get face visibility
  78++DE2A E1                   pop         hl
  79++DE2B                      JumpIfAIsZero LL78EdgeNotVisible                ; edge not visible
  79++DE2B A7          >                        and a   ; cp 0 - changed to and a for optimisation but affects other flags
  79++DE2C CA 5D DE    >                        jp	z, LL78EdgeNotVisible
  80++DE2F              VisibileEdge:                                           ; Now we need to node id from bytes 2 - start and 3 - end
  81++DE2F              ;LL79--Visible edge--------------------------------------
  82++DE2F              ; Get Edge Byte 2
  83++DE2F FD 7E 02             ld          a,(IY+2)                            ; get Node id
  84++DE32 CD A0 DD             call        getVertexNodeAtAToX1Y1              ; get the points X1Y1 from node
  85++DE35 FD 7E 03             ld          a,(IY+3)
  86++DE38 CD B2 DD             call        getVertexNodeAtAToX2Y2              ; get the points X2Y2 from node
  87++DE3B CD 0E CD             call        ClipLine
  88++DE3E 38 1D                jr          c,LL78EdgeNotVisible                ; LL78 edge not visible
  89++DE40              LL80:                                                   ; ll80 \ Shove visible edge onto XX19 ship lines heap counter U
  90++DE40 ED 5B 2A 99          ld          de,(varU16)                         ; clipped edges heap address
  91++DE44 21 83 C0             ld          hl,UBnkNewX1
  92++DE47                      FourLDIInstrunctions
  92++DE47 ED A0       >                        ldi
  92++DE49 ED A0       >                        ldi
  92++DE4B ED A0       >                        ldi
  92++DE4D ED A0       >                        ldi
  93++DE4F ED 53 2A 99          ld          (varU16),de                         ; update U16 with current address
  94++DE53 21 00 C3             ld          hl,UbnkLineArrayLen                 ; we have loaded one line
  95++DE56 34                   inc         (hl)
  96++DE57 7E                   ld          a,(hl)
  97++DE58                      JumpIfAGTENusng LineArraySize,CompletedLineGeneration   ; have we hit max lines for a model hop over jmp to Exit edge data loop
  97++DE58 FE 32       >                        cp     LineArraySize
  97++DE5A D2 73 DE    >                        jp		nc,CompletedLineGeneration
  98++DE5D              ; If we hit here we skip the write of line arryay u16
  99++DE5D              LL78EdgeNotVisible:                                     ; also arrive here if Edge not visible, loop next data edge.
 100++DE5D              LL78:
 101++DE5D 2A 29 98             ld          hl,(varV)                           ; varV is current edge address
 102++DE60 3E 04                ld          a,4
 103++DE62 ED 31                add         hl,a
 104++DE64 22 29 98             ld          (varV),hl
 105++DE67 21 C4 DD             ld          hl,PLEDGECTR                        ;
 106++DE6A 34                   inc         (hl)                                ;
 107++DE6B 7E                   ld          a,(hl)                              ; current edge index ++
 108++DE6C                      JumpIfANEMemusng XX17,LL75Loop                  ; compare with total number of edges
 108++DE6C 21 2E 99    >                        ld    hl,XX17
 108++DE6F BE          >                        cp    (hl)
 108++DE70 C2 FC DD    >                        jp      nz,LL75Loop
 109++DE73              CompletedLineGeneration:
 110++DE73              LL81:
 111++DE73              LL81SHPPT:                                              ; SHPPT ship is a point arrives here with Acc=2, bottom entry in heap
 112++DE73 3A 00 C3             ld          a,(UbnkLineArrayLen)                ; UbnkLineArrayLen = nbr of lines loaded
 113++DE76 CB 27                sla         a
 114++DE78 CB 27                sla         a                                   ; multiple by 4 to equal number of bytes
 115++DE7A 32 01 C3             ld          (UbnkLineArrayBytes),a              ; UbnkLineArrayBytes= nbr of bytes of lines laoded = array len * 4
 116++DE7D              ExitEdgeDataLoop:
 117++DE7D C9                   ret
 118++DE7E
# file closed: ./Universe/Ships/PrepLines.asm
1523+ DE7E
1524+ DE7E              UnivBankSize  EQU $ - StartOfUniv
1525+ DE7E
# file closed: ./Universe/Ships/univ_ship_data.asm
1352  DE7E                  DISPLAY "Universe Data - Bytes free ",/D, $2000 - (UnivBankSize)
1353  DE7E                  SLOT    UniverseBankAddr
1354  DE7E                  PAGE    BankUNIVDATA1
1355  DE7E              	ORG	UniverseBankAddr,BankUNIVDATA1
1356  C000 FF           UNIVDATABlock1      DB $FF
1357  C001 00 00 00...                      DS $1FFF                 ; just allocate 8000 bytes for now
1358  E000
1359  E000                  SLOT    UniverseBankAddr
1360  E000                  PAGE    BankUNIVDATA2
1361  E000              	ORG	UniverseBankAddr,BankUNIVDATA2
1362  C000 FF           UNIVDATABlock2      DB $FF
1363  C001 00 00 00...                      DS $1FFF                 ; just allocate 8000 bytes for now
1364  E000
1365  E000                  SLOT    UniverseBankAddr
1366  E000                  PAGE    BankUNIVDATA3
1367  E000              	ORG	UniverseBankAddr,BankUNIVDATA3
1368  C000 FF           UNIVDATABlock3      DB $FF
1369  C001 00 00 00...                      DS $1FFF                 ; just allocate 8000 bytes for now
1370  E000
1371  E000                  SLOT    UniverseBankAddr
1372  E000                  PAGE    BankUNIVDATA4
1373  E000              	ORG	UniverseBankAddr,BankUNIVDATA4
1374  C000 FF           UNIVDATABlock4      DB $FF
1375  C001 00 00 00...                      DS $1FFF                 ; just allocate 8000 bytes for now
1376  E000
1377  E000                  SLOT    UniverseBankAddr
1378  E000                  PAGE    BankUNIVDATA5
1379  E000              	ORG	UniverseBankAddr,BankUNIVDATA5
1380  C000 FF           UNIVDATABlock5      DB $FF
1381  C001 00 00 00...                      DS $1FFF                 ; just allocate 8000 bytes for now
1382  E000
1383  E000                  SLOT    UniverseBankAddr
1384  E000                  PAGE    BankUNIVDATA6
1385  E000              	ORG	UniverseBankAddr,BankUNIVDATA6
1386  C000 FF           UNIVDATABlock6      DB $FF
1387  C001 00 00 00...                      DS $1FFF                 ; just allocate 8000 bytes for now
1388  E000
1389  E000                  SLOT    UniverseBankAddr
1390  E000                  PAGE    BankUNIVDATA7
1391  E000              	ORG	UniverseBankAddr,BankUNIVDATA7
1392  C000 FF           UNIVDATABlock7      DB $FF
1393  C001 00 00 00...                      DS $1FFF                 ; just allocate 8000 bytes for now
1394  E000
1395  E000                  SLOT    UniverseBankAddr
1396  E000                  PAGE    BankUNIVDATA8
1397  E000              	ORG	UniverseBankAddr,BankUNIVDATA8
1398  C000 FF           UNIVDATABlock8      DB $FF
1399  C001 00 00 00...                      DS $1FFF                 ; just allocate 8000 bytes for now
1400  E000
1401  E000                  SLOT    UniverseBankAddr
1402  E000                  PAGE    BankUNIVDATA9
1403  E000              	ORG	UniverseBankAddr,BankUNIVDATA9
1404  C000 FF           UNIVDATABlock9      DB $FF
1405  C001 00 00 00...                      DS $1FFF                 ; just allocate 8000 bytes for now
1406  E000
1407  E000                  SLOT    UniverseBankAddr
1408  E000                  PAGE    BankUNIVDATA10
1409  E000              	ORG	UniverseBankAddr,BankUNIVDATA10
1410  C000 FF           UNIVDATABlock10     DB $FF
1411  C001 00 00 00...                      DS $1FFF                 ; just allocate 8000 bytes for now
1412  E000
1413  E000                  SLOT    UniverseBankAddr
1414  E000                  PAGE    BankUNIVDATA11
1415  E000              	ORG	UniverseBankAddr,BankUNIVDATA11
1416  C000 FF           UNIVDATABlock11     DB $FF
1417  C001 00 00 00...                      DS $1FFF                 ; just allocate 8000 bytes for now
1418  E000
1419  E000                  SLOT    UniverseBankAddr
1420  E000                  PAGE    BankUNIVDATA12
1421  E000              	ORG	UniverseBankAddr,BankUNIVDATA12
1422  C000 FF           UNIVDATABlock12     DB $FF
1423  C001 00 00 00...                      DS $1FFF                 ; just allocate 8000 bytes for now
1424  E000
1425  E000                  SLOT    GalaxyDataAddr
1426  E000                  PAGE    BankGalaxyData0
1427  E000              	ORG GalaxyDataAddr, BankGalaxyData0
1428  E000                  INCLUDE "./Universe/Galaxy/galaxy_data.asm"
# file opened: ./Universe/Galaxy/galaxy_data.asm
   1+ E000 47 61 6C 61  galaxy_page_marker  DB "Galaxy      PG9"
   1+ E004 78 79 20 20
   1+ E008 20 20 20 20
   1+ E00C 50 47 39
   2+ E00F 30           galaxy_pg_cnt       DB "0"
   3+ E010 00 00 00...  galaxy_master_seed  DS 6
   4+ E016 00 00 00...  galaxy_data DS 8*256
   5+ E816 2D 2D 2D 2D  galaxy_code_end DB "-----------------------------------------------------------------"
   5+ E81A 2D 2D 2D 2D
   5+ E81E 2D 2D 2D 2D
   5+ E822 2D 2D 2D 2D
   5+ E826 2D 2D 2D 2D
   5+ E82A 2D 2D 2D 2D
   5+ E82E 2D 2D 2D 2D
   5+ E832 2D 2D 2D 2D
   5+ E836 2D 2D 2D 2D
   5+ E83A 2D 2D 2D 2D
   5+ E83E 2D 2D 2D 2D
   5+ E842 2D 2D 2D 2D
   5+ E846 2D 2D 2D 2D
   5+ E84A 2D 2D 2D 2D
   5+ E84E 2D 2D 2D 2D
   5+ E852 2D 2D 2D 2D
   5+ E856 2D
   6+ E857 00 00        GalaxyPresentSystem:     DW 0
   7+ E859 00 00        GalaxyDestinationSystem: DW 0
   8+ E85B 00 00        GalaxyTargetSystem:      DW 0
   9+ E85D              ; including a DB 0 as a catcher
  10+ E85D 00           GalaxySearchLength:      DB 0
  11+ E85E 00 00 00...  GalaxySearchString:      DS 32
  12+ E87E 00                                    DB 0
  13+ E87F 00 00 00...  GalaxyExpandedName:      DS 32
  14+ E89F 00                                    DB 0
  15+ E8A0 41 42 4F 55  GalaxyName_digrams	     DB "ABOUSEITILETSTONLONUTHNOALLEXEGEZACEBISOUSESARMAINDIREA?ERATENBERALAVETIEDORQUANTEISRION"
  15+ E8A4 53 45 49 54
  15+ E8A8 49 4C 45 54
  15+ E8AC 53 54 4F 4E
  15+ E8B0 4C 4F 4E 55
  15+ E8B4 54 48 4E 4F
  15+ E8B8 41 4C 4C 45
  15+ E8BC 58 45 47 45
  15+ E8C0 5A 41 43 45
  15+ E8C4 42 49 53 4F
  15+ E8C8 55 53 45 53
  15+ E8CC 41 52 4D 41
  15+ E8D0 49 4E 44 49
  15+ E8D4 52 45 41 3F
  15+ E8D8 45 52 41 54
  15+ E8DC 45 4E 42 45
  15+ E8E0 52 41 4C 41
  15+ E8E4 56 45 54 49
  15+ E8E8 45 44 4F 52
  15+ E8EC 51 55 41 4E
  15+ E8F0 54 45 49 53
  15+ E8F4 52 49 4F 4E
  16+ E8F8 00 00 00...  GalaxyWorkingSeed        DS 6
  17+ E8FE 00 00 00...  GalaxyNamingSeed         DS 6
  18+ E904 00 00 00...  GalaxySavedRandomSeed    DS 6
  19+ E90A
  20+ E90A 00           GalaxyDisplayGovernment         DB 0
  21+ E90B 00           GalaxyDisplayEconomy            DB 0
  22+ E90C 00           GalaxyDisplayTekLevel           DB 0
  23+ E90D 00           GalaxyDisplayPopulation         DB 0
  24+ E90E 00 00        GalaxyDisplayProductivity       DW 0
  25+ E910 00 00        GalaxyDisplayRadius             DW 0
  26+ E912
  27+ E912 66 61 62 6C  GalaxyDescList01A       DB "fabled",0
  27+ E916 65 64 00
  28+ E919 6E 6F 74 61  GalaxyDescList01B       DB "notable",0
  28+ E91D 62 6C 65 00
  29+ E921 77 65 6C 6C  GalaxyDescList01C       DB "well known",0
  29+ E925 20 6B 6E 6F
  29+ E929 77 6E 00
  30+ E92C 66 61 6D 6F  GalaxyDescList01D       DB "famous",0
  30+ E930 75 73 00
  31+ E933 6E 6F 74 65  GalaxyDescList01E       DB "noted",0
  31+ E937 64 00
  32+ E939 76 65 72 79  GalaxyDescList02A       DB "very",0
  32+ E93D 00
  33+ E93E 6D 69 6C 64  GalaxyDescList02B       DB "mildly",0
  33+ E942 6C 79 00
  34+ E945 6D 6F 73 74  GalaxyDescList02C       DB "most",0
  34+ E949 00
  35+ E94A 72 65 61 73  GalaxyDescList02D       DB "reasonably",0
  35+ E94E 6F 6E 61 62
  35+ E952 6C 79 00
  36+ E955 00           GalaxyDescList02E       DB 0
  37+ E956 61 6E 63 69  GalaxyDescList03A       DB "ancient",0
  37+ E95A 65 6E 74 00
  38+ E95E 3C 32 30 3E  GalaxyDescList03B       DB "<20>",0
  38+ E962 00
  39+ E963 67 72 65 61  GalaxyDescList03C       DB "great",0
  39+ E967 74 00
  40+ E969 76 61 73 74  GalaxyDescList03D       DB "vast",0
  40+ E96D 00
  41+ E96E 70 69 6E 6B  GalaxyDescList03E       DB "pink",0
  41+ E972 00
  42+ E973 3C 32 39 3E  GalaxyDescList04A       DB "<29> <28> plantations",0
  42+ E977 20 3C 32 38
  42+ E97B 3E 20 70 6C
  42+ E97F 61 6E 74 61
  42+ E983 74 69 6F 6E
  42+ E987 73 00
  43+ E989 6D 6F 75 6E  GalaxyDescList04B       DB "mountains",0
  43+ E98D 74 61 69 6E
  43+ E991 73 00
  44+ E993 3C 32 37 3E  GalaxyDescList04C       DB "<27>",0
  44+ E997 00
  45+ E998 3C 31 39 3E  GalaxyDescList04D       DB "<19> forests",0
  45+ E99C 20 66 6F 72
  45+ E9A0 65 73 74 73
  45+ E9A4 00
  46+ E9A5 6F 63 65 61  GalaxyDescList04E       DB "oceans",0
  46+ E9A9 6E 73 00
  47+ E9AC 73 68 79 6E  GalaxyDescList05A       DB "shyness",0
  47+ E9B0 65 73 73 00
  48+ E9B4 73 69 6C 6C  GalaxyDescList05B       DB "silliness",0
  48+ E9B8 69 6E 65 73
  48+ E9BC 73 00
  49+ E9BE 6D 61 74 69  GalaxyDescList05C       DB "mating traditions",0
  49+ E9C2 6E 67 20 74
  49+ E9C6 72 61 64 69
  49+ E9CA 74 69 6F 6E
  49+ E9CE 73 00
  50+ E9D0 6C 6F 61 74  GalaxyDescList05D       DB "loathing of <5>",0
  50+ E9D4 68 69 6E 67
  50+ E9D8 20 6F 66 20
  50+ E9DC 3C 35 3E 00
  51+ E9E0 6C 6F 76 65  GalaxyDescList05E       DB "love for <5>",0
  51+ E9E4 20 66 6F 72
  51+ E9E8 20 3C 35 3E
  51+ E9EC 00
  52+ E9ED 66 6F 6F 64  GalaxyDescList06A       DB "food blenders",0
  52+ E9F1 20 62 6C 65
  52+ E9F5 6E 64 65 72
  52+ E9F9 73 00
  53+ E9FB 74 6F 75 72  GalaxyDescList06B       DB "tourists",0
  53+ E9FF 69 73 74 73
  53+ EA03 00
  54+ EA04 70 6F 65 74  GalaxyDescList06C       DB "poetry",0
  54+ EA08 72 79 00
  55+ EA0B 64 69 73 63  GalaxyDescList06D       DB "discos",0
  55+ EA0F 6F 73 00
  56+ EA12 3C 31 33 3E  GalaxyDescList06E       DB "<13>",0
  56+ EA16 00
  57+ EA17 74 61 6C 6B  GalaxyDescList07A       DB "talking tree",0
  57+ EA1B 69 6E 67 20
  57+ EA1F 74 72 65 65
  57+ EA23 00
  58+ EA24 63 72 61 62  GalaxyDescList07B       DB "crab",0
  58+ EA28 00
  59+ EA29 62 61 74 00  GalaxyDescList07C       DB "bat",0
  60+ EA2D 6C 6F 62 73  GalaxyDescList07D       DB "lobst",0
  60+ EA31 74 00
  61+ EA33 25 52 00     GalaxyDescList07E       DB "%R",0
  62+ EA36 62 65 73 65  GalaxyDescList08A       DB "beset",0
  62+ EA3A 74 00
  63+ EA3C 70 6C 61 67  GalaxyDescList08B       DB "plagued",0
  63+ EA40 75 65 64 00
  64+ EA44 72 61 76 61  GalaxyDescList08C       DB "ravaged",0
  64+ EA48 67 65 64 00
  65+ EA4C 63 75 72 73  GalaxyDescList08D       DB "cursed",0
  65+ EA50 65 64 00
  66+ EA53 73 63 6F 75  GalaxyDescList08E       DB "scourged",0
  66+ EA57 72 67 65 64
  66+ EA5B 00
  67+ EA5C 3C 32 31 3E  GalaxyDescList09A       DB "<21> civil war",0
  67+ EA60 20 63 69 76
  67+ EA64 69 6C 20 77
  67+ EA68 61 72 00
  68+ EA6B 3C 32 36 3E  GalaxyDescList09B       DB "<26> <23> <24>s",0
  68+ EA6F 20 3C 32 33
  68+ EA73 3E 20 3C 32
  68+ EA77 34 3E 73 00
  69+ EA7B 61 20 3C 32  GalaxyDescList09C       DB "a <26> disease",0
  69+ EA7F 36 3E 20 64
  69+ EA83 69 73 65 61
  69+ EA87 73 65 00
  70+ EA8A 3C 32 31 3E  GalaxyDescList09D       DB "<21> earthquakes",0
  70+ EA8E 20 65 61 72
  70+ EA92 74 68 71 75
  70+ EA96 61 6B 65 73
  70+ EA9A 00
  71+ EA9B 3C 32 31 3E  GalaxyDescList09E       DB "<21> solar activity",0
  71+ EA9F 20 73 6F 6C
  71+ EAA3 61 72 20 61
  71+ EAA7 63 74 69 76
  71+ EAAB 69 74 79 00
  72+ EAAF 69 74 73 20  GalaxyDescList10A       DB "its <2> <3>",0
  72+ EAB3 3C 32 3E 20
  72+ EAB7 3C 33 3E 00
  73+ EABB 74 68 65 20  GalaxyDescList10B       DB "the %I <23> <24>",0
  73+ EABF 25 49 20 3C
  73+ EAC3 32 33 3E 20
  73+ EAC7 3C 32 34 3E
  73+ EACB 00
  74+ EACC 69 74 73 20  GalaxyDescList10C       DB "its inhabitants' <25> <4>",0
  74+ EAD0 69 6E 68 61
  74+ EAD4 62 69 74 61
  74+ EAD8 6E 74 73 27
  74+ EADC 20 3C 32 35
  74+ EAE0 3E 20 3C 34
  74+ EAE4 3E 00
  75+ EAE6 3C 33 32 3E  GalaxyDescList10D       DB "<32>",0
  75+ EAEA 00
  76+ EAEB 69 74 73 20  GalaxyDescList10E       DB "its <12> <13>",0
  76+ EAEF 3C 31 32 3E
  76+ EAF3 20 3C 31 33
  76+ EAF7 3E 00
  77+ EAF9 6A 75 69 63  GalaxyDescList11A       DB "juice",0
  77+ EAFD 65 00
  78+ EAFF 62 72 61 6E  GalaxyDescList11B       DB "brandy",0
  78+ EB03 64 79 00
  79+ EB06 77 61 74 65  GalaxyDescList11C       DB "water",0
  79+ EB0A 72 00
  80+ EB0C 62 72 65 77  GalaxyDescList11D       DB "brew",0
  80+ EB10 00
  81+ EB11 67 61 72 67  GalaxyDescList11E       DB "gargle blasters",0
  81+ EB15 6C 65 20 62
  81+ EB19 6C 61 73 74
  81+ EB1D 65 72 73 00
  82+ EB21 25 52 00     GalaxyDescList12A       DB "%R",0
  83+ EB24 25 49 20 3C  GalaxyDescList12B       DB "%I <24>",0
  83+ EB28 32 34 3E 00
  84+ EB2C 25 49 20 25  GalaxyDescList12C       DB "%I %R",0
  84+ EB30 52 00
  85+ EB32 25 49 20 3C  GalaxyDescList12D       DB "%I <26>",0
  85+ EB36 32 36 3E 00
  86+ EB3A 3C 32 36 3E  GalaxyDescList12E       DB "<26> %R",0
  86+ EB3E 20 25 52 00
  87+ EB42 66 61 62 75  GalaxyDescList13A       DB "fabulous",0
  87+ EB46 6C 6F 75 73
  87+ EB4A 00
  88+ EB4B 65 78 6F 74  GalaxyDescList13B       DB "exotic",0
  88+ EB4F 69 63 00
  89+ EB52 68 6F 6F 70  GalaxyDescList13C       DB "hoopy",0
  89+ EB56 79 00
  90+ EB58 75 6E 75 73  GalaxyDescList13D       DB "unusual",0
  90+ EB5C 75 61 6C 00
  91+ EB60 65 78 63 69  GalaxyDescList13E       DB "exciting",0
  91+ EB64 74 69 6E 67
  91+ EB68 00
  92+ EB69 63 75 69 73  GalaxyDescList14A       DB "cuisine",0
  92+ EB6D 69 6E 65 00
  93+ EB71 6E 69 67 68  GalaxyDescList14B       DB "night life",0
  93+ EB75 74 20 6C 69
  93+ EB79 66 65 00
  94+ EB7C 63 61 73 69  GalaxyDescList14C       DB "casinos",0
  94+ EB80 6E 6F 73 00
  95+ EB84 73 69 74 20  GalaxyDescList14D       DB "sit coms",0
  95+ EB88 63 6F 6D 73
  95+ EB8C 00
  96+ EB8D 20 3C 33 32  GalaxyDescList14E       DB " <32> ",0
  96+ EB91 3E 20 00
  97+ EB94 25 48 00     GalaxyDescList15A       DB "%H",0
  98+ EB97 54 68 65 20  GalaxyDescList15B       DB "The planet %H",0
  98+ EB9B 70 6C 61 6E
  98+ EB9F 65 74 20 25
  98+ EBA3 48 00
  99+ EBA5 54 68 65 20  GalaxyDescList15C       DB "The world %H",0
  99+ EBA9 77 6F 72 6C
  99+ EBAD 64 20 25 48
  99+ EBB1 00
 100+ EBB2 54 68 69 73  GalaxyDescList15D       DB "This planet",0
 100+ EBB6 20 70 6C 61
 100+ EBBA 6E 65 74 00
 101+ EBBE 54 68 69 73  GalaxyDescList15E       DB "This world",0
 101+ EBC2 20 77 6F 72
 101+ EBC6 6C 64 00
 102+ EBC9 6E 20 75 6E  GalaxyDescList16A       DB "n unremarkable",0
 102+ EBCD 72 65 6D 61
 102+ EBD1 72 6B 61 62
 102+ EBD5 6C 65 00
 103+ EBD8 20 62 6F 72  GalaxyDescList16B       DB " boring",0
 103+ EBDC 69 6E 67 00
 104+ EBE0 20 64 75 6C  GalaxyDescList16C       DB " dull",0
 104+ EBE4 6C 00
 105+ EBE6 20 74 65 64  GalaxyDescList16D       DB " tedious",0
 105+ EBEA 69 6F 75 73
 105+ EBEE 00
 106+ EBEF 20 72 65 76  GalaxyDescList16E       DB " revolting",0
 106+ EBF3 6F 6C 74 69
 106+ EBF7 6E 67 00
 107+ EBFA 70 6C 61 6E  GalaxyDescList17A       DB "planet",0
 107+ EBFE 65 74 00
 108+ EC01 77 6F 72 6C  GalaxyDescList17B       DB "world",0
 108+ EC05 64 00
 109+ EC07 70 6C 61 63  GalaxyDescList17C       DB "place",0
 109+ EC0B 65 00
 110+ EC0D 6C 69 74 74  GalaxyDescList17D       DB "little planet",0
 110+ EC11 6C 65 20 70
 110+ EC15 6C 61 6E 65
 110+ EC19 74 00
 111+ EC1B 64 75 6D 70  GalaxyDescList17E       DB "dump",0
 111+ EC1F 00
 112+ EC20 77 61 73 70  GalaxyDescList18A       DB "wasp",0
 112+ EC24 00
 113+ EC25 6D 6F 74 68  GalaxyDescList18B       DB "moth",0
 113+ EC29 00
 114+ EC2A 67 72 75 62  GalaxyDescList18C       DB "grub",0
 114+ EC2E 00
 115+ EC2F 61 6E 74 00  GalaxyDescList18D       DB "ant",0
 116+ EC33 25 52 00     GalaxyDescList18E       DB "%R",0
 117+ EC36 70 6F 65 74  GalaxyDescList19A       DB "poet",0
 117+ EC3A 00
 118+ EC3B 61 72 74 73  GalaxyDescList19B       DB "arts graduate",0
 118+ EC3F 20 67 72 61
 118+ EC43 64 75 61 74
 118+ EC47 65 00
 119+ EC49 79 61 6B 00  GalaxyDescList19C       DB "yak",0
 120+ EC4D 73 6E 61 69  GalaxyDescList19D       DB "snail",0
 120+ EC51 6C 00
 121+ EC53 73 6C 75 67  GalaxyDescList19E       DB "slug",0
 121+ EC57 00
 122+ EC58 74 72 6F 70  GalaxyDescList20A       DB "tropical",0
 122+ EC5C 69 63 61 6C
 122+ EC60 00
 123+ EC61 64 65 6E 73  GalaxyDescList20B       DB "dense",0
 123+ EC65 65 00
 124+ EC67 72 61 69 6E  GalaxyDescList20C       DB "rain",0
 124+ EC6B 00
 125+ EC6C 69 6D 70 65  GalaxyDescList20D       DB "impenetrable",0
 125+ EC70 6E 65 74 72
 125+ EC74 61 62 6C 65
 125+ EC78 00
 126+ EC79 65 78 75 62  GalaxyDescList20E       DB "exuberant",0
 126+ EC7D 65 72 61 6E
 126+ EC81 74 00
 127+ EC83 66 75 6E 6E  GalaxyDescList21A       DB "funny",0
 127+ EC87 79 00
 128+ EC89 77 69 65 72  GalaxyDescList21B       DB "wierd",0
 128+ EC8D 64 00
 129+ EC8F 75 6E 75 73  GalaxyDescList21C       DB "unusual",0
 129+ EC93 75 61 6C 00
 130+ EC97 73 74 72 61  GalaxyDescList21D       DB "strange",0
 130+ EC9B 6E 67 65 00
 131+ EC9F 70 65 63 75  GalaxyDescList21E       DB "peculiar",0
 131+ ECA3 6C 69 61 72
 131+ ECA7 00
 132+ ECA8 66 72 65 71  GalaxyDescList22A       DB "frequent",0
 132+ ECAC 75 65 6E 74
 132+ ECB0 00
 133+ ECB1 6F 63 63 61  GalaxyDescList22B       DB "occasional",0
 133+ ECB5 73 69 6F 6E
 133+ ECB9 61 6C 00
 134+ ECBC 75 6E 70 72  GalaxyDescList22C       DB "unpredictable",0
 134+ ECC0 65 64 69 63
 134+ ECC4 74 61 62 6C
 134+ ECC8 65 00
 135+ ECCA 64 72 65 61  GalaxyDescList22D       DB "dreadful",0
 135+ ECCE 64 66 75 6C
 135+ ECD2 00
 136+ ECD3 64 65 61 64  GalaxyDescList22E       DB "deadly",0
 136+ ECD7 6C 79 00
 137+ ECDA 3C 31 3E 20  GalaxyDescList23A       DB "<1> <0> for <9>",0
 137+ ECDE 3C 30 3E 20
 137+ ECE2 66 6F 72 20
 137+ ECE6 3C 39 3E 00
 138+ ECEA 3C 31 3E 20  GalaxyDescList23B       DB "<1> <0> for <9> and <9>",0
 138+ ECEE 3C 30 3E 20
 138+ ECF2 66 6F 72 20
 138+ ECF6 3C 39 3E 20
 138+ ECFA 61 6E 64 20
 138+ ECFE 3C 39 3E 00
 139+ ED02 3C 37 3E 20  GalaxyDescList23C       DB "<7> by <8>",0
 139+ ED06 62 79 20 3C
 139+ ED0A 38 3E 00
 140+ ED0D 3C 31 3E 20  GalaxyDescList23D       DB "<1> <0> for <9> but <7> by <8>",0
 140+ ED11 3C 30 3E 20
 140+ ED15 66 6F 72 20
 140+ ED19 3C 39 3E 20
 140+ ED1D 62 75 74 20
 140+ ED21 3C 37 3E 20
 140+ ED25 62 79 20 3C
 140+ ED29 38 3E 00
 141+ ED2C 61 3C 31 35  GalaxyDescList23E       DB "a<15> <16>",0
 141+ ED30 3E 20 3C 31
 141+ ED34 36 3E 00
 142+ ED37 3C 32 36 3E  GalaxyDescList24A       DB "<26>",0
 142+ ED3B 00
 143+ ED3C 6D 6F 75 6E  GalaxyDescList24B       DB "mountain",0
 143+ ED40 74 61 69 6E
 143+ ED44 00
 144+ ED45 65 64 69 62  GalaxyDescList24C       DB "edible",0
 144+ ED49 6C 65 00
 145+ ED4C 74 72 65 65  GalaxyDescList24D       DB "tree",0
 145+ ED50 00
 146+ ED51 73 70 6F 74  GalaxyDescList24E       DB "spotted",0
 146+ ED55 74 65 64 00
 147+ ED59 3C 33 30 3E  GalaxyDescList25A       DB "<30>",0
 147+ ED5D 00
 148+ ED5E 3C 33 31 3E  GalaxyDescList25B       DB "<31>",0
 148+ ED62 00
 149+ ED63 3C 36 3E 6F  GalaxyDescList25C       DB "<6>oid",0
 149+ ED67 69 64 00
 150+ ED6A 3C 31 38 3E  GalaxyDescList25D       DB "<18>",0
 150+ ED6E 00
 151+ ED6F 3C 31 37 3E  GalaxyDescList25E       DB "<17>",0
 151+ ED73 00
 152+ ED74 61 6E 63 69  GalaxyDescList26A       DB "ancient",0
 152+ ED78 65 6E 74 00
 153+ ED7C 65 78 63 65  GalaxyDescList26B       DB "exceptional",0
 153+ ED80 70 74 69 6F
 153+ ED84 6E 61 6C 00
 154+ ED88 65 63 63 65  GalaxyDescList26C       DB "eccentric",0
 154+ ED8C 6E 74 72 69
 154+ ED90 63 00
 155+ ED92 69 6E 67 72  GalaxyDescList26D       DB "ingrained",0
 155+ ED96 61 69 6E 65
 155+ ED9A 64 00
 156+ ED9C 3C 32 30 3E  GalaxyDescList26E       DB "<20>",0
 156+ EDA0 00
 157+ EDA1 6B 69 6C 6C  GalaxyDescList27A       DB "killer",0
 157+ EDA5 65 72 00
 158+ EDA8 64 65 61 64  GalaxyDescList27B       DB "deadly",0
 158+ EDAC 6C 79 00
 159+ EDAF 65 76 69 6C  GalaxyDescList27C       DB "evil",0
 159+ EDB3 00
 160+ EDB4 6C 65 74 68  GalaxyDescList27D       DB "lethal",0
 160+ EDB8 61 6C 00
 161+ EDBB 76 69 63 69  GalaxyDescList27E       DB "vicious",0
 161+ EDBF 6F 75 73 00
 162+ EDC3 70 61 72 6B  GalaxyDescList28A       DB "parking meters",0
 162+ EDC7 69 6E 67 20
 162+ EDCB 6D 65 74 65
 162+ EDCF 72 73 00
 163+ EDD2 64 75 73 74  GalaxyDescList28B       DB "dust clouds",0
 163+ EDD6 20 63 6C 6F
 163+ EDDA 75 64 73 00
 164+ EDDE 69 63 65 20  GalaxyDescList28C       DB "ice bergs",0
 164+ EDE2 62 65 72 67
 164+ EDE6 73 00
 165+ EDE8 72 6F 63 6B  GalaxyDescList28D       DB "rock formations",0
 165+ EDEC 20 66 6F 72
 165+ EDF0 6D 61 74 69
 165+ EDF4 6F 6E 73 00
 166+ EDF8 76 6F 6C 63  GalaxyDescList28E       DB "volcanoes",0
 166+ EDFC 61 6E 6F 65
 166+ EE00 73 00
 167+ EE02 70 6C 61 6E  GalaxyDescList29A       DB "plant",0
 167+ EE06 74 00
 168+ EE08 74 75 6C 69  GalaxyDescList29B       DB "tulip",0
 168+ EE0C 70 00
 169+ EE0E 62 61 6E 61  GalaxyDescList29C       DB "banana",0
 169+ EE12 6E 61 00
 170+ EE15 63 6F 72 6E  GalaxyDescList29D       DB "corn",0
 170+ EE19 00
 171+ EE1A 25 52 77 65  GalaxyDescList29E       DB "%Rweed",0
 171+ EE1E 65 64 00
 172+ EE21 25 52 00     GalaxyDescList30A       DB "%R",0
 173+ EE24 23 49 20 25  GalaxyDescList30B       DB "#I %R",0
 173+ EE28 52 00
 174+ EE2A 23 49 20 3C  GalaxyDescList30C       DB "#I <26>",0
 174+ EE2E 32 36 3E 00
 175+ EE32 69 6E 68 61  GalaxyDescList30D       DB "inhabitant",0
 175+ EE36 62 69 74 61
 175+ EE3A 6E 74 00
 176+ EE3D 25 49 20 25  GalaxyDescList30E       DB "%I %R",0
 176+ EE41 52 00
 177+ EE43 73 68 72 65  GalaxyDescList31A       DB "shrew",0
 177+ EE47 77 00
 178+ EE49 62 65 61 73  GalaxyDescList31B       DB "beast",0
 178+ EE4D 74 00
 179+ EE4F 62 69 73 6F  GalaxyDescList31C       DB "bison",0
 179+ EE53 6E 00
 180+ EE55 73 6E 61 6B  GalaxyDescList31D       DB "snake",0
 180+ EE59 65 00
 181+ EE5B 77 6F 6C 66  GalaxyDescList31E       DB "wolf",0
 181+ EE5F 00
 182+ EE60 6C 65 6F 70  GalaxyDescList32A       DB "leopard",0
 182+ EE64 61 72 64 00
 183+ EE68 63 61 74 00  GalaxyDescList32B       DB "cat",0
 184+ EE6C 6D 6F 6E 6B  GalaxyDescList32C       DB "monkey",0
 184+ EE70 65 79 00
 185+ EE73 67 6F 61 74  GalaxyDescList32D       DB "goat",0
 185+ EE77 00
 186+ EE78 66 69 73 68  GalaxyDescList32E       DB "fish",0
 186+ EE7C 00
 187+ EE7D 3C 31 31 3E  GalaxyDescList33A       DB "<11> <10>",0
 187+ EE81 20 3C 31 30
 187+ EE85 3E 00
 188+ EE87 23 49 20 3C  GalaxyDescList33B       DB "#I <30> <33>",0
 188+ EE8B 33 30 3E 20
 188+ EE8F 3C 33 33 3E
 188+ EE93 00
 189+ EE94 69 74 73 20  GalaxyDescList33C       DB "its <12> <31> <33>",0
 189+ EE98 3C 31 32 3E
 189+ EE9C 20 3C 33 31
 189+ EEA0 3E 20 3C 33
 189+ EEA4 33 3E 00
 190+ EEA7 3C 33 34 3E  GalaxyDescList33D       DB "<34> <35>",0
 190+ EEAB 20 3C 33 35
 190+ EEAF 3E 00
 191+ EEB1 3C 31 31 3E  GalaxyDescList33E       DB "<11> <10>",0
 191+ EEB5 20 3C 31 30
 191+ EEB9 3E 00
 192+ EEBB 6D 65 61 74  GalaxyDescList34A       DB "meat",0
 192+ EEBF 00
 193+ EEC0 63 75 74 6C  GalaxyDescList34B       DB "cutlet",0
 193+ EEC4 65 74 00
 194+ EEC7 73 74 65 61  GalaxyDescList34C       DB "steak",0
 194+ EECB 6B 00
 195+ EECD 62 75 72 67  GalaxyDescList34D       DB "burgers",0
 195+ EED1 65 72 73 00
 196+ EED5 73 6F 75 70  GalaxyDescList34E       DB "soup",0
 196+ EED9 00
 197+ EEDA 69 63 65 00  GalaxyDescList35A       DB "ice",0
 198+ EEDE 6D 75 64 00  GalaxyDescList35B       DB "mud",0
 199+ EEE2 5A 65 72 6F  GalaxyDescList35C       DB "Zero-G",0
 199+ EEE6 2D 47 00
 200+ EEE9 76 61 63 75  GalaxyDescList35D       DB "vacuum",0
 200+ EEED 75 6D 00
 201+ EEF0 25 49 20 75  GalaxyDescList35E       DB "%I ultra",0
 201+ EEF4 6C 74 72 61
 201+ EEF8 00
 202+ EEF9 68 6F 63 6B  GalaxyDescList36A       DB "hockey",0
 202+ EEFD 65 79 00
 203+ EF00 63 72 69 63  GalaxyDescList36B       DB "cricket",0
 203+ EF04 6B 65 74 00
 204+ EF08 6B 61 72 61  GalaxyDescList36C       DB "karate",0
 204+ EF0C 74 65 00
 205+ EF0F 70 6F 6C 6F  GalaxyDescList36D       DB "polo",0
 205+ EF13 00
 206+ EF14 74 65 6E 6E  GalaxyDescList36E       DB "tennis",0
 206+ EF18 69 73 00
 207+ EF1B
 208+ EF1B 12 E9 19 E9  GalaxyDescList          DW GalaxyDescList01A, GalaxyDescList01B, GalaxyDescList01C, GalaxyDescList01D, GalaxyDescList01E
 208+ EF1F 21 E9 2C E9
 208+ EF23 33 E9
 209+ EF25 39 E9 3E E9                          DW GalaxyDescList02A, GalaxyDescList02B, GalaxyDescList02C, GalaxyDescList02D, GalaxyDescList02E
 209+ EF29 45 E9 4A E9
 209+ EF2D 55 E9
 210+ EF2F 56 E9 5E E9                          DW GalaxyDescList03A, GalaxyDescList03B, GalaxyDescList03C, GalaxyDescList03D, GalaxyDescList03E
 210+ EF33 63 E9 69 E9
 210+ EF37 6E E9
 211+ EF39 73 E9 89 E9                          DW GalaxyDescList04A, GalaxyDescList04B, GalaxyDescList04C, GalaxyDescList04D, GalaxyDescList04E
 211+ EF3D 93 E9 98 E9
 211+ EF41 A5 E9
 212+ EF43 AC E9 B4 E9                          DW GalaxyDescList05A, GalaxyDescList05B, GalaxyDescList05C, GalaxyDescList05D, GalaxyDescList05E
 212+ EF47 BE E9 D0 E9
 212+ EF4B E0 E9
 213+ EF4D ED E9 FB E9                          DW GalaxyDescList06A, GalaxyDescList06B, GalaxyDescList06C, GalaxyDescList06D, GalaxyDescList06E
 213+ EF51 04 EA 0B EA
 213+ EF55 12 EA
 214+ EF57 17 EA 24 EA                          DW GalaxyDescList07A, GalaxyDescList07B, GalaxyDescList07C, GalaxyDescList07D, GalaxyDescList07E
 214+ EF5B 29 EA 2D EA
 214+ EF5F 33 EA
 215+ EF61 36 EA 3C EA                          DW GalaxyDescList08A, GalaxyDescList08B, GalaxyDescList08C, GalaxyDescList08D, GalaxyDescList08E
 215+ EF65 44 EA 4C EA
 215+ EF69 53 EA
 216+ EF6B 5C EA 6B EA                          DW GalaxyDescList09A, GalaxyDescList09B, GalaxyDescList09C, GalaxyDescList09D, GalaxyDescList09E
 216+ EF6F 7B EA 8A EA
 216+ EF73 9B EA
 217+ EF75 AF EA BB EA                          DW GalaxyDescList10A, GalaxyDescList10B, GalaxyDescList10C, GalaxyDescList10D, GalaxyDescList10E
 217+ EF79 CC EA E6 EA
 217+ EF7D EB EA
 218+ EF7F F9 EA FF EA                          DW GalaxyDescList11A, GalaxyDescList11B, GalaxyDescList11C, GalaxyDescList11D, GalaxyDescList11E
 218+ EF83 06 EB 0C EB
 218+ EF87 11 EB
 219+ EF89 21 EB 24 EB                          DW GalaxyDescList12A, GalaxyDescList12B, GalaxyDescList12C, GalaxyDescList12D, GalaxyDescList12E
 219+ EF8D 2C EB 32 EB
 219+ EF91 3A EB
 220+ EF93 42 EB 4B EB                          DW GalaxyDescList13A, GalaxyDescList13B, GalaxyDescList13C, GalaxyDescList13D, GalaxyDescList13E
 220+ EF97 52 EB 58 EB
 220+ EF9B 60 EB
 221+ EF9D 69 EB 71 EB                          DW GalaxyDescList14A, GalaxyDescList14B, GalaxyDescList14C, GalaxyDescList14D, GalaxyDescList14E
 221+ EFA1 7C EB 84 EB
 221+ EFA5 8D EB
 222+ EFA7 94 EB 97 EB                          DW GalaxyDescList15A, GalaxyDescList15B, GalaxyDescList15C, GalaxyDescList15D, GalaxyDescList15E
 222+ EFAB A5 EB B2 EB
 222+ EFAF BE EB
 223+ EFB1 C9 EB D8 EB                          DW GalaxyDescList16A, GalaxyDescList16B, GalaxyDescList16C, GalaxyDescList16D, GalaxyDescList16E
 223+ EFB5 E0 EB E6 EB
 223+ EFB9 EF EB
 224+ EFBB FA EB 01 EC                          DW GalaxyDescList17A, GalaxyDescList17B, GalaxyDescList17C, GalaxyDescList17D, GalaxyDescList17E
 224+ EFBF 07 EC 0D EC
 224+ EFC3 1B EC
 225+ EFC5 20 EC 25 EC                          DW GalaxyDescList18A, GalaxyDescList18B, GalaxyDescList18C, GalaxyDescList18D, GalaxyDescList18E
 225+ EFC9 2A EC 2F EC
 225+ EFCD 33 EC
 226+ EFCF 36 EC 3B EC                          DW GalaxyDescList19A, GalaxyDescList19B, GalaxyDescList19C, GalaxyDescList19D, GalaxyDescList19E
 226+ EFD3 49 EC 4D EC
 226+ EFD7 53 EC
 227+ EFD9 58 EC 61 EC                          DW GalaxyDescList20A, GalaxyDescList20B, GalaxyDescList20C, GalaxyDescList20D, GalaxyDescList20E
 227+ EFDD 67 EC 6C EC
 227+ EFE1 79 EC
 228+ EFE3 83 EC 89 EC                          DW GalaxyDescList21A, GalaxyDescList21B, GalaxyDescList21C, GalaxyDescList21D, GalaxyDescList21E
 228+ EFE7 8F EC 97 EC
 228+ EFEB 9F EC
 229+ EFED A8 EC B1 EC                          DW GalaxyDescList22A, GalaxyDescList22B, GalaxyDescList22C, GalaxyDescList22D, GalaxyDescList22E
 229+ EFF1 BC EC CA EC
 229+ EFF5 D3 EC
 230+ EFF7 DA EC EA EC                          DW GalaxyDescList23A, GalaxyDescList23B, GalaxyDescList23C, GalaxyDescList23D, GalaxyDescList23E
 230+ EFFB 02 ED 0D ED
 230+ EFFF 2C ED
 231+ F001 37 ED 3C ED                          DW GalaxyDescList24A, GalaxyDescList24B, GalaxyDescList24C, GalaxyDescList24D, GalaxyDescList24E
 231+ F005 45 ED 4C ED
 231+ F009 51 ED
 232+ F00B 59 ED 5E ED                          DW GalaxyDescList25A, GalaxyDescList25B, GalaxyDescList25C, GalaxyDescList25D, GalaxyDescList25E
 232+ F00F 63 ED 6A ED
 232+ F013 6F ED
 233+ F015 74 ED 7C ED                          DW GalaxyDescList26A, GalaxyDescList26B, GalaxyDescList26C, GalaxyDescList26D, GalaxyDescList26E
 233+ F019 88 ED 92 ED
 233+ F01D 9C ED
 234+ F01F A1 ED A8 ED                          DW GalaxyDescList27A, GalaxyDescList27B, GalaxyDescList27C, GalaxyDescList27D, GalaxyDescList27E
 234+ F023 AF ED B4 ED
 234+ F027 BB ED
 235+ F029 C3 ED D2 ED                          DW GalaxyDescList28A, GalaxyDescList28B, GalaxyDescList28C, GalaxyDescList28D, GalaxyDescList28E
 235+ F02D DE ED E8 ED
 235+ F031 F8 ED
 236+ F033 02 EE 08 EE                          DW GalaxyDescList29A, GalaxyDescList29B, GalaxyDescList29C, GalaxyDescList29D, GalaxyDescList29E
 236+ F037 0E EE 15 EE
 236+ F03B 1A EE
 237+ F03D 21 EE 24 EE                          DW GalaxyDescList30A, GalaxyDescList30B, GalaxyDescList30C, GalaxyDescList30D, GalaxyDescList30E
 237+ F041 2A EE 32 EE
 237+ F045 3D EE
 238+ F047 43 EE 49 EE                          DW GalaxyDescList31A, GalaxyDescList31B, GalaxyDescList31C, GalaxyDescList31D, GalaxyDescList31E
 238+ F04B 4F EE 55 EE
 238+ F04F 5B EE
 239+ F051 60 EE 68 EE                          DW GalaxyDescList32A, GalaxyDescList32B, GalaxyDescList32C, GalaxyDescList32D, GalaxyDescList32E
 239+ F055 6C EE 73 EE
 239+ F059 78 EE
 240+ F05B 7D EE 87 EE                          DW GalaxyDescList33A, GalaxyDescList33B, GalaxyDescList33C, GalaxyDescList33D, GalaxyDescList33E
 240+ F05F 94 EE A7 EE
 240+ F063 B1 EE
 241+ F065 BB EE C0 EE                          DW GalaxyDescList34A, GalaxyDescList34B, GalaxyDescList34C, GalaxyDescList34D, GalaxyDescList34E
 241+ F069 C7 EE CD EE
 241+ F06D D5 EE
 242+ F06F DA EE DE EE                          DW GalaxyDescList35A, GalaxyDescList35B, GalaxyDescList35C, GalaxyDescList35D, GalaxyDescList35E
 242+ F073 E2 EE E9 EE
 242+ F077 F0 EE
 243+ F079 F9 EE 00 EF                          DW GalaxyDescList36A, GalaxyDescList36B, GalaxyDescList36C, GalaxyDescList36D, GalaxyDescList36E
 243+ F07D 08 EF 0F EF
 243+ F081 14 EF
 244+ F083
 245+ F083 4C 61 72 67  GalaxyInhabitantDesc1   DB "Large ",0
 245+ F087 65 20 00
 246+ F08A 46 69 65 72  GalaxyInhabitantDesc1A  DB "Fierce ",0
 246+ F08E 63 65 20 00
 247+ F092 53 6D 61 6C  GalaxyInhabitantDesc1B  DB "Small ", 0
 247+ F096 6C 20 00
 248+ F099 47 72 65 65  GalaxyInhabitantDesc2   DB "Green ",0
 248+ F09D 6E 20 00
 249+ F0A0 52 65 64 20  GalaxyInhabitantDesc2A  DB "Red ",  0
 249+ F0A4 00
 250+ F0A5 59 65 6C 6C  GalaxyInhabitantDesc2B  DB "Yellow ",0
 250+ F0A9 6F 77 20 00
 251+ F0AD 42 6C 75 65  GalaxyInhabitantDesc2C  DB "Blue ",  0
 251+ F0B1 20 00
 252+ F0B3 42 6C 61 63  GalaxyInhabitantDesc2D  DB "Black ",0
 252+ F0B7 6B 20 00
 253+ F0BA 48 61 72 6D  GalaxyInhabitantDesc2E  DB "Harmless ",0
 253+ F0BE 6C 65 73 73
 253+ F0C2 20 00
 254+ F0C4 53 6C 69 6D  GalaxyInhabitantDesc3   DB "Slimy ",0
 254+ F0C8 79 20 00
 255+ F0CB 42 75 67 2D  GalaxyInhabitantDesc3A  DB "Bug-Eyed ", 0
 255+ F0CF 45 79 65 64
 255+ F0D3 20 00
 256+ F0D5 48 6F 72 6E  GalaxyInhabitantDesc3B  DB "Horned ",0
 256+ F0D9 65 64 20 00
 257+ F0DD 42 6F 6E 79  GalaxyInhabitantDesc3C  DB "Bony ",  0
 257+ F0E1 20 00
 258+ F0E3 46 61 74 20  GalaxyInhabitantDesc3D  DB "Fat ",  0
 258+ F0E7 00
 259+ F0E8 46 75 72 72  GalaxyInhabitantDesc3E  DB "Furry ",  0
 259+ F0EC 79 20 00
 260+ F0EF 52 6F 64 65  GalaxyInhabitantDesc4   DB "Rodent",0
 260+ F0F3 6E 74 00
 261+ F0F6 46 72 6F 67  GalaxyInhabitantDesc4A  DB "Frog",      0
 261+ F0FA 00
 262+ F0FB 4C 69 7A 61  GalaxyInhabitantDesc4B  DB "Lizard", 0
 262+ F0FF 72 64 00
 263+ F102 4C 6F 62 73  GalaxyInhabitantDesc4C  DB "Lobster",0
 263+ F106 74 65 72 00
 264+ F10A 42 69 72 64  GalaxyInhabitantDesc4D  DB "Bird",  0
 264+ F10E 00
 265+ F10F 48 75 6D 61  GalaxyInhabitantDesc4E  DB "Humanoid", 0
 265+ F113 6E 6F 69 64
 265+ F117 00
 266+ F118 46 65 6C 69  GalaxyInhabitantDesc4F  DB "Feline", 0
 266+ F11C 6E 65 00
 267+ F11F 49 6E 73 65  GalaxyInhabitantDesc4G  DB "Insect",0
 267+ F123 63 74 00
 268+ F126 48 75 6D 61  GalaxyInhabitantHuman   DB "Human Colonal",0
 268+ F12A 6E 20 43 6F
 268+ F12E 6C 6F 6E 61
 268+ F132 6C 00
 269+ F134
 270+ F134 83 F0 8A F0  GalaxyInhabitantDesc1Ix DW GalaxyInhabitantDesc1,GalaxyInhabitantDesc1A,GalaxyInhabitantDesc1B
 270+ F138 92 F0
 271+ F13A 99 F0 A0 F0  GalaxyInhabitantDesc2Ix DW GalaxyInhabitantDesc2,GalaxyInhabitantDesc2A,GalaxyInhabitantDesc2B,GalaxyInhabitantDesc2C,GalaxyInhabitantDesc2D,GalaxyInhabitantDesc2E
 271+ F13E A5 F0 AD F0
 271+ F142 B3 F0 BA F0
 272+ F146 C4 F0 CB F0  GalaxyInhabitantDesc3Ix DW GalaxyInhabitantDesc3,GalaxyInhabitantDesc3A,GalaxyInhabitantDesc3B,GalaxyInhabitantDesc3C,GalaxyInhabitantDesc3D,GalaxyInhabitantDesc3E
 272+ F14A D5 F0 DD F0
 272+ F14E E3 F0 E8 F0
 273+ F152 EF F0 F6 F0  GalaxyInhabitantDesc4Ix DW GalaxyInhabitantDesc4,GalaxyInhabitantDesc4A,GalaxyInhabitantDesc4B,GalaxyInhabitantDesc4C,GalaxyInhabitantDesc4D,GalaxyInhabitantDesc4E,GalaxyInhabitantDesc4F,GalaxyInhabitantDesc4G
 273+ F156 FB F0 02 F1
 273+ F15A 0A F1 0F F1
 273+ F15E 18 F1 1F F1
 274+ F162 26 F1        GalaxyInhabitantHumanIx DW GalaxyInhabitantHuman
 275+ F164 00 00 00...  GalaxySpecies           DS 32
 276+ F184 00                                   DB 0
 277+ F185 00 00 00...  GalaxyPlanetDescription DS 300
 278+ F2B1 00                                   DB 0
 279+ F2B2 00 00 00...  GalaxyPlanetSource      DS 300,0
 280+ F3DE 3C 31 34 3E  GalaxyPlanetDescStarter DB "<14> is <22>",0
 280+ F3E2 20 69 73 20
 280+ F3E6 3C 32 32 3E
 280+ F3EA 00
 281+ F3EB
 282+ F3EB
 283+ F3EB D3           GalaxyExtendedDescs:    DB 211                                                  ; System 211, Galaxy 0                Teorge = Token  1
 284+ F3EC 96                                   DB 150                                                  ; System 150, Galaxy 0, Mission 1       Xeer = Token  2
 285+ F3ED 24                                   DB 36                                                   ; System  36, Galaxy 0, Mission 1   Reesdice = Token  3
 286+ F3EE 1C                                   DB 28                                                   ; System  28, Galaxy 0, Mission 1      Arexe = Token  4
 287+ F3EF FD                                   DB 253                                                  ; System 253, Galaxy 1, Mission 1     Errius = Token  5
 288+ F3F0 4F                                   DB 79                                                   ; System  79, Galaxy 1, Mission 1     Inbibe = Token  6
 289+ F3F1 35                                   DB 53                                                   ; System  53, Galaxy 1, Mission 1      Ausar = Token  7
 290+ F3F2 76                                   DB 118                                                  ; System 118, Galaxy 1, Mission 1     Usleri = Token  8
 291+ F3F3 64                                   DB 100                                                  ; System 100, Galaxy 2                Arredi = Token  9
 292+ F3F4 20                                   DB 32                                                   ; System  32, Galaxy 1, Mission 1     Bebege = Token 10
 293+ F3F5 44                                   DB 68                                                   ; System  68, Galaxy 1, Mission 1     Cearso = Token 11
 294+ F3F6 A4                                   DB 164                                                  ; System 164, Galaxy 1, Mission 1     Dicela = Token 12
 295+ F3F7 DC                                   DB 220                                                  ; System 220, Galaxy 1, Mission 1     Eringe = Token 13
 296+ F3F8 6A                                   DB 106                                                  ; System 106, Galaxy 1, Mission 1     Gexein = Token 14
 297+ F3F9 10                                   DB 16                                                   ; System  16, Galaxy 1, Mission 1     Isarin = Token 15
 298+ F3FA A2                                   DB 162                                                  ; System 162, Galaxy 1, Mission 1   Letibema = Token 16
 299+ F3FB 03                                   DB 3                                                    ; System   3, Galaxy 1, Mission 1     Maisso = Token 17
 300+ F3FC 6B                                   DB 107                                                  ; System 107, Galaxy 1, Mission 1       Onen = Token 18
 301+ F3FD 1A                                   DB 26                                                   ; System  26, Galaxy 1, Mission 1     Ramaza = Token 19
 302+ F3FE C0                                   DB 192                                                  ; System 192, Galaxy 1, Mission 1     Sosole = Token 20
 303+ F3FF B8                                   DB 184                                                  ; System 184, Galaxy 1, Mission 1     Tivere = Token 21
 304+ F400 05                                   DB 5                                                    ; System   5, Galaxy 1, Mission 1     Veriar = Token 22
 305+ F401 65                                   DB 101                                                  ; System 101, Galaxy 2, Mission 1     Xeveon = Token 23
 306+ F402 C1                                   DB 193                                                  ; System 193, Galaxy 1, Mission 1     Orarra = Token 24
 307+ F403 29                                   DB 41                                                   ; System  41, Galaxy 2                Anreer = Token 25
 308+ F404 07                                   DB 7                                                    ; System   7, Galaxy 0                  Lave = Token 26
 309+ F405 2E                                   DB 46                                                   ; System  46, Galaxy 0              Riedquat = Token 27
 310+ F406
 311+ F406                  INCLUDE "./Data/EquipmentEquates.asm"
# file opened: ././Data/EquipmentEquates.asm
   1++F406
   2++F406              EQ_FUEL                 EQU 0
   3++F406              EQ_MISSILE              EQU 1
   4++F406              EQ_CARGO_BAY            EQU 2
   5++F406              EQ_ECM                  EQU 3
   6++F406              EQ_FUEL_SCOOPS          EQU 4
   7++F406              EQ_ESCAPE_POD           EQU 5
   8++F406              EQ_ENERGY_BOMB          EQU 6
   9++F406              EQ_ENERGY_UNIT          EQU 7
  10++F406              EQ_DOCK_COMP            EQU 8
  11++F406              EQ_GAL_DRIVE            EQU 9
  12++F406              EQ_FRONT_PULSE          EQU 10
  13++F406              EQ_REAR_PULSE           EQU 11
  14++F406              EQ_LEFT_PULSE           EQU 12
  15++F406              EQ_RIGHT_PULSE          EQU 13
  16++F406              EQ_FRONT_BEAM           EQU 14
  17++F406              EQ_REAR_BEAM            EQU 15
  18++F406              EQ_LEFT_BEAM            EQU 16
  19++F406              EQ_RIGHT_BEAM           EQU 17
  20++F406              EQ_FRONT_MINING         EQU 18
  21++F406              EQ_REAR_MINING          EQU 19
  22++F406              EQ_LEFT_MINING          EQU 20
  23++F406              EQ_RIGHT_MINING         EQU 21
  24++F406              EQ_FRONT_MILITARY       EQU 22
  25++F406              EQ_REAR_MILITARY        EQU 23
  26++F406              EQ_LEFT_MILITARY        EQU 24
  27++F406              EQ_RIGHT_MILITARY       EQU 25
  28++F406
  29++F406              EQ_ITEM_COUNT           EQU EQ_RIGHT_MILITARY+1
  30++F406
# file closed: ././Data/EquipmentEquates.asm
 312+ F406
 313+ F406              EquipNameTableRowLen    EQU 8
 314+ F406 4A A1 00 00  ShipEquipNameTable      DW  WordFuel,       0,              0,          0
 314+ F40A 00 00 00 00
 315+ F40E FF A3 00 00                          DW  WordMissile,    0,              0,          0
 315+ F412 00 00 00 00
 316+ F416 2F A1 40 A1                          DW  WordLarge,      WordCargo,      WordBay,    0
 316+ F41A 46 A1 00 00
 317+ F41E 56 A1 5D A1                          DW  WordECM,        WordSystem,     0,          0
 317+ F422 00 00 00 00
 318+ F426 4A A1 4F A1                          DW  WordFuel,       WordScoops,     0,          0
 318+ F42A 00 00 00 00
 319+ F42E 35 A1 3C A1                          DW  WordEscape,     WordPod,        0,          0
 319+ F432 00 00 00 00
 320+ F436 64 A1 6B A1                          DW  WordEnergy,     WordBomb,       0,          0
 320+ F43A 00 00 00 00
 321+ F43E C9 A1 64 A1                          DW  WordExtra,      WordEnergy,     WordUnit,   0
 321+ F442 97 A1 00 00
 322+ F446 A3 A1 AB A1                          DW  WordDocking,    WordComputers,  0,          0
 322+ F44A 00 00 00 00
 323+ F44E C0 A1 07 A4                          DW  WordGalactic,   WordHyperdrive, 0,          0
 323+ F452 00 00 00 00
 324+ F456 19 A1 76 A1                          DW  WordFront,      WordPulse,      WordLaser,  0
 324+ F45A 70 A1 00 00
 325+ F45E 2A A1 76 A1                          DW  WordRear,       WordPulse,      WordLaser,  0
 325+ F462 70 A1 00 00
 326+ F466 25 A1 76 A1                          DW  WordLeft,       WordPulse,      WordLaser,  0
 326+ F46A 70 A1 00 00
 327+ F46E 1F A1 76 A1                          DW  WordRight,      WordPulse,      WordLaser,  0
 327+ F472 70 A1 00 00
 328+ F476 19 A1 7C A1                          DW  WordFront,      WordBeam,       WordLaser,  0
 328+ F47A 70 A1 00 00
 329+ F47E 2A A1 7C A1                          DW  WordRear,       WordBeam,       WordLaser,  0
 329+ F482 70 A1 00 00
 330+ F486 25 A1 7C A1                          DW  WordLeft,       WordBeam,       WordLaser,  0
 330+ F48A 70 A1 00 00
 331+ F48E 1F A1 7C A1                          DW  WordRight,      WordBeam,       WordLaser,  0
 331+ F492 70 A1 00 00
 332+ F496 19 A1 89 A1                          DW  WordFront,      WordMining,     WordLaser,  0
 332+ F49A 70 A1 00 00
 333+ F49E 2A A1 89 A1                          DW  WordRear,       WordMining,     WordLaser,  0
 333+ F4A2 70 A1 00 00
 334+ F4A6 25 A1 89 A1                          DW  WordLeft,       WordMining,     WordLaser,  0
 334+ F4AA 70 A1 00 00
 335+ F4AE 1F A1 89 A1                          DW  WordRight,      WordMining,     WordLaser,  0
 335+ F4B2 70 A1 00 00
 336+ F4B6 19 A1 12 A4                          DW  WordFront,      WordMilitary,   WordLaser,  0
 336+ F4BA 70 A1 00 00
 337+ F4BE 2A A1 12 A4                          DW  WordRear,       WordMilitary,   WordLaser,  0
 337+ F4C2 70 A1 00 00
 338+ F4C6 25 A1 12 A4                          DW  WordLeft,       WordMilitary,   WordLaser,  0
 338+ F4CA 70 A1 00 00
 339+ F4CE 1F A1 12 A4                          DW  WordRight,      WordMilitary,   WordLaser,  0
 339+ F4D2 70 A1 00 00
 340+ F4D6
 341+ F4D6              ;Each row is 7 bytes
 342+ F4D6              ;                                                               12345  6  789012345678901
 343+ F4D6              ;	canbuy;
 344+ F4D6              ;	y;
 345+ F4D6              ;	show;
 346+ F4D6              ;	level;
 347+ F4D6              ;	price 2 bytes;
 348+ F4D6              ;	type;
 349+ F4D6              ;ShipFrontWeapons        DB EQ_FRONT_PULSE,  EQ_FRONT_PULSE,     EQ_FRONT_MINING,    EQ_FRONT_MINING
 350+ F4D6              ;ShipRearWeapons         DB EQ_REAR_PULSE,   EQ_REAR_PULSE,      EQ_REAR_MINING,     EQ_REAR_MINING
 351+ F4D6              ;ShipLeftWeapons         DB EQ_LEFT_PULSE,   EQ_LEFT_PULSE,      EQ_LEFT_MINING,     EQ_LEFT_MINING
 352+ F4D6              ;ShipRightWeapons        DB EQ_RIGHT_PULSE,  EQ_RIGHT_PULSE,     EQ_RIGHT_MINING,    EQ_RIGHT_MINING
 353+ F4D6              ;                           c  y  s  t
 354+ F4D6              ;                           a  p  h  e                                            fi     P
 355+ F4D6              ;                           n  o  o  c                                            tt     o
 356+ F4D6              ;                           B  s  w  h  price                  type               ed     s
 357+ F4D6 00 00 01 01  ShipEquipmentList       DB  0, 0, 1, 1, low     2, high     2, EQ_FUEL          , 0     ,$FF , 0  , 0  , 0  , 0  , 0  , 0 , 0
 357+ F4DA 02 00 00 00
 357+ F4DE FF 00 00 00
 357+ F4E2 00 00 00 00
 358+ F4E6 00 01 01 01                          DB  0, 1, 1, 1, low   300, high   300, EQ_MISSILE       , 0     ,$FF , 0  , 0  , 0  , 0  , 0  , 0 , 0
 358+ F4EA 2C 01 01 00
 358+ F4EE FF 00 00 00
 358+ F4F2 00 00 00 00
 359+ F4F6 00 02 01 01                          DB  0, 2, 1, 1, low  4000, high  4000, EQ_CARGO_BAY     , 0     ,$FF , 0  , 0  , 0  , 0  , 0  , 0 , 0
 359+ F4FA A0 0F 02 00
 359+ F4FE FF 00 00 00
 359+ F502 00 00 00 00
 360+ F506 00 03 01 02                          DB  0, 3, 1, 2, low  6000, high  6000, EQ_ECM           , 0     ,$FF , 0  , 0  , 0  , 0  , 0  , 0 , 0
 360+ F50A 70 17 03 00
 360+ F50E FF 00 00 00
 360+ F512 00 00 00 00
 361+ F516 00 04 01 05                          DB  0, 4, 1, 5, low  5250, high  5250, EQ_FUEL_SCOOPS   , 0     ,$FF , 0  , 0  , 0  , 0  , 0  , 0 , 0
 361+ F51A 82 14 04 00
 361+ F51E FF 00 00 00
 361+ F522 00 00 00 00
 362+ F526 00 05 01 06                          DB  0, 5, 1, 6, low 10000, high 10000, EQ_ESCAPE_POD    , 0     ,$FF , 0  , 0  , 0  , 0  , 0  , 0 , 0
 362+ F52A 10 27 05 00
 362+ F52E FF 00 00 00
 362+ F532 00 00 00 00
 363+ F536 00 06 01 07                          DB  0, 6, 1, 7, low  9000, high  9000, EQ_ENERGY_BOMB   , 0     ,$FF , 0  , 0  , 0  , 0  , 0  , 0 , 0
 363+ F53A 28 23 06 00
 363+ F53E FF 00 00 00
 363+ F542 00 00 00 00
 364+ F546 00 07 01 08                          DB  0, 7, 1, 8, low 15000, high 15000, EQ_ENERGY_UNIT   , 0     ,$FF , 0  , 0  , 0  , 0  , 0  , 0 , 0
 364+ F54A 98 3A 07 00
 364+ F54E FF 00 00 00
 364+ F552 00 00 00 00
 365+ F556 00 08 01 09                          DB  0, 8, 1, 9, low 15000, high 15000, EQ_DOCK_COMP     , 0     ,$FF , 0  , 0  , 0  , 0  , 0  , 0 , 0
 365+ F55A 98 3A 08 00
 365+ F55E FF 00 00 00
 365+ F562 00 00 00 00
 366+ F566 00 09 01 0A                          DB  0, 9, 1,10, low 50000, high 50000, EQ_GAL_DRIVE     , 0     ,$FF , 0  , 0  , 0  , 0  , 0  , 0 , 0
 366+ F56A 50 C3 09 00
 366+ F56E FF 00 00 00
 366+ F572 00 00 00 00
 367+ F576 00 0A 01 03                          DB  0,10, 1, 3, low  4000, high  4000, EQ_FRONT_PULSE   , 0     ,$00 , 0  , 0  , 0  , 0  , 0  , 0 , 0
 367+ F57A A0 0F 0A 00
 367+ F57E 00 00 00 00
 367+ F582 00 00 00 00
 368+ F586 00 0B 01 03                          DB  0,11, 1, 3, low  4000, high  4000, EQ_REAR_PULSE    , 0     ,$01 , 0  , 0  , 0  , 0  , 0  , 0 , 0
 368+ F58A A0 0F 0B 00
 368+ F58E 01 00 00 00
 368+ F592 00 00 00 00
 369+ F596 00 0C 01 03                          DB  0,12, 1, 3, low  4000, high  4000, EQ_LEFT_PULSE    , 0     ,$02 , 0  , 0  , 0  , 0  , 0  , 0 , 0
 369+ F59A A0 0F 0C 00
 369+ F59E 02 00 00 00
 369+ F5A2 00 00 00 00
 370+ F5A6 00 0D 01 03                          DB  0,13, 1, 3, low  4000, high  4000, EQ_RIGHT_PULSE   , 0     ,$03 , 0  , 0  , 0  , 0  , 0  , 0 , 0
 370+ F5AA A0 0F 0D 00
 370+ F5AE 03 00 00 00
 370+ F5B2 00 00 00 00
 371+ F5B6 00 0E 00 04                          DB  0,14, 0, 4, low 10000, high 10000, EQ_FRONT_BEAM    , 0     ,$00 , 0  , 0  , 0  , 0  , 0  , 0 , 0
 371+ F5BA 10 27 0E 00
 371+ F5BE 00 00 00 00
 371+ F5C2 00 00 00 00
 372+ F5C6 00 0F 00 04                          DB  0,15, 0, 4, low 10000, high 10000, EQ_REAR_BEAM     , 0     ,$01 , 0  , 0  , 0  , 0  , 0  , 0 , 0
 372+ F5CA 10 27 0F 00
 372+ F5CE 01 00 00 00
 372+ F5D2 00 00 00 00
 373+ F5D6 00 10 00 04                          DB  0,16, 0, 4, low 10000, high 10000, EQ_LEFT_BEAM     , 0     ,$02 , 0  , 0  , 0  , 0  , 0  , 0 , 0
 373+ F5DA 10 27 10 00
 373+ F5DE 02 00 00 00
 373+ F5E2 00 00 00 00
 374+ F5E6 00 11 00 04                          DB  0,17, 0, 4, low 10000, high 10000, EQ_RIGHT_BEAM    , 0     ,$03 , 0  , 0  , 0  , 0  , 0  , 0 , 0
 374+ F5EA 10 27 11 00
 374+ F5EE 03 00 00 00
 374+ F5F2 00 00 00 00
 375+ F5F6 00 12 00 0A                          DB  0,18, 0,10, low  8000, high  8000, EQ_FRONT_MINING  , 0     ,$00 , 0  , 0  , 0  , 0  , 0  , 0 , 0
 375+ F5FA 40 1F 12 00
 375+ F5FE 00 00 00 00
 375+ F602 00 00 00 00
 376+ F606 00 13 00 0A                          DB  0,19, 0,10, low  8000, high  8000, EQ_REAR_MINING   , 0     ,$01 , 0  , 0  , 0  , 0  , 0  , 0 , 0
 376+ F60A 40 1F 13 00
 376+ F60E 01 00 00 00
 376+ F612 00 00 00 00
 377+ F616 00 14 00 0A                          DB  0,20, 0,10, low  8000, high  8000, EQ_LEFT_MINING   , 0     ,$02 , 0  , 0  , 0  , 0  , 0  , 0 , 0
 377+ F61A 40 1F 14 00
 377+ F61E 02 00 00 00
 377+ F622 00 00 00 00
 378+ F626 00 15 00 0A                          DB  0,21, 0,10, low  8000, high  8000, EQ_RIGHT_MINING  , 0     ,$03 , 0  , 0  , 0  , 0  , 0  , 0 , 0
 378+ F62A 40 1F 15 00
 378+ F62E 03 00 00 00
 378+ F632 00 00 00 00
 379+ F636 00 16 00 0A                          DB  0,22, 0,10, low 60000, high 60000, EQ_FRONT_MILITARY, 0     ,$00 , 0  , 0  , 0  , 0  , 0  , 0 , 0
 379+ F63A 60 EA 16 00
 379+ F63E 00 00 00 00
 379+ F642 00 00 00 00
 380+ F646 00 17 00 0A                          DB  0,23, 0,10, low 60000, high 60000, EQ_REAR_MILITARY , 0     ,$01 , 0  , 0  , 0  , 0  , 0  , 0 , 0
 380+ F64A 60 EA 17 00
 380+ F64E 01 00 00 00
 380+ F652 00 00 00 00
 381+ F656 00 18 00 0A                          DB  0,24, 0,10, low 60000, high 60000, EQ_LEFT_MILITARY , 0     ,$02 , 0  , 0  , 0  , 0  , 0  , 0 , 0
 381+ F65A 60 EA 18 00
 381+ F65E 02 00 00 00
 381+ F662 00 00 00 00
 382+ F666 00 19 00 0A                          DB  0,25, 0,10, low 60000, high 60000, EQ_RIGHT_MILITARY, 0     ,$03 , 0  , 0  , 0  , 0  , 0  , 0 , 0
 382+ F66A 60 EA 19 00
 382+ F66E 03 00 00 00
 382+ F672 00 00 00 00
 383+ F676              ShipEquipTableRowLen    EQU 16
 384+ F676              ShipEquipTableSize      EQU ($-ShipEquipmentList)/ShipEquipTableRowLen
 385+ F676
 386+ F676              ;------------------------------------------------------------------------------------------------------------------------------------
 387+ F676 2B           GalaxyRandSeed			DB	43	            ; Just some start values
 388+ F677 20           GalaxyRandSeed1			DB	32	            ; Just some start values
 389+ F678 0C           GalaxyRandSeed2			DB	12	            ; Just some start values
 390+ F679 42           GalaxyRandSeed3			DB	66	            ; Just some start values
 391+ F67A              GalaxySeedRandom:
 392+ F67A              ;------------------------------------------------------------------------------------------------------------------------------------
 393+ F67A CD 27 9E     GetDigramGalaxySeed:    call	copy_galaxy_to_working
 394+ F67D 18 03                                jr		GetDigramWorkingSeed
 395+ F67F CD 3F 9E     GetDigramSystemSeed:    call	copy_system_to_working
 396+ F682 11 3D A6     GetDigramWorkingSeed:   ld		de,name_expanded    ; ">GetDigram a = digram seed"
 397+ F685 06 03                                ld		b,3
 398+ F687 3A 1D 9A                             ld		a,(WorkingSeeds)
 399+ F68A E6 40                                and		$40
 400+ F68C 28 03                                jr		z,.SmallSizeName
 401+ F68E CD 5E A6     .LargeSizeName:         call	NamingLoop
 402+ F691 CD 5E A6     .SmallSizeName:         call	NamingLoop
 403+ F694 CD 5E A6                             call	NamingLoop
 404+ F697 CD 5E A6                             call	NamingLoop
 405+ F69A EB           .DoneName:              ex		de,hl
 406+ F69B 36 00                                ld		(hl),0
 407+ F69D EB                                   ex		de,hl
 408+ F69E C9                                   ret
 409+ F69F
 410+ F69F 11 76 F6     GalaxySetSeedFromHL:    ld      de,GalaxyRandSeed
 411+ F6A2              ; Uses registers a,b and hl
 412+ F6A2 B7           GalaxyDoRandom:         or      a                                               ; in 6502 this is called after a bcc instruction to will always be clear (see .detok2 and .dt6)
 413+ F6A3 3A 76 F6                             ld      a,(GalaxyRandSeed)
 414+ F6A6 CB 17        .Seed0Rolled:           rl      a                                               ; r0 << 1
 415+ F6A8 47                                   ld      b,a                                             ; b = reg x in 6502 so x = r0 << 1
 416+ F6A9 21 78 F6     .AddSeed2               ld      hl,GalaxyRandSeed2                              ;
 417+ F6AC 8E                                   adc     a,(hl)                                          ; a = r0 << 1 + r2
 418+ F6AD 32 76 F6     .SetRandSeed0:          ld		(GalaxyRandSeed),a					            ; set r0' = (r0 << 1) +  r2 + (r0 bit 7)
 419+ F6B0 78                                   ld      a,b
 420+ F6B1 32 78 F6     .SetRandSeed2:          ld      (GalaxyRandSeed2),a                             ; set r2' =  r0 << 1
 421+ F6B4 3A 77 F6     .GetRandSeed1:          ld      a,(GalaxyRandSeed1)
 422+ F6B7 47                                   ld      b,a                                             ; b = r1
 423+ F6B8 21 79 F6                             ld      hl,GalaxyRandSeed3
 424+ F6BB 8E                                   adc     a,(hl)                                          ; Adc from before may have set carry flag or may not, will be set if r0 << 1 + r2 + carry > 256
 425+ F6BC 32 77 F6                             ld      (GalaxyRandSeed1),a                             ; set r1' = r1 + r3 + carry
 426+ F6BF 4F                                   ld      c,a
 427+ F6C0 78                                   ld      a,b
 428+ F6C1 32 79 F6                             ld      (GalaxyRandSeed3),a                             ; set r3 = r1
 429+ F6C4 79                                   ld      a,c
 430+ F6C5 C9                                   ret
 431+ F6C6
 432+ F6C6              ;------------------------------------------------------------------------------------------------------------------------------------
 433+ F6C6 ED 31        galaxy_cpy_str_a_at_hl_to_de:add     hl,a
 434+ F6C8 ED 31                                add     hl,a
 435+ F6CA 7E                                   ld      a,(hl)              ;  Fetch low byte
 436+ F6CB 47                                   ld      b,a
 437+ F6CC 23                                   inc     hl
 438+ F6CD 7E                                   ld      a,(hl)              ;  Fetch high byte
 439+ F6CE 68                                   ld      l,b
 440+ F6CF 67                                   ld      h,a
 441+ F6D0 7E           GalaxyCopyLoop:         ld      a,(hl)
 442+ F6D1 FE 00                                cp      0
 443+ F6D3 28 05                                jr      z,.CopyDone
 444+ F6D5 12                                   ld      (de),a
 445+ F6D6 23                                   inc     hl
 446+ F6D7 13                                   inc     de
 447+ F6D8 18 F6                                jr      GalaxyCopyLoop
 448+ F6DA 12           .CopyDone:              ld      (de),a
 449+ F6DB C9                                   ret
 450+ F6DC              ;------------------------------------------------------------------------------------------------------------------------------------
 451+ F6DC 11 64 F1     galaxy_get_species:     ld      de,GalaxySpecies
 452+ F6DF 3E 28                                ld      a,"("
 453+ F6E1 12                                   ld      (de),a
 454+ F6E2 13                                   inc     de
 455+ F6E3 3A FC E8                             ld      a,(GalaxyWorkingSeed+4)
 456+ F6E6 CB 7F                                bit     7,a
 457+ F6E8 20 0A                                jr      nz,.NonHuman
 458+ F6EA 21 62 F1                             ld      hl,GalaxyInhabitantHumanIx
 459+ F6ED AF                                   xor     a
 460+ F6EE CD C6 F6                             call    galaxy_cpy_str_a_at_hl_to_de
 461+ F6F1 C3 4F F7                             jp      .galaxy_species_exit
 462+ F6F4 3A FD E8     .NonHuman:              ld      a,(GalaxyWorkingSeed+5)
 463+ F6F7 CB 3F                                srl     a
 464+ F6F9 CB 3F                                srl     a
 465+ F6FB E6 07                                and     $07
 466+ F6FD FE 03                                cp      3
 467+ F6FF 30 0A                                jr      nc,.NotDesc1
 468+ F701 21 34 F1                             ld      hl,GalaxyInhabitantDesc1Ix
 469+ F704 CD C6 F6                             call    galaxy_cpy_str_a_at_hl_to_de
 470+ F707 3E 20                                ld      a," "
 471+ F709 12                                   ld      (de),a
 472+ F70A 13                                   inc     de
 473+ F70B 3A FD E8     .NotDesc1:              ld      a,(GalaxyWorkingSeed+5)
 474+ F70E CB 3F                                srl     a
 475+ F710 CB 3F                                srl     a
 476+ F712 CB 3F                                srl     a
 477+ F714 CB 3F                                srl     a
 478+ F716 CB 3F                                srl     a
 479+ F718 FE 06                                cp      6
 480+ F71A 30 0A                                jr      nc,.NotDesc2
 481+ F71C 21 3A F1                             ld      hl,GalaxyInhabitantDesc2Ix
 482+ F71F CD C6 F6                             call    galaxy_cpy_str_a_at_hl_to_de
 483+ F722 3E 20                                ld      a," "
 484+ F724 12                                   ld      (de),a
 485+ F725 13                                   inc     de
 486+ F726 3A F9 E8     .NotDesc2:              ld      a,(GalaxyWorkingSeed+1)
 487+ F729 47                                   ld      b,a
 488+ F72A 3A FB E8                             ld      a,(GalaxyWorkingSeed+3)
 489+ F72D A8                                   xor     b
 490+ F72E E6 07                                and     $07
 491+ F730 F5                                   push    af
 492+ F731 FE 06                                cp      6
 493+ F733 30 0A                                jr      nc,.NotDesc3
 494+ F735 21 46 F1                             ld      hl,GalaxyInhabitantDesc3Ix
 495+ F738 CD C6 F6                             call    galaxy_cpy_str_a_at_hl_to_de
 496+ F73B 3E 20                                ld      a," "
 497+ F73D 12                                   ld      (de),a
 498+ F73E 13                                   inc     de
 499+ F73F F1           .NotDesc3:              pop     af
 500+ F740 47                                   ld      b,a
 501+ F741 3A FD E8                             ld      a,(GalaxyWorkingSeed+5)
 502+ F744 E6 03                                and     $03
 503+ F746 80                                   add     a,b
 504+ F747 E6 07                                and     $07
 505+ F749 21 52 F1                             ld      hl,GalaxyInhabitantDesc4Ix
 506+ F74C CD C6 F6                             call    galaxy_cpy_str_a_at_hl_to_de
 507+ F74F 3E 73        .galaxy_species_exit:   ld      a,"s"
 508+ F751 12                                   ld      (de),a
 509+ F752 13                                   inc     de
 510+ F753 3E 29                                ld      a,")"
 511+ F755 12                                   ld      (de),a
 512+ F756 13                                   inc     de
 513+ F757 AF                                   xor     a
 514+ F758 12                                   ld      (de),a
 515+ F759 C9                                   ret
 516+ F75A
 517+ F75A
 518+ F75A              ; To copy seed, loops from 3 to 0
 519+ F75A              ; copy seed X + 2 to target X
 520+ F75A              ; x = x -1
 521+ F75A
 522+ F75A              ; For lave we shoudl have "Lave is most famous for its vast rain forests and the Lavian tree grub"
 523+ F75A
 524+ F75A              GalaxyCapitaliseString: ; ">CapitaliseString hl = address"
 525+ F75A 23                                   inc		hl
 526+ F75B 7E                                   ld		a,(hl)
 527+ F75C FE 00                                cp		0
 528+ F75E C8                                   ret		z
 529+ F75F FE 5B                                cp		'Z'+1
 530+ F761 30 F7                                jr		nc,GalaxyCapitaliseString
 531+ F763 FE 41                                cp		'A'
 532+ F765 38 F3                                jr		c,GalaxyCapitaliseString
 533+ F767 C6 20        .LowerCase:             add		a,'a'-'A'
 534+ F769 77                                   ld		(hl),a
 535+ F76A 18 EE                                jr		GalaxyCapitaliseString
 536+ F76C
 537+ F76C
 538+ F76C              GalaxyGoatSoup:         ;ld      (GalaxyTargetSystem),bc                         ; Set the galaxy target variable
 539+ F76C                                      ;call    galaxy_system_under_cursor                      ; and set the galaxyworkingseed based on cursor
 540+ F76C                                      ;cp      $FF
 541+ F76C                                      ;jr      z,.NoSystemFound
 542+ F76C 3A 1F 9A     .SeedGalaxy             ld      a,(WorkingSeeds+2)                              ;
 543+ F76F 32 76 F6                             ld      (GalaxyRandSeed),a                              ; r0 = Seed C
 544+ F772 3A 20 9A                             ld      a,(WorkingSeeds+3)                              ;
 545+ F775 32 77 F6                             ld      (GalaxyRandSeed1),a                             ; r1 = Seeed D
 546+ F778 3A 21 9A                             ld      a,(WorkingSeeds+4)                              ;
 547+ F77B 32 78 F6                             ld      (GalaxyRandSeed2),a                             ; r2 = Seed E
 548+ F77E 3A 22 9A                             ld      a,(WorkingSeeds+5)                              ;
 549+ F781 32 79 F6                             ld      (GalaxyRandSeed3),a                             ; r3 = Seed F
 550+ F784 C9                                   ret
 551+ F785              ; For later......
 552+ F785 3E 05        .MarkExtendedDesc:      ld      a,5                                             ;  ("{lower case}{justify}{single cap}[86-90] IS [140-144].{cr}{left align}"
 553+ F787 F5           .GalaxyExpandDesc:      push    af
 554+ F788 47                                   ld      b,a                                             ; b = 6502 X reg
 555+ F789 C5                                   push    bc                                              ; save Y reg
 556+ F78A
 557+ F78A              ;------------------------------------------------------------------------------------------------------------------------------------
 558+ F78A              ; We enter here with BC = the Y and X Coordinates of the system to select in this galaxy
 559+ F78A              ; This is based on the docked BBC PDesc Pink Volcanoes version ratehr tha goat soup
 560+ F78A ED 43 5B E8  GalaxyPinkVolcano:      ld      (GalaxyTargetSystem),bc                         ; Set the galaxy target variable
 561+ F78E CD 65 FC                             call    galaxy_system_under_cursor                      ; and set the galaxyworkingseed based on cursor
 562+ F791                                      ;cp      $FF
 563+ F791                                      ;jr      z,.NoSystemFound
 564+ F791              .SpecialDescs:          ; this is not implemented yet to read GalaxyExtendedDescs look at .PDL1
 565+ F791
 566+ F791
 567+ F791
 568+ F791              ;.NoSytemFound:          Print the "Unable to identify a system at present position"
 569+ F791
 570+ F791 00 00 00...  GalaxyNameCopy          DS      30
 571+ F7AF
 572+ F7AF 1E 00        ExpandAtHLToE:          ld      e,0
 573+ F7B1 7E           .ExpandTokenLoop:       ld      a,(hl)
 574+ F7B2 FE 3E                                cp      ">"
 575+ F7B4 C8                                   ret     z
 576+ F7B5 23                                   inc     hl
 577+ F7B6 16 0A                                ld      d,10
 578+ F7B8 ED 30                                mul
 579+ F7BA D6 30                                sub     "0"
 580+ F7BC 83                                   add     a,e
 581+ F7BD 5F                                   ld      e,a
 582+ F7BE 18 F1                                jr      .ExpandTokenLoop
 583+ F7C0
 584+ F7C0 E5           SelectTokenToHL:        push    hl                                          ;+1
 585+ F7C1 C5                                   push    bc                                          ;+2
 586+ F7C2 CD A2 F6                             call    GalaxyDoRandom
 587+ F7C5 C1                                   pop     bc                                          ;+1
 588+ F7C6 E1                                   pop     hl                                          ;+0
 589+ F7C7 16 00        .CalcOptionAToD:        ld      d,0
 590+ F7C9 FE 33                                cp      $33
 591+ F7CB DA CF F7                             jp      c,.Check66
 592+ F7CE 14           .IsGTE33:               inc     d
 593+ F7CF FE 66        .Check66:               cp      $66
 594+ F7D1 DA D5 F7                             jp      c,.Check99
 595+ F7D4 14           .IsGTE66:               inc     d
 596+ F7D5 FE 99        .Check99:               cp      $99
 597+ F7D7 DA DB F7     .IsGTE99:               jp      c,.CheckCC
 598+ F7DA 14                                   inc     d
 599+ F7DB FE CC        .CheckCC:               cp      $CC
 600+ F7DD 38 01                                jr      c,.TokenIdToAddress
 601+ F7DF 14           .ItGETCC:               inc     d
 602+ F7E0 21 1B EF     .TokenIdToAddress:      ld      hl,GalaxyDescList
 603+ F7E3 7B                                   ld      a,e
 604+ F7E4 CB 27                                sla     a                                               ; x 2
 605+ F7E6 ED 31                                add     hl,a                                            ; hl + a * 2
 606+ F7E8 ED 31                                add     hl,a                                            ; hl + a * 4
 607+ F7EA ED 31                                add     hl,a                                            ; hl + a * 6
 608+ F7EC ED 31                                add     hl,a                                            ; hl + a * 8
 609+ F7EE ED 31                                add     hl,a                                            ; hl + a * 10
 610+ F7F0 7A                                   ld      a,d
 611+ F7F1 ED 31                                add     hl,a
 612+ F7F3 ED 31                                add     hl,a                                            ; hl = desc array [e][d]
 613+ F7F5 7E           .LookUpDataFromTable:   ld      a,(hl)
 614+ F7F6 DD 6F                                ld      ixl,a
 615+ F7F8 23                                   inc     hl
 616+ F7F9 7E                                   ld      a,(hl)
 617+ F7FA DD 67                                ld      ixh,a                                           ; ix = address at (hl)
 618+ F7FC DD E5                                push    ix                                              ;+2
 619+ F7FE E1                                   pop     hl                                              ;+1
 620+ F7FF C9                                   ret
 621+ F800              ;------------------------------------------------------------------------------------------------------------------------------------
 622+ F800 E5           ProcessHSymbol:         push    hl                                              ;+1
 623+ F801 D5                                   push    de                                              ;+2
 624+ F802 C5                                   push    bc                                              ;+3
 625+ F803 21 91 F7     .CopyInNameH:           ld      hl, GalaxyNameCopy
 626+ F806 FD 54                                ld      d,iyh
 627+ F808 FD 5D                                ld      e,iyl
 628+ F80A CD D0 F6                             call    GalaxyCopyLoop
 629+ F80D FD 62                                ld      iyh,d
 630+ F80F FD 6B                                ld      iyl,e
 631+ F811 C1                                   pop     bc                                              ;+2
 632+ F812 D1                                   pop     de                                              ;+1
 633+ F813 E1                                   pop     hl
 634+ F814 C9                                   ret
 635+ F815              ;------------------------------------------------------------------------------------------------------------------------------------
 636+ F815 E5           ProcessISymbol:         push    hl                                              ;+1
 637+ F816 D5                                   push    de                                              ;+2
 638+ F817 C5                                   push    bc                                              ;+3
 639+ F818 21 91 F7     .CopyInNameI:           ld      hl, GalaxyNameCopy
 640+ F81B FD 54                                ld      d,iyh
 641+ F81D FD 5D                                ld      e,iyl
 642+ F81F CD D0 F6                             call    GalaxyCopyLoop
 643+ F822 FD 62                                ld      iyh,d
 644+ F824 FD 6B                                ld      iyl,e
 645+ F826 3E 69                                ld      a,"i"
 646+ F828 EB                                   ex      de,hl
 647+ F829 77                                   ld      (hl),a
 648+ F82A 23                                   inc     hl
 649+ F82B 3E 61                                ld      a,"a"
 650+ F82D 77                                   ld      (hl),a
 651+ F82E 23                                   inc     hl
 652+ F82F 3E 6E                                ld      a,"n"
 653+ F831 77                                   ld      (hl),a
 654+ F832 23                                   inc     hl
 655+ F833 E5                                   push    hl
 656+ F834 FD E1                                pop     iy
 657+ F836 C1                                   pop     bc                                              ;+2
 658+ F837 D1                                   pop     de                                              ;+1
 659+ F838 E1                                   pop     hl                                              ;+0
 660+ F839 C9                                   ret
 661+ F83A              ;------------------------------------------------------------------------------------------------------------------------------------
 662+ F83A E5           ProcessRSymbol:         push    hl                                              ;+1
 663+ F83B D5                                   push    de                                              ;+2
 664+ F83C CD A2 F6                             call    GalaxyDoRandom ;(Correct one or do we use teh clear carry version?)
 665+ F83F E6 03                                and     $03
 666+ F841 47                                   ld      b,a
 667+ F842 04                                   inc     b
 668+ F843 AF                                   xor     a
 669+ F844 4F                                   ld      c,a
 670+ F845 C5           .RLoop:                 push    bc                                              ;+3
 671+ F846 CD A2 F6                             call    GalaxyDoRandom
 672+ F849 C1                                   pop     bc                                              ;+2
 673+ F84A E6 3E                                and     $3E
 674+ F84C 21 A0 E8                             ld      hl,GalaxyName_digrams
 675+ F84F ED 31                                add     hl,a
 676+ F851 7E                                   ld      a,(hl)
 677+ F852 FE 41                                cp      "A"
 678+ F854 38 01                                jr      c,.NotLowercase
 679+ F856 81                                   add     a,c
 680+ F857 FD 77 00     .NotLowercase:          ld      (iy+0),a
 681+ F85A 23                                   inc     hl
 682+ F85B FD 23                                inc     iy
 683+ F85D 0E 20                                ld      c,$20               ; fixed force to lower case
 684+ F85F 7E                                   ld      a,(hl)
 685+ F860 FE 41                                cp      "A"
 686+ F862 38 01                                jr      c,.NotLowercase2
 687+ F864 81                                   add     a,c
 688+ F865 FD 77 00     .NotLowercase2:         ld      (iy+0),a
 689+ F868 FD 23                                inc     iy
 690+ F86A 10 D9                                djnz    .RLoop
 691+ F86C D1                                   pop     de                                              ;+1
 692+ F86D E1                                   pop     hl                                              ;+0
 693+ F86E C9                                   ret
 694+ F86F              ;------------------------------------------------------------------------------------------------------------------------------------
 695+ F86F ED 43 5B E8  GalaxyGenerateDesc:     ld      (GalaxyTargetSystem),bc                         ; Set the galaxy target variable
 696+ F873 CD 65 FC                             call    galaxy_system_under_cursor
 697+ F876 CD BF FA     .CopySystemName:        call    galaxy_digram_seed                              ; make a local copy of system name
 698+ F879 21 7F E8                             ld      hl,GalaxyExpandedName
 699+ F87C 11 91 F7                             ld      de,GalaxyNameCopy
 700+ F87F CD D0 F6                             call    GalaxyCopyLoop
 701+ F882 21 91 F7     .CapitaliseName:        ld      hl,GalaxyNameCopy
 702+ F885 CD 5A F7                             call    GalaxyCapitaliseString
 703+ F888                                      ; we will also capitalise the local copy here later
 704+ F888 21 DE F3     .InitDescription:       ld      hl,GalaxyPlanetDescStarter                      ; Initialise galaxy description to  <14> is <22>
 705+ F88B 11 B2 F2                             ld      de,GalaxyPlanetSource
 706+ F88E CD D0 F6                             call    GalaxyCopyLoop
 707+ F891 AF           .ClearOutDescription:   xor     a
 708+ F892 21 85 F1                             ld      hl,GalaxyPlanetDescription
 709+ F895 77                                   ld      (hl),a
 710+ F896 11 86 F1                             ld      de,GalaxyPlanetDescription+1
 711+ F899 01 2C 01                             ld      bc,300                                          ; copy previous byte to current for 300 bytes (as we have DS 300 + 1)
 712+ F89C ED B0                                ldir                                                    ; zero it out, don't need this at the end but simplifies debugging
 713+ F89E CD 6C F7     .CopySeedToRandom:      call    GalaxyGoatSoup
 714+ F8A1 21 B2 F2                             ld      hl,GalaxyPlanetSource
 715+ F8A4 FD 21 85 F1                          ld      iy,GalaxyPlanetDescription
 716+ F8A8              ; At this point we are now prepped ready to expand the string to a full description
 717+ F8A8              ;-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.
 718+ F8A8 7E           .ExpRecursive:          ld      a,(hl)
 719+ F8A9 FE 00                                cp      0
 720+ F8AB CA F0 F8                             jp      z,.ExpansionComplete
 721+ F8AE FE 3C                                cp      "<"
 722+ F8B0 C2 C3 F8                             jp      nz,.NotToken
 723+ F8B3 23           .ItIsAToken:            inc     hl
 724+ F8B4 CD AF F7     .ReadToken:             call    ExpandAtHLToE                                   ; here we have a <X> token
 725+ F8B7 23                                   inc     hl
 726+ F8B8 E5           .SaveCurrentPosition:   push    hl                                              ;+1 Save the current pointer to the text as we are now diverting off to another address
 727+ F8B9 CD C0 F7     .LookUpToken:           call    SelectTokenToHL                                 ; Get random token id by using d as list and e as offest against galaxydesc list and return address in hl
 728+ F8BC CD A8 F8                             call    .ExpRecursive
 729+ F8BF E1           .RestoreCurrentPosition:pop     hl                                              ;+0 get back our old HL we saved off
 730+ F8C0 C3 A8 F8     .TokenNextIteration:    jp      .ExpRecursive
 731+ F8C3              ;-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.
 732+ F8C3 FE 25        .NotToken:              cp      "%"
 733+ F8C5 C2 E7 F8                             jp      nz,.RegularCharacter
 734+ F8C8 23                                   inc     hl                                              ; issue was that it was stuck on "%" and not reading the next character for the token to expand
 735+ F8C9 7E                                   ld      a,(hl)
 736+ F8CA FE 48                                cp      "H"
 737+ F8CC 20 07                                jr      nz,.IsItI
 738+ F8CE 23           .ItIsAnH:               inc     hl
 739+ F8CF CD 00 F8                             call    ProcessHSymbol
 740+ F8D2 C3 A8 F8                             jp      .ExpRecursive
 741+ F8D5 FE 49        .IsItI:                 cp      "I"
 742+ F8D7 20 07                                jr      nz,.ItIsR
 743+ F8D9 23           .ItIsAnI:               inc     hl
 744+ F8DA CD 15 F8                             call    ProcessISymbol
 745+ F8DD C3 A8 F8                             jp      .ExpRecursive
 746+ F8E0 CD 3A F8     .ItIsR:                 call    ProcessRSymbol
 747+ F8E3 23                                   inc     hl
 748+ F8E4 C3 A8 F8     .SystemNextIteration:   jp      .ExpRecursive
 749+ F8E7 FD 77 00     .RegularCharacter:      ld      (iy+0),a
 750+ F8EA FD 23                                inc     iy
 751+ F8EC 23                                   inc     hl
 752+ F8ED C3 A8 F8     .RegularNextIteration:  jp      .ExpRecursive
 753+ F8F0 AF           .ExpansionComplete:     xor     a
 754+ F8F1 FD 77 01                             ld      (iy+1),a    ; will thsi work as a bodge
 755+ F8F4 C9                                   ret
 756+ F8F5              ;----------------------------------------------------------------------------------------------------------------------------------
 757+ F8F5 3A 0C E9     galaxy_equip_market:    ld      a,(GalaxyDisplayTekLevel)
 758+ F8F8 3C                                   inc     a
 759+ F8F9 67                                   ld      h,a
 760+ F8FA 0E 00                                ld      c,0
 761+ F8FC 06 1A                                ld      b,ShipEquipTableSize            ;NO_OF_EQUIP_ITEMS
 762+ F8FE 11 10 00                             ld      de,ShipEquipTableRowLen         ; Bytes per row
 763+ F901 DD 21 D6 F4                          ld      ix,ShipEquipmentList
 764+ F905 DD 7E 06     .ItemCheckLoop:         ld      a,(ix+6)                        ; is it type fuel
 765+ F908 FE 00                                cp      0
 766+ F90A                                      ; Check Cash TODO
 767+ F90A 28 00                                jr      z,.CheckTechLevel
 768+ F90C DD 7E 03     .CheckTechLevel:        ld      a,(ix+3)                        ; ItemTech Level
 769+ F90F BC                                   cp      h
 770+ F910                                      ;jr      nc,.DoNotShowItem
 771+ F910 DD 7E 02     .CheckShowItem:         ld      a,(ix+2)
 772+ F913 FE 00                                cp      0
 773+ F915                                    ;  jr      z,.DoNotShowItem
 774+ F915 79           .ShowItem:              ld      a,c
 775+ F916 DD 71 01                             ld      (ix+1),c                        ; Show Item Row Id
 776+ F919 DD 7E 06     .CheckFitted:           ld      a,(ix+6)
 777+ F91C FE 00                                cp      EQ_FUEL
 778+ F91E 28 18                                jr      z,.FuelLevel
 779+ F920 FE 01                                cp      EQ_MISSILE
 780+ F922 28 25                                jr      z,.CountMissiles
 781+ F924 21 B4 9D     .IsFitted:              ld      hl,EquipmentFitted
 782+ F927 ED 31                                add     hl,a
 783+ F929 7E                                   ld      a,(hl)
 784+ F92A FE 00                                cp      0
 785+ F92C 28 05                                jr      z,.NotFittedItem
 786+ F92E 3E 2A        .FittedItem:            ld      a,"*"
 787+ F930 C3 5A F9                             jp      .MoreToDoCheck
 788+ F933 3E 2D        .NotFittedItem:         ld      a,"-"
 789+ F935 C3 5A F9                             jp      .MoreToDoCheck
 790+ F938 3A 75 9D     .FuelLevel:             ld      a,(Fuel)
 791+ F93B FE 46                                cp      MaxFuelLevel
 792+ F93D 28 05                                jr      z,.FullFuel
 793+ F93F 3E 2D        .NotFullFuel:           ld      a,"-"
 794+ F941 C3 5A F9                             jp      .MoreToDoCheck
 795+ F944 3E 2A        .FullFuel               ld      a,"*"                           ; later on do 3 starts low, med,full
 796+ F946 C3 5A F9                             jp      .MoreToDoCheck
 797+ F949 3A 92 99     .CountMissiles:         ld      a,(NbrMissiles)
 798+ F94C FE 00                                cp      0
 799+ F94E 28 05                                jr      z,.NoMissiles
 800+ F950 C6 30                                add     "0"
 801+ F952 C3 5A F9                             jp      .MoreToDoCheck
 802+ F955 3E 2D        .NoMissiles:            ld      a,"-"
 803+ F957 C3 5A F9                             jp      .MoreToDoCheck
 804+ F95A DD 77 07     .MoreToDoCheck:         ld      (ix+7),a                        ; update fitted status
 805+ F95D 0C                                   inc     c
 806+ F95E DD 19                                add     ix,de
 807+ F960 10 A3                                djnz    .ItemCheckLoop
 808+ F962 C9                                   ret
 809+ F963 3E FF        .DoNotShowItem          ld      a,$FF                           ; $FF = hide
 810+ F965 DD 77 01                             ld      (ix+1),a
 811+ F968 DD 19                                add     ix,de
 812+ F96A 10 99                                djnz    .ItemCheckLoop
 813+ F96C C9                                   ret
 814+ F96D              ;----------------------------------------------------------------------------------------------------------------------------------
 815+ F96D 3A FA E8     galaxy_planet_data:     ld      a,(GalaxyWorkingSeed+2)
 816+ F970 B7           .GenerateGovernment:    or      a
 817+ F971 CB 3F                                srl	    a                                               ; Government = seed2 / 8 & 7
 818+ F973 CB 3F                                srl	    a
 819+ F975 CB 3F                                srl	    a                                                   ;
 820+ F977 E6 07                                and     $07                                             ;
 821+ F979 32 0A E9                             ld      (GalaxyDisplayGovernment),a                     ;
 822+ F97C 3A F9 E8     .GenerateEconomy:       ld      a,(GalaxyWorkingSeed+1)
 823+ F97F E6 07                                and     $07
 824+ F981 47                                   ld      b,a
 825+ F982 3A 0A E9                             ld      a,(GalaxyDisplayGovernment)
 826+ F985                                      JumpIfAGTENusng 1, .GreaterThan1
 826+ F985 FE 01       >                        cp     1
 826+ F987 D2 93 F9    >                        jp		nc,.GreaterThan1
 827+ F98A 78           .OneOrZero:             ld      a,b
 828+ F98B F6 02                                or      2
 829+ F98D 32 0B E9                             ld      (GalaxyDisplayEconomy),a
 830+ F990 C3 97 F9                             jp      .GenerateTechLevel
 831+ F993 78           .GreaterThan1:          ld      a,b
 832+ F994 32 0B E9                             ld      (GalaxyDisplayEconomy),a
 833+ F997 EE 07        .GenerateTechLevel:     xor     $07                                             ; tech = economy xor 7 + seed3 & 3 + government /2 + fovernemnt & 1
 834+ F999 47                                   ld      b,a
 835+ F99A 3A FB E8                             ld      a,(GalaxyWorkingSeed+3)
 836+ F99D E6 03                                and     $03
 837+ F99F 80                                   add     b
 838+ F9A0 47                                   ld      b,a
 839+ F9A1 3A 0A E9                             ld      a,(GalaxyDisplayGovernment)
 840+ F9A4 4F                                   ld      c,a
 841+ F9A5 CB 2F                                sra     a
 842+ F9A7 80                                   add     b
 843+ F9A8 47                                   ld      b,a
 844+ F9A9 79                                   ld      a,c
 845+ F9AA E6 01                                and     $1
 846+ F9AC 80                                   add     b
 847+ F9AD 32 0C E9                             ld      (GalaxyDisplayTekLevel),a
 848+ F9B0 CB 27        .GeneratePopulation:    sla     a                                               ; population = tech level * 4 + government + economy + 1
 849+ F9B2 CB 27                                sla     a
 850+ F9B4 21 0A E9                             ld      hl,GalaxyDisplayGovernment
 851+ F9B7 86                                   add     a,(hl)
 852+ F9B8 47                                   ld      b,a
 853+ F9B9 3A 0B E9                             ld      a,(GalaxyDisplayEconomy)
 854+ F9BC 80                                   add     a,b
 855+ F9BD 3C                                   inc     a
 856+ F9BE 32 0D E9                             ld      (GalaxyDisplayPopulation),a
 857+ F9C1 3A 0B E9     .GenerateProductivity:  ld      a,(GalaxyDisplayEconomy)
 858+ F9C4 EE 07                                xor     7
 859+ F9C6 C6 03                                add     3
 860+ F9C8 57                                   ld      d,a
 861+ F9C9 3A 0A E9                             ld      a,(GalaxyDisplayGovernment)
 862+ F9CC C6 04                                add     4
 863+ F9CE 5F                                   ld      e,a
 864+ F9CF ED 30                                mul                                                     ; the next mulitply will be a 16 bit value
 865+ F9D1 3A 0D E9                             ld      a,(GalaxyDisplayPopulation)
 866+ F9D4 26 00                                ld      h,0
 867+ F9D6 6F                                   ld      l,a
 868+ F9D7 CD D2 A9                             call    mulDEbyHL
 869+ F9DA EB                                   ex      de,hl
 870+ F9DB                                      ShiftDELeft1
 870+ F9DB CB 23       >			   sla e
 870+ F9DD CB 12       >			   rl  d
 871+ F9DF                                      ShiftDELeft1
 871+ F9DF CB 23       >			   sla e
 871+ F9E1 CB 12       >			   rl  d
 872+ F9E3                                      ShiftDELeft1
 872+ F9E3 CB 23       >			   sla e
 872+ F9E5 CB 12       >			   rl  d
 873+ F9E7 ED 53 0E E9                          ld      (GalaxyDisplayProductivity),de
 874+ F9EB 3A FD E8     .GenerateRadius:        ld		a,(GalaxyWorkingSeed+5)                         ;radius min = 256*11 = 2816 km
 875+ F9EE E6 0F                                and		$0F
 876+ F9F0 C6 0B                                add     11
 877+ F9F2 47                                   ld      b,a
 878+ F9F3 3A FB E8                             ld      a,(GalaxyWorkingSeed+3)
 879+ F9F6 4F                                   ld      c,a
 880+ F9F7 ED 43 10 E9                          ld      (GalaxyDisplayRadius),bc
 881+ F9FB C9                                   ret
 882+ F9FC
 883+ F9FC              galaxy_master_seed_to_system:
 884+ F9FC 21 10 E0     		ld		hl,galaxy_master_seed
 885+ F9FF 11 13 99     		ld		de,SystemSeed
 886+ FA02              galaxy_copy_seed:
 887+ FA02 ED A0        		ldi
 888+ FA04 ED A0        		ldi
 889+ FA06 ED A0        		ldi
 890+ FA08 ED A0        		ldi
 891+ FA0A ED A0        		ldi
 892+ FA0C ED A0        		ldi
 893+ FA0E C9           		ret
 894+ FA0F
 895+ FA0F              galaxy_master_to_galaxy_working:
 896+ FA0F 21 10 E0     		ld		hl,galaxy_master_seed
 897+ FA12 11 F8 E8     		ld		de,GalaxyWorkingSeed
 898+ FA15 18 EB        		jr		galaxy_copy_seed
 899+ FA17
 900+ FA17              galaxy_master_to_galaxy_naming:
 901+ FA17 21 10 E0     		ld		hl,galaxy_master_seed
 902+ FA1A 11 FE E8     		ld		de,GalaxyNamingSeed
 903+ FA1D 18 E3        		jr		galaxy_copy_seed
 904+ FA1F
 905+ FA1F              working_seed_to_galaxy_working:
 906+ FA1F 21 1D 9A             ld      hl,WorkingSeeds
 907+ FA22 11 F8 E8     		ld		de,GalaxyWorkingSeed
 908+ FA25 18 DB        		jr		galaxy_copy_seed
 909+ FA27
 910+ FA27              working_seed_to_galaxy_naming:
 911+ FA27 21 1D 9A             ld      hl,WorkingSeeds
 912+ FA2A 11 FE E8     		ld		de,GalaxyNamingSeed
 913+ FA2D 18 D3        		jr		galaxy_copy_seed
 914+ FA2F
 915+ FA2F              galaxy_ix_seed_to_galaxy_naming:
 916+ FA2F DD E5                push    ix
 917+ FA31 E1                   pop     hl
 918+ FA32 11 FE E8     		ld		de,GalaxyNamingSeed
 919+ FA35 18 CB        		jr		galaxy_copy_seed
 920+ FA37
 921+ FA37
 922+ FA37              galaxy_working_seed_to_galaxy_naming:
 923+ FA37 21 F8 E8             ld      hl,GalaxyWorkingSeed
 924+ FA3A 11 FE E8     		ld		de,GalaxyNamingSeed
 925+ FA3D 18 C3        		jr		galaxy_copy_seed
 926+ FA3F
 927+ FA3F              galaxy_working_seed_to_system:
 928+ FA3F 21 F8 E8     		ld		hl,GalaxyWorkingSeed
 929+ FA42 11 13 99     		ld		de,SystemSeed
 930+ FA45 18 BB        		jr		galaxy_copy_seed
 931+ FA47
 932+ FA47              system_seed_to_galaxy_working:
 933+ FA47 21 13 99     		ld		hl,SystemSeed
 934+ FA4A 11 F8 E8     		ld		de,GalaxyWorkingSeed
 935+ FA4D 18 B3        		jr		galaxy_copy_seed
 936+ FA4F
 937+ FA4F
 938+ FA4F              system_seed_to_galaxy_naming:
 939+ FA4F 21 13 99     		ld		hl,SystemSeed
 940+ FA52 11 FE E8     		ld		de,GalaxyNamingSeed
 941+ FA55 18 AB        		jr		galaxy_copy_seed
 942+ FA57
 943+ FA57              ix_seed_to_galaxy_working:
 944+ FA57 DD E5                push    ix
 945+ FA59 E1                   pop     hl
 946+ FA5A 11 F8 E8     		ld		de,GalaxyWorkingSeed
 947+ FA5D 18 A3        		jr		galaxy_copy_seed
 948+ FA5F
 949+ FA5F              ; Here we twist just once rather than the usual4 for a system
 950+ FA5F 3A FE E8     NextGalaxyNamingSeed:   ld		a,(GalaxyNamingSeed)			; QQ15 ; x = a + c
 951+ FA62 B7                                   or		a							; clear carry flag
 952+ FA63 21 00 E9                             ld		hl,GalaxyNamingSeed+2			; hl -> qq+2 [c]
 953+ FA66 86                                   add		a,(hl)						; a= QQ15 [a]+ QQ15 [c]
 954+ FA67 47                                   ld		b,a							; partial sum lo [x]
 955+ FA68              ; y = b + d	+ carry
 956+ FA68 3A FF E8                             ld		a,(GalaxyNamingSeed+1)          ; [b]
 957+ FA6B 21 01 E9                             ld		hl,GalaxyNamingSeed+3			; HL -> QQ+3 [d] we don't inc as it affects carry)
 958+ FA6E 8E                                   adc		a,(hl)						; note add with carry
 959+ FA6F 4F                                   ld		c,a  						; c = QQ1+QQ3+carry bit parial sum hi
 960+ FA70 3A 00 E9                             ld		a,(GalaxyNamingSeed+2)
 961+ FA73 32 FE E8                             ld		(GalaxyNamingSeed+0),a			; copy qq152 to qq150 [a] = [c]
 962+ FA76 3A 01 E9                             ld		a,(GalaxyNamingSeed+3)
 963+ FA79 32 FF E8                             ld		(GalaxyNamingSeed+1),a			; copy qq153 to qq151 [b] = [d]
 964+ FA7C 3A 03 E9                             ld		a,(GalaxyNamingSeed+5)
 965+ FA7F 32 01 E9                             ld		(GalaxyNamingSeed+3),a			; copy qq155 to qq153 [d] = [f]
 966+ FA82 3A 02 E9                             ld		a,(GalaxyNamingSeed+4)
 967+ FA85 32 00 E9                             ld		(GalaxyNamingSeed+2),a			; copy qq154 to qq152 [c] = [e]
 968+ FA88 B7                                   or		a
 969+ FA89 78                                   ld		a,b
 970+ FA8A 21 00 E9                             ld		hl,GalaxyNamingSeed+2		    ; hl -> qq+2
 971+ FA8D 86                                   add	    a,(hl)
 972+ FA8E 32 02 E9                             ld		(GalaxyNamingSeed+4),a			; e = x + [c]
 973+ FA91 79                                   ld		a,c
 974+ FA92 21 01 E9                             ld		hl,GalaxyNamingSeed+3			; HL -> QQ+3 )we don't inc as it affects carry)
 975+ FA95 8E                                   adc		a,(hl)
 976+ FA96 32 03 E9                             ld		(GalaxyNamingSeed+5),a			; f = y + [d] + carry
 977+ FA99 C9                                   ret
 978+ FA9A
 979+ FA9A
 980+ FA9A 3A 03 E9     GalaxyNamingLoop:       ld		a,(GalaxyNamingSeed+5)	        ; a = first byte of name seed
 981+ FA9D E6 1F                                and 	$1F					            ; Keep bottom 5 bits only
 982+ FA9F FE 00                                cp		0					            ; 0 = skip 2 chars
 983+ FAA1 28 12                                jr		z,.SkipPhrase
 984+ FAA3 C6 0C                                add		a,12
 985+ FAA5 CB 27                                sla		a					            ; phrase = (a+12)*2
 986+ FAA7 21 A0 E8                             ld		hl,GalaxyName_digrams
 987+ FAAA ED 31                                add		hl,a
 988+ FAAC ED A0                                ldi
 989+ FAAE 7E                                   ld		a,(hl)
 990+ FAAF FE 3F                                cp		'?'
 991+ FAB1 28 02                                jr		z,.SkipPhrase
 992+ FAB3 ED A0        .AddExtra:              ldi
 993+ FAB5 D5           .SkipPhrase:            push	de
 994+ FAB6 CD 5F FA                             call	NextGalaxyNamingSeed
 995+ FAB9 D1                                   pop		de
 996+ FABA C9                                   ret
 997+ FABB
 998+ FABB              ; takes location in BC, finds seed and expands the name
 999+ FABB ED 43 5B E8  galaxy_name_at_bc:      ld      (GalaxyTargetSystem),bc
1000+ FABF CD 65 FC     galaxy_digram_seed:     call    galaxy_system_under_cursor
1001+ FAC2 FE 00                                cp      0
1002+ FAC4 C8                                   ret     z
1003+ FAC5
1004+ FAC5 CD 27 FA     GalaxyDigramWorkings:   call    working_seed_to_galaxy_naming
1005+ FAC8 C3 E0 FA                             jp      GalaxyDigramNamingSeed
1006+ FACB
1007+ FACB CD 17 FA     GalaxyDigramSeed:       call    galaxy_master_to_galaxy_naming
1008+ FACE C3 E0 FA                             jp      GalaxyDigramNamingSeed
1009+ FAD1
1010+ FAD1 CD 37 FA     GalaxyDigramWorkingSeed:call    galaxy_working_seed_to_galaxy_naming
1011+ FAD4 C3 E0 FA                             jp      GalaxyDigramNamingSeed
1012+ FAD7
1013+ FAD7 CD 2F FA     GalaxyDigramWIXSeed:    call    galaxy_ix_seed_to_galaxy_naming
1014+ FADA C3 E0 FA                             jp      GalaxyDigramNamingSeed
1015+ FADD
1016+ FADD CD 4F FA     SystemGetDigramSeed:    call    system_seed_to_galaxy_naming
1017+ FAE0
1018+ FAE0 11 7F E8     GalaxyDigramNamingSeed: ld		de,GalaxyExpandedName
1019+ FAE3 06 03        GalaxyDigramToDE:       ld		b,3
1020+ FAE5 3A FE E8                             ld		a,(GalaxyNamingSeed)
1021+ FAE8 E6 40                                and		$40
1022+ FAEA 28 03                                jr		z,.SmallSizeName
1023+ FAEC CD 9A FA     .LargeSizeName:         call	GalaxyNamingLoop
1024+ FAEF CD 9A FA     .SmallSizeName:         call	GalaxyNamingLoop
1025+ FAF2 CD 9A FA                             call	GalaxyNamingLoop
1026+ FAF5 CD 9A FA                             call	GalaxyNamingLoop
1027+ FAF8 EB           .DoneName:              ex		de,hl
1028+ FAF9 36 00                                ld		(hl),0
1029+ FAFB EB                                   ex		de,hl
1030+ FAFC AF                                   xor     a
1031+ FAFD 3D                                   dec     a
1032+ FAFE C9                                   ret
1033+ FAFF              ;reorte X 13 Y 97
1034+ FAFF
1035+ FAFF              ;----------------------------------------------------------------------------------------------------------------------------------
1036+ FAFF 3A 5D E8     is_system_found:        ld      a,(GalaxySearchLength)
1037+ FB02                                      ;dec     a                       ; as we won't check the /0 just first match
1038+ FB02 4F                                   ld      c,a                     ; will always be max of 32 as that is what length routine does
1039+ FB03 06 00                                ld      b,0                     ; so we can use cpir
1040+ FB05 11 5E E8     .readyToSearch:         ld      de,GalaxySearchString   ; hl = string we are serching
1041+ FB08 21 7F E8                             ld      hl,GalaxyExpandedName   ; de = the expanded galaxy name
1042+ FB0B 7E           .searchLoop:            ld      a,(hl)                  ; if the string is too short then maybe there is a longer one to find
1043+ FB0C                                      JumpIfAIsZero   .noMatch        ; but
1043+ FB0C A7          >                        and a   ; cp 0 - changed to and a for optimisation but affects other flags
1043+ FB0D CA 1B FB    >                        jp	z, .noMatch
1044+ FB10 1A                                   ld      a,(de)                  ; get the character to search for
1045+ FB11 ED A1                                cpi                             ; compare with value in A from HL
1046+ FB13 20 06                                jr      nz,.noMatch
1047+ FB15 13                                   inc     de                      ; move to next search character
1048+ FB16 E2 1E FB                             jp      po, .matched            ; if c = 0 then we have hit the bingpot
1049+ FB19 18 F0                                jr      .searchLoop             ; else keep looping
1050+ FB1B              .noMatch:               SetAFalse
1050+ FB1B 3E FF       >                        ld      a,$FF
1051+ FB1D C9                                   ret
1052+ FB1E              .matched:               SetATrue
1052+ FB1E AF          >                        xor     a
1053+ FB1F C9                                   ret
1054+ FB20
1055+ FB20 21 5E E8     set_galaxy_search_len:  ld      hl,GalaxySearchString
1056+ FB23 06 00                                ld      b,0
1057+ FB25 0E 20                                ld      c,32                    ; limiter for missing /0
1058+ FB27 7E           .SearchLoop:            ld      a,(hl)
1059+ FB28                                      JumpIfAIsZero .foundLength
1059+ FB28 A7          >                        and a   ; cp 0 - changed to and a for optimisation but affects other flags
1059+ FB29 CA 34 FB    >                        jp	z, .foundLength
1060+ FB2C 04                                   inc     b
1061+ FB2D 0D                                   dec     c
1062+ FB2E 28 04                                jr      z,.foundLength
1063+ FB30 23                                   inc     hl
1064+ FB31 C3 27 FB                             jp      .SearchLoop
1065+ FB34 78           .foundLength:           ld      a,b
1066+ FB35 32 5D E8                             ld      (GalaxySearchLength),a
1067+ FB38 C9                                   ret
1068+ FB39
1069+ FB39              ; find system by searching for GalaxySearchString
1070+ FB39 CD 20 FB     find_system_by_name:    call    set_galaxy_search_len
1071+ FB3C AF                                   xor     a
1072+ FB3D 32 2C 99                             ld      (XSAV),a
1073+ FB40 DD 21 16 E0                          ld      ix,galaxy_data
1074+ FB44 CD 57 FA     .nextSystem:            call    ix_seed_to_galaxy_working
1075+ FB47 CD D1 FA                             call    GalaxyDigramWorkingSeed
1076+ FB4A CD FF FA                             call    is_system_found
1077+ FB4D                                      JumpIfATrue .FoundAtIX
1077+ FB4D A7          >                        and     a
1077+ FB4E CA 6A FB    >                        jp      z, .FoundAtIX
1078+ FB51 3A 2C 99     .notFoundYet:           ld      a,(XSAV)
1079+ FB54 3D                                   dec     a
1080+ FB55 28 10                                jr      z,.NoMoreSystems
1081+ FB57 32 2C 99     .moreToSearch:          ld      (XSAV),a
1082+ FB5A DD E5                                push    ix
1083+ FB5C E1                                   pop     hl
1084+ FB5D ED 34 08 00                          add     hl,8
1085+ FB61 E5                                   push    hl
1086+ FB62 DD E1                                pop     ix
1087+ FB64 C3 44 FB                             jp      .nextSystem
1088+ FB67 3E FF        .NoMoreSystems:         ld      a,$FF
1089+ FB69 C9                                   ret
1090+ FB6A CD 57 FA     .FoundAtIX              call    ix_seed_to_galaxy_working
1091+ FB6D C9                                   ret
1092+ FB6E              ;----------------------------------------------------------------------------------------------------------------------------------
1093+ FB6E 00 00        nearestfound:           DW 0
1094+ FB70              ; In here de carries current nearest and loads into nearest found
1095+ FB70              ; does a basic distance check for x then y each under threshold, then does x+y under threshold  jsut in case we have an extreme like 0 x and high dist y
1096+ FB70 DD 21 16 E0  find_nearest_to_bc:     ld      ix,galaxy_data
1097+ FB74 FD 26 00                             ld      iyh,0
1098+ FB77 FD 2E 78                             ld      iyl,120
1099+ FB7A ED 43 6E FB                          ld      (nearestfound),bc
1100+ FB7E DD 7E 03     find_nearest_loop:      ld      a,(ix+3)                        ;
1101+ FB81 5F                                   ld      e,a                             ; e= current seed x
1102+ FB82                                      JumpIfALTNusng c, nearestXPosLT         ; not we need to know if its e - c or c - e we coudl do 2's compliement of course
1102+ FB82 B9          >                        cp      c
1102+ FB83 DA 94 FB    >                        jp		c, nearestXPosLT
1103+ FB86 D5           nearestXPosGTE:         push    de                              ;
1104+ FB87 26 00                                ld      h,0                             ;
1105+ FB89 6F                                   ld      l,a                             ; hl = seed x
1106+ FB8A 16 00                                ld      d,0                             ;
1107+ FB8C 59                                   ld      e,c                             ; de = nearest x
1108+ FB8D B7                                   or      a                               ;
1109+ FB8E ED 52                                sbc     hl,de                           ; hl = distance between the two
1110+ FB90 D1                                   pop     de
1111+ FB91 C3 9E FB                             jp      nearestDistXPos
1112+ FB94 D5           nearestXPosLT:          push    de                              ;
1113+ FB95 26 00                                ld      h,0                             ;
1114+ FB97 69                                   ld      l,c                             ; hl = nearest x
1115+ FB98 16 00                                ld      d,0                             ;
1116+ FB9A B7                                   or      a                               ; de = seed x
1117+ FB9B ED 52                                sbc     hl,de                           ;
1118+ FB9D D1                                   pop     de                              ; hl = distance between the two
1119+ FB9E 7D           nearestDistXPos:        ld      a,l                             ; so l = abs distance as does a
1120+ FB9F FD BD                                cp      iyl                             ; under initial threshold?
1121+ FBA1 30 3D                                jr      nc,find_nearest_miss            ; no so its a miss
1122+ FBA3               ;DEBUG                       ld      l,a                             ; l = distance (we can drop thsi as it was done above!)
1123+ FBA3 DD 7E 01                             ld      a,(ix+1)                        ;
1124+ FBA6 57                                   ld      d,a                             ; d = seed y
1125+ FBA7                                      JumpIfALTNusng b, nearestYPosLT         ; determine abs calc
1125+ FBA7 B8          >                        cp      b
1125+ FBA8 DA BC FB    >                        jp		c, nearestYPosLT
1126+ FBAB E5           nearestYPosGTE:         push    hl                              ; save current x distance
1127+ FBAC D5                                   push    de                              ;
1128+ FBAD 26 00                                ld      h,0                             ;
1129+ FBAF 6F                                   ld      l,a                             ; hl = seed y
1130+ FBB0 16 00                                ld      d,0                             ;
1131+ FBB2 58                                   ld      e,b                             ; de = nearest y
1132+ FBB3 B7                                   or      a                               ;
1133+ FBB4 ED 52                                sbc     hl,de                           ; hl = distance between the two
1134+ FBB6 7D                                   ld      a,l
1135+ FBB7 D1                                   pop     de
1136+ FBB8 E1                                   pop     hl
1137+ FBB9 C3 CA FB                             jp      nearestDistYPos
1138+ FBBC E5           nearestYPosLT:          push    hl                              ; save current x distance
1139+ FBBD D5                                   push    de                              ;
1140+ FBBE 26 00                                ld      h,0                             ;
1141+ FBC0 68                                   ld      l,b                             ; hl = nearest y
1142+ FBC1 5A                                   ld      e,d                             ;
1143+ FBC2 16 00                                ld      d,0                             ; de = seed y
1144+ FBC4 B7                                   or      a                               ;
1145+ FBC5 ED 52                                sbc     hl,de                           ; hl = distance between the two
1146+ FBC7 7D                                   ld      a,l
1147+ FBC8 D1                                   pop     de
1148+ FBC9 E1                                   pop     hl                              ; now we get distance in l back into hl, distance y is in a
1149+ FBCA FD BD        nearestDistYPos:        cp      iyl                             ; under initial threshold?
1150+ FBCC 30 12                                jr      nc, find_nearest_miss
1151+ FBCE 26 00                                ld      h,0                             ; hl = distance for x
1152+ FBD0 ED 31                                add     hl,a                            ; adding distance y
1153+ FBD2 7D                                   ld      a,l                             ; and copy it to l
1154+ FBD3 FD BD                                cp      iyl                             ; is the pair under distance
1155+ FBD5 30 09                                jr      nc, find_nearest_miss           ;
1156+ FBD7 FD 6F        nearest_found_a_hit:    ld      iyl,a                           ; so we have a hit
1157+ FBD9 ED 53 6E FB                          ld      (nearestfound),de               ;
1158+ FBDD                                      ReturnIfALTNusng 2                      ; exact match bail out, note 1 can be an exact match due to Y axis, as we are looking at seed pos then this is accurate enough and we won't hit dx 1 and dy 0 hopefully in any galaxy :)
1158+ FBDD FE 02       >                        cp    2
1158+ FBDF D8          >                        ret	 c
1159+ FBE0 DD E5        find_nearest_miss:      push     ix
1160+ FBE2 E1                                   pop      hl
1161+ FBE3 ED 34 08 00                          add      hl,8
1162+ FBE7 E5                                   push     hl
1163+ FBE8 DD E1                                pop      ix
1164+ FBEA FD 25                                dec     iyh
1165+ FBEC FD 7C                                ld      a,iyh
1166+ FBEE                                      JumpIfAIsNotZero find_nearest_loop
1166+ FBEE FE 00       >                        cp	0
1166+ FBF0 C2 7E FB    >                        jp	nz,find_nearest_loop
1167+ FBF3 ED 4B 6E FB                          ld      bc ,(nearestfound)              ; if we hit here then after searching we have found a nearest
1168+ FBF7 C9                                   ret
1169+ FBF8              ;----------------------------------------------------------------------------------------------------------------------------------
1170+ FBF8              ; Does a sqare root distance
1171+ FBF8 16 00        galaxy_find_distance:   ld      d,0
1172+ FBFA 26 00                                ld      h,0
1173+ FBFC 3A 57 E8                             ld      a,(GalaxyPresentSystem)
1174+ FBFF 47                                   ld      b,a
1175+ FC00 3A 59 E8                             ld      a,(GalaxyDestinationSystem)
1176+ FC03 B8                                   cp      b
1177+ FC04 20 0E                                jr      nz,.NotSame
1178+ FC06 C5           .XSame:                 push    bc
1179+ FC07 F5                                   push    af
1180+ FC08 3A 58 E8                             ld      a,(GalaxyPresentSystem+1)
1181+ FC0B 47                                   ld      b,a
1182+ FC0C 3A 5A E8                             ld      a,(GalaxyDestinationSystem+1)
1183+ FC0F B8                                   cp      b
1184+ FC10 C1                                   pop     bc
1185+ FC11 F1                                   pop     af
1186+ FC12 28 49                                jr      z,.ZeroDistance
1187+ FC14 30 08        .NotSame:               jr      nc,.DestinationGTEPresentX
1188+ FC16 68           .DestinationLTPresentX: ld      l,b
1189+ FC17 5F                                   ld      e,a
1190+ FC18 B7                                   or      a
1191+ FC19 ED 52                                sbc     hl,de
1192+ FC1B C3 23 FC                             jp      .SquareXDist
1193+ FC1E 6F           .DestinationGTEPresentX:ld      l,a
1194+ FC1F 58                                   ld      e,b
1195+ FC20 B7                                   or      a
1196+ FC21 ED 52                                sbc     hl,de
1197+ FC23 55           .SquareXDist:           ld      d,l
1198+ FC24 5D                                   ld      e,l
1199+ FC25 ED 30                                mul
1200+ FC27 3A 58 E8     .CalcYDistSq            ld      a,(GalaxyPresentSystem+1)
1201+ FC2A 47                                   ld      b,a
1202+ FC2B 3A 5A E8                             ld      a,(GalaxyDestinationSystem+1)
1203+ FC2E B8                                   cp      b
1204+ FC2F 30 0B                                jr      nc,.DestinationGTEPresentY
1205+ FC31 4F           .DestinationLTPresentY: ld      c,a
1206+ FC32 68                                   ld      l,b
1207+ FC33 06 00                                ld      b,0
1208+ FC35 26 00                                ld      h,0
1209+ FC37 ED 42                                sbc     hl,bc
1210+ FC39 C3 44 FC                             jp      .DestinationYDone
1211+ FC3C 48           .DestinationGTEPresentY:ld      c,b
1212+ FC3D 6F                                   ld      l,a
1213+ FC3E 06 00                                ld      b,0
1214+ FC40 26 00                                ld      h,0
1215+ FC42 ED 42                                sbc     hl,bc
1216+ FC44 CB 2D        .DestinationYDone:      sra     l                   ; divide L by 2 for galaxy size
1217+ FC46 7D                                   ld      a,l
1218+ FC47 EB                                   ex      de,hl
1219+ FC48 57                                   ld      d,a
1220+ FC49 5F                                   ld      e,a
1221+ FC4A ED 30        .SquareYDist:           mul
1222+ FC4C 19                                   add     hl,de
1223+ FC4D EB                                   ex      de,hl
1224+ FC4E CD 9C AA                             call    asm_sqrt            ; distance via pythagoras in hl
1225+ FC51                                      ShiftHLLeft1
1225+ FC51 CB 25       >			   sla l
1225+ FC53 CB 14       >			   rl  h
1226+ FC55                                      ShiftHLLeft1                ; Multiply by 4 to get distance
1226+ FC55 CB 25       >			   sla l
1226+ FC57 CB 14       >			   rl  h
1227+ FC59 22 B8 99                             ld      (Distance),hl       ; Distance is now caulated distance
1228+ FC5C C9                                   ret
1229+ FC5D AF           .ZeroDistance:          xor     a
1230+ FC5E 32 B8 99                             ld      (Distance),a
1231+ FC61 32 B9 99                             ld      (Distance+1),a
1232+ FC64 C9                                   ret
1233+ FC65              ;----------------------------------------------------------------------------------------------------------------------------------
1234+ FC65              ; Find the systems pointed to by GalaxyTargetSystem and loads it into WorkingSeeds
1235+ FC65              ; this needs to chagne to galaxyresultseed or galayxworkingseed
1236+ FC65 AF           galaxy_system_under_cursor:xor     a
1237+ FC66 32 2C 99                             ld		(XSAV),a
1238+ FC69 DD 21 16 E0                          ld      ix,galaxy_data
1239+ FC6D 2A 5B E8     .GCCounterLoop:         ld      hl,(GalaxyTargetSystem)
1240+ FC70 DD E5                                push    ix
1241+ FC72 7D                                   ld      a,l
1242+ FC73 DD BE 03                             cp      (ix+3)                          ; seed x
1243+ FC76 20 14                                jr      nz,.ItsNotThisX
1244+ FC78 7C                                   ld      a,h
1245+ FC79 DD BE 01                             cp      (ix+1)                          ; seed x
1246+ FC7C 20 0E        .FoundSystem:           jr      nz,.ItsNotThisX
1247+ FC7E DD E5                                push    ix
1248+ FC80 E1                                   pop     hl
1249+ FC81 11 1D 9A                             ld      de,WorkingSeeds                 ;' copy to wkring Seeds
1250+ FC84 CD 12 9E                             call    copy_seed
1251+ FC87 3E FF                                ld      a,$FF
1252+ FC89 DD E1                                pop     ix
1253+ FC8B C9                                   ret
1254+ FC8C E1           .ItsNotThisX:           pop     hl
1255+ FC8D ED 34 08 00                          add     hl,8
1256+ FC91 E5                                   push    hl
1257+ FC92 DD E1                                pop     ix
1258+ FC94 3A 2C 99                             ld		a,(XSAV)
1259+ FC97 3D                                   dec		a
1260+ FC98 32 2C 99                             ld      (XSAV),a
1261+ FC9B FE 00                                cp		0
1262+ FC9D C8                                   ret		z
1263+ FC9E 18 CD                                jr		.GCCounterLoop
1264+ FCA0              ;----------------------------------------------------------------------------------------------------------------------------------
1265+ FCA0 21 13 99     SeedGalaxy:             ld      hl,SystemSeed                   ; First copy system seed to galaxy master
1266+ FCA3 11 10 E0                             ld      de,galaxy_master_seed           ; .
1267+ FCA6 ED A0                                ldi                                     ; .
1268+ FCA8 ED A0                                ldi                                     ; .
1269+ FCAA ED A0                                ldi                                     ; .
1270+ FCAC ED A0                                ldi                                     ; .
1271+ FCAE ED A0                                ldi                                     ; .
1272+ FCB0 ED A0                                ldi                                     ; .
1273+ FCB2 DD 21 16 E0                          ld      ix,galaxy_data                  ; Generate system seed data for each planet
1274+ FCB6 AF                                   xor		a                               ; .
1275+ FCB7 32 2C 99                             ld		(XSAV),a                        ; .
1276+ FCBA DD E5        SeedGalaxyLoop:         push    ix                              ; .
1277+ FCBC D1                                   pop     de                              ; .
1278+ FCBD 21 13 99                             ld      hl,SystemSeed                   ; .
1279+ FCC0 CD 12 9E                             call    copy_seed                       ; .
1280+ FCC3 DD E5                                push    ix                              ; .
1281+ FCC5 E1                                   pop     hl                              ; .
1282+ FCC6 ED 34 08 00                          add     hl,8                            ; .
1283+ FCCA E5                                   push    hl                              ; .
1284+ FCCB DD E1                                pop     ix                              ; .
1285+ FCCD CD 47 9E                             call    next_system_seed                ; .
1286+ FCD0 3A 2C 99                             ld		a,(XSAV)                        ; .
1287+ FCD3 3D                                   dec		a                               ; .
1288+ FCD4 FE 00                                cp		0                               ; .
1289+ FCD6 C8                                   ret		z                               ; .
1290+ FCD7 32 2C 99                             ld		(XSAV),a                        ; .
1291+ FCDA 18 DE                                jr      SeedGalaxyLoop                  ; .
1292+ FCDC C9                                   ret
1293+ FCDD
1294+ FCDD              GalaxyBankSize   EQU $ - galaxy_page_marker
1295+ FCDD
# file closed: ./Universe/Galaxy/galaxy_data.asm
1429  FCDD
1430  FCDD                  DISPLAY "Galaxy Data - Bytes free ",/D, $2000 - ($- GalaxyDataAddr)
1431  FCDD
1432  FCDD              ; Bank 83  ------------------------------------------------------------------------------------------------------------------------
1433  FCDD                  SLOT    SunBankAddr
1434  FCDD                  PAGE    BankSunData
1435  FCDD              	ORG	    SunBankAddr,BankSunData
1436  C000                  INCLUDE "./Universe/Sun/sun_data.asm"
# file opened: ./Universe/Sun/sun_data.asm
   1+ C000              fdraw; In  flight ship data tables
   2+ C000              ; In  flight ship data tables
   3+ C000              ; In  flight ship data tables
   4+ C000              ; There can be upto &12 objects in flight.
   5+ C000              ; To avoid hassle of memory heap managment, the free list
   6+ C000              ; will correspond to a memory bank offset so data will be held in
   7+ C000              ; 1 bank per universe object. Its a waste of a lot of memory but really
   8+ C000              ; 1 bank per universe object. Its a waste of a lot of memory but really
   9+ C000              ; simple that way. Each bank will be 8K and swapped on 8K slot 7 $E000 to $FFFF
  10+ C000              ; This means each gets its own line list, inwork etc
  11+ C000
  12+ C000              ; "Runtime Ship Data paged into in Bank 7"
  13+ C000 53 75 6E 20  StartOfSun:        DB "Sun and Planet X"
  13+ C004 61 6E 64 20
  13+ C008 50 6C 61 6E
  13+ C00C 65 74 20 58
  14+ C010              ; NOTE we can cheat and pre allocate segs just using a DS for now
  15+ C010              CheckRowHLOnScreen:     MACRO   failtarget
  16+ C010 ~                                    ld      a,h                             ; is h byte set, i.e > 256 or < 0
  17+ C010 ~                                    and     a                               ; .
  18+ C010 ~                                    jr      nz,failtarget                   ; h <> 0 so fails (covers <0 and > 255
  19+ C010 ~                                    ld      a,l                             ; l bit 7 0?
  20+ C010 ~                                    and     Bit7Only                        ; covers l > 127 (screen draw area is 0 to 192 / 3 * 2 (128)
  21+ C010 ~                                    jr      nz,failtarget                   ;
  22+ C010                                      ENDM
  23+ C010
  24+ C010              ; IY = SBnKLineArray + rowValue*2
  25+ C010              IYEquRowN:              MACRO   rowValue                        ; set up iy as target address
  26+ C010 ~                                    ld      a,rowValue
  27+ C010 ~                                    ld      hl,SBnKLineArray
  28+ C010 ~                                    add     hl,a
  29+ C010 ~                                    add     hl,a
  30+ C010 ~                                    push    hl
  31+ C010 ~                                    pop     iy
  32+ C010                                      ENDM
  33+ C010              ;   \ -> & 565D \ See ship data files chosen and loaded after flight code starts running.
  34+ C010              ; Universe map substibute for INWK
  35+ C010              ;-Camera Position of Ship----------------------------------------------------------------------------------------------------------
  36+ C010              SBnKDataBlock:
  37+ C010                                      INCLUDE "./Universe/Sun/SunPosVars.asm"
# file opened: ././Universe/Sun/SunPosVars.asm
   1++C010              ;-Camera Position of Ship----------------------------------------------------------------------------------------------------------
   2++C010 00           SBnKxlo                     DB  0                       ; INWK+0
   3++C011 00           SBnKxhi                     DB  0                       ; there are hi medium low as some times these are 24 bit
   4++C012 00           SBnKxsgn                    DB  0                       ; INWK+2
   5++C013 00           SBnKylo                     DB  0                       ; INWK+3 \ ylo
   6++C014 00           SBnKyhi                     DB  0                       ; INWK+4 \ yHi
   7++C015 00           SBnKysgn                    DB  0                       ; INWK +5
   8++C016 00           SBnKzlo                     DB  0                       ; INWK +6
   9++C017 00           SBnKzhi                     DB  0                       ; INWK +7
  10++C018 00           SBnKzsgn                    DB  0                       ; INWK +8
  11++C019
# file closed: ././Universe/Sun/SunPosVars.asm
  38+ C019                                      INCLUDE "./Universe/Sun/SunRotationMatrixVars.asm"
# file opened: ././Universe/Sun/SunRotationMatrixVars.asm
   1++C019              ;-Rotation Matrix of Ship----------------------------------------------------------------------------------------------------------
   2++C019              ; Rotation data is stored as lohi, but only 15 bits with 16th bit being  a sign bit. Note this is NOT 2'c compliment
   3++C019 00 00        SBnKrotmatSidevX            DW  0                       ; INWK +21
   4++C01B              SBnKrotmatSidev             equ SBnKrotmatSidevX
   5++C01B 00 00        SBnKrotmatSidevY            DW  0                       ; INWK +23
   6++C01D 00 00        SBnKrotmatSidevZ            DW  0                       ; INWK +25
   7++C01F 00 00        SBnKrotmatRoofvX            DW  0                       ; INWK +15
   8++C021              SBnKrotmatRoofv             equ SBnKrotmatRoofvX
   9++C021 00 00        SBnKrotmatRoofvY            DW  0                       ; INWK +17
  10++C023 00 00        SBnKrotmatRoofvZ            DW  0                       ; INWK +19
  11++C025 00 00        SBnKrotmatNosevX            DW  0                       ; INWK +9
  12++C027              SBnKrotmatNosev             EQU SBnKrotmatNosevX
  13++C027 00 00        SBnKrotmatNosevY            DW  0                       ; INWK +11
  14++C029 00 00        SBnKrotmatNosevZ            DW  0                       ; INWK +13
  15++C02B
# file closed: ././Universe/Sun/SunRotationMatrixVars.asm
  39+ C02B                                      INCLUDE "./Universe/Sun/SunAIRuntimeData.asm"
# file opened: ././Universe/Sun/SunAIRuntimeData.asm
   1++C02B              ; -- Ship AI data
   2++C02B 00           SBnKRotXCounter             DB  0                       ; INWK +29
   3++C02C 00           SBnKRotZCounter             DB  0                       ; INWK +30
   4++C02D 00           SBnkCam0yLo                 DB  0                       ; INWK +33 ????
   5++C02E 00           SBnkCam0yHi                 DB  0                       ; INWK +34?????
   6++C02F
# file closed: ././Universe/Sun/SunAIRuntimeData.asm
  40+ C02F
  41+ C02F
  42+ C02F                                      INCLUDE "./Universe/Sun/SunXX16Vars.asm"
# file opened: ././Universe/Sun/SunXX16Vars.asm
   1++C02F              ;-- XX16 --------------------------------------------------------------------------------------------------------------------------
   2++C02F 00 00        SBnkTransmatSidevX          DW  0               ; XX16+0
   3++C031              SBnkTransmatSidev           EQU SBnkTransmatSidevX
   4++C031 00 00        SBnkTransmatSidevY          DW 0                ; XX16+2
   5++C033 00 00        SBnkTransmatSidevZ          DW 0                ; XX16+2
   6++C035 00 00        SBnkTransmatRoofvX          DW 0
   7++C037              SBnkTransmatRoofv           EQU SBnkTransmatRoofvX
   8++C037 00 00        SBnkTransmatRoofvY          DW 0                ; XX16+2
   9++C039 00 00        SBnkTransmatRoofvZ          DW 0                ; XX16+2
  10++C03B 00 00        SBnkTransmatNosevX          DW 0
  11++C03D              SBnkTransmatNosev           EQU SBnkTransmatNosevX
  12++C03D 00 00        SBnkTransmatNosevY          DW 0                ; XX16+2
  13++C03F 00 00        SBnkTransmatNosevZ          DW 0                ; XX16+2
  14++C041 00 00        SBnkTransmatTransX          DW 0
  15++C043 00 00        SBnkTransmatTransY          DW 0
  16++C045 00 00        SBnkTransmatTransZ          DW 0
  17++C047              SunXX16                      equ SBnkTransmatSidev
  18++C047              ;-- XX16Inv --------------------------------------------------------------------------------------------------------------------------
  19++C047 00 00        SBnkTransInvRow0x0          DW 0
  20++C049 00 00        SBnkTransInvRow0x1          DW 0
  21++C04B 00 00        SBnkTransInvRow0x2          DW 0
  22++C04D 00 00        SBnkTransInvRow0x3          DW 0
  23++C04F 00 00        SBnkTransInvRow1y0          DW 0
  24++C051 00 00        SBnkTransInvRow1y1          DW 0
  25++C053 00 00        SBnkTransInvRow1y2          DW 0
  26++C055 00 00        SBnkTransInvRow1y3          DW 0
  27++C057 00 00        SBnkTransInvRow2z0          DW 0
  28++C059 00 00        SBnkTransInvRow2z1          DW 0
  29++C05B 00 00        SBnkTransInvRow2z2          DW 0
  30++C05D 00 00        SBnkTransInvRow2z3          DW 0
  31++C05F
  32++C05F              SunXX16Inv             equ SBnkTransInvRow0x0
  33++C05F
# file closed: ././Universe/Sun/SunXX16Vars.asm
  43+ C05F                                      INCLUDE "./Universe/Sun/SunXX25Vars.asm"
# file opened: ././Universe/Sun/SunXX25Vars.asm
   1++C05F              ;-- XX25 --------------------------------------------------------------------------------------------------------------------------
   2++C05F 00           SBnKProjxLo                 DB  0
   3++C060 00           SBnKProjxHi                 DB  0
   4++C061 00           SBnKProjxSgn                DB  0
   5++C062              SBnKProjx                   EQU SBnKProjxLo
   6++C062 00           SBnKProjyLo                 DB  0
   7++C063 00           SBnKProjyHi                 DB  0
   8++C064 00           SBnKProjySgn                DB  0
   9++C065              SBnKProjy                   EQU SBnKProjyLo
  10++C065 00           SBnKProjzLo                 DB  0
  11++C066 00           SBnKProjzHi                 DB  0
  12++C067 00           SBnKProjzSgn                DB  0
  13++C068              SBnKProjz                   EQU SBnKProjzLo
  14++C068              SXX25                       EQU SBnKProjxLo
  15++C068
# file closed: ././Universe/Sun/SunXX25Vars.asm
  44+ C068                                      INCLUDE "./Universe/Sun/SunXX18Vars.asm"
# file opened: ././Universe/Sun/SunXX18Vars.asm
   1++C068              ;-- XX18 --------------------------------------------------------------------------------------------------------------------------
   2++C068 00           SBnKDrawCam0xLo             DB  0               ; XX18+0
   3++C069 00           SBnKDrawCam0xHi             DB  0               ; XX18+1
   4++C06A 00           SBnKDrawCam0xSgn            DB  0               ; XX18+2
   5++C06B              SBnKDrawCam0x               equ SBnKDrawCam0xLo
   6++C06B 00           SBnKDrawCam0yLo             DB  0               ; XX18+3
   7++C06C 00           SBnKDrawCam0yHi             DB  0               ; XX18+4
   8++C06D 00           SBnKDrawCam0ySgn            DB  0               ; XX18+5
   9++C06E              SBnKDrawCam0y               equ SBnKDrawCam0yLo
  10++C06E 00           SBnKDrawCam0zLo             DB  0               ; XX18+6
  11++C06F 00           SBnKDrawCam0zHi             DB  0               ; XX18+7
  12++C070 00           SBnKDrawCam0zSgn            DB  0               ; XX18+8
  13++C071              SBnKDrawCam0z               equ SBnKDrawCam0zLo
  14++C071              SXX18                       equ SBnKDrawCam0xLo
  15++C071
# file closed: ././Universe/Sun/SunXX18Vars.asm
  45+ C071
  46+ C071              ; Used to make 16 bit reads a little cleaner in source code
  47+ C071 00 00 00     SBnKzPoint                  DS  3
  48+ C074              SBnKzPointLo                equ SBnKzPoint
  49+ C074              SBnKzPointHi                equ SBnKzPoint+1
  50+ C074              SBnKzPointSign              equ SBnKzPoint+2
  51+ C074                                      INCLUDE "./Universe/Sun/SunXX15Vars.asm"
# file opened: ././Universe/Sun/SunXX15Vars.asm
   1++C074              ;-- XX15 --------------------------------------------------------------------------------------------------------------------------
   2++C074 00           SBnKXScaled                 DB  0               ; XX15+0Xscaled
   3++C075 00           SBnKXScaledSign             DB  0               ; XX15+1xsign
   4++C076 00           SBnKYScaled                 DB  0               ; XX15+2yscaled
   5++C077 00           SBnKYScaledSign             DB  0               ; XX15+3ysign
   6++C078 00           SBnKZScaled                 DB  0               ; XX15+4zscaled
   7++C079 00           SBnKZScaledSign             DB  0               ; XX15+5zsign
   8++C07A
   9++C07A              SXX15                       equ SBnKXScaled
  10++C07A              SXX15VecX                   equ SXX15
  11++C07A              SXX15VecY                   equ SXX15+1
  12++C07A              SXX15VecZ                   equ SXX15+2
  13++C07A              SBnKXPoint                  equ SXX15
  14++C07A              SBnKXPointLo                equ SXX15+0
  15++C07A              SBnKXPointHi                equ SXX15+1
  16++C07A              SBnKXPointSign              equ SXX15+2
  17++C07A              SBnKYPoint                  equ SXX15+3
  18++C07A              SBnKYPointLo                equ SXX15+3
  19++C07A              SBnKYPointHi                equ SXX15+4
  20++C07A              SBnKYPointSign              equ SXX15+5
  21++C07A
# file closed: ././Universe/Sun/SunXX15Vars.asm
  52+ C07A                                      INCLUDE "./Universe/Sun/SunXX12Vars.asm"
# file opened: ././Universe/Sun/SunXX12Vars.asm
   1++C07A              ;-- transmat0 --------------------------------------------------------------------------------------------------------------------------
   2++C07A              ; Note XX12 comes after as some logic in normal processing uses XX15 and XX12 combines
   3++C07A 00           SBnKXX12xLo                 DB  0               ; XX12+0
   4++C07B 00           SBnKXX12xSign               DB  0               ; XX12+1
   5++C07C 00           SBnKXX12yLo                 DB  0               ; XX12+2
   6++C07D 00           SBnKXX12ySign               DB  0               ; XX12+3
   7++C07E 00           SBnKXX12zLo                 DB  0               ; XX12+4
   8++C07F 00           SBnKXX12zSign               DB  0               ; XX12+5
   9++C080 00 00 00...  SXX12Save                   DS  6
  10++C086 00 00 00...  SXX12Save2                  DS  6
  11++C08C              SXX12                       equ SBnKXX12xLo
  12++C08C              varSXX12                    equ SBnKXX12xLo
  13++C08C              ; Repurposed XX12 when plotting lines
  14++C08C              SBnkY2                      equ SXX12+0
  15++C08C              SbnKy2Lo                    equ SXX12+0
  16++C08C              SBnkY2Hi                    equ SXX12+1
  17++C08C              SBnkDeltaXLo                equ SXX12+2
  18++C08C              SBnkDeltaXHi                equ SXX12+3
  19++C08C              SBnkDeltaYLo                equ SXX12+4
  20++C08C              SBnkDeltaYHi                equ SXX12+5
  21++C08C              SbnkGradient                equ SXX12+2
  22++C08C              SBnkTemp1                   equ SXX12+2
  23++C08C              SBnkTemp1Lo                 equ SXX12+2
  24++C08C              SBnkTemp1Hi                 equ SXX12+3
  25++C08C              SBnkTemp2                   equ SXX12+3
  26++C08C              SBnkTemp2Lo                 equ SXX12+3
  27++C08C              SBnkTemp2Hi                 equ SXX12+4
  28++C08C
# file closed: ././Universe/Sun/SunXX12Vars.asm
  53+ C08C
  54+ C08C
  55+ C08C              ; Post clipping the results are now 8 bit
  56+ C08C 00           SBnKVisibility              DB  0               ; replaces general purpose xx4 in rendering
  57+ C08D 00           SBnKProjectedY              DB  0
  58+ C08E 00           SBnKProjectedX              DB  0
  59+ C08F              SBnKProjected               equ SBnKProjectedY  ; resultant projected position
  60+ C08F 00 00 00...  SunXX15Save                 DS  8
  61+ C097 00 00 00...  SunXX15Save2                DS  8
  62+ C09F              ; Heap (or array) information for lines and normals
  63+ C09F              ; Coords are stored XY,XY,XY,XY
  64+ C09F              ; Normals
  65+ C09F              ; This needs re-oprganising now.
  66+ C09F              ; Runtime Calculation Store
  67+ C09F
  68+ C09F              SunLineArraySize            equ 128 * 2
  69+ C09F              ; Storage arrays for data
  70+ C09F
  71+ C09F 00 00 00...  SBnKLineArray               DS SunLineArraySize ; XX19 Holds the clipped line details
  72+ C19F              SBnKLinesHeapMax            EQU $ - SBnKLineArray
  73+ C19F
  74+ C19F 00 00        LineArrayPtr                DW  0
  75+ C1A1
  76+ C1A1              SBnK_Data_len               EQU $ - SBnKDataBlock
  77+ C1A1
  78+ C1A1              ; --------------------------------------------------------------
  79+ C1A1 21 10 C0     ResetSBnKData:          ld      hl,SBnKDataBlock
  80+ C1A4 11 91 01                             ld      de,SBnK_Data_len
  81+ C1A7 AF                                   xor     a
  82+ C1A8 CD 28 95                             call    memfill_dma
  83+ C1AB C9                                   ret
  84+ C1AC              ; --------------------------------------------------------------
  85+ C1AC 21 10 C0     ResetSBnKPosition:      ld      hl,SBnKxlo
  86+ C1AF 06 09                                ld      b, 3*3
  87+ C1B1 AF                                   xor     a
  88+ C1B2 77           .zeroLoop:              ld      (hl),a
  89+ C1B3 23                                   inc     hl
  90+ C1B4 10 FC                                djnz    .zeroLoop
  91+ C1B6 C9                                   ret
  92+ C1B7              ; This uses UBNKNodeArray as the list
  93+ C1B7              ; the array is 256 * 2 bytes
  94+ C1B7              ; counter is current row y pos
  95+ C1B7              ; byte 1 is start x pos
  96+ C1B7              ; byte 2 is end x pos
  97+ C1B7              ; if they are both 0 then skip
  98+ C1B7              ; its always horizontal, yellow
  99+ C1B7
 100+ C1B7              ; PLANET
 101+ C1B7
 102+ C1B7
 103+ C1B7              .SunNoDraw:             SetCarryFlag                    ; ship is behind so do not draw, so we don't care abour draw as dot
 103+ C1B7 37          >                        scf
 104+ C1B8 C9                                   ret
 105+ C1B9
 106+ C1B9
 107+ C1B9
 108+ C1B9              SunBankDraw:            MACRO
 109+ C1B9 ~            .drawLoop               ld      a,(hl)
 110+ C1B9 ~                                    ld      c,a                     ; c = left column
 111+ C1B9 ~                                    inc     hl
 112+ C1B9 ~                                    ld      d,(hl)                  ; d = right col
 113+ C1B9 ~                                    inc     hl                      ; now ready for next linel
 114+ C1B9 ~                                    push    hl,,bc
 115+ C1B9 ~                                    cp      d                       ; if both points are the same then no line (we will ignore single pixel as it can't happen at this stage other than tips of circles)
 116+ C1B9 ~                                    IfResultZeroGoto .NoLineDraw
 117+ C1B9 ~                                    ld      a,d                     ; get right col back
 118+ C1B9 ~                                    sub     c                       ; subtract left so a = length
 119+ C1B9 ~                                    inc     a                       ; so its at least 1 , TODO add cp jr c logic in dma routine so that it does non dma if line < x
 120+ C1B9 ~                                    call    z, .FixWidth
 121+ C1B9 ~                                    ld      d,a                     ; de = length (e - d)
 122+ C1B9 ~                                    ld      e,216                   ; yellow
 123+ C1B9 ~                                    call    l2_draw_horz_dma        ; draw without bank switch
 124+ C1B9 ~            .NoLineDraw:            pop     hl,,bc
 125+ C1B9 ~                                    inc     b
 126+ C1B9 ~                                    dec     iyh
 127+ C1B9 ~                                    IfResultNotZeroGoto  .drawLoop
 128+ C1B9                                      ENDM
 129+ C1B9
 130+ C1B9
 131+ C1B9
 132+ C1B9              SunDraw:                MMUSelectLayer2
 132+ C1B9 ED 91 57 39 >					 nextreg L2memMMU,		    BankLAYER2
 133+ C1BD 3A 56 C5     .OptimiseStartPos:      ld      a,(MinYOffset)
 134+ C1C0                                      JumpIfAIsZero .OffsetIsZero     ; if offset is 0 then just initate as normal
 134+ C1C0 A7          >                        and a   ; cp 0 - changed to and a for optimisation but affects other flags
 134+ C1C1 CA D1 C1    >                        jp	z, .OffsetIsZero
 135+ C1C4                                      JumpIfALTNusng 64, .OffsetLT64  ; if offset >=64 then we adjust and mve to bank 0
 135+ C1C4 FE 40       >                        cp      64
 135+ C1C6 DA DE C1    >                        jp		c, .OffsetLT64
 136+ C1C9 D6 40        .OffsetGTE64:           sub     64
 137+ C1CB 32 56 C5                             ld      (MinYOffset),a          ; adjust offset for bank 2
 138+ C1CE C3 16 C2                             jp      .StartBank2
 139+ C1D1 06 00        .OffsetIsZero:          ld      b,0                     ; row
 140+ C1D3 FD 26 40                             ld      iyh,64                  ; counter
 141+ C1D6 21 9F C0                             ld      hl,SBnKLineArray        ; set hl to start of array
 142+ C1D9 C3 F0 C1                             jp      .StartBank1
 143+ C1DC              ;-- Snuck routine in here so that the macro will be happier
 144+ C1DC 3D           .FixWidth:              dec     a                       ; if carry resulted in a value of zero then correct
 145+ C1DD C9                                   ret
 146+ C1DE 21 9F C0     .OffsetLT64:            ld      hl,SBnKLineArray        ; adjust hl for line array offset
 147+ C1E1 ED 31                                add     hl,a                    ; .
 148+ C1E3 ED 31                                add     hl,a                    ; .
 149+ C1E5 47                                   ld      b,a                     ; set b row to the actual offset
 150+ C1E6 4F                                   ld      c,a                     ; iyh = 64 - Y offset
 151+ C1E7 3E 40                                ld      a,64                    ; .
 152+ C1E9 91                                   sub     c                       ; .
 153+ C1EA FD 67                                ld      iyh,a
 154+ C1EC AF                                   xor     a                       ; Ready bank 2 with no offset
 155+ C1ED 32 56 C5                             ld      (MinYOffset),a          ; .
 156+ C1F0 D9           .StartBank1:            exx
 157+ C1F1 3E 00                                ld      a,LAYER2_SHIFTED_SCREEN_TOP
 158+ C1F3 CD 0D E0                             call    asm_l2_bank_select      ; get in the first bank, we will only then bank select when needed
 159+ C1F6 D9                                   exx
 160+ C1F7                                      SunBankDraw
 160+ C1F7 7E          >.drawLoop               ld      a,(hl)
 160+ C1F8 4F          >                        ld      c,a                     ; c = left column
 160+ C1F9 23          >                        inc     hl
 160+ C1FA 56          >                        ld      d,(hl)                  ; d = right col
 160+ C1FB 23          >                        inc     hl                      ; now ready for next linel
 160+ C1FC E5 C5       >                        push    hl,,bc
 160+ C1FE BA          >                        cp      d                       ; if both points are the same then no line (we will ignore single pixel as it can't happen at this stage other than tips of circles)
 160+ C1FF             >                        IfResultZeroGoto .NoLineDraw
 160+ C1FF CA 0E C2    >                        jp	z,.NoLineDraw
 160+ C202 7A          >                        ld      a,d                     ; get right col back
 160+ C203 91          >                        sub     c                       ; subtract left so a = length
 160+ C204 3C          >                        inc     a                       ; so its at least 1 , TODO add cp jr c logic in dma routine so that it does non dma if line < x
 160+ C205 CC DC C1    >                        call    z, .FixWidth
 160+ C208 57          >                        ld      d,a                     ; de = length (e - d)
 160+ C209 1E D8       >                        ld      e,216                   ; yellow
 160+ C20B CD 3A E2    >                        call    l2_draw_horz_dma        ; draw without bank switch
 160+ C20E C1 E1       >.NoLineDraw:            pop     hl,,bc
 160+ C210 04          >                        inc     b
 160+ C211 FD 25       >                        dec     iyh
 160+ C213             >                        IfResultNotZeroGoto  .drawLoop
 160+ C213 C2 F7 C1    >                        jp	nz,.drawLoop
 161+ C216 3A 56 C5     .StartBank2:            ld      a,(MinYOffset)
 162+ C219                                      JumpIfAIsZero .OffsetBank2IsZero; if offset is 0 then we just continue, offset can never be >127 else there would be no draw
 162+ C219 A7          >                        and a   ; cp 0 - changed to and a for optimisation but affects other flags
 162+ C21A CA 2E C2    >                        jp	z, .OffsetBank2IsZero
 163+ C21D 21 1F C1     .NotZeroOffset:         ld      hl,SBnKLineArray + (64 * 2); adjust to correct offset
 164+ C220 ED 31                                add     hl,a
 165+ C222 ED 31                                add     hl,a
 166+ C224 4F                                   ld      c,a                     ; iyh = 64 - offset
 167+ C225 3E 40                                ld      a,64                    ; .
 168+ C227 91                                   sub     c                       ; .
 169+ C228 FD 67                                ld      iyh,a                   ; .
 170+ C22A 41                                   ld      b,c                     ; b = offset row
 171+ C22B C3 36 C2                             jp      .drawLineBank2
 172+ C22E 21 1F C1     .OffsetBank2IsZero:     ld      hl,SBnKLineArray + (64 * 2); start with offset adjusted
 173+ C231 06 00                                ld      b,0
 174+ C233 FD 26 40                             ld      iyh,64
 175+ C236 D9           .drawLineBank2:         exx
 176+ C237 3E 40                                ld      a,LAYER2_SHIFTED_SCREEN_MIDDLE
 177+ C239 CD 0D E0                             call    asm_l2_bank_select      ; now do the lower bank
 178+ C23C D9                                   exx
 179+ C23D              ; Could make this a sub routine but unwrapping saves a call
 180+ C23D                                      SunBankDraw
 180+ C23D 7E          >.drawLoop               ld      a,(hl)
 180+ C23E 4F          >                        ld      c,a                     ; c = left column
 180+ C23F 23          >                        inc     hl
 180+ C240 56          >                        ld      d,(hl)                  ; d = right col
 180+ C241 23          >                        inc     hl                      ; now ready for next linel
 180+ C242 E5 C5       >                        push    hl,,bc
 180+ C244 BA          >                        cp      d                       ; if both points are the same then no line (we will ignore single pixel as it can't happen at this stage other than tips of circles)
 180+ C245             >                        IfResultZeroGoto .NoLineDraw
 180+ C245 CA 54 C2    >                        jp	z,.NoLineDraw
 180+ C248 7A          >                        ld      a,d                     ; get right col back
 180+ C249 91          >                        sub     c                       ; subtract left so a = length
 180+ C24A 3C          >                        inc     a                       ; so its at least 1 , TODO add cp jr c logic in dma routine so that it does non dma if line < x
 180+ C24B CC DC C1    >                        call    z, .FixWidth
 180+ C24E 57          >                        ld      d,a                     ; de = length (e - d)
 180+ C24F 1E D8       >                        ld      e,216                   ; yellow
 180+ C251 CD 3A E2    >                        call    l2_draw_horz_dma        ; draw without bank switch
 180+ C254 C1 E1       >.NoLineDraw:            pop     hl,,bc
 180+ C256 04          >                        inc     b
 180+ C257 FD 25       >                        dec     iyh
 180+ C259             >                        IfResultNotZeroGoto  .drawLoop
 180+ C259 C2 3D C2    >                        jp	nz,.drawLoop
 181+ C25C C9                                   ret
 182+ C25D
 183+ C25D              ; --------------------------------------------------------------
 184+ C25D              ; This sets current universe object to a star / sun, they use sign + 23 bit positions
 185+ C25D CD A1 C1     CreateSun:              call    ResetSBnKData
 186+ C260 3A 20 9A                             ld      a,(WorkingSeeds+3)
 187+ C263 E6 07                                and     %00000111
 188+ C265 F6 81                                or      %10000001
 189+ C267 32 18 C0                             ld      (SBnKzsgn),a
 190+ C26A 3A 22 9A                             ld      a,(WorkingSeeds+5)
 191+ C26D E6 03                                and     %00000011
 192+ C26F 32 12 C0                             ld      (SBnKxsgn),a
 193+ C272 32 15 C0                             ld      (SBnKysgn),a
 194+ C275                                   ; DEBUG   ld      hl, $0000
 195+ C275                                   ; DEBUG   ld      (SBnKzhi),hl
 196+ C275                                   ; DEBUG   ld      a, $E3
 197+ C275                                   ; DEBUG   ld      (SBnKzlo),a
 198+ C275 C9                                   ret
 199+ C276              ; --------------------------------------------------------------
 200+ C276              ; This sets current universe object to a planet,they use sign + 23 bit positions
 201+ C276              ;;TODOCreatePlanet:           call    ResetSBnKData
 202+ C276              ;;TODO                        ld      a,(DisplayTekLevel)
 203+ C276              ;;TODO                        and     $00000010               ; Set A = 128 or 130 depending on bit 1 of the system's tech level
 204+ C276              ;;TODO                        or      $10000000
 205+ C276              ;;TODO                        ld      (SBnKShipType),a
 206+ C276              ;;TODO                        xor     a
 207+ C276              ;;TODO                        ld      (SBnKaiatkecm),a
 208+ C276              ;;TODO                        MaxUnivPitchAndRoll
 209+ C276              ;;TODO                        ld      a,(WorkingSeeds+1)      ; a= bits 1 and 0 of working seed1 + 3 + carry
 210+ C276              ;;TODO                        and     %00000011               ; .
 211+ C276              ;;TODO                        adc     3                       ; .
 212+ C276              ;;TODO                        ld      (SBnKzsgn),a            ; set z sign to 3 + C + 0..3 bits
 213+ C276              ;;TODO                        rr      a
 214+ C276              ;;TODO                        ld      (PlanetXsgn),a
 215+ C276              ;;TODO                        ld      (PlanetYsgn),a
 216+ C276              ;;TODO                        ret
 217+ C276
 218+ C276
 219+ C276                                 ;     include "./Maths/ADDHLDESignBC.asm"
 220+ C276
 221+ C276 7C           SunADDHLDESignedv3:     ld      a,h
 222+ C277 E6 80                                and     SignOnly8Bit
 223+ C279 47                                   ld      b,a                         ;save sign bit in b
 224+ C27A AA                                   xor     d                           ;if h sign and d sign were different then bit 7 of a will be 1 which means
 225+ C27B                                      JumpIfNegative .SunADDHLDEOppSGN    ;Signs are opposite there fore we can subtract to get difference
 225+ C27B FA 96 C2    >                        jp		m, .SunADDHLDEOppSGN
 226+ C27E 78           .SunADDHLDESameSigns:   ld      a,b
 227+ C27F B2                                   or      d
 228+ C280                                      JumpIfNegative .SunADDHLDESameNeg   ; optimisation so we can just do simple add if both positive
 228+ C280 FA 88 C2    >                        jp		m, .SunADDHLDESameNeg
 229+ C283                                      JumpIfNegative .SunADDHLDESameNeg   ; optimisation so we can just do simple add if both positive
 229+ C283 FA 88 C2    >                        jp		m, .SunADDHLDESameNeg
 230+ C286 19                                   add     hl,de
 231+ C287 C9                                   ret
 232+ C288 7C           .SunADDHLDESameNeg:     ld      a,h                         ; so if we enter here then signs are the same so we clear the 16th bit
 233+ C289 E6 7F                                and     SignMask8Bit                ; we could check the value of b for optimisation
 234+ C28B 67                                   ld      h,a
 235+ C28C 7A                                   ld      a,d
 236+ C28D E6 7F                                and     SignMask8Bit
 237+ C28F 57                                   ld      d,a
 238+ C290 19                                   add     hl,de
 239+ C291 3E 80                                ld      a,SignOnly8Bit
 240+ C293 B4                                   or      h                           ; now set bit for negative value, we won't bother with overflow for now TODO
 241+ C294 67                                   ld      h,a
 242+ C295 C9                                   ret
 243+ C296 7C           .SunADDHLDEOppSGN:      ld      a,h                         ; so if we enter here then signs are the same so we clear the 16th bit                     ; here HL and DE are opposite
 244+ C297 E6 7F                                and     SignMask8Bit                ; we could check the value of b for optimisation
 245+ C299 67                                   ld      h,a
 246+ C29A 7A                                   ld      a,d
 247+ C29B E6 7F                                and     SignMask8Bit
 248+ C29D 57                                   ld      d,a
 249+ C29E B7                                   or      a
 250+ C29F ED 52                                sbc     hl,de
 251+ C2A1 38 04                                jr      c,.SunADDHLDEOppInvert
 252+ C2A3 78           .SunADDHLDEOppSGNNoCarry:   ld      a,b                         ; we got here so hl > de therefore we can just take hl's previous sign bit
 253+ C2A4 B4                                   or      h
 254+ C2A5 67                                   ld      h,a                         ; set the previou sign value
 255+ C2A6 C9                                   ret
 256+ C2A7              .SunADDHLDEOppInvert:       NegHL                                                   ; we need to flip the sign and 2'c the Hl result
 256+ C2A7 AF          >                    xor a
 256+ C2A8 95          >                    sub l
 256+ C2A9 6F          >                    ld l,a
 256+ C2AA 9F          >                    sbc a,a
 256+ C2AB 94          >                    sub h
 256+ C2AC 67          >                    ld h,a
 257+ C2AD 78                                   ld      a,b
 258+ C2AE EE 80                                xor     SignOnly8Bit                ; flip sign bit
 259+ C2B0 B4                                   or      h
 260+ C2B1 67                                   ld      h,a                         ; recover sign
 261+ C2B2 C9                                   ret
 262+ C2B3
 263+ C2B3              ; we could cheat, flip the sign of DE and just add but its not very optimised
 264+ C2B3 7C           .SunSUBHLDESignedv3:        ld      a,h
 265+ C2B4 E6 80                                and     SignOnly8Bit
 266+ C2B6 47                                   ld      b,a                         ;save sign bit in b
 267+ C2B7 AA                                   xor     d                           ;if h sign and d sign were different then bit 7 of a will be 1 which means
 268+ C2B8                                      JumpIfNegative .SunSUBHLDEOppSGN        ;Signs are opposite therefore we can add
 268+ C2B8 FA E6 C2    >                        jp		m, .SunSUBHLDEOppSGN
 269+ C2BB 78           .SunSUBHLDESameSigns:       ld      a,b
 270+ C2BC B2                                   or      d
 271+ C2BD                                      JumpIfNegative .SunSUBHLDESameNeg       ; optimisation so we can just do simple add if both positive
 271+ C2BD FA C7 C2    >                        jp		m, .SunSUBHLDESameNeg
 272+ C2C0 B7                                   or      a
 273+ C2C1 ED 52                                sbc     hl,de
 274+ C2C3                                      JumpIfNegative .SunSUBHLDESameOvrFlw
 274+ C2C3 FA DA C2    >                        jp		m, .SunSUBHLDESameOvrFlw
 275+ C2C6 C9                                   ret
 276+ C2C7 7C           .SunSUBHLDESameNeg:         ld      a,h                         ; so if we enter here then signs are the same so we clear the 16th bit
 277+ C2C8 E6 7F                                and     SignMask8Bit                ; we could check the value of b for optimisation
 278+ C2CA 67                                   ld      h,a
 279+ C2CB 7A                                   ld      a,d
 280+ C2CC E6 7F                                and     SignMask8Bit
 281+ C2CE 57                                   ld      d,a
 282+ C2CF B7                                   or      a
 283+ C2D0 ED 52                                sbc     hl,de
 284+ C2D2                                      JumpIfNegative .SunSUBHLDESameOvrFlw
 284+ C2D2 FA DA C2    >                        jp		m, .SunSUBHLDESameOvrFlw
 285+ C2D5 7C                                   ld      a,h                         ; now set bit for negative value, we won't bother with overflow for now TODO
 286+ C2D6 F6 80                                or      SignOnly8Bit
 287+ C2D8 67                                   ld      h,a
 288+ C2D9 C9                                   ret
 289+ C2DA              .SunSUBHLDESameOvrFlw:      NegHL                                                        ; we need to flip the sign and 2'c the Hl result
 289+ C2DA AF          >                    xor a
 289+ C2DB 95          >                    sub l
 289+ C2DC 6F          >                    ld l,a
 289+ C2DD 9F          >                    sbc a,a
 289+ C2DE 94          >                    sub h
 289+ C2DF 67          >                    ld h,a
 290+ C2E0 78                                   ld      a,b
 291+ C2E1 EE 80                                xor     SignOnly8Bit                ; flip sign bit
 292+ C2E3 B4                                   or      h
 293+ C2E4 67                                   ld      h,a                         ; recover sign
 294+ C2E5 C9                                   ret
 295+ C2E6 B7           .SunSUBHLDEOppSGN:          or      a                                               ; here HL and DE are opposite so we can add the values
 296+ C2E7 7C                                   ld      a,h                         ; so if we enter here then signs are the same so we clear the 16th bit
 297+ C2E8 E6 7F                                and     SignMask8Bit                ; we could check the value of b for optimisation
 298+ C2EA 67                                   ld      h,a
 299+ C2EB 7A                                   ld      a,d
 300+ C2EC E6 7F                                and     SignMask8Bit
 301+ C2EE 57                                   ld      d,a
 302+ C2EF 19                                   add     hl,de
 303+ C2F0 78                                   ld      a,b                         ; we got here so hl > de therefore we can just take hl's previous sign bit
 304+ C2F1 B4                                   or      h
 305+ C2F2 67                                   ld      h,a                         ; set the previou sign value
 306+ C2F3 C9                                   ret
 307+ C2F4
 308+ C2F4
 309+ C2F4              .SunSBCHLDESigned:      JumpOnBitSet h,7,.SunSBCHLDEhlNeg
 309+ C2F4 CB 7C       >                        bit 	7,h
 309+ C2F6 C2 07 C3    >                        jp      nz,.SunSBCHLDEhlNeg
 310+ C2F9              .SunSBCHLDEhlPos:       JumpOnBitSet h,7,.SunSBCHLDEhlNeg
 310+ C2F9 CB 7C       >                        bit 	7,h
 310+ C2FB C2 07 C3    >                        jp      nz,.SunSBCHLDEhlNeg
 311+ C2FE ED 52        .SunSBCHLDEhlPosDePos:  sbc     hl,de                           ; ignore overflow for now will sort later TODO
 312+ C300 C9                                   ret
 313+ C301 CB BA        .SunSBCHLDEhlPosDeNeg:  res     7,d
 314+ C303 19                                   add     hl,de                           ; ignore overflow for now will sort later TODO
 315+ C304 CB FA                                set     7,d
 316+ C306 C9                                   ret
 317+ C307 CB BC        .SunSBCHLDEhlNeg:       res     7,h
 318+ C309                                      JumpOnBitSet d,7,.SunSBCHLDEhlNegdeNeg
 318+ C309 CB 7A       >                        bit 	7,d
 318+ C30B C2 13 C3    >                        jp      nz,.SunSBCHLDEhlNegdeNeg
 319+ C30E ED 52        .SunSBCHLDEhlNegdePos:  sbc     hl,de                       ; ignore overflow for now will sort later TODO
 320+ C310 CB FC                                set     7,h
 321+ C312 C9                                   ret
 322+ C313 CB BA        .SunSBCHLDEhlNegdeNeg:      res     7,d
 323+ C315 19                                   add     hl,de                   ; ignore overflow for now will sort later TODO
 324+ C316 CB FA                                set     7,d
 325+ C318 CB FC                                set     7,h
 326+ C31A C9                                   ret
 327+ C31B
 328+ C31B
 329+ C31B
 330+ C31B              ;                    include "Universe/InitialiseOrientation.asm"
 331+ C31B              ;----------------------------------------------------------------------------------------------------------------------------------
 332+ C31B              ;;;
 333+ C31B              ;;;Project:
 334+ C31B              ;;;PROJ:                   ld      hl,(SBnKxlo)                    ; Project K+INWK(x,y)/z to K3,K4 for center to screen
 335+ C31B              ;;;                        ld      (varP),hl
 336+ C31B              ;;;                        ld      a,(SBnKxsgn)
 337+ C31B              ;;;                        call    PLS6                            ; returns result in K (0 1) (unsigned) and K (3) = sign note to no longer does 2's C
 338+ C31B              ;;;                        ret     c                               ; carry means don't print
 339+ C31B              ;;;                        ld      hl,(varK)                       ; hl = k (0 1)
 340+ C31B              ;;;                        ; Now the question is as hl is the fractional part, should this be multiplied by 127 to get the actual range
 341+ C31B              ;;;                        ld      a,ViewCenterX
 342+ C31B              ;;;                        add     hl,a                            ; add unsigned a to the 2's C HL to get pixel position
 343+ C31B              ;;;                        ld      (varK3),hl                      ; K3 = X position on screen
 344+ C31B              ;;;ProjectY:               ld      hl,(SBnKylo)
 345+ C31B              ;;;                        ld      (varP),hl
 346+ C31B              ;;;                        ld      a,(SBnKysgn)
 347+ C31B              ;;;                        call    PLS6
 348+ C31B              ;;;                        ret     c
 349+ C31B              ;;;                        ld      hl,(varK)                       ; hl = k (0 1)
 350+ C31B              ;;;                        ld      a,ViewCenterY
 351+ C31B              ;;;                        add     hl,a                            ; add unsigned a to the 2's C HL to get pixel position
 352+ C31B              ;;;                        ld      (varK4),hl                      ; K3 = X position on screen
 353+ C31B              ;;;                        ret
 354+ C31B              ;--------------------------------------------------------------------------------------------------------
 355+ C31B              ;                        include "./ModelRender/EraseOldLines-EE51.asm"
 356+ C31B              ;                        include "./ModelRender/TrimToScreenGrad-LL118.asm"
 357+ C31B              ;                        include "./ModelRender/CLIP-LL145.asm"
 358+ C31B              ;--------------------------------------------------------------------------------------------------------
 359+ C31B              ;                        include "./Variables/CopyRotmatToTransMat.asm"
 360+ C31B                                      include "./Universe/Sun/TransposeSunXX12BySunToSunXX15.asm"
# file opened: ././Universe/Sun/TransposeSunXX12BySunToSunXX15.asm
   1++C31B              TransposeSXX12BySunToSXX15:
   2++C31B 2A 7A C0                             ld		hl,(SBnKXX12xLo)					; get X into HL
   3++C31E 7C                                   ld		a,h			                        ; get XX12 Sign
   4++C31F E6 80                                and		$80									; check sign bit on high byte
   5++C321 47                                   ld		b,a									; and put it in of 12xlo in b
   6++C322                                      ;110921 debugld      h,0
   7++C322 7C                                   ld      a,h
   8++C323 E6 7F                                and     $7F
   9++C325 67                                   ld      h,a
  10++C326                                      ;110921 debugld      h,0
  11++C326 ED 5B 10 C0                          ld		de,(SBnKxlo)						;
  12++C32A 3A 12 C0                             ld		a,(SBnKxsgn)						; get Ship Pos (low,high,sign)
  13++C32D E6 80                                and		$80									; make sure we only have bit 7
  14++C32F 4F                                   ld		c,a									; and put sign of unkxsgn c
  15++C330 CD 7E AF                             call 	ADDHLDESignBC; XX12ProcessCalcHLPlusDESignBC		; this will result in HL = result and A = sign
  16++C333 B4                                   or		h									; combine sign in A with H to give 15 bit signed (*NOT* 2's c)
  17++C334 67                                   ld		h,a
  18++C335 22 74 C0                             ld		(SBnKXScaled),hl					; now write it out to XX15 X pos
  19++C338              ; ..................................
  20++C338 2A 7C C0                             ld		hl,(SBnKXX12yLo)					; Repeat above for Y coordinate
  21++C33B 7C                                   ld		a,h
  22++C33C E6 80                                and		$80
  23++C33E 47                                   ld		b,a
  24++C33F                                      ;110921 debugld      h,0
  25++C33F 7C                                   ld      a,h
  26++C340 E6 7F                                and     $7F
  27++C342 67                                   ld      h,a
  28++C343                                      ;110921 debugld      h,0
  29++C343 ED 5B 13 C0                          ld		de,(SBnKylo)
  30++C347 3A 15 C0                             ld		a,(SBnKysgn)
  31++C34A E6 80                                and		$80									; make sure we only have bit 7
  32++C34C 4F                                   ld		c,a
  33++C34D CD 7E AF                             call 	ADDHLDESignBC; XX12ProcessCalcHLPlusDESignBC
  34++C350 B4                                   or		h									; combine sign in A with H
  35++C351 67                                   ld		h,a
  36++C352 22 76 C0                             ld		(SBnKYScaled),hl
  37++C355              ; ..................................
  38++C355 2A 7E C0                             ld		hl,(SBnKXX12zLo)					; and now repeat for Z cooord
  39++C358 7C                                   ld		a,h
  40++C359 E6 80                                and		$80
  41++C35B 47                                   ld		b,a
  42++C35C                                      ;110921 debugld      h,0
  43++C35C 7C                                   ld      a,h
  44++C35D E6 7F                                and     $7F
  45++C35F 67                                   ld      h,a
  46++C360                                      ;110921 debugld      h,0
  47++C360 ED 5B 16 C0                          ld		de,(SBnKzlo)
  48++C364 3A 18 C0                             ld		a,(SBnKzsgn)
  49++C367 E6 80                                and		$80									; make sure we only have bit 7
  50++C369 4F                                   ld		c,a
  51++C36A CD 7E AF                             call 	ADDHLDESignBC; XX12ProcessCalcHLPlusDESignBC
  52++C36D B4                                   or		h									; combine sign in A with H
  53++C36E 67                                   ld		h,a
  54++C36F CB 7C                                bit		7,h                                 ; if sign if positive then we don't need to do the clamp so we ony jump
  55++C371 20 16                                jr		nz,.ClampZto4                        ; result was negative so we need to clamp to 4
  56++C373 E6 7F                                and     $7F                                 ; a = value unsigned
  57++C375 20 06                                jr      nz,.NoClampZto4                      ; if high byte was 0 then we could need to clamp still by this stage its +v but and will set z flag if high byte is zero
  58++C377 7D                                   ld      a,l                                 ; get low byte now
  59++C378                                      JumpIfALTNusng 4,.ClampZto4					; if its < 4 then fix at 4
  59++C378 FE 04       >                        cp      4
  59++C37A DA 89 C3    >                        jp		c, .ClampZto4
  60++C37D 22 78 C0     .NoClampZto4:           ld		(SBnKZScaled),hl					; hl = signed calculation and > 4
  61++C380 7D                                   ld		a,l									; in addition write out the z cooord to UT for now for backwards compat (DEBUG TODO remove later)
  62++C381 32 43 99                             ld      (varT),a
  63++C384 7C                                   ld		a,h
  64++C385 32 26 99                             ld      (varU),a
  65++C388 C9                                   ret
  66++C389              ; This is where we limit 4 to a minimum of 4
  67++C389 21 04 00     .ClampZto4:             ld		hl,4
  68++C38C 22 78 C0                             ld		(SBnKZScaled),hl; BODGE FOR NOW
  69++C38F 7D                                   ld		a,l
  70++C390 32 43 99                             ld      (varT),a                            ;                                                                           ;;;
  71++C393 7C                                   ld		a,h
  72++C394 32 26 99                             ld      (varU),a 						; compatibility for now
  73++C397 C9                                   ret
  74++C398
# file closed: ././Universe/Sun/TransposeSunXX12BySunToSunXX15.asm
 361+ C398
 362+ C398
 363+ C398 ED 4B 78 C0  ScaleSunTo8Bit:			ld			bc,(SBnKZScaled)
 364+ C39C 2A 74 C0                             ld			hl,(SBnKXScaled)
 365+ C39F ED 5B 76 C0                          ld			de,(SBnKYScaled)
 366+ C3A3 78           .SetABSbc:              ld			a,b
 367+ C3A4 DD 67                                ld			ixh,a
 368+ C3A6 E6 7F                                and			SignMask8Bit
 369+ C3A8 47                                   ld			b,a									; bc = ABS bc
 370+ C3A9 7C           .SetABShl:              ld			a,h
 371+ C3AA DD 6F                                ld			ixl,a
 372+ C3AC E6 7F                                and			SignMask8Bit
 373+ C3AE 67                                   ld			h,a									; hl = ABS hl
 374+ C3AF 7A           .SetABSde:              ld			a,d
 375+ C3B0 FD 67                                ld			iyh,a
 376+ C3B2 E6 7F                                and			SignMask8Bit
 377+ C3B4 57                                   ld			d,a									; de = ABS de
 378+ C3B5 78           .ScaleNodeTo8BitLoop:   ld          a,b		                            ; U	\ z hi
 379+ C3B6 B4                                   or			h                                   ; XX15+1	\ x hi
 380+ C3B7 B2                                   or			d                                   ; XX15+4	\ y hi
 381+ C3B8 28 0F                                jr          z,.ScaleNodeDone                   ; if X, Y, Z = 0  exit loop down once hi U rolled to 0
 382+ C3BA                                      ShiftHLRight1
 382+ C3BA CB 3C       >			   srl h
 382+ C3BC CB 1D       >			   rr  l
 383+ C3BE                                      ShiftDERight1
 383+ C3BE CB 3A       >			   srl d
 383+ C3C0 CB 1B       >			   rr  e
 384+ C3C2                                      ShiftBCRight1
 384+ C3C2 CB 38       >			   srl b
 384+ C3C4 CB 19       >			   rr  c
 385+ C3C6 C3 B5 C3                             jp          .ScaleNodeTo8BitLoop
 386+ C3C9              ; now we have scaled values we have to deal with sign
 387+ C3C9 DD 7C        .ScaleNodeDone:          ld			a,ixh								; get sign bit and or with b
 388+ C3CB E6 80                                and			SignOnly8Bit
 389+ C3CD B0                                   or			b
 390+ C3CE 47                                   ld			b,a
 391+ C3CF DD 7D        .SignforHL:              ld			a,ixl								; get sign bit and or with b
 392+ C3D1 E6 80                                and			SignOnly8Bit
 393+ C3D3 B4                                   or			h
 394+ C3D4 67                                   ld			h,a
 395+ C3D5 FD 7C        .SignforDE:              ld			a,iyh								; get sign bit and or with b
 396+ C3D7 E6 80                                and			SignOnly8Bit
 397+ C3D9 B2                                   or			d
 398+ C3DA 57                                   ld			d,a
 399+ C3DB ED 43 78 C0  .SignsDoneSaveResult:	ld			(SBnKZScaled),bc
 400+ C3DF 22 74 C0                             ld			(SBnKXScaled),hl
 401+ C3E2 ED 53 76 C0                          ld			(SBnKYScaled),de
 402+ C3E6 78                                   ld			a,b
 403+ C3E7 32 26 99                             ld			(varU),a
 404+ C3EA 79                                   ld			a,c
 405+ C3EB 32 43 99                             ld			(varT),a
 406+ C3EE C9                                   ret
 407+ C3EF
 408+ C3EF              ;--------------------------------------------------------------------------------------------------------
 409+ C3EF              ;;;;X = normal scale
 410+ C3EF              ;;;;ZtempHi = zhi
 411+ C3EF              ;;;;......................................................
 412+ C3EF              ;;;; if ztemp hi <> 0                                   ::Scale Object Distance
 413+ C3EF              ;;;;  Loop                                              ::LL90
 414+ C3EF              ;;;;     inc X
 415+ C3EF              ;;;;     divide X, Y & ZtempHiLo by 2
 416+ C3EF              ;;;;  Until ZtempHi = 0
 417+ C3EF              ;;;;......................................................
 418+ C3EF              ;-LL21---------------------------------------------------------------------------------------------------
 419+ C3EF              ;                        include "./Universe/NormaliseTransMat.asm"
 420+ C3EF              ;-LL91---------------------------------------------------------------------------------------------------
 421+ C3EF
 422+ C3EF              ; Now we have
 423+ C3EF              ;   * XX18(2 1 0) = (x_sign x_hi x_lo)
 424+ C3EF              ;   * XX18(5 4 3) = (y_sign y_hi y_lo)
 425+ C3EF              ;   * XX18(8 7 6) = (z_sign z_hi z_lo)
 426+ C3EF              ;
 427+ C3EF              ;--------------------------------------------------------------------------------------------------------
 428+ C3EF              ;--------------------------------------------------------------------------------------------------------
 429+ C3EF              ;   XX12(1 0) = [x y z] . sidev  = (dot_sidev_sign dot_sidev_lo)  = dot_sidev
 430+ C3EF              ;   XX12(3 2) = [x y z] . roofv  = (dot_roofv_sign dot_roofv_lo)  = dot_roofv
 431+ C3EF              ;   XX12(5 4) = [x y z] . nosev  = (dot_nosev_sign dot_nosev_lo)  = dot_nosev
 432+ C3EF              ; Returns
 433+ C3EF              ;
 434+ C3EF              ;   XX12(1 0)            The dot product of [x y z] vector with the sidev (or _x)
 435+ C3EF              ;                        vector, with the sign in XX12+1 and magnitude in XX12
 436+ C3EF              ;
 437+ C3EF              ;   XX12(3 2)            The dot product of [x y z] vector with the roofv (or _y)
 438+ C3EF              ;                        vector, with the sign in XX12+3 and magnitude in XX12+2
 439+ C3EF              ;
 440+ C3EF              ;   XX12(5 4)            The dot product of [x y z] vector with the nosev (or _z)
 441+ C3EF              ;                        vector, with the sign in XX12+5 and magnitude in XX12+4
 442+ C3EF
 443+ C3EF
 444+ C3EF               ; TESTEDOK
 445+ C3EF              SXX12DotOneRow:
 446+ C3EF              SXX12CalcX:              N0equN1byN2div256 varT, (hl), (SBnKXScaled)       ; T = (hl) * regSunXX15fx /256
 446+ C3EF 3A 74 C0    >                        ld      a,(SBnKXScaled)                        ;
 446+ C3F2 5F          >                        ld      e,a                         ; use e as var Q = value of XX15 [n] lo
 446+ C3F3 7E          >                        ld      a,(hl)                        ; A = XX16 element
 446+ C3F4 57          >                        ld      d,a
 446+ C3F5 ED 30       >                        mul
 446+ C3F7 7A          >                        ld      a,d                         ; we get only the high byte which is like doing a /256 if we think of a as low
 446+ C3F8 32 43 99    >                        ld      (varT),a                      ; Q         ; result variable = XX16[n] * XX15[n]/256
 447+ C3FB 23                                   inc     hl                                  ; move to sign byte
 448+ C3FC              SXX12CalcXSign:          AequN1xorN2 SBnKXScaledSign,(hl)             ;
 448+ C3FC 3A 75 C0    >                        ld      a,(SBnKXScaledSign)
 448+ C3FF AE          >                        xor     (hl)
 449+ C400 32 29 99                             ld      (varS),a                            ; Set S to the sign of x_sign * sidev_x
 450+ C403 23                                   inc     hl
 451+ C404              SXX12CalcY:              N0equN1byN2div256 varQ, (hl),(SBnKYScaled)       ; Q = XX16 * SunXX15 /256 using varQ to hold regSunXX15fx
 451+ C404 3A 76 C0    >                        ld      a,(SBnKYScaled)                        ;
 451+ C407 5F          >                        ld      e,a                         ; use e as var Q = value of XX15 [n] lo
 451+ C408 7E          >                        ld      a,(hl)                        ; A = XX16 element
 451+ C409 57          >                        ld      d,a
 451+ C40A ED 30       >                        mul
 451+ C40C 7A          >                        ld      a,d                         ; we get only the high byte which is like doing a /256 if we think of a as low
 451+ C40D 32 27 99    >                        ld      (varQ),a                      ; Q         ; result variable = XX16[n] * XX15[n]/256
 452+ C410                                      ldCopyByte varT,varR                        ; R = T =  |sidev_x| * x_lo / 256
 452+ C410 3A 43 99    >                        ld       a,(varT)
 452+ C413 32 28 99    >                        ld       (varR),a
 453+ C416 23                                   inc     hl
 454+ C417                                      AequN1xorN2 SBnKYScaledSign,(hl)             ; Set A to the sign of y_sign * sidev_y
 454+ C417 3A 77 C0    >                        ld      a,(SBnKYScaledSign)
 454+ C41A AE          >                        xor     (hl)
 455+ C41B              ; (S)A = |sidev_x| * x_lo / 256  = |sidev_x| * x_lo + |sidev_y| * y_lo
 456+ C41B E5           SSTequSRplusAQ           push    hl
 457+ C41C CD 9C B0                             call    baddll38                            ; JSR &4812 \ LL38   \ BADD(S)A=R+Q(SA) \ 1byte add (subtract)
 458+ C41F E1                                   pop     hl
 459+ C420 32 43 99                             ld      (varT),a                            ; T = |sidev_x| * x_lo + |sidev_y| * y_lo
 460+ C423 23                                   inc     hl
 461+ C424              SXX12CalcZ:              N0equN1byN2div256 varQ,(hl),(SBnKZScaled)       ; Q = |sidev_z| * z_lo / 256
 461+ C424 3A 78 C0    >                        ld      a,(SBnKZScaled)                        ;
 461+ C427 5F          >                        ld      e,a                         ; use e as var Q = value of XX15 [n] lo
 461+ C428 7E          >                        ld      a,(hl)                        ; A = XX16 element
 461+ C429 57          >                        ld      d,a
 461+ C42A ED 30       >                        mul
 461+ C42C 7A          >                        ld      a,d                         ; we get only the high byte which is like doing a /256 if we think of a as low
 461+ C42D 32 27 99    >                        ld      (varQ),a                      ; Q         ; result variable = XX16[n] * XX15[n]/256
 462+ C430                                      ldCopyByte varT,varR                        ; R = |sidev_x| * x_lo + |sidev_y| * y_lo
 462+ C430 3A 43 99    >                        ld       a,(varT)
 462+ C433 32 28 99    >                        ld       (varR),a
 463+ C436 23                                   inc     hl
 464+ C437                                      AequN1xorN2 SBnKZScaledSign,(hl)             ; A = sign of z_sign * sidev_z
 464+ C437 3A 79 C0    >                        ld      a,(SBnKZScaledSign)
 464+ C43A AE          >                        xor     (hl)
 465+ C43B              ; (S)A= |sidev_x| * x_lo + |sidev_y| * y_lo + |sidev_z| * z_lo
 466+ C43B CD 9C B0                             call    baddll38                            ; JSR &4812 \ LL38   \ BADD(S)A=R+Q(SA)   \ 1byte add (subtract)
 467+ C43E              ; Now we exit with A = result S = Sign
 468+ C43E C9                                   ret
 469+ C43F
 470+ C43F
 471+ C43F
 472+ C43F              ;--------------------------------------------------------------------------------------------------------
 473+ C43F                                      include "./Universe/Sun/CopySunXX12ScaledToSunXX18.asm"
# file opened: ././Universe/Sun/CopySunXX12ScaledToSunXX18.asm
   1++C43F              CopySXX12ScaledToSXX18:
   2++C43F              CopyResultToSDrawCam:
   3++C43F                      ldCopyByte SXX12         ,SXX18             ; XX12+0 => XX18+0  Set XX18(2 0) = dot_sidev
   3++C43F 3A 7A C0    >                        ld       a,(SXX12)
   3++C442 32 68 C0    >                        ld       (SXX18),a
   4++C445                      ldCopyByte SXX12+1       ,SXX18+2           ; XX12+1 => XX18+2
   4++C445 3A 7B C0    >                        ld       a,(SXX12+1)
   4++C448 32 6A C0    >                        ld       (SXX18+2),a
   5++C44B                      ldCopyByte SXX12+2       ,SXX18+3           ; XX12+2 => XX18+3  Set XX12+1 => XX18+2
   5++C44B 3A 7C C0    >                        ld       a,(SXX12+2)
   5++C44E 32 6B C0    >                        ld       (SXX18+3),a
   6++C451                      ldCopyByte SXX12+3       ,SXX18+5           ; XX12+3 => XX18+5
   6++C451 3A 7D C0    >                        ld       a,(SXX12+3)
   6++C454 32 6D C0    >                        ld       (SXX18+5),a
   7++C457                      ldCopyByte SXX12+4       ,SXX18+6           ; XX12+4 => XX18+6  Set XX18(8 6) = dot_nosev
   7++C457 3A 7E C0    >                        ld       a,(SXX12+4)
   7++C45A 32 6E C0    >                        ld       (SXX18+6),a
   8++C45D                      ldCopyByte SXX12+5       ,SXX18+8           ; XX12+5 => XX18+8
   8++C45D 3A 7F C0    >                        ld       a,(SXX12+5)
   8++C460 32 70 C0    >                        ld       (SXX18+8),a
   9++C463 C9                   ret
  10++C464
# file closed: ././Universe/Sun/CopySunXX12ScaledToSunXX18.asm
 474+ C464              ;                        include "./Variables/CopySunXX12toSunXX15.asm"
 475+ C464              ;                       include "./Variables/CopySunXX18toSunXX15.asm"
 476+ C464              ;                       include "./Variables/CopySunXX18ScaledToSunXX15.asm"
 477+ C464              ;                       include "./Variables/CopySunXX12ToScaled.asm"
 478+ C464              ;--------------------------------------------------------------------------------------------------------
 479+ C464              ;                        include "./Maths/Utilities/DotProductXX12SunXX15.asm"
 480+ C464              ;--------------------------------------------------------------------------------------------------------
 481+ C464
 482+ C464 DD 25        ScaleDownSXX15byIXH:    dec     ixh
 483+ C466 F8                                   ret     m
 484+ C467 21 74 C0                             ld      hl,SBnKXScaled
 485+ C46A CB 3E                                srl     (hl)                        ; SunXX15  \ xnormal lo/2 \ LL93+3 \ counter X
 486+ C46C 23                                   inc     hl                          ; looking at SunXX15 x sign now
 487+ C46D 23                                   inc     hl                          ; looking at SunXX15 y Lo now
 488+ C46E CB 3E                                srl     (hl)                        ; SunXX15+2    \ ynormal lo/2
 489+ C470 23                                   inc     hl                          ; looking at SunXX15 y sign now
 490+ C471 23                                   inc     hl                          ; looking at SunXX15 z Lo now
 491+ C472 CB 3E                                srl     (hl)
 492+ C474 C3 64 C4                             jp      ScaleDownSXX15byIXH
 493+ C477 C9                                   ret
 494+ C478
 495+ C478 21 68 C0     DivideSXX18By2:         ld      hl,SBnKDrawCam0xLo
 496+ C47B CB 3E                                srl     (hl)                        ; XX18  \ xnormal lo/2 \ LL93+3 \ counter X
 497+ C47D 23                                   inc     hl                          ; looking at XX18 x sign now
 498+ C47E 23                                   inc     hl                          ; looking at XX18 y Lo now
 499+ C47F CB 3E                                srl     (hl)                        ; XX18+2    \ ynormal lo/2
 500+ C481 23                                   inc     hl                          ; looking at XX18 y sign now
 501+ C482 23                                   inc     hl                          ; looking at XX18 z Lo now
 502+ C483 CB 3E                                srl     (hl)
 503+ C485 C9                                   ret
 504+ C486
 505+ C486              ; ......................................................                                                         ;;;
 506+ C486
 507+ C486
 508+ C486
 509+ C486
 510+ C486              ; Pitch and roll are 2 phases
 511+ C486              ; 1 - we apply our pitch and roll to the ship position
 512+ C486              ;       x -> x + alpha * (y - alpha * x)
 513+ C486              ;       y -> y - alpha * x - beta * z
 514+ C486              ;       z -> z + beta * (y - alpha * x - beta * z)
 515+ C486              ; which can be simplified as:
 516+ C486              ;       1. K2 = y - alpha * x
 517+ C486              ;       2. z = z + beta * K2
 518+ C486              ;       3. y = K2 - beta * z
 519+ C486              ;       4. x = x + alpha * y
 520+ C486              ; 2 - we apply our patch and roll to the ship orientation
 521+ C486              ;      Roll calculations:
 522+ C486              ;
 523+ C486              ;        nosev_y = nosev_y - alpha * nosev_x_hi
 524+ C486              ;        nosev_x = nosev_x + alpha * nosev_y_hi
 525+ C486              ;      Pitch calculations:
 526+ C486              ;
 527+ C486              ;        nosev_y = nosev_y - beta * nosev_z_hi
 528+ C486              ;        nosev_z = nosev_z + beta * nosev_y_hi
 529+ C486
 530+ C486
 531+ C486                          INCLUDE "./Universe/Sun/SunApplyMyRollAndPitch.asm"
# file opened: ././Universe/Sun/SunApplyMyRollAndPitch.asm
   1++C486
   2++C486              ; Full version
   3++C486              ; 1. K2 = y - alpha * x
   4++C486              ; 2. z = z + beta * K2
   5++C486              ; 3. y = K2 - beta * z
   6++C486              ; 4. x = x + alpha * y
   7++C486
   8++C486
   9++C486
  10++C486              ; SunrollWork holds Alpha intermidate results
  11++C486 00 00 00     SunRollResult:          DS 3                    ; equivalent of K
  12++C489              SunRollResultp1         equ SunRollResult
  13++C489              SunRollResultp2         equ SunRollResult+1
  14++C489              SunRollResultp3         equ SunRollResult+2
  15++C489 00           SunRollResultp4         DB 0
  16++C48A              ;SunRollResult2:         DS 3                    ; do we need this? TODO
  17++C48A 00 00 00     SunZResult:             DS 3
  18++C48D              ;  1. K2 = y - alpha * x
  19++C48D              ;  2. z = z + beta * K2
  20++C48D              ;  3. y = K2 - beta * z
  21++C48D              ;  4. x = x + alpha * y
  22++C48D              ;.... or
  23++C48D              ;  2. z = z + (beta * (y - alpha * x))
  24++C48D              ;  3. y = (y - alpha * x) - (beta * z)
  25++C48D              ;  4. x = x + (alpha * y)
  26++C48D
  27++C48D
  28++C48D              ;----------------------------------------------------------------------------------------------------------------------------------
  29++C48D              ; Sun version of pitch and roll is a 24 bit calculation 1 bit sign + 23 bit value
  30++C48D 3A 3D 98     SunApplyMyRollAndPitch: ld      a,(ALPHA)                   ; no roll or pitch, no calc needed
  31++C490 21 2F 98                             ld      hl,BETA
  32++C493 B6                                   or      (hl)
  33++C494 E6 7F                                and     SignMask8Bit
  34++C496 CA 32 C5                             jp      z,.NoRotation
  35++C499              .CalcZ:                 ;break
  36++C499 3A 3D 98                             ld      a,(ALPHA)                   ; get roll magnitude
  37++C49C FE 00                                cp      0
  38++C49E 20 0B                                jr      nz,.ApplyAlpha
  39++C4A0 ED 5B 14 C0  .NoAlpha:               ld      de,(SBnKyhi)                ; here we have no roll so
  40++C4A4 3A 13 C0                             ld      a,(SBnKylo)                 ; store untouched in SunRollResult
  41++C4A7 6F                                   ld      l,a                         ; .
  42++C4A8 C3 C7 C4                             jp      .SaveResult1                ; .
  43++C4AB EE 80        .ApplyAlpha:            xor     SignOnly8Bit                ; d = -alpha (Q value)
  44++C4AD 57                                   ld      d,a                         ;
  45++C4AE 3A 10 C0                             ld      a,(SBnKxlo)                 ; HLE = x sgn, hi, lo
  46++C4B1 5F                                   ld      e,a                         ; .
  47++C4B2 2A 11 C0                             ld      hl,(SBnKxhi)                ; .
  48++C4B5 CD 11 AA                             call    mulHLEbyDSigned             ; DELC = x * -alpha, so DEL = X * -alpha / 256 where d = sign byte
  49++C4B8 7A           .SkipAlphaMultiply:     ld      a,d
  50++C4B9 32 89 C4                             ld      (SunRollResultp4),a         ; save sign from result, ELC holds actual result
  51++C4BC 3A 13 C0     .CalcYPlusDEL:          ld      a,(SBnKylo)                 ; BCH = Y sgn, hi, lo, we loose the C from result
  52++C4BF 67                                   ld      h,a                         ; .
  53++C4C0 ED 4B 14 C0                          ld      bc,(SBnKyhi)                ; .
  54++C4C4 CD B9 A6                             call    AddBCHtoDELsigned           ; DEL = Y - ( X *  alpha /256) (which is K2)
  55++C4C7 7A           .SaveResult1:           ld      a,d                         ; SunPitchWork = AHL = DEL
  56++C4C8 63                                   ld      h,e                         ;
  57++C4C9 32 88 C4     .CopyResultTo2:         ld      (SunRollResult+2),a         ; .
  58++C4CC 22 86 C4                             ld      (SunRollResult) ,hl         ; .
  59++C4CF 5D           .CalcY:                 ld      e,l                         ; HLE = result (K2)
  60++C4D0 6C                                   ld      l,h                         ; .
  61++C4D1 67                                   ld      h,a                         ; .
  62++C4D2 3A 2F 98                             ld      a,(BETA)                    ; get pitch
  63++C4D5 57                                   ld      d,a                         ; now D = BETA
  64++C4D6 CD 11 AA                             call    mulHLEbyDSigned             ; DELC = (y - alpha * x /256 ) * Beta or K2 * beta
  65++C4D9 ED 4B 17 C0                          ld      bc,(SBnKzhi)                ; BCH = z
  66++C4DD 3A 16 C0                             ld      a,(SBnKzlo)                 ; .
  67++C4E0 67                                   ld      h,a                         ; .
  68++C4E1 CD B9 A6                             call    AddBCHtoDELsigned           ; DEL = z + ((y - alpha * x /256 ) * Beta) /256
  69++C4E4 ED 53 8B C4  .SaveZResult:           ld      (SunZResult+1),de           ; We now have a z result which we save
  70++C4E8 ED 53 17 C0                          ld      (SBnKzhi),de                ; .
  71++C4EC 7D                                   ld      a,l                         ; .
  72++C4ED 32 8A C4                             ld      (SunZResult),a              ; .
  73++C4F0 32 16 C0                             ld      (SBnKzlo),a                 ; .
  74++C4F3 EB           .CalcMinusBetaMulZ:     ex      de,hl                       ; HLE = DEL = z post calculation
  75++C4F4                                      ; not needed bugld      e,l                         ; .
  76++C4F4 3A 2F 98                             ld      a,(BETA)                    ; d = - BETA
  77++C4F7 EE 80                                xor     SignOnly8Bit                ; .
  78++C4F9 57                                   ld      d,a                         ; .
  79++C4FA CD 11 AA                             call    mulHLEbyDSigned             ; DELC = z * - BETA
  80++C4FD ED 4B 87 C4                          ld      bc, (SunRollResult+1)       ; BCH = (y - alpha * x) (or K2)
  81++C501 3A 86 C4                             ld      a,(SunRollResult)           ; .
  82++C504 67                                   ld      h,a                         ; .
  83++C505 CD B9 A6                             call    AddBCHtoDELsigned           ; DEL = (y - alpha * x) - (Z * BETA) (K2+ (Z * -BETA)
  84++C508 ED 53 14 C0                          ld      (SBnKyhi),de                ; y = (y - alpha * x) - (Z * BETA)
  85++C50C 7D                                   ld      a,l                         ; .
  86++C50D 32 13 C0                             ld      (SBnKylo),a                 ; .
  87++C510 EB           .CalcX:                 ex      de,hl                       ; HLE = DEL = Y
  88++C511 5D                                   ld      e,l                         ; .
  89++C512 3A 3D 98                             ld      a,(ALPHA)                   ; D = alpha
  90++C515 FE 00                                cp      0                           ; if alpha is 0 then don't update x
  91++C517 CA 32 C5                             jp      z,.NoRotation
  92++C51A 57                                   ld      d,a                         ; .
  93++C51B CD 11 AA                             call    mulHLEbyDSigned             ; DELC = Y * alpha
  94++C51E ED 4B 11 C0                          ld      bc,(SBnKxhi)                ; BCH = x
  95++C522 3A 10 C0                             ld      a,(SBnKxlo)                 ; .
  96++C525 67                                   ld      h,a                         ; .
  97++C526 CD B9 A6                             call    AddBCHtoDELsigned           ; DEL = x + (alpha * y /256 )
  98++C529 ED 53 11 C0                          ld      (SBnKxhi),de                ; x = x + (alpha * y /256 )
  99++C52D 7C                                   ld      a,h                         ; .
 100++C52E 32 10 C0                             ld      (SBnKxlo),a                 ; .
 101++C531 C9                                   ret
 102++C532 3A 23 99     .NoRotation:            ld      a,(DELTA)                   ; BCH = - Delta
 103++C535 FE 00                                cp      0
 104++C537 C8                                   ret     z
 105++C538 0E 00                                ld      c,0                         ;
 106++C53A 67                                   ld      h,a                         ;
 107++C53B 06 80                                ld      b,$80                       ;
 108++C53D ED 5B 17 C0                          ld      de,(SBnKzhi)                ; DEL = z position
 109++C541 3A 16 C0                             ld      a,(SBnKzlo)                 ; .
 110++C544 6F                                   ld      l,a                         ; .
 111++C545 CD B9 A6                             call    AddBCHtoDELsigned           ; update speed
 112++C548 ED 53 17 C0                          ld      (SBnKzhi),DE                ; write back to zpos
 113++C54C 7D                                   ld      a,l
 114++C54D 32 16 C0                             ld      (SBnKzlo),a                ;
 115++C550 C9                                   ret
 116++C551
 117++C551              ;
 118++C551              ;SunApplyMyRollAndPitch: ld      a,(ALPHA)                   ; no roll or pitch, no calc needed
 119++C551              ;                        ld      hl,BETA
 120++C551              ;                        or      (hl)
 121++C551              ;                        and     SignMask8Bit
 122++C551              ;                        ret     z
 123++C551              ;.CalcZ:                 ;break
 124++C551              ;                        ld      a,(ALPHA)                   ; get roll magnitude
 125++C551              ;                        xor     SignOnly8Bit                ; get Q = -alpha
 126++C551              ;                        ld      d,a                         ; d reg represents Q (abount to roll)
 127++C551              ;                        ld      a,(SBnKxlo)                 ; HLE = x sgn, hi, lo
 128++C551              ;                        ld      e,a                         ;
 129++C551              ;                        ld      hl,(SBnKxhi)                ;
 130++C551              ;                        call    mulHLEbyDSigned             ; DELC = x * -alpha, so DEL = X * -alpha / 256
 131++C551              ;                        ld      a,d
 132++C551              ;                        ld      (SunRollResultp4),a         ; save D (I guess we need the sign?)
 133++C551              ;.CalcYPlusDEL:          ld      a,(SBnKylo)                 ; BCH = Y sgn, hi, lo
 134++C551              ;                        ld      h,a
 135++C551              ;                        ld      bc,(SBnKyhi)
 136++C551              ;                        call    AddBCHtoDELsigned           ; DEL = Y - ( X *  alpha /256)
 137++C551              ;.SaveResult1:           ld      a,l                         ; SunPitchWork = DEL
 138++C551              ;                        ;ld      (SunRollResult), a          ; SunPitchWork + 0 = L
 139++C551              ;                        ex      de,hl                       ; SunPitchWork + 1 = E
 140++C551              ;.CopyResultTo2:         ld      (SunRollResult+1),a         ; SunPitchWork + 2 = D
 141++C551              ;                        ld      (SunRollResult+1) ,hl       ; Copy K to K2 (y - alpha * x)
 142++C551              ;                        ;ld      (SunRollResult2+1),hl       ; also HLA = result
 143++C551              ;                        ld      a,(SunRollResult)           ; .
 144++C551              ;                        ;ld      (SunRollResult2),a          ; .
 145++C551              ;.CalcY:                 ld      e,a                         ; so now HLE = result
 146++C551              ;                        ld      a,(BETA)                    ; get pitch
 147++C551              ;                        ld      d,a                         ; now D = BETA
 148++C551              ;                        call    mulHLEbyDSigned             ; DELC = (y - alpha * x /256 ) * Beta
 149++C551              ;                        ld      bc,(SBnKzhi)                ; BCH = z
 150++C551              ;                        ld      a,(SBnKzlo)                 ;
 151++C551              ;                        ld      h,a                         ;
 152++C551              ;                        call    AddBCHtoDELsigned           ; DEL = z + ((y - alpha * x /256 ) * Beta) /256
 153++C551              ;.SaveZResult:           ld      (SunZResult+1),de           ; We now have a z result which we save
 154++C551              ;                        ld      (SBnKzhi),de                ; .
 155++C551              ;                        ld      a,l                         ; .
 156++C551              ;                        ld      (SunZResult),a              ; .
 157++C551              ;                        ld      (SBnKzlo),a                 ; .
 158++C551              ;.CalcMinusBetaMulZ:     ex      de,hl                       ; HLE = DEL = z post calculation
 159++C551              ;                        ld      e,l                         ;
 160++C551              ;                        ld      a,(BETA)                    ; d = - BETA
 161++C551              ;                        ld      d,a                         ;
 162++C551              ;                        xor     SignOnly8Bit                ;
 163++C551              ;                        call    mulHLEbyDSigned             ; DELC = z * - BETA
 164++C551              ;                        ld      bc, (SunRollResult+1)       ; BCH = (y - alpha * x) (or K2)
 165++C551              ;                        ld      a,(SunRollResult)           ;
 166++C551              ;                        ld      h,a                         ;
 167++C551              ;                        call    AddBCHtoDELsigned           ; DEL = (y - alpha * x) - (Z * BETA)
 168++C551              ;                        ld      (SBnKyhi),de                ; y = (y - alpha * x) - (Z * BETA)
 169++C551              ;                        ld      a,l                         ;
 170++C551              ;                        ld      (SBnKylo),a                 ;
 171++C551              ;.CalcX:                 ex      de,hl                       ; HLE = DEL = Y
 172++C551              ;                        ld      e,l                         ;
 173++C551              ;                        ld      a,(ALPHA)
 174++C551              ;                        ld      d,a                         ; D = alpha
 175++C551              ;                        call    mulHLEbyDSigned             ; DELC = Y * alpha
 176++C551              ;                        ld      bc,(SBnKxhi)                ; BCH = x
 177++C551              ;                        ld      a,(SBnKxlo)                 ;
 178++C551              ;                        ld      h,a                         ;
 179++C551              ;                        call    AddBCHtoDELsigned           ; DEL = x + (alpha * y /256 )
 180++C551              ;                        ld      (SBnKxhi),de                ; x = x + (alpha * y /256 )
 181++C551              ;                        ld      a,h                         ;
 182++C551              ;                        ld      (SBnKxlo),a                 ;
 183++C551              ;                        ret
 184++C551              ;
# file closed: ././Universe/Sun/SunApplyMyRollAndPitch.asm
 532+ C551              ;            INCLUDE "./Universe/SunApplyShipRollAndPitch.asm"
 533+ C551
 534+ C551 00           SunOnScreen             DB 0
 535+ C552 00 00        cLineArrayPtr            DW 0
 536+ C554 00           LineCount               DB 0
 537+ C555 00           RaggedSize              DB 0
 538+ C556 00           MinYOffset              DB 0
 539+ C557 00           MaxYOffSet              DB 0
 540+ C558 00 00        XCentre                 DW  0       ; signed
 541+ C55A 00 00        YCentre                 DW  0       ; signed
 542+ C55C 00           SunRadius               DB  0       ; unsigned
 543+ C55D              ; draw circle
 544+ C55D
 545+ C55D
 546+ C55D CD 8D C4     SunUpdateAndRender:     call    SunApplyMyRollAndPitch
 547+ C560 3A 18 C0     .CheckDrawable:         ld      a,(SBnKzsgn)
 548+ C563 E6 80                                and     SignOnly8Bit
 549+ C565 C0                                   ret     nz
 550+ C566              .CheckDist48:           ReturnIfAGTENusng 48                ; at a distance over 48 its too far away
 550+ C566 FE 30       >                        cp    48
 550+ C568 D0          >                        ret	 nc
 551+ C569 2A 17 C0                             ld      hl,(SBnKzhi)                ; if the two high bytes are zero then its too close
 552+ C56C B6                                   or      (hl)
 553+ C56D                                      ReturnIfAIsZero
 553+ C56D A7          >                        and     a
 553+ C56E C8          >                        ret     z
 554+ C56F ED 5B 16 C0  .SunProjectToEye:       ld      de,(SBnKzlo)                ; X Pos = X / Z
 555+ C573 3A 18 C0                             ld      a,(SBnKzsgn)                ; CDE = z
 556+ C576 4F                                   ld      c,a                         ;
 557+ C577 2A 10 C0                             ld      hl,(SBnKxlo)                ; AHL = x
 558+ C57A 3A 12 C0                             ld      a,(SBnKxsgn)                ;
 559+ C57D CD F9 A7                             call    Div24by24LeadSign           ; could do 16 bit in reality
 560+ C580 79           .CheckPosOnScreenX:     ld      a,c                         ;
 561+ C581 E6 7F                                and     SignMask8Bit                ; a= abs highest byte
 562+ C583 C0                                   ret     nz                          ; off screen
 563+ C584 7A                                   ld      a,d                         ; if high byte >=4 then off screen (we can do this as ABS
 564+ C585 FE 04                                cp      4                           ;
 565+ C587 D0                                   ret     nc                          ; off screen
 566+ C588 6B                                   ld      l,e
 567+ C589 7A                                   ld      a,d
 568+ C58A B1                                   or      c                           ; we know that C can only hold a sign bit if its on screen
 569+ C58B 65                                   ld      h,l
 570+ C58C 3E 80                                ld      a,ScreenCenterX
 571+ C58E CD 98 A6                             call    AddAusngToHLsng             ; correct to center of screen
 572+ C591 22 58 C5                             ld      (XCentre),hl                ; save projected X Position
 573+ C594 ED 5B 16 C0  .caclYProj:             ld      de,(SBnKzlo)                ; calc center y
 574+ C598 3A 18 C0                             ld      a,(SBnKzsgn)                ; cde = z
 575+ C59B 4F                                   ld      c,a                         ;
 576+ C59C 2A 13 C0                             ld      hl,(SBnKylo)                ; ahl = y
 577+ C59F 3A 15 C0                             ld      a,(SBnKysgn)                ;
 578+ C5A2 CD F9 A7                             call    Div24by24LeadSign           ;
 579+ C5A5 79           .CheckPosOnScreenY:     ld      a,c
 580+ C5A6 E6 7F                                and     SignMask8Bit                ; a= abs highest byte
 581+ C5A8 C0                                   ret     nz                          ; off screen
 582+ C5A9 7A                                   ld      a,d                         ; if high byte >=4 then off screen (we can do this as ABS
 583+ C5AA FE 04                                cp      4                           ;
 584+ C5AC D0                                   ret     nc                          ; off screen
 585+ C5AD 6B                                   ld      l,e
 586+ C5AE 7A                                   ld      a,d
 587+ C5AF B1                                   or      c                           ; we know that C can only hold a sign bit if its on screen
 588+ C5B0 65                                   ld      h,l
 589+ C5B1 3E 60                                ld      a,ScreenCenterY
 590+ C5B3 CD A6 A6                             call    HLEequAusngMinusHLsng
 591+ C5B6 22 5A C5                             ld      (YCentre),hl                  ; save projected T Position
 592+ C5B9 21 9F C0     .ClearLineArray:        ld      hl,SBnKLineArray            ; we load start and end as 0
 593+ C5BC 11 00 01                             ld		de, SunLineArraySize        ; just if we get a 0,0 genuine we will not plot it
 594+ C5BF 3E 00                                ld		a,0
 595+ C5C1 CD 28 95                             call	memfill_dma
 596+ C5C4                                      ;break
 597+ C5C4 ED 5B 16 C0  .CalculateRadius:       ld      de,(SBnKzlo)
 598+ C5C8 3A 18 C0                             ld      a,(SBnKzsgn)
 599+ C5CB 4F                                   ld      c,a
 600+ C5CC 21 00 60                             ld      hl,$6000  ; was hl          ; planet radius at Z = 1 006000
 601+ C5CF AF                                   xor     a
 602+ C5D0 CD F9 A7                             call    Div24by24LeadSign           ; radius = AHL/CDE = 24576 / distance z
 603+ C5D3 7A                                   ld      a,d
 604+ C5D4 FE 00                                cp      0
 605+ C5D6 28 02                                jr      z,.SkipSetK
 606+ C5D8 1E F8                                ld      e,248                       ;set radius to 248 as maxed out
 607+ C5DA 21 9F C0     .SkipSetK:              ld      hl,SBnKLineArray
 608+ C5DD 22 9F C1                             ld      (LineArrayPtr),hl
 609+ C5E0 AF                                   xor     a
 610+ C5E1 32 54 C5                             ld      (LineCount),a
 611+ C5E4 16 00                                ld      d,0
 612+ C5E6 7B           .SetRaggedEdgeMax:      ld      a,e
 613+ C5E7 1E 00                                ld      e,0
 614+ C5E9 32 5C C5                             ld      (SunRadius),a
 615+ C5EC FE 60                                cp      96
 616+ C5EE                                      FlipCarryFlag
 616+ C5EE 3F          >                        ccf
 617+ C5EF CB 13                                rl      e
 618+ C5F1 FE 28                                cp      40
 619+ C5F3                                      FlipCarryFlag
 619+ C5F3 3F          >                        ccf
 620+ C5F4 CB 13                                rl      e
 621+ C5F6 FE 10                                cp      16
 622+ C5F8                                      FlipCarryFlag
 622+ C5F8 3F          >                        ccf
 623+ C5F9 CB 13                                rl     e
 624+ C5FB 7B                                   ld      a,e
 625+ C5FC                                      ; DEBUGGING DIAG for FUZZING CODE, LOOKS OK THOUGH ld      a,%00000001; DEBUG RAGGED
 626+ C5FC 32 55 C5                             ld      (RaggedSize),a
 627+ C5FF 2A 5A C5     .GetMinY:               ld      hl,(YCentre)
 628+ C602 7C                                   ld      a,h
 629+ C603 E6 80                                and     SignOnly8Bit
 630+ C605 20 17                                jr      nz,.NegativeY               ; if its neative then we start with 0 as it can only go up screen after radius
 631+ C607 3A 5C C5                             ld      a,(SunRadius)               ; raged does not affect Y axis
 632+ C60A 5F                                   ld      e,a
 633+ C60B 16 00                                ld      d,0
 634+ C60D                                      ClearCarryFlag
 634+ C60D B7          >                        or a
 635+ C60E ED 52                                sbc     hl,de                       ; hl now is a 2's c value if its negative else still +ve
 636+ C610 FA 1E C6                             jp      m, .NegativeY
 637+ C613 7C                                   ld      a,h
 638+ C614 E6 7F                                and     SignMask8Bit
 639+ C616 C0                                   ret     nz                          ; if its off screen then its not to be processed
 640+ C617 7D                                   ld      a,l
 641+ C618                                      ReturnIfAGTENusng 128                ; if min is off screen then not to be processed
 641+ C618 FE 80       >                        cp    128
 641+ C61A D0          >                        ret	 nc
 642+ C61B C3 1F C6                             jp      .SetMinY
 643+ C61E AF           .NegativeY:             xor     a
 644+ C61F 32 56 C5     .SetMinY:               ld      (MinYOffset),a              ; so now we have Y top of screen
 645+ C622 2A 5A C5     .GetMaxY:               ld      hl,(YCentre)
 646+ C625 7C                                   ld      a,h
 647+ C626 E6 7F                                and     SignMask8Bit
 648+ C628 20 2B                                jr      nz,.MaxPosY                 ; if its neative then we start with 0 as it can only go up screen after radius
 649+ C62A 3A 5C C5                             ld      a,(SunRadius)
 650+ C62D ED 31                                add     hl,a
 651+ C62F 7D                                   ld      a,l
 652+ C630                                      JumpIfAGTENusng 128, .MaxPosY
 652+ C630 FE 80       >                        cp     128
 652+ C632 D2 55 C6    >                        jp		nc,.MaxPosY
 653+ C635 7B                                   ld      a,e
 654+ C636 85                                   add     a,l
 655+ C637                                      JumpIfAGTENusng 128, .MaxPosY
 655+ C637 FE 80       >                        cp     128
 655+ C639 D2 55 C6    >                        jp		nc,.MaxPosY
 656+ C63C                                      JumpIfOverflow     .MaxPosY
 656+ C63C E2 55 C6    >                        jp		po, .MaxPosY
 657+ C63F 7B                                   ld      a,e
 658+ C640 CD 98 A6                             call    AddAusngToHLsng
 659+ C643 7C                                   ld      a,h
 660+ C644 E6 80                                and     SignOnly8Bit
 661+ C646 C0                                   ret     nz                ; if max is negative then its off screen too
 662+ C647 7C                                   ld      a,h
 663+ C648 E6 7F                                and     SignMask8Bit                ; if h had a value then its max Y as well
 664+ C64A 7D                                   ld      a,l
 665+ C64B                                      JumpIfAGTENusng 128, .MaxPosY         ; if l > 127 then max Y as well
 665+ C64B FE 80       >                        cp     128
 665+ C64D D2 55 C6    >                        jp		nc,.MaxPosY
 666+ C650 20 03                                jr      nz, .MaxPosY
 667+ C652 C3 1F C6                             jp      .SetMinY
 668+ C655 3E 7F        .MaxPosY:               ld      a,127
 669+ C657 32 57 C5     .SetMaxY                ld      (MaxYOffSet),a              ; so now we have min and max Y coordinates and proj holds center
 670+ C65A                                      ;break
 671+ C65A CD 61 C6                             call    SunDrawCircle
 672+ C65D CD B9 C1                             call    SunDraw
 673+ C660 C9                                   ret
 674+ C661              ;.. Now we caluclate the circle of the star
 675+ C661              ;.. its from MinY down the screen to MaxY center ProjX,ProjY.
 676+ C661              ;.. We can use the circle draw logic gtom Bressenham's algorithm
 677+ C661              ; so now there are the following conditions to consider
 678+ C661              ; y min = 0   y center is negative radius <= ABS (Y center)             => Don't draw
 679+ C661              ; y min = 0   y center is negative radius > ABS (Y center)+1            => Draw bottom half only
 680+ C661              ; y max = 127 y center is > 127    radius <= y center - 127             => Don't draw
 681+ C661              ; y max = 127 y center is > 127    radius > y center - 127              => Draw top half only
 682+ C661              ; y min >= 0  y center > y min     we don't need to worry about radius  => Draw both halves
 683+ C661              ; x center + radius < 0                                                 => Don't draw
 684+ C661              ; x center - radius > 255                                               => Don't draw
 685+ C661              ; we won't consider x more here as the driver is the y coordinate but we will check if x is vaiable
 686+ C661              ; x point = max (x point, 0)   on left
 687+ C661              ; x point = min (x point, 255) on right
 688+ C661
 689+ C661              SetIYPlusOffset:        MACRO   reg
 690+ C661 ~                                    push    hl,,iy                          ; save hl, then hl = iy
 691+ C661 ~                                    pop     hl                              ;
 692+ C661 ~                                    ld      a,reg
 693+ C661 ~                                    add     hl,a
 694+ C661 ~                                    add     hl,a
 695+ C661 ~                                    push    hl
 696+ C661 ~                                    pop     iy
 697+ C661 ~                                    pop     hl
 698+ C661                                      ENDM
 699+ C661
 700+ C661              SetIYMinusOffset:       MACRO   reg
 701+ C661 ~                                    push    de,,hl,,iy                      ; save hl, then hl = iy
 702+ C661 ~                                    pop     hl                              ;
 703+ C661 ~                                    ld      a,reg
 704+ C661 ~                                    add     a,a
 705+ C661 ~                                    ld      e,a
 706+ C661 ~                                    ld      d,0
 707+ C661 ~                                    ClearCarryFlag
 708+ C661 ~                                    sbc     hl,de
 709+ C661 ~                                    push    hl
 710+ C661 ~                                    pop     iy
 711+ C661 ~                                    pop     de,,hl
 712+ C661                                      ENDM
 713+ C661
 714+ C661
 715+ C661 3A 5C C5     SunDrawCircle:          ld      a,(SunRadius)
 716+ C664              .CheckRadius:           ReturnIfAIsZero                         ; elimiate zero or single pixel
 716+ C664 A7          >                        and     a
 716+ C665 C8          >                        ret     z
 717+ C666                                      JumpIfAEqNusng  1, SunCircleSinglePixel
 717+ C666 FE 01       >                        cp     1
 717+ C668 CA CA C7    >                        jp      z,SunCircleSinglePixel
 718+ C66B                                     ; JumpIfAGTENusng 127, SunFullScreen      ; if its covering whole then just make it yellow
 719+ C66B              .MakeCentreX2C:         MemSignedTo2C XCentre                   ; convert 16 bit signed to 2's compliment
 719+ C66B 2A 58 C5    >                        ld      hl,(XCentre)
 719+ C66E CB 7C       >                        bit     7,h
 719+ C670 28 04       >                        jr      z,.Done2c
 719+ C672 7C          >                        ld      a,h
 719+ C673 E6 7F       >                        and     SignMask8Bit
 719+ C675 67          >                        ld      h,a
 719+ C676 22 58 C5    >.Done2c:                ld      (XCentre),hl
 720+ C679              .MakeCentreY2C:         MemSignedTo2C YCentre                   ; .
 720+ C679 2A 5A C5    >                        ld      hl,(YCentre)
 720+ C67C CB 7C       >                        bit     7,h
 720+ C67E 28 04       >                        jr      z,.Done2c
 720+ C680 7C          >                        ld      a,h
 720+ C681 E6 7F       >                        and     SignMask8Bit
 720+ C683 67          >                        ld      h,a
 720+ C684 22 5A C5    >.Done2c:                ld      (YCentre),hl
 721+ C687 2A 5A C5     .BoundsCheck            ld      hl,(YCentre)
 722+ C68A E5                                   push    hl
 723+ C68B 3A 5C C5                             ld      a,(SunRadius)
 724+ C68E ED 31                                add     hl,a
 725+ C690 CB 7C                                bit     7,h
 726+ C692 C0                                   ret     nz                              ; if Y + radius is negative then off the screen
 727+ C693 E1                                   pop     hl
 728+ C694 16 00                                ld      d,0
 729+ C696 5F                                   ld      e,a
 730+ C697                                      ClearCarryFlag
 730+ C697 B7          >                        or a
 731+ C698 ED 52                                sbc     hl,de
 732+ C69A 7C                                   ld      a,h
 733+ C69B                                      ReturnIfAGTENusng  1                     ; really shoudl be signed TODO
 733+ C69B FE 01       >                        cp    1
 733+ C69D D0          >                        ret	 nc
 734+ C69E
 735+ C69E 2A 58 C5                             ld      hl,(XCentre)
 736+ C6A1 E5                                   push    hl
 737+ C6A2 3A 5C C5                             ld      a,(SunRadius)
 738+ C6A5 ED 31                                add     hl,a
 739+ C6A7 CB 7C                                bit     7,h
 740+ C6A9 C0                                   ret     nz                              ; if Y + radius is negative then off the screen
 741+ C6AA E1                                   pop     hl
 742+ C6AB 16 00                                ld      d,0
 743+ C6AD 5F                                   ld      e,a
 744+ C6AE                                      ClearCarryFlag
 744+ C6AE B7          >                        or a
 745+ C6AF ED 52                                sbc     hl,de
 746+ C6B1 7C                                   ld      a,h
 747+ C6B2
 748+ C6B2                                      ReturnIfAGTENusng 1                      ; really shoudl be signed TODO
 748+ C6B2 FE 01       >                        cp    1
 748+ C6B4 D0          >                        ret	 nc
 749+ C6B5
 750+ C6B5                                      ; ** BNOTE Ptuichj abnd roll has a bug as piitch increases z axis value
 751+ C6B5              .PrepCircleData:       ; ld      ixl,0
 752+ C6B5                                     ; ld		(.Plot1+1),bc			        ; save origin into DE reg in code
 753+ C6B5 3A 5C C5                            ld      a,(SunRadius)
 754+ C6B8 DD 67                                ld		ixh,a							; ixh = radius
 755+ C6BA
 756+ C6BA
 757+ C6BA DD 2E 00                             ld		ixl,0						    ; ixl = delta (y)
 758+ C6BD 26 00        .calcd:	                ld		h,0                             ; de = radius * 2
 759+ C6BF 6F                                   ld		l,a                             ; .
 760+ C6C0 29                                   add		hl,hl							; .
 761+ C6C1 EB                                   ex		de,hl							; .
 762+ C6C2 21 03 00                             ld		hl,3                            ; hl = 3 - (r * 2)
 763+ C6C5 A7                                   and		a                               ; .
 764+ C6C6 ED 52                                sbc		hl,de							; .
 765+ C6C8 44                                   ld		b,h                             ; bc = 3 - (r * 2) : d = 3 - 2r
 766+ C6C9 4D                                   ld		c,l								; .
 767+ C6CA 21 01 00     .calcdelta:             ld		hl,1                            ; set hl to 1
 768+ C6CD 16 00                                ld		d,0                             ; de = ixl
 769+ C6CF DD 5D                                ld		e,ixl                           ;
 770+ C6D1                                      ClearCarryFlag                          ;
 770+ C6D1 B7          >                        or a
 771+ C6D2 ED 52                                sbc		hl,de                           ; hl = 1 - ixl
 772+ C6D4 11 01 00     .Setde1:                ld		de,1                            ; del = 1
 773+ C6D7 DD 7C        .CircleLoop:            ld		a,ixh                           ; if x = y then exit
 774+ C6D9 DD BD                                cp		ixl                             ;
 775+ C6DB D8                                   ret		c                               ;
 776+ C6DC D9           .ProcessLoop:	        exx                                     ; save out registers
 777+ C6DD              ; Process CY+Y CX+X & CY+Y CX-X..................................
 778+ C6DD 2A 5A C5     .Plot1:                 ld      hl, (YCentre)
 779+ C6E0 DD 7C        .Get1YRow:              ld      a,ixh
 780+ C6E2 ED 31                                add     hl,a                            ; Check to see if CY+Y (note is add hl ,a usginedf only??)
 781+ C6E4              .Check1YRowOnScreen:    CheckRowHLOnScreen .NoTopPixelPair
 781+ C6E4 7C          >                        ld      a,h                             ; is h byte set, i.e > 256 or < 0
 781+ C6E5 A7          >                        and     a                               ; .
 781+ C6E6 20 26       >                        jr      nz,.NoTopPixelPair                   ; h <> 0 so fails (covers <0 and > 255
 781+ C6E8 7D          >                        ld      a,l                             ; l bit 7 0?
 781+ C6E9 E6 80       >                        and     Bit7Only                        ; covers l > 127 (screen draw area is 0 to 192 / 3 * 2 (128)
 781+ C6EB 20 21       >                        jr      nz,.NoTopPixelPair                   ;
 782+ C6ED              .Write1YCoord:          SetIYPlusOffset ixh                     ; IY = IY + ixh
 782+ C6ED E5 FD E5    >                        push    hl,,iy                          ; save hl, then hl = iy
 782+ C6F0 E1          >                        pop     hl                              ;
 782+ C6F1 DD 7C       >                        ld      a,ixh
 782+ C6F3 ED 31       >                        add     hl,a
 782+ C6F5 ED 31       >                        add     hl,a
 782+ C6F7 E5          >                        push    hl
 782+ C6F8 FD E1       >                        pop     iy
 782+ C6FA E1          >                        pop     hl
 783+ C6FB                                      IYEquRowN l                             ; IY = SBnkLineArray + (2 * l) - set up iy as target address
 783+ C6FB 7D          >                        ld      a,l
 783+ C6FC 21 9F C0    >                        ld      hl,SBnKLineArray
 783+ C6FF ED 31       >                        add     hl,a
 783+ C701 ED 31       >                        add     hl,a
 783+ C703 E5          >                        push    hl
 783+ C704 FD E1       >                        pop     iy
 784+ C706 DD 7D                                ld      a,ixl
 785+ C708 CD E1 C7                             call    ProcessXRowA
 786+ C70B C3 10 C7                             jp      .Plot2
 787+ C70E DD 01        .NoTopPixelPair:        break
 788+ C710              ; Process CY-Y CX+X & CY-Y CX-X..................................
 789+ C710 2A 5A C5     .Plot2:                 ld      hl, (YCentre)
 790+ C713 16 00        .Get2YRow:              ld      d,0
 791+ C715 DD 5C                                ld      e,ixh
 792+ C717                                      ClearCarryFlag
 792+ C717 B7          >                        or a
 793+ C718 ED 52                                sbc     hl,de
 794+ C71A              .Check2YRowOnScreen:    CheckRowHLOnScreen .NoBottomPixelPair
 794+ C71A 7C          >                        ld      a,h                             ; is h byte set, i.e > 256 or < 0
 794+ C71B A7          >                        and     a                               ; .
 794+ C71C 20 2B       >                        jr      nz,.NoBottomPixelPair                   ; h <> 0 so fails (covers <0 and > 255
 794+ C71E 7D          >                        ld      a,l                             ; l bit 7 0?
 794+ C71F E6 80       >                        and     Bit7Only                        ; covers l > 127 (screen draw area is 0 to 192 / 3 * 2 (128)
 794+ C721 20 26       >                        jr      nz,.NoBottomPixelPair                   ;
 795+ C723                                      SetIYMinusOffset ixh
 795+ C723 D5 E5 FD E5 >                        push    de,,hl,,iy                      ; save hl, then hl = iy
 795+ C727 E1          >                        pop     hl                              ;
 795+ C728 DD 7C       >                        ld      a,ixh
 795+ C72A 87          >                        add     a,a
 795+ C72B 5F          >                        ld      e,a
 795+ C72C 16 00       >                        ld      d,0
 795+ C72E             >                        ClearCarryFlag
 795+ C72E B7          >                        or a
 795+ C72F ED 52       >                        sbc     hl,de
 795+ C731 E5          >                        push    hl
 795+ C732 FD E1       >                        pop     iy
 795+ C734 E1 D1       >                        pop     de,,hl
 796+ C736              .Write2YCoord:          IYEquRowN l                             ; set up iy as target address
 796+ C736 7D          >                        ld      a,l
 796+ C737 21 9F C0    >                        ld      hl,SBnKLineArray
 796+ C73A ED 31       >                        add     hl,a
 796+ C73C ED 31       >                        add     hl,a
 796+ C73E E5          >                        push    hl
 796+ C73F FD E1       >                        pop     iy
 797+ C741 DD 7D                                ld      a,ixl
 798+ C743 CD E1 C7                             call    ProcessXRowA
 799+ C746 C3 4B C7                             jp      .Plot3
 800+ C749 DD 01        .NoBottomPixelPair:     break
 801+ C74B              ; Process CY+X CX+Y & CY+X CX-Y..................................
 802+ C74B 2A 5A C5     .Plot3:                 ld      hl, (YCentre)
 803+ C74E DD 7D        .Get3YRow:              ld      a,ixl
 804+ C750 ED 31                                add     hl,a                            ; Check to see if CY+Y
 805+ C752              .Check3YRowOnScreen:    CheckRowHLOnScreen .NoTop3PixelPair
 805+ C752 7C          >                        ld      a,h                             ; is h byte set, i.e > 256 or < 0
 805+ C753 A7          >                        and     a                               ; .
 805+ C754 20 26       >                        jr      nz,.NoTop3PixelPair                   ; h <> 0 so fails (covers <0 and > 255
 805+ C756 7D          >                        ld      a,l                             ; l bit 7 0?
 805+ C757 E6 80       >                        and     Bit7Only                        ; covers l > 127 (screen draw area is 0 to 192 / 3 * 2 (128)
 805+ C759 20 21       >                        jr      nz,.NoTop3PixelPair                   ;
 806+ C75B                                      SetIYPlusOffset ixl
 806+ C75B E5 FD E5    >                        push    hl,,iy                          ; save hl, then hl = iy
 806+ C75E E1          >                        pop     hl                              ;
 806+ C75F DD 7D       >                        ld      a,ixl
 806+ C761 ED 31       >                        add     hl,a
 806+ C763 ED 31       >                        add     hl,a
 806+ C765 E5          >                        push    hl
 806+ C766 FD E1       >                        pop     iy
 806+ C768 E1          >                        pop     hl
 807+ C769              .Write3YCoord:          IYEquRowN l                             ; set up iy as target address
 807+ C769 7D          >                        ld      a,l
 807+ C76A 21 9F C0    >                        ld      hl,SBnKLineArray
 807+ C76D ED 31       >                        add     hl,a
 807+ C76F ED 31       >                        add     hl,a
 807+ C771 E5          >                        push    hl
 807+ C772 FD E1       >                        pop     iy
 808+ C774 DD 7C                                ld      a,ixh
 809+ C776 CD E1 C7                             call    ProcessXRowA
 810+ C779 C3 7E C7                             jp      .Plot4
 811+ C77C DD 01        .NoTop3PixelPair:       break
 812+ C77E              ; Process CY-X CX+Y & CY-X CX-Y..................................
 813+ C77E 2A 5A C5     .Plot4:                 ld      hl, (YCentre)
 814+ C781 16 00        .Get4YRow:              ld      d,0
 815+ C783 DD 5D                                ld      e,ixl
 816+ C785                                      ClearCarryFlag
 816+ C785 B7          >                        or a
 817+ C786 ED 52                                sbc     hl,de
 818+ C788              .Check4YRowOnScreen:    CheckRowHLOnScreen .NoBottom4PixelPair
 818+ C788 7C          >                        ld      a,h                             ; is h byte set, i.e > 256 or < 0
 818+ C789 A7          >                        and     a                               ; .
 818+ C78A 20 28       >                        jr      nz,.NoBottom4PixelPair                   ; h <> 0 so fails (covers <0 and > 255
 818+ C78C 7D          >                        ld      a,l                             ; l bit 7 0?
 818+ C78D E6 80       >                        and     Bit7Only                        ; covers l > 127 (screen draw area is 0 to 192 / 3 * 2 (128)
 818+ C78F 20 23       >                        jr      nz,.NoBottom4PixelPair                   ;
 819+ C791                                      SetIYMinusOffset ixl
 819+ C791 D5 E5 FD E5 >                        push    de,,hl,,iy                      ; save hl, then hl = iy
 819+ C795 E1          >                        pop     hl                              ;
 819+ C796 DD 7D       >                        ld      a,ixl
 819+ C798 87          >                        add     a,a
 819+ C799 5F          >                        ld      e,a
 819+ C79A 16 00       >                        ld      d,0
 819+ C79C             >                        ClearCarryFlag
 819+ C79C B7          >                        or a
 819+ C79D ED 52       >                        sbc     hl,de
 819+ C79F E5          >                        push    hl
 819+ C7A0 FD E1       >                        pop     iy
 819+ C7A2 E1 D1       >                        pop     de,,hl
 820+ C7A4              .Write4YCoord:          IYEquRowN l                             ; set up iy as target address
 820+ C7A4 7D          >                        ld      a,l
 820+ C7A5 21 9F C0    >                        ld      hl,SBnKLineArray
 820+ C7A8 ED 31       >                        add     hl,a
 820+ C7AA ED 31       >                        add     hl,a
 820+ C7AC E5          >                        push    hl
 820+ C7AD FD E1       >                        pop     iy
 821+ C7AF DD 7C                                ld      a,ixh
 822+ C7B1 CD E1 C7                             call    ProcessXRowA
 823+ C7B4              .NoBottom4PixelPair:
 824+ C7B4              ; Completed one iteration........................................
 825+ C7B4 D9                                   exx
 826+ C7B5 CB 7C        .IncrementCircle:	    bit     7,h				; Check for Hl<=0
 827+ C7B7 28 03                                jr z,   .draw_circle_1
 828+ C7B9 19                                   add hl,de			; Delta=Delta+D1
 829+ C7BA 18 05                                jr      .draw_circle_2		;
 830+ C7BC 09           .draw_circle_1:		    add     hl,bc			; Delta=Delta+D2
 831+ C7BD 03                                   inc     bc
 832+ C7BE 03                                   inc     bc				; D2=D2+2
 833+ C7BF DD 25                                dec     ixh				; Y=Y-1
 834+ C7C1 03           .draw_circle_2:		    inc bc				    ; D2=D2+2
 835+ C7C2 03                                   inc bc
 836+ C7C3 13                                   inc de				    ; D1=D1+2
 837+ C7C4 13                                   inc de
 838+ C7C5 DD 2C                                inc ixl				    ; X=X+1
 839+ C7C7 C3 D7 C6                             jp      .CircleLoop
 840+ C7CA 2A 58 C5     SunCircleSinglePixel:     ld      hl,(XCentre)
 841+ C7CD 7C                                   ld      a,h
 842+ C7CE A7                                   and     a
 843+ C7CF C0                                   ret     nz                  ; if the high byte is set then no pixel
 844+ C7D0 4D                                   ld      c,l
 845+ C7D1 2A 5A C5                             ld      hl,(YCentre)
 846+ C7D4 7C                                   ld      a,h
 847+ C7D5 A7                                   and     a
 848+ C7D6 C0                                   ret     nz                  ; if the high byte is set then no pixel
 849+ C7D7 7D                                   ld      a,l
 850+ C7D8 CB 7F                                bit     7,a
 851+ C7DA C0                                   ret     nz                  ; if l > 127 then no pixel
 852+ C7DB 47                                   ld      b,a
 853+ C7DC 7B                                   ld		a,e
 854+ C7DD CD 19 E1                             call	l2_plot_pixel_y_test
 855+ C7E0 C9                                   ret
 856+ C7E1
 857+ C7E1              ProcessXRowA:           ;break
 858+ C7E1 2A 58 C5                             ld      hl,(XCentre)                    ; get X Center
 859+ C7E4 F5                                   push    af                              ; save A (curent offset +/- value
 860+ C7E5 ED 31                                add     hl,a                            ; Hl = HL + offset
 861+ C7E7 7C                                   ld      a,h                             ; is HL negative?, if so then set C to 0
 862+ C7E8 CB 7F                                bit     7,a                             ;
 863+ C7EA 20 14                                jr      nz,.XCoordNegative              ; We can have this for non X + Radius i.e. the equater
 864+ C7EC A7                                   and     a                               ; if H <> 0? (why by here must be +ve), set c to $FF
 865+ C7ED 20 16                                jr      nz,.XCoordMaxed                 ; .
 866+ C7EF 4D                                   ld      c,l                             ; else set c to l and do the -ve offset
 867+ C7F0 C5           .AddFuzz:               push    bc
 868+ C7F1 CD D0 9D                             call    doRandom                        ; c = c - random AND ragged Size
 869+ C7F4 C1                                   pop     bc
 870+ C7F5 21 55 C5                             ld      hl,RaggedSize                   ;
 871+ C7F8 A6                                   and     (hl)                            ;
 872+ C7F9 81                                   add     c                               ;
 873+ C7FA 4F                                   ld      c,a                             ;
 874+ C7FB 38 08                                jr      c,.XCoordMaxed                  ; has fuzz caused a carry, if so > 255 to make 255
 875+ C7FD C3 07 C8                             jp      .ProcessSubtract                ;
 876+ C800 0E 00        .XCoordNegative:        ld      c,0                             ; if it was negative then 0
 877+ C802 C3 07 C8                             jp      .ProcessSubtract
 878+ C805 0E FF        .XCoordMaxed:           ld      c,255                           ; if it was +ve then 255
 879+ C807 F1           .ProcessSubtract:       pop     af                              ; get offset back
 880+ C808 5F                                   ld      e,a                             ; but goes into DE as its a subtract
 881+ C809 16 00                                ld      d,0
 882+ C80B 2A 58 C5                             ld      hl,(XCentre)                    ; so do subtract
 883+ C80E                                      ClearCarryFlag                          ; .
 883+ C80E B7          >                        or a
 884+ C80F ED 52                                sbc     hl,de                           ; .
 885+ C811 FA 2E C8                             jp      m,.XCoordLeftNegative           ; again test for min max
 886+ C814 E5 C5        .AddFuzzSubtract:       push    hl,,bc
 887+ C816 CD D0 9D                             call    doRandom                        ; c = c - random AND ragged Size
 888+ C819 C1                                   pop     bc
 889+ C81A 21 55 C5                             ld      hl,RaggedSize                   ;
 890+ C81D A6                                   and     (hl)                            ;
 891+ C81E 5F                                   ld      e,a
 892+ C81F E1                                   pop     hl
 893+ C820 ED 52                                sbc     hl,de
 894+ C822 FA 2E C8                             jp      m,.XCoordLeftNegative           ; again test for min max
 895+ C825 7C                                   ld      a,h
 896+ C826 A7                                   and     a
 897+ C827 C2 33 C8                             jp      nz,.XCordLeftMaxed
 898+ C82A 45                                   ld      b,l
 899+ C82B C3 35 C8                             jp      .CompletedXCoords
 900+ C82E 06 00        .XCoordLeftNegative:    ld      b,0
 901+ C830 C3 35 C8                             jp      .CompletedXCoords
 902+ C833 06 FF        .XCordLeftMaxed:        ld      b,255
 903+ C835 78           .CompletedXCoords:      ld      a,b
 904+ C836 FD 77 00     .RowSaveIY1             ld      (iy+0),a                        ; iy holds current line array index
 905+ C839 79                                   ld      a,c
 906+ C83A FD 77 01     .RowSaveIY3             ld      (iy+1),a
 907+ C83D C9                                   ret
 908+ C83E
 909+ C83E              ; .....................................................
 910+ C83E              ; if the universe object is a planet or sun then do that instead
 911+ C83E              ;;TODOProcessPlanet:          cp      129
 912+ C83E              ;;TODO                        jr      nz, .ItsAPlanet
 913+ C83E              ;;TODO.ItsAStar:              ld      a,(SBnKzsgn)
 914+ C83E              ;;TODO                        cp      48                               ; if z > 48 (it must be positive to enter this routine)
 915+ C83E
 916+ C83E
 917+ C83E              ; Square Root using tables
 918+ C83E              ; DE = number to find
 919+ C83E 21 5E CA     SunLookupSqrtDE:        ld      hl,SunSquareRootTable
 920+ C841 7A           .LookupCorseJump:       ld      a,d
 921+ C842 ED 31                                add     hl,a
 922+ C844 ED 31                                add     hl,a
 923+ C846 7E                                   ld      a,(hl)
 924+ C847 23                                   inc     hl
 925+ C848 66                                   ld      h,(hl)
 926+ C849 6F                                   ld      l,a
 927+ C84A 7E           .FineSearchLoop:        ld      a,(hl)
 928+ C84B                                      JumpIfAEqNusng  e, .FoundByte
 928+ C84B BB          >                        cp     e
 928+ C84C CA 58 C8    >                        jp      z,.FoundByte
 929+ C84F                                      JumpIfAGTENusng e, .PreviousByte
 929+ C84F BB          >                        cp     e
 929+ C850 D2 5B C8    >                        jp		nc,.PreviousByte
 930+ C853 23           .NotFound:              inc     hl
 931+ C854 23                                   inc     hl
 932+ C855 C3 4A C8                             jp      .FineSearchLoop
 933+ C858 23           .FoundByte:             inc     hl
 934+ C859 7E                                   ld      a,(hl)
 935+ C85A C9                                   ret
 936+ C85B 2B           .PreviousByte:          dec     hl
 937+ C85C 7E                                   ld      a,(hl)
 938+ C85D C9                                   ret
 939+ C85E
 940+ C85E 5E CA 70 CA  SunRootHighIndex:       DW SunSqr00,SunSqr01,SunSqr02,SunSqr03,SunSqr04,SunSqr05,SunSqr06,SunSqr07,SunSqr08,SunSqr09,SunSqr0A,SunSqr0B,SunSqr0C,SunSqr0D,SunSqr0E,SunSqr0F
 940+ C862 7E CA 8A CA
 940+ C866 94 CA 9C CA
 940+ C86A A4 CA AC CA
 940+ C86E B4 CA BA CA
 940+ C872 C2 CA C8 CA
 940+ C876 CC CA D2 CA
 940+ C87A D8 CA DE CA
 941+ C87E E4 CA EA CA                          DW SunSqr10,SunSqr11,SunSqr12,SunSqr13,SunSqr14,SunSqr15,SunSqr16,SunSqr17,SunSqr18,SunSqr19,SunSqr1A,SunSqr1B,SunSqr1C,SunSqr1D,SunSqr1E,SunSqr1F
 941+ C882 F0 CA F6 CA
 941+ C886 FC CA 00 CB
 941+ C88A 04 CB 06 CB
 941+ C88E 0A CB 0E CB
 941+ C892 12 CB 16 CB
 941+ C896 1A CB 1E CB
 941+ C89A 20 CB 24 CB
 942+ C89E 26 CB 2A CB                          DW SunSqr20,SunSqr21,SunSqr22,SunSqr23,SunSqr24,SunSqr25,SunSqr26,SunSqr27,SunSqr28,SunSqr29,SunSqr2A,SunSqr2B,SunSqr2C,SunSqr2D,SunSqr2E,SunSqr2F
 942+ C8A2 2E CB 30 CB
 942+ C8A6 32 CB 36 CB
 942+ C8AA 38 CB 3A CB
 942+ C8AE 3E CB 40 CB
 942+ C8B2 42 CB 44 CB
 942+ C8B6 48 CB 4A CB
 942+ C8BA 4C CB 50 CB
 943+ C8BE 54 CB 58 CB                          DW SunSqr30,SunSqr31,SunSqr32,SunSqr33,SunSqr34,SunSqr35,SunSqr36,SunSqr37,SunSqr38,SunSqr39,SunSqr3A,SunSqr3B,SunSqr3C,SunSqr3D,SunSqr3E,SunSqr3F
 943+ C8C2 5C CB 60 CB
 943+ C8C6 62 CB 66 CB
 943+ C8CA 6A CB 6E CB
 943+ C8CE 70 CB 74 CB
 943+ C8D2 78 CB 7C CB
 943+ C8D6 80 CB 84 CB
 943+ C8DA 88 CB 8C CB
 944+ C8DE 90 CB 94 CB                          DW SunSqr40,SunSqr41,SunSqr42,SunSqr43,SunSqr44,SunSqr45,SunSqr46,SunSqr47,SunSqr48,SunSqr49,SunSqr4A,SunSqr4B,SunSqr4C,SunSqr4D,SunSqr4E,SunSqr4F
 944+ C8E2 98 CB 9C CB
 944+ C8E6 A0 CB A4 CB
 944+ C8EA A8 CB AC CB
 944+ C8EE B0 CB B4 CB
 944+ C8F2 B8 CB BC CB
 944+ C8F6 C0 CB C4 CB
 944+ C8FA C8 CB CC CB
 945+ C8FE D0 CB D2 CB                          DW SunSqr50,SunSqr51,SunSqr52,SunSqr53,SunSqr54,SunSqr55,SunSqr56,SunSqr57,SunSqr58,SunSqr59,SunSqr5A,SunSqr5B,SunSqr5C,SunSqr5D,SunSqr5E,SunSqr5F
 945+ C902 D6 CB DA CB
 945+ C906 DE CB E2 CB
 945+ C90A E6 CB EA CB
 945+ C90E EE CB F0 CB
 945+ C912 F4 CB F8 CB
 945+ C916 FC CB 00 CC
 945+ C91A 04 CC 06 CC
 946+ C91E 0A CC 0E CC                          DW SunSqr60,SunSqr61,SunSqr62,SunSqr63,SunSqr64,SunSqr65,SunSqr66,SunSqr67,SunSqr68,SunSqr69,SunSqr6A,SunSqr6B,SunSqr6C,SunSqr6D,SunSqr6E,SunSqr6F
 946+ C922 12 CC 16 CC
 946+ C926 18 CC 1C CC
 946+ C92A 20 CC 24 CC
 946+ C92E 28 CC 2A CC
 946+ C932 2E CC 32 CC
 946+ C936 36 CC 38 CC
 946+ C93A 3A CC 3E CC
 947+ C93E 42 CC 46 CC                          DW SunSqr70,SunSqr71,SunSqr72,SunSqr73,SunSqr74,SunSqr75,SunSqr76,SunSqr77,SunSqr78,SunSqr79,SunSqr7A,SunSqr7B,SunSqr7C,SunSqr7D,SunSqr7E,SunSqr7F
 947+ C942 4A CC 4E CC
 947+ C946 52 CC 56 CC
 947+ C94A 58 CC 5C CC
 947+ C94E 60 CC 62 CC
 947+ C952 66 CC 6A CC
 947+ C956 6E CC 70 CC
 947+ C95A 74 CC 78 CC
 948+ C95E 7C CC 7E CC                          DW SunSqr80,SunSqr81,SunSqr82,SunSqr83,SunSqr84,SunSqr85,SunSqr86,SunSqr87,SunSqr88,SunSqr89,SunSqr8A,SunSqr8B,SunSqr8C,SunSqr8D,SunSqr8E,SunSqr8F
 948+ C962 82 CC 84 CC
 948+ C966 88 CC 8C CC
 948+ C96A 90 CC 92 CC
 948+ C96E 96 CC 9A CC
 948+ C972 9C CC A0 CC
 948+ C976 A4 CC A6 CC
 948+ C97A AA CC AE CC
 949+ C97E B0 CC B4 CC                          DW SunSqr90,SunSqr91,SunSqr92,SunSqr93,SunSqr94,SunSqr95,SunSqr96,SunSqr97,SunSqr98,SunSqr99,SunSqr9A,SunSqr9B,SunSqr9C,SunSqr9D,SunSqr9E,SunSqr9F
 949+ C982 B8 CC BA CC
 949+ C986 BE CC C2 CC
 949+ C98A C4 CC C8 CC
 949+ C98E CC CC CE CC
 949+ C992 D2 CC D6 CC
 949+ C996 D8 CC DC CC
 949+ C99A E0 CC E2 CC
 950+ C99E E6 CC EA CC                          DW SunSqrA0,SunSqrA1,SunSqrA2,SunSqrA3,SunSqrA4,SunSqrA5,SunSqrA6,SunSqrA7,SunSqrA8,SunSqrA9,SunSqrAA,SunSqrAB,SunSqrAC,SunSqrAD,SunSqrAE,SunSqrAF
 950+ C9A2 EC CC F0 CC
 950+ C9A6 F2 CC F6 CC
 950+ C9AA FA CC FC CC
 950+ C9AE 00 CD 02 CD
 950+ C9B2 06 CD 0A CD
 950+ C9B6 0C CD 10 CD
 950+ C9BA 14 CD 16 CD
 951+ C9BE 18 CD 1A CD                          DW SunSqrB0,SunSqrB1,SunSqrB2,SunSqrB3,SunSqrB4,SunSqrB5,SunSqrB6,SunSqrB7,SunSqrB8,SunSqrB9,SunSqrBA,SunSqrBB,SunSqrBC,SunSqrBD,SunSqrBE,SunSqrBF
 951+ C9C2 1E CD 22 CD
 951+ C9C6 24 CD 28 CD
 951+ C9CA 2A CD 2E CD
 951+ C9CE 32 CD 36 CD
 951+ C9D2 38 CD 3A CD
 951+ C9D6 3E CD 40 CD
 951+ C9DA 44 CD 48 CD
 952+ C9DE 4A CD 4E CD                          DW SunSqrC0,SunSqrC1,SunSqrC2,SunSqrC3,SunSqrC4,SunSqrC5,SunSqrC6,SunSqrC7,SunSqrC8,SunSqrC9,SunSqrCA,SunSqrCB,SunSqrCC,SunSqrCD,SunSqrCE,SunSqrCF
 952+ C9E2 50 CD 54 CD
 952+ C9E6 56 CD 5A CD
 952+ C9EA 5E CD 60 CD
 952+ C9EE 62 CD 64 CD
 952+ C9F2 68 CD 6A CD
 952+ C9F6 6E CD 72 CD
 952+ C9FA 74 CD 78 CD
 953+ C9FE 7A CD 7E CD                          DW SunSqrD0,SunSqrD1,SunSqrD2,SunSqrD3,SunSqrD4,SunSqrD5,SunSqrD6,SunSqrD7,SunSqrD8,SunSqrD9,SunSqrDA,SunSqrDB,SunSqrDC,SunSqrDD,SunSqrDE,SunSqrDF
 953+ CA02 80 CD 84 CD
 953+ CA06 86 CD 8A CD
 953+ CA0A 8E CD 90 CD
 953+ CA0E 94 CD 96 CD
 953+ CA12 9A CD 9C CD
 953+ CA16 A0 CD A2 CD
 953+ CA1A A4 CD A6 CD
 954+ CA1E AA CD AE CD                          DW SunSqrE0,SunSqrE1,SunSqrE2,SunSqrE3,SunSqrE4,SunSqrE5,SunSqrE6,SunSqrE7,SunSqrE8,SunSqrE9,SunSqrEA,SunSqrEB,SunSqrEC,SunSqrED,SunSqrEE,SunSqrEF
 954+ CA22 B2 CD B6 CD
 954+ CA26 BA CD BE CD
 954+ CA2A C0 CD C4 CD
 954+ CA2E C8 CD CC CD
 954+ CA32 CE CD D2 CD
 954+ CA36 D4 CD D6 CD
 954+ CA3A D8 CD DC CD
 955+ CA3E DE CD E0 CD                          DW SunSqrF0,SunSqrF1,SunSqrF2,SunSqrF3,SunSqrF4,SunSqrF5,SunSqrF6,SunSqrF7,SunSqrF8,SunSqrF9,SunSqrFA,SunSqrFB,SunSqrFC,SunSqrFD,SunSqrFE,SunSqrFF
 955+ CA42 E2 CD E6 CD
 955+ CA46 E8 CD EC CD
 955+ CA4A EE CD F2 CD
 955+ CA4E F4 CD F8 CD
 955+ CA52 FA CD FE CD
 955+ CA56 00 CE 04 CE
 955+ CA5A 06 CE 08 CE
 956+ CA5E
 957+ CA5E              SunSquareRootTable:
 958+ CA5E 00 00        SunSqr00:               DB $00,   0
 959+ CA60 04 02                                DB $04,   2
 960+ CA62 10 04                                DB $10,   4
 961+ CA64 24 06                                DB $24,   6
 962+ CA66 40 08                                DB $40,   8
 963+ CA68 64 0A                                DB $64,  10
 964+ CA6A 90 0C                                DB $90,  12
 965+ CA6C C4 0E                                DB $C4,  14
 966+ CA6E FF 0F                                DB $FF,  15
 967+ CA70 00 10        SunSqr01:               DB $00,  16
 968+ CA72 21 11                                DB $21,  17
 969+ CA74 44 12                                DB $44,  18
 970+ CA76 69 13                                DB $69,  19
 971+ CA78 90 14                                DB $90,  20
 972+ CA7A B9 15                                DB $B9,  21
 973+ CA7C FF 16                                DB $FF,  22
 974+ CA7E 11 17        SunSqr02:               DB $11,  23
 975+ CA80 40 18                                DB $40,  24
 976+ CA82 71 19                                DB $71,  25
 977+ CA84 A4 1A                                DB $A4,  26
 978+ CA86 D9 1B                                DB $D9,  27
 979+ CA88 FF 1B                                DB $FF,  27
 980+ CA8A 10 1C        SunSqr03:               DB $10,  28
 981+ CA8C 49 1D                                DB $49,  29
 982+ CA8E 84 1E                                DB $84,  30
 983+ CA90 C1 1F                                DB $C1,  31
 984+ CA92 FF 1F                                DB $FF,  31
 985+ CA94 00 20        SunSqr04:               DB $00,  32
 986+ CA96 41 21                                DB $41,  33
 987+ CA98 84 22                                DB $84,  34
 988+ CA9A FF 23                                DB $FF,  35
 989+ CA9C 10 24        SunSqr05:               DB $10,  36
 990+ CA9E 59 25                                DB $59,  37
 991+ CAA0 A4 26                                DB $A4,  38
 992+ CAA2 FF 27                                DB $FF,  39
 993+ CAA4 40 28        SunSqr06:               DB $40,  40
 994+ CAA6 91 29                                DB $91,  41
 995+ CAA8 E4 2A                                DB $E4,  42
 996+ CAAA FF 2A                                DB $FF,  42
 997+ CAAC 39 2B        SunSqr07:               DB $39,  43
 998+ CAAE 90 2C                                DB $90,  44
 999+ CAB0 E9 2D                                DB $E9,  45
1000+ CAB2 FF 2D                                DB $FF,  45
1001+ CAB4 44 2E        SunSqr08:               DB $44,  46
1002+ CAB6 A1 2F                                DB $A1,  47
1003+ CAB8 FF 2F                                DB $FF,  47
1004+ CABA 00 30        SunSqr09:               DB $00,  48
1005+ CABC 61 31                                DB $61,  49
1006+ CABE C4 32                                DB $C4,  50
1007+ CAC0 FF 32                                DB $FF,  50
1008+ CAC2 29 33        SunSqr0A:               DB $29,  51
1009+ CAC4 90 34                                DB $90,  52
1010+ CAC6 FF 35                                DB $FF,  53
1011+ CAC8 64 36        SunSqr0B:               DB $64,  54
1012+ CACA FF 37                                DB $FF,  55
1013+ CACC 40 38        SunSqr0C:               DB $40,  56
1014+ CACE B1 39                                DB $B1,  57
1015+ CAD0 FF 39                                DB $FF,  57
1016+ CAD2 24 3A        SunSqr0D:               DB $24,  58
1017+ CAD4 99 3B                                DB $99,  59
1018+ CAD6 FF 3B                                DB $FF,  59
1019+ CAD8 10 3C        SunSqr0E:               DB $10,  60
1020+ CADA 89 3D                                DB $89,  61
1021+ CADC FF 3D                                DB $FF,  61
1022+ CADE 04 3E        SunSqr0F:               DB $04,  62
1023+ CAE0 81 3F                                DB $81,  63
1024+ CAE2 FF 3F                                DB $FF,  63
1025+ CAE4 00 40        SunSqr10:               DB $00,  64
1026+ CAE6 81 41                                DB $81,  65
1027+ CAE8 FF 41                                DB $FF,  65
1028+ CAEA 04 42        SunSqr11:               DB $04,  66
1029+ CAEC 89 43                                DB $89,  67
1030+ CAEE FF 43                                DB $FF,  67
1031+ CAF0 10 44        SunSqr12:               DB $10,  68
1032+ CAF2 99 45                                DB $99,  69
1033+ CAF4 FF 45                                DB $FF,  69
1034+ CAF6 24 46        SunSqr13:               DB $24,  70
1035+ CAF8 B1 47                                DB $B1,  71
1036+ CAFA FF 47                                DB $FF,  71
1037+ CAFC 40 48        SunSqr14:               DB $40,  72
1038+ CAFE FF 49                                DB $FF,  73
1039+ CB00 64 4A        SunSqr15:               DB $64,  74
1040+ CB02 FF 4B                                DB $FF,  75
1041+ CB04 FF 4C        SunSqr16:               DB $FF,  76
1042+ CB06 C4 4D        SunSqr17:               DB $C4,  77
1043+ CB08 FF 4E                                DB $FF,  78
1044+ CB0A 61 4F        SunSqr18:               DB $61,  79
1045+ CB0C FF 4F                                DB $FF,  79
1046+ CB0E 00 50        SunSqr19:               DB $00,  80
1047+ CB10 FF 51                                DB $FF,  81
1048+ CB12 44 52        SunSqr1A:               DB $44,  82
1049+ CB14 FF 53                                DB $FF,  83
1050+ CB16 90 54        SunSqr1B:               DB $90,  84
1051+ CB18 FF 54                                DB $FF,  84
1052+ CB1A 39 55        SunSqr1C:               DB $39,  85
1053+ CB1C FF 56                                DB $FF,  86
1054+ CB1E FF 57        SunSqr1D:               DB $FF,  87
1055+ CB20 40 58        SunSqr1E:               DB $40,  88
1056+ CB22 FF 59                                DB $FF,  89
1057+ CB24 FF 5A        SunSqr1F:               DB $FF,  90
1058+ CB26 59 5B        SunSqr20:               DB $59,  91
1059+ CB28 FF 5B                                DB $FF,  91
1060+ CB2A 10 5C        SunSqr21:               DB $10,  92
1061+ CB2C FF 5D                                DB $FF,  93
1062+ CB2E FF 5E        SunSqr22:               DB $FF,  94
1063+ CB30 FF 5F        SunSqr23:               DB $FF,  95
1064+ CB32 00 60        SunSqr24:               DB $00,  96
1065+ CB34 FF 61                                DB $FF,  97
1066+ CB36 84 62        SunSqr25:               DB $84,  98
1067+ CB38 49 63        SunSqr26:               DB $49,  99
1068+ CB3A 10 64        SunSqr27:               DB $10, 100
1069+ CB3C FF 65                                DB $FF, 101
1070+ CB3E FF 66        SunSqr28:               DB $FF, 102
1071+ CB40 FF 67        SunSqr29:               DB $FF, 103
1072+ CB42 FF 68        SunSqr2A:               DB $FF, 104
1073+ CB44 11 69        SunSqr2B:               DB $11, 105
1074+ CB46 FF 6A                                DB $FF, 106
1075+ CB48 FF 6B        SunSqr2C:               DB $FF, 107
1076+ CB4A FF 6C        SunSqr2D:               DB $FF, 108
1077+ CB4C 69 6D        SunSqr2E:               DB $69, 109
1078+ CB4E FF 6E                                DB $FF, 110
1079+ CB50 44 6E        SunSqr2F:               DB $44, 110
1080+ CB52 FF 6F                                DB $FF, 111
1081+ CB54 21 6F        SunSqr30:               DB $21, 111
1082+ CB56 FF 70                                DB $FF, 112
1083+ CB58 00 70        SunSqr31:               DB $00, 112
1084+ CB5A FF 71                                DB $FF, 113
1085+ CB5C C4 72        SunSqr32:               DB $C4, 114
1086+ CB5E FF 72                                DB $FF, 114
1087+ CB60 FF 73        SunSqr33:               DB $FF, 115
1088+ CB62 90 74        SunSqr34:               DB $90, 116
1089+ CB64 FF 75                                DB $FF, 117
1090+ CB66 79 75        SunSqr35:               DB $79, 117
1091+ CB68 FF 76                                DB $FF, 118
1092+ CB6A 64 76        SunSqr36:               DB $64, 118
1093+ CB6C 64 77                                DB $64, 119
1094+ CB6E 51 77        SunSqr37:               DB $51, 119
1095+ CB70 40 78        SunSqr38:               DB $40, 120
1096+ CB72 FF 79                                DB $FF, 121
1097+ CB74 31 79        SunSqr39:               DB $31, 121
1098+ CB76 FF 7A                                DB $FF, 122
1099+ CB78 24 7A        SunSqr3A:               DB $24, 122
1100+ CB7A FF 7B                                DB $FF, 123
1101+ CB7C 19 7B        SunSqr3B:               DB $19, 123
1102+ CB7E FF 7C                                DB $FF, 124
1103+ CB80 10 7C        SunSqr3C:               DB $10, 124
1104+ CB82 FF 7D                                DB $FF, 125
1105+ CB84 09 7D        SunSqr3D:               DB $09, 125
1106+ CB86 FF 7D                                DB $FF, 125
1107+ CB88 04 7E        SunSqr3E:               DB $04, 126
1108+ CB8A FF 7E                                DB $FF, 126
1109+ CB8C 01 7F        SunSqr3F:               DB $01, 127
1110+ CB8E FF 7F                                DB $FF, 127
1111+ CB90 00 80        SunSqr40:               DB $00, 128
1112+ CB92 FF 80                                DB $FF, 128
1113+ CB94 01 81        SunSqr41:               DB $01, 129
1114+ CB96 FF 82                                DB $FF, 130
1115+ CB98 04 82        SunSqr42:               DB $04, 130
1116+ CB9A FF 83                                DB $FF, 131
1117+ CB9C 09 83        SunSqr43:               DB $09, 131
1118+ CB9E FF 84                                DB $FF, 132
1119+ CBA0 10 84        SunSqr44:               DB $10, 132
1120+ CBA2 FF 85                                DB $FF, 133
1121+ CBA4 19 85        SunSqr45:               DB $19, 133
1122+ CBA6 FF 86                                DB $FF, 134
1123+ CBA8 24 86        SunSqr46:               DB $24, 134
1124+ CBAA FF 87                                DB $FF, 135
1125+ CBAC 31 87        SunSqr47:               DB $31, 135
1126+ CBAE FF 88                                DB $FF, 136
1127+ CBB0 40 88        SunSqr48:               DB $40, 136
1128+ CBB2 FF 89                                DB $FF, 137
1129+ CBB4 51 89        SunSqr49:               DB $51, 137
1130+ CBB6 FF 8A                                DB $FF, 138
1131+ CBB8 64 8A        SunSqr4A:               DB $64, 138
1132+ CBBA FF 8A                                DB $FF, 138
1133+ CBBC 79 8B        SunSqr4B:               DB $79, 139
1134+ CBBE FF 8B                                DB $FF, 139
1135+ CBC0 90 8C        SunSqr4C:               DB $90, 140
1136+ CBC2 FF 8C                                DB $FF, 140
1137+ CBC4 A9 8D        SunSqr4D:               DB $A9, 141
1138+ CBC6 FF 8D                                DB $FF, 141
1139+ CBC8 C4 8E        SunSqr4E:               DB $C4, 142
1140+ CBCA FF 8E                                DB $FF, 142
1141+ CBCC E1 8F        SunSqr4F:               DB $E1, 143
1142+ CBCE FF 8F                                DB $FF, 143
1143+ CBD0 FF 8F        SunSqr50:               DB $FF, 143
1144+ CBD2 00 90        SunSqr51:               DB $00, 144
1145+ CBD4 FF 90                                DB $FF, 144
1146+ CBD6 21 91        SunSqr52:               DB $21, 145
1147+ CBD8 FF 91                                DB $FF, 145
1148+ CBDA 44 92        SunSqr53:               DB $44, 146
1149+ CBDC FF 92                                DB $FF, 146
1150+ CBDE 69 93        SunSqr54:               DB $69, 147
1151+ CBE0 FF 93                                DB $FF, 147
1152+ CBE2 90 94        SunSqr55:               DB $90, 148
1153+ CBE4 FF 94                                DB $FF, 148
1154+ CBE6 B9 95        SunSqr56:               DB $B9, 149
1155+ CBE8 FF 95                                DB $FF, 149
1156+ CBEA E4 96        SunSqr57:               DB $E4, 150
1157+ CBEC FF 96                                DB $FF, 150
1158+ CBEE FF 96        SunSqr58:               DB $FF, 150
1159+ CBF0 11 97        SunSqr59:               DB $11, 151
1160+ CBF2 FF 97                                DB $FF, 151
1161+ CBF4 40 98        SunSqr5A:               DB $40, 152
1162+ CBF6 FF 98                                DB $FF, 152
1163+ CBF8 71 99        SunSqr5B:               DB $71, 153
1164+ CBFA FF 99                                DB $FF, 153
1165+ CBFC A4 9A        SunSqr5C:               DB $A4, 154
1166+ CBFE FF 9A                                DB $FF, 154
1167+ CC00 D9 9B        SunSqr5D:               DB $D9, 155
1168+ CC02 FF 9B                                DB $FF, 155
1169+ CC04 FF 9B        SunSqr5E:               DB $FF, 155
1170+ CC06 10 9C        SunSqr5F:               DB $10, 156
1171+ CC08 FF 9C                                DB $FF, 156
1172+ CC0A 49 9D        SunSqr60:               DB $49, 157
1173+ CC0C FF 9D                                DB $FF, 157
1174+ CC0E 84 9E        SunSqr61:               DB $84, 158
1175+ CC10 FF 9E                                DB $FF, 158
1176+ CC12 C1 9F        SunSqr62:               DB $C1, 159
1177+ CC14 FF 9F                                DB $FF, 159
1178+ CC16 FF 9F        SunSqr63:               DB $FF, 159
1179+ CC18 00 A0        SunSqr64:               DB $00, 160
1180+ CC1A FF A0                                DB $FF, 160
1181+ CC1C 41 A1        SunSqr65:               DB $41, 161
1182+ CC1E FF A1                                DB $FF, 161
1183+ CC20 84 A2        SunSqr66:               DB $84, 162
1184+ CC22 FF A2                                DB $FF, 162
1185+ CC24 C9 A3        SunSqr67:               DB $C9, 163
1186+ CC26 FF A3                                DB $FF, 163
1187+ CC28 FF A3        SunSqr68:               DB $FF, 163
1188+ CC2A 10 A4        SunSqr69:               DB $10, 164
1189+ CC2C FF A4                                DB $FF, 164
1190+ CC2E 59 A5        SunSqr6A:               DB $59, 165
1191+ CC30 FF A5                                DB $FF, 165
1192+ CC32 A4 A6        SunSqr6B:               DB $A4, 166
1193+ CC34 FF A6                                DB $FF, 166
1194+ CC36 FF A7        SunSqr6C:               DB $FF, 167
1195+ CC38 FF A7        SunSqr6D:               DB $FF, 167
1196+ CC3A 40 A8        SunSqr6E:               DB $40, 168
1197+ CC3C FF A8                                DB $FF, 168
1198+ CC3E 91 A9        SunSqr6F:               DB $91, 169
1199+ CC40 FF A9                                DB $FF, 169
1200+ CC42 E4 AA        SunSqr70:               DB $E4, 170
1201+ CC44 FF AA                                DB $FF, 170
1202+ CC46 00 AA        SunSqr71:               DB $00, 170
1203+ CC48 FF AA                                DB $FF, 170
1204+ CC4A 39 AB        SunSqr72:               DB $39, 171
1205+ CC4C FF AB                                DB $FF, 171
1206+ CC4E 90 AC        SunSqr73:               DB $90, 172
1207+ CC50 FF AC                                DB $FF, 172
1208+ CC52 E9 AD        SunSqr74:               DB $E9, 173
1209+ CC54 FF AD                                DB $FF, 173
1210+ CC56 FF AD        SunSqr75:               DB $FF, 173
1211+ CC58 44 AE        SunSqr76:               DB $44, 174
1212+ CC5A FF AE                                DB $FF, 174
1213+ CC5C A1 AF        SunSqr77:               DB $A1, 175
1214+ CC5E FF AF                                DB $FF, 175
1215+ CC60 FF AF        SunSqr78:               DB $FF, 175
1216+ CC62 00 B0        SunSqr79:               DB $00, 176
1217+ CC64 FF B0                                DB $FF, 176
1218+ CC66 61 B1        SunSqr7A:               DB $61, 177
1219+ CC68 FF B1                                DB $FF, 177
1220+ CC6A C4 B2        SunSqr7B:               DB $C4, 178
1221+ CC6C FF B2                                DB $FF, 178
1222+ CC6E FF B2        SunSqr7C:               DB $FF, 178
1223+ CC70 29 B3        SunSqr7D:               DB $29, 179
1224+ CC72 FF B3                                DB $FF, 179
1225+ CC74 90 B4        SunSqr7E:               DB $90, 180
1226+ CC76 FF B4                                DB $FF, 180
1227+ CC78 F9 B5        SunSqr7F:               DB $F9, 181
1228+ CC7A FF B5                                DB $FF, 181
1229+ CC7C FF B5        SunSqr80:               DB $FF, 181
1230+ CC7E 64 B6        SunSqr81:               DB $64, 182
1231+ CC80 FF B6                                DB $FF, 182
1232+ CC82 D1 B7        SunSqr82:               DB $D1, 183
1233+ CC84 FF B7        SunSqr83:               DB $FF, 183
1234+ CC86 FF B7                                DB $FF, 183
1235+ CC88 40 B8        SunSqr84:               DB $40, 184
1236+ CC8A FF B8                                DB $FF, 184
1237+ CC8C B1 B9        SunSqr85:               DB $B1, 185
1238+ CC8E FF B9                                DB $FF, 185
1239+ CC90 FF B9        SunSqr86:               DB $FF, 185
1240+ CC92 24 BA        SunSqr87:               DB $24, 186
1241+ CC94 FF BA                                DB $FF, 186
1242+ CC96 99 BB        SunSqr88:               DB $99, 187
1243+ CC98 FF BB                                DB $FF, 187
1244+ CC9A FF BB        SunSqr89:               DB $FF, 187
1245+ CC9C 10 BC        SunSqr8A:               DB $10, 188
1246+ CC9E FF BC                                DB $FF, 188
1247+ CCA0 89 BD        SunSqr8B:               DB $89, 189
1248+ CCA2 FF BD                                DB $FF, 189
1249+ CCA4 FF BD        SunSqr8C:               DB $FF, 189
1250+ CCA6 04 BE        SunSqr8D:               DB $04, 190
1251+ CCA8 FF BE                                DB $FF, 190
1252+ CCAA 81 BF        SunSqr8E:               DB $81, 191
1253+ CCAC FF BF                                DB $FF, 191
1254+ CCAE FF BF        SunSqr8F:               DB $FF, 191
1255+ CCB0 00 C0        SunSqr90:               DB $00, 192
1256+ CCB2 FF C0                                DB $FF, 192
1257+ CCB4 81 C1        SunSqr91:               DB $81, 193
1258+ CCB6 FF C1                                DB $FF, 193
1259+ CCB8 FF C1        SunSqr92:               DB $FF, 193
1260+ CCBA 04 C2        SunSqr93:               DB $04, 194
1261+ CCBC FF C2                                DB $FF, 194
1262+ CCBE 89 C3        SunSqr94:               DB $89, 195
1263+ CCC0 FF C3                                DB $FF, 195
1264+ CCC2 FF C3        SunSqr95:               DB $FF, 195
1265+ CCC4 10 C4        SunSqr96:               DB $10, 196
1266+ CCC6 FF C4                                DB $FF, 196
1267+ CCC8 99 C5        SunSqr97:               DB $99, 197
1268+ CCCA FF C5                                DB $FF, 197
1269+ CCCC FF C5        SunSqr98:               DB $FF, 197
1270+ CCCE 24 C6        SunSqr99:               DB $24, 198
1271+ CCD0 FF C6                                DB $FF, 198
1272+ CCD2 B1 C7        SunSqr9A:               DB $B1, 199
1273+ CCD4 FF C7                                DB $FF, 199
1274+ CCD6 FF C7        SunSqr9B:               DB $FF, 199
1275+ CCD8 40 C8        SunSqr9C:               DB $40, 200
1276+ CCDA FF C8                                DB $FF, 200
1277+ CCDC D1 C9        SunSqr9D:               DB $D1, 201
1278+ CCDE FF C9                                DB $FF, 201
1279+ CCE0 FF C9        SunSqr9E:               DB $FF, 201
1280+ CCE2 64 CA        SunSqr9F:               DB $64, 202
1281+ CCE4 FF CA                                DB $FF, 202
1282+ CCE6 F9 CB        SunSqrA0:               DB $F9, 203
1283+ CCE8 FF CB                                DB $FF, 203
1284+ CCEA FF CB        SunSqrA1:               DB $FF, 203
1285+ CCEC 90 CC        SunSqrA2:               DB $90, 204
1286+ CCEE FF CC                                DB $FF, 204
1287+ CCF0 FF CC        SunSqrA3:               DB $FF, 204
1288+ CCF2 29 CD        SunSqrA4:               DB $29, 205
1289+ CCF4 FF CD                                DB $FF, 205
1290+ CCF6 C4 CE        SunSqrA5:               DB $C4, 206
1291+ CCF8 FF CE                                DB $FF, 206
1292+ CCFA FF CE        SunSqrA6:               DB $FF, 206
1293+ CCFC 61 CF        SunSqrA7:               DB $61, 207
1294+ CCFE FF CF                                DB $FF, 207
1295+ CD00 FF CF        SunSqrA8:               DB $FF, 207
1296+ CD02 00 D0        SunSqrA9:               DB $00, 208
1297+ CD04 FF D0                                DB $FF, 208
1298+ CD06 A1 D1        SunSqrAA:               DB $A1, 209
1299+ CD08 FF D1                                DB $FF, 209
1300+ CD0A FF D1        SunSqrAB:               DB $FF, 209
1301+ CD0C 44 D2        SunSqrAC:               DB $44, 210
1302+ CD0E FF D2                                DB $FF, 210
1303+ CD10 E9 D3        SunSqrAD:               DB $E9, 211
1304+ CD12 FF D3                                DB $FF, 211
1305+ CD14 FF D3        SunSqrAE:               DB $FF, 211
1306+ CD16 90 D4        SunSqrAF:               DB $90, 212
1307+ CD18 FF D4        SunSqrB0:               DB $FF, 212
1308+ CD1A 39 D5        SunSqrB1:               DB $39, 213
1309+ CD1C FF D5                                DB $FF, 213
1310+ CD1E E4 D6        SunSqrB2:               DB $E4, 214
1311+ CD20 FF D6                                DB $FF, 214
1312+ CD22 FF D6        SunSqrB3:               DB $FF, 214
1313+ CD24 91 D7        SunSqrB4:               DB $91, 215
1314+ CD26 FF D7                                DB $FF, 215
1315+ CD28 FF D7        SunSqrB5:               DB $FF, 215
1316+ CD2A 40 D8        SunSqrB6:               DB $40, 216
1317+ CD2C FF D8                                DB $FF, 216
1318+ CD2E F1 D9        SunSqrB7:               DB $F1, 217
1319+ CD30 FF D9                                DB $FF, 217
1320+ CD32 FF D9        SunSqrB8:               DB $FF, 217
1321+ CD34 FF D9                                DB $FF, 217
1322+ CD36 A4 DA        SunSqrB9:               DB $A4, 218
1323+ CD38 FF DA        SunSqrBA:               DB $FF, 218 ; we can reuse SunSeqrBA as  $FF for B9 terminator as well as they have the same target
1324+ CD3A 59 DB        SunSqrBB:               DB $59, 219
1325+ CD3C FF DB                                DB $FF, 219
1326+ CD3E FF DB        SunSqrBC:               DB $FF, 219
1327+ CD40 10 DC        SunSqrBD:               DB $10, 220
1328+ CD42 FF DC                                DB $FF, 220
1329+ CD44 C9 DD        SunSqrBE:               DB $C9, 221
1330+ CD46 FF DD                                DB $FF, 221
1331+ CD48 FF DD        SunSqrBF:               DB $FF, 221
1332+ CD4A 84 DE        SunSqrC0:               DB $84, 222
1333+ CD4C FF DE                                DB $FF, 222
1334+ CD4E FF DE        SunSqrC1:               DB $FF, 222
1335+ CD50 41 DF        SunSqrC2:               DB $41, 223
1336+ CD52 FF DF                                DB $FF, 223
1337+ CD54 FF DF        SunSqrC3:               DB $FF, 223
1338+ CD56 00 E0        SunSqrC4:               DB $00, 224
1339+ CD58 FF E0                                DB $FF, 224
1340+ CD5A C1 E1        SunSqrC5:               DB $C1, 225
1341+ CD5C FF E1                                DB $FF, 225
1342+ CD5E FF E1        SunSqrC6:               DB $FF, 225
1343+ CD60 84 E2        SunSqrC7:               DB $84, 226
1344+ CD62 FF E2        SunSqrC8:               DB $FF, 226
1345+ CD64 49 E3        SunSqrC9:               DB $49, 227
1346+ CD66 FF E3                                DB $FF, 227
1347+ CD68 FF E4        SunSqrCA:               DB $FF, 228
1348+ CD6A 10 E4        SunSqrCB:               DB $10, 228
1349+ CD6C FF E4                                DB $FF, 228
1350+ CD6E D9 E5        SunSqrCC:               DB $D9, 229
1351+ CD70 FF E5                                DB $FF, 229
1352+ CD72 FF E5        SunSqrCD:               DB $FF, 229
1353+ CD74 A4 E6        SunSqrCE:               DB $A4, 230
1354+ CD76 FF E6                                DB $FF, 230
1355+ CD78 FF E6        SunSqrCF:               DB $FF, 230
1356+ CD7A 71 E7        SunSqrD0:               DB $71, 231
1357+ CD7C FF E7                                DB $FF, 231
1358+ CD7E FF E7        SunSqrD1:               DB $FF, 231
1359+ CD80 40 E8        SunSqrD2:               DB $40, 232
1360+ CD82 FF E8                                DB $FF, 232
1361+ CD84 FF E8        SunSqrD3:               DB $FF, 232
1362+ CD86 11 E9        SunSqrD4:               DB $11, 233
1363+ CD88 FF E9                                DB $FF, 233
1364+ CD8A E4 EA        SunSqrD5:               DB $E4, 234
1365+ CD8C FF EA                                DB $FF, 234
1366+ CD8E FF EA        SunSqrD6:               DB $FF, 234
1367+ CD90 B9 EB        SunSqrD7:               DB $B9, 235
1368+ CD92 FF EB                                DB $FF, 235
1369+ CD94 FF EB        SunSqrD8:               DB $FF, 235
1370+ CD96 90 EC        SunSqrD9:               DB $90, 236
1371+ CD98 FF EC                                DB $FF, 236
1372+ CD9A FF EC        SunSqrDA:               DB $FF, 236
1373+ CD9C 69 ED        SunSqrDB:               DB $69, 237
1374+ CD9E FF ED                                DB $FF, 237
1375+ CDA0 FF ED        SunSqrDC:               DB $FF, 237
1376+ CDA2 44 EE        SunSqrDD:               DB $44, 238
1377+ CDA4 FF EE        SunSqrDE:               DB $FF, 238
1378+ CDA6 21 EF        SunSqrDF:               DB $21, 239
1379+ CDA8 FF EF                                DB $FF, 239
1380+ CDAA 00 F0        SunSqrE0:               DB $00, 240
1381+ CDAC FF F0                                DB $FF, 240
1382+ CDAE 00 F0        SunSqrE1:               DB $00, 240
1383+ CDB0 FF F0                                DB $FF, 240
1384+ CDB2 E1 F1        SunSqrE2:               DB $E1, 241
1385+ CDB4 FF F1                                DB $FF, 241
1386+ CDB6 E1 F1        SunSqrE3:               DB $E1, 241
1387+ CDB8 FF F1                                DB $FF, 241
1388+ CDBA C4 F2        SunSqrE4:               DB $C4, 242
1389+ CDBC FF F2                                DB $FF, 242
1390+ CDBE FF F2        SunSqrE5:               DB $FF, 242
1391+ CDC0 A9 F3        SunSqrE6:               DB $A9, 243
1392+ CDC2 FF F3                                DB $FF, 243
1393+ CDC4 FF F3        SunSqrE7:               DB $FF, 243
1394+ CDC6 FF F3                                DB $FF, 243
1395+ CDC8 90 F3        SunSqrE8:               DB $90, 243
1396+ CDCA FF F4                                DB $FF, 244
1397+ CDCC FF F4        SunSqrE9:               DB $FF, 244
1398+ CDCE 79 F5        SunSqrEA:               DB $79, 245
1399+ CDD0 FF F5                                DB $FF, 245
1400+ CDD2 FF F5        SunSqrEB:               DB $FF, 245
1401+ CDD4 64 F6        SunSqrEC:               DB $64, 246
1402+ CDD6 FF F6        SunSqrED:               DB $FF, 246
1403+ CDD8 51 F7        SunSqrEE:               DB $51, 247
1404+ CDDA FF F7                                DB $FF, 247
1405+ CDDC FF F7        SunSqrEF:               DB $FF, 247
1406+ CDDE 40 F8        SunSqrF0:               DB $40, 248
1407+ CDE0 FF F8        SunSqrF1:               DB $FF, 248
1408+ CDE2 31 F9        SunSqrF2:               DB $31, 249
1409+ CDE4 FF F9                                DB $FF, 249
1410+ CDE6 FF F9        SunSqrF3:               DB $FF, 249
1411+ CDE8 24 FA        SunSqrF4:               DB $24, 250
1412+ CDEA FF FA                                DB $FF, 250
1413+ CDEC FF FA        SunSqrF5:               DB $FF, 250
1414+ CDEE 19 FB        SunSqrF6:               DB $19, 251
1415+ CDF0 FF FB                                DB $FF, 251
1416+ CDF2 FF FB        SunSqrF7:               DB $FF, 251
1417+ CDF4 10 FC        SunSqrF8:               DB $10, 252
1418+ CDF6 FF FC                                DB $FF, 252
1419+ CDF8 FF FC        SunSqrF9:               DB $FF, 252
1420+ CDFA 09 FD        SunSqrFA:               DB $09, 253
1421+ CDFC FF FD                                DB $FF, 253
1422+ CDFE FF FD        SunSqrFB:               DB $FF, 253
1423+ CE00 04 FE        SunSqrFC:               DB $04, 254
1424+ CE02 FF FE                                DB $FF, 254
1425+ CE04 FF FE        SunSqrFD:               DB $FF, 254
1426+ CE06 01 FF        SunSqrFE:               DB $01, 255
1427+ CE08 FF FF        SunSqrFF:               DB $FF, 255
1428+ CE0A
1429+ CE0A
1430+ CE0A
1431+ CE0A              SunBankSize  EQU $ - StartOfSun
1432+ CE0A
1433+ CE0A
# file closed: ./Universe/Sun/sun_data.asm
1437  CE0A
1438  CE0A              ; Bank 84  ------------------------------------------------------------------------------------------------------------------------
1439  CE0A                  SLOT    PlanetBankAddr
1440  CE0A                  PAGE    BankPlanetData
1441  CE0A              	ORG	    PlanetBankAddr,BankPlanetData
1442  C000                  ;TODO INCLUDE "./Universe/planet_data.asm"
1443  C000
1444  C000                  SLOT    GalaxyDataAddr
1445  C000                  PAGE    BankGalaxyData1
1446  C000              	ORG GalaxyDataAddr, BankGalaxyData1
1447  E000 FF           GALAXYDATABlock1         DB $FF
1448  E001 00 00 00...                           DS $1FFF                 ; just allocate 8000 bytes for now
1449  0000
1450  0000                  SLOT    GalaxyDataAddr
1451  0000                  PAGE    BankGalaxyData2
1452  0000              	ORG GalaxyDataAddr, BankGalaxyData2
1453  E000 FF           GALAXYDATABlock2         DB $FF
1454  E001 00 00 00...                           DS $1FFF                 ; just allocate 8000 bytes for now
1455  0000                  SLOT    GalaxyDataAddr
1456  0000                  PAGE    BankGalaxyData3
1457  0000              	ORG GalaxyDataAddr, BankGalaxyData3
1458  E000 FF           GALAXYDATABlock3         DB $FF
1459  E001 00 00 00...                           DS $1FFF                 ; just allocate 8000 bytes for now
1460  0000                  SLOT    GalaxyDataAddr
1461  0000                  PAGE    BankGalaxyData4
1462  0000              	ORG GalaxyDataAddr, BankGalaxyData4
1463  E000 FF           GALAXYDATABlock4         DB $FF
1464  E001 00 00 00...                           DS $1FFF                 ; just allocate 8000 bytes for now
1465  0000                  SLOT    GalaxyDataAddr
1466  0000                  PAGE    BankGalaxyData5
1467  0000              	ORG GalaxyDataAddr,BankGalaxyData5
1468  E000 FF           GALAXYDATABlock5         DB $FF
1469  E001 00 00 00...                           DS $1FFF                 ; just allocate 8000 bytes for now
1470  0000                  SLOT    GalaxyDataAddr
1471  0000                  PAGE    BankGalaxyData6
1472  0000              	ORG GalaxyDataAddr,BankGalaxyData6
1473  E000 FF           GALAXYDATABlock6         DB $FF
1474  E001 00 00 00...                           DS $1FFF                 ; just allocate 8000 bytes for now
1475  0000                  SLOT    GalaxyDataAddr
1476  0000                  PAGE    BankGalaxyData7
1477  0000              	ORG GalaxyDataAddr,BankGalaxyData7
1478  E000 FF           GALAXYDATABlock7         DB $FF
1479  E001 00 00 00...                           DS $1FFF                 ; just allocate 8000 bytes for now
1480  0000
1481  0000
1482  0000
1483  0000
1484  0000                  SAVENEX OPEN "EliteN.nex", $8000 , $7F00
1485  0000                  SAVENEX CFG  0,0,0,1
1486  0000                  SAVENEX AUTO
1487  0000                  SAVENEX CLOSE
1488  0000
# file closed: eliteNext.asm
